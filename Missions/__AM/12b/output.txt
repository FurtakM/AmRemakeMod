// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 103
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3851 0 0
// PrepareRussians ;
 394: CALL 4248 0 0
// PrepareAlliance ;
 398: CALL 5995 0 0
// PrepareDifficulty ;
 402: CALL 7540 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 103
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 78
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 78
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 78
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 78
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 78
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 79
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 79
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 79
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 79
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 79
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 79
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6640 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 79
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 80
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6640 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 80
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6640 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 80
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6640 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6640 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6697 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6697 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6697 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6697 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6697 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6697 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6697 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6697 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6697 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6697 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6697 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6697 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6827 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6827 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6827 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 65
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7173 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 66
2357: PUSH
2358: LD_EXP 66
2362: PUSH
2363: LD_EXP 65
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 66
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 80
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6640 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 80
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6640 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 80
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6640 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6754 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6754 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6754 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6754 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6754 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6754 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6754 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6754 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6754 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6754 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6754 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6754 0 1
3134: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3135: LD_EXP 80
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: PUSH
3144: LD_EXP 80
3148: PUSH
3149: LD_INT 2
3151: EQUAL
3152: OR
3153: IFFALSE 3168
// Connie = PrepareUnitOmega ( Connie ) ;
3155: LD_ADDR_EXP 16
3159: PUSH
3160: LD_STRING Connie
3162: PPUSH
3163: CALL 6754 0 1
3167: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3168: LD_ADDR_EXP 22
3172: PUSH
3173: LD_STRING Gordon
3175: PPUSH
3176: CALL 6754 0 1
3180: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3181: LD_ADDR_EXP 23
3185: PUSH
3186: LD_STRING Peter
3188: PPUSH
3189: CALL 6754 0 1
3193: ST_TO_ADDR
// if StevensStatus = 1 then
3194: LD_EXP 77
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3219
// Stevens = PrepareUnitOmega ( Stevens ) else
3204: LD_ADDR_EXP 3
3208: PUSH
3209: LD_STRING Stevens
3211: PPUSH
3212: CALL 6754 0 1
3216: ST_TO_ADDR
3217: GO 3232
// Baker = PrepareUnitOmega ( Baker ) ;
3219: LD_ADDR_EXP 21
3223: PUSH
3224: LD_STRING Baker
3226: PPUSH
3227: CALL 6754 0 1
3231: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3232: LD_ADDR_EXP 19
3236: PUSH
3237: LD_STRING 15_other_survivors
3239: PPUSH
3240: CALL_OW 31
3244: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3245: LD_ADDR_VAR 0 7
3249: PUSH
3250: LD_STRING 15_Vehicles_1
3252: PPUSH
3253: EMPTY
3254: PPUSH
3255: CALL_OW 30
3259: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_STRING 15_ResourcesInCargo_1
3267: PPUSH
3268: EMPTY
3269: PPUSH
3270: CALL_OW 30
3274: ST_TO_ADDR
// for i := 1 to vehicles do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_VAR 0 7
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3516
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_VAR 0 7
3302: PUSH
3303: LD_VAR 0 2
3307: ARRAY
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3313: LD_ADDR_OWVAR 37
3317: PUSH
3318: LD_VAR 0 7
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3333: LD_ADDR_OWVAR 39
3337: PUSH
3338: LD_VAR 0 7
3342: PUSH
3343: LD_VAR 0 2
3347: ARRAY
3348: PUSH
3349: LD_INT 3
3351: ARRAY
3352: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3353: LD_ADDR_OWVAR 38
3357: PUSH
3358: LD_VAR 0 7
3362: PUSH
3363: LD_VAR 0 2
3367: ARRAY
3368: PUSH
3369: LD_INT 4
3371: ARRAY
3372: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3373: LD_ADDR_OWVAR 40
3377: PUSH
3378: LD_VAR 0 7
3382: PUSH
3383: LD_VAR 0 2
3387: ARRAY
3388: PUSH
3389: LD_INT 5
3391: ARRAY
3392: ST_TO_ADDR
// if vc_weapon = 8 then
3393: LD_OWVAR 40
3397: PUSH
3398: LD_INT 8
3400: EQUAL
3401: IFFALSE 3413
// vc_weapon = 9 else
3403: LD_ADDR_OWVAR 40
3407: PUSH
3408: LD_INT 9
3410: ST_TO_ADDR
3411: GO 3433
// vc_weapon = vehicles [ i ] [ 5 ] ;
3413: LD_ADDR_OWVAR 40
3417: PUSH
3418: LD_VAR 0 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_INT 5
3431: ARRAY
3432: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3433: LD_ADDR_OWVAR 41
3437: PUSH
3438: LD_INT 40
3440: ST_TO_ADDR
// veh = CreateVehicle ;
3441: LD_ADDR_VAR 0 5
3445: PUSH
3446: CALL_OW 45
3450: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_INT 5
3458: PPUSH
3459: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3463: LD_VAR 0 5
3467: PPUSH
3468: LD_INT 300
3470: PPUSH
3471: LD_INT 800
3473: PPUSH
3474: CALL_OW 12
3478: PPUSH
3479: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PUSH
3493: LD_VAR 0 5
3497: ADD
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3499: LD_VAR 0 5
3503: PPUSH
3504: LD_INT 16
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3290
3516: POP
3517: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3518: LD_ADDR_VAR 0 9
3522: PUSH
3523: LD_INT 16
3525: PPUSH
3526: LD_INT 22
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 21
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 12
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 32
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PPUSH
3583: CALL_OW 70
3587: ST_TO_ADDR
// if cargoList > 0 then
3588: LD_VAR 0 9
3592: PUSH
3593: LD_INT 0
3595: GREATER
3596: IFFALSE 3729
// for i = 1 to cargoList do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 9
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3727
// begin if resources > 0 then
3616: LD_VAR 0 8
3620: PUSH
3621: LD_INT 0
3623: GREATER
3624: IFFALSE 3725
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 2
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3692: LD_VAR 0 9
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PPUSH
3703: LD_INT 3
3705: PPUSH
3706: LD_VAR 0 8
3710: PUSH
3711: LD_VAR 0 2
3715: ARRAY
3716: PUSH
3717: LD_INT 3
3719: ARRAY
3720: PPUSH
3721: CALL_OW 291
// end ; end ;
3725: GO 3613
3727: POP
3728: POP
// for i := 1 to heroesFromOmega do
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_EXP 20
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3775
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3747: LD_EXP 20
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_VAR 0 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 52
// end ;
3773: GO 3744
3775: POP
3776: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 58
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 72
3797: ST_TO_ADDR
// for i := 1 to others13Omega do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_EXP 19
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3844
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3816: LD_EXP 19
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 6
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 52
// end ;
3842: GO 3813
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// export function PrepareLegion ; var i ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
// uc_side = 8 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 8
3862: ST_TO_ADDR
// uc_nation = 2 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 2
3870: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3871: LD_ADDR_EXP 30
3875: PUSH
3876: LD_STRING Kurt
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL 6640 0 2
3886: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3887: LD_ADDR_EXP 36
3891: PUSH
3892: LD_STRING Kozlov
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6640 0 2
3902: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3903: LD_INT 8
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_INT 122
3911: PPUSH
3912: LD_INT 10
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3925: LD_INT 8
3927: PPUSH
3928: LD_INT 2
3930: PPUSH
3931: LD_INT 99
3933: PPUSH
3934: LD_INT 10
3936: PPUSH
3937: LD_INT 2
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3947: LD_INT 8
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 104
3955: PPUSH
3956: LD_INT 10
3958: PPUSH
3959: LD_INT 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3969: LD_INT 8
3971: PPUSH
3972: LD_INT 2
3974: PPUSH
3975: LD_INT 104
3977: PPUSH
3978: LD_INT 10
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3991: LD_INT 8
3993: PPUSH
3994: LD_INT 2
3996: PPUSH
3997: LD_INT 118
3999: PPUSH
4000: LD_INT 10
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4013: LD_INT 8
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: LD_INT 117
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4035: LD_INT 8
4037: PPUSH
4038: LD_INT 2
4040: PPUSH
4041: LD_INT 252
4043: PPUSH
4044: LD_INT 10
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: LD_INT 2
4052: PPUSH
4053: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 8
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 30
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: PUSH
4109: FOR_IN
4110: IFFALSE 4138
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4112: LD_INT 8
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_INT 10
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL 7734 0 6
4136: GO 4109
4138: POP
4139: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4140: LD_INT 8
4142: PPUSH
4143: LD_INT 2
4145: PPUSH
4146: LD_INT 140
4148: PPUSH
4149: LD_INT 10
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: CALL 7734 0 6
// arControler = UnitsInside ( ArControl ) ;
4162: LD_ADDR_EXP 56
4166: PUSH
4167: LD_INT 140
4169: PPUSH
4170: CALL_OW 313
4174: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4175: LD_INT 139
4177: PPUSH
4178: LD_EXP 56
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4191: LD_INT 138
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// hc_name = Ali Hadarach ;
4207: LD_ADDR_OWVAR 26
4211: PUSH
4212: LD_STRING Ali Hadarach
4214: ST_TO_ADDR
// hc_gallery =  ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING 
4222: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4223: LD_INT 1
4225: PPUSH
4226: LD_INT 8
4228: PPUSH
4229: CALL_OW 383
// LegionFriend = CreateHuman ;
4233: LD_ADDR_EXP 53
4237: PUSH
4238: CALL_OW 44
4242: ST_TO_ADDR
// end ; end_of_file
4243: LD_VAR 0 1
4247: RET
// export function PrepareRussians ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// uc_side = 3 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 3
4259: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4260: LD_ADDR_EXP 26
4264: PUSH
4265: LD_STRING Platonov
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL 6640 0 2
4275: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4276: LD_EXP 26
4280: PPUSH
4281: LD_INT 23
4283: PPUSH
4284: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4288: LD_ADDR_EXP 27
4292: PUSH
4293: LD_STRING Yakotich
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL 6640 0 2
4303: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4304: LD_EXP 27
4308: PPUSH
4309: LD_INT 26
4311: PPUSH
4312: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4316: LD_ADDR_EXP 37
4320: PUSH
4321: LD_STRING Kovalyuk
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL 6640 0 2
4331: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4332: LD_EXP 37
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4344: LD_ADDR_EXP 58
4348: PUSH
4349: LD_EXP 58
4353: PUSH
4354: LD_EXP 37
4358: ADD
4359: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4360: LD_ADDR_EXP 38
4364: PUSH
4365: LD_STRING Oblukov
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL 6640 0 2
4375: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4376: LD_ADDR_EXP 39
4380: PUSH
4381: LD_STRING Bystrov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6640 0 2
4391: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4392: LD_ADDR_EXP 40
4396: PUSH
4397: LD_STRING Fadeev
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6640 0 2
4407: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4408: LD_ADDR_EXP 41
4412: PUSH
4413: LD_STRING Gleb
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6640 0 2
4423: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4424: LD_ADDR_EXP 42
4428: PUSH
4429: LD_STRING Petrosyan
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6640 0 2
4439: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4440: LD_ADDR_EXP 43
4444: PUSH
4445: LD_STRING Petrovova
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6640 0 2
4455: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4456: LD_ADDR_EXP 44
4460: PUSH
4461: LD_STRING Kuzmov
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6640 0 2
4471: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4472: LD_ADDR_EXP 45
4476: PUSH
4477: LD_STRING Mikhail
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6640 0 2
4487: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4488: LD_ADDR_EXP 46
4492: PUSH
4493: LD_STRING Furmanov
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6640 0 2
4503: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4504: LD_ADDR_EXP 47
4508: PUSH
4509: LD_STRING Belkov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6640 0 2
4519: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4520: LD_EXP 38
4524: PPUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 30
4547: PUSH
4548: LD_INT 32
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 58
4557: PUSH
4558: EMPTY
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: PPUSH
4576: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4580: LD_EXP 40
4584: PPUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 58
4617: PUSH
4618: EMPTY
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4640: LD_EXP 41
4644: PPUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 21
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 32
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 58
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: PPUSH
4696: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4700: LD_EXP 43
4704: PPUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 21
4717: PUSH
4718: LD_INT 3
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 30
4727: PUSH
4728: LD_INT 32
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 58
4737: PUSH
4738: EMPTY
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 69
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4760: LD_EXP 44
4764: PPUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 21
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 30
4787: PUSH
4788: LD_INT 32
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 58
4797: PUSH
4798: EMPTY
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4820: LD_EXP 46
4824: PPUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 3
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 32
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 58
4857: PUSH
4858: EMPTY
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: PPUSH
4876: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4880: LD_EXP 47
4884: PPUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 32
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 58
4917: PUSH
4918: EMPTY
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: PPUSH
4936: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4940: LD_EXP 39
4944: PPUSH
4945: LD_INT 2
4947: PPUSH
4948: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4952: LD_EXP 42
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4964: LD_EXP 45
4968: PPUSH
4969: LD_INT 26
4971: PPUSH
4972: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4976: LD_EXP 45
4980: PPUSH
4981: LD_INT 2
4983: PPUSH
4984: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4988: LD_INT 3
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 26
4996: PPUSH
4997: LD_INT 10
4999: PPUSH
5000: LD_INT 2
5002: PPUSH
5003: LD_INT 5
5005: PPUSH
5006: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 3
5015: PPUSH
5016: LD_INT 23
5018: PPUSH
5019: LD_INT 10
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: LD_INT 4
5027: PPUSH
5028: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 27
5040: PPUSH
5041: LD_INT 10
5043: PPUSH
5044: LD_INT 9
5046: PPUSH
5047: LD_INT 6
5049: PPUSH
5050: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5054: LD_INT 3
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 27
5062: PPUSH
5063: LD_INT 10
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 6
5093: PPUSH
5094: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 2
5128: PPUSH
5129: LD_INT 10
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: LD_INT 3
5137: PPUSH
5138: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5142: LD_INT 3
5144: PPUSH
5145: LD_INT 3
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 10
5153: PPUSH
5154: LD_INT 4
5156: PPUSH
5157: LD_INT 3
5159: PPUSH
5160: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 22
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 30
5191: PUSH
5192: LD_INT 32
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 58
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5245
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5219: LD_INT 3
5221: PPUSH
5222: LD_INT 3
5224: PPUSH
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL 7734 0 6
5243: GO 5216
5245: POP
5246: POP
// end ;
5247: LD_VAR 0 1
5251: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5252: LD_INT 0
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
// uc_side = 6 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 6
5265: ST_TO_ADDR
// uc_nation = 1 ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// vc_engine = 3 ;
5274: LD_ADDR_OWVAR 39
5278: PUSH
5279: LD_INT 3
5281: ST_TO_ADDR
// vc_control = 1 ;
5282: LD_ADDR_OWVAR 38
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_chassis = 5 ;
5290: LD_ADDR_OWVAR 37
5294: PUSH
5295: LD_INT 5
5297: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5298: LD_ADDR_OWVAR 40
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 9
5308: PUSH
5309: LD_INT 7
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: CALL_OW 12
5327: ARRAY
5328: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5329: LD_ADDR_EXP 35
5333: PUSH
5334: CALL_OW 45
5338: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5339: LD_EXP 35
5343: PPUSH
5344: LD_INT 14
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5354: LD_ADDR_EXP 34
5358: PUSH
5359: LD_STRING Vsevolod
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: CALL 6640 0 2
5369: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5370: LD_EXP 34
5374: PPUSH
5375: LD_EXP 35
5379: PPUSH
5380: CALL_OW 52
// for i := 1 to 5 do
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 5
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5482
// begin vc_engine = 3 ;
5400: LD_ADDR_OWVAR 39
5404: PUSH
5405: LD_INT 3
5407: ST_TO_ADDR
// vc_control = 3 ;
5408: LD_ADDR_OWVAR 38
5412: PUSH
5413: LD_INT 3
5415: ST_TO_ADDR
// vc_chassis = 3 ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5424: LD_ADDR_OWVAR 40
5428: PUSH
5429: LD_INT 5
5431: PUSH
5432: LD_INT 9
5434: PUSH
5435: LD_INT 7
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 3
5448: PPUSH
5449: CALL_OW 12
5453: ARRAY
5454: ST_TO_ADDR
// veh = CreateVehicle ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: CALL_OW 45
5464: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 14
5472: PPUSH
5473: LD_INT 0
5475: PPUSH
5476: CALL_OW 49
// end ;
5480: GO 5397
5482: POP
5483: POP
// uc_nation = 3 ;
5484: LD_ADDR_OWVAR 21
5488: PUSH
5489: LD_INT 3
5491: ST_TO_ADDR
// for i := 1 to 7 do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_INT 7
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5598
// begin vc_engine = 3 ;
5508: LD_ADDR_OWVAR 39
5512: PUSH
5513: LD_INT 3
5515: ST_TO_ADDR
// vc_control = 3 ;
5516: LD_ADDR_OWVAR 38
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5524: LD_ADDR_OWVAR 37
5528: PUSH
5529: LD_INT 24
5531: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5532: LD_ADDR_OWVAR 40
5536: PUSH
5537: LD_INT 44
5539: PUSH
5540: LD_INT 47
5542: PUSH
5543: LD_INT 45
5545: PUSH
5546: LD_INT 46
5548: PUSH
5549: LD_INT 49
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: CALL_OW 12
5569: ARRAY
5570: ST_TO_ADDR
// veh = CreateVehicle ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: CALL_OW 45
5580: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5581: LD_VAR 0 3
5585: PPUSH
5586: LD_INT 14
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 49
// end ;
5596: GO 5505
5598: POP
5599: POP
// repeat wait ( 0 0$1 ) ;
5600: LD_INT 35
5602: PPUSH
5603: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 6
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 50
5634: PUSH
5635: EMPTY
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5648: LD_EXP 1
5652: PPUSH
5653: CALL_OW 310
5657: NOT
5658: IFFALSE 5691
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_EXP 1
5669: PPUSH
5670: CALL_OW 250
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 251
5684: PPUSH
5685: CALL_OW 114
5689: GO 5730
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5691: LD_VAR 0 4
5695: PPUSH
5696: LD_EXP 1
5700: PPUSH
5701: CALL_OW 310
5705: PPUSH
5706: CALL_OW 250
5710: PPUSH
5711: LD_EXP 1
5715: PPUSH
5716: CALL_OW 310
5720: PPUSH
5721: CALL_OW 251
5725: PPUSH
5726: CALL_OW 114
// until vehList = 0 ;
5730: LD_VAR 0 4
5734: PUSH
5735: LD_INT 0
5737: EQUAL
5738: IFFALSE 5600
// end ;
5740: LD_VAR 0 1
5744: RET
// export function PreapreMehBehs ; var i , un ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
// uc_side = 6 ;
5750: LD_ADDR_OWVAR 20
5754: PUSH
5755: LD_INT 6
5757: ST_TO_ADDR
// uc_nation = 3 ;
5758: LD_ADDR_OWVAR 21
5762: PUSH
5763: LD_INT 3
5765: ST_TO_ADDR
// for i := 1 to 3 do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_INT 3
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5851
// begin hc_name =  ;
5782: LD_ADDR_OWVAR 26
5786: PUSH
5787: LD_STRING 
5789: ST_TO_ADDR
// hc_gallery =  ;
5790: LD_ADDR_OWVAR 33
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5798: LD_INT 0
5800: PPUSH
5801: LD_INT 10
5803: PPUSH
5804: CALL_OW 383
// un = CreateHuman ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: CALL_OW 44
5817: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5818: LD_ADDR_EXP 58
5822: PUSH
5823: LD_EXP 58
5827: PUSH
5828: LD_VAR 0 3
5832: ADD
5833: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// end ;
5849: GO 5779
5851: POP
5852: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5853: LD_EXP 37
5857: PPUSH
5858: LD_INT 17
5860: PPUSH
5861: LD_INT 0
5863: PPUSH
5864: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5868: LD_EXP 37
5872: PPUSH
5873: LD_INT 6
5875: PPUSH
5876: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5880: LD_INT 145
5882: PPUSH
5883: LD_INT 6
5885: PPUSH
5886: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5890: LD_EXP 58
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: LD_INT 37
5901: PPUSH
5902: LD_INT 193
5904: PPUSH
5905: LD_INT 118
5907: PPUSH
5908: LD_INT 0
5910: PPUSH
5911: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5915: LD_EXP 58
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_INT 37
5926: PPUSH
5927: LD_INT 204
5929: PPUSH
5930: LD_INT 119
5932: PPUSH
5933: LD_INT 0
5935: PPUSH
5936: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5940: LD_EXP 58
5944: PUSH
5945: LD_INT 3
5947: ARRAY
5948: PPUSH
5949: LD_INT 37
5951: PPUSH
5952: LD_INT 195
5954: PPUSH
5955: LD_INT 126
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5965: LD_EXP 58
5969: PUSH
5970: LD_INT 4
5972: ARRAY
5973: PPUSH
5974: LD_INT 37
5976: PPUSH
5977: LD_INT 207
5979: PPUSH
5980: LD_INT 126
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 170
// end ; end_of_file
5990: LD_VAR 0 1
5994: RET
// export function PrepareAlliance ; var i ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
// uc_side = 7 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 7
6006: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6007: LD_ADDR_EXP 28
6011: PUSH
6012: LD_STRING Roth
6014: PPUSH
6015: LD_INT 0
6017: PPUSH
6018: CALL 6640 0 2
6022: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6023: LD_EXP 28
6027: PPUSH
6028: LD_INT 31
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6038: LD_EXP 28
6042: PPUSH
6043: LD_INT 248
6045: PPUSH
6046: LD_INT 187
6048: PPUSH
6049: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6053: LD_STRING 10c_Simms
6055: PPUSH
6056: CALL_OW 28
6060: PUSH
6061: LD_INT 1
6063: EQUAL
6064: IFFALSE 6114
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6066: LD_ADDR_EXP 48
6070: PUSH
6071: LD_STRING 10c_Simms
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL 6640 0 2
6081: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6082: LD_EXP 48
6086: PPUSH
6087: LD_INT 32
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6097: LD_EXP 48
6101: PPUSH
6102: LD_INT 248
6104: PPUSH
6105: LD_INT 187
6107: PPUSH
6108: CALL_OW 118
// end else
6112: GO 6188
// begin uc_nation = 1 ;
6114: LD_ADDR_OWVAR 21
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// hc_name =  ;
6122: LD_ADDR_OWVAR 26
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// hc_gallery =  ;
6130: LD_ADDR_OWVAR 33
6134: PUSH
6135: LD_STRING 
6137: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6138: LD_INT 2
6140: PPUSH
6141: LD_INT 10
6143: PPUSH
6144: CALL_OW 384
// Simms = CreateHuman ;
6148: LD_ADDR_EXP 48
6152: PUSH
6153: CALL_OW 44
6157: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6158: LD_EXP 48
6162: PPUSH
6163: LD_INT 32
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6173: LD_EXP 48
6177: PPUSH
6178: LD_INT 248
6180: PPUSH
6181: LD_INT 187
6183: PPUSH
6184: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6188: LD_ADDR_EXP 49
6192: PUSH
6193: LD_STRING Scholtze
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL 6640 0 2
6203: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6204: LD_ADDR_EXP 50
6208: PUSH
6209: LD_STRING Kirilenkova
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6640 0 2
6219: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6220: LD_ADDR_EXP 51
6224: PUSH
6225: LD_STRING Kapitsova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6640 0 2
6235: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6236: LD_ADDR_EXP 52
6240: PUSH
6241: LD_STRING Karamazov
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6640 0 2
6251: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6252: LD_EXP 49
6256: PPUSH
6257: LD_INT 39
6259: PPUSH
6260: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6264: LD_EXP 50
6268: PPUSH
6269: LD_INT 133
6271: PPUSH
6272: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6276: LD_EXP 51
6280: PPUSH
6281: LD_INT 133
6283: PPUSH
6284: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6288: LD_EXP 52
6292: PPUSH
6293: LD_INT 45
6295: PPUSH
6296: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6300: LD_INT 7
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: LD_INT 45
6308: PPUSH
6309: LD_INT 10
6311: PPUSH
6312: LD_INT 2
6314: PPUSH
6315: LD_INT 2
6317: PPUSH
6318: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6322: LD_INT 7
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 45
6330: PPUSH
6331: LD_INT 10
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6344: LD_INT 7
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 194
6352: PPUSH
6353: LD_INT 10
6355: PPUSH
6356: LD_INT 5
6358: PPUSH
6359: LD_INT 4
6361: PPUSH
6362: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6366: LD_INT 7
6368: PPUSH
6369: LD_INT 3
6371: PPUSH
6372: LD_INT 194
6374: PPUSH
6375: LD_INT 10
6377: PPUSH
6378: LD_INT 8
6380: PPUSH
6381: LD_INT 6
6383: PPUSH
6384: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6388: LD_INT 7
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 156
6396: PPUSH
6397: LD_INT 10
6399: PPUSH
6400: LD_INT 3
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6410: LD_INT 7
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 162
6418: PPUSH
6419: LD_INT 10
6421: PPUSH
6422: LD_INT 3
6424: PPUSH
6425: LD_INT 6
6427: PPUSH
6428: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6432: LD_INT 7
6434: PPUSH
6435: LD_INT 3
6437: PPUSH
6438: LD_INT 39
6440: PPUSH
6441: LD_INT 10
6443: PPUSH
6444: LD_INT 4
6446: PPUSH
6447: LD_INT 3
6449: PPUSH
6450: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6454: LD_INT 7
6456: PPUSH
6457: LD_INT 3
6459: PPUSH
6460: LD_INT 133
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: LD_INT 4
6468: PPUSH
6469: LD_INT 2
6471: PPUSH
6472: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6476: LD_INT 7
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 46
6484: PPUSH
6485: LD_INT 10
6487: PPUSH
6488: LD_INT 4
6490: PPUSH
6491: LD_INT 2
6493: PPUSH
6494: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 21
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 58
6535: PUSH
6536: EMPTY
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: PUSH
6550: FOR_IN
6551: IFFALSE 6598
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6553: LD_INT 7
6555: PPUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 2
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 10
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL 7734 0 6
6596: GO 6550
6598: POP
6599: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6600: LD_INT 7
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 226
6608: PPUSH
6609: LD_INT 10
6611: PPUSH
6612: LD_INT 3
6614: PPUSH
6615: LD_INT 3
6617: PPUSH
6618: CALL 7734 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6622: LD_ADDR_EXP 63
6626: PUSH
6627: LD_INT 226
6629: PPUSH
6630: CALL_OW 313
6634: ST_TO_ADDR
// end ; end_of_file
6635: LD_VAR 0 1
6639: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
// if exist_mode then
6644: LD_VAR 0 2
6648: IFFALSE 6667
// unit := CreateCharacter ( ident ) else
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 34
6664: ST_TO_ADDR
6665: GO 6682
// unit := NewCharacter ( ident ) ;
6667: LD_ADDR_VAR 0 4
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 25
6681: ST_TO_ADDR
// result := unit ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// end ;
6692: LD_VAR 0 3
6696: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6701: LD_STRING 13s_
6703: PUSH
6704: LD_VAR 0 1
6708: STR
6709: PPUSH
6710: CALL_OW 28
6714: PUSH
6715: LD_INT 1
6717: EQUAL
6718: IFFALSE 6739
// unit = CreateCharacter ( 13s_ & ident ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_STRING 13s_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 34
6738: ST_TO_ADDR
// result := unit ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ST_TO_ADDR
// end ;
6749: LD_VAR 0 2
6753: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6758: LD_STRING 15_
6760: PUSH
6761: LD_VAR 0 1
6765: STR
6766: PPUSH
6767: CALL_OW 28
6771: PUSH
6772: LD_INT 1
6774: EQUAL
6775: IFFALSE 6812
// begin unit = CreateCharacter ( 15_ & ident ) ;
6777: LD_ADDR_VAR 0 3
6781: PUSH
6782: LD_STRING 15_
6784: PUSH
6785: LD_VAR 0 1
6789: STR
6790: PPUSH
6791: CALL_OW 34
6795: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6796: LD_ADDR_EXP 20
6800: PUSH
6801: LD_EXP 20
6805: PUSH
6806: LD_VAR 0 3
6810: ADD
6811: ST_TO_ADDR
// end ; result := unit ;
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_VAR 0 3
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 2
6826: RET
// export function TabLenght ( tab ) ; var i ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
// for i = 1 to tab do
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_VAR 0 1
6845: PUSH
6846: FOR_TO
6847: IFFALSE 6861
// result = i ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 3
6858: ST_TO_ADDR
6859: GO 6846
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 2
6867: RET
// export function Video ( mode ) ; begin
6868: LD_INT 0
6870: PPUSH
// ingame_video = mode ;
6871: LD_ADDR_OWVAR 52
6875: PUSH
6876: LD_VAR 0 1
6880: ST_TO_ADDR
// interface_hidden = mode ;
6881: LD_ADDR_OWVAR 54
6885: PUSH
6886: LD_VAR 0 1
6890: ST_TO_ADDR
// end ;
6891: LD_VAR 0 2
6895: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_EXP 1
6915: PUSH
6916: LD_EXP 3
6920: PUSH
6921: LD_EXP 21
6925: PUSH
6926: LD_EXP 22
6930: PUSH
6931: LD_EXP 23
6935: PUSH
6936: LD_EXP 4
6940: PUSH
6941: LD_EXP 5
6945: PUSH
6946: LD_EXP 6
6950: PUSH
6951: LD_EXP 7
6955: PUSH
6956: LD_EXP 8
6960: PUSH
6961: LD_EXP 9
6965: PUSH
6966: LD_EXP 10
6970: PUSH
6971: LD_EXP 11
6975: PUSH
6976: LD_EXP 12
6980: PUSH
6981: LD_EXP 13
6985: PUSH
6986: LD_EXP 14
6990: PUSH
6991: LD_EXP 15
6995: PUSH
6996: LD_EXP 17
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: DIFF
7021: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7022: LD_ADDR_VAR 0 6
7026: PUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_VAR 0 1
7034: PPUSH
7035: CALL_OW 12
7039: ST_TO_ADDR
// for i = 1 to characters do
7040: LD_ADDR_VAR 0 5
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_VAR 0 1
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7166
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7058: LD_VAR 0 5
7062: PUSH
7063: LD_VAR 0 6
7067: EQUAL
7068: PUSH
7069: LD_VAR 0 1
7073: PUSH
7074: LD_VAR 0 5
7078: ARRAY
7079: PPUSH
7080: CALL_OW 258
7084: PUSH
7085: LD_INT 1
7087: EQUAL
7088: AND
7089: IFFALSE 7111
// Say ( characters [ i ] , dialogMID ) ;
7091: LD_VAR 0 1
7095: PUSH
7096: LD_VAR 0 5
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PPUSH
7107: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7111: LD_VAR 0 5
7115: PUSH
7116: LD_VAR 0 6
7120: EQUAL
7121: PUSH
7122: LD_VAR 0 1
7126: PUSH
7127: LD_VAR 0 5
7131: ARRAY
7132: PPUSH
7133: CALL_OW 258
7137: PUSH
7138: LD_INT 2
7140: EQUAL
7141: AND
7142: IFFALSE 7164
// Say ( characters [ i ] , dialogFID ) ;
7144: LD_VAR 0 1
7148: PUSH
7149: LD_VAR 0 5
7153: ARRAY
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 88
// end ;
7164: GO 7055
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 4
7172: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
// if not list then
7179: LD_VAR 0 1
7183: NOT
7184: IFFALSE 7188
// exit ;
7186: GO 7535
// result := [ ] ;
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: EMPTY
7194: ST_TO_ADDR
// for i in list do
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_VAR 0 1
7204: PUSH
7205: FOR_IN
7206: IFFALSE 7447
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7208: LD_ADDR_VAR 0 6
7212: PUSH
7213: LD_VAR 0 4
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: CALL_OW 259
7225: PUSH
7226: LD_VAR 0 4
7230: PPUSH
7231: LD_INT 2
7233: PPUSH
7234: CALL_OW 259
7238: PLUS
7239: PUSH
7240: LD_VAR 0 4
7244: PPUSH
7245: LD_INT 3
7247: PPUSH
7248: CALL_OW 259
7252: PLUS
7253: PUSH
7254: LD_VAR 0 4
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: CALL_OW 259
7266: PLUS
7267: PUSH
7268: LD_INT 4
7270: DIV
7271: ST_TO_ADDR
// if not result then
7272: LD_VAR 0 3
7276: NOT
7277: IFFALSE 7303
// result := [ [ i , tmp ] ] else
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 4
7288: PUSH
7289: LD_VAR 0 6
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: ST_TO_ADDR
7301: GO 7445
// begin if result [ result ] [ 2 ] <= tmp then
7303: LD_VAR 0 3
7307: PUSH
7308: LD_VAR 0 3
7312: ARRAY
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: PUSH
7318: LD_VAR 0 6
7322: LESSEQUAL
7323: IFFALSE 7365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: PPUSH
7344: LD_VAR 0 4
7348: PUSH
7349: LD_VAR 0 6
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 2
7362: ST_TO_ADDR
7363: GO 7445
// for j = 1 to result do
7365: LD_ADDR_VAR 0 5
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 3
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7443
// begin if tmp < result [ j ] [ 2 ] then
7383: LD_VAR 0 6
7387: PUSH
7388: LD_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: LESS
7403: IFFALSE 7441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_VAR 0 5
7419: PPUSH
7420: LD_VAR 0 4
7424: PUSH
7425: LD_VAR 0 6
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 2
7438: ST_TO_ADDR
// break ;
7439: GO 7443
// end ; end ;
7441: GO 7380
7443: POP
7444: POP
// end ; end ;
7445: GO 7205
7447: POP
7448: POP
// if result and not asc then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_VAR 0 2
7458: NOT
7459: AND
7460: IFFALSE 7535
// begin tmp := result ;
7462: LD_ADDR_VAR 0 6
7466: PUSH
7467: LD_VAR 0 3
7471: ST_TO_ADDR
// for i = tmp downto 1 do
7472: LD_ADDR_VAR 0 4
7476: PUSH
7477: DOUBLE
7478: LD_VAR 0 6
7482: INC
7483: ST_TO_ADDR
7484: LD_INT 1
7486: PUSH
7487: FOR_DOWNTO
7488: IFFALSE 7533
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7490: LD_ADDR_VAR 0 3
7494: PUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: LD_VAR 0 6
7504: PUSH
7505: LD_VAR 0 4
7509: MINUS
7510: PUSH
7511: LD_INT 1
7513: PLUS
7514: PPUSH
7515: LD_VAR 0 6
7519: PUSH
7520: LD_VAR 0 4
7524: ARRAY
7525: PPUSH
7526: CALL_OW 1
7530: ST_TO_ADDR
7531: GO 7487
7533: POP
7534: POP
// end ; end ;
7535: LD_VAR 0 3
7539: RET
// export function PrepareDifficulty ; begin
7540: LD_INT 0
7542: PPUSH
// if difficulty = 1 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 1
7550: EQUAL
7551: IFFALSE 7579
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7553: LD_INT 51
7555: PPUSH
7556: LD_INT 6
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7566: LD_INT 57
7568: PPUSH
7569: LD_INT 6
7571: PPUSH
7572: LD_INT 2
7574: PPUSH
7575: CALL_OW 322
// end ; if difficulty = 2 then
7579: LD_OWVAR 67
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: IFFALSE 7641
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7589: LD_INT 51
7591: PPUSH
7592: LD_INT 6
7594: PPUSH
7595: LD_INT 2
7597: PPUSH
7598: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7602: LD_INT 57
7604: PPUSH
7605: LD_INT 6
7607: PPUSH
7608: LD_INT 2
7610: PPUSH
7611: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7615: LD_INT 52
7617: PPUSH
7618: LD_INT 6
7620: PPUSH
7621: LD_INT 2
7623: PPUSH
7624: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7628: LD_INT 58
7630: PPUSH
7631: LD_INT 6
7633: PPUSH
7634: LD_INT 2
7636: PPUSH
7637: CALL_OW 322
// end ; if difficulty = 3 then
7641: LD_OWVAR 67
7645: PUSH
7646: LD_INT 3
7648: EQUAL
7649: IFFALSE 7729
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7651: LD_INT 51
7653: PPUSH
7654: LD_INT 6
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7664: LD_INT 57
7666: PPUSH
7667: LD_INT 6
7669: PPUSH
7670: LD_INT 2
7672: PPUSH
7673: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7677: LD_INT 52
7679: PPUSH
7680: LD_INT 6
7682: PPUSH
7683: LD_INT 2
7685: PPUSH
7686: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7690: LD_INT 58
7692: PPUSH
7693: LD_INT 6
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7703: LD_INT 53
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: LD_INT 2
7711: PPUSH
7712: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7716: LD_INT 59
7718: PPUSH
7719: LD_INT 6
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 322
// end ; end ;
7729: LD_VAR 0 1
7733: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7734: LD_INT 0
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// for i = 1 to count do
7741: LD_ADDR_VAR 0 8
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_VAR 0 6
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7838
// begin uc_side = side ;
7759: LD_ADDR_OWVAR 20
7763: PUSH
7764: LD_VAR 0 1
7768: ST_TO_ADDR
// uc_nation = nation ;
7769: LD_ADDR_OWVAR 21
7773: PUSH
7774: LD_VAR 0 2
7778: ST_TO_ADDR
// hc_gallery =  ;
7779: LD_ADDR_OWVAR 33
7783: PUSH
7784: LD_STRING 
7786: ST_TO_ADDR
// hc_name =  ;
7787: LD_ADDR_OWVAR 26
7791: PUSH
7792: LD_STRING 
7794: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7795: LD_INT 0
7797: PPUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 4
7807: PPUSH
7808: CALL_OW 380
// un = CreateHuman ;
7812: LD_ADDR_VAR 0 10
7816: PUSH
7817: CALL_OW 44
7821: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7822: LD_VAR 0 10
7826: PPUSH
7827: LD_VAR 0 3
7831: PPUSH
7832: CALL_OW 52
// end ;
7836: GO 7756
7838: POP
7839: POP
// end ;
7840: LD_VAR 0 7
7844: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7845: LD_INT 0
7847: PPUSH
7848: PPUSH
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7858: LD_INT 2100
7860: PUSH
7861: LD_INT 3150
7863: PUSH
7864: LD_INT 4200
7866: PUSH
7867: LD_INT 5250
7869: PUSH
7870: LD_INT 6300
7872: PUSH
7873: LD_INT 7350
7875: PUSH
7876: LD_INT 8400
7878: PUSH
7879: LD_INT 9450
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 8
7897: PPUSH
7898: CALL_OW 12
7902: ARRAY
7903: PPUSH
7904: CALL_OW 67
// amChassisTab = [ ] ;
7908: LD_ADDR_VAR 0 19
7912: PUSH
7913: EMPTY
7914: ST_TO_ADDR
// arChassisTab = [ ] ;
7915: LD_ADDR_VAR 0 18
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// ruChassisTab = [ ] ;
7922: LD_ADDR_VAR 0 17
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7929: LD_INT 35
7931: PPUSH
7932: CALL_OW 67
// if nation = 1 then
7936: LD_VAR 0 5
7940: PUSH
7941: LD_INT 1
7943: EQUAL
7944: IFFALSE 8435
// begin uc_side = side ;
7946: LD_ADDR_OWVAR 20
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// uc_nation = nation ;
7956: LD_ADDR_OWVAR 21
7960: PUSH
7961: LD_VAR 0 5
7965: ST_TO_ADDR
// vc_engine = vehengine ;
7966: LD_ADDR_OWVAR 39
7970: PUSH
7971: LD_VAR 0 6
7975: ST_TO_ADDR
// vc_control = vehcontrol ;
7976: LD_ADDR_OWVAR 38
7980: PUSH
7981: LD_VAR 0 7
7985: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7986: LD_ADDR_OWVAR 40
7990: PUSH
7991: LD_VAR 0 10
7995: PUSH
7996: LD_INT 1
7998: PPUSH
7999: LD_VAR 0 10
8003: PPUSH
8004: CALL_OW 12
8008: ARRAY
8009: ST_TO_ADDR
// for j = 1 to AMWeapon do
8010: LD_ADDR_VAR 0 14
8014: PUSH
8015: DOUBLE
8016: LD_INT 1
8018: DEC
8019: ST_TO_ADDR
8020: LD_VAR 0 10
8024: PUSH
8025: FOR_TO
8026: IFFALSE 8327
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8028: LD_VAR 0 10
8032: PUSH
8033: LD_VAR 0 14
8037: ARRAY
8038: PUSH
8039: LD_INT 2
8041: EQUAL
8042: PUSH
8043: LD_VAR 0 10
8047: PUSH
8048: LD_VAR 0 14
8052: ARRAY
8053: PUSH
8054: LD_INT 3
8056: EQUAL
8057: OR
8058: IFFALSE 8111
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8060: LD_ADDR_VAR 0 19
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8087: LD_ADDR_OWVAR 37
8091: PUSH
8092: LD_VAR 0 19
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 19
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8111: LD_VAR 0 10
8115: PUSH
8116: LD_VAR 0 14
8120: ARRAY
8121: PUSH
8122: LD_INT 4
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 10
8130: PUSH
8131: LD_VAR 0 14
8135: ARRAY
8136: PUSH
8137: LD_INT 5
8139: EQUAL
8140: OR
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 9
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 11
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 7
8187: EQUAL
8188: OR
8189: IFFALSE 8238
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8191: LD_ADDR_VAR 0 19
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8214: LD_ADDR_OWVAR 37
8218: PUSH
8219: LD_VAR 0 19
8223: PUSH
8224: LD_INT 1
8226: PPUSH
8227: LD_VAR 0 19
8231: PPUSH
8232: CALL_OW 12
8236: ARRAY
8237: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 8
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 6
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 10
8282: EQUAL
8283: OR
8284: IFFALSE 8325
// begin amChassisTab = [ 4 , 5 ] ;
8286: LD_ADDR_VAR 0 19
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8301: LD_ADDR_OWVAR 37
8305: PUSH
8306: LD_VAR 0 19
8310: PUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_VAR 0 19
8318: PPUSH
8319: CALL_OW 12
8323: ARRAY
8324: ST_TO_ADDR
// end ; end ;
8325: GO 8025
8327: POP
8328: POP
// veh = CreateVehicle ;
8329: LD_ADDR_VAR 0 16
8333: PUSH
8334: CALL_OW 45
8338: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8339: LD_VAR 0 16
8343: PPUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_INT 0
8351: PPUSH
8352: CALL_OW 49
// if vc_control = 1 then
8356: LD_OWVAR 38
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8421
// begin hc_gallery =  ;
8366: LD_ADDR_OWVAR 33
8370: PUSH
8371: LD_STRING 
8373: ST_TO_ADDR
// hc_name =  ;
8374: LD_ADDR_OWVAR 26
8378: PUSH
8379: LD_STRING 
8381: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8382: LD_INT 0
8384: PPUSH
8385: LD_INT 3
8387: PPUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 380
// un = CreateHuman ;
8397: LD_ADDR_VAR 0 15
8401: PUSH
8402: CALL_OW 44
8406: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8407: LD_VAR 0 15
8411: PPUSH
8412: LD_VAR 0 16
8416: PPUSH
8417: CALL_OW 52
// end ; i = i + 1 ;
8421: LD_ADDR_VAR 0 13
8425: PUSH
8426: LD_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ST_TO_ADDR
// end ; if nation = 2 then
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 2
8442: EQUAL
8443: IFFALSE 8867
// begin uc_side = side ;
8445: LD_ADDR_OWVAR 20
8449: PUSH
8450: LD_VAR 0 2
8454: ST_TO_ADDR
// uc_nation = nation ;
8455: LD_ADDR_OWVAR 21
8459: PUSH
8460: LD_VAR 0 5
8464: ST_TO_ADDR
// vc_engine = vehengine ;
8465: LD_ADDR_OWVAR 39
8469: PUSH
8470: LD_VAR 0 6
8474: ST_TO_ADDR
// vc_control = vehcontrol ;
8475: LD_ADDR_OWVAR 38
8479: PUSH
8480: LD_VAR 0 7
8484: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8485: LD_ADDR_OWVAR 40
8489: PUSH
8490: LD_VAR 0 9
8494: PUSH
8495: LD_INT 1
8497: PPUSH
8498: LD_VAR 0 9
8502: PPUSH
8503: CALL_OW 12
8507: ARRAY
8508: ST_TO_ADDR
// for j = 1 to ARWeapons do
8509: LD_ADDR_VAR 0 14
8513: PUSH
8514: DOUBLE
8515: LD_INT 1
8517: DEC
8518: ST_TO_ADDR
8519: LD_VAR 0 9
8523: PUSH
8524: FOR_TO
8525: IFFALSE 8759
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_VAR 0 14
8536: ARRAY
8537: PUSH
8538: LD_INT 24
8540: EQUAL
8541: PUSH
8542: LD_VAR 0 9
8546: PUSH
8547: LD_VAR 0 14
8551: ARRAY
8552: PUSH
8553: LD_INT 22
8555: EQUAL
8556: OR
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 23
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 30
8587: EQUAL
8588: OR
8589: IFFALSE 8638
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8591: LD_ADDR_VAR 0 18
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 12
8601: PUSH
8602: LD_INT 13
8604: PUSH
8605: LD_INT 14
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8614: LD_ADDR_OWVAR 37
8618: PUSH
8619: LD_VAR 0 18
8623: PUSH
8624: LD_INT 1
8626: PPUSH
8627: LD_VAR 0 18
8631: PPUSH
8632: CALL_OW 12
8636: ARRAY
8637: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8638: LD_VAR 0 9
8642: PUSH
8643: LD_VAR 0 14
8647: ARRAY
8648: PUSH
8649: LD_INT 29
8651: EQUAL
8652: PUSH
8653: LD_VAR 0 9
8657: PUSH
8658: LD_VAR 0 14
8662: ARRAY
8663: PUSH
8664: LD_INT 28
8666: EQUAL
8667: OR
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 27
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 26
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 25
8714: EQUAL
8715: OR
8716: IFFALSE 8757
// begin arChassisTab = [ 13 , 14 ] ;
8718: LD_ADDR_VAR 0 18
8722: PUSH
8723: LD_INT 13
8725: PUSH
8726: LD_INT 14
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8733: LD_ADDR_OWVAR 37
8737: PUSH
8738: LD_VAR 0 18
8742: PUSH
8743: LD_INT 1
8745: PPUSH
8746: LD_VAR 0 18
8750: PPUSH
8751: CALL_OW 12
8755: ARRAY
8756: ST_TO_ADDR
// end ; end ;
8757: GO 8524
8759: POP
8760: POP
// veh = CreateVehicle ;
8761: LD_ADDR_VAR 0 16
8765: PUSH
8766: CALL_OW 45
8770: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8771: LD_VAR 0 16
8775: PPUSH
8776: LD_VAR 0 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 49
// if vc_control = 1 then
8788: LD_OWVAR 38
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8853
// begin hc_gallery =  ;
8798: LD_ADDR_OWVAR 33
8802: PUSH
8803: LD_STRING 
8805: ST_TO_ADDR
// hc_name =  ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING 
8813: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8814: LD_INT 0
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_VAR 0 4
8824: PPUSH
8825: CALL_OW 380
// un = CreateHuman ;
8829: LD_ADDR_VAR 0 15
8833: PUSH
8834: CALL_OW 44
8838: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8839: LD_VAR 0 15
8843: PPUSH
8844: LD_VAR 0 16
8848: PPUSH
8849: CALL_OW 52
// end ; i = i + 1 ;
8853: LD_ADDR_VAR 0 13
8857: PUSH
8858: LD_VAR 0 13
8862: PUSH
8863: LD_INT 1
8865: PLUS
8866: ST_TO_ADDR
// end ; if nation = 3 then
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 3
8874: EQUAL
8875: IFFALSE 9251
// begin uc_side = side ;
8877: LD_ADDR_OWVAR 20
8881: PUSH
8882: LD_VAR 0 2
8886: ST_TO_ADDR
// uc_nation = nation ;
8887: LD_ADDR_OWVAR 21
8891: PUSH
8892: LD_VAR 0 5
8896: ST_TO_ADDR
// vc_engine = vehengine ;
8897: LD_ADDR_OWVAR 39
8901: PUSH
8902: LD_VAR 0 6
8906: ST_TO_ADDR
// vc_control = vehcontrol ;
8907: LD_ADDR_OWVAR 38
8911: PUSH
8912: LD_VAR 0 7
8916: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8917: LD_ADDR_OWVAR 40
8921: PUSH
8922: LD_VAR 0 8
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 8
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
// for j = 1 to RuWeapons do
8941: LD_ADDR_VAR 0 14
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_VAR 0 8
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9143
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8959: LD_VAR 0 8
8963: PUSH
8964: LD_VAR 0 14
8968: ARRAY
8969: PUSH
8970: LD_INT 42
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 8
8978: PUSH
8979: LD_VAR 0 14
8983: ARRAY
8984: PUSH
8985: LD_INT 43
8987: EQUAL
8988: OR
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 44
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 45
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 49
9035: EQUAL
9036: OR
9037: IFFALSE 9074
// begin ruChassisTab = [ 24 ] ;
9039: LD_ADDR_VAR 0 17
9043: PUSH
9044: LD_INT 24
9046: PUSH
9047: EMPTY
9048: LIST
9049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9050: LD_ADDR_OWVAR 37
9054: PUSH
9055: LD_VAR 0 17
9059: PUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_VAR 0 17
9067: PPUSH
9068: CALL_OW 12
9072: ARRAY
9073: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9074: LD_VAR 0 8
9078: PUSH
9079: LD_VAR 0 14
9083: ARRAY
9084: PUSH
9085: LD_INT 46
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 8
9093: PUSH
9094: LD_VAR 0 14
9098: ARRAY
9099: PUSH
9100: LD_INT 47
9102: EQUAL
9103: OR
9104: IFFALSE 9141
// begin ruChassisTab = [ 24 ] ;
9106: LD_ADDR_VAR 0 17
9110: PUSH
9111: LD_INT 24
9113: PUSH
9114: EMPTY
9115: LIST
9116: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9117: LD_ADDR_OWVAR 37
9121: PUSH
9122: LD_VAR 0 17
9126: PUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_VAR 0 17
9134: PPUSH
9135: CALL_OW 12
9139: ARRAY
9140: ST_TO_ADDR
// end ; end ;
9141: GO 8956
9143: POP
9144: POP
// veh = CreateVehicle ;
9145: LD_ADDR_VAR 0 16
9149: PUSH
9150: CALL_OW 45
9154: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9155: LD_VAR 0 16
9159: PPUSH
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 49
// if vc_control = 1 then
9172: LD_OWVAR 38
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9237
// begin hc_gallery =  ;
9182: LD_ADDR_OWVAR 33
9186: PUSH
9187: LD_STRING 
9189: ST_TO_ADDR
// hc_name =  ;
9190: LD_ADDR_OWVAR 26
9194: PUSH
9195: LD_STRING 
9197: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9198: LD_INT 0
9200: PPUSH
9201: LD_INT 3
9203: PPUSH
9204: LD_VAR 0 4
9208: PPUSH
9209: CALL_OW 380
// un = CreateHuman ;
9213: LD_ADDR_VAR 0 15
9217: PUSH
9218: CALL_OW 44
9222: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9223: LD_VAR 0 15
9227: PPUSH
9228: LD_VAR 0 16
9232: PPUSH
9233: CALL_OW 52
// end ; i = i + 1 ;
9237: LD_ADDR_VAR 0 13
9241: PUSH
9242: LD_VAR 0 13
9246: PUSH
9247: LD_INT 1
9249: PLUS
9250: ST_TO_ADDR
// end ; until i = vehCount ;
9251: LD_VAR 0 13
9255: PUSH
9256: LD_VAR 0 3
9260: EQUAL
9261: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
9263: LD_INT 35
9265: PPUSH
9266: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9270: LD_ADDR_VAR 0 20
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 250
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: ST_TO_ADDR
// if vehicleOK_list > 0 then
9317: LD_VAR 0 20
9321: PUSH
9322: LD_INT 0
9324: GREATER
9325: IFFALSE 9544
// begin for i in vehicleOK_list do
9327: LD_ADDR_VAR 0 13
9331: PUSH
9332: LD_VAR 0 20
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9542
// begin if GetSide ( i ) <> side then
9340: LD_VAR 0 13
9344: PPUSH
9345: CALL_OW 255
9349: PUSH
9350: LD_VAR 0 2
9354: NONEQUAL
9355: IFFALSE 9368
// begin ComStop ( i ) ;
9357: LD_VAR 0 13
9361: PPUSH
9362: CALL_OW 141
// continue ;
9366: GO 9337
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9368: LD_ADDR_VAR 0 21
9372: PUSH
9373: LD_INT 22
9375: PUSH
9376: LD_VAR 0 11
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: PPUSH
9390: LD_VAR 0 13
9394: PPUSH
9395: CALL_OW 74
9399: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9400: LD_ADDR_VAR 0 22
9404: PUSH
9405: LD_INT 22
9407: PUSH
9408: LD_VAR 0 11
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 59
9422: PUSH
9423: EMPTY
9424: LIST
9425: PUSH
9426: LD_INT 21
9428: PUSH
9429: LD_INT 1
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: PPUSH
9464: LD_VAR 0 13
9468: PPUSH
9469: CALL_OW 74
9473: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9474: LD_VAR 0 13
9478: PPUSH
9479: LD_VAR 0 21
9483: PPUSH
9484: CALL_OW 296
9488: PUSH
9489: LD_INT 8
9491: PLUS
9492: PUSH
9493: LD_VAR 0 13
9497: PPUSH
9498: LD_VAR 0 22
9502: PPUSH
9503: CALL_OW 296
9507: LESS
9508: IFFALSE 9526
// begin ComAttackUnit ( i , target1 ) ;
9510: LD_VAR 0 13
9514: PPUSH
9515: LD_VAR 0 21
9519: PPUSH
9520: CALL_OW 115
// end else
9524: GO 9540
// begin ComAttackUnit ( i , target2 ) ;
9526: LD_VAR 0 13
9530: PPUSH
9531: LD_VAR 0 22
9535: PPUSH
9536: CALL_OW 115
// end ; end ;
9540: GO 9337
9542: POP
9543: POP
// end ; until vehicleOK_list = [ ] ;
9544: LD_VAR 0 20
9548: PUSH
9549: EMPTY
9550: EQUAL
9551: IFFALSE 9263
// end ;
9553: LD_VAR 0 12
9557: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9558: LD_INT 0
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
// for i = 1 to 72 do
9564: LD_ADDR_VAR 0 5
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_INT 72
9576: PUSH
9577: FOR_TO
9578: IFFALSE 9636
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9580: LD_VAR 0 5
9584: PPUSH
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 321
9594: PUSH
9595: LD_INT 1
9597: EQUAL
9598: PUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 482
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: AND
9618: IFFALSE 9634
// AddComResearch ( lab , i ) ;
9620: LD_VAR 0 2
9624: PPUSH
9625: LD_VAR 0 5
9629: PPUSH
9630: CALL_OW 184
9634: GO 9577
9636: POP
9637: POP
// end ;
9638: LD_VAR 0 4
9642: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9643: LD_INT 0
9645: PPUSH
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9651: LD_ADDR_VAR 0 8
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: CALL_OW 313
9665: PUSH
9666: LD_EXP 36
9670: PUSH
9671: EMPTY
9672: LIST
9673: DIFF
9674: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9675: LD_ADDR_VAR 0 9
9679: PUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 22
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 25
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 750
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 3
9719: PUSH
9720: LD_INT 54
9722: PUSH
9723: EMPTY
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: PPUSH
9736: CALL_OW 70
9740: PUSH
9741: LD_EXP 36
9745: PUSH
9746: EMPTY
9747: LIST
9748: DIFF
9749: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9750: LD_ADDR_VAR 0 6
9754: PUSH
9755: LD_VAR 0 3
9759: PPUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 1000
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: PPUSH
9807: CALL_OW 70
9811: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9812: LD_VAR 0 6
9816: NOT
9817: PUSH
9818: LD_INT 22
9820: PUSH
9821: LD_VAR 0 1
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 25
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 24
9842: PUSH
9843: LD_INT 250
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: NOT
9860: AND
9861: IFFALSE 9865
// exit ;
9863: GO 10047
// if buildings_list > 0 and engineerOkInside then
9865: LD_VAR 0 6
9869: PUSH
9870: LD_INT 0
9872: GREATER
9873: PUSH
9874: LD_VAR 0 8
9878: AND
9879: IFFALSE 9890
// ComExitBuilding ( engineerOkInside ) ;
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9890: LD_VAR 0 6
9894: PUSH
9895: LD_INT 0
9897: GREATER
9898: PUSH
9899: LD_VAR 0 9
9903: PUSH
9904: LD_INT 0
9906: GREATER
9907: AND
9908: IFFALSE 9928
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9910: LD_VAR 0 9
9914: PPUSH
9915: LD_VAR 0 6
9919: PUSH
9920: LD_INT 1
9922: ARRAY
9923: PPUSH
9924: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9928: LD_VAR 0 6
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: PUSH
9937: LD_VAR 0 4
9941: PUSH
9942: LD_INT 0
9944: EQUAL
9945: AND
9946: PUSH
9947: LD_VAR 0 9
9951: PUSH
9952: LD_INT 0
9954: GREATER
9955: AND
9956: IFFALSE 9972
// ComEnterUnit ( engineerOkOutside , building ) ;
9958: LD_VAR 0 9
9962: PPUSH
9963: LD_VAR 0 2
9967: PPUSH
9968: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9972: LD_VAR 0 9
9976: PUSH
9977: LD_INT 0
9979: GREATER
9980: PUSH
9981: LD_VAR 0 6
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 4
9995: PUSH
9996: LD_INT 0
9998: GREATER
9999: AND
10000: IFFALSE 10047
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10002: LD_VAR 0 9
10006: PPUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: PPUSH
10016: LD_VAR 0 4
10020: PUSH
10021: LD_INT 2
10023: ARRAY
10024: PPUSH
10025: LD_VAR 0 4
10029: PUSH
10030: LD_INT 3
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 4
10038: PUSH
10039: LD_INT 4
10041: ARRAY
10042: PPUSH
10043: CALL_OW 145
// end ;
10047: LD_VAR 0 5
10051: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10052: LD_INT 0
10054: PPUSH
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
10059: PPUSH
10060: PPUSH
10061: PPUSH
10062: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10063: LD_ADDR_VAR 0 6
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_VAR 0 1
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 4
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 23
10092: PUSH
10093: LD_INT 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 24
10102: PUSH
10103: LD_INT 251
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: LD_EXP 36
10125: PUSH
10126: EMPTY
10127: LIST
10128: DIFF
10129: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10130: LD_ADDR_VAR 0 7
10134: PUSH
10135: LD_VAR 0 3
10139: PPUSH
10140: LD_INT 22
10142: PUSH
10143: LD_VAR 0 1
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 70
10188: PUSH
10189: LD_EXP 36
10193: PUSH
10194: EMPTY
10195: LIST
10196: DIFF
10197: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10198: LD_ADDR_VAR 0 10
10202: PUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 22
10210: PUSH
10211: LD_VAR 0 1
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 750
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 70
10274: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10275: LD_ADDR_VAR 0 11
10279: PUSH
10280: LD_VAR 0 2
10284: PPUSH
10285: LD_INT 22
10287: PUSH
10288: LD_VAR 0 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: LD_INT 24
10329: PUSH
10330: LD_INT 1000
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PPUSH
10347: CALL_OW 70
10351: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10352: LD_VAR 0 10
10356: NOT
10357: PUSH
10358: LD_VAR 0 11
10362: NOT
10363: AND
10364: PUSH
10365: LD_VAR 0 6
10369: NOT
10370: AND
10371: IFFALSE 10375
// exit ;
10373: GO 10609
// if damageUnits > 0 and sci_list > 0 then
10375: LD_VAR 0 10
10379: PUSH
10380: LD_INT 0
10382: GREATER
10383: PUSH
10384: LD_VAR 0 6
10388: PUSH
10389: LD_INT 0
10391: GREATER
10392: AND
10393: IFFALSE 10409
// ComMoveToArea ( damageUnits , healArea ) ;
10395: LD_VAR 0 10
10399: PPUSH
10400: LD_VAR 0 2
10404: PPUSH
10405: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10409: LD_VAR 0 11
10413: PUSH
10414: LD_INT 0
10416: GREATER
10417: PUSH
10418: LD_VAR 0 6
10422: PUSH
10423: LD_INT 0
10425: GREATER
10426: AND
10427: IFFALSE 10438
// ComExitBuilding ( sci_list ) ;
10429: LD_VAR 0 6
10433: PPUSH
10434: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10438: LD_VAR 0 11
10442: PUSH
10443: LD_INT 0
10445: GREATER
10446: PUSH
10447: LD_VAR 0 7
10451: PUSH
10452: LD_INT 0
10454: GREATER
10455: AND
10456: IFFALSE 10476
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10458: LD_VAR 0 7
10462: PPUSH
10463: LD_VAR 0 11
10467: PUSH
10468: LD_INT 1
10470: ARRAY
10471: PPUSH
10472: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10476: LD_VAR 0 10
10480: PUSH
10481: LD_INT 0
10483: EQUAL
10484: PUSH
10485: LD_VAR 0 11
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: PUSH
10495: LD_VAR 0 7
10499: PUSH
10500: LD_INT 0
10502: GREATER
10503: AND
10504: IFFALSE 10609
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10506: LD_ADDR_VAR 0 12
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_VAR 0 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 21
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 30
10535: PUSH
10536: LD_INT 8
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10553: LD_ADDR_VAR 0 13
10557: PUSH
10558: LD_INT 1
10560: PPUSH
10561: LD_VAR 0 12
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10571: LD_VAR 0 7
10575: PPUSH
10576: LD_INT 3
10578: PUSH
10579: LD_INT 60
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 72
10593: PPUSH
10594: LD_VAR 0 12
10598: PUSH
10599: LD_VAR 0 13
10603: ARRAY
10604: PPUSH
10605: CALL_OW 120
// end ; end ;
10609: LD_VAR 0 5
10613: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
// tmpTab = [ ] ;
10620: LD_ADDR_VAR 0 6
10624: PUSH
10625: EMPTY
10626: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10627: LD_INT 22
10629: PUSH
10630: LD_VAR 0 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 32
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 69
10657: PUSH
10658: LD_INT 0
10660: GREATER
10661: IFFALSE 10744
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10663: LD_ADDR_VAR 0 4
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 32
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: FOR_IN
10700: IFFALSE 10742
// begin for j in UnitsInside ( i ) do
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: LD_VAR 0 4
10711: PPUSH
10712: CALL_OW 313
10716: PUSH
10717: FOR_IN
10718: IFFALSE 10738
// tmpTab = tmpTab ^ j ;
10720: LD_ADDR_VAR 0 6
10724: PUSH
10725: LD_VAR 0 6
10729: PUSH
10730: LD_VAR 0 5
10734: ADD
10735: ST_TO_ADDR
10736: GO 10717
10738: POP
10739: POP
// end ;
10740: GO 10699
10742: POP
10743: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10744: LD_VAR 0 6
10748: PPUSH
10749: LD_VAR 0 2
10753: PPUSH
10754: CALL_OW 250
10758: PPUSH
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 251
10768: PPUSH
10769: CALL_OW 114
// end ;
10773: LD_VAR 0 3
10777: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10778: LD_INT 0
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
10784: PPUSH
10785: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10786: LD_ADDR_VAR 0 8
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 22
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 21
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 34
10820: PUSH
10821: LD_INT 52
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 70
10837: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10838: LD_ADDR_VAR 0 9
10842: PUSH
10843: LD_VAR 0 2
10847: PPUSH
10848: LD_INT 22
10850: PUSH
10851: LD_VAR 0 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: LD_INT 24
10875: PUSH
10876: LD_INT 1000
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: PPUSH
10895: CALL_OW 70
10899: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10900: LD_VAR 0 9
10904: PUSH
10905: LD_INT 0
10907: GREATER
10908: PUSH
10909: LD_VAR 0 8
10913: PPUSH
10914: LD_INT 24
10916: PUSH
10917: LD_INT 750
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 72
10928: PUSH
10929: LD_INT 0
10931: GREATER
10932: AND
10933: IFFALSE 10953
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10935: LD_VAR 0 8
10939: PPUSH
10940: LD_VAR 0 9
10944: PUSH
10945: LD_INT 1
10947: ARRAY
10948: PPUSH
10949: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10953: LD_VAR 0 8
10957: PUSH
10958: LD_INT 0
10960: GREATER
10961: PUSH
10962: LD_VAR 0 9
10966: PUSH
10967: LD_INT 0
10969: EQUAL
10970: AND
10971: PUSH
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 0
10979: GREATER
10980: AND
10981: IFFALSE 11028
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10983: LD_VAR 0 8
10987: PPUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 1
10995: ARRAY
10996: PPUSH
10997: LD_VAR 0 3
11001: PUSH
11002: LD_INT 2
11004: ARRAY
11005: PPUSH
11006: LD_VAR 0 3
11010: PUSH
11011: LD_INT 3
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 3
11019: PUSH
11020: LD_INT 4
11022: ARRAY
11023: PPUSH
11024: CALL_OW 567
// end ;
11028: LD_VAR 0 4
11032: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
11041: PPUSH
11042: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11043: LD_ADDR_VAR 0 6
11047: PUSH
11048: LD_VAR 0 2
11052: PPUSH
11053: LD_INT 22
11055: PUSH
11056: LD_VAR 0 1
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 56
11067: PUSH
11068: EMPTY
11069: LIST
11070: PUSH
11071: LD_INT 24
11073: PUSH
11074: LD_INT 700
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: LD_INT 60
11086: PUSH
11087: EMPTY
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 5
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 8
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 9
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 70
11155: PUSH
11156: LD_EXP 26
11160: PUSH
11161: LD_EXP 27
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: DIFF
11170: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11171: LD_ADDR_VAR 0 7
11175: PUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 22
11183: PUSH
11184: LD_VAR 0 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 30
11195: PUSH
11196: LD_INT 32
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 58
11205: PUSH
11206: EMPTY
11207: LIST
11208: PUSH
11209: LD_INT 24
11211: PUSH
11212: LD_INT 251
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 70
11229: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11230: LD_ADDR_VAR 0 9
11234: PUSH
11235: LD_VAR 0 2
11239: PPUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 4
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 30
11267: PUSH
11268: LD_INT 5
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 24
11282: PUSH
11283: LD_INT 251
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 70
11299: ST_TO_ADDR
// if barrackList > 0 then
11300: LD_VAR 0 9
11304: PUSH
11305: LD_INT 0
11307: GREATER
11308: IFFALSE 11456
// begin if turretList = 0 then
11310: LD_VAR 0 7
11314: PUSH
11315: LD_INT 0
11317: EQUAL
11318: IFFALSE 11360
// begin if soldiers_list > 0 then
11320: LD_VAR 0 6
11324: PUSH
11325: LD_INT 0
11327: GREATER
11328: IFFALSE 11358
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11330: LD_VAR 0 6
11334: PPUSH
11335: LD_VAR 0 9
11339: PUSH
11340: LD_INT 1
11342: PPUSH
11343: LD_VAR 0 9
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: PPUSH
11354: CALL_OW 120
// end else
11358: GO 11456
// begin for i in barrackList do
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: LD_VAR 0 9
11369: PUSH
11370: FOR_IN
11371: IFFALSE 11454
// begin insideUnits = UnitsInside ( i ) ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 4
11382: PPUSH
11383: CALL_OW 313
11387: ST_TO_ADDR
// if insideUnits > 0 then
11388: LD_VAR 0 10
11392: PUSH
11393: LD_INT 0
11395: GREATER
11396: IFFALSE 11420
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11398: LD_VAR 0 10
11402: PUSH
11403: LD_INT 1
11405: ARRAY
11406: PPUSH
11407: LD_VAR 0 7
11411: PUSH
11412: LD_INT 1
11414: ARRAY
11415: PPUSH
11416: CALL_OW 120
// if soldiers_list > 0 then
11420: LD_VAR 0 6
11424: PUSH
11425: LD_INT 0
11427: GREATER
11428: IFFALSE 11452
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11430: LD_VAR 0 6
11434: PUSH
11435: LD_INT 1
11437: ARRAY
11438: PPUSH
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 1
11446: ARRAY
11447: PPUSH
11448: CALL_OW 120
// end ;
11452: GO 11370
11454: POP
11455: POP
// end ; end ; end ;
11456: LD_VAR 0 3
11460: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11468: LD_ADDR_VAR 0 6
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_VAR 0 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 31
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 30
11500: PUSH
11501: LD_INT 32
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 33
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 30
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 30
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11555: LD_ADDR_VAR 0 7
11559: PUSH
11560: LD_INT 22
11562: PUSH
11563: LD_VAR 0 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 21
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 58
11584: PUSH
11585: EMPTY
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11598: LD_VAR 0 6
11602: PUSH
11603: LD_INT 0
11605: GREATER
11606: PUSH
11607: LD_VAR 0 7
11611: PUSH
11612: LD_INT 0
11614: GREATER
11615: AND
11616: IFFALSE 11686
// begin for i in turretsList do
11618: LD_ADDR_VAR 0 4
11622: PUSH
11623: LD_VAR 0 6
11627: PUSH
11628: FOR_IN
11629: IFFALSE 11684
// begin for j in enemyBuildings do
11631: LD_ADDR_VAR 0 5
11635: PUSH
11636: LD_VAR 0 7
11640: PUSH
11641: FOR_IN
11642: IFFALSE 11680
// begin if GetDistUnits ( i , j ) < 20 then
11644: LD_VAR 0 4
11648: PPUSH
11649: LD_VAR 0 5
11653: PPUSH
11654: CALL_OW 296
11658: PUSH
11659: LD_INT 20
11661: LESS
11662: IFFALSE 11678
// begin ComAttackUnit ( i , j ) ;
11664: LD_VAR 0 4
11668: PPUSH
11669: LD_VAR 0 5
11673: PPUSH
11674: CALL_OW 115
// end ; end ;
11678: GO 11641
11680: POP
11681: POP
// end ;
11682: GO 11628
11684: POP
11685: POP
// end ; end ;
11686: LD_VAR 0 3
11690: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// for i = 1 to vehCount do
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: DOUBLE
11701: LD_INT 1
11703: DEC
11704: ST_TO_ADDR
11705: LD_VAR 0 3
11709: PUSH
11710: FOR_TO
11711: IFFALSE 11758
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 7
11722: PPUSH
11723: LD_VAR 0 5
11727: PPUSH
11728: LD_VAR 0 6
11732: PPUSH
11733: LD_VAR 0 4
11737: PUSH
11738: LD_INT 1
11740: PPUSH
11741: LD_VAR 0 4
11745: PPUSH
11746: CALL_OW 12
11750: ARRAY
11751: PPUSH
11752: CALL_OW 185
11756: GO 11710
11758: POP
11759: POP
// end ;
11760: LD_VAR 0 8
11764: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11765: LD_INT 0
11767: PPUSH
11768: PPUSH
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
// if oponent = 1 then
11773: LD_VAR 0 2
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: IFFALSE 11971
// begin repeat wait ( 0 0$1 ) ;
11783: LD_INT 35
11785: PPUSH
11786: CALL_OW 67
// for j in legionVehicles do
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_EXP 55
11799: PUSH
11800: FOR_IN
11801: IFFALSE 11959
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11803: LD_ADDR_VAR 0 7
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_VAR 0 1
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 69
11824: PPUSH
11825: LD_VAR 0 5
11829: PPUSH
11830: CALL_OW 74
11834: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11835: LD_ADDR_VAR 0 8
11839: PUSH
11840: LD_INT 22
11842: PUSH
11843: LD_VAR 0 1
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 30
11854: PUSH
11855: LD_INT 32
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 59
11864: PUSH
11865: EMPTY
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PPUSH
11881: LD_VAR 0 5
11885: PPUSH
11886: CALL_OW 74
11890: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11891: LD_VAR 0 5
11895: PPUSH
11896: LD_VAR 0 7
11900: PPUSH
11901: CALL_OW 296
11905: PUSH
11906: LD_INT 8
11908: PLUS
11909: PUSH
11910: LD_VAR 0 5
11914: PPUSH
11915: LD_VAR 0 8
11919: PPUSH
11920: CALL_OW 296
11924: LESS
11925: IFFALSE 11943
// ComAttackUnit ( j , target1 ) else
11927: LD_VAR 0 5
11931: PPUSH
11932: LD_VAR 0 7
11936: PPUSH
11937: CALL_OW 115
11941: GO 11957
// ComAttackUnit ( j , target2 ) ;
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_VAR 0 8
11952: PPUSH
11953: CALL_OW 115
// end ;
11957: GO 11800
11959: POP
11960: POP
// until legionVehicles = 0 ;
11961: LD_EXP 55
11965: PUSH
11966: LD_INT 0
11968: EQUAL
11969: IFFALSE 11783
// end ; if oponent = 2 then
11971: LD_VAR 0 2
11975: PUSH
11976: LD_INT 2
11978: EQUAL
11979: IFFALSE 12169
// begin repeat wait ( 0 0$1 ) ;
11981: LD_INT 35
11983: PPUSH
11984: CALL_OW 67
// for j in russianVehicles do
11988: LD_ADDR_VAR 0 5
11992: PUSH
11993: LD_EXP 61
11997: PUSH
11998: FOR_IN
11999: IFFALSE 12157
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12001: LD_ADDR_VAR 0 7
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_VAR 0 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PPUSH
12018: CALL_OW 69
12022: PPUSH
12023: LD_VAR 0 5
12027: PPUSH
12028: CALL_OW 74
12032: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12033: LD_ADDR_VAR 0 8
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_VAR 0 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 59
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PPUSH
12079: LD_VAR 0 5
12083: PPUSH
12084: CALL_OW 74
12088: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12089: LD_VAR 0 5
12093: PPUSH
12094: LD_VAR 0 7
12098: PPUSH
12099: CALL_OW 296
12103: PUSH
12104: LD_INT 8
12106: PLUS
12107: PUSH
12108: LD_VAR 0 5
12112: PPUSH
12113: LD_VAR 0 8
12117: PPUSH
12118: CALL_OW 296
12122: LESS
12123: IFFALSE 12141
// ComAttackUnit ( j , target1 ) else
12125: LD_VAR 0 5
12129: PPUSH
12130: LD_VAR 0 7
12134: PPUSH
12135: CALL_OW 115
12139: GO 12155
// ComAttackUnit ( j , target2 ) ;
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_VAR 0 8
12150: PPUSH
12151: CALL_OW 115
// end ;
12155: GO 11998
12157: POP
12158: POP
// until russianVehicles = 0 ;
12159: LD_EXP 61
12163: PUSH
12164: LD_INT 0
12166: EQUAL
12167: IFFALSE 11981
// end ; if oponent = 3 then
12169: LD_VAR 0 2
12173: PUSH
12174: LD_INT 3
12176: EQUAL
12177: IFFALSE 12367
// begin repeat wait ( 0 0$1 ) ;
12179: LD_INT 35
12181: PPUSH
12182: CALL_OW 67
// for j in allianceVehicles do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: LD_EXP 62
12195: PUSH
12196: FOR_IN
12197: IFFALSE 12355
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12199: LD_ADDR_VAR 0 7
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: PPUSH
12221: LD_VAR 0 5
12225: PPUSH
12226: CALL_OW 74
12230: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12231: LD_ADDR_VAR 0 8
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: LD_VAR 0 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 30
12250: PUSH
12251: LD_INT 32
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 59
12260: PUSH
12261: EMPTY
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: PPUSH
12277: LD_VAR 0 5
12281: PPUSH
12282: CALL_OW 74
12286: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12287: LD_VAR 0 5
12291: PPUSH
12292: LD_VAR 0 7
12296: PPUSH
12297: CALL_OW 296
12301: PUSH
12302: LD_INT 8
12304: PLUS
12305: PUSH
12306: LD_VAR 0 5
12310: PPUSH
12311: LD_VAR 0 8
12315: PPUSH
12316: CALL_OW 296
12320: LESS
12321: IFFALSE 12339
// ComAttackUnit ( j , target1 ) else
12323: LD_VAR 0 5
12327: PPUSH
12328: LD_VAR 0 7
12332: PPUSH
12333: CALL_OW 115
12337: GO 12353
// ComAttackUnit ( j , target2 ) ;
12339: LD_VAR 0 5
12343: PPUSH
12344: LD_VAR 0 8
12348: PPUSH
12349: CALL_OW 115
// end ;
12353: GO 12196
12355: POP
12356: POP
// until allianceVehicles = 0 ;
12357: LD_EXP 62
12361: PUSH
12362: LD_INT 0
12364: EQUAL
12365: IFFALSE 12179
// end ; end ;
12367: LD_VAR 0 3
12371: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
12379: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12380: LD_ADDR_VAR 0 6
12384: PUSH
12385: LD_INT 22
12387: PUSH
12388: LD_VAR 0 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 9
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 69
12415: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12416: LD_ADDR_VAR 0 7
12420: PUSH
12421: LD_INT 81
12423: PUSH
12424: LD_VAR 0 1
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 3
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 3
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12459: LD_ADDR_VAR 0 4
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 3
12469: PPUSH
12470: CALL_OW 12
12474: ST_TO_ADDR
// for i = 1 to list do
12475: LD_ADDR_VAR 0 5
12479: PUSH
12480: DOUBLE
12481: LD_INT 1
12483: DEC
12484: ST_TO_ADDR
12485: LD_VAR 0 6
12489: PUSH
12490: FOR_TO
12491: IFFALSE 12693
// for ta in filter do
12493: LD_ADDR_VAR 0 3
12497: PUSH
12498: LD_VAR 0 7
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12689
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12506: LD_VAR 0 6
12510: PUSH
12511: LD_VAR 0 5
12515: ARRAY
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: CALL_OW 296
12526: PUSH
12527: LD_INT 15
12529: LESSEQUAL
12530: IFFALSE 12687
// begin case c of 1 :
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12583
12545: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12546: LD_VAR 0 6
12550: PUSH
12551: LD_VAR 0 5
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: CALL_OW 250
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: CALL_OW 251
12576: PPUSH
12577: CALL_OW 154
12581: GO 12687
12583: LD_INT 2
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 12655
12591: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12592: LD_VAR 0 6
12596: PUSH
12597: LD_VAR 0 5
12601: ARRAY
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: CALL_OW 250
12612: PUSH
12613: LD_INT 1
12615: NEG
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 12
12624: PLUS
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: CALL_OW 251
12635: PUSH
12636: LD_INT 1
12638: NEG
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 12
12647: PLUS
12648: PPUSH
12649: CALL_OW 153
12653: GO 12687
12655: LD_INT 3
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12686
12663: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12664: LD_VAR 0 6
12668: PUSH
12669: LD_VAR 0 5
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: CALL_OW 115
12684: GO 12687
12686: POP
// end ; end ;
12687: GO 12503
12689: POP
12690: POP
12691: GO 12490
12693: POP
12694: POP
// end ;
12695: LD_VAR 0 2
12699: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12700: LD_INT 0
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12706: LD_INT 22
12708: PUSH
12709: LD_VAR 0 1
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 34
12730: PUSH
12731: LD_INT 49
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: LD_INT 0
12750: EQUAL
12751: IFFALSE 12755
// exit ;
12753: GO 13010
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12755: LD_INT 22
12757: PUSH
12758: LD_VAR 0 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 34
12779: PUSH
12780: LD_INT 49
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 69
12796: PUSH
12797: LD_INT 0
12799: GREATER
12800: IFFALSE 13010
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12802: LD_ADDR_VAR 0 6
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_VAR 0 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 21
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 34
12831: PUSH
12832: LD_INT 49
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12849: LD_INT 105
12851: PPUSH
12852: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12856: LD_ADDR_VAR 0 4
12860: PUSH
12861: LD_VAR 0 6
12865: PPUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PPUSH
12879: CALL_OW 72
12883: PUSH
12884: FOR_IN
12885: IFFALSE 12998
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12887: LD_ADDR_VAR 0 5
12891: PUSH
12892: LD_INT 81
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 101
12906: PUSH
12907: LD_VAR 0 2
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: LD_INT 58
12934: PUSH
12935: EMPTY
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: PPUSH
12957: LD_VAR 0 4
12961: PPUSH
12962: CALL_OW 74
12966: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12967: LD_VAR 0 4
12971: PPUSH
12972: LD_VAR 0 5
12976: PPUSH
12977: CALL_OW 250
12981: PPUSH
12982: LD_VAR 0 5
12986: PPUSH
12987: CALL_OW 251
12991: PPUSH
12992: CALL_OW 111
// end ;
12996: GO 12884
12998: POP
12999: POP
// until vehs = 0 ;
13000: LD_VAR 0 6
13004: PUSH
13005: LD_INT 0
13007: EQUAL
13008: IFFALSE 12802
// end ;
13010: LD_VAR 0 3
13014: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13023: LD_VAR 0 1
13027: NOT
13028: PUSH
13029: LD_VAR 0 1
13033: PPUSH
13034: CALL_OW 263
13038: PUSH
13039: LD_INT 2
13041: EQUAL
13042: NOT
13043: OR
13044: IFFALSE 13048
// exit ;
13046: GO 13364
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13048: LD_ADDR_VAR 0 6
13052: PUSH
13053: LD_INT 22
13055: PUSH
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 255
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 2
13072: PUSH
13073: LD_INT 30
13075: PUSH
13076: LD_INT 36
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 34
13085: PUSH
13086: LD_INT 31
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// if not tmp then
13107: LD_VAR 0 6
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 13364
// result := [ ] ;
13116: LD_ADDR_VAR 0 2
13120: PUSH
13121: EMPTY
13122: ST_TO_ADDR
// for i in tmp do
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: LD_VAR 0 6
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13205
// begin t := UnitsInside ( i ) ;
13136: LD_ADDR_VAR 0 4
13140: PUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: CALL_OW 313
13150: ST_TO_ADDR
// if t then
13151: LD_VAR 0 4
13155: IFFALSE 13203
// for j in t do
13157: LD_ADDR_VAR 0 7
13161: PUSH
13162: LD_VAR 0 4
13166: PUSH
13167: FOR_IN
13168: IFFALSE 13201
// result := Insert ( result , result + 1 , j ) ;
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 2
13179: PPUSH
13180: LD_VAR 0 2
13184: PUSH
13185: LD_INT 1
13187: PLUS
13188: PPUSH
13189: LD_VAR 0 7
13193: PPUSH
13194: CALL_OW 2
13198: ST_TO_ADDR
13199: GO 13167
13201: POP
13202: POP
// end ;
13203: GO 13133
13205: POP
13206: POP
// if not result then
13207: LD_VAR 0 2
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13364
// mech := result [ 1 ] ;
13216: LD_ADDR_VAR 0 5
13220: PUSH
13221: LD_VAR 0 2
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: ST_TO_ADDR
// if result > 1 then
13230: LD_VAR 0 2
13234: PUSH
13235: LD_INT 1
13237: GREATER
13238: IFFALSE 13350
// for i = 2 to result do
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: DOUBLE
13246: LD_INT 2
13248: DEC
13249: ST_TO_ADDR
13250: LD_VAR 0 2
13254: PUSH
13255: FOR_TO
13256: IFFALSE 13348
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13258: LD_ADDR_VAR 0 4
13262: PUSH
13263: LD_VAR 0 2
13267: PUSH
13268: LD_VAR 0 3
13272: ARRAY
13273: PPUSH
13274: LD_INT 3
13276: PPUSH
13277: CALL_OW 259
13281: PUSH
13282: LD_VAR 0 2
13286: PUSH
13287: LD_VAR 0 3
13291: ARRAY
13292: PPUSH
13293: CALL_OW 432
13297: MINUS
13298: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13299: LD_VAR 0 4
13303: PUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: LD_INT 3
13311: PPUSH
13312: CALL_OW 259
13316: PUSH
13317: LD_VAR 0 5
13321: PPUSH
13322: CALL_OW 432
13326: MINUS
13327: GREATEREQUAL
13328: IFFALSE 13346
// mech := result [ i ] ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: LD_VAR 0 2
13339: PUSH
13340: LD_VAR 0 3
13344: ARRAY
13345: ST_TO_ADDR
// end ;
13346: GO 13255
13348: POP
13349: POP
// ComLinkTo ( vehicle , mech ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: LD_VAR 0 5
13359: PPUSH
13360: CALL_OW 135
// end ; end_of_file
13364: LD_VAR 0 2
13368: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 1
13376: EQUAL
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: LD_INT 4
13385: EQUAL
13386: AND
13387: IFFALSE 13396
// YouLost ( text ) ;
13389: LD_STRING text
13391: PPUSH
13392: CALL_OW 104
// end ;
13396: PPOPN 2
13398: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13399: LD_VAR 0 1
13403: PUSH
13404: LD_INT 235
13406: EQUAL
13407: PUSH
13408: LD_VAR 0 2
13412: PPUSH
13413: CALL_OW 255
13417: PUSH
13418: LD_INT 4
13420: EQUAL
13421: AND
13422: IFFALSE 13498
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13424: LD_INT 235
13426: PPUSH
13427: LD_INT 84
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13437: LD_INT 235
13439: PPUSH
13440: LD_INT 68
13442: PPUSH
13443: LD_INT 100
13445: PPUSH
13446: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13450: LD_INT 235
13452: PPUSH
13453: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13457: LD_INT 235
13459: PPUSH
13460: LD_INT 48
13462: PPUSH
13463: LD_INT 69
13465: PPUSH
13466: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13470: LD_INT 235
13472: PPUSH
13473: LD_INT 39
13475: PPUSH
13476: LD_INT 61
13478: PPUSH
13479: CALL_OW 171
// wait ( 0 0$10 ) ;
13483: LD_INT 350
13485: PPUSH
13486: CALL_OW 67
// powellUnloadCargo = 1 ;
13490: LD_ADDR_EXP 70
13494: PUSH
13495: LD_INT 1
13497: ST_TO_ADDR
// end ; end ;
13498: PPOPN 2
13500: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 4
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 56
13532: PUSH
13533: EMPTY
13534: LIST
13535: PUSH
13536: LD_INT 3
13538: PUSH
13539: LD_INT 60
13541: PUSH
13542: EMPTY
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: PUSH
13560: LD_EXP 17
13564: PUSH
13565: EMPTY
13566: LIST
13567: DIFF
13568: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13569: LD_VAR 0 1
13573: PPUSH
13574: CALL_OW 255
13578: PUSH
13579: LD_INT 4
13581: EQUAL
13582: IFFALSE 13713
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13584: LD_INT 22
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 30
13596: PUSH
13597: LD_INT 8
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PPUSH
13608: CALL_OW 69
13612: PUSH
13613: LD_INT 1
13615: EQUAL
13616: IFFALSE 13713
// begin for i = 1 to 3 do
13618: LD_ADDR_VAR 0 2
13622: PUSH
13623: DOUBLE
13624: LD_INT 1
13626: DEC
13627: ST_TO_ADDR
13628: LD_INT 3
13630: PUSH
13631: FOR_TO
13632: IFFALSE 13696
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13634: LD_VAR 0 3
13638: PUSH
13639: LD_VAR 0 2
13643: ARRAY
13644: PPUSH
13645: LD_INT 3
13647: PUSH
13648: LD_INT 25
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 72
13666: PPUSH
13667: LD_VAR 0 1
13671: PPUSH
13672: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13676: LD_VAR 0 3
13680: PUSH
13681: LD_VAR 0 2
13685: ARRAY
13686: PPUSH
13687: LD_INT 4
13689: PPUSH
13690: CALL_OW 183
// end ;
13694: GO 13631
13696: POP
13697: POP
// ResAllTechs ( 4 , building , 1 ) ;
13698: LD_INT 4
13700: PPUSH
13701: LD_VAR 0 1
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL 9558 0 3
// end ; if GetSide ( building ) = 8 then
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 255
13722: PUSH
13723: LD_INT 8
13725: EQUAL
13726: IFFALSE 13911
// begin if GetNation ( building ) = 3 then
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 248
13737: PUSH
13738: LD_INT 3
13740: EQUAL
13741: IFFALSE 13911
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13743: LD_EXP 36
13747: PPUSH
13748: LD_INT 73
13750: PPUSH
13751: LD_INT 16
13753: PPUSH
13754: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13758: LD_EXP 36
13762: PPUSH
13763: LD_INT 21
13765: PPUSH
13766: LD_INT 74
13768: PPUSH
13769: LD_INT 12
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 205
// wait ( 0 0$2 ) ;
13779: LD_INT 70
13781: PPUSH
13782: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13786: LD_EXP 36
13790: PPUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 8
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 23
13813: PUSH
13814: LD_INT 3
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 69
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: PPUSH
13835: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13839: LD_EXP 36
13843: PPUSH
13844: LD_INT 3
13846: PPUSH
13847: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13851: LD_INT 22
13853: PUSH
13854: LD_INT 8
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 30
13863: PUSH
13864: LD_INT 3
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 23
13873: PUSH
13874: LD_INT 3
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 69
13890: PUSH
13891: LD_INT 1
13893: ARRAY
13894: PPUSH
13895: LD_INT 24
13897: PPUSH
13898: LD_INT 3
13900: PPUSH
13901: LD_INT 3
13903: PPUSH
13904: LD_INT 48
13906: PPUSH
13907: CALL_OW 185
// end ; end ; end ;
13911: PPOPN 3
13913: END
// on BuildingComplete ( building ) do var powellPeople ;
13914: LD_INT 0
13916: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 255
13926: PUSH
13927: LD_INT 4
13929: EQUAL
13930: PUSH
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 266
13940: PUSH
13941: LD_INT 17
13943: EQUAL
13944: AND
13945: IFFALSE 14227
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_INT 22
13954: PUSH
13955: LD_INT 4
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 21
13964: PUSH
13965: LD_INT 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 56
13974: PUSH
13975: EMPTY
13976: LIST
13977: PUSH
13978: LD_INT 3
13980: PUSH
13981: LD_INT 60
13983: PUSH
13984: EMPTY
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PUSH
14002: LD_EXP 17
14006: PUSH
14007: EMPTY
14008: LIST
14009: DIFF
14010: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
14011: LD_INT 22
14013: PUSH
14014: LD_INT 4
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 21
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 30
14033: PUSH
14034: LD_INT 32
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: PPUSH
14046: CALL_OW 69
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: PPUSH
14055: LD_INT 6
14057: PPUSH
14058: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
14062: LD_INT 22
14064: PUSH
14065: LD_INT 4
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 30
14084: PUSH
14085: LD_INT 32
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: PPUSH
14097: CALL_OW 69
14101: PUSH
14102: LD_INT 2
14104: ARRAY
14105: PPUSH
14106: LD_INT 5
14108: PPUSH
14109: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
14113: LD_VAR 0 2
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_INT 22
14124: PUSH
14125: LD_INT 4
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 21
14134: PUSH
14135: LD_INT 3
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 30
14144: PUSH
14145: LD_INT 32
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: PPUSH
14166: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
14170: LD_VAR 0 2
14174: PUSH
14175: LD_INT 2
14177: ARRAY
14178: PPUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 4
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 21
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 30
14201: PUSH
14202: LD_INT 32
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 69
14218: PUSH
14219: LD_INT 2
14221: ARRAY
14222: PPUSH
14223: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
14227: LD_VAR 0 1
14231: PPUSH
14232: CALL_OW 255
14236: PUSH
14237: LD_INT 4
14239: EQUAL
14240: PUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: CALL_OW 266
14250: PUSH
14251: LD_INT 21
14253: EQUAL
14254: AND
14255: IFFALSE 14402
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14257: LD_INT 85
14259: PPUSH
14260: LD_INT 3
14262: PPUSH
14263: LD_INT 3
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_INT 3
14271: PUSH
14272: LD_INT 5
14274: PUSH
14275: LD_INT 7
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 1
14285: PPUSH
14286: LD_INT 3
14288: PPUSH
14289: CALL_OW 12
14293: ARRAY
14294: PPUSH
14295: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14299: LD_INT 85
14301: PPUSH
14302: LD_INT 3
14304: PPUSH
14305: LD_INT 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: LD_INT 3
14313: PUSH
14314: LD_INT 5
14316: PUSH
14317: LD_INT 7
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 1
14327: PPUSH
14328: LD_INT 3
14330: PPUSH
14331: CALL_OW 12
14335: ARRAY
14336: PPUSH
14337: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14341: LD_INT 85
14343: PPUSH
14344: LD_INT 3
14346: PPUSH
14347: LD_INT 3
14349: PPUSH
14350: LD_INT 1
14352: PPUSH
14353: LD_INT 3
14355: PUSH
14356: LD_INT 5
14358: PUSH
14359: LD_INT 7
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 1
14369: PPUSH
14370: LD_INT 3
14372: PPUSH
14373: CALL_OW 12
14377: ARRAY
14378: PPUSH
14379: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14383: LD_INT 85
14385: PPUSH
14386: LD_INT 5
14388: PPUSH
14389: LD_INT 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: LD_INT 6
14397: PPUSH
14398: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 255
14411: PUSH
14412: LD_INT 8
14414: EQUAL
14415: IFFALSE 14441
// begin if GetBType ( building ) = b_workshop then
14417: LD_VAR 0 1
14421: PPUSH
14422: CALL_OW 266
14426: PUSH
14427: LD_INT 2
14429: EQUAL
14430: IFFALSE 14441
// ComUpgrade ( building ) ;
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 255
14450: PUSH
14451: LD_INT 3
14453: EQUAL
14454: IFFALSE 14528
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14456: LD_ADDR_EXP 94
14460: PUSH
14461: LD_EXP 94
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 3
14473: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14474: LD_ADDR_EXP 94
14478: PUSH
14479: LD_EXP 94
14483: PPUSH
14484: LD_INT 1
14486: PPUSH
14487: CALL_OW 3
14491: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14492: LD_ADDR_EXP 94
14496: PUSH
14497: LD_EXP 94
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 3
14509: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14510: LD_ADDR_EXP 94
14514: PUSH
14515: LD_EXP 94
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 3
14527: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 8
14540: EQUAL
14541: IFFALSE 14615
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14543: LD_ADDR_EXP 93
14547: PUSH
14548: LD_EXP 93
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 3
14560: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14561: LD_ADDR_EXP 93
14565: PUSH
14566: LD_EXP 93
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 3
14578: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14579: LD_ADDR_EXP 93
14583: PUSH
14584: LD_EXP 93
14588: PPUSH
14589: LD_INT 1
14591: PPUSH
14592: CALL_OW 3
14596: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14597: LD_ADDR_EXP 93
14601: PUSH
14602: LD_EXP 93
14606: PPUSH
14607: LD_INT 1
14609: PPUSH
14610: CALL_OW 3
14614: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14615: LD_VAR 0 1
14619: PPUSH
14620: CALL_OW 255
14624: PUSH
14625: LD_INT 7
14627: EQUAL
14628: IFFALSE 14702
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14630: LD_ADDR_EXP 95
14634: PUSH
14635: LD_EXP 95
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 3
14647: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14648: LD_ADDR_EXP 95
14652: PUSH
14653: LD_EXP 95
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: CALL_OW 3
14665: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14666: LD_ADDR_EXP 95
14670: PUSH
14671: LD_EXP 95
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 3
14683: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14684: LD_ADDR_EXP 95
14688: PUSH
14689: LD_EXP 95
14693: PPUSH
14694: LD_INT 1
14696: PPUSH
14697: CALL_OW 3
14701: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 255
14711: PUSH
14712: LD_INT 3
14714: EQUAL
14715: IFFALSE 14782
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 32
14729: EQUAL
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 266
14740: PUSH
14741: LD_INT 33
14743: EQUAL
14744: OR
14745: IFFALSE 14782
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_INT 46
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: LD_INT 45
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 1
14768: PPUSH
14769: LD_INT 3
14771: PPUSH
14772: CALL_OW 12
14776: ARRAY
14777: PPUSH
14778: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 255
14791: PUSH
14792: LD_INT 8
14794: EQUAL
14795: PUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 266
14805: PUSH
14806: LD_INT 32
14808: EQUAL
14809: AND
14810: IFFALSE 14843
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14812: LD_VAR 0 1
14816: PPUSH
14817: LD_INT 28
14819: PUSH
14820: LD_INT 27
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 1
14829: PPUSH
14830: LD_INT 2
14832: PPUSH
14833: CALL_OW 12
14837: ARRAY
14838: PPUSH
14839: CALL_OW 431
// end ; end ;
14843: PPOPN 2
14845: END
// on EnterBuilding ( building , human ) do begin end ;
14846: PPOPN 2
14848: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: IFFALSE 14880
// ruBehs = ruBehs ^ vehicle ;
14864: LD_ADDR_EXP 59
14868: PUSH
14869: LD_EXP 59
14873: PUSH
14874: LD_VAR 0 1
14878: ADD
14879: ST_TO_ADDR
// end ;
14880: PPOPN 1
14882: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14883: LD_INT 0
14885: PPUSH
14886: PPUSH
// begin if vehicle = powellVeh then
14887: LD_VAR 0 1
14891: PUSH
14892: LD_EXP 73
14896: EQUAL
14897: IFFALSE 14913
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 313
14908: PPUSH
14909: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 255
14922: PUSH
14923: LD_INT 4
14925: EQUAL
14926: IFFALSE 14943
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_INT 58
14935: PPUSH
14936: LD_INT 63
14938: PPUSH
14939: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 4
14955: EQUAL
14956: PUSH
14957: LD_EXP 69
14961: PUSH
14962: LD_INT 2
14964: EQUAL
14965: AND
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 264
14976: PUSH
14977: LD_INT 6
14979: EQUAL
14980: AND
14981: IFFALSE 15035
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14983: LD_EXP 66
14987: PUSH
14988: LD_INT 5
14990: ARRAY
14991: PPUSH
14992: CALL_OW 122
// wait ( 0 0$1 ) ;
14996: LD_INT 35
14998: PPUSH
14999: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
15003: LD_EXP 66
15007: PUSH
15008: LD_INT 5
15010: ARRAY
15011: PPUSH
15012: LD_INT 85
15014: PPUSH
15015: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
15019: LD_EXP 66
15023: PUSH
15024: LD_INT 5
15026: ARRAY
15027: PPUSH
15028: LD_INT 3
15030: PPUSH
15031: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 255
15044: PUSH
15045: LD_INT 4
15047: EQUAL
15048: PUSH
15049: LD_EXP 69
15053: PUSH
15054: LD_INT 2
15056: EQUAL
15057: AND
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 264
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: AND
15073: IFFALSE 15100
// begin powellVeh = vehicle ;
15075: LD_ADDR_EXP 73
15079: PUSH
15080: LD_VAR 0 1
15084: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
15085: LD_VAR 0 1
15089: PPUSH
15090: LD_INT 49
15092: PPUSH
15093: LD_INT 74
15095: PPUSH
15096: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 255
15109: PUSH
15110: LD_INT 8
15112: EQUAL
15113: PUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 248
15123: PUSH
15124: LD_INT 2
15126: EQUAL
15127: AND
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 247
15138: PUSH
15139: LD_INT 2
15141: EQUAL
15142: AND
15143: IFFALSE 15179
// begin legionVehicles = legionVehicles ^ vehicle ;
15145: LD_ADDR_EXP 55
15149: PUSH
15150: LD_EXP 55
15154: PUSH
15155: LD_VAR 0 1
15159: ADD
15160: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_EXP 56
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 255
15188: PUSH
15189: LD_INT 8
15191: EQUAL
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 248
15202: PUSH
15203: LD_INT 3
15205: EQUAL
15206: AND
15207: IFFALSE 15746
// begin ChangeMissionObjectives ( MlegionDel ) ;
15209: LD_STRING MlegionDel
15211: PPUSH
15212: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
15216: LD_ADDR_VAR 0 3
15220: PUSH
15221: LD_INT 1
15223: PPUSH
15224: LD_INT 2
15226: PPUSH
15227: CALL_OW 12
15231: ST_TO_ADDR
// legionRocket = vehicle ;
15232: LD_ADDR_EXP 99
15236: PUSH
15237: LD_VAR 0 1
15241: ST_TO_ADDR
// DialogueOn ;
15242: CALL_OW 6
// if legionBomb = 1 then
15246: LD_VAR 0 3
15250: PUSH
15251: LD_INT 1
15253: EQUAL
15254: IFFALSE 15606
// begin if Kurt then
15256: LD_EXP 30
15260: IFFALSE 15276
// Say ( Kurt , D12-Kurt-1 ) else
15262: LD_EXP 30
15266: PPUSH
15267: LD_STRING D12-Kurt-1
15269: PPUSH
15270: CALL_OW 88
15274: GO 15338
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
15276: LD_INT 22
15278: PUSH
15279: LD_INT 8
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 25
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 69
15326: PUSH
15327: LD_INT 2
15329: ARRAY
15330: PPUSH
15331: LD_STRING D12-Kurt-1
15333: PPUSH
15334: CALL_OW 88
// DialogueOff ;
15338: CALL_OW 7
// wait ( 0 0$15 ) ;
15342: LD_INT 525
15344: PPUSH
15345: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15349: LD_ADDR_VAR 0 4
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 21
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 23
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 30
15389: PUSH
15390: LD_INT 0
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 69
15422: ST_TO_ADDR
// if rocketTarget = 0 then
15423: LD_VAR 0 4
15427: PUSH
15428: LD_INT 0
15430: EQUAL
15431: IFFALSE 15507
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15433: LD_ADDR_VAR 0 4
15437: PUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 21
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 23
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 2
15470: PUSH
15471: LD_INT 30
15473: PUSH
15474: LD_INT 0
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 30
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PPUSH
15502: CALL_OW 69
15506: ST_TO_ADDR
// if rocketTarget = 0 then
15507: LD_VAR 0 4
15511: PUSH
15512: LD_INT 0
15514: EQUAL
15515: IFFALSE 15569
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15517: LD_ADDR_VAR 0 4
15521: PUSH
15522: LD_INT 22
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 21
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 23
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 50
15554: PUSH
15555: EMPTY
15556: LIST
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 69
15568: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15569: LD_EXP 99
15573: PPUSH
15574: LD_VAR 0 4
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: PPUSH
15583: CALL_OW 250
15587: PPUSH
15588: LD_VAR 0 4
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PPUSH
15597: CALL_OW 251
15601: PPUSH
15602: CALL_OW 116
// end ; if legionBomb = 2 then
15606: LD_VAR 0 3
15610: PUSH
15611: LD_INT 2
15613: EQUAL
15614: IFFALSE 15746
// begin if Kurt then
15616: LD_EXP 30
15620: IFFALSE 15636
// Say ( Kurt , D12a-Kurt-1 ) else
15622: LD_EXP 30
15626: PPUSH
15627: LD_STRING D12a-Kurt-1
15629: PPUSH
15630: CALL_OW 88
15634: GO 15698
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15636: LD_INT 22
15638: PUSH
15639: LD_INT 8
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 21
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 25
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 26
15668: PUSH
15669: LD_INT 1
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: PUSH
15687: LD_INT 2
15689: ARRAY
15690: PPUSH
15691: LD_STRING D12a-Kurt-11
15693: PPUSH
15694: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15698: LD_EXP 28
15702: PPUSH
15703: LD_STRING D12a-Roth-1
15705: PPUSH
15706: CALL_OW 94
// DialogueOff ;
15710: CALL_OW 7
// wait ( 0 0$15 ) ;
15714: LD_INT 525
15716: PPUSH
15717: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15721: LD_EXP 99
15725: PPUSH
15726: LD_INT 23
15728: PPUSH
15729: CALL_OW 250
15733: PPUSH
15734: LD_INT 23
15736: PPUSH
15737: CALL_OW 251
15741: PPUSH
15742: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 255
15755: PUSH
15756: LD_INT 3
15758: EQUAL
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 248
15769: PUSH
15770: LD_INT 3
15772: EQUAL
15773: AND
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 247
15784: PUSH
15785: LD_INT 2
15787: EQUAL
15788: AND
15789: IFFALSE 15807
// RussianVehicles = RussianVehicles ^ vehicle ;
15791: LD_ADDR_EXP 61
15795: PUSH
15796: LD_EXP 61
15800: PUSH
15801: LD_VAR 0 1
15805: ADD
15806: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 255
15816: PUSH
15817: LD_INT 7
15819: EQUAL
15820: PUSH
15821: LD_VAR 0 1
15825: PPUSH
15826: CALL_OW 247
15830: PUSH
15831: LD_INT 2
15833: EQUAL
15834: AND
15835: IFFALSE 15894
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15837: LD_ADDR_EXP 62
15841: PUSH
15842: LD_EXP 62
15846: PUSH
15847: LD_VAR 0 1
15851: ADD
15852: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15853: LD_VAR 0 1
15857: PPUSH
15858: CALL_OW 263
15862: PUSH
15863: LD_INT 2
15865: EQUAL
15866: IFFALSE 15894
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_EXP 63
15877: PUSH
15878: LD_INT 1
15880: PPUSH
15881: LD_INT 3
15883: PPUSH
15884: CALL_OW 12
15888: ARRAY
15889: PPUSH
15890: CALL_OW 135
// end ; end ;
15894: PPOPN 4
15896: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 255
15906: PUSH
15907: LD_INT 4
15909: EQUAL
15910: PUSH
15911: LD_EXP 69
15915: PUSH
15916: LD_INT 1
15918: EQUAL
15919: AND
15920: IFFALSE 16023
// begin ComEnterUnit ( human , AmFact ) ;
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_INT 85
15929: PPUSH
15930: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15934: LD_VAR 0 2
15938: PPUSH
15939: CALL_OW 258
15943: PUSH
15944: LD_INT 1
15946: EQUAL
15947: PUSH
15948: LD_EXP 102
15952: PUSH
15953: LD_INT 0
15955: EQUAL
15956: AND
15957: IFFALSE 16023
// begin blockEvent1 = 1 ;
15959: LD_ADDR_EXP 102
15963: PUSH
15964: LD_INT 1
15966: ST_TO_ADDR
// startAttacks = 1 ;
15967: LD_ADDR_EXP 72
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_STRING D4a-Sol1-1
15982: PPUSH
15983: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15987: LD_EXP 17
15991: PPUSH
15992: LD_STRING D4a-Pow-1
15994: PPUSH
15995: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15999: LD_VAR 0 2
16003: PPUSH
16004: LD_STRING D4a-Sol1-2
16006: PPUSH
16007: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
16011: LD_EXP 17
16015: PPUSH
16016: LD_STRING D4a-Pow-2
16018: PPUSH
16019: CALL_OW 88
// end ; end ; end ;
16023: PPOPN 2
16025: END
// on UnitDestroyed ( unit ) do var i ;
16026: LD_INT 0
16028: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 255
16038: PUSH
16039: LD_INT 1
16041: EQUAL
16042: PUSH
16043: LD_VAR 0 1
16047: PPUSH
16048: CALL_OW 247
16052: PUSH
16053: LD_INT 1
16055: EQUAL
16056: AND
16057: IFFALSE 16073
// unitLost = unitLost + 1 ;
16059: LD_ADDR_EXP 98
16063: PUSH
16064: LD_EXP 98
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 255
16082: PUSH
16083: LD_INT 4
16085: EQUAL
16086: PUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 247
16096: PUSH
16097: LD_INT 1
16099: EQUAL
16100: AND
16101: IFFALSE 16151
// begin for i in amUnitsAttack do
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: LD_EXP 66
16112: PUSH
16113: FOR_IN
16114: IFFALSE 16149
// if i = unit then
16116: LD_VAR 0 2
16120: PUSH
16121: LD_VAR 0 1
16125: EQUAL
16126: IFFALSE 16147
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
16128: LD_ADDR_EXP 66
16132: PUSH
16133: LD_EXP 66
16137: PUSH
16138: LD_VAR 0 1
16142: PUSH
16143: EMPTY
16144: LIST
16145: DIFF
16146: ST_TO_ADDR
16147: GO 16113
16149: POP
16150: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 255
16160: PUSH
16161: LD_INT 8
16163: EQUAL
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 247
16174: PUSH
16175: LD_INT 2
16177: EQUAL
16178: AND
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 248
16189: PUSH
16190: LD_INT 2
16192: EQUAL
16193: AND
16194: IFFALSE 16244
// begin for i in legionVehicles do
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_EXP 55
16205: PUSH
16206: FOR_IN
16207: IFFALSE 16242
// if i = unit then
16209: LD_VAR 0 2
16213: PUSH
16214: LD_VAR 0 1
16218: EQUAL
16219: IFFALSE 16240
// legionVehicles = legionVehicles diff [ unit ] ;
16221: LD_ADDR_EXP 55
16225: PUSH
16226: LD_EXP 55
16230: PUSH
16231: LD_VAR 0 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: DIFF
16239: ST_TO_ADDR
16240: GO 16206
16242: POP
16243: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 255
16253: PUSH
16254: LD_INT 3
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: AND
16272: IFFALSE 16322
// begin for i in RussianVehicles do
16274: LD_ADDR_VAR 0 2
16278: PUSH
16279: LD_EXP 61
16283: PUSH
16284: FOR_IN
16285: IFFALSE 16320
// if i = unit then
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 1
16296: EQUAL
16297: IFFALSE 16318
// RussianVehicles = RussianVehicles diff [ unit ] ;
16299: LD_ADDR_EXP 61
16303: PUSH
16304: LD_EXP 61
16308: PUSH
16309: LD_VAR 0 1
16313: PUSH
16314: EMPTY
16315: LIST
16316: DIFF
16317: ST_TO_ADDR
16318: GO 16284
16320: POP
16321: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
16322: LD_VAR 0 1
16326: PPUSH
16327: CALL_OW 255
16331: PUSH
16332: LD_INT 7
16334: EQUAL
16335: PUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 247
16345: PUSH
16346: LD_INT 2
16348: EQUAL
16349: AND
16350: IFFALSE 16400
// begin for i in AllianceVehicles do
16352: LD_ADDR_VAR 0 2
16356: PUSH
16357: LD_EXP 62
16361: PUSH
16362: FOR_IN
16363: IFFALSE 16398
// if i = unit then
16365: LD_VAR 0 2
16369: PUSH
16370: LD_VAR 0 1
16374: EQUAL
16375: IFFALSE 16396
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16377: LD_ADDR_EXP 62
16381: PUSH
16382: LD_EXP 62
16386: PUSH
16387: LD_VAR 0 1
16391: PUSH
16392: EMPTY
16393: LIST
16394: DIFF
16395: ST_TO_ADDR
16396: GO 16362
16398: POP
16399: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 255
16409: PUSH
16410: LD_INT 3
16412: EQUAL
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 247
16423: PUSH
16424: LD_INT 3
16426: EQUAL
16427: AND
16428: IFFALSE 17120
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 266
16439: PUSH
16440: LD_INT 31
16442: EQUAL
16443: PUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 266
16453: PUSH
16454: LD_INT 32
16456: EQUAL
16457: OR
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 266
16468: PUSH
16469: LD_INT 36
16471: EQUAL
16472: OR
16473: PUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 266
16483: PUSH
16484: LD_INT 0
16486: EQUAL
16487: OR
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 266
16498: PUSH
16499: LD_INT 24
16501: EQUAL
16502: OR
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 266
16513: PUSH
16514: LD_INT 17
16516: EQUAL
16517: OR
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 266
16528: PUSH
16529: LD_INT 25
16531: EQUAL
16532: OR
16533: PUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 266
16543: PUSH
16544: LD_INT 19
16546: EQUAL
16547: OR
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 266
16558: PUSH
16559: LD_INT 20
16561: EQUAL
16562: OR
16563: PUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 266
16573: PUSH
16574: LD_INT 18
16576: EQUAL
16577: OR
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 266
16588: PUSH
16589: LD_INT 21
16591: EQUAL
16592: OR
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 266
16603: PUSH
16604: LD_INT 23
16606: EQUAL
16607: OR
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 266
16618: PUSH
16619: LD_INT 16
16621: EQUAL
16622: OR
16623: PUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 266
16633: PUSH
16634: LD_INT 6
16636: EQUAL
16637: OR
16638: PUSH
16639: LD_VAR 0 1
16643: PPUSH
16644: CALL_OW 266
16648: PUSH
16649: LD_INT 29
16651: EQUAL
16652: OR
16653: PUSH
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 266
16663: PUSH
16664: LD_INT 26
16666: EQUAL
16667: OR
16668: PUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 266
16678: PUSH
16679: LD_INT 30
16681: EQUAL
16682: OR
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 266
16693: PUSH
16694: LD_INT 28
16696: EQUAL
16697: OR
16698: PUSH
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 27
16711: EQUAL
16712: OR
16713: PUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 266
16723: PUSH
16724: LD_INT 33
16726: EQUAL
16727: OR
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 266
16738: PUSH
16739: LD_INT 2
16741: EQUAL
16742: OR
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 266
16753: PUSH
16754: LD_INT 4
16756: EQUAL
16757: OR
16758: IFFALSE 16844
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16760: LD_ADDR_EXP 94
16764: PUSH
16765: LD_EXP 94
16769: PUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 266
16779: ADD
16780: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16781: LD_ADDR_EXP 94
16785: PUSH
16786: LD_EXP 94
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 250
16800: ADD
16801: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16802: LD_ADDR_EXP 94
16806: PUSH
16807: LD_EXP 94
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 251
16821: ADD
16822: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16823: LD_ADDR_EXP 94
16827: PUSH
16828: LD_EXP 94
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 254
16842: ADD
16843: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 266
16853: PUSH
16854: LD_INT 1
16856: EQUAL
16857: IFFALSE 16936
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16859: LD_ADDR_EXP 94
16863: PUSH
16864: LD_EXP 94
16868: PUSH
16869: LD_INT 0
16871: ADD
16872: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16873: LD_ADDR_EXP 94
16877: PUSH
16878: LD_EXP 94
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 250
16892: ADD
16893: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16894: LD_ADDR_EXP 94
16898: PUSH
16899: LD_EXP 94
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 251
16913: ADD
16914: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16915: LD_ADDR_EXP 94
16919: PUSH
16920: LD_EXP 94
16924: PUSH
16925: LD_VAR 0 1
16929: PPUSH
16930: CALL_OW 254
16934: ADD
16935: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16936: LD_VAR 0 1
16940: PPUSH
16941: CALL_OW 266
16945: PUSH
16946: LD_INT 3
16948: EQUAL
16949: IFFALSE 17028
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16951: LD_ADDR_EXP 94
16955: PUSH
16956: LD_EXP 94
16960: PUSH
16961: LD_INT 2
16963: ADD
16964: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16965: LD_ADDR_EXP 94
16969: PUSH
16970: LD_EXP 94
16974: PUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 250
16984: ADD
16985: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16986: LD_ADDR_EXP 94
16990: PUSH
16991: LD_EXP 94
16995: PUSH
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL_OW 251
17005: ADD
17006: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17007: LD_ADDR_EXP 94
17011: PUSH
17012: LD_EXP 94
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 254
17026: ADD
17027: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 266
17037: PUSH
17038: LD_INT 5
17040: EQUAL
17041: IFFALSE 17120
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
17043: LD_ADDR_EXP 94
17047: PUSH
17048: LD_EXP 94
17052: PUSH
17053: LD_INT 4
17055: ADD
17056: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
17057: LD_ADDR_EXP 94
17061: PUSH
17062: LD_EXP 94
17066: PUSH
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL_OW 250
17076: ADD
17077: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17078: LD_ADDR_EXP 94
17082: PUSH
17083: LD_EXP 94
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 251
17097: ADD
17098: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17099: LD_ADDR_EXP 94
17103: PUSH
17104: LD_EXP 94
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 254
17118: ADD
17119: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 255
17129: PUSH
17130: LD_INT 8
17132: EQUAL
17133: PUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 3
17146: EQUAL
17147: AND
17148: PUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: CALL_OW 248
17158: PUSH
17159: LD_INT 2
17161: EQUAL
17162: AND
17163: IFFALSE 17855
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 266
17174: PUSH
17175: LD_INT 31
17177: EQUAL
17178: PUSH
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 266
17188: PUSH
17189: LD_INT 32
17191: EQUAL
17192: OR
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 266
17203: PUSH
17204: LD_INT 36
17206: EQUAL
17207: OR
17208: PUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 266
17218: PUSH
17219: LD_INT 0
17221: EQUAL
17222: OR
17223: PUSH
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 266
17233: PUSH
17234: LD_INT 24
17236: EQUAL
17237: OR
17238: PUSH
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 266
17248: PUSH
17249: LD_INT 17
17251: EQUAL
17252: OR
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: CALL_OW 266
17263: PUSH
17264: LD_INT 25
17266: EQUAL
17267: OR
17268: PUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 266
17278: PUSH
17279: LD_INT 19
17281: EQUAL
17282: OR
17283: PUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: CALL_OW 266
17293: PUSH
17294: LD_INT 20
17296: EQUAL
17297: OR
17298: PUSH
17299: LD_VAR 0 1
17303: PPUSH
17304: CALL_OW 266
17308: PUSH
17309: LD_INT 18
17311: EQUAL
17312: OR
17313: PUSH
17314: LD_VAR 0 1
17318: PPUSH
17319: CALL_OW 266
17323: PUSH
17324: LD_INT 21
17326: EQUAL
17327: OR
17328: PUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 266
17338: PUSH
17339: LD_INT 23
17341: EQUAL
17342: OR
17343: PUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 266
17353: PUSH
17354: LD_INT 16
17356: EQUAL
17357: OR
17358: PUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 266
17368: PUSH
17369: LD_INT 6
17371: EQUAL
17372: OR
17373: PUSH
17374: LD_VAR 0 1
17378: PPUSH
17379: CALL_OW 266
17383: PUSH
17384: LD_INT 29
17386: EQUAL
17387: OR
17388: PUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 266
17398: PUSH
17399: LD_INT 26
17401: EQUAL
17402: OR
17403: PUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 266
17413: PUSH
17414: LD_INT 30
17416: EQUAL
17417: OR
17418: PUSH
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 266
17428: PUSH
17429: LD_INT 28
17431: EQUAL
17432: OR
17433: PUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 266
17443: PUSH
17444: LD_INT 27
17446: EQUAL
17447: OR
17448: PUSH
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 266
17458: PUSH
17459: LD_INT 33
17461: EQUAL
17462: OR
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 266
17473: PUSH
17474: LD_INT 2
17476: EQUAL
17477: OR
17478: PUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 266
17488: PUSH
17489: LD_INT 4
17491: EQUAL
17492: OR
17493: IFFALSE 17579
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17495: LD_ADDR_EXP 93
17499: PUSH
17500: LD_EXP 93
17504: PUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 266
17514: ADD
17515: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17516: LD_ADDR_EXP 93
17520: PUSH
17521: LD_EXP 93
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: CALL_OW 250
17535: ADD
17536: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17537: LD_ADDR_EXP 93
17541: PUSH
17542: LD_EXP 93
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 251
17556: ADD
17557: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17558: LD_ADDR_EXP 93
17562: PUSH
17563: LD_EXP 93
17567: PUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 254
17577: ADD
17578: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 266
17588: PUSH
17589: LD_INT 1
17591: EQUAL
17592: IFFALSE 17671
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17594: LD_ADDR_EXP 93
17598: PUSH
17599: LD_EXP 93
17603: PUSH
17604: LD_INT 0
17606: ADD
17607: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17608: LD_ADDR_EXP 93
17612: PUSH
17613: LD_EXP 93
17617: PUSH
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 250
17627: ADD
17628: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17629: LD_ADDR_EXP 93
17633: PUSH
17634: LD_EXP 93
17638: PUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 251
17648: ADD
17649: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17650: LD_ADDR_EXP 93
17654: PUSH
17655: LD_EXP 93
17659: PUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 254
17669: ADD
17670: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 266
17680: PUSH
17681: LD_INT 3
17683: EQUAL
17684: IFFALSE 17763
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17686: LD_ADDR_EXP 93
17690: PUSH
17691: LD_EXP 93
17695: PUSH
17696: LD_INT 2
17698: ADD
17699: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17700: LD_ADDR_EXP 93
17704: PUSH
17705: LD_EXP 93
17709: PUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 250
17719: ADD
17720: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17721: LD_ADDR_EXP 93
17725: PUSH
17726: LD_EXP 93
17730: PUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 251
17740: ADD
17741: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17742: LD_ADDR_EXP 93
17746: PUSH
17747: LD_EXP 93
17751: PUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 254
17761: ADD
17762: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 266
17772: PUSH
17773: LD_INT 5
17775: EQUAL
17776: IFFALSE 17855
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17778: LD_ADDR_EXP 93
17782: PUSH
17783: LD_EXP 93
17787: PUSH
17788: LD_INT 4
17790: ADD
17791: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17792: LD_ADDR_EXP 93
17796: PUSH
17797: LD_EXP 93
17801: PUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 250
17811: ADD
17812: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17813: LD_ADDR_EXP 93
17817: PUSH
17818: LD_EXP 93
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 251
17832: ADD
17833: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17834: LD_ADDR_EXP 93
17838: PUSH
17839: LD_EXP 93
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 254
17853: ADD
17854: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 255
17864: PUSH
17865: LD_INT 7
17867: EQUAL
17868: PUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 247
17878: PUSH
17879: LD_INT 3
17881: EQUAL
17882: AND
17883: IFFALSE 18575
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 266
17894: PUSH
17895: LD_INT 31
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 266
17908: PUSH
17909: LD_INT 32
17911: EQUAL
17912: OR
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 266
17923: PUSH
17924: LD_INT 36
17926: EQUAL
17927: OR
17928: PUSH
17929: LD_VAR 0 1
17933: PPUSH
17934: CALL_OW 266
17938: PUSH
17939: LD_INT 0
17941: EQUAL
17942: OR
17943: PUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 266
17953: PUSH
17954: LD_INT 24
17956: EQUAL
17957: OR
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 266
17968: PUSH
17969: LD_INT 17
17971: EQUAL
17972: OR
17973: PUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 266
17983: PUSH
17984: LD_INT 25
17986: EQUAL
17987: OR
17988: PUSH
17989: LD_VAR 0 1
17993: PPUSH
17994: CALL_OW 266
17998: PUSH
17999: LD_INT 19
18001: EQUAL
18002: OR
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 266
18013: PUSH
18014: LD_INT 20
18016: EQUAL
18017: OR
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 266
18028: PUSH
18029: LD_INT 18
18031: EQUAL
18032: OR
18033: PUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 266
18043: PUSH
18044: LD_INT 21
18046: EQUAL
18047: OR
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 266
18058: PUSH
18059: LD_INT 23
18061: EQUAL
18062: OR
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 266
18073: PUSH
18074: LD_INT 16
18076: EQUAL
18077: OR
18078: PUSH
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 266
18088: PUSH
18089: LD_INT 6
18091: EQUAL
18092: OR
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 266
18103: PUSH
18104: LD_INT 29
18106: EQUAL
18107: OR
18108: PUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 266
18118: PUSH
18119: LD_INT 26
18121: EQUAL
18122: OR
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 266
18133: PUSH
18134: LD_INT 30
18136: EQUAL
18137: OR
18138: PUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 266
18148: PUSH
18149: LD_INT 28
18151: EQUAL
18152: OR
18153: PUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 266
18163: PUSH
18164: LD_INT 27
18166: EQUAL
18167: OR
18168: PUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 266
18178: PUSH
18179: LD_INT 33
18181: EQUAL
18182: OR
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 2
18196: EQUAL
18197: OR
18198: PUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 266
18208: PUSH
18209: LD_INT 4
18211: EQUAL
18212: OR
18213: IFFALSE 18299
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
18215: LD_ADDR_EXP 95
18219: PUSH
18220: LD_EXP 95
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 266
18234: ADD
18235: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18236: LD_ADDR_EXP 95
18240: PUSH
18241: LD_EXP 95
18245: PUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 250
18255: ADD
18256: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18257: LD_ADDR_EXP 95
18261: PUSH
18262: LD_EXP 95
18266: PUSH
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 251
18276: ADD
18277: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18278: LD_ADDR_EXP 95
18282: PUSH
18283: LD_EXP 95
18287: PUSH
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 254
18297: ADD
18298: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 266
18308: PUSH
18309: LD_INT 1
18311: EQUAL
18312: IFFALSE 18391
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
18314: LD_ADDR_EXP 95
18318: PUSH
18319: LD_EXP 95
18323: PUSH
18324: LD_INT 0
18326: ADD
18327: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18328: LD_ADDR_EXP 95
18332: PUSH
18333: LD_EXP 95
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 250
18347: ADD
18348: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18349: LD_ADDR_EXP 95
18353: PUSH
18354: LD_EXP 95
18358: PUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 251
18368: ADD
18369: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18370: LD_ADDR_EXP 95
18374: PUSH
18375: LD_EXP 95
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 254
18389: ADD
18390: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 266
18400: PUSH
18401: LD_INT 3
18403: EQUAL
18404: IFFALSE 18483
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18406: LD_ADDR_EXP 95
18410: PUSH
18411: LD_EXP 95
18415: PUSH
18416: LD_INT 2
18418: ADD
18419: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18420: LD_ADDR_EXP 95
18424: PUSH
18425: LD_EXP 95
18429: PUSH
18430: LD_VAR 0 1
18434: PPUSH
18435: CALL_OW 250
18439: ADD
18440: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18441: LD_ADDR_EXP 95
18445: PUSH
18446: LD_EXP 95
18450: PUSH
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL_OW 251
18460: ADD
18461: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18462: LD_ADDR_EXP 95
18466: PUSH
18467: LD_EXP 95
18471: PUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 254
18481: ADD
18482: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 266
18492: PUSH
18493: LD_INT 5
18495: EQUAL
18496: IFFALSE 18575
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18498: LD_ADDR_EXP 95
18502: PUSH
18503: LD_EXP 95
18507: PUSH
18508: LD_INT 4
18510: ADD
18511: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18512: LD_ADDR_EXP 95
18516: PUSH
18517: LD_EXP 95
18521: PUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 250
18531: ADD
18532: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18533: LD_ADDR_EXP 95
18537: PUSH
18538: LD_EXP 95
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: CALL_OW 251
18552: ADD
18553: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18554: LD_ADDR_EXP 95
18558: PUSH
18559: LD_EXP 95
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 254
18573: ADD
18574: ST_TO_ADDR
// end ; end ; end ;
18575: PPOPN 2
18577: END
// on UnitKamikazed ( unit ) do var i ;
18578: LD_INT 0
18580: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 255
18590: PUSH
18591: LD_INT 8
18593: EQUAL
18594: PUSH
18595: LD_VAR 0 1
18599: PPUSH
18600: CALL_OW 247
18604: PUSH
18605: LD_INT 2
18607: EQUAL
18608: AND
18609: PUSH
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL_OW 248
18619: PUSH
18620: LD_INT 2
18622: EQUAL
18623: AND
18624: IFFALSE 18674
// begin for i in legionVehicles do
18626: LD_ADDR_VAR 0 2
18630: PUSH
18631: LD_EXP 55
18635: PUSH
18636: FOR_IN
18637: IFFALSE 18672
// if i = unit then
18639: LD_VAR 0 2
18643: PUSH
18644: LD_VAR 0 1
18648: EQUAL
18649: IFFALSE 18670
// legionVehicles = legionVehicles diff [ unit ] ;
18651: LD_ADDR_EXP 55
18655: PUSH
18656: LD_EXP 55
18660: PUSH
18661: LD_VAR 0 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: DIFF
18669: ST_TO_ADDR
18670: GO 18636
18672: POP
18673: POP
// end ; end ;
18674: PPOPN 2
18676: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18677: LD_VAR 0 2
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_INT 29
18689: PPUSH
18690: CALL_OW 309
18694: IFFALSE 18754
// begin if GetSide ( unit ) = 1 then
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 255
18705: PUSH
18706: LD_INT 1
18708: EQUAL
18709: IFFALSE 18725
// begin wait ( 0 0$6 ) ;
18711: LD_INT 210
18713: PPUSH
18714: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18718: LD_STRING Motherlode2
18720: PPUSH
18721: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18725: LD_VAR 0 1
18729: PPUSH
18730: CALL_OW 255
18734: PUSH
18735: LD_INT 8
18737: EQUAL
18738: IFFALSE 18754
// begin wait ( 0 0$6 ) ;
18740: LD_INT 210
18742: PPUSH
18743: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18747: LD_STRING Motherlode1
18749: PPUSH
18750: CALL_OW 104
// end ; end ; end ;
18754: PPOPN 3
18756: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 255
18766: PUSH
18767: LD_INT 2
18769: EQUAL
18770: IFFALSE 18779
// YouLost ( Motherlode3 ) ;
18772: LD_STRING Motherlode3
18774: PPUSH
18775: CALL_OW 104
// end ;
18779: PPOPN 3
18781: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do begin if old_identifier in allianceVehicles then
18782: LD_VAR 0 2
18786: PUSH
18787: LD_EXP 62
18791: IN
18792: IFFALSE 18810
// allianceVehicles := allianceVehicles diff old_identifier ;
18794: LD_ADDR_EXP 62
18798: PUSH
18799: LD_EXP 62
18803: PUSH
18804: LD_VAR 0 2
18808: DIFF
18809: ST_TO_ADDR
// if old_identifier in legionVehicles then
18810: LD_VAR 0 2
18814: PUSH
18815: LD_EXP 55
18819: IN
18820: IFFALSE 18838
// legionVehicles := legionVehicles diff old_identifier ;
18822: LD_ADDR_EXP 55
18826: PUSH
18827: LD_EXP 55
18831: PUSH
18832: LD_VAR 0 2
18836: DIFF
18837: ST_TO_ADDR
// if old_identifier in russianVehicles then
18838: LD_VAR 0 2
18842: PUSH
18843: LD_EXP 61
18847: IN
18848: IFFALSE 18866
// russianVehicles := russianVehicles diff old_identifier ;
18850: LD_ADDR_EXP 61
18854: PUSH
18855: LD_EXP 61
18859: PUSH
18860: LD_VAR 0 2
18864: DIFF
18865: ST_TO_ADDR
// end ; end_of_file
18866: PPOPN 4
18868: END
// every 3 3$0 do
18869: GO 18871
18871: DISABLE
// begin enable ;
18872: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18873: LD_ADDR_EXP 87
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: PPUSH
18891: LD_INT 2
18893: PPUSH
18894: CALL_OW 12
18898: ARRAY
18899: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18900: LD_INT 22
18902: PUSH
18903: LD_INT 8
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 21
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PPUSH
18924: CALL_OW 69
18928: PUSH
18929: LD_INT 1
18931: GREATER
18932: IFFALSE 18963
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18934: LD_ADDR_EXP 89
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: LD_INT 8
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: PPUSH
18952: LD_INT 2
18954: PPUSH
18955: CALL_OW 12
18959: ARRAY
18960: ST_TO_ADDR
18961: GO 18971
// RussianTarget = 1 ;
18963: LD_ADDR_EXP 89
18967: PUSH
18968: LD_INT 1
18970: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18971: LD_INT 22
18973: PUSH
18974: LD_INT 8
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 21
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL_OW 69
18999: PUSH
19000: LD_INT 1
19002: GREATER
19003: IFFALSE 19038
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
19005: LD_ADDR_EXP 88
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: LD_INT 3
19015: PUSH
19016: LD_INT 8
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: PPUSH
19027: LD_INT 3
19029: PPUSH
19030: CALL_OW 12
19034: ARRAY
19035: ST_TO_ADDR
19036: GO 19065
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19038: LD_ADDR_EXP 88
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PPUSH
19056: LD_INT 2
19058: PPUSH
19059: CALL_OW 12
19063: ARRAY
19064: ST_TO_ADDR
// end ;
19065: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople , engs ;
19066: LD_EXP 68
19070: PUSH
19071: LD_INT 1
19073: EQUAL
19074: IFFALSE 19483
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
// begin for i = 1 to 4 do
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: DOUBLE
19090: LD_INT 1
19092: DEC
19093: ST_TO_ADDR
19094: LD_INT 4
19096: PUSH
19097: FOR_TO
19098: IFFALSE 19138
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
19100: LD_EXP 66
19104: PUSH
19105: LD_VAR 0 1
19109: ARRAY
19110: PPUSH
19111: LD_INT 85
19113: PPUSH
19114: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
19118: LD_EXP 66
19122: PUSH
19123: LD_VAR 0 1
19127: ARRAY
19128: PPUSH
19129: LD_INT 3
19131: PPUSH
19132: CALL_OW 183
// end ;
19136: GO 19097
19138: POP
19139: POP
// engs := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_INT 4
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 25
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 69
19173: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19174: LD_INT 35
19176: PPUSH
19177: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff Powell union amUnitsAttack ;
19181: LD_ADDR_VAR 0 2
19185: PUSH
19186: LD_INT 22
19188: PUSH
19189: LD_INT 4
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 56
19208: PUSH
19209: EMPTY
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: PPUSH
19217: CALL_OW 69
19221: PUSH
19222: LD_EXP 17
19226: DIFF
19227: PUSH
19228: LD_EXP 66
19232: UNION
19233: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
19234: LD_VAR 0 2
19238: PUSH
19239: LD_INT 1
19241: ARRAY
19242: PPUSH
19243: LD_INT 235
19245: PPUSH
19246: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
19250: LD_VAR 0 2
19254: PUSH
19255: LD_INT 2
19257: ARRAY
19258: PPUSH
19259: LD_INT 2
19261: PPUSH
19262: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
19266: LD_VAR 0 2
19270: PUSH
19271: LD_INT 3
19273: ARRAY
19274: PPUSH
19275: LD_INT 2
19277: PPUSH
19278: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
19282: LD_INT 30
19284: PPUSH
19285: LD_INT 49
19287: PPUSH
19288: LD_INT 4
19290: PPUSH
19291: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
19295: LD_INT 91
19297: PPUSH
19298: LD_INT 10
19300: PPUSH
19301: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
19305: LD_INT 91
19307: PPUSH
19308: LD_INT 11
19310: PPUSH
19311: CALL_OW 207
// ComBuild ( engs , b_siberite_mine , 30 , 49 , 1 ) ;
19315: LD_VAR 0 3
19319: PPUSH
19320: LD_INT 30
19322: PPUSH
19323: LD_INT 30
19325: PPUSH
19326: LD_INT 49
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 145
// AddComBuild ( engs , b_bunker , 55 , 56 , 4 ) ;
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 32
19343: PPUSH
19344: LD_INT 55
19346: PPUSH
19347: LD_INT 56
19349: PPUSH
19350: LD_INT 4
19352: PPUSH
19353: CALL_OW 205
// AddComBuild ( engs , b_bunker , 63 , 71 , 4 ) ;
19357: LD_VAR 0 3
19361: PPUSH
19362: LD_INT 32
19364: PPUSH
19365: LD_INT 63
19367: PPUSH
19368: LD_INT 71
19370: PPUSH
19371: LD_INT 4
19373: PPUSH
19374: CALL_OW 205
// AddComBuild ( engs , b_siberite_power , 40 , 72 , 4 ) ;
19378: LD_VAR 0 3
19382: PPUSH
19383: LD_INT 28
19385: PPUSH
19386: LD_INT 40
19388: PPUSH
19389: LD_INT 72
19391: PPUSH
19392: LD_INT 4
19394: PPUSH
19395: CALL_OW 205
// AddComBuild ( engs , b_solar_power , 45 , 73 , 4 ) ;
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_INT 27
19406: PPUSH
19407: LD_INT 45
19409: PPUSH
19410: LD_INT 73
19412: PPUSH
19413: LD_INT 4
19415: PPUSH
19416: CALL_OW 205
// AddComBuild ( engs , b_ext_rocket , 37 , 50 , 2 ) ;
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_INT 18
19427: PPUSH
19428: LD_INT 37
19430: PPUSH
19431: LD_INT 50
19433: PPUSH
19434: LD_INT 2
19436: PPUSH
19437: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 41 , 51 , 3 ) ;
19441: LD_VAR 0 3
19445: PPUSH
19446: LD_INT 17
19448: PPUSH
19449: LD_INT 41
19451: PPUSH
19452: LD_INT 51
19454: PPUSH
19455: LD_INT 3
19457: PPUSH
19458: CALL_OW 205
// AddComBuild ( engs , b_ext_siberium , 38 , 54 , 1 ) ;
19462: LD_VAR 0 3
19466: PPUSH
19467: LD_INT 21
19469: PPUSH
19470: LD_INT 38
19472: PPUSH
19473: LD_INT 54
19475: PPUSH
19476: LD_INT 1
19478: PPUSH
19479: CALL_OW 205
// end ;
19483: PPOPN 3
19485: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19486: LD_INT 235
19488: PPUSH
19489: LD_INT 10
19491: PPUSH
19492: CALL_OW 308
19496: PUSH
19497: LD_EXP 70
19501: PUSH
19502: LD_INT 1
19504: EQUAL
19505: AND
19506: IFFALSE 19530
19508: GO 19510
19510: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19511: LD_INT 235
19513: PPUSH
19514: CALL_OW 313
19518: PPUSH
19519: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19523: LD_INT 84
19525: PPUSH
19526: CALL_OW 146
// end ;
19530: END
// every 0 0$1 trigger legionAI = 1 do
19531: LD_EXP 84
19535: PUSH
19536: LD_INT 1
19538: EQUAL
19539: IFFALSE 19602
19541: GO 19543
19543: DISABLE
// begin enable ;
19544: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19545: LD_INT 8
19547: PPUSH
19548: LD_INT 99
19550: PPUSH
19551: LD_INT 11
19553: PPUSH
19554: LD_EXP 93
19558: PPUSH
19559: CALL 9643 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19563: LD_INT 8
19565: PPUSH
19566: LD_INT 20
19568: PPUSH
19569: LD_INT 11
19571: PPUSH
19572: LD_INT 252
19574: PUSH
19575: EMPTY
19576: LIST
19577: PPUSH
19578: CALL 10052 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19582: LD_INT 8
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL 11461 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19592: LD_INT 8
19594: PPUSH
19595: LD_INT 11
19597: PPUSH
19598: CALL 11033 0 2
// end ;
19602: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19603: LD_EXP 84
19607: PUSH
19608: LD_INT 1
19610: EQUAL
19611: PUSH
19612: LD_EXP 101
19616: PUSH
19617: LD_INT 1
19619: GREATEREQUAL
19620: AND
19621: PUSH
19622: LD_EXP 55
19626: PUSH
19627: EMPTY
19628: EQUAL
19629: AND
19630: PUSH
19631: LD_INT 117
19633: PPUSH
19634: CALL_OW 302
19638: AND
19639: PUSH
19640: LD_INT 117
19642: PPUSH
19643: CALL_OW 255
19647: PUSH
19648: LD_INT 8
19650: EQUAL
19651: AND
19652: IFFALSE 19715
19654: GO 19656
19656: DISABLE
// begin enable ;
19657: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19658: LD_INT 8
19660: PPUSH
19661: LD_INT 117
19663: PPUSH
19664: LD_INT 5
19666: PUSH
19667: LD_INT 6
19669: PUSH
19670: LD_INT 7
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: LD_OWVAR 67
19682: ARRAY
19683: PPUSH
19684: LD_INT 27
19686: PUSH
19687: LD_INT 28
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 29
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: PPUSH
19702: LD_INT 3
19704: PPUSH
19705: LD_INT 2
19707: PPUSH
19708: LD_INT 14
19710: PPUSH
19711: CALL 11691 0 7
// end ;
19715: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19716: LD_EXP 84
19720: PUSH
19721: LD_INT 1
19723: EQUAL
19724: PUSH
19725: LD_EXP 101
19729: PUSH
19730: LD_INT 1
19732: GREATEREQUAL
19733: AND
19734: PUSH
19735: LD_EXP 55
19739: PUSH
19740: LD_INT 5
19742: PUSH
19743: LD_INT 6
19745: PUSH
19746: LD_INT 7
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: LD_OWVAR 67
19758: ARRAY
19759: EQUAL
19760: AND
19761: IFFALSE 19779
19763: GO 19765
19765: DISABLE
// begin enable ;
19766: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19767: LD_EXP 87
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL 11765 0 2
// end ;
19779: END
// every 0 0$1 do
19780: GO 19782
19782: DISABLE
// begin enable ;
19783: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19784: LD_INT 6
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: CALL 12700 0 2
// end ;
19794: END
// every 0 0$1 trigger RussianAI = 1 do
19795: LD_EXP 86
19799: PUSH
19800: LD_INT 1
19802: EQUAL
19803: IFFALSE 19897
19805: GO 19807
19807: DISABLE
// begin enable ;
19808: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19809: LD_INT 3
19811: PPUSH
19812: LD_INT 26
19814: PPUSH
19815: LD_INT 21
19817: PPUSH
19818: LD_EXP 94
19822: PPUSH
19823: CALL 9643 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19827: LD_INT 3
19829: PPUSH
19830: LD_INT 22
19832: PPUSH
19833: LD_INT 21
19835: PPUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL 10052 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19850: LD_INT 3
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL 11461 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19860: LD_INT 3
19862: PPUSH
19863: LD_EXP 89
19867: PPUSH
19868: CALL 12700 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19872: LD_INT 3
19874: PPUSH
19875: LD_INT 21
19877: PPUSH
19878: CALL 11033 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
19882: LD_INT 3
19884: PPUSH
19885: LD_INT 21
19887: PPUSH
19888: LD_EXP 94
19892: PPUSH
19893: CALL 10778 0 3
// end ;
19897: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19898: LD_EXP 86
19902: PUSH
19903: LD_INT 1
19905: EQUAL
19906: PUSH
19907: LD_EXP 101
19911: PUSH
19912: LD_INT 3
19914: GREATEREQUAL
19915: AND
19916: PUSH
19917: LD_EXP 61
19921: PUSH
19922: EMPTY
19923: EQUAL
19924: AND
19925: PUSH
19926: LD_INT 10
19928: PPUSH
19929: CALL_OW 302
19933: AND
19934: PUSH
19935: LD_INT 10
19937: PPUSH
19938: CALL_OW 255
19942: PUSH
19943: LD_INT 3
19945: EQUAL
19946: AND
19947: PUSH
19948: LD_INT 4
19950: PPUSH
19951: CALL_OW 302
19955: AND
19956: PUSH
19957: LD_INT 4
19959: PPUSH
19960: CALL_OW 255
19964: PUSH
19965: LD_INT 3
19967: EQUAL
19968: AND
19969: IFFALSE 20089
19971: GO 19973
19973: DISABLE
// begin enable ;
19974: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19975: LD_INT 3
19977: PPUSH
19978: LD_INT 4
19980: PPUSH
19981: LD_INT 4
19983: PUSH
19984: LD_INT 5
19986: PUSH
19987: LD_INT 6
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: LIST
19994: PUSH
19995: LD_OWVAR 67
19999: ARRAY
20000: PPUSH
20001: LD_INT 45
20003: PUSH
20004: LD_INT 46
20006: PUSH
20007: LD_INT 47
20009: PUSH
20010: LD_INT 49
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: PPUSH
20019: LD_INT 3
20021: PPUSH
20022: LD_INT 3
20024: PPUSH
20025: LD_INT 24
20027: PPUSH
20028: CALL 11691 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20032: LD_INT 3
20034: PPUSH
20035: LD_INT 10
20037: PPUSH
20038: LD_INT 4
20040: PUSH
20041: LD_INT 5
20043: PUSH
20044: LD_INT 6
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: LD_OWVAR 67
20056: ARRAY
20057: PPUSH
20058: LD_INT 45
20060: PUSH
20061: LD_INT 46
20063: PUSH
20064: LD_INT 47
20066: PUSH
20067: LD_INT 49
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: PPUSH
20076: LD_INT 3
20078: PPUSH
20079: LD_INT 3
20081: PPUSH
20082: LD_INT 24
20084: PPUSH
20085: CALL 11691 0 7
// end ;
20089: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
20090: LD_EXP 86
20094: PUSH
20095: LD_INT 1
20097: EQUAL
20098: PUSH
20099: LD_EXP 101
20103: PUSH
20104: LD_INT 3
20106: GREATEREQUAL
20107: AND
20108: PUSH
20109: LD_EXP 61
20113: PUSH
20114: LD_INT 8
20116: PUSH
20117: LD_INT 10
20119: PUSH
20120: LD_INT 12
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: PUSH
20128: LD_OWVAR 67
20132: ARRAY
20133: EQUAL
20134: AND
20135: IFFALSE 20247
20137: GO 20139
20139: DISABLE
// begin enable ;
20140: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
20141: LD_INT 22
20143: PUSH
20144: LD_INT 3
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 21
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 34
20166: PUSH
20167: LD_INT 48
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 3
20180: PUSH
20181: LD_INT 60
20183: PUSH
20184: EMPTY
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: PPUSH
20202: LD_INT 24
20204: PUSH
20205: LD_INT 25
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: PPUSH
20215: LD_INT 2
20217: PPUSH
20218: CALL_OW 12
20222: ARRAY
20223: PPUSH
20224: CALL_OW 120
// wait ( 0 0$20 ) ;
20228: LD_INT 700
20230: PPUSH
20231: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
20235: LD_EXP 89
20239: PPUSH
20240: LD_INT 2
20242: PPUSH
20243: CALL 11765 0 2
// end ;
20247: END
// every 0 0$1 trigger AllianceAI = 1 do
20248: LD_EXP 85
20252: PUSH
20253: LD_INT 1
20255: EQUAL
20256: IFFALSE 20339
20258: GO 20260
20260: DISABLE
// begin enable ;
20261: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
20262: LD_INT 7
20264: PPUSH
20265: LD_INT 45
20267: PPUSH
20268: LD_INT 23
20270: PPUSH
20271: LD_EXP 95
20275: PPUSH
20276: CALL 9643 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20280: LD_INT 7
20282: PPUSH
20283: LD_INT 24
20285: PPUSH
20286: LD_INT 23
20288: PPUSH
20289: LD_INT 46
20291: PUSH
20292: LD_INT 39
20294: PUSH
20295: LD_INT 133
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL 10052 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20307: LD_INT 7
20309: PPUSH
20310: LD_INT 1
20312: PPUSH
20313: CALL 11461 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20317: LD_INT 7
20319: PPUSH
20320: LD_EXP 88
20324: PPUSH
20325: CALL 12700 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20329: LD_INT 7
20331: PPUSH
20332: LD_INT 23
20334: PPUSH
20335: CALL 11033 0 2
// end ;
20339: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20340: LD_EXP 85
20344: PUSH
20345: LD_INT 1
20347: EQUAL
20348: PUSH
20349: LD_EXP 101
20353: PUSH
20354: LD_INT 4
20356: GREATEREQUAL
20357: AND
20358: PUSH
20359: LD_EXP 62
20363: PUSH
20364: EMPTY
20365: EQUAL
20366: AND
20367: PUSH
20368: LD_INT 156
20370: PPUSH
20371: CALL_OW 302
20375: AND
20376: PUSH
20377: LD_INT 156
20379: PPUSH
20380: CALL_OW 255
20384: PUSH
20385: LD_INT 7
20387: EQUAL
20388: AND
20389: PUSH
20390: LD_INT 162
20392: PPUSH
20393: CALL_OW 302
20397: AND
20398: PUSH
20399: LD_INT 162
20401: PPUSH
20402: CALL_OW 255
20406: PUSH
20407: LD_INT 7
20409: EQUAL
20410: AND
20411: IFFALSE 20527
20413: GO 20415
20415: DISABLE
// begin enable ;
20416: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20417: LD_INT 3
20419: PPUSH
20420: LD_INT 156
20422: PPUSH
20423: LD_INT 3
20425: PUSH
20426: LD_INT 3
20428: PUSH
20429: LD_INT 4
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: LD_OWVAR 67
20441: ARRAY
20442: PPUSH
20443: LD_INT 9
20445: PUSH
20446: LD_INT 10
20448: PUSH
20449: LD_INT 7
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PPUSH
20457: LD_INT 3
20459: PPUSH
20460: LD_INT 2
20462: PPUSH
20463: LD_INT 5
20465: PPUSH
20466: CALL 11691 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20470: LD_INT 3
20472: PPUSH
20473: LD_INT 162
20475: PPUSH
20476: LD_INT 2
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: LD_INT 3
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: LD_OWVAR 67
20494: ARRAY
20495: PPUSH
20496: LD_INT 45
20498: PUSH
20499: LD_INT 46
20501: PUSH
20502: LD_INT 47
20504: PUSH
20505: LD_INT 49
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: PPUSH
20514: LD_INT 3
20516: PPUSH
20517: LD_INT 3
20519: PPUSH
20520: LD_INT 24
20522: PPUSH
20523: CALL 11691 0 7
// end ;
20527: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20528: LD_EXP 85
20532: PUSH
20533: LD_INT 1
20535: EQUAL
20536: PUSH
20537: LD_EXP 101
20541: PUSH
20542: LD_INT 4
20544: GREATEREQUAL
20545: AND
20546: PUSH
20547: LD_EXP 62
20551: PUSH
20552: LD_INT 5
20554: PUSH
20555: LD_INT 5
20557: PUSH
20558: LD_INT 7
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_OWVAR 67
20570: ARRAY
20571: EQUAL
20572: AND
20573: IFFALSE 20632
20575: GO 20577
20577: DISABLE
20578: LD_INT 0
20580: PPUSH
// begin for i in AllianceVehicles do
20581: LD_ADDR_VAR 0 1
20585: PUSH
20586: LD_EXP 62
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20617
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_INT 117
20601: PPUSH
20602: LD_INT 112
20604: PPUSH
20605: LD_INT 10
20607: PPUSH
20608: LD_INT 1
20610: PPUSH
20611: CALL_OW 483
20615: GO 20591
20617: POP
20618: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20619: LD_EXP 88
20623: PPUSH
20624: LD_INT 3
20626: PPUSH
20627: CALL 11765 0 2
// enable ;
20631: ENABLE
// end ;
20632: PPOPN 1
20634: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20635: LD_EXP 85
20639: PUSH
20640: LD_INT 1
20642: EQUAL
20643: PUSH
20644: LD_EXP 101
20648: PUSH
20649: LD_INT 4
20651: GREATEREQUAL
20652: AND
20653: IFFALSE 20834
20655: GO 20657
20657: DISABLE
20658: LD_INT 0
20660: PPUSH
// begin enable ;
20661: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20662: LD_ADDR_VAR 0 1
20666: PUSH
20667: LD_INT 22
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 21
20679: PUSH
20680: LD_INT 3
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 30
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 30
20702: PUSH
20703: LD_INT 28
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 30
20712: PUSH
20713: LD_INT 21
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: PPUSH
20731: CALL_OW 69
20735: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: LD_VAR 0 1
20745: PUSH
20746: LD_INT 22
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 21
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 32
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: ADD
20786: ST_TO_ADDR
// if tmp = [ ] then
20787: LD_VAR 0 1
20791: PUSH
20792: EMPTY
20793: EQUAL
20794: IFFALSE 20798
// exit ;
20796: GO 20834
// if tmp > 0 then
20798: LD_VAR 0 1
20802: PUSH
20803: LD_INT 0
20805: GREATER
20806: IFFALSE 20834
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20808: LD_VAR 0 1
20812: PUSH
20813: LD_INT 1
20815: PPUSH
20816: LD_VAR 0 1
20820: PPUSH
20821: CALL_OW 12
20825: ARRAY
20826: PPUSH
20827: LD_INT 0
20829: PPUSH
20830: CALL_OW 234
// end ;
20834: PPOPN 1
20836: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20837: LD_EXP 84
20841: PUSH
20842: LD_INT 1
20844: EQUAL
20845: PUSH
20846: LD_INT 22
20848: PUSH
20849: LD_INT 8
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 21
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: LD_INT 61
20871: PUSH
20872: EMPTY
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: PPUSH
20884: CALL_OW 69
20888: PUSH
20889: LD_INT 0
20891: GREATER
20892: AND
20893: IFFALSE 20977
20895: GO 20897
20897: DISABLE
20898: LD_INT 0
20900: PPUSH
// begin enable ;
20901: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
20902: LD_ADDR_VAR 0 1
20906: PUSH
20907: LD_INT 22
20909: PUSH
20910: LD_INT 8
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 21
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 33
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 61
20942: PUSH
20943: EMPTY
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: PPUSH
20956: CALL_OW 69
20960: PUSH
20961: FOR_IN
20962: IFFALSE 20975
// Connect ( i ) ;
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL 13015 0 1
20973: GO 20961
20975: POP
20976: POP
// end ;
20977: PPOPN 1
20979: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20980: LD_EXP 85
20984: PUSH
20985: LD_INT 1
20987: EQUAL
20988: PUSH
20989: LD_INT 22
20991: PUSH
20992: LD_INT 7
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 3
21011: PUSH
21012: LD_INT 61
21014: PUSH
21015: EMPTY
21016: LIST
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: PPUSH
21027: CALL_OW 69
21031: PUSH
21032: LD_INT 0
21034: GREATER
21035: AND
21036: IFFALSE 21120
21038: GO 21040
21040: DISABLE
21041: LD_INT 0
21043: PPUSH
// begin enable ;
21044: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: LD_INT 22
21052: PUSH
21053: LD_INT 7
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 21
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 33
21072: PUSH
21073: LD_INT 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: LD_INT 61
21085: PUSH
21086: EMPTY
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: PUSH
21104: FOR_IN
21105: IFFALSE 21118
// Connect ( i ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL 13015 0 1
21116: GO 21104
21118: POP
21119: POP
// end ; end_of_file
21120: PPOPN 1
21122: END
// every 0 0$1 trigger timerStatus = 1 do
21123: LD_EXP 96
21127: PUSH
21128: LD_INT 1
21130: EQUAL
21131: IFFALSE 21168
21133: GO 21135
21135: DISABLE
// begin enable ;
21136: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
21137: LD_ADDR_OWVAR 47
21141: PUSH
21142: LD_STRING #Am15-1
21144: PUSH
21145: LD_EXP 97
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
21154: LD_ADDR_EXP 97
21158: PUSH
21159: LD_EXP 97
21163: PUSH
21164: LD_INT 35
21166: PLUS
21167: ST_TO_ADDR
// end ; end_of_file
21168: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
21169: LD_EXP 72
21173: PUSH
21174: LD_INT 1
21176: EQUAL
21177: PUSH
21178: LD_EXP 101
21182: PUSH
21183: LD_INT 0
21185: EQUAL
21186: AND
21187: PUSH
21188: LD_EXP 90
21192: PUSH
21193: LD_INT 0
21195: EQUAL
21196: AND
21197: IFFALSE 21257
21199: GO 21201
21201: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
21202: LD_INT 2
21204: PPUSH
21205: LD_INT 6
21207: PPUSH
21208: LD_INT 2
21210: PPUSH
21211: LD_INT 4
21213: PPUSH
21214: CALL_OW 12
21218: PPUSH
21219: LD_INT 10
21221: PPUSH
21222: LD_INT 3
21224: PPUSH
21225: LD_INT 3
21227: PPUSH
21228: LD_INT 3
21230: PPUSH
21231: LD_INT 42
21233: PUSH
21234: LD_INT 43
21236: PUSH
21237: LD_INT 44
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: EMPTY
21246: PPUSH
21247: EMPTY
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL 7845 0 11
// enable ;
21256: ENABLE
// end ;
21257: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
21258: LD_EXP 72
21262: PUSH
21263: LD_INT 1
21265: EQUAL
21266: PUSH
21267: LD_EXP 101
21271: PUSH
21272: LD_INT 1
21274: EQUAL
21275: AND
21276: PUSH
21277: LD_EXP 90
21281: PUSH
21282: LD_INT 0
21284: EQUAL
21285: AND
21286: IFFALSE 21346
21288: GO 21290
21290: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21291: LD_INT 2
21293: PPUSH
21294: LD_INT 6
21296: PPUSH
21297: LD_INT 4
21299: PPUSH
21300: LD_INT 6
21302: PPUSH
21303: CALL_OW 12
21307: PPUSH
21308: LD_INT 10
21310: PPUSH
21311: LD_INT 3
21313: PPUSH
21314: LD_INT 3
21316: PPUSH
21317: LD_INT 3
21319: PPUSH
21320: LD_INT 44
21322: PUSH
21323: LD_INT 45
21325: PUSH
21326: LD_INT 46
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PPUSH
21334: EMPTY
21335: PPUSH
21336: EMPTY
21337: PPUSH
21338: LD_INT 1
21340: PPUSH
21341: CALL 7845 0 11
// enable ;
21345: ENABLE
// end ;
21346: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21347: LD_EXP 72
21351: PUSH
21352: LD_INT 1
21354: EQUAL
21355: PUSH
21356: LD_EXP 101
21360: PUSH
21361: LD_INT 3
21363: EQUAL
21364: AND
21365: PUSH
21366: LD_EXP 90
21370: PUSH
21371: LD_INT 0
21373: EQUAL
21374: AND
21375: IFFALSE 21439
21377: GO 21379
21379: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21380: LD_INT 2
21382: PPUSH
21383: LD_INT 6
21385: PPUSH
21386: LD_INT 4
21388: PPUSH
21389: LD_INT 8
21391: PPUSH
21392: CALL_OW 12
21396: PPUSH
21397: LD_INT 10
21399: PPUSH
21400: LD_INT 3
21402: PPUSH
21403: LD_INT 3
21405: PPUSH
21406: LD_INT 3
21408: PPUSH
21409: LD_INT 44
21411: PUSH
21412: LD_INT 45
21414: PUSH
21415: LD_INT 46
21417: PUSH
21418: LD_INT 47
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: EMPTY
21428: PPUSH
21429: EMPTY
21430: PPUSH
21431: LD_INT 1
21433: PPUSH
21434: CALL 7845 0 11
// enable ;
21438: ENABLE
// end ;
21439: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21440: LD_EXP 72
21444: PUSH
21445: LD_INT 1
21447: EQUAL
21448: PUSH
21449: LD_EXP 101
21453: PUSH
21454: LD_INT 4
21456: GREATEREQUAL
21457: AND
21458: PUSH
21459: LD_EXP 90
21463: PUSH
21464: LD_INT 0
21466: EQUAL
21467: AND
21468: IFFALSE 21528
21470: GO 21472
21472: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21473: LD_INT 2
21475: PPUSH
21476: LD_INT 6
21478: PPUSH
21479: LD_INT 4
21481: PPUSH
21482: LD_INT 8
21484: PPUSH
21485: CALL_OW 12
21489: PPUSH
21490: LD_INT 10
21492: PPUSH
21493: LD_INT 3
21495: PPUSH
21496: LD_INT 3
21498: PPUSH
21499: LD_INT 3
21501: PPUSH
21502: LD_INT 46
21504: PUSH
21505: LD_INT 47
21507: PUSH
21508: LD_INT 49
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: EMPTY
21517: PPUSH
21518: EMPTY
21519: PPUSH
21520: LD_INT 1
21522: PPUSH
21523: CALL 7845 0 11
// enable ;
21527: ENABLE
// end ; end_of_file
21528: END
// every 1 do var i , dec1 , options , people ;
21529: GO 21531
21531: DISABLE
21532: LD_INT 0
21534: PPUSH
21535: PPUSH
21536: PPUSH
21537: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21538: LD_INT 24
21540: PPUSH
21541: LD_INT 92
21543: PPUSH
21544: LD_INT 172
21546: PPUSH
21547: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21551: LD_INT 25
21553: PPUSH
21554: LD_INT 103
21556: PPUSH
21557: LD_INT 74
21559: PPUSH
21560: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21564: LD_EXP 48
21568: PPUSH
21569: LD_INT 4
21571: PPUSH
21572: CALL_OW 336
// InGameOn ;
21576: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21580: LD_EXP 24
21584: PUSH
21585: LD_EXP 25
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PPUSH
21594: LD_INT 60
21596: PPUSH
21597: LD_INT 75
21599: PPUSH
21600: CALL_OW 111
// if KappaStatus = 0 then
21604: LD_EXP 81
21608: PUSH
21609: LD_INT 0
21611: EQUAL
21612: IFFALSE 21901
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21614: LD_EXP 24
21618: PPUSH
21619: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21623: LD_EXP 1
21627: PPUSH
21628: LD_STRING D1T-JMM-1
21630: PPUSH
21631: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21635: LD_EXP 24
21639: PPUSH
21640: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21644: LD_EXP 17
21648: PPUSH
21649: LD_STRING D1T-Pow-1
21651: PPUSH
21652: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21656: LD_EXP 24
21660: PPUSH
21661: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21665: LD_EXP 1
21669: PPUSH
21670: LD_STRING D1T-JMM-2
21672: PPUSH
21673: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21677: LD_EXP 24
21681: PPUSH
21682: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21686: LD_EXP 17
21690: PPUSH
21691: LD_STRING D1T-Pow-2
21693: PPUSH
21694: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21698: LD_EXP 24
21702: PPUSH
21703: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21707: LD_EXP 1
21711: PPUSH
21712: LD_STRING D1T-JMM-3
21714: PPUSH
21715: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21719: LD_EXP 24
21723: PPUSH
21724: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21728: LD_EXP 17
21732: PPUSH
21733: LD_STRING D1T-Pow-3
21735: PPUSH
21736: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21740: LD_EXP 24
21744: PPUSH
21745: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21749: LD_EXP 79
21753: PUSH
21754: EMPTY
21755: EQUAL
21756: NOT
21757: IFFALSE 21857
// begin if JMMGirl = 1 then
21759: LD_EXP 80
21763: PUSH
21764: LD_INT 1
21766: EQUAL
21767: IFFALSE 21781
// Say ( Joan , D1T-Joan-3 ) ;
21769: LD_EXP 2
21773: PPUSH
21774: LD_STRING D1T-Joan-3
21776: PPUSH
21777: CALL_OW 88
// if JMMGirl = 2 then
21781: LD_EXP 80
21785: PUSH
21786: LD_INT 2
21788: EQUAL
21789: IFFALSE 21803
// Say ( Lisa , D1T-Lisa-3 ) ;
21791: LD_EXP 4
21795: PPUSH
21796: LD_STRING D1T-Lisa-3
21798: PPUSH
21799: CALL_OW 88
// if JMMGirl = 3 then
21803: LD_EXP 80
21807: PUSH
21808: LD_INT 3
21810: EQUAL
21811: IFFALSE 21825
// Say ( Connie , D1T-Con-3 ) ;
21813: LD_EXP 16
21817: PPUSH
21818: LD_STRING D1T-Con-3
21820: PPUSH
21821: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21825: LD_EXP 24
21829: PPUSH
21830: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21834: LD_EXP 17
21838: PPUSH
21839: LD_STRING D1T-Pow-4
21841: PPUSH
21842: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21846: LD_EXP 24
21850: PPUSH
21851: CALL_OW 87
// end else
21855: GO 21899
// begin Say ( JMM , D1T-JMM-4 ) ;
21857: LD_EXP 1
21861: PPUSH
21862: LD_STRING D1T-JMM-4
21864: PPUSH
21865: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21869: LD_EXP 24
21873: PPUSH
21874: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21878: LD_EXP 17
21882: PPUSH
21883: LD_STRING D1T-Pow-5
21885: PPUSH
21886: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21890: LD_EXP 24
21894: PPUSH
21895: CALL_OW 87
// end ; end else
21899: GO 21985
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21901: LD_EXP 24
21905: PPUSH
21906: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21910: LD_EXP 1
21914: PPUSH
21915: LD_STRING D1T-JMM-1
21917: PPUSH
21918: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21922: LD_EXP 24
21926: PPUSH
21927: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21931: LD_EXP 17
21935: PPUSH
21936: LD_STRING D1T-Pow-1
21938: PPUSH
21939: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21943: LD_EXP 24
21947: PPUSH
21948: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21952: LD_EXP 1
21956: PPUSH
21957: LD_STRING D1T-JMM-2
21959: PPUSH
21960: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21964: LD_EXP 24
21968: PPUSH
21969: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21973: LD_EXP 17
21977: PPUSH
21978: LD_STRING D1T-Pow-2
21980: PPUSH
21981: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21985: LD_INT 35
21987: PPUSH
21988: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21992: LD_EXP 24
21996: PUSH
21997: LD_EXP 25
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PPUSH
22006: LD_INT 60
22008: PPUSH
22009: LD_INT 75
22011: PPUSH
22012: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
22016: LD_EXP 24
22020: PPUSH
22021: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
22025: LD_EXP 24
22029: PPUSH
22030: LD_EXP 17
22034: PPUSH
22035: CALL_OW 296
22039: PUSH
22040: LD_INT 20
22042: LESS
22043: PUSH
22044: LD_EXP 24
22048: PPUSH
22049: CALL_OW 314
22053: NOT
22054: OR
22055: IFFALSE 21985
// ComExitVehicle ( JMM ) ;
22057: LD_EXP 1
22061: PPUSH
22062: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
22066: LD_INT 35
22068: PPUSH
22069: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
22073: LD_EXP 1
22077: PPUSH
22078: LD_EXP 17
22082: PPUSH
22083: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
22087: LD_EXP 1
22091: PPUSH
22092: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
22096: LD_EXP 1
22100: PPUSH
22101: LD_EXP 17
22105: PPUSH
22106: CALL_OW 296
22110: PUSH
22111: LD_INT 6
22113: LESS
22114: IFFALSE 22066
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
22116: LD_EXP 1
22120: PUSH
22121: LD_EXP 17
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
22134: LD_EXP 1
22138: PPUSH
22139: LD_EXP 17
22143: PPUSH
22144: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
22148: LD_EXP 17
22152: PPUSH
22153: LD_EXP 1
22157: PPUSH
22158: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
22162: LD_EXP 1
22166: PPUSH
22167: LD_STRING D1-JMM-1
22169: PPUSH
22170: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
22174: LD_EXP 17
22178: PPUSH
22179: LD_STRING D1-Pow-1
22181: PPUSH
22182: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
22186: LD_INT 1
22188: PPUSH
22189: LD_INT 3
22191: PPUSH
22192: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
22196: LD_INT 1
22198: PPUSH
22199: LD_INT 4
22201: PPUSH
22202: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
22206: LD_INT 1
22208: PPUSH
22209: LD_INT 5
22211: PPUSH
22212: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
22216: LD_INT 171
22218: PPUSH
22219: LD_INT 81
22221: PPUSH
22222: CALL_OW 84
// wait ( 0 0$4 ) ;
22226: LD_INT 140
22228: PPUSH
22229: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
22233: LD_INT 162
22235: PPUSH
22236: LD_INT 36
22238: PPUSH
22239: CALL_OW 84
// wait ( 0 0$4 ) ;
22243: LD_INT 140
22245: PPUSH
22246: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
22250: LD_INT 75
22252: PPUSH
22253: LD_INT 16
22255: PPUSH
22256: CALL_OW 84
// wait ( 0 0$4 ) ;
22260: LD_INT 140
22262: PPUSH
22263: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
22267: LD_EXP 17
22271: PUSH
22272: LD_EXP 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
22285: LD_EXP 1
22289: PPUSH
22290: LD_STRING D1-JMM-2
22292: PPUSH
22293: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22297: LD_EXP 17
22301: PPUSH
22302: LD_STRING D1-Pow-2
22304: PPUSH
22305: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22309: LD_EXP 1
22313: PPUSH
22314: LD_STRING D1-JMM-3
22316: PPUSH
22317: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22321: LD_EXP 17
22325: PPUSH
22326: LD_STRING D1-Pow-3
22328: PPUSH
22329: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22333: LD_EXP 1
22337: PPUSH
22338: LD_STRING D1-JMM-4
22340: PPUSH
22341: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22345: LD_EXP 17
22349: PPUSH
22350: LD_STRING D1-Pow-4
22352: PPUSH
22353: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22357: LD_EXP 1
22361: PPUSH
22362: LD_STRING D1-JMM-5
22364: PPUSH
22365: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
22369: LD_EXP 17
22373: PPUSH
22374: LD_STRING D1-Pow-5
22376: PPUSH
22377: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: LD_INT 4
22397: PUSH
22398: LD_INT 5
22400: PUSH
22401: LD_INT 6
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22412: LD_ADDR_VAR 0 2
22416: PUSH
22417: LD_STRING Q1
22419: PPUSH
22420: LD_VAR 0 3
22424: PPUSH
22425: CALL_OW 98
22429: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22430: LD_ADDR_VAR 0 2
22434: PUSH
22435: LD_STRING Q1
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 98
22447: ST_TO_ADDR
// options = options diff dec1 ;
22448: LD_ADDR_VAR 0 3
22452: PUSH
22453: LD_VAR 0 3
22457: PUSH
22458: LD_VAR 0 2
22462: DIFF
22463: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22464: LD_VAR 0 2
22468: PPUSH
22469: LD_VAR 0 3
22473: PPUSH
22474: CALL 24001 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 5
22485: PUSH
22486: LD_INT 6
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: IN
22493: PUSH
22494: LD_VAR 0 3
22498: PUSH
22499: LD_INT 2
22501: EQUAL
22502: OR
22503: IFFALSE 22430
// if not ( dec1 in [ 5 , 6 ] ) then
22505: LD_VAR 0 2
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: LD_INT 6
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: IN
22520: NOT
22521: IFFALSE 22564
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_STRING Q1a
22530: PPUSH
22531: LD_INT 1
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 98
22545: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22546: LD_VAR 0 2
22550: PUSH
22551: LD_INT 4
22553: PLUS
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: CALL 24001 0 2
// end ; if not JMMGirlVeh = [ ] then
22564: LD_EXP 79
22568: PUSH
22569: EMPTY
22570: EQUAL
22571: NOT
22572: IFFALSE 22938
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22574: LD_EXP 25
22578: PPUSH
22579: CALL_OW 313
22583: PPUSH
22584: CALL_OW 121
// wait ( 0 0$1 ) ;
22588: LD_INT 35
22590: PPUSH
22591: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22595: LD_INT 35
22597: PPUSH
22598: CALL_OW 67
// if JMMGirl = 1 then
22602: LD_EXP 80
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22626
// ComMoveUnit ( JMM , Joan ) ;
22612: LD_EXP 1
22616: PPUSH
22617: LD_EXP 2
22621: PPUSH
22622: CALL_OW 112
// if JMMGirl = 2 then
22626: LD_EXP 80
22630: PUSH
22631: LD_INT 2
22633: EQUAL
22634: IFFALSE 22650
// ComMoveUnit ( JMM , Lisa ) ;
22636: LD_EXP 1
22640: PPUSH
22641: LD_EXP 4
22645: PPUSH
22646: CALL_OW 112
// if JMMGirl = 3 then
22650: LD_EXP 80
22654: PUSH
22655: LD_INT 3
22657: EQUAL
22658: IFFALSE 22674
// ComMoveUnit ( JMM , Connie ) ;
22660: LD_EXP 1
22664: PPUSH
22665: LD_EXP 16
22669: PPUSH
22670: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22674: LD_EXP 1
22678: PPUSH
22679: LD_EXP 2
22683: PPUSH
22684: CALL_OW 296
22688: PUSH
22689: LD_INT 6
22691: LESS
22692: PUSH
22693: LD_EXP 1
22697: PPUSH
22698: LD_EXP 4
22702: PPUSH
22703: CALL_OW 296
22707: PUSH
22708: LD_INT 6
22710: LESS
22711: OR
22712: PUSH
22713: LD_EXP 1
22717: PPUSH
22718: LD_EXP 16
22722: PPUSH
22723: CALL_OW 296
22727: PUSH
22728: LD_INT 6
22730: LESS
22731: OR
22732: IFFALSE 22595
// CenterNowOnUnits ( JMM ) ;
22734: LD_EXP 1
22738: PPUSH
22739: CALL_OW 87
// case JMMGirl of 1 :
22743: LD_EXP 80
22747: PUSH
22748: LD_INT 1
22750: DOUBLE
22751: EQUAL
22752: IFTRUE 22756
22754: GO 22811
22756: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22757: LD_EXP 1
22761: PPUSH
22762: LD_EXP 2
22766: PPUSH
22767: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22771: LD_EXP 2
22775: PPUSH
22776: LD_EXP 1
22780: PPUSH
22781: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22785: LD_EXP 2
22789: PPUSH
22790: LD_STRING D3W-Joan-1
22792: PPUSH
22793: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22797: LD_EXP 1
22801: PPUSH
22802: LD_STRING D3W-JMM-1
22804: PPUSH
22805: CALL_OW 88
// end ; 2 :
22809: GO 22938
22811: LD_INT 2
22813: DOUBLE
22814: EQUAL
22815: IFTRUE 22819
22817: GO 22874
22819: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22820: LD_EXP 1
22824: PPUSH
22825: LD_EXP 4
22829: PPUSH
22830: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22834: LD_EXP 4
22838: PPUSH
22839: LD_EXP 1
22843: PPUSH
22844: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22848: LD_EXP 4
22852: PPUSH
22853: LD_STRING D3W-Lisa-1
22855: PPUSH
22856: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22860: LD_EXP 1
22864: PPUSH
22865: LD_STRING D3W-JMM-1
22867: PPUSH
22868: CALL_OW 88
// end ; 3 :
22872: GO 22938
22874: LD_INT 3
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 22937
22882: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22883: LD_EXP 1
22887: PPUSH
22888: LD_EXP 16
22892: PPUSH
22893: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22897: LD_EXP 16
22901: PPUSH
22902: LD_EXP 1
22906: PPUSH
22907: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22911: LD_EXP 16
22915: PPUSH
22916: LD_STRING D3W-Con-1
22918: PPUSH
22919: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22923: LD_EXP 1
22927: PPUSH
22928: LD_STRING D3W-JMM-1
22930: PPUSH
22931: CALL_OW 88
// end ; end ;
22935: GO 22938
22937: POP
// end ; people = 0 ;
22938: LD_ADDR_VAR 0 4
22942: PUSH
22943: LD_INT 0
22945: ST_TO_ADDR
// if Lisa and people < 5 then
22946: LD_EXP 4
22950: PUSH
22951: LD_VAR 0 4
22955: PUSH
22956: LD_INT 5
22958: LESS
22959: AND
22960: IFFALSE 22992
// begin people = people + 1 ;
22962: LD_ADDR_VAR 0 4
22966: PUSH
22967: LD_VAR 0 4
22971: PUSH
22972: LD_INT 1
22974: PLUS
22975: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22976: LD_ADDR_EXP 67
22980: PUSH
22981: LD_EXP 67
22985: PUSH
22986: LD_EXP 4
22990: ADD
22991: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22992: LD_EXP 5
22996: PUSH
22997: LD_VAR 0 4
23001: PUSH
23002: LD_INT 5
23004: LESS
23005: AND
23006: IFFALSE 23038
// begin people = people + 1 ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_VAR 0 4
23017: PUSH
23018: LD_INT 1
23020: PLUS
23021: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
23022: LD_ADDR_EXP 67
23026: PUSH
23027: LD_EXP 67
23031: PUSH
23032: LD_EXP 5
23036: ADD
23037: ST_TO_ADDR
// end ; if Bobby and people < 5 then
23038: LD_EXP 6
23042: PUSH
23043: LD_VAR 0 4
23047: PUSH
23048: LD_INT 5
23050: LESS
23051: AND
23052: IFFALSE 23084
// begin people = people + 1 ;
23054: LD_ADDR_VAR 0 4
23058: PUSH
23059: LD_VAR 0 4
23063: PUSH
23064: LD_INT 1
23066: PLUS
23067: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
23068: LD_ADDR_EXP 67
23072: PUSH
23073: LD_EXP 67
23077: PUSH
23078: LD_EXP 6
23082: ADD
23083: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
23084: LD_EXP 7
23088: PUSH
23089: LD_VAR 0 4
23093: PUSH
23094: LD_INT 5
23096: LESS
23097: AND
23098: IFFALSE 23130
// begin people = people + 1 ;
23100: LD_ADDR_VAR 0 4
23104: PUSH
23105: LD_VAR 0 4
23109: PUSH
23110: LD_INT 1
23112: PLUS
23113: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
23114: LD_ADDR_EXP 67
23118: PUSH
23119: LD_EXP 67
23123: PUSH
23124: LD_EXP 7
23128: ADD
23129: ST_TO_ADDR
// end ; if Denis and people < 5 then
23130: LD_EXP 8
23134: PUSH
23135: LD_VAR 0 4
23139: PUSH
23140: LD_INT 5
23142: LESS
23143: AND
23144: IFFALSE 23176
// begin people = people + 1 ;
23146: LD_ADDR_VAR 0 4
23150: PUSH
23151: LD_VAR 0 4
23155: PUSH
23156: LD_INT 1
23158: PLUS
23159: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
23160: LD_ADDR_EXP 67
23164: PUSH
23165: LD_EXP 67
23169: PUSH
23170: LD_EXP 8
23174: ADD
23175: ST_TO_ADDR
// end ; if Brown and people < 5 then
23176: LD_EXP 9
23180: PUSH
23181: LD_VAR 0 4
23185: PUSH
23186: LD_INT 5
23188: LESS
23189: AND
23190: IFFALSE 23222
// begin people = people + 1 ;
23192: LD_ADDR_VAR 0 4
23196: PUSH
23197: LD_VAR 0 4
23201: PUSH
23202: LD_INT 1
23204: PLUS
23205: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
23206: LD_ADDR_EXP 67
23210: PUSH
23211: LD_EXP 67
23215: PUSH
23216: LD_EXP 9
23220: ADD
23221: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
23222: LD_EXP 10
23226: PUSH
23227: LD_VAR 0 4
23231: PUSH
23232: LD_INT 5
23234: LESS
23235: AND
23236: IFFALSE 23268
// begin people = people + 1 ;
23238: LD_ADDR_VAR 0 4
23242: PUSH
23243: LD_VAR 0 4
23247: PUSH
23248: LD_INT 1
23250: PLUS
23251: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
23252: LD_ADDR_EXP 67
23256: PUSH
23257: LD_EXP 67
23261: PUSH
23262: LD_EXP 10
23266: ADD
23267: ST_TO_ADDR
// end ; if Houten and people < 5 then
23268: LD_EXP 11
23272: PUSH
23273: LD_VAR 0 4
23277: PUSH
23278: LD_INT 5
23280: LESS
23281: AND
23282: IFFALSE 23314
// begin people = people + 1 ;
23284: LD_ADDR_VAR 0 4
23288: PUSH
23289: LD_VAR 0 4
23293: PUSH
23294: LD_INT 1
23296: PLUS
23297: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23298: LD_ADDR_EXP 67
23302: PUSH
23303: LD_EXP 67
23307: PUSH
23308: LD_EXP 11
23312: ADD
23313: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23314: LD_EXP 12
23318: PUSH
23319: LD_VAR 0 4
23323: PUSH
23324: LD_INT 5
23326: LESS
23327: AND
23328: IFFALSE 23360
// begin people = people + 1 ;
23330: LD_ADDR_VAR 0 4
23334: PUSH
23335: LD_VAR 0 4
23339: PUSH
23340: LD_INT 1
23342: PLUS
23343: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23344: LD_ADDR_EXP 67
23348: PUSH
23349: LD_EXP 67
23353: PUSH
23354: LD_EXP 12
23358: ADD
23359: ST_TO_ADDR
// end ; if Gary and people < 5 then
23360: LD_EXP 13
23364: PUSH
23365: LD_VAR 0 4
23369: PUSH
23370: LD_INT 5
23372: LESS
23373: AND
23374: IFFALSE 23406
// begin people = people + 1 ;
23376: LD_ADDR_VAR 0 4
23380: PUSH
23381: LD_VAR 0 4
23385: PUSH
23386: LD_INT 1
23388: PLUS
23389: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23390: LD_ADDR_EXP 67
23394: PUSH
23395: LD_EXP 67
23399: PUSH
23400: LD_EXP 13
23404: ADD
23405: ST_TO_ADDR
// end ; if Frank and people < 5 then
23406: LD_EXP 14
23410: PUSH
23411: LD_VAR 0 4
23415: PUSH
23416: LD_INT 5
23418: LESS
23419: AND
23420: IFFALSE 23452
// begin people = people + 1 ;
23422: LD_ADDR_VAR 0 4
23426: PUSH
23427: LD_VAR 0 4
23431: PUSH
23432: LD_INT 1
23434: PLUS
23435: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23436: LD_ADDR_EXP 67
23440: PUSH
23441: LD_EXP 67
23445: PUSH
23446: LD_EXP 14
23450: ADD
23451: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23452: LD_EXP 15
23456: PUSH
23457: LD_VAR 0 4
23461: PUSH
23462: LD_INT 5
23464: LESS
23465: AND
23466: IFFALSE 23498
// begin people = people + 1 ;
23468: LD_ADDR_VAR 0 4
23472: PUSH
23473: LD_VAR 0 4
23477: PUSH
23478: LD_INT 1
23480: PLUS
23481: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23482: LD_ADDR_EXP 67
23486: PUSH
23487: LD_EXP 67
23491: PUSH
23492: LD_EXP 15
23496: ADD
23497: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23498: LD_EXP 67
23502: PPUSH
23503: LD_INT 25
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 72
23517: PUSH
23518: LD_INT 0
23520: EQUAL
23521: IFFALSE 23539
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23523: LD_EXP 67
23527: PUSH
23528: LD_INT 1
23530: ARRAY
23531: PPUSH
23532: LD_INT 2
23534: PPUSH
23535: CALL_OW 336
// for i = 1 to 5 do
23539: LD_ADDR_VAR 0 1
23543: PUSH
23544: DOUBLE
23545: LD_INT 1
23547: DEC
23548: ST_TO_ADDR
23549: LD_INT 5
23551: PUSH
23552: FOR_TO
23553: IFFALSE 23604
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23555: LD_EXP 67
23559: PUSH
23560: LD_VAR 0 1
23564: ARRAY
23565: PPUSH
23566: LD_INT 62
23568: PUSH
23569: LD_VAR 0 1
23573: PLUS
23574: PPUSH
23575: LD_INT 95
23577: PPUSH
23578: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23582: LD_EXP 67
23586: PUSH
23587: LD_VAR 0 1
23591: ARRAY
23592: PPUSH
23593: LD_EXP 1
23597: PPUSH
23598: CALL_OW 179
// end ;
23602: GO 23552
23604: POP
23605: POP
// repeat wait ( 0 0$1 ) ;
23606: LD_INT 35
23608: PPUSH
23609: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23613: LD_EXP 1
23617: PPUSH
23618: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23622: LD_EXP 1
23626: PPUSH
23627: LD_INT 66
23629: PPUSH
23630: LD_INT 98
23632: PPUSH
23633: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23637: LD_EXP 2
23641: PUSH
23642: LD_EXP 4
23646: PUSH
23647: LD_EXP 16
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: PPUSH
23657: LD_INT 67
23659: PPUSH
23660: LD_INT 98
23662: PPUSH
23663: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23667: LD_EXP 1
23671: PUSH
23672: LD_EXP 2
23676: PUSH
23677: LD_EXP 4
23681: PUSH
23682: LD_EXP 16
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PPUSH
23693: LD_INT 63
23695: PPUSH
23696: LD_INT 95
23698: PPUSH
23699: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23703: LD_EXP 1
23707: PPUSH
23708: LD_INT 9
23710: PPUSH
23711: CALL_OW 308
23715: PUSH
23716: LD_INT 9
23718: PPUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 4
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 70
23747: PUSH
23748: LD_INT 5
23750: EQUAL
23751: AND
23752: IFFALSE 23606
// wait ( 0 0$2 ) ;
23754: LD_INT 70
23756: PPUSH
23757: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23761: LD_EXP 4
23765: PPUSH
23766: LD_INT 9
23768: PPUSH
23769: CALL_OW 308
23773: IFFALSE 23787
// Say ( Lisa , D3nW-Lisa-1 ) ;
23775: LD_EXP 4
23779: PPUSH
23780: LD_STRING D3nW-Lisa-1
23782: PPUSH
23783: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23787: LD_EXP 7
23791: PPUSH
23792: LD_INT 9
23794: PPUSH
23795: CALL_OW 308
23799: IFFALSE 23813
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23801: LD_EXP 7
23805: PPUSH
23806: LD_STRING D3nW-Cyrus-1
23808: PPUSH
23809: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23813: LD_EXP 6
23817: PPUSH
23818: LD_INT 9
23820: PPUSH
23821: CALL_OW 308
23825: IFFALSE 23839
// Say ( Bobby , D3nW-Bobby-1 ) ;
23827: LD_EXP 6
23831: PPUSH
23832: LD_STRING D3nW-Bobby-1
23834: PPUSH
23835: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23839: LD_EXP 13
23843: PPUSH
23844: LD_INT 9
23846: PPUSH
23847: CALL_OW 308
23851: IFFALSE 23865
// Say ( Gary , D3nW-Gary-1 ) ;
23853: LD_EXP 13
23857: PPUSH
23858: LD_STRING D3nW-Gary-1
23860: PPUSH
23861: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23865: LD_EXP 5
23869: PPUSH
23870: LD_INT 9
23872: PPUSH
23873: CALL_OW 308
23877: IFFALSE 23891
// Say ( Donaldson , D3nW-Don-1 ) ;
23879: LD_EXP 5
23883: PPUSH
23884: LD_STRING D3nW-Don-1
23886: PPUSH
23887: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23891: LD_EXP 12
23895: PPUSH
23896: LD_INT 9
23898: PPUSH
23899: CALL_OW 308
23903: IFFALSE 23917
// Say ( Cornel , D3nW-Corn-1 ) ;
23905: LD_EXP 12
23909: PPUSH
23910: LD_STRING D3nW-Corn-1
23912: PPUSH
23913: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23917: LD_EXP 14
23921: PPUSH
23922: LD_INT 9
23924: PPUSH
23925: CALL_OW 308
23929: IFFALSE 23943
// Say ( Frank , D3nW-Frank-1 ) ;
23931: LD_EXP 14
23935: PPUSH
23936: LD_STRING D3nW-Frank-1
23938: PPUSH
23939: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23943: LD_EXP 1
23947: PPUSH
23948: LD_STRING D3nW-JMM-1
23950: PPUSH
23951: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23955: LD_EXP 1
23959: PPUSH
23960: LD_STRING D3nW-JMM-1a
23962: PPUSH
23963: CALL_OW 88
// InGameOff ;
23967: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23971: LD_STRING M1
23973: PPUSH
23974: CALL_OW 337
// SaveForQuickRestart ;
23978: CALL_OW 22
// startAttacks = 1 ;
23982: LD_ADDR_EXP 72
23986: PUSH
23987: LD_INT 1
23989: ST_TO_ADDR
// powellBuildBase = 1 ;
23990: LD_ADDR_EXP 68
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// end ;
23998: PPOPN 4
24000: END
// function ResolveQuery ( question , list_of_q ) ; begin
24001: LD_INT 0
24003: PPUSH
// case question of 1 :
24004: LD_VAR 0 1
24008: PUSH
24009: LD_INT 1
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24068
24017: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
24018: LD_EXP 1
24022: PPUSH
24023: LD_STRING D2Mot-JMM-1
24025: PPUSH
24026: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
24030: LD_EXP 17
24034: PPUSH
24035: LD_STRING D2Mot-Pow-1
24037: PPUSH
24038: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
24042: LD_EXP 1
24046: PPUSH
24047: LD_STRING D2Mot-JMM-2
24049: PPUSH
24050: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
24054: LD_EXP 17
24058: PPUSH
24059: LD_STRING D2Mot-Pow-2
24061: PPUSH
24062: CALL_OW 88
// end ; 2 :
24066: GO 24411
24068: LD_INT 2
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24152
24076: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
24077: LD_EXP 1
24081: PPUSH
24082: LD_STRING D2Rus-JMM-1
24084: PPUSH
24085: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
24089: LD_EXP 17
24093: PPUSH
24094: LD_STRING D2Rus-Pow-1
24096: PPUSH
24097: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
24101: LD_EXP 1
24105: PPUSH
24106: LD_STRING D2Rus-JMM-2
24108: PPUSH
24109: CALL_OW 88
// if not ( 3 in list_of_q ) then
24113: LD_INT 3
24115: PUSH
24116: LD_VAR 0 2
24120: IN
24121: NOT
24122: IFFALSE 24138
// Say ( Powell , D2Rus-Pow-2 ) else
24124: LD_EXP 17
24128: PPUSH
24129: LD_STRING D2Rus-Pow-2
24131: PPUSH
24132: CALL_OW 88
24136: GO 24150
// Say ( Powell , D2Rus-Pow-2a ) ;
24138: LD_EXP 17
24142: PPUSH
24143: LD_STRING D2Rus-Pow-2a
24145: PPUSH
24146: CALL_OW 88
// end ; 3 :
24150: GO 24411
24152: LD_INT 3
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24245
24160: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
24161: LD_EXP 1
24165: PPUSH
24166: LD_STRING D2Leg-JMM-1
24168: PPUSH
24169: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
24173: LD_EXP 17
24177: PPUSH
24178: LD_STRING D2Leg-Pow-1
24180: PPUSH
24181: CALL_OW 88
// if ( 2 in list_of_q ) then
24185: LD_INT 2
24187: PUSH
24188: LD_VAR 0 2
24192: IN
24193: IFFALSE 24219
// begin Say ( JMM , D2Leg-JMM-2 ) ;
24195: LD_EXP 1
24199: PPUSH
24200: LD_STRING D2Leg-JMM-2
24202: PPUSH
24203: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
24207: LD_EXP 17
24211: PPUSH
24212: LD_STRING D2Leg-Pow-2
24214: PPUSH
24215: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
24219: LD_EXP 1
24223: PPUSH
24224: LD_STRING D2Leg-JMM-3
24226: PPUSH
24227: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
24231: LD_EXP 17
24235: PPUSH
24236: LD_STRING D2Leg-Pow-3
24238: PPUSH
24239: CALL_OW 88
// end ; 4 :
24243: GO 24411
24245: LD_INT 4
24247: DOUBLE
24248: EQUAL
24249: IFTRUE 24253
24251: GO 24328
24253: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
24254: LD_EXP 1
24258: PPUSH
24259: LD_STRING D2Ar-JMM-1
24261: PPUSH
24262: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24266: LD_EXP 17
24270: PPUSH
24271: LD_STRING D2Ar-Pow-1
24273: PPUSH
24274: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24278: LD_EXP 1
24282: PPUSH
24283: LD_STRING D2Ar-JMM-2
24285: PPUSH
24286: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24290: LD_EXP 17
24294: PPUSH
24295: LD_STRING D2Ar-Pow-2
24297: PPUSH
24298: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24302: LD_EXP 1
24306: PPUSH
24307: LD_STRING D2Ar-JMM-3
24309: PPUSH
24310: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24314: LD_EXP 17
24318: PPUSH
24319: LD_STRING D2Ar-Pow-3
24321: PPUSH
24322: CALL_OW 88
// end ; 5 :
24326: GO 24411
24328: LD_INT 5
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24351
24336: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24337: LD_EXP 1
24341: PPUSH
24342: LD_STRING D2Conf-JMM-1
24344: PPUSH
24345: CALL_OW 88
// end ; 6 :
24349: GO 24411
24351: LD_INT 6
24353: DOUBLE
24354: EQUAL
24355: IFTRUE 24359
24357: GO 24410
24359: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24360: LD_EXP 1
24364: PPUSH
24365: LD_STRING D2Com-JMM-1
24367: PPUSH
24368: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24372: LD_EXP 17
24376: PPUSH
24377: LD_STRING D2Com-Pow-1
24379: PPUSH
24380: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24384: LD_EXP 1
24388: PPUSH
24389: LD_STRING D2Com-JMM-2
24391: PPUSH
24392: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24396: LD_EXP 17
24400: PPUSH
24401: LD_STRING D2Com-Pow-2
24403: PPUSH
24404: CALL_OW 88
// end ; end ;
24408: GO 24411
24410: POP
// end ;
24411: LD_VAR 0 3
24415: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24416: LD_INT 9
24418: PPUSH
24419: LD_INT 22
24421: PUSH
24422: LD_INT 4
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 21
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 70
24447: IFFALSE 24492
24449: GO 24451
24451: DISABLE
// begin enable ;
24452: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24453: LD_INT 9
24455: PPUSH
24456: LD_INT 22
24458: PUSH
24459: LD_INT 4
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 21
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PPUSH
24480: CALL_OW 70
24484: PPUSH
24485: LD_INT 1
24487: PPUSH
24488: CALL_OW 235
// end ;
24492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24493: LD_INT 22
24495: PUSH
24496: LD_INT 4
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 21
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: LD_INT 58
24518: PUSH
24519: EMPTY
24520: LIST
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: PPUSH
24531: CALL_OW 69
24535: PUSH
24536: LD_INT 4
24538: EQUAL
24539: PUSH
24540: LD_EXP 72
24544: PUSH
24545: LD_INT 1
24547: EQUAL
24548: AND
24549: IFFALSE 24562
24551: GO 24553
24553: DISABLE
// startAttacks = 0 ;
24554: LD_ADDR_EXP 72
24558: PUSH
24559: LD_INT 0
24561: ST_TO_ADDR
24562: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24563: LD_INT 22
24565: PUSH
24566: LD_INT 4
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: LD_INT 58
24588: PUSH
24589: EMPTY
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 69
24605: PUSH
24606: LD_INT 4
24608: EQUAL
24609: PUSH
24610: LD_INT 22
24612: PUSH
24613: LD_INT 6
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 24
24632: PUSH
24633: LD_INT 250
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: PPUSH
24645: CALL_OW 69
24649: PUSH
24650: LD_INT 0
24652: EQUAL
24653: AND
24654: PUSH
24655: LD_EXP 72
24659: PUSH
24660: LD_INT 0
24662: EQUAL
24663: AND
24664: PUSH
24665: LD_EXP 69
24669: PUSH
24670: LD_INT 0
24672: EQUAL
24673: AND
24674: IFFALSE 24862
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
// begin powellAttacks = 1 ;
24682: LD_ADDR_EXP 69
24686: PUSH
24687: LD_INT 1
24689: ST_TO_ADDR
// InGameOn ;
24690: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24694: LD_EXP 17
24698: PPUSH
24699: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24703: LD_EXP 17
24707: PPUSH
24708: LD_INT 47
24710: PPUSH
24711: LD_INT 60
24713: PPUSH
24714: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24718: LD_EXP 17
24722: PPUSH
24723: LD_STRING D4-Pow-1
24725: PPUSH
24726: CALL_OW 88
// for i = 1 to amUnitsAttack do
24730: LD_ADDR_VAR 0 1
24734: PUSH
24735: DOUBLE
24736: LD_INT 1
24738: DEC
24739: ST_TO_ADDR
24740: LD_EXP 66
24744: PUSH
24745: FOR_TO
24746: IFFALSE 24791
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24748: LD_EXP 66
24752: PUSH
24753: LD_VAR 0 1
24757: ARRAY
24758: PPUSH
24759: CALL_OW 258
24763: PUSH
24764: LD_INT 1
24766: EQUAL
24767: IFFALSE 24789
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24769: LD_EXP 66
24773: PUSH
24774: LD_VAR 0 1
24778: ARRAY
24779: PPUSH
24780: LD_STRING D4-Sol1-1
24782: PPUSH
24783: CALL_OW 88
// break ;
24787: GO 24791
// end ;
24789: GO 24745
24791: POP
24792: POP
// Say ( Powell , D4-Pow-2 ) ;
24793: LD_EXP 17
24797: PPUSH
24798: LD_STRING D4-Pow-2
24800: PPUSH
24801: CALL_OW 88
// InGameOff ;
24805: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24809: LD_INT 22
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 21
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: LD_INT 58
24834: PUSH
24835: EMPTY
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: PPUSH
24847: CALL_OW 69
24851: PPUSH
24852: LD_INT 59
24854: PPUSH
24855: LD_INT 21
24857: PPUSH
24858: CALL_OW 114
// end ;
24862: PPOPN 1
24864: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24865: LD_INT 7
24867: PPUSH
24868: LD_INT 22
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 21
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 70
24896: PUSH
24897: LD_INT 0
24899: GREATER
24900: PUSH
24901: LD_EXP 17
24905: PPUSH
24906: CALL_OW 302
24910: AND
24911: PUSH
24912: LD_EXP 71
24916: PUSH
24917: LD_INT 0
24919: EQUAL
24920: AND
24921: IFFALSE 25045
24923: GO 24925
24925: DISABLE
// begin InGameOn ;
24926: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24930: LD_INT 22
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 21
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PPUSH
24954: CALL_OW 69
24958: PPUSH
24959: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24963: LD_INT 7
24965: PPUSH
24966: LD_INT 22
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 21
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PPUSH
24990: CALL_OW 70
24994: PPUSH
24995: LD_INT 70
24997: PPUSH
24998: LD_INT 104
25000: PPUSH
25001: CALL_OW 111
// if powellWarm = 0 then
25005: LD_EXP 71
25009: PUSH
25010: LD_INT 0
25012: EQUAL
25013: IFFALSE 25041
// begin Say ( Powell , DBack1-Pow-1 ) ;
25015: LD_EXP 17
25019: PPUSH
25020: LD_STRING DBack1-Pow-1
25022: PPUSH
25023: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25027: LD_ADDR_EXP 71
25031: PUSH
25032: LD_EXP 71
25036: PUSH
25037: LD_INT 1
25039: PLUS
25040: ST_TO_ADDR
// end ; InGameOff ;
25041: CALL_OW 9
// end ;
25045: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25046: LD_INT 7
25048: PPUSH
25049: LD_INT 22
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 21
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PPUSH
25073: CALL_OW 70
25077: PUSH
25078: LD_INT 0
25080: GREATER
25081: PUSH
25082: LD_EXP 17
25086: PPUSH
25087: CALL_OW 302
25091: AND
25092: PUSH
25093: LD_EXP 71
25097: PUSH
25098: LD_INT 1
25100: EQUAL
25101: AND
25102: IFFALSE 25226
25104: GO 25106
25106: DISABLE
// begin InGameOn ;
25107: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25111: LD_INT 22
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 21
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PPUSH
25140: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25144: LD_INT 7
25146: PPUSH
25147: LD_INT 22
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 70
25175: PPUSH
25176: LD_INT 70
25178: PPUSH
25179: LD_INT 104
25181: PPUSH
25182: CALL_OW 111
// if powellWarm = 1 then
25186: LD_EXP 71
25190: PUSH
25191: LD_INT 1
25193: EQUAL
25194: IFFALSE 25222
// begin Say ( Powell , DBack2-Pow-1 ) ;
25196: LD_EXP 17
25200: PPUSH
25201: LD_STRING DBack2-Pow-1
25203: PPUSH
25204: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25208: LD_ADDR_EXP 71
25212: PUSH
25213: LD_EXP 71
25217: PUSH
25218: LD_INT 1
25220: PLUS
25221: ST_TO_ADDR
// end ; InGameOff ;
25222: CALL_OW 9
// end ;
25226: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25227: LD_INT 7
25229: PPUSH
25230: LD_INT 22
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL_OW 70
25258: PUSH
25259: LD_INT 0
25261: GREATER
25262: PUSH
25263: LD_EXP 17
25267: PPUSH
25268: CALL_OW 302
25272: AND
25273: PUSH
25274: LD_EXP 71
25278: PUSH
25279: LD_INT 2
25281: EQUAL
25282: AND
25283: IFFALSE 25400
25285: GO 25287
25287: DISABLE
// begin InGameOn ;
25288: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25292: LD_INT 22
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 21
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PPUSH
25316: CALL_OW 69
25320: PPUSH
25321: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25325: LD_INT 7
25327: PPUSH
25328: LD_INT 22
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 70
25356: PPUSH
25357: LD_INT 70
25359: PPUSH
25360: LD_INT 104
25362: PPUSH
25363: CALL_OW 111
// if powellWarm = 2 then
25367: LD_EXP 71
25371: PUSH
25372: LD_INT 2
25374: EQUAL
25375: IFFALSE 25396
// begin Say ( Powell , DBack3-Pow-1 ) ;
25377: LD_EXP 17
25381: PPUSH
25382: LD_STRING DBack3-Pow-1
25384: PPUSH
25385: CALL_OW 88
// YouLost ( Dismissed ) ;
25389: LD_STRING Dismissed
25391: PPUSH
25392: CALL_OW 104
// end ; InGameOff ;
25396: CALL_OW 9
// end ;
25400: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25401: LD_INT 8
25403: PPUSH
25404: LD_INT 22
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 21
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 70
25432: PUSH
25433: LD_INT 0
25435: GREATER
25436: PUSH
25437: LD_EXP 17
25441: PPUSH
25442: CALL_OW 302
25446: AND
25447: PUSH
25448: LD_EXP 71
25452: PUSH
25453: LD_INT 0
25455: EQUAL
25456: AND
25457: IFFALSE 25581
25459: GO 25461
25461: DISABLE
// begin InGameOn ;
25462: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25466: LD_INT 22
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 21
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: PPUSH
25495: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25499: LD_INT 8
25501: PPUSH
25502: LD_INT 22
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 21
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PPUSH
25526: CALL_OW 70
25530: PPUSH
25531: LD_INT 71
25533: PPUSH
25534: LD_INT 63
25536: PPUSH
25537: CALL_OW 111
// if powellWarm = 0 then
25541: LD_EXP 71
25545: PUSH
25546: LD_INT 0
25548: EQUAL
25549: IFFALSE 25577
// begin Say ( Powell , DBack1-Pow-1 ) ;
25551: LD_EXP 17
25555: PPUSH
25556: LD_STRING DBack1-Pow-1
25558: PPUSH
25559: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25563: LD_ADDR_EXP 71
25567: PUSH
25568: LD_EXP 71
25572: PUSH
25573: LD_INT 1
25575: PLUS
25576: ST_TO_ADDR
// end ; InGameOff ;
25577: CALL_OW 9
// end ;
25581: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25582: LD_INT 8
25584: PPUSH
25585: LD_INT 22
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 21
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 70
25613: PUSH
25614: LD_INT 0
25616: GREATER
25617: PUSH
25618: LD_EXP 17
25622: PPUSH
25623: CALL_OW 302
25627: AND
25628: PUSH
25629: LD_EXP 71
25633: PUSH
25634: LD_INT 1
25636: EQUAL
25637: AND
25638: IFFALSE 25762
25640: GO 25642
25642: DISABLE
// begin InGameOn ;
25643: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25647: LD_INT 22
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 21
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 69
25675: PPUSH
25676: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25680: LD_INT 8
25682: PPUSH
25683: LD_INT 22
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PPUSH
25707: CALL_OW 70
25711: PPUSH
25712: LD_INT 71
25714: PPUSH
25715: LD_INT 63
25717: PPUSH
25718: CALL_OW 111
// if powellWarm = 1 then
25722: LD_EXP 71
25726: PUSH
25727: LD_INT 1
25729: EQUAL
25730: IFFALSE 25758
// begin Say ( Powell , DBack2-Pow-1 ) ;
25732: LD_EXP 17
25736: PPUSH
25737: LD_STRING DBack2-Pow-1
25739: PPUSH
25740: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25744: LD_ADDR_EXP 71
25748: PUSH
25749: LD_EXP 71
25753: PUSH
25754: LD_INT 1
25756: PLUS
25757: ST_TO_ADDR
// end ; InGameOff ;
25758: CALL_OW 9
// end ;
25762: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25763: LD_INT 8
25765: PPUSH
25766: LD_INT 22
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 21
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PPUSH
25790: CALL_OW 70
25794: PUSH
25795: LD_INT 0
25797: GREATER
25798: PUSH
25799: LD_EXP 17
25803: PPUSH
25804: CALL_OW 302
25808: AND
25809: PUSH
25810: LD_EXP 71
25814: PUSH
25815: LD_INT 2
25817: EQUAL
25818: AND
25819: IFFALSE 25936
25821: GO 25823
25823: DISABLE
// begin InGameOn ;
25824: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25828: LD_INT 22
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 21
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PPUSH
25852: CALL_OW 69
25856: PPUSH
25857: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25861: LD_INT 8
25863: PPUSH
25864: LD_INT 22
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 21
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PPUSH
25888: CALL_OW 70
25892: PPUSH
25893: LD_INT 71
25895: PPUSH
25896: LD_INT 63
25898: PPUSH
25899: CALL_OW 111
// if powellWarm = 2 then
25903: LD_EXP 71
25907: PUSH
25908: LD_INT 2
25910: EQUAL
25911: IFFALSE 25932
// begin Say ( Powell , DBack3-Pow-1 ) ;
25913: LD_EXP 17
25917: PPUSH
25918: LD_STRING DBack3-Pow-1
25920: PPUSH
25921: CALL_OW 88
// YouLost ( Dismissed ) ;
25925: LD_STRING Dismissed
25927: PPUSH
25928: CALL_OW 104
// end ; InGameOff ;
25932: CALL_OW 9
// end ;
25936: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25937: LD_EXP 69
25941: PUSH
25942: LD_INT 1
25944: EQUAL
25945: IFFALSE 25994
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
// begin enable ;
25953: ENABLE
// for i = 1 to amUnitsAttack do
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: DOUBLE
25960: LD_INT 1
25962: DEC
25963: ST_TO_ADDR
25964: LD_EXP 66
25968: PUSH
25969: FOR_TO
25970: IFFALSE 25992
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25972: LD_INT 8
25974: PPUSH
25975: LD_EXP 66
25979: PUSH
25980: LD_VAR 0 1
25984: ARRAY
25985: PPUSH
25986: CALL_OW 471
25990: GO 25969
25992: POP
25993: POP
// end ;
25994: PPOPN 1
25996: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25997: LD_INT 22
25999: PUSH
26000: LD_INT 4
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 21
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: LD_INT 58
26022: PUSH
26023: EMPTY
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: PPUSH
26035: CALL_OW 69
26039: PUSH
26040: LD_INT 0
26042: EQUAL
26043: PUSH
26044: LD_EXP 69
26048: PUSH
26049: LD_INT 1
26051: EQUAL
26052: AND
26053: IFFALSE 26224
26055: GO 26057
26057: DISABLE
// begin powellAttacks = 2 ;
26058: LD_ADDR_EXP 69
26062: PUSH
26063: LD_INT 2
26065: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26066: LD_INT 85
26068: PPUSH
26069: LD_INT 3
26071: PPUSH
26072: LD_INT 3
26074: PPUSH
26075: LD_INT 1
26077: PPUSH
26078: LD_INT 5
26080: PUSH
26081: LD_INT 7
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PPUSH
26091: LD_INT 2
26093: PPUSH
26094: CALL_OW 12
26098: ARRAY
26099: PPUSH
26100: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26104: LD_INT 85
26106: PPUSH
26107: LD_INT 3
26109: PPUSH
26110: LD_INT 3
26112: PPUSH
26113: LD_INT 1
26115: PPUSH
26116: LD_INT 5
26118: PUSH
26119: LD_INT 7
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PPUSH
26129: LD_INT 2
26131: PPUSH
26132: CALL_OW 12
26136: ARRAY
26137: PPUSH
26138: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26142: LD_INT 85
26144: PPUSH
26145: LD_INT 3
26147: PPUSH
26148: LD_INT 3
26150: PPUSH
26151: LD_INT 1
26153: PPUSH
26154: LD_INT 5
26156: PUSH
26157: LD_INT 7
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PPUSH
26167: LD_INT 2
26169: PPUSH
26170: CALL_OW 12
26174: ARRAY
26175: PPUSH
26176: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
26180: LD_INT 85
26182: PPUSH
26183: LD_INT 5
26185: PPUSH
26186: LD_INT 3
26188: PPUSH
26189: LD_INT 1
26191: PPUSH
26192: LD_INT 6
26194: PPUSH
26195: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
26199: LD_ADDR_EXP 73
26203: PUSH
26204: LD_INT 85
26206: PPUSH
26207: LD_INT 3
26209: PPUSH
26210: LD_INT 3
26212: PPUSH
26213: LD_INT 1
26215: PPUSH
26216: LD_INT 3
26218: PPUSH
26219: CALL_OW 185
26223: ST_TO_ADDR
// end ;
26224: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
26225: LD_INT 22
26227: PUSH
26228: LD_INT 4
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 21
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: LD_INT 58
26250: PUSH
26251: EMPTY
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PUSH
26268: LD_INT 5
26270: GREATEREQUAL
26271: PUSH
26272: LD_EXP 72
26276: PUSH
26277: LD_INT 1
26279: EQUAL
26280: AND
26281: IFFALSE 26294
26283: GO 26285
26285: DISABLE
// startAttacks = 0 ;
26286: LD_ADDR_EXP 72
26290: PUSH
26291: LD_INT 0
26293: ST_TO_ADDR
26294: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26295: LD_INT 22
26297: PUSH
26298: LD_INT 4
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 21
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: PUSH
26318: LD_INT 58
26320: PUSH
26321: EMPTY
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: PPUSH
26333: CALL_OW 69
26337: PUSH
26338: LD_INT 5
26340: GREATEREQUAL
26341: PUSH
26342: LD_INT 22
26344: PUSH
26345: LD_INT 6
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 21
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PPUSH
26366: CALL_OW 69
26370: PUSH
26371: LD_INT 0
26373: EQUAL
26374: AND
26375: PUSH
26376: LD_EXP 72
26380: PUSH
26381: LD_INT 0
26383: EQUAL
26384: AND
26385: PUSH
26386: LD_EXP 69
26390: PUSH
26391: LD_INT 2
26393: EQUAL
26394: AND
26395: IFFALSE 27330
26397: GO 26399
26399: DISABLE
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
26404: PPUSH
26405: PPUSH
// begin powellAttacks = 3 ;
26406: LD_ADDR_EXP 69
26410: PUSH
26411: LD_INT 3
26413: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26414: LD_ADDR_VAR 0 1
26418: PUSH
26419: DOUBLE
26420: LD_INT 1
26422: DEC
26423: ST_TO_ADDR
26424: LD_EXP 66
26428: PUSH
26429: FOR_TO
26430: IFFALSE 26452
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26432: LD_INT 8
26434: PPUSH
26435: LD_EXP 66
26439: PUSH
26440: LD_VAR 0 1
26444: ARRAY
26445: PPUSH
26446: CALL_OW 472
26450: GO 26429
26452: POP
26453: POP
// wait ( 0 0$5 ) ;
26454: LD_INT 175
26456: PPUSH
26457: CALL_OW 67
// Video ( true ) ;
26461: LD_INT 1
26463: PPUSH
26464: CALL 6868 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26468: LD_INT 22
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: PPUSH
26483: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26487: LD_EXP 17
26491: PPUSH
26492: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26496: LD_EXP 17
26500: PPUSH
26501: LD_INT 45
26503: PPUSH
26504: LD_INT 64
26506: PPUSH
26507: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26511: LD_EXP 17
26515: PPUSH
26516: LD_INT 46
26518: PPUSH
26519: LD_INT 66
26521: PPUSH
26522: CALL_OW 178
// for i = 5 to 8 do
26526: LD_ADDR_VAR 0 1
26530: PUSH
26531: DOUBLE
26532: LD_INT 5
26534: DEC
26535: ST_TO_ADDR
26536: LD_INT 8
26538: PUSH
26539: FOR_TO
26540: IFFALSE 26686
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26542: LD_EXP 66
26546: PUSH
26547: LD_VAR 0 1
26551: ARRAY
26552: PPUSH
26553: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26557: LD_EXP 66
26561: PUSH
26562: LD_VAR 0 1
26566: ARRAY
26567: PPUSH
26568: CALL_OW 121
// wait ( 0 0$1 ) ;
26572: LD_INT 35
26574: PPUSH
26575: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26579: LD_EXP 66
26583: PUSH
26584: LD_VAR 0 1
26588: ARRAY
26589: PPUSH
26590: LD_INT 92
26592: PPUSH
26593: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26597: LD_EXP 66
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: PPUSH
26608: LD_INT 1
26610: PPUSH
26611: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26615: LD_EXP 66
26619: PUSH
26620: LD_VAR 0 1
26624: ARRAY
26625: PPUSH
26626: CALL_OW 182
// wait ( 0 0$1 ) ;
26630: LD_INT 35
26632: PPUSH
26633: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26637: LD_EXP 66
26641: PUSH
26642: LD_VAR 0 1
26646: ARRAY
26647: PPUSH
26648: LD_INT 43
26650: PUSH
26651: LD_VAR 0 1
26655: PLUS
26656: PPUSH
26657: LD_INT 66
26659: PPUSH
26660: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26664: LD_EXP 66
26668: PUSH
26669: LD_VAR 0 1
26673: ARRAY
26674: PPUSH
26675: LD_EXP 17
26679: PPUSH
26680: CALL_OW 179
// end ;
26684: GO 26539
26686: POP
26687: POP
// wait ( 0 0$10 ) ;
26688: LD_INT 350
26690: PPUSH
26691: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: LD_INT 22
26702: PUSH
26703: LD_INT 4
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 21
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 56
26722: PUSH
26723: EMPTY
26724: LIST
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: LD_INT 60
26731: PUSH
26732: EMPTY
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: PPUSH
26745: CALL_OW 69
26749: PUSH
26750: LD_EXP 17
26754: PUSH
26755: EMPTY
26756: LIST
26757: DIFF
26758: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26759: LD_VAR 0 3
26763: PPUSH
26764: LD_INT 92
26766: PPUSH
26767: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26771: LD_VAR 0 3
26775: PPUSH
26776: LD_INT 1
26778: PPUSH
26779: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26783: LD_EXP 17
26787: PPUSH
26788: LD_STRING D5-Pow-1
26790: PPUSH
26791: CALL_OW 88
// for i = 1 to amUnitsAttack do
26795: LD_ADDR_VAR 0 1
26799: PUSH
26800: DOUBLE
26801: LD_INT 1
26803: DEC
26804: ST_TO_ADDR
26805: LD_EXP 66
26809: PUSH
26810: FOR_TO
26811: IFFALSE 26856
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26813: LD_EXP 66
26817: PUSH
26818: LD_VAR 0 1
26822: ARRAY
26823: PPUSH
26824: CALL_OW 258
26828: PUSH
26829: LD_INT 1
26831: EQUAL
26832: IFFALSE 26854
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26834: LD_EXP 66
26838: PUSH
26839: LD_VAR 0 1
26843: ARRAY
26844: PPUSH
26845: LD_STRING D5-Sol2-1
26847: PPUSH
26848: CALL_OW 88
// break ;
26852: GO 26856
// end ;
26854: GO 26810
26856: POP
26857: POP
// Say ( Powell , D5-Pow-2 ) ;
26858: LD_EXP 17
26862: PPUSH
26863: LD_STRING D5-Pow-2
26865: PPUSH
26866: CALL_OW 88
// for i = 1 to amUnitsAttack do
26870: LD_ADDR_VAR 0 1
26874: PUSH
26875: DOUBLE
26876: LD_INT 1
26878: DEC
26879: ST_TO_ADDR
26880: LD_EXP 66
26884: PUSH
26885: FOR_TO
26886: IFFALSE 26931
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26888: LD_EXP 66
26892: PUSH
26893: LD_VAR 0 1
26897: ARRAY
26898: PPUSH
26899: CALL_OW 258
26903: PUSH
26904: LD_INT 1
26906: EQUAL
26907: IFFALSE 26929
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26909: LD_EXP 66
26913: PUSH
26914: LD_VAR 0 1
26918: ARRAY
26919: PPUSH
26920: LD_STRING D5-Sol2-2
26922: PPUSH
26923: CALL_OW 88
// break ;
26927: GO 26931
// end ;
26929: GO 26885
26931: POP
26932: POP
// Say ( Powell , D5-Pow-3 ) ;
26933: LD_EXP 17
26937: PPUSH
26938: LD_STRING D5-Pow-3
26940: PPUSH
26941: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26945: LD_INT 22
26947: PUSH
26948: LD_INT 4
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: LD_INT 58
26970: PUSH
26971: EMPTY
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 69
26987: PPUSH
26988: LD_INT 59
26990: PPUSH
26991: LD_INT 21
26993: PPUSH
26994: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26998: LD_EXP 66
27002: PPUSH
27003: LD_INT 59
27005: PPUSH
27006: LD_INT 21
27008: PPUSH
27009: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
27013: LD_INT 61
27015: PPUSH
27016: LD_INT 35
27018: PPUSH
27019: CALL_OW 84
// wait ( 0 0$15 ) ;
27023: LD_INT 525
27025: PPUSH
27026: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
27030: LD_EXP 17
27034: PPUSH
27035: LD_STRING D5a-Pow-1
27037: PPUSH
27038: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27042: LD_EXP 17
27046: PPUSH
27047: LD_STRING D5a-Pow-1a
27049: PPUSH
27050: CALL_OW 88
// wait ( 0 0$2 ) ;
27054: LD_INT 70
27056: PPUSH
27057: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27061: LD_EXP 17
27065: PPUSH
27066: LD_STRING D5a-Pow-1b
27068: PPUSH
27069: CALL_OW 88
// wait ( 0 0$3 ) ;
27073: LD_INT 105
27075: PPUSH
27076: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27080: LD_EXP 17
27084: PPUSH
27085: LD_STRING D5a-Pow-1c
27087: PPUSH
27088: CALL_OW 88
// wait ( 0 0$1 ) ;
27092: LD_INT 35
27094: PPUSH
27095: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
27099: LD_EXP 17
27103: PPUSH
27104: LD_STRING D5a-Pow-1d
27106: PPUSH
27107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27111: LD_INT 35
27113: PPUSH
27114: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27118: LD_INT 22
27120: PUSH
27121: LD_INT 4
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 21
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: LD_INT 58
27143: PUSH
27144: EMPTY
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: PPUSH
27156: CALL_OW 69
27160: PPUSH
27161: LD_INT 59
27163: PPUSH
27164: LD_INT 21
27166: PPUSH
27167: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27171: LD_EXP 66
27175: PPUSH
27176: LD_INT 59
27178: PPUSH
27179: LD_INT 21
27181: PPUSH
27182: CALL_OW 114
// until amUnitsAttack = [ ] ;
27186: LD_EXP 66
27190: PUSH
27191: EMPTY
27192: EQUAL
27193: IFFALSE 27111
// CenterNowOnUnits ( Powell ) ;
27195: LD_EXP 17
27199: PPUSH
27200: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
27204: LD_ADDR_VAR 0 3
27208: PUSH
27209: LD_INT 22
27211: PUSH
27212: LD_INT 4
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 21
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PPUSH
27233: CALL_OW 69
27237: PUSH
27238: LD_EXP 17
27242: PUSH
27243: EMPTY
27244: LIST
27245: DIFF
27246: ST_TO_ADDR
// for i in powellPeople do
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: LD_VAR 0 3
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27287
// if GetSex ( i ) = sex_male then
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 258
27269: PUSH
27270: LD_INT 1
27272: EQUAL
27273: IFFALSE 27285
// sold = i ;
27275: LD_ADDR_VAR 0 2
27279: PUSH
27280: LD_VAR 0 1
27284: ST_TO_ADDR
27285: GO 27257
27287: POP
27288: POP
// Say ( sold , D6-Sol3-1 ) ;
27289: LD_VAR 0 2
27293: PPUSH
27294: LD_STRING D6-Sol3-1
27296: PPUSH
27297: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27301: LD_EXP 17
27305: PPUSH
27306: LD_STRING D6-Pow-1
27308: PPUSH
27309: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27313: LD_INT 139
27315: PUSH
27316: LD_INT 138
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PPUSH
27323: LD_INT 12
27325: PPUSH
27326: CALL_OW 113
// end ;
27330: PPOPN 4
27332: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27333: LD_EXP 69
27337: PUSH
27338: LD_INT 3
27340: EQUAL
27341: PUSH
27342: LD_INT 12
27344: PPUSH
27345: LD_INT 22
27347: PUSH
27348: LD_INT 8
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 21
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 70
27373: PUSH
27374: LD_INT 2
27376: EQUAL
27377: AND
27378: IFFALSE 27539
27380: GO 27382
27382: DISABLE
27383: LD_INT 0
27385: PPUSH
27386: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27387: LD_INT 8
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27397: LD_INT 4
27399: PPUSH
27400: LD_INT 8
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: LD_INT 1
27408: PPUSH
27409: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27413: LD_ADDR_VAR 0 1
27417: PUSH
27418: LD_INT 92
27420: PPUSH
27421: CALL_OW 313
27425: PUSH
27426: FOR_IN
27427: IFFALSE 27458
// if GetSex ( i ) = sex_male then
27429: LD_VAR 0 1
27433: PPUSH
27434: CALL_OW 258
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: IFFALSE 27456
// begin tmp = i ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_VAR 0 1
27453: ST_TO_ADDR
// break ;
27454: GO 27458
// end ;
27456: GO 27426
27458: POP
27459: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27460: LD_INT 92
27462: PPUSH
27463: CALL_OW 313
27467: PPUSH
27468: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27472: LD_VAR 0 2
27476: PPUSH
27477: LD_STRING D6-Sol3-2
27479: PPUSH
27480: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27484: LD_INT 139
27486: PUSH
27487: LD_INT 138
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: LD_INT 85
27496: PPUSH
27497: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27501: LD_INT 4
27503: PPUSH
27504: LD_INT 8
27506: PPUSH
27507: LD_INT 2
27509: PPUSH
27510: LD_INT 1
27512: PPUSH
27513: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27517: LD_INT 8
27519: PPUSH
27520: LD_INT 8
27522: PPUSH
27523: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27527: LD_EXP 17
27531: PPUSH
27532: LD_STRING D6-Pow-2
27534: PPUSH
27535: CALL_OW 88
// end ;
27539: PPOPN 2
27541: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27542: LD_INT 85
27544: PPUSH
27545: CALL_OW 301
27549: IFFALSE 28013
27551: GO 27553
27553: DISABLE
27554: LD_INT 0
27556: PPUSH
27557: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27558: LD_INT 22
27560: PUSH
27561: LD_INT 8
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 21
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 33
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 34
27590: PUSH
27591: LD_INT 29
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 50
27600: PUSH
27601: EMPTY
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: PPUSH
27611: CALL_OW 69
27615: PUSH
27616: LD_INT 1
27618: EQUAL
27619: IFFALSE 27730
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27621: LD_INT 22
27623: PUSH
27624: LD_INT 8
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 21
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 33
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 34
27653: PUSH
27654: LD_INT 29
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 50
27663: PUSH
27664: EMPTY
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: PPUSH
27674: CALL_OW 69
27678: PPUSH
27679: LD_INT 34
27681: PPUSH
27682: LD_INT 22
27684: PUSH
27685: LD_INT 4
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 21
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 30
27704: PUSH
27705: LD_INT 32
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: PPUSH
27717: CALL_OW 70
27721: PUSH
27722: LD_INT 1
27724: ARRAY
27725: PPUSH
27726: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27730: LD_ADDR_VAR 0 1
27734: PUSH
27735: LD_INT 22
27737: PUSH
27738: LD_INT 4
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 21
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 56
27757: PUSH
27758: EMPTY
27759: LIST
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL_OW 69
27770: PUSH
27771: LD_EXP 17
27775: PUSH
27776: EMPTY
27777: LIST
27778: DIFF
27779: PUSH
27780: FOR_IN
27781: IFFALSE 27812
// if GetSex ( i ) = sex_male then
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 258
27792: PUSH
27793: LD_INT 1
27795: EQUAL
27796: IFFALSE 27810
// begin tmp = i ;
27798: LD_ADDR_VAR 0 2
27802: PUSH
27803: LD_VAR 0 1
27807: ST_TO_ADDR
// break ;
27808: GO 27812
// end ;
27810: GO 27780
27812: POP
27813: POP
// Say ( Powell , D6a-Pow-1 ) ;
27814: LD_EXP 17
27818: PPUSH
27819: LD_STRING D6a-Pow-1
27821: PPUSH
27822: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27826: LD_VAR 0 2
27830: PPUSH
27831: LD_STRING D6a-Sol3-1
27833: PPUSH
27834: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27838: LD_EXP 17
27842: PPUSH
27843: LD_VAR 0 2
27847: PPUSH
27848: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27852: LD_EXP 17
27856: PPUSH
27857: LD_STRING D6a-Pow-2
27859: PPUSH
27860: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27864: LD_VAR 0 2
27868: PPUSH
27869: LD_STRING D6a-Sol3-2
27871: PPUSH
27872: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27876: LD_EXP 17
27880: PPUSH
27881: LD_STRING D6a-Pow-3
27883: PPUSH
27884: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27888: LD_EXP 17
27892: PPUSH
27893: LD_EXP 73
27897: PPUSH
27898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27902: LD_INT 35
27904: PPUSH
27905: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27909: LD_EXP 17
27913: PPUSH
27914: LD_EXP 73
27918: PPUSH
27919: CALL_OW 120
// until IsInUnit ( Powell ) ;
27923: LD_EXP 17
27927: PPUSH
27928: CALL_OW 310
27932: IFFALSE 27902
// wait ( 0 0$1 ) ;
27934: LD_INT 35
27936: PPUSH
27937: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27941: LD_EXP 73
27945: PPUSH
27946: LD_INT 77
27948: PPUSH
27949: LD_INT 64
27951: PPUSH
27952: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27956: LD_EXP 73
27960: PPUSH
27961: LD_INT 91
27963: PPUSH
27964: LD_INT 61
27966: PPUSH
27967: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27971: LD_EXP 73
27975: PPUSH
27976: LD_INT 74
27978: PPUSH
27979: LD_INT 25
27981: PPUSH
27982: CALL_OW 171
// centerPowell = 1 ;
27986: LD_ADDR_EXP 74
27990: PUSH
27991: LD_INT 1
27993: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27994: LD_INT 525
27996: PPUSH
27997: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
28001: LD_EXP 17
28005: PPUSH
28006: LD_STRING D6b-Pow-1
28008: PPUSH
28009: CALL_OW 88
// end ;
28013: PPOPN 2
28015: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
28016: LD_EXP 73
28020: PPUSH
28021: LD_INT 13
28023: PPUSH
28024: CALL_OW 308
28028: PUSH
28029: LD_EXP 69
28033: PUSH
28034: LD_INT 3
28036: EQUAL
28037: AND
28038: IFFALSE 28180
28040: GO 28042
28042: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
28043: LD_EXP 73
28047: PPUSH
28048: LD_INT 250
28050: PPUSH
28051: CALL_OW 234
// DialogueOn ;
28055: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
28059: LD_EXP 17
28063: PPUSH
28064: LD_STRING D6b-Pow-1a
28066: PPUSH
28067: CALL_OW 88
// DialogueOff ;
28071: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28075: LD_EXP 17
28079: PPUSH
28080: LD_INT 22
28082: PUSH
28083: LD_INT 8
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 34
28092: PUSH
28093: LD_INT 29
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 50
28102: PUSH
28103: EMPTY
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: PPUSH
28111: CALL_OW 69
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: CALL_OW 120
// wait ( 0 0$1 ) ;
28124: LD_INT 35
28126: PPUSH
28127: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28131: LD_EXP 17
28135: PPUSH
28136: LD_INT 22
28138: PUSH
28139: LD_INT 8
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 34
28148: PUSH
28149: LD_INT 29
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 50
28158: PUSH
28159: EMPTY
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL_OW 69
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: PPUSH
28176: CALL_OW 120
// end ;
28180: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
28181: LD_INT 22
28183: PUSH
28184: LD_INT 4
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 34
28193: PUSH
28194: LD_INT 29
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PPUSH
28205: CALL_OW 69
28209: IFFALSE 28641
28211: GO 28213
28213: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
28214: LD_ADDR_EXP 75
28218: PUSH
28219: LD_INT 22
28221: PUSH
28222: LD_INT 4
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 34
28231: PUSH
28232: LD_INT 29
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: PUSH
28248: LD_INT 1
28250: ARRAY
28251: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
28252: LD_INT 8
28254: PPUSH
28255: LD_INT 4
28257: PPUSH
28258: LD_INT 1
28260: PPUSH
28261: LD_INT 1
28263: PPUSH
28264: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28268: LD_EXP 75
28272: PPUSH
28273: LD_INT 80
28275: PPUSH
28276: LD_INT 19
28278: PPUSH
28279: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28283: LD_EXP 75
28287: PPUSH
28288: LD_INT 74
28290: PPUSH
28291: LD_INT 15
28293: PPUSH
28294: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28298: LD_EXP 75
28302: PPUSH
28303: LD_INT 72
28305: PPUSH
28306: LD_INT 19
28308: PPUSH
28309: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28313: LD_EXP 75
28317: PPUSH
28318: LD_INT 78
28320: PPUSH
28321: LD_INT 24
28323: PPUSH
28324: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28328: LD_EXP 75
28332: PPUSH
28333: LD_INT 77
28335: PPUSH
28336: LD_INT 20
28338: PPUSH
28339: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28343: LD_EXP 75
28347: PPUSH
28348: LD_INT 74
28350: PPUSH
28351: LD_INT 15
28353: PPUSH
28354: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28358: LD_EXP 75
28362: PPUSH
28363: LD_INT 72
28365: PPUSH
28366: LD_INT 19
28368: PPUSH
28369: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28373: LD_EXP 75
28377: PPUSH
28378: LD_INT 78
28380: PPUSH
28381: LD_INT 24
28383: PPUSH
28384: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28388: LD_EXP 75
28392: PPUSH
28393: LD_INT 77
28395: PPUSH
28396: LD_INT 20
28398: PPUSH
28399: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28403: LD_EXP 75
28407: PPUSH
28408: LD_INT 78
28410: PPUSH
28411: LD_INT 15
28413: PPUSH
28414: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28418: LD_EXP 17
28422: PPUSH
28423: LD_STRING D6b-Pow-1b
28425: PPUSH
28426: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28430: LD_INT 22
28432: PUSH
28433: LD_INT 8
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 21
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 25
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 26
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PPUSH
28476: CALL_OW 69
28480: PUSH
28481: LD_INT 1
28483: ARRAY
28484: PPUSH
28485: LD_STRING D6b-ArSol1-1
28487: PPUSH
28488: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28492: LD_INT 22
28494: PUSH
28495: LD_INT 8
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 21
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 25
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 26
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: PPUSH
28538: CALL_OW 69
28542: PUSH
28543: LD_INT 2
28545: ARRAY
28546: PPUSH
28547: LD_STRING D6b-ArSol2-1
28549: PPUSH
28550: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28554: LD_EXP 17
28558: PPUSH
28559: LD_STRING D6b-Pow-2
28561: PPUSH
28562: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28566: LD_INT 35
28568: PPUSH
28569: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28573: LD_EXP 75
28577: PPUSH
28578: LD_INT 78
28580: PPUSH
28581: LD_INT 15
28583: PPUSH
28584: CALL_OW 297
28588: PUSH
28589: LD_INT 2
28591: LESS
28592: IFFALSE 28566
// wait ( 0 0$1 ) ;
28594: LD_INT 35
28596: PPUSH
28597: CALL_OW 67
// DialogueOn ;
28601: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28605: LD_EXP 17
28609: PPUSH
28610: LD_STRING D6b-Pow-2a
28612: PPUSH
28613: CALL_OW 88
// DialogueOff ;
28617: CALL_OW 7
// centerPowell = 0 ;
28621: LD_ADDR_EXP 74
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28629: LD_EXP 75
28633: PPUSH
28634: LD_INT 105
28636: PPUSH
28637: CALL_OW 115
// end ;
28641: END
// every 0 0$1 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28642: LD_INT 105
28644: PPUSH
28645: CALL_OW 301
28649: PUSH
28650: LD_EXP 69
28654: PUSH
28655: LD_INT 3
28657: EQUAL
28658: AND
28659: IFFALSE 29500
28661: GO 28663
28663: DISABLE
28664: LD_INT 0
28666: PPUSH
28667: PPUSH
28668: PPUSH
28669: PPUSH
// begin wait ( 0 0$2 ) ;
28670: LD_INT 70
28672: PPUSH
28673: CALL_OW 67
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28677: LD_ADDR_VAR 0 2
28681: PUSH
28682: LD_INT 22
28684: PUSH
28685: LD_INT 4
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 26
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: PPUSH
28717: CALL_OW 69
28721: PUSH
28722: LD_EXP 1
28726: PUSH
28727: LD_EXP 3
28731: PUSH
28732: LD_EXP 21
28736: PUSH
28737: LD_EXP 22
28741: PUSH
28742: LD_EXP 23
28746: PUSH
28747: LD_EXP 4
28751: PUSH
28752: LD_EXP 5
28756: PUSH
28757: LD_EXP 6
28761: PUSH
28762: LD_EXP 7
28766: PUSH
28767: LD_EXP 8
28771: PUSH
28772: LD_EXP 9
28776: PUSH
28777: LD_EXP 10
28781: PUSH
28782: LD_EXP 11
28786: PUSH
28787: LD_EXP 12
28791: PUSH
28792: LD_EXP 13
28796: PUSH
28797: LD_EXP 14
28801: PUSH
28802: LD_EXP 15
28806: PUSH
28807: LD_EXP 17
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: DIFF
28832: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28833: LD_INT 49
28835: PPUSH
28836: LD_INT 66
28838: PPUSH
28839: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28843: LD_VAR 0 2
28847: PUSH
28848: LD_INT 1
28850: ARRAY
28851: PPUSH
28852: LD_STRING D6c-Sol3-1
28854: PPUSH
28855: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28859: LD_EXP 1
28863: PPUSH
28864: LD_STRING D6c-JMM-1
28866: PPUSH
28867: CALL_OW 88
// if IsOk ( Cyrus ) then
28871: LD_EXP 7
28875: PPUSH
28876: CALL_OW 302
28880: IFFALSE 28894
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28882: LD_EXP 7
28886: PPUSH
28887: LD_STRING D6c-Cyrus-1
28889: PPUSH
28890: CALL_OW 88
// if IsOk ( Bobby ) then
28894: LD_EXP 6
28898: PPUSH
28899: CALL_OW 302
28903: IFFALSE 28917
// Say ( Bobby , D6c-Bobby-1 ) ;
28905: LD_EXP 6
28909: PPUSH
28910: LD_STRING D6c-Bobby-1
28912: PPUSH
28913: CALL_OW 88
// if IsOk ( Cornel ) then
28917: LD_EXP 12
28921: PPUSH
28922: CALL_OW 302
28926: IFFALSE 28940
// Say ( Cornel , D6c-Corn-1 ) ;
28928: LD_EXP 12
28932: PPUSH
28933: LD_STRING D6c-Corn-1
28935: PPUSH
28936: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28940: LD_VAR 0 2
28944: PUSH
28945: LD_INT 2
28947: ARRAY
28948: PPUSH
28949: LD_STRING D6c-Sol1-1
28951: PPUSH
28952: CALL_OW 88
// if IsOk ( Lisa ) then
28956: LD_EXP 4
28960: PPUSH
28961: CALL_OW 302
28965: IFFALSE 28979
// Say ( Lisa , D6c-Lisa-1 ) ;
28967: LD_EXP 4
28971: PPUSH
28972: LD_STRING D6c-Lisa-1
28974: PPUSH
28975: CALL_OW 88
// if IsOk ( Gary ) then
28979: LD_EXP 13
28983: PPUSH
28984: CALL_OW 302
28988: IFFALSE 29002
// Say ( Gary , D6c-Gary-1 ) ;
28990: LD_EXP 13
28994: PPUSH
28995: LD_STRING D6c-Gary-1
28997: PPUSH
28998: CALL_OW 88
// if IsOK ( Donaldson ) then
29002: LD_EXP 5
29006: PPUSH
29007: CALL_OW 302
29011: IFFALSE 29025
// Say ( Donaldson , D6c-Don-1 ) ;
29013: LD_EXP 5
29017: PPUSH
29018: LD_STRING D6c-Don-1
29020: PPUSH
29021: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 3
29032: ARRAY
29033: PPUSH
29034: LD_STRING D6c-Sol2-1
29036: PPUSH
29037: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
29041: LD_INT 22
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 21
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: PPUSH
29070: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
29074: LD_INT 22
29076: PUSH
29077: LD_INT 4
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 21
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PPUSH
29098: CALL_OW 69
29102: PPUSH
29103: CALL_OW 122
// wait ( 0 0$1 ) ;
29107: LD_INT 35
29109: PPUSH
29110: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 21
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: PUSH
29148: LD_EXP 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: DIFF
29156: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
29157: LD_ADDR_VAR 0 4
29161: PUSH
29162: LD_INT 22
29164: PUSH
29165: LD_INT 4
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 21
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PPUSH
29186: CALL_OW 69
29190: ST_TO_ADDR
// for i := 1 to tmp2 do
29191: LD_ADDR_VAR 0 1
29195: PUSH
29196: DOUBLE
29197: LD_INT 1
29199: DEC
29200: ST_TO_ADDR
29201: LD_VAR 0 4
29205: PUSH
29206: FOR_TO
29207: IFFALSE 29258
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
29209: LD_VAR 0 4
29213: PUSH
29214: LD_VAR 0 1
29218: ARRAY
29219: PPUSH
29220: LD_INT 43
29222: PUSH
29223: LD_VAR 0 1
29227: PLUS
29228: PPUSH
29229: LD_INT 64
29231: PPUSH
29232: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
29236: LD_VAR 0 4
29240: PUSH
29241: LD_VAR 0 1
29245: ARRAY
29246: PPUSH
29247: LD_EXP 1
29251: PPUSH
29252: CALL_OW 179
// end ;
29256: GO 29206
29258: POP
29259: POP
// for i := 1 to tmp1 do
29260: LD_ADDR_VAR 0 1
29264: PUSH
29265: DOUBLE
29266: LD_INT 1
29268: DEC
29269: ST_TO_ADDR
29270: LD_VAR 0 3
29274: PUSH
29275: FOR_TO
29276: IFFALSE 29327
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29278: LD_VAR 0 3
29282: PUSH
29283: LD_VAR 0 1
29287: ARRAY
29288: PPUSH
29289: LD_INT 43
29291: PUSH
29292: LD_VAR 0 1
29296: PLUS
29297: PPUSH
29298: LD_INT 65
29300: PPUSH
29301: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29305: LD_VAR 0 3
29309: PUSH
29310: LD_VAR 0 1
29314: ARRAY
29315: PPUSH
29316: LD_EXP 1
29320: PPUSH
29321: CALL_OW 179
// end ;
29325: GO 29275
29327: POP
29328: POP
// repeat wait ( 0 0$1 ) ;
29329: LD_INT 35
29331: PPUSH
29332: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29336: LD_EXP 1
29340: PPUSH
29341: LD_INT 48
29343: PPUSH
29344: LD_INT 68
29346: PPUSH
29347: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29351: LD_EXP 1
29355: PPUSH
29356: LD_INT 48
29358: PPUSH
29359: LD_INT 68
29361: PPUSH
29362: CALL_OW 297
29366: PUSH
29367: LD_INT 2
29369: LESS
29370: IFFALSE 29329
// AddComTurnXY ( JMM , 47 , 65 ) ;
29372: LD_EXP 1
29376: PPUSH
29377: LD_INT 47
29379: PPUSH
29380: LD_INT 65
29382: PPUSH
29383: CALL_OW 178
// wait ( 0 0$2 ) ;
29387: LD_INT 70
29389: PPUSH
29390: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29394: LD_VAR 0 2
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_STRING D6c-Sol3-2
29405: PPUSH
29406: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29410: LD_EXP 1
29414: PPUSH
29415: LD_STRING D6c-JMM-2
29417: PPUSH
29418: CALL_OW 88
// Video ( false ) ;
29422: LD_INT 0
29424: PPUSH
29425: CALL 6868 0 1
// centerPowell = 0 ;
29429: LD_ADDR_EXP 74
29433: PUSH
29434: LD_INT 0
29436: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29437: LD_INT 22
29439: PUSH
29440: LD_INT 4
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: PPUSH
29452: LD_INT 1
29454: PPUSH
29455: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29459: LD_STRING M2
29461: PPUSH
29462: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29466: LD_INT 4
29468: PPUSH
29469: LD_INT 4
29471: PPUSH
29472: CALL_OW 343
// timerStatus = 1 ;
29476: LD_ADDR_EXP 96
29480: PUSH
29481: LD_INT 1
29483: ST_TO_ADDR
// missionStage = 1 ;
29484: LD_ADDR_EXP 101
29488: PUSH
29489: LD_INT 1
29491: ST_TO_ADDR
// startAttacks = 1 ;
29492: LD_ADDR_EXP 72
29496: PUSH
29497: LD_INT 1
29499: ST_TO_ADDR
// end ;
29500: PPOPN 4
29502: END
// every 0 0$1 trigger centerPowell = 1 do
29503: LD_EXP 74
29507: PUSH
29508: LD_INT 1
29510: EQUAL
29511: IFFALSE 29794
29513: GO 29515
29515: DISABLE
// begin enable ;
29516: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29517: LD_EXP 17
29521: PUSH
29522: LD_EXP 75
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PPUSH
29531: LD_INT 1000
29533: PPUSH
29534: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29538: LD_INT 22
29540: PUSH
29541: LD_INT 4
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 34
29550: PUSH
29551: LD_INT 29
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 33
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: PPUSH
29573: CALL_OW 69
29577: PUSH
29578: LD_INT 0
29580: GREATER
29581: IFFALSE 29634
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29583: LD_INT 22
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 34
29595: PUSH
29596: LD_INT 29
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 33
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: PPUSH
29618: CALL_OW 69
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PPUSH
29627: LD_INT 1000
29629: PPUSH
29630: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29634: LD_INT 22
29636: PUSH
29637: LD_INT 8
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 34
29646: PUSH
29647: LD_INT 29
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 33
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: PPUSH
29669: CALL_OW 69
29673: PUSH
29674: LD_INT 0
29676: GREATER
29677: IFFALSE 29730
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29679: LD_INT 22
29681: PUSH
29682: LD_INT 8
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 34
29691: PUSH
29692: LD_INT 29
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 33
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: PPUSH
29714: CALL_OW 69
29718: PUSH
29719: LD_INT 1
29721: ARRAY
29722: PPUSH
29723: LD_INT 1000
29725: PPUSH
29726: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29730: LD_EXP 73
29734: PPUSH
29735: LD_INT 13
29737: PPUSH
29738: CALL_OW 308
29742: NOT
29743: IFFALSE 29757
// SetLives ( powellVeh , 1000 ) ;
29745: LD_EXP 73
29749: PPUSH
29750: LD_INT 1000
29752: PPUSH
29753: CALL_OW 234
// if not IsInUnit ( Powell ) then
29757: LD_EXP 17
29761: PPUSH
29762: CALL_OW 310
29766: NOT
29767: IFFALSE 29780
// CenterNowOnUnits ( Powell ) else
29769: LD_EXP 17
29773: PPUSH
29774: CALL_OW 87
29778: GO 29794
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29780: LD_EXP 17
29784: PPUSH
29785: CALL_OW 310
29789: PPUSH
29790: CALL_OW 87
// end ;
29794: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29795: LD_EXP 97
29799: PUSH
29800: LD_INT 560
29802: GREATEREQUAL
29803: IFFALSE 30015
29805: GO 29807
29807: DISABLE
// begin DialogueOn ;
29808: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29812: LD_EXP 53
29816: PPUSH
29817: LD_STRING D7-Friend-1
29819: PPUSH
29820: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29824: LD_EXP 1
29828: PPUSH
29829: LD_STRING D7-JMM-1
29831: PPUSH
29832: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29836: LD_EXP 53
29840: PPUSH
29841: LD_STRING D7-Friend-2
29843: PPUSH
29844: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29848: LD_EXP 1
29852: PPUSH
29853: LD_STRING D7-JMM-2
29855: PPUSH
29856: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29860: LD_EXP 53
29864: PPUSH
29865: LD_STRING D7-Friend-3
29867: PPUSH
29868: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29872: LD_EXP 1
29876: PPUSH
29877: LD_STRING D7-JMM-3
29879: PPUSH
29880: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29884: LD_EXP 53
29888: PPUSH
29889: LD_STRING D7-Friend-4
29891: PPUSH
29892: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29896: LD_EXP 1
29900: PPUSH
29901: LD_STRING D7-JMM-4
29903: PPUSH
29904: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29908: LD_EXP 53
29912: PPUSH
29913: LD_STRING D7-Friend-5
29915: PPUSH
29916: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29920: LD_EXP 1
29924: PPUSH
29925: LD_STRING D7-JMM-5
29927: PPUSH
29928: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29932: LD_EXP 53
29936: PPUSH
29937: LD_STRING D7-Friend-6
29939: PPUSH
29940: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29944: LD_EXP 1
29948: PPUSH
29949: LD_STRING D7-JMM-6
29951: PPUSH
29952: CALL_OW 88
// DialogueOff ;
29956: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29960: LD_EXP 36
29964: PPUSH
29965: LD_INT 15
29967: PPUSH
29968: LD_INT 0
29970: PPUSH
29971: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29975: LD_EXP 36
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29987: LD_EXP 36
29991: PPUSH
29992: LD_INT 2
29994: PPUSH
29995: LD_INT 78
29997: PPUSH
29998: LD_INT 12
30000: PPUSH
30001: LD_INT 3
30003: PPUSH
30004: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
30008: LD_STRING Mlegion
30010: PPUSH
30011: CALL_OW 337
// end ;
30015: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
30016: LD_INT 22
30018: PUSH
30019: LD_INT 8
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 21
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 23
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 69
30055: PUSH
30056: LD_INT 6
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: PUSH
30070: LD_OWVAR 67
30074: ARRAY
30075: LESSEQUAL
30076: IFFALSE 30390
30078: GO 30080
30080: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
30081: LD_EXP 30
30085: PPUSH
30086: LD_INT 19
30088: PPUSH
30089: LD_INT 0
30091: PPUSH
30092: CALL_OW 49
// KillUnit ( Kozlov ) ;
30096: LD_EXP 36
30100: PPUSH
30101: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
30105: LD_INT 22
30107: PUSH
30108: LD_INT 8
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 21
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 23
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: PPUSH
30151: CALL_OW 69
30155: PUSH
30156: LD_INT 1
30158: ARRAY
30159: PPUSH
30160: CALL_OW 66
// DialogueOn ;
30164: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
30168: LD_EXP 1
30172: PPUSH
30173: LD_STRING D13-JMM-1
30175: PPUSH
30176: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
30180: LD_EXP 30
30184: PPUSH
30185: LD_STRING D13-Kurt-1
30187: PPUSH
30188: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
30192: LD_EXP 1
30196: PPUSH
30197: LD_STRING D13-JMM-2
30199: PPUSH
30200: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
30204: LD_EXP 30
30208: PPUSH
30209: LD_STRING D13-Kurt-2a
30211: PPUSH
30212: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
30216: LD_EXP 1
30220: PPUSH
30221: LD_STRING D13-JMM-3
30223: PPUSH
30224: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
30228: LD_EXP 30
30232: PPUSH
30233: LD_STRING D13-Kurt-3
30235: PPUSH
30236: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
30240: LD_EXP 1
30244: PPUSH
30245: LD_STRING D13-JMM-4
30247: PPUSH
30248: CALL_OW 88
// DialogueOff ;
30252: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
30256: LD_INT 22
30258: PUSH
30259: LD_INT 8
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 50
30268: PUSH
30269: EMPTY
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PPUSH
30276: CALL_OW 69
30280: PPUSH
30281: LD_INT 1
30283: PPUSH
30284: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30288: LD_INT 22
30290: PUSH
30291: LD_INT 8
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 24
30303: PUSH
30304: LD_INT 250
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: PPUSH
30324: LD_INT 0
30326: PPUSH
30327: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30331: LD_STRING MlegionOut
30333: PPUSH
30334: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30338: LD_INT 8
30340: PPUSH
30341: LD_INT 1
30343: PPUSH
30344: LD_INT 1
30346: PPUSH
30347: LD_INT 1
30349: PPUSH
30350: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30354: LD_EXP 53
30358: PPUSH
30359: LD_INT 30
30361: PPUSH
30362: LD_INT 0
30364: PPUSH
30365: CALL_OW 49
// wait ( 0 0$1 ) ;
30369: LD_INT 35
30371: PPUSH
30372: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30376: LD_EXP 53
30380: PPUSH
30381: LD_EXP 1
30385: PPUSH
30386: CALL_OW 112
// end ;
30390: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30391: LD_INT 1
30393: PPUSH
30394: LD_EXP 53
30398: PPUSH
30399: CALL_OW 292
30403: IFFALSE 30679
30405: GO 30407
30407: DISABLE
30408: LD_INT 0
30410: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30411: LD_EXP 53
30415: PPUSH
30416: CALL_OW 87
// DialogueOn ;
30420: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30424: LD_EXP 1
30428: PPUSH
30429: LD_STRING D14-JMM-1
30431: PPUSH
30432: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30436: LD_EXP 53
30440: PPUSH
30441: LD_STRING D14-Friend-1
30443: PPUSH
30444: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30448: LD_EXP 1
30452: PPUSH
30453: LD_STRING D14-JMM-2
30455: PPUSH
30456: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30460: LD_EXP 53
30464: PPUSH
30465: LD_STRING D14-Friend-2
30467: PPUSH
30468: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30472: LD_EXP 1
30476: PPUSH
30477: LD_STRING D14-JMM-3
30479: PPUSH
30480: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30484: LD_EXP 53
30488: PPUSH
30489: LD_STRING D14-Friend-3
30491: PPUSH
30492: CALL_OW 88
// DialogueOff ;
30496: CALL_OW 7
// dec = Query ( Q14 ) ;
30500: LD_ADDR_VAR 0 1
30504: PUSH
30505: LD_STRING Q14
30507: PPUSH
30508: CALL_OW 97
30512: ST_TO_ADDR
// if dec = 1 then
30513: LD_VAR 0 1
30517: PUSH
30518: LD_INT 1
30520: EQUAL
30521: IFFALSE 30555
// begin DialogueOn ;
30523: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30527: LD_EXP 1
30531: PPUSH
30532: LD_STRING D14a-JMM-1
30534: PPUSH
30535: CALL_OW 88
// DialogueOff ;
30539: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30543: LD_EXP 53
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 235
// end ; if dec = 2 then
30555: LD_VAR 0 1
30559: PUSH
30560: LD_INT 2
30562: EQUAL
30563: IFFALSE 30597
// begin DialogueOn ;
30565: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30569: LD_EXP 1
30573: PPUSH
30574: LD_STRING D14b-JMM-1
30576: PPUSH
30577: CALL_OW 88
// DialogueOff ;
30581: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30585: LD_EXP 53
30589: PPUSH
30590: LD_INT 18
30592: PPUSH
30593: CALL_OW 113
// end ; if dec = 3 then
30597: LD_VAR 0 1
30601: PUSH
30602: LD_INT 3
30604: EQUAL
30605: IFFALSE 30679
// begin DialogueOn ;
30607: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30611: LD_EXP 1
30615: PPUSH
30616: LD_STRING D14c-JMM-1
30618: PPUSH
30619: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30623: LD_EXP 53
30627: PPUSH
30628: LD_STRING D14c-Friend-1
30630: PPUSH
30631: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30635: LD_EXP 1
30639: PPUSH
30640: LD_STRING D14c-JMM-2
30642: PPUSH
30643: CALL_OW 88
// DialogueOff ;
30647: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30651: LD_INT 8
30653: PPUSH
30654: LD_INT 1
30656: PPUSH
30657: LD_INT 2
30659: PPUSH
30660: LD_INT 1
30662: PPUSH
30663: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30667: LD_EXP 53
30671: PPUSH
30672: LD_INT 18
30674: PPUSH
30675: CALL_OW 113
// end ; end ;
30679: PPOPN 1
30681: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30682: LD_EXP 53
30686: PPUSH
30687: LD_INT 18
30689: PPUSH
30690: CALL_OW 308
30694: PUSH
30695: LD_EXP 53
30699: PPUSH
30700: CALL_OW 255
30704: PUSH
30705: LD_INT 8
30707: EQUAL
30708: AND
30709: IFFALSE 30723
30711: GO 30713
30713: DISABLE
// RemoveUnit ( LegionFriend ) ;
30714: LD_EXP 53
30718: PPUSH
30719: CALL_OW 64
30723: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30724: LD_EXP 97
30728: PUSH
30729: LD_INT 31570
30731: GREATEREQUAL
30732: IFFALSE 30808
30734: GO 30736
30736: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30737: LD_EXP 81
30741: PUSH
30742: LD_INT 1
30744: EQUAL
30745: PUSH
30746: LD_EXP 79
30750: PUSH
30751: EMPTY
30752: EQUAL
30753: AND
30754: IFFALSE 30760
// PrepareSupportFromKappa ;
30756: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30760: LD_EXP 81
30764: PUSH
30765: LD_INT 0
30767: EQUAL
30768: PUSH
30769: LD_EXP 82
30773: PUSH
30774: LD_INT 1
30776: EQUAL
30777: AND
30778: IFFALSE 30784
// PrepareAttackFromKappa ;
30780: CALL 5252 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30784: LD_EXP 81
30788: PUSH
30789: LD_INT 0
30791: EQUAL
30792: PUSH
30793: LD_EXP 82
30797: PUSH
30798: LD_INT 0
30800: EQUAL
30801: AND
30802: IFFALSE 30808
// PrepareAttackFromKappa ;
30804: CALL 5252 0 0
// end ;
30808: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30809: LD_INT 1
30811: PPUSH
30812: LD_EXP 35
30816: PPUSH
30817: CALL_OW 292
30821: IFFALSE 31089
30823: GO 30825
30825: DISABLE
// begin missionStage = 2 ;
30826: LD_ADDR_EXP 101
30830: PUSH
30831: LD_INT 2
30833: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30834: LD_EXP 35
30838: PPUSH
30839: CALL_OW 87
// DialogueOn ;
30843: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30847: LD_EXP 1
30851: PPUSH
30852: LD_STRING D10nB-JMM-1
30854: PPUSH
30855: CALL_OW 88
// if BurlakStatus = 1 then
30859: LD_EXP 76
30863: PUSH
30864: LD_INT 1
30866: EQUAL
30867: IFFALSE 30881
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30869: LD_EXP 34
30873: PPUSH
30874: LD_STRING D10nB-Vse-1a
30876: PPUSH
30877: CALL_OW 88
// if BurlakStatus = 0 then
30881: LD_EXP 76
30885: PUSH
30886: LD_INT 0
30888: EQUAL
30889: IFFALSE 30903
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30891: LD_EXP 34
30895: PPUSH
30896: LD_STRING D10nB-Vse-1
30898: PPUSH
30899: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30903: LD_EXP 1
30907: PPUSH
30908: LD_STRING D10nB-JMM-2
30910: PPUSH
30911: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30915: LD_EXP 81
30919: PUSH
30920: LD_EXP 82
30924: PUSH
30925: LD_INT 1
30927: EQUAL
30928: AND
30929: IFFALSE 30943
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30931: LD_EXP 34
30935: PPUSH
30936: LD_STRING D10nB-Vse-5
30938: PPUSH
30939: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30943: LD_EXP 81
30947: PUSH
30948: LD_EXP 82
30952: PUSH
30953: LD_INT 0
30955: EQUAL
30956: AND
30957: IFFALSE 31085
// begin if JMMGirl = 1 then
30959: LD_EXP 80
30963: PUSH
30964: LD_INT 1
30966: EQUAL
30967: IFFALSE 31017
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30969: LD_EXP 34
30973: PPUSH
30974: LD_STRING D10nB-Vse-2
30976: PPUSH
30977: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30981: LD_EXP 1
30985: PPUSH
30986: LD_STRING D10nB-JMM-3
30988: PPUSH
30989: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30993: LD_EXP 34
30997: PPUSH
30998: LD_STRING D10nB-Vse-3
31000: PPUSH
31001: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
31005: LD_EXP 1
31009: PPUSH
31010: LD_STRING D10nB-JMM-4
31012: PPUSH
31013: CALL_OW 88
// end ; if JMMGirl = 2 then
31017: LD_EXP 80
31021: PUSH
31022: LD_INT 2
31024: EQUAL
31025: IFFALSE 31051
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
31027: LD_EXP 34
31031: PPUSH
31032: LD_STRING D10nB-Vse-4
31034: PPUSH
31035: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
31039: LD_EXP 1
31043: PPUSH
31044: LD_STRING D10nB-JMM-5
31046: PPUSH
31047: CALL_OW 88
// end ; if JMMGirl = 3 then
31051: LD_EXP 80
31055: PUSH
31056: LD_INT 3
31058: EQUAL
31059: IFFALSE 31085
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
31061: LD_EXP 34
31065: PPUSH
31066: LD_STRING D10nB-Vse-5
31068: PPUSH
31069: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
31073: LD_EXP 1
31077: PPUSH
31078: LD_STRING D10nB-JMM-6
31080: PPUSH
31081: CALL_OW 88
// end ; end ; DialogueOff ;
31085: CALL_OW 7
// end ;
31089: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
31090: LD_EXP 97
31094: PUSH
31095: LD_INT 63070
31097: GREATEREQUAL
31098: IFFALSE 31376
31100: GO 31102
31102: DISABLE
// begin PrepareOmegaTeam ;
31103: CALL 2789 0 0
// missionStage = 3 ;
31107: LD_ADDR_EXP 101
31111: PUSH
31112: LD_INT 3
31114: ST_TO_ADDR
// DialogueOn ;
31115: CALL_OW 6
// if StevensStatus = 1 then
31119: LD_EXP 77
31123: PUSH
31124: LD_INT 1
31126: EQUAL
31127: IFFALSE 31239
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
31129: LD_EXP 3
31133: PPUSH
31134: CALL_OW 310
31138: PPUSH
31139: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
31143: LD_EXP 3
31147: PPUSH
31148: LD_STRING D8-Huck-1
31150: PPUSH
31151: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
31155: LD_EXP 1
31159: PPUSH
31160: LD_STRING D8-JMM-1
31162: PPUSH
31163: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
31167: LD_EXP 3
31171: PPUSH
31172: LD_STRING D8-Huck-2
31174: PPUSH
31175: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
31179: LD_EXP 1
31183: PPUSH
31184: LD_STRING D8-JMM-2
31186: PPUSH
31187: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
31191: LD_EXP 3
31195: PPUSH
31196: LD_STRING D8-Huck-3
31198: PPUSH
31199: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31203: LD_EXP 1
31207: PPUSH
31208: LD_STRING D8-JMM-3
31210: PPUSH
31211: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
31215: LD_EXP 3
31219: PPUSH
31220: LD_STRING D8-Huck-4
31222: PPUSH
31223: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31227: LD_EXP 1
31231: PPUSH
31232: LD_STRING D8-JMM-4
31234: PPUSH
31235: CALL_OW 88
// end ; if StevensStatus = 0 then
31239: LD_EXP 77
31243: PUSH
31244: LD_INT 0
31246: EQUAL
31247: IFFALSE 31359
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
31249: LD_EXP 21
31253: PPUSH
31254: CALL_OW 310
31258: PPUSH
31259: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
31263: LD_EXP 21
31267: PPUSH
31268: LD_STRING D8-Huck-1
31270: PPUSH
31271: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
31275: LD_EXP 1
31279: PPUSH
31280: LD_STRING D8-JMM-1a
31282: PPUSH
31283: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
31287: LD_EXP 21
31291: PPUSH
31292: LD_STRING D8-Huck-2
31294: PPUSH
31295: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
31299: LD_EXP 1
31303: PPUSH
31304: LD_STRING D8-JMM-2
31306: PPUSH
31307: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
31311: LD_EXP 21
31315: PPUSH
31316: LD_STRING D8-Huck-3
31318: PPUSH
31319: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31323: LD_EXP 1
31327: PPUSH
31328: LD_STRING D8-JMM-3
31330: PPUSH
31331: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
31335: LD_EXP 21
31339: PPUSH
31340: LD_STRING D8-Huck-4
31342: PPUSH
31343: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31347: LD_EXP 1
31351: PPUSH
31352: LD_STRING D8-JMM-4
31354: PPUSH
31355: CALL_OW 88
// end ; DialogueOff ;
31359: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31363: LD_INT 25
31365: PPUSH
31366: LD_INT 1
31368: PPUSH
31369: LD_INT 1
31371: PPUSH
31372: CALL_OW 322
// end ;
31376: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31377: LD_EXP 97
31381: PUSH
31382: LD_INT 73570
31384: GREATEREQUAL
31385: IFFALSE 31735
31387: GO 31389
31389: DISABLE
31390: LD_INT 0
31392: PPUSH
// begin missionStage = 4 ;
31393: LD_ADDR_EXP 101
31397: PUSH
31398: LD_INT 4
31400: ST_TO_ADDR
// DialogueOn ;
31401: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31405: LD_EXP 28
31409: PPUSH
31410: LD_STRING D9-Roth-1
31412: PPUSH
31413: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31417: LD_EXP 1
31421: PPUSH
31422: LD_STRING D9-JMM-1
31424: PPUSH
31425: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31429: LD_EXP 28
31433: PPUSH
31434: LD_STRING D9-Roth-2
31436: PPUSH
31437: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31441: LD_EXP 28
31445: PPUSH
31446: LD_STRING D9-Roth-2a
31448: PPUSH
31449: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31453: LD_EXP 26
31457: PPUSH
31458: LD_STRING D9-Pla-2
31460: PPUSH
31461: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31465: LD_EXP 28
31469: PPUSH
31470: LD_STRING D9-Roth-3
31472: PPUSH
31473: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31477: LD_EXP 26
31481: PPUSH
31482: LD_STRING D9-Pla-3
31484: PPUSH
31485: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31489: LD_EXP 28
31493: PPUSH
31494: LD_STRING D9-Roth-4
31496: PPUSH
31497: CALL_OW 94
// dec = Query ( Q9 ) ;
31501: LD_ADDR_VAR 0 1
31505: PUSH
31506: LD_STRING Q9
31508: PPUSH
31509: CALL_OW 97
31513: ST_TO_ADDR
// if dec = 1 then
31514: LD_VAR 0 1
31518: PUSH
31519: LD_INT 1
31521: EQUAL
31522: IFFALSE 31536
// SayRadio ( Roth , D9a-Roth-1 ) ;
31524: LD_EXP 28
31528: PPUSH
31529: LD_STRING D9a-Roth-1
31531: PPUSH
31532: CALL_OW 94
// if dec = 2 then
31536: LD_VAR 0 1
31540: PUSH
31541: LD_INT 2
31543: EQUAL
31544: IFFALSE 31570
// begin Say ( JMM , D9b-JMM-1 ) ;
31546: LD_EXP 1
31550: PPUSH
31551: LD_STRING D9b-JMM-1
31553: PPUSH
31554: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31558: LD_EXP 28
31562: PPUSH
31563: LD_STRING D9b-Roth-1
31565: PPUSH
31566: CALL_OW 94
// end ; if dec = 3 then
31570: LD_VAR 0 1
31574: PUSH
31575: LD_INT 3
31577: EQUAL
31578: IFFALSE 31640
// begin Say ( JMM , D9c-JMM-1 ) ;
31580: LD_EXP 1
31584: PPUSH
31585: LD_STRING D9c-JMM-1
31587: PPUSH
31588: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31592: LD_EXP 28
31596: PPUSH
31597: LD_STRING D9c-Roth-1
31599: PPUSH
31600: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31604: LD_EXP 1
31608: PPUSH
31609: LD_STRING D9c-JMM-2
31611: PPUSH
31612: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31616: LD_EXP 28
31620: PPUSH
31621: LD_STRING D9c-Roth-2
31623: PPUSH
31624: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31628: LD_EXP 1
31632: PPUSH
31633: LD_STRING D9c-JMM-3
31635: PPUSH
31636: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31640: LD_EXP 28
31644: PPUSH
31645: LD_STRING D9c-Roth-3
31647: PPUSH
31648: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31652: LD_EXP 28
31656: PPUSH
31657: LD_STRING D9cont-Roth-1
31659: PPUSH
31660: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31664: LD_EXP 1
31668: PPUSH
31669: LD_STRING D9cont-JMM-1
31671: PPUSH
31672: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31676: LD_EXP 28
31680: PPUSH
31681: LD_STRING D9cont-Roth-2
31683: PPUSH
31684: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31688: LD_EXP 1
31692: PPUSH
31693: LD_STRING D9cont-JMM-2
31695: PPUSH
31696: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31700: LD_EXP 28
31704: PPUSH
31705: LD_STRING D9cont-Roth-3
31707: PPUSH
31708: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31712: LD_EXP 1
31716: PPUSH
31717: LD_STRING D9cont-JMM-3
31719: PPUSH
31720: CALL_OW 88
// DialogueOff ;
31724: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31728: LD_STRING M3
31730: PPUSH
31731: CALL_OW 337
// end ;
31735: PPOPN 1
31737: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31738: LD_INT 22
31740: PUSH
31741: LD_INT 7
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 21
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: PUSH
31767: LD_INT 20
31769: PUSH
31770: LD_INT 18
31772: PUSH
31773: LD_INT 15
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: PUSH
31781: LD_OWVAR 67
31785: ARRAY
31786: LESSEQUAL
31787: IFFALSE 32273
31789: GO 31791
31791: DISABLE
31792: LD_INT 0
31794: PPUSH
31795: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31796: LD_ADDR_VAR 0 1
31800: PUSH
31801: LD_INT 22
31803: PUSH
31804: LD_INT 7
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 21
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 23
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 24
31833: PUSH
31834: LD_INT 900
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: PPUSH
31847: CALL_OW 69
31851: PUSH
31852: FOR_IN
31853: IFFALSE 31884
// if GetSex ( i ) = sex_male then
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 258
31864: PUSH
31865: LD_INT 1
31867: EQUAL
31868: IFFALSE 31882
// begin tmp = i ;
31870: LD_ADDR_VAR 0 2
31874: PUSH
31875: LD_VAR 0 1
31879: ST_TO_ADDR
// break ;
31880: GO 31884
// end ;
31882: GO 31852
31884: POP
31885: POP
// if tmp = 0 then
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 0
31893: EQUAL
31894: IFFALSE 31948
// begin uc_side = 7 ;
31896: LD_ADDR_OWVAR 20
31900: PUSH
31901: LD_INT 7
31903: ST_TO_ADDR
// uc_nation = 3 ;
31904: LD_ADDR_OWVAR 21
31908: PUSH
31909: LD_INT 3
31911: ST_TO_ADDR
// hc_name =  ;
31912: LD_ADDR_OWVAR 26
31916: PUSH
31917: LD_STRING 
31919: ST_TO_ADDR
// hc_gallery =  ;
31920: LD_ADDR_OWVAR 33
31924: PUSH
31925: LD_STRING 
31927: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31928: LD_INT 1
31930: PPUSH
31931: LD_INT 10
31933: PPUSH
31934: CALL_OW 381
// tmp = CreateHuman ;
31938: LD_ADDR_VAR 0 2
31942: PUSH
31943: CALL_OW 44
31947: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31948: LD_ADDR_EXP 85
31952: PUSH
31953: LD_INT 0
31955: ST_TO_ADDR
// AllianceEscape = 1 ;
31956: LD_ADDR_EXP 91
31960: PUSH
31961: LD_INT 1
31963: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31964: LD_INT 7
31966: PPUSH
31967: LD_INT 1
31969: PPUSH
31970: LD_INT 1
31972: PPUSH
31973: LD_INT 1
31975: PPUSH
31976: CALL_OW 80
// DialogueOn ;
31980: CALL_OW 6
// if IsOK ( Roth ) then
31984: LD_EXP 28
31988: PPUSH
31989: CALL_OW 302
31993: IFFALSE 32007
// Say ( JMM , DAb-JMM-1 ) ;
31995: LD_EXP 1
31999: PPUSH
32000: LD_STRING DAb-JMM-1
32002: PPUSH
32003: CALL_OW 88
// if IsOK ( Roth ) then
32007: LD_EXP 28
32011: PPUSH
32012: CALL_OW 302
32016: IFFALSE 32032
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
32018: LD_EXP 28
32022: PPUSH
32023: LD_STRING DSurrenderAlliance-Roth-1
32025: PPUSH
32026: CALL_OW 88
32030: GO 32044
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_STRING DSurrenderAlliance-Sci1-1
32039: PPUSH
32040: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
32044: LD_INT 23
32046: PPUSH
32047: LD_INT 22
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PPUSH
32057: CALL_OW 70
32061: PUSH
32062: LD_INT 1
32064: EQUAL
32065: IFFALSE 32079
// Say ( JMM , DAb-JMM-1a ) ;
32067: LD_EXP 1
32071: PPUSH
32072: LD_STRING DAb-JMM-1a
32074: PPUSH
32075: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
32079: LD_INT 23
32081: PPUSH
32082: LD_INT 22
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PPUSH
32092: CALL_OW 70
32096: PUSH
32097: LD_INT 1
32099: GREATER
32100: IFFALSE 32114
// Say ( JMM , DAb-JMM-1b ) ;
32102: LD_EXP 1
32106: PPUSH
32107: LD_STRING DAb-JMM-1b
32109: PPUSH
32110: CALL_OW 88
// DialogueOff ;
32114: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
32118: LD_INT 23
32120: PPUSH
32121: LD_INT 22
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PPUSH
32131: CALL_OW 70
32135: PUSH
32136: LD_INT 0
32138: GREATER
32139: IFFALSE 32166
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
32141: LD_INT 23
32143: PPUSH
32144: LD_INT 22
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PPUSH
32154: CALL_OW 70
32158: PPUSH
32159: LD_INT 1
32161: PPUSH
32162: CALL_OW 235
// if IsDying ( Roth ) then
32166: LD_EXP 28
32170: PPUSH
32171: CALL_OW 303
32175: IFFALSE 32197
// begin RothStatus = 0 ;
32177: LD_ADDR_EXP 92
32181: PUSH
32182: LD_INT 0
32184: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
32185: LD_EXP 28
32189: PPUSH
32190: LD_INT 0
32192: PPUSH
32193: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
32197: LD_INT 22
32199: PUSH
32200: LD_INT 7
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 21
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PPUSH
32221: CALL_OW 69
32225: PPUSH
32226: CALL_OW 122
// wait ( 0 0$1 ) ;
32230: LD_INT 35
32232: PPUSH
32233: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
32237: LD_INT 22
32239: PUSH
32240: LD_INT 7
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 21
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PPUSH
32261: CALL_OW 69
32265: PPUSH
32266: LD_INT 28
32268: PPUSH
32269: CALL_OW 173
// end ;
32273: PPOPN 2
32275: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32276: LD_EXP 91
32280: PUSH
32281: LD_INT 1
32283: EQUAL
32284: PUSH
32285: LD_INT 28
32287: PPUSH
32288: LD_INT 22
32290: PUSH
32291: LD_INT 7
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 21
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 70
32316: AND
32317: IFFALSE 32379
32319: GO 32321
32321: DISABLE
32322: LD_INT 0
32324: PPUSH
// begin enable ;
32325: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32326: LD_ADDR_VAR 0 1
32330: PUSH
32331: LD_INT 28
32333: PPUSH
32334: LD_INT 22
32336: PUSH
32337: LD_INT 7
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 21
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PPUSH
32358: CALL_OW 70
32362: PUSH
32363: FOR_IN
32364: IFFALSE 32377
// RemoveUnit ( i ) ;
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 64
32375: GO 32363
32377: POP
32378: POP
// end ;
32379: PPOPN 1
32381: END
// every 0 0$15 trigger ( FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 ) and IsOK ( Roth ) and IsOk ( AllLabR1 ) and IsOk ( AllLabR2 ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32382: LD_INT 33
32384: PPUSH
32385: LD_INT 22
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 21
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PPUSH
32409: CALL_OW 70
32413: PUSH
32414: LD_INT 0
32416: GREATER
32417: PUSH
32418: LD_INT 33
32420: PPUSH
32421: LD_INT 22
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 21
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 33
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: LD_INT 58
32456: PUSH
32457: EMPTY
32458: LIST
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 70
32474: PUSH
32475: LD_INT 0
32477: GREATER
32478: OR
32479: PUSH
32480: LD_EXP 28
32484: PPUSH
32485: CALL_OW 302
32489: AND
32490: PUSH
32491: LD_INT 39
32493: PPUSH
32494: CALL_OW 302
32498: AND
32499: PUSH
32500: LD_INT 133
32502: PPUSH
32503: CALL_OW 302
32507: AND
32508: PUSH
32509: LD_EXP 85
32513: PUSH
32514: LD_INT 1
32516: EQUAL
32517: AND
32518: IFFALSE 34917
32520: GO 32522
32522: DISABLE
32523: LD_INT 0
32525: PPUSH
32526: PPUSH
32527: PPUSH
// begin enable ;
32528: ENABLE
// if not Prob ( [ 50 , 60 , 70 ] [ Difficulty ] ) then
32529: LD_INT 50
32531: PUSH
32532: LD_INT 60
32534: PUSH
32535: LD_INT 70
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: PUSH
32543: LD_OWVAR 67
32547: ARRAY
32548: PPUSH
32549: CALL_OW 13
32553: NOT
32554: IFFALSE 32558
// exit ;
32556: GO 34917
// tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32558: LD_ADDR_VAR 0 1
32562: PUSH
32563: LD_INT 33
32565: PPUSH
32566: LD_INT 22
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: LD_INT 21
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 33
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PPUSH
32608: CALL_OW 70
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32617: LD_ADDR_VAR 0 2
32621: PUSH
32622: LD_EXP 1
32626: PUSH
32627: LD_EXP 2
32631: PUSH
32632: LD_EXP 3
32636: PUSH
32637: LD_EXP 21
32641: PUSH
32642: LD_EXP 4
32646: PUSH
32647: LD_EXP 5
32651: PUSH
32652: LD_EXP 6
32656: PUSH
32657: LD_EXP 7
32661: PUSH
32662: LD_EXP 8
32666: PUSH
32667: LD_EXP 9
32671: PUSH
32672: LD_EXP 10
32676: PUSH
32677: LD_EXP 11
32681: PUSH
32682: LD_EXP 12
32686: PUSH
32687: LD_EXP 13
32691: PUSH
32692: LD_EXP 14
32696: PUSH
32697: LD_EXP 15
32701: PUSH
32702: LD_EXP 16
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// InGameOn ;
32726: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32730: LD_INT 1
32732: PPUSH
32733: LD_INT 7
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: LD_INT 1
32741: PPUSH
32742: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 247
32764: PUSH
32765: LD_INT 2
32767: EQUAL
32768: IFFALSE 32789
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32770: LD_ADDR_VAR 0 1
32774: PUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 313
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32789: LD_VAR 0 1
32793: PPUSH
32794: CALL_OW 121
// wait ( 0 0$1 ) ;
32798: LD_INT 35
32800: PPUSH
32801: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32805: LD_VAR 0 1
32809: PPUSH
32810: LD_INT 248
32812: PPUSH
32813: LD_INT 186
32815: PPUSH
32816: LD_INT 4
32818: PPUSH
32819: LD_INT 1
32821: PPUSH
32822: CALL_OW 483
// wait ( 0 0$2 ) ;
32826: LD_INT 70
32828: PPUSH
32829: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32842: LD_VAR 0 1
32846: PPUSH
32847: LD_EXP 28
32851: PPUSH
32852: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32856: LD_EXP 28
32860: PUSH
32861: LD_EXP 48
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PPUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 119
// if tpUnit = JMM then
32879: LD_VAR 0 1
32883: PUSH
32884: LD_EXP 1
32888: EQUAL
32889: IFFALSE 32903
// Say ( JMM , DA1-JMM-1 ) ;
32891: LD_EXP 1
32895: PPUSH
32896: LD_STRING DA1-JMM-1
32898: PPUSH
32899: CALL_OW 88
// if tpUnit = Joan then
32903: LD_VAR 0 1
32907: PUSH
32908: LD_EXP 2
32912: EQUAL
32913: IFFALSE 32927
// Say ( Joan , DA1-Joan-1 ) ;
32915: LD_EXP 2
32919: PPUSH
32920: LD_STRING DA1-Joan-1
32922: PPUSH
32923: CALL_OW 88
// if tpUnit = Lisa then
32927: LD_VAR 0 1
32931: PUSH
32932: LD_EXP 4
32936: EQUAL
32937: IFFALSE 32951
// Say ( Lisa , DA1-Lisa-1 ) ;
32939: LD_EXP 4
32943: PPUSH
32944: LD_STRING DA1-Lisa-1
32946: PPUSH
32947: CALL_OW 88
// if tpUnit = Donaldson then
32951: LD_VAR 0 1
32955: PUSH
32956: LD_EXP 5
32960: EQUAL
32961: IFFALSE 32975
// Say ( Donaldson , DA1-Don-1 ) ;
32963: LD_EXP 5
32967: PPUSH
32968: LD_STRING DA1-Don-1
32970: PPUSH
32971: CALL_OW 88
// if tpUnit = Cornel then
32975: LD_VAR 0 1
32979: PUSH
32980: LD_EXP 12
32984: EQUAL
32985: IFFALSE 32999
// Say ( Cornel , DA1-Corn-1 ) ;
32987: LD_EXP 12
32991: PPUSH
32992: LD_STRING DA1-Corn-1
32994: PPUSH
32995: CALL_OW 88
// if tpUnit = Denis then
32999: LD_VAR 0 1
33003: PUSH
33004: LD_EXP 8
33008: EQUAL
33009: IFFALSE 33023
// Say ( Denis , DA1-Den-1 ) ;
33011: LD_EXP 8
33015: PPUSH
33016: LD_STRING DA1-Den-1
33018: PPUSH
33019: CALL_OW 88
// if tpUnit = Bobby then
33023: LD_VAR 0 1
33027: PUSH
33028: LD_EXP 6
33032: EQUAL
33033: IFFALSE 33047
// Say ( Bobby , DA1-Bobby-1 ) ;
33035: LD_EXP 6
33039: PPUSH
33040: LD_STRING DA1-Bobby-1
33042: PPUSH
33043: CALL_OW 88
// if tpUnit = Gladstone then
33047: LD_VAR 0 1
33051: PUSH
33052: LD_EXP 10
33056: EQUAL
33057: IFFALSE 33071
// Say ( Gladstone , DA1-Glad-1 ) ;
33059: LD_EXP 10
33063: PPUSH
33064: LD_STRING DA1-Glad-1
33066: PPUSH
33067: CALL_OW 88
// if tpUnit = Cyrus then
33071: LD_VAR 0 1
33075: PUSH
33076: LD_EXP 7
33080: EQUAL
33081: IFFALSE 33095
// Say ( Cyrus , DA1-Cyrus-1 ) ;
33083: LD_EXP 7
33087: PPUSH
33088: LD_STRING DA1-Cyrus-1
33090: PPUSH
33091: CALL_OW 88
// if tpUnit = Stevens then
33095: LD_VAR 0 1
33099: PUSH
33100: LD_EXP 3
33104: EQUAL
33105: IFFALSE 33119
// Say ( Stevens , DA1-Huck-1 ) ;
33107: LD_EXP 3
33111: PPUSH
33112: LD_STRING DA1-Huck-1
33114: PPUSH
33115: CALL_OW 88
// if tpUnit = Baker then
33119: LD_VAR 0 1
33123: PUSH
33124: LD_EXP 21
33128: EQUAL
33129: IFFALSE 33143
// Say ( Baker , DA1-Huck-1 ) ;
33131: LD_EXP 21
33135: PPUSH
33136: LD_STRING DA1-Huck-1
33138: PPUSH
33139: CALL_OW 88
// if tpUnit = Brown then
33143: LD_VAR 0 1
33147: PUSH
33148: LD_EXP 9
33152: EQUAL
33153: IFFALSE 33167
// Say ( Brown , DA1-Brown-1 ) ;
33155: LD_EXP 9
33159: PPUSH
33160: LD_STRING DA1-Brown-1
33162: PPUSH
33163: CALL_OW 88
// if tpUnit = Gary then
33167: LD_VAR 0 1
33171: PUSH
33172: LD_EXP 13
33176: EQUAL
33177: IFFALSE 33191
// Say ( Gary , DA1-Gary-1 ) ;
33179: LD_EXP 13
33183: PPUSH
33184: LD_STRING DA1-Gary-1
33186: PPUSH
33187: CALL_OW 88
// if tpUnit = Connie then
33191: LD_VAR 0 1
33195: PUSH
33196: LD_EXP 16
33200: EQUAL
33201: IFFALSE 33215
// Say ( Connie , DA1-Con-1 ) ;
33203: LD_EXP 16
33207: PPUSH
33208: LD_STRING DA1-Con-1
33210: PPUSH
33211: CALL_OW 88
// if tpUnit = Kurt then
33215: LD_VAR 0 1
33219: PUSH
33220: LD_EXP 30
33224: EQUAL
33225: IFFALSE 33239
// Say ( Kurt , DA1-Kurt-1 ) ;
33227: LD_EXP 30
33231: PPUSH
33232: LD_STRING DA1-Kurt-1
33234: PPUSH
33235: CALL_OW 88
// if tpUnit = Kikuchi then
33239: LD_VAR 0 1
33243: PUSH
33244: LD_EXP 15
33248: EQUAL
33249: IFFALSE 33263
// Say ( Kikuchi , DA1-Yam-1 ) ;
33251: LD_EXP 15
33255: PPUSH
33256: LD_STRING DA1-Yam-1
33258: PPUSH
33259: CALL_OW 88
// if tpUnit = Frank then
33263: LD_VAR 0 1
33267: PUSH
33268: LD_EXP 14
33272: EQUAL
33273: IFFALSE 33287
// Say ( Frank , DA1-Frank-1 ) ;
33275: LD_EXP 14
33279: PPUSH
33280: LD_STRING DA1-Frank-1
33282: PPUSH
33283: CALL_OW 88
// if not tpUnit in heroes then
33287: LD_VAR 0 1
33291: PUSH
33292: LD_VAR 0 2
33296: IN
33297: NOT
33298: IFFALSE 33354
// begin if GetSex ( tpUnit ) = 1 then
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 258
33309: PUSH
33310: LD_INT 1
33312: EQUAL
33313: IFFALSE 33327
// Say ( tpUnit , DA1-Sol1-1 ) ;
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_STRING DA1-Sol1-1
33322: PPUSH
33323: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 258
33336: PUSH
33337: LD_INT 2
33339: EQUAL
33340: IFFALSE 33354
// Say ( tpUnit , DA1-FSol1-1 ) ;
33342: LD_VAR 0 1
33346: PPUSH
33347: LD_STRING DA1-FSol1-1
33349: PPUSH
33350: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33354: LD_EXP 28
33358: PPUSH
33359: LD_STRING DA-Roth-1
33361: PPUSH
33362: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33366: LD_EXP 48
33370: PPUSH
33371: LD_STRING DA-Sim-1
33373: PPUSH
33374: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33378: LD_EXP 28
33382: PPUSH
33383: LD_STRING DA-Roth-2
33385: PPUSH
33386: CALL_OW 88
// if tpUnit = JMM then
33390: LD_VAR 0 1
33394: PUSH
33395: LD_EXP 1
33399: EQUAL
33400: IFFALSE 33433
// begin Say ( JMM , DA1-JMM-1a ) ;
33402: LD_EXP 1
33406: PPUSH
33407: LD_STRING DA1-JMM-1a
33409: PPUSH
33410: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33414: LD_EXP 28
33418: PPUSH
33419: LD_STRING DA-Roth-3a
33421: PPUSH
33422: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33426: LD_STRING JMMCaptured
33428: PPUSH
33429: CALL_OW 104
// end ; if tpUnit = Joan then
33433: LD_VAR 0 1
33437: PUSH
33438: LD_EXP 2
33442: EQUAL
33443: IFFALSE 33505
// begin Say ( Joan , DA1-Joan-1a ) ;
33445: LD_EXP 2
33449: PPUSH
33450: LD_STRING DA1-Joan-1a
33452: PPUSH
33453: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33457: LD_EXP 28
33461: PPUSH
33462: LD_STRING DA-Roth-3a
33464: PPUSH
33465: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33469: LD_EXP 2
33473: PPUSH
33474: LD_INT 4
33476: PPUSH
33477: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33481: LD_EXP 2
33485: PPUSH
33486: LD_INT 257
33488: PPUSH
33489: LD_INT 198
33491: PPUSH
33492: CALL_OW 111
// AddComHold ( Joan ) ;
33496: LD_EXP 2
33500: PPUSH
33501: CALL_OW 200
// end ; if tpUnit = Donaldson then
33505: LD_VAR 0 1
33509: PUSH
33510: LD_EXP 5
33514: EQUAL
33515: IFFALSE 33568
// begin Say ( Donaldson , DA1-Don-1a ) ;
33517: LD_EXP 5
33521: PPUSH
33522: LD_STRING DA1-Don-1a
33524: PPUSH
33525: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33529: LD_EXP 28
33533: PPUSH
33534: LD_STRING DA-Roth-3
33536: PPUSH
33537: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33541: LD_EXP 5
33545: PPUSH
33546: LD_INT 7
33548: PPUSH
33549: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33553: LD_EXP 5
33557: PPUSH
33558: LD_INT 240
33560: PPUSH
33561: LD_INT 188
33563: PPUSH
33564: CALL_OW 111
// end ; if tpUnit = Cornel then
33568: LD_VAR 0 1
33572: PUSH
33573: LD_EXP 12
33577: EQUAL
33578: IFFALSE 33640
// begin Say ( Cornel , DA1-Corn-1a ) ;
33580: LD_EXP 12
33584: PPUSH
33585: LD_STRING DA1-Corn-1a
33587: PPUSH
33588: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33592: LD_EXP 28
33596: PPUSH
33597: LD_STRING DA-Roth-3a
33599: PPUSH
33600: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33604: LD_EXP 12
33608: PPUSH
33609: LD_INT 4
33611: PPUSH
33612: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33616: LD_EXP 12
33620: PPUSH
33621: LD_INT 257
33623: PPUSH
33624: LD_INT 198
33626: PPUSH
33627: CALL_OW 111
// AddComHold ( Cornel ) ;
33631: LD_EXP 12
33635: PPUSH
33636: CALL_OW 200
// end ; if tpUnit = Denis then
33640: LD_VAR 0 1
33644: PUSH
33645: LD_EXP 8
33649: EQUAL
33650: IFFALSE 33703
// begin Say ( Denis , DA1-Den-1a ) ;
33652: LD_EXP 8
33656: PPUSH
33657: LD_STRING DA1-Den-1a
33659: PPUSH
33660: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33664: LD_EXP 28
33668: PPUSH
33669: LD_STRING DA-Roth-3
33671: PPUSH
33672: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33676: LD_EXP 8
33680: PPUSH
33681: LD_INT 7
33683: PPUSH
33684: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33688: LD_EXP 8
33692: PPUSH
33693: LD_INT 240
33695: PPUSH
33696: LD_INT 188
33698: PPUSH
33699: CALL_OW 111
// end ; if tpUnit = Bobby then
33703: LD_VAR 0 1
33707: PUSH
33708: LD_EXP 6
33712: EQUAL
33713: IFFALSE 33766
// begin Say ( Joan , DA1-Bobby-1a ) ;
33715: LD_EXP 2
33719: PPUSH
33720: LD_STRING DA1-Bobby-1a
33722: PPUSH
33723: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33727: LD_EXP 28
33731: PPUSH
33732: LD_STRING DA-Roth-3
33734: PPUSH
33735: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33739: LD_EXP 6
33743: PPUSH
33744: LD_INT 7
33746: PPUSH
33747: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33751: LD_EXP 6
33755: PPUSH
33756: LD_INT 240
33758: PPUSH
33759: LD_INT 188
33761: PPUSH
33762: CALL_OW 111
// end ; if tpUnit = Gladstone then
33766: LD_VAR 0 1
33770: PUSH
33771: LD_EXP 10
33775: EQUAL
33776: IFFALSE 33838
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33778: LD_EXP 10
33782: PPUSH
33783: LD_STRING DA1-Glad-1a
33785: PPUSH
33786: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33790: LD_EXP 28
33794: PPUSH
33795: LD_STRING DA-Roth-3a
33797: PPUSH
33798: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33802: LD_EXP 10
33806: PPUSH
33807: LD_INT 4
33809: PPUSH
33810: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33814: LD_EXP 10
33818: PPUSH
33819: LD_INT 257
33821: PPUSH
33822: LD_INT 198
33824: PPUSH
33825: CALL_OW 111
// AddComHold ( Gladstone ) ;
33829: LD_EXP 10
33833: PPUSH
33834: CALL_OW 200
// end ; if tpUnit = Cyrus then
33838: LD_VAR 0 1
33842: PUSH
33843: LD_EXP 7
33847: EQUAL
33848: IFFALSE 33910
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33850: LD_EXP 7
33854: PPUSH
33855: LD_STRING DA1-Cyrus-1a
33857: PPUSH
33858: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33862: LD_EXP 28
33866: PPUSH
33867: LD_STRING DA-Roth-3a
33869: PPUSH
33870: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33874: LD_EXP 7
33878: PPUSH
33879: LD_INT 4
33881: PPUSH
33882: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33886: LD_EXP 7
33890: PPUSH
33891: LD_INT 257
33893: PPUSH
33894: LD_INT 198
33896: PPUSH
33897: CALL_OW 111
// AddComHold ( Cyrus ) ;
33901: LD_EXP 7
33905: PPUSH
33906: CALL_OW 200
// end ; if tpUnit = Stevens then
33910: LD_VAR 0 1
33914: PUSH
33915: LD_EXP 3
33919: EQUAL
33920: IFFALSE 33973
// begin Say ( Stevens , DA1-Huck-1a ) ;
33922: LD_EXP 3
33926: PPUSH
33927: LD_STRING DA1-Huck-1a
33929: PPUSH
33930: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33934: LD_EXP 28
33938: PPUSH
33939: LD_STRING DA-Roth-3
33941: PPUSH
33942: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33946: LD_EXP 3
33950: PPUSH
33951: LD_INT 7
33953: PPUSH
33954: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33958: LD_EXP 3
33962: PPUSH
33963: LD_INT 240
33965: PPUSH
33966: LD_INT 188
33968: PPUSH
33969: CALL_OW 111
// end ; if tpUnit = Baker then
33973: LD_VAR 0 1
33977: PUSH
33978: LD_EXP 21
33982: EQUAL
33983: IFFALSE 34036
// begin Say ( Baker , DA1-Huck-1a ) ;
33985: LD_EXP 21
33989: PPUSH
33990: LD_STRING DA1-Huck-1a
33992: PPUSH
33993: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33997: LD_EXP 28
34001: PPUSH
34002: LD_STRING DA-Roth-3
34004: PPUSH
34005: CALL_OW 88
// SetSide ( Baker , 7 ) ;
34009: LD_EXP 21
34013: PPUSH
34014: LD_INT 7
34016: PPUSH
34017: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
34021: LD_EXP 21
34025: PPUSH
34026: LD_INT 240
34028: PPUSH
34029: LD_INT 188
34031: PPUSH
34032: CALL_OW 111
// end ; if tpUnit = Brown then
34036: LD_VAR 0 1
34040: PUSH
34041: LD_EXP 9
34045: EQUAL
34046: IFFALSE 34099
// begin Say ( Cyrus , DA1-Brown-1a ) ;
34048: LD_EXP 7
34052: PPUSH
34053: LD_STRING DA1-Brown-1a
34055: PPUSH
34056: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34060: LD_EXP 28
34064: PPUSH
34065: LD_STRING DA-Roth-3
34067: PPUSH
34068: CALL_OW 88
// SetSide ( Brown , 7 ) ;
34072: LD_EXP 9
34076: PPUSH
34077: LD_INT 7
34079: PPUSH
34080: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
34084: LD_EXP 9
34088: PPUSH
34089: LD_INT 240
34091: PPUSH
34092: LD_INT 188
34094: PPUSH
34095: CALL_OW 111
// end ; if tpUnit = Gary then
34099: LD_VAR 0 1
34103: PUSH
34104: LD_EXP 13
34108: EQUAL
34109: IFFALSE 34171
// begin Say ( Gary , DA1-Gary-1a ) ;
34111: LD_EXP 13
34115: PPUSH
34116: LD_STRING DA1-Gary-1a
34118: PPUSH
34119: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34123: LD_EXP 28
34127: PPUSH
34128: LD_STRING DA-Roth-3a
34130: PPUSH
34131: CALL_OW 88
// SetSide ( Gary , 4 ) ;
34135: LD_EXP 13
34139: PPUSH
34140: LD_INT 4
34142: PPUSH
34143: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
34147: LD_EXP 13
34151: PPUSH
34152: LD_INT 257
34154: PPUSH
34155: LD_INT 198
34157: PPUSH
34158: CALL_OW 111
// AddComHold ( Gary ) ;
34162: LD_EXP 13
34166: PPUSH
34167: CALL_OW 200
// end ; if tpUnit = Cyrus then
34171: LD_VAR 0 1
34175: PUSH
34176: LD_EXP 7
34180: EQUAL
34181: IFFALSE 34243
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34183: LD_EXP 7
34187: PPUSH
34188: LD_STRING DA1-Cyrus-1a
34190: PPUSH
34191: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34195: LD_EXP 28
34199: PPUSH
34200: LD_STRING DA-Roth-3a
34202: PPUSH
34203: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34207: LD_EXP 7
34211: PPUSH
34212: LD_INT 4
34214: PPUSH
34215: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34219: LD_EXP 7
34223: PPUSH
34224: LD_INT 257
34226: PPUSH
34227: LD_INT 198
34229: PPUSH
34230: CALL_OW 111
// AddComHold ( Cyrus ) ;
34234: LD_EXP 7
34238: PPUSH
34239: CALL_OW 200
// end ; if tpUnit = Connie then
34243: LD_VAR 0 1
34247: PUSH
34248: LD_EXP 16
34252: EQUAL
34253: IFFALSE 34315
// begin Say ( Connie , DA1-Con-1a ) ;
34255: LD_EXP 16
34259: PPUSH
34260: LD_STRING DA1-Con-1a
34262: PPUSH
34263: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34267: LD_EXP 28
34271: PPUSH
34272: LD_STRING DA-Roth-3a
34274: PPUSH
34275: CALL_OW 88
// SetSide ( Connie , 4 ) ;
34279: LD_EXP 16
34283: PPUSH
34284: LD_INT 4
34286: PPUSH
34287: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
34291: LD_EXP 16
34295: PPUSH
34296: LD_INT 257
34298: PPUSH
34299: LD_INT 198
34301: PPUSH
34302: CALL_OW 111
// AddComHold ( Connie ) ;
34306: LD_EXP 16
34310: PPUSH
34311: CALL_OW 200
// end ; if tpUnit = Kurt then
34315: LD_VAR 0 1
34319: PUSH
34320: LD_EXP 30
34324: EQUAL
34325: IFFALSE 34387
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34327: LD_EXP 30
34331: PPUSH
34332: LD_STRING DA1-Kurt-1a
34334: PPUSH
34335: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34339: LD_EXP 28
34343: PPUSH
34344: LD_STRING DA-Roth-3a
34346: PPUSH
34347: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34351: LD_EXP 30
34355: PPUSH
34356: LD_INT 4
34358: PPUSH
34359: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34363: LD_EXP 30
34367: PPUSH
34368: LD_INT 257
34370: PPUSH
34371: LD_INT 198
34373: PPUSH
34374: CALL_OW 111
// AddComHold ( Kurt ) ;
34378: LD_EXP 30
34382: PPUSH
34383: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34387: LD_VAR 0 1
34391: PUSH
34392: LD_EXP 15
34396: EQUAL
34397: IFFALSE 34450
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34399: LD_EXP 15
34403: PPUSH
34404: LD_STRING DA1-Yam-1a
34406: PPUSH
34407: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34411: LD_EXP 28
34415: PPUSH
34416: LD_STRING DA-Roth-3
34418: PPUSH
34419: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34423: LD_EXP 15
34427: PPUSH
34428: LD_INT 7
34430: PPUSH
34431: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34435: LD_EXP 15
34439: PPUSH
34440: LD_INT 240
34442: PPUSH
34443: LD_INT 188
34445: PPUSH
34446: CALL_OW 111
// end ; if tpUnit = Frank then
34450: LD_VAR 0 1
34454: PUSH
34455: LD_EXP 14
34459: EQUAL
34460: IFFALSE 34522
// begin Say ( Frank , DA1-Frank-1a ) ;
34462: LD_EXP 14
34466: PPUSH
34467: LD_STRING DA1-Frank-1a
34469: PPUSH
34470: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34474: LD_EXP 28
34478: PPUSH
34479: LD_STRING DA-Roth-3a
34481: PPUSH
34482: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34486: LD_EXP 14
34490: PPUSH
34491: LD_INT 4
34493: PPUSH
34494: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34498: LD_EXP 14
34502: PPUSH
34503: LD_INT 257
34505: PPUSH
34506: LD_INT 198
34508: PPUSH
34509: CALL_OW 111
// AddComHold ( Frank ) ;
34513: LD_EXP 14
34517: PPUSH
34518: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34522: LD_EXP 64
34526: PUSH
34527: LD_INT 0
34529: EQUAL
34530: IFFALSE 34576
// begin Say ( JMM , DAa-JMM-1 ) ;
34532: LD_EXP 1
34536: PPUSH
34537: LD_STRING DAa-JMM-1
34539: PPUSH
34540: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34544: LD_EXP 1
34548: PPUSH
34549: LD_STRING DAa-JMM-1a
34551: PPUSH
34552: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34556: LD_EXP 1
34560: PPUSH
34561: LD_STRING DAa-JMM-1b
34563: PPUSH
34564: CALL_OW 88
// allianceFirstContact = 1 ;
34568: LD_ADDR_EXP 64
34572: PUSH
34573: LD_INT 1
34575: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34576: LD_VAR 0 1
34580: PUSH
34581: LD_VAR 0 2
34585: IN
34586: NOT
34587: IFFALSE 34897
// begin rnd = Rand ( 1 , 2 ) ;
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_INT 1
34596: PPUSH
34597: LD_INT 2
34599: PPUSH
34600: CALL_OW 12
34604: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34605: LD_VAR 0 1
34609: PPUSH
34610: CALL_OW 258
34614: PUSH
34615: LD_INT 1
34617: EQUAL
34618: IFFALSE 34751
// begin if rnd = 1 then
34620: LD_VAR 0 3
34624: PUSH
34625: LD_INT 1
34627: EQUAL
34628: IFFALSE 34690
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34630: LD_VAR 0 1
34634: PPUSH
34635: LD_STRING DA1-Sol1-1a
34637: PPUSH
34638: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34642: LD_EXP 28
34646: PPUSH
34647: LD_STRING DA-Roth-3a
34649: PPUSH
34650: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34654: LD_VAR 0 1
34658: PPUSH
34659: LD_INT 4
34661: PPUSH
34662: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34666: LD_VAR 0 1
34670: PPUSH
34671: LD_INT 257
34673: PPUSH
34674: LD_INT 198
34676: PPUSH
34677: CALL_OW 111
// AddComHold ( tpUnit ) ;
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL_OW 200
// end ; if rnd = 2 then
34690: LD_VAR 0 3
34694: PUSH
34695: LD_INT 2
34697: EQUAL
34698: IFFALSE 34751
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34700: LD_VAR 0 1
34704: PPUSH
34705: LD_STRING DA1-Sol1-1b
34707: PPUSH
34708: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34712: LD_EXP 28
34716: PPUSH
34717: LD_STRING DA-Roth-3
34719: PPUSH
34720: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34724: LD_VAR 0 1
34728: PPUSH
34729: LD_INT 7
34731: PPUSH
34732: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34736: LD_VAR 0 1
34740: PPUSH
34741: LD_INT 240
34743: PPUSH
34744: LD_INT 188
34746: PPUSH
34747: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL_OW 258
34760: PUSH
34761: LD_INT 2
34763: EQUAL
34764: IFFALSE 34897
// begin if rnd = 1 then
34766: LD_VAR 0 3
34770: PUSH
34771: LD_INT 1
34773: EQUAL
34774: IFFALSE 34836
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34776: LD_VAR 0 1
34780: PPUSH
34781: LD_STRING DA1-FSol1-1a
34783: PPUSH
34784: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34788: LD_EXP 28
34792: PPUSH
34793: LD_STRING DA-Roth-3a
34795: PPUSH
34796: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34800: LD_VAR 0 1
34804: PPUSH
34805: LD_INT 4
34807: PPUSH
34808: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34812: LD_VAR 0 1
34816: PPUSH
34817: LD_INT 257
34819: PPUSH
34820: LD_INT 198
34822: PPUSH
34823: CALL_OW 111
// AddComHold ( tpUnit ) ;
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL_OW 200
// end ; if rnd = 2 then
34836: LD_VAR 0 3
34840: PUSH
34841: LD_INT 2
34843: EQUAL
34844: IFFALSE 34897
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34846: LD_VAR 0 1
34850: PPUSH
34851: LD_STRING DA1-FSol1-1b
34853: PPUSH
34854: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34858: LD_EXP 28
34862: PPUSH
34863: LD_STRING DA-Roth-3
34865: PPUSH
34866: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34870: LD_VAR 0 1
34874: PPUSH
34875: LD_INT 7
34877: PPUSH
34878: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34882: LD_VAR 0 1
34886: PPUSH
34887: LD_INT 240
34889: PPUSH
34890: LD_INT 188
34892: PPUSH
34893: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34897: LD_INT 1
34899: PPUSH
34900: LD_INT 7
34902: PPUSH
34903: LD_INT 2
34905: PPUSH
34906: LD_INT 1
34908: PPUSH
34909: CALL_OW 80
// InGameOff ;
34913: CALL_OW 9
// end ;
34917: PPOPN 3
34919: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34920: LD_EXP 97
34924: PUSH
34925: LD_INT 94570
34927: GREATEREQUAL
34928: IFFALSE 35247
34930: GO 34932
34932: DISABLE
// begin DialogueOn ;
34933: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34937: LD_INT 22
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 23
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 26
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 25
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 25
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 25
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 25
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 25
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 25
35022: PUSH
35023: LD_INT 8
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: PPUSH
35045: CALL_OW 69
35049: PPUSH
35050: LD_STRING D11-Sol1-1
35052: PPUSH
35053: LD_STRING D5-FSol1-1
35055: PPUSH
35056: CALL 6896 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
35060: LD_EXP 26
35064: PPUSH
35065: LD_STRING D11-Pla-1
35067: PPUSH
35068: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
35072: LD_EXP 37
35076: PPUSH
35077: LD_STRING D11-Kov-1
35079: PPUSH
35080: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
35084: LD_EXP 26
35088: PPUSH
35089: LD_STRING D11-Pla-2
35091: PPUSH
35092: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
35096: LD_INT 22
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 23
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 26
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 25
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 25
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 25
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 25
35161: PUSH
35162: LD_INT 4
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 25
35171: PUSH
35172: LD_INT 5
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 25
35181: PUSH
35182: LD_INT 8
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: PPUSH
35204: CALL_OW 69
35208: PPUSH
35209: LD_STRING D11-Sol1-2
35211: PPUSH
35212: LD_STRING D5-FSol1-1
35214: PPUSH
35215: CALL 6896 0 3
// Say ( JMM , D11-JMM-2 ) ;
35219: LD_EXP 1
35223: PPUSH
35224: LD_STRING D11-JMM-2
35226: PPUSH
35227: CALL_OW 88
// DialogueOff ;
35231: CALL_OW 7
// PreapreMehBehs ;
35235: CALL 5745 0 0
// missionStage = 5 ;
35239: LD_ADDR_EXP 101
35243: PUSH
35244: LD_INT 5
35246: ST_TO_ADDR
// end ;
35247: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
35248: LD_EXP 97
35252: PUSH
35253: LD_INT 105070
35255: GREATEREQUAL
35256: IFFALSE 35650
35258: GO 35260
35260: DISABLE
35261: LD_INT 0
35263: PPUSH
35264: PPUSH
// begin time = 0 0$00 ;
35265: LD_ADDR_VAR 0 2
35269: PUSH
35270: LD_INT 0
35272: ST_TO_ADDR
// DialogueOn ;
35273: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
35277: LD_EXP 26
35281: PPUSH
35282: LD_STRING D15-Pla-1
35284: PPUSH
35285: CALL_OW 94
// dec = Query ( Q15a ) ;
35289: LD_ADDR_VAR 0 1
35293: PUSH
35294: LD_STRING Q15a
35296: PPUSH
35297: CALL_OW 97
35301: ST_TO_ADDR
// if dec = 1 then
35302: LD_VAR 0 1
35306: PUSH
35307: LD_INT 1
35309: EQUAL
35310: IFFALSE 35331
// begin Say ( JMM , D15a-JMM-1 ) ;
35312: LD_EXP 1
35316: PPUSH
35317: LD_STRING D15a-JMM-1
35319: PPUSH
35320: CALL_OW 88
// YouLost ( Surrender ) ;
35324: LD_STRING Surrender
35326: PPUSH
35327: CALL_OW 104
// end ; if dec = 2 then
35331: LD_VAR 0 1
35335: PUSH
35336: LD_INT 2
35338: EQUAL
35339: IFFALSE 35369
// begin Say ( JMM , D15b-JMM-1 ) ;
35341: LD_EXP 1
35345: PPUSH
35346: LD_STRING D15b-JMM-1
35348: PPUSH
35349: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35353: LD_EXP 26
35357: PPUSH
35358: LD_STRING D15b-Pla-1
35360: PPUSH
35361: CALL_OW 94
// DialogueOff ;
35365: CALL_OW 7
// end ; if dec = 3 then
35369: LD_VAR 0 1
35373: PUSH
35374: LD_INT 3
35376: EQUAL
35377: IFFALSE 35453
// begin Say ( JMM , D15c-JMM-1 ) ;
35379: LD_EXP 1
35383: PPUSH
35384: LD_STRING D15c-JMM-1
35386: PPUSH
35387: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35391: LD_EXP 26
35395: PPUSH
35396: LD_STRING D15c-Pla-1
35398: PPUSH
35399: CALL_OW 94
// DialogueOff ;
35403: CALL_OW 7
// wait ( 0 0$15 ) ;
35407: LD_INT 525
35409: PPUSH
35410: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35414: LD_EXP 26
35418: PPUSH
35419: LD_STRING D18-Pla-1
35421: PPUSH
35422: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35426: LD_INT 273
35428: PPUSH
35429: LD_EXP 1
35433: PPUSH
35434: CALL_OW 250
35438: PPUSH
35439: LD_EXP 1
35443: PPUSH
35444: CALL_OW 251
35448: PPUSH
35449: CALL_OW 116
// end ; if dec = 4 then
35453: LD_VAR 0 1
35457: PUSH
35458: LD_INT 4
35460: EQUAL
35461: IFFALSE 35499
// begin Say ( JMM , D15d-JMM-1 ) ;
35463: LD_EXP 1
35467: PPUSH
35468: LD_STRING D15d-JMM-1
35470: PPUSH
35471: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35475: LD_EXP 26
35479: PPUSH
35480: LD_STRING D15d-Pla-1
35482: PPUSH
35483: CALL_OW 94
// DialogueOff ;
35487: CALL_OW 7
// missionStage = 6 ;
35491: LD_ADDR_EXP 101
35495: PUSH
35496: LD_INT 6
35498: ST_TO_ADDR
// end ; if dec = 2 then
35499: LD_VAR 0 1
35503: PUSH
35504: LD_INT 2
35506: EQUAL
35507: IFFALSE 35580
// begin repeat wait ( 0 0$01 ) ;
35509: LD_INT 35
35511: PPUSH
35512: CALL_OW 67
// time = time + 0 0$01 ;
35516: LD_ADDR_VAR 0 2
35520: PUSH
35521: LD_VAR 0 2
35525: PUSH
35526: LD_INT 35
35528: PLUS
35529: ST_TO_ADDR
// until time >= 3 3$00 ;
35530: LD_VAR 0 2
35534: PUSH
35535: LD_INT 6300
35537: GREATEREQUAL
35538: IFFALSE 35509
// DialogueOn ;
35540: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35544: LD_EXP 1
35548: PPUSH
35549: LD_STRING D15d-JMM-1a
35551: PPUSH
35552: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35556: LD_EXP 26
35560: PPUSH
35561: LD_STRING D15d-Pla-1
35563: PPUSH
35564: CALL_OW 94
// DialogueOff ;
35568: CALL_OW 7
// missionStage = 6 ;
35572: LD_ADDR_EXP 101
35576: PUSH
35577: LD_INT 6
35579: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35580: LD_EXP 53
35584: PPUSH
35585: CALL_OW 302
35589: PUSH
35590: LD_EXP 53
35594: PPUSH
35595: CALL_OW 255
35599: PUSH
35600: LD_INT 1
35602: EQUAL
35603: AND
35604: IFFALSE 35650
// begin DialogueOn ;
35606: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35610: LD_EXP 1
35614: PPUSH
35615: LD_STRING D16-JMM-1
35617: PPUSH
35618: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35622: LD_EXP 53
35626: PPUSH
35627: LD_STRING D16-Friend-1
35629: PPUSH
35630: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35634: LD_EXP 1
35638: PPUSH
35639: LD_STRING D16-JMM-2
35641: PPUSH
35642: CALL_OW 88
// DialogueOff ;
35646: CALL_OW 7
// end ; end ;
35650: PPOPN 2
35652: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35653: LD_EXP 101
35657: PUSH
35658: LD_INT 6
35660: EQUAL
35661: PUSH
35662: LD_EXP 53
35666: PPUSH
35667: CALL_OW 302
35671: AND
35672: PUSH
35673: LD_EXP 53
35677: PPUSH
35678: CALL_OW 255
35682: PUSH
35683: LD_INT 1
35685: EQUAL
35686: AND
35687: IFFALSE 36324
35689: GO 35691
35691: DISABLE
35692: LD_INT 0
35694: PPUSH
// begin DialogueOn ;
35695: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35699: LD_INT 22
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 34
35714: PUSH
35715: LD_INT 8
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 35
35724: PUSH
35725: LD_INT 8
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 69
35745: PUSH
35746: LD_INT 0
35748: GREATER
35749: IFFALSE 35773
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35751: LD_EXP 26
35755: PPUSH
35756: LD_STRING D16c-Pla-1
35758: PPUSH
35759: CALL_OW 94
// playerHaveRocket = 1 ;
35763: LD_ADDR_EXP 100
35767: PUSH
35768: LD_INT 1
35770: ST_TO_ADDR
// end else
35771: GO 36232
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35773: LD_EXP 26
35777: PPUSH
35778: LD_STRING D16a-Pla-1
35780: PPUSH
35781: CALL_OW 94
// if IsOK ( Stevens ) then
35785: LD_EXP 3
35789: PPUSH
35790: CALL_OW 302
35794: IFFALSE 35810
// begin Say ( Stevens , D16a-Huck-1 ) ;
35796: LD_EXP 3
35800: PPUSH
35801: LD_STRING D16a-Huck-1
35803: PPUSH
35804: CALL_OW 88
// end else
35808: GO 35958
// begin if IsOk ( Baker ) then
35810: LD_EXP 21
35814: PPUSH
35815: CALL_OW 302
35819: IFFALSE 35835
// begin Say ( Baker , D16a-Huck-1 ) ;
35821: LD_EXP 21
35825: PPUSH
35826: LD_STRING D16a-Huck-1
35828: PPUSH
35829: CALL_OW 88
// end else
35833: GO 35958
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35835: LD_INT 22
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 23
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 26
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 25
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 25
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 25
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 25
35900: PUSH
35901: LD_INT 4
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 25
35910: PUSH
35911: LD_INT 5
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 25
35920: PUSH
35921: LD_INT 8
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: PPUSH
35943: CALL_OW 69
35947: PPUSH
35948: LD_STRING D16a-Sol1-1
35950: PPUSH
35951: LD_STRING D5-FSol1-1
35953: PPUSH
35954: CALL 6896 0 3
// end ; end ; wait ( 0 0$30 ) ;
35958: LD_INT 1050
35960: PPUSH
35961: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35965: LD_EXP 26
35969: PPUSH
35970: LD_STRING D18-Pla-1
35972: PPUSH
35973: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35977: LD_ADDR_VAR 0 1
35981: PUSH
35982: LD_INT 22
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 21
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 23
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 30
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 30
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: PPUSH
36046: CALL_OW 69
36050: ST_TO_ADDR
// if rocketTarget = 0 then
36051: LD_VAR 0 1
36055: PUSH
36056: LD_INT 0
36058: EQUAL
36059: IFFALSE 36135
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36061: LD_ADDR_VAR 0 1
36065: PUSH
36066: LD_INT 22
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 21
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 23
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: LD_INT 30
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 30
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: PPUSH
36130: CALL_OW 69
36134: ST_TO_ADDR
// if rocketTarget = 0 then
36135: LD_VAR 0 1
36139: PUSH
36140: LD_INT 0
36142: EQUAL
36143: IFFALSE 36197
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36145: LD_ADDR_VAR 0 1
36149: PUSH
36150: LD_INT 22
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 23
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 50
36182: PUSH
36183: EMPTY
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: PPUSH
36192: CALL_OW 69
36196: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36197: LD_INT 273
36199: PPUSH
36200: LD_VAR 0 1
36204: PUSH
36205: LD_INT 1
36207: ARRAY
36208: PPUSH
36209: CALL_OW 250
36213: PPUSH
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 1
36221: ARRAY
36222: PPUSH
36223: CALL_OW 251
36227: PPUSH
36228: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
36232: LD_EXP 1
36236: PPUSH
36237: LD_STRING D16a-JMM-1a
36239: PPUSH
36240: CALL_OW 88
// DialogueOff ;
36244: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
36248: LD_EXP 53
36252: PPUSH
36253: LD_INT 3
36255: PPUSH
36256: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
36260: LD_EXP 53
36264: PPUSH
36265: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
36269: LD_EXP 53
36273: PPUSH
36274: CALL_OW 121
// wait ( 0 0$1 ) ;
36278: LD_INT 35
36280: PPUSH
36281: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
36285: LD_EXP 53
36289: PPUSH
36290: LD_INT 18
36292: PPUSH
36293: CALL_OW 113
// wait ( 0 0$3 ) ;
36297: LD_INT 105
36299: PPUSH
36300: CALL_OW 67
// DialogueOn ;
36304: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
36308: LD_EXP 1
36312: PPUSH
36313: LD_STRING D16a-JMM-1
36315: PPUSH
36316: CALL_OW 88
// DialogueOff ;
36320: CALL_OW 7
// end ;
36324: PPOPN 1
36326: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36327: LD_EXP 53
36331: PPUSH
36332: CALL_OW 255
36336: PUSH
36337: LD_INT 3
36339: EQUAL
36340: IFFALSE 36447
36342: GO 36344
36344: DISABLE
36345: LD_INT 0
36347: PPUSH
// begin enable ;
36348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36349: LD_ADDR_VAR 0 1
36353: PUSH
36354: LD_INT 22
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 21
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 56
36376: PUSH
36377: EMPTY
36378: LIST
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: PPUSH
36385: CALL_OW 69
36389: PUSH
36390: FOR_IN
36391: IFFALSE 36445
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36393: LD_VAR 0 1
36397: PPUSH
36398: LD_EXP 53
36402: PPUSH
36403: CALL_OW 296
36407: PUSH
36408: LD_INT 8
36410: LESS
36411: IFFALSE 36443
// begin disable ;
36413: DISABLE
// DialogueOn ;
36414: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36418: LD_EXP 53
36422: PPUSH
36423: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36427: LD_EXP 53
36431: PPUSH
36432: LD_STRING D16a-Friend-1
36434: PPUSH
36435: CALL_OW 88
// DialogueOff ;
36439: CALL_OW 7
// end ; end ;
36443: GO 36390
36445: POP
36446: POP
// end ;
36447: PPOPN 1
36449: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36450: LD_EXP 101
36454: PUSH
36455: LD_INT 6
36457: EQUAL
36458: PUSH
36459: LD_EXP 53
36463: PPUSH
36464: CALL_OW 255
36468: PUSH
36469: LD_INT 1
36471: EQUAL
36472: NOT
36473: AND
36474: IFFALSE 36854
36476: GO 36478
36478: DISABLE
36479: LD_INT 0
36481: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36482: LD_INT 22
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: LD_INT 34
36497: PUSH
36498: LD_INT 8
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 35
36507: PUSH
36508: LD_INT 8
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PPUSH
36524: CALL_OW 69
36528: PUSH
36529: LD_INT 0
36531: GREATER
36532: IFFALSE 36556
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36534: LD_EXP 26
36538: PPUSH
36539: LD_STRING D16c-Pla-1
36541: PPUSH
36542: CALL_OW 94
// playerHaveRocket = 1 ;
36546: LD_ADDR_EXP 100
36550: PUSH
36551: LD_INT 1
36553: ST_TO_ADDR
// end else
36554: GO 36854
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36556: LD_EXP 26
36560: PPUSH
36561: LD_STRING D16b-Pla-1
36563: PPUSH
36564: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36568: LD_EXP 1
36572: PPUSH
36573: LD_STRING D16b-JMM-1
36575: PPUSH
36576: CALL_OW 88
// wait ( 0 0$15 ) ;
36580: LD_INT 525
36582: PPUSH
36583: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36587: LD_EXP 26
36591: PPUSH
36592: LD_STRING D18-Pla-1
36594: PPUSH
36595: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36599: LD_ADDR_VAR 0 1
36603: PUSH
36604: LD_INT 22
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 21
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 23
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: LD_INT 30
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 30
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: PPUSH
36668: CALL_OW 69
36672: ST_TO_ADDR
// if rocketTarget = 0 then
36673: LD_VAR 0 1
36677: PUSH
36678: LD_INT 0
36680: EQUAL
36681: IFFALSE 36757
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36683: LD_ADDR_VAR 0 1
36687: PUSH
36688: LD_INT 22
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 21
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 23
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 30
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 30
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: PPUSH
36752: CALL_OW 69
36756: ST_TO_ADDR
// if rocketTarget = 0 then
36757: LD_VAR 0 1
36761: PUSH
36762: LD_INT 0
36764: EQUAL
36765: IFFALSE 36819
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36767: LD_ADDR_VAR 0 1
36771: PUSH
36772: LD_INT 22
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 21
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 23
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 50
36804: PUSH
36805: EMPTY
36806: LIST
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: PPUSH
36814: CALL_OW 69
36818: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36819: LD_INT 273
36821: PPUSH
36822: LD_VAR 0 1
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: PPUSH
36831: CALL_OW 250
36835: PPUSH
36836: LD_VAR 0 1
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PPUSH
36845: CALL_OW 251
36849: PPUSH
36850: CALL_OW 116
// end ; end ;
36854: PPOPN 1
36856: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36857: LD_EXP 97
36861: PUSH
36862: LD_INT 168070
36864: GREATEREQUAL
36865: PUSH
36866: LD_EXP 101
36870: PUSH
36871: LD_INT 6
36873: GREATEREQUAL
36874: AND
36875: PUSH
36876: LD_EXP 85
36880: PUSH
36881: LD_INT 1
36883: EQUAL
36884: AND
36885: IFFALSE 36915
36887: GO 36889
36889: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36890: LD_EXP 26
36894: PPUSH
36895: LD_STRING D18-Pla-1
36897: PPUSH
36898: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36902: LD_INT 273
36904: PPUSH
36905: LD_INT 244
36907: PPUSH
36908: LD_INT 187
36910: PPUSH
36911: CALL_OW 116
// end ;
36915: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36916: LD_EXP 101
36920: PUSH
36921: LD_INT 5
36923: GREATEREQUAL
36924: IFFALSE 37117
36926: GO 36928
36928: DISABLE
36929: LD_INT 0
36931: PPUSH
// begin enable ;
36932: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36933: LD_ADDR_VAR 0 1
36937: PUSH
36938: LD_INT 22
36940: PUSH
36941: LD_INT 6
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 30
36950: PUSH
36951: LD_INT 37
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 57
36960: PUSH
36961: EMPTY
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: PPUSH
36969: CALL_OW 69
36973: PUSH
36974: FOR_IN
36975: IFFALSE 37029
// begin if See ( 1 , i ) then
36977: LD_INT 1
36979: PPUSH
36980: LD_VAR 0 1
36984: PPUSH
36985: CALL_OW 292
36989: IFFALSE 37027
// begin disable ;
36991: DISABLE
// DialogueOn ;
36992: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36996: LD_EXP 1
37000: PPUSH
37001: LD_STRING D17a-JMM-1
37003: PPUSH
37004: CALL_OW 88
// DialogueOff ;
37008: CALL_OW 7
// behemothStatus = 1 ;
37012: LD_ADDR_EXP 60
37016: PUSH
37017: LD_INT 1
37019: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
37020: LD_STRING M4a
37022: PPUSH
37023: CALL_OW 337
// end ; end ;
37027: GO 36974
37029: POP
37030: POP
// for i in ruBehs do
37031: LD_ADDR_VAR 0 1
37035: PUSH
37036: LD_EXP 59
37040: PUSH
37041: FOR_IN
37042: IFFALSE 37115
// begin if See ( 1 , i ) then
37044: LD_INT 1
37046: PPUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: CALL_OW 292
37056: IFFALSE 37113
// begin disable ;
37058: DISABLE
// DialogueOn ;
37059: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
37063: LD_EXP 1
37067: PPUSH
37068: LD_STRING D17b-JMM-1
37070: PPUSH
37071: CALL_OW 88
// DialogueOff ;
37075: CALL_OW 7
// behemothStatus = 0 ;
37079: LD_ADDR_EXP 60
37083: PUSH
37084: LD_INT 0
37086: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
37087: LD_STRING M4b
37089: PPUSH
37090: CALL_OW 337
// wait ( 0 0$2 ) ;
37094: LD_INT 70
37096: PPUSH
37097: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
37101: LD_EXP 26
37105: PPUSH
37106: LD_STRING D18-Pla-1
37108: PPUSH
37109: CALL_OW 88
// end ; end ;
37113: GO 37041
37115: POP
37116: POP
// end ;
37117: PPOPN 1
37119: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
37120: LD_EXP 26
37124: PPUSH
37125: CALL_OW 301
37129: PUSH
37130: LD_EXP 27
37134: PPUSH
37135: CALL_OW 301
37139: AND
37140: PUSH
37141: LD_INT 22
37143: PUSH
37144: LD_INT 3
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 21
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 50
37163: PUSH
37164: EMPTY
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: PPUSH
37172: CALL_OW 69
37176: PUSH
37177: LD_INT 7
37179: PUSH
37180: LD_INT 8
37182: PUSH
37183: LD_INT 9
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_OWVAR 67
37195: ARRAY
37196: LESS
37197: AND
37198: IFFALSE 37874
37200: GO 37202
37202: DISABLE
37203: LD_INT 0
37205: PPUSH
37206: PPUSH
37207: PPUSH
// begin russianAI = 0 ;
37208: LD_ADDR_EXP 86
37212: PUSH
37213: LD_INT 0
37215: ST_TO_ADDR
// russianEscape = 1 ;
37216: LD_ADDR_EXP 90
37220: PUSH
37221: LD_INT 1
37223: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
37224: LD_INT 1
37226: PPUSH
37227: LD_INT 3
37229: PPUSH
37230: LD_INT 1
37232: PPUSH
37233: LD_INT 1
37235: PPUSH
37236: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
37240: LD_ADDR_VAR 0 1
37244: PUSH
37245: LD_INT 22
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 21
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 24
37267: PUSH
37268: LD_INT 900
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PPUSH
37280: CALL_OW 69
37284: PUSH
37285: FOR_IN
37286: IFFALSE 37317
// if GetSex ( i ) = sex_male then
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 258
37297: PUSH
37298: LD_INT 1
37300: EQUAL
37301: IFFALSE 37315
// begin tmp = i ;
37303: LD_ADDR_VAR 0 2
37307: PUSH
37308: LD_VAR 0 1
37312: ST_TO_ADDR
// break ;
37313: GO 37317
// end ;
37315: GO 37285
37317: POP
37318: POP
// if tmp = 0 then
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 0
37326: EQUAL
37327: IFFALSE 37381
// begin uc_side = 3 ;
37329: LD_ADDR_OWVAR 20
37333: PUSH
37334: LD_INT 3
37336: ST_TO_ADDR
// uc_nation = 3 ;
37337: LD_ADDR_OWVAR 21
37341: PUSH
37342: LD_INT 3
37344: ST_TO_ADDR
// hc_name =  ;
37345: LD_ADDR_OWVAR 26
37349: PUSH
37350: LD_STRING 
37352: ST_TO_ADDR
// hc_gallery =  ;
37353: LD_ADDR_OWVAR 33
37357: PUSH
37358: LD_STRING 
37360: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37361: LD_INT 1
37363: PPUSH
37364: LD_INT 10
37366: PPUSH
37367: CALL_OW 381
// tmp = CreateHuman ;
37371: LD_ADDR_VAR 0 2
37375: PUSH
37376: CALL_OW 44
37380: ST_TO_ADDR
// end ; DialogueOn ;
37381: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37385: LD_VAR 0 2
37389: PPUSH
37390: LD_STRING DSurrenderRussians-RSol1-1a
37392: PPUSH
37393: CALL_OW 88
// DialogueOff ;
37397: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37401: LD_INT 22
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 21
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL_OW 69
37429: PPUSH
37430: CALL_OW 122
// wait ( 0 0$1 ) ;
37434: LD_INT 35
37436: PPUSH
37437: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37441: LD_INT 22
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 21
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PPUSH
37465: CALL_OW 69
37469: PPUSH
37470: LD_INT 25
37472: PPUSH
37473: CALL_OW 173
// wait ( 0 0$10 ) ;
37477: LD_INT 350
37479: PPUSH
37480: CALL_OW 67
// PrepareOmarArmy ;
37484: CALL 38494 0 0
// missionStage = 7 ;
37488: LD_ADDR_EXP 101
37492: PUSH
37493: LD_INT 7
37495: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37496: LD_INT 157
37498: PPUSH
37499: LD_INT 8
37501: PPUSH
37502: LD_INT 1
37504: PPUSH
37505: LD_INT 8
37507: NEG
37508: PPUSH
37509: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37513: LD_INT 157
37515: PPUSH
37516: LD_INT 8
37518: PPUSH
37519: CALL_OW 84
// DialogueOn ;
37523: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37527: LD_EXP 32
37531: PPUSH
37532: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37536: LD_EXP 1
37540: PPUSH
37541: LD_STRING D19-JMM-1
37543: PPUSH
37544: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37548: LD_INT 22
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 26
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: PUSH
37571: LD_INT 25
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 25
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 25
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 25
37603: PUSH
37604: LD_INT 4
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 25
37613: PUSH
37614: LD_INT 5
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 25
37623: PUSH
37624: LD_INT 8
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 69
37649: PPUSH
37650: LD_STRING D19-Sol1-1
37652: PPUSH
37653: LD_STRING D5-FSol1-1
37655: PPUSH
37656: CALL 6896 0 3
// Say ( JMM , D19-JMM-2 ) ;
37660: LD_EXP 1
37664: PPUSH
37665: LD_STRING D19-JMM-2
37667: PPUSH
37668: CALL_OW 88
// DialogueOff ;
37672: CALL_OW 7
// LaunchMines ;
37676: CALL 37983 0 0
// wait ( 0 0$3 ) ;
37680: LD_INT 105
37682: PPUSH
37683: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37687: LD_ADDR_VAR 0 3
37691: PUSH
37692: LD_INT 22
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 21
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PPUSH
37716: CALL_OW 69
37720: PUSH
37721: LD_INT 22
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 21
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 25
37743: PUSH
37744: LD_INT 4
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: PPUSH
37756: CALL_OW 69
37760: DIFF
37761: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37762: LD_ADDR_VAR 0 3
37766: PUSH
37767: LD_VAR 0 3
37771: PUSH
37772: LD_INT 22
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 21
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PPUSH
37796: CALL_OW 69
37800: ADD
37801: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37802: LD_VAR 0 3
37806: PPUSH
37807: LD_INT 178
37809: PPUSH
37810: LD_INT 66
37812: PPUSH
37813: CALL_OW 114
// wait ( 0 0$10 ) ;
37817: LD_INT 350
37819: PPUSH
37820: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37824: LD_INT 22
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 21
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 25
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: PPUSH
37859: CALL_OW 69
37863: PPUSH
37864: LD_INT 177
37866: PPUSH
37867: LD_INT 69
37869: PPUSH
37870: CALL_OW 158
// end ;
37874: PPOPN 3
37876: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37877: LD_EXP 90
37881: PUSH
37882: LD_INT 1
37884: EQUAL
37885: PUSH
37886: LD_INT 25
37888: PPUSH
37889: LD_INT 22
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 21
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PPUSH
37913: CALL_OW 70
37917: AND
37918: IFFALSE 37980
37920: GO 37922
37922: DISABLE
37923: LD_INT 0
37925: PPUSH
// begin enable ;
37926: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37927: LD_ADDR_VAR 0 1
37931: PUSH
37932: LD_INT 25
37934: PPUSH
37935: LD_INT 22
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 21
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PPUSH
37959: CALL_OW 70
37963: PUSH
37964: FOR_IN
37965: IFFALSE 37978
// RemoveUnit ( i ) ;
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 64
37976: GO 37964
37978: POP
37979: POP
// end ;
37980: PPOPN 1
37982: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37983: LD_INT 0
37985: PPUSH
37986: PPUSH
37987: PPUSH
37988: PPUSH
37989: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37990: LD_ADDR_VAR 0 2
37994: PUSH
37995: LD_INT 168
37997: PUSH
37998: LD_INT 18
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 169
38007: PUSH
38008: LD_INT 20
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 167
38017: PUSH
38018: LD_INT 20
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 164
38027: PUSH
38028: LD_INT 18
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 164
38037: PUSH
38038: LD_INT 19
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 163
38047: PUSH
38048: LD_INT 19
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 164
38057: PUSH
38058: LD_INT 21
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 165
38067: PUSH
38068: LD_INT 21
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 163
38077: PUSH
38078: LD_INT 20
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 164
38087: PUSH
38088: LD_INT 22
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 162
38097: PUSH
38098: LD_INT 20
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 169
38125: PUSH
38126: LD_INT 34
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 169
38135: PUSH
38136: LD_INT 35
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 167
38145: PUSH
38146: LD_INT 32
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 170
38155: PUSH
38156: LD_INT 31
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 173
38165: PUSH
38166: LD_INT 35
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 174
38175: PUSH
38176: LD_INT 39
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// for i = 1 to mines_pos do
38191: LD_ADDR_VAR 0 4
38195: PUSH
38196: DOUBLE
38197: LD_INT 1
38199: DEC
38200: ST_TO_ADDR
38201: LD_VAR 0 2
38205: PUSH
38206: FOR_TO
38207: IFFALSE 38419
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
38209: LD_VAR 0 2
38213: PUSH
38214: LD_VAR 0 4
38218: ARRAY
38219: PUSH
38220: LD_INT 1
38222: ARRAY
38223: PPUSH
38224: LD_VAR 0 2
38228: PUSH
38229: LD_VAR 0 4
38233: ARRAY
38234: PUSH
38235: LD_INT 2
38237: ARRAY
38238: PPUSH
38239: LD_INT 1
38241: PPUSH
38242: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38246: LD_INT 1
38248: PPUSH
38249: LD_INT 3
38251: PPUSH
38252: CALL_OW 12
38256: PPUSH
38257: CALL_OW 67
// if i < mines_pos then
38261: LD_VAR 0 4
38265: PUSH
38266: LD_VAR 0 2
38270: LESS
38271: IFFALSE 38309
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
38273: LD_VAR 0 2
38277: PUSH
38278: LD_VAR 0 4
38282: ARRAY
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PPUSH
38288: LD_VAR 0 2
38292: PUSH
38293: LD_VAR 0 4
38297: ARRAY
38298: PUSH
38299: LD_INT 2
38301: ARRAY
38302: PPUSH
38303: CALL_OW 348
38307: GO 38417
// begin for j = 1 to mines_pos1 do
38309: LD_ADDR_VAR 0 5
38313: PUSH
38314: DOUBLE
38315: LD_INT 1
38317: DEC
38318: ST_TO_ADDR
38319: LD_VAR 0 3
38323: PUSH
38324: FOR_TO
38325: IFFALSE 38381
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38327: LD_VAR 0 3
38331: PUSH
38332: LD_VAR 0 5
38336: ARRAY
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: LD_VAR 0 3
38346: PUSH
38347: LD_VAR 0 5
38351: ARRAY
38352: PUSH
38353: LD_INT 2
38355: ARRAY
38356: PPUSH
38357: LD_INT 1
38359: PPUSH
38360: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38364: LD_INT 1
38366: PPUSH
38367: LD_INT 3
38369: PPUSH
38370: CALL_OW 12
38374: PPUSH
38375: CALL_OW 67
// end ;
38379: GO 38324
38381: POP
38382: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 4
38392: ARRAY
38393: PUSH
38394: LD_INT 1
38396: ARRAY
38397: PPUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_VAR 0 4
38407: ARRAY
38408: PUSH
38409: LD_INT 2
38411: ARRAY
38412: PPUSH
38413: CALL_OW 347
// end ; end ;
38417: GO 38206
38419: POP
38420: POP
// end ;
38421: LD_VAR 0 1
38425: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38426: LD_EXP 101
38430: PUSH
38431: LD_INT 7
38433: EQUAL
38434: PUSH
38435: LD_EXP 31
38439: PPUSH
38440: CALL_OW 301
38444: AND
38445: PUSH
38446: LD_EXP 32
38450: PPUSH
38451: CALL_OW 302
38455: AND
38456: IFFALSE 38493
38458: GO 38460
38460: DISABLE
// begin DialogueOn ;
38461: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38465: LD_EXP 1
38469: PPUSH
38470: LD_STRING D19a-JMM-1
38472: PPUSH
38473: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38477: LD_EXP 32
38481: PPUSH
38482: LD_STRING D19a-Hke-1
38484: PPUSH
38485: CALL_OW 88
// DialogueOff ;
38489: CALL_OW 7
// end ; end_of_file
38493: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38494: LD_INT 0
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
// uc_side = 2 ;
38501: LD_ADDR_OWVAR 20
38505: PUSH
38506: LD_INT 2
38508: ST_TO_ADDR
// uc_nation = 2 ;
38509: LD_ADDR_OWVAR 21
38513: PUSH
38514: LD_INT 2
38516: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38517: LD_ADDR_EXP 31
38521: PUSH
38522: LD_STRING Omar
38524: PPUSH
38525: LD_INT 0
38527: PPUSH
38528: CALL 6640 0 2
38532: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38533: LD_ADDR_EXP 32
38537: PUSH
38538: LD_STRING Heike
38540: PPUSH
38541: LD_INT 0
38543: PPUSH
38544: CALL 6640 0 2
38548: ST_TO_ADDR
// if KhatamStatus = 1 then
38549: LD_EXP 83
38553: PUSH
38554: LD_INT 1
38556: EQUAL
38557: IFFALSE 38572
// Khatam = NewCharacter ( Khatam ) ;
38559: LD_ADDR_EXP 33
38563: PUSH
38564: LD_STRING Khatam
38566: PPUSH
38567: CALL_OW 25
38571: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38572: LD_EXP 32
38576: PPUSH
38577: LD_INT 26
38579: PPUSH
38580: LD_INT 0
38582: PPUSH
38583: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38587: LD_EXP 33
38591: PPUSH
38592: LD_INT 26
38594: PPUSH
38595: LD_INT 0
38597: PPUSH
38598: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38602: LD_ADDR_VAR 0 2
38606: PUSH
38607: DOUBLE
38608: LD_INT 1
38610: DEC
38611: ST_TO_ADDR
38612: LD_INT 5
38614: PUSH
38615: LD_INT 6
38617: PUSH
38618: LD_INT 7
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: LD_OWVAR 67
38630: ARRAY
38631: PUSH
38632: FOR_TO
38633: IFFALSE 38688
// begin hc_name =  ;
38635: LD_ADDR_OWVAR 26
38639: PUSH
38640: LD_STRING 
38642: ST_TO_ADDR
// hc_gallery =  ;
38643: LD_ADDR_OWVAR 33
38647: PUSH
38648: LD_STRING 
38650: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38651: LD_INT 0
38653: PPUSH
38654: LD_INT 8
38656: PPUSH
38657: CALL_OW 381
// un = CreateHuman ;
38661: LD_ADDR_VAR 0 3
38665: PUSH
38666: CALL_OW 44
38670: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38671: LD_VAR 0 3
38675: PPUSH
38676: LD_INT 26
38678: PPUSH
38679: LD_INT 0
38681: PPUSH
38682: CALL_OW 49
// end ;
38686: GO 38632
38688: POP
38689: POP
// for i := 1 to 4 do
38690: LD_ADDR_VAR 0 2
38694: PUSH
38695: DOUBLE
38696: LD_INT 1
38698: DEC
38699: ST_TO_ADDR
38700: LD_INT 4
38702: PUSH
38703: FOR_TO
38704: IFFALSE 38759
// begin hc_name =  ;
38706: LD_ADDR_OWVAR 26
38710: PUSH
38711: LD_STRING 
38713: ST_TO_ADDR
// hc_gallery =  ;
38714: LD_ADDR_OWVAR 33
38718: PUSH
38719: LD_STRING 
38721: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38722: LD_INT 0
38724: PPUSH
38725: LD_INT 8
38727: PPUSH
38728: CALL_OW 384
// un = CreateHuman ;
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: CALL_OW 44
38741: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38742: LD_VAR 0 3
38746: PPUSH
38747: LD_INT 26
38749: PPUSH
38750: LD_INT 0
38752: PPUSH
38753: CALL_OW 49
// end ;
38757: GO 38703
38759: POP
38760: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38761: LD_ADDR_VAR 0 2
38765: PUSH
38766: DOUBLE
38767: LD_INT 1
38769: DEC
38770: ST_TO_ADDR
38771: LD_INT 8
38773: PUSH
38774: LD_INT 9
38776: PUSH
38777: LD_INT 10
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: PUSH
38785: LD_OWVAR 67
38789: ARRAY
38790: PUSH
38791: FOR_TO
38792: IFFALSE 38880
// begin vc_engine = 3 ;
38794: LD_ADDR_OWVAR 39
38798: PUSH
38799: LD_INT 3
38801: ST_TO_ADDR
// vc_control = 5 ;
38802: LD_ADDR_OWVAR 38
38806: PUSH
38807: LD_INT 5
38809: ST_TO_ADDR
// vc_chassis = 14 ;
38810: LD_ADDR_OWVAR 37
38814: PUSH
38815: LD_INT 14
38817: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38818: LD_ADDR_OWVAR 40
38822: PUSH
38823: LD_INT 27
38825: PUSH
38826: LD_INT 26
38828: PUSH
38829: LD_INT 28
38831: PUSH
38832: LD_INT 25
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PPUSH
38844: LD_INT 3
38846: PPUSH
38847: CALL_OW 12
38851: ARRAY
38852: ST_TO_ADDR
// veh = CreateVehicle ;
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: CALL_OW 45
38862: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38863: LD_VAR 0 4
38867: PPUSH
38868: LD_INT 26
38870: PPUSH
38871: LD_INT 0
38873: PPUSH
38874: CALL_OW 49
// end ;
38878: GO 38791
38880: POP
38881: POP
// vc_chassis := 31 ;
38882: LD_ADDR_OWVAR 37
38886: PUSH
38887: LD_INT 31
38889: ST_TO_ADDR
// vc_control := control_rider ;
38890: LD_ADDR_OWVAR 38
38894: PUSH
38895: LD_INT 4
38897: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38898: LD_ADDR_VAR 0 5
38902: PUSH
38903: CALL_OW 45
38907: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38908: LD_VAR 0 5
38912: PPUSH
38913: LD_INT 26
38915: PPUSH
38916: LD_INT 0
38918: PPUSH
38919: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38923: LD_EXP 31
38927: PPUSH
38928: LD_VAR 0 5
38932: PPUSH
38933: CALL_OW 52
// end ; end_of_file
38937: LD_VAR 0 1
38941: RET
// every 1 1$30 trigger missionStage > 0 do
38942: LD_EXP 101
38946: PUSH
38947: LD_INT 0
38949: GREATER
38950: IFFALSE 38977
38952: GO 38954
38954: DISABLE
// begin enable ;
38955: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38956: LD_INT 3
38958: PPUSH
38959: LD_INT 5
38961: PPUSH
38962: CALL_OW 12
38966: PPUSH
38967: LD_INT 27
38969: PPUSH
38970: LD_INT 1
38972: PPUSH
38973: CALL_OW 55
// end ; end_of_file
38977: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38978: LD_EXP 101
38982: PUSH
38983: LD_INT 7
38985: EQUAL
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 21
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PPUSH
39011: CALL_OW 69
39015: PUSH
39016: LD_INT 0
39018: EQUAL
39019: AND
39020: PUSH
39021: LD_INT 22
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 21
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 50
39043: PUSH
39044: EMPTY
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PPUSH
39052: CALL_OW 69
39056: PUSH
39057: LD_INT 0
39059: EQUAL
39060: AND
39061: IFFALSE 39550
39063: GO 39065
39065: DISABLE
// begin DialogueOn ;
39066: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39070: LD_EXP 1
39074: PPUSH
39075: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
39079: LD_EXP 1
39083: PPUSH
39084: LD_STRING D20-JMM-1
39086: PPUSH
39087: CALL_OW 88
// if IsOK ( Joan ) then
39091: LD_EXP 2
39095: PPUSH
39096: CALL_OW 302
39100: IFFALSE 39114
// Say ( Joan , D20-Joan-1 ) ;
39102: LD_EXP 2
39106: PPUSH
39107: LD_STRING D20-Joan-1
39109: PPUSH
39110: CALL_OW 88
// if IsOk ( Lisa ) then
39114: LD_EXP 4
39118: PPUSH
39119: CALL_OW 302
39123: IFFALSE 39137
// Say ( Lisa , D20-Lisa-1 ) ;
39125: LD_EXP 4
39129: PPUSH
39130: LD_STRING D20-Lisa-1
39132: PPUSH
39133: CALL_OW 88
// if IsOk ( Donaldson ) then
39137: LD_EXP 5
39141: PPUSH
39142: CALL_OW 302
39146: IFFALSE 39160
// Say ( Donaldson , D20-Don-1 ) ;
39148: LD_EXP 5
39152: PPUSH
39153: LD_STRING D20-Don-1
39155: PPUSH
39156: CALL_OW 88
// if IsOK ( Cornel ) then
39160: LD_EXP 12
39164: PPUSH
39165: CALL_OW 302
39169: IFFALSE 39183
// Say ( Cornel , D20-Corn-1 ) ;
39171: LD_EXP 12
39175: PPUSH
39176: LD_STRING D20-Corn-1
39178: PPUSH
39179: CALL_OW 88
// if IsOk ( Denis ) then
39183: LD_EXP 8
39187: PPUSH
39188: CALL_OW 302
39192: IFFALSE 39206
// Say ( Denis , D20-Den-1 ) ;
39194: LD_EXP 8
39198: PPUSH
39199: LD_STRING D20-Den-1
39201: PPUSH
39202: CALL_OW 88
// if IsOk ( Bobby ) then
39206: LD_EXP 6
39210: PPUSH
39211: CALL_OW 302
39215: IFFALSE 39229
// Say ( Bobby , D20-Bobby-1 ) ;
39217: LD_EXP 6
39221: PPUSH
39222: LD_STRING D20-Bobby-1
39224: PPUSH
39225: CALL_OW 88
// if IsOk ( Gladstone ) then
39229: LD_EXP 10
39233: PPUSH
39234: CALL_OW 302
39238: IFFALSE 39252
// Say ( Gladstone , D20-Glad-1 ) ;
39240: LD_EXP 10
39244: PPUSH
39245: LD_STRING D20-Glad-1
39247: PPUSH
39248: CALL_OW 88
// if IsOk ( Cyrus ) then
39252: LD_EXP 7
39256: PPUSH
39257: CALL_OW 302
39261: IFFALSE 39275
// Say ( Cyrus , D20-Cyrus-1 ) ;
39263: LD_EXP 7
39267: PPUSH
39268: LD_STRING D20-Cyrus-1
39270: PPUSH
39271: CALL_OW 88
// if IsOk ( Stevens ) then
39275: LD_EXP 3
39279: PPUSH
39280: CALL_OW 302
39284: IFFALSE 39298
// Say ( Stevens , D20-Huck-1 ) ;
39286: LD_EXP 3
39290: PPUSH
39291: LD_STRING D20-Huck-1
39293: PPUSH
39294: CALL_OW 88
// if IsOk ( Brown ) then
39298: LD_EXP 9
39302: PPUSH
39303: CALL_OW 302
39307: IFFALSE 39321
// Say ( Brown , D20-Brown-1 ) ;
39309: LD_EXP 9
39313: PPUSH
39314: LD_STRING D20-Brown-1
39316: PPUSH
39317: CALL_OW 88
// if IsOk ( Gary ) then
39321: LD_EXP 13
39325: PPUSH
39326: CALL_OW 302
39330: IFFALSE 39344
// Say ( Gary , D20-Gary-1 ) ;
39332: LD_EXP 13
39336: PPUSH
39337: LD_STRING D20-Gary-1
39339: PPUSH
39340: CALL_OW 88
// if IsOk ( Connie ) then
39344: LD_EXP 16
39348: PPUSH
39349: CALL_OW 302
39353: IFFALSE 39367
// Say ( Connie , D20-Con-1 ) ;
39355: LD_EXP 16
39359: PPUSH
39360: LD_STRING D20-Con-1
39362: PPUSH
39363: CALL_OW 88
// if IsOk ( Kurt ) then
39367: LD_EXP 30
39371: PPUSH
39372: CALL_OW 302
39376: IFFALSE 39390
// Say ( Kurt , D20-Kurt-1 ) ;
39378: LD_EXP 30
39382: PPUSH
39383: LD_STRING D20-Kurt-1
39385: PPUSH
39386: CALL_OW 88
// if IsOk ( Kikuchi ) then
39390: LD_EXP 15
39394: PPUSH
39395: CALL_OW 302
39399: IFFALSE 39413
// Say ( Kikuchi , D20-Yam-1 ) ;
39401: LD_EXP 15
39405: PPUSH
39406: LD_STRING D20-Yam-1
39408: PPUSH
39409: CALL_OW 88
// if IsOk ( Frank ) then
39413: LD_EXP 14
39417: PPUSH
39418: CALL_OW 302
39422: IFFALSE 39436
// Say ( Frank , D20-Frank-1 ) ;
39424: LD_EXP 14
39428: PPUSH
39429: LD_STRING D20-Frank-1
39431: PPUSH
39432: CALL_OW 88
// DialogueOff ;
39436: CALL_OW 7
// if AllianceEscape = 1 then
39440: LD_EXP 91
39444: PUSH
39445: LD_INT 1
39447: EQUAL
39448: IFFALSE 39462
// AddMedal ( Roth , 1 ) else
39450: LD_STRING Roth
39452: PPUSH
39453: LD_INT 1
39455: PPUSH
39456: CALL_OW 101
39460: GO 39473
// AddMedal ( Roth , - 1 ) ;
39462: LD_STRING Roth
39464: PPUSH
39465: LD_INT 1
39467: NEG
39468: PPUSH
39469: CALL_OW 101
// if behemothStatus = 1 then
39473: LD_EXP 60
39477: PUSH
39478: LD_INT 1
39480: EQUAL
39481: IFFALSE 39495
// AddMedal ( Project , 1 ) else
39483: LD_STRING Project
39485: PPUSH
39486: LD_INT 1
39488: PPUSH
39489: CALL_OW 101
39493: GO 39506
// AddMedal ( Project , - 1 ) ;
39495: LD_STRING Project
39497: PPUSH
39498: LD_INT 1
39500: NEG
39501: PPUSH
39502: CALL_OW 101
// if unitLost = 0 then
39506: LD_EXP 98
39510: PUSH
39511: LD_INT 0
39513: EQUAL
39514: IFFALSE 39528
// AddMedal ( NoLosses , 1 ) else
39516: LD_STRING NoLosses
39518: PPUSH
39519: LD_INT 1
39521: PPUSH
39522: CALL_OW 101
39526: GO 39539
// AddMedal ( NoLosses , - 1 ) ;
39528: LD_STRING NoLosses
39530: PPUSH
39531: LD_INT 1
39533: NEG
39534: PPUSH
39535: CALL_OW 101
// GiveMedals ( MAIN ) ;
39539: LD_STRING MAIN
39541: PPUSH
39542: CALL_OW 102
// YouWin ;
39546: CALL_OW 103
// end ; end_of_file
39550: END
// every 0 0$1 trigger IsDead ( JMM ) do
39551: LD_EXP 1
39555: PPUSH
39556: CALL_OW 301
39560: IFFALSE 39572
39562: GO 39564
39564: DISABLE
// YouLost ( JMM ) ;
39565: LD_STRING JMM
39567: PPUSH
39568: CALL_OW 104
39572: END
