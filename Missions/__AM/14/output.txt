// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1401 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Coonie , false ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Coonie
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1162 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1155
// SaveCharacters ( i , ident ) ;
1139: LD_VAR 0 4
1143: PPUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 38
1153: GO 1136
1155: POP
1156: POP
// end ;
1157: LD_VAR 0 3
1161: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// for i = 1 to count do
1168: LD_ADDR_VAR 0 8
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_VAR 0 6
1182: PUSH
1183: FOR_TO
1184: IFFALSE 1265
// begin uc_side = side ;
1186: LD_ADDR_OWVAR 20
1190: PUSH
1191: LD_VAR 0 1
1195: ST_TO_ADDR
// uc_nation = nation ;
1196: LD_ADDR_OWVAR 21
1200: PUSH
1201: LD_VAR 0 2
1205: ST_TO_ADDR
// hc_gallery =  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name =  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 380
// un = CreateHuman ;
1239: LD_ADDR_VAR 0 10
1243: PUSH
1244: CALL_OW 44
1248: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1249: LD_VAR 0 10
1253: PPUSH
1254: LD_VAR 0 3
1258: PPUSH
1259: CALL_OW 52
// end ;
1263: GO 1183
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 7
1271: RET
// export function Query1 ; begin
1272: LD_INT 0
1274: PPUSH
// case query ( Q1 ) of 1 :
1275: LD_STRING Q1
1277: PPUSH
1278: CALL_OW 97
1282: PUSH
1283: LD_INT 1
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1302
1291: POP
// result = 1 ; 2 :
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 1
1299: ST_TO_ADDR
1300: GO 1322
1302: LD_INT 2
1304: DOUBLE
1305: EQUAL
1306: IFTRUE 1310
1308: GO 1321
1310: POP
// result = 2 ; end ;
1311: LD_ADDR_VAR 0 1
1315: PUSH
1316: LD_INT 2
1318: ST_TO_ADDR
1319: GO 1322
1321: POP
// end ;
1322: LD_VAR 0 1
1326: RET
// export function Query2 ; begin
1327: LD_INT 0
1329: PPUSH
// case query ( Q2J ) of 1 :
1330: LD_STRING Q2J
1332: PPUSH
1333: CALL_OW 97
1337: PUSH
1338: LD_INT 1
1340: DOUBLE
1341: EQUAL
1342: IFTRUE 1346
1344: GO 1357
1346: POP
// result = 1 ; 2 :
1347: LD_ADDR_VAR 0 1
1351: PUSH
1352: LD_INT 1
1354: ST_TO_ADDR
1355: GO 1396
1357: LD_INT 2
1359: DOUBLE
1360: EQUAL
1361: IFTRUE 1365
1363: GO 1376
1365: POP
// result = 2 ; 2 :
1366: LD_ADDR_VAR 0 1
1370: PUSH
1371: LD_INT 2
1373: ST_TO_ADDR
1374: GO 1396
1376: LD_INT 2
1378: DOUBLE
1379: EQUAL
1380: IFTRUE 1384
1382: GO 1395
1384: POP
// result = 3 ; end ;
1385: LD_ADDR_VAR 0 1
1389: PUSH
1390: LD_INT 3
1392: ST_TO_ADDR
1393: GO 1396
1395: POP
// end ;
1396: LD_VAR 0 1
1400: RET
// export function PrepareDifficulty ; begin
1401: LD_INT 0
1403: PPUSH
// if difficulty = 1 then
1404: LD_OWVAR 67
1408: PUSH
1409: LD_INT 1
1411: EQUAL
1412: IFFALSE 1492
// begin SetTech ( 57 , 3 , state_disabled ) ;
1414: LD_INT 57
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1427: LD_INT 58
1429: PPUSH
1430: LD_INT 3
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1440: LD_INT 59
1442: PPUSH
1443: LD_INT 3
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1453: LD_INT 51
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1466: LD_INT 52
1468: PPUSH
1469: LD_INT 3
1471: PPUSH
1472: LD_INT 0
1474: PPUSH
1475: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1479: LD_INT 53
1481: PPUSH
1482: LD_INT 3
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 322
// end ; if difficulty = 2 then
1492: LD_OWVAR 67
1496: PUSH
1497: LD_INT 2
1499: EQUAL
1500: IFFALSE 1580
// begin SetTech ( 57 , 3 , state_enabled ) ;
1502: LD_INT 57
1504: PPUSH
1505: LD_INT 3
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1515: LD_INT 58
1517: PPUSH
1518: LD_INT 3
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 0
1536: PPUSH
1537: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1541: LD_INT 51
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 1
1549: PPUSH
1550: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1554: LD_INT 52
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1567: LD_INT 53
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 322
// end ; if difficulty = 3 then
1580: LD_OWVAR 67
1584: PUSH
1585: LD_INT 3
1587: EQUAL
1588: IFFALSE 1668
// begin SetTech ( 57 , 3 , state_enabled ) ;
1590: LD_INT 57
1592: PPUSH
1593: LD_INT 3
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1603: LD_INT 58
1605: PPUSH
1606: LD_INT 3
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1616: LD_INT 59
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1629: LD_INT 51
1631: PPUSH
1632: LD_INT 3
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1642: LD_INT 52
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: PPUSH
1651: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1655: LD_INT 53
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: CALL_OW 322
// end ; end ;
1668: LD_VAR 0 1
1672: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1680: LD_ADDR_VAR 0 8
1684: PUSH
1685: LD_INT 48
1687: PUSH
1688: LD_INT 49
1690: PUSH
1691: LD_INT 50
1693: PUSH
1694: LD_INT 20
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: LD_INT 51
1702: PUSH
1703: LD_INT 52
1705: PUSH
1706: LD_INT 69
1708: PUSH
1709: LD_INT 39
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 40
1717: PUSH
1718: LD_INT 53
1720: PUSH
1721: LD_INT 71
1723: PUSH
1724: LD_INT 57
1726: PUSH
1727: LD_INT 58
1729: PUSH
1730: LD_INT 44
1732: PUSH
1733: LD_INT 32
1735: PUSH
1736: LD_INT 27
1738: PUSH
1739: LD_INT 23
1741: PUSH
1742: LD_INT 33
1744: PUSH
1745: LD_INT 59
1747: PUSH
1748: LD_INT 54
1750: PUSH
1751: LD_INT 55
1753: PUSH
1754: LD_INT 56
1756: PUSH
1757: LD_INT 63
1759: PUSH
1760: LD_INT 64
1762: PUSH
1763: LD_INT 65
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 31
1771: PUSH
1772: LD_INT 21
1774: PUSH
1775: LD_INT 22
1777: PUSH
1778: LD_INT 25
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: DOUBLE
1821: LD_INT 1
1823: DEC
1824: ST_TO_ADDR
1825: LD_VAR 0 8
1829: PUSH
1830: FOR_TO
1831: IFFALSE 1907
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1833: LD_VAR 0 8
1837: PUSH
1838: LD_VAR 0 5
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 1
1848: PPUSH
1849: CALL_OW 321
1853: PUSH
1854: LD_INT 1
1856: EQUAL
1857: PUSH
1858: LD_VAR 0 8
1862: PUSH
1863: LD_VAR 0 5
1867: ARRAY
1868: PPUSH
1869: LD_VAR 0 3
1873: PPUSH
1874: CALL_OW 482
1878: PUSH
1879: LD_INT 1
1881: EQUAL
1882: AND
1883: IFFALSE 1905
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_VAR 0 8
1894: PUSH
1895: LD_VAR 0 5
1899: ARRAY
1900: PPUSH
1901: CALL_OW 184
1905: GO 1830
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 4
1913: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1922: LD_ADDR_VAR 0 8
1926: PUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 313
1936: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1937: LD_ADDR_VAR 0 9
1941: PUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 22
1949: PUSH
1950: LD_VAR 0 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 25
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 24
1971: PUSH
1972: LD_INT 750
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: LD_INT 54
1984: PUSH
1985: EMPTY
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: PPUSH
1998: CALL_OW 70
2002: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2003: LD_ADDR_VAR 0 6
2007: PUSH
2008: LD_VAR 0 3
2012: PPUSH
2013: LD_INT 22
2015: PUSH
2016: LD_VAR 0 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 21
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 3
2037: PUSH
2038: LD_INT 24
2040: PUSH
2041: LD_INT 1000
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: PPUSH
2060: CALL_OW 70
2064: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2065: LD_VAR 0 6
2069: NOT
2070: PUSH
2071: LD_INT 22
2073: PUSH
2074: LD_VAR 0 1
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 25
2085: PUSH
2086: LD_INT 2
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 24
2095: PUSH
2096: LD_INT 250
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PPUSH
2108: CALL_OW 69
2112: NOT
2113: AND
2114: IFFALSE 2118
// exit ;
2116: GO 2300
// if buildings_list > 0 and engineerOkInside then
2118: LD_VAR 0 6
2122: PUSH
2123: LD_INT 0
2125: GREATER
2126: PUSH
2127: LD_VAR 0 8
2131: AND
2132: IFFALSE 2143
// ComExitBuilding ( engineerOkInside ) ;
2134: LD_VAR 0 8
2138: PPUSH
2139: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2143: LD_VAR 0 6
2147: PUSH
2148: LD_INT 0
2150: GREATER
2151: PUSH
2152: LD_VAR 0 9
2156: PUSH
2157: LD_INT 0
2159: GREATER
2160: AND
2161: IFFALSE 2181
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2163: LD_VAR 0 9
2167: PPUSH
2168: LD_VAR 0 6
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2181: LD_VAR 0 6
2185: PUSH
2186: LD_INT 0
2188: EQUAL
2189: PUSH
2190: LD_VAR 0 4
2194: PUSH
2195: LD_INT 0
2197: EQUAL
2198: AND
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: LD_INT 0
2207: GREATER
2208: AND
2209: IFFALSE 2225
// ComEnterUnit ( engineerOkOutside , building ) ;
2211: LD_VAR 0 9
2215: PPUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2225: LD_VAR 0 9
2229: PUSH
2230: LD_INT 0
2232: GREATER
2233: PUSH
2234: LD_VAR 0 6
2238: PUSH
2239: LD_INT 0
2241: EQUAL
2242: AND
2243: PUSH
2244: LD_VAR 0 4
2248: PUSH
2249: LD_INT 0
2251: GREATER
2252: AND
2253: IFFALSE 2300
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2255: LD_VAR 0 9
2259: PPUSH
2260: LD_VAR 0 4
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PPUSH
2269: LD_VAR 0 4
2273: PUSH
2274: LD_INT 2
2276: ARRAY
2277: PPUSH
2278: LD_VAR 0 4
2282: PUSH
2283: LD_INT 3
2285: ARRAY
2286: PPUSH
2287: LD_VAR 0 4
2291: PUSH
2292: LD_INT 4
2294: ARRAY
2295: PPUSH
2296: CALL_OW 145
// end ;
2300: LD_VAR 0 5
2304: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2316: LD_ADDR_VAR 0 6
2320: PUSH
2321: LD_INT 22
2323: PUSH
2324: LD_VAR 0 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 25
2335: PUSH
2336: LD_INT 4
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 23
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 24
2355: PUSH
2356: LD_INT 251
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 69
2373: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2374: LD_ADDR_VAR 0 7
2378: PUSH
2379: LD_VAR 0 3
2383: PPUSH
2384: LD_INT 22
2386: PUSH
2387: LD_VAR 0 1
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 23
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 25
2408: PUSH
2409: LD_INT 4
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 50
2418: PUSH
2419: EMPTY
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 70
2432: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2433: LD_ADDR_VAR 0 10
2437: PUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 22
2445: PUSH
2446: LD_VAR 0 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 21
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 3
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 24
2487: PUSH
2488: LD_INT 750
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: PPUSH
2505: CALL_OW 70
2509: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2510: LD_ADDR_VAR 0 11
2514: PUSH
2515: LD_VAR 0 2
2519: PPUSH
2520: LD_INT 22
2522: PUSH
2523: LD_VAR 0 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 1
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 25
2547: PUSH
2548: LD_INT 3
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 1000
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 70
2586: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2587: LD_VAR 0 10
2591: NOT
2592: PUSH
2593: LD_VAR 0 11
2597: NOT
2598: AND
2599: PUSH
2600: LD_VAR 0 6
2604: NOT
2605: AND
2606: IFFALSE 2610
// exit ;
2608: GO 2844
// if damageUnits > 0 and sci_list > 0 then
2610: LD_VAR 0 10
2614: PUSH
2615: LD_INT 0
2617: GREATER
2618: PUSH
2619: LD_VAR 0 6
2623: PUSH
2624: LD_INT 0
2626: GREATER
2627: AND
2628: IFFALSE 2644
// ComMoveToArea ( damageUnits , healArea ) ;
2630: LD_VAR 0 10
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2644: LD_VAR 0 11
2648: PUSH
2649: LD_INT 0
2651: GREATER
2652: PUSH
2653: LD_VAR 0 6
2657: PUSH
2658: LD_INT 0
2660: GREATER
2661: AND
2662: IFFALSE 2673
// ComExitBuilding ( sci_list ) ;
2664: LD_VAR 0 6
2668: PPUSH
2669: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2673: LD_VAR 0 11
2677: PUSH
2678: LD_INT 0
2680: GREATER
2681: PUSH
2682: LD_VAR 0 7
2686: PUSH
2687: LD_INT 0
2689: GREATER
2690: AND
2691: IFFALSE 2711
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2693: LD_VAR 0 7
2697: PPUSH
2698: LD_VAR 0 11
2702: PUSH
2703: LD_INT 1
2705: ARRAY
2706: PPUSH
2707: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2711: LD_VAR 0 10
2715: PUSH
2716: LD_INT 0
2718: EQUAL
2719: PUSH
2720: LD_VAR 0 11
2724: PUSH
2725: LD_INT 0
2727: EQUAL
2728: AND
2729: PUSH
2730: LD_VAR 0 7
2734: PUSH
2735: LD_INT 0
2737: GREATER
2738: AND
2739: IFFALSE 2844
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2741: LD_ADDR_VAR 0 12
2745: PUSH
2746: LD_INT 22
2748: PUSH
2749: LD_VAR 0 1
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 21
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 30
2770: PUSH
2771: LD_INT 8
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2788: LD_ADDR_VAR 0 13
2792: PUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_VAR 0 12
2800: PPUSH
2801: CALL_OW 12
2805: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2806: LD_VAR 0 7
2810: PPUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 60
2816: PUSH
2817: EMPTY
2818: LIST
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PPUSH
2829: LD_VAR 0 12
2833: PUSH
2834: LD_VAR 0 13
2838: ARRAY
2839: PPUSH
2840: CALL_OW 120
// end ; end ;
2844: LD_VAR 0 5
2848: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2849: LD_INT 0
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
// tmpTab = [ ] ;
2855: LD_ADDR_VAR 0 6
2859: PUSH
2860: EMPTY
2861: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2862: LD_INT 22
2864: PUSH
2865: LD_VAR 0 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 30
2876: PUSH
2877: LD_INT 32
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 0
2895: GREATER
2896: IFFALSE 2979
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: LD_INT 22
2905: PUSH
2906: LD_VAR 0 1
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2977
// begin for j in UnitsInside ( i ) do
2937: LD_ADDR_VAR 0 5
2941: PUSH
2942: LD_VAR 0 4
2946: PPUSH
2947: CALL_OW 313
2951: PUSH
2952: FOR_IN
2953: IFFALSE 2973
// tmpTab = tmpTab ^ j ;
2955: LD_ADDR_VAR 0 6
2959: PUSH
2960: LD_VAR 0 6
2964: PUSH
2965: LD_VAR 0 5
2969: ADD
2970: ST_TO_ADDR
2971: GO 2952
2973: POP
2974: POP
// end ;
2975: GO 2934
2977: POP
2978: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2979: LD_VAR 0 6
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: CALL_OW 250
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: CALL_OW 251
3003: PPUSH
3004: CALL_OW 114
// end ;
3008: LD_VAR 0 3
3012: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3013: LD_INT 0
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// enable ;
3019: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3020: LD_ADDR_VAR 0 7
3024: PUSH
3025: LD_VAR 0 3
3029: PPUSH
3030: CALL_OW 435
3034: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3035: LD_ADDR_VAR 0 6
3039: PUSH
3040: LD_INT 22
3042: PUSH
3043: LD_VAR 0 1
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 34
3054: PUSH
3055: LD_VAR 0 2
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 69
3072: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3073: LD_VAR 0 6
3077: PUSH
3078: LD_INT 0
3080: GREATER
3081: PUSH
3082: LD_VAR 0 3
3086: PPUSH
3087: CALL_OW 435
3091: AND
3092: PUSH
3093: LD_VAR 0 7
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3151
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3104: LD_VAR 0 6
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: LD_VAR 0 7
3117: PUSH
3118: LD_INT 1
3120: ARRAY
3121: PPUSH
3122: LD_VAR 0 7
3126: PUSH
3127: LD_INT 2
3129: ARRAY
3130: PPUSH
3131: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3135: LD_VAR 0 6
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: LD_INT 100
3146: PPUSH
3147: CALL_OW 240
// end ; end ;
3151: LD_VAR 0 4
3155: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_INT 22
3170: PUSH
3171: LD_VAR 0 1
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 30
3185: PUSH
3186: LD_INT 31
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 30
3195: PUSH
3196: LD_INT 32
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 33
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 30
3215: PUSH
3216: LD_INT 4
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 30
3225: PUSH
3226: LD_INT 5
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PPUSH
3245: CALL_OW 69
3249: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3250: LD_ADDR_VAR 0 7
3254: PUSH
3255: LD_INT 22
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 21
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 58
3279: PUSH
3280: EMPTY
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PPUSH
3288: CALL_OW 69
3292: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3293: LD_VAR 0 6
3297: PUSH
3298: LD_INT 0
3300: GREATER
3301: PUSH
3302: LD_VAR 0 7
3306: PUSH
3307: LD_INT 0
3309: GREATER
3310: AND
3311: IFFALSE 3381
// begin for i in turretsList do
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: FOR_IN
3324: IFFALSE 3379
// begin for j in enemyBuildings do
3326: LD_ADDR_VAR 0 5
3330: PUSH
3331: LD_VAR 0 7
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3375
// begin if GetDistUnits ( i , j ) < 20 then
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: CALL_OW 296
3353: PUSH
3354: LD_INT 20
3356: LESS
3357: IFFALSE 3373
// begin ComAttackUnit ( i , j ) ;
3359: LD_VAR 0 4
3363: PPUSH
3364: LD_VAR 0 5
3368: PPUSH
3369: CALL_OW 115
// end ; end ;
3373: GO 3336
3375: POP
3376: POP
// end ;
3377: GO 3323
3379: POP
3380: POP
// end ; end ;
3381: LD_VAR 0 3
3385: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
// for i = 1 to vehCount do
3390: LD_ADDR_VAR 0 9
3394: PUSH
3395: DOUBLE
3396: LD_INT 1
3398: DEC
3399: ST_TO_ADDR
3400: LD_VAR 0 3
3404: PUSH
3405: FOR_TO
3406: IFFALSE 3453
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3408: LD_VAR 0 2
3412: PPUSH
3413: LD_VAR 0 7
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_VAR 0 6
3427: PPUSH
3428: LD_VAR 0 4
3432: PUSH
3433: LD_INT 1
3435: PPUSH
3436: LD_VAR 0 4
3440: PPUSH
3441: CALL_OW 12
3445: ARRAY
3446: PPUSH
3447: CALL_OW 185
3451: GO 3405
3453: POP
3454: POP
// end ;
3455: LD_VAR 0 8
3459: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3468: LD_EXP 11
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: LD_INT 3
3478: PUSH
3479: LD_INT 4
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: GREATEREQUAL
3493: PUSH
3494: LD_EXP 12
3498: PUSH
3499: LD_INT 1
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: PUSH
3513: LD_OWVAR 67
3517: ARRAY
3518: GREATEREQUAL
3519: AND
3520: IFFALSE 3781
// begin repeat wait ( 0 0$1 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// for j in russianTanks do
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: LD_EXP 11
3538: PUSH
3539: FOR_IN
3540: IFFALSE 3769
// begin if GetSide ( j ) <> side then
3542: LD_VAR 0 4
3546: PPUSH
3547: CALL_OW 255
3551: PUSH
3552: LD_VAR 0 1
3556: NONEQUAL
3557: IFFALSE 3570
// begin ComStop ( j ) ;
3559: LD_VAR 0 4
3563: PPUSH
3564: CALL_OW 141
// continue ;
3568: GO 3539
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_INT 81
3577: PUSH
3578: LD_VAR 0 1
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 101
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PPUSH
3601: CALL_OW 69
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL_OW 74
3615: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3616: LD_ADDR_VAR 0 7
3620: PUSH
3621: LD_INT 81
3623: PUSH
3624: LD_VAR 0 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 101
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 59
3648: PUSH
3649: EMPTY
3650: LIST
3651: PUSH
3652: LD_INT 21
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 21
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PPUSH
3691: LD_VAR 0 4
3695: PPUSH
3696: CALL_OW 74
3700: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3701: LD_VAR 0 4
3705: PPUSH
3706: LD_VAR 0 6
3710: PPUSH
3711: CALL_OW 296
3715: PUSH
3716: LD_INT 8
3718: PLUS
3719: PUSH
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 7
3729: PPUSH
3730: CALL_OW 296
3734: LESS
3735: IFFALSE 3753
// ComAttackUnit ( j , target1 ) else
3737: LD_VAR 0 4
3741: PPUSH
3742: LD_VAR 0 6
3746: PPUSH
3747: CALL_OW 115
3751: GO 3767
// ComAttackUnit ( j , target2 ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: LD_VAR 0 7
3762: PPUSH
3763: CALL_OW 115
// end ;
3767: GO 3539
3769: POP
3770: POP
// until russianTanks = 0 ;
3771: LD_EXP 11
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3522
// end ; end ;
3781: LD_VAR 0 2
3785: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3786: LD_INT 0
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3794: LD_ADDR_VAR 0 6
3798: PUSH
3799: LD_INT 22
3801: PUSH
3802: LD_VAR 0 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 25
3813: PUSH
3814: LD_INT 9
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3830: LD_ADDR_VAR 0 7
3834: PUSH
3835: LD_INT 81
3837: PUSH
3838: LD_VAR 0 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 21
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: CALL_OW 12
3888: ST_TO_ADDR
// for i = 1 to list do
3889: LD_ADDR_VAR 0 5
3893: PUSH
3894: DOUBLE
3895: LD_INT 1
3897: DEC
3898: ST_TO_ADDR
3899: LD_VAR 0 6
3903: PUSH
3904: FOR_TO
3905: IFFALSE 4107
// for ta in filter do
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_VAR 0 7
3916: PUSH
3917: FOR_IN
3918: IFFALSE 4103
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3920: LD_VAR 0 6
3924: PUSH
3925: LD_VAR 0 5
3929: ARRAY
3930: PPUSH
3931: LD_VAR 0 3
3935: PPUSH
3936: CALL_OW 296
3940: PUSH
3941: LD_INT 15
3943: LESSEQUAL
3944: IFFALSE 4101
// begin case c of 1 :
3946: LD_VAR 0 4
3950: PUSH
3951: LD_INT 1
3953: DOUBLE
3954: EQUAL
3955: IFTRUE 3959
3957: GO 3997
3959: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3960: LD_VAR 0 6
3964: PUSH
3965: LD_VAR 0 5
3969: ARRAY
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 250
3980: PPUSH
3981: LD_VAR 0 3
3985: PPUSH
3986: CALL_OW 251
3990: PPUSH
3991: CALL_OW 154
3995: GO 4101
3997: LD_INT 2
3999: DOUBLE
4000: EQUAL
4001: IFTRUE 4005
4003: GO 4069
4005: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4006: LD_VAR 0 6
4010: PUSH
4011: LD_VAR 0 5
4015: ARRAY
4016: PPUSH
4017: LD_VAR 0 3
4021: PPUSH
4022: CALL_OW 250
4026: PUSH
4027: LD_INT 1
4029: NEG
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: CALL_OW 12
4038: PLUS
4039: PPUSH
4040: LD_VAR 0 3
4044: PPUSH
4045: CALL_OW 251
4049: PUSH
4050: LD_INT 1
4052: NEG
4053: PPUSH
4054: LD_INT 1
4056: PPUSH
4057: CALL_OW 12
4061: PLUS
4062: PPUSH
4063: CALL_OW 153
4067: GO 4101
4069: LD_INT 3
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4077
4075: GO 4100
4077: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4078: LD_VAR 0 6
4082: PUSH
4083: LD_VAR 0 5
4087: ARRAY
4088: PPUSH
4089: LD_VAR 0 3
4093: PPUSH
4094: CALL_OW 115
4098: GO 4101
4100: POP
// end ; end ;
4101: GO 3917
4103: POP
4104: POP
4105: GO 3904
4107: POP
4108: POP
// end ;
4109: LD_VAR 0 2
4113: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4119: LD_EXP 11
4123: PUSH
4124: LD_INT 1
4126: GREATEREQUAL
4127: PUSH
4128: LD_EXP 12
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: LD_INT 2
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: GREATEREQUAL
4153: AND
4154: IFFALSE 4293
// repeat wait ( 0 0$3 ) ;
4156: LD_INT 105
4158: PPUSH
4159: CALL_OW 67
// if russianTimeLapsers > 0 then
4163: LD_EXP 12
4167: PUSH
4168: LD_INT 0
4170: GREATER
4171: IFFALSE 4283
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_EXP 12
4182: PPUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 60
4188: PUSH
4189: EMPTY
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 72
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4281
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4204: LD_ADDR_VAR 0 4
4208: PUSH
4209: LD_INT 81
4211: PUSH
4212: LD_VAR 0 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 101
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PPUSH
4240: LD_VAR 0 3
4244: PPUSH
4245: CALL_OW 74
4249: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_VAR 0 4
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_VAR 0 4
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ;
4279: GO 4201
4281: POP
4282: POP
// until russianTimeLapsers = 0 ;
4283: LD_EXP 12
4287: PUSH
4288: LD_INT 0
4290: EQUAL
4291: IFFALSE 4156
// end ;
4293: LD_VAR 0 2
4297: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4298: LD_INT 0
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4306: LD_ADDR_VAR 0 7
4310: PUSH
4311: LD_VAR 0 2
4315: PPUSH
4316: LD_INT 22
4318: PUSH
4319: LD_VAR 0 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 2
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 34
4340: PUSH
4341: LD_INT 52
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 70
4357: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: LD_INT 22
4370: PUSH
4371: LD_VAR 0 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 3
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 24
4395: PUSH
4396: LD_INT 1000
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: PPUSH
4415: CALL_OW 70
4419: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4420: LD_VAR 0 8
4424: PUSH
4425: LD_INT 0
4427: GREATER
4428: PUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: LD_INT 24
4436: PUSH
4437: LD_INT 750
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 72
4448: PUSH
4449: LD_INT 0
4451: GREATER
4452: AND
4453: IFFALSE 4473
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4455: LD_VAR 0 7
4459: PPUSH
4460: LD_VAR 0 8
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PPUSH
4469: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 0
4480: GREATER
4481: PUSH
4482: LD_VAR 0 8
4486: PUSH
4487: LD_INT 0
4489: EQUAL
4490: AND
4491: PUSH
4492: LD_EXP 10
4496: PUSH
4497: LD_INT 0
4499: GREATER
4500: AND
4501: IFFALSE 4548
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4503: LD_VAR 0 7
4507: PPUSH
4508: LD_EXP 10
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_EXP 10
4521: PUSH
4522: LD_INT 2
4524: ARRAY
4525: PPUSH
4526: LD_EXP 10
4530: PUSH
4531: LD_INT 3
4533: ARRAY
4534: PPUSH
4535: LD_EXP 10
4539: PUSH
4540: LD_INT 4
4542: ARRAY
4543: PPUSH
4544: CALL_OW 567
// end ; end_of_file
4548: LD_VAR 0 3
4552: RET
// every 0 0$1 do
4553: GO 4555
4555: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4556: LD_INT 3
4558: PPUSH
4559: LD_INT 14
4561: PPUSH
4562: LD_INT 3
4564: PPUSH
4565: CALL 1673 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4569: LD_INT 3
4571: PPUSH
4572: LD_INT 15
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL 1673 0 3
// end ;
4582: END
// every 0 0$1 trigger russianAI = 1 do
4583: LD_EXP 13
4587: PUSH
4588: LD_INT 1
4590: EQUAL
4591: IFFALSE 4704
4593: GO 4595
4595: DISABLE
// begin enable ;
4596: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4597: LD_INT 3
4599: PPUSH
4600: LD_INT 22
4602: PPUSH
4603: LD_INT 7
4605: PPUSH
4606: LD_EXP 10
4610: PPUSH
4611: CALL 1914 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4615: LD_INT 3
4617: PPUSH
4618: LD_INT 8
4620: PPUSH
4621: LD_INT 7
4623: PPUSH
4624: LD_INT 14
4626: PUSH
4627: LD_INT 15
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 1
4636: PPUSH
4637: LD_INT 2
4639: PPUSH
4640: CALL_OW 12
4644: ARRAY
4645: PPUSH
4646: CALL 2305 0 4
// AttackVehicles ( 3 ) ;
4650: LD_INT 3
4652: PPUSH
4653: CALL 3460 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4657: LD_INT 3
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: CALL 3156 0 2
// TimeLapsersAI ( 3 ) ;
4667: LD_INT 3
4669: PPUSH
4670: CALL 4114 0 1
// IntBazooka ( 3 ) ;
4674: LD_INT 3
4676: PPUSH
4677: CALL 3786 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4681: LD_INT 3
4683: PPUSH
4684: LD_INT 51
4686: PPUSH
4687: LD_INT 14
4689: PPUSH
4690: CALL 3013 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4694: LD_INT 3
4696: PPUSH
4697: LD_INT 7
4699: PPUSH
4700: CALL 4298 0 2
// end ;
4704: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4705: LD_INT 22
4707: PPUSH
4708: CALL_OW 303
4712: PUSH
4713: LD_INT 22
4715: PPUSH
4716: CALL_OW 255
4720: PUSH
4721: LD_INT 1
4723: EQUAL
4724: OR
4725: IFFALSE 4740
4727: GO 4729
4729: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4730: LD_INT 3
4732: PPUSH
4733: LD_INT 22
4735: PPUSH
4736: CALL 2849 0 2
4740: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 1
4748: EQUAL
4749: PUSH
4750: LD_INT 22
4752: PUSH
4753: LD_INT 3
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 21
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 50
4772: PUSH
4773: EMPTY
4774: LIST
4775: PUSH
4776: LD_INT 33
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 34
4791: PUSH
4792: LD_INT 46
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 34
4801: PUSH
4802: LD_INT 45
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 34
4811: PUSH
4812: LD_INT 44
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 34
4821: PUSH
4822: LD_INT 49
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 34
4831: PUSH
4832: LD_INT 47
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: PUSH
4859: LD_INT 0
4861: EQUAL
4862: AND
4863: IFFALSE 5050
4865: GO 4867
4867: DISABLE
// begin enable ;
4868: ENABLE
// if russianRocketsAvalaible = 1 then
4869: LD_EXP 14
4873: PUSH
4874: LD_INT 1
4876: EQUAL
4877: IFFALSE 4934
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: LD_INT 3
4887: PUSH
4888: LD_INT 4
4890: PUSH
4891: LD_INT 4
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: PUSH
4899: LD_OWVAR 67
4903: ARRAY
4904: PPUSH
4905: LD_INT 46
4907: PUSH
4908: LD_INT 45
4910: PUSH
4911: LD_INT 44
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 24
4927: PPUSH
4928: CALL 3386 0 7
4932: GO 4991
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: LD_INT 3
4942: PUSH
4943: LD_INT 4
4945: PUSH
4946: LD_INT 4
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_OWVAR 67
4958: ARRAY
4959: PPUSH
4960: LD_INT 46
4962: PUSH
4963: LD_INT 45
4965: PUSH
4966: LD_INT 44
4968: PUSH
4969: LD_INT 47
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 3
4983: PPUSH
4984: LD_INT 24
4986: PPUSH
4987: CALL 3386 0 7
// if russianTimeLapsers = 0 then
4991: LD_EXP 12
4995: PUSH
4996: LD_INT 0
4998: EQUAL
4999: IFFALSE 5050
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5001: LD_INT 3
5003: PPUSH
5004: LD_INT 40
5006: PPUSH
5007: LD_INT 1
5009: PUSH
5010: LD_INT 2
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PPUSH
5027: LD_INT 49
5029: PUSH
5030: LD_INT 49
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 3
5039: PPUSH
5040: LD_INT 3
5042: PPUSH
5043: LD_INT 24
5045: PPUSH
5046: CALL 3386 0 7
// end ; end_of_file
5050: END
// every 1 do var dec1 , dec2 ;
5051: GO 5053
5053: DISABLE
5054: LD_INT 0
5056: PPUSH
5057: PPUSH
// begin InGameOn ;
5058: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
5062: LD_INT 48
5064: PPUSH
5065: LD_STRING kappa
5067: PPUSH
5068: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5072: LD_INT 95
5074: PPUSH
5075: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5079: LD_INT 95
5081: PPUSH
5082: LD_INT 30
5084: PPUSH
5085: LD_INT 11
5087: PPUSH
5088: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5092: LD_INT 30
5094: PPUSH
5095: LD_INT 11
5097: PPUSH
5098: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5102: LD_EXP 5
5106: PPUSH
5107: LD_STRING D1-Pow-1
5109: PPUSH
5110: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5114: LD_EXP 1
5118: PPUSH
5119: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5123: LD_EXP 1
5127: PPUSH
5128: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D1-JMM-1
5139: PPUSH
5140: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5144: LD_EXP 5
5148: PPUSH
5149: LD_STRING D1-Pow-2
5151: PPUSH
5152: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5156: LD_EXP 1
5160: PPUSH
5161: LD_STRING D1-JMM-2
5163: PPUSH
5164: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5168: LD_EXP 1
5172: PPUSH
5173: LD_INT 95
5175: PPUSH
5176: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5180: LD_STRING M1
5182: PPUSH
5183: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5187: LD_INT 35
5189: PPUSH
5190: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_INT 95
5201: PPUSH
5202: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5206: LD_INT 95
5208: PPUSH
5209: LD_INT 51
5211: PPUSH
5212: LD_INT 21
5214: PPUSH
5215: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5219: LD_INT 95
5221: PPUSH
5222: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5226: LD_INT 95
5228: PPUSH
5229: LD_INT 5
5231: PPUSH
5232: CALL_OW 308
5236: IFFALSE 5187
// if JMMGirl = 1 then
5238: LD_EXP 7
5242: PUSH
5243: LD_INT 1
5245: EQUAL
5246: IFFALSE 5553
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5248: LD_EXP 2
5252: PPUSH
5253: LD_STRING D2J-Joan-1
5255: PPUSH
5256: CALL_OW 94
// dec1 = Query1 ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: CALL 1272 0 0
5269: ST_TO_ADDR
// if dec1 = 1 then
5270: LD_VAR 0 1
5274: PUSH
5275: LD_INT 1
5277: EQUAL
5278: IFFALSE 5529
// begin ComExitVehicle ( JMM ) ;
5280: LD_EXP 1
5284: PPUSH
5285: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5289: LD_EXP 1
5293: PPUSH
5294: LD_STRING D2J-JMM-1
5296: PPUSH
5297: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5301: LD_EXP 2
5305: PPUSH
5306: LD_STRING D2J-Joan-2
5308: PPUSH
5309: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5313: LD_EXP 1
5317: PPUSH
5318: LD_STRING D2J-JMM-2
5320: PPUSH
5321: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5325: LD_EXP 2
5329: PPUSH
5330: LD_STRING D2J-Joan-3
5332: PPUSH
5333: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5337: LD_EXP 5
5341: PPUSH
5342: LD_STRING DPowell-Pow-1
5344: PPUSH
5345: CALL_OW 94
// dec2 = Query2 ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL 1327 0 0
5358: ST_TO_ADDR
// if dec2 = 1 then
5359: LD_VAR 0 2
5363: PUSH
5364: LD_INT 1
5366: EQUAL
5367: IFFALSE 5409
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5369: LD_EXP 1
5373: PPUSH
5374: LD_STRING D2Ja-JMM-1
5376: PPUSH
5377: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5381: LD_EXP 2
5385: PPUSH
5386: LD_STRING D2Ja-Joan-1
5388: PPUSH
5389: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5393: LD_EXP 1
5397: PPUSH
5398: LD_STRING D2Ja-JMM-2
5400: PPUSH
5401: CALL_OW 88
// InGameOff ;
5405: CALL_OW 9
// end ; if dec2 = 2 then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_INT 2
5416: EQUAL
5417: IFFALSE 5493
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5419: LD_EXP 1
5423: PPUSH
5424: LD_STRING D2Jb-JMM-1
5426: PPUSH
5427: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D2Jb-Joan-1
5438: PPUSH
5439: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D2Jb-JMM-2
5450: PPUSH
5451: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5455: LD_EXP 2
5459: PPUSH
5460: LD_STRING D2Jb-Joan-2
5462: PPUSH
5463: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5467: LD_EXP 1
5471: PPUSH
5472: LD_STRING D2Jb-JMM-3
5474: PPUSH
5475: CALL_OW 88
// fastEnd = 1 ;
5479: LD_ADDR_EXP 15
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// FinishMission ;
5487: CALL 9388 0 0
// exit ;
5491: GO 6111
// end ; if dec2 = 3 then
5493: LD_VAR 0 2
5497: PUSH
5498: LD_INT 3
5500: EQUAL
5501: IFFALSE 5529
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5503: LD_EXP 2
5507: PPUSH
5508: LD_STRING D2Jc-Joan-1
5510: PPUSH
5511: CALL_OW 94
// fastEnd = 1 ;
5515: LD_ADDR_EXP 15
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// FinishMission ;
5523: CALL 9388 0 0
// exit ;
5527: GO 6111
// end ; end ; if dec1 = 2 then
5529: LD_VAR 0 1
5533: PUSH
5534: LD_INT 2
5536: EQUAL
5537: IFFALSE 5553
// begin fastEnd = 1 ;
5539: LD_ADDR_EXP 15
5543: PUSH
5544: LD_INT 1
5546: ST_TO_ADDR
// FinishMission ;
5547: CALL 9388 0 0
// exit ;
5551: GO 6111
// end ; end ; if JMMGirl = 2 then
5553: LD_EXP 7
5557: PUSH
5558: LD_INT 2
5560: EQUAL
5561: IFFALSE 5880
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5563: LD_EXP 3
5567: PPUSH
5568: LD_STRING D2L-Lisa-1
5570: PPUSH
5571: CALL_OW 94
// dec1 = Query1 ;
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: CALL 1272 0 0
5584: ST_TO_ADDR
// if dec1 = 1 then
5585: LD_VAR 0 1
5589: PUSH
5590: LD_INT 1
5592: EQUAL
5593: IFFALSE 5856
// begin ComExitVehicle ( JMM ) ;
5595: LD_EXP 1
5599: PPUSH
5600: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_STRING D2L-JMM-1
5611: PPUSH
5612: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5616: LD_EXP 3
5620: PPUSH
5621: LD_STRING D2L-Lisa-2
5623: PPUSH
5624: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5628: LD_EXP 1
5632: PPUSH
5633: LD_STRING D2L-JMM-2
5635: PPUSH
5636: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5640: LD_EXP 3
5644: PPUSH
5645: LD_STRING D2L-Lisa-3
5647: PPUSH
5648: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5652: LD_EXP 5
5656: PPUSH
5657: LD_STRING DPowell-Pow-1
5659: PPUSH
5660: CALL_OW 94
// dec2 = Query2 ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: CALL 1327 0 0
5673: ST_TO_ADDR
// if dec2 = 1 then
5674: LD_VAR 0 2
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5748
// begin Say ( JMM , D2La-JMM-1 ) ;
5684: LD_EXP 1
5688: PPUSH
5689: LD_STRING D2La-JMM-1
5691: PPUSH
5692: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5696: LD_EXP 3
5700: PPUSH
5701: LD_STRING D2La-Lisa-1
5703: PPUSH
5704: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5708: LD_EXP 1
5712: PPUSH
5713: LD_STRING D2La-JMM-2
5715: PPUSH
5716: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5720: LD_EXP 3
5724: PPUSH
5725: LD_STRING D2La-Lisa-2
5727: PPUSH
5728: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5732: LD_EXP 1
5736: PPUSH
5737: LD_STRING D2La-JMM-3
5739: PPUSH
5740: CALL_OW 88
// InGameOff ;
5744: CALL_OW 9
// end ; if dec2 = 2 then
5748: LD_VAR 0 2
5752: PUSH
5753: LD_INT 2
5755: EQUAL
5756: IFFALSE 5820
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5758: LD_EXP 1
5762: PPUSH
5763: LD_STRING D2Lb-JMM-1
5765: PPUSH
5766: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5770: LD_EXP 3
5774: PPUSH
5775: LD_STRING D2Lb-Lisa-1
5777: PPUSH
5778: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5782: LD_EXP 1
5786: PPUSH
5787: LD_STRING D2Lb-JMM-2
5789: PPUSH
5790: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5794: LD_EXP 3
5798: PPUSH
5799: LD_STRING D2Lb-Lisa-2
5801: PPUSH
5802: CALL_OW 94
// fastEnd = 1 ;
5806: LD_ADDR_EXP 15
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// FinishMission ;
5814: CALL 9388 0 0
// exit ;
5818: GO 6111
// end ; if dec2 = 3 then
5820: LD_VAR 0 2
5824: PUSH
5825: LD_INT 3
5827: EQUAL
5828: IFFALSE 5856
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5830: LD_EXP 3
5834: PPUSH
5835: LD_STRING D2Lc-Lisa-1
5837: PPUSH
5838: CALL_OW 94
// fastEnd = 1 ;
5842: LD_ADDR_EXP 15
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// FinishMission ;
5850: CALL 9388 0 0
// exit ;
5854: GO 6111
// end ; end ; if dec1 = 2 then
5856: LD_VAR 0 1
5860: PUSH
5861: LD_INT 2
5863: EQUAL
5864: IFFALSE 5880
// begin fastEnd = 1 ;
5866: LD_ADDR_EXP 15
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// FinishMission ;
5874: CALL 9388 0 0
// exit ;
5878: GO 6111
// end ; end ; if JMMGirl = 3 then
5880: LD_EXP 7
5884: PUSH
5885: LD_INT 3
5887: EQUAL
5888: IFFALSE 6111
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5890: LD_EXP 4
5894: PPUSH
5895: LD_STRING D2X-Con-1
5897: PPUSH
5898: CALL_OW 94
// dec1 = Query1 ;
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: CALL 1272 0 0
5911: ST_TO_ADDR
// if dec1 = 1 then
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 6087
// begin ComExitVehicle ( JMM ) ;
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5931: LD_EXP 1
5935: PPUSH
5936: LD_STRING D2X-JMM-1
5938: PPUSH
5939: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5943: LD_EXP 4
5947: PPUSH
5948: LD_STRING D2X-Con-2
5950: PPUSH
5951: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5955: LD_EXP 5
5959: PPUSH
5960: LD_STRING DPowell-Pow-1
5962: PPUSH
5963: CALL_OW 94
// dec2 = Query2 ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: CALL 1327 0 0
5976: ST_TO_ADDR
// if dec2 = 1 then
5977: LD_VAR 0 2
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: IFFALSE 6003
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5987: LD_EXP 1
5991: PPUSH
5992: LD_STRING D2Xa-JMM-1
5994: PPUSH
5995: CALL_OW 88
// InGameOff ;
5999: CALL_OW 9
// end ; if dec2 = 2 then
6003: LD_VAR 0 2
6007: PUSH
6008: LD_INT 2
6010: EQUAL
6011: IFFALSE 6051
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6013: LD_EXP 1
6017: PPUSH
6018: LD_STRING D2Xb-JMM-1
6020: PPUSH
6021: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6025: LD_EXP 4
6029: PPUSH
6030: LD_STRING D2Xb-Con-1
6032: PPUSH
6033: CALL_OW 94
// fastEnd = 1 ;
6037: LD_ADDR_EXP 15
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// FinishMission ;
6045: CALL 9388 0 0
// exit ;
6049: GO 6111
// end ; if dec2 = 3 then
6051: LD_VAR 0 2
6055: PUSH
6056: LD_INT 3
6058: EQUAL
6059: IFFALSE 6087
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6061: LD_EXP 4
6065: PPUSH
6066: LD_STRING D2Xc-Con-1
6068: PPUSH
6069: CALL_OW 94
// fastEnd = 1 ;
6073: LD_ADDR_EXP 15
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// FinishMission ;
6081: CALL 9388 0 0
// exit ;
6085: GO 6111
// end ; end ; if dec1 = 2 then
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 2
6094: EQUAL
6095: IFFALSE 6111
// begin fastEnd = 1 ;
6097: LD_ADDR_EXP 15
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// FinishMission ;
6105: CALL 9388 0 0
// exit ;
6109: GO 6111
// end ; end ; end ;
6111: PPOPN 2
6113: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6114: LD_EXP 1
6118: PPUSH
6119: LD_INT 6
6121: PPUSH
6122: CALL_OW 308
6126: IFFALSE 6892
6128: GO 6130
6130: DISABLE
// begin InGameOn ;
6131: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6142: LD_EXP 1
6146: PPUSH
6147: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6151: LD_EXP 1
6155: PPUSH
6156: LD_INT 62
6158: PPUSH
6159: LD_INT 104
6161: PPUSH
6162: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6166: LD_EXP 1
6170: PPUSH
6171: LD_EXP 2
6175: PPUSH
6176: CALL_OW 296
6180: PUSH
6181: LD_INT 4
6183: LESS
6184: PUSH
6185: LD_EXP 1
6189: PPUSH
6190: LD_EXP 3
6194: PPUSH
6195: CALL_OW 296
6199: PUSH
6200: LD_INT 4
6202: LESS
6203: OR
6204: PUSH
6205: LD_EXP 1
6209: PPUSH
6210: LD_EXP 4
6214: PPUSH
6215: CALL_OW 296
6219: PUSH
6220: LD_INT 4
6222: LESS
6223: OR
6224: IFFALSE 6135
// case JMMGirl of 1 :
6226: LD_EXP 7
6230: PUSH
6231: LD_INT 1
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6239
6237: GO 6451
6239: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6240: LD_INT 22
6242: PUSH
6243: LD_INT 4
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PPUSH
6250: CALL_OW 69
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6262: LD_EXP 2
6266: PPUSH
6267: LD_EXP 1
6271: PPUSH
6272: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6276: LD_EXP 1
6280: PPUSH
6281: LD_EXP 2
6285: PPUSH
6286: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6290: LD_EXP 2
6294: PUSH
6295: LD_EXP 1
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 87
// wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// DialogueOn ;
6315: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6319: LD_EXP 2
6323: PPUSH
6324: LD_STRING D3J-Joan-1
6326: PPUSH
6327: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6331: LD_EXP 1
6335: PPUSH
6336: LD_STRING D3J-JMM-1
6338: PPUSH
6339: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6343: LD_EXP 2
6347: PPUSH
6348: LD_STRING D3J-Joan-2
6350: PPUSH
6351: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D3J-JMM-2
6362: PPUSH
6363: CALL_OW 88
// wait ( 0 0$1 ) ;
6367: LD_INT 35
6369: PPUSH
6370: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6374: LD_EXP 1
6378: PPUSH
6379: LD_STRING D4-JMM-1
6381: PPUSH
6382: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6386: LD_EXP 2
6390: PPUSH
6391: LD_STRING D4-Joan-1
6393: PPUSH
6394: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6398: LD_EXP 1
6402: PPUSH
6403: LD_STRING D4-JMM-2
6405: PPUSH
6406: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6410: LD_EXP 2
6414: PPUSH
6415: LD_STRING D4-Joan-2
6417: PPUSH
6418: CALL_OW 88
// DialogueOff ;
6422: CALL_OW 7
// InGameOff ;
6426: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6430: LD_STRING M2J
6432: PPUSH
6433: CALL_OW 337
// SaveForQuickRestart ;
6437: CALL_OW 22
// russianAI = 1 ;
6441: LD_ADDR_EXP 13
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// end ; 2 :
6449: GO 6892
6451: LD_INT 2
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6671
6459: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6460: LD_INT 22
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PPUSH
6470: CALL_OW 69
6474: PPUSH
6475: LD_INT 1
6477: PPUSH
6478: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6482: LD_EXP 3
6486: PPUSH
6487: LD_EXP 1
6491: PPUSH
6492: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6496: LD_EXP 1
6500: PPUSH
6501: LD_EXP 3
6505: PPUSH
6506: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6510: LD_EXP 3
6514: PUSH
6515: LD_EXP 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PPUSH
6524: CALL_OW 87
// wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// DialogueOn ;
6535: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6539: LD_EXP 3
6543: PPUSH
6544: LD_STRING D3L-Lisa-1
6546: PPUSH
6547: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6551: LD_EXP 1
6555: PPUSH
6556: LD_STRING D3L-JMM-1
6558: PPUSH
6559: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6563: LD_EXP 3
6567: PPUSH
6568: LD_STRING D3L-Lisa-2
6570: PPUSH
6571: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6575: LD_EXP 1
6579: PPUSH
6580: LD_STRING D3L-JMM-2
6582: PPUSH
6583: CALL_OW 88
// wait ( 0 0$1 ) ;
6587: LD_INT 35
6589: PPUSH
6590: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6594: LD_EXP 1
6598: PPUSH
6599: LD_STRING D4-JMM-1
6601: PPUSH
6602: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6606: LD_EXP 3
6610: PPUSH
6611: LD_STRING D4-Lisa-1
6613: PPUSH
6614: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6618: LD_EXP 1
6622: PPUSH
6623: LD_STRING D4-JMM-1
6625: PPUSH
6626: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6630: LD_EXP 3
6634: PPUSH
6635: LD_STRING D4-Lisa-2
6637: PPUSH
6638: CALL_OW 88
// DialogueOff ;
6642: CALL_OW 7
// InGameOff ;
6646: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6650: LD_STRING M2L
6652: PPUSH
6653: CALL_OW 337
// SaveForQuickRestart ;
6657: CALL_OW 22
// russianAI = 1 ;
6661: LD_ADDR_EXP 13
6665: PUSH
6666: LD_INT 1
6668: ST_TO_ADDR
// end ; 3 :
6669: GO 6892
6671: LD_INT 3
6673: DOUBLE
6674: EQUAL
6675: IFTRUE 6679
6677: GO 6891
6679: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6680: LD_INT 22
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6702: LD_EXP 4
6706: PPUSH
6707: LD_EXP 1
6711: PPUSH
6712: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6716: LD_EXP 1
6720: PPUSH
6721: LD_EXP 4
6725: PPUSH
6726: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6730: LD_EXP 2
6734: PUSH
6735: LD_EXP 1
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PPUSH
6744: CALL_OW 87
// wait ( 0 0$1 ) ;
6748: LD_INT 35
6750: PPUSH
6751: CALL_OW 67
// DialogueOn ;
6755: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6759: LD_EXP 4
6763: PPUSH
6764: LD_STRING D3X-Con-1
6766: PPUSH
6767: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6771: LD_EXP 1
6775: PPUSH
6776: LD_STRING D3J-JMM-1
6778: PPUSH
6779: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6783: LD_EXP 4
6787: PPUSH
6788: LD_STRING D3J-Joan-2
6790: PPUSH
6791: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6795: LD_EXP 1
6799: PPUSH
6800: LD_STRING D3J-JMM-2
6802: PPUSH
6803: CALL_OW 88
// wait ( 0 0$1 ) ;
6807: LD_INT 35
6809: PPUSH
6810: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6814: LD_EXP 1
6818: PPUSH
6819: LD_STRING D4-JMM-1
6821: PPUSH
6822: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6826: LD_EXP 4
6830: PPUSH
6831: LD_STRING D4-Con-1
6833: PPUSH
6834: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6838: LD_EXP 1
6842: PPUSH
6843: LD_STRING D4-JMM-2
6845: PPUSH
6846: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6850: LD_EXP 4
6854: PPUSH
6855: LD_STRING D4-Con-2
6857: PPUSH
6858: CALL_OW 88
// DialogueOff ;
6862: CALL_OW 7
// InGameOff ;
6866: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6870: LD_STRING M2X
6872: PPUSH
6873: CALL_OW 337
// SaveForQuickRestart ;
6877: CALL_OW 22
// russianAI = 1 ;
6881: LD_ADDR_EXP 13
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// end ; end ;
6889: GO 6892
6891: POP
// end ;
6892: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6893: LD_INT 32
6895: PPUSH
6896: CALL_OW 306
6900: IFFALSE 7233
6902: GO 6904
6904: DISABLE
// begin case JMMGirl of 1 :
6905: LD_EXP 7
6909: PUSH
6910: LD_INT 1
6912: DOUBLE
6913: EQUAL
6914: IFTRUE 6918
6916: GO 7040
6918: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6919: LD_EXP 1
6923: PPUSH
6924: LD_STRING D6J-JMM-1
6926: PPUSH
6927: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6931: LD_STRING 13f_Denis
6933: PPUSH
6934: CALL_OW 28
6938: PUSH
6939: LD_INT 1
6941: EQUAL
6942: PUSH
6943: LD_STRING 13s_Denis
6945: PPUSH
6946: CALL_OW 28
6950: PUSH
6951: LD_INT 1
6953: EQUAL
6954: OR
6955: IFFALSE 6995
// begin Say ( Joan , D6J-Joan-1 ) ;
6957: LD_EXP 2
6961: PPUSH
6962: LD_STRING D6J-Joan-1
6964: PPUSH
6965: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6969: LD_EXP 1
6973: PPUSH
6974: LD_STRING D6J-JMM-2
6976: PPUSH
6977: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6981: LD_EXP 2
6985: PPUSH
6986: LD_STRING D6J-Joan-2
6988: PPUSH
6989: CALL_OW 88
// end else
6993: GO 7007
// begin Say ( Joan , D6J-Joan-2a ) ;
6995: LD_EXP 2
6999: PPUSH
7000: LD_STRING D6J-Joan-2a
7002: PPUSH
7003: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7007: LD_EXP 1
7011: PPUSH
7012: LD_STRING D6J-JMM-3
7014: PPUSH
7015: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7019: LD_EXP 2
7023: PPUSH
7024: LD_STRING D6J-Joan-3
7026: PPUSH
7027: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7031: LD_STRING M3
7033: PPUSH
7034: CALL_OW 337
// end ; 2 :
7038: GO 7233
7040: LD_INT 2
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7106
7048: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7049: LD_EXP 1
7053: PPUSH
7054: LD_STRING D6L-JMM-1
7056: PPUSH
7057: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7061: LD_EXP 3
7065: PPUSH
7066: LD_STRING D6L-Lisa-1
7068: PPUSH
7069: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7073: LD_EXP 1
7077: PPUSH
7078: LD_STRING D6L-JMM-2
7080: PPUSH
7081: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7085: LD_EXP 3
7089: PPUSH
7090: LD_STRING D6L-Lisa-2
7092: PPUSH
7093: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7097: LD_STRING M3
7099: PPUSH
7100: CALL_OW 337
// end ; 3 :
7104: GO 7233
7106: LD_INT 3
7108: DOUBLE
7109: EQUAL
7110: IFTRUE 7114
7112: GO 7232
7114: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7115: LD_EXP 1
7119: PPUSH
7120: LD_STRING D6X-JMM-1
7122: PPUSH
7123: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7127: LD_EXP 4
7131: PPUSH
7132: LD_STRING D6X-Con-1
7134: PPUSH
7135: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7139: LD_EXP 1
7143: PPUSH
7144: LD_STRING D6X-JMM-2
7146: PPUSH
7147: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7151: LD_EXP 4
7155: PPUSH
7156: LD_STRING D6X-Con-2
7158: PPUSH
7159: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7163: LD_EXP 1
7167: PPUSH
7168: LD_STRING D6X-JMM-3
7170: PPUSH
7171: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7175: LD_EXP 4
7179: PPUSH
7180: LD_STRING D6X-Con-3
7182: PPUSH
7183: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7187: LD_EXP 1
7191: PPUSH
7192: LD_STRING D6X-JMM-4
7194: PPUSH
7195: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7199: LD_EXP 4
7203: PPUSH
7204: LD_STRING D6X-Con-4
7206: PPUSH
7207: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7211: LD_EXP 1
7215: PPUSH
7216: LD_STRING D6X-JMM-5
7218: PPUSH
7219: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7223: LD_STRING M3
7225: PPUSH
7226: CALL_OW 337
// end ; end ;
7230: GO 7233
7232: POP
// end ;
7233: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7234: LD_INT 22
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 33
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: PPUSH
7263: CALL_OW 306
7267: IFFALSE 7413
7269: GO 7271
7271: DISABLE
// begin case JMMGirl of 1 :
7272: LD_EXP 7
7276: PUSH
7277: LD_INT 1
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7322
7285: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7286: LD_EXP 1
7290: PPUSH
7291: LD_STRING D5-JMM-1
7293: PPUSH
7294: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7298: LD_INT 77
7300: PPUSH
7301: LD_INT 87
7303: PPUSH
7304: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7308: LD_EXP 2
7312: PPUSH
7313: LD_STRING D5-Joan-1
7315: PPUSH
7316: CALL_OW 88
// end ; 2 :
7320: GO 7413
7322: LD_INT 2
7324: DOUBLE
7325: EQUAL
7326: IFTRUE 7330
7328: GO 7367
7330: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7331: LD_EXP 1
7335: PPUSH
7336: LD_STRING D5-JMM-1
7338: PPUSH
7339: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7343: LD_INT 77
7345: PPUSH
7346: LD_INT 87
7348: PPUSH
7349: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7353: LD_EXP 3
7357: PPUSH
7358: LD_STRING D5-Lisa-1
7360: PPUSH
7361: CALL_OW 88
// end ; 3 :
7365: GO 7413
7367: LD_INT 3
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7412
7375: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7376: LD_EXP 1
7380: PPUSH
7381: LD_STRING D5-JMM-1
7383: PPUSH
7384: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7388: LD_INT 77
7390: PPUSH
7391: LD_INT 87
7393: PPUSH
7394: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7398: LD_EXP 4
7402: PPUSH
7403: LD_STRING D5-Con-1
7405: PPUSH
7406: CALL_OW 88
// end ; end ;
7410: GO 7413
7412: POP
// end ;
7413: END
// every 15 15$0 do
7414: GO 7416
7416: DISABLE
// begin DialogueOn ;
7417: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7421: LD_EXP 5
7425: PPUSH
7426: LD_STRING D7-Pow-1
7428: PPUSH
7429: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7433: LD_EXP 1
7437: PPUSH
7438: LD_STRING D7-JMM-1
7440: PPUSH
7441: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7445: LD_EXP 5
7449: PPUSH
7450: LD_STRING D7-Pow-2
7452: PPUSH
7453: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7457: LD_EXP 1
7461: PPUSH
7462: LD_STRING D7-JMM-2
7464: PPUSH
7465: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7469: LD_EXP 5
7473: PPUSH
7474: LD_STRING D7-Pow-3
7476: PPUSH
7477: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7481: LD_EXP 1
7485: PPUSH
7486: LD_STRING D7-JMM-3
7488: PPUSH
7489: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7493: LD_EXP 5
7497: PPUSH
7498: LD_STRING D7-Pow-4
7500: PPUSH
7501: CALL_OW 94
// DialogueOff ;
7505: CALL_OW 7
// end ; end_of_file
7509: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7510: LD_VAR 0 1
7514: PPUSH
7515: CALL_OW 255
7519: PUSH
7520: LD_INT 3
7522: EQUAL
7523: IFFALSE 7597
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7525: LD_ADDR_EXP 10
7529: PUSH
7530: LD_EXP 10
7534: PPUSH
7535: LD_INT 1
7537: PPUSH
7538: CALL_OW 3
7542: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7543: LD_ADDR_EXP 10
7547: PUSH
7548: LD_EXP 10
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 3
7560: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7561: LD_ADDR_EXP 10
7565: PUSH
7566: LD_EXP 10
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: CALL_OW 3
7578: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7579: LD_ADDR_EXP 10
7583: PUSH
7584: LD_EXP 10
7588: PPUSH
7589: LD_INT 1
7591: PPUSH
7592: CALL_OW 3
7596: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7597: LD_VAR 0 1
7601: PPUSH
7602: CALL_OW 255
7606: PUSH
7607: LD_INT 3
7609: EQUAL
7610: PUSH
7611: LD_VAR 0 1
7615: PPUSH
7616: CALL_OW 266
7620: PUSH
7621: LD_INT 0
7623: EQUAL
7624: PUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 266
7634: PUSH
7635: LD_INT 2
7637: EQUAL
7638: OR
7639: PUSH
7640: LD_VAR 0 1
7644: PPUSH
7645: CALL_OW 266
7649: PUSH
7650: LD_INT 4
7652: EQUAL
7653: OR
7654: PUSH
7655: EMPTY
7656: LIST
7657: AND
7658: IFFALSE 7669
// ComUpgrade ( building ) ;
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 255
7678: PUSH
7679: LD_INT 3
7681: EQUAL
7682: PUSH
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_INT 32
7695: EQUAL
7696: AND
7697: IFFALSE 7738
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7699: LD_VAR 0 1
7703: PPUSH
7704: LD_INT 42
7706: PUSH
7707: LD_INT 43
7709: PUSH
7710: LD_INT 44
7712: PUSH
7713: LD_INT 46
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 1
7724: PPUSH
7725: LD_INT 4
7727: PPUSH
7728: CALL_OW 12
7732: ARRAY
7733: PPUSH
7734: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 255
7747: PUSH
7748: LD_INT 3
7750: EQUAL
7751: PUSH
7752: LD_VAR 0 1
7756: PPUSH
7757: CALL_OW 266
7761: PUSH
7762: LD_INT 33
7764: EQUAL
7765: AND
7766: IFFALSE 7807
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_INT 42
7775: PUSH
7776: LD_INT 43
7778: PUSH
7779: LD_INT 44
7781: PUSH
7782: LD_INT 46
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PPUSH
7794: LD_INT 4
7796: PPUSH
7797: CALL_OW 12
7801: ARRAY
7802: PPUSH
7803: CALL_OW 208
// end ;
7807: PPOPN 1
7809: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7810: LD_VAR 0 1
7814: PPUSH
7815: CALL_OW 255
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 1
7828: PPUSH
7829: CALL_OW 247
7833: PUSH
7834: LD_INT 3
7836: EQUAL
7837: AND
7838: IFFALSE 8530
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 266
7849: PUSH
7850: LD_INT 31
7852: EQUAL
7853: PUSH
7854: LD_VAR 0 1
7858: PPUSH
7859: CALL_OW 266
7863: PUSH
7864: LD_INT 32
7866: EQUAL
7867: OR
7868: PUSH
7869: LD_VAR 0 1
7873: PPUSH
7874: CALL_OW 266
7878: PUSH
7879: LD_INT 36
7881: EQUAL
7882: OR
7883: PUSH
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL_OW 266
7893: PUSH
7894: LD_INT 0
7896: EQUAL
7897: OR
7898: PUSH
7899: LD_VAR 0 1
7903: PPUSH
7904: CALL_OW 266
7908: PUSH
7909: LD_INT 24
7911: EQUAL
7912: OR
7913: PUSH
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 266
7923: PUSH
7924: LD_INT 17
7926: EQUAL
7927: OR
7928: PUSH
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 266
7938: PUSH
7939: LD_INT 25
7941: EQUAL
7942: OR
7943: PUSH
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 266
7953: PUSH
7954: LD_INT 19
7956: EQUAL
7957: OR
7958: PUSH
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 266
7968: PUSH
7969: LD_INT 20
7971: EQUAL
7972: OR
7973: PUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: CALL_OW 266
7983: PUSH
7984: LD_INT 18
7986: EQUAL
7987: OR
7988: PUSH
7989: LD_VAR 0 1
7993: PPUSH
7994: CALL_OW 266
7998: PUSH
7999: LD_INT 21
8001: EQUAL
8002: OR
8003: PUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 266
8013: PUSH
8014: LD_INT 23
8016: EQUAL
8017: OR
8018: PUSH
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 266
8028: PUSH
8029: LD_INT 16
8031: EQUAL
8032: OR
8033: PUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: CALL_OW 266
8043: PUSH
8044: LD_INT 6
8046: EQUAL
8047: OR
8048: PUSH
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 266
8058: PUSH
8059: LD_INT 29
8061: EQUAL
8062: OR
8063: PUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 266
8073: PUSH
8074: LD_INT 26
8076: EQUAL
8077: OR
8078: PUSH
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 266
8088: PUSH
8089: LD_INT 30
8091: EQUAL
8092: OR
8093: PUSH
8094: LD_VAR 0 1
8098: PPUSH
8099: CALL_OW 266
8103: PUSH
8104: LD_INT 28
8106: EQUAL
8107: OR
8108: PUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 266
8118: PUSH
8119: LD_INT 27
8121: EQUAL
8122: OR
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 266
8133: PUSH
8134: LD_INT 33
8136: EQUAL
8137: OR
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 266
8148: PUSH
8149: LD_INT 2
8151: EQUAL
8152: OR
8153: PUSH
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL_OW 266
8163: PUSH
8164: LD_INT 4
8166: EQUAL
8167: OR
8168: IFFALSE 8254
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8170: LD_ADDR_EXP 10
8174: PUSH
8175: LD_EXP 10
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: CALL_OW 266
8189: ADD
8190: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8191: LD_ADDR_EXP 10
8195: PUSH
8196: LD_EXP 10
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 250
8210: ADD
8211: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8212: LD_ADDR_EXP 10
8216: PUSH
8217: LD_EXP 10
8221: PUSH
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 251
8231: ADD
8232: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8233: LD_ADDR_EXP 10
8237: PUSH
8238: LD_EXP 10
8242: PUSH
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL_OW 254
8252: ADD
8253: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL_OW 266
8263: PUSH
8264: LD_INT 1
8266: EQUAL
8267: IFFALSE 8346
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8269: LD_ADDR_EXP 10
8273: PUSH
8274: LD_EXP 10
8278: PUSH
8279: LD_INT 0
8281: ADD
8282: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8283: LD_ADDR_EXP 10
8287: PUSH
8288: LD_EXP 10
8292: PUSH
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 250
8302: ADD
8303: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8304: LD_ADDR_EXP 10
8308: PUSH
8309: LD_EXP 10
8313: PUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 251
8323: ADD
8324: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8325: LD_ADDR_EXP 10
8329: PUSH
8330: LD_EXP 10
8334: PUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 254
8344: ADD
8345: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 266
8355: PUSH
8356: LD_INT 3
8358: EQUAL
8359: IFFALSE 8438
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8361: LD_ADDR_EXP 10
8365: PUSH
8366: LD_EXP 10
8370: PUSH
8371: LD_INT 2
8373: ADD
8374: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8375: LD_ADDR_EXP 10
8379: PUSH
8380: LD_EXP 10
8384: PUSH
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 250
8394: ADD
8395: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8396: LD_ADDR_EXP 10
8400: PUSH
8401: LD_EXP 10
8405: PUSH
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 251
8415: ADD
8416: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8417: LD_ADDR_EXP 10
8421: PUSH
8422: LD_EXP 10
8426: PUSH
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 254
8436: ADD
8437: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8438: LD_VAR 0 1
8442: PPUSH
8443: CALL_OW 266
8447: PUSH
8448: LD_INT 5
8450: EQUAL
8451: IFFALSE 8530
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8453: LD_ADDR_EXP 10
8457: PUSH
8458: LD_EXP 10
8462: PUSH
8463: LD_INT 4
8465: ADD
8466: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8467: LD_ADDR_EXP 10
8471: PUSH
8472: LD_EXP 10
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 250
8486: ADD
8487: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8488: LD_ADDR_EXP 10
8492: PUSH
8493: LD_EXP 10
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 251
8507: ADD
8508: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8509: LD_ADDR_EXP 10
8513: PUSH
8514: LD_EXP 10
8518: PUSH
8519: LD_VAR 0 1
8523: PPUSH
8524: CALL_OW 254
8528: ADD
8529: ST_TO_ADDR
// end ; end ; end ;
8530: PPOPN 1
8532: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8533: LD_VAR 0 2
8537: PUSH
8538: LD_INT 1
8540: EQUAL
8541: PUSH
8542: LD_VAR 0 2
8546: PUSH
8547: LD_INT 40
8549: EQUAL
8550: OR
8551: IFFALSE 8675
// if GetSide ( vehicle ) = 3 then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 255
8562: PUSH
8563: LD_INT 3
8565: EQUAL
8566: IFFALSE 8675
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 264
8577: PUSH
8578: LD_INT 47
8580: EQUAL
8581: PUSH
8582: LD_VAR 0 1
8586: PPUSH
8587: CALL_OW 264
8591: PUSH
8592: LD_INT 46
8594: EQUAL
8595: OR
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 264
8606: PUSH
8607: LD_INT 45
8609: EQUAL
8610: OR
8611: PUSH
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 264
8621: PUSH
8622: LD_INT 44
8624: EQUAL
8625: OR
8626: IFFALSE 8644
// russianTanks = russianTanks ^ vehicle ;
8628: LD_ADDR_EXP 11
8632: PUSH
8633: LD_EXP 11
8637: PUSH
8638: LD_VAR 0 1
8642: ADD
8643: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8644: LD_VAR 0 1
8648: PPUSH
8649: CALL_OW 264
8653: PUSH
8654: LD_INT 49
8656: EQUAL
8657: IFFALSE 8675
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8659: LD_ADDR_EXP 12
8663: PUSH
8664: LD_EXP 12
8668: PUSH
8669: LD_VAR 0 1
8673: ADD
8674: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL_OW 255
8684: PUSH
8685: LD_INT 1
8687: EQUAL
8688: PUSH
8689: LD_VAR 0 1
8693: PPUSH
8694: CALL_OW 264
8698: PUSH
8699: LD_INT 10
8701: EQUAL
8702: AND
8703: IFFALSE 8719
// amLaserCounter = amLaserCounter + 1 ;
8705: LD_ADDR_EXP 9
8709: PUSH
8710: LD_EXP 9
8714: PUSH
8715: LD_INT 1
8717: PLUS
8718: ST_TO_ADDR
// end ;
8719: PPOPN 2
8721: END
// on UnitGoesToRed ( unit ) do var i ;
8722: LD_INT 0
8724: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 255
8734: PUSH
8735: LD_INT 3
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 247
8748: PUSH
8749: LD_INT 2
8751: EQUAL
8752: AND
8753: IFFALSE 8871
// begin if russianTanks > 0 then
8755: LD_EXP 11
8759: PUSH
8760: LD_INT 0
8762: GREATER
8763: IFFALSE 8813
// for i in russianTanks do
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: LD_EXP 11
8774: PUSH
8775: FOR_IN
8776: IFFALSE 8811
// if i = unit then
8778: LD_VAR 0 2
8782: PUSH
8783: LD_VAR 0 1
8787: EQUAL
8788: IFFALSE 8809
// russianTanks = russianTanks diff [ unit ] ;
8790: LD_ADDR_EXP 11
8794: PUSH
8795: LD_EXP 11
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: DIFF
8808: ST_TO_ADDR
8809: GO 8775
8811: POP
8812: POP
// if russianTimeLapsers > 0 then
8813: LD_EXP 12
8817: PUSH
8818: LD_INT 0
8820: GREATER
8821: IFFALSE 8871
// for i in russianTimeLapsers do
8823: LD_ADDR_VAR 0 2
8827: PUSH
8828: LD_EXP 12
8832: PUSH
8833: FOR_IN
8834: IFFALSE 8869
// if i = unit then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_VAR 0 1
8845: EQUAL
8846: IFFALSE 8867
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8848: LD_ADDR_EXP 12
8852: PUSH
8853: LD_EXP 12
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
8867: GO 8833
8869: POP
8870: POP
// end ; end ; end_of_file
8871: PPOPN 2
8873: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8874: LD_EXP 1
8878: PPUSH
8879: CALL_OW 310
8883: PPUSH
8884: LD_INT 12
8886: PPUSH
8887: CALL_OW 308
8891: PUSH
8892: LD_EXP 15
8896: PUSH
8897: LD_INT 0
8899: EQUAL
8900: AND
8901: IFFALSE 9247
8903: GO 8905
8905: DISABLE
8906: LD_INT 0
8908: PPUSH
8909: PPUSH
// begin enable ;
8910: ENABLE
// if JMMGirl = 1 then
8911: LD_EXP 7
8915: PUSH
8916: LD_INT 1
8918: EQUAL
8919: IFFALSE 8936
// JMMGirlVeh = IsInUnit ( Joan ) ;
8921: LD_ADDR_VAR 0 1
8925: PUSH
8926: LD_EXP 2
8930: PPUSH
8931: CALL_OW 310
8935: ST_TO_ADDR
// if JMMGirl = 2 then
8936: LD_EXP 7
8940: PUSH
8941: LD_INT 2
8943: EQUAL
8944: IFFALSE 8961
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8946: LD_ADDR_VAR 0 1
8950: PUSH
8951: LD_EXP 3
8955: PPUSH
8956: CALL_OW 310
8960: ST_TO_ADDR
// if JMMGirl = 3 then
8961: LD_EXP 7
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: IFFALSE 8986
// JMMGirlVeh = IsInUnit ( Connie ) ;
8971: LD_ADDR_VAR 0 1
8975: PUSH
8976: LD_EXP 4
8980: PPUSH
8981: CALL_OW 310
8985: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8986: LD_EXP 1
8990: PPUSH
8991: CALL_OW 310
8995: PPUSH
8996: LD_EXP 2
9000: PPUSH
9001: CALL_OW 310
9005: PPUSH
9006: CALL_OW 296
9010: PUSH
9011: LD_INT 10
9013: LESS
9014: PUSH
9015: LD_EXP 1
9019: PPUSH
9020: CALL_OW 310
9024: PPUSH
9025: LD_EXP 3
9029: PPUSH
9030: CALL_OW 310
9034: PPUSH
9035: CALL_OW 296
9039: PUSH
9040: LD_INT 10
9042: LESS
9043: OR
9044: PUSH
9045: LD_EXP 1
9049: PPUSH
9050: CALL_OW 310
9054: PPUSH
9055: LD_EXP 4
9059: PPUSH
9060: CALL_OW 310
9064: PPUSH
9065: CALL_OW 296
9069: PUSH
9070: LD_INT 10
9072: LESS
9073: OR
9074: IFFALSE 9168
// begin case Query ( Q3b ) of 1 :
9076: LD_STRING Q3b
9078: PPUSH
9079: CALL_OW 97
9083: PUSH
9084: LD_INT 1
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9165
9092: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9093: LD_VAR 0 1
9097: PPUSH
9098: CALL_OW 265
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL_OW 262
9115: PUSH
9116: EMPTY
9117: LIST
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 263
9128: PUSH
9129: EMPTY
9130: LIST
9131: PUSH
9132: LD_VAR 0 1
9136: PPUSH
9137: CALL_OW 264
9141: PUSH
9142: EMPTY
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PPUSH
9151: LD_STRING 14_JMMGirlVeh_1
9153: PPUSH
9154: CALL_OW 39
// FinishMission ;
9158: CALL 9388 0 0
// disable ;
9162: DISABLE
// end ; end ;
9163: GO 9166
9165: POP
// end else
9166: GO 9247
// begin if JMMGirl = 1 then
9168: LD_EXP 7
9172: PUSH
9173: LD_INT 1
9175: EQUAL
9176: IFFALSE 9193
// dec := Query ( Q3bJ ) else
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_STRING Q3bJ
9185: PPUSH
9186: CALL_OW 97
9190: ST_TO_ADDR
9191: GO 9231
// if JMMGirl = 2 then
9193: LD_EXP 7
9197: PUSH
9198: LD_INT 2
9200: EQUAL
9201: IFFALSE 9218
// dec := Query ( Q3bL ) else
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_STRING Q3bL
9210: PPUSH
9211: CALL_OW 97
9215: ST_TO_ADDR
9216: GO 9231
// dec := Query ( Q3bX ) ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_STRING Q3bX
9225: PPUSH
9226: CALL_OW 97
9230: ST_TO_ADDR
// if dec = 1 then
9231: LD_VAR 0 2
9235: PUSH
9236: LD_INT 1
9238: EQUAL
9239: IFFALSE 9247
// begin FinishMission ;
9241: CALL 9388 0 0
// exit ;
9245: GO 9247
// end ; end ; end ;
9247: PPOPN 2
9249: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9250: LD_INT 22
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 21
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: PUSH
9279: LD_INT 0
9281: EQUAL
9282: PUSH
9283: LD_EXP 15
9287: PUSH
9288: LD_INT 0
9290: EQUAL
9291: AND
9292: IFFALSE 9387
9294: GO 9296
9296: DISABLE
// begin DialogueOn ;
9297: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9301: LD_EXP 1
9305: PPUSH
9306: LD_STRING DEnd-JMM-1
9308: PPUSH
9309: CALL_OW 88
// if JMMGirl = 1 then
9313: LD_EXP 7
9317: PUSH
9318: LD_INT 1
9320: EQUAL
9321: IFFALSE 9335
// Say ( Joan , DEnd-Joan-1 ) ;
9323: LD_EXP 2
9327: PPUSH
9328: LD_STRING DEnd-Joan-1
9330: PPUSH
9331: CALL_OW 88
// if JMMGirl = 2 then
9335: LD_EXP 7
9339: PUSH
9340: LD_INT 2
9342: EQUAL
9343: IFFALSE 9357
// Say ( Lisa , DEnd-Lisa-1 ) ;
9345: LD_EXP 3
9349: PPUSH
9350: LD_STRING DEnd-Lisa-1
9352: PPUSH
9353: CALL_OW 88
// if JMMGirl = 3 then
9357: LD_EXP 7
9361: PUSH
9362: LD_INT 3
9364: EQUAL
9365: IFFALSE 9379
// Say ( Connie , DEnd-Con-1 ) ;
9367: LD_EXP 4
9371: PPUSH
9372: LD_STRING DEnd-Con-1
9374: PPUSH
9375: CALL_OW 88
// DialogueOff ;
9379: CALL_OW 7
// FinishMission ;
9383: CALL 9388 0 0
// end ;
9387: END
// export function FinishMission ; var JMMNewVeh ; begin
9388: LD_INT 0
9390: PPUSH
9391: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9392: LD_EXP 1
9396: PPUSH
9397: LD_STRING 14_JMM
9399: PPUSH
9400: CALL_OW 38
// JMMNewVeh = IsInUnit ( JMM ) ;
9404: LD_ADDR_VAR 0 2
9408: PUSH
9409: LD_EXP 1
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9419: LD_VAR 0 2
9423: PPUSH
9424: CALL_OW 265
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: LD_VAR 0 2
9436: PPUSH
9437: CALL_OW 262
9441: PUSH
9442: EMPTY
9443: LIST
9444: PUSH
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 263
9454: PUSH
9455: EMPTY
9456: LIST
9457: PUSH
9458: LD_VAR 0 2
9462: PPUSH
9463: CALL_OW 264
9467: PUSH
9468: EMPTY
9469: LIST
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PPUSH
9477: LD_STRING 14_JMMVeh_1
9479: PPUSH
9480: CALL_OW 39
// if fastEnd = 1 then
9484: LD_EXP 15
9488: PUSH
9489: LD_INT 1
9491: EQUAL
9492: IFFALSE 9559
// begin AddMedal ( fastend , - 1 ) ;
9494: LD_STRING fastend
9496: PPUSH
9497: LD_INT 1
9499: NEG
9500: PPUSH
9501: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9505: LD_STRING fastend
9507: PPUSH
9508: LD_INT 1
9510: NEG
9511: PPUSH
9512: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9516: LD_STRING fastend
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9527: LD_EXP 7
9531: PPUSH
9532: LD_STRING 14_JMMGirl_1
9534: PPUSH
9535: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9539: LD_INT 0
9541: PPUSH
9542: LD_STRING 14_JMMGirlStatus_1
9544: PPUSH
9545: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9549: LD_INT 0
9551: PPUSH
9552: LD_STRING 14_KappaStatus_1
9554: PPUSH
9555: CALL_OW 39
// end ; if fastEnd = 0 then
9559: LD_EXP 15
9563: PUSH
9564: LD_INT 0
9566: EQUAL
9567: IFFALSE 10295
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9569: LD_INT 22
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: LD_INT 25
9584: PUSH
9585: LD_INT 12
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 16
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 69
9622: PPUSH
9623: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9627: LD_EXP 7
9631: PPUSH
9632: LD_STRING 14_JMMGirl_1
9634: PPUSH
9635: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9639: LD_INT 22
9641: PUSH
9642: LD_INT 3
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 1
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PUSH
9668: LD_INT 0
9670: EQUAL
9671: PUSH
9672: LD_INT 48
9674: PPUSH
9675: CALL_OW 255
9679: PUSH
9680: LD_INT 1
9682: EQUAL
9683: AND
9684: IFFALSE 9698
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9686: LD_INT 1
9688: PPUSH
9689: LD_STRING 14_KappaStatus_1
9691: PPUSH
9692: CALL_OW 39
9696: GO 9708
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9698: LD_INT 0
9700: PPUSH
9701: LD_STRING 14_KappaStatus_1
9703: PPUSH
9704: CALL_OW 39
// case JMMGirl of 1 :
9708: LD_EXP 7
9712: PUSH
9713: LD_INT 1
9715: DOUBLE
9716: EQUAL
9717: IFTRUE 9721
9719: GO 9869
9721: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9722: LD_EXP 2
9726: PPUSH
9727: CALL_OW 302
9731: PUSH
9732: LD_EXP 2
9736: PPUSH
9737: CALL_OW 255
9741: PUSH
9742: LD_INT 1
9744: EQUAL
9745: AND
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 69
9775: PUSH
9776: LD_INT 0
9778: EQUAL
9779: PUSH
9780: LD_EXP 1
9784: PPUSH
9785: CALL_OW 310
9789: PPUSH
9790: LD_EXP 2
9794: PPUSH
9795: CALL_OW 310
9799: PPUSH
9800: CALL_OW 296
9804: PUSH
9805: LD_INT 10
9807: LESS
9808: OR
9809: AND
9810: IFFALSE 9846
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9812: LD_INT 1
9814: PPUSH
9815: LD_STRING 14_JMMGirlStatus_1
9817: PPUSH
9818: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9822: LD_EXP 2
9826: PPUSH
9827: LD_STRING 14_Joan
9829: PPUSH
9830: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9834: LD_STRING protect
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 101
9844: GO 9867
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 14_JMMGirlStatus_1
9851: PPUSH
9852: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9856: LD_STRING protect
9858: PPUSH
9859: LD_INT 1
9861: NEG
9862: PPUSH
9863: CALL_OW 101
// end ; end ; 2 :
9867: GO 10182
9869: LD_INT 2
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 10025
9877: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9878: LD_EXP 3
9882: PPUSH
9883: CALL_OW 302
9887: PUSH
9888: LD_EXP 3
9892: PPUSH
9893: CALL_OW 255
9897: PUSH
9898: LD_INT 1
9900: EQUAL
9901: AND
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 21
9915: PUSH
9916: LD_INT 1
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PPUSH
9927: CALL_OW 69
9931: PUSH
9932: LD_INT 0
9934: EQUAL
9935: PUSH
9936: LD_EXP 1
9940: PPUSH
9941: CALL_OW 310
9945: PPUSH
9946: LD_EXP 3
9950: PPUSH
9951: CALL_OW 310
9955: PPUSH
9956: CALL_OW 296
9960: PUSH
9961: LD_INT 10
9963: LESS
9964: OR
9965: AND
9966: IFFALSE 10002
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9968: LD_INT 1
9970: PPUSH
9971: LD_STRING 14_JMMGirlStatus_1
9973: PPUSH
9974: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9978: LD_EXP 3
9982: PPUSH
9983: LD_STRING 14_Lisa
9985: PPUSH
9986: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9990: LD_STRING protect
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 101
10000: GO 10023
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10002: LD_INT 0
10004: PPUSH
10005: LD_STRING 14_JMMGirlStatus_1
10007: PPUSH
10008: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10012: LD_STRING protect
10014: PPUSH
10015: LD_INT 2
10017: NEG
10018: PPUSH
10019: CALL_OW 101
// end ; end ; 3 :
10023: GO 10182
10025: LD_INT 3
10027: DOUBLE
10028: EQUAL
10029: IFTRUE 10033
10031: GO 10181
10033: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10034: LD_EXP 4
10038: PPUSH
10039: CALL_OW 302
10043: PUSH
10044: LD_EXP 4
10048: PPUSH
10049: CALL_OW 255
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_INT 3
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 21
10071: PUSH
10072: LD_INT 1
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 69
10087: PUSH
10088: LD_INT 0
10090: EQUAL
10091: PUSH
10092: LD_EXP 1
10096: PPUSH
10097: CALL_OW 310
10101: PPUSH
10102: LD_EXP 4
10106: PPUSH
10107: CALL_OW 310
10111: PPUSH
10112: CALL_OW 296
10116: PUSH
10117: LD_INT 10
10119: LESS
10120: OR
10121: AND
10122: IFFALSE 10158
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10124: LD_INT 1
10126: PPUSH
10127: LD_STRING 14_JMMGirlStatus_1
10129: PPUSH
10130: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10134: LD_EXP 4
10138: PPUSH
10139: LD_STRING 14_Connie
10141: PPUSH
10142: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10146: LD_STRING protect
10148: PPUSH
10149: LD_INT 1
10151: PPUSH
10152: CALL_OW 101
10156: GO 10179
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10158: LD_INT 0
10160: PPUSH
10161: LD_STRING 14_JMMGirlStatus_1
10163: PPUSH
10164: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10168: LD_STRING protect
10170: PPUSH
10171: LD_INT 3
10173: NEG
10174: PPUSH
10175: CALL_OW 101
// end ; end ; end ;
10179: GO 10182
10181: POP
// if amLaserCounter >= 2 then
10182: LD_EXP 9
10186: PUSH
10187: LD_INT 2
10189: GREATEREQUAL
10190: IFFALSE 10204
// begin AddMedal ( double , 1 ) end else
10192: LD_STRING double
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 101
10202: GO 10238
// begin if amLaserCounter = 1 then
10204: LD_EXP 9
10208: PUSH
10209: LD_INT 1
10211: EQUAL
10212: IFFALSE 10227
// AddMedal ( double , - 2 ) else
10214: LD_STRING double
10216: PPUSH
10217: LD_INT 2
10219: NEG
10220: PPUSH
10221: CALL_OW 101
10225: GO 10238
// AddMedal ( double , - 1 ) ;
10227: LD_STRING double
10229: PPUSH
10230: LD_INT 1
10232: NEG
10233: PPUSH
10234: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10238: LD_INT 22
10240: PUSH
10241: LD_INT 3
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 69
10266: PUSH
10267: LD_INT 0
10269: EQUAL
10270: IFFALSE 10284
// AddMedal ( base , 1 ) else
10272: LD_STRING base
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL_OW 101
10282: GO 10295
// AddMedal ( base , - 1 ) ;
10284: LD_STRING base
10286: PPUSH
10287: LD_INT 1
10289: NEG
10290: PPUSH
10291: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10295: LD_STRING Eliminate
10297: PPUSH
10298: CALL_OW 102
// YouWin ;
10302: CALL_OW 103
// end ; end_of_file
10306: LD_VAR 0 1
10310: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10311: LD_EXP 1
10315: PPUSH
10316: CALL_OW 301
10320: IFFALSE 10332
10322: GO 10324
10324: DISABLE
// YouLost ( JMM ) ; end_of_file
10325: LD_STRING JMM
10327: PPUSH
10328: CALL_OW 104
10332: END
// every 1 1$0 do
10333: GO 10335
10335: DISABLE
// begin enable ;
10336: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10337: LD_INT 3
10339: PPUSH
10340: LD_INT 5
10342: PPUSH
10343: CALL_OW 12
10347: PPUSH
10348: LD_INT 13
10350: PPUSH
10351: LD_INT 1
10353: PPUSH
10354: CALL_OW 55
// end ;
10358: END
