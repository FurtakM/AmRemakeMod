// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1412 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Coonie , false ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Coonie
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1173 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1166
// begin if IsOk ( i ) then
1139: LD_VAR 0 4
1143: PPUSH
1144: CALL_OW 302
1148: IFFALSE 1164
// SaveCharacters ( i , ident ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 38
// end ;
1164: GO 1136
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 3
1172: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1173: LD_INT 0
1175: PPUSH
1176: PPUSH
1177: PPUSH
1178: PPUSH
// for i = 1 to count do
1179: LD_ADDR_VAR 0 8
1183: PUSH
1184: DOUBLE
1185: LD_INT 1
1187: DEC
1188: ST_TO_ADDR
1189: LD_VAR 0 6
1193: PUSH
1194: FOR_TO
1195: IFFALSE 1276
// begin uc_side = side ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_VAR 0 1
1206: ST_TO_ADDR
// uc_nation = nation ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_VAR 0 2
1216: ST_TO_ADDR
// hc_gallery =  ;
1217: LD_ADDR_OWVAR 33
1221: PUSH
1222: LD_STRING 
1224: ST_TO_ADDR
// hc_name =  ;
1225: LD_ADDR_OWVAR 26
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_VAR 0 5
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 380
// un = CreateHuman ;
1250: LD_ADDR_VAR 0 10
1254: PUSH
1255: CALL_OW 44
1259: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1260: LD_VAR 0 10
1264: PPUSH
1265: LD_VAR 0 3
1269: PPUSH
1270: CALL_OW 52
// end ;
1274: GO 1194
1276: POP
1277: POP
// end ;
1278: LD_VAR 0 7
1282: RET
// export function Query1 ; begin
1283: LD_INT 0
1285: PPUSH
// case query ( Q1 ) of 1 :
1286: LD_STRING Q1
1288: PPUSH
1289: CALL_OW 97
1293: PUSH
1294: LD_INT 1
1296: DOUBLE
1297: EQUAL
1298: IFTRUE 1302
1300: GO 1313
1302: POP
// result = 1 ; 2 :
1303: LD_ADDR_VAR 0 1
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
1311: GO 1333
1313: LD_INT 2
1315: DOUBLE
1316: EQUAL
1317: IFTRUE 1321
1319: GO 1332
1321: POP
// result = 2 ; end ;
1322: LD_ADDR_VAR 0 1
1326: PUSH
1327: LD_INT 2
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// end ;
1333: LD_VAR 0 1
1337: RET
// export function Query2 ; begin
1338: LD_INT 0
1340: PPUSH
// case query ( Q2J ) of 1 :
1341: LD_STRING Q2J
1343: PPUSH
1344: CALL_OW 97
1348: PUSH
1349: LD_INT 1
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1368
1357: POP
// result = 1 ; 2 :
1358: LD_ADDR_VAR 0 1
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
1366: GO 1407
1368: LD_INT 2
1370: DOUBLE
1371: EQUAL
1372: IFTRUE 1376
1374: GO 1387
1376: POP
// result = 2 ; 2 :
1377: LD_ADDR_VAR 0 1
1381: PUSH
1382: LD_INT 2
1384: ST_TO_ADDR
1385: GO 1407
1387: LD_INT 2
1389: DOUBLE
1390: EQUAL
1391: IFTRUE 1395
1393: GO 1406
1395: POP
// result = 3 ; end ;
1396: LD_ADDR_VAR 0 1
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
1404: GO 1407
1406: POP
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareDifficulty ; begin
1412: LD_INT 0
1414: PPUSH
// if difficulty = 1 then
1415: LD_OWVAR 67
1419: PUSH
1420: LD_INT 1
1422: EQUAL
1423: IFFALSE 1503
// begin SetTech ( 57 , 3 , state_disabled ) ;
1425: LD_INT 57
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1438: LD_INT 58
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1451: LD_INT 59
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1464: LD_INT 51
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1477: LD_INT 52
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1490: LD_INT 53
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 322
// end ; if difficulty = 2 then
1503: LD_OWVAR 67
1507: PUSH
1508: LD_INT 2
1510: EQUAL
1511: IFFALSE 1591
// begin SetTech ( 57 , 3 , state_enabled ) ;
1513: LD_INT 57
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1526: LD_INT 58
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1539: LD_INT 59
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1565: LD_INT 52
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1578: LD_INT 53
1580: PPUSH
1581: LD_INT 3
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 322
// end ; if difficulty = 3 then
1591: LD_OWVAR 67
1595: PUSH
1596: LD_INT 3
1598: EQUAL
1599: IFFALSE 1679
// begin SetTech ( 57 , 3 , state_enabled ) ;
1601: LD_INT 57
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1614: LD_INT 58
1616: PPUSH
1617: LD_INT 3
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1627: LD_INT 59
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1640: LD_INT 51
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1653: LD_INT 52
1655: PPUSH
1656: LD_INT 3
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1666: LD_INT 53
1668: PPUSH
1669: LD_INT 3
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 322
// end ; end ;
1679: LD_VAR 0 1
1683: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1691: LD_ADDR_VAR 0 8
1695: PUSH
1696: LD_INT 48
1698: PUSH
1699: LD_INT 49
1701: PUSH
1702: LD_INT 50
1704: PUSH
1705: LD_INT 20
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 51
1713: PUSH
1714: LD_INT 52
1716: PUSH
1717: LD_INT 69
1719: PUSH
1720: LD_INT 39
1722: PUSH
1723: LD_INT 34
1725: PUSH
1726: LD_INT 40
1728: PUSH
1729: LD_INT 53
1731: PUSH
1732: LD_INT 71
1734: PUSH
1735: LD_INT 57
1737: PUSH
1738: LD_INT 58
1740: PUSH
1741: LD_INT 44
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 27
1749: PUSH
1750: LD_INT 23
1752: PUSH
1753: LD_INT 33
1755: PUSH
1756: LD_INT 59
1758: PUSH
1759: LD_INT 54
1761: PUSH
1762: LD_INT 55
1764: PUSH
1765: LD_INT 56
1767: PUSH
1768: LD_INT 63
1770: PUSH
1771: LD_INT 64
1773: PUSH
1774: LD_INT 65
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 31
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_VAR 0 8
1840: PUSH
1841: FOR_TO
1842: IFFALSE 1918
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1844: LD_VAR 0 8
1848: PUSH
1849: LD_VAR 0 5
1853: ARRAY
1854: PPUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 321
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: PUSH
1869: LD_VAR 0 8
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 482
1889: PUSH
1890: LD_INT 1
1892: EQUAL
1893: AND
1894: IFFALSE 1916
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_VAR 0 8
1905: PUSH
1906: LD_VAR 0 5
1910: ARRAY
1911: PPUSH
1912: CALL_OW 184
1916: GO 1841
1918: POP
1919: POP
// end ;
1920: LD_VAR 0 4
1924: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1933: LD_ADDR_VAR 0 8
1937: PUSH
1938: LD_VAR 0 2
1942: PPUSH
1943: CALL_OW 313
1947: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1948: LD_ADDR_VAR 0 9
1952: PUSH
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 24
1982: PUSH
1983: LD_INT 750
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3
1992: PUSH
1993: LD_INT 54
1995: PUSH
1996: EMPTY
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 70
2013: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2014: LD_ADDR_VAR 0 6
2018: PUSH
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_VAR 0 1
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 21
2038: PUSH
2039: LD_INT 3
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 1000
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2076: LD_VAR 0 6
2080: NOT
2081: PUSH
2082: LD_INT 22
2084: PUSH
2085: LD_VAR 0 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 25
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 24
2106: PUSH
2107: LD_INT 250
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: NOT
2124: AND
2125: IFFALSE 2129
// exit ;
2127: GO 2311
// if buildings_list > 0 and engineerOkInside then
2129: LD_VAR 0 6
2133: PUSH
2134: LD_INT 0
2136: GREATER
2137: PUSH
2138: LD_VAR 0 8
2142: AND
2143: IFFALSE 2154
// ComExitBuilding ( engineerOkInside ) ;
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 0
2161: GREATER
2162: PUSH
2163: LD_VAR 0 9
2167: PUSH
2168: LD_INT 0
2170: GREATER
2171: AND
2172: IFFALSE 2192
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2174: LD_VAR 0 9
2178: PPUSH
2179: LD_VAR 0 6
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2192: LD_VAR 0 6
2196: PUSH
2197: LD_INT 0
2199: EQUAL
2200: PUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: EQUAL
2209: AND
2210: PUSH
2211: LD_VAR 0 9
2215: PUSH
2216: LD_INT 0
2218: GREATER
2219: AND
2220: IFFALSE 2236
// ComEnterUnit ( engineerOkOutside , building ) ;
2222: LD_VAR 0 9
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2236: LD_VAR 0 9
2240: PUSH
2241: LD_INT 0
2243: GREATER
2244: PUSH
2245: LD_VAR 0 6
2249: PUSH
2250: LD_INT 0
2252: EQUAL
2253: AND
2254: PUSH
2255: LD_VAR 0 4
2259: PUSH
2260: LD_INT 0
2262: GREATER
2263: AND
2264: IFFALSE 2311
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2266: LD_VAR 0 9
2270: PPUSH
2271: LD_VAR 0 4
2275: PUSH
2276: LD_INT 1
2278: ARRAY
2279: PPUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 4
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 4
2302: PUSH
2303: LD_INT 4
2305: ARRAY
2306: PPUSH
2307: CALL_OW 145
// end ;
2311: LD_VAR 0 5
2315: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2327: LD_ADDR_VAR 0 6
2331: PUSH
2332: LD_INT 22
2334: PUSH
2335: LD_VAR 0 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 23
2356: PUSH
2357: LD_INT 2
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 251
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 69
2384: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2385: LD_ADDR_VAR 0 7
2389: PUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: LD_INT 22
2397: PUSH
2398: LD_VAR 0 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 23
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 25
2419: PUSH
2420: LD_INT 4
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 50
2429: PUSH
2430: EMPTY
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PPUSH
2439: CALL_OW 70
2443: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2444: LD_ADDR_VAR 0 10
2448: PUSH
2449: LD_VAR 0 3
2453: PPUSH
2454: LD_INT 22
2456: PUSH
2457: LD_VAR 0 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 21
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 25
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 3
2495: PUSH
2496: LD_INT 24
2498: PUSH
2499: LD_INT 750
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 70
2520: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2521: LD_ADDR_VAR 0 11
2525: PUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: LD_INT 22
2533: PUSH
2534: LD_VAR 0 1
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: LD_INT 24
2575: PUSH
2576: LD_INT 1000
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PPUSH
2593: CALL_OW 70
2597: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2598: LD_VAR 0 10
2602: NOT
2603: PUSH
2604: LD_VAR 0 11
2608: NOT
2609: AND
2610: PUSH
2611: LD_VAR 0 6
2615: NOT
2616: AND
2617: IFFALSE 2621
// exit ;
2619: GO 2855
// if damageUnits > 0 and sci_list > 0 then
2621: LD_VAR 0 10
2625: PUSH
2626: LD_INT 0
2628: GREATER
2629: PUSH
2630: LD_VAR 0 6
2634: PUSH
2635: LD_INT 0
2637: GREATER
2638: AND
2639: IFFALSE 2655
// ComMoveToArea ( damageUnits , healArea ) ;
2641: LD_VAR 0 10
2645: PPUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2655: LD_VAR 0 11
2659: PUSH
2660: LD_INT 0
2662: GREATER
2663: PUSH
2664: LD_VAR 0 6
2668: PUSH
2669: LD_INT 0
2671: GREATER
2672: AND
2673: IFFALSE 2684
// ComExitBuilding ( sci_list ) ;
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2684: LD_VAR 0 11
2688: PUSH
2689: LD_INT 0
2691: GREATER
2692: PUSH
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 0
2700: GREATER
2701: AND
2702: IFFALSE 2722
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2704: LD_VAR 0 7
2708: PPUSH
2709: LD_VAR 0 11
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2722: LD_VAR 0 10
2726: PUSH
2727: LD_INT 0
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 11
2735: PUSH
2736: LD_INT 0
2738: EQUAL
2739: AND
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_INT 0
2748: GREATER
2749: AND
2750: IFFALSE 2855
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2752: LD_ADDR_VAR 0 12
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_VAR 0 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 21
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 8
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2799: LD_ADDR_VAR 0 13
2803: PUSH
2804: LD_INT 1
2806: PPUSH
2807: LD_VAR 0 12
2811: PPUSH
2812: CALL_OW 12
2816: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2817: LD_VAR 0 7
2821: PPUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 60
2827: PUSH
2828: EMPTY
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: PPUSH
2840: LD_VAR 0 12
2844: PUSH
2845: LD_VAR 0 13
2849: ARRAY
2850: PPUSH
2851: CALL_OW 120
// end ; end ;
2855: LD_VAR 0 5
2859: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
2864: PPUSH
2865: PPUSH
// tmpTab = [ ] ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2873: LD_INT 22
2875: PUSH
2876: LD_VAR 0 1
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 0
2906: GREATER
2907: IFFALSE 2990
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_VAR 0 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 30
2928: PUSH
2929: LD_INT 32
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2988
// begin for j in UnitsInside ( i ) do
2948: LD_ADDR_VAR 0 5
2952: PUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 313
2962: PUSH
2963: FOR_IN
2964: IFFALSE 2984
// tmpTab = tmpTab ^ j ;
2966: LD_ADDR_VAR 0 6
2970: PUSH
2971: LD_VAR 0 6
2975: PUSH
2976: LD_VAR 0 5
2980: ADD
2981: ST_TO_ADDR
2982: GO 2963
2984: POP
2985: POP
// end ;
2986: GO 2945
2988: POP
2989: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2990: LD_VAR 0 6
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: CALL_OW 250
3004: PPUSH
3005: LD_VAR 0 2
3009: PPUSH
3010: CALL_OW 251
3014: PPUSH
3015: CALL_OW 114
// end ;
3019: LD_VAR 0 3
3023: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3024: LD_INT 0
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
// enable ;
3030: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3031: LD_ADDR_VAR 0 7
3035: PUSH
3036: LD_VAR 0 3
3040: PPUSH
3041: CALL_OW 435
3045: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3046: LD_ADDR_VAR 0 6
3050: PUSH
3051: LD_INT 22
3053: PUSH
3054: LD_VAR 0 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 34
3065: PUSH
3066: LD_VAR 0 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 69
3083: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3084: LD_VAR 0 6
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 3
3097: PPUSH
3098: CALL_OW 435
3102: AND
3103: PUSH
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 0
3111: GREATER
3112: AND
3113: IFFALSE 3162
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3115: LD_VAR 0 6
3119: PUSH
3120: LD_INT 1
3122: ARRAY
3123: PPUSH
3124: LD_VAR 0 7
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: PPUSH
3133: LD_VAR 0 7
3137: PUSH
3138: LD_INT 2
3140: ARRAY
3141: PPUSH
3142: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3146: LD_VAR 0 6
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: CALL_OW 240
// end ; end ;
3162: LD_VAR 0 4
3166: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
3173: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3174: LD_ADDR_VAR 0 6
3178: PUSH
3179: LD_INT 22
3181: PUSH
3182: LD_VAR 0 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 30
3196: PUSH
3197: LD_INT 31
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 30
3206: PUSH
3207: LD_INT 32
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 30
3216: PUSH
3217: LD_INT 33
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 5
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 69
3260: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_INT 22
3268: PUSH
3269: LD_VAR 0 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 21
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 58
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3304: LD_VAR 0 6
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: PUSH
3313: LD_VAR 0 7
3317: PUSH
3318: LD_INT 0
3320: GREATER
3321: AND
3322: IFFALSE 3392
// begin for i in turretsList do
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 6
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3390
// begin for j in enemyBuildings do
3337: LD_ADDR_VAR 0 5
3341: PUSH
3342: LD_VAR 0 7
3346: PUSH
3347: FOR_IN
3348: IFFALSE 3386
// begin if GetDistUnits ( i , j ) < 20 then
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: CALL_OW 296
3364: PUSH
3365: LD_INT 20
3367: LESS
3368: IFFALSE 3384
// begin ComAttackUnit ( i , j ) ;
3370: LD_VAR 0 4
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 115
// end ; end ;
3384: GO 3347
3386: POP
3387: POP
// end ;
3388: GO 3334
3390: POP
3391: POP
// end ; end ;
3392: LD_VAR 0 3
3396: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
// for i = 1 to vehCount do
3401: LD_ADDR_VAR 0 9
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 3
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3464
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_VAR 0 5
3433: PPUSH
3434: LD_VAR 0 6
3438: PPUSH
3439: LD_VAR 0 4
3443: PUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_VAR 0 4
3451: PPUSH
3452: CALL_OW 12
3456: ARRAY
3457: PPUSH
3458: CALL_OW 185
3462: GO 3416
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 8
3470: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3479: LD_EXP 11
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: GREATEREQUAL
3504: PUSH
3505: LD_EXP 12
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PUSH
3524: LD_OWVAR 67
3528: ARRAY
3529: GREATEREQUAL
3530: AND
3531: IFFALSE 3792
// begin repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// for j in russianTanks do
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_EXP 11
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3780
// begin if GetSide ( j ) <> side then
3553: LD_VAR 0 4
3557: PPUSH
3558: CALL_OW 255
3562: PUSH
3563: LD_VAR 0 1
3567: NONEQUAL
3568: IFFALSE 3581
// begin ComStop ( j ) ;
3570: LD_VAR 0 4
3574: PPUSH
3575: CALL_OW 141
// continue ;
3579: GO 3550
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3581: LD_ADDR_VAR 0 6
3585: PUSH
3586: LD_INT 81
3588: PUSH
3589: LD_VAR 0 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 101
3600: PUSH
3601: LD_INT 1
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 69
3616: PPUSH
3617: LD_VAR 0 4
3621: PPUSH
3622: CALL_OW 74
3626: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3627: LD_ADDR_VAR 0 7
3631: PUSH
3632: LD_INT 81
3634: PUSH
3635: LD_VAR 0 1
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 101
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 59
3659: PUSH
3660: EMPTY
3661: LIST
3662: PUSH
3663: LD_INT 21
3665: PUSH
3666: LD_INT 1
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: EMPTY
3695: LIST
3696: PPUSH
3697: CALL_OW 69
3701: PPUSH
3702: LD_VAR 0 4
3706: PPUSH
3707: CALL_OW 74
3711: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 6
3721: PPUSH
3722: CALL_OW 296
3726: PUSH
3727: LD_INT 8
3729: PLUS
3730: PUSH
3731: LD_VAR 0 4
3735: PPUSH
3736: LD_VAR 0 7
3740: PPUSH
3741: CALL_OW 296
3745: LESS
3746: IFFALSE 3764
// ComAttackUnit ( j , target1 ) else
3748: LD_VAR 0 4
3752: PPUSH
3753: LD_VAR 0 6
3757: PPUSH
3758: CALL_OW 115
3762: GO 3778
// ComAttackUnit ( j , target2 ) ;
3764: LD_VAR 0 4
3768: PPUSH
3769: LD_VAR 0 7
3773: PPUSH
3774: CALL_OW 115
// end ;
3778: GO 3550
3780: POP
3781: POP
// until russianTanks = 0 ;
3782: LD_EXP 11
3786: PUSH
3787: LD_INT 0
3789: EQUAL
3790: IFFALSE 3533
// end ; end ;
3792: LD_VAR 0 2
3796: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3797: LD_INT 0
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3805: LD_ADDR_VAR 0 6
3809: PUSH
3810: LD_INT 22
3812: PUSH
3813: LD_VAR 0 1
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 25
3824: PUSH
3825: LD_INT 9
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 69
3840: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3841: LD_ADDR_VAR 0 7
3845: PUSH
3846: LD_INT 81
3848: PUSH
3849: LD_VAR 0 1
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 3
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PPUSH
3879: CALL_OW 69
3883: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3884: LD_ADDR_VAR 0 4
3888: PUSH
3889: LD_INT 1
3891: PPUSH
3892: LD_INT 3
3894: PPUSH
3895: CALL_OW 12
3899: ST_TO_ADDR
// for i = 1 to list do
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: DOUBLE
3906: LD_INT 1
3908: DEC
3909: ST_TO_ADDR
3910: LD_VAR 0 6
3914: PUSH
3915: FOR_TO
3916: IFFALSE 4118
// for ta in filter do
3918: LD_ADDR_VAR 0 3
3922: PUSH
3923: LD_VAR 0 7
3927: PUSH
3928: FOR_IN
3929: IFFALSE 4114
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3931: LD_VAR 0 6
3935: PUSH
3936: LD_VAR 0 5
3940: ARRAY
3941: PPUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 296
3951: PUSH
3952: LD_INT 15
3954: LESSEQUAL
3955: IFFALSE 4112
// begin case c of 1 :
3957: LD_VAR 0 4
3961: PUSH
3962: LD_INT 1
3964: DOUBLE
3965: EQUAL
3966: IFTRUE 3970
3968: GO 4008
3970: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3971: LD_VAR 0 6
3975: PUSH
3976: LD_VAR 0 5
3980: ARRAY
3981: PPUSH
3982: LD_VAR 0 3
3986: PPUSH
3987: CALL_OW 250
3991: PPUSH
3992: LD_VAR 0 3
3996: PPUSH
3997: CALL_OW 251
4001: PPUSH
4002: CALL_OW 154
4006: GO 4112
4008: LD_INT 2
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4080
4016: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4017: LD_VAR 0 6
4021: PUSH
4022: LD_VAR 0 5
4026: ARRAY
4027: PPUSH
4028: LD_VAR 0 3
4032: PPUSH
4033: CALL_OW 250
4037: PUSH
4038: LD_INT 1
4040: NEG
4041: PPUSH
4042: LD_INT 1
4044: PPUSH
4045: CALL_OW 12
4049: PLUS
4050: PPUSH
4051: LD_VAR 0 3
4055: PPUSH
4056: CALL_OW 251
4060: PUSH
4061: LD_INT 1
4063: NEG
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 12
4072: PLUS
4073: PPUSH
4074: CALL_OW 153
4078: GO 4112
4080: LD_INT 3
4082: DOUBLE
4083: EQUAL
4084: IFTRUE 4088
4086: GO 4111
4088: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4089: LD_VAR 0 6
4093: PUSH
4094: LD_VAR 0 5
4098: ARRAY
4099: PPUSH
4100: LD_VAR 0 3
4104: PPUSH
4105: CALL_OW 115
4109: GO 4112
4111: POP
// end ; end ;
4112: GO 3928
4114: POP
4115: POP
4116: GO 3915
4118: POP
4119: POP
// end ;
4120: LD_VAR 0 2
4124: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4125: LD_INT 0
4127: PPUSH
4128: PPUSH
4129: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4130: LD_EXP 11
4134: PUSH
4135: LD_INT 1
4137: GREATEREQUAL
4138: PUSH
4139: LD_EXP 12
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 2
4149: PUSH
4150: LD_INT 2
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: GREATEREQUAL
4164: AND
4165: IFFALSE 4304
// repeat wait ( 0 0$3 ) ;
4167: LD_INT 105
4169: PPUSH
4170: CALL_OW 67
// if russianTimeLapsers > 0 then
4174: LD_EXP 12
4178: PUSH
4179: LD_INT 0
4181: GREATER
4182: IFFALSE 4294
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_EXP 12
4193: PPUSH
4194: LD_INT 3
4196: PUSH
4197: LD_INT 60
4199: PUSH
4200: EMPTY
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PPUSH
4207: CALL_OW 72
4211: PUSH
4212: FOR_IN
4213: IFFALSE 4292
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4215: LD_ADDR_VAR 0 4
4219: PUSH
4220: LD_INT 81
4222: PUSH
4223: LD_VAR 0 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 101
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 69
4250: PPUSH
4251: LD_VAR 0 3
4255: PPUSH
4256: CALL_OW 74
4260: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: CALL_OW 250
4275: PPUSH
4276: LD_VAR 0 4
4280: PPUSH
4281: CALL_OW 251
4285: PPUSH
4286: CALL_OW 111
// end ;
4290: GO 4212
4292: POP
4293: POP
// until russianTimeLapsers = 0 ;
4294: LD_EXP 12
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: IFFALSE 4167
// end ;
4304: LD_VAR 0 2
4308: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4309: LD_INT 0
4311: PPUSH
4312: PPUSH
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4317: LD_ADDR_VAR 0 7
4321: PUSH
4322: LD_VAR 0 2
4326: PPUSH
4327: LD_INT 22
4329: PUSH
4330: LD_VAR 0 1
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_INT 21
4341: PUSH
4342: LD_INT 2
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: LD_INT 34
4351: PUSH
4352: LD_INT 52
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 70
4368: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4369: LD_ADDR_VAR 0 8
4373: PUSH
4374: LD_VAR 0 2
4378: PPUSH
4379: LD_INT 22
4381: PUSH
4382: LD_VAR 0 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 21
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 3
4403: PUSH
4404: LD_INT 24
4406: PUSH
4407: LD_INT 1000
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: PPUSH
4426: CALL_OW 70
4430: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4431: LD_VAR 0 8
4435: PUSH
4436: LD_INT 0
4438: GREATER
4439: PUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: LD_INT 24
4447: PUSH
4448: LD_INT 750
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: PUSH
4460: LD_INT 0
4462: GREATER
4463: AND
4464: IFFALSE 4484
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4466: LD_VAR 0 7
4470: PPUSH
4471: LD_VAR 0 8
4475: PUSH
4476: LD_INT 1
4478: ARRAY
4479: PPUSH
4480: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4484: LD_VAR 0 7
4488: PUSH
4489: LD_INT 0
4491: GREATER
4492: PUSH
4493: LD_VAR 0 8
4497: PUSH
4498: LD_INT 0
4500: EQUAL
4501: AND
4502: PUSH
4503: LD_EXP 10
4507: PUSH
4508: LD_INT 0
4510: GREATER
4511: AND
4512: IFFALSE 4559
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1
4526: ARRAY
4527: PPUSH
4528: LD_EXP 10
4532: PUSH
4533: LD_INT 2
4535: ARRAY
4536: PPUSH
4537: LD_EXP 10
4541: PUSH
4542: LD_INT 3
4544: ARRAY
4545: PPUSH
4546: LD_EXP 10
4550: PUSH
4551: LD_INT 4
4553: ARRAY
4554: PPUSH
4555: CALL_OW 567
// end ; end_of_file
4559: LD_VAR 0 3
4563: RET
// every 0 0$1 do
4564: GO 4566
4566: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4567: LD_INT 3
4569: PPUSH
4570: LD_INT 14
4572: PPUSH
4573: LD_INT 3
4575: PPUSH
4576: CALL 1684 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4580: LD_INT 3
4582: PPUSH
4583: LD_INT 15
4585: PPUSH
4586: LD_INT 3
4588: PPUSH
4589: CALL 1684 0 3
// end ;
4593: END
// every 0 0$1 trigger russianAI = 1 do
4594: LD_EXP 13
4598: PUSH
4599: LD_INT 1
4601: EQUAL
4602: IFFALSE 4715
4604: GO 4606
4606: DISABLE
// begin enable ;
4607: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4608: LD_INT 3
4610: PPUSH
4611: LD_INT 22
4613: PPUSH
4614: LD_INT 7
4616: PPUSH
4617: LD_EXP 10
4621: PPUSH
4622: CALL 1925 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4626: LD_INT 3
4628: PPUSH
4629: LD_INT 8
4631: PPUSH
4632: LD_INT 7
4634: PPUSH
4635: LD_INT 14
4637: PUSH
4638: LD_INT 15
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 2
4650: PPUSH
4651: CALL_OW 12
4655: ARRAY
4656: PPUSH
4657: CALL 2316 0 4
// AttackVehicles ( 3 ) ;
4661: LD_INT 3
4663: PPUSH
4664: CALL 3471 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4668: LD_INT 3
4670: PPUSH
4671: LD_INT 1
4673: PPUSH
4674: CALL 3167 0 2
// TimeLapsersAI ( 3 ) ;
4678: LD_INT 3
4680: PPUSH
4681: CALL 4125 0 1
// IntBazooka ( 3 ) ;
4685: LD_INT 3
4687: PPUSH
4688: CALL 3797 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4692: LD_INT 3
4694: PPUSH
4695: LD_INT 51
4697: PPUSH
4698: LD_INT 14
4700: PPUSH
4701: CALL 3024 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4705: LD_INT 3
4707: PPUSH
4708: LD_INT 7
4710: PPUSH
4711: CALL 4309 0 2
// end ;
4715: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4716: LD_INT 22
4718: PPUSH
4719: CALL_OW 303
4723: PUSH
4724: LD_INT 22
4726: PPUSH
4727: CALL_OW 255
4731: PUSH
4732: LD_INT 1
4734: EQUAL
4735: OR
4736: IFFALSE 4751
4738: GO 4740
4740: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4741: LD_INT 3
4743: PPUSH
4744: LD_INT 22
4746: PPUSH
4747: CALL 2860 0 2
4751: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4752: LD_EXP 13
4756: PUSH
4757: LD_INT 1
4759: EQUAL
4760: PUSH
4761: LD_INT 22
4763: PUSH
4764: LD_INT 3
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 21
4773: PUSH
4774: LD_INT 2
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 50
4783: PUSH
4784: EMPTY
4785: LIST
4786: PUSH
4787: LD_INT 33
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 34
4802: PUSH
4803: LD_INT 46
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 34
4812: PUSH
4813: LD_INT 45
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 34
4822: PUSH
4823: LD_INT 44
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 34
4832: PUSH
4833: LD_INT 49
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 34
4842: PUSH
4843: LD_INT 47
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PPUSH
4865: CALL_OW 69
4869: PUSH
4870: LD_INT 0
4872: EQUAL
4873: AND
4874: IFFALSE 5061
4876: GO 4878
4878: DISABLE
// begin enable ;
4879: ENABLE
// if russianRocketsAvalaible = 1 then
4880: LD_EXP 14
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: IFFALSE 4945
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4890: LD_INT 3
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: LD_OWVAR 67
4914: ARRAY
4915: PPUSH
4916: LD_INT 46
4918: PUSH
4919: LD_INT 45
4921: PUSH
4922: LD_INT 44
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: PPUSH
4930: LD_INT 3
4932: PPUSH
4933: LD_INT 3
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL 3397 0 7
4943: GO 5002
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4945: LD_INT 3
4947: PPUSH
4948: LD_INT 1
4950: PPUSH
4951: LD_INT 3
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: LD_INT 4
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: PUSH
4965: LD_OWVAR 67
4969: ARRAY
4970: PPUSH
4971: LD_INT 46
4973: PUSH
4974: LD_INT 45
4976: PUSH
4977: LD_INT 44
4979: PUSH
4980: LD_INT 47
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: LD_INT 3
4991: PPUSH
4992: LD_INT 3
4994: PPUSH
4995: LD_INT 24
4997: PPUSH
4998: CALL 3397 0 7
// if russianTimeLapsers = 0 then
5002: LD_EXP 12
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: IFFALSE 5061
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 40
5017: PPUSH
5018: LD_INT 1
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: LD_INT 2
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: PUSH
5032: LD_OWVAR 67
5036: ARRAY
5037: PPUSH
5038: LD_INT 49
5040: PUSH
5041: LD_INT 49
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: LD_INT 24
5056: PPUSH
5057: CALL 3397 0 7
// end ; end_of_file
5061: END
// every 1 do var dec1 , dec2 ;
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
5068: PPUSH
// begin InGameOn ;
5069: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
5073: LD_INT 48
5075: PPUSH
5076: LD_STRING kappa
5078: PPUSH
5079: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5083: LD_INT 95
5085: PPUSH
5086: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5090: LD_INT 95
5092: PPUSH
5093: LD_INT 30
5095: PPUSH
5096: LD_INT 11
5098: PPUSH
5099: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5103: LD_INT 30
5105: PPUSH
5106: LD_INT 11
5108: PPUSH
5109: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5113: LD_EXP 5
5117: PPUSH
5118: LD_STRING D1-Pow-1
5120: PPUSH
5121: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5125: LD_EXP 1
5129: PPUSH
5130: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5134: LD_EXP 1
5138: PPUSH
5139: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D1-JMM-1
5150: PPUSH
5151: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5155: LD_EXP 5
5159: PPUSH
5160: LD_STRING D1-Pow-2
5162: PPUSH
5163: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5167: LD_EXP 1
5171: PPUSH
5172: LD_STRING D1-JMM-2
5174: PPUSH
5175: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5179: LD_EXP 1
5183: PPUSH
5184: LD_INT 95
5186: PPUSH
5187: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5191: LD_STRING M1
5193: PPUSH
5194: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5198: LD_INT 35
5200: PPUSH
5201: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5205: LD_EXP 1
5209: PPUSH
5210: LD_INT 95
5212: PPUSH
5213: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5217: LD_INT 95
5219: PPUSH
5220: LD_INT 51
5222: PPUSH
5223: LD_INT 21
5225: PPUSH
5226: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5230: LD_INT 95
5232: PPUSH
5233: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5237: LD_INT 95
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 308
5247: IFFALSE 5198
// if JMMGirl = 1 then
5249: LD_EXP 7
5253: PUSH
5254: LD_INT 1
5256: EQUAL
5257: IFFALSE 5558
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5259: LD_EXP 2
5263: PPUSH
5264: LD_STRING D2J-Joan-1
5266: PPUSH
5267: CALL_OW 94
// dec1 = Query1 ;
5271: LD_ADDR_VAR 0 1
5275: PUSH
5276: CALL 1283 0 0
5280: ST_TO_ADDR
// if dec1 = 1 then
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 1
5288: EQUAL
5289: IFFALSE 5536
// begin ComExitVehicle ( JMM ) ;
5291: LD_EXP 1
5295: PPUSH
5296: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_STRING D2J-JMM-1
5307: PPUSH
5308: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5312: LD_EXP 2
5316: PPUSH
5317: LD_STRING D2J-Joan-2
5319: PPUSH
5320: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5324: LD_EXP 1
5328: PPUSH
5329: LD_STRING D2J-JMM-2
5331: PPUSH
5332: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5336: LD_EXP 2
5340: PPUSH
5341: LD_STRING D2J-Joan-3
5343: PPUSH
5344: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5348: LD_EXP 5
5352: PPUSH
5353: LD_STRING DPowell-Pow-1
5355: PPUSH
5356: CALL_OW 94
// dec2 = Query2 ;
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: CALL 1338 0 0
5369: ST_TO_ADDR
// if dec2 = 1 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 1
5377: EQUAL
5378: IFFALSE 5420
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2Ja-JMM-1
5387: PPUSH
5388: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5392: LD_EXP 2
5396: PPUSH
5397: LD_STRING D2Ja-Joan-1
5399: PPUSH
5400: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5404: LD_EXP 1
5408: PPUSH
5409: LD_STRING D2Ja-JMM-2
5411: PPUSH
5412: CALL_OW 88
// InGameOff ;
5416: CALL_OW 9
// end ; if dec2 = 2 then
5420: LD_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: EQUAL
5428: IFFALSE 5502
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5430: LD_EXP 1
5434: PPUSH
5435: LD_STRING D2Jb-JMM-1
5437: PPUSH
5438: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5442: LD_EXP 2
5446: PPUSH
5447: LD_STRING D2Jb-Joan-1
5449: PPUSH
5450: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5454: LD_EXP 1
5458: PPUSH
5459: LD_STRING D2Jb-JMM-2
5461: PPUSH
5462: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D2Jb-Joan-2
5473: PPUSH
5474: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D2Jb-JMM-3
5485: PPUSH
5486: CALL_OW 88
// fastEnd = 1 ;
5490: LD_ADDR_EXP 15
5494: PUSH
5495: LD_INT 1
5497: ST_TO_ADDR
// FinishMission ;
5498: CALL 9491 0 0
// end ; if dec2 = 3 then
5502: LD_VAR 0 2
5506: PUSH
5507: LD_INT 3
5509: EQUAL
5510: IFFALSE 5536
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5512: LD_EXP 2
5516: PPUSH
5517: LD_STRING D2Jc-Joan-1
5519: PPUSH
5520: CALL_OW 94
// fastEnd = 1 ;
5524: LD_ADDR_EXP 15
5528: PUSH
5529: LD_INT 1
5531: ST_TO_ADDR
// FinishMission ;
5532: CALL 9491 0 0
// end ; end ; if dec1 = 2 then
5536: LD_VAR 0 1
5540: PUSH
5541: LD_INT 2
5543: EQUAL
5544: IFFALSE 5558
// begin fastEnd = 1 ;
5546: LD_ADDR_EXP 15
5550: PUSH
5551: LD_INT 1
5553: ST_TO_ADDR
// FinishMission ;
5554: CALL 9491 0 0
// end ; end ; if JMMGirl = 2 then
5558: LD_EXP 7
5562: PUSH
5563: LD_INT 2
5565: EQUAL
5566: IFFALSE 5879
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5568: LD_EXP 3
5572: PPUSH
5573: LD_STRING D2L-Lisa-1
5575: PPUSH
5576: CALL_OW 94
// dec1 = Query1 ;
5580: LD_ADDR_VAR 0 1
5584: PUSH
5585: CALL 1283 0 0
5589: ST_TO_ADDR
// if dec1 = 1 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5857
// begin ComExitVehicle ( JMM ) ;
5600: LD_EXP 1
5604: PPUSH
5605: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5609: LD_EXP 1
5613: PPUSH
5614: LD_STRING D2L-JMM-1
5616: PPUSH
5617: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5621: LD_EXP 3
5625: PPUSH
5626: LD_STRING D2L-Lisa-2
5628: PPUSH
5629: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5633: LD_EXP 1
5637: PPUSH
5638: LD_STRING D2L-JMM-2
5640: PPUSH
5641: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5645: LD_EXP 3
5649: PPUSH
5650: LD_STRING D2L-Lisa-3
5652: PPUSH
5653: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5657: LD_EXP 5
5661: PPUSH
5662: LD_STRING DPowell-Pow-1
5664: PPUSH
5665: CALL_OW 94
// dec2 = Query2 ;
5669: LD_ADDR_VAR 0 2
5673: PUSH
5674: CALL 1338 0 0
5678: ST_TO_ADDR
// if dec2 = 1 then
5679: LD_VAR 0 2
5683: PUSH
5684: LD_INT 1
5686: EQUAL
5687: IFFALSE 5753
// begin Say ( JMM , D2La-JMM-1 ) ;
5689: LD_EXP 1
5693: PPUSH
5694: LD_STRING D2La-JMM-1
5696: PPUSH
5697: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5701: LD_EXP 3
5705: PPUSH
5706: LD_STRING D2La-Lisa-1
5708: PPUSH
5709: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5713: LD_EXP 1
5717: PPUSH
5718: LD_STRING D2La-JMM-2
5720: PPUSH
5721: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5725: LD_EXP 3
5729: PPUSH
5730: LD_STRING D2La-Lisa-2
5732: PPUSH
5733: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5737: LD_EXP 1
5741: PPUSH
5742: LD_STRING D2La-JMM-3
5744: PPUSH
5745: CALL_OW 88
// InGameOff ;
5749: CALL_OW 9
// end ; if dec2 = 2 then
5753: LD_VAR 0 2
5757: PUSH
5758: LD_INT 2
5760: EQUAL
5761: IFFALSE 5823
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5763: LD_EXP 1
5767: PPUSH
5768: LD_STRING D2Lb-JMM-1
5770: PPUSH
5771: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5775: LD_EXP 3
5779: PPUSH
5780: LD_STRING D2Lb-Lisa-1
5782: PPUSH
5783: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_STRING D2Lb-JMM-2
5794: PPUSH
5795: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5799: LD_EXP 3
5803: PPUSH
5804: LD_STRING D2Lb-Lisa-2
5806: PPUSH
5807: CALL_OW 94
// fastEnd = 1 ;
5811: LD_ADDR_EXP 15
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// FinishMission ;
5819: CALL 9491 0 0
// end ; if dec2 = 3 then
5823: LD_VAR 0 2
5827: PUSH
5828: LD_INT 3
5830: EQUAL
5831: IFFALSE 5857
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5833: LD_EXP 3
5837: PPUSH
5838: LD_STRING D2Lc-Lisa-1
5840: PPUSH
5841: CALL_OW 94
// fastEnd = 1 ;
5845: LD_ADDR_EXP 15
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// FinishMission ;
5853: CALL 9491 0 0
// end ; end ; if dec1 = 2 then
5857: LD_VAR 0 1
5861: PUSH
5862: LD_INT 2
5864: EQUAL
5865: IFFALSE 5879
// begin fastEnd = 1 ;
5867: LD_ADDR_EXP 15
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// FinishMission ;
5875: CALL 9491 0 0
// end ; end ; if JMMGirl = 3 then
5879: LD_EXP 7
5883: PUSH
5884: LD_INT 3
5886: EQUAL
5887: IFFALSE 6104
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5889: LD_EXP 4
5893: PPUSH
5894: LD_STRING D2X-Con-1
5896: PPUSH
5897: CALL_OW 94
// dec1 = Query1 ;
5901: LD_ADDR_VAR 0 1
5905: PUSH
5906: CALL 1283 0 0
5910: ST_TO_ADDR
// if dec1 = 1 then
5911: LD_VAR 0 1
5915: PUSH
5916: LD_INT 1
5918: EQUAL
5919: IFFALSE 6082
// begin ComExitVehicle ( JMM ) ;
5921: LD_EXP 1
5925: PPUSH
5926: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5930: LD_EXP 1
5934: PPUSH
5935: LD_STRING D2X-JMM-1
5937: PPUSH
5938: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5942: LD_EXP 4
5946: PPUSH
5947: LD_STRING D2X-Con-2
5949: PPUSH
5950: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5954: LD_EXP 5
5958: PPUSH
5959: LD_STRING DPowell-Pow-1
5961: PPUSH
5962: CALL_OW 94
// dec2 = Query2 ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: CALL 1338 0 0
5975: ST_TO_ADDR
// if dec2 = 1 then
5976: LD_VAR 0 2
5980: PUSH
5981: LD_INT 1
5983: EQUAL
5984: IFFALSE 6002
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5986: LD_EXP 1
5990: PPUSH
5991: LD_STRING D2Xa-JMM-1
5993: PPUSH
5994: CALL_OW 88
// InGameOff ;
5998: CALL_OW 9
// end ; if dec2 = 2 then
6002: LD_VAR 0 2
6006: PUSH
6007: LD_INT 2
6009: EQUAL
6010: IFFALSE 6048
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6012: LD_EXP 1
6016: PPUSH
6017: LD_STRING D2Xb-JMM-1
6019: PPUSH
6020: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6024: LD_EXP 4
6028: PPUSH
6029: LD_STRING D2Xb-Con-1
6031: PPUSH
6032: CALL_OW 94
// fastEnd = 1 ;
6036: LD_ADDR_EXP 15
6040: PUSH
6041: LD_INT 1
6043: ST_TO_ADDR
// FinishMission ;
6044: CALL 9491 0 0
// end ; if dec2 = 3 then
6048: LD_VAR 0 2
6052: PUSH
6053: LD_INT 3
6055: EQUAL
6056: IFFALSE 6082
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6058: LD_EXP 4
6062: PPUSH
6063: LD_STRING D2Xc-Con-1
6065: PPUSH
6066: CALL_OW 94
// fastEnd = 1 ;
6070: LD_ADDR_EXP 15
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// FinishMission ;
6078: CALL 9491 0 0
// end ; end ; if dec1 = 2 then
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 2
6089: EQUAL
6090: IFFALSE 6104
// begin fastEnd = 1 ;
6092: LD_ADDR_EXP 15
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// FinishMission ;
6100: CALL 9491 0 0
// end ; end ; if fastEnd = 1 then
6104: LD_EXP 15
6108: PUSH
6109: LD_INT 1
6111: EQUAL
6112: IFFALSE 6118
// FinishMission ;
6114: CALL 9491 0 0
// end ;
6118: PPOPN 2
6120: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6121: LD_EXP 1
6125: PPUSH
6126: LD_INT 6
6128: PPUSH
6129: CALL_OW 308
6133: IFFALSE 6899
6135: GO 6137
6137: DISABLE
// begin InGameOn ;
6138: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6142: LD_INT 35
6144: PPUSH
6145: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6149: LD_EXP 1
6153: PPUSH
6154: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6158: LD_EXP 1
6162: PPUSH
6163: LD_INT 62
6165: PPUSH
6166: LD_INT 104
6168: PPUSH
6169: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6173: LD_EXP 1
6177: PPUSH
6178: LD_EXP 2
6182: PPUSH
6183: CALL_OW 296
6187: PUSH
6188: LD_INT 4
6190: LESS
6191: PUSH
6192: LD_EXP 1
6196: PPUSH
6197: LD_EXP 3
6201: PPUSH
6202: CALL_OW 296
6206: PUSH
6207: LD_INT 4
6209: LESS
6210: OR
6211: PUSH
6212: LD_EXP 1
6216: PPUSH
6217: LD_EXP 4
6221: PPUSH
6222: CALL_OW 296
6226: PUSH
6227: LD_INT 4
6229: LESS
6230: OR
6231: IFFALSE 6142
// case JMMGirl of 1 :
6233: LD_EXP 7
6237: PUSH
6238: LD_INT 1
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6458
6246: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6247: LD_INT 22
6249: PUSH
6250: LD_INT 4
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PPUSH
6257: CALL_OW 69
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6269: LD_EXP 2
6273: PPUSH
6274: LD_EXP 1
6278: PPUSH
6279: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6283: LD_EXP 1
6287: PPUSH
6288: LD_EXP 2
6292: PPUSH
6293: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6297: LD_EXP 2
6301: PUSH
6302: LD_EXP 1
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 87
// wait ( 0 0$1 ) ;
6315: LD_INT 35
6317: PPUSH
6318: CALL_OW 67
// DialogueOn ;
6322: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6326: LD_EXP 2
6330: PPUSH
6331: LD_STRING D3J-Joan-1
6333: PPUSH
6334: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING D3J-JMM-1
6345: PPUSH
6346: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6350: LD_EXP 2
6354: PPUSH
6355: LD_STRING D3J-Joan-2
6357: PPUSH
6358: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6362: LD_EXP 1
6366: PPUSH
6367: LD_STRING D3J-JMM-2
6369: PPUSH
6370: CALL_OW 88
// wait ( 0 0$1 ) ;
6374: LD_INT 35
6376: PPUSH
6377: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6381: LD_EXP 1
6385: PPUSH
6386: LD_STRING D4-JMM-1
6388: PPUSH
6389: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6393: LD_EXP 2
6397: PPUSH
6398: LD_STRING D4-Joan-1
6400: PPUSH
6401: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6405: LD_EXP 1
6409: PPUSH
6410: LD_STRING D4-JMM-2
6412: PPUSH
6413: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6417: LD_EXP 2
6421: PPUSH
6422: LD_STRING D4-Joan-2
6424: PPUSH
6425: CALL_OW 88
// DialogueOff ;
6429: CALL_OW 7
// InGameOff ;
6433: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6437: LD_STRING M2J
6439: PPUSH
6440: CALL_OW 337
// SaveForQuickRestart ;
6444: CALL_OW 22
// russianAI = 1 ;
6448: LD_ADDR_EXP 13
6452: PUSH
6453: LD_INT 1
6455: ST_TO_ADDR
// end ; 2 :
6456: GO 6899
6458: LD_INT 2
6460: DOUBLE
6461: EQUAL
6462: IFTRUE 6466
6464: GO 6678
6466: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6467: LD_INT 22
6469: PUSH
6470: LD_INT 4
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: PPUSH
6482: LD_INT 1
6484: PPUSH
6485: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6489: LD_EXP 3
6493: PPUSH
6494: LD_EXP 1
6498: PPUSH
6499: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_EXP 3
6512: PPUSH
6513: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6517: LD_EXP 3
6521: PUSH
6522: LD_EXP 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PPUSH
6531: CALL_OW 87
// wait ( 0 0$1 ) ;
6535: LD_INT 35
6537: PPUSH
6538: CALL_OW 67
// DialogueOn ;
6542: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6546: LD_EXP 3
6550: PPUSH
6551: LD_STRING D3L-Lisa-1
6553: PPUSH
6554: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6558: LD_EXP 1
6562: PPUSH
6563: LD_STRING D3L-JMM-1
6565: PPUSH
6566: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6570: LD_EXP 3
6574: PPUSH
6575: LD_STRING D3L-Lisa-2
6577: PPUSH
6578: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6582: LD_EXP 1
6586: PPUSH
6587: LD_STRING D3L-JMM-2
6589: PPUSH
6590: CALL_OW 88
// wait ( 0 0$1 ) ;
6594: LD_INT 35
6596: PPUSH
6597: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6601: LD_EXP 1
6605: PPUSH
6606: LD_STRING D4-JMM-1
6608: PPUSH
6609: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6613: LD_EXP 3
6617: PPUSH
6618: LD_STRING D4-Lisa-1
6620: PPUSH
6621: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6625: LD_EXP 1
6629: PPUSH
6630: LD_STRING D4-JMM-1
6632: PPUSH
6633: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6637: LD_EXP 3
6641: PPUSH
6642: LD_STRING D4-Lisa-2
6644: PPUSH
6645: CALL_OW 88
// DialogueOff ;
6649: CALL_OW 7
// InGameOff ;
6653: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6657: LD_STRING M2L
6659: PPUSH
6660: CALL_OW 337
// SaveForQuickRestart ;
6664: CALL_OW 22
// russianAI = 1 ;
6668: LD_ADDR_EXP 13
6672: PUSH
6673: LD_INT 1
6675: ST_TO_ADDR
// end ; 3 :
6676: GO 6899
6678: LD_INT 3
6680: DOUBLE
6681: EQUAL
6682: IFTRUE 6686
6684: GO 6898
6686: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 4
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6709: LD_EXP 4
6713: PPUSH
6714: LD_EXP 1
6718: PPUSH
6719: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6723: LD_EXP 1
6727: PPUSH
6728: LD_EXP 4
6732: PPUSH
6733: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6737: LD_EXP 2
6741: PUSH
6742: LD_EXP 1
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 87
// wait ( 0 0$1 ) ;
6755: LD_INT 35
6757: PPUSH
6758: CALL_OW 67
// DialogueOn ;
6762: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6766: LD_EXP 4
6770: PPUSH
6771: LD_STRING D3X-Con-1
6773: PPUSH
6774: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6778: LD_EXP 1
6782: PPUSH
6783: LD_STRING D3J-JMM-1
6785: PPUSH
6786: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6790: LD_EXP 4
6794: PPUSH
6795: LD_STRING D3J-Joan-2
6797: PPUSH
6798: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6802: LD_EXP 1
6806: PPUSH
6807: LD_STRING D3J-JMM-2
6809: PPUSH
6810: CALL_OW 88
// wait ( 0 0$1 ) ;
6814: LD_INT 35
6816: PPUSH
6817: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6821: LD_EXP 1
6825: PPUSH
6826: LD_STRING D4-JMM-1
6828: PPUSH
6829: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6833: LD_EXP 4
6837: PPUSH
6838: LD_STRING D4-Con-1
6840: PPUSH
6841: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6845: LD_EXP 1
6849: PPUSH
6850: LD_STRING D4-JMM-2
6852: PPUSH
6853: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6857: LD_EXP 4
6861: PPUSH
6862: LD_STRING D4-Con-2
6864: PPUSH
6865: CALL_OW 88
// DialogueOff ;
6869: CALL_OW 7
// InGameOff ;
6873: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6877: LD_STRING M2X
6879: PPUSH
6880: CALL_OW 337
// SaveForQuickRestart ;
6884: CALL_OW 22
// russianAI = 1 ;
6888: LD_ADDR_EXP 13
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// end ; end ;
6896: GO 6899
6898: POP
// end ;
6899: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6900: LD_INT 32
6902: PPUSH
6903: CALL_OW 306
6907: IFFALSE 7240
6909: GO 6911
6911: DISABLE
// begin case JMMGirl of 1 :
6912: LD_EXP 7
6916: PUSH
6917: LD_INT 1
6919: DOUBLE
6920: EQUAL
6921: IFTRUE 6925
6923: GO 7047
6925: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6926: LD_EXP 1
6930: PPUSH
6931: LD_STRING D6J-JMM-1
6933: PPUSH
6934: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6938: LD_STRING 13f_Denis
6940: PPUSH
6941: CALL_OW 28
6945: PUSH
6946: LD_INT 1
6948: EQUAL
6949: PUSH
6950: LD_STRING 13s_Denis
6952: PPUSH
6953: CALL_OW 28
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: OR
6962: IFFALSE 7002
// begin Say ( Joan , D6J-Joan-1 ) ;
6964: LD_EXP 2
6968: PPUSH
6969: LD_STRING D6J-Joan-1
6971: PPUSH
6972: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6976: LD_EXP 1
6980: PPUSH
6981: LD_STRING D6J-JMM-2
6983: PPUSH
6984: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6988: LD_EXP 2
6992: PPUSH
6993: LD_STRING D6J-Joan-2
6995: PPUSH
6996: CALL_OW 88
// end else
7000: GO 7014
// begin Say ( Joan , D6J-Joan-2a ) ;
7002: LD_EXP 2
7006: PPUSH
7007: LD_STRING D6J-Joan-2a
7009: PPUSH
7010: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7014: LD_EXP 1
7018: PPUSH
7019: LD_STRING D6J-JMM-3
7021: PPUSH
7022: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7026: LD_EXP 2
7030: PPUSH
7031: LD_STRING D6J-Joan-3
7033: PPUSH
7034: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7038: LD_STRING M3
7040: PPUSH
7041: CALL_OW 337
// end ; 2 :
7045: GO 7240
7047: LD_INT 2
7049: DOUBLE
7050: EQUAL
7051: IFTRUE 7055
7053: GO 7113
7055: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7056: LD_EXP 1
7060: PPUSH
7061: LD_STRING D6L-JMM-1
7063: PPUSH
7064: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7068: LD_EXP 3
7072: PPUSH
7073: LD_STRING D6L-Lisa-1
7075: PPUSH
7076: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7080: LD_EXP 1
7084: PPUSH
7085: LD_STRING D6L-JMM-2
7087: PPUSH
7088: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7092: LD_EXP 3
7096: PPUSH
7097: LD_STRING D6L-Lisa-2
7099: PPUSH
7100: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7104: LD_STRING M3
7106: PPUSH
7107: CALL_OW 337
// end ; 3 :
7111: GO 7240
7113: LD_INT 3
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7239
7121: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7122: LD_EXP 1
7126: PPUSH
7127: LD_STRING D6X-JMM-1
7129: PPUSH
7130: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7134: LD_EXP 4
7138: PPUSH
7139: LD_STRING D6X-Con-1
7141: PPUSH
7142: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6X-JMM-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7158: LD_EXP 4
7162: PPUSH
7163: LD_STRING D6X-Con-2
7165: PPUSH
7166: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_STRING D6X-JMM-3
7177: PPUSH
7178: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7182: LD_EXP 4
7186: PPUSH
7187: LD_STRING D6X-Con-3
7189: PPUSH
7190: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7194: LD_EXP 1
7198: PPUSH
7199: LD_STRING D6X-JMM-4
7201: PPUSH
7202: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7206: LD_EXP 4
7210: PPUSH
7211: LD_STRING D6X-Con-4
7213: PPUSH
7214: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7218: LD_EXP 1
7222: PPUSH
7223: LD_STRING D6X-JMM-5
7225: PPUSH
7226: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7230: LD_STRING M3
7232: PPUSH
7233: CALL_OW 337
// end ; end ;
7237: GO 7240
7239: POP
// end ;
7240: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7241: LD_INT 22
7243: PUSH
7244: LD_INT 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 33
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 69
7269: PPUSH
7270: CALL_OW 306
7274: IFFALSE 7420
7276: GO 7278
7278: DISABLE
// begin case JMMGirl of 1 :
7279: LD_EXP 7
7283: PUSH
7284: LD_INT 1
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7329
7292: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7293: LD_EXP 1
7297: PPUSH
7298: LD_STRING D5-JMM-1
7300: PPUSH
7301: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7305: LD_INT 77
7307: PPUSH
7308: LD_INT 87
7310: PPUSH
7311: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7315: LD_EXP 2
7319: PPUSH
7320: LD_STRING D5-Joan-1
7322: PPUSH
7323: CALL_OW 88
// end ; 2 :
7327: GO 7420
7329: LD_INT 2
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7337
7335: GO 7374
7337: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7338: LD_EXP 1
7342: PPUSH
7343: LD_STRING D5-JMM-1
7345: PPUSH
7346: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7350: LD_INT 77
7352: PPUSH
7353: LD_INT 87
7355: PPUSH
7356: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7360: LD_EXP 3
7364: PPUSH
7365: LD_STRING D5-Lisa-1
7367: PPUSH
7368: CALL_OW 88
// end ; 3 :
7372: GO 7420
7374: LD_INT 3
7376: DOUBLE
7377: EQUAL
7378: IFTRUE 7382
7380: GO 7419
7382: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7383: LD_EXP 1
7387: PPUSH
7388: LD_STRING D5-JMM-1
7390: PPUSH
7391: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7395: LD_INT 77
7397: PPUSH
7398: LD_INT 87
7400: PPUSH
7401: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7405: LD_EXP 4
7409: PPUSH
7410: LD_STRING D5-Con-1
7412: PPUSH
7413: CALL_OW 88
// end ; end ;
7417: GO 7420
7419: POP
// end ;
7420: END
// every 15 15$0 do
7421: GO 7423
7423: DISABLE
// begin DialogueOn ;
7424: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7428: LD_EXP 5
7432: PPUSH
7433: LD_STRING D7-Pow-1
7435: PPUSH
7436: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7440: LD_EXP 1
7444: PPUSH
7445: LD_STRING D7-JMM-1
7447: PPUSH
7448: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7452: LD_EXP 5
7456: PPUSH
7457: LD_STRING D7-Pow-2
7459: PPUSH
7460: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7464: LD_EXP 1
7468: PPUSH
7469: LD_STRING D7-JMM-2
7471: PPUSH
7472: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7476: LD_EXP 5
7480: PPUSH
7481: LD_STRING D7-Pow-3
7483: PPUSH
7484: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7488: LD_EXP 1
7492: PPUSH
7493: LD_STRING D7-JMM-3
7495: PPUSH
7496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7500: LD_EXP 5
7504: PPUSH
7505: LD_STRING D7-Pow-4
7507: PPUSH
7508: CALL_OW 94
// DialogueOff ;
7512: CALL_OW 7
// end ; end_of_file
7516: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7517: LD_VAR 0 1
7521: PPUSH
7522: CALL_OW 255
7526: PUSH
7527: LD_INT 3
7529: EQUAL
7530: IFFALSE 7604
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7532: LD_ADDR_EXP 10
7536: PUSH
7537: LD_EXP 10
7541: PPUSH
7542: LD_INT 1
7544: PPUSH
7545: CALL_OW 3
7549: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7550: LD_ADDR_EXP 10
7554: PUSH
7555: LD_EXP 10
7559: PPUSH
7560: LD_INT 1
7562: PPUSH
7563: CALL_OW 3
7567: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7568: LD_ADDR_EXP 10
7572: PUSH
7573: LD_EXP 10
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: CALL_OW 3
7585: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7586: LD_ADDR_EXP 10
7590: PUSH
7591: LD_EXP 10
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 3
7603: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 255
7613: PUSH
7614: LD_INT 3
7616: EQUAL
7617: PUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 266
7627: PUSH
7628: LD_INT 0
7630: EQUAL
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 266
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: OR
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 266
7656: PUSH
7657: LD_INT 4
7659: EQUAL
7660: OR
7661: PUSH
7662: EMPTY
7663: LIST
7664: AND
7665: IFFALSE 7676
// ComUpgrade ( building ) ;
7667: LD_VAR 0 1
7671: PPUSH
7672: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 255
7685: PUSH
7686: LD_INT 3
7688: EQUAL
7689: PUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 266
7699: PUSH
7700: LD_INT 32
7702: EQUAL
7703: AND
7704: IFFALSE 7745
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7706: LD_VAR 0 1
7710: PPUSH
7711: LD_INT 42
7713: PUSH
7714: LD_INT 43
7716: PUSH
7717: LD_INT 44
7719: PUSH
7720: LD_INT 46
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 1
7731: PPUSH
7732: LD_INT 4
7734: PPUSH
7735: CALL_OW 12
7739: ARRAY
7740: PPUSH
7741: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7745: LD_VAR 0 1
7749: PPUSH
7750: CALL_OW 255
7754: PUSH
7755: LD_INT 3
7757: EQUAL
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: CALL_OW 266
7768: PUSH
7769: LD_INT 33
7771: EQUAL
7772: AND
7773: IFFALSE 7814
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7775: LD_VAR 0 1
7779: PPUSH
7780: LD_INT 42
7782: PUSH
7783: LD_INT 43
7785: PUSH
7786: LD_INT 44
7788: PUSH
7789: LD_INT 46
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 1
7800: PPUSH
7801: LD_INT 4
7803: PPUSH
7804: CALL_OW 12
7808: ARRAY
7809: PPUSH
7810: CALL_OW 208
// end ;
7814: PPOPN 1
7816: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7817: LD_VAR 0 1
7821: PPUSH
7822: CALL_OW 255
7826: PUSH
7827: LD_INT 3
7829: EQUAL
7830: PUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 247
7840: PUSH
7841: LD_INT 3
7843: EQUAL
7844: AND
7845: IFFALSE 8537
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7847: LD_VAR 0 1
7851: PPUSH
7852: CALL_OW 266
7856: PUSH
7857: LD_INT 31
7859: EQUAL
7860: PUSH
7861: LD_VAR 0 1
7865: PPUSH
7866: CALL_OW 266
7870: PUSH
7871: LD_INT 32
7873: EQUAL
7874: OR
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PUSH
7886: LD_INT 36
7888: EQUAL
7889: OR
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: OR
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 266
7915: PUSH
7916: LD_INT 24
7918: EQUAL
7919: OR
7920: PUSH
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 266
7930: PUSH
7931: LD_INT 17
7933: EQUAL
7934: OR
7935: PUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 266
7945: PUSH
7946: LD_INT 25
7948: EQUAL
7949: OR
7950: PUSH
7951: LD_VAR 0 1
7955: PPUSH
7956: CALL_OW 266
7960: PUSH
7961: LD_INT 19
7963: EQUAL
7964: OR
7965: PUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 266
7975: PUSH
7976: LD_INT 20
7978: EQUAL
7979: OR
7980: PUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 266
7990: PUSH
7991: LD_INT 18
7993: EQUAL
7994: OR
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 266
8005: PUSH
8006: LD_INT 21
8008: EQUAL
8009: OR
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 266
8020: PUSH
8021: LD_INT 23
8023: EQUAL
8024: OR
8025: PUSH
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 266
8035: PUSH
8036: LD_INT 16
8038: EQUAL
8039: OR
8040: PUSH
8041: LD_VAR 0 1
8045: PPUSH
8046: CALL_OW 266
8050: PUSH
8051: LD_INT 6
8053: EQUAL
8054: OR
8055: PUSH
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 266
8065: PUSH
8066: LD_INT 29
8068: EQUAL
8069: OR
8070: PUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 266
8080: PUSH
8081: LD_INT 26
8083: EQUAL
8084: OR
8085: PUSH
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 30
8098: EQUAL
8099: OR
8100: PUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 266
8110: PUSH
8111: LD_INT 28
8113: EQUAL
8114: OR
8115: PUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: CALL_OW 266
8125: PUSH
8126: LD_INT 27
8128: EQUAL
8129: OR
8130: PUSH
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL_OW 266
8140: PUSH
8141: LD_INT 33
8143: EQUAL
8144: OR
8145: PUSH
8146: LD_VAR 0 1
8150: PPUSH
8151: CALL_OW 266
8155: PUSH
8156: LD_INT 2
8158: EQUAL
8159: OR
8160: PUSH
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 266
8170: PUSH
8171: LD_INT 4
8173: EQUAL
8174: OR
8175: IFFALSE 8261
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8177: LD_ADDR_EXP 10
8181: PUSH
8182: LD_EXP 10
8186: PUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 266
8196: ADD
8197: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8198: LD_ADDR_EXP 10
8202: PUSH
8203: LD_EXP 10
8207: PUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 250
8217: ADD
8218: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8219: LD_ADDR_EXP 10
8223: PUSH
8224: LD_EXP 10
8228: PUSH
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 251
8238: ADD
8239: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8240: LD_ADDR_EXP 10
8244: PUSH
8245: LD_EXP 10
8249: PUSH
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 254
8259: ADD
8260: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 266
8270: PUSH
8271: LD_INT 1
8273: EQUAL
8274: IFFALSE 8353
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8276: LD_ADDR_EXP 10
8280: PUSH
8281: LD_EXP 10
8285: PUSH
8286: LD_INT 0
8288: ADD
8289: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8290: LD_ADDR_EXP 10
8294: PUSH
8295: LD_EXP 10
8299: PUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 250
8309: ADD
8310: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8311: LD_ADDR_EXP 10
8315: PUSH
8316: LD_EXP 10
8320: PUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 251
8330: ADD
8331: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8332: LD_ADDR_EXP 10
8336: PUSH
8337: LD_EXP 10
8341: PUSH
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL_OW 254
8351: ADD
8352: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 266
8362: PUSH
8363: LD_INT 3
8365: EQUAL
8366: IFFALSE 8445
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8368: LD_ADDR_EXP 10
8372: PUSH
8373: LD_EXP 10
8377: PUSH
8378: LD_INT 2
8380: ADD
8381: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8382: LD_ADDR_EXP 10
8386: PUSH
8387: LD_EXP 10
8391: PUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 250
8401: ADD
8402: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8403: LD_ADDR_EXP 10
8407: PUSH
8408: LD_EXP 10
8412: PUSH
8413: LD_VAR 0 1
8417: PPUSH
8418: CALL_OW 251
8422: ADD
8423: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8424: LD_ADDR_EXP 10
8428: PUSH
8429: LD_EXP 10
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 254
8443: ADD
8444: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 266
8454: PUSH
8455: LD_INT 5
8457: EQUAL
8458: IFFALSE 8537
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8460: LD_ADDR_EXP 10
8464: PUSH
8465: LD_EXP 10
8469: PUSH
8470: LD_INT 4
8472: ADD
8473: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8474: LD_ADDR_EXP 10
8478: PUSH
8479: LD_EXP 10
8483: PUSH
8484: LD_VAR 0 1
8488: PPUSH
8489: CALL_OW 250
8493: ADD
8494: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8495: LD_ADDR_EXP 10
8499: PUSH
8500: LD_EXP 10
8504: PUSH
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 251
8514: ADD
8515: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8516: LD_ADDR_EXP 10
8520: PUSH
8521: LD_EXP 10
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 254
8535: ADD
8536: ST_TO_ADDR
// end ; end ; end ;
8537: PPOPN 1
8539: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 1
8547: EQUAL
8548: PUSH
8549: LD_VAR 0 2
8553: PUSH
8554: LD_INT 40
8556: EQUAL
8557: OR
8558: IFFALSE 8682
// if GetSide ( vehicle ) = 3 then
8560: LD_VAR 0 1
8564: PPUSH
8565: CALL_OW 255
8569: PUSH
8570: LD_INT 3
8572: EQUAL
8573: IFFALSE 8682
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8575: LD_VAR 0 1
8579: PPUSH
8580: CALL_OW 264
8584: PUSH
8585: LD_INT 47
8587: EQUAL
8588: PUSH
8589: LD_VAR 0 1
8593: PPUSH
8594: CALL_OW 264
8598: PUSH
8599: LD_INT 46
8601: EQUAL
8602: OR
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 264
8613: PUSH
8614: LD_INT 45
8616: EQUAL
8617: OR
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 264
8628: PUSH
8629: LD_INT 44
8631: EQUAL
8632: OR
8633: IFFALSE 8651
// russianTanks = russianTanks ^ vehicle ;
8635: LD_ADDR_EXP 11
8639: PUSH
8640: LD_EXP 11
8644: PUSH
8645: LD_VAR 0 1
8649: ADD
8650: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8651: LD_VAR 0 1
8655: PPUSH
8656: CALL_OW 264
8660: PUSH
8661: LD_INT 49
8663: EQUAL
8664: IFFALSE 8682
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8666: LD_ADDR_EXP 12
8670: PUSH
8671: LD_EXP 12
8675: PUSH
8676: LD_VAR 0 1
8680: ADD
8681: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8682: LD_VAR 0 1
8686: PPUSH
8687: CALL_OW 255
8691: PUSH
8692: LD_INT 1
8694: EQUAL
8695: PUSH
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 264
8705: PUSH
8706: LD_INT 10
8708: EQUAL
8709: AND
8710: IFFALSE 8726
// amLaserCounter = amLaserCounter + 1 ;
8712: LD_ADDR_EXP 9
8716: PUSH
8717: LD_EXP 9
8721: PUSH
8722: LD_INT 1
8724: PLUS
8725: ST_TO_ADDR
// end ;
8726: PPOPN 2
8728: END
// on UnitGoesToRed ( unit ) do var i ;
8729: LD_INT 0
8731: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8732: LD_VAR 0 1
8736: PPUSH
8737: CALL_OW 255
8741: PUSH
8742: LD_INT 3
8744: EQUAL
8745: PUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 247
8755: PUSH
8756: LD_INT 2
8758: EQUAL
8759: AND
8760: IFFALSE 8878
// begin if russianTanks > 0 then
8762: LD_EXP 11
8766: PUSH
8767: LD_INT 0
8769: GREATER
8770: IFFALSE 8820
// for i in russianTanks do
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: LD_EXP 11
8781: PUSH
8782: FOR_IN
8783: IFFALSE 8818
// if i = unit then
8785: LD_VAR 0 2
8789: PUSH
8790: LD_VAR 0 1
8794: EQUAL
8795: IFFALSE 8816
// russianTanks = russianTanks diff [ unit ] ;
8797: LD_ADDR_EXP 11
8801: PUSH
8802: LD_EXP 11
8806: PUSH
8807: LD_VAR 0 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: DIFF
8815: ST_TO_ADDR
8816: GO 8782
8818: POP
8819: POP
// if russianTimeLapsers > 0 then
8820: LD_EXP 12
8824: PUSH
8825: LD_INT 0
8827: GREATER
8828: IFFALSE 8878
// for i in russianTimeLapsers do
8830: LD_ADDR_VAR 0 2
8834: PUSH
8835: LD_EXP 12
8839: PUSH
8840: FOR_IN
8841: IFFALSE 8876
// if i = unit then
8843: LD_VAR 0 2
8847: PUSH
8848: LD_VAR 0 1
8852: EQUAL
8853: IFFALSE 8874
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8855: LD_ADDR_EXP 12
8859: PUSH
8860: LD_EXP 12
8864: PUSH
8865: LD_VAR 0 1
8869: PUSH
8870: EMPTY
8871: LIST
8872: DIFF
8873: ST_TO_ADDR
8874: GO 8840
8876: POP
8877: POP
// end ; end ; end_of_file
8878: PPOPN 2
8880: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8881: LD_EXP 1
8885: PPUSH
8886: CALL_OW 310
8890: PPUSH
8891: LD_INT 12
8893: PPUSH
8894: CALL_OW 308
8898: PUSH
8899: LD_EXP 15
8903: PUSH
8904: LD_INT 0
8906: EQUAL
8907: AND
8908: IFFALSE 9350
8910: GO 8912
8912: DISABLE
8913: LD_INT 0
8915: PPUSH
8916: PPUSH
// begin enable ;
8917: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8918: LD_ADDR_VAR 0 1
8922: PUSH
8923: LD_EXP 1
8927: PPUSH
8928: CALL_OW 310
8932: ST_TO_ADDR
// if JMMGirl = 1 then
8933: LD_EXP 7
8937: PUSH
8938: LD_INT 1
8940: EQUAL
8941: IFFALSE 8958
// JMMGirlVeh = IsInUnit ( Joan ) ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 2
8952: PPUSH
8953: CALL_OW 310
8957: ST_TO_ADDR
// if JMMGirl = 2 then
8958: LD_EXP 7
8962: PUSH
8963: LD_INT 2
8965: EQUAL
8966: IFFALSE 8983
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: LD_EXP 3
8977: PPUSH
8978: CALL_OW 310
8982: ST_TO_ADDR
// if JMMGirl = 3 then
8983: LD_EXP 7
8987: PUSH
8988: LD_INT 3
8990: EQUAL
8991: IFFALSE 9008
// JMMGirlVeh = IsInUnit ( Connie ) ;
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_EXP 4
9002: PPUSH
9003: CALL_OW 310
9007: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9008: LD_EXP 1
9012: PPUSH
9013: CALL_OW 310
9017: PPUSH
9018: LD_EXP 2
9022: PPUSH
9023: CALL_OW 310
9027: PPUSH
9028: CALL_OW 296
9032: PUSH
9033: LD_INT 10
9035: LESS
9036: PUSH
9037: LD_EXP 1
9041: PPUSH
9042: CALL_OW 310
9046: PPUSH
9047: LD_EXP 3
9051: PPUSH
9052: CALL_OW 310
9056: PPUSH
9057: CALL_OW 296
9061: PUSH
9062: LD_INT 10
9064: LESS
9065: OR
9066: PUSH
9067: LD_EXP 1
9071: PPUSH
9072: CALL_OW 310
9076: PPUSH
9077: LD_EXP 4
9081: PPUSH
9082: CALL_OW 310
9086: PPUSH
9087: CALL_OW 296
9091: PUSH
9092: LD_INT 10
9094: LESS
9095: OR
9096: IFFALSE 9254
// begin case Query ( Q3b ) of 1 :
9098: LD_STRING Q3b
9100: PPUSH
9101: CALL_OW 97
9105: PUSH
9106: LD_INT 1
9108: DOUBLE
9109: EQUAL
9110: IFTRUE 9114
9112: GO 9251
9114: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 265
9124: PUSH
9125: EMPTY
9126: LIST
9127: PUSH
9128: LD_VAR 0 1
9132: PPUSH
9133: CALL_OW 262
9137: PUSH
9138: EMPTY
9139: LIST
9140: PUSH
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 263
9150: PUSH
9151: EMPTY
9152: LIST
9153: PUSH
9154: LD_VAR 0 1
9158: PPUSH
9159: CALL_OW 264
9163: PUSH
9164: EMPTY
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: PPUSH
9173: LD_STRING 14_JMMVeh_1
9175: PPUSH
9176: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9180: LD_VAR 0 2
9184: PPUSH
9185: CALL_OW 265
9189: PUSH
9190: EMPTY
9191: LIST
9192: PUSH
9193: LD_VAR 0 2
9197: PPUSH
9198: CALL_OW 262
9202: PUSH
9203: EMPTY
9204: LIST
9205: PUSH
9206: LD_VAR 0 2
9210: PPUSH
9211: CALL_OW 263
9215: PUSH
9216: EMPTY
9217: LIST
9218: PUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: CALL_OW 264
9228: PUSH
9229: EMPTY
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PPUSH
9238: LD_STRING 14_JMMGirlVeh_1
9240: PPUSH
9241: CALL_OW 39
// FinishMission ;
9245: CALL 9491 0 0
// end ; end ;
9249: GO 9252
9251: POP
// end else
9252: GO 9350
// begin if JMMGirl = 1 then
9254: LD_EXP 7
9258: PUSH
9259: LD_INT 1
9261: EQUAL
9262: IFFALSE 9290
// begin case Query ( Q3bJ ) of 1 :
9264: LD_STRING Q3bJ
9266: PPUSH
9267: CALL_OW 97
9271: PUSH
9272: LD_INT 1
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9287
9280: POP
// FinishMission ; end ;
9281: CALL 9491 0 0
9285: GO 9288
9287: POP
// end else
9288: GO 9350
// begin if JMMGirl = 2 then
9290: LD_EXP 7
9294: PUSH
9295: LD_INT 2
9297: EQUAL
9298: IFFALSE 9326
// begin case Query ( Q3bL ) of 1 :
9300: LD_STRING Q3bL
9302: PPUSH
9303: CALL_OW 97
9307: PUSH
9308: LD_INT 1
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9323
9316: POP
// FinishMission ; end ;
9317: CALL 9491 0 0
9321: GO 9324
9323: POP
// end else
9324: GO 9350
// begin case Query ( Q3bX ) of 1 :
9326: LD_STRING Q3bX
9328: PPUSH
9329: CALL_OW 97
9333: PUSH
9334: LD_INT 1
9336: DOUBLE
9337: EQUAL
9338: IFTRUE 9342
9340: GO 9349
9342: POP
// FinishMission ; end ;
9343: CALL 9491 0 0
9347: GO 9350
9349: POP
// end ; end ; end ; end ;
9350: PPOPN 2
9352: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9353: LD_INT 22
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 21
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: PUSH
9382: LD_INT 0
9384: EQUAL
9385: PUSH
9386: LD_EXP 15
9390: PUSH
9391: LD_INT 0
9393: EQUAL
9394: AND
9395: IFFALSE 9490
9397: GO 9399
9399: DISABLE
// begin DialogueOn ;
9400: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9404: LD_EXP 1
9408: PPUSH
9409: LD_STRING DEnd-JMM-1
9411: PPUSH
9412: CALL_OW 88
// if JMMGirl = 1 then
9416: LD_EXP 7
9420: PUSH
9421: LD_INT 1
9423: EQUAL
9424: IFFALSE 9438
// Say ( Joan , DEnd-Joan-1 ) ;
9426: LD_EXP 2
9430: PPUSH
9431: LD_STRING DEnd-Joan-1
9433: PPUSH
9434: CALL_OW 88
// if JMMGirl = 2 then
9438: LD_EXP 7
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9460
// Say ( Lisa , DEnd-Lisa-1 ) ;
9448: LD_EXP 3
9452: PPUSH
9453: LD_STRING DEnd-Lisa-1
9455: PPUSH
9456: CALL_OW 88
// if JMMGirl = 3 then
9460: LD_EXP 7
9464: PUSH
9465: LD_INT 3
9467: EQUAL
9468: IFFALSE 9482
// Say ( Connie , DEnd-Con-1 ) ;
9470: LD_EXP 4
9474: PPUSH
9475: LD_STRING DEnd-Con-1
9477: PPUSH
9478: CALL_OW 88
// DialogueOff ;
9482: CALL_OW 7
// FinishMission ;
9486: CALL 9491 0 0
// end ;
9490: END
// export function FinishMission ; begin
9491: LD_INT 0
9493: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9494: LD_EXP 1
9498: PPUSH
9499: LD_STRING 14_JMM
9501: PPUSH
9502: CALL_OW 38
// if fastEnd = 1 then
9506: LD_EXP 15
9510: PUSH
9511: LD_INT 1
9513: EQUAL
9514: IFFALSE 9638
// begin AddMedal ( fastend , - 1 ) ;
9516: LD_STRING fastend
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9527: LD_STRING fastend
9529: PPUSH
9530: LD_INT 1
9532: NEG
9533: PPUSH
9534: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9538: LD_STRING fastend
9540: PPUSH
9541: LD_INT 1
9543: NEG
9544: PPUSH
9545: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9549: LD_EXP 7
9553: PPUSH
9554: LD_STRING 14_JMMGirl_1
9556: PPUSH
9557: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9561: LD_INT 0
9563: PPUSH
9564: LD_STRING 14_JMMGirlStatus_1
9566: PPUSH
9567: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9571: LD_INT 0
9573: PPUSH
9574: LD_STRING 14_KappaStatus_1
9576: PPUSH
9577: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
9581: LD_INT 95
9583: PPUSH
9584: CALL_OW 265
9588: PUSH
9589: EMPTY
9590: LIST
9591: PUSH
9592: LD_INT 95
9594: PPUSH
9595: CALL_OW 262
9599: PUSH
9600: EMPTY
9601: LIST
9602: PUSH
9603: LD_INT 95
9605: PPUSH
9606: CALL_OW 263
9610: PUSH
9611: EMPTY
9612: LIST
9613: PUSH
9614: LD_INT 95
9616: PPUSH
9617: CALL_OW 264
9621: PUSH
9622: EMPTY
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PPUSH
9631: LD_STRING 14_JMMVeh_1
9633: PPUSH
9634: CALL_OW 39
// end ; if fastEnd = 0 then
9638: LD_EXP 15
9642: PUSH
9643: LD_INT 0
9645: EQUAL
9646: IFFALSE 10316
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9648: LD_EXP 7
9652: PPUSH
9653: LD_STRING 14_JMMGirl_1
9655: PPUSH
9656: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9660: LD_INT 22
9662: PUSH
9663: LD_INT 3
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 21
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PPUSH
9684: CALL_OW 69
9688: PUSH
9689: LD_INT 0
9691: EQUAL
9692: PUSH
9693: LD_INT 48
9695: PPUSH
9696: CALL_OW 255
9700: PUSH
9701: LD_INT 1
9703: EQUAL
9704: AND
9705: IFFALSE 9719
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9707: LD_INT 1
9709: PPUSH
9710: LD_STRING 14_KappaStatus_1
9712: PPUSH
9713: CALL_OW 39
9717: GO 9729
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9719: LD_INT 0
9721: PPUSH
9722: LD_STRING 14_KappaStatus_1
9724: PPUSH
9725: CALL_OW 39
// case JMMGirl of 1 :
9729: LD_EXP 7
9733: PUSH
9734: LD_INT 1
9736: DOUBLE
9737: EQUAL
9738: IFTRUE 9742
9740: GO 9890
9742: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9743: LD_EXP 2
9747: PPUSH
9748: CALL_OW 302
9752: PUSH
9753: LD_EXP 2
9757: PPUSH
9758: CALL_OW 255
9762: PUSH
9763: LD_INT 1
9765: EQUAL
9766: AND
9767: PUSH
9768: LD_INT 22
9770: PUSH
9771: LD_INT 3
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 21
9780: PUSH
9781: LD_INT 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PUSH
9797: LD_INT 0
9799: EQUAL
9800: PUSH
9801: LD_EXP 1
9805: PPUSH
9806: CALL_OW 310
9810: PPUSH
9811: LD_EXP 2
9815: PPUSH
9816: CALL_OW 310
9820: PPUSH
9821: CALL_OW 296
9825: PUSH
9826: LD_INT 10
9828: LESS
9829: OR
9830: AND
9831: IFFALSE 9867
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9833: LD_INT 1
9835: PPUSH
9836: LD_STRING 14_JMMGirlStatus_1
9838: PPUSH
9839: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9843: LD_EXP 2
9847: PPUSH
9848: LD_STRING 14_Joan
9850: PPUSH
9851: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9855: LD_STRING protect
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: CALL_OW 101
9865: GO 9888
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9867: LD_INT 0
9869: PPUSH
9870: LD_STRING 14_JMMGirlStatus_1
9872: PPUSH
9873: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9877: LD_STRING protect
9879: PPUSH
9880: LD_INT 1
9882: NEG
9883: PPUSH
9884: CALL_OW 101
// end ; end ; 2 :
9888: GO 10203
9890: LD_INT 2
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 10046
9898: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9899: LD_EXP 3
9903: PPUSH
9904: CALL_OW 302
9908: PUSH
9909: LD_EXP 3
9913: PPUSH
9914: CALL_OW 255
9918: PUSH
9919: LD_INT 1
9921: EQUAL
9922: AND
9923: PUSH
9924: LD_INT 22
9926: PUSH
9927: LD_INT 3
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 21
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: PUSH
9953: LD_INT 0
9955: EQUAL
9956: PUSH
9957: LD_EXP 1
9961: PPUSH
9962: CALL_OW 310
9966: PPUSH
9967: LD_EXP 3
9971: PPUSH
9972: CALL_OW 310
9976: PPUSH
9977: CALL_OW 296
9981: PUSH
9982: LD_INT 10
9984: LESS
9985: OR
9986: AND
9987: IFFALSE 10023
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9989: LD_INT 1
9991: PPUSH
9992: LD_STRING 14_JMMGirlStatus_1
9994: PPUSH
9995: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9999: LD_EXP 3
10003: PPUSH
10004: LD_STRING 14_Lisa
10006: PPUSH
10007: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10011: LD_STRING protect
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 101
10021: GO 10044
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10023: LD_INT 0
10025: PPUSH
10026: LD_STRING 14_JMMGirlStatus_1
10028: PPUSH
10029: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10033: LD_STRING protect
10035: PPUSH
10036: LD_INT 2
10038: NEG
10039: PPUSH
10040: CALL_OW 101
// end ; end ; 3 :
10044: GO 10203
10046: LD_INT 3
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10202
10054: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10055: LD_EXP 4
10059: PPUSH
10060: CALL_OW 302
10064: PUSH
10065: LD_EXP 4
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 1
10077: EQUAL
10078: AND
10079: PUSH
10080: LD_INT 22
10082: PUSH
10083: LD_INT 3
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 69
10108: PUSH
10109: LD_INT 0
10111: EQUAL
10112: PUSH
10113: LD_EXP 1
10117: PPUSH
10118: CALL_OW 310
10122: PPUSH
10123: LD_EXP 4
10127: PPUSH
10128: CALL_OW 310
10132: PPUSH
10133: CALL_OW 296
10137: PUSH
10138: LD_INT 10
10140: LESS
10141: OR
10142: AND
10143: IFFALSE 10179
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10145: LD_INT 1
10147: PPUSH
10148: LD_STRING 14_JMMGirlStatus_1
10150: PPUSH
10151: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10155: LD_EXP 4
10159: PPUSH
10160: LD_STRING 14_Connie
10162: PPUSH
10163: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10167: LD_STRING protect
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: CALL_OW 101
10177: GO 10200
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10179: LD_INT 0
10181: PPUSH
10182: LD_STRING 14_JMMGirlStatus_1
10184: PPUSH
10185: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10189: LD_STRING protect
10191: PPUSH
10192: LD_INT 3
10194: NEG
10195: PPUSH
10196: CALL_OW 101
// end ; end ; end ;
10200: GO 10203
10202: POP
// if amLaserCounter >= 2 then
10203: LD_EXP 9
10207: PUSH
10208: LD_INT 2
10210: GREATEREQUAL
10211: IFFALSE 10225
// begin AddMedal ( double , 1 ) end else
10213: LD_STRING double
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 101
10223: GO 10259
// begin if amLaserCounter = 1 then
10225: LD_EXP 9
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: IFFALSE 10248
// AddMedal ( double , - 2 ) else
10235: LD_STRING double
10237: PPUSH
10238: LD_INT 2
10240: NEG
10241: PPUSH
10242: CALL_OW 101
10246: GO 10259
// AddMedal ( double , - 1 ) ;
10248: LD_STRING double
10250: PPUSH
10251: LD_INT 1
10253: NEG
10254: PPUSH
10255: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10259: LD_INT 22
10261: PUSH
10262: LD_INT 3
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 69
10287: PUSH
10288: LD_INT 0
10290: EQUAL
10291: IFFALSE 10305
// AddMedal ( base , 1 ) else
10293: LD_STRING base
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 101
10303: GO 10316
// AddMedal ( base , - 1 ) ;
10305: LD_STRING base
10307: PPUSH
10308: LD_INT 1
10310: NEG
10311: PPUSH
10312: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10316: LD_STRING Eliminate
10318: PPUSH
10319: CALL_OW 102
// YouWin ;
10323: CALL_OW 103
// end ; end_of_file
10327: LD_VAR 0 1
10331: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10332: LD_EXP 1
10336: PPUSH
10337: CALL_OW 301
10341: IFFALSE 10353
10343: GO 10345
10345: DISABLE
// YouLost ( JMM ) ; end_of_file
10346: LD_STRING JMM
10348: PPUSH
10349: CALL_OW 104
10353: END
// every 1 1$0 do
10354: GO 10356
10356: DISABLE
// begin enable ;
10357: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10358: LD_INT 3
10360: PPUSH
10361: LD_INT 5
10363: PPUSH
10364: CALL_OW 12
10368: PPUSH
10369: LD_INT 13
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 55
// end ;
10379: END
