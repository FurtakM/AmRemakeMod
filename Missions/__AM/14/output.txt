// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1412 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Connie , true ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Connie
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1173 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1166
// begin if IsOk ( i ) then
1139: LD_VAR 0 4
1143: PPUSH
1144: CALL_OW 302
1148: IFFALSE 1164
// SaveCharacters ( i , ident ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 38
// end ;
1164: GO 1136
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 3
1172: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1173: LD_INT 0
1175: PPUSH
1176: PPUSH
1177: PPUSH
1178: PPUSH
// for i = 1 to count do
1179: LD_ADDR_VAR 0 8
1183: PUSH
1184: DOUBLE
1185: LD_INT 1
1187: DEC
1188: ST_TO_ADDR
1189: LD_VAR 0 6
1193: PUSH
1194: FOR_TO
1195: IFFALSE 1276
// begin uc_side = side ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_VAR 0 1
1206: ST_TO_ADDR
// uc_nation = nation ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_VAR 0 2
1216: ST_TO_ADDR
// hc_gallery =  ;
1217: LD_ADDR_OWVAR 33
1221: PUSH
1222: LD_STRING 
1224: ST_TO_ADDR
// hc_name =  ;
1225: LD_ADDR_OWVAR 26
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_VAR 0 5
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 380
// un = CreateHuman ;
1250: LD_ADDR_VAR 0 10
1254: PUSH
1255: CALL_OW 44
1259: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1260: LD_VAR 0 10
1264: PPUSH
1265: LD_VAR 0 3
1269: PPUSH
1270: CALL_OW 52
// end ;
1274: GO 1194
1276: POP
1277: POP
// end ;
1278: LD_VAR 0 7
1282: RET
// export function Query1 ; begin
1283: LD_INT 0
1285: PPUSH
// case query ( Q1 ) of 1 :
1286: LD_STRING Q1
1288: PPUSH
1289: CALL_OW 97
1293: PUSH
1294: LD_INT 1
1296: DOUBLE
1297: EQUAL
1298: IFTRUE 1302
1300: GO 1313
1302: POP
// result = 1 ; 2 :
1303: LD_ADDR_VAR 0 1
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
1311: GO 1333
1313: LD_INT 2
1315: DOUBLE
1316: EQUAL
1317: IFTRUE 1321
1319: GO 1332
1321: POP
// result = 2 ; end ;
1322: LD_ADDR_VAR 0 1
1326: PUSH
1327: LD_INT 2
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// end ;
1333: LD_VAR 0 1
1337: RET
// export function Query2 ; begin
1338: LD_INT 0
1340: PPUSH
// case query ( Q2J ) of 1 :
1341: LD_STRING Q2J
1343: PPUSH
1344: CALL_OW 97
1348: PUSH
1349: LD_INT 1
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1368
1357: POP
// result = 1 ; 2 :
1358: LD_ADDR_VAR 0 1
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
1366: GO 1407
1368: LD_INT 2
1370: DOUBLE
1371: EQUAL
1372: IFTRUE 1376
1374: GO 1387
1376: POP
// result = 2 ; 2 :
1377: LD_ADDR_VAR 0 1
1381: PUSH
1382: LD_INT 2
1384: ST_TO_ADDR
1385: GO 1407
1387: LD_INT 2
1389: DOUBLE
1390: EQUAL
1391: IFTRUE 1395
1393: GO 1406
1395: POP
// result = 3 ; end ;
1396: LD_ADDR_VAR 0 1
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
1404: GO 1407
1406: POP
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareDifficulty ; begin
1412: LD_INT 0
1414: PPUSH
// if difficulty = 1 then
1415: LD_OWVAR 67
1419: PUSH
1420: LD_INT 1
1422: EQUAL
1423: IFFALSE 1503
// begin SetTech ( 57 , 3 , state_disabled ) ;
1425: LD_INT 57
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1438: LD_INT 58
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1451: LD_INT 59
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1464: LD_INT 51
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1477: LD_INT 52
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1490: LD_INT 53
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 322
// end ; if difficulty = 2 then
1503: LD_OWVAR 67
1507: PUSH
1508: LD_INT 2
1510: EQUAL
1511: IFFALSE 1591
// begin SetTech ( 57 , 3 , state_enabled ) ;
1513: LD_INT 57
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1526: LD_INT 58
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1539: LD_INT 59
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1565: LD_INT 52
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1578: LD_INT 53
1580: PPUSH
1581: LD_INT 3
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 322
// end ; if difficulty = 3 then
1591: LD_OWVAR 67
1595: PUSH
1596: LD_INT 3
1598: EQUAL
1599: IFFALSE 1679
// begin SetTech ( 57 , 3 , state_enabled ) ;
1601: LD_INT 57
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1614: LD_INT 58
1616: PPUSH
1617: LD_INT 3
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1627: LD_INT 59
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1640: LD_INT 51
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1653: LD_INT 52
1655: PPUSH
1656: LD_INT 3
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1666: LD_INT 53
1668: PPUSH
1669: LD_INT 3
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 322
// end ; end ;
1679: LD_VAR 0 1
1683: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1691: LD_ADDR_VAR 0 8
1695: PUSH
1696: LD_INT 48
1698: PUSH
1699: LD_INT 49
1701: PUSH
1702: LD_INT 50
1704: PUSH
1705: LD_INT 20
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 51
1713: PUSH
1714: LD_INT 52
1716: PUSH
1717: LD_INT 69
1719: PUSH
1720: LD_INT 39
1722: PUSH
1723: LD_INT 34
1725: PUSH
1726: LD_INT 40
1728: PUSH
1729: LD_INT 53
1731: PUSH
1732: LD_INT 71
1734: PUSH
1735: LD_INT 57
1737: PUSH
1738: LD_INT 58
1740: PUSH
1741: LD_INT 44
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 27
1749: PUSH
1750: LD_INT 23
1752: PUSH
1753: LD_INT 33
1755: PUSH
1756: LD_INT 59
1758: PUSH
1759: LD_INT 54
1761: PUSH
1762: LD_INT 55
1764: PUSH
1765: LD_INT 56
1767: PUSH
1768: LD_INT 63
1770: PUSH
1771: LD_INT 64
1773: PUSH
1774: LD_INT 65
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 31
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_VAR 0 8
1840: PUSH
1841: FOR_TO
1842: IFFALSE 1918
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1844: LD_VAR 0 8
1848: PUSH
1849: LD_VAR 0 5
1853: ARRAY
1854: PPUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 321
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: PUSH
1869: LD_VAR 0 8
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 482
1889: PUSH
1890: LD_INT 1
1892: EQUAL
1893: AND
1894: IFFALSE 1916
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_VAR 0 8
1905: PUSH
1906: LD_VAR 0 5
1910: ARRAY
1911: PPUSH
1912: CALL_OW 184
1916: GO 1841
1918: POP
1919: POP
// end ;
1920: LD_VAR 0 4
1924: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1933: LD_ADDR_VAR 0 8
1937: PUSH
1938: LD_VAR 0 2
1942: PPUSH
1943: CALL_OW 313
1947: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1948: LD_ADDR_VAR 0 9
1952: PUSH
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 24
1982: PUSH
1983: LD_INT 750
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3
1992: PUSH
1993: LD_INT 54
1995: PUSH
1996: EMPTY
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 70
2013: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2014: LD_ADDR_VAR 0 6
2018: PUSH
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_VAR 0 1
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 21
2038: PUSH
2039: LD_INT 3
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 1000
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2076: LD_VAR 0 6
2080: NOT
2081: PUSH
2082: LD_INT 22
2084: PUSH
2085: LD_VAR 0 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 25
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 24
2106: PUSH
2107: LD_INT 250
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: NOT
2124: AND
2125: IFFALSE 2129
// exit ;
2127: GO 2311
// if buildings_list > 0 and engineerOkInside then
2129: LD_VAR 0 6
2133: PUSH
2134: LD_INT 0
2136: GREATER
2137: PUSH
2138: LD_VAR 0 8
2142: AND
2143: IFFALSE 2154
// ComExitBuilding ( engineerOkInside ) ;
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 0
2161: GREATER
2162: PUSH
2163: LD_VAR 0 9
2167: PUSH
2168: LD_INT 0
2170: GREATER
2171: AND
2172: IFFALSE 2192
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2174: LD_VAR 0 9
2178: PPUSH
2179: LD_VAR 0 6
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2192: LD_VAR 0 6
2196: PUSH
2197: LD_INT 0
2199: EQUAL
2200: PUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: EQUAL
2209: AND
2210: PUSH
2211: LD_VAR 0 9
2215: PUSH
2216: LD_INT 0
2218: GREATER
2219: AND
2220: IFFALSE 2236
// ComEnterUnit ( engineerOkOutside , building ) ;
2222: LD_VAR 0 9
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2236: LD_VAR 0 9
2240: PUSH
2241: LD_INT 0
2243: GREATER
2244: PUSH
2245: LD_VAR 0 6
2249: PUSH
2250: LD_INT 0
2252: EQUAL
2253: AND
2254: PUSH
2255: LD_VAR 0 4
2259: PUSH
2260: LD_INT 0
2262: GREATER
2263: AND
2264: IFFALSE 2311
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2266: LD_VAR 0 9
2270: PPUSH
2271: LD_VAR 0 4
2275: PUSH
2276: LD_INT 1
2278: ARRAY
2279: PPUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 4
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 4
2302: PUSH
2303: LD_INT 4
2305: ARRAY
2306: PPUSH
2307: CALL_OW 145
// end ;
2311: LD_VAR 0 5
2315: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2327: LD_ADDR_VAR 0 6
2331: PUSH
2332: LD_INT 22
2334: PUSH
2335: LD_VAR 0 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 23
2356: PUSH
2357: LD_INT 2
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 251
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 69
2384: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2385: LD_ADDR_VAR 0 7
2389: PUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: LD_INT 22
2397: PUSH
2398: LD_VAR 0 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 23
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 25
2419: PUSH
2420: LD_INT 4
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 50
2429: PUSH
2430: EMPTY
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PPUSH
2439: CALL_OW 70
2443: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2444: LD_ADDR_VAR 0 10
2448: PUSH
2449: LD_VAR 0 3
2453: PPUSH
2454: LD_INT 22
2456: PUSH
2457: LD_VAR 0 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 21
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 25
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 3
2495: PUSH
2496: LD_INT 24
2498: PUSH
2499: LD_INT 750
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 70
2520: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2521: LD_ADDR_VAR 0 11
2525: PUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: LD_INT 22
2533: PUSH
2534: LD_VAR 0 1
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: LD_INT 24
2575: PUSH
2576: LD_INT 1000
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PPUSH
2593: CALL_OW 70
2597: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2598: LD_VAR 0 10
2602: NOT
2603: PUSH
2604: LD_VAR 0 11
2608: NOT
2609: AND
2610: PUSH
2611: LD_VAR 0 6
2615: NOT
2616: AND
2617: IFFALSE 2621
// exit ;
2619: GO 2855
// if damageUnits > 0 and sci_list > 0 then
2621: LD_VAR 0 10
2625: PUSH
2626: LD_INT 0
2628: GREATER
2629: PUSH
2630: LD_VAR 0 6
2634: PUSH
2635: LD_INT 0
2637: GREATER
2638: AND
2639: IFFALSE 2655
// ComMoveToArea ( damageUnits , healArea ) ;
2641: LD_VAR 0 10
2645: PPUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2655: LD_VAR 0 11
2659: PUSH
2660: LD_INT 0
2662: GREATER
2663: PUSH
2664: LD_VAR 0 6
2668: PUSH
2669: LD_INT 0
2671: GREATER
2672: AND
2673: IFFALSE 2684
// ComExitBuilding ( sci_list ) ;
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2684: LD_VAR 0 11
2688: PUSH
2689: LD_INT 0
2691: GREATER
2692: PUSH
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 0
2700: GREATER
2701: AND
2702: IFFALSE 2722
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2704: LD_VAR 0 7
2708: PPUSH
2709: LD_VAR 0 11
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2722: LD_VAR 0 10
2726: PUSH
2727: LD_INT 0
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 11
2735: PUSH
2736: LD_INT 0
2738: EQUAL
2739: AND
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_INT 0
2748: GREATER
2749: AND
2750: IFFALSE 2855
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2752: LD_ADDR_VAR 0 12
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_VAR 0 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 21
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 8
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2799: LD_ADDR_VAR 0 13
2803: PUSH
2804: LD_INT 1
2806: PPUSH
2807: LD_VAR 0 12
2811: PPUSH
2812: CALL_OW 12
2816: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2817: LD_VAR 0 7
2821: PPUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 60
2827: PUSH
2828: EMPTY
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: PPUSH
2840: LD_VAR 0 12
2844: PUSH
2845: LD_VAR 0 13
2849: ARRAY
2850: PPUSH
2851: CALL_OW 120
// end ; end ;
2855: LD_VAR 0 5
2859: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
2864: PPUSH
2865: PPUSH
// tmpTab = [ ] ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2873: LD_INT 22
2875: PUSH
2876: LD_VAR 0 1
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 0
2906: GREATER
2907: IFFALSE 2990
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_VAR 0 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 30
2928: PUSH
2929: LD_INT 32
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2988
// begin for j in UnitsInside ( i ) do
2948: LD_ADDR_VAR 0 5
2952: PUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 313
2962: PUSH
2963: FOR_IN
2964: IFFALSE 2984
// tmpTab = tmpTab ^ j ;
2966: LD_ADDR_VAR 0 6
2970: PUSH
2971: LD_VAR 0 6
2975: PUSH
2976: LD_VAR 0 5
2980: ADD
2981: ST_TO_ADDR
2982: GO 2963
2984: POP
2985: POP
// end ;
2986: GO 2945
2988: POP
2989: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2990: LD_VAR 0 6
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: CALL_OW 250
3004: PPUSH
3005: LD_VAR 0 2
3009: PPUSH
3010: CALL_OW 251
3014: PPUSH
3015: CALL_OW 114
// end ;
3019: LD_VAR 0 3
3023: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3024: LD_INT 0
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
// enable ;
3030: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3031: LD_ADDR_VAR 0 7
3035: PUSH
3036: LD_VAR 0 3
3040: PPUSH
3041: CALL_OW 435
3045: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3046: LD_ADDR_VAR 0 6
3050: PUSH
3051: LD_INT 22
3053: PUSH
3054: LD_VAR 0 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 34
3065: PUSH
3066: LD_VAR 0 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 69
3083: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3084: LD_VAR 0 6
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 3
3097: PPUSH
3098: CALL_OW 435
3102: AND
3103: PUSH
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 0
3111: GREATER
3112: AND
3113: IFFALSE 3162
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3115: LD_VAR 0 6
3119: PUSH
3120: LD_INT 1
3122: ARRAY
3123: PPUSH
3124: LD_VAR 0 7
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: PPUSH
3133: LD_VAR 0 7
3137: PUSH
3138: LD_INT 2
3140: ARRAY
3141: PPUSH
3142: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3146: LD_VAR 0 6
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: CALL_OW 240
// end ; end ;
3162: LD_VAR 0 4
3166: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
3173: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3174: LD_ADDR_VAR 0 6
3178: PUSH
3179: LD_INT 22
3181: PUSH
3182: LD_VAR 0 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 30
3196: PUSH
3197: LD_INT 31
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 30
3206: PUSH
3207: LD_INT 32
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 30
3216: PUSH
3217: LD_INT 33
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 5
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 69
3260: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_INT 22
3268: PUSH
3269: LD_VAR 0 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 21
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 58
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3304: LD_VAR 0 6
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: PUSH
3313: LD_VAR 0 7
3317: PUSH
3318: LD_INT 0
3320: GREATER
3321: AND
3322: IFFALSE 3392
// begin for i in turretsList do
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 6
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3390
// begin for j in enemyBuildings do
3337: LD_ADDR_VAR 0 5
3341: PUSH
3342: LD_VAR 0 7
3346: PUSH
3347: FOR_IN
3348: IFFALSE 3386
// begin if GetDistUnits ( i , j ) < 20 then
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: CALL_OW 296
3364: PUSH
3365: LD_INT 20
3367: LESS
3368: IFFALSE 3384
// begin ComAttackUnit ( i , j ) ;
3370: LD_VAR 0 4
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 115
// end ; end ;
3384: GO 3347
3386: POP
3387: POP
// end ;
3388: GO 3334
3390: POP
3391: POP
// end ; end ;
3392: LD_VAR 0 3
3396: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
// for i = 1 to vehCount do
3401: LD_ADDR_VAR 0 9
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 3
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3464
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_VAR 0 5
3433: PPUSH
3434: LD_VAR 0 6
3438: PPUSH
3439: LD_VAR 0 4
3443: PUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_VAR 0 4
3451: PPUSH
3452: CALL_OW 12
3456: ARRAY
3457: PPUSH
3458: CALL_OW 185
3462: GO 3416
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 8
3470: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3479: LD_EXP 11
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: GREATEREQUAL
3504: PUSH
3505: LD_EXP 12
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PUSH
3524: LD_OWVAR 67
3528: ARRAY
3529: GREATEREQUAL
3530: AND
3531: IFFALSE 3764
// begin repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// for j in russianTanks do
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_EXP 11
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3752
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3553: LD_ADDR_VAR 0 6
3557: PUSH
3558: LD_INT 81
3560: PUSH
3561: LD_VAR 0 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 101
3572: PUSH
3573: LD_INT 1
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PPUSH
3584: CALL_OW 69
3588: PPUSH
3589: LD_VAR 0 4
3593: PPUSH
3594: CALL_OW 74
3598: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3599: LD_ADDR_VAR 0 7
3603: PUSH
3604: LD_INT 81
3606: PUSH
3607: LD_VAR 0 1
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 101
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 59
3631: PUSH
3632: EMPTY
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 1
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 21
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: PPUSH
3669: CALL_OW 69
3673: PPUSH
3674: LD_VAR 0 4
3678: PPUSH
3679: CALL_OW 74
3683: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3684: LD_VAR 0 4
3688: PPUSH
3689: LD_VAR 0 6
3693: PPUSH
3694: CALL_OW 296
3698: PUSH
3699: LD_INT 8
3701: PLUS
3702: PUSH
3703: LD_VAR 0 4
3707: PPUSH
3708: LD_VAR 0 7
3712: PPUSH
3713: CALL_OW 296
3717: LESS
3718: IFFALSE 3736
// ComAttackUnit ( j , target1 ) else
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: CALL_OW 115
3734: GO 3750
// ComAttackUnit ( j , target2 ) ;
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 7
3745: PPUSH
3746: CALL_OW 115
// end ;
3750: GO 3550
3752: POP
3753: POP
// until russianTanks = 0 ;
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 0
3761: EQUAL
3762: IFFALSE 3533
// end ; end ;
3764: LD_VAR 0 2
3768: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
3775: PPUSH
3776: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_INT 22
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 9
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PPUSH
3808: CALL_OW 69
3812: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: LD_INT 81
3820: PUSH
3821: LD_VAR 0 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 69
3855: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 3
3866: PPUSH
3867: CALL_OW 12
3871: ST_TO_ADDR
// for i = 1 to list do
3872: LD_ADDR_VAR 0 5
3876: PUSH
3877: DOUBLE
3878: LD_INT 1
3880: DEC
3881: ST_TO_ADDR
3882: LD_VAR 0 6
3886: PUSH
3887: FOR_TO
3888: IFFALSE 4090
// for ta in filter do
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: LD_VAR 0 7
3899: PUSH
3900: FOR_IN
3901: IFFALSE 4086
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3903: LD_VAR 0 6
3907: PUSH
3908: LD_VAR 0 5
3912: ARRAY
3913: PPUSH
3914: LD_VAR 0 3
3918: PPUSH
3919: CALL_OW 296
3923: PUSH
3924: LD_INT 15
3926: LESSEQUAL
3927: IFFALSE 4084
// begin case c of 1 :
3929: LD_VAR 0 4
3933: PUSH
3934: LD_INT 1
3936: DOUBLE
3937: EQUAL
3938: IFTRUE 3942
3940: GO 3980
3942: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3943: LD_VAR 0 6
3947: PUSH
3948: LD_VAR 0 5
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PPUSH
3959: CALL_OW 250
3963: PPUSH
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 251
3973: PPUSH
3974: CALL_OW 154
3978: GO 4084
3980: LD_INT 2
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4052
3988: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3989: LD_VAR 0 6
3993: PUSH
3994: LD_VAR 0 5
3998: ARRAY
3999: PPUSH
4000: LD_VAR 0 3
4004: PPUSH
4005: CALL_OW 250
4009: PUSH
4010: LD_INT 1
4012: NEG
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: CALL_OW 12
4021: PLUS
4022: PPUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: CALL_OW 251
4032: PUSH
4033: LD_INT 1
4035: NEG
4036: PPUSH
4037: LD_INT 1
4039: PPUSH
4040: CALL_OW 12
4044: PLUS
4045: PPUSH
4046: CALL_OW 153
4050: GO 4084
4052: LD_INT 3
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4083
4060: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4061: LD_VAR 0 6
4065: PUSH
4066: LD_VAR 0 5
4070: ARRAY
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 115
4081: GO 4084
4083: POP
// end ; end ;
4084: GO 3900
4086: POP
4087: POP
4088: GO 3887
4090: POP
4091: POP
// end ;
4092: LD_VAR 0 2
4096: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4097: LD_INT 0
4099: PPUSH
4100: PPUSH
4101: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4102: LD_EXP 11
4106: PUSH
4107: LD_INT 1
4109: GREATEREQUAL
4110: PUSH
4111: LD_EXP 12
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 2
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: PUSH
4130: LD_OWVAR 67
4134: ARRAY
4135: GREATEREQUAL
4136: AND
4137: IFFALSE 4276
// repeat wait ( 0 0$3 ) ;
4139: LD_INT 105
4141: PPUSH
4142: CALL_OW 67
// if russianTimeLapsers > 0 then
4146: LD_EXP 12
4150: PUSH
4151: LD_INT 0
4153: GREATER
4154: IFFALSE 4266
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4156: LD_ADDR_VAR 0 3
4160: PUSH
4161: LD_EXP 12
4165: PPUSH
4166: LD_INT 3
4168: PUSH
4169: LD_INT 60
4171: PUSH
4172: EMPTY
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 72
4183: PUSH
4184: FOR_IN
4185: IFFALSE 4264
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4187: LD_ADDR_VAR 0 4
4191: PUSH
4192: LD_INT 81
4194: PUSH
4195: LD_VAR 0 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 101
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 69
4222: PPUSH
4223: LD_VAR 0 3
4227: PPUSH
4228: CALL_OW 74
4232: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_VAR 0 4
4242: PPUSH
4243: CALL_OW 250
4247: PPUSH
4248: LD_VAR 0 4
4252: PPUSH
4253: CALL_OW 251
4257: PPUSH
4258: CALL_OW 111
// end ;
4262: GO 4184
4264: POP
4265: POP
// until russianTimeLapsers = 0 ;
4266: LD_EXP 12
4270: PUSH
4271: LD_INT 0
4273: EQUAL
4274: IFFALSE 4139
// end ;
4276: LD_VAR 0 2
4280: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4289: LD_ADDR_VAR 0 7
4293: PUSH
4294: LD_VAR 0 2
4298: PPUSH
4299: LD_INT 22
4301: PUSH
4302: LD_VAR 0 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 21
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 34
4323: PUSH
4324: LD_INT 52
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 70
4340: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: LD_VAR 0 2
4350: PPUSH
4351: LD_INT 22
4353: PUSH
4354: LD_VAR 0 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 3
4375: PUSH
4376: LD_INT 24
4378: PUSH
4379: LD_INT 1000
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: PPUSH
4398: CALL_OW 70
4402: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4403: LD_VAR 0 8
4407: PUSH
4408: LD_INT 0
4410: GREATER
4411: PUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_INT 24
4419: PUSH
4420: LD_INT 750
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: AND
4436: IFFALSE 4456
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4438: LD_VAR 0 7
4442: PPUSH
4443: LD_VAR 0 8
4447: PUSH
4448: LD_INT 1
4450: ARRAY
4451: PPUSH
4452: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 0
4463: GREATER
4464: PUSH
4465: LD_VAR 0 8
4469: PUSH
4470: LD_INT 0
4472: EQUAL
4473: AND
4474: PUSH
4475: LD_EXP 10
4479: PUSH
4480: LD_INT 0
4482: GREATER
4483: AND
4484: IFFALSE 4531
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4486: LD_VAR 0 7
4490: PPUSH
4491: LD_EXP 10
4495: PUSH
4496: LD_INT 1
4498: ARRAY
4499: PPUSH
4500: LD_EXP 10
4504: PUSH
4505: LD_INT 2
4507: ARRAY
4508: PPUSH
4509: LD_EXP 10
4513: PUSH
4514: LD_INT 3
4516: ARRAY
4517: PPUSH
4518: LD_EXP 10
4522: PUSH
4523: LD_INT 4
4525: ARRAY
4526: PPUSH
4527: CALL_OW 567
// end ; end_of_file
4531: LD_VAR 0 3
4535: RET
// every 0 0$1 do
4536: GO 4538
4538: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4539: LD_INT 3
4541: PPUSH
4542: LD_INT 14
4544: PPUSH
4545: LD_INT 3
4547: PPUSH
4548: CALL 1684 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 15
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: CALL 1684 0 3
// end ;
4565: END
// every 0 0$1 trigger russianAI = 1 do
4566: LD_EXP 13
4570: PUSH
4571: LD_INT 1
4573: EQUAL
4574: IFFALSE 4687
4576: GO 4578
4578: DISABLE
// begin enable ;
4579: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4580: LD_INT 3
4582: PPUSH
4583: LD_INT 22
4585: PPUSH
4586: LD_INT 7
4588: PPUSH
4589: LD_EXP 10
4593: PPUSH
4594: CALL 1925 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4598: LD_INT 3
4600: PPUSH
4601: LD_INT 8
4603: PPUSH
4604: LD_INT 7
4606: PPUSH
4607: LD_INT 14
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_INT 2
4622: PPUSH
4623: CALL_OW 12
4627: ARRAY
4628: PPUSH
4629: CALL 2316 0 4
// AttackVehicles ( 3 ) ;
4633: LD_INT 3
4635: PPUSH
4636: CALL 3471 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4640: LD_INT 3
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL 3167 0 2
// TimeLapsersAI ( 3 ) ;
4650: LD_INT 3
4652: PPUSH
4653: CALL 4097 0 1
// IntBazooka ( 3 ) ;
4657: LD_INT 3
4659: PPUSH
4660: CALL 3769 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4664: LD_INT 3
4666: PPUSH
4667: LD_INT 51
4669: PPUSH
4670: LD_INT 14
4672: PPUSH
4673: CALL 3024 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4677: LD_INT 3
4679: PPUSH
4680: LD_INT 7
4682: PPUSH
4683: CALL 4281 0 2
// end ;
4687: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4688: LD_INT 22
4690: PPUSH
4691: CALL_OW 303
4695: PUSH
4696: LD_INT 22
4698: PPUSH
4699: CALL_OW 255
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: OR
4708: IFFALSE 4723
4710: GO 4712
4712: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4713: LD_INT 3
4715: PPUSH
4716: LD_INT 22
4718: PPUSH
4719: CALL 2860 0 2
4723: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4724: LD_EXP 13
4728: PUSH
4729: LD_INT 1
4731: EQUAL
4732: PUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 50
4755: PUSH
4756: EMPTY
4757: LIST
4758: PUSH
4759: LD_INT 33
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 2
4771: PUSH
4772: LD_INT 34
4774: PUSH
4775: LD_INT 46
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 34
4784: PUSH
4785: LD_INT 45
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 34
4794: PUSH
4795: LD_INT 44
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 34
4804: PUSH
4805: LD_INT 49
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 34
4814: PUSH
4815: LD_INT 47
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: PUSH
4842: LD_INT 0
4844: EQUAL
4845: AND
4846: IFFALSE 5033
4848: GO 4850
4850: DISABLE
// begin enable ;
4851: ENABLE
// if russianRocketsAvalaible = 1 then
4852: LD_EXP 14
4856: PUSH
4857: LD_INT 1
4859: EQUAL
4860: IFFALSE 4917
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4862: LD_INT 3
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: LD_OWVAR 67
4886: ARRAY
4887: PPUSH
4888: LD_INT 46
4890: PUSH
4891: LD_INT 45
4893: PUSH
4894: LD_INT 44
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: LD_INT 24
4910: PPUSH
4911: CALL 3397 0 7
4915: GO 4974
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4917: LD_INT 3
4919: PPUSH
4920: LD_INT 1
4922: PPUSH
4923: LD_INT 3
4925: PUSH
4926: LD_INT 4
4928: PUSH
4929: LD_INT 4
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: PUSH
4937: LD_OWVAR 67
4941: ARRAY
4942: PPUSH
4943: LD_INT 46
4945: PUSH
4946: LD_INT 45
4948: PUSH
4949: LD_INT 44
4951: PUSH
4952: LD_INT 47
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: LD_INT 24
4969: PPUSH
4970: CALL 3397 0 7
// if russianTimeLapsers = 0 then
4974: LD_EXP 12
4978: PUSH
4979: LD_INT 0
4981: EQUAL
4982: IFFALSE 5033
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 40
4989: PPUSH
4990: LD_INT 1
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_OWVAR 67
5008: ARRAY
5009: PPUSH
5010: LD_INT 49
5012: PUSH
5013: LD_INT 49
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: LD_INT 3
5025: PPUSH
5026: LD_INT 24
5028: PPUSH
5029: CALL 3397 0 7
// end ; end_of_file
5033: END
// every 1 do var dec1 , dec2 ;
5034: GO 5036
5036: DISABLE
5037: LD_INT 0
5039: PPUSH
5040: PPUSH
// begin InGameOn ;
5041: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
5045: LD_INT 48
5047: PPUSH
5048: LD_STRING kappa
5050: PPUSH
5051: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5055: LD_INT 95
5057: PPUSH
5058: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5062: LD_INT 95
5064: PPUSH
5065: LD_INT 30
5067: PPUSH
5068: LD_INT 11
5070: PPUSH
5071: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5075: LD_INT 30
5077: PPUSH
5078: LD_INT 11
5080: PPUSH
5081: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5085: LD_EXP 5
5089: PPUSH
5090: LD_STRING D1-Pow-1
5092: PPUSH
5093: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5097: LD_EXP 1
5101: PPUSH
5102: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5106: LD_EXP 1
5110: PPUSH
5111: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5115: LD_EXP 1
5119: PPUSH
5120: LD_STRING D1-JMM-1
5122: PPUSH
5123: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5127: LD_EXP 5
5131: PPUSH
5132: LD_STRING D1-Pow-2
5134: PPUSH
5135: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5139: LD_EXP 1
5143: PPUSH
5144: LD_STRING D1-JMM-2
5146: PPUSH
5147: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5151: LD_EXP 1
5155: PPUSH
5156: LD_INT 95
5158: PPUSH
5159: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5163: LD_STRING M1
5165: PPUSH
5166: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5170: LD_INT 35
5172: PPUSH
5173: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5177: LD_EXP 1
5181: PPUSH
5182: LD_INT 95
5184: PPUSH
5185: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5189: LD_INT 95
5191: PPUSH
5192: LD_INT 51
5194: PPUSH
5195: LD_INT 21
5197: PPUSH
5198: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5202: LD_INT 95
5204: PPUSH
5205: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5209: LD_INT 95
5211: PPUSH
5212: LD_INT 5
5214: PPUSH
5215: CALL_OW 308
5219: IFFALSE 5170
// if JMMGirl = 1 then
5221: LD_EXP 7
5225: PUSH
5226: LD_INT 1
5228: EQUAL
5229: IFFALSE 5530
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5231: LD_EXP 2
5235: PPUSH
5236: LD_STRING D2J-Joan-1
5238: PPUSH
5239: CALL_OW 94
// dec1 = Query1 ;
5243: LD_ADDR_VAR 0 1
5247: PUSH
5248: CALL 1283 0 0
5252: ST_TO_ADDR
// if dec1 = 1 then
5253: LD_VAR 0 1
5257: PUSH
5258: LD_INT 1
5260: EQUAL
5261: IFFALSE 5508
// begin ComExitVehicle ( JMM ) ;
5263: LD_EXP 1
5267: PPUSH
5268: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5272: LD_EXP 1
5276: PPUSH
5277: LD_STRING D2J-JMM-1
5279: PPUSH
5280: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5284: LD_EXP 2
5288: PPUSH
5289: LD_STRING D2J-Joan-2
5291: PPUSH
5292: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5296: LD_EXP 1
5300: PPUSH
5301: LD_STRING D2J-JMM-2
5303: PPUSH
5304: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5308: LD_EXP 2
5312: PPUSH
5313: LD_STRING D2J-Joan-3
5315: PPUSH
5316: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5320: LD_EXP 5
5324: PPUSH
5325: LD_STRING DPowell-Pow-1
5327: PPUSH
5328: CALL_OW 94
// dec2 = Query2 ;
5332: LD_ADDR_VAR 0 2
5336: PUSH
5337: CALL 1338 0 0
5341: ST_TO_ADDR
// if dec2 = 1 then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5392
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5352: LD_EXP 1
5356: PPUSH
5357: LD_STRING D2Ja-JMM-1
5359: PPUSH
5360: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5364: LD_EXP 2
5368: PPUSH
5369: LD_STRING D2Ja-Joan-1
5371: PPUSH
5372: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5376: LD_EXP 1
5380: PPUSH
5381: LD_STRING D2Ja-JMM-2
5383: PPUSH
5384: CALL_OW 88
// InGameOff ;
5388: CALL_OW 9
// end ; if dec2 = 2 then
5392: LD_VAR 0 2
5396: PUSH
5397: LD_INT 2
5399: EQUAL
5400: IFFALSE 5474
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5402: LD_EXP 1
5406: PPUSH
5407: LD_STRING D2Jb-JMM-1
5409: PPUSH
5410: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5414: LD_EXP 2
5418: PPUSH
5419: LD_STRING D2Jb-Joan-1
5421: PPUSH
5422: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5426: LD_EXP 1
5430: PPUSH
5431: LD_STRING D2Jb-JMM-2
5433: PPUSH
5434: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5438: LD_EXP 2
5442: PPUSH
5443: LD_STRING D2Jb-Joan-2
5445: PPUSH
5446: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5450: LD_EXP 1
5454: PPUSH
5455: LD_STRING D2Jb-JMM-3
5457: PPUSH
5458: CALL_OW 88
// fastEnd = 1 ;
5462: LD_ADDR_EXP 15
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// FinishMission ;
5470: CALL 9463 0 0
// end ; if dec2 = 3 then
5474: LD_VAR 0 2
5478: PUSH
5479: LD_INT 3
5481: EQUAL
5482: IFFALSE 5508
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5484: LD_EXP 2
5488: PPUSH
5489: LD_STRING D2Jc-Joan-1
5491: PPUSH
5492: CALL_OW 94
// fastEnd = 1 ;
5496: LD_ADDR_EXP 15
5500: PUSH
5501: LD_INT 1
5503: ST_TO_ADDR
// FinishMission ;
5504: CALL 9463 0 0
// end ; end ; if dec1 = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 2
5515: EQUAL
5516: IFFALSE 5530
// begin fastEnd = 1 ;
5518: LD_ADDR_EXP 15
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// FinishMission ;
5526: CALL 9463 0 0
// end ; end ; if JMMGirl = 2 then
5530: LD_EXP 7
5534: PUSH
5535: LD_INT 2
5537: EQUAL
5538: IFFALSE 5851
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5540: LD_EXP 3
5544: PPUSH
5545: LD_STRING D2L-Lisa-1
5547: PPUSH
5548: CALL_OW 94
// dec1 = Query1 ;
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: CALL 1283 0 0
5561: ST_TO_ADDR
// if dec1 = 1 then
5562: LD_VAR 0 1
5566: PUSH
5567: LD_INT 1
5569: EQUAL
5570: IFFALSE 5829
// begin ComExitVehicle ( JMM ) ;
5572: LD_EXP 1
5576: PPUSH
5577: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5581: LD_EXP 1
5585: PPUSH
5586: LD_STRING D2L-JMM-1
5588: PPUSH
5589: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5593: LD_EXP 3
5597: PPUSH
5598: LD_STRING D2L-Lisa-2
5600: PPUSH
5601: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5605: LD_EXP 1
5609: PPUSH
5610: LD_STRING D2L-JMM-2
5612: PPUSH
5613: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5617: LD_EXP 3
5621: PPUSH
5622: LD_STRING D2L-Lisa-3
5624: PPUSH
5625: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5629: LD_EXP 5
5633: PPUSH
5634: LD_STRING DPowell-Pow-1
5636: PPUSH
5637: CALL_OW 94
// dec2 = Query2 ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: CALL 1338 0 0
5650: ST_TO_ADDR
// if dec2 = 1 then
5651: LD_VAR 0 2
5655: PUSH
5656: LD_INT 1
5658: EQUAL
5659: IFFALSE 5725
// begin Say ( JMM , D2La-JMM-1 ) ;
5661: LD_EXP 1
5665: PPUSH
5666: LD_STRING D2La-JMM-1
5668: PPUSH
5669: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5673: LD_EXP 3
5677: PPUSH
5678: LD_STRING D2La-Lisa-1
5680: PPUSH
5681: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2La-JMM-2
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5697: LD_EXP 3
5701: PPUSH
5702: LD_STRING D2La-Lisa-2
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2La-JMM-3
5716: PPUSH
5717: CALL_OW 88
// InGameOff ;
5721: CALL_OW 9
// end ; if dec2 = 2 then
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: EQUAL
5733: IFFALSE 5795
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5735: LD_EXP 1
5739: PPUSH
5740: LD_STRING D2Lb-JMM-1
5742: PPUSH
5743: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5747: LD_EXP 3
5751: PPUSH
5752: LD_STRING D2Lb-Lisa-1
5754: PPUSH
5755: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5759: LD_EXP 1
5763: PPUSH
5764: LD_STRING D2Lb-JMM-2
5766: PPUSH
5767: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5771: LD_EXP 3
5775: PPUSH
5776: LD_STRING D2Lb-Lisa-2
5778: PPUSH
5779: CALL_OW 94
// fastEnd = 1 ;
5783: LD_ADDR_EXP 15
5787: PUSH
5788: LD_INT 1
5790: ST_TO_ADDR
// FinishMission ;
5791: CALL 9463 0 0
// end ; if dec2 = 3 then
5795: LD_VAR 0 2
5799: PUSH
5800: LD_INT 3
5802: EQUAL
5803: IFFALSE 5829
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5805: LD_EXP 3
5809: PPUSH
5810: LD_STRING D2Lc-Lisa-1
5812: PPUSH
5813: CALL_OW 94
// fastEnd = 1 ;
5817: LD_ADDR_EXP 15
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// FinishMission ;
5825: CALL 9463 0 0
// end ; end ; if dec1 = 2 then
5829: LD_VAR 0 1
5833: PUSH
5834: LD_INT 2
5836: EQUAL
5837: IFFALSE 5851
// begin fastEnd = 1 ;
5839: LD_ADDR_EXP 15
5843: PUSH
5844: LD_INT 1
5846: ST_TO_ADDR
// FinishMission ;
5847: CALL 9463 0 0
// end ; end ; if JMMGirl = 3 then
5851: LD_EXP 7
5855: PUSH
5856: LD_INT 3
5858: EQUAL
5859: IFFALSE 6076
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5861: LD_EXP 4
5865: PPUSH
5866: LD_STRING D2X-Con-1
5868: PPUSH
5869: CALL_OW 94
// dec1 = Query1 ;
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: CALL 1283 0 0
5882: ST_TO_ADDR
// if dec1 = 1 then
5883: LD_VAR 0 1
5887: PUSH
5888: LD_INT 1
5890: EQUAL
5891: IFFALSE 6054
// begin ComExitVehicle ( JMM ) ;
5893: LD_EXP 1
5897: PPUSH
5898: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D2X-JMM-1
5909: PPUSH
5910: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5914: LD_EXP 4
5918: PPUSH
5919: LD_STRING D2X-Con-2
5921: PPUSH
5922: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5926: LD_EXP 5
5930: PPUSH
5931: LD_STRING DPowell-Pow-1
5933: PPUSH
5934: CALL_OW 94
// dec2 = Query2 ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: CALL 1338 0 0
5947: ST_TO_ADDR
// if dec2 = 1 then
5948: LD_VAR 0 2
5952: PUSH
5953: LD_INT 1
5955: EQUAL
5956: IFFALSE 5974
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5958: LD_EXP 1
5962: PPUSH
5963: LD_STRING D2Xa-JMM-1
5965: PPUSH
5966: CALL_OW 88
// InGameOff ;
5970: CALL_OW 9
// end ; if dec2 = 2 then
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: EQUAL
5982: IFFALSE 6020
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5984: LD_EXP 1
5988: PPUSH
5989: LD_STRING D2Xb-JMM-1
5991: PPUSH
5992: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5996: LD_EXP 4
6000: PPUSH
6001: LD_STRING D2Xb-Con-1
6003: PPUSH
6004: CALL_OW 94
// fastEnd = 1 ;
6008: LD_ADDR_EXP 15
6012: PUSH
6013: LD_INT 1
6015: ST_TO_ADDR
// FinishMission ;
6016: CALL 9463 0 0
// end ; if dec2 = 3 then
6020: LD_VAR 0 2
6024: PUSH
6025: LD_INT 3
6027: EQUAL
6028: IFFALSE 6054
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6030: LD_EXP 4
6034: PPUSH
6035: LD_STRING D2Xc-Con-1
6037: PPUSH
6038: CALL_OW 94
// fastEnd = 1 ;
6042: LD_ADDR_EXP 15
6046: PUSH
6047: LD_INT 1
6049: ST_TO_ADDR
// FinishMission ;
6050: CALL 9463 0 0
// end ; end ; if dec1 = 2 then
6054: LD_VAR 0 1
6058: PUSH
6059: LD_INT 2
6061: EQUAL
6062: IFFALSE 6076
// begin fastEnd = 1 ;
6064: LD_ADDR_EXP 15
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// FinishMission ;
6072: CALL 9463 0 0
// end ; end ; if fastEnd = 1 then
6076: LD_EXP 15
6080: PUSH
6081: LD_INT 1
6083: EQUAL
6084: IFFALSE 6090
// FinishMission ;
6086: CALL 9463 0 0
// end ;
6090: PPOPN 2
6092: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6093: LD_EXP 1
6097: PPUSH
6098: LD_INT 6
6100: PPUSH
6101: CALL_OW 308
6105: IFFALSE 6871
6107: GO 6109
6109: DISABLE
// begin InGameOn ;
6110: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6114: LD_INT 35
6116: PPUSH
6117: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6121: LD_EXP 1
6125: PPUSH
6126: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_INT 62
6137: PPUSH
6138: LD_INT 104
6140: PPUSH
6141: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6145: LD_EXP 1
6149: PPUSH
6150: LD_EXP 2
6154: PPUSH
6155: CALL_OW 296
6159: PUSH
6160: LD_INT 4
6162: LESS
6163: PUSH
6164: LD_EXP 1
6168: PPUSH
6169: LD_EXP 3
6173: PPUSH
6174: CALL_OW 296
6178: PUSH
6179: LD_INT 4
6181: LESS
6182: OR
6183: PUSH
6184: LD_EXP 1
6188: PPUSH
6189: LD_EXP 4
6193: PPUSH
6194: CALL_OW 296
6198: PUSH
6199: LD_INT 4
6201: LESS
6202: OR
6203: IFFALSE 6114
// case JMMGirl of 1 :
6205: LD_EXP 7
6209: PUSH
6210: LD_INT 1
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6218
6216: GO 6430
6218: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6219: LD_INT 22
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PPUSH
6234: LD_INT 1
6236: PPUSH
6237: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6241: LD_EXP 2
6245: PPUSH
6246: LD_EXP 1
6250: PPUSH
6251: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6255: LD_EXP 1
6259: PPUSH
6260: LD_EXP 2
6264: PPUSH
6265: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6269: LD_EXP 2
6273: PUSH
6274: LD_EXP 1
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 87
// wait ( 0 0$1 ) ;
6287: LD_INT 35
6289: PPUSH
6290: CALL_OW 67
// DialogueOn ;
6294: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6298: LD_EXP 2
6302: PPUSH
6303: LD_STRING D3J-Joan-1
6305: PPUSH
6306: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6310: LD_EXP 1
6314: PPUSH
6315: LD_STRING D3J-JMM-1
6317: PPUSH
6318: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6322: LD_EXP 2
6326: PPUSH
6327: LD_STRING D3J-Joan-2
6329: PPUSH
6330: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6334: LD_EXP 1
6338: PPUSH
6339: LD_STRING D3J-JMM-2
6341: PPUSH
6342: CALL_OW 88
// wait ( 0 0$1 ) ;
6346: LD_INT 35
6348: PPUSH
6349: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6353: LD_EXP 1
6357: PPUSH
6358: LD_STRING D4-JMM-1
6360: PPUSH
6361: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6365: LD_EXP 2
6369: PPUSH
6370: LD_STRING D4-Joan-1
6372: PPUSH
6373: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6377: LD_EXP 1
6381: PPUSH
6382: LD_STRING D4-JMM-2
6384: PPUSH
6385: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6389: LD_EXP 2
6393: PPUSH
6394: LD_STRING D4-Joan-2
6396: PPUSH
6397: CALL_OW 88
// DialogueOff ;
6401: CALL_OW 7
// InGameOff ;
6405: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6409: LD_STRING M2J
6411: PPUSH
6412: CALL_OW 337
// SaveForQuickRestart ;
6416: CALL_OW 22
// russianAI = 1 ;
6420: LD_ADDR_EXP 13
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// end ; 2 :
6428: GO 6871
6430: LD_INT 2
6432: DOUBLE
6433: EQUAL
6434: IFTRUE 6438
6436: GO 6650
6438: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6439: LD_INT 22
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: PPUSH
6454: LD_INT 1
6456: PPUSH
6457: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6461: LD_EXP 3
6465: PPUSH
6466: LD_EXP 1
6470: PPUSH
6471: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6475: LD_EXP 1
6479: PPUSH
6480: LD_EXP 3
6484: PPUSH
6485: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6489: LD_EXP 3
6493: PUSH
6494: LD_EXP 1
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PPUSH
6503: CALL_OW 87
// wait ( 0 0$1 ) ;
6507: LD_INT 35
6509: PPUSH
6510: CALL_OW 67
// DialogueOn ;
6514: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6518: LD_EXP 3
6522: PPUSH
6523: LD_STRING D3L-Lisa-1
6525: PPUSH
6526: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6530: LD_EXP 1
6534: PPUSH
6535: LD_STRING D3L-JMM-1
6537: PPUSH
6538: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6542: LD_EXP 3
6546: PPUSH
6547: LD_STRING D3L-Lisa-2
6549: PPUSH
6550: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6554: LD_EXP 1
6558: PPUSH
6559: LD_STRING D3L-JMM-2
6561: PPUSH
6562: CALL_OW 88
// wait ( 0 0$1 ) ;
6566: LD_INT 35
6568: PPUSH
6569: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6573: LD_EXP 1
6577: PPUSH
6578: LD_STRING D4-JMM-1
6580: PPUSH
6581: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6585: LD_EXP 3
6589: PPUSH
6590: LD_STRING D4-Lisa-1
6592: PPUSH
6593: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6597: LD_EXP 1
6601: PPUSH
6602: LD_STRING D4-JMM-1
6604: PPUSH
6605: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6609: LD_EXP 3
6613: PPUSH
6614: LD_STRING D4-Lisa-2
6616: PPUSH
6617: CALL_OW 88
// DialogueOff ;
6621: CALL_OW 7
// InGameOff ;
6625: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6629: LD_STRING M2L
6631: PPUSH
6632: CALL_OW 337
// SaveForQuickRestart ;
6636: CALL_OW 22
// russianAI = 1 ;
6640: LD_ADDR_EXP 13
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// end ; 3 :
6648: GO 6871
6650: LD_INT 3
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6870
6658: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6659: LD_INT 22
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PPUSH
6669: CALL_OW 69
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6681: LD_EXP 4
6685: PPUSH
6686: LD_EXP 1
6690: PPUSH
6691: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6695: LD_EXP 1
6699: PPUSH
6700: LD_EXP 4
6704: PPUSH
6705: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6709: LD_EXP 2
6713: PUSH
6714: LD_EXP 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 87
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// DialogueOn ;
6734: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6738: LD_EXP 4
6742: PPUSH
6743: LD_STRING D3X-Con-1
6745: PPUSH
6746: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D3J-JMM-1
6757: PPUSH
6758: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6762: LD_EXP 4
6766: PPUSH
6767: LD_STRING D3J-Joan-2
6769: PPUSH
6770: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING D3J-JMM-2
6781: PPUSH
6782: CALL_OW 88
// wait ( 0 0$1 ) ;
6786: LD_INT 35
6788: PPUSH
6789: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING D4-JMM-1
6800: PPUSH
6801: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6805: LD_EXP 4
6809: PPUSH
6810: LD_STRING D4-Con-1
6812: PPUSH
6813: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6817: LD_EXP 1
6821: PPUSH
6822: LD_STRING D4-JMM-2
6824: PPUSH
6825: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6829: LD_EXP 4
6833: PPUSH
6834: LD_STRING D4-Con-2
6836: PPUSH
6837: CALL_OW 88
// DialogueOff ;
6841: CALL_OW 7
// InGameOff ;
6845: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6849: LD_STRING M2X
6851: PPUSH
6852: CALL_OW 337
// SaveForQuickRestart ;
6856: CALL_OW 22
// russianAI = 1 ;
6860: LD_ADDR_EXP 13
6864: PUSH
6865: LD_INT 1
6867: ST_TO_ADDR
// end ; end ;
6868: GO 6871
6870: POP
// end ;
6871: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6872: LD_INT 32
6874: PPUSH
6875: CALL_OW 306
6879: IFFALSE 7212
6881: GO 6883
6883: DISABLE
// begin case JMMGirl of 1 :
6884: LD_EXP 7
6888: PUSH
6889: LD_INT 1
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 7019
6897: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6898: LD_EXP 1
6902: PPUSH
6903: LD_STRING D6J-JMM-1
6905: PPUSH
6906: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6910: LD_STRING 13f_Denis
6912: PPUSH
6913: CALL_OW 28
6917: PUSH
6918: LD_INT 1
6920: EQUAL
6921: PUSH
6922: LD_STRING 13s_Denis
6924: PPUSH
6925: CALL_OW 28
6929: PUSH
6930: LD_INT 1
6932: EQUAL
6933: OR
6934: IFFALSE 6974
// begin Say ( Joan , D6J-Joan-1 ) ;
6936: LD_EXP 2
6940: PPUSH
6941: LD_STRING D6J-Joan-1
6943: PPUSH
6944: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6948: LD_EXP 1
6952: PPUSH
6953: LD_STRING D6J-JMM-2
6955: PPUSH
6956: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6960: LD_EXP 2
6964: PPUSH
6965: LD_STRING D6J-Joan-2
6967: PPUSH
6968: CALL_OW 88
// end else
6972: GO 6986
// begin Say ( Joan , D6J-Joan-2a ) ;
6974: LD_EXP 2
6978: PPUSH
6979: LD_STRING D6J-Joan-2a
6981: PPUSH
6982: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6986: LD_EXP 1
6990: PPUSH
6991: LD_STRING D6J-JMM-3
6993: PPUSH
6994: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6998: LD_EXP 2
7002: PPUSH
7003: LD_STRING D6J-Joan-3
7005: PPUSH
7006: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7010: LD_STRING M3
7012: PPUSH
7013: CALL_OW 337
// end ; 2 :
7017: GO 7212
7019: LD_INT 2
7021: DOUBLE
7022: EQUAL
7023: IFTRUE 7027
7025: GO 7085
7027: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7028: LD_EXP 1
7032: PPUSH
7033: LD_STRING D6L-JMM-1
7035: PPUSH
7036: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7040: LD_EXP 3
7044: PPUSH
7045: LD_STRING D6L-Lisa-1
7047: PPUSH
7048: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7052: LD_EXP 1
7056: PPUSH
7057: LD_STRING D6L-JMM-2
7059: PPUSH
7060: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7064: LD_EXP 3
7068: PPUSH
7069: LD_STRING D6L-Lisa-2
7071: PPUSH
7072: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7076: LD_STRING M3
7078: PPUSH
7079: CALL_OW 337
// end ; 3 :
7083: GO 7212
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7211
7093: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7094: LD_EXP 1
7098: PPUSH
7099: LD_STRING D6X-JMM-1
7101: PPUSH
7102: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7106: LD_EXP 4
7110: PPUSH
7111: LD_STRING D6X-Con-1
7113: PPUSH
7114: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7118: LD_EXP 1
7122: PPUSH
7123: LD_STRING D6X-JMM-2
7125: PPUSH
7126: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7130: LD_EXP 4
7134: PPUSH
7135: LD_STRING D6X-Con-2
7137: PPUSH
7138: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7142: LD_EXP 1
7146: PPUSH
7147: LD_STRING D6X-JMM-3
7149: PPUSH
7150: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7154: LD_EXP 4
7158: PPUSH
7159: LD_STRING D6X-Con-3
7161: PPUSH
7162: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7166: LD_EXP 1
7170: PPUSH
7171: LD_STRING D6X-JMM-4
7173: PPUSH
7174: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7178: LD_EXP 4
7182: PPUSH
7183: LD_STRING D6X-Con-4
7185: PPUSH
7186: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7190: LD_EXP 1
7194: PPUSH
7195: LD_STRING D6X-JMM-5
7197: PPUSH
7198: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7202: LD_STRING M3
7204: PPUSH
7205: CALL_OW 337
// end ; end ;
7209: GO 7212
7211: POP
// end ;
7212: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7213: LD_INT 22
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 33
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PPUSH
7237: CALL_OW 69
7241: PPUSH
7242: CALL_OW 306
7246: IFFALSE 7392
7248: GO 7250
7250: DISABLE
// begin case JMMGirl of 1 :
7251: LD_EXP 7
7255: PUSH
7256: LD_INT 1
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7301
7264: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7265: LD_EXP 1
7269: PPUSH
7270: LD_STRING D5-JMM-1
7272: PPUSH
7273: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7277: LD_INT 77
7279: PPUSH
7280: LD_INT 87
7282: PPUSH
7283: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7287: LD_EXP 2
7291: PPUSH
7292: LD_STRING D5-Joan-1
7294: PPUSH
7295: CALL_OW 88
// end ; 2 :
7299: GO 7392
7301: LD_INT 2
7303: DOUBLE
7304: EQUAL
7305: IFTRUE 7309
7307: GO 7346
7309: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7310: LD_EXP 1
7314: PPUSH
7315: LD_STRING D5-JMM-1
7317: PPUSH
7318: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7322: LD_INT 77
7324: PPUSH
7325: LD_INT 87
7327: PPUSH
7328: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7332: LD_EXP 3
7336: PPUSH
7337: LD_STRING D5-Lisa-1
7339: PPUSH
7340: CALL_OW 88
// end ; 3 :
7344: GO 7392
7346: LD_INT 3
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7391
7354: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7355: LD_EXP 1
7359: PPUSH
7360: LD_STRING D5-JMM-1
7362: PPUSH
7363: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7367: LD_INT 77
7369: PPUSH
7370: LD_INT 87
7372: PPUSH
7373: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7377: LD_EXP 4
7381: PPUSH
7382: LD_STRING D5-Con-1
7384: PPUSH
7385: CALL_OW 88
// end ; end ;
7389: GO 7392
7391: POP
// end ;
7392: END
// every 15 15$0 do
7393: GO 7395
7395: DISABLE
// begin DialogueOn ;
7396: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7400: LD_EXP 5
7404: PPUSH
7405: LD_STRING D7-Pow-1
7407: PPUSH
7408: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7412: LD_EXP 1
7416: PPUSH
7417: LD_STRING D7-JMM-1
7419: PPUSH
7420: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7424: LD_EXP 5
7428: PPUSH
7429: LD_STRING D7-Pow-2
7431: PPUSH
7432: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D7-JMM-2
7443: PPUSH
7444: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7448: LD_EXP 5
7452: PPUSH
7453: LD_STRING D7-Pow-3
7455: PPUSH
7456: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7460: LD_EXP 1
7464: PPUSH
7465: LD_STRING D7-JMM-3
7467: PPUSH
7468: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7472: LD_EXP 5
7476: PPUSH
7477: LD_STRING D7-Pow-4
7479: PPUSH
7480: CALL_OW 94
// DialogueOff ;
7484: CALL_OW 7
// end ; end_of_file
7488: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 255
7498: PUSH
7499: LD_INT 3
7501: EQUAL
7502: IFFALSE 7576
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7504: LD_ADDR_EXP 10
7508: PUSH
7509: LD_EXP 10
7513: PPUSH
7514: LD_INT 1
7516: PPUSH
7517: CALL_OW 3
7521: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7522: LD_ADDR_EXP 10
7526: PUSH
7527: LD_EXP 10
7531: PPUSH
7532: LD_INT 1
7534: PPUSH
7535: CALL_OW 3
7539: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7540: LD_ADDR_EXP 10
7544: PUSH
7545: LD_EXP 10
7549: PPUSH
7550: LD_INT 1
7552: PPUSH
7553: CALL_OW 3
7557: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7558: LD_ADDR_EXP 10
7562: PUSH
7563: LD_EXP 10
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 3
7575: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 255
7585: PUSH
7586: LD_INT 3
7588: EQUAL
7589: PUSH
7590: LD_VAR 0 1
7594: PPUSH
7595: CALL_OW 266
7599: PUSH
7600: LD_INT 0
7602: EQUAL
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 266
7613: PUSH
7614: LD_INT 2
7616: EQUAL
7617: OR
7618: PUSH
7619: LD_VAR 0 1
7623: PPUSH
7624: CALL_OW 266
7628: PUSH
7629: LD_INT 4
7631: EQUAL
7632: OR
7633: PUSH
7634: EMPTY
7635: LIST
7636: AND
7637: IFFALSE 7648
// ComUpgrade ( building ) ;
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7648: LD_VAR 0 1
7652: PPUSH
7653: CALL_OW 255
7657: PUSH
7658: LD_INT 3
7660: EQUAL
7661: PUSH
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 266
7671: PUSH
7672: LD_INT 32
7674: EQUAL
7675: AND
7676: IFFALSE 7717
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7678: LD_VAR 0 1
7682: PPUSH
7683: LD_INT 42
7685: PUSH
7686: LD_INT 43
7688: PUSH
7689: LD_INT 44
7691: PUSH
7692: LD_INT 46
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 1
7703: PPUSH
7704: LD_INT 4
7706: PPUSH
7707: CALL_OW 12
7711: ARRAY
7712: PPUSH
7713: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7717: LD_VAR 0 1
7721: PPUSH
7722: CALL_OW 255
7726: PUSH
7727: LD_INT 3
7729: EQUAL
7730: PUSH
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 266
7740: PUSH
7741: LD_INT 33
7743: EQUAL
7744: AND
7745: IFFALSE 7786
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7747: LD_VAR 0 1
7751: PPUSH
7752: LD_INT 42
7754: PUSH
7755: LD_INT 43
7757: PUSH
7758: LD_INT 44
7760: PUSH
7761: LD_INT 46
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 1
7772: PPUSH
7773: LD_INT 4
7775: PPUSH
7776: CALL_OW 12
7780: ARRAY
7781: PPUSH
7782: CALL_OW 208
// end ;
7786: PPOPN 1
7788: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7789: LD_VAR 0 1
7793: PPUSH
7794: CALL_OW 255
7798: PUSH
7799: LD_INT 3
7801: EQUAL
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 247
7812: PUSH
7813: LD_INT 3
7815: EQUAL
7816: AND
7817: IFFALSE 8509
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 266
7828: PUSH
7829: LD_INT 31
7831: EQUAL
7832: PUSH
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 266
7842: PUSH
7843: LD_INT 32
7845: EQUAL
7846: OR
7847: PUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 266
7857: PUSH
7858: LD_INT 36
7860: EQUAL
7861: OR
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 266
7872: PUSH
7873: LD_INT 0
7875: EQUAL
7876: OR
7877: PUSH
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 266
7887: PUSH
7888: LD_INT 24
7890: EQUAL
7891: OR
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 266
7902: PUSH
7903: LD_INT 17
7905: EQUAL
7906: OR
7907: PUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 266
7917: PUSH
7918: LD_INT 25
7920: EQUAL
7921: OR
7922: PUSH
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 266
7932: PUSH
7933: LD_INT 19
7935: EQUAL
7936: OR
7937: PUSH
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 266
7947: PUSH
7948: LD_INT 20
7950: EQUAL
7951: OR
7952: PUSH
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 266
7962: PUSH
7963: LD_INT 18
7965: EQUAL
7966: OR
7967: PUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 266
7977: PUSH
7978: LD_INT 21
7980: EQUAL
7981: OR
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 266
7992: PUSH
7993: LD_INT 23
7995: EQUAL
7996: OR
7997: PUSH
7998: LD_VAR 0 1
8002: PPUSH
8003: CALL_OW 266
8007: PUSH
8008: LD_INT 16
8010: EQUAL
8011: OR
8012: PUSH
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 266
8022: PUSH
8023: LD_INT 6
8025: EQUAL
8026: OR
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 266
8037: PUSH
8038: LD_INT 29
8040: EQUAL
8041: OR
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 266
8052: PUSH
8053: LD_INT 26
8055: EQUAL
8056: OR
8057: PUSH
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 266
8067: PUSH
8068: LD_INT 30
8070: EQUAL
8071: OR
8072: PUSH
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 266
8082: PUSH
8083: LD_INT 28
8085: EQUAL
8086: OR
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 266
8097: PUSH
8098: LD_INT 27
8100: EQUAL
8101: OR
8102: PUSH
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 266
8112: PUSH
8113: LD_INT 33
8115: EQUAL
8116: OR
8117: PUSH
8118: LD_VAR 0 1
8122: PPUSH
8123: CALL_OW 266
8127: PUSH
8128: LD_INT 2
8130: EQUAL
8131: OR
8132: PUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 266
8142: PUSH
8143: LD_INT 4
8145: EQUAL
8146: OR
8147: IFFALSE 8233
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8149: LD_ADDR_EXP 10
8153: PUSH
8154: LD_EXP 10
8158: PUSH
8159: LD_VAR 0 1
8163: PPUSH
8164: CALL_OW 266
8168: ADD
8169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8170: LD_ADDR_EXP 10
8174: PUSH
8175: LD_EXP 10
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: CALL_OW 250
8189: ADD
8190: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8191: LD_ADDR_EXP 10
8195: PUSH
8196: LD_EXP 10
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 251
8210: ADD
8211: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8212: LD_ADDR_EXP 10
8216: PUSH
8217: LD_EXP 10
8221: PUSH
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 254
8231: ADD
8232: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8233: LD_VAR 0 1
8237: PPUSH
8238: CALL_OW 266
8242: PUSH
8243: LD_INT 1
8245: EQUAL
8246: IFFALSE 8325
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8248: LD_ADDR_EXP 10
8252: PUSH
8253: LD_EXP 10
8257: PUSH
8258: LD_INT 0
8260: ADD
8261: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8262: LD_ADDR_EXP 10
8266: PUSH
8267: LD_EXP 10
8271: PUSH
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 250
8281: ADD
8282: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8283: LD_ADDR_EXP 10
8287: PUSH
8288: LD_EXP 10
8292: PUSH
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 251
8302: ADD
8303: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8304: LD_ADDR_EXP 10
8308: PUSH
8309: LD_EXP 10
8313: PUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 254
8323: ADD
8324: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8325: LD_VAR 0 1
8329: PPUSH
8330: CALL_OW 266
8334: PUSH
8335: LD_INT 3
8337: EQUAL
8338: IFFALSE 8417
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8340: LD_ADDR_EXP 10
8344: PUSH
8345: LD_EXP 10
8349: PUSH
8350: LD_INT 2
8352: ADD
8353: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8354: LD_ADDR_EXP 10
8358: PUSH
8359: LD_EXP 10
8363: PUSH
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 250
8373: ADD
8374: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8375: LD_ADDR_EXP 10
8379: PUSH
8380: LD_EXP 10
8384: PUSH
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 251
8394: ADD
8395: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8396: LD_ADDR_EXP 10
8400: PUSH
8401: LD_EXP 10
8405: PUSH
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 254
8415: ADD
8416: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 266
8426: PUSH
8427: LD_INT 5
8429: EQUAL
8430: IFFALSE 8509
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8432: LD_ADDR_EXP 10
8436: PUSH
8437: LD_EXP 10
8441: PUSH
8442: LD_INT 4
8444: ADD
8445: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8446: LD_ADDR_EXP 10
8450: PUSH
8451: LD_EXP 10
8455: PUSH
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 250
8465: ADD
8466: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8467: LD_ADDR_EXP 10
8471: PUSH
8472: LD_EXP 10
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 251
8486: ADD
8487: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8488: LD_ADDR_EXP 10
8492: PUSH
8493: LD_EXP 10
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 254
8507: ADD
8508: ST_TO_ADDR
// end ; end ; end ;
8509: PPOPN 1
8511: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8512: LD_VAR 0 2
8516: PUSH
8517: LD_INT 1
8519: EQUAL
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 40
8528: EQUAL
8529: OR
8530: IFFALSE 8654
// if GetSide ( vehicle ) = 3 then
8532: LD_VAR 0 1
8536: PPUSH
8537: CALL_OW 255
8541: PUSH
8542: LD_INT 3
8544: EQUAL
8545: IFFALSE 8654
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8547: LD_VAR 0 1
8551: PPUSH
8552: CALL_OW 264
8556: PUSH
8557: LD_INT 47
8559: EQUAL
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 264
8570: PUSH
8571: LD_INT 46
8573: EQUAL
8574: OR
8575: PUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 264
8585: PUSH
8586: LD_INT 45
8588: EQUAL
8589: OR
8590: PUSH
8591: LD_VAR 0 1
8595: PPUSH
8596: CALL_OW 264
8600: PUSH
8601: LD_INT 44
8603: EQUAL
8604: OR
8605: IFFALSE 8623
// russianTanks = russianTanks ^ vehicle ;
8607: LD_ADDR_EXP 11
8611: PUSH
8612: LD_EXP 11
8616: PUSH
8617: LD_VAR 0 1
8621: ADD
8622: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8623: LD_VAR 0 1
8627: PPUSH
8628: CALL_OW 264
8632: PUSH
8633: LD_INT 49
8635: EQUAL
8636: IFFALSE 8654
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8638: LD_ADDR_EXP 12
8642: PUSH
8643: LD_EXP 12
8647: PUSH
8648: LD_VAR 0 1
8652: ADD
8653: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 255
8663: PUSH
8664: LD_INT 1
8666: EQUAL
8667: PUSH
8668: LD_VAR 0 1
8672: PPUSH
8673: CALL_OW 264
8677: PUSH
8678: LD_INT 10
8680: EQUAL
8681: AND
8682: IFFALSE 8698
// amLaserCounter = amLaserCounter + 1 ;
8684: LD_ADDR_EXP 9
8688: PUSH
8689: LD_EXP 9
8693: PUSH
8694: LD_INT 1
8696: PLUS
8697: ST_TO_ADDR
// end ;
8698: PPOPN 2
8700: END
// on UnitGoesToRed ( unit ) do var i ;
8701: LD_INT 0
8703: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 255
8713: PUSH
8714: LD_INT 3
8716: EQUAL
8717: PUSH
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 247
8727: PUSH
8728: LD_INT 2
8730: EQUAL
8731: AND
8732: IFFALSE 8850
// begin if russianTanks > 0 then
8734: LD_EXP 11
8738: PUSH
8739: LD_INT 0
8741: GREATER
8742: IFFALSE 8792
// for i in russianTanks do
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: LD_EXP 11
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8790
// if i = unit then
8757: LD_VAR 0 2
8761: PUSH
8762: LD_VAR 0 1
8766: EQUAL
8767: IFFALSE 8788
// russianTanks = russianTanks diff [ unit ] ;
8769: LD_ADDR_EXP 11
8773: PUSH
8774: LD_EXP 11
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: DIFF
8787: ST_TO_ADDR
8788: GO 8754
8790: POP
8791: POP
// if russianTimeLapsers > 0 then
8792: LD_EXP 12
8796: PUSH
8797: LD_INT 0
8799: GREATER
8800: IFFALSE 8850
// for i in russianTimeLapsers do
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_EXP 12
8811: PUSH
8812: FOR_IN
8813: IFFALSE 8848
// if i = unit then
8815: LD_VAR 0 2
8819: PUSH
8820: LD_VAR 0 1
8824: EQUAL
8825: IFFALSE 8846
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8827: LD_ADDR_EXP 12
8831: PUSH
8832: LD_EXP 12
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: DIFF
8845: ST_TO_ADDR
8846: GO 8812
8848: POP
8849: POP
// end ; end ; end_of_file
8850: PPOPN 2
8852: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8853: LD_EXP 1
8857: PPUSH
8858: CALL_OW 310
8862: PPUSH
8863: LD_INT 12
8865: PPUSH
8866: CALL_OW 308
8870: PUSH
8871: LD_EXP 15
8875: PUSH
8876: LD_INT 0
8878: EQUAL
8879: AND
8880: IFFALSE 9322
8882: GO 8884
8884: DISABLE
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
// begin enable ;
8889: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8890: LD_ADDR_VAR 0 1
8894: PUSH
8895: LD_EXP 1
8899: PPUSH
8900: CALL_OW 310
8904: ST_TO_ADDR
// if JMMGirl = 1 then
8905: LD_EXP 7
8909: PUSH
8910: LD_INT 1
8912: EQUAL
8913: IFFALSE 8930
// JMMGirlVeh = IsInUnit ( Joan ) ;
8915: LD_ADDR_VAR 0 2
8919: PUSH
8920: LD_EXP 2
8924: PPUSH
8925: CALL_OW 310
8929: ST_TO_ADDR
// if JMMGirl = 2 then
8930: LD_EXP 7
8934: PUSH
8935: LD_INT 2
8937: EQUAL
8938: IFFALSE 8955
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_EXP 3
8949: PPUSH
8950: CALL_OW 310
8954: ST_TO_ADDR
// if JMMGirl = 3 then
8955: LD_EXP 7
8959: PUSH
8960: LD_INT 3
8962: EQUAL
8963: IFFALSE 8980
// JMMGirlVeh = IsInUnit ( Connie ) ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_EXP 4
8974: PPUSH
8975: CALL_OW 310
8979: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8980: LD_EXP 1
8984: PPUSH
8985: CALL_OW 310
8989: PPUSH
8990: LD_EXP 2
8994: PPUSH
8995: CALL_OW 310
8999: PPUSH
9000: CALL_OW 296
9004: PUSH
9005: LD_INT 10
9007: LESS
9008: PUSH
9009: LD_EXP 1
9013: PPUSH
9014: CALL_OW 310
9018: PPUSH
9019: LD_EXP 3
9023: PPUSH
9024: CALL_OW 310
9028: PPUSH
9029: CALL_OW 296
9033: PUSH
9034: LD_INT 10
9036: LESS
9037: OR
9038: PUSH
9039: LD_EXP 1
9043: PPUSH
9044: CALL_OW 310
9048: PPUSH
9049: LD_EXP 4
9053: PPUSH
9054: CALL_OW 310
9058: PPUSH
9059: CALL_OW 296
9063: PUSH
9064: LD_INT 10
9066: LESS
9067: OR
9068: IFFALSE 9226
// begin case Query ( Q3b ) of 1 :
9070: LD_STRING Q3b
9072: PPUSH
9073: CALL_OW 97
9077: PUSH
9078: LD_INT 1
9080: DOUBLE
9081: EQUAL
9082: IFTRUE 9086
9084: GO 9223
9086: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 265
9096: PUSH
9097: EMPTY
9098: LIST
9099: PUSH
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 262
9109: PUSH
9110: EMPTY
9111: LIST
9112: PUSH
9113: LD_VAR 0 1
9117: PPUSH
9118: CALL_OW 263
9122: PUSH
9123: EMPTY
9124: LIST
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 264
9135: PUSH
9136: EMPTY
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PPUSH
9145: LD_STRING 14_JMMVeh_1
9147: PPUSH
9148: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9152: LD_VAR 0 2
9156: PPUSH
9157: CALL_OW 265
9161: PUSH
9162: EMPTY
9163: LIST
9164: PUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 262
9174: PUSH
9175: EMPTY
9176: LIST
9177: PUSH
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 263
9187: PUSH
9188: EMPTY
9189: LIST
9190: PUSH
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 264
9200: PUSH
9201: EMPTY
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PPUSH
9210: LD_STRING 14_JMMGirlVeh_1
9212: PPUSH
9213: CALL_OW 39
// FinishMission ;
9217: CALL 9463 0 0
// end ; end ;
9221: GO 9224
9223: POP
// end else
9224: GO 9322
// begin if JMMGirl = 1 then
9226: LD_EXP 7
9230: PUSH
9231: LD_INT 1
9233: EQUAL
9234: IFFALSE 9262
// begin case Query ( Q3bJ ) of 1 :
9236: LD_STRING Q3bJ
9238: PPUSH
9239: CALL_OW 97
9243: PUSH
9244: LD_INT 1
9246: DOUBLE
9247: EQUAL
9248: IFTRUE 9252
9250: GO 9259
9252: POP
// FinishMission ; end ;
9253: CALL 9463 0 0
9257: GO 9260
9259: POP
// end else
9260: GO 9322
// begin if JMMGirl = 2 then
9262: LD_EXP 7
9266: PUSH
9267: LD_INT 2
9269: EQUAL
9270: IFFALSE 9298
// begin case Query ( Q3bL ) of 1 :
9272: LD_STRING Q3bL
9274: PPUSH
9275: CALL_OW 97
9279: PUSH
9280: LD_INT 1
9282: DOUBLE
9283: EQUAL
9284: IFTRUE 9288
9286: GO 9295
9288: POP
// FinishMission ; end ;
9289: CALL 9463 0 0
9293: GO 9296
9295: POP
// end else
9296: GO 9322
// begin case Query ( Q3bX ) of 1 :
9298: LD_STRING Q3bX
9300: PPUSH
9301: CALL_OW 97
9305: PUSH
9306: LD_INT 1
9308: DOUBLE
9309: EQUAL
9310: IFTRUE 9314
9312: GO 9321
9314: POP
// FinishMission ; end ;
9315: CALL 9463 0 0
9319: GO 9322
9321: POP
// end ; end ; end ; end ;
9322: PPOPN 2
9324: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9325: LD_INT 22
9327: PUSH
9328: LD_INT 3
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 21
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 69
9353: PUSH
9354: LD_INT 0
9356: EQUAL
9357: PUSH
9358: LD_EXP 15
9362: PUSH
9363: LD_INT 0
9365: EQUAL
9366: AND
9367: IFFALSE 9462
9369: GO 9371
9371: DISABLE
// begin DialogueOn ;
9372: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9376: LD_EXP 1
9380: PPUSH
9381: LD_STRING DEnd-JMM-1
9383: PPUSH
9384: CALL_OW 88
// if JMMGirl = 1 then
9388: LD_EXP 7
9392: PUSH
9393: LD_INT 1
9395: EQUAL
9396: IFFALSE 9410
// Say ( Joan , DEnd-Joan-1 ) ;
9398: LD_EXP 2
9402: PPUSH
9403: LD_STRING DEnd-Joan-1
9405: PPUSH
9406: CALL_OW 88
// if JMMGirl = 2 then
9410: LD_EXP 7
9414: PUSH
9415: LD_INT 2
9417: EQUAL
9418: IFFALSE 9432
// Say ( Lisa , DEnd-Lisa-1 ) ;
9420: LD_EXP 3
9424: PPUSH
9425: LD_STRING DEnd-Lisa-1
9427: PPUSH
9428: CALL_OW 88
// if JMMGirl = 3 then
9432: LD_EXP 7
9436: PUSH
9437: LD_INT 3
9439: EQUAL
9440: IFFALSE 9454
// Say ( Connie , DEnd-Con-1 ) ;
9442: LD_EXP 4
9446: PPUSH
9447: LD_STRING DEnd-Con-1
9449: PPUSH
9450: CALL_OW 88
// DialogueOff ;
9454: CALL_OW 7
// FinishMission ;
9458: CALL 9463 0 0
// end ;
9462: END
// export function FinishMission ; begin
9463: LD_INT 0
9465: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9466: LD_EXP 1
9470: PPUSH
9471: LD_STRING 14_JMM
9473: PPUSH
9474: CALL_OW 38
// if fastEnd = 1 then
9478: LD_EXP 15
9482: PUSH
9483: LD_INT 1
9485: EQUAL
9486: IFFALSE 9610
// begin AddMedal ( fastend , - 1 ) ;
9488: LD_STRING fastend
9490: PPUSH
9491: LD_INT 1
9493: NEG
9494: PPUSH
9495: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9499: LD_STRING fastend
9501: PPUSH
9502: LD_INT 1
9504: NEG
9505: PPUSH
9506: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9510: LD_STRING fastend
9512: PPUSH
9513: LD_INT 1
9515: NEG
9516: PPUSH
9517: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9521: LD_EXP 7
9525: PPUSH
9526: LD_STRING 14_JMMGirl_1
9528: PPUSH
9529: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9533: LD_INT 0
9535: PPUSH
9536: LD_STRING 14_JMMGirlStatus_1
9538: PPUSH
9539: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9543: LD_INT 0
9545: PPUSH
9546: LD_STRING 14_KappaStatus_1
9548: PPUSH
9549: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
9553: LD_INT 95
9555: PPUSH
9556: CALL_OW 265
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 95
9566: PPUSH
9567: CALL_OW 262
9571: PUSH
9572: EMPTY
9573: LIST
9574: PUSH
9575: LD_INT 95
9577: PPUSH
9578: CALL_OW 263
9582: PUSH
9583: EMPTY
9584: LIST
9585: PUSH
9586: LD_INT 95
9588: PPUSH
9589: CALL_OW 264
9593: PUSH
9594: EMPTY
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PPUSH
9603: LD_STRING 14_JMMVeh_1
9605: PPUSH
9606: CALL_OW 39
// end ; if fastEnd = 0 then
9610: LD_EXP 15
9614: PUSH
9615: LD_INT 0
9617: EQUAL
9618: IFFALSE 10288
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9620: LD_EXP 7
9624: PPUSH
9625: LD_STRING 14_JMMGirl_1
9627: PPUSH
9628: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9632: LD_INT 22
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 21
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PPUSH
9656: CALL_OW 69
9660: PUSH
9661: LD_INT 0
9663: EQUAL
9664: PUSH
9665: LD_INT 48
9667: PPUSH
9668: CALL_OW 255
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: AND
9677: IFFALSE 9691
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9679: LD_INT 1
9681: PPUSH
9682: LD_STRING 14_KappaStatus_1
9684: PPUSH
9685: CALL_OW 39
9689: GO 9701
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9691: LD_INT 0
9693: PPUSH
9694: LD_STRING 14_KappaStatus_1
9696: PPUSH
9697: CALL_OW 39
// case JMMGirl of 1 :
9701: LD_EXP 7
9705: PUSH
9706: LD_INT 1
9708: DOUBLE
9709: EQUAL
9710: IFTRUE 9714
9712: GO 9862
9714: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9715: LD_EXP 2
9719: PPUSH
9720: CALL_OW 302
9724: PUSH
9725: LD_EXP 2
9729: PPUSH
9730: CALL_OW 255
9734: PUSH
9735: LD_INT 1
9737: EQUAL
9738: AND
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 3
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 21
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: PUSH
9769: LD_INT 0
9771: EQUAL
9772: PUSH
9773: LD_EXP 1
9777: PPUSH
9778: CALL_OW 310
9782: PPUSH
9783: LD_EXP 2
9787: PPUSH
9788: CALL_OW 310
9792: PPUSH
9793: CALL_OW 296
9797: PUSH
9798: LD_INT 10
9800: LESS
9801: OR
9802: AND
9803: IFFALSE 9839
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9805: LD_INT 1
9807: PPUSH
9808: LD_STRING 14_JMMGirlStatus_1
9810: PPUSH
9811: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9815: LD_EXP 2
9819: PPUSH
9820: LD_STRING 14_Joan
9822: PPUSH
9823: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9827: LD_STRING protect
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 101
9837: GO 9860
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9839: LD_INT 0
9841: PPUSH
9842: LD_STRING 14_JMMGirlStatus_1
9844: PPUSH
9845: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9849: LD_STRING protect
9851: PPUSH
9852: LD_INT 1
9854: NEG
9855: PPUSH
9856: CALL_OW 101
// end ; end ; 2 :
9860: GO 10175
9862: LD_INT 2
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 10018
9870: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9871: LD_EXP 3
9875: PPUSH
9876: CALL_OW 302
9880: PUSH
9881: LD_EXP 3
9885: PPUSH
9886: CALL_OW 255
9890: PUSH
9891: LD_INT 1
9893: EQUAL
9894: AND
9895: PUSH
9896: LD_INT 22
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 21
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PUSH
9925: LD_INT 0
9927: EQUAL
9928: PUSH
9929: LD_EXP 1
9933: PPUSH
9934: CALL_OW 310
9938: PPUSH
9939: LD_EXP 3
9943: PPUSH
9944: CALL_OW 310
9948: PPUSH
9949: CALL_OW 296
9953: PUSH
9954: LD_INT 10
9956: LESS
9957: OR
9958: AND
9959: IFFALSE 9995
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_STRING 14_JMMGirlStatus_1
9966: PPUSH
9967: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9971: LD_EXP 3
9975: PPUSH
9976: LD_STRING 14_Lisa
9978: PPUSH
9979: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9983: LD_STRING protect
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 101
9993: GO 10016
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9995: LD_INT 0
9997: PPUSH
9998: LD_STRING 14_JMMGirlStatus_1
10000: PPUSH
10001: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10005: LD_STRING protect
10007: PPUSH
10008: LD_INT 2
10010: NEG
10011: PPUSH
10012: CALL_OW 101
// end ; end ; 3 :
10016: GO 10175
10018: LD_INT 3
10020: DOUBLE
10021: EQUAL
10022: IFTRUE 10026
10024: GO 10174
10026: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10027: LD_EXP 4
10031: PPUSH
10032: CALL_OW 302
10036: PUSH
10037: LD_EXP 4
10041: PPUSH
10042: CALL_OW 255
10046: PUSH
10047: LD_INT 1
10049: EQUAL
10050: AND
10051: PUSH
10052: LD_INT 22
10054: PUSH
10055: LD_INT 3
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 21
10064: PUSH
10065: LD_INT 1
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 69
10080: PUSH
10081: LD_INT 0
10083: EQUAL
10084: PUSH
10085: LD_EXP 1
10089: PPUSH
10090: CALL_OW 310
10094: PPUSH
10095: LD_EXP 4
10099: PPUSH
10100: CALL_OW 310
10104: PPUSH
10105: CALL_OW 296
10109: PUSH
10110: LD_INT 10
10112: LESS
10113: OR
10114: AND
10115: IFFALSE 10151
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10117: LD_INT 1
10119: PPUSH
10120: LD_STRING 14_JMMGirlStatus_1
10122: PPUSH
10123: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10127: LD_EXP 4
10131: PPUSH
10132: LD_STRING 14_Connie
10134: PPUSH
10135: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10139: LD_STRING protect
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 101
10149: GO 10172
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10151: LD_INT 0
10153: PPUSH
10154: LD_STRING 14_JMMGirlStatus_1
10156: PPUSH
10157: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10161: LD_STRING protect
10163: PPUSH
10164: LD_INT 3
10166: NEG
10167: PPUSH
10168: CALL_OW 101
// end ; end ; end ;
10172: GO 10175
10174: POP
// if amLaserCounter >= 2 then
10175: LD_EXP 9
10179: PUSH
10180: LD_INT 2
10182: GREATEREQUAL
10183: IFFALSE 10197
// begin AddMedal ( double , 1 ) end else
10185: LD_STRING double
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: CALL_OW 101
10195: GO 10231
// begin if amLaserCounter = 1 then
10197: LD_EXP 9
10201: PUSH
10202: LD_INT 1
10204: EQUAL
10205: IFFALSE 10220
// AddMedal ( double , - 2 ) else
10207: LD_STRING double
10209: PPUSH
10210: LD_INT 2
10212: NEG
10213: PPUSH
10214: CALL_OW 101
10218: GO 10231
// AddMedal ( double , - 1 ) ;
10220: LD_STRING double
10222: PPUSH
10223: LD_INT 1
10225: NEG
10226: PPUSH
10227: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10231: LD_INT 22
10233: PUSH
10234: LD_INT 3
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 69
10259: PUSH
10260: LD_INT 0
10262: EQUAL
10263: IFFALSE 10277
// AddMedal ( base , 1 ) else
10265: LD_STRING base
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 101
10275: GO 10288
// AddMedal ( base , - 1 ) ;
10277: LD_STRING base
10279: PPUSH
10280: LD_INT 1
10282: NEG
10283: PPUSH
10284: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10288: LD_STRING Eliminate
10290: PPUSH
10291: CALL_OW 102
// YouWin ;
10295: CALL_OW 103
// end ; end_of_file
10299: LD_VAR 0 1
10303: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10304: LD_EXP 1
10308: PPUSH
10309: CALL_OW 301
10313: IFFALSE 10325
10315: GO 10317
10317: DISABLE
// YouLost ( JMM ) ; end_of_file
10318: LD_STRING JMM
10320: PPUSH
10321: CALL_OW 104
10325: END
// every 1 1$0 do
10326: GO 10328
10328: DISABLE
// begin enable ;
10329: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10330: LD_INT 3
10332: PPUSH
10333: LD_INT 5
10335: PPUSH
10336: CALL_OW 12
10340: PPUSH
10341: LD_INT 13
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: CALL_OW 55
// end ;
10351: END
