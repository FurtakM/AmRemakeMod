// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1412 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Connie , true ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Connie
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1173 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1166
// begin if IsOk ( i ) then
1139: LD_VAR 0 4
1143: PPUSH
1144: CALL_OW 302
1148: IFFALSE 1164
// SaveCharacters ( i , ident ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 38
// end ;
1164: GO 1136
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 3
1172: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1173: LD_INT 0
1175: PPUSH
1176: PPUSH
1177: PPUSH
1178: PPUSH
// for i = 1 to count do
1179: LD_ADDR_VAR 0 8
1183: PUSH
1184: DOUBLE
1185: LD_INT 1
1187: DEC
1188: ST_TO_ADDR
1189: LD_VAR 0 6
1193: PUSH
1194: FOR_TO
1195: IFFALSE 1276
// begin uc_side = side ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_VAR 0 1
1206: ST_TO_ADDR
// uc_nation = nation ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_VAR 0 2
1216: ST_TO_ADDR
// hc_gallery =  ;
1217: LD_ADDR_OWVAR 33
1221: PUSH
1222: LD_STRING 
1224: ST_TO_ADDR
// hc_name =  ;
1225: LD_ADDR_OWVAR 26
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_VAR 0 5
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 380
// un = CreateHuman ;
1250: LD_ADDR_VAR 0 10
1254: PUSH
1255: CALL_OW 44
1259: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1260: LD_VAR 0 10
1264: PPUSH
1265: LD_VAR 0 3
1269: PPUSH
1270: CALL_OW 52
// end ;
1274: GO 1194
1276: POP
1277: POP
// end ;
1278: LD_VAR 0 7
1282: RET
// export function Query1 ; begin
1283: LD_INT 0
1285: PPUSH
// case query ( Q1 ) of 1 :
1286: LD_STRING Q1
1288: PPUSH
1289: CALL_OW 97
1293: PUSH
1294: LD_INT 1
1296: DOUBLE
1297: EQUAL
1298: IFTRUE 1302
1300: GO 1313
1302: POP
// result = 1 ; 2 :
1303: LD_ADDR_VAR 0 1
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
1311: GO 1333
1313: LD_INT 2
1315: DOUBLE
1316: EQUAL
1317: IFTRUE 1321
1319: GO 1332
1321: POP
// result = 2 ; end ;
1322: LD_ADDR_VAR 0 1
1326: PUSH
1327: LD_INT 2
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// end ;
1333: LD_VAR 0 1
1337: RET
// export function Query2 ; begin
1338: LD_INT 0
1340: PPUSH
// case query ( Q2J ) of 1 :
1341: LD_STRING Q2J
1343: PPUSH
1344: CALL_OW 97
1348: PUSH
1349: LD_INT 1
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1368
1357: POP
// result = 1 ; 2 :
1358: LD_ADDR_VAR 0 1
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
1366: GO 1407
1368: LD_INT 2
1370: DOUBLE
1371: EQUAL
1372: IFTRUE 1376
1374: GO 1387
1376: POP
// result = 2 ; 2 :
1377: LD_ADDR_VAR 0 1
1381: PUSH
1382: LD_INT 2
1384: ST_TO_ADDR
1385: GO 1407
1387: LD_INT 2
1389: DOUBLE
1390: EQUAL
1391: IFTRUE 1395
1393: GO 1406
1395: POP
// result = 3 ; end ;
1396: LD_ADDR_VAR 0 1
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
1404: GO 1407
1406: POP
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareDifficulty ; begin
1412: LD_INT 0
1414: PPUSH
// if difficulty = 1 then
1415: LD_OWVAR 67
1419: PUSH
1420: LD_INT 1
1422: EQUAL
1423: IFFALSE 1503
// begin SetTech ( 57 , 3 , state_disabled ) ;
1425: LD_INT 57
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1438: LD_INT 58
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1451: LD_INT 59
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1464: LD_INT 51
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1477: LD_INT 52
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1490: LD_INT 53
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 322
// end ; if difficulty = 2 then
1503: LD_OWVAR 67
1507: PUSH
1508: LD_INT 2
1510: EQUAL
1511: IFFALSE 1591
// begin SetTech ( 57 , 3 , state_enabled ) ;
1513: LD_INT 57
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1526: LD_INT 58
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1539: LD_INT 59
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1565: LD_INT 52
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1578: LD_INT 53
1580: PPUSH
1581: LD_INT 3
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 322
// end ; if difficulty = 3 then
1591: LD_OWVAR 67
1595: PUSH
1596: LD_INT 3
1598: EQUAL
1599: IFFALSE 1679
// begin SetTech ( 57 , 3 , state_enabled ) ;
1601: LD_INT 57
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1614: LD_INT 58
1616: PPUSH
1617: LD_INT 3
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1627: LD_INT 59
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1640: LD_INT 51
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1653: LD_INT 52
1655: PPUSH
1656: LD_INT 3
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1666: LD_INT 53
1668: PPUSH
1669: LD_INT 3
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 322
// end ; end ;
1679: LD_VAR 0 1
1683: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1691: LD_ADDR_VAR 0 8
1695: PUSH
1696: LD_INT 48
1698: PUSH
1699: LD_INT 49
1701: PUSH
1702: LD_INT 50
1704: PUSH
1705: LD_INT 20
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 51
1713: PUSH
1714: LD_INT 52
1716: PUSH
1717: LD_INT 69
1719: PUSH
1720: LD_INT 39
1722: PUSH
1723: LD_INT 34
1725: PUSH
1726: LD_INT 40
1728: PUSH
1729: LD_INT 53
1731: PUSH
1732: LD_INT 71
1734: PUSH
1735: LD_INT 57
1737: PUSH
1738: LD_INT 58
1740: PUSH
1741: LD_INT 44
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 27
1749: PUSH
1750: LD_INT 23
1752: PUSH
1753: LD_INT 33
1755: PUSH
1756: LD_INT 59
1758: PUSH
1759: LD_INT 54
1761: PUSH
1762: LD_INT 55
1764: PUSH
1765: LD_INT 56
1767: PUSH
1768: LD_INT 63
1770: PUSH
1771: LD_INT 64
1773: PUSH
1774: LD_INT 65
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 31
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_VAR 0 8
1840: PUSH
1841: FOR_TO
1842: IFFALSE 1918
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1844: LD_VAR 0 8
1848: PUSH
1849: LD_VAR 0 5
1853: ARRAY
1854: PPUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 321
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: PUSH
1869: LD_VAR 0 8
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 482
1889: PUSH
1890: LD_INT 1
1892: EQUAL
1893: AND
1894: IFFALSE 1916
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_VAR 0 8
1905: PUSH
1906: LD_VAR 0 5
1910: ARRAY
1911: PPUSH
1912: CALL_OW 184
1916: GO 1841
1918: POP
1919: POP
// end ;
1920: LD_VAR 0 4
1924: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1933: LD_ADDR_VAR 0 8
1937: PUSH
1938: LD_VAR 0 2
1942: PPUSH
1943: CALL_OW 313
1947: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1948: LD_ADDR_VAR 0 9
1952: PUSH
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 24
1982: PUSH
1983: LD_INT 750
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3
1992: PUSH
1993: LD_INT 54
1995: PUSH
1996: EMPTY
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 70
2013: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2014: LD_ADDR_VAR 0 6
2018: PUSH
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_VAR 0 1
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 21
2038: PUSH
2039: LD_INT 3
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 1000
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2076: LD_VAR 0 6
2080: NOT
2081: PUSH
2082: LD_INT 22
2084: PUSH
2085: LD_VAR 0 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 25
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 24
2106: PUSH
2107: LD_INT 250
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: NOT
2124: AND
2125: IFFALSE 2129
// exit ;
2127: GO 2311
// if buildings_list > 0 and engineerOkInside then
2129: LD_VAR 0 6
2133: PUSH
2134: LD_INT 0
2136: GREATER
2137: PUSH
2138: LD_VAR 0 8
2142: AND
2143: IFFALSE 2154
// ComExitBuilding ( engineerOkInside ) ;
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 0
2161: GREATER
2162: PUSH
2163: LD_VAR 0 9
2167: PUSH
2168: LD_INT 0
2170: GREATER
2171: AND
2172: IFFALSE 2192
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2174: LD_VAR 0 9
2178: PPUSH
2179: LD_VAR 0 6
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2192: LD_VAR 0 6
2196: PUSH
2197: LD_INT 0
2199: EQUAL
2200: PUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: EQUAL
2209: AND
2210: PUSH
2211: LD_VAR 0 9
2215: PUSH
2216: LD_INT 0
2218: GREATER
2219: AND
2220: IFFALSE 2236
// ComEnterUnit ( engineerOkOutside , building ) ;
2222: LD_VAR 0 9
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2236: LD_VAR 0 9
2240: PUSH
2241: LD_INT 0
2243: GREATER
2244: PUSH
2245: LD_VAR 0 6
2249: PUSH
2250: LD_INT 0
2252: EQUAL
2253: AND
2254: PUSH
2255: LD_VAR 0 4
2259: PUSH
2260: LD_INT 0
2262: GREATER
2263: AND
2264: IFFALSE 2311
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2266: LD_VAR 0 9
2270: PPUSH
2271: LD_VAR 0 4
2275: PUSH
2276: LD_INT 1
2278: ARRAY
2279: PPUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 4
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 4
2302: PUSH
2303: LD_INT 4
2305: ARRAY
2306: PPUSH
2307: CALL_OW 145
// end ;
2311: LD_VAR 0 5
2315: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2327: LD_ADDR_VAR 0 6
2331: PUSH
2332: LD_INT 22
2334: PUSH
2335: LD_VAR 0 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 23
2356: PUSH
2357: LD_INT 2
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 251
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 69
2384: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2385: LD_ADDR_VAR 0 7
2389: PUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: LD_INT 22
2397: PUSH
2398: LD_VAR 0 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 23
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 25
2419: PUSH
2420: LD_INT 4
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 50
2429: PUSH
2430: EMPTY
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PPUSH
2439: CALL_OW 70
2443: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2444: LD_ADDR_VAR 0 10
2448: PUSH
2449: LD_VAR 0 3
2453: PPUSH
2454: LD_INT 22
2456: PUSH
2457: LD_VAR 0 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 21
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 25
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 3
2495: PUSH
2496: LD_INT 24
2498: PUSH
2499: LD_INT 750
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 70
2520: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2521: LD_ADDR_VAR 0 11
2525: PUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: LD_INT 22
2533: PUSH
2534: LD_VAR 0 1
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: LD_INT 24
2575: PUSH
2576: LD_INT 1000
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PPUSH
2593: CALL_OW 70
2597: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2598: LD_VAR 0 10
2602: NOT
2603: PUSH
2604: LD_VAR 0 11
2608: NOT
2609: AND
2610: PUSH
2611: LD_VAR 0 6
2615: NOT
2616: AND
2617: IFFALSE 2621
// exit ;
2619: GO 2855
// if damageUnits > 0 and sci_list > 0 then
2621: LD_VAR 0 10
2625: PUSH
2626: LD_INT 0
2628: GREATER
2629: PUSH
2630: LD_VAR 0 6
2634: PUSH
2635: LD_INT 0
2637: GREATER
2638: AND
2639: IFFALSE 2655
// ComMoveToArea ( damageUnits , healArea ) ;
2641: LD_VAR 0 10
2645: PPUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2655: LD_VAR 0 11
2659: PUSH
2660: LD_INT 0
2662: GREATER
2663: PUSH
2664: LD_VAR 0 6
2668: PUSH
2669: LD_INT 0
2671: GREATER
2672: AND
2673: IFFALSE 2684
// ComExitBuilding ( sci_list ) ;
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2684: LD_VAR 0 11
2688: PUSH
2689: LD_INT 0
2691: GREATER
2692: PUSH
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 0
2700: GREATER
2701: AND
2702: IFFALSE 2722
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2704: LD_VAR 0 7
2708: PPUSH
2709: LD_VAR 0 11
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2722: LD_VAR 0 10
2726: PUSH
2727: LD_INT 0
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 11
2735: PUSH
2736: LD_INT 0
2738: EQUAL
2739: AND
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_INT 0
2748: GREATER
2749: AND
2750: IFFALSE 2855
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2752: LD_ADDR_VAR 0 12
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_VAR 0 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 21
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 8
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2799: LD_ADDR_VAR 0 13
2803: PUSH
2804: LD_INT 1
2806: PPUSH
2807: LD_VAR 0 12
2811: PPUSH
2812: CALL_OW 12
2816: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2817: LD_VAR 0 7
2821: PPUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 60
2827: PUSH
2828: EMPTY
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: PPUSH
2840: LD_VAR 0 12
2844: PUSH
2845: LD_VAR 0 13
2849: ARRAY
2850: PPUSH
2851: CALL_OW 120
// end ; end ;
2855: LD_VAR 0 5
2859: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
2864: PPUSH
2865: PPUSH
// tmpTab = [ ] ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2873: LD_INT 22
2875: PUSH
2876: LD_VAR 0 1
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 0
2906: GREATER
2907: IFFALSE 2990
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_VAR 0 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 30
2928: PUSH
2929: LD_INT 32
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2988
// begin for j in UnitsInside ( i ) do
2948: LD_ADDR_VAR 0 5
2952: PUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 313
2962: PUSH
2963: FOR_IN
2964: IFFALSE 2984
// tmpTab = tmpTab ^ j ;
2966: LD_ADDR_VAR 0 6
2970: PUSH
2971: LD_VAR 0 6
2975: PUSH
2976: LD_VAR 0 5
2980: ADD
2981: ST_TO_ADDR
2982: GO 2963
2984: POP
2985: POP
// end ;
2986: GO 2945
2988: POP
2989: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2990: LD_VAR 0 6
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: CALL_OW 250
3004: PPUSH
3005: LD_VAR 0 2
3009: PPUSH
3010: CALL_OW 251
3014: PPUSH
3015: CALL_OW 114
// end ;
3019: LD_VAR 0 3
3023: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3024: LD_INT 0
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
// enable ;
3030: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3031: LD_ADDR_VAR 0 7
3035: PUSH
3036: LD_VAR 0 3
3040: PPUSH
3041: CALL_OW 435
3045: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3046: LD_ADDR_VAR 0 6
3050: PUSH
3051: LD_INT 22
3053: PUSH
3054: LD_VAR 0 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 34
3065: PUSH
3066: LD_VAR 0 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 69
3083: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3084: LD_VAR 0 6
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 3
3097: PPUSH
3098: CALL_OW 435
3102: AND
3103: PUSH
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 0
3111: GREATER
3112: AND
3113: IFFALSE 3162
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3115: LD_VAR 0 6
3119: PUSH
3120: LD_INT 1
3122: ARRAY
3123: PPUSH
3124: LD_VAR 0 7
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: PPUSH
3133: LD_VAR 0 7
3137: PUSH
3138: LD_INT 2
3140: ARRAY
3141: PPUSH
3142: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3146: LD_VAR 0 6
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: CALL_OW 240
// end ; end ;
3162: LD_VAR 0 4
3166: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
3173: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3174: LD_ADDR_VAR 0 6
3178: PUSH
3179: LD_INT 22
3181: PUSH
3182: LD_VAR 0 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 30
3196: PUSH
3197: LD_INT 31
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 30
3206: PUSH
3207: LD_INT 32
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 30
3216: PUSH
3217: LD_INT 33
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 5
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 69
3260: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_INT 22
3268: PUSH
3269: LD_VAR 0 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 21
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 58
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3304: LD_VAR 0 6
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: PUSH
3313: LD_VAR 0 7
3317: PUSH
3318: LD_INT 0
3320: GREATER
3321: AND
3322: IFFALSE 3392
// begin for i in turretsList do
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 6
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3390
// begin for j in enemyBuildings do
3337: LD_ADDR_VAR 0 5
3341: PUSH
3342: LD_VAR 0 7
3346: PUSH
3347: FOR_IN
3348: IFFALSE 3386
// begin if GetDistUnits ( i , j ) < 20 then
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: CALL_OW 296
3364: PUSH
3365: LD_INT 20
3367: LESS
3368: IFFALSE 3384
// begin ComAttackUnit ( i , j ) ;
3370: LD_VAR 0 4
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 115
// end ; end ;
3384: GO 3347
3386: POP
3387: POP
// end ;
3388: GO 3334
3390: POP
3391: POP
// end ; end ;
3392: LD_VAR 0 3
3396: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
// for i = 1 to vehCount do
3401: LD_ADDR_VAR 0 9
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 3
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3464
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_VAR 0 5
3433: PPUSH
3434: LD_VAR 0 6
3438: PPUSH
3439: LD_VAR 0 4
3443: PUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_VAR 0 4
3451: PPUSH
3452: CALL_OW 12
3456: ARRAY
3457: PPUSH
3458: CALL_OW 185
3462: GO 3416
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 8
3470: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3479: LD_EXP 11
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: GREATEREQUAL
3504: PUSH
3505: LD_EXP 12
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PUSH
3524: LD_OWVAR 67
3528: ARRAY
3529: GREATEREQUAL
3530: AND
3531: IFFALSE 3764
// begin repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// for j in russianTanks do
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_EXP 11
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3752
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3553: LD_ADDR_VAR 0 6
3557: PUSH
3558: LD_INT 81
3560: PUSH
3561: LD_VAR 0 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 101
3572: PUSH
3573: LD_INT 1
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PPUSH
3584: CALL_OW 69
3588: PPUSH
3589: LD_VAR 0 4
3593: PPUSH
3594: CALL_OW 74
3598: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3599: LD_ADDR_VAR 0 7
3603: PUSH
3604: LD_INT 81
3606: PUSH
3607: LD_VAR 0 1
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 101
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 59
3631: PUSH
3632: EMPTY
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 1
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 21
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: PPUSH
3669: CALL_OW 69
3673: PPUSH
3674: LD_VAR 0 4
3678: PPUSH
3679: CALL_OW 74
3683: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3684: LD_VAR 0 4
3688: PPUSH
3689: LD_VAR 0 6
3693: PPUSH
3694: CALL_OW 296
3698: PUSH
3699: LD_INT 8
3701: PLUS
3702: PUSH
3703: LD_VAR 0 4
3707: PPUSH
3708: LD_VAR 0 7
3712: PPUSH
3713: CALL_OW 296
3717: LESS
3718: IFFALSE 3736
// ComAttackUnit ( j , target1 ) else
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: CALL_OW 115
3734: GO 3750
// ComAttackUnit ( j , target2 ) ;
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 7
3745: PPUSH
3746: CALL_OW 115
// end ;
3750: GO 3550
3752: POP
3753: POP
// until russianTanks = 0 ;
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 0
3761: EQUAL
3762: IFFALSE 3533
// end ; end ;
3764: LD_VAR 0 2
3768: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
3775: PPUSH
3776: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_INT 22
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 9
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PPUSH
3808: CALL_OW 69
3812: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: LD_INT 81
3820: PUSH
3821: LD_VAR 0 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 69
3855: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 3
3866: PPUSH
3867: CALL_OW 12
3871: ST_TO_ADDR
// for i = 1 to list do
3872: LD_ADDR_VAR 0 5
3876: PUSH
3877: DOUBLE
3878: LD_INT 1
3880: DEC
3881: ST_TO_ADDR
3882: LD_VAR 0 6
3886: PUSH
3887: FOR_TO
3888: IFFALSE 4090
// for ta in filter do
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: LD_VAR 0 7
3899: PUSH
3900: FOR_IN
3901: IFFALSE 4086
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3903: LD_VAR 0 6
3907: PUSH
3908: LD_VAR 0 5
3912: ARRAY
3913: PPUSH
3914: LD_VAR 0 3
3918: PPUSH
3919: CALL_OW 296
3923: PUSH
3924: LD_INT 15
3926: LESSEQUAL
3927: IFFALSE 4084
// begin case c of 1 :
3929: LD_VAR 0 4
3933: PUSH
3934: LD_INT 1
3936: DOUBLE
3937: EQUAL
3938: IFTRUE 3942
3940: GO 3980
3942: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3943: LD_VAR 0 6
3947: PUSH
3948: LD_VAR 0 5
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PPUSH
3959: CALL_OW 250
3963: PPUSH
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 251
3973: PPUSH
3974: CALL_OW 154
3978: GO 4084
3980: LD_INT 2
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4052
3988: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3989: LD_VAR 0 6
3993: PUSH
3994: LD_VAR 0 5
3998: ARRAY
3999: PPUSH
4000: LD_VAR 0 3
4004: PPUSH
4005: CALL_OW 250
4009: PUSH
4010: LD_INT 1
4012: NEG
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: CALL_OW 12
4021: PLUS
4022: PPUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: CALL_OW 251
4032: PUSH
4033: LD_INT 1
4035: NEG
4036: PPUSH
4037: LD_INT 1
4039: PPUSH
4040: CALL_OW 12
4044: PLUS
4045: PPUSH
4046: CALL_OW 153
4050: GO 4084
4052: LD_INT 3
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4083
4060: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4061: LD_VAR 0 6
4065: PUSH
4066: LD_VAR 0 5
4070: ARRAY
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 115
4081: GO 4084
4083: POP
// end ; end ;
4084: GO 3900
4086: POP
4087: POP
4088: GO 3887
4090: POP
4091: POP
// end ;
4092: LD_VAR 0 2
4096: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4097: LD_INT 0
4099: PPUSH
4100: PPUSH
4101: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4102: LD_EXP 11
4106: PUSH
4107: LD_INT 1
4109: GREATEREQUAL
4110: PUSH
4111: LD_EXP 12
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 2
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: PUSH
4130: LD_OWVAR 67
4134: ARRAY
4135: GREATEREQUAL
4136: AND
4137: IFFALSE 4276
// repeat wait ( 0 0$3 ) ;
4139: LD_INT 105
4141: PPUSH
4142: CALL_OW 67
// if russianTimeLapsers > 0 then
4146: LD_EXP 12
4150: PUSH
4151: LD_INT 0
4153: GREATER
4154: IFFALSE 4266
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4156: LD_ADDR_VAR 0 3
4160: PUSH
4161: LD_EXP 12
4165: PPUSH
4166: LD_INT 3
4168: PUSH
4169: LD_INT 60
4171: PUSH
4172: EMPTY
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 72
4183: PUSH
4184: FOR_IN
4185: IFFALSE 4264
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4187: LD_ADDR_VAR 0 4
4191: PUSH
4192: LD_INT 81
4194: PUSH
4195: LD_VAR 0 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 101
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 69
4222: PPUSH
4223: LD_VAR 0 3
4227: PPUSH
4228: CALL_OW 74
4232: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_VAR 0 4
4242: PPUSH
4243: CALL_OW 250
4247: PPUSH
4248: LD_VAR 0 4
4252: PPUSH
4253: CALL_OW 251
4257: PPUSH
4258: CALL_OW 111
// end ;
4262: GO 4184
4264: POP
4265: POP
// until russianTimeLapsers = 0 ;
4266: LD_EXP 12
4270: PUSH
4271: LD_INT 0
4273: EQUAL
4274: IFFALSE 4139
// end ; end_of_file
4276: LD_VAR 0 2
4280: RET
// every 0 0$1 do
4281: GO 4283
4283: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4284: LD_INT 3
4286: PPUSH
4287: LD_INT 14
4289: PPUSH
4290: LD_INT 3
4292: PPUSH
4293: CALL 1684 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 15
4302: PPUSH
4303: LD_INT 3
4305: PPUSH
4306: CALL 1684 0 3
// end ;
4310: END
// every 0 0$1 trigger russianAI = 1 do
4311: LD_EXP 13
4315: PUSH
4316: LD_INT 1
4318: EQUAL
4319: IFFALSE 4422
4321: GO 4323
4323: DISABLE
// begin enable ;
4324: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4325: LD_INT 3
4327: PPUSH
4328: LD_INT 22
4330: PPUSH
4331: LD_INT 7
4333: PPUSH
4334: LD_EXP 10
4338: PPUSH
4339: CALL 1925 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4343: LD_INT 3
4345: PPUSH
4346: LD_INT 8
4348: PPUSH
4349: LD_INT 7
4351: PPUSH
4352: LD_INT 14
4354: PUSH
4355: LD_INT 15
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 1
4364: PPUSH
4365: LD_INT 2
4367: PPUSH
4368: CALL_OW 12
4372: ARRAY
4373: PPUSH
4374: CALL 2316 0 4
// AttackVehicles ( 3 ) ;
4378: LD_INT 3
4380: PPUSH
4381: CALL 3471 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: CALL 3167 0 2
// TimeLapsersAI ( 3 ) ;
4395: LD_INT 3
4397: PPUSH
4398: CALL 4097 0 1
// IntBazooka ( 3 ) ;
4402: LD_INT 3
4404: PPUSH
4405: CALL 3769 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4409: LD_INT 3
4411: PPUSH
4412: LD_INT 51
4414: PPUSH
4415: LD_INT 14
4417: PPUSH
4418: CALL 3024 0 3
// end ;
4422: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4423: LD_INT 22
4425: PPUSH
4426: CALL_OW 303
4430: PUSH
4431: LD_INT 22
4433: PPUSH
4434: CALL_OW 255
4438: PUSH
4439: LD_INT 1
4441: EQUAL
4442: OR
4443: IFFALSE 4458
4445: GO 4447
4447: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4448: LD_INT 3
4450: PPUSH
4451: LD_INT 22
4453: PPUSH
4454: CALL 2860 0 2
4458: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4459: LD_EXP 13
4463: PUSH
4464: LD_INT 1
4466: EQUAL
4467: PUSH
4468: LD_INT 22
4470: PUSH
4471: LD_INT 3
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 21
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 50
4490: PUSH
4491: EMPTY
4492: LIST
4493: PUSH
4494: LD_INT 33
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 2
4506: PUSH
4507: LD_INT 34
4509: PUSH
4510: LD_INT 46
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 34
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 34
4529: PUSH
4530: LD_INT 44
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 34
4539: PUSH
4540: LD_INT 49
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 34
4549: PUSH
4550: LD_INT 47
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: PPUSH
4572: CALL_OW 69
4576: PUSH
4577: LD_INT 0
4579: EQUAL
4580: AND
4581: IFFALSE 4768
4583: GO 4585
4585: DISABLE
// begin enable ;
4586: ENABLE
// if russianRocketsAvalaible = 1 then
4587: LD_EXP 14
4591: PUSH
4592: LD_INT 1
4594: EQUAL
4595: IFFALSE 4652
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4597: LD_INT 3
4599: PPUSH
4600: LD_INT 1
4602: PPUSH
4603: LD_INT 3
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: LD_INT 4
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_OWVAR 67
4621: ARRAY
4622: PPUSH
4623: LD_INT 46
4625: PUSH
4626: LD_INT 45
4628: PUSH
4629: LD_INT 44
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: LD_INT 3
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: LD_INT 24
4645: PPUSH
4646: CALL 3397 0 7
4650: GO 4709
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4652: LD_INT 3
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 4
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: LD_OWVAR 67
4676: ARRAY
4677: PPUSH
4678: LD_INT 46
4680: PUSH
4681: LD_INT 45
4683: PUSH
4684: LD_INT 44
4686: PUSH
4687: LD_INT 47
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PPUSH
4696: LD_INT 3
4698: PPUSH
4699: LD_INT 3
4701: PPUSH
4702: LD_INT 24
4704: PPUSH
4705: CALL 3397 0 7
// if russianTimeLapsers = 0 then
4709: LD_EXP 12
4713: PUSH
4714: LD_INT 0
4716: EQUAL
4717: IFFALSE 4768
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 40
4724: PPUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: LD_INT 49
4747: PUSH
4748: LD_INT 49
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: LD_INT 3
4760: PPUSH
4761: LD_INT 24
4763: PPUSH
4764: CALL 3397 0 7
// end ; end_of_file
4768: END
// every 1 do var dec1 , dec2 ;
4769: GO 4771
4771: DISABLE
4772: LD_INT 0
4774: PPUSH
4775: PPUSH
// begin InGameOn ;
4776: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
4780: LD_INT 48
4782: PPUSH
4783: LD_STRING kappa
4785: PPUSH
4786: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4790: LD_INT 95
4792: PPUSH
4793: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4797: LD_INT 95
4799: PPUSH
4800: LD_INT 30
4802: PPUSH
4803: LD_INT 11
4805: PPUSH
4806: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4810: LD_INT 30
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4820: LD_EXP 5
4824: PPUSH
4825: LD_STRING D1-Pow-1
4827: PPUSH
4828: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4832: LD_EXP 1
4836: PPUSH
4837: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4841: LD_EXP 1
4845: PPUSH
4846: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4850: LD_EXP 1
4854: PPUSH
4855: LD_STRING D1-JMM-1
4857: PPUSH
4858: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4862: LD_EXP 5
4866: PPUSH
4867: LD_STRING D1-Pow-2
4869: PPUSH
4870: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4874: LD_EXP 1
4878: PPUSH
4879: LD_STRING D1-JMM-2
4881: PPUSH
4882: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4886: LD_EXP 1
4890: PPUSH
4891: LD_INT 95
4893: PPUSH
4894: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4898: LD_STRING M1
4900: PPUSH
4901: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4905: LD_INT 35
4907: PPUSH
4908: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4912: LD_EXP 1
4916: PPUSH
4917: LD_INT 95
4919: PPUSH
4920: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4924: LD_INT 95
4926: PPUSH
4927: LD_INT 51
4929: PPUSH
4930: LD_INT 21
4932: PPUSH
4933: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4937: LD_INT 95
4939: PPUSH
4940: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4944: LD_INT 95
4946: PPUSH
4947: LD_INT 5
4949: PPUSH
4950: CALL_OW 308
4954: IFFALSE 4905
// if JMMGirl = 1 then
4956: LD_EXP 7
4960: PUSH
4961: LD_INT 1
4963: EQUAL
4964: IFFALSE 5265
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4966: LD_EXP 2
4970: PPUSH
4971: LD_STRING D2J-Joan-1
4973: PPUSH
4974: CALL_OW 94
// dec1 = Query1 ;
4978: LD_ADDR_VAR 0 1
4982: PUSH
4983: CALL 1283 0 0
4987: ST_TO_ADDR
// if dec1 = 1 then
4988: LD_VAR 0 1
4992: PUSH
4993: LD_INT 1
4995: EQUAL
4996: IFFALSE 5243
// begin ComExitVehicle ( JMM ) ;
4998: LD_EXP 1
5002: PPUSH
5003: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5007: LD_EXP 1
5011: PPUSH
5012: LD_STRING D2J-JMM-1
5014: PPUSH
5015: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5019: LD_EXP 2
5023: PPUSH
5024: LD_STRING D2J-Joan-2
5026: PPUSH
5027: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5031: LD_EXP 1
5035: PPUSH
5036: LD_STRING D2J-JMM-2
5038: PPUSH
5039: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5043: LD_EXP 2
5047: PPUSH
5048: LD_STRING D2J-Joan-3
5050: PPUSH
5051: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5055: LD_EXP 5
5059: PPUSH
5060: LD_STRING DPowell-Pow-1
5062: PPUSH
5063: CALL_OW 94
// dec2 = Query2 ;
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: CALL 1338 0 0
5076: ST_TO_ADDR
// if dec2 = 1 then
5077: LD_VAR 0 2
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: IFFALSE 5127
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5087: LD_EXP 1
5091: PPUSH
5092: LD_STRING D2Ja-JMM-1
5094: PPUSH
5095: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5099: LD_EXP 2
5103: PPUSH
5104: LD_STRING D2Ja-Joan-1
5106: PPUSH
5107: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5111: LD_EXP 1
5115: PPUSH
5116: LD_STRING D2Ja-JMM-2
5118: PPUSH
5119: CALL_OW 88
// InGameOff ;
5123: CALL_OW 9
// end ; if dec2 = 2 then
5127: LD_VAR 0 2
5131: PUSH
5132: LD_INT 2
5134: EQUAL
5135: IFFALSE 5209
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5137: LD_EXP 1
5141: PPUSH
5142: LD_STRING D2Jb-JMM-1
5144: PPUSH
5145: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5149: LD_EXP 2
5153: PPUSH
5154: LD_STRING D2Jb-Joan-1
5156: PPUSH
5157: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5161: LD_EXP 1
5165: PPUSH
5166: LD_STRING D2Jb-JMM-2
5168: PPUSH
5169: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5173: LD_EXP 2
5177: PPUSH
5178: LD_STRING D2Jb-Joan-2
5180: PPUSH
5181: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5185: LD_EXP 1
5189: PPUSH
5190: LD_STRING D2Jb-JMM-3
5192: PPUSH
5193: CALL_OW 88
// fastEnd = 1 ;
5197: LD_ADDR_EXP 15
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// FinishMission ;
5205: CALL 9184 0 0
// end ; if dec2 = 3 then
5209: LD_VAR 0 2
5213: PUSH
5214: LD_INT 3
5216: EQUAL
5217: IFFALSE 5243
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5219: LD_EXP 2
5223: PPUSH
5224: LD_STRING D2Jc-Joan-1
5226: PPUSH
5227: CALL_OW 94
// fastEnd = 1 ;
5231: LD_ADDR_EXP 15
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// FinishMission ;
5239: CALL 9184 0 0
// end ; end ; if dec1 = 2 then
5243: LD_VAR 0 1
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: IFFALSE 5265
// begin fastEnd = 1 ;
5253: LD_ADDR_EXP 15
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// FinishMission ;
5261: CALL 9184 0 0
// end ; end ; if JMMGirl = 2 then
5265: LD_EXP 7
5269: PUSH
5270: LD_INT 2
5272: EQUAL
5273: IFFALSE 5586
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5275: LD_EXP 3
5279: PPUSH
5280: LD_STRING D2L-Lisa-1
5282: PPUSH
5283: CALL_OW 94
// dec1 = Query1 ;
5287: LD_ADDR_VAR 0 1
5291: PUSH
5292: CALL 1283 0 0
5296: ST_TO_ADDR
// if dec1 = 1 then
5297: LD_VAR 0 1
5301: PUSH
5302: LD_INT 1
5304: EQUAL
5305: IFFALSE 5564
// begin ComExitVehicle ( JMM ) ;
5307: LD_EXP 1
5311: PPUSH
5312: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5316: LD_EXP 1
5320: PPUSH
5321: LD_STRING D2L-JMM-1
5323: PPUSH
5324: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5328: LD_EXP 3
5332: PPUSH
5333: LD_STRING D2L-Lisa-2
5335: PPUSH
5336: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5340: LD_EXP 1
5344: PPUSH
5345: LD_STRING D2L-JMM-2
5347: PPUSH
5348: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5352: LD_EXP 3
5356: PPUSH
5357: LD_STRING D2L-Lisa-3
5359: PPUSH
5360: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5364: LD_EXP 5
5368: PPUSH
5369: LD_STRING DPowell-Pow-1
5371: PPUSH
5372: CALL_OW 94
// dec2 = Query2 ;
5376: LD_ADDR_VAR 0 2
5380: PUSH
5381: CALL 1338 0 0
5385: ST_TO_ADDR
// if dec2 = 1 then
5386: LD_VAR 0 2
5390: PUSH
5391: LD_INT 1
5393: EQUAL
5394: IFFALSE 5460
// begin Say ( JMM , D2La-JMM-1 ) ;
5396: LD_EXP 1
5400: PPUSH
5401: LD_STRING D2La-JMM-1
5403: PPUSH
5404: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5408: LD_EXP 3
5412: PPUSH
5413: LD_STRING D2La-Lisa-1
5415: PPUSH
5416: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5420: LD_EXP 1
5424: PPUSH
5425: LD_STRING D2La-JMM-2
5427: PPUSH
5428: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5432: LD_EXP 3
5436: PPUSH
5437: LD_STRING D2La-Lisa-2
5439: PPUSH
5440: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5444: LD_EXP 1
5448: PPUSH
5449: LD_STRING D2La-JMM-3
5451: PPUSH
5452: CALL_OW 88
// InGameOff ;
5456: CALL_OW 9
// end ; if dec2 = 2 then
5460: LD_VAR 0 2
5464: PUSH
5465: LD_INT 2
5467: EQUAL
5468: IFFALSE 5530
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5470: LD_EXP 1
5474: PPUSH
5475: LD_STRING D2Lb-JMM-1
5477: PPUSH
5478: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5482: LD_EXP 3
5486: PPUSH
5487: LD_STRING D2Lb-Lisa-1
5489: PPUSH
5490: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5494: LD_EXP 1
5498: PPUSH
5499: LD_STRING D2Lb-JMM-2
5501: PPUSH
5502: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5506: LD_EXP 3
5510: PPUSH
5511: LD_STRING D2Lb-Lisa-2
5513: PPUSH
5514: CALL_OW 94
// fastEnd = 1 ;
5518: LD_ADDR_EXP 15
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// FinishMission ;
5526: CALL 9184 0 0
// end ; if dec2 = 3 then
5530: LD_VAR 0 2
5534: PUSH
5535: LD_INT 3
5537: EQUAL
5538: IFFALSE 5564
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5540: LD_EXP 3
5544: PPUSH
5545: LD_STRING D2Lc-Lisa-1
5547: PPUSH
5548: CALL_OW 94
// fastEnd = 1 ;
5552: LD_ADDR_EXP 15
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// FinishMission ;
5560: CALL 9184 0 0
// end ; end ; if dec1 = 2 then
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 2
5571: EQUAL
5572: IFFALSE 5586
// begin fastEnd = 1 ;
5574: LD_ADDR_EXP 15
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// FinishMission ;
5582: CALL 9184 0 0
// end ; end ; if JMMGirl = 3 then
5586: LD_EXP 7
5590: PUSH
5591: LD_INT 3
5593: EQUAL
5594: IFFALSE 5811
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5596: LD_EXP 4
5600: PPUSH
5601: LD_STRING D2X-Con-1
5603: PPUSH
5604: CALL_OW 94
// dec1 = Query1 ;
5608: LD_ADDR_VAR 0 1
5612: PUSH
5613: CALL 1283 0 0
5617: ST_TO_ADDR
// if dec1 = 1 then
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 1
5625: EQUAL
5626: IFFALSE 5789
// begin ComExitVehicle ( JMM ) ;
5628: LD_EXP 1
5632: PPUSH
5633: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5637: LD_EXP 1
5641: PPUSH
5642: LD_STRING D2X-JMM-1
5644: PPUSH
5645: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5649: LD_EXP 4
5653: PPUSH
5654: LD_STRING D2X-Con-2
5656: PPUSH
5657: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5661: LD_EXP 5
5665: PPUSH
5666: LD_STRING DPowell-Pow-1
5668: PPUSH
5669: CALL_OW 94
// dec2 = Query2 ;
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: CALL 1338 0 0
5682: ST_TO_ADDR
// if dec2 = 1 then
5683: LD_VAR 0 2
5687: PUSH
5688: LD_INT 1
5690: EQUAL
5691: IFFALSE 5709
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5693: LD_EXP 1
5697: PPUSH
5698: LD_STRING D2Xa-JMM-1
5700: PPUSH
5701: CALL_OW 88
// InGameOff ;
5705: CALL_OW 9
// end ; if dec2 = 2 then
5709: LD_VAR 0 2
5713: PUSH
5714: LD_INT 2
5716: EQUAL
5717: IFFALSE 5755
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5719: LD_EXP 1
5723: PPUSH
5724: LD_STRING D2Xb-JMM-1
5726: PPUSH
5727: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5731: LD_EXP 4
5735: PPUSH
5736: LD_STRING D2Xb-Con-1
5738: PPUSH
5739: CALL_OW 94
// fastEnd = 1 ;
5743: LD_ADDR_EXP 15
5747: PUSH
5748: LD_INT 1
5750: ST_TO_ADDR
// FinishMission ;
5751: CALL 9184 0 0
// end ; if dec2 = 3 then
5755: LD_VAR 0 2
5759: PUSH
5760: LD_INT 3
5762: EQUAL
5763: IFFALSE 5789
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5765: LD_EXP 4
5769: PPUSH
5770: LD_STRING D2Xc-Con-1
5772: PPUSH
5773: CALL_OW 94
// fastEnd = 1 ;
5777: LD_ADDR_EXP 15
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// FinishMission ;
5785: CALL 9184 0 0
// end ; end ; if dec1 = 2 then
5789: LD_VAR 0 1
5793: PUSH
5794: LD_INT 2
5796: EQUAL
5797: IFFALSE 5811
// begin fastEnd = 1 ;
5799: LD_ADDR_EXP 15
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// FinishMission ;
5807: CALL 9184 0 0
// end ; end ; end ;
5811: PPOPN 2
5813: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5814: LD_EXP 1
5818: PPUSH
5819: LD_INT 6
5821: PPUSH
5822: CALL_OW 308
5826: IFFALSE 6592
5828: GO 5830
5830: DISABLE
// begin InGameOn ;
5831: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5835: LD_INT 35
5837: PPUSH
5838: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5842: LD_EXP 1
5846: PPUSH
5847: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 62
5858: PPUSH
5859: LD_INT 104
5861: PPUSH
5862: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_EXP 2
5875: PPUSH
5876: CALL_OW 296
5880: PUSH
5881: LD_INT 4
5883: LESS
5884: PUSH
5885: LD_EXP 1
5889: PPUSH
5890: LD_EXP 3
5894: PPUSH
5895: CALL_OW 296
5899: PUSH
5900: LD_INT 4
5902: LESS
5903: OR
5904: PUSH
5905: LD_EXP 1
5909: PPUSH
5910: LD_EXP 4
5914: PPUSH
5915: CALL_OW 296
5919: PUSH
5920: LD_INT 4
5922: LESS
5923: OR
5924: IFFALSE 5835
// case JMMGirl of 1 :
5926: LD_EXP 7
5930: PUSH
5931: LD_INT 1
5933: DOUBLE
5934: EQUAL
5935: IFTRUE 5939
5937: GO 6151
5939: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5940: LD_INT 22
5942: PUSH
5943: LD_INT 4
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 69
5954: PPUSH
5955: LD_INT 1
5957: PPUSH
5958: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
5962: LD_EXP 2
5966: PPUSH
5967: LD_EXP 1
5971: PPUSH
5972: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
5976: LD_EXP 1
5980: PPUSH
5981: LD_EXP 2
5985: PPUSH
5986: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
5990: LD_EXP 2
5994: PUSH
5995: LD_EXP 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 87
// wait ( 0 0$1 ) ;
6008: LD_INT 35
6010: PPUSH
6011: CALL_OW 67
// DialogueOn ;
6015: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6019: LD_EXP 2
6023: PPUSH
6024: LD_STRING D3J-Joan-1
6026: PPUSH
6027: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6031: LD_EXP 1
6035: PPUSH
6036: LD_STRING D3J-JMM-1
6038: PPUSH
6039: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6043: LD_EXP 2
6047: PPUSH
6048: LD_STRING D3J-Joan-2
6050: PPUSH
6051: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D3J-JMM-2
6062: PPUSH
6063: CALL_OW 88
// wait ( 0 0$1 ) ;
6067: LD_INT 35
6069: PPUSH
6070: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6074: LD_EXP 1
6078: PPUSH
6079: LD_STRING D4-JMM-1
6081: PPUSH
6082: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6086: LD_EXP 2
6090: PPUSH
6091: LD_STRING D4-Joan-1
6093: PPUSH
6094: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D4-JMM-2
6105: PPUSH
6106: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6110: LD_EXP 2
6114: PPUSH
6115: LD_STRING D4-Joan-2
6117: PPUSH
6118: CALL_OW 88
// DialogueOff ;
6122: CALL_OW 7
// InGameOff ;
6126: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6130: LD_STRING M2J
6132: PPUSH
6133: CALL_OW 337
// SaveForQuickRestart ;
6137: CALL_OW 22
// russianAI = 1 ;
6141: LD_ADDR_EXP 13
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// end ; 2 :
6149: GO 6592
6151: LD_INT 2
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6371
6159: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6160: LD_INT 22
6162: PUSH
6163: LD_INT 4
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PPUSH
6170: CALL_OW 69
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6182: LD_EXP 3
6186: PPUSH
6187: LD_EXP 1
6191: PPUSH
6192: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6196: LD_EXP 1
6200: PPUSH
6201: LD_EXP 3
6205: PPUSH
6206: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6210: LD_EXP 3
6214: PUSH
6215: LD_EXP 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 87
// wait ( 0 0$1 ) ;
6228: LD_INT 35
6230: PPUSH
6231: CALL_OW 67
// DialogueOn ;
6235: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6239: LD_EXP 3
6243: PPUSH
6244: LD_STRING D3L-Lisa-1
6246: PPUSH
6247: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6251: LD_EXP 1
6255: PPUSH
6256: LD_STRING D3L-JMM-1
6258: PPUSH
6259: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6263: LD_EXP 3
6267: PPUSH
6268: LD_STRING D3L-Lisa-2
6270: PPUSH
6271: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D3L-JMM-2
6282: PPUSH
6283: CALL_OW 88
// wait ( 0 0$1 ) ;
6287: LD_INT 35
6289: PPUSH
6290: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6294: LD_EXP 1
6298: PPUSH
6299: LD_STRING D4-JMM-1
6301: PPUSH
6302: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6306: LD_EXP 3
6310: PPUSH
6311: LD_STRING D4-Lisa-1
6313: PPUSH
6314: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6318: LD_EXP 1
6322: PPUSH
6323: LD_STRING D4-JMM-1
6325: PPUSH
6326: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6330: LD_EXP 3
6334: PPUSH
6335: LD_STRING D4-Lisa-2
6337: PPUSH
6338: CALL_OW 88
// DialogueOff ;
6342: CALL_OW 7
// InGameOff ;
6346: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6350: LD_STRING M2L
6352: PPUSH
6353: CALL_OW 337
// SaveForQuickRestart ;
6357: CALL_OW 22
// russianAI = 1 ;
6361: LD_ADDR_EXP 13
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// end ; 3 :
6369: GO 6592
6371: LD_INT 3
6373: DOUBLE
6374: EQUAL
6375: IFTRUE 6379
6377: GO 6591
6379: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6380: LD_INT 22
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 69
6394: PPUSH
6395: LD_INT 1
6397: PPUSH
6398: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6402: LD_EXP 4
6406: PPUSH
6407: LD_EXP 1
6411: PPUSH
6412: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6416: LD_EXP 1
6420: PPUSH
6421: LD_EXP 4
6425: PPUSH
6426: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6430: LD_EXP 2
6434: PUSH
6435: LD_EXP 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 87
// wait ( 0 0$1 ) ;
6448: LD_INT 35
6450: PPUSH
6451: CALL_OW 67
// DialogueOn ;
6455: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6459: LD_EXP 4
6463: PPUSH
6464: LD_STRING D3X-Con-1
6466: PPUSH
6467: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6471: LD_EXP 1
6475: PPUSH
6476: LD_STRING D3J-JMM-1
6478: PPUSH
6479: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6483: LD_EXP 4
6487: PPUSH
6488: LD_STRING D3J-Joan-2
6490: PPUSH
6491: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6495: LD_EXP 1
6499: PPUSH
6500: LD_STRING D3J-JMM-2
6502: PPUSH
6503: CALL_OW 88
// wait ( 0 0$1 ) ;
6507: LD_INT 35
6509: PPUSH
6510: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6514: LD_EXP 1
6518: PPUSH
6519: LD_STRING D4-JMM-1
6521: PPUSH
6522: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6526: LD_EXP 4
6530: PPUSH
6531: LD_STRING D4-Con-1
6533: PPUSH
6534: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6538: LD_EXP 1
6542: PPUSH
6543: LD_STRING D4-JMM-2
6545: PPUSH
6546: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6550: LD_EXP 4
6554: PPUSH
6555: LD_STRING D4-Con-2
6557: PPUSH
6558: CALL_OW 88
// DialogueOff ;
6562: CALL_OW 7
// InGameOff ;
6566: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6570: LD_STRING M2X
6572: PPUSH
6573: CALL_OW 337
// SaveForQuickRestart ;
6577: CALL_OW 22
// russianAI = 1 ;
6581: LD_ADDR_EXP 13
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// end ; end ;
6589: GO 6592
6591: POP
// end ;
6592: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6593: LD_INT 32
6595: PPUSH
6596: CALL_OW 306
6600: IFFALSE 6933
6602: GO 6604
6604: DISABLE
// begin case JMMGirl of 1 :
6605: LD_EXP 7
6609: PUSH
6610: LD_INT 1
6612: DOUBLE
6613: EQUAL
6614: IFTRUE 6618
6616: GO 6740
6618: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6619: LD_EXP 1
6623: PPUSH
6624: LD_STRING D6J-JMM-1
6626: PPUSH
6627: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6631: LD_STRING 13f_Denis
6633: PPUSH
6634: CALL_OW 28
6638: PUSH
6639: LD_INT 1
6641: EQUAL
6642: PUSH
6643: LD_STRING 13s_Denis
6645: PPUSH
6646: CALL_OW 28
6650: PUSH
6651: LD_INT 1
6653: EQUAL
6654: OR
6655: IFFALSE 6695
// begin Say ( Joan , D6J-Joan-1 ) ;
6657: LD_EXP 2
6661: PPUSH
6662: LD_STRING D6J-Joan-1
6664: PPUSH
6665: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6669: LD_EXP 1
6673: PPUSH
6674: LD_STRING D6J-JMM-2
6676: PPUSH
6677: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6681: LD_EXP 2
6685: PPUSH
6686: LD_STRING D6J-Joan-2
6688: PPUSH
6689: CALL_OW 88
// end else
6693: GO 6707
// begin Say ( Joan , D6J-Joan-2a ) ;
6695: LD_EXP 2
6699: PPUSH
6700: LD_STRING D6J-Joan-2a
6702: PPUSH
6703: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6707: LD_EXP 1
6711: PPUSH
6712: LD_STRING D6J-JMM-3
6714: PPUSH
6715: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6719: LD_EXP 2
6723: PPUSH
6724: LD_STRING D6J-Joan-3
6726: PPUSH
6727: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6731: LD_STRING M3
6733: PPUSH
6734: CALL_OW 337
// end ; 2 :
6738: GO 6933
6740: LD_INT 2
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6806
6748: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6749: LD_EXP 1
6753: PPUSH
6754: LD_STRING D6L-JMM-1
6756: PPUSH
6757: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6761: LD_EXP 3
6765: PPUSH
6766: LD_STRING D6L-Lisa-1
6768: PPUSH
6769: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6773: LD_EXP 1
6777: PPUSH
6778: LD_STRING D6L-JMM-2
6780: PPUSH
6781: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6785: LD_EXP 3
6789: PPUSH
6790: LD_STRING D6L-Lisa-2
6792: PPUSH
6793: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6797: LD_STRING M3
6799: PPUSH
6800: CALL_OW 337
// end ; 3 :
6804: GO 6933
6806: LD_INT 3
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6932
6814: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6815: LD_EXP 1
6819: PPUSH
6820: LD_STRING D6X-JMM-1
6822: PPUSH
6823: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6827: LD_EXP 4
6831: PPUSH
6832: LD_STRING D6X-Con-1
6834: PPUSH
6835: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6839: LD_EXP 1
6843: PPUSH
6844: LD_STRING D6X-JMM-2
6846: PPUSH
6847: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6851: LD_EXP 4
6855: PPUSH
6856: LD_STRING D6X-Con-2
6858: PPUSH
6859: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6863: LD_EXP 1
6867: PPUSH
6868: LD_STRING D6X-JMM-3
6870: PPUSH
6871: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6875: LD_EXP 4
6879: PPUSH
6880: LD_STRING D6X-Con-3
6882: PPUSH
6883: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6887: LD_EXP 1
6891: PPUSH
6892: LD_STRING D6X-JMM-4
6894: PPUSH
6895: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6899: LD_EXP 4
6903: PPUSH
6904: LD_STRING D6X-Con-4
6906: PPUSH
6907: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6911: LD_EXP 1
6915: PPUSH
6916: LD_STRING D6X-JMM-5
6918: PPUSH
6919: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6923: LD_STRING M3
6925: PPUSH
6926: CALL_OW 337
// end ; end ;
6930: GO 6933
6932: POP
// end ;
6933: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6934: LD_INT 22
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 33
6946: PUSH
6947: LD_INT 2
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 69
6962: PPUSH
6963: CALL_OW 306
6967: IFFALSE 7113
6969: GO 6971
6971: DISABLE
// begin case JMMGirl of 1 :
6972: LD_EXP 7
6976: PUSH
6977: LD_INT 1
6979: DOUBLE
6980: EQUAL
6981: IFTRUE 6985
6983: GO 7022
6985: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6986: LD_EXP 1
6990: PPUSH
6991: LD_STRING D5-JMM-1
6993: PPUSH
6994: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6998: LD_INT 77
7000: PPUSH
7001: LD_INT 87
7003: PPUSH
7004: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7008: LD_EXP 2
7012: PPUSH
7013: LD_STRING D5-Joan-1
7015: PPUSH
7016: CALL_OW 88
// end ; 2 :
7020: GO 7113
7022: LD_INT 2
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7067
7030: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7031: LD_EXP 1
7035: PPUSH
7036: LD_STRING D5-JMM-1
7038: PPUSH
7039: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7043: LD_INT 77
7045: PPUSH
7046: LD_INT 87
7048: PPUSH
7049: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7053: LD_EXP 3
7057: PPUSH
7058: LD_STRING D5-Lisa-1
7060: PPUSH
7061: CALL_OW 88
// end ; 3 :
7065: GO 7113
7067: LD_INT 3
7069: DOUBLE
7070: EQUAL
7071: IFTRUE 7075
7073: GO 7112
7075: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7076: LD_EXP 1
7080: PPUSH
7081: LD_STRING D5-JMM-1
7083: PPUSH
7084: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7088: LD_INT 77
7090: PPUSH
7091: LD_INT 87
7093: PPUSH
7094: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7098: LD_EXP 4
7102: PPUSH
7103: LD_STRING D5-Con-1
7105: PPUSH
7106: CALL_OW 88
// end ; end ;
7110: GO 7113
7112: POP
// end ;
7113: END
// every 15 15$0 do
7114: GO 7116
7116: DISABLE
// begin DialogueOn ;
7117: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7121: LD_EXP 5
7125: PPUSH
7126: LD_STRING D7-Pow-1
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7133: LD_EXP 1
7137: PPUSH
7138: LD_STRING D7-JMM-1
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7145: LD_EXP 5
7149: PPUSH
7150: LD_STRING D7-Pow-2
7152: PPUSH
7153: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7157: LD_EXP 1
7161: PPUSH
7162: LD_STRING D7-JMM-2
7164: PPUSH
7165: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7169: LD_EXP 5
7173: PPUSH
7174: LD_STRING D7-Pow-3
7176: PPUSH
7177: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7181: LD_EXP 1
7185: PPUSH
7186: LD_STRING D7-JMM-3
7188: PPUSH
7189: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7193: LD_EXP 5
7197: PPUSH
7198: LD_STRING D7-Pow-4
7200: PPUSH
7201: CALL_OW 94
// DialogueOff ;
7205: CALL_OW 7
// end ; end_of_file
7209: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 255
7219: PUSH
7220: LD_INT 3
7222: EQUAL
7223: IFFALSE 7297
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7225: LD_ADDR_EXP 10
7229: PUSH
7230: LD_EXP 10
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 3
7242: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7243: LD_ADDR_EXP 10
7247: PUSH
7248: LD_EXP 10
7252: PPUSH
7253: LD_INT 1
7255: PPUSH
7256: CALL_OW 3
7260: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7261: LD_ADDR_EXP 10
7265: PUSH
7266: LD_EXP 10
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 3
7278: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7279: LD_ADDR_EXP 10
7283: PUSH
7284: LD_EXP 10
7288: PPUSH
7289: LD_INT 1
7291: PPUSH
7292: CALL_OW 3
7296: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 255
7306: PUSH
7307: LD_INT 3
7309: EQUAL
7310: PUSH
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL_OW 266
7320: PUSH
7321: LD_INT 0
7323: EQUAL
7324: PUSH
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL_OW 266
7334: PUSH
7335: LD_INT 2
7337: EQUAL
7338: OR
7339: PUSH
7340: LD_VAR 0 1
7344: PPUSH
7345: CALL_OW 266
7349: PUSH
7350: LD_INT 4
7352: EQUAL
7353: OR
7354: PUSH
7355: EMPTY
7356: LIST
7357: AND
7358: IFFALSE 7369
// ComUpgrade ( building ) ;
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7369: LD_VAR 0 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 266
7392: PUSH
7393: LD_INT 32
7395: EQUAL
7396: AND
7397: IFFALSE 7438
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7399: LD_VAR 0 1
7403: PPUSH
7404: LD_INT 42
7406: PUSH
7407: LD_INT 43
7409: PUSH
7410: LD_INT 44
7412: PUSH
7413: LD_INT 46
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 1
7424: PPUSH
7425: LD_INT 4
7427: PPUSH
7428: CALL_OW 12
7432: ARRAY
7433: PPUSH
7434: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7438: LD_VAR 0 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 266
7461: PUSH
7462: LD_INT 33
7464: EQUAL
7465: AND
7466: IFFALSE 7507
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_INT 42
7475: PUSH
7476: LD_INT 43
7478: PUSH
7479: LD_INT 44
7481: PUSH
7482: LD_INT 46
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 1
7493: PPUSH
7494: LD_INT 4
7496: PPUSH
7497: CALL_OW 12
7501: ARRAY
7502: PPUSH
7503: CALL_OW 208
// end ;
7507: PPOPN 1
7509: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7510: LD_VAR 0 1
7514: PPUSH
7515: CALL_OW 255
7519: PUSH
7520: LD_INT 3
7522: EQUAL
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 247
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: AND
7538: IFFALSE 8230
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7540: LD_VAR 0 1
7544: PPUSH
7545: CALL_OW 266
7549: PUSH
7550: LD_INT 31
7552: EQUAL
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 266
7563: PUSH
7564: LD_INT 32
7566: EQUAL
7567: OR
7568: PUSH
7569: LD_VAR 0 1
7573: PPUSH
7574: CALL_OW 266
7578: PUSH
7579: LD_INT 36
7581: EQUAL
7582: OR
7583: PUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: CALL_OW 266
7593: PUSH
7594: LD_INT 0
7596: EQUAL
7597: OR
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: CALL_OW 266
7608: PUSH
7609: LD_INT 24
7611: EQUAL
7612: OR
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 266
7623: PUSH
7624: LD_INT 17
7626: EQUAL
7627: OR
7628: PUSH
7629: LD_VAR 0 1
7633: PPUSH
7634: CALL_OW 266
7638: PUSH
7639: LD_INT 25
7641: EQUAL
7642: OR
7643: PUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: CALL_OW 266
7653: PUSH
7654: LD_INT 19
7656: EQUAL
7657: OR
7658: PUSH
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 266
7668: PUSH
7669: LD_INT 20
7671: EQUAL
7672: OR
7673: PUSH
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 266
7683: PUSH
7684: LD_INT 18
7686: EQUAL
7687: OR
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 266
7698: PUSH
7699: LD_INT 21
7701: EQUAL
7702: OR
7703: PUSH
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 266
7713: PUSH
7714: LD_INT 23
7716: EQUAL
7717: OR
7718: PUSH
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 266
7728: PUSH
7729: LD_INT 16
7731: EQUAL
7732: OR
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: CALL_OW 266
7743: PUSH
7744: LD_INT 6
7746: EQUAL
7747: OR
7748: PUSH
7749: LD_VAR 0 1
7753: PPUSH
7754: CALL_OW 266
7758: PUSH
7759: LD_INT 29
7761: EQUAL
7762: OR
7763: PUSH
7764: LD_VAR 0 1
7768: PPUSH
7769: CALL_OW 266
7773: PUSH
7774: LD_INT 26
7776: EQUAL
7777: OR
7778: PUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 266
7788: PUSH
7789: LD_INT 30
7791: EQUAL
7792: OR
7793: PUSH
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 266
7803: PUSH
7804: LD_INT 28
7806: EQUAL
7807: OR
7808: PUSH
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 266
7818: PUSH
7819: LD_INT 27
7821: EQUAL
7822: OR
7823: PUSH
7824: LD_VAR 0 1
7828: PPUSH
7829: CALL_OW 266
7833: PUSH
7834: LD_INT 33
7836: EQUAL
7837: OR
7838: PUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 266
7848: PUSH
7849: LD_INT 2
7851: EQUAL
7852: OR
7853: PUSH
7854: LD_VAR 0 1
7858: PPUSH
7859: CALL_OW 266
7863: PUSH
7864: LD_INT 4
7866: EQUAL
7867: OR
7868: IFFALSE 7954
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7870: LD_ADDR_EXP 10
7874: PUSH
7875: LD_EXP 10
7879: PUSH
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 266
7889: ADD
7890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7891: LD_ADDR_EXP 10
7895: PUSH
7896: LD_EXP 10
7900: PUSH
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 250
7910: ADD
7911: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7912: LD_ADDR_EXP 10
7916: PUSH
7917: LD_EXP 10
7921: PUSH
7922: LD_VAR 0 1
7926: PPUSH
7927: CALL_OW 251
7931: ADD
7932: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7933: LD_ADDR_EXP 10
7937: PUSH
7938: LD_EXP 10
7942: PUSH
7943: LD_VAR 0 1
7947: PPUSH
7948: CALL_OW 254
7952: ADD
7953: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
7954: LD_VAR 0 1
7958: PPUSH
7959: CALL_OW 266
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: IFFALSE 8046
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
7969: LD_ADDR_EXP 10
7973: PUSH
7974: LD_EXP 10
7978: PUSH
7979: LD_INT 0
7981: ADD
7982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7983: LD_ADDR_EXP 10
7987: PUSH
7988: LD_EXP 10
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 250
8002: ADD
8003: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 251
8023: ADD
8024: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8025: LD_ADDR_EXP 10
8029: PUSH
8030: LD_EXP 10
8034: PUSH
8035: LD_VAR 0 1
8039: PPUSH
8040: CALL_OW 254
8044: ADD
8045: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 266
8055: PUSH
8056: LD_INT 3
8058: EQUAL
8059: IFFALSE 8138
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8061: LD_ADDR_EXP 10
8065: PUSH
8066: LD_EXP 10
8070: PUSH
8071: LD_INT 2
8073: ADD
8074: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8075: LD_ADDR_EXP 10
8079: PUSH
8080: LD_EXP 10
8084: PUSH
8085: LD_VAR 0 1
8089: PPUSH
8090: CALL_OW 250
8094: ADD
8095: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8096: LD_ADDR_EXP 10
8100: PUSH
8101: LD_EXP 10
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 251
8115: ADD
8116: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8117: LD_ADDR_EXP 10
8121: PUSH
8122: LD_EXP 10
8126: PUSH
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 254
8136: ADD
8137: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 266
8147: PUSH
8148: LD_INT 5
8150: EQUAL
8151: IFFALSE 8230
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8153: LD_ADDR_EXP 10
8157: PUSH
8158: LD_EXP 10
8162: PUSH
8163: LD_INT 4
8165: ADD
8166: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8167: LD_ADDR_EXP 10
8171: PUSH
8172: LD_EXP 10
8176: PUSH
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 250
8186: ADD
8187: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8188: LD_ADDR_EXP 10
8192: PUSH
8193: LD_EXP 10
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 251
8207: ADD
8208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8209: LD_ADDR_EXP 10
8213: PUSH
8214: LD_EXP 10
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 254
8228: ADD
8229: ST_TO_ADDR
// end ; end ; end ;
8230: PPOPN 1
8232: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8233: LD_VAR 0 2
8237: PUSH
8238: LD_INT 1
8240: EQUAL
8241: PUSH
8242: LD_VAR 0 2
8246: PUSH
8247: LD_INT 40
8249: EQUAL
8250: OR
8251: IFFALSE 8375
// if GetSide ( vehicle ) = 3 then
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL_OW 255
8262: PUSH
8263: LD_INT 3
8265: EQUAL
8266: IFFALSE 8375
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8268: LD_VAR 0 1
8272: PPUSH
8273: CALL_OW 264
8277: PUSH
8278: LD_INT 47
8280: EQUAL
8281: PUSH
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 264
8291: PUSH
8292: LD_INT 46
8294: EQUAL
8295: OR
8296: PUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 264
8306: PUSH
8307: LD_INT 45
8309: EQUAL
8310: OR
8311: PUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 264
8321: PUSH
8322: LD_INT 44
8324: EQUAL
8325: OR
8326: IFFALSE 8344
// russianTanks = russianTanks ^ vehicle ;
8328: LD_ADDR_EXP 11
8332: PUSH
8333: LD_EXP 11
8337: PUSH
8338: LD_VAR 0 1
8342: ADD
8343: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 264
8353: PUSH
8354: LD_INT 49
8356: EQUAL
8357: IFFALSE 8375
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8359: LD_ADDR_EXP 12
8363: PUSH
8364: LD_EXP 12
8368: PUSH
8369: LD_VAR 0 1
8373: ADD
8374: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8375: LD_VAR 0 1
8379: PPUSH
8380: CALL_OW 255
8384: PUSH
8385: LD_INT 1
8387: EQUAL
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 264
8398: PUSH
8399: LD_INT 10
8401: EQUAL
8402: AND
8403: IFFALSE 8419
// amLaserCounter = amLaserCounter + 1 ;
8405: LD_ADDR_EXP 9
8409: PUSH
8410: LD_EXP 9
8414: PUSH
8415: LD_INT 1
8417: PLUS
8418: ST_TO_ADDR
// end ;
8419: PPOPN 2
8421: END
// on UnitGoesToRed ( unit ) do var i ;
8422: LD_INT 0
8424: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8425: LD_VAR 0 1
8429: PPUSH
8430: CALL_OW 255
8434: PUSH
8435: LD_INT 3
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 247
8448: PUSH
8449: LD_INT 2
8451: EQUAL
8452: AND
8453: IFFALSE 8571
// begin if russianTanks > 0 then
8455: LD_EXP 11
8459: PUSH
8460: LD_INT 0
8462: GREATER
8463: IFFALSE 8513
// for i in russianTanks do
8465: LD_ADDR_VAR 0 2
8469: PUSH
8470: LD_EXP 11
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8511
// if i = unit then
8478: LD_VAR 0 2
8482: PUSH
8483: LD_VAR 0 1
8487: EQUAL
8488: IFFALSE 8509
// russianTanks = russianTanks diff [ unit ] ;
8490: LD_ADDR_EXP 11
8494: PUSH
8495: LD_EXP 11
8499: PUSH
8500: LD_VAR 0 1
8504: PUSH
8505: EMPTY
8506: LIST
8507: DIFF
8508: ST_TO_ADDR
8509: GO 8475
8511: POP
8512: POP
// if russianTimeLapsers > 0 then
8513: LD_EXP 12
8517: PUSH
8518: LD_INT 0
8520: GREATER
8521: IFFALSE 8571
// for i in russianTimeLapsers do
8523: LD_ADDR_VAR 0 2
8527: PUSH
8528: LD_EXP 12
8532: PUSH
8533: FOR_IN
8534: IFFALSE 8569
// if i = unit then
8536: LD_VAR 0 2
8540: PUSH
8541: LD_VAR 0 1
8545: EQUAL
8546: IFFALSE 8567
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8548: LD_ADDR_EXP 12
8552: PUSH
8553: LD_EXP 12
8557: PUSH
8558: LD_VAR 0 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: DIFF
8566: ST_TO_ADDR
8567: GO 8533
8569: POP
8570: POP
// end ; end ; end_of_file
8571: PPOPN 2
8573: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8574: LD_EXP 1
8578: PPUSH
8579: CALL_OW 310
8583: PPUSH
8584: LD_INT 12
8586: PPUSH
8587: CALL_OW 308
8591: PUSH
8592: LD_EXP 15
8596: PUSH
8597: LD_INT 0
8599: EQUAL
8600: AND
8601: IFFALSE 9043
8603: GO 8605
8605: DISABLE
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
// begin enable ;
8610: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8611: LD_ADDR_VAR 0 1
8615: PUSH
8616: LD_EXP 1
8620: PPUSH
8621: CALL_OW 310
8625: ST_TO_ADDR
// if JMMGirl = 1 then
8626: LD_EXP 7
8630: PUSH
8631: LD_INT 1
8633: EQUAL
8634: IFFALSE 8651
// JMMGirlVeh = IsInUnit ( Joan ) ;
8636: LD_ADDR_VAR 0 2
8640: PUSH
8641: LD_EXP 2
8645: PPUSH
8646: CALL_OW 310
8650: ST_TO_ADDR
// if JMMGirl = 2 then
8651: LD_EXP 7
8655: PUSH
8656: LD_INT 2
8658: EQUAL
8659: IFFALSE 8676
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8661: LD_ADDR_VAR 0 2
8665: PUSH
8666: LD_EXP 3
8670: PPUSH
8671: CALL_OW 310
8675: ST_TO_ADDR
// if JMMGirl = 3 then
8676: LD_EXP 7
8680: PUSH
8681: LD_INT 3
8683: EQUAL
8684: IFFALSE 8701
// JMMGirlVeh = IsInUnit ( Connie ) ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: LD_EXP 4
8695: PPUSH
8696: CALL_OW 310
8700: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8701: LD_EXP 1
8705: PPUSH
8706: CALL_OW 310
8710: PPUSH
8711: LD_EXP 2
8715: PPUSH
8716: CALL_OW 310
8720: PPUSH
8721: CALL_OW 296
8725: PUSH
8726: LD_INT 10
8728: LESS
8729: PUSH
8730: LD_EXP 1
8734: PPUSH
8735: CALL_OW 310
8739: PPUSH
8740: LD_EXP 3
8744: PPUSH
8745: CALL_OW 310
8749: PPUSH
8750: CALL_OW 296
8754: PUSH
8755: LD_INT 10
8757: LESS
8758: OR
8759: PUSH
8760: LD_EXP 1
8764: PPUSH
8765: CALL_OW 310
8769: PPUSH
8770: LD_EXP 4
8774: PPUSH
8775: CALL_OW 310
8779: PPUSH
8780: CALL_OW 296
8784: PUSH
8785: LD_INT 10
8787: LESS
8788: OR
8789: IFFALSE 8947
// begin case Query ( Q3b ) of 1 :
8791: LD_STRING Q3b
8793: PPUSH
8794: CALL_OW 97
8798: PUSH
8799: LD_INT 1
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 8944
8807: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
8808: LD_VAR 0 1
8812: PPUSH
8813: CALL_OW 265
8817: PUSH
8818: EMPTY
8819: LIST
8820: PUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 262
8830: PUSH
8831: EMPTY
8832: LIST
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 263
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 264
8856: PUSH
8857: EMPTY
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PPUSH
8866: LD_STRING 14_JMMVeh_1
8868: PPUSH
8869: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8873: LD_VAR 0 2
8877: PPUSH
8878: CALL_OW 265
8882: PUSH
8883: EMPTY
8884: LIST
8885: PUSH
8886: LD_VAR 0 2
8890: PPUSH
8891: CALL_OW 262
8895: PUSH
8896: EMPTY
8897: LIST
8898: PUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 263
8908: PUSH
8909: EMPTY
8910: LIST
8911: PUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL_OW 264
8921: PUSH
8922: EMPTY
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: LD_STRING 14_JMMGirlVeh_1
8933: PPUSH
8934: CALL_OW 39
// FinishMission ;
8938: CALL 9184 0 0
// end ; end ;
8942: GO 8945
8944: POP
// end else
8945: GO 9043
// begin if JMMGirl = 1 then
8947: LD_EXP 7
8951: PUSH
8952: LD_INT 1
8954: EQUAL
8955: IFFALSE 8983
// begin case Query ( Q3bJ ) of 1 :
8957: LD_STRING Q3bJ
8959: PPUSH
8960: CALL_OW 97
8964: PUSH
8965: LD_INT 1
8967: DOUBLE
8968: EQUAL
8969: IFTRUE 8973
8971: GO 8980
8973: POP
// FinishMission ; end ;
8974: CALL 9184 0 0
8978: GO 8981
8980: POP
// end else
8981: GO 9043
// begin if JMMGirl = 2 then
8983: LD_EXP 7
8987: PUSH
8988: LD_INT 2
8990: EQUAL
8991: IFFALSE 9019
// begin case Query ( Q3bL ) of 1 :
8993: LD_STRING Q3bL
8995: PPUSH
8996: CALL_OW 97
9000: PUSH
9001: LD_INT 1
9003: DOUBLE
9004: EQUAL
9005: IFTRUE 9009
9007: GO 9016
9009: POP
// FinishMission ; end ;
9010: CALL 9184 0 0
9014: GO 9017
9016: POP
// end else
9017: GO 9043
// begin case Query ( Q3bX ) of 1 :
9019: LD_STRING Q3bX
9021: PPUSH
9022: CALL_OW 97
9026: PUSH
9027: LD_INT 1
9029: DOUBLE
9030: EQUAL
9031: IFTRUE 9035
9033: GO 9042
9035: POP
// FinishMission ; end ;
9036: CALL 9184 0 0
9040: GO 9043
9042: POP
// end ; end ; end ; end ;
9043: PPOPN 2
9045: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9046: LD_INT 22
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 21
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 69
9074: PUSH
9075: LD_INT 0
9077: EQUAL
9078: PUSH
9079: LD_EXP 15
9083: PUSH
9084: LD_INT 0
9086: EQUAL
9087: AND
9088: IFFALSE 9183
9090: GO 9092
9092: DISABLE
// begin DialogueOn ;
9093: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9097: LD_EXP 1
9101: PPUSH
9102: LD_STRING DEnd-JMM-1
9104: PPUSH
9105: CALL_OW 88
// if JMMGirl = 1 then
9109: LD_EXP 7
9113: PUSH
9114: LD_INT 1
9116: EQUAL
9117: IFFALSE 9131
// Say ( Joan , DEnd-Joan-1 ) ;
9119: LD_EXP 2
9123: PPUSH
9124: LD_STRING DEnd-Joan-1
9126: PPUSH
9127: CALL_OW 88
// if JMMGirl = 2 then
9131: LD_EXP 7
9135: PUSH
9136: LD_INT 2
9138: EQUAL
9139: IFFALSE 9153
// Say ( Lisa , DEnd-Lisa-1 ) ;
9141: LD_EXP 3
9145: PPUSH
9146: LD_STRING DEnd-Lisa-1
9148: PPUSH
9149: CALL_OW 88
// if JMMGirl = 3 then
9153: LD_EXP 7
9157: PUSH
9158: LD_INT 3
9160: EQUAL
9161: IFFALSE 9175
// Say ( Connie , DEnd-Con-1 ) ;
9163: LD_EXP 4
9167: PPUSH
9168: LD_STRING DEnd-Con-1
9170: PPUSH
9171: CALL_OW 88
// DialogueOff ;
9175: CALL_OW 7
// FinishMission ;
9179: CALL 9184 0 0
// end ;
9183: END
// export function FinishMission ; begin
9184: LD_INT 0
9186: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9187: LD_EXP 1
9191: PPUSH
9192: LD_STRING 14_JMM
9194: PPUSH
9195: CALL_OW 38
// if fastEnd = 1 then
9199: LD_EXP 15
9203: PUSH
9204: LD_INT 1
9206: EQUAL
9207: IFFALSE 9331
// begin AddMedal ( fastend , - 1 ) ;
9209: LD_STRING fastend
9211: PPUSH
9212: LD_INT 1
9214: NEG
9215: PPUSH
9216: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9220: LD_STRING fastend
9222: PPUSH
9223: LD_INT 1
9225: NEG
9226: PPUSH
9227: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9231: LD_STRING fastend
9233: PPUSH
9234: LD_INT 1
9236: NEG
9237: PPUSH
9238: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9242: LD_EXP 7
9246: PPUSH
9247: LD_STRING 14_JMMGirl_1
9249: PPUSH
9250: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9254: LD_INT 0
9256: PPUSH
9257: LD_STRING 14_JMMGirlStatus_1
9259: PPUSH
9260: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9264: LD_INT 0
9266: PPUSH
9267: LD_STRING 14_KappaStatus_1
9269: PPUSH
9270: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
9274: LD_INT 95
9276: PPUSH
9277: CALL_OW 265
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: LD_INT 95
9287: PPUSH
9288: CALL_OW 262
9292: PUSH
9293: EMPTY
9294: LIST
9295: PUSH
9296: LD_INT 95
9298: PPUSH
9299: CALL_OW 263
9303: PUSH
9304: EMPTY
9305: LIST
9306: PUSH
9307: LD_INT 95
9309: PPUSH
9310: CALL_OW 264
9314: PUSH
9315: EMPTY
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PPUSH
9324: LD_STRING 14_JMMVeh_1
9326: PPUSH
9327: CALL_OW 39
// end ; if fastEnd = 0 then
9331: LD_EXP 15
9335: PUSH
9336: LD_INT 0
9338: EQUAL
9339: IFFALSE 10009
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9341: LD_EXP 7
9345: PPUSH
9346: LD_STRING 14_JMMGirl_1
9348: PPUSH
9349: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9353: LD_INT 22
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 21
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: PUSH
9382: LD_INT 0
9384: EQUAL
9385: PUSH
9386: LD_INT 48
9388: PPUSH
9389: CALL_OW 255
9393: PUSH
9394: LD_INT 1
9396: EQUAL
9397: AND
9398: IFFALSE 9412
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9400: LD_INT 1
9402: PPUSH
9403: LD_STRING 14_KappaStatus_1
9405: PPUSH
9406: CALL_OW 39
9410: GO 9422
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9412: LD_INT 0
9414: PPUSH
9415: LD_STRING 14_KappaStatus_1
9417: PPUSH
9418: CALL_OW 39
// case JMMGirl of 1 :
9422: LD_EXP 7
9426: PUSH
9427: LD_INT 1
9429: DOUBLE
9430: EQUAL
9431: IFTRUE 9435
9433: GO 9583
9435: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9436: LD_EXP 2
9440: PPUSH
9441: CALL_OW 302
9445: PUSH
9446: LD_EXP 2
9450: PPUSH
9451: CALL_OW 255
9455: PUSH
9456: LD_INT 1
9458: EQUAL
9459: AND
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 3
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 69
9489: PUSH
9490: LD_INT 0
9492: EQUAL
9493: PUSH
9494: LD_EXP 1
9498: PPUSH
9499: CALL_OW 310
9503: PPUSH
9504: LD_EXP 2
9508: PPUSH
9509: CALL_OW 310
9513: PPUSH
9514: CALL_OW 296
9518: PUSH
9519: LD_INT 10
9521: LESS
9522: OR
9523: AND
9524: IFFALSE 9560
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9526: LD_INT 1
9528: PPUSH
9529: LD_STRING 14_JMMGirlStatus_1
9531: PPUSH
9532: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9536: LD_EXP 2
9540: PPUSH
9541: LD_STRING 14_Joan
9543: PPUSH
9544: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9548: LD_STRING protect
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 101
9558: GO 9581
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_STRING 14_JMMGirlStatus_1
9565: PPUSH
9566: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9570: LD_STRING protect
9572: PPUSH
9573: LD_INT 1
9575: NEG
9576: PPUSH
9577: CALL_OW 101
// end ; end ; 2 :
9581: GO 9896
9583: LD_INT 2
9585: DOUBLE
9586: EQUAL
9587: IFTRUE 9591
9589: GO 9739
9591: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9592: LD_EXP 3
9596: PPUSH
9597: CALL_OW 302
9601: PUSH
9602: LD_EXP 3
9606: PPUSH
9607: CALL_OW 255
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_INT 3
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 1
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: PUSH
9646: LD_INT 0
9648: EQUAL
9649: PUSH
9650: LD_EXP 1
9654: PPUSH
9655: CALL_OW 310
9659: PPUSH
9660: LD_EXP 3
9664: PPUSH
9665: CALL_OW 310
9669: PPUSH
9670: CALL_OW 296
9674: PUSH
9675: LD_INT 10
9677: LESS
9678: OR
9679: AND
9680: IFFALSE 9716
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9682: LD_INT 1
9684: PPUSH
9685: LD_STRING 14_JMMGirlStatus_1
9687: PPUSH
9688: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9692: LD_EXP 3
9696: PPUSH
9697: LD_STRING 14_Lisa
9699: PPUSH
9700: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9704: LD_STRING protect
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 101
9714: GO 9737
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9716: LD_INT 0
9718: PPUSH
9719: LD_STRING 14_JMMGirlStatus_1
9721: PPUSH
9722: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9726: LD_STRING protect
9728: PPUSH
9729: LD_INT 2
9731: NEG
9732: PPUSH
9733: CALL_OW 101
// end ; end ; 3 :
9737: GO 9896
9739: LD_INT 3
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9895
9747: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9748: LD_EXP 4
9752: PPUSH
9753: CALL_OW 302
9757: PUSH
9758: LD_EXP 4
9762: PPUSH
9763: CALL_OW 255
9767: PUSH
9768: LD_INT 1
9770: EQUAL
9771: AND
9772: PUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 21
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PPUSH
9797: CALL_OW 69
9801: PUSH
9802: LD_INT 0
9804: EQUAL
9805: PUSH
9806: LD_EXP 1
9810: PPUSH
9811: CALL_OW 310
9815: PPUSH
9816: LD_EXP 4
9820: PPUSH
9821: CALL_OW 310
9825: PPUSH
9826: CALL_OW 296
9830: PUSH
9831: LD_INT 10
9833: LESS
9834: OR
9835: AND
9836: IFFALSE 9872
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9838: LD_INT 1
9840: PPUSH
9841: LD_STRING 14_JMMGirlStatus_1
9843: PPUSH
9844: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9848: LD_EXP 4
9852: PPUSH
9853: LD_STRING 14_Connie
9855: PPUSH
9856: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9860: LD_STRING protect
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 101
9870: GO 9893
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9872: LD_INT 0
9874: PPUSH
9875: LD_STRING 14_JMMGirlStatus_1
9877: PPUSH
9878: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
9882: LD_STRING protect
9884: PPUSH
9885: LD_INT 3
9887: NEG
9888: PPUSH
9889: CALL_OW 101
// end ; end ; end ;
9893: GO 9896
9895: POP
// if amLaserCounter >= 2 then
9896: LD_EXP 9
9900: PUSH
9901: LD_INT 2
9903: GREATEREQUAL
9904: IFFALSE 9918
// begin AddMedal ( double , 1 ) end else
9906: LD_STRING double
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 101
9916: GO 9952
// begin if amLaserCounter = 1 then
9918: LD_EXP 9
9922: PUSH
9923: LD_INT 1
9925: EQUAL
9926: IFFALSE 9941
// AddMedal ( double , - 2 ) else
9928: LD_STRING double
9930: PPUSH
9931: LD_INT 2
9933: NEG
9934: PPUSH
9935: CALL_OW 101
9939: GO 9952
// AddMedal ( double , - 1 ) ;
9941: LD_STRING double
9943: PPUSH
9944: LD_INT 1
9946: NEG
9947: PPUSH
9948: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
9952: LD_INT 22
9954: PUSH
9955: LD_INT 3
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 21
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PPUSH
9976: CALL_OW 69
9980: PUSH
9981: LD_INT 0
9983: EQUAL
9984: IFFALSE 9998
// AddMedal ( base , 1 ) else
9986: LD_STRING base
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 101
9996: GO 10009
// AddMedal ( base , - 1 ) ;
9998: LD_STRING base
10000: PPUSH
10001: LD_INT 1
10003: NEG
10004: PPUSH
10005: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10009: LD_STRING Eliminate
10011: PPUSH
10012: CALL_OW 102
// YouWin ;
10016: CALL_OW 103
// end ; end_of_file
10020: LD_VAR 0 1
10024: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10025: LD_EXP 1
10029: PPUSH
10030: CALL_OW 301
10034: IFFALSE 10046
10036: GO 10038
10038: DISABLE
// YouLost ( JMM ) ; end_of_file
10039: LD_STRING JMM
10041: PPUSH
10042: CALL_OW 104
10046: END
// every 1 1$0 do
10047: GO 10049
10049: DISABLE
// begin enable ;
10050: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10051: LD_INT 3
10053: PPUSH
10054: LD_INT 5
10056: PPUSH
10057: CALL_OW 12
10061: PPUSH
10062: LD_INT 13
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: CALL_OW 55
// end ;
10072: END
