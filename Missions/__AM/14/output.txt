// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1412 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Connie , true ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Connie
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1173 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1166
// begin if IsOk ( i ) then
1139: LD_VAR 0 4
1143: PPUSH
1144: CALL_OW 302
1148: IFFALSE 1164
// SaveCharacters ( i , ident ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 38
// end ;
1164: GO 1136
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 3
1172: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1173: LD_INT 0
1175: PPUSH
1176: PPUSH
1177: PPUSH
1178: PPUSH
// for i = 1 to count do
1179: LD_ADDR_VAR 0 8
1183: PUSH
1184: DOUBLE
1185: LD_INT 1
1187: DEC
1188: ST_TO_ADDR
1189: LD_VAR 0 6
1193: PUSH
1194: FOR_TO
1195: IFFALSE 1276
// begin uc_side = side ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_VAR 0 1
1206: ST_TO_ADDR
// uc_nation = nation ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_VAR 0 2
1216: ST_TO_ADDR
// hc_gallery =  ;
1217: LD_ADDR_OWVAR 33
1221: PUSH
1222: LD_STRING 
1224: ST_TO_ADDR
// hc_name =  ;
1225: LD_ADDR_OWVAR 26
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_VAR 0 5
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 380
// un = CreateHuman ;
1250: LD_ADDR_VAR 0 10
1254: PUSH
1255: CALL_OW 44
1259: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1260: LD_VAR 0 10
1264: PPUSH
1265: LD_VAR 0 3
1269: PPUSH
1270: CALL_OW 52
// end ;
1274: GO 1194
1276: POP
1277: POP
// end ;
1278: LD_VAR 0 7
1282: RET
// export function Query1 ; begin
1283: LD_INT 0
1285: PPUSH
// case query ( Q1 ) of 1 :
1286: LD_STRING Q1
1288: PPUSH
1289: CALL_OW 97
1293: PUSH
1294: LD_INT 1
1296: DOUBLE
1297: EQUAL
1298: IFTRUE 1302
1300: GO 1313
1302: POP
// result = 1 ; 2 :
1303: LD_ADDR_VAR 0 1
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
1311: GO 1333
1313: LD_INT 2
1315: DOUBLE
1316: EQUAL
1317: IFTRUE 1321
1319: GO 1332
1321: POP
// result = 2 ; end ;
1322: LD_ADDR_VAR 0 1
1326: PUSH
1327: LD_INT 2
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// end ;
1333: LD_VAR 0 1
1337: RET
// export function Query2 ; begin
1338: LD_INT 0
1340: PPUSH
// case query ( Q2J ) of 1 :
1341: LD_STRING Q2J
1343: PPUSH
1344: CALL_OW 97
1348: PUSH
1349: LD_INT 1
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1368
1357: POP
// result = 1 ; 2 :
1358: LD_ADDR_VAR 0 1
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
1366: GO 1407
1368: LD_INT 2
1370: DOUBLE
1371: EQUAL
1372: IFTRUE 1376
1374: GO 1387
1376: POP
// result = 2 ; 2 :
1377: LD_ADDR_VAR 0 1
1381: PUSH
1382: LD_INT 2
1384: ST_TO_ADDR
1385: GO 1407
1387: LD_INT 2
1389: DOUBLE
1390: EQUAL
1391: IFTRUE 1395
1393: GO 1406
1395: POP
// result = 3 ; end ;
1396: LD_ADDR_VAR 0 1
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
1404: GO 1407
1406: POP
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareDifficulty ; begin
1412: LD_INT 0
1414: PPUSH
// if difficulty = 1 then
1415: LD_OWVAR 67
1419: PUSH
1420: LD_INT 1
1422: EQUAL
1423: IFFALSE 1503
// begin SetTech ( 57 , 3 , state_disabled ) ;
1425: LD_INT 57
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1438: LD_INT 58
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1451: LD_INT 59
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1464: LD_INT 51
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1477: LD_INT 52
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1490: LD_INT 53
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 322
// end ; if difficulty = 2 then
1503: LD_OWVAR 67
1507: PUSH
1508: LD_INT 2
1510: EQUAL
1511: IFFALSE 1591
// begin SetTech ( 57 , 3 , state_enabled ) ;
1513: LD_INT 57
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1526: LD_INT 58
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1539: LD_INT 59
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1565: LD_INT 52
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1578: LD_INT 53
1580: PPUSH
1581: LD_INT 3
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 322
// end ; if difficulty = 3 then
1591: LD_OWVAR 67
1595: PUSH
1596: LD_INT 3
1598: EQUAL
1599: IFFALSE 1679
// begin SetTech ( 57 , 3 , state_enabled ) ;
1601: LD_INT 57
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1614: LD_INT 58
1616: PPUSH
1617: LD_INT 3
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1627: LD_INT 59
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1640: LD_INT 51
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1653: LD_INT 52
1655: PPUSH
1656: LD_INT 3
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1666: LD_INT 53
1668: PPUSH
1669: LD_INT 3
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 322
// end ; end ;
1679: LD_VAR 0 1
1683: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1691: LD_ADDR_VAR 0 8
1695: PUSH
1696: LD_INT 48
1698: PUSH
1699: LD_INT 49
1701: PUSH
1702: LD_INT 50
1704: PUSH
1705: LD_INT 20
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 51
1713: PUSH
1714: LD_INT 52
1716: PUSH
1717: LD_INT 69
1719: PUSH
1720: LD_INT 39
1722: PUSH
1723: LD_INT 34
1725: PUSH
1726: LD_INT 40
1728: PUSH
1729: LD_INT 53
1731: PUSH
1732: LD_INT 71
1734: PUSH
1735: LD_INT 57
1737: PUSH
1738: LD_INT 58
1740: PUSH
1741: LD_INT 44
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 27
1749: PUSH
1750: LD_INT 23
1752: PUSH
1753: LD_INT 33
1755: PUSH
1756: LD_INT 59
1758: PUSH
1759: LD_INT 54
1761: PUSH
1762: LD_INT 55
1764: PUSH
1765: LD_INT 56
1767: PUSH
1768: LD_INT 63
1770: PUSH
1771: LD_INT 64
1773: PUSH
1774: LD_INT 65
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 31
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_VAR 0 8
1840: PUSH
1841: FOR_TO
1842: IFFALSE 1918
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1844: LD_VAR 0 8
1848: PUSH
1849: LD_VAR 0 5
1853: ARRAY
1854: PPUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 321
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: PUSH
1869: LD_VAR 0 8
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 482
1889: PUSH
1890: LD_INT 1
1892: EQUAL
1893: AND
1894: IFFALSE 1916
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_VAR 0 8
1905: PUSH
1906: LD_VAR 0 5
1910: ARRAY
1911: PPUSH
1912: CALL_OW 184
1916: GO 1841
1918: POP
1919: POP
// end ;
1920: LD_VAR 0 4
1924: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1933: LD_ADDR_VAR 0 8
1937: PUSH
1938: LD_VAR 0 2
1942: PPUSH
1943: CALL_OW 313
1947: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1948: LD_ADDR_VAR 0 9
1952: PUSH
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 24
1982: PUSH
1983: LD_INT 750
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3
1992: PUSH
1993: LD_INT 54
1995: PUSH
1996: EMPTY
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 70
2013: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2014: LD_ADDR_VAR 0 6
2018: PUSH
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_VAR 0 1
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 21
2038: PUSH
2039: LD_INT 3
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 1000
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2076: LD_VAR 0 6
2080: NOT
2081: PUSH
2082: LD_INT 22
2084: PUSH
2085: LD_VAR 0 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 25
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 24
2106: PUSH
2107: LD_INT 250
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: NOT
2124: AND
2125: IFFALSE 2129
// exit ;
2127: GO 2311
// if buildings_list > 0 and engineerOkInside then
2129: LD_VAR 0 6
2133: PUSH
2134: LD_INT 0
2136: GREATER
2137: PUSH
2138: LD_VAR 0 8
2142: AND
2143: IFFALSE 2154
// ComExitBuilding ( engineerOkInside ) ;
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 0
2161: GREATER
2162: PUSH
2163: LD_VAR 0 9
2167: PUSH
2168: LD_INT 0
2170: GREATER
2171: AND
2172: IFFALSE 2192
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2174: LD_VAR 0 9
2178: PPUSH
2179: LD_VAR 0 6
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2192: LD_VAR 0 6
2196: PUSH
2197: LD_INT 0
2199: EQUAL
2200: PUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: EQUAL
2209: AND
2210: PUSH
2211: LD_VAR 0 9
2215: PUSH
2216: LD_INT 0
2218: GREATER
2219: AND
2220: IFFALSE 2236
// ComEnterUnit ( engineerOkOutside , building ) ;
2222: LD_VAR 0 9
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2236: LD_VAR 0 9
2240: PUSH
2241: LD_INT 0
2243: GREATER
2244: PUSH
2245: LD_VAR 0 6
2249: PUSH
2250: LD_INT 0
2252: EQUAL
2253: AND
2254: PUSH
2255: LD_VAR 0 4
2259: PUSH
2260: LD_INT 0
2262: GREATER
2263: AND
2264: IFFALSE 2311
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2266: LD_VAR 0 9
2270: PPUSH
2271: LD_VAR 0 4
2275: PUSH
2276: LD_INT 1
2278: ARRAY
2279: PPUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 4
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 4
2302: PUSH
2303: LD_INT 4
2305: ARRAY
2306: PPUSH
2307: CALL_OW 145
// end ;
2311: LD_VAR 0 5
2315: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2327: LD_ADDR_VAR 0 6
2331: PUSH
2332: LD_INT 22
2334: PUSH
2335: LD_VAR 0 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 23
2356: PUSH
2357: LD_INT 2
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 251
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 69
2384: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2385: LD_ADDR_VAR 0 7
2389: PUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: LD_INT 22
2397: PUSH
2398: LD_VAR 0 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 23
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 25
2419: PUSH
2420: LD_INT 4
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 50
2429: PUSH
2430: EMPTY
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PPUSH
2439: CALL_OW 70
2443: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2444: LD_ADDR_VAR 0 10
2448: PUSH
2449: LD_VAR 0 3
2453: PPUSH
2454: LD_INT 22
2456: PUSH
2457: LD_VAR 0 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 21
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 25
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 3
2495: PUSH
2496: LD_INT 24
2498: PUSH
2499: LD_INT 750
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 70
2520: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2521: LD_ADDR_VAR 0 11
2525: PUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: LD_INT 22
2533: PUSH
2534: LD_VAR 0 1
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: LD_INT 24
2575: PUSH
2576: LD_INT 1000
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PPUSH
2593: CALL_OW 70
2597: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2598: LD_VAR 0 10
2602: NOT
2603: PUSH
2604: LD_VAR 0 11
2608: NOT
2609: AND
2610: PUSH
2611: LD_VAR 0 6
2615: NOT
2616: AND
2617: IFFALSE 2621
// exit ;
2619: GO 2855
// if damageUnits > 0 and sci_list > 0 then
2621: LD_VAR 0 10
2625: PUSH
2626: LD_INT 0
2628: GREATER
2629: PUSH
2630: LD_VAR 0 6
2634: PUSH
2635: LD_INT 0
2637: GREATER
2638: AND
2639: IFFALSE 2655
// ComMoveToArea ( damageUnits , healArea ) ;
2641: LD_VAR 0 10
2645: PPUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2655: LD_VAR 0 11
2659: PUSH
2660: LD_INT 0
2662: GREATER
2663: PUSH
2664: LD_VAR 0 6
2668: PUSH
2669: LD_INT 0
2671: GREATER
2672: AND
2673: IFFALSE 2684
// ComExitBuilding ( sci_list ) ;
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2684: LD_VAR 0 11
2688: PUSH
2689: LD_INT 0
2691: GREATER
2692: PUSH
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 0
2700: GREATER
2701: AND
2702: IFFALSE 2722
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2704: LD_VAR 0 7
2708: PPUSH
2709: LD_VAR 0 11
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2722: LD_VAR 0 10
2726: PUSH
2727: LD_INT 0
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 11
2735: PUSH
2736: LD_INT 0
2738: EQUAL
2739: AND
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_INT 0
2748: GREATER
2749: AND
2750: IFFALSE 2855
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2752: LD_ADDR_VAR 0 12
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_VAR 0 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 21
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 8
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2799: LD_ADDR_VAR 0 13
2803: PUSH
2804: LD_INT 1
2806: PPUSH
2807: LD_VAR 0 12
2811: PPUSH
2812: CALL_OW 12
2816: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2817: LD_VAR 0 7
2821: PPUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 60
2827: PUSH
2828: EMPTY
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: PPUSH
2840: LD_VAR 0 12
2844: PUSH
2845: LD_VAR 0 13
2849: ARRAY
2850: PPUSH
2851: CALL_OW 120
// end ; end ;
2855: LD_VAR 0 5
2859: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
2864: PPUSH
2865: PPUSH
// tmpTab = [ ] ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2873: LD_INT 22
2875: PUSH
2876: LD_VAR 0 1
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 0
2906: GREATER
2907: IFFALSE 2990
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_VAR 0 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 30
2928: PUSH
2929: LD_INT 32
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2988
// begin for j in UnitsInside ( i ) do
2948: LD_ADDR_VAR 0 5
2952: PUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 313
2962: PUSH
2963: FOR_IN
2964: IFFALSE 2984
// tmpTab = tmpTab ^ j ;
2966: LD_ADDR_VAR 0 6
2970: PUSH
2971: LD_VAR 0 6
2975: PUSH
2976: LD_VAR 0 5
2980: ADD
2981: ST_TO_ADDR
2982: GO 2963
2984: POP
2985: POP
// end ;
2986: GO 2945
2988: POP
2989: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2990: LD_VAR 0 6
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: CALL_OW 250
3004: PPUSH
3005: LD_VAR 0 2
3009: PPUSH
3010: CALL_OW 251
3014: PPUSH
3015: CALL_OW 114
// end ;
3019: LD_VAR 0 3
3023: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3024: LD_INT 0
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
// enable ;
3030: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3031: LD_ADDR_VAR 0 7
3035: PUSH
3036: LD_VAR 0 3
3040: PPUSH
3041: CALL_OW 435
3045: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3046: LD_ADDR_VAR 0 6
3050: PUSH
3051: LD_INT 22
3053: PUSH
3054: LD_VAR 0 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 34
3065: PUSH
3066: LD_VAR 0 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 69
3083: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3084: LD_VAR 0 6
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 3
3097: PPUSH
3098: CALL_OW 435
3102: AND
3103: PUSH
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 0
3111: GREATER
3112: AND
3113: IFFALSE 3162
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3115: LD_VAR 0 6
3119: PUSH
3120: LD_INT 1
3122: ARRAY
3123: PPUSH
3124: LD_VAR 0 7
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: PPUSH
3133: LD_VAR 0 7
3137: PUSH
3138: LD_INT 2
3140: ARRAY
3141: PPUSH
3142: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3146: LD_VAR 0 6
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: CALL_OW 240
// end ; end ;
3162: LD_VAR 0 4
3166: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
3173: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3174: LD_ADDR_VAR 0 6
3178: PUSH
3179: LD_INT 22
3181: PUSH
3182: LD_VAR 0 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 30
3196: PUSH
3197: LD_INT 31
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 30
3206: PUSH
3207: LD_INT 32
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 30
3216: PUSH
3217: LD_INT 33
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 5
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 69
3260: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_INT 22
3268: PUSH
3269: LD_VAR 0 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 21
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 58
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3304: LD_VAR 0 6
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: PUSH
3313: LD_VAR 0 7
3317: PUSH
3318: LD_INT 0
3320: GREATER
3321: AND
3322: IFFALSE 3392
// begin for i in turretsList do
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 6
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3390
// begin for j in enemyBuildings do
3337: LD_ADDR_VAR 0 5
3341: PUSH
3342: LD_VAR 0 7
3346: PUSH
3347: FOR_IN
3348: IFFALSE 3386
// begin if GetDistUnits ( i , j ) < 20 then
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: CALL_OW 296
3364: PUSH
3365: LD_INT 20
3367: LESS
3368: IFFALSE 3384
// begin ComAttackUnit ( i , j ) ;
3370: LD_VAR 0 4
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 115
// end ; end ;
3384: GO 3347
3386: POP
3387: POP
// end ;
3388: GO 3334
3390: POP
3391: POP
// end ; end ;
3392: LD_VAR 0 3
3396: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
// for i = 1 to vehCount do
3401: LD_ADDR_VAR 0 9
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 3
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3464
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_VAR 0 5
3433: PPUSH
3434: LD_VAR 0 6
3438: PPUSH
3439: LD_VAR 0 4
3443: PUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_VAR 0 4
3451: PPUSH
3452: CALL_OW 12
3456: ARRAY
3457: PPUSH
3458: CALL_OW 185
3462: GO 3416
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 8
3470: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3479: LD_EXP 11
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: GREATEREQUAL
3504: PUSH
3505: LD_EXP 12
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PUSH
3524: LD_OWVAR 67
3528: ARRAY
3529: GREATEREQUAL
3530: AND
3531: IFFALSE 3764
// begin repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// for j in russianTanks do
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_EXP 11
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3752
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3553: LD_ADDR_VAR 0 6
3557: PUSH
3558: LD_INT 81
3560: PUSH
3561: LD_VAR 0 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 101
3572: PUSH
3573: LD_INT 1
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PPUSH
3584: CALL_OW 69
3588: PPUSH
3589: LD_VAR 0 4
3593: PPUSH
3594: CALL_OW 74
3598: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3599: LD_ADDR_VAR 0 7
3603: PUSH
3604: LD_INT 81
3606: PUSH
3607: LD_VAR 0 1
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 101
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 59
3631: PUSH
3632: EMPTY
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 1
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 21
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: PPUSH
3669: CALL_OW 69
3673: PPUSH
3674: LD_VAR 0 4
3678: PPUSH
3679: CALL_OW 74
3683: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3684: LD_VAR 0 4
3688: PPUSH
3689: LD_VAR 0 6
3693: PPUSH
3694: CALL_OW 296
3698: PUSH
3699: LD_INT 8
3701: PLUS
3702: PUSH
3703: LD_VAR 0 4
3707: PPUSH
3708: LD_VAR 0 7
3712: PPUSH
3713: CALL_OW 296
3717: LESS
3718: IFFALSE 3736
// ComAttackUnit ( j , target1 ) else
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: CALL_OW 115
3734: GO 3750
// ComAttackUnit ( j , target2 ) ;
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 7
3745: PPUSH
3746: CALL_OW 115
// end ;
3750: GO 3550
3752: POP
3753: POP
// until russianTanks = 0 ;
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 0
3761: EQUAL
3762: IFFALSE 3533
// end ; end ;
3764: LD_VAR 0 2
3768: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
3775: PPUSH
3776: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_INT 22
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 9
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PPUSH
3808: CALL_OW 69
3812: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: LD_INT 81
3820: PUSH
3821: LD_VAR 0 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 69
3855: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 3
3866: PPUSH
3867: CALL_OW 12
3871: ST_TO_ADDR
// for i = 1 to list do
3872: LD_ADDR_VAR 0 5
3876: PUSH
3877: DOUBLE
3878: LD_INT 1
3880: DEC
3881: ST_TO_ADDR
3882: LD_VAR 0 6
3886: PUSH
3887: FOR_TO
3888: IFFALSE 4090
// for ta in filter do
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: LD_VAR 0 7
3899: PUSH
3900: FOR_IN
3901: IFFALSE 4086
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3903: LD_VAR 0 6
3907: PUSH
3908: LD_VAR 0 5
3912: ARRAY
3913: PPUSH
3914: LD_VAR 0 3
3918: PPUSH
3919: CALL_OW 296
3923: PUSH
3924: LD_INT 15
3926: LESSEQUAL
3927: IFFALSE 4084
// begin case c of 1 :
3929: LD_VAR 0 4
3933: PUSH
3934: LD_INT 1
3936: DOUBLE
3937: EQUAL
3938: IFTRUE 3942
3940: GO 3980
3942: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3943: LD_VAR 0 6
3947: PUSH
3948: LD_VAR 0 5
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PPUSH
3959: CALL_OW 250
3963: PPUSH
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 251
3973: PPUSH
3974: CALL_OW 154
3978: GO 4084
3980: LD_INT 2
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4052
3988: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3989: LD_VAR 0 6
3993: PUSH
3994: LD_VAR 0 5
3998: ARRAY
3999: PPUSH
4000: LD_VAR 0 3
4004: PPUSH
4005: CALL_OW 250
4009: PUSH
4010: LD_INT 1
4012: NEG
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: CALL_OW 12
4021: PLUS
4022: PPUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: CALL_OW 251
4032: PUSH
4033: LD_INT 1
4035: NEG
4036: PPUSH
4037: LD_INT 1
4039: PPUSH
4040: CALL_OW 12
4044: PLUS
4045: PPUSH
4046: CALL_OW 153
4050: GO 4084
4052: LD_INT 3
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4083
4060: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4061: LD_VAR 0 6
4065: PUSH
4066: LD_VAR 0 5
4070: ARRAY
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 115
4081: GO 4084
4083: POP
// end ; end ;
4084: GO 3900
4086: POP
4087: POP
4088: GO 3887
4090: POP
4091: POP
// end ;
4092: LD_VAR 0 2
4096: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4097: LD_INT 0
4099: PPUSH
4100: PPUSH
4101: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4102: LD_EXP 11
4106: PUSH
4107: LD_INT 1
4109: GREATEREQUAL
4110: PUSH
4111: LD_EXP 12
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 2
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: PUSH
4130: LD_OWVAR 67
4134: ARRAY
4135: GREATEREQUAL
4136: AND
4137: IFFALSE 4276
// repeat wait ( 0 0$3 ) ;
4139: LD_INT 105
4141: PPUSH
4142: CALL_OW 67
// if russianTimeLapsers > 0 then
4146: LD_EXP 12
4150: PUSH
4151: LD_INT 0
4153: GREATER
4154: IFFALSE 4266
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4156: LD_ADDR_VAR 0 3
4160: PUSH
4161: LD_EXP 12
4165: PPUSH
4166: LD_INT 3
4168: PUSH
4169: LD_INT 60
4171: PUSH
4172: EMPTY
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 72
4183: PUSH
4184: FOR_IN
4185: IFFALSE 4264
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4187: LD_ADDR_VAR 0 4
4191: PUSH
4192: LD_INT 81
4194: PUSH
4195: LD_VAR 0 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 101
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 69
4222: PPUSH
4223: LD_VAR 0 3
4227: PPUSH
4228: CALL_OW 74
4232: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_VAR 0 4
4242: PPUSH
4243: CALL_OW 250
4247: PPUSH
4248: LD_VAR 0 4
4252: PPUSH
4253: CALL_OW 251
4257: PPUSH
4258: CALL_OW 111
// end ;
4262: GO 4184
4264: POP
4265: POP
// until russianTimeLapsers = 0 ;
4266: LD_EXP 12
4270: PUSH
4271: LD_INT 0
4273: EQUAL
4274: IFFALSE 4139
// end ;
4276: LD_VAR 0 2
4280: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4289: LD_ADDR_VAR 0 7
4293: PUSH
4294: LD_VAR 0 2
4298: PPUSH
4299: LD_INT 22
4301: PUSH
4302: LD_VAR 0 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 21
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 34
4323: PUSH
4324: LD_INT 52
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 70
4340: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: LD_VAR 0 2
4350: PPUSH
4351: LD_INT 22
4353: PUSH
4354: LD_VAR 0 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 3
4375: PUSH
4376: LD_INT 24
4378: PUSH
4379: LD_INT 1000
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: PPUSH
4398: CALL_OW 70
4402: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4403: LD_VAR 0 8
4407: PUSH
4408: LD_INT 0
4410: GREATER
4411: PUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_INT 24
4419: PUSH
4420: LD_INT 750
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: AND
4436: IFFALSE 4456
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4438: LD_VAR 0 7
4442: PPUSH
4443: LD_VAR 0 8
4447: PUSH
4448: LD_INT 1
4450: ARRAY
4451: PPUSH
4452: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 0
4463: GREATER
4464: PUSH
4465: LD_VAR 0 8
4469: PUSH
4470: LD_INT 0
4472: EQUAL
4473: AND
4474: PUSH
4475: LD_EXP 10
4479: PUSH
4480: LD_INT 0
4482: GREATER
4483: AND
4484: IFFALSE 4531
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4486: LD_VAR 0 7
4490: PPUSH
4491: LD_EXP 10
4495: PUSH
4496: LD_INT 1
4498: ARRAY
4499: PPUSH
4500: LD_EXP 10
4504: PUSH
4505: LD_INT 2
4507: ARRAY
4508: PPUSH
4509: LD_EXP 10
4513: PUSH
4514: LD_INT 3
4516: ARRAY
4517: PPUSH
4518: LD_EXP 10
4522: PUSH
4523: LD_INT 4
4525: ARRAY
4526: PPUSH
4527: CALL_OW 567
// end ; end_of_file
4531: LD_VAR 0 3
4535: RET
// every 0 0$1 do
4536: GO 4538
4538: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4539: LD_INT 3
4541: PPUSH
4542: LD_INT 14
4544: PPUSH
4545: LD_INT 3
4547: PPUSH
4548: CALL 1684 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 15
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: CALL 1684 0 3
// end ;
4565: END
// every 0 0$1 trigger russianAI = 1 do
4566: LD_EXP 13
4570: PUSH
4571: LD_INT 1
4573: EQUAL
4574: IFFALSE 4687
4576: GO 4578
4578: DISABLE
// begin enable ;
4579: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4580: LD_INT 3
4582: PPUSH
4583: LD_INT 22
4585: PPUSH
4586: LD_INT 7
4588: PPUSH
4589: LD_EXP 10
4593: PPUSH
4594: CALL 1925 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4598: LD_INT 3
4600: PPUSH
4601: LD_INT 8
4603: PPUSH
4604: LD_INT 7
4606: PPUSH
4607: LD_INT 14
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_INT 2
4622: PPUSH
4623: CALL_OW 12
4627: ARRAY
4628: PPUSH
4629: CALL 2316 0 4
// AttackVehicles ( 3 ) ;
4633: LD_INT 3
4635: PPUSH
4636: CALL 3471 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4640: LD_INT 3
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL 3167 0 2
// TimeLapsersAI ( 3 ) ;
4650: LD_INT 3
4652: PPUSH
4653: CALL 4097 0 1
// IntBazooka ( 3 ) ;
4657: LD_INT 3
4659: PPUSH
4660: CALL 3769 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4664: LD_INT 3
4666: PPUSH
4667: LD_INT 51
4669: PPUSH
4670: LD_INT 14
4672: PPUSH
4673: CALL 3024 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4677: LD_INT 3
4679: PPUSH
4680: LD_INT 7
4682: PPUSH
4683: CALL 4281 0 2
// end ;
4687: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4688: LD_INT 22
4690: PPUSH
4691: CALL_OW 303
4695: PUSH
4696: LD_INT 22
4698: PPUSH
4699: CALL_OW 255
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: OR
4708: IFFALSE 4723
4710: GO 4712
4712: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4713: LD_INT 3
4715: PPUSH
4716: LD_INT 22
4718: PPUSH
4719: CALL 2860 0 2
4723: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4724: LD_EXP 13
4728: PUSH
4729: LD_INT 1
4731: EQUAL
4732: PUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 50
4755: PUSH
4756: EMPTY
4757: LIST
4758: PUSH
4759: LD_INT 33
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 2
4771: PUSH
4772: LD_INT 34
4774: PUSH
4775: LD_INT 46
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 34
4784: PUSH
4785: LD_INT 45
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 34
4794: PUSH
4795: LD_INT 44
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 34
4804: PUSH
4805: LD_INT 49
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 34
4814: PUSH
4815: LD_INT 47
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: PUSH
4842: LD_INT 0
4844: EQUAL
4845: AND
4846: IFFALSE 5033
4848: GO 4850
4850: DISABLE
// begin enable ;
4851: ENABLE
// if russianRocketsAvalaible = 1 then
4852: LD_EXP 14
4856: PUSH
4857: LD_INT 1
4859: EQUAL
4860: IFFALSE 4917
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4862: LD_INT 3
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: LD_OWVAR 67
4886: ARRAY
4887: PPUSH
4888: LD_INT 46
4890: PUSH
4891: LD_INT 45
4893: PUSH
4894: LD_INT 44
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: LD_INT 24
4910: PPUSH
4911: CALL 3397 0 7
4915: GO 4974
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4917: LD_INT 3
4919: PPUSH
4920: LD_INT 1
4922: PPUSH
4923: LD_INT 3
4925: PUSH
4926: LD_INT 4
4928: PUSH
4929: LD_INT 4
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: PUSH
4937: LD_OWVAR 67
4941: ARRAY
4942: PPUSH
4943: LD_INT 46
4945: PUSH
4946: LD_INT 45
4948: PUSH
4949: LD_INT 44
4951: PUSH
4952: LD_INT 47
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: LD_INT 24
4969: PPUSH
4970: CALL 3397 0 7
// if russianTimeLapsers = 0 then
4974: LD_EXP 12
4978: PUSH
4979: LD_INT 0
4981: EQUAL
4982: IFFALSE 5033
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 40
4989: PPUSH
4990: LD_INT 1
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_OWVAR 67
5008: ARRAY
5009: PPUSH
5010: LD_INT 49
5012: PUSH
5013: LD_INT 49
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: LD_INT 3
5025: PPUSH
5026: LD_INT 24
5028: PPUSH
5029: CALL 3397 0 7
// end ; end_of_file
5033: END
// every 1 do var dec1 , dec2 ;
5034: GO 5036
5036: DISABLE
5037: LD_INT 0
5039: PPUSH
5040: PPUSH
// begin InGameOn ;
5041: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
5045: LD_INT 48
5047: PPUSH
5048: LD_STRING kappa
5050: PPUSH
5051: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5055: LD_INT 95
5057: PPUSH
5058: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5062: LD_INT 95
5064: PPUSH
5065: LD_INT 30
5067: PPUSH
5068: LD_INT 11
5070: PPUSH
5071: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5075: LD_INT 30
5077: PPUSH
5078: LD_INT 11
5080: PPUSH
5081: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5085: LD_EXP 5
5089: PPUSH
5090: LD_STRING D1-Pow-1
5092: PPUSH
5093: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5097: LD_EXP 1
5101: PPUSH
5102: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5106: LD_EXP 1
5110: PPUSH
5111: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5115: LD_EXP 1
5119: PPUSH
5120: LD_STRING D1-JMM-1
5122: PPUSH
5123: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5127: LD_EXP 5
5131: PPUSH
5132: LD_STRING D1-Pow-2
5134: PPUSH
5135: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5139: LD_EXP 1
5143: PPUSH
5144: LD_STRING D1-JMM-2
5146: PPUSH
5147: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5151: LD_EXP 1
5155: PPUSH
5156: LD_INT 95
5158: PPUSH
5159: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5163: LD_STRING M1
5165: PPUSH
5166: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5170: LD_INT 35
5172: PPUSH
5173: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5177: LD_EXP 1
5181: PPUSH
5182: LD_INT 95
5184: PPUSH
5185: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5189: LD_INT 95
5191: PPUSH
5192: LD_INT 51
5194: PPUSH
5195: LD_INT 21
5197: PPUSH
5198: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5202: LD_INT 95
5204: PPUSH
5205: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5209: LD_INT 95
5211: PPUSH
5212: LD_INT 5
5214: PPUSH
5215: CALL_OW 308
5219: IFFALSE 5170
// if JMMGirl = 1 then
5221: LD_EXP 7
5225: PUSH
5226: LD_INT 1
5228: EQUAL
5229: IFFALSE 5530
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5231: LD_EXP 2
5235: PPUSH
5236: LD_STRING D2J-Joan-1
5238: PPUSH
5239: CALL_OW 94
// dec1 = Query1 ;
5243: LD_ADDR_VAR 0 1
5247: PUSH
5248: CALL 1283 0 0
5252: ST_TO_ADDR
// if dec1 = 1 then
5253: LD_VAR 0 1
5257: PUSH
5258: LD_INT 1
5260: EQUAL
5261: IFFALSE 5508
// begin ComExitVehicle ( JMM ) ;
5263: LD_EXP 1
5267: PPUSH
5268: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5272: LD_EXP 1
5276: PPUSH
5277: LD_STRING D2J-JMM-1
5279: PPUSH
5280: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5284: LD_EXP 2
5288: PPUSH
5289: LD_STRING D2J-Joan-2
5291: PPUSH
5292: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5296: LD_EXP 1
5300: PPUSH
5301: LD_STRING D2J-JMM-2
5303: PPUSH
5304: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5308: LD_EXP 2
5312: PPUSH
5313: LD_STRING D2J-Joan-3
5315: PPUSH
5316: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5320: LD_EXP 5
5324: PPUSH
5325: LD_STRING DPowell-Pow-1
5327: PPUSH
5328: CALL_OW 94
// dec2 = Query2 ;
5332: LD_ADDR_VAR 0 2
5336: PUSH
5337: CALL 1338 0 0
5341: ST_TO_ADDR
// if dec2 = 1 then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5392
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5352: LD_EXP 1
5356: PPUSH
5357: LD_STRING D2Ja-JMM-1
5359: PPUSH
5360: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5364: LD_EXP 2
5368: PPUSH
5369: LD_STRING D2Ja-Joan-1
5371: PPUSH
5372: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5376: LD_EXP 1
5380: PPUSH
5381: LD_STRING D2Ja-JMM-2
5383: PPUSH
5384: CALL_OW 88
// InGameOff ;
5388: CALL_OW 9
// end ; if dec2 = 2 then
5392: LD_VAR 0 2
5396: PUSH
5397: LD_INT 2
5399: EQUAL
5400: IFFALSE 5474
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5402: LD_EXP 1
5406: PPUSH
5407: LD_STRING D2Jb-JMM-1
5409: PPUSH
5410: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5414: LD_EXP 2
5418: PPUSH
5419: LD_STRING D2Jb-Joan-1
5421: PPUSH
5422: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5426: LD_EXP 1
5430: PPUSH
5431: LD_STRING D2Jb-JMM-2
5433: PPUSH
5434: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5438: LD_EXP 2
5442: PPUSH
5443: LD_STRING D2Jb-Joan-2
5445: PPUSH
5446: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5450: LD_EXP 1
5454: PPUSH
5455: LD_STRING D2Jb-JMM-3
5457: PPUSH
5458: CALL_OW 88
// fastEnd = 1 ;
5462: LD_ADDR_EXP 15
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// FinishMission ;
5470: CALL 9449 0 0
// end ; if dec2 = 3 then
5474: LD_VAR 0 2
5478: PUSH
5479: LD_INT 3
5481: EQUAL
5482: IFFALSE 5508
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5484: LD_EXP 2
5488: PPUSH
5489: LD_STRING D2Jc-Joan-1
5491: PPUSH
5492: CALL_OW 94
// fastEnd = 1 ;
5496: LD_ADDR_EXP 15
5500: PUSH
5501: LD_INT 1
5503: ST_TO_ADDR
// FinishMission ;
5504: CALL 9449 0 0
// end ; end ; if dec1 = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 2
5515: EQUAL
5516: IFFALSE 5530
// begin fastEnd = 1 ;
5518: LD_ADDR_EXP 15
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// FinishMission ;
5526: CALL 9449 0 0
// end ; end ; if JMMGirl = 2 then
5530: LD_EXP 7
5534: PUSH
5535: LD_INT 2
5537: EQUAL
5538: IFFALSE 5851
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5540: LD_EXP 3
5544: PPUSH
5545: LD_STRING D2L-Lisa-1
5547: PPUSH
5548: CALL_OW 94
// dec1 = Query1 ;
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: CALL 1283 0 0
5561: ST_TO_ADDR
// if dec1 = 1 then
5562: LD_VAR 0 1
5566: PUSH
5567: LD_INT 1
5569: EQUAL
5570: IFFALSE 5829
// begin ComExitVehicle ( JMM ) ;
5572: LD_EXP 1
5576: PPUSH
5577: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5581: LD_EXP 1
5585: PPUSH
5586: LD_STRING D2L-JMM-1
5588: PPUSH
5589: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5593: LD_EXP 3
5597: PPUSH
5598: LD_STRING D2L-Lisa-2
5600: PPUSH
5601: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5605: LD_EXP 1
5609: PPUSH
5610: LD_STRING D2L-JMM-2
5612: PPUSH
5613: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5617: LD_EXP 3
5621: PPUSH
5622: LD_STRING D2L-Lisa-3
5624: PPUSH
5625: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5629: LD_EXP 5
5633: PPUSH
5634: LD_STRING DPowell-Pow-1
5636: PPUSH
5637: CALL_OW 94
// dec2 = Query2 ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: CALL 1338 0 0
5650: ST_TO_ADDR
// if dec2 = 1 then
5651: LD_VAR 0 2
5655: PUSH
5656: LD_INT 1
5658: EQUAL
5659: IFFALSE 5725
// begin Say ( JMM , D2La-JMM-1 ) ;
5661: LD_EXP 1
5665: PPUSH
5666: LD_STRING D2La-JMM-1
5668: PPUSH
5669: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5673: LD_EXP 3
5677: PPUSH
5678: LD_STRING D2La-Lisa-1
5680: PPUSH
5681: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2La-JMM-2
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5697: LD_EXP 3
5701: PPUSH
5702: LD_STRING D2La-Lisa-2
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2La-JMM-3
5716: PPUSH
5717: CALL_OW 88
// InGameOff ;
5721: CALL_OW 9
// end ; if dec2 = 2 then
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: EQUAL
5733: IFFALSE 5795
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5735: LD_EXP 1
5739: PPUSH
5740: LD_STRING D2Lb-JMM-1
5742: PPUSH
5743: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5747: LD_EXP 3
5751: PPUSH
5752: LD_STRING D2Lb-Lisa-1
5754: PPUSH
5755: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5759: LD_EXP 1
5763: PPUSH
5764: LD_STRING D2Lb-JMM-2
5766: PPUSH
5767: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5771: LD_EXP 3
5775: PPUSH
5776: LD_STRING D2Lb-Lisa-2
5778: PPUSH
5779: CALL_OW 94
// fastEnd = 1 ;
5783: LD_ADDR_EXP 15
5787: PUSH
5788: LD_INT 1
5790: ST_TO_ADDR
// FinishMission ;
5791: CALL 9449 0 0
// end ; if dec2 = 3 then
5795: LD_VAR 0 2
5799: PUSH
5800: LD_INT 3
5802: EQUAL
5803: IFFALSE 5829
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5805: LD_EXP 3
5809: PPUSH
5810: LD_STRING D2Lc-Lisa-1
5812: PPUSH
5813: CALL_OW 94
// fastEnd = 1 ;
5817: LD_ADDR_EXP 15
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// FinishMission ;
5825: CALL 9449 0 0
// end ; end ; if dec1 = 2 then
5829: LD_VAR 0 1
5833: PUSH
5834: LD_INT 2
5836: EQUAL
5837: IFFALSE 5851
// begin fastEnd = 1 ;
5839: LD_ADDR_EXP 15
5843: PUSH
5844: LD_INT 1
5846: ST_TO_ADDR
// FinishMission ;
5847: CALL 9449 0 0
// end ; end ; if JMMGirl = 3 then
5851: LD_EXP 7
5855: PUSH
5856: LD_INT 3
5858: EQUAL
5859: IFFALSE 6076
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5861: LD_EXP 4
5865: PPUSH
5866: LD_STRING D2X-Con-1
5868: PPUSH
5869: CALL_OW 94
// dec1 = Query1 ;
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: CALL 1283 0 0
5882: ST_TO_ADDR
// if dec1 = 1 then
5883: LD_VAR 0 1
5887: PUSH
5888: LD_INT 1
5890: EQUAL
5891: IFFALSE 6054
// begin ComExitVehicle ( JMM ) ;
5893: LD_EXP 1
5897: PPUSH
5898: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D2X-JMM-1
5909: PPUSH
5910: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5914: LD_EXP 4
5918: PPUSH
5919: LD_STRING D2X-Con-2
5921: PPUSH
5922: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5926: LD_EXP 5
5930: PPUSH
5931: LD_STRING DPowell-Pow-1
5933: PPUSH
5934: CALL_OW 94
// dec2 = Query2 ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: CALL 1338 0 0
5947: ST_TO_ADDR
// if dec2 = 1 then
5948: LD_VAR 0 2
5952: PUSH
5953: LD_INT 1
5955: EQUAL
5956: IFFALSE 5974
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5958: LD_EXP 1
5962: PPUSH
5963: LD_STRING D2Xa-JMM-1
5965: PPUSH
5966: CALL_OW 88
// InGameOff ;
5970: CALL_OW 9
// end ; if dec2 = 2 then
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: EQUAL
5982: IFFALSE 6020
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5984: LD_EXP 1
5988: PPUSH
5989: LD_STRING D2Xb-JMM-1
5991: PPUSH
5992: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5996: LD_EXP 4
6000: PPUSH
6001: LD_STRING D2Xb-Con-1
6003: PPUSH
6004: CALL_OW 94
// fastEnd = 1 ;
6008: LD_ADDR_EXP 15
6012: PUSH
6013: LD_INT 1
6015: ST_TO_ADDR
// FinishMission ;
6016: CALL 9449 0 0
// end ; if dec2 = 3 then
6020: LD_VAR 0 2
6024: PUSH
6025: LD_INT 3
6027: EQUAL
6028: IFFALSE 6054
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6030: LD_EXP 4
6034: PPUSH
6035: LD_STRING D2Xc-Con-1
6037: PPUSH
6038: CALL_OW 94
// fastEnd = 1 ;
6042: LD_ADDR_EXP 15
6046: PUSH
6047: LD_INT 1
6049: ST_TO_ADDR
// FinishMission ;
6050: CALL 9449 0 0
// end ; end ; if dec1 = 2 then
6054: LD_VAR 0 1
6058: PUSH
6059: LD_INT 2
6061: EQUAL
6062: IFFALSE 6076
// begin fastEnd = 1 ;
6064: LD_ADDR_EXP 15
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// FinishMission ;
6072: CALL 9449 0 0
// end ; end ; end ;
6076: PPOPN 2
6078: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6079: LD_EXP 1
6083: PPUSH
6084: LD_INT 6
6086: PPUSH
6087: CALL_OW 308
6091: IFFALSE 6857
6093: GO 6095
6095: DISABLE
// begin InGameOn ;
6096: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6100: LD_INT 35
6102: PPUSH
6103: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6107: LD_EXP 1
6111: PPUSH
6112: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6116: LD_EXP 1
6120: PPUSH
6121: LD_INT 62
6123: PPUSH
6124: LD_INT 104
6126: PPUSH
6127: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6131: LD_EXP 1
6135: PPUSH
6136: LD_EXP 2
6140: PPUSH
6141: CALL_OW 296
6145: PUSH
6146: LD_INT 4
6148: LESS
6149: PUSH
6150: LD_EXP 1
6154: PPUSH
6155: LD_EXP 3
6159: PPUSH
6160: CALL_OW 296
6164: PUSH
6165: LD_INT 4
6167: LESS
6168: OR
6169: PUSH
6170: LD_EXP 1
6174: PPUSH
6175: LD_EXP 4
6179: PPUSH
6180: CALL_OW 296
6184: PUSH
6185: LD_INT 4
6187: LESS
6188: OR
6189: IFFALSE 6100
// case JMMGirl of 1 :
6191: LD_EXP 7
6195: PUSH
6196: LD_INT 1
6198: DOUBLE
6199: EQUAL
6200: IFTRUE 6204
6202: GO 6416
6204: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6205: LD_INT 22
6207: PUSH
6208: LD_INT 4
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PPUSH
6215: CALL_OW 69
6219: PPUSH
6220: LD_INT 1
6222: PPUSH
6223: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6227: LD_EXP 2
6231: PPUSH
6232: LD_EXP 1
6236: PPUSH
6237: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6241: LD_EXP 1
6245: PPUSH
6246: LD_EXP 2
6250: PPUSH
6251: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6255: LD_EXP 2
6259: PUSH
6260: LD_EXP 1
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 87
// wait ( 0 0$1 ) ;
6273: LD_INT 35
6275: PPUSH
6276: CALL_OW 67
// DialogueOn ;
6280: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6284: LD_EXP 2
6288: PPUSH
6289: LD_STRING D3J-Joan-1
6291: PPUSH
6292: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6296: LD_EXP 1
6300: PPUSH
6301: LD_STRING D3J-JMM-1
6303: PPUSH
6304: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6308: LD_EXP 2
6312: PPUSH
6313: LD_STRING D3J-Joan-2
6315: PPUSH
6316: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6320: LD_EXP 1
6324: PPUSH
6325: LD_STRING D3J-JMM-2
6327: PPUSH
6328: CALL_OW 88
// wait ( 0 0$1 ) ;
6332: LD_INT 35
6334: PPUSH
6335: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D4-JMM-1
6346: PPUSH
6347: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6351: LD_EXP 2
6355: PPUSH
6356: LD_STRING D4-Joan-1
6358: PPUSH
6359: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6363: LD_EXP 1
6367: PPUSH
6368: LD_STRING D4-JMM-2
6370: PPUSH
6371: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6375: LD_EXP 2
6379: PPUSH
6380: LD_STRING D4-Joan-2
6382: PPUSH
6383: CALL_OW 88
// DialogueOff ;
6387: CALL_OW 7
// InGameOff ;
6391: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6395: LD_STRING M2J
6397: PPUSH
6398: CALL_OW 337
// SaveForQuickRestart ;
6402: CALL_OW 22
// russianAI = 1 ;
6406: LD_ADDR_EXP 13
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// end ; 2 :
6414: GO 6857
6416: LD_INT 2
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6636
6424: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6425: LD_INT 22
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PPUSH
6435: CALL_OW 69
6439: PPUSH
6440: LD_INT 1
6442: PPUSH
6443: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6447: LD_EXP 3
6451: PPUSH
6452: LD_EXP 1
6456: PPUSH
6457: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6461: LD_EXP 1
6465: PPUSH
6466: LD_EXP 3
6470: PPUSH
6471: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6475: LD_EXP 3
6479: PUSH
6480: LD_EXP 1
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PPUSH
6489: CALL_OW 87
// wait ( 0 0$1 ) ;
6493: LD_INT 35
6495: PPUSH
6496: CALL_OW 67
// DialogueOn ;
6500: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6504: LD_EXP 3
6508: PPUSH
6509: LD_STRING D3L-Lisa-1
6511: PPUSH
6512: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6516: LD_EXP 1
6520: PPUSH
6521: LD_STRING D3L-JMM-1
6523: PPUSH
6524: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6528: LD_EXP 3
6532: PPUSH
6533: LD_STRING D3L-Lisa-2
6535: PPUSH
6536: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6540: LD_EXP 1
6544: PPUSH
6545: LD_STRING D3L-JMM-2
6547: PPUSH
6548: CALL_OW 88
// wait ( 0 0$1 ) ;
6552: LD_INT 35
6554: PPUSH
6555: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6559: LD_EXP 1
6563: PPUSH
6564: LD_STRING D4-JMM-1
6566: PPUSH
6567: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6571: LD_EXP 3
6575: PPUSH
6576: LD_STRING D4-Lisa-1
6578: PPUSH
6579: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6583: LD_EXP 1
6587: PPUSH
6588: LD_STRING D4-JMM-1
6590: PPUSH
6591: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6595: LD_EXP 3
6599: PPUSH
6600: LD_STRING D4-Lisa-2
6602: PPUSH
6603: CALL_OW 88
// DialogueOff ;
6607: CALL_OW 7
// InGameOff ;
6611: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6615: LD_STRING M2L
6617: PPUSH
6618: CALL_OW 337
// SaveForQuickRestart ;
6622: CALL_OW 22
// russianAI = 1 ;
6626: LD_ADDR_EXP 13
6630: PUSH
6631: LD_INT 1
6633: ST_TO_ADDR
// end ; 3 :
6634: GO 6857
6636: LD_INT 3
6638: DOUBLE
6639: EQUAL
6640: IFTRUE 6644
6642: GO 6856
6644: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6645: LD_INT 22
6647: PUSH
6648: LD_INT 4
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PPUSH
6660: LD_INT 1
6662: PPUSH
6663: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6667: LD_EXP 4
6671: PPUSH
6672: LD_EXP 1
6676: PPUSH
6677: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6681: LD_EXP 1
6685: PPUSH
6686: LD_EXP 4
6690: PPUSH
6691: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6695: LD_EXP 2
6699: PUSH
6700: LD_EXP 1
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 87
// wait ( 0 0$1 ) ;
6713: LD_INT 35
6715: PPUSH
6716: CALL_OW 67
// DialogueOn ;
6720: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6724: LD_EXP 4
6728: PPUSH
6729: LD_STRING D3X-Con-1
6731: PPUSH
6732: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6736: LD_EXP 1
6740: PPUSH
6741: LD_STRING D3J-JMM-1
6743: PPUSH
6744: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6748: LD_EXP 4
6752: PPUSH
6753: LD_STRING D3J-Joan-2
6755: PPUSH
6756: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6760: LD_EXP 1
6764: PPUSH
6765: LD_STRING D3J-JMM-2
6767: PPUSH
6768: CALL_OW 88
// wait ( 0 0$1 ) ;
6772: LD_INT 35
6774: PPUSH
6775: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6779: LD_EXP 1
6783: PPUSH
6784: LD_STRING D4-JMM-1
6786: PPUSH
6787: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6791: LD_EXP 4
6795: PPUSH
6796: LD_STRING D4-Con-1
6798: PPUSH
6799: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6803: LD_EXP 1
6807: PPUSH
6808: LD_STRING D4-JMM-2
6810: PPUSH
6811: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6815: LD_EXP 4
6819: PPUSH
6820: LD_STRING D4-Con-2
6822: PPUSH
6823: CALL_OW 88
// DialogueOff ;
6827: CALL_OW 7
// InGameOff ;
6831: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6835: LD_STRING M2X
6837: PPUSH
6838: CALL_OW 337
// SaveForQuickRestart ;
6842: CALL_OW 22
// russianAI = 1 ;
6846: LD_ADDR_EXP 13
6850: PUSH
6851: LD_INT 1
6853: ST_TO_ADDR
// end ; end ;
6854: GO 6857
6856: POP
// end ;
6857: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6858: LD_INT 32
6860: PPUSH
6861: CALL_OW 306
6865: IFFALSE 7198
6867: GO 6869
6869: DISABLE
// begin case JMMGirl of 1 :
6870: LD_EXP 7
6874: PUSH
6875: LD_INT 1
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 7005
6883: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6884: LD_EXP 1
6888: PPUSH
6889: LD_STRING D6J-JMM-1
6891: PPUSH
6892: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6896: LD_STRING 13f_Denis
6898: PPUSH
6899: CALL_OW 28
6903: PUSH
6904: LD_INT 1
6906: EQUAL
6907: PUSH
6908: LD_STRING 13s_Denis
6910: PPUSH
6911: CALL_OW 28
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: OR
6920: IFFALSE 6960
// begin Say ( Joan , D6J-Joan-1 ) ;
6922: LD_EXP 2
6926: PPUSH
6927: LD_STRING D6J-Joan-1
6929: PPUSH
6930: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING D6J-JMM-2
6941: PPUSH
6942: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6946: LD_EXP 2
6950: PPUSH
6951: LD_STRING D6J-Joan-2
6953: PPUSH
6954: CALL_OW 88
// end else
6958: GO 6972
// begin Say ( Joan , D6J-Joan-2a ) ;
6960: LD_EXP 2
6964: PPUSH
6965: LD_STRING D6J-Joan-2a
6967: PPUSH
6968: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D6J-JMM-3
6979: PPUSH
6980: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6984: LD_EXP 2
6988: PPUSH
6989: LD_STRING D6J-Joan-3
6991: PPUSH
6992: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6996: LD_STRING M3
6998: PPUSH
6999: CALL_OW 337
// end ; 2 :
7003: GO 7198
7005: LD_INT 2
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7013
7011: GO 7071
7013: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7014: LD_EXP 1
7018: PPUSH
7019: LD_STRING D6L-JMM-1
7021: PPUSH
7022: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7026: LD_EXP 3
7030: PPUSH
7031: LD_STRING D6L-Lisa-1
7033: PPUSH
7034: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7038: LD_EXP 1
7042: PPUSH
7043: LD_STRING D6L-JMM-2
7045: PPUSH
7046: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7050: LD_EXP 3
7054: PPUSH
7055: LD_STRING D6L-Lisa-2
7057: PPUSH
7058: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7062: LD_STRING M3
7064: PPUSH
7065: CALL_OW 337
// end ; 3 :
7069: GO 7198
7071: LD_INT 3
7073: DOUBLE
7074: EQUAL
7075: IFTRUE 7079
7077: GO 7197
7079: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7080: LD_EXP 1
7084: PPUSH
7085: LD_STRING D6X-JMM-1
7087: PPUSH
7088: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7092: LD_EXP 4
7096: PPUSH
7097: LD_STRING D6X-Con-1
7099: PPUSH
7100: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7104: LD_EXP 1
7108: PPUSH
7109: LD_STRING D6X-JMM-2
7111: PPUSH
7112: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7116: LD_EXP 4
7120: PPUSH
7121: LD_STRING D6X-Con-2
7123: PPUSH
7124: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7128: LD_EXP 1
7132: PPUSH
7133: LD_STRING D6X-JMM-3
7135: PPUSH
7136: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7140: LD_EXP 4
7144: PPUSH
7145: LD_STRING D6X-Con-3
7147: PPUSH
7148: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7152: LD_EXP 1
7156: PPUSH
7157: LD_STRING D6X-JMM-4
7159: PPUSH
7160: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7164: LD_EXP 4
7168: PPUSH
7169: LD_STRING D6X-Con-4
7171: PPUSH
7172: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7176: LD_EXP 1
7180: PPUSH
7181: LD_STRING D6X-JMM-5
7183: PPUSH
7184: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7188: LD_STRING M3
7190: PPUSH
7191: CALL_OW 337
// end ; end ;
7195: GO 7198
7197: POP
// end ;
7198: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7199: LD_INT 22
7201: PUSH
7202: LD_INT 1
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 33
7211: PUSH
7212: LD_INT 2
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: PPUSH
7228: CALL_OW 306
7232: IFFALSE 7378
7234: GO 7236
7236: DISABLE
// begin case JMMGirl of 1 :
7237: LD_EXP 7
7241: PUSH
7242: LD_INT 1
7244: DOUBLE
7245: EQUAL
7246: IFTRUE 7250
7248: GO 7287
7250: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7251: LD_EXP 1
7255: PPUSH
7256: LD_STRING D5-JMM-1
7258: PPUSH
7259: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7263: LD_INT 77
7265: PPUSH
7266: LD_INT 87
7268: PPUSH
7269: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7273: LD_EXP 2
7277: PPUSH
7278: LD_STRING D5-Joan-1
7280: PPUSH
7281: CALL_OW 88
// end ; 2 :
7285: GO 7378
7287: LD_INT 2
7289: DOUBLE
7290: EQUAL
7291: IFTRUE 7295
7293: GO 7332
7295: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7296: LD_EXP 1
7300: PPUSH
7301: LD_STRING D5-JMM-1
7303: PPUSH
7304: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7308: LD_INT 77
7310: PPUSH
7311: LD_INT 87
7313: PPUSH
7314: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7318: LD_EXP 3
7322: PPUSH
7323: LD_STRING D5-Lisa-1
7325: PPUSH
7326: CALL_OW 88
// end ; 3 :
7330: GO 7378
7332: LD_INT 3
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7377
7340: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7341: LD_EXP 1
7345: PPUSH
7346: LD_STRING D5-JMM-1
7348: PPUSH
7349: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7353: LD_INT 77
7355: PPUSH
7356: LD_INT 87
7358: PPUSH
7359: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7363: LD_EXP 4
7367: PPUSH
7368: LD_STRING D5-Con-1
7370: PPUSH
7371: CALL_OW 88
// end ; end ;
7375: GO 7378
7377: POP
// end ;
7378: END
// every 15 15$0 do
7379: GO 7381
7381: DISABLE
// begin DialogueOn ;
7382: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7386: LD_EXP 5
7390: PPUSH
7391: LD_STRING D7-Pow-1
7393: PPUSH
7394: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7398: LD_EXP 1
7402: PPUSH
7403: LD_STRING D7-JMM-1
7405: PPUSH
7406: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7410: LD_EXP 5
7414: PPUSH
7415: LD_STRING D7-Pow-2
7417: PPUSH
7418: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7422: LD_EXP 1
7426: PPUSH
7427: LD_STRING D7-JMM-2
7429: PPUSH
7430: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7434: LD_EXP 5
7438: PPUSH
7439: LD_STRING D7-Pow-3
7441: PPUSH
7442: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7446: LD_EXP 1
7450: PPUSH
7451: LD_STRING D7-JMM-3
7453: PPUSH
7454: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7458: LD_EXP 5
7462: PPUSH
7463: LD_STRING D7-Pow-4
7465: PPUSH
7466: CALL_OW 94
// DialogueOff ;
7470: CALL_OW 7
// end ; end_of_file
7474: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7475: LD_VAR 0 1
7479: PPUSH
7480: CALL_OW 255
7484: PUSH
7485: LD_INT 3
7487: EQUAL
7488: IFFALSE 7562
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7490: LD_ADDR_EXP 10
7494: PUSH
7495: LD_EXP 10
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: CALL_OW 3
7507: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7508: LD_ADDR_EXP 10
7512: PUSH
7513: LD_EXP 10
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 3
7525: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7526: LD_ADDR_EXP 10
7530: PUSH
7531: LD_EXP 10
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: CALL_OW 3
7543: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7544: LD_ADDR_EXP 10
7548: PUSH
7549: LD_EXP 10
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 3
7561: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 255
7571: PUSH
7572: LD_INT 3
7574: EQUAL
7575: PUSH
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 266
7585: PUSH
7586: LD_INT 0
7588: EQUAL
7589: PUSH
7590: LD_VAR 0 1
7594: PPUSH
7595: CALL_OW 266
7599: PUSH
7600: LD_INT 2
7602: EQUAL
7603: OR
7604: PUSH
7605: LD_VAR 0 1
7609: PPUSH
7610: CALL_OW 266
7614: PUSH
7615: LD_INT 4
7617: EQUAL
7618: OR
7619: PUSH
7620: EMPTY
7621: LIST
7622: AND
7623: IFFALSE 7634
// ComUpgrade ( building ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 255
7643: PUSH
7644: LD_INT 3
7646: EQUAL
7647: PUSH
7648: LD_VAR 0 1
7652: PPUSH
7653: CALL_OW 266
7657: PUSH
7658: LD_INT 32
7660: EQUAL
7661: AND
7662: IFFALSE 7703
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_INT 42
7671: PUSH
7672: LD_INT 43
7674: PUSH
7675: LD_INT 44
7677: PUSH
7678: LD_INT 46
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 1
7689: PPUSH
7690: LD_INT 4
7692: PPUSH
7693: CALL_OW 12
7697: ARRAY
7698: PPUSH
7699: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7703: LD_VAR 0 1
7707: PPUSH
7708: CALL_OW 255
7712: PUSH
7713: LD_INT 3
7715: EQUAL
7716: PUSH
7717: LD_VAR 0 1
7721: PPUSH
7722: CALL_OW 266
7726: PUSH
7727: LD_INT 33
7729: EQUAL
7730: AND
7731: IFFALSE 7772
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_INT 42
7740: PUSH
7741: LD_INT 43
7743: PUSH
7744: LD_INT 44
7746: PUSH
7747: LD_INT 46
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 1
7758: PPUSH
7759: LD_INT 4
7761: PPUSH
7762: CALL_OW 12
7766: ARRAY
7767: PPUSH
7768: CALL_OW 208
// end ;
7772: PPOPN 1
7774: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 255
7784: PUSH
7785: LD_INT 3
7787: EQUAL
7788: PUSH
7789: LD_VAR 0 1
7793: PPUSH
7794: CALL_OW 247
7798: PUSH
7799: LD_INT 3
7801: EQUAL
7802: AND
7803: IFFALSE 8495
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 266
7814: PUSH
7815: LD_INT 31
7817: EQUAL
7818: PUSH
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 266
7828: PUSH
7829: LD_INT 32
7831: EQUAL
7832: OR
7833: PUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 266
7843: PUSH
7844: LD_INT 36
7846: EQUAL
7847: OR
7848: PUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 266
7858: PUSH
7859: LD_INT 0
7861: EQUAL
7862: OR
7863: PUSH
7864: LD_VAR 0 1
7868: PPUSH
7869: CALL_OW 266
7873: PUSH
7874: LD_INT 24
7876: EQUAL
7877: OR
7878: PUSH
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 266
7888: PUSH
7889: LD_INT 17
7891: EQUAL
7892: OR
7893: PUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 266
7903: PUSH
7904: LD_INT 25
7906: EQUAL
7907: OR
7908: PUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 266
7918: PUSH
7919: LD_INT 19
7921: EQUAL
7922: OR
7923: PUSH
7924: LD_VAR 0 1
7928: PPUSH
7929: CALL_OW 266
7933: PUSH
7934: LD_INT 20
7936: EQUAL
7937: OR
7938: PUSH
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 266
7948: PUSH
7949: LD_INT 18
7951: EQUAL
7952: OR
7953: PUSH
7954: LD_VAR 0 1
7958: PPUSH
7959: CALL_OW 266
7963: PUSH
7964: LD_INT 21
7966: EQUAL
7967: OR
7968: PUSH
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 266
7978: PUSH
7979: LD_INT 23
7981: EQUAL
7982: OR
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 266
7993: PUSH
7994: LD_INT 16
7996: EQUAL
7997: OR
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 266
8008: PUSH
8009: LD_INT 6
8011: EQUAL
8012: OR
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 266
8023: PUSH
8024: LD_INT 29
8026: EQUAL
8027: OR
8028: PUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 266
8038: PUSH
8039: LD_INT 26
8041: EQUAL
8042: OR
8043: PUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: CALL_OW 266
8053: PUSH
8054: LD_INT 30
8056: EQUAL
8057: OR
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: CALL_OW 266
8068: PUSH
8069: LD_INT 28
8071: EQUAL
8072: OR
8073: PUSH
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 266
8083: PUSH
8084: LD_INT 27
8086: EQUAL
8087: OR
8088: PUSH
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 266
8098: PUSH
8099: LD_INT 33
8101: EQUAL
8102: OR
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 266
8113: PUSH
8114: LD_INT 2
8116: EQUAL
8117: OR
8118: PUSH
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL_OW 266
8128: PUSH
8129: LD_INT 4
8131: EQUAL
8132: OR
8133: IFFALSE 8219
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8135: LD_ADDR_EXP 10
8139: PUSH
8140: LD_EXP 10
8144: PUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 266
8154: ADD
8155: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8156: LD_ADDR_EXP 10
8160: PUSH
8161: LD_EXP 10
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 250
8175: ADD
8176: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8177: LD_ADDR_EXP 10
8181: PUSH
8182: LD_EXP 10
8186: PUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 251
8196: ADD
8197: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8198: LD_ADDR_EXP 10
8202: PUSH
8203: LD_EXP 10
8207: PUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 254
8217: ADD
8218: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 266
8228: PUSH
8229: LD_INT 1
8231: EQUAL
8232: IFFALSE 8311
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8234: LD_ADDR_EXP 10
8238: PUSH
8239: LD_EXP 10
8243: PUSH
8244: LD_INT 0
8246: ADD
8247: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8248: LD_ADDR_EXP 10
8252: PUSH
8253: LD_EXP 10
8257: PUSH
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 250
8267: ADD
8268: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8269: LD_ADDR_EXP 10
8273: PUSH
8274: LD_EXP 10
8278: PUSH
8279: LD_VAR 0 1
8283: PPUSH
8284: CALL_OW 251
8288: ADD
8289: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8290: LD_ADDR_EXP 10
8294: PUSH
8295: LD_EXP 10
8299: PUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 254
8309: ADD
8310: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 266
8320: PUSH
8321: LD_INT 3
8323: EQUAL
8324: IFFALSE 8403
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8326: LD_ADDR_EXP 10
8330: PUSH
8331: LD_EXP 10
8335: PUSH
8336: LD_INT 2
8338: ADD
8339: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8340: LD_ADDR_EXP 10
8344: PUSH
8345: LD_EXP 10
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 250
8359: ADD
8360: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8361: LD_ADDR_EXP 10
8365: PUSH
8366: LD_EXP 10
8370: PUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 251
8380: ADD
8381: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8382: LD_ADDR_EXP 10
8386: PUSH
8387: LD_EXP 10
8391: PUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 254
8401: ADD
8402: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 266
8412: PUSH
8413: LD_INT 5
8415: EQUAL
8416: IFFALSE 8495
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8418: LD_ADDR_EXP 10
8422: PUSH
8423: LD_EXP 10
8427: PUSH
8428: LD_INT 4
8430: ADD
8431: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8432: LD_ADDR_EXP 10
8436: PUSH
8437: LD_EXP 10
8441: PUSH
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 250
8451: ADD
8452: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8453: LD_ADDR_EXP 10
8457: PUSH
8458: LD_EXP 10
8462: PUSH
8463: LD_VAR 0 1
8467: PPUSH
8468: CALL_OW 251
8472: ADD
8473: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8474: LD_ADDR_EXP 10
8478: PUSH
8479: LD_EXP 10
8483: PUSH
8484: LD_VAR 0 1
8488: PPUSH
8489: CALL_OW 254
8493: ADD
8494: ST_TO_ADDR
// end ; end ; end ;
8495: PPOPN 1
8497: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8498: LD_VAR 0 2
8502: PUSH
8503: LD_INT 1
8505: EQUAL
8506: PUSH
8507: LD_VAR 0 2
8511: PUSH
8512: LD_INT 40
8514: EQUAL
8515: OR
8516: IFFALSE 8640
// if GetSide ( vehicle ) = 3 then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 255
8527: PUSH
8528: LD_INT 3
8530: EQUAL
8531: IFFALSE 8640
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8533: LD_VAR 0 1
8537: PPUSH
8538: CALL_OW 264
8542: PUSH
8543: LD_INT 47
8545: EQUAL
8546: PUSH
8547: LD_VAR 0 1
8551: PPUSH
8552: CALL_OW 264
8556: PUSH
8557: LD_INT 46
8559: EQUAL
8560: OR
8561: PUSH
8562: LD_VAR 0 1
8566: PPUSH
8567: CALL_OW 264
8571: PUSH
8572: LD_INT 45
8574: EQUAL
8575: OR
8576: PUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: CALL_OW 264
8586: PUSH
8587: LD_INT 44
8589: EQUAL
8590: OR
8591: IFFALSE 8609
// russianTanks = russianTanks ^ vehicle ;
8593: LD_ADDR_EXP 11
8597: PUSH
8598: LD_EXP 11
8602: PUSH
8603: LD_VAR 0 1
8607: ADD
8608: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 264
8618: PUSH
8619: LD_INT 49
8621: EQUAL
8622: IFFALSE 8640
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8624: LD_ADDR_EXP 12
8628: PUSH
8629: LD_EXP 12
8633: PUSH
8634: LD_VAR 0 1
8638: ADD
8639: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8640: LD_VAR 0 1
8644: PPUSH
8645: CALL_OW 255
8649: PUSH
8650: LD_INT 1
8652: EQUAL
8653: PUSH
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 264
8663: PUSH
8664: LD_INT 10
8666: EQUAL
8667: AND
8668: IFFALSE 8684
// amLaserCounter = amLaserCounter + 1 ;
8670: LD_ADDR_EXP 9
8674: PUSH
8675: LD_EXP 9
8679: PUSH
8680: LD_INT 1
8682: PLUS
8683: ST_TO_ADDR
// end ;
8684: PPOPN 2
8686: END
// on UnitGoesToRed ( unit ) do var i ;
8687: LD_INT 0
8689: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 255
8699: PUSH
8700: LD_INT 3
8702: EQUAL
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 247
8713: PUSH
8714: LD_INT 2
8716: EQUAL
8717: AND
8718: IFFALSE 8836
// begin if russianTanks > 0 then
8720: LD_EXP 11
8724: PUSH
8725: LD_INT 0
8727: GREATER
8728: IFFALSE 8778
// for i in russianTanks do
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: LD_EXP 11
8739: PUSH
8740: FOR_IN
8741: IFFALSE 8776
// if i = unit then
8743: LD_VAR 0 2
8747: PUSH
8748: LD_VAR 0 1
8752: EQUAL
8753: IFFALSE 8774
// russianTanks = russianTanks diff [ unit ] ;
8755: LD_ADDR_EXP 11
8759: PUSH
8760: LD_EXP 11
8764: PUSH
8765: LD_VAR 0 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: DIFF
8773: ST_TO_ADDR
8774: GO 8740
8776: POP
8777: POP
// if russianTimeLapsers > 0 then
8778: LD_EXP 12
8782: PUSH
8783: LD_INT 0
8785: GREATER
8786: IFFALSE 8836
// for i in russianTimeLapsers do
8788: LD_ADDR_VAR 0 2
8792: PUSH
8793: LD_EXP 12
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8834
// if i = unit then
8801: LD_VAR 0 2
8805: PUSH
8806: LD_VAR 0 1
8810: EQUAL
8811: IFFALSE 8832
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8813: LD_ADDR_EXP 12
8817: PUSH
8818: LD_EXP 12
8822: PUSH
8823: LD_VAR 0 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: DIFF
8831: ST_TO_ADDR
8832: GO 8798
8834: POP
8835: POP
// end ; end ; end_of_file
8836: PPOPN 2
8838: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8839: LD_EXP 1
8843: PPUSH
8844: CALL_OW 310
8848: PPUSH
8849: LD_INT 12
8851: PPUSH
8852: CALL_OW 308
8856: PUSH
8857: LD_EXP 15
8861: PUSH
8862: LD_INT 0
8864: EQUAL
8865: AND
8866: IFFALSE 9308
8868: GO 8870
8870: DISABLE
8871: LD_INT 0
8873: PPUSH
8874: PPUSH
// begin enable ;
8875: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8876: LD_ADDR_VAR 0 1
8880: PUSH
8881: LD_EXP 1
8885: PPUSH
8886: CALL_OW 310
8890: ST_TO_ADDR
// if JMMGirl = 1 then
8891: LD_EXP 7
8895: PUSH
8896: LD_INT 1
8898: EQUAL
8899: IFFALSE 8916
// JMMGirlVeh = IsInUnit ( Joan ) ;
8901: LD_ADDR_VAR 0 2
8905: PUSH
8906: LD_EXP 2
8910: PPUSH
8911: CALL_OW 310
8915: ST_TO_ADDR
// if JMMGirl = 2 then
8916: LD_EXP 7
8920: PUSH
8921: LD_INT 2
8923: EQUAL
8924: IFFALSE 8941
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8926: LD_ADDR_VAR 0 2
8930: PUSH
8931: LD_EXP 3
8935: PPUSH
8936: CALL_OW 310
8940: ST_TO_ADDR
// if JMMGirl = 3 then
8941: LD_EXP 7
8945: PUSH
8946: LD_INT 3
8948: EQUAL
8949: IFFALSE 8966
// JMMGirlVeh = IsInUnit ( Connie ) ;
8951: LD_ADDR_VAR 0 2
8955: PUSH
8956: LD_EXP 4
8960: PPUSH
8961: CALL_OW 310
8965: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8966: LD_EXP 1
8970: PPUSH
8971: CALL_OW 310
8975: PPUSH
8976: LD_EXP 2
8980: PPUSH
8981: CALL_OW 310
8985: PPUSH
8986: CALL_OW 296
8990: PUSH
8991: LD_INT 10
8993: LESS
8994: PUSH
8995: LD_EXP 1
8999: PPUSH
9000: CALL_OW 310
9004: PPUSH
9005: LD_EXP 3
9009: PPUSH
9010: CALL_OW 310
9014: PPUSH
9015: CALL_OW 296
9019: PUSH
9020: LD_INT 10
9022: LESS
9023: OR
9024: PUSH
9025: LD_EXP 1
9029: PPUSH
9030: CALL_OW 310
9034: PPUSH
9035: LD_EXP 4
9039: PPUSH
9040: CALL_OW 310
9044: PPUSH
9045: CALL_OW 296
9049: PUSH
9050: LD_INT 10
9052: LESS
9053: OR
9054: IFFALSE 9212
// begin case Query ( Q3b ) of 1 :
9056: LD_STRING Q3b
9058: PPUSH
9059: CALL_OW 97
9063: PUSH
9064: LD_INT 1
9066: DOUBLE
9067: EQUAL
9068: IFTRUE 9072
9070: GO 9209
9072: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9073: LD_VAR 0 1
9077: PPUSH
9078: CALL_OW 265
9082: PUSH
9083: EMPTY
9084: LIST
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 262
9095: PUSH
9096: EMPTY
9097: LIST
9098: PUSH
9099: LD_VAR 0 1
9103: PPUSH
9104: CALL_OW 263
9108: PUSH
9109: EMPTY
9110: LIST
9111: PUSH
9112: LD_VAR 0 1
9116: PPUSH
9117: CALL_OW 264
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: LD_STRING 14_JMMVeh_1
9133: PPUSH
9134: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 265
9147: PUSH
9148: EMPTY
9149: LIST
9150: PUSH
9151: LD_VAR 0 2
9155: PPUSH
9156: CALL_OW 262
9160: PUSH
9161: EMPTY
9162: LIST
9163: PUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 263
9173: PUSH
9174: EMPTY
9175: LIST
9176: PUSH
9177: LD_VAR 0 2
9181: PPUSH
9182: CALL_OW 264
9186: PUSH
9187: EMPTY
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PPUSH
9196: LD_STRING 14_JMMGirlVeh_1
9198: PPUSH
9199: CALL_OW 39
// FinishMission ;
9203: CALL 9449 0 0
// end ; end ;
9207: GO 9210
9209: POP
// end else
9210: GO 9308
// begin if JMMGirl = 1 then
9212: LD_EXP 7
9216: PUSH
9217: LD_INT 1
9219: EQUAL
9220: IFFALSE 9248
// begin case Query ( Q3bJ ) of 1 :
9222: LD_STRING Q3bJ
9224: PPUSH
9225: CALL_OW 97
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9245
9238: POP
// FinishMission ; end ;
9239: CALL 9449 0 0
9243: GO 9246
9245: POP
// end else
9246: GO 9308
// begin if JMMGirl = 2 then
9248: LD_EXP 7
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: IFFALSE 9284
// begin case Query ( Q3bL ) of 1 :
9258: LD_STRING Q3bL
9260: PPUSH
9261: CALL_OW 97
9265: PUSH
9266: LD_INT 1
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9281
9274: POP
// FinishMission ; end ;
9275: CALL 9449 0 0
9279: GO 9282
9281: POP
// end else
9282: GO 9308
// begin case Query ( Q3bX ) of 1 :
9284: LD_STRING Q3bX
9286: PPUSH
9287: CALL_OW 97
9291: PUSH
9292: LD_INT 1
9294: DOUBLE
9295: EQUAL
9296: IFTRUE 9300
9298: GO 9307
9300: POP
// FinishMission ; end ;
9301: CALL 9449 0 0
9305: GO 9308
9307: POP
// end ; end ; end ; end ;
9308: PPOPN 2
9310: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9311: LD_INT 22
9313: PUSH
9314: LD_INT 3
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 1
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PPUSH
9335: CALL_OW 69
9339: PUSH
9340: LD_INT 0
9342: EQUAL
9343: PUSH
9344: LD_EXP 15
9348: PUSH
9349: LD_INT 0
9351: EQUAL
9352: AND
9353: IFFALSE 9448
9355: GO 9357
9357: DISABLE
// begin DialogueOn ;
9358: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9362: LD_EXP 1
9366: PPUSH
9367: LD_STRING DEnd-JMM-1
9369: PPUSH
9370: CALL_OW 88
// if JMMGirl = 1 then
9374: LD_EXP 7
9378: PUSH
9379: LD_INT 1
9381: EQUAL
9382: IFFALSE 9396
// Say ( Joan , DEnd-Joan-1 ) ;
9384: LD_EXP 2
9388: PPUSH
9389: LD_STRING DEnd-Joan-1
9391: PPUSH
9392: CALL_OW 88
// if JMMGirl = 2 then
9396: LD_EXP 7
9400: PUSH
9401: LD_INT 2
9403: EQUAL
9404: IFFALSE 9418
// Say ( Lisa , DEnd-Lisa-1 ) ;
9406: LD_EXP 3
9410: PPUSH
9411: LD_STRING DEnd-Lisa-1
9413: PPUSH
9414: CALL_OW 88
// if JMMGirl = 3 then
9418: LD_EXP 7
9422: PUSH
9423: LD_INT 3
9425: EQUAL
9426: IFFALSE 9440
// Say ( Connie , DEnd-Con-1 ) ;
9428: LD_EXP 4
9432: PPUSH
9433: LD_STRING DEnd-Con-1
9435: PPUSH
9436: CALL_OW 88
// DialogueOff ;
9440: CALL_OW 7
// FinishMission ;
9444: CALL 9449 0 0
// end ;
9448: END
// export function FinishMission ; begin
9449: LD_INT 0
9451: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9452: LD_EXP 1
9456: PPUSH
9457: LD_STRING 14_JMM
9459: PPUSH
9460: CALL_OW 38
// if fastEnd = 1 then
9464: LD_EXP 15
9468: PUSH
9469: LD_INT 1
9471: EQUAL
9472: IFFALSE 9596
// begin AddMedal ( fastend , - 1 ) ;
9474: LD_STRING fastend
9476: PPUSH
9477: LD_INT 1
9479: NEG
9480: PPUSH
9481: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9485: LD_STRING fastend
9487: PPUSH
9488: LD_INT 1
9490: NEG
9491: PPUSH
9492: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9496: LD_STRING fastend
9498: PPUSH
9499: LD_INT 1
9501: NEG
9502: PPUSH
9503: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9507: LD_EXP 7
9511: PPUSH
9512: LD_STRING 14_JMMGirl_1
9514: PPUSH
9515: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9519: LD_INT 0
9521: PPUSH
9522: LD_STRING 14_JMMGirlStatus_1
9524: PPUSH
9525: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9529: LD_INT 0
9531: PPUSH
9532: LD_STRING 14_KappaStatus_1
9534: PPUSH
9535: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
9539: LD_INT 95
9541: PPUSH
9542: CALL_OW 265
9546: PUSH
9547: EMPTY
9548: LIST
9549: PUSH
9550: LD_INT 95
9552: PPUSH
9553: CALL_OW 262
9557: PUSH
9558: EMPTY
9559: LIST
9560: PUSH
9561: LD_INT 95
9563: PPUSH
9564: CALL_OW 263
9568: PUSH
9569: EMPTY
9570: LIST
9571: PUSH
9572: LD_INT 95
9574: PPUSH
9575: CALL_OW 264
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: LD_STRING 14_JMMVeh_1
9591: PPUSH
9592: CALL_OW 39
// end ; if fastEnd = 0 then
9596: LD_EXP 15
9600: PUSH
9601: LD_INT 0
9603: EQUAL
9604: IFFALSE 10274
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9606: LD_EXP 7
9610: PPUSH
9611: LD_STRING 14_JMMGirl_1
9613: PPUSH
9614: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9618: LD_INT 22
9620: PUSH
9621: LD_INT 3
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PPUSH
9642: CALL_OW 69
9646: PUSH
9647: LD_INT 0
9649: EQUAL
9650: PUSH
9651: LD_INT 48
9653: PPUSH
9654: CALL_OW 255
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: AND
9663: IFFALSE 9677
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9665: LD_INT 1
9667: PPUSH
9668: LD_STRING 14_KappaStatus_1
9670: PPUSH
9671: CALL_OW 39
9675: GO 9687
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9677: LD_INT 0
9679: PPUSH
9680: LD_STRING 14_KappaStatus_1
9682: PPUSH
9683: CALL_OW 39
// case JMMGirl of 1 :
9687: LD_EXP 7
9691: PUSH
9692: LD_INT 1
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9848
9700: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9701: LD_EXP 2
9705: PPUSH
9706: CALL_OW 302
9710: PUSH
9711: LD_EXP 2
9715: PPUSH
9716: CALL_OW 255
9720: PUSH
9721: LD_INT 1
9723: EQUAL
9724: AND
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: PUSH
9755: LD_INT 0
9757: EQUAL
9758: PUSH
9759: LD_EXP 1
9763: PPUSH
9764: CALL_OW 310
9768: PPUSH
9769: LD_EXP 2
9773: PPUSH
9774: CALL_OW 310
9778: PPUSH
9779: CALL_OW 296
9783: PUSH
9784: LD_INT 10
9786: LESS
9787: OR
9788: AND
9789: IFFALSE 9825
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9791: LD_INT 1
9793: PPUSH
9794: LD_STRING 14_JMMGirlStatus_1
9796: PPUSH
9797: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9801: LD_EXP 2
9805: PPUSH
9806: LD_STRING 14_Joan
9808: PPUSH
9809: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9813: LD_STRING protect
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL_OW 101
9823: GO 9846
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9825: LD_INT 0
9827: PPUSH
9828: LD_STRING 14_JMMGirlStatus_1
9830: PPUSH
9831: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9835: LD_STRING protect
9837: PPUSH
9838: LD_INT 1
9840: NEG
9841: PPUSH
9842: CALL_OW 101
// end ; end ; 2 :
9846: GO 10161
9848: LD_INT 2
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 10004
9856: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9857: LD_EXP 3
9861: PPUSH
9862: CALL_OW 302
9866: PUSH
9867: LD_EXP 3
9871: PPUSH
9872: CALL_OW 255
9876: PUSH
9877: LD_INT 1
9879: EQUAL
9880: AND
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: PUSH
9915: LD_EXP 1
9919: PPUSH
9920: CALL_OW 310
9924: PPUSH
9925: LD_EXP 3
9929: PPUSH
9930: CALL_OW 310
9934: PPUSH
9935: CALL_OW 296
9939: PUSH
9940: LD_INT 10
9942: LESS
9943: OR
9944: AND
9945: IFFALSE 9981
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9947: LD_INT 1
9949: PPUSH
9950: LD_STRING 14_JMMGirlStatus_1
9952: PPUSH
9953: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9957: LD_EXP 3
9961: PPUSH
9962: LD_STRING 14_Lisa
9964: PPUSH
9965: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9969: LD_STRING protect
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 101
9979: GO 10002
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_STRING 14_JMMGirlStatus_1
9986: PPUSH
9987: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9991: LD_STRING protect
9993: PPUSH
9994: LD_INT 2
9996: NEG
9997: PPUSH
9998: CALL_OW 101
// end ; end ; 3 :
10002: GO 10161
10004: LD_INT 3
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10160
10012: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10013: LD_EXP 4
10017: PPUSH
10018: CALL_OW 302
10022: PUSH
10023: LD_EXP 4
10027: PPUSH
10028: CALL_OW 255
10032: PUSH
10033: LD_INT 1
10035: EQUAL
10036: AND
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 1
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 69
10066: PUSH
10067: LD_INT 0
10069: EQUAL
10070: PUSH
10071: LD_EXP 1
10075: PPUSH
10076: CALL_OW 310
10080: PPUSH
10081: LD_EXP 4
10085: PPUSH
10086: CALL_OW 310
10090: PPUSH
10091: CALL_OW 296
10095: PUSH
10096: LD_INT 10
10098: LESS
10099: OR
10100: AND
10101: IFFALSE 10137
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10103: LD_INT 1
10105: PPUSH
10106: LD_STRING 14_JMMGirlStatus_1
10108: PPUSH
10109: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10113: LD_EXP 4
10117: PPUSH
10118: LD_STRING 14_Connie
10120: PPUSH
10121: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10125: LD_STRING protect
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 101
10135: GO 10158
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10137: LD_INT 0
10139: PPUSH
10140: LD_STRING 14_JMMGirlStatus_1
10142: PPUSH
10143: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10147: LD_STRING protect
10149: PPUSH
10150: LD_INT 3
10152: NEG
10153: PPUSH
10154: CALL_OW 101
// end ; end ; end ;
10158: GO 10161
10160: POP
// if amLaserCounter >= 2 then
10161: LD_EXP 9
10165: PUSH
10166: LD_INT 2
10168: GREATEREQUAL
10169: IFFALSE 10183
// begin AddMedal ( double , 1 ) end else
10171: LD_STRING double
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: CALL_OW 101
10181: GO 10217
// begin if amLaserCounter = 1 then
10183: LD_EXP 9
10187: PUSH
10188: LD_INT 1
10190: EQUAL
10191: IFFALSE 10206
// AddMedal ( double , - 2 ) else
10193: LD_STRING double
10195: PPUSH
10196: LD_INT 2
10198: NEG
10199: PPUSH
10200: CALL_OW 101
10204: GO 10217
// AddMedal ( double , - 1 ) ;
10206: LD_STRING double
10208: PPUSH
10209: LD_INT 1
10211: NEG
10212: PPUSH
10213: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10217: LD_INT 22
10219: PUSH
10220: LD_INT 3
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 69
10245: PUSH
10246: LD_INT 0
10248: EQUAL
10249: IFFALSE 10263
// AddMedal ( base , 1 ) else
10251: LD_STRING base
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 101
10261: GO 10274
// AddMedal ( base , - 1 ) ;
10263: LD_STRING base
10265: PPUSH
10266: LD_INT 1
10268: NEG
10269: PPUSH
10270: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10274: LD_STRING Eliminate
10276: PPUSH
10277: CALL_OW 102
// YouWin ;
10281: CALL_OW 103
// end ; end_of_file
10285: LD_VAR 0 1
10289: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10290: LD_EXP 1
10294: PPUSH
10295: CALL_OW 301
10299: IFFALSE 10311
10301: GO 10303
10303: DISABLE
// YouLost ( JMM ) ; end_of_file
10304: LD_STRING JMM
10306: PPUSH
10307: CALL_OW 104
10311: END
// every 1 1$0 do
10312: GO 10314
10314: DISABLE
// begin enable ;
10315: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10316: LD_INT 3
10318: PPUSH
10319: LD_INT 5
10321: PPUSH
10322: CALL_OW 12
10326: PPUSH
10327: LD_INT 13
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 55
// end ;
10337: END
