// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 0 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1262 0 0
// PrepareHero ;
 107: CALL 437 0 0
// PrepareRussianBase ;
 111: CALL 775 0 0
// PrepareCommander ;
 115: CALL 720 0 0
// end ;
 119: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 120: LD_EXP 16
 124: PUSH
 125: LD_INT 1
 127: EQUAL
 128: IFFALSE 434
 130: GO 132
 132: DISABLE
 133: LD_INT 0
 135: PPUSH
// begin enable ;
 136: ENABLE
// fogoff ( true ) ;
 137: LD_INT 1
 139: PPUSH
 140: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 144: LD_ADDR_VAR 0 1
 148: PUSH
 149: LD_INT 22
 151: PUSH
 152: LD_INT 1
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: PUSH
 159: LD_INT 21
 161: PUSH
 162: LD_INT 1
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PPUSH
 173: CALL_OW 69
 177: PUSH
 178: FOR_IN
 179: IFFALSE 195
// SetLives ( i , 1000 ) ;
 181: LD_VAR 0 1
 185: PPUSH
 186: LD_INT 1000
 188: PPUSH
 189: CALL_OW 234
 193: GO 178
 195: POP
 196: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 197: LD_ADDR_VAR 0 1
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: LD_INT 30
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 30
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PPUSH
 244: CALL_OW 69
 248: PUSH
 249: FOR_IN
 250: IFFALSE 274
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 252: LD_VAR 0 1
 256: PPUSH
 257: CALL_OW 274
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: LD_INT 9999
 267: PPUSH
 268: CALL_OW 277
 272: GO 249
 274: POP
 275: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 276: LD_ADDR_VAR 0 1
 280: PUSH
 281: LD_INT 22
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: LD_INT 2
 293: PUSH
 294: LD_INT 30
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 30
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: LIST
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PPUSH
 323: CALL_OW 69
 327: PUSH
 328: FOR_IN
 329: IFFALSE 353
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 331: LD_VAR 0 1
 335: PPUSH
 336: CALL_OW 274
 340: PPUSH
 341: LD_INT 2
 343: PPUSH
 344: LD_INT 9999
 346: PPUSH
 347: CALL_OW 277
 351: GO 328
 353: POP
 354: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 355: LD_ADDR_VAR 0 1
 359: PUSH
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PPUSH
 402: CALL_OW 69
 406: PUSH
 407: FOR_IN
 408: IFFALSE 432
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 410: LD_VAR 0 1
 414: PPUSH
 415: CALL_OW 274
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: LD_INT 9999
 425: PPUSH
 426: CALL_OW 277
 430: GO 407
 432: POP
 433: POP
// end ; end_of_file
 434: PPOPN 1
 436: END
// export function PrepareHero ; begin
 437: LD_INT 0
 439: PPUSH
// uc_side = 1 ;
 440: LD_ADDR_OWVAR 20
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// uc_nation = 1 ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 456: LD_ADDR_EXP 1
 460: PUSH
 461: LD_STRING 13f_JMM
 463: PPUSH
 464: LD_INT 1
 466: PPUSH
 467: CALL 915 0 2
 471: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 95
 479: PPUSH
 480: CALL_OW 52
// Powell = PrepareUnit ( Powell , false ) ;
 484: LD_ADDR_EXP 5
 488: PUSH
 489: LD_STRING Powell
 491: PPUSH
 492: LD_INT 0
 494: PPUSH
 495: CALL 915 0 2
 499: ST_TO_ADDR
// uc_side = 4 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 4
 507: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 508: LD_STRING 10c_Joan
 510: PPUSH
 511: CALL_OW 28
 515: PUSH
 516: LD_INT 1
 518: EQUAL
 519: IFFALSE 574
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 521: LD_ADDR_EXP 2
 525: PUSH
 526: LD_STRING 10c_Joan
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: CALL 915 0 2
 536: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 537: LD_EXP 2
 541: PPUSH
 542: LD_INT 4
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 552: LD_EXP 2
 556: PPUSH
 557: LD_INT 4
 559: PPUSH
 560: CALL_OW 336
// JMMGirl = 1 ;
 564: LD_ADDR_EXP 7
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// end else
 572: GO 691
// begin if TestCharacters ( 13s_Lisa ) = true then
 574: LD_STRING 13s_Lisa
 576: PPUSH
 577: CALL_OW 28
 581: PUSH
 582: LD_INT 1
 584: EQUAL
 585: IFFALSE 640
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 587: LD_ADDR_EXP 3
 591: PUSH
 592: LD_STRING 13s_Lisa
 594: PPUSH
 595: LD_INT 1
 597: PPUSH
 598: CALL 915 0 2
 602: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 603: LD_EXP 3
 607: PPUSH
 608: LD_INT 4
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 618: LD_EXP 3
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL_OW 336
// JMMGirl = 2 ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// end else
 638: GO 691
// begin Connie = PrepareUnit ( Connie , true ) ;
 640: LD_ADDR_EXP 4
 644: PUSH
 645: LD_STRING Connie
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL 915 0 2
 655: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 656: LD_EXP 4
 660: PPUSH
 661: LD_INT 4
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 671: LD_EXP 4
 675: PPUSH
 676: LD_INT 3
 678: PPUSH
 679: CALL_OW 336
// JMMGirl = 3 ;
 683: LD_ADDR_EXP 7
 687: PUSH
 688: LD_INT 3
 690: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 691: LD_EXP 2
 695: PUSH
 696: LD_EXP 3
 700: PUSH
 701: LD_EXP 4
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PPUSH
 711: CALL_OW 140
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export function PrepareCommander ; begin
 720: LD_INT 0
 722: PPUSH
// uc_side = 3 ;
 723: LD_ADDR_OWVAR 20
 727: PUSH
 728: LD_INT 3
 730: ST_TO_ADDR
// uc_nation = 3 ;
 731: LD_ADDR_OWVAR 21
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 739: LD_ADDR_EXP 6
 743: PUSH
 744: LD_STRING Eisenstein
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL 915 0 2
 754: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 755: LD_EXP 6
 759: PPUSH
 760: LD_INT 11
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: LD_VAR 0 1
 774: RET
// export function PrepareRussianBase ; begin
 775: LD_INT 0
 777: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 778: LD_INT 3
 780: PPUSH
 781: LD_INT 3
 783: PPUSH
 784: LD_INT 45
 786: PPUSH
 787: LD_INT 10
 789: PPUSH
 790: LD_INT 9
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL 1023 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 800: LD_INT 3
 802: PPUSH
 803: LD_INT 3
 805: PPUSH
 806: LD_INT 22
 808: PPUSH
 809: LD_INT 10
 811: PPUSH
 812: LD_INT 2
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: CALL 1023 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 3
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: LD_INT 10
 833: PPUSH
 834: LD_INT 3
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: CALL 1023 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 3
 849: PPUSH
 850: LD_INT 40
 852: PPUSH
 853: LD_INT 10
 855: PPUSH
 856: LD_INT 3
 858: PPUSH
 859: LD_INT 3
 861: PPUSH
 862: CALL 1023 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
 866: LD_INT 3
 868: PPUSH
 869: LD_INT 3
 871: PPUSH
 872: LD_INT 14
 874: PPUSH
 875: LD_INT 10
 877: PPUSH
 878: LD_INT 4
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: CALL 1023 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
 888: LD_INT 3
 890: PPUSH
 891: LD_INT 3
 893: PPUSH
 894: LD_INT 15
 896: PPUSH
 897: LD_INT 10
 899: PPUSH
 900: LD_INT 4
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL 1023 0 6
// end ; end_of_file
 910: LD_VAR 0 1
 914: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 915: LD_INT 0
 917: PPUSH
 918: PPUSH
// if exist_mode then
 919: LD_VAR 0 2
 923: IFFALSE 942
// begin unit := CreateCharacter ( ident ) ;
 925: LD_ADDR_VAR 0 4
 929: PUSH
 930: LD_VAR 0 1
 934: PPUSH
 935: CALL_OW 34
 939: ST_TO_ADDR
// end else
 940: GO 957
// begin unit := NewCharacter ( ident ) ;
 942: LD_ADDR_VAR 0 4
 946: PUSH
 947: LD_VAR 0 1
 951: PPUSH
 952: CALL_OW 25
 956: ST_TO_ADDR
// end ; result := unit ;
 957: LD_ADDR_VAR 0 3
 961: PUSH
 962: LD_VAR 0 4
 966: ST_TO_ADDR
// end ;
 967: LD_VAR 0 3
 971: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
 972: LD_INT 0
 974: PPUSH
 975: PPUSH
// for i in charactersList do
 976: LD_ADDR_VAR 0 4
 980: PUSH
 981: LD_VAR 0 1
 985: PUSH
 986: FOR_IN
 987: IFFALSE 1016
// begin if IsOk ( i ) then
 989: LD_VAR 0 4
 993: PPUSH
 994: CALL_OW 302
 998: IFFALSE 1014
// SaveCharacters ( i , ident ) ;
1000: LD_VAR 0 4
1004: PPUSH
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 38
// end ;
1014: GO 986
1016: POP
1017: POP
// end ;
1018: LD_VAR 0 3
1022: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1023: LD_INT 0
1025: PPUSH
1026: PPUSH
1027: PPUSH
1028: PPUSH
// for i = 1 to count do
1029: LD_ADDR_VAR 0 8
1033: PUSH
1034: DOUBLE
1035: LD_INT 1
1037: DEC
1038: ST_TO_ADDR
1039: LD_VAR 0 6
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1126
// begin uc_side = side ;
1047: LD_ADDR_OWVAR 20
1051: PUSH
1052: LD_VAR 0 1
1056: ST_TO_ADDR
// uc_nation = nation ;
1057: LD_ADDR_OWVAR 21
1061: PUSH
1062: LD_VAR 0 2
1066: ST_TO_ADDR
// hc_gallery =  ;
1067: LD_ADDR_OWVAR 33
1071: PUSH
1072: LD_STRING 
1074: ST_TO_ADDR
// hc_name =  ;
1075: LD_ADDR_OWVAR 26
1079: PUSH
1080: LD_STRING 
1082: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1083: LD_INT 0
1085: PPUSH
1086: LD_VAR 0 5
1090: PPUSH
1091: LD_VAR 0 4
1095: PPUSH
1096: CALL_OW 380
// un = CreateHuman ;
1100: LD_ADDR_VAR 0 10
1104: PUSH
1105: CALL_OW 44
1109: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1110: LD_VAR 0 10
1114: PPUSH
1115: LD_VAR 0 3
1119: PPUSH
1120: CALL_OW 52
// end ;
1124: GO 1044
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 7
1132: RET
// export function Query1 ; begin
1133: LD_INT 0
1135: PPUSH
// case query ( Q1 ) of 1 :
1136: LD_STRING Q1
1138: PPUSH
1139: CALL_OW 97
1143: PUSH
1144: LD_INT 1
1146: DOUBLE
1147: EQUAL
1148: IFTRUE 1152
1150: GO 1163
1152: POP
// result = 1 ; 2 :
1153: LD_ADDR_VAR 0 1
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
1161: GO 1183
1163: LD_INT 2
1165: DOUBLE
1166: EQUAL
1167: IFTRUE 1171
1169: GO 1182
1171: POP
// result = 2 ; end ;
1172: LD_ADDR_VAR 0 1
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
1180: GO 1183
1182: POP
// end ;
1183: LD_VAR 0 1
1187: RET
// export function Query2 ; begin
1188: LD_INT 0
1190: PPUSH
// case query ( Q2J ) of 1 :
1191: LD_STRING Q2J
1193: PPUSH
1194: CALL_OW 97
1198: PUSH
1199: LD_INT 1
1201: DOUBLE
1202: EQUAL
1203: IFTRUE 1207
1205: GO 1218
1207: POP
// result = 1 ; 2 :
1208: LD_ADDR_VAR 0 1
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
1216: GO 1257
1218: LD_INT 2
1220: DOUBLE
1221: EQUAL
1222: IFTRUE 1226
1224: GO 1237
1226: POP
// result = 2 ; 2 :
1227: LD_ADDR_VAR 0 1
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
1235: GO 1257
1237: LD_INT 2
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1256
1245: POP
// result = 3 ; end ;
1246: LD_ADDR_VAR 0 1
1250: PUSH
1251: LD_INT 3
1253: ST_TO_ADDR
1254: GO 1257
1256: POP
// end ;
1257: LD_VAR 0 1
1261: RET
// export function PrepareDifficulty ; begin
1262: LD_INT 0
1264: PPUSH
// if difficulty = 1 then
1265: LD_OWVAR 67
1269: PUSH
1270: LD_INT 1
1272: EQUAL
1273: IFFALSE 1353
// begin SetTech ( 57 , 3 , state_disabled ) ;
1275: LD_INT 57
1277: PPUSH
1278: LD_INT 3
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1288: LD_INT 58
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_INT 0
1296: PPUSH
1297: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1301: LD_INT 59
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1314: LD_INT 51
1316: PPUSH
1317: LD_INT 3
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1327: LD_INT 52
1329: PPUSH
1330: LD_INT 3
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1340: LD_INT 53
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: CALL_OW 322
// end ; if difficulty = 2 then
1353: LD_OWVAR 67
1357: PUSH
1358: LD_INT 2
1360: EQUAL
1361: IFFALSE 1441
// begin SetTech ( 57 , 3 , state_enabled ) ;
1363: LD_INT 57
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1376: LD_INT 58
1378: PPUSH
1379: LD_INT 3
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1389: LD_INT 59
1391: PPUSH
1392: LD_INT 3
1394: PPUSH
1395: LD_INT 0
1397: PPUSH
1398: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1402: LD_INT 51
1404: PPUSH
1405: LD_INT 3
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1415: LD_INT 52
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1428: LD_INT 53
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 322
// end ; if difficulty = 3 then
1441: LD_OWVAR 67
1445: PUSH
1446: LD_INT 3
1448: EQUAL
1449: IFFALSE 1529
// begin SetTech ( 57 , 3 , state_enabled ) ;
1451: LD_INT 57
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1464: LD_INT 58
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1477: LD_INT 59
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1490: LD_INT 51
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 1
1498: PPUSH
1499: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1503: LD_INT 52
1505: PPUSH
1506: LD_INT 3
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1516: LD_INT 53
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 322
// end ; end ;
1529: LD_VAR 0 1
1533: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
1538: PPUSH
1539: PPUSH
// for i = 1 to 72 do
1540: LD_ADDR_VAR 0 5
1544: PUSH
1545: DOUBLE
1546: LD_INT 1
1548: DEC
1549: ST_TO_ADDR
1550: LD_INT 72
1552: PUSH
1553: FOR_TO
1554: IFFALSE 1612
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 1
1565: PPUSH
1566: CALL_OW 321
1570: PUSH
1571: LD_INT 1
1573: EQUAL
1574: PUSH
1575: LD_VAR 0 5
1579: PPUSH
1580: LD_VAR 0 3
1584: PPUSH
1585: CALL_OW 482
1589: PUSH
1590: LD_INT 1
1592: EQUAL
1593: AND
1594: IFFALSE 1610
// AddComResearch ( lab , i ) ;
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PPUSH
1606: CALL_OW 184
1610: GO 1553
1612: POP
1613: POP
// end ;
1614: LD_VAR 0 4
1618: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1619: LD_INT 0
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
1625: PPUSH
1626: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1627: LD_ADDR_VAR 0 8
1631: PUSH
1632: LD_VAR 0 2
1636: PPUSH
1637: CALL_OW 313
1641: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1642: LD_ADDR_VAR 0 9
1646: PUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_VAR 0 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 25
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 24
1676: PUSH
1677: LD_INT 750
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 3
1686: PUSH
1687: LD_INT 54
1689: PUSH
1690: EMPTY
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 70
1707: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 3
1717: PPUSH
1718: LD_INT 22
1720: PUSH
1721: LD_VAR 0 1
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 21
1732: PUSH
1733: LD_INT 3
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: LD_INT 24
1745: PUSH
1746: LD_INT 1000
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: PPUSH
1765: CALL_OW 70
1769: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1770: LD_VAR 0 6
1774: NOT
1775: PUSH
1776: LD_INT 22
1778: PUSH
1779: LD_VAR 0 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 25
1790: PUSH
1791: LD_INT 2
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 24
1800: PUSH
1801: LD_INT 250
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 69
1817: NOT
1818: AND
1819: IFFALSE 1823
// exit ;
1821: GO 2005
// if buildings_list > 0 and engineerOkInside then
1823: LD_VAR 0 6
1827: PUSH
1828: LD_INT 0
1830: GREATER
1831: PUSH
1832: LD_VAR 0 8
1836: AND
1837: IFFALSE 1848
// ComExitBuilding ( engineerOkInside ) ;
1839: LD_VAR 0 8
1843: PPUSH
1844: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
1848: LD_VAR 0 6
1852: PUSH
1853: LD_INT 0
1855: GREATER
1856: PUSH
1857: LD_VAR 0 9
1861: PUSH
1862: LD_INT 0
1864: GREATER
1865: AND
1866: IFFALSE 1886
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
1868: LD_VAR 0 9
1872: PPUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
1886: LD_VAR 0 6
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: PUSH
1895: LD_VAR 0 4
1899: PUSH
1900: LD_INT 0
1902: EQUAL
1903: AND
1904: PUSH
1905: LD_VAR 0 9
1909: PUSH
1910: LD_INT 0
1912: GREATER
1913: AND
1914: IFFALSE 1930
// ComEnterUnit ( engineerOkOutside , building ) ;
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 2
1925: PPUSH
1926: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
1930: LD_VAR 0 9
1934: PUSH
1935: LD_INT 0
1937: GREATER
1938: PUSH
1939: LD_VAR 0 6
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: PUSH
1949: LD_VAR 0 4
1953: PUSH
1954: LD_INT 0
1956: GREATER
1957: AND
1958: IFFALSE 2005
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
1960: LD_VAR 0 9
1964: PPUSH
1965: LD_VAR 0 4
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: PPUSH
1974: LD_VAR 0 4
1978: PUSH
1979: LD_INT 2
1981: ARRAY
1982: PPUSH
1983: LD_VAR 0 4
1987: PUSH
1988: LD_INT 3
1990: ARRAY
1991: PPUSH
1992: LD_VAR 0 4
1996: PUSH
1997: LD_INT 4
1999: ARRAY
2000: PPUSH
2001: CALL_OW 145
// end ;
2005: LD_VAR 0 5
2009: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2010: LD_INT 0
2012: PPUSH
2013: PPUSH
2014: PPUSH
2015: PPUSH
2016: PPUSH
2017: PPUSH
2018: PPUSH
2019: PPUSH
2020: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 22
2028: PUSH
2029: LD_VAR 0 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 25
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 23
2050: PUSH
2051: LD_INT 2
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 24
2060: PUSH
2061: LD_INT 251
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2079: LD_ADDR_VAR 0 7
2083: PUSH
2084: LD_VAR 0 3
2088: PPUSH
2089: LD_INT 22
2091: PUSH
2092: LD_VAR 0 1
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 23
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: LD_INT 25
2113: PUSH
2114: LD_INT 4
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 50
2123: PUSH
2124: EMPTY
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 70
2137: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2138: LD_ADDR_VAR 0 10
2142: PUSH
2143: LD_VAR 0 3
2147: PPUSH
2148: LD_INT 22
2150: PUSH
2151: LD_VAR 0 1
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 21
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PUSH
2170: LD_INT 3
2172: PUSH
2173: LD_INT 25
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: LD_INT 24
2192: PUSH
2193: LD_INT 750
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: PPUSH
2210: CALL_OW 70
2214: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2215: LD_ADDR_VAR 0 11
2219: PUSH
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_VAR 0 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 21
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: LD_INT 25
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 3
2266: PUSH
2267: LD_INT 24
2269: PUSH
2270: LD_INT 1000
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2292: LD_VAR 0 10
2296: NOT
2297: PUSH
2298: LD_VAR 0 11
2302: NOT
2303: AND
2304: PUSH
2305: LD_VAR 0 6
2309: NOT
2310: AND
2311: IFFALSE 2315
// exit ;
2313: GO 2549
// if damageUnits > 0 and sci_list > 0 then
2315: LD_VAR 0 10
2319: PUSH
2320: LD_INT 0
2322: GREATER
2323: PUSH
2324: LD_VAR 0 6
2328: PUSH
2329: LD_INT 0
2331: GREATER
2332: AND
2333: IFFALSE 2349
// ComMoveToArea ( damageUnits , healArea ) ;
2335: LD_VAR 0 10
2339: PPUSH
2340: LD_VAR 0 2
2344: PPUSH
2345: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2349: LD_VAR 0 11
2353: PUSH
2354: LD_INT 0
2356: GREATER
2357: PUSH
2358: LD_VAR 0 6
2362: PUSH
2363: LD_INT 0
2365: GREATER
2366: AND
2367: IFFALSE 2378
// ComExitBuilding ( sci_list ) ;
2369: LD_VAR 0 6
2373: PPUSH
2374: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2378: LD_VAR 0 11
2382: PUSH
2383: LD_INT 0
2385: GREATER
2386: PUSH
2387: LD_VAR 0 7
2391: PUSH
2392: LD_INT 0
2394: GREATER
2395: AND
2396: IFFALSE 2416
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2398: LD_VAR 0 7
2402: PPUSH
2403: LD_VAR 0 11
2407: PUSH
2408: LD_INT 1
2410: ARRAY
2411: PPUSH
2412: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2416: LD_VAR 0 10
2420: PUSH
2421: LD_INT 0
2423: EQUAL
2424: PUSH
2425: LD_VAR 0 11
2429: PUSH
2430: LD_INT 0
2432: EQUAL
2433: AND
2434: PUSH
2435: LD_VAR 0 7
2439: PUSH
2440: LD_INT 0
2442: GREATER
2443: AND
2444: IFFALSE 2549
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2446: LD_ADDR_VAR 0 12
2450: PUSH
2451: LD_INT 22
2453: PUSH
2454: LD_VAR 0 1
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PUSH
2463: LD_INT 21
2465: PUSH
2466: LD_INT 3
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 30
2475: PUSH
2476: LD_INT 8
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 69
2492: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2493: LD_ADDR_VAR 0 13
2497: PUSH
2498: LD_INT 1
2500: PPUSH
2501: LD_VAR 0 12
2505: PPUSH
2506: CALL_OW 12
2510: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2511: LD_VAR 0 7
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 72
2533: PPUSH
2534: LD_VAR 0 12
2538: PUSH
2539: LD_VAR 0 13
2543: ARRAY
2544: PPUSH
2545: CALL_OW 120
// end ; end ;
2549: LD_VAR 0 5
2553: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2554: LD_INT 0
2556: PPUSH
2557: PPUSH
2558: PPUSH
2559: PPUSH
// tmpTab = [ ] ;
2560: LD_ADDR_VAR 0 6
2564: PUSH
2565: EMPTY
2566: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2567: LD_INT 22
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 30
2581: PUSH
2582: LD_INT 32
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PPUSH
2593: CALL_OW 69
2597: PUSH
2598: LD_INT 0
2600: GREATER
2601: IFFALSE 2684
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_INT 22
2610: PUSH
2611: LD_VAR 0 1
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 30
2622: PUSH
2623: LD_INT 32
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: PUSH
2639: FOR_IN
2640: IFFALSE 2682
// begin for j in UnitsInside ( i ) do
2642: LD_ADDR_VAR 0 5
2646: PUSH
2647: LD_VAR 0 4
2651: PPUSH
2652: CALL_OW 313
2656: PUSH
2657: FOR_IN
2658: IFFALSE 2678
// tmpTab = tmpTab ^ j ;
2660: LD_ADDR_VAR 0 6
2664: PUSH
2665: LD_VAR 0 6
2669: PUSH
2670: LD_VAR 0 5
2674: ADD
2675: ST_TO_ADDR
2676: GO 2657
2678: POP
2679: POP
// end ;
2680: GO 2639
2682: POP
2683: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2684: LD_VAR 0 6
2688: PPUSH
2689: LD_VAR 0 2
2693: PPUSH
2694: CALL_OW 250
2698: PPUSH
2699: LD_VAR 0 2
2703: PPUSH
2704: CALL_OW 251
2708: PPUSH
2709: CALL_OW 114
// end ;
2713: LD_VAR 0 3
2717: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2718: LD_INT 0
2720: PPUSH
2721: PPUSH
2722: PPUSH
2723: PPUSH
// enable ;
2724: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
2725: LD_ADDR_VAR 0 7
2729: PUSH
2730: LD_INT 13
2732: PPUSH
2733: CALL_OW 435
2737: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2738: LD_ADDR_VAR 0 6
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_VAR 0 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 34
2757: PUSH
2758: LD_VAR 0 2
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 69
2775: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
2776: LD_VAR 0 6
2780: PUSH
2781: LD_INT 0
2783: GREATER
2784: PUSH
2785: LD_INT 13
2787: PPUSH
2788: CALL_OW 435
2792: AND
2793: PUSH
2794: LD_VAR 0 7
2798: PUSH
2799: LD_INT 0
2801: GREATER
2802: AND
2803: IFFALSE 2852
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2805: LD_VAR 0 6
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: LD_VAR 0 7
2818: PUSH
2819: LD_INT 1
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 7
2827: PUSH
2828: LD_INT 2
2830: ARRAY
2831: PPUSH
2832: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
2836: LD_VAR 0 6
2840: PUSH
2841: LD_INT 1
2843: ARRAY
2844: PPUSH
2845: LD_INT 100
2847: PPUSH
2848: CALL_OW 240
// end ; end ;
2852: LD_VAR 0 4
2856: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
2857: LD_INT 0
2859: PPUSH
2860: PPUSH
2861: PPUSH
2862: PPUSH
2863: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
2864: LD_ADDR_VAR 0 6
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_VAR 0 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_INT 30
2886: PUSH
2887: LD_INT 31
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 30
2896: PUSH
2897: LD_INT 32
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 30
2906: PUSH
2907: LD_INT 33
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 30
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 30
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 69
2950: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
2951: LD_ADDR_VAR 0 7
2955: PUSH
2956: LD_INT 22
2958: PUSH
2959: LD_VAR 0 2
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 21
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: LD_INT 58
2980: PUSH
2981: EMPTY
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
2994: LD_VAR 0 6
2998: PUSH
2999: LD_INT 0
3001: GREATER
3002: PUSH
3003: LD_VAR 0 7
3007: PUSH
3008: LD_INT 0
3010: GREATER
3011: AND
3012: IFFALSE 3082
// begin for i in turretsList do
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 6
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3080
// begin for j in enemyBuildings do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: FOR_IN
3038: IFFALSE 3076
// begin if GetDistUnits ( i , j ) < 20 then
3040: LD_VAR 0 4
3044: PPUSH
3045: LD_VAR 0 5
3049: PPUSH
3050: CALL_OW 296
3054: PUSH
3055: LD_INT 20
3057: LESS
3058: IFFALSE 3074
// begin ComAttackUnit ( i , j ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_VAR 0 5
3069: PPUSH
3070: CALL_OW 115
// end ; end ;
3074: GO 3037
3076: POP
3077: POP
// end ;
3078: GO 3024
3080: POP
3081: POP
// end ; end ;
3082: LD_VAR 0 3
3086: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3087: LD_INT 0
3089: PPUSH
3090: PPUSH
// for i = 1 to vehCount do
3091: LD_ADDR_VAR 0 9
3095: PUSH
3096: DOUBLE
3097: LD_INT 1
3099: DEC
3100: ST_TO_ADDR
3101: LD_VAR 0 3
3105: PUSH
3106: FOR_TO
3107: IFFALSE 3154
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_VAR 0 7
3118: PPUSH
3119: LD_VAR 0 5
3123: PPUSH
3124: LD_VAR 0 6
3128: PPUSH
3129: LD_VAR 0 4
3133: PUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 12
3146: ARRAY
3147: PPUSH
3148: CALL_OW 185
3152: GO 3106
3154: POP
3155: POP
// end ;
3156: LD_VAR 0 8
3160: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3161: LD_INT 0
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3169: LD_EXP 11
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 4
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_OWVAR 67
3192: ARRAY
3193: GREATEREQUAL
3194: PUSH
3195: LD_EXP 12
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_OWVAR 67
3218: ARRAY
3219: GREATEREQUAL
3220: AND
3221: IFFALSE 3454
// begin repeat wait ( 0 0$1 ) ;
3223: LD_INT 35
3225: PPUSH
3226: CALL_OW 67
// for j in russianTanks do
3230: LD_ADDR_VAR 0 4
3234: PUSH
3235: LD_EXP 11
3239: PUSH
3240: FOR_IN
3241: IFFALSE 3442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3243: LD_ADDR_VAR 0 6
3247: PUSH
3248: LD_INT 81
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: LD_INT 101
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: PPUSH
3279: LD_VAR 0 4
3283: PPUSH
3284: CALL_OW 74
3288: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3289: LD_ADDR_VAR 0 7
3293: PUSH
3294: LD_INT 81
3296: PUSH
3297: LD_VAR 0 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 101
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: LD_INT 59
3321: PUSH
3322: EMPTY
3323: LIST
3324: PUSH
3325: LD_INT 21
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 21
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: PPUSH
3364: LD_VAR 0 4
3368: PPUSH
3369: CALL_OW 74
3373: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3374: LD_VAR 0 4
3378: PPUSH
3379: LD_VAR 0 6
3383: PPUSH
3384: CALL_OW 296
3388: PUSH
3389: LD_INT 8
3391: PLUS
3392: PUSH
3393: LD_VAR 0 4
3397: PPUSH
3398: LD_VAR 0 7
3402: PPUSH
3403: CALL_OW 296
3407: LESS
3408: IFFALSE 3426
// ComAttackUnit ( j , target1 ) else
3410: LD_VAR 0 4
3414: PPUSH
3415: LD_VAR 0 6
3419: PPUSH
3420: CALL_OW 115
3424: GO 3440
// ComAttackUnit ( j , target2 ) ;
3426: LD_VAR 0 4
3430: PPUSH
3431: LD_VAR 0 7
3435: PPUSH
3436: CALL_OW 115
// end ;
3440: GO 3240
3442: POP
3443: POP
// until russianTanks = 0 ;
3444: LD_EXP 11
3448: PUSH
3449: LD_INT 0
3451: EQUAL
3452: IFFALSE 3223
// end ; end ;
3454: LD_VAR 0 2
3458: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3459: LD_INT 0
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3467: LD_ADDR_VAR 0 6
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_VAR 0 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 9
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 69
3502: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3503: LD_ADDR_VAR 0 7
3507: PUSH
3508: LD_INT 81
3510: PUSH
3511: LD_VAR 0 1
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 3
3522: PUSH
3523: LD_INT 21
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: CALL_OW 69
3545: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3546: LD_ADDR_VAR 0 4
3550: PUSH
3551: LD_INT 1
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: CALL_OW 12
3561: ST_TO_ADDR
// for i = 1 to list do
3562: LD_ADDR_VAR 0 5
3566: PUSH
3567: DOUBLE
3568: LD_INT 1
3570: DEC
3571: ST_TO_ADDR
3572: LD_VAR 0 6
3576: PUSH
3577: FOR_TO
3578: IFFALSE 3780
// for ta in filter do
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_VAR 0 7
3589: PUSH
3590: FOR_IN
3591: IFFALSE 3776
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3593: LD_VAR 0 6
3597: PUSH
3598: LD_VAR 0 5
3602: ARRAY
3603: PPUSH
3604: LD_VAR 0 3
3608: PPUSH
3609: CALL_OW 296
3613: PUSH
3614: LD_INT 15
3616: LESSEQUAL
3617: IFFALSE 3774
// begin case c of 1 :
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 1
3626: DOUBLE
3627: EQUAL
3628: IFTRUE 3632
3630: GO 3670
3632: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3633: LD_VAR 0 6
3637: PUSH
3638: LD_VAR 0 5
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 3
3648: PPUSH
3649: CALL_OW 250
3653: PPUSH
3654: LD_VAR 0 3
3658: PPUSH
3659: CALL_OW 251
3663: PPUSH
3664: CALL_OW 154
3668: GO 3774
3670: LD_INT 2
3672: DOUBLE
3673: EQUAL
3674: IFTRUE 3678
3676: GO 3742
3678: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3679: LD_VAR 0 6
3683: PUSH
3684: LD_VAR 0 5
3688: ARRAY
3689: PPUSH
3690: LD_VAR 0 3
3694: PPUSH
3695: CALL_OW 250
3699: PUSH
3700: LD_INT 1
3702: NEG
3703: PPUSH
3704: LD_INT 1
3706: PPUSH
3707: CALL_OW 12
3711: PLUS
3712: PPUSH
3713: LD_VAR 0 3
3717: PPUSH
3718: CALL_OW 251
3722: PUSH
3723: LD_INT 1
3725: NEG
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: CALL_OW 12
3734: PLUS
3735: PPUSH
3736: CALL_OW 153
3740: GO 3774
3742: LD_INT 3
3744: DOUBLE
3745: EQUAL
3746: IFTRUE 3750
3748: GO 3773
3750: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3751: LD_VAR 0 6
3755: PUSH
3756: LD_VAR 0 5
3760: ARRAY
3761: PPUSH
3762: LD_VAR 0 3
3766: PPUSH
3767: CALL_OW 115
3771: GO 3774
3773: POP
// end ; end ;
3774: GO 3590
3776: POP
3777: POP
3778: GO 3577
3780: POP
3781: POP
// end ;
3782: LD_VAR 0 2
3786: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
3787: LD_INT 0
3789: PPUSH
3790: PPUSH
3791: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3792: LD_EXP 11
3796: PUSH
3797: LD_INT 2
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: LD_INT 4
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: GREATEREQUAL
3817: PUSH
3818: LD_EXP 12
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: PUSH
3837: LD_OWVAR 67
3841: ARRAY
3842: GREATEREQUAL
3843: AND
3844: IFFALSE 3954
// repeat wait ( 0 0$1 ) ;
3846: LD_INT 35
3848: PPUSH
3849: CALL_OW 67
// if russianTimeLapsers > 0 then
3853: LD_EXP 12
3857: PUSH
3858: LD_INT 0
3860: GREATER
3861: IFFALSE 3944
// for j in russianTimeLapsers do
3863: LD_ADDR_VAR 0 3
3867: PUSH
3868: LD_EXP 12
3872: PUSH
3873: FOR_IN
3874: IFFALSE 3942
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] ] ) , j ) ;
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_INT 81
3883: PUSH
3884: LD_VAR 0 1
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: PPUSH
3896: CALL_OW 69
3900: PPUSH
3901: LD_VAR 0 3
3905: PPUSH
3906: CALL_OW 74
3910: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 250
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: CALL_OW 251
3935: PPUSH
3936: CALL_OW 111
// end ;
3940: GO 3873
3942: POP
3943: POP
// until russianTimeLapsers = 0 ;
3944: LD_EXP 12
3948: PUSH
3949: LD_INT 0
3951: EQUAL
3952: IFFALSE 3846
// end ; end_of_file
3954: LD_VAR 0 2
3958: RET
// every 0 0$1 do
3959: GO 3961
3961: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
3962: LD_INT 3
3964: PPUSH
3965: LD_INT 14
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: CALL 1534 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
3975: LD_INT 3
3977: PPUSH
3978: LD_INT 15
3980: PPUSH
3981: LD_INT 3
3983: PPUSH
3984: CALL 1534 0 3
// end ;
3988: END
// every 0 0$1 trigger russianAI = 1 do
3989: LD_EXP 13
3993: PUSH
3994: LD_INT 1
3996: EQUAL
3997: IFFALSE 4150
3999: GO 4001
4001: DISABLE
// begin enable ;
4002: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4003: LD_INT 3
4005: PPUSH
4006: LD_INT 22
4008: PPUSH
4009: LD_INT 7
4011: PPUSH
4012: LD_EXP 10
4016: PPUSH
4017: CALL 1619 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4021: LD_INT 3
4023: PPUSH
4024: LD_INT 8
4026: PPUSH
4027: LD_INT 7
4029: PPUSH
4030: LD_INT 14
4032: PUSH
4033: LD_INT 15
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 1
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL_OW 12
4050: ARRAY
4051: PPUSH
4052: CALL 2010 0 4
// AttackVehicles ( 3 ) ;
4056: LD_INT 3
4058: PPUSH
4059: CALL 3161 0 1
// CollectCrates ( 3 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) , RuCratesArea ) ;
4063: LD_INT 3
4065: PPUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 2
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 34
4088: PUSH
4089: LD_INT 51
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: PPUSH
4106: LD_INT 10
4108: PPUSH
4109: CALL 2718 0 3
// AttackNearBuildings ( 3 , 1 ) ;
4113: LD_INT 3
4115: PPUSH
4116: LD_INT 1
4118: PPUSH
4119: CALL 2857 0 2
// TimeLapsersAI ( 3 ) ;
4123: LD_INT 3
4125: PPUSH
4126: CALL 3787 0 1
// IntBazooka ( 3 ) ;
4130: LD_INT 3
4132: PPUSH
4133: CALL 3459 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 51
4142: PPUSH
4143: LD_INT 14
4145: PPUSH
4146: CALL 2718 0 3
// end ;
4150: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] ] ) = 0 do
4151: LD_EXP 13
4155: PUSH
4156: LD_INT 1
4158: EQUAL
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 21
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 50
4182: PUSH
4183: EMPTY
4184: LIST
4185: PUSH
4186: LD_INT 33
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: PPUSH
4202: CALL_OW 69
4206: PUSH
4207: LD_INT 0
4209: EQUAL
4210: AND
4211: IFFALSE 4398
4213: GO 4215
4215: DISABLE
// begin enable ;
4216: ENABLE
// if russianRocketsAvalaible = 0 then
4217: LD_EXP 14
4221: PUSH
4222: LD_INT 0
4224: EQUAL
4225: IFFALSE 4282
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4227: LD_INT 3
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: PUSH
4247: LD_OWVAR 67
4251: ARRAY
4252: PPUSH
4253: LD_INT 46
4255: PUSH
4256: LD_INT 45
4258: PUSH
4259: LD_INT 44
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: LD_INT 3
4272: PPUSH
4273: LD_INT 24
4275: PPUSH
4276: CALL 3087 0 7
4280: GO 4339
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 4
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: LD_INT 46
4310: PUSH
4311: LD_INT 45
4313: PUSH
4314: LD_INT 44
4316: PUSH
4317: LD_INT 47
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_INT 3
4331: PPUSH
4332: LD_INT 24
4334: PPUSH
4335: CALL 3087 0 7
// if russianTimeLapsers = 0 then
4339: LD_EXP 12
4343: PUSH
4344: LD_INT 0
4346: EQUAL
4347: IFFALSE 4398
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 40
4354: PPUSH
4355: LD_INT 1
4357: PUSH
4358: LD_INT 2
4360: PUSH
4361: LD_INT 2
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: PUSH
4369: LD_OWVAR 67
4373: ARRAY
4374: PPUSH
4375: LD_INT 49
4377: PUSH
4378: LD_INT 49
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 3
4390: PPUSH
4391: LD_INT 24
4393: PPUSH
4394: CALL 3087 0 7
// end ; end_of_file
4398: END
// every 1 do var dec1 , dec2 ;
4399: GO 4401
4401: DISABLE
4402: LD_INT 0
4404: PPUSH
4405: PPUSH
// begin InGameOn ;
4406: CALL_OW 8
// CenterNowOnUnits ( JMMveh ) ;
4410: LD_INT 95
4412: PPUSH
4413: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4417: LD_INT 95
4419: PPUSH
4420: LD_INT 30
4422: PPUSH
4423: LD_INT 11
4425: PPUSH
4426: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4430: LD_INT 30
4432: PPUSH
4433: LD_INT 11
4435: PPUSH
4436: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4440: LD_EXP 5
4444: PPUSH
4445: LD_STRING D1-Pow-1
4447: PPUSH
4448: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4452: LD_EXP 1
4456: PPUSH
4457: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4461: LD_EXP 1
4465: PPUSH
4466: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4470: LD_EXP 1
4474: PPUSH
4475: LD_STRING D1-JMM-1
4477: PPUSH
4478: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4482: LD_EXP 5
4486: PPUSH
4487: LD_STRING D1-Pow-2
4489: PPUSH
4490: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4494: LD_EXP 1
4498: PPUSH
4499: LD_STRING D1-JMM-2
4501: PPUSH
4502: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4506: LD_EXP 1
4510: PPUSH
4511: LD_INT 95
4513: PPUSH
4514: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4518: LD_STRING M1
4520: PPUSH
4521: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4525: LD_INT 35
4527: PPUSH
4528: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4532: LD_EXP 1
4536: PPUSH
4537: LD_INT 95
4539: PPUSH
4540: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4544: LD_INT 95
4546: PPUSH
4547: LD_INT 51
4549: PPUSH
4550: LD_INT 21
4552: PPUSH
4553: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4557: LD_INT 95
4559: PPUSH
4560: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4564: LD_INT 95
4566: PPUSH
4567: LD_INT 5
4569: PPUSH
4570: CALL_OW 308
4574: IFFALSE 4525
// if JMMGirl = 1 then
4576: LD_EXP 7
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4885
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4586: LD_EXP 2
4590: PPUSH
4591: LD_STRING D2J-Joan-1
4593: PPUSH
4594: CALL_OW 94
// dec1 = Query1 ;
4598: LD_ADDR_VAR 0 1
4602: PUSH
4603: CALL 1133 0 0
4607: ST_TO_ADDR
// if dec1 = 1 then
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: EQUAL
4616: IFFALSE 4863
// begin ComExitVehicle ( JMM ) ;
4618: LD_EXP 1
4622: PPUSH
4623: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
4627: LD_EXP 1
4631: PPUSH
4632: LD_STRING D2J-JMM-1
4634: PPUSH
4635: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
4639: LD_EXP 2
4643: PPUSH
4644: LD_STRING D2J-Joan-2
4646: PPUSH
4647: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
4651: LD_EXP 1
4655: PPUSH
4656: LD_STRING D2J-JMM-2
4658: PPUSH
4659: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
4663: LD_EXP 2
4667: PPUSH
4668: LD_STRING D2J-Joan-3
4670: PPUSH
4671: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4675: LD_EXP 5
4679: PPUSH
4680: LD_STRING DPowell-Pow-1
4682: PPUSH
4683: CALL_OW 94
// dec2 = Query2 ;
4687: LD_ADDR_VAR 0 2
4691: PUSH
4692: CALL 1188 0 0
4696: ST_TO_ADDR
// if dec2 = 1 then
4697: LD_VAR 0 2
4701: PUSH
4702: LD_INT 1
4704: EQUAL
4705: IFFALSE 4747
// begin Say ( JMM , D2Ja-JMM-1 ) ;
4707: LD_EXP 1
4711: PPUSH
4712: LD_STRING D2Ja-JMM-1
4714: PPUSH
4715: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
4719: LD_EXP 2
4723: PPUSH
4724: LD_STRING D2Ja-Joan-1
4726: PPUSH
4727: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
4731: LD_EXP 1
4735: PPUSH
4736: LD_STRING D2Ja-JMM-2
4738: PPUSH
4739: CALL_OW 88
// InGameOff ;
4743: CALL_OW 9
// end ; if dec2 = 2 then
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 2
4754: EQUAL
4755: IFFALSE 4829
// begin Say ( JMM , D2Jb-JMM-1 ) ;
4757: LD_EXP 1
4761: PPUSH
4762: LD_STRING D2Jb-JMM-1
4764: PPUSH
4765: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
4769: LD_EXP 2
4773: PPUSH
4774: LD_STRING D2Jb-Joan-1
4776: PPUSH
4777: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
4781: LD_EXP 1
4785: PPUSH
4786: LD_STRING D2Jb-JMM-2
4788: PPUSH
4789: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
4793: LD_EXP 2
4797: PPUSH
4798: LD_STRING D2Jb-Joan-2
4800: PPUSH
4801: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
4805: LD_EXP 1
4809: PPUSH
4810: LD_STRING D2Jb-JMM-3
4812: PPUSH
4813: CALL_OW 88
// fastEnd = 1 ;
4817: LD_ADDR_EXP 15
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// FinishMission ;
4825: CALL 8804 0 0
// end ; if dec2 = 3 then
4829: LD_VAR 0 2
4833: PUSH
4834: LD_INT 3
4836: EQUAL
4837: IFFALSE 4863
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
4839: LD_EXP 2
4843: PPUSH
4844: LD_STRING D2Jc-Joan-1
4846: PPUSH
4847: CALL_OW 94
// fastEnd = 1 ;
4851: LD_ADDR_EXP 15
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// FinishMission ;
4859: CALL 8804 0 0
// end ; end ; if dec1 = 2 then
4863: LD_VAR 0 1
4867: PUSH
4868: LD_INT 2
4870: EQUAL
4871: IFFALSE 4885
// begin fastEnd = 1 ;
4873: LD_ADDR_EXP 15
4877: PUSH
4878: LD_INT 1
4880: ST_TO_ADDR
// FinishMission ;
4881: CALL 8804 0 0
// end ; end ; if JMMGirl = 2 then
4885: LD_EXP 7
4889: PUSH
4890: LD_INT 2
4892: EQUAL
4893: IFFALSE 5206
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
4895: LD_EXP 3
4899: PPUSH
4900: LD_STRING D2L-Lisa-1
4902: PPUSH
4903: CALL_OW 94
// dec1 = Query1 ;
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: CALL 1133 0 0
4916: ST_TO_ADDR
// if dec1 = 1 then
4917: LD_VAR 0 1
4921: PUSH
4922: LD_INT 1
4924: EQUAL
4925: IFFALSE 5184
// begin ComExitVehicle ( JMM ) ;
4927: LD_EXP 1
4931: PPUSH
4932: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
4936: LD_EXP 1
4940: PPUSH
4941: LD_STRING D2L-JMM-1
4943: PPUSH
4944: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
4948: LD_EXP 3
4952: PPUSH
4953: LD_STRING D2L-Lisa-2
4955: PPUSH
4956: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
4960: LD_EXP 1
4964: PPUSH
4965: LD_STRING D2L-JMM-2
4967: PPUSH
4968: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
4972: LD_EXP 3
4976: PPUSH
4977: LD_STRING D2L-Lisa-3
4979: PPUSH
4980: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4984: LD_EXP 5
4988: PPUSH
4989: LD_STRING DPowell-Pow-1
4991: PPUSH
4992: CALL_OW 94
// dec2 = Query2 ;
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: CALL 1188 0 0
5005: ST_TO_ADDR
// if dec2 = 1 then
5006: LD_VAR 0 2
5010: PUSH
5011: LD_INT 1
5013: EQUAL
5014: IFFALSE 5080
// begin Say ( JMM , D2La-JMM-1 ) ;
5016: LD_EXP 1
5020: PPUSH
5021: LD_STRING D2La-JMM-1
5023: PPUSH
5024: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5028: LD_EXP 3
5032: PPUSH
5033: LD_STRING D2La-Lisa-1
5035: PPUSH
5036: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5040: LD_EXP 1
5044: PPUSH
5045: LD_STRING D2La-JMM-2
5047: PPUSH
5048: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5052: LD_EXP 3
5056: PPUSH
5057: LD_STRING D2La-Lisa-2
5059: PPUSH
5060: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5064: LD_EXP 1
5068: PPUSH
5069: LD_STRING D2La-JMM-3
5071: PPUSH
5072: CALL_OW 88
// InGameOff ;
5076: CALL_OW 9
// end ; if dec2 = 2 then
5080: LD_VAR 0 2
5084: PUSH
5085: LD_INT 2
5087: EQUAL
5088: IFFALSE 5150
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5090: LD_EXP 1
5094: PPUSH
5095: LD_STRING D2Lb-JMM-1
5097: PPUSH
5098: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5102: LD_EXP 3
5106: PPUSH
5107: LD_STRING D2Lb-Lisa-1
5109: PPUSH
5110: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5114: LD_EXP 1
5118: PPUSH
5119: LD_STRING D2Lb-JMM-2
5121: PPUSH
5122: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5126: LD_EXP 3
5130: PPUSH
5131: LD_STRING D2Lb-Lisa-2
5133: PPUSH
5134: CALL_OW 94
// fastEnd = 1 ;
5138: LD_ADDR_EXP 15
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// FinishMission ;
5146: CALL 8804 0 0
// end ; if dec2 = 3 then
5150: LD_VAR 0 2
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5184
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5160: LD_EXP 3
5164: PPUSH
5165: LD_STRING D2Lc-Lisa-1
5167: PPUSH
5168: CALL_OW 94
// fastEnd = 1 ;
5172: LD_ADDR_EXP 15
5176: PUSH
5177: LD_INT 1
5179: ST_TO_ADDR
// FinishMission ;
5180: CALL 8804 0 0
// end ; end ; if dec1 = 2 then
5184: LD_VAR 0 1
5188: PUSH
5189: LD_INT 2
5191: EQUAL
5192: IFFALSE 5206
// begin fastEnd = 1 ;
5194: LD_ADDR_EXP 15
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// FinishMission ;
5202: CALL 8804 0 0
// end ; end ; if JMMGirl = 3 then
5206: LD_EXP 7
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5431
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5216: LD_EXP 4
5220: PPUSH
5221: LD_STRING D2X-Con-1
5223: PPUSH
5224: CALL_OW 94
// dec1 = Query1 ;
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: CALL 1133 0 0
5237: ST_TO_ADDR
// if dec1 = 1 then
5238: LD_VAR 0 1
5242: PUSH
5243: LD_INT 1
5245: EQUAL
5246: IFFALSE 5409
// begin ComExitVehicle ( JMM ) ;
5248: LD_EXP 1
5252: PPUSH
5253: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5257: LD_EXP 1
5261: PPUSH
5262: LD_STRING D2X-JMM-1
5264: PPUSH
5265: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5269: LD_EXP 4
5273: PPUSH
5274: LD_STRING D2X-Con-2
5276: PPUSH
5277: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5281: LD_EXP 5
5285: PPUSH
5286: LD_STRING DPowell-Pow-1
5288: PPUSH
5289: CALL_OW 94
// dec2 = Query2 ;
5293: LD_ADDR_VAR 0 2
5297: PUSH
5298: CALL 1188 0 0
5302: ST_TO_ADDR
// if dec2 = 1 then
5303: LD_VAR 0 2
5307: PUSH
5308: LD_INT 1
5310: EQUAL
5311: IFFALSE 5329
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5313: LD_EXP 1
5317: PPUSH
5318: LD_STRING D2Xa-JMM-1
5320: PPUSH
5321: CALL_OW 88
// InGameOff ;
5325: CALL_OW 9
// end ; if dec2 = 2 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_INT 2
5336: EQUAL
5337: IFFALSE 5375
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D2Xb-JMM-1
5346: PPUSH
5347: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5351: LD_EXP 4
5355: PPUSH
5356: LD_STRING D2Xb-Con-1
5358: PPUSH
5359: CALL_OW 94
// fastEnd = 1 ;
5363: LD_ADDR_EXP 15
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// FinishMission ;
5371: CALL 8804 0 0
// end ; if dec2 = 3 then
5375: LD_VAR 0 2
5379: PUSH
5380: LD_INT 3
5382: EQUAL
5383: IFFALSE 5409
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5385: LD_EXP 4
5389: PPUSH
5390: LD_STRING D2Xc-Con-1
5392: PPUSH
5393: CALL_OW 94
// fastEnd = 1 ;
5397: LD_ADDR_EXP 15
5401: PUSH
5402: LD_INT 1
5404: ST_TO_ADDR
// FinishMission ;
5405: CALL 8804 0 0
// end ; end ; if dec1 = 2 then
5409: LD_VAR 0 1
5413: PUSH
5414: LD_INT 2
5416: EQUAL
5417: IFFALSE 5431
// begin fastEnd = 1 ;
5419: LD_ADDR_EXP 15
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// FinishMission ;
5427: CALL 8804 0 0
// end ; end ; end ;
5431: PPOPN 2
5433: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5434: LD_EXP 1
5438: PPUSH
5439: LD_INT 6
5441: PPUSH
5442: CALL_OW 308
5446: IFFALSE 6212
5448: GO 5450
5450: DISABLE
// begin InGameOn ;
5451: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5455: LD_INT 35
5457: PPUSH
5458: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5462: LD_EXP 1
5466: PPUSH
5467: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5471: LD_EXP 1
5475: PPUSH
5476: LD_INT 62
5478: PPUSH
5479: LD_INT 104
5481: PPUSH
5482: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5486: LD_EXP 1
5490: PPUSH
5491: LD_EXP 2
5495: PPUSH
5496: CALL_OW 296
5500: PUSH
5501: LD_INT 4
5503: LESS
5504: PUSH
5505: LD_EXP 1
5509: PPUSH
5510: LD_EXP 3
5514: PPUSH
5515: CALL_OW 296
5519: PUSH
5520: LD_INT 4
5522: LESS
5523: OR
5524: PUSH
5525: LD_EXP 1
5529: PPUSH
5530: LD_EXP 4
5534: PPUSH
5535: CALL_OW 296
5539: PUSH
5540: LD_INT 4
5542: LESS
5543: OR
5544: IFFALSE 5455
// case JMMGirl of 1 :
5546: LD_EXP 7
5550: PUSH
5551: LD_INT 1
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5559
5557: GO 5771
5559: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5560: LD_INT 22
5562: PUSH
5563: LD_INT 4
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PPUSH
5570: CALL_OW 69
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
5582: LD_EXP 2
5586: PPUSH
5587: LD_EXP 1
5591: PPUSH
5592: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
5596: LD_EXP 1
5600: PPUSH
5601: LD_EXP 2
5605: PPUSH
5606: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
5610: LD_EXP 2
5614: PUSH
5615: LD_EXP 1
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 87
// wait ( 0 0$1 ) ;
5628: LD_INT 35
5630: PPUSH
5631: CALL_OW 67
// DialogueOn ;
5635: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
5639: LD_EXP 2
5643: PPUSH
5644: LD_STRING D3J-Joan-1
5646: PPUSH
5647: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
5651: LD_EXP 1
5655: PPUSH
5656: LD_STRING D3J-JMM-1
5658: PPUSH
5659: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
5663: LD_EXP 2
5667: PPUSH
5668: LD_STRING D3J-Joan-2
5670: PPUSH
5671: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D3J-JMM-2
5682: PPUSH
5683: CALL_OW 88
// wait ( 0 0$1 ) ;
5687: LD_INT 35
5689: PPUSH
5690: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5694: LD_EXP 1
5698: PPUSH
5699: LD_STRING D4-JMM-1
5701: PPUSH
5702: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
5706: LD_EXP 2
5710: PPUSH
5711: LD_STRING D4-Joan-1
5713: PPUSH
5714: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_STRING D4-JMM-2
5725: PPUSH
5726: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
5730: LD_EXP 2
5734: PPUSH
5735: LD_STRING D4-Joan-2
5737: PPUSH
5738: CALL_OW 88
// DialogueOff ;
5742: CALL_OW 7
// InGameOff ;
5746: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
5750: LD_STRING M2J
5752: PPUSH
5753: CALL_OW 337
// SaveForQuickRestart ;
5757: CALL_OW 22
// russianAI = 1 ;
5761: LD_ADDR_EXP 13
5765: PUSH
5766: LD_INT 1
5768: ST_TO_ADDR
// end ; 2 :
5769: GO 6212
5771: LD_INT 2
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5991
5779: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5780: LD_INT 22
5782: PUSH
5783: LD_INT 4
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PPUSH
5790: CALL_OW 69
5794: PPUSH
5795: LD_INT 1
5797: PPUSH
5798: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
5802: LD_EXP 3
5806: PPUSH
5807: LD_EXP 1
5811: PPUSH
5812: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
5816: LD_EXP 1
5820: PPUSH
5821: LD_EXP 3
5825: PPUSH
5826: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
5830: LD_EXP 3
5834: PUSH
5835: LD_EXP 1
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 87
// wait ( 0 0$1 ) ;
5848: LD_INT 35
5850: PPUSH
5851: CALL_OW 67
// DialogueOn ;
5855: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
5859: LD_EXP 3
5863: PPUSH
5864: LD_STRING D3L-Lisa-1
5866: PPUSH
5867: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
5871: LD_EXP 1
5875: PPUSH
5876: LD_STRING D3L-JMM-1
5878: PPUSH
5879: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
5883: LD_EXP 3
5887: PPUSH
5888: LD_STRING D3L-Lisa-2
5890: PPUSH
5891: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
5895: LD_EXP 1
5899: PPUSH
5900: LD_STRING D3L-JMM-2
5902: PPUSH
5903: CALL_OW 88
// wait ( 0 0$1 ) ;
5907: LD_INT 35
5909: PPUSH
5910: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5914: LD_EXP 1
5918: PPUSH
5919: LD_STRING D4-JMM-1
5921: PPUSH
5922: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
5926: LD_EXP 3
5930: PPUSH
5931: LD_STRING D4-Lisa-1
5933: PPUSH
5934: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5938: LD_EXP 1
5942: PPUSH
5943: LD_STRING D4-JMM-1
5945: PPUSH
5946: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
5950: LD_EXP 3
5954: PPUSH
5955: LD_STRING D4-Lisa-2
5957: PPUSH
5958: CALL_OW 88
// DialogueOff ;
5962: CALL_OW 7
// InGameOff ;
5966: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
5970: LD_STRING M2L
5972: PPUSH
5973: CALL_OW 337
// SaveForQuickRestart ;
5977: CALL_OW 22
// russianAI = 1 ;
5981: LD_ADDR_EXP 13
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// end ; 3 :
5989: GO 6212
5991: LD_INT 3
5993: DOUBLE
5994: EQUAL
5995: IFTRUE 5999
5997: GO 6211
5999: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6000: LD_INT 22
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PPUSH
6010: CALL_OW 69
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6022: LD_EXP 4
6026: PPUSH
6027: LD_EXP 1
6031: PPUSH
6032: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6036: LD_EXP 1
6040: PPUSH
6041: LD_EXP 4
6045: PPUSH
6046: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6050: LD_EXP 2
6054: PUSH
6055: LD_EXP 1
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PPUSH
6064: CALL_OW 87
// wait ( 0 0$1 ) ;
6068: LD_INT 35
6070: PPUSH
6071: CALL_OW 67
// DialogueOn ;
6075: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6079: LD_EXP 4
6083: PPUSH
6084: LD_STRING D3X-Con-1
6086: PPUSH
6087: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6091: LD_EXP 1
6095: PPUSH
6096: LD_STRING D3J-JMM-1
6098: PPUSH
6099: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6103: LD_EXP 4
6107: PPUSH
6108: LD_STRING D3J-Joan-2
6110: PPUSH
6111: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6115: LD_EXP 1
6119: PPUSH
6120: LD_STRING D3J-JMM-2
6122: PPUSH
6123: CALL_OW 88
// wait ( 0 0$1 ) ;
6127: LD_INT 35
6129: PPUSH
6130: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6134: LD_EXP 1
6138: PPUSH
6139: LD_STRING D4-JMM-1
6141: PPUSH
6142: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6146: LD_EXP 4
6150: PPUSH
6151: LD_STRING D4-Con-1
6153: PPUSH
6154: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6158: LD_EXP 1
6162: PPUSH
6163: LD_STRING D4-JMM-2
6165: PPUSH
6166: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6170: LD_EXP 4
6174: PPUSH
6175: LD_STRING D4-Con-2
6177: PPUSH
6178: CALL_OW 88
// DialogueOff ;
6182: CALL_OW 7
// InGameOff ;
6186: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6190: LD_STRING M2X
6192: PPUSH
6193: CALL_OW 337
// SaveForQuickRestart ;
6197: CALL_OW 22
// russianAI = 1 ;
6201: LD_ADDR_EXP 13
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// end ; end ;
6209: GO 6212
6211: POP
// end ;
6212: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6213: LD_INT 32
6215: PPUSH
6216: CALL_OW 306
6220: IFFALSE 6553
6222: GO 6224
6224: DISABLE
// begin case JMMGirl of 1 :
6225: LD_EXP 7
6229: PUSH
6230: LD_INT 1
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6238
6236: GO 6360
6238: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6239: LD_EXP 1
6243: PPUSH
6244: LD_STRING D6J-JMM-1
6246: PPUSH
6247: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6251: LD_STRING 13f_Denis
6253: PPUSH
6254: CALL_OW 28
6258: PUSH
6259: LD_INT 1
6261: EQUAL
6262: PUSH
6263: LD_STRING 13s_Denis
6265: PPUSH
6266: CALL_OW 28
6270: PUSH
6271: LD_INT 1
6273: EQUAL
6274: OR
6275: IFFALSE 6315
// begin Say ( Joan , D6J-Joan-1 ) ;
6277: LD_EXP 2
6281: PPUSH
6282: LD_STRING D6J-Joan-1
6284: PPUSH
6285: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6289: LD_EXP 1
6293: PPUSH
6294: LD_STRING D6J-JMM-2
6296: PPUSH
6297: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6301: LD_EXP 2
6305: PPUSH
6306: LD_STRING D6J-Joan-2
6308: PPUSH
6309: CALL_OW 88
// end else
6313: GO 6327
// begin Say ( Joan , D6J-Joan-2a ) ;
6315: LD_EXP 2
6319: PPUSH
6320: LD_STRING D6J-Joan-2a
6322: PPUSH
6323: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6327: LD_EXP 1
6331: PPUSH
6332: LD_STRING D6J-JMM-3
6334: PPUSH
6335: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6339: LD_EXP 2
6343: PPUSH
6344: LD_STRING D6J-Joan-3
6346: PPUSH
6347: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6351: LD_STRING M3
6353: PPUSH
6354: CALL_OW 337
// end ; 2 :
6358: GO 6553
6360: LD_INT 2
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6426
6368: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6369: LD_EXP 1
6373: PPUSH
6374: LD_STRING D6L-JMM-1
6376: PPUSH
6377: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6381: LD_EXP 3
6385: PPUSH
6386: LD_STRING D6L-Lisa-1
6388: PPUSH
6389: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6393: LD_EXP 1
6397: PPUSH
6398: LD_STRING D6L-JMM-2
6400: PPUSH
6401: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6405: LD_EXP 3
6409: PPUSH
6410: LD_STRING D6L-Lisa-2
6412: PPUSH
6413: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6417: LD_STRING M3
6419: PPUSH
6420: CALL_OW 337
// end ; 3 :
6424: GO 6553
6426: LD_INT 3
6428: DOUBLE
6429: EQUAL
6430: IFTRUE 6434
6432: GO 6552
6434: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6435: LD_EXP 1
6439: PPUSH
6440: LD_STRING D6X-JMM-1
6442: PPUSH
6443: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6447: LD_EXP 4
6451: PPUSH
6452: LD_STRING D6X-Con-1
6454: PPUSH
6455: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6459: LD_EXP 1
6463: PPUSH
6464: LD_STRING D6X-JMM-2
6466: PPUSH
6467: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6471: LD_EXP 4
6475: PPUSH
6476: LD_STRING D6X-Con-2
6478: PPUSH
6479: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6483: LD_EXP 1
6487: PPUSH
6488: LD_STRING D6X-JMM-3
6490: PPUSH
6491: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6495: LD_EXP 4
6499: PPUSH
6500: LD_STRING D6X-Con-3
6502: PPUSH
6503: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6507: LD_EXP 1
6511: PPUSH
6512: LD_STRING D6X-JMM-4
6514: PPUSH
6515: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6519: LD_EXP 4
6523: PPUSH
6524: LD_STRING D6X-Con-4
6526: PPUSH
6527: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6531: LD_EXP 1
6535: PPUSH
6536: LD_STRING D6X-JMM-5
6538: PPUSH
6539: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6543: LD_STRING M3
6545: PPUSH
6546: CALL_OW 337
// end ; end ;
6550: GO 6553
6552: POP
// end ;
6553: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6554: LD_INT 22
6556: PUSH
6557: LD_INT 1
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 33
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PPUSH
6578: CALL_OW 69
6582: PPUSH
6583: CALL_OW 306
6587: IFFALSE 6733
6589: GO 6591
6591: DISABLE
// begin case JMMGirl of 1 :
6592: LD_EXP 7
6596: PUSH
6597: LD_INT 1
6599: DOUBLE
6600: EQUAL
6601: IFTRUE 6605
6603: GO 6642
6605: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6606: LD_EXP 1
6610: PPUSH
6611: LD_STRING D5-JMM-1
6613: PPUSH
6614: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6618: LD_INT 77
6620: PPUSH
6621: LD_INT 87
6623: PPUSH
6624: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
6628: LD_EXP 2
6632: PPUSH
6633: LD_STRING D5-Joan-1
6635: PPUSH
6636: CALL_OW 88
// end ; 2 :
6640: GO 6733
6642: LD_INT 2
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6687
6650: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6651: LD_EXP 1
6655: PPUSH
6656: LD_STRING D5-JMM-1
6658: PPUSH
6659: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6663: LD_INT 77
6665: PPUSH
6666: LD_INT 87
6668: PPUSH
6669: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
6673: LD_EXP 3
6677: PPUSH
6678: LD_STRING D5-Lisa-1
6680: PPUSH
6681: CALL_OW 88
// end ; 3 :
6685: GO 6733
6687: LD_INT 3
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6732
6695: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6696: LD_EXP 1
6700: PPUSH
6701: LD_STRING D5-JMM-1
6703: PPUSH
6704: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6708: LD_INT 77
6710: PPUSH
6711: LD_INT 87
6713: PPUSH
6714: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
6718: LD_EXP 4
6722: PPUSH
6723: LD_STRING D5-Con-1
6725: PPUSH
6726: CALL_OW 88
// end ; end ;
6730: GO 6733
6732: POP
// end ;
6733: END
// every 15 15$0 do
6734: GO 6736
6736: DISABLE
// begin DialogueOn ;
6737: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
6741: LD_EXP 5
6745: PPUSH
6746: LD_STRING D7-Pow-1
6748: PPUSH
6749: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
6753: LD_EXP 1
6757: PPUSH
6758: LD_STRING D7-JMM-1
6760: PPUSH
6761: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
6765: LD_EXP 5
6769: PPUSH
6770: LD_STRING D7-Pow-2
6772: PPUSH
6773: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
6777: LD_EXP 1
6781: PPUSH
6782: LD_STRING D7-JMM-2
6784: PPUSH
6785: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
6789: LD_EXP 5
6793: PPUSH
6794: LD_STRING D7-Pow-3
6796: PPUSH
6797: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
6801: LD_EXP 1
6805: PPUSH
6806: LD_STRING D7-JMM-3
6808: PPUSH
6809: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
6813: LD_EXP 5
6817: PPUSH
6818: LD_STRING D7-Pow-4
6820: PPUSH
6821: CALL_OW 94
// DialogueOff ;
6825: CALL_OW 7
// end ; end_of_file
6829: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 255
6839: PUSH
6840: LD_INT 3
6842: EQUAL
6843: IFFALSE 6917
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6845: LD_ADDR_EXP 10
6849: PUSH
6850: LD_EXP 10
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: CALL_OW 3
6862: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6863: LD_ADDR_EXP 10
6867: PUSH
6868: LD_EXP 10
6872: PPUSH
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 3
6880: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6881: LD_ADDR_EXP 10
6885: PUSH
6886: LD_EXP 10
6890: PPUSH
6891: LD_INT 1
6893: PPUSH
6894: CALL_OW 3
6898: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6899: LD_ADDR_EXP 10
6903: PUSH
6904: LD_EXP 10
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: CALL_OW 3
6916: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
6917: LD_VAR 0 1
6921: PPUSH
6922: CALL_OW 255
6926: PUSH
6927: LD_INT 3
6929: EQUAL
6930: PUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: CALL_OW 266
6940: PUSH
6941: LD_INT 0
6943: EQUAL
6944: PUSH
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 266
6954: PUSH
6955: LD_INT 2
6957: EQUAL
6958: OR
6959: PUSH
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 266
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: OR
6974: PUSH
6975: EMPTY
6976: LIST
6977: AND
6978: IFFALSE 6989
// ComUpgrade ( building ) ;
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL_OW 255
6998: PUSH
6999: LD_INT 3
7001: EQUAL
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 266
7012: PUSH
7013: LD_INT 32
7015: EQUAL
7016: AND
7017: IFFALSE 7058
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_INT 42
7026: PUSH
7027: LD_INT 43
7029: PUSH
7030: LD_INT 44
7032: PUSH
7033: LD_INT 46
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 4
7047: PPUSH
7048: CALL_OW 12
7052: ARRAY
7053: PPUSH
7054: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 255
7067: PUSH
7068: LD_INT 3
7070: EQUAL
7071: PUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 266
7081: PUSH
7082: LD_INT 33
7084: EQUAL
7085: AND
7086: IFFALSE 7127
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_INT 42
7095: PUSH
7096: LD_INT 43
7098: PUSH
7099: LD_INT 44
7101: PUSH
7102: LD_INT 46
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 4
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: PPUSH
7123: CALL_OW 208
// end ;
7127: PPOPN 1
7129: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 255
7139: PUSH
7140: LD_INT 3
7142: EQUAL
7143: PUSH
7144: LD_VAR 0 1
7148: PPUSH
7149: CALL_OW 247
7153: PUSH
7154: LD_INT 3
7156: EQUAL
7157: AND
7158: IFFALSE 7850
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL_OW 266
7169: PUSH
7170: LD_INT 31
7172: EQUAL
7173: PUSH
7174: LD_VAR 0 1
7178: PPUSH
7179: CALL_OW 266
7183: PUSH
7184: LD_INT 32
7186: EQUAL
7187: OR
7188: PUSH
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 266
7198: PUSH
7199: LD_INT 36
7201: EQUAL
7202: OR
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 266
7213: PUSH
7214: LD_INT 0
7216: EQUAL
7217: OR
7218: PUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 266
7228: PUSH
7229: LD_INT 24
7231: EQUAL
7232: OR
7233: PUSH
7234: LD_VAR 0 1
7238: PPUSH
7239: CALL_OW 266
7243: PUSH
7244: LD_INT 17
7246: EQUAL
7247: OR
7248: PUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 266
7258: PUSH
7259: LD_INT 25
7261: EQUAL
7262: OR
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: CALL_OW 266
7273: PUSH
7274: LD_INT 19
7276: EQUAL
7277: OR
7278: PUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 266
7288: PUSH
7289: LD_INT 20
7291: EQUAL
7292: OR
7293: PUSH
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 266
7303: PUSH
7304: LD_INT 18
7306: EQUAL
7307: OR
7308: PUSH
7309: LD_VAR 0 1
7313: PPUSH
7314: CALL_OW 266
7318: PUSH
7319: LD_INT 21
7321: EQUAL
7322: OR
7323: PUSH
7324: LD_VAR 0 1
7328: PPUSH
7329: CALL_OW 266
7333: PUSH
7334: LD_INT 23
7336: EQUAL
7337: OR
7338: PUSH
7339: LD_VAR 0 1
7343: PPUSH
7344: CALL_OW 266
7348: PUSH
7349: LD_INT 16
7351: EQUAL
7352: OR
7353: PUSH
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 6
7366: EQUAL
7367: OR
7368: PUSH
7369: LD_VAR 0 1
7373: PPUSH
7374: CALL_OW 266
7378: PUSH
7379: LD_INT 29
7381: EQUAL
7382: OR
7383: PUSH
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 266
7393: PUSH
7394: LD_INT 26
7396: EQUAL
7397: OR
7398: PUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 266
7408: PUSH
7409: LD_INT 30
7411: EQUAL
7412: OR
7413: PUSH
7414: LD_VAR 0 1
7418: PPUSH
7419: CALL_OW 266
7423: PUSH
7424: LD_INT 28
7426: EQUAL
7427: OR
7428: PUSH
7429: LD_VAR 0 1
7433: PPUSH
7434: CALL_OW 266
7438: PUSH
7439: LD_INT 27
7441: EQUAL
7442: OR
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 266
7453: PUSH
7454: LD_INT 33
7456: EQUAL
7457: OR
7458: PUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 266
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: OR
7473: PUSH
7474: LD_VAR 0 1
7478: PPUSH
7479: CALL_OW 266
7483: PUSH
7484: LD_INT 4
7486: EQUAL
7487: OR
7488: IFFALSE 7574
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7490: LD_ADDR_EXP 10
7494: PUSH
7495: LD_EXP 10
7499: PUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 266
7509: ADD
7510: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7511: LD_ADDR_EXP 10
7515: PUSH
7516: LD_EXP 10
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 250
7530: ADD
7531: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7532: LD_ADDR_EXP 10
7536: PUSH
7537: LD_EXP 10
7541: PUSH
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 251
7551: ADD
7552: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7553: LD_ADDR_EXP 10
7557: PUSH
7558: LD_EXP 10
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 254
7572: ADD
7573: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
7574: LD_VAR 0 1
7578: PPUSH
7579: CALL_OW 266
7583: PUSH
7584: LD_INT 1
7586: EQUAL
7587: IFFALSE 7666
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
7589: LD_ADDR_EXP 10
7593: PUSH
7594: LD_EXP 10
7598: PUSH
7599: LD_INT 0
7601: ADD
7602: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7603: LD_ADDR_EXP 10
7607: PUSH
7608: LD_EXP 10
7612: PUSH
7613: LD_VAR 0 1
7617: PPUSH
7618: CALL_OW 250
7622: ADD
7623: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7624: LD_ADDR_EXP 10
7628: PUSH
7629: LD_EXP 10
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 251
7643: ADD
7644: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7645: LD_ADDR_EXP 10
7649: PUSH
7650: LD_EXP 10
7654: PUSH
7655: LD_VAR 0 1
7659: PPUSH
7660: CALL_OW 254
7664: ADD
7665: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 266
7675: PUSH
7676: LD_INT 3
7678: EQUAL
7679: IFFALSE 7758
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
7681: LD_ADDR_EXP 10
7685: PUSH
7686: LD_EXP 10
7690: PUSH
7691: LD_INT 2
7693: ADD
7694: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7695: LD_ADDR_EXP 10
7699: PUSH
7700: LD_EXP 10
7704: PUSH
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 250
7714: ADD
7715: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7716: LD_ADDR_EXP 10
7720: PUSH
7721: LD_EXP 10
7725: PUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: CALL_OW 251
7735: ADD
7736: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7737: LD_ADDR_EXP 10
7741: PUSH
7742: LD_EXP 10
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 254
7756: ADD
7757: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 266
7767: PUSH
7768: LD_INT 5
7770: EQUAL
7771: IFFALSE 7850
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
7773: LD_ADDR_EXP 10
7777: PUSH
7778: LD_EXP 10
7782: PUSH
7783: LD_INT 4
7785: ADD
7786: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7787: LD_ADDR_EXP 10
7791: PUSH
7792: LD_EXP 10
7796: PUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 250
7806: ADD
7807: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7808: LD_ADDR_EXP 10
7812: PUSH
7813: LD_EXP 10
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 251
7827: ADD
7828: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7829: LD_ADDR_EXP 10
7833: PUSH
7834: LD_EXP 10
7838: PUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 254
7848: ADD
7849: ST_TO_ADDR
// end ; end ; end ;
7850: PPOPN 1
7852: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
7853: LD_VAR 0 2
7857: PUSH
7858: LD_INT 1
7860: EQUAL
7861: PUSH
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 40
7869: EQUAL
7870: OR
7871: IFFALSE 7995
// if GetSide ( vehicle ) = 3 then
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 255
7882: PUSH
7883: LD_INT 3
7885: EQUAL
7886: IFFALSE 7995
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 264
7897: PUSH
7898: LD_INT 47
7900: EQUAL
7901: PUSH
7902: LD_VAR 0 1
7906: PPUSH
7907: CALL_OW 264
7911: PUSH
7912: LD_INT 46
7914: EQUAL
7915: OR
7916: PUSH
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 264
7926: PUSH
7927: LD_INT 45
7929: EQUAL
7930: OR
7931: PUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 264
7941: PUSH
7942: LD_INT 44
7944: EQUAL
7945: OR
7946: IFFALSE 7964
// russianTanks = russianTanks ^ vehicle ;
7948: LD_ADDR_EXP 11
7952: PUSH
7953: LD_EXP 11
7957: PUSH
7958: LD_VAR 0 1
7962: ADD
7963: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
7964: LD_VAR 0 1
7968: PPUSH
7969: CALL_OW 264
7973: PUSH
7974: LD_INT 49
7976: EQUAL
7977: IFFALSE 7995
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
7979: LD_ADDR_EXP 12
7983: PUSH
7984: LD_EXP 12
7988: PUSH
7989: LD_VAR 0 1
7993: ADD
7994: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 255
8004: PUSH
8005: LD_INT 1
8007: EQUAL
8008: PUSH
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 264
8018: PUSH
8019: LD_INT 10
8021: EQUAL
8022: AND
8023: IFFALSE 8039
// amLaserCounter = amLaserCounter + 1 ;
8025: LD_ADDR_EXP 9
8029: PUSH
8030: LD_EXP 9
8034: PUSH
8035: LD_INT 1
8037: PLUS
8038: ST_TO_ADDR
// end ;
8039: PPOPN 2
8041: END
// on UnitGoesToRed ( unit ) do var i ;
8042: LD_INT 0
8044: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 255
8054: PUSH
8055: LD_INT 3
8057: EQUAL
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: CALL_OW 247
8068: PUSH
8069: LD_INT 2
8071: EQUAL
8072: AND
8073: IFFALSE 8191
// begin if russianTanks > 0 then
8075: LD_EXP 11
8079: PUSH
8080: LD_INT 0
8082: GREATER
8083: IFFALSE 8133
// for i in russianTanks do
8085: LD_ADDR_VAR 0 2
8089: PUSH
8090: LD_EXP 11
8094: PUSH
8095: FOR_IN
8096: IFFALSE 8131
// if i = unit then
8098: LD_VAR 0 2
8102: PUSH
8103: LD_VAR 0 1
8107: EQUAL
8108: IFFALSE 8129
// russianTanks = russianTanks diff [ unit ] ;
8110: LD_ADDR_EXP 11
8114: PUSH
8115: LD_EXP 11
8119: PUSH
8120: LD_VAR 0 1
8124: PUSH
8125: EMPTY
8126: LIST
8127: DIFF
8128: ST_TO_ADDR
8129: GO 8095
8131: POP
8132: POP
// if russianTimeLapsers > 0 then
8133: LD_EXP 12
8137: PUSH
8138: LD_INT 0
8140: GREATER
8141: IFFALSE 8191
// for i in russianTimeLapsers do
8143: LD_ADDR_VAR 0 2
8147: PUSH
8148: LD_EXP 12
8152: PUSH
8153: FOR_IN
8154: IFFALSE 8189
// if i = unit then
8156: LD_VAR 0 2
8160: PUSH
8161: LD_VAR 0 1
8165: EQUAL
8166: IFFALSE 8187
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8168: LD_ADDR_EXP 12
8172: PUSH
8173: LD_EXP 12
8177: PUSH
8178: LD_VAR 0 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: DIFF
8186: ST_TO_ADDR
8187: GO 8153
8189: POP
8190: POP
// end ; end ; end_of_file
8191: PPOPN 2
8193: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8194: LD_EXP 1
8198: PPUSH
8199: CALL_OW 310
8203: PPUSH
8204: LD_INT 12
8206: PPUSH
8207: CALL_OW 308
8211: PUSH
8212: LD_EXP 15
8216: PUSH
8217: LD_INT 0
8219: EQUAL
8220: AND
8221: IFFALSE 8663
8223: GO 8225
8225: DISABLE
8226: LD_INT 0
8228: PPUSH
8229: PPUSH
// begin enable ;
8230: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_EXP 1
8240: PPUSH
8241: CALL_OW 310
8245: ST_TO_ADDR
// if JMMGirl = 1 then
8246: LD_EXP 7
8250: PUSH
8251: LD_INT 1
8253: EQUAL
8254: IFFALSE 8271
// JMMGirlVeh = IsInUnit ( Joan ) ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_EXP 2
8265: PPUSH
8266: CALL_OW 310
8270: ST_TO_ADDR
// if JMMGirl = 2 then
8271: LD_EXP 7
8275: PUSH
8276: LD_INT 2
8278: EQUAL
8279: IFFALSE 8296
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_EXP 3
8290: PPUSH
8291: CALL_OW 310
8295: ST_TO_ADDR
// if JMMGirl = 3 then
8296: LD_EXP 7
8300: PUSH
8301: LD_INT 3
8303: EQUAL
8304: IFFALSE 8321
// JMMGirlVeh = IsInUnit ( Connie ) ;
8306: LD_ADDR_VAR 0 2
8310: PUSH
8311: LD_EXP 4
8315: PPUSH
8316: CALL_OW 310
8320: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8321: LD_EXP 1
8325: PPUSH
8326: CALL_OW 310
8330: PPUSH
8331: LD_EXP 2
8335: PPUSH
8336: CALL_OW 310
8340: PPUSH
8341: CALL_OW 296
8345: PUSH
8346: LD_INT 10
8348: LESS
8349: PUSH
8350: LD_EXP 1
8354: PPUSH
8355: CALL_OW 310
8359: PPUSH
8360: LD_EXP 3
8364: PPUSH
8365: CALL_OW 310
8369: PPUSH
8370: CALL_OW 296
8374: PUSH
8375: LD_INT 10
8377: LESS
8378: OR
8379: PUSH
8380: LD_EXP 1
8384: PPUSH
8385: CALL_OW 310
8389: PPUSH
8390: LD_EXP 4
8394: PPUSH
8395: CALL_OW 310
8399: PPUSH
8400: CALL_OW 296
8404: PUSH
8405: LD_INT 10
8407: LESS
8408: OR
8409: IFFALSE 8567
// begin case Query ( Q3b ) of 1 :
8411: LD_STRING Q3b
8413: PPUSH
8414: CALL_OW 97
8418: PUSH
8419: LD_INT 1
8421: DOUBLE
8422: EQUAL
8423: IFTRUE 8427
8425: GO 8564
8427: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
8428: LD_VAR 0 1
8432: PPUSH
8433: CALL_OW 265
8437: PUSH
8438: EMPTY
8439: LIST
8440: PUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 262
8450: PUSH
8451: EMPTY
8452: LIST
8453: PUSH
8454: LD_VAR 0 1
8458: PPUSH
8459: CALL_OW 263
8463: PUSH
8464: EMPTY
8465: LIST
8466: PUSH
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 264
8476: PUSH
8477: EMPTY
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: LD_STRING 14_JMMVeh_1
8488: PPUSH
8489: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8493: LD_VAR 0 2
8497: PPUSH
8498: CALL_OW 265
8502: PUSH
8503: EMPTY
8504: LIST
8505: PUSH
8506: LD_VAR 0 2
8510: PPUSH
8511: CALL_OW 262
8515: PUSH
8516: EMPTY
8517: LIST
8518: PUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL_OW 263
8528: PUSH
8529: EMPTY
8530: LIST
8531: PUSH
8532: LD_VAR 0 2
8536: PPUSH
8537: CALL_OW 264
8541: PUSH
8542: EMPTY
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PPUSH
8551: LD_STRING 14_JMMGirlVeh_1
8553: PPUSH
8554: CALL_OW 39
// FinishMission ;
8558: CALL 8804 0 0
// end ; end ;
8562: GO 8565
8564: POP
// end else
8565: GO 8663
// begin if JMMGirl = 1 then
8567: LD_EXP 7
8571: PUSH
8572: LD_INT 1
8574: EQUAL
8575: IFFALSE 8603
// begin case Query ( Q3bJ ) of 1 :
8577: LD_STRING Q3bJ
8579: PPUSH
8580: CALL_OW 97
8584: PUSH
8585: LD_INT 1
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8600
8593: POP
// FinishMission ; end ;
8594: CALL 8804 0 0
8598: GO 8601
8600: POP
// end else
8601: GO 8663
// begin if JMMGirl = 2 then
8603: LD_EXP 7
8607: PUSH
8608: LD_INT 2
8610: EQUAL
8611: IFFALSE 8639
// begin case Query ( Q3bL ) of 1 :
8613: LD_STRING Q3bL
8615: PPUSH
8616: CALL_OW 97
8620: PUSH
8621: LD_INT 1
8623: DOUBLE
8624: EQUAL
8625: IFTRUE 8629
8627: GO 8636
8629: POP
// FinishMission ; end ;
8630: CALL 8804 0 0
8634: GO 8637
8636: POP
// end else
8637: GO 8663
// begin case Query ( Q3bX ) of 1 :
8639: LD_STRING Q3bX
8641: PPUSH
8642: CALL_OW 97
8646: PUSH
8647: LD_INT 1
8649: DOUBLE
8650: EQUAL
8651: IFTRUE 8655
8653: GO 8662
8655: POP
// FinishMission ; end ;
8656: CALL 8804 0 0
8660: GO 8663
8662: POP
// end ; end ; end ; end ;
8663: PPOPN 2
8665: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
8666: LD_INT 22
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: PUSH
8695: LD_INT 0
8697: EQUAL
8698: PUSH
8699: LD_EXP 15
8703: PUSH
8704: LD_INT 0
8706: EQUAL
8707: AND
8708: IFFALSE 8803
8710: GO 8712
8712: DISABLE
// begin DialogueOn ;
8713: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
8717: LD_EXP 1
8721: PPUSH
8722: LD_STRING DEnd-JMM-1
8724: PPUSH
8725: CALL_OW 88
// if JMMGirl = 1 then
8729: LD_EXP 7
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: IFFALSE 8751
// Say ( Joan , DEnd-Joan-1 ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_STRING DEnd-Joan-1
8746: PPUSH
8747: CALL_OW 88
// if JMMGirl = 2 then
8751: LD_EXP 7
8755: PUSH
8756: LD_INT 2
8758: EQUAL
8759: IFFALSE 8773
// Say ( Lisa , DEnd-Lisa-1 ) ;
8761: LD_EXP 3
8765: PPUSH
8766: LD_STRING DEnd-Lisa-1
8768: PPUSH
8769: CALL_OW 88
// if JMMGirl = 3 then
8773: LD_EXP 7
8777: PUSH
8778: LD_INT 3
8780: EQUAL
8781: IFFALSE 8795
// Say ( Connie , DEnd-Con-1 ) ;
8783: LD_EXP 4
8787: PPUSH
8788: LD_STRING DEnd-Con-1
8790: PPUSH
8791: CALL_OW 88
// DialogueOff ;
8795: CALL_OW 7
// FinishMission ;
8799: CALL 8804 0 0
// end ;
8803: END
// export function FinishMission ; begin
8804: LD_INT 0
8806: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
8807: LD_EXP 1
8811: PPUSH
8812: LD_STRING 14_JMM
8814: PPUSH
8815: CALL_OW 38
// if fastEnd = 1 then
8819: LD_EXP 15
8823: PUSH
8824: LD_INT 1
8826: EQUAL
8827: IFFALSE 8951
// begin AddMedal ( fastend , - 1 ) ;
8829: LD_STRING fastend
8831: PPUSH
8832: LD_INT 1
8834: NEG
8835: PPUSH
8836: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
8840: LD_STRING fastend
8842: PPUSH
8843: LD_INT 1
8845: NEG
8846: PPUSH
8847: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
8851: LD_STRING fastend
8853: PPUSH
8854: LD_INT 1
8856: NEG
8857: PPUSH
8858: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
8862: LD_EXP 7
8866: PPUSH
8867: LD_STRING 14_JMMGirl_1
8869: PPUSH
8870: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_STRING 14_JMMGirlStatus_1
8879: PPUSH
8880: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
8884: LD_INT 0
8886: PPUSH
8887: LD_STRING 14_KappaStatus_1
8889: PPUSH
8890: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
8894: LD_INT 95
8896: PPUSH
8897: CALL_OW 265
8901: PUSH
8902: EMPTY
8903: LIST
8904: PUSH
8905: LD_INT 95
8907: PPUSH
8908: CALL_OW 262
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 95
8918: PPUSH
8919: CALL_OW 263
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: LD_INT 95
8929: PPUSH
8930: CALL_OW 264
8934: PUSH
8935: EMPTY
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PPUSH
8944: LD_STRING 14_JMMVeh_1
8946: PPUSH
8947: CALL_OW 39
// end ; if fastEnd = 0 then
8951: LD_EXP 15
8955: PUSH
8956: LD_INT 0
8958: EQUAL
8959: IFFALSE 9629
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
8961: LD_EXP 7
8965: PPUSH
8966: LD_STRING 14_JMMGirl_1
8968: PPUSH
8969: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
8973: LD_INT 22
8975: PUSH
8976: LD_INT 3
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PPUSH
8997: CALL_OW 69
9001: PUSH
9002: LD_INT 0
9004: EQUAL
9005: PUSH
9006: LD_INT 48
9008: PPUSH
9009: CALL_OW 255
9013: PUSH
9014: LD_INT 1
9016: EQUAL
9017: AND
9018: IFFALSE 9032
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9020: LD_INT 1
9022: PPUSH
9023: LD_STRING 14_KappaStatus_1
9025: PPUSH
9026: CALL_OW 39
9030: GO 9042
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9032: LD_INT 0
9034: PPUSH
9035: LD_STRING 14_KappaStatus_1
9037: PPUSH
9038: CALL_OW 39
// case JMMGirl of 1 :
9042: LD_EXP 7
9046: PUSH
9047: LD_INT 1
9049: DOUBLE
9050: EQUAL
9051: IFTRUE 9055
9053: GO 9203
9055: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9056: LD_EXP 2
9060: PPUSH
9061: CALL_OW 302
9065: PUSH
9066: LD_EXP 2
9070: PPUSH
9071: CALL_OW 255
9075: PUSH
9076: LD_INT 1
9078: EQUAL
9079: AND
9080: PUSH
9081: LD_INT 22
9083: PUSH
9084: LD_INT 3
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 21
9093: PUSH
9094: LD_INT 1
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PPUSH
9105: CALL_OW 69
9109: PUSH
9110: LD_INT 0
9112: EQUAL
9113: PUSH
9114: LD_EXP 1
9118: PPUSH
9119: CALL_OW 310
9123: PPUSH
9124: LD_EXP 2
9128: PPUSH
9129: CALL_OW 310
9133: PPUSH
9134: CALL_OW 296
9138: PUSH
9139: LD_INT 10
9141: LESS
9142: OR
9143: AND
9144: IFFALSE 9180
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9146: LD_INT 1
9148: PPUSH
9149: LD_STRING 14_JMMGirlStatus_1
9151: PPUSH
9152: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9156: LD_EXP 2
9160: PPUSH
9161: LD_STRING 14_Joan
9163: PPUSH
9164: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9168: LD_STRING protect
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 101
9178: GO 9201
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9180: LD_INT 0
9182: PPUSH
9183: LD_STRING 14_JMMGirlStatus_1
9185: PPUSH
9186: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9190: LD_STRING protect
9192: PPUSH
9193: LD_INT 1
9195: NEG
9196: PPUSH
9197: CALL_OW 101
// end ; end ; 2 :
9201: GO 9516
9203: LD_INT 2
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 9359
9211: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9212: LD_EXP 3
9216: PPUSH
9217: CALL_OW 302
9221: PUSH
9222: LD_EXP 3
9226: PPUSH
9227: CALL_OW 255
9231: PUSH
9232: LD_INT 1
9234: EQUAL
9235: AND
9236: PUSH
9237: LD_INT 22
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 1
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 69
9265: PUSH
9266: LD_INT 0
9268: EQUAL
9269: PUSH
9270: LD_EXP 1
9274: PPUSH
9275: CALL_OW 310
9279: PPUSH
9280: LD_EXP 3
9284: PPUSH
9285: CALL_OW 310
9289: PPUSH
9290: CALL_OW 296
9294: PUSH
9295: LD_INT 10
9297: LESS
9298: OR
9299: AND
9300: IFFALSE 9336
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9302: LD_INT 1
9304: PPUSH
9305: LD_STRING 14_JMMGirlStatus_1
9307: PPUSH
9308: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9312: LD_EXP 3
9316: PPUSH
9317: LD_STRING 14_Lisa
9319: PPUSH
9320: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9324: LD_STRING protect
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: CALL_OW 101
9334: GO 9357
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9336: LD_INT 0
9338: PPUSH
9339: LD_STRING 14_JMMGirlStatus_1
9341: PPUSH
9342: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9346: LD_STRING protect
9348: PPUSH
9349: LD_INT 2
9351: NEG
9352: PPUSH
9353: CALL_OW 101
// end ; end ; 3 :
9357: GO 9516
9359: LD_INT 3
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9515
9367: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9368: LD_EXP 4
9372: PPUSH
9373: CALL_OW 302
9377: PUSH
9378: LD_EXP 4
9382: PPUSH
9383: CALL_OW 255
9387: PUSH
9388: LD_INT 1
9390: EQUAL
9391: AND
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 21
9405: PUSH
9406: LD_INT 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 69
9421: PUSH
9422: LD_INT 0
9424: EQUAL
9425: PUSH
9426: LD_EXP 1
9430: PPUSH
9431: CALL_OW 310
9435: PPUSH
9436: LD_EXP 4
9440: PPUSH
9441: CALL_OW 310
9445: PPUSH
9446: CALL_OW 296
9450: PUSH
9451: LD_INT 10
9453: LESS
9454: OR
9455: AND
9456: IFFALSE 9492
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9458: LD_INT 1
9460: PPUSH
9461: LD_STRING 14_JMMGirlStatus_1
9463: PPUSH
9464: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9468: LD_EXP 4
9472: PPUSH
9473: LD_STRING 14_Connie
9475: PPUSH
9476: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9480: LD_STRING protect
9482: PPUSH
9483: LD_INT 1
9485: PPUSH
9486: CALL_OW 101
9490: GO 9513
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9492: LD_INT 0
9494: PPUSH
9495: LD_STRING 14_JMMGirlStatus_1
9497: PPUSH
9498: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
9502: LD_STRING protect
9504: PPUSH
9505: LD_INT 3
9507: NEG
9508: PPUSH
9509: CALL_OW 101
// end ; end ; end ;
9513: GO 9516
9515: POP
// if amLaserCounter >= 2 then
9516: LD_EXP 9
9520: PUSH
9521: LD_INT 2
9523: GREATEREQUAL
9524: IFFALSE 9538
// begin AddMedal ( double , 1 ) end else
9526: LD_STRING double
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 101
9536: GO 9572
// begin if amLaserCounter = 1 then
9538: LD_EXP 9
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9561
// AddMedal ( double , - 2 ) else
9548: LD_STRING double
9550: PPUSH
9551: LD_INT 2
9553: NEG
9554: PPUSH
9555: CALL_OW 101
9559: GO 9572
// AddMedal ( double , - 1 ) ;
9561: LD_STRING double
9563: PPUSH
9564: LD_INT 1
9566: NEG
9567: PPUSH
9568: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
9572: LD_INT 22
9574: PUSH
9575: LD_INT 3
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PPUSH
9596: CALL_OW 69
9600: PUSH
9601: LD_INT 0
9603: EQUAL
9604: IFFALSE 9618
// AddMedal ( base , 1 ) else
9606: LD_STRING base
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 101
9616: GO 9629
// AddMedal ( base , - 1 ) ;
9618: LD_STRING base
9620: PPUSH
9621: LD_INT 1
9623: NEG
9624: PPUSH
9625: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
9629: LD_STRING Eliminate
9631: PPUSH
9632: CALL_OW 102
// YouWin ;
9636: CALL_OW 103
// end ; end_of_file
9640: LD_VAR 0 1
9644: RET
// every 0 0$1 trigger IsDead ( JMM ) do
9645: LD_EXP 1
9649: PPUSH
9650: CALL_OW 301
9654: IFFALSE 9666
9656: GO 9658
9658: DISABLE
// YouLost ( JMM ) ; end_of_file
9659: LD_STRING JMM
9661: PPUSH
9662: CALL_OW 104
9666: END
// every 1 1$0 do
9667: GO 9669
9669: DISABLE
// begin enable ;
9670: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
9671: LD_INT 3
9673: PPUSH
9674: LD_INT 5
9676: PPUSH
9677: CALL_OW 12
9681: PPUSH
9682: LD_INT 13
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 55
// end ;
9692: END
