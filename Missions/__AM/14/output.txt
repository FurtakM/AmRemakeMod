// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1412 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Connie , true ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Connie
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1173 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1173 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1166
// begin if IsOk ( i ) then
1139: LD_VAR 0 4
1143: PPUSH
1144: CALL_OW 302
1148: IFFALSE 1164
// SaveCharacters ( i , ident ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 38
// end ;
1164: GO 1136
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 3
1172: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1173: LD_INT 0
1175: PPUSH
1176: PPUSH
1177: PPUSH
1178: PPUSH
// for i = 1 to count do
1179: LD_ADDR_VAR 0 8
1183: PUSH
1184: DOUBLE
1185: LD_INT 1
1187: DEC
1188: ST_TO_ADDR
1189: LD_VAR 0 6
1193: PUSH
1194: FOR_TO
1195: IFFALSE 1276
// begin uc_side = side ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_VAR 0 1
1206: ST_TO_ADDR
// uc_nation = nation ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_VAR 0 2
1216: ST_TO_ADDR
// hc_gallery =  ;
1217: LD_ADDR_OWVAR 33
1221: PUSH
1222: LD_STRING 
1224: ST_TO_ADDR
// hc_name =  ;
1225: LD_ADDR_OWVAR 26
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_VAR 0 5
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 380
// un = CreateHuman ;
1250: LD_ADDR_VAR 0 10
1254: PUSH
1255: CALL_OW 44
1259: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1260: LD_VAR 0 10
1264: PPUSH
1265: LD_VAR 0 3
1269: PPUSH
1270: CALL_OW 52
// end ;
1274: GO 1194
1276: POP
1277: POP
// end ;
1278: LD_VAR 0 7
1282: RET
// export function Query1 ; begin
1283: LD_INT 0
1285: PPUSH
// case query ( Q1 ) of 1 :
1286: LD_STRING Q1
1288: PPUSH
1289: CALL_OW 97
1293: PUSH
1294: LD_INT 1
1296: DOUBLE
1297: EQUAL
1298: IFTRUE 1302
1300: GO 1313
1302: POP
// result = 1 ; 2 :
1303: LD_ADDR_VAR 0 1
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
1311: GO 1333
1313: LD_INT 2
1315: DOUBLE
1316: EQUAL
1317: IFTRUE 1321
1319: GO 1332
1321: POP
// result = 2 ; end ;
1322: LD_ADDR_VAR 0 1
1326: PUSH
1327: LD_INT 2
1329: ST_TO_ADDR
1330: GO 1333
1332: POP
// end ;
1333: LD_VAR 0 1
1337: RET
// export function Query2 ; begin
1338: LD_INT 0
1340: PPUSH
// case query ( Q2J ) of 1 :
1341: LD_STRING Q2J
1343: PPUSH
1344: CALL_OW 97
1348: PUSH
1349: LD_INT 1
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1368
1357: POP
// result = 1 ; 2 :
1358: LD_ADDR_VAR 0 1
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
1366: GO 1407
1368: LD_INT 2
1370: DOUBLE
1371: EQUAL
1372: IFTRUE 1376
1374: GO 1387
1376: POP
// result = 2 ; 2 :
1377: LD_ADDR_VAR 0 1
1381: PUSH
1382: LD_INT 2
1384: ST_TO_ADDR
1385: GO 1407
1387: LD_INT 2
1389: DOUBLE
1390: EQUAL
1391: IFTRUE 1395
1393: GO 1406
1395: POP
// result = 3 ; end ;
1396: LD_ADDR_VAR 0 1
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
1404: GO 1407
1406: POP
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareDifficulty ; begin
1412: LD_INT 0
1414: PPUSH
// if difficulty = 1 then
1415: LD_OWVAR 67
1419: PUSH
1420: LD_INT 1
1422: EQUAL
1423: IFFALSE 1503
// begin SetTech ( 57 , 3 , state_disabled ) ;
1425: LD_INT 57
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1438: LD_INT 58
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1451: LD_INT 59
1453: PPUSH
1454: LD_INT 3
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1464: LD_INT 51
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1477: LD_INT 52
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1490: LD_INT 53
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 322
// end ; if difficulty = 2 then
1503: LD_OWVAR 67
1507: PUSH
1508: LD_INT 2
1510: EQUAL
1511: IFFALSE 1591
// begin SetTech ( 57 , 3 , state_enabled ) ;
1513: LD_INT 57
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1526: LD_INT 58
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1539: LD_INT 59
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1565: LD_INT 52
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1578: LD_INT 53
1580: PPUSH
1581: LD_INT 3
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 322
// end ; if difficulty = 3 then
1591: LD_OWVAR 67
1595: PUSH
1596: LD_INT 3
1598: EQUAL
1599: IFFALSE 1679
// begin SetTech ( 57 , 3 , state_enabled ) ;
1601: LD_INT 57
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1614: LD_INT 58
1616: PPUSH
1617: LD_INT 3
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1627: LD_INT 59
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1640: LD_INT 51
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1653: LD_INT 52
1655: PPUSH
1656: LD_INT 3
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1666: LD_INT 53
1668: PPUSH
1669: LD_INT 3
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 322
// end ; end ;
1679: LD_VAR 0 1
1683: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
// for i = 1 to 72 do
1690: LD_ADDR_VAR 0 5
1694: PUSH
1695: DOUBLE
1696: LD_INT 1
1698: DEC
1699: ST_TO_ADDR
1700: LD_INT 72
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1762
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 1
1715: PPUSH
1716: CALL_OW 321
1720: PUSH
1721: LD_INT 1
1723: EQUAL
1724: PUSH
1725: LD_VAR 0 5
1729: PPUSH
1730: LD_VAR 0 3
1734: PPUSH
1735: CALL_OW 482
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: AND
1744: IFFALSE 1760
// AddComResearch ( lab , i ) ;
1746: LD_VAR 0 2
1750: PPUSH
1751: LD_VAR 0 5
1755: PPUSH
1756: CALL_OW 184
1760: GO 1703
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 4
1768: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1777: LD_ADDR_VAR 0 8
1781: PUSH
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 313
1791: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1792: LD_ADDR_VAR 0 9
1796: PUSH
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 22
1804: PUSH
1805: LD_VAR 0 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 25
1816: PUSH
1817: LD_INT 2
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 24
1826: PUSH
1827: LD_INT 750
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 3
1836: PUSH
1837: LD_INT 54
1839: PUSH
1840: EMPTY
1841: LIST
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1858: LD_ADDR_VAR 0 6
1862: PUSH
1863: LD_VAR 0 3
1867: PPUSH
1868: LD_INT 22
1870: PUSH
1871: LD_VAR 0 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 21
1882: PUSH
1883: LD_INT 3
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: LD_INT 24
1895: PUSH
1896: LD_INT 1000
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: PPUSH
1915: CALL_OW 70
1919: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1920: LD_VAR 0 6
1924: NOT
1925: PUSH
1926: LD_INT 22
1928: PUSH
1929: LD_VAR 0 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 25
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 24
1950: PUSH
1951: LD_INT 250
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: PPUSH
1963: CALL_OW 69
1967: NOT
1968: AND
1969: IFFALSE 1973
// exit ;
1971: GO 2155
// if buildings_list > 0 and engineerOkInside then
1973: LD_VAR 0 6
1977: PUSH
1978: LD_INT 0
1980: GREATER
1981: PUSH
1982: LD_VAR 0 8
1986: AND
1987: IFFALSE 1998
// ComExitBuilding ( engineerOkInside ) ;
1989: LD_VAR 0 8
1993: PPUSH
1994: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
1998: LD_VAR 0 6
2002: PUSH
2003: LD_INT 0
2005: GREATER
2006: PUSH
2007: LD_VAR 0 9
2011: PUSH
2012: LD_INT 0
2014: GREATER
2015: AND
2016: IFFALSE 2036
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2018: LD_VAR 0 9
2022: PPUSH
2023: LD_VAR 0 6
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 0
2043: EQUAL
2044: PUSH
2045: LD_VAR 0 4
2049: PUSH
2050: LD_INT 0
2052: EQUAL
2053: AND
2054: PUSH
2055: LD_VAR 0 9
2059: PUSH
2060: LD_INT 0
2062: GREATER
2063: AND
2064: IFFALSE 2080
// ComEnterUnit ( engineerOkOutside , building ) ;
2066: LD_VAR 0 9
2070: PPUSH
2071: LD_VAR 0 2
2075: PPUSH
2076: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2080: LD_VAR 0 9
2084: PUSH
2085: LD_INT 0
2087: GREATER
2088: PUSH
2089: LD_VAR 0 6
2093: PUSH
2094: LD_INT 0
2096: EQUAL
2097: AND
2098: PUSH
2099: LD_VAR 0 4
2103: PUSH
2104: LD_INT 0
2106: GREATER
2107: AND
2108: IFFALSE 2155
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2110: LD_VAR 0 9
2114: PPUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_INT 1
2122: ARRAY
2123: PPUSH
2124: LD_VAR 0 4
2128: PUSH
2129: LD_INT 2
2131: ARRAY
2132: PPUSH
2133: LD_VAR 0 4
2137: PUSH
2138: LD_INT 3
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 4
2146: PUSH
2147: LD_INT 4
2149: ARRAY
2150: PPUSH
2151: CALL_OW 145
// end ;
2155: LD_VAR 0 5
2159: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2160: LD_INT 0
2162: PPUSH
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2171: LD_ADDR_VAR 0 6
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_VAR 0 1
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 25
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 24
2210: PUSH
2211: LD_INT 251
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: PPUSH
2224: CALL_OW 69
2228: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2229: LD_ADDR_VAR 0 7
2233: PUSH
2234: LD_VAR 0 3
2238: PPUSH
2239: LD_INT 22
2241: PUSH
2242: LD_VAR 0 1
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 23
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 4
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 50
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: PPUSH
2283: CALL_OW 70
2287: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2288: LD_ADDR_VAR 0 10
2292: PUSH
2293: LD_VAR 0 3
2297: PPUSH
2298: LD_INT 22
2300: PUSH
2301: LD_VAR 0 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 21
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 25
2325: PUSH
2326: LD_INT 3
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 24
2342: PUSH
2343: LD_INT 750
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 70
2364: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2365: LD_ADDR_VAR 0 11
2369: PUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 22
2377: PUSH
2378: LD_VAR 0 1
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 21
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 25
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 24
2419: PUSH
2420: LD_INT 1000
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 70
2441: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2442: LD_VAR 0 10
2446: NOT
2447: PUSH
2448: LD_VAR 0 11
2452: NOT
2453: AND
2454: PUSH
2455: LD_VAR 0 6
2459: NOT
2460: AND
2461: IFFALSE 2465
// exit ;
2463: GO 2699
// if damageUnits > 0 and sci_list > 0 then
2465: LD_VAR 0 10
2469: PUSH
2470: LD_INT 0
2472: GREATER
2473: PUSH
2474: LD_VAR 0 6
2478: PUSH
2479: LD_INT 0
2481: GREATER
2482: AND
2483: IFFALSE 2499
// ComMoveToArea ( damageUnits , healArea ) ;
2485: LD_VAR 0 10
2489: PPUSH
2490: LD_VAR 0 2
2494: PPUSH
2495: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2499: LD_VAR 0 11
2503: PUSH
2504: LD_INT 0
2506: GREATER
2507: PUSH
2508: LD_VAR 0 6
2512: PUSH
2513: LD_INT 0
2515: GREATER
2516: AND
2517: IFFALSE 2528
// ComExitBuilding ( sci_list ) ;
2519: LD_VAR 0 6
2523: PPUSH
2524: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2528: LD_VAR 0 11
2532: PUSH
2533: LD_INT 0
2535: GREATER
2536: PUSH
2537: LD_VAR 0 7
2541: PUSH
2542: LD_INT 0
2544: GREATER
2545: AND
2546: IFFALSE 2566
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2548: LD_VAR 0 7
2552: PPUSH
2553: LD_VAR 0 11
2557: PUSH
2558: LD_INT 1
2560: ARRAY
2561: PPUSH
2562: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2566: LD_VAR 0 10
2570: PUSH
2571: LD_INT 0
2573: EQUAL
2574: PUSH
2575: LD_VAR 0 11
2579: PUSH
2580: LD_INT 0
2582: EQUAL
2583: AND
2584: PUSH
2585: LD_VAR 0 7
2589: PUSH
2590: LD_INT 0
2592: GREATER
2593: AND
2594: IFFALSE 2699
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2596: LD_ADDR_VAR 0 12
2600: PUSH
2601: LD_INT 22
2603: PUSH
2604: LD_VAR 0 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 21
2615: PUSH
2616: LD_INT 3
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 30
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2643: LD_ADDR_VAR 0 13
2647: PUSH
2648: LD_INT 1
2650: PPUSH
2651: LD_VAR 0 12
2655: PPUSH
2656: CALL_OW 12
2660: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2661: LD_VAR 0 7
2665: PPUSH
2666: LD_INT 3
2668: PUSH
2669: LD_INT 60
2671: PUSH
2672: EMPTY
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL_OW 72
2683: PPUSH
2684: LD_VAR 0 12
2688: PUSH
2689: LD_VAR 0 13
2693: ARRAY
2694: PPUSH
2695: CALL_OW 120
// end ; end ;
2699: LD_VAR 0 5
2703: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// tmpTab = [ ] ;
2710: LD_ADDR_VAR 0 6
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2717: LD_INT 22
2719: PUSH
2720: LD_VAR 0 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 30
2731: PUSH
2732: LD_INT 32
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: PUSH
2748: LD_INT 0
2750: GREATER
2751: IFFALSE 2834
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2753: LD_ADDR_VAR 0 4
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_VAR 0 1
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 30
2772: PUSH
2773: LD_INT 32
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 69
2788: PUSH
2789: FOR_IN
2790: IFFALSE 2832
// begin for j in UnitsInside ( i ) do
2792: LD_ADDR_VAR 0 5
2796: PUSH
2797: LD_VAR 0 4
2801: PPUSH
2802: CALL_OW 313
2806: PUSH
2807: FOR_IN
2808: IFFALSE 2828
// tmpTab = tmpTab ^ j ;
2810: LD_ADDR_VAR 0 6
2814: PUSH
2815: LD_VAR 0 6
2819: PUSH
2820: LD_VAR 0 5
2824: ADD
2825: ST_TO_ADDR
2826: GO 2807
2828: POP
2829: POP
// end ;
2830: GO 2789
2832: POP
2833: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2834: LD_VAR 0 6
2838: PPUSH
2839: LD_VAR 0 2
2843: PPUSH
2844: CALL_OW 250
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 251
2858: PPUSH
2859: CALL_OW 114
// end ;
2863: LD_VAR 0 3
2867: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
2873: PPUSH
// enable ;
2874: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
2875: LD_ADDR_VAR 0 7
2879: PUSH
2880: LD_VAR 0 3
2884: PPUSH
2885: CALL_OW 435
2889: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2890: LD_ADDR_VAR 0 6
2894: PUSH
2895: LD_INT 22
2897: PUSH
2898: LD_VAR 0 1
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 34
2909: PUSH
2910: LD_VAR 0 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: CALL_OW 69
2927: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
2928: LD_VAR 0 6
2932: PUSH
2933: LD_INT 0
2935: GREATER
2936: PUSH
2937: LD_VAR 0 3
2941: PPUSH
2942: CALL_OW 435
2946: AND
2947: PUSH
2948: LD_VAR 0 7
2952: PUSH
2953: LD_INT 0
2955: GREATER
2956: AND
2957: IFFALSE 3006
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2959: LD_VAR 0 6
2963: PUSH
2964: LD_INT 1
2966: ARRAY
2967: PPUSH
2968: LD_VAR 0 7
2972: PUSH
2973: LD_INT 1
2975: ARRAY
2976: PPUSH
2977: LD_VAR 0 7
2981: PUSH
2982: LD_INT 2
2984: ARRAY
2985: PPUSH
2986: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
2990: LD_VAR 0 6
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: LD_INT 100
3001: PPUSH
3002: CALL_OW 240
// end ; end ;
3006: LD_VAR 0 4
3010: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3011: LD_INT 0
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3018: LD_ADDR_VAR 0 6
3022: PUSH
3023: LD_INT 22
3025: PUSH
3026: LD_VAR 0 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: LD_INT 30
3040: PUSH
3041: LD_INT 31
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 30
3050: PUSH
3051: LD_INT 32
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 33
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 30
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 30
3080: PUSH
3081: LD_INT 5
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 69
3104: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3105: LD_ADDR_VAR 0 7
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_VAR 0 2
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 21
3124: PUSH
3125: LD_INT 3
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 58
3134: PUSH
3135: EMPTY
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 69
3147: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3148: LD_VAR 0 6
3152: PUSH
3153: LD_INT 0
3155: GREATER
3156: PUSH
3157: LD_VAR 0 7
3161: PUSH
3162: LD_INT 0
3164: GREATER
3165: AND
3166: IFFALSE 3236
// begin for i in turretsList do
3168: LD_ADDR_VAR 0 4
3172: PUSH
3173: LD_VAR 0 6
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3234
// begin for j in enemyBuildings do
3181: LD_ADDR_VAR 0 5
3185: PUSH
3186: LD_VAR 0 7
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3230
// begin if GetDistUnits ( i , j ) < 20 then
3194: LD_VAR 0 4
3198: PPUSH
3199: LD_VAR 0 5
3203: PPUSH
3204: CALL_OW 296
3208: PUSH
3209: LD_INT 20
3211: LESS
3212: IFFALSE 3228
// begin ComAttackUnit ( i , j ) ;
3214: LD_VAR 0 4
3218: PPUSH
3219: LD_VAR 0 5
3223: PPUSH
3224: CALL_OW 115
// end ; end ;
3228: GO 3191
3230: POP
3231: POP
// end ;
3232: GO 3178
3234: POP
3235: POP
// end ; end ;
3236: LD_VAR 0 3
3240: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
// for i = 1 to vehCount do
3245: LD_ADDR_VAR 0 9
3249: PUSH
3250: DOUBLE
3251: LD_INT 1
3253: DEC
3254: ST_TO_ADDR
3255: LD_VAR 0 3
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3308
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3263: LD_VAR 0 2
3267: PPUSH
3268: LD_VAR 0 7
3272: PPUSH
3273: LD_VAR 0 5
3277: PPUSH
3278: LD_VAR 0 6
3282: PPUSH
3283: LD_VAR 0 4
3287: PUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_VAR 0 4
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: CALL_OW 185
3306: GO 3260
3308: POP
3309: POP
// end ;
3310: LD_VAR 0 8
3314: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3315: LD_INT 0
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3323: LD_EXP 11
3327: PUSH
3328: LD_INT 2
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 4
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_OWVAR 67
3346: ARRAY
3347: GREATEREQUAL
3348: PUSH
3349: LD_EXP 12
3353: PUSH
3354: LD_INT 1
3356: PUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 2
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: PUSH
3368: LD_OWVAR 67
3372: ARRAY
3373: GREATEREQUAL
3374: AND
3375: IFFALSE 3608
// begin repeat wait ( 0 0$1 ) ;
3377: LD_INT 35
3379: PPUSH
3380: CALL_OW 67
// for j in russianTanks do
3384: LD_ADDR_VAR 0 4
3388: PUSH
3389: LD_EXP 11
3393: PUSH
3394: FOR_IN
3395: IFFALSE 3596
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 81
3404: PUSH
3405: LD_VAR 0 1
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 101
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 69
3432: PPUSH
3433: LD_VAR 0 4
3437: PPUSH
3438: CALL_OW 74
3442: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 81
3450: PUSH
3451: LD_VAR 0 1
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: LD_INT 101
3462: PUSH
3463: LD_INT 1
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: LD_INT 59
3475: PUSH
3476: EMPTY
3477: LIST
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 1
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 2
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PPUSH
3518: LD_VAR 0 4
3522: PPUSH
3523: CALL_OW 74
3527: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3528: LD_VAR 0 4
3532: PPUSH
3533: LD_VAR 0 6
3537: PPUSH
3538: CALL_OW 296
3542: PUSH
3543: LD_INT 8
3545: PLUS
3546: PUSH
3547: LD_VAR 0 4
3551: PPUSH
3552: LD_VAR 0 7
3556: PPUSH
3557: CALL_OW 296
3561: LESS
3562: IFFALSE 3580
// ComAttackUnit ( j , target1 ) else
3564: LD_VAR 0 4
3568: PPUSH
3569: LD_VAR 0 6
3573: PPUSH
3574: CALL_OW 115
3578: GO 3594
// ComAttackUnit ( j , target2 ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: LD_VAR 0 7
3589: PPUSH
3590: CALL_OW 115
// end ;
3594: GO 3394
3596: POP
3597: POP
// until russianTanks = 0 ;
3598: LD_EXP 11
3602: PUSH
3603: LD_INT 0
3605: EQUAL
3606: IFFALSE 3377
// end ; end ;
3608: LD_VAR 0 2
3612: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3613: LD_INT 0
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3621: LD_ADDR_VAR 0 6
3625: PUSH
3626: LD_INT 22
3628: PUSH
3629: LD_VAR 0 1
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 25
3640: PUSH
3641: LD_INT 9
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PPUSH
3652: CALL_OW 69
3656: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3657: LD_ADDR_VAR 0 7
3661: PUSH
3662: LD_INT 81
3664: PUSH
3665: LD_VAR 0 1
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3700: LD_ADDR_VAR 0 4
3704: PUSH
3705: LD_INT 1
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: CALL_OW 12
3715: ST_TO_ADDR
// for i = 1 to list do
3716: LD_ADDR_VAR 0 5
3720: PUSH
3721: DOUBLE
3722: LD_INT 1
3724: DEC
3725: ST_TO_ADDR
3726: LD_VAR 0 6
3730: PUSH
3731: FOR_TO
3732: IFFALSE 3934
// for ta in filter do
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: LD_VAR 0 7
3743: PUSH
3744: FOR_IN
3745: IFFALSE 3930
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3747: LD_VAR 0 6
3751: PUSH
3752: LD_VAR 0 5
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PPUSH
3763: CALL_OW 296
3767: PUSH
3768: LD_INT 15
3770: LESSEQUAL
3771: IFFALSE 3928
// begin case c of 1 :
3773: LD_VAR 0 4
3777: PUSH
3778: LD_INT 1
3780: DOUBLE
3781: EQUAL
3782: IFTRUE 3786
3784: GO 3824
3786: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3787: LD_VAR 0 6
3791: PUSH
3792: LD_VAR 0 5
3796: ARRAY
3797: PPUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 3
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 154
3822: GO 3928
3824: LD_INT 2
3826: DOUBLE
3827: EQUAL
3828: IFTRUE 3832
3830: GO 3896
3832: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3833: LD_VAR 0 6
3837: PUSH
3838: LD_VAR 0 5
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 3
3848: PPUSH
3849: CALL_OW 250
3853: PUSH
3854: LD_INT 1
3856: NEG
3857: PPUSH
3858: LD_INT 1
3860: PPUSH
3861: CALL_OW 12
3865: PLUS
3866: PPUSH
3867: LD_VAR 0 3
3871: PPUSH
3872: CALL_OW 251
3876: PUSH
3877: LD_INT 1
3879: NEG
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: CALL_OW 12
3888: PLUS
3889: PPUSH
3890: CALL_OW 153
3894: GO 3928
3896: LD_INT 3
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3927
3904: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3905: LD_VAR 0 6
3909: PUSH
3910: LD_VAR 0 5
3914: ARRAY
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 115
3925: GO 3928
3927: POP
// end ; end ;
3928: GO 3744
3930: POP
3931: POP
3932: GO 3731
3934: POP
3935: POP
// end ;
3936: LD_VAR 0 2
3940: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
3941: LD_INT 0
3943: PPUSH
3944: PPUSH
3945: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
3946: LD_EXP 11
3950: PUSH
3951: LD_INT 1
3953: GREATEREQUAL
3954: PUSH
3955: LD_EXP 12
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: LD_OWVAR 67
3978: ARRAY
3979: GREATEREQUAL
3980: AND
3981: IFFALSE 4120
// repeat wait ( 0 0$3 ) ;
3983: LD_INT 105
3985: PPUSH
3986: CALL_OW 67
// if russianTimeLapsers > 0 then
3990: LD_EXP 12
3994: PUSH
3995: LD_INT 0
3997: GREATER
3998: IFFALSE 4110
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: LD_EXP 12
4009: PPUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 60
4015: PUSH
4016: EMPTY
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 72
4027: PUSH
4028: FOR_IN
4029: IFFALSE 4108
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4031: LD_ADDR_VAR 0 4
4035: PUSH
4036: LD_INT 81
4038: PUSH
4039: LD_VAR 0 1
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 101
4050: PUSH
4051: LD_INT 1
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PPUSH
4062: CALL_OW 69
4066: PPUSH
4067: LD_VAR 0 3
4071: PPUSH
4072: CALL_OW 74
4076: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4077: LD_VAR 0 3
4081: PPUSH
4082: LD_VAR 0 4
4086: PPUSH
4087: CALL_OW 250
4091: PPUSH
4092: LD_VAR 0 4
4096: PPUSH
4097: CALL_OW 251
4101: PPUSH
4102: CALL_OW 111
// end ;
4106: GO 4028
4108: POP
4109: POP
// until russianTimeLapsers = 0 ;
4110: LD_EXP 12
4114: PUSH
4115: LD_INT 0
4117: EQUAL
4118: IFFALSE 3983
// end ; end_of_file
4120: LD_VAR 0 2
4124: RET
// every 0 0$1 do
4125: GO 4127
4127: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4128: LD_INT 3
4130: PPUSH
4131: LD_INT 14
4133: PPUSH
4134: LD_INT 3
4136: PPUSH
4137: CALL 1684 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4141: LD_INT 3
4143: PPUSH
4144: LD_INT 15
4146: PPUSH
4147: LD_INT 3
4149: PPUSH
4150: CALL 1684 0 3
// end ;
4154: END
// every 0 0$1 trigger russianAI = 1 do
4155: LD_EXP 13
4159: PUSH
4160: LD_INT 1
4162: EQUAL
4163: IFFALSE 4266
4165: GO 4167
4167: DISABLE
// begin enable ;
4168: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4169: LD_INT 3
4171: PPUSH
4172: LD_INT 22
4174: PPUSH
4175: LD_INT 7
4177: PPUSH
4178: LD_EXP 10
4182: PPUSH
4183: CALL 1769 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4187: LD_INT 3
4189: PPUSH
4190: LD_INT 8
4192: PPUSH
4193: LD_INT 7
4195: PPUSH
4196: LD_INT 14
4198: PUSH
4199: LD_INT 15
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 1
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: CALL_OW 12
4216: ARRAY
4217: PPUSH
4218: CALL 2160 0 4
// AttackVehicles ( 3 ) ;
4222: LD_INT 3
4224: PPUSH
4225: CALL 3315 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: CALL 3011 0 2
// TimeLapsersAI ( 3 ) ;
4239: LD_INT 3
4241: PPUSH
4242: CALL 3941 0 1
// IntBazooka ( 3 ) ;
4246: LD_INT 3
4248: PPUSH
4249: CALL 3613 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4253: LD_INT 3
4255: PPUSH
4256: LD_INT 51
4258: PPUSH
4259: LD_INT 14
4261: PPUSH
4262: CALL 2868 0 3
// end ;
4266: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4267: LD_INT 22
4269: PPUSH
4270: CALL_OW 303
4274: PUSH
4275: LD_INT 22
4277: PPUSH
4278: CALL_OW 255
4282: PUSH
4283: LD_INT 1
4285: EQUAL
4286: OR
4287: IFFALSE 4302
4289: GO 4291
4291: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 22
4297: PPUSH
4298: CALL 2704 0 2
4302: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4303: LD_EXP 13
4307: PUSH
4308: LD_INT 1
4310: EQUAL
4311: PUSH
4312: LD_INT 22
4314: PUSH
4315: LD_INT 3
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 21
4324: PUSH
4325: LD_INT 2
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 50
4334: PUSH
4335: EMPTY
4336: LIST
4337: PUSH
4338: LD_INT 33
4340: PUSH
4341: LD_INT 3
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: LD_INT 34
4353: PUSH
4354: LD_INT 46
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 34
4363: PUSH
4364: LD_INT 45
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 34
4373: PUSH
4374: LD_INT 44
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 34
4383: PUSH
4384: LD_INT 49
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 34
4393: PUSH
4394: LD_INT 47
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 69
4420: PUSH
4421: LD_INT 0
4423: EQUAL
4424: AND
4425: IFFALSE 4612
4427: GO 4429
4429: DISABLE
// begin enable ;
4430: ENABLE
// if russianRocketsAvalaible = 1 then
4431: LD_EXP 14
4435: PUSH
4436: LD_INT 1
4438: EQUAL
4439: IFFALSE 4496
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4441: LD_INT 3
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 4
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PPUSH
4467: LD_INT 46
4469: PUSH
4470: LD_INT 45
4472: PUSH
4473: LD_INT 44
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PPUSH
4481: LD_INT 3
4483: PPUSH
4484: LD_INT 3
4486: PPUSH
4487: LD_INT 24
4489: PPUSH
4490: CALL 3241 0 7
4494: GO 4553
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4496: LD_INT 3
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 4
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: PUSH
4516: LD_OWVAR 67
4520: ARRAY
4521: PPUSH
4522: LD_INT 46
4524: PUSH
4525: LD_INT 45
4527: PUSH
4528: LD_INT 44
4530: PUSH
4531: LD_INT 47
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: PPUSH
4540: LD_INT 3
4542: PPUSH
4543: LD_INT 3
4545: PPUSH
4546: LD_INT 24
4548: PPUSH
4549: CALL 3241 0 7
// if russianTimeLapsers = 0 then
4553: LD_EXP 12
4557: PUSH
4558: LD_INT 0
4560: EQUAL
4561: IFFALSE 4612
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4563: LD_INT 3
4565: PPUSH
4566: LD_INT 40
4568: PPUSH
4569: LD_INT 1
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: LD_INT 2
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: ARRAY
4588: PPUSH
4589: LD_INT 49
4591: PUSH
4592: LD_INT 49
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PPUSH
4599: LD_INT 3
4601: PPUSH
4602: LD_INT 3
4604: PPUSH
4605: LD_INT 24
4607: PPUSH
4608: CALL 3241 0 7
// end ; end_of_file
4612: END
// every 1 do var dec1 , dec2 ;
4613: GO 4615
4615: DISABLE
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
// begin InGameOn ;
4620: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
4624: LD_INT 48
4626: PPUSH
4627: LD_STRING kappa
4629: PPUSH
4630: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4634: LD_INT 95
4636: PPUSH
4637: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4641: LD_INT 95
4643: PPUSH
4644: LD_INT 30
4646: PPUSH
4647: LD_INT 11
4649: PPUSH
4650: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4654: LD_INT 30
4656: PPUSH
4657: LD_INT 11
4659: PPUSH
4660: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4664: LD_EXP 5
4668: PPUSH
4669: LD_STRING D1-Pow-1
4671: PPUSH
4672: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4676: LD_EXP 1
4680: PPUSH
4681: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4685: LD_EXP 1
4689: PPUSH
4690: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING D1-JMM-1
4701: PPUSH
4702: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4706: LD_EXP 5
4710: PPUSH
4711: LD_STRING D1-Pow-2
4713: PPUSH
4714: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4718: LD_EXP 1
4722: PPUSH
4723: LD_STRING D1-JMM-2
4725: PPUSH
4726: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4730: LD_EXP 1
4734: PPUSH
4735: LD_INT 95
4737: PPUSH
4738: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4742: LD_STRING M1
4744: PPUSH
4745: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4749: LD_INT 35
4751: PPUSH
4752: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4756: LD_EXP 1
4760: PPUSH
4761: LD_INT 95
4763: PPUSH
4764: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4768: LD_INT 95
4770: PPUSH
4771: LD_INT 51
4773: PPUSH
4774: LD_INT 21
4776: PPUSH
4777: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4781: LD_INT 95
4783: PPUSH
4784: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4788: LD_INT 95
4790: PPUSH
4791: LD_INT 5
4793: PPUSH
4794: CALL_OW 308
4798: IFFALSE 4749
// if JMMGirl = 1 then
4800: LD_EXP 7
4804: PUSH
4805: LD_INT 1
4807: EQUAL
4808: IFFALSE 5109
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4810: LD_EXP 2
4814: PPUSH
4815: LD_STRING D2J-Joan-1
4817: PPUSH
4818: CALL_OW 94
// dec1 = Query1 ;
4822: LD_ADDR_VAR 0 1
4826: PUSH
4827: CALL 1283 0 0
4831: ST_TO_ADDR
// if dec1 = 1 then
4832: LD_VAR 0 1
4836: PUSH
4837: LD_INT 1
4839: EQUAL
4840: IFFALSE 5087
// begin ComExitVehicle ( JMM ) ;
4842: LD_EXP 1
4846: PPUSH
4847: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
4851: LD_EXP 1
4855: PPUSH
4856: LD_STRING D2J-JMM-1
4858: PPUSH
4859: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
4863: LD_EXP 2
4867: PPUSH
4868: LD_STRING D2J-Joan-2
4870: PPUSH
4871: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
4875: LD_EXP 1
4879: PPUSH
4880: LD_STRING D2J-JMM-2
4882: PPUSH
4883: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
4887: LD_EXP 2
4891: PPUSH
4892: LD_STRING D2J-Joan-3
4894: PPUSH
4895: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4899: LD_EXP 5
4903: PPUSH
4904: LD_STRING DPowell-Pow-1
4906: PPUSH
4907: CALL_OW 94
// dec2 = Query2 ;
4911: LD_ADDR_VAR 0 2
4915: PUSH
4916: CALL 1338 0 0
4920: ST_TO_ADDR
// if dec2 = 1 then
4921: LD_VAR 0 2
4925: PUSH
4926: LD_INT 1
4928: EQUAL
4929: IFFALSE 4971
// begin Say ( JMM , D2Ja-JMM-1 ) ;
4931: LD_EXP 1
4935: PPUSH
4936: LD_STRING D2Ja-JMM-1
4938: PPUSH
4939: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
4943: LD_EXP 2
4947: PPUSH
4948: LD_STRING D2Ja-Joan-1
4950: PPUSH
4951: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
4955: LD_EXP 1
4959: PPUSH
4960: LD_STRING D2Ja-JMM-2
4962: PPUSH
4963: CALL_OW 88
// InGameOff ;
4967: CALL_OW 9
// end ; if dec2 = 2 then
4971: LD_VAR 0 2
4975: PUSH
4976: LD_INT 2
4978: EQUAL
4979: IFFALSE 5053
// begin Say ( JMM , D2Jb-JMM-1 ) ;
4981: LD_EXP 1
4985: PPUSH
4986: LD_STRING D2Jb-JMM-1
4988: PPUSH
4989: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
4993: LD_EXP 2
4997: PPUSH
4998: LD_STRING D2Jb-Joan-1
5000: PPUSH
5001: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5005: LD_EXP 1
5009: PPUSH
5010: LD_STRING D2Jb-JMM-2
5012: PPUSH
5013: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5017: LD_EXP 2
5021: PPUSH
5022: LD_STRING D2Jb-Joan-2
5024: PPUSH
5025: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5029: LD_EXP 1
5033: PPUSH
5034: LD_STRING D2Jb-JMM-3
5036: PPUSH
5037: CALL_OW 88
// fastEnd = 1 ;
5041: LD_ADDR_EXP 15
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// FinishMission ;
5049: CALL 9028 0 0
// end ; if dec2 = 3 then
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 3
5060: EQUAL
5061: IFFALSE 5087
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5063: LD_EXP 2
5067: PPUSH
5068: LD_STRING D2Jc-Joan-1
5070: PPUSH
5071: CALL_OW 94
// fastEnd = 1 ;
5075: LD_ADDR_EXP 15
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// FinishMission ;
5083: CALL 9028 0 0
// end ; end ; if dec1 = 2 then
5087: LD_VAR 0 1
5091: PUSH
5092: LD_INT 2
5094: EQUAL
5095: IFFALSE 5109
// begin fastEnd = 1 ;
5097: LD_ADDR_EXP 15
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// FinishMission ;
5105: CALL 9028 0 0
// end ; end ; if JMMGirl = 2 then
5109: LD_EXP 7
5113: PUSH
5114: LD_INT 2
5116: EQUAL
5117: IFFALSE 5430
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5119: LD_EXP 3
5123: PPUSH
5124: LD_STRING D2L-Lisa-1
5126: PPUSH
5127: CALL_OW 94
// dec1 = Query1 ;
5131: LD_ADDR_VAR 0 1
5135: PUSH
5136: CALL 1283 0 0
5140: ST_TO_ADDR
// if dec1 = 1 then
5141: LD_VAR 0 1
5145: PUSH
5146: LD_INT 1
5148: EQUAL
5149: IFFALSE 5408
// begin ComExitVehicle ( JMM ) ;
5151: LD_EXP 1
5155: PPUSH
5156: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D2L-JMM-1
5167: PPUSH
5168: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5172: LD_EXP 3
5176: PPUSH
5177: LD_STRING D2L-Lisa-2
5179: PPUSH
5180: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5184: LD_EXP 1
5188: PPUSH
5189: LD_STRING D2L-JMM-2
5191: PPUSH
5192: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5196: LD_EXP 3
5200: PPUSH
5201: LD_STRING D2L-Lisa-3
5203: PPUSH
5204: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5208: LD_EXP 5
5212: PPUSH
5213: LD_STRING DPowell-Pow-1
5215: PPUSH
5216: CALL_OW 94
// dec2 = Query2 ;
5220: LD_ADDR_VAR 0 2
5224: PUSH
5225: CALL 1338 0 0
5229: ST_TO_ADDR
// if dec2 = 1 then
5230: LD_VAR 0 2
5234: PUSH
5235: LD_INT 1
5237: EQUAL
5238: IFFALSE 5304
// begin Say ( JMM , D2La-JMM-1 ) ;
5240: LD_EXP 1
5244: PPUSH
5245: LD_STRING D2La-JMM-1
5247: PPUSH
5248: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5252: LD_EXP 3
5256: PPUSH
5257: LD_STRING D2La-Lisa-1
5259: PPUSH
5260: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5264: LD_EXP 1
5268: PPUSH
5269: LD_STRING D2La-JMM-2
5271: PPUSH
5272: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5276: LD_EXP 3
5280: PPUSH
5281: LD_STRING D2La-Lisa-2
5283: PPUSH
5284: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5288: LD_EXP 1
5292: PPUSH
5293: LD_STRING D2La-JMM-3
5295: PPUSH
5296: CALL_OW 88
// InGameOff ;
5300: CALL_OW 9
// end ; if dec2 = 2 then
5304: LD_VAR 0 2
5308: PUSH
5309: LD_INT 2
5311: EQUAL
5312: IFFALSE 5374
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5314: LD_EXP 1
5318: PPUSH
5319: LD_STRING D2Lb-JMM-1
5321: PPUSH
5322: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5326: LD_EXP 3
5330: PPUSH
5331: LD_STRING D2Lb-Lisa-1
5333: PPUSH
5334: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5338: LD_EXP 1
5342: PPUSH
5343: LD_STRING D2Lb-JMM-2
5345: PPUSH
5346: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5350: LD_EXP 3
5354: PPUSH
5355: LD_STRING D2Lb-Lisa-2
5357: PPUSH
5358: CALL_OW 94
// fastEnd = 1 ;
5362: LD_ADDR_EXP 15
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// FinishMission ;
5370: CALL 9028 0 0
// end ; if dec2 = 3 then
5374: LD_VAR 0 2
5378: PUSH
5379: LD_INT 3
5381: EQUAL
5382: IFFALSE 5408
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5384: LD_EXP 3
5388: PPUSH
5389: LD_STRING D2Lc-Lisa-1
5391: PPUSH
5392: CALL_OW 94
// fastEnd = 1 ;
5396: LD_ADDR_EXP 15
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// FinishMission ;
5404: CALL 9028 0 0
// end ; end ; if dec1 = 2 then
5408: LD_VAR 0 1
5412: PUSH
5413: LD_INT 2
5415: EQUAL
5416: IFFALSE 5430
// begin fastEnd = 1 ;
5418: LD_ADDR_EXP 15
5422: PUSH
5423: LD_INT 1
5425: ST_TO_ADDR
// FinishMission ;
5426: CALL 9028 0 0
// end ; end ; if JMMGirl = 3 then
5430: LD_EXP 7
5434: PUSH
5435: LD_INT 3
5437: EQUAL
5438: IFFALSE 5655
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5440: LD_EXP 4
5444: PPUSH
5445: LD_STRING D2X-Con-1
5447: PPUSH
5448: CALL_OW 94
// dec1 = Query1 ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: CALL 1283 0 0
5461: ST_TO_ADDR
// if dec1 = 1 then
5462: LD_VAR 0 1
5466: PUSH
5467: LD_INT 1
5469: EQUAL
5470: IFFALSE 5633
// begin ComExitVehicle ( JMM ) ;
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D2X-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5493: LD_EXP 4
5497: PPUSH
5498: LD_STRING D2X-Con-2
5500: PPUSH
5501: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5505: LD_EXP 5
5509: PPUSH
5510: LD_STRING DPowell-Pow-1
5512: PPUSH
5513: CALL_OW 94
// dec2 = Query2 ;
5517: LD_ADDR_VAR 0 2
5521: PUSH
5522: CALL 1338 0 0
5526: ST_TO_ADDR
// if dec2 = 1 then
5527: LD_VAR 0 2
5531: PUSH
5532: LD_INT 1
5534: EQUAL
5535: IFFALSE 5553
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5537: LD_EXP 1
5541: PPUSH
5542: LD_STRING D2Xa-JMM-1
5544: PPUSH
5545: CALL_OW 88
// InGameOff ;
5549: CALL_OW 9
// end ; if dec2 = 2 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 2
5560: EQUAL
5561: IFFALSE 5599
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_STRING D2Xb-JMM-1
5570: PPUSH
5571: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5575: LD_EXP 4
5579: PPUSH
5580: LD_STRING D2Xb-Con-1
5582: PPUSH
5583: CALL_OW 94
// fastEnd = 1 ;
5587: LD_ADDR_EXP 15
5591: PUSH
5592: LD_INT 1
5594: ST_TO_ADDR
// FinishMission ;
5595: CALL 9028 0 0
// end ; if dec2 = 3 then
5599: LD_VAR 0 2
5603: PUSH
5604: LD_INT 3
5606: EQUAL
5607: IFFALSE 5633
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5609: LD_EXP 4
5613: PPUSH
5614: LD_STRING D2Xc-Con-1
5616: PPUSH
5617: CALL_OW 94
// fastEnd = 1 ;
5621: LD_ADDR_EXP 15
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// FinishMission ;
5629: CALL 9028 0 0
// end ; end ; if dec1 = 2 then
5633: LD_VAR 0 1
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: IFFALSE 5655
// begin fastEnd = 1 ;
5643: LD_ADDR_EXP 15
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// FinishMission ;
5651: CALL 9028 0 0
// end ; end ; end ;
5655: PPOPN 2
5657: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5658: LD_EXP 1
5662: PPUSH
5663: LD_INT 6
5665: PPUSH
5666: CALL_OW 308
5670: IFFALSE 6436
5672: GO 5674
5674: DISABLE
// begin InGameOn ;
5675: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5679: LD_INT 35
5681: PPUSH
5682: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5686: LD_EXP 1
5690: PPUSH
5691: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5695: LD_EXP 1
5699: PPUSH
5700: LD_INT 62
5702: PPUSH
5703: LD_INT 104
5705: PPUSH
5706: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5710: LD_EXP 1
5714: PPUSH
5715: LD_EXP 2
5719: PPUSH
5720: CALL_OW 296
5724: PUSH
5725: LD_INT 4
5727: LESS
5728: PUSH
5729: LD_EXP 1
5733: PPUSH
5734: LD_EXP 3
5738: PPUSH
5739: CALL_OW 296
5743: PUSH
5744: LD_INT 4
5746: LESS
5747: OR
5748: PUSH
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 4
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 4
5766: LESS
5767: OR
5768: IFFALSE 5679
// case JMMGirl of 1 :
5770: LD_EXP 7
5774: PUSH
5775: LD_INT 1
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5783
5781: GO 5995
5783: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 4
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_INT 1
5801: PPUSH
5802: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
5806: LD_EXP 2
5810: PPUSH
5811: LD_EXP 1
5815: PPUSH
5816: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
5820: LD_EXP 1
5824: PPUSH
5825: LD_EXP 2
5829: PPUSH
5830: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
5834: LD_EXP 2
5838: PUSH
5839: LD_EXP 1
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PPUSH
5848: CALL_OW 87
// wait ( 0 0$1 ) ;
5852: LD_INT 35
5854: PPUSH
5855: CALL_OW 67
// DialogueOn ;
5859: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
5863: LD_EXP 2
5867: PPUSH
5868: LD_STRING D3J-Joan-1
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
5875: LD_EXP 1
5879: PPUSH
5880: LD_STRING D3J-JMM-1
5882: PPUSH
5883: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
5887: LD_EXP 2
5891: PPUSH
5892: LD_STRING D3J-Joan-2
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
5899: LD_EXP 1
5903: PPUSH
5904: LD_STRING D3J-JMM-2
5906: PPUSH
5907: CALL_OW 88
// wait ( 0 0$1 ) ;
5911: LD_INT 35
5913: PPUSH
5914: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5918: LD_EXP 1
5922: PPUSH
5923: LD_STRING D4-JMM-1
5925: PPUSH
5926: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
5930: LD_EXP 2
5934: PPUSH
5935: LD_STRING D4-Joan-1
5937: PPUSH
5938: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5942: LD_EXP 1
5946: PPUSH
5947: LD_STRING D4-JMM-2
5949: PPUSH
5950: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
5954: LD_EXP 2
5958: PPUSH
5959: LD_STRING D4-Joan-2
5961: PPUSH
5962: CALL_OW 88
// DialogueOff ;
5966: CALL_OW 7
// InGameOff ;
5970: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
5974: LD_STRING M2J
5976: PPUSH
5977: CALL_OW 337
// SaveForQuickRestart ;
5981: CALL_OW 22
// russianAI = 1 ;
5985: LD_ADDR_EXP 13
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// end ; 2 :
5993: GO 6436
5995: LD_INT 2
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6215
6003: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6004: LD_INT 22
6006: PUSH
6007: LD_INT 4
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PPUSH
6014: CALL_OW 69
6018: PPUSH
6019: LD_INT 1
6021: PPUSH
6022: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6026: LD_EXP 3
6030: PPUSH
6031: LD_EXP 1
6035: PPUSH
6036: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6040: LD_EXP 1
6044: PPUSH
6045: LD_EXP 3
6049: PPUSH
6050: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6054: LD_EXP 3
6058: PUSH
6059: LD_EXP 1
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL_OW 87
// wait ( 0 0$1 ) ;
6072: LD_INT 35
6074: PPUSH
6075: CALL_OW 67
// DialogueOn ;
6079: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6083: LD_EXP 3
6087: PPUSH
6088: LD_STRING D3L-Lisa-1
6090: PPUSH
6091: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6095: LD_EXP 1
6099: PPUSH
6100: LD_STRING D3L-JMM-1
6102: PPUSH
6103: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6107: LD_EXP 3
6111: PPUSH
6112: LD_STRING D3L-Lisa-2
6114: PPUSH
6115: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6119: LD_EXP 1
6123: PPUSH
6124: LD_STRING D3L-JMM-2
6126: PPUSH
6127: CALL_OW 88
// wait ( 0 0$1 ) ;
6131: LD_INT 35
6133: PPUSH
6134: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6138: LD_EXP 1
6142: PPUSH
6143: LD_STRING D4-JMM-1
6145: PPUSH
6146: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6150: LD_EXP 3
6154: PPUSH
6155: LD_STRING D4-Lisa-1
6157: PPUSH
6158: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6162: LD_EXP 1
6166: PPUSH
6167: LD_STRING D4-JMM-1
6169: PPUSH
6170: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6174: LD_EXP 3
6178: PPUSH
6179: LD_STRING D4-Lisa-2
6181: PPUSH
6182: CALL_OW 88
// DialogueOff ;
6186: CALL_OW 7
// InGameOff ;
6190: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6194: LD_STRING M2L
6196: PPUSH
6197: CALL_OW 337
// SaveForQuickRestart ;
6201: CALL_OW 22
// russianAI = 1 ;
6205: LD_ADDR_EXP 13
6209: PUSH
6210: LD_INT 1
6212: ST_TO_ADDR
// end ; 3 :
6213: GO 6436
6215: LD_INT 3
6217: DOUBLE
6218: EQUAL
6219: IFTRUE 6223
6221: GO 6435
6223: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6224: LD_INT 22
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6246: LD_EXP 4
6250: PPUSH
6251: LD_EXP 1
6255: PPUSH
6256: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6260: LD_EXP 1
6264: PPUSH
6265: LD_EXP 4
6269: PPUSH
6270: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6274: LD_EXP 2
6278: PUSH
6279: LD_EXP 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 87
// wait ( 0 0$1 ) ;
6292: LD_INT 35
6294: PPUSH
6295: CALL_OW 67
// DialogueOn ;
6299: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6303: LD_EXP 4
6307: PPUSH
6308: LD_STRING D3X-Con-1
6310: PPUSH
6311: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6315: LD_EXP 1
6319: PPUSH
6320: LD_STRING D3J-JMM-1
6322: PPUSH
6323: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6327: LD_EXP 4
6331: PPUSH
6332: LD_STRING D3J-Joan-2
6334: PPUSH
6335: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D3J-JMM-2
6346: PPUSH
6347: CALL_OW 88
// wait ( 0 0$1 ) ;
6351: LD_INT 35
6353: PPUSH
6354: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6358: LD_EXP 1
6362: PPUSH
6363: LD_STRING D4-JMM-1
6365: PPUSH
6366: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6370: LD_EXP 4
6374: PPUSH
6375: LD_STRING D4-Con-1
6377: PPUSH
6378: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D4-JMM-2
6389: PPUSH
6390: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D4-Con-2
6401: PPUSH
6402: CALL_OW 88
// DialogueOff ;
6406: CALL_OW 7
// InGameOff ;
6410: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6414: LD_STRING M2X
6416: PPUSH
6417: CALL_OW 337
// SaveForQuickRestart ;
6421: CALL_OW 22
// russianAI = 1 ;
6425: LD_ADDR_EXP 13
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// end ; end ;
6433: GO 6436
6435: POP
// end ;
6436: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6437: LD_INT 32
6439: PPUSH
6440: CALL_OW 306
6444: IFFALSE 6777
6446: GO 6448
6448: DISABLE
// begin case JMMGirl of 1 :
6449: LD_EXP 7
6453: PUSH
6454: LD_INT 1
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6584
6462: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6463: LD_EXP 1
6467: PPUSH
6468: LD_STRING D6J-JMM-1
6470: PPUSH
6471: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6475: LD_STRING 13f_Denis
6477: PPUSH
6478: CALL_OW 28
6482: PUSH
6483: LD_INT 1
6485: EQUAL
6486: PUSH
6487: LD_STRING 13s_Denis
6489: PPUSH
6490: CALL_OW 28
6494: PUSH
6495: LD_INT 1
6497: EQUAL
6498: OR
6499: IFFALSE 6539
// begin Say ( Joan , D6J-Joan-1 ) ;
6501: LD_EXP 2
6505: PPUSH
6506: LD_STRING D6J-Joan-1
6508: PPUSH
6509: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6513: LD_EXP 1
6517: PPUSH
6518: LD_STRING D6J-JMM-2
6520: PPUSH
6521: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6525: LD_EXP 2
6529: PPUSH
6530: LD_STRING D6J-Joan-2
6532: PPUSH
6533: CALL_OW 88
// end else
6537: GO 6551
// begin Say ( Joan , D6J-Joan-2a ) ;
6539: LD_EXP 2
6543: PPUSH
6544: LD_STRING D6J-Joan-2a
6546: PPUSH
6547: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6551: LD_EXP 1
6555: PPUSH
6556: LD_STRING D6J-JMM-3
6558: PPUSH
6559: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6563: LD_EXP 2
6567: PPUSH
6568: LD_STRING D6J-Joan-3
6570: PPUSH
6571: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6575: LD_STRING M3
6577: PPUSH
6578: CALL_OW 337
// end ; 2 :
6582: GO 6777
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6650
6592: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D6L-JMM-1
6600: PPUSH
6601: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6605: LD_EXP 3
6609: PPUSH
6610: LD_STRING D6L-Lisa-1
6612: PPUSH
6613: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D6L-JMM-2
6624: PPUSH
6625: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6629: LD_EXP 3
6633: PPUSH
6634: LD_STRING D6L-Lisa-2
6636: PPUSH
6637: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6641: LD_STRING M3
6643: PPUSH
6644: CALL_OW 337
// end ; 3 :
6648: GO 6777
6650: LD_INT 3
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6776
6658: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6659: LD_EXP 1
6663: PPUSH
6664: LD_STRING D6X-JMM-1
6666: PPUSH
6667: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6671: LD_EXP 4
6675: PPUSH
6676: LD_STRING D6X-Con-1
6678: PPUSH
6679: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6683: LD_EXP 1
6687: PPUSH
6688: LD_STRING D6X-JMM-2
6690: PPUSH
6691: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6695: LD_EXP 4
6699: PPUSH
6700: LD_STRING D6X-Con-2
6702: PPUSH
6703: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6707: LD_EXP 1
6711: PPUSH
6712: LD_STRING D6X-JMM-3
6714: PPUSH
6715: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6719: LD_EXP 4
6723: PPUSH
6724: LD_STRING D6X-Con-3
6726: PPUSH
6727: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6731: LD_EXP 1
6735: PPUSH
6736: LD_STRING D6X-JMM-4
6738: PPUSH
6739: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6743: LD_EXP 4
6747: PPUSH
6748: LD_STRING D6X-Con-4
6750: PPUSH
6751: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6755: LD_EXP 1
6759: PPUSH
6760: LD_STRING D6X-JMM-5
6762: PPUSH
6763: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6767: LD_STRING M3
6769: PPUSH
6770: CALL_OW 337
// end ; end ;
6774: GO 6777
6776: POP
// end ;
6777: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6778: LD_INT 22
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 33
6790: PUSH
6791: LD_INT 2
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 69
6806: PPUSH
6807: CALL_OW 306
6811: IFFALSE 6957
6813: GO 6815
6815: DISABLE
// begin case JMMGirl of 1 :
6816: LD_EXP 7
6820: PUSH
6821: LD_INT 1
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6866
6829: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6830: LD_EXP 1
6834: PPUSH
6835: LD_STRING D5-JMM-1
6837: PPUSH
6838: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6842: LD_INT 77
6844: PPUSH
6845: LD_INT 87
6847: PPUSH
6848: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
6852: LD_EXP 2
6856: PPUSH
6857: LD_STRING D5-Joan-1
6859: PPUSH
6860: CALL_OW 88
// end ; 2 :
6864: GO 6957
6866: LD_INT 2
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6911
6874: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6875: LD_EXP 1
6879: PPUSH
6880: LD_STRING D5-JMM-1
6882: PPUSH
6883: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6887: LD_INT 77
6889: PPUSH
6890: LD_INT 87
6892: PPUSH
6893: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
6897: LD_EXP 3
6901: PPUSH
6902: LD_STRING D5-Lisa-1
6904: PPUSH
6905: CALL_OW 88
// end ; 3 :
6909: GO 6957
6911: LD_INT 3
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 6956
6919: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6920: LD_EXP 1
6924: PPUSH
6925: LD_STRING D5-JMM-1
6927: PPUSH
6928: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6932: LD_INT 77
6934: PPUSH
6935: LD_INT 87
6937: PPUSH
6938: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
6942: LD_EXP 4
6946: PPUSH
6947: LD_STRING D5-Con-1
6949: PPUSH
6950: CALL_OW 88
// end ; end ;
6954: GO 6957
6956: POP
// end ;
6957: END
// every 15 15$0 do
6958: GO 6960
6960: DISABLE
// begin DialogueOn ;
6961: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
6965: LD_EXP 5
6969: PPUSH
6970: LD_STRING D7-Pow-1
6972: PPUSH
6973: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
6977: LD_EXP 1
6981: PPUSH
6982: LD_STRING D7-JMM-1
6984: PPUSH
6985: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
6989: LD_EXP 5
6993: PPUSH
6994: LD_STRING D7-Pow-2
6996: PPUSH
6997: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7001: LD_EXP 1
7005: PPUSH
7006: LD_STRING D7-JMM-2
7008: PPUSH
7009: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7013: LD_EXP 5
7017: PPUSH
7018: LD_STRING D7-Pow-3
7020: PPUSH
7021: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7025: LD_EXP 1
7029: PPUSH
7030: LD_STRING D7-JMM-3
7032: PPUSH
7033: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7037: LD_EXP 5
7041: PPUSH
7042: LD_STRING D7-Pow-4
7044: PPUSH
7045: CALL_OW 94
// DialogueOff ;
7049: CALL_OW 7
// end ; end_of_file
7053: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7054: LD_VAR 0 1
7058: PPUSH
7059: CALL_OW 255
7063: PUSH
7064: LD_INT 3
7066: EQUAL
7067: IFFALSE 7141
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7069: LD_ADDR_EXP 10
7073: PUSH
7074: LD_EXP 10
7078: PPUSH
7079: LD_INT 1
7081: PPUSH
7082: CALL_OW 3
7086: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7087: LD_ADDR_EXP 10
7091: PUSH
7092: LD_EXP 10
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: CALL_OW 3
7104: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7105: LD_ADDR_EXP 10
7109: PUSH
7110: LD_EXP 10
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 3
7122: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7123: LD_ADDR_EXP 10
7127: PUSH
7128: LD_EXP 10
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 3
7140: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7141: LD_VAR 0 1
7145: PPUSH
7146: CALL_OW 255
7150: PUSH
7151: LD_INT 3
7153: EQUAL
7154: PUSH
7155: LD_VAR 0 1
7159: PPUSH
7160: CALL_OW 266
7164: PUSH
7165: LD_INT 0
7167: EQUAL
7168: PUSH
7169: LD_VAR 0 1
7173: PPUSH
7174: CALL_OW 266
7178: PUSH
7179: LD_INT 2
7181: EQUAL
7182: OR
7183: PUSH
7184: LD_VAR 0 1
7188: PPUSH
7189: CALL_OW 266
7193: PUSH
7194: LD_INT 4
7196: EQUAL
7197: OR
7198: PUSH
7199: EMPTY
7200: LIST
7201: AND
7202: IFFALSE 7213
// ComUpgrade ( building ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 255
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: PUSH
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 266
7236: PUSH
7237: LD_INT 32
7239: EQUAL
7240: AND
7241: IFFALSE 7282
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7243: LD_VAR 0 1
7247: PPUSH
7248: LD_INT 42
7250: PUSH
7251: LD_INT 43
7253: PUSH
7254: LD_INT 44
7256: PUSH
7257: LD_INT 46
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 1
7268: PPUSH
7269: LD_INT 4
7271: PPUSH
7272: CALL_OW 12
7276: ARRAY
7277: PPUSH
7278: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7282: LD_VAR 0 1
7286: PPUSH
7287: CALL_OW 255
7291: PUSH
7292: LD_INT 3
7294: EQUAL
7295: PUSH
7296: LD_VAR 0 1
7300: PPUSH
7301: CALL_OW 266
7305: PUSH
7306: LD_INT 33
7308: EQUAL
7309: AND
7310: IFFALSE 7351
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7312: LD_VAR 0 1
7316: PPUSH
7317: LD_INT 42
7319: PUSH
7320: LD_INT 43
7322: PUSH
7323: LD_INT 44
7325: PUSH
7326: LD_INT 46
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 4
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PPUSH
7347: CALL_OW 208
// end ;
7351: PPOPN 1
7353: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 255
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: PUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 247
7377: PUSH
7378: LD_INT 3
7380: EQUAL
7381: AND
7382: IFFALSE 8074
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 266
7393: PUSH
7394: LD_INT 31
7396: EQUAL
7397: PUSH
7398: LD_VAR 0 1
7402: PPUSH
7403: CALL_OW 266
7407: PUSH
7408: LD_INT 32
7410: EQUAL
7411: OR
7412: PUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 266
7422: PUSH
7423: LD_INT 36
7425: EQUAL
7426: OR
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 266
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 1
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_INT 24
7455: EQUAL
7456: OR
7457: PUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 266
7467: PUSH
7468: LD_INT 17
7470: EQUAL
7471: OR
7472: PUSH
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 266
7482: PUSH
7483: LD_INT 25
7485: EQUAL
7486: OR
7487: PUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 266
7497: PUSH
7498: LD_INT 19
7500: EQUAL
7501: OR
7502: PUSH
7503: LD_VAR 0 1
7507: PPUSH
7508: CALL_OW 266
7512: PUSH
7513: LD_INT 20
7515: EQUAL
7516: OR
7517: PUSH
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 266
7527: PUSH
7528: LD_INT 18
7530: EQUAL
7531: OR
7532: PUSH
7533: LD_VAR 0 1
7537: PPUSH
7538: CALL_OW 266
7542: PUSH
7543: LD_INT 21
7545: EQUAL
7546: OR
7547: PUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 266
7557: PUSH
7558: LD_INT 23
7560: EQUAL
7561: OR
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 266
7572: PUSH
7573: LD_INT 16
7575: EQUAL
7576: OR
7577: PUSH
7578: LD_VAR 0 1
7582: PPUSH
7583: CALL_OW 266
7587: PUSH
7588: LD_INT 6
7590: EQUAL
7591: OR
7592: PUSH
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 266
7602: PUSH
7603: LD_INT 29
7605: EQUAL
7606: OR
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 266
7617: PUSH
7618: LD_INT 26
7620: EQUAL
7621: OR
7622: PUSH
7623: LD_VAR 0 1
7627: PPUSH
7628: CALL_OW 266
7632: PUSH
7633: LD_INT 30
7635: EQUAL
7636: OR
7637: PUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: CALL_OW 266
7647: PUSH
7648: LD_INT 28
7650: EQUAL
7651: OR
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 266
7662: PUSH
7663: LD_INT 27
7665: EQUAL
7666: OR
7667: PUSH
7668: LD_VAR 0 1
7672: PPUSH
7673: CALL_OW 266
7677: PUSH
7678: LD_INT 33
7680: EQUAL
7681: OR
7682: PUSH
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_INT 2
7695: EQUAL
7696: OR
7697: PUSH
7698: LD_VAR 0 1
7702: PPUSH
7703: CALL_OW 266
7707: PUSH
7708: LD_INT 4
7710: EQUAL
7711: OR
7712: IFFALSE 7798
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7714: LD_ADDR_EXP 10
7718: PUSH
7719: LD_EXP 10
7723: PUSH
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 266
7733: ADD
7734: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7735: LD_ADDR_EXP 10
7739: PUSH
7740: LD_EXP 10
7744: PUSH
7745: LD_VAR 0 1
7749: PPUSH
7750: CALL_OW 250
7754: ADD
7755: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7756: LD_ADDR_EXP 10
7760: PUSH
7761: LD_EXP 10
7765: PUSH
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 251
7775: ADD
7776: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7777: LD_ADDR_EXP 10
7781: PUSH
7782: LD_EXP 10
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 254
7796: ADD
7797: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 266
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7890
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
7813: LD_ADDR_EXP 10
7817: PUSH
7818: LD_EXP 10
7822: PUSH
7823: LD_INT 0
7825: ADD
7826: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7827: LD_ADDR_EXP 10
7831: PUSH
7832: LD_EXP 10
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 250
7846: ADD
7847: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7848: LD_ADDR_EXP 10
7852: PUSH
7853: LD_EXP 10
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 251
7867: ADD
7868: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7869: LD_ADDR_EXP 10
7873: PUSH
7874: LD_EXP 10
7878: PUSH
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 254
7888: ADD
7889: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 266
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: IFFALSE 7982
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
7905: LD_ADDR_EXP 10
7909: PUSH
7910: LD_EXP 10
7914: PUSH
7915: LD_INT 2
7917: ADD
7918: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7919: LD_ADDR_EXP 10
7923: PUSH
7924: LD_EXP 10
7928: PUSH
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 250
7938: ADD
7939: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7940: LD_ADDR_EXP 10
7944: PUSH
7945: LD_EXP 10
7949: PUSH
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 251
7959: ADD
7960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7961: LD_ADDR_EXP 10
7965: PUSH
7966: LD_EXP 10
7970: PUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: CALL_OW 254
7980: ADD
7981: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
7982: LD_VAR 0 1
7986: PPUSH
7987: CALL_OW 266
7991: PUSH
7992: LD_INT 5
7994: EQUAL
7995: IFFALSE 8074
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
7997: LD_ADDR_EXP 10
8001: PUSH
8002: LD_EXP 10
8006: PUSH
8007: LD_INT 4
8009: ADD
8010: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8011: LD_ADDR_EXP 10
8015: PUSH
8016: LD_EXP 10
8020: PUSH
8021: LD_VAR 0 1
8025: PPUSH
8026: CALL_OW 250
8030: ADD
8031: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8032: LD_ADDR_EXP 10
8036: PUSH
8037: LD_EXP 10
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 251
8051: ADD
8052: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8053: LD_ADDR_EXP 10
8057: PUSH
8058: LD_EXP 10
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 254
8072: ADD
8073: ST_TO_ADDR
// end ; end ; end ;
8074: PPOPN 1
8076: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8077: LD_VAR 0 2
8081: PUSH
8082: LD_INT 1
8084: EQUAL
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_INT 40
8093: EQUAL
8094: OR
8095: IFFALSE 8219
// if GetSide ( vehicle ) = 3 then
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8219
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 264
8121: PUSH
8122: LD_INT 47
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 264
8135: PUSH
8136: LD_INT 46
8138: EQUAL
8139: OR
8140: PUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 264
8150: PUSH
8151: LD_INT 45
8153: EQUAL
8154: OR
8155: PUSH
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 264
8165: PUSH
8166: LD_INT 44
8168: EQUAL
8169: OR
8170: IFFALSE 8188
// russianTanks = russianTanks ^ vehicle ;
8172: LD_ADDR_EXP 11
8176: PUSH
8177: LD_EXP 11
8181: PUSH
8182: LD_VAR 0 1
8186: ADD
8187: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 264
8197: PUSH
8198: LD_INT 49
8200: EQUAL
8201: IFFALSE 8219
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8203: LD_ADDR_EXP 12
8207: PUSH
8208: LD_EXP 12
8212: PUSH
8213: LD_VAR 0 1
8217: ADD
8218: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 255
8228: PUSH
8229: LD_INT 1
8231: EQUAL
8232: PUSH
8233: LD_VAR 0 1
8237: PPUSH
8238: CALL_OW 264
8242: PUSH
8243: LD_INT 10
8245: EQUAL
8246: AND
8247: IFFALSE 8263
// amLaserCounter = amLaserCounter + 1 ;
8249: LD_ADDR_EXP 9
8253: PUSH
8254: LD_EXP 9
8258: PUSH
8259: LD_INT 1
8261: PLUS
8262: ST_TO_ADDR
// end ;
8263: PPOPN 2
8265: END
// on UnitGoesToRed ( unit ) do var i ;
8266: LD_INT 0
8268: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8269: LD_VAR 0 1
8273: PPUSH
8274: CALL_OW 255
8278: PUSH
8279: LD_INT 3
8281: EQUAL
8282: PUSH
8283: LD_VAR 0 1
8287: PPUSH
8288: CALL_OW 247
8292: PUSH
8293: LD_INT 2
8295: EQUAL
8296: AND
8297: IFFALSE 8415
// begin if russianTanks > 0 then
8299: LD_EXP 11
8303: PUSH
8304: LD_INT 0
8306: GREATER
8307: IFFALSE 8357
// for i in russianTanks do
8309: LD_ADDR_VAR 0 2
8313: PUSH
8314: LD_EXP 11
8318: PUSH
8319: FOR_IN
8320: IFFALSE 8355
// if i = unit then
8322: LD_VAR 0 2
8326: PUSH
8327: LD_VAR 0 1
8331: EQUAL
8332: IFFALSE 8353
// russianTanks = russianTanks diff [ unit ] ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_EXP 11
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: DIFF
8352: ST_TO_ADDR
8353: GO 8319
8355: POP
8356: POP
// if russianTimeLapsers > 0 then
8357: LD_EXP 12
8361: PUSH
8362: LD_INT 0
8364: GREATER
8365: IFFALSE 8415
// for i in russianTimeLapsers do
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_EXP 12
8376: PUSH
8377: FOR_IN
8378: IFFALSE 8413
// if i = unit then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_VAR 0 1
8389: EQUAL
8390: IFFALSE 8411
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8392: LD_ADDR_EXP 12
8396: PUSH
8397: LD_EXP 12
8401: PUSH
8402: LD_VAR 0 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: DIFF
8410: ST_TO_ADDR
8411: GO 8377
8413: POP
8414: POP
// end ; end ; end_of_file
8415: PPOPN 2
8417: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMNewVeh , JMMGirlVeh ;
8418: LD_EXP 1
8422: PPUSH
8423: CALL_OW 310
8427: PPUSH
8428: LD_INT 12
8430: PPUSH
8431: CALL_OW 308
8435: PUSH
8436: LD_EXP 15
8440: PUSH
8441: LD_INT 0
8443: EQUAL
8444: AND
8445: IFFALSE 8887
8447: GO 8449
8449: DISABLE
8450: LD_INT 0
8452: PPUSH
8453: PPUSH
// begin enable ;
8454: ENABLE
// JMMNewVeh = IsInUnit ( JMM ) ;
8455: LD_ADDR_VAR 0 1
8459: PUSH
8460: LD_EXP 1
8464: PPUSH
8465: CALL_OW 310
8469: ST_TO_ADDR
// if JMMGirl = 1 then
8470: LD_EXP 7
8474: PUSH
8475: LD_INT 1
8477: EQUAL
8478: IFFALSE 8495
// JMMGirlVeh = IsInUnit ( Joan ) ;
8480: LD_ADDR_VAR 0 2
8484: PUSH
8485: LD_EXP 2
8489: PPUSH
8490: CALL_OW 310
8494: ST_TO_ADDR
// if JMMGirl = 2 then
8495: LD_EXP 7
8499: PUSH
8500: LD_INT 2
8502: EQUAL
8503: IFFALSE 8520
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8505: LD_ADDR_VAR 0 2
8509: PUSH
8510: LD_EXP 3
8514: PPUSH
8515: CALL_OW 310
8519: ST_TO_ADDR
// if JMMGirl = 3 then
8520: LD_EXP 7
8524: PUSH
8525: LD_INT 3
8527: EQUAL
8528: IFFALSE 8545
// JMMGirlVeh = IsInUnit ( Connie ) ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_EXP 4
8539: PPUSH
8540: CALL_OW 310
8544: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8545: LD_EXP 1
8549: PPUSH
8550: CALL_OW 310
8554: PPUSH
8555: LD_EXP 2
8559: PPUSH
8560: CALL_OW 310
8564: PPUSH
8565: CALL_OW 296
8569: PUSH
8570: LD_INT 10
8572: LESS
8573: PUSH
8574: LD_EXP 1
8578: PPUSH
8579: CALL_OW 310
8583: PPUSH
8584: LD_EXP 3
8588: PPUSH
8589: CALL_OW 310
8593: PPUSH
8594: CALL_OW 296
8598: PUSH
8599: LD_INT 10
8601: LESS
8602: OR
8603: PUSH
8604: LD_EXP 1
8608: PPUSH
8609: CALL_OW 310
8613: PPUSH
8614: LD_EXP 4
8618: PPUSH
8619: CALL_OW 310
8623: PPUSH
8624: CALL_OW 296
8628: PUSH
8629: LD_INT 10
8631: LESS
8632: OR
8633: IFFALSE 8791
// begin case Query ( Q3b ) of 1 :
8635: LD_STRING Q3b
8637: PPUSH
8638: CALL_OW 97
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8788
8651: POP
// begin SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 265
8661: PUSH
8662: EMPTY
8663: LIST
8664: PUSH
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 262
8674: PUSH
8675: EMPTY
8676: LIST
8677: PUSH
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 263
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: LD_VAR 0 1
8695: PPUSH
8696: CALL_OW 264
8700: PUSH
8701: EMPTY
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PPUSH
8710: LD_STRING 14_JMMVeh_1
8712: PPUSH
8713: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8717: LD_VAR 0 2
8721: PPUSH
8722: CALL_OW 265
8726: PUSH
8727: EMPTY
8728: LIST
8729: PUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: CALL_OW 262
8739: PUSH
8740: EMPTY
8741: LIST
8742: PUSH
8743: LD_VAR 0 2
8747: PPUSH
8748: CALL_OW 263
8752: PUSH
8753: EMPTY
8754: LIST
8755: PUSH
8756: LD_VAR 0 2
8760: PPUSH
8761: CALL_OW 264
8765: PUSH
8766: EMPTY
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: PPUSH
8775: LD_STRING 14_JMMGirlVeh_1
8777: PPUSH
8778: CALL_OW 39
// FinishMission ;
8782: CALL 9028 0 0
// end ; end ;
8786: GO 8789
8788: POP
// end else
8789: GO 8887
// begin if JMMGirl = 1 then
8791: LD_EXP 7
8795: PUSH
8796: LD_INT 1
8798: EQUAL
8799: IFFALSE 8827
// begin case Query ( Q3bJ ) of 1 :
8801: LD_STRING Q3bJ
8803: PPUSH
8804: CALL_OW 97
8808: PUSH
8809: LD_INT 1
8811: DOUBLE
8812: EQUAL
8813: IFTRUE 8817
8815: GO 8824
8817: POP
// FinishMission ; end ;
8818: CALL 9028 0 0
8822: GO 8825
8824: POP
// end else
8825: GO 8887
// begin if JMMGirl = 2 then
8827: LD_EXP 7
8831: PUSH
8832: LD_INT 2
8834: EQUAL
8835: IFFALSE 8863
// begin case Query ( Q3bL ) of 1 :
8837: LD_STRING Q3bL
8839: PPUSH
8840: CALL_OW 97
8844: PUSH
8845: LD_INT 1
8847: DOUBLE
8848: EQUAL
8849: IFTRUE 8853
8851: GO 8860
8853: POP
// FinishMission ; end ;
8854: CALL 9028 0 0
8858: GO 8861
8860: POP
// end else
8861: GO 8887
// begin case Query ( Q3bX ) of 1 :
8863: LD_STRING Q3bX
8865: PPUSH
8866: CALL_OW 97
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8886
8879: POP
// FinishMission ; end ;
8880: CALL 9028 0 0
8884: GO 8887
8886: POP
// end ; end ; end ; end ;
8887: PPOPN 2
8889: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
8890: LD_INT 22
8892: PUSH
8893: LD_INT 3
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 1
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PUSH
8919: LD_INT 0
8921: EQUAL
8922: PUSH
8923: LD_EXP 15
8927: PUSH
8928: LD_INT 0
8930: EQUAL
8931: AND
8932: IFFALSE 9027
8934: GO 8936
8936: DISABLE
// begin DialogueOn ;
8937: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
8941: LD_EXP 1
8945: PPUSH
8946: LD_STRING DEnd-JMM-1
8948: PPUSH
8949: CALL_OW 88
// if JMMGirl = 1 then
8953: LD_EXP 7
8957: PUSH
8958: LD_INT 1
8960: EQUAL
8961: IFFALSE 8975
// Say ( Joan , DEnd-Joan-1 ) ;
8963: LD_EXP 2
8967: PPUSH
8968: LD_STRING DEnd-Joan-1
8970: PPUSH
8971: CALL_OW 88
// if JMMGirl = 2 then
8975: LD_EXP 7
8979: PUSH
8980: LD_INT 2
8982: EQUAL
8983: IFFALSE 8997
// Say ( Lisa , DEnd-Lisa-1 ) ;
8985: LD_EXP 3
8989: PPUSH
8990: LD_STRING DEnd-Lisa-1
8992: PPUSH
8993: CALL_OW 88
// if JMMGirl = 3 then
8997: LD_EXP 7
9001: PUSH
9002: LD_INT 3
9004: EQUAL
9005: IFFALSE 9019
// Say ( Connie , DEnd-Con-1 ) ;
9007: LD_EXP 4
9011: PPUSH
9012: LD_STRING DEnd-Con-1
9014: PPUSH
9015: CALL_OW 88
// DialogueOff ;
9019: CALL_OW 7
// FinishMission ;
9023: CALL 9028 0 0
// end ;
9027: END
// export function FinishMission ; begin
9028: LD_INT 0
9030: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING 14_JMM
9038: PPUSH
9039: CALL_OW 38
// if fastEnd = 1 then
9043: LD_EXP 15
9047: PUSH
9048: LD_INT 1
9050: EQUAL
9051: IFFALSE 9175
// begin AddMedal ( fastend , - 1 ) ;
9053: LD_STRING fastend
9055: PPUSH
9056: LD_INT 1
9058: NEG
9059: PPUSH
9060: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9064: LD_STRING fastend
9066: PPUSH
9067: LD_INT 1
9069: NEG
9070: PPUSH
9071: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9075: LD_STRING fastend
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9086: LD_EXP 7
9090: PPUSH
9091: LD_STRING 14_JMMGirl_1
9093: PPUSH
9094: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9098: LD_INT 0
9100: PPUSH
9101: LD_STRING 14_JMMGirlStatus_1
9103: PPUSH
9104: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_STRING 14_KappaStatus_1
9113: PPUSH
9114: CALL_OW 39
// SaveVariable ( [ [ GetChassis ( JMMVeh ) ] , [ GetEngine ( JMMveh ) ] , [ GetControl ( JMMveh ) ] , [ GetWeapon ( JMMveh ) ] ] , 14_JMMVeh_1 ) ;
9118: LD_INT 95
9120: PPUSH
9121: CALL_OW 265
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: LD_INT 95
9131: PPUSH
9132: CALL_OW 262
9136: PUSH
9137: EMPTY
9138: LIST
9139: PUSH
9140: LD_INT 95
9142: PPUSH
9143: CALL_OW 263
9147: PUSH
9148: EMPTY
9149: LIST
9150: PUSH
9151: LD_INT 95
9153: PPUSH
9154: CALL_OW 264
9158: PUSH
9159: EMPTY
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: PPUSH
9168: LD_STRING 14_JMMVeh_1
9170: PPUSH
9171: CALL_OW 39
// end ; if fastEnd = 0 then
9175: LD_EXP 15
9179: PUSH
9180: LD_INT 0
9182: EQUAL
9183: IFFALSE 9853
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9185: LD_EXP 7
9189: PPUSH
9190: LD_STRING 14_JMMGirl_1
9192: PPUSH
9193: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9197: LD_INT 22
9199: PUSH
9200: LD_INT 3
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 21
9209: PUSH
9210: LD_INT 1
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: PUSH
9226: LD_INT 0
9228: EQUAL
9229: PUSH
9230: LD_INT 48
9232: PPUSH
9233: CALL_OW 255
9237: PUSH
9238: LD_INT 1
9240: EQUAL
9241: AND
9242: IFFALSE 9256
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9244: LD_INT 1
9246: PPUSH
9247: LD_STRING 14_KappaStatus_1
9249: PPUSH
9250: CALL_OW 39
9254: GO 9266
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9256: LD_INT 0
9258: PPUSH
9259: LD_STRING 14_KappaStatus_1
9261: PPUSH
9262: CALL_OW 39
// case JMMGirl of 1 :
9266: LD_EXP 7
9270: PUSH
9271: LD_INT 1
9273: DOUBLE
9274: EQUAL
9275: IFTRUE 9279
9277: GO 9427
9279: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9280: LD_EXP 2
9284: PPUSH
9285: CALL_OW 302
9289: PUSH
9290: LD_EXP 2
9294: PPUSH
9295: CALL_OW 255
9299: PUSH
9300: LD_INT 1
9302: EQUAL
9303: AND
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 3
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 21
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 69
9333: PUSH
9334: LD_INT 0
9336: EQUAL
9337: PUSH
9338: LD_EXP 1
9342: PPUSH
9343: CALL_OW 310
9347: PPUSH
9348: LD_EXP 2
9352: PPUSH
9353: CALL_OW 310
9357: PPUSH
9358: CALL_OW 296
9362: PUSH
9363: LD_INT 10
9365: LESS
9366: OR
9367: AND
9368: IFFALSE 9404
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9370: LD_INT 1
9372: PPUSH
9373: LD_STRING 14_JMMGirlStatus_1
9375: PPUSH
9376: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9380: LD_EXP 2
9384: PPUSH
9385: LD_STRING 14_Joan
9387: PPUSH
9388: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9392: LD_STRING protect
9394: PPUSH
9395: LD_INT 1
9397: PPUSH
9398: CALL_OW 101
9402: GO 9425
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9404: LD_INT 0
9406: PPUSH
9407: LD_STRING 14_JMMGirlStatus_1
9409: PPUSH
9410: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9414: LD_STRING protect
9416: PPUSH
9417: LD_INT 1
9419: NEG
9420: PPUSH
9421: CALL_OW 101
// end ; end ; 2 :
9425: GO 9740
9427: LD_INT 2
9429: DOUBLE
9430: EQUAL
9431: IFTRUE 9435
9433: GO 9583
9435: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9436: LD_EXP 3
9440: PPUSH
9441: CALL_OW 302
9445: PUSH
9446: LD_EXP 3
9450: PPUSH
9451: CALL_OW 255
9455: PUSH
9456: LD_INT 1
9458: EQUAL
9459: AND
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 3
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 69
9489: PUSH
9490: LD_INT 0
9492: EQUAL
9493: PUSH
9494: LD_EXP 1
9498: PPUSH
9499: CALL_OW 310
9503: PPUSH
9504: LD_EXP 3
9508: PPUSH
9509: CALL_OW 310
9513: PPUSH
9514: CALL_OW 296
9518: PUSH
9519: LD_INT 10
9521: LESS
9522: OR
9523: AND
9524: IFFALSE 9560
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9526: LD_INT 1
9528: PPUSH
9529: LD_STRING 14_JMMGirlStatus_1
9531: PPUSH
9532: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9536: LD_EXP 3
9540: PPUSH
9541: LD_STRING 14_Lisa
9543: PPUSH
9544: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9548: LD_STRING protect
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 101
9558: GO 9581
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_STRING 14_JMMGirlStatus_1
9565: PPUSH
9566: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9570: LD_STRING protect
9572: PPUSH
9573: LD_INT 2
9575: NEG
9576: PPUSH
9577: CALL_OW 101
// end ; end ; 3 :
9581: GO 9740
9583: LD_INT 3
9585: DOUBLE
9586: EQUAL
9587: IFTRUE 9591
9589: GO 9739
9591: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9592: LD_EXP 4
9596: PPUSH
9597: CALL_OW 302
9601: PUSH
9602: LD_EXP 4
9606: PPUSH
9607: CALL_OW 255
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_INT 3
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 1
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: PUSH
9646: LD_INT 0
9648: EQUAL
9649: PUSH
9650: LD_EXP 1
9654: PPUSH
9655: CALL_OW 310
9659: PPUSH
9660: LD_EXP 4
9664: PPUSH
9665: CALL_OW 310
9669: PPUSH
9670: CALL_OW 296
9674: PUSH
9675: LD_INT 10
9677: LESS
9678: OR
9679: AND
9680: IFFALSE 9716
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9682: LD_INT 1
9684: PPUSH
9685: LD_STRING 14_JMMGirlStatus_1
9687: PPUSH
9688: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9692: LD_EXP 4
9696: PPUSH
9697: LD_STRING 14_Connie
9699: PPUSH
9700: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9704: LD_STRING protect
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 101
9714: GO 9737
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9716: LD_INT 0
9718: PPUSH
9719: LD_STRING 14_JMMGirlStatus_1
9721: PPUSH
9722: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
9726: LD_STRING protect
9728: PPUSH
9729: LD_INT 3
9731: NEG
9732: PPUSH
9733: CALL_OW 101
// end ; end ; end ;
9737: GO 9740
9739: POP
// if amLaserCounter >= 2 then
9740: LD_EXP 9
9744: PUSH
9745: LD_INT 2
9747: GREATEREQUAL
9748: IFFALSE 9762
// begin AddMedal ( double , 1 ) end else
9750: LD_STRING double
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: CALL_OW 101
9760: GO 9796
// begin if amLaserCounter = 1 then
9762: LD_EXP 9
9766: PUSH
9767: LD_INT 1
9769: EQUAL
9770: IFFALSE 9785
// AddMedal ( double , - 2 ) else
9772: LD_STRING double
9774: PPUSH
9775: LD_INT 2
9777: NEG
9778: PPUSH
9779: CALL_OW 101
9783: GO 9796
// AddMedal ( double , - 1 ) ;
9785: LD_STRING double
9787: PPUSH
9788: LD_INT 1
9790: NEG
9791: PPUSH
9792: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
9796: LD_INT 22
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PPUSH
9820: CALL_OW 69
9824: PUSH
9825: LD_INT 0
9827: EQUAL
9828: IFFALSE 9842
// AddMedal ( base , 1 ) else
9830: LD_STRING base
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 101
9840: GO 9853
// AddMedal ( base , - 1 ) ;
9842: LD_STRING base
9844: PPUSH
9845: LD_INT 1
9847: NEG
9848: PPUSH
9849: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
9853: LD_STRING Eliminate
9855: PPUSH
9856: CALL_OW 102
// YouWin ;
9860: CALL_OW 103
// end ; end_of_file
9864: LD_VAR 0 1
9868: RET
// every 0 0$1 trigger IsDead ( JMM ) do
9869: LD_EXP 1
9873: PPUSH
9874: CALL_OW 301
9878: IFFALSE 9890
9880: GO 9882
9882: DISABLE
// YouLost ( JMM ) ; end_of_file
9883: LD_STRING JMM
9885: PPUSH
9886: CALL_OW 104
9890: END
// every 1 1$0 do
9891: GO 9893
9893: DISABLE
// begin enable ;
9894: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
9895: LD_INT 3
9897: PPUSH
9898: LD_INT 5
9900: PPUSH
9901: CALL_OW 12
9905: PPUSH
9906: LD_INT 13
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 55
// end ;
9916: END
