// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1401 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Coonie , false ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Coonie
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1162 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1155
// SaveCharacters ( i , ident ) ;
1139: LD_VAR 0 4
1143: PPUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 38
1153: GO 1136
1155: POP
1156: POP
// end ;
1157: LD_VAR 0 3
1161: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// for i = 1 to count do
1168: LD_ADDR_VAR 0 8
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_VAR 0 6
1182: PUSH
1183: FOR_TO
1184: IFFALSE 1265
// begin uc_side = side ;
1186: LD_ADDR_OWVAR 20
1190: PUSH
1191: LD_VAR 0 1
1195: ST_TO_ADDR
// uc_nation = nation ;
1196: LD_ADDR_OWVAR 21
1200: PUSH
1201: LD_VAR 0 2
1205: ST_TO_ADDR
// hc_gallery =  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name =  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 380
// un = CreateHuman ;
1239: LD_ADDR_VAR 0 10
1243: PUSH
1244: CALL_OW 44
1248: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1249: LD_VAR 0 10
1253: PPUSH
1254: LD_VAR 0 3
1258: PPUSH
1259: CALL_OW 52
// end ;
1263: GO 1183
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 7
1271: RET
// export function Query1 ; begin
1272: LD_INT 0
1274: PPUSH
// case query ( Q1 ) of 1 :
1275: LD_STRING Q1
1277: PPUSH
1278: CALL_OW 97
1282: PUSH
1283: LD_INT 1
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1302
1291: POP
// result = 1 ; 2 :
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 1
1299: ST_TO_ADDR
1300: GO 1322
1302: LD_INT 2
1304: DOUBLE
1305: EQUAL
1306: IFTRUE 1310
1308: GO 1321
1310: POP
// result = 2 ; end ;
1311: LD_ADDR_VAR 0 1
1315: PUSH
1316: LD_INT 2
1318: ST_TO_ADDR
1319: GO 1322
1321: POP
// end ;
1322: LD_VAR 0 1
1326: RET
// export function Query2 ; begin
1327: LD_INT 0
1329: PPUSH
// case query ( Q2J ) of 1 :
1330: LD_STRING Q2J
1332: PPUSH
1333: CALL_OW 97
1337: PUSH
1338: LD_INT 1
1340: DOUBLE
1341: EQUAL
1342: IFTRUE 1346
1344: GO 1357
1346: POP
// result = 1 ; 2 :
1347: LD_ADDR_VAR 0 1
1351: PUSH
1352: LD_INT 1
1354: ST_TO_ADDR
1355: GO 1396
1357: LD_INT 2
1359: DOUBLE
1360: EQUAL
1361: IFTRUE 1365
1363: GO 1376
1365: POP
// result = 2 ; 2 :
1366: LD_ADDR_VAR 0 1
1370: PUSH
1371: LD_INT 2
1373: ST_TO_ADDR
1374: GO 1396
1376: LD_INT 2
1378: DOUBLE
1379: EQUAL
1380: IFTRUE 1384
1382: GO 1395
1384: POP
// result = 3 ; end ;
1385: LD_ADDR_VAR 0 1
1389: PUSH
1390: LD_INT 3
1392: ST_TO_ADDR
1393: GO 1396
1395: POP
// end ;
1396: LD_VAR 0 1
1400: RET
// export function PrepareDifficulty ; begin
1401: LD_INT 0
1403: PPUSH
// if difficulty = 1 then
1404: LD_OWVAR 67
1408: PUSH
1409: LD_INT 1
1411: EQUAL
1412: IFFALSE 1492
// begin SetTech ( 57 , 3 , state_disabled ) ;
1414: LD_INT 57
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1427: LD_INT 58
1429: PPUSH
1430: LD_INT 3
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1440: LD_INT 59
1442: PPUSH
1443: LD_INT 3
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1453: LD_INT 51
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1466: LD_INT 52
1468: PPUSH
1469: LD_INT 3
1471: PPUSH
1472: LD_INT 0
1474: PPUSH
1475: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1479: LD_INT 53
1481: PPUSH
1482: LD_INT 3
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 322
// end ; if difficulty = 2 then
1492: LD_OWVAR 67
1496: PUSH
1497: LD_INT 2
1499: EQUAL
1500: IFFALSE 1580
// begin SetTech ( 57 , 3 , state_enabled ) ;
1502: LD_INT 57
1504: PPUSH
1505: LD_INT 3
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1515: LD_INT 58
1517: PPUSH
1518: LD_INT 3
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 0
1536: PPUSH
1537: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1541: LD_INT 51
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 1
1549: PPUSH
1550: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1554: LD_INT 52
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1567: LD_INT 53
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 322
// end ; if difficulty = 3 then
1580: LD_OWVAR 67
1584: PUSH
1585: LD_INT 3
1587: EQUAL
1588: IFFALSE 1668
// begin SetTech ( 57 , 3 , state_enabled ) ;
1590: LD_INT 57
1592: PPUSH
1593: LD_INT 3
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1603: LD_INT 58
1605: PPUSH
1606: LD_INT 3
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1616: LD_INT 59
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1629: LD_INT 51
1631: PPUSH
1632: LD_INT 3
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1642: LD_INT 52
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: PPUSH
1651: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1655: LD_INT 53
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: CALL_OW 322
// end ; end ;
1668: LD_VAR 0 1
1672: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1680: LD_ADDR_VAR 0 8
1684: PUSH
1685: LD_INT 48
1687: PUSH
1688: LD_INT 49
1690: PUSH
1691: LD_INT 50
1693: PUSH
1694: LD_INT 20
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: LD_INT 51
1702: PUSH
1703: LD_INT 52
1705: PUSH
1706: LD_INT 69
1708: PUSH
1709: LD_INT 39
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 40
1717: PUSH
1718: LD_INT 53
1720: PUSH
1721: LD_INT 71
1723: PUSH
1724: LD_INT 57
1726: PUSH
1727: LD_INT 58
1729: PUSH
1730: LD_INT 44
1732: PUSH
1733: LD_INT 32
1735: PUSH
1736: LD_INT 27
1738: PUSH
1739: LD_INT 23
1741: PUSH
1742: LD_INT 33
1744: PUSH
1745: LD_INT 59
1747: PUSH
1748: LD_INT 54
1750: PUSH
1751: LD_INT 55
1753: PUSH
1754: LD_INT 56
1756: PUSH
1757: LD_INT 63
1759: PUSH
1760: LD_INT 64
1762: PUSH
1763: LD_INT 65
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 31
1771: PUSH
1772: LD_INT 21
1774: PUSH
1775: LD_INT 22
1777: PUSH
1778: LD_INT 25
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: DOUBLE
1821: LD_INT 1
1823: DEC
1824: ST_TO_ADDR
1825: LD_VAR 0 8
1829: PUSH
1830: FOR_TO
1831: IFFALSE 1907
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1833: LD_VAR 0 8
1837: PUSH
1838: LD_VAR 0 5
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 1
1848: PPUSH
1849: CALL_OW 321
1853: PUSH
1854: LD_INT 1
1856: EQUAL
1857: PUSH
1858: LD_VAR 0 8
1862: PUSH
1863: LD_VAR 0 5
1867: ARRAY
1868: PPUSH
1869: LD_VAR 0 3
1873: PPUSH
1874: CALL_OW 482
1878: PUSH
1879: LD_INT 1
1881: EQUAL
1882: AND
1883: IFFALSE 1905
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_VAR 0 8
1894: PUSH
1895: LD_VAR 0 5
1899: ARRAY
1900: PPUSH
1901: CALL_OW 184
1905: GO 1830
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 4
1913: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1922: LD_ADDR_VAR 0 8
1926: PUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 313
1936: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1937: LD_ADDR_VAR 0 9
1941: PUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 22
1949: PUSH
1950: LD_VAR 0 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 25
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 24
1971: PUSH
1972: LD_INT 750
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: LD_INT 54
1984: PUSH
1985: EMPTY
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: PPUSH
1998: CALL_OW 70
2002: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2003: LD_ADDR_VAR 0 6
2007: PUSH
2008: LD_VAR 0 3
2012: PPUSH
2013: LD_INT 22
2015: PUSH
2016: LD_VAR 0 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 21
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 3
2037: PUSH
2038: LD_INT 24
2040: PUSH
2041: LD_INT 1000
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: PPUSH
2060: CALL_OW 70
2064: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2065: LD_VAR 0 6
2069: NOT
2070: PUSH
2071: LD_INT 22
2073: PUSH
2074: LD_VAR 0 1
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 25
2085: PUSH
2086: LD_INT 2
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 24
2095: PUSH
2096: LD_INT 250
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PPUSH
2108: CALL_OW 69
2112: NOT
2113: AND
2114: IFFALSE 2118
// exit ;
2116: GO 2300
// if buildings_list > 0 and engineerOkInside then
2118: LD_VAR 0 6
2122: PUSH
2123: LD_INT 0
2125: GREATER
2126: PUSH
2127: LD_VAR 0 8
2131: AND
2132: IFFALSE 2143
// ComExitBuilding ( engineerOkInside ) ;
2134: LD_VAR 0 8
2138: PPUSH
2139: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2143: LD_VAR 0 6
2147: PUSH
2148: LD_INT 0
2150: GREATER
2151: PUSH
2152: LD_VAR 0 9
2156: PUSH
2157: LD_INT 0
2159: GREATER
2160: AND
2161: IFFALSE 2181
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2163: LD_VAR 0 9
2167: PPUSH
2168: LD_VAR 0 6
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2181: LD_VAR 0 6
2185: PUSH
2186: LD_INT 0
2188: EQUAL
2189: PUSH
2190: LD_VAR 0 4
2194: PUSH
2195: LD_INT 0
2197: EQUAL
2198: AND
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: LD_INT 0
2207: GREATER
2208: AND
2209: IFFALSE 2225
// ComEnterUnit ( engineerOkOutside , building ) ;
2211: LD_VAR 0 9
2215: PPUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2225: LD_VAR 0 9
2229: PUSH
2230: LD_INT 0
2232: GREATER
2233: PUSH
2234: LD_VAR 0 6
2238: PUSH
2239: LD_INT 0
2241: EQUAL
2242: AND
2243: PUSH
2244: LD_VAR 0 4
2248: PUSH
2249: LD_INT 0
2251: GREATER
2252: AND
2253: IFFALSE 2300
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2255: LD_VAR 0 9
2259: PPUSH
2260: LD_VAR 0 4
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PPUSH
2269: LD_VAR 0 4
2273: PUSH
2274: LD_INT 2
2276: ARRAY
2277: PPUSH
2278: LD_VAR 0 4
2282: PUSH
2283: LD_INT 3
2285: ARRAY
2286: PPUSH
2287: LD_VAR 0 4
2291: PUSH
2292: LD_INT 4
2294: ARRAY
2295: PPUSH
2296: CALL_OW 145
// end ;
2300: LD_VAR 0 5
2304: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2316: LD_ADDR_VAR 0 6
2320: PUSH
2321: LD_INT 22
2323: PUSH
2324: LD_VAR 0 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 25
2335: PUSH
2336: LD_INT 4
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 23
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 24
2355: PUSH
2356: LD_INT 251
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 69
2373: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2374: LD_ADDR_VAR 0 7
2378: PUSH
2379: LD_VAR 0 3
2383: PPUSH
2384: LD_INT 22
2386: PUSH
2387: LD_VAR 0 1
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 23
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 25
2408: PUSH
2409: LD_INT 4
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 50
2418: PUSH
2419: EMPTY
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 70
2432: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2433: LD_ADDR_VAR 0 10
2437: PUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 22
2445: PUSH
2446: LD_VAR 0 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 21
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 3
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 24
2487: PUSH
2488: LD_INT 750
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: PPUSH
2505: CALL_OW 70
2509: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2510: LD_ADDR_VAR 0 11
2514: PUSH
2515: LD_VAR 0 2
2519: PPUSH
2520: LD_INT 22
2522: PUSH
2523: LD_VAR 0 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 1
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 25
2547: PUSH
2548: LD_INT 3
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 3
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 1000
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 70
2586: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2587: LD_VAR 0 10
2591: NOT
2592: PUSH
2593: LD_VAR 0 11
2597: NOT
2598: AND
2599: PUSH
2600: LD_VAR 0 6
2604: NOT
2605: AND
2606: IFFALSE 2610
// exit ;
2608: GO 2844
// if damageUnits > 0 and sci_list > 0 then
2610: LD_VAR 0 10
2614: PUSH
2615: LD_INT 0
2617: GREATER
2618: PUSH
2619: LD_VAR 0 6
2623: PUSH
2624: LD_INT 0
2626: GREATER
2627: AND
2628: IFFALSE 2644
// ComMoveToArea ( damageUnits , healArea ) ;
2630: LD_VAR 0 10
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2644: LD_VAR 0 11
2648: PUSH
2649: LD_INT 0
2651: GREATER
2652: PUSH
2653: LD_VAR 0 6
2657: PUSH
2658: LD_INT 0
2660: GREATER
2661: AND
2662: IFFALSE 2673
// ComExitBuilding ( sci_list ) ;
2664: LD_VAR 0 6
2668: PPUSH
2669: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2673: LD_VAR 0 11
2677: PUSH
2678: LD_INT 0
2680: GREATER
2681: PUSH
2682: LD_VAR 0 7
2686: PUSH
2687: LD_INT 0
2689: GREATER
2690: AND
2691: IFFALSE 2711
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2693: LD_VAR 0 7
2697: PPUSH
2698: LD_VAR 0 11
2702: PUSH
2703: LD_INT 1
2705: ARRAY
2706: PPUSH
2707: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2711: LD_VAR 0 10
2715: PUSH
2716: LD_INT 0
2718: EQUAL
2719: PUSH
2720: LD_VAR 0 11
2724: PUSH
2725: LD_INT 0
2727: EQUAL
2728: AND
2729: PUSH
2730: LD_VAR 0 7
2734: PUSH
2735: LD_INT 0
2737: GREATER
2738: AND
2739: IFFALSE 2844
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2741: LD_ADDR_VAR 0 12
2745: PUSH
2746: LD_INT 22
2748: PUSH
2749: LD_VAR 0 1
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 21
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 30
2770: PUSH
2771: LD_INT 8
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2788: LD_ADDR_VAR 0 13
2792: PUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_VAR 0 12
2800: PPUSH
2801: CALL_OW 12
2805: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2806: LD_VAR 0 7
2810: PPUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 60
2816: PUSH
2817: EMPTY
2818: LIST
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PPUSH
2829: LD_VAR 0 12
2833: PUSH
2834: LD_VAR 0 13
2838: ARRAY
2839: PPUSH
2840: CALL_OW 120
// end ; end ;
2844: LD_VAR 0 5
2848: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2849: LD_INT 0
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
// tmpTab = [ ] ;
2855: LD_ADDR_VAR 0 6
2859: PUSH
2860: EMPTY
2861: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2862: LD_INT 22
2864: PUSH
2865: LD_VAR 0 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 30
2876: PUSH
2877: LD_INT 32
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 0
2895: GREATER
2896: IFFALSE 2979
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: LD_INT 22
2905: PUSH
2906: LD_VAR 0 1
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2977
// begin for j in UnitsInside ( i ) do
2937: LD_ADDR_VAR 0 5
2941: PUSH
2942: LD_VAR 0 4
2946: PPUSH
2947: CALL_OW 313
2951: PUSH
2952: FOR_IN
2953: IFFALSE 2973
// tmpTab = tmpTab ^ j ;
2955: LD_ADDR_VAR 0 6
2959: PUSH
2960: LD_VAR 0 6
2964: PUSH
2965: LD_VAR 0 5
2969: ADD
2970: ST_TO_ADDR
2971: GO 2952
2973: POP
2974: POP
// end ;
2975: GO 2934
2977: POP
2978: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2979: LD_VAR 0 6
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: CALL_OW 250
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: CALL_OW 251
3003: PPUSH
3004: CALL_OW 114
// end ;
3008: LD_VAR 0 3
3012: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3013: LD_INT 0
3015: PPUSH
3016: PPUSH
3017: PPUSH
3018: PPUSH
// enable ;
3019: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3020: LD_ADDR_VAR 0 7
3024: PUSH
3025: LD_VAR 0 3
3029: PPUSH
3030: CALL_OW 435
3034: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3035: LD_ADDR_VAR 0 6
3039: PUSH
3040: LD_INT 22
3042: PUSH
3043: LD_VAR 0 1
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 34
3054: PUSH
3055: LD_VAR 0 2
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 69
3072: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3073: LD_VAR 0 6
3077: PUSH
3078: LD_INT 0
3080: GREATER
3081: PUSH
3082: LD_VAR 0 3
3086: PPUSH
3087: CALL_OW 435
3091: AND
3092: PUSH
3093: LD_VAR 0 7
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3151
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3104: LD_VAR 0 6
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: LD_VAR 0 7
3117: PUSH
3118: LD_INT 1
3120: ARRAY
3121: PPUSH
3122: LD_VAR 0 7
3126: PUSH
3127: LD_INT 2
3129: ARRAY
3130: PPUSH
3131: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3135: LD_VAR 0 6
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: LD_INT 100
3146: PPUSH
3147: CALL_OW 240
// end ; end ;
3151: LD_VAR 0 4
3155: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_INT 22
3170: PUSH
3171: LD_VAR 0 1
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 30
3185: PUSH
3186: LD_INT 31
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 30
3195: PUSH
3196: LD_INT 32
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 33
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 30
3215: PUSH
3216: LD_INT 4
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 30
3225: PUSH
3226: LD_INT 5
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PPUSH
3245: CALL_OW 69
3249: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3250: LD_ADDR_VAR 0 7
3254: PUSH
3255: LD_INT 22
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 21
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 58
3279: PUSH
3280: EMPTY
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PPUSH
3288: CALL_OW 69
3292: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3293: LD_VAR 0 6
3297: PUSH
3298: LD_INT 0
3300: GREATER
3301: PUSH
3302: LD_VAR 0 7
3306: PUSH
3307: LD_INT 0
3309: GREATER
3310: AND
3311: IFFALSE 3381
// begin for i in turretsList do
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: FOR_IN
3324: IFFALSE 3379
// begin for j in enemyBuildings do
3326: LD_ADDR_VAR 0 5
3330: PUSH
3331: LD_VAR 0 7
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3375
// begin if GetDistUnits ( i , j ) < 20 then
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: CALL_OW 296
3353: PUSH
3354: LD_INT 20
3356: LESS
3357: IFFALSE 3373
// begin ComAttackUnit ( i , j ) ;
3359: LD_VAR 0 4
3363: PPUSH
3364: LD_VAR 0 5
3368: PPUSH
3369: CALL_OW 115
// end ; end ;
3373: GO 3336
3375: POP
3376: POP
// end ;
3377: GO 3323
3379: POP
3380: POP
// end ; end ;
3381: LD_VAR 0 3
3385: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
// for i = 1 to vehCount do
3390: LD_ADDR_VAR 0 9
3394: PUSH
3395: DOUBLE
3396: LD_INT 1
3398: DEC
3399: ST_TO_ADDR
3400: LD_VAR 0 3
3404: PUSH
3405: FOR_TO
3406: IFFALSE 3453
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3408: LD_VAR 0 2
3412: PPUSH
3413: LD_VAR 0 7
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_VAR 0 6
3427: PPUSH
3428: LD_VAR 0 4
3432: PUSH
3433: LD_INT 1
3435: PPUSH
3436: LD_VAR 0 4
3440: PPUSH
3441: CALL_OW 12
3445: ARRAY
3446: PPUSH
3447: CALL_OW 185
3451: GO 3405
3453: POP
3454: POP
// end ;
3455: LD_VAR 0 8
3459: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3468: LD_EXP 11
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: LD_INT 3
3478: PUSH
3479: LD_INT 4
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: GREATEREQUAL
3493: PUSH
3494: LD_EXP 12
3498: PUSH
3499: LD_INT 1
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: PUSH
3513: LD_OWVAR 67
3517: ARRAY
3518: GREATEREQUAL
3519: AND
3520: IFFALSE 3781
// begin repeat wait ( 0 0$1 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// for j in russianTanks do
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: LD_EXP 11
3538: PUSH
3539: FOR_IN
3540: IFFALSE 3769
// begin if GetSide ( j ) <> side then
3542: LD_VAR 0 4
3546: PPUSH
3547: CALL_OW 255
3551: PUSH
3552: LD_VAR 0 1
3556: NONEQUAL
3557: IFFALSE 3570
// begin ComStop ( j ) ;
3559: LD_VAR 0 4
3563: PPUSH
3564: CALL_OW 141
// continue ;
3568: GO 3539
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_INT 81
3577: PUSH
3578: LD_VAR 0 1
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 101
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PPUSH
3601: CALL_OW 69
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL_OW 74
3615: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3616: LD_ADDR_VAR 0 7
3620: PUSH
3621: LD_INT 81
3623: PUSH
3624: LD_VAR 0 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 101
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 59
3648: PUSH
3649: EMPTY
3650: LIST
3651: PUSH
3652: LD_INT 21
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 21
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PPUSH
3691: LD_VAR 0 4
3695: PPUSH
3696: CALL_OW 74
3700: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3701: LD_VAR 0 4
3705: PPUSH
3706: LD_VAR 0 6
3710: PPUSH
3711: CALL_OW 296
3715: PUSH
3716: LD_INT 8
3718: PLUS
3719: PUSH
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 7
3729: PPUSH
3730: CALL_OW 296
3734: LESS
3735: IFFALSE 3753
// ComAttackUnit ( j , target1 ) else
3737: LD_VAR 0 4
3741: PPUSH
3742: LD_VAR 0 6
3746: PPUSH
3747: CALL_OW 115
3751: GO 3767
// ComAttackUnit ( j , target2 ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: LD_VAR 0 7
3762: PPUSH
3763: CALL_OW 115
// end ;
3767: GO 3539
3769: POP
3770: POP
// until russianTanks = 0 ;
3771: LD_EXP 11
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3522
// end ; end ;
3781: LD_VAR 0 2
3785: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3786: LD_INT 0
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3794: LD_ADDR_VAR 0 6
3798: PUSH
3799: LD_INT 22
3801: PUSH
3802: LD_VAR 0 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 25
3813: PUSH
3814: LD_INT 9
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3830: LD_ADDR_VAR 0 7
3834: PUSH
3835: LD_INT 81
3837: PUSH
3838: LD_VAR 0 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 21
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: CALL_OW 12
3888: ST_TO_ADDR
// for i = 1 to list do
3889: LD_ADDR_VAR 0 5
3893: PUSH
3894: DOUBLE
3895: LD_INT 1
3897: DEC
3898: ST_TO_ADDR
3899: LD_VAR 0 6
3903: PUSH
3904: FOR_TO
3905: IFFALSE 4107
// for ta in filter do
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_VAR 0 7
3916: PUSH
3917: FOR_IN
3918: IFFALSE 4103
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3920: LD_VAR 0 6
3924: PUSH
3925: LD_VAR 0 5
3929: ARRAY
3930: PPUSH
3931: LD_VAR 0 3
3935: PPUSH
3936: CALL_OW 296
3940: PUSH
3941: LD_INT 15
3943: LESSEQUAL
3944: IFFALSE 4101
// begin case c of 1 :
3946: LD_VAR 0 4
3950: PUSH
3951: LD_INT 1
3953: DOUBLE
3954: EQUAL
3955: IFTRUE 3959
3957: GO 3997
3959: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3960: LD_VAR 0 6
3964: PUSH
3965: LD_VAR 0 5
3969: ARRAY
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 250
3980: PPUSH
3981: LD_VAR 0 3
3985: PPUSH
3986: CALL_OW 251
3990: PPUSH
3991: CALL_OW 154
3995: GO 4101
3997: LD_INT 2
3999: DOUBLE
4000: EQUAL
4001: IFTRUE 4005
4003: GO 4069
4005: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4006: LD_VAR 0 6
4010: PUSH
4011: LD_VAR 0 5
4015: ARRAY
4016: PPUSH
4017: LD_VAR 0 3
4021: PPUSH
4022: CALL_OW 250
4026: PUSH
4027: LD_INT 1
4029: NEG
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: CALL_OW 12
4038: PLUS
4039: PPUSH
4040: LD_VAR 0 3
4044: PPUSH
4045: CALL_OW 251
4049: PUSH
4050: LD_INT 1
4052: NEG
4053: PPUSH
4054: LD_INT 1
4056: PPUSH
4057: CALL_OW 12
4061: PLUS
4062: PPUSH
4063: CALL_OW 153
4067: GO 4101
4069: LD_INT 3
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4077
4075: GO 4100
4077: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4078: LD_VAR 0 6
4082: PUSH
4083: LD_VAR 0 5
4087: ARRAY
4088: PPUSH
4089: LD_VAR 0 3
4093: PPUSH
4094: CALL_OW 115
4098: GO 4101
4100: POP
// end ; end ;
4101: GO 3917
4103: POP
4104: POP
4105: GO 3904
4107: POP
4108: POP
// end ;
4109: LD_VAR 0 2
4113: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
4119: LD_EXP 11
4123: PUSH
4124: LD_INT 1
4126: GREATEREQUAL
4127: PUSH
4128: LD_EXP 12
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: LD_INT 2
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: GREATEREQUAL
4153: AND
4154: IFFALSE 4293
// repeat wait ( 0 0$3 ) ;
4156: LD_INT 105
4158: PPUSH
4159: CALL_OW 67
// if russianTimeLapsers > 0 then
4163: LD_EXP 12
4167: PUSH
4168: LD_INT 0
4170: GREATER
4171: IFFALSE 4283
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_EXP 12
4182: PPUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 60
4188: PUSH
4189: EMPTY
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 72
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4281
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4204: LD_ADDR_VAR 0 4
4208: PUSH
4209: LD_INT 81
4211: PUSH
4212: LD_VAR 0 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 101
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PPUSH
4240: LD_VAR 0 3
4244: PPUSH
4245: CALL_OW 74
4249: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_VAR 0 4
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_VAR 0 4
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ;
4279: GO 4201
4281: POP
4282: POP
// until russianTimeLapsers = 0 ;
4283: LD_EXP 12
4287: PUSH
4288: LD_INT 0
4290: EQUAL
4291: IFFALSE 4156
// end ;
4293: LD_VAR 0 2
4297: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4298: LD_INT 0
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4306: LD_ADDR_VAR 0 7
4310: PUSH
4311: LD_VAR 0 2
4315: PPUSH
4316: LD_INT 22
4318: PUSH
4319: LD_VAR 0 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 2
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 34
4340: PUSH
4341: LD_INT 52
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 70
4357: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: LD_INT 22
4370: PUSH
4371: LD_VAR 0 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 3
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 24
4395: PUSH
4396: LD_INT 1000
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: PPUSH
4415: CALL_OW 70
4419: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4420: LD_VAR 0 8
4424: PUSH
4425: LD_INT 0
4427: GREATER
4428: PUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: LD_INT 24
4436: PUSH
4437: LD_INT 750
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 72
4448: PUSH
4449: LD_INT 0
4451: GREATER
4452: AND
4453: IFFALSE 4473
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4455: LD_VAR 0 7
4459: PPUSH
4460: LD_VAR 0 8
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PPUSH
4469: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 0
4480: GREATER
4481: PUSH
4482: LD_VAR 0 8
4486: PUSH
4487: LD_INT 0
4489: EQUAL
4490: AND
4491: PUSH
4492: LD_EXP 10
4496: PUSH
4497: LD_INT 0
4499: GREATER
4500: AND
4501: IFFALSE 4548
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4503: LD_VAR 0 7
4507: PPUSH
4508: LD_EXP 10
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_EXP 10
4521: PUSH
4522: LD_INT 2
4524: ARRAY
4525: PPUSH
4526: LD_EXP 10
4530: PUSH
4531: LD_INT 3
4533: ARRAY
4534: PPUSH
4535: LD_EXP 10
4539: PUSH
4540: LD_INT 4
4542: ARRAY
4543: PPUSH
4544: CALL_OW 567
// end ; end_of_file
4548: LD_VAR 0 3
4552: RET
// every 0 0$1 do
4553: GO 4555
4555: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4556: LD_INT 3
4558: PPUSH
4559: LD_INT 14
4561: PPUSH
4562: LD_INT 3
4564: PPUSH
4565: CALL 1673 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4569: LD_INT 3
4571: PPUSH
4572: LD_INT 15
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL 1673 0 3
// end ;
4582: END
// every 0 0$1 trigger russianAI = 1 do
4583: LD_EXP 13
4587: PUSH
4588: LD_INT 1
4590: EQUAL
4591: IFFALSE 4704
4593: GO 4595
4595: DISABLE
// begin enable ;
4596: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4597: LD_INT 3
4599: PPUSH
4600: LD_INT 22
4602: PPUSH
4603: LD_INT 7
4605: PPUSH
4606: LD_EXP 10
4610: PPUSH
4611: CALL 1914 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4615: LD_INT 3
4617: PPUSH
4618: LD_INT 8
4620: PPUSH
4621: LD_INT 7
4623: PPUSH
4624: LD_INT 14
4626: PUSH
4627: LD_INT 15
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 1
4636: PPUSH
4637: LD_INT 2
4639: PPUSH
4640: CALL_OW 12
4644: ARRAY
4645: PPUSH
4646: CALL 2305 0 4
// AttackVehicles ( 3 ) ;
4650: LD_INT 3
4652: PPUSH
4653: CALL 3460 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4657: LD_INT 3
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: CALL 3156 0 2
// TimeLapsersAI ( 3 ) ;
4667: LD_INT 3
4669: PPUSH
4670: CALL 4114 0 1
// IntBazooka ( 3 ) ;
4674: LD_INT 3
4676: PPUSH
4677: CALL 3786 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4681: LD_INT 3
4683: PPUSH
4684: LD_INT 51
4686: PPUSH
4687: LD_INT 14
4689: PPUSH
4690: CALL 3013 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4694: LD_INT 3
4696: PPUSH
4697: LD_INT 7
4699: PPUSH
4700: CALL 4298 0 2
// end ;
4704: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4705: LD_INT 22
4707: PPUSH
4708: CALL_OW 303
4712: PUSH
4713: LD_INT 22
4715: PPUSH
4716: CALL_OW 255
4720: PUSH
4721: LD_INT 1
4723: EQUAL
4724: OR
4725: IFFALSE 4740
4727: GO 4729
4729: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4730: LD_INT 3
4732: PPUSH
4733: LD_INT 22
4735: PPUSH
4736: CALL 2849 0 2
4740: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 1
4748: EQUAL
4749: PUSH
4750: LD_INT 22
4752: PUSH
4753: LD_INT 3
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 21
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 50
4772: PUSH
4773: EMPTY
4774: LIST
4775: PUSH
4776: LD_INT 33
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 34
4791: PUSH
4792: LD_INT 46
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 34
4801: PUSH
4802: LD_INT 45
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 34
4811: PUSH
4812: LD_INT 44
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 34
4821: PUSH
4822: LD_INT 49
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 34
4831: PUSH
4832: LD_INT 47
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: PUSH
4859: LD_INT 0
4861: EQUAL
4862: AND
4863: IFFALSE 5050
4865: GO 4867
4867: DISABLE
// begin enable ;
4868: ENABLE
// if russianRocketsAvalaible = 1 then
4869: LD_EXP 14
4873: PUSH
4874: LD_INT 1
4876: EQUAL
4877: IFFALSE 4934
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: LD_INT 3
4887: PUSH
4888: LD_INT 4
4890: PUSH
4891: LD_INT 4
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: PUSH
4899: LD_OWVAR 67
4903: ARRAY
4904: PPUSH
4905: LD_INT 46
4907: PUSH
4908: LD_INT 45
4910: PUSH
4911: LD_INT 44
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 24
4927: PPUSH
4928: CALL 3386 0 7
4932: GO 4991
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: LD_INT 3
4942: PUSH
4943: LD_INT 4
4945: PUSH
4946: LD_INT 4
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_OWVAR 67
4958: ARRAY
4959: PPUSH
4960: LD_INT 46
4962: PUSH
4963: LD_INT 45
4965: PUSH
4966: LD_INT 44
4968: PUSH
4969: LD_INT 47
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 3
4983: PPUSH
4984: LD_INT 24
4986: PPUSH
4987: CALL 3386 0 7
// if russianTimeLapsers = 0 then
4991: LD_EXP 12
4995: PUSH
4996: LD_INT 0
4998: EQUAL
4999: IFFALSE 5050
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5001: LD_INT 3
5003: PPUSH
5004: LD_INT 40
5006: PPUSH
5007: LD_INT 1
5009: PUSH
5010: LD_INT 2
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PPUSH
5027: LD_INT 49
5029: PUSH
5030: LD_INT 49
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 3
5039: PPUSH
5040: LD_INT 3
5042: PPUSH
5043: LD_INT 24
5045: PPUSH
5046: CALL 3386 0 7
// end ; end_of_file
5050: END
// every 1 do var dec1 , dec2 ;
5051: GO 5053
5053: DISABLE
5054: LD_INT 0
5056: PPUSH
5057: PPUSH
// begin InGameOn ;
5058: CALL_OW 8
// SetBName ( us_depot , kappa ) ;
5062: LD_INT 48
5064: PPUSH
5065: LD_STRING kappa
5067: PPUSH
5068: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5072: LD_INT 95
5074: PPUSH
5075: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5079: LD_INT 95
5081: PPUSH
5082: LD_INT 30
5084: PPUSH
5085: LD_INT 11
5087: PPUSH
5088: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5092: LD_INT 30
5094: PPUSH
5095: LD_INT 11
5097: PPUSH
5098: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5102: LD_EXP 5
5106: PPUSH
5107: LD_STRING D1-Pow-1
5109: PPUSH
5110: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5114: LD_EXP 1
5118: PPUSH
5119: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5123: LD_EXP 1
5127: PPUSH
5128: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D1-JMM-1
5139: PPUSH
5140: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5144: LD_EXP 5
5148: PPUSH
5149: LD_STRING D1-Pow-2
5151: PPUSH
5152: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5156: LD_EXP 1
5160: PPUSH
5161: LD_STRING D1-JMM-2
5163: PPUSH
5164: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5168: LD_EXP 1
5172: PPUSH
5173: LD_INT 95
5175: PPUSH
5176: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5180: LD_STRING M1
5182: PPUSH
5183: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5187: LD_INT 35
5189: PPUSH
5190: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_INT 95
5201: PPUSH
5202: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5206: LD_INT 95
5208: PPUSH
5209: LD_INT 51
5211: PPUSH
5212: LD_INT 21
5214: PPUSH
5215: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5219: LD_INT 95
5221: PPUSH
5222: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5226: LD_INT 95
5228: PPUSH
5229: LD_INT 5
5231: PPUSH
5232: CALL_OW 308
5236: IFFALSE 5187
// if JMMGirl = 1 then
5238: LD_EXP 7
5242: PUSH
5243: LD_INT 1
5245: EQUAL
5246: IFFALSE 5547
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5248: LD_EXP 2
5252: PPUSH
5253: LD_STRING D2J-Joan-1
5255: PPUSH
5256: CALL_OW 94
// dec1 = Query1 ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: CALL 1272 0 0
5269: ST_TO_ADDR
// if dec1 = 1 then
5270: LD_VAR 0 1
5274: PUSH
5275: LD_INT 1
5277: EQUAL
5278: IFFALSE 5525
// begin ComExitVehicle ( JMM ) ;
5280: LD_EXP 1
5284: PPUSH
5285: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5289: LD_EXP 1
5293: PPUSH
5294: LD_STRING D2J-JMM-1
5296: PPUSH
5297: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5301: LD_EXP 2
5305: PPUSH
5306: LD_STRING D2J-Joan-2
5308: PPUSH
5309: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5313: LD_EXP 1
5317: PPUSH
5318: LD_STRING D2J-JMM-2
5320: PPUSH
5321: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5325: LD_EXP 2
5329: PPUSH
5330: LD_STRING D2J-Joan-3
5332: PPUSH
5333: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5337: LD_EXP 5
5341: PPUSH
5342: LD_STRING DPowell-Pow-1
5344: PPUSH
5345: CALL_OW 94
// dec2 = Query2 ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL 1327 0 0
5358: ST_TO_ADDR
// if dec2 = 1 then
5359: LD_VAR 0 2
5363: PUSH
5364: LD_INT 1
5366: EQUAL
5367: IFFALSE 5409
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5369: LD_EXP 1
5373: PPUSH
5374: LD_STRING D2Ja-JMM-1
5376: PPUSH
5377: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5381: LD_EXP 2
5385: PPUSH
5386: LD_STRING D2Ja-Joan-1
5388: PPUSH
5389: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5393: LD_EXP 1
5397: PPUSH
5398: LD_STRING D2Ja-JMM-2
5400: PPUSH
5401: CALL_OW 88
// InGameOff ;
5405: CALL_OW 9
// end ; if dec2 = 2 then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_INT 2
5416: EQUAL
5417: IFFALSE 5491
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5419: LD_EXP 1
5423: PPUSH
5424: LD_STRING D2Jb-JMM-1
5426: PPUSH
5427: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D2Jb-Joan-1
5438: PPUSH
5439: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D2Jb-JMM-2
5450: PPUSH
5451: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5455: LD_EXP 2
5459: PPUSH
5460: LD_STRING D2Jb-Joan-2
5462: PPUSH
5463: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5467: LD_EXP 1
5471: PPUSH
5472: LD_STRING D2Jb-JMM-3
5474: PPUSH
5475: CALL_OW 88
// fastEnd = 1 ;
5479: LD_ADDR_EXP 15
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// FinishMission ;
5487: CALL 9399 0 0
// end ; if dec2 = 3 then
5491: LD_VAR 0 2
5495: PUSH
5496: LD_INT 3
5498: EQUAL
5499: IFFALSE 5525
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5501: LD_EXP 2
5505: PPUSH
5506: LD_STRING D2Jc-Joan-1
5508: PPUSH
5509: CALL_OW 94
// fastEnd = 1 ;
5513: LD_ADDR_EXP 15
5517: PUSH
5518: LD_INT 1
5520: ST_TO_ADDR
// FinishMission ;
5521: CALL 9399 0 0
// end ; end ; if dec1 = 2 then
5525: LD_VAR 0 1
5529: PUSH
5530: LD_INT 2
5532: EQUAL
5533: IFFALSE 5547
// begin fastEnd = 1 ;
5535: LD_ADDR_EXP 15
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// FinishMission ;
5543: CALL 9399 0 0
// end ; end ; if JMMGirl = 2 then
5547: LD_EXP 7
5551: PUSH
5552: LD_INT 2
5554: EQUAL
5555: IFFALSE 5868
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5557: LD_EXP 3
5561: PPUSH
5562: LD_STRING D2L-Lisa-1
5564: PPUSH
5565: CALL_OW 94
// dec1 = Query1 ;
5569: LD_ADDR_VAR 0 1
5573: PUSH
5574: CALL 1272 0 0
5578: ST_TO_ADDR
// if dec1 = 1 then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_INT 1
5586: EQUAL
5587: IFFALSE 5846
// begin ComExitVehicle ( JMM ) ;
5589: LD_EXP 1
5593: PPUSH
5594: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5598: LD_EXP 1
5602: PPUSH
5603: LD_STRING D2L-JMM-1
5605: PPUSH
5606: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5610: LD_EXP 3
5614: PPUSH
5615: LD_STRING D2L-Lisa-2
5617: PPUSH
5618: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_STRING D2L-JMM-2
5629: PPUSH
5630: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5634: LD_EXP 3
5638: PPUSH
5639: LD_STRING D2L-Lisa-3
5641: PPUSH
5642: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5646: LD_EXP 5
5650: PPUSH
5651: LD_STRING DPowell-Pow-1
5653: PPUSH
5654: CALL_OW 94
// dec2 = Query2 ;
5658: LD_ADDR_VAR 0 2
5662: PUSH
5663: CALL 1327 0 0
5667: ST_TO_ADDR
// if dec2 = 1 then
5668: LD_VAR 0 2
5672: PUSH
5673: LD_INT 1
5675: EQUAL
5676: IFFALSE 5742
// begin Say ( JMM , D2La-JMM-1 ) ;
5678: LD_EXP 1
5682: PPUSH
5683: LD_STRING D2La-JMM-1
5685: PPUSH
5686: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5690: LD_EXP 3
5694: PPUSH
5695: LD_STRING D2La-Lisa-1
5697: PPUSH
5698: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5702: LD_EXP 1
5706: PPUSH
5707: LD_STRING D2La-JMM-2
5709: PPUSH
5710: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5714: LD_EXP 3
5718: PPUSH
5719: LD_STRING D2La-Lisa-2
5721: PPUSH
5722: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_STRING D2La-JMM-3
5733: PPUSH
5734: CALL_OW 88
// InGameOff ;
5738: CALL_OW 9
// end ; if dec2 = 2 then
5742: LD_VAR 0 2
5746: PUSH
5747: LD_INT 2
5749: EQUAL
5750: IFFALSE 5812
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2Lb-JMM-1
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5764: LD_EXP 3
5768: PPUSH
5769: LD_STRING D2Lb-Lisa-1
5771: PPUSH
5772: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING D2Lb-JMM-2
5783: PPUSH
5784: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5788: LD_EXP 3
5792: PPUSH
5793: LD_STRING D2Lb-Lisa-2
5795: PPUSH
5796: CALL_OW 94
// fastEnd = 1 ;
5800: LD_ADDR_EXP 15
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// FinishMission ;
5808: CALL 9399 0 0
// end ; if dec2 = 3 then
5812: LD_VAR 0 2
5816: PUSH
5817: LD_INT 3
5819: EQUAL
5820: IFFALSE 5846
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5822: LD_EXP 3
5826: PPUSH
5827: LD_STRING D2Lc-Lisa-1
5829: PPUSH
5830: CALL_OW 94
// fastEnd = 1 ;
5834: LD_ADDR_EXP 15
5838: PUSH
5839: LD_INT 1
5841: ST_TO_ADDR
// FinishMission ;
5842: CALL 9399 0 0
// end ; end ; if dec1 = 2 then
5846: LD_VAR 0 1
5850: PUSH
5851: LD_INT 2
5853: EQUAL
5854: IFFALSE 5868
// begin fastEnd = 1 ;
5856: LD_ADDR_EXP 15
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// FinishMission ;
5864: CALL 9399 0 0
// end ; end ; if JMMGirl = 3 then
5868: LD_EXP 7
5872: PUSH
5873: LD_INT 3
5875: EQUAL
5876: IFFALSE 6093
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5878: LD_EXP 4
5882: PPUSH
5883: LD_STRING D2X-Con-1
5885: PPUSH
5886: CALL_OW 94
// dec1 = Query1 ;
5890: LD_ADDR_VAR 0 1
5894: PUSH
5895: CALL 1272 0 0
5899: ST_TO_ADDR
// if dec1 = 1 then
5900: LD_VAR 0 1
5904: PUSH
5905: LD_INT 1
5907: EQUAL
5908: IFFALSE 6071
// begin ComExitVehicle ( JMM ) ;
5910: LD_EXP 1
5914: PPUSH
5915: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5919: LD_EXP 1
5923: PPUSH
5924: LD_STRING D2X-JMM-1
5926: PPUSH
5927: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5931: LD_EXP 4
5935: PPUSH
5936: LD_STRING D2X-Con-2
5938: PPUSH
5939: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5943: LD_EXP 5
5947: PPUSH
5948: LD_STRING DPowell-Pow-1
5950: PPUSH
5951: CALL_OW 94
// dec2 = Query2 ;
5955: LD_ADDR_VAR 0 2
5959: PUSH
5960: CALL 1327 0 0
5964: ST_TO_ADDR
// if dec2 = 1 then
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: EQUAL
5973: IFFALSE 5991
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D2Xa-JMM-1
5982: PPUSH
5983: CALL_OW 88
// InGameOff ;
5987: CALL_OW 9
// end ; if dec2 = 2 then
5991: LD_VAR 0 2
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6037
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6001: LD_EXP 1
6005: PPUSH
6006: LD_STRING D2Xb-JMM-1
6008: PPUSH
6009: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6013: LD_EXP 4
6017: PPUSH
6018: LD_STRING D2Xb-Con-1
6020: PPUSH
6021: CALL_OW 94
// fastEnd = 1 ;
6025: LD_ADDR_EXP 15
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// FinishMission ;
6033: CALL 9399 0 0
// end ; if dec2 = 3 then
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: EQUAL
6045: IFFALSE 6071
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6047: LD_EXP 4
6051: PPUSH
6052: LD_STRING D2Xc-Con-1
6054: PPUSH
6055: CALL_OW 94
// fastEnd = 1 ;
6059: LD_ADDR_EXP 15
6063: PUSH
6064: LD_INT 1
6066: ST_TO_ADDR
// FinishMission ;
6067: CALL 9399 0 0
// end ; end ; if dec1 = 2 then
6071: LD_VAR 0 1
6075: PUSH
6076: LD_INT 2
6078: EQUAL
6079: IFFALSE 6093
// begin fastEnd = 1 ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// FinishMission ;
6089: CALL 9399 0 0
// end ; end ; if fastEnd = 1 then
6093: LD_EXP 15
6097: PUSH
6098: LD_INT 1
6100: EQUAL
6101: IFFALSE 6107
// FinishMission ;
6103: CALL 9399 0 0
// end ;
6107: PPOPN 2
6109: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6110: LD_EXP 1
6114: PPUSH
6115: LD_INT 6
6117: PPUSH
6118: CALL_OW 308
6122: IFFALSE 6888
6124: GO 6126
6126: DISABLE
// begin InGameOn ;
6127: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6131: LD_INT 35
6133: PPUSH
6134: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6138: LD_EXP 1
6142: PPUSH
6143: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_INT 62
6154: PPUSH
6155: LD_INT 104
6157: PPUSH
6158: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6162: LD_EXP 1
6166: PPUSH
6167: LD_EXP 2
6171: PPUSH
6172: CALL_OW 296
6176: PUSH
6177: LD_INT 4
6179: LESS
6180: PUSH
6181: LD_EXP 1
6185: PPUSH
6186: LD_EXP 3
6190: PPUSH
6191: CALL_OW 296
6195: PUSH
6196: LD_INT 4
6198: LESS
6199: OR
6200: PUSH
6201: LD_EXP 1
6205: PPUSH
6206: LD_EXP 4
6210: PPUSH
6211: CALL_OW 296
6215: PUSH
6216: LD_INT 4
6218: LESS
6219: OR
6220: IFFALSE 6131
// case JMMGirl of 1 :
6222: LD_EXP 7
6226: PUSH
6227: LD_INT 1
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6447
6235: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6236: LD_INT 22
6238: PUSH
6239: LD_INT 4
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6258: LD_EXP 2
6262: PPUSH
6263: LD_EXP 1
6267: PPUSH
6268: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6272: LD_EXP 1
6276: PPUSH
6277: LD_EXP 2
6281: PPUSH
6282: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6286: LD_EXP 2
6290: PUSH
6291: LD_EXP 1
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 87
// wait ( 0 0$1 ) ;
6304: LD_INT 35
6306: PPUSH
6307: CALL_OW 67
// DialogueOn ;
6311: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6315: LD_EXP 2
6319: PPUSH
6320: LD_STRING D3J-Joan-1
6322: PPUSH
6323: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6327: LD_EXP 1
6331: PPUSH
6332: LD_STRING D3J-JMM-1
6334: PPUSH
6335: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6339: LD_EXP 2
6343: PPUSH
6344: LD_STRING D3J-Joan-2
6346: PPUSH
6347: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6351: LD_EXP 1
6355: PPUSH
6356: LD_STRING D3J-JMM-2
6358: PPUSH
6359: CALL_OW 88
// wait ( 0 0$1 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D4-JMM-1
6377: PPUSH
6378: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6382: LD_EXP 2
6386: PPUSH
6387: LD_STRING D4-Joan-1
6389: PPUSH
6390: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D4-JMM-2
6401: PPUSH
6402: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6406: LD_EXP 2
6410: PPUSH
6411: LD_STRING D4-Joan-2
6413: PPUSH
6414: CALL_OW 88
// DialogueOff ;
6418: CALL_OW 7
// InGameOff ;
6422: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6426: LD_STRING M2J
6428: PPUSH
6429: CALL_OW 337
// SaveForQuickRestart ;
6433: CALL_OW 22
// russianAI = 1 ;
6437: LD_ADDR_EXP 13
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// end ; 2 :
6445: GO 6888
6447: LD_INT 2
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6667
6455: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6456: LD_INT 22
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PPUSH
6466: CALL_OW 69
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6478: LD_EXP 3
6482: PPUSH
6483: LD_EXP 1
6487: PPUSH
6488: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6492: LD_EXP 1
6496: PPUSH
6497: LD_EXP 3
6501: PPUSH
6502: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6506: LD_EXP 3
6510: PUSH
6511: LD_EXP 1
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 87
// wait ( 0 0$1 ) ;
6524: LD_INT 35
6526: PPUSH
6527: CALL_OW 67
// DialogueOn ;
6531: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6535: LD_EXP 3
6539: PPUSH
6540: LD_STRING D3L-Lisa-1
6542: PPUSH
6543: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6547: LD_EXP 1
6551: PPUSH
6552: LD_STRING D3L-JMM-1
6554: PPUSH
6555: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6559: LD_EXP 3
6563: PPUSH
6564: LD_STRING D3L-Lisa-2
6566: PPUSH
6567: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6571: LD_EXP 1
6575: PPUSH
6576: LD_STRING D3L-JMM-2
6578: PPUSH
6579: CALL_OW 88
// wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6590: LD_EXP 1
6594: PPUSH
6595: LD_STRING D4-JMM-1
6597: PPUSH
6598: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6602: LD_EXP 3
6606: PPUSH
6607: LD_STRING D4-Lisa-1
6609: PPUSH
6610: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6614: LD_EXP 1
6618: PPUSH
6619: LD_STRING D4-JMM-1
6621: PPUSH
6622: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6626: LD_EXP 3
6630: PPUSH
6631: LD_STRING D4-Lisa-2
6633: PPUSH
6634: CALL_OW 88
// DialogueOff ;
6638: CALL_OW 7
// InGameOff ;
6642: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6646: LD_STRING M2L
6648: PPUSH
6649: CALL_OW 337
// SaveForQuickRestart ;
6653: CALL_OW 22
// russianAI = 1 ;
6657: LD_ADDR_EXP 13
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// end ; 3 :
6665: GO 6888
6667: LD_INT 3
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6887
6675: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6676: LD_INT 22
6678: PUSH
6679: LD_INT 4
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 69
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6698: LD_EXP 4
6702: PPUSH
6703: LD_EXP 1
6707: PPUSH
6708: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6712: LD_EXP 1
6716: PPUSH
6717: LD_EXP 4
6721: PPUSH
6722: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6726: LD_EXP 2
6730: PUSH
6731: LD_EXP 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 87
// wait ( 0 0$1 ) ;
6744: LD_INT 35
6746: PPUSH
6747: CALL_OW 67
// DialogueOn ;
6751: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6755: LD_EXP 4
6759: PPUSH
6760: LD_STRING D3X-Con-1
6762: PPUSH
6763: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6767: LD_EXP 1
6771: PPUSH
6772: LD_STRING D3J-JMM-1
6774: PPUSH
6775: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6779: LD_EXP 4
6783: PPUSH
6784: LD_STRING D3J-Joan-2
6786: PPUSH
6787: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6791: LD_EXP 1
6795: PPUSH
6796: LD_STRING D3J-JMM-2
6798: PPUSH
6799: CALL_OW 88
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6810: LD_EXP 1
6814: PPUSH
6815: LD_STRING D4-JMM-1
6817: PPUSH
6818: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6822: LD_EXP 4
6826: PPUSH
6827: LD_STRING D4-Con-1
6829: PPUSH
6830: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6834: LD_EXP 1
6838: PPUSH
6839: LD_STRING D4-JMM-2
6841: PPUSH
6842: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6846: LD_EXP 4
6850: PPUSH
6851: LD_STRING D4-Con-2
6853: PPUSH
6854: CALL_OW 88
// DialogueOff ;
6858: CALL_OW 7
// InGameOff ;
6862: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6866: LD_STRING M2X
6868: PPUSH
6869: CALL_OW 337
// SaveForQuickRestart ;
6873: CALL_OW 22
// russianAI = 1 ;
6877: LD_ADDR_EXP 13
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// end ; end ;
6885: GO 6888
6887: POP
// end ;
6888: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6889: LD_INT 32
6891: PPUSH
6892: CALL_OW 306
6896: IFFALSE 7229
6898: GO 6900
6900: DISABLE
// begin case JMMGirl of 1 :
6901: LD_EXP 7
6905: PUSH
6906: LD_INT 1
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 7036
6914: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6915: LD_EXP 1
6919: PPUSH
6920: LD_STRING D6J-JMM-1
6922: PPUSH
6923: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6927: LD_STRING 13f_Denis
6929: PPUSH
6930: CALL_OW 28
6934: PUSH
6935: LD_INT 1
6937: EQUAL
6938: PUSH
6939: LD_STRING 13s_Denis
6941: PPUSH
6942: CALL_OW 28
6946: PUSH
6947: LD_INT 1
6949: EQUAL
6950: OR
6951: IFFALSE 6991
// begin Say ( Joan , D6J-Joan-1 ) ;
6953: LD_EXP 2
6957: PPUSH
6958: LD_STRING D6J-Joan-1
6960: PPUSH
6961: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6965: LD_EXP 1
6969: PPUSH
6970: LD_STRING D6J-JMM-2
6972: PPUSH
6973: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6977: LD_EXP 2
6981: PPUSH
6982: LD_STRING D6J-Joan-2
6984: PPUSH
6985: CALL_OW 88
// end else
6989: GO 7003
// begin Say ( Joan , D6J-Joan-2a ) ;
6991: LD_EXP 2
6995: PPUSH
6996: LD_STRING D6J-Joan-2a
6998: PPUSH
6999: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7003: LD_EXP 1
7007: PPUSH
7008: LD_STRING D6J-JMM-3
7010: PPUSH
7011: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7015: LD_EXP 2
7019: PPUSH
7020: LD_STRING D6J-Joan-3
7022: PPUSH
7023: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7027: LD_STRING M3
7029: PPUSH
7030: CALL_OW 337
// end ; 2 :
7034: GO 7229
7036: LD_INT 2
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7102
7044: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7045: LD_EXP 1
7049: PPUSH
7050: LD_STRING D6L-JMM-1
7052: PPUSH
7053: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7057: LD_EXP 3
7061: PPUSH
7062: LD_STRING D6L-Lisa-1
7064: PPUSH
7065: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7069: LD_EXP 1
7073: PPUSH
7074: LD_STRING D6L-JMM-2
7076: PPUSH
7077: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7081: LD_EXP 3
7085: PPUSH
7086: LD_STRING D6L-Lisa-2
7088: PPUSH
7089: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7093: LD_STRING M3
7095: PPUSH
7096: CALL_OW 337
// end ; 3 :
7100: GO 7229
7102: LD_INT 3
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7228
7110: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7111: LD_EXP 1
7115: PPUSH
7116: LD_STRING D6X-JMM-1
7118: PPUSH
7119: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7123: LD_EXP 4
7127: PPUSH
7128: LD_STRING D6X-Con-1
7130: PPUSH
7131: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7135: LD_EXP 1
7139: PPUSH
7140: LD_STRING D6X-JMM-2
7142: PPUSH
7143: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7147: LD_EXP 4
7151: PPUSH
7152: LD_STRING D6X-Con-2
7154: PPUSH
7155: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7159: LD_EXP 1
7163: PPUSH
7164: LD_STRING D6X-JMM-3
7166: PPUSH
7167: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7171: LD_EXP 4
7175: PPUSH
7176: LD_STRING D6X-Con-3
7178: PPUSH
7179: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7183: LD_EXP 1
7187: PPUSH
7188: LD_STRING D6X-JMM-4
7190: PPUSH
7191: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7195: LD_EXP 4
7199: PPUSH
7200: LD_STRING D6X-Con-4
7202: PPUSH
7203: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7207: LD_EXP 1
7211: PPUSH
7212: LD_STRING D6X-JMM-5
7214: PPUSH
7215: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7219: LD_STRING M3
7221: PPUSH
7222: CALL_OW 337
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7230: LD_INT 22
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 33
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 69
7258: PPUSH
7259: CALL_OW 306
7263: IFFALSE 7409
7265: GO 7267
7267: DISABLE
// begin case JMMGirl of 1 :
7268: LD_EXP 7
7272: PUSH
7273: LD_INT 1
7275: DOUBLE
7276: EQUAL
7277: IFTRUE 7281
7279: GO 7318
7281: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7282: LD_EXP 1
7286: PPUSH
7287: LD_STRING D5-JMM-1
7289: PPUSH
7290: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7294: LD_INT 77
7296: PPUSH
7297: LD_INT 87
7299: PPUSH
7300: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7304: LD_EXP 2
7308: PPUSH
7309: LD_STRING D5-Joan-1
7311: PPUSH
7312: CALL_OW 88
// end ; 2 :
7316: GO 7409
7318: LD_INT 2
7320: DOUBLE
7321: EQUAL
7322: IFTRUE 7326
7324: GO 7363
7326: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7327: LD_EXP 1
7331: PPUSH
7332: LD_STRING D5-JMM-1
7334: PPUSH
7335: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7339: LD_INT 77
7341: PPUSH
7342: LD_INT 87
7344: PPUSH
7345: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7349: LD_EXP 3
7353: PPUSH
7354: LD_STRING D5-Lisa-1
7356: PPUSH
7357: CALL_OW 88
// end ; 3 :
7361: GO 7409
7363: LD_INT 3
7365: DOUBLE
7366: EQUAL
7367: IFTRUE 7371
7369: GO 7408
7371: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7372: LD_EXP 1
7376: PPUSH
7377: LD_STRING D5-JMM-1
7379: PPUSH
7380: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7384: LD_INT 77
7386: PPUSH
7387: LD_INT 87
7389: PPUSH
7390: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7394: LD_EXP 4
7398: PPUSH
7399: LD_STRING D5-Con-1
7401: PPUSH
7402: CALL_OW 88
// end ; end ;
7406: GO 7409
7408: POP
// end ;
7409: END
// every 15 15$0 do
7410: GO 7412
7412: DISABLE
// begin DialogueOn ;
7413: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7417: LD_EXP 5
7421: PPUSH
7422: LD_STRING D7-Pow-1
7424: PPUSH
7425: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D7-JMM-1
7436: PPUSH
7437: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7441: LD_EXP 5
7445: PPUSH
7446: LD_STRING D7-Pow-2
7448: PPUSH
7449: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D7-JMM-2
7460: PPUSH
7461: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7465: LD_EXP 5
7469: PPUSH
7470: LD_STRING D7-Pow-3
7472: PPUSH
7473: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7477: LD_EXP 1
7481: PPUSH
7482: LD_STRING D7-JMM-3
7484: PPUSH
7485: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7489: LD_EXP 5
7493: PPUSH
7494: LD_STRING D7-Pow-4
7496: PPUSH
7497: CALL_OW 94
// DialogueOff ;
7501: CALL_OW 7
// end ; end_of_file
7505: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 255
7515: PUSH
7516: LD_INT 3
7518: EQUAL
7519: IFFALSE 7593
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7521: LD_ADDR_EXP 10
7525: PUSH
7526: LD_EXP 10
7530: PPUSH
7531: LD_INT 1
7533: PPUSH
7534: CALL_OW 3
7538: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7539: LD_ADDR_EXP 10
7543: PUSH
7544: LD_EXP 10
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: CALL_OW 3
7556: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7557: LD_ADDR_EXP 10
7561: PUSH
7562: LD_EXP 10
7566: PPUSH
7567: LD_INT 1
7569: PPUSH
7570: CALL_OW 3
7574: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7575: LD_ADDR_EXP 10
7579: PUSH
7580: LD_EXP 10
7584: PPUSH
7585: LD_INT 1
7587: PPUSH
7588: CALL_OW 3
7592: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 255
7602: PUSH
7603: LD_INT 3
7605: EQUAL
7606: PUSH
7607: LD_VAR 0 1
7611: PPUSH
7612: CALL_OW 266
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: PUSH
7621: LD_VAR 0 1
7625: PPUSH
7626: CALL_OW 266
7630: PUSH
7631: LD_INT 2
7633: EQUAL
7634: OR
7635: PUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 266
7645: PUSH
7646: LD_INT 4
7648: EQUAL
7649: OR
7650: PUSH
7651: EMPTY
7652: LIST
7653: AND
7654: IFFALSE 7665
// ComUpgrade ( building ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: LD_INT 3
7677: EQUAL
7678: PUSH
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 266
7688: PUSH
7689: LD_INT 32
7691: EQUAL
7692: AND
7693: IFFALSE 7734
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_INT 42
7702: PUSH
7703: LD_INT 43
7705: PUSH
7706: LD_INT 44
7708: PUSH
7709: LD_INT 46
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 1
7720: PPUSH
7721: LD_INT 4
7723: PPUSH
7724: CALL_OW 12
7728: ARRAY
7729: PPUSH
7730: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7734: LD_VAR 0 1
7738: PPUSH
7739: CALL_OW 255
7743: PUSH
7744: LD_INT 3
7746: EQUAL
7747: PUSH
7748: LD_VAR 0 1
7752: PPUSH
7753: CALL_OW 266
7757: PUSH
7758: LD_INT 33
7760: EQUAL
7761: AND
7762: IFFALSE 7803
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7764: LD_VAR 0 1
7768: PPUSH
7769: LD_INT 42
7771: PUSH
7772: LD_INT 43
7774: PUSH
7775: LD_INT 44
7777: PUSH
7778: LD_INT 46
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 1
7789: PPUSH
7790: LD_INT 4
7792: PPUSH
7793: CALL_OW 12
7797: ARRAY
7798: PPUSH
7799: CALL_OW 208
// end ;
7803: PPOPN 1
7805: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 255
7815: PUSH
7816: LD_INT 3
7818: EQUAL
7819: PUSH
7820: LD_VAR 0 1
7824: PPUSH
7825: CALL_OW 247
7829: PUSH
7830: LD_INT 3
7832: EQUAL
7833: AND
7834: IFFALSE 8526
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 266
7845: PUSH
7846: LD_INT 31
7848: EQUAL
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 266
7859: PUSH
7860: LD_INT 32
7862: EQUAL
7863: OR
7864: PUSH
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 266
7874: PUSH
7875: LD_INT 36
7877: EQUAL
7878: OR
7879: PUSH
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 266
7889: PUSH
7890: LD_INT 0
7892: EQUAL
7893: OR
7894: PUSH
7895: LD_VAR 0 1
7899: PPUSH
7900: CALL_OW 266
7904: PUSH
7905: LD_INT 24
7907: EQUAL
7908: OR
7909: PUSH
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 266
7919: PUSH
7920: LD_INT 17
7922: EQUAL
7923: OR
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 266
7934: PUSH
7935: LD_INT 25
7937: EQUAL
7938: OR
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 266
7949: PUSH
7950: LD_INT 19
7952: EQUAL
7953: OR
7954: PUSH
7955: LD_VAR 0 1
7959: PPUSH
7960: CALL_OW 266
7964: PUSH
7965: LD_INT 20
7967: EQUAL
7968: OR
7969: PUSH
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 266
7979: PUSH
7980: LD_INT 18
7982: EQUAL
7983: OR
7984: PUSH
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 266
7994: PUSH
7995: LD_INT 21
7997: EQUAL
7998: OR
7999: PUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 266
8009: PUSH
8010: LD_INT 23
8012: EQUAL
8013: OR
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: CALL_OW 266
8024: PUSH
8025: LD_INT 16
8027: EQUAL
8028: OR
8029: PUSH
8030: LD_VAR 0 1
8034: PPUSH
8035: CALL_OW 266
8039: PUSH
8040: LD_INT 6
8042: EQUAL
8043: OR
8044: PUSH
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 266
8054: PUSH
8055: LD_INT 29
8057: EQUAL
8058: OR
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 266
8069: PUSH
8070: LD_INT 26
8072: EQUAL
8073: OR
8074: PUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 266
8084: PUSH
8085: LD_INT 30
8087: EQUAL
8088: OR
8089: PUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 266
8099: PUSH
8100: LD_INT 28
8102: EQUAL
8103: OR
8104: PUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 266
8114: PUSH
8115: LD_INT 27
8117: EQUAL
8118: OR
8119: PUSH
8120: LD_VAR 0 1
8124: PPUSH
8125: CALL_OW 266
8129: PUSH
8130: LD_INT 33
8132: EQUAL
8133: OR
8134: PUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 266
8144: PUSH
8145: LD_INT 2
8147: EQUAL
8148: OR
8149: PUSH
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 266
8159: PUSH
8160: LD_INT 4
8162: EQUAL
8163: OR
8164: IFFALSE 8250
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8166: LD_ADDR_EXP 10
8170: PUSH
8171: LD_EXP 10
8175: PUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 266
8185: ADD
8186: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8187: LD_ADDR_EXP 10
8191: PUSH
8192: LD_EXP 10
8196: PUSH
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 250
8206: ADD
8207: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8208: LD_ADDR_EXP 10
8212: PUSH
8213: LD_EXP 10
8217: PUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 251
8227: ADD
8228: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8229: LD_ADDR_EXP 10
8233: PUSH
8234: LD_EXP 10
8238: PUSH
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 254
8248: ADD
8249: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 266
8259: PUSH
8260: LD_INT 1
8262: EQUAL
8263: IFFALSE 8342
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8265: LD_ADDR_EXP 10
8269: PUSH
8270: LD_EXP 10
8274: PUSH
8275: LD_INT 0
8277: ADD
8278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8279: LD_ADDR_EXP 10
8283: PUSH
8284: LD_EXP 10
8288: PUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL_OW 250
8298: ADD
8299: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8300: LD_ADDR_EXP 10
8304: PUSH
8305: LD_EXP 10
8309: PUSH
8310: LD_VAR 0 1
8314: PPUSH
8315: CALL_OW 251
8319: ADD
8320: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8321: LD_ADDR_EXP 10
8325: PUSH
8326: LD_EXP 10
8330: PUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 254
8340: ADD
8341: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL_OW 266
8351: PUSH
8352: LD_INT 3
8354: EQUAL
8355: IFFALSE 8434
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8357: LD_ADDR_EXP 10
8361: PUSH
8362: LD_EXP 10
8366: PUSH
8367: LD_INT 2
8369: ADD
8370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8371: LD_ADDR_EXP 10
8375: PUSH
8376: LD_EXP 10
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 250
8390: ADD
8391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8392: LD_ADDR_EXP 10
8396: PUSH
8397: LD_EXP 10
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: CALL_OW 251
8411: ADD
8412: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8413: LD_ADDR_EXP 10
8417: PUSH
8418: LD_EXP 10
8422: PUSH
8423: LD_VAR 0 1
8427: PPUSH
8428: CALL_OW 254
8432: ADD
8433: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 266
8443: PUSH
8444: LD_INT 5
8446: EQUAL
8447: IFFALSE 8526
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8449: LD_ADDR_EXP 10
8453: PUSH
8454: LD_EXP 10
8458: PUSH
8459: LD_INT 4
8461: ADD
8462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8463: LD_ADDR_EXP 10
8467: PUSH
8468: LD_EXP 10
8472: PUSH
8473: LD_VAR 0 1
8477: PPUSH
8478: CALL_OW 250
8482: ADD
8483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8484: LD_ADDR_EXP 10
8488: PUSH
8489: LD_EXP 10
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 251
8503: ADD
8504: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8505: LD_ADDR_EXP 10
8509: PUSH
8510: LD_EXP 10
8514: PUSH
8515: LD_VAR 0 1
8519: PPUSH
8520: CALL_OW 254
8524: ADD
8525: ST_TO_ADDR
// end ; end ; end ;
8526: PPOPN 1
8528: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8529: LD_VAR 0 2
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: PUSH
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 40
8545: EQUAL
8546: OR
8547: IFFALSE 8671
// if GetSide ( vehicle ) = 3 then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: IFFALSE 8671
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 264
8573: PUSH
8574: LD_INT 47
8576: EQUAL
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 264
8587: PUSH
8588: LD_INT 46
8590: EQUAL
8591: OR
8592: PUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 264
8602: PUSH
8603: LD_INT 45
8605: EQUAL
8606: OR
8607: PUSH
8608: LD_VAR 0 1
8612: PPUSH
8613: CALL_OW 264
8617: PUSH
8618: LD_INT 44
8620: EQUAL
8621: OR
8622: IFFALSE 8640
// russianTanks = russianTanks ^ vehicle ;
8624: LD_ADDR_EXP 11
8628: PUSH
8629: LD_EXP 11
8633: PUSH
8634: LD_VAR 0 1
8638: ADD
8639: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8640: LD_VAR 0 1
8644: PPUSH
8645: CALL_OW 264
8649: PUSH
8650: LD_INT 49
8652: EQUAL
8653: IFFALSE 8671
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8655: LD_ADDR_EXP 12
8659: PUSH
8660: LD_EXP 12
8664: PUSH
8665: LD_VAR 0 1
8669: ADD
8670: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8671: LD_VAR 0 1
8675: PPUSH
8676: CALL_OW 255
8680: PUSH
8681: LD_INT 1
8683: EQUAL
8684: PUSH
8685: LD_VAR 0 1
8689: PPUSH
8690: CALL_OW 264
8694: PUSH
8695: LD_INT 10
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// amLaserCounter = amLaserCounter + 1 ;
8701: LD_ADDR_EXP 9
8705: PUSH
8706: LD_EXP 9
8710: PUSH
8711: LD_INT 1
8713: PLUS
8714: ST_TO_ADDR
// end ;
8715: PPOPN 2
8717: END
// on UnitGoesToRed ( unit ) do var i ;
8718: LD_INT 0
8720: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8721: LD_VAR 0 1
8725: PPUSH
8726: CALL_OW 255
8730: PUSH
8731: LD_INT 3
8733: EQUAL
8734: PUSH
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 247
8744: PUSH
8745: LD_INT 2
8747: EQUAL
8748: AND
8749: IFFALSE 8867
// begin if russianTanks > 0 then
8751: LD_EXP 11
8755: PUSH
8756: LD_INT 0
8758: GREATER
8759: IFFALSE 8809
// for i in russianTanks do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_EXP 11
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8807
// if i = unit then
8774: LD_VAR 0 2
8778: PUSH
8779: LD_VAR 0 1
8783: EQUAL
8784: IFFALSE 8805
// russianTanks = russianTanks diff [ unit ] ;
8786: LD_ADDR_EXP 11
8790: PUSH
8791: LD_EXP 11
8795: PUSH
8796: LD_VAR 0 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: DIFF
8804: ST_TO_ADDR
8805: GO 8771
8807: POP
8808: POP
// if russianTimeLapsers > 0 then
8809: LD_EXP 12
8813: PUSH
8814: LD_INT 0
8816: GREATER
8817: IFFALSE 8867
// for i in russianTimeLapsers do
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_EXP 12
8828: PUSH
8829: FOR_IN
8830: IFFALSE 8865
// if i = unit then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_VAR 0 1
8841: EQUAL
8842: IFFALSE 8863
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8844: LD_ADDR_EXP 12
8848: PUSH
8849: LD_EXP 12
8853: PUSH
8854: LD_VAR 0 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: DIFF
8862: ST_TO_ADDR
8863: GO 8829
8865: POP
8866: POP
// end ; end ; end_of_file
8867: PPOPN 2
8869: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh ;
8870: LD_EXP 1
8874: PPUSH
8875: CALL_OW 310
8879: PPUSH
8880: LD_INT 12
8882: PPUSH
8883: CALL_OW 308
8887: PUSH
8888: LD_EXP 15
8892: PUSH
8893: LD_INT 0
8895: EQUAL
8896: AND
8897: IFFALSE 9258
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
// begin enable ;
8905: ENABLE
// if JMMGirl = 1 then
8906: LD_EXP 7
8910: PUSH
8911: LD_INT 1
8913: EQUAL
8914: IFFALSE 8931
// JMMGirlVeh = IsInUnit ( Joan ) ;
8916: LD_ADDR_VAR 0 1
8920: PUSH
8921: LD_EXP 2
8925: PPUSH
8926: CALL_OW 310
8930: ST_TO_ADDR
// if JMMGirl = 2 then
8931: LD_EXP 7
8935: PUSH
8936: LD_INT 2
8938: EQUAL
8939: IFFALSE 8956
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8941: LD_ADDR_VAR 0 1
8945: PUSH
8946: LD_EXP 3
8950: PPUSH
8951: CALL_OW 310
8955: ST_TO_ADDR
// if JMMGirl = 3 then
8956: LD_EXP 7
8960: PUSH
8961: LD_INT 3
8963: EQUAL
8964: IFFALSE 8981
// JMMGirlVeh = IsInUnit ( Connie ) ;
8966: LD_ADDR_VAR 0 1
8970: PUSH
8971: LD_EXP 4
8975: PPUSH
8976: CALL_OW 310
8980: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8981: LD_EXP 1
8985: PPUSH
8986: CALL_OW 310
8990: PPUSH
8991: LD_EXP 2
8995: PPUSH
8996: CALL_OW 310
9000: PPUSH
9001: CALL_OW 296
9005: PUSH
9006: LD_INT 10
9008: LESS
9009: PUSH
9010: LD_EXP 1
9014: PPUSH
9015: CALL_OW 310
9019: PPUSH
9020: LD_EXP 3
9024: PPUSH
9025: CALL_OW 310
9029: PPUSH
9030: CALL_OW 296
9034: PUSH
9035: LD_INT 10
9037: LESS
9038: OR
9039: PUSH
9040: LD_EXP 1
9044: PPUSH
9045: CALL_OW 310
9049: PPUSH
9050: LD_EXP 4
9054: PPUSH
9055: CALL_OW 310
9059: PPUSH
9060: CALL_OW 296
9064: PUSH
9065: LD_INT 10
9067: LESS
9068: OR
9069: IFFALSE 9162
// begin case Query ( Q3b ) of 1 :
9071: LD_STRING Q3b
9073: PPUSH
9074: CALL_OW 97
9078: PUSH
9079: LD_INT 1
9081: DOUBLE
9082: EQUAL
9083: IFTRUE 9087
9085: GO 9159
9087: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL_OW 265
9097: PUSH
9098: EMPTY
9099: LIST
9100: PUSH
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 262
9110: PUSH
9111: EMPTY
9112: LIST
9113: PUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 263
9123: PUSH
9124: EMPTY
9125: LIST
9126: PUSH
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 264
9136: PUSH
9137: EMPTY
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: PPUSH
9146: LD_STRING 14_JMMGirlVeh_1
9148: PPUSH
9149: CALL_OW 39
// FinishMission ;
9153: CALL 9399 0 0
// end ; end ;
9157: GO 9160
9159: POP
// end else
9160: GO 9258
// begin if JMMGirl = 1 then
9162: LD_EXP 7
9166: PUSH
9167: LD_INT 1
9169: EQUAL
9170: IFFALSE 9198
// begin case Query ( Q3bJ ) of 1 :
9172: LD_STRING Q3bJ
9174: PPUSH
9175: CALL_OW 97
9179: PUSH
9180: LD_INT 1
9182: DOUBLE
9183: EQUAL
9184: IFTRUE 9188
9186: GO 9195
9188: POP
// FinishMission ; end ;
9189: CALL 9399 0 0
9193: GO 9196
9195: POP
// end else
9196: GO 9258
// begin if JMMGirl = 2 then
9198: LD_EXP 7
9202: PUSH
9203: LD_INT 2
9205: EQUAL
9206: IFFALSE 9234
// begin case Query ( Q3bL ) of 1 :
9208: LD_STRING Q3bL
9210: PPUSH
9211: CALL_OW 97
9215: PUSH
9216: LD_INT 1
9218: DOUBLE
9219: EQUAL
9220: IFTRUE 9224
9222: GO 9231
9224: POP
// FinishMission ; end ;
9225: CALL 9399 0 0
9229: GO 9232
9231: POP
// end else
9232: GO 9258
// begin case Query ( Q3bX ) of 1 :
9234: LD_STRING Q3bX
9236: PPUSH
9237: CALL_OW 97
9241: PUSH
9242: LD_INT 1
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9257
9250: POP
// FinishMission ; end ;
9251: CALL 9399 0 0
9255: GO 9258
9257: POP
// end ; end ; end ; end ;
9258: PPOPN 1
9260: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9261: LD_INT 22
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 21
9273: PUSH
9274: LD_INT 1
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PPUSH
9285: CALL_OW 69
9289: PUSH
9290: LD_INT 0
9292: EQUAL
9293: PUSH
9294: LD_EXP 15
9298: PUSH
9299: LD_INT 0
9301: EQUAL
9302: AND
9303: IFFALSE 9398
9305: GO 9307
9307: DISABLE
// begin DialogueOn ;
9308: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9312: LD_EXP 1
9316: PPUSH
9317: LD_STRING DEnd-JMM-1
9319: PPUSH
9320: CALL_OW 88
// if JMMGirl = 1 then
9324: LD_EXP 7
9328: PUSH
9329: LD_INT 1
9331: EQUAL
9332: IFFALSE 9346
// Say ( Joan , DEnd-Joan-1 ) ;
9334: LD_EXP 2
9338: PPUSH
9339: LD_STRING DEnd-Joan-1
9341: PPUSH
9342: CALL_OW 88
// if JMMGirl = 2 then
9346: LD_EXP 7
9350: PUSH
9351: LD_INT 2
9353: EQUAL
9354: IFFALSE 9368
// Say ( Lisa , DEnd-Lisa-1 ) ;
9356: LD_EXP 3
9360: PPUSH
9361: LD_STRING DEnd-Lisa-1
9363: PPUSH
9364: CALL_OW 88
// if JMMGirl = 3 then
9368: LD_EXP 7
9372: PUSH
9373: LD_INT 3
9375: EQUAL
9376: IFFALSE 9390
// Say ( Connie , DEnd-Con-1 ) ;
9378: LD_EXP 4
9382: PPUSH
9383: LD_STRING DEnd-Con-1
9385: PPUSH
9386: CALL_OW 88
// DialogueOff ;
9390: CALL_OW 7
// FinishMission ;
9394: CALL 9399 0 0
// end ;
9398: END
// export function FinishMission ; var JMMNewVeh ; begin
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
// SaveCharacters ( JMM , 14_JMM ) ;
9403: LD_EXP 1
9407: PPUSH
9408: LD_STRING 14_JMM
9410: PPUSH
9411: CALL_OW 38
// JMMNewVeh = IsInUnit ( JMM ) ;
9415: LD_ADDR_VAR 0 2
9419: PUSH
9420: LD_EXP 1
9424: PPUSH
9425: CALL_OW 310
9429: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9430: LD_VAR 0 2
9434: PPUSH
9435: CALL_OW 265
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 262
9452: PUSH
9453: EMPTY
9454: LIST
9455: PUSH
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 263
9465: PUSH
9466: EMPTY
9467: LIST
9468: PUSH
9469: LD_VAR 0 2
9473: PPUSH
9474: CALL_OW 264
9478: PUSH
9479: EMPTY
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PPUSH
9488: LD_STRING 14_JMMVeh_1
9490: PPUSH
9491: CALL_OW 39
// if fastEnd = 1 then
9495: LD_EXP 15
9499: PUSH
9500: LD_INT 1
9502: EQUAL
9503: IFFALSE 9570
// begin AddMedal ( fastend , - 1 ) ;
9505: LD_STRING fastend
9507: PPUSH
9508: LD_INT 1
9510: NEG
9511: PPUSH
9512: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9516: LD_STRING fastend
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9527: LD_STRING fastend
9529: PPUSH
9530: LD_INT 1
9532: NEG
9533: PPUSH
9534: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9538: LD_EXP 7
9542: PPUSH
9543: LD_STRING 14_JMMGirl_1
9545: PPUSH
9546: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9550: LD_INT 0
9552: PPUSH
9553: LD_STRING 14_JMMGirlStatus_1
9555: PPUSH
9556: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_STRING 14_KappaStatus_1
9565: PPUSH
9566: CALL_OW 39
// end ; if fastEnd = 0 then
9570: LD_EXP 15
9574: PUSH
9575: LD_INT 0
9577: EQUAL
9578: IFFALSE 10306
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9580: LD_INT 22
9582: PUSH
9583: LD_INT 1
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 25
9595: PUSH
9596: LD_INT 12
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 16
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: PPUSH
9634: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9638: LD_EXP 7
9642: PPUSH
9643: LD_STRING 14_JMMGirl_1
9645: PPUSH
9646: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9650: LD_INT 22
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 21
9662: PUSH
9663: LD_INT 1
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 69
9678: PUSH
9679: LD_INT 0
9681: EQUAL
9682: PUSH
9683: LD_INT 48
9685: PPUSH
9686: CALL_OW 255
9690: PUSH
9691: LD_INT 1
9693: EQUAL
9694: AND
9695: IFFALSE 9709
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9697: LD_INT 1
9699: PPUSH
9700: LD_STRING 14_KappaStatus_1
9702: PPUSH
9703: CALL_OW 39
9707: GO 9719
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9709: LD_INT 0
9711: PPUSH
9712: LD_STRING 14_KappaStatus_1
9714: PPUSH
9715: CALL_OW 39
// case JMMGirl of 1 :
9719: LD_EXP 7
9723: PUSH
9724: LD_INT 1
9726: DOUBLE
9727: EQUAL
9728: IFTRUE 9732
9730: GO 9880
9732: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9733: LD_EXP 2
9737: PPUSH
9738: CALL_OW 302
9742: PUSH
9743: LD_EXP 2
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_INT 1
9755: EQUAL
9756: AND
9757: PUSH
9758: LD_INT 22
9760: PUSH
9761: LD_INT 3
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: LD_INT 0
9789: EQUAL
9790: PUSH
9791: LD_EXP 1
9795: PPUSH
9796: CALL_OW 310
9800: PPUSH
9801: LD_EXP 2
9805: PPUSH
9806: CALL_OW 310
9810: PPUSH
9811: CALL_OW 296
9815: PUSH
9816: LD_INT 10
9818: LESS
9819: OR
9820: AND
9821: IFFALSE 9857
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9823: LD_INT 1
9825: PPUSH
9826: LD_STRING 14_JMMGirlStatus_1
9828: PPUSH
9829: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9833: LD_EXP 2
9837: PPUSH
9838: LD_STRING 14_Joan
9840: PPUSH
9841: CALL_OW 38
// AddMedal ( protect , 1 ) end else
9845: LD_STRING protect
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 101
9855: GO 9878
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9857: LD_INT 0
9859: PPUSH
9860: LD_STRING 14_JMMGirlStatus_1
9862: PPUSH
9863: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9867: LD_STRING protect
9869: PPUSH
9870: LD_INT 1
9872: NEG
9873: PPUSH
9874: CALL_OW 101
// end ; end ; 2 :
9878: GO 10193
9880: LD_INT 2
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 10036
9888: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9889: LD_EXP 3
9893: PPUSH
9894: CALL_OW 302
9898: PUSH
9899: LD_EXP 3
9903: PPUSH
9904: CALL_OW 255
9908: PUSH
9909: LD_INT 1
9911: EQUAL
9912: AND
9913: PUSH
9914: LD_INT 22
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: PUSH
9947: LD_EXP 1
9951: PPUSH
9952: CALL_OW 310
9956: PPUSH
9957: LD_EXP 3
9961: PPUSH
9962: CALL_OW 310
9966: PPUSH
9967: CALL_OW 296
9971: PUSH
9972: LD_INT 10
9974: LESS
9975: OR
9976: AND
9977: IFFALSE 10013
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9979: LD_INT 1
9981: PPUSH
9982: LD_STRING 14_JMMGirlStatus_1
9984: PPUSH
9985: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9989: LD_EXP 3
9993: PPUSH
9994: LD_STRING 14_Lisa
9996: PPUSH
9997: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10001: LD_STRING protect
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 101
10011: GO 10034
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10013: LD_INT 0
10015: PPUSH
10016: LD_STRING 14_JMMGirlStatus_1
10018: PPUSH
10019: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10023: LD_STRING protect
10025: PPUSH
10026: LD_INT 2
10028: NEG
10029: PPUSH
10030: CALL_OW 101
// end ; end ; 3 :
10034: GO 10193
10036: LD_INT 3
10038: DOUBLE
10039: EQUAL
10040: IFTRUE 10044
10042: GO 10192
10044: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10045: LD_EXP 4
10049: PPUSH
10050: CALL_OW 302
10054: PUSH
10055: LD_EXP 4
10059: PPUSH
10060: CALL_OW 255
10064: PUSH
10065: LD_INT 1
10067: EQUAL
10068: AND
10069: PUSH
10070: LD_INT 22
10072: PUSH
10073: LD_INT 3
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 21
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PPUSH
10094: CALL_OW 69
10098: PUSH
10099: LD_INT 0
10101: EQUAL
10102: PUSH
10103: LD_EXP 1
10107: PPUSH
10108: CALL_OW 310
10112: PPUSH
10113: LD_EXP 4
10117: PPUSH
10118: CALL_OW 310
10122: PPUSH
10123: CALL_OW 296
10127: PUSH
10128: LD_INT 10
10130: LESS
10131: OR
10132: AND
10133: IFFALSE 10169
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: LD_STRING 14_JMMGirlStatus_1
10140: PPUSH
10141: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10145: LD_EXP 4
10149: PPUSH
10150: LD_STRING 14_Connie
10152: PPUSH
10153: CALL_OW 38
// AddMedal ( protect , 1 ) end else
10157: LD_STRING protect
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 101
10167: GO 10190
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_STRING 14_JMMGirlStatus_1
10174: PPUSH
10175: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10179: LD_STRING protect
10181: PPUSH
10182: LD_INT 3
10184: NEG
10185: PPUSH
10186: CALL_OW 101
// end ; end ; end ;
10190: GO 10193
10192: POP
// if amLaserCounter >= 2 then
10193: LD_EXP 9
10197: PUSH
10198: LD_INT 2
10200: GREATEREQUAL
10201: IFFALSE 10215
// begin AddMedal ( double , 1 ) end else
10203: LD_STRING double
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 101
10213: GO 10249
// begin if amLaserCounter = 1 then
10215: LD_EXP 9
10219: PUSH
10220: LD_INT 1
10222: EQUAL
10223: IFFALSE 10238
// AddMedal ( double , - 2 ) else
10225: LD_STRING double
10227: PPUSH
10228: LD_INT 2
10230: NEG
10231: PPUSH
10232: CALL_OW 101
10236: GO 10249
// AddMedal ( double , - 1 ) ;
10238: LD_STRING double
10240: PPUSH
10241: LD_INT 1
10243: NEG
10244: PPUSH
10245: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 21
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PPUSH
10273: CALL_OW 69
10277: PUSH
10278: LD_INT 0
10280: EQUAL
10281: IFFALSE 10295
// AddMedal ( base , 1 ) else
10283: LD_STRING base
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 101
10293: GO 10306
// AddMedal ( base , - 1 ) ;
10295: LD_STRING base
10297: PPUSH
10298: LD_INT 1
10300: NEG
10301: PPUSH
10302: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
10306: LD_STRING Eliminate
10308: PPUSH
10309: CALL_OW 102
// YouWin ;
10313: CALL_OW 103
// end ; end_of_file
10317: LD_VAR 0 1
10321: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10322: LD_EXP 1
10326: PPUSH
10327: CALL_OW 301
10331: IFFALSE 10343
10333: GO 10335
10335: DISABLE
// YouLost ( JMM ) ; end_of_file
10336: LD_STRING JMM
10338: PPUSH
10339: CALL_OW 104
10343: END
// every 1 1$0 do
10344: GO 10346
10346: DISABLE
// begin enable ;
10347: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10348: LD_INT 3
10350: PPUSH
10351: LD_INT 5
10353: PPUSH
10354: CALL_OW 12
10358: PPUSH
10359: LD_INT 13
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 55
// end ;
10369: END
