// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 0 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 1 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 1
 102: ST_TO_ADDR
// PrepareHero ;
 103: CALL 433 0 0
// PrepareRussianBase ;
 107: CALL 771 0 0
// PrepareCommander ;
 111: CALL 716 0 0
// end ;
 115: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 116: LD_EXP 16
 120: PUSH
 121: LD_INT 1
 123: EQUAL
 124: IFFALSE 430
 126: GO 128
 128: DISABLE
 129: LD_INT 0
 131: PPUSH
// begin enable ;
 132: ENABLE
// fogoff ( true ) ;
 133: LD_INT 1
 135: PPUSH
 136: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 140: LD_ADDR_VAR 0 1
 144: PUSH
 145: LD_INT 22
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: PUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 1
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: PPUSH
 169: CALL_OW 69
 173: PUSH
 174: FOR_IN
 175: IFFALSE 191
// SetLives ( i , 1000 ) ;
 177: LD_VAR 0 1
 181: PPUSH
 182: LD_INT 1000
 184: PPUSH
 185: CALL_OW 234
 189: GO 174
 191: POP
 192: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 193: LD_ADDR_VAR 0 1
 197: PUSH
 198: LD_INT 22
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: LD_INT 30
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: PPUSH
 240: CALL_OW 69
 244: PUSH
 245: FOR_IN
 246: IFFALSE 270
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 248: LD_VAR 0 1
 252: PPUSH
 253: CALL_OW 274
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: LD_INT 9999
 263: PPUSH
 264: CALL_OW 277
 268: GO 245
 270: POP
 271: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 2
 289: PUSH
 290: LD_INT 30
 292: PUSH
 293: LD_INT 0
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 30
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL_OW 69
 323: PUSH
 324: FOR_IN
 325: IFFALSE 349
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 327: LD_VAR 0 1
 331: PPUSH
 332: CALL_OW 274
 336: PPUSH
 337: LD_INT 2
 339: PPUSH
 340: LD_INT 9999
 342: PPUSH
 343: CALL_OW 277
 347: GO 324
 349: POP
 350: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 351: LD_ADDR_VAR 0 1
 355: PUSH
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 30
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 30
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PPUSH
 398: CALL_OW 69
 402: PUSH
 403: FOR_IN
 404: IFFALSE 428
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 406: LD_VAR 0 1
 410: PPUSH
 411: CALL_OW 274
 415: PPUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 9999
 421: PPUSH
 422: CALL_OW 277
 426: GO 403
 428: POP
 429: POP
// end ; end_of_file
 430: PPOPN 1
 432: END
// export function PrepareHero ; begin
 433: LD_INT 0
 435: PPUSH
// uc_side = 1 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// uc_nation = 1 ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 452: LD_ADDR_EXP 1
 456: PUSH
 457: LD_STRING 13f_JMM
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: CALL 911 0 2
 467: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 468: LD_EXP 1
 472: PPUSH
 473: LD_INT 95
 475: PPUSH
 476: CALL_OW 52
// Powell = PrepareUnit ( Powell , false ) ;
 480: LD_ADDR_EXP 5
 484: PUSH
 485: LD_STRING Powell
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: CALL 911 0 2
 495: ST_TO_ADDR
// uc_side = 4 ;
 496: LD_ADDR_OWVAR 20
 500: PUSH
 501: LD_INT 4
 503: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 504: LD_STRING 10c_Joan
 506: PPUSH
 507: CALL_OW 28
 511: PUSH
 512: LD_INT 1
 514: EQUAL
 515: IFFALSE 570
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 517: LD_ADDR_EXP 2
 521: PUSH
 522: LD_STRING 10c_Joan
 524: PPUSH
 525: LD_INT 1
 527: PPUSH
 528: CALL 911 0 2
 532: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 533: LD_EXP 2
 537: PPUSH
 538: LD_INT 4
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 49
// SetClass ( Joan , 1 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: CALL_OW 336
// JMMGirl = 1 ;
 560: LD_ADDR_EXP 7
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// end else
 568: GO 687
// begin if TestCharacters ( 13s_Lisa ) = true then
 570: LD_STRING 13s_Lisa
 572: PPUSH
 573: CALL_OW 28
 577: PUSH
 578: LD_INT 1
 580: EQUAL
 581: IFFALSE 636
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 583: LD_ADDR_EXP 3
 587: PUSH
 588: LD_STRING 13s_Lisa
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 911 0 2
 598: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 599: LD_EXP 3
 603: PPUSH
 604: LD_INT 4
 606: PPUSH
 607: LD_INT 0
 609: PPUSH
 610: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 614: LD_EXP 3
 618: PPUSH
 619: LD_INT 1
 621: PPUSH
 622: CALL_OW 336
// JMMGirl = 2 ;
 626: LD_ADDR_EXP 7
 630: PUSH
 631: LD_INT 2
 633: ST_TO_ADDR
// end else
 634: GO 687
// begin Connie = PrepareUnit ( Connie , true ) ;
 636: LD_ADDR_EXP 4
 640: PUSH
 641: LD_STRING Connie
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL 911 0 2
 651: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 652: LD_EXP 4
 656: PPUSH
 657: LD_INT 4
 659: PPUSH
 660: LD_INT 0
 662: PPUSH
 663: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 667: LD_EXP 4
 671: PPUSH
 672: LD_INT 3
 674: PPUSH
 675: CALL_OW 336
// JMMGirl = 3 ;
 679: LD_ADDR_EXP 7
 683: PUSH
 684: LD_INT 3
 686: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 687: LD_EXP 2
 691: PUSH
 692: LD_EXP 3
 696: PUSH
 697: LD_EXP 4
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: LIST
 706: PPUSH
 707: CALL_OW 140
// end ; end_of_file
 711: LD_VAR 0 1
 715: RET
// export function PrepareCommander ; begin
 716: LD_INT 0
 718: PPUSH
// uc_side = 3 ;
 719: LD_ADDR_OWVAR 20
 723: PUSH
 724: LD_INT 3
 726: ST_TO_ADDR
// uc_nation = 3 ;
 727: LD_ADDR_OWVAR 21
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 735: LD_ADDR_EXP 6
 739: PUSH
 740: LD_STRING Eisenstein
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL 911 0 2
 750: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 751: LD_EXP 6
 755: PPUSH
 756: LD_INT 11
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 49
// end ;
 766: LD_VAR 0 1
 770: RET
// export function PrepareRussianBase ; begin
 771: LD_INT 0
 773: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 6 ) ;
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 45
 782: PPUSH
 783: LD_INT 10
 785: PPUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 6
 791: PPUSH
 792: CALL 1019 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 6 ) ;
 796: LD_INT 3
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 22
 804: PPUSH
 805: LD_INT 10
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: LD_INT 6
 813: PPUSH
 814: CALL 1019 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 6 ) ;
 818: LD_INT 3
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: LD_INT 10
 829: PPUSH
 830: LD_INT 3
 832: PPUSH
 833: LD_INT 6
 835: PPUSH
 836: CALL 1019 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 6 ) ;
 840: LD_INT 3
 842: PPUSH
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 40
 848: PPUSH
 849: LD_INT 10
 851: PPUSH
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 6
 857: PPUSH
 858: CALL 1019 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 6 ) ;
 862: LD_INT 3
 864: PPUSH
 865: LD_INT 3
 867: PPUSH
 868: LD_INT 14
 870: PPUSH
 871: LD_INT 10
 873: PPUSH
 874: LD_INT 4
 876: PPUSH
 877: LD_INT 6
 879: PPUSH
 880: CALL 1019 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 6 ) ;
 884: LD_INT 3
 886: PPUSH
 887: LD_INT 3
 889: PPUSH
 890: LD_INT 15
 892: PPUSH
 893: LD_INT 10
 895: PPUSH
 896: LD_INT 4
 898: PPUSH
 899: LD_INT 6
 901: PPUSH
 902: CALL 1019 0 6
// end ; end_of_file
 906: LD_VAR 0 1
 910: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
// if exist_mode then
 915: LD_VAR 0 2
 919: IFFALSE 938
// begin unit := CreateCharacter ( ident ) ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_VAR 0 1
 930: PPUSH
 931: CALL_OW 34
 935: ST_TO_ADDR
// end else
 936: GO 953
// begin unit := NewCharacter ( ident ) ;
 938: LD_ADDR_VAR 0 4
 942: PUSH
 943: LD_VAR 0 1
 947: PPUSH
 948: CALL_OW 25
 952: ST_TO_ADDR
// end ; result := unit ;
 953: LD_ADDR_VAR 0 3
 957: PUSH
 958: LD_VAR 0 4
 962: ST_TO_ADDR
// end ;
 963: LD_VAR 0 3
 967: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
 968: LD_INT 0
 970: PPUSH
 971: PPUSH
// for i in charactersList do
 972: LD_ADDR_VAR 0 4
 976: PUSH
 977: LD_VAR 0 1
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1012
// begin if IsOk ( i ) then
 985: LD_VAR 0 4
 989: PPUSH
 990: CALL_OW 302
 994: IFFALSE 1010
// SaveCharacters ( i , ident ) ;
 996: LD_VAR 0 4
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: CALL_OW 38
// end ;
1010: GO 982
1012: POP
1013: POP
// end ;
1014: LD_VAR 0 3
1018: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1019: LD_INT 0
1021: PPUSH
1022: PPUSH
1023: PPUSH
1024: PPUSH
// for i = 1 to count do
1025: LD_ADDR_VAR 0 8
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 6
1039: PUSH
1040: FOR_TO
1041: IFFALSE 1122
// begin uc_side = side ;
1043: LD_ADDR_OWVAR 20
1047: PUSH
1048: LD_VAR 0 1
1052: ST_TO_ADDR
// uc_nation = nation ;
1053: LD_ADDR_OWVAR 21
1057: PUSH
1058: LD_VAR 0 2
1062: ST_TO_ADDR
// hc_gallery =  ;
1063: LD_ADDR_OWVAR 33
1067: PUSH
1068: LD_STRING 
1070: ST_TO_ADDR
// hc_name =  ;
1071: LD_ADDR_OWVAR 26
1075: PUSH
1076: LD_STRING 
1078: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 5
1086: PPUSH
1087: LD_VAR 0 4
1091: PPUSH
1092: CALL_OW 380
// un = CreateHuman ;
1096: LD_ADDR_VAR 0 10
1100: PUSH
1101: CALL_OW 44
1105: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1106: LD_VAR 0 10
1110: PPUSH
1111: LD_VAR 0 3
1115: PPUSH
1116: CALL_OW 52
// end ;
1120: GO 1040
1122: POP
1123: POP
// end ;
1124: LD_VAR 0 7
1128: RET
// export function Query1 ; begin
1129: LD_INT 0
1131: PPUSH
// case query ( Q1 ) of 1 :
1132: LD_STRING Q1
1134: PPUSH
1135: CALL_OW 97
1139: PUSH
1140: LD_INT 1
1142: DOUBLE
1143: EQUAL
1144: IFTRUE 1148
1146: GO 1159
1148: POP
// result = 1 ; 2 :
1149: LD_ADDR_VAR 0 1
1153: PUSH
1154: LD_INT 1
1156: ST_TO_ADDR
1157: GO 1179
1159: LD_INT 2
1161: DOUBLE
1162: EQUAL
1163: IFTRUE 1167
1165: GO 1178
1167: POP
// result = 2 ; end ;
1168: LD_ADDR_VAR 0 1
1172: PUSH
1173: LD_INT 2
1175: ST_TO_ADDR
1176: GO 1179
1178: POP
// end ;
1179: LD_VAR 0 1
1183: RET
// export function Query2 ; begin
1184: LD_INT 0
1186: PPUSH
// case query ( Q2J ) of 1 :
1187: LD_STRING Q2J
1189: PPUSH
1190: CALL_OW 97
1194: PUSH
1195: LD_INT 1
1197: DOUBLE
1198: EQUAL
1199: IFTRUE 1203
1201: GO 1214
1203: POP
// result = 1 ; 2 :
1204: LD_ADDR_VAR 0 1
1208: PUSH
1209: LD_INT 1
1211: ST_TO_ADDR
1212: GO 1253
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1233
1222: POP
// result = 2 ; 2 :
1223: LD_ADDR_VAR 0 1
1227: PUSH
1228: LD_INT 2
1230: ST_TO_ADDR
1231: GO 1253
1233: LD_INT 2
1235: DOUBLE
1236: EQUAL
1237: IFTRUE 1241
1239: GO 1252
1241: POP
// result = 3 ; end ;
1242: LD_ADDR_VAR 0 1
1246: PUSH
1247: LD_INT 3
1249: ST_TO_ADDR
1250: GO 1253
1252: POP
// end ;
1253: LD_VAR 0 1
1257: RET
// export function PrepareDifficulty ; begin
1258: LD_INT 0
1260: PPUSH
// if difficulty = 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: EQUAL
1269: IFFALSE 1349
// begin SetTech ( 57 , 3 , state_disabled ) ;
1271: LD_INT 57
1273: PPUSH
1274: LD_INT 3
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1284: LD_INT 58
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1297: LD_INT 59
1299: PPUSH
1300: LD_INT 3
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1310: LD_INT 51
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1323: LD_INT 52
1325: PPUSH
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 0
1331: PPUSH
1332: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1336: LD_INT 53
1338: PPUSH
1339: LD_INT 3
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 322
// end ; if difficulty = 2 then
1349: LD_OWVAR 67
1353: PUSH
1354: LD_INT 2
1356: EQUAL
1357: IFFALSE 1437
// begin SetTech ( 57 , 3 , state_enabled ) ;
1359: LD_INT 57
1361: PPUSH
1362: LD_INT 3
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1372: LD_INT 58
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 0
1380: PPUSH
1381: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1385: LD_INT 59
1387: PPUSH
1388: LD_INT 3
1390: PPUSH
1391: LD_INT 0
1393: PPUSH
1394: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1398: LD_INT 51
1400: PPUSH
1401: LD_INT 3
1403: PPUSH
1404: LD_INT 1
1406: PPUSH
1407: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1411: LD_INT 52
1413: PPUSH
1414: LD_INT 3
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1424: LD_INT 53
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: LD_INT 0
1432: PPUSH
1433: CALL_OW 322
// end ; if difficulty = 3 then
1437: LD_OWVAR 67
1441: PUSH
1442: LD_INT 3
1444: EQUAL
1445: IFFALSE 1525
// begin SetTech ( 57 , 3 , state_enabled ) ;
1447: LD_INT 57
1449: PPUSH
1450: LD_INT 3
1452: PPUSH
1453: LD_INT 1
1455: PPUSH
1456: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1460: LD_INT 58
1462: PPUSH
1463: LD_INT 3
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1473: LD_INT 59
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1486: LD_INT 51
1488: PPUSH
1489: LD_INT 3
1491: PPUSH
1492: LD_INT 1
1494: PPUSH
1495: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1499: LD_INT 52
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1512: LD_INT 53
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 322
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
// for i = 1 to 72 do
1536: LD_ADDR_VAR 0 5
1540: PUSH
1541: DOUBLE
1542: LD_INT 1
1544: DEC
1545: ST_TO_ADDR
1546: LD_INT 72
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1608
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
1552: LD_VAR 0 5
1556: PPUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: CALL_OW 321
1566: PUSH
1567: LD_INT 1
1569: EQUAL
1570: PUSH
1571: LD_VAR 0 5
1575: PPUSH
1576: LD_VAR 0 3
1580: PPUSH
1581: CALL_OW 482
1585: PUSH
1586: LD_INT 1
1588: EQUAL
1589: AND
1590: IFFALSE 1606
// AddComResearch ( lab , i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PPUSH
1602: CALL_OW 184
1606: GO 1549
1608: POP
1609: POP
// end ;
1610: LD_VAR 0 4
1614: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1615: LD_INT 0
1617: PPUSH
1618: PPUSH
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1623: LD_ADDR_VAR 0 8
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: CALL_OW 313
1637: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1638: LD_ADDR_VAR 0 9
1642: PUSH
1643: LD_VAR 0 3
1647: PPUSH
1648: LD_INT 22
1650: PUSH
1651: LD_VAR 0 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 25
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 24
1672: PUSH
1673: LD_INT 750
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 3
1682: PUSH
1683: LD_INT 54
1685: PUSH
1686: EMPTY
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 70
1703: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1704: LD_ADDR_VAR 0 6
1708: PUSH
1709: LD_VAR 0 3
1713: PPUSH
1714: LD_INT 22
1716: PUSH
1717: LD_VAR 0 1
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 21
1728: PUSH
1729: LD_INT 3
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 24
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: PPUSH
1761: CALL_OW 70
1765: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1766: LD_VAR 0 6
1770: NOT
1771: PUSH
1772: LD_INT 22
1774: PUSH
1775: LD_VAR 0 1
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 25
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 24
1796: PUSH
1797: LD_INT 250
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PPUSH
1809: CALL_OW 69
1813: NOT
1814: AND
1815: IFFALSE 1819
// exit ;
1817: GO 2001
// if buildings_list > 0 and engineerOkInside then
1819: LD_VAR 0 6
1823: PUSH
1824: LD_INT 0
1826: GREATER
1827: PUSH
1828: LD_VAR 0 8
1832: AND
1833: IFFALSE 1844
// ComExitBuilding ( engineerOkInside ) ;
1835: LD_VAR 0 8
1839: PPUSH
1840: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
1844: LD_VAR 0 6
1848: PUSH
1849: LD_INT 0
1851: GREATER
1852: PUSH
1853: LD_VAR 0 9
1857: PUSH
1858: LD_INT 0
1860: GREATER
1861: AND
1862: IFFALSE 1882
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
1864: LD_VAR 0 9
1868: PPUSH
1869: LD_VAR 0 6
1873: PUSH
1874: LD_INT 1
1876: ARRAY
1877: PPUSH
1878: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 0
1889: EQUAL
1890: PUSH
1891: LD_VAR 0 4
1895: PUSH
1896: LD_INT 0
1898: EQUAL
1899: AND
1900: PUSH
1901: LD_VAR 0 9
1905: PUSH
1906: LD_INT 0
1908: GREATER
1909: AND
1910: IFFALSE 1926
// ComEnterUnit ( engineerOkOutside , building ) ;
1912: LD_VAR 0 9
1916: PPUSH
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
1926: LD_VAR 0 9
1930: PUSH
1931: LD_INT 0
1933: GREATER
1934: PUSH
1935: LD_VAR 0 6
1939: PUSH
1940: LD_INT 0
1942: EQUAL
1943: AND
1944: PUSH
1945: LD_VAR 0 4
1949: PUSH
1950: LD_INT 0
1952: GREATER
1953: AND
1954: IFFALSE 2001
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
1956: LD_VAR 0 9
1960: PPUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_INT 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PUSH
1975: LD_INT 2
1977: ARRAY
1978: PPUSH
1979: LD_VAR 0 4
1983: PUSH
1984: LD_INT 3
1986: ARRAY
1987: PPUSH
1988: LD_VAR 0 4
1992: PUSH
1993: LD_INT 4
1995: ARRAY
1996: PPUSH
1997: CALL_OW 145
// end ;
2001: LD_VAR 0 5
2005: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2006: LD_INT 0
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
2015: PPUSH
2016: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2017: LD_ADDR_VAR 0 6
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_VAR 0 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 23
2046: PUSH
2047: LD_INT 2
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 24
2056: PUSH
2057: LD_INT 251
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 69
2074: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2075: LD_ADDR_VAR 0 7
2079: PUSH
2080: LD_VAR 0 3
2084: PPUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 1
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 23
2099: PUSH
2100: LD_INT 2
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 25
2109: PUSH
2110: LD_INT 4
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 50
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 70
2133: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2134: LD_ADDR_VAR 0 10
2138: PUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: LD_INT 22
2146: PUSH
2147: LD_VAR 0 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: LD_INT 21
2158: PUSH
2159: LD_INT 1
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 25
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: LD_INT 24
2188: PUSH
2189: LD_INT 750
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 70
2210: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2211: LD_ADDR_VAR 0 11
2215: PUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: LD_INT 22
2223: PUSH
2224: LD_VAR 0 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 21
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 25
2248: PUSH
2249: LD_INT 3
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 24
2265: PUSH
2266: LD_INT 1000
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: PPUSH
2283: CALL_OW 70
2287: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2288: LD_VAR 0 10
2292: NOT
2293: PUSH
2294: LD_VAR 0 11
2298: NOT
2299: AND
2300: PUSH
2301: LD_VAR 0 6
2305: NOT
2306: AND
2307: IFFALSE 2311
// exit ;
2309: GO 2545
// if damageUnits > 0 and sci_list > 0 then
2311: LD_VAR 0 10
2315: PUSH
2316: LD_INT 0
2318: GREATER
2319: PUSH
2320: LD_VAR 0 6
2324: PUSH
2325: LD_INT 0
2327: GREATER
2328: AND
2329: IFFALSE 2345
// ComMoveToArea ( damageUnits , healArea ) ;
2331: LD_VAR 0 10
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2345: LD_VAR 0 11
2349: PUSH
2350: LD_INT 0
2352: GREATER
2353: PUSH
2354: LD_VAR 0 6
2358: PUSH
2359: LD_INT 0
2361: GREATER
2362: AND
2363: IFFALSE 2374
// ComExitBuilding ( sci_list ) ;
2365: LD_VAR 0 6
2369: PPUSH
2370: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2374: LD_VAR 0 11
2378: PUSH
2379: LD_INT 0
2381: GREATER
2382: PUSH
2383: LD_VAR 0 7
2387: PUSH
2388: LD_INT 0
2390: GREATER
2391: AND
2392: IFFALSE 2412
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2394: LD_VAR 0 7
2398: PPUSH
2399: LD_VAR 0 11
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2412: LD_VAR 0 10
2416: PUSH
2417: LD_INT 0
2419: EQUAL
2420: PUSH
2421: LD_VAR 0 11
2425: PUSH
2426: LD_INT 0
2428: EQUAL
2429: AND
2430: PUSH
2431: LD_VAR 0 7
2435: PUSH
2436: LD_INT 0
2438: GREATER
2439: AND
2440: IFFALSE 2545
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2442: LD_ADDR_VAR 0 12
2446: PUSH
2447: LD_INT 22
2449: PUSH
2450: LD_VAR 0 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 21
2461: PUSH
2462: LD_INT 3
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 30
2471: PUSH
2472: LD_INT 8
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: LIST
2483: PPUSH
2484: CALL_OW 69
2488: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2489: LD_ADDR_VAR 0 13
2493: PUSH
2494: LD_INT 1
2496: PPUSH
2497: LD_VAR 0 12
2501: PPUSH
2502: CALL_OW 12
2506: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2507: LD_VAR 0 7
2511: PPUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 60
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 72
2529: PPUSH
2530: LD_VAR 0 12
2534: PUSH
2535: LD_VAR 0 13
2539: ARRAY
2540: PPUSH
2541: CALL_OW 120
// end ; end ;
2545: LD_VAR 0 5
2549: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2550: LD_INT 0
2552: PPUSH
2553: PPUSH
2554: PPUSH
2555: PPUSH
// tmpTab = [ ] ;
2556: LD_ADDR_VAR 0 6
2560: PUSH
2561: EMPTY
2562: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2563: LD_INT 22
2565: PUSH
2566: LD_VAR 0 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 30
2577: PUSH
2578: LD_INT 32
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2680
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_INT 22
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 30
2618: PUSH
2619: LD_INT 32
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 69
2634: PUSH
2635: FOR_IN
2636: IFFALSE 2678
// begin for j in UnitsInside ( i ) do
2638: LD_ADDR_VAR 0 5
2642: PUSH
2643: LD_VAR 0 4
2647: PPUSH
2648: CALL_OW 313
2652: PUSH
2653: FOR_IN
2654: IFFALSE 2674
// tmpTab = tmpTab ^ j ;
2656: LD_ADDR_VAR 0 6
2660: PUSH
2661: LD_VAR 0 6
2665: PUSH
2666: LD_VAR 0 5
2670: ADD
2671: ST_TO_ADDR
2672: GO 2653
2674: POP
2675: POP
// end ;
2676: GO 2635
2678: POP
2679: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2680: LD_VAR 0 6
2684: PPUSH
2685: LD_VAR 0 2
2689: PPUSH
2690: CALL_OW 250
2694: PPUSH
2695: LD_VAR 0 2
2699: PPUSH
2700: CALL_OW 251
2704: PPUSH
2705: CALL_OW 114
// end ;
2709: LD_VAR 0 3
2713: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2714: LD_INT 0
2716: PPUSH
2717: PPUSH
2718: PPUSH
2719: PPUSH
// enable ;
2720: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
2721: LD_ADDR_VAR 0 7
2725: PUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL_OW 435
2735: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
2736: LD_ADDR_VAR 0 6
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_VAR 0 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 34
2755: PUSH
2756: LD_VAR 0 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
2774: LD_VAR 0 6
2778: PUSH
2779: LD_INT 0
2781: GREATER
2782: PUSH
2783: LD_VAR 0 3
2787: PPUSH
2788: CALL_OW 435
2792: AND
2793: PUSH
2794: LD_VAR 0 7
2798: PUSH
2799: LD_INT 0
2801: GREATER
2802: AND
2803: IFFALSE 2852
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2805: LD_VAR 0 6
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: LD_VAR 0 7
2818: PUSH
2819: LD_INT 1
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 7
2827: PUSH
2828: LD_INT 2
2830: ARRAY
2831: PPUSH
2832: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
2836: LD_VAR 0 6
2840: PUSH
2841: LD_INT 1
2843: ARRAY
2844: PPUSH
2845: LD_INT 100
2847: PPUSH
2848: CALL_OW 240
// end ; end ;
2852: LD_VAR 0 4
2856: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
2857: LD_INT 0
2859: PPUSH
2860: PPUSH
2861: PPUSH
2862: PPUSH
2863: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
2864: LD_ADDR_VAR 0 6
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_VAR 0 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_INT 30
2886: PUSH
2887: LD_INT 31
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 30
2896: PUSH
2897: LD_INT 32
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 30
2906: PUSH
2907: LD_INT 33
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 30
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 30
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 69
2950: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
2951: LD_ADDR_VAR 0 7
2955: PUSH
2956: LD_INT 22
2958: PUSH
2959: LD_VAR 0 2
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 21
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: LD_INT 58
2980: PUSH
2981: EMPTY
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
2994: LD_VAR 0 6
2998: PUSH
2999: LD_INT 0
3001: GREATER
3002: PUSH
3003: LD_VAR 0 7
3007: PUSH
3008: LD_INT 0
3010: GREATER
3011: AND
3012: IFFALSE 3082
// begin for i in turretsList do
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 6
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3080
// begin for j in enemyBuildings do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: FOR_IN
3038: IFFALSE 3076
// begin if GetDistUnits ( i , j ) < 20 then
3040: LD_VAR 0 4
3044: PPUSH
3045: LD_VAR 0 5
3049: PPUSH
3050: CALL_OW 296
3054: PUSH
3055: LD_INT 20
3057: LESS
3058: IFFALSE 3074
// begin ComAttackUnit ( i , j ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_VAR 0 5
3069: PPUSH
3070: CALL_OW 115
// end ; end ;
3074: GO 3037
3076: POP
3077: POP
// end ;
3078: GO 3024
3080: POP
3081: POP
// end ; end ;
3082: LD_VAR 0 3
3086: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3087: LD_INT 0
3089: PPUSH
3090: PPUSH
// for i = 1 to vehCount do
3091: LD_ADDR_VAR 0 9
3095: PUSH
3096: DOUBLE
3097: LD_INT 1
3099: DEC
3100: ST_TO_ADDR
3101: LD_VAR 0 3
3105: PUSH
3106: FOR_TO
3107: IFFALSE 3154
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_VAR 0 7
3118: PPUSH
3119: LD_VAR 0 5
3123: PPUSH
3124: LD_VAR 0 6
3128: PPUSH
3129: LD_VAR 0 4
3133: PUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 12
3146: ARRAY
3147: PPUSH
3148: CALL_OW 185
3152: GO 3106
3154: POP
3155: POP
// end ;
3156: LD_VAR 0 8
3160: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3161: LD_INT 0
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3169: LD_EXP 11
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 4
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_OWVAR 67
3192: ARRAY
3193: GREATEREQUAL
3194: PUSH
3195: LD_EXP 12
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_OWVAR 67
3218: ARRAY
3219: GREATEREQUAL
3220: AND
3221: IFFALSE 3454
// begin repeat wait ( 0 0$1 ) ;
3223: LD_INT 35
3225: PPUSH
3226: CALL_OW 67
// for j in russianTanks do
3230: LD_ADDR_VAR 0 4
3234: PUSH
3235: LD_EXP 11
3239: PUSH
3240: FOR_IN
3241: IFFALSE 3442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3243: LD_ADDR_VAR 0 6
3247: PUSH
3248: LD_INT 81
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: LD_INT 101
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: PPUSH
3279: LD_VAR 0 4
3283: PPUSH
3284: CALL_OW 74
3288: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3289: LD_ADDR_VAR 0 7
3293: PUSH
3294: LD_INT 81
3296: PUSH
3297: LD_VAR 0 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 101
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: LD_INT 59
3321: PUSH
3322: EMPTY
3323: LIST
3324: PUSH
3325: LD_INT 21
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 21
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: PPUSH
3364: LD_VAR 0 4
3368: PPUSH
3369: CALL_OW 74
3373: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3374: LD_VAR 0 4
3378: PPUSH
3379: LD_VAR 0 6
3383: PPUSH
3384: CALL_OW 296
3388: PUSH
3389: LD_INT 8
3391: PLUS
3392: PUSH
3393: LD_VAR 0 4
3397: PPUSH
3398: LD_VAR 0 7
3402: PPUSH
3403: CALL_OW 296
3407: LESS
3408: IFFALSE 3426
// ComAttackUnit ( j , target1 ) else
3410: LD_VAR 0 4
3414: PPUSH
3415: LD_VAR 0 6
3419: PPUSH
3420: CALL_OW 115
3424: GO 3440
// ComAttackUnit ( j , target2 ) ;
3426: LD_VAR 0 4
3430: PPUSH
3431: LD_VAR 0 7
3435: PPUSH
3436: CALL_OW 115
// end ;
3440: GO 3240
3442: POP
3443: POP
// until russianTanks = 0 ;
3444: LD_EXP 11
3448: PUSH
3449: LD_INT 0
3451: EQUAL
3452: IFFALSE 3223
// end ; end ;
3454: LD_VAR 0 2
3458: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
3459: LD_INT 0
3461: PPUSH
3462: PPUSH
3463: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
3464: LD_EXP 11
3468: PUSH
3469: LD_INT 3
3471: PUSH
3472: LD_INT 4
3474: PUSH
3475: LD_INT 4
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: GREATEREQUAL
3489: PUSH
3490: LD_EXP 12
3494: PUSH
3495: LD_INT 1
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: LD_INT 2
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_OWVAR 67
3513: ARRAY
3514: GREATEREQUAL
3515: AND
3516: IFFALSE 3637
// repeat wait ( 0 0$1 ) ;
3518: LD_INT 35
3520: PPUSH
3521: CALL_OW 67
// if russianTimeLapsers > 0 then
3525: LD_EXP 12
3529: PUSH
3530: LD_INT 0
3532: GREATER
3533: IFFALSE 3627
// for j in russianTimeLapsers do
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: LD_EXP 12
3544: PUSH
3545: FOR_IN
3546: IFFALSE 3625
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3548: LD_ADDR_VAR 0 4
3552: PUSH
3553: LD_INT 81
3555: PUSH
3556: LD_VAR 0 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 101
3567: PUSH
3568: LD_INT 1
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL_OW 69
3583: PPUSH
3584: LD_VAR 0 3
3588: PPUSH
3589: CALL_OW 74
3593: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_VAR 0 4
3603: PPUSH
3604: CALL_OW 250
3608: PPUSH
3609: LD_VAR 0 4
3613: PPUSH
3614: CALL_OW 251
3618: PPUSH
3619: CALL_OW 111
// end ;
3623: GO 3545
3625: POP
3626: POP
// until russianTimeLapsers = 0 ;
3627: LD_EXP 12
3631: PUSH
3632: LD_INT 0
3634: EQUAL
3635: IFFALSE 3518
// end ; end_of_file
3637: LD_VAR 0 2
3641: RET
// every 0 0$1 do
3642: GO 3644
3644: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
3645: LD_INT 3
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: CALL 1530 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
3658: LD_INT 3
3660: PPUSH
3661: LD_INT 15
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL 1530 0 3
// end ;
3671: END
// every 0 0$1 trigger russianAI = 1 do
3672: LD_EXP 13
3676: PUSH
3677: LD_INT 1
3679: EQUAL
3680: IFFALSE 3813
3682: GO 3684
3684: DISABLE
// begin enable ;
3685: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
3686: LD_INT 3
3688: PPUSH
3689: LD_INT 22
3691: PPUSH
3692: LD_INT 7
3694: PPUSH
3695: LD_EXP 10
3699: PPUSH
3700: CALL 1615 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
3704: LD_INT 3
3706: PPUSH
3707: LD_INT 8
3709: PPUSH
3710: LD_INT 7
3712: PPUSH
3713: LD_INT 14
3715: PUSH
3716: LD_INT 15
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_INT 2
3728: PPUSH
3729: CALL_OW 12
3733: ARRAY
3734: PPUSH
3735: CALL 2006 0 4
// AttackVehicles ( 3 ) ;
3739: LD_INT 3
3741: PPUSH
3742: CALL 3161 0 1
// CollectCrates ( 3 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) , RuCratesArea ) ;
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 22
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 21
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 51
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: PPUSH
3784: CALL_OW 69
3788: PPUSH
3789: LD_INT 10
3791: PPUSH
3792: CALL 2714 0 3
// AttackNearBuildings ( 3 , 1 ) ;
3796: LD_INT 3
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: CALL 2857 0 2
// TimeLapsersAI ( 3 ) ;
3806: LD_INT 3
3808: PPUSH
3809: CALL 3459 0 1
// end ;
3813: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] ] ) = 0 do
3814: LD_EXP 13
3818: PUSH
3819: LD_INT 1
3821: EQUAL
3822: PUSH
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 50
3845: PUSH
3846: EMPTY
3847: LIST
3848: PUSH
3849: LD_INT 33
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PPUSH
3865: CALL_OW 69
3869: PUSH
3870: LD_INT 0
3872: EQUAL
3873: AND
3874: IFFALSE 4061
3876: GO 3878
3878: DISABLE
// begin enable ;
3879: ENABLE
// if russianRocketsAvalaible = 0 then
3880: LD_EXP 14
3884: PUSH
3885: LD_INT 0
3887: EQUAL
3888: IFFALSE 3945
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
3890: LD_INT 3
3892: PPUSH
3893: LD_INT 1
3895: PPUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 4
3901: PUSH
3902: LD_INT 4
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_OWVAR 67
3914: ARRAY
3915: PPUSH
3916: LD_INT 46
3918: PUSH
3919: LD_INT 45
3921: PUSH
3922: LD_INT 44
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 24
3938: PPUSH
3939: CALL 3087 0 7
3943: GO 4002
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
3945: LD_INT 3
3947: PPUSH
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 3
3953: PUSH
3954: LD_INT 4
3956: PUSH
3957: LD_INT 4
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: PUSH
3965: LD_OWVAR 67
3969: ARRAY
3970: PPUSH
3971: LD_INT 46
3973: PUSH
3974: LD_INT 45
3976: PUSH
3977: LD_INT 44
3979: PUSH
3980: LD_INT 47
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: PPUSH
3989: LD_INT 3
3991: PPUSH
3992: LD_INT 3
3994: PPUSH
3995: LD_INT 24
3997: PPUSH
3998: CALL 3087 0 7
// if russianTimeLapsers = 0 then
4002: LD_EXP 12
4006: PUSH
4007: LD_INT 0
4009: EQUAL
4010: IFFALSE 4061
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 40
4017: PPUSH
4018: LD_INT 1
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: LD_INT 2
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: LD_OWVAR 67
4036: ARRAY
4037: PPUSH
4038: LD_INT 49
4040: PUSH
4041: LD_INT 49
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 3
4053: PPUSH
4054: LD_INT 24
4056: PPUSH
4057: CALL 3087 0 7
// end ; end_of_file
4061: END
// every 1 do var dec1 , dec2 ;
4062: GO 4064
4064: DISABLE
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
// begin InGameOn ;
4069: CALL_OW 8
// CenterNowOnUnits ( JMMveh ) ;
4073: LD_INT 95
4075: PPUSH
4076: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4080: LD_INT 95
4082: PPUSH
4083: LD_INT 30
4085: PPUSH
4086: LD_INT 11
4088: PPUSH
4089: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4093: LD_INT 30
4095: PPUSH
4096: LD_INT 11
4098: PPUSH
4099: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4103: LD_EXP 5
4107: PPUSH
4108: LD_STRING D1-Pow-1
4110: PPUSH
4111: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4115: LD_EXP 1
4119: PPUSH
4120: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4124: LD_EXP 1
4128: PPUSH
4129: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4133: LD_EXP 1
4137: PPUSH
4138: LD_STRING D1-JMM-1
4140: PPUSH
4141: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4145: LD_EXP 5
4149: PPUSH
4150: LD_STRING D1-Pow-2
4152: PPUSH
4153: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4157: LD_EXP 1
4161: PPUSH
4162: LD_STRING D1-JMM-2
4164: PPUSH
4165: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4169: LD_EXP 1
4173: PPUSH
4174: LD_INT 95
4176: PPUSH
4177: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4181: LD_STRING M1
4183: PPUSH
4184: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4188: LD_INT 35
4190: PPUSH
4191: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4195: LD_EXP 1
4199: PPUSH
4200: LD_INT 95
4202: PPUSH
4203: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4207: LD_INT 95
4209: PPUSH
4210: LD_INT 51
4212: PPUSH
4213: LD_INT 21
4215: PPUSH
4216: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4220: LD_INT 95
4222: PPUSH
4223: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4227: LD_INT 95
4229: PPUSH
4230: LD_INT 5
4232: PPUSH
4233: CALL_OW 308
4237: IFFALSE 4188
// if JMMGirl = 1 then
4239: LD_EXP 7
4243: PUSH
4244: LD_INT 1
4246: EQUAL
4247: IFFALSE 4548
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4249: LD_EXP 2
4253: PPUSH
4254: LD_STRING D2J-Joan-1
4256: PPUSH
4257: CALL_OW 94
// dec1 = Query1 ;
4261: LD_ADDR_VAR 0 1
4265: PUSH
4266: CALL 1129 0 0
4270: ST_TO_ADDR
// if dec1 = 1 then
4271: LD_VAR 0 1
4275: PUSH
4276: LD_INT 1
4278: EQUAL
4279: IFFALSE 4526
// begin ComExitVehicle ( JMM ) ;
4281: LD_EXP 1
4285: PPUSH
4286: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
4290: LD_EXP 1
4294: PPUSH
4295: LD_STRING D2J-JMM-1
4297: PPUSH
4298: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
4302: LD_EXP 2
4306: PPUSH
4307: LD_STRING D2J-Joan-2
4309: PPUSH
4310: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
4314: LD_EXP 1
4318: PPUSH
4319: LD_STRING D2J-JMM-2
4321: PPUSH
4322: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
4326: LD_EXP 2
4330: PPUSH
4331: LD_STRING D2J-Joan-3
4333: PPUSH
4334: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4338: LD_EXP 5
4342: PPUSH
4343: LD_STRING DPowell-Pow-1
4345: PPUSH
4346: CALL_OW 94
// dec2 = Query2 ;
4350: LD_ADDR_VAR 0 2
4354: PUSH
4355: CALL 1184 0 0
4359: ST_TO_ADDR
// if dec2 = 1 then
4360: LD_VAR 0 2
4364: PUSH
4365: LD_INT 1
4367: EQUAL
4368: IFFALSE 4410
// begin Say ( JMM , D2Ja-JMM-1 ) ;
4370: LD_EXP 1
4374: PPUSH
4375: LD_STRING D2Ja-JMM-1
4377: PPUSH
4378: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
4382: LD_EXP 2
4386: PPUSH
4387: LD_STRING D2Ja-Joan-1
4389: PPUSH
4390: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
4394: LD_EXP 1
4398: PPUSH
4399: LD_STRING D2Ja-JMM-2
4401: PPUSH
4402: CALL_OW 88
// InGameOff ;
4406: CALL_OW 9
// end ; if dec2 = 2 then
4410: LD_VAR 0 2
4414: PUSH
4415: LD_INT 2
4417: EQUAL
4418: IFFALSE 4492
// begin Say ( JMM , D2Jb-JMM-1 ) ;
4420: LD_EXP 1
4424: PPUSH
4425: LD_STRING D2Jb-JMM-1
4427: PPUSH
4428: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
4432: LD_EXP 2
4436: PPUSH
4437: LD_STRING D2Jb-Joan-1
4439: PPUSH
4440: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
4444: LD_EXP 1
4448: PPUSH
4449: LD_STRING D2Jb-JMM-2
4451: PPUSH
4452: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
4456: LD_EXP 2
4460: PPUSH
4461: LD_STRING D2Jb-Joan-2
4463: PPUSH
4464: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
4468: LD_EXP 1
4472: PPUSH
4473: LD_STRING D2Jb-JMM-3
4475: PPUSH
4476: CALL_OW 88
// fastEnd = 1 ;
4480: LD_ADDR_EXP 15
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// FinishMission ;
4488: CALL 7963 0 0
// end ; if dec2 = 3 then
4492: LD_VAR 0 2
4496: PUSH
4497: LD_INT 3
4499: EQUAL
4500: IFFALSE 4526
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
4502: LD_EXP 2
4506: PPUSH
4507: LD_STRING D2Jc-Joan-1
4509: PPUSH
4510: CALL_OW 94
// fastEnd = 1 ;
4514: LD_ADDR_EXP 15
4518: PUSH
4519: LD_INT 1
4521: ST_TO_ADDR
// FinishMission ;
4522: CALL 7963 0 0
// end ; end ; if dec1 = 2 then
4526: LD_VAR 0 1
4530: PUSH
4531: LD_INT 2
4533: EQUAL
4534: IFFALSE 4548
// begin fastEnd = 1 ;
4536: LD_ADDR_EXP 15
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// FinishMission ;
4544: CALL 7963 0 0
// end ; end ; if JMMGirl = 2 then
4548: LD_EXP 7
4552: PUSH
4553: LD_INT 2
4555: EQUAL
4556: IFFALSE 4869
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
4558: LD_EXP 3
4562: PPUSH
4563: LD_STRING D2L-Lisa-1
4565: PPUSH
4566: CALL_OW 94
// dec1 = Query1 ;
4570: LD_ADDR_VAR 0 1
4574: PUSH
4575: CALL 1129 0 0
4579: ST_TO_ADDR
// if dec1 = 1 then
4580: LD_VAR 0 1
4584: PUSH
4585: LD_INT 1
4587: EQUAL
4588: IFFALSE 4847
// begin ComExitVehicle ( JMM ) ;
4590: LD_EXP 1
4594: PPUSH
4595: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
4599: LD_EXP 1
4603: PPUSH
4604: LD_STRING D2L-JMM-1
4606: PPUSH
4607: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
4611: LD_EXP 3
4615: PPUSH
4616: LD_STRING D2L-Lisa-2
4618: PPUSH
4619: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
4623: LD_EXP 1
4627: PPUSH
4628: LD_STRING D2L-JMM-2
4630: PPUSH
4631: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
4635: LD_EXP 3
4639: PPUSH
4640: LD_STRING D2L-Lisa-3
4642: PPUSH
4643: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4647: LD_EXP 5
4651: PPUSH
4652: LD_STRING DPowell-Pow-1
4654: PPUSH
4655: CALL_OW 94
// dec2 = Query2 ;
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: CALL 1184 0 0
4668: ST_TO_ADDR
// if dec2 = 1 then
4669: LD_VAR 0 2
4673: PUSH
4674: LD_INT 1
4676: EQUAL
4677: IFFALSE 4743
// begin Say ( JMM , D2La-JMM-1 ) ;
4679: LD_EXP 1
4683: PPUSH
4684: LD_STRING D2La-JMM-1
4686: PPUSH
4687: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
4691: LD_EXP 3
4695: PPUSH
4696: LD_STRING D2La-Lisa-1
4698: PPUSH
4699: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
4703: LD_EXP 1
4707: PPUSH
4708: LD_STRING D2La-JMM-2
4710: PPUSH
4711: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
4715: LD_EXP 3
4719: PPUSH
4720: LD_STRING D2La-Lisa-2
4722: PPUSH
4723: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
4727: LD_EXP 1
4731: PPUSH
4732: LD_STRING D2La-JMM-3
4734: PPUSH
4735: CALL_OW 88
// InGameOff ;
4739: CALL_OW 9
// end ; if dec2 = 2 then
4743: LD_VAR 0 2
4747: PUSH
4748: LD_INT 2
4750: EQUAL
4751: IFFALSE 4813
// begin Say ( JMM , D2Lb-JMM-1 ) ;
4753: LD_EXP 1
4757: PPUSH
4758: LD_STRING D2Lb-JMM-1
4760: PPUSH
4761: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
4765: LD_EXP 3
4769: PPUSH
4770: LD_STRING D2Lb-Lisa-1
4772: PPUSH
4773: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
4777: LD_EXP 1
4781: PPUSH
4782: LD_STRING D2Lb-JMM-2
4784: PPUSH
4785: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
4789: LD_EXP 3
4793: PPUSH
4794: LD_STRING D2Lb-Lisa-2
4796: PPUSH
4797: CALL_OW 94
// fastEnd = 1 ;
4801: LD_ADDR_EXP 15
4805: PUSH
4806: LD_INT 1
4808: ST_TO_ADDR
// FinishMission ;
4809: CALL 7963 0 0
// end ; if dec2 = 3 then
4813: LD_VAR 0 2
4817: PUSH
4818: LD_INT 3
4820: EQUAL
4821: IFFALSE 4847
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
4823: LD_EXP 3
4827: PPUSH
4828: LD_STRING D2Lc-Lisa-1
4830: PPUSH
4831: CALL_OW 94
// fastEnd = 1 ;
4835: LD_ADDR_EXP 15
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// FinishMission ;
4843: CALL 7963 0 0
// end ; end ; if dec1 = 2 then
4847: LD_VAR 0 1
4851: PUSH
4852: LD_INT 2
4854: EQUAL
4855: IFFALSE 4869
// begin fastEnd = 1 ;
4857: LD_ADDR_EXP 15
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// FinishMission ;
4865: CALL 7963 0 0
// end ; end ; if JMMGirl = 3 then
4869: LD_EXP 7
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: IFFALSE 5094
// begin SayRadio ( Connie , D2X-Con-1 ) ;
4879: LD_EXP 4
4883: PPUSH
4884: LD_STRING D2X-Con-1
4886: PPUSH
4887: CALL_OW 94
// dec1 = Query1 ;
4891: LD_ADDR_VAR 0 1
4895: PUSH
4896: CALL 1129 0 0
4900: ST_TO_ADDR
// if dec1 = 1 then
4901: LD_VAR 0 1
4905: PUSH
4906: LD_INT 1
4908: EQUAL
4909: IFFALSE 5072
// begin ComExitVehicle ( JMM ) ;
4911: LD_EXP 1
4915: PPUSH
4916: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
4920: LD_EXP 1
4924: PPUSH
4925: LD_STRING D2X-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
4932: LD_EXP 4
4936: PPUSH
4937: LD_STRING D2X-Con-2
4939: PPUSH
4940: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4944: LD_EXP 5
4948: PPUSH
4949: LD_STRING DPowell-Pow-1
4951: PPUSH
4952: CALL_OW 94
// dec2 = Query2 ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: CALL 1184 0 0
4965: ST_TO_ADDR
// if dec2 = 1 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: EQUAL
4974: IFFALSE 4992
// begin Say ( JMM , D2Xa-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D2Xa-JMM-1
4983: PPUSH
4984: CALL_OW 88
// InGameOff ;
4988: CALL_OW 9
// end ; if dec2 = 2 then
4992: LD_VAR 0 2
4996: PUSH
4997: LD_INT 2
4999: EQUAL
5000: IFFALSE 5038
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5002: LD_EXP 1
5006: PPUSH
5007: LD_STRING D2Xb-JMM-1
5009: PPUSH
5010: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5014: LD_EXP 4
5018: PPUSH
5019: LD_STRING D2Xb-Con-1
5021: PPUSH
5022: CALL_OW 94
// fastEnd = 1 ;
5026: LD_ADDR_EXP 15
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// FinishMission ;
5034: CALL 7963 0 0
// end ; if dec2 = 3 then
5038: LD_VAR 0 2
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5072
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5048: LD_EXP 4
5052: PPUSH
5053: LD_STRING D2Xc-Con-1
5055: PPUSH
5056: CALL_OW 94
// fastEnd = 1 ;
5060: LD_ADDR_EXP 15
5064: PUSH
5065: LD_INT 1
5067: ST_TO_ADDR
// FinishMission ;
5068: CALL 7963 0 0
// end ; end ; if dec1 = 2 then
5072: LD_VAR 0 1
5076: PUSH
5077: LD_INT 2
5079: EQUAL
5080: IFFALSE 5094
// begin fastEnd = 1 ;
5082: LD_ADDR_EXP 15
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// FinishMission ;
5090: CALL 7963 0 0
// end ; end ; end ;
5094: PPOPN 2
5096: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5097: LD_EXP 1
5101: PPUSH
5102: LD_INT 6
5104: PPUSH
5105: CALL_OW 308
5109: IFFALSE 5875
5111: GO 5113
5113: DISABLE
// begin InGameOn ;
5114: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5118: LD_INT 35
5120: PPUSH
5121: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5125: LD_EXP 1
5129: PPUSH
5130: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5134: LD_EXP 1
5138: PPUSH
5139: LD_INT 62
5141: PPUSH
5142: LD_INT 104
5144: PPUSH
5145: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5149: LD_EXP 1
5153: PPUSH
5154: LD_EXP 2
5158: PPUSH
5159: CALL_OW 296
5163: PUSH
5164: LD_INT 4
5166: LESS
5167: PUSH
5168: LD_EXP 1
5172: PPUSH
5173: LD_EXP 3
5177: PPUSH
5178: CALL_OW 296
5182: PUSH
5183: LD_INT 4
5185: LESS
5186: OR
5187: PUSH
5188: LD_EXP 1
5192: PPUSH
5193: LD_EXP 4
5197: PPUSH
5198: CALL_OW 296
5202: PUSH
5203: LD_INT 4
5205: LESS
5206: OR
5207: IFFALSE 5118
// case JMMGirl of 1 :
5209: LD_EXP 7
5213: PUSH
5214: LD_INT 1
5216: DOUBLE
5217: EQUAL
5218: IFTRUE 5222
5220: GO 5434
5222: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5223: LD_INT 22
5225: PUSH
5226: LD_INT 4
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: PPUSH
5238: LD_INT 1
5240: PPUSH
5241: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
5245: LD_EXP 2
5249: PPUSH
5250: LD_EXP 1
5254: PPUSH
5255: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
5259: LD_EXP 1
5263: PPUSH
5264: LD_EXP 2
5268: PPUSH
5269: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
5273: LD_EXP 2
5277: PUSH
5278: LD_EXP 1
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 87
// wait ( 0 0$1 ) ;
5291: LD_INT 35
5293: PPUSH
5294: CALL_OW 67
// DialogueOn ;
5298: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
5302: LD_EXP 2
5306: PPUSH
5307: LD_STRING D3J-Joan-1
5309: PPUSH
5310: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
5314: LD_EXP 1
5318: PPUSH
5319: LD_STRING D3J-JMM-1
5321: PPUSH
5322: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
5326: LD_EXP 2
5330: PPUSH
5331: LD_STRING D3J-Joan-2
5333: PPUSH
5334: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
5338: LD_EXP 1
5342: PPUSH
5343: LD_STRING D3J-JMM-2
5345: PPUSH
5346: CALL_OW 88
// wait ( 0 0$1 ) ;
5350: LD_INT 35
5352: PPUSH
5353: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5357: LD_EXP 1
5361: PPUSH
5362: LD_STRING D4-JMM-1
5364: PPUSH
5365: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
5369: LD_EXP 2
5373: PPUSH
5374: LD_STRING D4-Joan-1
5376: PPUSH
5377: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5381: LD_EXP 1
5385: PPUSH
5386: LD_STRING D4-JMM-2
5388: PPUSH
5389: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
5393: LD_EXP 2
5397: PPUSH
5398: LD_STRING D4-Joan-2
5400: PPUSH
5401: CALL_OW 88
// DialogueOff ;
5405: CALL_OW 7
// InGameOff ;
5409: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
5413: LD_STRING M2J
5415: PPUSH
5416: CALL_OW 337
// SaveForQuickRestart ;
5420: CALL_OW 22
// russianAI = 1 ;
5424: LD_ADDR_EXP 13
5428: PUSH
5429: LD_INT 1
5431: ST_TO_ADDR
// end ; 2 :
5432: GO 5875
5434: LD_INT 2
5436: DOUBLE
5437: EQUAL
5438: IFTRUE 5442
5440: GO 5654
5442: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5443: LD_INT 22
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: CALL_OW 69
5457: PPUSH
5458: LD_INT 1
5460: PPUSH
5461: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
5465: LD_EXP 3
5469: PPUSH
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
5479: LD_EXP 1
5483: PPUSH
5484: LD_EXP 3
5488: PPUSH
5489: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
5493: LD_EXP 3
5497: PUSH
5498: LD_EXP 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 87
// wait ( 0 0$1 ) ;
5511: LD_INT 35
5513: PPUSH
5514: CALL_OW 67
// DialogueOn ;
5518: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
5522: LD_EXP 3
5526: PPUSH
5527: LD_STRING D3L-Lisa-1
5529: PPUSH
5530: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
5534: LD_EXP 1
5538: PPUSH
5539: LD_STRING D3L-JMM-1
5541: PPUSH
5542: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
5546: LD_EXP 3
5550: PPUSH
5551: LD_STRING D3L-Lisa-2
5553: PPUSH
5554: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
5558: LD_EXP 1
5562: PPUSH
5563: LD_STRING D3L-JMM-2
5565: PPUSH
5566: CALL_OW 88
// wait ( 0 0$1 ) ;
5570: LD_INT 35
5572: PPUSH
5573: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5577: LD_EXP 1
5581: PPUSH
5582: LD_STRING D4-JMM-1
5584: PPUSH
5585: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
5589: LD_EXP 3
5593: PPUSH
5594: LD_STRING D4-Lisa-1
5596: PPUSH
5597: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5601: LD_EXP 1
5605: PPUSH
5606: LD_STRING D4-JMM-1
5608: PPUSH
5609: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
5613: LD_EXP 3
5617: PPUSH
5618: LD_STRING D4-Lisa-2
5620: PPUSH
5621: CALL_OW 88
// DialogueOff ;
5625: CALL_OW 7
// InGameOff ;
5629: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
5633: LD_STRING M2L
5635: PPUSH
5636: CALL_OW 337
// SaveForQuickRestart ;
5640: CALL_OW 22
// russianAI = 1 ;
5644: LD_ADDR_EXP 13
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// end ; 3 :
5652: GO 5875
5654: LD_INT 3
5656: DOUBLE
5657: EQUAL
5658: IFTRUE 5662
5660: GO 5874
5662: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5663: LD_INT 22
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PPUSH
5673: CALL_OW 69
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
5685: LD_EXP 4
5689: PPUSH
5690: LD_EXP 1
5694: PPUSH
5695: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_EXP 4
5708: PPUSH
5709: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
5713: LD_EXP 2
5717: PUSH
5718: LD_EXP 1
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PPUSH
5727: CALL_OW 87
// wait ( 0 0$1 ) ;
5731: LD_INT 35
5733: PPUSH
5734: CALL_OW 67
// DialogueOn ;
5738: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
5742: LD_EXP 4
5746: PPUSH
5747: LD_STRING D3X-Con-1
5749: PPUSH
5750: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
5754: LD_EXP 1
5758: PPUSH
5759: LD_STRING D3J-JMM-1
5761: PPUSH
5762: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
5766: LD_EXP 4
5770: PPUSH
5771: LD_STRING D3J-Joan-2
5773: PPUSH
5774: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
5778: LD_EXP 1
5782: PPUSH
5783: LD_STRING D3J-JMM-2
5785: PPUSH
5786: CALL_OW 88
// wait ( 0 0$1 ) ;
5790: LD_INT 35
5792: PPUSH
5793: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4-JMM-1
5804: PPUSH
5805: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
5809: LD_EXP 4
5813: PPUSH
5814: LD_STRING D4-Con-1
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4-JMM-2
5828: PPUSH
5829: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
5833: LD_EXP 4
5837: PPUSH
5838: LD_STRING D4-Con-2
5840: PPUSH
5841: CALL_OW 88
// DialogueOff ;
5845: CALL_OW 7
// InGameOff ;
5849: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
5853: LD_STRING M2X
5855: PPUSH
5856: CALL_OW 337
// SaveForQuickRestart ;
5860: CALL_OW 22
// russianAI = 1 ;
5864: LD_ADDR_EXP 13
5868: PUSH
5869: LD_INT 1
5871: ST_TO_ADDR
// end ; end ;
5872: GO 5875
5874: POP
// end ;
5875: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
5876: LD_INT 32
5878: PPUSH
5879: CALL_OW 306
5883: IFFALSE 6216
5885: GO 5887
5887: DISABLE
// begin case JMMGirl of 1 :
5888: LD_EXP 7
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 6023
5901: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D6J-JMM-1
5909: PPUSH
5910: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
5914: LD_STRING 13f_Denis
5916: PPUSH
5917: CALL_OW 28
5921: PUSH
5922: LD_INT 1
5924: EQUAL
5925: PUSH
5926: LD_STRING 13s_Denis
5928: PPUSH
5929: CALL_OW 28
5933: PUSH
5934: LD_INT 1
5936: EQUAL
5937: OR
5938: IFFALSE 5978
// begin Say ( Joan , D6J-Joan-1 ) ;
5940: LD_EXP 2
5944: PPUSH
5945: LD_STRING D6J-Joan-1
5947: PPUSH
5948: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
5952: LD_EXP 1
5956: PPUSH
5957: LD_STRING D6J-JMM-2
5959: PPUSH
5960: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
5964: LD_EXP 2
5968: PPUSH
5969: LD_STRING D6J-Joan-2
5971: PPUSH
5972: CALL_OW 88
// end else
5976: GO 5990
// begin Say ( Joan , D6J-Joan-2a ) ;
5978: LD_EXP 2
5982: PPUSH
5983: LD_STRING D6J-Joan-2a
5985: PPUSH
5986: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_STRING D6J-JMM-3
5997: PPUSH
5998: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6002: LD_EXP 2
6006: PPUSH
6007: LD_STRING D6J-Joan-3
6009: PPUSH
6010: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6014: LD_STRING M3
6016: PPUSH
6017: CALL_OW 337
// end ; 2 :
6021: GO 6216
6023: LD_INT 2
6025: DOUBLE
6026: EQUAL
6027: IFTRUE 6031
6029: GO 6089
6031: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D6L-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D6L-Lisa-1
6051: PPUSH
6052: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6056: LD_EXP 1
6060: PPUSH
6061: LD_STRING D6L-JMM-2
6063: PPUSH
6064: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6068: LD_EXP 3
6072: PPUSH
6073: LD_STRING D6L-Lisa-2
6075: PPUSH
6076: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6080: LD_STRING M3
6082: PPUSH
6083: CALL_OW 337
// end ; 3 :
6087: GO 6216
6089: LD_INT 3
6091: DOUBLE
6092: EQUAL
6093: IFTRUE 6097
6095: GO 6215
6097: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D6X-JMM-1
6105: PPUSH
6106: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6110: LD_EXP 4
6114: PPUSH
6115: LD_STRING D6X-Con-1
6117: PPUSH
6118: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6122: LD_EXP 1
6126: PPUSH
6127: LD_STRING D6X-JMM-2
6129: PPUSH
6130: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6134: LD_EXP 4
6138: PPUSH
6139: LD_STRING D6X-Con-2
6141: PPUSH
6142: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6146: LD_EXP 1
6150: PPUSH
6151: LD_STRING D6X-JMM-3
6153: PPUSH
6154: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6158: LD_EXP 4
6162: PPUSH
6163: LD_STRING D6X-Con-3
6165: PPUSH
6166: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6170: LD_EXP 1
6174: PPUSH
6175: LD_STRING D6X-JMM-4
6177: PPUSH
6178: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6182: LD_EXP 4
6186: PPUSH
6187: LD_STRING D6X-Con-4
6189: PPUSH
6190: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6194: LD_EXP 1
6198: PPUSH
6199: LD_STRING D6X-JMM-5
6201: PPUSH
6202: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6206: LD_STRING M3
6208: PPUSH
6209: CALL_OW 337
// end ; end ;
6213: GO 6216
6215: POP
// end ;
6216: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6217: LD_INT 22
6219: PUSH
6220: LD_INT 1
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: LD_INT 33
6229: PUSH
6230: LD_INT 2
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: CALL_OW 306
6250: IFFALSE 6396
6252: GO 6254
6254: DISABLE
// begin case JMMGirl of 1 :
6255: LD_EXP 7
6259: PUSH
6260: LD_INT 1
6262: DOUBLE
6263: EQUAL
6264: IFTRUE 6268
6266: GO 6305
6268: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6269: LD_EXP 1
6273: PPUSH
6274: LD_STRING D5-JMM-1
6276: PPUSH
6277: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6281: LD_INT 77
6283: PPUSH
6284: LD_INT 87
6286: PPUSH
6287: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
6291: LD_EXP 2
6295: PPUSH
6296: LD_STRING D5-Joan-1
6298: PPUSH
6299: CALL_OW 88
// end ; 2 :
6303: GO 6396
6305: LD_INT 2
6307: DOUBLE
6308: EQUAL
6309: IFTRUE 6313
6311: GO 6350
6313: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6314: LD_EXP 1
6318: PPUSH
6319: LD_STRING D5-JMM-1
6321: PPUSH
6322: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6326: LD_INT 77
6328: PPUSH
6329: LD_INT 87
6331: PPUSH
6332: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
6336: LD_EXP 3
6340: PPUSH
6341: LD_STRING D5-Lisa-1
6343: PPUSH
6344: CALL_OW 88
// end ; 3 :
6348: GO 6396
6350: LD_INT 3
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6395
6358: POP
// begin Say ( JMM , D5-JMM-1 ) ;
6359: LD_EXP 1
6363: PPUSH
6364: LD_STRING D5-JMM-1
6366: PPUSH
6367: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
6371: LD_INT 77
6373: PPUSH
6374: LD_INT 87
6376: PPUSH
6377: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
6381: LD_EXP 4
6385: PPUSH
6386: LD_STRING D5-Con-1
6388: PPUSH
6389: CALL_OW 88
// end ; end ;
6393: GO 6396
6395: POP
// end ; end_of_file
6396: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 255
6406: PUSH
6407: LD_INT 3
6409: EQUAL
6410: IFFALSE 6484
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6412: LD_ADDR_EXP 10
6416: PUSH
6417: LD_EXP 10
6421: PPUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 3
6429: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6430: LD_ADDR_EXP 10
6434: PUSH
6435: LD_EXP 10
6439: PPUSH
6440: LD_INT 1
6442: PPUSH
6443: CALL_OW 3
6447: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6448: LD_ADDR_EXP 10
6452: PUSH
6453: LD_EXP 10
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: CALL_OW 3
6465: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
6466: LD_ADDR_EXP 10
6470: PUSH
6471: LD_EXP 10
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: CALL_OW 3
6483: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 255
6493: PUSH
6494: LD_INT 3
6496: EQUAL
6497: PUSH
6498: LD_VAR 0 1
6502: PPUSH
6503: CALL_OW 266
6507: PUSH
6508: LD_INT 0
6510: EQUAL
6511: PUSH
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 266
6521: PUSH
6522: LD_INT 2
6524: EQUAL
6525: OR
6526: PUSH
6527: LD_VAR 0 1
6531: PPUSH
6532: CALL_OW 266
6536: PUSH
6537: LD_INT 4
6539: EQUAL
6540: OR
6541: PUSH
6542: EMPTY
6543: LIST
6544: AND
6545: IFFALSE 6556
// ComUpgrade ( building ) ;
6547: LD_VAR 0 1
6551: PPUSH
6552: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 255
6565: PUSH
6566: LD_INT 3
6568: EQUAL
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 266
6579: PUSH
6580: LD_INT 32
6582: EQUAL
6583: AND
6584: IFFALSE 6625
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
6586: LD_VAR 0 1
6590: PPUSH
6591: LD_INT 42
6593: PUSH
6594: LD_INT 43
6596: PUSH
6597: LD_INT 44
6599: PUSH
6600: LD_INT 46
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 1
6611: PPUSH
6612: LD_INT 4
6614: PPUSH
6615: CALL_OW 12
6619: ARRAY
6620: PPUSH
6621: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
6625: LD_VAR 0 1
6629: PPUSH
6630: CALL_OW 255
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: PUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 266
6648: PUSH
6649: LD_INT 33
6651: EQUAL
6652: AND
6653: IFFALSE 6694
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
6655: LD_VAR 0 1
6659: PPUSH
6660: LD_INT 42
6662: PUSH
6663: LD_INT 43
6665: PUSH
6666: LD_INT 44
6668: PUSH
6669: LD_INT 46
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 1
6680: PPUSH
6681: LD_INT 4
6683: PPUSH
6684: CALL_OW 12
6688: ARRAY
6689: PPUSH
6690: CALL_OW 208
// end ;
6694: PPOPN 1
6696: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
6697: LD_VAR 0 1
6701: PPUSH
6702: CALL_OW 255
6706: PUSH
6707: LD_INT 3
6709: EQUAL
6710: PUSH
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 247
6720: PUSH
6721: LD_INT 3
6723: EQUAL
6724: AND
6725: IFFALSE 7417
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 266
6736: PUSH
6737: LD_INT 31
6739: EQUAL
6740: PUSH
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 266
6750: PUSH
6751: LD_INT 32
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_VAR 0 1
6760: PPUSH
6761: CALL_OW 266
6765: PUSH
6766: LD_INT 36
6768: EQUAL
6769: OR
6770: PUSH
6771: LD_VAR 0 1
6775: PPUSH
6776: CALL_OW 266
6780: PUSH
6781: LD_INT 0
6783: EQUAL
6784: OR
6785: PUSH
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 266
6795: PUSH
6796: LD_INT 24
6798: EQUAL
6799: OR
6800: PUSH
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 266
6810: PUSH
6811: LD_INT 17
6813: EQUAL
6814: OR
6815: PUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 266
6825: PUSH
6826: LD_INT 25
6828: EQUAL
6829: OR
6830: PUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 266
6840: PUSH
6841: LD_INT 19
6843: EQUAL
6844: OR
6845: PUSH
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL_OW 266
6855: PUSH
6856: LD_INT 20
6858: EQUAL
6859: OR
6860: PUSH
6861: LD_VAR 0 1
6865: PPUSH
6866: CALL_OW 266
6870: PUSH
6871: LD_INT 18
6873: EQUAL
6874: OR
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 266
6885: PUSH
6886: LD_INT 21
6888: EQUAL
6889: OR
6890: PUSH
6891: LD_VAR 0 1
6895: PPUSH
6896: CALL_OW 266
6900: PUSH
6901: LD_INT 23
6903: EQUAL
6904: OR
6905: PUSH
6906: LD_VAR 0 1
6910: PPUSH
6911: CALL_OW 266
6915: PUSH
6916: LD_INT 16
6918: EQUAL
6919: OR
6920: PUSH
6921: LD_VAR 0 1
6925: PPUSH
6926: CALL_OW 266
6930: PUSH
6931: LD_INT 6
6933: EQUAL
6934: OR
6935: PUSH
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 266
6945: PUSH
6946: LD_INT 29
6948: EQUAL
6949: OR
6950: PUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 266
6960: PUSH
6961: LD_INT 26
6963: EQUAL
6964: OR
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 266
6975: PUSH
6976: LD_INT 30
6978: EQUAL
6979: OR
6980: PUSH
6981: LD_VAR 0 1
6985: PPUSH
6986: CALL_OW 266
6990: PUSH
6991: LD_INT 28
6993: EQUAL
6994: OR
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 266
7005: PUSH
7006: LD_INT 27
7008: EQUAL
7009: OR
7010: PUSH
7011: LD_VAR 0 1
7015: PPUSH
7016: CALL_OW 266
7020: PUSH
7021: LD_INT 33
7023: EQUAL
7024: OR
7025: PUSH
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 266
7035: PUSH
7036: LD_INT 2
7038: EQUAL
7039: OR
7040: PUSH
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 266
7050: PUSH
7051: LD_INT 4
7053: EQUAL
7054: OR
7055: IFFALSE 7141
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7057: LD_ADDR_EXP 10
7061: PUSH
7062: LD_EXP 10
7066: PUSH
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 266
7076: ADD
7077: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7078: LD_ADDR_EXP 10
7082: PUSH
7083: LD_EXP 10
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 250
7097: ADD
7098: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7099: LD_ADDR_EXP 10
7103: PUSH
7104: LD_EXP 10
7108: PUSH
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 251
7118: ADD
7119: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7120: LD_ADDR_EXP 10
7124: PUSH
7125: LD_EXP 10
7129: PUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 254
7139: ADD
7140: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
7141: LD_VAR 0 1
7145: PPUSH
7146: CALL_OW 266
7150: PUSH
7151: LD_INT 1
7153: EQUAL
7154: IFFALSE 7233
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
7156: LD_ADDR_EXP 10
7160: PUSH
7161: LD_EXP 10
7165: PUSH
7166: LD_INT 0
7168: ADD
7169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7170: LD_ADDR_EXP 10
7174: PUSH
7175: LD_EXP 10
7179: PUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: CALL_OW 250
7189: ADD
7190: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7191: LD_ADDR_EXP 10
7195: PUSH
7196: LD_EXP 10
7200: PUSH
7201: LD_VAR 0 1
7205: PPUSH
7206: CALL_OW 251
7210: ADD
7211: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7212: LD_ADDR_EXP 10
7216: PUSH
7217: LD_EXP 10
7221: PUSH
7222: LD_VAR 0 1
7226: PPUSH
7227: CALL_OW 254
7231: ADD
7232: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 266
7242: PUSH
7243: LD_INT 3
7245: EQUAL
7246: IFFALSE 7325
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
7248: LD_ADDR_EXP 10
7252: PUSH
7253: LD_EXP 10
7257: PUSH
7258: LD_INT 2
7260: ADD
7261: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7262: LD_ADDR_EXP 10
7266: PUSH
7267: LD_EXP 10
7271: PUSH
7272: LD_VAR 0 1
7276: PPUSH
7277: CALL_OW 250
7281: ADD
7282: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7283: LD_ADDR_EXP 10
7287: PUSH
7288: LD_EXP 10
7292: PUSH
7293: LD_VAR 0 1
7297: PPUSH
7298: CALL_OW 251
7302: ADD
7303: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7304: LD_ADDR_EXP 10
7308: PUSH
7309: LD_EXP 10
7313: PUSH
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 254
7323: ADD
7324: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL_OW 266
7334: PUSH
7335: LD_INT 5
7337: EQUAL
7338: IFFALSE 7417
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
7340: LD_ADDR_EXP 10
7344: PUSH
7345: LD_EXP 10
7349: PUSH
7350: LD_INT 4
7352: ADD
7353: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7354: LD_ADDR_EXP 10
7358: PUSH
7359: LD_EXP 10
7363: PUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 250
7373: ADD
7374: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7375: LD_ADDR_EXP 10
7379: PUSH
7380: LD_EXP 10
7384: PUSH
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 251
7394: ADD
7395: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7396: LD_ADDR_EXP 10
7400: PUSH
7401: LD_EXP 10
7405: PUSH
7406: LD_VAR 0 1
7410: PPUSH
7411: CALL_OW 254
7415: ADD
7416: ST_TO_ADDR
// end ; end ; end ;
7417: PPOPN 1
7419: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 1
7427: EQUAL
7428: PUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_INT 40
7436: EQUAL
7437: OR
7438: IFFALSE 7562
// if GetSide ( vehicle ) = 3 then
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 255
7449: PUSH
7450: LD_INT 3
7452: EQUAL
7453: IFFALSE 7562
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
7455: LD_VAR 0 1
7459: PPUSH
7460: CALL_OW 264
7464: PUSH
7465: LD_INT 47
7467: EQUAL
7468: PUSH
7469: LD_VAR 0 1
7473: PPUSH
7474: CALL_OW 264
7478: PUSH
7479: LD_INT 46
7481: EQUAL
7482: OR
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 264
7493: PUSH
7494: LD_INT 45
7496: EQUAL
7497: OR
7498: PUSH
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL_OW 264
7508: PUSH
7509: LD_INT 44
7511: EQUAL
7512: OR
7513: IFFALSE 7531
// russianTanks = russianTanks ^ vehicle ;
7515: LD_ADDR_EXP 11
7519: PUSH
7520: LD_EXP 11
7524: PUSH
7525: LD_VAR 0 1
7529: ADD
7530: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 264
7540: PUSH
7541: LD_INT 49
7543: EQUAL
7544: IFFALSE 7562
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
7546: LD_ADDR_EXP 12
7550: PUSH
7551: LD_EXP 12
7555: PUSH
7556: LD_VAR 0 1
7560: ADD
7561: ST_TO_ADDR
// ; end ; end ;
7562: PPOPN 2
7564: END
// on UnitGoesToRed ( unit ) do var i ;
7565: LD_INT 0
7567: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
7568: LD_VAR 0 1
7572: PPUSH
7573: CALL_OW 255
7577: PUSH
7578: LD_INT 3
7580: EQUAL
7581: PUSH
7582: LD_VAR 0 1
7586: PPUSH
7587: CALL_OW 247
7591: PUSH
7592: LD_INT 2
7594: EQUAL
7595: AND
7596: IFFALSE 7714
// begin if russianTanks > 0 then
7598: LD_EXP 11
7602: PUSH
7603: LD_INT 0
7605: GREATER
7606: IFFALSE 7656
// for i in russianTanks do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_EXP 11
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7654
// if i = unit then
7621: LD_VAR 0 2
7625: PUSH
7626: LD_VAR 0 1
7630: EQUAL
7631: IFFALSE 7652
// russianTanks = russianTanks diff [ unit ] ;
7633: LD_ADDR_EXP 11
7637: PUSH
7638: LD_EXP 11
7642: PUSH
7643: LD_VAR 0 1
7647: PUSH
7648: EMPTY
7649: LIST
7650: DIFF
7651: ST_TO_ADDR
7652: GO 7618
7654: POP
7655: POP
// if russianTimeLapsers > 0 then
7656: LD_EXP 12
7660: PUSH
7661: LD_INT 0
7663: GREATER
7664: IFFALSE 7714
// for i in russianTimeLapsers do
7666: LD_ADDR_VAR 0 2
7670: PUSH
7671: LD_EXP 12
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7712
// if i = unit then
7679: LD_VAR 0 2
7683: PUSH
7684: LD_VAR 0 1
7688: EQUAL
7689: IFFALSE 7710
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
7691: LD_ADDR_EXP 12
7695: PUSH
7696: LD_EXP 12
7700: PUSH
7701: LD_VAR 0 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: DIFF
7709: ST_TO_ADDR
7710: GO 7676
7712: POP
7713: POP
// end ; end ; end_of_file
7714: PPOPN 2
7716: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do
7717: LD_EXP 1
7721: PPUSH
7722: CALL_OW 310
7726: PPUSH
7727: LD_INT 12
7729: PPUSH
7730: CALL_OW 308
7734: PUSH
7735: LD_EXP 15
7739: PUSH
7740: LD_INT 0
7742: EQUAL
7743: AND
7744: IFFALSE 7962
7746: GO 7748
7748: DISABLE
// begin enable ;
7749: ENABLE
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
7750: LD_EXP 1
7754: PPUSH
7755: CALL_OW 310
7759: PPUSH
7760: LD_EXP 2
7764: PPUSH
7765: CALL_OW 310
7769: PPUSH
7770: CALL_OW 296
7774: PUSH
7775: LD_INT 10
7777: LESS
7778: PUSH
7779: LD_EXP 1
7783: PPUSH
7784: CALL_OW 310
7788: PPUSH
7789: LD_EXP 3
7793: PPUSH
7794: CALL_OW 310
7798: PPUSH
7799: CALL_OW 296
7803: PUSH
7804: LD_INT 10
7806: LESS
7807: OR
7808: PUSH
7809: LD_EXP 1
7813: PPUSH
7814: CALL_OW 310
7818: PPUSH
7819: LD_EXP 4
7823: PPUSH
7824: CALL_OW 310
7828: PPUSH
7829: CALL_OW 296
7833: PUSH
7834: LD_INT 10
7836: LESS
7837: OR
7838: IFFALSE 7866
// begin case Query ( Q3b ) of 1 :
7840: LD_STRING Q3b
7842: PPUSH
7843: CALL_OW 97
7847: PUSH
7848: LD_INT 1
7850: DOUBLE
7851: EQUAL
7852: IFTRUE 7856
7854: GO 7863
7856: POP
// FinishMission ; end ;
7857: CALL 7963 0 0
7861: GO 7864
7863: POP
// end else
7864: GO 7962
// begin if JMMGirl = 1 then
7866: LD_EXP 7
7870: PUSH
7871: LD_INT 1
7873: EQUAL
7874: IFFALSE 7902
// begin case Query ( Q3bJ ) of 1 :
7876: LD_STRING Q3bJ
7878: PPUSH
7879: CALL_OW 97
7883: PUSH
7884: LD_INT 1
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7899
7892: POP
// FinishMission ; end ;
7893: CALL 7963 0 0
7897: GO 7900
7899: POP
// end else
7900: GO 7962
// begin if JMMGirl = 2 then
7902: LD_EXP 7
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7938
// begin case Query ( Q3bL ) of 1 :
7912: LD_STRING Q3bL
7914: PPUSH
7915: CALL_OW 97
7919: PUSH
7920: LD_INT 1
7922: DOUBLE
7923: EQUAL
7924: IFTRUE 7928
7926: GO 7935
7928: POP
// FinishMission ; end ;
7929: CALL 7963 0 0
7933: GO 7936
7935: POP
// end else
7936: GO 7962
// begin case Query ( Q3bX ) of 1 :
7938: LD_STRING Q3bX
7940: PPUSH
7941: CALL_OW 97
7945: PUSH
7946: LD_INT 1
7948: DOUBLE
7949: EQUAL
7950: IFTRUE 7954
7952: GO 7961
7954: POP
// FinishMission ; end ;
7955: CALL 7963 0 0
7959: GO 7962
7961: POP
// end ; end ; end ; end ;
7962: END
// export function FinishMission ; begin
7963: LD_INT 0
7965: PPUSH
// if fastEnd = 1 then
7966: LD_EXP 15
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 8009
// begin AddMedal ( fastend , - 1 ) ;
7976: LD_STRING fastend
7978: PPUSH
7979: LD_INT 1
7981: NEG
7982: PPUSH
7983: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
7987: LD_STRING fastend
7989: PPUSH
7990: LD_INT 1
7992: NEG
7993: PPUSH
7994: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
7998: LD_STRING fastend
8000: PPUSH
8001: LD_INT 1
8003: NEG
8004: PPUSH
8005: CALL_OW 101
// end ; if fastEnd = 0 then
8009: LD_EXP 15
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8143
// begin if IsOk ( Joan ) then
8019: LD_EXP 2
8023: PPUSH
8024: CALL_OW 302
8028: IFFALSE 8042
// AddMedal ( protect , 1 ) else
8030: LD_STRING protect
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 101
8040: GO 8053
// AddMedal ( protect , - 1 ) ;
8042: LD_STRING protect
8044: PPUSH
8045: LD_INT 1
8047: NEG
8048: PPUSH
8049: CALL_OW 101
// if amLaserCounter >= 2 then
8053: LD_EXP 9
8057: PUSH
8058: LD_INT 2
8060: GREATEREQUAL
8061: IFFALSE 8075
// AddMedal ( double , 1 ) else
8063: LD_STRING double
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: CALL_OW 101
8073: GO 8086
// AddMedal ( double , - 1 ) ;
8075: LD_STRING double
8077: PPUSH
8078: LD_INT 1
8080: NEG
8081: PPUSH
8082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
8086: LD_INT 22
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 21
8098: PUSH
8099: LD_INT 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PPUSH
8110: CALL_OW 69
8114: PUSH
8115: LD_INT 0
8117: EQUAL
8118: IFFALSE 8132
// AddMedal ( base , 1 ) else
8120: LD_STRING base
8122: PPUSH
8123: LD_INT 1
8125: PPUSH
8126: CALL_OW 101
8130: GO 8143
// AddMedal ( base , - 1 ) ;
8132: LD_STRING base
8134: PPUSH
8135: LD_INT 1
8137: NEG
8138: PPUSH
8139: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
8143: LD_STRING Eliminate
8145: PPUSH
8146: CALL_OW 102
// YouWin ;
8150: CALL_OW 103
// end ; end_of_file
8154: LD_VAR 0 1
8158: RET
