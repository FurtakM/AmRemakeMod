// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 13
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// amLaserCounter = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: EMPTY
  40: ST_TO_ADDR
// russianTanks = [ ] ;
  41: LD_ADDR_EXP 9
  45: PUSH
  46: EMPTY
  47: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  48: LD_ADDR_EXP 10
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 0 ) ;
  55: LD_ADDR_EXP 12
  59: PUSH
  60: LD_STRING 12_SciDed_1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: CALL_OW 30
  70: ST_TO_ADDR
// russianAI = 0 ;
  71: LD_ADDR_EXP 11
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// debugMode = 1 ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_INT 1
  86: ST_TO_ADDR
// PrepareHero ;
  87: CALL 417 0 0
// PrepareRussianBase ;
  91: CALL 703 0 0
// PrepareCommander ;
  95: CALL 640 0 0
// end ;
  99: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 100: LD_EXP 14
 104: PUSH
 105: LD_INT 1
 107: EQUAL
 108: IFFALSE 414
 110: GO 112
 112: DISABLE
 113: LD_INT 0
 115: PPUSH
// begin enable ;
 116: ENABLE
// fogoff ( true ) ;
 117: LD_INT 1
 119: PPUSH
 120: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 124: LD_ADDR_VAR 0 1
 128: PUSH
 129: LD_INT 22
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: PUSH
 139: LD_INT 21
 141: PUSH
 142: LD_INT 1
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PPUSH
 153: CALL_OW 69
 157: PUSH
 158: FOR_IN
 159: IFFALSE 175
// SetLives ( i , 1000 ) ;
 161: LD_VAR 0 1
 165: PPUSH
 166: LD_INT 1000
 168: PPUSH
 169: CALL_OW 234
 173: GO 158
 175: POP
 176: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 177: LD_ADDR_VAR 0 1
 181: PUSH
 182: LD_INT 22
 184: PUSH
 185: LD_INT 1
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 2
 194: PUSH
 195: LD_INT 30
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: PUSH
 205: LD_INT 30
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PPUSH
 224: CALL_OW 69
 228: PUSH
 229: FOR_IN
 230: IFFALSE 254
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 232: LD_VAR 0 1
 236: PPUSH
 237: CALL_OW 274
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 9999
 247: PPUSH
 248: CALL_OW 277
 252: GO 229
 254: POP
 255: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 22
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: LD_INT 30
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 30
 286: PUSH
 287: LD_INT 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: LIST
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PPUSH
 303: CALL_OW 69
 307: PUSH
 308: FOR_IN
 309: IFFALSE 333
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 311: LD_VAR 0 1
 315: PPUSH
 316: CALL_OW 274
 320: PPUSH
 321: LD_INT 2
 323: PPUSH
 324: LD_INT 9999
 326: PPUSH
 327: CALL_OW 277
 331: GO 308
 333: POP
 334: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 2
 352: PUSH
 353: LD_INT 30
 355: PUSH
 356: LD_INT 0
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 30
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PPUSH
 382: CALL_OW 69
 386: PUSH
 387: FOR_IN
 388: IFFALSE 412
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 390: LD_VAR 0 1
 394: PPUSH
 395: CALL_OW 274
 399: PPUSH
 400: LD_INT 3
 402: PPUSH
 403: LD_INT 9999
 405: PPUSH
 406: CALL_OW 277
 410: GO 387
 412: POP
 413: POP
// end ; end_of_file
 414: PPOPN 1
 416: END
// export function PrepareHero ; begin
 417: LD_INT 0
 419: PPUSH
// uc_side = 1 ;
 420: LD_ADDR_OWVAR 20
 424: PUSH
 425: LD_INT 1
 427: ST_TO_ADDR
// uc_nation = 1 ;
 428: LD_ADDR_OWVAR 21
 432: PUSH
 433: LD_INT 1
 435: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 436: LD_ADDR_EXP 1
 440: PUSH
 441: LD_STRING JMM
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL 843 0 2
 451: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 452: LD_ADDR_EXP 5
 456: PUSH
 457: LD_STRING Powell
 459: PPUSH
 460: LD_INT 0
 462: PPUSH
 463: CALL 843 0 2
 467: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 468: LD_EXP 1
 472: PPUSH
 473: LD_INT 95
 475: PPUSH
 476: CALL_OW 52
// uc_side = 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 488: LD_STRING 10c_Joan
 490: PPUSH
 491: CALL_OW 28
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 534
// begin Joan = PrepareUnit ( 10c_Joan , false ) ;
 501: LD_ADDR_EXP 2
 505: PUSH
 506: LD_STRING 10c_Joan
 508: PPUSH
 509: LD_INT 0
 511: PPUSH
 512: CALL 843 0 2
 516: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 517: LD_EXP 2
 521: PPUSH
 522: LD_INT 4
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 49
// end else
 532: GO 611
// begin if TestCharacters ( 13s_Lisa ) = true then
 534: LD_STRING 13s_Lisa
 536: PPUSH
 537: CALL_OW 28
 541: PUSH
 542: LD_INT 1
 544: EQUAL
 545: IFFALSE 580
// begin Lisa = PrepareUnit ( 13s_Lisa , false ) ;
 547: LD_ADDR_EXP 3
 551: PUSH
 552: LD_STRING 13s_Lisa
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL 843 0 2
 562: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_INT 4
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: CALL_OW 49
// end else
 578: GO 611
// begin Connie = PrepareUnit ( Connie , true ) ;
 580: LD_ADDR_EXP 4
 584: PUSH
 585: LD_STRING Connie
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: CALL 843 0 2
 595: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 596: LD_EXP 4
 600: PPUSH
 601: LD_INT 4
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 611: LD_EXP 2
 615: PUSH
 616: LD_EXP 3
 620: PUSH
 621: LD_EXP 4
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PPUSH
 631: CALL_OW 140
// end ; end_of_file
 635: LD_VAR 0 1
 639: RET
// export function PrepareCommander ; begin
 640: LD_INT 0
 642: PPUSH
// uc_side = 3 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 3
 650: ST_TO_ADDR
// uc_nation = 3 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 3
 658: ST_TO_ADDR
// hc_importance = 100 ;
 659: LD_ADDR_OWVAR 32
 663: PUSH
 664: LD_INT 100
 666: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 667: LD_ADDR_EXP 6
 671: PUSH
 672: LD_STRING Eisenstein
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL 843 0 2
 682: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 683: LD_EXP 6
 687: PPUSH
 688: LD_INT 11
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 49
// end ;
 698: LD_VAR 0 1
 702: RET
// export function PrepareRussianBase ; begin
 703: LD_INT 0
 705: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 6 ) ;
 706: LD_INT 3
 708: PPUSH
 709: LD_INT 3
 711: PPUSH
 712: LD_INT 45
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: LD_INT 9
 720: PPUSH
 721: LD_INT 6
 723: PPUSH
 724: CALL 936 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 6 ) ;
 728: LD_INT 3
 730: PPUSH
 731: LD_INT 3
 733: PPUSH
 734: LD_INT 22
 736: PPUSH
 737: LD_INT 10
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 6
 745: PPUSH
 746: CALL 936 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 6 ) ;
 750: LD_INT 3
 752: PPUSH
 753: LD_INT 3
 755: PPUSH
 756: LD_INT 1
 758: PPUSH
 759: LD_INT 10
 761: PPUSH
 762: LD_INT 3
 764: PPUSH
 765: LD_INT 6
 767: PPUSH
 768: CALL 936 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 6 ) ;
 772: LD_INT 3
 774: PPUSH
 775: LD_INT 3
 777: PPUSH
 778: LD_INT 40
 780: PPUSH
 781: LD_INT 10
 783: PPUSH
 784: LD_INT 3
 786: PPUSH
 787: LD_INT 6
 789: PPUSH
 790: CALL 936 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 6 ) ;
 794: LD_INT 3
 796: PPUSH
 797: LD_INT 3
 799: PPUSH
 800: LD_INT 14
 802: PPUSH
 803: LD_INT 10
 805: PPUSH
 806: LD_INT 4
 808: PPUSH
 809: LD_INT 6
 811: PPUSH
 812: CALL 936 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 6 ) ;
 816: LD_INT 3
 818: PPUSH
 819: LD_INT 3
 821: PPUSH
 822: LD_INT 15
 824: PPUSH
 825: LD_INT 10
 827: PPUSH
 828: LD_INT 4
 830: PPUSH
 831: LD_INT 6
 833: PPUSH
 834: CALL 936 0 6
// end ; end_of_file
 838: LD_VAR 0 1
 842: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 843: LD_INT 0
 845: PPUSH
 846: PPUSH
// if exist_mode then
 847: LD_VAR 0 2
 851: IFFALSE 855
// begin end else
 853: GO 870
// begin unit := NewCharacter ( ident ) ;
 855: LD_ADDR_VAR 0 4
 859: PUSH
 860: LD_VAR 0 1
 864: PPUSH
 865: CALL_OW 25
 869: ST_TO_ADDR
// end ; result := unit ;
 870: LD_ADDR_VAR 0 3
 874: PUSH
 875: LD_VAR 0 4
 879: ST_TO_ADDR
// end ;
 880: LD_VAR 0 3
 884: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
// for i in charactersList do
 889: LD_ADDR_VAR 0 4
 893: PUSH
 894: LD_VAR 0 1
 898: PUSH
 899: FOR_IN
 900: IFFALSE 929
// begin if IsOk ( i ) then
 902: LD_VAR 0 4
 906: PPUSH
 907: CALL_OW 302
 911: IFFALSE 927
// SaveCharacters ( i , ident ) ;
 913: LD_VAR 0 4
 917: PPUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: CALL_OW 38
// end ;
 927: GO 899
 929: POP
 930: POP
// end ;
 931: LD_VAR 0 3
 935: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 936: LD_INT 0
 938: PPUSH
 939: PPUSH
 940: PPUSH
 941: PPUSH
// for i = 1 to count do
 942: LD_ADDR_VAR 0 8
 946: PUSH
 947: DOUBLE
 948: LD_INT 1
 950: DEC
 951: ST_TO_ADDR
 952: LD_VAR 0 6
 956: PUSH
 957: FOR_TO
 958: IFFALSE 1039
// begin uc_side = side ;
 960: LD_ADDR_OWVAR 20
 964: PUSH
 965: LD_VAR 0 1
 969: ST_TO_ADDR
// uc_nation = nation ;
 970: LD_ADDR_OWVAR 21
 974: PUSH
 975: LD_VAR 0 2
 979: ST_TO_ADDR
// hc_gallery =  ;
 980: LD_ADDR_OWVAR 33
 984: PUSH
 985: LD_STRING 
 987: ST_TO_ADDR
// hc_name =  ;
 988: LD_ADDR_OWVAR 26
 992: PUSH
 993: LD_STRING 
 995: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 996: LD_INT 0
 998: PPUSH
 999: LD_VAR 0 5
1003: PPUSH
1004: LD_VAR 0 4
1008: PPUSH
1009: CALL_OW 380
// un = CreateHuman ;
1013: LD_ADDR_VAR 0 10
1017: PUSH
1018: CALL_OW 44
1022: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1023: LD_VAR 0 10
1027: PPUSH
1028: LD_VAR 0 3
1032: PPUSH
1033: CALL_OW 52
// end ;
1037: GO 957
1039: POP
1040: POP
// end ;
1041: LD_VAR 0 7
1045: RET
// export function Query1 ; begin
1046: LD_INT 0
1048: PPUSH
// case query ( Q1 ) of 1 :
1049: LD_STRING Q1
1051: PPUSH
1052: CALL_OW 97
1056: PUSH
1057: LD_INT 1
1059: DOUBLE
1060: EQUAL
1061: IFTRUE 1065
1063: GO 1076
1065: POP
// result = 1 ; 2 :
1066: LD_ADDR_VAR 0 1
1070: PUSH
1071: LD_INT 1
1073: ST_TO_ADDR
1074: GO 1096
1076: LD_INT 2
1078: DOUBLE
1079: EQUAL
1080: IFTRUE 1084
1082: GO 1095
1084: POP
// result = 2 ; end ;
1085: LD_ADDR_VAR 0 1
1089: PUSH
1090: LD_INT 2
1092: ST_TO_ADDR
1093: GO 1096
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function Query2 ; begin
1101: LD_INT 0
1103: PPUSH
// case query ( Q2J ) of 1 :
1104: LD_STRING Q2J
1106: PPUSH
1107: CALL_OW 97
1111: PUSH
1112: LD_INT 1
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1131
1120: POP
// result = 1 ; 2 :
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
1129: GO 1170
1131: LD_INT 2
1133: DOUBLE
1134: EQUAL
1135: IFTRUE 1139
1137: GO 1150
1139: POP
// result = 2 ; 2 :
1140: LD_ADDR_VAR 0 1
1144: PUSH
1145: LD_INT 2
1147: ST_TO_ADDR
1148: GO 1170
1150: LD_INT 2
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1169
1158: POP
// result = 3 ; end ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_INT 3
1166: ST_TO_ADDR
1167: GO 1170
1169: POP
// end ;
1170: LD_VAR 0 1
1174: RET
// export function PrepareDifficulty ; begin
1175: LD_INT 0
1177: PPUSH
// if difficulty = 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: EQUAL
1186: IFFALSE 1227
// begin SetTech ( 57 , 3 , state_disabled ) ;
1188: LD_INT 57
1190: PPUSH
1191: LD_INT 3
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1201: LD_INT 58
1203: PPUSH
1204: LD_INT 3
1206: PPUSH
1207: LD_INT 0
1209: PPUSH
1210: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1214: LD_INT 59
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 322
// end ; if difficulty = 2 then
1227: LD_OWVAR 67
1231: PUSH
1232: LD_INT 2
1234: EQUAL
1235: IFFALSE 1276
// begin SetTech ( 57 , 3 , state_enabled ) ;
1237: LD_INT 57
1239: PPUSH
1240: LD_INT 3
1242: PPUSH
1243: LD_INT 1
1245: PPUSH
1246: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1250: LD_INT 58
1252: PPUSH
1253: LD_INT 3
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1263: LD_INT 59
1265: PPUSH
1266: LD_INT 3
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 322
// end ; if difficulty = 3 then
1276: LD_OWVAR 67
1280: PUSH
1281: LD_INT 3
1283: EQUAL
1284: IFFALSE 1325
// begin SetTech ( 57 , 3 , state_enabled ) ;
1286: LD_INT 57
1288: PPUSH
1289: LD_INT 3
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1299: LD_INT 58
1301: PPUSH
1302: LD_INT 3
1304: PPUSH
1305: LD_INT 1
1307: PPUSH
1308: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1312: LD_INT 59
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 322
// end ; end ;
1325: LD_VAR 0 1
1329: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
1330: LD_INT 0
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
// for i = 1 to 72 do
1336: LD_ADDR_VAR 0 5
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 72
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1408
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
1352: LD_VAR 0 5
1356: PPUSH
1357: LD_VAR 0 1
1361: PPUSH
1362: CALL_OW 321
1366: PUSH
1367: LD_INT 1
1369: EQUAL
1370: PUSH
1371: LD_VAR 0 5
1375: PPUSH
1376: LD_VAR 0 3
1380: PPUSH
1381: CALL_OW 482
1385: PUSH
1386: LD_INT 1
1388: EQUAL
1389: AND
1390: IFFALSE 1406
// AddComResearch ( lab , i ) ;
1392: LD_VAR 0 2
1396: PPUSH
1397: LD_VAR 0 5
1401: PPUSH
1402: CALL_OW 184
1406: GO 1349
1408: POP
1409: POP
// end ;
1410: LD_VAR 0 4
1414: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1415: LD_INT 0
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1423: LD_ADDR_VAR 0 8
1427: PUSH
1428: LD_VAR 0 2
1432: PPUSH
1433: CALL_OW 313
1437: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1438: LD_ADDR_VAR 0 9
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: LD_INT 22
1450: PUSH
1451: LD_VAR 0 1
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 25
1462: PUSH
1463: LD_INT 2
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 24
1472: PUSH
1473: LD_INT 750
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 3
1482: PUSH
1483: LD_INT 54
1485: PUSH
1486: EMPTY
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 70
1503: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1504: LD_ADDR_VAR 0 6
1508: PUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: LD_INT 22
1516: PUSH
1517: LD_VAR 0 1
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 21
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 24
1541: PUSH
1542: LD_INT 1000
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: PPUSH
1561: CALL_OW 70
1565: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1566: LD_VAR 0 6
1570: NOT
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: LD_VAR 0 1
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: LD_INT 25
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 24
1596: PUSH
1597: LD_INT 250
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: PPUSH
1609: CALL_OW 69
1613: NOT
1614: AND
1615: IFFALSE 1619
// exit ;
1617: GO 1801
// if buildings_list > 0 and engineerOkInside then
1619: LD_VAR 0 6
1623: PUSH
1624: LD_INT 0
1626: GREATER
1627: PUSH
1628: LD_VAR 0 8
1632: AND
1633: IFFALSE 1644
// ComExitBuilding ( engineerOkInside ) ;
1635: LD_VAR 0 8
1639: PPUSH
1640: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
1644: LD_VAR 0 6
1648: PUSH
1649: LD_INT 0
1651: GREATER
1652: PUSH
1653: LD_VAR 0 9
1657: PUSH
1658: LD_INT 0
1660: GREATER
1661: AND
1662: IFFALSE 1682
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
1664: LD_VAR 0 9
1668: PPUSH
1669: LD_VAR 0 6
1673: PUSH
1674: LD_INT 1
1676: ARRAY
1677: PPUSH
1678: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
1682: LD_VAR 0 6
1686: PUSH
1687: LD_INT 0
1689: EQUAL
1690: PUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 0
1698: EQUAL
1699: AND
1700: PUSH
1701: LD_VAR 0 9
1705: PUSH
1706: LD_INT 0
1708: GREATER
1709: AND
1710: IFFALSE 1726
// ComEnterUnit ( engineerOkOutside , building ) ;
1712: LD_VAR 0 9
1716: PPUSH
1717: LD_VAR 0 2
1721: PPUSH
1722: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
1726: LD_VAR 0 9
1730: PUSH
1731: LD_INT 0
1733: GREATER
1734: PUSH
1735: LD_VAR 0 6
1739: PUSH
1740: LD_INT 0
1742: EQUAL
1743: AND
1744: PUSH
1745: LD_VAR 0 4
1749: PUSH
1750: LD_INT 0
1752: GREATER
1753: AND
1754: IFFALSE 1801
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
1756: LD_VAR 0 9
1760: PPUSH
1761: LD_VAR 0 4
1765: PUSH
1766: LD_INT 1
1768: ARRAY
1769: PPUSH
1770: LD_VAR 0 4
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_VAR 0 4
1783: PUSH
1784: LD_INT 3
1786: ARRAY
1787: PPUSH
1788: LD_VAR 0 4
1792: PUSH
1793: LD_INT 4
1795: ARRAY
1796: PPUSH
1797: CALL_OW 145
// end ;
1801: LD_VAR 0 5
1805: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
1806: LD_INT 0
1808: PPUSH
1809: PPUSH
1810: PPUSH
1811: PPUSH
1812: PPUSH
1813: PPUSH
1814: PPUSH
1815: PPUSH
1816: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
1817: LD_ADDR_VAR 0 6
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_VAR 0 1
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 25
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 23
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 24
1856: PUSH
1857: LD_INT 251
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
1875: LD_ADDR_VAR 0 7
1879: PUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: LD_INT 22
1887: PUSH
1888: LD_VAR 0 1
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 23
1899: PUSH
1900: LD_INT 2
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 25
1909: PUSH
1910: LD_INT 4
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 50
1919: PUSH
1920: EMPTY
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 70
1933: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
1934: LD_ADDR_VAR 0 10
1938: PUSH
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_INT 22
1946: PUSH
1947: LD_VAR 0 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 21
1958: PUSH
1959: LD_INT 1
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 25
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: LD_INT 24
1988: PUSH
1989: LD_INT 750
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: PPUSH
2006: CALL_OW 70
2010: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2011: LD_ADDR_VAR 0 11
2015: PUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_VAR 0 1
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: LD_INT 25
2048: PUSH
2049: LD_INT 3
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 3
2062: PUSH
2063: LD_INT 24
2065: PUSH
2066: LD_INT 1000
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 70
2087: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2088: LD_VAR 0 10
2092: NOT
2093: PUSH
2094: LD_VAR 0 11
2098: NOT
2099: AND
2100: PUSH
2101: LD_VAR 0 6
2105: NOT
2106: AND
2107: IFFALSE 2111
// exit ;
2109: GO 2345
// if damageUnits > 0 and sci_list > 0 then
2111: LD_VAR 0 10
2115: PUSH
2116: LD_INT 0
2118: GREATER
2119: PUSH
2120: LD_VAR 0 6
2124: PUSH
2125: LD_INT 0
2127: GREATER
2128: AND
2129: IFFALSE 2145
// ComMoveToArea ( damageUnits , healArea ) ;
2131: LD_VAR 0 10
2135: PPUSH
2136: LD_VAR 0 2
2140: PPUSH
2141: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2145: LD_VAR 0 11
2149: PUSH
2150: LD_INT 0
2152: GREATER
2153: PUSH
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 0
2161: GREATER
2162: AND
2163: IFFALSE 2174
// ComExitBuilding ( sci_list ) ;
2165: LD_VAR 0 6
2169: PPUSH
2170: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2174: LD_VAR 0 11
2178: PUSH
2179: LD_INT 0
2181: GREATER
2182: PUSH
2183: LD_VAR 0 7
2187: PUSH
2188: LD_INT 0
2190: GREATER
2191: AND
2192: IFFALSE 2212
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2194: LD_VAR 0 7
2198: PPUSH
2199: LD_VAR 0 11
2203: PUSH
2204: LD_INT 1
2206: ARRAY
2207: PPUSH
2208: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2212: LD_VAR 0 10
2216: PUSH
2217: LD_INT 0
2219: EQUAL
2220: PUSH
2221: LD_VAR 0 11
2225: PUSH
2226: LD_INT 0
2228: EQUAL
2229: AND
2230: PUSH
2231: LD_VAR 0 7
2235: PUSH
2236: LD_INT 0
2238: GREATER
2239: AND
2240: IFFALSE 2345
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2242: LD_ADDR_VAR 0 12
2246: PUSH
2247: LD_INT 22
2249: PUSH
2250: LD_VAR 0 1
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 21
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: LD_INT 30
2271: PUSH
2272: LD_INT 8
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PPUSH
2284: CALL_OW 69
2288: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2289: LD_ADDR_VAR 0 13
2293: PUSH
2294: LD_INT 1
2296: PPUSH
2297: LD_VAR 0 12
2301: PPUSH
2302: CALL_OW 12
2306: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2307: LD_VAR 0 7
2311: PPUSH
2312: LD_INT 3
2314: PUSH
2315: LD_INT 60
2317: PUSH
2318: EMPTY
2319: LIST
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PPUSH
2325: CALL_OW 72
2329: PPUSH
2330: LD_VAR 0 12
2334: PUSH
2335: LD_VAR 0 13
2339: ARRAY
2340: PPUSH
2341: CALL_OW 120
// end ; end ;
2345: LD_VAR 0 5
2349: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2350: LD_INT 0
2352: PPUSH
2353: PPUSH
2354: PPUSH
2355: PPUSH
// tmpTab = [ ] ;
2356: LD_ADDR_VAR 0 6
2360: PUSH
2361: EMPTY
2362: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2363: LD_INT 22
2365: PUSH
2366: LD_VAR 0 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 32
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 0
2396: GREATER
2397: IFFALSE 2480
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_VAR 0 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 30
2418: PUSH
2419: LD_INT 32
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PPUSH
2430: CALL_OW 69
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2478
// begin for j in UnitsInside ( i ) do
2438: LD_ADDR_VAR 0 5
2442: PUSH
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 313
2452: PUSH
2453: FOR_IN
2454: IFFALSE 2474
// tmpTab = tmpTab ^ j ;
2456: LD_ADDR_VAR 0 6
2460: PUSH
2461: LD_VAR 0 6
2465: PUSH
2466: LD_VAR 0 5
2470: ADD
2471: ST_TO_ADDR
2472: GO 2453
2474: POP
2475: POP
// end ;
2476: GO 2435
2478: POP
2479: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2480: LD_VAR 0 6
2484: PPUSH
2485: LD_VAR 0 2
2489: PPUSH
2490: CALL_OW 250
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: CALL_OW 251
2504: PPUSH
2505: CALL_OW 114
// end ;
2509: LD_VAR 0 3
2513: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2514: LD_INT 0
2516: PPUSH
2517: PPUSH
2518: PPUSH
2519: PPUSH
// enable ;
2520: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
2521: LD_ADDR_VAR 0 7
2525: PUSH
2526: LD_VAR 0 3
2530: PPUSH
2531: CALL_OW 435
2535: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
2536: LD_ADDR_VAR 0 6
2540: PUSH
2541: LD_INT 22
2543: PUSH
2544: LD_VAR 0 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 34
2555: PUSH
2556: LD_VAR 0 2
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
2574: LD_VAR 0 6
2578: PUSH
2579: LD_INT 0
2581: GREATER
2582: PUSH
2583: LD_VAR 0 3
2587: PPUSH
2588: CALL_OW 435
2592: AND
2593: PUSH
2594: LD_VAR 0 7
2598: PUSH
2599: LD_INT 0
2601: GREATER
2602: AND
2603: IFFALSE 2652
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2605: LD_VAR 0 6
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: PPUSH
2614: LD_VAR 0 7
2618: PUSH
2619: LD_INT 1
2621: ARRAY
2622: PPUSH
2623: LD_VAR 0 7
2627: PUSH
2628: LD_INT 2
2630: ARRAY
2631: PPUSH
2632: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
2636: LD_VAR 0 6
2640: PUSH
2641: LD_INT 1
2643: ARRAY
2644: PPUSH
2645: LD_INT 100
2647: PPUSH
2648: CALL_OW 240
// end ; end ;
2652: LD_VAR 0 4
2656: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
2663: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
2664: LD_ADDR_VAR 0 6
2668: PUSH
2669: LD_INT 22
2671: PUSH
2672: LD_VAR 0 1
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 30
2686: PUSH
2687: LD_INT 31
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 32
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 30
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 30
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 5
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
2751: LD_ADDR_VAR 0 7
2755: PUSH
2756: LD_INT 22
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 58
2780: PUSH
2781: EMPTY
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
2794: LD_VAR 0 6
2798: PUSH
2799: LD_INT 0
2801: GREATER
2802: PUSH
2803: LD_VAR 0 7
2807: PUSH
2808: LD_INT 0
2810: GREATER
2811: AND
2812: IFFALSE 2882
// begin for i in turretsList do
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: LD_VAR 0 6
2823: PUSH
2824: FOR_IN
2825: IFFALSE 2880
// begin for j in enemyBuildings do
2827: LD_ADDR_VAR 0 5
2831: PUSH
2832: LD_VAR 0 7
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2876
// begin if GetDistUnits ( i , j ) < 20 then
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 296
2854: PUSH
2855: LD_INT 20
2857: LESS
2858: IFFALSE 2874
// begin ComAttackUnit ( i , j ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_VAR 0 5
2869: PPUSH
2870: CALL_OW 115
// end ; end ;
2874: GO 2837
2876: POP
2877: POP
// end ;
2878: GO 2824
2880: POP
2881: POP
// end ; end ;
2882: LD_VAR 0 3
2886: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) <= vehCount then
2891: LD_INT 22
2893: PUSH
2894: LD_VAR 0 1
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PUSH
2903: LD_INT 21
2905: PUSH
2906: LD_INT 2
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: PUSH
2922: LD_INT 22
2924: PUSH
2925: LD_VAR 0 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 21
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 34
2946: PUSH
2947: LD_INT 52
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 69
2963: PUSH
2964: LD_VAR 0 3
2968: LESSEQUAL
2969: DIFF
2970: IFFALSE 3037
// for i = 1 to vehCount do
2972: LD_ADDR_VAR 0 9
2976: PUSH
2977: DOUBLE
2978: LD_INT 1
2980: DEC
2981: ST_TO_ADDR
2982: LD_VAR 0 3
2986: PUSH
2987: FOR_TO
2988: IFFALSE 3035
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
2990: LD_VAR 0 2
2994: PPUSH
2995: LD_VAR 0 7
2999: PPUSH
3000: LD_VAR 0 5
3004: PPUSH
3005: LD_VAR 0 6
3009: PPUSH
3010: LD_VAR 0 4
3014: PUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_VAR 0 4
3022: PPUSH
3023: CALL_OW 12
3027: ARRAY
3028: PPUSH
3029: CALL_OW 185
3033: GO 2987
3035: POP
3036: POP
// end ;
3037: LD_VAR 0 8
3041: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3042: LD_INT 0
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3050: LD_EXP 9
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: LD_INT 3
3060: PUSH
3061: LD_INT 4
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: PUSH
3069: LD_OWVAR 67
3073: ARRAY
3074: GREATEREQUAL
3075: PUSH
3076: LD_EXP 10
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: LD_INT 2
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: PUSH
3095: LD_OWVAR 67
3099: ARRAY
3100: GREATEREQUAL
3101: AND
3102: IFFALSE 3335
// begin repeat wait ( 0 0$1 ) ;
3104: LD_INT 35
3106: PPUSH
3107: CALL_OW 67
// for j in russianTanks do
3111: LD_ADDR_VAR 0 4
3115: PUSH
3116: LD_EXP 9
3120: PUSH
3121: FOR_IN
3122: IFFALSE 3323
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3124: LD_ADDR_VAR 0 6
3128: PUSH
3129: LD_INT 81
3131: PUSH
3132: LD_VAR 0 1
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 101
3143: PUSH
3144: LD_INT 1
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: CALL_OW 69
3159: PPUSH
3160: LD_VAR 0 4
3164: PPUSH
3165: CALL_OW 74
3169: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3170: LD_ADDR_VAR 0 7
3174: PUSH
3175: LD_INT 81
3177: PUSH
3178: LD_VAR 0 1
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 101
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 2
3199: PUSH
3200: LD_INT 59
3202: PUSH
3203: EMPTY
3204: LIST
3205: PUSH
3206: LD_INT 21
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 21
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: PPUSH
3240: CALL_OW 69
3244: PPUSH
3245: LD_VAR 0 4
3249: PPUSH
3250: CALL_OW 74
3254: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_VAR 0 6
3264: PPUSH
3265: CALL_OW 296
3269: PUSH
3270: LD_INT 8
3272: PLUS
3273: PUSH
3274: LD_VAR 0 4
3278: PPUSH
3279: LD_VAR 0 7
3283: PPUSH
3284: CALL_OW 296
3288: LESS
3289: IFFALSE 3307
// ComAttackUnit ( j , target1 ) else
3291: LD_VAR 0 4
3295: PPUSH
3296: LD_VAR 0 6
3300: PPUSH
3301: CALL_OW 115
3305: GO 3321
// ComAttackUnit ( j , target2 ) ;
3307: LD_VAR 0 4
3311: PPUSH
3312: LD_VAR 0 7
3316: PPUSH
3317: CALL_OW 115
// end ;
3321: GO 3121
3323: POP
3324: POP
// until russianTanks = 0 ;
3325: LD_EXP 9
3329: PUSH
3330: LD_INT 0
3332: EQUAL
3333: IFFALSE 3104
// end ; end ;
3335: LD_VAR 0 2
3339: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
3340: LD_INT 0
3342: PPUSH
3343: PPUSH
3344: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
3345: LD_EXP 9
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 4
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_OWVAR 67
3368: ARRAY
3369: GREATEREQUAL
3370: PUSH
3371: LD_EXP 10
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: PUSH
3390: LD_OWVAR 67
3394: ARRAY
3395: GREATEREQUAL
3396: AND
3397: IFFALSE 3518
// repeat wait ( 0 0$1 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// if russianTimeLapsers > 0 then
3406: LD_EXP 10
3410: PUSH
3411: LD_INT 0
3413: GREATER
3414: IFFALSE 3508
// for j in russianTimeLapsers do
3416: LD_ADDR_VAR 0 3
3420: PUSH
3421: LD_EXP 10
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3506
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3429: LD_ADDR_VAR 0 4
3433: PUSH
3434: LD_INT 81
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PUSH
3446: LD_INT 101
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL_OW 69
3464: PPUSH
3465: LD_VAR 0 3
3469: PPUSH
3470: CALL_OW 74
3474: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3475: LD_VAR 0 3
3479: PPUSH
3480: LD_VAR 0 4
3484: PPUSH
3485: CALL_OW 250
3489: PPUSH
3490: LD_VAR 0 4
3494: PPUSH
3495: CALL_OW 251
3499: PPUSH
3500: CALL_OW 111
// end ;
3504: GO 3426
3506: POP
3507: POP
// until russianTimeLapsers = 0 ;
3508: LD_EXP 10
3512: PUSH
3513: LD_INT 0
3515: EQUAL
3516: IFFALSE 3399
// end ; end_of_file
3518: LD_VAR 0 2
3522: RET
// every 0 0$1 do
3523: GO 3525
3525: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
3526: LD_INT 3
3528: PPUSH
3529: LD_INT 14
3531: PPUSH
3532: LD_INT 3
3534: PPUSH
3535: CALL 1330 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 15
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: CALL 1330 0 3
// end ;
3552: END
// every 0 0$1 trigger russianAI = 1 do
3553: LD_EXP 11
3557: PUSH
3558: LD_INT 1
3560: EQUAL
3561: IFFALSE 3694
3563: GO 3565
3565: DISABLE
// begin enable ;
3566: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
3567: LD_INT 3
3569: PPUSH
3570: LD_INT 22
3572: PPUSH
3573: LD_INT 7
3575: PPUSH
3576: LD_EXP 8
3580: PPUSH
3581: CALL 1415 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
3585: LD_INT 3
3587: PPUSH
3588: LD_INT 8
3590: PPUSH
3591: LD_INT 7
3593: PPUSH
3594: LD_INT 14
3596: PUSH
3597: LD_INT 15
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 12
3614: ARRAY
3615: PPUSH
3616: CALL 1806 0 4
// AttackVehicles ( 3 ) ;
3620: LD_INT 3
3622: PPUSH
3623: CALL 3042 0 1
// CollectCrates ( 3 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) , RuCratesArea ) ;
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 22
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 21
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 34
3652: PUSH
3653: LD_INT 51
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: PPUSH
3665: CALL_OW 69
3669: PPUSH
3670: LD_INT 10
3672: PPUSH
3673: CALL 2514 0 3
// AttackNearBuildings ( 3 , 1 ) ;
3677: LD_INT 3
3679: PPUSH
3680: LD_INT 1
3682: PPUSH
3683: CALL 2657 0 2
// TimeLapsersAI ( 3 ) ;
3687: LD_INT 3
3689: PPUSH
3690: CALL 3340 0 1
// end ;
3694: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) do
3695: LD_EXP 11
3699: PUSH
3700: LD_INT 1
3702: EQUAL
3703: PUSH
3704: LD_INT 22
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 21
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 50
3726: PUSH
3727: EMPTY
3728: LIST
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 58
3735: PUSH
3736: EMPTY
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 69
3753: PUSH
3754: LD_INT 22
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PUSH
3764: LD_INT 21
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 34
3776: PUSH
3777: LD_INT 52
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 69
3793: DIFF
3794: AND
3795: IFFALSE 4020
3797: GO 3799
3799: DISABLE
// begin enable ;
3800: ENABLE
// if russianRocketsAvalaible = 0 then
3801: LD_EXP 12
3805: PUSH
3806: LD_INT 0
3808: EQUAL
3809: IFFALSE 3885
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) else
3811: LD_INT 3
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: LD_INT 3
3819: PUSH
3820: LD_INT 4
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: LD_OWVAR 67
3835: ARRAY
3836: PPUSH
3837: LD_INT 46
3839: PUSH
3840: LD_INT 45
3842: PUSH
3843: LD_INT 44
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: LD_INT 1
3856: PUSH
3857: LD_INT 3
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: CALL_OW 12
3874: ARRAY
3875: PPUSH
3876: LD_INT 24
3878: PPUSH
3879: CALL 2887 0 7
3883: GO 3961
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , [ 1 , 4 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
3885: LD_INT 3
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 4
3896: PUSH
3897: LD_INT 4
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_OWVAR 67
3909: ARRAY
3910: PPUSH
3911: LD_INT 46
3913: PUSH
3914: LD_INT 45
3916: PUSH
3917: LD_INT 44
3919: PUSH
3920: LD_INT 47
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: LD_INT 3
3931: PPUSH
3932: LD_INT 1
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 2
3947: PPUSH
3948: CALL_OW 12
3952: ARRAY
3953: PPUSH
3954: LD_INT 24
3956: PPUSH
3957: CALL 2887 0 7
// if russianTimeLapsers = 0 then
3961: LD_EXP 10
3965: PUSH
3966: LD_INT 0
3968: EQUAL
3969: IFFALSE 4020
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 40
3976: PPUSH
3977: LD_INT 1
3979: PUSH
3980: LD_INT 2
3982: PUSH
3983: LD_INT 2
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: LD_OWVAR 67
3995: ARRAY
3996: PPUSH
3997: LD_INT 49
3999: PUSH
4000: LD_INT 49
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 3
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: LD_INT 24
4015: PPUSH
4016: CALL 2887 0 7
// end ; end_of_file
4020: END
// every 1 do var dec1 , dec2 ;
4021: GO 4023
4023: DISABLE
4024: LD_INT 0
4026: PPUSH
4027: PPUSH
// begin InGameOn ;
4028: CALL_OW 8
// CenterNowOnUnits ( JMMveh ) ;
4032: LD_INT 95
4034: PPUSH
4035: CALL_OW 87
// ChangeMissionObjectives ( M1 ) ;
4039: LD_STRING M1
4041: PPUSH
4042: CALL_OW 337
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4046: LD_INT 95
4048: PPUSH
4049: LD_INT 30
4051: PPUSH
4052: LD_INT 11
4054: PPUSH
4055: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4059: LD_INT 30
4061: PPUSH
4062: LD_INT 11
4064: PPUSH
4065: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4069: LD_EXP 5
4073: PPUSH
4074: LD_STRING D1-Pow-1
4076: PPUSH
4077: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4081: LD_EXP 1
4085: PPUSH
4086: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4090: LD_EXP 1
4094: PPUSH
4095: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4099: LD_EXP 1
4103: PPUSH
4104: LD_STRING D1-JMM-1
4106: PPUSH
4107: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4111: LD_EXP 5
4115: PPUSH
4116: LD_STRING D1-Pow-2
4118: PPUSH
4119: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4123: LD_EXP 1
4127: PPUSH
4128: LD_STRING D1-JMM-2
4130: PPUSH
4131: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4135: LD_EXP 1
4139: PPUSH
4140: LD_INT 95
4142: PPUSH
4143: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4147: LD_INT 35
4149: PPUSH
4150: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4154: LD_EXP 1
4158: PPUSH
4159: LD_INT 95
4161: PPUSH
4162: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4166: LD_INT 95
4168: PPUSH
4169: LD_INT 51
4171: PPUSH
4172: LD_INT 21
4174: PPUSH
4175: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4179: LD_INT 95
4181: PPUSH
4182: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4186: LD_INT 95
4188: PPUSH
4189: LD_INT 5
4191: PPUSH
4192: CALL_OW 308
4196: IFFALSE 4147
// SayRadio ( Joan , D2J-Joan-1 ) ;
4198: LD_EXP 2
4202: PPUSH
4203: LD_STRING D2J-Joan-1
4205: PPUSH
4206: CALL_OW 94
// dec1 = Query1 ;
4210: LD_ADDR_VAR 0 1
4214: PUSH
4215: CALL 1046 0 0
4219: ST_TO_ADDR
// if dec1 = 1 then
4220: LD_VAR 0 1
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4475
// begin ComExitVehicle ( JMM ) ;
4230: LD_EXP 1
4234: PPUSH
4235: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
4239: LD_EXP 1
4243: PPUSH
4244: LD_STRING D2J-JMM-1
4246: PPUSH
4247: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
4251: LD_EXP 2
4255: PPUSH
4256: LD_STRING D2J-Joan-2
4258: PPUSH
4259: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
4263: LD_EXP 1
4267: PPUSH
4268: LD_STRING D2J-JMM-2
4270: PPUSH
4271: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
4275: LD_EXP 2
4279: PPUSH
4280: LD_STRING D2J-Joan-3
4282: PPUSH
4283: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
4287: LD_EXP 5
4291: PPUSH
4292: LD_STRING DPowell-Pow-1
4294: PPUSH
4295: CALL_OW 94
// dec2 = Query2 ;
4299: LD_ADDR_VAR 0 2
4303: PUSH
4304: CALL 1101 0 0
4308: ST_TO_ADDR
// if dec2 = 1 then
4309: LD_VAR 0 2
4313: PUSH
4314: LD_INT 1
4316: EQUAL
4317: IFFALSE 4359
// begin Say ( JMM , D2Ja-JMM-1 ) ;
4319: LD_EXP 1
4323: PPUSH
4324: LD_STRING D2Ja-JMM-1
4326: PPUSH
4327: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
4331: LD_EXP 2
4335: PPUSH
4336: LD_STRING D2Ja-Joan-1
4338: PPUSH
4339: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
4343: LD_EXP 1
4347: PPUSH
4348: LD_STRING D2Ja-JMM-2
4350: PPUSH
4351: CALL_OW 88
// InGameOff ;
4355: CALL_OW 9
// end ; if dec2 = 2 then
4359: LD_VAR 0 2
4363: PUSH
4364: LD_INT 2
4366: EQUAL
4367: IFFALSE 4441
// begin Say ( JMM , D2Jb-JMM-1 ) ;
4369: LD_EXP 1
4373: PPUSH
4374: LD_STRING D2Jb-JMM-1
4376: PPUSH
4377: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
4381: LD_EXP 2
4385: PPUSH
4386: LD_STRING D2Jb-Joan-1
4388: PPUSH
4389: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D2Jb-JMM-2
4400: PPUSH
4401: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
4405: LD_EXP 2
4409: PPUSH
4410: LD_STRING D2Jb-Joan-2
4412: PPUSH
4413: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
4417: LD_EXP 1
4421: PPUSH
4422: LD_STRING D2Jb-JMM-3
4424: PPUSH
4425: CALL_OW 88
// fastEnd = 1 ;
4429: LD_ADDR_EXP 13
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// FinishMission ;
4437: CALL 6245 0 0
// end ; if dec2 = 3 then
4441: LD_VAR 0 2
4445: PUSH
4446: LD_INT 3
4448: EQUAL
4449: IFFALSE 4475
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
4451: LD_EXP 2
4455: PPUSH
4456: LD_STRING D2Jc-Joan-1
4458: PPUSH
4459: CALL_OW 94
// fastEnd = 1 ;
4463: LD_ADDR_EXP 13
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// FinishMission ;
4471: CALL 6245 0 0
// end ; end ; if dec1 = 2 then
4475: LD_VAR 0 1
4479: PUSH
4480: LD_INT 2
4482: EQUAL
4483: IFFALSE 4497
// begin fastEnd = 1 ;
4485: LD_ADDR_EXP 13
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// FinishMission ;
4493: CALL 6245 0 0
// end ; end ;
4497: PPOPN 2
4499: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
4500: LD_EXP 1
4504: PPUSH
4505: LD_INT 6
4507: PPUSH
4508: CALL_OW 308
4512: IFFALSE 4774
4514: GO 4516
4516: DISABLE
// begin InGameOn ;
4517: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
4521: LD_INT 35
4523: PPUSH
4524: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
4528: LD_EXP 1
4532: PPUSH
4533: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
4537: LD_EXP 1
4541: PPUSH
4542: LD_INT 62
4544: PPUSH
4545: LD_INT 104
4547: PPUSH
4548: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 ;
4552: LD_EXP 1
4556: PPUSH
4557: LD_EXP 2
4561: PPUSH
4562: CALL_OW 296
4566: PUSH
4567: LD_INT 4
4569: LESS
4570: IFFALSE 4521
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4572: LD_INT 22
4574: PUSH
4575: LD_INT 4
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
4594: LD_EXP 2
4598: PPUSH
4599: LD_EXP 1
4603: PPUSH
4604: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4608: LD_EXP 1
4612: PPUSH
4613: LD_EXP 2
4617: PPUSH
4618: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
4622: LD_EXP 2
4626: PUSH
4627: LD_EXP 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 87
// wait ( 0 0$1 ) ;
4640: LD_INT 35
4642: PPUSH
4643: CALL_OW 67
// DialogueOn ;
4647: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
4651: LD_EXP 2
4655: PPUSH
4656: LD_STRING D3J-Joan-1
4658: PPUSH
4659: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
4663: LD_EXP 1
4667: PPUSH
4668: LD_STRING D3J-JMM-1
4670: PPUSH
4671: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
4675: LD_EXP 2
4679: PPUSH
4680: LD_STRING D3J-Joan-2
4682: PPUSH
4683: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
4687: LD_EXP 1
4691: PPUSH
4692: LD_STRING D3J-JMM-2
4694: PPUSH
4695: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
4699: LD_EXP 1
4703: PPUSH
4704: LD_STRING D4-JMM-1
4706: PPUSH
4707: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
4711: LD_EXP 2
4715: PPUSH
4716: LD_STRING D4-Joan-1
4718: PPUSH
4719: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4723: LD_EXP 1
4727: PPUSH
4728: LD_STRING D4-JMM-2
4730: PPUSH
4731: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
4735: LD_EXP 2
4739: PPUSH
4740: LD_STRING D4-Joan-2
4742: PPUSH
4743: CALL_OW 88
// DialogueOff ;
4747: CALL_OW 7
// InGameOff ;
4751: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
4755: LD_STRING M2J
4757: PPUSH
4758: CALL_OW 337
// SaveForQuickRestart ;
4762: CALL_OW 22
// russianAI = 1 ;
4766: LD_ADDR_EXP 11
4770: PUSH
4771: LD_INT 1
4773: ST_TO_ADDR
// end ;
4774: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
4775: LD_INT 32
4777: PPUSH
4778: CALL_OW 306
4782: IFFALSE 4866
4784: GO 4786
4786: DISABLE
// begin Say ( JMM , D6J-JMM-1 ) ;
4787: LD_EXP 1
4791: PPUSH
4792: LD_STRING D6J-JMM-1
4794: PPUSH
4795: CALL_OW 88
// Say ( Joan , D6J-Joan-1 ) ;
4799: LD_EXP 2
4803: PPUSH
4804: LD_STRING D6J-Joan-1
4806: PPUSH
4807: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
4811: LD_EXP 1
4815: PPUSH
4816: LD_STRING D6J-JMM-2
4818: PPUSH
4819: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
4823: LD_EXP 2
4827: PPUSH
4828: LD_STRING D6J-Joan-2
4830: PPUSH
4831: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
4835: LD_EXP 1
4839: PPUSH
4840: LD_STRING D6J-JMM-3
4842: PPUSH
4843: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
4847: LD_EXP 2
4851: PPUSH
4852: LD_STRING D6J-Joan-3
4854: PPUSH
4855: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
4859: LD_STRING M3
4861: PPUSH
4862: CALL_OW 337
// end ;
4866: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 33
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: PPUSH
4896: CALL_OW 306
4900: IFFALSE 4939
4902: GO 4904
4904: DISABLE
// begin Say ( JMM , D5-JMM-1 ) ;
4905: LD_EXP 1
4909: PPUSH
4910: LD_STRING D5-JMM-1
4912: PPUSH
4913: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
4917: LD_INT 77
4919: PPUSH
4920: LD_INT 87
4922: PPUSH
4923: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
4927: LD_EXP 2
4931: PPUSH
4932: LD_STRING D5-Joan-1
4934: PPUSH
4935: CALL_OW 88
// end ; end_of_file
4939: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
4940: LD_VAR 0 1
4944: PPUSH
4945: CALL_OW 255
4949: PUSH
4950: LD_INT 3
4952: EQUAL
4953: IFFALSE 5027
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
4955: LD_ADDR_EXP 8
4959: PUSH
4960: LD_EXP 8
4964: PPUSH
4965: LD_INT 1
4967: PPUSH
4968: CALL_OW 3
4972: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
4973: LD_ADDR_EXP 8
4977: PUSH
4978: LD_EXP 8
4982: PPUSH
4983: LD_INT 1
4985: PPUSH
4986: CALL_OW 3
4990: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
4991: LD_ADDR_EXP 8
4995: PUSH
4996: LD_EXP 8
5000: PPUSH
5001: LD_INT 1
5003: PPUSH
5004: CALL_OW 3
5008: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
5009: LD_ADDR_EXP 8
5013: PUSH
5014: LD_EXP 8
5018: PPUSH
5019: LD_INT 1
5021: PPUSH
5022: CALL_OW 3
5026: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
5027: LD_VAR 0 1
5031: PPUSH
5032: CALL_OW 255
5036: PUSH
5037: LD_INT 3
5039: EQUAL
5040: PUSH
5041: LD_VAR 0 1
5045: PPUSH
5046: CALL_OW 266
5050: PUSH
5051: LD_INT 0
5053: EQUAL
5054: PUSH
5055: LD_VAR 0 1
5059: PPUSH
5060: CALL_OW 266
5064: PUSH
5065: LD_INT 2
5067: EQUAL
5068: OR
5069: PUSH
5070: LD_VAR 0 1
5074: PPUSH
5075: CALL_OW 266
5079: PUSH
5080: LD_INT 4
5082: EQUAL
5083: OR
5084: PUSH
5085: EMPTY
5086: LIST
5087: AND
5088: IFFALSE 5099
// ComUpgrade ( building ) ;
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL_OW 255
5108: PUSH
5109: LD_INT 3
5111: EQUAL
5112: PUSH
5113: LD_VAR 0 1
5117: PPUSH
5118: CALL_OW 266
5122: PUSH
5123: LD_INT 32
5125: EQUAL
5126: AND
5127: IFFALSE 5168
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
5129: LD_VAR 0 1
5133: PPUSH
5134: LD_INT 42
5136: PUSH
5137: LD_INT 43
5139: PUSH
5140: LD_INT 44
5142: PUSH
5143: LD_INT 46
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 1
5154: PPUSH
5155: LD_INT 4
5157: PPUSH
5158: CALL_OW 12
5162: ARRAY
5163: PPUSH
5164: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 255
5177: PUSH
5178: LD_INT 3
5180: EQUAL
5181: PUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: CALL_OW 266
5191: PUSH
5192: LD_INT 33
5194: EQUAL
5195: AND
5196: IFFALSE 5237
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
5198: LD_VAR 0 1
5202: PPUSH
5203: LD_INT 42
5205: PUSH
5206: LD_INT 43
5208: PUSH
5209: LD_INT 44
5211: PUSH
5212: LD_INT 46
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: PPUSH
5233: CALL_OW 208
// end ;
5237: PPOPN 1
5239: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 255
5249: PUSH
5250: LD_INT 3
5252: EQUAL
5253: PUSH
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 247
5263: PUSH
5264: LD_INT 3
5266: EQUAL
5267: AND
5268: IFFALSE 5960
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
5270: LD_VAR 0 1
5274: PPUSH
5275: CALL_OW 266
5279: PUSH
5280: LD_INT 31
5282: EQUAL
5283: PUSH
5284: LD_VAR 0 1
5288: PPUSH
5289: CALL_OW 266
5293: PUSH
5294: LD_INT 32
5296: EQUAL
5297: OR
5298: PUSH
5299: LD_VAR 0 1
5303: PPUSH
5304: CALL_OW 266
5308: PUSH
5309: LD_INT 36
5311: EQUAL
5312: OR
5313: PUSH
5314: LD_VAR 0 1
5318: PPUSH
5319: CALL_OW 266
5323: PUSH
5324: LD_INT 0
5326: EQUAL
5327: OR
5328: PUSH
5329: LD_VAR 0 1
5333: PPUSH
5334: CALL_OW 266
5338: PUSH
5339: LD_INT 24
5341: EQUAL
5342: OR
5343: PUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 266
5353: PUSH
5354: LD_INT 17
5356: EQUAL
5357: OR
5358: PUSH
5359: LD_VAR 0 1
5363: PPUSH
5364: CALL_OW 266
5368: PUSH
5369: LD_INT 25
5371: EQUAL
5372: OR
5373: PUSH
5374: LD_VAR 0 1
5378: PPUSH
5379: CALL_OW 266
5383: PUSH
5384: LD_INT 19
5386: EQUAL
5387: OR
5388: PUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 266
5398: PUSH
5399: LD_INT 20
5401: EQUAL
5402: OR
5403: PUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 266
5413: PUSH
5414: LD_INT 18
5416: EQUAL
5417: OR
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 266
5428: PUSH
5429: LD_INT 21
5431: EQUAL
5432: OR
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 266
5443: PUSH
5444: LD_INT 23
5446: EQUAL
5447: OR
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 266
5458: PUSH
5459: LD_INT 16
5461: EQUAL
5462: OR
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 266
5473: PUSH
5474: LD_INT 6
5476: EQUAL
5477: OR
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 266
5488: PUSH
5489: LD_INT 29
5491: EQUAL
5492: OR
5493: PUSH
5494: LD_VAR 0 1
5498: PPUSH
5499: CALL_OW 266
5503: PUSH
5504: LD_INT 26
5506: EQUAL
5507: OR
5508: PUSH
5509: LD_VAR 0 1
5513: PPUSH
5514: CALL_OW 266
5518: PUSH
5519: LD_INT 30
5521: EQUAL
5522: OR
5523: PUSH
5524: LD_VAR 0 1
5528: PPUSH
5529: CALL_OW 266
5533: PUSH
5534: LD_INT 28
5536: EQUAL
5537: OR
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: CALL_OW 266
5548: PUSH
5549: LD_INT 27
5551: EQUAL
5552: OR
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 266
5563: PUSH
5564: LD_INT 33
5566: EQUAL
5567: OR
5568: PUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: CALL_OW 266
5578: PUSH
5579: LD_INT 2
5581: EQUAL
5582: OR
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 266
5593: PUSH
5594: LD_INT 4
5596: EQUAL
5597: OR
5598: IFFALSE 5684
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
5600: LD_ADDR_EXP 8
5604: PUSH
5605: LD_EXP 8
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 266
5619: ADD
5620: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
5621: LD_ADDR_EXP 8
5625: PUSH
5626: LD_EXP 8
5630: PUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 250
5640: ADD
5641: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
5642: LD_ADDR_EXP 8
5646: PUSH
5647: LD_EXP 8
5651: PUSH
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 251
5661: ADD
5662: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
5663: LD_ADDR_EXP 8
5667: PUSH
5668: LD_EXP 8
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 254
5682: ADD
5683: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
5684: LD_VAR 0 1
5688: PPUSH
5689: CALL_OW 266
5693: PUSH
5694: LD_INT 1
5696: EQUAL
5697: IFFALSE 5776
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
5699: LD_ADDR_EXP 8
5703: PUSH
5704: LD_EXP 8
5708: PUSH
5709: LD_INT 0
5711: ADD
5712: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
5713: LD_ADDR_EXP 8
5717: PUSH
5718: LD_EXP 8
5722: PUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 250
5732: ADD
5733: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
5734: LD_ADDR_EXP 8
5738: PUSH
5739: LD_EXP 8
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 251
5753: ADD
5754: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
5755: LD_ADDR_EXP 8
5759: PUSH
5760: LD_EXP 8
5764: PUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 254
5774: ADD
5775: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
5776: LD_VAR 0 1
5780: PPUSH
5781: CALL_OW 266
5785: PUSH
5786: LD_INT 3
5788: EQUAL
5789: IFFALSE 5868
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
5791: LD_ADDR_EXP 8
5795: PUSH
5796: LD_EXP 8
5800: PUSH
5801: LD_INT 2
5803: ADD
5804: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
5805: LD_ADDR_EXP 8
5809: PUSH
5810: LD_EXP 8
5814: PUSH
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 250
5824: ADD
5825: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
5826: LD_ADDR_EXP 8
5830: PUSH
5831: LD_EXP 8
5835: PUSH
5836: LD_VAR 0 1
5840: PPUSH
5841: CALL_OW 251
5845: ADD
5846: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
5847: LD_ADDR_EXP 8
5851: PUSH
5852: LD_EXP 8
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 254
5866: ADD
5867: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
5868: LD_VAR 0 1
5872: PPUSH
5873: CALL_OW 266
5877: PUSH
5878: LD_INT 5
5880: EQUAL
5881: IFFALSE 5960
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
5883: LD_ADDR_EXP 8
5887: PUSH
5888: LD_EXP 8
5892: PUSH
5893: LD_INT 4
5895: ADD
5896: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
5897: LD_ADDR_EXP 8
5901: PUSH
5902: LD_EXP 8
5906: PUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 250
5916: ADD
5917: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
5918: LD_ADDR_EXP 8
5922: PUSH
5923: LD_EXP 8
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 251
5937: ADD
5938: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
5939: LD_ADDR_EXP 8
5943: PUSH
5944: LD_EXP 8
5948: PUSH
5949: LD_VAR 0 1
5953: PPUSH
5954: CALL_OW 254
5958: ADD
5959: ST_TO_ADDR
// end ; end ; end ;
5960: PPOPN 1
5962: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
5963: LD_VAR 0 2
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 2
5976: PUSH
5977: LD_INT 40
5979: EQUAL
5980: OR
5981: IFFALSE 6090
// if GetSide ( vehicle ) = 3 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 255
5992: PUSH
5993: LD_INT 3
5995: EQUAL
5996: IFFALSE 6090
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
5998: LD_VAR 0 1
6002: PPUSH
6003: CALL_OW 264
6007: PUSH
6008: LD_INT 46
6010: EQUAL
6011: PUSH
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 264
6021: PUSH
6022: LD_INT 45
6024: EQUAL
6025: OR
6026: PUSH
6027: LD_VAR 0 1
6031: PPUSH
6032: CALL_OW 264
6036: PUSH
6037: LD_INT 44
6039: EQUAL
6040: OR
6041: IFFALSE 6059
// russianTanks = russianTanks ^ vehicle ;
6043: LD_ADDR_EXP 9
6047: PUSH
6048: LD_EXP 9
6052: PUSH
6053: LD_VAR 0 1
6057: ADD
6058: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL_OW 264
6068: PUSH
6069: LD_INT 49
6071: EQUAL
6072: IFFALSE 6090
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
6074: LD_ADDR_EXP 10
6078: PUSH
6079: LD_EXP 10
6083: PUSH
6084: LD_VAR 0 1
6088: ADD
6089: ST_TO_ADDR
// ; end ; end ;
6090: PPOPN 2
6092: END
// on UnitGoesToRed ( unit ) do var i ;
6093: LD_INT 0
6095: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 255
6105: PUSH
6106: LD_INT 3
6108: EQUAL
6109: PUSH
6110: LD_VAR 0 1
6114: PPUSH
6115: CALL_OW 247
6119: PUSH
6120: LD_INT 2
6122: EQUAL
6123: AND
6124: IFFALSE 6242
// begin if russianTanks > 0 then
6126: LD_EXP 9
6130: PUSH
6131: LD_INT 0
6133: GREATER
6134: IFFALSE 6184
// for i in russianTanks do
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: LD_EXP 9
6145: PUSH
6146: FOR_IN
6147: IFFALSE 6182
// if i = unit then
6149: LD_VAR 0 2
6153: PUSH
6154: LD_VAR 0 1
6158: EQUAL
6159: IFFALSE 6180
// russianTanks = russianTanks diff [ unit ] ;
6161: LD_ADDR_EXP 9
6165: PUSH
6166: LD_EXP 9
6170: PUSH
6171: LD_VAR 0 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: DIFF
6179: ST_TO_ADDR
6180: GO 6146
6182: POP
6183: POP
// if russianTimeLapsers > 0 then
6184: LD_EXP 10
6188: PUSH
6189: LD_INT 0
6191: GREATER
6192: IFFALSE 6242
// for i in russianTimeLapsers do
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: LD_EXP 10
6203: PUSH
6204: FOR_IN
6205: IFFALSE 6240
// if i = unit then
6207: LD_VAR 0 2
6211: PUSH
6212: LD_VAR 0 1
6216: EQUAL
6217: IFFALSE 6238
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
6219: LD_ADDR_EXP 10
6223: PUSH
6224: LD_EXP 10
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: DIFF
6237: ST_TO_ADDR
6238: GO 6204
6240: POP
6241: POP
// end ; end ; end_of_file
6242: PPOPN 2
6244: END
// export function FinishMission ; begin
6245: LD_INT 0
6247: PPUSH
// if fastEnd = 1 then
6248: LD_EXP 13
6252: PUSH
6253: LD_INT 1
6255: EQUAL
6256: IFFALSE 6291
// begin AddMedal ( fastend , - 1 ) ;
6258: LD_STRING fastend
6260: PPUSH
6261: LD_INT 1
6263: NEG
6264: PPUSH
6265: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
6269: LD_STRING fastend
6271: PPUSH
6272: LD_INT 1
6274: NEG
6275: PPUSH
6276: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
6280: LD_STRING fastend
6282: PPUSH
6283: LD_INT 1
6285: NEG
6286: PPUSH
6287: CALL_OW 101
// end ; if fastEnd = 0 then
6291: LD_EXP 13
6295: PUSH
6296: LD_INT 0
6298: EQUAL
6299: IFFALSE 6425
// begin if IsOk ( Joan ) then
6301: LD_EXP 2
6305: PPUSH
6306: CALL_OW 302
6310: IFFALSE 6324
// AddMedal ( protect , 1 ) else
6312: LD_STRING protect
6314: PPUSH
6315: LD_INT 1
6317: PPUSH
6318: CALL_OW 101
6322: GO 6335
// AddMedal ( protect , - 1 ) ;
6324: LD_STRING protect
6326: PPUSH
6327: LD_INT 1
6329: NEG
6330: PPUSH
6331: CALL_OW 101
// if amLaserCounter >= 2 then
6335: LD_EXP 7
6339: PUSH
6340: LD_INT 2
6342: GREATEREQUAL
6343: IFFALSE 6357
// AddMedal ( double , 1 ) else
6345: LD_STRING double
6347: PPUSH
6348: LD_INT 1
6350: PPUSH
6351: CALL_OW 101
6355: GO 6368
// AddMedal ( double , - 1 ) ;
6357: LD_STRING double
6359: PPUSH
6360: LD_INT 1
6362: NEG
6363: PPUSH
6364: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
6368: LD_INT 22
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 21
6380: PUSH
6381: LD_INT 1
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 69
6396: PUSH
6397: LD_INT 0
6399: EQUAL
6400: IFFALSE 6414
// AddMedal ( base , 1 ) else
6402: LD_STRING base
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 101
6412: GO 6425
// AddMedal ( base , - 1 ) ;
6414: LD_STRING base
6416: PPUSH
6417: LD_INT 1
6419: NEG
6420: PPUSH
6421: CALL_OW 101
// end ; GiveMedals ( Eliminate ) ;
6425: LD_STRING Eliminate
6427: PPUSH
6428: CALL_OW 102
// YouWin ;
6432: CALL_OW 103
// end ; end_of_file
6436: LD_VAR 0 1
6440: RET
