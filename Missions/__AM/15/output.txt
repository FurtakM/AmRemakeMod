// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export startAttacks ; export powellVeh , centerPowell ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 32
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 33
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 34
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 35
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 36
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
  86: LD_ADDR_EXP 24
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// amUnitsAttack = [ ] ;
  93: LD_ADDR_EXP 25
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// startAttacks = 0 ;
 107: LD_ADDR_EXP 29
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// powellBuildBase = 0 ;
 115: LD_ADDR_EXP 27
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// powellAttacks = 0 ;
 123: LD_ADDR_EXP 28
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// centerPowell = 0 ;
 131: LD_ADDR_EXP 31
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// missionStage = 0 ;
 139: LD_ADDR_EXP 37
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// blockEvent1 = 0 ;
 147: LD_ADDR_EXP 38
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// debugMode = 1 ;
 155: LD_ADDR_EXP 39
 159: PUSH
 160: LD_INT 1
 162: ST_TO_ADDR
// PrepareHeroes ;
 163: CALL 546 0 0
// PrepareHeroesFromEpsilon ;
 167: CALL 1068 0 0
// PrepareRandoms ;
 171: CALL 1412 0 0
// PrepareLegion ;
 175: CALL 2208 0 0
// PrepareRussians ;
 179: CALL 2536 0 0
// PrepareAlliance ;
 183: CALL 2840 0 0
// PrepareDifficulty ;
 187: CALL 3780 0 0
// SetBName ( RuDep2 , zhukov ) ;
 191: LD_INT 23
 193: PPUSH
 194: LD_STRING zhukov
 196: PPUSH
 197: CALL_OW 500
// end ;
 201: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 202: LD_EXP 39
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 516
 212: GO 214
 214: DISABLE
 215: LD_INT 0
 217: PPUSH
// begin enable ;
 218: ENABLE
// fogoff ( true ) ;
 219: LD_INT 1
 221: PPUSH
 222: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 226: LD_ADDR_VAR 0 1
 230: PUSH
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 21
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 69
 259: PUSH
 260: FOR_IN
 261: IFFALSE 277
// SetLives ( i , 1000 ) ;
 263: LD_VAR 0 1
 267: PPUSH
 268: LD_INT 1000
 270: PPUSH
 271: CALL_OW 234
 275: GO 260
 277: POP
 278: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 2
 296: PUSH
 297: LD_INT 30
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: LIST
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: PPUSH
 326: CALL_OW 69
 330: PUSH
 331: FOR_IN
 332: IFFALSE 356
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 334: LD_VAR 0 1
 338: PPUSH
 339: CALL_OW 274
 343: PPUSH
 344: LD_INT 1
 346: PPUSH
 347: LD_INT 9999
 349: PPUSH
 350: CALL_OW 277
 354: GO 331
 356: POP
 357: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 358: LD_ADDR_VAR 0 1
 362: PUSH
 363: LD_INT 22
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 435
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 274
 422: PPUSH
 423: LD_INT 2
 425: PPUSH
 426: LD_INT 9999
 428: PPUSH
 429: CALL_OW 277
 433: GO 410
 435: POP
 436: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 437: LD_ADDR_VAR 0 1
 441: PUSH
 442: LD_INT 22
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: LD_INT 2
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 0
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 3
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ;
 516: PPOPN 1
 518: END
// every 0 0$1 do
 519: GO 521
 521: DISABLE
// begin enable ;
 522: ENABLE
// display_strings = [ powellAttacks , GetSide ( PowBomb ) ] ;
 523: LD_ADDR_OWVAR 47
 527: PUSH
 528: LD_EXP 28
 532: PUSH
 533: LD_INT 137
 535: PPUSH
 536: CALL_OW 255
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: ST_TO_ADDR
// end ; end_of_file
 545: END
// export function PrepareHeroes ; begin
 546: LD_INT 0
 548: PPUSH
// uc_side = 1 ;
 549: LD_ADDR_OWVAR 20
 553: PUSH
 554: LD_INT 1
 556: ST_TO_ADDR
// uc_nation = 1 ;
 557: LD_ADDR_OWVAR 21
 561: PUSH
 562: LD_INT 1
 564: ST_TO_ADDR
// if JMMVeh = [ ] then
 565: LD_EXP 32
 569: PUSH
 570: EMPTY
 571: EQUAL
 572: IFFALSE 618
// begin vc_engine = 3 ;
 574: LD_ADDR_OWVAR 39
 578: PUSH
 579: LD_INT 3
 581: ST_TO_ADDR
// vc_control = 1 ;
 582: LD_ADDR_OWVAR 38
 586: PUSH
 587: LD_INT 1
 589: ST_TO_ADDR
// vc_chassis = 5 ;
 590: LD_ADDR_OWVAR 37
 594: PUSH
 595: LD_INT 5
 597: ST_TO_ADDR
// vc_weapon = 9 ;
 598: LD_ADDR_OWVAR 40
 602: PUSH
 603: LD_INT 9
 605: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 606: LD_ADDR_EXP 19
 610: PUSH
 611: CALL_OW 45
 615: ST_TO_ADDR
// end else
 616: GO 700
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 618: LD_ADDR_OWVAR 37
 622: PUSH
 623: LD_EXP 32
 627: PUSH
 628: LD_INT 1
 630: ARRAY
 631: PUSH
 632: LD_INT 1
 634: ARRAY
 635: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 636: LD_ADDR_OWVAR 39
 640: PUSH
 641: LD_EXP 32
 645: PUSH
 646: LD_INT 2
 648: ARRAY
 649: PUSH
 650: LD_INT 1
 652: ARRAY
 653: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 654: LD_ADDR_OWVAR 38
 658: PUSH
 659: LD_EXP 32
 663: PUSH
 664: LD_INT 3
 666: ARRAY
 667: PUSH
 668: LD_INT 1
 670: ARRAY
 671: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 672: LD_ADDR_OWVAR 40
 676: PUSH
 677: LD_EXP 32
 681: PUSH
 682: LD_INT 4
 684: ARRAY
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 690: LD_ADDR_EXP 19
 694: PUSH
 695: CALL_OW 45
 699: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 700: LD_EXP 33
 704: PUSH
 705: EMPTY
 706: EQUAL
 707: NOT
 708: IFFALSE 792
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 710: LD_ADDR_OWVAR 37
 714: PUSH
 715: LD_EXP 33
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PUSH
 724: LD_INT 1
 726: ARRAY
 727: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 728: LD_ADDR_OWVAR 39
 732: PUSH
 733: LD_EXP 33
 737: PUSH
 738: LD_INT 2
 740: ARRAY
 741: PUSH
 742: LD_INT 1
 744: ARRAY
 745: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 746: LD_ADDR_OWVAR 38
 750: PUSH
 751: LD_EXP 33
 755: PUSH
 756: LD_INT 3
 758: ARRAY
 759: PUSH
 760: LD_INT 1
 762: ARRAY
 763: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 764: LD_ADDR_OWVAR 40
 768: PUSH
 769: LD_EXP 33
 773: PUSH
 774: LD_INT 4
 776: ARRAY
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 782: LD_ADDR_EXP 20
 786: PUSH
 787: CALL_OW 45
 791: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 792: LD_EXP 19
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 804: LD_EXP 20
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 816: LD_EXP 19
 820: PPUSH
 821: LD_INT 99
 823: PPUSH
 824: LD_INT 154
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 48
// if JMMGirlVeh then
 834: LD_EXP 33
 838: IFFALSE 858
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 840: LD_EXP 20
 844: PPUSH
 845: LD_INT 98
 847: PPUSH
 848: LD_INT 159
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 858: LD_ADDR_EXP 1
 862: PUSH
 863: LD_STRING 14_JMM
 865: PPUSH
 866: LD_INT 1
 868: PPUSH
 869: CALL 3206 0 2
 873: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 874: LD_EXP 1
 878: PPUSH
 879: LD_EXP 19
 883: PPUSH
 884: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 888: LD_EXP 33
 892: PUSH
 893: EMPTY
 894: EQUAL
 895: NOT
 896: IFFALSE 1018
// begin if JMMGirl = 1 then
 898: LD_EXP 34
 902: PUSH
 903: LD_INT 1
 905: EQUAL
 906: IFFALSE 938
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 908: LD_ADDR_EXP 2
 912: PUSH
 913: LD_STRING 14_Joan
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: CALL 3206 0 2
 923: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_EXP 20
 933: PPUSH
 934: CALL_OW 52
// end ; if JMMGirl = 2 then
 938: LD_EXP 34
 942: PUSH
 943: LD_INT 2
 945: EQUAL
 946: IFFALSE 978
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 948: LD_ADDR_EXP 4
 952: PUSH
 953: LD_STRING 14_Lisa
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: CALL 3206 0 2
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 964: LD_EXP 4
 968: PPUSH
 969: LD_EXP 20
 973: PPUSH
 974: CALL_OW 52
// end ; if JMMGirl = 3 then
 978: LD_EXP 34
 982: PUSH
 983: LD_INT 3
 985: EQUAL
 986: IFFALSE 1018
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 988: LD_ADDR_EXP 16
 992: PUSH
 993: LD_STRING 14_Connie
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: CALL 3206 0 2
1003: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1004: LD_EXP 16
1008: PPUSH
1009: LD_EXP 20
1013: PPUSH
1014: CALL_OW 52
// end ; end ; uc_side = 4 ;
1018: LD_ADDR_OWVAR 20
1022: PUSH
1023: LD_INT 4
1025: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1026: LD_ADDR_EXP 17
1030: PUSH
1031: LD_STRING Powell
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL 3206 0 2
1041: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
1042: LD_EXP 17
1046: PPUSH
1047: LD_INT 47
1049: PPUSH
1050: LD_INT 63
1052: PPUSH
1053: LD_INT 5
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL_OW 50
// end ;
1063: LD_VAR 0 1
1067: RET
// export function PrepareHeroesFromEpsilon ; begin
1068: LD_INT 0
1070: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1071: LD_ADDR_EXP 4
1075: PUSH
1076: LD_STRING Lisa
1078: PPUSH
1079: CALL 3263 0 1
1083: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1084: LD_ADDR_EXP 5
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: CALL 3263 0 1
1096: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1097: LD_ADDR_EXP 6
1101: PUSH
1102: LD_STRING Bobby
1104: PPUSH
1105: CALL 3263 0 1
1109: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1110: LD_ADDR_EXP 7
1114: PUSH
1115: LD_STRING Cyrus
1117: PPUSH
1118: CALL 3263 0 1
1122: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1123: LD_ADDR_EXP 8
1127: PUSH
1128: LD_STRING Denis
1130: PPUSH
1131: CALL 3263 0 1
1135: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1136: LD_ADDR_EXP 9
1140: PUSH
1141: LD_STRING Brown
1143: PPUSH
1144: CALL 3263 0 1
1148: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1149: LD_ADDR_EXP 10
1153: PUSH
1154: LD_STRING Gladstone
1156: PPUSH
1157: CALL 3263 0 1
1161: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1162: LD_ADDR_EXP 11
1166: PUSH
1167: LD_STRING Houten
1169: PPUSH
1170: CALL 3263 0 1
1174: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1175: LD_ADDR_EXP 12
1179: PUSH
1180: LD_STRING Cornel
1182: PPUSH
1183: CALL 3263 0 1
1187: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1188: LD_ADDR_EXP 13
1192: PUSH
1193: LD_STRING Gary
1195: PPUSH
1196: CALL 3263 0 1
1200: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1201: LD_ADDR_EXP 14
1205: PUSH
1206: LD_STRING Frank
1208: PPUSH
1209: CALL 3263 0 1
1213: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1214: LD_ADDR_EXP 15
1218: PUSH
1219: LD_STRING Kikuchi
1221: PPUSH
1222: CALL 3263 0 1
1226: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1227: LD_EXP 4
1231: PPUSH
1232: LD_INT 6
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1242: LD_EXP 5
1246: PPUSH
1247: LD_INT 6
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1257: LD_EXP 6
1261: PPUSH
1262: LD_INT 6
1264: PPUSH
1265: LD_INT 0
1267: PPUSH
1268: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1272: LD_EXP 7
1276: PPUSH
1277: LD_INT 6
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1287: LD_EXP 8
1291: PPUSH
1292: LD_INT 6
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1302: LD_EXP 9
1306: PPUSH
1307: LD_INT 6
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1317: LD_EXP 10
1321: PPUSH
1322: LD_INT 6
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1332: LD_EXP 11
1336: PPUSH
1337: LD_INT 6
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1347: LD_EXP 12
1351: PPUSH
1352: LD_INT 6
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1362: LD_EXP 13
1366: PPUSH
1367: LD_INT 6
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1377: LD_EXP 14
1381: PPUSH
1382: LD_INT 6
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_INT 6
1399: PPUSH
1400: LD_INT 0
1402: PPUSH
1403: CALL_OW 49
// end ;
1407: LD_VAR 0 1
1411: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
// uc_side = 4 ;
1419: LD_ADDR_OWVAR 20
1423: PUSH
1424: LD_INT 4
1426: ST_TO_ADDR
// uc_nation = 1 ;
1427: LD_ADDR_OWVAR 21
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_STRING 13s_others
1442: PPUSH
1443: CALL_OW 31
1447: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1448: LD_ADDR_VAR 0 4
1452: PUSH
1453: LD_INT 22
1455: PUSH
1456: LD_INT 4
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 21
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: PUSH
1482: LD_EXP 17
1486: PUSH
1487: EMPTY
1488: LIST
1489: DIFF
1490: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_VAR 0 4
1500: PPUSH
1501: CALL 3320 0 1
1505: ST_TO_ADDR
// if others13 >= 8 then
1506: LD_EXP 18
1510: PUSH
1511: LD_INT 8
1513: GREATEREQUAL
1514: IFFALSE 1575
// begin for i = 1 to 8 do
1516: LD_ADDR_VAR 0 2
1520: PUSH
1521: DOUBLE
1522: LD_INT 1
1524: DEC
1525: ST_TO_ADDR
1526: LD_INT 8
1528: PUSH
1529: FOR_TO
1530: IFFALSE 1571
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1532: LD_EXP 18
1536: PUSH
1537: LD_INT 1
1539: ARRAY
1540: PPUSH
1541: LD_INT 6
1543: PPUSH
1544: LD_INT 0
1546: PPUSH
1547: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1551: LD_ADDR_EXP 18
1555: PUSH
1556: LD_EXP 18
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: CALL_OW 3
1568: ST_TO_ADDR
// end ;
1569: GO 1529
1571: POP
1572: POP
// end else
1573: GO 1634
// begin for i = 1 to others13 do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_EXP 18
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1632
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1593: LD_EXP 18
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PPUSH
1602: LD_INT 6
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1612: LD_ADDR_EXP 18
1616: PUSH
1617: LD_EXP 18
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL_OW 3
1629: ST_TO_ADDR
// end ;
1630: GO 1590
1632: POP
1633: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_INT 22
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 21
1651: PUSH
1652: LD_INT 1
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_EXP 17
1672: PUSH
1673: EMPTY
1674: LIST
1675: DIFF
1676: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1677: LD_ADDR_VAR 0 5
1681: PUSH
1682: LD_VAR 0 4
1686: PPUSH
1687: CALL 3320 0 1
1691: ST_TO_ADDR
// if others13 >= heroLenght then
1692: LD_EXP 18
1696: PUSH
1697: LD_VAR 0 5
1701: GREATEREQUAL
1702: IFFALSE 1765
// begin for i = 1 to heroLenght do
1704: LD_ADDR_VAR 0 2
1708: PUSH
1709: DOUBLE
1710: LD_INT 1
1712: DEC
1713: ST_TO_ADDR
1714: LD_VAR 0 5
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1761
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1722: LD_EXP 18
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: LD_INT 0
1736: PPUSH
1737: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1741: LD_ADDR_EXP 18
1745: PUSH
1746: LD_EXP 18
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: CALL_OW 3
1758: ST_TO_ADDR
// end ;
1759: GO 1719
1761: POP
1762: POP
// end else
1763: GO 1824
// begin for i = 1 to others13 do
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: DOUBLE
1771: LD_INT 1
1773: DEC
1774: ST_TO_ADDR
1775: LD_EXP 18
1779: PUSH
1780: FOR_TO
1781: IFFALSE 1822
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1783: LD_EXP 18
1787: PUSH
1788: LD_INT 1
1790: ARRAY
1791: PPUSH
1792: LD_INT 6
1794: PPUSH
1795: LD_INT 0
1797: PPUSH
1798: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1802: LD_ADDR_EXP 18
1806: PUSH
1807: LD_EXP 18
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: CALL_OW 3
1819: ST_TO_ADDR
// end ;
1820: GO 1780
1822: POP
1823: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_INT 22
1831: PUSH
1832: LD_INT 4
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 21
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PUSH
1858: LD_EXP 17
1862: PUSH
1863: EMPTY
1864: LIST
1865: DIFF
1866: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1867: LD_ADDR_VAR 0 5
1871: PUSH
1872: LD_VAR 0 4
1876: PPUSH
1877: CALL 3320 0 1
1881: ST_TO_ADDR
// if heroLenght < 19 then
1882: LD_VAR 0 5
1886: PUSH
1887: LD_INT 19
1889: LESS
1890: IFFALSE 1988
// for i = 1 to 19 - heroLenght do
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: DOUBLE
1898: LD_INT 1
1900: DEC
1901: ST_TO_ADDR
1902: LD_INT 19
1904: PUSH
1905: LD_VAR 0 5
1909: MINUS
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1986
// begin hc_gallery =  ;
1914: LD_ADDR_OWVAR 33
1918: PUSH
1919: LD_STRING 
1921: ST_TO_ADDR
// hc_name =  ;
1922: LD_ADDR_OWVAR 26
1926: PUSH
1927: LD_STRING 
1929: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
1930: LD_INT 0
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 4
1938: PPUSH
1939: CALL_OW 12
1943: PPUSH
1944: LD_INT 6
1946: PPUSH
1947: LD_INT 8
1949: PPUSH
1950: CALL_OW 12
1954: PPUSH
1955: CALL_OW 380
// un = CreateHuman ;
1959: LD_ADDR_VAR 0 3
1963: PUSH
1964: CALL_OW 44
1968: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
1969: LD_VAR 0 3
1973: PPUSH
1974: LD_INT 6
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 49
// end ;
1984: GO 1911
1986: POP
1987: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 22
1995: PUSH
1996: LD_INT 4
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 21
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 17
2026: PUSH
2027: LD_EXP 1
2031: PUSH
2032: LD_EXP 2
2036: PUSH
2037: LD_EXP 3
2041: PUSH
2042: LD_EXP 4
2046: PUSH
2047: LD_EXP 5
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 7
2061: PUSH
2062: LD_EXP 8
2066: PUSH
2067: LD_EXP 9
2071: PUSH
2072: LD_EXP 10
2076: PUSH
2077: LD_EXP 11
2081: PUSH
2082: LD_EXP 12
2086: PUSH
2087: LD_EXP 13
2091: PUSH
2092: LD_EXP 14
2096: PUSH
2097: LD_EXP 15
2101: PUSH
2102: LD_EXP 16
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: DIFF
2126: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2127: LD_ADDR_EXP 24
2131: PUSH
2132: LD_VAR 0 4
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL 3413 0 2
2144: ST_TO_ADDR
// for i = 1 to 8 do
2145: LD_ADDR_VAR 0 2
2149: PUSH
2150: DOUBLE
2151: LD_INT 1
2153: DEC
2154: ST_TO_ADDR
2155: LD_INT 8
2157: PUSH
2158: FOR_TO
2159: IFFALSE 2189
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2161: LD_ADDR_EXP 25
2165: PUSH
2166: LD_EXP 25
2170: PUSH
2171: LD_EXP 24
2175: PUSH
2176: LD_VAR 0 2
2180: ARRAY
2181: PUSH
2182: LD_INT 1
2184: ARRAY
2185: ADD
2186: ST_TO_ADDR
2187: GO 2158
2189: POP
2190: POP
// SetClass ( amUnitsAttack , 1 ) ;
2191: LD_EXP 25
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL_OW 336
// end ; end_of_file
2203: LD_VAR 0 1
2207: RET
// export function PrepareLegion ; var i , arControler ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
// uc_side = 8 ;
2213: LD_ADDR_OWVAR 20
2217: PUSH
2218: LD_INT 8
2220: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
2221: LD_ADDR_EXP 23
2225: PUSH
2226: LD_STRING Kurt
2228: PPUSH
2229: LD_INT 0
2231: PPUSH
2232: CALL 3206 0 2
2236: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
2237: LD_EXP 23
2241: PPUSH
2242: LD_INT 122
2244: PPUSH
2245: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
2249: LD_INT 8
2251: PPUSH
2252: LD_INT 2
2254: PPUSH
2255: LD_INT 122
2257: PPUSH
2258: LD_INT 10
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 4
2266: PPUSH
2267: CALL 4245 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
2271: LD_INT 8
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: LD_INT 99
2279: PPUSH
2280: LD_INT 10
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL 4245 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
2293: LD_INT 8
2295: PPUSH
2296: LD_INT 2
2298: PPUSH
2299: LD_INT 104
2301: PPUSH
2302: LD_INT 10
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: CALL 4245 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
2315: LD_INT 8
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: LD_INT 104
2323: PPUSH
2324: LD_INT 10
2326: PPUSH
2327: LD_INT 8
2329: PPUSH
2330: LD_INT 1
2332: PPUSH
2333: CALL 4245 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
2337: LD_INT 8
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 118
2345: PPUSH
2346: LD_INT 10
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: LD_INT 1
2354: PPUSH
2355: CALL 4245 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
2359: LD_INT 8
2361: PPUSH
2362: LD_INT 2
2364: PPUSH
2365: LD_INT 117
2367: PPUSH
2368: LD_INT 10
2370: PPUSH
2371: LD_INT 3
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: CALL 4245 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 22
2388: PUSH
2389: LD_INT 8
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 21
2398: PUSH
2399: LD_INT 3
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 30
2408: PUSH
2409: LD_INT 32
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 58
2418: PUSH
2419: EMPTY
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: PUSH
2433: FOR_IN
2434: IFFALSE 2462
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
2436: LD_INT 8
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: LD_VAR 0 2
2446: PPUSH
2447: LD_INT 10
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 1
2455: PPUSH
2456: CALL 4245 0 6
2460: GO 2433
2462: POP
2463: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
2464: LD_INT 8
2466: PPUSH
2467: LD_INT 2
2469: PPUSH
2470: LD_INT 140
2472: PPUSH
2473: LD_INT 10
2475: PPUSH
2476: LD_INT 3
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL 4245 0 6
// arControler = UnitsInside ( ArControl ) ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_INT 140
2493: PPUSH
2494: CALL_OW 313
2498: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
2499: LD_INT 139
2501: PPUSH
2502: LD_VAR 0 3
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
2515: LD_INT 138
2517: PPUSH
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: PPUSH
2527: CALL_OW 195
// end ; end_of_file
2531: LD_VAR 0 1
2535: RET
// export function PrepareRussians ; var i ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
// uc_side = 3 ;
2540: LD_ADDR_OWVAR 20
2544: PUSH
2545: LD_INT 3
2547: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2548: LD_ADDR_EXP 21
2552: PUSH
2553: LD_STRING Platonov
2555: PPUSH
2556: LD_INT 0
2558: PPUSH
2559: CALL 3206 0 2
2563: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
2564: LD_EXP 21
2568: PPUSH
2569: LD_INT 23
2571: PPUSH
2572: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 26
2584: PPUSH
2585: LD_INT 10
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 5
2593: PPUSH
2594: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
2598: LD_INT 3
2600: PPUSH
2601: LD_INT 3
2603: PPUSH
2604: LD_INT 26
2606: PPUSH
2607: LD_INT 10
2609: PPUSH
2610: LD_INT 2
2612: PPUSH
2613: LD_INT 6
2615: PPUSH
2616: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 27
2628: PPUSH
2629: LD_INT 10
2631: PPUSH
2632: LD_INT 9
2634: PPUSH
2635: LD_INT 6
2637: PPUSH
2638: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 27
2650: PPUSH
2651: LD_INT 10
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 3
2659: PPUSH
2660: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
2664: LD_INT 3
2666: PPUSH
2667: LD_INT 3
2669: PPUSH
2670: LD_INT 4
2672: PPUSH
2673: LD_INT 10
2675: PPUSH
2676: LD_INT 3
2678: PPUSH
2679: LD_INT 6
2681: PPUSH
2682: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
2686: LD_INT 3
2688: PPUSH
2689: LD_INT 3
2691: PPUSH
2692: LD_INT 10
2694: PPUSH
2695: LD_INT 10
2697: PPUSH
2698: LD_INT 3
2700: PPUSH
2701: LD_INT 6
2703: PPUSH
2704: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
2708: LD_INT 3
2710: PPUSH
2711: LD_INT 3
2713: PPUSH
2714: LD_INT 2
2716: PPUSH
2717: LD_INT 10
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL 4245 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
2730: LD_INT 3
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 10
2741: PPUSH
2742: LD_INT 4
2744: PPUSH
2745: LD_INT 3
2747: PPUSH
2748: CALL 4245 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2752: LD_ADDR_VAR 0 2
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 3
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 21
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 58
2789: PUSH
2790: EMPTY
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: FOR_IN
2805: IFFALSE 2833
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
2807: LD_INT 3
2809: PPUSH
2810: LD_INT 3
2812: PPUSH
2813: LD_VAR 0 2
2817: PPUSH
2818: LD_INT 10
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL 4245 0 6
2831: GO 2804
2833: POP
2834: POP
// end ; end_of_file
2835: LD_VAR 0 1
2839: RET
// export function PrepareAlliance ; var i ; begin
2840: LD_INT 0
2842: PPUSH
2843: PPUSH
// uc_side = 7 ;
2844: LD_ADDR_OWVAR 20
2848: PUSH
2849: LD_INT 7
2851: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
2852: LD_ADDR_EXP 22
2856: PUSH
2857: LD_STRING Roth
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL 3206 0 2
2867: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
2868: LD_EXP 22
2872: PPUSH
2873: LD_INT 249
2875: PPUSH
2876: LD_INT 187
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
2886: LD_EXP 22
2890: PPUSH
2891: LD_INT 248
2893: PPUSH
2894: LD_INT 187
2896: PPUSH
2897: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
2901: LD_INT 7
2903: PPUSH
2904: LD_INT 1
2906: PPUSH
2907: LD_INT 45
2909: PPUSH
2910: LD_INT 10
2912: PPUSH
2913: LD_INT 2
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: CALL 4245 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
2923: LD_INT 7
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 45
2931: PPUSH
2932: LD_INT 10
2934: PPUSH
2935: LD_INT 2
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL 4245 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
2945: LD_INT 7
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 194
2953: PPUSH
2954: LD_INT 10
2956: PPUSH
2957: LD_INT 5
2959: PPUSH
2960: LD_INT 4
2962: PPUSH
2963: CALL 4245 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
2967: LD_INT 7
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_INT 194
2975: PPUSH
2976: LD_INT 10
2978: PPUSH
2979: LD_INT 8
2981: PPUSH
2982: LD_INT 6
2984: PPUSH
2985: CALL 4245 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
2989: LD_INT 7
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 156
2997: PPUSH
2998: LD_INT 10
3000: PPUSH
3001: LD_INT 3
3003: PPUSH
3004: LD_INT 6
3006: PPUSH
3007: CALL 4245 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
3011: LD_INT 7
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 162
3019: PPUSH
3020: LD_INT 10
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL 4245 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
3033: LD_INT 7
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: LD_INT 39
3041: PPUSH
3042: LD_INT 10
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: LD_INT 4
3050: PPUSH
3051: CALL 4245 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
3055: LD_INT 7
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 133
3063: PPUSH
3064: LD_INT 10
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: LD_INT 4
3072: PPUSH
3073: CALL 4245 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
3077: LD_INT 7
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: LD_INT 46
3085: PPUSH
3086: LD_INT 10
3088: PPUSH
3089: LD_INT 4
3091: PPUSH
3092: LD_INT 2
3094: PPUSH
3095: CALL 4245 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
3099: LD_ADDR_VAR 0 2
3103: PUSH
3104: LD_INT 22
3106: PUSH
3107: LD_INT 7
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: LD_INT 21
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PUSH
3124: LD_INT 30
3126: PUSH
3127: LD_INT 32
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 58
3136: PUSH
3137: EMPTY
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3199
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
3154: LD_INT 7
3156: PPUSH
3157: LD_INT 1
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 2
3172: PPUSH
3173: CALL_OW 12
3177: ARRAY
3178: PPUSH
3179: LD_VAR 0 2
3183: PPUSH
3184: LD_INT 10
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: CALL 4245 0 6
3197: GO 3151
3199: POP
3200: POP
// end ; end_of_file
3201: LD_VAR 0 1
3205: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// if exist_mode then
3210: LD_VAR 0 2
3214: IFFALSE 3233
// unit := CreateCharacter ( ident ) else
3216: LD_ADDR_VAR 0 4
3220: PUSH
3221: LD_VAR 0 1
3225: PPUSH
3226: CALL_OW 34
3230: ST_TO_ADDR
3231: GO 3248
// unit := NewCharacter ( ident ) ;
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: LD_VAR 0 1
3242: PPUSH
3243: CALL_OW 25
3247: ST_TO_ADDR
// result := unit ;
3248: LD_ADDR_VAR 0 3
3252: PUSH
3253: LD_VAR 0 4
3257: ST_TO_ADDR
// end ;
3258: LD_VAR 0 3
3262: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
3263: LD_INT 0
3265: PPUSH
3266: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
3267: LD_STRING 13s_
3269: PUSH
3270: LD_VAR 0 1
3274: STR
3275: PPUSH
3276: CALL_OW 28
3280: PUSH
3281: LD_INT 1
3283: EQUAL
3284: IFFALSE 3305
// unit = CreateCharacter ( 13s_ & ident ) ;
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: LD_STRING 13s_
3293: PUSH
3294: LD_VAR 0 1
3298: STR
3299: PPUSH
3300: CALL_OW 34
3304: ST_TO_ADDR
// result := unit ;
3305: LD_ADDR_VAR 0 2
3309: PUSH
3310: LD_VAR 0 3
3314: ST_TO_ADDR
// end ;
3315: LD_VAR 0 2
3319: RET
// export function TabLenght ( tab ) ; var i ; begin
3320: LD_INT 0
3322: PPUSH
3323: PPUSH
// for i = 1 to tab do
3324: LD_ADDR_VAR 0 3
3328: PUSH
3329: DOUBLE
3330: LD_INT 1
3332: DEC
3333: ST_TO_ADDR
3334: LD_VAR 0 1
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3354
// result = i ;
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: LD_VAR 0 3
3351: ST_TO_ADDR
3352: GO 3339
3354: POP
3355: POP
// end ;
3356: LD_VAR 0 2
3360: RET
// export function Video ( mode ) ; begin
3361: LD_INT 0
3363: PPUSH
// if mode = true then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 1
3371: EQUAL
3372: IFFALSE 3392
// begin ingame_video = true ;
3374: LD_ADDR_OWVAR 52
3378: PUSH
3379: LD_INT 1
3381: ST_TO_ADDR
// interface_hidden = true ;
3382: LD_ADDR_OWVAR 54
3386: PUSH
3387: LD_INT 1
3389: ST_TO_ADDR
// end else
3390: GO 3408
// begin ingame_video = false ;
3392: LD_ADDR_OWVAR 52
3396: PUSH
3397: LD_INT 0
3399: ST_TO_ADDR
// interface_hidden = false ;
3400: LD_ADDR_OWVAR 54
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// end ; end ;
3408: LD_VAR 0 2
3412: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
3413: LD_INT 0
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
// if not list then
3419: LD_VAR 0 1
3423: NOT
3424: IFFALSE 3428
// exit ;
3426: GO 3775
// result := [ ] ;
3428: LD_ADDR_VAR 0 3
3432: PUSH
3433: EMPTY
3434: ST_TO_ADDR
// for i in list do
3435: LD_ADDR_VAR 0 4
3439: PUSH
3440: LD_VAR 0 1
3444: PUSH
3445: FOR_IN
3446: IFFALSE 3687
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
3448: LD_ADDR_VAR 0 6
3452: PUSH
3453: LD_VAR 0 4
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 259
3465: PUSH
3466: LD_VAR 0 4
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 259
3478: PLUS
3479: PUSH
3480: LD_VAR 0 4
3484: PPUSH
3485: LD_INT 3
3487: PPUSH
3488: CALL_OW 259
3492: PLUS
3493: PUSH
3494: LD_VAR 0 4
3498: PPUSH
3499: LD_INT 4
3501: PPUSH
3502: CALL_OW 259
3506: PLUS
3507: PUSH
3508: LD_INT 4
3510: DIV
3511: ST_TO_ADDR
// if not result then
3512: LD_VAR 0 3
3516: NOT
3517: IFFALSE 3543
// result := [ [ i , tmp ] ] else
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: LD_VAR 0 4
3528: PUSH
3529: LD_VAR 0 6
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: ST_TO_ADDR
3541: GO 3685
// begin if result [ result ] [ 2 ] < tmp then
3543: LD_VAR 0 3
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PUSH
3558: LD_VAR 0 6
3562: LESS
3563: IFFALSE 3605
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: LD_VAR 0 3
3574: PPUSH
3575: LD_VAR 0 3
3579: PUSH
3580: LD_INT 1
3582: PLUS
3583: PPUSH
3584: LD_VAR 0 4
3588: PUSH
3589: LD_VAR 0 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 2
3602: ST_TO_ADDR
3603: GO 3685
// for j = 1 to result do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 3
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3683
// begin if tmp < result [ j ] [ 2 ] then
3623: LD_VAR 0 6
3627: PUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_VAR 0 5
3637: ARRAY
3638: PUSH
3639: LD_INT 2
3641: ARRAY
3642: LESS
3643: IFFALSE 3681
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_VAR 0 3
3654: PPUSH
3655: LD_VAR 0 5
3659: PPUSH
3660: LD_VAR 0 4
3664: PUSH
3665: LD_VAR 0 6
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PPUSH
3674: CALL_OW 2
3678: ST_TO_ADDR
// break ;
3679: GO 3683
// end ; end ;
3681: GO 3620
3683: POP
3684: POP
// end ; end ;
3685: GO 3445
3687: POP
3688: POP
// if result and not asc then
3689: LD_VAR 0 3
3693: PUSH
3694: LD_VAR 0 2
3698: NOT
3699: AND
3700: IFFALSE 3775
// begin tmp := result ;
3702: LD_ADDR_VAR 0 6
3706: PUSH
3707: LD_VAR 0 3
3711: ST_TO_ADDR
// for i = tmp downto 1 do
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: DOUBLE
3718: LD_VAR 0 6
3722: INC
3723: ST_TO_ADDR
3724: LD_INT 1
3726: PUSH
3727: FOR_DOWNTO
3728: IFFALSE 3773
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_VAR 0 6
3744: PUSH
3745: LD_VAR 0 4
3749: MINUS
3750: PUSH
3751: LD_INT 1
3753: PLUS
3754: PPUSH
3755: LD_VAR 0 6
3759: PUSH
3760: LD_VAR 0 4
3764: ARRAY
3765: PPUSH
3766: CALL_OW 1
3770: ST_TO_ADDR
3771: GO 3727
3773: POP
3774: POP
// end ; end ;
3775: LD_VAR 0 3
3779: RET
// export function PrepareDifficulty ; begin
3780: LD_INT 0
3782: PPUSH
// if difficulty = 1 then
3783: LD_OWVAR 67
3787: PUSH
3788: LD_INT 1
3790: EQUAL
3791: IFFALSE 3819
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3793: LD_INT 51
3795: PPUSH
3796: LD_INT 6
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3806: LD_INT 57
3808: PPUSH
3809: LD_INT 6
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 322
// end ; if difficulty = 2 then
3819: LD_OWVAR 67
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3881
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3829: LD_INT 51
3831: PPUSH
3832: LD_INT 6
3834: PPUSH
3835: LD_INT 2
3837: PPUSH
3838: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3842: LD_INT 57
3844: PPUSH
3845: LD_INT 6
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3855: LD_INT 52
3857: PPUSH
3858: LD_INT 6
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3868: LD_INT 58
3870: PPUSH
3871: LD_INT 6
3873: PPUSH
3874: LD_INT 2
3876: PPUSH
3877: CALL_OW 322
// end ; if difficulty = 3 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 3
3888: EQUAL
3889: IFFALSE 3969
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3891: LD_INT 51
3893: PPUSH
3894: LD_INT 6
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3904: LD_INT 57
3906: PPUSH
3907: LD_INT 6
3909: PPUSH
3910: LD_INT 2
3912: PPUSH
3913: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3917: LD_INT 52
3919: PPUSH
3920: LD_INT 6
3922: PPUSH
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3930: LD_INT 58
3932: PPUSH
3933: LD_INT 6
3935: PPUSH
3936: LD_INT 2
3938: PPUSH
3939: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3943: LD_INT 53
3945: PPUSH
3946: LD_INT 6
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3956: LD_INT 59
3958: PPUSH
3959: LD_INT 6
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL_OW 322
// end ; end ;
3969: LD_VAR 0 1
3973: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
3979: LD_ADDR_VAR 0 1
3983: PUSH
3984: LD_VAR 0 1
3988: PUSH
3989: LD_EXP 1
3993: PUSH
3994: LD_EXP 2
3998: PUSH
3999: LD_EXP 3
4003: PUSH
4004: LD_EXP 4
4008: PUSH
4009: LD_EXP 5
4013: PUSH
4014: LD_EXP 6
4018: PUSH
4019: LD_EXP 7
4023: PUSH
4024: LD_EXP 8
4028: PUSH
4029: LD_EXP 9
4033: PUSH
4034: LD_EXP 10
4038: PUSH
4039: LD_EXP 11
4043: PUSH
4044: LD_EXP 12
4048: PUSH
4049: LD_EXP 13
4053: PUSH
4054: LD_EXP 14
4058: PUSH
4059: LD_EXP 15
4063: PUSH
4064: LD_EXP 17
4068: PUSH
4069: LD_EXP 16
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: DIFF
4093: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
4094: LD_ADDR_VAR 0 6
4098: PUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_VAR 0 1
4106: PPUSH
4107: CALL_OW 12
4111: ST_TO_ADDR
// for i = 1 to characters do
4112: LD_ADDR_VAR 0 5
4116: PUSH
4117: DOUBLE
4118: LD_INT 1
4120: DEC
4121: ST_TO_ADDR
4122: LD_VAR 0 1
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4238
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4130: LD_VAR 0 5
4134: PUSH
4135: LD_VAR 0 6
4139: EQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: PUSH
4146: LD_VAR 0 5
4150: ARRAY
4151: PPUSH
4152: CALL_OW 258
4156: PUSH
4157: LD_INT 1
4159: EQUAL
4160: AND
4161: IFFALSE 4183
// Say ( characters [ i ] , dialogMID ) ;
4163: LD_VAR 0 1
4167: PUSH
4168: LD_VAR 0 5
4172: ARRAY
4173: PPUSH
4174: LD_VAR 0 2
4178: PPUSH
4179: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4183: LD_VAR 0 5
4187: PUSH
4188: LD_VAR 0 6
4192: EQUAL
4193: PUSH
4194: LD_VAR 0 1
4198: PUSH
4199: LD_VAR 0 5
4203: ARRAY
4204: PPUSH
4205: CALL_OW 258
4209: PUSH
4210: LD_INT 2
4212: EQUAL
4213: AND
4214: IFFALSE 4236
// Say ( characters [ i ] , dialogFID ) ;
4216: LD_VAR 0 1
4220: PUSH
4221: LD_VAR 0 5
4225: ARRAY
4226: PPUSH
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 88
// end ;
4236: GO 4127
4238: POP
4239: POP
// end ;
4240: LD_VAR 0 4
4244: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
4245: LD_INT 0
4247: PPUSH
4248: PPUSH
4249: PPUSH
4250: PPUSH
4251: PPUSH
// for i = 1 to count do
4252: LD_ADDR_VAR 0 8
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_VAR 0 6
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4349
// begin uc_side = side ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_VAR 0 1
4279: ST_TO_ADDR
// uc_nation = nation ;
4280: LD_ADDR_OWVAR 21
4284: PUSH
4285: LD_VAR 0 2
4289: ST_TO_ADDR
// hc_gallery =  ;
4290: LD_ADDR_OWVAR 33
4294: PUSH
4295: LD_STRING 
4297: ST_TO_ADDR
// hc_name =  ;
4298: LD_ADDR_OWVAR 26
4302: PUSH
4303: LD_STRING 
4305: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4306: LD_INT 0
4308: PPUSH
4309: LD_VAR 0 5
4313: PPUSH
4314: LD_VAR 0 4
4318: PPUSH
4319: CALL_OW 380
// un = CreateHuman ;
4323: LD_ADDR_VAR 0 10
4327: PUSH
4328: CALL_OW 44
4332: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4333: LD_VAR 0 10
4337: PPUSH
4338: LD_VAR 0 3
4342: PPUSH
4343: CALL_OW 52
// end ;
4347: GO 4267
4349: POP
4350: POP
// end ;
4351: LD_VAR 0 7
4355: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
4356: LD_INT 0
4358: PPUSH
4359: PPUSH
4360: PPUSH
4361: PPUSH
4362: PPUSH
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
4368: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
4369: LD_INT 2100
4371: PUSH
4372: LD_INT 3150
4374: PUSH
4375: LD_INT 4200
4377: PUSH
4378: LD_INT 5250
4380: PUSH
4381: LD_INT 6300
4383: PUSH
4384: LD_INT 7350
4386: PUSH
4387: LD_INT 8400
4389: PUSH
4390: LD_INT 9450
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 8
4408: PPUSH
4409: CALL_OW 12
4413: ARRAY
4414: PPUSH
4415: CALL_OW 67
// amChassisTab = [ ] ;
4419: LD_ADDR_VAR 0 19
4423: PUSH
4424: EMPTY
4425: ST_TO_ADDR
// arChassisTab = [ ] ;
4426: LD_ADDR_VAR 0 18
4430: PUSH
4431: EMPTY
4432: ST_TO_ADDR
// ruChassisTab = [ ] ;
4433: LD_ADDR_VAR 0 17
4437: PUSH
4438: EMPTY
4439: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// if nation = 1 then
4447: LD_VAR 0 5
4451: PUSH
4452: LD_INT 1
4454: EQUAL
4455: IFFALSE 4946
// begin uc_side = side ;
4457: LD_ADDR_OWVAR 20
4461: PUSH
4462: LD_VAR 0 2
4466: ST_TO_ADDR
// uc_nation = nation ;
4467: LD_ADDR_OWVAR 21
4471: PUSH
4472: LD_VAR 0 5
4476: ST_TO_ADDR
// vc_engine = vehengine ;
4477: LD_ADDR_OWVAR 39
4481: PUSH
4482: LD_VAR 0 6
4486: ST_TO_ADDR
// vc_control = vehcontrol ;
4487: LD_ADDR_OWVAR 38
4491: PUSH
4492: LD_VAR 0 7
4496: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4497: LD_ADDR_OWVAR 40
4501: PUSH
4502: LD_VAR 0 10
4506: PUSH
4507: LD_INT 1
4509: PPUSH
4510: LD_VAR 0 10
4514: PPUSH
4515: CALL_OW 12
4519: ARRAY
4520: ST_TO_ADDR
// for j = 1 to AMWeapon do
4521: LD_ADDR_VAR 0 14
4525: PUSH
4526: DOUBLE
4527: LD_INT 1
4529: DEC
4530: ST_TO_ADDR
4531: LD_VAR 0 10
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4838
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4539: LD_VAR 0 10
4543: PUSH
4544: LD_VAR 0 14
4548: ARRAY
4549: PUSH
4550: LD_INT 2
4552: EQUAL
4553: PUSH
4554: LD_VAR 0 10
4558: PUSH
4559: LD_VAR 0 14
4563: ARRAY
4564: PUSH
4565: LD_INT 3
4567: EQUAL
4568: OR
4569: IFFALSE 4622
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4571: LD_ADDR_VAR 0 19
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: LD_INT 3
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 5
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4598: LD_ADDR_OWVAR 37
4602: PUSH
4603: LD_VAR 0 19
4607: PUSH
4608: LD_INT 1
4610: PPUSH
4611: LD_VAR 0 19
4615: PPUSH
4616: CALL_OW 12
4620: ARRAY
4621: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4622: LD_VAR 0 10
4626: PUSH
4627: LD_VAR 0 14
4631: ARRAY
4632: PUSH
4633: LD_INT 4
4635: EQUAL
4636: PUSH
4637: LD_VAR 0 10
4641: PUSH
4642: LD_VAR 0 14
4646: ARRAY
4647: PUSH
4648: LD_INT 5
4650: EQUAL
4651: OR
4652: PUSH
4653: LD_VAR 0 10
4657: PUSH
4658: LD_VAR 0 14
4662: ARRAY
4663: PUSH
4664: LD_INT 9
4666: EQUAL
4667: OR
4668: PUSH
4669: LD_VAR 0 10
4673: PUSH
4674: LD_VAR 0 14
4678: ARRAY
4679: PUSH
4680: LD_INT 11
4682: EQUAL
4683: OR
4684: PUSH
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 14
4694: ARRAY
4695: PUSH
4696: LD_INT 7
4698: EQUAL
4699: OR
4700: IFFALSE 4749
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4702: LD_ADDR_VAR 0 19
4706: PUSH
4707: LD_INT 2
4709: PUSH
4710: LD_INT 3
4712: PUSH
4713: LD_INT 4
4715: PUSH
4716: LD_INT 5
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4725: LD_ADDR_OWVAR 37
4729: PUSH
4730: LD_VAR 0 19
4734: PUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_VAR 0 19
4742: PPUSH
4743: CALL_OW 12
4747: ARRAY
4748: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4749: LD_VAR 0 10
4753: PUSH
4754: LD_VAR 0 14
4758: ARRAY
4759: PUSH
4760: LD_INT 8
4762: EQUAL
4763: PUSH
4764: LD_VAR 0 10
4768: PUSH
4769: LD_VAR 0 14
4773: ARRAY
4774: PUSH
4775: LD_INT 6
4777: EQUAL
4778: OR
4779: PUSH
4780: LD_VAR 0 10
4784: PUSH
4785: LD_VAR 0 14
4789: ARRAY
4790: PUSH
4791: LD_INT 10
4793: EQUAL
4794: OR
4795: IFFALSE 4836
// begin amChassisTab = [ 4 , 5 ] ;
4797: LD_ADDR_VAR 0 19
4801: PUSH
4802: LD_INT 4
4804: PUSH
4805: LD_INT 5
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4812: LD_ADDR_OWVAR 37
4816: PUSH
4817: LD_VAR 0 19
4821: PUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 19
4829: PPUSH
4830: CALL_OW 12
4834: ARRAY
4835: ST_TO_ADDR
// end ; end ;
4836: GO 4536
4838: POP
4839: POP
// veh = CreateVehicle ;
4840: LD_ADDR_VAR 0 16
4844: PUSH
4845: CALL_OW 45
4849: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4850: LD_VAR 0 16
4854: PPUSH
4855: LD_VAR 0 1
4859: PPUSH
4860: LD_INT 0
4862: PPUSH
4863: CALL_OW 49
// if vc_control = 1 then
4867: LD_OWVAR 38
4871: PUSH
4872: LD_INT 1
4874: EQUAL
4875: IFFALSE 4932
// begin hc_gallery =  ;
4877: LD_ADDR_OWVAR 33
4881: PUSH
4882: LD_STRING 
4884: ST_TO_ADDR
// hc_name =  ;
4885: LD_ADDR_OWVAR 26
4889: PUSH
4890: LD_STRING 
4892: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4893: LD_INT 0
4895: PPUSH
4896: LD_INT 3
4898: PPUSH
4899: LD_VAR 0 4
4903: PPUSH
4904: CALL_OW 380
// un = CreateHuman ;
4908: LD_ADDR_VAR 0 15
4912: PUSH
4913: CALL_OW 44
4917: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4918: LD_VAR 0 15
4922: PPUSH
4923: LD_VAR 0 16
4927: PPUSH
4928: CALL_OW 52
// end ; i = i + 1 ;
4932: LD_ADDR_VAR 0 13
4936: PUSH
4937: LD_VAR 0 13
4941: PUSH
4942: LD_INT 1
4944: PLUS
4945: ST_TO_ADDR
// end ; if nation = 2 then
4946: LD_VAR 0 5
4950: PUSH
4951: LD_INT 2
4953: EQUAL
4954: IFFALSE 5378
// begin uc_side = side ;
4956: LD_ADDR_OWVAR 20
4960: PUSH
4961: LD_VAR 0 2
4965: ST_TO_ADDR
// uc_nation = nation ;
4966: LD_ADDR_OWVAR 21
4970: PUSH
4971: LD_VAR 0 5
4975: ST_TO_ADDR
// vc_engine = vehengine ;
4976: LD_ADDR_OWVAR 39
4980: PUSH
4981: LD_VAR 0 6
4985: ST_TO_ADDR
// vc_control = vehcontrol ;
4986: LD_ADDR_OWVAR 38
4990: PUSH
4991: LD_VAR 0 7
4995: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4996: LD_ADDR_OWVAR 40
5000: PUSH
5001: LD_VAR 0 9
5005: PUSH
5006: LD_INT 1
5008: PPUSH
5009: LD_VAR 0 9
5013: PPUSH
5014: CALL_OW 12
5018: ARRAY
5019: ST_TO_ADDR
// for j = 1 to ARWeapons do
5020: LD_ADDR_VAR 0 14
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_VAR 0 9
5034: PUSH
5035: FOR_TO
5036: IFFALSE 5270
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
5038: LD_VAR 0 9
5042: PUSH
5043: LD_VAR 0 14
5047: ARRAY
5048: PUSH
5049: LD_INT 24
5051: EQUAL
5052: PUSH
5053: LD_VAR 0 9
5057: PUSH
5058: LD_VAR 0 14
5062: ARRAY
5063: PUSH
5064: LD_INT 22
5066: EQUAL
5067: OR
5068: PUSH
5069: LD_VAR 0 9
5073: PUSH
5074: LD_VAR 0 14
5078: ARRAY
5079: PUSH
5080: LD_INT 23
5082: EQUAL
5083: OR
5084: PUSH
5085: LD_VAR 0 9
5089: PUSH
5090: LD_VAR 0 14
5094: ARRAY
5095: PUSH
5096: LD_INT 30
5098: EQUAL
5099: OR
5100: IFFALSE 5149
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
5102: LD_ADDR_VAR 0 18
5106: PUSH
5107: LD_INT 11
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 13
5115: PUSH
5116: LD_INT 14
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5125: LD_ADDR_OWVAR 37
5129: PUSH
5130: LD_VAR 0 18
5134: PUSH
5135: LD_INT 1
5137: PPUSH
5138: LD_VAR 0 18
5142: PPUSH
5143: CALL_OW 12
5147: ARRAY
5148: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
5149: LD_VAR 0 9
5153: PUSH
5154: LD_VAR 0 14
5158: ARRAY
5159: PUSH
5160: LD_INT 29
5162: EQUAL
5163: PUSH
5164: LD_VAR 0 9
5168: PUSH
5169: LD_VAR 0 14
5173: ARRAY
5174: PUSH
5175: LD_INT 28
5177: EQUAL
5178: OR
5179: PUSH
5180: LD_VAR 0 9
5184: PUSH
5185: LD_VAR 0 14
5189: ARRAY
5190: PUSH
5191: LD_INT 27
5193: EQUAL
5194: OR
5195: PUSH
5196: LD_VAR 0 9
5200: PUSH
5201: LD_VAR 0 14
5205: ARRAY
5206: PUSH
5207: LD_INT 26
5209: EQUAL
5210: OR
5211: PUSH
5212: LD_VAR 0 9
5216: PUSH
5217: LD_VAR 0 14
5221: ARRAY
5222: PUSH
5223: LD_INT 25
5225: EQUAL
5226: OR
5227: IFFALSE 5268
// begin arChassisTab = [ 13 , 14 ] ;
5229: LD_ADDR_VAR 0 18
5233: PUSH
5234: LD_INT 13
5236: PUSH
5237: LD_INT 14
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5244: LD_ADDR_OWVAR 37
5248: PUSH
5249: LD_VAR 0 18
5253: PUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_VAR 0 18
5261: PPUSH
5262: CALL_OW 12
5266: ARRAY
5267: ST_TO_ADDR
// end ; end ;
5268: GO 5035
5270: POP
5271: POP
// veh = CreateVehicle ;
5272: LD_ADDR_VAR 0 16
5276: PUSH
5277: CALL_OW 45
5281: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5282: LD_VAR 0 16
5286: PPUSH
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 49
// if vc_control = 1 then
5299: LD_OWVAR 38
5303: PUSH
5304: LD_INT 1
5306: EQUAL
5307: IFFALSE 5364
// begin hc_gallery =  ;
5309: LD_ADDR_OWVAR 33
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// hc_name =  ;
5317: LD_ADDR_OWVAR 26
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 3
5330: PPUSH
5331: LD_VAR 0 4
5335: PPUSH
5336: CALL_OW 380
// un = CreateHuman ;
5340: LD_ADDR_VAR 0 15
5344: PUSH
5345: CALL_OW 44
5349: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5350: LD_VAR 0 15
5354: PPUSH
5355: LD_VAR 0 16
5359: PPUSH
5360: CALL_OW 52
// end ; i = i + 1 ;
5364: LD_ADDR_VAR 0 13
5368: PUSH
5369: LD_VAR 0 13
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: ST_TO_ADDR
// end ; if nation = 3 then
5378: LD_VAR 0 5
5382: PUSH
5383: LD_INT 3
5385: EQUAL
5386: IFFALSE 5762
// begin uc_side = side ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_VAR 0 2
5397: ST_TO_ADDR
// uc_nation = nation ;
5398: LD_ADDR_OWVAR 21
5402: PUSH
5403: LD_VAR 0 5
5407: ST_TO_ADDR
// vc_engine = vehengine ;
5408: LD_ADDR_OWVAR 39
5412: PUSH
5413: LD_VAR 0 6
5417: ST_TO_ADDR
// vc_control = vehcontrol ;
5418: LD_ADDR_OWVAR 38
5422: PUSH
5423: LD_VAR 0 7
5427: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5428: LD_ADDR_OWVAR 40
5432: PUSH
5433: LD_VAR 0 8
5437: PUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 8
5445: PPUSH
5446: CALL_OW 12
5450: ARRAY
5451: ST_TO_ADDR
// for j = 1 to RuWeapons do
5452: LD_ADDR_VAR 0 14
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_VAR 0 8
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5654
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5470: LD_VAR 0 8
5474: PUSH
5475: LD_VAR 0 14
5479: ARRAY
5480: PUSH
5481: LD_INT 42
5483: EQUAL
5484: PUSH
5485: LD_VAR 0 8
5489: PUSH
5490: LD_VAR 0 14
5494: ARRAY
5495: PUSH
5496: LD_INT 43
5498: EQUAL
5499: OR
5500: PUSH
5501: LD_VAR 0 8
5505: PUSH
5506: LD_VAR 0 14
5510: ARRAY
5511: PUSH
5512: LD_INT 44
5514: EQUAL
5515: OR
5516: PUSH
5517: LD_VAR 0 8
5521: PUSH
5522: LD_VAR 0 14
5526: ARRAY
5527: PUSH
5528: LD_INT 45
5530: EQUAL
5531: OR
5532: PUSH
5533: LD_VAR 0 8
5537: PUSH
5538: LD_VAR 0 14
5542: ARRAY
5543: PUSH
5544: LD_INT 49
5546: EQUAL
5547: OR
5548: IFFALSE 5585
// begin ruChassisTab = [ 24 ] ;
5550: LD_ADDR_VAR 0 17
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: EMPTY
5559: LIST
5560: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5561: LD_ADDR_OWVAR 37
5565: PUSH
5566: LD_VAR 0 17
5570: PUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5585: LD_VAR 0 8
5589: PUSH
5590: LD_VAR 0 14
5594: ARRAY
5595: PUSH
5596: LD_INT 46
5598: EQUAL
5599: PUSH
5600: LD_VAR 0 8
5604: PUSH
5605: LD_VAR 0 14
5609: ARRAY
5610: PUSH
5611: LD_INT 47
5613: EQUAL
5614: OR
5615: IFFALSE 5652
// begin ruChassisTab = [ 24 ] ;
5617: LD_ADDR_VAR 0 17
5621: PUSH
5622: LD_INT 24
5624: PUSH
5625: EMPTY
5626: LIST
5627: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5628: LD_ADDR_OWVAR 37
5632: PUSH
5633: LD_VAR 0 17
5637: PUSH
5638: LD_INT 1
5640: PPUSH
5641: LD_VAR 0 17
5645: PPUSH
5646: CALL_OW 12
5650: ARRAY
5651: ST_TO_ADDR
// end ; end ;
5652: GO 5467
5654: POP
5655: POP
// veh = CreateVehicle ;
5656: LD_ADDR_VAR 0 16
5660: PUSH
5661: CALL_OW 45
5665: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5666: LD_VAR 0 16
5670: PPUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: CALL_OW 49
// if vc_control = 1 then
5683: LD_OWVAR 38
5687: PUSH
5688: LD_INT 1
5690: EQUAL
5691: IFFALSE 5748
// begin hc_gallery =  ;
5693: LD_ADDR_OWVAR 33
5697: PUSH
5698: LD_STRING 
5700: ST_TO_ADDR
// hc_name =  ;
5701: LD_ADDR_OWVAR 26
5705: PUSH
5706: LD_STRING 
5708: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5709: LD_INT 0
5711: PPUSH
5712: LD_INT 3
5714: PPUSH
5715: LD_VAR 0 4
5719: PPUSH
5720: CALL_OW 380
// un = CreateHuman ;
5724: LD_ADDR_VAR 0 15
5728: PUSH
5729: CALL_OW 44
5733: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5734: LD_VAR 0 15
5738: PPUSH
5739: LD_VAR 0 16
5743: PPUSH
5744: CALL_OW 52
// end ; i = i + 1 ;
5748: LD_ADDR_VAR 0 13
5752: PUSH
5753: LD_VAR 0 13
5757: PUSH
5758: LD_INT 1
5760: PLUS
5761: ST_TO_ADDR
// end ; until i = vehCount ;
5762: LD_VAR 0 13
5766: PUSH
5767: LD_VAR 0 3
5771: EQUAL
5772: IFFALSE 4440
// repeat wait ( 0 0$1 ) ;
5774: LD_INT 35
5776: PPUSH
5777: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
5781: LD_ADDR_VAR 0 20
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 2
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 21
5800: PUSH
5801: LD_INT 2
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 24
5810: PUSH
5811: LD_INT 250
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: ST_TO_ADDR
// if vehicleOK_list > 0 then
5828: LD_VAR 0 20
5832: PUSH
5833: LD_INT 0
5835: GREATER
5836: IFFALSE 6027
// begin for i in vehicleOK_list do
5838: LD_ADDR_VAR 0 13
5842: PUSH
5843: LD_VAR 0 20
5847: PUSH
5848: FOR_IN
5849: IFFALSE 6025
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5851: LD_ADDR_VAR 0 21
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_VAR 0 11
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: PPUSH
5873: LD_VAR 0 13
5877: PPUSH
5878: CALL_OW 74
5882: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5883: LD_ADDR_VAR 0 22
5887: PUSH
5888: LD_INT 22
5890: PUSH
5891: LD_VAR 0 11
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 59
5905: PUSH
5906: EMPTY
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 21
5921: PUSH
5922: LD_INT 2
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: EMPTY
5940: LIST
5941: PPUSH
5942: CALL_OW 69
5946: PPUSH
5947: LD_VAR 0 13
5951: PPUSH
5952: CALL_OW 74
5956: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5957: LD_VAR 0 13
5961: PPUSH
5962: LD_VAR 0 21
5966: PPUSH
5967: CALL_OW 296
5971: PUSH
5972: LD_INT 8
5974: PLUS
5975: PUSH
5976: LD_VAR 0 13
5980: PPUSH
5981: LD_VAR 0 22
5985: PPUSH
5986: CALL_OW 296
5990: LESS
5991: IFFALSE 6009
// begin ComAttackUnit ( i , target1 ) ;
5993: LD_VAR 0 13
5997: PPUSH
5998: LD_VAR 0 21
6002: PPUSH
6003: CALL_OW 115
// end else
6007: GO 6023
// begin ComAttackUnit ( i , target2 ) ;
6009: LD_VAR 0 13
6013: PPUSH
6014: LD_VAR 0 22
6018: PPUSH
6019: CALL_OW 115
// end ; end ;
6023: GO 5848
6025: POP
6026: POP
// end ; until vehicleOK_list = [ ] ;
6027: LD_VAR 0 20
6031: PUSH
6032: EMPTY
6033: EQUAL
6034: IFFALSE 5774
// end ;
6036: LD_VAR 0 12
6040: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6041: LD_INT 0
6043: PPUSH
6044: PPUSH
6045: PPUSH
6046: PPUSH
// for i = 1 to 72 do
6047: LD_ADDR_VAR 0 5
6051: PUSH
6052: DOUBLE
6053: LD_INT 1
6055: DEC
6056: ST_TO_ADDR
6057: LD_INT 72
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6119
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6063: LD_VAR 0 5
6067: PPUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 321
6077: PUSH
6078: LD_INT 1
6080: EQUAL
6081: PUSH
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_VAR 0 3
6091: PPUSH
6092: CALL_OW 482
6096: PUSH
6097: LD_INT 1
6099: EQUAL
6100: AND
6101: IFFALSE 6117
// AddComResearch ( lab , i ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_VAR 0 5
6112: PPUSH
6113: CALL_OW 184
6117: GO 6060
6119: POP
6120: POP
// end ;
6121: LD_VAR 0 4
6125: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
6132: PPUSH
6133: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6134: LD_ADDR_VAR 0 7
6138: PUSH
6139: LD_VAR 0 2
6143: PPUSH
6144: CALL_OW 313
6148: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: LD_VAR 0 3
6158: PPUSH
6159: LD_INT 22
6161: PUSH
6162: LD_VAR 0 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 24
6183: PUSH
6184: LD_INT 750
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 3
6193: PUSH
6194: LD_INT 54
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 70
6214: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6215: LD_ADDR_VAR 0 5
6219: PUSH
6220: LD_VAR 0 3
6224: PPUSH
6225: LD_INT 22
6227: PUSH
6228: LD_VAR 0 1
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: LD_INT 24
6252: PUSH
6253: LD_INT 1000
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: PPUSH
6272: CALL_OW 70
6276: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6277: LD_VAR 0 5
6281: NOT
6282: PUSH
6283: LD_INT 22
6285: PUSH
6286: LD_VAR 0 1
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: LD_INT 25
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 24
6307: PUSH
6308: LD_INT 250
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 69
6324: NOT
6325: AND
6326: IFFALSE 6330
// exit ;
6328: GO 6442
// if buildings_list > 0 and engineerOkInside then
6330: LD_VAR 0 5
6334: PUSH
6335: LD_INT 0
6337: GREATER
6338: PUSH
6339: LD_VAR 0 7
6343: AND
6344: IFFALSE 6370
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6346: LD_VAR 0 7
6350: PPUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PPUSH
6361: CALL_OW 72
6365: PPUSH
6366: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6370: LD_VAR 0 5
6374: PUSH
6375: LD_INT 0
6377: GREATER
6378: PUSH
6379: LD_VAR 0 8
6383: PUSH
6384: LD_INT 0
6386: GREATER
6387: AND
6388: IFFALSE 6408
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6390: LD_VAR 0 8
6394: PPUSH
6395: LD_VAR 0 5
6399: PUSH
6400: LD_INT 1
6402: ARRAY
6403: PPUSH
6404: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6408: LD_VAR 0 5
6412: PUSH
6413: LD_INT 0
6415: EQUAL
6416: PUSH
6417: LD_VAR 0 8
6421: PUSH
6422: LD_INT 0
6424: GREATER
6425: AND
6426: IFFALSE 6442
// ComEnterUnit ( engineerOkOutside , building ) ;
6428: LD_VAR 0 8
6432: PPUSH
6433: LD_VAR 0 2
6437: PPUSH
6438: CALL_OW 120
// end ; end_of_file
6442: LD_VAR 0 4
6446: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
6447: LD_VAR 0 1
6451: PUSH
6452: LD_INT 235
6454: EQUAL
6455: PUSH
6456: LD_VAR 0 2
6460: PPUSH
6461: CALL_OW 255
6465: PUSH
6466: LD_INT 4
6468: EQUAL
6469: AND
6470: IFFALSE 6518
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
6472: LD_INT 235
6474: PPUSH
6475: LD_INT 84
6477: PPUSH
6478: LD_INT 1
6480: PPUSH
6481: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
6485: LD_INT 235
6487: PPUSH
6488: LD_INT 68
6490: PPUSH
6491: LD_INT 100
6493: PPUSH
6494: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
6498: LD_INT 235
6500: PPUSH
6501: CALL_OW 219
// AddComMoveXY ( PowellCargo , 41 , 61 ) ;
6505: LD_INT 235
6507: PPUSH
6508: LD_INT 41
6510: PPUSH
6511: LD_INT 61
6513: PPUSH
6514: CALL_OW 171
// end ; end ;
6518: PPOPN 2
6520: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
6521: LD_INT 0
6523: PPUSH
6524: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 21
6542: PUSH
6543: LD_INT 1
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 56
6552: PUSH
6553: EMPTY
6554: LIST
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: LD_INT 60
6561: PUSH
6562: EMPTY
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 69
6579: PUSH
6580: LD_EXP 17
6584: PUSH
6585: EMPTY
6586: LIST
6587: DIFF
6588: ST_TO_ADDR
// if GetSide ( building ) = 4 then
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 255
6598: PUSH
6599: LD_INT 4
6601: EQUAL
6602: IFFALSE 6733
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
6604: LD_INT 22
6606: PUSH
6607: LD_INT 4
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 30
6616: PUSH
6617: LD_INT 8
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PPUSH
6628: CALL_OW 69
6632: PUSH
6633: LD_INT 1
6635: EQUAL
6636: IFFALSE 6733
// begin for i = 1 to 3 do
6638: LD_ADDR_VAR 0 2
6642: PUSH
6643: DOUBLE
6644: LD_INT 1
6646: DEC
6647: ST_TO_ADDR
6648: LD_INT 3
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6716
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
6654: LD_VAR 0 3
6658: PUSH
6659: LD_VAR 0 2
6663: ARRAY
6664: PPUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 25
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: CALL_OW 72
6686: PPUSH
6687: LD_VAR 0 1
6691: PPUSH
6692: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
6696: LD_VAR 0 3
6700: PUSH
6701: LD_VAR 0 2
6705: ARRAY
6706: PPUSH
6707: LD_INT 4
6709: PPUSH
6710: CALL_OW 183
// end ;
6714: GO 6651
6716: POP
6717: POP
// ResAllTechs ( 4 , building , 1 ) ;
6718: LD_INT 4
6720: PPUSH
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_INT 1
6728: PPUSH
6729: CALL 6041 0 3
// end ; end ;
6733: PPOPN 3
6735: END
// on BuildingComplete ( building ) do var powellPeople ;
6736: LD_INT 0
6738: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
6739: LD_VAR 0 1
6743: PPUSH
6744: CALL_OW 255
6748: PUSH
6749: LD_INT 4
6751: EQUAL
6752: PUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 266
6762: PUSH
6763: LD_INT 17
6765: EQUAL
6766: AND
6767: IFFALSE 7049
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: LD_INT 22
6776: PUSH
6777: LD_INT 4
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 56
6796: PUSH
6797: EMPTY
6798: LIST
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: LD_INT 60
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 69
6823: PUSH
6824: LD_EXP 17
6828: PUSH
6829: EMPTY
6830: LIST
6831: DIFF
6832: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
6833: LD_INT 22
6835: PUSH
6836: LD_INT 4
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 30
6855: PUSH
6856: LD_INT 32
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 69
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: PPUSH
6877: LD_INT 6
6879: PPUSH
6880: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
6884: LD_INT 22
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 69
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_INT 5
6930: PPUSH
6931: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
6935: LD_VAR 0 2
6939: PUSH
6940: LD_INT 1
6942: ARRAY
6943: PPUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 4
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 21
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 32
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_INT 1
6986: ARRAY
6987: PPUSH
6988: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
6992: LD_VAR 0 2
6996: PUSH
6997: LD_INT 2
6999: ARRAY
7000: PPUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 21
7013: PUSH
7014: LD_INT 3
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 32
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PUSH
7041: LD_INT 2
7043: ARRAY
7044: PPUSH
7045: CALL_OW 120
// end ; end ;
7049: PPOPN 2
7051: END
// on EnterBuilding ( building , human ) do begin end ;
7052: PPOPN 2
7054: END
// on VehicleConstructed ( vehicle , building ) do begin if vehicle = powellVeh then
7055: LD_VAR 0 1
7059: PUSH
7060: LD_EXP 30
7064: EQUAL
7065: IFFALSE 7081
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 313
7076: PPUSH
7077: CALL_OW 121
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
7081: LD_VAR 0 1
7085: PPUSH
7086: CALL_OW 255
7090: PUSH
7091: LD_INT 4
7093: EQUAL
7094: PUSH
7095: LD_EXP 28
7099: PUSH
7100: LD_INT 2
7102: EQUAL
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 264
7114: PUSH
7115: LD_INT 6
7117: EQUAL
7118: AND
7119: IFFALSE 7173
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
7121: LD_EXP 25
7125: PUSH
7126: LD_INT 5
7128: ARRAY
7129: PPUSH
7130: CALL_OW 122
// wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
7141: LD_EXP 25
7145: PUSH
7146: LD_INT 5
7148: ARRAY
7149: PPUSH
7150: LD_INT 85
7152: PPUSH
7153: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
7157: LD_EXP 25
7161: PUSH
7162: LD_INT 5
7164: ARRAY
7165: PPUSH
7166: LD_INT 3
7168: PPUSH
7169: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 255
7182: PUSH
7183: LD_INT 4
7185: EQUAL
7186: PUSH
7187: LD_EXP 28
7191: PUSH
7192: LD_INT 2
7194: EQUAL
7195: AND
7196: PUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 264
7206: PUSH
7207: LD_INT 3
7209: EQUAL
7210: AND
7211: IFFALSE 7238
// begin powellVeh = vehicle ;
7213: LD_ADDR_EXP 30
7217: PUSH
7218: LD_VAR 0 1
7222: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
7223: LD_VAR 0 1
7227: PPUSH
7228: LD_INT 49
7230: PPUSH
7231: LD_INT 74
7233: PPUSH
7234: CALL_OW 111
// end ; end ;
7238: PPOPN 2
7240: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 255
7250: PUSH
7251: LD_INT 4
7253: EQUAL
7254: PUSH
7255: LD_EXP 28
7259: PUSH
7260: LD_INT 1
7262: EQUAL
7263: AND
7264: IFFALSE 7367
// begin ComEnterUnit ( human , AmFact ) ;
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_INT 85
7273: PPUSH
7274: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
7278: LD_VAR 0 2
7282: PPUSH
7283: CALL_OW 258
7287: PUSH
7288: LD_INT 1
7290: EQUAL
7291: PUSH
7292: LD_EXP 38
7296: PUSH
7297: LD_INT 0
7299: EQUAL
7300: AND
7301: IFFALSE 7367
// begin blockEvent1 = 1 ;
7303: LD_ADDR_EXP 38
7307: PUSH
7308: LD_INT 1
7310: ST_TO_ADDR
// startAttacks = 1 ;
7311: LD_ADDR_EXP 29
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
7319: LD_VAR 0 2
7323: PPUSH
7324: LD_STRING D4a-Sol1-1
7326: PPUSH
7327: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
7331: LD_EXP 17
7335: PPUSH
7336: LD_STRING D4a-Pow-1
7338: PPUSH
7339: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
7343: LD_VAR 0 2
7347: PPUSH
7348: LD_STRING D4a-Sol1-2
7350: PPUSH
7351: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
7355: LD_EXP 17
7359: PPUSH
7360: LD_STRING D4a-Pow-2
7362: PPUSH
7363: CALL_OW 88
// end ; end ; end ;
7367: PPOPN 2
7369: END
// on UnitDestroyed ( unit ) do var i ;
7370: LD_INT 0
7372: PPUSH
// begin if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 255
7382: PUSH
7383: LD_INT 4
7385: EQUAL
7386: PUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 247
7396: PUSH
7397: LD_INT 1
7399: EQUAL
7400: AND
7401: IFFALSE 7451
// begin for i in amUnitsAttack do
7403: LD_ADDR_VAR 0 2
7407: PUSH
7408: LD_EXP 25
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7449
// if i = unit then
7416: LD_VAR 0 2
7420: PUSH
7421: LD_VAR 0 1
7425: EQUAL
7426: IFFALSE 7447
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_EXP 25
7437: PUSH
7438: LD_VAR 0 1
7442: PUSH
7443: EMPTY
7444: LIST
7445: DIFF
7446: ST_TO_ADDR
7447: GO 7413
7449: POP
7450: POP
// end ; end ; end_of_file
7451: PPOPN 2
7453: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
7454: LD_EXP 27
7458: PUSH
7459: LD_INT 1
7461: EQUAL
7462: IFFALSE 8039
7464: GO 7466
7466: DISABLE
7467: LD_INT 0
7469: PPUSH
7470: PPUSH
// begin for i = 1 to 4 do
7471: LD_ADDR_VAR 0 1
7475: PUSH
7476: DOUBLE
7477: LD_INT 1
7479: DEC
7480: ST_TO_ADDR
7481: LD_INT 4
7483: PUSH
7484: FOR_TO
7485: IFFALSE 7525
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
7487: LD_EXP 25
7491: PUSH
7492: LD_VAR 0 1
7496: ARRAY
7497: PPUSH
7498: LD_INT 85
7500: PPUSH
7501: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
7505: LD_EXP 25
7509: PUSH
7510: LD_VAR 0 1
7514: ARRAY
7515: PPUSH
7516: LD_INT 3
7518: PPUSH
7519: CALL_OW 183
// end ;
7523: GO 7484
7525: POP
7526: POP
// wait ( 0 0$1 ) ;
7527: LD_INT 35
7529: PPUSH
7530: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
7534: LD_ADDR_VAR 0 2
7538: PUSH
7539: LD_INT 22
7541: PUSH
7542: LD_INT 4
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 21
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 56
7561: PUSH
7562: EMPTY
7563: LIST
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 60
7570: PUSH
7571: EMPTY
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: PUSH
7589: LD_EXP 17
7593: PUSH
7594: EMPTY
7595: LIST
7596: DIFF
7597: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
7598: LD_VAR 0 2
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_INT 235
7609: PPUSH
7610: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 2
7621: ARRAY
7622: PPUSH
7623: LD_INT 2
7625: PPUSH
7626: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
7630: LD_VAR 0 2
7634: PUSH
7635: LD_INT 3
7637: ARRAY
7638: PPUSH
7639: LD_INT 2
7641: PPUSH
7642: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
7646: LD_INT 30
7648: PPUSH
7649: LD_INT 49
7651: PPUSH
7652: LD_INT 4
7654: PPUSH
7655: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
7659: LD_INT 91
7661: PPUSH
7662: LD_INT 10
7664: PPUSH
7665: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
7669: LD_INT 91
7671: PPUSH
7672: LD_INT 11
7674: PPUSH
7675: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
7679: LD_INT 22
7681: PUSH
7682: LD_INT 4
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 25
7691: PUSH
7692: LD_INT 2
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PPUSH
7703: CALL_OW 69
7707: PPUSH
7708: LD_INT 30
7710: PPUSH
7711: LD_INT 30
7713: PPUSH
7714: LD_INT 49
7716: PPUSH
7717: LD_INT 1
7719: PPUSH
7720: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
7724: LD_INT 22
7726: PUSH
7727: LD_INT 4
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 25
7736: PUSH
7737: LD_INT 2
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PPUSH
7748: CALL_OW 69
7752: PPUSH
7753: LD_INT 32
7755: PPUSH
7756: LD_INT 55
7758: PPUSH
7759: LD_INT 56
7761: PPUSH
7762: LD_INT 4
7764: PPUSH
7765: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
7769: LD_INT 22
7771: PUSH
7772: LD_INT 4
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 25
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PPUSH
7793: CALL_OW 69
7797: PPUSH
7798: LD_INT 32
7800: PPUSH
7801: LD_INT 63
7803: PPUSH
7804: LD_INT 71
7806: PPUSH
7807: LD_INT 4
7809: PPUSH
7810: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
7814: LD_INT 22
7816: PUSH
7817: LD_INT 4
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: PPUSH
7843: LD_INT 28
7845: PPUSH
7846: LD_INT 40
7848: PPUSH
7849: LD_INT 72
7851: PPUSH
7852: LD_INT 4
7854: PPUSH
7855: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
7859: LD_INT 22
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 25
7871: PUSH
7872: LD_INT 2
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 69
7887: PPUSH
7888: LD_INT 27
7890: PPUSH
7891: LD_INT 45
7893: PPUSH
7894: LD_INT 73
7896: PPUSH
7897: LD_INT 4
7899: PPUSH
7900: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
7904: LD_INT 22
7906: PUSH
7907: LD_INT 4
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 25
7916: PUSH
7917: LD_INT 2
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_INT 18
7935: PPUSH
7936: LD_INT 37
7938: PPUSH
7939: LD_INT 50
7941: PPUSH
7942: LD_INT 2
7944: PPUSH
7945: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
7949: LD_INT 22
7951: PUSH
7952: LD_INT 4
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PPUSH
7973: CALL_OW 69
7977: PPUSH
7978: LD_INT 17
7980: PPUSH
7981: LD_INT 41
7983: PPUSH
7984: LD_INT 51
7986: PPUSH
7987: LD_INT 3
7989: PPUSH
7990: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
7994: LD_INT 22
7996: PUSH
7997: LD_INT 4
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 25
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 69
8022: PPUSH
8023: LD_INT 21
8025: PPUSH
8026: LD_INT 38
8028: PPUSH
8029: LD_INT 54
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 205
// end ;
8039: PPOPN 2
8041: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
8042: LD_INT 22
8044: PUSH
8045: LD_INT 4
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 30
8054: PUSH
8055: LD_INT 8
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: PPUSH
8066: CALL_OW 69
8070: PUSH
8071: LD_INT 1
8073: EQUAL
8074: IFFALSE 8224
8076: GO 8078
8078: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
8079: LD_INT 85
8081: PPUSH
8082: LD_INT 3
8084: PPUSH
8085: LD_INT 3
8087: PPUSH
8088: LD_INT 1
8090: PPUSH
8091: LD_INT 3
8093: PUSH
8094: LD_INT 5
8096: PUSH
8097: LD_INT 7
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 1
8107: PPUSH
8108: LD_INT 3
8110: PPUSH
8111: CALL_OW 12
8115: ARRAY
8116: PPUSH
8117: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
8121: LD_INT 85
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: LD_INT 3
8129: PPUSH
8130: LD_INT 1
8132: PPUSH
8133: LD_INT 3
8135: PUSH
8136: LD_INT 5
8138: PUSH
8139: LD_INT 7
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 1
8149: PPUSH
8150: LD_INT 3
8152: PPUSH
8153: CALL_OW 12
8157: ARRAY
8158: PPUSH
8159: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
8163: LD_INT 85
8165: PPUSH
8166: LD_INT 3
8168: PPUSH
8169: LD_INT 3
8171: PPUSH
8172: LD_INT 1
8174: PPUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 5
8180: PUSH
8181: LD_INT 7
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 3
8194: PPUSH
8195: CALL_OW 12
8199: ARRAY
8200: PPUSH
8201: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
8205: LD_INT 85
8207: PPUSH
8208: LD_INT 5
8210: PPUSH
8211: LD_INT 3
8213: PPUSH
8214: LD_INT 1
8216: PPUSH
8217: LD_INT 6
8219: PPUSH
8220: CALL_OW 185
// end ;
8224: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) do
8225: LD_INT 235
8227: PPUSH
8228: LD_INT 10
8230: PPUSH
8231: CALL_OW 308
8235: IFFALSE 8259
8237: GO 8239
8239: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
8240: LD_INT 235
8242: PPUSH
8243: CALL_OW 313
8247: PPUSH
8248: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
8252: LD_INT 84
8254: PPUSH
8255: CALL_OW 146
// end ;
8259: END
// every 0 0$1 do
8260: GO 8262
8262: DISABLE
// begin enable ;
8263: ENABLE
// RepairBuilding ( 8 , ArDep1 , LegionBaseArea ) ;
8264: LD_INT 8
8266: PPUSH
8267: LD_INT 122
8269: PPUSH
8270: LD_INT 11
8272: PPUSH
8273: CALL 6126 0 3
// end ; end_of_file end_of_file
8277: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 do
8278: LD_EXP 29
8282: PUSH
8283: LD_INT 1
8285: EQUAL
8286: PUSH
8287: LD_EXP 37
8291: PUSH
8292: LD_INT 0
8294: EQUAL
8295: AND
8296: IFFALSE 8356
8298: GO 8300
8300: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 6
8306: PPUSH
8307: LD_INT 2
8309: PPUSH
8310: LD_INT 4
8312: PPUSH
8313: CALL_OW 12
8317: PPUSH
8318: LD_INT 10
8320: PPUSH
8321: LD_INT 3
8323: PPUSH
8324: LD_INT 3
8326: PPUSH
8327: LD_INT 3
8329: PPUSH
8330: LD_INT 42
8332: PUSH
8333: LD_INT 43
8335: PUSH
8336: LD_INT 44
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: LIST
8343: PPUSH
8344: EMPTY
8345: PPUSH
8346: EMPTY
8347: PPUSH
8348: LD_INT 1
8350: PPUSH
8351: CALL 4356 0 11
// enable ;
8355: ENABLE
// end ; end_of_file
8356: END
// every 1 do var i , dec1 , options , people ;
8357: GO 8359
8359: DISABLE
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
// begin InGameOn ;
8366: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
8370: LD_EXP 19
8374: PUSH
8375: LD_EXP 20
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: LD_INT 60
8386: PPUSH
8387: LD_INT 75
8389: PPUSH
8390: CALL_OW 111
// if KappaStatus = 0 then
8394: LD_EXP 35
8398: PUSH
8399: LD_INT 0
8401: EQUAL
8402: IFFALSE 8448
// begin CenterNowOnUnits ( NewJMMVeh ) ;
8404: LD_EXP 19
8408: PPUSH
8409: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
8413: LD_EXP 1
8417: PPUSH
8418: LD_STRING D1T-JMM-1
8420: PPUSH
8421: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8425: LD_EXP 19
8429: PPUSH
8430: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
8434: LD_EXP 17
8438: PPUSH
8439: LD_STRING D1nT-JMM-1
8441: PPUSH
8442: CALL_OW 88
// end else
8446: GO 8733
// begin CenterNowOnUnits ( NewJMMVeh ) ;
8448: LD_EXP 19
8452: PPUSH
8453: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
8457: LD_EXP 1
8461: PPUSH
8462: LD_STRING D1T-JMM-1
8464: PPUSH
8465: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8469: LD_EXP 19
8473: PPUSH
8474: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
8478: LD_EXP 17
8482: PPUSH
8483: LD_STRING D1T-Pow-1
8485: PPUSH
8486: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8490: LD_EXP 19
8494: PPUSH
8495: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
8499: LD_EXP 1
8503: PPUSH
8504: LD_STRING D1T-JMM-2
8506: PPUSH
8507: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8511: LD_EXP 19
8515: PPUSH
8516: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
8520: LD_EXP 17
8524: PPUSH
8525: LD_STRING D1T-Pow-2
8527: PPUSH
8528: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8532: LD_EXP 19
8536: PPUSH
8537: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D1T-JMM-3
8548: PPUSH
8549: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8553: LD_EXP 19
8557: PPUSH
8558: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
8562: LD_EXP 17
8566: PPUSH
8567: LD_STRING D1T-Pow-3
8569: PPUSH
8570: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8574: LD_EXP 19
8578: PPUSH
8579: CALL_OW 87
// if not JMMGirlVeh = [ ] then
8583: LD_EXP 33
8587: PUSH
8588: EMPTY
8589: EQUAL
8590: NOT
8591: IFFALSE 8691
// begin if JMMGirl = 1 then
8593: LD_EXP 34
8597: PUSH
8598: LD_INT 1
8600: EQUAL
8601: IFFALSE 8615
// Say ( Joan , D1T-Joan-3 ) ;
8603: LD_EXP 2
8607: PPUSH
8608: LD_STRING D1T-Joan-3
8610: PPUSH
8611: CALL_OW 88
// if JMMGirl = 2 then
8615: LD_EXP 34
8619: PUSH
8620: LD_INT 2
8622: EQUAL
8623: IFFALSE 8637
// Say ( Lisa , D1T-Lisa-3 ) ;
8625: LD_EXP 4
8629: PPUSH
8630: LD_STRING D1T-Lisa-3
8632: PPUSH
8633: CALL_OW 88
// if JMMGirl = 3 then
8637: LD_EXP 34
8641: PUSH
8642: LD_INT 3
8644: EQUAL
8645: IFFALSE 8659
// Say ( Connie , D1T-Con-3 ) ;
8647: LD_EXP 16
8651: PPUSH
8652: LD_STRING D1T-Con-3
8654: PPUSH
8655: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8659: LD_EXP 19
8663: PPUSH
8664: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D1T-Pow-4
8675: PPUSH
8676: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8680: LD_EXP 19
8684: PPUSH
8685: CALL_OW 87
// end else
8689: GO 8733
// begin Say ( JMM , D1T-JMM-4 ) ;
8691: LD_EXP 1
8695: PPUSH
8696: LD_STRING D1T-JMM-4
8698: PPUSH
8699: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8703: LD_EXP 19
8707: PPUSH
8708: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
8712: LD_EXP 17
8716: PPUSH
8717: LD_STRING D1T-Pow-5
8719: PPUSH
8720: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8724: LD_EXP 19
8728: PPUSH
8729: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
8733: LD_INT 35
8735: PPUSH
8736: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
8740: LD_EXP 19
8744: PUSH
8745: LD_EXP 20
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PPUSH
8754: LD_INT 60
8756: PPUSH
8757: LD_INT 75
8759: PPUSH
8760: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
8764: LD_EXP 19
8768: PPUSH
8769: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 25 ;
8773: LD_EXP 19
8777: PPUSH
8778: LD_EXP 17
8782: PPUSH
8783: CALL_OW 296
8787: PUSH
8788: LD_INT 25
8790: LESS
8791: IFFALSE 8733
// ComExitVehicle ( JMM ) ;
8793: LD_EXP 1
8797: PPUSH
8798: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
8802: LD_INT 35
8804: PPUSH
8805: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
8809: LD_EXP 1
8813: PPUSH
8814: LD_EXP 17
8818: PPUSH
8819: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
8823: LD_EXP 1
8827: PPUSH
8828: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
8832: LD_EXP 1
8836: PPUSH
8837: LD_EXP 17
8841: PPUSH
8842: CALL_OW 296
8846: PUSH
8847: LD_INT 6
8849: LESS
8850: IFFALSE 8802
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
8852: LD_EXP 1
8856: PUSH
8857: LD_EXP 17
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
8870: LD_EXP 1
8874: PPUSH
8875: LD_EXP 17
8879: PPUSH
8880: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
8884: LD_EXP 17
8888: PPUSH
8889: LD_EXP 1
8893: PPUSH
8894: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
8898: LD_EXP 1
8902: PPUSH
8903: LD_STRING D1-JMM-1
8905: PPUSH
8906: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
8910: LD_EXP 17
8914: PPUSH
8915: LD_STRING D1-Pow-1
8917: PPUSH
8918: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
8922: LD_INT 1
8924: PPUSH
8925: LD_INT 3
8927: PPUSH
8928: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
8932: LD_INT 1
8934: PPUSH
8935: LD_INT 4
8937: PPUSH
8938: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
8942: LD_INT 1
8944: PPUSH
8945: LD_INT 5
8947: PPUSH
8948: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
8952: LD_INT 171
8954: PPUSH
8955: LD_INT 81
8957: PPUSH
8958: CALL_OW 84
// wait ( 0 0$4 ) ;
8962: LD_INT 140
8964: PPUSH
8965: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
8969: LD_INT 162
8971: PPUSH
8972: LD_INT 36
8974: PPUSH
8975: CALL_OW 84
// wait ( 0 0$4 ) ;
8979: LD_INT 140
8981: PPUSH
8982: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
8986: LD_INT 75
8988: PPUSH
8989: LD_INT 16
8991: PPUSH
8992: CALL_OW 84
// wait ( 0 0$4 ) ;
8996: LD_INT 140
8998: PPUSH
8999: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
9003: LD_EXP 17
9007: PUSH
9008: LD_EXP 1
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
9021: LD_EXP 1
9025: PPUSH
9026: LD_STRING D1-JMM-2
9028: PPUSH
9029: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_STRING D1-Pow-2
9040: PPUSH
9041: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9045: LD_EXP 1
9049: PPUSH
9050: LD_STRING D1-JMM-3
9052: PPUSH
9053: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
9057: LD_EXP 17
9061: PPUSH
9062: LD_STRING D1-Pow-3
9064: PPUSH
9065: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
9069: LD_EXP 1
9073: PPUSH
9074: LD_STRING D1-JMM-4
9076: PPUSH
9077: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
9081: LD_EXP 17
9085: PPUSH
9086: LD_STRING D1-Pow-4
9088: PPUSH
9089: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9093: LD_EXP 1
9097: PPUSH
9098: LD_STRING D1-JMM-5
9100: PPUSH
9101: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
9105: LD_EXP 17
9109: PPUSH
9110: LD_STRING D1-Pow-5
9112: PPUSH
9113: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
9117: LD_ADDR_VAR 0 3
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: LD_INT 3
9130: PUSH
9131: LD_INT 4
9133: PUSH
9134: LD_INT 5
9136: PUSH
9137: LD_INT 6
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
9148: LD_ADDR_VAR 0 2
9152: PUSH
9153: LD_STRING Q1
9155: PPUSH
9156: LD_VAR 0 3
9160: PPUSH
9161: CALL_OW 98
9165: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
9166: LD_ADDR_VAR 0 2
9170: PUSH
9171: LD_STRING Q1
9173: PPUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: CALL_OW 98
9183: ST_TO_ADDR
// options = options diff dec1 ;
9184: LD_ADDR_VAR 0 3
9188: PUSH
9189: LD_VAR 0 3
9193: PUSH
9194: LD_VAR 0 2
9198: DIFF
9199: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
9200: LD_VAR 0 2
9204: PPUSH
9205: LD_VAR 0 3
9209: PPUSH
9210: CALL 10720 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
9214: LD_VAR 0 2
9218: PUSH
9219: LD_INT 5
9221: PUSH
9222: LD_INT 6
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: IN
9229: PUSH
9230: LD_VAR 0 3
9234: PUSH
9235: LD_INT 2
9237: EQUAL
9238: OR
9239: IFFALSE 9166
// if not ( dec1 in [ 5 , 6 ] ) then
9241: LD_VAR 0 2
9245: PUSH
9246: LD_INT 5
9248: PUSH
9249: LD_INT 6
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: IN
9256: NOT
9257: IFFALSE 9300
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: LD_STRING Q1a
9266: PPUSH
9267: LD_INT 1
9269: PUSH
9270: LD_INT 2
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 98
9281: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
9282: LD_VAR 0 2
9286: PUSH
9287: LD_INT 4
9289: PLUS
9290: PPUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: CALL 10720 0 2
// end ; if not JMMGirlVeh = [ ] then
9300: LD_EXP 33
9304: PUSH
9305: EMPTY
9306: EQUAL
9307: NOT
9308: IFFALSE 9470
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
9310: LD_EXP 20
9314: PPUSH
9315: CALL_OW 313
9319: PPUSH
9320: CALL_OW 121
// wait ( 0 0$1 ) ;
9324: LD_INT 35
9326: PPUSH
9327: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9331: LD_INT 35
9333: PPUSH
9334: CALL_OW 67
// if JMMGirl = 1 then
9338: LD_EXP 34
9342: PUSH
9343: LD_INT 1
9345: EQUAL
9346: IFFALSE 9362
// ComMoveUnit ( JMM , Joan ) ;
9348: LD_EXP 1
9352: PPUSH
9353: LD_EXP 2
9357: PPUSH
9358: CALL_OW 112
// if JMMGirl = 2 then
9362: LD_EXP 34
9366: PUSH
9367: LD_INT 2
9369: EQUAL
9370: IFFALSE 9386
// ComMoveUnit ( JMM , Lisa ) ;
9372: LD_EXP 1
9376: PPUSH
9377: LD_EXP 4
9381: PPUSH
9382: CALL_OW 112
// if JMMGirl = 3 then
9386: LD_EXP 34
9390: PUSH
9391: LD_INT 3
9393: EQUAL
9394: IFFALSE 9410
// ComMoveUnit ( JMM , Connie ) ;
9396: LD_EXP 1
9400: PPUSH
9401: LD_EXP 16
9405: PPUSH
9406: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
9410: LD_EXP 1
9414: PPUSH
9415: LD_EXP 2
9419: PPUSH
9420: CALL_OW 296
9424: PUSH
9425: LD_INT 6
9427: LESS
9428: PUSH
9429: LD_EXP 1
9433: PPUSH
9434: LD_EXP 4
9438: PPUSH
9439: CALL_OW 296
9443: PUSH
9444: LD_INT 6
9446: LESS
9447: OR
9448: PUSH
9449: LD_EXP 1
9453: PPUSH
9454: LD_EXP 16
9458: PPUSH
9459: CALL_OW 296
9463: PUSH
9464: LD_INT 6
9466: LESS
9467: OR
9468: IFFALSE 9331
// end ; CenterNowOnUnits ( JMM ) ;
9470: LD_EXP 1
9474: PPUSH
9475: CALL_OW 87
// case JMMGirl of 1 :
9479: LD_EXP 34
9483: PUSH
9484: LD_INT 1
9486: DOUBLE
9487: EQUAL
9488: IFTRUE 9492
9490: GO 9535
9492: POP
// begin ComTurnUnit ( JMM , Joan ) ;
9493: LD_EXP 1
9497: PPUSH
9498: LD_EXP 2
9502: PPUSH
9503: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
9507: LD_EXP 2
9511: PPUSH
9512: LD_EXP 1
9516: PPUSH
9517: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
9521: LD_EXP 2
9525: PPUSH
9526: LD_STRING D3W-Joan-1
9528: PPUSH
9529: CALL_OW 88
// end ; 2 :
9533: GO 9638
9535: LD_INT 2
9537: DOUBLE
9538: EQUAL
9539: IFTRUE 9543
9541: GO 9586
9543: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
9544: LD_EXP 1
9548: PPUSH
9549: LD_EXP 4
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
9558: LD_EXP 4
9562: PPUSH
9563: LD_EXP 1
9567: PPUSH
9568: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
9572: LD_EXP 4
9576: PPUSH
9577: LD_STRING D3W-Lisa-1
9579: PPUSH
9580: CALL_OW 88
// end ; 3 :
9584: GO 9638
9586: LD_INT 3
9588: DOUBLE
9589: EQUAL
9590: IFTRUE 9594
9592: GO 9637
9594: POP
// begin ComTurnUnit ( JMM , Connie ) ;
9595: LD_EXP 1
9599: PPUSH
9600: LD_EXP 16
9604: PPUSH
9605: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
9609: LD_EXP 16
9613: PPUSH
9614: LD_EXP 1
9618: PPUSH
9619: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
9623: LD_EXP 16
9627: PPUSH
9628: LD_STRING D3W-Con-1
9630: PPUSH
9631: CALL_OW 88
// end ; end ;
9635: GO 9638
9637: POP
// Say ( JMM , D3W-JMM-1 ) ;
9638: LD_EXP 1
9642: PPUSH
9643: LD_STRING D3W-JMM-1
9645: PPUSH
9646: CALL_OW 88
// people = 0 ;
9650: LD_ADDR_VAR 0 4
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// if Lisa and people < 5 then
9658: LD_EXP 4
9662: PUSH
9663: LD_VAR 0 4
9667: PUSH
9668: LD_INT 5
9670: LESS
9671: AND
9672: IFFALSE 9704
// begin people = people + 1 ;
9674: LD_ADDR_VAR 0 4
9678: PUSH
9679: LD_VAR 0 4
9683: PUSH
9684: LD_INT 1
9686: PLUS
9687: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
9688: LD_ADDR_EXP 26
9692: PUSH
9693: LD_EXP 26
9697: PUSH
9698: LD_EXP 4
9702: ADD
9703: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
9704: LD_EXP 5
9708: PUSH
9709: LD_VAR 0 4
9713: PUSH
9714: LD_INT 5
9716: LESS
9717: AND
9718: IFFALSE 9750
// begin people = people + 1 ;
9720: LD_ADDR_VAR 0 4
9724: PUSH
9725: LD_VAR 0 4
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
9734: LD_ADDR_EXP 26
9738: PUSH
9739: LD_EXP 26
9743: PUSH
9744: LD_EXP 5
9748: ADD
9749: ST_TO_ADDR
// end ; if Bobby and people < 5 then
9750: LD_EXP 6
9754: PUSH
9755: LD_VAR 0 4
9759: PUSH
9760: LD_INT 5
9762: LESS
9763: AND
9764: IFFALSE 9796
// begin people = people + 1 ;
9766: LD_ADDR_VAR 0 4
9770: PUSH
9771: LD_VAR 0 4
9775: PUSH
9776: LD_INT 1
9778: PLUS
9779: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
9780: LD_ADDR_EXP 26
9784: PUSH
9785: LD_EXP 26
9789: PUSH
9790: LD_EXP 6
9794: ADD
9795: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
9796: LD_EXP 7
9800: PUSH
9801: LD_VAR 0 4
9805: PUSH
9806: LD_INT 5
9808: LESS
9809: AND
9810: IFFALSE 9842
// begin people = people + 1 ;
9812: LD_ADDR_VAR 0 4
9816: PUSH
9817: LD_VAR 0 4
9821: PUSH
9822: LD_INT 1
9824: PLUS
9825: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
9826: LD_ADDR_EXP 26
9830: PUSH
9831: LD_EXP 26
9835: PUSH
9836: LD_EXP 7
9840: ADD
9841: ST_TO_ADDR
// end ; if Denis and people < 5 then
9842: LD_EXP 8
9846: PUSH
9847: LD_VAR 0 4
9851: PUSH
9852: LD_INT 5
9854: LESS
9855: AND
9856: IFFALSE 9888
// begin people = people + 1 ;
9858: LD_ADDR_VAR 0 4
9862: PUSH
9863: LD_VAR 0 4
9867: PUSH
9868: LD_INT 1
9870: PLUS
9871: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
9872: LD_ADDR_EXP 26
9876: PUSH
9877: LD_EXP 26
9881: PUSH
9882: LD_EXP 8
9886: ADD
9887: ST_TO_ADDR
// end ; if Brown and people < 5 then
9888: LD_EXP 9
9892: PUSH
9893: LD_VAR 0 4
9897: PUSH
9898: LD_INT 5
9900: LESS
9901: AND
9902: IFFALSE 9934
// begin people = people + 1 ;
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: LD_VAR 0 4
9913: PUSH
9914: LD_INT 1
9916: PLUS
9917: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
9918: LD_ADDR_EXP 26
9922: PUSH
9923: LD_EXP 26
9927: PUSH
9928: LD_EXP 9
9932: ADD
9933: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
9934: LD_EXP 10
9938: PUSH
9939: LD_VAR 0 4
9943: PUSH
9944: LD_INT 5
9946: LESS
9947: AND
9948: IFFALSE 9980
// begin people = people + 1 ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_VAR 0 4
9959: PUSH
9960: LD_INT 1
9962: PLUS
9963: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
9964: LD_ADDR_EXP 26
9968: PUSH
9969: LD_EXP 26
9973: PUSH
9974: LD_EXP 10
9978: ADD
9979: ST_TO_ADDR
// end ; if Houten and people < 5 then
9980: LD_EXP 11
9984: PUSH
9985: LD_VAR 0 4
9989: PUSH
9990: LD_INT 5
9992: LESS
9993: AND
9994: IFFALSE 10026
// begin people = people + 1 ;
9996: LD_ADDR_VAR 0 4
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: PLUS
10009: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
10010: LD_ADDR_EXP 26
10014: PUSH
10015: LD_EXP 26
10019: PUSH
10020: LD_EXP 11
10024: ADD
10025: ST_TO_ADDR
// end ; if Cornel and people < 5 then
10026: LD_EXP 12
10030: PUSH
10031: LD_VAR 0 4
10035: PUSH
10036: LD_INT 5
10038: LESS
10039: AND
10040: IFFALSE 10072
// begin people = people + 1 ;
10042: LD_ADDR_VAR 0 4
10046: PUSH
10047: LD_VAR 0 4
10051: PUSH
10052: LD_INT 1
10054: PLUS
10055: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
10056: LD_ADDR_EXP 26
10060: PUSH
10061: LD_EXP 26
10065: PUSH
10066: LD_EXP 12
10070: ADD
10071: ST_TO_ADDR
// end ; if Gary and people < 5 then
10072: LD_EXP 13
10076: PUSH
10077: LD_VAR 0 4
10081: PUSH
10082: LD_INT 5
10084: LESS
10085: AND
10086: IFFALSE 10118
// begin people = people + 1 ;
10088: LD_ADDR_VAR 0 4
10092: PUSH
10093: LD_VAR 0 4
10097: PUSH
10098: LD_INT 1
10100: PLUS
10101: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
10102: LD_ADDR_EXP 26
10106: PUSH
10107: LD_EXP 26
10111: PUSH
10112: LD_EXP 13
10116: ADD
10117: ST_TO_ADDR
// end ; if Frank and people < 5 then
10118: LD_EXP 14
10122: PUSH
10123: LD_VAR 0 4
10127: PUSH
10128: LD_INT 5
10130: LESS
10131: AND
10132: IFFALSE 10164
// begin people = people + 1 ;
10134: LD_ADDR_VAR 0 4
10138: PUSH
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 1
10146: PLUS
10147: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
10148: LD_ADDR_EXP 26
10152: PUSH
10153: LD_EXP 26
10157: PUSH
10158: LD_EXP 14
10162: ADD
10163: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
10164: LD_EXP 15
10168: PUSH
10169: LD_VAR 0 4
10173: PUSH
10174: LD_INT 5
10176: LESS
10177: AND
10178: IFFALSE 10210
// begin people = people + 1 ;
10180: LD_ADDR_VAR 0 4
10184: PUSH
10185: LD_VAR 0 4
10189: PUSH
10190: LD_INT 1
10192: PLUS
10193: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
10194: LD_ADDR_EXP 26
10198: PUSH
10199: LD_EXP 26
10203: PUSH
10204: LD_EXP 15
10208: ADD
10209: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
10210: LD_EXP 26
10214: PPUSH
10215: LD_INT 25
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 72
10229: PUSH
10230: LD_INT 0
10232: EQUAL
10233: IFFALSE 10251
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
10235: LD_EXP 26
10239: PUSH
10240: LD_INT 1
10242: ARRAY
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: CALL_OW 336
// for i = 1 to 5 do
10251: LD_ADDR_VAR 0 1
10255: PUSH
10256: DOUBLE
10257: LD_INT 1
10259: DEC
10260: ST_TO_ADDR
10261: LD_INT 5
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10316
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
10267: LD_EXP 26
10271: PUSH
10272: LD_VAR 0 1
10276: ARRAY
10277: PPUSH
10278: LD_INT 62
10280: PUSH
10281: LD_VAR 0 1
10285: PLUS
10286: PPUSH
10287: LD_INT 95
10289: PPUSH
10290: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
10294: LD_EXP 26
10298: PUSH
10299: LD_VAR 0 1
10303: ARRAY
10304: PPUSH
10305: LD_EXP 1
10309: PPUSH
10310: CALL_OW 179
// end ;
10314: GO 10264
10316: POP
10317: POP
// repeat wait ( 0 0$1 ) ;
10318: LD_INT 35
10320: PPUSH
10321: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10325: LD_EXP 1
10329: PPUSH
10330: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
10334: LD_EXP 1
10338: PPUSH
10339: LD_INT 66
10341: PPUSH
10342: LD_INT 98
10344: PPUSH
10345: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
10349: LD_EXP 2
10353: PUSH
10354: LD_EXP 4
10358: PUSH
10359: LD_EXP 16
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: PPUSH
10369: LD_INT 67
10371: PPUSH
10372: LD_INT 98
10374: PPUSH
10375: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
10379: LD_EXP 1
10383: PUSH
10384: LD_EXP 2
10388: PUSH
10389: LD_EXP 4
10393: PUSH
10394: LD_EXP 16
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: PPUSH
10405: LD_INT 63
10407: PPUSH
10408: LD_INT 95
10410: PPUSH
10411: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
10415: LD_EXP 1
10419: PPUSH
10420: LD_INT 9
10422: PPUSH
10423: CALL_OW 308
10427: PUSH
10428: LD_INT 9
10430: PPUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 70
10459: PUSH
10460: LD_INT 5
10462: EQUAL
10463: AND
10464: IFFALSE 10318
// wait ( 0 0$2 ) ;
10466: LD_INT 70
10468: PPUSH
10469: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
10473: LD_EXP 4
10477: PPUSH
10478: LD_INT 9
10480: PPUSH
10481: CALL_OW 308
10485: IFFALSE 10499
// Say ( Lisa , D3nW-Lisa-1 ) ;
10487: LD_EXP 4
10491: PPUSH
10492: LD_STRING D3nW-Lisa-1
10494: PPUSH
10495: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
10499: LD_EXP 7
10503: PPUSH
10504: LD_INT 9
10506: PPUSH
10507: CALL_OW 308
10511: IFFALSE 10525
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
10513: LD_EXP 7
10517: PPUSH
10518: LD_STRING D3nW-Cyrus-1
10520: PPUSH
10521: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
10525: LD_EXP 6
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL_OW 308
10537: IFFALSE 10551
// Say ( Bobby , D3nW-Bobby-1 ) ;
10539: LD_EXP 6
10543: PPUSH
10544: LD_STRING D3nW-Bobby-1
10546: PPUSH
10547: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
10551: LD_EXP 13
10555: PPUSH
10556: LD_INT 9
10558: PPUSH
10559: CALL_OW 308
10563: IFFALSE 10577
// Say ( Gary , D3nW-Gary-1 ) ;
10565: LD_EXP 13
10569: PPUSH
10570: LD_STRING D3nW-Gary-1
10572: PPUSH
10573: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
10577: LD_EXP 5
10581: PPUSH
10582: LD_INT 9
10584: PPUSH
10585: CALL_OW 308
10589: IFFALSE 10603
// Say ( Donaldson , D3nW-Don-1 ) ;
10591: LD_EXP 5
10595: PPUSH
10596: LD_STRING D3nW-Don-1
10598: PPUSH
10599: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
10603: LD_EXP 12
10607: PPUSH
10608: LD_INT 9
10610: PPUSH
10611: CALL_OW 308
10615: IFFALSE 10629
// Say ( Cornel , D3nW-Corn-1 ) ;
10617: LD_EXP 12
10621: PPUSH
10622: LD_STRING D3nW-Corn-1
10624: PPUSH
10625: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
10629: LD_EXP 14
10633: PPUSH
10634: LD_INT 9
10636: PPUSH
10637: CALL_OW 308
10641: IFFALSE 10655
// Say ( Frank , D3nW-Frank-1 ) ;
10643: LD_EXP 14
10647: PPUSH
10648: LD_STRING D3nW-Frank-1
10650: PPUSH
10651: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
10655: LD_EXP 1
10659: PPUSH
10660: LD_STRING D3nW-JMM-1
10662: PPUSH
10663: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
10667: LD_EXP 1
10671: PPUSH
10672: LD_STRING D3nW-JMM-1a
10674: PPUSH
10675: CALL_OW 88
// InGameOff ;
10679: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10683: LD_STRING M1
10685: PPUSH
10686: CALL_OW 337
// SaveForQuickRestart ;
10690: CALL_OW 22
// startAttacks = 1 ;
10694: LD_ADDR_EXP 29
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10702: LD_INT 175
10704: PPUSH
10705: CALL_OW 67
// powellBuildBase = 1 ;
10709: LD_ADDR_EXP 27
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: PPOPN 4
10719: END
// function ResolveQuery ( question , list_of_q ) ; begin
10720: LD_INT 0
10722: PPUSH
// case question of 1 :
10723: LD_VAR 0 1
10727: PUSH
10728: LD_INT 1
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10787
10736: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
10737: LD_EXP 1
10741: PPUSH
10742: LD_STRING D2Mot-JMM-1
10744: PPUSH
10745: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
10749: LD_EXP 17
10753: PPUSH
10754: LD_STRING D2Mot-Pow-1
10756: PPUSH
10757: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
10761: LD_EXP 1
10765: PPUSH
10766: LD_STRING D2Mot-JMM-2
10768: PPUSH
10769: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
10773: LD_EXP 17
10777: PPUSH
10778: LD_STRING D2Mot-Pow-2
10780: PPUSH
10781: CALL_OW 88
// end ; 2 :
10785: GO 11130
10787: LD_INT 2
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 10871
10795: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
10796: LD_EXP 1
10800: PPUSH
10801: LD_STRING D2Rus-JMM-1
10803: PPUSH
10804: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
10808: LD_EXP 17
10812: PPUSH
10813: LD_STRING D2Rus-Pow-1
10815: PPUSH
10816: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
10820: LD_EXP 1
10824: PPUSH
10825: LD_STRING D2Rus-JMM-2
10827: PPUSH
10828: CALL_OW 88
// if not ( 3 in list_of_q ) then
10832: LD_INT 3
10834: PUSH
10835: LD_VAR 0 2
10839: IN
10840: NOT
10841: IFFALSE 10857
// Say ( Powell , D2Rus-Pow-2 ) else
10843: LD_EXP 17
10847: PPUSH
10848: LD_STRING D2Rus-Pow-2
10850: PPUSH
10851: CALL_OW 88
10855: GO 10869
// Say ( Powell , D2Rus-Pow-2a ) ;
10857: LD_EXP 17
10861: PPUSH
10862: LD_STRING D2Rus-Pow-2a
10864: PPUSH
10865: CALL_OW 88
// end ; 3 :
10869: GO 11130
10871: LD_INT 3
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10964
10879: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
10880: LD_EXP 1
10884: PPUSH
10885: LD_STRING D2Leg-JMM-1
10887: PPUSH
10888: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
10892: LD_EXP 17
10896: PPUSH
10897: LD_STRING D2Leg-Pow-1
10899: PPUSH
10900: CALL_OW 88
// if ( 2 in list_of_q ) then
10904: LD_INT 2
10906: PUSH
10907: LD_VAR 0 2
10911: IN
10912: IFFALSE 10938
// begin Say ( JMM , D2Leg-JMM-2 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING D2Leg-JMM-2
10921: PPUSH
10922: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
10926: LD_EXP 17
10930: PPUSH
10931: LD_STRING D2Leg-Pow-2
10933: PPUSH
10934: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
10938: LD_EXP 1
10942: PPUSH
10943: LD_STRING D2Leg-JMM-3
10945: PPUSH
10946: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
10950: LD_EXP 17
10954: PPUSH
10955: LD_STRING D2Leg-Pow-3
10957: PPUSH
10958: CALL_OW 88
// end ; 4 :
10962: GO 11130
10964: LD_INT 4
10966: DOUBLE
10967: EQUAL
10968: IFTRUE 10972
10970: GO 11047
10972: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
10973: LD_EXP 1
10977: PPUSH
10978: LD_STRING D2Ar-JMM-1
10980: PPUSH
10981: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
10985: LD_EXP 17
10989: PPUSH
10990: LD_STRING D2Ar-Pow-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
10997: LD_EXP 1
11001: PPUSH
11002: LD_STRING D2Ar-JMM-2
11004: PPUSH
11005: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
11009: LD_EXP 17
11013: PPUSH
11014: LD_STRING D2Ar-Pow-2
11016: PPUSH
11017: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
11021: LD_EXP 1
11025: PPUSH
11026: LD_STRING D2Ar-JMM-3
11028: PPUSH
11029: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
11033: LD_EXP 17
11037: PPUSH
11038: LD_STRING D2Ar-Pow-3
11040: PPUSH
11041: CALL_OW 88
// end ; 5 :
11045: GO 11130
11047: LD_INT 5
11049: DOUBLE
11050: EQUAL
11051: IFTRUE 11055
11053: GO 11070
11055: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
11056: LD_EXP 1
11060: PPUSH
11061: LD_STRING D2Conf-JMM-1
11063: PPUSH
11064: CALL_OW 88
// end ; 6 :
11068: GO 11130
11070: LD_INT 6
11072: DOUBLE
11073: EQUAL
11074: IFTRUE 11078
11076: GO 11129
11078: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
11079: LD_EXP 1
11083: PPUSH
11084: LD_STRING D2Com-JMM-1
11086: PPUSH
11087: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
11091: LD_EXP 17
11095: PPUSH
11096: LD_STRING D2Com-Pow-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
11103: LD_EXP 1
11107: PPUSH
11108: LD_STRING D2Com-JMM-2
11110: PPUSH
11111: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
11115: LD_EXP 17
11119: PPUSH
11120: LD_STRING D2Com-Pow-2
11122: PPUSH
11123: CALL_OW 88
// end ; end ;
11127: GO 11130
11129: POP
// end ;
11130: LD_VAR 0 3
11134: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
11135: LD_INT 9
11137: PPUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 4
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 21
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 70
11166: IFFALSE 11211
11168: GO 11170
11170: DISABLE
// begin enable ;
11171: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
11172: LD_INT 9
11174: PPUSH
11175: LD_INT 22
11177: PUSH
11178: LD_INT 4
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 21
11187: PUSH
11188: LD_INT 1
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 235
// end ;
11211: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
11212: LD_INT 22
11214: PUSH
11215: LD_INT 4
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 21
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 3
11234: PUSH
11235: LD_INT 58
11237: PUSH
11238: EMPTY
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 69
11254: PUSH
11255: LD_INT 4
11257: EQUAL
11258: PUSH
11259: LD_EXP 29
11263: PUSH
11264: LD_INT 1
11266: EQUAL
11267: AND
11268: IFFALSE 11281
11270: GO 11272
11272: DISABLE
// startAttacks = 0 ;
11273: LD_ADDR_EXP 29
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
11281: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
11282: LD_INT 22
11284: PUSH
11285: LD_INT 4
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 58
11307: PUSH
11308: EMPTY
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 69
11324: PUSH
11325: LD_INT 4
11327: EQUAL
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 6
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 24
11351: PUSH
11352: LD_INT 250
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: LD_INT 0
11371: EQUAL
11372: AND
11373: PUSH
11374: LD_EXP 29
11378: PUSH
11379: LD_INT 0
11381: EQUAL
11382: AND
11383: PUSH
11384: LD_EXP 28
11388: PUSH
11389: LD_INT 0
11391: EQUAL
11392: AND
11393: IFFALSE 11581
11395: GO 11397
11397: DISABLE
11398: LD_INT 0
11400: PPUSH
// begin powellAttacks = 1 ;
11401: LD_ADDR_EXP 28
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// InGameOn ;
11409: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
11413: LD_EXP 17
11417: PPUSH
11418: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
11422: LD_EXP 17
11426: PPUSH
11427: LD_INT 47
11429: PPUSH
11430: LD_INT 60
11432: PPUSH
11433: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
11437: LD_EXP 17
11441: PPUSH
11442: LD_STRING D4-Pow-1
11444: PPUSH
11445: CALL_OW 88
// for i = 1 to amUnitsAttack do
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_EXP 25
11463: PUSH
11464: FOR_TO
11465: IFFALSE 11510
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
11467: LD_EXP 25
11471: PUSH
11472: LD_VAR 0 1
11476: ARRAY
11477: PPUSH
11478: CALL_OW 258
11482: PUSH
11483: LD_INT 1
11485: EQUAL
11486: IFFALSE 11508
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
11488: LD_EXP 25
11492: PUSH
11493: LD_VAR 0 1
11497: ARRAY
11498: PPUSH
11499: LD_STRING D4-Sol1-1
11501: PPUSH
11502: CALL_OW 88
// break ;
11506: GO 11510
// end ;
11508: GO 11464
11510: POP
11511: POP
// Say ( Powell , D4-Pow-2 ) ;
11512: LD_EXP 17
11516: PPUSH
11517: LD_STRING D4-Pow-2
11519: PPUSH
11520: CALL_OW 88
// InGameOff ;
11524: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
11528: LD_INT 22
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 21
11540: PUSH
11541: LD_INT 2
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: LD_INT 58
11553: PUSH
11554: EMPTY
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PPUSH
11571: LD_INT 59
11573: PPUSH
11574: LD_INT 21
11576: PPUSH
11577: CALL_OW 114
// end ;
11581: PPOPN 1
11583: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
11584: LD_EXP 28
11588: PUSH
11589: LD_INT 1
11591: EQUAL
11592: IFFALSE 11641
11594: GO 11596
11596: DISABLE
11597: LD_INT 0
11599: PPUSH
// begin enable ;
11600: ENABLE
// for i = 1 to amUnitsAttack do
11601: LD_ADDR_VAR 0 1
11605: PUSH
11606: DOUBLE
11607: LD_INT 1
11609: DEC
11610: ST_TO_ADDR
11611: LD_EXP 25
11615: PUSH
11616: FOR_TO
11617: IFFALSE 11639
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
11619: LD_INT 8
11621: PPUSH
11622: LD_EXP 25
11626: PUSH
11627: LD_VAR 0 1
11631: ARRAY
11632: PPUSH
11633: CALL_OW 471
11637: GO 11616
11639: POP
11640: POP
// end ;
11641: PPOPN 1
11643: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
11644: LD_INT 22
11646: PUSH
11647: LD_INT 4
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 21
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: LD_INT 58
11669: PUSH
11670: EMPTY
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_INT 0
11689: EQUAL
11690: PUSH
11691: LD_EXP 28
11695: PUSH
11696: LD_INT 1
11698: EQUAL
11699: AND
11700: IFFALSE 11871
11702: GO 11704
11704: DISABLE
// begin powellAttacks = 2 ;
11705: LD_ADDR_EXP 28
11709: PUSH
11710: LD_INT 2
11712: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
11713: LD_INT 85
11715: PPUSH
11716: LD_INT 3
11718: PPUSH
11719: LD_INT 3
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: LD_INT 5
11727: PUSH
11728: LD_INT 7
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_INT 2
11740: PPUSH
11741: CALL_OW 12
11745: ARRAY
11746: PPUSH
11747: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
11751: LD_INT 85
11753: PPUSH
11754: LD_INT 3
11756: PPUSH
11757: LD_INT 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: LD_INT 5
11765: PUSH
11766: LD_INT 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 1
11775: PPUSH
11776: LD_INT 2
11778: PPUSH
11779: CALL_OW 12
11783: ARRAY
11784: PPUSH
11785: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
11789: LD_INT 85
11791: PPUSH
11792: LD_INT 3
11794: PPUSH
11795: LD_INT 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_INT 5
11803: PUSH
11804: LD_INT 7
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 2
11816: PPUSH
11817: CALL_OW 12
11821: ARRAY
11822: PPUSH
11823: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
11827: LD_INT 85
11829: PPUSH
11830: LD_INT 5
11832: PPUSH
11833: LD_INT 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: LD_INT 6
11841: PPUSH
11842: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
11846: LD_ADDR_EXP 30
11850: PUSH
11851: LD_INT 85
11853: PPUSH
11854: LD_INT 3
11856: PPUSH
11857: LD_INT 3
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 3
11865: PPUSH
11866: CALL_OW 185
11870: ST_TO_ADDR
// end ;
11871: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
11872: LD_INT 22
11874: PUSH
11875: LD_INT 4
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 21
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 58
11897: PUSH
11898: EMPTY
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: PUSH
11915: LD_INT 5
11917: GREATEREQUAL
11918: PUSH
11919: LD_EXP 29
11923: PUSH
11924: LD_INT 1
11926: EQUAL
11927: AND
11928: IFFALSE 11941
11930: GO 11932
11932: DISABLE
// startAttacks = 0 ;
11933: LD_ADDR_EXP 29
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
11941: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
11942: LD_INT 22
11944: PUSH
11945: LD_INT 4
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 21
11954: PUSH
11955: LD_INT 2
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 3
11964: PUSH
11965: LD_INT 58
11967: PUSH
11968: EMPTY
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: PPUSH
11980: CALL_OW 69
11984: PUSH
11985: LD_INT 5
11987: GREATEREQUAL
11988: PUSH
11989: LD_INT 22
11991: PUSH
11992: LD_INT 6
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 24
12011: PUSH
12012: LD_INT 250
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: PUSH
12029: LD_INT 0
12031: EQUAL
12032: AND
12033: PUSH
12034: LD_EXP 29
12038: PUSH
12039: LD_INT 0
12041: EQUAL
12042: AND
12043: PUSH
12044: LD_EXP 28
12048: PUSH
12049: LD_INT 2
12051: EQUAL
12052: AND
12053: IFFALSE 12955
12055: GO 12057
12057: DISABLE
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
12062: PPUSH
12063: PPUSH
// begin powellAttacks = 3 ;
12064: LD_ADDR_EXP 28
12068: PUSH
12069: LD_INT 3
12071: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
12072: LD_ADDR_VAR 0 1
12076: PUSH
12077: DOUBLE
12078: LD_INT 1
12080: DEC
12081: ST_TO_ADDR
12082: LD_EXP 25
12086: PUSH
12087: FOR_TO
12088: IFFALSE 12110
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
12090: LD_INT 8
12092: PPUSH
12093: LD_EXP 25
12097: PUSH
12098: LD_VAR 0 1
12102: ARRAY
12103: PPUSH
12104: CALL_OW 472
12108: GO 12087
12110: POP
12111: POP
// wait ( 0 0$5 ) ;
12112: LD_INT 175
12114: PPUSH
12115: CALL_OW 67
// CenterNowOnUnits ( Powell ) ;
12119: LD_EXP 17
12123: PPUSH
12124: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
12128: LD_EXP 17
12132: PPUSH
12133: LD_INT 45
12135: PPUSH
12136: LD_INT 64
12138: PPUSH
12139: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
12143: LD_EXP 17
12147: PPUSH
12148: LD_INT 46
12150: PPUSH
12151: LD_INT 66
12153: PPUSH
12154: CALL_OW 178
// for i = 5 to 8 do
12158: LD_ADDR_VAR 0 1
12162: PUSH
12163: DOUBLE
12164: LD_INT 5
12166: DEC
12167: ST_TO_ADDR
12168: LD_INT 8
12170: PUSH
12171: FOR_TO
12172: IFFALSE 12318
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
12174: LD_EXP 25
12178: PUSH
12179: LD_VAR 0 1
12183: ARRAY
12184: PPUSH
12185: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
12189: LD_EXP 25
12193: PUSH
12194: LD_VAR 0 1
12198: ARRAY
12199: PPUSH
12200: CALL_OW 121
// wait ( 0 0$1 ) ;
12204: LD_INT 35
12206: PPUSH
12207: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
12211: LD_EXP 25
12215: PUSH
12216: LD_VAR 0 1
12220: ARRAY
12221: PPUSH
12222: LD_INT 92
12224: PPUSH
12225: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
12229: LD_EXP 25
12233: PUSH
12234: LD_VAR 0 1
12238: ARRAY
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
12247: LD_EXP 25
12251: PUSH
12252: LD_VAR 0 1
12256: ARRAY
12257: PPUSH
12258: CALL_OW 182
// wait ( 0 0$1 ) ;
12262: LD_INT 35
12264: PPUSH
12265: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 45 + i , 67 ) ;
12269: LD_EXP 25
12273: PUSH
12274: LD_VAR 0 1
12278: ARRAY
12279: PPUSH
12280: LD_INT 45
12282: PUSH
12283: LD_VAR 0 1
12287: PLUS
12288: PPUSH
12289: LD_INT 67
12291: PPUSH
12292: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
12296: LD_EXP 25
12300: PUSH
12301: LD_VAR 0 1
12305: ARRAY
12306: PPUSH
12307: LD_EXP 17
12311: PPUSH
12312: CALL_OW 179
// end ;
12316: GO 12171
12318: POP
12319: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_INT 4
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 21
12337: PUSH
12338: LD_INT 1
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 56
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: LD_INT 3
12353: PUSH
12354: LD_INT 60
12356: PUSH
12357: EMPTY
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: PUSH
12375: LD_EXP 17
12379: PUSH
12380: EMPTY
12381: LIST
12382: DIFF
12383: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 92
12391: PPUSH
12392: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
12408: LD_EXP 17
12412: PPUSH
12413: LD_STRING D5-Pow-1
12415: PPUSH
12416: CALL_OW 88
// for i = 1 to amUnitsAttack do
12420: LD_ADDR_VAR 0 1
12424: PUSH
12425: DOUBLE
12426: LD_INT 1
12428: DEC
12429: ST_TO_ADDR
12430: LD_EXP 25
12434: PUSH
12435: FOR_TO
12436: IFFALSE 12481
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
12438: LD_EXP 25
12442: PUSH
12443: LD_VAR 0 1
12447: ARRAY
12448: PPUSH
12449: CALL_OW 258
12453: PUSH
12454: LD_INT 1
12456: EQUAL
12457: IFFALSE 12479
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
12459: LD_EXP 25
12463: PUSH
12464: LD_VAR 0 1
12468: ARRAY
12469: PPUSH
12470: LD_STRING D5-Sol2-1
12472: PPUSH
12473: CALL_OW 88
// break ;
12477: GO 12481
// end ;
12479: GO 12435
12481: POP
12482: POP
// Say ( Powell , D5-Pow-2 ) ;
12483: LD_EXP 17
12487: PPUSH
12488: LD_STRING D5-Pow-2
12490: PPUSH
12491: CALL_OW 88
// for i = 1 to amUnitsAttack do
12495: LD_ADDR_VAR 0 1
12499: PUSH
12500: DOUBLE
12501: LD_INT 1
12503: DEC
12504: ST_TO_ADDR
12505: LD_EXP 25
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12556
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
12513: LD_EXP 25
12517: PUSH
12518: LD_VAR 0 1
12522: ARRAY
12523: PPUSH
12524: CALL_OW 258
12528: PUSH
12529: LD_INT 1
12531: EQUAL
12532: IFFALSE 12554
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
12534: LD_EXP 25
12538: PUSH
12539: LD_VAR 0 1
12543: ARRAY
12544: PPUSH
12545: LD_STRING D5-Sol2-2
12547: PPUSH
12548: CALL_OW 88
// break ;
12552: GO 12556
// end ;
12554: GO 12510
12556: POP
12557: POP
// Say ( Powell , D5-Pow-3 ) ;
12558: LD_EXP 17
12562: PPUSH
12563: LD_STRING D5-Pow-3
12565: PPUSH
12566: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
12570: LD_INT 22
12572: PUSH
12573: LD_INT 4
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 21
12582: PUSH
12583: LD_INT 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 3
12592: PUSH
12593: LD_INT 58
12595: PUSH
12596: EMPTY
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PPUSH
12613: LD_INT 59
12615: PPUSH
12616: LD_INT 21
12618: PPUSH
12619: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
12623: LD_EXP 25
12627: PPUSH
12628: LD_INT 59
12630: PPUSH
12631: LD_INT 21
12633: PPUSH
12634: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
12638: LD_INT 61
12640: PPUSH
12641: LD_INT 35
12643: PPUSH
12644: CALL_OW 84
// wait ( 0 0$15 ) ;
12648: LD_INT 525
12650: PPUSH
12651: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
12655: LD_EXP 17
12659: PPUSH
12660: LD_STRING D5a-Pow-1
12662: PPUSH
12663: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
12667: LD_EXP 17
12671: PPUSH
12672: LD_STRING D5a-Pow-1a
12674: PPUSH
12675: CALL_OW 88
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
12686: LD_EXP 17
12690: PPUSH
12691: LD_STRING D5a-Pow-1b
12693: PPUSH
12694: CALL_OW 88
// wait ( 0 0$3 ) ;
12698: LD_INT 105
12700: PPUSH
12701: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
12705: LD_EXP 17
12709: PPUSH
12710: LD_STRING D5a-Pow-1c
12712: PPUSH
12713: CALL_OW 88
// wait ( 0 0$1 ) ;
12717: LD_INT 35
12719: PPUSH
12720: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
12724: LD_EXP 17
12728: PPUSH
12729: LD_STRING D5a-Pow-1d
12731: PPUSH
12732: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12736: LD_INT 35
12738: PPUSH
12739: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
12743: LD_INT 22
12745: PUSH
12746: LD_INT 4
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: LD_INT 58
12768: PUSH
12769: EMPTY
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 69
12785: PPUSH
12786: LD_INT 59
12788: PPUSH
12789: LD_INT 21
12791: PPUSH
12792: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
12796: LD_EXP 25
12800: PPUSH
12801: LD_INT 59
12803: PPUSH
12804: LD_INT 21
12806: PPUSH
12807: CALL_OW 114
// until amUnitsAttack = [ ] ;
12811: LD_EXP 25
12815: PUSH
12816: EMPTY
12817: EQUAL
12818: IFFALSE 12736
// CenterNowOnUnits ( Powell ) ;
12820: LD_EXP 17
12824: PPUSH
12825: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
12829: LD_ADDR_VAR 0 3
12833: PUSH
12834: LD_INT 22
12836: PUSH
12837: LD_INT 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 21
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 69
12862: PUSH
12863: LD_EXP 17
12867: PUSH
12868: EMPTY
12869: LIST
12870: DIFF
12871: ST_TO_ADDR
// for i in powellPeople do
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_VAR 0 3
12881: PUSH
12882: FOR_IN
12883: IFFALSE 12912
// if GetSex ( i ) = sex_male then
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 258
12894: PUSH
12895: LD_INT 1
12897: EQUAL
12898: IFFALSE 12910
// sold = i ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_VAR 0 1
12909: ST_TO_ADDR
12910: GO 12882
12912: POP
12913: POP
// Say ( sold , D6-Sol3-1 ) ;
12914: LD_VAR 0 2
12918: PPUSH
12919: LD_STRING D6-Sol3-1
12921: PPUSH
12922: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
12926: LD_EXP 17
12930: PPUSH
12931: LD_STRING D6-Pow-1
12933: PPUSH
12934: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
12938: LD_INT 139
12940: PUSH
12941: LD_INT 138
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PPUSH
12948: LD_INT 12
12950: PPUSH
12951: CALL_OW 113
// end ;
12955: PPOPN 4
12957: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
12958: LD_EXP 28
12962: PUSH
12963: LD_INT 3
12965: EQUAL
12966: PUSH
12967: LD_INT 12
12969: PPUSH
12970: LD_INT 22
12972: PUSH
12973: LD_INT 8
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 70
12998: PUSH
12999: LD_INT 2
13001: EQUAL
13002: AND
13003: IFFALSE 13164
13005: GO 13007
13007: DISABLE
13008: LD_INT 0
13010: PPUSH
13011: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
13012: LD_INT 8
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
13022: LD_INT 4
13024: PPUSH
13025: LD_INT 8
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
13038: LD_ADDR_VAR 0 1
13042: PUSH
13043: LD_INT 92
13045: PPUSH
13046: CALL_OW 313
13050: PUSH
13051: FOR_IN
13052: IFFALSE 13083
// if GetSex ( i ) = sex_male then
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 258
13063: PUSH
13064: LD_INT 1
13066: EQUAL
13067: IFFALSE 13081
// begin tmp = i ;
13069: LD_ADDR_VAR 0 2
13073: PUSH
13074: LD_VAR 0 1
13078: ST_TO_ADDR
// break ;
13079: GO 13083
// end ;
13081: GO 13051
13083: POP
13084: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
13085: LD_INT 92
13087: PPUSH
13088: CALL_OW 313
13092: PPUSH
13093: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
13097: LD_VAR 0 2
13101: PPUSH
13102: LD_STRING D6-Sol3-2
13104: PPUSH
13105: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
13109: LD_INT 139
13111: PUSH
13112: LD_INT 138
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: LD_INT 85
13121: PPUSH
13122: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
13126: LD_INT 4
13128: PPUSH
13129: LD_INT 8
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
13142: LD_INT 8
13144: PPUSH
13145: LD_INT 8
13147: PPUSH
13148: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
13152: LD_EXP 17
13156: PPUSH
13157: LD_STRING D6-Pow-2
13159: PPUSH
13160: CALL_OW 88
// end ;
13164: PPOPN 2
13166: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
13167: LD_INT 85
13169: PPUSH
13170: CALL_OW 301
13174: IFFALSE 13466
13176: GO 13178
13178: DISABLE
13179: LD_INT 0
13181: PPUSH
13182: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
13183: LD_ADDR_VAR 0 1
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 4
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 21
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 56
13210: PUSH
13211: EMPTY
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 69
13223: PUSH
13224: LD_EXP 17
13228: PUSH
13229: EMPTY
13230: LIST
13231: DIFF
13232: PUSH
13233: FOR_IN
13234: IFFALSE 13265
// if GetSex ( i ) = sex_male then
13236: LD_VAR 0 1
13240: PPUSH
13241: CALL_OW 258
13245: PUSH
13246: LD_INT 1
13248: EQUAL
13249: IFFALSE 13263
// begin tmp = i ;
13251: LD_ADDR_VAR 0 2
13255: PUSH
13256: LD_VAR 0 1
13260: ST_TO_ADDR
// break ;
13261: GO 13265
// end ;
13263: GO 13233
13265: POP
13266: POP
// Say ( Powell , D6a-Pow-1 ) ;
13267: LD_EXP 17
13271: PPUSH
13272: LD_STRING D6a-Pow-1
13274: PPUSH
13275: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
13279: LD_VAR 0 2
13283: PPUSH
13284: LD_STRING D6a-Sol3-1
13286: PPUSH
13287: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_VAR 0 2
13300: PPUSH
13301: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
13305: LD_EXP 17
13309: PPUSH
13310: LD_STRING D6a-Pow-2
13312: PPUSH
13313: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
13317: LD_VAR 0 2
13321: PPUSH
13322: LD_STRING D6a-Sol3-2
13324: PPUSH
13325: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
13329: LD_EXP 17
13333: PPUSH
13334: LD_STRING D6a-Pow-3
13336: PPUSH
13337: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
13341: LD_EXP 17
13345: PPUSH
13346: LD_EXP 30
13350: PPUSH
13351: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13355: LD_INT 35
13357: PPUSH
13358: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
13362: LD_EXP 17
13366: PPUSH
13367: LD_EXP 30
13371: PPUSH
13372: CALL_OW 120
// until IsInUnit ( Powell ) ;
13376: LD_EXP 17
13380: PPUSH
13381: CALL_OW 310
13385: IFFALSE 13355
// wait ( 0 0$1 ) ;
13387: LD_INT 35
13389: PPUSH
13390: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
13394: LD_EXP 30
13398: PPUSH
13399: LD_INT 77
13401: PPUSH
13402: LD_INT 64
13404: PPUSH
13405: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
13409: LD_EXP 30
13413: PPUSH
13414: LD_INT 91
13416: PPUSH
13417: LD_INT 61
13419: PPUSH
13420: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
13424: LD_EXP 30
13428: PPUSH
13429: LD_INT 74
13431: PPUSH
13432: LD_INT 25
13434: PPUSH
13435: CALL_OW 171
// centerPowell = 1 ;
13439: LD_ADDR_EXP 31
13443: PUSH
13444: LD_INT 1
13446: ST_TO_ADDR
// wait ( 0 0$15 ) ;
13447: LD_INT 525
13449: PPUSH
13450: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
13454: LD_EXP 17
13458: PPUSH
13459: LD_STRING D6b-Pow-1
13461: PPUSH
13462: CALL_OW 88
// end ;
13466: PPOPN 2
13468: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
13469: LD_EXP 30
13473: PPUSH
13474: LD_INT 13
13476: PPUSH
13477: CALL_OW 308
13481: PUSH
13482: LD_EXP 28
13486: PUSH
13487: LD_INT 3
13489: EQUAL
13490: AND
13491: IFFALSE 13559
13493: GO 13495
13495: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
13496: LD_EXP 30
13500: PPUSH
13501: LD_INT 250
13503: PPUSH
13504: CALL_OW 234
// DialogueOn ;
13508: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
13512: LD_EXP 17
13516: PPUSH
13517: LD_STRING D6b-Pow-1a
13519: PPUSH
13520: CALL_OW 88
// DialogueOff ;
13524: CALL_OW 7
// ComEnterUnit ( Powell , PowBomb ) ;
13528: LD_EXP 17
13532: PPUSH
13533: LD_INT 137
13535: PPUSH
13536: CALL_OW 120
// wait ( 0 0$1 ) ;
13540: LD_INT 35
13542: PPUSH
13543: CALL_OW 67
// ComEnterUnit ( Powell , PowBomb ) ;
13547: LD_EXP 17
13551: PPUSH
13552: LD_INT 137
13554: PPUSH
13555: CALL_OW 120
// end ;
13559: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
13560: LD_INT 22
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 34
13572: PUSH
13573: LD_INT 29
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: IFFALSE 13913
13590: GO 13592
13592: DISABLE
// begin SetAttitude ( 8 , 4 , att_friend , true ) ;
13593: LD_INT 8
13595: PPUSH
13596: LD_INT 4
13598: PPUSH
13599: LD_INT 1
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
13609: LD_INT 137
13611: PPUSH
13612: LD_INT 80
13614: PPUSH
13615: LD_INT 19
13617: PPUSH
13618: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
13622: LD_INT 137
13624: PPUSH
13625: LD_INT 74
13627: PPUSH
13628: LD_INT 15
13630: PPUSH
13631: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
13635: LD_INT 137
13637: PPUSH
13638: LD_INT 72
13640: PPUSH
13641: LD_INT 19
13643: PPUSH
13644: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
13648: LD_INT 137
13650: PPUSH
13651: LD_INT 78
13653: PPUSH
13654: LD_INT 24
13656: PPUSH
13657: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
13661: LD_INT 137
13663: PPUSH
13664: LD_INT 77
13666: PPUSH
13667: LD_INT 20
13669: PPUSH
13670: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
13674: LD_INT 137
13676: PPUSH
13677: LD_INT 78
13679: PPUSH
13680: LD_INT 15
13682: PPUSH
13683: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
13687: LD_EXP 17
13691: PPUSH
13692: LD_STRING D6b-Pow-1b
13694: PPUSH
13695: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
13699: LD_INT 22
13701: PUSH
13702: LD_INT 8
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 21
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 25
13721: PUSH
13722: LD_INT 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 26
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PPUSH
13745: CALL_OW 69
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: LD_STRING D6b-ArSol1-1
13756: PPUSH
13757: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol2-1 ) ;
13761: LD_INT 22
13763: PUSH
13764: LD_INT 8
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 25
13783: PUSH
13784: LD_INT 1
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 26
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: LD_STRING D6b-ArSol2-1
13818: PPUSH
13819: CALL_OW 88
// wait ( 0 0$3 ) ;
13823: LD_INT 105
13825: PPUSH
13826: CALL_OW 67
// Say ( Powell , D6b-Pow-2 ) ;
13830: LD_EXP 17
13834: PPUSH
13835: LD_STRING D6b-Pow-2
13837: PPUSH
13838: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13842: LD_INT 35
13844: PPUSH
13845: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
13849: LD_INT 137
13851: PPUSH
13852: LD_INT 78
13854: PPUSH
13855: LD_INT 15
13857: PPUSH
13858: CALL_OW 297
13862: PUSH
13863: LD_INT 2
13865: LESS
13866: IFFALSE 13842
// wait ( 0 0$1 ) ;
13868: LD_INT 35
13870: PPUSH
13871: CALL_OW 67
// DialogueOn ;
13875: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
13879: LD_EXP 17
13883: PPUSH
13884: LD_STRING D6b-Pow-2a
13886: PPUSH
13887: CALL_OW 88
// DialogueOff ;
13891: CALL_OW 7
// centerPowell = 0 ;
13895: LD_ADDR_EXP 31
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
13903: LD_INT 137
13905: PPUSH
13906: LD_INT 105
13908: PPUSH
13909: CALL_OW 115
// end ;
13913: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
13914: LD_INT 105
13916: PPUSH
13917: CALL_OW 301
13921: PUSH
13922: LD_EXP 28
13926: PUSH
13927: LD_INT 3
13929: EQUAL
13930: AND
13931: IFFALSE 14627
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
13940: PPUSH
13941: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_sex , 1 ] ] ) ;
13942: LD_ADDR_VAR 0 2
13946: PUSH
13947: LD_INT 22
13949: PUSH
13950: LD_INT 4
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 56
13969: PUSH
13970: EMPTY
13971: LIST
13972: PUSH
13973: LD_INT 26
13975: PUSH
13976: LD_INT 1
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: PPUSH
13989: CALL_OW 69
13993: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
13994: LD_INT 49
13996: PPUSH
13997: LD_INT 66
13999: PPUSH
14000: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
14004: LD_VAR 0 2
14008: PUSH
14009: LD_INT 1
14011: ARRAY
14012: PPUSH
14013: LD_STRING D6c-Sol3-1
14015: PPUSH
14016: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
14020: LD_EXP 1
14024: PPUSH
14025: LD_STRING D6c-JMM-1
14027: PPUSH
14028: CALL_OW 88
// if IsOk ( Cyrus ) then
14032: LD_EXP 7
14036: PPUSH
14037: CALL_OW 302
14041: IFFALSE 14055
// Say ( Cyrus , D6c-Cyrus-1 ) ;
14043: LD_EXP 7
14047: PPUSH
14048: LD_STRING D6c-Cyrus-1
14050: PPUSH
14051: CALL_OW 88
// if IsOk ( Bobby ) then
14055: LD_EXP 6
14059: PPUSH
14060: CALL_OW 302
14064: IFFALSE 14078
// Say ( Bobby , D6c-Bobby-1 ) ;
14066: LD_EXP 6
14070: PPUSH
14071: LD_STRING D6c-Bobby-1
14073: PPUSH
14074: CALL_OW 88
// if IsOk ( Cornel ) then
14078: LD_EXP 12
14082: PPUSH
14083: CALL_OW 302
14087: IFFALSE 14101
// Say ( Cornel , D6c-Corn-1 ) ;
14089: LD_EXP 12
14093: PPUSH
14094: LD_STRING D6c-Corn-1
14096: PPUSH
14097: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
14101: LD_VAR 0 2
14105: PUSH
14106: LD_INT 2
14108: ARRAY
14109: PPUSH
14110: LD_STRING D6c-Sol1-1
14112: PPUSH
14113: CALL_OW 88
// if IsOk ( Lisa ) then
14117: LD_EXP 4
14121: PPUSH
14122: CALL_OW 302
14126: IFFALSE 14140
// Say ( Lisa , D6c-Lisa-1 ) ;
14128: LD_EXP 4
14132: PPUSH
14133: LD_STRING D6c-Lisa-1
14135: PPUSH
14136: CALL_OW 88
// if IsOk ( Gary ) then
14140: LD_EXP 13
14144: PPUSH
14145: CALL_OW 302
14149: IFFALSE 14163
// Say ( Gary , D6c-Gary-1 ) ;
14151: LD_EXP 13
14155: PPUSH
14156: LD_STRING D6c-Gary-1
14158: PPUSH
14159: CALL_OW 88
// if IsOK ( Donaldson ) then
14163: LD_EXP 5
14167: PPUSH
14168: CALL_OW 302
14172: IFFALSE 14186
// Say ( Donaldson , D6c-Don-1 ) ;
14174: LD_EXP 5
14178: PPUSH
14179: LD_STRING D6c-Don-1
14181: PPUSH
14182: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
14186: LD_VAR 0 2
14190: PUSH
14191: LD_INT 3
14193: ARRAY
14194: PPUSH
14195: LD_STRING D6c-Sol2-1
14197: PPUSH
14198: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
14202: LD_INT 22
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 21
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PPUSH
14226: CALL_OW 69
14230: PPUSH
14231: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
14235: LD_INT 22
14237: PUSH
14238: LD_INT 4
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL_OW 69
14263: PPUSH
14264: CALL_OW 122
// wait ( 0 0$1 ) ;
14268: LD_INT 35
14270: PPUSH
14271: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 1
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PPUSH
14304: CALL_OW 69
14308: PUSH
14309: LD_EXP 1
14313: PUSH
14314: EMPTY
14315: LIST
14316: DIFF
14317: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
14318: LD_ADDR_VAR 0 4
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 69
14351: ST_TO_ADDR
// for i := 1 to tmp2 do
14352: LD_ADDR_VAR 0 1
14356: PUSH
14357: DOUBLE
14358: LD_INT 1
14360: DEC
14361: ST_TO_ADDR
14362: LD_VAR 0 4
14366: PUSH
14367: FOR_TO
14368: IFFALSE 14419
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 65 ) ;
14370: LD_VAR 0 4
14374: PUSH
14375: LD_VAR 0 1
14379: ARRAY
14380: PPUSH
14381: LD_INT 43
14383: PUSH
14384: LD_VAR 0 1
14388: PLUS
14389: PPUSH
14390: LD_INT 65
14392: PPUSH
14393: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
14397: LD_VAR 0 4
14401: PUSH
14402: LD_VAR 0 1
14406: ARRAY
14407: PPUSH
14408: LD_EXP 1
14412: PPUSH
14413: CALL_OW 179
// end ;
14417: GO 14367
14419: POP
14420: POP
// for i := 1 to tmp1 do
14421: LD_ADDR_VAR 0 1
14425: PUSH
14426: DOUBLE
14427: LD_INT 1
14429: DEC
14430: ST_TO_ADDR
14431: LD_VAR 0 3
14435: PUSH
14436: FOR_TO
14437: IFFALSE 14488
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 64 ) ;
14439: LD_VAR 0 3
14443: PUSH
14444: LD_VAR 0 1
14448: ARRAY
14449: PPUSH
14450: LD_INT 43
14452: PUSH
14453: LD_VAR 0 1
14457: PLUS
14458: PPUSH
14459: LD_INT 64
14461: PPUSH
14462: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
14466: LD_VAR 0 3
14470: PUSH
14471: LD_VAR 0 1
14475: ARRAY
14476: PPUSH
14477: LD_EXP 1
14481: PPUSH
14482: CALL_OW 179
// end ;
14486: GO 14436
14488: POP
14489: POP
// ComMoveXY ( JMM , 48 , 68 ) ;
14490: LD_EXP 1
14494: PPUSH
14495: LD_INT 48
14497: PPUSH
14498: LD_INT 68
14500: PPUSH
14501: CALL_OW 111
// AddComTurnXY ( JMM , 47 , 65 ) ;
14505: LD_EXP 1
14509: PPUSH
14510: LD_INT 47
14512: PPUSH
14513: LD_INT 65
14515: PPUSH
14516: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
14520: LD_INT 35
14522: PPUSH
14523: CALL_OW 67
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
14527: LD_EXP 1
14531: PPUSH
14532: LD_INT 48
14534: PPUSH
14535: LD_INT 68
14537: PPUSH
14538: CALL_OW 297
14542: PUSH
14543: LD_INT 2
14545: LESS
14546: IFFALSE 14520
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( tmp [ 2 ] , D6c-Sol3-2 ) ;
14555: LD_VAR 0 2
14559: PUSH
14560: LD_INT 2
14562: ARRAY
14563: PPUSH
14564: LD_STRING D6c-Sol3-2
14566: PPUSH
14567: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
14571: LD_EXP 1
14575: PPUSH
14576: LD_STRING D6c-JMM-2
14578: PPUSH
14579: CALL_OW 88
// Video ( false ) ;
14583: LD_INT 0
14585: PPUSH
14586: CALL 3361 0 1
// centerPowell = 0 ;
14590: LD_ADDR_EXP 31
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
14598: LD_INT 22
14600: PUSH
14601: LD_INT 4
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
14620: LD_STRING M2
14622: PPUSH
14623: CALL_OW 337
// end ;
14627: PPOPN 4
14629: END
// every 0 0$1 trigger centerPowell = 1 do
14630: LD_EXP 31
14634: PUSH
14635: LD_INT 1
14637: EQUAL
14638: IFFALSE 14727
14640: GO 14642
14642: DISABLE
// begin enable ;
14643: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
14644: LD_EXP 17
14648: PUSH
14649: LD_INT 137
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: LD_INT 1000
14658: PPUSH
14659: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
14663: LD_EXP 30
14667: PPUSH
14668: LD_INT 13
14670: PPUSH
14671: CALL_OW 308
14675: NOT
14676: IFFALSE 14690
// SetLives ( powellVeh , 1000 ) ;
14678: LD_EXP 30
14682: PPUSH
14683: LD_INT 1000
14685: PPUSH
14686: CALL_OW 234
// if not IsInUnit ( Powell ) then
14690: LD_EXP 17
14694: PPUSH
14695: CALL_OW 310
14699: NOT
14700: IFFALSE 14713
// CenterNowOnUnits ( Powell ) else
14702: LD_EXP 17
14706: PPUSH
14707: CALL_OW 87
14711: GO 14727
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
14713: LD_EXP 17
14717: PPUSH
14718: CALL_OW 310
14722: PPUSH
14723: CALL_OW 87
// end ;
14727: END
