// export Stevens , Baker , Gordon , Peter , DeltaDoctor , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi ; export Powell ; export others13Omega ; export Burlak , burlakVeh ; export omegaHeroes ; export ruAttacksCounter ; export amSciStatus ; export escapeAvalaible ; export yourVehicles , resources ; export StevensStatus , BurlakStatus ; export unitLost ; export allUnitsLengh ; export mission_prefix ; export siberiteRocketStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( amheaddepo , lambda ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING lambda
  13: PPUSH
  14: CALL_OW 500
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
  18: LD_ADDR_EXP 28
  22: PUSH
  23: LD_STRING 13_StevensStatus_1
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: CALL_OW 30
  33: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
  34: LD_ADDR_EXP 29
  38: PUSH
  39: LD_STRING 13_BurlakStatus_1
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: CALL_OW 30
  49: ST_TO_ADDR
// omegaHeroes = [ ] ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// yourVehicles = [ ] ;
  57: LD_ADDR_EXP 26
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// resources = [ ] ;
  64: LD_ADDR_EXP 27
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// ruAttacksCounter = 0 ;
  71: LD_ADDR_EXP 23
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// escapeAvalaible = 0 ;
  79: LD_ADDR_EXP 25
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// allUnitsLengh = 0 ;
  87: LD_ADDR_EXP 31
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// siberiteRocketStatus = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// unitLost = 0 ;
 103: LD_ADDR_EXP 30
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// amSciStatus = 1 ;
 111: LD_ADDR_EXP 24
 115: PUSH
 116: LD_INT 1
 118: ST_TO_ADDR
// mission_prefix = 15_ ;
 119: LD_ADDR_EXP 32
 123: PUSH
 124: LD_STRING 15_
 126: ST_TO_ADDR
// debugMode = 0 ;
 127: LD_ADDR_EXP 34
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// PrepareOmegaTeam ;
 135: CALL 461 0 0
// SetDifficulty ;
 139: CALL 2293 0 0
// end ;
 143: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 144: LD_EXP 34
 148: PUSH
 149: LD_INT 1
 151: EQUAL
 152: IFFALSE 458
 154: GO 156
 156: DISABLE
 157: LD_INT 0
 159: PPUSH
// begin enable ;
 160: ENABLE
// fogoff ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 168: LD_ADDR_VAR 0 1
 172: PUSH
 173: LD_INT 22
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: PUSH
 183: LD_INT 21
 185: PUSH
 186: LD_INT 1
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: PUSH
 193: EMPTY
 194: LIST
 195: LIST
 196: PPUSH
 197: CALL_OW 69
 201: PUSH
 202: FOR_IN
 203: IFFALSE 219
// SetLives ( i , 1000 ) ;
 205: LD_VAR 0 1
 209: PPUSH
 210: LD_INT 1000
 212: PPUSH
 213: CALL_OW 234
 217: GO 202
 219: POP
 220: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 221: LD_ADDR_VAR 0 1
 225: PUSH
 226: LD_INT 22
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: PUSH
 236: LD_INT 2
 238: PUSH
 239: LD_INT 30
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PUSH
 249: LD_INT 30
 251: PUSH
 252: LD_INT 1
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PUSH
 273: FOR_IN
 274: IFFALSE 298
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 276: LD_VAR 0 1
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 9999
 291: PPUSH
 292: CALL_OW 277
 296: GO 273
 298: POP
 299: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 300: LD_ADDR_VAR 0 1
 304: PUSH
 305: LD_INT 22
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: LD_INT 30
 320: PUSH
 321: LD_INT 0
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PPUSH
 347: CALL_OW 69
 351: PUSH
 352: FOR_IN
 353: IFFALSE 377
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: CALL_OW 274
 364: PPUSH
 365: LD_INT 2
 367: PPUSH
 368: LD_INT 9999
 370: PPUSH
 371: CALL_OW 277
 375: GO 352
 377: POP
 378: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: LD_INT 22
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: LD_INT 2
 396: PUSH
 397: LD_INT 30
 399: PUSH
 400: LD_INT 0
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 456
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: CALL_OW 274
 443: PPUSH
 444: LD_INT 3
 446: PPUSH
 447: LD_INT 9999
 449: PPUSH
 450: CALL_OW 277
 454: GO 431
 456: POP
 457: POP
// end ; end_of_file
 458: PPOPN 1
 460: END
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , mecha , avalaibleVehs , randBuild ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
 465: PPUSH
 466: PPUSH
 467: PPUSH
 468: PPUSH
 469: PPUSH
 470: PPUSH
// uc_side = 1 ;
 471: LD_ADDR_OWVAR 20
 475: PUSH
 476: LD_INT 1
 478: ST_TO_ADDR
// uc_nation = 1 ;
 479: LD_ADDR_OWVAR 21
 483: PUSH
 484: LD_INT 1
 486: ST_TO_ADDR
// omegaVeh = [ ] ;
 487: LD_ADDR_VAR 0 3
 491: PUSH
 492: EMPTY
 493: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 494: LD_ADDR_EXP 18
 498: PUSH
 499: LD_STRING Powell
 501: PPUSH
 502: LD_INT 0
 504: PPUSH
 505: CALL 2042 0 2
 509: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
 510: LD_STRING 13s_Lisa
 512: PPUSH
 513: CALL_OW 28
 517: PUSH
 518: LD_INT 0
 520: EQUAL
 521: IFFALSE 536
// Lisa = PrepareUnitOmega ( Lisa ) ;
 523: LD_ADDR_EXP 6
 527: PUSH
 528: LD_STRING Lisa
 530: PPUSH
 531: CALL 2099 0 1
 535: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
 536: LD_STRING 13s_Donaldson
 538: PPUSH
 539: CALL_OW 28
 543: PUSH
 544: LD_INT 0
 546: EQUAL
 547: IFFALSE 562
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
 549: LD_ADDR_EXP 7
 553: PUSH
 554: LD_STRING Donaldson
 556: PPUSH
 557: CALL 2099 0 1
 561: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
 562: LD_STRING 13s_Bobby
 564: PPUSH
 565: CALL_OW 28
 569: PUSH
 570: LD_INT 0
 572: EQUAL
 573: IFFALSE 588
// Bobby = PrepareUnitOmega ( Bobby ) ;
 575: LD_ADDR_EXP 8
 579: PUSH
 580: LD_STRING Bobby
 582: PPUSH
 583: CALL 2099 0 1
 587: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
 588: LD_STRING 13s_Cyrus
 590: PPUSH
 591: CALL_OW 28
 595: PUSH
 596: LD_INT 0
 598: EQUAL
 599: IFFALSE 614
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
 601: LD_ADDR_EXP 9
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: CALL 2099 0 1
 613: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
 614: LD_STRING 13s_Denis
 616: PPUSH
 617: CALL_OW 28
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: IFFALSE 640
// Denis = PrepareUnitOmega ( Denis ) ;
 627: LD_ADDR_EXP 10
 631: PUSH
 632: LD_STRING Denis
 634: PPUSH
 635: CALL 2099 0 1
 639: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
 640: LD_STRING 13s_Brown
 642: PPUSH
 643: CALL_OW 28
 647: PUSH
 648: LD_INT 0
 650: EQUAL
 651: IFFALSE 666
// Brown = PrepareUnitOmega ( Brown ) ;
 653: LD_ADDR_EXP 11
 657: PUSH
 658: LD_STRING Brown
 660: PPUSH
 661: CALL 2099 0 1
 665: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
 666: LD_STRING 13s_Gladstone
 668: PPUSH
 669: CALL_OW 28
 673: PUSH
 674: LD_INT 0
 676: EQUAL
 677: IFFALSE 692
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_STRING Gladstone
 686: PPUSH
 687: CALL 2099 0 1
 691: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
 692: LD_STRING 13s_Houten
 694: PPUSH
 695: CALL_OW 28
 699: PUSH
 700: LD_INT 0
 702: EQUAL
 703: IFFALSE 718
// Houten = PrepareUnitOmega ( Houten ) ;
 705: LD_ADDR_EXP 13
 709: PUSH
 710: LD_STRING Houten
 712: PPUSH
 713: CALL 2099 0 1
 717: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
 718: LD_STRING 13s_Cornel
 720: PPUSH
 721: CALL_OW 28
 725: PUSH
 726: LD_INT 0
 728: EQUAL
 729: IFFALSE 744
// Cornell = PrepareUnitOmega ( Cornell ) ;
 731: LD_ADDR_EXP 14
 735: PUSH
 736: LD_STRING Cornell
 738: PPUSH
 739: CALL 2099 0 1
 743: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
 744: LD_STRING 13s_Gary
 746: PPUSH
 747: CALL_OW 28
 751: PUSH
 752: LD_INT 0
 754: EQUAL
 755: IFFALSE 770
// Gary = PrepareUnitOmega ( Gary ) ;
 757: LD_ADDR_EXP 15
 761: PUSH
 762: LD_STRING Gary
 764: PPUSH
 765: CALL 2099 0 1
 769: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
 770: LD_STRING 13s_Frank
 772: PPUSH
 773: CALL_OW 28
 777: PUSH
 778: LD_INT 0
 780: EQUAL
 781: IFFALSE 796
// Frank = PrepareUnitOmega ( Frank ) ;
 783: LD_ADDR_EXP 16
 787: PUSH
 788: LD_STRING Frank
 790: PPUSH
 791: CALL 2099 0 1
 795: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
 796: LD_STRING 13s_Kikuchi
 798: PPUSH
 799: CALL_OW 28
 803: PUSH
 804: LD_INT 0
 806: EQUAL
 807: IFFALSE 822
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
 809: LD_ADDR_EXP 17
 813: PUSH
 814: LD_STRING Kikuchi
 816: PPUSH
 817: CALL 2099 0 1
 821: ST_TO_ADDR
// if StevensStatus = 1 then
 822: LD_EXP 28
 826: PUSH
 827: LD_INT 1
 829: EQUAL
 830: IFFALSE 889
// begin Stevens = PrepareUnitOmega ( Stevens ) ;
 832: LD_ADDR_EXP 1
 836: PUSH
 837: LD_STRING Stevens
 839: PPUSH
 840: CALL 2099 0 1
 844: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawn , false ) ;
 845: LD_EXP 1
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// ComTurnXY ( Stevens , 125 , 16 ) ;
 860: LD_EXP 1
 864: PPUSH
 865: LD_INT 125
 867: PPUSH
 868: LD_INT 16
 870: PPUSH
 871: CALL_OW 118
// SetClass ( Stevens , 4 ) ;
 875: LD_EXP 1
 879: PPUSH
 880: LD_INT 4
 882: PPUSH
 883: CALL_OW 336
// end else
 887: GO 955
// begin hc_name = Baker Smith ;
 889: LD_ADDR_OWVAR 26
 893: PUSH
 894: LD_STRING Baker Smith
 896: ST_TO_ADDR
// hc_gallery =  ;
 897: LD_ADDR_OWVAR 33
 901: PUSH
 902: LD_STRING 
 904: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
 905: LD_INT 1
 907: PPUSH
 908: LD_INT 10
 910: PPUSH
 911: CALL_OW 384
// Baker = CreateHuman ;
 915: LD_ADDR_EXP 2
 919: PUSH
 920: CALL_OW 44
 924: ST_TO_ADDR
// PlaceUnitArea ( Baker , StevensSpawn , false ) ;
 925: LD_EXP 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: LD_INT 0
 935: PPUSH
 936: CALL_OW 49
// ComTurnXY ( Baker , 125 , 16 ) ;
 940: LD_EXP 2
 944: PPUSH
 945: LD_INT 125
 947: PPUSH
 948: LD_INT 16
 950: PPUSH
 951: CALL_OW 118
// end ; Gordon = NewCharacter ( Gordon ) ;
 955: LD_ADDR_EXP 3
 959: PUSH
 960: LD_STRING Gordon
 962: PPUSH
 963: CALL_OW 25
 967: ST_TO_ADDR
// PlaceUnitArea ( Gordon , GordonSpawn , false ) ;
 968: LD_EXP 3
 972: PPUSH
 973: LD_INT 3
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// ComTurnXY ( Gordon , 125 , 16 ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_INT 125
 990: PPUSH
 991: LD_INT 16
 993: PPUSH
 994: CALL_OW 118
// hc_name = Peter McClain ;
 998: LD_ADDR_OWVAR 26
1002: PUSH
1003: LD_STRING Peter McClain
1005: ST_TO_ADDR
// hc_gallery =  ;
1006: LD_ADDR_OWVAR 33
1010: PUSH
1011: LD_STRING 
1013: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 10
1019: PPUSH
1020: CALL_OW 384
// Peter = CreateHuman ;
1024: LD_ADDR_EXP 4
1028: PUSH
1029: CALL_OW 44
1033: ST_TO_ADDR
// PlaceUnitArea ( Peter , PeterSpawn , false ) ;
1034: LD_EXP 4
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// ComTurnXY ( Peter , 125 , 16 ) ;
1049: LD_EXP 4
1053: PPUSH
1054: LD_INT 125
1056: PPUSH
1057: LD_INT 16
1059: PPUSH
1060: CALL_OW 118
// if TestCharacters ( 10c_DeltaDoctor ) = true then
1064: LD_STRING 10c_DeltaDoctor
1066: PPUSH
1067: CALL_OW 28
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1135
// begin DeltaDoctor = PrepareUnit ( 10c_DeltaDoctor , true ) ;
1077: LD_ADDR_EXP 5
1081: PUSH
1082: LD_STRING 10c_DeltaDoctor
1084: PPUSH
1085: LD_INT 1
1087: PPUSH
1088: CALL 2042 0 2
1092: ST_TO_ADDR
// PlaceUnitArea ( DeltaDoctor , DeltaSciSpawn , false ) ;
1093: LD_EXP 5
1097: PPUSH
1098: LD_INT 10
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// ComTurnXY ( DeltaDoctor , 125 , 16 ) ;
1108: LD_EXP 5
1112: PPUSH
1113: LD_INT 125
1115: PPUSH
1116: LD_INT 16
1118: PPUSH
1119: CALL_OW 118
// SetClass ( DeltaDoctor , 4 ) ;
1123: LD_EXP 5
1127: PPUSH
1128: LD_INT 4
1130: PPUSH
1131: CALL_OW 336
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
1135: LD_ADDR_EXP 19
1139: PUSH
1140: LD_STRING 13_other_survivors
1142: PPUSH
1143: CALL_OW 31
1147: ST_TO_ADDR
// for i in omegaHeroes do
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: LD_EXP 22
1157: PUSH
1158: FOR_IN
1159: IFFALSE 1301
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1161: LD_INT 22
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PUSH
1171: LD_INT 30
1173: PUSH
1174: LD_INT 32
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 58
1183: PUSH
1184: EMPTY
1185: LIST
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: PPUSH
1192: CALL_OW 69
1196: PUSH
1197: LD_INT 0
1199: GREATER
1200: IFFALSE 1265
// begin PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1202: LD_VAR 0 2
1206: PPUSH
1207: LD_INT 22
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 30
1219: PUSH
1220: LD_INT 32
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 58
1229: PUSH
1230: EMPTY
1231: LIST
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 69
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 52
// SetClass ( i , 1 ) ;
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_INT 1
1258: PPUSH
1259: CALL_OW 336
// end else
1263: GO 1299
// begin PlaceUnitArea ( i , [ AmericanSpawn1 , AmericanSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1265: LD_VAR 0 2
1269: PPUSH
1270: LD_INT 5
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 2
1285: PPUSH
1286: CALL_OW 12
1290: ARRAY
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// end ; end ;
1299: GO 1158
1301: POP
1302: POP
// if others13Omega >= 2 then
1303: LD_EXP 19
1307: PUSH
1308: LD_INT 2
1310: GREATEREQUAL
1311: IFFALSE 1515
// begin for i := 1 to others13Omega - 1 do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_EXP 19
1327: PUSH
1328: LD_INT 1
1330: MINUS
1331: PUSH
1332: FOR_TO
1333: IFFALSE 1513
// begin if GetSkill ( others13Omega [ i ] , 3 ) < GetSkill ( others13Omega [ i + 1 ] , 3 ) then
1335: LD_EXP 19
1339: PUSH
1340: LD_VAR 0 2
1344: ARRAY
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL_OW 259
1353: PUSH
1354: LD_EXP 19
1358: PUSH
1359: LD_VAR 0 2
1363: PUSH
1364: LD_INT 1
1366: PLUS
1367: ARRAY
1368: PPUSH
1369: LD_INT 3
1371: PPUSH
1372: CALL_OW 259
1376: LESS
1377: IFFALSE 1511
// begin mecha = others13Omega [ i + 1 ] ;
1379: LD_ADDR_VAR 0 6
1383: PUSH
1384: LD_EXP 19
1388: PUSH
1389: LD_VAR 0 2
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ARRAY
1398: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1399: LD_VAR 0 6
1403: PPUSH
1404: LD_INT 3
1406: PPUSH
1407: CALL_OW 336
// PlaceHumanInUnit ( mecha , AmControlTow ) ;
1411: LD_VAR 0 6
1415: PPUSH
1416: LD_INT 148
1418: PPUSH
1419: CALL_OW 52
// others13Omega = others13Omega diff mecha ;
1423: LD_ADDR_EXP 19
1427: PUSH
1428: LD_EXP 19
1432: PUSH
1433: LD_VAR 0 6
1437: DIFF
1438: ST_TO_ADDR
// for i in FilterUnitsInArea ( AmericanBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
1439: LD_ADDR_VAR 0 2
1443: PUSH
1444: LD_INT 1
1446: PPUSH
1447: LD_INT 22
1449: PUSH
1450: LD_INT 1
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 21
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 3
1469: PUSH
1470: LD_INT 61
1472: PUSH
1473: EMPTY
1474: LIST
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: PPUSH
1485: CALL_OW 70
1489: PUSH
1490: FOR_IN
1491: IFFALSE 1509
// ComLinkTo ( i , mecha ) ;
1493: LD_VAR 0 2
1497: PPUSH
1498: LD_VAR 0 6
1502: PPUSH
1503: CALL_OW 135
1507: GO 1490
1509: POP
1510: POP
// end ; end ;
1511: GO 1332
1513: POP
1514: POP
// end ; if others13Omega > 0 then
1515: LD_EXP 19
1519: PUSH
1520: LD_INT 0
1522: GREATER
1523: IFFALSE 1862
// begin for i = 1 to others13Omega do
1525: LD_ADDR_VAR 0 2
1529: PUSH
1530: DOUBLE
1531: LD_INT 1
1533: DEC
1534: ST_TO_ADDR
1535: LD_EXP 19
1539: PUSH
1540: FOR_TO
1541: IFFALSE 1860
// begin randBuild = [ AmLab1 , AmLab2 , AmLab3 , AmFab1 , AmFab2 , AmBar1 , AmBar2 ] [ Rand ( 1 , 7 ) ] ;
1543: LD_ADDR_VAR 0 8
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 43
1553: PUSH
1554: LD_INT 66
1556: PUSH
1557: LD_INT 51
1559: PUSH
1560: LD_INT 60
1562: PUSH
1563: LD_INT 31
1565: PUSH
1566: LD_INT 69
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 1
1580: PPUSH
1581: LD_INT 7
1583: PPUSH
1584: CALL_OW 12
1588: ARRAY
1589: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1590: LD_INT 22
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 30
1602: PUSH
1603: LD_INT 32
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 58
1612: PUSH
1613: EMPTY
1614: LIST
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: PPUSH
1621: CALL_OW 69
1625: PUSH
1626: LD_INT 0
1628: GREATER
1629: IFFALSE 1706
// begin PlaceHumanInUnit ( others13Omega [ i ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1631: LD_EXP 19
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PPUSH
1642: LD_INT 22
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 30
1654: PUSH
1655: LD_INT 32
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 58
1664: PUSH
1665: EMPTY
1666: LIST
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PPUSH
1682: CALL_OW 52
// SetClass ( others13Omega [ i ] , 1 ) ;
1686: LD_EXP 19
1690: PUSH
1691: LD_VAR 0 2
1695: ARRAY
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 336
// end else
1704: GO 1858
// begin PlaceHumanInUnit ( others13Omega [ i ] , randBuild ) ;
1706: LD_EXP 19
1710: PUSH
1711: LD_VAR 0 2
1715: ARRAY
1716: PPUSH
1717: LD_VAR 0 8
1721: PPUSH
1722: CALL_OW 52
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_factory then
1726: LD_EXP 19
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PPUSH
1737: CALL_OW 310
1741: PPUSH
1742: CALL_OW 266
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: IFFALSE 1770
// SetClass ( others13Omega [ i ] , 3 ) ;
1752: LD_EXP 19
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = 4 then
1770: LD_EXP 19
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: CALL_OW 310
1785: PPUSH
1786: CALL_OW 266
1790: PUSH
1791: LD_INT 4
1793: EQUAL
1794: IFFALSE 1814
// SetClass ( others13Omega [ i ] , 1 ) ;
1796: LD_EXP 19
1800: PUSH
1801: LD_VAR 0 2
1805: ARRAY
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_lab_full then
1814: LD_EXP 19
1818: PUSH
1819: LD_VAR 0 2
1823: ARRAY
1824: PPUSH
1825: CALL_OW 310
1829: PPUSH
1830: CALL_OW 266
1834: PUSH
1835: LD_INT 8
1837: EQUAL
1838: IFFALSE 1858
// SetClass ( others13Omega [ i ] , 1 ) ;
1840: LD_EXP 19
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 336
// end ; end ;
1858: GO 1540
1860: POP
1861: POP
// end ; end ; end_of_file
1862: LD_VAR 0 1
1866: RET
// export function PrepareFirstAtacks ; var i , veh ; begin
1867: LD_INT 0
1869: PPUSH
1870: PPUSH
1871: PPUSH
// for i := 1 to 10 do
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: DOUBLE
1878: LD_INT 1
1880: DEC
1881: ST_TO_ADDR
1882: LD_INT 10
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2035
// begin uc_side = 3 ;
1888: LD_ADDR_OWVAR 20
1892: PUSH
1893: LD_INT 3
1895: ST_TO_ADDR
// uc_nation = 3 ;
1896: LD_ADDR_OWVAR 21
1900: PUSH
1901: LD_INT 3
1903: ST_TO_ADDR
// vc_engine = 3 ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control = 3 ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 3
1919: ST_TO_ADDR
// vc_weapon = [ 46 , 44 , 45 , 47 ] [ Rand ( 1 , 4 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 46
1927: PUSH
1928: LD_INT 44
1930: PUSH
1931: LD_INT 45
1933: PUSH
1934: LD_INT 47
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 4
1948: PPUSH
1949: CALL_OW 12
1953: ARRAY
1954: ST_TO_ADDR
// vc_chassis = 24 ;
1955: LD_ADDR_OWVAR 37
1959: PUSH
1960: LD_INT 24
1962: ST_TO_ADDR
// veh = CreateVehicle ;
1963: LD_ADDR_VAR 0 3
1967: PUSH
1968: CALL_OW 45
1972: ST_TO_ADDR
// PlaceUnitArea ( veh , PreludiumAttack , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 7
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// ComAgressiveMove ( veh , 104 , 143 ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 104
1995: PPUSH
1996: LD_INT 143
1998: PPUSH
1999: CALL_OW 114
// AddComAgressiveMove ( veh , 114 , 136 ) ;
2003: LD_VAR 0 3
2007: PPUSH
2008: LD_INT 114
2010: PPUSH
2011: LD_INT 136
2013: PPUSH
2014: CALL_OW 174
// AddComAgressiveMove ( veh , 112 , 40 ) ;
2018: LD_VAR 0 3
2022: PPUSH
2023: LD_INT 112
2025: PPUSH
2026: LD_INT 40
2028: PPUSH
2029: CALL_OW 174
// end ;
2033: GO 1885
2035: POP
2036: POP
// end ; end_of_file end_of_file
2037: LD_VAR 0 1
2041: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
// if exist_mode then
2046: LD_VAR 0 2
2050: IFFALSE 2069
// unit := CreateCharacter ( ident ) else
2052: LD_ADDR_VAR 0 4
2056: PUSH
2057: LD_VAR 0 1
2061: PPUSH
2062: CALL_OW 34
2066: ST_TO_ADDR
2067: GO 2084
// unit := NewCharacter ( ident ) ;
2069: LD_ADDR_VAR 0 4
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 25
2083: ST_TO_ADDR
// result := unit ;
2084: LD_ADDR_VAR 0 3
2088: PUSH
2089: LD_VAR 0 4
2093: ST_TO_ADDR
// end ;
2094: LD_VAR 0 3
2098: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
2099: LD_INT 0
2101: PPUSH
2102: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
2103: LD_STRING 13f_
2105: PUSH
2106: LD_VAR 0 1
2110: STR
2111: PPUSH
2112: CALL_OW 28
2116: PUSH
2117: LD_INT 1
2119: EQUAL
2120: IFFALSE 2186
// begin unit = CreateCharacter ( 13f_ & ident ) ;
2122: LD_ADDR_VAR 0 3
2126: PUSH
2127: LD_STRING 13f_
2129: PUSH
2130: LD_VAR 0 1
2134: STR
2135: PPUSH
2136: CALL_OW 34
2140: ST_TO_ADDR
// omegaHeroes = omegaHeroes ^ unit ;
2141: LD_ADDR_EXP 22
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: LD_VAR 0 3
2155: ADD
2156: ST_TO_ADDR
// if not unit = Stevens then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_EXP 1
2166: EQUAL
2167: NOT
2168: IFFALSE 2186
// omegaHeroes = omegaHeroes ^ unit ;
2170: LD_ADDR_EXP 22
2174: PUSH
2175: LD_EXP 22
2179: PUSH
2180: LD_VAR 0 3
2184: ADD
2185: ST_TO_ADDR
// end ; result := unit ;
2186: LD_ADDR_VAR 0 2
2190: PUSH
2191: LD_VAR 0 3
2195: ST_TO_ADDR
// end ;
2196: LD_VAR 0 2
2200: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
2201: LD_INT 0
2203: PPUSH
2204: PPUSH
// for i in charactersList do
2205: LD_ADDR_VAR 0 4
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: FOR_IN
2216: IFFALSE 2245
// begin if IsOk ( i ) then
2218: LD_VAR 0 4
2222: PPUSH
2223: CALL_OW 302
2227: IFFALSE 2243
// SaveCharacters ( i , ident ) ;
2229: LD_VAR 0 4
2233: PPUSH
2234: LD_VAR 0 2
2238: PPUSH
2239: CALL_OW 38
// end ;
2243: GO 2215
2245: POP
2246: POP
// end ;
2247: LD_VAR 0 3
2251: RET
// export function TabLenght ( tab ) ; var i ; begin
2252: LD_INT 0
2254: PPUSH
2255: PPUSH
// for i = 1 to tab do
2256: LD_ADDR_VAR 0 3
2260: PUSH
2261: DOUBLE
2262: LD_INT 1
2264: DEC
2265: ST_TO_ADDR
2266: LD_VAR 0 1
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2286
// result = i ;
2274: LD_ADDR_VAR 0 2
2278: PUSH
2279: LD_VAR 0 3
2283: ST_TO_ADDR
2284: GO 2271
2286: POP
2287: POP
// end ;
2288: LD_VAR 0 2
2292: RET
// export function SetDifficulty ; begin
2293: LD_INT 0
2295: PPUSH
// if Difficulty = 1 then
2296: LD_OWVAR 67
2300: PUSH
2301: LD_INT 1
2303: EQUAL
2304: IFFALSE 2371
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2306: LD_INT 51
2308: PPUSH
2309: LD_INT 3
2311: PPUSH
2312: LD_INT 2
2314: PPUSH
2315: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2319: LD_INT 57
2321: PPUSH
2322: LD_INT 3
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2332: LD_INT 63
2334: PPUSH
2335: LD_INT 3
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2345: LD_INT 52
2347: PPUSH
2348: LD_INT 3
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2358: LD_INT 58
2360: PPUSH
2361: LD_INT 3
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 322
// end ; if Difficulty = 2 then
2371: LD_OWVAR 67
2375: PUSH
2376: LD_INT 2
2378: EQUAL
2379: IFFALSE 2472
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2381: LD_INT 51
2383: PPUSH
2384: LD_INT 3
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2394: LD_INT 57
2396: PPUSH
2397: LD_INT 3
2399: PPUSH
2400: LD_INT 2
2402: PPUSH
2403: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2407: LD_INT 63
2409: PPUSH
2410: LD_INT 3
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2420: LD_INT 52
2422: PPUSH
2423: LD_INT 3
2425: PPUSH
2426: LD_INT 2
2428: PPUSH
2429: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2433: LD_INT 58
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2446: LD_INT 64
2448: PPUSH
2449: LD_INT 3
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2459: LD_INT 59
2461: PPUSH
2462: LD_INT 3
2464: PPUSH
2465: LD_INT 2
2467: PPUSH
2468: CALL_OW 322
// end ; if Difficulty = 3 then
2472: LD_OWVAR 67
2476: PUSH
2477: LD_INT 3
2479: EQUAL
2480: IFFALSE 2599
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2482: LD_INT 51
2484: PPUSH
2485: LD_INT 3
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2495: LD_INT 57
2497: PPUSH
2498: LD_INT 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2508: LD_INT 63
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2521: LD_INT 52
2523: PPUSH
2524: LD_INT 3
2526: PPUSH
2527: LD_INT 2
2529: PPUSH
2530: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2534: LD_INT 58
2536: PPUSH
2537: LD_INT 3
2539: PPUSH
2540: LD_INT 2
2542: PPUSH
2543: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2547: LD_INT 64
2549: PPUSH
2550: LD_INT 3
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
2560: LD_INT 53
2562: PPUSH
2563: LD_INT 3
2565: PPUSH
2566: LD_INT 2
2568: PPUSH
2569: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2573: LD_INT 59
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 322
// SetTech ( tech_ST3 , 3 , state_researched ) ;
2586: LD_INT 65
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 2
2594: PPUSH
2595: CALL_OW 322
// end ; end ;
2599: LD_VAR 0 1
2603: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
2608: PPUSH
// characters := characters diff [ Stevens , Baker , Gordon , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Powell ] ;
2609: LD_ADDR_VAR 0 1
2613: PUSH
2614: LD_VAR 0 1
2618: PUSH
2619: LD_EXP 1
2623: PUSH
2624: LD_EXP 2
2628: PUSH
2629: LD_EXP 3
2633: PUSH
2634: LD_EXP 6
2638: PUSH
2639: LD_EXP 7
2643: PUSH
2644: LD_EXP 8
2648: PUSH
2649: LD_EXP 9
2653: PUSH
2654: LD_EXP 10
2658: PUSH
2659: LD_EXP 11
2663: PUSH
2664: LD_EXP 12
2668: PUSH
2669: LD_EXP 13
2673: PUSH
2674: LD_EXP 14
2678: PUSH
2679: LD_EXP 15
2683: PUSH
2684: LD_EXP 16
2688: PUSH
2689: LD_EXP 17
2693: PUSH
2694: LD_EXP 18
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: DIFF
2717: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
2718: LD_ADDR_VAR 0 6
2722: PUSH
2723: LD_INT 1
2725: PPUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 12
2735: ST_TO_ADDR
// for i = 1 to characters do
2736: LD_ADDR_VAR 0 5
2740: PUSH
2741: DOUBLE
2742: LD_INT 1
2744: DEC
2745: ST_TO_ADDR
2746: LD_VAR 0 1
2750: PUSH
2751: FOR_TO
2752: IFFALSE 2862
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 6
2763: EQUAL
2764: PUSH
2765: LD_VAR 0 1
2769: PUSH
2770: LD_VAR 0 5
2774: ARRAY
2775: PPUSH
2776: CALL_OW 258
2780: PUSH
2781: LD_INT 1
2783: EQUAL
2784: AND
2785: IFFALSE 2807
// Say ( characters [ i ] , dialogMID ) ;
2787: LD_VAR 0 1
2791: PUSH
2792: LD_VAR 0 5
2796: ARRAY
2797: PPUSH
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2807: LD_VAR 0 5
2811: PUSH
2812: LD_VAR 0 6
2816: EQUAL
2817: PUSH
2818: LD_VAR 0 1
2822: PUSH
2823: LD_VAR 0 5
2827: ARRAY
2828: PPUSH
2829: CALL_OW 258
2833: PUSH
2834: LD_INT 2
2836: EQUAL
2837: AND
2838: IFFALSE 2860
// Say ( characters [ i ] , dialogFID ) ;
2840: LD_VAR 0 1
2844: PUSH
2845: LD_VAR 0 5
2849: ARRAY
2850: PPUSH
2851: LD_VAR 0 3
2855: PPUSH
2856: CALL_OW 88
// end ;
2860: GO 2751
2862: POP
2863: POP
// end ;
2864: LD_VAR 0 4
2868: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
2873: PPUSH
2874: PPUSH
2875: PPUSH
2876: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
2877: LD_ADDR_VAR 0 6
2881: PUSH
2882: LD_INT 22
2884: PUSH
2885: LD_VAR 0 1
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 25
2896: PUSH
2897: LD_INT 9
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PPUSH
2908: CALL_OW 69
2912: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: LD_INT 81
2920: PUSH
2921: LD_VAR 0 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: LD_INT 21
2935: PUSH
2936: LD_INT 3
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PPUSH
2951: CALL_OW 69
2955: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: LD_INT 1
2963: PPUSH
2964: LD_INT 3
2966: PPUSH
2967: CALL_OW 12
2971: ST_TO_ADDR
// for i = 1 to list do
2972: LD_ADDR_VAR 0 5
2976: PUSH
2977: DOUBLE
2978: LD_INT 1
2980: DEC
2981: ST_TO_ADDR
2982: LD_VAR 0 6
2986: PUSH
2987: FOR_TO
2988: IFFALSE 3190
// for ta in filter do
2990: LD_ADDR_VAR 0 3
2994: PUSH
2995: LD_VAR 0 7
2999: PUSH
3000: FOR_IN
3001: IFFALSE 3186
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3003: LD_VAR 0 6
3007: PUSH
3008: LD_VAR 0 5
3012: ARRAY
3013: PPUSH
3014: LD_VAR 0 3
3018: PPUSH
3019: CALL_OW 296
3023: PUSH
3024: LD_INT 15
3026: LESSEQUAL
3027: IFFALSE 3184
// begin case c of 1 :
3029: LD_VAR 0 4
3033: PUSH
3034: LD_INT 1
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3080
3042: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3043: LD_VAR 0 6
3047: PUSH
3048: LD_VAR 0 5
3052: ARRAY
3053: PPUSH
3054: LD_VAR 0 3
3058: PPUSH
3059: CALL_OW 250
3063: PPUSH
3064: LD_VAR 0 3
3068: PPUSH
3069: CALL_OW 251
3073: PPUSH
3074: CALL_OW 154
3078: GO 3184
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3152
3088: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3089: LD_VAR 0 6
3093: PUSH
3094: LD_VAR 0 5
3098: ARRAY
3099: PPUSH
3100: LD_VAR 0 3
3104: PPUSH
3105: CALL_OW 250
3109: PUSH
3110: LD_INT 1
3112: NEG
3113: PPUSH
3114: LD_INT 1
3116: PPUSH
3117: CALL_OW 12
3121: PLUS
3122: PPUSH
3123: LD_VAR 0 3
3127: PPUSH
3128: CALL_OW 251
3132: PUSH
3133: LD_INT 1
3135: NEG
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: CALL_OW 12
3144: PLUS
3145: PPUSH
3146: CALL_OW 153
3150: GO 3184
3152: LD_INT 3
3154: DOUBLE
3155: EQUAL
3156: IFTRUE 3160
3158: GO 3183
3160: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3161: LD_VAR 0 6
3165: PUSH
3166: LD_VAR 0 5
3170: ARRAY
3171: PPUSH
3172: LD_VAR 0 3
3176: PPUSH
3177: CALL_OW 115
3181: GO 3184
3183: POP
// end ; end ;
3184: GO 3000
3186: POP
3187: POP
3188: GO 2987
3190: POP
3191: POP
// end ;
3192: LD_VAR 0 2
3196: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit , vehs ; begin
3197: LD_INT 0
3199: PPUSH
3200: PPUSH
3201: PPUSH
3202: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
3203: LD_INT 22
3205: PUSH
3206: LD_VAR 0 1
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 21
3217: PUSH
3218: LD_INT 2
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 34
3227: PUSH
3228: LD_INT 49
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: PPUSH
3240: CALL_OW 69
3244: PUSH
3245: LD_INT 0
3247: GREATER
3248: IFFALSE 3456
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
3250: LD_ADDR_VAR 0 5
3254: PUSH
3255: LD_INT 22
3257: PUSH
3258: LD_VAR 0 1
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 21
3269: PUSH
3270: LD_INT 2
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 34
3279: PUSH
3280: LD_INT 49
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 69
3296: ST_TO_ADDR
// wait ( 0 0$3 ) ;
3297: LD_INT 105
3299: PPUSH
3300: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: LD_VAR 0 5
3313: PPUSH
3314: LD_INT 3
3316: PUSH
3317: LD_INT 60
3319: PUSH
3320: EMPTY
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PPUSH
3327: CALL_OW 72
3331: PUSH
3332: FOR_IN
3333: IFFALSE 3444
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: LD_INT 81
3342: PUSH
3343: LD_VAR 0 1
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 101
3354: PUSH
3355: LD_INT 1
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: LD_INT 21
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 3
3377: PUSH
3378: LD_INT 58
3380: PUSH
3381: EMPTY
3382: LIST
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: PPUSH
3398: CALL_OW 69
3402: PPUSH
3403: LD_VAR 0 3
3407: PPUSH
3408: CALL_OW 74
3412: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3413: LD_VAR 0 3
3417: PPUSH
3418: LD_VAR 0 4
3422: PPUSH
3423: CALL_OW 250
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: CALL_OW 251
3437: PPUSH
3438: CALL_OW 111
// end ;
3442: GO 3332
3444: POP
3445: POP
// until vehs = 0 ;
3446: LD_VAR 0 5
3450: PUSH
3451: LD_INT 0
3453: EQUAL
3454: IFFALSE 3250
// end ;
3456: LD_VAR 0 2
3460: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
3461: LD_INT 0
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
// for i = 1 to medicCount do
3474: LD_ADDR_VAR 0 13
3478: PUSH
3479: DOUBLE
3480: LD_INT 1
3482: DEC
3483: ST_TO_ADDR
3484: LD_VAR 0 7
3488: PUSH
3489: FOR_TO
3490: IFFALSE 3572
// begin uc_side = side ;
3492: LD_ADDR_OWVAR 20
3496: PUSH
3497: LD_VAR 0 1
3501: ST_TO_ADDR
// uc_nation = nation ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_VAR 0 2
3511: ST_TO_ADDR
// hc_name =  ;
3512: LD_ADDR_OWVAR 26
3516: PUSH
3517: LD_STRING 
3519: ST_TO_ADDR
// hc_gallery =  ;
3520: LD_ADDR_OWVAR 33
3524: PUSH
3525: LD_STRING 
3527: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
3528: LD_INT 0
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_VAR 0 8
3538: PPUSH
3539: CALL_OW 380
// un = CreateHuman ;
3543: LD_ADDR_VAR 0 15
3547: PUSH
3548: CALL_OW 44
3552: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3553: LD_VAR 0 15
3557: PPUSH
3558: LD_VAR 0 9
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 49
// end ;
3570: GO 3489
3572: POP
3573: POP
// for i = 1 to soldierCount do
3574: LD_ADDR_VAR 0 13
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_VAR 0 3
3588: PUSH
3589: FOR_TO
3590: IFFALSE 3672
// begin uc_side = side ;
3592: LD_ADDR_OWVAR 20
3596: PUSH
3597: LD_VAR 0 1
3601: ST_TO_ADDR
// uc_nation = nation ;
3602: LD_ADDR_OWVAR 21
3606: PUSH
3607: LD_VAR 0 2
3611: ST_TO_ADDR
// hc_name =  ;
3612: LD_ADDR_OWVAR 26
3616: PUSH
3617: LD_STRING 
3619: ST_TO_ADDR
// hc_gallery =  ;
3620: LD_ADDR_OWVAR 33
3624: PUSH
3625: LD_STRING 
3627: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
3628: LD_INT 0
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_VAR 0 8
3638: PPUSH
3639: CALL_OW 380
// un = CreateHuman ;
3643: LD_ADDR_VAR 0 15
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3653: LD_VAR 0 15
3657: PPUSH
3658: LD_VAR 0 9
3662: PPUSH
3663: LD_INT 0
3665: PPUSH
3666: CALL_OW 49
// end ;
3670: GO 3589
3672: POP
3673: POP
// for i = 1 to sniperCount do
3674: LD_ADDR_VAR 0 13
3678: PUSH
3679: DOUBLE
3680: LD_INT 1
3682: DEC
3683: ST_TO_ADDR
3684: LD_VAR 0 4
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3772
// begin uc_side = side ;
3692: LD_ADDR_OWVAR 20
3696: PUSH
3697: LD_VAR 0 1
3701: ST_TO_ADDR
// uc_nation = nation ;
3702: LD_ADDR_OWVAR 21
3706: PUSH
3707: LD_VAR 0 2
3711: ST_TO_ADDR
// hc_name =  ;
3712: LD_ADDR_OWVAR 26
3716: PUSH
3717: LD_STRING 
3719: ST_TO_ADDR
// hc_gallery =  ;
3720: LD_ADDR_OWVAR 33
3724: PUSH
3725: LD_STRING 
3727: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 5
3733: PPUSH
3734: LD_VAR 0 8
3738: PPUSH
3739: CALL_OW 380
// un = CreateHuman ;
3743: LD_ADDR_VAR 0 15
3747: PUSH
3748: CALL_OW 44
3752: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3753: LD_VAR 0 15
3757: PPUSH
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: CALL_OW 49
// end ;
3770: GO 3689
3772: POP
3773: POP
// for i = 1 to bazookCount do
3774: LD_ADDR_VAR 0 13
3778: PUSH
3779: DOUBLE
3780: LD_INT 1
3782: DEC
3783: ST_TO_ADDR
3784: LD_VAR 0 5
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3872
// begin uc_side = side ;
3792: LD_ADDR_OWVAR 20
3796: PUSH
3797: LD_VAR 0 1
3801: ST_TO_ADDR
// uc_nation = nation ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_VAR 0 2
3811: ST_TO_ADDR
// hc_name =  ;
3812: LD_ADDR_OWVAR 26
3816: PUSH
3817: LD_STRING 
3819: ST_TO_ADDR
// hc_gallery =  ;
3820: LD_ADDR_OWVAR 33
3824: PUSH
3825: LD_STRING 
3827: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
3828: LD_INT 0
3830: PPUSH
3831: LD_INT 9
3833: PPUSH
3834: LD_VAR 0 8
3838: PPUSH
3839: CALL_OW 380
// un = CreateHuman ;
3843: LD_ADDR_VAR 0 15
3847: PUSH
3848: CALL_OW 44
3852: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3853: LD_VAR 0 15
3857: PPUSH
3858: LD_VAR 0 9
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
// end ;
3870: GO 3789
3872: POP
3873: POP
// for i = 1 to mortalCount do
3874: LD_ADDR_VAR 0 13
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_VAR 0 6
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3972
// begin uc_side = side ;
3892: LD_ADDR_OWVAR 20
3896: PUSH
3897: LD_VAR 0 1
3901: ST_TO_ADDR
// uc_nation = nation ;
3902: LD_ADDR_OWVAR 21
3906: PUSH
3907: LD_VAR 0 2
3911: ST_TO_ADDR
// hc_name =  ;
3912: LD_ADDR_OWVAR 26
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// hc_gallery =  ;
3920: LD_ADDR_OWVAR 33
3924: PUSH
3925: LD_STRING 
3927: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
3928: LD_INT 0
3930: PPUSH
3931: LD_INT 8
3933: PPUSH
3934: LD_VAR 0 8
3938: PPUSH
3939: CALL_OW 380
// un = CreateHuman ;
3943: LD_ADDR_VAR 0 15
3947: PUSH
3948: CALL_OW 44
3952: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3953: LD_VAR 0 15
3957: PPUSH
3958: LD_VAR 0 9
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 49
// end ;
3970: GO 3889
3972: POP
3973: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
3974: LD_ADDR_VAR 0 17
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: LD_VAR 0 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 25
3993: PUSH
3994: LD_INT 4
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: ST_TO_ADDR
// for i in medic_list do
4010: LD_ADDR_VAR 0 13
4014: PUSH
4015: LD_VAR 0 17
4019: PUSH
4020: FOR_IN
4021: IFFALSE 4039
// ComMoveToArea ( i , healArea ) ;
4023: LD_VAR 0 13
4027: PPUSH
4028: LD_VAR 0 10
4032: PPUSH
4033: CALL_OW 113
4037: GO 4020
4039: POP
4040: POP
// repeat wait ( 0 0$1 ) ;
4041: LD_INT 35
4043: PPUSH
4044: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
4048: LD_ADDR_VAR 0 16
4052: PUSH
4053: LD_INT 22
4055: PUSH
4056: LD_VAR 0 1
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: LD_INT 24
4073: PUSH
4074: LD_INT 550
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 24
4087: PUSH
4088: LD_INT 250
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
4109: LD_ADDR_VAR 0 18
4113: PUSH
4114: LD_INT 22
4116: PUSH
4117: LD_VAR 0 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: LD_INT 25
4131: PUSH
4132: LD_INT 1
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 25
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 8
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 25
4161: PUSH
4162: LD_INT 9
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 24
4178: PUSH
4179: LD_INT 1000
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: PPUSH
4191: CALL_OW 69
4195: ST_TO_ADDR
// if medicCount > 0 then
4196: LD_VAR 0 7
4200: PUSH
4201: LD_INT 0
4203: GREATER
4204: IFFALSE 4278
// begin if damageUnit_list > 0 then
4206: LD_VAR 0 16
4210: PUSH
4211: LD_INT 0
4213: GREATER
4214: IFFALSE 4278
// begin for i in damageUnit_list do
4216: LD_ADDR_VAR 0 13
4220: PUSH
4221: LD_VAR 0 16
4225: PUSH
4226: FOR_IN
4227: IFFALSE 4276
// begin ComMoveToArea ( i , healArea ) ;
4229: LD_VAR 0 13
4233: PPUSH
4234: LD_VAR 0 10
4238: PPUSH
4239: CALL_OW 113
// for j in medic_list do
4243: LD_ADDR_VAR 0 14
4247: PUSH
4248: LD_VAR 0 17
4252: PUSH
4253: FOR_IN
4254: IFFALSE 4272
// AddComHeal ( j , i ) ;
4256: LD_VAR 0 14
4260: PPUSH
4261: LD_VAR 0 13
4265: PPUSH
4266: CALL_OW 188
4270: GO 4253
4272: POP
4273: POP
// end ;
4274: GO 4226
4276: POP
4277: POP
// end ; end ; for i in soldiersOK_list do
4278: LD_ADDR_VAR 0 13
4282: PUSH
4283: LD_VAR 0 18
4287: PUSH
4288: FOR_IN
4289: IFFALSE 4465
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
4291: LD_ADDR_VAR 0 21
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_VAR 0 11
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PPUSH
4313: LD_VAR 0 13
4317: PPUSH
4318: CALL_OW 74
4322: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4323: LD_ADDR_VAR 0 22
4327: PUSH
4328: LD_INT 22
4330: PUSH
4331: LD_VAR 0 11
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: LD_INT 59
4345: PUSH
4346: EMPTY
4347: LIST
4348: PUSH
4349: LD_INT 21
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 21
4361: PUSH
4362: LD_INT 2
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PUSH
4379: EMPTY
4380: LIST
4381: PPUSH
4382: CALL_OW 69
4386: PPUSH
4387: LD_VAR 0 13
4391: PPUSH
4392: CALL_OW 74
4396: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4397: LD_VAR 0 13
4401: PPUSH
4402: LD_VAR 0 21
4406: PPUSH
4407: CALL_OW 296
4411: PUSH
4412: LD_INT 8
4414: PLUS
4415: PUSH
4416: LD_VAR 0 13
4420: PPUSH
4421: LD_VAR 0 22
4425: PPUSH
4426: CALL_OW 296
4430: LESS
4431: IFFALSE 4449
// begin ComAttackUnit ( i , target1 ) ;
4433: LD_VAR 0 13
4437: PPUSH
4438: LD_VAR 0 21
4442: PPUSH
4443: CALL_OW 115
// end else
4447: GO 4463
// begin ComAttackUnit ( i , target2 ) ;
4449: LD_VAR 0 13
4453: PPUSH
4454: LD_VAR 0 22
4458: PPUSH
4459: CALL_OW 115
// end ; end ;
4463: GO 4288
4465: POP
4466: POP
// until soldiersOK_list = [ ] ;
4467: LD_VAR 0 18
4471: PUSH
4472: EMPTY
4473: EQUAL
4474: IFFALSE 4041
// end ;
4476: LD_VAR 0 12
4480: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// amChassisTab = [ ] ;
4494: LD_ADDR_VAR 0 19
4498: PUSH
4499: EMPTY
4500: ST_TO_ADDR
// arChassisTab = [ ] ;
4501: LD_ADDR_VAR 0 18
4505: PUSH
4506: EMPTY
4507: ST_TO_ADDR
// ruChassisTab = [ ] ;
4508: LD_ADDR_VAR 0 17
4512: PUSH
4513: EMPTY
4514: ST_TO_ADDR
// for i = 1 to vehCount do
4515: LD_ADDR_VAR 0 13
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 5955
// begin wait ( 0 0$01 ) ;
4533: LD_INT 35
4535: PPUSH
4536: CALL_OW 67
// if nation = 1 then
4540: LD_VAR 0 5
4544: PUSH
4545: LD_INT 1
4547: EQUAL
4548: IFFALSE 5029
// begin uc_side = side ;
4550: LD_ADDR_OWVAR 20
4554: PUSH
4555: LD_VAR 0 2
4559: ST_TO_ADDR
// uc_nation = nation ;
4560: LD_ADDR_OWVAR 21
4564: PUSH
4565: LD_VAR 0 5
4569: ST_TO_ADDR
// vc_engine = vehengine ;
4570: LD_ADDR_OWVAR 39
4574: PUSH
4575: LD_VAR 0 6
4579: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4580: LD_ADDR_OWVAR 40
4584: PUSH
4585: LD_VAR 0 10
4589: PUSH
4590: LD_INT 1
4592: PPUSH
4593: LD_VAR 0 10
4597: PPUSH
4598: CALL_OW 12
4602: ARRAY
4603: ST_TO_ADDR
// for j = 1 to AMWeapon do
4604: LD_ADDR_VAR 0 14
4608: PUSH
4609: DOUBLE
4610: LD_INT 1
4612: DEC
4613: ST_TO_ADDR
4614: LD_VAR 0 10
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4921
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4622: LD_VAR 0 10
4626: PUSH
4627: LD_VAR 0 14
4631: ARRAY
4632: PUSH
4633: LD_INT 2
4635: EQUAL
4636: PUSH
4637: LD_VAR 0 10
4641: PUSH
4642: LD_VAR 0 14
4646: ARRAY
4647: PUSH
4648: LD_INT 3
4650: EQUAL
4651: OR
4652: IFFALSE 4705
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4654: LD_ADDR_VAR 0 19
4658: PUSH
4659: LD_INT 1
4661: PUSH
4662: LD_INT 2
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 5
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4681: LD_ADDR_OWVAR 37
4685: PUSH
4686: LD_VAR 0 19
4690: PUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_VAR 0 19
4698: PPUSH
4699: CALL_OW 12
4703: ARRAY
4704: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4705: LD_VAR 0 10
4709: PUSH
4710: LD_VAR 0 14
4714: ARRAY
4715: PUSH
4716: LD_INT 4
4718: EQUAL
4719: PUSH
4720: LD_VAR 0 10
4724: PUSH
4725: LD_VAR 0 14
4729: ARRAY
4730: PUSH
4731: LD_INT 5
4733: EQUAL
4734: OR
4735: PUSH
4736: LD_VAR 0 10
4740: PUSH
4741: LD_VAR 0 14
4745: ARRAY
4746: PUSH
4747: LD_INT 9
4749: EQUAL
4750: OR
4751: PUSH
4752: LD_VAR 0 10
4756: PUSH
4757: LD_VAR 0 14
4761: ARRAY
4762: PUSH
4763: LD_INT 11
4765: EQUAL
4766: OR
4767: PUSH
4768: LD_VAR 0 10
4772: PUSH
4773: LD_VAR 0 14
4777: ARRAY
4778: PUSH
4779: LD_INT 7
4781: EQUAL
4782: OR
4783: IFFALSE 4832
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4785: LD_ADDR_VAR 0 19
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 3
4795: PUSH
4796: LD_INT 4
4798: PUSH
4799: LD_INT 5
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4808: LD_ADDR_OWVAR 37
4812: PUSH
4813: LD_VAR 0 19
4817: PUSH
4818: LD_INT 1
4820: PPUSH
4821: LD_VAR 0 19
4825: PPUSH
4826: CALL_OW 12
4830: ARRAY
4831: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4832: LD_VAR 0 10
4836: PUSH
4837: LD_VAR 0 14
4841: ARRAY
4842: PUSH
4843: LD_INT 8
4845: EQUAL
4846: PUSH
4847: LD_VAR 0 10
4851: PUSH
4852: LD_VAR 0 14
4856: ARRAY
4857: PUSH
4858: LD_INT 6
4860: EQUAL
4861: OR
4862: PUSH
4863: LD_VAR 0 10
4867: PUSH
4868: LD_VAR 0 14
4872: ARRAY
4873: PUSH
4874: LD_INT 10
4876: EQUAL
4877: OR
4878: IFFALSE 4919
// begin amChassisTab = [ 4 , 5 ] ;
4880: LD_ADDR_VAR 0 19
4884: PUSH
4885: LD_INT 4
4887: PUSH
4888: LD_INT 5
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4895: LD_ADDR_OWVAR 37
4899: PUSH
4900: LD_VAR 0 19
4904: PUSH
4905: LD_INT 1
4907: PPUSH
4908: LD_VAR 0 19
4912: PPUSH
4913: CALL_OW 12
4917: ARRAY
4918: ST_TO_ADDR
// end ; end ;
4919: GO 4619
4921: POP
4922: POP
// veh = CreateVehicle ;
4923: LD_ADDR_VAR 0 16
4927: PUSH
4928: CALL_OW 45
4932: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4933: LD_VAR 0 16
4937: PPUSH
4938: LD_VAR 0 1
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// if vc_control = 1 then
4950: LD_OWVAR 38
4954: PUSH
4955: LD_INT 1
4957: EQUAL
4958: IFFALSE 5015
// begin hc_gallery =  ;
4960: LD_ADDR_OWVAR 33
4964: PUSH
4965: LD_STRING 
4967: ST_TO_ADDR
// hc_name =  ;
4968: LD_ADDR_OWVAR 26
4972: PUSH
4973: LD_STRING 
4975: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4976: LD_INT 0
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_VAR 0 4
4986: PPUSH
4987: CALL_OW 380
// un = CreateHuman ;
4991: LD_ADDR_VAR 0 15
4995: PUSH
4996: CALL_OW 44
5000: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5001: LD_VAR 0 15
5005: PPUSH
5006: LD_VAR 0 16
5010: PPUSH
5011: CALL_OW 52
// end ; i = i + 1 ;
5015: LD_ADDR_VAR 0 13
5019: PUSH
5020: LD_VAR 0 13
5024: PUSH
5025: LD_INT 1
5027: PLUS
5028: ST_TO_ADDR
// end ; if nation = 2 then
5029: LD_VAR 0 5
5033: PUSH
5034: LD_INT 2
5036: EQUAL
5037: IFFALSE 5539
// begin uc_side = side ;
5039: LD_ADDR_OWVAR 20
5043: PUSH
5044: LD_VAR 0 2
5048: ST_TO_ADDR
// uc_nation = nation ;
5049: LD_ADDR_OWVAR 21
5053: PUSH
5054: LD_VAR 0 5
5058: ST_TO_ADDR
// vc_engine = vehengine ;
5059: LD_ADDR_OWVAR 39
5063: PUSH
5064: LD_VAR 0 6
5068: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
5069: LD_INT 22
5071: PUSH
5072: LD_VAR 0 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 2
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: LD_INT 33
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 50
5103: PUSH
5104: EMPTY
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 69
5117: PUSH
5118: LD_INT 8
5120: LESSEQUAL
5121: IFFALSE 5149
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
5123: LD_ADDR_OWVAR 38
5127: PUSH
5128: LD_VAR 0 7
5132: PUSH
5133: LD_INT 1
5135: PPUSH
5136: LD_VAR 0 7
5140: PPUSH
5141: CALL_OW 12
5145: ARRAY
5146: ST_TO_ADDR
5147: GO 5157
// vc_control = control_apeman ;
5149: LD_ADDR_OWVAR 38
5153: PUSH
5154: LD_INT 5
5156: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
5157: LD_ADDR_OWVAR 40
5161: PUSH
5162: LD_VAR 0 9
5166: PUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_VAR 0 9
5174: PPUSH
5175: CALL_OW 12
5179: ARRAY
5180: ST_TO_ADDR
// for j = 1 to ARWeapons do
5181: LD_ADDR_VAR 0 14
5185: PUSH
5186: DOUBLE
5187: LD_INT 1
5189: DEC
5190: ST_TO_ADDR
5191: LD_VAR 0 9
5195: PUSH
5196: FOR_TO
5197: IFFALSE 5431
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
5199: LD_VAR 0 9
5203: PUSH
5204: LD_VAR 0 14
5208: ARRAY
5209: PUSH
5210: LD_INT 24
5212: EQUAL
5213: PUSH
5214: LD_VAR 0 9
5218: PUSH
5219: LD_VAR 0 14
5223: ARRAY
5224: PUSH
5225: LD_INT 22
5227: EQUAL
5228: OR
5229: PUSH
5230: LD_VAR 0 9
5234: PUSH
5235: LD_VAR 0 14
5239: ARRAY
5240: PUSH
5241: LD_INT 23
5243: EQUAL
5244: OR
5245: PUSH
5246: LD_VAR 0 9
5250: PUSH
5251: LD_VAR 0 14
5255: ARRAY
5256: PUSH
5257: LD_INT 30
5259: EQUAL
5260: OR
5261: IFFALSE 5310
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
5263: LD_ADDR_VAR 0 18
5267: PUSH
5268: LD_INT 11
5270: PUSH
5271: LD_INT 12
5273: PUSH
5274: LD_INT 13
5276: PUSH
5277: LD_INT 14
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5286: LD_ADDR_OWVAR 37
5290: PUSH
5291: LD_VAR 0 18
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_VAR 0 18
5303: PPUSH
5304: CALL_OW 12
5308: ARRAY
5309: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
5310: LD_VAR 0 9
5314: PUSH
5315: LD_VAR 0 14
5319: ARRAY
5320: PUSH
5321: LD_INT 29
5323: EQUAL
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: LD_VAR 0 14
5334: ARRAY
5335: PUSH
5336: LD_INT 28
5338: EQUAL
5339: OR
5340: PUSH
5341: LD_VAR 0 9
5345: PUSH
5346: LD_VAR 0 14
5350: ARRAY
5351: PUSH
5352: LD_INT 27
5354: EQUAL
5355: OR
5356: PUSH
5357: LD_VAR 0 9
5361: PUSH
5362: LD_VAR 0 14
5366: ARRAY
5367: PUSH
5368: LD_INT 26
5370: EQUAL
5371: OR
5372: PUSH
5373: LD_VAR 0 9
5377: PUSH
5378: LD_VAR 0 14
5382: ARRAY
5383: PUSH
5384: LD_INT 25
5386: EQUAL
5387: OR
5388: IFFALSE 5429
// begin arChassisTab = [ 13 , 14 ] ;
5390: LD_ADDR_VAR 0 18
5394: PUSH
5395: LD_INT 13
5397: PUSH
5398: LD_INT 14
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5405: LD_ADDR_OWVAR 37
5409: PUSH
5410: LD_VAR 0 18
5414: PUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 18
5422: PPUSH
5423: CALL_OW 12
5427: ARRAY
5428: ST_TO_ADDR
// end ; end ;
5429: GO 5196
5431: POP
5432: POP
// veh = CreateVehicle ;
5433: LD_ADDR_VAR 0 16
5437: PUSH
5438: CALL_OW 45
5442: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5443: LD_VAR 0 16
5447: PPUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: LD_INT 0
5455: PPUSH
5456: CALL_OW 49
// if vc_control = 1 then
5460: LD_OWVAR 38
5464: PUSH
5465: LD_INT 1
5467: EQUAL
5468: IFFALSE 5525
// begin hc_gallery =  ;
5470: LD_ADDR_OWVAR 33
5474: PUSH
5475: LD_STRING 
5477: ST_TO_ADDR
// hc_name =  ;
5478: LD_ADDR_OWVAR 26
5482: PUSH
5483: LD_STRING 
5485: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5486: LD_INT 0
5488: PPUSH
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 4
5496: PPUSH
5497: CALL_OW 380
// un = CreateHuman ;
5501: LD_ADDR_VAR 0 15
5505: PUSH
5506: CALL_OW 44
5510: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5511: LD_VAR 0 15
5515: PPUSH
5516: LD_VAR 0 16
5520: PPUSH
5521: CALL_OW 52
// end ; i = i + 1 ;
5525: LD_ADDR_VAR 0 13
5529: PUSH
5530: LD_VAR 0 13
5534: PUSH
5535: LD_INT 1
5537: PLUS
5538: ST_TO_ADDR
// end ; if nation = 3 then
5539: LD_VAR 0 5
5543: PUSH
5544: LD_INT 3
5546: EQUAL
5547: IFFALSE 5953
// begin uc_side = side ;
5549: LD_ADDR_OWVAR 20
5553: PUSH
5554: LD_VAR 0 2
5558: ST_TO_ADDR
// uc_nation = nation ;
5559: LD_ADDR_OWVAR 21
5563: PUSH
5564: LD_VAR 0 5
5568: ST_TO_ADDR
// vc_engine = vehengine ;
5569: LD_ADDR_OWVAR 39
5573: PUSH
5574: LD_VAR 0 6
5578: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
5579: LD_ADDR_OWVAR 38
5583: PUSH
5584: LD_VAR 0 7
5588: PUSH
5589: LD_INT 1
5591: PPUSH
5592: LD_VAR 0 7
5596: PPUSH
5597: CALL_OW 12
5601: ARRAY
5602: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5603: LD_ADDR_OWVAR 40
5607: PUSH
5608: LD_VAR 0 8
5612: PUSH
5613: LD_INT 1
5615: PPUSH
5616: LD_VAR 0 8
5620: PPUSH
5621: CALL_OW 12
5625: ARRAY
5626: ST_TO_ADDR
// for j = 1 to RuWeapons do
5627: LD_ADDR_VAR 0 14
5631: PUSH
5632: DOUBLE
5633: LD_INT 1
5635: DEC
5636: ST_TO_ADDR
5637: LD_VAR 0 8
5641: PUSH
5642: FOR_TO
5643: IFFALSE 5829
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5645: LD_VAR 0 8
5649: PUSH
5650: LD_VAR 0 14
5654: ARRAY
5655: PUSH
5656: LD_INT 42
5658: EQUAL
5659: PUSH
5660: LD_VAR 0 8
5664: PUSH
5665: LD_VAR 0 14
5669: ARRAY
5670: PUSH
5671: LD_INT 43
5673: EQUAL
5674: OR
5675: PUSH
5676: LD_VAR 0 8
5680: PUSH
5681: LD_VAR 0 14
5685: ARRAY
5686: PUSH
5687: LD_INT 44
5689: EQUAL
5690: OR
5691: PUSH
5692: LD_VAR 0 8
5696: PUSH
5697: LD_VAR 0 14
5701: ARRAY
5702: PUSH
5703: LD_INT 45
5705: EQUAL
5706: OR
5707: PUSH
5708: LD_VAR 0 8
5712: PUSH
5713: LD_VAR 0 14
5717: ARRAY
5718: PUSH
5719: LD_INT 49
5721: EQUAL
5722: OR
5723: IFFALSE 5760
// begin ruChassisTab = [ 24 ] ;
5725: LD_ADDR_VAR 0 17
5729: PUSH
5730: LD_INT 24
5732: PUSH
5733: EMPTY
5734: LIST
5735: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5736: LD_ADDR_OWVAR 37
5740: PUSH
5741: LD_VAR 0 17
5745: PUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_VAR 0 17
5753: PPUSH
5754: CALL_OW 12
5758: ARRAY
5759: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5760: LD_VAR 0 8
5764: PUSH
5765: LD_VAR 0 14
5769: ARRAY
5770: PUSH
5771: LD_INT 46
5773: EQUAL
5774: PUSH
5775: LD_VAR 0 8
5779: PUSH
5780: LD_VAR 0 14
5784: ARRAY
5785: PUSH
5786: LD_INT 47
5788: EQUAL
5789: OR
5790: IFFALSE 5827
// begin ruChassisTab = [ 24 ] ;
5792: LD_ADDR_VAR 0 17
5796: PUSH
5797: LD_INT 24
5799: PUSH
5800: EMPTY
5801: LIST
5802: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5803: LD_ADDR_OWVAR 37
5807: PUSH
5808: LD_VAR 0 17
5812: PUSH
5813: LD_INT 1
5815: PPUSH
5816: LD_VAR 0 17
5820: PPUSH
5821: CALL_OW 12
5825: ARRAY
5826: ST_TO_ADDR
// end ; end ;
5827: GO 5642
5829: POP
5830: POP
// veh = CreateVehicle ;
5831: LD_ADDR_VAR 0 16
5835: PUSH
5836: CALL_OW 45
5840: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5841: LD_VAR 0 16
5845: PPUSH
5846: LD_VAR 0 1
5850: PPUSH
5851: LD_INT 0
5853: PPUSH
5854: CALL_OW 49
// if vc_control = 1 then
5858: LD_OWVAR 38
5862: PUSH
5863: LD_INT 1
5865: EQUAL
5866: IFFALSE 5953
// begin if uc_side = 8 then
5868: LD_OWVAR 20
5872: PUSH
5873: LD_INT 8
5875: EQUAL
5876: IFFALSE 5888
// uc_nation = 2 else
5878: LD_ADDR_OWVAR 21
5882: PUSH
5883: LD_INT 2
5885: ST_TO_ADDR
5886: GO 5898
// uc_nation = nation ;
5888: LD_ADDR_OWVAR 21
5892: PUSH
5893: LD_VAR 0 5
5897: ST_TO_ADDR
// hc_gallery =  ;
5898: LD_ADDR_OWVAR 33
5902: PUSH
5903: LD_STRING 
5905: ST_TO_ADDR
// hc_name =  ;
5906: LD_ADDR_OWVAR 26
5910: PUSH
5911: LD_STRING 
5913: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5914: LD_INT 0
5916: PPUSH
5917: LD_INT 3
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 380
// un = CreateHuman ;
5929: LD_ADDR_VAR 0 15
5933: PUSH
5934: CALL_OW 44
5938: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5939: LD_VAR 0 15
5943: PPUSH
5944: LD_VAR 0 16
5948: PPUSH
5949: CALL_OW 52
// end ; end ; end ;
5953: GO 4530
5955: POP
5956: POP
// repeat wait ( 0 0$1 ) ;
5957: LD_INT 35
5959: PPUSH
5960: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
5964: LD_ADDR_VAR 0 20
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_VAR 0 2
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 21
5983: PUSH
5984: LD_INT 2
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 24
5993: PUSH
5994: LD_INT 250
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: PUSH
6011: LD_INT 22
6013: PUSH
6014: LD_VAR 0 2
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 34
6035: PUSH
6036: LD_INT 49
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PPUSH
6048: CALL_OW 69
6052: DIFF
6053: ST_TO_ADDR
// if vehicleOK_list > 0 then
6054: LD_VAR 0 20
6058: PUSH
6059: LD_INT 0
6061: GREATER
6062: IFFALSE 6253
// begin for i in vehicleOK_list do
6064: LD_ADDR_VAR 0 13
6068: PUSH
6069: LD_VAR 0 20
6073: PUSH
6074: FOR_IN
6075: IFFALSE 6251
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6077: LD_ADDR_VAR 0 21
6081: PUSH
6082: LD_INT 22
6084: PUSH
6085: LD_VAR 0 11
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: PPUSH
6099: LD_VAR 0 13
6103: PPUSH
6104: CALL_OW 74
6108: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6109: LD_ADDR_VAR 0 22
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_VAR 0 11
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 2
6128: PUSH
6129: LD_INT 59
6131: PUSH
6132: EMPTY
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: PPUSH
6168: CALL_OW 69
6172: PPUSH
6173: LD_VAR 0 13
6177: PPUSH
6178: CALL_OW 74
6182: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6183: LD_VAR 0 13
6187: PPUSH
6188: LD_VAR 0 21
6192: PPUSH
6193: CALL_OW 296
6197: PUSH
6198: LD_INT 8
6200: PLUS
6201: PUSH
6202: LD_VAR 0 13
6206: PPUSH
6207: LD_VAR 0 22
6211: PPUSH
6212: CALL_OW 296
6216: LESS
6217: IFFALSE 6235
// begin ComAttackUnit ( i , target1 ) ;
6219: LD_VAR 0 13
6223: PPUSH
6224: LD_VAR 0 21
6228: PPUSH
6229: CALL_OW 115
// end else
6233: GO 6249
// begin ComAttackUnit ( i , target2 ) ;
6235: LD_VAR 0 13
6239: PPUSH
6240: LD_VAR 0 22
6244: PPUSH
6245: CALL_OW 115
// end ; end ;
6249: GO 6074
6251: POP
6252: POP
// end ; until vehicleOK_list = 0 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: IFFALSE 5957
// end ; end_of_file
6263: LD_VAR 0 12
6267: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
6268: LD_VAR 0 1
6272: PUSH
6273: LD_INT 1
6275: EQUAL
6276: PUSH
6277: LD_VAR 0 2
6281: PUSH
6282: LD_INT 4
6284: EQUAL
6285: AND
6286: IFFALSE 6295
// YouLost ( sojusz ) ;
6288: LD_STRING sojusz
6290: PPUSH
6291: CALL_OW 104
// end ;
6295: PPOPN 2
6297: END
// on BuildingCaptured ( building , side , human ) do begin if side = 4 then
6298: LD_VAR 0 2
6302: PUSH
6303: LD_INT 4
6305: EQUAL
6306: IFFALSE 6320
// SetSide ( building , 4 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 4
6315: PPUSH
6316: CALL_OW 235
// end ;
6320: PPOPN 3
6322: END
// on UnitDestroyed ( unit ) do var i ;
6323: LD_INT 0
6325: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
6326: LD_VAR 0 1
6330: PPUSH
6331: CALL_OW 255
6335: PUSH
6336: LD_INT 1
6338: EQUAL
6339: PUSH
6340: LD_VAR 0 1
6344: PPUSH
6345: CALL_OW 247
6349: PUSH
6350: LD_INT 1
6352: EQUAL
6353: AND
6354: IFFALSE 6414
// begin unitLost = unitLost + 1 ;
6356: LD_ADDR_EXP 30
6360: PUSH
6361: LD_EXP 30
6365: PUSH
6366: LD_INT 1
6368: PLUS
6369: ST_TO_ADDR
// if unit = DeltaDoctor or unit = Gordon or unit = Peter then
6370: LD_VAR 0 1
6374: PUSH
6375: LD_EXP 5
6379: EQUAL
6380: PUSH
6381: LD_VAR 0 1
6385: PUSH
6386: LD_EXP 3
6390: EQUAL
6391: OR
6392: PUSH
6393: LD_VAR 0 1
6397: PUSH
6398: LD_EXP 4
6402: EQUAL
6403: OR
6404: IFFALSE 6414
// amSciStatus = 0 ;
6406: LD_ADDR_EXP 24
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// end ; end ;
6414: PPOPN 2
6416: END
// on SiberiteRocketExploded ( unit , x , y ) do var i ;
6417: LD_INT 0
6419: PPUSH
// begin if siberiteRocketStatus = 0 then
6420: LD_EXP 33
6424: PUSH
6425: LD_INT 0
6427: EQUAL
6428: IFFALSE 6493
// for i in FilterAllUnits ( [ [ f_side , 3 ] ] ) do
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: LD_INT 22
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: PUSH
6453: FOR_IN
6454: IFFALSE 6491
// if GetDistUnitXY ( i , x , y ) < 25 then
6456: LD_VAR 0 4
6460: PPUSH
6461: LD_VAR 0 2
6465: PPUSH
6466: LD_VAR 0 3
6470: PPUSH
6471: CALL_OW 297
6475: PUSH
6476: LD_INT 25
6478: LESS
6479: IFFALSE 6489
// siberiteRocketStatus = 1 ;
6481: LD_ADDR_EXP 33
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
6489: GO 6453
6491: POP
6492: POP
// end ; end_of_file
6493: PPOPN 4
6495: END
// every 1 do
6496: GO 6498
6498: DISABLE
// begin InGameOn ;
6499: CALL_OW 8
// SetClass ( Stevens , 4 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_INT 4
6510: PPUSH
6511: CALL_OW 336
// RevealFogArea ( 1 , AmericanBaseArea ) ;
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 332
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6525: LD_EXP 3
6529: PUSH
6530: LD_EXP 4
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PPUSH
6539: CALL_OW 87
// Say ( Peter , D1-Pet-1 ) ;
6543: LD_EXP 4
6547: PPUSH
6548: LD_STRING D1-Pet-1
6550: PPUSH
6551: CALL_OW 88
// if IsOK ( Stevens ) then
6555: LD_EXP 1
6559: PPUSH
6560: CALL_OW 302
6564: IFFALSE 6580
// Say ( Stevens , D1-Stev-1 ) else
6566: LD_EXP 1
6570: PPUSH
6571: LD_STRING D1-Stev-1
6573: PPUSH
6574: CALL_OW 88
6578: GO 6592
// Say ( Baker , D1-Stev-1 ) ;
6580: LD_EXP 2
6584: PPUSH
6585: LD_STRING D1-Stev-1
6587: PPUSH
6588: CALL_OW 88
// CenterOnXY ( 108 , 140 ) ;
6592: LD_INT 108
6594: PPUSH
6595: LD_INT 140
6597: PPUSH
6598: CALL_OW 84
// wait ( 0 0$2 ) ;
6602: LD_INT 70
6604: PPUSH
6605: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6609: LD_EXP 3
6613: PUSH
6614: LD_EXP 4
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 87
// SayRadio ( Powell , D1-Pow-1 ) ;
6627: LD_EXP 18
6631: PPUSH
6632: LD_STRING D1-Pow-1
6634: PPUSH
6635: CALL_OW 94
// if IsOK ( Stevens ) then
6639: LD_EXP 1
6643: PPUSH
6644: CALL_OW 302
6648: IFFALSE 6664
// Say ( Stevens , D1-Stev-2 ) else
6650: LD_EXP 1
6654: PPUSH
6655: LD_STRING D1-Stev-2
6657: PPUSH
6658: CALL_OW 88
6662: GO 6676
// Say ( Baker , D1-Stev-2 ) ;
6664: LD_EXP 2
6668: PPUSH
6669: LD_STRING D1-Stev-2
6671: PPUSH
6672: CALL_OW 88
// PrepareFirstAtacks ;
6676: CALL 1867 0 0
// CenterOnXY ( 108 , 140 ) ;
6680: LD_INT 108
6682: PPUSH
6683: LD_INT 140
6685: PPUSH
6686: CALL_OW 84
// wait ( 0 0$5 ) ;
6690: LD_INT 175
6692: PPUSH
6693: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D1-Rand-1 ,  ) ;
6697: LD_INT 22
6699: PUSH
6700: LD_INT 1
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 21
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 26
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 2
6729: PUSH
6730: LD_INT 25
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 25
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 25
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 25
6772: PUSH
6773: LD_INT 5
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 69
6798: PPUSH
6799: LD_STRING D1-Rand-1
6801: PPUSH
6802: LD_STRING 
6804: PPUSH
6805: CALL 2604 0 3
// wait ( 0 0$3 ) ;
6809: LD_INT 105
6811: PPUSH
6812: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6816: LD_EXP 3
6820: PUSH
6821: LD_EXP 4
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PPUSH
6830: CALL_OW 87
// Say ( Peter , D1-Pet-2 ) ;
6834: LD_EXP 4
6838: PPUSH
6839: LD_STRING D1-Pet-2
6841: PPUSH
6842: CALL_OW 88
// if IsOK ( Stevens ) then
6846: LD_EXP 1
6850: PPUSH
6851: CALL_OW 302
6855: IFFALSE 6871
// Say ( Stevens , D1-Stev-3 ) else
6857: LD_EXP 1
6861: PPUSH
6862: LD_STRING D1-Stev-3
6864: PPUSH
6865: CALL_OW 88
6869: GO 6883
// Say ( Baker , D1-Stev-3 ) ;
6871: LD_EXP 2
6875: PPUSH
6876: LD_STRING D1-Stev-3
6878: PPUSH
6879: CALL_OW 88
// Say ( Peter , D1-Pet-3 ) ;
6883: LD_EXP 4
6887: PPUSH
6888: LD_STRING D1-Pet-3
6890: PPUSH
6891: CALL_OW 88
// SetLives ( FilterUnitsInArea ( ObsBaseArea , [ f_side , 1 ] ) , 150 ) ;
6895: LD_INT 9
6897: PPUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 70
6912: PPUSH
6913: LD_INT 150
6915: PPUSH
6916: CALL_OW 234
// InGameOff ;
6920: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
6924: LD_STRING C1
6926: PPUSH
6927: CALL_OW 337
// if IsOk ( Stevens ) then
6931: LD_EXP 1
6935: PPUSH
6936: CALL_OW 302
6940: IFFALSE 6951
// ChangeMissionObjectives ( C1stev ) else
6942: LD_STRING C1stev
6944: PPUSH
6945: CALL_OW 337
6949: GO 6958
// ChangeMissionObjectives ( C1baker ) ;
6951: LD_STRING C1baker
6953: PPUSH
6954: CALL_OW 337
// end ;
6958: END
// every 0 0$20 trigger ruAttacksCounter = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
6959: LD_EXP 23
6963: PUSH
6964: LD_INT 3
6966: EQUAL
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: LD_INT 3
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: PUSH
6997: LD_INT 0
6999: EQUAL
7000: AND
7001: IFFALSE 7400
7003: GO 7005
7005: DISABLE
// begin DialogueOn ;
7006: CALL_OW 6
// if IsOk ( Peter ) then
7010: LD_EXP 4
7014: PPUSH
7015: CALL_OW 302
7019: IFFALSE 7035
// begin Say ( Peter , D2-Pet-2 ) ;
7021: LD_EXP 4
7025: PPUSH
7026: LD_STRING D2-Pet-2
7028: PPUSH
7029: CALL_OW 88
// end else
7033: GO 7172
// begin if IsOk ( DeltaDoctor ) then
7035: LD_EXP 5
7039: PPUSH
7040: CALL_OW 302
7044: IFFALSE 7060
// begin Say ( DeltaDoctor , D2-Pet-2 ) ;
7046: LD_EXP 5
7050: PPUSH
7051: LD_STRING D2-Pet-2
7053: PPUSH
7054: CALL_OW 88
// end else
7058: GO 7172
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-2 ,  ) ;
7060: LD_INT 22
7062: PUSH
7063: LD_INT 1
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 26
7082: PUSH
7083: LD_INT 1
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 25
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 4
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 25
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: PPUSH
7162: LD_STRING D2-Pet-2
7164: PPUSH
7165: LD_STRING 
7167: PPUSH
7168: CALL 2604 0 3
// end ; end ; if IsOK ( Stevens ) then
7172: LD_EXP 1
7176: PPUSH
7177: CALL_OW 302
7181: IFFALSE 7197
// Say ( Stevens , D2-Stev-2 ) else
7183: LD_EXP 1
7187: PPUSH
7188: LD_STRING D2-Stev-2
7190: PPUSH
7191: CALL_OW 88
7195: GO 7209
// Say ( Baker , D2-Stev-2 ) ;
7197: LD_EXP 2
7201: PPUSH
7202: LD_STRING D2-Stev-2
7204: PPUSH
7205: CALL_OW 88
// if IsOk ( Peter ) then
7209: LD_EXP 4
7213: PPUSH
7214: CALL_OW 302
7218: IFFALSE 7234
// begin Say ( Peter , D2-Pet-3 ) ;
7220: LD_EXP 4
7224: PPUSH
7225: LD_STRING D2-Pet-3
7227: PPUSH
7228: CALL_OW 88
// end else
7232: GO 7371
// begin if IsOk ( DeltaDoctor ) then
7234: LD_EXP 5
7238: PPUSH
7239: CALL_OW 302
7243: IFFALSE 7259
// begin Say ( DeltaDoctor , D2-Pet-3 ) ;
7245: LD_EXP 5
7249: PPUSH
7250: LD_STRING D2-Pet-3
7252: PPUSH
7253: CALL_OW 88
// end else
7257: GO 7371
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-3 ,  ) ;
7259: LD_INT 22
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 26
7281: PUSH
7282: LD_INT 1
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 25
7304: PUSH
7305: LD_INT 2
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 25
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 25
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 25
7334: PUSH
7335: LD_INT 5
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PPUSH
7361: LD_STRING D2-Pet-3
7363: PPUSH
7364: LD_STRING 
7366: PPUSH
7367: CALL 2604 0 3
// end ; end ; DialogueOff ;
7371: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
7375: LD_STRING C2
7377: PPUSH
7378: CALL_OW 337
// escapeAvalaible = 1 ;
7382: LD_ADDR_EXP 25
7386: PUSH
7387: LD_INT 1
7389: ST_TO_ADDR
// SetAreaMapShow ( EscapeArea , 1 ) ;
7390: LD_INT 11
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: CALL_OW 424
// end ;
7400: END
// every 0 0$1 trigger EscapeAvalaible = 1 do
7401: LD_EXP 25
7405: PUSH
7406: LD_INT 1
7408: EQUAL
7409: IFFALSE 7461
7411: GO 7413
7413: DISABLE
// begin enable ;
7414: ENABLE
// allUnitsLengh = TabLenght ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) ;
7415: LD_ADDR_EXP 31
7419: PUSH
7420: LD_INT 22
7422: PUSH
7423: LD_INT 1
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 21
7432: PUSH
7433: LD_INT 1
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 50
7442: PUSH
7443: EMPTY
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: PPUSH
7456: CALL 2252 0 1
7460: ST_TO_ADDR
// end ; end_of_file
7461: END
// every 0 0$1 trigger StevensStatus = 1 and IsDead ( Stevens ) do
7462: LD_EXP 28
7466: PUSH
7467: LD_INT 1
7469: EQUAL
7470: PUSH
7471: LD_EXP 1
7475: PPUSH
7476: CALL_OW 301
7480: AND
7481: IFFALSE 7493
7483: GO 7485
7485: DISABLE
// YouLost ( stevded ) ;
7486: LD_STRING stevded
7488: PPUSH
7489: CALL_OW 104
7493: END
// every 0 0$1 trigger not StevensStatus = 1 and IsDead ( Baker ) do
7494: LD_EXP 28
7498: PUSH
7499: LD_INT 1
7501: EQUAL
7502: NOT
7503: PUSH
7504: LD_EXP 2
7508: PPUSH
7509: CALL_OW 301
7513: AND
7514: IFFALSE 7526
7516: GO 7518
7518: DISABLE
// YouLost ( bakerded ) ;
7519: LD_STRING bakerded
7521: PPUSH
7522: CALL_OW 104
7526: END
// every 0 0$1 trigger IsDead ( amsiblab ) do
7527: LD_INT 1
7529: PPUSH
7530: CALL_OW 301
7534: IFFALSE 7546
7536: GO 7538
7538: DISABLE
// YouLost ( lab ) ; end_of_file
7539: LD_STRING lab
7541: PPUSH
7542: CALL_OW 104
7546: END
// every 10 10$0 do
7547: GO 7549
7549: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 10 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
7550: LD_INT 8
7552: PPUSH
7553: LD_INT 3
7555: PPUSH
7556: LD_INT 10
7558: PUSH
7559: LD_INT 11
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_OWVAR 67
7574: ARRAY
7575: PUSH
7576: LD_INT 5
7578: PPUSH
7579: LD_INT 10
7581: PPUSH
7582: CALL_OW 12
7586: PLUS
7587: PPUSH
7588: LD_INT 10
7590: PPUSH
7591: LD_INT 3
7593: PPUSH
7594: LD_INT 3
7596: PPUSH
7597: LD_INT 3
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_INT 44
7609: PUSH
7610: LD_INT 45
7612: PUSH
7613: LD_INT 46
7615: PUSH
7616: LD_INT 47
7618: PUSH
7619: LD_INT 49
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: PPUSH
7629: EMPTY
7630: PPUSH
7631: EMPTY
7632: PPUSH
7633: LD_INT 1
7635: PPUSH
7636: CALL 4481 0 11
// end ;
7640: END
// every 10 10$0 do
7641: GO 7643
7643: DISABLE
// begin ruAttacksCounter = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 5 , 5 , 6 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
7652: LD_INT 3
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: LD_INT 2
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: LD_INT 4
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: PUSH
7672: LD_OWVAR 67
7676: ARRAY
7677: PPUSH
7678: LD_INT 0
7680: PPUSH
7681: LD_INT 5
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 6
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_OWVAR 67
7699: ARRAY
7700: PPUSH
7701: LD_INT 0
7703: PPUSH
7704: LD_INT 0
7706: PPUSH
7707: LD_INT 6
7709: PUSH
7710: LD_INT 7
7712: PUSH
7713: LD_INT 8
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_OWVAR 67
7725: ARRAY
7726: PPUSH
7727: LD_INT 8
7729: PPUSH
7730: LD_INT 8
7732: PPUSH
7733: LD_INT 1
7735: PPUSH
7736: CALL 3461 0 11
// end ;
7740: END
// every 20 20$0 do
7741: GO 7743
7743: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 11 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
7744: LD_INT 8
7746: PPUSH
7747: LD_INT 3
7749: PPUSH
7750: LD_INT 11
7752: PUSH
7753: LD_INT 11
7755: PUSH
7756: LD_INT 12
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_OWVAR 67
7768: ARRAY
7769: PUSH
7770: LD_INT 5
7772: PPUSH
7773: LD_INT 10
7775: PPUSH
7776: CALL_OW 12
7780: PLUS
7781: PPUSH
7782: LD_INT 10
7784: PPUSH
7785: LD_INT 3
7787: PPUSH
7788: LD_INT 3
7790: PPUSH
7791: LD_INT 3
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PPUSH
7801: LD_INT 44
7803: PUSH
7804: LD_INT 45
7806: PUSH
7807: LD_INT 46
7809: PUSH
7810: LD_INT 47
7812: PUSH
7813: LD_INT 49
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: PPUSH
7823: EMPTY
7824: PPUSH
7825: EMPTY
7826: PPUSH
7827: LD_INT 1
7829: PPUSH
7830: CALL 4481 0 11
// end ;
7834: END
// every 20 20$0 do
7835: GO 7837
7837: DISABLE
// begin ruAttacksCounter = 2 ;
7838: LD_ADDR_EXP 23
7842: PUSH
7843: LD_INT 2
7845: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 6 , 7 , 7 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
7846: LD_INT 3
7848: PPUSH
7849: LD_INT 3
7851: PPUSH
7852: LD_INT 2
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: LD_INT 4
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: PPUSH
7872: LD_INT 0
7874: PPUSH
7875: LD_INT 6
7877: PUSH
7878: LD_INT 7
7880: PUSH
7881: LD_INT 7
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_OWVAR 67
7893: ARRAY
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: LD_INT 0
7900: PPUSH
7901: LD_INT 6
7903: PUSH
7904: LD_INT 7
7906: PUSH
7907: LD_INT 8
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: LD_OWVAR 67
7919: ARRAY
7920: PPUSH
7921: LD_INT 8
7923: PPUSH
7924: LD_INT 8
7926: PPUSH
7927: LD_INT 1
7929: PPUSH
7930: CALL 3461 0 11
// end ;
7934: END
// every 35 35$0 trigger BurlakStatus = 1 do
7935: LD_EXP 29
7939: PUSH
7940: LD_INT 1
7942: EQUAL
7943: IFFALSE 8038
7945: GO 7947
7947: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
7948: LD_INT 8
7950: PPUSH
7951: LD_INT 3
7953: PPUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_OWVAR 67
7972: ARRAY
7973: PUSH
7974: LD_INT 5
7976: PPUSH
7977: LD_INT 10
7979: PPUSH
7980: CALL_OW 12
7984: PLUS
7985: PPUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 3
7991: PPUSH
7992: LD_INT 3
7994: PPUSH
7995: LD_INT 3
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PPUSH
8005: LD_INT 44
8007: PUSH
8008: LD_INT 45
8010: PUSH
8011: LD_INT 46
8013: PUSH
8014: LD_INT 47
8016: PUSH
8017: LD_INT 49
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: PPUSH
8027: EMPTY
8028: PPUSH
8029: EMPTY
8030: PPUSH
8031: LD_INT 1
8033: PPUSH
8034: CALL 4481 0 11
// end ;
8038: END
// every 35 35$0 trigger BurlakStatus = 1 do
8039: LD_EXP 29
8043: PUSH
8044: LD_INT 1
8046: EQUAL
8047: IFFALSE 8148
8049: GO 8051
8051: DISABLE
// begin ruAttacksCounter = 3 ;
8052: LD_ADDR_EXP 23
8056: PUSH
8057: LD_INT 3
8059: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8060: LD_INT 3
8062: PPUSH
8063: LD_INT 3
8065: PPUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 3
8071: PUSH
8072: LD_INT 4
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_OWVAR 67
8084: ARRAY
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: LD_INT 7
8091: PUSH
8092: LD_INT 8
8094: PUSH
8095: LD_INT 9
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: PUSH
8103: LD_OWVAR 67
8107: ARRAY
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: LD_INT 0
8114: PPUSH
8115: LD_INT 6
8117: PUSH
8118: LD_INT 7
8120: PUSH
8121: LD_INT 8
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: LD_OWVAR 67
8133: ARRAY
8134: PPUSH
8135: LD_INT 8
8137: PPUSH
8138: LD_INT 8
8140: PPUSH
8141: LD_INT 1
8143: PPUSH
8144: CALL 3461 0 11
// end ;
8148: END
// every 45 45$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
8149: LD_EXP 23
8153: PUSH
8154: LD_INT 2
8156: EQUAL
8157: PUSH
8158: LD_EXP 29
8162: PUSH
8163: LD_INT 0
8165: EQUAL
8166: AND
8167: IFFALSE 8262
8169: GO 8171
8171: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8172: LD_INT 8
8174: PPUSH
8175: LD_INT 3
8177: PPUSH
8178: LD_INT 13
8180: PUSH
8181: LD_INT 14
8183: PUSH
8184: LD_INT 15
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: PUSH
8192: LD_OWVAR 67
8196: ARRAY
8197: PUSH
8198: LD_INT 5
8200: PPUSH
8201: LD_INT 10
8203: PPUSH
8204: CALL_OW 12
8208: PLUS
8209: PPUSH
8210: LD_INT 10
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: LD_INT 3
8218: PPUSH
8219: LD_INT 3
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: LD_INT 44
8231: PUSH
8232: LD_INT 45
8234: PUSH
8235: LD_INT 46
8237: PUSH
8238: LD_INT 47
8240: PUSH
8241: LD_INT 49
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: PPUSH
8251: EMPTY
8252: PPUSH
8253: EMPTY
8254: PPUSH
8255: LD_INT 1
8257: PPUSH
8258: CALL 4481 0 11
// end ;
8262: END
// every 45 45$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
8263: LD_EXP 23
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: PUSH
8272: LD_EXP 29
8276: PUSH
8277: LD_INT 0
8279: EQUAL
8280: AND
8281: IFFALSE 8382
8283: GO 8285
8285: DISABLE
// begin ruAttacksCounter = 3 ;
8286: LD_ADDR_EXP 23
8290: PUSH
8291: LD_INT 3
8293: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8294: LD_INT 3
8296: PPUSH
8297: LD_INT 3
8299: PPUSH
8300: LD_INT 6
8302: PUSH
8303: LD_INT 7
8305: PUSH
8306: LD_INT 8
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: LD_OWVAR 67
8318: ARRAY
8319: PPUSH
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 7
8325: PUSH
8326: LD_INT 8
8328: PUSH
8329: LD_INT 9
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: PUSH
8337: LD_OWVAR 67
8341: ARRAY
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: LD_INT 0
8348: PPUSH
8349: LD_INT 6
8351: PUSH
8352: LD_INT 7
8354: PUSH
8355: LD_INT 8
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: LD_OWVAR 67
8367: ARRAY
8368: PPUSH
8369: LD_INT 8
8371: PPUSH
8372: LD_INT 8
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL 3461 0 11
// end ;
8382: END
// every 35 35$0 trigger BurlakStatus = 0 do
8383: LD_EXP 29
8387: PUSH
8388: LD_INT 0
8390: EQUAL
8391: IFFALSE 8486
8393: GO 8395
8395: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8396: LD_INT 8
8398: PPUSH
8399: LD_INT 7
8401: PPUSH
8402: LD_INT 6
8404: PUSH
8405: LD_INT 7
8407: PUSH
8408: LD_INT 7
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: LIST
8415: PUSH
8416: LD_OWVAR 67
8420: ARRAY
8421: PUSH
8422: LD_INT 2
8424: PPUSH
8425: LD_INT 4
8427: PPUSH
8428: CALL_OW 12
8432: PLUS
8433: PPUSH
8434: LD_INT 10
8436: PPUSH
8437: LD_INT 3
8439: PPUSH
8440: LD_INT 3
8442: PPUSH
8443: LD_INT 3
8445: PUSH
8446: LD_INT 3
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PPUSH
8453: LD_INT 44
8455: PUSH
8456: LD_INT 45
8458: PUSH
8459: LD_INT 46
8461: PUSH
8462: LD_INT 47
8464: PUSH
8465: LD_INT 49
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PPUSH
8475: EMPTY
8476: PPUSH
8477: EMPTY
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL 4481 0 11
// end ;
8486: END
// every 35 35$0 trigger BurlakStatus = 0 do
8487: LD_EXP 29
8491: PUSH
8492: LD_INT 0
8494: EQUAL
8495: IFFALSE 8586
8497: GO 8499
8499: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ ] , [ ] , [ 10 , 9 , 7 , 6 ] , 1 ) ;
8500: LD_INT 8
8502: PPUSH
8503: LD_INT 7
8505: PPUSH
8506: LD_INT 6
8508: PUSH
8509: LD_INT 7
8511: PUSH
8512: LD_INT 7
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: LD_OWVAR 67
8524: ARRAY
8525: PUSH
8526: LD_INT 2
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 12
8536: PLUS
8537: PPUSH
8538: LD_INT 10
8540: PPUSH
8541: LD_INT 3
8543: PPUSH
8544: LD_INT 3
8546: PPUSH
8547: LD_INT 3
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: EMPTY
8558: PPUSH
8559: EMPTY
8560: PPUSH
8561: LD_INT 10
8563: PUSH
8564: LD_INT 9
8566: PUSH
8567: LD_INT 7
8569: PUSH
8570: LD_INT 6
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: CALL 4481 0 11
// end ;
8586: END
// every 35 35$0 trigger BurlakStatus = 0 do
8587: LD_EXP 29
8591: PUSH
8592: LD_INT 0
8594: EQUAL
8595: IFFALSE 8739
8597: GO 8599
8599: DISABLE
// begin uc_side = 7 ;
8600: LD_ADDR_OWVAR 20
8604: PUSH
8605: LD_INT 7
8607: ST_TO_ADDR
// uc_nation = 1 ;
8608: LD_ADDR_OWVAR 21
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// vc_engine = 3 ;
8616: LD_ADDR_OWVAR 39
8620: PUSH
8621: LD_INT 3
8623: ST_TO_ADDR
// vc_control = 1 ;
8624: LD_ADDR_OWVAR 38
8628: PUSH
8629: LD_INT 1
8631: ST_TO_ADDR
// vc_chassis = 24 ;
8632: LD_ADDR_OWVAR 37
8636: PUSH
8637: LD_INT 24
8639: ST_TO_ADDR
// vc_weapon = 46 ;
8640: LD_ADDR_OWVAR 40
8644: PUSH
8645: LD_INT 46
8647: ST_TO_ADDR
// burlakVeh = CreateVehicle ;
8648: LD_ADDR_EXP 21
8652: PUSH
8653: CALL_OW 45
8657: ST_TO_ADDR
// PlaceUnitArea ( burlakVeh , RussianAttackSpawn , false ) ;
8658: LD_EXP 21
8662: PPUSH
8663: LD_INT 8
8665: PPUSH
8666: LD_INT 0
8668: PPUSH
8669: CALL_OW 49
// Burlak = PrepareUnit ( Burlak , false ) ;
8673: LD_ADDR_EXP 20
8677: PUSH
8678: LD_STRING Burlak
8680: PPUSH
8681: LD_INT 0
8683: PPUSH
8684: CALL 2042 0 2
8688: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , burlakVeh ) ;
8689: LD_EXP 20
8693: PPUSH
8694: LD_EXP 21
8698: PPUSH
8699: CALL_OW 52
// SetMark ( burlakVeh , 1 ) ;
8703: LD_EXP 21
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: CALL_OW 242
// ComAgressiveMove ( [ Burlak , BurlakVeh ] , 117 , 39 ) ;
8715: LD_EXP 20
8719: PUSH
8720: LD_EXP 21
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PPUSH
8729: LD_INT 117
8731: PPUSH
8732: LD_INT 39
8734: PPUSH
8735: CALL_OW 114
// end ;
8739: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 and escapeAvalaible = 1 do
8740: LD_INT 22
8742: PUSH
8743: LD_INT 3
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 21
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 69
8768: PUSH
8769: LD_INT 0
8771: EQUAL
8772: PUSH
8773: LD_EXP 25
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: AND
8782: IFFALSE 8878
8784: GO 8786
8786: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 8 , 9 , 9 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: LD_INT 8
8795: PUSH
8796: LD_INT 9
8798: PUSH
8799: LD_INT 9
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: PUSH
8807: LD_OWVAR 67
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: PPUSH
8816: LD_INT 4
8818: PPUSH
8819: CALL_OW 12
8823: PLUS
8824: PPUSH
8825: LD_INT 10
8827: PPUSH
8828: LD_INT 3
8830: PPUSH
8831: LD_INT 3
8833: PPUSH
8834: LD_INT 3
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PPUSH
8844: LD_INT 44
8846: PUSH
8847: LD_INT 45
8849: PUSH
8850: LD_INT 46
8852: PUSH
8853: LD_INT 47
8855: PUSH
8856: LD_INT 49
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PPUSH
8866: EMPTY
8867: PPUSH
8868: EMPTY
8869: PPUSH
8870: LD_INT 1
8872: PPUSH
8873: CALL 4481 0 11
// enable ;
8877: ENABLE
// end ; end_of_file
8878: END
// every 0 0$1 do
8879: GO 8881
8881: DISABLE
// begin enable ;
8882: ENABLE
// TimeLapsersAI ( 3 ) ;
8883: LD_INT 3
8885: PPUSH
8886: CALL 3197 0 1
// IntBazooka ( 3 ) ;
8890: LD_INT 3
8892: PPUSH
8893: CALL 2869 0 1
// end ; end_of_file
8897: END
// every 0 0$1 trigger FilterUnitsExceptArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) = allUnitsLengh and EscapeAvalaible = 1 do var i , cargoType , yourVehicles ;
8898: LD_INT 11
8900: PPUSH
8901: LD_INT 22
8903: PUSH
8904: LD_INT 1
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 21
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PPUSH
8925: CALL_OW 71
8929: PUSH
8930: LD_INT 0
8932: EQUAL
8933: PUSH
8934: LD_INT 11
8936: PPUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 21
8949: PUSH
8950: LD_INT 2
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 33
8959: PUSH
8960: LD_INT 1
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 32
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: PPUSH
8983: CALL_OW 70
8987: PUSH
8988: LD_EXP 31
8992: EQUAL
8993: AND
8994: PUSH
8995: LD_EXP 25
8999: PUSH
9000: LD_INT 1
9002: EQUAL
9003: AND
9004: IFFALSE 10093
9006: GO 9008
9008: DISABLE
9009: LD_INT 0
9011: PPUSH
9012: PPUSH
9013: PPUSH
// begin if FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9014: LD_INT 11
9016: PPUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 2
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 33
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 3
9039: PUSH
9040: LD_INT 58
9042: PUSH
9043: EMPTY
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 70
9059: PUSH
9060: LD_INT 0
9062: GREATER
9063: IFFALSE 9331
// begin for i in FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
9065: LD_ADDR_VAR 0 1
9069: PUSH
9070: LD_INT 11
9072: PPUSH
9073: LD_INT 21
9075: PUSH
9076: LD_INT 2
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 33
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 3
9095: PUSH
9096: LD_INT 58
9098: PUSH
9099: EMPTY
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 70
9115: PUSH
9116: FOR_IN
9117: IFFALSE 9317
// begin cargoType = GetCargoType ( i ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: CALL_OW 288
9133: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 264
9143: PUSH
9144: LD_INT 12
9146: EQUAL
9147: IFFALSE 9244
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_VAR 0 3
9158: PUSH
9159: LD_VAR 0 1
9163: PPUSH
9164: CALL_OW 248
9168: PUSH
9169: LD_VAR 0 1
9173: PPUSH
9174: CALL_OW 265
9178: PUSH
9179: LD_VAR 0 1
9183: PPUSH
9184: CALL_OW 262
9188: PUSH
9189: LD_VAR 0 1
9193: PPUSH
9194: CALL_OW 263
9198: PUSH
9199: LD_VAR 0 1
9203: PPUSH
9204: CALL_OW 264
9208: PUSH
9209: LD_VAR 0 2
9213: PUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: CALL_OW 289
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: ADD
9241: ST_TO_ADDR
// end else
9242: GO 9315
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
9244: LD_ADDR_VAR 0 3
9248: PUSH
9249: LD_VAR 0 3
9253: PUSH
9254: LD_VAR 0 1
9258: PPUSH
9259: CALL_OW 248
9263: PUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 265
9273: PUSH
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 262
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 263
9293: PUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 264
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: ADD
9314: ST_TO_ADDR
// end ; end ;
9315: GO 9116
9317: POP
9318: POP
// SaveVariable ( yourVehicles , 15_Vehicles_1 ) ;
9319: LD_VAR 0 3
9323: PPUSH
9324: LD_STRING 15_Vehicles_1
9326: PPUSH
9327: CALL_OW 39
// end ; SaveCargos ;
9331: CALL 10096 0 0
// if siberiteRocketStatus = 1 then
9335: LD_EXP 33
9339: PUSH
9340: LD_INT 1
9342: EQUAL
9343: IFFALSE 9357
// AddMedal ( med1 , 1 ) else
9345: LD_STRING med1
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: CALL_OW 101
9355: GO 9368
// AddMedal ( med1 , - 1 ) ;
9357: LD_STRING med1
9359: PPUSH
9360: LD_INT 1
9362: NEG
9363: PPUSH
9364: CALL_OW 101
// if unitLost > 3 and unitLost < 5 then
9368: LD_EXP 30
9372: PUSH
9373: LD_INT 3
9375: GREATER
9376: PUSH
9377: LD_EXP 30
9381: PUSH
9382: LD_INT 5
9384: LESS
9385: AND
9386: IFFALSE 9400
// begin AddMedal ( med2 , 2 ) end else
9388: LD_STRING med2
9390: PPUSH
9391: LD_INT 2
9393: PPUSH
9394: CALL_OW 101
9398: GO 9433
// begin if unitLost > 5 then
9400: LD_EXP 30
9404: PUSH
9405: LD_INT 5
9407: GREATER
9408: IFFALSE 9423
// AddMedal ( med2 , - 1 ) else
9410: LD_STRING med2
9412: PPUSH
9413: LD_INT 1
9415: NEG
9416: PPUSH
9417: CALL_OW 101
9421: GO 9433
// AddMedal ( med2 , 1 ) ;
9423: LD_STRING med2
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: CALL_OW 101
// end ; if amSciStatus = 1 then
9433: LD_EXP 24
9437: PUSH
9438: LD_INT 1
9440: EQUAL
9441: IFFALSE 9455
// AddMedal ( med3 , 1 ) else
9443: LD_STRING med3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 101
9453: GO 9466
// AddMedal ( med3 , - 1 ) ;
9455: LD_STRING med3
9457: PPUSH
9458: LD_INT 1
9460: NEG
9461: PPUSH
9462: CALL_OW 101
// GiveMedals ( MAIN ) ;
9466: LD_STRING MAIN
9468: PPUSH
9469: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9473: LD_INT 50
9475: PUSH
9476: EMPTY
9477: LIST
9478: PUSH
9479: LD_INT 22
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: LD_INT 21
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: LD_INT 25
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 25
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 25
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 25
9534: PUSH
9535: LD_INT 4
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 25
9544: PUSH
9545: LD_INT 5
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 8
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 69
9581: PPUSH
9582: CALL_OW 43
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9586: LD_EXP 11
9590: PPUSH
9591: LD_EXP 32
9595: PUSH
9596: LD_STRING Brown
9598: STR
9599: PPUSH
9600: CALL 2201 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9604: LD_EXP 7
9608: PPUSH
9609: LD_EXP 32
9613: PUSH
9614: LD_STRING Donaldson
9616: STR
9617: PPUSH
9618: CALL 2201 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9622: LD_EXP 8
9626: PPUSH
9627: LD_EXP 32
9631: PUSH
9632: LD_STRING Bobby
9634: STR
9635: PPUSH
9636: CALL 2201 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9640: LD_EXP 9
9644: PPUSH
9645: LD_EXP 32
9649: PUSH
9650: LD_STRING Cyrus
9652: STR
9653: PPUSH
9654: CALL 2201 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9658: LD_EXP 6
9662: PPUSH
9663: LD_EXP 32
9667: PUSH
9668: LD_STRING Lisa
9670: STR
9671: PPUSH
9672: CALL 2201 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9676: LD_EXP 16
9680: PPUSH
9681: LD_EXP 32
9685: PUSH
9686: LD_STRING Frank
9688: STR
9689: PPUSH
9690: CALL 2201 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9694: LD_EXP 17
9698: PPUSH
9699: LD_EXP 32
9703: PUSH
9704: LD_STRING Kikuchi
9706: STR
9707: PPUSH
9708: CALL 2201 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9712: LD_EXP 13
9716: PPUSH
9717: LD_EXP 32
9721: PUSH
9722: LD_STRING Houten
9724: STR
9725: PPUSH
9726: CALL 2201 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9730: LD_EXP 15
9734: PPUSH
9735: LD_EXP 32
9739: PUSH
9740: LD_STRING Gary
9742: STR
9743: PPUSH
9744: CALL 2201 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
9748: LD_EXP 14
9752: PPUSH
9753: LD_EXP 32
9757: PUSH
9758: LD_STRING Cornell
9760: STR
9761: PPUSH
9762: CALL 2201 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9766: LD_EXP 10
9770: PPUSH
9771: LD_EXP 32
9775: PUSH
9776: LD_STRING Denis
9778: STR
9779: PPUSH
9780: CALL 2201 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9784: LD_EXP 12
9788: PPUSH
9789: LD_EXP 32
9793: PUSH
9794: LD_STRING Gladstone
9796: STR
9797: PPUSH
9798: CALL 2201 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9802: LD_EXP 1
9806: PPUSH
9807: LD_EXP 32
9811: PUSH
9812: LD_STRING Stevens
9814: STR
9815: PPUSH
9816: CALL 2201 0 2
// EnchancedSaveCharacters ( Baker , mission_prefix & Baker ) ;
9820: LD_EXP 2
9824: PPUSH
9825: LD_EXP 32
9829: PUSH
9830: LD_STRING Baker
9832: STR
9833: PPUSH
9834: CALL 2201 0 2
// EnchancedSaveCharacters ( Gordon , mission_prefix & Gordon ) ;
9838: LD_EXP 3
9842: PPUSH
9843: LD_EXP 32
9847: PUSH
9848: LD_STRING Gordon
9850: STR
9851: PPUSH
9852: CALL 2201 0 2
// EnchancedSaveCharacters ( Peter , mission_prefix & Peter ) ;
9856: LD_EXP 4
9860: PPUSH
9861: LD_EXP 32
9865: PUSH
9866: LD_STRING Peter
9868: STR
9869: PPUSH
9870: CALL 2201 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornell , Stevens , Baker , Gordon , Peter ] , 15_other_survivors ) ;
9874: LD_INT 50
9876: PUSH
9877: EMPTY
9878: LIST
9879: PUSH
9880: LD_INT 22
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 21
9892: PUSH
9893: LD_INT 1
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 2
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 25
9935: PUSH
9936: LD_INT 4
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 25
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 25
9955: PUSH
9956: LD_INT 8
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 69
9982: PUSH
9983: LD_EXP 11
9987: PUSH
9988: LD_EXP 7
9992: PUSH
9993: LD_EXP 8
9997: PUSH
9998: LD_EXP 9
10002: PUSH
10003: LD_EXP 6
10007: PUSH
10008: LD_EXP 16
10012: PUSH
10013: LD_EXP 12
10017: PUSH
10018: LD_EXP 17
10022: PUSH
10023: LD_EXP 10
10027: PUSH
10028: LD_EXP 13
10032: PUSH
10033: LD_EXP 15
10037: PUSH
10038: LD_EXP 14
10042: PUSH
10043: LD_EXP 1
10047: PUSH
10048: LD_EXP 2
10052: PUSH
10053: LD_EXP 3
10057: PUSH
10058: LD_EXP 4
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: DIFF
10081: PPUSH
10082: LD_STRING 15_other_survivors
10084: PPUSH
10085: CALL_OW 38
// YouWin ;
10089: CALL_OW 103
// end ;
10093: PPOPN 3
10095: END
// export function SaveCargos ; var i ; begin
10096: LD_INT 0
10098: PPUSH
10099: PPUSH
// for i in FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
10100: LD_ADDR_VAR 0 2
10104: PUSH
10105: LD_INT 11
10107: PPUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 33
10120: PUSH
10121: LD_INT 1
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 12
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 70
10147: PUSH
10148: FOR_IN
10149: IFFALSE 10177
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
10151: LD_ADDR_EXP 27
10155: PUSH
10156: LD_EXP 27
10160: PUSH
10161: LD_VAR 0 2
10165: PPUSH
10166: CALL 10196 0 1
10170: PUSH
10171: EMPTY
10172: LIST
10173: ADD
10174: ST_TO_ADDR
10175: GO 10148
10177: POP
10178: POP
// SaveVariable ( resources , 15_ResourcesInCargo_1 ) ;
10179: LD_EXP 27
10183: PPUSH
10184: LD_STRING 15_ResourcesInCargo_1
10186: PPUSH
10187: CALL_OW 39
// end ;
10191: LD_VAR 0 1
10195: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
10196: LD_INT 0
10198: PPUSH
10199: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
10200: LD_ADDR_VAR 0 2
10204: PUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 289
10217: PUSH
10218: LD_VAR 0 1
10222: PPUSH
10223: LD_INT 2
10225: PPUSH
10226: CALL_OW 289
10230: PUSH
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_INT 3
10238: PPUSH
10239: CALL_OW 289
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
// end ; end_of_file
10249: LD_VAR 0 2
10253: RET
// every 2 2$30 do
10254: GO 10256
10256: DISABLE
// begin enable ;
10257: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10258: LD_INT 3
10260: PPUSH
10261: LD_INT 5
10263: PPUSH
10264: CALL_OW 12
10268: PPUSH
10269: LD_INT 12
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 55
// end ;
10279: END
