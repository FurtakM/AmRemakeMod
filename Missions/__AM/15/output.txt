// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export amUnitsSkillTab , amUnitsAttack ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 26
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 27
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 28
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 29
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 30
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
  86: LD_ADDR_EXP 24
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// amUnitsAttack = [ ] ;
  93: LD_ADDR_EXP 25
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// debugMode = 1 ;
 100: LD_ADDR_EXP 31
 104: PUSH
 105: LD_INT 1
 107: ST_TO_ADDR
// PrepareHeroes ;
 108: CALL 460 0 0
// PrepareHeroesFromEpsilon ;
 112: CALL 982 0 0
// PrepareRandoms ;
 116: CALL 1326 0 0
// PrepareLegion ;
 120: CALL 2135 0 0
// PrepareRussians ;
 124: CALL 2395 0 0
// PrepareAlliance ;
 128: CALL 2699 0 0
// SetBName ( RuDep2 , zhukov ) ;
 132: LD_INT 23
 134: PPUSH
 135: LD_STRING zhukov
 137: PPUSH
 138: CALL_OW 500
// end ;
 142: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 143: LD_EXP 31
 147: PUSH
 148: LD_INT 1
 150: EQUAL
 151: IFFALSE 457
 153: GO 155
 155: DISABLE
 156: LD_INT 0
 158: PPUSH
// begin enable ;
 159: ENABLE
// fogoff ( true ) ;
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 167: LD_ADDR_VAR 0 1
 171: PUSH
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 21
 184: PUSH
 185: LD_INT 1
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: FOR_IN
 202: IFFALSE 218
// SetLives ( i , 1000 ) ;
 204: LD_VAR 0 1
 208: PPUSH
 209: LD_INT 1000
 211: PPUSH
 212: CALL_OW 234
 216: GO 201
 218: POP
 219: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 220: LD_ADDR_VAR 0 1
 224: PUSH
 225: LD_INT 22
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 30
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 30
 250: PUSH
 251: LD_INT 1
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: PPUSH
 267: CALL_OW 69
 271: PUSH
 272: FOR_IN
 273: IFFALSE 297
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 275: LD_VAR 0 1
 279: PPUSH
 280: CALL_OW 274
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 9999
 290: PPUSH
 291: CALL_OW 277
 295: GO 272
 297: POP
 298: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 0
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 30
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: PUSH
 351: FOR_IN
 352: IFFALSE 376
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 354: LD_VAR 0 1
 358: PPUSH
 359: CALL_OW 274
 363: PPUSH
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 9999
 369: PPUSH
 370: CALL_OW 277
 374: GO 351
 376: POP
 377: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 378: LD_ADDR_VAR 0 1
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 2
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: LD_INT 30
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PUSH
 430: FOR_IN
 431: IFFALSE 455
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 433: LD_VAR 0 1
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 3
 445: PPUSH
 446: LD_INT 9999
 448: PPUSH
 449: CALL_OW 277
 453: GO 430
 455: POP
 456: POP
// end ; end_of_file
 457: PPOPN 1
 459: END
// export function PrepareHeroes ; begin
 460: LD_INT 0
 462: PPUSH
// uc_side = 1 ;
 463: LD_ADDR_OWVAR 20
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// uc_nation = 1 ;
 471: LD_ADDR_OWVAR 21
 475: PUSH
 476: LD_INT 1
 478: ST_TO_ADDR
// if JMMVeh = [ ] then
 479: LD_EXP 26
 483: PUSH
 484: EMPTY
 485: EQUAL
 486: IFFALSE 532
// begin vc_engine = 3 ;
 488: LD_ADDR_OWVAR 39
 492: PUSH
 493: LD_INT 3
 495: ST_TO_ADDR
// vc_control = 1 ;
 496: LD_ADDR_OWVAR 38
 500: PUSH
 501: LD_INT 1
 503: ST_TO_ADDR
// vc_chassis = 5 ;
 504: LD_ADDR_OWVAR 37
 508: PUSH
 509: LD_INT 5
 511: ST_TO_ADDR
// vc_weapon = 9 ;
 512: LD_ADDR_OWVAR 40
 516: PUSH
 517: LD_INT 9
 519: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 520: LD_ADDR_EXP 19
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end else
 530: GO 614
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 532: LD_ADDR_OWVAR 37
 536: PUSH
 537: LD_EXP 26
 541: PUSH
 542: LD_INT 1
 544: ARRAY
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 550: LD_ADDR_OWVAR 39
 554: PUSH
 555: LD_EXP 26
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 568: LD_ADDR_OWVAR 38
 572: PUSH
 573: LD_EXP 26
 577: PUSH
 578: LD_INT 3
 580: ARRAY
 581: PUSH
 582: LD_INT 1
 584: ARRAY
 585: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 586: LD_ADDR_OWVAR 40
 590: PUSH
 591: LD_EXP 26
 595: PUSH
 596: LD_INT 4
 598: ARRAY
 599: PUSH
 600: LD_INT 1
 602: ARRAY
 603: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 604: LD_ADDR_EXP 19
 608: PUSH
 609: CALL_OW 45
 613: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 614: LD_EXP 27
 618: PUSH
 619: EMPTY
 620: EQUAL
 621: NOT
 622: IFFALSE 706
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 624: LD_ADDR_OWVAR 37
 628: PUSH
 629: LD_EXP 27
 633: PUSH
 634: LD_INT 1
 636: ARRAY
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 642: LD_ADDR_OWVAR 39
 646: PUSH
 647: LD_EXP 27
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PUSH
 656: LD_INT 1
 658: ARRAY
 659: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 660: LD_ADDR_OWVAR 38
 664: PUSH
 665: LD_EXP 27
 669: PUSH
 670: LD_INT 3
 672: ARRAY
 673: PUSH
 674: LD_INT 1
 676: ARRAY
 677: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 678: LD_ADDR_OWVAR 40
 682: PUSH
 683: LD_EXP 27
 687: PUSH
 688: LD_INT 4
 690: ARRAY
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 696: LD_ADDR_EXP 20
 700: PUSH
 701: CALL_OW 45
 705: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 706: LD_EXP 19
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 718: LD_EXP 20
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 730: LD_EXP 19
 734: PPUSH
 735: LD_INT 99
 737: PPUSH
 738: LD_INT 154
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 48
// if JMMGirlVeh then
 748: LD_EXP 27
 752: IFFALSE 772
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 754: LD_EXP 20
 758: PPUSH
 759: LD_INT 98
 761: PPUSH
 762: LD_INT 159
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 772: LD_ADDR_EXP 1
 776: PUSH
 777: LD_STRING 14_JMM
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: CALL 3065 0 2
 787: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 788: LD_EXP 1
 792: PPUSH
 793: LD_EXP 19
 797: PPUSH
 798: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 802: LD_EXP 27
 806: PUSH
 807: EMPTY
 808: EQUAL
 809: NOT
 810: IFFALSE 932
// begin if JMMGirl = 1 then
 812: LD_EXP 28
 816: PUSH
 817: LD_INT 1
 819: EQUAL
 820: IFFALSE 852
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 822: LD_ADDR_EXP 2
 826: PUSH
 827: LD_STRING 14_Joan
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: CALL 3065 0 2
 837: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 838: LD_EXP 2
 842: PPUSH
 843: LD_EXP 20
 847: PPUSH
 848: CALL_OW 52
// end ; if JMMGirl = 2 then
 852: LD_EXP 28
 856: PUSH
 857: LD_INT 2
 859: EQUAL
 860: IFFALSE 892
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 862: LD_ADDR_EXP 4
 866: PUSH
 867: LD_STRING 14_Lisa
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL 3065 0 2
 877: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 878: LD_EXP 4
 882: PPUSH
 883: LD_EXP 20
 887: PPUSH
 888: CALL_OW 52
// end ; if JMMGirl = 3 then
 892: LD_EXP 28
 896: PUSH
 897: LD_INT 3
 899: EQUAL
 900: IFFALSE 932
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 902: LD_ADDR_EXP 16
 906: PUSH
 907: LD_STRING 14_Connie
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 3065 0 2
 917: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
 918: LD_EXP 16
 922: PPUSH
 923: LD_EXP 20
 927: PPUSH
 928: CALL_OW 52
// end ; end ; uc_side = 4 ;
 932: LD_ADDR_OWVAR 20
 936: PUSH
 937: LD_INT 4
 939: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 940: LD_ADDR_EXP 17
 944: PUSH
 945: LD_STRING Powell
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL 3065 0 2
 955: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
 956: LD_EXP 17
 960: PPUSH
 961: LD_INT 47
 963: PPUSH
 964: LD_INT 63
 966: PPUSH
 967: LD_INT 5
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 50
// end ;
 977: LD_VAR 0 1
 981: RET
// export function PrepareHeroesFromEpsilon ; begin
 982: LD_INT 0
 984: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
 985: LD_ADDR_EXP 4
 989: PUSH
 990: LD_STRING Lisa
 992: PPUSH
 993: CALL 3122 0 1
 997: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
 998: LD_ADDR_EXP 5
1002: PUSH
1003: LD_STRING Donaldson
1005: PPUSH
1006: CALL 3122 0 1
1010: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1011: LD_ADDR_EXP 6
1015: PUSH
1016: LD_STRING Bobby
1018: PPUSH
1019: CALL 3122 0 1
1023: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1024: LD_ADDR_EXP 7
1028: PUSH
1029: LD_STRING Cyrus
1031: PPUSH
1032: CALL 3122 0 1
1036: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1037: LD_ADDR_EXP 8
1041: PUSH
1042: LD_STRING Denis
1044: PPUSH
1045: CALL 3122 0 1
1049: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1050: LD_ADDR_EXP 9
1054: PUSH
1055: LD_STRING Brown
1057: PPUSH
1058: CALL 3122 0 1
1062: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1063: LD_ADDR_EXP 10
1067: PUSH
1068: LD_STRING Gladstone
1070: PPUSH
1071: CALL 3122 0 1
1075: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1076: LD_ADDR_EXP 11
1080: PUSH
1081: LD_STRING Houten
1083: PPUSH
1084: CALL 3122 0 1
1088: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1089: LD_ADDR_EXP 12
1093: PUSH
1094: LD_STRING Cornel
1096: PPUSH
1097: CALL 3122 0 1
1101: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1102: LD_ADDR_EXP 13
1106: PUSH
1107: LD_STRING Gary
1109: PPUSH
1110: CALL 3122 0 1
1114: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1115: LD_ADDR_EXP 14
1119: PUSH
1120: LD_STRING Frank
1122: PPUSH
1123: CALL 3122 0 1
1127: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1128: LD_ADDR_EXP 15
1132: PUSH
1133: LD_STRING Kikuchi
1135: PPUSH
1136: CALL 3122 0 1
1140: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1141: LD_EXP 4
1145: PPUSH
1146: LD_INT 6
1148: PPUSH
1149: LD_INT 0
1151: PPUSH
1152: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1156: LD_EXP 5
1160: PPUSH
1161: LD_INT 6
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1171: LD_EXP 6
1175: PPUSH
1176: LD_INT 6
1178: PPUSH
1179: LD_INT 0
1181: PPUSH
1182: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1186: LD_EXP 7
1190: PPUSH
1191: LD_INT 6
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1201: LD_EXP 8
1205: PPUSH
1206: LD_INT 6
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1216: LD_EXP 9
1220: PPUSH
1221: LD_INT 6
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1231: LD_EXP 10
1235: PPUSH
1236: LD_INT 6
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1246: LD_EXP 11
1250: PPUSH
1251: LD_INT 6
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1261: LD_EXP 12
1265: PPUSH
1266: LD_INT 6
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1276: LD_EXP 13
1280: PPUSH
1281: LD_INT 6
1283: PPUSH
1284: LD_INT 0
1286: PPUSH
1287: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1291: LD_EXP 14
1295: PPUSH
1296: LD_INT 6
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1306: LD_EXP 15
1310: PPUSH
1311: LD_INT 6
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 49
// end ;
1321: LD_VAR 0 1
1325: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1326: LD_INT 0
1328: PPUSH
1329: PPUSH
1330: PPUSH
1331: PPUSH
1332: PPUSH
// uc_side = 4 ;
1333: LD_ADDR_OWVAR 20
1337: PUSH
1338: LD_INT 4
1340: ST_TO_ADDR
// uc_nation = 1 ;
1341: LD_ADDR_OWVAR 21
1345: PUSH
1346: LD_INT 1
1348: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1349: LD_ADDR_EXP 18
1353: PUSH
1354: LD_STRING 13s_others
1356: PPUSH
1357: CALL_OW 31
1361: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1362: LD_ADDR_VAR 0 4
1366: PUSH
1367: LD_INT 22
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 21
1379: PUSH
1380: LD_INT 1
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PPUSH
1391: CALL_OW 69
1395: PUSH
1396: LD_EXP 17
1400: PUSH
1401: EMPTY
1402: LIST
1403: DIFF
1404: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1405: LD_ADDR_VAR 0 5
1409: PUSH
1410: LD_VAR 0 4
1414: PPUSH
1415: CALL 3179 0 1
1419: ST_TO_ADDR
// if others13 >= 8 then
1420: LD_EXP 18
1424: PUSH
1425: LD_INT 8
1427: GREATEREQUAL
1428: IFFALSE 1491
// begin for i = 1 to 8 do
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: DOUBLE
1436: LD_INT 1
1438: DEC
1439: ST_TO_ADDR
1440: LD_INT 8
1442: PUSH
1443: FOR_TO
1444: IFFALSE 1487
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1446: LD_EXP 18
1450: PUSH
1451: LD_VAR 0 2
1455: ARRAY
1456: PPUSH
1457: LD_INT 6
1459: PPUSH
1460: LD_INT 0
1462: PPUSH
1463: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1467: LD_ADDR_EXP 18
1471: PUSH
1472: LD_EXP 18
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL_OW 3
1484: ST_TO_ADDR
// end ;
1485: GO 1443
1487: POP
1488: POP
// end else
1489: GO 1552
// begin for i = 1 to others13 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_EXP 18
1505: PUSH
1506: FOR_TO
1507: IFFALSE 1550
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1509: LD_EXP 18
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PPUSH
1520: LD_INT 6
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1530: LD_ADDR_EXP 18
1534: PUSH
1535: LD_EXP 18
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: CALL_OW 3
1547: ST_TO_ADDR
// end ;
1548: GO 1506
1550: POP
1551: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1552: LD_ADDR_VAR 0 4
1556: PUSH
1557: LD_INT 22
1559: PUSH
1560: LD_INT 4
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 21
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PPUSH
1581: CALL_OW 69
1585: PUSH
1586: LD_EXP 17
1590: PUSH
1591: EMPTY
1592: LIST
1593: DIFF
1594: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 4
1604: PPUSH
1605: CALL 3179 0 1
1609: ST_TO_ADDR
// if others13 >= heroLenght then
1610: LD_EXP 18
1614: PUSH
1615: LD_VAR 0 5
1619: GREATEREQUAL
1620: IFFALSE 1685
// begin for i = 1 to heroLenght do
1622: LD_ADDR_VAR 0 2
1626: PUSH
1627: DOUBLE
1628: LD_INT 1
1630: DEC
1631: ST_TO_ADDR
1632: LD_VAR 0 5
1636: PUSH
1637: FOR_TO
1638: IFFALSE 1681
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1640: LD_EXP 18
1644: PUSH
1645: LD_VAR 0 2
1649: ARRAY
1650: PPUSH
1651: LD_INT 6
1653: PPUSH
1654: LD_INT 0
1656: PPUSH
1657: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1661: LD_ADDR_EXP 18
1665: PUSH
1666: LD_EXP 18
1670: PPUSH
1671: LD_INT 1
1673: PPUSH
1674: CALL_OW 3
1678: ST_TO_ADDR
// end ;
1679: GO 1637
1681: POP
1682: POP
// end else
1683: GO 1746
// begin for i = 1 to others13 do
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_EXP 18
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1744
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1703: LD_EXP 18
1707: PUSH
1708: LD_VAR 0 2
1712: ARRAY
1713: PPUSH
1714: LD_INT 6
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1724: LD_ADDR_EXP 18
1728: PUSH
1729: LD_EXP 18
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: CALL_OW 3
1741: ST_TO_ADDR
// end ;
1742: GO 1700
1744: POP
1745: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1746: LD_ADDR_VAR 0 4
1750: PUSH
1751: LD_INT 22
1753: PUSH
1754: LD_INT 4
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 21
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: PUSH
1780: LD_EXP 17
1784: PUSH
1785: EMPTY
1786: LIST
1787: DIFF
1788: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1789: LD_ADDR_VAR 0 5
1793: PUSH
1794: LD_VAR 0 4
1798: PPUSH
1799: CALL 3179 0 1
1803: ST_TO_ADDR
// if heroLenght < 19 then
1804: LD_VAR 0 5
1808: PUSH
1809: LD_INT 19
1811: LESS
1812: IFFALSE 1910
// for i = 1 to 19 - heroLenght do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 19
1826: PUSH
1827: LD_VAR 0 5
1831: MINUS
1832: PUSH
1833: FOR_TO
1834: IFFALSE 1908
// begin hc_gallery =  ;
1836: LD_ADDR_OWVAR 33
1840: PUSH
1841: LD_STRING 
1843: ST_TO_ADDR
// hc_name =  ;
1844: LD_ADDR_OWVAR 26
1848: PUSH
1849: LD_STRING 
1851: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
1852: LD_INT 0
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: CALL_OW 12
1865: PPUSH
1866: LD_INT 6
1868: PPUSH
1869: LD_INT 8
1871: PPUSH
1872: CALL_OW 12
1876: PPUSH
1877: CALL_OW 380
// un = CreateHuman ;
1881: LD_ADDR_VAR 0 3
1885: PUSH
1886: CALL_OW 44
1890: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
1891: LD_VAR 0 3
1895: PPUSH
1896: LD_INT 6
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1833
1908: POP
1909: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1910: LD_ADDR_VAR 0 4
1914: PUSH
1915: LD_INT 22
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 21
1927: PUSH
1928: LD_INT 1
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PPUSH
1939: CALL_OW 69
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: EMPTY
1950: LIST
1951: DIFF
1952: ST_TO_ADDR
// amUnitsSkillTab = SortByDistanceXY ( tmp , true ) ;
1953: LD_ADDR_EXP 24
1957: PUSH
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL 3220 0 2
1970: ST_TO_ADDR
// amUnitsAttack = amUnitsAttack ^ [ [ amUnitsSkillTab [ 1 ] [ 1 ] ] , [ amUnitsSkillTab [ 2 ] [ 1 ] ] , [ amUnitsSkillTab [ 3 ] [ 1 ] ] , [ amUnitsSkillTab [ 4 ] [ 1 ] ] , [ amUnitsSkillTab [ 5 ] [ 1 ] ] , [ amUnitsSkillTab [ 6 ] [ 1 ] ] , [ amUnitsSkillTab [ 7 ] [ 1 ] ] , [ amUnitsSkillTab [ 8 ] [ 1 ] ] ] ;
1971: LD_ADDR_EXP 25
1975: PUSH
1976: LD_EXP 25
1980: PUSH
1981: LD_EXP 24
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PUSH
1994: EMPTY
1995: LIST
1996: PUSH
1997: LD_EXP 24
2001: PUSH
2002: LD_INT 2
2004: ARRAY
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PUSH
2010: EMPTY
2011: LIST
2012: PUSH
2013: LD_EXP 24
2017: PUSH
2018: LD_INT 3
2020: ARRAY
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: EMPTY
2027: LIST
2028: PUSH
2029: LD_EXP 24
2033: PUSH
2034: LD_INT 4
2036: ARRAY
2037: PUSH
2038: LD_INT 1
2040: ARRAY
2041: PUSH
2042: EMPTY
2043: LIST
2044: PUSH
2045: LD_EXP 24
2049: PUSH
2050: LD_INT 5
2052: ARRAY
2053: PUSH
2054: LD_INT 1
2056: ARRAY
2057: PUSH
2058: EMPTY
2059: LIST
2060: PUSH
2061: LD_EXP 24
2065: PUSH
2066: LD_INT 6
2068: ARRAY
2069: PUSH
2070: LD_INT 1
2072: ARRAY
2073: PUSH
2074: EMPTY
2075: LIST
2076: PUSH
2077: LD_EXP 24
2081: PUSH
2082: LD_INT 7
2084: ARRAY
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PUSH
2090: EMPTY
2091: LIST
2092: PUSH
2093: LD_EXP 24
2097: PUSH
2098: LD_INT 8
2100: ARRAY
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PUSH
2106: EMPTY
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: ADD
2119: ST_TO_ADDR
// display_strings = amUnitsAttack ;
2120: LD_ADDR_OWVAR 47
2124: PUSH
2125: LD_EXP 25
2129: ST_TO_ADDR
// end ; end_of_file
2130: LD_VAR 0 1
2134: RET
// export function PrepareLegion ; var i ; begin
2135: LD_INT 0
2137: PPUSH
2138: PPUSH
// uc_side = 8 ;
2139: LD_ADDR_OWVAR 20
2143: PUSH
2144: LD_INT 8
2146: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
2147: LD_ADDR_EXP 23
2151: PUSH
2152: LD_STRING Kurt
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: CALL 3065 0 2
2162: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
2163: LD_EXP 23
2167: PPUSH
2168: LD_INT 122
2170: PPUSH
2171: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
2175: LD_INT 8
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 122
2183: PPUSH
2184: LD_INT 10
2186: PPUSH
2187: LD_INT 2
2189: PPUSH
2190: LD_INT 4
2192: PPUSH
2193: CALL 3858 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
2197: LD_INT 8
2199: PPUSH
2200: LD_INT 2
2202: PPUSH
2203: LD_INT 99
2205: PPUSH
2206: LD_INT 10
2208: PPUSH
2209: LD_INT 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: CALL 3858 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
2219: LD_INT 8
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 104
2227: PPUSH
2228: LD_INT 10
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL 3858 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
2241: LD_INT 8
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 104
2249: PPUSH
2250: LD_INT 10
2252: PPUSH
2253: LD_INT 8
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL 3858 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
2263: LD_INT 8
2265: PPUSH
2266: LD_INT 2
2268: PPUSH
2269: LD_INT 118
2271: PPUSH
2272: LD_INT 10
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 1
2280: PPUSH
2281: CALL 3858 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
2285: LD_INT 8
2287: PPUSH
2288: LD_INT 2
2290: PPUSH
2291: LD_INT 117
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_INT 4
2302: PPUSH
2303: CALL 3858 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2307: LD_ADDR_VAR 0 2
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_INT 8
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 21
2324: PUSH
2325: LD_INT 3
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 32
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 58
2344: PUSH
2345: EMPTY
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: FOR_IN
2360: IFFALSE 2388
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
2362: LD_INT 8
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: LD_VAR 0 2
2372: PPUSH
2373: LD_INT 10
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 1
2381: PPUSH
2382: CALL 3858 0 6
2386: GO 2359
2388: POP
2389: POP
// end ; end_of_file
2390: LD_VAR 0 1
2394: RET
// export function PrepareRussians ; var i ; begin
2395: LD_INT 0
2397: PPUSH
2398: PPUSH
// uc_side = 3 ;
2399: LD_ADDR_OWVAR 20
2403: PUSH
2404: LD_INT 3
2406: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2407: LD_ADDR_EXP 21
2411: PUSH
2412: LD_STRING Platonov
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL 3065 0 2
2422: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
2423: LD_EXP 21
2427: PPUSH
2428: LD_INT 23
2430: PPUSH
2431: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
2435: LD_INT 3
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: LD_INT 26
2443: PPUSH
2444: LD_INT 10
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_INT 5
2452: PPUSH
2453: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
2457: LD_INT 3
2459: PPUSH
2460: LD_INT 3
2462: PPUSH
2463: LD_INT 26
2465: PPUSH
2466: LD_INT 10
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: LD_INT 6
2474: PPUSH
2475: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
2479: LD_INT 3
2481: PPUSH
2482: LD_INT 3
2484: PPUSH
2485: LD_INT 27
2487: PPUSH
2488: LD_INT 10
2490: PPUSH
2491: LD_INT 9
2493: PPUSH
2494: LD_INT 6
2496: PPUSH
2497: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
2501: LD_INT 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 27
2509: PPUSH
2510: LD_INT 10
2512: PPUSH
2513: LD_INT 3
2515: PPUSH
2516: LD_INT 3
2518: PPUSH
2519: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 4
2531: PPUSH
2532: LD_INT 10
2534: PPUSH
2535: LD_INT 3
2537: PPUSH
2538: LD_INT 6
2540: PPUSH
2541: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
2545: LD_INT 3
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: LD_INT 10
2553: PPUSH
2554: LD_INT 10
2556: PPUSH
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 6
2562: PPUSH
2563: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
2567: LD_INT 3
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: LD_INT 2
2575: PPUSH
2576: LD_INT 10
2578: PPUSH
2579: LD_INT 4
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL 3858 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 3
2594: PPUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_INT 10
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 3
2606: PPUSH
2607: CALL 3858 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2611: LD_ADDR_VAR 0 2
2615: PUSH
2616: LD_INT 22
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 21
2628: PUSH
2629: LD_INT 3
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 30
2638: PUSH
2639: LD_INT 32
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 58
2648: PUSH
2649: EMPTY
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PPUSH
2658: CALL_OW 69
2662: PUSH
2663: FOR_IN
2664: IFFALSE 2692
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
2666: LD_INT 3
2668: PPUSH
2669: LD_INT 3
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: CALL 3858 0 6
2690: GO 2663
2692: POP
2693: POP
// end ; end_of_file
2694: LD_VAR 0 1
2698: RET
// export function PrepareAlliance ; var i ; begin
2699: LD_INT 0
2701: PPUSH
2702: PPUSH
// uc_side = 7 ;
2703: LD_ADDR_OWVAR 20
2707: PUSH
2708: LD_INT 7
2710: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
2711: LD_ADDR_EXP 22
2715: PUSH
2716: LD_STRING Roth
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL 3065 0 2
2726: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
2727: LD_EXP 22
2731: PPUSH
2732: LD_INT 249
2734: PPUSH
2735: LD_INT 187
2737: PPUSH
2738: LD_INT 0
2740: PPUSH
2741: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
2745: LD_EXP 22
2749: PPUSH
2750: LD_INT 248
2752: PPUSH
2753: LD_INT 187
2755: PPUSH
2756: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
2760: LD_INT 7
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: LD_INT 45
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 2
2774: PPUSH
2775: LD_INT 3
2777: PPUSH
2778: CALL 3858 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
2782: LD_INT 7
2784: PPUSH
2785: LD_INT 3
2787: PPUSH
2788: LD_INT 45
2790: PPUSH
2791: LD_INT 10
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: LD_INT 2
2799: PPUSH
2800: CALL 3858 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
2804: LD_INT 7
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 194
2812: PPUSH
2813: LD_INT 10
2815: PPUSH
2816: LD_INT 5
2818: PPUSH
2819: LD_INT 4
2821: PPUSH
2822: CALL 3858 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
2826: LD_INT 7
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: LD_INT 194
2834: PPUSH
2835: LD_INT 10
2837: PPUSH
2838: LD_INT 8
2840: PPUSH
2841: LD_INT 6
2843: PPUSH
2844: CALL 3858 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
2848: LD_INT 7
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: LD_INT 156
2856: PPUSH
2857: LD_INT 10
2859: PPUSH
2860: LD_INT 3
2862: PPUSH
2863: LD_INT 6
2865: PPUSH
2866: CALL 3858 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
2870: LD_INT 7
2872: PPUSH
2873: LD_INT 3
2875: PPUSH
2876: LD_INT 162
2878: PPUSH
2879: LD_INT 10
2881: PPUSH
2882: LD_INT 3
2884: PPUSH
2885: LD_INT 6
2887: PPUSH
2888: CALL 3858 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
2892: LD_INT 7
2894: PPUSH
2895: LD_INT 3
2897: PPUSH
2898: LD_INT 39
2900: PPUSH
2901: LD_INT 10
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 4
2909: PPUSH
2910: CALL 3858 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
2914: LD_INT 7
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 133
2922: PPUSH
2923: LD_INT 10
2925: PPUSH
2926: LD_INT 4
2928: PPUSH
2929: LD_INT 4
2931: PPUSH
2932: CALL 3858 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
2936: LD_INT 7
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: LD_INT 46
2944: PPUSH
2945: LD_INT 10
2947: PPUSH
2948: LD_INT 4
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL 3858 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2958: LD_ADDR_VAR 0 2
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_INT 7
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 21
2975: PUSH
2976: LD_INT 3
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 30
2985: PUSH
2986: LD_INT 32
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: LD_INT 58
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: PPUSH
3005: CALL_OW 69
3009: PUSH
3010: FOR_IN
3011: IFFALSE 3058
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
3013: LD_INT 7
3015: PPUSH
3016: LD_INT 1
3018: PUSH
3019: LD_INT 3
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 1
3028: PPUSH
3029: LD_INT 2
3031: PPUSH
3032: CALL_OW 12
3036: ARRAY
3037: PPUSH
3038: LD_VAR 0 2
3042: PPUSH
3043: LD_INT 10
3045: PPUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: CALL 3858 0 6
3056: GO 3010
3058: POP
3059: POP
// end ; end_of_file
3060: LD_VAR 0 1
3064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3065: LD_INT 0
3067: PPUSH
3068: PPUSH
// if exist_mode then
3069: LD_VAR 0 2
3073: IFFALSE 3092
// unit := CreateCharacter ( ident ) else
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 34
3089: ST_TO_ADDR
3090: GO 3107
// unit := NewCharacter ( ident ) ;
3092: LD_ADDR_VAR 0 4
3096: PUSH
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 25
3106: ST_TO_ADDR
// result := unit ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_VAR 0 4
3116: ST_TO_ADDR
// end ;
3117: LD_VAR 0 3
3121: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
3126: LD_STRING 13s_
3128: PUSH
3129: LD_VAR 0 1
3133: STR
3134: PPUSH
3135: CALL_OW 28
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: IFFALSE 3164
// unit = CreateCharacter ( 13s_ & ident ) ;
3145: LD_ADDR_VAR 0 3
3149: PUSH
3150: LD_STRING 13s_
3152: PUSH
3153: LD_VAR 0 1
3157: STR
3158: PPUSH
3159: CALL_OW 34
3163: ST_TO_ADDR
// result := unit ;
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: LD_VAR 0 3
3173: ST_TO_ADDR
// end ;
3174: LD_VAR 0 2
3178: RET
// export function TabLenght ( tab ) ; var i ; begin
3179: LD_INT 0
3181: PPUSH
3182: PPUSH
// for i = 1 to tab do
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: DOUBLE
3189: LD_INT 1
3191: DEC
3192: ST_TO_ADDR
3193: LD_VAR 0 1
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3213
// result = i ;
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: LD_VAR 0 3
3210: ST_TO_ADDR
3211: GO 3198
3213: POP
3214: POP
// end ;
3215: LD_VAR 0 2
3219: RET
// export function SortByDistanceXY ( list , asc ) ; var i , j , tmp ; begin
3220: LD_INT 0
3222: PPUSH
3223: PPUSH
3224: PPUSH
3225: PPUSH
// if not list then
3226: LD_VAR 0 1
3230: NOT
3231: IFFALSE 3235
// exit ;
3233: GO 3582
// result := [ ] ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: EMPTY
3241: ST_TO_ADDR
// for i in list do
3242: LD_ADDR_VAR 0 4
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: FOR_IN
3253: IFFALSE 3494
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
3255: LD_ADDR_VAR 0 6
3259: PUSH
3260: LD_VAR 0 4
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: CALL_OW 259
3272: PUSH
3273: LD_VAR 0 4
3277: PPUSH
3278: LD_INT 2
3280: PPUSH
3281: CALL_OW 259
3285: PLUS
3286: PUSH
3287: LD_VAR 0 4
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: CALL_OW 259
3299: PLUS
3300: PUSH
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_INT 4
3308: PPUSH
3309: CALL_OW 259
3313: PLUS
3314: PUSH
3315: LD_INT 4
3317: DIV
3318: ST_TO_ADDR
// if not result then
3319: LD_VAR 0 3
3323: NOT
3324: IFFALSE 3350
// result := [ [ i , tmp ] ] else
3326: LD_ADDR_VAR 0 3
3330: PUSH
3331: LD_VAR 0 4
3335: PUSH
3336: LD_VAR 0 6
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: ST_TO_ADDR
3348: GO 3492
// begin if result [ result ] [ 2 ] < tmp then
3350: LD_VAR 0 3
3354: PUSH
3355: LD_VAR 0 3
3359: ARRAY
3360: PUSH
3361: LD_INT 2
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 6
3369: LESS
3370: IFFALSE 3412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_VAR 0 3
3381: PPUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_INT 1
3389: PLUS
3390: PPUSH
3391: LD_VAR 0 4
3395: PUSH
3396: LD_VAR 0 6
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PPUSH
3405: CALL_OW 2
3409: ST_TO_ADDR
3410: GO 3492
// for j = 1 to result do
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: DOUBLE
3418: LD_INT 1
3420: DEC
3421: ST_TO_ADDR
3422: LD_VAR 0 3
3426: PUSH
3427: FOR_TO
3428: IFFALSE 3490
// begin if tmp < result [ j ] [ 2 ] then
3430: LD_VAR 0 6
3434: PUSH
3435: LD_VAR 0 3
3439: PUSH
3440: LD_VAR 0 5
3444: ARRAY
3445: PUSH
3446: LD_INT 2
3448: ARRAY
3449: LESS
3450: IFFALSE 3488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_VAR 0 3
3461: PPUSH
3462: LD_VAR 0 5
3466: PPUSH
3467: LD_VAR 0 4
3471: PUSH
3472: LD_VAR 0 6
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PPUSH
3481: CALL_OW 2
3485: ST_TO_ADDR
// break ;
3486: GO 3490
// end ; end ;
3488: GO 3427
3490: POP
3491: POP
// end ; end ;
3492: GO 3252
3494: POP
3495: POP
// if result and not asc then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_VAR 0 2
3505: NOT
3506: AND
3507: IFFALSE 3582
// begin tmp := result ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_VAR 0 3
3518: ST_TO_ADDR
// for i = tmp downto 1 do
3519: LD_ADDR_VAR 0 4
3523: PUSH
3524: DOUBLE
3525: LD_VAR 0 6
3529: INC
3530: ST_TO_ADDR
3531: LD_INT 1
3533: PUSH
3534: FOR_DOWNTO
3535: IFFALSE 3580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: LD_VAR 0 3
3546: PPUSH
3547: LD_VAR 0 6
3551: PUSH
3552: LD_VAR 0 4
3556: MINUS
3557: PUSH
3558: LD_INT 1
3560: PLUS
3561: PPUSH
3562: LD_VAR 0 6
3566: PUSH
3567: LD_VAR 0 4
3571: ARRAY
3572: PPUSH
3573: CALL_OW 1
3577: ST_TO_ADDR
3578: GO 3534
3580: POP
3581: POP
// end ; end ;
3582: LD_VAR 0 3
3586: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3587: LD_INT 0
3589: PPUSH
3590: PPUSH
3591: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
3592: LD_ADDR_VAR 0 1
3596: PUSH
3597: LD_VAR 0 1
3601: PUSH
3602: LD_EXP 1
3606: PUSH
3607: LD_EXP 2
3611: PUSH
3612: LD_EXP 3
3616: PUSH
3617: LD_EXP 4
3621: PUSH
3622: LD_EXP 5
3626: PUSH
3627: LD_EXP 6
3631: PUSH
3632: LD_EXP 7
3636: PUSH
3637: LD_EXP 8
3641: PUSH
3642: LD_EXP 9
3646: PUSH
3647: LD_EXP 10
3651: PUSH
3652: LD_EXP 11
3656: PUSH
3657: LD_EXP 12
3661: PUSH
3662: LD_EXP 13
3666: PUSH
3667: LD_EXP 14
3671: PUSH
3672: LD_EXP 15
3676: PUSH
3677: LD_EXP 17
3681: PUSH
3682: LD_EXP 16
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: DIFF
3706: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3707: LD_ADDR_VAR 0 6
3711: PUSH
3712: LD_INT 1
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 12
3724: ST_TO_ADDR
// for i = 1 to characters do
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_VAR 0 1
3739: PUSH
3740: FOR_TO
3741: IFFALSE 3851
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3743: LD_VAR 0 5
3747: PUSH
3748: LD_VAR 0 6
3752: EQUAL
3753: PUSH
3754: LD_VAR 0 1
3758: PUSH
3759: LD_VAR 0 5
3763: ARRAY
3764: PPUSH
3765: CALL_OW 258
3769: PUSH
3770: LD_INT 1
3772: EQUAL
3773: AND
3774: IFFALSE 3796
// Say ( characters [ i ] , dialogMID ) ;
3776: LD_VAR 0 1
3780: PUSH
3781: LD_VAR 0 5
3785: ARRAY
3786: PPUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3796: LD_VAR 0 5
3800: PUSH
3801: LD_VAR 0 6
3805: EQUAL
3806: PUSH
3807: LD_VAR 0 1
3811: PUSH
3812: LD_VAR 0 5
3816: ARRAY
3817: PPUSH
3818: CALL_OW 258
3822: PUSH
3823: LD_INT 2
3825: EQUAL
3826: AND
3827: IFFALSE 3849
// Say ( characters [ i ] , dialogFID ) ;
3829: LD_VAR 0 1
3833: PUSH
3834: LD_VAR 0 5
3838: ARRAY
3839: PPUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: CALL_OW 88
// end ;
3849: GO 3740
3851: POP
3852: POP
// end ;
3853: LD_VAR 0 4
3857: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
// for i = 1 to count do
3865: LD_ADDR_VAR 0 8
3869: PUSH
3870: DOUBLE
3871: LD_INT 1
3873: DEC
3874: ST_TO_ADDR
3875: LD_VAR 0 6
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3962
// begin uc_side = side ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_VAR 0 1
3892: ST_TO_ADDR
// uc_nation = nation ;
3893: LD_ADDR_OWVAR 21
3897: PUSH
3898: LD_VAR 0 2
3902: ST_TO_ADDR
// hc_gallery =  ;
3903: LD_ADDR_OWVAR 33
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// hc_name =  ;
3911: LD_ADDR_OWVAR 26
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3919: LD_INT 0
3921: PPUSH
3922: LD_VAR 0 5
3926: PPUSH
3927: LD_VAR 0 4
3931: PPUSH
3932: CALL_OW 380
// un = CreateHuman ;
3936: LD_ADDR_VAR 0 10
3940: PUSH
3941: CALL_OW 44
3945: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3946: LD_VAR 0 10
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: CALL_OW 52
// end ;
3960: GO 3880
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 7
3968: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
3974: PPUSH
3975: PPUSH
3976: PPUSH
3977: PPUSH
3978: PPUSH
3979: PPUSH
3980: PPUSH
3981: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
3982: LD_INT 2100
3984: PUSH
3985: LD_INT 3150
3987: PUSH
3988: LD_INT 4200
3990: PUSH
3991: LD_INT 5250
3993: PUSH
3994: LD_INT 6300
3996: PUSH
3997: LD_INT 7350
3999: PUSH
4000: LD_INT 8400
4002: PUSH
4003: LD_INT 9450
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_INT 8
4021: PPUSH
4022: CALL_OW 12
4026: ARRAY
4027: PPUSH
4028: CALL_OW 67
// amChassisTab = [ ] ;
4032: LD_ADDR_VAR 0 19
4036: PUSH
4037: EMPTY
4038: ST_TO_ADDR
// arChassisTab = [ ] ;
4039: LD_ADDR_VAR 0 18
4043: PUSH
4044: EMPTY
4045: ST_TO_ADDR
// ruChassisTab = [ ] ;
4046: LD_ADDR_VAR 0 17
4050: PUSH
4051: EMPTY
4052: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4053: LD_INT 35
4055: PPUSH
4056: CALL_OW 67
// if nation = 1 then
4060: LD_VAR 0 5
4064: PUSH
4065: LD_INT 1
4067: EQUAL
4068: IFFALSE 4559
// begin uc_side = side ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_VAR 0 2
4079: ST_TO_ADDR
// uc_nation = nation ;
4080: LD_ADDR_OWVAR 21
4084: PUSH
4085: LD_VAR 0 5
4089: ST_TO_ADDR
// vc_engine = vehengine ;
4090: LD_ADDR_OWVAR 39
4094: PUSH
4095: LD_VAR 0 6
4099: ST_TO_ADDR
// vc_control = vehcontrol ;
4100: LD_ADDR_OWVAR 38
4104: PUSH
4105: LD_VAR 0 7
4109: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4110: LD_ADDR_OWVAR 40
4114: PUSH
4115: LD_VAR 0 10
4119: PUSH
4120: LD_INT 1
4122: PPUSH
4123: LD_VAR 0 10
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: ST_TO_ADDR
// for j = 1 to AMWeapon do
4134: LD_ADDR_VAR 0 14
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_VAR 0 10
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4451
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4152: LD_VAR 0 10
4156: PUSH
4157: LD_VAR 0 14
4161: ARRAY
4162: PUSH
4163: LD_INT 2
4165: EQUAL
4166: PUSH
4167: LD_VAR 0 10
4171: PUSH
4172: LD_VAR 0 14
4176: ARRAY
4177: PUSH
4178: LD_INT 3
4180: EQUAL
4181: OR
4182: IFFALSE 4235
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4184: LD_ADDR_VAR 0 19
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4211: LD_ADDR_OWVAR 37
4215: PUSH
4216: LD_VAR 0 19
4220: PUSH
4221: LD_INT 1
4223: PPUSH
4224: LD_VAR 0 19
4228: PPUSH
4229: CALL_OW 12
4233: ARRAY
4234: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4235: LD_VAR 0 10
4239: PUSH
4240: LD_VAR 0 14
4244: ARRAY
4245: PUSH
4246: LD_INT 4
4248: EQUAL
4249: PUSH
4250: LD_VAR 0 10
4254: PUSH
4255: LD_VAR 0 14
4259: ARRAY
4260: PUSH
4261: LD_INT 5
4263: EQUAL
4264: OR
4265: PUSH
4266: LD_VAR 0 10
4270: PUSH
4271: LD_VAR 0 14
4275: ARRAY
4276: PUSH
4277: LD_INT 9
4279: EQUAL
4280: OR
4281: PUSH
4282: LD_VAR 0 10
4286: PUSH
4287: LD_VAR 0 14
4291: ARRAY
4292: PUSH
4293: LD_INT 11
4295: EQUAL
4296: OR
4297: PUSH
4298: LD_VAR 0 10
4302: PUSH
4303: LD_VAR 0 14
4307: ARRAY
4308: PUSH
4309: LD_INT 7
4311: EQUAL
4312: OR
4313: IFFALSE 4362
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4315: LD_ADDR_VAR 0 19
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: LD_INT 3
4325: PUSH
4326: LD_INT 4
4328: PUSH
4329: LD_INT 5
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4338: LD_ADDR_OWVAR 37
4342: PUSH
4343: LD_VAR 0 19
4347: PUSH
4348: LD_INT 1
4350: PPUSH
4351: LD_VAR 0 19
4355: PPUSH
4356: CALL_OW 12
4360: ARRAY
4361: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4362: LD_VAR 0 10
4366: PUSH
4367: LD_VAR 0 14
4371: ARRAY
4372: PUSH
4373: LD_INT 8
4375: EQUAL
4376: PUSH
4377: LD_VAR 0 10
4381: PUSH
4382: LD_VAR 0 14
4386: ARRAY
4387: PUSH
4388: LD_INT 6
4390: EQUAL
4391: OR
4392: PUSH
4393: LD_VAR 0 10
4397: PUSH
4398: LD_VAR 0 14
4402: ARRAY
4403: PUSH
4404: LD_INT 10
4406: EQUAL
4407: OR
4408: IFFALSE 4449
// begin amChassisTab = [ 4 , 5 ] ;
4410: LD_ADDR_VAR 0 19
4414: PUSH
4415: LD_INT 4
4417: PUSH
4418: LD_INT 5
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4425: LD_ADDR_OWVAR 37
4429: PUSH
4430: LD_VAR 0 19
4434: PUSH
4435: LD_INT 1
4437: PPUSH
4438: LD_VAR 0 19
4442: PPUSH
4443: CALL_OW 12
4447: ARRAY
4448: ST_TO_ADDR
// end ; end ;
4449: GO 4149
4451: POP
4452: POP
// veh = CreateVehicle ;
4453: LD_ADDR_VAR 0 16
4457: PUSH
4458: CALL_OW 45
4462: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4463: LD_VAR 0 16
4467: PPUSH
4468: LD_VAR 0 1
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 49
// if vc_control = 1 then
4480: LD_OWVAR 38
4484: PUSH
4485: LD_INT 1
4487: EQUAL
4488: IFFALSE 4545
// begin hc_gallery =  ;
4490: LD_ADDR_OWVAR 33
4494: PUSH
4495: LD_STRING 
4497: ST_TO_ADDR
// hc_name =  ;
4498: LD_ADDR_OWVAR 26
4502: PUSH
4503: LD_STRING 
4505: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4506: LD_INT 0
4508: PPUSH
4509: LD_INT 3
4511: PPUSH
4512: LD_VAR 0 4
4516: PPUSH
4517: CALL_OW 380
// un = CreateHuman ;
4521: LD_ADDR_VAR 0 15
4525: PUSH
4526: CALL_OW 44
4530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4531: LD_VAR 0 15
4535: PPUSH
4536: LD_VAR 0 16
4540: PPUSH
4541: CALL_OW 52
// end ; i = i + 1 ;
4545: LD_ADDR_VAR 0 13
4549: PUSH
4550: LD_VAR 0 13
4554: PUSH
4555: LD_INT 1
4557: PLUS
4558: ST_TO_ADDR
// end ; if nation = 2 then
4559: LD_VAR 0 5
4563: PUSH
4564: LD_INT 2
4566: EQUAL
4567: IFFALSE 4991
// begin uc_side = side ;
4569: LD_ADDR_OWVAR 20
4573: PUSH
4574: LD_VAR 0 2
4578: ST_TO_ADDR
// uc_nation = nation ;
4579: LD_ADDR_OWVAR 21
4583: PUSH
4584: LD_VAR 0 5
4588: ST_TO_ADDR
// vc_engine = vehengine ;
4589: LD_ADDR_OWVAR 39
4593: PUSH
4594: LD_VAR 0 6
4598: ST_TO_ADDR
// vc_control = vehcontrol ;
4599: LD_ADDR_OWVAR 38
4603: PUSH
4604: LD_VAR 0 7
4608: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4609: LD_ADDR_OWVAR 40
4613: PUSH
4614: LD_VAR 0 9
4618: PUSH
4619: LD_INT 1
4621: PPUSH
4622: LD_VAR 0 9
4626: PPUSH
4627: CALL_OW 12
4631: ARRAY
4632: ST_TO_ADDR
// for j = 1 to ARWeapons do
4633: LD_ADDR_VAR 0 14
4637: PUSH
4638: DOUBLE
4639: LD_INT 1
4641: DEC
4642: ST_TO_ADDR
4643: LD_VAR 0 9
4647: PUSH
4648: FOR_TO
4649: IFFALSE 4883
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4651: LD_VAR 0 9
4655: PUSH
4656: LD_VAR 0 14
4660: ARRAY
4661: PUSH
4662: LD_INT 24
4664: EQUAL
4665: PUSH
4666: LD_VAR 0 9
4670: PUSH
4671: LD_VAR 0 14
4675: ARRAY
4676: PUSH
4677: LD_INT 22
4679: EQUAL
4680: OR
4681: PUSH
4682: LD_VAR 0 9
4686: PUSH
4687: LD_VAR 0 14
4691: ARRAY
4692: PUSH
4693: LD_INT 23
4695: EQUAL
4696: OR
4697: PUSH
4698: LD_VAR 0 9
4702: PUSH
4703: LD_VAR 0 14
4707: ARRAY
4708: PUSH
4709: LD_INT 30
4711: EQUAL
4712: OR
4713: IFFALSE 4762
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
4715: LD_ADDR_VAR 0 18
4719: PUSH
4720: LD_INT 11
4722: PUSH
4723: LD_INT 12
4725: PUSH
4726: LD_INT 13
4728: PUSH
4729: LD_INT 14
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4738: LD_ADDR_OWVAR 37
4742: PUSH
4743: LD_VAR 0 18
4747: PUSH
4748: LD_INT 1
4750: PPUSH
4751: LD_VAR 0 18
4755: PPUSH
4756: CALL_OW 12
4760: ARRAY
4761: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4762: LD_VAR 0 9
4766: PUSH
4767: LD_VAR 0 14
4771: ARRAY
4772: PUSH
4773: LD_INT 29
4775: EQUAL
4776: PUSH
4777: LD_VAR 0 9
4781: PUSH
4782: LD_VAR 0 14
4786: ARRAY
4787: PUSH
4788: LD_INT 28
4790: EQUAL
4791: OR
4792: PUSH
4793: LD_VAR 0 9
4797: PUSH
4798: LD_VAR 0 14
4802: ARRAY
4803: PUSH
4804: LD_INT 27
4806: EQUAL
4807: OR
4808: PUSH
4809: LD_VAR 0 9
4813: PUSH
4814: LD_VAR 0 14
4818: ARRAY
4819: PUSH
4820: LD_INT 26
4822: EQUAL
4823: OR
4824: PUSH
4825: LD_VAR 0 9
4829: PUSH
4830: LD_VAR 0 14
4834: ARRAY
4835: PUSH
4836: LD_INT 25
4838: EQUAL
4839: OR
4840: IFFALSE 4881
// begin arChassisTab = [ 13 , 14 ] ;
4842: LD_ADDR_VAR 0 18
4846: PUSH
4847: LD_INT 13
4849: PUSH
4850: LD_INT 14
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4857: LD_ADDR_OWVAR 37
4861: PUSH
4862: LD_VAR 0 18
4866: PUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_VAR 0 18
4874: PPUSH
4875: CALL_OW 12
4879: ARRAY
4880: ST_TO_ADDR
// end ; end ;
4881: GO 4648
4883: POP
4884: POP
// veh = CreateVehicle ;
4885: LD_ADDR_VAR 0 16
4889: PUSH
4890: CALL_OW 45
4894: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4895: LD_VAR 0 16
4899: PPUSH
4900: LD_VAR 0 1
4904: PPUSH
4905: LD_INT 0
4907: PPUSH
4908: CALL_OW 49
// if vc_control = 1 then
4912: LD_OWVAR 38
4916: PUSH
4917: LD_INT 1
4919: EQUAL
4920: IFFALSE 4977
// begin hc_gallery =  ;
4922: LD_ADDR_OWVAR 33
4926: PUSH
4927: LD_STRING 
4929: ST_TO_ADDR
// hc_name =  ;
4930: LD_ADDR_OWVAR 26
4934: PUSH
4935: LD_STRING 
4937: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 3
4943: PPUSH
4944: LD_VAR 0 4
4948: PPUSH
4949: CALL_OW 380
// un = CreateHuman ;
4953: LD_ADDR_VAR 0 15
4957: PUSH
4958: CALL_OW 44
4962: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4963: LD_VAR 0 15
4967: PPUSH
4968: LD_VAR 0 16
4972: PPUSH
4973: CALL_OW 52
// end ; i = i + 1 ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_VAR 0 13
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: ST_TO_ADDR
// end ; if nation = 3 then
4991: LD_VAR 0 5
4995: PUSH
4996: LD_INT 3
4998: EQUAL
4999: IFFALSE 5391
// begin uc_side = side ;
5001: LD_ADDR_OWVAR 20
5005: PUSH
5006: LD_VAR 0 2
5010: ST_TO_ADDR
// uc_nation = nation ;
5011: LD_ADDR_OWVAR 21
5015: PUSH
5016: LD_VAR 0 5
5020: ST_TO_ADDR
// vc_engine = vehengine ;
5021: LD_ADDR_OWVAR 39
5025: PUSH
5026: LD_VAR 0 6
5030: ST_TO_ADDR
// vc_control = vehcontrol ;
5031: LD_ADDR_OWVAR 38
5035: PUSH
5036: LD_VAR 0 7
5040: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5041: LD_ADDR_OWVAR 40
5045: PUSH
5046: LD_VAR 0 8
5050: PUSH
5051: LD_INT 1
5053: PPUSH
5054: LD_VAR 0 8
5058: PPUSH
5059: CALL_OW 12
5063: ARRAY
5064: ST_TO_ADDR
// for j = 1 to RuWeapons do
5065: LD_ADDR_VAR 0 14
5069: PUSH
5070: DOUBLE
5071: LD_INT 1
5073: DEC
5074: ST_TO_ADDR
5075: LD_VAR 0 8
5079: PUSH
5080: FOR_TO
5081: IFFALSE 5283
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5083: LD_VAR 0 8
5087: PUSH
5088: LD_VAR 0 14
5092: ARRAY
5093: PUSH
5094: LD_INT 42
5096: EQUAL
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 14
5107: ARRAY
5108: PUSH
5109: LD_INT 43
5111: EQUAL
5112: OR
5113: PUSH
5114: LD_VAR 0 8
5118: PUSH
5119: LD_VAR 0 14
5123: ARRAY
5124: PUSH
5125: LD_INT 44
5127: EQUAL
5128: OR
5129: PUSH
5130: LD_VAR 0 8
5134: PUSH
5135: LD_VAR 0 14
5139: ARRAY
5140: PUSH
5141: LD_INT 45
5143: EQUAL
5144: OR
5145: PUSH
5146: LD_VAR 0 8
5150: PUSH
5151: LD_VAR 0 14
5155: ARRAY
5156: PUSH
5157: LD_INT 49
5159: EQUAL
5160: OR
5161: IFFALSE 5210
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5163: LD_ADDR_VAR 0 17
5167: PUSH
5168: LD_INT 21
5170: PUSH
5171: LD_INT 22
5173: PUSH
5174: LD_INT 23
5176: PUSH
5177: LD_INT 24
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5186: LD_ADDR_OWVAR 37
5190: PUSH
5191: LD_VAR 0 17
5195: PUSH
5196: LD_INT 1
5198: PPUSH
5199: LD_VAR 0 17
5203: PPUSH
5204: CALL_OW 12
5208: ARRAY
5209: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5210: LD_VAR 0 8
5214: PUSH
5215: LD_VAR 0 14
5219: ARRAY
5220: PUSH
5221: LD_INT 46
5223: EQUAL
5224: PUSH
5225: LD_VAR 0 8
5229: PUSH
5230: LD_VAR 0 14
5234: ARRAY
5235: PUSH
5236: LD_INT 47
5238: EQUAL
5239: OR
5240: IFFALSE 5281
// begin ruChassisTab = [ 23 , 24 ] ;
5242: LD_ADDR_VAR 0 17
5246: PUSH
5247: LD_INT 23
5249: PUSH
5250: LD_INT 24
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5257: LD_ADDR_OWVAR 37
5261: PUSH
5262: LD_VAR 0 17
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_VAR 0 17
5274: PPUSH
5275: CALL_OW 12
5279: ARRAY
5280: ST_TO_ADDR
// end ; end ;
5281: GO 5080
5283: POP
5284: POP
// veh = CreateVehicle ;
5285: LD_ADDR_VAR 0 16
5289: PUSH
5290: CALL_OW 45
5294: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5295: LD_VAR 0 16
5299: PPUSH
5300: LD_VAR 0 1
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 49
// if vc_control = 1 then
5312: LD_OWVAR 38
5316: PUSH
5317: LD_INT 1
5319: EQUAL
5320: IFFALSE 5377
// begin hc_gallery =  ;
5322: LD_ADDR_OWVAR 33
5326: PUSH
5327: LD_STRING 
5329: ST_TO_ADDR
// hc_name =  ;
5330: LD_ADDR_OWVAR 26
5334: PUSH
5335: LD_STRING 
5337: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_INT 3
5343: PPUSH
5344: LD_VAR 0 4
5348: PPUSH
5349: CALL_OW 380
// un = CreateHuman ;
5353: LD_ADDR_VAR 0 15
5357: PUSH
5358: CALL_OW 44
5362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5363: LD_VAR 0 15
5367: PPUSH
5368: LD_VAR 0 16
5372: PPUSH
5373: CALL_OW 52
// end ; i = i + 1 ;
5377: LD_ADDR_VAR 0 13
5381: PUSH
5382: LD_VAR 0 13
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ST_TO_ADDR
// end ; until i = vehCount ;
5391: LD_VAR 0 13
5395: PUSH
5396: LD_VAR 0 3
5400: EQUAL
5401: IFFALSE 4053
// repeat wait ( 0 0$1 ) ;
5403: LD_INT 35
5405: PPUSH
5406: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
5410: LD_ADDR_VAR 0 20
5414: PUSH
5415: LD_INT 22
5417: PUSH
5418: LD_VAR 0 2
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 2
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 24
5439: PUSH
5440: LD_INT 661
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: ST_TO_ADDR
// if vehicleOK_list > 0 then
5457: LD_VAR 0 20
5461: PUSH
5462: LD_INT 0
5464: GREATER
5465: IFFALSE 5656
// begin for i in vehicleOK_list do
5467: LD_ADDR_VAR 0 13
5471: PUSH
5472: LD_VAR 0 20
5476: PUSH
5477: FOR_IN
5478: IFFALSE 5654
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5480: LD_ADDR_VAR 0 21
5484: PUSH
5485: LD_INT 22
5487: PUSH
5488: LD_VAR 0 11
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: PPUSH
5502: LD_VAR 0 13
5506: PPUSH
5507: CALL_OW 74
5511: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5512: LD_ADDR_VAR 0 22
5516: PUSH
5517: LD_INT 22
5519: PUSH
5520: LD_VAR 0 11
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 2
5531: PUSH
5532: LD_INT 59
5534: PUSH
5535: EMPTY
5536: LIST
5537: PUSH
5538: LD_INT 21
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 21
5550: PUSH
5551: LD_INT 2
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: PPUSH
5571: CALL_OW 69
5575: PPUSH
5576: LD_VAR 0 13
5580: PPUSH
5581: CALL_OW 74
5585: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5586: LD_VAR 0 13
5590: PPUSH
5591: LD_VAR 0 21
5595: PPUSH
5596: CALL_OW 296
5600: PUSH
5601: LD_INT 8
5603: PLUS
5604: PUSH
5605: LD_VAR 0 13
5609: PPUSH
5610: LD_VAR 0 22
5614: PPUSH
5615: CALL_OW 296
5619: LESS
5620: IFFALSE 5638
// begin ComAttackUnit ( i , target1 ) ;
5622: LD_VAR 0 13
5626: PPUSH
5627: LD_VAR 0 21
5631: PPUSH
5632: CALL_OW 115
// end else
5636: GO 5652
// begin ComAttackUnit ( i , target2 ) ;
5638: LD_VAR 0 13
5642: PPUSH
5643: LD_VAR 0 22
5647: PPUSH
5648: CALL_OW 115
// end ; end ;
5652: GO 5477
5654: POP
5655: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
5656: LD_INT 22
5658: PUSH
5659: LD_VAR 0 2
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PUSH
5668: LD_INT 21
5670: PUSH
5671: LD_INT 2
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 250
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 59
5690: PUSH
5691: EMPTY
5692: LIST
5693: PUSH
5694: LD_INT 3
5696: PUSH
5697: LD_INT 31
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PPUSH
5711: CALL_OW 69
5715: PUSH
5716: LD_INT 0
5718: EQUAL
5719: IFFALSE 5403
// end ; end_of_file end_of_file end_of_file end_of_file
5721: LD_VAR 0 12
5725: RET
// every 3 3$0 do
5726: GO 5728
5728: DISABLE
// begin enable ;
5729: ENABLE
// RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
5730: LD_INT 2
5732: PPUSH
5733: LD_INT 6
5735: PPUSH
5736: LD_INT 2
5738: PPUSH
5739: LD_INT 4
5741: PPUSH
5742: CALL_OW 12
5746: PPUSH
5747: LD_INT 10
5749: PPUSH
5750: LD_INT 3
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: LD_INT 42
5761: PUSH
5762: LD_INT 43
5764: PUSH
5765: LD_INT 44
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: PPUSH
5773: EMPTY
5774: PPUSH
5775: EMPTY
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: CALL 3969 0 11
// end ; end_of_file
5784: END
// every 1 do var dec1 , options , people ;
5785: GO 5787
5787: DISABLE
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
// begin InGameOn ;
5793: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
5797: LD_EXP 19
5801: PUSH
5802: LD_EXP 20
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PPUSH
5811: LD_INT 48
5813: PPUSH
5814: LD_INT 68
5816: PPUSH
5817: CALL_OW 111
// if KappaStatus = 0 then
5821: LD_EXP 29
5825: PUSH
5826: LD_INT 0
5828: EQUAL
5829: IFFALSE 5875
// begin CenterNowOnUnits ( NewJMMVeh ) ;
5831: LD_EXP 19
5835: PPUSH
5836: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
5840: LD_EXP 1
5844: PPUSH
5845: LD_STRING D1T-JMM-1
5847: PPUSH
5848: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5852: LD_EXP 19
5856: PPUSH
5857: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
5861: LD_EXP 17
5865: PPUSH
5866: LD_STRING D1nT-JMM-1
5868: PPUSH
5869: CALL_OW 88
// end else
5873: GO 6160
// begin CenterNowOnUnits ( NewJMMVeh ) ;
5875: LD_EXP 19
5879: PPUSH
5880: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
5884: LD_EXP 1
5888: PPUSH
5889: LD_STRING D1T-JMM-1
5891: PPUSH
5892: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5896: LD_EXP 19
5900: PPUSH
5901: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
5905: LD_EXP 17
5909: PPUSH
5910: LD_STRING D1T-Pow-1
5912: PPUSH
5913: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5917: LD_EXP 19
5921: PPUSH
5922: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
5926: LD_EXP 1
5930: PPUSH
5931: LD_STRING D1T-JMM-2
5933: PPUSH
5934: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5938: LD_EXP 19
5942: PPUSH
5943: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
5947: LD_EXP 17
5951: PPUSH
5952: LD_STRING D1T-Pow-2
5954: PPUSH
5955: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5959: LD_EXP 19
5963: PPUSH
5964: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
5968: LD_EXP 1
5972: PPUSH
5973: LD_STRING D1T-JMM-3
5975: PPUSH
5976: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
5980: LD_EXP 19
5984: PPUSH
5985: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
5989: LD_EXP 17
5993: PPUSH
5994: LD_STRING D1T-Pow-3
5996: PPUSH
5997: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6001: LD_EXP 19
6005: PPUSH
6006: CALL_OW 87
// if not JMMGirlVeh = [ ] then
6010: LD_EXP 27
6014: PUSH
6015: EMPTY
6016: EQUAL
6017: NOT
6018: IFFALSE 6118
// begin if JMMGirl = 1 then
6020: LD_EXP 28
6024: PUSH
6025: LD_INT 1
6027: EQUAL
6028: IFFALSE 6042
// Say ( Joan , D1T-Joan-3 ) ;
6030: LD_EXP 2
6034: PPUSH
6035: LD_STRING D1T-Joan-3
6037: PPUSH
6038: CALL_OW 88
// if JMMGirl = 2 then
6042: LD_EXP 28
6046: PUSH
6047: LD_INT 2
6049: EQUAL
6050: IFFALSE 6064
// Say ( Lisa , D1T-Lisa-3 ) ;
6052: LD_EXP 4
6056: PPUSH
6057: LD_STRING D1T-Lisa-3
6059: PPUSH
6060: CALL_OW 88
// if JMMGirl = 3 then
6064: LD_EXP 28
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6086
// Say ( Connie , D1T-Con-3 ) ;
6074: LD_EXP 16
6078: PPUSH
6079: LD_STRING D1T-Con-3
6081: PPUSH
6082: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6086: LD_EXP 19
6090: PPUSH
6091: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
6095: LD_EXP 17
6099: PPUSH
6100: LD_STRING D1T-Pow-4
6102: PPUSH
6103: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6107: LD_EXP 19
6111: PPUSH
6112: CALL_OW 87
// end else
6116: GO 6160
// begin Say ( JMM , D1T-JMM-4 ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_STRING D1T-JMM-4
6125: PPUSH
6126: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6130: LD_EXP 19
6134: PPUSH
6135: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
6139: LD_EXP 17
6143: PPUSH
6144: LD_STRING D1T-Pow-5
6146: PPUSH
6147: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6151: LD_EXP 19
6155: PPUSH
6156: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
6160: LD_INT 35
6162: PPUSH
6163: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
6167: LD_EXP 19
6171: PUSH
6172: LD_EXP 20
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: LD_INT 48
6183: PPUSH
6184: LD_INT 68
6186: PPUSH
6187: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
6191: LD_EXP 19
6195: PPUSH
6196: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 15 ;
6200: LD_EXP 19
6204: PPUSH
6205: LD_EXP 17
6209: PPUSH
6210: CALL_OW 296
6214: PUSH
6215: LD_INT 15
6217: LESS
6218: IFFALSE 6160
// ComExitVehicle ( JMM ) ;
6220: LD_EXP 1
6224: PPUSH
6225: CALL_OW 121
// ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
6229: LD_EXP 20
6233: PPUSH
6234: CALL_OW 313
6238: PPUSH
6239: CALL_OW 121
// wait ( 0 0$1 ) ;
6243: LD_INT 35
6245: PPUSH
6246: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6250: LD_INT 35
6252: PPUSH
6253: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
6257: LD_EXP 1
6261: PPUSH
6262: LD_EXP 17
6266: PPUSH
6267: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
6271: LD_EXP 1
6275: PPUSH
6276: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
6280: LD_EXP 1
6284: PPUSH
6285: LD_EXP 17
6289: PPUSH
6290: CALL_OW 296
6294: PUSH
6295: LD_INT 6
6297: LESS
6298: IFFALSE 6250
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
6300: LD_EXP 1
6304: PUSH
6305: LD_EXP 17
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PPUSH
6314: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
6318: LD_EXP 1
6322: PPUSH
6323: LD_EXP 17
6327: PPUSH
6328: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
6332: LD_EXP 17
6336: PPUSH
6337: LD_EXP 1
6341: PPUSH
6342: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D1-JMM-1
6353: PPUSH
6354: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
6358: LD_EXP 17
6362: PPUSH
6363: LD_STRING D1-Pow-1
6365: PPUSH
6366: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
6370: LD_INT 1
6372: PPUSH
6373: LD_INT 3
6375: PPUSH
6376: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
6380: LD_INT 1
6382: PPUSH
6383: LD_INT 4
6385: PPUSH
6386: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
6390: LD_INT 1
6392: PPUSH
6393: LD_INT 5
6395: PPUSH
6396: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
6400: LD_INT 171
6402: PPUSH
6403: LD_INT 81
6405: PPUSH
6406: CALL_OW 84
// wait ( 0 0$4 ) ;
6410: LD_INT 140
6412: PPUSH
6413: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
6417: LD_INT 162
6419: PPUSH
6420: LD_INT 36
6422: PPUSH
6423: CALL_OW 84
// wait ( 0 0$4 ) ;
6427: LD_INT 140
6429: PPUSH
6430: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
6434: LD_INT 75
6436: PPUSH
6437: LD_INT 16
6439: PPUSH
6440: CALL_OW 84
// wait ( 0 0$4 ) ;
6444: LD_INT 140
6446: PPUSH
6447: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
6451: LD_EXP 17
6455: PUSH
6456: LD_EXP 1
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6469: LD_EXP 1
6473: PPUSH
6474: LD_STRING D1-JMM-2
6476: PPUSH
6477: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
6481: LD_EXP 17
6485: PPUSH
6486: LD_STRING D1-Pow-2
6488: PPUSH
6489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D1-JMM-3
6500: PPUSH
6501: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
6505: LD_EXP 17
6509: PPUSH
6510: LD_STRING D1-Pow-3
6512: PPUSH
6513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
6517: LD_EXP 1
6521: PPUSH
6522: LD_STRING D1-JMM-4
6524: PPUSH
6525: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
6529: LD_EXP 17
6533: PPUSH
6534: LD_STRING D1-Pow-4
6536: PPUSH
6537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
6541: LD_EXP 1
6545: PPUSH
6546: LD_STRING D1-JMM-5
6548: PPUSH
6549: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
6553: LD_EXP 17
6557: PPUSH
6558: LD_STRING D1-Pow-5
6560: PPUSH
6561: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
6565: LD_ADDR_VAR 0 2
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: LD_INT 4
6581: PUSH
6582: LD_INT 5
6584: PUSH
6585: LD_INT 6
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
6596: LD_ADDR_VAR 0 1
6600: PUSH
6601: LD_STRING Q1
6603: PPUSH
6604: LD_VAR 0 2
6608: PPUSH
6609: CALL_OW 98
6613: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: LD_STRING Q1
6621: PPUSH
6622: LD_VAR 0 2
6626: PPUSH
6627: CALL_OW 98
6631: ST_TO_ADDR
// options = options diff dec1 ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_VAR 0 2
6641: PUSH
6642: LD_VAR 0 1
6646: DIFF
6647: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_VAR 0 2
6657: PPUSH
6658: CALL 7858 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
6662: LD_VAR 0 1
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: LD_INT 6
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: IN
6677: PUSH
6678: LD_VAR 0 2
6682: PUSH
6683: LD_INT 2
6685: EQUAL
6686: OR
6687: IFFALSE 6614
// if not ( dec1 in [ 5 , 6 ] ) then
6689: LD_VAR 0 1
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 6
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: IN
6704: NOT
6705: IFFALSE 6748
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
6707: LD_ADDR_VAR 0 1
6711: PUSH
6712: LD_STRING Q1a
6714: PPUSH
6715: LD_INT 1
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 98
6729: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 4
6737: PLUS
6738: PPUSH
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL 7858 0 2
// end ; if not JMMGirlVeh = [ ] then
6748: LD_EXP 27
6752: PUSH
6753: EMPTY
6754: EQUAL
6755: NOT
6756: IFFALSE 6897
// begin repeat wait ( 0 0$1 ) ;
6758: LD_INT 35
6760: PPUSH
6761: CALL_OW 67
// if JMMGirl = 1 then
6765: LD_EXP 28
6769: PUSH
6770: LD_INT 1
6772: EQUAL
6773: IFFALSE 6789
// ComMoveUnit ( JMM , Joan ) ;
6775: LD_EXP 1
6779: PPUSH
6780: LD_EXP 2
6784: PPUSH
6785: CALL_OW 112
// if JMMGirl = 2 then
6789: LD_EXP 28
6793: PUSH
6794: LD_INT 2
6796: EQUAL
6797: IFFALSE 6813
// ComMoveUnit ( JMM , Lisa ) ;
6799: LD_EXP 1
6803: PPUSH
6804: LD_EXP 4
6808: PPUSH
6809: CALL_OW 112
// if JMMGirl = 3 then
6813: LD_EXP 28
6817: PUSH
6818: LD_INT 3
6820: EQUAL
6821: IFFALSE 6837
// ComMoveUnit ( JMM , Connie ) ;
6823: LD_EXP 1
6827: PPUSH
6828: LD_EXP 16
6832: PPUSH
6833: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
6837: LD_EXP 1
6841: PPUSH
6842: LD_EXP 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 6
6854: LESS
6855: PUSH
6856: LD_EXP 1
6860: PPUSH
6861: LD_EXP 4
6865: PPUSH
6866: CALL_OW 296
6870: PUSH
6871: LD_INT 6
6873: LESS
6874: OR
6875: PUSH
6876: LD_EXP 1
6880: PPUSH
6881: LD_EXP 16
6885: PPUSH
6886: CALL_OW 296
6890: PUSH
6891: LD_INT 6
6893: LESS
6894: OR
6895: IFFALSE 6758
// end ; case JMMGirl of 1 :
6897: LD_EXP 28
6901: PUSH
6902: LD_INT 1
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6953
6910: POP
// begin ComTurnUnit ( JMM , Joan ) ;
6911: LD_EXP 1
6915: PPUSH
6916: LD_EXP 2
6920: PPUSH
6921: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
6925: LD_EXP 2
6929: PPUSH
6930: LD_EXP 1
6934: PPUSH
6935: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
6939: LD_EXP 2
6943: PPUSH
6944: LD_STRING D3W-Joan-1
6946: PPUSH
6947: CALL_OW 88
// end ; 2 :
6951: GO 7056
6953: LD_INT 2
6955: DOUBLE
6956: EQUAL
6957: IFTRUE 6961
6959: GO 7004
6961: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
6962: LD_EXP 1
6966: PPUSH
6967: LD_EXP 4
6971: PPUSH
6972: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
6976: LD_EXP 4
6980: PPUSH
6981: LD_EXP 1
6985: PPUSH
6986: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
6990: LD_EXP 4
6994: PPUSH
6995: LD_STRING D3W-Lisa-1
6997: PPUSH
6998: CALL_OW 88
// end ; 3 :
7002: GO 7056
7004: LD_INT 3
7006: DOUBLE
7007: EQUAL
7008: IFTRUE 7012
7010: GO 7055
7012: POP
// begin ComTurnUnit ( JMM , Connie ) ;
7013: LD_EXP 1
7017: PPUSH
7018: LD_EXP 16
7022: PPUSH
7023: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
7027: LD_EXP 16
7031: PPUSH
7032: LD_EXP 1
7036: PPUSH
7037: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
7041: LD_EXP 16
7045: PPUSH
7046: LD_STRING D3W-Con-1
7048: PPUSH
7049: CALL_OW 88
// end ; end ;
7053: GO 7056
7055: POP
// Say ( JMM , D3W-JMM-1 ) ;
7056: LD_EXP 1
7060: PPUSH
7061: LD_STRING D3W-JMM-1
7063: PPUSH
7064: CALL_OW 88
// people = 0 ;
7068: LD_ADDR_VAR 0 3
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// if Lisa and people < 5 then
7076: LD_EXP 4
7080: PUSH
7081: LD_VAR 0 3
7085: PUSH
7086: LD_INT 5
7088: LESS
7089: AND
7090: IFFALSE 7121
// begin people = people + 1 ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ST_TO_ADDR
// ComMoveXY ( Lisa , 65 , 98 ) ;
7106: LD_EXP 4
7110: PPUSH
7111: LD_INT 65
7113: PPUSH
7114: LD_INT 98
7116: PPUSH
7117: CALL_OW 111
// end ; if Donaldson and people < 5 then
7121: LD_EXP 5
7125: PUSH
7126: LD_VAR 0 3
7130: PUSH
7131: LD_INT 5
7133: LESS
7134: AND
7135: IFFALSE 7166
// begin people = people + 1 ;
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 1
7149: PLUS
7150: ST_TO_ADDR
// ComMoveXY ( Donaldson , 65 , 98 ) ;
7151: LD_EXP 5
7155: PPUSH
7156: LD_INT 65
7158: PPUSH
7159: LD_INT 98
7161: PPUSH
7162: CALL_OW 111
// end ; if Bobby and people < 5 then
7166: LD_EXP 6
7170: PUSH
7171: LD_VAR 0 3
7175: PUSH
7176: LD_INT 5
7178: LESS
7179: AND
7180: IFFALSE 7211
// begin people = people + 1 ;
7182: LD_ADDR_VAR 0 3
7186: PUSH
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 1
7194: PLUS
7195: ST_TO_ADDR
// ComMoveXY ( Bobby , 65 , 98 ) ;
7196: LD_EXP 6
7200: PPUSH
7201: LD_INT 65
7203: PPUSH
7204: LD_INT 98
7206: PPUSH
7207: CALL_OW 111
// end ; if Cyrus and people < 5 then
7211: LD_EXP 7
7215: PUSH
7216: LD_VAR 0 3
7220: PUSH
7221: LD_INT 5
7223: LESS
7224: AND
7225: IFFALSE 7256
// begin people = people + 1 ;
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 1
7239: PLUS
7240: ST_TO_ADDR
// ComMoveXY ( Cyrus , 65 , 98 ) ;
7241: LD_EXP 7
7245: PPUSH
7246: LD_INT 65
7248: PPUSH
7249: LD_INT 98
7251: PPUSH
7252: CALL_OW 111
// end ; if Denis and people < 5 then
7256: LD_EXP 8
7260: PUSH
7261: LD_VAR 0 3
7265: PUSH
7266: LD_INT 5
7268: LESS
7269: AND
7270: IFFALSE 7301
// begin people = people + 1 ;
7272: LD_ADDR_VAR 0 3
7276: PUSH
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 1
7284: PLUS
7285: ST_TO_ADDR
// ComMoveXY ( Denis , 65 , 98 ) ;
7286: LD_EXP 8
7290: PPUSH
7291: LD_INT 65
7293: PPUSH
7294: LD_INT 98
7296: PPUSH
7297: CALL_OW 111
// end ; if Brown and people < 5 then
7301: LD_EXP 9
7305: PUSH
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 5
7313: LESS
7314: AND
7315: IFFALSE 7346
// begin people = people + 1 ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_VAR 0 3
7326: PUSH
7327: LD_INT 1
7329: PLUS
7330: ST_TO_ADDR
// ComMoveXY ( Brown , 65 , 98 ) ;
7331: LD_EXP 9
7335: PPUSH
7336: LD_INT 65
7338: PPUSH
7339: LD_INT 98
7341: PPUSH
7342: CALL_OW 111
// end ; if Gladstone and people < 5 then
7346: LD_EXP 10
7350: PUSH
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 5
7358: LESS
7359: AND
7360: IFFALSE 7391
// begin people = people + 1 ;
7362: LD_ADDR_VAR 0 3
7366: PUSH
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 1
7374: PLUS
7375: ST_TO_ADDR
// ComMoveXY ( Gladstone , 65 , 98 ) ;
7376: LD_EXP 10
7380: PPUSH
7381: LD_INT 65
7383: PPUSH
7384: LD_INT 98
7386: PPUSH
7387: CALL_OW 111
// end ; if Houten and people < 5 then
7391: LD_EXP 11
7395: PUSH
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 5
7403: LESS
7404: AND
7405: IFFALSE 7436
// begin people = people + 1 ;
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: PLUS
7420: ST_TO_ADDR
// ComMoveXY ( Houten , 65 , 98 ) ;
7421: LD_EXP 11
7425: PPUSH
7426: LD_INT 65
7428: PPUSH
7429: LD_INT 98
7431: PPUSH
7432: CALL_OW 111
// end ; if Cornel and people < 5 then
7436: LD_EXP 12
7440: PUSH
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 5
7448: LESS
7449: AND
7450: IFFALSE 7481
// begin people = people + 1 ;
7452: LD_ADDR_VAR 0 3
7456: PUSH
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 1
7464: PLUS
7465: ST_TO_ADDR
// ComMoveXY ( Cornel , 65 , 98 ) ;
7466: LD_EXP 12
7470: PPUSH
7471: LD_INT 65
7473: PPUSH
7474: LD_INT 98
7476: PPUSH
7477: CALL_OW 111
// end ; if Gary and people < 5 then
7481: LD_EXP 13
7485: PUSH
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 5
7493: LESS
7494: AND
7495: IFFALSE 7526
// begin people = people + 1 ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_VAR 0 3
7506: PUSH
7507: LD_INT 1
7509: PLUS
7510: ST_TO_ADDR
// ComMoveXY ( Gary , 65 , 98 ) ;
7511: LD_EXP 13
7515: PPUSH
7516: LD_INT 65
7518: PPUSH
7519: LD_INT 98
7521: PPUSH
7522: CALL_OW 111
// end ; if Frank and people < 5 then
7526: LD_EXP 14
7530: PUSH
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 5
7538: LESS
7539: AND
7540: IFFALSE 7571
// begin people = people + 1 ;
7542: LD_ADDR_VAR 0 3
7546: PUSH
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ST_TO_ADDR
// ComMoveXY ( Frank , 65 , 98 ) ;
7556: LD_EXP 14
7560: PPUSH
7561: LD_INT 65
7563: PPUSH
7564: LD_INT 98
7566: PPUSH
7567: CALL_OW 111
// end ; if Kikuchi and people < 5 then
7571: LD_EXP 15
7575: PUSH
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 5
7583: LESS
7584: AND
7585: IFFALSE 7616
// begin people = people + 1 ;
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_VAR 0 3
7596: PUSH
7597: LD_INT 1
7599: PLUS
7600: ST_TO_ADDR
// ComMoveXY ( Kikuchi , 65 , 98 ) ;
7601: LD_EXP 15
7605: PPUSH
7606: LD_INT 65
7608: PPUSH
7609: LD_INT 98
7611: PPUSH
7612: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7616: LD_INT 35
7618: PPUSH
7619: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7623: LD_EXP 1
7627: PPUSH
7628: CALL_OW 87
// ComMoveXY ( [ JMM , Joan , Lisa , Connie ] , 68 , 100 ) ;
7632: LD_EXP 1
7636: PUSH
7637: LD_EXP 2
7641: PUSH
7642: LD_EXP 4
7646: PUSH
7647: LD_EXP 16
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: LD_INT 68
7660: PPUSH
7661: LD_INT 100
7663: PPUSH
7664: CALL_OW 111
// until IsInArea ( JMM , PowellHillArea ) ;
7668: LD_EXP 1
7672: PPUSH
7673: LD_INT 9
7675: PPUSH
7676: CALL_OW 308
7680: IFFALSE 7616
// wait ( 0 0$2 ) ;
7682: LD_INT 70
7684: PPUSH
7685: CALL_OW 67
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , JMM ) ;
7689: LD_INT 22
7691: PUSH
7692: LD_INT 1
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 21
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: PUSH
7718: LD_EXP 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: DIFF
7726: PPUSH
7727: LD_EXP 1
7731: PPUSH
7732: CALL_OW 119
// Say ( Lisa , D3nW-Lisa-1 ) ;
7736: LD_EXP 4
7740: PPUSH
7741: LD_STRING D3nW-Lisa-1
7743: PPUSH
7744: CALL_OW 88
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
7748: LD_EXP 7
7752: PPUSH
7753: LD_STRING D3nW-Cyrus-1
7755: PPUSH
7756: CALL_OW 88
// Say ( Bobby , D3nW-Bobby-1 ) ;
7760: LD_EXP 6
7764: PPUSH
7765: LD_STRING D3nW-Bobby-1
7767: PPUSH
7768: CALL_OW 88
// Say ( Gary , D3nW-Gary-1 ) ;
7772: LD_EXP 13
7776: PPUSH
7777: LD_STRING D3nW-Gary-1
7779: PPUSH
7780: CALL_OW 88
// Say ( Donaldson , D3nW-Don-1 ) ;
7784: LD_EXP 5
7788: PPUSH
7789: LD_STRING D3nW-Don-1
7791: PPUSH
7792: CALL_OW 88
// Say ( Cornel , D3nW-Corn-1 ) ;
7796: LD_EXP 12
7800: PPUSH
7801: LD_STRING D3nW-Corn-1
7803: PPUSH
7804: CALL_OW 88
// Say ( Frank , D3nW-Frank-1 ) ;
7808: LD_EXP 14
7812: PPUSH
7813: LD_STRING D3nW-Frank-1
7815: PPUSH
7816: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
7820: LD_EXP 1
7824: PPUSH
7825: LD_STRING D3nW-JMM-1
7827: PPUSH
7828: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
7832: LD_EXP 1
7836: PPUSH
7837: LD_STRING D3nW-JMM-1a
7839: PPUSH
7840: CALL_OW 88
// InGameOff ;
7844: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7848: LD_STRING M1
7850: PPUSH
7851: CALL_OW 337
// end ;
7855: PPOPN 3
7857: END
// function ResolveQuery ( question , list_of_q ) ; begin
7858: LD_INT 0
7860: PPUSH
// case question of 1 :
7861: LD_VAR 0 1
7865: PUSH
7866: LD_INT 1
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 7925
7874: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
7875: LD_EXP 1
7879: PPUSH
7880: LD_STRING D2Mot-JMM-1
7882: PPUSH
7883: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
7887: LD_EXP 17
7891: PPUSH
7892: LD_STRING D2Mot-Pow-1
7894: PPUSH
7895: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
7899: LD_EXP 1
7903: PPUSH
7904: LD_STRING D2Mot-JMM-2
7906: PPUSH
7907: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
7911: LD_EXP 17
7915: PPUSH
7916: LD_STRING D2Mot-Pow-2
7918: PPUSH
7919: CALL_OW 88
// end ; 2 :
7923: GO 8268
7925: LD_INT 2
7927: DOUBLE
7928: EQUAL
7929: IFTRUE 7933
7931: GO 8009
7933: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
7934: LD_EXP 1
7938: PPUSH
7939: LD_STRING D2Rus-JMM-1
7941: PPUSH
7942: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
7946: LD_EXP 17
7950: PPUSH
7951: LD_STRING D2Rus-Pow-1
7953: PPUSH
7954: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
7958: LD_EXP 1
7962: PPUSH
7963: LD_STRING D2Rus-JMM-2
7965: PPUSH
7966: CALL_OW 88
// if not ( 3 in list_of_q ) then
7970: LD_INT 3
7972: PUSH
7973: LD_VAR 0 2
7977: IN
7978: NOT
7979: IFFALSE 7995
// Say ( Powell , D2Rus-Pow-2 ) else
7981: LD_EXP 17
7985: PPUSH
7986: LD_STRING D2Rus-Pow-2
7988: PPUSH
7989: CALL_OW 88
7993: GO 8007
// Say ( Powell , D2Rus-Pow-2a ) ;
7995: LD_EXP 17
7999: PPUSH
8000: LD_STRING D2Rus-Pow-2a
8002: PPUSH
8003: CALL_OW 88
// end ; 3 :
8007: GO 8268
8009: LD_INT 3
8011: DOUBLE
8012: EQUAL
8013: IFTRUE 8017
8015: GO 8102
8017: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
8018: LD_EXP 1
8022: PPUSH
8023: LD_STRING D2Leg-JMM-1
8025: PPUSH
8026: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
8030: LD_EXP 17
8034: PPUSH
8035: LD_STRING D2Leg-Pow-1
8037: PPUSH
8038: CALL_OW 88
// if ( 2 in list_of_q ) then
8042: LD_INT 2
8044: PUSH
8045: LD_VAR 0 2
8049: IN
8050: IFFALSE 8076
// begin Say ( JMM , D2Leg-JMM-2 ) ;
8052: LD_EXP 1
8056: PPUSH
8057: LD_STRING D2Leg-JMM-2
8059: PPUSH
8060: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
8064: LD_EXP 17
8068: PPUSH
8069: LD_STRING D2Leg-Pow-2
8071: PPUSH
8072: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
8076: LD_EXP 1
8080: PPUSH
8081: LD_STRING D2Leg-JMM-3
8083: PPUSH
8084: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
8088: LD_EXP 17
8092: PPUSH
8093: LD_STRING D2Leg-Pow-3
8095: PPUSH
8096: CALL_OW 88
// end ; 4 :
8100: GO 8268
8102: LD_INT 4
8104: DOUBLE
8105: EQUAL
8106: IFTRUE 8110
8108: GO 8185
8110: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
8111: LD_EXP 1
8115: PPUSH
8116: LD_STRING D2Ar-JMM-1
8118: PPUSH
8119: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
8123: LD_EXP 17
8127: PPUSH
8128: LD_STRING D2Ar-Pow-1
8130: PPUSH
8131: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
8135: LD_EXP 1
8139: PPUSH
8140: LD_STRING D2Ar-JMM-2
8142: PPUSH
8143: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
8147: LD_EXP 17
8151: PPUSH
8152: LD_STRING D2Ar-Pow-2
8154: PPUSH
8155: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
8159: LD_EXP 1
8163: PPUSH
8164: LD_STRING D2Ar-JMM-3
8166: PPUSH
8167: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
8171: LD_EXP 17
8175: PPUSH
8176: LD_STRING D2Ar-Pow-3
8178: PPUSH
8179: CALL_OW 88
// end ; 5 :
8183: GO 8268
8185: LD_INT 5
8187: DOUBLE
8188: EQUAL
8189: IFTRUE 8193
8191: GO 8208
8193: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
8194: LD_EXP 1
8198: PPUSH
8199: LD_STRING D2Conf-JMM-1
8201: PPUSH
8202: CALL_OW 88
// end ; 6 :
8206: GO 8268
8208: LD_INT 6
8210: DOUBLE
8211: EQUAL
8212: IFTRUE 8216
8214: GO 8267
8216: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
8217: LD_EXP 1
8221: PPUSH
8222: LD_STRING D2Com-JMM-1
8224: PPUSH
8225: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
8229: LD_EXP 17
8233: PPUSH
8234: LD_STRING D2Com-Pow-1
8236: PPUSH
8237: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
8241: LD_EXP 1
8245: PPUSH
8246: LD_STRING D2Com-JMM-2
8248: PPUSH
8249: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
8253: LD_EXP 17
8257: PPUSH
8258: LD_STRING D2Com-Pow-2
8260: PPUSH
8261: CALL_OW 88
// end ; end ;
8265: GO 8268
8267: POP
// end ;
8268: LD_VAR 0 3
8272: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ f_side , 4 ] ) do
8273: LD_INT 9
8275: PPUSH
8276: LD_INT 22
8278: PUSH
8279: LD_INT 4
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PPUSH
8286: CALL_OW 70
8290: IFFALSE 8321
8292: GO 8294
8294: DISABLE
// begin enable ;
8295: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ f_side , 4 ] ) , 1 ) ;
8296: LD_INT 9
8298: PPUSH
8299: LD_INT 22
8301: PUSH
8302: LD_INT 4
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PPUSH
8309: CALL_OW 70
8313: PPUSH
8314: LD_INT 1
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
