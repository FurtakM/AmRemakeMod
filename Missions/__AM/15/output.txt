// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export startAttacks ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 29
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 30
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 31
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 32
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 33
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
  86: LD_ADDR_EXP 24
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// amUnitsAttack = [ ] ;
  93: LD_ADDR_EXP 25
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// startAttacks = 0 ;
 107: LD_ADDR_EXP 28
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// powellBuildBase = 0 ;
 115: LD_ADDR_EXP 27
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// debugMode = 1 ;
 123: LD_ADDR_EXP 34
 127: PUSH
 128: LD_INT 1
 130: ST_TO_ADDR
// PrepareHeroes ;
 131: CALL 483 0 0
// PrepareHeroesFromEpsilon ;
 135: CALL 1005 0 0
// PrepareRandoms ;
 139: CALL 1349 0 0
// PrepareLegion ;
 143: CALL 2158 0 0
// PrepareRussians ;
 147: CALL 2418 0 0
// PrepareAlliance ;
 151: CALL 2722 0 0
// SetBName ( RuDep2 , zhukov ) ;
 155: LD_INT 23
 157: PPUSH
 158: LD_STRING zhukov
 160: PPUSH
 161: CALL_OW 500
// end ;
 165: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 166: LD_EXP 34
 170: PUSH
 171: LD_INT 1
 173: EQUAL
 174: IFFALSE 480
 176: GO 178
 178: DISABLE
 179: LD_INT 0
 181: PPUSH
// begin enable ;
 182: ENABLE
// fogoff ( true ) ;
 183: LD_INT 1
 185: PPUSH
 186: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 190: LD_ADDR_VAR 0 1
 194: PUSH
 195: LD_INT 22
 197: PUSH
 198: LD_INT 1
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: PUSH
 205: LD_INT 21
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PPUSH
 219: CALL_OW 69
 223: PUSH
 224: FOR_IN
 225: IFFALSE 241
// SetLives ( i , 1000 ) ;
 227: LD_VAR 0 1
 231: PPUSH
 232: LD_INT 1000
 234: PPUSH
 235: CALL_OW 234
 239: GO 224
 241: POP
 242: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 243: LD_ADDR_VAR 0 1
 247: PUSH
 248: LD_INT 22
 250: PUSH
 251: LD_INT 1
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: LD_INT 30
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 320
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: CALL_OW 274
 307: PPUSH
 308: LD_INT 1
 310: PPUSH
 311: LD_INT 9999
 313: PPUSH
 314: CALL_OW 277
 318: GO 295
 320: POP
 321: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 322: LD_ADDR_VAR 0 1
 326: PUSH
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 2
 339: PUSH
 340: LD_INT 30
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 30
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PPUSH
 369: CALL_OW 69
 373: PUSH
 374: FOR_IN
 375: IFFALSE 399
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 377: LD_VAR 0 1
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 9999
 392: PPUSH
 393: CALL_OW 277
 397: GO 374
 399: POP
 400: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 401: LD_ADDR_VAR 0 1
 405: PUSH
 406: LD_INT 22
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: LD_INT 30
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 30
 431: PUSH
 432: LD_INT 1
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: CALL_OW 274
 465: PPUSH
 466: LD_INT 3
 468: PPUSH
 469: LD_INT 9999
 471: PPUSH
 472: CALL_OW 277
 476: GO 453
 478: POP
 479: POP
// end ; end_of_file
 480: PPOPN 1
 482: END
// export function PrepareHeroes ; begin
 483: LD_INT 0
 485: PPUSH
// uc_side = 1 ;
 486: LD_ADDR_OWVAR 20
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// uc_nation = 1 ;
 494: LD_ADDR_OWVAR 21
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// if JMMVeh = [ ] then
 502: LD_EXP 29
 506: PUSH
 507: EMPTY
 508: EQUAL
 509: IFFALSE 555
// begin vc_engine = 3 ;
 511: LD_ADDR_OWVAR 39
 515: PUSH
 516: LD_INT 3
 518: ST_TO_ADDR
// vc_control = 1 ;
 519: LD_ADDR_OWVAR 38
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// vc_chassis = 5 ;
 527: LD_ADDR_OWVAR 37
 531: PUSH
 532: LD_INT 5
 534: ST_TO_ADDR
// vc_weapon = 9 ;
 535: LD_ADDR_OWVAR 40
 539: PUSH
 540: LD_INT 9
 542: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 543: LD_ADDR_EXP 19
 547: PUSH
 548: CALL_OW 45
 552: ST_TO_ADDR
// end else
 553: GO 637
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 555: LD_ADDR_OWVAR 37
 559: PUSH
 560: LD_EXP 29
 564: PUSH
 565: LD_INT 1
 567: ARRAY
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 573: LD_ADDR_OWVAR 39
 577: PUSH
 578: LD_EXP 29
 582: PUSH
 583: LD_INT 2
 585: ARRAY
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 591: LD_ADDR_OWVAR 38
 595: PUSH
 596: LD_EXP 29
 600: PUSH
 601: LD_INT 3
 603: ARRAY
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 609: LD_ADDR_OWVAR 40
 613: PUSH
 614: LD_EXP 29
 618: PUSH
 619: LD_INT 4
 621: ARRAY
 622: PUSH
 623: LD_INT 1
 625: ARRAY
 626: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 627: LD_ADDR_EXP 19
 631: PUSH
 632: CALL_OW 45
 636: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 637: LD_EXP 30
 641: PUSH
 642: EMPTY
 643: EQUAL
 644: NOT
 645: IFFALSE 729
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 647: LD_ADDR_OWVAR 37
 651: PUSH
 652: LD_EXP 30
 656: PUSH
 657: LD_INT 1
 659: ARRAY
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 665: LD_ADDR_OWVAR 39
 669: PUSH
 670: LD_EXP 30
 674: PUSH
 675: LD_INT 2
 677: ARRAY
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 683: LD_ADDR_OWVAR 38
 687: PUSH
 688: LD_EXP 30
 692: PUSH
 693: LD_INT 3
 695: ARRAY
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 701: LD_ADDR_OWVAR 40
 705: PUSH
 706: LD_EXP 30
 710: PUSH
 711: LD_INT 4
 713: ARRAY
 714: PUSH
 715: LD_INT 1
 717: ARRAY
 718: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: CALL_OW 45
 728: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 729: LD_EXP 19
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 741: LD_EXP 20
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 753: LD_EXP 19
 757: PPUSH
 758: LD_INT 99
 760: PPUSH
 761: LD_INT 154
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 48
// if JMMGirlVeh then
 771: LD_EXP 30
 775: IFFALSE 795
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 777: LD_EXP 20
 781: PPUSH
 782: LD_INT 98
 784: PPUSH
 785: LD_INT 159
 787: PPUSH
 788: LD_INT 0
 790: PPUSH
 791: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 795: LD_ADDR_EXP 1
 799: PUSH
 800: LD_STRING 14_JMM
 802: PPUSH
 803: LD_INT 1
 805: PPUSH
 806: CALL 3088 0 2
 810: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_EXP 19
 820: PPUSH
 821: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 825: LD_EXP 30
 829: PUSH
 830: EMPTY
 831: EQUAL
 832: NOT
 833: IFFALSE 955
// begin if JMMGirl = 1 then
 835: LD_EXP 31
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 875
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 845: LD_ADDR_EXP 2
 849: PUSH
 850: LD_STRING 14_Joan
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 3088 0 2
 860: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_EXP 20
 870: PPUSH
 871: CALL_OW 52
// end ; if JMMGirl = 2 then
 875: LD_EXP 31
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 915
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 885: LD_ADDR_EXP 4
 889: PUSH
 890: LD_STRING 14_Lisa
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 3088 0 2
 900: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 901: LD_EXP 4
 905: PPUSH
 906: LD_EXP 20
 910: PPUSH
 911: CALL_OW 52
// end ; if JMMGirl = 3 then
 915: LD_EXP 31
 919: PUSH
 920: LD_INT 3
 922: EQUAL
 923: IFFALSE 955
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 925: LD_ADDR_EXP 16
 929: PUSH
 930: LD_STRING 14_Connie
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL 3088 0 2
 940: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
 941: LD_EXP 16
 945: PPUSH
 946: LD_EXP 20
 950: PPUSH
 951: CALL_OW 52
// end ; end ; uc_side = 4 ;
 955: LD_ADDR_OWVAR 20
 959: PUSH
 960: LD_INT 4
 962: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 963: LD_ADDR_EXP 17
 967: PUSH
 968: LD_STRING Powell
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL 3088 0 2
 978: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
 979: LD_EXP 17
 983: PPUSH
 984: LD_INT 47
 986: PPUSH
 987: LD_INT 63
 989: PPUSH
 990: LD_INT 5
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL_OW 50
// end ;
1000: LD_VAR 0 1
1004: RET
// export function PrepareHeroesFromEpsilon ; begin
1005: LD_INT 0
1007: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1008: LD_ADDR_EXP 4
1012: PUSH
1013: LD_STRING Lisa
1015: PPUSH
1016: CALL 3145 0 1
1020: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1021: LD_ADDR_EXP 5
1025: PUSH
1026: LD_STRING Donaldson
1028: PPUSH
1029: CALL 3145 0 1
1033: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1034: LD_ADDR_EXP 6
1038: PUSH
1039: LD_STRING Bobby
1041: PPUSH
1042: CALL 3145 0 1
1046: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1047: LD_ADDR_EXP 7
1051: PUSH
1052: LD_STRING Cyrus
1054: PPUSH
1055: CALL 3145 0 1
1059: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1060: LD_ADDR_EXP 8
1064: PUSH
1065: LD_STRING Denis
1067: PPUSH
1068: CALL 3145 0 1
1072: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1073: LD_ADDR_EXP 9
1077: PUSH
1078: LD_STRING Brown
1080: PPUSH
1081: CALL 3145 0 1
1085: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1086: LD_ADDR_EXP 10
1090: PUSH
1091: LD_STRING Gladstone
1093: PPUSH
1094: CALL 3145 0 1
1098: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1099: LD_ADDR_EXP 11
1103: PUSH
1104: LD_STRING Houten
1106: PPUSH
1107: CALL 3145 0 1
1111: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1112: LD_ADDR_EXP 12
1116: PUSH
1117: LD_STRING Cornel
1119: PPUSH
1120: CALL 3145 0 1
1124: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1125: LD_ADDR_EXP 13
1129: PUSH
1130: LD_STRING Gary
1132: PPUSH
1133: CALL 3145 0 1
1137: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1138: LD_ADDR_EXP 14
1142: PUSH
1143: LD_STRING Frank
1145: PPUSH
1146: CALL 3145 0 1
1150: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1151: LD_ADDR_EXP 15
1155: PUSH
1156: LD_STRING Kikuchi
1158: PPUSH
1159: CALL 3145 0 1
1163: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1164: LD_EXP 4
1168: PPUSH
1169: LD_INT 6
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1179: LD_EXP 5
1183: PPUSH
1184: LD_INT 6
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1194: LD_EXP 6
1198: PPUSH
1199: LD_INT 6
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1209: LD_EXP 7
1213: PPUSH
1214: LD_INT 6
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1224: LD_EXP 8
1228: PPUSH
1229: LD_INT 6
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1239: LD_EXP 9
1243: PPUSH
1244: LD_INT 6
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1254: LD_EXP 10
1258: PPUSH
1259: LD_INT 6
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1269: LD_EXP 11
1273: PPUSH
1274: LD_INT 6
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1284: LD_EXP 12
1288: PPUSH
1289: LD_INT 6
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1299: LD_EXP 13
1303: PPUSH
1304: LD_INT 6
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1314: LD_EXP 14
1318: PPUSH
1319: LD_INT 6
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1329: LD_EXP 15
1333: PPUSH
1334: LD_INT 6
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// end ;
1344: LD_VAR 0 1
1348: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1349: LD_INT 0
1351: PPUSH
1352: PPUSH
1353: PPUSH
1354: PPUSH
1355: PPUSH
// uc_side = 4 ;
1356: LD_ADDR_OWVAR 20
1360: PUSH
1361: LD_INT 4
1363: ST_TO_ADDR
// uc_nation = 1 ;
1364: LD_ADDR_OWVAR 21
1368: PUSH
1369: LD_INT 1
1371: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1372: LD_ADDR_EXP 18
1376: PUSH
1377: LD_STRING 13s_others
1379: PPUSH
1380: CALL_OW 31
1384: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 4
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 21
1402: PUSH
1403: LD_INT 1
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: PUSH
1419: LD_EXP 17
1423: PUSH
1424: EMPTY
1425: LIST
1426: DIFF
1427: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1428: LD_ADDR_VAR 0 5
1432: PUSH
1433: LD_VAR 0 4
1437: PPUSH
1438: CALL 3202 0 1
1442: ST_TO_ADDR
// if others13 >= 8 then
1443: LD_EXP 18
1447: PUSH
1448: LD_INT 8
1450: GREATEREQUAL
1451: IFFALSE 1514
// begin for i = 1 to 8 do
1453: LD_ADDR_VAR 0 2
1457: PUSH
1458: DOUBLE
1459: LD_INT 1
1461: DEC
1462: ST_TO_ADDR
1463: LD_INT 8
1465: PUSH
1466: FOR_TO
1467: IFFALSE 1510
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1469: LD_EXP 18
1473: PUSH
1474: LD_VAR 0 2
1478: ARRAY
1479: PPUSH
1480: LD_INT 6
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1490: LD_ADDR_EXP 18
1494: PUSH
1495: LD_EXP 18
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL_OW 3
1507: ST_TO_ADDR
// end ;
1508: GO 1466
1510: POP
1511: POP
// end else
1512: GO 1575
// begin for i = 1 to others13 do
1514: LD_ADDR_VAR 0 2
1518: PUSH
1519: DOUBLE
1520: LD_INT 1
1522: DEC
1523: ST_TO_ADDR
1524: LD_EXP 18
1528: PUSH
1529: FOR_TO
1530: IFFALSE 1573
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1532: LD_EXP 18
1536: PUSH
1537: LD_VAR 0 2
1541: ARRAY
1542: PPUSH
1543: LD_INT 6
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1553: LD_ADDR_EXP 18
1557: PUSH
1558: LD_EXP 18
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 3
1570: ST_TO_ADDR
// end ;
1571: GO 1529
1573: POP
1574: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1575: LD_ADDR_VAR 0 4
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 21
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: LD_EXP 17
1613: PUSH
1614: EMPTY
1615: LIST
1616: DIFF
1617: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1618: LD_ADDR_VAR 0 5
1622: PUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: CALL 3202 0 1
1632: ST_TO_ADDR
// if others13 >= heroLenght then
1633: LD_EXP 18
1637: PUSH
1638: LD_VAR 0 5
1642: GREATEREQUAL
1643: IFFALSE 1708
// begin for i = 1 to heroLenght do
1645: LD_ADDR_VAR 0 2
1649: PUSH
1650: DOUBLE
1651: LD_INT 1
1653: DEC
1654: ST_TO_ADDR
1655: LD_VAR 0 5
1659: PUSH
1660: FOR_TO
1661: IFFALSE 1704
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1663: LD_EXP 18
1667: PUSH
1668: LD_VAR 0 2
1672: ARRAY
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1684: LD_ADDR_EXP 18
1688: PUSH
1689: LD_EXP 18
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 3
1701: ST_TO_ADDR
// end ;
1702: GO 1660
1704: POP
1705: POP
// end else
1706: GO 1769
// begin for i = 1 to others13 do
1708: LD_ADDR_VAR 0 2
1712: PUSH
1713: DOUBLE
1714: LD_INT 1
1716: DEC
1717: ST_TO_ADDR
1718: LD_EXP 18
1722: PUSH
1723: FOR_TO
1724: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ i ] , PowellBaseSpawn , false ) ;
1726: LD_EXP 18
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1723
1767: POP
1768: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1769: LD_ADDR_VAR 0 4
1773: PUSH
1774: LD_INT 22
1776: PUSH
1777: LD_INT 4
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 21
1786: PUSH
1787: LD_INT 1
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PPUSH
1798: CALL_OW 69
1802: PUSH
1803: LD_EXP 17
1807: PUSH
1808: EMPTY
1809: LIST
1810: DIFF
1811: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 3202 0 1
1826: ST_TO_ADDR
// if heroLenght < 19 then
1827: LD_VAR 0 5
1831: PUSH
1832: LD_INT 19
1834: LESS
1835: IFFALSE 1933
// for i = 1 to 19 - heroLenght do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_INT 19
1849: PUSH
1850: LD_VAR 0 5
1854: MINUS
1855: PUSH
1856: FOR_TO
1857: IFFALSE 1931
// begin hc_gallery =  ;
1859: LD_ADDR_OWVAR 33
1863: PUSH
1864: LD_STRING 
1866: ST_TO_ADDR
// hc_name =  ;
1867: LD_ADDR_OWVAR 26
1871: PUSH
1872: LD_STRING 
1874: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_INT 4
1883: PPUSH
1884: CALL_OW 12
1888: PPUSH
1889: LD_INT 6
1891: PPUSH
1892: LD_INT 8
1894: PPUSH
1895: CALL_OW 12
1899: PPUSH
1900: CALL_OW 380
// un = CreateHuman ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: CALL_OW 44
1913: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
1914: LD_VAR 0 3
1918: PPUSH
1919: LD_INT 6
1921: PPUSH
1922: LD_INT 0
1924: PPUSH
1925: CALL_OW 49
// end ;
1929: GO 1856
1931: POP
1932: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1933: LD_ADDR_VAR 0 4
1937: PUSH
1938: LD_INT 22
1940: PUSH
1941: LD_INT 4
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 21
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PPUSH
1962: CALL_OW 69
1966: PUSH
1967: LD_EXP 17
1971: PUSH
1972: EMPTY
1973: LIST
1974: DIFF
1975: ST_TO_ADDR
// amUnitsSkillTab = SortByDistanceXY ( tmp , true ) ;
1976: LD_ADDR_EXP 24
1980: PUSH
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: CALL 3243 0 2
1993: ST_TO_ADDR
// amUnitsAttack = amUnitsAttack ^ [ [ amUnitsSkillTab [ 1 ] [ 1 ] ] , [ amUnitsSkillTab [ 2 ] [ 1 ] ] , [ amUnitsSkillTab [ 3 ] [ 1 ] ] , [ amUnitsSkillTab [ 4 ] [ 1 ] ] , [ amUnitsSkillTab [ 5 ] [ 1 ] ] , [ amUnitsSkillTab [ 6 ] [ 1 ] ] , [ amUnitsSkillTab [ 7 ] [ 1 ] ] , [ amUnitsSkillTab [ 8 ] [ 1 ] ] ] ;
1994: LD_ADDR_EXP 25
1998: PUSH
1999: LD_EXP 25
2003: PUSH
2004: LD_EXP 24
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PUSH
2013: LD_INT 1
2015: ARRAY
2016: PUSH
2017: EMPTY
2018: LIST
2019: PUSH
2020: LD_EXP 24
2024: PUSH
2025: LD_INT 2
2027: ARRAY
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PUSH
2033: EMPTY
2034: LIST
2035: PUSH
2036: LD_EXP 24
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PUSH
2049: EMPTY
2050: LIST
2051: PUSH
2052: LD_EXP 24
2056: PUSH
2057: LD_INT 4
2059: ARRAY
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PUSH
2065: EMPTY
2066: LIST
2067: PUSH
2068: LD_EXP 24
2072: PUSH
2073: LD_INT 5
2075: ARRAY
2076: PUSH
2077: LD_INT 1
2079: ARRAY
2080: PUSH
2081: EMPTY
2082: LIST
2083: PUSH
2084: LD_EXP 24
2088: PUSH
2089: LD_INT 6
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PUSH
2097: EMPTY
2098: LIST
2099: PUSH
2100: LD_EXP 24
2104: PUSH
2105: LD_INT 7
2107: ARRAY
2108: PUSH
2109: LD_INT 1
2111: ARRAY
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: LD_EXP 24
2120: PUSH
2121: LD_INT 8
2123: ARRAY
2124: PUSH
2125: LD_INT 1
2127: ARRAY
2128: PUSH
2129: EMPTY
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: ADD
2142: ST_TO_ADDR
// display_strings = amUnitsAttack ;
2143: LD_ADDR_OWVAR 47
2147: PUSH
2148: LD_EXP 25
2152: ST_TO_ADDR
// end ; end_of_file
2153: LD_VAR 0 1
2157: RET
// export function PrepareLegion ; var i ; begin
2158: LD_INT 0
2160: PPUSH
2161: PPUSH
// uc_side = 8 ;
2162: LD_ADDR_OWVAR 20
2166: PUSH
2167: LD_INT 8
2169: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
2170: LD_ADDR_EXP 23
2174: PUSH
2175: LD_STRING Kurt
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL 3088 0 2
2185: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
2186: LD_EXP 23
2190: PPUSH
2191: LD_INT 122
2193: PPUSH
2194: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
2198: LD_INT 8
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 122
2206: PPUSH
2207: LD_INT 10
2209: PPUSH
2210: LD_INT 2
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: CALL 3881 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
2220: LD_INT 8
2222: PPUSH
2223: LD_INT 2
2225: PPUSH
2226: LD_INT 99
2228: PPUSH
2229: LD_INT 10
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: CALL 3881 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
2242: LD_INT 8
2244: PPUSH
2245: LD_INT 2
2247: PPUSH
2248: LD_INT 104
2250: PPUSH
2251: LD_INT 10
2253: PPUSH
2254: LD_INT 1
2256: PPUSH
2257: LD_INT 2
2259: PPUSH
2260: CALL 3881 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
2264: LD_INT 8
2266: PPUSH
2267: LD_INT 2
2269: PPUSH
2270: LD_INT 104
2272: PPUSH
2273: LD_INT 10
2275: PPUSH
2276: LD_INT 8
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: CALL 3881 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
2286: LD_INT 8
2288: PPUSH
2289: LD_INT 2
2291: PPUSH
2292: LD_INT 118
2294: PPUSH
2295: LD_INT 10
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: CALL 3881 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
2308: LD_INT 8
2310: PPUSH
2311: LD_INT 2
2313: PPUSH
2314: LD_INT 117
2316: PPUSH
2317: LD_INT 10
2319: PPUSH
2320: LD_INT 3
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL 3881 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2330: LD_ADDR_VAR 0 2
2334: PUSH
2335: LD_INT 22
2337: PUSH
2338: LD_INT 8
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 21
2347: PUSH
2348: LD_INT 3
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: LD_INT 30
2357: PUSH
2358: LD_INT 32
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 58
2367: PUSH
2368: EMPTY
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: PUSH
2382: FOR_IN
2383: IFFALSE 2411
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
2385: LD_INT 8
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: LD_VAR 0 2
2395: PPUSH
2396: LD_INT 10
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 1
2404: PPUSH
2405: CALL 3881 0 6
2409: GO 2382
2411: POP
2412: POP
// end ; end_of_file
2413: LD_VAR 0 1
2417: RET
// export function PrepareRussians ; var i ; begin
2418: LD_INT 0
2420: PPUSH
2421: PPUSH
// uc_side = 3 ;
2422: LD_ADDR_OWVAR 20
2426: PUSH
2427: LD_INT 3
2429: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2430: LD_ADDR_EXP 21
2434: PUSH
2435: LD_STRING Platonov
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL 3088 0 2
2445: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
2446: LD_EXP 21
2450: PPUSH
2451: LD_INT 23
2453: PPUSH
2454: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
2458: LD_INT 3
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: LD_INT 26
2466: PPUSH
2467: LD_INT 10
2469: PPUSH
2470: LD_INT 2
2472: PPUSH
2473: LD_INT 5
2475: PPUSH
2476: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
2480: LD_INT 3
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: LD_INT 26
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 6
2497: PPUSH
2498: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
2502: LD_INT 3
2504: PPUSH
2505: LD_INT 3
2507: PPUSH
2508: LD_INT 27
2510: PPUSH
2511: LD_INT 10
2513: PPUSH
2514: LD_INT 9
2516: PPUSH
2517: LD_INT 6
2519: PPUSH
2520: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
2524: LD_INT 3
2526: PPUSH
2527: LD_INT 3
2529: PPUSH
2530: LD_INT 27
2532: PPUSH
2533: LD_INT 10
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: LD_INT 3
2541: PPUSH
2542: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
2546: LD_INT 3
2548: PPUSH
2549: LD_INT 3
2551: PPUSH
2552: LD_INT 4
2554: PPUSH
2555: LD_INT 10
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: LD_INT 6
2563: PPUSH
2564: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: LD_INT 10
2576: PPUSH
2577: LD_INT 10
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 6
2585: PPUSH
2586: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
2590: LD_INT 3
2592: PPUSH
2593: LD_INT 3
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 10
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: CALL 3881 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
2612: LD_INT 3
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: LD_INT 10
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 3
2629: PPUSH
2630: CALL 3881 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2634: LD_ADDR_VAR 0 2
2638: PUSH
2639: LD_INT 22
2641: PUSH
2642: LD_INT 3
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 21
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 30
2661: PUSH
2662: LD_INT 32
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: LD_INT 58
2671: PUSH
2672: EMPTY
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL_OW 69
2685: PUSH
2686: FOR_IN
2687: IFFALSE 2715
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
2689: LD_INT 3
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_VAR 0 2
2699: PPUSH
2700: LD_INT 10
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: LD_INT 1
2708: PPUSH
2709: CALL 3881 0 6
2713: GO 2686
2715: POP
2716: POP
// end ; end_of_file
2717: LD_VAR 0 1
2721: RET
// export function PrepareAlliance ; var i ; begin
2722: LD_INT 0
2724: PPUSH
2725: PPUSH
// uc_side = 7 ;
2726: LD_ADDR_OWVAR 20
2730: PUSH
2731: LD_INT 7
2733: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
2734: LD_ADDR_EXP 22
2738: PUSH
2739: LD_STRING Roth
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL 3088 0 2
2749: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
2750: LD_EXP 22
2754: PPUSH
2755: LD_INT 249
2757: PPUSH
2758: LD_INT 187
2760: PPUSH
2761: LD_INT 0
2763: PPUSH
2764: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
2768: LD_EXP 22
2772: PPUSH
2773: LD_INT 248
2775: PPUSH
2776: LD_INT 187
2778: PPUSH
2779: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
2783: LD_INT 7
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: LD_INT 45
2791: PPUSH
2792: LD_INT 10
2794: PPUSH
2795: LD_INT 2
2797: PPUSH
2798: LD_INT 3
2800: PPUSH
2801: CALL 3881 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
2805: LD_INT 7
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: LD_INT 45
2813: PPUSH
2814: LD_INT 10
2816: PPUSH
2817: LD_INT 2
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL 3881 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
2827: LD_INT 7
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 194
2835: PPUSH
2836: LD_INT 10
2838: PPUSH
2839: LD_INT 5
2841: PPUSH
2842: LD_INT 4
2844: PPUSH
2845: CALL 3881 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
2849: LD_INT 7
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: LD_INT 194
2857: PPUSH
2858: LD_INT 10
2860: PPUSH
2861: LD_INT 8
2863: PPUSH
2864: LD_INT 6
2866: PPUSH
2867: CALL 3881 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
2871: LD_INT 7
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_INT 156
2879: PPUSH
2880: LD_INT 10
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: LD_INT 6
2888: PPUSH
2889: CALL 3881 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
2893: LD_INT 7
2895: PPUSH
2896: LD_INT 3
2898: PPUSH
2899: LD_INT 162
2901: PPUSH
2902: LD_INT 10
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: LD_INT 6
2910: PPUSH
2911: CALL 3881 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
2915: LD_INT 7
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: LD_INT 39
2923: PPUSH
2924: LD_INT 10
2926: PPUSH
2927: LD_INT 4
2929: PPUSH
2930: LD_INT 4
2932: PPUSH
2933: CALL 3881 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 3
2942: PPUSH
2943: LD_INT 133
2945: PPUSH
2946: LD_INT 10
2948: PPUSH
2949: LD_INT 4
2951: PPUSH
2952: LD_INT 4
2954: PPUSH
2955: CALL 3881 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
2959: LD_INT 7
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 46
2967: PPUSH
2968: LD_INT 10
2970: PPUSH
2971: LD_INT 4
2973: PPUSH
2974: LD_INT 2
2976: PPUSH
2977: CALL 3881 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 7
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 21
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 30
3008: PUSH
3009: LD_INT 32
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 58
3018: PUSH
3019: EMPTY
3020: LIST
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: PPUSH
3028: CALL_OW 69
3032: PUSH
3033: FOR_IN
3034: IFFALSE 3081
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
3036: LD_INT 7
3038: PPUSH
3039: LD_INT 1
3041: PUSH
3042: LD_INT 3
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 10
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 1
3074: PPUSH
3075: CALL 3881 0 6
3079: GO 3033
3081: POP
3082: POP
// end ; end_of_file
3083: LD_VAR 0 1
3087: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
// if exist_mode then
3092: LD_VAR 0 2
3096: IFFALSE 3115
// unit := CreateCharacter ( ident ) else
3098: LD_ADDR_VAR 0 4
3102: PUSH
3103: LD_VAR 0 1
3107: PPUSH
3108: CALL_OW 34
3112: ST_TO_ADDR
3113: GO 3130
// unit := NewCharacter ( ident ) ;
3115: LD_ADDR_VAR 0 4
3119: PUSH
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 25
3129: ST_TO_ADDR
// result := unit ;
3130: LD_ADDR_VAR 0 3
3134: PUSH
3135: LD_VAR 0 4
3139: ST_TO_ADDR
// end ;
3140: LD_VAR 0 3
3144: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
3145: LD_INT 0
3147: PPUSH
3148: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
3149: LD_STRING 13s_
3151: PUSH
3152: LD_VAR 0 1
3156: STR
3157: PPUSH
3158: CALL_OW 28
3162: PUSH
3163: LD_INT 1
3165: EQUAL
3166: IFFALSE 3187
// unit = CreateCharacter ( 13s_ & ident ) ;
3168: LD_ADDR_VAR 0 3
3172: PUSH
3173: LD_STRING 13s_
3175: PUSH
3176: LD_VAR 0 1
3180: STR
3181: PPUSH
3182: CALL_OW 34
3186: ST_TO_ADDR
// result := unit ;
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: LD_VAR 0 3
3196: ST_TO_ADDR
// end ;
3197: LD_VAR 0 2
3201: RET
// export function TabLenght ( tab ) ; var i ; begin
3202: LD_INT 0
3204: PPUSH
3205: PPUSH
// for i = 1 to tab do
3206: LD_ADDR_VAR 0 3
3210: PUSH
3211: DOUBLE
3212: LD_INT 1
3214: DEC
3215: ST_TO_ADDR
3216: LD_VAR 0 1
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3236
// result = i ;
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: LD_VAR 0 3
3233: ST_TO_ADDR
3234: GO 3221
3236: POP
3237: POP
// end ;
3238: LD_VAR 0 2
3242: RET
// export function SortByDistanceXY ( list , asc ) ; var i , j , tmp ; begin
3243: LD_INT 0
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
// if not list then
3249: LD_VAR 0 1
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3605
// result := [ ] ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: EMPTY
3264: ST_TO_ADDR
// for i in list do
3265: LD_ADDR_VAR 0 4
3269: PUSH
3270: LD_VAR 0 1
3274: PUSH
3275: FOR_IN
3276: IFFALSE 3517
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
3278: LD_ADDR_VAR 0 6
3282: PUSH
3283: LD_VAR 0 4
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: CALL_OW 259
3295: PUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 259
3308: PLUS
3309: PUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 3
3317: PPUSH
3318: CALL_OW 259
3322: PLUS
3323: PUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 4
3331: PPUSH
3332: CALL_OW 259
3336: PLUS
3337: PUSH
3338: LD_INT 4
3340: DIV
3341: ST_TO_ADDR
// if not result then
3342: LD_VAR 0 3
3346: NOT
3347: IFFALSE 3373
// result := [ [ i , tmp ] ] else
3349: LD_ADDR_VAR 0 3
3353: PUSH
3354: LD_VAR 0 4
3358: PUSH
3359: LD_VAR 0 6
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: EMPTY
3369: LIST
3370: ST_TO_ADDR
3371: GO 3515
// begin if result [ result ] [ 2 ] < tmp then
3373: LD_VAR 0 3
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_INT 2
3386: ARRAY
3387: PUSH
3388: LD_VAR 0 6
3392: LESS
3393: IFFALSE 3435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3395: LD_ADDR_VAR 0 3
3399: PUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: LD_VAR 0 3
3409: PUSH
3410: LD_INT 1
3412: PLUS
3413: PPUSH
3414: LD_VAR 0 4
3418: PUSH
3419: LD_VAR 0 6
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 2
3432: ST_TO_ADDR
3433: GO 3515
// for j = 1 to result do
3435: LD_ADDR_VAR 0 5
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3513
// begin if tmp < result [ j ] [ 2 ] then
3453: LD_VAR 0 6
3457: PUSH
3458: LD_VAR 0 3
3462: PUSH
3463: LD_VAR 0 5
3467: ARRAY
3468: PUSH
3469: LD_INT 2
3471: ARRAY
3472: LESS
3473: IFFALSE 3511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3475: LD_ADDR_VAR 0 3
3479: PUSH
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: LD_VAR 0 4
3494: PUSH
3495: LD_VAR 0 6
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 2
3508: ST_TO_ADDR
// break ;
3509: GO 3513
// end ; end ;
3511: GO 3450
3513: POP
3514: POP
// end ; end ;
3515: GO 3275
3517: POP
3518: POP
// if result and not asc then
3519: LD_VAR 0 3
3523: PUSH
3524: LD_VAR 0 2
3528: NOT
3529: AND
3530: IFFALSE 3605
// begin tmp := result ;
3532: LD_ADDR_VAR 0 6
3536: PUSH
3537: LD_VAR 0 3
3541: ST_TO_ADDR
// for i = tmp downto 1 do
3542: LD_ADDR_VAR 0 4
3546: PUSH
3547: DOUBLE
3548: LD_VAR 0 6
3552: INC
3553: ST_TO_ADDR
3554: LD_INT 1
3556: PUSH
3557: FOR_DOWNTO
3558: IFFALSE 3603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3560: LD_ADDR_VAR 0 3
3564: PUSH
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_VAR 0 6
3574: PUSH
3575: LD_VAR 0 4
3579: MINUS
3580: PUSH
3581: LD_INT 1
3583: PLUS
3584: PPUSH
3585: LD_VAR 0 6
3589: PUSH
3590: LD_VAR 0 4
3594: ARRAY
3595: PPUSH
3596: CALL_OW 1
3600: ST_TO_ADDR
3601: GO 3557
3603: POP
3604: POP
// end ; end ;
3605: LD_VAR 0 3
3609: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3610: LD_INT 0
3612: PPUSH
3613: PPUSH
3614: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
3615: LD_ADDR_VAR 0 1
3619: PUSH
3620: LD_VAR 0 1
3624: PUSH
3625: LD_EXP 1
3629: PUSH
3630: LD_EXP 2
3634: PUSH
3635: LD_EXP 3
3639: PUSH
3640: LD_EXP 4
3644: PUSH
3645: LD_EXP 5
3649: PUSH
3650: LD_EXP 6
3654: PUSH
3655: LD_EXP 7
3659: PUSH
3660: LD_EXP 8
3664: PUSH
3665: LD_EXP 9
3669: PUSH
3670: LD_EXP 10
3674: PUSH
3675: LD_EXP 11
3679: PUSH
3680: LD_EXP 12
3684: PUSH
3685: LD_EXP 13
3689: PUSH
3690: LD_EXP 14
3694: PUSH
3695: LD_EXP 15
3699: PUSH
3700: LD_EXP 17
3704: PUSH
3705: LD_EXP 16
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: DIFF
3729: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3730: LD_ADDR_VAR 0 6
3734: PUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 12
3747: ST_TO_ADDR
// for i = 1 to characters do
3748: LD_ADDR_VAR 0 5
3752: PUSH
3753: DOUBLE
3754: LD_INT 1
3756: DEC
3757: ST_TO_ADDR
3758: LD_VAR 0 1
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3874
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3766: LD_VAR 0 5
3770: PUSH
3771: LD_VAR 0 6
3775: EQUAL
3776: PUSH
3777: LD_VAR 0 1
3781: PUSH
3782: LD_VAR 0 5
3786: ARRAY
3787: PPUSH
3788: CALL_OW 258
3792: PUSH
3793: LD_INT 1
3795: EQUAL
3796: AND
3797: IFFALSE 3819
// Say ( characters [ i ] , dialogMID ) ;
3799: LD_VAR 0 1
3803: PUSH
3804: LD_VAR 0 5
3808: ARRAY
3809: PPUSH
3810: LD_VAR 0 2
3814: PPUSH
3815: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3819: LD_VAR 0 5
3823: PUSH
3824: LD_VAR 0 6
3828: EQUAL
3829: PUSH
3830: LD_VAR 0 1
3834: PUSH
3835: LD_VAR 0 5
3839: ARRAY
3840: PPUSH
3841: CALL_OW 258
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: AND
3850: IFFALSE 3872
// Say ( characters [ i ] , dialogFID ) ;
3852: LD_VAR 0 1
3856: PUSH
3857: LD_VAR 0 5
3861: ARRAY
3862: PPUSH
3863: LD_VAR 0 3
3867: PPUSH
3868: CALL_OW 88
// end ;
3872: GO 3763
3874: POP
3875: POP
// end ;
3876: LD_VAR 0 4
3880: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
3881: LD_INT 0
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
3887: PPUSH
// for i = 1 to count do
3888: LD_ADDR_VAR 0 8
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_VAR 0 6
3902: PUSH
3903: FOR_TO
3904: IFFALSE 3985
// begin uc_side = side ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_VAR 0 1
3915: ST_TO_ADDR
// uc_nation = nation ;
3916: LD_ADDR_OWVAR 21
3920: PUSH
3921: LD_VAR 0 2
3925: ST_TO_ADDR
// hc_gallery =  ;
3926: LD_ADDR_OWVAR 33
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_name =  ;
3934: LD_ADDR_OWVAR 26
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3942: LD_INT 0
3944: PPUSH
3945: LD_VAR 0 5
3949: PPUSH
3950: LD_VAR 0 4
3954: PPUSH
3955: CALL_OW 380
// un = CreateHuman ;
3959: LD_ADDR_VAR 0 10
3963: PUSH
3964: CALL_OW 44
3968: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3969: LD_VAR 0 10
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL_OW 52
// end ;
3983: GO 3903
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 7
3991: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
4003: PPUSH
4004: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
4005: LD_INT 2100
4007: PUSH
4008: LD_INT 3150
4010: PUSH
4011: LD_INT 4200
4013: PUSH
4014: LD_INT 5250
4016: PUSH
4017: LD_INT 6300
4019: PUSH
4020: LD_INT 7350
4022: PUSH
4023: LD_INT 8400
4025: PUSH
4026: LD_INT 9450
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 1
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: CALL_OW 12
4049: ARRAY
4050: PPUSH
4051: CALL_OW 67
// amChassisTab = [ ] ;
4055: LD_ADDR_VAR 0 19
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// arChassisTab = [ ] ;
4062: LD_ADDR_VAR 0 18
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// ruChassisTab = [ ] ;
4069: LD_ADDR_VAR 0 17
4073: PUSH
4074: EMPTY
4075: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4076: LD_INT 35
4078: PPUSH
4079: CALL_OW 67
// if nation = 1 then
4083: LD_VAR 0 5
4087: PUSH
4088: LD_INT 1
4090: EQUAL
4091: IFFALSE 4582
// begin uc_side = side ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_VAR 0 2
4102: ST_TO_ADDR
// uc_nation = nation ;
4103: LD_ADDR_OWVAR 21
4107: PUSH
4108: LD_VAR 0 5
4112: ST_TO_ADDR
// vc_engine = vehengine ;
4113: LD_ADDR_OWVAR 39
4117: PUSH
4118: LD_VAR 0 6
4122: ST_TO_ADDR
// vc_control = vehcontrol ;
4123: LD_ADDR_OWVAR 38
4127: PUSH
4128: LD_VAR 0 7
4132: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4133: LD_ADDR_OWVAR 40
4137: PUSH
4138: LD_VAR 0 10
4142: PUSH
4143: LD_INT 1
4145: PPUSH
4146: LD_VAR 0 10
4150: PPUSH
4151: CALL_OW 12
4155: ARRAY
4156: ST_TO_ADDR
// for j = 1 to AMWeapon do
4157: LD_ADDR_VAR 0 14
4161: PUSH
4162: DOUBLE
4163: LD_INT 1
4165: DEC
4166: ST_TO_ADDR
4167: LD_VAR 0 10
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4474
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4175: LD_VAR 0 10
4179: PUSH
4180: LD_VAR 0 14
4184: ARRAY
4185: PUSH
4186: LD_INT 2
4188: EQUAL
4189: PUSH
4190: LD_VAR 0 10
4194: PUSH
4195: LD_VAR 0 14
4199: ARRAY
4200: PUSH
4201: LD_INT 3
4203: EQUAL
4204: OR
4205: IFFALSE 4258
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4207: LD_ADDR_VAR 0 19
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 5
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4234: LD_ADDR_OWVAR 37
4238: PUSH
4239: LD_VAR 0 19
4243: PUSH
4244: LD_INT 1
4246: PPUSH
4247: LD_VAR 0 19
4251: PPUSH
4252: CALL_OW 12
4256: ARRAY
4257: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4258: LD_VAR 0 10
4262: PUSH
4263: LD_VAR 0 14
4267: ARRAY
4268: PUSH
4269: LD_INT 4
4271: EQUAL
4272: PUSH
4273: LD_VAR 0 10
4277: PUSH
4278: LD_VAR 0 14
4282: ARRAY
4283: PUSH
4284: LD_INT 5
4286: EQUAL
4287: OR
4288: PUSH
4289: LD_VAR 0 10
4293: PUSH
4294: LD_VAR 0 14
4298: ARRAY
4299: PUSH
4300: LD_INT 9
4302: EQUAL
4303: OR
4304: PUSH
4305: LD_VAR 0 10
4309: PUSH
4310: LD_VAR 0 14
4314: ARRAY
4315: PUSH
4316: LD_INT 11
4318: EQUAL
4319: OR
4320: PUSH
4321: LD_VAR 0 10
4325: PUSH
4326: LD_VAR 0 14
4330: ARRAY
4331: PUSH
4332: LD_INT 7
4334: EQUAL
4335: OR
4336: IFFALSE 4385
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4338: LD_ADDR_VAR 0 19
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: LD_INT 4
4351: PUSH
4352: LD_INT 5
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4361: LD_ADDR_OWVAR 37
4365: PUSH
4366: LD_VAR 0 19
4370: PUSH
4371: LD_INT 1
4373: PPUSH
4374: LD_VAR 0 19
4378: PPUSH
4379: CALL_OW 12
4383: ARRAY
4384: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4385: LD_VAR 0 10
4389: PUSH
4390: LD_VAR 0 14
4394: ARRAY
4395: PUSH
4396: LD_INT 8
4398: EQUAL
4399: PUSH
4400: LD_VAR 0 10
4404: PUSH
4405: LD_VAR 0 14
4409: ARRAY
4410: PUSH
4411: LD_INT 6
4413: EQUAL
4414: OR
4415: PUSH
4416: LD_VAR 0 10
4420: PUSH
4421: LD_VAR 0 14
4425: ARRAY
4426: PUSH
4427: LD_INT 10
4429: EQUAL
4430: OR
4431: IFFALSE 4472
// begin amChassisTab = [ 4 , 5 ] ;
4433: LD_ADDR_VAR 0 19
4437: PUSH
4438: LD_INT 4
4440: PUSH
4441: LD_INT 5
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4448: LD_ADDR_OWVAR 37
4452: PUSH
4453: LD_VAR 0 19
4457: PUSH
4458: LD_INT 1
4460: PPUSH
4461: LD_VAR 0 19
4465: PPUSH
4466: CALL_OW 12
4470: ARRAY
4471: ST_TO_ADDR
// end ; end ;
4472: GO 4172
4474: POP
4475: POP
// veh = CreateVehicle ;
4476: LD_ADDR_VAR 0 16
4480: PUSH
4481: CALL_OW 45
4485: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4486: LD_VAR 0 16
4490: PPUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL_OW 49
// if vc_control = 1 then
4503: LD_OWVAR 38
4507: PUSH
4508: LD_INT 1
4510: EQUAL
4511: IFFALSE 4568
// begin hc_gallery =  ;
4513: LD_ADDR_OWVAR 33
4517: PUSH
4518: LD_STRING 
4520: ST_TO_ADDR
// hc_name =  ;
4521: LD_ADDR_OWVAR 26
4525: PUSH
4526: LD_STRING 
4528: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4529: LD_INT 0
4531: PPUSH
4532: LD_INT 3
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: CALL_OW 380
// un = CreateHuman ;
4544: LD_ADDR_VAR 0 15
4548: PUSH
4549: CALL_OW 44
4553: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4554: LD_VAR 0 15
4558: PPUSH
4559: LD_VAR 0 16
4563: PPUSH
4564: CALL_OW 52
// end ; i = i + 1 ;
4568: LD_ADDR_VAR 0 13
4572: PUSH
4573: LD_VAR 0 13
4577: PUSH
4578: LD_INT 1
4580: PLUS
4581: ST_TO_ADDR
// end ; if nation = 2 then
4582: LD_VAR 0 5
4586: PUSH
4587: LD_INT 2
4589: EQUAL
4590: IFFALSE 5014
// begin uc_side = side ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_VAR 0 2
4601: ST_TO_ADDR
// uc_nation = nation ;
4602: LD_ADDR_OWVAR 21
4606: PUSH
4607: LD_VAR 0 5
4611: ST_TO_ADDR
// vc_engine = vehengine ;
4612: LD_ADDR_OWVAR 39
4616: PUSH
4617: LD_VAR 0 6
4621: ST_TO_ADDR
// vc_control = vehcontrol ;
4622: LD_ADDR_OWVAR 38
4626: PUSH
4627: LD_VAR 0 7
4631: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4632: LD_ADDR_OWVAR 40
4636: PUSH
4637: LD_VAR 0 9
4641: PUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 9
4649: PPUSH
4650: CALL_OW 12
4654: ARRAY
4655: ST_TO_ADDR
// for j = 1 to ARWeapons do
4656: LD_ADDR_VAR 0 14
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_VAR 0 9
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4906
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4674: LD_VAR 0 9
4678: PUSH
4679: LD_VAR 0 14
4683: ARRAY
4684: PUSH
4685: LD_INT 24
4687: EQUAL
4688: PUSH
4689: LD_VAR 0 9
4693: PUSH
4694: LD_VAR 0 14
4698: ARRAY
4699: PUSH
4700: LD_INT 22
4702: EQUAL
4703: OR
4704: PUSH
4705: LD_VAR 0 9
4709: PUSH
4710: LD_VAR 0 14
4714: ARRAY
4715: PUSH
4716: LD_INT 23
4718: EQUAL
4719: OR
4720: PUSH
4721: LD_VAR 0 9
4725: PUSH
4726: LD_VAR 0 14
4730: ARRAY
4731: PUSH
4732: LD_INT 30
4734: EQUAL
4735: OR
4736: IFFALSE 4785
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
4738: LD_ADDR_VAR 0 18
4742: PUSH
4743: LD_INT 11
4745: PUSH
4746: LD_INT 12
4748: PUSH
4749: LD_INT 13
4751: PUSH
4752: LD_INT 14
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4761: LD_ADDR_OWVAR 37
4765: PUSH
4766: LD_VAR 0 18
4770: PUSH
4771: LD_INT 1
4773: PPUSH
4774: LD_VAR 0 18
4778: PPUSH
4779: CALL_OW 12
4783: ARRAY
4784: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4785: LD_VAR 0 9
4789: PUSH
4790: LD_VAR 0 14
4794: ARRAY
4795: PUSH
4796: LD_INT 29
4798: EQUAL
4799: PUSH
4800: LD_VAR 0 9
4804: PUSH
4805: LD_VAR 0 14
4809: ARRAY
4810: PUSH
4811: LD_INT 28
4813: EQUAL
4814: OR
4815: PUSH
4816: LD_VAR 0 9
4820: PUSH
4821: LD_VAR 0 14
4825: ARRAY
4826: PUSH
4827: LD_INT 27
4829: EQUAL
4830: OR
4831: PUSH
4832: LD_VAR 0 9
4836: PUSH
4837: LD_VAR 0 14
4841: ARRAY
4842: PUSH
4843: LD_INT 26
4845: EQUAL
4846: OR
4847: PUSH
4848: LD_VAR 0 9
4852: PUSH
4853: LD_VAR 0 14
4857: ARRAY
4858: PUSH
4859: LD_INT 25
4861: EQUAL
4862: OR
4863: IFFALSE 4904
// begin arChassisTab = [ 13 , 14 ] ;
4865: LD_ADDR_VAR 0 18
4869: PUSH
4870: LD_INT 13
4872: PUSH
4873: LD_INT 14
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4880: LD_ADDR_OWVAR 37
4884: PUSH
4885: LD_VAR 0 18
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_VAR 0 18
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: ST_TO_ADDR
// end ; end ;
4904: GO 4671
4906: POP
4907: POP
// veh = CreateVehicle ;
4908: LD_ADDR_VAR 0 16
4912: PUSH
4913: CALL_OW 45
4917: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4918: LD_VAR 0 16
4922: PPUSH
4923: LD_VAR 0 1
4927: PPUSH
4928: LD_INT 0
4930: PPUSH
4931: CALL_OW 49
// if vc_control = 1 then
4935: LD_OWVAR 38
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: IFFALSE 5000
// begin hc_gallery =  ;
4945: LD_ADDR_OWVAR 33
4949: PUSH
4950: LD_STRING 
4952: ST_TO_ADDR
// hc_name =  ;
4953: LD_ADDR_OWVAR 26
4957: PUSH
4958: LD_STRING 
4960: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4961: LD_INT 0
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: LD_VAR 0 4
4971: PPUSH
4972: CALL_OW 380
// un = CreateHuman ;
4976: LD_ADDR_VAR 0 15
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4986: LD_VAR 0 15
4990: PPUSH
4991: LD_VAR 0 16
4995: PPUSH
4996: CALL_OW 52
// end ; i = i + 1 ;
5000: LD_ADDR_VAR 0 13
5004: PUSH
5005: LD_VAR 0 13
5009: PUSH
5010: LD_INT 1
5012: PLUS
5013: ST_TO_ADDR
// end ; if nation = 3 then
5014: LD_VAR 0 5
5018: PUSH
5019: LD_INT 3
5021: EQUAL
5022: IFFALSE 5414
// begin uc_side = side ;
5024: LD_ADDR_OWVAR 20
5028: PUSH
5029: LD_VAR 0 2
5033: ST_TO_ADDR
// uc_nation = nation ;
5034: LD_ADDR_OWVAR 21
5038: PUSH
5039: LD_VAR 0 5
5043: ST_TO_ADDR
// vc_engine = vehengine ;
5044: LD_ADDR_OWVAR 39
5048: PUSH
5049: LD_VAR 0 6
5053: ST_TO_ADDR
// vc_control = vehcontrol ;
5054: LD_ADDR_OWVAR 38
5058: PUSH
5059: LD_VAR 0 7
5063: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5064: LD_ADDR_OWVAR 40
5068: PUSH
5069: LD_VAR 0 8
5073: PUSH
5074: LD_INT 1
5076: PPUSH
5077: LD_VAR 0 8
5081: PPUSH
5082: CALL_OW 12
5086: ARRAY
5087: ST_TO_ADDR
// for j = 1 to RuWeapons do
5088: LD_ADDR_VAR 0 14
5092: PUSH
5093: DOUBLE
5094: LD_INT 1
5096: DEC
5097: ST_TO_ADDR
5098: LD_VAR 0 8
5102: PUSH
5103: FOR_TO
5104: IFFALSE 5306
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5106: LD_VAR 0 8
5110: PUSH
5111: LD_VAR 0 14
5115: ARRAY
5116: PUSH
5117: LD_INT 42
5119: EQUAL
5120: PUSH
5121: LD_VAR 0 8
5125: PUSH
5126: LD_VAR 0 14
5130: ARRAY
5131: PUSH
5132: LD_INT 43
5134: EQUAL
5135: OR
5136: PUSH
5137: LD_VAR 0 8
5141: PUSH
5142: LD_VAR 0 14
5146: ARRAY
5147: PUSH
5148: LD_INT 44
5150: EQUAL
5151: OR
5152: PUSH
5153: LD_VAR 0 8
5157: PUSH
5158: LD_VAR 0 14
5162: ARRAY
5163: PUSH
5164: LD_INT 45
5166: EQUAL
5167: OR
5168: PUSH
5169: LD_VAR 0 8
5173: PUSH
5174: LD_VAR 0 14
5178: ARRAY
5179: PUSH
5180: LD_INT 49
5182: EQUAL
5183: OR
5184: IFFALSE 5233
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5186: LD_ADDR_VAR 0 17
5190: PUSH
5191: LD_INT 21
5193: PUSH
5194: LD_INT 22
5196: PUSH
5197: LD_INT 23
5199: PUSH
5200: LD_INT 24
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5209: LD_ADDR_OWVAR 37
5213: PUSH
5214: LD_VAR 0 17
5218: PUSH
5219: LD_INT 1
5221: PPUSH
5222: LD_VAR 0 17
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5233: LD_VAR 0 8
5237: PUSH
5238: LD_VAR 0 14
5242: ARRAY
5243: PUSH
5244: LD_INT 46
5246: EQUAL
5247: PUSH
5248: LD_VAR 0 8
5252: PUSH
5253: LD_VAR 0 14
5257: ARRAY
5258: PUSH
5259: LD_INT 47
5261: EQUAL
5262: OR
5263: IFFALSE 5304
// begin ruChassisTab = [ 23 , 24 ] ;
5265: LD_ADDR_VAR 0 17
5269: PUSH
5270: LD_INT 23
5272: PUSH
5273: LD_INT 24
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5280: LD_ADDR_OWVAR 37
5284: PUSH
5285: LD_VAR 0 17
5289: PUSH
5290: LD_INT 1
5292: PPUSH
5293: LD_VAR 0 17
5297: PPUSH
5298: CALL_OW 12
5302: ARRAY
5303: ST_TO_ADDR
// end ; end ;
5304: GO 5103
5306: POP
5307: POP
// veh = CreateVehicle ;
5308: LD_ADDR_VAR 0 16
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5318: LD_VAR 0 16
5322: PPUSH
5323: LD_VAR 0 1
5327: PPUSH
5328: LD_INT 0
5330: PPUSH
5331: CALL_OW 49
// if vc_control = 1 then
5335: LD_OWVAR 38
5339: PUSH
5340: LD_INT 1
5342: EQUAL
5343: IFFALSE 5400
// begin hc_gallery =  ;
5345: LD_ADDR_OWVAR 33
5349: PUSH
5350: LD_STRING 
5352: ST_TO_ADDR
// hc_name =  ;
5353: LD_ADDR_OWVAR 26
5357: PUSH
5358: LD_STRING 
5360: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5361: LD_INT 0
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: LD_VAR 0 4
5371: PPUSH
5372: CALL_OW 380
// un = CreateHuman ;
5376: LD_ADDR_VAR 0 15
5380: PUSH
5381: CALL_OW 44
5385: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5386: LD_VAR 0 15
5390: PPUSH
5391: LD_VAR 0 16
5395: PPUSH
5396: CALL_OW 52
// end ; i = i + 1 ;
5400: LD_ADDR_VAR 0 13
5404: PUSH
5405: LD_VAR 0 13
5409: PUSH
5410: LD_INT 1
5412: PLUS
5413: ST_TO_ADDR
// end ; until i = vehCount ;
5414: LD_VAR 0 13
5418: PUSH
5419: LD_VAR 0 3
5423: EQUAL
5424: IFFALSE 4076
// repeat wait ( 0 0$1 ) ;
5426: LD_INT 35
5428: PPUSH
5429: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
5433: LD_ADDR_VAR 0 20
5437: PUSH
5438: LD_INT 22
5440: PUSH
5441: LD_VAR 0 2
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 21
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: LD_INT 661
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PPUSH
5475: CALL_OW 69
5479: ST_TO_ADDR
// if vehicleOK_list > 0 then
5480: LD_VAR 0 20
5484: PUSH
5485: LD_INT 0
5487: GREATER
5488: IFFALSE 5679
// begin for i in vehicleOK_list do
5490: LD_ADDR_VAR 0 13
5494: PUSH
5495: LD_VAR 0 20
5499: PUSH
5500: FOR_IN
5501: IFFALSE 5677
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5503: LD_ADDR_VAR 0 21
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_VAR 0 11
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PPUSH
5520: CALL_OW 69
5524: PPUSH
5525: LD_VAR 0 13
5529: PPUSH
5530: CALL_OW 74
5534: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5535: LD_ADDR_VAR 0 22
5539: PUSH
5540: LD_INT 22
5542: PUSH
5543: LD_VAR 0 11
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: LD_INT 59
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: LD_INT 21
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 21
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: PPUSH
5599: LD_VAR 0 13
5603: PPUSH
5604: CALL_OW 74
5608: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5609: LD_VAR 0 13
5613: PPUSH
5614: LD_VAR 0 21
5618: PPUSH
5619: CALL_OW 296
5623: PUSH
5624: LD_INT 8
5626: PLUS
5627: PUSH
5628: LD_VAR 0 13
5632: PPUSH
5633: LD_VAR 0 22
5637: PPUSH
5638: CALL_OW 296
5642: LESS
5643: IFFALSE 5661
// begin ComAttackUnit ( i , target1 ) ;
5645: LD_VAR 0 13
5649: PPUSH
5650: LD_VAR 0 21
5654: PPUSH
5655: CALL_OW 115
// end else
5659: GO 5675
// begin ComAttackUnit ( i , target2 ) ;
5661: LD_VAR 0 13
5665: PPUSH
5666: LD_VAR 0 22
5670: PPUSH
5671: CALL_OW 115
// end ; end ;
5675: GO 5500
5677: POP
5678: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
5679: LD_INT 22
5681: PUSH
5682: LD_VAR 0 2
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 21
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 24
5703: PUSH
5704: LD_INT 250
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 59
5713: PUSH
5714: EMPTY
5715: LIST
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 31
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 69
5738: PUSH
5739: LD_INT 0
5741: EQUAL
5742: IFFALSE 5426
// end ; end_of_file
5744: LD_VAR 0 12
5748: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
5749: LD_VAR 0 1
5753: PUSH
5754: LD_INT 235
5756: EQUAL
5757: PUSH
5758: LD_VAR 0 2
5762: PPUSH
5763: CALL_OW 255
5767: PUSH
5768: LD_INT 4
5770: EQUAL
5771: AND
5772: IFFALSE 5820
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
5774: LD_INT 235
5776: PPUSH
5777: LD_INT 84
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
5787: LD_INT 235
5789: PPUSH
5790: LD_INT 68
5792: PPUSH
5793: LD_INT 100
5795: PPUSH
5796: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
5800: LD_INT 235
5802: PPUSH
5803: CALL_OW 219
// AddComMoveXY ( PowellCargo , 43 , 74 ) ;
5807: LD_INT 235
5809: PPUSH
5810: LD_INT 43
5812: PPUSH
5813: LD_INT 74
5815: PPUSH
5816: CALL_OW 171
// end ; end ;
5820: PPOPN 2
5822: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_ext_gun and GetSide ( building ) = 4 then
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 266
5832: PUSH
5833: LD_INT 17
5835: EQUAL
5836: PUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 255
5846: PUSH
5847: LD_INT 4
5849: EQUAL
5850: AND
5851: IFFALSE 5870
// begin ComUpgrade ( PowellDepot ) ;
5853: LD_INT 84
5855: PPUSH
5856: CALL_OW 146
// ComUpgradeLab ( AmLab , b_lab_weapon ) ;
5860: LD_INT 91
5862: PPUSH
5863: LD_INT 10
5865: PPUSH
5866: CALL_OW 147
// end ; end ; end_of_file
5870: PPOPN 1
5872: END
// every 0 0$1 trigger powellBuildBase = 1 do var powellPeople ;
5873: LD_EXP 27
5877: PUSH
5878: LD_INT 1
5880: EQUAL
5881: IFFALSE 6308
5883: GO 5885
5885: DISABLE
5886: LD_INT 0
5888: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 21
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: PUSH
5923: LD_EXP 17
5927: PUSH
5928: EMPTY
5929: LIST
5930: DIFF
5931: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
5932: LD_VAR 0 1
5936: PUSH
5937: LD_INT 1
5939: ARRAY
5940: PPUSH
5941: LD_INT 235
5943: PPUSH
5944: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
5948: LD_VAR 0 1
5952: PUSH
5953: LD_INT 2
5955: ARRAY
5956: PPUSH
5957: LD_INT 2
5959: PPUSH
5960: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
5964: LD_VAR 0 1
5968: PUSH
5969: LD_INT 3
5971: ARRAY
5972: PPUSH
5973: LD_INT 2
5975: PPUSH
5976: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
5980: LD_INT 30
5982: PPUSH
5983: LD_INT 49
5985: PPUSH
5986: LD_INT 4
5988: PPUSH
5989: CALL_OW 441
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
5993: LD_INT 22
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 25
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: PPUSH
6022: LD_INT 30
6024: PPUSH
6025: LD_INT 30
6027: PPUSH
6028: LD_INT 49
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
6038: LD_INT 22
6040: PUSH
6041: LD_INT 4
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 25
6050: PUSH
6051: LD_INT 2
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 69
6066: PPUSH
6067: LD_INT 32
6069: PPUSH
6070: LD_INT 55
6072: PPUSH
6073: LD_INT 56
6075: PPUSH
6076: LD_INT 4
6078: PPUSH
6079: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 25
6095: PUSH
6096: LD_INT 2
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: PPUSH
6112: LD_INT 32
6114: PPUSH
6115: LD_INT 63
6117: PPUSH
6118: LD_INT 71
6120: PPUSH
6121: LD_INT 4
6123: PPUSH
6124: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 25
6140: PUSH
6141: LD_INT 2
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PPUSH
6157: LD_INT 28
6159: PPUSH
6160: LD_INT 40
6162: PPUSH
6163: LD_INT 72
6165: PPUSH
6166: LD_INT 4
6168: PPUSH
6169: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 42 , 72 , 4 ) ;
6173: LD_INT 22
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PPUSH
6202: LD_INT 27
6204: PPUSH
6205: LD_INT 42
6207: PPUSH
6208: LD_INT 72
6210: PPUSH
6211: LD_INT 4
6213: PPUSH
6214: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
6218: LD_INT 22
6220: PUSH
6221: LD_INT 4
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 25
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 69
6246: PPUSH
6247: LD_INT 21
6249: PPUSH
6250: LD_INT 38
6252: PPUSH
6253: LD_INT 54
6255: PPUSH
6256: LD_INT 1
6258: PPUSH
6259: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
6263: LD_INT 22
6265: PUSH
6266: LD_INT 4
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PPUSH
6292: LD_INT 17
6294: PPUSH
6295: LD_INT 41
6297: PPUSH
6298: LD_INT 51
6300: PPUSH
6301: LD_INT 3
6303: PPUSH
6304: CALL_OW 205
// end ; end_of_file end_of_file
6308: PPOPN 1
6310: END
// every 3 3$0 trigger startAttacks = 1 do
6311: LD_EXP 28
6315: PUSH
6316: LD_INT 1
6318: EQUAL
6319: IFFALSE 6379
6321: GO 6323
6323: DISABLE
// begin enable ;
6324: ENABLE
// RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
6325: LD_INT 2
6327: PPUSH
6328: LD_INT 6
6330: PPUSH
6331: LD_INT 2
6333: PPUSH
6334: LD_INT 4
6336: PPUSH
6337: CALL_OW 12
6341: PPUSH
6342: LD_INT 10
6344: PPUSH
6345: LD_INT 3
6347: PPUSH
6348: LD_INT 3
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 42
6356: PUSH
6357: LD_INT 43
6359: PUSH
6360: LD_INT 44
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: EMPTY
6369: PPUSH
6370: EMPTY
6371: PPUSH
6372: LD_INT 1
6374: PPUSH
6375: CALL 3992 0 11
// end ; end_of_file
6379: END
// every 1 do var i , dec1 , options , people ;
6380: GO 6382
6382: DISABLE
6383: LD_INT 0
6385: PPUSH
6386: PPUSH
6387: PPUSH
6388: PPUSH
// begin InGameOn ;
6389: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
6393: LD_EXP 19
6397: PUSH
6398: LD_EXP 20
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PPUSH
6407: LD_INT 48
6409: PPUSH
6410: LD_INT 68
6412: PPUSH
6413: CALL_OW 111
// if KappaStatus = 0 then
6417: LD_EXP 32
6421: PUSH
6422: LD_INT 0
6424: EQUAL
6425: IFFALSE 6471
// begin CenterNowOnUnits ( NewJMMVeh ) ;
6427: LD_EXP 19
6431: PPUSH
6432: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D1T-JMM-1
6443: PPUSH
6444: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6448: LD_EXP 19
6452: PPUSH
6453: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
6457: LD_EXP 17
6461: PPUSH
6462: LD_STRING D1nT-JMM-1
6464: PPUSH
6465: CALL_OW 88
// end else
6469: GO 6756
// begin CenterNowOnUnits ( NewJMMVeh ) ;
6471: LD_EXP 19
6475: PPUSH
6476: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
6480: LD_EXP 1
6484: PPUSH
6485: LD_STRING D1T-JMM-1
6487: PPUSH
6488: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6492: LD_EXP 19
6496: PPUSH
6497: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
6501: LD_EXP 17
6505: PPUSH
6506: LD_STRING D1T-Pow-1
6508: PPUSH
6509: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6513: LD_EXP 19
6517: PPUSH
6518: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
6522: LD_EXP 1
6526: PPUSH
6527: LD_STRING D1T-JMM-2
6529: PPUSH
6530: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6534: LD_EXP 19
6538: PPUSH
6539: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D1T-Pow-2
6550: PPUSH
6551: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6555: LD_EXP 19
6559: PPUSH
6560: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
6564: LD_EXP 1
6568: PPUSH
6569: LD_STRING D1T-JMM-3
6571: PPUSH
6572: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6576: LD_EXP 19
6580: PPUSH
6581: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
6585: LD_EXP 17
6589: PPUSH
6590: LD_STRING D1T-Pow-3
6592: PPUSH
6593: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6597: LD_EXP 19
6601: PPUSH
6602: CALL_OW 87
// if not JMMGirlVeh = [ ] then
6606: LD_EXP 30
6610: PUSH
6611: EMPTY
6612: EQUAL
6613: NOT
6614: IFFALSE 6714
// begin if JMMGirl = 1 then
6616: LD_EXP 31
6620: PUSH
6621: LD_INT 1
6623: EQUAL
6624: IFFALSE 6638
// Say ( Joan , D1T-Joan-3 ) ;
6626: LD_EXP 2
6630: PPUSH
6631: LD_STRING D1T-Joan-3
6633: PPUSH
6634: CALL_OW 88
// if JMMGirl = 2 then
6638: LD_EXP 31
6642: PUSH
6643: LD_INT 2
6645: EQUAL
6646: IFFALSE 6660
// Say ( Lisa , D1T-Lisa-3 ) ;
6648: LD_EXP 4
6652: PPUSH
6653: LD_STRING D1T-Lisa-3
6655: PPUSH
6656: CALL_OW 88
// if JMMGirl = 3 then
6660: LD_EXP 31
6664: PUSH
6665: LD_INT 3
6667: EQUAL
6668: IFFALSE 6682
// Say ( Connie , D1T-Con-3 ) ;
6670: LD_EXP 16
6674: PPUSH
6675: LD_STRING D1T-Con-3
6677: PPUSH
6678: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6682: LD_EXP 19
6686: PPUSH
6687: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
6691: LD_EXP 17
6695: PPUSH
6696: LD_STRING D1T-Pow-4
6698: PPUSH
6699: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6703: LD_EXP 19
6707: PPUSH
6708: CALL_OW 87
// end else
6712: GO 6756
// begin Say ( JMM , D1T-JMM-4 ) ;
6714: LD_EXP 1
6718: PPUSH
6719: LD_STRING D1T-JMM-4
6721: PPUSH
6722: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6726: LD_EXP 19
6730: PPUSH
6731: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
6735: LD_EXP 17
6739: PPUSH
6740: LD_STRING D1T-Pow-5
6742: PPUSH
6743: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
6747: LD_EXP 19
6751: PPUSH
6752: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
6756: LD_INT 35
6758: PPUSH
6759: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
6763: LD_EXP 19
6767: PUSH
6768: LD_EXP 20
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PPUSH
6777: LD_INT 48
6779: PPUSH
6780: LD_INT 68
6782: PPUSH
6783: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
6787: LD_EXP 19
6791: PPUSH
6792: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 15 ;
6796: LD_EXP 19
6800: PPUSH
6801: LD_EXP 17
6805: PPUSH
6806: CALL_OW 296
6810: PUSH
6811: LD_INT 15
6813: LESS
6814: IFFALSE 6756
// ComExitVehicle ( JMM ) ;
6816: LD_EXP 1
6820: PPUSH
6821: CALL_OW 121
// ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
6825: LD_EXP 20
6829: PPUSH
6830: CALL_OW 313
6834: PPUSH
6835: CALL_OW 121
// wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6846: LD_INT 35
6848: PPUSH
6849: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
6853: LD_EXP 1
6857: PPUSH
6858: LD_EXP 17
6862: PPUSH
6863: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
6867: LD_EXP 1
6871: PPUSH
6872: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
6876: LD_EXP 1
6880: PPUSH
6881: LD_EXP 17
6885: PPUSH
6886: CALL_OW 296
6890: PUSH
6891: LD_INT 6
6893: LESS
6894: IFFALSE 6846
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
6896: LD_EXP 1
6900: PUSH
6901: LD_EXP 17
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PPUSH
6910: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_EXP 17
6923: PPUSH
6924: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
6928: LD_EXP 17
6932: PPUSH
6933: LD_EXP 1
6937: PPUSH
6938: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6942: LD_EXP 1
6946: PPUSH
6947: LD_STRING D1-JMM-1
6949: PPUSH
6950: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
6954: LD_EXP 17
6958: PPUSH
6959: LD_STRING D1-Pow-1
6961: PPUSH
6962: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
6976: LD_INT 1
6978: PPUSH
6979: LD_INT 4
6981: PPUSH
6982: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
6986: LD_INT 1
6988: PPUSH
6989: LD_INT 5
6991: PPUSH
6992: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
6996: LD_INT 171
6998: PPUSH
6999: LD_INT 81
7001: PPUSH
7002: CALL_OW 84
// wait ( 0 0$4 ) ;
7006: LD_INT 140
7008: PPUSH
7009: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
7013: LD_INT 162
7015: PPUSH
7016: LD_INT 36
7018: PPUSH
7019: CALL_OW 84
// wait ( 0 0$4 ) ;
7023: LD_INT 140
7025: PPUSH
7026: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
7030: LD_INT 75
7032: PPUSH
7033: LD_INT 16
7035: PPUSH
7036: CALL_OW 84
// wait ( 0 0$4 ) ;
7040: LD_INT 140
7042: PPUSH
7043: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
7047: LD_EXP 17
7051: PUSH
7052: LD_EXP 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
7065: LD_EXP 1
7069: PPUSH
7070: LD_STRING D1-JMM-2
7072: PPUSH
7073: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
7077: LD_EXP 17
7081: PPUSH
7082: LD_STRING D1-Pow-2
7084: PPUSH
7085: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
7089: LD_EXP 1
7093: PPUSH
7094: LD_STRING D1-JMM-3
7096: PPUSH
7097: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
7101: LD_EXP 17
7105: PPUSH
7106: LD_STRING D1-Pow-3
7108: PPUSH
7109: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
7113: LD_EXP 1
7117: PPUSH
7118: LD_STRING D1-JMM-4
7120: PPUSH
7121: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
7125: LD_EXP 17
7129: PPUSH
7130: LD_STRING D1-Pow-4
7132: PPUSH
7133: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
7137: LD_EXP 1
7141: PPUSH
7142: LD_STRING D1-JMM-5
7144: PPUSH
7145: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
7149: LD_EXP 17
7153: PPUSH
7154: LD_STRING D1-Pow-5
7156: PPUSH
7157: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: LD_INT 2
7171: PUSH
7172: LD_INT 3
7174: PUSH
7175: LD_INT 4
7177: PUSH
7178: LD_INT 5
7180: PUSH
7181: LD_INT 6
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_STRING Q1
7199: PPUSH
7200: LD_VAR 0 3
7204: PPUSH
7205: CALL_OW 98
7209: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
7210: LD_ADDR_VAR 0 2
7214: PUSH
7215: LD_STRING Q1
7217: PPUSH
7218: LD_VAR 0 3
7222: PPUSH
7223: CALL_OW 98
7227: ST_TO_ADDR
// options = options diff dec1 ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_VAR 0 2
7242: DIFF
7243: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
7244: LD_VAR 0 2
7248: PPUSH
7249: LD_VAR 0 3
7253: PPUSH
7254: CALL 8743 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
7258: LD_VAR 0 2
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: LD_INT 6
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: IN
7273: PUSH
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 2
7281: EQUAL
7282: OR
7283: IFFALSE 7210
// if not ( dec1 in [ 5 , 6 ] ) then
7285: LD_VAR 0 2
7289: PUSH
7290: LD_INT 5
7292: PUSH
7293: LD_INT 6
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: IN
7300: NOT
7301: IFFALSE 7344
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_STRING Q1a
7310: PPUSH
7311: LD_INT 1
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 98
7325: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 4
7333: PLUS
7334: PPUSH
7335: LD_VAR 0 3
7339: PPUSH
7340: CALL 8743 0 2
// end ; if not JMMGirlVeh = [ ] then
7344: LD_EXP 30
7348: PUSH
7349: EMPTY
7350: EQUAL
7351: NOT
7352: IFFALSE 7493
// begin repeat wait ( 0 0$1 ) ;
7354: LD_INT 35
7356: PPUSH
7357: CALL_OW 67
// if JMMGirl = 1 then
7361: LD_EXP 31
7365: PUSH
7366: LD_INT 1
7368: EQUAL
7369: IFFALSE 7385
// ComMoveUnit ( JMM , Joan ) ;
7371: LD_EXP 1
7375: PPUSH
7376: LD_EXP 2
7380: PPUSH
7381: CALL_OW 112
// if JMMGirl = 2 then
7385: LD_EXP 31
7389: PUSH
7390: LD_INT 2
7392: EQUAL
7393: IFFALSE 7409
// ComMoveUnit ( JMM , Lisa ) ;
7395: LD_EXP 1
7399: PPUSH
7400: LD_EXP 4
7404: PPUSH
7405: CALL_OW 112
// if JMMGirl = 3 then
7409: LD_EXP 31
7413: PUSH
7414: LD_INT 3
7416: EQUAL
7417: IFFALSE 7433
// ComMoveUnit ( JMM , Connie ) ;
7419: LD_EXP 1
7423: PPUSH
7424: LD_EXP 16
7428: PPUSH
7429: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
7433: LD_EXP 1
7437: PPUSH
7438: LD_EXP 2
7442: PPUSH
7443: CALL_OW 296
7447: PUSH
7448: LD_INT 6
7450: LESS
7451: PUSH
7452: LD_EXP 1
7456: PPUSH
7457: LD_EXP 4
7461: PPUSH
7462: CALL_OW 296
7466: PUSH
7467: LD_INT 6
7469: LESS
7470: OR
7471: PUSH
7472: LD_EXP 1
7476: PPUSH
7477: LD_EXP 16
7481: PPUSH
7482: CALL_OW 296
7486: PUSH
7487: LD_INT 6
7489: LESS
7490: OR
7491: IFFALSE 7354
// end ; CenterNowOnUnits ( JMM ) ;
7493: LD_EXP 1
7497: PPUSH
7498: CALL_OW 87
// case JMMGirl of 1 :
7502: LD_EXP 31
7506: PUSH
7507: LD_INT 1
7509: DOUBLE
7510: EQUAL
7511: IFTRUE 7515
7513: GO 7558
7515: POP
// begin ComTurnUnit ( JMM , Joan ) ;
7516: LD_EXP 1
7520: PPUSH
7521: LD_EXP 2
7525: PPUSH
7526: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
7530: LD_EXP 2
7534: PPUSH
7535: LD_EXP 1
7539: PPUSH
7540: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
7544: LD_EXP 2
7548: PPUSH
7549: LD_STRING D3W-Joan-1
7551: PPUSH
7552: CALL_OW 88
// end ; 2 :
7556: GO 7661
7558: LD_INT 2
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 7609
7566: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_EXP 4
7576: PPUSH
7577: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_EXP 1
7590: PPUSH
7591: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
7595: LD_EXP 4
7599: PPUSH
7600: LD_STRING D3W-Lisa-1
7602: PPUSH
7603: CALL_OW 88
// end ; 3 :
7607: GO 7661
7609: LD_INT 3
7611: DOUBLE
7612: EQUAL
7613: IFTRUE 7617
7615: GO 7660
7617: POP
// begin ComTurnUnit ( JMM , Connie ) ;
7618: LD_EXP 1
7622: PPUSH
7623: LD_EXP 16
7627: PPUSH
7628: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
7632: LD_EXP 16
7636: PPUSH
7637: LD_EXP 1
7641: PPUSH
7642: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
7646: LD_EXP 16
7650: PPUSH
7651: LD_STRING D3W-Con-1
7653: PPUSH
7654: CALL_OW 88
// end ; end ;
7658: GO 7661
7660: POP
// Say ( JMM , D3W-JMM-1 ) ;
7661: LD_EXP 1
7665: PPUSH
7666: LD_STRING D3W-JMM-1
7668: PPUSH
7669: CALL_OW 88
// people = 0 ;
7673: LD_ADDR_VAR 0 4
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// if Lisa and people < 5 then
7681: LD_EXP 4
7685: PUSH
7686: LD_VAR 0 4
7690: PUSH
7691: LD_INT 5
7693: LESS
7694: AND
7695: IFFALSE 7727
// begin people = people + 1 ;
7697: LD_ADDR_VAR 0 4
7701: PUSH
7702: LD_VAR 0 4
7706: PUSH
7707: LD_INT 1
7709: PLUS
7710: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
7711: LD_ADDR_EXP 26
7715: PUSH
7716: LD_EXP 26
7720: PUSH
7721: LD_EXP 4
7725: ADD
7726: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
7727: LD_EXP 5
7731: PUSH
7732: LD_VAR 0 4
7736: PUSH
7737: LD_INT 5
7739: LESS
7740: AND
7741: IFFALSE 7773
// begin people = people + 1 ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_VAR 0 4
7752: PUSH
7753: LD_INT 1
7755: PLUS
7756: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
7757: LD_ADDR_EXP 26
7761: PUSH
7762: LD_EXP 26
7766: PUSH
7767: LD_EXP 5
7771: ADD
7772: ST_TO_ADDR
// end ; if Bobby and people < 5 then
7773: LD_EXP 6
7777: PUSH
7778: LD_VAR 0 4
7782: PUSH
7783: LD_INT 5
7785: LESS
7786: AND
7787: IFFALSE 7819
// begin people = people + 1 ;
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: LD_INT 1
7801: PLUS
7802: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
7803: LD_ADDR_EXP 26
7807: PUSH
7808: LD_EXP 26
7812: PUSH
7813: LD_EXP 6
7817: ADD
7818: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
7819: LD_EXP 7
7823: PUSH
7824: LD_VAR 0 4
7828: PUSH
7829: LD_INT 5
7831: LESS
7832: AND
7833: IFFALSE 7865
// begin people = people + 1 ;
7835: LD_ADDR_VAR 0 4
7839: PUSH
7840: LD_VAR 0 4
7844: PUSH
7845: LD_INT 1
7847: PLUS
7848: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
7849: LD_ADDR_EXP 26
7853: PUSH
7854: LD_EXP 26
7858: PUSH
7859: LD_EXP 7
7863: ADD
7864: ST_TO_ADDR
// end ; if Denis and people < 5 then
7865: LD_EXP 8
7869: PUSH
7870: LD_VAR 0 4
7874: PUSH
7875: LD_INT 5
7877: LESS
7878: AND
7879: IFFALSE 7911
// begin people = people + 1 ;
7881: LD_ADDR_VAR 0 4
7885: PUSH
7886: LD_VAR 0 4
7890: PUSH
7891: LD_INT 1
7893: PLUS
7894: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
7895: LD_ADDR_EXP 26
7899: PUSH
7900: LD_EXP 26
7904: PUSH
7905: LD_EXP 8
7909: ADD
7910: ST_TO_ADDR
// end ; if Brown and people < 5 then
7911: LD_EXP 9
7915: PUSH
7916: LD_VAR 0 4
7920: PUSH
7921: LD_INT 5
7923: LESS
7924: AND
7925: IFFALSE 7957
// begin people = people + 1 ;
7927: LD_ADDR_VAR 0 4
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 1
7939: PLUS
7940: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
7941: LD_ADDR_EXP 26
7945: PUSH
7946: LD_EXP 26
7950: PUSH
7951: LD_EXP 9
7955: ADD
7956: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
7957: LD_EXP 10
7961: PUSH
7962: LD_VAR 0 4
7966: PUSH
7967: LD_INT 5
7969: LESS
7970: AND
7971: IFFALSE 8003
// begin people = people + 1 ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_VAR 0 4
7982: PUSH
7983: LD_INT 1
7985: PLUS
7986: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
7987: LD_ADDR_EXP 26
7991: PUSH
7992: LD_EXP 26
7996: PUSH
7997: LD_EXP 10
8001: ADD
8002: ST_TO_ADDR
// end ; if Houten and people < 5 then
8003: LD_EXP 11
8007: PUSH
8008: LD_VAR 0 4
8012: PUSH
8013: LD_INT 5
8015: LESS
8016: AND
8017: IFFALSE 8049
// begin people = people + 1 ;
8019: LD_ADDR_VAR 0 4
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
8033: LD_ADDR_EXP 26
8037: PUSH
8038: LD_EXP 26
8042: PUSH
8043: LD_EXP 11
8047: ADD
8048: ST_TO_ADDR
// end ; if Cornel and people < 5 then
8049: LD_EXP 12
8053: PUSH
8054: LD_VAR 0 4
8058: PUSH
8059: LD_INT 5
8061: LESS
8062: AND
8063: IFFALSE 8095
// begin people = people + 1 ;
8065: LD_ADDR_VAR 0 4
8069: PUSH
8070: LD_VAR 0 4
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
8079: LD_ADDR_EXP 26
8083: PUSH
8084: LD_EXP 26
8088: PUSH
8089: LD_EXP 12
8093: ADD
8094: ST_TO_ADDR
// end ; if Gary and people < 5 then
8095: LD_EXP 13
8099: PUSH
8100: LD_VAR 0 4
8104: PUSH
8105: LD_INT 5
8107: LESS
8108: AND
8109: IFFALSE 8141
// begin people = people + 1 ;
8111: LD_ADDR_VAR 0 4
8115: PUSH
8116: LD_VAR 0 4
8120: PUSH
8121: LD_INT 1
8123: PLUS
8124: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
8125: LD_ADDR_EXP 26
8129: PUSH
8130: LD_EXP 26
8134: PUSH
8135: LD_EXP 13
8139: ADD
8140: ST_TO_ADDR
// end ; if Frank and people < 5 then
8141: LD_EXP 14
8145: PUSH
8146: LD_VAR 0 4
8150: PUSH
8151: LD_INT 5
8153: LESS
8154: AND
8155: IFFALSE 8187
// begin people = people + 1 ;
8157: LD_ADDR_VAR 0 4
8161: PUSH
8162: LD_VAR 0 4
8166: PUSH
8167: LD_INT 1
8169: PLUS
8170: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
8171: LD_ADDR_EXP 26
8175: PUSH
8176: LD_EXP 26
8180: PUSH
8181: LD_EXP 14
8185: ADD
8186: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
8187: LD_EXP 15
8191: PUSH
8192: LD_VAR 0 4
8196: PUSH
8197: LD_INT 5
8199: LESS
8200: AND
8201: IFFALSE 8233
// begin people = people + 1 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_VAR 0 4
8212: PUSH
8213: LD_INT 1
8215: PLUS
8216: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
8217: LD_ADDR_EXP 26
8221: PUSH
8222: LD_EXP 26
8226: PUSH
8227: LD_EXP 15
8231: ADD
8232: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
8233: LD_EXP 26
8237: PPUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 72
8252: PUSH
8253: LD_INT 0
8255: EQUAL
8256: IFFALSE 8274
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
8258: LD_EXP 26
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 336
// for i = 1 to 5 do
8274: LD_ADDR_VAR 0 1
8278: PUSH
8279: DOUBLE
8280: LD_INT 1
8282: DEC
8283: ST_TO_ADDR
8284: LD_INT 5
8286: PUSH
8287: FOR_TO
8288: IFFALSE 8339
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
8290: LD_EXP 26
8294: PUSH
8295: LD_VAR 0 1
8299: ARRAY
8300: PPUSH
8301: LD_INT 62
8303: PUSH
8304: LD_VAR 0 1
8308: PLUS
8309: PPUSH
8310: LD_INT 95
8312: PPUSH
8313: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
8317: LD_EXP 26
8321: PUSH
8322: LD_VAR 0 1
8326: ARRAY
8327: PPUSH
8328: LD_EXP 1
8332: PPUSH
8333: CALL_OW 179
// end ;
8337: GO 8287
8339: POP
8340: POP
// repeat wait ( 0 0$1 ) ;
8341: LD_INT 35
8343: PPUSH
8344: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
8348: LD_EXP 1
8352: PPUSH
8353: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
8357: LD_EXP 1
8361: PPUSH
8362: LD_INT 66
8364: PPUSH
8365: LD_INT 98
8367: PPUSH
8368: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
8372: LD_EXP 2
8376: PUSH
8377: LD_EXP 4
8381: PUSH
8382: LD_EXP 16
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: PPUSH
8392: LD_INT 67
8394: PPUSH
8395: LD_INT 98
8397: PPUSH
8398: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
8402: LD_EXP 1
8406: PUSH
8407: LD_EXP 2
8411: PUSH
8412: LD_EXP 4
8416: PUSH
8417: LD_EXP 16
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PPUSH
8428: LD_INT 63
8430: PPUSH
8431: LD_INT 95
8433: PPUSH
8434: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
8438: LD_EXP 1
8442: PPUSH
8443: LD_INT 9
8445: PPUSH
8446: CALL_OW 308
8450: PUSH
8451: LD_INT 9
8453: PPUSH
8454: LD_INT 22
8456: PUSH
8457: LD_INT 4
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 21
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PPUSH
8478: CALL_OW 70
8482: PUSH
8483: LD_INT 5
8485: EQUAL
8486: AND
8487: IFFALSE 8341
// wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
8496: LD_EXP 4
8500: PPUSH
8501: LD_INT 9
8503: PPUSH
8504: CALL_OW 308
8508: IFFALSE 8522
// Say ( Lisa , D3nW-Lisa-1 ) ;
8510: LD_EXP 4
8514: PPUSH
8515: LD_STRING D3nW-Lisa-1
8517: PPUSH
8518: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
8522: LD_EXP 7
8526: PPUSH
8527: LD_INT 9
8529: PPUSH
8530: CALL_OW 308
8534: IFFALSE 8548
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
8536: LD_EXP 7
8540: PPUSH
8541: LD_STRING D3nW-Cyrus-1
8543: PPUSH
8544: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
8548: LD_EXP 6
8552: PPUSH
8553: LD_INT 9
8555: PPUSH
8556: CALL_OW 308
8560: IFFALSE 8574
// Say ( Bobby , D3nW-Bobby-1 ) ;
8562: LD_EXP 6
8566: PPUSH
8567: LD_STRING D3nW-Bobby-1
8569: PPUSH
8570: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
8574: LD_EXP 13
8578: PPUSH
8579: LD_INT 9
8581: PPUSH
8582: CALL_OW 308
8586: IFFALSE 8600
// Say ( Gary , D3nW-Gary-1 ) ;
8588: LD_EXP 13
8592: PPUSH
8593: LD_STRING D3nW-Gary-1
8595: PPUSH
8596: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
8600: LD_EXP 5
8604: PPUSH
8605: LD_INT 9
8607: PPUSH
8608: CALL_OW 308
8612: IFFALSE 8626
// Say ( Donaldson , D3nW-Don-1 ) ;
8614: LD_EXP 5
8618: PPUSH
8619: LD_STRING D3nW-Don-1
8621: PPUSH
8622: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
8626: LD_EXP 12
8630: PPUSH
8631: LD_INT 9
8633: PPUSH
8634: CALL_OW 308
8638: IFFALSE 8652
// Say ( Cornel , D3nW-Corn-1 ) ;
8640: LD_EXP 12
8644: PPUSH
8645: LD_STRING D3nW-Corn-1
8647: PPUSH
8648: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
8652: LD_EXP 14
8656: PPUSH
8657: LD_INT 9
8659: PPUSH
8660: CALL_OW 308
8664: IFFALSE 8678
// Say ( Frank , D3nW-Frank-1 ) ;
8666: LD_EXP 14
8670: PPUSH
8671: LD_STRING D3nW-Frank-1
8673: PPUSH
8674: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
8678: LD_EXP 1
8682: PPUSH
8683: LD_STRING D3nW-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D3nW-JMM-1a
8697: PPUSH
8698: CALL_OW 88
// InGameOff ;
8702: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8706: LD_STRING M1
8708: PPUSH
8709: CALL_OW 337
// SaveForQuickRestart ;
8713: CALL_OW 22
// startAttacks = 1 ;
8717: LD_ADDR_EXP 28
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8725: LD_INT 175
8727: PPUSH
8728: CALL_OW 67
// powellBuildBase = 1 ;
8732: LD_ADDR_EXP 27
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
// end ;
8740: PPOPN 4
8742: END
// function ResolveQuery ( question , list_of_q ) ; begin
8743: LD_INT 0
8745: PPUSH
// case question of 1 :
8746: LD_VAR 0 1
8750: PUSH
8751: LD_INT 1
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8810
8759: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
8760: LD_EXP 1
8764: PPUSH
8765: LD_STRING D2Mot-JMM-1
8767: PPUSH
8768: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
8772: LD_EXP 17
8776: PPUSH
8777: LD_STRING D2Mot-Pow-1
8779: PPUSH
8780: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
8784: LD_EXP 1
8788: PPUSH
8789: LD_STRING D2Mot-JMM-2
8791: PPUSH
8792: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
8796: LD_EXP 17
8800: PPUSH
8801: LD_STRING D2Mot-Pow-2
8803: PPUSH
8804: CALL_OW 88
// end ; 2 :
8808: GO 9153
8810: LD_INT 2
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8894
8818: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
8819: LD_EXP 1
8823: PPUSH
8824: LD_STRING D2Rus-JMM-1
8826: PPUSH
8827: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
8831: LD_EXP 17
8835: PPUSH
8836: LD_STRING D2Rus-Pow-1
8838: PPUSH
8839: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
8843: LD_EXP 1
8847: PPUSH
8848: LD_STRING D2Rus-JMM-2
8850: PPUSH
8851: CALL_OW 88
// if not ( 3 in list_of_q ) then
8855: LD_INT 3
8857: PUSH
8858: LD_VAR 0 2
8862: IN
8863: NOT
8864: IFFALSE 8880
// Say ( Powell , D2Rus-Pow-2 ) else
8866: LD_EXP 17
8870: PPUSH
8871: LD_STRING D2Rus-Pow-2
8873: PPUSH
8874: CALL_OW 88
8878: GO 8892
// Say ( Powell , D2Rus-Pow-2a ) ;
8880: LD_EXP 17
8884: PPUSH
8885: LD_STRING D2Rus-Pow-2a
8887: PPUSH
8888: CALL_OW 88
// end ; 3 :
8892: GO 9153
8894: LD_INT 3
8896: DOUBLE
8897: EQUAL
8898: IFTRUE 8902
8900: GO 8987
8902: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_STRING D2Leg-JMM-1
8910: PPUSH
8911: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
8915: LD_EXP 17
8919: PPUSH
8920: LD_STRING D2Leg-Pow-1
8922: PPUSH
8923: CALL_OW 88
// if ( 2 in list_of_q ) then
8927: LD_INT 2
8929: PUSH
8930: LD_VAR 0 2
8934: IN
8935: IFFALSE 8961
// begin Say ( JMM , D2Leg-JMM-2 ) ;
8937: LD_EXP 1
8941: PPUSH
8942: LD_STRING D2Leg-JMM-2
8944: PPUSH
8945: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
8949: LD_EXP 17
8953: PPUSH
8954: LD_STRING D2Leg-Pow-2
8956: PPUSH
8957: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_STRING D2Leg-JMM-3
8968: PPUSH
8969: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
8973: LD_EXP 17
8977: PPUSH
8978: LD_STRING D2Leg-Pow-3
8980: PPUSH
8981: CALL_OW 88
// end ; 4 :
8985: GO 9153
8987: LD_INT 4
8989: DOUBLE
8990: EQUAL
8991: IFTRUE 8995
8993: GO 9070
8995: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
8996: LD_EXP 1
9000: PPUSH
9001: LD_STRING D2Ar-JMM-1
9003: PPUSH
9004: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
9008: LD_EXP 17
9012: PPUSH
9013: LD_STRING D2Ar-Pow-1
9015: PPUSH
9016: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
9020: LD_EXP 1
9024: PPUSH
9025: LD_STRING D2Ar-JMM-2
9027: PPUSH
9028: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
9032: LD_EXP 17
9036: PPUSH
9037: LD_STRING D2Ar-Pow-2
9039: PPUSH
9040: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
9044: LD_EXP 1
9048: PPUSH
9049: LD_STRING D2Ar-JMM-3
9051: PPUSH
9052: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
9056: LD_EXP 17
9060: PPUSH
9061: LD_STRING D2Ar-Pow-3
9063: PPUSH
9064: CALL_OW 88
// end ; 5 :
9068: GO 9153
9070: LD_INT 5
9072: DOUBLE
9073: EQUAL
9074: IFTRUE 9078
9076: GO 9093
9078: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
9079: LD_EXP 1
9083: PPUSH
9084: LD_STRING D2Conf-JMM-1
9086: PPUSH
9087: CALL_OW 88
// end ; 6 :
9091: GO 9153
9093: LD_INT 6
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9152
9101: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
9102: LD_EXP 1
9106: PPUSH
9107: LD_STRING D2Com-JMM-1
9109: PPUSH
9110: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
9114: LD_EXP 17
9118: PPUSH
9119: LD_STRING D2Com-Pow-1
9121: PPUSH
9122: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
9126: LD_EXP 1
9130: PPUSH
9131: LD_STRING D2Com-JMM-2
9133: PPUSH
9134: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
9138: LD_EXP 17
9142: PPUSH
9143: LD_STRING D2Com-Pow-2
9145: PPUSH
9146: CALL_OW 88
// end ; end ;
9150: GO 9153
9152: POP
// end ;
9153: LD_VAR 0 3
9157: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
9158: LD_INT 9
9160: PPUSH
9161: LD_INT 22
9163: PUSH
9164: LD_INT 4
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 21
9173: PUSH
9174: LD_INT 1
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PPUSH
9185: CALL_OW 70
9189: IFFALSE 9234
9191: GO 9193
9193: DISABLE
// begin enable ;
9194: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
9195: LD_INT 9
9197: PPUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 1
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 70
9226: PPUSH
9227: LD_INT 1
9229: PPUSH
9230: CALL_OW 235
// end ;
9234: END
