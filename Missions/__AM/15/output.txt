// export JMM , Lisa , Gary , Cornell , Frank ; export Powell ; starting begin Resetfog ;
   0: CALL_OW 335
// PrepareHeroes ;
   4: CALL 9 0 0
// end ; end_of_file
   8: END
// export function PrepareHeroes ; begin
   9: LD_INT 0
  11: PPUSH
// uc_side = 1 ;
  12: LD_ADDR_OWVAR 20
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_STRING JMM
  27: PPUSH
  28: LD_INT 0
  30: PPUSH
  31: CALL 255 0 2
  35: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING Lisa
  43: PPUSH
  44: LD_INT 0
  46: PPUSH
  47: CALL 255 0 2
  51: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING Gary
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 255 0 2
  67: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_STRING Cornell
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 255 0 2
  83: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
  84: LD_ADDR_EXP 5
  88: PUSH
  89: LD_STRING Frank
  91: PPUSH
  92: LD_INT 0
  94: PPUSH
  95: CALL 255 0 2
  99: ST_TO_ADDR
// uc_side = 4 ;
 100: LD_ADDR_OWVAR 20
 104: PUSH
 105: LD_INT 4
 107: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_STRING Powell
 115: PPUSH
 116: LD_INT 0
 118: PPUSH
 119: CALL 255 0 2
 123: ST_TO_ADDR
// PlaceUnitXYR ( JMM , 101 , 153 , 5 , false ) ;
 124: LD_EXP 1
 128: PPUSH
 129: LD_INT 101
 131: PPUSH
 132: LD_INT 153
 134: PPUSH
 135: LD_INT 5
 137: PPUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 50
// PlaceUnitXYR ( Lisa , 101 , 153 , 5 , false ) ;
 145: LD_EXP 2
 149: PPUSH
 150: LD_INT 101
 152: PPUSH
 153: LD_INT 153
 155: PPUSH
 156: LD_INT 5
 158: PPUSH
 159: LD_INT 0
 161: PPUSH
 162: CALL_OW 50
// PlaceUnitXYR ( Gary , 101 , 153 , 5 , false ) ;
 166: LD_EXP 3
 170: PPUSH
 171: LD_INT 101
 173: PPUSH
 174: LD_INT 153
 176: PPUSH
 177: LD_INT 5
 179: PPUSH
 180: LD_INT 0
 182: PPUSH
 183: CALL_OW 50
// PlaceUnitXYR ( Cornell , 101 , 153 , 5 , false ) ;
 187: LD_EXP 4
 191: PPUSH
 192: LD_INT 101
 194: PPUSH
 195: LD_INT 153
 197: PPUSH
 198: LD_INT 5
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 50
// PlaceUnitXYR ( Frank , 101 , 153 , 5 , false ) ;
 208: LD_EXP 5
 212: PPUSH
 213: LD_INT 101
 215: PPUSH
 216: LD_INT 153
 218: PPUSH
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 50
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
 229: LD_EXP 6
 233: PPUSH
 234: LD_INT 47
 236: PPUSH
 237: LD_INT 63
 239: PPUSH
 240: LD_INT 5
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL_OW 50
// end ; end_of_file end_of_file end_of_file end_of_file
 250: LD_VAR 0 1
 254: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 255: LD_INT 0
 257: PPUSH
 258: PPUSH
// if exist_mode then
 259: LD_VAR 0 2
 263: IFFALSE 282
// unit := CreateCharacter ( ident ) else
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PPUSH
 275: CALL_OW 34
 279: ST_TO_ADDR
 280: GO 297
// unit := NewCharacter ( ident ) ;
 282: LD_ADDR_VAR 0 4
 286: PUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 25
 296: ST_TO_ADDR
// result := unit ;
 297: LD_ADDR_VAR 0 3
 301: PUSH
 302: LD_VAR 0 4
 306: ST_TO_ADDR
// end ;
 307: LD_VAR 0 3
 311: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
 325: LD_INT 2100
 327: PUSH
 328: LD_INT 3150
 330: PUSH
 331: LD_INT 4200
 333: PUSH
 334: LD_INT 5250
 336: PUSH
 337: LD_INT 6300
 339: PUSH
 340: LD_INT 7350
 342: PUSH
 343: LD_INT 8400
 345: PUSH
 346: LD_INT 9450
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 8
 364: PPUSH
 365: CALL_OW 12
 369: ARRAY
 370: PPUSH
 371: CALL_OW 67
// amChassisTab = [ ] ;
 375: LD_ADDR_VAR 0 19
 379: PUSH
 380: EMPTY
 381: ST_TO_ADDR
// arChassisTab = [ ] ;
 382: LD_ADDR_VAR 0 18
 386: PUSH
 387: EMPTY
 388: ST_TO_ADDR
// ruChassisTab = [ ] ;
 389: LD_ADDR_VAR 0 17
 393: PUSH
 394: EMPTY
 395: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
 396: LD_INT 35
 398: PPUSH
 399: CALL_OW 67
// if nation = 1 then
 403: LD_VAR 0 5
 407: PUSH
 408: LD_INT 1
 410: EQUAL
 411: IFFALSE 902
// begin uc_side = side ;
 413: LD_ADDR_OWVAR 20
 417: PUSH
 418: LD_VAR 0 2
 422: ST_TO_ADDR
// uc_nation = nation ;
 423: LD_ADDR_OWVAR 21
 427: PUSH
 428: LD_VAR 0 5
 432: ST_TO_ADDR
// vc_engine = vehengine ;
 433: LD_ADDR_OWVAR 39
 437: PUSH
 438: LD_VAR 0 6
 442: ST_TO_ADDR
// vc_control = vehcontrol ;
 443: LD_ADDR_OWVAR 38
 447: PUSH
 448: LD_VAR 0 7
 452: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
 453: LD_ADDR_OWVAR 40
 457: PUSH
 458: LD_VAR 0 10
 462: PUSH
 463: LD_INT 1
 465: PPUSH
 466: LD_VAR 0 10
 470: PPUSH
 471: CALL_OW 12
 475: ARRAY
 476: ST_TO_ADDR
// for j = 1 to AMWeapon do
 477: LD_ADDR_VAR 0 14
 481: PUSH
 482: DOUBLE
 483: LD_INT 1
 485: DEC
 486: ST_TO_ADDR
 487: LD_VAR 0 10
 491: PUSH
 492: FOR_TO
 493: IFFALSE 794
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
 495: LD_VAR 0 10
 499: PUSH
 500: LD_VAR 0 14
 504: ARRAY
 505: PUSH
 506: LD_INT 2
 508: EQUAL
 509: PUSH
 510: LD_VAR 0 10
 514: PUSH
 515: LD_VAR 0 14
 519: ARRAY
 520: PUSH
 521: LD_INT 3
 523: EQUAL
 524: OR
 525: IFFALSE 578
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
 527: LD_ADDR_VAR 0 19
 531: PUSH
 532: LD_INT 1
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 3
 540: PUSH
 541: LD_INT 4
 543: PUSH
 544: LD_INT 5
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
 554: LD_ADDR_OWVAR 37
 558: PUSH
 559: LD_VAR 0 19
 563: PUSH
 564: LD_INT 1
 566: PPUSH
 567: LD_VAR 0 19
 571: PPUSH
 572: CALL_OW 12
 576: ARRAY
 577: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
 578: LD_VAR 0 10
 582: PUSH
 583: LD_VAR 0 14
 587: ARRAY
 588: PUSH
 589: LD_INT 4
 591: EQUAL
 592: PUSH
 593: LD_VAR 0 10
 597: PUSH
 598: LD_VAR 0 14
 602: ARRAY
 603: PUSH
 604: LD_INT 5
 606: EQUAL
 607: OR
 608: PUSH
 609: LD_VAR 0 10
 613: PUSH
 614: LD_VAR 0 14
 618: ARRAY
 619: PUSH
 620: LD_INT 9
 622: EQUAL
 623: OR
 624: PUSH
 625: LD_VAR 0 10
 629: PUSH
 630: LD_VAR 0 14
 634: ARRAY
 635: PUSH
 636: LD_INT 11
 638: EQUAL
 639: OR
 640: PUSH
 641: LD_VAR 0 10
 645: PUSH
 646: LD_VAR 0 14
 650: ARRAY
 651: PUSH
 652: LD_INT 7
 654: EQUAL
 655: OR
 656: IFFALSE 705
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
 658: LD_ADDR_VAR 0 19
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 3
 668: PUSH
 669: LD_INT 4
 671: PUSH
 672: LD_INT 5
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
 681: LD_ADDR_OWVAR 37
 685: PUSH
 686: LD_VAR 0 19
 690: PUSH
 691: LD_INT 1
 693: PPUSH
 694: LD_VAR 0 19
 698: PPUSH
 699: CALL_OW 12
 703: ARRAY
 704: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
 705: LD_VAR 0 10
 709: PUSH
 710: LD_VAR 0 14
 714: ARRAY
 715: PUSH
 716: LD_INT 8
 718: EQUAL
 719: PUSH
 720: LD_VAR 0 10
 724: PUSH
 725: LD_VAR 0 14
 729: ARRAY
 730: PUSH
 731: LD_INT 6
 733: EQUAL
 734: OR
 735: PUSH
 736: LD_VAR 0 10
 740: PUSH
 741: LD_VAR 0 14
 745: ARRAY
 746: PUSH
 747: LD_INT 10
 749: EQUAL
 750: OR
 751: IFFALSE 792
// begin amChassisTab = [ 4 , 5 ] ;
 753: LD_ADDR_VAR 0 19
 757: PUSH
 758: LD_INT 4
 760: PUSH
 761: LD_INT 5
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
 768: LD_ADDR_OWVAR 37
 772: PUSH
 773: LD_VAR 0 19
 777: PUSH
 778: LD_INT 1
 780: PPUSH
 781: LD_VAR 0 19
 785: PPUSH
 786: CALL_OW 12
 790: ARRAY
 791: ST_TO_ADDR
// end ; end ;
 792: GO 492
 794: POP
 795: POP
// veh = CreateVehicle ;
 796: LD_ADDR_VAR 0 16
 800: PUSH
 801: CALL_OW 45
 805: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
 806: LD_VAR 0 16
 810: PPUSH
 811: LD_VAR 0 1
 815: PPUSH
 816: LD_INT 0
 818: PPUSH
 819: CALL_OW 49
// if vc_control = 1 then
 823: LD_OWVAR 38
 827: PUSH
 828: LD_INT 1
 830: EQUAL
 831: IFFALSE 888
// begin hc_gallery =  ;
 833: LD_ADDR_OWVAR 33
 837: PUSH
 838: LD_STRING 
 840: ST_TO_ADDR
// hc_name =  ;
 841: LD_ADDR_OWVAR 26
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
 849: LD_INT 0
 851: PPUSH
 852: LD_INT 3
 854: PPUSH
 855: LD_VAR 0 4
 859: PPUSH
 860: CALL_OW 380
// un = CreateHuman ;
 864: LD_ADDR_VAR 0 15
 868: PUSH
 869: CALL_OW 44
 873: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 874: LD_VAR 0 15
 878: PPUSH
 879: LD_VAR 0 16
 883: PPUSH
 884: CALL_OW 52
// end ; i = i + 1 ;
 888: LD_ADDR_VAR 0 13
 892: PUSH
 893: LD_VAR 0 13
 897: PUSH
 898: LD_INT 1
 900: PLUS
 901: ST_TO_ADDR
// end ; if nation = 2 then
 902: LD_VAR 0 5
 906: PUSH
 907: LD_INT 2
 909: EQUAL
 910: IFFALSE 1334
// begin uc_side = side ;
 912: LD_ADDR_OWVAR 20
 916: PUSH
 917: LD_VAR 0 2
 921: ST_TO_ADDR
// uc_nation = nation ;
 922: LD_ADDR_OWVAR 21
 926: PUSH
 927: LD_VAR 0 5
 931: ST_TO_ADDR
// vc_engine = vehengine ;
 932: LD_ADDR_OWVAR 39
 936: PUSH
 937: LD_VAR 0 6
 941: ST_TO_ADDR
// vc_control = vehcontrol ;
 942: LD_ADDR_OWVAR 38
 946: PUSH
 947: LD_VAR 0 7
 951: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
 952: LD_ADDR_OWVAR 40
 956: PUSH
 957: LD_VAR 0 9
 961: PUSH
 962: LD_INT 1
 964: PPUSH
 965: LD_VAR 0 9
 969: PPUSH
 970: CALL_OW 12
 974: ARRAY
 975: ST_TO_ADDR
// for j = 1 to ARWeapons do
 976: LD_ADDR_VAR 0 14
 980: PUSH
 981: DOUBLE
 982: LD_INT 1
 984: DEC
 985: ST_TO_ADDR
 986: LD_VAR 0 9
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1226
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
 994: LD_VAR 0 9
 998: PUSH
 999: LD_VAR 0 14
1003: ARRAY
1004: PUSH
1005: LD_INT 24
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 9
1013: PUSH
1014: LD_VAR 0 14
1018: ARRAY
1019: PUSH
1020: LD_INT 22
1022: EQUAL
1023: OR
1024: PUSH
1025: LD_VAR 0 9
1029: PUSH
1030: LD_VAR 0 14
1034: ARRAY
1035: PUSH
1036: LD_INT 23
1038: EQUAL
1039: OR
1040: PUSH
1041: LD_VAR 0 9
1045: PUSH
1046: LD_VAR 0 14
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: EQUAL
1055: OR
1056: IFFALSE 1105
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
1058: LD_ADDR_VAR 0 18
1062: PUSH
1063: LD_INT 11
1065: PUSH
1066: LD_INT 12
1068: PUSH
1069: LD_INT 13
1071: PUSH
1072: LD_INT 14
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1081: LD_ADDR_OWVAR 37
1085: PUSH
1086: LD_VAR 0 18
1090: PUSH
1091: LD_INT 1
1093: PPUSH
1094: LD_VAR 0 18
1098: PPUSH
1099: CALL_OW 12
1103: ARRAY
1104: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
1105: LD_VAR 0 9
1109: PUSH
1110: LD_VAR 0 14
1114: ARRAY
1115: PUSH
1116: LD_INT 29
1118: EQUAL
1119: PUSH
1120: LD_VAR 0 9
1124: PUSH
1125: LD_VAR 0 14
1129: ARRAY
1130: PUSH
1131: LD_INT 28
1133: EQUAL
1134: OR
1135: PUSH
1136: LD_VAR 0 9
1140: PUSH
1141: LD_VAR 0 14
1145: ARRAY
1146: PUSH
1147: LD_INT 27
1149: EQUAL
1150: OR
1151: PUSH
1152: LD_VAR 0 9
1156: PUSH
1157: LD_VAR 0 14
1161: ARRAY
1162: PUSH
1163: LD_INT 26
1165: EQUAL
1166: OR
1167: PUSH
1168: LD_VAR 0 9
1172: PUSH
1173: LD_VAR 0 14
1177: ARRAY
1178: PUSH
1179: LD_INT 25
1181: EQUAL
1182: OR
1183: IFFALSE 1224
// begin arChassisTab = [ 13 , 14 ] ;
1185: LD_ADDR_VAR 0 18
1189: PUSH
1190: LD_INT 13
1192: PUSH
1193: LD_INT 14
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1200: LD_ADDR_OWVAR 37
1204: PUSH
1205: LD_VAR 0 18
1209: PUSH
1210: LD_INT 1
1212: PPUSH
1213: LD_VAR 0 18
1217: PPUSH
1218: CALL_OW 12
1222: ARRAY
1223: ST_TO_ADDR
// end ; end ;
1224: GO 991
1226: POP
1227: POP
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 16
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1238: LD_VAR 0 16
1242: PPUSH
1243: LD_VAR 0 1
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 49
// if vc_control = 1 then
1255: LD_OWVAR 38
1259: PUSH
1260: LD_INT 1
1262: EQUAL
1263: IFFALSE 1320
// begin hc_gallery =  ;
1265: LD_ADDR_OWVAR 33
1269: PUSH
1270: LD_STRING 
1272: ST_TO_ADDR
// hc_name =  ;
1273: LD_ADDR_OWVAR 26
1277: PUSH
1278: LD_STRING 
1280: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
1281: LD_INT 0
1283: PPUSH
1284: LD_INT 3
1286: PPUSH
1287: LD_VAR 0 4
1291: PPUSH
1292: CALL_OW 380
// un = CreateHuman ;
1296: LD_ADDR_VAR 0 15
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1306: LD_VAR 0 15
1310: PPUSH
1311: LD_VAR 0 16
1315: PPUSH
1316: CALL_OW 52
// end ; i = i + 1 ;
1320: LD_ADDR_VAR 0 13
1324: PUSH
1325: LD_VAR 0 13
1329: PUSH
1330: LD_INT 1
1332: PLUS
1333: ST_TO_ADDR
// end ; if nation = 3 then
1334: LD_VAR 0 5
1338: PUSH
1339: LD_INT 3
1341: EQUAL
1342: IFFALSE 1734
// begin uc_side = side ;
1344: LD_ADDR_OWVAR 20
1348: PUSH
1349: LD_VAR 0 2
1353: ST_TO_ADDR
// uc_nation = nation ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_VAR 0 5
1363: ST_TO_ADDR
// vc_engine = vehengine ;
1364: LD_ADDR_OWVAR 39
1368: PUSH
1369: LD_VAR 0 6
1373: ST_TO_ADDR
// vc_control = vehcontrol ;
1374: LD_ADDR_OWVAR 38
1378: PUSH
1379: LD_VAR 0 7
1383: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
1384: LD_ADDR_OWVAR 40
1388: PUSH
1389: LD_VAR 0 8
1393: PUSH
1394: LD_INT 1
1396: PPUSH
1397: LD_VAR 0 8
1401: PPUSH
1402: CALL_OW 12
1406: ARRAY
1407: ST_TO_ADDR
// for j = 1 to RuWeapons do
1408: LD_ADDR_VAR 0 14
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_VAR 0 8
1422: PUSH
1423: FOR_TO
1424: IFFALSE 1626
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
1426: LD_VAR 0 8
1430: PUSH
1431: LD_VAR 0 14
1435: ARRAY
1436: PUSH
1437: LD_INT 42
1439: EQUAL
1440: PUSH
1441: LD_VAR 0 8
1445: PUSH
1446: LD_VAR 0 14
1450: ARRAY
1451: PUSH
1452: LD_INT 43
1454: EQUAL
1455: OR
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 14
1466: ARRAY
1467: PUSH
1468: LD_INT 44
1470: EQUAL
1471: OR
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 14
1482: ARRAY
1483: PUSH
1484: LD_INT 45
1486: EQUAL
1487: OR
1488: PUSH
1489: LD_VAR 0 8
1493: PUSH
1494: LD_VAR 0 14
1498: ARRAY
1499: PUSH
1500: LD_INT 49
1502: EQUAL
1503: OR
1504: IFFALSE 1553
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
1506: LD_ADDR_VAR 0 17
1510: PUSH
1511: LD_INT 21
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 23
1519: PUSH
1520: LD_INT 24
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
1529: LD_ADDR_OWVAR 37
1533: PUSH
1534: LD_VAR 0 17
1538: PUSH
1539: LD_INT 1
1541: PPUSH
1542: LD_VAR 0 17
1546: PPUSH
1547: CALL_OW 12
1551: ARRAY
1552: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 14
1562: ARRAY
1563: PUSH
1564: LD_INT 46
1566: EQUAL
1567: PUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 14
1577: ARRAY
1578: PUSH
1579: LD_INT 47
1581: EQUAL
1582: OR
1583: IFFALSE 1624
// begin ruChassisTab = [ 23 , 24 ] ;
1585: LD_ADDR_VAR 0 17
1589: PUSH
1590: LD_INT 23
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_VAR 0 17
1609: PUSH
1610: LD_INT 1
1612: PPUSH
1613: LD_VAR 0 17
1617: PPUSH
1618: CALL_OW 12
1622: ARRAY
1623: ST_TO_ADDR
// end ; end ;
1624: GO 1423
1626: POP
1627: POP
// veh = CreateVehicle ;
1628: LD_ADDR_VAR 0 16
1632: PUSH
1633: CALL_OW 45
1637: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1638: LD_VAR 0 16
1642: PPUSH
1643: LD_VAR 0 1
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// if vc_control = 1 then
1655: LD_OWVAR 38
1659: PUSH
1660: LD_INT 1
1662: EQUAL
1663: IFFALSE 1720
// begin hc_gallery =  ;
1665: LD_ADDR_OWVAR 33
1669: PUSH
1670: LD_STRING 
1672: ST_TO_ADDR
// hc_name =  ;
1673: LD_ADDR_OWVAR 26
1677: PUSH
1678: LD_STRING 
1680: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL_OW 380
// un = CreateHuman ;
1696: LD_ADDR_VAR 0 15
1700: PUSH
1701: CALL_OW 44
1705: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1706: LD_VAR 0 15
1710: PPUSH
1711: LD_VAR 0 16
1715: PPUSH
1716: CALL_OW 52
// end ; i = i + 1 ;
1720: LD_ADDR_VAR 0 13
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: LD_INT 1
1732: PLUS
1733: ST_TO_ADDR
// end ; until i = vehCount ;
1734: LD_VAR 0 13
1738: PUSH
1739: LD_VAR 0 3
1743: EQUAL
1744: IFFALSE 396
// repeat wait ( 0 0$1 ) ;
1746: LD_INT 35
1748: PPUSH
1749: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
1753: LD_ADDR_VAR 0 20
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_VAR 0 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 21
1772: PUSH
1773: LD_INT 2
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 24
1782: PUSH
1783: LD_INT 661
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PPUSH
1795: CALL_OW 69
1799: ST_TO_ADDR
// if vehicleOK_list > 0 then
1800: LD_VAR 0 20
1804: PUSH
1805: LD_INT 0
1807: GREATER
1808: IFFALSE 1999
// begin for i in vehicleOK_list do
1810: LD_ADDR_VAR 0 13
1814: PUSH
1815: LD_VAR 0 20
1819: PUSH
1820: FOR_IN
1821: IFFALSE 1997
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
1823: LD_ADDR_VAR 0 21
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_VAR 0 11
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: PPUSH
1845: LD_VAR 0 13
1849: PPUSH
1850: CALL_OW 74
1854: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
1855: LD_ADDR_VAR 0 22
1859: PUSH
1860: LD_INT 22
1862: PUSH
1863: LD_VAR 0 11
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 2
1874: PUSH
1875: LD_INT 59
1877: PUSH
1878: EMPTY
1879: LIST
1880: PUSH
1881: LD_INT 21
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 21
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: PPUSH
1914: CALL_OW 69
1918: PPUSH
1919: LD_VAR 0 13
1923: PPUSH
1924: CALL_OW 74
1928: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
1929: LD_VAR 0 13
1933: PPUSH
1934: LD_VAR 0 21
1938: PPUSH
1939: CALL_OW 296
1943: PUSH
1944: LD_INT 8
1946: PLUS
1947: PUSH
1948: LD_VAR 0 13
1952: PPUSH
1953: LD_VAR 0 22
1957: PPUSH
1958: CALL_OW 296
1962: LESS
1963: IFFALSE 1981
// begin ComAttackUnit ( i , target1 ) ;
1965: LD_VAR 0 13
1969: PPUSH
1970: LD_VAR 0 21
1974: PPUSH
1975: CALL_OW 115
// end else
1979: GO 1995
// begin ComAttackUnit ( i , target2 ) ;
1981: LD_VAR 0 13
1985: PPUSH
1986: LD_VAR 0 22
1990: PPUSH
1991: CALL_OW 115
// end ; end ;
1995: GO 1820
1997: POP
1998: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
1999: LD_INT 22
2001: PUSH
2002: LD_VAR 0 2
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 21
2013: PUSH
2014: LD_INT 2
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 24
2023: PUSH
2024: LD_INT 250
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 59
2033: PUSH
2034: EMPTY
2035: LIST
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: LD_INT 31
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: PUSH
2059: LD_INT 0
2061: EQUAL
2062: IFFALSE 1746
// end ; end_of_file end_of_file end_of_file end_of_file
2064: LD_VAR 0 12
2068: RET
// every 3 3$0 do
2069: GO 2071
2071: DISABLE
// begin enable ;
2072: ENABLE
// RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
2073: LD_INT 2
2075: PPUSH
2076: LD_INT 6
2078: PPUSH
2079: LD_INT 2
2081: PPUSH
2082: LD_INT 4
2084: PPUSH
2085: CALL_OW 12
2089: PPUSH
2090: LD_INT 10
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 3
2098: PPUSH
2099: LD_INT 3
2101: PPUSH
2102: LD_INT 42
2104: PUSH
2105: LD_INT 43
2107: PUSH
2108: LD_INT 44
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PPUSH
2116: EMPTY
2117: PPUSH
2118: EMPTY
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: CALL 312 0 11
// end ;
2127: END
