// export Stevens , Baker , Gordon , Peter , DeltaDoctor , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi ; export Powell ; export others13Omega ; export Burlak , burlakVeh ; export omegaHeroes ; export ruAttacksCounter ; export amSciStatus ; export russianTPUnits ; export escapeAvalaible ; export StevensStatus , BurlakStatus ; export unitLost ; export allUnitsLengh ; export mission_prefix ; export siberiteRocketStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( amheaddepo , lambda ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING lambda
  13: PPUSH
  14: CALL_OW 500
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
  18: LD_ADDR_EXP 27
  22: PUSH
  23: LD_STRING 13_StevensStatus_1
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: CALL_OW 30
  33: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
  34: LD_ADDR_EXP 28
  38: PUSH
  39: LD_STRING 13_BurlakStatus_1
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: CALL_OW 30
  49: ST_TO_ADDR
// omegaHeroes = [ ] ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTPUnits = [ ] ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// ruAttacksCounter = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// escapeAvalaible = 0 ;
  72: LD_ADDR_EXP 26
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// allUnitsLengh = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// siberiteRocketStatus = 0 ;
  88: LD_ADDR_EXP 32
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// unitLost = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// amSciStatus = 1 ;
 104: LD_ADDR_EXP 24
 108: PUSH
 109: LD_INT 1
 111: ST_TO_ADDR
// mission_prefix = 15_ ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_STRING 15_
 119: ST_TO_ADDR
// debugMode = 0 ;
 120: LD_ADDR_EXP 33
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// PrepareOmegaTeam ;
 128: CALL 454 0 0
// SetDifficulty ;
 132: CALL 2614 0 0
// end ;
 136: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 137: LD_EXP 33
 141: PUSH
 142: LD_INT 1
 144: EQUAL
 145: IFFALSE 451
 147: GO 149
 149: DISABLE
 150: LD_INT 0
 152: PPUSH
// begin enable ;
 153: ENABLE
// fogoff ( true ) ;
 154: LD_INT 1
 156: PPUSH
 157: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 161: LD_ADDR_VAR 0 1
 165: PUSH
 166: LD_INT 22
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 21
 178: PUSH
 179: LD_INT 1
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PPUSH
 190: CALL_OW 69
 194: PUSH
 195: FOR_IN
 196: IFFALSE 212
// SetLives ( i , 1000 ) ;
 198: LD_VAR 0 1
 202: PPUSH
 203: LD_INT 1000
 205: PPUSH
 206: CALL_OW 234
 210: GO 195
 212: POP
 213: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 214: LD_ADDR_VAR 0 1
 218: PUSH
 219: LD_INT 22
 221: PUSH
 222: LD_INT 1
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 30
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 30
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PPUSH
 261: CALL_OW 69
 265: PUSH
 266: FOR_IN
 267: IFFALSE 291
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 269: LD_VAR 0 1
 273: PPUSH
 274: CALL_OW 274
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: LD_INT 9999
 284: PPUSH
 285: CALL_OW 277
 289: GO 266
 291: POP
 292: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 293: LD_ADDR_VAR 0 1
 297: PUSH
 298: LD_INT 22
 300: PUSH
 301: LD_INT 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 2
 310: PUSH
 311: LD_INT 30
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 30
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: PUSH
 345: FOR_IN
 346: IFFALSE 370
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL_OW 274
 357: PPUSH
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 9999
 363: PPUSH
 364: CALL_OW 277
 368: GO 345
 370: POP
 371: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 30
 392: PUSH
 393: LD_INT 0
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 30
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PPUSH
 419: CALL_OW 69
 423: PUSH
 424: FOR_IN
 425: IFFALSE 449
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 427: LD_VAR 0 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 9999
 442: PPUSH
 443: CALL_OW 277
 447: GO 424
 449: POP
 450: POP
// end ; end_of_file
 451: PPOPN 1
 453: END
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , mecha , avalaibleVehs , randBuild ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
 458: PPUSH
 459: PPUSH
 460: PPUSH
 461: PPUSH
 462: PPUSH
 463: PPUSH
// uc_side = 1 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 1
 471: ST_TO_ADDR
// uc_nation = 1 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 1
 479: ST_TO_ADDR
// omegaVeh = [ ] ;
 480: LD_ADDR_VAR 0 3
 484: PUSH
 485: EMPTY
 486: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 487: LD_ADDR_EXP 18
 491: PUSH
 492: LD_STRING Powell
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL 2363 0 2
 502: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
 503: LD_STRING 13s_Lisa
 505: PPUSH
 506: CALL_OW 28
 510: PUSH
 511: LD_INT 0
 513: EQUAL
 514: IFFALSE 529
// Lisa = PrepareUnitOmega ( Lisa ) ;
 516: LD_ADDR_EXP 6
 520: PUSH
 521: LD_STRING Lisa
 523: PPUSH
 524: CALL 2420 0 1
 528: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
 529: LD_STRING 13s_Donaldson
 531: PPUSH
 532: CALL_OW 28
 536: PUSH
 537: LD_INT 0
 539: EQUAL
 540: IFFALSE 555
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Donaldson
 549: PPUSH
 550: CALL 2420 0 1
 554: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
 555: LD_STRING 13s_Bobby
 557: PPUSH
 558: CALL_OW 28
 562: PUSH
 563: LD_INT 0
 565: EQUAL
 566: IFFALSE 581
// Bobby = PrepareUnitOmega ( Bobby ) ;
 568: LD_ADDR_EXP 8
 572: PUSH
 573: LD_STRING Bobby
 575: PPUSH
 576: CALL 2420 0 1
 580: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
 581: LD_STRING 13s_Cyrus
 583: PPUSH
 584: CALL_OW 28
 588: PUSH
 589: LD_INT 0
 591: EQUAL
 592: IFFALSE 607
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_STRING Cyrus
 601: PPUSH
 602: CALL 2420 0 1
 606: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
 607: LD_STRING 13s_Denis
 609: PPUSH
 610: CALL_OW 28
 614: PUSH
 615: LD_INT 0
 617: EQUAL
 618: IFFALSE 633
// Denis = PrepareUnitOmega ( Denis ) ;
 620: LD_ADDR_EXP 10
 624: PUSH
 625: LD_STRING Denis
 627: PPUSH
 628: CALL 2420 0 1
 632: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
 633: LD_STRING 13s_Brown
 635: PPUSH
 636: CALL_OW 28
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: IFFALSE 659
// Brown = PrepareUnitOmega ( Brown ) ;
 646: LD_ADDR_EXP 11
 650: PUSH
 651: LD_STRING Brown
 653: PPUSH
 654: CALL 2420 0 1
 658: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
 659: LD_STRING 13s_Gladstone
 661: PPUSH
 662: CALL_OW 28
 666: PUSH
 667: LD_INT 0
 669: EQUAL
 670: IFFALSE 685
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
 672: LD_ADDR_EXP 12
 676: PUSH
 677: LD_STRING Gladstone
 679: PPUSH
 680: CALL 2420 0 1
 684: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
 685: LD_STRING 13s_Houten
 687: PPUSH
 688: CALL_OW 28
 692: PUSH
 693: LD_INT 0
 695: EQUAL
 696: IFFALSE 711
// Houten = PrepareUnitOmega ( Houten ) ;
 698: LD_ADDR_EXP 13
 702: PUSH
 703: LD_STRING Houten
 705: PPUSH
 706: CALL 2420 0 1
 710: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
 711: LD_STRING 13s_Cornel
 713: PPUSH
 714: CALL_OW 28
 718: PUSH
 719: LD_INT 0
 721: EQUAL
 722: IFFALSE 737
// Cornell = PrepareUnitOmega ( Cornell ) ;
 724: LD_ADDR_EXP 14
 728: PUSH
 729: LD_STRING Cornell
 731: PPUSH
 732: CALL 2420 0 1
 736: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
 737: LD_STRING 13s_Gary
 739: PPUSH
 740: CALL_OW 28
 744: PUSH
 745: LD_INT 0
 747: EQUAL
 748: IFFALSE 763
// Gary = PrepareUnitOmega ( Gary ) ;
 750: LD_ADDR_EXP 15
 754: PUSH
 755: LD_STRING Gary
 757: PPUSH
 758: CALL 2420 0 1
 762: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
 763: LD_STRING 13s_Frank
 765: PPUSH
 766: CALL_OW 28
 770: PUSH
 771: LD_INT 0
 773: EQUAL
 774: IFFALSE 789
// Frank = PrepareUnitOmega ( Frank ) ;
 776: LD_ADDR_EXP 16
 780: PUSH
 781: LD_STRING Frank
 783: PPUSH
 784: CALL 2420 0 1
 788: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
 789: LD_STRING 13s_Kikuchi
 791: PPUSH
 792: CALL_OW 28
 796: PUSH
 797: LD_INT 0
 799: EQUAL
 800: IFFALSE 815
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
 802: LD_ADDR_EXP 17
 806: PUSH
 807: LD_STRING Kikuchi
 809: PPUSH
 810: CALL 2420 0 1
 814: ST_TO_ADDR
// if StevensStatus = 1 then
 815: LD_EXP 27
 819: PUSH
 820: LD_INT 1
 822: EQUAL
 823: IFFALSE 882
// begin Stevens = PrepareUnitOmega ( Stevens ) ;
 825: LD_ADDR_EXP 1
 829: PUSH
 830: LD_STRING Stevens
 832: PPUSH
 833: CALL 2420 0 1
 837: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawn , false ) ;
 838: LD_EXP 1
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 0
 848: PPUSH
 849: CALL_OW 49
// ComTurnXY ( Stevens , 125 , 16 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 125
 860: PPUSH
 861: LD_INT 16
 863: PPUSH
 864: CALL_OW 118
// SetClass ( Stevens , 4 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_INT 4
 875: PPUSH
 876: CALL_OW 336
// end else
 880: GO 948
// begin hc_name = Baker Smith ;
 882: LD_ADDR_OWVAR 26
 886: PUSH
 887: LD_STRING Baker Smith
 889: ST_TO_ADDR
// hc_gallery =  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
 898: LD_INT 1
 900: PPUSH
 901: LD_INT 10
 903: PPUSH
 904: CALL_OW 384
// Baker = CreateHuman ;
 908: LD_ADDR_EXP 2
 912: PUSH
 913: CALL_OW 44
 917: ST_TO_ADDR
// PlaceUnitArea ( Baker , StevensSpawn , false ) ;
 918: LD_EXP 2
 922: PPUSH
 923: LD_INT 2
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// ComTurnXY ( Baker , 125 , 16 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 125
 940: PPUSH
 941: LD_INT 16
 943: PPUSH
 944: CALL_OW 118
// end ; Gordon = NewCharacter ( Gordon ) ;
 948: LD_ADDR_EXP 3
 952: PUSH
 953: LD_STRING Gordon
 955: PPUSH
 956: CALL_OW 25
 960: ST_TO_ADDR
// PlaceUnitArea ( Gordon , GordonSpawn , false ) ;
 961: LD_EXP 3
 965: PPUSH
 966: LD_INT 3
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// ComTurnXY ( Gordon , 125 , 16 ) ;
 976: LD_EXP 3
 980: PPUSH
 981: LD_INT 125
 983: PPUSH
 984: LD_INT 16
 986: PPUSH
 987: CALL_OW 118
// hc_name = Peter McClain ;
 991: LD_ADDR_OWVAR 26
 995: PUSH
 996: LD_STRING Peter McClain
 998: ST_TO_ADDR
// hc_gallery =  ;
 999: LD_ADDR_OWVAR 33
1003: PUSH
1004: LD_STRING 
1006: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1007: LD_INT 1
1009: PPUSH
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 384
// Peter = CreateHuman ;
1017: LD_ADDR_EXP 4
1021: PUSH
1022: CALL_OW 44
1026: ST_TO_ADDR
// PlaceUnitArea ( Peter , PeterSpawn , false ) ;
1027: LD_EXP 4
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL_OW 49
// ComTurnXY ( Peter , 125 , 16 ) ;
1042: LD_EXP 4
1046: PPUSH
1047: LD_INT 125
1049: PPUSH
1050: LD_INT 16
1052: PPUSH
1053: CALL_OW 118
// if TestCharacters ( 10c_DeltaDoctor ) = true then
1057: LD_STRING 10c_DeltaDoctor
1059: PPUSH
1060: CALL_OW 28
1064: PUSH
1065: LD_INT 1
1067: EQUAL
1068: IFFALSE 1128
// begin DeltaDoctor = PrepareUnit ( 10c_DeltaDoctor , true ) ;
1070: LD_ADDR_EXP 5
1074: PUSH
1075: LD_STRING 10c_DeltaDoctor
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 2363 0 2
1085: ST_TO_ADDR
// PlaceUnitArea ( DeltaDoctor , DeltaSciSpawn , false ) ;
1086: LD_EXP 5
1090: PPUSH
1091: LD_INT 10
1093: PPUSH
1094: LD_INT 0
1096: PPUSH
1097: CALL_OW 49
// ComTurnXY ( DeltaDoctor , 125 , 16 ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_INT 125
1108: PPUSH
1109: LD_INT 16
1111: PPUSH
1112: CALL_OW 118
// SetClass ( DeltaDoctor , 4 ) ;
1116: LD_EXP 5
1120: PPUSH
1121: LD_INT 4
1123: PPUSH
1124: CALL_OW 336
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
1128: LD_ADDR_EXP 19
1132: PUSH
1133: LD_STRING 13_other_survivors
1135: PPUSH
1136: CALL_OW 31
1140: ST_TO_ADDR
// for i in omegaHeroes do
1141: LD_ADDR_VAR 0 2
1145: PUSH
1146: LD_EXP 22
1150: PUSH
1151: FOR_IN
1152: IFFALSE 1294
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1154: LD_INT 22
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 30
1166: PUSH
1167: LD_INT 32
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 58
1176: PUSH
1177: EMPTY
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PPUSH
1185: CALL_OW 69
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1258
// begin PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 30
1212: PUSH
1213: LD_INT 32
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: PUSH
1236: LD_INT 1
1238: ARRAY
1239: PPUSH
1240: CALL_OW 52
// SetClass ( i , 1 ) ;
1244: LD_VAR 0 2
1248: PPUSH
1249: LD_INT 1
1251: PPUSH
1252: CALL_OW 336
// end else
1256: GO 1292
// begin PlaceUnitArea ( i , [ AmericanSpawn1 , AmericanSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1258: LD_VAR 0 2
1262: PPUSH
1263: LD_INT 5
1265: PUSH
1266: LD_INT 6
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_INT 2
1278: PPUSH
1279: CALL_OW 12
1283: ARRAY
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 49
// end ; end ;
1292: GO 1151
1294: POP
1295: POP
// if others13Omega >= 2 then
1296: LD_EXP 19
1300: PUSH
1301: LD_INT 2
1303: GREATEREQUAL
1304: IFFALSE 1508
// begin for i := 1 to others13Omega - 1 do
1306: LD_ADDR_VAR 0 2
1310: PUSH
1311: DOUBLE
1312: LD_INT 1
1314: DEC
1315: ST_TO_ADDR
1316: LD_EXP 19
1320: PUSH
1321: LD_INT 1
1323: MINUS
1324: PUSH
1325: FOR_TO
1326: IFFALSE 1506
// begin if GetSkill ( others13Omega [ i ] , 3 ) < GetSkill ( others13Omega [ i + 1 ] , 3 ) then
1328: LD_EXP 19
1332: PUSH
1333: LD_VAR 0 2
1337: ARRAY
1338: PPUSH
1339: LD_INT 3
1341: PPUSH
1342: CALL_OW 259
1346: PUSH
1347: LD_EXP 19
1351: PUSH
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: PLUS
1360: ARRAY
1361: PPUSH
1362: LD_INT 3
1364: PPUSH
1365: CALL_OW 259
1369: LESS
1370: IFFALSE 1504
// begin mecha = others13Omega [ i + 1 ] ;
1372: LD_ADDR_VAR 0 6
1376: PUSH
1377: LD_EXP 19
1381: PUSH
1382: LD_VAR 0 2
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1392: LD_VAR 0 6
1396: PPUSH
1397: LD_INT 3
1399: PPUSH
1400: CALL_OW 336
// PlaceHumanInUnit ( mecha , AmControlTow ) ;
1404: LD_VAR 0 6
1408: PPUSH
1409: LD_INT 148
1411: PPUSH
1412: CALL_OW 52
// others13Omega = others13Omega diff mecha ;
1416: LD_ADDR_EXP 19
1420: PUSH
1421: LD_EXP 19
1425: PUSH
1426: LD_VAR 0 6
1430: DIFF
1431: ST_TO_ADDR
// for i in FilterUnitsInArea ( AmericanBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
1432: LD_ADDR_VAR 0 2
1436: PUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 21
1452: PUSH
1453: LD_INT 2
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 3
1462: PUSH
1463: LD_INT 61
1465: PUSH
1466: EMPTY
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: LIST
1477: PPUSH
1478: CALL_OW 70
1482: PUSH
1483: FOR_IN
1484: IFFALSE 1502
// ComLinkTo ( i , mecha ) ;
1486: LD_VAR 0 2
1490: PPUSH
1491: LD_VAR 0 6
1495: PPUSH
1496: CALL_OW 135
1500: GO 1483
1502: POP
1503: POP
// end ; end ;
1504: GO 1325
1506: POP
1507: POP
// end ; if others13Omega > 0 then
1508: LD_EXP 19
1512: PUSH
1513: LD_INT 0
1515: GREATER
1516: IFFALSE 1855
// begin for i = 1 to others13Omega do
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: DOUBLE
1524: LD_INT 1
1526: DEC
1527: ST_TO_ADDR
1528: LD_EXP 19
1532: PUSH
1533: FOR_TO
1534: IFFALSE 1853
// begin randBuild = [ AmLab1 , AmLab2 , AmLab3 , AmFab1 , AmFab2 , AmBar1 , AmBar2 ] [ Rand ( 1 , 7 ) ] ;
1536: LD_ADDR_VAR 0 8
1540: PUSH
1541: LD_INT 40
1543: PUSH
1544: LD_INT 43
1546: PUSH
1547: LD_INT 66
1549: PUSH
1550: LD_INT 51
1552: PUSH
1553: LD_INT 60
1555: PUSH
1556: LD_INT 31
1558: PUSH
1559: LD_INT 69
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 1
1573: PPUSH
1574: LD_INT 7
1576: PPUSH
1577: CALL_OW 12
1581: ARRAY
1582: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1583: LD_INT 22
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 30
1595: PUSH
1596: LD_INT 32
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 58
1605: PUSH
1606: EMPTY
1607: LIST
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PPUSH
1614: CALL_OW 69
1618: PUSH
1619: LD_INT 0
1621: GREATER
1622: IFFALSE 1699
// begin PlaceHumanInUnit ( others13Omega [ i ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1624: LD_EXP 19
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 22
1637: PUSH
1638: LD_INT 1
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 30
1647: PUSH
1648: LD_INT 32
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 58
1657: PUSH
1658: EMPTY
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_INT 1
1673: ARRAY
1674: PPUSH
1675: CALL_OW 52
// SetClass ( others13Omega [ i ] , 1 ) ;
1679: LD_EXP 19
1683: PUSH
1684: LD_VAR 0 2
1688: ARRAY
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 336
// end else
1697: GO 1851
// begin PlaceHumanInUnit ( others13Omega [ i ] , randBuild ) ;
1699: LD_EXP 19
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 8
1714: PPUSH
1715: CALL_OW 52
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_factory then
1719: LD_EXP 19
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PPUSH
1730: CALL_OW 310
1734: PPUSH
1735: CALL_OW 266
1739: PUSH
1740: LD_INT 3
1742: EQUAL
1743: IFFALSE 1763
// SetClass ( others13Omega [ i ] , 3 ) ;
1745: LD_EXP 19
1749: PUSH
1750: LD_VAR 0 2
1754: ARRAY
1755: PPUSH
1756: LD_INT 3
1758: PPUSH
1759: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = 4 then
1763: LD_EXP 19
1767: PUSH
1768: LD_VAR 0 2
1772: ARRAY
1773: PPUSH
1774: CALL_OW 310
1778: PPUSH
1779: CALL_OW 266
1783: PUSH
1784: LD_INT 4
1786: EQUAL
1787: IFFALSE 1807
// SetClass ( others13Omega [ i ] , 1 ) ;
1789: LD_EXP 19
1793: PUSH
1794: LD_VAR 0 2
1798: ARRAY
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_lab_full then
1807: LD_EXP 19
1811: PUSH
1812: LD_VAR 0 2
1816: ARRAY
1817: PPUSH
1818: CALL_OW 310
1822: PPUSH
1823: CALL_OW 266
1827: PUSH
1828: LD_INT 8
1830: EQUAL
1831: IFFALSE 1851
// SetClass ( others13Omega [ i ] , 1 ) ;
1833: LD_EXP 19
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 1
1846: PPUSH
1847: CALL_OW 336
// end ; end ;
1851: GO 1533
1853: POP
1854: POP
// end ; end ; end_of_file
1855: LD_VAR 0 1
1859: RET
// export function PrepareFirstAtacks ; var i , veh ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
1864: PPUSH
// for i := 1 to 10 do
1865: LD_ADDR_VAR 0 2
1869: PUSH
1870: DOUBLE
1871: LD_INT 1
1873: DEC
1874: ST_TO_ADDR
1875: LD_INT 10
1877: PUSH
1878: FOR_TO
1879: IFFALSE 2028
// begin uc_side = 3 ;
1881: LD_ADDR_OWVAR 20
1885: PUSH
1886: LD_INT 3
1888: ST_TO_ADDR
// uc_nation = 3 ;
1889: LD_ADDR_OWVAR 21
1893: PUSH
1894: LD_INT 3
1896: ST_TO_ADDR
// vc_engine = 3 ;
1897: LD_ADDR_OWVAR 39
1901: PUSH
1902: LD_INT 3
1904: ST_TO_ADDR
// vc_control = 3 ;
1905: LD_ADDR_OWVAR 38
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_weapon = [ 46 , 44 , 45 , 47 ] [ Rand ( 1 , 4 ) ] ;
1913: LD_ADDR_OWVAR 40
1917: PUSH
1918: LD_INT 46
1920: PUSH
1921: LD_INT 44
1923: PUSH
1924: LD_INT 45
1926: PUSH
1927: LD_INT 47
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_INT 4
1941: PPUSH
1942: CALL_OW 12
1946: ARRAY
1947: ST_TO_ADDR
// vc_chassis = 24 ;
1948: LD_ADDR_OWVAR 37
1952: PUSH
1953: LD_INT 24
1955: ST_TO_ADDR
// veh = CreateVehicle ;
1956: LD_ADDR_VAR 0 3
1960: PUSH
1961: CALL_OW 45
1965: ST_TO_ADDR
// PlaceUnitArea ( veh , PreludiumAttack , false ) ;
1966: LD_VAR 0 3
1970: PPUSH
1971: LD_INT 7
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// ComAgressiveMove ( veh , 104 , 143 ) ;
1981: LD_VAR 0 3
1985: PPUSH
1986: LD_INT 104
1988: PPUSH
1989: LD_INT 143
1991: PPUSH
1992: CALL_OW 114
// AddComAgressiveMove ( veh , 114 , 136 ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 114
2003: PPUSH
2004: LD_INT 136
2006: PPUSH
2007: CALL_OW 174
// AddComAgressiveMove ( veh , 112 , 40 ) ;
2011: LD_VAR 0 3
2015: PPUSH
2016: LD_INT 112
2018: PPUSH
2019: LD_INT 40
2021: PPUSH
2022: CALL_OW 174
// end ;
2026: GO 1878
2028: POP
2029: POP
// end ;
2030: LD_VAR 0 1
2034: RET
// export function PrepareRussianTPUNits ; var i , un ; begin
2035: LD_INT 0
2037: PPUSH
2038: PPUSH
2039: PPUSH
// for i = 1 to 6 do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: DOUBLE
2046: LD_INT 1
2048: DEC
2049: ST_TO_ADDR
2050: LD_INT 6
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2144
// begin uc_side = 3 ;
2056: LD_ADDR_OWVAR 20
2060: PUSH
2061: LD_INT 3
2063: ST_TO_ADDR
// uc_nation = 3 ;
2064: LD_ADDR_OWVAR 21
2068: PUSH
2069: LD_INT 3
2071: ST_TO_ADDR
// hc_name =  ;
2072: LD_ADDR_OWVAR 26
2076: PUSH
2077: LD_STRING 
2079: ST_TO_ADDR
// hc_gallery =  ;
2080: LD_ADDR_OWVAR 33
2084: PUSH
2085: LD_STRING 
2087: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
2088: LD_INT 0
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_INT 10
2096: PPUSH
2097: CALL_OW 380
// un = CreateHuman ;
2101: LD_ADDR_VAR 0 3
2105: PUSH
2106: CALL_OW 44
2110: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2111: LD_VAR 0 3
2115: PPUSH
2116: LD_INT 14
2118: PPUSH
2119: LD_INT 0
2121: PPUSH
2122: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2126: LD_ADDR_EXP 25
2130: PUSH
2131: LD_EXP 25
2135: PUSH
2136: LD_VAR 0 3
2140: ADD
2141: ST_TO_ADDR
// end ;
2142: GO 2053
2144: POP
2145: POP
// for i = 1 to 3 do
2146: LD_ADDR_VAR 0 2
2150: PUSH
2151: DOUBLE
2152: LD_INT 1
2154: DEC
2155: ST_TO_ADDR
2156: LD_INT 3
2158: PUSH
2159: FOR_TO
2160: IFFALSE 2250
// begin uc_side = 3 ;
2162: LD_ADDR_OWVAR 20
2166: PUSH
2167: LD_INT 3
2169: ST_TO_ADDR
// uc_nation = 3 ;
2170: LD_ADDR_OWVAR 21
2174: PUSH
2175: LD_INT 3
2177: ST_TO_ADDR
// hc_name =  ;
2178: LD_ADDR_OWVAR 26
2182: PUSH
2183: LD_STRING 
2185: ST_TO_ADDR
// hc_gallery =  ;
2186: LD_ADDR_OWVAR 33
2190: PUSH
2191: LD_STRING 
2193: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
2194: LD_INT 0
2196: PPUSH
2197: LD_INT 9
2199: PPUSH
2200: LD_INT 10
2202: PPUSH
2203: CALL_OW 380
// un = CreateHuman ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: CALL_OW 44
2216: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2217: LD_VAR 0 3
2221: PPUSH
2222: LD_INT 14
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2232: LD_ADDR_EXP 25
2236: PUSH
2237: LD_EXP 25
2241: PUSH
2242: LD_VAR 0 3
2246: ADD
2247: ST_TO_ADDR
// end ;
2248: GO 2159
2250: POP
2251: POP
// for i = 1 to 2 do
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: DOUBLE
2258: LD_INT 1
2260: DEC
2261: ST_TO_ADDR
2262: LD_INT 2
2264: PUSH
2265: FOR_TO
2266: IFFALSE 2356
// begin uc_side = 3 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 3
2275: ST_TO_ADDR
// uc_nation = 3 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 3
2283: ST_TO_ADDR
// hc_name =  ;
2284: LD_ADDR_OWVAR 26
2288: PUSH
2289: LD_STRING 
2291: ST_TO_ADDR
// hc_gallery =  ;
2292: LD_ADDR_OWVAR 33
2296: PUSH
2297: LD_STRING 
2299: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
2300: LD_INT 1
2302: PPUSH
2303: LD_INT 4
2305: PPUSH
2306: LD_INT 10
2308: PPUSH
2309: CALL_OW 380
// un = CreateHuman ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: CALL_OW 44
2322: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2323: LD_VAR 0 3
2327: PPUSH
2328: LD_INT 14
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2338: LD_ADDR_EXP 25
2342: PUSH
2343: LD_EXP 25
2347: PUSH
2348: LD_VAR 0 3
2352: ADD
2353: ST_TO_ADDR
// end ;
2354: GO 2265
2356: POP
2357: POP
// end ; end_of_file end_of_file
2358: LD_VAR 0 1
2362: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2363: LD_INT 0
2365: PPUSH
2366: PPUSH
// if exist_mode then
2367: LD_VAR 0 2
2371: IFFALSE 2390
// unit := CreateCharacter ( ident ) else
2373: LD_ADDR_VAR 0 4
2377: PUSH
2378: LD_VAR 0 1
2382: PPUSH
2383: CALL_OW 34
2387: ST_TO_ADDR
2388: GO 2405
// unit := NewCharacter ( ident ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 25
2404: ST_TO_ADDR
// result := unit ;
2405: LD_ADDR_VAR 0 3
2409: PUSH
2410: LD_VAR 0 4
2414: ST_TO_ADDR
// end ;
2415: LD_VAR 0 3
2419: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
2420: LD_INT 0
2422: PPUSH
2423: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
2424: LD_STRING 13f_
2426: PUSH
2427: LD_VAR 0 1
2431: STR
2432: PPUSH
2433: CALL_OW 28
2437: PUSH
2438: LD_INT 1
2440: EQUAL
2441: IFFALSE 2507
// begin unit = CreateCharacter ( 13f_ & ident ) ;
2443: LD_ADDR_VAR 0 3
2447: PUSH
2448: LD_STRING 13f_
2450: PUSH
2451: LD_VAR 0 1
2455: STR
2456: PPUSH
2457: CALL_OW 34
2461: ST_TO_ADDR
// omegaHeroes = omegaHeroes ^ unit ;
2462: LD_ADDR_EXP 22
2466: PUSH
2467: LD_EXP 22
2471: PUSH
2472: LD_VAR 0 3
2476: ADD
2477: ST_TO_ADDR
// if not unit = Stevens then
2478: LD_VAR 0 3
2482: PUSH
2483: LD_EXP 1
2487: EQUAL
2488: NOT
2489: IFFALSE 2507
// omegaHeroes = omegaHeroes ^ unit ;
2491: LD_ADDR_EXP 22
2495: PUSH
2496: LD_EXP 22
2500: PUSH
2501: LD_VAR 0 3
2505: ADD
2506: ST_TO_ADDR
// end ; result := unit ;
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_VAR 0 3
2516: ST_TO_ADDR
// end ;
2517: LD_VAR 0 2
2521: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
// for i in charactersList do
2526: LD_ADDR_VAR 0 4
2530: PUSH
2531: LD_VAR 0 1
2535: PUSH
2536: FOR_IN
2537: IFFALSE 2566
// begin if IsOk ( i ) then
2539: LD_VAR 0 4
2543: PPUSH
2544: CALL_OW 302
2548: IFFALSE 2564
// SaveCharacters ( i , ident ) ;
2550: LD_VAR 0 4
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL_OW 38
// end ;
2564: GO 2536
2566: POP
2567: POP
// end ;
2568: LD_VAR 0 3
2572: RET
// export function TabLenght ( tab ) ; var i ; begin
2573: LD_INT 0
2575: PPUSH
2576: PPUSH
// for i = 1 to tab do
2577: LD_ADDR_VAR 0 3
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_VAR 0 1
2591: PUSH
2592: FOR_TO
2593: IFFALSE 2607
// result = i ;
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: LD_VAR 0 3
2604: ST_TO_ADDR
2605: GO 2592
2607: POP
2608: POP
// end ;
2609: LD_VAR 0 2
2613: RET
// export function SetDifficulty ; begin
2614: LD_INT 0
2616: PPUSH
// if Difficulty = 1 then
2617: LD_OWVAR 67
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2692
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2627: LD_INT 51
2629: PPUSH
2630: LD_INT 3
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2640: LD_INT 57
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_INT 2
2648: PPUSH
2649: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2653: LD_INT 63
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2666: LD_INT 52
2668: PPUSH
2669: LD_INT 3
2671: PPUSH
2672: LD_INT 2
2674: PPUSH
2675: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2679: LD_INT 58
2681: PPUSH
2682: LD_INT 3
2684: PPUSH
2685: LD_INT 2
2687: PPUSH
2688: CALL_OW 322
// end ; if Difficulty = 2 then
2692: LD_OWVAR 67
2696: PUSH
2697: LD_INT 2
2699: EQUAL
2700: IFFALSE 2793
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2702: LD_INT 51
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 2
2710: PPUSH
2711: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2715: LD_INT 57
2717: PPUSH
2718: LD_INT 3
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2728: LD_INT 63
2730: PPUSH
2731: LD_INT 3
2733: PPUSH
2734: LD_INT 2
2736: PPUSH
2737: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2741: LD_INT 52
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2754: LD_INT 58
2756: PPUSH
2757: LD_INT 3
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2767: LD_INT 64
2769: PPUSH
2770: LD_INT 3
2772: PPUSH
2773: LD_INT 2
2775: PPUSH
2776: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2780: LD_INT 59
2782: PPUSH
2783: LD_INT 3
2785: PPUSH
2786: LD_INT 2
2788: PPUSH
2789: CALL_OW 322
// end ; if Difficulty = 3 then
2793: LD_OWVAR 67
2797: PUSH
2798: LD_INT 3
2800: EQUAL
2801: IFFALSE 2920
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2803: LD_INT 51
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: LD_INT 2
2811: PPUSH
2812: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2816: LD_INT 57
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: LD_INT 2
2824: PPUSH
2825: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 3
2834: PPUSH
2835: LD_INT 2
2837: PPUSH
2838: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2842: LD_INT 52
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 2
2850: PPUSH
2851: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2855: LD_INT 58
2857: PPUSH
2858: LD_INT 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2868: LD_INT 64
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: LD_INT 2
2876: PPUSH
2877: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
2881: LD_INT 53
2883: PPUSH
2884: LD_INT 3
2886: PPUSH
2887: LD_INT 2
2889: PPUSH
2890: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2894: LD_INT 59
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 322
// SetTech ( tech_ST3 , 3 , state_researched ) ;
2907: LD_INT 65
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 2
2915: PPUSH
2916: CALL_OW 322
// end ; end ;
2920: LD_VAR 0 1
2924: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2925: LD_INT 0
2927: PPUSH
2928: PPUSH
2929: PPUSH
// characters := characters diff [ Stevens , Baker , Gordon , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Powell ] ;
2930: LD_ADDR_VAR 0 1
2934: PUSH
2935: LD_VAR 0 1
2939: PUSH
2940: LD_EXP 1
2944: PUSH
2945: LD_EXP 2
2949: PUSH
2950: LD_EXP 3
2954: PUSH
2955: LD_EXP 6
2959: PUSH
2960: LD_EXP 7
2964: PUSH
2965: LD_EXP 8
2969: PUSH
2970: LD_EXP 9
2974: PUSH
2975: LD_EXP 10
2979: PUSH
2980: LD_EXP 11
2984: PUSH
2985: LD_EXP 12
2989: PUSH
2990: LD_EXP 13
2994: PUSH
2995: LD_EXP 14
2999: PUSH
3000: LD_EXP 15
3004: PUSH
3005: LD_EXP 16
3009: PUSH
3010: LD_EXP 17
3014: PUSH
3015: LD_EXP 18
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: DIFF
3038: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_VAR 0 1
3051: PPUSH
3052: CALL_OW 12
3056: ST_TO_ADDR
// for i = 1 to characters do
3057: LD_ADDR_VAR 0 5
3061: PUSH
3062: DOUBLE
3063: LD_INT 1
3065: DEC
3066: ST_TO_ADDR
3067: LD_VAR 0 1
3071: PUSH
3072: FOR_TO
3073: IFFALSE 3183
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3075: LD_VAR 0 5
3079: PUSH
3080: LD_VAR 0 6
3084: EQUAL
3085: PUSH
3086: LD_VAR 0 1
3090: PUSH
3091: LD_VAR 0 5
3095: ARRAY
3096: PPUSH
3097: CALL_OW 258
3101: PUSH
3102: LD_INT 1
3104: EQUAL
3105: AND
3106: IFFALSE 3128
// Say ( characters [ i ] , dialogMID ) ;
3108: LD_VAR 0 1
3112: PUSH
3113: LD_VAR 0 5
3117: ARRAY
3118: PPUSH
3119: LD_VAR 0 2
3123: PPUSH
3124: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3128: LD_VAR 0 5
3132: PUSH
3133: LD_VAR 0 6
3137: EQUAL
3138: PUSH
3139: LD_VAR 0 1
3143: PUSH
3144: LD_VAR 0 5
3148: ARRAY
3149: PPUSH
3150: CALL_OW 258
3154: PUSH
3155: LD_INT 2
3157: EQUAL
3158: AND
3159: IFFALSE 3181
// Say ( characters [ i ] , dialogFID ) ;
3161: LD_VAR 0 1
3165: PUSH
3166: LD_VAR 0 5
3170: ARRAY
3171: PPUSH
3172: LD_VAR 0 3
3176: PPUSH
3177: CALL_OW 88
// end ;
3181: GO 3072
3183: POP
3184: POP
// end ;
3185: LD_VAR 0 4
3189: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3190: LD_INT 0
3192: PPUSH
3193: PPUSH
3194: PPUSH
3195: PPUSH
3196: PPUSH
3197: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3198: LD_ADDR_VAR 0 6
3202: PUSH
3203: LD_INT 22
3205: PUSH
3206: LD_VAR 0 1
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 25
3217: PUSH
3218: LD_INT 9
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3234: LD_ADDR_VAR 0 7
3238: PUSH
3239: LD_INT 81
3241: PUSH
3242: LD_VAR 0 1
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 21
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: CALL_OW 12
3292: ST_TO_ADDR
// for i = 1 to list do
3293: LD_ADDR_VAR 0 5
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_VAR 0 6
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3511
// for ta in filter do
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: LD_VAR 0 7
3320: PUSH
3321: FOR_IN
3322: IFFALSE 3507
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3324: LD_VAR 0 6
3328: PUSH
3329: LD_VAR 0 5
3333: ARRAY
3334: PPUSH
3335: LD_VAR 0 3
3339: PPUSH
3340: CALL_OW 296
3344: PUSH
3345: LD_INT 15
3347: LESSEQUAL
3348: IFFALSE 3505
// begin case c of 1 :
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: DOUBLE
3358: EQUAL
3359: IFTRUE 3363
3361: GO 3401
3363: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3364: LD_VAR 0 6
3368: PUSH
3369: LD_VAR 0 5
3373: ARRAY
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL_OW 250
3384: PPUSH
3385: LD_VAR 0 3
3389: PPUSH
3390: CALL_OW 251
3394: PPUSH
3395: CALL_OW 154
3399: GO 3505
3401: LD_INT 2
3403: DOUBLE
3404: EQUAL
3405: IFTRUE 3409
3407: GO 3473
3409: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3410: LD_VAR 0 6
3414: PUSH
3415: LD_VAR 0 5
3419: ARRAY
3420: PPUSH
3421: LD_VAR 0 3
3425: PPUSH
3426: CALL_OW 250
3430: PUSH
3431: LD_INT 1
3433: NEG
3434: PPUSH
3435: LD_INT 1
3437: PPUSH
3438: CALL_OW 12
3442: PLUS
3443: PPUSH
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 251
3453: PUSH
3454: LD_INT 1
3456: NEG
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 12
3465: PLUS
3466: PPUSH
3467: CALL_OW 153
3471: GO 3505
3473: LD_INT 3
3475: DOUBLE
3476: EQUAL
3477: IFTRUE 3481
3479: GO 3504
3481: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3482: LD_VAR 0 6
3486: PUSH
3487: LD_VAR 0 5
3491: ARRAY
3492: PPUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: CALL_OW 115
3502: GO 3505
3504: POP
// end ; end ;
3505: GO 3321
3507: POP
3508: POP
3509: GO 3308
3511: POP
3512: POP
// end ;
3513: LD_VAR 0 2
3517: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit , vehs ; begin
3518: LD_INT 0
3520: PPUSH
3521: PPUSH
3522: PPUSH
3523: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
3524: LD_INT 22
3526: PUSH
3527: LD_VAR 0 1
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 21
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 49
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 0
3568: GREATER
3569: IFFALSE 3777
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
3571: LD_ADDR_VAR 0 5
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_VAR 0 1
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 21
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 49
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 69
3617: ST_TO_ADDR
// wait ( 0 0$3 ) ;
3618: LD_INT 105
3620: PPUSH
3621: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: LD_VAR 0 5
3634: PPUSH
3635: LD_INT 3
3637: PUSH
3638: LD_INT 60
3640: PUSH
3641: EMPTY
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 72
3652: PUSH
3653: FOR_IN
3654: IFFALSE 3765
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: LD_INT 81
3663: PUSH
3664: LD_VAR 0 1
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 101
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: LD_INT 21
3688: PUSH
3689: LD_INT 1
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: LD_INT 58
3701: PUSH
3702: EMPTY
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 69
3723: PPUSH
3724: LD_VAR 0 3
3728: PPUSH
3729: CALL_OW 74
3733: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3734: LD_VAR 0 3
3738: PPUSH
3739: LD_VAR 0 4
3743: PPUSH
3744: CALL_OW 250
3748: PPUSH
3749: LD_VAR 0 4
3753: PPUSH
3754: CALL_OW 251
3758: PPUSH
3759: CALL_OW 111
// end ;
3763: GO 3653
3765: POP
3766: POP
// until vehs = 0 ;
3767: LD_VAR 0 5
3771: PUSH
3772: LD_INT 0
3774: EQUAL
3775: IFFALSE 3571
// end ;
3777: LD_VAR 0 2
3781: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// for i = 1 to medicCount do
3795: LD_ADDR_VAR 0 13
3799: PUSH
3800: DOUBLE
3801: LD_INT 1
3803: DEC
3804: ST_TO_ADDR
3805: LD_VAR 0 7
3809: PUSH
3810: FOR_TO
3811: IFFALSE 3893
// begin uc_side = side ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_VAR 0 1
3822: ST_TO_ADDR
// uc_nation = nation ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_VAR 0 2
3832: ST_TO_ADDR
// hc_name =  ;
3833: LD_ADDR_OWVAR 26
3837: PUSH
3838: LD_STRING 
3840: ST_TO_ADDR
// hc_gallery =  ;
3841: LD_ADDR_OWVAR 33
3845: PUSH
3846: LD_STRING 
3848: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
3849: LD_INT 0
3851: PPUSH
3852: LD_INT 4
3854: PPUSH
3855: LD_VAR 0 8
3859: PPUSH
3860: CALL_OW 380
// un = CreateHuman ;
3864: LD_ADDR_VAR 0 15
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3874: LD_VAR 0 15
3878: PPUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// end ;
3891: GO 3810
3893: POP
3894: POP
// for i = 1 to soldierCount do
3895: LD_ADDR_VAR 0 13
3899: PUSH
3900: DOUBLE
3901: LD_INT 1
3903: DEC
3904: ST_TO_ADDR
3905: LD_VAR 0 3
3909: PUSH
3910: FOR_TO
3911: IFFALSE 3993
// begin uc_side = side ;
3913: LD_ADDR_OWVAR 20
3917: PUSH
3918: LD_VAR 0 1
3922: ST_TO_ADDR
// uc_nation = nation ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_VAR 0 2
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// hc_gallery =  ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_VAR 0 8
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 15
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3974: LD_VAR 0 15
3978: PPUSH
3979: LD_VAR 0 9
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// end ;
3991: GO 3910
3993: POP
3994: POP
// for i = 1 to sniperCount do
3995: LD_ADDR_VAR 0 13
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_VAR 0 4
4009: PUSH
4010: FOR_TO
4011: IFFALSE 4093
// begin uc_side = side ;
4013: LD_ADDR_OWVAR 20
4017: PUSH
4018: LD_VAR 0 1
4022: ST_TO_ADDR
// uc_nation = nation ;
4023: LD_ADDR_OWVAR 21
4027: PUSH
4028: LD_VAR 0 2
4032: ST_TO_ADDR
// hc_name =  ;
4033: LD_ADDR_OWVAR 26
4037: PUSH
4038: LD_STRING 
4040: ST_TO_ADDR
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_VAR 0 8
4059: PPUSH
4060: CALL_OW 380
// un = CreateHuman ;
4064: LD_ADDR_VAR 0 15
4068: PUSH
4069: CALL_OW 44
4073: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4074: LD_VAR 0 15
4078: PPUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ;
4091: GO 4010
4093: POP
4094: POP
// for i = 1 to bazookCount do
4095: LD_ADDR_VAR 0 13
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_VAR 0 5
4109: PUSH
4110: FOR_TO
4111: IFFALSE 4193
// begin uc_side = side ;
4113: LD_ADDR_OWVAR 20
4117: PUSH
4118: LD_VAR 0 1
4122: ST_TO_ADDR
// uc_nation = nation ;
4123: LD_ADDR_OWVAR 21
4127: PUSH
4128: LD_VAR 0 2
4132: ST_TO_ADDR
// hc_name =  ;
4133: LD_ADDR_OWVAR 26
4137: PUSH
4138: LD_STRING 
4140: ST_TO_ADDR
// hc_gallery =  ;
4141: LD_ADDR_OWVAR 33
4145: PUSH
4146: LD_STRING 
4148: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
4149: LD_INT 0
4151: PPUSH
4152: LD_INT 9
4154: PPUSH
4155: LD_VAR 0 8
4159: PPUSH
4160: CALL_OW 380
// un = CreateHuman ;
4164: LD_ADDR_VAR 0 15
4168: PUSH
4169: CALL_OW 44
4173: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4174: LD_VAR 0 15
4178: PPUSH
4179: LD_VAR 0 9
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 49
// end ;
4191: GO 4110
4193: POP
4194: POP
// for i = 1 to mortalCount do
4195: LD_ADDR_VAR 0 13
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_VAR 0 6
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4293
// begin uc_side = side ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_VAR 0 1
4222: ST_TO_ADDR
// uc_nation = nation ;
4223: LD_ADDR_OWVAR 21
4227: PUSH
4228: LD_VAR 0 2
4232: ST_TO_ADDR
// hc_name =  ;
4233: LD_ADDR_OWVAR 26
4237: PUSH
4238: LD_STRING 
4240: ST_TO_ADDR
// hc_gallery =  ;
4241: LD_ADDR_OWVAR 33
4245: PUSH
4246: LD_STRING 
4248: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
4249: LD_INT 0
4251: PPUSH
4252: LD_INT 8
4254: PPUSH
4255: LD_VAR 0 8
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 15
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4274: LD_VAR 0 15
4278: PPUSH
4279: LD_VAR 0 9
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 49
// end ;
4291: GO 4210
4293: POP
4294: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4295: LD_ADDR_VAR 0 17
4299: PUSH
4300: LD_INT 22
4302: PUSH
4303: LD_VAR 0 1
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 25
4314: PUSH
4315: LD_INT 4
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PPUSH
4326: CALL_OW 69
4330: ST_TO_ADDR
// for i in medic_list do
4331: LD_ADDR_VAR 0 13
4335: PUSH
4336: LD_VAR 0 17
4340: PUSH
4341: FOR_IN
4342: IFFALSE 4360
// ComMoveToArea ( i , healArea ) ;
4344: LD_VAR 0 13
4348: PPUSH
4349: LD_VAR 0 10
4353: PPUSH
4354: CALL_OW 113
4358: GO 4341
4360: POP
4361: POP
// repeat wait ( 0 0$1 ) ;
4362: LD_INT 35
4364: PPUSH
4365: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
4369: LD_ADDR_VAR 0 16
4373: PUSH
4374: LD_INT 22
4376: PUSH
4377: LD_VAR 0 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 1
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 24
4394: PUSH
4395: LD_INT 550
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 24
4408: PUSH
4409: LD_INT 250
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
4430: LD_ADDR_VAR 0 18
4434: PUSH
4435: LD_INT 22
4437: PUSH
4438: LD_VAR 0 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 25
4462: PUSH
4463: LD_INT 5
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 25
4472: PUSH
4473: LD_INT 8
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 9
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 24
4499: PUSH
4500: LD_INT 1000
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: ST_TO_ADDR
// if medicCount > 0 then
4517: LD_VAR 0 7
4521: PUSH
4522: LD_INT 0
4524: GREATER
4525: IFFALSE 4599
// begin if damageUnit_list > 0 then
4527: LD_VAR 0 16
4531: PUSH
4532: LD_INT 0
4534: GREATER
4535: IFFALSE 4599
// begin for i in damageUnit_list do
4537: LD_ADDR_VAR 0 13
4541: PUSH
4542: LD_VAR 0 16
4546: PUSH
4547: FOR_IN
4548: IFFALSE 4597
// begin ComMoveToArea ( i , healArea ) ;
4550: LD_VAR 0 13
4554: PPUSH
4555: LD_VAR 0 10
4559: PPUSH
4560: CALL_OW 113
// for j in medic_list do
4564: LD_ADDR_VAR 0 14
4568: PUSH
4569: LD_VAR 0 17
4573: PUSH
4574: FOR_IN
4575: IFFALSE 4593
// AddComHeal ( j , i ) ;
4577: LD_VAR 0 14
4581: PPUSH
4582: LD_VAR 0 13
4586: PPUSH
4587: CALL_OW 188
4591: GO 4574
4593: POP
4594: POP
// end ;
4595: GO 4547
4597: POP
4598: POP
// end ; end ; for i in soldiersOK_list do
4599: LD_ADDR_VAR 0 13
4603: PUSH
4604: LD_VAR 0 18
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4786
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
4612: LD_ADDR_VAR 0 21
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_VAR 0 11
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PPUSH
4629: CALL_OW 69
4633: PPUSH
4634: LD_VAR 0 13
4638: PPUSH
4639: CALL_OW 74
4643: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4644: LD_ADDR_VAR 0 22
4648: PUSH
4649: LD_INT 22
4651: PUSH
4652: LD_VAR 0 11
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 2
4663: PUSH
4664: LD_INT 59
4666: PUSH
4667: EMPTY
4668: LIST
4669: PUSH
4670: LD_INT 21
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 21
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: EMPTY
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 13
4712: PPUSH
4713: CALL_OW 74
4717: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4718: LD_VAR 0 13
4722: PPUSH
4723: LD_VAR 0 21
4727: PPUSH
4728: CALL_OW 296
4732: PUSH
4733: LD_INT 8
4735: PLUS
4736: PUSH
4737: LD_VAR 0 13
4741: PPUSH
4742: LD_VAR 0 22
4746: PPUSH
4747: CALL_OW 296
4751: LESS
4752: IFFALSE 4770
// begin ComAttackUnit ( i , target1 ) ;
4754: LD_VAR 0 13
4758: PPUSH
4759: LD_VAR 0 21
4763: PPUSH
4764: CALL_OW 115
// end else
4768: GO 4784
// begin ComAttackUnit ( i , target2 ) ;
4770: LD_VAR 0 13
4774: PPUSH
4775: LD_VAR 0 22
4779: PPUSH
4780: CALL_OW 115
// end ; end ;
4784: GO 4609
4786: POP
4787: POP
// until soldiersOK_list = [ ] ;
4788: LD_VAR 0 18
4792: PUSH
4793: EMPTY
4794: EQUAL
4795: IFFALSE 4362
// end ;
4797: LD_VAR 0 12
4801: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// amChassisTab = [ ] ;
4815: LD_ADDR_VAR 0 19
4819: PUSH
4820: EMPTY
4821: ST_TO_ADDR
// arChassisTab = [ ] ;
4822: LD_ADDR_VAR 0 18
4826: PUSH
4827: EMPTY
4828: ST_TO_ADDR
// ruChassisTab = [ ] ;
4829: LD_ADDR_VAR 0 17
4833: PUSH
4834: EMPTY
4835: ST_TO_ADDR
// for i = 1 to vehCount do
4836: LD_ADDR_VAR 0 13
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_VAR 0 3
4850: PUSH
4851: FOR_TO
4852: IFFALSE 6276
// begin wait ( 0 0$01 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// if nation = 1 then
4861: LD_VAR 0 5
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: IFFALSE 5350
// begin uc_side = side ;
4871: LD_ADDR_OWVAR 20
4875: PUSH
4876: LD_VAR 0 2
4880: ST_TO_ADDR
// uc_nation = nation ;
4881: LD_ADDR_OWVAR 21
4885: PUSH
4886: LD_VAR 0 5
4890: ST_TO_ADDR
// vc_engine = vehengine ;
4891: LD_ADDR_OWVAR 39
4895: PUSH
4896: LD_VAR 0 6
4900: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_VAR 0 10
4910: PUSH
4911: LD_INT 1
4913: PPUSH
4914: LD_VAR 0 10
4918: PPUSH
4919: CALL_OW 12
4923: ARRAY
4924: ST_TO_ADDR
// for j = 1 to AMWeapon do
4925: LD_ADDR_VAR 0 14
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_VAR 0 10
4939: PUSH
4940: FOR_TO
4941: IFFALSE 5242
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4943: LD_VAR 0 10
4947: PUSH
4948: LD_VAR 0 14
4952: ARRAY
4953: PUSH
4954: LD_INT 2
4956: EQUAL
4957: PUSH
4958: LD_VAR 0 10
4962: PUSH
4963: LD_VAR 0 14
4967: ARRAY
4968: PUSH
4969: LD_INT 3
4971: EQUAL
4972: OR
4973: IFFALSE 5026
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4975: LD_ADDR_VAR 0 19
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 2
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: LD_INT 4
4991: PUSH
4992: LD_INT 5
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5002: LD_ADDR_OWVAR 37
5006: PUSH
5007: LD_VAR 0 19
5011: PUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_VAR 0 19
5019: PPUSH
5020: CALL_OW 12
5024: ARRAY
5025: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
5026: LD_VAR 0 10
5030: PUSH
5031: LD_VAR 0 14
5035: ARRAY
5036: PUSH
5037: LD_INT 4
5039: EQUAL
5040: PUSH
5041: LD_VAR 0 10
5045: PUSH
5046: LD_VAR 0 14
5050: ARRAY
5051: PUSH
5052: LD_INT 5
5054: EQUAL
5055: OR
5056: PUSH
5057: LD_VAR 0 10
5061: PUSH
5062: LD_VAR 0 14
5066: ARRAY
5067: PUSH
5068: LD_INT 9
5070: EQUAL
5071: OR
5072: PUSH
5073: LD_VAR 0 10
5077: PUSH
5078: LD_VAR 0 14
5082: ARRAY
5083: PUSH
5084: LD_INT 11
5086: EQUAL
5087: OR
5088: PUSH
5089: LD_VAR 0 10
5093: PUSH
5094: LD_VAR 0 14
5098: ARRAY
5099: PUSH
5100: LD_INT 7
5102: EQUAL
5103: OR
5104: IFFALSE 5153
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
5106: LD_ADDR_VAR 0 19
5110: PUSH
5111: LD_INT 2
5113: PUSH
5114: LD_INT 3
5116: PUSH
5117: LD_INT 4
5119: PUSH
5120: LD_INT 5
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5129: LD_ADDR_OWVAR 37
5133: PUSH
5134: LD_VAR 0 19
5138: PUSH
5139: LD_INT 1
5141: PPUSH
5142: LD_VAR 0 19
5146: PPUSH
5147: CALL_OW 12
5151: ARRAY
5152: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
5153: LD_VAR 0 10
5157: PUSH
5158: LD_VAR 0 14
5162: ARRAY
5163: PUSH
5164: LD_INT 8
5166: EQUAL
5167: PUSH
5168: LD_VAR 0 10
5172: PUSH
5173: LD_VAR 0 14
5177: ARRAY
5178: PUSH
5179: LD_INT 6
5181: EQUAL
5182: OR
5183: PUSH
5184: LD_VAR 0 10
5188: PUSH
5189: LD_VAR 0 14
5193: ARRAY
5194: PUSH
5195: LD_INT 10
5197: EQUAL
5198: OR
5199: IFFALSE 5240
// begin amChassisTab = [ 4 , 5 ] ;
5201: LD_ADDR_VAR 0 19
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5216: LD_ADDR_OWVAR 37
5220: PUSH
5221: LD_VAR 0 19
5225: PUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_VAR 0 19
5233: PPUSH
5234: CALL_OW 12
5238: ARRAY
5239: ST_TO_ADDR
// end ; end ;
5240: GO 4940
5242: POP
5243: POP
// veh = CreateVehicle ;
5244: LD_ADDR_VAR 0 16
5248: PUSH
5249: CALL_OW 45
5253: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5254: LD_VAR 0 16
5258: PPUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// if vc_control = 1 then
5271: LD_OWVAR 38
5275: PUSH
5276: LD_INT 1
5278: EQUAL
5279: IFFALSE 5336
// begin hc_gallery =  ;
5281: LD_ADDR_OWVAR 33
5285: PUSH
5286: LD_STRING 
5288: ST_TO_ADDR
// hc_name =  ;
5289: LD_ADDR_OWVAR 26
5293: PUSH
5294: LD_STRING 
5296: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5297: LD_INT 0
5299: PPUSH
5300: LD_INT 3
5302: PPUSH
5303: LD_VAR 0 4
5307: PPUSH
5308: CALL_OW 380
// un = CreateHuman ;
5312: LD_ADDR_VAR 0 15
5316: PUSH
5317: CALL_OW 44
5321: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5322: LD_VAR 0 15
5326: PPUSH
5327: LD_VAR 0 16
5331: PPUSH
5332: CALL_OW 52
// end ; i = i + 1 ;
5336: LD_ADDR_VAR 0 13
5340: PUSH
5341: LD_VAR 0 13
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: ST_TO_ADDR
// end ; if nation = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_INT 2
5357: EQUAL
5358: IFFALSE 5860
// begin uc_side = side ;
5360: LD_ADDR_OWVAR 20
5364: PUSH
5365: LD_VAR 0 2
5369: ST_TO_ADDR
// uc_nation = nation ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_VAR 0 5
5379: ST_TO_ADDR
// vc_engine = vehengine ;
5380: LD_ADDR_OWVAR 39
5384: PUSH
5385: LD_VAR 0 6
5389: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
5390: LD_INT 22
5392: PUSH
5393: LD_VAR 0 2
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 21
5404: PUSH
5405: LD_INT 2
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 33
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 50
5424: PUSH
5425: EMPTY
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 69
5438: PUSH
5439: LD_INT 8
5441: LESSEQUAL
5442: IFFALSE 5470
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
5444: LD_ADDR_OWVAR 38
5448: PUSH
5449: LD_VAR 0 7
5453: PUSH
5454: LD_INT 1
5456: PPUSH
5457: LD_VAR 0 7
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
5468: GO 5478
// vc_control = control_apeman ;
5470: LD_ADDR_OWVAR 38
5474: PUSH
5475: LD_INT 5
5477: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
5478: LD_ADDR_OWVAR 40
5482: PUSH
5483: LD_VAR 0 9
5487: PUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 9
5495: PPUSH
5496: CALL_OW 12
5500: ARRAY
5501: ST_TO_ADDR
// for j = 1 to ARWeapons do
5502: LD_ADDR_VAR 0 14
5506: PUSH
5507: DOUBLE
5508: LD_INT 1
5510: DEC
5511: ST_TO_ADDR
5512: LD_VAR 0 9
5516: PUSH
5517: FOR_TO
5518: IFFALSE 5752
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
5520: LD_VAR 0 9
5524: PUSH
5525: LD_VAR 0 14
5529: ARRAY
5530: PUSH
5531: LD_INT 24
5533: EQUAL
5534: PUSH
5535: LD_VAR 0 9
5539: PUSH
5540: LD_VAR 0 14
5544: ARRAY
5545: PUSH
5546: LD_INT 22
5548: EQUAL
5549: OR
5550: PUSH
5551: LD_VAR 0 9
5555: PUSH
5556: LD_VAR 0 14
5560: ARRAY
5561: PUSH
5562: LD_INT 23
5564: EQUAL
5565: OR
5566: PUSH
5567: LD_VAR 0 9
5571: PUSH
5572: LD_VAR 0 14
5576: ARRAY
5577: PUSH
5578: LD_INT 30
5580: EQUAL
5581: OR
5582: IFFALSE 5631
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
5584: LD_ADDR_VAR 0 18
5588: PUSH
5589: LD_INT 11
5591: PUSH
5592: LD_INT 12
5594: PUSH
5595: LD_INT 13
5597: PUSH
5598: LD_INT 14
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5607: LD_ADDR_OWVAR 37
5611: PUSH
5612: LD_VAR 0 18
5616: PUSH
5617: LD_INT 1
5619: PPUSH
5620: LD_VAR 0 18
5624: PPUSH
5625: CALL_OW 12
5629: ARRAY
5630: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
5631: LD_VAR 0 9
5635: PUSH
5636: LD_VAR 0 14
5640: ARRAY
5641: PUSH
5642: LD_INT 29
5644: EQUAL
5645: PUSH
5646: LD_VAR 0 9
5650: PUSH
5651: LD_VAR 0 14
5655: ARRAY
5656: PUSH
5657: LD_INT 28
5659: EQUAL
5660: OR
5661: PUSH
5662: LD_VAR 0 9
5666: PUSH
5667: LD_VAR 0 14
5671: ARRAY
5672: PUSH
5673: LD_INT 27
5675: EQUAL
5676: OR
5677: PUSH
5678: LD_VAR 0 9
5682: PUSH
5683: LD_VAR 0 14
5687: ARRAY
5688: PUSH
5689: LD_INT 26
5691: EQUAL
5692: OR
5693: PUSH
5694: LD_VAR 0 9
5698: PUSH
5699: LD_VAR 0 14
5703: ARRAY
5704: PUSH
5705: LD_INT 25
5707: EQUAL
5708: OR
5709: IFFALSE 5750
// begin arChassisTab = [ 13 , 14 ] ;
5711: LD_ADDR_VAR 0 18
5715: PUSH
5716: LD_INT 13
5718: PUSH
5719: LD_INT 14
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5726: LD_ADDR_OWVAR 37
5730: PUSH
5731: LD_VAR 0 18
5735: PUSH
5736: LD_INT 1
5738: PPUSH
5739: LD_VAR 0 18
5743: PPUSH
5744: CALL_OW 12
5748: ARRAY
5749: ST_TO_ADDR
// end ; end ;
5750: GO 5517
5752: POP
5753: POP
// veh = CreateVehicle ;
5754: LD_ADDR_VAR 0 16
5758: PUSH
5759: CALL_OW 45
5763: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5764: LD_VAR 0 16
5768: PPUSH
5769: LD_VAR 0 1
5773: PPUSH
5774: LD_INT 0
5776: PPUSH
5777: CALL_OW 49
// if vc_control = 1 then
5781: LD_OWVAR 38
5785: PUSH
5786: LD_INT 1
5788: EQUAL
5789: IFFALSE 5846
// begin hc_gallery =  ;
5791: LD_ADDR_OWVAR 33
5795: PUSH
5796: LD_STRING 
5798: ST_TO_ADDR
// hc_name =  ;
5799: LD_ADDR_OWVAR 26
5803: PUSH
5804: LD_STRING 
5806: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 3
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// un = CreateHuman ;
5822: LD_ADDR_VAR 0 15
5826: PUSH
5827: CALL_OW 44
5831: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5832: LD_VAR 0 15
5836: PPUSH
5837: LD_VAR 0 16
5841: PPUSH
5842: CALL_OW 52
// end ; i = i + 1 ;
5846: LD_ADDR_VAR 0 13
5850: PUSH
5851: LD_VAR 0 13
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: ST_TO_ADDR
// end ; if nation = 3 then
5860: LD_VAR 0 5
5864: PUSH
5865: LD_INT 3
5867: EQUAL
5868: IFFALSE 6274
// begin uc_side = side ;
5870: LD_ADDR_OWVAR 20
5874: PUSH
5875: LD_VAR 0 2
5879: ST_TO_ADDR
// uc_nation = nation ;
5880: LD_ADDR_OWVAR 21
5884: PUSH
5885: LD_VAR 0 5
5889: ST_TO_ADDR
// vc_engine = vehengine ;
5890: LD_ADDR_OWVAR 39
5894: PUSH
5895: LD_VAR 0 6
5899: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
5900: LD_ADDR_OWVAR 38
5904: PUSH
5905: LD_VAR 0 7
5909: PUSH
5910: LD_INT 1
5912: PPUSH
5913: LD_VAR 0 7
5917: PPUSH
5918: CALL_OW 12
5922: ARRAY
5923: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5924: LD_ADDR_OWVAR 40
5928: PUSH
5929: LD_VAR 0 8
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_VAR 0 8
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// for j = 1 to RuWeapons do
5948: LD_ADDR_VAR 0 14
5952: PUSH
5953: DOUBLE
5954: LD_INT 1
5956: DEC
5957: ST_TO_ADDR
5958: LD_VAR 0 8
5962: PUSH
5963: FOR_TO
5964: IFFALSE 6150
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5966: LD_VAR 0 8
5970: PUSH
5971: LD_VAR 0 14
5975: ARRAY
5976: PUSH
5977: LD_INT 42
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 8
5985: PUSH
5986: LD_VAR 0 14
5990: ARRAY
5991: PUSH
5992: LD_INT 43
5994: EQUAL
5995: OR
5996: PUSH
5997: LD_VAR 0 8
6001: PUSH
6002: LD_VAR 0 14
6006: ARRAY
6007: PUSH
6008: LD_INT 44
6010: EQUAL
6011: OR
6012: PUSH
6013: LD_VAR 0 8
6017: PUSH
6018: LD_VAR 0 14
6022: ARRAY
6023: PUSH
6024: LD_INT 45
6026: EQUAL
6027: OR
6028: PUSH
6029: LD_VAR 0 8
6033: PUSH
6034: LD_VAR 0 14
6038: ARRAY
6039: PUSH
6040: LD_INT 49
6042: EQUAL
6043: OR
6044: IFFALSE 6081
// begin ruChassisTab = [ 24 ] ;
6046: LD_ADDR_VAR 0 17
6050: PUSH
6051: LD_INT 24
6053: PUSH
6054: EMPTY
6055: LIST
6056: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6057: LD_ADDR_OWVAR 37
6061: PUSH
6062: LD_VAR 0 17
6066: PUSH
6067: LD_INT 1
6069: PPUSH
6070: LD_VAR 0 17
6074: PPUSH
6075: CALL_OW 12
6079: ARRAY
6080: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
6081: LD_VAR 0 8
6085: PUSH
6086: LD_VAR 0 14
6090: ARRAY
6091: PUSH
6092: LD_INT 46
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 8
6100: PUSH
6101: LD_VAR 0 14
6105: ARRAY
6106: PUSH
6107: LD_INT 47
6109: EQUAL
6110: OR
6111: IFFALSE 6148
// begin ruChassisTab = [ 24 ] ;
6113: LD_ADDR_VAR 0 17
6117: PUSH
6118: LD_INT 24
6120: PUSH
6121: EMPTY
6122: LIST
6123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_VAR 0 17
6133: PUSH
6134: LD_INT 1
6136: PPUSH
6137: LD_VAR 0 17
6141: PPUSH
6142: CALL_OW 12
6146: ARRAY
6147: ST_TO_ADDR
// end ; end ;
6148: GO 5963
6150: POP
6151: POP
// veh = CreateVehicle ;
6152: LD_ADDR_VAR 0 16
6156: PUSH
6157: CALL_OW 45
6161: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6162: LD_VAR 0 16
6166: PPUSH
6167: LD_VAR 0 1
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 49
// if vc_control = 1 then
6179: LD_OWVAR 38
6183: PUSH
6184: LD_INT 1
6186: EQUAL
6187: IFFALSE 6274
// begin if uc_side = 8 then
6189: LD_OWVAR 20
6193: PUSH
6194: LD_INT 8
6196: EQUAL
6197: IFFALSE 6209
// uc_nation = 2 else
6199: LD_ADDR_OWVAR 21
6203: PUSH
6204: LD_INT 2
6206: ST_TO_ADDR
6207: GO 6219
// uc_nation = nation ;
6209: LD_ADDR_OWVAR 21
6213: PUSH
6214: LD_VAR 0 5
6218: ST_TO_ADDR
// hc_gallery =  ;
6219: LD_ADDR_OWVAR 33
6223: PUSH
6224: LD_STRING 
6226: ST_TO_ADDR
// hc_name =  ;
6227: LD_ADDR_OWVAR 26
6231: PUSH
6232: LD_STRING 
6234: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6235: LD_INT 0
6237: PPUSH
6238: LD_INT 3
6240: PPUSH
6241: LD_VAR 0 4
6245: PPUSH
6246: CALL_OW 380
// un = CreateHuman ;
6250: LD_ADDR_VAR 0 15
6254: PUSH
6255: CALL_OW 44
6259: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6260: LD_VAR 0 15
6264: PPUSH
6265: LD_VAR 0 16
6269: PPUSH
6270: CALL_OW 52
// end ; end ; end ;
6274: GO 4851
6276: POP
6277: POP
// repeat wait ( 0 0$1 ) ;
6278: LD_INT 35
6280: PPUSH
6281: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
6285: LD_ADDR_VAR 0 20
6289: PUSH
6290: LD_INT 22
6292: PUSH
6293: LD_VAR 0 2
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 21
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 24
6314: PUSH
6315: LD_INT 250
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 69
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_VAR 0 2
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 21
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 34
6356: PUSH
6357: LD_INT 49
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: DIFF
6374: ST_TO_ADDR
// if vehicleOK_list > 0 then
6375: LD_VAR 0 20
6379: PUSH
6380: LD_INT 0
6382: GREATER
6383: IFFALSE 6574
// begin for i in vehicleOK_list do
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 20
6394: PUSH
6395: FOR_IN
6396: IFFALSE 6572
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6398: LD_ADDR_VAR 0 21
6402: PUSH
6403: LD_INT 22
6405: PUSH
6406: LD_VAR 0 11
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 69
6419: PPUSH
6420: LD_VAR 0 13
6424: PPUSH
6425: CALL_OW 74
6429: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6430: LD_ADDR_VAR 0 22
6434: PUSH
6435: LD_INT 22
6437: PUSH
6438: LD_VAR 0 11
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: LD_INT 59
6452: PUSH
6453: EMPTY
6454: LIST
6455: PUSH
6456: LD_INT 21
6458: PUSH
6459: LD_INT 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 21
6468: PUSH
6469: LD_INT 2
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 69
6493: PPUSH
6494: LD_VAR 0 13
6498: PPUSH
6499: CALL_OW 74
6503: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6504: LD_VAR 0 13
6508: PPUSH
6509: LD_VAR 0 21
6513: PPUSH
6514: CALL_OW 296
6518: PUSH
6519: LD_INT 8
6521: PLUS
6522: PUSH
6523: LD_VAR 0 13
6527: PPUSH
6528: LD_VAR 0 22
6532: PPUSH
6533: CALL_OW 296
6537: LESS
6538: IFFALSE 6556
// begin ComAttackUnit ( i , target1 ) ;
6540: LD_VAR 0 13
6544: PPUSH
6545: LD_VAR 0 21
6549: PPUSH
6550: CALL_OW 115
// end else
6554: GO 6570
// begin ComAttackUnit ( i , target2 ) ;
6556: LD_VAR 0 13
6560: PPUSH
6561: LD_VAR 0 22
6565: PPUSH
6566: CALL_OW 115
// end ; end ;
6570: GO 6395
6572: POP
6573: POP
// end ; until vehicleOK_list = 0 ;
6574: LD_VAR 0 20
6578: PUSH
6579: LD_INT 0
6581: EQUAL
6582: IFFALSE 6278
// end ; end_of_file
6584: LD_VAR 0 12
6588: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
6589: LD_VAR 0 1
6593: PUSH
6594: LD_INT 1
6596: EQUAL
6597: PUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 4
6605: EQUAL
6606: AND
6607: IFFALSE 6616
// YouLost ( sojusz ) ;
6609: LD_STRING sojusz
6611: PPUSH
6612: CALL_OW 104
// end ;
6616: PPOPN 2
6618: END
// on BuildingCaptured ( building , side , human ) do begin if side = 4 then
6619: LD_VAR 0 2
6623: PUSH
6624: LD_INT 4
6626: EQUAL
6627: IFFALSE 6641
// SetSide ( building , 4 ) ;
6629: LD_VAR 0 1
6633: PPUSH
6634: LD_INT 4
6636: PPUSH
6637: CALL_OW 235
// end ;
6641: PPOPN 3
6643: END
// on UnitDestroyed ( unit ) do var i ;
6644: LD_INT 0
6646: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 255
6656: PUSH
6657: LD_INT 1
6659: EQUAL
6660: PUSH
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 247
6670: PUSH
6671: LD_INT 1
6673: EQUAL
6674: AND
6675: IFFALSE 6735
// begin unitLost = unitLost + 1 ;
6677: LD_ADDR_EXP 29
6681: PUSH
6682: LD_EXP 29
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ST_TO_ADDR
// if unit = DeltaDoctor or unit = Gordon or unit = Peter then
6691: LD_VAR 0 1
6695: PUSH
6696: LD_EXP 5
6700: EQUAL
6701: PUSH
6702: LD_VAR 0 1
6706: PUSH
6707: LD_EXP 3
6711: EQUAL
6712: OR
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: LD_EXP 4
6723: EQUAL
6724: OR
6725: IFFALSE 6735
// amSciStatus = 0 ;
6727: LD_ADDR_EXP 24
6731: PUSH
6732: LD_INT 0
6734: ST_TO_ADDR
// end ; end ;
6735: PPOPN 2
6737: END
// on SiberiteRocketExploded ( unit , x , y ) do var i ;
6738: LD_INT 0
6740: PPUSH
// begin if siberiteRocketStatus = 0 then
6741: LD_EXP 32
6745: PUSH
6746: LD_INT 0
6748: EQUAL
6749: IFFALSE 6814
// for i in FilterAllUnits ( [ [ f_side , 3 ] ] ) do
6751: LD_ADDR_VAR 0 4
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: PPUSH
6769: CALL_OW 69
6773: PUSH
6774: FOR_IN
6775: IFFALSE 6812
// if GetDistUnitXY ( i , x , y ) < 25 then
6777: LD_VAR 0 4
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_VAR 0 3
6791: PPUSH
6792: CALL_OW 297
6796: PUSH
6797: LD_INT 25
6799: LESS
6800: IFFALSE 6810
// siberiteRocketStatus = 1 ;
6802: LD_ADDR_EXP 32
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
6810: GO 6774
6812: POP
6813: POP
// end ; end_of_file
6814: PPOPN 4
6816: END
// every 1 do
6817: GO 6819
6819: DISABLE
// begin InGameOn ;
6820: CALL_OW 8
// SetClass ( Stevens , 4 ) ;
6824: LD_EXP 1
6828: PPUSH
6829: LD_INT 4
6831: PPUSH
6832: CALL_OW 336
// RevealFogArea ( 1 , AmericanBaseArea ) ;
6836: LD_INT 1
6838: PPUSH
6839: LD_INT 1
6841: PPUSH
6842: CALL_OW 332
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6846: LD_EXP 3
6850: PUSH
6851: LD_EXP 4
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 87
// Say ( Peter , D1-Pet-1 ) ;
6864: LD_EXP 4
6868: PPUSH
6869: LD_STRING D1-Pet-1
6871: PPUSH
6872: CALL_OW 88
// if IsOK ( Stevens ) then
6876: LD_EXP 1
6880: PPUSH
6881: CALL_OW 302
6885: IFFALSE 6901
// Say ( Stevens , D1-Stev-1 ) else
6887: LD_EXP 1
6891: PPUSH
6892: LD_STRING D1-Stev-1
6894: PPUSH
6895: CALL_OW 88
6899: GO 6913
// Say ( Baker , D1-Stev-1 ) ;
6901: LD_EXP 2
6905: PPUSH
6906: LD_STRING D1-Stev-1
6908: PPUSH
6909: CALL_OW 88
// CenterOnXY ( 108 , 140 ) ;
6913: LD_INT 108
6915: PPUSH
6916: LD_INT 140
6918: PPUSH
6919: CALL_OW 84
// wait ( 0 0$2 ) ;
6923: LD_INT 70
6925: PPUSH
6926: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6930: LD_EXP 3
6934: PUSH
6935: LD_EXP 4
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 87
// SayRadio ( Powell , D1-Pow-1 ) ;
6948: LD_EXP 18
6952: PPUSH
6953: LD_STRING D1-Pow-1
6955: PPUSH
6956: CALL_OW 94
// if IsOK ( Stevens ) then
6960: LD_EXP 1
6964: PPUSH
6965: CALL_OW 302
6969: IFFALSE 6985
// Say ( Stevens , D1-Stev-2 ) else
6971: LD_EXP 1
6975: PPUSH
6976: LD_STRING D1-Stev-2
6978: PPUSH
6979: CALL_OW 88
6983: GO 6997
// Say ( Baker , D1-Stev-2 ) ;
6985: LD_EXP 2
6989: PPUSH
6990: LD_STRING D1-Stev-2
6992: PPUSH
6993: CALL_OW 88
// PrepareFirstAtacks ;
6997: CALL 1860 0 0
// CenterOnXY ( 108 , 140 ) ;
7001: LD_INT 108
7003: PPUSH
7004: LD_INT 140
7006: PPUSH
7007: CALL_OW 84
// wait ( 0 0$5 ) ;
7011: LD_INT 175
7013: PPUSH
7014: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D1-Rand-1 ,  ) ;
7018: LD_INT 22
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 21
7030: PUSH
7031: LD_INT 1
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 26
7040: PUSH
7041: LD_INT 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 25
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 25
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 4
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 5
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: PPUSH
7120: LD_STRING D1-Rand-1
7122: PPUSH
7123: LD_STRING 
7125: PPUSH
7126: CALL 2925 0 3
// wait ( 0 0$3 ) ;
7130: LD_INT 105
7132: PPUSH
7133: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
7137: LD_EXP 3
7141: PUSH
7142: LD_EXP 4
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 87
// Say ( Peter , D1-Pet-2 ) ;
7155: LD_EXP 4
7159: PPUSH
7160: LD_STRING D1-Pet-2
7162: PPUSH
7163: CALL_OW 88
// if IsOK ( Stevens ) then
7167: LD_EXP 1
7171: PPUSH
7172: CALL_OW 302
7176: IFFALSE 7192
// Say ( Stevens , D1-Stev-3 ) else
7178: LD_EXP 1
7182: PPUSH
7183: LD_STRING D1-Stev-3
7185: PPUSH
7186: CALL_OW 88
7190: GO 7204
// Say ( Baker , D1-Stev-3 ) ;
7192: LD_EXP 2
7196: PPUSH
7197: LD_STRING D1-Stev-3
7199: PPUSH
7200: CALL_OW 88
// Say ( Peter , D1-Pet-3 ) ;
7204: LD_EXP 4
7208: PPUSH
7209: LD_STRING D1-Pet-3
7211: PPUSH
7212: CALL_OW 88
// SetLives ( FilterUnitsInArea ( ObsBaseArea , [ f_side , 1 ] ) , 150 ) ;
7216: LD_INT 9
7218: PPUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PPUSH
7229: CALL_OW 70
7233: PPUSH
7234: LD_INT 150
7236: PPUSH
7237: CALL_OW 234
// InGameOff ;
7241: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
7245: LD_STRING C1
7247: PPUSH
7248: CALL_OW 337
// if IsOk ( Stevens ) then
7252: LD_EXP 1
7256: PPUSH
7257: CALL_OW 302
7261: IFFALSE 7272
// ChangeMissionObjectives ( C1stev ) else
7263: LD_STRING C1stev
7265: PPUSH
7266: CALL_OW 337
7270: GO 7279
// ChangeMissionObjectives ( C1baker ) ;
7272: LD_STRING C1baker
7274: PPUSH
7275: CALL_OW 337
// end ;
7279: END
// every 0 0$1 trigger EscapeAvalaible = 1 do
7280: LD_EXP 26
7284: PUSH
7285: LD_INT 1
7287: EQUAL
7288: IFFALSE 7340
7290: GO 7292
7292: DISABLE
// begin enable ;
7293: ENABLE
// allUnitsLengh = TabLenght ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) ;
7294: LD_ADDR_EXP 30
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_INT 1
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 21
7311: PUSH
7312: LD_INT 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 50
7321: PUSH
7322: EMPTY
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: PPUSH
7330: CALL_OW 69
7334: PPUSH
7335: CALL 2573 0 1
7339: ST_TO_ADDR
// end ;
7340: END
// every 0 0$10 trigger ruAttacksCounter = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
7341: LD_EXP 23
7345: PUSH
7346: LD_INT 3
7348: EQUAL
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 21
7365: PUSH
7366: LD_INT 2
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 1
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 69
7396: PUSH
7397: LD_INT 0
7399: EQUAL
7400: AND
7401: IFFALSE 7414
7403: GO 7405
7405: DISABLE
// EscapeAvalaible = 1 ;
7406: LD_ADDR_EXP 26
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
7414: END
// every 0 0$1 trigger EscapeAvalaible = 1 do var i ;
7415: LD_EXP 26
7419: PUSH
7420: LD_INT 1
7422: EQUAL
7423: IFFALSE 8271
7425: GO 7427
7427: DISABLE
7428: LD_INT 0
7430: PPUSH
// begin InGameOn ;
7431: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , true ) ;
7435: LD_INT 3
7437: PPUSH
7438: LD_INT 1
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: LD_INT 1
7446: PPUSH
7447: CALL_OW 80
// CenterNowOnUnits ( amsiblab ) ;
7451: LD_INT 1
7453: PPUSH
7454: CALL_OW 87
// PrepareRussianTPUNits ;
7458: CALL 2035 0 0
// ChangeSideFog ( 3 , 1 ) ;
7462: LD_INT 3
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 343
// wait ( 0 0$5 ) ;
7472: LD_INT 175
7474: PPUSH
7475: CALL_OW 67
// for i in russianTPUnits do
7479: LD_ADDR_VAR 0 1
7483: PUSH
7484: LD_EXP 25
7488: PUSH
7489: FOR_IN
7490: IFFALSE 7515
// TeleportUnit ( i , 128 , 19 , 4 , true ) ;
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_INT 128
7499: PPUSH
7500: LD_INT 19
7502: PPUSH
7503: LD_INT 4
7505: PPUSH
7506: LD_INT 1
7508: PPUSH
7509: CALL_OW 483
7513: GO 7489
7515: POP
7516: POP
// wait ( 0 0$1 ) ;
7517: LD_INT 35
7519: PPUSH
7520: CALL_OW 67
// ComTurnUnit ( russianTPUnits , amsiblab ) ;
7524: LD_EXP 25
7528: PPUSH
7529: LD_INT 1
7531: PPUSH
7532: CALL_OW 119
// SetSide ( amsiblab , 3 ) ;
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 3
7541: PPUSH
7542: CALL_OW 235
// ComEnterUnit ( UnitFilter ( russianTPUnits , [ f_class , 4 ] ) , amsiblab ) ;
7546: LD_EXP 25
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 4
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 120
// wait ( 0 0$2 ) ;
7573: LD_INT 70
7575: PPUSH
7576: CALL_OW 67
// if IsOK ( Peter ) then
7580: LD_EXP 4
7584: PPUSH
7585: CALL_OW 302
7589: IFFALSE 7605
// Say ( Peter , D2-Pet-1 ) else
7591: LD_EXP 4
7595: PPUSH
7596: LD_STRING D2-Pet-1
7598: PPUSH
7599: CALL_OW 88
7603: GO 7655
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) , D2-Pet-1 ,  ) ;
7605: LD_INT 22
7607: PUSH
7608: LD_INT 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 21
7617: PUSH
7618: LD_INT 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 26
7627: PUSH
7628: LD_INT 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 69
7644: PPUSH
7645: LD_STRING D2-Pet-1
7647: PPUSH
7648: LD_STRING 
7650: PPUSH
7651: CALL 2925 0 3
// ComExitBuilding ( UnitsInside ( amsiblab ) ) ;
7655: LD_INT 1
7657: PPUSH
7658: CALL_OW 313
7662: PPUSH
7663: CALL_OW 122
// wait ( 0 0$2 ) ;
7667: LD_INT 70
7669: PPUSH
7670: CALL_OW 67
// for i in FilterUnitsInArea ( LabHill , [ [ f_type , unit_building ] ] ) do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: LD_INT 15
7681: PPUSH
7682: LD_INT 21
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: EMPTY
7693: LIST
7694: PPUSH
7695: CALL_OW 70
7699: PUSH
7700: FOR_IN
7701: IFFALSE 7719
// AddComAttackUnit ( russianTPUnits , i ) ;
7703: LD_EXP 25
7707: PPUSH
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 175
7717: GO 7700
7719: POP
7720: POP
// if IsOK ( Stevens ) then
7721: LD_EXP 1
7725: PPUSH
7726: CALL_OW 302
7730: IFFALSE 7746
// Say ( Stevens , D2-Stev-1 ) else
7732: LD_EXP 1
7736: PPUSH
7737: LD_STRING D2-Stev-1
7739: PPUSH
7740: CALL_OW 88
7744: GO 7758
// Say ( Baker , D2-Stev-1 ) ;
7746: LD_EXP 2
7750: PPUSH
7751: LD_STRING D2-Stev-1
7753: PPUSH
7754: CALL_OW 88
// if IsOk ( Peter ) then
7758: LD_EXP 4
7762: PPUSH
7763: CALL_OW 302
7767: IFFALSE 7783
// begin Say ( Peter , D2-Pet-2 ) ;
7769: LD_EXP 4
7773: PPUSH
7774: LD_STRING D2-Pet-2
7776: PPUSH
7777: CALL_OW 88
// end else
7781: GO 7920
// begin if IsOk ( DeltaDoctor ) then
7783: LD_EXP 5
7787: PPUSH
7788: CALL_OW 302
7792: IFFALSE 7808
// begin Say ( DeltaDoctor , D2-Pet-2 ) ;
7794: LD_EXP 5
7798: PPUSH
7799: LD_STRING D2-Pet-2
7801: PPUSH
7802: CALL_OW 88
// end else
7806: GO 7920
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-2 ,  ) ;
7808: LD_INT 22
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 26
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: LD_INT 25
7843: PUSH
7844: LD_INT 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 25
7853: PUSH
7854: LD_INT 2
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 3
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 25
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 25
7883: PUSH
7884: LD_INT 5
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: PPUSH
7910: LD_STRING D2-Pet-2
7912: PPUSH
7913: LD_STRING 
7915: PPUSH
7916: CALL 2925 0 3
// end ; end ; if IsOK ( Stevens ) then
7920: LD_EXP 1
7924: PPUSH
7925: CALL_OW 302
7929: IFFALSE 7945
// Say ( Stevens , D2-Stev-2 ) else
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D2-Stev-2
7938: PPUSH
7939: CALL_OW 88
7943: GO 7957
// Say ( Baker , D2-Stev-2 ) ;
7945: LD_EXP 2
7949: PPUSH
7950: LD_STRING D2-Stev-2
7952: PPUSH
7953: CALL_OW 88
// if IsOk ( Peter ) then
7957: LD_EXP 4
7961: PPUSH
7962: CALL_OW 302
7966: IFFALSE 7982
// begin Say ( Peter , D2-Pet-3 ) ;
7968: LD_EXP 4
7972: PPUSH
7973: LD_STRING D2-Pet-3
7975: PPUSH
7976: CALL_OW 88
// end else
7980: GO 8119
// begin if IsOk ( DeltaDoctor ) then
7982: LD_EXP 5
7986: PPUSH
7987: CALL_OW 302
7991: IFFALSE 8007
// begin Say ( DeltaDoctor , D2-Pet-3 ) ;
7993: LD_EXP 5
7997: PPUSH
7998: LD_STRING D2-Pet-3
8000: PPUSH
8001: CALL_OW 88
// end else
8005: GO 8119
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-3 ,  ) ;
8007: LD_INT 22
8009: PUSH
8010: LD_INT 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 21
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 25
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 25
8052: PUSH
8053: LD_INT 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 25
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 5
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PPUSH
8109: LD_STRING D2-Pet-3
8111: PPUSH
8112: LD_STRING 
8114: PPUSH
8115: CALL 2925 0 3
// end ; end ; repeat wait ( 0 0$1 ) ;
8119: LD_INT 35
8121: PPUSH
8122: CALL_OW 67
// until IsDying ( amsiblab ) ;
8126: LD_INT 1
8128: PPUSH
8129: CALL_OW 303
8133: IFFALSE 8119
// for i in russianTPUnits do
8135: LD_ADDR_VAR 0 1
8139: PUSH
8140: LD_EXP 25
8144: PUSH
8145: FOR_IN
8146: IFFALSE 8171
// TeleportUnit ( i , 185 , 175 , 4 , true ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 185
8155: PPUSH
8156: LD_INT 175
8158: PPUSH
8159: LD_INT 4
8161: PPUSH
8162: LD_INT 1
8164: PPUSH
8165: CALL_OW 483
8169: GO 8145
8171: POP
8172: POP
// wait ( 0 0$2 ) ;
8173: LD_INT 70
8175: PPUSH
8176: CALL_OW 67
// for i in russianTPUnits do
8180: LD_ADDR_VAR 0 1
8184: PUSH
8185: LD_EXP 25
8189: PUSH
8190: FOR_IN
8191: IFFALSE 8204
// RemoveUnit ( i ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: CALL_OW 64
8202: GO 8190
8204: POP
8205: POP
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
8206: LD_INT 3
8208: PPUSH
8209: LD_INT 1
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 1
8217: PPUSH
8218: CALL_OW 80
// ChangeSideFog ( 3 , 3 ) ;
8222: LD_INT 3
8224: PPUSH
8225: LD_INT 3
8227: PPUSH
8228: CALL_OW 343
// escapeAvalaible = 1 ;
8232: LD_ADDR_EXP 26
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// SetLives ( amsiblab , 0 ) ;
8240: LD_INT 1
8242: PPUSH
8243: LD_INT 0
8245: PPUSH
8246: CALL_OW 234
// InGameOff ;
8250: CALL_OW 9
// ChangeMissionObjectives ( C2 ) ;
8254: LD_STRING C2
8256: PPUSH
8257: CALL_OW 337
// SetAreaMapShow ( EscapeArea , 1 ) ;
8261: LD_INT 11
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 424
// end ; end_of_file
8271: PPOPN 1
8273: END
// every 0 0$1 trigger StevensStatus = 1 and IsDead ( Stevens ) do
8274: LD_EXP 27
8278: PUSH
8279: LD_INT 1
8281: EQUAL
8282: PUSH
8283: LD_EXP 1
8287: PPUSH
8288: CALL_OW 301
8292: AND
8293: IFFALSE 8305
8295: GO 8297
8297: DISABLE
// YouLost ( stevded ) ;
8298: LD_STRING stevded
8300: PPUSH
8301: CALL_OW 104
8305: END
// every 0 0$1 trigger not StevensStatus = 1 and IsDead ( Baker ) do
8306: LD_EXP 27
8310: PUSH
8311: LD_INT 1
8313: EQUAL
8314: NOT
8315: PUSH
8316: LD_EXP 2
8320: PPUSH
8321: CALL_OW 301
8325: AND
8326: IFFALSE 8338
8328: GO 8330
8330: DISABLE
// YouLost ( bakerded ) ;
8331: LD_STRING bakerded
8333: PPUSH
8334: CALL_OW 104
8338: END
// every 0 0$1 trigger IsDead ( amsiblab ) and EscapeAvalaible = 0 do
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 301
8346: PUSH
8347: LD_EXP 26
8351: PUSH
8352: LD_INT 0
8354: EQUAL
8355: AND
8356: IFFALSE 8368
8358: GO 8360
8360: DISABLE
// YouLost ( lab ) ; end_of_file
8361: LD_STRING lab
8363: PPUSH
8364: CALL_OW 104
8368: END
// every 10 10$0 do
8369: GO 8371
8371: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 10 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8372: LD_INT 8
8374: PPUSH
8375: LD_INT 3
8377: PPUSH
8378: LD_INT 10
8380: PUSH
8381: LD_INT 11
8383: PUSH
8384: LD_INT 12
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_OWVAR 67
8396: ARRAY
8397: PUSH
8398: LD_INT 5
8400: PPUSH
8401: LD_INT 10
8403: PPUSH
8404: CALL_OW 12
8408: PLUS
8409: PPUSH
8410: LD_INT 10
8412: PPUSH
8413: LD_INT 3
8415: PPUSH
8416: LD_INT 3
8418: PPUSH
8419: LD_INT 3
8421: PUSH
8422: LD_INT 3
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PPUSH
8429: LD_INT 44
8431: PUSH
8432: LD_INT 45
8434: PUSH
8435: LD_INT 46
8437: PUSH
8438: LD_INT 47
8440: PUSH
8441: LD_INT 49
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: PPUSH
8451: EMPTY
8452: PPUSH
8453: EMPTY
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: CALL 4802 0 11
// end ;
8462: END
// every 10 10$0 do
8463: GO 8465
8465: DISABLE
// begin ruAttacksCounter = 1 ;
8466: LD_ADDR_EXP 23
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 5 , 5 , 6 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8474: LD_INT 3
8476: PPUSH
8477: LD_INT 3
8479: PPUSH
8480: LD_INT 2
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: LD_INT 4
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: PUSH
8494: LD_OWVAR 67
8498: ARRAY
8499: PPUSH
8500: LD_INT 0
8502: PPUSH
8503: LD_INT 5
8505: PUSH
8506: LD_INT 5
8508: PUSH
8509: LD_INT 6
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: LD_OWVAR 67
8521: ARRAY
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: LD_INT 6
8531: PUSH
8532: LD_INT 7
8534: PUSH
8535: LD_INT 8
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: PUSH
8543: LD_OWVAR 67
8547: ARRAY
8548: PPUSH
8549: LD_INT 8
8551: PPUSH
8552: LD_INT 8
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL 3782 0 11
// end ;
8562: END
// every 20 20$0 do
8563: GO 8565
8565: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 11 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8566: LD_INT 8
8568: PPUSH
8569: LD_INT 3
8571: PPUSH
8572: LD_INT 11
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: LD_OWVAR 67
8590: ARRAY
8591: PUSH
8592: LD_INT 5
8594: PPUSH
8595: LD_INT 10
8597: PPUSH
8598: CALL_OW 12
8602: PLUS
8603: PPUSH
8604: LD_INT 10
8606: PPUSH
8607: LD_INT 3
8609: PPUSH
8610: LD_INT 3
8612: PPUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PPUSH
8623: LD_INT 44
8625: PUSH
8626: LD_INT 45
8628: PUSH
8629: LD_INT 46
8631: PUSH
8632: LD_INT 47
8634: PUSH
8635: LD_INT 49
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: PPUSH
8645: EMPTY
8646: PPUSH
8647: EMPTY
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL 4802 0 11
// end ;
8656: END
// every 20 20$0 do
8657: GO 8659
8659: DISABLE
// begin ruAttacksCounter = 2 ;
8660: LD_ADDR_EXP 23
8664: PUSH
8665: LD_INT 2
8667: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 6 , 7 , 7 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8668: LD_INT 3
8670: PPUSH
8671: LD_INT 3
8673: PPUSH
8674: LD_INT 2
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: LD_INT 4
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: PUSH
8688: LD_OWVAR 67
8692: ARRAY
8693: PPUSH
8694: LD_INT 0
8696: PPUSH
8697: LD_INT 6
8699: PUSH
8700: LD_INT 7
8702: PUSH
8703: LD_INT 7
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: LD_OWVAR 67
8715: ARRAY
8716: PPUSH
8717: LD_INT 0
8719: PPUSH
8720: LD_INT 0
8722: PPUSH
8723: LD_INT 6
8725: PUSH
8726: LD_INT 7
8728: PUSH
8729: LD_INT 8
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: PUSH
8737: LD_OWVAR 67
8741: ARRAY
8742: PPUSH
8743: LD_INT 8
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 1
8751: PPUSH
8752: CALL 3782 0 11
// end ;
8756: END
// every 30 30$0 trigger BurlakStatus = 1 do
8757: LD_EXP 28
8761: PUSH
8762: LD_INT 1
8764: EQUAL
8765: IFFALSE 8860
8767: GO 8769
8769: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8770: LD_INT 8
8772: PPUSH
8773: LD_INT 3
8775: PPUSH
8776: LD_INT 13
8778: PUSH
8779: LD_INT 14
8781: PUSH
8782: LD_INT 15
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: LD_OWVAR 67
8794: ARRAY
8795: PUSH
8796: LD_INT 5
8798: PPUSH
8799: LD_INT 10
8801: PPUSH
8802: CALL_OW 12
8806: PLUS
8807: PPUSH
8808: LD_INT 10
8810: PPUSH
8811: LD_INT 3
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 3
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PPUSH
8827: LD_INT 44
8829: PUSH
8830: LD_INT 45
8832: PUSH
8833: LD_INT 46
8835: PUSH
8836: LD_INT 47
8838: PUSH
8839: LD_INT 49
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: PPUSH
8849: EMPTY
8850: PPUSH
8851: EMPTY
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: CALL 4802 0 11
// end ;
8860: END
// every 30 30$0 trigger BurlakStatus = 1 do
8861: LD_EXP 28
8865: PUSH
8866: LD_INT 1
8868: EQUAL
8869: IFFALSE 8970
8871: GO 8873
8873: DISABLE
// begin ruAttacksCounter = 3 ;
8874: LD_ADDR_EXP 23
8878: PUSH
8879: LD_INT 3
8881: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8882: LD_INT 3
8884: PPUSH
8885: LD_INT 3
8887: PPUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: LD_INT 4
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: PUSH
8902: LD_OWVAR 67
8906: ARRAY
8907: PPUSH
8908: LD_INT 0
8910: PPUSH
8911: LD_INT 7
8913: PUSH
8914: LD_INT 8
8916: PUSH
8917: LD_INT 9
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: LD_OWVAR 67
8929: ARRAY
8930: PPUSH
8931: LD_INT 0
8933: PPUSH
8934: LD_INT 0
8936: PPUSH
8937: LD_INT 6
8939: PUSH
8940: LD_INT 7
8942: PUSH
8943: LD_INT 8
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: PUSH
8951: LD_OWVAR 67
8955: ARRAY
8956: PPUSH
8957: LD_INT 8
8959: PPUSH
8960: LD_INT 8
8962: PPUSH
8963: LD_INT 1
8965: PPUSH
8966: CALL 3782 0 11
// end ;
8970: END
// every 40 40$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
8971: LD_EXP 23
8975: PUSH
8976: LD_INT 2
8978: EQUAL
8979: PUSH
8980: LD_EXP 28
8984: PUSH
8985: LD_INT 0
8987: EQUAL
8988: AND
8989: IFFALSE 9084
8991: GO 8993
8993: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8994: LD_INT 8
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: LD_INT 13
9002: PUSH
9003: LD_INT 14
9005: PUSH
9006: LD_INT 15
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: LD_OWVAR 67
9018: ARRAY
9019: PUSH
9020: LD_INT 5
9022: PPUSH
9023: LD_INT 10
9025: PPUSH
9026: CALL_OW 12
9030: PLUS
9031: PPUSH
9032: LD_INT 10
9034: PPUSH
9035: LD_INT 3
9037: PPUSH
9038: LD_INT 3
9040: PPUSH
9041: LD_INT 3
9043: PUSH
9044: LD_INT 3
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: LD_INT 44
9053: PUSH
9054: LD_INT 45
9056: PUSH
9057: LD_INT 46
9059: PUSH
9060: LD_INT 47
9062: PUSH
9063: LD_INT 49
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: PPUSH
9073: EMPTY
9074: PPUSH
9075: EMPTY
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL 4802 0 11
// end ;
9084: END
// every 40 40$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
9085: LD_EXP 23
9089: PUSH
9090: LD_INT 2
9092: EQUAL
9093: PUSH
9094: LD_EXP 28
9098: PUSH
9099: LD_INT 0
9101: EQUAL
9102: AND
9103: IFFALSE 9204
9105: GO 9107
9107: DISABLE
// begin ruAttacksCounter = 3 ;
9108: LD_ADDR_EXP 23
9112: PUSH
9113: LD_INT 3
9115: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
9116: LD_INT 3
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: LD_INT 6
9124: PUSH
9125: LD_INT 7
9127: PUSH
9128: LD_INT 8
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: LD_INT 7
9147: PUSH
9148: LD_INT 8
9150: PUSH
9151: LD_INT 9
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: LD_OWVAR 67
9163: ARRAY
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: LD_INT 0
9170: PPUSH
9171: LD_INT 6
9173: PUSH
9174: LD_INT 7
9176: PUSH
9177: LD_INT 8
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: LD_OWVAR 67
9189: ARRAY
9190: PPUSH
9191: LD_INT 8
9193: PPUSH
9194: LD_INT 8
9196: PPUSH
9197: LD_INT 1
9199: PPUSH
9200: CALL 3782 0 11
// end ;
9204: END
// every 30 30$0 trigger BurlakStatus = 0 do
9205: LD_EXP 28
9209: PUSH
9210: LD_INT 0
9212: EQUAL
9213: IFFALSE 9308
9215: GO 9217
9217: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9218: LD_INT 8
9220: PPUSH
9221: LD_INT 7
9223: PPUSH
9224: LD_INT 6
9226: PUSH
9227: LD_INT 7
9229: PUSH
9230: LD_INT 7
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_OWVAR 67
9242: ARRAY
9243: PUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 4
9249: PPUSH
9250: CALL_OW 12
9254: PLUS
9255: PPUSH
9256: LD_INT 10
9258: PPUSH
9259: LD_INT 3
9261: PPUSH
9262: LD_INT 3
9264: PPUSH
9265: LD_INT 3
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PPUSH
9275: LD_INT 44
9277: PUSH
9278: LD_INT 45
9280: PUSH
9281: LD_INT 46
9283: PUSH
9284: LD_INT 47
9286: PUSH
9287: LD_INT 49
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PPUSH
9297: EMPTY
9298: PPUSH
9299: EMPTY
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL 4802 0 11
// end ;
9308: END
// every 30 30$0 trigger BurlakStatus = 0 do
9309: LD_EXP 28
9313: PUSH
9314: LD_INT 0
9316: EQUAL
9317: IFFALSE 9408
9319: GO 9321
9321: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ ] , [ ] , [ 10 , 9 , 7 , 6 ] , 1 ) ;
9322: LD_INT 8
9324: PPUSH
9325: LD_INT 7
9327: PPUSH
9328: LD_INT 6
9330: PUSH
9331: LD_INT 7
9333: PUSH
9334: LD_INT 7
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: PUSH
9342: LD_OWVAR 67
9346: ARRAY
9347: PUSH
9348: LD_INT 2
9350: PPUSH
9351: LD_INT 4
9353: PPUSH
9354: CALL_OW 12
9358: PLUS
9359: PPUSH
9360: LD_INT 10
9362: PPUSH
9363: LD_INT 3
9365: PPUSH
9366: LD_INT 3
9368: PPUSH
9369: LD_INT 3
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PPUSH
9379: EMPTY
9380: PPUSH
9381: EMPTY
9382: PPUSH
9383: LD_INT 10
9385: PUSH
9386: LD_INT 9
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: LD_INT 6
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: CALL 4802 0 11
// end ;
9408: END
// every 30 30$0 trigger BurlakStatus = 0 do
9409: LD_EXP 28
9413: PUSH
9414: LD_INT 0
9416: EQUAL
9417: IFFALSE 9561
9419: GO 9421
9421: DISABLE
// begin uc_side = 7 ;
9422: LD_ADDR_OWVAR 20
9426: PUSH
9427: LD_INT 7
9429: ST_TO_ADDR
// uc_nation = 1 ;
9430: LD_ADDR_OWVAR 21
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
// vc_engine = 3 ;
9438: LD_ADDR_OWVAR 39
9442: PUSH
9443: LD_INT 3
9445: ST_TO_ADDR
// vc_control = 1 ;
9446: LD_ADDR_OWVAR 38
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// vc_chassis = 24 ;
9454: LD_ADDR_OWVAR 37
9458: PUSH
9459: LD_INT 24
9461: ST_TO_ADDR
// vc_weapon = 46 ;
9462: LD_ADDR_OWVAR 40
9466: PUSH
9467: LD_INT 46
9469: ST_TO_ADDR
// burlakVeh = CreateVehicle ;
9470: LD_ADDR_EXP 21
9474: PUSH
9475: CALL_OW 45
9479: ST_TO_ADDR
// PlaceUnitArea ( burlakVeh , RussianAttackSpawn , false ) ;
9480: LD_EXP 21
9484: PPUSH
9485: LD_INT 8
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 49
// Burlak = PrepareUnit ( Burlak , false ) ;
9495: LD_ADDR_EXP 20
9499: PUSH
9500: LD_STRING Burlak
9502: PPUSH
9503: LD_INT 0
9505: PPUSH
9506: CALL 2363 0 2
9510: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , burlakVeh ) ;
9511: LD_EXP 20
9515: PPUSH
9516: LD_EXP 21
9520: PPUSH
9521: CALL_OW 52
// SetMark ( burlakVeh , 1 ) ;
9525: LD_EXP 21
9529: PPUSH
9530: LD_INT 1
9532: PPUSH
9533: CALL_OW 242
// ComAgressiveMove ( [ Burlak , BurlakVeh ] , 117 , 39 ) ;
9537: LD_EXP 20
9541: PUSH
9542: LD_EXP 21
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: LD_INT 117
9553: PPUSH
9554: LD_INT 39
9556: PPUSH
9557: CALL_OW 114
// end ;
9561: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 and escapeAvalaible = 1 and IsDead ( amsiblab ) do
9562: LD_INT 22
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: CALL_OW 69
9590: PUSH
9591: LD_INT 0
9593: EQUAL
9594: PUSH
9595: LD_EXP 26
9599: PUSH
9600: LD_INT 1
9602: EQUAL
9603: AND
9604: PUSH
9605: LD_INT 1
9607: PPUSH
9608: CALL_OW 301
9612: AND
9613: IFFALSE 9709
9615: GO 9617
9617: DISABLE
// begin RespawnAttackVehicle ( RussianSpawn2 , 3 , [ 8 , 9 , 9 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9618: LD_INT 13
9620: PPUSH
9621: LD_INT 3
9623: PPUSH
9624: LD_INT 8
9626: PUSH
9627: LD_INT 9
9629: PUSH
9630: LD_INT 9
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_OWVAR 67
9642: ARRAY
9643: PUSH
9644: LD_INT 2
9646: PPUSH
9647: LD_INT 4
9649: PPUSH
9650: CALL_OW 12
9654: PLUS
9655: PPUSH
9656: LD_INT 10
9658: PPUSH
9659: LD_INT 3
9661: PPUSH
9662: LD_INT 3
9664: PPUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PPUSH
9675: LD_INT 44
9677: PUSH
9678: LD_INT 45
9680: PUSH
9681: LD_INT 46
9683: PUSH
9684: LD_INT 47
9686: PUSH
9687: LD_INT 49
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: PPUSH
9697: EMPTY
9698: PPUSH
9699: EMPTY
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: CALL 4802 0 11
// enable ;
9708: ENABLE
// end ; end_of_file
9709: END
// every 0 0$1 do
9710: GO 9712
9712: DISABLE
// begin enable ;
9713: ENABLE
// TimeLapsersAI ( 3 ) ;
9714: LD_INT 3
9716: PPUSH
9717: CALL 3518 0 1
// IntBazooka ( 3 ) ;
9721: LD_INT 3
9723: PPUSH
9724: CALL 3190 0 1
// end ; end_of_file
9728: END
// every 0 0$1 trigger FilterUnitsExceptArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_engine , 3 ] , [ f_not , [ f_empty ] ] ] ) = allUnitsLengh and EscapeAvalaible = 1 do var i , cargoType , yourVehicles ;
9729: LD_INT 11
9731: PPUSH
9732: LD_INT 22
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 21
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PPUSH
9756: CALL_OW 71
9760: PUSH
9761: LD_INT 0
9763: EQUAL
9764: PUSH
9765: LD_INT 11
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 21
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 33
9790: PUSH
9791: LD_INT 1
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 32
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 58
9813: PUSH
9814: EMPTY
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: PPUSH
9828: CALL_OW 70
9832: PUSH
9833: LD_EXP 30
9837: EQUAL
9838: AND
9839: PUSH
9840: LD_EXP 26
9844: PUSH
9845: LD_INT 1
9847: EQUAL
9848: AND
9849: IFFALSE 10945
9851: GO 9853
9853: DISABLE
9854: LD_INT 0
9856: PPUSH
9857: PPUSH
9858: PPUSH
// begin yourVehicles = [ ] ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: EMPTY
9865: ST_TO_ADDR
// if FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9866: LD_INT 11
9868: PPUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 33
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 3
9891: PUSH
9892: LD_INT 58
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 70
9911: PUSH
9912: LD_INT 0
9914: GREATER
9915: IFFALSE 10183
// begin for i in FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_INT 11
9924: PPUSH
9925: LD_INT 21
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 33
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 3
9947: PUSH
9948: LD_INT 58
9950: PUSH
9951: EMPTY
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 70
9967: PUSH
9968: FOR_IN
9969: IFFALSE 10169
// begin cargoType = GetCargoType ( i ) ;
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 288
9985: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL_OW 264
9995: PUSH
9996: LD_INT 12
9998: EQUAL
9999: IFFALSE 10096
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
10001: LD_ADDR_VAR 0 3
10005: PUSH
10006: LD_VAR 0 3
10010: PUSH
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 248
10020: PUSH
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 265
10030: PUSH
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 262
10040: PUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 263
10050: PUSH
10051: LD_VAR 0 1
10055: PPUSH
10056: CALL_OW 264
10060: PUSH
10061: LD_VAR 0 2
10065: PUSH
10066: LD_VAR 0 1
10070: PPUSH
10071: LD_VAR 0 2
10075: PPUSH
10076: CALL_OW 289
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: ADD
10093: ST_TO_ADDR
// end else
10094: GO 10167
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_VAR 0 3
10105: PUSH
10106: LD_VAR 0 1
10110: PPUSH
10111: CALL_OW 248
10115: PUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 265
10125: PUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: CALL_OW 262
10135: PUSH
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 263
10145: PUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: CALL_OW 264
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: ADD
10166: ST_TO_ADDR
// end ; end ;
10167: GO 9968
10169: POP
10170: POP
// SaveVariable ( yourVehicles , 15_Vehicles_1 ) ;
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_STRING 15_Vehicles_1
10178: PPUSH
10179: CALL_OW 39
// end ; SaveCargos ;
10183: CALL 10948 0 0
// if siberiteRocketStatus = 1 then
10187: LD_EXP 32
10191: PUSH
10192: LD_INT 1
10194: EQUAL
10195: IFFALSE 10209
// AddMedal ( med1 , 1 ) else
10197: LD_STRING med1
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 101
10207: GO 10220
// AddMedal ( med1 , - 1 ) ;
10209: LD_STRING med1
10211: PPUSH
10212: LD_INT 1
10214: NEG
10215: PPUSH
10216: CALL_OW 101
// if unitLost > 3 and unitLost < 5 then
10220: LD_EXP 29
10224: PUSH
10225: LD_INT 3
10227: GREATER
10228: PUSH
10229: LD_EXP 29
10233: PUSH
10234: LD_INT 5
10236: LESS
10237: AND
10238: IFFALSE 10252
// begin AddMedal ( med2 , 2 ) end else
10240: LD_STRING med2
10242: PPUSH
10243: LD_INT 2
10245: PPUSH
10246: CALL_OW 101
10250: GO 10285
// begin if unitLost > 5 then
10252: LD_EXP 29
10256: PUSH
10257: LD_INT 5
10259: GREATER
10260: IFFALSE 10275
// AddMedal ( med2 , - 1 ) else
10262: LD_STRING med2
10264: PPUSH
10265: LD_INT 1
10267: NEG
10268: PPUSH
10269: CALL_OW 101
10273: GO 10285
// AddMedal ( med2 , 1 ) ;
10275: LD_STRING med2
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL_OW 101
// end ; if amSciStatus = 1 then
10285: LD_EXP 24
10289: PUSH
10290: LD_INT 1
10292: EQUAL
10293: IFFALSE 10307
// AddMedal ( med3 , 1 ) else
10295: LD_STRING med3
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 101
10305: GO 10318
// AddMedal ( med3 , - 1 ) ;
10307: LD_STRING med3
10309: PPUSH
10310: LD_INT 1
10312: NEG
10313: PPUSH
10314: CALL_OW 101
// GiveMedals ( MAIN ) ;
10318: LD_STRING MAIN
10320: PPUSH
10321: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10325: LD_INT 50
10327: PUSH
10328: EMPTY
10329: LIST
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: LD_INT 1
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 21
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: LD_INT 25
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 25
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 25
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 25
10386: PUSH
10387: LD_INT 4
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 25
10396: PUSH
10397: LD_INT 5
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 25
10406: PUSH
10407: LD_INT 8
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: PPUSH
10434: CALL_OW 43
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10438: LD_EXP 11
10442: PPUSH
10443: LD_EXP 31
10447: PUSH
10448: LD_STRING Brown
10450: STR
10451: PPUSH
10452: CALL 2522 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10456: LD_EXP 7
10460: PPUSH
10461: LD_EXP 31
10465: PUSH
10466: LD_STRING Donaldson
10468: STR
10469: PPUSH
10470: CALL 2522 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10474: LD_EXP 8
10478: PPUSH
10479: LD_EXP 31
10483: PUSH
10484: LD_STRING Bobby
10486: STR
10487: PPUSH
10488: CALL 2522 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10492: LD_EXP 9
10496: PPUSH
10497: LD_EXP 31
10501: PUSH
10502: LD_STRING Cyrus
10504: STR
10505: PPUSH
10506: CALL 2522 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10510: LD_EXP 6
10514: PPUSH
10515: LD_EXP 31
10519: PUSH
10520: LD_STRING Lisa
10522: STR
10523: PPUSH
10524: CALL 2522 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10528: LD_EXP 16
10532: PPUSH
10533: LD_EXP 31
10537: PUSH
10538: LD_STRING Frank
10540: STR
10541: PPUSH
10542: CALL 2522 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10546: LD_EXP 17
10550: PPUSH
10551: LD_EXP 31
10555: PUSH
10556: LD_STRING Kikuchi
10558: STR
10559: PPUSH
10560: CALL 2522 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10564: LD_EXP 13
10568: PPUSH
10569: LD_EXP 31
10573: PUSH
10574: LD_STRING Houten
10576: STR
10577: PPUSH
10578: CALL 2522 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10582: LD_EXP 15
10586: PPUSH
10587: LD_EXP 31
10591: PUSH
10592: LD_STRING Gary
10594: STR
10595: PPUSH
10596: CALL 2522 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
10600: LD_EXP 14
10604: PPUSH
10605: LD_EXP 31
10609: PUSH
10610: LD_STRING Cornell
10612: STR
10613: PPUSH
10614: CALL 2522 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10618: LD_EXP 10
10622: PPUSH
10623: LD_EXP 31
10627: PUSH
10628: LD_STRING Denis
10630: STR
10631: PPUSH
10632: CALL 2522 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10636: LD_EXP 12
10640: PPUSH
10641: LD_EXP 31
10645: PUSH
10646: LD_STRING Gladstone
10648: STR
10649: PPUSH
10650: CALL 2522 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10654: LD_EXP 1
10658: PPUSH
10659: LD_EXP 31
10663: PUSH
10664: LD_STRING Stevens
10666: STR
10667: PPUSH
10668: CALL 2522 0 2
// EnchancedSaveCharacters ( Baker , mission_prefix & Baker ) ;
10672: LD_EXP 2
10676: PPUSH
10677: LD_EXP 31
10681: PUSH
10682: LD_STRING Baker
10684: STR
10685: PPUSH
10686: CALL 2522 0 2
// EnchancedSaveCharacters ( Gordon , mission_prefix & Gordon ) ;
10690: LD_EXP 3
10694: PPUSH
10695: LD_EXP 31
10699: PUSH
10700: LD_STRING Gordon
10702: STR
10703: PPUSH
10704: CALL 2522 0 2
// EnchancedSaveCharacters ( Peter , mission_prefix & Peter ) ;
10708: LD_EXP 4
10712: PPUSH
10713: LD_EXP 31
10717: PUSH
10718: LD_STRING Peter
10720: STR
10721: PPUSH
10722: CALL 2522 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornell , Stevens , Baker , Gordon , Peter ] , 15_other_survivors ) ;
10726: LD_INT 50
10728: PUSH
10729: EMPTY
10730: LIST
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 21
10744: PUSH
10745: LD_INT 1
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: LD_INT 25
10757: PUSH
10758: LD_INT 1
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 25
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 25
10777: PUSH
10778: LD_INT 3
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 25
10787: PUSH
10788: LD_INT 4
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 25
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 25
10807: PUSH
10808: LD_INT 8
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PPUSH
10830: CALL_OW 69
10834: PUSH
10835: LD_EXP 11
10839: PUSH
10840: LD_EXP 7
10844: PUSH
10845: LD_EXP 8
10849: PUSH
10850: LD_EXP 9
10854: PUSH
10855: LD_EXP 6
10859: PUSH
10860: LD_EXP 16
10864: PUSH
10865: LD_EXP 12
10869: PUSH
10870: LD_EXP 17
10874: PUSH
10875: LD_EXP 10
10879: PUSH
10880: LD_EXP 13
10884: PUSH
10885: LD_EXP 15
10889: PUSH
10890: LD_EXP 14
10894: PUSH
10895: LD_EXP 1
10899: PUSH
10900: LD_EXP 2
10904: PUSH
10905: LD_EXP 3
10909: PUSH
10910: LD_EXP 4
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: DIFF
10933: PPUSH
10934: LD_STRING 15_other_survivors
10936: PPUSH
10937: CALL_OW 38
// YouWin ;
10941: CALL_OW 103
// end ;
10945: PPOPN 3
10947: END
// export function SaveCargos ; var i , resources ; begin
10948: LD_INT 0
10950: PPUSH
10951: PPUSH
10952: PPUSH
// resources = [ ] ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: EMPTY
10959: ST_TO_ADDR
// for i in FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
10960: LD_ADDR_VAR 0 2
10964: PUSH
10965: LD_INT 11
10967: PPUSH
10968: LD_INT 22
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 33
10980: PUSH
10981: LD_INT 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 34
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: PPUSH
11003: CALL_OW 70
11007: PUSH
11008: FOR_IN
11009: IFFALSE 11037
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: LD_VAR 0 3
11020: PUSH
11021: LD_VAR 0 2
11025: PPUSH
11026: CALL 11056 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: ADD
11034: ST_TO_ADDR
11035: GO 11008
11037: POP
11038: POP
// SaveVariable ( resources , 15_ResourcesInCargo_1 ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_STRING 15_ResourcesInCargo_1
11046: PPUSH
11047: CALL_OW 39
// end ;
11051: LD_VAR 0 1
11055: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
11056: LD_INT 0
11058: PPUSH
11059: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
11060: LD_ADDR_VAR 0 2
11064: PUSH
11065: LD_VAR 0 1
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 289
11077: PUSH
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_INT 2
11085: PPUSH
11086: CALL_OW 289
11090: PUSH
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_INT 3
11098: PPUSH
11099: CALL_OW 289
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: ST_TO_ADDR
// end ; end_of_file
11109: LD_VAR 0 2
11113: RET
// every 2 2$30 do
11114: GO 11116
11116: DISABLE
// begin enable ;
11117: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11118: LD_INT 3
11120: PPUSH
11121: LD_INT 5
11123: PPUSH
11124: CALL_OW 12
11128: PPUSH
11129: LD_INT 12
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 55
// end ;
11139: END
