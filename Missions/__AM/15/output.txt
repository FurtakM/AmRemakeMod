// export Stevens , Baker , Gordon , Peter , DeltaDoctor , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13Omega ; export Burlak , burlakVeh ; export omegaHeroes ; export ruAttacksCounter ; export amSciStatus ; export russianTPUnits ; export escapeAvalaible ; export StevensStatus , BurlakStatus ; export unitLost ; export allUnitsLengh ; export mission_prefix ; export siberiteRocketStatus ; export JMMGirl ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( amheaddepo , lambda ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING lambda
  13: PPUSH
  14: CALL_OW 500
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
  18: LD_ADDR_EXP 28
  22: PUSH
  23: LD_STRING 13_StevensStatus_1
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: CALL_OW 30
  33: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
  34: LD_ADDR_EXP 29
  38: PUSH
  39: LD_STRING 13_BurlakStatus_1
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: CALL_OW 30
  49: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
  50: LD_ADDR_EXP 34
  54: PUSH
  55: LD_STRING 14_JMMGirl_1
  57: PPUSH
  58: LD_INT 0
  60: PPUSH
  61: CALL_OW 30
  65: ST_TO_ADDR
// omegaHeroes = [ ] ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: EMPTY
  72: ST_TO_ADDR
// russianTPUnits = [ ] ;
  73: LD_ADDR_EXP 26
  77: PUSH
  78: EMPTY
  79: ST_TO_ADDR
// ruAttacksCounter = 0 ;
  80: LD_ADDR_EXP 24
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// escapeAvalaible = 0 ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// allUnitsLengh = 0 ;
  96: LD_ADDR_EXP 31
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// siberiteRocketStatus = 0 ;
 104: LD_ADDR_EXP 33
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// unitLost = 0 ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// amSciStatus = 1 ;
 120: LD_ADDR_EXP 25
 124: PUSH
 125: LD_INT 1
 127: ST_TO_ADDR
// mission_prefix = 15_ ;
 128: LD_ADDR_EXP 32
 132: PUSH
 133: LD_STRING 15_
 135: ST_TO_ADDR
// debugMode = 0 ;
 136: LD_ADDR_EXP 35
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// PrepareOmegaTeam ;
 144: CALL 470 0 0
// SetDifficulty ;
 148: CALL 2678 0 0
// end ;
 152: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 153: LD_EXP 35
 157: PUSH
 158: LD_INT 1
 160: EQUAL
 161: IFFALSE 467
 163: GO 165
 165: DISABLE
 166: LD_INT 0
 168: PPUSH
// begin enable ;
 169: ENABLE
// fogoff ( true ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 177: LD_ADDR_VAR 0 1
 181: PUSH
 182: LD_INT 22
 184: PUSH
 185: LD_INT 1
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 21
 194: PUSH
 195: LD_INT 1
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: PPUSH
 206: CALL_OW 69
 210: PUSH
 211: FOR_IN
 212: IFFALSE 228
// SetLives ( i , 1000 ) ;
 214: LD_VAR 0 1
 218: PPUSH
 219: LD_INT 1000
 221: PPUSH
 222: CALL_OW 234
 226: GO 211
 228: POP
 229: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 230: LD_ADDR_VAR 0 1
 234: PUSH
 235: LD_INT 22
 237: PUSH
 238: LD_INT 1
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: LD_INT 2
 247: PUSH
 248: LD_INT 30
 250: PUSH
 251: LD_INT 0
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: LD_INT 30
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PPUSH
 277: CALL_OW 69
 281: PUSH
 282: FOR_IN
 283: IFFALSE 307
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 285: LD_VAR 0 1
 289: PPUSH
 290: CALL_OW 274
 294: PPUSH
 295: LD_INT 1
 297: PPUSH
 298: LD_INT 9999
 300: PPUSH
 301: CALL_OW 277
 305: GO 282
 307: POP
 308: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 309: LD_ADDR_VAR 0 1
 313: PUSH
 314: LD_INT 22
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 2
 326: PUSH
 327: LD_INT 30
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 30
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PPUSH
 356: CALL_OW 69
 360: PUSH
 361: FOR_IN
 362: IFFALSE 386
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 274
 373: PPUSH
 374: LD_INT 2
 376: PPUSH
 377: LD_INT 9999
 379: PPUSH
 380: CALL_OW 277
 384: GO 361
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 30
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PPUSH
 435: CALL_OW 69
 439: PUSH
 440: FOR_IN
 441: IFFALSE 465
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 443: LD_VAR 0 1
 447: PPUSH
 448: CALL_OW 274
 452: PPUSH
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 9999
 458: PPUSH
 459: CALL_OW 277
 463: GO 440
 465: POP
 466: POP
// end ; end_of_file
 467: PPOPN 1
 469: END
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , mecha , avalaibleVehs , randBuild ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
 474: PPUSH
 475: PPUSH
 476: PPUSH
 477: PPUSH
 478: PPUSH
 479: PPUSH
// uc_side = 1 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 1
 487: ST_TO_ADDR
// uc_nation = 1 ;
 488: LD_ADDR_OWVAR 21
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// omegaVeh = [ ] ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 503: LD_ADDR_EXP 19
 507: PUSH
 508: LD_STRING Powell
 510: PPUSH
 511: LD_INT 0
 513: PPUSH
 514: CALL 2427 0 2
 518: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
 519: LD_STRING 13s_Lisa
 521: PPUSH
 522: CALL_OW 28
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 545
// Lisa = PrepareUnitOmega ( Lisa ) ;
 532: LD_ADDR_EXP 6
 536: PUSH
 537: LD_STRING Lisa
 539: PPUSH
 540: CALL 2484 0 1
 544: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
 545: LD_STRING 13s_Donaldson
 547: PPUSH
 548: CALL_OW 28
 552: PUSH
 553: LD_INT 0
 555: EQUAL
 556: IFFALSE 571
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
 558: LD_ADDR_EXP 7
 562: PUSH
 563: LD_STRING Donaldson
 565: PPUSH
 566: CALL 2484 0 1
 570: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
 571: LD_STRING 13s_Bobby
 573: PPUSH
 574: CALL_OW 28
 578: PUSH
 579: LD_INT 0
 581: EQUAL
 582: IFFALSE 597
// Bobby = PrepareUnitOmega ( Bobby ) ;
 584: LD_ADDR_EXP 8
 588: PUSH
 589: LD_STRING Bobby
 591: PPUSH
 592: CALL 2484 0 1
 596: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
 597: LD_STRING 13s_Cyrus
 599: PPUSH
 600: CALL_OW 28
 604: PUSH
 605: LD_INT 0
 607: EQUAL
 608: IFFALSE 623
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
 610: LD_ADDR_EXP 9
 614: PUSH
 615: LD_STRING Cyrus
 617: PPUSH
 618: CALL 2484 0 1
 622: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
 623: LD_STRING 13s_Denis
 625: PPUSH
 626: CALL_OW 28
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: IFFALSE 649
// Denis = PrepareUnitOmega ( Denis ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Denis
 643: PPUSH
 644: CALL 2484 0 1
 648: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
 649: LD_STRING 13s_Brown
 651: PPUSH
 652: CALL_OW 28
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: IFFALSE 675
// Brown = PrepareUnitOmega ( Brown ) ;
 662: LD_ADDR_EXP 11
 666: PUSH
 667: LD_STRING Brown
 669: PPUSH
 670: CALL 2484 0 1
 674: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
 675: LD_STRING 13s_Gladstone
 677: PPUSH
 678: CALL_OW 28
 682: PUSH
 683: LD_INT 0
 685: EQUAL
 686: IFFALSE 701
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
 688: LD_ADDR_EXP 12
 692: PUSH
 693: LD_STRING Gladstone
 695: PPUSH
 696: CALL 2484 0 1
 700: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
 701: LD_STRING 13s_Houten
 703: PPUSH
 704: CALL_OW 28
 708: PUSH
 709: LD_INT 0
 711: EQUAL
 712: IFFALSE 727
// Houten = PrepareUnitOmega ( Houten ) ;
 714: LD_ADDR_EXP 13
 718: PUSH
 719: LD_STRING Houten
 721: PPUSH
 722: CALL 2484 0 1
 726: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
 727: LD_STRING 13s_Cornel
 729: PPUSH
 730: CALL_OW 28
 734: PUSH
 735: LD_INT 0
 737: EQUAL
 738: IFFALSE 753
// Cornell = PrepareUnitOmega ( Cornell ) ;
 740: LD_ADDR_EXP 14
 744: PUSH
 745: LD_STRING Cornell
 747: PPUSH
 748: CALL 2484 0 1
 752: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
 753: LD_STRING 13s_Gary
 755: PPUSH
 756: CALL_OW 28
 760: PUSH
 761: LD_INT 0
 763: EQUAL
 764: IFFALSE 779
// Gary = PrepareUnitOmega ( Gary ) ;
 766: LD_ADDR_EXP 15
 770: PUSH
 771: LD_STRING Gary
 773: PPUSH
 774: CALL 2484 0 1
 778: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
 779: LD_STRING 13s_Frank
 781: PPUSH
 782: CALL_OW 28
 786: PUSH
 787: LD_INT 0
 789: EQUAL
 790: IFFALSE 805
// Frank = PrepareUnitOmega ( Frank ) ;
 792: LD_ADDR_EXP 16
 796: PUSH
 797: LD_STRING Frank
 799: PPUSH
 800: CALL 2484 0 1
 804: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
 805: LD_STRING 13s_Kikuchi
 807: PPUSH
 808: CALL_OW 28
 812: PUSH
 813: LD_INT 0
 815: EQUAL
 816: IFFALSE 831
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
 818: LD_ADDR_EXP 17
 822: PUSH
 823: LD_STRING Kikuchi
 825: PPUSH
 826: CALL 2484 0 1
 830: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
 831: LD_EXP 34
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: PUSH
 840: LD_EXP 34
 844: PUSH
 845: LD_INT 2
 847: EQUAL
 848: OR
 849: IFFALSE 879
// begin Connie = PrepareUnit ( Connie , true ) ;
 851: LD_ADDR_EXP 18
 855: PUSH
 856: LD_STRING Connie
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL 2427 0 2
 866: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , AmFab1 ) ;
 867: LD_EXP 18
 871: PPUSH
 872: LD_INT 51
 874: PPUSH
 875: CALL_OW 52
// end ; if StevensStatus = 1 then
 879: LD_EXP 28
 883: PUSH
 884: LD_INT 1
 886: EQUAL
 887: IFFALSE 946
// begin Stevens = PrepareUnitOmega ( Stevens ) ;
 889: LD_ADDR_EXP 1
 893: PUSH
 894: LD_STRING Stevens
 896: PPUSH
 897: CALL 2484 0 1
 901: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawn , false ) ;
 902: LD_EXP 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// ComTurnXY ( Stevens , 125 , 16 ) ;
 917: LD_EXP 1
 921: PPUSH
 922: LD_INT 125
 924: PPUSH
 925: LD_INT 16
 927: PPUSH
 928: CALL_OW 118
// SetClass ( Stevens , 4 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: CALL_OW 336
// end else
 944: GO 1012
// begin hc_name = Baker Smith ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING Baker Smith
 953: ST_TO_ADDR
// hc_gallery =  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
 962: LD_INT 1
 964: PPUSH
 965: LD_INT 10
 967: PPUSH
 968: CALL_OW 384
// Baker = CreateHuman ;
 972: LD_ADDR_EXP 2
 976: PUSH
 977: CALL_OW 44
 981: ST_TO_ADDR
// PlaceUnitArea ( Baker , StevensSpawn , false ) ;
 982: LD_EXP 2
 986: PPUSH
 987: LD_INT 2
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ComTurnXY ( Baker , 125 , 16 ) ;
 997: LD_EXP 2
1001: PPUSH
1002: LD_INT 125
1004: PPUSH
1005: LD_INT 16
1007: PPUSH
1008: CALL_OW 118
// end ; Gordon = NewCharacter ( Gordon ) ;
1012: LD_ADDR_EXP 3
1016: PUSH
1017: LD_STRING Gordon
1019: PPUSH
1020: CALL_OW 25
1024: ST_TO_ADDR
// PlaceUnitArea ( Gordon , GordonSpawn , false ) ;
1025: LD_EXP 3
1029: PPUSH
1030: LD_INT 3
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 49
// ComTurnXY ( Gordon , 125 , 16 ) ;
1040: LD_EXP 3
1044: PPUSH
1045: LD_INT 125
1047: PPUSH
1048: LD_INT 16
1050: PPUSH
1051: CALL_OW 118
// hc_name = Peter McClain ;
1055: LD_ADDR_OWVAR 26
1059: PUSH
1060: LD_STRING Peter McClain
1062: ST_TO_ADDR
// hc_gallery =  ;
1063: LD_ADDR_OWVAR 33
1067: PUSH
1068: LD_STRING 
1070: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 10
1076: PPUSH
1077: CALL_OW 384
// Peter = CreateHuman ;
1081: LD_ADDR_EXP 4
1085: PUSH
1086: CALL_OW 44
1090: ST_TO_ADDR
// PlaceUnitArea ( Peter , PeterSpawn , false ) ;
1091: LD_EXP 4
1095: PPUSH
1096: LD_INT 4
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 49
// ComTurnXY ( Peter , 125 , 16 ) ;
1106: LD_EXP 4
1110: PPUSH
1111: LD_INT 125
1113: PPUSH
1114: LD_INT 16
1116: PPUSH
1117: CALL_OW 118
// if TestCharacters ( 10c_DeltaDoctor ) = true then
1121: LD_STRING 10c_DeltaDoctor
1123: PPUSH
1124: CALL_OW 28
1128: PUSH
1129: LD_INT 1
1131: EQUAL
1132: IFFALSE 1192
// begin DeltaDoctor = PrepareUnit ( 10c_DeltaDoctor , true ) ;
1134: LD_ADDR_EXP 5
1138: PUSH
1139: LD_STRING 10c_DeltaDoctor
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: CALL 2427 0 2
1149: ST_TO_ADDR
// PlaceUnitArea ( DeltaDoctor , DeltaSciSpawn , false ) ;
1150: LD_EXP 5
1154: PPUSH
1155: LD_INT 10
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 49
// ComTurnXY ( DeltaDoctor , 125 , 16 ) ;
1165: LD_EXP 5
1169: PPUSH
1170: LD_INT 125
1172: PPUSH
1173: LD_INT 16
1175: PPUSH
1176: CALL_OW 118
// SetClass ( DeltaDoctor , 4 ) ;
1180: LD_EXP 5
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
1192: LD_ADDR_EXP 20
1196: PUSH
1197: LD_STRING 13_other_survivors
1199: PPUSH
1200: CALL_OW 31
1204: ST_TO_ADDR
// for i in omegaHeroes do
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 23
1214: PUSH
1215: FOR_IN
1216: IFFALSE 1358
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1218: LD_INT 22
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 58
1240: PUSH
1241: EMPTY
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PPUSH
1249: CALL_OW 69
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1322
// begin PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1259: LD_VAR 0 2
1263: PPUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 30
1276: PUSH
1277: LD_INT 32
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 58
1286: PUSH
1287: EMPTY
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PPUSH
1295: CALL_OW 69
1299: PUSH
1300: LD_INT 1
1302: ARRAY
1303: PPUSH
1304: CALL_OW 52
// SetClass ( i , 1 ) ;
1308: LD_VAR 0 2
1312: PPUSH
1313: LD_INT 1
1315: PPUSH
1316: CALL_OW 336
// end else
1320: GO 1356
// begin PlaceUnitArea ( i , [ AmericanSpawn1 , AmericanSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1322: LD_VAR 0 2
1326: PPUSH
1327: LD_INT 5
1329: PUSH
1330: LD_INT 6
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 1
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: PPUSH
1349: LD_INT 0
1351: PPUSH
1352: CALL_OW 49
// end ; end ;
1356: GO 1215
1358: POP
1359: POP
// if others13Omega >= 2 then
1360: LD_EXP 20
1364: PUSH
1365: LD_INT 2
1367: GREATEREQUAL
1368: IFFALSE 1572
// begin for i := 1 to others13Omega - 1 do
1370: LD_ADDR_VAR 0 2
1374: PUSH
1375: DOUBLE
1376: LD_INT 1
1378: DEC
1379: ST_TO_ADDR
1380: LD_EXP 20
1384: PUSH
1385: LD_INT 1
1387: MINUS
1388: PUSH
1389: FOR_TO
1390: IFFALSE 1570
// begin if GetSkill ( others13Omega [ i ] , 3 ) < GetSkill ( others13Omega [ i + 1 ] , 3 ) then
1392: LD_EXP 20
1396: PUSH
1397: LD_VAR 0 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: CALL_OW 259
1410: PUSH
1411: LD_EXP 20
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 1
1423: PLUS
1424: ARRAY
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 259
1433: LESS
1434: IFFALSE 1568
// begin mecha = others13Omega [ i + 1 ] ;
1436: LD_ADDR_VAR 0 6
1440: PUSH
1441: LD_EXP 20
1445: PUSH
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: ARRAY
1455: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1456: LD_VAR 0 6
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL_OW 336
// PlaceHumanInUnit ( mecha , AmControlTow ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: LD_INT 148
1475: PPUSH
1476: CALL_OW 52
// others13Omega = others13Omega diff mecha ;
1480: LD_ADDR_EXP 20
1484: PUSH
1485: LD_EXP 20
1489: PUSH
1490: LD_VAR 0 6
1494: DIFF
1495: ST_TO_ADDR
// for i in FilterUnitsInArea ( AmericanBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
1496: LD_ADDR_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: PPUSH
1504: LD_INT 22
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 21
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 3
1526: PUSH
1527: LD_INT 61
1529: PUSH
1530: EMPTY
1531: LIST
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: CALL_OW 70
1546: PUSH
1547: FOR_IN
1548: IFFALSE 1566
// ComLinkTo ( i , mecha ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_VAR 0 6
1559: PPUSH
1560: CALL_OW 135
1564: GO 1547
1566: POP
1567: POP
// end ; end ;
1568: GO 1389
1570: POP
1571: POP
// end ; if others13Omega > 0 then
1572: LD_EXP 20
1576: PUSH
1577: LD_INT 0
1579: GREATER
1580: IFFALSE 1919
// begin for i = 1 to others13Omega do
1582: LD_ADDR_VAR 0 2
1586: PUSH
1587: DOUBLE
1588: LD_INT 1
1590: DEC
1591: ST_TO_ADDR
1592: LD_EXP 20
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1917
// begin randBuild = [ AmLab1 , AmLab2 , AmLab3 , AmFab1 , AmFab2 , AmBar1 , AmBar2 ] [ Rand ( 1 , 7 ) ] ;
1600: LD_ADDR_VAR 0 8
1604: PUSH
1605: LD_INT 40
1607: PUSH
1608: LD_INT 43
1610: PUSH
1611: LD_INT 66
1613: PUSH
1614: LD_INT 51
1616: PUSH
1617: LD_INT 60
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: LD_INT 69
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 7
1640: PPUSH
1641: CALL_OW 12
1645: ARRAY
1646: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1647: LD_INT 22
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 30
1659: PUSH
1660: LD_INT 32
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 58
1669: PUSH
1670: EMPTY
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 69
1682: PUSH
1683: LD_INT 0
1685: GREATER
1686: IFFALSE 1763
// begin PlaceHumanInUnit ( others13Omega [ i ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1688: LD_EXP 20
1692: PUSH
1693: LD_VAR 0 2
1697: ARRAY
1698: PPUSH
1699: LD_INT 22
1701: PUSH
1702: LD_INT 1
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 32
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 58
1721: PUSH
1722: EMPTY
1723: LIST
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PPUSH
1730: CALL_OW 69
1734: PUSH
1735: LD_INT 1
1737: ARRAY
1738: PPUSH
1739: CALL_OW 52
// SetClass ( others13Omega [ i ] , 1 ) ;
1743: LD_EXP 20
1747: PUSH
1748: LD_VAR 0 2
1752: ARRAY
1753: PPUSH
1754: LD_INT 1
1756: PPUSH
1757: CALL_OW 336
// end else
1761: GO 1915
// begin PlaceHumanInUnit ( others13Omega [ i ] , randBuild ) ;
1763: LD_EXP 20
1767: PUSH
1768: LD_VAR 0 2
1772: ARRAY
1773: PPUSH
1774: LD_VAR 0 8
1778: PPUSH
1779: CALL_OW 52
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_factory then
1783: LD_EXP 20
1787: PUSH
1788: LD_VAR 0 2
1792: ARRAY
1793: PPUSH
1794: CALL_OW 310
1798: PPUSH
1799: CALL_OW 266
1803: PUSH
1804: LD_INT 3
1806: EQUAL
1807: IFFALSE 1827
// SetClass ( others13Omega [ i ] , 3 ) ;
1809: LD_EXP 20
1813: PUSH
1814: LD_VAR 0 2
1818: ARRAY
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = 4 then
1827: LD_EXP 20
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: PPUSH
1838: CALL_OW 310
1842: PPUSH
1843: CALL_OW 266
1847: PUSH
1848: LD_INT 4
1850: EQUAL
1851: IFFALSE 1871
// SetClass ( others13Omega [ i ] , 1 ) ;
1853: LD_EXP 20
1857: PUSH
1858: LD_VAR 0 2
1862: ARRAY
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_lab_full then
1871: LD_EXP 20
1875: PUSH
1876: LD_VAR 0 2
1880: ARRAY
1881: PPUSH
1882: CALL_OW 310
1886: PPUSH
1887: CALL_OW 266
1891: PUSH
1892: LD_INT 8
1894: EQUAL
1895: IFFALSE 1915
// SetClass ( others13Omega [ i ] , 1 ) ;
1897: LD_EXP 20
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 336
// end ; end ;
1915: GO 1597
1917: POP
1918: POP
// end ; end ; end_of_file
1919: LD_VAR 0 1
1923: RET
// export function PrepareFirstAtacks ; var i , veh ; begin
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
1928: PPUSH
// for i := 1 to 10 do
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: DOUBLE
1935: LD_INT 1
1937: DEC
1938: ST_TO_ADDR
1939: LD_INT 10
1941: PUSH
1942: FOR_TO
1943: IFFALSE 2092
// begin uc_side = 3 ;
1945: LD_ADDR_OWVAR 20
1949: PUSH
1950: LD_INT 3
1952: ST_TO_ADDR
// uc_nation = 3 ;
1953: LD_ADDR_OWVAR 21
1957: PUSH
1958: LD_INT 3
1960: ST_TO_ADDR
// vc_engine = 3 ;
1961: LD_ADDR_OWVAR 39
1965: PUSH
1966: LD_INT 3
1968: ST_TO_ADDR
// vc_control = 3 ;
1969: LD_ADDR_OWVAR 38
1973: PUSH
1974: LD_INT 3
1976: ST_TO_ADDR
// vc_weapon = [ 46 , 44 , 45 , 47 ] [ Rand ( 1 , 4 ) ] ;
1977: LD_ADDR_OWVAR 40
1981: PUSH
1982: LD_INT 46
1984: PUSH
1985: LD_INT 44
1987: PUSH
1988: LD_INT 45
1990: PUSH
1991: LD_INT 47
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 4
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: ST_TO_ADDR
// vc_chassis = 24 ;
2012: LD_ADDR_OWVAR 37
2016: PUSH
2017: LD_INT 24
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PreludiumAttack , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 7
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// ComAgressiveMove ( veh , 104 , 143 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 104
2052: PPUSH
2053: LD_INT 143
2055: PPUSH
2056: CALL_OW 114
// AddComAgressiveMove ( veh , 114 , 136 ) ;
2060: LD_VAR 0 3
2064: PPUSH
2065: LD_INT 114
2067: PPUSH
2068: LD_INT 136
2070: PPUSH
2071: CALL_OW 174
// AddComAgressiveMove ( veh , 112 , 40 ) ;
2075: LD_VAR 0 3
2079: PPUSH
2080: LD_INT 112
2082: PPUSH
2083: LD_INT 40
2085: PPUSH
2086: CALL_OW 174
// end ;
2090: GO 1942
2092: POP
2093: POP
// end ;
2094: LD_VAR 0 1
2098: RET
// export function PrepareRussianTPUNits ; var i , un ; begin
2099: LD_INT 0
2101: PPUSH
2102: PPUSH
2103: PPUSH
// for i = 1 to 6 do
2104: LD_ADDR_VAR 0 2
2108: PUSH
2109: DOUBLE
2110: LD_INT 1
2112: DEC
2113: ST_TO_ADDR
2114: LD_INT 6
2116: PUSH
2117: FOR_TO
2118: IFFALSE 2208
// begin uc_side = 3 ;
2120: LD_ADDR_OWVAR 20
2124: PUSH
2125: LD_INT 3
2127: ST_TO_ADDR
// uc_nation = 3 ;
2128: LD_ADDR_OWVAR 21
2132: PUSH
2133: LD_INT 3
2135: ST_TO_ADDR
// hc_name =  ;
2136: LD_ADDR_OWVAR 26
2140: PUSH
2141: LD_STRING 
2143: ST_TO_ADDR
// hc_gallery =  ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING 
2151: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
2152: LD_INT 0
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 10
2160: PPUSH
2161: CALL_OW 380
// un = CreateHuman ;
2165: LD_ADDR_VAR 0 3
2169: PUSH
2170: CALL_OW 44
2174: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2175: LD_VAR 0 3
2179: PPUSH
2180: LD_INT 14
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2190: LD_ADDR_EXP 26
2194: PUSH
2195: LD_EXP 26
2199: PUSH
2200: LD_VAR 0 3
2204: ADD
2205: ST_TO_ADDR
// end ;
2206: GO 2117
2208: POP
2209: POP
// for i = 1 to 3 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: DOUBLE
2216: LD_INT 1
2218: DEC
2219: ST_TO_ADDR
2220: LD_INT 3
2222: PUSH
2223: FOR_TO
2224: IFFALSE 2314
// begin uc_side = 3 ;
2226: LD_ADDR_OWVAR 20
2230: PUSH
2231: LD_INT 3
2233: ST_TO_ADDR
// uc_nation = 3 ;
2234: LD_ADDR_OWVAR 21
2238: PUSH
2239: LD_INT 3
2241: ST_TO_ADDR
// hc_name =  ;
2242: LD_ADDR_OWVAR 26
2246: PUSH
2247: LD_STRING 
2249: ST_TO_ADDR
// hc_gallery =  ;
2250: LD_ADDR_OWVAR 33
2254: PUSH
2255: LD_STRING 
2257: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
2258: LD_INT 0
2260: PPUSH
2261: LD_INT 9
2263: PPUSH
2264: LD_INT 10
2266: PPUSH
2267: CALL_OW 380
// un = CreateHuman ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: CALL_OW 44
2280: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2281: LD_VAR 0 3
2285: PPUSH
2286: LD_INT 14
2288: PPUSH
2289: LD_INT 0
2291: PPUSH
2292: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2296: LD_ADDR_EXP 26
2300: PUSH
2301: LD_EXP 26
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// end ;
2312: GO 2223
2314: POP
2315: POP
// for i = 1 to 2 do
2316: LD_ADDR_VAR 0 2
2320: PUSH
2321: DOUBLE
2322: LD_INT 1
2324: DEC
2325: ST_TO_ADDR
2326: LD_INT 2
2328: PUSH
2329: FOR_TO
2330: IFFALSE 2420
// begin uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// hc_name =  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// hc_gallery =  ;
2356: LD_ADDR_OWVAR 33
2360: PUSH
2361: LD_STRING 
2363: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
2364: LD_INT 1
2366: PPUSH
2367: LD_INT 4
2369: PPUSH
2370: LD_INT 10
2372: PPUSH
2373: CALL_OW 380
// un = CreateHuman ;
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: CALL_OW 44
2386: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2387: LD_VAR 0 3
2391: PPUSH
2392: LD_INT 14
2394: PPUSH
2395: LD_INT 0
2397: PPUSH
2398: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2402: LD_ADDR_EXP 26
2406: PUSH
2407: LD_EXP 26
2411: PUSH
2412: LD_VAR 0 3
2416: ADD
2417: ST_TO_ADDR
// end ;
2418: GO 2329
2420: POP
2421: POP
// end ; end_of_file end_of_file
2422: LD_VAR 0 1
2426: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2427: LD_INT 0
2429: PPUSH
2430: PPUSH
// if exist_mode then
2431: LD_VAR 0 2
2435: IFFALSE 2454
// unit := CreateCharacter ( ident ) else
2437: LD_ADDR_VAR 0 4
2441: PUSH
2442: LD_VAR 0 1
2446: PPUSH
2447: CALL_OW 34
2451: ST_TO_ADDR
2452: GO 2469
// unit := NewCharacter ( ident ) ;
2454: LD_ADDR_VAR 0 4
2458: PUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 25
2468: ST_TO_ADDR
// result := unit ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: LD_VAR 0 4
2478: ST_TO_ADDR
// end ;
2479: LD_VAR 0 3
2483: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
2484: LD_INT 0
2486: PPUSH
2487: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
2488: LD_STRING 13f_
2490: PUSH
2491: LD_VAR 0 1
2495: STR
2496: PPUSH
2497: CALL_OW 28
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2571
// begin unit = CreateCharacter ( 13f_ & ident ) ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: LD_STRING 13f_
2514: PUSH
2515: LD_VAR 0 1
2519: STR
2520: PPUSH
2521: CALL_OW 34
2525: ST_TO_ADDR
// omegaHeroes = omegaHeroes ^ unit ;
2526: LD_ADDR_EXP 23
2530: PUSH
2531: LD_EXP 23
2535: PUSH
2536: LD_VAR 0 3
2540: ADD
2541: ST_TO_ADDR
// if not unit = Stevens then
2542: LD_VAR 0 3
2546: PUSH
2547: LD_EXP 1
2551: EQUAL
2552: NOT
2553: IFFALSE 2571
// omegaHeroes = omegaHeroes ^ unit ;
2555: LD_ADDR_EXP 23
2559: PUSH
2560: LD_EXP 23
2564: PUSH
2565: LD_VAR 0 3
2569: ADD
2570: ST_TO_ADDR
// end ; result := unit ;
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_VAR 0 3
2580: ST_TO_ADDR
// end ;
2581: LD_VAR 0 2
2585: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
2586: LD_INT 0
2588: PPUSH
2589: PPUSH
// for i in charactersList do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 1
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2630
// begin if IsOk ( i ) then
2603: LD_VAR 0 4
2607: PPUSH
2608: CALL_OW 302
2612: IFFALSE 2628
// SaveCharacters ( i , ident ) ;
2614: LD_VAR 0 4
2618: PPUSH
2619: LD_VAR 0 2
2623: PPUSH
2624: CALL_OW 38
// end ;
2628: GO 2600
2630: POP
2631: POP
// end ;
2632: LD_VAR 0 3
2636: RET
// export function TabLenght ( tab ) ; var i ; begin
2637: LD_INT 0
2639: PPUSH
2640: PPUSH
// for i = 1 to tab do
2641: LD_ADDR_VAR 0 3
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_VAR 0 1
2655: PUSH
2656: FOR_TO
2657: IFFALSE 2671
// result = i ;
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_VAR 0 3
2668: ST_TO_ADDR
2669: GO 2656
2671: POP
2672: POP
// end ;
2673: LD_VAR 0 2
2677: RET
// export function SetDifficulty ; begin
2678: LD_INT 0
2680: PPUSH
// if Difficulty = 1 then
2681: LD_OWVAR 67
2685: PUSH
2686: LD_INT 1
2688: EQUAL
2689: IFFALSE 2756
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2691: LD_INT 51
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 2
2699: PPUSH
2700: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2704: LD_INT 57
2706: PPUSH
2707: LD_INT 3
2709: PPUSH
2710: LD_INT 2
2712: PPUSH
2713: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2717: LD_INT 63
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2730: LD_INT 52
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2743: LD_INT 58
2745: PPUSH
2746: LD_INT 3
2748: PPUSH
2749: LD_INT 2
2751: PPUSH
2752: CALL_OW 322
// end ; if Difficulty = 2 then
2756: LD_OWVAR 67
2760: PUSH
2761: LD_INT 2
2763: EQUAL
2764: IFFALSE 2857
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2766: LD_INT 51
2768: PPUSH
2769: LD_INT 3
2771: PPUSH
2772: LD_INT 2
2774: PPUSH
2775: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2779: LD_INT 57
2781: PPUSH
2782: LD_INT 3
2784: PPUSH
2785: LD_INT 2
2787: PPUSH
2788: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2792: LD_INT 63
2794: PPUSH
2795: LD_INT 3
2797: PPUSH
2798: LD_INT 2
2800: PPUSH
2801: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2805: LD_INT 52
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: LD_INT 2
2813: PPUSH
2814: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2818: LD_INT 58
2820: PPUSH
2821: LD_INT 3
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2831: LD_INT 64
2833: PPUSH
2834: LD_INT 3
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2844: LD_INT 59
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: CALL_OW 322
// end ; if Difficulty = 3 then
2857: LD_OWVAR 67
2861: PUSH
2862: LD_INT 3
2864: EQUAL
2865: IFFALSE 2984
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
2867: LD_INT 51
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
2880: LD_INT 57
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: LD_INT 2
2888: PPUSH
2889: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
2893: LD_INT 63
2895: PPUSH
2896: LD_INT 3
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
2906: LD_INT 52
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
2919: LD_INT 58
2921: PPUSH
2922: LD_INT 3
2924: PPUSH
2925: LD_INT 2
2927: PPUSH
2928: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
2932: LD_INT 64
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
2945: LD_INT 53
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
2958: LD_INT 59
2960: PPUSH
2961: LD_INT 3
2963: PPUSH
2964: LD_INT 2
2966: PPUSH
2967: CALL_OW 322
// SetTech ( tech_ST3 , 3 , state_researched ) ;
2971: LD_INT 65
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 322
// end ; end ;
2984: LD_VAR 0 1
2988: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2989: LD_INT 0
2991: PPUSH
2992: PPUSH
2993: PPUSH
// characters := characters diff [ Stevens , Baker , Gordon , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Powell ] ;
2994: LD_ADDR_VAR 0 1
2998: PUSH
2999: LD_VAR 0 1
3003: PUSH
3004: LD_EXP 1
3008: PUSH
3009: LD_EXP 2
3013: PUSH
3014: LD_EXP 3
3018: PUSH
3019: LD_EXP 6
3023: PUSH
3024: LD_EXP 7
3028: PUSH
3029: LD_EXP 8
3033: PUSH
3034: LD_EXP 9
3038: PUSH
3039: LD_EXP 10
3043: PUSH
3044: LD_EXP 11
3048: PUSH
3049: LD_EXP 12
3053: PUSH
3054: LD_EXP 13
3058: PUSH
3059: LD_EXP 14
3063: PUSH
3064: LD_EXP 15
3068: PUSH
3069: LD_EXP 16
3073: PUSH
3074: LD_EXP 17
3078: PUSH
3079: LD_EXP 19
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: DIFF
3102: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3103: LD_ADDR_VAR 0 6
3107: PUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_VAR 0 1
3115: PPUSH
3116: CALL_OW 12
3120: ST_TO_ADDR
// for i = 1 to characters do
3121: LD_ADDR_VAR 0 5
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_VAR 0 1
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3247
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3139: LD_VAR 0 5
3143: PUSH
3144: LD_VAR 0 6
3148: EQUAL
3149: PUSH
3150: LD_VAR 0 1
3154: PUSH
3155: LD_VAR 0 5
3159: ARRAY
3160: PPUSH
3161: CALL_OW 258
3165: PUSH
3166: LD_INT 1
3168: EQUAL
3169: AND
3170: IFFALSE 3192
// Say ( characters [ i ] , dialogMID ) ;
3172: LD_VAR 0 1
3176: PUSH
3177: LD_VAR 0 5
3181: ARRAY
3182: PPUSH
3183: LD_VAR 0 2
3187: PPUSH
3188: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3192: LD_VAR 0 5
3196: PUSH
3197: LD_VAR 0 6
3201: EQUAL
3202: PUSH
3203: LD_VAR 0 1
3207: PUSH
3208: LD_VAR 0 5
3212: ARRAY
3213: PPUSH
3214: CALL_OW 258
3218: PUSH
3219: LD_INT 2
3221: EQUAL
3222: AND
3223: IFFALSE 3245
// Say ( characters [ i ] , dialogFID ) ;
3225: LD_VAR 0 1
3229: PUSH
3230: LD_VAR 0 5
3234: ARRAY
3235: PPUSH
3236: LD_VAR 0 3
3240: PPUSH
3241: CALL_OW 88
// end ;
3245: GO 3136
3247: POP
3248: POP
// end ;
3249: LD_VAR 0 4
3253: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3254: LD_INT 0
3256: PPUSH
3257: PPUSH
3258: PPUSH
3259: PPUSH
3260: PPUSH
3261: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3262: LD_ADDR_VAR 0 6
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_VAR 0 1
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 25
3281: PUSH
3282: LD_INT 9
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PPUSH
3293: CALL_OW 69
3297: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3298: LD_ADDR_VAR 0 7
3302: PUSH
3303: LD_INT 81
3305: PUSH
3306: LD_VAR 0 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 3
3317: PUSH
3318: LD_INT 21
3320: PUSH
3321: LD_INT 3
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3341: LD_ADDR_VAR 0 4
3345: PUSH
3346: LD_INT 1
3348: PPUSH
3349: LD_INT 3
3351: PPUSH
3352: CALL_OW 12
3356: ST_TO_ADDR
// for i = 1 to list do
3357: LD_ADDR_VAR 0 5
3361: PUSH
3362: DOUBLE
3363: LD_INT 1
3365: DEC
3366: ST_TO_ADDR
3367: LD_VAR 0 6
3371: PUSH
3372: FOR_TO
3373: IFFALSE 3575
// for ta in filter do
3375: LD_ADDR_VAR 0 3
3379: PUSH
3380: LD_VAR 0 7
3384: PUSH
3385: FOR_IN
3386: IFFALSE 3571
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3388: LD_VAR 0 6
3392: PUSH
3393: LD_VAR 0 5
3397: ARRAY
3398: PPUSH
3399: LD_VAR 0 3
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 15
3411: LESSEQUAL
3412: IFFALSE 3569
// begin case c of 1 :
3414: LD_VAR 0 4
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3465
3427: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3428: LD_VAR 0 6
3432: PUSH
3433: LD_VAR 0 5
3437: ARRAY
3438: PPUSH
3439: LD_VAR 0 3
3443: PPUSH
3444: CALL_OW 250
3448: PPUSH
3449: LD_VAR 0 3
3453: PPUSH
3454: CALL_OW 251
3458: PPUSH
3459: CALL_OW 154
3463: GO 3569
3465: LD_INT 2
3467: DOUBLE
3468: EQUAL
3469: IFTRUE 3473
3471: GO 3537
3473: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3474: LD_VAR 0 6
3478: PUSH
3479: LD_VAR 0 5
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 3
3489: PPUSH
3490: CALL_OW 250
3494: PUSH
3495: LD_INT 1
3497: NEG
3498: PPUSH
3499: LD_INT 1
3501: PPUSH
3502: CALL_OW 12
3506: PLUS
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL_OW 251
3517: PUSH
3518: LD_INT 1
3520: NEG
3521: PPUSH
3522: LD_INT 1
3524: PPUSH
3525: CALL_OW 12
3529: PLUS
3530: PPUSH
3531: CALL_OW 153
3535: GO 3569
3537: LD_INT 3
3539: DOUBLE
3540: EQUAL
3541: IFTRUE 3545
3543: GO 3568
3545: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3546: LD_VAR 0 6
3550: PUSH
3551: LD_VAR 0 5
3555: ARRAY
3556: PPUSH
3557: LD_VAR 0 3
3561: PPUSH
3562: CALL_OW 115
3566: GO 3569
3568: POP
// end ; end ;
3569: GO 3385
3571: POP
3572: POP
3573: GO 3372
3575: POP
3576: POP
// end ;
3577: LD_VAR 0 2
3581: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit , vehs ; begin
3582: LD_INT 0
3584: PPUSH
3585: PPUSH
3586: PPUSH
3587: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
3588: LD_INT 22
3590: PUSH
3591: LD_VAR 0 1
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: LD_INT 21
3602: PUSH
3603: LD_INT 2
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 34
3612: PUSH
3613: LD_INT 49
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PPUSH
3625: CALL_OW 69
3629: PUSH
3630: LD_INT 0
3632: GREATER
3633: IFFALSE 3841
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
3635: LD_ADDR_VAR 0 5
3639: PUSH
3640: LD_INT 22
3642: PUSH
3643: LD_VAR 0 1
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 21
3654: PUSH
3655: LD_INT 2
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 34
3664: PUSH
3665: LD_INT 49
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 69
3681: ST_TO_ADDR
// wait ( 0 0$3 ) ;
3682: LD_INT 105
3684: PPUSH
3685: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
3689: LD_ADDR_VAR 0 3
3693: PUSH
3694: LD_VAR 0 5
3698: PPUSH
3699: LD_INT 3
3701: PUSH
3702: LD_INT 60
3704: PUSH
3705: EMPTY
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PPUSH
3712: CALL_OW 72
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3829
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
3720: LD_ADDR_VAR 0 4
3724: PUSH
3725: LD_INT 81
3727: PUSH
3728: LD_VAR 0 1
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: PUSH
3737: LD_INT 101
3739: PUSH
3740: LD_INT 1
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 3
3762: PUSH
3763: LD_INT 58
3765: PUSH
3766: EMPTY
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PPUSH
3783: CALL_OW 69
3787: PPUSH
3788: LD_VAR 0 3
3792: PPUSH
3793: CALL_OW 74
3797: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
3798: LD_VAR 0 3
3802: PPUSH
3803: LD_VAR 0 4
3807: PPUSH
3808: CALL_OW 250
3812: PPUSH
3813: LD_VAR 0 4
3817: PPUSH
3818: CALL_OW 251
3822: PPUSH
3823: CALL_OW 111
// end ;
3827: GO 3717
3829: POP
3830: POP
// until vehs = 0 ;
3831: LD_VAR 0 5
3835: PUSH
3836: LD_INT 0
3838: EQUAL
3839: IFFALSE 3635
// end ;
3841: LD_VAR 0 2
3845: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
3846: LD_INT 0
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
3856: PPUSH
3857: PPUSH
3858: PPUSH
// for i = 1 to medicCount do
3859: LD_ADDR_VAR 0 13
3863: PUSH
3864: DOUBLE
3865: LD_INT 1
3867: DEC
3868: ST_TO_ADDR
3869: LD_VAR 0 7
3873: PUSH
3874: FOR_TO
3875: IFFALSE 3957
// begin uc_side = side ;
3877: LD_ADDR_OWVAR 20
3881: PUSH
3882: LD_VAR 0 1
3886: ST_TO_ADDR
// uc_nation = nation ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_VAR 0 2
3896: ST_TO_ADDR
// hc_name =  ;
3897: LD_ADDR_OWVAR 26
3901: PUSH
3902: LD_STRING 
3904: ST_TO_ADDR
// hc_gallery =  ;
3905: LD_ADDR_OWVAR 33
3909: PUSH
3910: LD_STRING 
3912: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
3913: LD_INT 0
3915: PPUSH
3916: LD_INT 4
3918: PPUSH
3919: LD_VAR 0 8
3923: PPUSH
3924: CALL_OW 380
// un = CreateHuman ;
3928: LD_ADDR_VAR 0 15
3932: PUSH
3933: CALL_OW 44
3937: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
3938: LD_VAR 0 15
3942: PPUSH
3943: LD_VAR 0 9
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL_OW 49
// end ;
3955: GO 3874
3957: POP
3958: POP
// for i = 1 to soldierCount do
3959: LD_ADDR_VAR 0 13
3963: PUSH
3964: DOUBLE
3965: LD_INT 1
3967: DEC
3968: ST_TO_ADDR
3969: LD_VAR 0 3
3973: PUSH
3974: FOR_TO
3975: IFFALSE 4057
// begin uc_side = side ;
3977: LD_ADDR_OWVAR 20
3981: PUSH
3982: LD_VAR 0 1
3986: ST_TO_ADDR
// uc_nation = nation ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_VAR 0 2
3996: ST_TO_ADDR
// hc_name =  ;
3997: LD_ADDR_OWVAR 26
4001: PUSH
4002: LD_STRING 
4004: ST_TO_ADDR
// hc_gallery =  ;
4005: LD_ADDR_OWVAR 33
4009: PUSH
4010: LD_STRING 
4012: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_VAR 0 8
4023: PPUSH
4024: CALL_OW 380
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 15
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4038: LD_VAR 0 15
4042: PPUSH
4043: LD_VAR 0 9
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 49
// end ;
4055: GO 3974
4057: POP
4058: POP
// for i = 1 to sniperCount do
4059: LD_ADDR_VAR 0 13
4063: PUSH
4064: DOUBLE
4065: LD_INT 1
4067: DEC
4068: ST_TO_ADDR
4069: LD_VAR 0 4
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4157
// begin uc_side = side ;
4077: LD_ADDR_OWVAR 20
4081: PUSH
4082: LD_VAR 0 1
4086: ST_TO_ADDR
// uc_nation = nation ;
4087: LD_ADDR_OWVAR 21
4091: PUSH
4092: LD_VAR 0 2
4096: ST_TO_ADDR
// hc_name =  ;
4097: LD_ADDR_OWVAR 26
4101: PUSH
4102: LD_STRING 
4104: ST_TO_ADDR
// hc_gallery =  ;
4105: LD_ADDR_OWVAR 33
4109: PUSH
4110: LD_STRING 
4112: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
4113: LD_INT 0
4115: PPUSH
4116: LD_INT 5
4118: PPUSH
4119: LD_VAR 0 8
4123: PPUSH
4124: CALL_OW 380
// un = CreateHuman ;
4128: LD_ADDR_VAR 0 15
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4138: LD_VAR 0 15
4142: PPUSH
4143: LD_VAR 0 9
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 49
// end ;
4155: GO 4074
4157: POP
4158: POP
// for i = 1 to bazookCount do
4159: LD_ADDR_VAR 0 13
4163: PUSH
4164: DOUBLE
4165: LD_INT 1
4167: DEC
4168: ST_TO_ADDR
4169: LD_VAR 0 5
4173: PUSH
4174: FOR_TO
4175: IFFALSE 4257
// begin uc_side = side ;
4177: LD_ADDR_OWVAR 20
4181: PUSH
4182: LD_VAR 0 1
4186: ST_TO_ADDR
// uc_nation = nation ;
4187: LD_ADDR_OWVAR 21
4191: PUSH
4192: LD_VAR 0 2
4196: ST_TO_ADDR
// hc_name =  ;
4197: LD_ADDR_OWVAR 26
4201: PUSH
4202: LD_STRING 
4204: ST_TO_ADDR
// hc_gallery =  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_INT 9
4218: PPUSH
4219: LD_VAR 0 8
4223: PPUSH
4224: CALL_OW 380
// un = CreateHuman ;
4228: LD_ADDR_VAR 0 15
4232: PUSH
4233: CALL_OW 44
4237: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4238: LD_VAR 0 15
4242: PPUSH
4243: LD_VAR 0 9
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 49
// end ;
4255: GO 4174
4257: POP
4258: POP
// for i = 1 to mortalCount do
4259: LD_ADDR_VAR 0 13
4263: PUSH
4264: DOUBLE
4265: LD_INT 1
4267: DEC
4268: ST_TO_ADDR
4269: LD_VAR 0 6
4273: PUSH
4274: FOR_TO
4275: IFFALSE 4357
// begin uc_side = side ;
4277: LD_ADDR_OWVAR 20
4281: PUSH
4282: LD_VAR 0 1
4286: ST_TO_ADDR
// uc_nation = nation ;
4287: LD_ADDR_OWVAR 21
4291: PUSH
4292: LD_VAR 0 2
4296: ST_TO_ADDR
// hc_name =  ;
4297: LD_ADDR_OWVAR 26
4301: PUSH
4302: LD_STRING 
4304: ST_TO_ADDR
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 8
4318: PPUSH
4319: LD_VAR 0 8
4323: PPUSH
4324: CALL_OW 380
// un = CreateHuman ;
4328: LD_ADDR_VAR 0 15
4332: PUSH
4333: CALL_OW 44
4337: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4338: LD_VAR 0 15
4342: PPUSH
4343: LD_VAR 0 9
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 49
// end ;
4355: GO 4274
4357: POP
4358: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4359: LD_ADDR_VAR 0 17
4363: PUSH
4364: LD_INT 22
4366: PUSH
4367: LD_VAR 0 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 25
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 69
4394: ST_TO_ADDR
// for i in medic_list do
4395: LD_ADDR_VAR 0 13
4399: PUSH
4400: LD_VAR 0 17
4404: PUSH
4405: FOR_IN
4406: IFFALSE 4424
// ComMoveToArea ( i , healArea ) ;
4408: LD_VAR 0 13
4412: PPUSH
4413: LD_VAR 0 10
4417: PPUSH
4418: CALL_OW 113
4422: GO 4405
4424: POP
4425: POP
// repeat wait ( 0 0$1 ) ;
4426: LD_INT 35
4428: PPUSH
4429: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
4433: LD_ADDR_VAR 0 16
4437: PUSH
4438: LD_INT 22
4440: PUSH
4441: LD_VAR 0 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 550
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 24
4472: PUSH
4473: LD_INT 250
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 69
4493: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
4494: LD_ADDR_VAR 0 18
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_VAR 0 1
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PUSH
4511: LD_INT 2
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 1
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 25
4526: PUSH
4527: LD_INT 5
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 25
4536: PUSH
4537: LD_INT 8
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 9
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 24
4563: PUSH
4564: LD_INT 1000
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: ST_TO_ADDR
// if medicCount > 0 then
4581: LD_VAR 0 7
4585: PUSH
4586: LD_INT 0
4588: GREATER
4589: IFFALSE 4663
// begin if damageUnit_list > 0 then
4591: LD_VAR 0 16
4595: PUSH
4596: LD_INT 0
4598: GREATER
4599: IFFALSE 4663
// begin for i in damageUnit_list do
4601: LD_ADDR_VAR 0 13
4605: PUSH
4606: LD_VAR 0 16
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4661
// begin ComMoveToArea ( i , healArea ) ;
4614: LD_VAR 0 13
4618: PPUSH
4619: LD_VAR 0 10
4623: PPUSH
4624: CALL_OW 113
// for j in medic_list do
4628: LD_ADDR_VAR 0 14
4632: PUSH
4633: LD_VAR 0 17
4637: PUSH
4638: FOR_IN
4639: IFFALSE 4657
// AddComHeal ( j , i ) ;
4641: LD_VAR 0 14
4645: PPUSH
4646: LD_VAR 0 13
4650: PPUSH
4651: CALL_OW 188
4655: GO 4638
4657: POP
4658: POP
// end ;
4659: GO 4611
4661: POP
4662: POP
// end ; end ; for i in soldiersOK_list do
4663: LD_ADDR_VAR 0 13
4667: PUSH
4668: LD_VAR 0 18
4672: PUSH
4673: FOR_IN
4674: IFFALSE 4850
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
4676: LD_ADDR_VAR 0 21
4680: PUSH
4681: LD_INT 22
4683: PUSH
4684: LD_VAR 0 11
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PPUSH
4693: CALL_OW 69
4697: PPUSH
4698: LD_VAR 0 13
4702: PPUSH
4703: CALL_OW 74
4707: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4708: LD_ADDR_VAR 0 22
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_VAR 0 11
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 2
4727: PUSH
4728: LD_INT 59
4730: PUSH
4731: EMPTY
4732: LIST
4733: PUSH
4734: LD_INT 21
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: PPUSH
4767: CALL_OW 69
4771: PPUSH
4772: LD_VAR 0 13
4776: PPUSH
4777: CALL_OW 74
4781: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4782: LD_VAR 0 13
4786: PPUSH
4787: LD_VAR 0 21
4791: PPUSH
4792: CALL_OW 296
4796: PUSH
4797: LD_INT 8
4799: PLUS
4800: PUSH
4801: LD_VAR 0 13
4805: PPUSH
4806: LD_VAR 0 22
4810: PPUSH
4811: CALL_OW 296
4815: LESS
4816: IFFALSE 4834
// begin ComAttackUnit ( i , target1 ) ;
4818: LD_VAR 0 13
4822: PPUSH
4823: LD_VAR 0 21
4827: PPUSH
4828: CALL_OW 115
// end else
4832: GO 4848
// begin ComAttackUnit ( i , target2 ) ;
4834: LD_VAR 0 13
4838: PPUSH
4839: LD_VAR 0 22
4843: PPUSH
4844: CALL_OW 115
// end ; end ;
4848: GO 4673
4850: POP
4851: POP
// until soldiersOK_list = [ ] ;
4852: LD_VAR 0 18
4856: PUSH
4857: EMPTY
4858: EQUAL
4859: IFFALSE 4426
// end ;
4861: LD_VAR 0 12
4865: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
4871: PPUSH
4872: PPUSH
4873: PPUSH
4874: PPUSH
4875: PPUSH
4876: PPUSH
4877: PPUSH
4878: PPUSH
// amChassisTab = [ ] ;
4879: LD_ADDR_VAR 0 19
4883: PUSH
4884: EMPTY
4885: ST_TO_ADDR
// arChassisTab = [ ] ;
4886: LD_ADDR_VAR 0 18
4890: PUSH
4891: EMPTY
4892: ST_TO_ADDR
// ruChassisTab = [ ] ;
4893: LD_ADDR_VAR 0 17
4897: PUSH
4898: EMPTY
4899: ST_TO_ADDR
// for i = 1 to vehCount do
4900: LD_ADDR_VAR 0 13
4904: PUSH
4905: DOUBLE
4906: LD_INT 1
4908: DEC
4909: ST_TO_ADDR
4910: LD_VAR 0 3
4914: PUSH
4915: FOR_TO
4916: IFFALSE 6340
// begin wait ( 0 0$01 ) ;
4918: LD_INT 35
4920: PPUSH
4921: CALL_OW 67
// if nation = 1 then
4925: LD_VAR 0 5
4929: PUSH
4930: LD_INT 1
4932: EQUAL
4933: IFFALSE 5414
// begin uc_side = side ;
4935: LD_ADDR_OWVAR 20
4939: PUSH
4940: LD_VAR 0 2
4944: ST_TO_ADDR
// uc_nation = nation ;
4945: LD_ADDR_OWVAR 21
4949: PUSH
4950: LD_VAR 0 5
4954: ST_TO_ADDR
// vc_engine = vehengine ;
4955: LD_ADDR_OWVAR 39
4959: PUSH
4960: LD_VAR 0 6
4964: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4965: LD_ADDR_OWVAR 40
4969: PUSH
4970: LD_VAR 0 10
4974: PUSH
4975: LD_INT 1
4977: PPUSH
4978: LD_VAR 0 10
4982: PPUSH
4983: CALL_OW 12
4987: ARRAY
4988: ST_TO_ADDR
// for j = 1 to AMWeapon do
4989: LD_ADDR_VAR 0 14
4993: PUSH
4994: DOUBLE
4995: LD_INT 1
4997: DEC
4998: ST_TO_ADDR
4999: LD_VAR 0 10
5003: PUSH
5004: FOR_TO
5005: IFFALSE 5306
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
5007: LD_VAR 0 10
5011: PUSH
5012: LD_VAR 0 14
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: EQUAL
5021: PUSH
5022: LD_VAR 0 10
5026: PUSH
5027: LD_VAR 0 14
5031: ARRAY
5032: PUSH
5033: LD_INT 3
5035: EQUAL
5036: OR
5037: IFFALSE 5090
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
5039: LD_ADDR_VAR 0 19
5043: PUSH
5044: LD_INT 1
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 4
5055: PUSH
5056: LD_INT 5
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5066: LD_ADDR_OWVAR 37
5070: PUSH
5071: LD_VAR 0 19
5075: PUSH
5076: LD_INT 1
5078: PPUSH
5079: LD_VAR 0 19
5083: PPUSH
5084: CALL_OW 12
5088: ARRAY
5089: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
5090: LD_VAR 0 10
5094: PUSH
5095: LD_VAR 0 14
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: EQUAL
5104: PUSH
5105: LD_VAR 0 10
5109: PUSH
5110: LD_VAR 0 14
5114: ARRAY
5115: PUSH
5116: LD_INT 5
5118: EQUAL
5119: OR
5120: PUSH
5121: LD_VAR 0 10
5125: PUSH
5126: LD_VAR 0 14
5130: ARRAY
5131: PUSH
5132: LD_INT 9
5134: EQUAL
5135: OR
5136: PUSH
5137: LD_VAR 0 10
5141: PUSH
5142: LD_VAR 0 14
5146: ARRAY
5147: PUSH
5148: LD_INT 11
5150: EQUAL
5151: OR
5152: PUSH
5153: LD_VAR 0 10
5157: PUSH
5158: LD_VAR 0 14
5162: ARRAY
5163: PUSH
5164: LD_INT 7
5166: EQUAL
5167: OR
5168: IFFALSE 5217
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
5170: LD_ADDR_VAR 0 19
5174: PUSH
5175: LD_INT 2
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: LD_INT 4
5183: PUSH
5184: LD_INT 5
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5193: LD_ADDR_OWVAR 37
5197: PUSH
5198: LD_VAR 0 19
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_VAR 0 19
5210: PPUSH
5211: CALL_OW 12
5215: ARRAY
5216: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
5217: LD_VAR 0 10
5221: PUSH
5222: LD_VAR 0 14
5226: ARRAY
5227: PUSH
5228: LD_INT 8
5230: EQUAL
5231: PUSH
5232: LD_VAR 0 10
5236: PUSH
5237: LD_VAR 0 14
5241: ARRAY
5242: PUSH
5243: LD_INT 6
5245: EQUAL
5246: OR
5247: PUSH
5248: LD_VAR 0 10
5252: PUSH
5253: LD_VAR 0 14
5257: ARRAY
5258: PUSH
5259: LD_INT 10
5261: EQUAL
5262: OR
5263: IFFALSE 5304
// begin amChassisTab = [ 4 , 5 ] ;
5265: LD_ADDR_VAR 0 19
5269: PUSH
5270: LD_INT 4
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5280: LD_ADDR_OWVAR 37
5284: PUSH
5285: LD_VAR 0 19
5289: PUSH
5290: LD_INT 1
5292: PPUSH
5293: LD_VAR 0 19
5297: PPUSH
5298: CALL_OW 12
5302: ARRAY
5303: ST_TO_ADDR
// end ; end ;
5304: GO 5004
5306: POP
5307: POP
// veh = CreateVehicle ;
5308: LD_ADDR_VAR 0 16
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5318: LD_VAR 0 16
5322: PPUSH
5323: LD_VAR 0 1
5327: PPUSH
5328: LD_INT 0
5330: PPUSH
5331: CALL_OW 49
// if vc_control = 1 then
5335: LD_OWVAR 38
5339: PUSH
5340: LD_INT 1
5342: EQUAL
5343: IFFALSE 5400
// begin hc_gallery =  ;
5345: LD_ADDR_OWVAR 33
5349: PUSH
5350: LD_STRING 
5352: ST_TO_ADDR
// hc_name =  ;
5353: LD_ADDR_OWVAR 26
5357: PUSH
5358: LD_STRING 
5360: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5361: LD_INT 0
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: LD_VAR 0 4
5371: PPUSH
5372: CALL_OW 380
// un = CreateHuman ;
5376: LD_ADDR_VAR 0 15
5380: PUSH
5381: CALL_OW 44
5385: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5386: LD_VAR 0 15
5390: PPUSH
5391: LD_VAR 0 16
5395: PPUSH
5396: CALL_OW 52
// end ; i = i + 1 ;
5400: LD_ADDR_VAR 0 13
5404: PUSH
5405: LD_VAR 0 13
5409: PUSH
5410: LD_INT 1
5412: PLUS
5413: ST_TO_ADDR
// end ; if nation = 2 then
5414: LD_VAR 0 5
5418: PUSH
5419: LD_INT 2
5421: EQUAL
5422: IFFALSE 5924
// begin uc_side = side ;
5424: LD_ADDR_OWVAR 20
5428: PUSH
5429: LD_VAR 0 2
5433: ST_TO_ADDR
// uc_nation = nation ;
5434: LD_ADDR_OWVAR 21
5438: PUSH
5439: LD_VAR 0 5
5443: ST_TO_ADDR
// vc_engine = vehengine ;
5444: LD_ADDR_OWVAR 39
5448: PUSH
5449: LD_VAR 0 6
5453: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
5454: LD_INT 22
5456: PUSH
5457: LD_VAR 0 2
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 21
5468: PUSH
5469: LD_INT 2
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 33
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 50
5488: PUSH
5489: EMPTY
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: PUSH
5503: LD_INT 8
5505: LESSEQUAL
5506: IFFALSE 5534
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
5508: LD_ADDR_OWVAR 38
5512: PUSH
5513: LD_VAR 0 7
5517: PUSH
5518: LD_INT 1
5520: PPUSH
5521: LD_VAR 0 7
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: ST_TO_ADDR
5532: GO 5542
// vc_control = control_apeman ;
5534: LD_ADDR_OWVAR 38
5538: PUSH
5539: LD_INT 5
5541: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
5542: LD_ADDR_OWVAR 40
5546: PUSH
5547: LD_VAR 0 9
5551: PUSH
5552: LD_INT 1
5554: PPUSH
5555: LD_VAR 0 9
5559: PPUSH
5560: CALL_OW 12
5564: ARRAY
5565: ST_TO_ADDR
// for j = 1 to ARWeapons do
5566: LD_ADDR_VAR 0 14
5570: PUSH
5571: DOUBLE
5572: LD_INT 1
5574: DEC
5575: ST_TO_ADDR
5576: LD_VAR 0 9
5580: PUSH
5581: FOR_TO
5582: IFFALSE 5816
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
5584: LD_VAR 0 9
5588: PUSH
5589: LD_VAR 0 14
5593: ARRAY
5594: PUSH
5595: LD_INT 24
5597: EQUAL
5598: PUSH
5599: LD_VAR 0 9
5603: PUSH
5604: LD_VAR 0 14
5608: ARRAY
5609: PUSH
5610: LD_INT 22
5612: EQUAL
5613: OR
5614: PUSH
5615: LD_VAR 0 9
5619: PUSH
5620: LD_VAR 0 14
5624: ARRAY
5625: PUSH
5626: LD_INT 23
5628: EQUAL
5629: OR
5630: PUSH
5631: LD_VAR 0 9
5635: PUSH
5636: LD_VAR 0 14
5640: ARRAY
5641: PUSH
5642: LD_INT 30
5644: EQUAL
5645: OR
5646: IFFALSE 5695
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
5648: LD_ADDR_VAR 0 18
5652: PUSH
5653: LD_INT 11
5655: PUSH
5656: LD_INT 12
5658: PUSH
5659: LD_INT 13
5661: PUSH
5662: LD_INT 14
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5671: LD_ADDR_OWVAR 37
5675: PUSH
5676: LD_VAR 0 18
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_VAR 0 18
5688: PPUSH
5689: CALL_OW 12
5693: ARRAY
5694: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
5695: LD_VAR 0 9
5699: PUSH
5700: LD_VAR 0 14
5704: ARRAY
5705: PUSH
5706: LD_INT 29
5708: EQUAL
5709: PUSH
5710: LD_VAR 0 9
5714: PUSH
5715: LD_VAR 0 14
5719: ARRAY
5720: PUSH
5721: LD_INT 28
5723: EQUAL
5724: OR
5725: PUSH
5726: LD_VAR 0 9
5730: PUSH
5731: LD_VAR 0 14
5735: ARRAY
5736: PUSH
5737: LD_INT 27
5739: EQUAL
5740: OR
5741: PUSH
5742: LD_VAR 0 9
5746: PUSH
5747: LD_VAR 0 14
5751: ARRAY
5752: PUSH
5753: LD_INT 26
5755: EQUAL
5756: OR
5757: PUSH
5758: LD_VAR 0 9
5762: PUSH
5763: LD_VAR 0 14
5767: ARRAY
5768: PUSH
5769: LD_INT 25
5771: EQUAL
5772: OR
5773: IFFALSE 5814
// begin arChassisTab = [ 13 , 14 ] ;
5775: LD_ADDR_VAR 0 18
5779: PUSH
5780: LD_INT 13
5782: PUSH
5783: LD_INT 14
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5790: LD_ADDR_OWVAR 37
5794: PUSH
5795: LD_VAR 0 18
5799: PUSH
5800: LD_INT 1
5802: PPUSH
5803: LD_VAR 0 18
5807: PPUSH
5808: CALL_OW 12
5812: ARRAY
5813: ST_TO_ADDR
// end ; end ;
5814: GO 5581
5816: POP
5817: POP
// veh = CreateVehicle ;
5818: LD_ADDR_VAR 0 16
5822: PUSH
5823: CALL_OW 45
5827: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5828: LD_VAR 0 16
5832: PPUSH
5833: LD_VAR 0 1
5837: PPUSH
5838: LD_INT 0
5840: PPUSH
5841: CALL_OW 49
// if vc_control = 1 then
5845: LD_OWVAR 38
5849: PUSH
5850: LD_INT 1
5852: EQUAL
5853: IFFALSE 5910
// begin hc_gallery =  ;
5855: LD_ADDR_OWVAR 33
5859: PUSH
5860: LD_STRING 
5862: ST_TO_ADDR
// hc_name =  ;
5863: LD_ADDR_OWVAR 26
5867: PUSH
5868: LD_STRING 
5870: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_VAR 0 4
5881: PPUSH
5882: CALL_OW 380
// un = CreateHuman ;
5886: LD_ADDR_VAR 0 15
5890: PUSH
5891: CALL_OW 44
5895: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5896: LD_VAR 0 15
5900: PPUSH
5901: LD_VAR 0 16
5905: PPUSH
5906: CALL_OW 52
// end ; i = i + 1 ;
5910: LD_ADDR_VAR 0 13
5914: PUSH
5915: LD_VAR 0 13
5919: PUSH
5920: LD_INT 1
5922: PLUS
5923: ST_TO_ADDR
// end ; if nation = 3 then
5924: LD_VAR 0 5
5928: PUSH
5929: LD_INT 3
5931: EQUAL
5932: IFFALSE 6338
// begin uc_side = side ;
5934: LD_ADDR_OWVAR 20
5938: PUSH
5939: LD_VAR 0 2
5943: ST_TO_ADDR
// uc_nation = nation ;
5944: LD_ADDR_OWVAR 21
5948: PUSH
5949: LD_VAR 0 5
5953: ST_TO_ADDR
// vc_engine = vehengine ;
5954: LD_ADDR_OWVAR 39
5958: PUSH
5959: LD_VAR 0 6
5963: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
5964: LD_ADDR_OWVAR 38
5968: PUSH
5969: LD_VAR 0 7
5973: PUSH
5974: LD_INT 1
5976: PPUSH
5977: LD_VAR 0 7
5981: PPUSH
5982: CALL_OW 12
5986: ARRAY
5987: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5988: LD_ADDR_OWVAR 40
5992: PUSH
5993: LD_VAR 0 8
5997: PUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_VAR 0 8
6005: PPUSH
6006: CALL_OW 12
6010: ARRAY
6011: ST_TO_ADDR
// for j = 1 to RuWeapons do
6012: LD_ADDR_VAR 0 14
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_VAR 0 8
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6214
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
6030: LD_VAR 0 8
6034: PUSH
6035: LD_VAR 0 14
6039: ARRAY
6040: PUSH
6041: LD_INT 42
6043: EQUAL
6044: PUSH
6045: LD_VAR 0 8
6049: PUSH
6050: LD_VAR 0 14
6054: ARRAY
6055: PUSH
6056: LD_INT 43
6058: EQUAL
6059: OR
6060: PUSH
6061: LD_VAR 0 8
6065: PUSH
6066: LD_VAR 0 14
6070: ARRAY
6071: PUSH
6072: LD_INT 44
6074: EQUAL
6075: OR
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_VAR 0 14
6086: ARRAY
6087: PUSH
6088: LD_INT 45
6090: EQUAL
6091: OR
6092: PUSH
6093: LD_VAR 0 8
6097: PUSH
6098: LD_VAR 0 14
6102: ARRAY
6103: PUSH
6104: LD_INT 49
6106: EQUAL
6107: OR
6108: IFFALSE 6145
// begin ruChassisTab = [ 24 ] ;
6110: LD_ADDR_VAR 0 17
6114: PUSH
6115: LD_INT 24
6117: PUSH
6118: EMPTY
6119: LIST
6120: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6121: LD_ADDR_OWVAR 37
6125: PUSH
6126: LD_VAR 0 17
6130: PUSH
6131: LD_INT 1
6133: PPUSH
6134: LD_VAR 0 17
6138: PPUSH
6139: CALL_OW 12
6143: ARRAY
6144: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
6145: LD_VAR 0 8
6149: PUSH
6150: LD_VAR 0 14
6154: ARRAY
6155: PUSH
6156: LD_INT 46
6158: EQUAL
6159: PUSH
6160: LD_VAR 0 8
6164: PUSH
6165: LD_VAR 0 14
6169: ARRAY
6170: PUSH
6171: LD_INT 47
6173: EQUAL
6174: OR
6175: IFFALSE 6212
// begin ruChassisTab = [ 24 ] ;
6177: LD_ADDR_VAR 0 17
6181: PUSH
6182: LD_INT 24
6184: PUSH
6185: EMPTY
6186: LIST
6187: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6188: LD_ADDR_OWVAR 37
6192: PUSH
6193: LD_VAR 0 17
6197: PUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_VAR 0 17
6205: PPUSH
6206: CALL_OW 12
6210: ARRAY
6211: ST_TO_ADDR
// end ; end ;
6212: GO 6027
6214: POP
6215: POP
// veh = CreateVehicle ;
6216: LD_ADDR_VAR 0 16
6220: PUSH
6221: CALL_OW 45
6225: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6226: LD_VAR 0 16
6230: PPUSH
6231: LD_VAR 0 1
6235: PPUSH
6236: LD_INT 0
6238: PPUSH
6239: CALL_OW 49
// if vc_control = 1 then
6243: LD_OWVAR 38
6247: PUSH
6248: LD_INT 1
6250: EQUAL
6251: IFFALSE 6338
// begin if uc_side = 8 then
6253: LD_OWVAR 20
6257: PUSH
6258: LD_INT 8
6260: EQUAL
6261: IFFALSE 6273
// uc_nation = 2 else
6263: LD_ADDR_OWVAR 21
6267: PUSH
6268: LD_INT 2
6270: ST_TO_ADDR
6271: GO 6283
// uc_nation = nation ;
6273: LD_ADDR_OWVAR 21
6277: PUSH
6278: LD_VAR 0 5
6282: ST_TO_ADDR
// hc_gallery =  ;
6283: LD_ADDR_OWVAR 33
6287: PUSH
6288: LD_STRING 
6290: ST_TO_ADDR
// hc_name =  ;
6291: LD_ADDR_OWVAR 26
6295: PUSH
6296: LD_STRING 
6298: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6299: LD_INT 0
6301: PPUSH
6302: LD_INT 3
6304: PPUSH
6305: LD_VAR 0 4
6309: PPUSH
6310: CALL_OW 380
// un = CreateHuman ;
6314: LD_ADDR_VAR 0 15
6318: PUSH
6319: CALL_OW 44
6323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6324: LD_VAR 0 15
6328: PPUSH
6329: LD_VAR 0 16
6333: PPUSH
6334: CALL_OW 52
// end ; end ; end ;
6338: GO 4915
6340: POP
6341: POP
// repeat wait ( 0 0$1 ) ;
6342: LD_INT 35
6344: PPUSH
6345: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
6349: LD_ADDR_VAR 0 20
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 2
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 21
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 250
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: PUSH
6396: LD_INT 22
6398: PUSH
6399: LD_VAR 0 2
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 21
6410: PUSH
6411: LD_INT 2
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 34
6420: PUSH
6421: LD_INT 49
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: PPUSH
6433: CALL_OW 69
6437: DIFF
6438: ST_TO_ADDR
// if vehicleOK_list > 0 then
6439: LD_VAR 0 20
6443: PUSH
6444: LD_INT 0
6446: GREATER
6447: IFFALSE 6638
// begin for i in vehicleOK_list do
6449: LD_ADDR_VAR 0 13
6453: PUSH
6454: LD_VAR 0 20
6458: PUSH
6459: FOR_IN
6460: IFFALSE 6636
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6462: LD_ADDR_VAR 0 21
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_VAR 0 11
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: PPUSH
6484: LD_VAR 0 13
6488: PPUSH
6489: CALL_OW 74
6493: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6494: LD_ADDR_VAR 0 22
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_VAR 0 11
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 59
6516: PUSH
6517: EMPTY
6518: LIST
6519: PUSH
6520: LD_INT 21
6522: PUSH
6523: LD_INT 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 21
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: PPUSH
6558: LD_VAR 0 13
6562: PPUSH
6563: CALL_OW 74
6567: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6568: LD_VAR 0 13
6572: PPUSH
6573: LD_VAR 0 21
6577: PPUSH
6578: CALL_OW 296
6582: PUSH
6583: LD_INT 8
6585: PLUS
6586: PUSH
6587: LD_VAR 0 13
6591: PPUSH
6592: LD_VAR 0 22
6596: PPUSH
6597: CALL_OW 296
6601: LESS
6602: IFFALSE 6620
// begin ComAttackUnit ( i , target1 ) ;
6604: LD_VAR 0 13
6608: PPUSH
6609: LD_VAR 0 21
6613: PPUSH
6614: CALL_OW 115
// end else
6618: GO 6634
// begin ComAttackUnit ( i , target2 ) ;
6620: LD_VAR 0 13
6624: PPUSH
6625: LD_VAR 0 22
6629: PPUSH
6630: CALL_OW 115
// end ; end ;
6634: GO 6459
6636: POP
6637: POP
// end ; until vehicleOK_list = 0 ;
6638: LD_VAR 0 20
6642: PUSH
6643: LD_INT 0
6645: EQUAL
6646: IFFALSE 6342
// end ; end_of_file
6648: LD_VAR 0 12
6652: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
6653: LD_VAR 0 1
6657: PUSH
6658: LD_INT 1
6660: EQUAL
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 4
6669: EQUAL
6670: AND
6671: IFFALSE 6680
// YouLost ( sojusz ) ;
6673: LD_STRING sojusz
6675: PPUSH
6676: CALL_OW 104
// end ;
6680: PPOPN 2
6682: END
// on BuildingCaptured ( building , side , human ) do begin if side = 4 then
6683: LD_VAR 0 2
6687: PUSH
6688: LD_INT 4
6690: EQUAL
6691: IFFALSE 6705
// SetSide ( building , 4 ) ;
6693: LD_VAR 0 1
6697: PPUSH
6698: LD_INT 4
6700: PPUSH
6701: CALL_OW 235
// end ;
6705: PPOPN 3
6707: END
// on UnitDestroyed ( unit ) do var i ;
6708: LD_INT 0
6710: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 255
6720: PUSH
6721: LD_INT 1
6723: EQUAL
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 247
6734: PUSH
6735: LD_INT 1
6737: EQUAL
6738: AND
6739: IFFALSE 6799
// begin unitLost = unitLost + 1 ;
6741: LD_ADDR_EXP 30
6745: PUSH
6746: LD_EXP 30
6750: PUSH
6751: LD_INT 1
6753: PLUS
6754: ST_TO_ADDR
// if unit = DeltaDoctor or unit = Gordon or unit = Peter then
6755: LD_VAR 0 1
6759: PUSH
6760: LD_EXP 5
6764: EQUAL
6765: PUSH
6766: LD_VAR 0 1
6770: PUSH
6771: LD_EXP 3
6775: EQUAL
6776: OR
6777: PUSH
6778: LD_VAR 0 1
6782: PUSH
6783: LD_EXP 4
6787: EQUAL
6788: OR
6789: IFFALSE 6799
// amSciStatus = 0 ;
6791: LD_ADDR_EXP 25
6795: PUSH
6796: LD_INT 0
6798: ST_TO_ADDR
// end ; end ;
6799: PPOPN 2
6801: END
// on SiberiteRocketExploded ( unit , x , y ) do var i ;
6802: LD_INT 0
6804: PPUSH
// begin if siberiteRocketStatus = 0 then
6805: LD_EXP 33
6809: PUSH
6810: LD_INT 0
6812: EQUAL
6813: IFFALSE 6878
// for i in FilterAllUnits ( [ [ f_side , 3 ] ] ) do
6815: LD_ADDR_VAR 0 4
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: FOR_IN
6839: IFFALSE 6876
// if GetDistUnitXY ( i , x , y ) < 25 then
6841: LD_VAR 0 4
6845: PPUSH
6846: LD_VAR 0 2
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: CALL_OW 297
6860: PUSH
6861: LD_INT 25
6863: LESS
6864: IFFALSE 6874
// siberiteRocketStatus = 1 ;
6866: LD_ADDR_EXP 33
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
6874: GO 6838
6876: POP
6877: POP
// end ; end_of_file
6878: PPOPN 4
6880: END
// every 1 do
6881: GO 6883
6883: DISABLE
// begin InGameOn ;
6884: CALL_OW 8
// SetClass ( Stevens , 4 ) ;
6888: LD_EXP 1
6892: PPUSH
6893: LD_INT 4
6895: PPUSH
6896: CALL_OW 336
// RevealFogArea ( 1 , AmericanBaseArea ) ;
6900: LD_INT 1
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 332
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6910: LD_EXP 3
6914: PUSH
6915: LD_EXP 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 87
// Say ( Peter , D1-Pet-1 ) ;
6928: LD_EXP 4
6932: PPUSH
6933: LD_STRING D1-Pet-1
6935: PPUSH
6936: CALL_OW 88
// if IsOK ( Stevens ) then
6940: LD_EXP 1
6944: PPUSH
6945: CALL_OW 302
6949: IFFALSE 6965
// Say ( Stevens , D1-Stev-1 ) else
6951: LD_EXP 1
6955: PPUSH
6956: LD_STRING D1-Stev-1
6958: PPUSH
6959: CALL_OW 88
6963: GO 6977
// Say ( Baker , D1-Stev-1 ) ;
6965: LD_EXP 2
6969: PPUSH
6970: LD_STRING D1-Stev-1
6972: PPUSH
6973: CALL_OW 88
// CenterOnXY ( 108 , 140 ) ;
6977: LD_INT 108
6979: PPUSH
6980: LD_INT 140
6982: PPUSH
6983: CALL_OW 84
// wait ( 0 0$2 ) ;
6987: LD_INT 70
6989: PPUSH
6990: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 4
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PPUSH
7008: CALL_OW 87
// SayRadio ( Powell , D1-Pow-1 ) ;
7012: LD_EXP 19
7016: PPUSH
7017: LD_STRING D1-Pow-1
7019: PPUSH
7020: CALL_OW 94
// if IsOK ( Stevens ) then
7024: LD_EXP 1
7028: PPUSH
7029: CALL_OW 302
7033: IFFALSE 7049
// Say ( Stevens , D1-Stev-2 ) else
7035: LD_EXP 1
7039: PPUSH
7040: LD_STRING D1-Stev-2
7042: PPUSH
7043: CALL_OW 88
7047: GO 7061
// Say ( Baker , D1-Stev-2 ) ;
7049: LD_EXP 2
7053: PPUSH
7054: LD_STRING D1-Stev-2
7056: PPUSH
7057: CALL_OW 88
// PrepareFirstAtacks ;
7061: CALL 1924 0 0
// CenterOnXY ( 108 , 140 ) ;
7065: LD_INT 108
7067: PPUSH
7068: LD_INT 140
7070: PPUSH
7071: CALL_OW 84
// wait ( 0 0$5 ) ;
7075: LD_INT 175
7077: PPUSH
7078: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D1-Rand-1 ,  ) ;
7082: LD_INT 22
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 21
7094: PUSH
7095: LD_INT 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 25
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 25
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 25
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 4
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 25
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: PPUSH
7184: LD_STRING D1-Rand-1
7186: PPUSH
7187: LD_STRING 
7189: PPUSH
7190: CALL 2989 0 3
// wait ( 0 0$3 ) ;
7194: LD_INT 105
7196: PPUSH
7197: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
7201: LD_EXP 3
7205: PUSH
7206: LD_EXP 4
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 87
// Say ( Peter , D1-Pet-2 ) ;
7219: LD_EXP 4
7223: PPUSH
7224: LD_STRING D1-Pet-2
7226: PPUSH
7227: CALL_OW 88
// if IsOK ( Stevens ) then
7231: LD_EXP 1
7235: PPUSH
7236: CALL_OW 302
7240: IFFALSE 7256
// Say ( Stevens , D1-Stev-3 ) else
7242: LD_EXP 1
7246: PPUSH
7247: LD_STRING D1-Stev-3
7249: PPUSH
7250: CALL_OW 88
7254: GO 7268
// Say ( Baker , D1-Stev-3 ) ;
7256: LD_EXP 2
7260: PPUSH
7261: LD_STRING D1-Stev-3
7263: PPUSH
7264: CALL_OW 88
// Say ( Peter , D1-Pet-3 ) ;
7268: LD_EXP 4
7272: PPUSH
7273: LD_STRING D1-Pet-3
7275: PPUSH
7276: CALL_OW 88
// SetLives ( FilterUnitsInArea ( ObsBaseArea , [ f_side , 1 ] ) , 150 ) ;
7280: LD_INT 9
7282: PPUSH
7283: LD_INT 22
7285: PUSH
7286: LD_INT 1
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 70
7297: PPUSH
7298: LD_INT 150
7300: PPUSH
7301: CALL_OW 234
// InGameOff ;
7305: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
7309: LD_STRING C1
7311: PPUSH
7312: CALL_OW 337
// if IsOk ( Stevens ) then
7316: LD_EXP 1
7320: PPUSH
7321: CALL_OW 302
7325: IFFALSE 7336
// ChangeMissionObjectives ( C1stev ) else
7327: LD_STRING C1stev
7329: PPUSH
7330: CALL_OW 337
7334: GO 7343
// ChangeMissionObjectives ( C1baker ) ;
7336: LD_STRING C1baker
7338: PPUSH
7339: CALL_OW 337
// end ;
7343: END
// every 0 0$1 trigger EscapeAvalaible = 1 do
7344: LD_EXP 27
7348: PUSH
7349: LD_INT 1
7351: EQUAL
7352: IFFALSE 7404
7354: GO 7356
7356: DISABLE
// begin enable ;
7357: ENABLE
// allUnitsLengh = TabLenght ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) ;
7358: LD_ADDR_EXP 31
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_INT 1
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 1
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 50
7385: PUSH
7386: EMPTY
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: PPUSH
7394: CALL_OW 69
7398: PPUSH
7399: CALL 2637 0 1
7403: ST_TO_ADDR
// end ;
7404: END
// every 0 0$10 trigger ruAttacksCounter = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
7405: LD_EXP 24
7409: PUSH
7410: LD_INT 3
7412: EQUAL
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 21
7439: PUSH
7440: LD_INT 1
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: PUSH
7461: LD_INT 0
7463: EQUAL
7464: AND
7465: IFFALSE 7478
7467: GO 7469
7469: DISABLE
// EscapeAvalaible = 1 ;
7470: LD_ADDR_EXP 27
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
7478: END
// every 0 0$1 trigger EscapeAvalaible = 1 do var i ;
7479: LD_EXP 27
7483: PUSH
7484: LD_INT 1
7486: EQUAL
7487: IFFALSE 8350
7489: GO 7491
7491: DISABLE
7492: LD_INT 0
7494: PPUSH
// begin InGameOn ;
7495: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , true ) ;
7499: LD_INT 3
7501: PPUSH
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 1
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 80
// PlaceSeeing ( 126 , 17 , 1 , - 8 ) ;
7515: LD_INT 126
7517: PPUSH
7518: LD_INT 17
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 8
7526: NEG
7527: PPUSH
7528: CALL_OW 330
// CenterNowOnUnits ( amsiblab ) ;
7532: LD_INT 1
7534: PPUSH
7535: CALL_OW 87
// PrepareRussianTPUNits ;
7539: CALL 2099 0 0
// ChangeSideFog ( 3 , 1 ) ;
7543: LD_INT 3
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 343
// wait ( 0 0$5 ) ;
7553: LD_INT 175
7555: PPUSH
7556: CALL_OW 67
// for i in russianTPUnits do
7560: LD_ADDR_VAR 0 1
7564: PUSH
7565: LD_EXP 26
7569: PUSH
7570: FOR_IN
7571: IFFALSE 7596
// TeleportUnit ( i , 128 , 19 , 4 , true ) ;
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_INT 128
7580: PPUSH
7581: LD_INT 19
7583: PPUSH
7584: LD_INT 4
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 483
7594: GO 7570
7596: POP
7597: POP
// wait ( 0 0$1 ) ;
7598: LD_INT 35
7600: PPUSH
7601: CALL_OW 67
// ComTurnUnit ( russianTPUnits , amsiblab ) ;
7605: LD_EXP 26
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 119
// SetSide ( amsiblab , 3 ) ;
7617: LD_INT 1
7619: PPUSH
7620: LD_INT 3
7622: PPUSH
7623: CALL_OW 235
// ComEnterUnit ( UnitFilter ( russianTPUnits , [ f_class , 4 ] ) , amsiblab ) ;
7627: LD_EXP 26
7631: PPUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 4
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 72
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 120
// for i in FilterUnitsInArea ( LabHill , [ [ f_type , unit_building ] ] ) diff [ amsiblab ] do
7654: LD_ADDR_VAR 0 1
7658: PUSH
7659: LD_INT 15
7661: PPUSH
7662: LD_INT 21
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: PPUSH
7675: CALL_OW 70
7679: PUSH
7680: LD_INT 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: DIFF
7686: PUSH
7687: FOR_IN
7688: IFFALSE 7706
// AddComAttackUnit ( russianTPUnits , i ) ;
7690: LD_EXP 26
7694: PPUSH
7695: LD_VAR 0 1
7699: PPUSH
7700: CALL_OW 175
7704: GO 7687
7706: POP
7707: POP
// wait ( 0 0$2 ) ;
7708: LD_INT 70
7710: PPUSH
7711: CALL_OW 67
// if IsOK ( Peter ) then
7715: LD_EXP 4
7719: PPUSH
7720: CALL_OW 302
7724: IFFALSE 7740
// Say ( Peter , D2-Pet-1 ) else
7726: LD_EXP 4
7730: PPUSH
7731: LD_STRING D2-Pet-1
7733: PPUSH
7734: CALL_OW 88
7738: GO 7790
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) , D2-Pet-1 ,  ) ;
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 21
7752: PUSH
7753: LD_INT 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 26
7762: PUSH
7763: LD_INT 1
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 69
7779: PPUSH
7780: LD_STRING D2-Pet-1
7782: PPUSH
7783: LD_STRING 
7785: PPUSH
7786: CALL 2989 0 3
// if IsOK ( Stevens ) then
7790: LD_EXP 1
7794: PPUSH
7795: CALL_OW 302
7799: IFFALSE 7815
// Say ( Stevens , D2-Stev-1 ) else
7801: LD_EXP 1
7805: PPUSH
7806: LD_STRING D2-Stev-1
7808: PPUSH
7809: CALL_OW 88
7813: GO 7827
// Say ( Baker , D2-Stev-1 ) ;
7815: LD_EXP 2
7819: PPUSH
7820: LD_STRING D2-Stev-1
7822: PPUSH
7823: CALL_OW 88
// if IsOk ( Peter ) then
7827: LD_EXP 4
7831: PPUSH
7832: CALL_OW 302
7836: IFFALSE 7852
// begin Say ( Peter , D2-Pet-2 ) ;
7838: LD_EXP 4
7842: PPUSH
7843: LD_STRING D2-Pet-2
7845: PPUSH
7846: CALL_OW 88
// end else
7850: GO 7989
// begin if IsOk ( DeltaDoctor ) then
7852: LD_EXP 5
7856: PPUSH
7857: CALL_OW 302
7861: IFFALSE 7877
// begin Say ( DeltaDoctor , D2-Pet-2 ) ;
7863: LD_EXP 5
7867: PPUSH
7868: LD_STRING D2-Pet-2
7870: PPUSH
7871: CALL_OW 88
// end else
7875: GO 7989
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-2 ,  ) ;
7877: LD_INT 22
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 21
7889: PUSH
7890: LD_INT 1
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 26
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: LD_INT 25
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 25
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 25
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 25
7942: PUSH
7943: LD_INT 4
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 25
7952: PUSH
7953: LD_INT 5
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 69
7978: PPUSH
7979: LD_STRING D2-Pet-2
7981: PPUSH
7982: LD_STRING 
7984: PPUSH
7985: CALL 2989 0 3
// end ; end ; if IsOK ( Stevens ) then
7989: LD_EXP 1
7993: PPUSH
7994: CALL_OW 302
7998: IFFALSE 8014
// Say ( Stevens , D2-Stev-2 ) else
8000: LD_EXP 1
8004: PPUSH
8005: LD_STRING D2-Stev-2
8007: PPUSH
8008: CALL_OW 88
8012: GO 8026
// Say ( Baker , D2-Stev-2 ) ;
8014: LD_EXP 2
8018: PPUSH
8019: LD_STRING D2-Stev-2
8021: PPUSH
8022: CALL_OW 88
// if IsOk ( Peter ) then
8026: LD_EXP 4
8030: PPUSH
8031: CALL_OW 302
8035: IFFALSE 8051
// begin Say ( Peter , D2-Pet-3 ) ;
8037: LD_EXP 4
8041: PPUSH
8042: LD_STRING D2-Pet-3
8044: PPUSH
8045: CALL_OW 88
// end else
8049: GO 8188
// begin if IsOk ( DeltaDoctor ) then
8051: LD_EXP 5
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8076
// begin Say ( DeltaDoctor , D2-Pet-3 ) ;
8062: LD_EXP 5
8066: PPUSH
8067: LD_STRING D2-Pet-3
8069: PPUSH
8070: CALL_OW 88
// end else
8074: GO 8188
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-3 ,  ) ;
8076: LD_INT 22
8078: PUSH
8079: LD_INT 1
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 21
8088: PUSH
8089: LD_INT 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 26
8098: PUSH
8099: LD_INT 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 25
8111: PUSH
8112: LD_INT 1
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 25
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 25
8141: PUSH
8142: LD_INT 4
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: LD_INT 25
8151: PUSH
8152: LD_INT 5
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: PPUSH
8178: LD_STRING D2-Pet-3
8180: PPUSH
8181: LD_STRING 
8183: PPUSH
8184: CALL 2989 0 3
// end ; end ; ComExitBuilding ( UnitsInside ( amsiblab ) ) ;
8188: LD_INT 1
8190: PPUSH
8191: CALL_OW 313
8195: PPUSH
8196: CALL_OW 122
// wait ( 0 0$2 ) ;
8200: LD_INT 70
8202: PPUSH
8203: CALL_OW 67
// for i in russianTPUnits do
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_EXP 26
8216: PUSH
8217: FOR_IN
8218: IFFALSE 8243
// TeleportUnit ( i , 185 , 175 , 4 , true ) ;
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_INT 185
8227: PPUSH
8228: LD_INT 175
8230: PPUSH
8231: LD_INT 4
8233: PPUSH
8234: LD_INT 1
8236: PPUSH
8237: CALL_OW 483
8241: GO 8217
8243: POP
8244: POP
// wait ( 0 0$2 ) ;
8245: LD_INT 70
8247: PPUSH
8248: CALL_OW 67
// SetLives ( amsiblab , 0 ) ;
8252: LD_INT 1
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 234
// wait ( 0 0$2 ) ;
8262: LD_INT 70
8264: PPUSH
8265: CALL_OW 67
// for i in russianTPUnits do
8269: LD_ADDR_VAR 0 1
8273: PUSH
8274: LD_EXP 26
8278: PUSH
8279: FOR_IN
8280: IFFALSE 8293
// RemoveUnit ( i ) ;
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 64
8291: GO 8279
8293: POP
8294: POP
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
8295: LD_INT 3
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: CALL_OW 80
// ChangeSideFog ( 3 , 3 ) ;
8311: LD_INT 3
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 343
// escapeAvalaible = 1 ;
8321: LD_ADDR_EXP 27
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// InGameOff ;
8329: CALL_OW 9
// ChangeMissionObjectives ( C2 ) ;
8333: LD_STRING C2
8335: PPUSH
8336: CALL_OW 337
// SetAreaMapShow ( EscapeArea , 1 ) ;
8340: LD_INT 11
8342: PPUSH
8343: LD_INT 1
8345: PPUSH
8346: CALL_OW 424
// end ; end_of_file
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StevensStatus = 1 and IsDead ( Stevens ) do
8353: LD_EXP 28
8357: PUSH
8358: LD_INT 1
8360: EQUAL
8361: PUSH
8362: LD_EXP 1
8366: PPUSH
8367: CALL_OW 301
8371: AND
8372: IFFALSE 8384
8374: GO 8376
8376: DISABLE
// YouLost ( stevded ) ;
8377: LD_STRING stevded
8379: PPUSH
8380: CALL_OW 104
8384: END
// every 0 0$1 trigger not StevensStatus = 1 and IsDead ( Baker ) do
8385: LD_EXP 28
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: NOT
8394: PUSH
8395: LD_EXP 2
8399: PPUSH
8400: CALL_OW 301
8404: AND
8405: IFFALSE 8417
8407: GO 8409
8409: DISABLE
// YouLost ( bakerded ) ;
8410: LD_STRING bakerded
8412: PPUSH
8413: CALL_OW 104
8417: END
// every 0 0$1 trigger IsDead ( amsiblab ) and EscapeAvalaible = 0 do
8418: LD_INT 1
8420: PPUSH
8421: CALL_OW 301
8425: PUSH
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 0
8433: EQUAL
8434: AND
8435: IFFALSE 8447
8437: GO 8439
8439: DISABLE
// YouLost ( lab ) ; end_of_file
8440: LD_STRING lab
8442: PPUSH
8443: CALL_OW 104
8447: END
// every 7 7$0 do
8448: GO 8450
8450: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 10 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8451: LD_INT 8
8453: PPUSH
8454: LD_INT 3
8456: PPUSH
8457: LD_INT 10
8459: PUSH
8460: LD_INT 11
8462: PUSH
8463: LD_INT 12
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: PUSH
8471: LD_OWVAR 67
8475: ARRAY
8476: PUSH
8477: LD_INT 5
8479: PPUSH
8480: LD_INT 10
8482: PPUSH
8483: CALL_OW 12
8487: PLUS
8488: PPUSH
8489: LD_INT 10
8491: PPUSH
8492: LD_INT 3
8494: PPUSH
8495: LD_INT 3
8497: PPUSH
8498: LD_INT 3
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: LD_INT 44
8510: PUSH
8511: LD_INT 45
8513: PUSH
8514: LD_INT 46
8516: PUSH
8517: LD_INT 47
8519: PUSH
8520: LD_INT 49
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PPUSH
8530: EMPTY
8531: PPUSH
8532: EMPTY
8533: PPUSH
8534: LD_INT 1
8536: PPUSH
8537: CALL 4866 0 11
// end ;
8541: END
// every 7 7$0 do
8542: GO 8544
8544: DISABLE
// begin ruAttacksCounter = 1 ;
8545: LD_ADDR_EXP 24
8549: PUSH
8550: LD_INT 1
8552: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 5 , 5 , 6 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8553: LD_INT 3
8555: PPUSH
8556: LD_INT 3
8558: PPUSH
8559: LD_INT 2
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 4
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: PUSH
8573: LD_OWVAR 67
8577: ARRAY
8578: PPUSH
8579: LD_INT 0
8581: PPUSH
8582: LD_INT 5
8584: PUSH
8585: LD_INT 5
8587: PUSH
8588: LD_INT 6
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: PUSH
8596: LD_OWVAR 67
8600: ARRAY
8601: PPUSH
8602: LD_INT 0
8604: PPUSH
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 6
8610: PUSH
8611: LD_INT 7
8613: PUSH
8614: LD_INT 8
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: PUSH
8622: LD_OWVAR 67
8626: ARRAY
8627: PPUSH
8628: LD_INT 8
8630: PPUSH
8631: LD_INT 8
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL 3846 0 11
// end ;
8641: END
// every 14 14$0 do
8642: GO 8644
8644: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 11 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8645: LD_INT 8
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: LD_INT 11
8653: PUSH
8654: LD_INT 11
8656: PUSH
8657: LD_INT 12
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: PUSH
8665: LD_OWVAR 67
8669: ARRAY
8670: PUSH
8671: LD_INT 5
8673: PPUSH
8674: LD_INT 10
8676: PPUSH
8677: CALL_OW 12
8681: PLUS
8682: PPUSH
8683: LD_INT 10
8685: PPUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 3
8691: PPUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: LD_INT 44
8704: PUSH
8705: LD_INT 45
8707: PUSH
8708: LD_INT 46
8710: PUSH
8711: LD_INT 47
8713: PUSH
8714: LD_INT 49
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PPUSH
8724: EMPTY
8725: PPUSH
8726: EMPTY
8727: PPUSH
8728: LD_INT 1
8730: PPUSH
8731: CALL 4866 0 11
// end ;
8735: END
// every 14 14$0 do
8736: GO 8738
8738: DISABLE
// begin ruAttacksCounter = 2 ;
8739: LD_ADDR_EXP 24
8743: PUSH
8744: LD_INT 2
8746: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 6 , 7 , 7 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8747: LD_INT 3
8749: PPUSH
8750: LD_INT 3
8752: PPUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 3
8758: PUSH
8759: LD_INT 4
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: PUSH
8767: LD_OWVAR 67
8771: ARRAY
8772: PPUSH
8773: LD_INT 0
8775: PPUSH
8776: LD_INT 6
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: LD_OWVAR 67
8794: ARRAY
8795: PPUSH
8796: LD_INT 0
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: LD_INT 6
8804: PUSH
8805: LD_INT 7
8807: PUSH
8808: LD_INT 8
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: LD_OWVAR 67
8820: ARRAY
8821: PPUSH
8822: LD_INT 8
8824: PPUSH
8825: LD_INT 8
8827: PPUSH
8828: LD_INT 1
8830: PPUSH
8831: CALL 3846 0 11
// end ;
8835: END
// every 21 21$0 trigger BurlakStatus = 1 do
8836: LD_EXP 29
8840: PUSH
8841: LD_INT 1
8843: EQUAL
8844: IFFALSE 8939
8846: GO 8848
8848: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
8849: LD_INT 8
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: LD_INT 13
8857: PUSH
8858: LD_INT 14
8860: PUSH
8861: LD_INT 15
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: LD_OWVAR 67
8873: ARRAY
8874: PUSH
8875: LD_INT 5
8877: PPUSH
8878: LD_INT 10
8880: PPUSH
8881: CALL_OW 12
8885: PLUS
8886: PPUSH
8887: LD_INT 10
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: LD_INT 3
8895: PPUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: LD_INT 44
8908: PUSH
8909: LD_INT 45
8911: PUSH
8912: LD_INT 46
8914: PUSH
8915: LD_INT 47
8917: PUSH
8918: LD_INT 49
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PPUSH
8928: EMPTY
8929: PPUSH
8930: EMPTY
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: CALL 4866 0 11
// end ;
8939: END
// every 21 21$0 trigger BurlakStatus = 1 do
8940: LD_EXP 29
8944: PUSH
8945: LD_INT 1
8947: EQUAL
8948: IFFALSE 9049
8950: GO 8952
8952: DISABLE
// begin ruAttacksCounter = 3 ;
8953: LD_ADDR_EXP 24
8957: PUSH
8958: LD_INT 3
8960: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
8961: LD_INT 3
8963: PPUSH
8964: LD_INT 3
8966: PPUSH
8967: LD_INT 2
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 4
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: PPUSH
8987: LD_INT 0
8989: PPUSH
8990: LD_INT 7
8992: PUSH
8993: LD_INT 8
8995: PUSH
8996: LD_INT 9
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: LD_OWVAR 67
9008: ARRAY
9009: PPUSH
9010: LD_INT 0
9012: PPUSH
9013: LD_INT 0
9015: PPUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 7
9021: PUSH
9022: LD_INT 8
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: LIST
9029: PUSH
9030: LD_OWVAR 67
9034: ARRAY
9035: PPUSH
9036: LD_INT 8
9038: PPUSH
9039: LD_INT 8
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL 3846 0 11
// end ;
9049: END
// every 28 28$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
9050: LD_EXP 24
9054: PUSH
9055: LD_INT 2
9057: EQUAL
9058: PUSH
9059: LD_EXP 29
9063: PUSH
9064: LD_INT 0
9066: EQUAL
9067: AND
9068: IFFALSE 9163
9070: GO 9072
9072: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9073: LD_INT 8
9075: PPUSH
9076: LD_INT 3
9078: PPUSH
9079: LD_INT 13
9081: PUSH
9082: LD_INT 14
9084: PUSH
9085: LD_INT 15
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: LD_OWVAR 67
9097: ARRAY
9098: PUSH
9099: LD_INT 5
9101: PPUSH
9102: LD_INT 10
9104: PPUSH
9105: CALL_OW 12
9109: PLUS
9110: PPUSH
9111: LD_INT 10
9113: PPUSH
9114: LD_INT 3
9116: PPUSH
9117: LD_INT 3
9119: PPUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 3
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PPUSH
9130: LD_INT 44
9132: PUSH
9133: LD_INT 45
9135: PUSH
9136: LD_INT 46
9138: PUSH
9139: LD_INT 47
9141: PUSH
9142: LD_INT 49
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: PPUSH
9152: EMPTY
9153: PPUSH
9154: EMPTY
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL 4866 0 11
// end ;
9163: END
// every 28 28$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
9164: LD_EXP 24
9168: PUSH
9169: LD_INT 2
9171: EQUAL
9172: PUSH
9173: LD_EXP 29
9177: PUSH
9178: LD_INT 0
9180: EQUAL
9181: AND
9182: IFFALSE 9283
9184: GO 9186
9186: DISABLE
// begin ruAttacksCounter = 3 ;
9187: LD_ADDR_EXP 24
9191: PUSH
9192: LD_INT 3
9194: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
9195: LD_INT 3
9197: PPUSH
9198: LD_INT 3
9200: PPUSH
9201: LD_INT 6
9203: PUSH
9204: LD_INT 7
9206: PUSH
9207: LD_INT 8
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_OWVAR 67
9219: ARRAY
9220: PPUSH
9221: LD_INT 0
9223: PPUSH
9224: LD_INT 7
9226: PUSH
9227: LD_INT 8
9229: PUSH
9230: LD_INT 9
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_OWVAR 67
9242: ARRAY
9243: PPUSH
9244: LD_INT 0
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 7
9255: PUSH
9256: LD_INT 8
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_OWVAR 67
9268: ARRAY
9269: PPUSH
9270: LD_INT 8
9272: PPUSH
9273: LD_INT 8
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL 3846 0 11
// end ;
9283: END
// every 21 21$0 trigger BurlakStatus = 0 do
9284: LD_EXP 29
9288: PUSH
9289: LD_INT 0
9291: EQUAL
9292: IFFALSE 9387
9294: GO 9296
9296: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9297: LD_INT 8
9299: PPUSH
9300: LD_INT 7
9302: PPUSH
9303: LD_INT 6
9305: PUSH
9306: LD_INT 7
9308: PUSH
9309: LD_INT 7
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_OWVAR 67
9321: ARRAY
9322: PUSH
9323: LD_INT 2
9325: PPUSH
9326: LD_INT 4
9328: PPUSH
9329: CALL_OW 12
9333: PLUS
9334: PPUSH
9335: LD_INT 10
9337: PPUSH
9338: LD_INT 3
9340: PPUSH
9341: LD_INT 3
9343: PPUSH
9344: LD_INT 3
9346: PUSH
9347: LD_INT 3
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: LD_INT 44
9356: PUSH
9357: LD_INT 45
9359: PUSH
9360: LD_INT 46
9362: PUSH
9363: LD_INT 47
9365: PUSH
9366: LD_INT 49
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PPUSH
9376: EMPTY
9377: PPUSH
9378: EMPTY
9379: PPUSH
9380: LD_INT 1
9382: PPUSH
9383: CALL 4866 0 11
// end ;
9387: END
// every 21 21$0 trigger BurlakStatus = 0 do
9388: LD_EXP 29
9392: PUSH
9393: LD_INT 0
9395: EQUAL
9396: IFFALSE 9491
9398: GO 9400
9400: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9401: LD_INT 8
9403: PPUSH
9404: LD_INT 7
9406: PPUSH
9407: LD_INT 6
9409: PUSH
9410: LD_INT 7
9412: PUSH
9413: LD_INT 7
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: PUSH
9421: LD_OWVAR 67
9425: ARRAY
9426: PUSH
9427: LD_INT 2
9429: PPUSH
9430: LD_INT 4
9432: PPUSH
9433: CALL_OW 12
9437: PLUS
9438: PPUSH
9439: LD_INT 10
9441: PPUSH
9442: LD_INT 3
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 3
9450: PUSH
9451: LD_INT 3
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PPUSH
9458: LD_INT 44
9460: PUSH
9461: LD_INT 45
9463: PUSH
9464: LD_INT 46
9466: PUSH
9467: LD_INT 47
9469: PUSH
9470: LD_INT 49
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PPUSH
9480: EMPTY
9481: PPUSH
9482: EMPTY
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: CALL 4866 0 11
// end ;
9491: END
// every 21 21$0 trigger BurlakStatus = 0 do
9492: LD_EXP 29
9496: PUSH
9497: LD_INT 0
9499: EQUAL
9500: IFFALSE 9591
9502: GO 9504
9504: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 1 , 3 , [ 3 , 3 ] , [ ] , [ ] , [ 10 , 9 , 7 , 6 ] , 1 ) ;
9505: LD_INT 8
9507: PPUSH
9508: LD_INT 7
9510: PPUSH
9511: LD_INT 6
9513: PUSH
9514: LD_INT 7
9516: PUSH
9517: LD_INT 7
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: LD_OWVAR 67
9529: ARRAY
9530: PUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 4
9536: PPUSH
9537: CALL_OW 12
9541: PLUS
9542: PPUSH
9543: LD_INT 10
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: LD_INT 3
9551: PPUSH
9552: LD_INT 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PPUSH
9562: EMPTY
9563: PPUSH
9564: EMPTY
9565: PPUSH
9566: LD_INT 10
9568: PUSH
9569: LD_INT 9
9571: PUSH
9572: LD_INT 7
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: CALL 4866 0 11
// end ;
9591: END
// every 21 21$0 trigger BurlakStatus = 0 do
9592: LD_EXP 29
9596: PUSH
9597: LD_INT 0
9599: EQUAL
9600: IFFALSE 9744
9602: GO 9604
9604: DISABLE
// begin uc_side = 7 ;
9605: LD_ADDR_OWVAR 20
9609: PUSH
9610: LD_INT 7
9612: ST_TO_ADDR
// uc_nation = 1 ;
9613: LD_ADDR_OWVAR 21
9617: PUSH
9618: LD_INT 1
9620: ST_TO_ADDR
// vc_engine = 3 ;
9621: LD_ADDR_OWVAR 39
9625: PUSH
9626: LD_INT 3
9628: ST_TO_ADDR
// vc_control = 1 ;
9629: LD_ADDR_OWVAR 38
9633: PUSH
9634: LD_INT 1
9636: ST_TO_ADDR
// vc_chassis = 24 ;
9637: LD_ADDR_OWVAR 37
9641: PUSH
9642: LD_INT 24
9644: ST_TO_ADDR
// vc_weapon = 46 ;
9645: LD_ADDR_OWVAR 40
9649: PUSH
9650: LD_INT 46
9652: ST_TO_ADDR
// burlakVeh = CreateVehicle ;
9653: LD_ADDR_EXP 22
9657: PUSH
9658: CALL_OW 45
9662: ST_TO_ADDR
// PlaceUnitArea ( burlakVeh , RussianAttackSpawn , false ) ;
9663: LD_EXP 22
9667: PPUSH
9668: LD_INT 8
9670: PPUSH
9671: LD_INT 0
9673: PPUSH
9674: CALL_OW 49
// Burlak = PrepareUnit ( Burlak , false ) ;
9678: LD_ADDR_EXP 21
9682: PUSH
9683: LD_STRING Burlak
9685: PPUSH
9686: LD_INT 0
9688: PPUSH
9689: CALL 2427 0 2
9693: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , burlakVeh ) ;
9694: LD_EXP 21
9698: PPUSH
9699: LD_EXP 22
9703: PPUSH
9704: CALL_OW 52
// SetMark ( burlakVeh , 1 ) ;
9708: LD_EXP 22
9712: PPUSH
9713: LD_INT 1
9715: PPUSH
9716: CALL_OW 242
// ComAgressiveMove ( [ Burlak , BurlakVeh ] , 117 , 39 ) ;
9720: LD_EXP 21
9724: PUSH
9725: LD_EXP 22
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PPUSH
9734: LD_INT 117
9736: PPUSH
9737: LD_INT 39
9739: PPUSH
9740: CALL_OW 114
// end ;
9744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and escapeAvalaible = 1 and IsDead ( amsiblab ) do
9745: LD_INT 22
9747: PUSH
9748: LD_INT 3
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 21
9757: PUSH
9758: LD_INT 2
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 50
9767: PUSH
9768: EMPTY
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: PPUSH
9776: CALL_OW 69
9780: PUSH
9781: LD_INT 0
9783: EQUAL
9784: PUSH
9785: LD_EXP 27
9789: PUSH
9790: LD_INT 1
9792: EQUAL
9793: AND
9794: PUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 301
9802: AND
9803: IFFALSE 9899
9805: GO 9807
9807: DISABLE
// begin RespawnAttackVehicle ( RussianSpawn2 , 3 , [ 8 , 9 , 9 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9808: LD_INT 13
9810: PPUSH
9811: LD_INT 3
9813: PPUSH
9814: LD_INT 8
9816: PUSH
9817: LD_INT 9
9819: PUSH
9820: LD_INT 9
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: LD_OWVAR 67
9832: ARRAY
9833: PUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 4
9839: PPUSH
9840: CALL_OW 12
9844: PLUS
9845: PPUSH
9846: LD_INT 10
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: LD_INT 3
9854: PPUSH
9855: LD_INT 3
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: LD_INT 44
9867: PUSH
9868: LD_INT 45
9870: PUSH
9871: LD_INT 46
9873: PUSH
9874: LD_INT 47
9876: PUSH
9877: LD_INT 49
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: PPUSH
9887: EMPTY
9888: PPUSH
9889: EMPTY
9890: PPUSH
9891: LD_INT 1
9893: PPUSH
9894: CALL 4866 0 11
// enable ;
9898: ENABLE
// end ; end_of_file
9899: END
// every 0 0$1 do
9900: GO 9902
9902: DISABLE
// begin enable ;
9903: ENABLE
// TimeLapsersAI ( 3 ) ;
9904: LD_INT 3
9906: PPUSH
9907: CALL 3582 0 1
// IntBazooka ( 3 ) ;
9911: LD_INT 3
9913: PPUSH
9914: CALL 3254 0 1
// end ; end_of_file
9918: END
// every 0 0$1 trigger FilterUnitsExceptArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_engine , 3 ] , [ f_not , [ f_empty ] ] ] ) = allUnitsLengh and EscapeAvalaible = 1 do var i , cargoType , yourVehicles ;
9919: LD_INT 11
9921: PPUSH
9922: LD_INT 22
9924: PUSH
9925: LD_INT 1
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 21
9934: PUSH
9935: LD_INT 1
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PPUSH
9946: CALL_OW 71
9950: PUSH
9951: LD_INT 0
9953: EQUAL
9954: PUSH
9955: LD_INT 11
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 21
9970: PUSH
9971: LD_INT 2
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 33
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 32
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 3
10000: PUSH
10001: LD_INT 58
10003: PUSH
10004: EMPTY
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 70
10022: PUSH
10023: LD_EXP 31
10027: EQUAL
10028: AND
10029: PUSH
10030: LD_EXP 27
10034: PUSH
10035: LD_INT 1
10037: EQUAL
10038: AND
10039: IFFALSE 11153
10041: GO 10043
10043: DISABLE
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
10048: PPUSH
// begin yourVehicles = [ ] ;
10049: LD_ADDR_VAR 0 3
10053: PUSH
10054: EMPTY
10055: ST_TO_ADDR
// if FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10056: LD_INT 11
10058: PPUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 33
10071: PUSH
10072: LD_INT 1
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 3
10081: PUSH
10082: LD_INT 58
10084: PUSH
10085: EMPTY
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 70
10101: PUSH
10102: LD_INT 0
10104: GREATER
10105: IFFALSE 10373
// begin for i in FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
10107: LD_ADDR_VAR 0 1
10111: PUSH
10112: LD_INT 11
10114: PPUSH
10115: LD_INT 21
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 33
10127: PUSH
10128: LD_INT 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 3
10137: PUSH
10138: LD_INT 58
10140: PUSH
10141: EMPTY
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 70
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10359
// begin cargoType = GetCargoType ( i ) ;
10161: LD_ADDR_VAR 0 2
10165: PUSH
10166: LD_VAR 0 1
10170: PPUSH
10171: CALL_OW 288
10175: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
10176: LD_VAR 0 1
10180: PPUSH
10181: CALL_OW 264
10185: PUSH
10186: LD_INT 12
10188: EQUAL
10189: IFFALSE 10286
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
10191: LD_ADDR_VAR 0 3
10195: PUSH
10196: LD_VAR 0 3
10200: PUSH
10201: LD_VAR 0 1
10205: PPUSH
10206: CALL_OW 248
10210: PUSH
10211: LD_VAR 0 1
10215: PPUSH
10216: CALL_OW 265
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 262
10230: PUSH
10231: LD_VAR 0 1
10235: PPUSH
10236: CALL_OW 263
10240: PUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 264
10250: PUSH
10251: LD_VAR 0 2
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: LD_VAR 0 2
10265: PPUSH
10266: CALL_OW 289
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: ADD
10283: ST_TO_ADDR
// end else
10284: GO 10357
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
10286: LD_ADDR_VAR 0 3
10290: PUSH
10291: LD_VAR 0 3
10295: PUSH
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL_OW 248
10305: PUSH
10306: LD_VAR 0 1
10310: PPUSH
10311: CALL_OW 265
10315: PUSH
10316: LD_VAR 0 1
10320: PPUSH
10321: CALL_OW 262
10325: PUSH
10326: LD_VAR 0 1
10330: PPUSH
10331: CALL_OW 263
10335: PUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: CALL_OW 264
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: ADD
10356: ST_TO_ADDR
// end ; end ;
10357: GO 10158
10359: POP
10360: POP
// SaveVariable ( yourVehicles , 15_Vehicles_1 ) ;
10361: LD_VAR 0 3
10365: PPUSH
10366: LD_STRING 15_Vehicles_1
10368: PPUSH
10369: CALL_OW 39
// end ; SaveCargos ;
10373: CALL 11156 0 0
// if siberiteRocketStatus = 1 then
10377: LD_EXP 33
10381: PUSH
10382: LD_INT 1
10384: EQUAL
10385: IFFALSE 10399
// AddMedal ( med1 , 1 ) else
10387: LD_STRING med1
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 101
10397: GO 10410
// AddMedal ( med1 , - 1 ) ;
10399: LD_STRING med1
10401: PPUSH
10402: LD_INT 1
10404: NEG
10405: PPUSH
10406: CALL_OW 101
// if unitLost > 3 and unitLost < 5 then
10410: LD_EXP 30
10414: PUSH
10415: LD_INT 3
10417: GREATER
10418: PUSH
10419: LD_EXP 30
10423: PUSH
10424: LD_INT 5
10426: LESS
10427: AND
10428: IFFALSE 10442
// begin AddMedal ( med2 , 2 ) end else
10430: LD_STRING med2
10432: PPUSH
10433: LD_INT 2
10435: PPUSH
10436: CALL_OW 101
10440: GO 10475
// begin if unitLost > 5 then
10442: LD_EXP 30
10446: PUSH
10447: LD_INT 5
10449: GREATER
10450: IFFALSE 10465
// AddMedal ( med2 , - 1 ) else
10452: LD_STRING med2
10454: PPUSH
10455: LD_INT 1
10457: NEG
10458: PPUSH
10459: CALL_OW 101
10463: GO 10475
// AddMedal ( med2 , 1 ) ;
10465: LD_STRING med2
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 101
// end ; if amSciStatus = 1 then
10475: LD_EXP 25
10479: PUSH
10480: LD_INT 1
10482: EQUAL
10483: IFFALSE 10497
// AddMedal ( med3 , 1 ) else
10485: LD_STRING med3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 101
10495: GO 10508
// AddMedal ( med3 , - 1 ) ;
10497: LD_STRING med3
10499: PPUSH
10500: LD_INT 1
10502: NEG
10503: PPUSH
10504: CALL_OW 101
// GiveMedals ( MAIN ) ;
10508: LD_STRING MAIN
10510: PPUSH
10511: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10515: LD_INT 50
10517: PUSH
10518: EMPTY
10519: LIST
10520: PUSH
10521: LD_INT 22
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 2
10543: PUSH
10544: LD_INT 25
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 25
10566: PUSH
10567: LD_INT 3
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 25
10576: PUSH
10577: LD_INT 4
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 5
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 8
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: PPUSH
10624: CALL_OW 43
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10628: LD_EXP 11
10632: PPUSH
10633: LD_EXP 32
10637: PUSH
10638: LD_STRING Brown
10640: STR
10641: PPUSH
10642: CALL 2586 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10646: LD_EXP 7
10650: PPUSH
10651: LD_EXP 32
10655: PUSH
10656: LD_STRING Donaldson
10658: STR
10659: PPUSH
10660: CALL 2586 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10664: LD_EXP 8
10668: PPUSH
10669: LD_EXP 32
10673: PUSH
10674: LD_STRING Bobby
10676: STR
10677: PPUSH
10678: CALL 2586 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10682: LD_EXP 9
10686: PPUSH
10687: LD_EXP 32
10691: PUSH
10692: LD_STRING Cyrus
10694: STR
10695: PPUSH
10696: CALL 2586 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10700: LD_EXP 6
10704: PPUSH
10705: LD_EXP 32
10709: PUSH
10710: LD_STRING Lisa
10712: STR
10713: PPUSH
10714: CALL 2586 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10718: LD_EXP 16
10722: PPUSH
10723: LD_EXP 32
10727: PUSH
10728: LD_STRING Frank
10730: STR
10731: PPUSH
10732: CALL 2586 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10736: LD_EXP 17
10740: PPUSH
10741: LD_EXP 32
10745: PUSH
10746: LD_STRING Kikuchi
10748: STR
10749: PPUSH
10750: CALL 2586 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10754: LD_EXP 13
10758: PPUSH
10759: LD_EXP 32
10763: PUSH
10764: LD_STRING Houten
10766: STR
10767: PPUSH
10768: CALL 2586 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10772: LD_EXP 15
10776: PPUSH
10777: LD_EXP 32
10781: PUSH
10782: LD_STRING Gary
10784: STR
10785: PPUSH
10786: CALL 2586 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
10790: LD_EXP 14
10794: PPUSH
10795: LD_EXP 32
10799: PUSH
10800: LD_STRING Cornell
10802: STR
10803: PPUSH
10804: CALL 2586 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10808: LD_EXP 10
10812: PPUSH
10813: LD_EXP 32
10817: PUSH
10818: LD_STRING Denis
10820: STR
10821: PPUSH
10822: CALL 2586 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10826: LD_EXP 12
10830: PPUSH
10831: LD_EXP 32
10835: PUSH
10836: LD_STRING Gladstone
10838: STR
10839: PPUSH
10840: CALL 2586 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10844: LD_EXP 1
10848: PPUSH
10849: LD_EXP 32
10853: PUSH
10854: LD_STRING Stevens
10856: STR
10857: PPUSH
10858: CALL 2586 0 2
// EnchancedSaveCharacters ( Baker , mission_prefix & Baker ) ;
10862: LD_EXP 2
10866: PPUSH
10867: LD_EXP 32
10871: PUSH
10872: LD_STRING Baker
10874: STR
10875: PPUSH
10876: CALL 2586 0 2
// EnchancedSaveCharacters ( Gordon , mission_prefix & Gordon ) ;
10880: LD_EXP 3
10884: PPUSH
10885: LD_EXP 32
10889: PUSH
10890: LD_STRING Gordon
10892: STR
10893: PPUSH
10894: CALL 2586 0 2
// EnchancedSaveCharacters ( Peter , mission_prefix & Peter ) ;
10898: LD_EXP 4
10902: PPUSH
10903: LD_EXP 32
10907: PUSH
10908: LD_STRING Peter
10910: STR
10911: PPUSH
10912: CALL 2586 0 2
// EnchancedSaveCharacters ( Connie , mission_prefix & Connie ) ;
10916: LD_EXP 18
10920: PPUSH
10921: LD_EXP 32
10925: PUSH
10926: LD_STRING Connie
10928: STR
10929: PPUSH
10930: CALL 2586 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornell , Stevens , Baker , Gordon , Peter ] , 15_other_survivors ) ;
10934: LD_INT 50
10936: PUSH
10937: EMPTY
10938: LIST
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 21
10952: PUSH
10953: LD_INT 1
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 25
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 25
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 25
10995: PUSH
10996: LD_INT 4
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 25
11015: PUSH
11016: LD_INT 8
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: PUSH
11043: LD_EXP 11
11047: PUSH
11048: LD_EXP 7
11052: PUSH
11053: LD_EXP 8
11057: PUSH
11058: LD_EXP 9
11062: PUSH
11063: LD_EXP 6
11067: PUSH
11068: LD_EXP 16
11072: PUSH
11073: LD_EXP 12
11077: PUSH
11078: LD_EXP 17
11082: PUSH
11083: LD_EXP 10
11087: PUSH
11088: LD_EXP 13
11092: PUSH
11093: LD_EXP 15
11097: PUSH
11098: LD_EXP 14
11102: PUSH
11103: LD_EXP 1
11107: PUSH
11108: LD_EXP 2
11112: PUSH
11113: LD_EXP 3
11117: PUSH
11118: LD_EXP 4
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: DIFF
11141: PPUSH
11142: LD_STRING 15_other_survivors
11144: PPUSH
11145: CALL_OW 38
// YouWin ;
11149: CALL_OW 103
// end ;
11153: PPOPN 3
11155: END
// export function SaveCargos ; var i , resources ; begin
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
// resources = [ ] ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: EMPTY
11167: ST_TO_ADDR
// for i in FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
11168: LD_ADDR_VAR 0 2
11172: PUSH
11173: LD_INT 11
11175: PPUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 33
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 34
11198: PUSH
11199: LD_INT 12
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 70
11215: PUSH
11216: FOR_IN
11217: IFFALSE 11245
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
11219: LD_ADDR_VAR 0 3
11223: PUSH
11224: LD_VAR 0 3
11228: PUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: CALL 11264 0 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: ADD
11242: ST_TO_ADDR
11243: GO 11216
11245: POP
11246: POP
// SaveVariable ( resources , 15_ResourcesInCargo_1 ) ;
11247: LD_VAR 0 3
11251: PPUSH
11252: LD_STRING 15_ResourcesInCargo_1
11254: PPUSH
11255: CALL_OW 39
// end ;
11259: LD_VAR 0 1
11263: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 289
11285: PUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 2
11293: PPUSH
11294: CALL_OW 289
11298: PUSH
11299: LD_VAR 0 1
11303: PPUSH
11304: LD_INT 3
11306: PPUSH
11307: CALL_OW 289
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: ST_TO_ADDR
// end ; end_of_file
11317: LD_VAR 0 2
11321: RET
// every 2 2$30 do
11322: GO 11324
11324: DISABLE
// begin enable ;
11325: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11326: LD_INT 3
11328: PPUSH
11329: LD_INT 5
11331: PPUSH
11332: CALL_OW 12
11336: PPUSH
11337: LD_INT 12
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 55
// end ;
11347: END
