// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 58 0 0
// InitMacro ;
   8: CALL 31422 0 0
// InitNature ;
  12: CALL 31246 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareAlliance ;
  29: CALL 9236 0 0
// PrepareRussian ;
  33: CALL 5622 0 0
// PrepareLegion ;
  37: CALL 3688 0 0
// PreparePowell ;
  41: CALL 2442 0 0
// PrepareAmerican ;
  45: CALL 1272 0 0
// Action ;
  49: CALL 12974 0 0
// MC_Start ( ) ;
  53: CALL 32569 0 0
// end ;
  57: END
// export debug ; export KappaStatus , KurtStatus , JMMVeh , JMMGirlVeh , JMMGirlStatus , JMMGirl , KhatamStatus , BurlakStatus , StevensStatus , FastEnd , FakeInfo ; export missionStart , missionTime , missionStage , activeAttacks , powellAnger , powellSquadAttack , powellAllowRetreat , powellCenterCameraMode , russianDestroyed , legionDestroyed , allianceDestroyed , vsevolodFirstAttack , allowBehemothConstruct , behemothUnderConstruct , behemothDestroyedBeforeFinish , behemothDone , seeBehemoth , platonovHasBomb , allianceActive , lostCounter , rothCaptured , capturedUnit , trueAmericans ; export function InitVariables ; begin
  58: LD_INT 0
  60: PPUSH
// debug := 0 ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// missionStart := false ;
  69: LD_ADDR_EXP 13
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// missionTime := 0 0$00 ;
  77: LD_ADDR_EXP 14
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// missionStage := 1 ;
  85: LD_ADDR_EXP 15
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// activeAttacks := false ;
  93: LD_ADDR_EXP 16
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// powellAnger := 0 ;
 101: LD_ADDR_EXP 17
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// powellAllowRetreat := true ;
 109: LD_ADDR_EXP 19
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// powellCenterCameraMode := false ;
 117: LD_ADDR_EXP 20
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// powellSquadAttack := [ [ ] , [ ] ] ;
 125: LD_ADDR_EXP 18
 129: PUSH
 130: EMPTY
 131: PUSH
 132: EMPTY
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: ST_TO_ADDR
// russianDestroyed := false ;
 138: LD_ADDR_EXP 21
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// legionDestroyed := false ;
 146: LD_ADDR_EXP 22
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// allianceDestroyed := false ;
 154: LD_ADDR_EXP 23
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// KappaStatus := LoadVariable ( 14_KappaStatus_1 , 0 ) ;
 162: LD_ADDR_EXP 2
 166: PUSH
 167: LD_STRING 14_KappaStatus_1
 169: PPUSH
 170: LD_INT 0
 172: PPUSH
 173: CALL_OW 30
 177: ST_TO_ADDR
// KurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 178: LD_ADDR_EXP 3
 182: PUSH
 183: LD_STRING 06_KurtStatus_1
 185: PPUSH
 186: LD_INT 0
 188: PPUSH
 189: CALL_OW 30
 193: ST_TO_ADDR
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , 0 ) ;
 194: LD_ADDR_EXP 4
 198: PUSH
 199: LD_STRING 14_JMMVeh_1
 201: PPUSH
 202: LD_INT 0
 204: PPUSH
 205: CALL_OW 30
 209: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , 0 ) ;
 210: LD_ADDR_EXP 5
 214: PUSH
 215: LD_STRING 14_JMMGirlVeh_1
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
 226: LD_ADDR_EXP 7
 230: PUSH
 231: LD_STRING 14_JMMGirl_1
 233: PPUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 30
 241: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
 242: LD_ADDR_EXP 6
 246: PUSH
 247: LD_STRING 14_JMMGirlStatus_1
 249: PPUSH
 250: LD_INT 0
 252: PPUSH
 253: CALL_OW 30
 257: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
 258: LD_ADDR_EXP 8
 262: PUSH
 263: LD_STRING 10_KhatamStatus_1
 265: PPUSH
 266: LD_INT 0
 268: PPUSH
 269: CALL_OW 30
 273: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 274: LD_ADDR_EXP 9
 278: PUSH
 279: LD_STRING 13_BurlakStatus_1
 281: PPUSH
 282: LD_INT 0
 284: PPUSH
 285: CALL_OW 30
 289: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 290: LD_ADDR_EXP 10
 294: PUSH
 295: LD_STRING 13_StevensStatus_1
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 30
 305: ST_TO_ADDR
// FastEnd := LoadVariable ( 14_FastEnd_1 , 0 ) ;
 306: LD_ADDR_EXP 11
 310: PUSH
 311: LD_STRING 14_FastEnd_1
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 30
 321: ST_TO_ADDR
// FakeInfo := LoadVariable ( 12_MainDepositFake_1 , 0 ) ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: LD_STRING 12_MainDepositFake_1
 329: PPUSH
 330: LD_INT 0
 332: PPUSH
 333: CALL_OW 30
 337: ST_TO_ADDR
// vsevolodFirstAttack := true ;
 338: LD_ADDR_EXP 24
 342: PUSH
 343: LD_INT 1
 345: ST_TO_ADDR
// behemothUnderConstruct := false ;
 346: LD_ADDR_EXP 26
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// behemothDestroyedBeforeFinish := false ;
 354: LD_ADDR_EXP 27
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// behemothDone := false ;
 362: LD_ADDR_EXP 28
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// allowBehemothConstruct := false ;
 370: LD_ADDR_EXP 25
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// seeBehemoth := false ;
 378: LD_ADDR_EXP 29
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// platonovHasBomb := false ;
 386: LD_ADDR_EXP 30
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// allianceActive := false ;
 394: LD_ADDR_EXP 31
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// rothCaptured := false ;
 402: LD_ADDR_EXP 33
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// lostCounter := 0 ;
 410: LD_ADDR_EXP 32
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// capturedUnit := [ ] ;
 418: LD_ADDR_EXP 34
 422: PUSH
 423: EMPTY
 424: ST_TO_ADDR
// trueAmericans := [ ] ;
 425: LD_ADDR_EXP 35
 429: PUSH
 430: EMPTY
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 1
 436: RET
// export function CustomInitMacro ( ) ; begin
 437: LD_INT 0
 439: PPUSH
// mc_parking := [ allianceParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 440: LD_ADDR_EXP 123
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 3
 450: PUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 10
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// mc_scan_area := [ allianceBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 463: LD_ADDR_EXP 124
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 5
 476: PUSH
 477: LD_INT 9
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_computer ] ) ;
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 10
 491: PUSH
 492: LD_INT 11
 494: PUSH
 495: LD_INT 12
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL 54102 0 2
// MC_SetCratesArea ( 1 , [ allianceCratesArea ] ) ;
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 17
 512: PUSH
 513: EMPTY
 514: LIST
 515: PPUSH
 516: CALL 54195 0 2
// MC_SetTame ( 1 , allianceCratesArea ) ;
 520: LD_INT 1
 522: PPUSH
 523: LD_INT 17
 525: PPUSH
 526: CALL 53926 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 530: LD_INT 2
 532: PPUSH
 533: LD_INT 10
 535: PUSH
 536: LD_INT 11
 538: PUSH
 539: LD_INT 12
 541: PUSH
 542: LD_INT 14
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL 54102 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 555: LD_INT 2
 557: PPUSH
 558: LD_INT 16
 560: PUSH
 561: EMPTY
 562: LIST
 563: PPUSH
 564: CALL 54195 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ] ) ;
 568: LD_INT 2
 570: PPUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 3
 576: PUSH
 577: LD_INT 3
 579: PUSH
 580: LD_INT 51
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: PPUSH
 592: CALL 53365 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 596: LD_INT 2
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL 53975 0 2
// MC_SetMinesField ( 2 , [ 7 , 8 , 9 ] [ Difficulty ] , legionMinefield ) ;
 606: LD_INT 2
 608: PPUSH
 609: LD_INT 7
 611: PUSH
 612: LD_INT 8
 614: PUSH
 615: LD_INT 9
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: PUSH
 623: LD_OWVAR 67
 627: ARRAY
 628: PPUSH
 629: LD_INT 27
 631: PPUSH
 632: CALL 53047 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 636: LD_INT 3
 638: PPUSH
 639: LD_INT 10
 641: PUSH
 642: LD_INT 11
 644: PUSH
 645: LD_INT 13
 647: PUSH
 648: LD_INT 15
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PPUSH
 657: CALL 54102 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 661: LD_INT 3
 663: PPUSH
 664: LD_INT 15
 666: PUSH
 667: EMPTY
 668: LIST
 669: PPUSH
 670: CALL 54195 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 674: LD_ADDR_EXP 128
 678: PUSH
 679: LD_EXP 128
 683: PPUSH
 684: LD_INT 3
 686: PPUSH
 687: LD_INT 22
 689: PUSH
 690: LD_INT 8
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 25
 699: PUSH
 700: LD_INT 15
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PPUSH
 711: CALL_OW 69
 715: PPUSH
 716: CALL_OW 1
 720: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
 721: LD_INT 3
 723: PPUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 31
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: LD_INT 13
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 31
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 13
 762: PUSH
 763: LD_INT 3
 765: PUSH
 766: LD_INT 2
 768: PUSH
 769: LD_INT 32
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL 53365 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer ] ) ;
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 10
 792: PUSH
 793: LD_INT 12
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PPUSH
 800: CALL 54102 0 2
// MC_SetCratesArea ( 4 , [ powellBase ] ) ;
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 9
 809: PUSH
 810: EMPTY
 811: LIST
 812: PPUSH
 813: CALL 54195 0 2
// MC_SetBuildingList ( 4 , [ [ b_oil_power , 74 , 107 , 0 ] , [ b_bunker , 77 , 101 , 4 ] , [ b_bunker , 69 , 86 , 4 ] , [ b_solar_power , 77 , 110 , 3 ] , [ b_solar_power , 42 , 79 , 5 ] , [ b_oil_mine , 86 , 105 , 2 ] , [ b_siberite_mine , 40 , 75 , 1 ] , [ b_bunker , 80 , 106 , 4 ] , [ b_bunker , 75 , 114 , 5 ] , [ b_bunker , 82 , 110 , 5 ] , [ b_bunker , 62 , 78 , 4 ] , [ b_armoury , 39 , 61 , 3 ] ] ) ;
 817: LD_INT 4
 819: PPUSH
 820: LD_INT 26
 822: PUSH
 823: LD_INT 74
 825: PUSH
 826: LD_INT 107
 828: PUSH
 829: LD_INT 0
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 32
 840: PUSH
 841: LD_INT 77
 843: PUSH
 844: LD_INT 101
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 32
 858: PUSH
 859: LD_INT 69
 861: PUSH
 862: LD_INT 86
 864: PUSH
 865: LD_INT 4
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 27
 876: PUSH
 877: LD_INT 77
 879: PUSH
 880: LD_INT 110
 882: PUSH
 883: LD_INT 3
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 27
 894: PUSH
 895: LD_INT 42
 897: PUSH
 898: LD_INT 79
 900: PUSH
 901: LD_INT 5
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 29
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 105
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 30
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 75
 936: PUSH
 937: LD_INT 1
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 32
 948: PUSH
 949: LD_INT 80
 951: PUSH
 952: LD_INT 106
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 32
 966: PUSH
 967: LD_INT 75
 969: PUSH
 970: LD_INT 114
 972: PUSH
 973: LD_INT 5
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 32
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 110
 990: PUSH
 991: LD_INT 5
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 32
1002: PUSH
1003: LD_INT 62
1005: PUSH
1006: LD_INT 78
1008: PUSH
1009: LD_INT 4
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 4
1020: PUSH
1021: LD_INT 39
1023: PUSH
1024: LD_INT 61
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: PPUSH
1050: CALL 53257 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_laser ] ) ;
1054: LD_INT 4
1056: PPUSH
1057: LD_INT 5
1059: PUSH
1060: LD_INT 6
1062: PUSH
1063: LD_INT 7
1065: PUSH
1066: LD_INT 9
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL 54513 0 2
// MC_SetDepositsXY ( 4 , [ [ 40 , 75 , 1 ] , [ 86 , 105 , 0 ] ] ) ;
1079: LD_INT 4
1081: PPUSH
1082: LD_INT 40
1084: PUSH
1085: LD_INT 75
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 86
1098: PUSH
1099: LD_INT 105
1101: PUSH
1102: LD_INT 0
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: PPUSH
1114: CALL 53747 0 2
// MC_SetUpgradeBuilding ( 4 , b_workshop ) ;
1118: LD_INT 4
1120: PPUSH
1121: LD_INT 2
1123: PPUSH
1124: CALL 53975 0 2
// MC_SetUpgradeBuilding ( 4 , b_depot ) ;
1128: LD_INT 4
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 53975 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket ] ) ;
1138: LD_INT 4
1140: PPUSH
1141: LD_INT 54
1143: PPUSH
1144: LD_INT 85
1146: PPUSH
1147: LD_INT 2
1149: PPUSH
1150: LD_INT 19
1152: PUSH
1153: LD_INT 16
1155: PUSH
1156: LD_INT 17
1158: PUSH
1159: LD_INT 18
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PPUSH
1168: CALL 54307 0 5
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ) ;
1172: LD_INT 4
1174: PPUSH
1175: LD_INT 3
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 5
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 4
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 6
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 4
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 7
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: PPUSH
1253: CALL 53365 0 2
// MC_SetTame ( 4 , powellApe ) ;
1257: LD_INT 4
1259: PPUSH
1260: LD_INT 13
1262: PPUSH
1263: CALL 53926 0 2
// end ; end_of_file
1267: LD_VAR 0 1
1271: RET
// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ; export JMMNewVeh , GirlNewVeh ; export function PrepareAmerican ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side := 1 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 1
1282: ST_TO_ADDR
// uc_nation := 1 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14_ ) ;
1291: LD_ADDR_EXP 36
1295: PUSH
1296: LD_STRING JMM
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 14_
1307: PPUSH
1308: CALL 59308 0 3
1312: ST_TO_ADDR
// if not JMMVeh then
1313: LD_EXP 4
1317: NOT
1318: IFFALSE 1341
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) else
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 5
1331: PPUSH
1332: LD_INT 100
1334: PPUSH
1335: CALL 65941 0 5
1339: GO 1400
// PrepareVehicle ( JMMVeh [ 1 ] [ 1 ] , JMMVeh [ 2 ] [ 1 ] , JMMVeh [ 3 ] [ 1 ] , JMMVeh [ 4 ] [ 1 ] , 30 ) ;
1341: LD_EXP 4
1345: PUSH
1346: LD_INT 1
1348: ARRAY
1349: PUSH
1350: LD_INT 1
1352: ARRAY
1353: PPUSH
1354: LD_EXP 4
1358: PUSH
1359: LD_INT 2
1361: ARRAY
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_EXP 4
1371: PUSH
1372: LD_INT 3
1374: ARRAY
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PPUSH
1380: LD_EXP 4
1384: PUSH
1385: LD_INT 4
1387: ARRAY
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PPUSH
1393: LD_INT 30
1395: PPUSH
1396: CALL 65941 0 5
// JMMNewVeh := CreateVehicle ;
1400: LD_ADDR_EXP 53
1404: PUSH
1405: CALL_OW 45
1409: ST_TO_ADDR
// SetDir ( JMMNewVeh , 4 ) ;
1410: LD_EXP 53
1414: PPUSH
1415: LD_INT 4
1417: PPUSH
1418: CALL_OW 233
// PlaceUnitXY ( JMMNewVeh , 75 , 92 , false ) ;
1422: LD_EXP 53
1426: PPUSH
1427: LD_INT 75
1429: PPUSH
1430: LD_INT 92
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMNewVeh ) ;
1440: LD_EXP 36
1444: PPUSH
1445: LD_EXP 53
1449: PPUSH
1450: CALL_OW 52
// if JMMGirl and not KappaStatus then
1454: LD_EXP 7
1458: PUSH
1459: LD_EXP 2
1463: NOT
1464: AND
1465: IFFALSE 1723
// begin if not JMMGirlVeh then
1467: LD_EXP 5
1471: NOT
1472: IFFALSE 1495
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_laser , 100 ) else
1474: LD_INT 3
1476: PPUSH
1477: LD_INT 3
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: LD_INT 9
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL 65941 0 5
1493: GO 1554
// PrepareVehicle ( JMMGirlVeh [ 1 ] [ 1 ] , JMMGirlVeh [ 2 ] [ 1 ] , JMMGirlVeh [ 3 ] [ 1 ] , JMMGirlVeh [ 4 ] [ 1 ] , 30 ) ;
1495: LD_EXP 5
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_EXP 5
1512: PUSH
1513: LD_INT 2
1515: ARRAY
1516: PUSH
1517: LD_INT 1
1519: ARRAY
1520: PPUSH
1521: LD_EXP 5
1525: PUSH
1526: LD_INT 3
1528: ARRAY
1529: PUSH
1530: LD_INT 1
1532: ARRAY
1533: PPUSH
1534: LD_EXP 5
1538: PUSH
1539: LD_INT 4
1541: ARRAY
1542: PUSH
1543: LD_INT 1
1545: ARRAY
1546: PPUSH
1547: LD_INT 30
1549: PPUSH
1550: CALL 65941 0 5
// GirlNewVeh := CreateVehicle ;
1554: LD_ADDR_EXP 54
1558: PUSH
1559: CALL_OW 45
1563: ST_TO_ADDR
// SetDir ( GirlNewVeh , 4 ) ;
1564: LD_EXP 54
1568: PPUSH
1569: LD_INT 4
1571: PPUSH
1572: CALL_OW 233
// PlaceUnitXY ( GirlNewVeh , 82 , 96 , false ) ;
1576: LD_EXP 54
1580: PPUSH
1581: LD_INT 82
1583: PPUSH
1584: LD_INT 96
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 48
// if JMMGirl = 1 then
1594: LD_EXP 7
1598: PUSH
1599: LD_INT 1
1601: EQUAL
1602: IFFALSE 1637
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
1604: LD_ADDR_EXP 37
1608: PUSH
1609: LD_STRING Joan
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: LD_STRING 14_
1617: PPUSH
1618: CALL 59308 0 3
1622: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , GirlNewVeh ) ;
1623: LD_EXP 37
1627: PPUSH
1628: LD_EXP 54
1632: PPUSH
1633: CALL_OW 52
// end ; if JMMGirl = 2 then
1637: LD_EXP 7
1641: PUSH
1642: LD_INT 2
1644: EQUAL
1645: IFFALSE 1680
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
1647: LD_ADDR_EXP 39
1651: PUSH
1652: LD_STRING Lisa
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_STRING 14_
1660: PPUSH
1661: CALL 59308 0 3
1665: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , GirlNewVeh ) ;
1666: LD_EXP 39
1670: PPUSH
1671: LD_EXP 54
1675: PPUSH
1676: CALL_OW 52
// end ; if JMMGirl = 3 then
1680: LD_EXP 7
1684: PUSH
1685: LD_INT 3
1687: EQUAL
1688: IFFALSE 1723
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
1690: LD_ADDR_EXP 51
1694: PUSH
1695: LD_STRING Connie
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_STRING 14_
1703: PPUSH
1704: CALL 59308 0 3
1708: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , GirlNewVeh ) ;
1709: LD_EXP 51
1713: PPUSH
1714: LD_EXP 54
1718: PPUSH
1719: CALL_OW 52
// end ; end ; end ;
1723: LD_VAR 0 1
1727: RET
// export function PrepareStevensSquad ; var tmp ; begin
1728: LD_INT 0
1730: PPUSH
1731: PPUSH
// uc_side := 1 ;
1732: LD_ADDR_OWVAR 20
1736: PUSH
1737: LD_INT 1
1739: ST_TO_ADDR
// uc_nation := 1 ;
1740: LD_ADDR_OWVAR 21
1744: PUSH
1745: LD_INT 1
1747: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debug ) , 13f_ ) ;
1748: LD_ADDR_EXP 38
1752: PUSH
1753: LD_STRING Stevens
1755: PPUSH
1756: LD_EXP 1
1760: NOT
1761: PPUSH
1762: LD_STRING 13f_
1764: PPUSH
1765: CALL 59308 0 3
1769: ST_TO_ADDR
// if not Stevens then
1770: LD_EXP 38
1774: NOT
1775: IFFALSE 1831
// begin hc_name = Baker Smith ;
1777: LD_ADDR_OWVAR 26
1781: PUSH
1782: LD_STRING Baker Smith
1784: ST_TO_ADDR
// hc_gallery =  ;
1785: LD_ADDR_OWVAR 33
1789: PUSH
1790: LD_STRING 
1792: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 10
1798: PPUSH
1799: CALL_OW 384
// Baker = CreateHuman ;
1803: LD_ADDR_EXP 52
1807: PUSH
1808: CALL_OW 44
1812: ST_TO_ADDR
// tmp := tmp ^ Baker ;
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_VAR 0 2
1822: PUSH
1823: LD_EXP 52
1827: ADD
1828: ST_TO_ADDR
// end else
1829: GO 1847
// tmp := tmp ^ Stevens ;
1831: LD_ADDR_VAR 0 2
1835: PUSH
1836: LD_VAR 0 2
1840: PUSH
1841: LD_EXP 38
1845: ADD
1846: ST_TO_ADDR
// if not Lisa then
1847: LD_EXP 39
1851: NOT
1852: IFFALSE 1898
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13f_ ) ;
1854: LD_ADDR_EXP 39
1858: PUSH
1859: LD_STRING Lisa
1861: PPUSH
1862: LD_EXP 1
1866: NOT
1867: PPUSH
1868: LD_STRING 13f_
1870: PPUSH
1871: CALL 59308 0 3
1875: ST_TO_ADDR
// if Lisa then
1876: LD_EXP 39
1880: IFFALSE 1898
// tmp := tmp ^ Lisa ;
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: LD_VAR 0 2
1891: PUSH
1892: LD_EXP 39
1896: ADD
1897: ST_TO_ADDR
// end ; if not Donaldson then
1898: LD_EXP 40
1902: NOT
1903: IFFALSE 1949
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13f_ ) ;
1905: LD_ADDR_EXP 40
1909: PUSH
1910: LD_STRING Donaldson
1912: PPUSH
1913: LD_EXP 1
1917: NOT
1918: PPUSH
1919: LD_STRING 13f_
1921: PPUSH
1922: CALL 59308 0 3
1926: ST_TO_ADDR
// if Donaldson then
1927: LD_EXP 40
1931: IFFALSE 1949
// tmp := tmp ^ Donaldson ;
1933: LD_ADDR_VAR 0 2
1937: PUSH
1938: LD_VAR 0 2
1942: PUSH
1943: LD_EXP 40
1947: ADD
1948: ST_TO_ADDR
// end ; if not Bobby then
1949: LD_EXP 41
1953: NOT
1954: IFFALSE 2000
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13f_ ) ;
1956: LD_ADDR_EXP 41
1960: PUSH
1961: LD_STRING Bobby
1963: PPUSH
1964: LD_EXP 1
1968: NOT
1969: PPUSH
1970: LD_STRING 13f_
1972: PPUSH
1973: CALL 59308 0 3
1977: ST_TO_ADDR
// if Bobby then
1978: LD_EXP 41
1982: IFFALSE 2000
// tmp := tmp ^ Bobby ;
1984: LD_ADDR_VAR 0 2
1988: PUSH
1989: LD_VAR 0 2
1993: PUSH
1994: LD_EXP 41
1998: ADD
1999: ST_TO_ADDR
// end ; if not Cyrus then
2000: LD_EXP 42
2004: NOT
2005: IFFALSE 2051
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13f_ ) ;
2007: LD_ADDR_EXP 42
2011: PUSH
2012: LD_STRING Cyrus
2014: PPUSH
2015: LD_EXP 1
2019: NOT
2020: PPUSH
2021: LD_STRING 13f_
2023: PPUSH
2024: CALL 59308 0 3
2028: ST_TO_ADDR
// if Cyrus then
2029: LD_EXP 42
2033: IFFALSE 2051
// tmp := tmp ^ Cyrus ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: LD_VAR 0 2
2044: PUSH
2045: LD_EXP 42
2049: ADD
2050: ST_TO_ADDR
// end ; if not Brown then
2051: LD_EXP 44
2055: NOT
2056: IFFALSE 2102
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13f_ ) ;
2058: LD_ADDR_EXP 44
2062: PUSH
2063: LD_STRING Brown
2065: PPUSH
2066: LD_EXP 1
2070: NOT
2071: PPUSH
2072: LD_STRING 13f_
2074: PPUSH
2075: CALL 59308 0 3
2079: ST_TO_ADDR
// if Brown then
2080: LD_EXP 44
2084: IFFALSE 2102
// tmp := tmp ^ Brown ;
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_VAR 0 2
2095: PUSH
2096: LD_EXP 44
2100: ADD
2101: ST_TO_ADDR
// end ; if not Gladstone then
2102: LD_EXP 45
2106: NOT
2107: IFFALSE 2153
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13f_ ) ;
2109: LD_ADDR_EXP 45
2113: PUSH
2114: LD_STRING Gladstone
2116: PPUSH
2117: LD_EXP 1
2121: NOT
2122: PPUSH
2123: LD_STRING 13f_
2125: PPUSH
2126: CALL 59308 0 3
2130: ST_TO_ADDR
// if Gladstone then
2131: LD_EXP 45
2135: IFFALSE 2153
// tmp := tmp ^ Gladstone ;
2137: LD_ADDR_VAR 0 2
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_EXP 45
2151: ADD
2152: ST_TO_ADDR
// end ; if not Houten then
2153: LD_EXP 46
2157: NOT
2158: IFFALSE 2204
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13f_ ) ;
2160: LD_ADDR_EXP 46
2164: PUSH
2165: LD_STRING Houten
2167: PPUSH
2168: LD_EXP 1
2172: NOT
2173: PPUSH
2174: LD_STRING 13f_
2176: PPUSH
2177: CALL 59308 0 3
2181: ST_TO_ADDR
// if Houten then
2182: LD_EXP 46
2186: IFFALSE 2204
// tmp := tmp ^ Houten ;
2188: LD_ADDR_VAR 0 2
2192: PUSH
2193: LD_VAR 0 2
2197: PUSH
2198: LD_EXP 46
2202: ADD
2203: ST_TO_ADDR
// end ; if not Cornel then
2204: LD_EXP 47
2208: NOT
2209: IFFALSE 2255
// begin Cornel := PrepareUnit ( Cornel , ( not debug ) , 13f_ ) ;
2211: LD_ADDR_EXP 47
2215: PUSH
2216: LD_STRING Cornel
2218: PPUSH
2219: LD_EXP 1
2223: NOT
2224: PPUSH
2225: LD_STRING 13f_
2227: PPUSH
2228: CALL 59308 0 3
2232: ST_TO_ADDR
// if Cornel then
2233: LD_EXP 47
2237: IFFALSE 2255
// tmp := tmp ^ Cornel ;
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: LD_VAR 0 2
2248: PUSH
2249: LD_EXP 47
2253: ADD
2254: ST_TO_ADDR
// end ; if not Gary then
2255: LD_EXP 48
2259: NOT
2260: IFFALSE 2306
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13f_ ) ;
2262: LD_ADDR_EXP 48
2266: PUSH
2267: LD_STRING Gary
2269: PPUSH
2270: LD_EXP 1
2274: NOT
2275: PPUSH
2276: LD_STRING 13f_
2278: PPUSH
2279: CALL 59308 0 3
2283: ST_TO_ADDR
// if Gary then
2284: LD_EXP 48
2288: IFFALSE 2306
// tmp := tmp ^ Gary ;
2290: LD_ADDR_VAR 0 2
2294: PUSH
2295: LD_VAR 0 2
2299: PUSH
2300: LD_EXP 48
2304: ADD
2305: ST_TO_ADDR
// end ; if not Frank then
2306: LD_EXP 49
2310: NOT
2311: IFFALSE 2357
// begin Frank := PrepareUnit ( Frank , ( not debug ) , 13f_ ) ;
2313: LD_ADDR_EXP 49
2317: PUSH
2318: LD_STRING Frank
2320: PPUSH
2321: LD_EXP 1
2325: NOT
2326: PPUSH
2327: LD_STRING 13f_
2329: PPUSH
2330: CALL 59308 0 3
2334: ST_TO_ADDR
// if Frank then
2335: LD_EXP 49
2339: IFFALSE 2357
// tmp := tmp ^ Frank ;
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: LD_VAR 0 2
2350: PUSH
2351: LD_EXP 49
2355: ADD
2356: ST_TO_ADDR
// end ; if not Kikuchi then
2357: LD_EXP 50
2361: NOT
2362: IFFALSE 2408
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13f_ ) ;
2364: LD_ADDR_EXP 50
2368: PUSH
2369: LD_STRING Kikuchi
2371: PPUSH
2372: LD_EXP 1
2376: NOT
2377: PPUSH
2378: LD_STRING 13f_
2380: PPUSH
2381: CALL 59308 0 3
2385: ST_TO_ADDR
// if Kikuchi then
2386: LD_EXP 50
2390: IFFALSE 2408
// tmp := tmp ^ Kikuchi ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_VAR 0 2
2401: PUSH
2402: LD_EXP 50
2406: ADD
2407: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13_other_survivors ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_STRING 13_other_survivors
2420: PPUSH
2421: CALL_OW 31
2425: UNION
2426: ST_TO_ADDR
// result := tmp ;
2427: LD_ADDR_VAR 0 1
2431: PUSH
2432: LD_VAR 0 2
2436: ST_TO_ADDR
// end ; end_of_file
2437: LD_VAR 0 1
2441: RET
// export Powell ; export vip ; export function PreparePowell ; var i , b , veh , cl , tmp , depot , lab , armoury , workshop ; begin
2442: LD_INT 0
2444: PPUSH
2445: PPUSH
2446: PPUSH
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
2451: PPUSH
2452: PPUSH
2453: PPUSH
// uc_side := 4 ;
2454: LD_ADDR_OWVAR 20
2458: PUSH
2459: LD_INT 4
2461: ST_TO_ADDR
// uc_nation := 1 ;
2462: LD_ADDR_OWVAR 21
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// SetResourceType ( GetBase ( am_depot ) , mat_cans , 2500 ) ;
2470: LD_INT 387
2472: PPUSH
2473: CALL_OW 274
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 2500
2483: PPUSH
2484: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 400 ) ;
2488: LD_INT 387
2490: PPUSH
2491: CALL_OW 274
2495: PPUSH
2496: LD_INT 2
2498: PPUSH
2499: LD_INT 400
2501: PPUSH
2502: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 10 ) ;
2506: LD_INT 387
2508: PPUSH
2509: CALL_OW 274
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: LD_INT 10
2519: PPUSH
2520: CALL_OW 277
// Powell := NewCharacter ( Powell ) ;
2524: LD_ADDR_EXP 55
2528: PUSH
2529: LD_STRING Powell
2531: PPUSH
2532: CALL_OW 25
2536: ST_TO_ADDR
// PlaceUnitXY ( Powell , 57 , 94 , false ) ;
2537: LD_EXP 55
2541: PPUSH
2542: LD_INT 57
2544: PPUSH
2545: LD_INT 94
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 48
// ComTurnXY ( Powell , 58 , 94 ) ;
2555: LD_EXP 55
2559: PPUSH
2560: LD_INT 58
2562: PPUSH
2563: LD_INT 94
2565: PPUSH
2566: CALL_OW 118
// vip := [ ] ;
2570: LD_ADDR_EXP 56
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// tmp := [ ] ;
2577: LD_ADDR_VAR 0 6
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// if JMMGirl <> 2 then
2584: LD_EXP 7
2588: PUSH
2589: LD_INT 2
2591: NONEQUAL
2592: IFFALSE 2616
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
2594: LD_ADDR_EXP 39
2598: PUSH
2599: LD_STRING Lisa
2601: PPUSH
2602: LD_EXP 1
2606: NOT
2607: PPUSH
2608: LD_STRING 13s_
2610: PPUSH
2611: CALL 59308 0 3
2615: ST_TO_ADDR
// if Lisa then
2616: LD_EXP 39
2620: IFFALSE 2638
// tmp := tmp ^ Lisa ;
2622: LD_ADDR_VAR 0 6
2626: PUSH
2627: LD_VAR 0 6
2631: PUSH
2632: LD_EXP 39
2636: ADD
2637: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13s_ ) ;
2638: LD_ADDR_EXP 40
2642: PUSH
2643: LD_STRING Donaldson
2645: PPUSH
2646: LD_EXP 1
2650: NOT
2651: PPUSH
2652: LD_STRING 13s_
2654: PPUSH
2655: CALL 59308 0 3
2659: ST_TO_ADDR
// if Donaldson then
2660: LD_EXP 40
2664: IFFALSE 2682
// tmp := tmp ^ Donaldson ;
2666: LD_ADDR_VAR 0 6
2670: PUSH
2671: LD_VAR 0 6
2675: PUSH
2676: LD_EXP 40
2680: ADD
2681: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 13s_ ) ;
2682: LD_ADDR_EXP 41
2686: PUSH
2687: LD_STRING Bobby
2689: PPUSH
2690: LD_EXP 1
2694: NOT
2695: PPUSH
2696: LD_STRING 13s_
2698: PPUSH
2699: CALL 59308 0 3
2703: ST_TO_ADDR
// if Bobby then
2704: LD_EXP 41
2708: IFFALSE 2726
// tmp := tmp ^ Bobby ;
2710: LD_ADDR_VAR 0 6
2714: PUSH
2715: LD_VAR 0 6
2719: PUSH
2720: LD_EXP 41
2724: ADD
2725: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13s_ ) ;
2726: LD_ADDR_EXP 42
2730: PUSH
2731: LD_STRING Cyrus
2733: PPUSH
2734: LD_EXP 1
2738: NOT
2739: PPUSH
2740: LD_STRING 13s_
2742: PPUSH
2743: CALL 59308 0 3
2747: ST_TO_ADDR
// if Cyrus then
2748: LD_EXP 42
2752: IFFALSE 2770
// tmp := tmp ^ Cyrus ;
2754: LD_ADDR_VAR 0 6
2758: PUSH
2759: LD_VAR 0 6
2763: PUSH
2764: LD_EXP 42
2768: ADD
2769: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13s_ ) ;
2770: LD_ADDR_EXP 43
2774: PUSH
2775: LD_STRING Denis
2777: PPUSH
2778: LD_EXP 1
2782: NOT
2783: PPUSH
2784: LD_STRING 13s_
2786: PPUSH
2787: CALL 59308 0 3
2791: ST_TO_ADDR
// if not Denis then
2792: LD_EXP 43
2796: NOT
2797: IFFALSE 2821
// Denis := PrepareUnit ( Denis , ( not debug ) , 13f_ ) ;
2799: LD_ADDR_EXP 43
2803: PUSH
2804: LD_STRING Denis
2806: PPUSH
2807: LD_EXP 1
2811: NOT
2812: PPUSH
2813: LD_STRING 13f_
2815: PPUSH
2816: CALL 59308 0 3
2820: ST_TO_ADDR
// if Denis then
2821: LD_EXP 43
2825: IFFALSE 2843
// tmp := tmp ^ Denis ;
2827: LD_ADDR_VAR 0 6
2831: PUSH
2832: LD_VAR 0 6
2836: PUSH
2837: LD_EXP 43
2841: ADD
2842: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 13s_ ) ;
2843: LD_ADDR_EXP 44
2847: PUSH
2848: LD_STRING Brown
2850: PPUSH
2851: LD_EXP 1
2855: NOT
2856: PPUSH
2857: LD_STRING 13s_
2859: PPUSH
2860: CALL 59308 0 3
2864: ST_TO_ADDR
// if Brown then
2865: LD_EXP 44
2869: IFFALSE 2887
// tmp := tmp ^ Brown ;
2871: LD_ADDR_VAR 0 6
2875: PUSH
2876: LD_VAR 0 6
2880: PUSH
2881: LD_EXP 44
2885: ADD
2886: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13s_ ) ;
2887: LD_ADDR_EXP 45
2891: PUSH
2892: LD_STRING Gladstone
2894: PPUSH
2895: LD_EXP 1
2899: NOT
2900: PPUSH
2901: LD_STRING 13s_
2903: PPUSH
2904: CALL 59308 0 3
2908: ST_TO_ADDR
// if Gladstone then
2909: LD_EXP 45
2913: IFFALSE 2931
// tmp := tmp ^ Gladstone ;
2915: LD_ADDR_VAR 0 6
2919: PUSH
2920: LD_VAR 0 6
2924: PUSH
2925: LD_EXP 45
2929: ADD
2930: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 13s_ ) ;
2931: LD_ADDR_EXP 46
2935: PUSH
2936: LD_STRING Houten
2938: PPUSH
2939: LD_EXP 1
2943: NOT
2944: PPUSH
2945: LD_STRING 13s_
2947: PPUSH
2948: CALL 59308 0 3
2952: ST_TO_ADDR
// if Houten then
2953: LD_EXP 46
2957: IFFALSE 2975
// tmp := tmp ^ Houten ;
2959: LD_ADDR_VAR 0 6
2963: PUSH
2964: LD_VAR 0 6
2968: PUSH
2969: LD_EXP 46
2973: ADD
2974: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 13s_ ) ;
2975: LD_ADDR_EXP 47
2979: PUSH
2980: LD_STRING Cornel
2982: PPUSH
2983: LD_EXP 1
2987: NOT
2988: PPUSH
2989: LD_STRING 13s_
2991: PPUSH
2992: CALL 59308 0 3
2996: ST_TO_ADDR
// if Cornel then
2997: LD_EXP 47
3001: IFFALSE 3019
// tmp := tmp ^ Cornel ;
3003: LD_ADDR_VAR 0 6
3007: PUSH
3008: LD_VAR 0 6
3012: PUSH
3013: LD_EXP 47
3017: ADD
3018: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 13s_ ) ;
3019: LD_ADDR_EXP 48
3023: PUSH
3024: LD_STRING Gary
3026: PPUSH
3027: LD_EXP 1
3031: NOT
3032: PPUSH
3033: LD_STRING 13s_
3035: PPUSH
3036: CALL 59308 0 3
3040: ST_TO_ADDR
// if Gary then
3041: LD_EXP 48
3045: IFFALSE 3063
// tmp := tmp ^ Gary ;
3047: LD_ADDR_VAR 0 6
3051: PUSH
3052: LD_VAR 0 6
3056: PUSH
3057: LD_EXP 48
3061: ADD
3062: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13s_ ) ;
3063: LD_ADDR_EXP 49
3067: PUSH
3068: LD_STRING Frank
3070: PPUSH
3071: LD_EXP 1
3075: NOT
3076: PPUSH
3077: LD_STRING 13s_
3079: PPUSH
3080: CALL 59308 0 3
3084: ST_TO_ADDR
// if Frank then
3085: LD_EXP 49
3089: IFFALSE 3107
// tmp := tmp ^ Frank ;
3091: LD_ADDR_VAR 0 6
3095: PUSH
3096: LD_VAR 0 6
3100: PUSH
3101: LD_EXP 49
3105: ADD
3106: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13s_ ) ;
3107: LD_ADDR_EXP 50
3111: PUSH
3112: LD_STRING Kikuchi
3114: PPUSH
3115: LD_EXP 1
3119: NOT
3120: PPUSH
3121: LD_STRING 13s_
3123: PPUSH
3124: CALL 59308 0 3
3128: ST_TO_ADDR
// if Kikuchi then
3129: LD_EXP 50
3133: IFFALSE 3151
// tmp := tmp ^ Kikuchi ;
3135: LD_ADDR_VAR 0 6
3139: PUSH
3140: LD_VAR 0 6
3144: PUSH
3145: LD_EXP 50
3149: ADD
3150: ST_TO_ADDR
// vip := tmp ;
3151: LD_ADDR_EXP 56
3155: PUSH
3156: LD_VAR 0 6
3160: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 13s_others ) ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: LD_VAR 0 6
3170: PUSH
3171: LD_STRING 13s_others
3173: PPUSH
3174: CALL_OW 31
3178: UNION
3179: ST_TO_ADDR
// if tmp < 20 then
3180: LD_VAR 0 6
3184: PUSH
3185: LD_INT 20
3187: LESS
3188: IFFALSE 3255
// for i = 1 to 20 - tmp do
3190: LD_ADDR_VAR 0 2
3194: PUSH
3195: DOUBLE
3196: LD_INT 1
3198: DEC
3199: ST_TO_ADDR
3200: LD_INT 20
3202: PUSH
3203: LD_VAR 0 6
3207: MINUS
3208: PUSH
3209: FOR_TO
3210: IFFALSE 3253
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 5 ) ;
3212: LD_INT 1
3214: PPUSH
3215: LD_VAR 0 2
3219: PUSH
3220: LD_INT 4
3222: MOD
3223: PUSH
3224: LD_INT 1
3226: PLUS
3227: PPUSH
3228: LD_INT 5
3230: PPUSH
3231: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3235: LD_ADDR_VAR 0 6
3239: PUSH
3240: LD_VAR 0 6
3244: PUSH
3245: CALL_OW 44
3249: ADD
3250: ST_TO_ADDR
// end ;
3251: GO 3209
3253: POP
3254: POP
// depot := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
3255: LD_ADDR_VAR 0 7
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 30
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: PUSH
3289: LD_INT 1
3291: ARRAY
3292: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
3293: LD_ADDR_VAR 0 8
3297: PUSH
3298: LD_INT 22
3300: PUSH
3301: LD_INT 4
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 30
3310: PUSH
3311: LD_INT 6
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: PUSH
3327: LD_INT 1
3329: ARRAY
3330: ST_TO_ADDR
// armoury := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3331: LD_ADDR_VAR 0 9
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 4
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 30
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// workshop := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
3369: LD_ADDR_VAR 0 10
3373: PUSH
3374: LD_INT 22
3376: PUSH
3377: LD_INT 4
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 30
3386: PUSH
3387: LD_INT 2
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PPUSH
3398: CALL_OW 69
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: ST_TO_ADDR
// for i in tmp do
3407: LD_ADDR_VAR 0 2
3411: PUSH
3412: LD_VAR 0 6
3416: PUSH
3417: FOR_IN
3418: IFFALSE 3544
// begin cl := GetClass ( i ) ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 2
3429: PPUSH
3430: CALL_OW 257
3434: ST_TO_ADDR
// if cl > 4 then
3435: LD_VAR 0 5
3439: PUSH
3440: LD_INT 4
3442: GREATER
3443: IFFALSE 3453
// cl := 1 ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_INT 1
3452: ST_TO_ADDR
// b := [ armoury , depot , workshop , lab ] [ cl ] ;
3453: LD_ADDR_VAR 0 3
3457: PUSH
3458: LD_VAR 0 9
3462: PUSH
3463: LD_VAR 0 7
3467: PUSH
3468: LD_VAR 0 10
3472: PUSH
3473: LD_VAR 0 8
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_VAR 0 5
3488: ARRAY
3489: ST_TO_ADDR
// if UnitsInside ( b ) < 5 then
3490: LD_VAR 0 3
3494: PPUSH
3495: CALL_OW 313
3499: PUSH
3500: LD_INT 5
3502: LESS
3503: IFFALSE 3521
// PlaceHumanInUnit ( i , b ) else
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: CALL_OW 52
3519: GO 3542
// PlaceUnitXYR ( i , 58 , 91 , 6 , false ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 58
3528: PPUSH
3529: LD_INT 91
3531: PPUSH
3532: LD_INT 6
3534: PPUSH
3535: LD_INT 0
3537: PPUSH
3538: CALL_OW 50
// end ;
3542: GO 3417
3544: POP
3545: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 100 ) ;
3546: LD_INT 2
3548: PPUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_INT 12
3557: PPUSH
3558: LD_INT 100
3560: PPUSH
3561: CALL 65941 0 5
// veh := CreateVehicle ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: CALL_OW 45
3574: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 233
// PlaceUnitXY ( veh , 49 , 88 , false ) ;
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_INT 49
3594: PPUSH
3595: LD_INT 88
3597: PPUSH
3598: LD_INT 0
3600: PPUSH
3601: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_INT 1
3612: PPUSH
3613: LD_INT 100
3615: PPUSH
3616: CALL_OW 290
// uc_side := 0 ;
3620: LD_ADDR_OWVAR 20
3624: PUSH
3625: LD_INT 0
3627: ST_TO_ADDR
// uc_nation := 0 ;
3628: LD_ADDR_OWVAR 21
3632: PUSH
3633: LD_INT 0
3635: ST_TO_ADDR
// for i = 1 to 4 do
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: DOUBLE
3642: LD_INT 1
3644: DEC
3645: ST_TO_ADDR
3646: LD_INT 4
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3681
// begin InitHc ;
3652: CALL_OW 19
// hc_class := class_apeman ;
3656: LD_ADDR_OWVAR 28
3660: PUSH
3661: LD_INT 12
3663: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
3664: CALL_OW 44
3668: PPUSH
3669: LD_INT 13
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ;
3679: GO 3649
3681: POP
3682: POP
// end ; end_of_file
3683: LD_VAR 0 1
3687: RET
// export Kurt , Kozlov , Friend ; export powellBomb ; export function PrepareLegion ; var i , side , un , tmp ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// side := 8 ;
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: LD_INT 8
3702: ST_TO_ADDR
// uc_side := side ;
3703: LD_ADDR_OWVAR 20
3707: PUSH
3708: LD_VAR 0 3
3712: ST_TO_ADDR
// uc_nation := 2 ;
3713: LD_ADDR_OWVAR 21
3717: PUSH
3718: LD_INT 2
3720: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: LD_INT 22
3728: PUSH
3729: LD_VAR 0 3
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 21
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 69
3756: PUSH
3757: FOR_IN
3758: IFFALSE 3774
// SetBLevel ( i , 10 ) ;
3760: LD_VAR 0 2
3764: PPUSH
3765: LD_INT 10
3767: PPUSH
3768: CALL_OW 241
3772: GO 3757
3774: POP
3775: POP
// if KurtStatus then
3776: LD_EXP 3
3780: IFFALSE 3803
// Kurt := PrepareUnit ( Kurt , false ,  ) else
3782: LD_ADDR_EXP 57
3786: PUSH
3787: LD_STRING Kurt
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: LD_STRING 
3795: PPUSH
3796: CALL 59308 0 3
3800: ST_TO_ADDR
3801: GO 3825
// Kurt := PrepareUnit ( AltKurt , ( not debug ) ,  ) ;
3803: LD_ADDR_EXP 57
3807: PUSH
3808: LD_STRING AltKurt
3810: PPUSH
3811: LD_EXP 1
3815: NOT
3816: PPUSH
3817: LD_STRING 
3819: PPUSH
3820: CALL 59308 0 3
3824: ST_TO_ADDR
// if not Kurt then
3825: LD_EXP 57
3829: NOT
3830: IFFALSE 3856
// begin InitHc ;
3832: CALL_OW 19
// PrepareSoldier ( sex_male , 10 ) ;
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 10
3841: PPUSH
3842: CALL_OW 381
// Kurt := CreateHuman ;
3846: LD_ADDR_EXP 57
3850: PUSH
3851: CALL_OW 44
3855: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Kurt , ar_depot1 ) ;
3856: LD_EXP 57
3860: PPUSH
3861: LD_INT 324
3863: PPUSH
3864: CALL_OW 52
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
3868: LD_ADDR_EXP 58
3872: PUSH
3873: LD_STRING Kozlov
3875: PPUSH
3876: LD_INT 0
3878: PPUSH
3879: LD_STRING 
3881: PPUSH
3882: CALL 59308 0 3
3886: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
3887: LD_EXP 58
3891: PPUSH
3892: LD_INT 22
3894: PUSH
3895: LD_INT 8
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 23
3904: PUSH
3905: LD_INT 3
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 30
3914: PUSH
3915: LD_INT 8
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 69
3931: PUSH
3932: LD_INT 1
3934: ARRAY
3935: PPUSH
3936: CALL_OW 52
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
3940: LD_ADDR_VAR 0 5
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_VAR 0 3
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 30
3959: PUSH
3960: LD_INT 32
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 58
3969: PUSH
3970: EMPTY
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: PPUSH
3978: CALL_OW 69
3982: ST_TO_ADDR
// for i = 1 to 10 do
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 10
3995: PUSH
3996: FOR_TO
3997: IFFALSE 4069
// begin uc_nation := nation_nature ;
3999: LD_ADDR_OWVAR 21
4003: PUSH
4004: LD_INT 0
4006: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
4007: LD_ADDR_OWVAR 28
4011: PUSH
4012: LD_INT 15
4014: ST_TO_ADDR
// hc_gallery :=  ;
4015: LD_ADDR_OWVAR 33
4019: PUSH
4020: LD_STRING 
4022: ST_TO_ADDR
// hc_name :=  ;
4023: LD_ADDR_OWVAR 26
4027: PUSH
4028: LD_STRING 
4030: ST_TO_ADDR
// un := CreateHuman ;
4031: LD_ADDR_VAR 0 4
4035: PUSH
4036: CALL_OW 44
4040: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PUSH
4051: LD_VAR 0 5
4055: PUSH
4056: LD_VAR 0 2
4060: MINUS
4061: ARRAY
4062: PPUSH
4063: CALL_OW 52
// end ;
4067: GO 3996
4069: POP
4070: POP
// tmp := CreateCharacterSet ( 12_kurt_squad ) ;
4071: LD_ADDR_VAR 0 5
4075: PUSH
4076: LD_STRING 12_kurt_squad
4078: PPUSH
4079: CALL_OW 31
4083: ST_TO_ADDR
// if tmp then
4084: LD_VAR 0 5
4088: IFFALSE 4122
// for i in tmp do
4090: LD_ADDR_VAR 0 2
4094: PUSH
4095: LD_VAR 0 5
4099: PUSH
4100: FOR_IN
4101: IFFALSE 4120
// PlaceUnitArea ( i , legionBaseArea , false ) ;
4103: LD_VAR 0 2
4107: PPUSH
4108: LD_INT 5
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: CALL_OW 49
4118: GO 4100
4120: POP
4121: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 12 , 6 , 6 , 8 ] ) ;
4122: LD_INT 324
4124: PPUSH
4125: LD_INT 5
4127: PPUSH
4128: LD_STRING 
4130: PPUSH
4131: LD_INT 8
4133: PUSH
4134: LD_INT 9
4136: PUSH
4137: LD_INT 10
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_OWVAR 67
4149: ARRAY
4150: PPUSH
4151: LD_INT 3000
4153: PUSH
4154: LD_INT 500
4156: PUSH
4157: LD_INT 150
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: PPUSH
4165: LD_INT 12
4167: PUSH
4168: LD_INT 6
4170: PUSH
4171: LD_INT 6
4173: PUSH
4174: LD_INT 8
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL 69350 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Kurt ) ;
4187: LD_ADDR_EXP 99
4191: PUSH
4192: LD_EXP 99
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 22
4202: PUSH
4203: LD_VAR 0 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 23
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: LD_INT 21
4227: PUSH
4228: LD_INT 2
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 69
4248: PUSH
4249: LD_EXP 57
4253: DIFF
4254: PPUSH
4255: CALL_OW 1
4259: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 7
4265: PPUSH
4266: CALL_OW 383
// Friend := CreateHuman ;
4270: LD_ADDR_EXP 59
4274: PUSH
4275: CALL_OW 44
4279: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_selfpropelled_bomb , 100 ) ;
4280: LD_INT 14
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 29
4291: PPUSH
4292: LD_INT 100
4294: PPUSH
4295: CALL 65941 0 5
// powellBomb := CreateVehicle ;
4299: LD_ADDR_EXP 60
4303: PUSH
4304: CALL_OW 45
4308: ST_TO_ADDR
// PlaceUnitXY ( powellBomb , 90 , 51 , false ) ;
4309: LD_EXP 60
4313: PPUSH
4314: LD_INT 90
4316: PPUSH
4317: LD_INT 51
4319: PPUSH
4320: LD_INT 0
4322: PPUSH
4323: CALL_OW 48
// end ;
4327: LD_VAR 0 1
4331: RET
// export function RebuildKozlovFactory ; var fac , lab ; begin
4332: LD_INT 0
4334: PPUSH
4335: PPUSH
4336: PPUSH
// if IsLive ( kozlov_fac ) then
4337: LD_INT 332
4339: PPUSH
4340: CALL_OW 300
4344: IFFALSE 4348
// exit ;
4346: GO 4915
// ComExitBuilding ( Kozlov ) ;
4348: LD_EXP 58
4352: PPUSH
4353: CALL_OW 122
// if GetClass ( Kozlov ) <> 2 then
4357: LD_EXP 58
4361: PPUSH
4362: CALL_OW 257
4366: PUSH
4367: LD_INT 2
4369: NONEQUAL
4370: IFFALSE 4405
// begin AddComEnterUnit ( Kozlov , ar_depot1 ) ;
4372: LD_EXP 58
4376: PPUSH
4377: LD_INT 324
4379: PPUSH
4380: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_engineer ) ;
4384: LD_EXP 58
4388: PPUSH
4389: LD_INT 2
4391: PPUSH
4392: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
4396: LD_EXP 58
4400: PPUSH
4401: CALL_OW 182
// end ; AddComBuild ( Kozlov , b_workshop , 93 , 32 , 3 ) ;
4405: LD_EXP 58
4409: PPUSH
4410: LD_INT 2
4412: PPUSH
4413: LD_INT 93
4415: PPUSH
4416: LD_INT 32
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4426: LD_INT 35
4428: PPUSH
4429: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) ;
4433: LD_INT 22
4435: PUSH
4436: LD_INT 8
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 30
4445: PUSH
4446: LD_INT 3
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 23
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 57
4465: PUSH
4466: EMPTY
4467: LIST
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 69
4479: IFFALSE 4426
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) [ 1 ] ;
4481: LD_ADDR_VAR 0 2
4485: PUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 8
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 23
4508: PUSH
4509: LD_INT 3
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 57
4518: PUSH
4519: EMPTY
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: PPUSH
4528: CALL_OW 69
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] ] ) then
4537: LD_INT 22
4539: PUSH
4540: LD_INT 8
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 23
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 30
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: PPUSH
4572: CALL_OW 69
4576: NOT
4577: IFFALSE 4655
// begin AddComBuild ( Kozlov , b_ext_siberium , 97 , 36 , 5 ) ;
4579: LD_EXP 58
4583: PPUSH
4584: LD_INT 21
4586: PPUSH
4587: LD_INT 97
4589: PPUSH
4590: LD_INT 36
4592: PPUSH
4593: LD_INT 5
4595: PPUSH
4596: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4600: LD_INT 35
4602: PPUSH
4603: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] , [ f_constructed ] ] ) ;
4607: LD_INT 22
4609: PUSH
4610: LD_INT 8
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 23
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 21
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: LD_INT 57
4639: PUSH
4640: EMPTY
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: IFFALSE 4600
// end ; if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] ] ) then
4655: LD_INT 22
4657: PUSH
4658: LD_INT 8
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 23
4667: PUSH
4668: LD_INT 3
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 30
4677: PUSH
4678: LD_INT 18
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 69
4694: NOT
4695: IFFALSE 4773
// begin AddComBuild ( Kozlov , b_ext_rocket , 89 , 32 , 1 ) ;
4697: LD_EXP 58
4701: PPUSH
4702: LD_INT 18
4704: PPUSH
4705: LD_INT 89
4707: PPUSH
4708: LD_INT 32
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4718: LD_INT 35
4720: PPUSH
4721: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] , [ f_constructed ] ] ) ;
4725: LD_INT 22
4727: PUSH
4728: LD_INT 8
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 30
4747: PUSH
4748: LD_INT 18
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 57
4757: PUSH
4758: EMPTY
4759: LIST
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 69
4771: IFFALSE 4718
// end ; lab := kozlov_lab ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 336
4780: ST_TO_ADDR
// if not lab then
4781: LD_VAR 0 3
4785: NOT
4786: IFFALSE 4790
// exit ;
4788: GO 4915
// AddComEnterUnit ( Kozlov , lab [ 1 ] ) ;
4790: LD_EXP 58
4794: PPUSH
4795: LD_VAR 0 3
4799: PUSH
4800: LD_INT 1
4802: ARRAY
4803: PPUSH
4804: CALL_OW 180
// AddComChangeProfession ( Kozlov , 4 ) ;
4808: LD_EXP 58
4812: PPUSH
4813: LD_INT 4
4815: PPUSH
4816: CALL_OW 183
// ComResearch ( lab [ 1 ] , tech_sibFiss ) ;
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: ARRAY
4828: PPUSH
4829: LD_INT 25
4831: PPUSH
4832: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
4836: LD_INT 35
4838: PPUSH
4839: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
4843: LD_INT 25
4845: PPUSH
4846: LD_INT 8
4848: PPUSH
4849: CALL_OW 321
4853: PUSH
4854: LD_INT 2
4856: EQUAL
4857: IFFALSE 4836
// ComExitBuilding ( Kozlov ) ;
4859: LD_EXP 58
4863: PPUSH
4864: CALL_OW 122
// AddComEnterUnit ( Kozlov , fac ) ;
4868: LD_EXP 58
4872: PPUSH
4873: LD_VAR 0 2
4877: PPUSH
4878: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
4882: LD_EXP 58
4886: PPUSH
4887: LD_INT 3
4889: PPUSH
4890: CALL_OW 183
// ComConstruct ( fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_INT 23
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: LD_INT 1
4907: PPUSH
4908: LD_INT 48
4910: PPUSH
4911: CALL_OW 125
// end ;
4915: LD_VAR 0 1
4919: RET
// every 7 7$30 trigger not legionDestroyed and missionStage >= 6 do var i , tmp , target ;
4920: LD_EXP 22
4924: NOT
4925: PUSH
4926: LD_EXP 15
4930: PUSH
4931: LD_INT 6
4933: GREATEREQUAL
4934: AND
4935: IFFALSE 5619
4937: GO 4939
4939: DISABLE
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// begin enable ;
4945: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
4946: LD_INT 22
4948: PUSH
4949: LD_INT 8
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 23
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 30
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: NOT
4986: IFFALSE 4990
// exit ;
4988: GO 5619
// if Prob ( 40 ) then
4990: LD_INT 40
4992: PPUSH
4993: CALL_OW 13
4997: IFFALSE 5124
// begin MC_InsertProduceList ( 3 , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
4999: LD_INT 3
5001: PPUSH
5002: LD_INT 13
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: LD_INT 2
5010: PUSH
5011: LD_INT 28
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 13
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: LD_INT 2
5028: PUSH
5029: LD_INT 28
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 13
5040: PUSH
5041: LD_INT 1
5043: PUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 28
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 13
5058: PUSH
5059: LD_INT 1
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: LD_INT 28
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PUSH
5074: LD_INT 13
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: LD_INT 28
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 13
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: LD_INT 2
5100: PUSH
5101: LD_INT 26
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL 53413 0 2
// end else
5122: GO 5315
// begin MC_InsertProduceList ( 3 , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
5124: LD_INT 3
5126: PPUSH
5127: LD_INT 13
5129: PUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 27
5138: PUSH
5139: LD_INT 26
5141: PUSH
5142: LD_INT 26
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_OWVAR 67
5154: ARRAY
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 13
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: LD_INT 2
5170: PUSH
5171: LD_INT 27
5173: PUSH
5174: LD_INT 26
5176: PUSH
5177: LD_INT 26
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: LD_OWVAR 67
5189: ARRAY
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: LD_INT 26
5208: PUSH
5209: LD_INT 26
5211: PUSH
5212: LD_INT 29
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: PUSH
5220: LD_OWVAR 67
5224: ARRAY
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 13
5234: PUSH
5235: LD_INT 1
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: LD_INT 26
5243: PUSH
5244: LD_INT 29
5246: PUSH
5247: LD_INT 29
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: LD_OWVAR 67
5259: ARRAY
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 13
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: LD_INT 29
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 13
5287: PUSH
5288: LD_INT 1
5290: PUSH
5291: LD_INT 2
5293: PUSH
5294: LD_INT 26
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL 53413 0 2
// end ; repeat wait ( 0 0$1 ) ;
5315: LD_INT 35
5317: PPUSH
5318: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
5322: LD_INT 3
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL 54826 0 2
5332: PUSH
5333: LD_INT 6
5335: GREATEREQUAL
5336: IFFALSE 5315
// tmp := MC_GetVehicles ( 3 , true ) ;
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 3
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL 54826 0 2
5353: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
5354: LD_ADDR_EXP 118
5358: PUSH
5359: LD_EXP 118
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: LD_EXP 118
5371: PUSH
5372: LD_INT 3
5374: ARRAY
5375: PUSH
5376: LD_VAR 0 2
5380: DIFF
5381: PPUSH
5382: CALL_OW 1
5386: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: LD_INT 0
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: CALL_OW 12
5402: ST_TO_ADDR
// if target then
5403: LD_VAR 0 3
5407: IFFALSE 5466
// begin repeat ComMoveXY ( tmp , 90 , 75 ) ;
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 90
5416: PPUSH
5417: LD_INT 75
5419: PPUSH
5420: CALL_OW 111
// wait ( 0 0$1 ) ;
5424: LD_INT 35
5426: PPUSH
5427: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 90 , 75 , 6 ] ) > 2 ;
5431: LD_VAR 0 2
5435: PPUSH
5436: LD_INT 92
5438: PUSH
5439: LD_INT 90
5441: PUSH
5442: LD_INT 75
5444: PUSH
5445: LD_INT 6
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: PPUSH
5454: CALL_OW 72
5458: PUSH
5459: LD_INT 2
5461: GREATER
5462: IFFALSE 5409
// end else
5464: GO 5521
// begin repeat ComMoveXY ( tmp , 128 , 11 ) ;
5466: LD_VAR 0 2
5470: PPUSH
5471: LD_INT 128
5473: PPUSH
5474: LD_INT 11
5476: PPUSH
5477: CALL_OW 111
// wait ( 0 0$1 ) ;
5481: LD_INT 35
5483: PPUSH
5484: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 128 , 11 , 6 ] ) > 2 ;
5488: LD_VAR 0 2
5492: PPUSH
5493: LD_INT 92
5495: PUSH
5496: LD_INT 128
5498: PUSH
5499: LD_INT 11
5501: PUSH
5502: LD_INT 6
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 72
5515: PUSH
5516: LD_INT 2
5518: GREATER
5519: IFFALSE 5466
// end ; repeat wait ( 0 0$1 ) ;
5521: LD_INT 35
5523: PPUSH
5524: CALL_OW 67
// for i in tmp do
5528: LD_ADDR_VAR 0 1
5532: PUSH
5533: LD_VAR 0 2
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5610
// if GetLives ( i ) > 251 then
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 256
5550: PUSH
5551: LD_INT 251
5553: GREATER
5554: IFFALSE 5592
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
5556: LD_VAR 0 1
5560: PPUSH
5561: LD_INT 81
5563: PUSH
5564: LD_INT 8
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL_OW 69
5575: PPUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 74
5585: PPUSH
5586: CALL_OW 115
5590: GO 5608
// tmp := tmp diff i ;
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_VAR 0 2
5601: PUSH
5602: LD_VAR 0 1
5606: DIFF
5607: ST_TO_ADDR
5608: GO 5538
5610: POP
5611: POP
// until not tmp ;
5612: LD_VAR 0 2
5616: NOT
5617: IFFALSE 5521
// end ; end_of_file
5619: PPOPN 3
5621: END
// export Platonov , Kovalyuk , Bystrov , Yakotich , Gleb , Bierezov ; export Vsevolod , sewiVeh ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , b , teleport ; begin
5622: LD_INT 0
5624: PPUSH
5625: PPUSH
5626: PPUSH
5627: PPUSH
5628: PPUSH
5629: PPUSH
5630: PPUSH
5631: PPUSH
5632: PPUSH
// side := 3 ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_INT 3
5640: ST_TO_ADDR
// uc_side := side ;
5641: LD_ADDR_OWVAR 20
5645: PUSH
5646: LD_VAR 0 6
5650: ST_TO_ADDR
// uc_nation := 3 ;
5651: LD_ADDR_OWVAR 21
5655: PUSH
5656: LD_INT 3
5658: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: LD_INT 22
5666: PUSH
5667: LD_VAR 0 6
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 21
5678: PUSH
5679: LD_INT 3
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PPUSH
5690: CALL_OW 69
5694: PUSH
5695: FOR_IN
5696: IFFALSE 5712
// SetBLevel ( i , 10 ) ;
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_INT 10
5705: PPUSH
5706: CALL_OW 241
5710: GO 5695
5712: POP
5713: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
5714: LD_ADDR_VAR 0 9
5718: PUSH
5719: LD_INT 22
5721: PUSH
5722: LD_VAR 0 6
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 30
5733: PUSH
5734: LD_INT 34
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: ST_TO_ADDR
// if teleport then
5750: LD_VAR 0 9
5754: IFFALSE 5775
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
5756: LD_VAR 0 9
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: LD_INT 123
5767: PPUSH
5768: LD_INT 122
5770: PPUSH
5771: CALL_OW 243
// Platonov := NewCharacter ( Platonov ) ;
5775: LD_ADDR_EXP 61
5779: PUSH
5780: LD_STRING Platonov
5782: PPUSH
5783: CALL_OW 25
5787: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
5788: LD_ADDR_EXP 62
5792: PUSH
5793: LD_STRING Kovalyuk
5795: PPUSH
5796: CALL_OW 25
5800: ST_TO_ADDR
// Yakotich := NewCharacter ( Yakotich ) ;
5801: LD_ADDR_EXP 64
5805: PUSH
5806: LD_STRING Yakotich
5808: PPUSH
5809: CALL_OW 25
5813: ST_TO_ADDR
// Bystrov := NewCharacter ( Bystrov ) ;
5814: LD_ADDR_EXP 63
5818: PUSH
5819: LD_STRING Bystrov
5821: PPUSH
5822: CALL_OW 25
5826: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
5827: LD_ADDR_EXP 65
5831: PUSH
5832: LD_STRING Gleb
5834: PPUSH
5835: CALL_OW 25
5839: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
5840: LD_STRING 03_Cornel
5842: PPUSH
5843: CALL_OW 28
5847: IFFALSE 5895
// begin Bierezov := NewCharacter ( Mikhail ) ;
5849: LD_ADDR_EXP 66
5853: PUSH
5854: LD_STRING Mikhail
5856: PPUSH
5857: CALL_OW 25
5861: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
5862: LD_EXP 66
5866: PPUSH
5867: LD_INT 197
5869: PPUSH
5870: LD_INT 111
5872: PPUSH
5873: LD_INT 9
5875: PPUSH
5876: LD_INT 0
5878: PPUSH
5879: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
5883: LD_EXP 66
5887: PPUSH
5888: LD_INT 3
5890: PPUSH
5891: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
5895: LD_EXP 61
5899: PPUSH
5900: LD_INT 126
5902: PPUSH
5903: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , ru_fac1 ) ;
5907: LD_EXP 62
5911: PPUSH
5912: LD_INT 134
5914: PPUSH
5915: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
5919: LD_EXP 64
5923: PPUSH
5924: LD_INT 197
5926: PPUSH
5927: LD_INT 111
5929: PPUSH
5930: LD_INT 9
5932: PPUSH
5933: LD_INT 0
5935: PPUSH
5936: CALL_OW 50
// PlaceUnitXYR ( Bystrov , 197 , 111 , 9 , false ) ;
5940: LD_EXP 63
5944: PPUSH
5945: LD_INT 197
5947: PPUSH
5948: LD_INT 111
5950: PPUSH
5951: LD_INT 9
5953: PPUSH
5954: LD_INT 0
5956: PPUSH
5957: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
5961: LD_EXP 65
5965: PPUSH
5966: LD_INT 197
5968: PPUSH
5969: LD_INT 111
5971: PPUSH
5972: LD_INT 9
5974: PPUSH
5975: LD_INT 0
5977: PPUSH
5978: CALL_OW 50
// PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 ] [ Difficulty ] , [ 10000 , 1000 , 300 ] , [ - 1 , 8 , 13 , 8 ] ) ;
5982: LD_INT 126
5984: PPUSH
5985: LD_INT 4
5987: PPUSH
5988: LD_STRING zhukov
5990: PPUSH
5991: LD_INT 9
5993: PUSH
5994: LD_INT 10
5996: PUSH
5997: LD_INT 10
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PUSH
6005: LD_OWVAR 67
6009: ARRAY
6010: PPUSH
6011: LD_INT 10000
6013: PUSH
6014: LD_INT 1000
6016: PUSH
6017: LD_INT 300
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: PPUSH
6025: LD_INT 1
6027: NEG
6028: PUSH
6029: LD_INT 8
6031: PUSH
6032: LD_INT 13
6034: PUSH
6035: LD_INT 8
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PPUSH
6044: CALL 69350 0 6
// base := GetBase ( ru_depot2 ) ;
6048: LD_ADDR_VAR 0 4
6052: PUSH
6053: LD_INT 267
6055: PPUSH
6056: CALL_OW 274
6060: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 2000 ) ;
6061: LD_VAR 0 4
6065: PPUSH
6066: LD_INT 1
6068: PPUSH
6069: LD_INT 2000
6071: PPUSH
6072: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
6076: LD_VAR 0 4
6080: PPUSH
6081: LD_INT 2
6083: PPUSH
6084: LD_INT 200
6086: PPUSH
6087: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
6091: LD_VAR 0 4
6095: PPUSH
6096: LD_INT 3
6098: PPUSH
6099: LD_INT 200
6101: PPUSH
6102: CALL_OW 277
// mc_bases := Replace ( mc_bases , 2 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Platonov ) ;
6106: LD_ADDR_EXP 99
6110: PUSH
6111: LD_EXP 99
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: LD_INT 22
6121: PUSH
6122: LD_VAR 0 6
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_INT 21
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PUSH
6157: LD_EXP 61
6161: DIFF
6162: PPUSH
6163: CALL_OW 1
6167: ST_TO_ADDR
// behemoths := [ ] ;
6168: LD_ADDR_EXP 69
6172: PUSH
6173: EMPTY
6174: ST_TO_ADDR
// behemothBuilders := [ ] ;
6175: LD_ADDR_EXP 70
6179: PUSH
6180: EMPTY
6181: ST_TO_ADDR
// if Kovalyuk then
6182: LD_EXP 62
6186: IFFALSE 6208
// behemothBuilders := Join ( behemothBuilders , Kovalyuk ) ;
6188: LD_ADDR_EXP 70
6192: PUSH
6193: LD_EXP 70
6197: PPUSH
6198: LD_EXP 62
6202: PPUSH
6203: CALL 101624 0 2
6207: ST_TO_ADDR
// j := 3 ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_INT 3
6215: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) diff Kovalyuk do
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 3
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: PUSH
6250: LD_EXP 62
6254: DIFF
6255: PUSH
6256: FOR_IN
6257: IFFALSE 6307
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
6259: LD_ADDR_EXP 70
6263: PUSH
6264: LD_EXP 70
6268: PPUSH
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL 101624 0 2
6278: ST_TO_ADDR
// j := j - 1 ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_INT 1
6291: MINUS
6292: ST_TO_ADDR
// if j = 0 then
6293: LD_VAR 0 3
6297: PUSH
6298: LD_INT 0
6300: EQUAL
6301: IFFALSE 6305
// break ;
6303: GO 6307
// end ;
6305: GO 6256
6307: POP
6308: POP
// end ;
6309: LD_VAR 0 1
6313: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
6314: LD_INT 0
6316: PPUSH
6317: PPUSH
6318: PPUSH
6319: PPUSH
6320: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
6321: LD_ADDR_VAR 0 4
6325: PUSH
6326: LD_INT 209
6328: PUSH
6329: LD_INT 149
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 219
6338: PUSH
6339: LD_INT 154
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 223
6348: PUSH
6349: LD_INT 149
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 232
6358: PUSH
6359: LD_INT 155
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: ST_TO_ADDR
// if not behemothBuilders then
6372: LD_EXP 70
6376: NOT
6377: IFFALSE 6381
// exit ;
6379: GO 6485
// j := 1 ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// for i in behemothBuilders do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_EXP 70
6398: PUSH
6399: FOR_IN
6400: IFFALSE 6483
// begin if IsInUnit ( i ) then
6402: LD_VAR 0 2
6406: PPUSH
6407: CALL_OW 310
6411: IFFALSE 6422
// ComExitBuilding ( i ) ;
6413: LD_VAR 0 2
6417: PPUSH
6418: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
6422: LD_VAR 0 2
6426: PPUSH
6427: LD_INT 37
6429: PPUSH
6430: LD_VAR 0 4
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PUSH
6441: LD_INT 1
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 4
6449: PUSH
6450: LD_VAR 0 3
6454: ARRAY
6455: PUSH
6456: LD_INT 2
6458: ARRAY
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL_OW 230
// j := j + 1 ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 3
6476: PUSH
6477: LD_INT 1
6479: PLUS
6480: ST_TO_ADDR
// end ;
6481: GO 6399
6483: POP
6484: POP
// end ;
6485: LD_VAR 0 1
6489: RET
// every 0 0$1 trigger FilterUnitsInArea ( behemothParking , [ f_btype , b_behemoth ] ) do
6490: LD_INT 24
6492: PPUSH
6493: LD_INT 30
6495: PUSH
6496: LD_INT 37
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PPUSH
6503: CALL_OW 70
6507: IFFALSE 6520
6509: GO 6511
6511: DISABLE
// behemothUnderConstruct := true ;
6512: LD_ADDR_EXP 26
6516: PUSH
6517: LD_INT 1
6519: ST_TO_ADDR
6520: END
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
6521: LD_INT 3
6523: PPUSH
6524: CALL 101672 0 1
6528: PUSH
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 37
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: NOT
6558: AND
6559: IFFALSE 6745
6561: GO 6563
6563: DISABLE
6564: LD_INT 0
6566: PPUSH
6567: PPUSH
// begin enable ;
6568: ENABLE
// tmp := GetBehemoths ( 3 ) ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_INT 3
6576: PPUSH
6577: CALL 101672 0 1
6581: ST_TO_ADDR
// for i in tmp do
6582: LD_ADDR_VAR 0 1
6586: PUSH
6587: LD_VAR 0 2
6591: PUSH
6592: FOR_IN
6593: IFFALSE 6743
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
6595: LD_VAR 0 1
6599: PPUSH
6600: LD_INT 9
6602: PPUSH
6603: CALL_OW 308
6607: PUSH
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 110
6617: PUSH
6618: LD_INT 2
6620: EQUAL
6621: NOT
6622: AND
6623: IFFALSE 6637
// SetTag ( i , 2 ) ;
6625: LD_VAR 0 1
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
6637: LD_INT 81
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 91
6649: PUSH
6650: LD_VAR 0 1
6654: PUSH
6655: LD_INT 12
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PPUSH
6667: CALL_OW 69
6671: NOT
6672: PUSH
6673: LD_VAR 0 1
6677: PPUSH
6678: CALL_OW 110
6682: PUSH
6683: LD_INT 2
6685: EQUAL
6686: NOT
6687: AND
6688: IFFALSE 6707
// ComAgressiveMove ( i , 64 , 93 ) else
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 64
6697: PPUSH
6698: LD_INT 93
6700: PPUSH
6701: CALL_OW 114
6705: GO 6741
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
6707: LD_VAR 0 1
6711: PPUSH
6712: LD_INT 81
6714: PUSH
6715: LD_INT 3
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PPUSH
6722: CALL_OW 69
6726: PPUSH
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 74
6736: PPUSH
6737: CALL_OW 115
// end ;
6741: GO 6592
6743: POP
6744: POP
// end ;
6745: PPOPN 2
6747: END
// export function PrepareRussianAttack ( strength ) ; var i ; begin
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// result := [ ] ;
6752: LD_ADDR_VAR 0 2
6756: PUSH
6757: EMPTY
6758: ST_TO_ADDR
// uc_side := 6 ;
6759: LD_ADDR_OWVAR 20
6763: PUSH
6764: LD_INT 6
6766: ST_TO_ADDR
// uc_nation := 3 ;
6767: LD_ADDR_OWVAR 21
6771: PUSH
6772: LD_INT 3
6774: ST_TO_ADDR
// case strength of 1 :
6775: LD_VAR 0 1
6779: PUSH
6780: LD_INT 1
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6788
6786: GO 6926
6788: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_INT 3
6801: PUSH
6802: LD_INT 4
6804: PUSH
6805: LD_INT 5
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_OWVAR 67
6817: ARRAY
6818: PUSH
6819: FOR_TO
6820: IFFALSE 6922
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked ] [ i mod 2 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] , 80 ) ;
6822: LD_INT 22
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_VAR 0 3
6836: PUSH
6837: LD_INT 2
6839: MOD
6840: PUSH
6841: LD_INT 1
6843: PLUS
6844: ARRAY
6845: PPUSH
6846: LD_INT 1
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: CALL_OW 12
6866: ARRAY
6867: PPUSH
6868: LD_INT 3
6870: PPUSH
6871: LD_INT 43
6873: PUSH
6874: LD_INT 44
6876: PUSH
6877: LD_INT 45
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 1
6887: PPUSH
6888: LD_INT 3
6890: PPUSH
6891: CALL_OW 12
6895: ARRAY
6896: PPUSH
6897: LD_INT 80
6899: PPUSH
6900: CALL 65941 0 5
// result := result union CreateVehicle ;
6904: LD_ADDR_VAR 0 2
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: CALL_OW 45
6918: UNION
6919: ST_TO_ADDR
// end ;
6920: GO 6819
6922: POP
6923: POP
// end ; 2 :
6924: GO 7706
6926: LD_INT 2
6928: DOUBLE
6929: EQUAL
6930: IFTRUE 6934
6932: GO 7090
6934: POP
// begin for i = 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_INT 5
6947: PUSH
6948: LD_INT 5
6950: PUSH
6951: LD_INT 6
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: LD_OWVAR 67
6963: ARRAY
6964: PUSH
6965: FOR_TO
6966: IFFALSE 7086
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
6968: LD_INT 22
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: LD_INT 24
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: LD_VAR 0 3
6986: PUSH
6987: LD_INT 3
6989: MOD
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: ARRAY
6995: PPUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 1
7008: PPUSH
7009: LD_INT 2
7011: PPUSH
7012: CALL_OW 12
7016: ARRAY
7017: PPUSH
7018: LD_INT 3
7020: PPUSH
7021: LD_INT 43
7023: PUSH
7024: LD_INT 44
7026: PUSH
7027: LD_INT 45
7029: PUSH
7030: LD_INT 44
7032: PUSH
7033: LD_INT 46
7035: PUSH
7036: LD_INT 46
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_VAR 0 3
7051: PUSH
7052: LD_INT 6
7054: MOD
7055: PUSH
7056: LD_INT 1
7058: PLUS
7059: ARRAY
7060: PPUSH
7061: LD_INT 80
7063: PPUSH
7064: CALL 65941 0 5
// result := result union CreateVehicle ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_VAR 0 2
7077: PUSH
7078: CALL_OW 45
7082: UNION
7083: ST_TO_ADDR
// end ;
7084: GO 6965
7086: POP
7087: POP
// end ; 3 :
7088: GO 7706
7090: LD_INT 3
7092: DOUBLE
7093: EQUAL
7094: IFTRUE 7098
7096: GO 7254
7098: POP
// begin for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: DOUBLE
7105: LD_INT 1
7107: DEC
7108: ST_TO_ADDR
7109: LD_INT 5
7111: PUSH
7112: LD_INT 6
7114: PUSH
7115: LD_INT 7
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_OWVAR 67
7127: ARRAY
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7250
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
7132: LD_INT 22
7134: PUSH
7135: LD_INT 24
7137: PUSH
7138: LD_INT 24
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_VAR 0 3
7150: PUSH
7151: LD_INT 3
7153: MOD
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PPUSH
7160: LD_INT 1
7162: PUSH
7163: LD_INT 3
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 2
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: PPUSH
7182: LD_INT 3
7184: PPUSH
7185: LD_INT 43
7187: PUSH
7188: LD_INT 47
7190: PUSH
7191: LD_INT 45
7193: PUSH
7194: LD_INT 45
7196: PUSH
7197: LD_INT 46
7199: PUSH
7200: LD_INT 46
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: LD_VAR 0 3
7215: PUSH
7216: LD_INT 6
7218: MOD
7219: PUSH
7220: LD_INT 1
7222: PLUS
7223: ARRAY
7224: PPUSH
7225: LD_INT 80
7227: PPUSH
7228: CALL 65941 0 5
// result := result union CreateVehicle ;
7232: LD_ADDR_VAR 0 2
7236: PUSH
7237: LD_VAR 0 2
7241: PUSH
7242: CALL_OW 45
7246: UNION
7247: ST_TO_ADDR
// end ;
7248: GO 7129
7250: POP
7251: POP
// end ; 4 :
7252: GO 7706
7254: LD_INT 4
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7705
7262: POP
// begin uc_nation := 3 ;
7263: LD_ADDR_OWVAR 21
7267: PUSH
7268: LD_INT 3
7270: ST_TO_ADDR
// for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
7271: LD_ADDR_VAR 0 3
7275: PUSH
7276: DOUBLE
7277: LD_INT 1
7279: DEC
7280: ST_TO_ADDR
7281: LD_INT 6
7283: PUSH
7284: LD_INT 7
7286: PUSH
7287: LD_INT 8
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: LD_OWVAR 67
7299: ARRAY
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7422
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_rocket_launcher , ru_rocket , ru_rocket , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
7304: LD_INT 22
7306: PUSH
7307: LD_INT 24
7309: PUSH
7310: LD_INT 24
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: LD_VAR 0 3
7322: PUSH
7323: LD_INT 3
7325: MOD
7326: PUSH
7327: LD_INT 1
7329: PLUS
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 1
7344: PPUSH
7345: LD_INT 2
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 3
7356: PPUSH
7357: LD_INT 45
7359: PUSH
7360: LD_INT 47
7362: PUSH
7363: LD_INT 47
7365: PUSH
7366: LD_INT 45
7368: PUSH
7369: LD_INT 46
7371: PUSH
7372: LD_INT 46
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 6
7390: MOD
7391: PUSH
7392: LD_INT 1
7394: PLUS
7395: ARRAY
7396: PPUSH
7397: LD_INT 80
7399: PPUSH
7400: CALL 65941 0 5
// result := result union CreateVehicle ;
7404: LD_ADDR_VAR 0 2
7408: PUSH
7409: LD_VAR 0 2
7413: PUSH
7414: CALL_OW 45
7418: UNION
7419: ST_TO_ADDR
// end ;
7420: GO 7301
7422: POP
7423: POP
// if not KappaStatus then
7424: LD_EXP 2
7428: NOT
7429: IFFALSE 7624
// begin uc_nation := 1 ;
7431: LD_ADDR_OWVAR 21
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// for i = 1 to 3 do
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_INT 3
7451: PUSH
7452: FOR_TO
7453: IFFALSE 7549
// begin PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 85 ) ;
7455: LD_INT 3
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: CALL_OW 12
7475: ARRAY
7476: PPUSH
7477: LD_INT 1
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: LD_INT 1
7489: PPUSH
7490: LD_INT 2
7492: PPUSH
7493: CALL_OW 12
7497: ARRAY
7498: PPUSH
7499: LD_INT 3
7501: PPUSH
7502: LD_INT 9
7504: PUSH
7505: LD_INT 7
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 1
7514: PPUSH
7515: LD_INT 2
7517: PPUSH
7518: CALL_OW 12
7522: ARRAY
7523: PPUSH
7524: LD_INT 85
7526: PPUSH
7527: CALL 65941 0 5
// result := result union CreateVehicle ;
7531: LD_ADDR_VAR 0 2
7535: PUSH
7536: LD_VAR 0 2
7540: PUSH
7541: CALL_OW 45
7545: UNION
7546: ST_TO_ADDR
// end ;
7547: GO 7452
7549: POP
7550: POP
// if vsevolodFirstAttack then
7551: LD_EXP 24
7555: IFFALSE 7622
// begin vsevolodFirstAttack := false ;
7557: LD_ADDR_EXP 24
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
7565: LD_INT 5
7567: PPUSH
7568: LD_INT 3
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: LD_INT 6
7576: PPUSH
7577: LD_INT 100
7579: PPUSH
7580: CALL 65941 0 5
// sewiVeh := CreateVehicle ;
7584: LD_ADDR_EXP 68
7588: PUSH
7589: CALL_OW 45
7593: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
7594: LD_EXP 68
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 242
// result := result union sewiVeh ;
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_VAR 0 2
7615: PUSH
7616: LD_EXP 68
7620: UNION
7621: ST_TO_ADDR
// end ; end else
7622: GO 7703
// if vsevolodFirstAttack then
7624: LD_EXP 24
7628: IFFALSE 7703
// begin vsevolodFirstAttack := false ;
7630: LD_ADDR_EXP 24
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// uc_nation := 3 ;
7638: LD_ADDR_OWVAR 21
7642: PUSH
7643: LD_INT 3
7645: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_rocket , 100 ) ;
7646: LD_INT 24
7648: PPUSH
7649: LD_INT 3
7651: PPUSH
7652: LD_INT 1
7654: PPUSH
7655: LD_INT 47
7657: PPUSH
7658: LD_INT 100
7660: PPUSH
7661: CALL 65941 0 5
// sewiVeh := CreateVehicle ;
7665: LD_ADDR_EXP 68
7669: PUSH
7670: CALL_OW 45
7674: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
7675: LD_EXP 68
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: CALL_OW 242
// result := result union sewiVeh ;
7687: LD_ADDR_VAR 0 2
7691: PUSH
7692: LD_VAR 0 2
7696: PUSH
7697: LD_EXP 68
7701: UNION
7702: ST_TO_ADDR
// end ; end ; end ;
7703: GO 7706
7705: POP
// end ;
7706: LD_VAR 0 2
7710: RET
// every 0 0$30 trigger activeAttacks do var i , tmp , time , areas , strength , xy , x , y ;
7711: LD_EXP 16
7715: IFFALSE 8404
7717: GO 7719
7719: DISABLE
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
7729: PPUSH
// begin areas := [ southSpawn , southWestSpawn ] ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_INT 11
7737: PUSH
7738: LD_INT 12
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// time := [ 4 4$00 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
7745: LD_ADDR_VAR 0 3
7749: PUSH
7750: LD_INT 8400
7752: PUSH
7753: LD_INT 7350
7755: PUSH
7756: LD_INT 6650
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_OWVAR 67
7768: ARRAY
7769: ST_TO_ADDR
// xy := [ 60 , 96 ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 60
7777: PUSH
7778: LD_INT 96
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// repeat if missionStage = 2 then
7785: LD_EXP 15
7789: PUSH
7790: LD_INT 2
7792: EQUAL
7793: IFFALSE 7804
// wait ( 1 1$30 ) else
7795: LD_INT 3150
7797: PPUSH
7798: CALL_OW 67
7802: GO 7813
// wait ( time ) ;
7804: LD_VAR 0 3
7808: PPUSH
7809: CALL_OW 67
// if missionStage = 6 then
7813: LD_EXP 15
7817: PUSH
7818: LD_INT 6
7820: EQUAL
7821: IFFALSE 7849
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
7823: LD_INT 51
7825: PPUSH
7826: LD_INT 6
7828: PPUSH
7829: LD_INT 2
7831: PPUSH
7832: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
7836: LD_INT 57
7838: PPUSH
7839: LD_INT 6
7841: PPUSH
7842: LD_INT 2
7844: PPUSH
7845: CALL_OW 322
// end ; if missionStage = 8 then
7849: LD_EXP 15
7853: PUSH
7854: LD_INT 8
7856: EQUAL
7857: IFFALSE 7885
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
7859: LD_INT 52
7861: PPUSH
7862: LD_INT 6
7864: PPUSH
7865: LD_INT 2
7867: PPUSH
7868: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
7872: LD_INT 58
7874: PPUSH
7875: LD_INT 6
7877: PPUSH
7878: LD_INT 2
7880: PPUSH
7881: CALL_OW 322
// end ; if missionStage = 10 then
7885: LD_EXP 15
7889: PUSH
7890: LD_INT 10
7892: EQUAL
7893: IFFALSE 7921
// begin SetTech ( tech_weap3 , 6 , state_researched ) ;
7895: LD_INT 53
7897: PPUSH
7898: LD_INT 6
7900: PPUSH
7901: LD_INT 2
7903: PPUSH
7904: CALL_OW 322
// SetTech ( tech_comp3 , 6 , state_researched ) ;
7908: LD_INT 59
7910: PPUSH
7911: LD_INT 6
7913: PPUSH
7914: LD_INT 2
7916: PPUSH
7917: CALL_OW 322
// end ; if activeAttacks then
7921: LD_EXP 16
7925: IFFALSE 8398
// begin if missionStage = 2 then
7927: LD_EXP 15
7931: PUSH
7932: LD_INT 2
7934: EQUAL
7935: IFFALSE 7945
// strength := 1 ;
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if missionStage > 2 then
7945: LD_EXP 15
7949: PUSH
7950: LD_INT 2
7952: GREATER
7953: IFFALSE 7963
// strength := 2 ;
7955: LD_ADDR_VAR 0 5
7959: PUSH
7960: LD_INT 2
7962: ST_TO_ADDR
// if missionStage > 6 then
7963: LD_EXP 15
7967: PUSH
7968: LD_INT 6
7970: GREATER
7971: IFFALSE 7981
// strength := 3 ;
7973: LD_ADDR_VAR 0 5
7977: PUSH
7978: LD_INT 3
7980: ST_TO_ADDR
// if missionStage > 10 then
7981: LD_EXP 15
7985: PUSH
7986: LD_INT 10
7988: GREATER
7989: IFFALSE 7999
// strength := 4 ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_INT 4
7998: ST_TO_ADDR
// tmp := PrepareRussianAttack ( strength ) ;
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_VAR 0 5
8008: PPUSH
8009: CALL 6748 0 1
8013: ST_TO_ADDR
// for i in tmp do
8014: LD_ADDR_VAR 0 1
8018: PUSH
8019: LD_VAR 0 2
8023: PUSH
8024: FOR_IN
8025: IFFALSE 8125
// begin PlaceUnitArea ( i , areas [ rand ( 1 , 2 ) ] , false ) ;
8027: LD_VAR 0 1
8031: PPUSH
8032: LD_VAR 0 4
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 2
8042: PPUSH
8043: CALL_OW 12
8047: ARRAY
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// if i = sewiVeh then
8056: LD_VAR 0 1
8060: PUSH
8061: LD_EXP 68
8065: EQUAL
8066: IFFALSE 8101
// begin Vsevolod = PrepareUnit ( Vsevolod , false ,  ) ;
8068: LD_ADDR_EXP 67
8072: PUSH
8073: LD_STRING Vsevolod
8075: PPUSH
8076: LD_INT 0
8078: PPUSH
8079: LD_STRING 
8081: PPUSH
8082: CALL 59308 0 3
8086: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , i ) ;
8087: LD_EXP 67
8091: PPUSH
8092: LD_VAR 0 1
8096: PPUSH
8097: CALL_OW 52
// end ; ComMoveXY ( i , 111 , 197 ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_INT 111
8108: PPUSH
8109: LD_INT 197
8111: PPUSH
8112: CALL_OW 111
// wait ( 0 0$2 ) ;
8116: LD_INT 70
8118: PPUSH
8119: CALL_OW 67
// end ;
8123: GO 8024
8125: POP
8126: POP
// repeat wait ( 0 0$1 ) ;
8127: LD_INT 35
8129: PPUSH
8130: CALL_OW 67
// for i in tmp do
8134: LD_ADDR_VAR 0 1
8138: PUSH
8139: LD_VAR 0 2
8143: PUSH
8144: FOR_IN
8145: IFFALSE 8379
// begin x := GetX ( i ) ;
8147: LD_ADDR_VAR 0 7
8151: PUSH
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 250
8161: ST_TO_ADDR
// y := GetY ( i ) ;
8162: LD_ADDR_VAR 0 8
8166: PUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 251
8176: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , x , y , 12 ] ] ) then
8177: LD_INT 81
8179: PUSH
8180: LD_INT 6
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 92
8189: PUSH
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 8
8199: PUSH
8200: LD_INT 12
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 69
8217: IFFALSE 8281
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , x , y , 12 ] ] ) , i ) ) else
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 81
8226: PUSH
8227: LD_INT 6
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 92
8236: PUSH
8237: LD_VAR 0 7
8241: PUSH
8242: LD_VAR 0 8
8246: PUSH
8247: LD_INT 12
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PPUSH
8260: CALL_OW 69
8264: PPUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 74
8274: PPUSH
8275: CALL_OW 115
8279: GO 8377
// if GetDistUnitXY ( i , xy [ 1 ] , xy [ 2 ] ) > 10 then
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 6
8290: PUSH
8291: LD_INT 1
8293: ARRAY
8294: PPUSH
8295: LD_VAR 0 6
8299: PUSH
8300: LD_INT 2
8302: ARRAY
8303: PPUSH
8304: CALL_OW 297
8308: PUSH
8309: LD_INT 10
8311: GREATER
8312: IFFALSE 8343
// ComAgressiveMove ( i , xy [ 1 ] , xy [ 2 ] ) else
8314: LD_VAR 0 1
8318: PPUSH
8319: LD_VAR 0 6
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: LD_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: ARRAY
8336: PPUSH
8337: CALL_OW 114
8341: GO 8377
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: LD_INT 81
8350: PUSH
8351: LD_INT 6
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PPUSH
8358: CALL_OW 69
8362: PPUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: CALL_OW 74
8372: PPUSH
8373: CALL_OW 115
// end ;
8377: GO 8144
8379: POP
8380: POP
// until not FilterAllUnits ( [ f_side , 6 ] ) ;
8381: LD_INT 22
8383: PUSH
8384: LD_INT 6
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 69
8395: NOT
8396: IFFALSE 8127
// end ; until russianDestroyed ;
8398: LD_EXP 21
8402: IFFALSE 7785
// end ;
8404: PPOPN 8
8406: END
// every 7 7$30 trigger not russianDestroyed and missionStage >= 8 do var i , tmp , target , teleport ;
8407: LD_EXP 21
8411: NOT
8412: PUSH
8413: LD_EXP 15
8417: PUSH
8418: LD_INT 8
8420: GREATEREQUAL
8421: AND
8422: IFFALSE 9233
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
8431: PPUSH
8432: PPUSH
// begin enable ;
8433: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) then
8434: LD_INT 22
8436: PUSH
8437: LD_INT 3
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 23
8446: PUSH
8447: LD_INT 3
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 30
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: PPUSH
8469: CALL_OW 69
8473: NOT
8474: IFFALSE 8478
// exit ;
8476: GO 9233
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
8478: LD_ADDR_VAR 0 4
8482: PUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 3
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 34
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: ST_TO_ADDR
// if Prob ( 40 ) then
8512: LD_INT 40
8514: PPUSH
8515: CALL_OW 13
8519: IFFALSE 8646
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
8521: LD_INT 2
8523: PPUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 3
8529: PUSH
8530: LD_INT 3
8532: PUSH
8533: LD_INT 49
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 22
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: LD_INT 3
8550: PUSH
8551: LD_INT 49
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 49
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 24
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: LD_INT 46
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 24
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: LD_INT 3
8604: PUSH
8605: LD_INT 46
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: LD_INT 3
8622: PUSH
8623: LD_INT 46
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL 53413 0 2
// end else
8644: GO 8769
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
8646: LD_INT 2
8648: PPUSH
8649: LD_INT 24
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 47
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 24
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 3
8675: PUSH
8676: LD_INT 47
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 24
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 47
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: LD_INT 3
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: LD_INT 46
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 3
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: LD_INT 46
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 24
8741: PUSH
8742: LD_INT 3
8744: PUSH
8745: LD_INT 3
8747: PUSH
8748: LD_INT 46
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: PPUSH
8765: CALL 53413 0 2
// end ; if Difficulty > 1 then
8769: LD_OWVAR 67
8773: PUSH
8774: LD_INT 1
8776: GREATER
8777: IFFALSE 8807
// MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
8779: LD_INT 2
8781: PPUSH
8782: LD_INT 24
8784: PUSH
8785: LD_INT 3
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 47
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: PPUSH
8803: CALL 53413 0 2
// repeat wait ( 0 0$1 ) ;
8807: LD_INT 35
8809: PPUSH
8810: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: CALL 54826 0 2
8824: PUSH
8825: LD_INT 6
8827: PUSH
8828: LD_INT 7
8830: PUSH
8831: LD_INT 7
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PUSH
8839: LD_OWVAR 67
8843: ARRAY
8844: GREATEREQUAL
8845: IFFALSE 8807
// tmp := MC_GetVehicles ( 2 , true ) ;
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: CALL 54826 0 2
8862: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
8863: LD_ADDR_EXP 118
8867: PUSH
8868: LD_EXP 118
8872: PPUSH
8873: LD_INT 2
8875: PPUSH
8876: LD_EXP 118
8880: PUSH
8881: LD_INT 2
8883: ARRAY
8884: PUSH
8885: LD_VAR 0 2
8889: DIFF
8890: PPUSH
8891: CALL_OW 1
8895: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
8896: LD_ADDR_VAR 0 3
8900: PUSH
8901: LD_INT 0
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: CALL_OW 12
8911: ST_TO_ADDR
// if target then
8912: LD_VAR 0 3
8916: IFFALSE 8975
// begin repeat ComMoveXY ( tmp , 139 , 89 ) ;
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 139
8925: PPUSH
8926: LD_INT 89
8928: PPUSH
8929: CALL_OW 111
// wait ( 0 0$1 ) ;
8933: LD_INT 35
8935: PPUSH
8936: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 6 ] ) > 3 ;
8940: LD_VAR 0 2
8944: PPUSH
8945: LD_INT 92
8947: PUSH
8948: LD_INT 139
8950: PUSH
8951: LD_INT 89
8953: PUSH
8954: LD_INT 6
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PPUSH
8963: CALL_OW 72
8967: PUSH
8968: LD_INT 3
8970: GREATER
8971: IFFALSE 8918
// end else
8973: GO 9048
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
8975: LD_VAR 0 2
8979: PPUSH
8980: LD_VAR 0 4
8984: PUSH
8985: LD_INT 1
8987: ARRAY
8988: PPUSH
8989: CALL_OW 120
// repeat AddComMoveXY ( tmp , 124 , 139 ) ;
8993: LD_VAR 0 2
8997: PPUSH
8998: LD_INT 124
9000: PPUSH
9001: LD_INT 139
9003: PPUSH
9004: CALL_OW 171
// wait ( 0 0$1 ) ;
9008: LD_INT 35
9010: PPUSH
9011: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 6 ] ) > 5 ;
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_INT 92
9022: PUSH
9023: LD_INT 124
9025: PUSH
9026: LD_INT 139
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 72
9042: PUSH
9043: LD_INT 5
9045: GREATER
9046: IFFALSE 8993
// end ; repeat wait ( 0 0$1 ) ;
9048: LD_INT 35
9050: PPUSH
9051: CALL_OW 67
// for i in tmp do
9055: LD_ADDR_VAR 0 1
9059: PUSH
9060: LD_VAR 0 2
9064: PUSH
9065: FOR_IN
9066: IFFALSE 9224
// if GetLives ( i ) > 251 then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 256
9077: PUSH
9078: LD_INT 251
9080: GREATER
9081: IFFALSE 9206
// begin if GetWeapon ( i ) = ru_time_lapser then
9083: LD_VAR 0 1
9087: PPUSH
9088: CALL_OW 264
9092: PUSH
9093: LD_INT 49
9095: EQUAL
9096: IFFALSE 9152
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) else
9098: LD_VAR 0 1
9102: PPUSH
9103: LD_INT 2
9105: PUSH
9106: LD_INT 22
9108: PUSH
9109: LD_INT 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_INT 8
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 74
9145: PPUSH
9146: CALL_OW 112
9150: GO 9204
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) ;
9152: LD_VAR 0 1
9156: PPUSH
9157: LD_INT 2
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 1
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 22
9172: PUSH
9173: LD_INT 8
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: PPUSH
9185: CALL_OW 69
9189: PPUSH
9190: LD_VAR 0 1
9194: PPUSH
9195: CALL_OW 74
9199: PPUSH
9200: CALL_OW 115
// end else
9204: GO 9222
// tmp := tmp diff i ;
9206: LD_ADDR_VAR 0 2
9210: PUSH
9211: LD_VAR 0 2
9215: PUSH
9216: LD_VAR 0 1
9220: DIFF
9221: ST_TO_ADDR
9222: GO 9065
9224: POP
9225: POP
// until not tmp ;
9226: LD_VAR 0 2
9230: NOT
9231: IFFALSE 9048
// end ; end_of_file
9233: PPOPN 4
9235: END
// export Roth , Simms , Kirilenkova , Dolgov , Petrosyan , Petrovova , Kuzmov , Lipshchin , Gnyevko , Titov , Xavier , Belkov , Burlak , Karamazov , Kapitsova , Scholtze , Oblukov ; export allianceSpecialForce ; export function PrepareAlliance ; var i , tmp , base , side , teleport ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// side := 7 ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: LD_INT 7
9251: ST_TO_ADDR
// uc_side := side ;
9252: LD_ADDR_OWVAR 20
9256: PUSH
9257: LD_VAR 0 5
9261: ST_TO_ADDR
// uc_nation := 1 ;
9262: LD_ADDR_OWVAR 21
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
9270: LD_ADDR_VAR 0 2
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 5
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 3
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PPUSH
9301: CALL_OW 69
9305: PUSH
9306: FOR_IN
9307: IFFALSE 9323
// SetBLevel ( i , 10 ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 10
9316: PPUSH
9317: CALL_OW 241
9321: GO 9306
9323: POP
9324: POP
// base := GetBase ( al_depot ) ;
9325: LD_ADDR_VAR 0 4
9329: PUSH
9330: LD_INT 2
9332: PPUSH
9333: CALL_OW 274
9337: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
9338: LD_ADDR_VAR 0 6
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_VAR 0 5
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 34
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 69
9373: ST_TO_ADDR
// if teleport then
9374: LD_VAR 0 6
9378: IFFALSE 9399
// TeleportExit ( teleport [ 1 ] , 262 , 119 ) ;
9380: LD_VAR 0 6
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: LD_INT 262
9391: PPUSH
9392: LD_INT 119
9394: PPUSH
9395: CALL_OW 243
// SetResourceType ( base , mat_cans , 3500 ) ;
9399: LD_VAR 0 4
9403: PPUSH
9404: LD_INT 1
9406: PPUSH
9407: LD_INT 3500
9409: PPUSH
9410: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
9414: LD_VAR 0 4
9418: PPUSH
9419: LD_INT 2
9421: PPUSH
9422: LD_INT 200
9424: PPUSH
9425: CALL_OW 277
// SetResourceType ( base , mat_siberit , 50 ) ;
9429: LD_VAR 0 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: LD_INT 50
9439: PPUSH
9440: CALL_OW 277
// Roth := NewCharacter ( Roth ) ;
9444: LD_ADDR_EXP 71
9448: PUSH
9449: LD_STRING Roth
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
9457: LD_ADDR_EXP 72
9461: PUSH
9462: LD_STRING Simms
9464: PPUSH
9465: LD_EXP 1
9469: NOT
9470: PPUSH
9471: LD_STRING 10c_
9473: PPUSH
9474: CALL 59308 0 3
9478: ST_TO_ADDR
// if not Simms then
9479: LD_EXP 72
9483: NOT
9484: IFFALSE 9514
// begin uc_nation := 1 ;
9486: LD_ADDR_OWVAR 21
9490: PUSH
9491: LD_INT 1
9493: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
9494: LD_INT 2
9496: PPUSH
9497: LD_INT 10
9499: PPUSH
9500: CALL_OW 384
// Simms := CreateHuman ;
9504: LD_ADDR_EXP 72
9508: PUSH
9509: CALL_OW 44
9513: ST_TO_ADDR
// end ; uc_nation := 3 ;
9514: LD_ADDR_OWVAR 21
9518: PUSH
9519: LD_INT 3
9521: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
9522: LD_ADDR_EXP 73
9526: PUSH
9527: LD_STRING Kirilenkova
9529: PPUSH
9530: CALL_OW 25
9534: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
9535: LD_ADDR_EXP 87
9539: PUSH
9540: LD_STRING Oblukov
9542: PPUSH
9543: CALL_OW 25
9547: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
9548: LD_ADDR_EXP 74
9552: PUSH
9553: LD_STRING Dolgov
9555: PPUSH
9556: CALL_OW 25
9560: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
9561: LD_ADDR_EXP 75
9565: PUSH
9566: LD_STRING Petrosyan
9568: PPUSH
9569: CALL_OW 25
9573: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
9574: LD_ADDR_EXP 86
9578: PUSH
9579: LD_STRING Scholtze
9581: PPUSH
9582: CALL_OW 25
9586: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
9587: LD_ADDR_EXP 85
9591: PUSH
9592: LD_STRING Kapitsova
9594: PPUSH
9595: CALL_OW 25
9599: ST_TO_ADDR
// Petrovova := NewCharacter ( Petrovova ) ;
9600: LD_ADDR_EXP 76
9604: PUSH
9605: LD_STRING Petrovova
9607: PPUSH
9608: CALL_OW 25
9612: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
9613: LD_ADDR_EXP 77
9617: PUSH
9618: LD_STRING Kuzmov
9620: PPUSH
9621: CALL_OW 25
9625: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
9626: LD_ADDR_EXP 84
9630: PUSH
9631: LD_STRING Karamazov
9633: PPUSH
9634: CALL_OW 25
9638: ST_TO_ADDR
// if LoadVariable ( 13_Lipshchin_1 , 0 ) then
9639: LD_STRING 13_Lipshchin_1
9641: PPUSH
9642: LD_INT 0
9644: PPUSH
9645: CALL_OW 30
9649: IFFALSE 9664
// Lipshchin := NewCharacter ( Lipshchin ) ;
9651: LD_ADDR_EXP 78
9655: PUSH
9656: LD_STRING Lipshchin
9658: PPUSH
9659: CALL_OW 25
9663: ST_TO_ADDR
// if LoadVariable ( 13_Titov_1 , 0 ) then
9664: LD_STRING 13_Titov_1
9666: PPUSH
9667: LD_INT 0
9669: PPUSH
9670: CALL_OW 30
9674: IFFALSE 9689
// Titov := NewCharacter ( Titov ) ;
9676: LD_ADDR_EXP 80
9680: PUSH
9681: LD_STRING Titov
9683: PPUSH
9684: CALL_OW 25
9688: ST_TO_ADDR
// if LoadVariable ( 13_Gnyevko_1 , 0 ) then
9689: LD_STRING 13_Gnyevko_1
9691: PPUSH
9692: LD_INT 0
9694: PPUSH
9695: CALL_OW 30
9699: IFFALSE 9714
// Gnyevko := NewCharacter ( Gnyevko ) ;
9701: LD_ADDR_EXP 79
9705: PUSH
9706: LD_STRING Gnyevko
9708: PPUSH
9709: CALL_OW 25
9713: ST_TO_ADDR
// if LoadVariable ( 13_Xavier_1 , 0 ) then
9714: LD_STRING 13_Xavier_1
9716: PPUSH
9717: LD_INT 0
9719: PPUSH
9720: CALL_OW 30
9724: IFFALSE 9739
// Xavier := NewCharacter ( Xavier2 ) ;
9726: LD_ADDR_EXP 81
9730: PUSH
9731: LD_STRING Xavier2
9733: PPUSH
9734: CALL_OW 25
9738: ST_TO_ADDR
// if LoadVariable ( 13_Belkov_1 , 0 ) then
9739: LD_STRING 13_Belkov_1
9741: PPUSH
9742: LD_INT 0
9744: PPUSH
9745: CALL_OW 30
9749: IFFALSE 9764
// Belkov := NewCharacter ( Belkov ) ;
9751: LD_ADDR_EXP 82
9755: PUSH
9756: LD_STRING Belkov
9758: PPUSH
9759: CALL_OW 25
9763: ST_TO_ADDR
// if not BurlakStatus then
9764: LD_EXP 9
9768: NOT
9769: IFFALSE 9784
// Burlak = NewCharacter ( Burlak ) ;
9771: LD_ADDR_EXP 83
9775: PUSH
9776: LD_STRING Burlak
9778: PPUSH
9779: CALL_OW 25
9783: ST_TO_ADDR
// tmp := [ Roth , Kirilenkova , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova , Petrovova , Kuzmov , Karamazov ] ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_EXP 71
9793: PUSH
9794: LD_EXP 73
9798: PUSH
9799: LD_EXP 87
9803: PUSH
9804: LD_EXP 74
9808: PUSH
9809: LD_EXP 75
9813: PUSH
9814: LD_EXP 86
9818: PUSH
9819: LD_EXP 85
9823: PUSH
9824: LD_EXP 76
9828: PUSH
9829: LD_EXP 77
9833: PUSH
9834: LD_EXP 84
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// if Simms then
9851: LD_EXP 72
9855: IFFALSE 9873
// tmp := tmp ^ Simms ;
9857: LD_ADDR_VAR 0 3
9861: PUSH
9862: LD_VAR 0 3
9866: PUSH
9867: LD_EXP 72
9871: ADD
9872: ST_TO_ADDR
// if Titov then
9873: LD_EXP 80
9877: IFFALSE 9895
// tmp := tmp ^ Titov ;
9879: LD_ADDR_VAR 0 3
9883: PUSH
9884: LD_VAR 0 3
9888: PUSH
9889: LD_EXP 80
9893: ADD
9894: ST_TO_ADDR
// if Lipshchin then
9895: LD_EXP 78
9899: IFFALSE 9917
// tmp := tmp ^ Lipshchin ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_VAR 0 3
9910: PUSH
9911: LD_EXP 78
9915: ADD
9916: ST_TO_ADDR
// if Gnyevko then
9917: LD_EXP 79
9921: IFFALSE 9939
// tmp := tmp ^ Gnyevko ;
9923: LD_ADDR_VAR 0 3
9927: PUSH
9928: LD_VAR 0 3
9932: PUSH
9933: LD_EXP 79
9937: ADD
9938: ST_TO_ADDR
// if Xavier then
9939: LD_EXP 81
9943: IFFALSE 9961
// tmp := tmp ^ Xavier ;
9945: LD_ADDR_VAR 0 3
9949: PUSH
9950: LD_VAR 0 3
9954: PUSH
9955: LD_EXP 81
9959: ADD
9960: ST_TO_ADDR
// if Belkov then
9961: LD_EXP 82
9965: IFFALSE 9983
// tmp := tmp ^ Belkov ;
9967: LD_ADDR_VAR 0 3
9971: PUSH
9972: LD_VAR 0 3
9976: PUSH
9977: LD_EXP 82
9981: ADD
9982: ST_TO_ADDR
// if Burlak then
9983: LD_EXP 83
9987: IFFALSE 10005
// tmp := tmp ^ Burlak ;
9989: LD_ADDR_VAR 0 3
9993: PUSH
9994: LD_VAR 0 3
9998: PUSH
9999: LD_EXP 83
10003: ADD
10004: ST_TO_ADDR
// for i = 1 to 8 do
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: DOUBLE
10011: LD_INT 1
10013: DEC
10014: ST_TO_ADDR
10015: LD_INT 8
10017: PUSH
10018: FOR_TO
10019: IFFALSE 10085
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
10021: LD_ADDR_OWVAR 21
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 1
10038: PPUSH
10039: LD_INT 2
10041: PPUSH
10042: CALL_OW 12
10046: ARRAY
10047: ST_TO_ADDR
// PrepareHuman ( false , i div 2 , 10 ) ;
10048: LD_INT 0
10050: PPUSH
10051: LD_VAR 0 2
10055: PUSH
10056: LD_INT 2
10058: DIV
10059: PPUSH
10060: LD_INT 10
10062: PPUSH
10063: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
10067: LD_ADDR_VAR 0 3
10071: PUSH
10072: LD_VAR 0 3
10076: PUSH
10077: CALL_OW 44
10081: ADD
10082: ST_TO_ADDR
// end ;
10083: GO 10018
10085: POP
10086: POP
// for i in tmp do
10087: LD_ADDR_VAR 0 2
10091: PUSH
10092: LD_VAR 0 3
10096: PUSH
10097: FOR_IN
10098: IFFALSE 10123
// PlaceUnitXYR ( i , 260 , 235 , 8 , false ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 260
10107: PPUSH
10108: LD_INT 235
10110: PPUSH
10111: LD_INT 8
10113: PPUSH
10114: LD_INT 0
10116: PPUSH
10117: CALL_OW 50
10121: GO 10097
10123: POP
10124: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff [ Roth , Simms ] ) ;
10125: LD_ADDR_EXP 99
10129: PUSH
10130: LD_EXP 99
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: LD_INT 22
10140: PUSH
10141: LD_VAR 0 5
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 3
10152: PUSH
10153: LD_INT 21
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PUSH
10176: LD_EXP 71
10180: PUSH
10181: LD_EXP 72
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: DIFF
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
// uc_side := 0 ;
10196: LD_ADDR_OWVAR 20
10200: PUSH
10201: LD_INT 0
10203: ST_TO_ADDR
// uc_nation := 0 ;
10204: LD_ADDR_OWVAR 21
10208: PUSH
10209: LD_INT 0
10211: ST_TO_ADDR
// for i = 1 to 5 do
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: DOUBLE
10218: LD_INT 1
10220: DEC
10221: ST_TO_ADDR
10222: LD_INT 5
10224: PUSH
10225: FOR_TO
10226: IFFALSE 10263
// begin InitHc ;
10228: CALL_OW 19
// hc_class := class_apeman ;
10232: LD_ADDR_OWVAR 28
10236: PUSH
10237: LD_INT 12
10239: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 299 , 229 , 10 , false ) ;
10240: CALL_OW 44
10244: PPUSH
10245: LD_INT 299
10247: PPUSH
10248: LD_INT 229
10250: PPUSH
10251: LD_INT 10
10253: PPUSH
10254: LD_INT 0
10256: PPUSH
10257: CALL_OW 50
// end ;
10261: GO 10225
10263: POP
10264: POP
// ComMoveXY ( Roth , 259 , 235 ) ;
10265: LD_EXP 71
10269: PPUSH
10270: LD_INT 259
10272: PPUSH
10273: LD_INT 235
10275: PPUSH
10276: CALL_OW 111
// AddComTurnXY ( Roth , 262 , 235 ) ;
10280: LD_EXP 71
10284: PPUSH
10285: LD_INT 262
10287: PPUSH
10288: LD_INT 235
10290: PPUSH
10291: CALL_OW 178
// if Simms then
10295: LD_EXP 72
10299: IFFALSE 10330
// begin ComMoveXY ( Simms , 262 , 235 ) ;
10301: LD_EXP 72
10305: PPUSH
10306: LD_INT 262
10308: PPUSH
10309: LD_INT 235
10311: PPUSH
10312: CALL_OW 111
// AddComTurnUnit ( Simms , Roth ) ;
10316: LD_EXP 72
10320: PPUSH
10321: LD_EXP 71
10325: PPUSH
10326: CALL_OW 179
// end ; end ;
10330: LD_VAR 0 1
10334: RET
// every 4 4$00 trigger allianceActive and not allianceDestroyed do var i , tmp ;
10335: LD_EXP 31
10339: PUSH
10340: LD_EXP 23
10344: NOT
10345: AND
10346: IFFALSE 10487
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
// begin enable ;
10355: ENABLE
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_weapon , us_siberium_rocket ] ] ] ) ;
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_INT 81
10363: PUSH
10364: LD_INT 7
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 32
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 30
10386: PUSH
10387: LD_INT 30
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 30
10396: PUSH
10397: LD_INT 28
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 34
10406: PUSH
10407: LD_INT 49
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 34
10416: PUSH
10417: LD_INT 10
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 34
10426: PUSH
10427: LD_INT 8
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PPUSH
10447: CALL_OW 69
10451: ST_TO_ADDR
// if not tmp then
10452: LD_VAR 0 2
10456: NOT
10457: IFFALSE 10461
// exit ;
10459: GO 10487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 0 ) ;
10461: LD_VAR 0 2
10465: PUSH
10466: LD_INT 1
10468: PPUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 12
10478: ARRAY
10479: PPUSH
10480: LD_INT 0
10482: PPUSH
10483: CALL_OW 234
// end ;
10487: PPOPN 2
10489: END
// every 0 0$2 trigger not allianceDestroyed and allianceActive do var i , un , tmp ;
10490: LD_EXP 23
10494: NOT
10495: PUSH
10496: LD_EXP 31
10500: AND
10501: IFFALSE 11055
10503: GO 10505
10505: DISABLE
10506: LD_INT 0
10508: PPUSH
10509: PPUSH
10510: PPUSH
// begin uc_side := 7 ;
10511: LD_ADDR_OWVAR 20
10515: PUSH
10516: LD_INT 7
10518: ST_TO_ADDR
// uc_nation := 1 ;
10519: LD_ADDR_OWVAR 21
10523: PUSH
10524: LD_INT 1
10526: ST_TO_ADDR
// tmp := Shuffle ( [ [ 125 , 163 ] , [ 185 , 168 ] , [ 111 , 97 ] ] ) ;
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: LD_INT 125
10534: PUSH
10535: LD_INT 163
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 185
10544: PUSH
10545: LD_INT 168
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 111
10554: PUSH
10555: LD_INT 97
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL 101716 0 1
10571: ST_TO_ADDR
// allianceSpecialForce := [ ] ;
10572: LD_ADDR_EXP 88
10576: PUSH
10577: EMPTY
10578: ST_TO_ADDR
// for i = 1 to Difficulty do
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_OWVAR 67
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10753
// begin InitHc ;
10597: CALL_OW 19
// PrepareSoldier ( false , 8 ) ;
10601: LD_INT 0
10603: PPUSH
10604: LD_INT 8
10606: PPUSH
10607: CALL_OW 381
// un := CreateHuman ;
10611: LD_ADDR_VAR 0 2
10615: PUSH
10616: CALL_OW 44
10620: ST_TO_ADDR
// PlaceUnitXYR ( un , 258 , 267 , 4 , false ) ;
10621: LD_VAR 0 2
10625: PPUSH
10626: LD_INT 258
10628: PPUSH
10629: LD_INT 267
10631: PPUSH
10632: LD_INT 4
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 50
// allianceSpecialForce := allianceSpecialForce union un ;
10642: LD_ADDR_EXP 88
10646: PUSH
10647: LD_EXP 88
10651: PUSH
10652: LD_VAR 0 2
10656: UNION
10657: ST_TO_ADDR
// TeleportUnit ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 4 , true ) ;
10658: LD_VAR 0 2
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 1
10672: ARRAY
10673: PUSH
10674: LD_INT 1
10676: ARRAY
10677: PPUSH
10678: LD_VAR 0 3
10682: PUSH
10683: LD_VAR 0 1
10687: ARRAY
10688: PUSH
10689: LD_INT 2
10691: ARRAY
10692: PPUSH
10693: LD_INT 4
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 483
// AddComMoveXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10703: LD_VAR 0 2
10707: PPUSH
10708: LD_VAR 0 3
10712: PUSH
10713: LD_VAR 0 1
10717: ARRAY
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PPUSH
10723: LD_VAR 0 3
10727: PUSH
10728: LD_VAR 0 1
10732: ARRAY
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: PPUSH
10738: CALL_OW 171
// AddComInvisible ( un ) ;
10742: LD_VAR 0 2
10746: PPUSH
10747: CALL_OW 212
// end ;
10751: GO 10594
10753: POP
10754: POP
// repeat wait ( 0 0$20 ) ;
10755: LD_INT 700
10757: PPUSH
10758: CALL_OW 67
// for i in allianceSpecialForce do
10762: LD_ADDR_VAR 0 1
10766: PUSH
10767: LD_EXP 88
10771: PUSH
10772: FOR_IN
10773: IFFALSE 11040
// begin if IsInvisible ( i ) then
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 571
10784: IFFALSE 11009
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_driving ] ] , [ f_dist , i , [ 25 , 30 , 35 ] [ Difficulty ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
10786: LD_ADDR_VAR 0 3
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 50
10803: PUSH
10804: EMPTY
10805: LIST
10806: PUSH
10807: LD_INT 3
10809: PUSH
10810: LD_INT 55
10812: PUSH
10813: EMPTY
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 91
10822: PUSH
10823: LD_VAR 0 1
10827: PUSH
10828: LD_INT 25
10830: PUSH
10831: LD_INT 30
10833: PUSH
10834: LD_INT 35
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: LD_OWVAR 67
10846: ARRAY
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 25
10858: PUSH
10859: LD_INT 1
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 25
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 25
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 4
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 5
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 8
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 69
10936: ST_TO_ADDR
// display_strings := [ tick , i , tmp ] ;
10937: LD_ADDR_OWVAR 47
10941: PUSH
10942: LD_OWVAR 1
10946: PUSH
10947: LD_VAR 0 1
10951: PUSH
10952: LD_VAR 0 3
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: ST_TO_ADDR
// if not tmp then
10962: LD_VAR 0 3
10966: NOT
10967: IFFALSE 10971
// continue ;
10969: GO 10772
// if Prob ( 30 * Difficulty ) then
10971: LD_INT 30
10973: PUSH
10974: LD_OWVAR 67
10978: MUL
10979: PPUSH
10980: CALL_OW 13
10984: IFFALSE 11009
// AllianceCaptureUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
10986: LD_VAR 0 3
10990: PUSH
10991: LD_INT 1
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: CALL_OW 12
11003: ARRAY
11004: PPUSH
11005: CALL 27936 0 1
// end ; if IsDead ( i ) then
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 301
11018: IFFALSE 11038
// begin allianceSpecialForce := allianceSpecialForce diff i ;
11020: LD_ADDR_EXP 88
11024: PUSH
11025: LD_EXP 88
11029: PUSH
11030: LD_VAR 0 1
11034: DIFF
11035: ST_TO_ADDR
// continue ;
11036: GO 10772
// end ; end ;
11038: GO 10772
11040: POP
11041: POP
// until allianceDestroyed or not allianceSpecialForce ;
11042: LD_EXP 23
11046: PUSH
11047: LD_EXP 88
11051: NOT
11052: OR
11053: IFFALSE 10755
// end ;
11055: PPOPN 3
11057: END
// every 11 11$30 trigger not allianceDestroyed and allianceActive do var i , tmp , target , teleport ;
11058: LD_EXP 23
11062: NOT
11063: PUSH
11064: LD_EXP 31
11068: AND
11069: IFFALSE 11891
11071: GO 11073
11073: DISABLE
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
// begin enable ;
11080: ENABLE
// if not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) then
11081: LD_INT 22
11083: PUSH
11084: LD_INT 7
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 30
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: NOT
11110: IFFALSE 11114
// exit ;
11112: GO 11891
// teleport := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_teleport ] ] ) ;
11114: LD_ADDR_VAR 0 4
11118: PUSH
11119: LD_INT 22
11121: PUSH
11122: LD_INT 7
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 30
11131: PUSH
11132: LD_INT 34
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 69
11147: ST_TO_ADDR
// if Prob ( 40 ) then
11148: LD_INT 40
11150: PPUSH
11151: CALL_OW 13
11155: IFFALSE 11282
// begin MC_InsertProduceList ( 1 , [ [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ) ;
11157: LD_INT 1
11159: PPUSH
11160: LD_INT 5
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 6
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 5
11180: PUSH
11181: LD_INT 3
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 6
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 5
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: LD_INT 2
11204: PUSH
11205: LD_INT 6
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 24
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 45
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 24
11234: PUSH
11235: LD_INT 3
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: LD_INT 47
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 24
11252: PUSH
11253: LD_INT 3
11255: PUSH
11256: LD_INT 3
11258: PUSH
11259: LD_INT 45
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL 53413 0 2
// end else
11280: GO 11405
// begin MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , ] ) ;
11282: LD_INT 1
11284: PPUSH
11285: LD_INT 24
11287: PUSH
11288: LD_INT 3
11290: PUSH
11291: LD_INT 3
11293: PUSH
11294: LD_INT 47
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 24
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: LD_INT 47
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 24
11323: PUSH
11324: LD_INT 1
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: LD_INT 45
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 24
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: LD_INT 3
11347: PUSH
11348: LD_INT 45
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 24
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: LD_INT 45
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 24
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: LD_INT 3
11383: PUSH
11384: LD_INT 45
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL 53413 0 2
// end ; if Difficulty > 1 then
11405: LD_OWVAR 67
11409: PUSH
11410: LD_INT 1
11412: GREATER
11413: IFFALSE 11443
// MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
11415: LD_INT 1
11417: PPUSH
11418: LD_INT 24
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 3
11426: PUSH
11427: LD_INT 47
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: PPUSH
11439: CALL 53413 0 2
// repeat wait ( 0 0$1 ) ;
11443: LD_INT 35
11445: PPUSH
11446: CALL_OW 67
// until MC_GetVehicles ( 1 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
11450: LD_INT 1
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL 54826 0 2
11460: PUSH
11461: LD_INT 6
11463: PUSH
11464: LD_INT 7
11466: PUSH
11467: LD_INT 7
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: LD_OWVAR 67
11479: ARRAY
11480: GREATEREQUAL
11481: IFFALSE 11443
// tmp := MC_GetVehicles ( 1 , true ) ;
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_INT 1
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL 54826 0 2
11498: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 1 , mc_vehicles [ 1 ] diff tmp ) ;
11499: LD_ADDR_EXP 118
11503: PUSH
11504: LD_EXP 118
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: LD_EXP 118
11516: PUSH
11517: LD_INT 1
11519: ARRAY
11520: PUSH
11521: LD_VAR 0 2
11525: DIFF
11526: PPUSH
11527: CALL_OW 1
11531: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_INT 0
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 12
11547: ST_TO_ADDR
// if target then
11548: LD_VAR 0 3
11552: IFFALSE 11649
// begin for i in tmp do
11554: LD_ADDR_VAR 0 1
11558: PUSH
11559: LD_VAR 0 2
11563: PUSH
11564: FOR_IN
11565: IFFALSE 11590
// TeleportUnit ( i , 179 , 209 , 8 , true ) ;
11567: LD_VAR 0 1
11571: PPUSH
11572: LD_INT 179
11574: PPUSH
11575: LD_INT 209
11577: PPUSH
11578: LD_INT 8
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 483
11588: GO 11564
11590: POP
11591: POP
// repeat AddComMoveXY ( tmp , 179 , 209 ) ;
11592: LD_VAR 0 2
11596: PPUSH
11597: LD_INT 179
11599: PPUSH
11600: LD_INT 209
11602: PPUSH
11603: CALL_OW 171
// wait ( 0 0$1 ) ;
11607: LD_INT 35
11609: PPUSH
11610: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 179 , 209 , 6 ] ) > 3 ;
11614: LD_VAR 0 2
11618: PPUSH
11619: LD_INT 92
11621: PUSH
11622: LD_INT 179
11624: PUSH
11625: LD_INT 209
11627: PUSH
11628: LD_INT 6
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 72
11641: PUSH
11642: LD_INT 3
11644: GREATER
11645: IFFALSE 11592
// end else
11647: GO 11742
// begin for i in tmp do
11649: LD_ADDR_VAR 0 1
11653: PUSH
11654: LD_VAR 0 2
11658: PUSH
11659: FOR_IN
11660: IFFALSE 11685
// TeleportUnit ( i , 285 , 163 , 8 , true ) ;
11662: LD_VAR 0 1
11666: PPUSH
11667: LD_INT 285
11669: PPUSH
11670: LD_INT 163
11672: PPUSH
11673: LD_INT 8
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 483
11683: GO 11659
11685: POP
11686: POP
// repeat AddComMoveXY ( tmp , 285 , 163 ) ;
11687: LD_VAR 0 2
11691: PPUSH
11692: LD_INT 285
11694: PPUSH
11695: LD_INT 163
11697: PPUSH
11698: CALL_OW 171
// wait ( 0 0$1 ) ;
11702: LD_INT 35
11704: PPUSH
11705: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 285 , 163 , 6 ] ) > 3 ;
11709: LD_VAR 0 2
11713: PPUSH
11714: LD_INT 92
11716: PUSH
11717: LD_INT 285
11719: PUSH
11720: LD_INT 163
11722: PUSH
11723: LD_INT 6
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 72
11736: PUSH
11737: LD_INT 3
11739: GREATER
11740: IFFALSE 11687
// end ; repeat wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// for i in tmp do
11749: LD_ADDR_VAR 0 1
11753: PUSH
11754: LD_VAR 0 2
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11882
// if GetLives ( i ) > 251 then
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 256
11771: PUSH
11772: LD_INT 251
11774: GREATER
11775: IFFALSE 11864
// begin if GetWeapon ( i ) = ru_time_lapser then
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 264
11786: PUSH
11787: LD_INT 49
11789: EQUAL
11790: IFFALSE 11828
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) else
11792: LD_VAR 0 1
11796: PPUSH
11797: LD_INT 81
11799: PUSH
11800: LD_INT 7
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 69
11811: PPUSH
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 74
11821: PPUSH
11822: CALL_OW 112
11826: GO 11862
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) ;
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_INT 81
11835: PUSH
11836: LD_INT 7
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 69
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 74
11857: PPUSH
11858: CALL_OW 115
// end else
11862: GO 11880
// tmp := tmp diff i ;
11864: LD_ADDR_VAR 0 2
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_VAR 0 1
11878: DIFF
11879: ST_TO_ADDR
11880: GO 11759
11882: POP
11883: POP
// until not tmp ;
11884: LD_VAR 0 2
11888: NOT
11889: IFFALSE 11742
// end ; end_of_file
11891: PPOPN 4
11893: END
// export Omar , Heike , Khatam ; export function PrepareOmarInvasion ; var i , veh , un ; begin
11894: LD_INT 0
11896: PPUSH
11897: PPUSH
11898: PPUSH
11899: PPUSH
// missionStage := 13 ;
11900: LD_ADDR_EXP 15
11904: PUSH
11905: LD_INT 13
11907: ST_TO_ADDR
// uc_side := 2 ;
11908: LD_ADDR_OWVAR 20
11912: PUSH
11913: LD_INT 2
11915: ST_TO_ADDR
// uc_nation := 2 ;
11916: LD_ADDR_OWVAR 21
11920: PUSH
11921: LD_INT 2
11923: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
11924: LD_ADDR_EXP 89
11928: PUSH
11929: LD_STRING Omar
11931: PPUSH
11932: CALL_OW 25
11936: ST_TO_ADDR
// SetDir ( Omar , 4 ) ;
11937: LD_EXP 89
11941: PPUSH
11942: LD_INT 4
11944: PPUSH
11945: CALL_OW 233
// PlaceUnitXY ( Omar , 242 , 75 , false ) ;
11949: LD_EXP 89
11953: PPUSH
11954: LD_INT 242
11956: PPUSH
11957: LD_INT 75
11959: PPUSH
11960: LD_INT 0
11962: PPUSH
11963: CALL_OW 48
// Heike := NewCharacter ( Heike ) ;
11967: LD_ADDR_EXP 90
11971: PUSH
11972: LD_STRING Heike
11974: PPUSH
11975: CALL_OW 25
11979: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
11980: LD_INT 14
11982: PPUSH
11983: LD_INT 3
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: LD_INT 27
11991: PPUSH
11992: LD_INT 100
11994: PPUSH
11995: CALL 65941 0 5
// veh := CreateVehicle ;
11999: LD_ADDR_VAR 0 3
12003: PUSH
12004: CALL_OW 45
12008: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 242
// SetDir ( veh , 4 ) ;
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 4
12028: PPUSH
12029: CALL_OW 233
// PlaceUnitXY ( veh , 241 , 72 , false ) ;
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 241
12040: PPUSH
12041: LD_INT 72
12043: PPUSH
12044: LD_INT 0
12046: PPUSH
12047: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
12051: LD_EXP 90
12055: PPUSH
12056: LD_VAR 0 3
12060: PPUSH
12061: CALL_OW 52
// if KhatamStatus then
12065: LD_EXP 8
12069: IFFALSE 12120
// begin Khatam := NewCharacter ( Khatam ) ;
12071: LD_ADDR_EXP 91
12075: PUSH
12076: LD_STRING Khatam
12078: PPUSH
12079: CALL_OW 25
12083: ST_TO_ADDR
// PlaceUnitXYR ( Khatam , 245 , 78 , 3 , false ) ;
12084: LD_EXP 91
12088: PPUSH
12089: LD_INT 245
12091: PPUSH
12092: LD_INT 78
12094: PPUSH
12095: LD_INT 3
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 50
// SetSkill ( Khatam , 4 , 10 ) ;
12105: LD_EXP 91
12109: PPUSH
12110: LD_INT 4
12112: PPUSH
12113: LD_INT 10
12115: PPUSH
12116: CALL_OW 237
// end ; for i = 1 to Difficulty do
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: DOUBLE
12126: LD_INT 1
12128: DEC
12129: ST_TO_ADDR
12130: LD_OWVAR 67
12134: PUSH
12135: FOR_TO
12136: IFFALSE 12200
// begin PrepareSoldier ( false , 7 + Difficulty ) ;
12138: LD_INT 0
12140: PPUSH
12141: LD_INT 7
12143: PUSH
12144: LD_OWVAR 67
12148: PLUS
12149: PPUSH
12150: CALL_OW 381
// un := CreateHuman ;
12154: LD_ADDR_VAR 0 4
12158: PUSH
12159: CALL_OW 44
12163: ST_TO_ADDR
// PlaceUnitArea ( un , [ arabianAttackArea , arabianAttackArea2 ] [ rand ( 1 , 2 ) ] , false ) ;
12164: LD_VAR 0 4
12168: PPUSH
12169: LD_INT 28
12171: PUSH
12172: LD_INT 29
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 1
12181: PPUSH
12182: LD_INT 2
12184: PPUSH
12185: CALL_OW 12
12189: ARRAY
12190: PPUSH
12191: LD_INT 0
12193: PPUSH
12194: CALL_OW 49
// end ;
12198: GO 12135
12200: POP
12201: POP
// for i = 1 to 4 do
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: DOUBLE
12208: LD_INT 1
12210: DEC
12211: ST_TO_ADDR
12212: LD_INT 4
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12261
// begin PrepareSoldier ( false , 7 + Difficulty ) ;
12218: LD_INT 0
12220: PPUSH
12221: LD_INT 7
12223: PUSH
12224: LD_OWVAR 67
12228: PLUS
12229: PPUSH
12230: CALL_OW 381
// un := CreateHuman ;
12234: LD_ADDR_VAR 0 4
12238: PUSH
12239: CALL_OW 44
12243: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea , false ) ;
12244: LD_VAR 0 4
12248: PPUSH
12249: LD_INT 28
12251: PPUSH
12252: LD_INT 0
12254: PPUSH
12255: CALL_OW 49
// end ;
12259: GO 12215
12261: POP
12262: POP
// for i = 1 to 3 do
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: DOUBLE
12269: LD_INT 1
12271: DEC
12272: ST_TO_ADDR
12273: LD_INT 3
12275: PUSH
12276: FOR_TO
12277: IFFALSE 12325
// begin PrepareHuman ( false , class_mortar , 7 + Difficulty ) ;
12279: LD_INT 0
12281: PPUSH
12282: LD_INT 8
12284: PPUSH
12285: LD_INT 7
12287: PUSH
12288: LD_OWVAR 67
12292: PLUS
12293: PPUSH
12294: CALL_OW 380
// un := CreateHuman ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: CALL_OW 44
12307: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea , false ) ;
12308: LD_VAR 0 4
12312: PPUSH
12313: LD_INT 28
12315: PPUSH
12316: LD_INT 0
12318: PPUSH
12319: CALL_OW 49
// end ;
12323: GO 12276
12325: POP
12326: POP
// for i = 1 to 3 do
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: DOUBLE
12333: LD_INT 1
12335: DEC
12336: ST_TO_ADDR
12337: LD_INT 3
12339: PUSH
12340: FOR_TO
12341: IFFALSE 12431
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_rocket_launcher , 80 ) ;
12343: LD_INT 14
12345: PPUSH
12346: LD_INT 2
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: LD_INT 28
12354: PPUSH
12355: LD_INT 80
12357: PPUSH
12358: CALL 65941 0 5
// veh := CreateVehicle ;
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: CALL_OW 45
12371: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 3
12379: PPUSH
12380: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 29
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: CALL_OW 49
// PrepareMechanic ( false , 7 + Difficulty ) ;
12399: LD_INT 0
12401: PPUSH
12402: LD_INT 7
12404: PUSH
12405: LD_OWVAR 67
12409: PLUS
12410: PPUSH
12411: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12415: CALL_OW 44
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: CALL_OW 52
// end ;
12429: GO 12340
12431: POP
12432: POP
// for i = 1 to 6 do
12433: LD_ADDR_VAR 0 2
12437: PUSH
12438: DOUBLE
12439: LD_INT 1
12441: DEC
12442: ST_TO_ADDR
12443: LD_INT 6
12445: PUSH
12446: FOR_TO
12447: IFFALSE 12574
// begin PrepareVehicle ( ar_half_tracked , rand ( 1 , 3 ) , control_manual , [ ar_rocket_launcher , ar_flame_thrower , ar_gun , ar_gatling_gun ] [ i mod 4 + 1 ] , 80 ) ;
12449: LD_INT 14
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 3
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_INT 28
12468: PUSH
12469: LD_INT 26
12471: PUSH
12472: LD_INT 27
12474: PUSH
12475: LD_INT 25
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: LD_VAR 0 2
12488: PUSH
12489: LD_INT 4
12491: MOD
12492: PUSH
12493: LD_INT 1
12495: PLUS
12496: ARRAY
12497: PPUSH
12498: LD_INT 80
12500: PPUSH
12501: CALL 65941 0 5
// veh := CreateVehicle ;
12505: LD_ADDR_VAR 0 3
12509: PUSH
12510: CALL_OW 45
12514: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 4
12522: PPUSH
12523: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 28
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 49
// PrepareMechanic ( false , 7 + Difficulty ) ;
12542: LD_INT 0
12544: PPUSH
12545: LD_INT 7
12547: PUSH
12548: LD_OWVAR 67
12552: PLUS
12553: PPUSH
12554: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12558: CALL_OW 44
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: CALL_OW 52
// end ;
12572: GO 12446
12574: POP
12575: POP
// for i = 1 to 3 do
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 3
12588: PUSH
12589: FOR_TO
12590: IFFALSE 12650
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12592: LD_INT 14
12594: PPUSH
12595: LD_INT 3
12597: PPUSH
12598: LD_INT 5
12600: PPUSH
12601: LD_INT 29
12603: PPUSH
12604: LD_INT 80
12606: PPUSH
12607: CALL 65941 0 5
// veh := CreateVehicle ;
12611: LD_ADDR_VAR 0 3
12615: PUSH
12616: CALL_OW 45
12620: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 4
12628: PPUSH
12629: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
12633: LD_VAR 0 3
12637: PPUSH
12638: LD_INT 28
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 49
// end ;
12648: GO 12589
12650: POP
12651: POP
// end ;
12652: LD_VAR 0 1
12656: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , tmp , sci ;
12657: LD_INT 22
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: CALL_OW 69
12671: IFFALSE 12971
12673: GO 12675
12675: DISABLE
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
// begin sci := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff Khatam ;
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_INT 22
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 25
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: PUSH
12715: LD_EXP 91
12719: DIFF
12720: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 2 ] ) diff ( Khatam union sci ) ;
12721: LD_ADDR_VAR 0 2
12725: PUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 2
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PUSH
12741: LD_EXP 91
12745: PUSH
12746: LD_VAR 0 3
12750: UNION
12751: DIFF
12752: ST_TO_ADDR
// if Khatam then
12753: LD_EXP 91
12757: IFFALSE 12774
// ComMoveXY ( Khatam , 211 , 92 ) ;
12759: LD_EXP 91
12763: PPUSH
12764: LD_INT 211
12766: PPUSH
12767: LD_INT 92
12769: PPUSH
12770: CALL_OW 111
// SetResourceVisibility ( 197 , 80 , 2 ) ;
12774: LD_INT 197
12776: PPUSH
12777: LD_INT 80
12779: PPUSH
12780: LD_INT 2
12782: PPUSH
12783: CALL_OW 441
// SetResourceVisibility ( 213 , 90 , 2 ) ;
12787: LD_INT 213
12789: PPUSH
12790: LD_INT 90
12792: PPUSH
12793: LD_INT 2
12795: PPUSH
12796: CALL_OW 441
// SetResourceVisibility ( 215 , 129 , 2 ) ;
12800: LD_INT 215
12802: PPUSH
12803: LD_INT 129
12805: PPUSH
12806: LD_INT 2
12808: PPUSH
12809: CALL_OW 441
// if sci then
12813: LD_VAR 0 3
12817: IFFALSE 12838
// ComContaminate ( sci [ 1 ] , 197 , 80 ) ;
12819: LD_VAR 0 3
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: PPUSH
12828: LD_INT 197
12830: PPUSH
12831: LD_INT 80
12833: PPUSH
12834: CALL_OW 158
// if sci > 1 then
12838: LD_VAR 0 3
12842: PUSH
12843: LD_INT 1
12845: GREATER
12846: IFFALSE 12867
// ComContaminate ( sci [ 2 ] , 213 , 90 ) ;
12848: LD_VAR 0 3
12852: PUSH
12853: LD_INT 2
12855: ARRAY
12856: PPUSH
12857: LD_INT 213
12859: PPUSH
12860: LD_INT 90
12862: PPUSH
12863: CALL_OW 158
// if sci > 2 then
12867: LD_VAR 0 3
12871: PUSH
12872: LD_INT 2
12874: GREATER
12875: IFFALSE 12896
// ComContaminate ( sci [ 3 ] , 215 , 129 ) ;
12877: LD_VAR 0 3
12881: PUSH
12882: LD_INT 3
12884: ARRAY
12885: PPUSH
12886: LD_INT 215
12888: PPUSH
12889: LD_INT 129
12891: PPUSH
12892: CALL_OW 158
// repeat wait ( 0 0$1 ) ;
12896: LD_INT 35
12898: PPUSH
12899: CALL_OW 67
// for i in tmp do
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_VAR 0 2
12912: PUSH
12913: FOR_IN
12914: IFFALSE 12952
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
12916: LD_VAR 0 1
12920: PPUSH
12921: LD_INT 81
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PPUSH
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 74
12945: PPUSH
12946: CALL_OW 115
12950: GO 12913
12952: POP
12953: POP
// until not FilterAllUnits ( [ f_side , 2 ] ) ;
12954: LD_INT 22
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: NOT
12969: IFFALSE 12896
// end ; end_of_file
12971: PPOPN 3
12973: END
// export function Action ; var i , t , cargo , tmp , options , dec , amount , macmilan_squad ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
12978: PPUSH
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
// Video ( true ) ;
12985: LD_INT 1
12987: PPUSH
12988: CALL 101596 0 1
// tmp := AreaToList ( macmilanCameraArea , 0 ) ;
12992: LD_ADDR_VAR 0 5
12996: PUSH
12997: LD_INT 7
12999: PPUSH
13000: LD_INT 0
13002: PPUSH
13003: CALL_OW 517
13007: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
13008: LD_ADDR_VAR 0 2
13012: PUSH
13013: DOUBLE
13014: LD_INT 1
13016: DEC
13017: ST_TO_ADDR
13018: LD_VAR 0 5
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PUSH
13027: FOR_TO
13028: IFFALSE 13073
// RevealMapOnXY ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 1 , - 15 ) ;
13030: LD_VAR 0 5
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 2
13043: ARRAY
13044: PPUSH
13045: LD_VAR 0 5
13049: PUSH
13050: LD_INT 2
13052: ARRAY
13053: PUSH
13054: LD_VAR 0 2
13058: ARRAY
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: LD_INT 15
13065: NEG
13066: PPUSH
13067: CALL 101510 0 4
13071: GO 13027
13073: POP
13074: POP
// CenterNowOnUnits ( Powell ) ;
13075: LD_EXP 55
13079: PPUSH
13080: CALL_OW 87
// tmp := [ JMMNewVeh ] ;
13084: LD_ADDR_VAR 0 5
13088: PUSH
13089: LD_EXP 53
13093: PUSH
13094: EMPTY
13095: LIST
13096: ST_TO_ADDR
// if GirlNewVeh then
13097: LD_EXP 54
13101: IFFALSE 13119
// tmp := tmp ^ GirlNewVeh ;
13103: LD_ADDR_VAR 0 5
13107: PUSH
13108: LD_VAR 0 5
13112: PUSH
13113: LD_EXP 54
13117: ADD
13118: ST_TO_ADDR
// ComMoveXY ( tmp , 60 , 109 ) ;
13119: LD_VAR 0 5
13123: PPUSH
13124: LD_INT 60
13126: PPUSH
13127: LD_INT 109
13129: PPUSH
13130: CALL_OW 111
// if KappaStatus then
13134: LD_EXP 2
13138: IFFALSE 13190
// begin Say ( JMM , D1T-JMM-1 ) ;
13140: LD_EXP 36
13144: PPUSH
13145: LD_STRING D1T-JMM-1
13147: PPUSH
13148: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
13152: LD_EXP 55
13156: PPUSH
13157: LD_STRING D1T-Pow-1
13159: PPUSH
13160: CALL_OW 88
// Say ( JMM , D1T-JMM-2 ) ;
13164: LD_EXP 36
13168: PPUSH
13169: LD_STRING D1T-JMM-2
13171: PPUSH
13172: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
13176: LD_EXP 55
13180: PPUSH
13181: LD_STRING D1T-Pow-2
13183: PPUSH
13184: CALL_OW 88
// end else
13188: GO 13396
// if JMMGirlStatus then
13190: LD_EXP 6
13194: IFFALSE 13339
// begin Say ( JMM , D1T-JMM-1 ) ;
13196: LD_EXP 36
13200: PPUSH
13201: LD_STRING D1T-JMM-1
13203: PPUSH
13204: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
13208: LD_EXP 55
13212: PPUSH
13213: LD_STRING D1T-Pow-1
13215: PPUSH
13216: CALL_OW 88
// Say ( JMM , D1T-JMM-3 ) ;
13220: LD_EXP 36
13224: PPUSH
13225: LD_STRING D1T-JMM-3
13227: PPUSH
13228: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
13232: LD_EXP 55
13236: PPUSH
13237: LD_STRING D1T-Pow-3
13239: PPUSH
13240: CALL_OW 88
// if JMMGirl then
13244: LD_EXP 7
13248: IFFALSE 13337
// begin case JMMGirl of 1 :
13250: LD_EXP 7
13254: PUSH
13255: LD_INT 1
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13278
13263: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
13264: LD_EXP 37
13268: PPUSH
13269: LD_STRING D1T-Joan-3
13271: PPUSH
13272: CALL_OW 88
13276: GO 13325
13278: LD_INT 2
13280: DOUBLE
13281: EQUAL
13282: IFTRUE 13286
13284: GO 13301
13286: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
13287: LD_EXP 39
13291: PPUSH
13292: LD_STRING D1T-Lisa-3
13294: PPUSH
13295: CALL_OW 88
13299: GO 13325
13301: LD_INT 3
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13324
13309: POP
// Say ( Connie , D1T-Con-3 ) ; end ;
13310: LD_EXP 51
13314: PPUSH
13315: LD_STRING D1T-Con-3
13317: PPUSH
13318: CALL_OW 88
13322: GO 13325
13324: POP
// Say ( Powell , D1T-Pow-4 ) ;
13325: LD_EXP 55
13329: PPUSH
13330: LD_STRING D1T-Pow-4
13332: PPUSH
13333: CALL_OW 88
// end ; end else
13337: GO 13396
// if not FastEnd then
13339: LD_EXP 11
13343: NOT
13344: IFFALSE 13372
// begin Say ( JMM , D1T-JMM-4 ) ;
13346: LD_EXP 36
13350: PPUSH
13351: LD_STRING D1T-JMM-4
13353: PPUSH
13354: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
13358: LD_EXP 55
13362: PPUSH
13363: LD_STRING D1T-Pow-5
13365: PPUSH
13366: CALL_OW 88
// end else
13370: GO 13396
// begin Say ( JMM , D1nT-JMM-1 ) ;
13372: LD_EXP 36
13376: PPUSH
13377: LD_STRING D1nT-JMM-1
13379: PPUSH
13380: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
13384: LD_EXP 55
13388: PPUSH
13389: LD_STRING D1nT-Pow-1
13391: PPUSH
13392: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// until not HasTask ( JMMNewVeh ) ;
13403: LD_EXP 53
13407: PPUSH
13408: CALL_OW 314
13412: NOT
13413: IFFALSE 13396
// ComExitVehicle ( JMM ) ;
13415: LD_EXP 36
13419: PPUSH
13420: CALL_OW 121
// wait ( 3 ) ;
13424: LD_INT 3
13426: PPUSH
13427: CALL_OW 67
// ComMoveXY ( JMM , 60 , 94 ) ;
13431: LD_EXP 36
13435: PPUSH
13436: LD_INT 60
13438: PPUSH
13439: LD_INT 94
13441: PPUSH
13442: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
13446: LD_EXP 36
13450: PPUSH
13451: LD_EXP 55
13455: PPUSH
13456: CALL_OW 179
// if Joan then
13460: LD_EXP 37
13464: IFFALSE 13518
// begin ComExitVehicle ( Joan ) ;
13466: LD_EXP 37
13470: PPUSH
13471: CALL_OW 121
// AddComWait ( Joan , 0 0$1 ) ;
13475: LD_EXP 37
13479: PPUSH
13480: LD_INT 35
13482: PPUSH
13483: CALL_OW 202
// AddComMoveXY ( Joan , 65 , 104 ) ;
13487: LD_EXP 37
13491: PPUSH
13492: LD_INT 65
13494: PPUSH
13495: LD_INT 104
13497: PPUSH
13498: CALL_OW 171
// AddComTurnUnit ( Joan , JMM ) ;
13502: LD_EXP 37
13506: PPUSH
13507: LD_EXP 36
13511: PPUSH
13512: CALL_OW 179
// end else
13516: GO 13652
// if Lisa and JMMGirl = 2 then
13518: LD_EXP 39
13522: PUSH
13523: LD_EXP 7
13527: PUSH
13528: LD_INT 2
13530: EQUAL
13531: AND
13532: IFFALSE 13586
// begin ComExitVehicle ( Lisa ) ;
13534: LD_EXP 39
13538: PPUSH
13539: CALL_OW 121
// AddComWait ( Lisa , 0 0$1 ) ;
13543: LD_EXP 39
13547: PPUSH
13548: LD_INT 35
13550: PPUSH
13551: CALL_OW 202
// AddComMoveXY ( Lisa , 65 , 104 ) ;
13555: LD_EXP 39
13559: PPUSH
13560: LD_INT 65
13562: PPUSH
13563: LD_INT 104
13565: PPUSH
13566: CALL_OW 171
// AddComTurnUnit ( Lisa , JMM ) ;
13570: LD_EXP 39
13574: PPUSH
13575: LD_EXP 36
13579: PPUSH
13580: CALL_OW 179
// end else
13584: GO 13652
// if Connie and JMMGirl = 3 then
13586: LD_EXP 51
13590: PUSH
13591: LD_EXP 7
13595: PUSH
13596: LD_INT 3
13598: EQUAL
13599: AND
13600: IFFALSE 13652
// begin ComExitVehicle ( Connie ) ;
13602: LD_EXP 51
13606: PPUSH
13607: CALL_OW 121
// AddComWait ( Connie , 0 0$1 ) ;
13611: LD_EXP 51
13615: PPUSH
13616: LD_INT 35
13618: PPUSH
13619: CALL_OW 202
// AddComMoveXY ( Connie , 65 , 104 ) ;
13623: LD_EXP 51
13627: PPUSH
13628: LD_INT 65
13630: PPUSH
13631: LD_INT 104
13633: PPUSH
13634: CALL_OW 171
// AddComTurnUnit ( Connie , JMM ) ;
13638: LD_EXP 51
13642: PPUSH
13643: LD_EXP 36
13647: PPUSH
13648: CALL_OW 179
// end ; repeat wait ( 0 0$1 ) ;
13652: LD_INT 35
13654: PPUSH
13655: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) < 6 ;
13659: LD_EXP 36
13663: PPUSH
13664: LD_EXP 55
13668: PPUSH
13669: CALL_OW 296
13673: PUSH
13674: LD_INT 6
13676: LESS
13677: IFFALSE 13652
// wait ( 0 0$0.5 ) ;
13679: LD_INT 18
13681: PPUSH
13682: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
13686: LD_EXP 36
13690: PPUSH
13691: LD_STRING D1-JMM-1
13693: PPUSH
13694: CALL_OW 88
// async ;
13698: ASYNC
// Say ( Powell , D1-Pow-1 ) ;
13699: LD_EXP 55
13703: PPUSH
13704: LD_STRING D1-Pow-1
13706: PPUSH
13707: CALL_OW 88
// if not dialogue_skipped then
13711: LD_OWVAR 59
13715: NOT
13716: IFFALSE 13725
// wait ( 0 0$2 ) ;
13718: LD_INT 70
13720: PPUSH
13721: CALL_OW 67
// RevealMapOnXY ( 170 , 99 , 1 , - 6 ) ;
13725: LD_INT 170
13727: PPUSH
13728: LD_INT 99
13730: PPUSH
13731: LD_INT 1
13733: PPUSH
13734: LD_INT 6
13736: NEG
13737: PPUSH
13738: CALL 101510 0 4
// RevealMapOnXY ( 174 , 115 , 1 , - 6 ) ;
13742: LD_INT 174
13744: PPUSH
13745: LD_INT 115
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: LD_INT 6
13753: NEG
13754: PPUSH
13755: CALL 101510 0 4
// RevealMapOnXY ( 169 , 71 , 1 , - 6 ) ;
13759: LD_INT 169
13761: PPUSH
13762: LD_INT 71
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 6
13770: NEG
13771: PPUSH
13772: CALL 101510 0 4
// if not dialogue_skipped then
13776: LD_OWVAR 59
13780: NOT
13781: IFFALSE 13800
// begin CenterOnXY ( 170 , 99 ) ;
13783: LD_INT 170
13785: PPUSH
13786: LD_INT 99
13788: PPUSH
13789: CALL_OW 84
// wait ( 0 0$2.3 ) ;
13793: LD_INT 80
13795: PPUSH
13796: CALL_OW 67
// end ; RevealMapOnXY ( 75 , 53 , 1 , - 9 ) ;
13800: LD_INT 75
13802: PPUSH
13803: LD_INT 53
13805: PPUSH
13806: LD_INT 1
13808: PPUSH
13809: LD_INT 9
13811: NEG
13812: PPUSH
13813: CALL 101510 0 4
// RevealMapOnXY ( 54 , 42 , 1 , - 9 ) ;
13817: LD_INT 54
13819: PPUSH
13820: LD_INT 42
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: LD_INT 9
13828: NEG
13829: PPUSH
13830: CALL 101510 0 4
// RevealMapOnXY ( 62 , 51 , 1 , - 9 ) ;
13834: LD_INT 62
13836: PPUSH
13837: LD_INT 51
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: LD_INT 9
13845: NEG
13846: PPUSH
13847: CALL 101510 0 4
// if not dialogue_skipped then
13851: LD_OWVAR 59
13855: NOT
13856: IFFALSE 13875
// begin CenterOnXY ( 75 , 53 ) ;
13858: LD_INT 75
13860: PPUSH
13861: LD_INT 53
13863: PPUSH
13864: CALL_OW 84
// wait ( 0 0$4 ) ;
13868: LD_INT 140
13870: PPUSH
13871: CALL_OW 67
// end ; CenterNowOnUnits ( Powell ) ;
13875: LD_EXP 55
13879: PPUSH
13880: CALL_OW 87
// if not dialogue_skipped then
13884: LD_OWVAR 59
13888: NOT
13889: IFFALSE 13898
// wait ( 0 0$2 ) ;
13891: LD_INT 70
13893: PPUSH
13894: CALL_OW 67
// sync ;
13898: SYNC
// Say ( JMM , D1-JMM-2 ) ;
13899: LD_EXP 36
13903: PPUSH
13904: LD_STRING D1-JMM-2
13906: PPUSH
13907: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
13911: LD_EXP 55
13915: PPUSH
13916: LD_STRING D1-Pow-2
13918: PPUSH
13919: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
13923: LD_EXP 36
13927: PPUSH
13928: LD_STRING D1-JMM-3
13930: PPUSH
13931: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
13935: LD_EXP 55
13939: PPUSH
13940: LD_STRING D1-Pow-3
13942: PPUSH
13943: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
13947: LD_EXP 36
13951: PPUSH
13952: LD_STRING D1-JMM-4
13954: PPUSH
13955: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
13959: LD_EXP 55
13963: PPUSH
13964: LD_STRING D1-Pow-4
13966: PPUSH
13967: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
13971: LD_EXP 36
13975: PPUSH
13976: LD_STRING D1-JMM-5
13978: PPUSH
13979: CALL_OW 88
// async ;
13983: ASYNC
// Say ( Powell , D1-Pow-5 ) ;
13984: LD_EXP 55
13988: PPUSH
13989: LD_STRING D1-Pow-5
13991: PPUSH
13992: CALL_OW 88
// if not dialogue_skipped then
13996: LD_OWVAR 59
14000: NOT
14001: IFFALSE 14010
// wait ( 0 0$3.6 ) ;
14003: LD_INT 126
14005: PPUSH
14006: CALL_OW 67
// RevealMapOnXY ( 134 , 210 , 1 , - 11 ) ;
14010: LD_INT 134
14012: PPUSH
14013: LD_INT 210
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: LD_INT 11
14021: NEG
14022: PPUSH
14023: CALL 101510 0 4
// if not dialogue_skipped then
14027: LD_OWVAR 59
14031: NOT
14032: IFFALSE 14051
// begin CenterOnXY ( 134 , 210 ) ;
14034: LD_INT 134
14036: PPUSH
14037: LD_INT 210
14039: PPUSH
14040: CALL_OW 84
// wait ( 0 0$2 ) ;
14044: LD_INT 70
14046: PPUSH
14047: CALL_OW 67
// end ; RevealMapOnXY ( 101 , 159 , 1 , - 10 ) ;
14051: LD_INT 101
14053: PPUSH
14054: LD_INT 159
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: LD_INT 10
14062: NEG
14063: PPUSH
14064: CALL 101510 0 4
// if not dialogue_skipped then
14068: LD_OWVAR 59
14072: NOT
14073: IFFALSE 14092
// begin CenterOnXY ( 101 , 159 ) ;
14075: LD_INT 101
14077: PPUSH
14078: LD_INT 159
14080: PPUSH
14081: CALL_OW 84
// wait ( 0 0$2 ) ;
14085: LD_INT 70
14087: PPUSH
14088: CALL_OW 67
// end ; sync ;
14092: SYNC
// CenterNowOnUnits ( Powell ) ;
14093: LD_EXP 55
14097: PPUSH
14098: CALL_OW 87
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
14102: LD_ADDR_VAR 0 6
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: LD_INT 3
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: LD_INT 5
14121: PUSH
14122: LD_INT 6
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: ST_TO_ADDR
// if not dialogue_skipped then
14133: LD_OWVAR 59
14137: NOT
14138: IFFALSE 14307
// begin game_speed := 4 ;
14140: LD_ADDR_OWVAR 65
14144: PUSH
14145: LD_INT 4
14147: ST_TO_ADDR
// wait ( 0 0$6 ) ;
14148: LD_INT 210
14150: PPUSH
14151: CALL_OW 67
// dec = SelectiveQuery ( Q1 , options ) ;
14155: LD_ADDR_VAR 0 7
14159: PUSH
14160: LD_STRING Q1
14162: PPUSH
14163: LD_VAR 0 6
14167: PPUSH
14168: CALL_OW 98
14172: ST_TO_ADDR
// repeat dec = SelectiveQuery ( Q1 , options ) ;
14173: LD_ADDR_VAR 0 7
14177: PUSH
14178: LD_STRING Q1
14180: PPUSH
14181: LD_VAR 0 6
14185: PPUSH
14186: CALL_OW 98
14190: ST_TO_ADDR
// options = options diff dec ;
14191: LD_ADDR_VAR 0 6
14195: PUSH
14196: LD_VAR 0 6
14200: PUSH
14201: LD_VAR 0 7
14205: DIFF
14206: ST_TO_ADDR
// ResolveQuery ( dec , options ) ;
14207: LD_VAR 0 7
14211: PPUSH
14212: LD_VAR 0 6
14216: PPUSH
14217: CALL 15590 0 2
// until ( dec in [ 5 , 6 ] ) or options = 2 ;
14221: LD_VAR 0 7
14225: PUSH
14226: LD_INT 5
14228: PUSH
14229: LD_INT 6
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: IN
14236: PUSH
14237: LD_VAR 0 6
14241: PUSH
14242: LD_INT 2
14244: EQUAL
14245: OR
14246: IFFALSE 14173
// if not ( dec in [ 5 , 6 ] ) then
14248: LD_VAR 0 7
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 6
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: IN
14263: NOT
14264: IFFALSE 14307
// begin dec = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
14266: LD_ADDR_VAR 0 7
14270: PUSH
14271: LD_STRING Q1a
14273: PPUSH
14274: LD_INT 1
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 98
14288: ST_TO_ADDR
// ResolveQuery ( dec + 4 , options ) ;
14289: LD_VAR 0 7
14293: PUSH
14294: LD_INT 4
14296: PLUS
14297: PPUSH
14298: LD_VAR 0 6
14302: PPUSH
14303: CALL 15590 0 2
// end ; end ; CenterOnXY ( 81 , 127 ) ;
14307: LD_INT 81
14309: PPUSH
14310: LD_INT 127
14312: PPUSH
14313: CALL_OW 84
// amount := 5 ;
14317: LD_ADDR_VAR 0 8
14321: PUSH
14322: LD_INT 5
14324: ST_TO_ADDR
// macmilan_squad := [ ] ;
14325: LD_ADDR_VAR 0 9
14329: PUSH
14330: EMPTY
14331: ST_TO_ADDR
// if vip < amount then
14332: LD_EXP 56
14336: PUSH
14337: LD_VAR 0 8
14341: LESS
14342: IFFALSE 14386
// tmp := vip union FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) else
14344: LD_ADDR_VAR 0 5
14348: PUSH
14349: LD_EXP 56
14353: PUSH
14354: LD_INT 22
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: UNION
14383: ST_TO_ADDR
14384: GO 14396
// tmp := vip ;
14386: LD_ADDR_VAR 0 5
14390: PUSH
14391: LD_EXP 56
14395: ST_TO_ADDR
// tmp := tmp diff Powell ;
14396: LD_ADDR_VAR 0 5
14400: PUSH
14401: LD_VAR 0 5
14405: PUSH
14406: LD_EXP 55
14410: DIFF
14411: ST_TO_ADDR
// if tmp < amount then
14412: LD_VAR 0 5
14416: PUSH
14417: LD_VAR 0 8
14421: LESS
14422: IFFALSE 14434
// amount := tmp ;
14424: LD_ADDR_VAR 0 8
14428: PUSH
14429: LD_VAR 0 5
14433: ST_TO_ADDR
// if GetClass ( tmp [ 1 ] ) <> 2 then
14434: LD_VAR 0 5
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: CALL_OW 257
14447: PUSH
14448: LD_INT 2
14450: NONEQUAL
14451: IFFALSE 14513
// begin if IsInUnit ( tmp [ 1 ] ) then
14453: LD_VAR 0 5
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PPUSH
14462: CALL_OW 310
14466: IFFALSE 14481
// ComExitBuilding ( tmp [ 1 ] ) ;
14468: LD_VAR 0 5
14472: PUSH
14473: LD_INT 1
14475: ARRAY
14476: PPUSH
14477: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , am_depot ) ;
14481: LD_VAR 0 5
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: LD_INT 387
14492: PPUSH
14493: CALL_OW 180
// AddComChangeProfession ( tmp [ 1 ] , 2 ) ;
14497: LD_VAR 0 5
14501: PUSH
14502: LD_INT 1
14504: ARRAY
14505: PPUSH
14506: LD_INT 2
14508: PPUSH
14509: CALL_OW 183
// end ; ComMoveXY ( JMM , 82 , 129 ) ;
14513: LD_EXP 36
14517: PPUSH
14518: LD_INT 82
14520: PPUSH
14521: LD_INT 129
14523: PPUSH
14524: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
14528: LD_EXP 36
14532: PPUSH
14533: LD_EXP 55
14537: PPUSH
14538: CALL_OW 179
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , 84 , 128 ) ;
14542: LD_INT 22
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: PUSH
14557: LD_EXP 36
14561: DIFF
14562: PPUSH
14563: LD_INT 84
14565: PPUSH
14566: LD_INT 128
14568: PPUSH
14569: CALL_OW 111
// AddComTurnUnit ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , JMM ) ;
14573: LD_INT 22
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: PUSH
14588: LD_EXP 36
14592: DIFF
14593: PPUSH
14594: LD_EXP 36
14598: PPUSH
14599: CALL_OW 179
// for i = 1 to amount do
14603: LD_ADDR_VAR 0 2
14607: PUSH
14608: DOUBLE
14609: LD_INT 1
14611: DEC
14612: ST_TO_ADDR
14613: LD_VAR 0 8
14617: PUSH
14618: FOR_TO
14619: IFFALSE 14787
// begin macmilan_squad := macmilan_squad ^ tmp [ i ] ;
14621: LD_ADDR_VAR 0 9
14625: PUSH
14626: LD_VAR 0 9
14630: PUSH
14631: LD_VAR 0 5
14635: PUSH
14636: LD_VAR 0 2
14640: ARRAY
14641: ADD
14642: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
14643: LD_VAR 0 5
14647: PUSH
14648: LD_VAR 0 2
14652: ARRAY
14653: PPUSH
14654: CALL_OW 310
14658: IFFALSE 14675
// AddComExitBuilding ( tmp [ i ] ) ;
14660: LD_VAR 0 5
14664: PUSH
14665: LD_VAR 0 2
14669: ARRAY
14670: PPUSH
14671: CALL_OW 182
// if i = 2 and JMMNewVeh then
14675: LD_VAR 0 2
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: PUSH
14684: LD_EXP 53
14688: AND
14689: IFFALSE 14747
// begin AddComEnterUnit ( tmp [ i ] , JMMNewVeh ) ;
14691: LD_VAR 0 5
14695: PUSH
14696: LD_VAR 0 2
14700: ARRAY
14701: PPUSH
14702: LD_EXP 53
14706: PPUSH
14707: CALL_OW 180
// AddComMoveXY ( tmp [ i ] , 86 , 133 ) ;
14711: LD_VAR 0 5
14715: PUSH
14716: LD_VAR 0 2
14720: ARRAY
14721: PPUSH
14722: LD_INT 86
14724: PPUSH
14725: LD_INT 133
14727: PPUSH
14728: CALL_OW 171
// AddComExitVehicle ( tmp [ i ] ) ;
14732: LD_VAR 0 5
14736: PUSH
14737: LD_VAR 0 2
14741: ARRAY
14742: PPUSH
14743: CALL_OW 181
// end ; AddComMoveToArea ( tmp [ i ] , macmilanSquadStand ) ;
14747: LD_VAR 0 5
14751: PUSH
14752: LD_VAR 0 2
14756: ARRAY
14757: PPUSH
14758: LD_INT 8
14760: PPUSH
14761: CALL_OW 173
// AddComTurnUnit ( tmp [ i ] , JMM ) ;
14765: LD_VAR 0 5
14769: PUSH
14770: LD_VAR 0 2
14774: ARRAY
14775: PPUSH
14776: LD_EXP 36
14780: PPUSH
14781: CALL_OW 179
// end ;
14785: GO 14618
14787: POP
14788: POP
// if GirlNewVeh then
14789: LD_EXP 54
14793: IFFALSE 14807
// SetSide ( GirlNewVeh , 4 ) ;
14795: LD_EXP 54
14799: PPUSH
14800: LD_INT 4
14802: PPUSH
14803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
14807: LD_INT 35
14809: PPUSH
14810: CALL_OW 67
// until UnitFilter ( macmilan_squad , [ f_inarea , powellBase ] ) = 0 and not IsInArea ( JMM , powellBase ) ;
14814: LD_VAR 0 9
14818: PPUSH
14819: LD_INT 95
14821: PUSH
14822: LD_INT 9
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 72
14833: PUSH
14834: LD_INT 0
14836: EQUAL
14837: PUSH
14838: LD_EXP 36
14842: PPUSH
14843: LD_INT 9
14845: PPUSH
14846: CALL_OW 308
14850: NOT
14851: AND
14852: IFFALSE 14807
// wait ( 0 0$2 ) ;
14854: LD_INT 70
14856: PPUSH
14857: CALL_OW 67
// SetSide ( macmilan_squad , 1 ) ;
14861: LD_VAR 0 9
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_distxy , 83 , 130 , 10 ] ] ) , 1 ) ;
14873: LD_INT 21
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 92
14885: PUSH
14886: LD_INT 83
14888: PUSH
14889: LD_INT 130
14891: PUSH
14892: LD_INT 10
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 235
// Video ( false ) ;
14917: LD_INT 0
14919: PPUSH
14920: CALL 101596 0 1
// ChangeMissionObjectives ( M1 ) ;
14924: LD_STRING M1
14926: PPUSH
14927: CALL_OW 337
// SaveForQuickRestart ;
14931: CALL_OW 22
// missionStart := true ;
14935: LD_ADDR_EXP 13
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// missionStage := 2 ;
14943: LD_ADDR_EXP 15
14947: PUSH
14948: LD_INT 2
14950: ST_TO_ADDR
// wait ( 0 0$3 ) ;
14951: LD_INT 105
14953: PPUSH
14954: CALL_OW 67
// tmp := tmp diff FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
14958: LD_ADDR_VAR 0 5
14962: PUSH
14963: LD_VAR 0 5
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: DIFF
14997: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Powell ) ;
14998: LD_ADDR_EXP 99
15002: PUSH
15003: LD_EXP 99
15007: PPUSH
15008: LD_INT 4
15010: PPUSH
15011: LD_INT 22
15013: PUSH
15014: LD_INT 4
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 23
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 69
15057: PUSH
15058: LD_EXP 55
15062: DIFF
15063: PPUSH
15064: CALL_OW 1
15068: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) [ 1 ] ;
15069: LD_ADDR_VAR 0 4
15073: PUSH
15074: LD_INT 22
15076: PUSH
15077: LD_INT 4
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 34
15086: PUSH
15087: LD_INT 12
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: ST_TO_ADDR
// if IsInUnit ( tmp [ 1 ] ) then
15107: LD_VAR 0 5
15111: PUSH
15112: LD_INT 1
15114: ARRAY
15115: PPUSH
15116: CALL_OW 310
15120: IFFALSE 15135
// ComExitBuilding ( tmp [ 1 ] ) ;
15122: LD_VAR 0 5
15126: PUSH
15127: LD_INT 1
15129: ARRAY
15130: PPUSH
15131: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , cargo ) ;
15135: LD_VAR 0 5
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: LD_VAR 0 4
15148: PPUSH
15149: CALL_OW 180
// AddComMoveXY ( tmp [ 1 ] , 80 , 136 ) ;
15153: LD_VAR 0 5
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: PPUSH
15162: LD_INT 80
15164: PPUSH
15165: LD_INT 136
15167: PPUSH
15168: CALL_OW 171
// AddComUnload ( tmp [ 1 ] ) ;
15172: LD_VAR 0 5
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: CALL_OW 219
// AddComMoveXY ( tmp [ 1 ] , 59 , 112 ) ;
15185: LD_VAR 0 5
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: LD_INT 59
15196: PPUSH
15197: LD_INT 112
15199: PPUSH
15200: CALL_OW 171
// AddComExitVehicle ( tmp [ 1 ] ) ;
15204: LD_VAR 0 5
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: CALL_OW 181
// if Lisa in vip and GetSide ( Lisa ) = 1 then
15217: LD_EXP 39
15221: PUSH
15222: LD_EXP 56
15226: IN
15227: PUSH
15228: LD_EXP 39
15232: PPUSH
15233: CALL_OW 255
15237: PUSH
15238: LD_INT 1
15240: EQUAL
15241: AND
15242: IFFALSE 15258
// Say ( Lisa , D3nW-Lisa-1 ) else
15244: LD_EXP 39
15248: PPUSH
15249: LD_STRING D3nW-Lisa-1
15251: PPUSH
15252: CALL_OW 88
15256: GO 15502
// if Cyrus in vip and GetSide ( Cyrus ) = 1 then
15258: LD_EXP 42
15262: PUSH
15263: LD_EXP 56
15267: IN
15268: PUSH
15269: LD_EXP 42
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 1
15281: EQUAL
15282: AND
15283: IFFALSE 15299
// Say ( Cyrus , D3nW-Cyrus-1 ) else
15285: LD_EXP 42
15289: PPUSH
15290: LD_STRING D3nW-Cyrus-1
15292: PPUSH
15293: CALL_OW 88
15297: GO 15502
// if Bobby in vip and GetSide ( Bobby ) = 1 then
15299: LD_EXP 41
15303: PUSH
15304: LD_EXP 56
15308: IN
15309: PUSH
15310: LD_EXP 41
15314: PPUSH
15315: CALL_OW 255
15319: PUSH
15320: LD_INT 1
15322: EQUAL
15323: AND
15324: IFFALSE 15340
// Say ( Bobby , D3nW-Bobby-1 ) else
15326: LD_EXP 41
15330: PPUSH
15331: LD_STRING D3nW-Bobby-1
15333: PPUSH
15334: CALL_OW 88
15338: GO 15502
// if Gary in vip and GetSide ( Gary ) = 1 then
15340: LD_EXP 48
15344: PUSH
15345: LD_EXP 56
15349: IN
15350: PUSH
15351: LD_EXP 48
15355: PPUSH
15356: CALL_OW 255
15360: PUSH
15361: LD_INT 1
15363: EQUAL
15364: AND
15365: IFFALSE 15381
// Say ( Gary , D3nW-Gary-1 ) else
15367: LD_EXP 48
15371: PPUSH
15372: LD_STRING D3nW-Gary-1
15374: PPUSH
15375: CALL_OW 88
15379: GO 15502
// if Donaldson in vip and GetSide ( Donaldson ) = 1 then
15381: LD_EXP 40
15385: PUSH
15386: LD_EXP 56
15390: IN
15391: PUSH
15392: LD_EXP 40
15396: PPUSH
15397: CALL_OW 255
15401: PUSH
15402: LD_INT 1
15404: EQUAL
15405: AND
15406: IFFALSE 15422
// Say ( Donaldson , D3nW-Don-1 ) else
15408: LD_EXP 40
15412: PPUSH
15413: LD_STRING D3nW-Don-1
15415: PPUSH
15416: CALL_OW 88
15420: GO 15502
// if Cornel in vip and GetSide ( Cornel ) = 1 then
15422: LD_EXP 47
15426: PUSH
15427: LD_EXP 56
15431: IN
15432: PUSH
15433: LD_EXP 47
15437: PPUSH
15438: CALL_OW 255
15442: PUSH
15443: LD_INT 1
15445: EQUAL
15446: AND
15447: IFFALSE 15463
// Say ( Cornel , D3nW-Corn-1 ) else
15449: LD_EXP 47
15453: PPUSH
15454: LD_STRING D3nW-Corn-1
15456: PPUSH
15457: CALL_OW 88
15461: GO 15502
// if Frank in vip and GetSide ( Frank ) = 1 then
15463: LD_EXP 49
15467: PUSH
15468: LD_EXP 56
15472: IN
15473: PUSH
15474: LD_EXP 49
15478: PPUSH
15479: CALL_OW 255
15483: PUSH
15484: LD_INT 1
15486: EQUAL
15487: AND
15488: IFFALSE 15502
// Say ( Frank , D3nW-Frank-1 ) ;
15490: LD_EXP 49
15494: PPUSH
15495: LD_STRING D3nW-Frank-1
15497: PPUSH
15498: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
15502: LD_EXP 36
15506: PPUSH
15507: LD_STRING D3nW-JMM-1
15509: PPUSH
15510: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
15514: LD_EXP 36
15518: PPUSH
15519: LD_STRING D3nW-JMM-1a
15521: PPUSH
15522: CALL_OW 88
// t := 0 0$00 ;
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: LD_INT 0
15533: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15534: LD_INT 35
15536: PPUSH
15537: CALL_OW 67
// t := t + 0 0$1 ;
15541: LD_ADDR_VAR 0 3
15545: PUSH
15546: LD_VAR 0 3
15550: PUSH
15551: LD_INT 35
15553: PLUS
15554: ST_TO_ADDR
// until HexInfo ( 59 , 112 ) or t > 1 1$00 ;
15555: LD_INT 59
15557: PPUSH
15558: LD_INT 112
15560: PPUSH
15561: CALL_OW 428
15565: PUSH
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 2100
15573: GREATER
15574: OR
15575: IFFALSE 15534
// activeAttacks := true ;
15577: LD_ADDR_EXP 16
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// end ;
15585: LD_VAR 0 1
15589: RET
// export function ResolveQuery ( question , list_of_q ) ; begin
15590: LD_INT 0
15592: PPUSH
// case question of 1 :
15593: LD_VAR 0 1
15597: PUSH
15598: LD_INT 1
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15657
15606: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
15607: LD_EXP 36
15611: PPUSH
15612: LD_STRING D2Mot-JMM-1
15614: PPUSH
15615: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
15619: LD_EXP 55
15623: PPUSH
15624: LD_STRING D2Mot-Pow-1
15626: PPUSH
15627: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
15631: LD_EXP 36
15635: PPUSH
15636: LD_STRING D2Mot-JMM-2
15638: PPUSH
15639: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
15643: LD_EXP 55
15647: PPUSH
15648: LD_STRING D2Mot-Pow-2
15650: PPUSH
15651: CALL_OW 88
// end ; 2 :
15655: GO 16000
15657: LD_INT 2
15659: DOUBLE
15660: EQUAL
15661: IFTRUE 15665
15663: GO 15741
15665: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
15666: LD_EXP 36
15670: PPUSH
15671: LD_STRING D2Rus-JMM-1
15673: PPUSH
15674: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
15678: LD_EXP 55
15682: PPUSH
15683: LD_STRING D2Rus-Pow-1
15685: PPUSH
15686: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
15690: LD_EXP 36
15694: PPUSH
15695: LD_STRING D2Rus-JMM-2
15697: PPUSH
15698: CALL_OW 88
// if not ( 3 in list_of_q ) then
15702: LD_INT 3
15704: PUSH
15705: LD_VAR 0 2
15709: IN
15710: NOT
15711: IFFALSE 15727
// Say ( Powell , D2Rus-Pow-2 ) else
15713: LD_EXP 55
15717: PPUSH
15718: LD_STRING D2Rus-Pow-2
15720: PPUSH
15721: CALL_OW 88
15725: GO 15739
// Say ( Powell , D2Rus-Pow-2a ) ;
15727: LD_EXP 55
15731: PPUSH
15732: LD_STRING D2Rus-Pow-2a
15734: PPUSH
15735: CALL_OW 88
// end ; 3 :
15739: GO 16000
15741: LD_INT 3
15743: DOUBLE
15744: EQUAL
15745: IFTRUE 15749
15747: GO 15834
15749: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
15750: LD_EXP 36
15754: PPUSH
15755: LD_STRING D2Leg-JMM-1
15757: PPUSH
15758: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
15762: LD_EXP 55
15766: PPUSH
15767: LD_STRING D2Leg-Pow-1
15769: PPUSH
15770: CALL_OW 88
// if 2 in list_of_q then
15774: LD_INT 2
15776: PUSH
15777: LD_VAR 0 2
15781: IN
15782: IFFALSE 15808
// begin Say ( JMM , D2Leg-JMM-2 ) ;
15784: LD_EXP 36
15788: PPUSH
15789: LD_STRING D2Leg-JMM-2
15791: PPUSH
15792: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
15796: LD_EXP 55
15800: PPUSH
15801: LD_STRING D2Leg-Pow-2
15803: PPUSH
15804: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
15808: LD_EXP 36
15812: PPUSH
15813: LD_STRING D2Leg-JMM-3
15815: PPUSH
15816: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
15820: LD_EXP 55
15824: PPUSH
15825: LD_STRING D2Leg-Pow-3
15827: PPUSH
15828: CALL_OW 88
// end ; 4 :
15832: GO 16000
15834: LD_INT 4
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 15917
15842: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
15843: LD_EXP 36
15847: PPUSH
15848: LD_STRING D2Ar-JMM-1
15850: PPUSH
15851: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
15855: LD_EXP 55
15859: PPUSH
15860: LD_STRING D2Ar-Pow-1
15862: PPUSH
15863: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
15867: LD_EXP 36
15871: PPUSH
15872: LD_STRING D2Ar-JMM-2
15874: PPUSH
15875: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
15879: LD_EXP 55
15883: PPUSH
15884: LD_STRING D2Ar-Pow-2
15886: PPUSH
15887: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
15891: LD_EXP 36
15895: PPUSH
15896: LD_STRING D2Ar-JMM-3
15898: PPUSH
15899: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
15903: LD_EXP 55
15907: PPUSH
15908: LD_STRING D2Ar-Pow-3
15910: PPUSH
15911: CALL_OW 88
// end ; 5 :
15915: GO 16000
15917: LD_INT 5
15919: DOUBLE
15920: EQUAL
15921: IFTRUE 15925
15923: GO 15940
15925: POP
// Say ( JMM , D2Conf-JMM-1 ) ; 6 :
15926: LD_EXP 36
15930: PPUSH
15931: LD_STRING D2Conf-JMM-1
15933: PPUSH
15934: CALL_OW 88
15938: GO 16000
15940: LD_INT 6
15942: DOUBLE
15943: EQUAL
15944: IFTRUE 15948
15946: GO 15999
15948: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
15949: LD_EXP 36
15953: PPUSH
15954: LD_STRING D2Com-JMM-1
15956: PPUSH
15957: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_STRING D2Com-Pow-1
15968: PPUSH
15969: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
15973: LD_EXP 36
15977: PPUSH
15978: LD_STRING D2Com-JMM-2
15980: PPUSH
15981: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
15985: LD_EXP 55
15989: PPUSH
15990: LD_STRING D2Com-Pow-2
15992: PPUSH
15993: CALL_OW 88
// end ; end ;
15997: GO 16000
15999: POP
// end ;
16000: LD_VAR 0 3
16004: RET
// every 0 0$5 trigger missionStart do var tmp ;
16005: LD_EXP 13
16009: IFFALSE 16292
16011: GO 16013
16013: DISABLE
16014: LD_INT 0
16016: PPUSH
// begin repeat wait ( 0 0$1 ) ;
16017: LD_INT 35
16019: PPUSH
16020: CALL_OW 67
// if FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) and missionStage in [ 2 , 3 , 4 , 5 ] then
16024: LD_INT 14
16026: PPUSH
16027: LD_INT 22
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PPUSH
16037: CALL_OW 70
16041: PUSH
16042: LD_EXP 15
16046: PUSH
16047: LD_INT 2
16049: PUSH
16050: LD_INT 3
16052: PUSH
16053: LD_INT 4
16055: PUSH
16056: LD_INT 5
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: IN
16065: AND
16066: IFFALSE 16282
// begin powellAnger := powellAnger + 1 ;
16068: LD_ADDR_EXP 17
16072: PUSH
16073: LD_EXP 17
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: ST_TO_ADDR
// Video ( true ) ;
16082: LD_INT 1
16084: PPUSH
16085: CALL 101596 0 1
// CenterNowOnUnits ( tmp ) ;
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 87
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
16098: LD_INT 14
16100: PPUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 1
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PPUSH
16111: CALL_OW 70
16115: PPUSH
16116: LD_INT 86
16118: PPUSH
16119: LD_INT 133
16121: PPUSH
16122: CALL_OW 111
// async ;
16126: ASYNC
// case powellAnger of 1 :
16127: LD_EXP 17
16131: PUSH
16132: LD_INT 1
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16155
16140: POP
// Say ( Powell , DBack1-Pow-1 ) ; 2 :
16141: LD_EXP 55
16145: PPUSH
16146: LD_STRING DBack1-Pow-1
16148: PPUSH
16149: CALL_OW 88
16153: GO 16202
16155: LD_INT 2
16157: DOUBLE
16158: EQUAL
16159: IFTRUE 16163
16161: GO 16178
16163: POP
// Say ( Powell , DBack2-Pow-1 ) ; 3 :
16164: LD_EXP 55
16168: PPUSH
16169: LD_STRING DBack2-Pow-1
16171: PPUSH
16172: CALL_OW 88
16176: GO 16202
16178: LD_INT 3
16180: DOUBLE
16181: EQUAL
16182: IFTRUE 16186
16184: GO 16201
16186: POP
// Say ( Powell , DBack3-Pow-1 ) ; end ;
16187: LD_EXP 55
16191: PPUSH
16192: LD_STRING DBack3-Pow-1
16194: PPUSH
16195: CALL_OW 88
16199: GO 16202
16201: POP
// sync ;
16202: SYNC
// repeat wait ( 0 0$1 ) ;
16203: LD_INT 35
16205: PPUSH
16206: CALL_OW 67
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
16210: LD_INT 14
16212: PPUSH
16213: LD_INT 22
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 70
16227: PPUSH
16228: LD_INT 86
16230: PPUSH
16231: LD_INT 133
16233: PPUSH
16234: CALL_OW 111
// until not FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) ;
16238: LD_INT 14
16240: PPUSH
16241: LD_INT 22
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 70
16255: NOT
16256: IFFALSE 16203
// if powellAnger >= 3 then
16258: LD_EXP 17
16262: PUSH
16263: LD_INT 3
16265: GREATEREQUAL
16266: IFFALSE 16275
// YouLost ( Dismissed ) ;
16268: LD_STRING Dismissed
16270: PPUSH
16271: CALL_OW 104
// Video ( false ) ;
16275: LD_INT 0
16277: PPUSH
16278: CALL 101596 0 1
// end ; until missionStage > 5 ;
16282: LD_EXP 15
16286: PUSH
16287: LD_INT 5
16289: GREATER
16290: IFFALSE 16017
// end ;
16292: PPOPN 1
16294: END
// every 0 0$30 trigger missionStart and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 4 and missionStage = 2 do var i , tmp , tmp2 , retreat , arm , ru , un ;
16295: LD_EXP 13
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_INT 4
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 2
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PPUSH
16324: CALL_OW 69
16328: PUSH
16329: LD_INT 4
16331: GREATEREQUAL
16332: AND
16333: PUSH
16334: LD_EXP 15
16338: PUSH
16339: LD_INT 2
16341: EQUAL
16342: AND
16343: IFFALSE 17901
16345: GO 16347
16347: DISABLE
16348: LD_INT 0
16350: PPUSH
16351: PPUSH
16352: PPUSH
16353: PPUSH
16354: PPUSH
16355: PPUSH
16356: PPUSH
// begin missionStage := 3 ;
16357: LD_ADDR_EXP 15
16361: PUSH
16362: LD_INT 3
16364: ST_TO_ADDR
// retreat := false ;
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16373: LD_ADDR_VAR 0 5
16377: PUSH
16378: LD_INT 22
16380: PUSH
16381: LD_INT 4
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 4
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PPUSH
16402: CALL_OW 69
16406: PUSH
16407: LD_INT 1
16409: ARRAY
16410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16411: LD_INT 35
16413: PPUSH
16414: CALL_OW 67
// until mc_vehicles [ 4 ] >= 4 ;
16418: LD_EXP 118
16422: PUSH
16423: LD_INT 4
16425: ARRAY
16426: PUSH
16427: LD_INT 4
16429: GREATEREQUAL
16430: IFFALSE 16411
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff ( Powell ^ vip ) ;
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_INT 4
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: LD_INT 25
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 25
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 25
16482: PUSH
16483: LD_INT 4
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 25
16492: PUSH
16493: LD_INT 5
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: PUSH
16517: LD_EXP 55
16521: PUSH
16522: LD_EXP 56
16526: ADD
16527: DIFF
16528: ST_TO_ADDR
// tmp2 := UnitFilter ( tmp , [ f_sex , sex_male ] ) ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_VAR 0 2
16538: PPUSH
16539: LD_INT 26
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 72
16553: ST_TO_ADDR
// tmp := tmp diff tmp2 ;
16554: LD_ADDR_VAR 0 2
16558: PUSH
16559: LD_VAR 0 2
16563: PUSH
16564: LD_VAR 0 3
16568: DIFF
16569: ST_TO_ADDR
// for i = 1 to 4 do
16570: LD_ADDR_VAR 0 1
16574: PUSH
16575: DOUBLE
16576: LD_INT 1
16578: DEC
16579: ST_TO_ADDR
16580: LD_INT 4
16582: PUSH
16583: FOR_TO
16584: IFFALSE 16750
// begin if tmp2 then
16586: LD_VAR 0 3
16590: IFFALSE 16671
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp2 [ tmp2 ] ) ;
16592: LD_ADDR_EXP 18
16596: PUSH
16597: LD_EXP 18
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_EXP 18
16609: PUSH
16610: LD_INT 1
16612: ARRAY
16613: PUSH
16614: LD_VAR 0 3
16618: PUSH
16619: LD_VAR 0 3
16623: ARRAY
16624: ADD
16625: PPUSH
16626: CALL_OW 1
16630: ST_TO_ADDR
// SetTag ( tmp2 [ tmp2 ] , 1 ) ;
16631: LD_VAR 0 3
16635: PUSH
16636: LD_VAR 0 3
16640: ARRAY
16641: PPUSH
16642: LD_INT 1
16644: PPUSH
16645: CALL_OW 109
// tmp2 := Delete ( tmp2 , tmp2 ) ;
16649: LD_ADDR_VAR 0 3
16653: PUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: CALL_OW 3
16668: ST_TO_ADDR
// end else
16669: GO 16748
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp [ tmp ] ) ;
16671: LD_ADDR_EXP 18
16675: PUSH
16676: LD_EXP 18
16680: PPUSH
16681: LD_INT 1
16683: PPUSH
16684: LD_EXP 18
16688: PUSH
16689: LD_INT 1
16691: ARRAY
16692: PUSH
16693: LD_VAR 0 2
16697: PUSH
16698: LD_VAR 0 2
16702: ARRAY
16703: ADD
16704: PPUSH
16705: CALL_OW 1
16709: ST_TO_ADDR
// SetTag ( tmp [ tmp ] , 1 ) ;
16710: LD_VAR 0 2
16714: PUSH
16715: LD_VAR 0 2
16719: ARRAY
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 109
// tmp := Delete ( tmp , tmp ) ;
16728: LD_ADDR_VAR 0 2
16732: PUSH
16733: LD_VAR 0 2
16737: PPUSH
16738: LD_VAR 0 2
16742: PPUSH
16743: CALL_OW 3
16747: ST_TO_ADDR
// end ; end ;
16748: GO 16583
16750: POP
16751: POP
// if tmp2 then
16752: LD_VAR 0 3
16756: IFFALSE 16774
// tmp := tmp union tmp2 ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PUSH
16768: LD_VAR 0 3
16772: UNION
16773: ST_TO_ADDR
// for i = 1 to 4 do
16774: LD_ADDR_VAR 0 1
16778: PUSH
16779: DOUBLE
16780: LD_INT 1
16782: DEC
16783: ST_TO_ADDR
16784: LD_INT 4
16786: PUSH
16787: FOR_TO
16788: IFFALSE 16837
// powellSquadAttack := Replace ( powellSquadAttack , 2 , powellSquadAttack [ 2 ] ^ tmp [ tmp - i ] ) ;
16790: LD_ADDR_EXP 18
16794: PUSH
16795: LD_EXP 18
16799: PPUSH
16800: LD_INT 2
16802: PPUSH
16803: LD_EXP 18
16807: PUSH
16808: LD_INT 2
16810: ARRAY
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_VAR 0 2
16821: PUSH
16822: LD_VAR 0 1
16826: MINUS
16827: ARRAY
16828: ADD
16829: PPUSH
16830: CALL_OW 1
16834: ST_TO_ADDR
16835: GO 16787
16837: POP
16838: POP
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff powellSquadAttack [ 1 ] ) ;
16839: LD_ADDR_EXP 99
16843: PUSH
16844: LD_EXP 99
16848: PPUSH
16849: LD_INT 4
16851: PPUSH
16852: LD_EXP 99
16856: PUSH
16857: LD_INT 4
16859: ARRAY
16860: PUSH
16861: LD_EXP 18
16865: PUSH
16866: LD_INT 1
16868: ARRAY
16869: DIFF
16870: PPUSH
16871: CALL_OW 1
16875: ST_TO_ADDR
// for i in powellSquadAttack [ 1 ] do
16876: LD_ADDR_VAR 0 1
16880: PUSH
16881: LD_EXP 18
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16994
// begin if IsInUnit ( i ) then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 310
16902: IFFALSE 16913
// ComExitBuilding ( i ) ;
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 122
// if GetClass ( i ) <> 1 then
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 257
16922: PUSH
16923: LD_INT 1
16925: NONEQUAL
16926: IFFALSE 16963
// begin AddComEnterUnit ( i , arm ) ;
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_VAR 0 5
16937: PPUSH
16938: CALL_OW 180
// AddComChangeProfession ( i , class_soldier ) ;
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 183
// AddComExitBuilding ( i ) ;
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 182
// end ; AddComMoveXY ( i , 60 , 94 ) ;
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 60
16970: PPUSH
16971: LD_INT 94
16973: PPUSH
16974: CALL_OW 171
// AddComTurnUnit ( i , Powell ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_EXP 55
16987: PPUSH
16988: CALL_OW 179
// end ;
16992: GO 16890
16994: POP
16995: POP
// wait ( 0 0$15 ) ;
16996: LD_INT 525
16998: PPUSH
16999: CALL_OW 67
// Say ( Powell , D4-Pow-1 ) ;
17003: LD_EXP 55
17007: PPUSH
17008: LD_STRING D4-Pow-1
17010: PPUSH
17011: CALL_OW 88
// tmp := UnitFilter ( powellSquadAttack [ 1 ] , [ f_sex , sex_male ] ) ;
17015: LD_ADDR_VAR 0 2
17019: PUSH
17020: LD_EXP 18
17024: PUSH
17025: LD_INT 1
17027: ARRAY
17028: PPUSH
17029: LD_INT 26
17031: PUSH
17032: LD_INT 1
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 72
17043: ST_TO_ADDR
// if tmp then
17044: LD_VAR 0 2
17048: IFFALSE 17066
// Say ( tmp [ 1 ] , D4-Sol1-1 ) ;
17050: LD_VAR 0 2
17054: PUSH
17055: LD_INT 1
17057: ARRAY
17058: PPUSH
17059: LD_STRING D4-Sol1-1
17061: PPUSH
17062: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
17066: LD_EXP 55
17070: PPUSH
17071: LD_STRING D4-Pow-2
17073: PPUSH
17074: CALL_OW 88
// for i = 1 to powellSquadAttack [ 1 ] do
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_EXP 18
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: PUSH
17097: FOR_TO
17098: IFFALSE 17191
// begin ComEnterUnit ( powellSquadAttack [ 1 ] [ i ] , mc_vehicles [ 4 ] [ 1 ] ) ;
17100: LD_EXP 18
17104: PUSH
17105: LD_INT 1
17107: ARRAY
17108: PUSH
17109: LD_VAR 0 1
17113: ARRAY
17114: PPUSH
17115: LD_EXP 118
17119: PUSH
17120: LD_INT 4
17122: ARRAY
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: CALL_OW 120
// mc_vehicles := Replace ( mc_vehicles , 4 , Delete ( mc_vehicles [ 4 ] , 1 ) ) ;
17132: LD_ADDR_EXP 118
17136: PUSH
17137: LD_EXP 118
17141: PPUSH
17142: LD_INT 4
17144: PPUSH
17145: LD_EXP 118
17149: PUSH
17150: LD_INT 4
17152: ARRAY
17153: PPUSH
17154: LD_INT 1
17156: PPUSH
17157: CALL_OW 3
17161: PPUSH
17162: CALL_OW 1
17166: ST_TO_ADDR
// DoNotAttack ( 8 , powellSquadAttack [ 1 ] [ i ] ) ;
17167: LD_INT 8
17169: PPUSH
17170: LD_EXP 18
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: PUSH
17179: LD_VAR 0 1
17183: ARRAY
17184: PPUSH
17185: CALL_OW 471
// end ;
17189: GO 17097
17191: POP
17192: POP
// repeat wait ( 0 0$1 ) ;
17193: LD_INT 35
17195: PPUSH
17196: CALL_OW 67
// until UnitFilter ( powellSquadAttack [ 1 ] , [ f_driving ] ) >= 4 ;
17200: LD_EXP 18
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_INT 55
17211: PUSH
17212: EMPTY
17213: LIST
17214: PPUSH
17215: CALL_OW 72
17219: PUSH
17220: LD_INT 4
17222: GREATEREQUAL
17223: IFFALSE 17193
// ComMoveXY ( powellSquadAttack [ 1 ] , 69 , 94 ) ;
17225: LD_EXP 18
17229: PUSH
17230: LD_INT 1
17232: ARRAY
17233: PPUSH
17234: LD_INT 69
17236: PPUSH
17237: LD_INT 94
17239: PPUSH
17240: CALL_OW 111
// AddComMoveXY ( powellSquadAttack [ 1 ] , 82 , 83 ) ;
17244: LD_EXP 18
17248: PUSH
17249: LD_INT 1
17251: ARRAY
17252: PPUSH
17253: LD_INT 82
17255: PPUSH
17256: LD_INT 83
17258: PPUSH
17259: CALL_OW 171
// AddComAgressiveMove ( powellSquadAttack [ 1 ] , 77 , 69 ) ;
17263: LD_EXP 18
17267: PUSH
17268: LD_INT 1
17270: ARRAY
17271: PPUSH
17272: LD_INT 77
17274: PPUSH
17275: LD_INT 69
17277: PPUSH
17278: CALL_OW 174
// repeat wait ( 3 ) ;
17282: LD_INT 3
17284: PPUSH
17285: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: LD_EXP 18
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17413
// begin if GetLives ( i ) < 990 then
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 256
17315: PUSH
17316: LD_INT 990
17318: LESS
17319: IFFALSE 17333
// SetLives ( i , 1000 ) ;
17321: LD_VAR 0 1
17325: PPUSH
17326: LD_INT 1000
17328: PPUSH
17329: CALL_OW 234
// if not IsInUnit ( i ) then
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 310
17342: NOT
17343: IFFALSE 17411
// begin if not retreat and GetSex ( i ) = sex_male then
17345: LD_VAR 0 4
17349: NOT
17350: PUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 258
17360: PUSH
17361: LD_INT 1
17363: EQUAL
17364: AND
17365: IFFALSE 17411
// begin retreat := true ;
17367: LD_ADDR_VAR 0 4
17371: PUSH
17372: LD_INT 1
17374: ST_TO_ADDR
// SetTag ( i , 2 ) ;
17375: LD_VAR 0 1
17379: PPUSH
17380: LD_INT 2
17382: PPUSH
17383: CALL_OW 109
// Say ( i , D4a-Sol1-1 ) ;
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_STRING D4a-Sol1-1
17394: PPUSH
17395: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
17399: LD_EXP 55
17403: PPUSH
17404: LD_STRING D4a-Pow-1
17406: PPUSH
17407: CALL_OW 88
// end ; end ; end ;
17411: GO 17303
17413: POP
17414: POP
// until UnitFilter ( powellSquadAttack [ 1 ] , [ [ f_inarea , powellBase ] , [ f_not , [ f_driving ] ] ] ) >= 4 ;
17415: LD_EXP 18
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: LD_INT 95
17426: PUSH
17427: LD_INT 9
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 3
17436: PUSH
17437: LD_INT 55
17439: PUSH
17440: EMPTY
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 72
17455: PUSH
17456: LD_INT 4
17458: GREATEREQUAL
17459: IFFALSE 17282
// for i in powellSquadAttack [ 1 ] do
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: LD_EXP 18
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PUSH
17475: FOR_IN
17476: IFFALSE 17612
// begin if GetTag ( i ) = 2 then
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 110
17487: PUSH
17488: LD_INT 2
17490: EQUAL
17491: IFFALSE 17553
// begin ComMoveXY ( i , 60 , 94 ) ;
17493: LD_VAR 0 1
17497: PPUSH
17498: LD_INT 60
17500: PPUSH
17501: LD_INT 94
17503: PPUSH
17504: CALL_OW 111
// AddComTurnUnit ( i , Powell ) ;
17508: LD_VAR 0 1
17512: PPUSH
17513: LD_EXP 55
17517: PPUSH
17518: CALL_OW 179
// wait ( 0 0$3 ) ;
17522: LD_INT 105
17524: PPUSH
17525: CALL_OW 67
// Say ( i , D4a-Sol1-2 ) ;
17529: LD_VAR 0 1
17533: PPUSH
17534: LD_STRING D4a-Sol1-2
17536: PPUSH
17537: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
17541: LD_EXP 55
17545: PPUSH
17546: LD_STRING D4a-Pow-2
17548: PPUSH
17549: CALL_OW 88
// end ; SetTag ( i , 0 ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_INT 0
17560: PPUSH
17561: CALL_OW 109
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] union i ) ;
17565: LD_ADDR_EXP 99
17569: PUSH
17570: LD_EXP 99
17574: PPUSH
17575: LD_INT 4
17577: PPUSH
17578: LD_EXP 99
17582: PUSH
17583: LD_INT 4
17585: ARRAY
17586: PUSH
17587: LD_VAR 0 1
17591: UNION
17592: PPUSH
17593: CALL_OW 1
17597: ST_TO_ADDR
// NormalAttack ( 8 , i ) ;
17598: LD_INT 8
17600: PPUSH
17601: LD_VAR 0 1
17605: PPUSH
17606: CALL_OW 472
// end ;
17610: GO 17475
17612: POP
17613: POP
// wait ( 4 4$00 ) ;
17614: LD_INT 8400
17616: PPUSH
17617: CALL_OW 67
// uc_side := 6 ;
17621: LD_ADDR_OWVAR 20
17625: PUSH
17626: LD_INT 6
17628: ST_TO_ADDR
// uc_nation := 3 ;
17629: LD_ADDR_OWVAR 21
17633: PUSH
17634: LD_INT 3
17636: ST_TO_ADDR
// ru := [ ] ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: EMPTY
17643: ST_TO_ADDR
// for i = 1 to 4 do
17644: LD_ADDR_VAR 0 1
17648: PUSH
17649: DOUBLE
17650: LD_INT 1
17652: DEC
17653: ST_TO_ADDR
17654: LD_INT 4
17656: PUSH
17657: FOR_TO
17658: IFFALSE 17759
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , 89 ) ;
17660: LD_INT 22
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: LD_INT 3
17668: PPUSH
17669: LD_INT 43
17671: PUSH
17672: LD_INT 44
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: PPUSH
17682: LD_INT 2
17684: PPUSH
17685: CALL_OW 12
17689: ARRAY
17690: PPUSH
17691: LD_INT 89
17693: PPUSH
17694: CALL 65941 0 5
// un := CreateVehicle ;
17698: LD_ADDR_VAR 0 7
17702: PUSH
17703: CALL_OW 45
17707: ST_TO_ADDR
// SetDir ( un , 4 ) ;
17708: LD_VAR 0 7
17712: PPUSH
17713: LD_INT 4
17715: PPUSH
17716: CALL_OW 233
// PlaceUnitXYR ( un , 136 , 90 , 8 , false ) ;
17720: LD_VAR 0 7
17724: PPUSH
17725: LD_INT 136
17727: PPUSH
17728: LD_INT 90
17730: PPUSH
17731: LD_INT 8
17733: PPUSH
17734: LD_INT 0
17736: PPUSH
17737: CALL_OW 50
// ru := ru ^ un ;
17741: LD_ADDR_VAR 0 6
17745: PUSH
17746: LD_VAR 0 6
17750: PUSH
17751: LD_VAR 0 7
17755: ADD
17756: ST_TO_ADDR
// end ;
17757: GO 17657
17759: POP
17760: POP
// if ru then
17761: LD_VAR 0 6
17765: IFFALSE 17782
// ComAgressiveMove ( ru , 80 , 93 ) ;
17767: LD_VAR 0 6
17771: PPUSH
17772: LD_INT 80
17774: PPUSH
17775: LD_INT 93
17777: PPUSH
17778: CALL_OW 114
// wait ( 8 8$00 ) ;
17782: LD_INT 16800
17784: PPUSH
17785: CALL_OW 67
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
17789: LD_INT 4
17791: PPUSH
17792: LD_INT 3
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: LD_INT 1
17800: PUSH
17801: LD_INT 5
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 4
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: LD_INT 6
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 4
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 7
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 7
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 3
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: LD_INT 5
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: PPUSH
17889: CALL 53365 0 2
// missionStage := 4 ;
17893: LD_ADDR_EXP 15
17897: PUSH
17898: LD_INT 4
17900: ST_TO_ADDR
// end ;
17901: PPOPN 7
17903: END
// every 0 0$30 trigger missionStage = 4 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 5 do var i , j , tmp , tmp2 , xy , forces , _xy , dist , fac , arm , speaker , emp_towers , veh ;
17904: LD_EXP 15
17908: PUSH
17909: LD_INT 4
17911: EQUAL
17912: PUSH
17913: LD_INT 22
17915: PUSH
17916: LD_INT 4
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 2
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: PUSH
17942: LD_INT 5
17944: GREATEREQUAL
17945: AND
17946: IFFALSE 22000
17948: GO 17950
17950: DISABLE
17951: LD_INT 0
17953: PPUSH
17954: PPUSH
17955: PPUSH
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
// begin missionStage := 5 ;
17966: LD_ADDR_EXP 15
17970: PUSH
17971: LD_INT 5
17973: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17974: LD_ADDR_VAR 0 10
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_INT 4
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 30
17994: PUSH
17995: LD_INT 4
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 30
18004: PUSH
18005: LD_INT 5
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 69
18025: ST_TO_ADDR
// forces := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 16 ] ] , [ f_not , [ f_class , 12 ] ] ] ) diff Powell ;
18026: LD_ADDR_VAR 0 6
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 4
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 3
18053: PUSH
18054: LD_INT 25
18056: PUSH
18057: LD_INT 16
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 3
18070: PUSH
18071: LD_INT 25
18073: PUSH
18074: LD_INT 12
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL_OW 69
18095: PUSH
18096: LD_EXP 55
18100: DIFF
18101: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18102: LD_ADDR_VAR 0 9
18106: PUSH
18107: LD_INT 22
18109: PUSH
18110: LD_INT 4
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 30
18119: PUSH
18120: LD_INT 3
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: PUSH
18136: LD_INT 1
18138: ARRAY
18139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18140: LD_INT 35
18142: PPUSH
18143: CALL_OW 67
// until mc_vehicles [ 4 ] >= 5 ;
18147: LD_EXP 118
18151: PUSH
18152: LD_INT 4
18154: ARRAY
18155: PUSH
18156: LD_INT 5
18158: GREATEREQUAL
18159: IFFALSE 18140
// powellAllowRetreat := false ;
18161: LD_ADDR_EXP 19
18165: PUSH
18166: LD_INT 0
18168: ST_TO_ADDR
// wait ( 0 0$20 ) ;
18169: LD_INT 700
18171: PPUSH
18172: CALL_OW 67
// activeAttacks := false ;
18176: LD_ADDR_EXP 16
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18184: LD_INT 35
18186: PPUSH
18187: CALL_OW 67
// until FilterAllUnits ( [ f_side , 6 ] ) = 0 ;
18191: LD_INT 22
18193: PUSH
18194: LD_INT 6
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PPUSH
18201: CALL_OW 69
18205: PUSH
18206: LD_INT 0
18208: EQUAL
18209: IFFALSE 18184
// tmp := mc_vehicles [ 4 ] ;
18211: LD_ADDR_VAR 0 3
18215: PUSH
18216: LD_EXP 118
18220: PUSH
18221: LD_INT 4
18223: ARRAY
18224: ST_TO_ADDR
// for i = 1 to powellSquadAttack do
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: DOUBLE
18231: LD_INT 1
18233: DEC
18234: ST_TO_ADDR
18235: LD_EXP 18
18239: PUSH
18240: FOR_TO
18241: IFFALSE 18502
// begin for j in powellSquadAttack [ i ] do
18243: LD_ADDR_VAR 0 2
18247: PUSH
18248: LD_EXP 18
18252: PUSH
18253: LD_VAR 0 1
18257: ARRAY
18258: PUSH
18259: FOR_IN
18260: IFFALSE 18498
// begin forces := forces diff j ;
18262: LD_ADDR_VAR 0 6
18266: PUSH
18267: LD_VAR 0 6
18271: PUSH
18272: LD_VAR 0 2
18276: DIFF
18277: ST_TO_ADDR
// SetTag ( j , 1 ) ;
18278: LD_VAR 0 2
18282: PPUSH
18283: LD_INT 1
18285: PPUSH
18286: CALL_OW 109
// wait ( 0 0$2 ) ;
18290: LD_INT 70
18292: PPUSH
18293: CALL_OW 67
// if IsInUnit ( j ) then
18297: LD_VAR 0 2
18301: PPUSH
18302: CALL_OW 310
18306: IFFALSE 18317
// ComExitBuilding ( j ) ;
18308: LD_VAR 0 2
18312: PPUSH
18313: CALL_OW 122
// if GetClass ( j ) <> 1 then
18317: LD_VAR 0 2
18321: PPUSH
18322: CALL_OW 257
18326: PUSH
18327: LD_INT 1
18329: NONEQUAL
18330: IFFALSE 18410
// begin if UnitsInside ( arm [ 1 ] ) >= 5 then
18332: LD_VAR 0 10
18336: PUSH
18337: LD_INT 1
18339: ARRAY
18340: PPUSH
18341: CALL_OW 313
18345: PUSH
18346: LD_INT 5
18348: GREATEREQUAL
18349: IFFALSE 18371
// AddComEnterUnit ( j , arm [ 2 ] ) else
18351: LD_VAR 0 2
18355: PPUSH
18356: LD_VAR 0 10
18360: PUSH
18361: LD_INT 2
18363: ARRAY
18364: PPUSH
18365: CALL_OW 180
18369: GO 18389
// AddComEnterUnit ( j , arm [ 1 ] ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_VAR 0 10
18380: PUSH
18381: LD_INT 1
18383: ARRAY
18384: PPUSH
18385: CALL_OW 180
// AddComChangeProfession ( j , 1 ) ;
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 183
// AddComExitBuilding ( j ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: CALL_OW 182
// end ; if i = 2 then
18410: LD_VAR 0 1
18414: PUSH
18415: LD_INT 2
18417: EQUAL
18418: IFFALSE 18435
// AddComMoveXY ( j , 61 , 93 ) ;
18420: LD_VAR 0 2
18424: PPUSH
18425: LD_INT 61
18427: PPUSH
18428: LD_INT 93
18430: PPUSH
18431: CALL_OW 171
// if i = 1 then
18435: LD_VAR 0 1
18439: PUSH
18440: LD_INT 1
18442: EQUAL
18443: IFFALSE 18496
// begin AddComEnterUnit ( j , tmp [ 1 ] ) ;
18445: LD_VAR 0 2
18449: PPUSH
18450: LD_VAR 0 3
18454: PUSH
18455: LD_INT 1
18457: ARRAY
18458: PPUSH
18459: CALL_OW 180
// tmp := Delete ( tmp , 1 ) ;
18463: LD_ADDR_VAR 0 3
18467: PUSH
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: CALL_OW 3
18480: ST_TO_ADDR
// AddComMoveXY ( j , 69 , 94 ) ;
18481: LD_VAR 0 2
18485: PPUSH
18486: LD_INT 69
18488: PPUSH
18489: LD_INT 94
18491: PPUSH
18492: CALL_OW 171
// end ; end ;
18496: GO 18259
18498: POP
18499: POP
// end ;
18500: GO 18240
18502: POP
18503: POP
// wait ( 0 0$45 ) ;
18504: LD_INT 1575
18506: PPUSH
18507: CALL_OW 67
// MC_Kill ( 4 ) ;
18511: LD_INT 4
18513: PPUSH
18514: CALL 31657 0 1
// tmp := UnitsInside ( fac ) ;
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_VAR 0 9
18527: PPUSH
18528: CALL_OW 313
18532: ST_TO_ADDR
// if tmp then
18533: LD_VAR 0 3
18537: IFFALSE 18658
// for i in tmp do
18539: LD_ADDR_VAR 0 1
18543: PUSH
18544: LD_VAR 0 3
18548: PUSH
18549: FOR_IN
18550: IFFALSE 18656
// begin ComExitBuilding ( i ) ;
18552: LD_VAR 0 1
18556: PPUSH
18557: CALL_OW 122
// if UnitsInside ( arm [ 2 ] ) < 6 then
18561: LD_VAR 0 10
18565: PUSH
18566: LD_INT 2
18568: ARRAY
18569: PPUSH
18570: CALL_OW 313
18574: PUSH
18575: LD_INT 6
18577: LESS
18578: IFFALSE 18600
// AddComEnterUnit ( i , arm [ 2 ] ) else
18580: LD_VAR 0 1
18584: PPUSH
18585: LD_VAR 0 10
18589: PUSH
18590: LD_INT 2
18592: ARRAY
18593: PPUSH
18594: CALL_OW 180
18598: GO 18654
// if UnitsInside ( arm [ 1 ] ) < 6 then
18600: LD_VAR 0 10
18604: PUSH
18605: LD_INT 1
18607: ARRAY
18608: PPUSH
18609: CALL_OW 313
18613: PUSH
18614: LD_INT 6
18616: LESS
18617: IFFALSE 18639
// AddComEnterUnit ( i , arm [ 1 ] ) else
18619: LD_VAR 0 1
18623: PPUSH
18624: LD_VAR 0 10
18628: PUSH
18629: LD_INT 1
18631: ARRAY
18632: PPUSH
18633: CALL_OW 180
18637: GO 18654
// AddComMoveXY ( i , 37 , 68 ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_INT 37
18646: PPUSH
18647: LD_INT 68
18649: PPUSH
18650: CALL_OW 171
// end ;
18654: GO 18549
18656: POP
18657: POP
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) diff vip ;
18658: LD_ADDR_VAR 0 11
18662: PUSH
18663: LD_VAR 0 6
18667: PPUSH
18668: LD_INT 26
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 72
18682: PUSH
18683: LD_EXP 56
18687: DIFF
18688: ST_TO_ADDR
// if not speaker then
18689: LD_VAR 0 11
18693: NOT
18694: IFFALSE 18721
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) ;
18696: LD_ADDR_VAR 0 11
18700: PUSH
18701: LD_VAR 0 6
18705: PPUSH
18706: LD_INT 26
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 72
18720: ST_TO_ADDR
// if speaker then
18721: LD_VAR 0 11
18725: IFFALSE 18741
// speaker := speaker [ 1 ] ;
18727: LD_ADDR_VAR 0 11
18731: PUSH
18732: LD_VAR 0 11
18736: PUSH
18737: LD_INT 1
18739: ARRAY
18740: ST_TO_ADDR
// Video ( true ) ;
18741: LD_INT 1
18743: PPUSH
18744: CALL 101596 0 1
// CenterNowOnUnits ( Powell ) ;
18748: LD_EXP 55
18752: PPUSH
18753: CALL_OW 87
// tmp := UnitFilter ( forces , [ f_not , [ f_class , 1 ] ] ) ;
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_VAR 0 6
18766: PPUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 25
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PPUSH
18784: CALL_OW 72
18788: ST_TO_ADDR
// emp_towers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
18789: LD_ADDR_VAR 0 12
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_INT 4
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 30
18806: PUSH
18807: LD_INT 32
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 58
18816: PUSH
18817: EMPTY
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: ST_TO_ADDR
// for i = 1 to 6 do
18830: LD_ADDR_VAR 0 1
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_INT 6
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18985
// begin if IsInUnit ( tmp [ i ] ) then
18846: LD_VAR 0 3
18850: PUSH
18851: LD_VAR 0 1
18855: ARRAY
18856: PPUSH
18857: CALL_OW 310
18861: IFFALSE 18878
// ComExitBuilding ( tmp [ i ] ) ;
18863: LD_VAR 0 3
18867: PUSH
18868: LD_VAR 0 1
18872: ARRAY
18873: PPUSH
18874: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
18878: LD_VAR 0 3
18882: PUSH
18883: LD_VAR 0 1
18887: ARRAY
18888: PPUSH
18889: LD_VAR 0 10
18893: PUSH
18894: LD_INT 1
18896: ARRAY
18897: PPUSH
18898: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
18902: LD_VAR 0 3
18906: PUSH
18907: LD_VAR 0 1
18911: ARRAY
18912: PPUSH
18913: LD_INT 1
18915: PPUSH
18916: CALL_OW 183
// if emp_towers then
18920: LD_VAR 0 12
18924: IFFALSE 18983
// begin AddComExitBuilding ( tmp [ i ] ) ;
18926: LD_VAR 0 3
18930: PUSH
18931: LD_VAR 0 1
18935: ARRAY
18936: PPUSH
18937: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emp_towers [ 1 ] ) ;
18941: LD_VAR 0 3
18945: PUSH
18946: LD_VAR 0 1
18950: ARRAY
18951: PPUSH
18952: LD_VAR 0 12
18956: PUSH
18957: LD_INT 1
18959: ARRAY
18960: PPUSH
18961: CALL_OW 180
// emp_towers := Delete ( emp_towers , 1 ) ;
18965: LD_ADDR_VAR 0 12
18969: PUSH
18970: LD_VAR 0 12
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: CALL_OW 3
18982: ST_TO_ADDR
// end ; end ;
18983: GO 18843
18985: POP
18986: POP
// tmp := UnitFilter ( powellSquadAttack [ 1 ] ^ powellSquadAttack [ 2 ] , [ f_sex , sex_male ] ) ;
18987: LD_ADDR_VAR 0 3
18991: PUSH
18992: LD_EXP 18
18996: PUSH
18997: LD_INT 1
18999: ARRAY
19000: PUSH
19001: LD_EXP 18
19005: PUSH
19006: LD_INT 2
19008: ARRAY
19009: ADD
19010: PPUSH
19011: LD_INT 26
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 72
19025: ST_TO_ADDR
// for i in powellSquadAttack [ 2 ] do
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_EXP 18
19035: PUSH
19036: LD_INT 2
19038: ARRAY
19039: PUSH
19040: FOR_IN
19041: IFFALSE 19059
// ComTurnUnit ( i , Powell ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_EXP 55
19052: PPUSH
19053: CALL_OW 119
19057: GO 19040
19059: POP
19060: POP
// Say ( Powell , D5-Pow-1 ) ;
19061: LD_EXP 55
19065: PPUSH
19066: LD_STRING D5-Pow-1
19068: PPUSH
19069: CALL_OW 88
// if tmp then
19073: LD_VAR 0 3
19077: IFFALSE 19095
// Say ( tmp [ 1 ] , D5-Sol2-1 ) ;
19079: LD_VAR 0 3
19083: PUSH
19084: LD_INT 1
19086: ARRAY
19087: PPUSH
19088: LD_STRING D5-Sol2-1
19090: PPUSH
19091: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
19095: LD_EXP 55
19099: PPUSH
19100: LD_STRING D5-Pow-2
19102: PPUSH
19103: CALL_OW 88
// if tmp > 1 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 1
19114: GREATER
19115: IFFALSE 19133
// Say ( tmp [ 2 ] , D5-Sol2-2 ) ;
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 2
19124: ARRAY
19125: PPUSH
19126: LD_STRING D5-Sol2-2
19128: PPUSH
19129: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
19133: LD_EXP 55
19137: PPUSH
19138: LD_STRING D5-Pow-3
19140: PPUSH
19141: CALL_OW 88
// wait ( 0 0$1 ) ;
19145: LD_INT 35
19147: PPUSH
19148: CALL_OW 67
// tmp := powellSquadAttack [ 1 ] union powellSquadAttack [ 2 ] ;
19152: LD_ADDR_VAR 0 3
19156: PUSH
19157: LD_EXP 18
19161: PUSH
19162: LD_INT 1
19164: ARRAY
19165: PUSH
19166: LD_EXP 18
19170: PUSH
19171: LD_INT 2
19173: ARRAY
19174: UNION
19175: ST_TO_ADDR
// ComAgressiveMove ( tmp , 80 , 67 ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_INT 80
19183: PPUSH
19184: LD_INT 67
19186: PPUSH
19187: CALL_OW 114
// wait ( 0 0$2 ) ;
19191: LD_INT 70
19193: PPUSH
19194: CALL_OW 67
// CenterOnXY ( 79 , 72 ) ;
19198: LD_INT 79
19200: PPUSH
19201: LD_INT 72
19203: PPUSH
19204: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
19208: LD_INT 35
19210: PPUSH
19211: CALL_OW 67
// until UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) ;
19215: LD_VAR 0 3
19219: PPUSH
19220: LD_INT 3
19222: PUSH
19223: LD_INT 24
19225: PUSH
19226: LD_INT 1000
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PPUSH
19237: CALL_OW 72
19241: IFFALSE 19208
// Say ( Powell , D5a-Pow-1 ) ;
19243: LD_EXP 55
19247: PPUSH
19248: LD_STRING D5a-Pow-1
19250: PPUSH
19251: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
19255: LD_EXP 55
19259: PPUSH
19260: LD_STRING D5a-Pow-1a
19262: PPUSH
19263: CALL_OW 88
// wait ( 0 0$0.3 ) ;
19267: LD_INT 10
19269: PPUSH
19270: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
19274: LD_EXP 55
19278: PPUSH
19279: LD_STRING D5a-Pow-1b
19281: PPUSH
19282: CALL_OW 88
// Say ( Powell , D5a-Pow-1c ) ;
19286: LD_EXP 55
19290: PPUSH
19291: LD_STRING D5a-Pow-1c
19293: PPUSH
19294: CALL_OW 88
// Say ( Powell , D5a-Pow-1d ) ;
19298: LD_EXP 55
19302: PPUSH
19303: LD_STRING D5a-Pow-1d
19305: PPUSH
19306: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
19310: LD_INT 35
19312: PPUSH
19313: CALL_OW 67
// if not HasTask ( tmp ) then
19317: LD_VAR 0 3
19321: PPUSH
19322: CALL_OW 314
19326: NOT
19327: IFFALSE 19344
// ComAgressiveMove ( tmp , 80 , 67 ) ;
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 80
19336: PPUSH
19337: LD_INT 67
19339: PPUSH
19340: CALL_OW 114
// until not UnitFilter ( tmp , [ f_lives , 1 ] ) ;
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 24
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 72
19363: NOT
19364: IFFALSE 19310
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 60 , 93 , 10 ] , [ f_not , [ f_inside ] ] ] ) diff Powell ;
19366: LD_ADDR_VAR 0 3
19370: PUSH
19371: LD_INT 22
19373: PUSH
19374: LD_INT 4
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 92
19383: PUSH
19384: LD_INT 60
19386: PUSH
19387: LD_INT 93
19389: PUSH
19390: LD_INT 10
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 3
19401: PUSH
19402: LD_INT 54
19404: PUSH
19405: EMPTY
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PUSH
19422: LD_EXP 55
19426: DIFF
19427: ST_TO_ADDR
// if tmp then
19428: LD_VAR 0 3
19432: IFFALSE 19466
// for i in tmp do
19434: LD_ADDR_VAR 0 1
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19464
// ComMoveXY ( i , 36 , 67 ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: LD_INT 36
19454: PPUSH
19455: LD_INT 67
19457: PPUSH
19458: CALL_OW 111
19462: GO 19444
19464: POP
19465: POP
// wait ( 0 0$3 ) ;
19466: LD_INT 105
19468: PPUSH
19469: CALL_OW 67
// Say ( speaker , D6-Sol3-1 ) ;
19473: LD_VAR 0 11
19477: PPUSH
19478: LD_STRING D6-Sol3-1
19480: PPUSH
19481: CALL_OW 88
// CenterNowOnUnits ( Powell ) ;
19485: LD_EXP 55
19489: PPUSH
19490: CALL_OW 87
// Say ( Powell , D6-Pow-1 ) ;
19494: LD_EXP 55
19498: PPUSH
19499: LD_STRING D6-Pow-1
19501: PPUSH
19502: CALL_OW 88
// tmp := [ ] ;
19506: LD_ADDR_VAR 0 3
19510: PUSH
19511: EMPTY
19512: ST_TO_ADDR
// for i = 1 to 2 do
19513: LD_ADDR_VAR 0 1
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_INT 2
19525: PUSH
19526: FOR_TO
19527: IFFALSE 19634
// begin uc_side := 8 ;
19529: LD_ADDR_OWVAR 20
19533: PUSH
19534: LD_INT 8
19536: ST_TO_ADDR
// uc_nation := 2 ;
19537: LD_ADDR_OWVAR 21
19541: PUSH
19542: LD_INT 2
19544: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb , 100 ) ;
19545: LD_INT 14
19547: PPUSH
19548: LD_INT 3
19550: PPUSH
19551: LD_INT 2
19553: PPUSH
19554: LD_INT 29
19556: PPUSH
19557: LD_INT 100
19559: PPUSH
19560: CALL 65941 0 5
// veh := CreateVehicle ;
19564: LD_ADDR_VAR 0 13
19568: PUSH
19569: CALL_OW 45
19573: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
19574: LD_VAR 0 13
19578: PPUSH
19579: LD_INT 4
19581: PPUSH
19582: CALL_OW 233
// PlaceUnitXYR ( veh , 99 , 83 , 5 , false ) ;
19586: LD_VAR 0 13
19590: PPUSH
19591: LD_INT 99
19593: PPUSH
19594: LD_INT 83
19596: PPUSH
19597: LD_INT 5
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 50
// Connect ( veh ) ;
19607: LD_VAR 0 13
19611: PPUSH
19612: CALL 68996 0 1
// tmp := tmp ^ veh ;
19616: LD_ADDR_VAR 0 3
19620: PUSH
19621: LD_VAR 0 3
19625: PUSH
19626: LD_VAR 0 13
19630: ADD
19631: ST_TO_ADDR
// end ;
19632: GO 19526
19634: POP
19635: POP
// wait ( 0 0$1 ) ;
19636: LD_INT 35
19638: PPUSH
19639: CALL_OW 67
// PlaceSeeing ( 99 , 83 , 1 , 10 ) ;
19643: LD_INT 99
19645: PPUSH
19646: LD_INT 83
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: LD_INT 10
19654: PPUSH
19655: CALL_OW 330
// CenterNowOnXY ( 99 , 83 ) ;
19659: LD_INT 99
19661: PPUSH
19662: LD_INT 83
19664: PPUSH
19665: CALL_OW 86
// Say ( speaker , D6-Sol3-2 ) ;
19669: LD_VAR 0 11
19673: PPUSH
19674: LD_STRING D6-Sol3-2
19676: PPUSH
19677: CALL_OW 88
// async ;
19681: ASYNC
// Say ( Powell , D6-Pow-2 ) ;
19682: LD_EXP 55
19686: PPUSH
19687: LD_STRING D6-Pow-2
19689: PPUSH
19690: CALL_OW 88
// ComAttackUnit ( tmp [ 1 ] , fac ) ;
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: PPUSH
19703: LD_VAR 0 9
19707: PPUSH
19708: CALL_OW 115
// ComAttackUnit ( tmp [ 2 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , tmp [ 2 ] ) ) ;
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 2
19719: ARRAY
19720: PPUSH
19721: LD_INT 22
19723: PUSH
19724: LD_INT 4
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 21
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 69
19749: PPUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 2
19757: ARRAY
19758: PPUSH
19759: CALL_OW 74
19763: PPUSH
19764: CALL_OW 115
// CenterNowOnUnits ( Powell ) ;
19768: LD_EXP 55
19772: PPUSH
19773: CALL_OW 87
// RemoveSeeing ( 99 , 83 , 1 ) ;
19777: LD_INT 99
19779: PPUSH
19780: LD_INT 83
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 331
// repeat wait ( 4 ) ;
19790: LD_INT 4
19792: PPUSH
19793: CALL_OW 67
// if GetLives ( tmp [ 1 ] ) < 1000 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 1
19804: ARRAY
19805: PPUSH
19806: CALL_OW 256
19810: PUSH
19811: LD_INT 1000
19813: LESS
19814: IFFALSE 19832
// SetLives ( tmp [ 1 ] , 1000 ) ;
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 1
19823: ARRAY
19824: PPUSH
19825: LD_INT 1000
19827: PPUSH
19828: CALL_OW 234
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) = 0 ;
19832: LD_INT 22
19834: PUSH
19835: LD_INT 4
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 30
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 69
19860: PUSH
19861: LD_INT 0
19863: EQUAL
19864: IFFALSE 19790
// sync ;
19866: SYNC
// Say ( Powell , D6a-Pow-1 ) ;
19867: LD_EXP 55
19871: PPUSH
19872: LD_STRING D6a-Pow-1
19874: PPUSH
19875: CALL_OW 88
// Say ( Speaker , D6a-Sol3-1 ) ;
19879: LD_VAR 0 11
19883: PPUSH
19884: LD_STRING D6a-Sol3-1
19886: PPUSH
19887: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
19891: LD_EXP 55
19895: PPUSH
19896: LD_STRING D6a-Pow-2
19898: PPUSH
19899: CALL_OW 88
// Say ( Speaker , D6a-Sol3-2 ) ;
19903: LD_VAR 0 11
19907: PPUSH
19908: LD_STRING D6a-Sol3-2
19910: PPUSH
19911: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
19915: LD_EXP 55
19919: PPUSH
19920: LD_STRING D6a-Pow-3
19922: PPUSH
19923: CALL_OW 88
// powellCenterCameraMode := true ;
19927: LD_ADDR_EXP 20
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
19935: LD_ADDR_VAR 0 1
19939: PUSH
19940: LD_INT 22
19942: PUSH
19943: LD_INT 8
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 25
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 69
19968: PUSH
19969: FOR_IN
19970: IFFALSE 20025
// begin SetTag ( i , 1 ) ;
19972: LD_VAR 0 1
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 109
// ComExitBuilding ( i ) ;
19984: LD_VAR 0 1
19988: PPUSH
19989: CALL_OW 122
// AddComMoveXY ( i , 35 , 6 ) ;
19993: LD_VAR 0 1
19997: PPUSH
19998: LD_INT 35
20000: PPUSH
20001: LD_INT 6
20003: PPUSH
20004: CALL_OW 171
// AddComMoveXY ( i , 53 , 4 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 53
20015: PPUSH
20016: LD_INT 4
20018: PPUSH
20019: CALL_OW 171
// end ;
20023: GO 19969
20025: POP
20026: POP
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ) ;
20027: LD_ADDR_VAR 0 3
20031: PUSH
20032: LD_INT 22
20034: PUSH
20035: LD_INT 4
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 21
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: LD_INT 34
20057: PUSH
20058: LD_INT 12
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: PPUSH
20074: CALL_OW 69
20078: ST_TO_ADDR
// ComEnterUnit ( Powell , NearestUnitToUnit ( tmp , Powell ) ) ;
20079: LD_EXP 55
20083: PPUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: LD_EXP 55
20093: PPUSH
20094: CALL_OW 74
20098: PPUSH
20099: CALL_OW 120
// AddComMoveXY ( Powell , 100 , 88 ) ;
20103: LD_EXP 55
20107: PPUSH
20108: LD_INT 100
20110: PPUSH
20111: LD_INT 88
20113: PPUSH
20114: CALL_OW 171
// AddComMoveXY ( Powell , 100 , 75 ) ;
20118: LD_EXP 55
20122: PPUSH
20123: LD_INT 100
20125: PPUSH
20126: LD_INT 75
20128: PPUSH
20129: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 53 ) ;
20133: LD_EXP 55
20137: PPUSH
20138: LD_INT 88
20140: PPUSH
20141: LD_INT 53
20143: PPUSH
20144: CALL_OW 171
// DoNotAttack ( 8 , Powell ) ;
20148: LD_INT 8
20150: PPUSH
20151: LD_EXP 55
20155: PPUSH
20156: CALL_OW 471
// repeat wait ( 3 ) ;
20160: LD_INT 3
20162: PPUSH
20163: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 100 , 75 , 6 ] ] ) ;
20167: LD_INT 22
20169: PUSH
20170: LD_INT 4
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 92
20179: PUSH
20180: LD_INT 100
20182: PUSH
20183: LD_INT 75
20185: PUSH
20186: LD_INT 6
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PPUSH
20199: CALL_OW 69
20203: IFFALSE 20160
// async ;
20205: ASYNC
// Say ( Powell , D6b-Pow-1 ) ;
20206: LD_EXP 55
20210: PPUSH
20211: LD_STRING D6b-Pow-1
20213: PPUSH
20214: CALL_OW 88
// repeat wait ( 3 ) ;
20218: LD_INT 3
20220: PPUSH
20221: CALL_OW 67
// if GetLives ( IsInUnit ( Powell ) ) < 1000 then
20225: LD_EXP 55
20229: PPUSH
20230: CALL_OW 310
20234: PPUSH
20235: CALL_OW 256
20239: PUSH
20240: LD_INT 1000
20242: LESS
20243: IFFALSE 20262
// SetLives ( IsInUnit ( Powell ) , 1000 ) ;
20245: LD_EXP 55
20249: PPUSH
20250: CALL_OW 310
20254: PPUSH
20255: LD_INT 1000
20257: PPUSH
20258: CALL_OW 234
// if GetLives ( Powell ) < 1000 then
20262: LD_EXP 55
20266: PPUSH
20267: CALL_OW 256
20271: PUSH
20272: LD_INT 1000
20274: LESS
20275: IFFALSE 20289
// SetLives ( Powell , 1000 ) ;
20277: LD_EXP 55
20281: PPUSH
20282: LD_INT 1000
20284: PPUSH
20285: CALL_OW 234
// if GetDistUnits ( Powell , powellBomb ) < 5 or GetDistUnits ( IsInUnit ( Powell ) , powellBomb ) < 5 then
20289: LD_EXP 55
20293: PPUSH
20294: LD_EXP 60
20298: PPUSH
20299: CALL_OW 296
20303: PUSH
20304: LD_INT 5
20306: LESS
20307: PUSH
20308: LD_EXP 55
20312: PPUSH
20313: CALL_OW 310
20317: PPUSH
20318: LD_EXP 60
20322: PPUSH
20323: CALL_OW 296
20327: PUSH
20328: LD_INT 5
20330: LESS
20331: OR
20332: IFFALSE 20351
// SetLives ( IsInUnit ( Powell ) , 100 ) ;
20334: LD_EXP 55
20338: PPUSH
20339: CALL_OW 310
20343: PPUSH
20344: LD_INT 100
20346: PPUSH
20347: CALL_OW 234
// until not IsInUnit ( Powell ) ;
20351: LD_EXP 55
20355: PPUSH
20356: CALL_OW 310
20360: NOT
20361: IFFALSE 20218
// game_speed := 4 ;
20363: LD_ADDR_OWVAR 65
20367: PUSH
20368: LD_INT 4
20370: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1a ) ;
20371: LD_EXP 55
20375: PPUSH
20376: LD_STRING D6b-Pow-1a
20378: PPUSH
20379: CALL_OW 88
// AddComEnterUnit ( Powell , powellBomb ) ;
20383: LD_EXP 55
20387: PPUSH
20388: LD_EXP 60
20392: PPUSH
20393: CALL_OW 180
// sync ;
20397: SYNC
// repeat wait ( 0 0$1 ) ;
20398: LD_INT 35
20400: PPUSH
20401: CALL_OW 67
// until IsInUnit ( Powell ) ;
20405: LD_EXP 55
20409: PPUSH
20410: CALL_OW 310
20414: IFFALSE 20398
// DoNotAttack ( 8 , IsInUnit ( Powell ) ) ;
20416: LD_INT 8
20418: PPUSH
20419: LD_EXP 55
20423: PPUSH
20424: CALL_OW 310
20428: PPUSH
20429: CALL_OW 471
// AddComMoveXY ( Powell , 91 , 44 ) ;
20433: LD_EXP 55
20437: PPUSH
20438: LD_INT 91
20440: PPUSH
20441: LD_INT 44
20443: PPUSH
20444: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
20448: LD_EXP 55
20452: PPUSH
20453: LD_INT 96
20455: PPUSH
20456: LD_INT 44
20458: PPUSH
20459: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
20463: LD_EXP 55
20467: PPUSH
20468: LD_INT 96
20470: PPUSH
20471: LD_INT 41
20473: PPUSH
20474: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
20478: LD_EXP 55
20482: PPUSH
20483: LD_INT 92
20485: PPUSH
20486: LD_INT 39
20488: PPUSH
20489: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
20493: LD_EXP 55
20497: PPUSH
20498: LD_INT 88
20500: PPUSH
20501: LD_INT 41
20503: PPUSH
20504: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
20508: LD_EXP 55
20512: PPUSH
20513: LD_INT 91
20515: PPUSH
20516: LD_INT 44
20518: PPUSH
20519: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
20523: LD_EXP 55
20527: PPUSH
20528: LD_INT 96
20530: PPUSH
20531: LD_INT 44
20533: PPUSH
20534: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
20538: LD_EXP 55
20542: PPUSH
20543: LD_INT 96
20545: PPUSH
20546: LD_INT 41
20548: PPUSH
20549: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
20553: LD_EXP 55
20557: PPUSH
20558: LD_INT 92
20560: PPUSH
20561: LD_INT 39
20563: PPUSH
20564: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
20568: LD_EXP 55
20572: PPUSH
20573: LD_INT 88
20575: PPUSH
20576: LD_INT 41
20578: PPUSH
20579: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
20583: LD_EXP 55
20587: PPUSH
20588: LD_INT 91
20590: PPUSH
20591: LD_INT 44
20593: PPUSH
20594: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 39 ) ;
20598: LD_EXP 55
20602: PPUSH
20603: LD_INT 93
20605: PPUSH
20606: LD_INT 39
20608: PPUSH
20609: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 36 ) ;
20613: LD_EXP 55
20617: PPUSH
20618: LD_INT 93
20620: PPUSH
20621: LD_INT 36
20623: PPUSH
20624: CALL_OW 171
// wait ( 0 0$3.5 ) ;
20628: LD_INT 122
20630: PPUSH
20631: CALL_OW 67
// game_speed := 4 ;
20635: LD_ADDR_OWVAR 65
20639: PUSH
20640: LD_INT 4
20642: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1b ) ;
20643: LD_EXP 55
20647: PPUSH
20648: LD_STRING D6b-Pow-1b
20650: PPUSH
20651: CALL_OW 88
// tmp := [ ] ;
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: EMPTY
20661: ST_TO_ADDR
// xy := [ [ 78 , 47 ] , [ 106 , 53 ] ] ;
20662: LD_ADDR_VAR 0 5
20666: PUSH
20667: LD_INT 78
20669: PUSH
20670: LD_INT 47
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 106
20679: PUSH
20680: LD_INT 53
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_distxy , 90 , 52 , 12 ] ] ) do
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 8
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 21
20708: PUSH
20709: LD_INT 3
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 92
20718: PUSH
20719: LD_INT 90
20721: PUSH
20722: LD_INT 52
20724: PUSH
20725: LD_INT 12
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: PPUSH
20739: CALL_OW 69
20743: PUSH
20744: FOR_IN
20745: IFFALSE 20770
// tmp := tmp ^ UnitsInside ( i ) ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_VAR 0 3
20756: PUSH
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 313
20766: ADD
20767: ST_TO_ADDR
20768: GO 20744
20770: POP
20771: POP
// for i in tmp do
20772: LD_ADDR_VAR 0 1
20776: PUSH
20777: LD_VAR 0 3
20781: PUSH
20782: FOR_IN
20783: IFFALSE 20945
// begin dist := 9999 ;
20785: LD_ADDR_VAR 0 8
20789: PUSH
20790: LD_INT 9999
20792: ST_TO_ADDR
// _xy := [ ] ;
20793: LD_ADDR_VAR 0 7
20797: PUSH
20798: EMPTY
20799: ST_TO_ADDR
// SetTag ( i , 1 ) ;
20800: LD_VAR 0 1
20804: PPUSH
20805: LD_INT 1
20807: PPUSH
20808: CALL_OW 109
// ComExitBuilding ( i ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 122
// for j in xy do
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_VAR 0 5
20830: PUSH
20831: FOR_IN
20832: IFFALSE 20914
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < dist then
20834: LD_VAR 0 1
20838: PPUSH
20839: LD_VAR 0 2
20843: PUSH
20844: LD_INT 1
20846: ARRAY
20847: PPUSH
20848: LD_VAR 0 2
20852: PUSH
20853: LD_INT 2
20855: ARRAY
20856: PPUSH
20857: CALL_OW 297
20861: PUSH
20862: LD_VAR 0 8
20866: LESS
20867: IFFALSE 20912
// begin dist := GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) ;
20869: LD_ADDR_VAR 0 8
20873: PUSH
20874: LD_VAR 0 1
20878: PPUSH
20879: LD_VAR 0 2
20883: PUSH
20884: LD_INT 1
20886: ARRAY
20887: PPUSH
20888: LD_VAR 0 2
20892: PUSH
20893: LD_INT 2
20895: ARRAY
20896: PPUSH
20897: CALL_OW 297
20901: ST_TO_ADDR
// _xy := j ;
20902: LD_ADDR_VAR 0 7
20906: PUSH
20907: LD_VAR 0 2
20911: ST_TO_ADDR
// end ;
20912: GO 20831
20914: POP
20915: POP
// AddComMoveXY ( i , _xy [ 1 ] , _xy [ 2 ] ) ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_VAR 0 7
20925: PUSH
20926: LD_INT 1
20928: ARRAY
20929: PPUSH
20930: LD_VAR 0 7
20934: PUSH
20935: LD_INT 2
20937: ARRAY
20938: PPUSH
20939: CALL_OW 171
// end ;
20943: GO 20782
20945: POP
20946: POP
// tmp2 := UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_class , 1 ] ] ) ;
20947: LD_ADDR_VAR 0 4
20951: PUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 26
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 25
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 72
20985: ST_TO_ADDR
// if tmp2 < 2 then
20986: LD_VAR 0 4
20990: PUSH
20991: LD_INT 2
20993: LESS
20994: IFFALSE 21063
// tmp2 := FilterAllUnits ( [ [ f_side , 8 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_soldier ] ] ] ) diff [ Kurt , Kozlov ] ;
20996: LD_ADDR_VAR 0 4
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_INT 8
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 26
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 3
21023: PUSH
21024: LD_INT 25
21026: PUSH
21027: LD_INT 15
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: PPUSH
21043: CALL_OW 69
21047: PUSH
21048: LD_EXP 57
21052: PUSH
21053: LD_EXP 58
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: DIFF
21062: ST_TO_ADDR
// if tmp2 then
21063: LD_VAR 0 4
21067: IFFALSE 21085
// Say ( tmp2 [ 1 ] , D6b-ArSol1-1 ) ;
21069: LD_VAR 0 4
21073: PUSH
21074: LD_INT 1
21076: ARRAY
21077: PPUSH
21078: LD_STRING D6b-ArSol1-1
21080: PPUSH
21081: CALL_OW 88
// async ;
21085: ASYNC
// Say ( Powell , D6b-Pow-2 ) ;
21086: LD_EXP 55
21090: PPUSH
21091: LD_STRING D6b-Pow-2
21093: PPUSH
21094: CALL_OW 88
// if tmp2 > 1 then
21098: LD_VAR 0 4
21102: PUSH
21103: LD_INT 1
21105: GREATER
21106: IFFALSE 21124
// Say ( tmp2 [ 2 ] , D6b-ArSol2-1 ) ;
21108: LD_VAR 0 4
21112: PUSH
21113: LD_INT 2
21115: ARRAY
21116: PPUSH
21117: LD_STRING D6b-ArSol2-1
21119: PPUSH
21120: CALL_OW 88
// sync ;
21124: SYNC
// repeat wait ( 5 ) ;
21125: LD_INT 5
21127: PPUSH
21128: CALL_OW 67
// until GetSide ( HexInfo ( 93 , 36 ) ) = 4 ;
21132: LD_INT 93
21134: PPUSH
21135: LD_INT 36
21137: PPUSH
21138: CALL_OW 428
21142: PPUSH
21143: CALL_OW 255
21147: PUSH
21148: LD_INT 4
21150: EQUAL
21151: IFFALSE 21125
// DialogueOn ;
21153: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
21157: LD_INT 10
21159: PPUSH
21160: CALL_OW 68
// Say ( Powell , D6b-Pow-2a ) ;
21164: LD_EXP 55
21168: PPUSH
21169: LD_STRING D6b-Pow-2a
21171: PPUSH
21172: CALL_OW 88
// DialogueOff ;
21176: CALL_OW 7
// ComAttackUnit ( IsInUnit ( Powell ) , kozlov_fac ) ;
21180: LD_EXP 55
21184: PPUSH
21185: CALL_OW 310
21189: PPUSH
21190: LD_INT 332
21192: PPUSH
21193: CALL_OW 115
// PlaceSeeing ( 93 , 35 , 1 , - 6 ) ;
21197: LD_INT 93
21199: PPUSH
21200: LD_INT 35
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: LD_INT 6
21208: NEG
21209: PPUSH
21210: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21214: LD_INT 35
21216: PPUSH
21217: CALL_OW 67
// if GetLives ( kozlov_fac ) < 1000 and IsLive ( kozlov_fac ) then
21221: LD_INT 332
21223: PPUSH
21224: CALL_OW 256
21228: PUSH
21229: LD_INT 1000
21231: LESS
21232: PUSH
21233: LD_INT 332
21235: PPUSH
21236: CALL_OW 300
21240: AND
21241: IFFALSE 21253
// SetLives ( kozlov_fac , 0 ) ;
21243: LD_INT 332
21245: PPUSH
21246: LD_INT 0
21248: PPUSH
21249: CALL_OW 234
// until IsDead ( kozlov_fac ) or IsDead ( Powell ) ;
21253: LD_INT 332
21255: PPUSH
21256: CALL_OW 301
21260: PUSH
21261: LD_EXP 55
21265: PPUSH
21266: CALL_OW 301
21270: OR
21271: IFFALSE 21214
// game_speed := 4 ;
21273: LD_ADDR_OWVAR 65
21277: PUSH
21278: LD_INT 4
21280: ST_TO_ADDR
// powellCenterCameraMode := false ;
21281: LD_ADDR_EXP 20
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// for i in tmp union FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_VAR 0 3
21298: PUSH
21299: LD_INT 22
21301: PUSH
21302: LD_INT 8
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 69
21327: UNION
21328: PUSH
21329: FOR_IN
21330: IFFALSE 21346
// SetTag ( i , 0 ) ;
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_INT 0
21339: PPUSH
21340: CALL_OW 109
21344: GO 21329
21346: POP
21347: POP
// wait ( 0 0$3 ) ;
21348: LD_INT 105
21350: PPUSH
21351: CALL_OW 67
// RemoveSeeing ( 93 , 35 , 1 ) ;
21355: LD_INT 93
21357: PPUSH
21358: LD_INT 35
21360: PPUSH
21361: LD_INT 1
21363: PPUSH
21364: CALL_OW 331
// DialogueOn ;
21368: CALL_OW 6
// Say ( speaker , D6c-Sol3-1 ) ;
21372: LD_VAR 0 11
21376: PPUSH
21377: LD_STRING D6c-Sol3-1
21379: PPUSH
21380: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
21384: LD_INT 10
21386: PPUSH
21387: CALL_OW 68
// CenterNowOnUnits ( JMM ) ;
21391: LD_EXP 36
21395: PPUSH
21396: CALL_OW 87
// Say ( JMM , D6c-JMM-1 ) ;
21400: LD_EXP 36
21404: PPUSH
21405: LD_STRING D6c-JMM-1
21407: PPUSH
21408: CALL_OW 88
// if Cyrus then
21412: LD_EXP 42
21416: IFFALSE 21430
// Say ( Cyrus , D6c-Cyrus-1 ) ;
21418: LD_EXP 42
21422: PPUSH
21423: LD_STRING D6c-Cyrus-1
21425: PPUSH
21426: CALL_OW 88
// if Bobby then
21430: LD_EXP 41
21434: IFFALSE 21448
// Say ( Bobby , D6c-Bobby-1 ) ;
21436: LD_EXP 41
21440: PPUSH
21441: LD_STRING D6c-Bobby-1
21443: PPUSH
21444: CALL_OW 88
// if Cornel then
21448: LD_EXP 47
21452: IFFALSE 21466
// Say ( Cornel , D6c-Corn-1 ) ;
21454: LD_EXP 47
21458: PPUSH
21459: LD_STRING D6c-Corn-1
21461: PPUSH
21462: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman ] ] ] ) diff [ speaker union JMM union vip ] ;
21466: LD_ADDR_VAR 0 4
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: LD_INT 22
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_INT 4
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 26
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 16
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 25
21524: PUSH
21525: LD_INT 12
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: PUSH
21547: LD_VAR 0 11
21551: PUSH
21552: LD_EXP 36
21556: UNION
21557: PUSH
21558: LD_EXP 56
21562: UNION
21563: PUSH
21564: EMPTY
21565: LIST
21566: DIFF
21567: ST_TO_ADDR
// if tmp2 then
21568: LD_VAR 0 4
21572: IFFALSE 21590
// Say ( tmp2 [ 1 ] , D6c-Sol1-1 ) ;
21574: LD_VAR 0 4
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: PPUSH
21583: LD_STRING D6c-Sol1-1
21585: PPUSH
21586: CALL_OW 88
// if Lisa then
21590: LD_EXP 39
21594: IFFALSE 21608
// Say ( Lisa , D6c-Lisa-1 ) ;
21596: LD_EXP 39
21600: PPUSH
21601: LD_STRING D6c-Lisa-1
21603: PPUSH
21604: CALL_OW 88
// if Gary then
21608: LD_EXP 48
21612: IFFALSE 21626
// Say ( Gary , D6c-Gary-1 ) ;
21614: LD_EXP 48
21618: PPUSH
21619: LD_STRING D6c-Gary-1
21621: PPUSH
21622: CALL_OW 88
// if Donaldson then
21626: LD_EXP 40
21630: IFFALSE 21644
// Say ( Donaldson , D6c-Don-1 ) ;
21632: LD_EXP 40
21636: PPUSH
21637: LD_STRING D6c-Don-1
21639: PPUSH
21640: CALL_OW 88
// if tmp2 > 1 then
21644: LD_VAR 0 4
21648: PUSH
21649: LD_INT 1
21651: GREATER
21652: IFFALSE 21670
// Say ( tmp2 [ 2 ] , D6c-Sol2-1 ) ;
21654: LD_VAR 0 4
21658: PUSH
21659: LD_INT 2
21661: ARRAY
21662: PPUSH
21663: LD_STRING D6c-Sol2-1
21665: PPUSH
21666: CALL_OW 88
// Say ( speaker , D6c-Sol3-2 ) ;
21670: LD_VAR 0 11
21674: PPUSH
21675: LD_STRING D6c-Sol3-2
21677: PPUSH
21678: CALL_OW 88
// dwait ( 0 0$1 ) ;
21682: LD_INT 35
21684: PPUSH
21685: CALL_OW 68
// Say ( JMM , D6c-JMM-2 ) ;
21689: LD_EXP 36
21693: PPUSH
21694: LD_STRING D6c-JMM-2
21696: PPUSH
21697: CALL_OW 88
// DialogueOff ;
21701: CALL_OW 7
// Video ( false ) ;
21705: LD_INT 0
21707: PPUSH
21708: CALL 101596 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
21712: LD_INT 22
21714: PUSH
21715: LD_INT 4
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 69
21726: PPUSH
21727: LD_INT 1
21729: PPUSH
21730: CALL_OW 235
// ChangeSideFog ( 4 , 4 ) ;
21734: LD_INT 4
21736: PPUSH
21737: LD_INT 4
21739: PPUSH
21740: CALL_OW 343
// for i in GetTechNation ( 4 , 1 , 2 ) do
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: LD_INT 4
21751: PPUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_INT 2
21757: PPUSH
21758: CALL 59371 0 3
21762: PUSH
21763: FOR_IN
21764: IFFALSE 21801
// if GetTech ( i , 1 ) <> state_researched then
21766: LD_VAR 0 1
21770: PPUSH
21771: LD_INT 1
21773: PPUSH
21774: CALL_OW 321
21778: PUSH
21779: LD_INT 2
21781: NONEQUAL
21782: IFFALSE 21799
// SetTech ( i , 1 , state_researched ) ;
21784: LD_VAR 0 1
21788: PPUSH
21789: LD_INT 1
21791: PPUSH
21792: LD_INT 2
21794: PPUSH
21795: CALL_OW 322
21799: GO 21763
21801: POP
21802: POP
// missionStage := 6 ;
21803: LD_ADDR_EXP 15
21807: PUSH
21808: LD_INT 6
21810: ST_TO_ADDR
// activeAttacks := true ;
21811: LD_ADDR_EXP 16
21815: PUSH
21816: LD_INT 1
21818: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
21819: LD_STRING M2
21821: PPUSH
21822: CALL_OW 337
// SaveForQuickRestart ;
21826: CALL_OW 22
// wait ( 0 0$40 ) ;
21830: LD_INT 1400
21832: PPUSH
21833: CALL_OW 67
// DialogueOn ;
21837: CALL_OW 6
// SayRadio ( Friend , D7-Friend-1 ) ;
21841: LD_EXP 59
21845: PPUSH
21846: LD_STRING D7-Friend-1
21848: PPUSH
21849: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
21853: LD_EXP 36
21857: PPUSH
21858: LD_STRING D7-JMM-1
21860: PPUSH
21861: CALL_OW 88
// SayRadio ( Friend , D7-Friend-2 ) ;
21865: LD_EXP 59
21869: PPUSH
21870: LD_STRING D7-Friend-2
21872: PPUSH
21873: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
21877: LD_EXP 36
21881: PPUSH
21882: LD_STRING D7-JMM-2
21884: PPUSH
21885: CALL_OW 88
// SayRadio ( Friend , D7-Friend-3 ) ;
21889: LD_EXP 59
21893: PPUSH
21894: LD_STRING D7-Friend-3
21896: PPUSH
21897: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
21901: LD_EXP 36
21905: PPUSH
21906: LD_STRING D7-JMM-3
21908: PPUSH
21909: CALL_OW 88
// SayRadio ( Friend , D7-Friend-4 ) ;
21913: LD_EXP 59
21917: PPUSH
21918: LD_STRING D7-Friend-4
21920: PPUSH
21921: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
21925: LD_EXP 36
21929: PPUSH
21930: LD_STRING D7-JMM-4
21932: PPUSH
21933: CALL_OW 88
// SayRadio ( Friend , D7-Friend-5 ) ;
21937: LD_EXP 59
21941: PPUSH
21942: LD_STRING D7-Friend-5
21944: PPUSH
21945: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
21949: LD_EXP 36
21953: PPUSH
21954: LD_STRING D7-JMM-5
21956: PPUSH
21957: CALL_OW 88
// SayRadio ( Friend , D7-Friend-6 ) ;
21961: LD_EXP 59
21965: PPUSH
21966: LD_STRING D7-Friend-6
21968: PPUSH
21969: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
21973: LD_EXP 36
21977: PPUSH
21978: LD_STRING D7-JMM-6
21980: PPUSH
21981: CALL_OW 88
// DialogueOff ;
21985: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
21989: LD_STRING Mlegion
21991: PPUSH
21992: CALL_OW 337
// RebuildKozlovFactory ;
21996: CALL 4332 0 0
// end ;
22000: PPOPN 13
22002: END
// every 0 0$2 trigger powellCenterCameraMode and IsLive ( Powell ) do
22003: LD_EXP 20
22007: PUSH
22008: LD_EXP 55
22012: PPUSH
22013: CALL_OW 300
22017: AND
22018: IFFALSE 22060
22020: GO 22022
22022: DISABLE
// begin enable ;
22023: ENABLE
// if IsInUnit ( Powell ) then
22024: LD_EXP 55
22028: PPUSH
22029: CALL_OW 310
22033: IFFALSE 22051
// CenterOnUnits ( IsInUnit ( Powell ) ) else
22035: LD_EXP 55
22039: PPUSH
22040: CALL_OW 310
22044: PPUSH
22045: CALL_OW 85
22049: GO 22060
// CenterOnUnits ( Powell ) ;
22051: LD_EXP 55
22055: PPUSH
22056: CALL_OW 85
// end ;
22060: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do var bomb , target ;
22061: LD_INT 22
22063: PUSH
22064: LD_INT 8
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 34
22073: PUSH
22074: LD_INT 48
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: IFFALSE 22352
22091: GO 22093
22093: DISABLE
22094: LD_INT 0
22096: PPUSH
22097: PPUSH
// begin if missionStage < 9 then
22098: LD_EXP 15
22102: PUSH
22103: LD_INT 9
22105: LESS
22106: IFFALSE 22116
// missionStage := 9 ;
22108: LD_ADDR_EXP 15
22112: PUSH
22113: LD_INT 9
22115: ST_TO_ADDR
// bomb := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
22116: LD_ADDR_VAR 0 1
22120: PUSH
22121: LD_INT 22
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 34
22133: PUSH
22134: LD_INT 48
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PPUSH
22145: CALL_OW 69
22149: PUSH
22150: LD_INT 1
22152: ARRAY
22153: ST_TO_ADDR
// wait ( 0 0$05 ) ;
22154: LD_INT 175
22156: PPUSH
22157: CALL_OW 67
// if FakeInfo or KurtStatus in [ 0 , 2 ] then
22161: LD_EXP 12
22165: PUSH
22166: LD_EXP 3
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: IN
22181: OR
22182: IFFALSE 22205
// target := [ 68 , 108 , 1 ] else
22184: LD_ADDR_VAR 0 2
22188: PUSH
22189: LD_INT 68
22191: PUSH
22192: LD_INT 108
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: ST_TO_ADDR
22203: GO 22224
// target := [ 181 , 88 , 2 ] ;
22205: LD_ADDR_VAR 0 2
22209: PUSH
22210: LD_INT 181
22212: PUSH
22213: LD_INT 88
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: ST_TO_ADDR
// AddComAttackPlace ( bomb , target [ 1 ] , target [ 2 ] ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_VAR 0 2
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: PPUSH
22238: LD_VAR 0 2
22242: PUSH
22243: LD_INT 2
22245: ARRAY
22246: PPUSH
22247: CALL_OW 176
// if target [ 3 ] = 1 then
22251: LD_VAR 0 2
22255: PUSH
22256: LD_INT 3
22258: ARRAY
22259: PUSH
22260: LD_INT 1
22262: EQUAL
22263: IFFALSE 22279
// SayRadio ( Kurt , D12-Kurt-1 ) else
22265: LD_EXP 57
22269: PPUSH
22270: LD_STRING D12-Kurt-1
22272: PPUSH
22273: CALL_OW 94
22277: GO 22303
// begin SayRadio ( Kurt , D12a-Kurt-1 ) ;
22279: LD_EXP 57
22283: PPUSH
22284: LD_STRING D12a-Kurt-1
22286: PPUSH
22287: CALL_OW 94
// SayRadio ( Roth , D12a-Roth-1 ) ;
22291: LD_EXP 71
22295: PPUSH
22296: LD_STRING D12a-Roth-1
22298: PPUSH
22299: CALL_OW 94
// end ; wait ( 0 0$10 ) ;
22303: LD_INT 350
22305: PPUSH
22306: CALL_OW 67
// AddComRecycle ( bomb , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
22310: LD_VAR 0 1
22314: PPUSH
22315: LD_INT 22
22317: PUSH
22318: LD_INT 8
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 30
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: PUSH
22344: LD_INT 1
22346: ARRAY
22347: PPUSH
22348: CALL_OW 228
// end ;
22352: PPOPN 2
22354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 8 , 7 , 6 ] [ Difficulty ] and not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) and IsOk ( Kurt ) do
22355: LD_INT 22
22357: PUSH
22358: LD_INT 8
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 21
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 23
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: PUSH
22395: LD_INT 8
22397: PUSH
22398: LD_INT 7
22400: PUSH
22401: LD_INT 6
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: LD_OWVAR 67
22413: ARRAY
22414: LESSEQUAL
22415: PUSH
22416: LD_INT 22
22418: PUSH
22419: LD_INT 8
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 34
22428: PUSH
22429: LD_INT 48
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: NOT
22445: AND
22446: PUSH
22447: LD_EXP 57
22451: PPUSH
22452: CALL_OW 302
22456: AND
22457: IFFALSE 22774
22459: GO 22461
22461: DISABLE
// begin DialogueOn ;
22462: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
22466: LD_EXP 36
22470: PPUSH
22471: LD_STRING D13-JMM-1
22473: PPUSH
22474: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
22478: LD_EXP 57
22482: PPUSH
22483: LD_STRING D13-Kurt-1
22485: PPUSH
22486: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
22490: LD_EXP 36
22494: PPUSH
22495: LD_STRING D13-JMM-2
22497: PPUSH
22498: CALL_OW 88
// if FakeInfo then
22502: LD_EXP 12
22506: IFFALSE 22526
// begin Say ( Kurt , D13-Kurt-2 ) ;
22508: LD_EXP 57
22512: PPUSH
22513: LD_STRING D13-Kurt-2
22515: PPUSH
22516: CALL_OW 88
// DialogueOff ;
22520: CALL_OW 7
// exit ;
22524: GO 22774
// end ; if not KurtStatus then
22526: LD_EXP 3
22530: NOT
22531: IFFALSE 22547
// Say ( Kurt , D13-Kurt-2b ) else
22533: LD_EXP 57
22537: PPUSH
22538: LD_STRING D13-Kurt-2b
22540: PPUSH
22541: CALL_OW 88
22545: GO 22559
// Say ( Kurt , D13-Kurt-2a ) ;
22547: LD_EXP 57
22551: PPUSH
22552: LD_STRING D13-Kurt-2a
22554: PPUSH
22555: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
22559: LD_EXP 57
22563: PPUSH
22564: LD_STRING D13-Kurt-2a
22566: PPUSH
22567: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
22571: LD_EXP 36
22575: PPUSH
22576: LD_STRING D13-JMM-3
22578: PPUSH
22579: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
22583: LD_EXP 57
22587: PPUSH
22588: LD_STRING D13-Kurt-3
22590: PPUSH
22591: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
22595: LD_EXP 36
22599: PPUSH
22600: LD_STRING D13-JMM-4
22602: PPUSH
22603: CALL_OW 88
// DialogueOff ;
22607: CALL_OW 7
// MC_Kill ( 3 ) ;
22611: LD_INT 3
22613: PPUSH
22614: CALL 31657 0 1
// KillUnit ( Kozlov ) ;
22618: LD_EXP 58
22622: PPUSH
22623: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
22627: LD_INT 22
22629: PUSH
22630: LD_INT 8
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 21
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 23
22649: PUSH
22650: LD_INT 3
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 30
22659: PUSH
22660: LD_INT 3
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PPUSH
22673: CALL_OW 69
22677: PUSH
22678: LD_INT 1
22680: ARRAY
22681: PPUSH
22682: CALL_OW 66
// ChangeSideFog ( 8 , 1 ) ;
22686: LD_INT 8
22688: PPUSH
22689: LD_INT 1
22691: PPUSH
22692: CALL_OW 343
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 1 ) ;
22696: LD_INT 22
22698: PUSH
22699: LD_INT 8
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 69
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 235
// SetAttitude ( 8 , 1 , att_friend , true ) ;
22718: LD_INT 8
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: LD_INT 1
22729: PPUSH
22730: CALL_OW 80
// PlaceUnitXY ( Friend , 37 , 1 , false ) ;
22734: LD_EXP 59
22738: PPUSH
22739: LD_INT 37
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: LD_INT 0
22747: PPUSH
22748: CALL_OW 48
// wait ( 0 0$1 ) ;
22752: LD_INT 35
22754: PPUSH
22755: CALL_OW 67
// ComMoveXY ( Friend , 60 , 95 ) ;
22759: LD_EXP 59
22763: PPUSH
22764: LD_INT 60
22766: PPUSH
22767: LD_INT 95
22769: PPUSH
22770: CALL_OW 111
// end ;
22774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 do
22775: LD_INT 22
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 21
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 69
22803: PUSH
22804: LD_INT 0
22806: EQUAL
22807: IFFALSE 22827
22809: GO 22811
22811: DISABLE
// begin ChangeMissionObjectives ( MlegionOut ) ;
22812: LD_STRING MlegionOut
22814: PPUSH
22815: CALL_OW 337
// legionDestroyed := true ;
22819: LD_ADDR_EXP 22
22823: PUSH
22824: LD_INT 1
22826: ST_TO_ADDR
// end ;
22827: END
// every 0 0$1 trigger See ( 1 , Friend ) do var dec ;
22828: LD_INT 1
22830: PPUSH
22831: LD_EXP 59
22835: PPUSH
22836: CALL_OW 292
22840: IFFALSE 23140
22842: GO 22844
22844: DISABLE
22845: LD_INT 0
22847: PPUSH
// begin CenterNowOnUnits ( Friend ) ;
22848: LD_EXP 59
22852: PPUSH
22853: CALL_OW 87
// DialogueOn ;
22857: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
22861: LD_EXP 36
22865: PPUSH
22866: LD_STRING D14-JMM-1
22868: PPUSH
22869: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
22873: LD_EXP 59
22877: PPUSH
22878: LD_STRING D14-Friend-1
22880: PPUSH
22881: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
22885: LD_EXP 36
22889: PPUSH
22890: LD_STRING D14-JMM-2
22892: PPUSH
22893: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
22897: LD_EXP 59
22901: PPUSH
22902: LD_STRING D14-Friend-2
22904: PPUSH
22905: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
22909: LD_EXP 36
22913: PPUSH
22914: LD_STRING D14-JMM-3
22916: PPUSH
22917: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
22921: LD_EXP 59
22925: PPUSH
22926: LD_STRING D14-Friend-3
22928: PPUSH
22929: CALL_OW 88
// DialogueOff ;
22933: CALL_OW 7
// dec = Query ( Q14 ) ;
22937: LD_ADDR_VAR 0 1
22941: PUSH
22942: LD_STRING Q14
22944: PPUSH
22945: CALL_OW 97
22949: ST_TO_ADDR
// if dec = 1 then
22950: LD_VAR 0 1
22954: PUSH
22955: LD_INT 1
22957: EQUAL
22958: IFFALSE 22992
// begin DialogueOn ;
22960: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
22964: LD_EXP 36
22968: PPUSH
22969: LD_STRING D14a-JMM-1
22971: PPUSH
22972: CALL_OW 88
// DialogueOff ;
22976: CALL_OW 7
// SetSide ( Friend , 1 ) ;
22980: LD_EXP 59
22984: PPUSH
22985: LD_INT 1
22987: PPUSH
22988: CALL_OW 235
// end ; if dec = 2 then
22992: LD_VAR 0 1
22996: PUSH
22997: LD_INT 2
22999: EQUAL
23000: IFFALSE 23046
// begin DialogueOn ;
23002: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
23006: LD_EXP 36
23010: PPUSH
23011: LD_STRING D14b-JMM-1
23013: PPUSH
23014: CALL_OW 88
// DialogueOff ;
23018: CALL_OW 7
// ComMoveXY ( Friend , 9 , 2 ) ;
23022: LD_EXP 59
23026: PPUSH
23027: LD_INT 9
23029: PPUSH
23030: LD_INT 2
23032: PPUSH
23033: CALL_OW 111
// AddComHold ( Friend ) ;
23037: LD_EXP 59
23041: PPUSH
23042: CALL_OW 200
// end ; if dec = 3 then
23046: LD_VAR 0 1
23050: PUSH
23051: LD_INT 3
23053: EQUAL
23054: IFFALSE 23140
// begin DialogueOn ;
23056: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
23060: LD_EXP 36
23064: PPUSH
23065: LD_STRING D14c-JMM-1
23067: PPUSH
23068: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
23072: LD_EXP 59
23076: PPUSH
23077: LD_STRING D14c-Friend-1
23079: PPUSH
23080: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
23084: LD_EXP 36
23088: PPUSH
23089: LD_STRING D14c-JMM-2
23091: PPUSH
23092: CALL_OW 88
// DialogueOff ;
23096: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
23100: LD_INT 8
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: LD_INT 2
23108: PPUSH
23109: LD_INT 1
23111: PPUSH
23112: CALL_OW 80
// ComMoveXY ( Friend , 9 , 2 ) ;
23116: LD_EXP 59
23120: PPUSH
23121: LD_INT 9
23123: PPUSH
23124: LD_INT 2
23126: PPUSH
23127: CALL_OW 111
// AddComHold ( Friend ) ;
23131: LD_EXP 59
23135: PPUSH
23136: CALL_OW 200
// end ; end ;
23140: PPOPN 1
23142: END
// every 0 0$1 trigger HexInfo ( 9 , 2 ) = Friend and GetSide ( Friend ) = 8 do
23143: LD_INT 9
23145: PPUSH
23146: LD_INT 2
23148: PPUSH
23149: CALL_OW 428
23153: PUSH
23154: LD_EXP 59
23158: EQUAL
23159: PUSH
23160: LD_EXP 59
23164: PPUSH
23165: CALL_OW 255
23169: PUSH
23170: LD_INT 8
23172: EQUAL
23173: AND
23174: IFFALSE 23188
23176: GO 23178
23178: DISABLE
// RemoveUnit ( Friend ) ;
23179: LD_EXP 59
23183: PPUSH
23184: CALL_OW 64
23188: END
// every 0 0$1 trigger missionTime >= 15 15$00 and JMMGirl and KappaStatus do var i , veh , vehG ;
23189: LD_EXP 14
23193: PUSH
23194: LD_INT 31500
23196: GREATEREQUAL
23197: PUSH
23198: LD_EXP 7
23202: AND
23203: PUSH
23204: LD_EXP 2
23208: AND
23209: IFFALSE 23639
23211: GO 23213
23213: DISABLE
23214: LD_INT 0
23216: PPUSH
23217: PPUSH
23218: PPUSH
// begin missionStage := 7 ;
23219: LD_ADDR_EXP 15
23223: PUSH
23224: LD_INT 7
23226: ST_TO_ADDR
// uc_side = 1 ;
23227: LD_ADDR_OWVAR 20
23231: PUSH
23232: LD_INT 1
23234: ST_TO_ADDR
// uc_nation = 1 ;
23235: LD_ADDR_OWVAR 21
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// for i = 1 to 5 do
23243: LD_ADDR_VAR 0 1
23247: PUSH
23248: DOUBLE
23249: LD_INT 1
23251: DEC
23252: ST_TO_ADDR
23253: LD_INT 5
23255: PUSH
23256: FOR_TO
23257: IFFALSE 23353
// begin vc_engine = 3 ;
23259: LD_ADDR_OWVAR 39
23263: PUSH
23264: LD_INT 3
23266: ST_TO_ADDR
// vc_control = 3 ;
23267: LD_ADDR_OWVAR 38
23271: PUSH
23272: LD_INT 3
23274: ST_TO_ADDR
// vc_chassis = 3 ;
23275: LD_ADDR_OWVAR 37
23279: PUSH
23280: LD_INT 3
23282: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
23283: LD_ADDR_OWVAR 40
23287: PUSH
23288: LD_INT 5
23290: PUSH
23291: LD_INT 9
23293: PUSH
23294: LD_INT 7
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PPUSH
23305: LD_INT 3
23307: PPUSH
23308: CALL_OW 12
23312: ARRAY
23313: ST_TO_ADDR
// veh = CreateVehicle ;
23314: LD_ADDR_VAR 0 2
23318: PUSH
23319: CALL_OW 45
23323: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
23324: LD_VAR 0 2
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
23336: LD_VAR 0 2
23340: PPUSH
23341: LD_INT 19
23343: PPUSH
23344: LD_INT 0
23346: PPUSH
23347: CALL_OW 49
// end ;
23351: GO 23256
23353: POP
23354: POP
// vc_engine = 3 ;
23355: LD_ADDR_OWVAR 39
23359: PUSH
23360: LD_INT 3
23362: ST_TO_ADDR
// vc_control = 1 ;
23363: LD_ADDR_OWVAR 38
23367: PUSH
23368: LD_INT 1
23370: ST_TO_ADDR
// vc_chassis = 3 ;
23371: LD_ADDR_OWVAR 37
23375: PUSH
23376: LD_INT 3
23378: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
23379: LD_ADDR_OWVAR 40
23383: PUSH
23384: LD_INT 5
23386: PUSH
23387: LD_INT 9
23389: PUSH
23390: LD_INT 7
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: PPUSH
23401: LD_INT 3
23403: PPUSH
23404: CALL_OW 12
23408: ARRAY
23409: ST_TO_ADDR
// vehG = CreateVehicle ;
23410: LD_ADDR_VAR 0 3
23414: PUSH
23415: CALL_OW 45
23419: ST_TO_ADDR
// SetDir ( vehG , 1 ) ;
23420: LD_VAR 0 3
23424: PPUSH
23425: LD_INT 1
23427: PPUSH
23428: CALL_OW 233
// PlaceUnitArea ( vehG , reinforcementsArea , false ) ;
23432: LD_VAR 0 3
23436: PPUSH
23437: LD_INT 19
23439: PPUSH
23440: LD_INT 0
23442: PPUSH
23443: CALL_OW 49
// if JMMGirl = 1 then
23447: LD_EXP 7
23451: PUSH
23452: LD_INT 1
23454: EQUAL
23455: IFFALSE 23511
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
23457: LD_ADDR_EXP 37
23461: PUSH
23462: LD_STRING Joan
23464: PPUSH
23465: LD_INT 1
23467: PPUSH
23468: LD_STRING 14_
23470: PPUSH
23471: CALL 59308 0 3
23475: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehG ) ;
23476: LD_EXP 37
23480: PPUSH
23481: LD_VAR 0 3
23485: PPUSH
23486: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
23499: LD_EXP 37
23503: PPUSH
23504: LD_STRING D10BW-Joan-1
23506: PPUSH
23507: CALL_OW 94
// end ; if JMMGirl = 2 then
23511: LD_EXP 7
23515: PUSH
23516: LD_INT 2
23518: EQUAL
23519: IFFALSE 23575
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
23521: LD_ADDR_EXP 39
23525: PUSH
23526: LD_STRING Lisa
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: LD_STRING 14_
23534: PPUSH
23535: CALL 59308 0 3
23539: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , vehG ) ;
23540: LD_EXP 39
23544: PPUSH
23545: LD_VAR 0 3
23549: PPUSH
23550: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23554: LD_VAR 0 3
23558: PPUSH
23559: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
23563: LD_EXP 39
23567: PPUSH
23568: LD_STRING D10BW-Lisa-1
23570: PPUSH
23571: CALL_OW 94
// end ; if JMMGirl = 3 then
23575: LD_EXP 7
23579: PUSH
23580: LD_INT 3
23582: EQUAL
23583: IFFALSE 23639
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
23585: LD_ADDR_EXP 51
23589: PUSH
23590: LD_STRING Connie
23592: PPUSH
23593: LD_INT 1
23595: PPUSH
23596: LD_STRING 14_
23598: PPUSH
23599: CALL 59308 0 3
23603: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , vehG ) ;
23604: LD_EXP 51
23608: PPUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23618: LD_VAR 0 3
23622: PPUSH
23623: CALL_OW 87
// SayRadio ( Lisa , D10BW-Con-1 ) ;
23627: LD_EXP 39
23631: PPUSH
23632: LD_STRING D10BW-Con-1
23634: PPUSH
23635: CALL_OW 94
// end ; end ;
23639: PPOPN 3
23641: END
// every 0 0$1 trigger missionTime >= 30 30$00 do var i , veh , tmp ;
23642: LD_EXP 14
23646: PUSH
23647: LD_INT 63000
23649: GREATEREQUAL
23650: IFFALSE 24062
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
// begin tmp := PrepareStevensSquad ;
23660: LD_ADDR_VAR 0 3
23664: PUSH
23665: CALL 1728 0 0
23669: ST_TO_ADDR
// if not tmp then
23670: LD_VAR 0 3
23674: NOT
23675: IFFALSE 23679
// exit ;
23677: GO 24062
// uc_side := 1 ;
23679: LD_ADDR_OWVAR 20
23683: PUSH
23684: LD_INT 1
23686: ST_TO_ADDR
// uc_nation := 1 ;
23687: LD_ADDR_OWVAR 21
23691: PUSH
23692: LD_INT 1
23694: ST_TO_ADDR
// for i in tmp do
23695: LD_ADDR_VAR 0 1
23699: PUSH
23700: LD_VAR 0 3
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23803
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , [ us_double_gun , us_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 40 ) ;
23708: LD_INT 3
23710: PPUSH
23711: LD_INT 3
23713: PPUSH
23714: LD_INT 1
23716: PPUSH
23717: LD_INT 5
23719: PUSH
23720: LD_INT 9
23722: PUSH
23723: LD_INT 7
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: PPUSH
23734: LD_INT 3
23736: PPUSH
23737: CALL_OW 12
23741: ARRAY
23742: PPUSH
23743: LD_INT 40
23745: PPUSH
23746: CALL 65941 0 5
// veh := CreateVehicle ;
23750: LD_ADDR_VAR 0 2
23754: PUSH
23755: CALL_OW 45
23759: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
23760: LD_VAR 0 2
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_INT 19
23779: PPUSH
23780: LD_INT 0
23782: PPUSH
23783: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
23787: LD_VAR 0 1
23791: PPUSH
23792: LD_VAR 0 2
23796: PPUSH
23797: CALL_OW 52
// end ;
23801: GO 23705
23803: POP
23804: POP
// missionStage := 8 ;
23805: LD_ADDR_EXP 15
23809: PUSH
23810: LD_INT 8
23812: ST_TO_ADDR
// DialogueOn ;
23813: CALL_OW 6
// if Stevens then
23817: LD_EXP 38
23821: IFFALSE 23935
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
23823: LD_EXP 38
23827: PPUSH
23828: CALL_OW 310
23832: PPUSH
23833: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
23837: LD_EXP 38
23841: PPUSH
23842: LD_STRING D8-Huck-1
23844: PPUSH
23845: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
23849: LD_EXP 36
23853: PPUSH
23854: LD_STRING D8-JMM-1
23856: PPUSH
23857: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
23861: LD_EXP 38
23865: PPUSH
23866: LD_STRING D8-Huck-2
23868: PPUSH
23869: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
23873: LD_EXP 36
23877: PPUSH
23878: LD_STRING D8-JMM-2
23880: PPUSH
23881: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
23885: LD_EXP 38
23889: PPUSH
23890: LD_STRING D8-Huck-3
23892: PPUSH
23893: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
23897: LD_EXP 36
23901: PPUSH
23902: LD_STRING D8-JMM-3
23904: PPUSH
23905: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
23909: LD_EXP 38
23913: PPUSH
23914: LD_STRING D8-Huck-4
23916: PPUSH
23917: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
23921: LD_EXP 36
23925: PPUSH
23926: LD_STRING D8-JMM-4
23928: PPUSH
23929: CALL_OW 88
// end else
23933: GO 24045
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
23935: LD_EXP 52
23939: PPUSH
23940: CALL_OW 310
23944: PPUSH
23945: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
23949: LD_EXP 52
23953: PPUSH
23954: LD_STRING D8-Huck-1
23956: PPUSH
23957: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
23961: LD_EXP 36
23965: PPUSH
23966: LD_STRING D8-JMM-1a
23968: PPUSH
23969: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
23973: LD_EXP 52
23977: PPUSH
23978: LD_STRING D8-Huck-2
23980: PPUSH
23981: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
23985: LD_EXP 36
23989: PPUSH
23990: LD_STRING D8-JMM-2
23992: PPUSH
23993: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
23997: LD_EXP 52
24001: PPUSH
24002: LD_STRING D8-Huck-3
24004: PPUSH
24005: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
24009: LD_EXP 36
24013: PPUSH
24014: LD_STRING D8-JMM-3
24016: PPUSH
24017: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
24021: LD_EXP 52
24025: PPUSH
24026: LD_STRING D8-Huck-4
24028: PPUSH
24029: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
24033: LD_EXP 36
24037: PPUSH
24038: LD_STRING D8-JMM-4
24040: PPUSH
24041: CALL_OW 88
// end ; DialogueOff ;
24045: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
24049: LD_INT 25
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: LD_INT 1
24057: PPUSH
24058: CALL_OW 322
// end ;
24062: PPOPN 3
24064: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
24065: LD_INT 1
24067: PPUSH
24068: LD_EXP 68
24072: PPUSH
24073: CALL_OW 292
24077: IFFALSE 24328
24079: GO 24081
24081: DISABLE
// begin CenterNowOnUnits ( sewiVeh ) ;
24082: LD_EXP 68
24086: PPUSH
24087: CALL_OW 87
// DialogueOn ;
24091: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
24095: LD_EXP 36
24099: PPUSH
24100: LD_STRING D10nB-JMM-1
24102: PPUSH
24103: CALL_OW 88
// if BurlakStatus = 1 then
24107: LD_EXP 9
24111: PUSH
24112: LD_INT 1
24114: EQUAL
24115: IFFALSE 24129
// begin Say ( Vsevolod , D10nB-Vse-1a ) ;
24117: LD_EXP 67
24121: PPUSH
24122: LD_STRING D10nB-Vse-1a
24124: PPUSH
24125: CALL_OW 88
// end ; if BurlakStatus = 0 then
24129: LD_EXP 9
24133: PUSH
24134: LD_INT 0
24136: EQUAL
24137: IFFALSE 24151
// Say ( Vsevolod , D10nB-Vse-1 ) ;
24139: LD_EXP 67
24143: PPUSH
24144: LD_STRING D10nB-Vse-1
24146: PPUSH
24147: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
24151: LD_EXP 36
24155: PPUSH
24156: LD_STRING D10nB-JMM-2
24158: PPUSH
24159: CALL_OW 88
// if KappaStatus then
24163: LD_EXP 2
24167: IFFALSE 24181
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
24169: LD_EXP 67
24173: PPUSH
24174: LD_STRING D10nB-Vse-5a
24176: PPUSH
24177: CALL_OW 94
// if not KappaStatus and JMMGirlStatus = 0 then
24181: LD_EXP 2
24185: NOT
24186: PUSH
24187: LD_EXP 6
24191: PUSH
24192: LD_INT 0
24194: EQUAL
24195: AND
24196: IFFALSE 24324
// begin if JMMGirl = 1 then
24198: LD_EXP 7
24202: PUSH
24203: LD_INT 1
24205: EQUAL
24206: IFFALSE 24256
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
24208: LD_EXP 67
24212: PPUSH
24213: LD_STRING D10nB-Vse-2
24215: PPUSH
24216: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
24220: LD_EXP 36
24224: PPUSH
24225: LD_STRING D10nB-JMM-3
24227: PPUSH
24228: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
24232: LD_EXP 67
24236: PPUSH
24237: LD_STRING D10nB-Vse-3
24239: PPUSH
24240: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
24244: LD_EXP 36
24248: PPUSH
24249: LD_STRING D10nB-JMM-4
24251: PPUSH
24252: CALL_OW 88
// end ; if JMMGirl = 2 then
24256: LD_EXP 7
24260: PUSH
24261: LD_INT 2
24263: EQUAL
24264: IFFALSE 24290
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
24266: LD_EXP 67
24270: PPUSH
24271: LD_STRING D10nB-Vse-4
24273: PPUSH
24274: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
24278: LD_EXP 36
24282: PPUSH
24283: LD_STRING D10nB-JMM-5
24285: PPUSH
24286: CALL_OW 88
// end ; if JMMGirl = 3 then
24290: LD_EXP 7
24294: PUSH
24295: LD_INT 3
24297: EQUAL
24298: IFFALSE 24324
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
24300: LD_EXP 67
24304: PPUSH
24305: LD_STRING D10nB-Vse-5
24307: PPUSH
24308: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
24312: LD_EXP 36
24316: PPUSH
24317: LD_STRING D10nB-JMM-6
24319: PPUSH
24320: CALL_OW 88
// end ; end ; DialogueOff ;
24324: CALL_OW 7
// end ;
24328: END
// every 0 0$1 trigger missionTime >= 55 55$00 do var tmp ;
24329: LD_EXP 14
24333: PUSH
24334: LD_INT 115500
24336: GREATEREQUAL
24337: IFFALSE 24689
24339: GO 24341
24341: DISABLE
24342: LD_INT 0
24344: PPUSH
// begin missionStage := 10 ;
24345: LD_ADDR_EXP 15
24349: PUSH
24350: LD_INT 10
24352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 26
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: LD_INT 25
24383: PUSH
24384: LD_INT 12
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 25
24393: PUSH
24394: LD_INT 16
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: PPUSH
24411: CALL_OW 69
24415: PUSH
24416: LD_EXP 36
24420: PUSH
24421: LD_EXP 38
24425: PUSH
24426: LD_EXP 52
24430: PUSH
24431: LD_EXP 39
24435: PUSH
24436: LD_EXP 40
24440: PUSH
24441: LD_EXP 41
24445: PUSH
24446: LD_EXP 42
24450: PUSH
24451: LD_EXP 43
24455: PUSH
24456: LD_EXP 44
24460: PUSH
24461: LD_EXP 45
24465: PUSH
24466: LD_EXP 46
24470: PUSH
24471: LD_EXP 47
24475: PUSH
24476: LD_EXP 48
24480: PUSH
24481: LD_EXP 49
24485: PUSH
24486: LD_EXP 50
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: DIFF
24508: ST_TO_ADDR
// if not tmp and Brown then
24509: LD_VAR 0 1
24513: NOT
24514: PUSH
24515: LD_EXP 44
24519: AND
24520: IFFALSE 24535
// tmp := [ Brown ] ;
24522: LD_ADDR_VAR 0 1
24526: PUSH
24527: LD_EXP 44
24531: PUSH
24532: EMPTY
24533: LIST
24534: ST_TO_ADDR
// DialogueOn ;
24535: CALL_OW 6
// Say ( tmp [ 1 ] , D11-Sol1-1 ) ;
24539: LD_VAR 0 1
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: PPUSH
24548: LD_STRING D11-Sol1-1
24550: PPUSH
24551: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
24555: LD_EXP 61
24559: PPUSH
24560: LD_STRING D11-Pla-1
24562: PPUSH
24563: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
24567: LD_EXP 62
24571: PPUSH
24572: LD_STRING D11-Kov-1
24574: PPUSH
24575: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
24579: LD_EXP 61
24583: PPUSH
24584: LD_STRING D11-Pla-2
24586: PPUSH
24587: CALL_OW 94
// Say ( tmp [ 1 ] , D11-Sol1-2 ) ;
24591: LD_VAR 0 1
24595: PUSH
24596: LD_INT 1
24598: ARRAY
24599: PPUSH
24600: LD_STRING D11-Sol1-2
24602: PPUSH
24603: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
24607: LD_EXP 36
24611: PPUSH
24612: LD_STRING D11-JMM-2
24614: PPUSH
24615: CALL_OW 88
// DialogueOff ;
24619: CALL_OW 7
// allowBehemothConstruct := true ;
24623: LD_ADDR_EXP 25
24627: PUSH
24628: LD_INT 1
24630: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
24631: LD_STRING M4
24633: PPUSH
24634: CALL_OW 337
// BuildBehemoths ;
24638: CALL 6314 0 0
// repeat wait ( 15 15$00 ) ;
24642: LD_INT 31500
24644: PPUSH
24645: CALL_OW 67
// if behemothDestroyedBeforeFinish then
24649: LD_EXP 27
24653: IFFALSE 24657
// break ;
24655: GO 24689
// if GetResourceType ( GetBase ( ru_depot2 ) , mat_cans ) >= 1000 then
24657: LD_INT 267
24659: PPUSH
24660: CALL_OW 274
24664: PPUSH
24665: LD_INT 1
24667: PPUSH
24668: CALL_OW 275
24672: PUSH
24673: LD_INT 1000
24675: GREATEREQUAL
24676: IFFALSE 24682
// BuildBehemoths ;
24678: CALL 6314 0 0
// until not behemothBuilders ;
24682: LD_EXP 70
24686: NOT
24687: IFFALSE 24642
// end ;
24689: PPOPN 1
24691: END
// every 0 0$1 trigger not behemothBuilders and not behemothDone and allowBehemothConstruct do
24692: LD_EXP 70
24696: NOT
24697: PUSH
24698: LD_EXP 28
24702: NOT
24703: AND
24704: PUSH
24705: LD_EXP 25
24709: AND
24710: IFFALSE 24730
24712: GO 24714
24714: DISABLE
// begin ChangeMissionObjectives ( M4a ) ;
24715: LD_STRING M4a
24717: PPUSH
24718: CALL_OW 337
// behemothDestroyedBeforeFinish := true ;
24722: LD_ADDR_EXP 27
24726: PUSH
24727: LD_INT 1
24729: ST_TO_ADDR
// end ;
24730: END
// every 0 0$1 trigger behemothDone do
24731: LD_EXP 28
24735: IFFALSE 24747
24737: GO 24739
24739: DISABLE
// ChangeMissionObjectives ( M4b ) ;
24740: LD_STRING M4b
24742: PPUSH
24743: CALL_OW 337
24747: END
// every 0 0$1 trigger not seeBehemoth do var tmp , i ;
24748: LD_EXP 29
24752: NOT
24753: IFFALSE 24949
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
// begin enable ;
24762: ENABLE
// tmp := GetBehemoths ( 3 ) ;
24763: LD_ADDR_VAR 0 1
24767: PUSH
24768: LD_INT 3
24770: PPUSH
24771: CALL 101672 0 1
24775: ST_TO_ADDR
// if not tmp and not behemothDone then
24776: LD_VAR 0 1
24780: NOT
24781: PUSH
24782: LD_EXP 28
24786: NOT
24787: AND
24788: IFFALSE 24824
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) ;
24790: LD_ADDR_VAR 0 1
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 37
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PPUSH
24819: CALL_OW 69
24823: ST_TO_ADDR
// if not tmp then
24824: LD_VAR 0 1
24828: NOT
24829: IFFALSE 24833
// exit ;
24831: GO 24949
// for i in tmp do
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: LD_VAR 0 1
24842: PUSH
24843: FOR_IN
24844: IFFALSE 24947
// if See ( 1 , i ) then
24846: LD_INT 1
24848: PPUSH
24849: LD_VAR 0 2
24853: PPUSH
24854: CALL_OW 292
24858: IFFALSE 24945
// begin if GetType ( i ) = unit_building then
24860: LD_VAR 0 2
24864: PPUSH
24865: CALL_OW 247
24869: PUSH
24870: LD_INT 3
24872: EQUAL
24873: IFFALSE 24911
// begin CenterNowOnUnits ( i ) ;
24875: LD_VAR 0 2
24879: PPUSH
24880: CALL_OW 87
// Say ( JMM , D17a-JMM-1 ) ;
24884: LD_EXP 36
24888: PPUSH
24889: LD_STRING D17a-JMM-1
24891: PPUSH
24892: CALL_OW 88
// seeBehemoth := true ;
24896: LD_ADDR_EXP 29
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// disable ;
24904: DISABLE
// exit ;
24905: POP
24906: POP
24907: GO 24949
// end else
24909: GO 24945
// begin CenterNowOnUnits ( i ) ;
24911: LD_VAR 0 2
24915: PPUSH
24916: CALL_OW 87
// Say ( JMM , D17b-JMM-1 ) ;
24920: LD_EXP 36
24924: PPUSH
24925: LD_STRING D17b-JMM-1
24927: PPUSH
24928: CALL_OW 88
// seeBehemoth := true ;
24932: LD_ADDR_EXP 29
24936: PUSH
24937: LD_INT 1
24939: ST_TO_ADDR
// disable ;
24940: DISABLE
// exit ;
24941: POP
24942: POP
24943: GO 24949
// end ; end ;
24945: GO 24843
24947: POP
24948: POP
// end ;
24949: PPOPN 2
24951: END
// every 0 0$1 trigger missionTime >= 55 55$00 do var bomb , dec , tmp ;
24952: LD_EXP 14
24956: PUSH
24957: LD_INT 115500
24959: GREATEREQUAL
24960: IFFALSE 26133
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
24969: PPUSH
// begin MC_InsertProduceList ( 2 , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ) ;
24970: LD_INT 2
24972: PPUSH
24973: LD_INT 23
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 48
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL 53413 0 2
// repeat wait ( 0 0$1 ) ;
24995: LD_INT 35
24997: PPUSH
24998: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
25002: LD_INT 22
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 34
25014: PUSH
25015: LD_INT 48
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PPUSH
25026: CALL_OW 69
25030: IFFALSE 24995
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
25032: LD_ADDR_VAR 0 1
25036: PUSH
25037: LD_INT 22
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 34
25049: PUSH
25050: LD_INT 48
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PPUSH
25061: CALL_OW 69
25065: PUSH
25066: LD_INT 1
25068: ARRAY
25069: ST_TO_ADDR
// missionStage := 12 ;
25070: LD_ADDR_EXP 15
25074: PUSH
25075: LD_INT 12
25077: ST_TO_ADDR
// platonovHasBomb := true ;
25078: LD_ADDR_EXP 30
25082: PUSH
25083: LD_INT 1
25085: ST_TO_ADDR
// AddComMoveXY ( bomb , 181 , 86 ) ;
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_INT 181
25093: PPUSH
25094: LD_INT 86
25096: PPUSH
25097: CALL_OW 171
// AddComHold ( bomb ) ;
25101: LD_VAR 0 1
25105: PPUSH
25106: CALL_OW 200
// wait ( 0 0$10 ) ;
25110: LD_INT 350
25112: PPUSH
25113: CALL_OW 67
// DialogueOn ;
25117: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
25121: LD_EXP 61
25125: PPUSH
25126: LD_STRING D15-Pla-1
25128: PPUSH
25129: CALL_OW 94
// dec = Query ( Q15a ) ;
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: LD_STRING Q15a
25140: PPUSH
25141: CALL_OW 97
25145: ST_TO_ADDR
// if dec = 1 then
25146: LD_VAR 0 2
25150: PUSH
25151: LD_INT 1
25153: EQUAL
25154: IFFALSE 25177
// begin Say ( JMM , D15a-JMM-1 ) ;
25156: LD_EXP 36
25160: PPUSH
25161: LD_STRING D15a-JMM-1
25163: PPUSH
25164: CALL_OW 88
// YouLost ( Surrender ) ;
25168: LD_STRING Surrender
25170: PPUSH
25171: CALL_OW 104
// exit ;
25175: GO 26133
// end ; if dec = 2 then
25177: LD_VAR 0 2
25181: PUSH
25182: LD_INT 2
25184: EQUAL
25185: IFFALSE 25254
// begin Say ( JMM , D15b-JMM-1 ) ;
25187: LD_EXP 36
25191: PPUSH
25192: LD_STRING D15b-JMM-1
25194: PPUSH
25195: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
25199: LD_EXP 61
25203: PPUSH
25204: LD_STRING D15b-Pla-1
25206: PPUSH
25207: CALL_OW 94
// DialogueOff ;
25211: CALL_OW 7
// wait ( 3 3$00 ) ;
25215: LD_INT 6300
25217: PPUSH
25218: CALL_OW 67
// DialogueOn ;
25222: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
25226: LD_EXP 36
25230: PPUSH
25231: LD_STRING D15d-JMM-1a
25233: PPUSH
25234: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
25238: LD_EXP 61
25242: PPUSH
25243: LD_STRING D15d-Pla-1
25245: PPUSH
25246: CALL_OW 94
// DialogueOff ;
25250: CALL_OW 7
// end ; if dec = 3 then
25254: LD_VAR 0 2
25258: PUSH
25259: LD_INT 3
25261: EQUAL
25262: IFFALSE 25316
// begin Say ( JMM , D15c-JMM-1 ) ;
25264: LD_EXP 36
25268: PPUSH
25269: LD_STRING D15c-JMM-1
25271: PPUSH
25272: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
25276: LD_EXP 61
25280: PPUSH
25281: LD_STRING D15c-Pla-1
25283: PPUSH
25284: CALL_OW 94
// DialogueOff ;
25288: CALL_OW 7
// wait ( 0 0$15 ) ;
25292: LD_INT 525
25294: PPUSH
25295: CALL_OW 67
// ComAttackPlace ( bomb , 60 , 95 ) ;
25299: LD_VAR 0 1
25303: PPUSH
25304: LD_INT 60
25306: PPUSH
25307: LD_INT 95
25309: PPUSH
25310: CALL_OW 116
// exit ;
25314: GO 26133
// end ; if dec = 4 then
25316: LD_VAR 0 2
25320: PUSH
25321: LD_INT 4
25323: EQUAL
25324: IFFALSE 25354
// begin Say ( JMM , D15d-JMM-1 ) ;
25326: LD_EXP 36
25330: PPUSH
25331: LD_STRING D15d-JMM-1
25333: PPUSH
25334: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
25338: LD_EXP 61
25342: PPUSH
25343: LD_STRING D15d-Pla-1
25345: PPUSH
25346: CALL_OW 94
// DialogueOff ;
25350: CALL_OW 7
// end ; if IsOk ( Friend ) and GetSide ( Friend ) = 1 and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
25354: LD_EXP 59
25358: PPUSH
25359: CALL_OW 302
25363: PUSH
25364: LD_EXP 59
25368: PPUSH
25369: CALL_OW 255
25373: PUSH
25374: LD_INT 1
25376: EQUAL
25377: AND
25378: PUSH
25379: LD_INT 22
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 34
25391: PUSH
25392: LD_INT 8
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: NOT
25408: AND
25409: IFFALSE 26034
// begin SetSide ( Friend , 8 ) ;
25411: LD_EXP 59
25415: PPUSH
25416: LD_INT 8
25418: PPUSH
25419: CALL_OW 235
// if IsInUnit ( Friend ) then
25423: LD_EXP 59
25427: PPUSH
25428: CALL_OW 310
25432: IFFALSE 25443
// ComExitBuilding ( Friend ) ;
25434: LD_EXP 59
25438: PPUSH
25439: CALL_OW 122
// if IsDriver ( Friend ) then
25443: LD_EXP 59
25447: PPUSH
25448: CALL 99348 0 1
25452: IFFALSE 25463
// ComExitVehicle ( Friend ) ;
25454: LD_EXP 59
25458: PPUSH
25459: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
25463: LD_EXP 59
25467: PPUSH
25468: LD_INT 9
25470: PPUSH
25471: LD_INT 2
25473: PPUSH
25474: CALL_OW 171
// wait ( 0 0$05 ) ;
25478: LD_INT 175
25480: PPUSH
25481: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
25485: LD_EXP 59
25489: PPUSH
25490: CALL_OW 87
// DialogueOn ;
25494: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
25498: LD_EXP 36
25502: PPUSH
25503: LD_STRING D16-JMM-1
25505: PPUSH
25506: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
25510: LD_EXP 59
25514: PPUSH
25515: LD_STRING D16-Friend-1
25517: PPUSH
25518: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
25522: LD_EXP 36
25526: PPUSH
25527: LD_STRING D16-JMM-2
25529: PPUSH
25530: CALL_OW 88
// DialogueOff ;
25534: CALL_OW 7
// SetSide ( Friend , 1 ) ;
25538: LD_EXP 59
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: CALL_OW 235
// ComHold ( Friend ) ;
25550: LD_EXP 59
25554: PPUSH
25555: CALL_OW 140
// wait ( 0 0$20 ) ;
25559: LD_INT 700
25561: PPUSH
25562: CALL_OW 67
// if GetDistUnitXY ( Friend , 9 , 2 ) < 30 then
25566: LD_EXP 59
25570: PPUSH
25571: LD_INT 9
25573: PPUSH
25574: LD_INT 2
25576: PPUSH
25577: CALL_OW 297
25581: PUSH
25582: LD_INT 30
25584: LESS
25585: IFFALSE 25654
// begin SetSide ( Friend , 8 ) ;
25587: LD_EXP 59
25591: PPUSH
25592: LD_INT 8
25594: PPUSH
25595: CALL_OW 235
// if IsInUnit ( Friend ) then
25599: LD_EXP 59
25603: PPUSH
25604: CALL_OW 310
25608: IFFALSE 25619
// ComExitBuilding ( Friend ) ;
25610: LD_EXP 59
25614: PPUSH
25615: CALL_OW 122
// if IsDriver ( Friend ) then
25619: LD_EXP 59
25623: PPUSH
25624: CALL 99348 0 1
25628: IFFALSE 25639
// ComExitVehicle ( Friend ) ;
25630: LD_EXP 59
25634: PPUSH
25635: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
25639: LD_EXP 59
25643: PPUSH
25644: LD_INT 9
25646: PPUSH
25647: LD_INT 2
25649: PPUSH
25650: CALL_OW 171
// end ; wait ( 0 0$30 ) ;
25654: LD_INT 1050
25656: PPUSH
25657: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
25661: LD_INT 22
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 34
25673: PUSH
25674: LD_INT 8
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: NOT
25690: IFFALSE 26012
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 26
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 3
25719: PUSH
25720: LD_INT 25
25722: PUSH
25723: LD_INT 12
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 25
25732: PUSH
25733: LD_INT 16
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: LIST
25749: PPUSH
25750: CALL_OW 69
25754: PUSH
25755: LD_EXP 36
25759: PUSH
25760: LD_EXP 38
25764: PUSH
25765: LD_EXP 52
25769: PUSH
25770: LD_EXP 39
25774: PUSH
25775: LD_EXP 40
25779: PUSH
25780: LD_EXP 41
25784: PUSH
25785: LD_EXP 42
25789: PUSH
25790: LD_EXP 43
25794: PUSH
25795: LD_EXP 44
25799: PUSH
25800: LD_EXP 45
25804: PUSH
25805: LD_EXP 46
25809: PUSH
25810: LD_EXP 47
25814: PUSH
25815: LD_EXP 48
25819: PUSH
25820: LD_EXP 49
25824: PUSH
25825: LD_EXP 50
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: DIFF
25847: ST_TO_ADDR
// DialogueOn ;
25848: CALL_OW 6
// SayRadio ( Platonov , D16a-Pla-1 ) ;
25852: LD_EXP 61
25856: PPUSH
25857: LD_STRING D16a-Pla-1
25859: PPUSH
25860: CALL_OW 94
// if Stevens then
25864: LD_EXP 38
25868: IFFALSE 25884
// Say ( Stevens , D16a-Huck-1 ) else
25870: LD_EXP 38
25874: PPUSH
25875: LD_STRING D16a-Huck-1
25877: PPUSH
25878: CALL_OW 88
25882: GO 25926
// if Baker then
25884: LD_EXP 52
25888: IFFALSE 25904
// Say ( Baker , D16a-Huck-1 ) else
25890: LD_EXP 52
25894: PPUSH
25895: LD_STRING D16a-Huck-1
25897: PPUSH
25898: CALL_OW 88
25902: GO 25926
// if tmp then
25904: LD_VAR 0 3
25908: IFFALSE 25926
// Say ( tmp [ 1 ] , D16a-Sol1-1 ) ;
25910: LD_VAR 0 3
25914: PUSH
25915: LD_INT 1
25917: ARRAY
25918: PPUSH
25919: LD_STRING D16a-Sol1-1
25921: PPUSH
25922: CALL_OW 88
// if GetSide ( Friend ) = 8 then
25926: LD_EXP 59
25930: PPUSH
25931: CALL_OW 255
25935: PUSH
25936: LD_INT 8
25938: EQUAL
25939: IFFALSE 25955
// Say ( JMM , D16a-JMM-1 ) else
25941: LD_EXP 36
25945: PPUSH
25946: LD_STRING D16a-JMM-1
25948: PPUSH
25949: CALL_OW 88
25953: GO 25991
// begin Say ( JMM , D16a-JMM-1a ) ;
25955: LD_EXP 36
25959: PPUSH
25960: LD_STRING D16a-JMM-1a
25962: PPUSH
25963: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
25967: LD_EXP 59
25971: PPUSH
25972: LD_STRING D16a-Friend-1
25974: PPUSH
25975: CALL_OW 88
// SetSide ( Friend , 3 ) ;
25979: LD_EXP 59
25983: PPUSH
25984: LD_INT 3
25986: PPUSH
25987: CALL_OW 235
// end ; DialogueOff ;
25991: CALL_OW 7
// ComAttackPlace ( bomb , 60 , 95 ) ;
25995: LD_VAR 0 1
25999: PPUSH
26000: LD_INT 60
26002: PPUSH
26003: LD_INT 95
26005: PPUSH
26006: CALL_OW 116
// end else
26010: GO 26032
// begin DialogueOn ;
26012: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla- ) ;
26016: LD_EXP 61
26020: PPUSH
26021: LD_STRING D16c-Pla-
26023: PPUSH
26024: CALL_OW 94
// DialogueOff ;
26028: CALL_OW 7
// end ; end else
26032: GO 26133
// begin wait ( 3 3$00 ) ;
26034: LD_INT 6300
26036: PPUSH
26037: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
26041: LD_INT 22
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 34
26053: PUSH
26054: LD_INT 8
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PPUSH
26065: CALL_OW 69
26069: NOT
26070: IFFALSE 26113
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
26072: LD_EXP 61
26076: PPUSH
26077: LD_STRING D16b-Pla-1
26079: PPUSH
26080: CALL_OW 94
// Say ( JMM , D16b-JMM- ) ;
26084: LD_EXP 36
26088: PPUSH
26089: LD_STRING D16b-JMM-
26091: PPUSH
26092: CALL_OW 88
// ComAttackPlace ( bomb , 60 , 95 ) ;
26096: LD_VAR 0 1
26100: PPUSH
26101: LD_INT 60
26103: PPUSH
26104: LD_INT 95
26106: PPUSH
26107: CALL_OW 116
// end else
26111: GO 26133
// begin DialogueOn ;
26113: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla- ) ;
26117: LD_EXP 61
26121: PPUSH
26122: LD_STRING D16c-Pla-
26124: PPUSH
26125: CALL_OW 94
// DialogueOff ;
26129: CALL_OW 7
// end ; end ; end ;
26133: PPOPN 3
26135: END
// every 0 0$1 trigger missionTime >= 60 60$00 do var dec ;
26136: LD_EXP 14
26140: PUSH
26141: LD_INT 126000
26143: GREATEREQUAL
26144: IFFALSE 26502
26146: GO 26148
26148: DISABLE
26149: LD_INT 0
26151: PPUSH
// begin missionStage = 11 ;
26152: LD_ADDR_EXP 15
26156: PUSH
26157: LD_INT 11
26159: ST_TO_ADDR
// DialogueOn ;
26160: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
26164: LD_EXP 71
26168: PPUSH
26169: LD_STRING D9-Roth-1
26171: PPUSH
26172: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
26176: LD_EXP 36
26180: PPUSH
26181: LD_STRING D9-JMM-1
26183: PPUSH
26184: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
26188: LD_EXP 71
26192: PPUSH
26193: LD_STRING D9-Roth-2
26195: PPUSH
26196: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
26200: LD_EXP 71
26204: PPUSH
26205: LD_STRING D9-Roth-2a
26207: PPUSH
26208: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
26212: LD_EXP 61
26216: PPUSH
26217: LD_STRING D9-Pla-2
26219: PPUSH
26220: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
26224: LD_EXP 71
26228: PPUSH
26229: LD_STRING D9-Roth-3
26231: PPUSH
26232: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
26236: LD_EXP 61
26240: PPUSH
26241: LD_STRING D9-Pla-3
26243: PPUSH
26244: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
26248: LD_EXP 71
26252: PPUSH
26253: LD_STRING D9-Roth-4
26255: PPUSH
26256: CALL_OW 94
// dec = Query ( Q9 ) ;
26260: LD_ADDR_VAR 0 1
26264: PUSH
26265: LD_STRING Q9
26267: PPUSH
26268: CALL_OW 97
26272: ST_TO_ADDR
// if dec = 1 then
26273: LD_VAR 0 1
26277: PUSH
26278: LD_INT 1
26280: EQUAL
26281: IFFALSE 26295
// SayRadio ( Roth , D9a-Roth-1 ) ;
26283: LD_EXP 71
26287: PPUSH
26288: LD_STRING D9a-Roth-1
26290: PPUSH
26291: CALL_OW 94
// if dec = 2 then
26295: LD_VAR 0 1
26299: PUSH
26300: LD_INT 2
26302: EQUAL
26303: IFFALSE 26329
// begin Say ( JMM , D9b-JMM-1 ) ;
26305: LD_EXP 36
26309: PPUSH
26310: LD_STRING D9b-JMM-1
26312: PPUSH
26313: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
26317: LD_EXP 71
26321: PPUSH
26322: LD_STRING D9b-Roth-1
26324: PPUSH
26325: CALL_OW 94
// end ; if dec = 3 then
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 3
26336: EQUAL
26337: IFFALSE 26399
// begin Say ( JMM , D9c-JMM-1 ) ;
26339: LD_EXP 36
26343: PPUSH
26344: LD_STRING D9c-JMM-1
26346: PPUSH
26347: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
26351: LD_EXP 71
26355: PPUSH
26356: LD_STRING D9c-Roth-1
26358: PPUSH
26359: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
26363: LD_EXP 36
26367: PPUSH
26368: LD_STRING D9c-JMM-2
26370: PPUSH
26371: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
26375: LD_EXP 71
26379: PPUSH
26380: LD_STRING D9c-Roth-2
26382: PPUSH
26383: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
26387: LD_EXP 36
26391: PPUSH
26392: LD_STRING D9c-JMM-3
26394: PPUSH
26395: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
26399: LD_EXP 71
26403: PPUSH
26404: LD_STRING D9c-Roth-3
26406: PPUSH
26407: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
26411: LD_EXP 71
26415: PPUSH
26416: LD_STRING D9cont-Roth-1
26418: PPUSH
26419: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
26423: LD_EXP 36
26427: PPUSH
26428: LD_STRING D9cont-JMM-1
26430: PPUSH
26431: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
26435: LD_EXP 71
26439: PPUSH
26440: LD_STRING D9cont-Roth-2
26442: PPUSH
26443: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
26447: LD_EXP 36
26451: PPUSH
26452: LD_STRING D9cont-JMM-2
26454: PPUSH
26455: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
26459: LD_EXP 71
26463: PPUSH
26464: LD_STRING D9cont-Roth-3
26466: PPUSH
26467: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
26471: LD_EXP 36
26475: PPUSH
26476: LD_STRING D9cont-JMM-3
26478: PPUSH
26479: CALL_OW 88
// DialogueOff ;
26483: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
26487: LD_STRING M3
26489: PPUSH
26490: CALL_OW 337
// allianceActive := true ;
26494: LD_ADDR_EXP 31
26498: PUSH
26499: LD_INT 1
26501: ST_TO_ADDR
// end ;
26502: PPOPN 1
26504: END
// every 0 0$2 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , tmp2 , omarOnMotherLode ;
26505: LD_EXP 61
26509: PPUSH
26510: CALL_OW 301
26514: PUSH
26515: LD_EXP 64
26519: PPUSH
26520: CALL_OW 301
26524: AND
26525: PUSH
26526: LD_INT 22
26528: PUSH
26529: LD_INT 3
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 21
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 50
26548: PUSH
26549: EMPTY
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: PPUSH
26557: CALL_OW 69
26561: PUSH
26562: LD_INT 7
26564: PUSH
26565: LD_INT 8
26567: PUSH
26568: LD_INT 9
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: LD_OWVAR 67
26580: ARRAY
26581: LESS
26582: AND
26583: IFFALSE 27342
26585: GO 26587
26587: DISABLE
26588: LD_INT 0
26590: PPUSH
26591: PPUSH
26592: PPUSH
26593: PPUSH
// begin MC_Kill ( 1 ) ;
26594: LD_INT 1
26596: PPUSH
26597: CALL 31657 0 1
// SetAttitude ( 1 , 3 , att_friend , true ) ;
26601: LD_INT 1
26603: PPUSH
26604: LD_INT 3
26606: PPUSH
26607: LD_INT 1
26609: PPUSH
26610: LD_INT 1
26612: PPUSH
26613: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
26617: LD_ADDR_VAR 0 1
26621: PUSH
26622: LD_INT 22
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 21
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 24
26644: PUSH
26645: LD_INT 900
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: PPUSH
26657: CALL_OW 69
26661: PUSH
26662: FOR_IN
26663: IFFALSE 26694
// if GetSex ( i ) = sex_male then
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 258
26674: PUSH
26675: LD_INT 1
26677: EQUAL
26678: IFFALSE 26692
// begin tmp = i ;
26680: LD_ADDR_VAR 0 2
26684: PUSH
26685: LD_VAR 0 1
26689: ST_TO_ADDR
// break ;
26690: GO 26694
// end ;
26692: GO 26662
26694: POP
26695: POP
// if tmp = 0 then
26696: LD_VAR 0 2
26700: PUSH
26701: LD_INT 0
26703: EQUAL
26704: IFFALSE 26758
// begin uc_side = 3 ;
26706: LD_ADDR_OWVAR 20
26710: PUSH
26711: LD_INT 3
26713: ST_TO_ADDR
// uc_nation = 3 ;
26714: LD_ADDR_OWVAR 21
26718: PUSH
26719: LD_INT 3
26721: ST_TO_ADDR
// hc_name =  ;
26722: LD_ADDR_OWVAR 26
26726: PUSH
26727: LD_STRING 
26729: ST_TO_ADDR
// hc_gallery =  ;
26730: LD_ADDR_OWVAR 33
26734: PUSH
26735: LD_STRING 
26737: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
26738: LD_INT 1
26740: PPUSH
26741: LD_INT 10
26743: PPUSH
26744: CALL_OW 381
// tmp = CreateHuman ;
26748: LD_ADDR_VAR 0 2
26752: PUSH
26753: CALL_OW 44
26757: ST_TO_ADDR
// end ; DialogueOn ;
26758: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_STRING DSurrenderRussians-RSol1-1a
26769: PPUSH
26770: CALL_OW 88
// DialogueOff ;
26774: CALL_OW 7
// russianDestroyed := true ;
26778: LD_ADDR_EXP 21
26782: PUSH
26783: LD_INT 1
26785: ST_TO_ADDR
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
26786: LD_INT 22
26788: PUSH
26789: LD_INT 3
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: PPUSH
26815: CALL_OW 122
// wait ( 0 0$1 ) ;
26819: LD_INT 35
26821: PPUSH
26822: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , russianEscapeArea ) ;
26826: LD_INT 22
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 21
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PPUSH
26850: CALL_OW 69
26854: PPUSH
26855: LD_INT 25
26857: PPUSH
26858: CALL_OW 173
// wait ( 0 0$10 ) ;
26862: LD_INT 350
26864: PPUSH
26865: CALL_OW 67
// PrepareOmarInvasion ;
26869: CALL 11894 0 0
// tmp := [ GetX ( Omar ) , GetY ( Omar ) ] ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_EXP 89
26882: PPUSH
26883: CALL_OW 250
26887: PUSH
26888: LD_EXP 89
26892: PPUSH
26893: CALL_OW 251
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: ST_TO_ADDR
// PlaceSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 , - 8 ) ;
26902: LD_VAR 0 2
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 2
26915: PUSH
26916: LD_INT 2
26918: ARRAY
26919: PPUSH
26920: LD_INT 1
26922: PPUSH
26923: LD_INT 8
26925: NEG
26926: PPUSH
26927: CALL_OW 330
// CenterNowOnUnits ( Omar ) ;
26931: LD_EXP 89
26935: PPUSH
26936: CALL_OW 87
// DialogueOn ;
26940: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
26944: LD_EXP 36
26948: PPUSH
26949: LD_STRING D19-JMM-1
26951: PPUSH
26952: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ] ;
26956: LD_ADDR_VAR 0 3
26960: PUSH
26961: LD_INT 22
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 26
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 25
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 25
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 25
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 25
27016: PUSH
27017: LD_INT 4
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 25
27026: PUSH
27027: LD_INT 5
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 25
27036: PUSH
27037: LD_INT 8
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: PUSH
27063: LD_EXP 36
27067: PUSH
27068: LD_EXP 37
27072: PUSH
27073: LD_EXP 38
27077: PUSH
27078: LD_EXP 39
27082: PUSH
27083: LD_EXP 40
27087: PUSH
27088: LD_EXP 41
27092: PUSH
27093: LD_EXP 42
27097: PUSH
27098: LD_EXP 43
27102: PUSH
27103: LD_EXP 44
27107: PUSH
27108: LD_EXP 45
27112: PUSH
27113: LD_EXP 46
27117: PUSH
27118: LD_EXP 47
27122: PUSH
27123: LD_EXP 48
27127: PUSH
27128: LD_EXP 49
27132: PUSH
27133: LD_EXP 50
27137: PUSH
27138: LD_EXP 51
27142: PUSH
27143: LD_EXP 52
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: DIFF
27167: ST_TO_ADDR
// if tmp2 then
27168: LD_VAR 0 3
27172: IFFALSE 27190
// Say ( tmp2 [ 1 ] , D19-Sol1-1 ) ;
27174: LD_VAR 0 3
27178: PUSH
27179: LD_INT 1
27181: ARRAY
27182: PPUSH
27183: LD_STRING D19-Sol1-1
27185: PPUSH
27186: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
27190: LD_EXP 36
27194: PPUSH
27195: LD_STRING D19-JMM-2
27197: PPUSH
27198: CALL_OW 88
// DialogueOff ;
27202: CALL_OW 7
// RemoveSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 ) ;
27206: LD_VAR 0 2
27210: PUSH
27211: LD_INT 1
27213: ARRAY
27214: PPUSH
27215: LD_VAR 0 2
27219: PUSH
27220: LD_INT 2
27222: ARRAY
27223: PPUSH
27224: LD_INT 1
27226: PPUSH
27227: CALL_OW 331
// ChangeMissionObjectives ( M5 ) ;
27231: LD_STRING M5
27233: PPUSH
27234: CALL_OW 337
// omarOnMotherLode := false ;
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_INT 0
27245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27246: LD_INT 35
27248: PPUSH
27249: CALL_OW 67
// if GetDistUnitXY ( Omar , 215 , 100 ) < 10 and not omarOnMotherLode then
27253: LD_EXP 89
27257: PPUSH
27258: LD_INT 215
27260: PPUSH
27261: LD_INT 100
27263: PPUSH
27264: CALL_OW 297
27268: PUSH
27269: LD_INT 10
27271: LESS
27272: PUSH
27273: LD_VAR 0 4
27277: NOT
27278: AND
27279: IFFALSE 27301
// begin omarOnMotherLode := true ;
27281: LD_ADDR_VAR 0 4
27285: PUSH
27286: LD_INT 1
27288: ST_TO_ADDR
// Say ( JMM , D19b-JMM-1 ) ;
27289: LD_EXP 36
27293: PPUSH
27294: LD_STRING D19b-JMM-1
27296: PPUSH
27297: CALL_OW 88
// end ; until IsDead ( Omar ) ;
27301: LD_EXP 89
27305: PPUSH
27306: CALL_OW 301
27310: IFFALSE 27246
// Say ( JMM , D19a-JMM-1 ) ;
27312: LD_EXP 36
27316: PPUSH
27317: LD_STRING D19a-JMM-1
27319: PPUSH
27320: CALL_OW 88
// if Heike then
27324: LD_EXP 90
27328: IFFALSE 27342
// Say ( Heike , D19a-Hke-1 ) ;
27330: LD_EXP 90
27334: PPUSH
27335: LD_STRING D19a-Hke-1
27337: PPUSH
27338: CALL_OW 88
// end ;
27342: PPOPN 4
27344: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and russianDestroyed do var i , tmp ;
27345: LD_INT 22
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 21
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 69
27373: PUSH
27374: LD_EXP 21
27378: AND
27379: IFFALSE 27447
27381: GO 27383
27383: DISABLE
27384: LD_INT 0
27386: PPUSH
27387: PPUSH
// begin enable ;
27388: ENABLE
// tmp := FilterUnitsInArea ( russianEscapeArea , [ f_side , 3 ] ) ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_INT 25
27396: PPUSH
27397: LD_INT 22
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL_OW 70
27411: ST_TO_ADDR
// if not tmp then
27412: LD_VAR 0 2
27416: NOT
27417: IFFALSE 27421
// exit ;
27419: GO 27447
// for i in tmp do
27421: LD_ADDR_VAR 0 1
27425: PUSH
27426: LD_VAR 0 2
27430: PUSH
27431: FOR_IN
27432: IFFALSE 27445
// RemoveUnit ( i ) ;
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 64
27443: GO 27431
27445: POP
27446: POP
// end ;
27447: PPOPN 2
27449: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) < 6 do var tmp , i ;
27450: LD_INT 22
27452: PUSH
27453: LD_INT 7
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 21
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL_OW 69
27478: PUSH
27479: LD_INT 6
27481: LESS
27482: IFFALSE 27933
27484: GO 27486
27486: DISABLE
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
// begin MC_Kill ( 1 ) ;
27491: LD_INT 1
27493: PPUSH
27494: CALL 31657 0 1
// SetAttitude ( 7 , 1 , att_friend , true ) ;
27498: LD_INT 7
27500: PPUSH
27501: LD_INT 1
27503: PPUSH
27504: LD_INT 1
27506: PPUSH
27507: LD_INT 1
27509: PPUSH
27510: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_sex , sex_male ] ] ) diff Roth ;
27514: LD_ADDR_VAR 0 1
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_INT 7
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 26
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PPUSH
27543: CALL_OW 69
27547: PUSH
27548: LD_EXP 71
27552: DIFF
27553: ST_TO_ADDR
// if tmp then
27554: LD_VAR 0 1
27558: IFFALSE 27576
// tmp := tmp [ 1 ] else
27560: LD_ADDR_VAR 0 1
27564: PUSH
27565: LD_VAR 0 1
27569: PUSH
27570: LD_INT 1
27572: ARRAY
27573: ST_TO_ADDR
27574: GO 27612
// begin uc_side := 7 ;
27576: LD_ADDR_OWVAR 20
27580: PUSH
27581: LD_INT 7
27583: ST_TO_ADDR
// uc_nation := 1 ;
27584: LD_ADDR_OWVAR 21
27588: PUSH
27589: LD_INT 1
27591: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
27592: LD_INT 1
27594: PPUSH
27595: LD_INT 8
27597: PPUSH
27598: CALL_OW 384
// tmp := CreateHuman ;
27602: LD_ADDR_VAR 0 1
27606: PUSH
27607: CALL_OW 44
27611: ST_TO_ADDR
// end ; DialogueOn ;
27612: CALL_OW 6
// if IsOK ( Roth ) then
27616: LD_EXP 71
27620: PPUSH
27621: CALL_OW 302
27625: IFFALSE 27639
// Say ( JMM , DAb-JMM-1 ) ;
27627: LD_EXP 36
27631: PPUSH
27632: LD_STRING DAb-JMM-1
27634: PPUSH
27635: CALL_OW 88
// if IsOK ( Roth ) then
27639: LD_EXP 71
27643: PPUSH
27644: CALL_OW 302
27648: IFFALSE 27672
// begin Say ( Roth , DSurrenderAlliance-Roth-1 ) ;
27650: LD_EXP 71
27654: PPUSH
27655: LD_STRING DSurrenderAlliance-Roth-1
27657: PPUSH
27658: CALL_OW 88
// RothCaptured := true ;
27662: LD_ADDR_EXP 33
27666: PUSH
27667: LD_INT 1
27669: ST_TO_ADDR
// end else
27670: GO 27684
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
27672: LD_VAR 0 1
27676: PPUSH
27677: LD_STRING DSurrenderAlliance-Sci1-1
27679: PPUSH
27680: CALL_OW 88
// DialogueOff ;
27684: CALL_OW 7
// allianceDestroyed := true ;
27688: LD_ADDR_EXP 23
27692: PUSH
27693: LD_INT 1
27695: ST_TO_ADDR
// if trueAmericans then
27696: LD_EXP 35
27700: IFFALSE 27776
// begin if trueAmericans = 1 then
27702: LD_EXP 35
27706: PUSH
27707: LD_INT 1
27709: EQUAL
27710: IFFALSE 27726
// Say ( JMM , DAb-JMM-1a ) else
27712: LD_EXP 36
27716: PPUSH
27717: LD_STRING DAb-JMM-1a
27719: PPUSH
27720: CALL_OW 88
27724: GO 27738
// Say ( JMM , DAb-JMM-1b ) ;
27726: LD_EXP 36
27730: PPUSH
27731: LD_STRING DAb-JMM-1b
27733: PPUSH
27734: CALL_OW 88
// CenterNowOnUnits ( trueAmericans ) ;
27738: LD_EXP 35
27742: PPUSH
27743: CALL_OW 87
// for i in trueAmericans do
27747: LD_ADDR_VAR 0 2
27751: PUSH
27752: LD_EXP 35
27756: PUSH
27757: FOR_IN
27758: IFFALSE 27774
// SetSide ( i , 1 ) ;
27760: LD_VAR 0 2
27764: PPUSH
27765: LD_INT 1
27767: PPUSH
27768: CALL_OW 235
27772: GO 27757
27774: POP
27775: POP
// end ; repeat wait ( 0 0$1 ) ;
27776: LD_INT 35
27778: PPUSH
27779: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
27783: LD_ADDR_VAR 0 2
27787: PUSH
27788: LD_INT 22
27790: PUSH
27791: LD_INT 7
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 21
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PPUSH
27812: CALL_OW 69
27816: PUSH
27817: FOR_IN
27818: IFFALSE 27900
// begin if IsInUnit ( i ) then
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 310
27829: IFFALSE 27840
// ComExitBuilding ( i ) ;
27831: LD_VAR 0 2
27835: PPUSH
27836: CALL_OW 122
// if IsDriver ( i ) then
27840: LD_VAR 0 2
27844: PPUSH
27845: CALL 99348 0 1
27849: IFFALSE 27860
// ComExitVehicle ( i ) ;
27851: LD_VAR 0 2
27855: PPUSH
27856: CALL_OW 121
// if not IsInArea ( i , allianceEscapeArea ) then
27860: LD_VAR 0 2
27864: PPUSH
27865: LD_INT 26
27867: PPUSH
27868: CALL_OW 308
27872: NOT
27873: IFFALSE 27889
// AddComMoveToArea ( i , allianceEscapeArea ) else
27875: LD_VAR 0 2
27879: PPUSH
27880: LD_INT 26
27882: PPUSH
27883: CALL_OW 173
27887: GO 27898
// RemoveUnit ( i ) ;
27889: LD_VAR 0 2
27893: PPUSH
27894: CALL_OW 64
// end ;
27898: GO 27817
27900: POP
27901: POP
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
27902: LD_INT 22
27904: PUSH
27905: LD_INT 7
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 21
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 69
27930: NOT
27931: IFFALSE 27776
// end ;
27933: PPOPN 2
27935: END
// export function AllianceCaptureUnit ( unit ) ; var join ; begin
27936: LD_INT 0
27938: PPUSH
27939: PPUSH
// if not unit then
27940: LD_VAR 0 1
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 29438
// DoNotAttack ( 8 , unit ) ;
27949: LD_INT 8
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 471
// TeleportUnit ( unit , 260 , 235 , 3 , true ) ;
27961: LD_VAR 0 1
27965: PPUSH
27966: LD_INT 260
27968: PPUSH
27969: LD_INT 235
27971: PPUSH
27972: LD_INT 3
27974: PPUSH
27975: LD_INT 1
27977: PPUSH
27978: CALL_OW 483
// SetSide ( unit , 4 ) ;
27982: LD_VAR 0 1
27986: PPUSH
27987: LD_INT 4
27989: PPUSH
27990: CALL_OW 235
// capturedUnit := capturedUnit + 1 ;
27994: LD_ADDR_EXP 34
27998: PUSH
27999: LD_EXP 34
28003: PUSH
28004: LD_INT 1
28006: PLUS
28007: ST_TO_ADDR
// wait ( 0 0$2 ) ;
28008: LD_INT 70
28010: PPUSH
28011: CALL_OW 67
// PlaceSeeing ( 260 , 235 , 1 , - 8 ) ;
28015: LD_INT 260
28017: PPUSH
28018: LD_INT 235
28020: PPUSH
28021: LD_INT 1
28023: PPUSH
28024: LD_INT 8
28026: NEG
28027: PPUSH
28028: CALL_OW 330
// CenterNowOnUnits ( unit ) ;
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 87
// ComTurnUnit ( unit , Roth ) ;
28041: LD_VAR 0 1
28045: PPUSH
28046: LD_EXP 71
28050: PPUSH
28051: CALL_OW 119
// DialogueOn ;
28055: CALL_OW 6
// case unit of JMM :
28059: LD_VAR 0 1
28063: PUSH
28064: LD_EXP 36
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28089
28074: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
28075: LD_EXP 36
28079: PPUSH
28080: LD_STRING DA1-JMM-1
28082: PPUSH
28083: CALL_OW 91
28087: GO 28531
28089: LD_EXP 37
28093: DOUBLE
28094: EQUAL
28095: IFTRUE 28099
28097: GO 28114
28099: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
28100: LD_EXP 37
28104: PPUSH
28105: LD_STRING DA1-Joan-1
28107: PPUSH
28108: CALL_OW 91
28112: GO 28531
28114: LD_EXP 39
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28139
28124: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
28125: LD_EXP 39
28129: PPUSH
28130: LD_STRING DA1-Lisa-1
28132: PPUSH
28133: CALL_OW 91
28137: GO 28531
28139: LD_EXP 40
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28164
28149: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornel :
28150: LD_EXP 40
28154: PPUSH
28155: LD_STRING DA1-Don-1
28157: PPUSH
28158: CALL_OW 91
28162: GO 28531
28164: LD_EXP 47
28168: DOUBLE
28169: EQUAL
28170: IFTRUE 28174
28172: GO 28189
28174: POP
// ForceSay ( Cornel , DA1-Corn-1 ) ; Denis :
28175: LD_EXP 47
28179: PPUSH
28180: LD_STRING DA1-Corn-1
28182: PPUSH
28183: CALL_OW 91
28187: GO 28531
28189: LD_EXP 43
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28214
28199: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
28200: LD_EXP 43
28204: PPUSH
28205: LD_STRING DA1-Den-1
28207: PPUSH
28208: CALL_OW 91
28212: GO 28531
28214: LD_EXP 41
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28239
28224: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
28225: LD_EXP 41
28229: PPUSH
28230: LD_STRING DA1-Bobby-1
28232: PPUSH
28233: CALL_OW 91
28237: GO 28531
28239: LD_EXP 45
28243: DOUBLE
28244: EQUAL
28245: IFTRUE 28249
28247: GO 28264
28249: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
28250: LD_EXP 45
28254: PPUSH
28255: LD_STRING DA1-Glad-1
28257: PPUSH
28258: CALL_OW 91
28262: GO 28531
28264: LD_EXP 42
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28289
28274: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
28275: LD_EXP 42
28279: PPUSH
28280: LD_STRING DA1-Cyrus-1
28282: PPUSH
28283: CALL_OW 91
28287: GO 28531
28289: LD_EXP 38
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28314
28299: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Baker :
28300: LD_EXP 38
28304: PPUSH
28305: LD_STRING DA1-Huck-1
28307: PPUSH
28308: CALL_OW 91
28312: GO 28531
28314: LD_EXP 52
28318: DOUBLE
28319: EQUAL
28320: IFTRUE 28324
28322: GO 28339
28324: POP
// ForceSay ( Baker , DA1-Huck-1 ) ; Brown :
28325: LD_EXP 52
28329: PPUSH
28330: LD_STRING DA1-Huck-1
28332: PPUSH
28333: CALL_OW 91
28337: GO 28531
28339: LD_EXP 44
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28364
28349: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
28350: LD_EXP 44
28354: PPUSH
28355: LD_STRING DA1-Brown-1
28357: PPUSH
28358: CALL_OW 91
28362: GO 28531
28364: LD_EXP 48
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28389
28374: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Connie :
28375: LD_EXP 48
28379: PPUSH
28380: LD_STRING DA1-Gary-1
28382: PPUSH
28383: CALL_OW 91
28387: GO 28531
28389: LD_EXP 51
28393: DOUBLE
28394: EQUAL
28395: IFTRUE 28399
28397: GO 28414
28399: POP
// ForceSay ( Connie , DA1-Con-1 ) ; Kurt :
28400: LD_EXP 51
28404: PPUSH
28405: LD_STRING DA1-Con-1
28407: PPUSH
28408: CALL_OW 91
28412: GO 28531
28414: LD_EXP 57
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 28439
28424: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Kikuchi :
28425: LD_EXP 57
28429: PPUSH
28430: LD_STRING DA1-Kurt-1
28432: PPUSH
28433: CALL_OW 91
28437: GO 28531
28439: LD_EXP 50
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28449
28447: GO 28464
28449: POP
// ForceSay ( Kikuchi , DA1-Yam-1 ) ; Frank :
28450: LD_EXP 50
28454: PPUSH
28455: LD_STRING DA1-Yam-1
28457: PPUSH
28458: CALL_OW 91
28462: GO 28531
28464: LD_EXP 49
28468: DOUBLE
28469: EQUAL
28470: IFTRUE 28474
28472: GO 28489
28474: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
28475: LD_EXP 49
28479: PPUSH
28480: LD_STRING DA1-Frank-1
28482: PPUSH
28483: CALL_OW 91
28487: GO 28531
28489: POP
// begin if GetSex ( unit ) = sex_male then
28490: LD_VAR 0 1
28494: PPUSH
28495: CALL_OW 258
28499: PUSH
28500: LD_INT 1
28502: EQUAL
28503: IFFALSE 28519
// ForceSay ( unit , DA1-Sol1-1 ) else
28505: LD_VAR 0 1
28509: PPUSH
28510: LD_STRING DA1-Sol1-1
28512: PPUSH
28513: CALL_OW 91
28517: GO 28531
// ForceSay ( unit , DA1-FSol1-1 ) ;
28519: LD_VAR 0 1
28523: PPUSH
28524: LD_STRING DA1-FSol1-1
28526: PPUSH
28527: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
28531: LD_EXP 71
28535: PPUSH
28536: LD_STRING DA-Roth-1
28538: PPUSH
28539: CALL_OW 88
// if capturedUnit = 1 then
28543: LD_EXP 34
28547: PUSH
28548: LD_INT 1
28550: EQUAL
28551: IFFALSE 28579
// begin Say ( Simms , DA-Sim-1 ) ;
28553: LD_EXP 72
28557: PPUSH
28558: LD_STRING DA-Sim-1
28560: PPUSH
28561: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
28565: LD_EXP 71
28569: PPUSH
28570: LD_STRING DA-Roth-2
28572: PPUSH
28573: CALL_OW 88
// end else
28577: GO 28591
// Say ( Simms , DA-Sim-2 ) ;
28579: LD_EXP 72
28583: PPUSH
28584: LD_STRING DA-Sim-2
28586: PPUSH
28587: CALL_OW 88
// case unit of JMM :
28591: LD_VAR 0 1
28595: PUSH
28596: LD_EXP 36
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28621
28606: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
28607: LD_EXP 36
28611: PPUSH
28612: LD_STRING DA1-JMM-1a
28614: PPUSH
28615: CALL_OW 91
28619: GO 29128
28621: LD_EXP 37
28625: DOUBLE
28626: EQUAL
28627: IFTRUE 28631
28629: GO 28646
28631: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
28632: LD_EXP 37
28636: PPUSH
28637: LD_STRING DA1-Joan-1a
28639: PPUSH
28640: CALL_OW 91
28644: GO 29128
28646: LD_EXP 39
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28671
28656: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
28657: LD_EXP 39
28661: PPUSH
28662: LD_STRING DA1-Lisa-1a
28664: PPUSH
28665: CALL_OW 91
28669: GO 29128
28671: LD_EXP 40
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28696
28681: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornel :
28682: LD_EXP 40
28686: PPUSH
28687: LD_STRING DA1-Don-1a
28689: PPUSH
28690: CALL_OW 91
28694: GO 29128
28696: LD_EXP 47
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28721
28706: POP
// ForceSay ( Cornel , DA1-Corn-1a ) ; Denis :
28707: LD_EXP 47
28711: PPUSH
28712: LD_STRING DA1-Corn-1a
28714: PPUSH
28715: CALL_OW 91
28719: GO 29128
28721: LD_EXP 43
28725: DOUBLE
28726: EQUAL
28727: IFTRUE 28731
28729: GO 28746
28731: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
28732: LD_EXP 43
28736: PPUSH
28737: LD_STRING DA1-Den-1a
28739: PPUSH
28740: CALL_OW 91
28744: GO 29128
28746: LD_EXP 41
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28771
28756: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
28757: LD_EXP 41
28761: PPUSH
28762: LD_STRING DA1-Bobby-1a
28764: PPUSH
28765: CALL_OW 91
28769: GO 29128
28771: LD_EXP 45
28775: DOUBLE
28776: EQUAL
28777: IFTRUE 28781
28779: GO 28796
28781: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
28782: LD_EXP 45
28786: PPUSH
28787: LD_STRING DA1-Glad-1a
28789: PPUSH
28790: CALL_OW 91
28794: GO 29128
28796: LD_EXP 42
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28821
28806: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
28807: LD_EXP 42
28811: PPUSH
28812: LD_STRING DA1-Cyrus-1a
28814: PPUSH
28815: CALL_OW 91
28819: GO 29128
28821: LD_EXP 38
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28846
28831: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Baker :
28832: LD_EXP 38
28836: PPUSH
28837: LD_STRING DA1-Huck-1a
28839: PPUSH
28840: CALL_OW 91
28844: GO 29128
28846: LD_EXP 52
28850: DOUBLE
28851: EQUAL
28852: IFTRUE 28856
28854: GO 28871
28856: POP
// ForceSay ( Baker , DA1-Huck-1a ) ; Brown :
28857: LD_EXP 52
28861: PPUSH
28862: LD_STRING DA1-Huck-1a
28864: PPUSH
28865: CALL_OW 91
28869: GO 29128
28871: LD_EXP 44
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28896
28881: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
28882: LD_EXP 44
28886: PPUSH
28887: LD_STRING DA1-Brown-1a
28889: PPUSH
28890: CALL_OW 91
28894: GO 29128
28896: LD_EXP 48
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28921
28906: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Connie :
28907: LD_EXP 48
28911: PPUSH
28912: LD_STRING DA1-Gary-1a
28914: PPUSH
28915: CALL_OW 91
28919: GO 29128
28921: LD_EXP 51
28925: DOUBLE
28926: EQUAL
28927: IFTRUE 28931
28929: GO 28946
28931: POP
// ForceSay ( Connie , DA1-Con-1a ) ; Kurt :
28932: LD_EXP 51
28936: PPUSH
28937: LD_STRING DA1-Con-1a
28939: PPUSH
28940: CALL_OW 91
28944: GO 29128
28946: LD_EXP 57
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 28971
28956: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Kikuchi :
28957: LD_EXP 57
28961: PPUSH
28962: LD_STRING DA1-Kurt-1a
28964: PPUSH
28965: CALL_OW 91
28969: GO 29128
28971: LD_EXP 50
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 28996
28981: POP
// ForceSay ( Kikuchi , DA1-Yam-1a ) ; Frank :
28982: LD_EXP 50
28986: PPUSH
28987: LD_STRING DA1-Yam-1a
28989: PPUSH
28990: CALL_OW 91
28994: GO 29128
28996: LD_EXP 49
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29006
29004: GO 29021
29006: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
29007: LD_EXP 49
29011: PPUSH
29012: LD_STRING DA1-Frank-1a
29014: PPUSH
29015: CALL_OW 91
29019: GO 29128
29021: POP
// begin join := rand ( 0 , 1 ) ;
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 0
29029: PPUSH
29030: LD_INT 1
29032: PPUSH
29033: CALL_OW 12
29037: ST_TO_ADDR
// if join then
29038: LD_VAR 0 3
29042: IFFALSE 29087
// begin if GetSex ( unit ) = sex_male then
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 258
29053: PUSH
29054: LD_INT 1
29056: EQUAL
29057: IFFALSE 29073
// ForceSay ( unit , DA1-Sol1-1b ) else
29059: LD_VAR 0 1
29063: PPUSH
29064: LD_STRING DA1-Sol1-1b
29066: PPUSH
29067: CALL_OW 91
29071: GO 29085
// ForceSay ( unit , DA1-FSol1-1b ) ;
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_STRING DA1-FSol1-1b
29080: PPUSH
29081: CALL_OW 91
// end else
29085: GO 29128
// begin if GetSex ( unit ) = sex_male then
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 258
29096: PUSH
29097: LD_INT 1
29099: EQUAL
29100: IFFALSE 29116
// ForceSay ( unit , DA1-Sol1-1a ) else
29102: LD_VAR 0 1
29106: PPUSH
29107: LD_STRING DA1-Sol1-1a
29109: PPUSH
29110: CALL_OW 91
29114: GO 29128
// ForceSay ( unit , DA1-FSol1-1a ) ;
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_STRING DA1-FSol1-1a
29123: PPUSH
29124: CALL_OW 91
// end ; end ; end ; if unit = JMM then
29128: LD_VAR 0 1
29132: PUSH
29133: LD_EXP 36
29137: EQUAL
29138: IFFALSE 29149
// begin YouLost ( JMMCaptured ) ;
29140: LD_STRING JMMCaptured
29142: PPUSH
29143: CALL_OW 104
// exit ;
29147: GO 29438
// end ; if unit in [ Donaldson , Denis , Bobby , Stevens , Baker , Brown , Kikuchi ] or join then
29149: LD_VAR 0 1
29153: PUSH
29154: LD_EXP 40
29158: PUSH
29159: LD_EXP 43
29163: PUSH
29164: LD_EXP 41
29168: PUSH
29169: LD_EXP 38
29173: PUSH
29174: LD_EXP 52
29178: PUSH
29179: LD_EXP 44
29183: PUSH
29184: LD_EXP 50
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: IN
29198: PUSH
29199: LD_VAR 0 3
29203: OR
29204: IFFALSE 29294
// begin Say ( Roth , DA-Roth-3 ) ;
29206: LD_EXP 71
29210: PPUSH
29211: LD_STRING DA-Roth-3
29213: PPUSH
29214: CALL_OW 88
// SetSide ( unit , 7 ) ;
29218: LD_VAR 0 1
29222: PPUSH
29223: LD_INT 7
29225: PPUSH
29226: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] union unit ) ;
29230: LD_ADDR_EXP 99
29234: PUSH
29235: LD_EXP 99
29239: PPUSH
29240: LD_INT 1
29242: PPUSH
29243: LD_EXP 99
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PUSH
29252: LD_VAR 0 1
29256: UNION
29257: PPUSH
29258: CALL_OW 1
29262: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
29263: LD_INT 260
29265: PPUSH
29266: LD_INT 235
29268: PPUSH
29269: LD_INT 1
29271: PPUSH
29272: CALL_OW 331
// SetLives ( unit , 1000 ) ;
29276: LD_VAR 0 1
29280: PPUSH
29281: LD_INT 1000
29283: PPUSH
29284: CALL_OW 234
// DialogueOff ;
29288: CALL_OW 7
// end else
29292: GO 29375
// begin Say ( Roth , DA-Roth-3a ) ;
29294: LD_EXP 71
29298: PPUSH
29299: LD_STRING DA-Roth-3a
29301: PPUSH
29302: CALL_OW 88
// trueAmericans := trueAmericans union unit ;
29306: LD_ADDR_EXP 35
29310: PUSH
29311: LD_EXP 35
29315: PUSH
29316: LD_VAR 0 1
29320: UNION
29321: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
29322: LD_INT 260
29324: PPUSH
29325: LD_INT 235
29327: PPUSH
29328: LD_INT 1
29330: PPUSH
29331: CALL_OW 331
// SetLives ( unit , 1000 ) ;
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_INT 1000
29342: PPUSH
29343: CALL_OW 234
// DialogueOff ;
29347: CALL_OW 7
// ComMoveXY ( unit , 272 , 254 ) ;
29351: LD_VAR 0 1
29355: PPUSH
29356: LD_INT 272
29358: PPUSH
29359: LD_INT 254
29361: PPUSH
29362: CALL_OW 111
// AddComHold ( unit ) ;
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 200
// end ; if capturedUnit = 1 then
29375: LD_EXP 34
29379: PUSH
29380: LD_INT 1
29382: EQUAL
29383: IFFALSE 29438
// begin DialogueOn ;
29385: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
29389: LD_EXP 36
29393: PPUSH
29394: CALL_OW 87
// Say ( JMM , DAa-JMM-1 ) ;
29398: LD_EXP 36
29402: PPUSH
29403: LD_STRING DAa-JMM-1
29405: PPUSH
29406: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
29410: LD_EXP 36
29414: PPUSH
29415: LD_STRING DAa-JMM-1a
29417: PPUSH
29418: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
29422: LD_EXP 36
29426: PPUSH
29427: LD_STRING DAa-JMM-1b
29429: PPUSH
29430: CALL_OW 88
// DialogueOff ;
29434: CALL_OW 7
// end ; end ;
29438: LD_VAR 0 2
29442: RET
// every 0 0$1 trigger missionStage >= 13 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and russianDestroyed and legionDestroyed and allianceDestroyed do
29443: LD_EXP 15
29447: PUSH
29448: LD_INT 13
29450: GREATEREQUAL
29451: PUSH
29452: LD_INT 22
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: PUSH
29481: LD_INT 0
29483: EQUAL
29484: AND
29485: PUSH
29486: LD_INT 22
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 21
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 50
29508: PUSH
29509: EMPTY
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 69
29521: PUSH
29522: LD_INT 0
29524: EQUAL
29525: AND
29526: PUSH
29527: LD_EXP 21
29531: AND
29532: PUSH
29533: LD_EXP 22
29537: AND
29538: PUSH
29539: LD_EXP 23
29543: AND
29544: IFFALSE 30025
29546: GO 29548
29548: DISABLE
// begin DialogueOn ;
29549: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
29553: LD_EXP 36
29557: PPUSH
29558: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
29562: LD_EXP 36
29566: PPUSH
29567: LD_STRING D20-JMM-1
29569: PPUSH
29570: CALL_OW 88
// if IsOK ( Joan ) then
29574: LD_EXP 37
29578: PPUSH
29579: CALL_OW 302
29583: IFFALSE 29597
// Say ( Joan , D20-Joan-1 ) ;
29585: LD_EXP 37
29589: PPUSH
29590: LD_STRING D20-Joan-1
29592: PPUSH
29593: CALL_OW 88
// if IsOk ( Lisa ) then
29597: LD_EXP 39
29601: PPUSH
29602: CALL_OW 302
29606: IFFALSE 29620
// Say ( Lisa , D20-Lisa-1 ) ;
29608: LD_EXP 39
29612: PPUSH
29613: LD_STRING D20-Lisa-1
29615: PPUSH
29616: CALL_OW 88
// if IsOk ( Donaldson ) then
29620: LD_EXP 40
29624: PPUSH
29625: CALL_OW 302
29629: IFFALSE 29643
// Say ( Donaldson , D20-Don-1 ) ;
29631: LD_EXP 40
29635: PPUSH
29636: LD_STRING D20-Don-1
29638: PPUSH
29639: CALL_OW 88
// if IsOK ( Cornel ) then
29643: LD_EXP 47
29647: PPUSH
29648: CALL_OW 302
29652: IFFALSE 29666
// Say ( Cornel , D20-Corn-1 ) ;
29654: LD_EXP 47
29658: PPUSH
29659: LD_STRING D20-Corn-1
29661: PPUSH
29662: CALL_OW 88
// if IsOk ( Denis ) then
29666: LD_EXP 43
29670: PPUSH
29671: CALL_OW 302
29675: IFFALSE 29689
// Say ( Denis , D20-Den-1 ) ;
29677: LD_EXP 43
29681: PPUSH
29682: LD_STRING D20-Den-1
29684: PPUSH
29685: CALL_OW 88
// if IsOk ( Bobby ) then
29689: LD_EXP 41
29693: PPUSH
29694: CALL_OW 302
29698: IFFALSE 29712
// Say ( Bobby , D20-Bobby-1 ) ;
29700: LD_EXP 41
29704: PPUSH
29705: LD_STRING D20-Bobby-1
29707: PPUSH
29708: CALL_OW 88
// if IsOk ( Gladstone ) then
29712: LD_EXP 45
29716: PPUSH
29717: CALL_OW 302
29721: IFFALSE 29735
// Say ( Gladstone , D20-Glad-1 ) ;
29723: LD_EXP 45
29727: PPUSH
29728: LD_STRING D20-Glad-1
29730: PPUSH
29731: CALL_OW 88
// if IsOk ( Cyrus ) then
29735: LD_EXP 42
29739: PPUSH
29740: CALL_OW 302
29744: IFFALSE 29758
// Say ( Cyrus , D20-Cyrus-1 ) ;
29746: LD_EXP 42
29750: PPUSH
29751: LD_STRING D20-Cyrus-1
29753: PPUSH
29754: CALL_OW 88
// if IsOk ( Stevens ) then
29758: LD_EXP 38
29762: PPUSH
29763: CALL_OW 302
29767: IFFALSE 29781
// Say ( Stevens , D20-Huck-1 ) ;
29769: LD_EXP 38
29773: PPUSH
29774: LD_STRING D20-Huck-1
29776: PPUSH
29777: CALL_OW 88
// if IsOk ( Brown ) then
29781: LD_EXP 44
29785: PPUSH
29786: CALL_OW 302
29790: IFFALSE 29804
// Say ( Brown , D20-Brown-1 ) ;
29792: LD_EXP 44
29796: PPUSH
29797: LD_STRING D20-Brown-1
29799: PPUSH
29800: CALL_OW 88
// if IsOk ( Gary ) then
29804: LD_EXP 48
29808: PPUSH
29809: CALL_OW 302
29813: IFFALSE 29827
// Say ( Gary , D20-Gary-1 ) ;
29815: LD_EXP 48
29819: PPUSH
29820: LD_STRING D20-Gary-1
29822: PPUSH
29823: CALL_OW 88
// if IsOk ( Connie ) then
29827: LD_EXP 51
29831: PPUSH
29832: CALL_OW 302
29836: IFFALSE 29850
// Say ( Connie , D20-Con-1 ) ;
29838: LD_EXP 51
29842: PPUSH
29843: LD_STRING D20-Con-1
29845: PPUSH
29846: CALL_OW 88
// if IsOk ( Kurt ) then
29850: LD_EXP 57
29854: PPUSH
29855: CALL_OW 302
29859: IFFALSE 29873
// Say ( Kurt , D20-Kurt-1 ) ;
29861: LD_EXP 57
29865: PPUSH
29866: LD_STRING D20-Kurt-1
29868: PPUSH
29869: CALL_OW 88
// if IsOk ( Kikuchi ) then
29873: LD_EXP 50
29877: PPUSH
29878: CALL_OW 302
29882: IFFALSE 29896
// Say ( Kikuchi , D20-Yam-1 ) ;
29884: LD_EXP 50
29888: PPUSH
29889: LD_STRING D20-Yam-1
29891: PPUSH
29892: CALL_OW 88
// if IsOk ( Frank ) then
29896: LD_EXP 49
29900: PPUSH
29901: CALL_OW 302
29905: IFFALSE 29919
// Say ( Frank , D20-Frank-1 ) ;
29907: LD_EXP 49
29911: PPUSH
29912: LD_STRING D20-Frank-1
29914: PPUSH
29915: CALL_OW 88
// DialogueOff ;
29919: CALL_OW 7
// if RothCaptured then
29923: LD_EXP 33
29927: IFFALSE 29941
// AddMedal ( Roth , 1 ) else
29929: LD_STRING Roth
29931: PPUSH
29932: LD_INT 1
29934: PPUSH
29935: CALL_OW 101
29939: GO 29952
// AddMedal ( Roth , - 1 ) ;
29941: LD_STRING Roth
29943: PPUSH
29944: LD_INT 1
29946: NEG
29947: PPUSH
29948: CALL_OW 101
// if behemothDestroyedBeforeFinish then
29952: LD_EXP 27
29956: IFFALSE 29970
// AddMedal ( Project , 1 ) else
29958: LD_STRING Project
29960: PPUSH
29961: LD_INT 1
29963: PPUSH
29964: CALL_OW 101
29968: GO 29981
// AddMedal ( Project , - 1 ) ;
29970: LD_STRING Project
29972: PPUSH
29973: LD_INT 1
29975: NEG
29976: PPUSH
29977: CALL_OW 101
// if lostCounter = 0 then
29981: LD_EXP 32
29985: PUSH
29986: LD_INT 0
29988: EQUAL
29989: IFFALSE 30003
// AddMedal ( NoLosses , 1 ) else
29991: LD_STRING NoLosses
29993: PPUSH
29994: LD_INT 1
29996: PPUSH
29997: CALL_OW 101
30001: GO 30014
// AddMedal ( NoLosses , - 1 ) ;
30003: LD_STRING NoLosses
30005: PPUSH
30006: LD_INT 1
30008: NEG
30009: PPUSH
30010: CALL_OW 101
// GiveMedals ( MAIN ) ;
30014: LD_STRING MAIN
30016: PPUSH
30017: CALL_OW 102
// YouWin ;
30021: CALL_OW 103
// end ; end_of_file
30025: END
// export function CustomEvent ( event ) ; begin
30026: LD_INT 0
30028: PPUSH
// end ;
30029: LD_VAR 0 2
30033: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 and IsLive ( Powell ) then
30034: LD_VAR 0 1
30038: PUSH
30039: LD_INT 1
30041: EQUAL
30042: PUSH
30043: LD_VAR 0 2
30047: PUSH
30048: LD_INT 4
30050: EQUAL
30051: AND
30052: PUSH
30053: LD_EXP 55
30057: PPUSH
30058: CALL_OW 300
30062: AND
30063: IFFALSE 30079
// begin wait ( 0 0$2 ) ;
30065: LD_INT 70
30067: PPUSH
30068: CALL_OW 67
// YouLost ( Dismissed ) ;
30072: LD_STRING Dismissed
30074: PPUSH
30075: CALL_OW 104
// end ; end ;
30079: PPOPN 2
30081: END
// on BehemothConstructed ( behemoth ) do begin if not behemothDestroyedBeforeFinish then
30082: LD_EXP 27
30086: NOT
30087: IFFALSE 30097
// behemothDone := true ;
30089: LD_ADDR_EXP 28
30093: PUSH
30094: LD_INT 1
30096: ST_TO_ADDR
// end ;
30097: PPOPN 1
30099: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
30100: LD_VAR 0 2
30104: PPUSH
30105: LD_VAR 0 3
30109: PPUSH
30110: LD_INT 18
30112: PPUSH
30113: CALL_OW 309
30117: IFFALSE 30177
// begin if GetSide ( unit ) = 1 then
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 255
30128: PUSH
30129: LD_INT 1
30131: EQUAL
30132: IFFALSE 30148
// begin wait ( 0 0$6 ) ;
30134: LD_INT 210
30136: PPUSH
30137: CALL_OW 67
// YouLost ( Motherlode2 ) ;
30141: LD_STRING Motherlode2
30143: PPUSH
30144: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
30148: LD_VAR 0 1
30152: PPUSH
30153: CALL_OW 255
30157: PUSH
30158: LD_INT 8
30160: EQUAL
30161: IFFALSE 30177
// begin wait ( 0 0$6 ) ;
30163: LD_INT 210
30165: PPUSH
30166: CALL_OW 67
// YouLost ( Motherlode1 ) ;
30170: LD_STRING Motherlode1
30172: PPUSH
30173: CALL_OW 104
// end ; end ; if GetSide ( unit ) = 3 then
30177: LD_VAR 0 1
30181: PPUSH
30182: CALL_OW 255
30186: PUSH
30187: LD_INT 3
30189: EQUAL
30190: IFFALSE 30211
// begin wait ( 0 0$5 ) ;
30192: LD_INT 175
30194: PPUSH
30195: CALL_OW 67
// SayRadio ( Platonov , D18-Pla-1 ) ;
30199: LD_EXP 61
30203: PPUSH
30204: LD_STRING D18-Pla-1
30206: PPUSH
30207: CALL_OW 94
// end ; end ;
30211: PPOPN 3
30213: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 255
30223: PUSH
30224: LD_INT 2
30226: EQUAL
30227: IFFALSE 30236
// YouLost ( Motherlode3 ) ;
30229: LD_STRING Motherlode3
30231: PPUSH
30232: CALL_OW 104
// end ;
30236: PPOPN 3
30238: END
// on UnitDestroyed ( un ) do begin if un in behemothBuilders then
30239: LD_VAR 0 1
30243: PUSH
30244: LD_EXP 70
30248: IN
30249: IFFALSE 30269
// begin behemothBuilders := behemothBuilders diff un ;
30251: LD_ADDR_EXP 70
30255: PUSH
30256: LD_EXP 70
30260: PUSH
30261: LD_VAR 0 1
30265: DIFF
30266: ST_TO_ADDR
// exit ;
30267: GO 30367
// end ; if un = JMM then
30269: LD_VAR 0 1
30273: PUSH
30274: LD_EXP 36
30278: EQUAL
30279: IFFALSE 30290
// begin YouLost ( JMM ) ;
30281: LD_STRING JMM
30283: PPUSH
30284: CALL_OW 104
// exit ;
30288: GO 30367
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman ] ] ] ) then
30290: LD_VAR 0 1
30294: PUSH
30295: LD_INT 22
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 25
30310: PUSH
30311: LD_INT 16
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 25
30320: PUSH
30321: LD_INT 12
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PPUSH
30337: CALL_OW 69
30341: IN
30342: IFFALSE 30358
// lostCounter := lostCounter + 1 ;
30344: LD_ADDR_EXP 32
30348: PUSH
30349: LD_EXP 32
30353: PUSH
30354: LD_INT 1
30356: PLUS
30357: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
30358: LD_VAR 0 1
30362: PPUSH
30363: CALL 56784 0 1
// end ;
30367: PPOPN 1
30369: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
30370: LD_VAR 0 1
30374: PPUSH
30375: LD_VAR 0 2
30379: PPUSH
30380: CALL 58690 0 2
// end ;
30384: PPOPN 2
30386: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL 57758 0 1
// end ;
30396: PPOPN 1
30398: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
30399: LD_VAR 0 1
30403: PUSH
30404: LD_INT 22
30406: PUSH
30407: LD_INT 8
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 30
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 23
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: PPUSH
30439: CALL_OW 69
30443: IN
30444: IFFALSE 30471
// begin ComUpgrade ( building ) ;
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
30455: LD_EXP 58
30459: PPUSH
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL 68914 0 2
// exit ;
30469: GO 30480
// end ; MCE_BuildingComplete ( building ) ;
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL 57999 0 1
// end ;
30480: PPOPN 1
30482: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
30483: LD_VAR 0 1
30487: PPUSH
30488: LD_VAR 0 2
30492: PPUSH
30493: CALL 56480 0 2
// end ;
30497: PPOPN 2
30499: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
30500: LD_VAR 0 1
30504: PPUSH
30505: LD_VAR 0 2
30509: PPUSH
30510: LD_VAR 0 3
30514: PPUSH
30515: LD_VAR 0 4
30519: PPUSH
30520: LD_VAR 0 5
30524: PPUSH
30525: CALL 56100 0 5
// end ;
30529: PPOPN 5
30531: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
30532: LD_VAR 0 1
30536: PPUSH
30537: LD_VAR 0 2
30541: PPUSH
30542: CALL 55690 0 2
// end ;
30546: PPOPN 2
30548: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
30549: LD_VAR 0 1
30553: PPUSH
30554: LD_VAR 0 2
30558: PPUSH
30559: LD_VAR 0 3
30563: PPUSH
30564: LD_VAR 0 4
30568: PPUSH
30569: CALL 55528 0 4
// end ;
30573: PPOPN 4
30575: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
30576: LD_VAR 0 1
30580: PPUSH
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_VAR 0 3
30590: PPUSH
30591: CALL 55303 0 3
// end ;
30595: PPOPN 3
30597: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
30598: LD_VAR 0 1
30602: PPUSH
30603: LD_VAR 0 2
30607: PPUSH
30608: CALL 55188 0 2
// end ;
30612: PPOPN 2
30614: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
30615: LD_VAR 0 1
30619: PPUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: CALL 58951 0 2
// end ;
30629: PPOPN 2
30631: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 4 and driver in powellSquadAttack [ 1 ] and powellAllowRetreat then
30632: LD_VAR 0 1
30636: PPUSH
30637: CALL_OW 255
30641: PUSH
30642: LD_INT 4
30644: EQUAL
30645: PUSH
30646: LD_VAR 0 1
30650: PUSH
30651: LD_EXP 18
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: IN
30660: AND
30661: PUSH
30662: LD_EXP 19
30666: AND
30667: IFFALSE 30686
// begin ComMoveXY ( driver , 61 , 93 ) ;
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_INT 61
30676: PPUSH
30677: LD_INT 93
30679: PPUSH
30680: CALL_OW 111
// exit ;
30684: GO 30710
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
30686: LD_VAR 0 1
30690: PPUSH
30691: LD_VAR 0 2
30695: PPUSH
30696: LD_VAR 0 3
30700: PPUSH
30701: LD_VAR 0 4
30705: PPUSH
30706: CALL 59167 0 4
// end ;
30710: PPOPN 4
30712: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_VAR 0 2
30722: PPUSH
30723: CALL 54997 0 2
// end ; end_of_file
30727: PPOPN 2
30729: END
// every 0 0$30 trigger missionStage = 2 do var time ;
30730: LD_EXP 15
30734: PUSH
30735: LD_INT 2
30737: EQUAL
30738: IFFALSE 31191
30740: GO 30742
30742: DISABLE
30743: LD_INT 0
30745: PPUSH
// begin time := 0 0$30 ;
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: LD_INT 1050
30753: ST_TO_ADDR
// repeat wait ( time ) ;
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 150 , 19 , true ) ;
30763: LD_INT 1
30765: PPUSH
30766: LD_INT 5
30768: PPUSH
30769: CALL_OW 12
30773: PPUSH
30774: LD_INT 106
30776: PPUSH
30777: LD_INT 150
30779: PPUSH
30780: LD_INT 19
30782: PPUSH
30783: LD_INT 1
30785: PPUSH
30786: CALL_OW 56
// time := time + 0 0$9 ;
30790: LD_ADDR_VAR 0 1
30794: PUSH
30795: LD_VAR 0 1
30799: PUSH
30800: LD_INT 315
30802: PLUS
30803: ST_TO_ADDR
// wait ( rand ( 0 0$13 , 0 0$21 ) ) ;
30804: LD_INT 455
30806: PPUSH
30807: LD_INT 735
30809: PPUSH
30810: CALL_OW 12
30814: PPUSH
30815: CALL_OW 67
// if Prob ( 50 ) then
30819: LD_INT 50
30821: PPUSH
30822: CALL_OW 13
30826: IFFALSE 30855
// CreateCratesXYR ( rand ( 1 , 5 ) , 62 , 108 , 10 , true ) ;
30828: LD_INT 1
30830: PPUSH
30831: LD_INT 5
30833: PPUSH
30834: CALL_OW 12
30838: PPUSH
30839: LD_INT 62
30841: PPUSH
30842: LD_INT 108
30844: PPUSH
30845: LD_INT 10
30847: PPUSH
30848: LD_INT 1
30850: PPUSH
30851: CALL_OW 56
// until missionStage > 4 ;
30855: LD_EXP 15
30859: PUSH
30860: LD_INT 4
30862: GREATER
30863: IFFALSE 30754
// repeat wait ( 0 0$1 ) ;
30865: LD_INT 35
30867: PPUSH
30868: CALL_OW 67
// until missionStage = 6 ;
30872: LD_EXP 15
30876: PUSH
30877: LD_INT 6
30879: EQUAL
30880: IFFALSE 30865
// time := 0 0$40 ;
30882: LD_ADDR_VAR 0 1
30886: PUSH
30887: LD_INT 1400
30889: ST_TO_ADDR
// repeat wait ( time ) ;
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 35 , true ) ;
30899: LD_INT 1
30901: PPUSH
30902: LD_INT 5
30904: PPUSH
30905: CALL_OW 12
30909: PPUSH
30910: LD_INT 106
30912: PPUSH
30913: LD_INT 89
30915: PPUSH
30916: LD_INT 35
30918: PPUSH
30919: LD_INT 1
30921: PPUSH
30922: CALL_OW 56
// time := time + 0 0$3 ;
30926: LD_ADDR_VAR 0 1
30930: PUSH
30931: LD_VAR 0 1
30935: PUSH
30936: LD_INT 105
30938: PLUS
30939: ST_TO_ADDR
// if Prob ( 30 ) then
30940: LD_INT 30
30942: PPUSH
30943: CALL_OW 13
30947: IFFALSE 30993
// begin wait ( rand ( 0 0$15 , 0 0$21 ) ) ;
30949: LD_INT 525
30951: PPUSH
30952: LD_INT 735
30954: PPUSH
30955: CALL_OW 12
30959: PPUSH
30960: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
30964: LD_INT 1
30966: PPUSH
30967: LD_INT 5
30969: PPUSH
30970: CALL_OW 12
30974: PPUSH
30975: LD_INT 21
30977: PPUSH
30978: LD_INT 26
30980: PPUSH
30981: LD_INT 12
30983: PPUSH
30984: LD_INT 1
30986: PPUSH
30987: CALL_OW 56
// end else
30991: GO 31029
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
30993: LD_INT 700
30995: PPUSH
30996: LD_INT 1225
30998: PPUSH
30999: CALL_OW 12
31003: PPUSH
31004: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
31008: LD_INT 1
31010: PPUSH
31011: LD_INT 5
31013: PPUSH
31014: CALL_OW 12
31018: PPUSH
31019: LD_INT 16
31021: PPUSH
31022: LD_INT 1
31024: PPUSH
31025: CALL_OW 55
// end ; if Prob ( 50 ) then
31029: LD_INT 50
31031: PPUSH
31032: CALL_OW 13
31036: IFFALSE 31082
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
31038: LD_INT 700
31040: PPUSH
31041: LD_INT 1050
31043: PPUSH
31044: CALL_OW 12
31048: PPUSH
31049: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 181 , 218 , 16 , true ) ;
31053: LD_INT 1
31055: PPUSH
31056: LD_INT 5
31058: PPUSH
31059: CALL_OW 12
31063: PPUSH
31064: LD_INT 181
31066: PPUSH
31067: LD_INT 218
31069: PPUSH
31070: LD_INT 16
31072: PPUSH
31073: LD_INT 1
31075: PPUSH
31076: CALL_OW 56
// end else
31080: GO 31118
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
31082: LD_INT 350
31084: PPUSH
31085: LD_INT 525
31087: PPUSH
31088: CALL_OW 12
31092: PPUSH
31093: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
31097: LD_INT 1
31099: PPUSH
31100: LD_INT 5
31102: PPUSH
31103: CALL_OW 12
31107: PPUSH
31108: LD_INT 15
31110: PPUSH
31111: LD_INT 1
31113: PPUSH
31114: CALL_OW 55
// end ; if Prob ( 45 ) then
31118: LD_INT 45
31120: PPUSH
31121: CALL_OW 13
31125: IFFALSE 31169
// begin wait ( rand ( 0 0$15 , 0 0$25 ) ) ;
31127: LD_INT 525
31129: PPUSH
31130: LD_INT 875
31132: PPUSH
31133: CALL_OW 12
31137: PPUSH
31138: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 103 , 140 , 20 , true ) ;
31142: LD_INT 1
31144: PPUSH
31145: LD_INT 5
31147: PPUSH
31148: CALL_OW 12
31152: PPUSH
31153: LD_INT 103
31155: PPUSH
31156: LD_INT 140
31158: PPUSH
31159: LD_INT 20
31161: PPUSH
31162: LD_INT 1
31164: PPUSH
31165: CALL_OW 56
// end ; if time > 2 2$20 then
31169: LD_VAR 0 1
31173: PUSH
31174: LD_INT 4900
31176: GREATER
31177: IFFALSE 31187
// time := 0 0$40 ;
31179: LD_ADDR_VAR 0 1
31183: PUSH
31184: LD_INT 1400
31186: ST_TO_ADDR
// until false ;
31187: LD_INT 0
31189: IFFALSE 30890
// end ; end_of_file
31191: PPOPN 1
31193: END
// every 0 0$1 trigger missionStart and missionStage >= 6 do
31194: LD_EXP 13
31198: PUSH
31199: LD_EXP 15
31203: PUSH
31204: LD_INT 6
31206: GREATEREQUAL
31207: AND
31208: IFFALSE 31245
31210: GO 31212
31212: DISABLE
// begin enable ;
31213: ENABLE
// missionTime := missionTime + 0 0$1 ;
31214: LD_ADDR_EXP 14
31218: PUSH
31219: LD_EXP 14
31223: PUSH
31224: LD_INT 35
31226: PLUS
31227: ST_TO_ADDR
// display_strings = [ #Am15-1 , missionTime ] ;
31228: LD_ADDR_OWVAR 47
31232: PUSH
31233: LD_STRING #Am15-1
31235: PUSH
31236: LD_EXP 14
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// end ; end_of_file
31245: END
// export function InitNature ; begin
31246: LD_INT 0
31248: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
31249: LD_INT 3
31251: PPUSH
31252: LD_INT 3
31254: PPUSH
31255: LD_INT 2
31257: PPUSH
31258: LD_INT 1
31260: PPUSH
31261: LD_INT 1
31263: PPUSH
31264: LD_INT 0
31266: PPUSH
31267: LD_INT 0
31269: PPUSH
31270: LD_INT 20
31272: PPUSH
31273: LD_INT 0
31275: PPUSH
31276: CALL 93731 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
31280: LD_INT 2
31282: PPUSH
31283: LD_INT 1
31285: PPUSH
31286: LD_INT 1
31288: PPUSH
31289: LD_INT 1
31291: PPUSH
31292: LD_INT 1
31294: PPUSH
31295: LD_INT 0
31297: PPUSH
31298: LD_INT 0
31300: PPUSH
31301: LD_INT 21
31303: PPUSH
31304: LD_INT 0
31306: PPUSH
31307: CALL 93731 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
31311: LD_INT 4
31313: PPUSH
31314: LD_INT 1
31316: PPUSH
31317: LD_INT 2
31319: PPUSH
31320: LD_INT 4
31322: PPUSH
31323: LD_INT 2
31325: PPUSH
31326: LD_INT 1
31328: PPUSH
31329: LD_INT 0
31331: PPUSH
31332: LD_INT 22
31334: PPUSH
31335: LD_INT 0
31337: PPUSH
31338: CALL 93731 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
31342: LD_INT 0
31344: PPUSH
31345: LD_INT 0
31347: PPUSH
31348: LD_INT 0
31350: PPUSH
31351: LD_INT 0
31353: PPUSH
31354: LD_INT 0
31356: PPUSH
31357: LD_INT 0
31359: PPUSH
31360: LD_INT 9
31362: PPUSH
31363: LD_INT 0
31365: PPUSH
31366: LD_INT 23
31368: PPUSH
31369: CALL 93731 0 9
// end ; end_of_file
31373: LD_VAR 0 1
31377: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
31378: GO 31380
31380: DISABLE
// begin ru_radar := 98 ;
31381: LD_ADDR_EXP 92
31385: PUSH
31386: LD_INT 98
31388: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31389: LD_ADDR_EXP 93
31393: PUSH
31394: LD_INT 89
31396: ST_TO_ADDR
// us_hack := 99 ;
31397: LD_ADDR_EXP 94
31401: PUSH
31402: LD_INT 99
31404: ST_TO_ADDR
// us_artillery := 97 ;
31405: LD_ADDR_EXP 95
31409: PUSH
31410: LD_INT 97
31412: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31413: LD_ADDR_EXP 96
31417: PUSH
31418: LD_INT 91
31420: ST_TO_ADDR
// end ; end_of_file
31421: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// skirmish := false ;
31426: LD_ADDR_EXP 97
31430: PUSH
31431: LD_INT 0
31433: ST_TO_ADDR
// debug_mc := false ;
31434: LD_ADDR_EXP 98
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// mc_bases := [ ] ;
31442: LD_ADDR_EXP 99
31446: PUSH
31447: EMPTY
31448: ST_TO_ADDR
// mc_sides := [ ] ;
31449: LD_ADDR_EXP 125
31453: PUSH
31454: EMPTY
31455: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
31456: LD_ADDR_EXP 100
31460: PUSH
31461: EMPTY
31462: ST_TO_ADDR
// mc_building_repairs := [ ] ;
31463: LD_ADDR_EXP 101
31467: PUSH
31468: EMPTY
31469: ST_TO_ADDR
// mc_need_heal := [ ] ;
31470: LD_ADDR_EXP 102
31474: PUSH
31475: EMPTY
31476: ST_TO_ADDR
// mc_healers := [ ] ;
31477: LD_ADDR_EXP 103
31481: PUSH
31482: EMPTY
31483: ST_TO_ADDR
// mc_build_list := [ ] ;
31484: LD_ADDR_EXP 104
31488: PUSH
31489: EMPTY
31490: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
31491: LD_ADDR_EXP 131
31495: PUSH
31496: EMPTY
31497: ST_TO_ADDR
// mc_builders := [ ] ;
31498: LD_ADDR_EXP 105
31502: PUSH
31503: EMPTY
31504: ST_TO_ADDR
// mc_construct_list := [ ] ;
31505: LD_ADDR_EXP 106
31509: PUSH
31510: EMPTY
31511: ST_TO_ADDR
// mc_turret_list := [ ] ;
31512: LD_ADDR_EXP 107
31516: PUSH
31517: EMPTY
31518: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
31519: LD_ADDR_EXP 108
31523: PUSH
31524: EMPTY
31525: ST_TO_ADDR
// mc_miners := [ ] ;
31526: LD_ADDR_EXP 113
31530: PUSH
31531: EMPTY
31532: ST_TO_ADDR
// mc_mines := [ ] ;
31533: LD_ADDR_EXP 112
31537: PUSH
31538: EMPTY
31539: ST_TO_ADDR
// mc_minefields := [ ] ;
31540: LD_ADDR_EXP 114
31544: PUSH
31545: EMPTY
31546: ST_TO_ADDR
// mc_crates := [ ] ;
31547: LD_ADDR_EXP 115
31551: PUSH
31552: EMPTY
31553: ST_TO_ADDR
// mc_crates_collector := [ ] ;
31554: LD_ADDR_EXP 116
31558: PUSH
31559: EMPTY
31560: ST_TO_ADDR
// mc_crates_area := [ ] ;
31561: LD_ADDR_EXP 117
31565: PUSH
31566: EMPTY
31567: ST_TO_ADDR
// mc_vehicles := [ ] ;
31568: LD_ADDR_EXP 118
31572: PUSH
31573: EMPTY
31574: ST_TO_ADDR
// mc_attack := [ ] ;
31575: LD_ADDR_EXP 119
31579: PUSH
31580: EMPTY
31581: ST_TO_ADDR
// mc_produce := [ ] ;
31582: LD_ADDR_EXP 120
31586: PUSH
31587: EMPTY
31588: ST_TO_ADDR
// mc_defender := [ ] ;
31589: LD_ADDR_EXP 121
31593: PUSH
31594: EMPTY
31595: ST_TO_ADDR
// mc_parking := [ ] ;
31596: LD_ADDR_EXP 123
31600: PUSH
31601: EMPTY
31602: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
31603: LD_ADDR_EXP 109
31607: PUSH
31608: EMPTY
31609: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
31610: LD_ADDR_EXP 111
31614: PUSH
31615: EMPTY
31616: ST_TO_ADDR
// mc_scan := [ ] ;
31617: LD_ADDR_EXP 122
31621: PUSH
31622: EMPTY
31623: ST_TO_ADDR
// mc_scan_area := [ ] ;
31624: LD_ADDR_EXP 124
31628: PUSH
31629: EMPTY
31630: ST_TO_ADDR
// mc_tech := [ ] ;
31631: LD_ADDR_EXP 126
31635: PUSH
31636: EMPTY
31637: ST_TO_ADDR
// mc_class := [ ] ;
31638: LD_ADDR_EXP 140
31642: PUSH
31643: EMPTY
31644: ST_TO_ADDR
// mc_class_case_use := [ ] ;
31645: LD_ADDR_EXP 141
31649: PUSH
31650: EMPTY
31651: ST_TO_ADDR
// end ;
31652: LD_VAR 0 1
31656: RET
// export function MC_Kill ( base ) ; begin
31657: LD_INT 0
31659: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
31660: LD_ADDR_EXP 99
31664: PUSH
31665: LD_EXP 99
31669: PPUSH
31670: LD_VAR 0 1
31674: PPUSH
31675: EMPTY
31676: PPUSH
31677: CALL_OW 1
31681: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
31682: LD_ADDR_EXP 100
31686: PUSH
31687: LD_EXP 100
31691: PPUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: EMPTY
31698: PPUSH
31699: CALL_OW 1
31703: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
31704: LD_ADDR_EXP 101
31708: PUSH
31709: LD_EXP 101
31713: PPUSH
31714: LD_VAR 0 1
31718: PPUSH
31719: EMPTY
31720: PPUSH
31721: CALL_OW 1
31725: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
31726: LD_ADDR_EXP 102
31730: PUSH
31731: LD_EXP 102
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: EMPTY
31742: PPUSH
31743: CALL_OW 1
31747: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
31748: LD_ADDR_EXP 103
31752: PUSH
31753: LD_EXP 103
31757: PPUSH
31758: LD_VAR 0 1
31762: PPUSH
31763: EMPTY
31764: PPUSH
31765: CALL_OW 1
31769: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
31770: LD_ADDR_EXP 104
31774: PUSH
31775: LD_EXP 104
31779: PPUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: EMPTY
31786: PPUSH
31787: CALL_OW 1
31791: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
31792: LD_ADDR_EXP 105
31796: PUSH
31797: LD_EXP 105
31801: PPUSH
31802: LD_VAR 0 1
31806: PPUSH
31807: EMPTY
31808: PPUSH
31809: CALL_OW 1
31813: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
31814: LD_ADDR_EXP 106
31818: PUSH
31819: LD_EXP 106
31823: PPUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: EMPTY
31830: PPUSH
31831: CALL_OW 1
31835: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
31836: LD_ADDR_EXP 107
31840: PUSH
31841: LD_EXP 107
31845: PPUSH
31846: LD_VAR 0 1
31850: PPUSH
31851: EMPTY
31852: PPUSH
31853: CALL_OW 1
31857: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
31858: LD_ADDR_EXP 108
31862: PUSH
31863: LD_EXP 108
31867: PPUSH
31868: LD_VAR 0 1
31872: PPUSH
31873: EMPTY
31874: PPUSH
31875: CALL_OW 1
31879: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
31880: LD_ADDR_EXP 109
31884: PUSH
31885: LD_EXP 109
31889: PPUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: EMPTY
31896: PPUSH
31897: CALL_OW 1
31901: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
31902: LD_ADDR_EXP 110
31906: PUSH
31907: LD_EXP 110
31911: PPUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: LD_INT 0
31919: PPUSH
31920: CALL_OW 1
31924: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
31925: LD_ADDR_EXP 111
31929: PUSH
31930: LD_EXP 111
31934: PPUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: EMPTY
31941: PPUSH
31942: CALL_OW 1
31946: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
31947: LD_ADDR_EXP 112
31951: PUSH
31952: LD_EXP 112
31956: PPUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: EMPTY
31963: PPUSH
31964: CALL_OW 1
31968: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
31969: LD_ADDR_EXP 113
31973: PUSH
31974: LD_EXP 113
31978: PPUSH
31979: LD_VAR 0 1
31983: PPUSH
31984: EMPTY
31985: PPUSH
31986: CALL_OW 1
31990: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
31991: LD_ADDR_EXP 114
31995: PUSH
31996: LD_EXP 114
32000: PPUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: EMPTY
32007: PPUSH
32008: CALL_OW 1
32012: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
32013: LD_ADDR_EXP 115
32017: PUSH
32018: LD_EXP 115
32022: PPUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: EMPTY
32029: PPUSH
32030: CALL_OW 1
32034: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
32035: LD_ADDR_EXP 116
32039: PUSH
32040: LD_EXP 116
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: EMPTY
32051: PPUSH
32052: CALL_OW 1
32056: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
32057: LD_ADDR_EXP 117
32061: PUSH
32062: LD_EXP 117
32066: PPUSH
32067: LD_VAR 0 1
32071: PPUSH
32072: EMPTY
32073: PPUSH
32074: CALL_OW 1
32078: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
32079: LD_ADDR_EXP 118
32083: PUSH
32084: LD_EXP 118
32088: PPUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: EMPTY
32095: PPUSH
32096: CALL_OW 1
32100: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
32101: LD_ADDR_EXP 119
32105: PUSH
32106: LD_EXP 119
32110: PPUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: EMPTY
32117: PPUSH
32118: CALL_OW 1
32122: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
32123: LD_ADDR_EXP 120
32127: PUSH
32128: LD_EXP 120
32132: PPUSH
32133: LD_VAR 0 1
32137: PPUSH
32138: EMPTY
32139: PPUSH
32140: CALL_OW 1
32144: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
32145: LD_ADDR_EXP 121
32149: PUSH
32150: LD_EXP 121
32154: PPUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: EMPTY
32161: PPUSH
32162: CALL_OW 1
32166: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
32167: LD_ADDR_EXP 122
32171: PUSH
32172: LD_EXP 122
32176: PPUSH
32177: LD_VAR 0 1
32181: PPUSH
32182: EMPTY
32183: PPUSH
32184: CALL_OW 1
32188: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
32189: LD_ADDR_EXP 123
32193: PUSH
32194: LD_EXP 123
32198: PPUSH
32199: LD_VAR 0 1
32203: PPUSH
32204: EMPTY
32205: PPUSH
32206: CALL_OW 1
32210: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
32211: LD_ADDR_EXP 124
32215: PUSH
32216: LD_EXP 124
32220: PPUSH
32221: LD_VAR 0 1
32225: PPUSH
32226: EMPTY
32227: PPUSH
32228: CALL_OW 1
32232: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
32233: LD_ADDR_EXP 126
32237: PUSH
32238: LD_EXP 126
32242: PPUSH
32243: LD_VAR 0 1
32247: PPUSH
32248: EMPTY
32249: PPUSH
32250: CALL_OW 1
32254: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
32255: LD_ADDR_EXP 128
32259: PUSH
32260: LD_EXP 128
32264: PPUSH
32265: LD_VAR 0 1
32269: PPUSH
32270: EMPTY
32271: PPUSH
32272: CALL_OW 1
32276: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
32277: LD_ADDR_EXP 129
32281: PUSH
32282: LD_EXP 129
32286: PPUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: EMPTY
32293: PPUSH
32294: CALL_OW 1
32298: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
32299: LD_ADDR_EXP 130
32303: PUSH
32304: LD_EXP 130
32308: PPUSH
32309: LD_VAR 0 1
32313: PPUSH
32314: EMPTY
32315: PPUSH
32316: CALL_OW 1
32320: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
32321: LD_ADDR_EXP 131
32325: PUSH
32326: LD_EXP 131
32330: PPUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: EMPTY
32337: PPUSH
32338: CALL_OW 1
32342: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
32343: LD_ADDR_EXP 132
32347: PUSH
32348: LD_EXP 132
32352: PPUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: EMPTY
32359: PPUSH
32360: CALL_OW 1
32364: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
32365: LD_ADDR_EXP 133
32369: PUSH
32370: LD_EXP 133
32374: PPUSH
32375: LD_VAR 0 1
32379: PPUSH
32380: EMPTY
32381: PPUSH
32382: CALL_OW 1
32386: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
32387: LD_ADDR_EXP 134
32391: PUSH
32392: LD_EXP 134
32396: PPUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: EMPTY
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
32409: LD_ADDR_EXP 135
32413: PUSH
32414: LD_EXP 135
32418: PPUSH
32419: LD_VAR 0 1
32423: PPUSH
32424: EMPTY
32425: PPUSH
32426: CALL_OW 1
32430: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
32431: LD_ADDR_EXP 136
32435: PUSH
32436: LD_EXP 136
32440: PPUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: EMPTY
32447: PPUSH
32448: CALL_OW 1
32452: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
32453: LD_ADDR_EXP 137
32457: PUSH
32458: LD_EXP 137
32462: PPUSH
32463: LD_VAR 0 1
32467: PPUSH
32468: EMPTY
32469: PPUSH
32470: CALL_OW 1
32474: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
32475: LD_ADDR_EXP 138
32479: PUSH
32480: LD_EXP 138
32484: PPUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: EMPTY
32491: PPUSH
32492: CALL_OW 1
32496: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
32497: LD_ADDR_EXP 139
32501: PUSH
32502: LD_EXP 139
32506: PPUSH
32507: LD_VAR 0 1
32511: PPUSH
32512: EMPTY
32513: PPUSH
32514: CALL_OW 1
32518: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
32519: LD_ADDR_EXP 140
32523: PUSH
32524: LD_EXP 140
32528: PPUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: EMPTY
32535: PPUSH
32536: CALL_OW 1
32540: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
32541: LD_ADDR_EXP 141
32545: PUSH
32546: LD_EXP 141
32550: PPUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: LD_INT 0
32558: PPUSH
32559: CALL_OW 1
32563: ST_TO_ADDR
// end ;
32564: LD_VAR 0 2
32568: RET
// export function MC_Start ( ) ; var i ; begin
32569: LD_INT 0
32571: PPUSH
32572: PPUSH
// for i = 1 to mc_bases do
32573: LD_ADDR_VAR 0 2
32577: PUSH
32578: DOUBLE
32579: LD_INT 1
32581: DEC
32582: ST_TO_ADDR
32583: LD_EXP 99
32587: PUSH
32588: FOR_TO
32589: IFFALSE 33666
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
32591: LD_ADDR_EXP 99
32595: PUSH
32596: LD_EXP 99
32600: PPUSH
32601: LD_VAR 0 2
32605: PPUSH
32606: LD_EXP 99
32610: PUSH
32611: LD_VAR 0 2
32615: ARRAY
32616: PUSH
32617: LD_INT 0
32619: DIFF
32620: PPUSH
32621: CALL_OW 1
32625: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
32626: LD_ADDR_EXP 100
32630: PUSH
32631: LD_EXP 100
32635: PPUSH
32636: LD_VAR 0 2
32640: PPUSH
32641: EMPTY
32642: PPUSH
32643: CALL_OW 1
32647: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
32648: LD_ADDR_EXP 101
32652: PUSH
32653: LD_EXP 101
32657: PPUSH
32658: LD_VAR 0 2
32662: PPUSH
32663: EMPTY
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
32670: LD_ADDR_EXP 102
32674: PUSH
32675: LD_EXP 102
32679: PPUSH
32680: LD_VAR 0 2
32684: PPUSH
32685: EMPTY
32686: PPUSH
32687: CALL_OW 1
32691: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
32692: LD_ADDR_EXP 103
32696: PUSH
32697: LD_EXP 103
32701: PPUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: EMPTY
32708: PUSH
32709: EMPTY
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PPUSH
32715: CALL_OW 1
32719: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
32720: LD_ADDR_EXP 104
32724: PUSH
32725: LD_EXP 104
32729: PPUSH
32730: LD_VAR 0 2
32734: PPUSH
32735: EMPTY
32736: PPUSH
32737: CALL_OW 1
32741: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
32742: LD_ADDR_EXP 131
32746: PUSH
32747: LD_EXP 131
32751: PPUSH
32752: LD_VAR 0 2
32756: PPUSH
32757: EMPTY
32758: PPUSH
32759: CALL_OW 1
32763: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
32764: LD_ADDR_EXP 105
32768: PUSH
32769: LD_EXP 105
32773: PPUSH
32774: LD_VAR 0 2
32778: PPUSH
32779: EMPTY
32780: PPUSH
32781: CALL_OW 1
32785: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
32786: LD_ADDR_EXP 106
32790: PUSH
32791: LD_EXP 106
32795: PPUSH
32796: LD_VAR 0 2
32800: PPUSH
32801: EMPTY
32802: PPUSH
32803: CALL_OW 1
32807: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
32808: LD_ADDR_EXP 107
32812: PUSH
32813: LD_EXP 107
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: LD_EXP 99
32827: PUSH
32828: LD_VAR 0 2
32832: ARRAY
32833: PPUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 30
32839: PUSH
32840: LD_INT 32
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 33
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: PPUSH
32862: CALL_OW 72
32866: PPUSH
32867: CALL_OW 1
32871: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
32872: LD_ADDR_EXP 108
32876: PUSH
32877: LD_EXP 108
32881: PPUSH
32882: LD_VAR 0 2
32886: PPUSH
32887: LD_EXP 99
32891: PUSH
32892: LD_VAR 0 2
32896: ARRAY
32897: PPUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 30
32903: PUSH
32904: LD_INT 32
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 30
32913: PUSH
32914: LD_INT 31
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 58
32928: PUSH
32929: EMPTY
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PPUSH
32936: CALL_OW 72
32940: PPUSH
32941: CALL_OW 1
32945: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
32946: LD_ADDR_EXP 109
32950: PUSH
32951: LD_EXP 109
32955: PPUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: EMPTY
32962: PPUSH
32963: CALL_OW 1
32967: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
32968: LD_ADDR_EXP 113
32972: PUSH
32973: LD_EXP 113
32977: PPUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: EMPTY
32984: PPUSH
32985: CALL_OW 1
32989: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
32990: LD_ADDR_EXP 112
32994: PUSH
32995: LD_EXP 112
32999: PPUSH
33000: LD_VAR 0 2
33004: PPUSH
33005: EMPTY
33006: PPUSH
33007: CALL_OW 1
33011: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
33012: LD_ADDR_EXP 114
33016: PUSH
33017: LD_EXP 114
33021: PPUSH
33022: LD_VAR 0 2
33026: PPUSH
33027: EMPTY
33028: PPUSH
33029: CALL_OW 1
33033: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
33034: LD_ADDR_EXP 115
33038: PUSH
33039: LD_EXP 115
33043: PPUSH
33044: LD_VAR 0 2
33048: PPUSH
33049: EMPTY
33050: PPUSH
33051: CALL_OW 1
33055: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33056: LD_ADDR_EXP 116
33060: PUSH
33061: LD_EXP 116
33065: PPUSH
33066: LD_VAR 0 2
33070: PPUSH
33071: EMPTY
33072: PPUSH
33073: CALL_OW 1
33077: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
33078: LD_ADDR_EXP 117
33082: PUSH
33083: LD_EXP 117
33087: PPUSH
33088: LD_VAR 0 2
33092: PPUSH
33093: EMPTY
33094: PPUSH
33095: CALL_OW 1
33099: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
33100: LD_ADDR_EXP 118
33104: PUSH
33105: LD_EXP 118
33109: PPUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: EMPTY
33116: PPUSH
33117: CALL_OW 1
33121: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
33122: LD_ADDR_EXP 119
33126: PUSH
33127: LD_EXP 119
33131: PPUSH
33132: LD_VAR 0 2
33136: PPUSH
33137: EMPTY
33138: PPUSH
33139: CALL_OW 1
33143: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
33144: LD_ADDR_EXP 120
33148: PUSH
33149: LD_EXP 120
33153: PPUSH
33154: LD_VAR 0 2
33158: PPUSH
33159: EMPTY
33160: PPUSH
33161: CALL_OW 1
33165: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
33166: LD_ADDR_EXP 121
33170: PUSH
33171: LD_EXP 121
33175: PPUSH
33176: LD_VAR 0 2
33180: PPUSH
33181: EMPTY
33182: PPUSH
33183: CALL_OW 1
33187: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
33188: LD_ADDR_EXP 110
33192: PUSH
33193: LD_EXP 110
33197: PPUSH
33198: LD_VAR 0 2
33202: PPUSH
33203: LD_INT 0
33205: PPUSH
33206: CALL_OW 1
33210: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
33211: LD_ADDR_EXP 123
33215: PUSH
33216: LD_EXP 123
33220: PPUSH
33221: LD_VAR 0 2
33225: PPUSH
33226: LD_INT 0
33228: PPUSH
33229: CALL_OW 1
33233: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
33234: LD_ADDR_EXP 111
33238: PUSH
33239: LD_EXP 111
33243: PPUSH
33244: LD_VAR 0 2
33248: PPUSH
33249: EMPTY
33250: PPUSH
33251: CALL_OW 1
33255: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
33256: LD_ADDR_EXP 122
33260: PUSH
33261: LD_EXP 122
33265: PPUSH
33266: LD_VAR 0 2
33270: PPUSH
33271: LD_INT 0
33273: PPUSH
33274: CALL_OW 1
33278: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
33279: LD_ADDR_EXP 124
33283: PUSH
33284: LD_EXP 124
33288: PPUSH
33289: LD_VAR 0 2
33293: PPUSH
33294: EMPTY
33295: PPUSH
33296: CALL_OW 1
33300: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
33301: LD_ADDR_EXP 127
33305: PUSH
33306: LD_EXP 127
33310: PPUSH
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_INT 0
33318: PPUSH
33319: CALL_OW 1
33323: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
33324: LD_ADDR_EXP 128
33328: PUSH
33329: LD_EXP 128
33333: PPUSH
33334: LD_VAR 0 2
33338: PPUSH
33339: EMPTY
33340: PPUSH
33341: CALL_OW 1
33345: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
33346: LD_ADDR_EXP 129
33350: PUSH
33351: LD_EXP 129
33355: PPUSH
33356: LD_VAR 0 2
33360: PPUSH
33361: EMPTY
33362: PPUSH
33363: CALL_OW 1
33367: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33368: LD_ADDR_EXP 130
33372: PUSH
33373: LD_EXP 130
33377: PPUSH
33378: LD_VAR 0 2
33382: PPUSH
33383: EMPTY
33384: PPUSH
33385: CALL_OW 1
33389: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
33390: LD_ADDR_EXP 132
33394: PUSH
33395: LD_EXP 132
33399: PPUSH
33400: LD_VAR 0 2
33404: PPUSH
33405: LD_EXP 99
33409: PUSH
33410: LD_VAR 0 2
33414: ARRAY
33415: PPUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 30
33421: PUSH
33422: LD_INT 6
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 30
33431: PUSH
33432: LD_INT 7
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 8
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: PPUSH
33455: CALL_OW 72
33459: PPUSH
33460: CALL_OW 1
33464: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
33465: LD_ADDR_EXP 133
33469: PUSH
33470: LD_EXP 133
33474: PPUSH
33475: LD_VAR 0 2
33479: PPUSH
33480: EMPTY
33481: PPUSH
33482: CALL_OW 1
33486: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
33487: LD_ADDR_EXP 134
33491: PUSH
33492: LD_EXP 134
33496: PPUSH
33497: LD_VAR 0 2
33501: PPUSH
33502: EMPTY
33503: PPUSH
33504: CALL_OW 1
33508: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
33509: LD_ADDR_EXP 135
33513: PUSH
33514: LD_EXP 135
33518: PPUSH
33519: LD_VAR 0 2
33523: PPUSH
33524: EMPTY
33525: PPUSH
33526: CALL_OW 1
33530: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
33531: LD_ADDR_EXP 136
33535: PUSH
33536: LD_EXP 136
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: EMPTY
33547: PPUSH
33548: CALL_OW 1
33552: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
33553: LD_ADDR_EXP 137
33557: PUSH
33558: LD_EXP 137
33562: PPUSH
33563: LD_VAR 0 2
33567: PPUSH
33568: EMPTY
33569: PPUSH
33570: CALL_OW 1
33574: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
33575: LD_ADDR_EXP 138
33579: PUSH
33580: LD_EXP 138
33584: PPUSH
33585: LD_VAR 0 2
33589: PPUSH
33590: EMPTY
33591: PPUSH
33592: CALL_OW 1
33596: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
33597: LD_ADDR_EXP 139
33601: PUSH
33602: LD_EXP 139
33606: PPUSH
33607: LD_VAR 0 2
33611: PPUSH
33612: EMPTY
33613: PPUSH
33614: CALL_OW 1
33618: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
33619: LD_ADDR_EXP 140
33623: PUSH
33624: LD_EXP 140
33628: PPUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: EMPTY
33635: PPUSH
33636: CALL_OW 1
33640: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
33641: LD_ADDR_EXP 141
33645: PUSH
33646: LD_EXP 141
33650: PPUSH
33651: LD_VAR 0 2
33655: PPUSH
33656: LD_INT 0
33658: PPUSH
33659: CALL_OW 1
33663: ST_TO_ADDR
// end ;
33664: GO 32588
33666: POP
33667: POP
// MC_InitSides ( ) ;
33668: CALL 33954 0 0
// MC_InitResearch ( ) ;
33672: CALL 33693 0 0
// CustomInitMacro ( ) ;
33676: CALL 437 0 0
// skirmish := true ;
33680: LD_ADDR_EXP 97
33684: PUSH
33685: LD_INT 1
33687: ST_TO_ADDR
// end ;
33688: LD_VAR 0 1
33692: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
// if not mc_bases then
33701: LD_EXP 99
33705: NOT
33706: IFFALSE 33710
// exit ;
33708: GO 33949
// for i = 1 to 8 do
33710: LD_ADDR_VAR 0 2
33714: PUSH
33715: DOUBLE
33716: LD_INT 1
33718: DEC
33719: ST_TO_ADDR
33720: LD_INT 8
33722: PUSH
33723: FOR_TO
33724: IFFALSE 33750
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
33726: LD_ADDR_EXP 126
33730: PUSH
33731: LD_EXP 126
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: EMPTY
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
33748: GO 33723
33750: POP
33751: POP
// tmp := [ ] ;
33752: LD_ADDR_VAR 0 5
33756: PUSH
33757: EMPTY
33758: ST_TO_ADDR
// for i = 1 to mc_sides do
33759: LD_ADDR_VAR 0 2
33763: PUSH
33764: DOUBLE
33765: LD_INT 1
33767: DEC
33768: ST_TO_ADDR
33769: LD_EXP 125
33773: PUSH
33774: FOR_TO
33775: IFFALSE 33833
// if not mc_sides [ i ] in tmp then
33777: LD_EXP 125
33781: PUSH
33782: LD_VAR 0 2
33786: ARRAY
33787: PUSH
33788: LD_VAR 0 5
33792: IN
33793: NOT
33794: IFFALSE 33831
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
33796: LD_ADDR_VAR 0 5
33800: PUSH
33801: LD_VAR 0 5
33805: PPUSH
33806: LD_VAR 0 5
33810: PUSH
33811: LD_INT 1
33813: PLUS
33814: PPUSH
33815: LD_EXP 125
33819: PUSH
33820: LD_VAR 0 2
33824: ARRAY
33825: PPUSH
33826: CALL_OW 2
33830: ST_TO_ADDR
33831: GO 33774
33833: POP
33834: POP
// if not tmp then
33835: LD_VAR 0 5
33839: NOT
33840: IFFALSE 33844
// exit ;
33842: GO 33949
// for j in tmp do
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: LD_VAR 0 5
33853: PUSH
33854: FOR_IN
33855: IFFALSE 33947
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
33857: LD_ADDR_VAR 0 6
33861: PUSH
33862: LD_INT 22
33864: PUSH
33865: LD_VAR 0 3
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PPUSH
33874: CALL_OW 69
33878: ST_TO_ADDR
// if not un then
33879: LD_VAR 0 6
33883: NOT
33884: IFFALSE 33888
// continue ;
33886: GO 33854
// nation := GetNation ( un [ 1 ] ) ;
33888: LD_ADDR_VAR 0 4
33892: PUSH
33893: LD_VAR 0 6
33897: PUSH
33898: LD_INT 1
33900: ARRAY
33901: PPUSH
33902: CALL_OW 248
33906: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
33907: LD_ADDR_EXP 126
33911: PUSH
33912: LD_EXP 126
33916: PPUSH
33917: LD_VAR 0 3
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: LD_VAR 0 4
33931: PPUSH
33932: LD_INT 1
33934: PPUSH
33935: CALL 59371 0 3
33939: PPUSH
33940: CALL_OW 1
33944: ST_TO_ADDR
// end ;
33945: GO 33854
33947: POP
33948: POP
// end ;
33949: LD_VAR 0 1
33953: RET
// export function MC_InitSides ( ) ; var i ; begin
33954: LD_INT 0
33956: PPUSH
33957: PPUSH
// if not mc_bases then
33958: LD_EXP 99
33962: NOT
33963: IFFALSE 33967
// exit ;
33965: GO 34041
// for i = 1 to mc_bases do
33967: LD_ADDR_VAR 0 2
33971: PUSH
33972: DOUBLE
33973: LD_INT 1
33975: DEC
33976: ST_TO_ADDR
33977: LD_EXP 99
33981: PUSH
33982: FOR_TO
33983: IFFALSE 34039
// if mc_bases [ i ] then
33985: LD_EXP 99
33989: PUSH
33990: LD_VAR 0 2
33994: ARRAY
33995: IFFALSE 34037
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
33997: LD_ADDR_EXP 125
34001: PUSH
34002: LD_EXP 125
34006: PPUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_EXP 99
34016: PUSH
34017: LD_VAR 0 2
34021: ARRAY
34022: PUSH
34023: LD_INT 1
34025: ARRAY
34026: PPUSH
34027: CALL_OW 255
34031: PPUSH
34032: CALL_OW 1
34036: ST_TO_ADDR
34037: GO 33982
34039: POP
34040: POP
// end ;
34041: LD_VAR 0 1
34045: RET
// every 0 0$01 trigger skirmish do
34046: LD_EXP 97
34050: IFFALSE 34204
34052: GO 34054
34054: DISABLE
// begin enable ;
34055: ENABLE
// MC_CheckBuildings ( ) ;
34056: CALL 38370 0 0
// MC_CheckPeopleLife ( ) ;
34060: CALL 38495 0 0
// RaiseSailEvent ( 100 ) ;
34064: LD_INT 100
34066: PPUSH
34067: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
34071: LD_INT 103
34073: PPUSH
34074: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
34078: LD_INT 104
34080: PPUSH
34081: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
34085: LD_INT 105
34087: PPUSH
34088: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
34092: LD_INT 106
34094: PPUSH
34095: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
34099: LD_INT 107
34101: PPUSH
34102: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
34106: LD_INT 108
34108: PPUSH
34109: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
34113: LD_INT 109
34115: PPUSH
34116: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
34120: LD_INT 110
34122: PPUSH
34123: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
34127: LD_INT 111
34129: PPUSH
34130: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
34134: LD_INT 112
34136: PPUSH
34137: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
34141: LD_INT 113
34143: PPUSH
34144: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
34148: LD_INT 120
34150: PPUSH
34151: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
34155: LD_INT 121
34157: PPUSH
34158: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
34162: LD_INT 122
34164: PPUSH
34165: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
34169: LD_INT 123
34171: PPUSH
34172: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
34176: LD_INT 124
34178: PPUSH
34179: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
34183: LD_INT 125
34185: PPUSH
34186: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
34190: LD_INT 126
34192: PPUSH
34193: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
34197: LD_INT 200
34199: PPUSH
34200: CALL_OW 427
// end ;
34204: END
// on SailEvent ( event ) do begin if event < 100 then
34205: LD_VAR 0 1
34209: PUSH
34210: LD_INT 100
34212: LESS
34213: IFFALSE 34224
// CustomEvent ( event ) ;
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL 30026 0 1
// if event = 100 then
34224: LD_VAR 0 1
34228: PUSH
34229: LD_INT 100
34231: EQUAL
34232: IFFALSE 34238
// MC_ClassManager ( ) ;
34234: CALL 34630 0 0
// if event = 101 then
34238: LD_VAR 0 1
34242: PUSH
34243: LD_INT 101
34245: EQUAL
34246: IFFALSE 34252
// MC_RepairBuildings ( ) ;
34248: CALL 39091 0 0
// if event = 102 then
34252: LD_VAR 0 1
34256: PUSH
34257: LD_INT 102
34259: EQUAL
34260: IFFALSE 34266
// MC_Heal ( ) ;
34262: CALL 39497 0 0
// if event = 103 then
34266: LD_VAR 0 1
34270: PUSH
34271: LD_INT 103
34273: EQUAL
34274: IFFALSE 34280
// MC_Build ( ) ;
34276: CALL 39919 0 0
// if event = 104 then
34280: LD_VAR 0 1
34284: PUSH
34285: LD_INT 104
34287: EQUAL
34288: IFFALSE 34294
// MC_TurretWeapon ( ) ;
34290: CALL 41532 0 0
// if event = 105 then
34294: LD_VAR 0 1
34298: PUSH
34299: LD_INT 105
34301: EQUAL
34302: IFFALSE 34308
// MC_BuildUpgrade ( ) ;
34304: CALL 41083 0 0
// if event = 106 then
34308: LD_VAR 0 1
34312: PUSH
34313: LD_INT 106
34315: EQUAL
34316: IFFALSE 34322
// MC_PlantMines ( ) ;
34318: CALL 41962 0 0
// if event = 107 then
34322: LD_VAR 0 1
34326: PUSH
34327: LD_INT 107
34329: EQUAL
34330: IFFALSE 34336
// MC_CollectCrates ( ) ;
34332: CALL 42996 0 0
// if event = 108 then
34336: LD_VAR 0 1
34340: PUSH
34341: LD_INT 108
34343: EQUAL
34344: IFFALSE 34350
// MC_LinkRemoteControl ( ) ;
34346: CALL 44753 0 0
// if event = 109 then
34350: LD_VAR 0 1
34354: PUSH
34355: LD_INT 109
34357: EQUAL
34358: IFFALSE 34364
// MC_ProduceVehicle ( ) ;
34360: CALL 44934 0 0
// if event = 110 then
34364: LD_VAR 0 1
34368: PUSH
34369: LD_INT 110
34371: EQUAL
34372: IFFALSE 34378
// MC_SendAttack ( ) ;
34374: CALL 45415 0 0
// if event = 111 then
34378: LD_VAR 0 1
34382: PUSH
34383: LD_INT 111
34385: EQUAL
34386: IFFALSE 34392
// MC_Defend ( ) ;
34388: CALL 45523 0 0
// if event = 112 then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_INT 112
34399: EQUAL
34400: IFFALSE 34406
// MC_Research ( ) ;
34402: CALL 46150 0 0
// if event = 113 then
34406: LD_VAR 0 1
34410: PUSH
34411: LD_INT 113
34413: EQUAL
34414: IFFALSE 34420
// MC_MinesTrigger ( ) ;
34416: CALL 47264 0 0
// if event = 120 then
34420: LD_VAR 0 1
34424: PUSH
34425: LD_INT 120
34427: EQUAL
34428: IFFALSE 34434
// MC_RepairVehicle ( ) ;
34430: CALL 47363 0 0
// if event = 121 then
34434: LD_VAR 0 1
34438: PUSH
34439: LD_INT 121
34441: EQUAL
34442: IFFALSE 34448
// MC_TameApe ( ) ;
34444: CALL 48106 0 0
// if event = 122 then
34448: LD_VAR 0 1
34452: PUSH
34453: LD_INT 122
34455: EQUAL
34456: IFFALSE 34462
// MC_ChangeApeClass ( ) ;
34458: CALL 48935 0 0
// if event = 123 then
34462: LD_VAR 0 1
34466: PUSH
34467: LD_INT 123
34469: EQUAL
34470: IFFALSE 34476
// MC_Bazooka ( ) ;
34472: CALL 49585 0 0
// if event = 124 then
34476: LD_VAR 0 1
34480: PUSH
34481: LD_INT 124
34483: EQUAL
34484: IFFALSE 34490
// MC_TeleportExit ( ) ;
34486: CALL 49783 0 0
// if event = 125 then
34490: LD_VAR 0 1
34494: PUSH
34495: LD_INT 125
34497: EQUAL
34498: IFFALSE 34504
// MC_Deposits ( ) ;
34500: CALL 50430 0 0
// if event = 126 then
34504: LD_VAR 0 1
34508: PUSH
34509: LD_INT 126
34511: EQUAL
34512: IFFALSE 34518
// MC_RemoteDriver ( ) ;
34514: CALL 51055 0 0
// if event = 200 then
34518: LD_VAR 0 1
34522: PUSH
34523: LD_INT 200
34525: EQUAL
34526: IFFALSE 34532
// MC_Idle ( ) ;
34528: CALL 52788 0 0
// end ;
34532: PPOPN 1
34534: END
// export function MC_Reset ( base , tag ) ; var i ; begin
34535: LD_INT 0
34537: PPUSH
34538: PPUSH
// if not mc_bases [ base ] or not tag then
34539: LD_EXP 99
34543: PUSH
34544: LD_VAR 0 1
34548: ARRAY
34549: NOT
34550: PUSH
34551: LD_VAR 0 2
34555: NOT
34556: OR
34557: IFFALSE 34561
// exit ;
34559: GO 34625
// for i in mc_bases [ base ] union mc_ape [ base ] do
34561: LD_ADDR_VAR 0 4
34565: PUSH
34566: LD_EXP 99
34570: PUSH
34571: LD_VAR 0 1
34575: ARRAY
34576: PUSH
34577: LD_EXP 128
34581: PUSH
34582: LD_VAR 0 1
34586: ARRAY
34587: UNION
34588: PUSH
34589: FOR_IN
34590: IFFALSE 34623
// if GetTag ( i ) = tag then
34592: LD_VAR 0 4
34596: PPUSH
34597: CALL_OW 110
34601: PUSH
34602: LD_VAR 0 2
34606: EQUAL
34607: IFFALSE 34621
// SetTag ( i , 0 ) ;
34609: LD_VAR 0 4
34613: PPUSH
34614: LD_INT 0
34616: PPUSH
34617: CALL_OW 109
34621: GO 34589
34623: POP
34624: POP
// end ;
34625: LD_VAR 0 3
34629: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
// if not mc_bases then
34640: LD_EXP 99
34644: NOT
34645: IFFALSE 34649
// exit ;
34647: GO 35107
// for i = 1 to mc_bases do
34649: LD_ADDR_VAR 0 2
34653: PUSH
34654: DOUBLE
34655: LD_INT 1
34657: DEC
34658: ST_TO_ADDR
34659: LD_EXP 99
34663: PUSH
34664: FOR_TO
34665: IFFALSE 35105
// begin tmp := MC_ClassCheckReq ( i ) ;
34667: LD_ADDR_VAR 0 4
34671: PUSH
34672: LD_VAR 0 2
34676: PPUSH
34677: CALL 35112 0 1
34681: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
34682: LD_ADDR_EXP 140
34686: PUSH
34687: LD_EXP 140
34691: PPUSH
34692: LD_VAR 0 2
34696: PPUSH
34697: LD_VAR 0 4
34701: PPUSH
34702: CALL_OW 1
34706: ST_TO_ADDR
// if not tmp then
34707: LD_VAR 0 4
34711: NOT
34712: IFFALSE 34716
// continue ;
34714: GO 34664
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
34716: LD_ADDR_VAR 0 6
34720: PUSH
34721: LD_EXP 99
34725: PUSH
34726: LD_VAR 0 2
34730: ARRAY
34731: PPUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 30
34737: PUSH
34738: LD_INT 4
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 30
34747: PUSH
34748: LD_INT 5
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: PPUSH
34760: CALL_OW 72
34764: PUSH
34765: LD_EXP 99
34769: PUSH
34770: LD_VAR 0 2
34774: ARRAY
34775: PPUSH
34776: LD_INT 2
34778: PUSH
34779: LD_INT 30
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 30
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: PPUSH
34804: CALL_OW 72
34808: PUSH
34809: LD_EXP 99
34813: PUSH
34814: LD_VAR 0 2
34818: ARRAY
34819: PPUSH
34820: LD_INT 30
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PPUSH
34830: CALL_OW 72
34834: PUSH
34835: LD_EXP 99
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PPUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 30
34851: PUSH
34852: LD_INT 6
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 30
34861: PUSH
34862: LD_INT 7
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 30
34871: PUSH
34872: LD_INT 8
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL_OW 72
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// for j = 1 to 4 do
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: DOUBLE
34902: LD_INT 1
34904: DEC
34905: ST_TO_ADDR
34906: LD_INT 4
34908: PUSH
34909: FOR_TO
34910: IFFALSE 35101
// begin if not tmp [ j ] then
34912: LD_VAR 0 4
34916: PUSH
34917: LD_VAR 0 3
34921: ARRAY
34922: NOT
34923: IFFALSE 34927
// continue ;
34925: GO 34909
// for p in tmp [ j ] do
34927: LD_ADDR_VAR 0 5
34931: PUSH
34932: LD_VAR 0 4
34936: PUSH
34937: LD_VAR 0 3
34941: ARRAY
34942: PUSH
34943: FOR_IN
34944: IFFALSE 35097
// begin if not b [ j ] then
34946: LD_VAR 0 6
34950: PUSH
34951: LD_VAR 0 3
34955: ARRAY
34956: NOT
34957: IFFALSE 34961
// break ;
34959: GO 35097
// e := 0 ;
34961: LD_ADDR_VAR 0 7
34965: PUSH
34966: LD_INT 0
34968: ST_TO_ADDR
// for k in b [ j ] do
34969: LD_ADDR_VAR 0 8
34973: PUSH
34974: LD_VAR 0 6
34978: PUSH
34979: LD_VAR 0 3
34983: ARRAY
34984: PUSH
34985: FOR_IN
34986: IFFALSE 35013
// if IsNotFull ( k ) then
34988: LD_VAR 0 8
34992: PPUSH
34993: CALL 63397 0 1
34997: IFFALSE 35011
// begin e := k ;
34999: LD_ADDR_VAR 0 7
35003: PUSH
35004: LD_VAR 0 8
35008: ST_TO_ADDR
// break ;
35009: GO 35013
// end ;
35011: GO 34985
35013: POP
35014: POP
// if e and not UnitGoingToBuilding ( p , e ) then
35015: LD_VAR 0 7
35019: PUSH
35020: LD_VAR 0 5
35024: PPUSH
35025: LD_VAR 0 7
35029: PPUSH
35030: CALL 100385 0 2
35034: NOT
35035: AND
35036: IFFALSE 35095
// begin if IsInUnit ( p ) then
35038: LD_VAR 0 5
35042: PPUSH
35043: CALL_OW 310
35047: IFFALSE 35058
// ComExitBuilding ( p ) ;
35049: LD_VAR 0 5
35053: PPUSH
35054: CALL_OW 122
// ComEnterUnit ( p , e ) ;
35058: LD_VAR 0 5
35062: PPUSH
35063: LD_VAR 0 7
35067: PPUSH
35068: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
35072: LD_VAR 0 5
35076: PPUSH
35077: LD_VAR 0 3
35081: PPUSH
35082: CALL_OW 183
// AddComExitBuilding ( p ) ;
35086: LD_VAR 0 5
35090: PPUSH
35091: CALL_OW 182
// end ; end ;
35095: GO 34943
35097: POP
35098: POP
// end ;
35099: GO 34909
35101: POP
35102: POP
// end ;
35103: GO 34664
35105: POP
35106: POP
// end ;
35107: LD_VAR 0 1
35111: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
35112: LD_INT 0
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
35121: PPUSH
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35126: LD_VAR 0 1
35130: NOT
35131: PUSH
35132: LD_EXP 99
35136: PUSH
35137: LD_VAR 0 1
35141: ARRAY
35142: NOT
35143: OR
35144: PUSH
35145: LD_EXP 99
35149: PUSH
35150: LD_VAR 0 1
35154: ARRAY
35155: PPUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 30
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 30
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: PPUSH
35184: CALL_OW 72
35188: NOT
35189: OR
35190: IFFALSE 35194
// exit ;
35192: GO 38365
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35194: LD_ADDR_VAR 0 4
35198: PUSH
35199: LD_EXP 99
35203: PUSH
35204: LD_VAR 0 1
35208: ARRAY
35209: PPUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 25
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 25
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 25
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 25
35245: PUSH
35246: LD_INT 4
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 25
35255: PUSH
35256: LD_INT 5
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 25
35265: PUSH
35266: LD_INT 8
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 25
35275: PUSH
35276: LD_INT 9
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: PPUSH
35293: CALL_OW 72
35297: ST_TO_ADDR
// for i in tmp do
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_VAR 0 4
35307: PUSH
35308: FOR_IN
35309: IFFALSE 35340
// if GetTag ( i ) then
35311: LD_VAR 0 3
35315: PPUSH
35316: CALL_OW 110
35320: IFFALSE 35338
// tmp := tmp diff i ;
35322: LD_ADDR_VAR 0 4
35326: PUSH
35327: LD_VAR 0 4
35331: PUSH
35332: LD_VAR 0 3
35336: DIFF
35337: ST_TO_ADDR
35338: GO 35308
35340: POP
35341: POP
// if not tmp then
35342: LD_VAR 0 4
35346: NOT
35347: IFFALSE 35351
// exit ;
35349: GO 38365
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35351: LD_ADDR_VAR 0 5
35355: PUSH
35356: LD_EXP 99
35360: PUSH
35361: LD_VAR 0 1
35365: ARRAY
35366: PPUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 25
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 25
35382: PUSH
35383: LD_INT 5
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 25
35392: PUSH
35393: LD_INT 8
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 25
35402: PUSH
35403: LD_INT 9
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: PPUSH
35417: CALL_OW 72
35421: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
35422: LD_ADDR_VAR 0 6
35426: PUSH
35427: LD_EXP 99
35431: PUSH
35432: LD_VAR 0 1
35436: ARRAY
35437: PPUSH
35438: LD_INT 25
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PPUSH
35448: CALL_OW 72
35452: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
35453: LD_ADDR_VAR 0 7
35457: PUSH
35458: LD_EXP 99
35462: PUSH
35463: LD_VAR 0 1
35467: ARRAY
35468: PPUSH
35469: LD_INT 25
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 72
35483: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
35484: LD_ADDR_VAR 0 8
35488: PUSH
35489: LD_EXP 99
35493: PUSH
35494: LD_VAR 0 1
35498: ARRAY
35499: PPUSH
35500: LD_INT 25
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 24
35512: PUSH
35513: LD_INT 251
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PPUSH
35524: CALL_OW 72
35528: ST_TO_ADDR
// if mc_scan [ base ] then
35529: LD_EXP 122
35533: PUSH
35534: LD_VAR 0 1
35538: ARRAY
35539: IFFALSE 36000
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
35541: LD_ADDR_EXP 141
35545: PUSH
35546: LD_EXP 141
35550: PPUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: LD_INT 4
35558: PPUSH
35559: CALL_OW 1
35563: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
35564: LD_ADDR_VAR 0 12
35568: PUSH
35569: LD_EXP 99
35573: PUSH
35574: LD_VAR 0 1
35578: ARRAY
35579: PPUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 30
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 30
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: PPUSH
35608: CALL_OW 72
35612: ST_TO_ADDR
// if not b then
35613: LD_VAR 0 12
35617: NOT
35618: IFFALSE 35622
// exit ;
35620: GO 38365
// p := [ ] ;
35622: LD_ADDR_VAR 0 11
35626: PUSH
35627: EMPTY
35628: ST_TO_ADDR
// if sci >= 2 then
35629: LD_VAR 0 8
35633: PUSH
35634: LD_INT 2
35636: GREATEREQUAL
35637: IFFALSE 35668
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
35639: LD_ADDR_VAR 0 8
35643: PUSH
35644: LD_VAR 0 8
35648: PUSH
35649: LD_INT 1
35651: ARRAY
35652: PUSH
35653: LD_VAR 0 8
35657: PUSH
35658: LD_INT 2
35660: ARRAY
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: ST_TO_ADDR
35666: GO 35729
// if sci = 1 then
35668: LD_VAR 0 8
35672: PUSH
35673: LD_INT 1
35675: EQUAL
35676: IFFALSE 35697
// sci := [ sci [ 1 ] ] else
35678: LD_ADDR_VAR 0 8
35682: PUSH
35683: LD_VAR 0 8
35687: PUSH
35688: LD_INT 1
35690: ARRAY
35691: PUSH
35692: EMPTY
35693: LIST
35694: ST_TO_ADDR
35695: GO 35729
// if sci = 0 then
35697: LD_VAR 0 8
35701: PUSH
35702: LD_INT 0
35704: EQUAL
35705: IFFALSE 35729
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
35707: LD_ADDR_VAR 0 11
35711: PUSH
35712: LD_VAR 0 4
35716: PPUSH
35717: LD_INT 4
35719: PPUSH
35720: CALL 100248 0 2
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: ST_TO_ADDR
// if eng > 4 then
35729: LD_VAR 0 6
35733: PUSH
35734: LD_INT 4
35736: GREATER
35737: IFFALSE 35783
// for i = eng downto 4 do
35739: LD_ADDR_VAR 0 3
35743: PUSH
35744: DOUBLE
35745: LD_VAR 0 6
35749: INC
35750: ST_TO_ADDR
35751: LD_INT 4
35753: PUSH
35754: FOR_DOWNTO
35755: IFFALSE 35781
// eng := eng diff eng [ i ] ;
35757: LD_ADDR_VAR 0 6
35761: PUSH
35762: LD_VAR 0 6
35766: PUSH
35767: LD_VAR 0 6
35771: PUSH
35772: LD_VAR 0 3
35776: ARRAY
35777: DIFF
35778: ST_TO_ADDR
35779: GO 35754
35781: POP
35782: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
35783: LD_ADDR_VAR 0 4
35787: PUSH
35788: LD_VAR 0 4
35792: PUSH
35793: LD_VAR 0 5
35797: PUSH
35798: LD_VAR 0 6
35802: UNION
35803: PUSH
35804: LD_VAR 0 7
35808: UNION
35809: PUSH
35810: LD_VAR 0 8
35814: UNION
35815: DIFF
35816: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
35817: LD_ADDR_VAR 0 13
35821: PUSH
35822: LD_EXP 99
35826: PUSH
35827: LD_VAR 0 1
35831: ARRAY
35832: PPUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 30
35838: PUSH
35839: LD_INT 32
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 30
35848: PUSH
35849: LD_INT 31
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: PPUSH
35861: CALL_OW 72
35865: PUSH
35866: LD_EXP 99
35870: PUSH
35871: LD_VAR 0 1
35875: ARRAY
35876: PPUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 30
35882: PUSH
35883: LD_INT 4
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 30
35892: PUSH
35893: LD_INT 5
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: PPUSH
35905: CALL_OW 72
35909: PUSH
35910: LD_INT 6
35912: MUL
35913: PLUS
35914: ST_TO_ADDR
// if bcount < tmp then
35915: LD_VAR 0 13
35919: PUSH
35920: LD_VAR 0 4
35924: LESS
35925: IFFALSE 35971
// for i = tmp downto bcount do
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: DOUBLE
35933: LD_VAR 0 4
35937: INC
35938: ST_TO_ADDR
35939: LD_VAR 0 13
35943: PUSH
35944: FOR_DOWNTO
35945: IFFALSE 35969
// tmp := Delete ( tmp , tmp ) ;
35947: LD_ADDR_VAR 0 4
35951: PUSH
35952: LD_VAR 0 4
35956: PPUSH
35957: LD_VAR 0 4
35961: PPUSH
35962: CALL_OW 3
35966: ST_TO_ADDR
35967: GO 35944
35969: POP
35970: POP
// result := [ tmp , 0 , 0 , p ] ;
35971: LD_ADDR_VAR 0 2
35975: PUSH
35976: LD_VAR 0 4
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_VAR 0 11
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// exit ;
35998: GO 38365
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36000: LD_EXP 99
36004: PUSH
36005: LD_VAR 0 1
36009: ARRAY
36010: PPUSH
36011: LD_INT 2
36013: PUSH
36014: LD_INT 30
36016: PUSH
36017: LD_INT 6
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 30
36026: PUSH
36027: LD_INT 7
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 30
36036: PUSH
36037: LD_INT 8
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 72
36054: NOT
36055: PUSH
36056: LD_EXP 99
36060: PUSH
36061: LD_VAR 0 1
36065: ARRAY
36066: PPUSH
36067: LD_INT 30
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PPUSH
36077: CALL_OW 72
36081: NOT
36082: AND
36083: IFFALSE 36155
// begin if eng = tmp then
36085: LD_VAR 0 6
36089: PUSH
36090: LD_VAR 0 4
36094: EQUAL
36095: IFFALSE 36099
// exit ;
36097: GO 38365
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
36099: LD_ADDR_EXP 141
36103: PUSH
36104: LD_EXP 141
36108: PPUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: LD_INT 1
36116: PPUSH
36117: CALL_OW 1
36121: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
36122: LD_ADDR_VAR 0 2
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_VAR 0 4
36134: PUSH
36135: LD_VAR 0 6
36139: DIFF
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// exit ;
36153: GO 38365
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36155: LD_EXP 126
36159: PUSH
36160: LD_EXP 125
36164: PUSH
36165: LD_VAR 0 1
36169: ARRAY
36170: ARRAY
36171: PUSH
36172: LD_EXP 99
36176: PUSH
36177: LD_VAR 0 1
36181: ARRAY
36182: PPUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 30
36188: PUSH
36189: LD_INT 6
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 30
36198: PUSH
36199: LD_INT 7
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 30
36208: PUSH
36209: LD_INT 8
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: PPUSH
36222: CALL_OW 72
36226: AND
36227: PUSH
36228: LD_EXP 99
36232: PUSH
36233: LD_VAR 0 1
36237: ARRAY
36238: PPUSH
36239: LD_INT 30
36241: PUSH
36242: LD_INT 3
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PPUSH
36249: CALL_OW 72
36253: NOT
36254: AND
36255: IFFALSE 36469
// begin if sci >= 6 then
36257: LD_VAR 0 8
36261: PUSH
36262: LD_INT 6
36264: GREATEREQUAL
36265: IFFALSE 36269
// exit ;
36267: GO 38365
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
36269: LD_ADDR_EXP 141
36273: PUSH
36274: LD_EXP 141
36278: PPUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: LD_INT 2
36286: PPUSH
36287: CALL_OW 1
36291: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
36292: LD_ADDR_VAR 0 9
36296: PUSH
36297: LD_VAR 0 4
36301: PUSH
36302: LD_VAR 0 8
36306: DIFF
36307: PPUSH
36308: LD_INT 4
36310: PPUSH
36311: CALL 100248 0 2
36315: ST_TO_ADDR
// p := [ ] ;
36316: LD_ADDR_VAR 0 11
36320: PUSH
36321: EMPTY
36322: ST_TO_ADDR
// if sci < 6 and sort > 6 then
36323: LD_VAR 0 8
36327: PUSH
36328: LD_INT 6
36330: LESS
36331: PUSH
36332: LD_VAR 0 9
36336: PUSH
36337: LD_INT 6
36339: GREATER
36340: AND
36341: IFFALSE 36422
// begin for i = 1 to 6 - sci do
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: DOUBLE
36349: LD_INT 1
36351: DEC
36352: ST_TO_ADDR
36353: LD_INT 6
36355: PUSH
36356: LD_VAR 0 8
36360: MINUS
36361: PUSH
36362: FOR_TO
36363: IFFALSE 36418
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
36365: LD_ADDR_VAR 0 11
36369: PUSH
36370: LD_VAR 0 11
36374: PPUSH
36375: LD_VAR 0 11
36379: PUSH
36380: LD_INT 1
36382: PLUS
36383: PPUSH
36384: LD_VAR 0 9
36388: PUSH
36389: LD_INT 1
36391: ARRAY
36392: PPUSH
36393: CALL_OW 2
36397: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_VAR 0 9
36407: PPUSH
36408: LD_INT 1
36410: PPUSH
36411: CALL_OW 3
36415: ST_TO_ADDR
// end ;
36416: GO 36362
36418: POP
36419: POP
// end else
36420: GO 36442
// if sort then
36422: LD_VAR 0 9
36426: IFFALSE 36442
// p := sort [ 1 ] ;
36428: LD_ADDR_VAR 0 11
36432: PUSH
36433: LD_VAR 0 9
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
36442: LD_ADDR_VAR 0 2
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_VAR 0 11
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// exit ;
36467: GO 38365
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36469: LD_EXP 126
36473: PUSH
36474: LD_EXP 125
36478: PUSH
36479: LD_VAR 0 1
36483: ARRAY
36484: ARRAY
36485: PUSH
36486: LD_EXP 99
36490: PUSH
36491: LD_VAR 0 1
36495: ARRAY
36496: PPUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 30
36502: PUSH
36503: LD_INT 6
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 30
36512: PUSH
36513: LD_INT 7
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 30
36522: PUSH
36523: LD_INT 8
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: PPUSH
36536: CALL_OW 72
36540: AND
36541: PUSH
36542: LD_EXP 99
36546: PUSH
36547: LD_VAR 0 1
36551: ARRAY
36552: PPUSH
36553: LD_INT 30
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PPUSH
36563: CALL_OW 72
36567: AND
36568: IFFALSE 37095
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
36570: LD_ADDR_EXP 141
36574: PUSH
36575: LD_EXP 141
36579: PPUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: LD_INT 3
36587: PPUSH
36588: CALL_OW 1
36592: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
36593: LD_ADDR_VAR 0 2
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if not eng then
36616: LD_VAR 0 6
36620: NOT
36621: IFFALSE 36684
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
36623: LD_ADDR_VAR 0 11
36627: PUSH
36628: LD_VAR 0 4
36632: PPUSH
36633: LD_INT 2
36635: PPUSH
36636: CALL 100248 0 2
36640: PUSH
36641: LD_INT 1
36643: ARRAY
36644: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
36645: LD_ADDR_VAR 0 2
36649: PUSH
36650: LD_VAR 0 2
36654: PPUSH
36655: LD_INT 2
36657: PPUSH
36658: LD_VAR 0 11
36662: PPUSH
36663: CALL_OW 1
36667: ST_TO_ADDR
// tmp := tmp diff p ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_VAR 0 4
36677: PUSH
36678: LD_VAR 0 11
36682: DIFF
36683: ST_TO_ADDR
// end ; if not eng then
36684: LD_VAR 0 6
36688: NOT
36689: IFFALSE 36715
// tmp := tmp diff ( mech union sci ) else
36691: LD_ADDR_VAR 0 4
36695: PUSH
36696: LD_VAR 0 4
36700: PUSH
36701: LD_VAR 0 7
36705: PUSH
36706: LD_VAR 0 8
36710: UNION
36711: DIFF
36712: ST_TO_ADDR
36713: GO 36747
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
36715: LD_ADDR_VAR 0 4
36719: PUSH
36720: LD_VAR 0 4
36724: PUSH
36725: LD_VAR 0 6
36729: PUSH
36730: LD_INT 1
36732: ARRAY
36733: PUSH
36734: LD_VAR 0 7
36738: UNION
36739: PUSH
36740: LD_VAR 0 8
36744: UNION
36745: DIFF
36746: ST_TO_ADDR
// if tmp and sci < 6 then
36747: LD_VAR 0 4
36751: PUSH
36752: LD_VAR 0 8
36756: PUSH
36757: LD_INT 6
36759: LESS
36760: AND
36761: IFFALSE 36920
// begin sort := SortBySkill ( tmp , 4 ) ;
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: LD_VAR 0 4
36772: PPUSH
36773: LD_INT 4
36775: PPUSH
36776: CALL 100248 0 2
36780: ST_TO_ADDR
// p := [ ] ;
36781: LD_ADDR_VAR 0 11
36785: PUSH
36786: EMPTY
36787: ST_TO_ADDR
// if sort then
36788: LD_VAR 0 9
36792: IFFALSE 36891
// for i = 1 to 6 - sci do
36794: LD_ADDR_VAR 0 3
36798: PUSH
36799: DOUBLE
36800: LD_INT 1
36802: DEC
36803: ST_TO_ADDR
36804: LD_INT 6
36806: PUSH
36807: LD_VAR 0 8
36811: MINUS
36812: PUSH
36813: FOR_TO
36814: IFFALSE 36889
// begin if i = sort then
36816: LD_VAR 0 3
36820: PUSH
36821: LD_VAR 0 9
36825: EQUAL
36826: IFFALSE 36830
// break ;
36828: GO 36889
// p := Insert ( p , p + 1 , sort [ i ] ) ;
36830: LD_ADDR_VAR 0 11
36834: PUSH
36835: LD_VAR 0 11
36839: PPUSH
36840: LD_VAR 0 11
36844: PUSH
36845: LD_INT 1
36847: PLUS
36848: PPUSH
36849: LD_VAR 0 9
36853: PUSH
36854: LD_VAR 0 3
36858: ARRAY
36859: PPUSH
36860: CALL_OW 2
36864: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
36865: LD_ADDR_VAR 0 4
36869: PUSH
36870: LD_VAR 0 4
36874: PUSH
36875: LD_VAR 0 9
36879: PUSH
36880: LD_VAR 0 3
36884: ARRAY
36885: DIFF
36886: ST_TO_ADDR
// end ;
36887: GO 36813
36889: POP
36890: POP
// if p then
36891: LD_VAR 0 11
36895: IFFALSE 36920
// result := Replace ( result , 4 , p ) ;
36897: LD_ADDR_VAR 0 2
36901: PUSH
36902: LD_VAR 0 2
36906: PPUSH
36907: LD_INT 4
36909: PPUSH
36910: LD_VAR 0 11
36914: PPUSH
36915: CALL_OW 1
36919: ST_TO_ADDR
// end ; if tmp and mech < 6 then
36920: LD_VAR 0 4
36924: PUSH
36925: LD_VAR 0 7
36929: PUSH
36930: LD_INT 6
36932: LESS
36933: AND
36934: IFFALSE 37093
// begin sort := SortBySkill ( tmp , 3 ) ;
36936: LD_ADDR_VAR 0 9
36940: PUSH
36941: LD_VAR 0 4
36945: PPUSH
36946: LD_INT 3
36948: PPUSH
36949: CALL 100248 0 2
36953: ST_TO_ADDR
// p := [ ] ;
36954: LD_ADDR_VAR 0 11
36958: PUSH
36959: EMPTY
36960: ST_TO_ADDR
// if sort then
36961: LD_VAR 0 9
36965: IFFALSE 37064
// for i = 1 to 6 - mech do
36967: LD_ADDR_VAR 0 3
36971: PUSH
36972: DOUBLE
36973: LD_INT 1
36975: DEC
36976: ST_TO_ADDR
36977: LD_INT 6
36979: PUSH
36980: LD_VAR 0 7
36984: MINUS
36985: PUSH
36986: FOR_TO
36987: IFFALSE 37062
// begin if i = sort then
36989: LD_VAR 0 3
36993: PUSH
36994: LD_VAR 0 9
36998: EQUAL
36999: IFFALSE 37003
// break ;
37001: GO 37062
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37003: LD_ADDR_VAR 0 11
37007: PUSH
37008: LD_VAR 0 11
37012: PPUSH
37013: LD_VAR 0 11
37017: PUSH
37018: LD_INT 1
37020: PLUS
37021: PPUSH
37022: LD_VAR 0 9
37026: PUSH
37027: LD_VAR 0 3
37031: ARRAY
37032: PPUSH
37033: CALL_OW 2
37037: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37038: LD_ADDR_VAR 0 4
37042: PUSH
37043: LD_VAR 0 4
37047: PUSH
37048: LD_VAR 0 9
37052: PUSH
37053: LD_VAR 0 3
37057: ARRAY
37058: DIFF
37059: ST_TO_ADDR
// end ;
37060: GO 36986
37062: POP
37063: POP
// if p then
37064: LD_VAR 0 11
37068: IFFALSE 37093
// result := Replace ( result , 3 , p ) ;
37070: LD_ADDR_VAR 0 2
37074: PUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: LD_INT 3
37082: PPUSH
37083: LD_VAR 0 11
37087: PPUSH
37088: CALL_OW 1
37092: ST_TO_ADDR
// end ; exit ;
37093: GO 38365
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
37095: LD_EXP 126
37099: PUSH
37100: LD_EXP 125
37104: PUSH
37105: LD_VAR 0 1
37109: ARRAY
37110: ARRAY
37111: NOT
37112: PUSH
37113: LD_EXP 99
37117: PUSH
37118: LD_VAR 0 1
37122: ARRAY
37123: PPUSH
37124: LD_INT 30
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PPUSH
37134: CALL_OW 72
37138: AND
37139: PUSH
37140: LD_EXP 104
37144: PUSH
37145: LD_VAR 0 1
37149: ARRAY
37150: AND
37151: IFFALSE 37695
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
37153: LD_ADDR_EXP 141
37157: PUSH
37158: LD_EXP 141
37162: PPUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: LD_INT 5
37170: PPUSH
37171: CALL_OW 1
37175: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
37176: LD_ADDR_VAR 0 2
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// if sci > 1 then
37199: LD_VAR 0 8
37203: PUSH
37204: LD_INT 1
37206: GREATER
37207: IFFALSE 37235
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
37209: LD_ADDR_VAR 0 4
37213: PUSH
37214: LD_VAR 0 4
37218: PUSH
37219: LD_VAR 0 8
37223: PUSH
37224: LD_VAR 0 8
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: DIFF
37233: DIFF
37234: ST_TO_ADDR
// if tmp and not sci then
37235: LD_VAR 0 4
37239: PUSH
37240: LD_VAR 0 8
37244: NOT
37245: AND
37246: IFFALSE 37315
// begin sort := SortBySkill ( tmp , 4 ) ;
37248: LD_ADDR_VAR 0 9
37252: PUSH
37253: LD_VAR 0 4
37257: PPUSH
37258: LD_INT 4
37260: PPUSH
37261: CALL 100248 0 2
37265: ST_TO_ADDR
// if sort then
37266: LD_VAR 0 9
37270: IFFALSE 37286
// p := sort [ 1 ] ;
37272: LD_ADDR_VAR 0 11
37276: PUSH
37277: LD_VAR 0 9
37281: PUSH
37282: LD_INT 1
37284: ARRAY
37285: ST_TO_ADDR
// if p then
37286: LD_VAR 0 11
37290: IFFALSE 37315
// result := Replace ( result , 4 , p ) ;
37292: LD_ADDR_VAR 0 2
37296: PUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: LD_INT 4
37304: PPUSH
37305: LD_VAR 0 11
37309: PPUSH
37310: CALL_OW 1
37314: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
37315: LD_ADDR_VAR 0 4
37319: PUSH
37320: LD_VAR 0 4
37324: PUSH
37325: LD_VAR 0 7
37329: DIFF
37330: ST_TO_ADDR
// if tmp and mech < 6 then
37331: LD_VAR 0 4
37335: PUSH
37336: LD_VAR 0 7
37340: PUSH
37341: LD_INT 6
37343: LESS
37344: AND
37345: IFFALSE 37504
// begin sort := SortBySkill ( tmp , 3 ) ;
37347: LD_ADDR_VAR 0 9
37351: PUSH
37352: LD_VAR 0 4
37356: PPUSH
37357: LD_INT 3
37359: PPUSH
37360: CALL 100248 0 2
37364: ST_TO_ADDR
// p := [ ] ;
37365: LD_ADDR_VAR 0 11
37369: PUSH
37370: EMPTY
37371: ST_TO_ADDR
// if sort then
37372: LD_VAR 0 9
37376: IFFALSE 37475
// for i = 1 to 6 - mech do
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: DOUBLE
37384: LD_INT 1
37386: DEC
37387: ST_TO_ADDR
37388: LD_INT 6
37390: PUSH
37391: LD_VAR 0 7
37395: MINUS
37396: PUSH
37397: FOR_TO
37398: IFFALSE 37473
// begin if i = sort then
37400: LD_VAR 0 3
37404: PUSH
37405: LD_VAR 0 9
37409: EQUAL
37410: IFFALSE 37414
// break ;
37412: GO 37473
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37414: LD_ADDR_VAR 0 11
37418: PUSH
37419: LD_VAR 0 11
37423: PPUSH
37424: LD_VAR 0 11
37428: PUSH
37429: LD_INT 1
37431: PLUS
37432: PPUSH
37433: LD_VAR 0 9
37437: PUSH
37438: LD_VAR 0 3
37442: ARRAY
37443: PPUSH
37444: CALL_OW 2
37448: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 4
37458: PUSH
37459: LD_VAR 0 9
37463: PUSH
37464: LD_VAR 0 3
37468: ARRAY
37469: DIFF
37470: ST_TO_ADDR
// end ;
37471: GO 37397
37473: POP
37474: POP
// if p then
37475: LD_VAR 0 11
37479: IFFALSE 37504
// result := Replace ( result , 3 , p ) ;
37481: LD_ADDR_VAR 0 2
37485: PUSH
37486: LD_VAR 0 2
37490: PPUSH
37491: LD_INT 3
37493: PPUSH
37494: LD_VAR 0 11
37498: PPUSH
37499: CALL_OW 1
37503: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
37504: LD_ADDR_VAR 0 4
37508: PUSH
37509: LD_VAR 0 4
37513: PUSH
37514: LD_VAR 0 6
37518: DIFF
37519: ST_TO_ADDR
// if tmp and eng < 6 then
37520: LD_VAR 0 4
37524: PUSH
37525: LD_VAR 0 6
37529: PUSH
37530: LD_INT 6
37532: LESS
37533: AND
37534: IFFALSE 37693
// begin sort := SortBySkill ( tmp , 2 ) ;
37536: LD_ADDR_VAR 0 9
37540: PUSH
37541: LD_VAR 0 4
37545: PPUSH
37546: LD_INT 2
37548: PPUSH
37549: CALL 100248 0 2
37553: ST_TO_ADDR
// p := [ ] ;
37554: LD_ADDR_VAR 0 11
37558: PUSH
37559: EMPTY
37560: ST_TO_ADDR
// if sort then
37561: LD_VAR 0 9
37565: IFFALSE 37664
// for i = 1 to 6 - eng do
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_INT 6
37579: PUSH
37580: LD_VAR 0 6
37584: MINUS
37585: PUSH
37586: FOR_TO
37587: IFFALSE 37662
// begin if i = sort then
37589: LD_VAR 0 3
37593: PUSH
37594: LD_VAR 0 9
37598: EQUAL
37599: IFFALSE 37603
// break ;
37601: GO 37662
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37603: LD_ADDR_VAR 0 11
37607: PUSH
37608: LD_VAR 0 11
37612: PPUSH
37613: LD_VAR 0 11
37617: PUSH
37618: LD_INT 1
37620: PLUS
37621: PPUSH
37622: LD_VAR 0 9
37626: PUSH
37627: LD_VAR 0 3
37631: ARRAY
37632: PPUSH
37633: CALL_OW 2
37637: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37638: LD_ADDR_VAR 0 4
37642: PUSH
37643: LD_VAR 0 4
37647: PUSH
37648: LD_VAR 0 9
37652: PUSH
37653: LD_VAR 0 3
37657: ARRAY
37658: DIFF
37659: ST_TO_ADDR
// end ;
37660: GO 37586
37662: POP
37663: POP
// if p then
37664: LD_VAR 0 11
37668: IFFALSE 37693
// result := Replace ( result , 2 , p ) ;
37670: LD_ADDR_VAR 0 2
37674: PUSH
37675: LD_VAR 0 2
37679: PPUSH
37680: LD_INT 2
37682: PPUSH
37683: LD_VAR 0 11
37687: PPUSH
37688: CALL_OW 1
37692: ST_TO_ADDR
// end ; exit ;
37693: GO 38365
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
37695: LD_EXP 126
37699: PUSH
37700: LD_EXP 125
37704: PUSH
37705: LD_VAR 0 1
37709: ARRAY
37710: ARRAY
37711: NOT
37712: PUSH
37713: LD_EXP 99
37717: PUSH
37718: LD_VAR 0 1
37722: ARRAY
37723: PPUSH
37724: LD_INT 30
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PPUSH
37734: CALL_OW 72
37738: AND
37739: PUSH
37740: LD_EXP 104
37744: PUSH
37745: LD_VAR 0 1
37749: ARRAY
37750: NOT
37751: AND
37752: IFFALSE 38365
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
37754: LD_ADDR_EXP 141
37758: PUSH
37759: LD_EXP 141
37763: PPUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: LD_INT 6
37771: PPUSH
37772: CALL_OW 1
37776: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
37777: LD_ADDR_VAR 0 2
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// if sci >= 1 then
37800: LD_VAR 0 8
37804: PUSH
37805: LD_INT 1
37807: GREATEREQUAL
37808: IFFALSE 37830
// tmp := tmp diff sci [ 1 ] ;
37810: LD_ADDR_VAR 0 4
37814: PUSH
37815: LD_VAR 0 4
37819: PUSH
37820: LD_VAR 0 8
37824: PUSH
37825: LD_INT 1
37827: ARRAY
37828: DIFF
37829: ST_TO_ADDR
// if tmp and not sci then
37830: LD_VAR 0 4
37834: PUSH
37835: LD_VAR 0 8
37839: NOT
37840: AND
37841: IFFALSE 37910
// begin sort := SortBySkill ( tmp , 4 ) ;
37843: LD_ADDR_VAR 0 9
37847: PUSH
37848: LD_VAR 0 4
37852: PPUSH
37853: LD_INT 4
37855: PPUSH
37856: CALL 100248 0 2
37860: ST_TO_ADDR
// if sort then
37861: LD_VAR 0 9
37865: IFFALSE 37881
// p := sort [ 1 ] ;
37867: LD_ADDR_VAR 0 11
37871: PUSH
37872: LD_VAR 0 9
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: ST_TO_ADDR
// if p then
37881: LD_VAR 0 11
37885: IFFALSE 37910
// result := Replace ( result , 4 , p ) ;
37887: LD_ADDR_VAR 0 2
37891: PUSH
37892: LD_VAR 0 2
37896: PPUSH
37897: LD_INT 4
37899: PPUSH
37900: LD_VAR 0 11
37904: PPUSH
37905: CALL_OW 1
37909: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
37910: LD_ADDR_VAR 0 4
37914: PUSH
37915: LD_VAR 0 4
37919: PUSH
37920: LD_VAR 0 7
37924: DIFF
37925: ST_TO_ADDR
// if tmp and mech < 6 then
37926: LD_VAR 0 4
37930: PUSH
37931: LD_VAR 0 7
37935: PUSH
37936: LD_INT 6
37938: LESS
37939: AND
37940: IFFALSE 38099
// begin sort := SortBySkill ( tmp , 3 ) ;
37942: LD_ADDR_VAR 0 9
37946: PUSH
37947: LD_VAR 0 4
37951: PPUSH
37952: LD_INT 3
37954: PPUSH
37955: CALL 100248 0 2
37959: ST_TO_ADDR
// p := [ ] ;
37960: LD_ADDR_VAR 0 11
37964: PUSH
37965: EMPTY
37966: ST_TO_ADDR
// if sort then
37967: LD_VAR 0 9
37971: IFFALSE 38070
// for i = 1 to 6 - mech do
37973: LD_ADDR_VAR 0 3
37977: PUSH
37978: DOUBLE
37979: LD_INT 1
37981: DEC
37982: ST_TO_ADDR
37983: LD_INT 6
37985: PUSH
37986: LD_VAR 0 7
37990: MINUS
37991: PUSH
37992: FOR_TO
37993: IFFALSE 38068
// begin if i = sort then
37995: LD_VAR 0 3
37999: PUSH
38000: LD_VAR 0 9
38004: EQUAL
38005: IFFALSE 38009
// break ;
38007: GO 38068
// p := Insert ( p , p + 1 , sort [ i ] ) ;
38009: LD_ADDR_VAR 0 11
38013: PUSH
38014: LD_VAR 0 11
38018: PPUSH
38019: LD_VAR 0 11
38023: PUSH
38024: LD_INT 1
38026: PLUS
38027: PPUSH
38028: LD_VAR 0 9
38032: PUSH
38033: LD_VAR 0 3
38037: ARRAY
38038: PPUSH
38039: CALL_OW 2
38043: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
38044: LD_ADDR_VAR 0 4
38048: PUSH
38049: LD_VAR 0 4
38053: PUSH
38054: LD_VAR 0 9
38058: PUSH
38059: LD_VAR 0 3
38063: ARRAY
38064: DIFF
38065: ST_TO_ADDR
// end ;
38066: GO 37992
38068: POP
38069: POP
// if p then
38070: LD_VAR 0 11
38074: IFFALSE 38099
// result := Replace ( result , 3 , p ) ;
38076: LD_ADDR_VAR 0 2
38080: PUSH
38081: LD_VAR 0 2
38085: PPUSH
38086: LD_INT 3
38088: PPUSH
38089: LD_VAR 0 11
38093: PPUSH
38094: CALL_OW 1
38098: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
38099: LD_ADDR_VAR 0 4
38103: PUSH
38104: LD_VAR 0 4
38108: PUSH
38109: LD_VAR 0 6
38113: DIFF
38114: ST_TO_ADDR
// if tmp and eng < 4 then
38115: LD_VAR 0 4
38119: PUSH
38120: LD_VAR 0 6
38124: PUSH
38125: LD_INT 4
38127: LESS
38128: AND
38129: IFFALSE 38290
// begin sort := SortBySkill ( tmp , 2 ) ;
38131: LD_ADDR_VAR 0 9
38135: PUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: LD_INT 2
38143: PPUSH
38144: CALL 100248 0 2
38148: ST_TO_ADDR
// p := [ ] ;
38149: LD_ADDR_VAR 0 11
38153: PUSH
38154: EMPTY
38155: ST_TO_ADDR
// if sort then
38156: LD_VAR 0 9
38160: IFFALSE 38259
// for i = 1 to 4 - eng do
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: DOUBLE
38168: LD_INT 1
38170: DEC
38171: ST_TO_ADDR
38172: LD_INT 4
38174: PUSH
38175: LD_VAR 0 6
38179: MINUS
38180: PUSH
38181: FOR_TO
38182: IFFALSE 38257
// begin if i = sort then
38184: LD_VAR 0 3
38188: PUSH
38189: LD_VAR 0 9
38193: EQUAL
38194: IFFALSE 38198
// break ;
38196: GO 38257
// p := Insert ( p , p + 1 , sort [ i ] ) ;
38198: LD_ADDR_VAR 0 11
38202: PUSH
38203: LD_VAR 0 11
38207: PPUSH
38208: LD_VAR 0 11
38212: PUSH
38213: LD_INT 1
38215: PLUS
38216: PPUSH
38217: LD_VAR 0 9
38221: PUSH
38222: LD_VAR 0 3
38226: ARRAY
38227: PPUSH
38228: CALL_OW 2
38232: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: LD_VAR 0 4
38242: PUSH
38243: LD_VAR 0 9
38247: PUSH
38248: LD_VAR 0 3
38252: ARRAY
38253: DIFF
38254: ST_TO_ADDR
// end ;
38255: GO 38181
38257: POP
38258: POP
// if p then
38259: LD_VAR 0 11
38263: IFFALSE 38288
// result := Replace ( result , 2 , p ) ;
38265: LD_ADDR_VAR 0 2
38269: PUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_INT 2
38277: PPUSH
38278: LD_VAR 0 11
38282: PPUSH
38283: CALL_OW 1
38287: ST_TO_ADDR
// end else
38288: GO 38334
// for i = eng downto 5 do
38290: LD_ADDR_VAR 0 3
38294: PUSH
38295: DOUBLE
38296: LD_VAR 0 6
38300: INC
38301: ST_TO_ADDR
38302: LD_INT 5
38304: PUSH
38305: FOR_DOWNTO
38306: IFFALSE 38332
// tmp := tmp union eng [ i ] ;
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: LD_VAR 0 4
38317: PUSH
38318: LD_VAR 0 6
38322: PUSH
38323: LD_VAR 0 3
38327: ARRAY
38328: UNION
38329: ST_TO_ADDR
38330: GO 38305
38332: POP
38333: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
38334: LD_ADDR_VAR 0 2
38338: PUSH
38339: LD_VAR 0 2
38343: PPUSH
38344: LD_INT 1
38346: PPUSH
38347: LD_VAR 0 4
38351: PUSH
38352: LD_VAR 0 5
38356: DIFF
38357: PPUSH
38358: CALL_OW 1
38362: ST_TO_ADDR
// exit ;
38363: GO 38365
// end ; end ;
38365: LD_VAR 0 2
38369: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
38370: LD_INT 0
38372: PPUSH
38373: PPUSH
38374: PPUSH
// if not mc_bases then
38375: LD_EXP 99
38379: NOT
38380: IFFALSE 38384
// exit ;
38382: GO 38490
// for i = 1 to mc_bases do
38384: LD_ADDR_VAR 0 2
38388: PUSH
38389: DOUBLE
38390: LD_INT 1
38392: DEC
38393: ST_TO_ADDR
38394: LD_EXP 99
38398: PUSH
38399: FOR_TO
38400: IFFALSE 38481
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38402: LD_ADDR_VAR 0 3
38406: PUSH
38407: LD_EXP 99
38411: PUSH
38412: LD_VAR 0 2
38416: ARRAY
38417: PPUSH
38418: LD_INT 21
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 24
38433: PUSH
38434: LD_INT 1000
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PPUSH
38449: CALL_OW 72
38453: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
38454: LD_ADDR_EXP 100
38458: PUSH
38459: LD_EXP 100
38463: PPUSH
38464: LD_VAR 0 2
38468: PPUSH
38469: LD_VAR 0 3
38473: PPUSH
38474: CALL_OW 1
38478: ST_TO_ADDR
// end ;
38479: GO 38399
38481: POP
38482: POP
// RaiseSailEvent ( 101 ) ;
38483: LD_INT 101
38485: PPUSH
38486: CALL_OW 427
// end ;
38490: LD_VAR 0 1
38494: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
38495: LD_INT 0
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
// if not mc_bases then
38504: LD_EXP 99
38508: NOT
38509: IFFALSE 38513
// exit ;
38511: GO 39086
// for i = 1 to mc_bases do
38513: LD_ADDR_VAR 0 2
38517: PUSH
38518: DOUBLE
38519: LD_INT 1
38521: DEC
38522: ST_TO_ADDR
38523: LD_EXP 99
38527: PUSH
38528: FOR_TO
38529: IFFALSE 39077
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_EXP 99
38540: PUSH
38541: LD_VAR 0 2
38545: ARRAY
38546: PUSH
38547: LD_EXP 128
38551: PUSH
38552: LD_VAR 0 2
38556: ARRAY
38557: UNION
38558: PPUSH
38559: LD_INT 21
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: LD_INT 54
38577: PUSH
38578: EMPTY
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 24
38590: PUSH
38591: LD_INT 750
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PPUSH
38611: CALL_OW 72
38615: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
38616: LD_ADDR_VAR 0 6
38620: PUSH
38621: LD_EXP 99
38625: PUSH
38626: LD_VAR 0 2
38630: ARRAY
38631: PPUSH
38632: LD_INT 21
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: LD_INT 54
38650: PUSH
38651: EMPTY
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: LD_INT 24
38663: PUSH
38664: LD_INT 250
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PPUSH
38684: CALL_OW 72
38688: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
38689: LD_ADDR_VAR 0 7
38693: PUSH
38694: LD_VAR 0 5
38698: PUSH
38699: LD_VAR 0 6
38703: DIFF
38704: ST_TO_ADDR
// if not need_heal_1 then
38705: LD_VAR 0 6
38709: NOT
38710: IFFALSE 38743
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
38712: LD_ADDR_EXP 102
38716: PUSH
38717: LD_EXP 102
38721: PPUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PPUSH
38734: EMPTY
38735: PPUSH
38736: CALL 66063 0 3
38740: ST_TO_ADDR
38741: GO 38813
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
38743: LD_ADDR_EXP 102
38747: PUSH
38748: LD_EXP 102
38752: PPUSH
38753: LD_VAR 0 2
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PPUSH
38765: LD_EXP 102
38769: PUSH
38770: LD_VAR 0 2
38774: ARRAY
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PPUSH
38780: LD_INT 3
38782: PUSH
38783: LD_INT 24
38785: PUSH
38786: LD_INT 1000
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PPUSH
38797: CALL_OW 72
38801: PUSH
38802: LD_VAR 0 6
38806: UNION
38807: PPUSH
38808: CALL 66063 0 3
38812: ST_TO_ADDR
// if not need_heal_2 then
38813: LD_VAR 0 7
38817: NOT
38818: IFFALSE 38851
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
38820: LD_ADDR_EXP 102
38824: PUSH
38825: LD_EXP 102
38829: PPUSH
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PPUSH
38842: EMPTY
38843: PPUSH
38844: CALL 66063 0 3
38848: ST_TO_ADDR
38849: GO 38883
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
38851: LD_ADDR_EXP 102
38855: PUSH
38856: LD_EXP 102
38860: PPUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: LD_VAR 0 7
38877: PPUSH
38878: CALL 66063 0 3
38882: ST_TO_ADDR
// if need_heal_2 then
38883: LD_VAR 0 7
38887: IFFALSE 39059
// for j in need_heal_2 do
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_VAR 0 7
38898: PUSH
38899: FOR_IN
38900: IFFALSE 39057
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
38902: LD_ADDR_VAR 0 5
38906: PUSH
38907: LD_EXP 99
38911: PUSH
38912: LD_VAR 0 2
38916: ARRAY
38917: PPUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 30
38923: PUSH
38924: LD_INT 6
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 30
38933: PUSH
38934: LD_INT 7
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: LD_INT 8
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 30
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 30
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 25
38973: PUSH
38974: LD_INT 4
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 72
38994: ST_TO_ADDR
// if tmp then
38995: LD_VAR 0 5
38999: IFFALSE 39055
// begin k := NearestUnitToUnit ( tmp , j ) ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: LD_VAR 0 5
39010: PPUSH
39011: LD_VAR 0 3
39015: PPUSH
39016: CALL_OW 74
39020: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
39021: LD_VAR 0 3
39025: PPUSH
39026: LD_VAR 0 4
39030: PPUSH
39031: CALL_OW 296
39035: PUSH
39036: LD_INT 7
39038: GREATER
39039: IFFALSE 39055
// ComMoveUnit ( j , k ) ;
39041: LD_VAR 0 3
39045: PPUSH
39046: LD_VAR 0 4
39050: PPUSH
39051: CALL_OW 112
// end ; end ;
39055: GO 38899
39057: POP
39058: POP
// if not need_heal_1 and not need_heal_2 then
39059: LD_VAR 0 6
39063: NOT
39064: PUSH
39065: LD_VAR 0 7
39069: NOT
39070: AND
39071: IFFALSE 39075
// continue ;
39073: GO 38528
// end ;
39075: GO 38528
39077: POP
39078: POP
// RaiseSailEvent ( 102 ) ;
39079: LD_INT 102
39081: PPUSH
39082: CALL_OW 427
// end ;
39086: LD_VAR 0 1
39090: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
39091: LD_INT 0
39093: PPUSH
39094: PPUSH
39095: PPUSH
39096: PPUSH
39097: PPUSH
// if not mc_bases then
39098: LD_EXP 99
39102: NOT
39103: IFFALSE 39107
// exit ;
39105: GO 39492
// for i = 1 to mc_bases do
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_EXP 99
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39490
// begin if not mc_building_need_repair [ i ] then
39125: LD_EXP 100
39129: PUSH
39130: LD_VAR 0 2
39134: ARRAY
39135: NOT
39136: IFFALSE 39174
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
39138: LD_ADDR_EXP 101
39142: PUSH
39143: LD_EXP 101
39147: PPUSH
39148: LD_VAR 0 2
39152: PPUSH
39153: EMPTY
39154: PPUSH
39155: CALL_OW 1
39159: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
39160: LD_VAR 0 2
39164: PPUSH
39165: LD_INT 101
39167: PPUSH
39168: CALL 34535 0 2
// continue ;
39172: GO 39122
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
39174: LD_ADDR_EXP 105
39178: PUSH
39179: LD_EXP 105
39183: PPUSH
39184: LD_VAR 0 2
39188: PPUSH
39189: EMPTY
39190: PPUSH
39191: CALL_OW 1
39195: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39196: LD_VAR 0 2
39200: PPUSH
39201: LD_INT 103
39203: PPUSH
39204: CALL 34535 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
39208: LD_ADDR_VAR 0 5
39212: PUSH
39213: LD_EXP 99
39217: PUSH
39218: LD_VAR 0 2
39222: ARRAY
39223: PUSH
39224: LD_EXP 128
39228: PUSH
39229: LD_VAR 0 2
39233: ARRAY
39234: UNION
39235: PPUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 25
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 25
39251: PUSH
39252: LD_INT 16
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: PPUSH
39267: CALL_OW 72
39271: ST_TO_ADDR
// if not tmp then
39272: LD_VAR 0 5
39276: NOT
39277: IFFALSE 39281
// continue ;
39279: GO 39122
// for j in tmp do
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 5
39290: PUSH
39291: FOR_IN
39292: IFFALSE 39486
// begin if mc_need_heal [ i ] then
39294: LD_EXP 102
39298: PUSH
39299: LD_VAR 0 2
39303: ARRAY
39304: IFFALSE 39352
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
39306: LD_VAR 0 3
39310: PUSH
39311: LD_EXP 102
39315: PUSH
39316: LD_VAR 0 2
39320: ARRAY
39321: PUSH
39322: LD_INT 1
39324: ARRAY
39325: IN
39326: PUSH
39327: LD_VAR 0 3
39331: PUSH
39332: LD_EXP 102
39336: PUSH
39337: LD_VAR 0 2
39341: ARRAY
39342: PUSH
39343: LD_INT 2
39345: ARRAY
39346: IN
39347: OR
39348: IFFALSE 39352
// continue ;
39350: GO 39291
// if IsInUnit ( j ) then
39352: LD_VAR 0 3
39356: PPUSH
39357: CALL_OW 310
39361: IFFALSE 39372
// ComExitBuilding ( j ) ;
39363: LD_VAR 0 3
39367: PPUSH
39368: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
39372: LD_VAR 0 3
39376: PUSH
39377: LD_EXP 101
39381: PUSH
39382: LD_VAR 0 2
39386: ARRAY
39387: IN
39388: NOT
39389: IFFALSE 39447
// begin SetTag ( j , 101 ) ;
39391: LD_VAR 0 3
39395: PPUSH
39396: LD_INT 101
39398: PPUSH
39399: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
39403: LD_ADDR_EXP 101
39407: PUSH
39408: LD_EXP 101
39412: PPUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_EXP 101
39422: PUSH
39423: LD_VAR 0 2
39427: ARRAY
39428: PUSH
39429: LD_INT 1
39431: PLUS
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PPUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: CALL 66063 0 3
39446: ST_TO_ADDR
// end ; wait ( 1 ) ;
39447: LD_INT 1
39449: PPUSH
39450: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
39454: LD_VAR 0 3
39458: PPUSH
39459: LD_EXP 100
39463: PUSH
39464: LD_VAR 0 2
39468: ARRAY
39469: PPUSH
39470: LD_VAR 0 3
39474: PPUSH
39475: CALL_OW 74
39479: PPUSH
39480: CALL_OW 130
// end ;
39484: GO 39291
39486: POP
39487: POP
// end ;
39488: GO 39122
39490: POP
39491: POP
// end ;
39492: LD_VAR 0 1
39496: RET
// export function MC_Heal ; var i , j , tmp ; begin
39497: LD_INT 0
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
// if not mc_bases then
39503: LD_EXP 99
39507: NOT
39508: IFFALSE 39512
// exit ;
39510: GO 39914
// for i = 1 to mc_bases do
39512: LD_ADDR_VAR 0 2
39516: PUSH
39517: DOUBLE
39518: LD_INT 1
39520: DEC
39521: ST_TO_ADDR
39522: LD_EXP 99
39526: PUSH
39527: FOR_TO
39528: IFFALSE 39912
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
39530: LD_EXP 102
39534: PUSH
39535: LD_VAR 0 2
39539: ARRAY
39540: PUSH
39541: LD_INT 1
39543: ARRAY
39544: NOT
39545: PUSH
39546: LD_EXP 102
39550: PUSH
39551: LD_VAR 0 2
39555: ARRAY
39556: PUSH
39557: LD_INT 2
39559: ARRAY
39560: NOT
39561: AND
39562: IFFALSE 39600
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
39564: LD_ADDR_EXP 103
39568: PUSH
39569: LD_EXP 103
39573: PPUSH
39574: LD_VAR 0 2
39578: PPUSH
39579: EMPTY
39580: PPUSH
39581: CALL_OW 1
39585: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_INT 102
39593: PPUSH
39594: CALL 34535 0 2
// continue ;
39598: GO 39527
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
39600: LD_ADDR_VAR 0 4
39604: PUSH
39605: LD_EXP 99
39609: PUSH
39610: LD_VAR 0 2
39614: ARRAY
39615: PPUSH
39616: LD_INT 25
39618: PUSH
39619: LD_INT 4
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PPUSH
39626: CALL_OW 72
39630: ST_TO_ADDR
// if not tmp then
39631: LD_VAR 0 4
39635: NOT
39636: IFFALSE 39640
// continue ;
39638: GO 39527
// if mc_taming [ i ] then
39640: LD_EXP 130
39644: PUSH
39645: LD_VAR 0 2
39649: ARRAY
39650: IFFALSE 39674
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39652: LD_ADDR_EXP 130
39656: PUSH
39657: LD_EXP 130
39661: PPUSH
39662: LD_VAR 0 2
39666: PPUSH
39667: EMPTY
39668: PPUSH
39669: CALL_OW 1
39673: ST_TO_ADDR
// for j in tmp do
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_VAR 0 4
39683: PUSH
39684: FOR_IN
39685: IFFALSE 39908
// begin if IsInUnit ( j ) then
39687: LD_VAR 0 3
39691: PPUSH
39692: CALL_OW 310
39696: IFFALSE 39707
// ComExitBuilding ( j ) ;
39698: LD_VAR 0 3
39702: PPUSH
39703: CALL_OW 122
// if not j in mc_healers [ i ] then
39707: LD_VAR 0 3
39711: PUSH
39712: LD_EXP 103
39716: PUSH
39717: LD_VAR 0 2
39721: ARRAY
39722: IN
39723: NOT
39724: IFFALSE 39770
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
39726: LD_ADDR_EXP 103
39730: PUSH
39731: LD_EXP 103
39735: PPUSH
39736: LD_VAR 0 2
39740: PUSH
39741: LD_EXP 103
39745: PUSH
39746: LD_VAR 0 2
39750: ARRAY
39751: PUSH
39752: LD_INT 1
39754: PLUS
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PPUSH
39760: LD_VAR 0 3
39764: PPUSH
39765: CALL 66063 0 3
39769: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
39770: LD_VAR 0 3
39774: PPUSH
39775: CALL_OW 110
39779: PUSH
39780: LD_INT 102
39782: NONEQUAL
39783: IFFALSE 39797
// SetTag ( j , 102 ) ;
39785: LD_VAR 0 3
39789: PPUSH
39790: LD_INT 102
39792: PPUSH
39793: CALL_OW 109
// Wait ( 3 ) ;
39797: LD_INT 3
39799: PPUSH
39800: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
39804: LD_EXP 102
39808: PUSH
39809: LD_VAR 0 2
39813: ARRAY
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: IFFALSE 39850
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
39820: LD_VAR 0 3
39824: PPUSH
39825: LD_EXP 102
39829: PUSH
39830: LD_VAR 0 2
39834: ARRAY
39835: PUSH
39836: LD_INT 1
39838: ARRAY
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: PPUSH
39844: CALL_OW 128
39848: GO 39906
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
39850: LD_VAR 0 3
39854: PPUSH
39855: CALL_OW 314
39859: NOT
39860: PUSH
39861: LD_EXP 102
39865: PUSH
39866: LD_VAR 0 2
39870: ARRAY
39871: PUSH
39872: LD_INT 2
39874: ARRAY
39875: AND
39876: IFFALSE 39906
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
39878: LD_VAR 0 3
39882: PPUSH
39883: LD_EXP 102
39887: PUSH
39888: LD_VAR 0 2
39892: ARRAY
39893: PUSH
39894: LD_INT 2
39896: ARRAY
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PPUSH
39902: CALL_OW 128
// end ;
39906: GO 39684
39908: POP
39909: POP
// end ;
39910: GO 39527
39912: POP
39913: POP
// end ;
39914: LD_VAR 0 1
39918: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
39919: LD_INT 0
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
// if not mc_bases then
39926: LD_EXP 99
39930: NOT
39931: IFFALSE 39935
// exit ;
39933: GO 41078
// for i = 1 to mc_bases do
39935: LD_ADDR_VAR 0 2
39939: PUSH
39940: DOUBLE
39941: LD_INT 1
39943: DEC
39944: ST_TO_ADDR
39945: LD_EXP 99
39949: PUSH
39950: FOR_TO
39951: IFFALSE 41076
// begin if mc_scan [ i ] then
39953: LD_EXP 122
39957: PUSH
39958: LD_VAR 0 2
39962: ARRAY
39963: IFFALSE 39967
// continue ;
39965: GO 39950
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
39967: LD_EXP 104
39971: PUSH
39972: LD_VAR 0 2
39976: ARRAY
39977: NOT
39978: PUSH
39979: LD_EXP 106
39983: PUSH
39984: LD_VAR 0 2
39988: ARRAY
39989: NOT
39990: AND
39991: PUSH
39992: LD_EXP 105
39996: PUSH
39997: LD_VAR 0 2
40001: ARRAY
40002: AND
40003: IFFALSE 40041
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
40005: LD_ADDR_EXP 105
40009: PUSH
40010: LD_EXP 105
40014: PPUSH
40015: LD_VAR 0 2
40019: PPUSH
40020: EMPTY
40021: PPUSH
40022: CALL_OW 1
40026: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
40027: LD_VAR 0 2
40031: PPUSH
40032: LD_INT 103
40034: PPUSH
40035: CALL 34535 0 2
// continue ;
40039: GO 39950
// end ; if mc_construct_list [ i ] then
40041: LD_EXP 106
40045: PUSH
40046: LD_VAR 0 2
40050: ARRAY
40051: IFFALSE 40271
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40053: LD_ADDR_VAR 0 4
40057: PUSH
40058: LD_EXP 99
40062: PUSH
40063: LD_VAR 0 2
40067: ARRAY
40068: PPUSH
40069: LD_INT 25
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PPUSH
40079: CALL_OW 72
40083: PUSH
40084: LD_EXP 101
40088: PUSH
40089: LD_VAR 0 2
40093: ARRAY
40094: DIFF
40095: ST_TO_ADDR
// if not tmp then
40096: LD_VAR 0 4
40100: NOT
40101: IFFALSE 40105
// continue ;
40103: GO 39950
// for j in tmp do
40105: LD_ADDR_VAR 0 3
40109: PUSH
40110: LD_VAR 0 4
40114: PUSH
40115: FOR_IN
40116: IFFALSE 40267
// begin if not mc_builders [ i ] then
40118: LD_EXP 105
40122: PUSH
40123: LD_VAR 0 2
40127: ARRAY
40128: NOT
40129: IFFALSE 40187
// begin SetTag ( j , 103 ) ;
40131: LD_VAR 0 3
40135: PPUSH
40136: LD_INT 103
40138: PPUSH
40139: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40143: LD_ADDR_EXP 105
40147: PUSH
40148: LD_EXP 105
40152: PPUSH
40153: LD_VAR 0 2
40157: PUSH
40158: LD_EXP 105
40162: PUSH
40163: LD_VAR 0 2
40167: ARRAY
40168: PUSH
40169: LD_INT 1
40171: PLUS
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PPUSH
40177: LD_VAR 0 3
40181: PPUSH
40182: CALL 66063 0 3
40186: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40187: LD_VAR 0 3
40191: PPUSH
40192: CALL_OW 310
40196: IFFALSE 40207
// ComExitBuilding ( j ) ;
40198: LD_VAR 0 3
40202: PPUSH
40203: CALL_OW 122
// wait ( 3 ) ;
40207: LD_INT 3
40209: PPUSH
40210: CALL_OW 67
// if not mc_construct_list [ i ] then
40214: LD_EXP 106
40218: PUSH
40219: LD_VAR 0 2
40223: ARRAY
40224: NOT
40225: IFFALSE 40229
// break ;
40227: GO 40267
// if not HasTask ( j ) then
40229: LD_VAR 0 3
40233: PPUSH
40234: CALL_OW 314
40238: NOT
40239: IFFALSE 40265
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
40241: LD_VAR 0 3
40245: PPUSH
40246: LD_EXP 106
40250: PUSH
40251: LD_VAR 0 2
40255: ARRAY
40256: PUSH
40257: LD_INT 1
40259: ARRAY
40260: PPUSH
40261: CALL 68914 0 2
// end ;
40265: GO 40115
40267: POP
40268: POP
// end else
40269: GO 41074
// if mc_build_list [ i ] then
40271: LD_EXP 104
40275: PUSH
40276: LD_VAR 0 2
40280: ARRAY
40281: IFFALSE 41074
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40283: LD_ADDR_VAR 0 5
40287: PUSH
40288: LD_EXP 99
40292: PUSH
40293: LD_VAR 0 2
40297: ARRAY
40298: PPUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 30
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 30
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: PPUSH
40327: CALL_OW 72
40331: ST_TO_ADDR
// if depot then
40332: LD_VAR 0 5
40336: IFFALSE 40354
// depot := depot [ 1 ] else
40338: LD_ADDR_VAR 0 5
40342: PUSH
40343: LD_VAR 0 5
40347: PUSH
40348: LD_INT 1
40350: ARRAY
40351: ST_TO_ADDR
40352: GO 40362
// depot := 0 ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_INT 0
40361: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
40362: LD_EXP 104
40366: PUSH
40367: LD_VAR 0 2
40371: ARRAY
40372: PUSH
40373: LD_INT 1
40375: ARRAY
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: PPUSH
40381: CALL 68744 0 1
40385: PUSH
40386: LD_EXP 99
40390: PUSH
40391: LD_VAR 0 2
40395: ARRAY
40396: PPUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 30
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 30
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: PPUSH
40425: CALL_OW 72
40429: NOT
40430: AND
40431: IFFALSE 40536
// begin for j = 1 to mc_build_list [ i ] do
40433: LD_ADDR_VAR 0 3
40437: PUSH
40438: DOUBLE
40439: LD_INT 1
40441: DEC
40442: ST_TO_ADDR
40443: LD_EXP 104
40447: PUSH
40448: LD_VAR 0 2
40452: ARRAY
40453: PUSH
40454: FOR_TO
40455: IFFALSE 40534
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
40457: LD_EXP 104
40461: PUSH
40462: LD_VAR 0 2
40466: ARRAY
40467: PUSH
40468: LD_VAR 0 3
40472: ARRAY
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PUSH
40478: LD_INT 2
40480: EQUAL
40481: IFFALSE 40532
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
40483: LD_ADDR_EXP 104
40487: PUSH
40488: LD_EXP 104
40492: PPUSH
40493: LD_VAR 0 2
40497: PPUSH
40498: LD_EXP 104
40502: PUSH
40503: LD_VAR 0 2
40507: ARRAY
40508: PPUSH
40509: LD_VAR 0 3
40513: PPUSH
40514: LD_INT 1
40516: PPUSH
40517: LD_INT 0
40519: PPUSH
40520: CALL 65481 0 4
40524: PPUSH
40525: CALL_OW 1
40529: ST_TO_ADDR
// break ;
40530: GO 40534
// end ;
40532: GO 40454
40534: POP
40535: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
40536: LD_EXP 104
40540: PUSH
40541: LD_VAR 0 2
40545: ARRAY
40546: PUSH
40547: LD_INT 1
40549: ARRAY
40550: PUSH
40551: LD_INT 1
40553: ARRAY
40554: PUSH
40555: LD_INT 0
40557: EQUAL
40558: PUSH
40559: LD_VAR 0 5
40563: PUSH
40564: LD_VAR 0 5
40568: PPUSH
40569: LD_EXP 104
40573: PUSH
40574: LD_VAR 0 2
40578: ARRAY
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: PUSH
40584: LD_INT 1
40586: ARRAY
40587: PPUSH
40588: LD_EXP 104
40592: PUSH
40593: LD_VAR 0 2
40597: ARRAY
40598: PUSH
40599: LD_INT 1
40601: ARRAY
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: PPUSH
40607: LD_EXP 104
40611: PUSH
40612: LD_VAR 0 2
40616: ARRAY
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: PUSH
40622: LD_INT 3
40624: ARRAY
40625: PPUSH
40626: LD_EXP 104
40630: PUSH
40631: LD_VAR 0 2
40635: ARRAY
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PUSH
40641: LD_INT 4
40643: ARRAY
40644: PPUSH
40645: CALL 73460 0 5
40649: AND
40650: OR
40651: IFFALSE 40932
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40653: LD_ADDR_VAR 0 4
40657: PUSH
40658: LD_EXP 99
40662: PUSH
40663: LD_VAR 0 2
40667: ARRAY
40668: PPUSH
40669: LD_INT 25
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PPUSH
40679: CALL_OW 72
40683: PUSH
40684: LD_EXP 101
40688: PUSH
40689: LD_VAR 0 2
40693: ARRAY
40694: DIFF
40695: ST_TO_ADDR
// if not tmp then
40696: LD_VAR 0 4
40700: NOT
40701: IFFALSE 40705
// continue ;
40703: GO 39950
// for j in tmp do
40705: LD_ADDR_VAR 0 3
40709: PUSH
40710: LD_VAR 0 4
40714: PUSH
40715: FOR_IN
40716: IFFALSE 40928
// begin if not mc_builders [ i ] then
40718: LD_EXP 105
40722: PUSH
40723: LD_VAR 0 2
40727: ARRAY
40728: NOT
40729: IFFALSE 40787
// begin SetTag ( j , 103 ) ;
40731: LD_VAR 0 3
40735: PPUSH
40736: LD_INT 103
40738: PPUSH
40739: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40743: LD_ADDR_EXP 105
40747: PUSH
40748: LD_EXP 105
40752: PPUSH
40753: LD_VAR 0 2
40757: PUSH
40758: LD_EXP 105
40762: PUSH
40763: LD_VAR 0 2
40767: ARRAY
40768: PUSH
40769: LD_INT 1
40771: PLUS
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PPUSH
40777: LD_VAR 0 3
40781: PPUSH
40782: CALL 66063 0 3
40786: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40787: LD_VAR 0 3
40791: PPUSH
40792: CALL_OW 310
40796: IFFALSE 40807
// ComExitBuilding ( j ) ;
40798: LD_VAR 0 3
40802: PPUSH
40803: CALL_OW 122
// wait ( 3 ) ;
40807: LD_INT 3
40809: PPUSH
40810: CALL_OW 67
// if not mc_build_list [ i ] then
40814: LD_EXP 104
40818: PUSH
40819: LD_VAR 0 2
40823: ARRAY
40824: NOT
40825: IFFALSE 40829
// break ;
40827: GO 40928
// if not HasTask ( j ) then
40829: LD_VAR 0 3
40833: PPUSH
40834: CALL_OW 314
40838: NOT
40839: IFFALSE 40926
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
40841: LD_VAR 0 3
40845: PPUSH
40846: LD_EXP 104
40850: PUSH
40851: LD_VAR 0 2
40855: ARRAY
40856: PUSH
40857: LD_INT 1
40859: ARRAY
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: PPUSH
40865: LD_EXP 104
40869: PUSH
40870: LD_VAR 0 2
40874: ARRAY
40875: PUSH
40876: LD_INT 1
40878: ARRAY
40879: PUSH
40880: LD_INT 2
40882: ARRAY
40883: PPUSH
40884: LD_EXP 104
40888: PUSH
40889: LD_VAR 0 2
40893: ARRAY
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PUSH
40899: LD_INT 3
40901: ARRAY
40902: PPUSH
40903: LD_EXP 104
40907: PUSH
40908: LD_VAR 0 2
40912: ARRAY
40913: PUSH
40914: LD_INT 1
40916: ARRAY
40917: PUSH
40918: LD_INT 4
40920: ARRAY
40921: PPUSH
40922: CALL_OW 145
// end ;
40926: GO 40715
40928: POP
40929: POP
// end else
40930: GO 41074
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
40932: LD_EXP 99
40936: PUSH
40937: LD_VAR 0 2
40941: ARRAY
40942: PPUSH
40943: LD_EXP 104
40947: PUSH
40948: LD_VAR 0 2
40952: ARRAY
40953: PUSH
40954: LD_INT 1
40956: ARRAY
40957: PUSH
40958: LD_INT 1
40960: ARRAY
40961: PPUSH
40962: LD_EXP 104
40966: PUSH
40967: LD_VAR 0 2
40971: ARRAY
40972: PUSH
40973: LD_INT 1
40975: ARRAY
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: PPUSH
40981: LD_EXP 104
40985: PUSH
40986: LD_VAR 0 2
40990: ARRAY
40991: PUSH
40992: LD_INT 1
40994: ARRAY
40995: PUSH
40996: LD_INT 3
40998: ARRAY
40999: PPUSH
41000: LD_EXP 104
41004: PUSH
41005: LD_VAR 0 2
41009: ARRAY
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PUSH
41015: LD_INT 4
41017: ARRAY
41018: PPUSH
41019: CALL 72814 0 5
41023: NOT
41024: IFFALSE 41074
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
41026: LD_ADDR_EXP 104
41030: PUSH
41031: LD_EXP 104
41035: PPUSH
41036: LD_VAR 0 2
41040: PPUSH
41041: LD_EXP 104
41045: PUSH
41046: LD_VAR 0 2
41050: ARRAY
41051: PPUSH
41052: LD_INT 1
41054: PPUSH
41055: LD_INT 1
41057: NEG
41058: PPUSH
41059: LD_INT 0
41061: PPUSH
41062: CALL 65481 0 4
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// continue ;
41072: GO 39950
// end ; end ; end ;
41074: GO 39950
41076: POP
41077: POP
// end ;
41078: LD_VAR 0 1
41082: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
41083: LD_INT 0
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
// if not mc_bases then
41091: LD_EXP 99
41095: NOT
41096: IFFALSE 41100
// exit ;
41098: GO 41527
// for i = 1 to mc_bases do
41100: LD_ADDR_VAR 0 2
41104: PUSH
41105: DOUBLE
41106: LD_INT 1
41108: DEC
41109: ST_TO_ADDR
41110: LD_EXP 99
41114: PUSH
41115: FOR_TO
41116: IFFALSE 41525
// begin tmp := mc_build_upgrade [ i ] ;
41118: LD_ADDR_VAR 0 4
41122: PUSH
41123: LD_EXP 131
41127: PUSH
41128: LD_VAR 0 2
41132: ARRAY
41133: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
41134: LD_ADDR_VAR 0 6
41138: PUSH
41139: LD_EXP 132
41143: PUSH
41144: LD_VAR 0 2
41148: ARRAY
41149: PPUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: LD_INT 6
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 30
41165: PUSH
41166: LD_INT 7
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: PPUSH
41178: CALL_OW 72
41182: ST_TO_ADDR
// if not tmp and not lab then
41183: LD_VAR 0 4
41187: NOT
41188: PUSH
41189: LD_VAR 0 6
41193: NOT
41194: AND
41195: IFFALSE 41199
// continue ;
41197: GO 41115
// if tmp then
41199: LD_VAR 0 4
41203: IFFALSE 41323
// for j in tmp do
41205: LD_ADDR_VAR 0 3
41209: PUSH
41210: LD_VAR 0 4
41214: PUSH
41215: FOR_IN
41216: IFFALSE 41321
// begin if UpgradeCost ( j ) then
41218: LD_VAR 0 3
41222: PPUSH
41223: CALL 72474 0 1
41227: IFFALSE 41319
// begin ComUpgrade ( j ) ;
41229: LD_VAR 0 3
41233: PPUSH
41234: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
41238: LD_ADDR_EXP 131
41242: PUSH
41243: LD_EXP 131
41247: PPUSH
41248: LD_VAR 0 2
41252: PPUSH
41253: LD_EXP 131
41257: PUSH
41258: LD_VAR 0 2
41262: ARRAY
41263: PUSH
41264: LD_VAR 0 3
41268: DIFF
41269: PPUSH
41270: CALL_OW 1
41274: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
41275: LD_ADDR_EXP 106
41279: PUSH
41280: LD_EXP 106
41284: PPUSH
41285: LD_VAR 0 2
41289: PUSH
41290: LD_EXP 106
41294: PUSH
41295: LD_VAR 0 2
41299: ARRAY
41300: PUSH
41301: LD_INT 1
41303: PLUS
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PPUSH
41309: LD_VAR 0 3
41313: PPUSH
41314: CALL 66063 0 3
41318: ST_TO_ADDR
// end ; end ;
41319: GO 41215
41321: POP
41322: POP
// if not lab or not mc_lab_upgrade [ i ] then
41323: LD_VAR 0 6
41327: NOT
41328: PUSH
41329: LD_EXP 133
41333: PUSH
41334: LD_VAR 0 2
41338: ARRAY
41339: NOT
41340: OR
41341: IFFALSE 41345
// continue ;
41343: GO 41115
// for j in lab do
41345: LD_ADDR_VAR 0 3
41349: PUSH
41350: LD_VAR 0 6
41354: PUSH
41355: FOR_IN
41356: IFFALSE 41521
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
41358: LD_VAR 0 3
41362: PPUSH
41363: CALL_OW 266
41367: PUSH
41368: LD_INT 6
41370: PUSH
41371: LD_INT 7
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: IN
41378: PUSH
41379: LD_VAR 0 3
41383: PPUSH
41384: CALL_OW 461
41388: PUSH
41389: LD_INT 1
41391: NONEQUAL
41392: AND
41393: IFFALSE 41519
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
41395: LD_VAR 0 3
41399: PPUSH
41400: LD_EXP 133
41404: PUSH
41405: LD_VAR 0 2
41409: ARRAY
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: CALL 72679 0 2
41419: IFFALSE 41519
// begin ComCancel ( j ) ;
41421: LD_VAR 0 3
41425: PPUSH
41426: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
41430: LD_VAR 0 3
41434: PPUSH
41435: LD_EXP 133
41439: PUSH
41440: LD_VAR 0 2
41444: ARRAY
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PPUSH
41450: CALL_OW 207
// if not j in mc_construct_list [ i ] then
41454: LD_VAR 0 3
41458: PUSH
41459: LD_EXP 106
41463: PUSH
41464: LD_VAR 0 2
41468: ARRAY
41469: IN
41470: NOT
41471: IFFALSE 41517
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
41473: LD_ADDR_EXP 106
41477: PUSH
41478: LD_EXP 106
41482: PPUSH
41483: LD_VAR 0 2
41487: PUSH
41488: LD_EXP 106
41492: PUSH
41493: LD_VAR 0 2
41497: ARRAY
41498: PUSH
41499: LD_INT 1
41501: PLUS
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PPUSH
41507: LD_VAR 0 3
41511: PPUSH
41512: CALL 66063 0 3
41516: ST_TO_ADDR
// break ;
41517: GO 41521
// end ; end ; end ;
41519: GO 41355
41521: POP
41522: POP
// end ;
41523: GO 41115
41525: POP
41526: POP
// end ;
41527: LD_VAR 0 1
41531: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
// if not mc_bases then
41543: LD_EXP 99
41547: NOT
41548: IFFALSE 41552
// exit ;
41550: GO 41957
// for i = 1 to mc_bases do
41552: LD_ADDR_VAR 0 2
41556: PUSH
41557: DOUBLE
41558: LD_INT 1
41560: DEC
41561: ST_TO_ADDR
41562: LD_EXP 99
41566: PUSH
41567: FOR_TO
41568: IFFALSE 41955
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
41570: LD_EXP 107
41574: PUSH
41575: LD_VAR 0 2
41579: ARRAY
41580: NOT
41581: PUSH
41582: LD_EXP 99
41586: PUSH
41587: LD_VAR 0 2
41591: ARRAY
41592: PPUSH
41593: LD_INT 30
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PPUSH
41603: CALL_OW 72
41607: NOT
41608: OR
41609: IFFALSE 41613
// continue ;
41611: GO 41567
// busy := false ;
41613: LD_ADDR_VAR 0 8
41617: PUSH
41618: LD_INT 0
41620: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
41621: LD_ADDR_VAR 0 4
41625: PUSH
41626: LD_EXP 99
41630: PUSH
41631: LD_VAR 0 2
41635: ARRAY
41636: PPUSH
41637: LD_INT 30
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PPUSH
41647: CALL_OW 72
41651: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
41652: LD_ADDR_VAR 0 6
41656: PUSH
41657: LD_EXP 107
41661: PUSH
41662: LD_VAR 0 2
41666: ARRAY
41667: PPUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 30
41673: PUSH
41674: LD_INT 32
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 30
41683: PUSH
41684: LD_INT 33
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: PPUSH
41696: CALL_OW 72
41700: ST_TO_ADDR
// if not t then
41701: LD_VAR 0 6
41705: NOT
41706: IFFALSE 41710
// continue ;
41708: GO 41567
// for j in tmp do
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_VAR 0 4
41719: PUSH
41720: FOR_IN
41721: IFFALSE 41751
// if not BuildingStatus ( j ) = bs_idle then
41723: LD_VAR 0 3
41727: PPUSH
41728: CALL_OW 461
41732: PUSH
41733: LD_INT 2
41735: EQUAL
41736: NOT
41737: IFFALSE 41749
// begin busy := true ;
41739: LD_ADDR_VAR 0 8
41743: PUSH
41744: LD_INT 1
41746: ST_TO_ADDR
// break ;
41747: GO 41751
// end ;
41749: GO 41720
41751: POP
41752: POP
// if busy then
41753: LD_VAR 0 8
41757: IFFALSE 41761
// continue ;
41759: GO 41567
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
41761: LD_ADDR_VAR 0 7
41765: PUSH
41766: LD_VAR 0 6
41770: PPUSH
41771: LD_INT 35
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PPUSH
41781: CALL_OW 72
41785: ST_TO_ADDR
// if tw then
41786: LD_VAR 0 7
41790: IFFALSE 41867
// begin tw := tw [ 1 ] ;
41792: LD_ADDR_VAR 0 7
41796: PUSH
41797: LD_VAR 0 7
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
41806: LD_ADDR_VAR 0 9
41810: PUSH
41811: LD_VAR 0 7
41815: PPUSH
41816: LD_EXP 124
41820: PUSH
41821: LD_VAR 0 2
41825: ARRAY
41826: PPUSH
41827: CALL 71033 0 2
41831: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
41832: LD_EXP 138
41836: PUSH
41837: LD_VAR 0 2
41841: ARRAY
41842: IFFALSE 41865
// if not weapon in mc_allowed_tower_weapons [ i ] then
41844: LD_VAR 0 9
41848: PUSH
41849: LD_EXP 138
41853: PUSH
41854: LD_VAR 0 2
41858: ARRAY
41859: IN
41860: NOT
41861: IFFALSE 41865
// continue ;
41863: GO 41567
// end else
41865: GO 41930
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
41867: LD_ADDR_VAR 0 5
41871: PUSH
41872: LD_EXP 107
41876: PUSH
41877: LD_VAR 0 2
41881: ARRAY
41882: PPUSH
41883: LD_VAR 0 4
41887: PPUSH
41888: CALL 101172 0 2
41892: ST_TO_ADDR
// if not tmp2 then
41893: LD_VAR 0 5
41897: NOT
41898: IFFALSE 41902
// continue ;
41900: GO 41567
// tw := tmp2 [ 1 ] ;
41902: LD_ADDR_VAR 0 7
41906: PUSH
41907: LD_VAR 0 5
41911: PUSH
41912: LD_INT 1
41914: ARRAY
41915: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
41916: LD_ADDR_VAR 0 9
41920: PUSH
41921: LD_VAR 0 5
41925: PUSH
41926: LD_INT 2
41928: ARRAY
41929: ST_TO_ADDR
// end ; if not weapon then
41930: LD_VAR 0 9
41934: NOT
41935: IFFALSE 41939
// continue ;
41937: GO 41567
// ComPlaceWeapon ( tw , weapon ) ;
41939: LD_VAR 0 7
41943: PPUSH
41944: LD_VAR 0 9
41948: PPUSH
41949: CALL_OW 148
// end ;
41953: GO 41567
41955: POP
41956: POP
// end ;
41957: LD_VAR 0 1
41961: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
41962: LD_INT 0
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
// if not mc_bases then
41970: LD_EXP 99
41974: NOT
41975: IFFALSE 41979
// exit ;
41977: GO 42991
// for i = 1 to mc_bases do
41979: LD_ADDR_VAR 0 2
41983: PUSH
41984: DOUBLE
41985: LD_INT 1
41987: DEC
41988: ST_TO_ADDR
41989: LD_EXP 99
41993: PUSH
41994: FOR_TO
41995: IFFALSE 42989
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
41997: LD_EXP 112
42001: PUSH
42002: LD_VAR 0 2
42006: ARRAY
42007: NOT
42008: PUSH
42009: LD_EXP 112
42013: PUSH
42014: LD_VAR 0 2
42018: ARRAY
42019: PUSH
42020: LD_EXP 113
42024: PUSH
42025: LD_VAR 0 2
42029: ARRAY
42030: EQUAL
42031: OR
42032: IFFALSE 42036
// continue ;
42034: GO 41994
// if mc_miners [ i ] then
42036: LD_EXP 113
42040: PUSH
42041: LD_VAR 0 2
42045: ARRAY
42046: IFFALSE 42676
// begin k := 1 ;
42048: LD_ADDR_VAR 0 4
42052: PUSH
42053: LD_INT 1
42055: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
42056: LD_ADDR_VAR 0 3
42060: PUSH
42061: DOUBLE
42062: LD_EXP 113
42066: PUSH
42067: LD_VAR 0 2
42071: ARRAY
42072: INC
42073: ST_TO_ADDR
42074: LD_INT 1
42076: PUSH
42077: FOR_DOWNTO
42078: IFFALSE 42674
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
42080: LD_EXP 113
42084: PUSH
42085: LD_VAR 0 2
42089: ARRAY
42090: PUSH
42091: LD_VAR 0 3
42095: ARRAY
42096: PPUSH
42097: CALL_OW 301
42101: PUSH
42102: LD_EXP 113
42106: PUSH
42107: LD_VAR 0 2
42111: ARRAY
42112: PUSH
42113: LD_VAR 0 3
42117: ARRAY
42118: PPUSH
42119: CALL_OW 257
42123: PUSH
42124: LD_INT 1
42126: NONEQUAL
42127: OR
42128: IFFALSE 42191
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
42130: LD_ADDR_VAR 0 5
42134: PUSH
42135: LD_EXP 113
42139: PUSH
42140: LD_VAR 0 2
42144: ARRAY
42145: PUSH
42146: LD_EXP 113
42150: PUSH
42151: LD_VAR 0 2
42155: ARRAY
42156: PUSH
42157: LD_VAR 0 3
42161: ARRAY
42162: DIFF
42163: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
42164: LD_ADDR_EXP 113
42168: PUSH
42169: LD_EXP 113
42173: PPUSH
42174: LD_VAR 0 2
42178: PPUSH
42179: LD_VAR 0 5
42183: PPUSH
42184: CALL_OW 1
42188: ST_TO_ADDR
// continue ;
42189: GO 42077
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
42191: LD_EXP 113
42195: PUSH
42196: LD_VAR 0 2
42200: ARRAY
42201: PUSH
42202: LD_VAR 0 3
42206: ARRAY
42207: PPUSH
42208: CALL 65999 0 1
42212: PUSH
42213: LD_EXP 113
42217: PUSH
42218: LD_VAR 0 2
42222: ARRAY
42223: PUSH
42224: LD_VAR 0 3
42228: ARRAY
42229: PPUSH
42230: CALL_OW 255
42234: PPUSH
42235: LD_EXP 112
42239: PUSH
42240: LD_VAR 0 2
42244: ARRAY
42245: PUSH
42246: LD_VAR 0 4
42250: ARRAY
42251: PUSH
42252: LD_INT 1
42254: ARRAY
42255: PPUSH
42256: LD_EXP 112
42260: PUSH
42261: LD_VAR 0 2
42265: ARRAY
42266: PUSH
42267: LD_VAR 0 4
42271: ARRAY
42272: PUSH
42273: LD_INT 2
42275: ARRAY
42276: PPUSH
42277: LD_INT 15
42279: PPUSH
42280: CALL 66959 0 4
42284: PUSH
42285: LD_INT 4
42287: ARRAY
42288: PUSH
42289: LD_EXP 113
42293: PUSH
42294: LD_VAR 0 2
42298: ARRAY
42299: PUSH
42300: LD_VAR 0 3
42304: ARRAY
42305: PPUSH
42306: LD_INT 10
42308: PPUSH
42309: CALL 68656 0 2
42313: PUSH
42314: LD_INT 4
42316: ARRAY
42317: OR
42318: AND
42319: IFFALSE 42342
// ComStop ( mc_miners [ i ] [ j ] ) ;
42321: LD_EXP 113
42325: PUSH
42326: LD_VAR 0 2
42330: ARRAY
42331: PUSH
42332: LD_VAR 0 3
42336: ARRAY
42337: PPUSH
42338: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
42342: LD_EXP 113
42346: PUSH
42347: LD_VAR 0 2
42351: ARRAY
42352: PUSH
42353: LD_VAR 0 3
42357: ARRAY
42358: PPUSH
42359: CALL_OW 257
42363: PUSH
42364: LD_INT 1
42366: EQUAL
42367: PUSH
42368: LD_EXP 113
42372: PUSH
42373: LD_VAR 0 2
42377: ARRAY
42378: PUSH
42379: LD_VAR 0 3
42383: ARRAY
42384: PPUSH
42385: CALL_OW 459
42389: NOT
42390: AND
42391: PUSH
42392: LD_EXP 113
42396: PUSH
42397: LD_VAR 0 2
42401: ARRAY
42402: PUSH
42403: LD_VAR 0 3
42407: ARRAY
42408: PPUSH
42409: CALL_OW 255
42413: PPUSH
42414: LD_EXP 112
42418: PUSH
42419: LD_VAR 0 2
42423: ARRAY
42424: PUSH
42425: LD_VAR 0 4
42429: ARRAY
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: PPUSH
42435: LD_EXP 112
42439: PUSH
42440: LD_VAR 0 2
42444: ARRAY
42445: PUSH
42446: LD_VAR 0 4
42450: ARRAY
42451: PUSH
42452: LD_INT 2
42454: ARRAY
42455: PPUSH
42456: LD_INT 15
42458: PPUSH
42459: CALL 66959 0 4
42463: PUSH
42464: LD_INT 4
42466: ARRAY
42467: PUSH
42468: LD_INT 0
42470: EQUAL
42471: AND
42472: PUSH
42473: LD_EXP 113
42477: PUSH
42478: LD_VAR 0 2
42482: ARRAY
42483: PUSH
42484: LD_VAR 0 3
42488: ARRAY
42489: PPUSH
42490: CALL_OW 314
42494: NOT
42495: AND
42496: IFFALSE 42672
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
42498: LD_EXP 113
42502: PUSH
42503: LD_VAR 0 2
42507: ARRAY
42508: PUSH
42509: LD_VAR 0 3
42513: ARRAY
42514: PPUSH
42515: CALL_OW 310
42519: IFFALSE 42542
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
42521: LD_EXP 113
42525: PUSH
42526: LD_VAR 0 2
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 3
42536: ARRAY
42537: PPUSH
42538: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
42542: LD_EXP 113
42546: PUSH
42547: LD_VAR 0 2
42551: ARRAY
42552: PUSH
42553: LD_VAR 0 3
42557: ARRAY
42558: PPUSH
42559: CALL_OW 314
42563: NOT
42564: IFFALSE 42632
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
42566: LD_EXP 113
42570: PUSH
42571: LD_VAR 0 2
42575: ARRAY
42576: PUSH
42577: LD_VAR 0 3
42581: ARRAY
42582: PPUSH
42583: LD_EXP 112
42587: PUSH
42588: LD_VAR 0 2
42592: ARRAY
42593: PUSH
42594: LD_VAR 0 4
42598: ARRAY
42599: PUSH
42600: LD_INT 1
42602: ARRAY
42603: PPUSH
42604: LD_EXP 112
42608: PUSH
42609: LD_VAR 0 2
42613: ARRAY
42614: PUSH
42615: LD_VAR 0 4
42619: ARRAY
42620: PUSH
42621: LD_INT 2
42623: ARRAY
42624: PPUSH
42625: LD_INT 0
42627: PPUSH
42628: CALL_OW 193
// k := k + 1 ;
42632: LD_ADDR_VAR 0 4
42636: PUSH
42637: LD_VAR 0 4
42641: PUSH
42642: LD_INT 1
42644: PLUS
42645: ST_TO_ADDR
// if k > mc_mines [ i ] then
42646: LD_VAR 0 4
42650: PUSH
42651: LD_EXP 112
42655: PUSH
42656: LD_VAR 0 2
42660: ARRAY
42661: GREATER
42662: IFFALSE 42672
// k := 1 ;
42664: LD_ADDR_VAR 0 4
42668: PUSH
42669: LD_INT 1
42671: ST_TO_ADDR
// end ; end ;
42672: GO 42077
42674: POP
42675: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
42676: LD_ADDR_VAR 0 5
42680: PUSH
42681: LD_EXP 99
42685: PUSH
42686: LD_VAR 0 2
42690: ARRAY
42691: PPUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 30
42697: PUSH
42698: LD_INT 4
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 30
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 30
42717: PUSH
42718: LD_INT 32
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: PPUSH
42731: CALL_OW 72
42735: ST_TO_ADDR
// if not tmp then
42736: LD_VAR 0 5
42740: NOT
42741: IFFALSE 42745
// continue ;
42743: GO 41994
// list := [ ] ;
42745: LD_ADDR_VAR 0 6
42749: PUSH
42750: EMPTY
42751: ST_TO_ADDR
// for j in tmp do
42752: LD_ADDR_VAR 0 3
42756: PUSH
42757: LD_VAR 0 5
42761: PUSH
42762: FOR_IN
42763: IFFALSE 42832
// begin for k in UnitsInside ( j ) do
42765: LD_ADDR_VAR 0 4
42769: PUSH
42770: LD_VAR 0 3
42774: PPUSH
42775: CALL_OW 313
42779: PUSH
42780: FOR_IN
42781: IFFALSE 42828
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
42783: LD_VAR 0 4
42787: PPUSH
42788: CALL_OW 257
42792: PUSH
42793: LD_INT 1
42795: EQUAL
42796: PUSH
42797: LD_VAR 0 4
42801: PPUSH
42802: CALL_OW 459
42806: NOT
42807: AND
42808: IFFALSE 42826
// list := list ^ k ;
42810: LD_ADDR_VAR 0 6
42814: PUSH
42815: LD_VAR 0 6
42819: PUSH
42820: LD_VAR 0 4
42824: ADD
42825: ST_TO_ADDR
42826: GO 42780
42828: POP
42829: POP
// end ;
42830: GO 42762
42832: POP
42833: POP
// list := list diff mc_miners [ i ] ;
42834: LD_ADDR_VAR 0 6
42838: PUSH
42839: LD_VAR 0 6
42843: PUSH
42844: LD_EXP 113
42848: PUSH
42849: LD_VAR 0 2
42853: ARRAY
42854: DIFF
42855: ST_TO_ADDR
// if not list then
42856: LD_VAR 0 6
42860: NOT
42861: IFFALSE 42865
// continue ;
42863: GO 41994
// k := mc_mines [ i ] - mc_miners [ i ] ;
42865: LD_ADDR_VAR 0 4
42869: PUSH
42870: LD_EXP 112
42874: PUSH
42875: LD_VAR 0 2
42879: ARRAY
42880: PUSH
42881: LD_EXP 113
42885: PUSH
42886: LD_VAR 0 2
42890: ARRAY
42891: MINUS
42892: ST_TO_ADDR
// if k > list then
42893: LD_VAR 0 4
42897: PUSH
42898: LD_VAR 0 6
42902: GREATER
42903: IFFALSE 42915
// k := list ;
42905: LD_ADDR_VAR 0 4
42909: PUSH
42910: LD_VAR 0 6
42914: ST_TO_ADDR
// for j = 1 to k do
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: DOUBLE
42921: LD_INT 1
42923: DEC
42924: ST_TO_ADDR
42925: LD_VAR 0 4
42929: PUSH
42930: FOR_TO
42931: IFFALSE 42985
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
42933: LD_ADDR_EXP 113
42937: PUSH
42938: LD_EXP 113
42942: PPUSH
42943: LD_VAR 0 2
42947: PUSH
42948: LD_EXP 113
42952: PUSH
42953: LD_VAR 0 2
42957: ARRAY
42958: PUSH
42959: LD_INT 1
42961: PLUS
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PPUSH
42967: LD_VAR 0 6
42971: PUSH
42972: LD_VAR 0 3
42976: ARRAY
42977: PPUSH
42978: CALL 66063 0 3
42982: ST_TO_ADDR
42983: GO 42930
42985: POP
42986: POP
// end ;
42987: GO 41994
42989: POP
42990: POP
// end ;
42991: LD_VAR 0 1
42995: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
// if not mc_bases then
43008: LD_EXP 99
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 44748
// for i = 1 to mc_bases do
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: DOUBLE
43023: LD_INT 1
43025: DEC
43026: ST_TO_ADDR
43027: LD_EXP 99
43031: PUSH
43032: FOR_TO
43033: IFFALSE 44746
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
43035: LD_EXP 99
43039: PUSH
43040: LD_VAR 0 2
43044: ARRAY
43045: NOT
43046: PUSH
43047: LD_EXP 106
43051: PUSH
43052: LD_VAR 0 2
43056: ARRAY
43057: OR
43058: IFFALSE 43062
// continue ;
43060: GO 43032
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
43062: LD_EXP 115
43066: PUSH
43067: LD_VAR 0 2
43071: ARRAY
43072: NOT
43073: PUSH
43074: LD_EXP 116
43078: PUSH
43079: LD_VAR 0 2
43083: ARRAY
43084: AND
43085: IFFALSE 43123
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43087: LD_ADDR_EXP 116
43091: PUSH
43092: LD_EXP 116
43096: PPUSH
43097: LD_VAR 0 2
43101: PPUSH
43102: EMPTY
43103: PPUSH
43104: CALL_OW 1
43108: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
43109: LD_VAR 0 2
43113: PPUSH
43114: LD_INT 107
43116: PPUSH
43117: CALL 34535 0 2
// continue ;
43121: GO 43032
// end ; target := [ ] ;
43123: LD_ADDR_VAR 0 6
43127: PUSH
43128: EMPTY
43129: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: DOUBLE
43136: LD_EXP 115
43140: PUSH
43141: LD_VAR 0 2
43145: ARRAY
43146: INC
43147: ST_TO_ADDR
43148: LD_INT 1
43150: PUSH
43151: FOR_DOWNTO
43152: IFFALSE 43412
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
43154: LD_EXP 115
43158: PUSH
43159: LD_VAR 0 2
43163: ARRAY
43164: PUSH
43165: LD_VAR 0 3
43169: ARRAY
43170: PUSH
43171: LD_INT 2
43173: ARRAY
43174: PPUSH
43175: LD_EXP 115
43179: PUSH
43180: LD_VAR 0 2
43184: ARRAY
43185: PUSH
43186: LD_VAR 0 3
43190: ARRAY
43191: PUSH
43192: LD_INT 3
43194: ARRAY
43195: PPUSH
43196: CALL_OW 488
43200: PUSH
43201: LD_EXP 115
43205: PUSH
43206: LD_VAR 0 2
43210: ARRAY
43211: PUSH
43212: LD_VAR 0 3
43216: ARRAY
43217: PUSH
43218: LD_INT 2
43220: ARRAY
43221: PPUSH
43222: LD_EXP 115
43226: PUSH
43227: LD_VAR 0 2
43231: ARRAY
43232: PUSH
43233: LD_VAR 0 3
43237: ARRAY
43238: PUSH
43239: LD_INT 3
43241: ARRAY
43242: PPUSH
43243: CALL_OW 284
43247: PUSH
43248: LD_INT 0
43250: EQUAL
43251: AND
43252: IFFALSE 43307
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
43254: LD_ADDR_VAR 0 5
43258: PUSH
43259: LD_EXP 115
43263: PUSH
43264: LD_VAR 0 2
43268: ARRAY
43269: PPUSH
43270: LD_VAR 0 3
43274: PPUSH
43275: CALL_OW 3
43279: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
43280: LD_ADDR_EXP 115
43284: PUSH
43285: LD_EXP 115
43289: PPUSH
43290: LD_VAR 0 2
43294: PPUSH
43295: LD_VAR 0 5
43299: PPUSH
43300: CALL_OW 1
43304: ST_TO_ADDR
// continue ;
43305: GO 43151
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
43307: LD_EXP 99
43311: PUSH
43312: LD_VAR 0 2
43316: ARRAY
43317: PUSH
43318: LD_INT 1
43320: ARRAY
43321: PPUSH
43322: CALL_OW 255
43326: PPUSH
43327: LD_EXP 115
43331: PUSH
43332: LD_VAR 0 2
43336: ARRAY
43337: PUSH
43338: LD_VAR 0 3
43342: ARRAY
43343: PUSH
43344: LD_INT 2
43346: ARRAY
43347: PPUSH
43348: LD_EXP 115
43352: PUSH
43353: LD_VAR 0 2
43357: ARRAY
43358: PUSH
43359: LD_VAR 0 3
43363: ARRAY
43364: PUSH
43365: LD_INT 3
43367: ARRAY
43368: PPUSH
43369: LD_INT 30
43371: PPUSH
43372: CALL 66959 0 4
43376: PUSH
43377: LD_INT 4
43379: ARRAY
43380: PUSH
43381: LD_INT 0
43383: EQUAL
43384: IFFALSE 43410
// begin target := mc_crates [ i ] [ j ] ;
43386: LD_ADDR_VAR 0 6
43390: PUSH
43391: LD_EXP 115
43395: PUSH
43396: LD_VAR 0 2
43400: ARRAY
43401: PUSH
43402: LD_VAR 0 3
43406: ARRAY
43407: ST_TO_ADDR
// break ;
43408: GO 43412
// end ; end ;
43410: GO 43151
43412: POP
43413: POP
// if not target then
43414: LD_VAR 0 6
43418: NOT
43419: IFFALSE 43423
// continue ;
43421: GO 43032
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
43423: LD_ADDR_VAR 0 7
43427: PUSH
43428: LD_EXP 118
43432: PUSH
43433: LD_VAR 0 2
43437: ARRAY
43438: PPUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 58
43447: PUSH
43448: EMPTY
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 61
43457: PUSH
43458: EMPTY
43459: LIST
43460: PUSH
43461: LD_INT 33
43463: PUSH
43464: LD_INT 5
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 33
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 34
43493: PUSH
43494: LD_INT 32
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 34
43503: PUSH
43504: LD_INT 51
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 34
43513: PUSH
43514: LD_INT 12
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PPUSH
43531: CALL_OW 72
43535: ST_TO_ADDR
// if not cargo then
43536: LD_VAR 0 7
43540: NOT
43541: IFFALSE 44184
// begin if mc_crates_collector [ i ] < 5 then
43543: LD_EXP 116
43547: PUSH
43548: LD_VAR 0 2
43552: ARRAY
43553: PUSH
43554: LD_INT 5
43556: LESS
43557: IFFALSE 43923
// begin if mc_ape [ i ] then
43559: LD_EXP 128
43563: PUSH
43564: LD_VAR 0 2
43568: ARRAY
43569: IFFALSE 43616
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
43571: LD_ADDR_VAR 0 5
43575: PUSH
43576: LD_EXP 128
43580: PUSH
43581: LD_VAR 0 2
43585: ARRAY
43586: PPUSH
43587: LD_INT 25
43589: PUSH
43590: LD_INT 16
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 24
43599: PUSH
43600: LD_INT 750
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PPUSH
43611: CALL_OW 72
43615: ST_TO_ADDR
// if not tmp then
43616: LD_VAR 0 5
43620: NOT
43621: IFFALSE 43668
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
43623: LD_ADDR_VAR 0 5
43627: PUSH
43628: LD_EXP 99
43632: PUSH
43633: LD_VAR 0 2
43637: ARRAY
43638: PPUSH
43639: LD_INT 25
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 24
43651: PUSH
43652: LD_INT 750
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PPUSH
43663: CALL_OW 72
43667: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
43668: LD_EXP 128
43672: PUSH
43673: LD_VAR 0 2
43677: ARRAY
43678: PUSH
43679: LD_EXP 99
43683: PUSH
43684: LD_VAR 0 2
43688: ARRAY
43689: PPUSH
43690: LD_INT 25
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 24
43702: PUSH
43703: LD_INT 750
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PPUSH
43714: CALL_OW 72
43718: AND
43719: PUSH
43720: LD_VAR 0 5
43724: PUSH
43725: LD_INT 5
43727: LESS
43728: AND
43729: IFFALSE 43811
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
43731: LD_ADDR_VAR 0 3
43735: PUSH
43736: LD_EXP 99
43740: PUSH
43741: LD_VAR 0 2
43745: ARRAY
43746: PPUSH
43747: LD_INT 25
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 24
43759: PUSH
43760: LD_INT 750
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PPUSH
43771: CALL_OW 72
43775: PUSH
43776: FOR_IN
43777: IFFALSE 43809
// begin tmp := tmp union j ;
43779: LD_ADDR_VAR 0 5
43783: PUSH
43784: LD_VAR 0 5
43788: PUSH
43789: LD_VAR 0 3
43793: UNION
43794: ST_TO_ADDR
// if tmp >= 5 then
43795: LD_VAR 0 5
43799: PUSH
43800: LD_INT 5
43802: GREATEREQUAL
43803: IFFALSE 43807
// break ;
43805: GO 43809
// end ;
43807: GO 43776
43809: POP
43810: POP
// end ; if not tmp then
43811: LD_VAR 0 5
43815: NOT
43816: IFFALSE 43820
// continue ;
43818: GO 43032
// for j in tmp do
43820: LD_ADDR_VAR 0 3
43824: PUSH
43825: LD_VAR 0 5
43829: PUSH
43830: FOR_IN
43831: IFFALSE 43921
// if not GetTag ( j ) then
43833: LD_VAR 0 3
43837: PPUSH
43838: CALL_OW 110
43842: NOT
43843: IFFALSE 43919
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
43845: LD_ADDR_EXP 116
43849: PUSH
43850: LD_EXP 116
43854: PPUSH
43855: LD_VAR 0 2
43859: PUSH
43860: LD_EXP 116
43864: PUSH
43865: LD_VAR 0 2
43869: ARRAY
43870: PUSH
43871: LD_INT 1
43873: PLUS
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PPUSH
43879: LD_VAR 0 3
43883: PPUSH
43884: CALL 66063 0 3
43888: ST_TO_ADDR
// SetTag ( j , 107 ) ;
43889: LD_VAR 0 3
43893: PPUSH
43894: LD_INT 107
43896: PPUSH
43897: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
43901: LD_EXP 116
43905: PUSH
43906: LD_VAR 0 2
43910: ARRAY
43911: PUSH
43912: LD_INT 5
43914: GREATEREQUAL
43915: IFFALSE 43919
// break ;
43917: GO 43921
// end ;
43919: GO 43830
43921: POP
43922: POP
// end ; if mc_crates_collector [ i ] and target then
43923: LD_EXP 116
43927: PUSH
43928: LD_VAR 0 2
43932: ARRAY
43933: PUSH
43934: LD_VAR 0 6
43938: AND
43939: IFFALSE 44182
// begin if mc_crates_collector [ i ] < target [ 1 ] then
43941: LD_EXP 116
43945: PUSH
43946: LD_VAR 0 2
43950: ARRAY
43951: PUSH
43952: LD_VAR 0 6
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: LESS
43961: IFFALSE 43981
// tmp := mc_crates_collector [ i ] else
43963: LD_ADDR_VAR 0 5
43967: PUSH
43968: LD_EXP 116
43972: PUSH
43973: LD_VAR 0 2
43977: ARRAY
43978: ST_TO_ADDR
43979: GO 43995
// tmp := target [ 1 ] ;
43981: LD_ADDR_VAR 0 5
43985: PUSH
43986: LD_VAR 0 6
43990: PUSH
43991: LD_INT 1
43993: ARRAY
43994: ST_TO_ADDR
// k := 0 ;
43995: LD_ADDR_VAR 0 4
43999: PUSH
44000: LD_INT 0
44002: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_EXP 116
44012: PUSH
44013: LD_VAR 0 2
44017: ARRAY
44018: PUSH
44019: FOR_IN
44020: IFFALSE 44180
// begin k := k + 1 ;
44022: LD_ADDR_VAR 0 4
44026: PUSH
44027: LD_VAR 0 4
44031: PUSH
44032: LD_INT 1
44034: PLUS
44035: ST_TO_ADDR
// if k > tmp then
44036: LD_VAR 0 4
44040: PUSH
44041: LD_VAR 0 5
44045: GREATER
44046: IFFALSE 44050
// break ;
44048: GO 44180
// if not GetClass ( j ) in [ 2 , 16 ] then
44050: LD_VAR 0 3
44054: PPUSH
44055: CALL_OW 257
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 16
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: IN
44070: NOT
44071: IFFALSE 44124
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
44073: LD_ADDR_EXP 116
44077: PUSH
44078: LD_EXP 116
44082: PPUSH
44083: LD_VAR 0 2
44087: PPUSH
44088: LD_EXP 116
44092: PUSH
44093: LD_VAR 0 2
44097: ARRAY
44098: PUSH
44099: LD_VAR 0 3
44103: DIFF
44104: PPUSH
44105: CALL_OW 1
44109: ST_TO_ADDR
// SetTag ( j , 0 ) ;
44110: LD_VAR 0 3
44114: PPUSH
44115: LD_INT 0
44117: PPUSH
44118: CALL_OW 109
// continue ;
44122: GO 44019
// end ; if IsInUnit ( j ) then
44124: LD_VAR 0 3
44128: PPUSH
44129: CALL_OW 310
44133: IFFALSE 44144
// ComExitBuilding ( j ) ;
44135: LD_VAR 0 3
44139: PPUSH
44140: CALL_OW 122
// wait ( 3 ) ;
44144: LD_INT 3
44146: PPUSH
44147: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
44151: LD_VAR 0 3
44155: PPUSH
44156: LD_VAR 0 6
44160: PUSH
44161: LD_INT 2
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 6
44169: PUSH
44170: LD_INT 3
44172: ARRAY
44173: PPUSH
44174: CALL_OW 117
// end ;
44178: GO 44019
44180: POP
44181: POP
// end ; end else
44182: GO 44744
// begin for j in cargo do
44184: LD_ADDR_VAR 0 3
44188: PUSH
44189: LD_VAR 0 7
44193: PUSH
44194: FOR_IN
44195: IFFALSE 44742
// begin if GetTag ( j ) <> 0 then
44197: LD_VAR 0 3
44201: PPUSH
44202: CALL_OW 110
44206: PUSH
44207: LD_INT 0
44209: NONEQUAL
44210: IFFALSE 44214
// continue ;
44212: GO 44194
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
44214: LD_VAR 0 3
44218: PPUSH
44219: CALL_OW 256
44223: PUSH
44224: LD_INT 1000
44226: LESS
44227: PUSH
44228: LD_VAR 0 3
44232: PPUSH
44233: LD_EXP 123
44237: PUSH
44238: LD_VAR 0 2
44242: ARRAY
44243: PPUSH
44244: CALL_OW 308
44248: NOT
44249: AND
44250: IFFALSE 44272
// ComMoveToArea ( j , mc_parking [ i ] ) ;
44252: LD_VAR 0 3
44256: PPUSH
44257: LD_EXP 123
44261: PUSH
44262: LD_VAR 0 2
44266: ARRAY
44267: PPUSH
44268: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
44272: LD_VAR 0 3
44276: PPUSH
44277: CALL_OW 256
44281: PUSH
44282: LD_INT 1000
44284: LESS
44285: PUSH
44286: LD_VAR 0 3
44290: PPUSH
44291: LD_EXP 123
44295: PUSH
44296: LD_VAR 0 2
44300: ARRAY
44301: PPUSH
44302: CALL_OW 308
44306: AND
44307: IFFALSE 44311
// continue ;
44309: GO 44194
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
44311: LD_VAR 0 3
44315: PPUSH
44316: CALL_OW 262
44320: PUSH
44321: LD_INT 2
44323: EQUAL
44324: PUSH
44325: LD_VAR 0 3
44329: PPUSH
44330: CALL_OW 261
44334: PUSH
44335: LD_INT 15
44337: LESS
44338: AND
44339: IFFALSE 44343
// continue ;
44341: GO 44194
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
44343: LD_VAR 0 3
44347: PPUSH
44348: CALL_OW 262
44352: PUSH
44353: LD_INT 1
44355: EQUAL
44356: PUSH
44357: LD_VAR 0 3
44361: PPUSH
44362: CALL_OW 261
44366: PUSH
44367: LD_INT 10
44369: LESS
44370: AND
44371: IFFALSE 44681
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44373: LD_ADDR_VAR 0 8
44377: PUSH
44378: LD_EXP 99
44382: PUSH
44383: LD_VAR 0 2
44387: ARRAY
44388: PPUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 30
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 30
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: PPUSH
44417: CALL_OW 72
44421: ST_TO_ADDR
// if not depot then
44422: LD_VAR 0 8
44426: NOT
44427: IFFALSE 44431
// continue ;
44429: GO 44194
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
44431: LD_VAR 0 3
44435: PPUSH
44436: LD_VAR 0 8
44440: PPUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: CALL_OW 74
44450: PPUSH
44451: CALL_OW 296
44455: PUSH
44456: LD_INT 6
44458: LESS
44459: IFFALSE 44475
// SetFuel ( j , 100 ) else
44461: LD_VAR 0 3
44465: PPUSH
44466: LD_INT 100
44468: PPUSH
44469: CALL_OW 240
44473: GO 44681
// if GetFuel ( j ) = 0 then
44475: LD_VAR 0 3
44479: PPUSH
44480: CALL_OW 261
44484: PUSH
44485: LD_INT 0
44487: EQUAL
44488: IFFALSE 44681
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
44490: LD_ADDR_EXP 118
44494: PUSH
44495: LD_EXP 118
44499: PPUSH
44500: LD_VAR 0 2
44504: PPUSH
44505: LD_EXP 118
44509: PUSH
44510: LD_VAR 0 2
44514: ARRAY
44515: PUSH
44516: LD_VAR 0 3
44520: DIFF
44521: PPUSH
44522: CALL_OW 1
44526: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
44527: LD_VAR 0 3
44531: PPUSH
44532: CALL_OW 263
44536: PUSH
44537: LD_INT 1
44539: EQUAL
44540: IFFALSE 44556
// ComExitVehicle ( IsInUnit ( j ) ) ;
44542: LD_VAR 0 3
44546: PPUSH
44547: CALL_OW 310
44551: PPUSH
44552: CALL_OW 121
// if GetControl ( j ) = control_remote then
44556: LD_VAR 0 3
44560: PPUSH
44561: CALL_OW 263
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: IFFALSE 44580
// ComUnlink ( j ) ;
44571: LD_VAR 0 3
44575: PPUSH
44576: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
44580: LD_ADDR_VAR 0 9
44584: PUSH
44585: LD_VAR 0 2
44589: PPUSH
44590: LD_INT 3
44592: PPUSH
44593: CALL 53843 0 2
44597: ST_TO_ADDR
// if fac then
44598: LD_VAR 0 9
44602: IFFALSE 44679
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
44604: LD_ADDR_VAR 0 10
44608: PUSH
44609: LD_VAR 0 9
44613: PPUSH
44614: LD_VAR 0 3
44618: PPUSH
44619: CALL_OW 265
44623: PPUSH
44624: LD_VAR 0 3
44628: PPUSH
44629: CALL_OW 262
44633: PPUSH
44634: LD_VAR 0 3
44638: PPUSH
44639: CALL_OW 263
44643: PPUSH
44644: LD_VAR 0 3
44648: PPUSH
44649: CALL_OW 264
44653: PPUSH
44654: CALL 63663 0 5
44658: ST_TO_ADDR
// if components then
44659: LD_VAR 0 10
44663: IFFALSE 44679
// MC_InsertProduceList ( i , components ) ;
44665: LD_VAR 0 2
44669: PPUSH
44670: LD_VAR 0 10
44674: PPUSH
44675: CALL 53413 0 2
// end ; continue ;
44679: GO 44194
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
44681: LD_VAR 0 3
44685: PPUSH
44686: LD_INT 1
44688: PPUSH
44689: CALL_OW 289
44693: PUSH
44694: LD_INT 100
44696: LESS
44697: PUSH
44698: LD_VAR 0 3
44702: PPUSH
44703: CALL_OW 314
44707: NOT
44708: AND
44709: IFFALSE 44738
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
44711: LD_VAR 0 3
44715: PPUSH
44716: LD_VAR 0 6
44720: PUSH
44721: LD_INT 2
44723: ARRAY
44724: PPUSH
44725: LD_VAR 0 6
44729: PUSH
44730: LD_INT 3
44732: ARRAY
44733: PPUSH
44734: CALL_OW 117
// break ;
44738: GO 44742
// end ;
44740: GO 44194
44742: POP
44743: POP
// end ; end ;
44744: GO 43032
44746: POP
44747: POP
// end ;
44748: LD_VAR 0 1
44752: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
44753: LD_INT 0
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
// if not mc_bases then
44759: LD_EXP 99
44763: NOT
44764: IFFALSE 44768
// exit ;
44766: GO 44929
// for i = 1 to mc_bases do
44768: LD_ADDR_VAR 0 2
44772: PUSH
44773: DOUBLE
44774: LD_INT 1
44776: DEC
44777: ST_TO_ADDR
44778: LD_EXP 99
44782: PUSH
44783: FOR_TO
44784: IFFALSE 44927
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
44786: LD_ADDR_VAR 0 4
44790: PUSH
44791: LD_EXP 118
44795: PUSH
44796: LD_VAR 0 2
44800: ARRAY
44801: PUSH
44802: LD_EXP 121
44806: PUSH
44807: LD_VAR 0 2
44811: ARRAY
44812: UNION
44813: PPUSH
44814: LD_INT 33
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PPUSH
44824: CALL_OW 72
44828: ST_TO_ADDR
// if tmp then
44829: LD_VAR 0 4
44833: IFFALSE 44925
// for j in tmp do
44835: LD_ADDR_VAR 0 3
44839: PUSH
44840: LD_VAR 0 4
44844: PUSH
44845: FOR_IN
44846: IFFALSE 44923
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
44848: LD_VAR 0 3
44852: PPUSH
44853: CALL_OW 312
44857: NOT
44858: PUSH
44859: LD_VAR 0 3
44863: PPUSH
44864: CALL_OW 256
44868: PUSH
44869: LD_INT 250
44871: GREATEREQUAL
44872: AND
44873: IFFALSE 44886
// Connect ( j ) else
44875: LD_VAR 0 3
44879: PPUSH
44880: CALL 68996 0 1
44884: GO 44921
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
44886: LD_VAR 0 3
44890: PPUSH
44891: CALL_OW 256
44895: PUSH
44896: LD_INT 250
44898: LESS
44899: PUSH
44900: LD_VAR 0 3
44904: PPUSH
44905: CALL_OW 312
44909: AND
44910: IFFALSE 44921
// ComUnlink ( j ) ;
44912: LD_VAR 0 3
44916: PPUSH
44917: CALL_OW 136
44921: GO 44845
44923: POP
44924: POP
// end ;
44925: GO 44783
44927: POP
44928: POP
// end ;
44929: LD_VAR 0 1
44933: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
44934: LD_INT 0
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
// if not mc_bases then
44941: LD_EXP 99
44945: NOT
44946: IFFALSE 44950
// exit ;
44948: GO 45410
// for i = 1 to mc_bases do
44950: LD_ADDR_VAR 0 2
44954: PUSH
44955: DOUBLE
44956: LD_INT 1
44958: DEC
44959: ST_TO_ADDR
44960: LD_EXP 99
44964: PUSH
44965: FOR_TO
44966: IFFALSE 45408
// begin if not mc_produce [ i ] then
44968: LD_EXP 120
44972: PUSH
44973: LD_VAR 0 2
44977: ARRAY
44978: NOT
44979: IFFALSE 44983
// continue ;
44981: GO 44965
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
44983: LD_ADDR_VAR 0 5
44987: PUSH
44988: LD_EXP 99
44992: PUSH
44993: LD_VAR 0 2
44997: ARRAY
44998: PPUSH
44999: LD_INT 30
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PPUSH
45009: CALL_OW 72
45013: ST_TO_ADDR
// if not fac then
45014: LD_VAR 0 5
45018: NOT
45019: IFFALSE 45023
// continue ;
45021: GO 44965
// for j in fac do
45023: LD_ADDR_VAR 0 3
45027: PUSH
45028: LD_VAR 0 5
45032: PUSH
45033: FOR_IN
45034: IFFALSE 45404
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
45036: LD_VAR 0 3
45040: PPUSH
45041: CALL_OW 461
45045: PUSH
45046: LD_INT 2
45048: NONEQUAL
45049: PUSH
45050: LD_VAR 0 3
45054: PPUSH
45055: LD_INT 15
45057: PPUSH
45058: CALL 68656 0 2
45062: PUSH
45063: LD_INT 4
45065: ARRAY
45066: OR
45067: PUSH
45068: LD_VAR 0 3
45072: PPUSH
45073: CALL_OW 313
45077: PUSH
45078: LD_INT 0
45080: EQUAL
45081: OR
45082: IFFALSE 45086
// continue ;
45084: GO 45033
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
45086: LD_VAR 0 3
45090: PPUSH
45091: LD_EXP 120
45095: PUSH
45096: LD_VAR 0 2
45100: ARRAY
45101: PUSH
45102: LD_INT 1
45104: ARRAY
45105: PUSH
45106: LD_INT 1
45108: ARRAY
45109: PPUSH
45110: LD_EXP 120
45114: PUSH
45115: LD_VAR 0 2
45119: ARRAY
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PUSH
45125: LD_INT 2
45127: ARRAY
45128: PPUSH
45129: LD_EXP 120
45133: PUSH
45134: LD_VAR 0 2
45138: ARRAY
45139: PUSH
45140: LD_INT 1
45142: ARRAY
45143: PUSH
45144: LD_INT 3
45146: ARRAY
45147: PPUSH
45148: LD_EXP 120
45152: PUSH
45153: LD_VAR 0 2
45157: ARRAY
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: PUSH
45163: LD_INT 4
45165: ARRAY
45166: PPUSH
45167: CALL_OW 448
45171: PUSH
45172: LD_VAR 0 3
45176: PPUSH
45177: LD_EXP 120
45181: PUSH
45182: LD_VAR 0 2
45186: ARRAY
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PUSH
45196: LD_EXP 120
45200: PUSH
45201: LD_VAR 0 2
45205: ARRAY
45206: PUSH
45207: LD_INT 1
45209: ARRAY
45210: PUSH
45211: LD_INT 2
45213: ARRAY
45214: PUSH
45215: LD_EXP 120
45219: PUSH
45220: LD_VAR 0 2
45224: ARRAY
45225: PUSH
45226: LD_INT 1
45228: ARRAY
45229: PUSH
45230: LD_INT 3
45232: ARRAY
45233: PUSH
45234: LD_EXP 120
45238: PUSH
45239: LD_VAR 0 2
45243: ARRAY
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: PUSH
45249: LD_INT 4
45251: ARRAY
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: PPUSH
45259: CALL 72327 0 2
45263: AND
45264: IFFALSE 45402
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
45266: LD_VAR 0 3
45270: PPUSH
45271: LD_EXP 120
45275: PUSH
45276: LD_VAR 0 2
45280: ARRAY
45281: PUSH
45282: LD_INT 1
45284: ARRAY
45285: PUSH
45286: LD_INT 1
45288: ARRAY
45289: PPUSH
45290: LD_EXP 120
45294: PUSH
45295: LD_VAR 0 2
45299: ARRAY
45300: PUSH
45301: LD_INT 1
45303: ARRAY
45304: PUSH
45305: LD_INT 2
45307: ARRAY
45308: PPUSH
45309: LD_EXP 120
45313: PUSH
45314: LD_VAR 0 2
45318: ARRAY
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: PUSH
45324: LD_INT 3
45326: ARRAY
45327: PPUSH
45328: LD_EXP 120
45332: PUSH
45333: LD_VAR 0 2
45337: ARRAY
45338: PUSH
45339: LD_INT 1
45341: ARRAY
45342: PUSH
45343: LD_INT 4
45345: ARRAY
45346: PPUSH
45347: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
45351: LD_ADDR_VAR 0 4
45355: PUSH
45356: LD_EXP 120
45360: PUSH
45361: LD_VAR 0 2
45365: ARRAY
45366: PPUSH
45367: LD_INT 1
45369: PPUSH
45370: CALL_OW 3
45374: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45375: LD_ADDR_EXP 120
45379: PUSH
45380: LD_EXP 120
45384: PPUSH
45385: LD_VAR 0 2
45389: PPUSH
45390: LD_VAR 0 4
45394: PPUSH
45395: CALL_OW 1
45399: ST_TO_ADDR
// break ;
45400: GO 45404
// end ; end ;
45402: GO 45033
45404: POP
45405: POP
// end ;
45406: GO 44965
45408: POP
45409: POP
// end ;
45410: LD_VAR 0 1
45414: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
45415: LD_INT 0
45417: PPUSH
45418: PPUSH
45419: PPUSH
// if not mc_bases then
45420: LD_EXP 99
45424: NOT
45425: IFFALSE 45429
// exit ;
45427: GO 45518
// for i = 1 to mc_bases do
45429: LD_ADDR_VAR 0 2
45433: PUSH
45434: DOUBLE
45435: LD_INT 1
45437: DEC
45438: ST_TO_ADDR
45439: LD_EXP 99
45443: PUSH
45444: FOR_TO
45445: IFFALSE 45516
// begin if mc_attack [ i ] then
45447: LD_EXP 119
45451: PUSH
45452: LD_VAR 0 2
45456: ARRAY
45457: IFFALSE 45514
// begin tmp := mc_attack [ i ] [ 1 ] ;
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_EXP 119
45468: PUSH
45469: LD_VAR 0 2
45473: ARRAY
45474: PUSH
45475: LD_INT 1
45477: ARRAY
45478: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45479: LD_ADDR_EXP 119
45483: PUSH
45484: LD_EXP 119
45488: PPUSH
45489: LD_VAR 0 2
45493: PPUSH
45494: EMPTY
45495: PPUSH
45496: CALL_OW 1
45500: ST_TO_ADDR
// Attack ( tmp ) ;
45501: LD_VAR 0 3
45505: PPUSH
45506: CALL 94516 0 1
// exit ;
45510: POP
45511: POP
45512: GO 45518
// end ; end ;
45514: GO 45444
45516: POP
45517: POP
// end ;
45518: LD_VAR 0 1
45522: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
45523: LD_INT 0
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
// if not mc_bases then
45532: LD_EXP 99
45536: NOT
45537: IFFALSE 45541
// exit ;
45539: GO 46145
// for i = 1 to mc_bases do
45541: LD_ADDR_VAR 0 2
45545: PUSH
45546: DOUBLE
45547: LD_INT 1
45549: DEC
45550: ST_TO_ADDR
45551: LD_EXP 99
45555: PUSH
45556: FOR_TO
45557: IFFALSE 46143
// begin if not mc_bases [ i ] then
45559: LD_EXP 99
45563: PUSH
45564: LD_VAR 0 2
45568: ARRAY
45569: NOT
45570: IFFALSE 45574
// continue ;
45572: GO 45556
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
45574: LD_ADDR_VAR 0 7
45578: PUSH
45579: LD_EXP 99
45583: PUSH
45584: LD_VAR 0 2
45588: ARRAY
45589: PUSH
45590: LD_INT 1
45592: ARRAY
45593: PPUSH
45594: CALL 62967 0 1
45598: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
45599: LD_ADDR_EXP 122
45603: PUSH
45604: LD_EXP 122
45608: PPUSH
45609: LD_VAR 0 2
45613: PPUSH
45614: LD_EXP 99
45618: PUSH
45619: LD_VAR 0 2
45623: ARRAY
45624: PUSH
45625: LD_INT 1
45627: ARRAY
45628: PPUSH
45629: CALL_OW 255
45633: PPUSH
45634: LD_EXP 124
45638: PUSH
45639: LD_VAR 0 2
45643: ARRAY
45644: PPUSH
45645: CALL 60927 0 2
45649: PPUSH
45650: CALL_OW 1
45654: ST_TO_ADDR
// if not mc_scan [ i ] then
45655: LD_EXP 122
45659: PUSH
45660: LD_VAR 0 2
45664: ARRAY
45665: NOT
45666: IFFALSE 45821
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45668: LD_ADDR_VAR 0 4
45672: PUSH
45673: LD_EXP 99
45677: PUSH
45678: LD_VAR 0 2
45682: ARRAY
45683: PPUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 25
45689: PUSH
45690: LD_INT 5
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 25
45699: PUSH
45700: LD_INT 8
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 25
45709: PUSH
45710: LD_INT 9
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: PPUSH
45723: CALL_OW 72
45727: ST_TO_ADDR
// if not tmp then
45728: LD_VAR 0 4
45732: NOT
45733: IFFALSE 45737
// continue ;
45735: GO 45556
// for j in tmp do
45737: LD_ADDR_VAR 0 3
45741: PUSH
45742: LD_VAR 0 4
45746: PUSH
45747: FOR_IN
45748: IFFALSE 45819
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
45750: LD_VAR 0 3
45754: PPUSH
45755: CALL_OW 310
45759: PPUSH
45760: CALL_OW 266
45764: PUSH
45765: LD_INT 5
45767: EQUAL
45768: PUSH
45769: LD_VAR 0 3
45773: PPUSH
45774: CALL_OW 257
45778: PUSH
45779: LD_INT 1
45781: EQUAL
45782: AND
45783: PUSH
45784: LD_VAR 0 3
45788: PPUSH
45789: CALL_OW 459
45793: NOT
45794: AND
45795: PUSH
45796: LD_VAR 0 7
45800: AND
45801: IFFALSE 45817
// ComChangeProfession ( j , class ) ;
45803: LD_VAR 0 3
45807: PPUSH
45808: LD_VAR 0 7
45812: PPUSH
45813: CALL_OW 123
45817: GO 45747
45819: POP
45820: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
45821: LD_EXP 122
45825: PUSH
45826: LD_VAR 0 2
45830: ARRAY
45831: PUSH
45832: LD_EXP 121
45836: PUSH
45837: LD_VAR 0 2
45841: ARRAY
45842: NOT
45843: AND
45844: PUSH
45845: LD_EXP 99
45849: PUSH
45850: LD_VAR 0 2
45854: ARRAY
45855: PPUSH
45856: LD_INT 30
45858: PUSH
45859: LD_INT 32
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PPUSH
45866: CALL_OW 72
45870: NOT
45871: AND
45872: PUSH
45873: LD_EXP 99
45877: PUSH
45878: LD_VAR 0 2
45882: ARRAY
45883: PPUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 30
45889: PUSH
45890: LD_INT 4
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 30
45899: PUSH
45900: LD_INT 5
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: PPUSH
45912: CALL_OW 72
45916: NOT
45917: AND
45918: IFFALSE 46050
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45920: LD_ADDR_VAR 0 4
45924: PUSH
45925: LD_EXP 99
45929: PUSH
45930: LD_VAR 0 2
45934: ARRAY
45935: PPUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 25
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 25
45951: PUSH
45952: LD_INT 5
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 25
45961: PUSH
45962: LD_INT 8
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 25
45971: PUSH
45972: LD_INT 9
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: PPUSH
45986: CALL_OW 72
45990: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
45991: LD_ADDR_VAR 0 4
45995: PUSH
45996: LD_VAR 0 4
46000: PUSH
46001: LD_VAR 0 4
46005: PPUSH
46006: LD_INT 18
46008: PPUSH
46009: CALL 99260 0 2
46013: DIFF
46014: ST_TO_ADDR
// if tmp then
46015: LD_VAR 0 4
46019: IFFALSE 46050
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
46021: LD_VAR 0 2
46025: PPUSH
46026: LD_VAR 0 4
46030: PPUSH
46031: LD_EXP 124
46035: PUSH
46036: LD_VAR 0 2
46040: ARRAY
46041: PPUSH
46042: CALL 60962 0 3
// exit ;
46046: POP
46047: POP
46048: GO 46145
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
46050: LD_EXP 122
46054: PUSH
46055: LD_VAR 0 2
46059: ARRAY
46060: PUSH
46061: LD_EXP 121
46065: PUSH
46066: LD_VAR 0 2
46070: ARRAY
46071: AND
46072: IFFALSE 46141
// begin tmp := mc_defender [ i ] ;
46074: LD_ADDR_VAR 0 4
46078: PUSH
46079: LD_EXP 121
46083: PUSH
46084: LD_VAR 0 2
46088: ARRAY
46089: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46090: LD_ADDR_EXP 121
46094: PUSH
46095: LD_EXP 121
46099: PPUSH
46100: LD_VAR 0 2
46104: PPUSH
46105: EMPTY
46106: PPUSH
46107: CALL_OW 1
46111: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
46112: LD_VAR 0 2
46116: PPUSH
46117: LD_VAR 0 4
46121: PPUSH
46122: LD_EXP 122
46126: PUSH
46127: LD_VAR 0 2
46131: ARRAY
46132: PPUSH
46133: CALL 61460 0 3
// exit ;
46137: POP
46138: POP
46139: GO 46145
// end ; end ;
46141: GO 45556
46143: POP
46144: POP
// end ;
46145: LD_VAR 0 1
46149: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
46150: LD_INT 0
46152: PPUSH
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
// if not mc_bases then
46163: LD_EXP 99
46167: NOT
46168: IFFALSE 46172
// exit ;
46170: GO 47259
// for i = 1 to mc_bases do
46172: LD_ADDR_VAR 0 2
46176: PUSH
46177: DOUBLE
46178: LD_INT 1
46180: DEC
46181: ST_TO_ADDR
46182: LD_EXP 99
46186: PUSH
46187: FOR_TO
46188: IFFALSE 47257
// begin tmp := mc_lab [ i ] ;
46190: LD_ADDR_VAR 0 6
46194: PUSH
46195: LD_EXP 132
46199: PUSH
46200: LD_VAR 0 2
46204: ARRAY
46205: ST_TO_ADDR
// if not tmp then
46206: LD_VAR 0 6
46210: NOT
46211: IFFALSE 46215
// continue ;
46213: GO 46187
// idle_lab := 0 ;
46215: LD_ADDR_VAR 0 11
46219: PUSH
46220: LD_INT 0
46222: ST_TO_ADDR
// for j in tmp do
46223: LD_ADDR_VAR 0 3
46227: PUSH
46228: LD_VAR 0 6
46232: PUSH
46233: FOR_IN
46234: IFFALSE 47253
// begin researching := false ;
46236: LD_ADDR_VAR 0 10
46240: PUSH
46241: LD_INT 0
46243: ST_TO_ADDR
// side := GetSide ( j ) ;
46244: LD_ADDR_VAR 0 4
46248: PUSH
46249: LD_VAR 0 3
46253: PPUSH
46254: CALL_OW 255
46258: ST_TO_ADDR
// if not mc_tech [ side ] then
46259: LD_EXP 126
46263: PUSH
46264: LD_VAR 0 4
46268: ARRAY
46269: NOT
46270: IFFALSE 46274
// continue ;
46272: GO 46233
// if BuildingStatus ( j ) = bs_idle then
46274: LD_VAR 0 3
46278: PPUSH
46279: CALL_OW 461
46283: PUSH
46284: LD_INT 2
46286: EQUAL
46287: IFFALSE 46475
// begin if idle_lab and UnitsInside ( j ) < 6 then
46289: LD_VAR 0 11
46293: PUSH
46294: LD_VAR 0 3
46298: PPUSH
46299: CALL_OW 313
46303: PUSH
46304: LD_INT 6
46306: LESS
46307: AND
46308: IFFALSE 46379
// begin tmp2 := UnitsInside ( idle_lab ) ;
46310: LD_ADDR_VAR 0 9
46314: PUSH
46315: LD_VAR 0 11
46319: PPUSH
46320: CALL_OW 313
46324: ST_TO_ADDR
// if tmp2 then
46325: LD_VAR 0 9
46329: IFFALSE 46371
// for x in tmp2 do
46331: LD_ADDR_VAR 0 7
46335: PUSH
46336: LD_VAR 0 9
46340: PUSH
46341: FOR_IN
46342: IFFALSE 46369
// begin ComExitBuilding ( x ) ;
46344: LD_VAR 0 7
46348: PPUSH
46349: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
46353: LD_VAR 0 7
46357: PPUSH
46358: LD_VAR 0 3
46362: PPUSH
46363: CALL_OW 180
// end ;
46367: GO 46341
46369: POP
46370: POP
// idle_lab := 0 ;
46371: LD_ADDR_VAR 0 11
46375: PUSH
46376: LD_INT 0
46378: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
46379: LD_ADDR_VAR 0 5
46383: PUSH
46384: LD_EXP 126
46388: PUSH
46389: LD_VAR 0 4
46393: ARRAY
46394: PUSH
46395: FOR_IN
46396: IFFALSE 46456
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
46398: LD_VAR 0 3
46402: PPUSH
46403: LD_VAR 0 5
46407: PPUSH
46408: CALL_OW 430
46412: PUSH
46413: LD_VAR 0 4
46417: PPUSH
46418: LD_VAR 0 5
46422: PPUSH
46423: CALL 60032 0 2
46427: AND
46428: IFFALSE 46454
// begin researching := true ;
46430: LD_ADDR_VAR 0 10
46434: PUSH
46435: LD_INT 1
46437: ST_TO_ADDR
// ComResearch ( j , t ) ;
46438: LD_VAR 0 3
46442: PPUSH
46443: LD_VAR 0 5
46447: PPUSH
46448: CALL_OW 124
// break ;
46452: GO 46456
// end ;
46454: GO 46395
46456: POP
46457: POP
// if not researching then
46458: LD_VAR 0 10
46462: NOT
46463: IFFALSE 46475
// idle_lab := j ;
46465: LD_ADDR_VAR 0 11
46469: PUSH
46470: LD_VAR 0 3
46474: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
46475: LD_VAR 0 3
46479: PPUSH
46480: CALL_OW 461
46484: PUSH
46485: LD_INT 10
46487: EQUAL
46488: IFFALSE 47076
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
46490: LD_EXP 128
46494: PUSH
46495: LD_VAR 0 2
46499: ARRAY
46500: NOT
46501: PUSH
46502: LD_EXP 129
46506: PUSH
46507: LD_VAR 0 2
46511: ARRAY
46512: NOT
46513: AND
46514: PUSH
46515: LD_EXP 126
46519: PUSH
46520: LD_VAR 0 4
46524: ARRAY
46525: PUSH
46526: LD_INT 1
46528: GREATER
46529: AND
46530: IFFALSE 46661
// begin ComCancel ( j ) ;
46532: LD_VAR 0 3
46536: PPUSH
46537: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
46541: LD_ADDR_EXP 126
46545: PUSH
46546: LD_EXP 126
46550: PPUSH
46551: LD_VAR 0 4
46555: PPUSH
46556: LD_EXP 126
46560: PUSH
46561: LD_VAR 0 4
46565: ARRAY
46566: PPUSH
46567: LD_EXP 126
46571: PUSH
46572: LD_VAR 0 4
46576: ARRAY
46577: PUSH
46578: LD_INT 1
46580: MINUS
46581: PPUSH
46582: LD_EXP 126
46586: PUSH
46587: LD_VAR 0 4
46591: ARRAY
46592: PPUSH
46593: LD_INT 0
46595: PPUSH
46596: CALL 65481 0 4
46600: PPUSH
46601: CALL_OW 1
46605: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
46606: LD_ADDR_EXP 126
46610: PUSH
46611: LD_EXP 126
46615: PPUSH
46616: LD_VAR 0 4
46620: PPUSH
46621: LD_EXP 126
46625: PUSH
46626: LD_VAR 0 4
46630: ARRAY
46631: PPUSH
46632: LD_EXP 126
46636: PUSH
46637: LD_VAR 0 4
46641: ARRAY
46642: PPUSH
46643: LD_INT 1
46645: PPUSH
46646: LD_INT 0
46648: PPUSH
46649: CALL 65481 0 4
46653: PPUSH
46654: CALL_OW 1
46658: ST_TO_ADDR
// continue ;
46659: GO 46233
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
46661: LD_EXP 128
46665: PUSH
46666: LD_VAR 0 2
46670: ARRAY
46671: PUSH
46672: LD_EXP 129
46676: PUSH
46677: LD_VAR 0 2
46681: ARRAY
46682: NOT
46683: AND
46684: IFFALSE 46811
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
46686: LD_ADDR_EXP 129
46690: PUSH
46691: LD_EXP 129
46695: PPUSH
46696: LD_VAR 0 2
46700: PUSH
46701: LD_EXP 129
46705: PUSH
46706: LD_VAR 0 2
46710: ARRAY
46711: PUSH
46712: LD_INT 1
46714: PLUS
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PPUSH
46720: LD_EXP 128
46724: PUSH
46725: LD_VAR 0 2
46729: ARRAY
46730: PUSH
46731: LD_INT 1
46733: ARRAY
46734: PPUSH
46735: CALL 66063 0 3
46739: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
46740: LD_EXP 128
46744: PUSH
46745: LD_VAR 0 2
46749: ARRAY
46750: PUSH
46751: LD_INT 1
46753: ARRAY
46754: PPUSH
46755: LD_INT 112
46757: PPUSH
46758: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
46762: LD_ADDR_VAR 0 9
46766: PUSH
46767: LD_EXP 128
46771: PUSH
46772: LD_VAR 0 2
46776: ARRAY
46777: PPUSH
46778: LD_INT 1
46780: PPUSH
46781: CALL_OW 3
46785: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
46786: LD_ADDR_EXP 128
46790: PUSH
46791: LD_EXP 128
46795: PPUSH
46796: LD_VAR 0 2
46800: PPUSH
46801: LD_VAR 0 9
46805: PPUSH
46806: CALL_OW 1
46810: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
46811: LD_EXP 128
46815: PUSH
46816: LD_VAR 0 2
46820: ARRAY
46821: PUSH
46822: LD_EXP 129
46826: PUSH
46827: LD_VAR 0 2
46831: ARRAY
46832: AND
46833: PUSH
46834: LD_EXP 129
46838: PUSH
46839: LD_VAR 0 2
46843: ARRAY
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PPUSH
46849: CALL_OW 310
46853: NOT
46854: AND
46855: PUSH
46856: LD_VAR 0 3
46860: PPUSH
46861: CALL_OW 313
46865: PUSH
46866: LD_INT 6
46868: EQUAL
46869: AND
46870: IFFALSE 46926
// begin tmp2 := UnitsInside ( j ) ;
46872: LD_ADDR_VAR 0 9
46876: PUSH
46877: LD_VAR 0 3
46881: PPUSH
46882: CALL_OW 313
46886: ST_TO_ADDR
// if tmp2 = 6 then
46887: LD_VAR 0 9
46891: PUSH
46892: LD_INT 6
46894: EQUAL
46895: IFFALSE 46926
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
46897: LD_VAR 0 9
46901: PUSH
46902: LD_INT 1
46904: ARRAY
46905: PPUSH
46906: LD_INT 112
46908: PPUSH
46909: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
46913: LD_VAR 0 9
46917: PUSH
46918: LD_INT 1
46920: ARRAY
46921: PPUSH
46922: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
46926: LD_EXP 129
46930: PUSH
46931: LD_VAR 0 2
46935: ARRAY
46936: PUSH
46937: LD_EXP 129
46941: PUSH
46942: LD_VAR 0 2
46946: ARRAY
46947: PUSH
46948: LD_INT 1
46950: ARRAY
46951: PPUSH
46952: CALL_OW 314
46956: NOT
46957: AND
46958: PUSH
46959: LD_EXP 129
46963: PUSH
46964: LD_VAR 0 2
46968: ARRAY
46969: PUSH
46970: LD_INT 1
46972: ARRAY
46973: PPUSH
46974: CALL_OW 310
46978: NOT
46979: AND
46980: IFFALSE 47006
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
46982: LD_EXP 129
46986: PUSH
46987: LD_VAR 0 2
46991: ARRAY
46992: PUSH
46993: LD_INT 1
46995: ARRAY
46996: PPUSH
46997: LD_VAR 0 3
47001: PPUSH
47002: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
47006: LD_EXP 129
47010: PUSH
47011: LD_VAR 0 2
47015: ARRAY
47016: PUSH
47017: LD_INT 1
47019: ARRAY
47020: PPUSH
47021: CALL_OW 310
47025: PUSH
47026: LD_EXP 129
47030: PUSH
47031: LD_VAR 0 2
47035: ARRAY
47036: PUSH
47037: LD_INT 1
47039: ARRAY
47040: PPUSH
47041: CALL_OW 310
47045: PPUSH
47046: CALL_OW 461
47050: PUSH
47051: LD_INT 3
47053: NONEQUAL
47054: AND
47055: IFFALSE 47076
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
47057: LD_EXP 129
47061: PUSH
47062: LD_VAR 0 2
47066: ARRAY
47067: PUSH
47068: LD_INT 1
47070: ARRAY
47071: PPUSH
47072: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
47076: LD_VAR 0 3
47080: PPUSH
47081: CALL_OW 461
47085: PUSH
47086: LD_INT 6
47088: EQUAL
47089: PUSH
47090: LD_VAR 0 6
47094: PUSH
47095: LD_INT 1
47097: GREATER
47098: AND
47099: IFFALSE 47251
// begin sci := [ ] ;
47101: LD_ADDR_VAR 0 8
47105: PUSH
47106: EMPTY
47107: ST_TO_ADDR
// for x in ( tmp diff j ) do
47108: LD_ADDR_VAR 0 7
47112: PUSH
47113: LD_VAR 0 6
47117: PUSH
47118: LD_VAR 0 3
47122: DIFF
47123: PUSH
47124: FOR_IN
47125: IFFALSE 47177
// begin if sci = 6 then
47127: LD_VAR 0 8
47131: PUSH
47132: LD_INT 6
47134: EQUAL
47135: IFFALSE 47139
// break ;
47137: GO 47177
// if BuildingStatus ( x ) = bs_idle then
47139: LD_VAR 0 7
47143: PPUSH
47144: CALL_OW 461
47148: PUSH
47149: LD_INT 2
47151: EQUAL
47152: IFFALSE 47175
// sci := sci ^ UnitsInside ( x ) ;
47154: LD_ADDR_VAR 0 8
47158: PUSH
47159: LD_VAR 0 8
47163: PUSH
47164: LD_VAR 0 7
47168: PPUSH
47169: CALL_OW 313
47173: ADD
47174: ST_TO_ADDR
// end ;
47175: GO 47124
47177: POP
47178: POP
// if not sci then
47179: LD_VAR 0 8
47183: NOT
47184: IFFALSE 47188
// continue ;
47186: GO 46233
// for x in sci do
47188: LD_ADDR_VAR 0 7
47192: PUSH
47193: LD_VAR 0 8
47197: PUSH
47198: FOR_IN
47199: IFFALSE 47249
// if IsInUnit ( x ) and not HasTask ( x ) then
47201: LD_VAR 0 7
47205: PPUSH
47206: CALL_OW 310
47210: PUSH
47211: LD_VAR 0 7
47215: PPUSH
47216: CALL_OW 314
47220: NOT
47221: AND
47222: IFFALSE 47247
// begin ComExitBuilding ( x ) ;
47224: LD_VAR 0 7
47228: PPUSH
47229: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
47233: LD_VAR 0 7
47237: PPUSH
47238: LD_VAR 0 3
47242: PPUSH
47243: CALL_OW 180
// end ;
47247: GO 47198
47249: POP
47250: POP
// end ; end ;
47251: GO 46233
47253: POP
47254: POP
// end ;
47255: GO 46187
47257: POP
47258: POP
// end ;
47259: LD_VAR 0 1
47263: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
47264: LD_INT 0
47266: PPUSH
47267: PPUSH
// if not mc_bases then
47268: LD_EXP 99
47272: NOT
47273: IFFALSE 47277
// exit ;
47275: GO 47358
// for i = 1 to mc_bases do
47277: LD_ADDR_VAR 0 2
47281: PUSH
47282: DOUBLE
47283: LD_INT 1
47285: DEC
47286: ST_TO_ADDR
47287: LD_EXP 99
47291: PUSH
47292: FOR_TO
47293: IFFALSE 47356
// if mc_mines [ i ] and mc_miners [ i ] then
47295: LD_EXP 112
47299: PUSH
47300: LD_VAR 0 2
47304: ARRAY
47305: PUSH
47306: LD_EXP 113
47310: PUSH
47311: LD_VAR 0 2
47315: ARRAY
47316: AND
47317: IFFALSE 47354
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47319: LD_EXP 113
47323: PUSH
47324: LD_VAR 0 2
47328: ARRAY
47329: PUSH
47330: LD_INT 1
47332: ARRAY
47333: PPUSH
47334: CALL_OW 255
47338: PPUSH
47339: LD_EXP 112
47343: PUSH
47344: LD_VAR 0 2
47348: ARRAY
47349: PPUSH
47350: CALL 63120 0 2
47354: GO 47292
47356: POP
47357: POP
// end ;
47358: LD_VAR 0 1
47362: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
47363: LD_INT 0
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
// if not mc_bases or not mc_parking then
47373: LD_EXP 99
47377: NOT
47378: PUSH
47379: LD_EXP 123
47383: NOT
47384: OR
47385: IFFALSE 47389
// exit ;
47387: GO 48101
// for i = 1 to mc_bases do
47389: LD_ADDR_VAR 0 2
47393: PUSH
47394: DOUBLE
47395: LD_INT 1
47397: DEC
47398: ST_TO_ADDR
47399: LD_EXP 99
47403: PUSH
47404: FOR_TO
47405: IFFALSE 48099
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
47407: LD_EXP 99
47411: PUSH
47412: LD_VAR 0 2
47416: ARRAY
47417: NOT
47418: PUSH
47419: LD_EXP 123
47423: PUSH
47424: LD_VAR 0 2
47428: ARRAY
47429: NOT
47430: OR
47431: IFFALSE 47435
// continue ;
47433: GO 47404
// if mc_scan [ i ] then
47435: LD_EXP 122
47439: PUSH
47440: LD_VAR 0 2
47444: ARRAY
47445: IFFALSE 47471
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
47447: LD_ADDR_EXP 111
47451: PUSH
47452: LD_EXP 111
47456: PPUSH
47457: LD_VAR 0 2
47461: PPUSH
47462: EMPTY
47463: PPUSH
47464: CALL_OW 1
47468: ST_TO_ADDR
// continue ;
47469: GO 47404
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
47471: LD_ADDR_VAR 0 5
47475: PUSH
47476: LD_EXP 99
47480: PUSH
47481: LD_VAR 0 2
47485: ARRAY
47486: PUSH
47487: LD_INT 1
47489: ARRAY
47490: PPUSH
47491: CALL_OW 255
47495: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47496: LD_ADDR_VAR 0 6
47500: PUSH
47501: LD_EXP 99
47505: PUSH
47506: LD_VAR 0 2
47510: ARRAY
47511: PPUSH
47512: LD_INT 30
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PPUSH
47522: CALL_OW 72
47526: ST_TO_ADDR
// if not fac then
47527: LD_VAR 0 6
47531: NOT
47532: IFFALSE 47583
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47534: LD_ADDR_VAR 0 6
47538: PUSH
47539: LD_EXP 99
47543: PUSH
47544: LD_VAR 0 2
47548: ARRAY
47549: PPUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 30
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 30
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: PPUSH
47578: CALL_OW 72
47582: ST_TO_ADDR
// if not fac then
47583: LD_VAR 0 6
47587: NOT
47588: IFFALSE 47592
// continue ;
47590: GO 47404
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47592: LD_ADDR_VAR 0 7
47596: PUSH
47597: LD_EXP 123
47601: PUSH
47602: LD_VAR 0 2
47606: ARRAY
47607: PPUSH
47608: LD_INT 22
47610: PUSH
47611: LD_VAR 0 5
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 21
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: LD_INT 24
47635: PUSH
47636: LD_INT 1000
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: LIST
47651: PPUSH
47652: CALL_OW 70
47656: PUSH
47657: LD_INT 22
47659: PUSH
47660: LD_VAR 0 5
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 91
47671: PUSH
47672: LD_VAR 0 6
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PUSH
47681: LD_INT 25
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 21
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 24
47704: PUSH
47705: LD_INT 1000
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: PPUSH
47722: CALL_OW 69
47726: UNION
47727: ST_TO_ADDR
// if not vehs then
47728: LD_VAR 0 7
47732: NOT
47733: IFFALSE 47759
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
47735: LD_ADDR_EXP 111
47739: PUSH
47740: LD_EXP 111
47744: PPUSH
47745: LD_VAR 0 2
47749: PPUSH
47750: EMPTY
47751: PPUSH
47752: CALL_OW 1
47756: ST_TO_ADDR
// continue ;
47757: GO 47404
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47759: LD_ADDR_VAR 0 8
47763: PUSH
47764: LD_EXP 99
47768: PUSH
47769: LD_VAR 0 2
47773: ARRAY
47774: PPUSH
47775: LD_INT 30
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PPUSH
47785: CALL_OW 72
47789: ST_TO_ADDR
// if tmp then
47790: LD_VAR 0 8
47794: IFFALSE 47897
// begin for j in tmp do
47796: LD_ADDR_VAR 0 3
47800: PUSH
47801: LD_VAR 0 8
47805: PUSH
47806: FOR_IN
47807: IFFALSE 47895
// for k in UnitsInside ( j ) do
47809: LD_ADDR_VAR 0 4
47813: PUSH
47814: LD_VAR 0 3
47818: PPUSH
47819: CALL_OW 313
47823: PUSH
47824: FOR_IN
47825: IFFALSE 47891
// if k then
47827: LD_VAR 0 4
47831: IFFALSE 47889
// if not k in mc_repair_vehicle [ i ] then
47833: LD_VAR 0 4
47837: PUSH
47838: LD_EXP 111
47842: PUSH
47843: LD_VAR 0 2
47847: ARRAY
47848: IN
47849: NOT
47850: IFFALSE 47889
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
47852: LD_ADDR_EXP 111
47856: PUSH
47857: LD_EXP 111
47861: PPUSH
47862: LD_VAR 0 2
47866: PPUSH
47867: LD_EXP 111
47871: PUSH
47872: LD_VAR 0 2
47876: ARRAY
47877: PUSH
47878: LD_VAR 0 4
47882: UNION
47883: PPUSH
47884: CALL_OW 1
47888: ST_TO_ADDR
47889: GO 47824
47891: POP
47892: POP
47893: GO 47806
47895: POP
47896: POP
// end ; if not mc_repair_vehicle [ i ] then
47897: LD_EXP 111
47901: PUSH
47902: LD_VAR 0 2
47906: ARRAY
47907: NOT
47908: IFFALSE 47912
// continue ;
47910: GO 47404
// for j in mc_repair_vehicle [ i ] do
47912: LD_ADDR_VAR 0 3
47916: PUSH
47917: LD_EXP 111
47921: PUSH
47922: LD_VAR 0 2
47926: ARRAY
47927: PUSH
47928: FOR_IN
47929: IFFALSE 48095
// begin if GetClass ( j ) <> 3 then
47931: LD_VAR 0 3
47935: PPUSH
47936: CALL_OW 257
47940: PUSH
47941: LD_INT 3
47943: NONEQUAL
47944: IFFALSE 47985
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
47946: LD_ADDR_EXP 111
47950: PUSH
47951: LD_EXP 111
47955: PPUSH
47956: LD_VAR 0 2
47960: PPUSH
47961: LD_EXP 111
47965: PUSH
47966: LD_VAR 0 2
47970: ARRAY
47971: PUSH
47972: LD_VAR 0 3
47976: DIFF
47977: PPUSH
47978: CALL_OW 1
47982: ST_TO_ADDR
// continue ;
47983: GO 47928
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
47985: LD_VAR 0 3
47989: PPUSH
47990: CALL_OW 311
47994: NOT
47995: PUSH
47996: LD_VAR 0 3
48000: PUSH
48001: LD_EXP 102
48005: PUSH
48006: LD_VAR 0 2
48010: ARRAY
48011: PUSH
48012: LD_INT 1
48014: ARRAY
48015: IN
48016: NOT
48017: AND
48018: PUSH
48019: LD_VAR 0 3
48023: PUSH
48024: LD_EXP 102
48028: PUSH
48029: LD_VAR 0 2
48033: ARRAY
48034: PUSH
48035: LD_INT 2
48037: ARRAY
48038: IN
48039: NOT
48040: AND
48041: IFFALSE 48093
// begin if IsInUnit ( j ) then
48043: LD_VAR 0 3
48047: PPUSH
48048: CALL_OW 310
48052: IFFALSE 48063
// ComExitBuilding ( j ) ;
48054: LD_VAR 0 3
48058: PPUSH
48059: CALL_OW 122
// if not HasTask ( j ) then
48063: LD_VAR 0 3
48067: PPUSH
48068: CALL_OW 314
48072: NOT
48073: IFFALSE 48093
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
48075: LD_VAR 0 3
48079: PPUSH
48080: LD_VAR 0 7
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PPUSH
48089: CALL_OW 189
// end ; end ;
48093: GO 47928
48095: POP
48096: POP
// end ;
48097: GO 47404
48099: POP
48100: POP
// end ;
48101: LD_VAR 0 1
48105: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
48106: LD_INT 0
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
// if not mc_bases then
48119: LD_EXP 99
48123: NOT
48124: IFFALSE 48128
// exit ;
48126: GO 48930
// for i = 1 to mc_bases do
48128: LD_ADDR_VAR 0 2
48132: PUSH
48133: DOUBLE
48134: LD_INT 1
48136: DEC
48137: ST_TO_ADDR
48138: LD_EXP 99
48142: PUSH
48143: FOR_TO
48144: IFFALSE 48928
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
48146: LD_EXP 127
48150: PUSH
48151: LD_VAR 0 2
48155: ARRAY
48156: NOT
48157: PUSH
48158: LD_EXP 102
48162: PUSH
48163: LD_VAR 0 2
48167: ARRAY
48168: PUSH
48169: LD_INT 1
48171: ARRAY
48172: OR
48173: PUSH
48174: LD_EXP 102
48178: PUSH
48179: LD_VAR 0 2
48183: ARRAY
48184: PUSH
48185: LD_INT 2
48187: ARRAY
48188: OR
48189: PUSH
48190: LD_EXP 125
48194: PUSH
48195: LD_VAR 0 2
48199: ARRAY
48200: PPUSH
48201: LD_INT 1
48203: PPUSH
48204: CALL_OW 325
48208: NOT
48209: OR
48210: PUSH
48211: LD_EXP 122
48215: PUSH
48216: LD_VAR 0 2
48220: ARRAY
48221: OR
48222: IFFALSE 48226
// continue ;
48224: GO 48143
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
48226: LD_ADDR_VAR 0 8
48230: PUSH
48231: LD_EXP 99
48235: PUSH
48236: LD_VAR 0 2
48240: ARRAY
48241: PPUSH
48242: LD_INT 25
48244: PUSH
48245: LD_INT 4
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 50
48254: PUSH
48255: EMPTY
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 60
48263: PUSH
48264: EMPTY
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: LIST
48275: PPUSH
48276: CALL_OW 72
48280: PUSH
48281: LD_EXP 103
48285: PUSH
48286: LD_VAR 0 2
48290: ARRAY
48291: DIFF
48292: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48293: LD_ADDR_VAR 0 9
48297: PUSH
48298: LD_EXP 99
48302: PUSH
48303: LD_VAR 0 2
48307: ARRAY
48308: PPUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 30
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: PPUSH
48337: CALL_OW 72
48341: ST_TO_ADDR
// if not tmp or not dep then
48342: LD_VAR 0 8
48346: NOT
48347: PUSH
48348: LD_VAR 0 9
48352: NOT
48353: OR
48354: IFFALSE 48358
// continue ;
48356: GO 48143
// side := GetSide ( tmp [ 1 ] ) ;
48358: LD_ADDR_VAR 0 11
48362: PUSH
48363: LD_VAR 0 8
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: PPUSH
48372: CALL_OW 255
48376: ST_TO_ADDR
// dep := dep [ 1 ] ;
48377: LD_ADDR_VAR 0 9
48381: PUSH
48382: LD_VAR 0 9
48386: PUSH
48387: LD_INT 1
48389: ARRAY
48390: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
48391: LD_ADDR_VAR 0 7
48395: PUSH
48396: LD_EXP 127
48400: PUSH
48401: LD_VAR 0 2
48405: ARRAY
48406: PPUSH
48407: LD_INT 22
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 25
48419: PUSH
48420: LD_INT 12
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PPUSH
48431: CALL_OW 70
48435: PUSH
48436: LD_INT 22
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 25
48448: PUSH
48449: LD_INT 12
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 91
48458: PUSH
48459: LD_VAR 0 9
48463: PUSH
48464: LD_INT 20
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: PPUSH
48477: CALL_OW 69
48481: UNION
48482: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
48483: LD_ADDR_VAR 0 10
48487: PUSH
48488: LD_EXP 127
48492: PUSH
48493: LD_VAR 0 2
48497: ARRAY
48498: PPUSH
48499: LD_INT 81
48501: PUSH
48502: LD_VAR 0 11
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PPUSH
48511: CALL_OW 70
48515: ST_TO_ADDR
// if not apes or danger_at_area then
48516: LD_VAR 0 7
48520: NOT
48521: PUSH
48522: LD_VAR 0 10
48526: OR
48527: IFFALSE 48577
// begin if mc_taming [ i ] then
48529: LD_EXP 130
48533: PUSH
48534: LD_VAR 0 2
48538: ARRAY
48539: IFFALSE 48575
// begin MC_Reset ( i , 121 ) ;
48541: LD_VAR 0 2
48545: PPUSH
48546: LD_INT 121
48548: PPUSH
48549: CALL 34535 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48553: LD_ADDR_EXP 130
48557: PUSH
48558: LD_EXP 130
48562: PPUSH
48563: LD_VAR 0 2
48567: PPUSH
48568: EMPTY
48569: PPUSH
48570: CALL_OW 1
48574: ST_TO_ADDR
// end ; continue ;
48575: GO 48143
// end ; for j in tmp do
48577: LD_ADDR_VAR 0 3
48581: PUSH
48582: LD_VAR 0 8
48586: PUSH
48587: FOR_IN
48588: IFFALSE 48924
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
48590: LD_VAR 0 3
48594: PUSH
48595: LD_EXP 130
48599: PUSH
48600: LD_VAR 0 2
48604: ARRAY
48605: IN
48606: NOT
48607: PUSH
48608: LD_EXP 130
48612: PUSH
48613: LD_VAR 0 2
48617: ARRAY
48618: PUSH
48619: LD_INT 3
48621: LESS
48622: AND
48623: IFFALSE 48681
// begin SetTag ( j , 121 ) ;
48625: LD_VAR 0 3
48629: PPUSH
48630: LD_INT 121
48632: PPUSH
48633: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
48637: LD_ADDR_EXP 130
48641: PUSH
48642: LD_EXP 130
48646: PPUSH
48647: LD_VAR 0 2
48651: PUSH
48652: LD_EXP 130
48656: PUSH
48657: LD_VAR 0 2
48661: ARRAY
48662: PUSH
48663: LD_INT 1
48665: PLUS
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PPUSH
48671: LD_VAR 0 3
48675: PPUSH
48676: CALL 66063 0 3
48680: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
48681: LD_VAR 0 3
48685: PUSH
48686: LD_EXP 130
48690: PUSH
48691: LD_VAR 0 2
48695: ARRAY
48696: IN
48697: IFFALSE 48922
// begin if GetClass ( j ) <> 4 then
48699: LD_VAR 0 3
48703: PPUSH
48704: CALL_OW 257
48708: PUSH
48709: LD_INT 4
48711: NONEQUAL
48712: IFFALSE 48765
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
48714: LD_ADDR_EXP 130
48718: PUSH
48719: LD_EXP 130
48723: PPUSH
48724: LD_VAR 0 2
48728: PPUSH
48729: LD_EXP 130
48733: PUSH
48734: LD_VAR 0 2
48738: ARRAY
48739: PUSH
48740: LD_VAR 0 3
48744: DIFF
48745: PPUSH
48746: CALL_OW 1
48750: ST_TO_ADDR
// SetTag ( j , 0 ) ;
48751: LD_VAR 0 3
48755: PPUSH
48756: LD_INT 0
48758: PPUSH
48759: CALL_OW 109
// continue ;
48763: GO 48587
// end ; if IsInUnit ( j ) then
48765: LD_VAR 0 3
48769: PPUSH
48770: CALL_OW 310
48774: IFFALSE 48785
// ComExitBuilding ( j ) ;
48776: LD_VAR 0 3
48780: PPUSH
48781: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
48785: LD_ADDR_VAR 0 6
48789: PUSH
48790: LD_VAR 0 7
48794: PPUSH
48795: LD_VAR 0 3
48799: PPUSH
48800: CALL_OW 74
48804: ST_TO_ADDR
// if not ape then
48805: LD_VAR 0 6
48809: NOT
48810: IFFALSE 48814
// break ;
48812: GO 48924
// x := GetX ( ape ) ;
48814: LD_ADDR_VAR 0 4
48818: PUSH
48819: LD_VAR 0 6
48823: PPUSH
48824: CALL_OW 250
48828: ST_TO_ADDR
// y := GetY ( ape ) ;
48829: LD_ADDR_VAR 0 5
48833: PUSH
48834: LD_VAR 0 6
48838: PPUSH
48839: CALL_OW 251
48843: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48844: LD_VAR 0 4
48848: PPUSH
48849: LD_VAR 0 5
48853: PPUSH
48854: CALL_OW 488
48858: NOT
48859: PUSH
48860: LD_VAR 0 11
48864: PPUSH
48865: LD_VAR 0 4
48869: PPUSH
48870: LD_VAR 0 5
48874: PPUSH
48875: LD_INT 20
48877: PPUSH
48878: CALL 66959 0 4
48882: PUSH
48883: LD_INT 4
48885: ARRAY
48886: OR
48887: IFFALSE 48891
// break ;
48889: GO 48924
// if not HasTask ( j ) then
48891: LD_VAR 0 3
48895: PPUSH
48896: CALL_OW 314
48900: NOT
48901: IFFALSE 48922
// ComTameXY ( j , x , y ) ;
48903: LD_VAR 0 3
48907: PPUSH
48908: LD_VAR 0 4
48912: PPUSH
48913: LD_VAR 0 5
48917: PPUSH
48918: CALL_OW 131
// end ; end ;
48922: GO 48587
48924: POP
48925: POP
// end ;
48926: GO 48143
48928: POP
48929: POP
// end ;
48930: LD_VAR 0 1
48934: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
48935: LD_INT 0
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
48941: PPUSH
48942: PPUSH
48943: PPUSH
48944: PPUSH
// if not mc_bases then
48945: LD_EXP 99
48949: NOT
48950: IFFALSE 48954
// exit ;
48952: GO 49580
// for i = 1 to mc_bases do
48954: LD_ADDR_VAR 0 2
48958: PUSH
48959: DOUBLE
48960: LD_INT 1
48962: DEC
48963: ST_TO_ADDR
48964: LD_EXP 99
48968: PUSH
48969: FOR_TO
48970: IFFALSE 49578
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
48972: LD_EXP 128
48976: PUSH
48977: LD_VAR 0 2
48981: ARRAY
48982: NOT
48983: PUSH
48984: LD_EXP 128
48988: PUSH
48989: LD_VAR 0 2
48993: ARRAY
48994: PPUSH
48995: LD_INT 25
48997: PUSH
48998: LD_INT 12
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PPUSH
49005: CALL_OW 72
49009: NOT
49010: OR
49011: IFFALSE 49015
// continue ;
49013: GO 48969
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
49015: LD_ADDR_VAR 0 5
49019: PUSH
49020: LD_EXP 128
49024: PUSH
49025: LD_VAR 0 2
49029: ARRAY
49030: PUSH
49031: LD_INT 1
49033: ARRAY
49034: PPUSH
49035: CALL_OW 255
49039: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
49040: LD_VAR 0 5
49044: PPUSH
49045: LD_INT 2
49047: PPUSH
49048: CALL_OW 325
49052: IFFALSE 49305
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49054: LD_ADDR_VAR 0 4
49058: PUSH
49059: LD_EXP 128
49063: PUSH
49064: LD_VAR 0 2
49068: ARRAY
49069: PPUSH
49070: LD_INT 25
49072: PUSH
49073: LD_INT 16
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PPUSH
49080: CALL_OW 72
49084: ST_TO_ADDR
// if tmp < 6 then
49085: LD_VAR 0 4
49089: PUSH
49090: LD_INT 6
49092: LESS
49093: IFFALSE 49305
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49095: LD_ADDR_VAR 0 6
49099: PUSH
49100: LD_EXP 99
49104: PUSH
49105: LD_VAR 0 2
49109: ARRAY
49110: PPUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 30
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 30
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: PPUSH
49139: CALL_OW 72
49143: ST_TO_ADDR
// if depot then
49144: LD_VAR 0 6
49148: IFFALSE 49305
// begin selected := 0 ;
49150: LD_ADDR_VAR 0 7
49154: PUSH
49155: LD_INT 0
49157: ST_TO_ADDR
// for j in depot do
49158: LD_ADDR_VAR 0 3
49162: PUSH
49163: LD_VAR 0 6
49167: PUSH
49168: FOR_IN
49169: IFFALSE 49200
// begin if UnitsInside ( j ) < 6 then
49171: LD_VAR 0 3
49175: PPUSH
49176: CALL_OW 313
49180: PUSH
49181: LD_INT 6
49183: LESS
49184: IFFALSE 49198
// begin selected := j ;
49186: LD_ADDR_VAR 0 7
49190: PUSH
49191: LD_VAR 0 3
49195: ST_TO_ADDR
// break ;
49196: GO 49200
// end ; end ;
49198: GO 49168
49200: POP
49201: POP
// if selected then
49202: LD_VAR 0 7
49206: IFFALSE 49305
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49208: LD_ADDR_VAR 0 3
49212: PUSH
49213: LD_EXP 128
49217: PUSH
49218: LD_VAR 0 2
49222: ARRAY
49223: PPUSH
49224: LD_INT 25
49226: PUSH
49227: LD_INT 12
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PPUSH
49234: CALL_OW 72
49238: PUSH
49239: FOR_IN
49240: IFFALSE 49303
// if not HasTask ( j ) then
49242: LD_VAR 0 3
49246: PPUSH
49247: CALL_OW 314
49251: NOT
49252: IFFALSE 49301
// begin if not IsInUnit ( j ) then
49254: LD_VAR 0 3
49258: PPUSH
49259: CALL_OW 310
49263: NOT
49264: IFFALSE 49280
// ComEnterUnit ( j , selected ) ;
49266: LD_VAR 0 3
49270: PPUSH
49271: LD_VAR 0 7
49275: PPUSH
49276: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
49280: LD_VAR 0 3
49284: PPUSH
49285: LD_INT 16
49287: PPUSH
49288: CALL_OW 183
// AddComExitBuilding ( j ) ;
49292: LD_VAR 0 3
49296: PPUSH
49297: CALL_OW 182
// end ;
49301: GO 49239
49303: POP
49304: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
49305: LD_VAR 0 5
49309: PPUSH
49310: LD_INT 11
49312: PPUSH
49313: CALL_OW 325
49317: IFFALSE 49576
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49319: LD_ADDR_VAR 0 4
49323: PUSH
49324: LD_EXP 128
49328: PUSH
49329: LD_VAR 0 2
49333: ARRAY
49334: PPUSH
49335: LD_INT 25
49337: PUSH
49338: LD_INT 16
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PPUSH
49345: CALL_OW 72
49349: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
49350: LD_VAR 0 4
49354: PUSH
49355: LD_INT 6
49357: GREATEREQUAL
49358: PUSH
49359: LD_VAR 0 5
49363: PPUSH
49364: LD_INT 2
49366: PPUSH
49367: CALL_OW 325
49371: NOT
49372: OR
49373: IFFALSE 49576
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49375: LD_ADDR_VAR 0 8
49379: PUSH
49380: LD_EXP 99
49384: PUSH
49385: LD_VAR 0 2
49389: ARRAY
49390: PPUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 30
49396: PUSH
49397: LD_INT 4
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 30
49406: PUSH
49407: LD_INT 5
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: PPUSH
49419: CALL_OW 72
49423: ST_TO_ADDR
// if barracks then
49424: LD_VAR 0 8
49428: IFFALSE 49576
// begin selected := 0 ;
49430: LD_ADDR_VAR 0 7
49434: PUSH
49435: LD_INT 0
49437: ST_TO_ADDR
// for j in barracks do
49438: LD_ADDR_VAR 0 3
49442: PUSH
49443: LD_VAR 0 8
49447: PUSH
49448: FOR_IN
49449: IFFALSE 49480
// begin if UnitsInside ( j ) < 6 then
49451: LD_VAR 0 3
49455: PPUSH
49456: CALL_OW 313
49460: PUSH
49461: LD_INT 6
49463: LESS
49464: IFFALSE 49478
// begin selected := j ;
49466: LD_ADDR_VAR 0 7
49470: PUSH
49471: LD_VAR 0 3
49475: ST_TO_ADDR
// break ;
49476: GO 49480
// end ; end ;
49478: GO 49448
49480: POP
49481: POP
// if selected then
49482: LD_VAR 0 7
49486: IFFALSE 49576
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49488: LD_ADDR_VAR 0 3
49492: PUSH
49493: LD_EXP 128
49497: PUSH
49498: LD_VAR 0 2
49502: ARRAY
49503: PPUSH
49504: LD_INT 25
49506: PUSH
49507: LD_INT 12
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PPUSH
49514: CALL_OW 72
49518: PUSH
49519: FOR_IN
49520: IFFALSE 49574
// if not IsInUnit ( j ) and not HasTask ( j ) then
49522: LD_VAR 0 3
49526: PPUSH
49527: CALL_OW 310
49531: NOT
49532: PUSH
49533: LD_VAR 0 3
49537: PPUSH
49538: CALL_OW 314
49542: NOT
49543: AND
49544: IFFALSE 49572
// begin ComEnterUnit ( j , selected ) ;
49546: LD_VAR 0 3
49550: PPUSH
49551: LD_VAR 0 7
49555: PPUSH
49556: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
49560: LD_VAR 0 3
49564: PPUSH
49565: LD_INT 15
49567: PPUSH
49568: CALL_OW 183
// end ;
49572: GO 49519
49574: POP
49575: POP
// end ; end ; end ; end ; end ;
49576: GO 48969
49578: POP
49579: POP
// end ;
49580: LD_VAR 0 1
49584: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
49585: LD_INT 0
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
// if not mc_bases then
49591: LD_EXP 99
49595: NOT
49596: IFFALSE 49600
// exit ;
49598: GO 49778
// for i = 1 to mc_bases do
49600: LD_ADDR_VAR 0 2
49604: PUSH
49605: DOUBLE
49606: LD_INT 1
49608: DEC
49609: ST_TO_ADDR
49610: LD_EXP 99
49614: PUSH
49615: FOR_TO
49616: IFFALSE 49776
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
49618: LD_ADDR_VAR 0 4
49622: PUSH
49623: LD_EXP 99
49627: PUSH
49628: LD_VAR 0 2
49632: ARRAY
49633: PPUSH
49634: LD_INT 25
49636: PUSH
49637: LD_INT 9
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PPUSH
49644: CALL_OW 72
49648: ST_TO_ADDR
// if not tmp then
49649: LD_VAR 0 4
49653: NOT
49654: IFFALSE 49658
// continue ;
49656: GO 49615
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
49658: LD_EXP 125
49662: PUSH
49663: LD_VAR 0 2
49667: ARRAY
49668: PPUSH
49669: LD_INT 29
49671: PPUSH
49672: CALL_OW 325
49676: NOT
49677: PUSH
49678: LD_EXP 125
49682: PUSH
49683: LD_VAR 0 2
49687: ARRAY
49688: PPUSH
49689: LD_INT 28
49691: PPUSH
49692: CALL_OW 325
49696: NOT
49697: AND
49698: IFFALSE 49702
// continue ;
49700: GO 49615
// for j in tmp do
49702: LD_ADDR_VAR 0 3
49706: PUSH
49707: LD_VAR 0 4
49711: PUSH
49712: FOR_IN
49713: IFFALSE 49772
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
49715: LD_VAR 0 3
49719: PUSH
49720: LD_EXP 102
49724: PUSH
49725: LD_VAR 0 2
49729: ARRAY
49730: PUSH
49731: LD_INT 1
49733: ARRAY
49734: IN
49735: NOT
49736: PUSH
49737: LD_VAR 0 3
49741: PUSH
49742: LD_EXP 102
49746: PUSH
49747: LD_VAR 0 2
49751: ARRAY
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: IN
49757: NOT
49758: AND
49759: IFFALSE 49770
// ComSpaceTimeShoot ( j ) ;
49761: LD_VAR 0 3
49765: PPUSH
49766: CALL 60123 0 1
49770: GO 49712
49772: POP
49773: POP
// end ;
49774: GO 49615
49776: POP
49777: POP
// end ;
49778: LD_VAR 0 1
49782: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
49783: LD_INT 0
49785: PPUSH
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
// if not mc_bases then
49794: LD_EXP 99
49798: NOT
49799: IFFALSE 49803
// exit ;
49801: GO 50425
// for i = 1 to mc_bases do
49803: LD_ADDR_VAR 0 2
49807: PUSH
49808: DOUBLE
49809: LD_INT 1
49811: DEC
49812: ST_TO_ADDR
49813: LD_EXP 99
49817: PUSH
49818: FOR_TO
49819: IFFALSE 50423
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
49821: LD_EXP 134
49825: PUSH
49826: LD_VAR 0 2
49830: ARRAY
49831: NOT
49832: PUSH
49833: LD_INT 38
49835: PPUSH
49836: LD_EXP 125
49840: PUSH
49841: LD_VAR 0 2
49845: ARRAY
49846: PPUSH
49847: CALL_OW 321
49851: PUSH
49852: LD_INT 2
49854: NONEQUAL
49855: OR
49856: IFFALSE 49860
// continue ;
49858: GO 49818
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
49860: LD_ADDR_VAR 0 8
49864: PUSH
49865: LD_EXP 99
49869: PUSH
49870: LD_VAR 0 2
49874: ARRAY
49875: PPUSH
49876: LD_INT 30
49878: PUSH
49879: LD_INT 34
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PPUSH
49886: CALL_OW 72
49890: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
49891: LD_ADDR_VAR 0 9
49895: PUSH
49896: LD_EXP 99
49900: PUSH
49901: LD_VAR 0 2
49905: ARRAY
49906: PPUSH
49907: LD_INT 25
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PPUSH
49917: CALL_OW 72
49921: PPUSH
49922: LD_INT 0
49924: PPUSH
49925: CALL 99260 0 2
49929: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
49930: LD_VAR 0 9
49934: NOT
49935: PUSH
49936: LD_VAR 0 8
49940: NOT
49941: OR
49942: PUSH
49943: LD_EXP 99
49947: PUSH
49948: LD_VAR 0 2
49952: ARRAY
49953: PPUSH
49954: LD_INT 124
49956: PPUSH
49957: CALL 99260 0 2
49961: OR
49962: IFFALSE 49966
// continue ;
49964: GO 49818
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
49966: LD_EXP 135
49970: PUSH
49971: LD_VAR 0 2
49975: ARRAY
49976: PUSH
49977: LD_EXP 134
49981: PUSH
49982: LD_VAR 0 2
49986: ARRAY
49987: LESS
49988: PUSH
49989: LD_EXP 135
49993: PUSH
49994: LD_VAR 0 2
49998: ARRAY
49999: PUSH
50000: LD_VAR 0 8
50004: LESS
50005: AND
50006: IFFALSE 50421
// begin tmp := sci [ 1 ] ;
50008: LD_ADDR_VAR 0 7
50012: PUSH
50013: LD_VAR 0 9
50017: PUSH
50018: LD_INT 1
50020: ARRAY
50021: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
50022: LD_VAR 0 7
50026: PPUSH
50027: LD_INT 124
50029: PPUSH
50030: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
50034: LD_ADDR_VAR 0 3
50038: PUSH
50039: DOUBLE
50040: LD_EXP 134
50044: PUSH
50045: LD_VAR 0 2
50049: ARRAY
50050: INC
50051: ST_TO_ADDR
50052: LD_EXP 134
50056: PUSH
50057: LD_VAR 0 2
50061: ARRAY
50062: PUSH
50063: FOR_DOWNTO
50064: IFFALSE 50407
// begin if IsInUnit ( tmp ) then
50066: LD_VAR 0 7
50070: PPUSH
50071: CALL_OW 310
50075: IFFALSE 50086
// ComExitBuilding ( tmp ) ;
50077: LD_VAR 0 7
50081: PPUSH
50082: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
50086: LD_INT 35
50088: PPUSH
50089: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
50093: LD_VAR 0 7
50097: PPUSH
50098: CALL_OW 310
50102: NOT
50103: PUSH
50104: LD_VAR 0 7
50108: PPUSH
50109: CALL_OW 314
50113: NOT
50114: AND
50115: IFFALSE 50086
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
50117: LD_ADDR_VAR 0 6
50121: PUSH
50122: LD_VAR 0 7
50126: PPUSH
50127: CALL_OW 250
50131: PUSH
50132: LD_VAR 0 7
50136: PPUSH
50137: CALL_OW 251
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50146: LD_INT 35
50148: PPUSH
50149: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
50153: LD_ADDR_VAR 0 4
50157: PUSH
50158: LD_EXP 134
50162: PUSH
50163: LD_VAR 0 2
50167: ARRAY
50168: PUSH
50169: LD_VAR 0 3
50173: ARRAY
50174: PUSH
50175: LD_INT 1
50177: ARRAY
50178: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
50179: LD_ADDR_VAR 0 5
50183: PUSH
50184: LD_EXP 134
50188: PUSH
50189: LD_VAR 0 2
50193: ARRAY
50194: PUSH
50195: LD_VAR 0 3
50199: ARRAY
50200: PUSH
50201: LD_INT 2
50203: ARRAY
50204: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
50205: LD_VAR 0 7
50209: PPUSH
50210: LD_INT 10
50212: PPUSH
50213: CALL 68656 0 2
50217: PUSH
50218: LD_INT 4
50220: ARRAY
50221: IFFALSE 50259
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
50223: LD_VAR 0 7
50227: PPUSH
50228: LD_VAR 0 6
50232: PUSH
50233: LD_INT 1
50235: ARRAY
50236: PPUSH
50237: LD_VAR 0 6
50241: PUSH
50242: LD_INT 2
50244: ARRAY
50245: PPUSH
50246: CALL_OW 111
// wait ( 0 0$10 ) ;
50250: LD_INT 350
50252: PPUSH
50253: CALL_OW 67
// end else
50257: GO 50285
// begin ComMoveXY ( tmp , x , y ) ;
50259: LD_VAR 0 7
50263: PPUSH
50264: LD_VAR 0 4
50268: PPUSH
50269: LD_VAR 0 5
50273: PPUSH
50274: CALL_OW 111
// wait ( 0 0$3 ) ;
50278: LD_INT 105
50280: PPUSH
50281: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
50285: LD_VAR 0 7
50289: PPUSH
50290: LD_VAR 0 4
50294: PPUSH
50295: LD_VAR 0 5
50299: PPUSH
50300: CALL_OW 307
50304: IFFALSE 50146
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
50306: LD_VAR 0 7
50310: PPUSH
50311: LD_VAR 0 4
50315: PPUSH
50316: LD_VAR 0 5
50320: PPUSH
50321: LD_VAR 0 8
50325: PUSH
50326: LD_VAR 0 3
50330: ARRAY
50331: PPUSH
50332: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
50336: LD_INT 35
50338: PPUSH
50339: CALL_OW 67
// until not HasTask ( tmp ) ;
50343: LD_VAR 0 7
50347: PPUSH
50348: CALL_OW 314
50352: NOT
50353: IFFALSE 50336
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
50355: LD_ADDR_EXP 135
50359: PUSH
50360: LD_EXP 135
50364: PPUSH
50365: LD_VAR 0 2
50369: PUSH
50370: LD_EXP 135
50374: PUSH
50375: LD_VAR 0 2
50379: ARRAY
50380: PUSH
50381: LD_INT 1
50383: PLUS
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PPUSH
50389: LD_VAR 0 8
50393: PUSH
50394: LD_VAR 0 3
50398: ARRAY
50399: PPUSH
50400: CALL 66063 0 3
50404: ST_TO_ADDR
// end ;
50405: GO 50063
50407: POP
50408: POP
// MC_Reset ( i , 124 ) ;
50409: LD_VAR 0 2
50413: PPUSH
50414: LD_INT 124
50416: PPUSH
50417: CALL 34535 0 2
// end ; end ;
50421: GO 49818
50423: POP
50424: POP
// end ;
50425: LD_VAR 0 1
50429: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
50430: LD_INT 0
50432: PPUSH
50433: PPUSH
50434: PPUSH
// if not mc_bases then
50435: LD_EXP 99
50439: NOT
50440: IFFALSE 50444
// exit ;
50442: GO 51050
// for i = 1 to mc_bases do
50444: LD_ADDR_VAR 0 2
50448: PUSH
50449: DOUBLE
50450: LD_INT 1
50452: DEC
50453: ST_TO_ADDR
50454: LD_EXP 99
50458: PUSH
50459: FOR_TO
50460: IFFALSE 51048
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50462: LD_ADDR_VAR 0 3
50466: PUSH
50467: LD_EXP 99
50471: PUSH
50472: LD_VAR 0 2
50476: ARRAY
50477: PPUSH
50478: LD_INT 25
50480: PUSH
50481: LD_INT 4
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PPUSH
50488: CALL_OW 72
50492: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
50493: LD_VAR 0 3
50497: NOT
50498: PUSH
50499: LD_EXP 136
50503: PUSH
50504: LD_VAR 0 2
50508: ARRAY
50509: NOT
50510: OR
50511: PUSH
50512: LD_EXP 99
50516: PUSH
50517: LD_VAR 0 2
50521: ARRAY
50522: PPUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 30
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 30
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: PPUSH
50551: CALL_OW 72
50555: NOT
50556: OR
50557: IFFALSE 50607
// begin if mc_deposits_finder [ i ] then
50559: LD_EXP 137
50563: PUSH
50564: LD_VAR 0 2
50568: ARRAY
50569: IFFALSE 50605
// begin MC_Reset ( i , 125 ) ;
50571: LD_VAR 0 2
50575: PPUSH
50576: LD_INT 125
50578: PPUSH
50579: CALL 34535 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50583: LD_ADDR_EXP 137
50587: PUSH
50588: LD_EXP 137
50592: PPUSH
50593: LD_VAR 0 2
50597: PPUSH
50598: EMPTY
50599: PPUSH
50600: CALL_OW 1
50604: ST_TO_ADDR
// end ; continue ;
50605: GO 50459
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
50607: LD_EXP 136
50611: PUSH
50612: LD_VAR 0 2
50616: ARRAY
50617: PUSH
50618: LD_INT 1
50620: ARRAY
50621: PUSH
50622: LD_INT 3
50624: ARRAY
50625: PUSH
50626: LD_INT 1
50628: EQUAL
50629: PUSH
50630: LD_INT 20
50632: PPUSH
50633: LD_EXP 125
50637: PUSH
50638: LD_VAR 0 2
50642: ARRAY
50643: PPUSH
50644: CALL_OW 321
50648: PUSH
50649: LD_INT 2
50651: NONEQUAL
50652: AND
50653: IFFALSE 50703
// begin if mc_deposits_finder [ i ] then
50655: LD_EXP 137
50659: PUSH
50660: LD_VAR 0 2
50664: ARRAY
50665: IFFALSE 50701
// begin MC_Reset ( i , 125 ) ;
50667: LD_VAR 0 2
50671: PPUSH
50672: LD_INT 125
50674: PPUSH
50675: CALL 34535 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50679: LD_ADDR_EXP 137
50683: PUSH
50684: LD_EXP 137
50688: PPUSH
50689: LD_VAR 0 2
50693: PPUSH
50694: EMPTY
50695: PPUSH
50696: CALL_OW 1
50700: ST_TO_ADDR
// end ; continue ;
50701: GO 50459
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
50703: LD_EXP 136
50707: PUSH
50708: LD_VAR 0 2
50712: ARRAY
50713: PUSH
50714: LD_INT 1
50716: ARRAY
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: LD_EXP 136
50726: PUSH
50727: LD_VAR 0 2
50731: ARRAY
50732: PUSH
50733: LD_INT 1
50735: ARRAY
50736: PUSH
50737: LD_INT 2
50739: ARRAY
50740: PPUSH
50741: LD_EXP 125
50745: PUSH
50746: LD_VAR 0 2
50750: ARRAY
50751: PPUSH
50752: CALL_OW 440
50756: IFFALSE 50799
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
50758: LD_ADDR_EXP 136
50762: PUSH
50763: LD_EXP 136
50767: PPUSH
50768: LD_VAR 0 2
50772: PPUSH
50773: LD_EXP 136
50777: PUSH
50778: LD_VAR 0 2
50782: ARRAY
50783: PPUSH
50784: LD_INT 1
50786: PPUSH
50787: CALL_OW 3
50791: PPUSH
50792: CALL_OW 1
50796: ST_TO_ADDR
50797: GO 51046
// begin if not mc_deposits_finder [ i ] then
50799: LD_EXP 137
50803: PUSH
50804: LD_VAR 0 2
50808: ARRAY
50809: NOT
50810: IFFALSE 50862
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
50812: LD_ADDR_EXP 137
50816: PUSH
50817: LD_EXP 137
50821: PPUSH
50822: LD_VAR 0 2
50826: PPUSH
50827: LD_VAR 0 3
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: PUSH
50836: EMPTY
50837: LIST
50838: PPUSH
50839: CALL_OW 1
50843: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
50844: LD_VAR 0 3
50848: PUSH
50849: LD_INT 1
50851: ARRAY
50852: PPUSH
50853: LD_INT 125
50855: PPUSH
50856: CALL_OW 109
// end else
50860: GO 51046
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
50862: LD_EXP 137
50866: PUSH
50867: LD_VAR 0 2
50871: ARRAY
50872: PUSH
50873: LD_INT 1
50875: ARRAY
50876: PPUSH
50877: CALL_OW 310
50881: IFFALSE 50904
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
50883: LD_EXP 137
50887: PUSH
50888: LD_VAR 0 2
50892: ARRAY
50893: PUSH
50894: LD_INT 1
50896: ARRAY
50897: PPUSH
50898: CALL_OW 122
50902: GO 51046
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
50904: LD_EXP 137
50908: PUSH
50909: LD_VAR 0 2
50913: ARRAY
50914: PUSH
50915: LD_INT 1
50917: ARRAY
50918: PPUSH
50919: CALL_OW 314
50923: NOT
50924: PUSH
50925: LD_EXP 137
50929: PUSH
50930: LD_VAR 0 2
50934: ARRAY
50935: PUSH
50936: LD_INT 1
50938: ARRAY
50939: PPUSH
50940: LD_EXP 136
50944: PUSH
50945: LD_VAR 0 2
50949: ARRAY
50950: PUSH
50951: LD_INT 1
50953: ARRAY
50954: PUSH
50955: LD_INT 1
50957: ARRAY
50958: PPUSH
50959: LD_EXP 136
50963: PUSH
50964: LD_VAR 0 2
50968: ARRAY
50969: PUSH
50970: LD_INT 1
50972: ARRAY
50973: PUSH
50974: LD_INT 2
50976: ARRAY
50977: PPUSH
50978: CALL_OW 297
50982: PUSH
50983: LD_INT 6
50985: GREATER
50986: AND
50987: IFFALSE 51046
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
50989: LD_EXP 137
50993: PUSH
50994: LD_VAR 0 2
50998: ARRAY
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PPUSH
51004: LD_EXP 136
51008: PUSH
51009: LD_VAR 0 2
51013: ARRAY
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: PUSH
51019: LD_INT 1
51021: ARRAY
51022: PPUSH
51023: LD_EXP 136
51027: PUSH
51028: LD_VAR 0 2
51032: ARRAY
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PUSH
51038: LD_INT 2
51040: ARRAY
51041: PPUSH
51042: CALL_OW 111
// end ; end ; end ;
51046: GO 50459
51048: POP
51049: POP
// end ;
51050: LD_VAR 0 1
51054: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
51055: LD_INT 0
51057: PPUSH
51058: PPUSH
51059: PPUSH
51060: PPUSH
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
// if not mc_bases then
51068: LD_EXP 99
51072: NOT
51073: IFFALSE 51077
// exit ;
51075: GO 51801
// for i = 1 to mc_bases do
51077: LD_ADDR_VAR 0 2
51081: PUSH
51082: DOUBLE
51083: LD_INT 1
51085: DEC
51086: ST_TO_ADDR
51087: LD_EXP 99
51091: PUSH
51092: FOR_TO
51093: IFFALSE 51799
// begin if not mc_bases [ i ] then
51095: LD_EXP 99
51099: PUSH
51100: LD_VAR 0 2
51104: ARRAY
51105: NOT
51106: IFFALSE 51110
// continue ;
51108: GO 51092
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
51110: LD_ADDR_VAR 0 7
51114: PUSH
51115: LD_EXP 99
51119: PUSH
51120: LD_VAR 0 2
51124: ARRAY
51125: PUSH
51126: LD_INT 1
51128: ARRAY
51129: PPUSH
51130: CALL_OW 248
51134: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
51135: LD_VAR 0 7
51139: PUSH
51140: LD_INT 3
51142: EQUAL
51143: PUSH
51144: LD_EXP 118
51148: PUSH
51149: LD_VAR 0 2
51153: ARRAY
51154: PUSH
51155: LD_EXP 121
51159: PUSH
51160: LD_VAR 0 2
51164: ARRAY
51165: UNION
51166: PPUSH
51167: LD_INT 33
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PPUSH
51177: CALL_OW 72
51181: NOT
51182: OR
51183: IFFALSE 51187
// continue ;
51185: GO 51092
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
51187: LD_ADDR_VAR 0 9
51191: PUSH
51192: LD_EXP 99
51196: PUSH
51197: LD_VAR 0 2
51201: ARRAY
51202: PPUSH
51203: LD_INT 30
51205: PUSH
51206: LD_INT 36
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PPUSH
51213: CALL_OW 72
51217: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
51218: LD_ADDR_VAR 0 10
51222: PUSH
51223: LD_EXP 118
51227: PUSH
51228: LD_VAR 0 2
51232: ARRAY
51233: PPUSH
51234: LD_INT 34
51236: PUSH
51237: LD_INT 31
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PPUSH
51244: CALL_OW 72
51248: ST_TO_ADDR
// if not cts and not mcts then
51249: LD_VAR 0 9
51253: NOT
51254: PUSH
51255: LD_VAR 0 10
51259: NOT
51260: AND
51261: IFFALSE 51265
// continue ;
51263: GO 51092
// x := cts ;
51265: LD_ADDR_VAR 0 11
51269: PUSH
51270: LD_VAR 0 9
51274: ST_TO_ADDR
// if not x then
51275: LD_VAR 0 11
51279: NOT
51280: IFFALSE 51292
// x := mcts ;
51282: LD_ADDR_VAR 0 11
51286: PUSH
51287: LD_VAR 0 10
51291: ST_TO_ADDR
// if mc_remote_driver [ i ] then
51292: LD_EXP 139
51296: PUSH
51297: LD_VAR 0 2
51301: ARRAY
51302: IFFALSE 51571
// for j in mc_remote_driver [ i ] do
51304: LD_ADDR_VAR 0 3
51308: PUSH
51309: LD_EXP 139
51313: PUSH
51314: LD_VAR 0 2
51318: ARRAY
51319: PUSH
51320: FOR_IN
51321: IFFALSE 51569
// begin if GetClass ( j ) <> 3 then
51323: LD_VAR 0 3
51327: PPUSH
51328: CALL_OW 257
51332: PUSH
51333: LD_INT 3
51335: NONEQUAL
51336: IFFALSE 51389
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
51338: LD_ADDR_EXP 139
51342: PUSH
51343: LD_EXP 139
51347: PPUSH
51348: LD_VAR 0 2
51352: PPUSH
51353: LD_EXP 139
51357: PUSH
51358: LD_VAR 0 2
51362: ARRAY
51363: PUSH
51364: LD_VAR 0 3
51368: DIFF
51369: PPUSH
51370: CALL_OW 1
51374: ST_TO_ADDR
// SetTag ( j , 0 ) ;
51375: LD_VAR 0 3
51379: PPUSH
51380: LD_INT 0
51382: PPUSH
51383: CALL_OW 109
// continue ;
51387: GO 51320
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
51389: LD_VAR 0 3
51393: PPUSH
51394: CALL_OW 310
51398: NOT
51399: PUSH
51400: LD_VAR 0 3
51404: PPUSH
51405: CALL_OW 310
51409: PPUSH
51410: CALL_OW 266
51414: PUSH
51415: LD_INT 36
51417: NONEQUAL
51418: PUSH
51419: LD_VAR 0 3
51423: PPUSH
51424: CALL 99348 0 1
51428: NOT
51429: AND
51430: OR
51431: IFFALSE 51567
// begin if IsInUnit ( j ) then
51433: LD_VAR 0 3
51437: PPUSH
51438: CALL_OW 310
51442: IFFALSE 51453
// ComExitBuilding ( j ) ;
51444: LD_VAR 0 3
51448: PPUSH
51449: CALL_OW 122
// ct := 0 ;
51453: LD_ADDR_VAR 0 8
51457: PUSH
51458: LD_INT 0
51460: ST_TO_ADDR
// for k in x do
51461: LD_ADDR_VAR 0 4
51465: PUSH
51466: LD_VAR 0 11
51470: PUSH
51471: FOR_IN
51472: IFFALSE 51545
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
51474: LD_VAR 0 4
51478: PPUSH
51479: CALL_OW 264
51483: PUSH
51484: LD_INT 31
51486: EQUAL
51487: PUSH
51488: LD_VAR 0 4
51492: PPUSH
51493: CALL_OW 311
51497: NOT
51498: AND
51499: PUSH
51500: LD_VAR 0 4
51504: PPUSH
51505: CALL_OW 266
51509: PUSH
51510: LD_INT 36
51512: EQUAL
51513: PUSH
51514: LD_VAR 0 4
51518: PPUSH
51519: CALL_OW 313
51523: PUSH
51524: LD_INT 3
51526: LESS
51527: AND
51528: OR
51529: IFFALSE 51543
// begin ct := k ;
51531: LD_ADDR_VAR 0 8
51535: PUSH
51536: LD_VAR 0 4
51540: ST_TO_ADDR
// break ;
51541: GO 51545
// end ;
51543: GO 51471
51545: POP
51546: POP
// if ct then
51547: LD_VAR 0 8
51551: IFFALSE 51567
// ComEnterUnit ( j , ct ) ;
51553: LD_VAR 0 3
51557: PPUSH
51558: LD_VAR 0 8
51562: PPUSH
51563: CALL_OW 120
// end ; end ;
51567: GO 51320
51569: POP
51570: POP
// places := 0 ;
51571: LD_ADDR_VAR 0 5
51575: PUSH
51576: LD_INT 0
51578: ST_TO_ADDR
// for j = 1 to x do
51579: LD_ADDR_VAR 0 3
51583: PUSH
51584: DOUBLE
51585: LD_INT 1
51587: DEC
51588: ST_TO_ADDR
51589: LD_VAR 0 11
51593: PUSH
51594: FOR_TO
51595: IFFALSE 51650
// if GetWeapon ( x [ j ] ) = ar_control_tower then
51597: LD_VAR 0 11
51601: PUSH
51602: LD_VAR 0 3
51606: ARRAY
51607: PPUSH
51608: CALL_OW 264
51612: PUSH
51613: LD_INT 31
51615: EQUAL
51616: IFFALSE 51634
// places := places + 1 else
51618: LD_ADDR_VAR 0 5
51622: PUSH
51623: LD_VAR 0 5
51627: PUSH
51628: LD_INT 1
51630: PLUS
51631: ST_TO_ADDR
51632: GO 51648
// places := places + 3 ;
51634: LD_ADDR_VAR 0 5
51638: PUSH
51639: LD_VAR 0 5
51643: PUSH
51644: LD_INT 3
51646: PLUS
51647: ST_TO_ADDR
51648: GO 51594
51650: POP
51651: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
51652: LD_ADDR_VAR 0 6
51656: PUSH
51657: LD_EXP 99
51661: PUSH
51662: LD_VAR 0 2
51666: ARRAY
51667: PPUSH
51668: LD_INT 25
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PPUSH
51678: CALL_OW 72
51682: PUSH
51683: LD_EXP 139
51687: PUSH
51688: LD_VAR 0 2
51692: ARRAY
51693: DIFF
51694: PPUSH
51695: LD_INT 3
51697: PPUSH
51698: CALL 100248 0 2
51702: ST_TO_ADDR
// if not tmp then
51703: LD_VAR 0 6
51707: NOT
51708: IFFALSE 51712
// continue ;
51710: GO 51092
// places := places - mc_remote_driver [ i ] ;
51712: LD_ADDR_VAR 0 5
51716: PUSH
51717: LD_VAR 0 5
51721: PUSH
51722: LD_EXP 139
51726: PUSH
51727: LD_VAR 0 2
51731: ARRAY
51732: MINUS
51733: ST_TO_ADDR
// if places then
51734: LD_VAR 0 5
51738: IFFALSE 51797
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
51740: LD_ADDR_EXP 139
51744: PUSH
51745: LD_EXP 139
51749: PPUSH
51750: LD_VAR 0 2
51754: PPUSH
51755: LD_EXP 139
51759: PUSH
51760: LD_VAR 0 2
51764: ARRAY
51765: PUSH
51766: LD_VAR 0 6
51770: PUSH
51771: LD_INT 1
51773: ARRAY
51774: UNION
51775: PPUSH
51776: CALL_OW 1
51780: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
51781: LD_VAR 0 6
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PPUSH
51790: LD_INT 126
51792: PPUSH
51793: CALL_OW 109
// end ; end ;
51797: GO 51092
51799: POP
51800: POP
// end ;
51801: LD_VAR 0 1
51805: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
51806: LD_INT 0
51808: PPUSH
51809: PPUSH
51810: PPUSH
51811: PPUSH
51812: PPUSH
51813: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
51814: LD_VAR 0 1
51818: NOT
51819: PUSH
51820: LD_VAR 0 2
51824: NOT
51825: OR
51826: PUSH
51827: LD_VAR 0 3
51831: NOT
51832: OR
51833: PUSH
51834: LD_VAR 0 4
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: LD_INT 4
51850: PUSH
51851: LD_INT 5
51853: PUSH
51854: LD_INT 8
51856: PUSH
51857: LD_INT 9
51859: PUSH
51860: LD_INT 15
51862: PUSH
51863: LD_INT 16
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: IN
51877: NOT
51878: OR
51879: IFFALSE 51883
// exit ;
51881: GO 52783
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
51883: LD_ADDR_VAR 0 2
51887: PUSH
51888: LD_VAR 0 2
51892: PPUSH
51893: LD_INT 21
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 24
51905: PUSH
51906: LD_INT 250
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PPUSH
51917: CALL_OW 72
51921: ST_TO_ADDR
// case class of 1 , 15 :
51922: LD_VAR 0 4
51926: PUSH
51927: LD_INT 1
51929: DOUBLE
51930: EQUAL
51931: IFTRUE 51941
51933: LD_INT 15
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51941
51939: GO 52026
51941: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
51942: LD_ADDR_VAR 0 8
51946: PUSH
51947: LD_VAR 0 2
51951: PPUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 30
51957: PUSH
51958: LD_INT 32
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 30
51967: PUSH
51968: LD_INT 31
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: PPUSH
51980: CALL_OW 72
51984: PUSH
51985: LD_VAR 0 2
51989: PPUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 30
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 30
52005: PUSH
52006: LD_INT 5
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: PPUSH
52018: CALL_OW 72
52022: ADD
52023: ST_TO_ADDR
52024: GO 52272
52026: LD_INT 2
52028: DOUBLE
52029: EQUAL
52030: IFTRUE 52040
52032: LD_INT 16
52034: DOUBLE
52035: EQUAL
52036: IFTRUE 52040
52038: GO 52086
52040: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
52041: LD_ADDR_VAR 0 8
52045: PUSH
52046: LD_VAR 0 2
52050: PPUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 30
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 30
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: PPUSH
52079: CALL_OW 72
52083: ST_TO_ADDR
52084: GO 52272
52086: LD_INT 3
52088: DOUBLE
52089: EQUAL
52090: IFTRUE 52094
52092: GO 52140
52094: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52095: LD_ADDR_VAR 0 8
52099: PUSH
52100: LD_VAR 0 2
52104: PPUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 30
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 30
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: PPUSH
52133: CALL_OW 72
52137: ST_TO_ADDR
52138: GO 52272
52140: LD_INT 4
52142: DOUBLE
52143: EQUAL
52144: IFTRUE 52148
52146: GO 52205
52148: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
52149: LD_ADDR_VAR 0 8
52153: PUSH
52154: LD_VAR 0 2
52158: PPUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 30
52164: PUSH
52165: LD_INT 6
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 30
52174: PUSH
52175: LD_INT 7
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 30
52184: PUSH
52185: LD_INT 8
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: PPUSH
52198: CALL_OW 72
52202: ST_TO_ADDR
52203: GO 52272
52205: LD_INT 5
52207: DOUBLE
52208: EQUAL
52209: IFTRUE 52225
52211: LD_INT 8
52213: DOUBLE
52214: EQUAL
52215: IFTRUE 52225
52217: LD_INT 9
52219: DOUBLE
52220: EQUAL
52221: IFTRUE 52225
52223: GO 52271
52225: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
52226: LD_ADDR_VAR 0 8
52230: PUSH
52231: LD_VAR 0 2
52235: PPUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 30
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 30
52251: PUSH
52252: LD_INT 5
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: PPUSH
52264: CALL_OW 72
52268: ST_TO_ADDR
52269: GO 52272
52271: POP
// if not tmp then
52272: LD_VAR 0 8
52276: NOT
52277: IFFALSE 52281
// exit ;
52279: GO 52783
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
52281: LD_VAR 0 4
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 15
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: IN
52296: PUSH
52297: LD_EXP 108
52301: PUSH
52302: LD_VAR 0 1
52306: ARRAY
52307: AND
52308: IFFALSE 52464
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
52310: LD_ADDR_VAR 0 9
52314: PUSH
52315: LD_EXP 108
52319: PUSH
52320: LD_VAR 0 1
52324: ARRAY
52325: PUSH
52326: LD_INT 1
52328: ARRAY
52329: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
52330: LD_VAR 0 9
52334: PUSH
52335: LD_EXP 109
52339: PUSH
52340: LD_VAR 0 1
52344: ARRAY
52345: IN
52346: NOT
52347: IFFALSE 52462
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
52349: LD_ADDR_EXP 109
52353: PUSH
52354: LD_EXP 109
52358: PPUSH
52359: LD_VAR 0 1
52363: PUSH
52364: LD_EXP 109
52368: PUSH
52369: LD_VAR 0 1
52373: ARRAY
52374: PUSH
52375: LD_INT 1
52377: PLUS
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PPUSH
52383: LD_VAR 0 9
52387: PPUSH
52388: CALL 66063 0 3
52392: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
52393: LD_ADDR_EXP 108
52397: PUSH
52398: LD_EXP 108
52402: PPUSH
52403: LD_VAR 0 1
52407: PPUSH
52408: LD_EXP 108
52412: PUSH
52413: LD_VAR 0 1
52417: ARRAY
52418: PUSH
52419: LD_VAR 0 9
52423: DIFF
52424: PPUSH
52425: CALL_OW 1
52429: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
52430: LD_VAR 0 3
52434: PPUSH
52435: LD_EXP 109
52439: PUSH
52440: LD_VAR 0 1
52444: ARRAY
52445: PUSH
52446: LD_EXP 109
52450: PUSH
52451: LD_VAR 0 1
52455: ARRAY
52456: ARRAY
52457: PPUSH
52458: CALL_OW 120
// end ; exit ;
52462: GO 52783
// end ; if tmp > 1 then
52464: LD_VAR 0 8
52468: PUSH
52469: LD_INT 1
52471: GREATER
52472: IFFALSE 52576
// for i = 2 to tmp do
52474: LD_ADDR_VAR 0 6
52478: PUSH
52479: DOUBLE
52480: LD_INT 2
52482: DEC
52483: ST_TO_ADDR
52484: LD_VAR 0 8
52488: PUSH
52489: FOR_TO
52490: IFFALSE 52574
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
52492: LD_VAR 0 8
52496: PUSH
52497: LD_VAR 0 6
52501: ARRAY
52502: PPUSH
52503: CALL_OW 461
52507: PUSH
52508: LD_INT 6
52510: EQUAL
52511: IFFALSE 52572
// begin x := tmp [ i ] ;
52513: LD_ADDR_VAR 0 9
52517: PUSH
52518: LD_VAR 0 8
52522: PUSH
52523: LD_VAR 0 6
52527: ARRAY
52528: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
52529: LD_ADDR_VAR 0 8
52533: PUSH
52534: LD_VAR 0 8
52538: PPUSH
52539: LD_VAR 0 6
52543: PPUSH
52544: CALL_OW 3
52548: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
52549: LD_ADDR_VAR 0 8
52553: PUSH
52554: LD_VAR 0 8
52558: PPUSH
52559: LD_INT 1
52561: PPUSH
52562: LD_VAR 0 9
52566: PPUSH
52567: CALL_OW 2
52571: ST_TO_ADDR
// end ;
52572: GO 52489
52574: POP
52575: POP
// for i in tmp do
52576: LD_ADDR_VAR 0 6
52580: PUSH
52581: LD_VAR 0 8
52585: PUSH
52586: FOR_IN
52587: IFFALSE 52656
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
52589: LD_VAR 0 6
52593: PPUSH
52594: CALL_OW 313
52598: PUSH
52599: LD_INT 6
52601: LESS
52602: PUSH
52603: LD_VAR 0 6
52607: PPUSH
52608: CALL_OW 266
52612: PUSH
52613: LD_INT 31
52615: PUSH
52616: LD_INT 32
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: IN
52623: NOT
52624: AND
52625: PUSH
52626: LD_VAR 0 6
52630: PPUSH
52631: CALL_OW 313
52635: PUSH
52636: LD_INT 0
52638: EQUAL
52639: OR
52640: IFFALSE 52654
// begin j := i ;
52642: LD_ADDR_VAR 0 7
52646: PUSH
52647: LD_VAR 0 6
52651: ST_TO_ADDR
// break ;
52652: GO 52656
// end ; end ;
52654: GO 52586
52656: POP
52657: POP
// if j then
52658: LD_VAR 0 7
52662: IFFALSE 52680
// ComEnterUnit ( unit , j ) else
52664: LD_VAR 0 3
52668: PPUSH
52669: LD_VAR 0 7
52673: PPUSH
52674: CALL_OW 120
52678: GO 52783
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
52680: LD_ADDR_VAR 0 10
52684: PUSH
52685: LD_VAR 0 2
52689: PPUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 30
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: PPUSH
52718: CALL_OW 72
52722: ST_TO_ADDR
// if depot then
52723: LD_VAR 0 10
52727: IFFALSE 52783
// begin depot := NearestUnitToUnit ( depot , unit ) ;
52729: LD_ADDR_VAR 0 10
52733: PUSH
52734: LD_VAR 0 10
52738: PPUSH
52739: LD_VAR 0 3
52743: PPUSH
52744: CALL_OW 74
52748: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
52749: LD_VAR 0 3
52753: PPUSH
52754: LD_VAR 0 10
52758: PPUSH
52759: CALL_OW 296
52763: PUSH
52764: LD_INT 10
52766: GREATER
52767: IFFALSE 52783
// ComStandNearbyBuilding ( unit , depot ) ;
52769: LD_VAR 0 3
52773: PPUSH
52774: LD_VAR 0 10
52778: PPUSH
52779: CALL 60740 0 2
// end ; end ; end ;
52783: LD_VAR 0 5
52787: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
52788: LD_INT 0
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
// if not mc_bases then
52794: LD_EXP 99
52798: NOT
52799: IFFALSE 52803
// exit ;
52801: GO 53042
// for i = 1 to mc_bases do
52803: LD_ADDR_VAR 0 2
52807: PUSH
52808: DOUBLE
52809: LD_INT 1
52811: DEC
52812: ST_TO_ADDR
52813: LD_EXP 99
52817: PUSH
52818: FOR_TO
52819: IFFALSE 53040
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
52821: LD_ADDR_VAR 0 4
52825: PUSH
52826: LD_EXP 99
52830: PUSH
52831: LD_VAR 0 2
52835: ARRAY
52836: PPUSH
52837: LD_INT 21
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PPUSH
52847: CALL_OW 72
52851: PUSH
52852: LD_EXP 128
52856: PUSH
52857: LD_VAR 0 2
52861: ARRAY
52862: UNION
52863: ST_TO_ADDR
// if not tmp then
52864: LD_VAR 0 4
52868: NOT
52869: IFFALSE 52873
// continue ;
52871: GO 52818
// for j in tmp do
52873: LD_ADDR_VAR 0 3
52877: PUSH
52878: LD_VAR 0 4
52882: PUSH
52883: FOR_IN
52884: IFFALSE 53036
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
52886: LD_VAR 0 3
52890: PPUSH
52891: CALL_OW 110
52895: NOT
52896: PUSH
52897: LD_VAR 0 3
52901: PPUSH
52902: CALL_OW 314
52906: NOT
52907: AND
52908: PUSH
52909: LD_VAR 0 3
52913: PPUSH
52914: CALL_OW 311
52918: NOT
52919: AND
52920: PUSH
52921: LD_VAR 0 3
52925: PPUSH
52926: CALL_OW 310
52930: NOT
52931: AND
52932: PUSH
52933: LD_VAR 0 3
52937: PUSH
52938: LD_EXP 102
52942: PUSH
52943: LD_VAR 0 2
52947: ARRAY
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: IN
52953: NOT
52954: AND
52955: PUSH
52956: LD_VAR 0 3
52960: PUSH
52961: LD_EXP 102
52965: PUSH
52966: LD_VAR 0 2
52970: ARRAY
52971: PUSH
52972: LD_INT 2
52974: ARRAY
52975: IN
52976: NOT
52977: AND
52978: PUSH
52979: LD_VAR 0 3
52983: PUSH
52984: LD_EXP 111
52988: PUSH
52989: LD_VAR 0 2
52993: ARRAY
52994: IN
52995: NOT
52996: AND
52997: IFFALSE 53034
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
52999: LD_VAR 0 2
53003: PPUSH
53004: LD_EXP 99
53008: PUSH
53009: LD_VAR 0 2
53013: ARRAY
53014: PPUSH
53015: LD_VAR 0 3
53019: PPUSH
53020: LD_VAR 0 3
53024: PPUSH
53025: CALL_OW 257
53029: PPUSH
53030: CALL 51806 0 4
// end ;
53034: GO 52883
53036: POP
53037: POP
// end ;
53038: GO 52818
53040: POP
53041: POP
// end ;
53042: LD_VAR 0 1
53046: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
53047: LD_INT 0
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
// if not mc_bases [ base ] then
53055: LD_EXP 99
53059: PUSH
53060: LD_VAR 0 1
53064: ARRAY
53065: NOT
53066: IFFALSE 53070
// exit ;
53068: GO 53252
// tmp := [ ] ;
53070: LD_ADDR_VAR 0 6
53074: PUSH
53075: EMPTY
53076: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
53077: LD_ADDR_VAR 0 7
53081: PUSH
53082: LD_VAR 0 3
53086: PPUSH
53087: LD_INT 0
53089: PPUSH
53090: CALL_OW 517
53094: ST_TO_ADDR
// if not list then
53095: LD_VAR 0 7
53099: NOT
53100: IFFALSE 53104
// exit ;
53102: GO 53252
// for i = 1 to amount do
53104: LD_ADDR_VAR 0 5
53108: PUSH
53109: DOUBLE
53110: LD_INT 1
53112: DEC
53113: ST_TO_ADDR
53114: LD_VAR 0 2
53118: PUSH
53119: FOR_TO
53120: IFFALSE 53200
// begin x := rand ( 1 , list [ 1 ] ) ;
53122: LD_ADDR_VAR 0 8
53126: PUSH
53127: LD_INT 1
53129: PPUSH
53130: LD_VAR 0 7
53134: PUSH
53135: LD_INT 1
53137: ARRAY
53138: PPUSH
53139: CALL_OW 12
53143: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
53144: LD_ADDR_VAR 0 6
53148: PUSH
53149: LD_VAR 0 6
53153: PPUSH
53154: LD_VAR 0 5
53158: PPUSH
53159: LD_VAR 0 7
53163: PUSH
53164: LD_INT 1
53166: ARRAY
53167: PUSH
53168: LD_VAR 0 8
53172: ARRAY
53173: PUSH
53174: LD_VAR 0 7
53178: PUSH
53179: LD_INT 2
53181: ARRAY
53182: PUSH
53183: LD_VAR 0 8
53187: ARRAY
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PPUSH
53193: CALL_OW 1
53197: ST_TO_ADDR
// end ;
53198: GO 53119
53200: POP
53201: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
53202: LD_ADDR_EXP 112
53206: PUSH
53207: LD_EXP 112
53211: PPUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: LD_VAR 0 6
53221: PPUSH
53222: CALL_OW 1
53226: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
53227: LD_ADDR_EXP 114
53231: PUSH
53232: LD_EXP 114
53236: PPUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: LD_VAR 0 3
53246: PPUSH
53247: CALL_OW 1
53251: ST_TO_ADDR
// end ;
53252: LD_VAR 0 4
53256: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
53257: LD_INT 0
53259: PPUSH
// if not mc_bases [ base ] then
53260: LD_EXP 99
53264: PUSH
53265: LD_VAR 0 1
53269: ARRAY
53270: NOT
53271: IFFALSE 53275
// exit ;
53273: GO 53300
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
53275: LD_ADDR_EXP 104
53279: PUSH
53280: LD_EXP 104
53284: PPUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: LD_VAR 0 2
53294: PPUSH
53295: CALL_OW 1
53299: ST_TO_ADDR
// end ;
53300: LD_VAR 0 3
53304: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
53305: LD_INT 0
53307: PPUSH
// if not mc_bases [ base ] then
53308: LD_EXP 99
53312: PUSH
53313: LD_VAR 0 1
53317: ARRAY
53318: NOT
53319: IFFALSE 53323
// exit ;
53321: GO 53360
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
53323: LD_ADDR_EXP 104
53327: PUSH
53328: LD_EXP 104
53332: PPUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: LD_EXP 104
53342: PUSH
53343: LD_VAR 0 1
53347: ARRAY
53348: PUSH
53349: LD_VAR 0 2
53353: UNION
53354: PPUSH
53355: CALL_OW 1
53359: ST_TO_ADDR
// end ;
53360: LD_VAR 0 3
53364: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
53365: LD_INT 0
53367: PPUSH
// if not mc_bases [ base ] then
53368: LD_EXP 99
53372: PUSH
53373: LD_VAR 0 1
53377: ARRAY
53378: NOT
53379: IFFALSE 53383
// exit ;
53381: GO 53408
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
53383: LD_ADDR_EXP 120
53387: PUSH
53388: LD_EXP 120
53392: PPUSH
53393: LD_VAR 0 1
53397: PPUSH
53398: LD_VAR 0 2
53402: PPUSH
53403: CALL_OW 1
53407: ST_TO_ADDR
// end ;
53408: LD_VAR 0 3
53412: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
53413: LD_INT 0
53415: PPUSH
// if not mc_bases [ base ] then
53416: LD_EXP 99
53420: PUSH
53421: LD_VAR 0 1
53425: ARRAY
53426: NOT
53427: IFFALSE 53431
// exit ;
53429: GO 53468
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
53431: LD_ADDR_EXP 120
53435: PUSH
53436: LD_EXP 120
53440: PPUSH
53441: LD_VAR 0 1
53445: PPUSH
53446: LD_EXP 120
53450: PUSH
53451: LD_VAR 0 1
53455: ARRAY
53456: PUSH
53457: LD_VAR 0 2
53461: UNION
53462: PPUSH
53463: CALL_OW 1
53467: ST_TO_ADDR
// end ;
53468: LD_VAR 0 3
53472: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53473: LD_INT 0
53475: PPUSH
// if not mc_bases [ base ] then
53476: LD_EXP 99
53480: PUSH
53481: LD_VAR 0 1
53485: ARRAY
53486: NOT
53487: IFFALSE 53491
// exit ;
53489: GO 53603
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53491: LD_ADDR_EXP 121
53495: PUSH
53496: LD_EXP 121
53500: PPUSH
53501: LD_VAR 0 1
53505: PPUSH
53506: LD_VAR 0 2
53510: PPUSH
53511: CALL_OW 1
53515: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
53516: LD_ADDR_EXP 110
53520: PUSH
53521: LD_EXP 110
53525: PPUSH
53526: LD_VAR 0 1
53530: PPUSH
53531: LD_VAR 0 2
53535: PUSH
53536: LD_INT 0
53538: PLUS
53539: PPUSH
53540: CALL_OW 1
53544: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
53545: LD_ADDR_EXP 118
53549: PUSH
53550: LD_EXP 118
53554: PPUSH
53555: LD_VAR 0 1
53559: PPUSH
53560: LD_EXP 118
53564: PUSH
53565: LD_VAR 0 1
53569: ARRAY
53570: PUSH
53571: LD_EXP 121
53575: PUSH
53576: LD_VAR 0 1
53580: ARRAY
53581: PPUSH
53582: LD_INT 21
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PPUSH
53592: CALL_OW 72
53596: UNION
53597: PPUSH
53598: CALL_OW 1
53602: ST_TO_ADDR
// end ;
53603: LD_VAR 0 3
53607: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
53608: LD_INT 0
53610: PPUSH
// if not mc_bases [ base ] then
53611: LD_EXP 99
53615: PUSH
53616: LD_VAR 0 1
53620: ARRAY
53621: NOT
53622: IFFALSE 53626
// exit ;
53624: GO 53651
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
53626: LD_ADDR_EXP 110
53630: PUSH
53631: LD_EXP 110
53635: PPUSH
53636: LD_VAR 0 1
53640: PPUSH
53641: LD_VAR 0 2
53645: PPUSH
53646: CALL_OW 1
53650: ST_TO_ADDR
// end ;
53651: LD_VAR 0 3
53655: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
53656: LD_INT 0
53658: PPUSH
53659: PPUSH
53660: PPUSH
53661: PPUSH
// if not mc_bases [ base ] then
53662: LD_EXP 99
53666: PUSH
53667: LD_VAR 0 1
53671: ARRAY
53672: NOT
53673: IFFALSE 53677
// exit ;
53675: GO 53742
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
53677: LD_ADDR_EXP 119
53681: PUSH
53682: LD_EXP 119
53686: PPUSH
53687: LD_VAR 0 1
53691: PUSH
53692: LD_EXP 119
53696: PUSH
53697: LD_VAR 0 1
53701: ARRAY
53702: PUSH
53703: LD_INT 1
53705: PLUS
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PPUSH
53711: LD_VAR 0 1
53715: PUSH
53716: LD_VAR 0 2
53720: PUSH
53721: LD_VAR 0 3
53725: PUSH
53726: LD_VAR 0 4
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: PPUSH
53737: CALL 66063 0 3
53741: ST_TO_ADDR
// end ;
53742: LD_VAR 0 5
53746: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
53747: LD_INT 0
53749: PPUSH
// if not mc_bases [ base ] then
53750: LD_EXP 99
53754: PUSH
53755: LD_VAR 0 1
53759: ARRAY
53760: NOT
53761: IFFALSE 53765
// exit ;
53763: GO 53790
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
53765: LD_ADDR_EXP 136
53769: PUSH
53770: LD_EXP 136
53774: PPUSH
53775: LD_VAR 0 1
53779: PPUSH
53780: LD_VAR 0 2
53784: PPUSH
53785: CALL_OW 1
53789: ST_TO_ADDR
// end ;
53790: LD_VAR 0 3
53794: RET
// export function MC_GetMinesField ( base ) ; begin
53795: LD_INT 0
53797: PPUSH
// result := mc_mines [ base ] ;
53798: LD_ADDR_VAR 0 2
53802: PUSH
53803: LD_EXP 112
53807: PUSH
53808: LD_VAR 0 1
53812: ARRAY
53813: ST_TO_ADDR
// end ;
53814: LD_VAR 0 2
53818: RET
// export function MC_GetProduceList ( base ) ; begin
53819: LD_INT 0
53821: PPUSH
// result := mc_produce [ base ] ;
53822: LD_ADDR_VAR 0 2
53826: PUSH
53827: LD_EXP 120
53831: PUSH
53832: LD_VAR 0 1
53836: ARRAY
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 2
53842: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
// if not mc_bases then
53847: LD_EXP 99
53851: NOT
53852: IFFALSE 53856
// exit ;
53854: GO 53921
// if mc_bases [ base ] then
53856: LD_EXP 99
53860: PUSH
53861: LD_VAR 0 1
53865: ARRAY
53866: IFFALSE 53921
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
53868: LD_ADDR_VAR 0 3
53872: PUSH
53873: LD_EXP 99
53877: PUSH
53878: LD_VAR 0 1
53882: ARRAY
53883: PPUSH
53884: LD_INT 30
53886: PUSH
53887: LD_VAR 0 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PPUSH
53896: CALL_OW 72
53900: ST_TO_ADDR
// if result then
53901: LD_VAR 0 3
53905: IFFALSE 53921
// result := result [ 1 ] ;
53907: LD_ADDR_VAR 0 3
53911: PUSH
53912: LD_VAR 0 3
53916: PUSH
53917: LD_INT 1
53919: ARRAY
53920: ST_TO_ADDR
// end ; end ;
53921: LD_VAR 0 3
53925: RET
// export function MC_SetTame ( base , area ) ; begin
53926: LD_INT 0
53928: PPUSH
// if not mc_bases or not base then
53929: LD_EXP 99
53933: NOT
53934: PUSH
53935: LD_VAR 0 1
53939: NOT
53940: OR
53941: IFFALSE 53945
// exit ;
53943: GO 53970
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
53945: LD_ADDR_EXP 127
53949: PUSH
53950: LD_EXP 127
53954: PPUSH
53955: LD_VAR 0 1
53959: PPUSH
53960: LD_VAR 0 2
53964: PPUSH
53965: CALL_OW 1
53969: ST_TO_ADDR
// end ;
53970: LD_VAR 0 3
53974: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
53975: LD_INT 0
53977: PPUSH
53978: PPUSH
// if not mc_bases or not base then
53979: LD_EXP 99
53983: NOT
53984: PUSH
53985: LD_VAR 0 1
53989: NOT
53990: OR
53991: IFFALSE 53995
// exit ;
53993: GO 54097
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
53995: LD_ADDR_VAR 0 4
53999: PUSH
54000: LD_EXP 99
54004: PUSH
54005: LD_VAR 0 1
54009: ARRAY
54010: PPUSH
54011: LD_INT 30
54013: PUSH
54014: LD_VAR 0 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PPUSH
54023: CALL_OW 72
54027: ST_TO_ADDR
// if not tmp then
54028: LD_VAR 0 4
54032: NOT
54033: IFFALSE 54037
// exit ;
54035: GO 54097
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
54037: LD_ADDR_EXP 131
54041: PUSH
54042: LD_EXP 131
54046: PPUSH
54047: LD_VAR 0 1
54051: PPUSH
54052: LD_EXP 131
54056: PUSH
54057: LD_VAR 0 1
54061: ARRAY
54062: PPUSH
54063: LD_EXP 131
54067: PUSH
54068: LD_VAR 0 1
54072: ARRAY
54073: PUSH
54074: LD_INT 1
54076: PLUS
54077: PPUSH
54078: LD_VAR 0 4
54082: PUSH
54083: LD_INT 1
54085: ARRAY
54086: PPUSH
54087: CALL_OW 2
54091: PPUSH
54092: CALL_OW 1
54096: ST_TO_ADDR
// end ;
54097: LD_VAR 0 3
54101: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
54102: LD_INT 0
54104: PPUSH
54105: PPUSH
// if not mc_bases or not base or not kinds then
54106: LD_EXP 99
54110: NOT
54111: PUSH
54112: LD_VAR 0 1
54116: NOT
54117: OR
54118: PUSH
54119: LD_VAR 0 2
54123: NOT
54124: OR
54125: IFFALSE 54129
// exit ;
54127: GO 54190
// for i in kinds do
54129: LD_ADDR_VAR 0 4
54133: PUSH
54134: LD_VAR 0 2
54138: PUSH
54139: FOR_IN
54140: IFFALSE 54188
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
54142: LD_ADDR_EXP 133
54146: PUSH
54147: LD_EXP 133
54151: PPUSH
54152: LD_VAR 0 1
54156: PUSH
54157: LD_EXP 133
54161: PUSH
54162: LD_VAR 0 1
54166: ARRAY
54167: PUSH
54168: LD_INT 1
54170: PLUS
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PPUSH
54176: LD_VAR 0 4
54180: PPUSH
54181: CALL 66063 0 3
54185: ST_TO_ADDR
54186: GO 54139
54188: POP
54189: POP
// end ;
54190: LD_VAR 0 3
54194: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
54195: LD_INT 0
54197: PPUSH
// if not mc_bases or not base or not areas then
54198: LD_EXP 99
54202: NOT
54203: PUSH
54204: LD_VAR 0 1
54208: NOT
54209: OR
54210: PUSH
54211: LD_VAR 0 2
54215: NOT
54216: OR
54217: IFFALSE 54221
// exit ;
54219: GO 54246
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
54221: LD_ADDR_EXP 117
54225: PUSH
54226: LD_EXP 117
54230: PPUSH
54231: LD_VAR 0 1
54235: PPUSH
54236: LD_VAR 0 2
54240: PPUSH
54241: CALL_OW 1
54245: ST_TO_ADDR
// end ;
54246: LD_VAR 0 3
54250: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
54251: LD_INT 0
54253: PPUSH
// if not mc_bases or not base or not teleports_exit then
54254: LD_EXP 99
54258: NOT
54259: PUSH
54260: LD_VAR 0 1
54264: NOT
54265: OR
54266: PUSH
54267: LD_VAR 0 2
54271: NOT
54272: OR
54273: IFFALSE 54277
// exit ;
54275: GO 54302
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
54277: LD_ADDR_EXP 134
54281: PUSH
54282: LD_EXP 134
54286: PPUSH
54287: LD_VAR 0 1
54291: PPUSH
54292: LD_VAR 0 2
54296: PPUSH
54297: CALL_OW 1
54301: ST_TO_ADDR
// end ;
54302: LD_VAR 0 3
54306: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
54311: PPUSH
// if not mc_bases or not base or not ext_list then
54312: LD_EXP 99
54316: NOT
54317: PUSH
54318: LD_VAR 0 1
54322: NOT
54323: OR
54324: PUSH
54325: LD_VAR 0 5
54329: NOT
54330: OR
54331: IFFALSE 54335
// exit ;
54333: GO 54508
// tmp := GetFacExtXYD ( x , y , d ) ;
54335: LD_ADDR_VAR 0 8
54339: PUSH
54340: LD_VAR 0 2
54344: PPUSH
54345: LD_VAR 0 3
54349: PPUSH
54350: LD_VAR 0 4
54354: PPUSH
54355: CALL 99378 0 3
54359: ST_TO_ADDR
// if not tmp then
54360: LD_VAR 0 8
54364: NOT
54365: IFFALSE 54369
// exit ;
54367: GO 54508
// for i in tmp do
54369: LD_ADDR_VAR 0 7
54373: PUSH
54374: LD_VAR 0 8
54378: PUSH
54379: FOR_IN
54380: IFFALSE 54506
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
54382: LD_ADDR_EXP 104
54386: PUSH
54387: LD_EXP 104
54391: PPUSH
54392: LD_VAR 0 1
54396: PPUSH
54397: LD_EXP 104
54401: PUSH
54402: LD_VAR 0 1
54406: ARRAY
54407: PPUSH
54408: LD_EXP 104
54412: PUSH
54413: LD_VAR 0 1
54417: ARRAY
54418: PUSH
54419: LD_INT 1
54421: PLUS
54422: PPUSH
54423: LD_VAR 0 5
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: PUSH
54432: LD_VAR 0 7
54436: PUSH
54437: LD_INT 1
54439: ARRAY
54440: PUSH
54441: LD_VAR 0 7
54445: PUSH
54446: LD_INT 2
54448: ARRAY
54449: PUSH
54450: LD_VAR 0 7
54454: PUSH
54455: LD_INT 3
54457: ARRAY
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: PPUSH
54465: CALL_OW 2
54469: PPUSH
54470: CALL_OW 1
54474: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
54475: LD_ADDR_VAR 0 5
54479: PUSH
54480: LD_VAR 0 5
54484: PPUSH
54485: LD_INT 1
54487: PPUSH
54488: CALL_OW 3
54492: ST_TO_ADDR
// if not ext_list then
54493: LD_VAR 0 5
54497: NOT
54498: IFFALSE 54504
// exit ;
54500: POP
54501: POP
54502: GO 54508
// end ;
54504: GO 54379
54506: POP
54507: POP
// end ;
54508: LD_VAR 0 6
54512: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
54513: LD_INT 0
54515: PPUSH
// if not mc_bases or not base or not weapon_list then
54516: LD_EXP 99
54520: NOT
54521: PUSH
54522: LD_VAR 0 1
54526: NOT
54527: OR
54528: PUSH
54529: LD_VAR 0 2
54533: NOT
54534: OR
54535: IFFALSE 54539
// exit ;
54537: GO 54564
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
54539: LD_ADDR_EXP 138
54543: PUSH
54544: LD_EXP 138
54548: PPUSH
54549: LD_VAR 0 1
54553: PPUSH
54554: LD_VAR 0 2
54558: PPUSH
54559: CALL_OW 1
54563: ST_TO_ADDR
// end ;
54564: LD_VAR 0 3
54568: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
54569: LD_INT 0
54571: PPUSH
// if not mc_bases or not base or not tech_list then
54572: LD_EXP 99
54576: NOT
54577: PUSH
54578: LD_VAR 0 1
54582: NOT
54583: OR
54584: PUSH
54585: LD_VAR 0 2
54589: NOT
54590: OR
54591: IFFALSE 54595
// exit ;
54593: GO 54620
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
54595: LD_ADDR_EXP 126
54599: PUSH
54600: LD_EXP 126
54604: PPUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 2
54614: PPUSH
54615: CALL_OW 1
54619: ST_TO_ADDR
// end ;
54620: LD_VAR 0 3
54624: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
54625: LD_INT 0
54627: PPUSH
// if not mc_bases or not parking_area or not base then
54628: LD_EXP 99
54632: NOT
54633: PUSH
54634: LD_VAR 0 2
54638: NOT
54639: OR
54640: PUSH
54641: LD_VAR 0 1
54645: NOT
54646: OR
54647: IFFALSE 54651
// exit ;
54649: GO 54676
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
54651: LD_ADDR_EXP 123
54655: PUSH
54656: LD_EXP 123
54660: PPUSH
54661: LD_VAR 0 1
54665: PPUSH
54666: LD_VAR 0 2
54670: PPUSH
54671: CALL_OW 1
54675: ST_TO_ADDR
// end ;
54676: LD_VAR 0 3
54680: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
54681: LD_INT 0
54683: PPUSH
// if not mc_bases or not base or not scan_area then
54684: LD_EXP 99
54688: NOT
54689: PUSH
54690: LD_VAR 0 1
54694: NOT
54695: OR
54696: PUSH
54697: LD_VAR 0 2
54701: NOT
54702: OR
54703: IFFALSE 54707
// exit ;
54705: GO 54732
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
54707: LD_ADDR_EXP 124
54711: PUSH
54712: LD_EXP 124
54716: PPUSH
54717: LD_VAR 0 1
54721: PPUSH
54722: LD_VAR 0 2
54726: PPUSH
54727: CALL_OW 1
54731: ST_TO_ADDR
// end ;
54732: LD_VAR 0 3
54736: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
54737: LD_INT 0
54739: PPUSH
54740: PPUSH
// if not mc_bases or not base then
54741: LD_EXP 99
54745: NOT
54746: PUSH
54747: LD_VAR 0 1
54751: NOT
54752: OR
54753: IFFALSE 54757
// exit ;
54755: GO 54821
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: LD_INT 11
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
54784: LD_ADDR_EXP 126
54788: PUSH
54789: LD_EXP 126
54793: PPUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: LD_EXP 126
54803: PUSH
54804: LD_VAR 0 1
54808: ARRAY
54809: PUSH
54810: LD_VAR 0 3
54814: DIFF
54815: PPUSH
54816: CALL_OW 1
54820: ST_TO_ADDR
// end ;
54821: LD_VAR 0 2
54825: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
54826: LD_INT 0
54828: PPUSH
// result := mc_vehicles [ base ] ;
54829: LD_ADDR_VAR 0 3
54833: PUSH
54834: LD_EXP 118
54838: PUSH
54839: LD_VAR 0 1
54843: ARRAY
54844: ST_TO_ADDR
// if onlyCombat then
54845: LD_VAR 0 2
54849: IFFALSE 54992
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] ] ) ;
54851: LD_ADDR_VAR 0 3
54855: PUSH
54856: LD_VAR 0 3
54860: PUSH
54861: LD_VAR 0 3
54865: PPUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 34
54871: PUSH
54872: LD_INT 12
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 34
54881: PUSH
54882: LD_INT 51
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 34
54891: PUSH
54892: LD_EXP 93
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 34
54903: PUSH
54904: LD_INT 32
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 34
54913: PUSH
54914: LD_INT 13
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 34
54923: PUSH
54924: LD_INT 52
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 34
54933: PUSH
54934: LD_INT 14
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 34
54943: PUSH
54944: LD_INT 53
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 34
54953: PUSH
54954: LD_EXP 92
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 34
54965: PUSH
54966: LD_INT 31
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: PPUSH
54986: CALL_OW 72
54990: DIFF
54991: ST_TO_ADDR
// end ; end_of_file
54992: LD_VAR 0 3
54996: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
54997: LD_INT 0
54999: PPUSH
55000: PPUSH
55001: PPUSH
// if not mc_bases or not skirmish then
55002: LD_EXP 99
55006: NOT
55007: PUSH
55008: LD_EXP 97
55012: NOT
55013: OR
55014: IFFALSE 55018
// exit ;
55016: GO 55183
// for i = 1 to mc_bases do
55018: LD_ADDR_VAR 0 4
55022: PUSH
55023: DOUBLE
55024: LD_INT 1
55026: DEC
55027: ST_TO_ADDR
55028: LD_EXP 99
55032: PUSH
55033: FOR_TO
55034: IFFALSE 55181
// begin if sci in mc_bases [ i ] then
55036: LD_VAR 0 2
55040: PUSH
55041: LD_EXP 99
55045: PUSH
55046: LD_VAR 0 4
55050: ARRAY
55051: IN
55052: IFFALSE 55179
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
55054: LD_ADDR_EXP 128
55058: PUSH
55059: LD_EXP 128
55063: PPUSH
55064: LD_VAR 0 4
55068: PUSH
55069: LD_EXP 128
55073: PUSH
55074: LD_VAR 0 4
55078: ARRAY
55079: PUSH
55080: LD_INT 1
55082: PLUS
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PPUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL 66063 0 3
55097: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
55098: LD_ADDR_VAR 0 5
55102: PUSH
55103: LD_EXP 99
55107: PUSH
55108: LD_VAR 0 4
55112: ARRAY
55113: PPUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 30
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 30
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: PPUSH
55142: CALL_OW 72
55146: PPUSH
55147: LD_VAR 0 1
55151: PPUSH
55152: CALL_OW 74
55156: ST_TO_ADDR
// if tmp then
55157: LD_VAR 0 5
55161: IFFALSE 55177
// ComStandNearbyBuilding ( ape , tmp ) ;
55163: LD_VAR 0 1
55167: PPUSH
55168: LD_VAR 0 5
55172: PPUSH
55173: CALL 60740 0 2
// break ;
55177: GO 55181
// end ; end ;
55179: GO 55033
55181: POP
55182: POP
// end ;
55183: LD_VAR 0 3
55187: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
55188: LD_INT 0
55190: PPUSH
55191: PPUSH
55192: PPUSH
// if not mc_bases or not skirmish then
55193: LD_EXP 99
55197: NOT
55198: PUSH
55199: LD_EXP 97
55203: NOT
55204: OR
55205: IFFALSE 55209
// exit ;
55207: GO 55298
// for i = 1 to mc_bases do
55209: LD_ADDR_VAR 0 4
55213: PUSH
55214: DOUBLE
55215: LD_INT 1
55217: DEC
55218: ST_TO_ADDR
55219: LD_EXP 99
55223: PUSH
55224: FOR_TO
55225: IFFALSE 55296
// begin if building in mc_busy_turret_list [ i ] then
55227: LD_VAR 0 1
55231: PUSH
55232: LD_EXP 109
55236: PUSH
55237: LD_VAR 0 4
55241: ARRAY
55242: IN
55243: IFFALSE 55294
// begin tmp := mc_busy_turret_list [ i ] diff building ;
55245: LD_ADDR_VAR 0 5
55249: PUSH
55250: LD_EXP 109
55254: PUSH
55255: LD_VAR 0 4
55259: ARRAY
55260: PUSH
55261: LD_VAR 0 1
55265: DIFF
55266: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
55267: LD_ADDR_EXP 109
55271: PUSH
55272: LD_EXP 109
55276: PPUSH
55277: LD_VAR 0 4
55281: PPUSH
55282: LD_VAR 0 5
55286: PPUSH
55287: CALL_OW 1
55291: ST_TO_ADDR
// break ;
55292: GO 55296
// end ; end ;
55294: GO 55224
55296: POP
55297: POP
// end ;
55298: LD_VAR 0 3
55302: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
55303: LD_INT 0
55305: PPUSH
55306: PPUSH
55307: PPUSH
// if not mc_bases or not skirmish then
55308: LD_EXP 99
55312: NOT
55313: PUSH
55314: LD_EXP 97
55318: NOT
55319: OR
55320: IFFALSE 55324
// exit ;
55322: GO 55523
// for i = 1 to mc_bases do
55324: LD_ADDR_VAR 0 5
55328: PUSH
55329: DOUBLE
55330: LD_INT 1
55332: DEC
55333: ST_TO_ADDR
55334: LD_EXP 99
55338: PUSH
55339: FOR_TO
55340: IFFALSE 55521
// if building in mc_bases [ i ] then
55342: LD_VAR 0 1
55346: PUSH
55347: LD_EXP 99
55351: PUSH
55352: LD_VAR 0 5
55356: ARRAY
55357: IN
55358: IFFALSE 55519
// begin tmp := mc_bases [ i ] diff building ;
55360: LD_ADDR_VAR 0 6
55364: PUSH
55365: LD_EXP 99
55369: PUSH
55370: LD_VAR 0 5
55374: ARRAY
55375: PUSH
55376: LD_VAR 0 1
55380: DIFF
55381: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55382: LD_ADDR_EXP 99
55386: PUSH
55387: LD_EXP 99
55391: PPUSH
55392: LD_VAR 0 5
55396: PPUSH
55397: LD_VAR 0 6
55401: PPUSH
55402: CALL_OW 1
55406: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
55407: LD_VAR 0 1
55411: PUSH
55412: LD_EXP 107
55416: PUSH
55417: LD_VAR 0 5
55421: ARRAY
55422: IN
55423: IFFALSE 55462
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
55425: LD_ADDR_EXP 107
55429: PUSH
55430: LD_EXP 107
55434: PPUSH
55435: LD_VAR 0 5
55439: PPUSH
55440: LD_EXP 107
55444: PUSH
55445: LD_VAR 0 5
55449: ARRAY
55450: PUSH
55451: LD_VAR 0 1
55455: DIFF
55456: PPUSH
55457: CALL_OW 1
55461: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
55462: LD_VAR 0 1
55466: PUSH
55467: LD_EXP 108
55471: PUSH
55472: LD_VAR 0 5
55476: ARRAY
55477: IN
55478: IFFALSE 55517
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
55480: LD_ADDR_EXP 108
55484: PUSH
55485: LD_EXP 108
55489: PPUSH
55490: LD_VAR 0 5
55494: PPUSH
55495: LD_EXP 108
55499: PUSH
55500: LD_VAR 0 5
55504: ARRAY
55505: PUSH
55506: LD_VAR 0 1
55510: DIFF
55511: PPUSH
55512: CALL_OW 1
55516: ST_TO_ADDR
// break ;
55517: GO 55521
// end ;
55519: GO 55339
55521: POP
55522: POP
// end ;
55523: LD_VAR 0 4
55527: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
55528: LD_INT 0
55530: PPUSH
55531: PPUSH
55532: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
55533: LD_EXP 99
55537: NOT
55538: PUSH
55539: LD_EXP 97
55543: NOT
55544: OR
55545: PUSH
55546: LD_VAR 0 3
55550: PUSH
55551: LD_EXP 125
55555: IN
55556: NOT
55557: OR
55558: IFFALSE 55562
// exit ;
55560: GO 55685
// for i = 1 to mc_vehicles do
55562: LD_ADDR_VAR 0 6
55566: PUSH
55567: DOUBLE
55568: LD_INT 1
55570: DEC
55571: ST_TO_ADDR
55572: LD_EXP 118
55576: PUSH
55577: FOR_TO
55578: IFFALSE 55683
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
55580: LD_VAR 0 2
55584: PUSH
55585: LD_EXP 118
55589: PUSH
55590: LD_VAR 0 6
55594: ARRAY
55595: IN
55596: PUSH
55597: LD_VAR 0 1
55601: PUSH
55602: LD_EXP 118
55606: PUSH
55607: LD_VAR 0 6
55611: ARRAY
55612: IN
55613: OR
55614: IFFALSE 55681
// begin tmp := mc_vehicles [ i ] diff old ;
55616: LD_ADDR_VAR 0 7
55620: PUSH
55621: LD_EXP 118
55625: PUSH
55626: LD_VAR 0 6
55630: ARRAY
55631: PUSH
55632: LD_VAR 0 2
55636: DIFF
55637: ST_TO_ADDR
// tmp := tmp diff new ;
55638: LD_ADDR_VAR 0 7
55642: PUSH
55643: LD_VAR 0 7
55647: PUSH
55648: LD_VAR 0 1
55652: DIFF
55653: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
55654: LD_ADDR_EXP 118
55658: PUSH
55659: LD_EXP 118
55663: PPUSH
55664: LD_VAR 0 6
55668: PPUSH
55669: LD_VAR 0 7
55673: PPUSH
55674: CALL_OW 1
55678: ST_TO_ADDR
// break ;
55679: GO 55683
// end ;
55681: GO 55577
55683: POP
55684: POP
// end ;
55685: LD_VAR 0 5
55689: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
55690: LD_INT 0
55692: PPUSH
55693: PPUSH
55694: PPUSH
55695: PPUSH
// if not mc_bases or not skirmish then
55696: LD_EXP 99
55700: NOT
55701: PUSH
55702: LD_EXP 97
55706: NOT
55707: OR
55708: IFFALSE 55712
// exit ;
55710: GO 56095
// side := GetSide ( vehicle ) ;
55712: LD_ADDR_VAR 0 5
55716: PUSH
55717: LD_VAR 0 1
55721: PPUSH
55722: CALL_OW 255
55726: ST_TO_ADDR
// for i = 1 to mc_bases do
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: DOUBLE
55733: LD_INT 1
55735: DEC
55736: ST_TO_ADDR
55737: LD_EXP 99
55741: PUSH
55742: FOR_TO
55743: IFFALSE 56093
// begin if factory in mc_bases [ i ] then
55745: LD_VAR 0 2
55749: PUSH
55750: LD_EXP 99
55754: PUSH
55755: LD_VAR 0 4
55759: ARRAY
55760: IN
55761: IFFALSE 56091
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
55763: LD_EXP 121
55767: PUSH
55768: LD_VAR 0 4
55772: ARRAY
55773: PUSH
55774: LD_EXP 110
55778: PUSH
55779: LD_VAR 0 4
55783: ARRAY
55784: LESS
55785: PUSH
55786: LD_VAR 0 1
55790: PPUSH
55791: CALL_OW 264
55795: PUSH
55796: LD_INT 31
55798: PUSH
55799: LD_INT 32
55801: PUSH
55802: LD_INT 51
55804: PUSH
55805: LD_EXP 93
55809: PUSH
55810: LD_INT 12
55812: PUSH
55813: LD_INT 30
55815: PUSH
55816: LD_EXP 92
55820: PUSH
55821: LD_INT 11
55823: PUSH
55824: LD_INT 53
55826: PUSH
55827: LD_INT 14
55829: PUSH
55830: LD_EXP 96
55834: PUSH
55835: LD_INT 29
55837: PUSH
55838: LD_EXP 94
55842: PUSH
55843: LD_INT 13
55845: PUSH
55846: LD_INT 52
55848: PUSH
55849: LD_INT 48
55851: PUSH
55852: LD_INT 8
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: IN
55874: NOT
55875: AND
55876: IFFALSE 55917
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
55878: LD_ADDR_EXP 121
55882: PUSH
55883: LD_EXP 121
55887: PPUSH
55888: LD_VAR 0 4
55892: PPUSH
55893: LD_EXP 121
55897: PUSH
55898: LD_VAR 0 4
55902: ARRAY
55903: PUSH
55904: LD_VAR 0 1
55908: ADD
55909: PPUSH
55910: CALL_OW 1
55914: ST_TO_ADDR
55915: GO 55961
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
55917: LD_ADDR_EXP 118
55921: PUSH
55922: LD_EXP 118
55926: PPUSH
55927: LD_VAR 0 4
55931: PUSH
55932: LD_EXP 118
55936: PUSH
55937: LD_VAR 0 4
55941: ARRAY
55942: PUSH
55943: LD_INT 1
55945: PLUS
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PPUSH
55951: LD_VAR 0 1
55955: PPUSH
55956: CALL 66063 0 3
55960: ST_TO_ADDR
// if not mc_scan [ i ] then
55961: LD_EXP 122
55965: PUSH
55966: LD_VAR 0 4
55970: ARRAY
55971: NOT
55972: IFFALSE 56091
// begin if GetControl ( vehicle ) = control_remote then
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 263
55983: PUSH
55984: LD_INT 2
55986: EQUAL
55987: IFFALSE 56007
// repeat wait ( 0 0$1 ) ;
55989: LD_INT 35
55991: PPUSH
55992: CALL_OW 67
// until IsControledBy ( vehicle ) ;
55996: LD_VAR 0 1
56000: PPUSH
56001: CALL_OW 312
56005: IFFALSE 55989
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
56007: LD_VAR 0 1
56011: PPUSH
56012: LD_EXP 123
56016: PUSH
56017: LD_VAR 0 4
56021: ARRAY
56022: PPUSH
56023: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
56027: LD_VAR 0 1
56031: PPUSH
56032: CALL_OW 263
56036: PUSH
56037: LD_INT 1
56039: NONEQUAL
56040: IFFALSE 56044
// break ;
56042: GO 56093
// repeat wait ( 0 0$1 ) ;
56044: LD_INT 35
56046: PPUSH
56047: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
56051: LD_VAR 0 1
56055: PPUSH
56056: LD_EXP 123
56060: PUSH
56061: LD_VAR 0 4
56065: ARRAY
56066: PPUSH
56067: CALL_OW 308
56071: IFFALSE 56044
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
56073: LD_VAR 0 1
56077: PPUSH
56078: CALL_OW 311
56082: PPUSH
56083: CALL_OW 121
// exit ;
56087: POP
56088: POP
56089: GO 56095
// end ; end ; end ;
56091: GO 55742
56093: POP
56094: POP
// end ;
56095: LD_VAR 0 3
56099: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
56100: LD_INT 0
56102: PPUSH
56103: PPUSH
56104: PPUSH
56105: PPUSH
// if not mc_bases or not skirmish then
56106: LD_EXP 99
56110: NOT
56111: PUSH
56112: LD_EXP 97
56116: NOT
56117: OR
56118: IFFALSE 56122
// exit ;
56120: GO 56475
// repeat wait ( 0 0$1 ) ;
56122: LD_INT 35
56124: PPUSH
56125: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56129: LD_VAR 0 2
56133: PPUSH
56134: LD_VAR 0 3
56138: PPUSH
56139: CALL_OW 284
56143: IFFALSE 56122
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56145: LD_VAR 0 2
56149: PPUSH
56150: LD_VAR 0 3
56154: PPUSH
56155: CALL_OW 283
56159: PUSH
56160: LD_INT 4
56162: EQUAL
56163: IFFALSE 56167
// exit ;
56165: GO 56475
// for i = 1 to mc_bases do
56167: LD_ADDR_VAR 0 7
56171: PUSH
56172: DOUBLE
56173: LD_INT 1
56175: DEC
56176: ST_TO_ADDR
56177: LD_EXP 99
56181: PUSH
56182: FOR_TO
56183: IFFALSE 56473
// begin if mc_crates_area [ i ] then
56185: LD_EXP 117
56189: PUSH
56190: LD_VAR 0 7
56194: ARRAY
56195: IFFALSE 56306
// for j in mc_crates_area [ i ] do
56197: LD_ADDR_VAR 0 8
56201: PUSH
56202: LD_EXP 117
56206: PUSH
56207: LD_VAR 0 7
56211: ARRAY
56212: PUSH
56213: FOR_IN
56214: IFFALSE 56304
// if InArea ( x , y , j ) then
56216: LD_VAR 0 2
56220: PPUSH
56221: LD_VAR 0 3
56225: PPUSH
56226: LD_VAR 0 8
56230: PPUSH
56231: CALL_OW 309
56235: IFFALSE 56302
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56237: LD_ADDR_EXP 115
56241: PUSH
56242: LD_EXP 115
56246: PPUSH
56247: LD_VAR 0 7
56251: PUSH
56252: LD_EXP 115
56256: PUSH
56257: LD_VAR 0 7
56261: ARRAY
56262: PUSH
56263: LD_INT 1
56265: PLUS
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PPUSH
56271: LD_VAR 0 4
56275: PUSH
56276: LD_VAR 0 2
56280: PUSH
56281: LD_VAR 0 3
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: PPUSH
56291: CALL 66063 0 3
56295: ST_TO_ADDR
// exit ;
56296: POP
56297: POP
56298: POP
56299: POP
56300: GO 56475
// end ;
56302: GO 56213
56304: POP
56305: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56306: LD_ADDR_VAR 0 9
56310: PUSH
56311: LD_EXP 99
56315: PUSH
56316: LD_VAR 0 7
56320: ARRAY
56321: PPUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 30
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 30
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: PPUSH
56350: CALL_OW 72
56354: ST_TO_ADDR
// if not depot then
56355: LD_VAR 0 9
56359: NOT
56360: IFFALSE 56364
// continue ;
56362: GO 56182
// for j in depot do
56364: LD_ADDR_VAR 0 8
56368: PUSH
56369: LD_VAR 0 9
56373: PUSH
56374: FOR_IN
56375: IFFALSE 56469
// if GetDistUnitXY ( j , x , y ) < 30 then
56377: LD_VAR 0 8
56381: PPUSH
56382: LD_VAR 0 2
56386: PPUSH
56387: LD_VAR 0 3
56391: PPUSH
56392: CALL_OW 297
56396: PUSH
56397: LD_INT 30
56399: LESS
56400: IFFALSE 56467
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56402: LD_ADDR_EXP 115
56406: PUSH
56407: LD_EXP 115
56411: PPUSH
56412: LD_VAR 0 7
56416: PUSH
56417: LD_EXP 115
56421: PUSH
56422: LD_VAR 0 7
56426: ARRAY
56427: PUSH
56428: LD_INT 1
56430: PLUS
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PPUSH
56436: LD_VAR 0 4
56440: PUSH
56441: LD_VAR 0 2
56445: PUSH
56446: LD_VAR 0 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: PPUSH
56456: CALL 66063 0 3
56460: ST_TO_ADDR
// exit ;
56461: POP
56462: POP
56463: POP
56464: POP
56465: GO 56475
// end ;
56467: GO 56374
56469: POP
56470: POP
// end ;
56471: GO 56182
56473: POP
56474: POP
// end ;
56475: LD_VAR 0 6
56479: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
56480: LD_INT 0
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
// if not mc_bases or not skirmish then
56486: LD_EXP 99
56490: NOT
56491: PUSH
56492: LD_EXP 97
56496: NOT
56497: OR
56498: IFFALSE 56502
// exit ;
56500: GO 56779
// side := GetSide ( lab ) ;
56502: LD_ADDR_VAR 0 4
56506: PUSH
56507: LD_VAR 0 2
56511: PPUSH
56512: CALL_OW 255
56516: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
56517: LD_VAR 0 4
56521: PUSH
56522: LD_EXP 125
56526: IN
56527: NOT
56528: PUSH
56529: LD_EXP 126
56533: NOT
56534: OR
56535: PUSH
56536: LD_EXP 99
56540: NOT
56541: OR
56542: IFFALSE 56546
// exit ;
56544: GO 56779
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
56546: LD_ADDR_EXP 126
56550: PUSH
56551: LD_EXP 126
56555: PPUSH
56556: LD_VAR 0 4
56560: PPUSH
56561: LD_EXP 126
56565: PUSH
56566: LD_VAR 0 4
56570: ARRAY
56571: PUSH
56572: LD_VAR 0 1
56576: DIFF
56577: PPUSH
56578: CALL_OW 1
56582: ST_TO_ADDR
// for i = 1 to mc_bases do
56583: LD_ADDR_VAR 0 5
56587: PUSH
56588: DOUBLE
56589: LD_INT 1
56591: DEC
56592: ST_TO_ADDR
56593: LD_EXP 99
56597: PUSH
56598: FOR_TO
56599: IFFALSE 56777
// begin if lab in mc_bases [ i ] then
56601: LD_VAR 0 2
56605: PUSH
56606: LD_EXP 99
56610: PUSH
56611: LD_VAR 0 5
56615: ARRAY
56616: IN
56617: IFFALSE 56775
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
56619: LD_VAR 0 1
56623: PUSH
56624: LD_INT 11
56626: PUSH
56627: LD_INT 4
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: IN
56642: PUSH
56643: LD_EXP 129
56647: PUSH
56648: LD_VAR 0 5
56652: ARRAY
56653: AND
56654: IFFALSE 56775
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
56656: LD_ADDR_VAR 0 6
56660: PUSH
56661: LD_EXP 129
56665: PUSH
56666: LD_VAR 0 5
56670: ARRAY
56671: PUSH
56672: LD_INT 1
56674: ARRAY
56675: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56676: LD_ADDR_EXP 129
56680: PUSH
56681: LD_EXP 129
56685: PPUSH
56686: LD_VAR 0 5
56690: PPUSH
56691: EMPTY
56692: PPUSH
56693: CALL_OW 1
56697: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
56698: LD_VAR 0 6
56702: PPUSH
56703: LD_INT 0
56705: PPUSH
56706: CALL_OW 109
// ComExitBuilding ( tmp ) ;
56710: LD_VAR 0 6
56714: PPUSH
56715: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
56719: LD_ADDR_EXP 128
56723: PUSH
56724: LD_EXP 128
56728: PPUSH
56729: LD_VAR 0 5
56733: PPUSH
56734: LD_EXP 128
56738: PUSH
56739: LD_VAR 0 5
56743: ARRAY
56744: PPUSH
56745: LD_INT 1
56747: PPUSH
56748: LD_VAR 0 6
56752: PPUSH
56753: CALL_OW 2
56757: PPUSH
56758: CALL_OW 1
56762: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
56763: LD_VAR 0 5
56767: PPUSH
56768: LD_INT 112
56770: PPUSH
56771: CALL 34535 0 2
// end ; end ; end ;
56775: GO 56598
56777: POP
56778: POP
// end ;
56779: LD_VAR 0 3
56783: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
56784: LD_INT 0
56786: PPUSH
56787: PPUSH
56788: PPUSH
56789: PPUSH
56790: PPUSH
56791: PPUSH
56792: PPUSH
56793: PPUSH
// if not mc_bases or not skirmish then
56794: LD_EXP 99
56798: NOT
56799: PUSH
56800: LD_EXP 97
56804: NOT
56805: OR
56806: IFFALSE 56810
// exit ;
56808: GO 57753
// for i = 1 to mc_bases do
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: DOUBLE
56816: LD_INT 1
56818: DEC
56819: ST_TO_ADDR
56820: LD_EXP 99
56824: PUSH
56825: FOR_TO
56826: IFFALSE 57751
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
56828: LD_VAR 0 1
56832: PUSH
56833: LD_EXP 99
56837: PUSH
56838: LD_VAR 0 3
56842: ARRAY
56843: IN
56844: PUSH
56845: LD_VAR 0 1
56849: PUSH
56850: LD_EXP 106
56854: PUSH
56855: LD_VAR 0 3
56859: ARRAY
56860: IN
56861: OR
56862: PUSH
56863: LD_VAR 0 1
56867: PUSH
56868: LD_EXP 118
56872: PUSH
56873: LD_VAR 0 3
56877: ARRAY
56878: IN
56879: OR
56880: PUSH
56881: LD_VAR 0 1
56885: PUSH
56886: LD_EXP 128
56890: PUSH
56891: LD_VAR 0 3
56895: ARRAY
56896: IN
56897: OR
56898: PUSH
56899: LD_VAR 0 1
56903: PUSH
56904: LD_EXP 129
56908: PUSH
56909: LD_VAR 0 3
56913: ARRAY
56914: IN
56915: OR
56916: IFFALSE 57749
// begin if un in mc_ape [ i ] then
56918: LD_VAR 0 1
56922: PUSH
56923: LD_EXP 128
56927: PUSH
56928: LD_VAR 0 3
56932: ARRAY
56933: IN
56934: IFFALSE 56973
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
56936: LD_ADDR_EXP 128
56940: PUSH
56941: LD_EXP 128
56945: PPUSH
56946: LD_VAR 0 3
56950: PPUSH
56951: LD_EXP 128
56955: PUSH
56956: LD_VAR 0 3
56960: ARRAY
56961: PUSH
56962: LD_VAR 0 1
56966: DIFF
56967: PPUSH
56968: CALL_OW 1
56972: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
56973: LD_VAR 0 1
56977: PUSH
56978: LD_EXP 129
56982: PUSH
56983: LD_VAR 0 3
56987: ARRAY
56988: IN
56989: IFFALSE 57013
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56991: LD_ADDR_EXP 129
56995: PUSH
56996: LD_EXP 129
57000: PPUSH
57001: LD_VAR 0 3
57005: PPUSH
57006: EMPTY
57007: PPUSH
57008: CALL_OW 1
57012: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
57013: LD_VAR 0 1
57017: PPUSH
57018: CALL_OW 247
57022: PUSH
57023: LD_INT 2
57025: EQUAL
57026: PUSH
57027: LD_VAR 0 1
57031: PPUSH
57032: CALL_OW 110
57036: PUSH
57037: LD_INT 20
57039: EQUAL
57040: AND
57041: IFFALSE 57144
// begin fac := MC_GetBuilding ( i , b_factory ) ;
57043: LD_ADDR_VAR 0 8
57047: PUSH
57048: LD_VAR 0 3
57052: PPUSH
57053: LD_INT 3
57055: PPUSH
57056: CALL 53843 0 2
57060: ST_TO_ADDR
// if fac then
57061: LD_VAR 0 8
57065: IFFALSE 57144
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
57067: LD_ADDR_VAR 0 9
57071: PUSH
57072: LD_VAR 0 8
57076: PPUSH
57077: LD_VAR 0 1
57081: PPUSH
57082: CALL_OW 265
57086: PPUSH
57087: LD_VAR 0 1
57091: PPUSH
57092: CALL_OW 262
57096: PPUSH
57097: LD_VAR 0 1
57101: PPUSH
57102: CALL_OW 263
57106: PPUSH
57107: LD_VAR 0 1
57111: PPUSH
57112: CALL_OW 264
57116: PPUSH
57117: CALL 63663 0 5
57121: ST_TO_ADDR
// if components then
57122: LD_VAR 0 9
57126: IFFALSE 57142
// MC_InsertProduceList ( i , components ) ;
57128: LD_VAR 0 3
57132: PPUSH
57133: LD_VAR 0 9
57137: PPUSH
57138: CALL 53413 0 2
// break ;
57142: GO 57751
// end ; end ; if GetType ( un ) = unit_building then
57144: LD_VAR 0 1
57148: PPUSH
57149: CALL_OW 247
57153: PUSH
57154: LD_INT 3
57156: EQUAL
57157: IFFALSE 57472
// begin btype := GetBType ( un ) ;
57159: LD_ADDR_VAR 0 5
57163: PUSH
57164: LD_VAR 0 1
57168: PPUSH
57169: CALL_OW 266
57173: ST_TO_ADDR
// if btype = b_warehouse then
57174: LD_VAR 0 5
57178: PUSH
57179: LD_INT 1
57181: EQUAL
57182: IFFALSE 57200
// begin btype := b_depot ;
57184: LD_ADDR_VAR 0 5
57188: PUSH
57189: LD_INT 0
57191: ST_TO_ADDR
// pos := 1 ;
57192: LD_ADDR_VAR 0 6
57196: PUSH
57197: LD_INT 1
57199: ST_TO_ADDR
// end ; if btype = b_factory then
57200: LD_VAR 0 5
57204: PUSH
57205: LD_INT 3
57207: EQUAL
57208: IFFALSE 57226
// begin btype := b_workshop ;
57210: LD_ADDR_VAR 0 5
57214: PUSH
57215: LD_INT 2
57217: ST_TO_ADDR
// pos := 1 ;
57218: LD_ADDR_VAR 0 6
57222: PUSH
57223: LD_INT 1
57225: ST_TO_ADDR
// end ; if btype = b_barracks then
57226: LD_VAR 0 5
57230: PUSH
57231: LD_INT 5
57233: EQUAL
57234: IFFALSE 57244
// btype := b_armoury ;
57236: LD_ADDR_VAR 0 5
57240: PUSH
57241: LD_INT 4
57243: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
57244: LD_VAR 0 5
57248: PUSH
57249: LD_INT 7
57251: PUSH
57252: LD_INT 8
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: IN
57259: IFFALSE 57269
// btype := b_lab ;
57261: LD_ADDR_VAR 0 5
57265: PUSH
57266: LD_INT 6
57268: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
57269: LD_ADDR_EXP 104
57273: PUSH
57274: LD_EXP 104
57278: PPUSH
57279: LD_VAR 0 3
57283: PUSH
57284: LD_EXP 104
57288: PUSH
57289: LD_VAR 0 3
57293: ARRAY
57294: PUSH
57295: LD_INT 1
57297: PLUS
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PPUSH
57303: LD_VAR 0 5
57307: PUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 250
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 251
57327: PUSH
57328: LD_VAR 0 1
57332: PPUSH
57333: CALL_OW 254
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: PPUSH
57344: CALL 66063 0 3
57348: ST_TO_ADDR
// if pos = 1 then
57349: LD_VAR 0 6
57353: PUSH
57354: LD_INT 1
57356: EQUAL
57357: IFFALSE 57472
// begin tmp := mc_build_list [ i ] ;
57359: LD_ADDR_VAR 0 7
57363: PUSH
57364: LD_EXP 104
57368: PUSH
57369: LD_VAR 0 3
57373: ARRAY
57374: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57375: LD_VAR 0 7
57379: PPUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 30
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 30
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: LIST
57407: PPUSH
57408: CALL_OW 72
57412: IFFALSE 57422
// pos := 2 ;
57414: LD_ADDR_VAR 0 6
57418: PUSH
57419: LD_INT 2
57421: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
57422: LD_ADDR_VAR 0 7
57426: PUSH
57427: LD_VAR 0 7
57431: PPUSH
57432: LD_VAR 0 6
57436: PPUSH
57437: LD_VAR 0 7
57441: PPUSH
57442: CALL 66389 0 3
57446: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
57447: LD_ADDR_EXP 104
57451: PUSH
57452: LD_EXP 104
57456: PPUSH
57457: LD_VAR 0 3
57461: PPUSH
57462: LD_VAR 0 7
57466: PPUSH
57467: CALL_OW 1
57471: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
57472: LD_VAR 0 1
57476: PUSH
57477: LD_EXP 99
57481: PUSH
57482: LD_VAR 0 3
57486: ARRAY
57487: IN
57488: IFFALSE 57527
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
57490: LD_ADDR_EXP 99
57494: PUSH
57495: LD_EXP 99
57499: PPUSH
57500: LD_VAR 0 3
57504: PPUSH
57505: LD_EXP 99
57509: PUSH
57510: LD_VAR 0 3
57514: ARRAY
57515: PUSH
57516: LD_VAR 0 1
57520: DIFF
57521: PPUSH
57522: CALL_OW 1
57526: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
57527: LD_VAR 0 1
57531: PUSH
57532: LD_EXP 106
57536: PUSH
57537: LD_VAR 0 3
57541: ARRAY
57542: IN
57543: IFFALSE 57582
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
57545: LD_ADDR_EXP 106
57549: PUSH
57550: LD_EXP 106
57554: PPUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: LD_EXP 106
57564: PUSH
57565: LD_VAR 0 3
57569: ARRAY
57570: PUSH
57571: LD_VAR 0 1
57575: DIFF
57576: PPUSH
57577: CALL_OW 1
57581: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
57582: LD_VAR 0 1
57586: PUSH
57587: LD_EXP 118
57591: PUSH
57592: LD_VAR 0 3
57596: ARRAY
57597: IN
57598: IFFALSE 57637
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
57600: LD_ADDR_EXP 118
57604: PUSH
57605: LD_EXP 118
57609: PPUSH
57610: LD_VAR 0 3
57614: PPUSH
57615: LD_EXP 118
57619: PUSH
57620: LD_VAR 0 3
57624: ARRAY
57625: PUSH
57626: LD_VAR 0 1
57630: DIFF
57631: PPUSH
57632: CALL_OW 1
57636: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
57637: LD_VAR 0 1
57641: PUSH
57642: LD_EXP 108
57646: PUSH
57647: LD_VAR 0 3
57651: ARRAY
57652: IN
57653: IFFALSE 57692
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
57655: LD_ADDR_EXP 108
57659: PUSH
57660: LD_EXP 108
57664: PPUSH
57665: LD_VAR 0 3
57669: PPUSH
57670: LD_EXP 108
57674: PUSH
57675: LD_VAR 0 3
57679: ARRAY
57680: PUSH
57681: LD_VAR 0 1
57685: DIFF
57686: PPUSH
57687: CALL_OW 1
57691: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
57692: LD_VAR 0 1
57696: PUSH
57697: LD_EXP 107
57701: PUSH
57702: LD_VAR 0 3
57706: ARRAY
57707: IN
57708: IFFALSE 57747
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
57710: LD_ADDR_EXP 107
57714: PUSH
57715: LD_EXP 107
57719: PPUSH
57720: LD_VAR 0 3
57724: PPUSH
57725: LD_EXP 107
57729: PUSH
57730: LD_VAR 0 3
57734: ARRAY
57735: PUSH
57736: LD_VAR 0 1
57740: DIFF
57741: PPUSH
57742: CALL_OW 1
57746: ST_TO_ADDR
// end ; break ;
57747: GO 57751
// end ;
57749: GO 56825
57751: POP
57752: POP
// end ;
57753: LD_VAR 0 2
57757: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
57758: LD_INT 0
57760: PPUSH
57761: PPUSH
57762: PPUSH
// if not mc_bases or not skirmish then
57763: LD_EXP 99
57767: NOT
57768: PUSH
57769: LD_EXP 97
57773: NOT
57774: OR
57775: IFFALSE 57779
// exit ;
57777: GO 57994
// for i = 1 to mc_bases do
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: DOUBLE
57785: LD_INT 1
57787: DEC
57788: ST_TO_ADDR
57789: LD_EXP 99
57793: PUSH
57794: FOR_TO
57795: IFFALSE 57992
// begin if building in mc_construct_list [ i ] then
57797: LD_VAR 0 1
57801: PUSH
57802: LD_EXP 106
57806: PUSH
57807: LD_VAR 0 3
57811: ARRAY
57812: IN
57813: IFFALSE 57990
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
57815: LD_ADDR_EXP 106
57819: PUSH
57820: LD_EXP 106
57824: PPUSH
57825: LD_VAR 0 3
57829: PPUSH
57830: LD_EXP 106
57834: PUSH
57835: LD_VAR 0 3
57839: ARRAY
57840: PUSH
57841: LD_VAR 0 1
57845: DIFF
57846: PPUSH
57847: CALL_OW 1
57851: ST_TO_ADDR
// if building in mc_lab [ i ] then
57852: LD_VAR 0 1
57856: PUSH
57857: LD_EXP 132
57861: PUSH
57862: LD_VAR 0 3
57866: ARRAY
57867: IN
57868: IFFALSE 57923
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
57870: LD_ADDR_EXP 133
57874: PUSH
57875: LD_EXP 133
57879: PPUSH
57880: LD_VAR 0 3
57884: PPUSH
57885: LD_EXP 133
57889: PUSH
57890: LD_VAR 0 3
57894: ARRAY
57895: PPUSH
57896: LD_INT 1
57898: PPUSH
57899: LD_EXP 133
57903: PUSH
57904: LD_VAR 0 3
57908: ARRAY
57909: PPUSH
57910: LD_INT 0
57912: PPUSH
57913: CALL 65481 0 4
57917: PPUSH
57918: CALL_OW 1
57922: ST_TO_ADDR
// if not building in mc_bases [ i ] then
57923: LD_VAR 0 1
57927: PUSH
57928: LD_EXP 99
57932: PUSH
57933: LD_VAR 0 3
57937: ARRAY
57938: IN
57939: NOT
57940: IFFALSE 57986
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
57942: LD_ADDR_EXP 99
57946: PUSH
57947: LD_EXP 99
57951: PPUSH
57952: LD_VAR 0 3
57956: PUSH
57957: LD_EXP 99
57961: PUSH
57962: LD_VAR 0 3
57966: ARRAY
57967: PUSH
57968: LD_INT 1
57970: PLUS
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PPUSH
57976: LD_VAR 0 1
57980: PPUSH
57981: CALL 66063 0 3
57985: ST_TO_ADDR
// exit ;
57986: POP
57987: POP
57988: GO 57994
// end ; end ;
57990: GO 57794
57992: POP
57993: POP
// end ;
57994: LD_VAR 0 2
57998: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
57999: LD_INT 0
58001: PPUSH
58002: PPUSH
58003: PPUSH
58004: PPUSH
58005: PPUSH
58006: PPUSH
58007: PPUSH
// if not mc_bases or not skirmish then
58008: LD_EXP 99
58012: NOT
58013: PUSH
58014: LD_EXP 97
58018: NOT
58019: OR
58020: IFFALSE 58024
// exit ;
58022: GO 58685
// for i = 1 to mc_bases do
58024: LD_ADDR_VAR 0 3
58028: PUSH
58029: DOUBLE
58030: LD_INT 1
58032: DEC
58033: ST_TO_ADDR
58034: LD_EXP 99
58038: PUSH
58039: FOR_TO
58040: IFFALSE 58683
// begin if building in mc_construct_list [ i ] then
58042: LD_VAR 0 1
58046: PUSH
58047: LD_EXP 106
58051: PUSH
58052: LD_VAR 0 3
58056: ARRAY
58057: IN
58058: IFFALSE 58681
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
58060: LD_ADDR_EXP 106
58064: PUSH
58065: LD_EXP 106
58069: PPUSH
58070: LD_VAR 0 3
58074: PPUSH
58075: LD_EXP 106
58079: PUSH
58080: LD_VAR 0 3
58084: ARRAY
58085: PUSH
58086: LD_VAR 0 1
58090: DIFF
58091: PPUSH
58092: CALL_OW 1
58096: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
58097: LD_ADDR_EXP 99
58101: PUSH
58102: LD_EXP 99
58106: PPUSH
58107: LD_VAR 0 3
58111: PUSH
58112: LD_EXP 99
58116: PUSH
58117: LD_VAR 0 3
58121: ARRAY
58122: PUSH
58123: LD_INT 1
58125: PLUS
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PPUSH
58131: LD_VAR 0 1
58135: PPUSH
58136: CALL 66063 0 3
58140: ST_TO_ADDR
// btype := GetBType ( building ) ;
58141: LD_ADDR_VAR 0 5
58145: PUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: CALL_OW 266
58155: ST_TO_ADDR
// side := GetSide ( building ) ;
58156: LD_ADDR_VAR 0 8
58160: PUSH
58161: LD_VAR 0 1
58165: PPUSH
58166: CALL_OW 255
58170: ST_TO_ADDR
// if btype = b_lab then
58171: LD_VAR 0 5
58175: PUSH
58176: LD_INT 6
58178: EQUAL
58179: IFFALSE 58229
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
58181: LD_ADDR_EXP 132
58185: PUSH
58186: LD_EXP 132
58190: PPUSH
58191: LD_VAR 0 3
58195: PUSH
58196: LD_EXP 132
58200: PUSH
58201: LD_VAR 0 3
58205: ARRAY
58206: PUSH
58207: LD_INT 1
58209: PLUS
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PPUSH
58215: LD_VAR 0 1
58219: PPUSH
58220: CALL 66063 0 3
58224: ST_TO_ADDR
// exit ;
58225: POP
58226: POP
58227: GO 58685
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
58229: LD_VAR 0 5
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 4
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: IN
58248: IFFALSE 58372
// begin if btype = b_armoury then
58250: LD_VAR 0 5
58254: PUSH
58255: LD_INT 4
58257: EQUAL
58258: IFFALSE 58268
// btype := b_barracks ;
58260: LD_ADDR_VAR 0 5
58264: PUSH
58265: LD_INT 5
58267: ST_TO_ADDR
// if btype = b_depot then
58268: LD_VAR 0 5
58272: PUSH
58273: LD_INT 0
58275: EQUAL
58276: IFFALSE 58286
// btype := b_warehouse ;
58278: LD_ADDR_VAR 0 5
58282: PUSH
58283: LD_INT 1
58285: ST_TO_ADDR
// if btype = b_workshop then
58286: LD_VAR 0 5
58290: PUSH
58291: LD_INT 2
58293: EQUAL
58294: IFFALSE 58304
// btype := b_factory ;
58296: LD_ADDR_VAR 0 5
58300: PUSH
58301: LD_INT 3
58303: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
58304: LD_VAR 0 5
58308: PPUSH
58309: LD_VAR 0 8
58313: PPUSH
58314: CALL_OW 323
58318: PUSH
58319: LD_INT 1
58321: EQUAL
58322: IFFALSE 58368
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
58324: LD_ADDR_EXP 131
58328: PUSH
58329: LD_EXP 131
58333: PPUSH
58334: LD_VAR 0 3
58338: PUSH
58339: LD_EXP 131
58343: PUSH
58344: LD_VAR 0 3
58348: ARRAY
58349: PUSH
58350: LD_INT 1
58352: PLUS
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PPUSH
58358: LD_VAR 0 1
58362: PPUSH
58363: CALL 66063 0 3
58367: ST_TO_ADDR
// exit ;
58368: POP
58369: POP
58370: GO 58685
// end ; if btype in [ b_bunker , b_turret ] then
58372: LD_VAR 0 5
58376: PUSH
58377: LD_INT 32
58379: PUSH
58380: LD_INT 33
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: IN
58387: IFFALSE 58677
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
58389: LD_ADDR_EXP 107
58393: PUSH
58394: LD_EXP 107
58398: PPUSH
58399: LD_VAR 0 3
58403: PUSH
58404: LD_EXP 107
58408: PUSH
58409: LD_VAR 0 3
58413: ARRAY
58414: PUSH
58415: LD_INT 1
58417: PLUS
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PPUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: CALL 66063 0 3
58432: ST_TO_ADDR
// if btype = b_bunker then
58433: LD_VAR 0 5
58437: PUSH
58438: LD_INT 32
58440: EQUAL
58441: IFFALSE 58677
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
58443: LD_ADDR_EXP 108
58447: PUSH
58448: LD_EXP 108
58452: PPUSH
58453: LD_VAR 0 3
58457: PUSH
58458: LD_EXP 108
58462: PUSH
58463: LD_VAR 0 3
58467: ARRAY
58468: PUSH
58469: LD_INT 1
58471: PLUS
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PPUSH
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL 66063 0 3
58486: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
58487: LD_ADDR_VAR 0 6
58491: PUSH
58492: LD_EXP 99
58496: PUSH
58497: LD_VAR 0 3
58501: ARRAY
58502: PPUSH
58503: LD_INT 25
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: LD_INT 54
58518: PUSH
58519: EMPTY
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PPUSH
58530: CALL_OW 72
58534: ST_TO_ADDR
// if tmp then
58535: LD_VAR 0 6
58539: IFFALSE 58545
// exit ;
58541: POP
58542: POP
58543: GO 58685
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58545: LD_ADDR_VAR 0 6
58549: PUSH
58550: LD_EXP 99
58554: PUSH
58555: LD_VAR 0 3
58559: ARRAY
58560: PPUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 30
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 30
58576: PUSH
58577: LD_INT 5
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: PPUSH
58589: CALL_OW 72
58593: ST_TO_ADDR
// if not tmp then
58594: LD_VAR 0 6
58598: NOT
58599: IFFALSE 58605
// exit ;
58601: POP
58602: POP
58603: GO 58685
// for j in tmp do
58605: LD_ADDR_VAR 0 4
58609: PUSH
58610: LD_VAR 0 6
58614: PUSH
58615: FOR_IN
58616: IFFALSE 58675
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
58618: LD_ADDR_VAR 0 7
58622: PUSH
58623: LD_VAR 0 4
58627: PPUSH
58628: CALL_OW 313
58632: PPUSH
58633: LD_INT 25
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PPUSH
58643: CALL_OW 72
58647: ST_TO_ADDR
// if units then
58648: LD_VAR 0 7
58652: IFFALSE 58673
// begin ComExitBuilding ( units [ 1 ] ) ;
58654: LD_VAR 0 7
58658: PUSH
58659: LD_INT 1
58661: ARRAY
58662: PPUSH
58663: CALL_OW 122
// exit ;
58667: POP
58668: POP
58669: POP
58670: POP
58671: GO 58685
// end ; end ;
58673: GO 58615
58675: POP
58676: POP
// end ; end ; exit ;
58677: POP
58678: POP
58679: GO 58685
// end ; end ;
58681: GO 58039
58683: POP
58684: POP
// end ;
58685: LD_VAR 0 2
58689: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
58690: LD_INT 0
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
58698: PPUSH
// if not mc_bases or not skirmish then
58699: LD_EXP 99
58703: NOT
58704: PUSH
58705: LD_EXP 97
58709: NOT
58710: OR
58711: IFFALSE 58715
// exit ;
58713: GO 58946
// btype := GetBType ( building ) ;
58715: LD_ADDR_VAR 0 6
58719: PUSH
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL_OW 266
58729: ST_TO_ADDR
// x := GetX ( building ) ;
58730: LD_ADDR_VAR 0 7
58734: PUSH
58735: LD_VAR 0 1
58739: PPUSH
58740: CALL_OW 250
58744: ST_TO_ADDR
// y := GetY ( building ) ;
58745: LD_ADDR_VAR 0 8
58749: PUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: CALL_OW 251
58759: ST_TO_ADDR
// d := GetDir ( building ) ;
58760: LD_ADDR_VAR 0 9
58764: PUSH
58765: LD_VAR 0 1
58769: PPUSH
58770: CALL_OW 254
58774: ST_TO_ADDR
// for i = 1 to mc_bases do
58775: LD_ADDR_VAR 0 4
58779: PUSH
58780: DOUBLE
58781: LD_INT 1
58783: DEC
58784: ST_TO_ADDR
58785: LD_EXP 99
58789: PUSH
58790: FOR_TO
58791: IFFALSE 58944
// begin if not mc_build_list [ i ] then
58793: LD_EXP 104
58797: PUSH
58798: LD_VAR 0 4
58802: ARRAY
58803: NOT
58804: IFFALSE 58808
// continue ;
58806: GO 58790
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
58808: LD_VAR 0 6
58812: PUSH
58813: LD_VAR 0 7
58817: PUSH
58818: LD_VAR 0 8
58822: PUSH
58823: LD_VAR 0 9
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: PPUSH
58834: LD_EXP 104
58838: PUSH
58839: LD_VAR 0 4
58843: ARRAY
58844: PUSH
58845: LD_INT 1
58847: ARRAY
58848: PPUSH
58849: CALL 72232 0 2
58853: IFFALSE 58942
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
58855: LD_ADDR_EXP 104
58859: PUSH
58860: LD_EXP 104
58864: PPUSH
58865: LD_VAR 0 4
58869: PPUSH
58870: LD_EXP 104
58874: PUSH
58875: LD_VAR 0 4
58879: ARRAY
58880: PPUSH
58881: LD_INT 1
58883: PPUSH
58884: CALL_OW 3
58888: PPUSH
58889: CALL_OW 1
58893: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
58894: LD_ADDR_EXP 106
58898: PUSH
58899: LD_EXP 106
58903: PPUSH
58904: LD_VAR 0 4
58908: PUSH
58909: LD_EXP 106
58913: PUSH
58914: LD_VAR 0 4
58918: ARRAY
58919: PUSH
58920: LD_INT 1
58922: PLUS
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PPUSH
58928: LD_VAR 0 1
58932: PPUSH
58933: CALL 66063 0 3
58937: ST_TO_ADDR
// exit ;
58938: POP
58939: POP
58940: GO 58946
// end ; end ;
58942: GO 58790
58944: POP
58945: POP
// end ;
58946: LD_VAR 0 3
58950: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
58951: LD_INT 0
58953: PPUSH
58954: PPUSH
58955: PPUSH
// if not mc_bases or not skirmish then
58956: LD_EXP 99
58960: NOT
58961: PUSH
58962: LD_EXP 97
58966: NOT
58967: OR
58968: IFFALSE 58972
// exit ;
58970: GO 59162
// for i = 1 to mc_bases do
58972: LD_ADDR_VAR 0 4
58976: PUSH
58977: DOUBLE
58978: LD_INT 1
58980: DEC
58981: ST_TO_ADDR
58982: LD_EXP 99
58986: PUSH
58987: FOR_TO
58988: IFFALSE 59075
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
58990: LD_VAR 0 1
58994: PUSH
58995: LD_EXP 107
58999: PUSH
59000: LD_VAR 0 4
59004: ARRAY
59005: IN
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_EXP 108
59016: PUSH
59017: LD_VAR 0 4
59021: ARRAY
59022: IN
59023: NOT
59024: AND
59025: IFFALSE 59073
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
59027: LD_ADDR_EXP 108
59031: PUSH
59032: LD_EXP 108
59036: PPUSH
59037: LD_VAR 0 4
59041: PUSH
59042: LD_EXP 108
59046: PUSH
59047: LD_VAR 0 4
59051: ARRAY
59052: PUSH
59053: LD_INT 1
59055: PLUS
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PPUSH
59061: LD_VAR 0 1
59065: PPUSH
59066: CALL 66063 0 3
59070: ST_TO_ADDR
// break ;
59071: GO 59075
// end ; end ;
59073: GO 58987
59075: POP
59076: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 257
59086: PUSH
59087: LD_EXP 125
59091: IN
59092: PUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 266
59102: PUSH
59103: LD_INT 5
59105: EQUAL
59106: AND
59107: PUSH
59108: LD_VAR 0 2
59112: PPUSH
59113: CALL_OW 110
59117: PUSH
59118: LD_INT 18
59120: NONEQUAL
59121: AND
59122: IFFALSE 59162
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
59124: LD_VAR 0 2
59128: PPUSH
59129: CALL_OW 257
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: LD_INT 8
59139: PUSH
59140: LD_INT 9
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: IN
59148: IFFALSE 59162
// SetClass ( unit , 1 ) ;
59150: LD_VAR 0 2
59154: PPUSH
59155: LD_INT 1
59157: PPUSH
59158: CALL_OW 336
// end ;
59162: LD_VAR 0 3
59166: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
59167: LD_INT 0
59169: PPUSH
59170: PPUSH
// if not mc_bases or not skirmish then
59171: LD_EXP 99
59175: NOT
59176: PUSH
59177: LD_EXP 97
59181: NOT
59182: OR
59183: IFFALSE 59187
// exit ;
59185: GO 59303
// if GetLives ( abandoned_vehicle ) > 250 then
59187: LD_VAR 0 2
59191: PPUSH
59192: CALL_OW 256
59196: PUSH
59197: LD_INT 250
59199: GREATER
59200: IFFALSE 59204
// exit ;
59202: GO 59303
// for i = 1 to mc_bases do
59204: LD_ADDR_VAR 0 6
59208: PUSH
59209: DOUBLE
59210: LD_INT 1
59212: DEC
59213: ST_TO_ADDR
59214: LD_EXP 99
59218: PUSH
59219: FOR_TO
59220: IFFALSE 59301
// begin if driver in mc_bases [ i ] then
59222: LD_VAR 0 1
59226: PUSH
59227: LD_EXP 99
59231: PUSH
59232: LD_VAR 0 6
59236: ARRAY
59237: IN
59238: IFFALSE 59299
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_EXP 99
59249: PUSH
59250: LD_VAR 0 6
59254: ARRAY
59255: PPUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 30
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 30
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: PPUSH
59284: CALL_OW 72
59288: PUSH
59289: LD_INT 1
59291: ARRAY
59292: PPUSH
59293: CALL_OW 112
// break ;
59297: GO 59301
// end ; end ;
59299: GO 59219
59301: POP
59302: POP
// end ; end_of_file
59303: LD_VAR 0 5
59307: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
59308: LD_INT 0
59310: PPUSH
59311: PPUSH
// if exist_mode then
59312: LD_VAR 0 2
59316: IFFALSE 59341
// unit := CreateCharacter ( prefix & ident ) else
59318: LD_ADDR_VAR 0 5
59322: PUSH
59323: LD_VAR 0 3
59327: PUSH
59328: LD_VAR 0 1
59332: STR
59333: PPUSH
59334: CALL_OW 34
59338: ST_TO_ADDR
59339: GO 59356
// unit := NewCharacter ( ident ) ;
59341: LD_ADDR_VAR 0 5
59345: PUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 25
59355: ST_TO_ADDR
// result := unit ;
59356: LD_ADDR_VAR 0 4
59360: PUSH
59361: LD_VAR 0 5
59365: ST_TO_ADDR
// end ;
59366: LD_VAR 0 4
59370: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
// if not side or not nation then
59375: LD_VAR 0 1
59379: NOT
59380: PUSH
59381: LD_VAR 0 2
59385: NOT
59386: OR
59387: IFFALSE 59391
// exit ;
59389: GO 60027
// case nation of nation_american :
59391: LD_VAR 0 2
59395: PUSH
59396: LD_INT 1
59398: DOUBLE
59399: EQUAL
59400: IFTRUE 59404
59402: GO 59574
59404: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
59405: LD_ADDR_VAR 0 4
59409: PUSH
59410: LD_INT 35
59412: PUSH
59413: LD_INT 45
59415: PUSH
59416: LD_INT 46
59418: PUSH
59419: LD_INT 47
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 6
59430: PUSH
59431: LD_INT 15
59433: PUSH
59434: LD_INT 16
59436: PUSH
59437: LD_INT 7
59439: PUSH
59440: LD_INT 12
59442: PUSH
59443: LD_INT 13
59445: PUSH
59446: LD_INT 10
59448: PUSH
59449: LD_INT 14
59451: PUSH
59452: LD_INT 20
59454: PUSH
59455: LD_INT 21
59457: PUSH
59458: LD_INT 22
59460: PUSH
59461: LD_INT 25
59463: PUSH
59464: LD_INT 32
59466: PUSH
59467: LD_INT 27
59469: PUSH
59470: LD_INT 36
59472: PUSH
59473: LD_INT 69
59475: PUSH
59476: LD_INT 39
59478: PUSH
59479: LD_INT 34
59481: PUSH
59482: LD_INT 40
59484: PUSH
59485: LD_INT 48
59487: PUSH
59488: LD_INT 49
59490: PUSH
59491: LD_INT 50
59493: PUSH
59494: LD_INT 51
59496: PUSH
59497: LD_INT 52
59499: PUSH
59500: LD_INT 53
59502: PUSH
59503: LD_INT 54
59505: PUSH
59506: LD_INT 55
59508: PUSH
59509: LD_INT 56
59511: PUSH
59512: LD_INT 57
59514: PUSH
59515: LD_INT 58
59517: PUSH
59518: LD_INT 59
59520: PUSH
59521: LD_INT 60
59523: PUSH
59524: LD_INT 61
59526: PUSH
59527: LD_INT 62
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
59572: GO 59951
59574: LD_INT 2
59576: DOUBLE
59577: EQUAL
59578: IFTRUE 59582
59580: GO 59760
59582: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
59583: LD_ADDR_VAR 0 4
59587: PUSH
59588: LD_INT 35
59590: PUSH
59591: LD_INT 45
59593: PUSH
59594: LD_INT 46
59596: PUSH
59597: LD_INT 47
59599: PUSH
59600: LD_INT 70
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 11
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: LD_INT 5
59617: PUSH
59618: LD_INT 6
59620: PUSH
59621: LD_INT 15
59623: PUSH
59624: LD_INT 18
59626: PUSH
59627: LD_INT 7
59629: PUSH
59630: LD_INT 17
59632: PUSH
59633: LD_INT 8
59635: PUSH
59636: LD_INT 20
59638: PUSH
59639: LD_INT 21
59641: PUSH
59642: LD_INT 22
59644: PUSH
59645: LD_INT 72
59647: PUSH
59648: LD_INT 26
59650: PUSH
59651: LD_INT 69
59653: PUSH
59654: LD_INT 39
59656: PUSH
59657: LD_INT 40
59659: PUSH
59660: LD_INT 41
59662: PUSH
59663: LD_INT 42
59665: PUSH
59666: LD_INT 43
59668: PUSH
59669: LD_INT 48
59671: PUSH
59672: LD_INT 49
59674: PUSH
59675: LD_INT 50
59677: PUSH
59678: LD_INT 51
59680: PUSH
59681: LD_INT 52
59683: PUSH
59684: LD_INT 53
59686: PUSH
59687: LD_INT 54
59689: PUSH
59690: LD_INT 55
59692: PUSH
59693: LD_INT 56
59695: PUSH
59696: LD_INT 60
59698: PUSH
59699: LD_INT 61
59701: PUSH
59702: LD_INT 62
59704: PUSH
59705: LD_INT 66
59707: PUSH
59708: LD_INT 67
59710: PUSH
59711: LD_INT 68
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
59758: GO 59951
59760: LD_INT 3
59762: DOUBLE
59763: EQUAL
59764: IFTRUE 59768
59766: GO 59950
59768: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
59769: LD_ADDR_VAR 0 4
59773: PUSH
59774: LD_INT 46
59776: PUSH
59777: LD_INT 47
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: LD_INT 11
59788: PUSH
59789: LD_INT 9
59791: PUSH
59792: LD_INT 20
59794: PUSH
59795: LD_INT 19
59797: PUSH
59798: LD_INT 21
59800: PUSH
59801: LD_INT 24
59803: PUSH
59804: LD_INT 22
59806: PUSH
59807: LD_INT 25
59809: PUSH
59810: LD_INT 28
59812: PUSH
59813: LD_INT 29
59815: PUSH
59816: LD_INT 30
59818: PUSH
59819: LD_INT 31
59821: PUSH
59822: LD_INT 37
59824: PUSH
59825: LD_INT 38
59827: PUSH
59828: LD_INT 32
59830: PUSH
59831: LD_INT 27
59833: PUSH
59834: LD_INT 33
59836: PUSH
59837: LD_INT 69
59839: PUSH
59840: LD_INT 39
59842: PUSH
59843: LD_INT 34
59845: PUSH
59846: LD_INT 40
59848: PUSH
59849: LD_INT 71
59851: PUSH
59852: LD_INT 23
59854: PUSH
59855: LD_INT 44
59857: PUSH
59858: LD_INT 48
59860: PUSH
59861: LD_INT 49
59863: PUSH
59864: LD_INT 50
59866: PUSH
59867: LD_INT 51
59869: PUSH
59870: LD_INT 52
59872: PUSH
59873: LD_INT 53
59875: PUSH
59876: LD_INT 54
59878: PUSH
59879: LD_INT 55
59881: PUSH
59882: LD_INT 56
59884: PUSH
59885: LD_INT 57
59887: PUSH
59888: LD_INT 58
59890: PUSH
59891: LD_INT 59
59893: PUSH
59894: LD_INT 63
59896: PUSH
59897: LD_INT 64
59899: PUSH
59900: LD_INT 65
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: ST_TO_ADDR
59948: GO 59951
59950: POP
// if state > - 1 and state < 3 then
59951: LD_VAR 0 3
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: GREATER
59960: PUSH
59961: LD_VAR 0 3
59965: PUSH
59966: LD_INT 3
59968: LESS
59969: AND
59970: IFFALSE 60027
// for i in result do
59972: LD_ADDR_VAR 0 5
59976: PUSH
59977: LD_VAR 0 4
59981: PUSH
59982: FOR_IN
59983: IFFALSE 60025
// if GetTech ( i , side ) <> state then
59985: LD_VAR 0 5
59989: PPUSH
59990: LD_VAR 0 1
59994: PPUSH
59995: CALL_OW 321
59999: PUSH
60000: LD_VAR 0 3
60004: NONEQUAL
60005: IFFALSE 60023
// result := result diff i ;
60007: LD_ADDR_VAR 0 4
60011: PUSH
60012: LD_VAR 0 4
60016: PUSH
60017: LD_VAR 0 5
60021: DIFF
60022: ST_TO_ADDR
60023: GO 59982
60025: POP
60026: POP
// end ;
60027: LD_VAR 0 4
60031: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
60032: LD_INT 0
60034: PPUSH
60035: PPUSH
60036: PPUSH
// result := true ;
60037: LD_ADDR_VAR 0 3
60041: PUSH
60042: LD_INT 1
60044: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
60045: LD_ADDR_VAR 0 5
60049: PUSH
60050: LD_VAR 0 2
60054: PPUSH
60055: CALL_OW 480
60059: ST_TO_ADDR
// if not tmp then
60060: LD_VAR 0 5
60064: NOT
60065: IFFALSE 60069
// exit ;
60067: GO 60118
// for i in tmp do
60069: LD_ADDR_VAR 0 4
60073: PUSH
60074: LD_VAR 0 5
60078: PUSH
60079: FOR_IN
60080: IFFALSE 60116
// if GetTech ( i , side ) <> state_researched then
60082: LD_VAR 0 4
60086: PPUSH
60087: LD_VAR 0 1
60091: PPUSH
60092: CALL_OW 321
60096: PUSH
60097: LD_INT 2
60099: NONEQUAL
60100: IFFALSE 60114
// begin result := false ;
60102: LD_ADDR_VAR 0 3
60106: PUSH
60107: LD_INT 0
60109: ST_TO_ADDR
// exit ;
60110: POP
60111: POP
60112: GO 60118
// end ;
60114: GO 60079
60116: POP
60117: POP
// end ;
60118: LD_VAR 0 3
60122: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
60130: PPUSH
60131: PPUSH
60132: PPUSH
60133: PPUSH
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
60138: LD_VAR 0 1
60142: NOT
60143: PUSH
60144: LD_VAR 0 1
60148: PPUSH
60149: CALL_OW 257
60153: PUSH
60154: LD_INT 9
60156: NONEQUAL
60157: OR
60158: IFFALSE 60162
// exit ;
60160: GO 60735
// side := GetSide ( unit ) ;
60162: LD_ADDR_VAR 0 9
60166: PUSH
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 255
60176: ST_TO_ADDR
// tech_space := tech_spacanom ;
60177: LD_ADDR_VAR 0 12
60181: PUSH
60182: LD_INT 29
60184: ST_TO_ADDR
// tech_time := tech_taurad ;
60185: LD_ADDR_VAR 0 13
60189: PUSH
60190: LD_INT 28
60192: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
60193: LD_ADDR_VAR 0 11
60197: PUSH
60198: LD_VAR 0 1
60202: PPUSH
60203: CALL_OW 310
60207: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
60208: LD_VAR 0 11
60212: PPUSH
60213: CALL_OW 247
60217: PUSH
60218: LD_INT 2
60220: EQUAL
60221: IFFALSE 60225
// exit ;
60223: GO 60735
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60225: LD_ADDR_VAR 0 8
60229: PUSH
60230: LD_INT 81
60232: PUSH
60233: LD_VAR 0 9
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 21
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PPUSH
60263: CALL_OW 69
60267: ST_TO_ADDR
// if not tmp then
60268: LD_VAR 0 8
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 60735
// if in_unit then
60277: LD_VAR 0 11
60281: IFFALSE 60305
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
60283: LD_ADDR_VAR 0 10
60287: PUSH
60288: LD_VAR 0 8
60292: PPUSH
60293: LD_VAR 0 11
60297: PPUSH
60298: CALL_OW 74
60302: ST_TO_ADDR
60303: GO 60325
// enemy := NearestUnitToUnit ( tmp , unit ) ;
60305: LD_ADDR_VAR 0 10
60309: PUSH
60310: LD_VAR 0 8
60314: PPUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: CALL_OW 74
60324: ST_TO_ADDR
// if not enemy then
60325: LD_VAR 0 10
60329: NOT
60330: IFFALSE 60334
// exit ;
60332: GO 60735
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
60334: LD_VAR 0 11
60338: PUSH
60339: LD_VAR 0 11
60343: PPUSH
60344: LD_VAR 0 10
60348: PPUSH
60349: CALL_OW 296
60353: PUSH
60354: LD_INT 13
60356: GREATER
60357: AND
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: LD_VAR 0 10
60368: PPUSH
60369: CALL_OW 296
60373: PUSH
60374: LD_INT 12
60376: GREATER
60377: OR
60378: IFFALSE 60382
// exit ;
60380: GO 60735
// missile := [ 1 ] ;
60382: LD_ADDR_VAR 0 14
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: ST_TO_ADDR
// if Researched ( side , tech_space ) then
60393: LD_VAR 0 9
60397: PPUSH
60398: LD_VAR 0 12
60402: PPUSH
60403: CALL_OW 325
60407: IFFALSE 60436
// missile := Insert ( missile , missile + 1 , 2 ) ;
60409: LD_ADDR_VAR 0 14
60413: PUSH
60414: LD_VAR 0 14
60418: PPUSH
60419: LD_VAR 0 14
60423: PUSH
60424: LD_INT 1
60426: PLUS
60427: PPUSH
60428: LD_INT 2
60430: PPUSH
60431: CALL_OW 2
60435: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
60436: LD_VAR 0 9
60440: PPUSH
60441: LD_VAR 0 13
60445: PPUSH
60446: CALL_OW 325
60450: PUSH
60451: LD_VAR 0 10
60455: PPUSH
60456: CALL_OW 255
60460: PPUSH
60461: LD_VAR 0 13
60465: PPUSH
60466: CALL_OW 325
60470: NOT
60471: AND
60472: IFFALSE 60501
// missile := Insert ( missile , missile + 1 , 3 ) ;
60474: LD_ADDR_VAR 0 14
60478: PUSH
60479: LD_VAR 0 14
60483: PPUSH
60484: LD_VAR 0 14
60488: PUSH
60489: LD_INT 1
60491: PLUS
60492: PPUSH
60493: LD_INT 3
60495: PPUSH
60496: CALL_OW 2
60500: ST_TO_ADDR
// if missile < 2 then
60501: LD_VAR 0 14
60505: PUSH
60506: LD_INT 2
60508: LESS
60509: IFFALSE 60513
// exit ;
60511: GO 60735
// x := GetX ( enemy ) ;
60513: LD_ADDR_VAR 0 4
60517: PUSH
60518: LD_VAR 0 10
60522: PPUSH
60523: CALL_OW 250
60527: ST_TO_ADDR
// y := GetY ( enemy ) ;
60528: LD_ADDR_VAR 0 5
60532: PUSH
60533: LD_VAR 0 10
60537: PPUSH
60538: CALL_OW 251
60542: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
60543: LD_ADDR_VAR 0 6
60547: PUSH
60548: LD_VAR 0 4
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PPUSH
60557: LD_INT 1
60559: PPUSH
60560: CALL_OW 12
60564: PLUS
60565: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
60566: LD_ADDR_VAR 0 7
60570: PUSH
60571: LD_VAR 0 5
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PPUSH
60580: LD_INT 1
60582: PPUSH
60583: CALL_OW 12
60587: PLUS
60588: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60589: LD_VAR 0 6
60593: PPUSH
60594: LD_VAR 0 7
60598: PPUSH
60599: CALL_OW 488
60603: NOT
60604: IFFALSE 60626
// begin _x := x ;
60606: LD_ADDR_VAR 0 6
60610: PUSH
60611: LD_VAR 0 4
60615: ST_TO_ADDR
// _y := y ;
60616: LD_ADDR_VAR 0 7
60620: PUSH
60621: LD_VAR 0 5
60625: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
60626: LD_ADDR_VAR 0 3
60630: PUSH
60631: LD_INT 1
60633: PPUSH
60634: LD_VAR 0 14
60638: PPUSH
60639: CALL_OW 12
60643: ST_TO_ADDR
// case i of 1 :
60644: LD_VAR 0 3
60648: PUSH
60649: LD_INT 1
60651: DOUBLE
60652: EQUAL
60653: IFTRUE 60657
60655: GO 60674
60657: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
60658: LD_VAR 0 1
60662: PPUSH
60663: LD_VAR 0 10
60667: PPUSH
60668: CALL_OW 115
60672: GO 60735
60674: LD_INT 2
60676: DOUBLE
60677: EQUAL
60678: IFTRUE 60682
60680: GO 60704
60682: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
60683: LD_VAR 0 1
60687: PPUSH
60688: LD_VAR 0 6
60692: PPUSH
60693: LD_VAR 0 7
60697: PPUSH
60698: CALL_OW 153
60702: GO 60735
60704: LD_INT 3
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60712
60710: GO 60734
60712: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
60713: LD_VAR 0 1
60717: PPUSH
60718: LD_VAR 0 6
60722: PPUSH
60723: LD_VAR 0 7
60727: PPUSH
60728: CALL_OW 154
60732: GO 60735
60734: POP
// end ;
60735: LD_VAR 0 2
60739: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
60740: LD_INT 0
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
60747: PPUSH
// if not unit or not building then
60748: LD_VAR 0 1
60752: NOT
60753: PUSH
60754: LD_VAR 0 2
60758: NOT
60759: OR
60760: IFFALSE 60764
// exit ;
60762: GO 60922
// x := GetX ( building ) ;
60764: LD_ADDR_VAR 0 5
60768: PUSH
60769: LD_VAR 0 2
60773: PPUSH
60774: CALL_OW 250
60778: ST_TO_ADDR
// y := GetY ( building ) ;
60779: LD_ADDR_VAR 0 6
60783: PUSH
60784: LD_VAR 0 2
60788: PPUSH
60789: CALL_OW 251
60793: ST_TO_ADDR
// for i = 0 to 5 do
60794: LD_ADDR_VAR 0 4
60798: PUSH
60799: DOUBLE
60800: LD_INT 0
60802: DEC
60803: ST_TO_ADDR
60804: LD_INT 5
60806: PUSH
60807: FOR_TO
60808: IFFALSE 60920
// begin _x := ShiftX ( x , i , 3 ) ;
60810: LD_ADDR_VAR 0 7
60814: PUSH
60815: LD_VAR 0 5
60819: PPUSH
60820: LD_VAR 0 4
60824: PPUSH
60825: LD_INT 3
60827: PPUSH
60828: CALL_OW 272
60832: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
60833: LD_ADDR_VAR 0 8
60837: PUSH
60838: LD_VAR 0 6
60842: PPUSH
60843: LD_VAR 0 4
60847: PPUSH
60848: LD_INT 3
60850: PPUSH
60851: CALL_OW 273
60855: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60856: LD_VAR 0 7
60860: PPUSH
60861: LD_VAR 0 8
60865: PPUSH
60866: CALL_OW 488
60870: NOT
60871: IFFALSE 60875
// continue ;
60873: GO 60807
// if HexInfo ( _x , _y ) = 0 then
60875: LD_VAR 0 7
60879: PPUSH
60880: LD_VAR 0 8
60884: PPUSH
60885: CALL_OW 428
60889: PUSH
60890: LD_INT 0
60892: EQUAL
60893: IFFALSE 60918
// begin ComMoveXY ( unit , _x , _y ) ;
60895: LD_VAR 0 1
60899: PPUSH
60900: LD_VAR 0 7
60904: PPUSH
60905: LD_VAR 0 8
60909: PPUSH
60910: CALL_OW 111
// exit ;
60914: POP
60915: POP
60916: GO 60922
// end ; end ;
60918: GO 60807
60920: POP
60921: POP
// end ;
60922: LD_VAR 0 3
60926: RET
// export function ScanBase ( side , base_area ) ; begin
60927: LD_INT 0
60929: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
60930: LD_ADDR_VAR 0 3
60934: PUSH
60935: LD_VAR 0 2
60939: PPUSH
60940: LD_INT 81
60942: PUSH
60943: LD_VAR 0 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PPUSH
60952: CALL_OW 70
60956: ST_TO_ADDR
// end ;
60957: LD_VAR 0 3
60961: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
60969: LD_VAR 0 1
60973: NOT
60974: PUSH
60975: LD_EXP 99
60979: PUSH
60980: LD_VAR 0 1
60984: ARRAY
60985: NOT
60986: OR
60987: PUSH
60988: LD_VAR 0 2
60992: NOT
60993: OR
60994: PUSH
60995: LD_VAR 0 3
60999: NOT
61000: OR
61001: IFFALSE 61005
// exit ;
61003: GO 61455
// side := mc_sides [ base ] ;
61005: LD_ADDR_VAR 0 6
61009: PUSH
61010: LD_EXP 125
61014: PUSH
61015: LD_VAR 0 1
61019: ARRAY
61020: ST_TO_ADDR
// if not side then
61021: LD_VAR 0 6
61025: NOT
61026: IFFALSE 61030
// exit ;
61028: GO 61455
// for i in solds do
61030: LD_ADDR_VAR 0 7
61034: PUSH
61035: LD_VAR 0 2
61039: PUSH
61040: FOR_IN
61041: IFFALSE 61102
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
61043: LD_VAR 0 7
61047: PPUSH
61048: CALL_OW 310
61052: PPUSH
61053: CALL_OW 266
61057: PUSH
61058: LD_INT 32
61060: PUSH
61061: LD_INT 31
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: IN
61068: IFFALSE 61088
// solds := solds diff i else
61070: LD_ADDR_VAR 0 2
61074: PUSH
61075: LD_VAR 0 2
61079: PUSH
61080: LD_VAR 0 7
61084: DIFF
61085: ST_TO_ADDR
61086: GO 61100
// SetTag ( i , 18 ) ;
61088: LD_VAR 0 7
61092: PPUSH
61093: LD_INT 18
61095: PPUSH
61096: CALL_OW 109
61100: GO 61040
61102: POP
61103: POP
// if not solds then
61104: LD_VAR 0 2
61108: NOT
61109: IFFALSE 61113
// exit ;
61111: GO 61455
// repeat wait ( 0 0$1 ) ;
61113: LD_INT 35
61115: PPUSH
61116: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
61120: LD_ADDR_VAR 0 5
61124: PUSH
61125: LD_VAR 0 6
61129: PPUSH
61130: LD_VAR 0 3
61134: PPUSH
61135: CALL 60927 0 2
61139: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
61140: LD_VAR 0 5
61144: NOT
61145: PUSH
61146: LD_VAR 0 5
61150: PUSH
61151: LD_INT 3
61153: GREATER
61154: OR
61155: PUSH
61156: LD_EXP 121
61160: PUSH
61161: LD_VAR 0 1
61165: ARRAY
61166: OR
61167: IFFALSE 61208
// begin for i in solds do
61169: LD_ADDR_VAR 0 7
61173: PUSH
61174: LD_VAR 0 2
61178: PUSH
61179: FOR_IN
61180: IFFALSE 61204
// if HasTask ( i ) then
61182: LD_VAR 0 7
61186: PPUSH
61187: CALL_OW 314
61191: IFFALSE 61202
// ComStop ( i ) ;
61193: LD_VAR 0 7
61197: PPUSH
61198: CALL_OW 141
61202: GO 61179
61204: POP
61205: POP
// break ;
61206: GO 61443
// end ; for i in solds do
61208: LD_ADDR_VAR 0 7
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: FOR_IN
61219: IFFALSE 61435
// begin if IsInUnit ( i ) then
61221: LD_VAR 0 7
61225: PPUSH
61226: CALL_OW 310
61230: IFFALSE 61241
// ComExitBuilding ( i ) ;
61232: LD_VAR 0 7
61236: PPUSH
61237: CALL_OW 122
// if GetLives ( i ) > 333 then
61241: LD_VAR 0 7
61245: PPUSH
61246: CALL_OW 256
61250: PUSH
61251: LD_INT 333
61253: GREATER
61254: IFFALSE 61282
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61256: LD_VAR 0 7
61260: PPUSH
61261: LD_VAR 0 5
61265: PPUSH
61266: LD_VAR 0 7
61270: PPUSH
61271: CALL_OW 74
61275: PPUSH
61276: CALL_OW 115
61280: GO 61433
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
61282: LD_ADDR_VAR 0 8
61286: PUSH
61287: LD_EXP 99
61291: PUSH
61292: LD_VAR 0 1
61296: ARRAY
61297: PPUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 30
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 30
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 30
61323: PUSH
61324: LD_INT 6
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: PPUSH
61337: CALL_OW 72
61341: PPUSH
61342: LD_VAR 0 7
61346: PPUSH
61347: CALL_OW 74
61351: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
61352: LD_VAR 0 7
61356: PPUSH
61357: LD_VAR 0 8
61361: PPUSH
61362: CALL_OW 250
61366: PPUSH
61367: LD_INT 3
61369: PPUSH
61370: LD_INT 5
61372: PPUSH
61373: CALL_OW 272
61377: PPUSH
61378: LD_VAR 0 8
61382: PPUSH
61383: CALL_OW 251
61387: PPUSH
61388: LD_INT 3
61390: PPUSH
61391: LD_INT 5
61393: PPUSH
61394: CALL_OW 273
61398: PPUSH
61399: CALL_OW 111
// SetTag ( i , 0 ) ;
61403: LD_VAR 0 7
61407: PPUSH
61408: LD_INT 0
61410: PPUSH
61411: CALL_OW 109
// solds := solds diff i ;
61415: LD_ADDR_VAR 0 2
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_VAR 0 7
61429: DIFF
61430: ST_TO_ADDR
// continue ;
61431: GO 61218
// end ; end ;
61433: GO 61218
61435: POP
61436: POP
// until solds ;
61437: LD_VAR 0 2
61441: IFFALSE 61113
// MC_Reset ( base , 18 ) ;
61443: LD_VAR 0 1
61447: PPUSH
61448: LD_INT 18
61450: PPUSH
61451: CALL 34535 0 2
// end ;
61455: LD_VAR 0 4
61459: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
61460: LD_INT 0
61462: PPUSH
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
61469: PPUSH
61470: PPUSH
61471: PPUSH
61472: PPUSH
61473: PPUSH
61474: PPUSH
61475: PPUSH
61476: PPUSH
61477: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
61478: LD_ADDR_VAR 0 12
61482: PUSH
61483: LD_EXP 99
61487: PUSH
61488: LD_VAR 0 1
61492: ARRAY
61493: PPUSH
61494: LD_INT 25
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PPUSH
61504: CALL_OW 72
61508: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61509: LD_ADDR_VAR 0 8
61513: PUSH
61514: LD_EXP 99
61518: PUSH
61519: LD_VAR 0 1
61523: ARRAY
61524: PPUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 25
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 25
61540: PUSH
61541: LD_INT 5
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 25
61550: PUSH
61551: LD_INT 8
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 25
61560: PUSH
61561: LD_INT 9
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: PPUSH
61575: CALL_OW 72
61579: ST_TO_ADDR
// if not defenders and not solds then
61580: LD_VAR 0 2
61584: NOT
61585: PUSH
61586: LD_VAR 0 8
61590: NOT
61591: AND
61592: IFFALSE 61596
// exit ;
61594: GO 62962
// depot_under_attack := false ;
61596: LD_ADDR_VAR 0 16
61600: PUSH
61601: LD_INT 0
61603: ST_TO_ADDR
// sold_defenders := [ ] ;
61604: LD_ADDR_VAR 0 17
61608: PUSH
61609: EMPTY
61610: ST_TO_ADDR
// if mechs then
61611: LD_VAR 0 12
61615: IFFALSE 61744
// for i in defenders do
61617: LD_ADDR_VAR 0 5
61621: PUSH
61622: LD_VAR 0 2
61626: PUSH
61627: FOR_IN
61628: IFFALSE 61742
// begin SetTag ( i , 20 ) ;
61630: LD_VAR 0 5
61634: PPUSH
61635: LD_INT 20
61637: PPUSH
61638: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
61642: LD_VAR 0 5
61646: PPUSH
61647: CALL_OW 263
61651: PUSH
61652: LD_INT 1
61654: EQUAL
61655: PUSH
61656: LD_VAR 0 5
61660: PPUSH
61661: CALL_OW 311
61665: NOT
61666: AND
61667: PUSH
61668: LD_VAR 0 12
61672: AND
61673: IFFALSE 61740
// begin un := mechs [ 1 ] ;
61675: LD_ADDR_VAR 0 10
61679: PUSH
61680: LD_VAR 0 12
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: ST_TO_ADDR
// ComExitBuilding ( un ) ;
61689: LD_VAR 0 10
61693: PPUSH
61694: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
61698: LD_VAR 0 10
61702: PPUSH
61703: LD_VAR 0 5
61707: PPUSH
61708: CALL_OW 180
// SetTag ( un , 19 ) ;
61712: LD_VAR 0 10
61716: PPUSH
61717: LD_INT 19
61719: PPUSH
61720: CALL_OW 109
// mechs := mechs diff un ;
61724: LD_ADDR_VAR 0 12
61728: PUSH
61729: LD_VAR 0 12
61733: PUSH
61734: LD_VAR 0 10
61738: DIFF
61739: ST_TO_ADDR
// end ; end ;
61740: GO 61627
61742: POP
61743: POP
// if solds then
61744: LD_VAR 0 8
61748: IFFALSE 61807
// for i in solds do
61750: LD_ADDR_VAR 0 5
61754: PUSH
61755: LD_VAR 0 8
61759: PUSH
61760: FOR_IN
61761: IFFALSE 61805
// if not GetTag ( i ) then
61763: LD_VAR 0 5
61767: PPUSH
61768: CALL_OW 110
61772: NOT
61773: IFFALSE 61803
// begin defenders := defenders union i ;
61775: LD_ADDR_VAR 0 2
61779: PUSH
61780: LD_VAR 0 2
61784: PUSH
61785: LD_VAR 0 5
61789: UNION
61790: ST_TO_ADDR
// SetTag ( i , 18 ) ;
61791: LD_VAR 0 5
61795: PPUSH
61796: LD_INT 18
61798: PPUSH
61799: CALL_OW 109
// end ;
61803: GO 61760
61805: POP
61806: POP
// repeat wait ( 0 0$1 ) ;
61807: LD_INT 35
61809: PPUSH
61810: CALL_OW 67
// enemy := mc_scan [ base ] ;
61814: LD_ADDR_VAR 0 3
61818: PUSH
61819: LD_EXP 122
61823: PUSH
61824: LD_VAR 0 1
61828: ARRAY
61829: ST_TO_ADDR
// for i in defenders do
61830: LD_ADDR_VAR 0 5
61834: PUSH
61835: LD_VAR 0 2
61839: PUSH
61840: FOR_IN
61841: IFFALSE 62526
// begin e := NearestUnitToUnit ( enemy , i ) ;
61843: LD_ADDR_VAR 0 13
61847: PUSH
61848: LD_VAR 0 3
61852: PPUSH
61853: LD_VAR 0 5
61857: PPUSH
61858: CALL_OW 74
61862: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
61863: LD_ADDR_VAR 0 16
61867: PUSH
61868: LD_EXP 99
61872: PUSH
61873: LD_VAR 0 1
61877: ARRAY
61878: PPUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 30
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 30
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: PPUSH
61907: CALL_OW 72
61911: NOT
61912: PUSH
61913: LD_EXP 99
61917: PUSH
61918: LD_VAR 0 1
61922: ARRAY
61923: PPUSH
61924: LD_INT 2
61926: PUSH
61927: LD_INT 30
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 30
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: PPUSH
61952: CALL_OW 72
61956: PPUSH
61957: CALL_OW 256
61961: PUSH
61962: LD_INT 600
61964: LESS
61965: OR
61966: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
61967: LD_VAR 0 5
61971: PPUSH
61972: CALL_OW 247
61976: PUSH
61977: LD_INT 2
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 61985
61983: GO 62232
61985: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
61986: LD_VAR 0 5
61990: PPUSH
61991: CALL_OW 256
61995: PUSH
61996: LD_INT 650
61998: GREATER
61999: PUSH
62000: LD_VAR 0 5
62004: PPUSH
62005: LD_VAR 0 13
62009: PPUSH
62010: CALL_OW 296
62014: PUSH
62015: LD_INT 40
62017: LESS
62018: AND
62019: IFFALSE 62037
// ComAttackUnit ( i , e ) else
62021: LD_VAR 0 5
62025: PPUSH
62026: LD_VAR 0 13
62030: PPUSH
62031: CALL_OW 115
62035: GO 62115
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
62037: LD_VAR 0 5
62041: PPUSH
62042: LD_VAR 0 13
62046: PPUSH
62047: CALL_OW 296
62051: PUSH
62052: LD_INT 30
62054: GREATEREQUAL
62055: PUSH
62056: LD_VAR 0 5
62060: PPUSH
62061: CALL_OW 256
62065: PUSH
62066: LD_INT 650
62068: LESSEQUAL
62069: OR
62070: PUSH
62071: LD_VAR 0 5
62075: PPUSH
62076: LD_EXP 123
62080: PUSH
62081: LD_VAR 0 1
62085: ARRAY
62086: PPUSH
62087: CALL_OW 308
62091: NOT
62092: AND
62093: IFFALSE 62115
// ComMoveToArea ( i , mc_parking [ base ] ) ;
62095: LD_VAR 0 5
62099: PPUSH
62100: LD_EXP 123
62104: PUSH
62105: LD_VAR 0 1
62109: ARRAY
62110: PPUSH
62111: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
62115: LD_VAR 0 5
62119: PPUSH
62120: CALL_OW 256
62124: PUSH
62125: LD_INT 998
62127: LESS
62128: PUSH
62129: LD_VAR 0 5
62133: PPUSH
62134: CALL_OW 263
62138: PUSH
62139: LD_INT 1
62141: EQUAL
62142: AND
62143: PUSH
62144: LD_VAR 0 5
62148: PPUSH
62149: CALL_OW 311
62153: AND
62154: PUSH
62155: LD_VAR 0 5
62159: PPUSH
62160: LD_EXP 123
62164: PUSH
62165: LD_VAR 0 1
62169: ARRAY
62170: PPUSH
62171: CALL_OW 308
62175: AND
62176: IFFALSE 62230
// begin mech := IsDrivenBy ( i ) ;
62178: LD_ADDR_VAR 0 9
62182: PUSH
62183: LD_VAR 0 5
62187: PPUSH
62188: CALL_OW 311
62192: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
62193: LD_VAR 0 9
62197: PPUSH
62198: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
62202: LD_VAR 0 9
62206: PPUSH
62207: LD_VAR 0 5
62211: PPUSH
62212: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
62216: LD_VAR 0 9
62220: PPUSH
62221: LD_VAR 0 5
62225: PPUSH
62226: CALL_OW 180
// end ; end ; unit_human :
62230: GO 62497
62232: LD_INT 1
62234: DOUBLE
62235: EQUAL
62236: IFTRUE 62240
62238: GO 62496
62240: POP
// begin b := IsInUnit ( i ) ;
62241: LD_ADDR_VAR 0 18
62245: PUSH
62246: LD_VAR 0 5
62250: PPUSH
62251: CALL_OW 310
62255: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
62256: LD_ADDR_VAR 0 19
62260: PUSH
62261: LD_VAR 0 18
62265: NOT
62266: PUSH
62267: LD_VAR 0 18
62271: PPUSH
62272: CALL_OW 266
62276: PUSH
62277: LD_INT 32
62279: PUSH
62280: LD_INT 31
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: IN
62287: OR
62288: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
62289: LD_VAR 0 16
62293: PUSH
62294: LD_VAR 0 2
62298: PPUSH
62299: LD_INT 21
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PPUSH
62309: CALL_OW 72
62313: PUSH
62314: LD_INT 1
62316: LESSEQUAL
62317: OR
62318: PUSH
62319: LD_VAR 0 19
62323: AND
62324: PUSH
62325: LD_VAR 0 5
62329: PUSH
62330: LD_VAR 0 17
62334: IN
62335: NOT
62336: AND
62337: IFFALSE 62430
// begin if b then
62339: LD_VAR 0 18
62343: IFFALSE 62392
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
62345: LD_VAR 0 18
62349: PPUSH
62350: LD_VAR 0 3
62354: PPUSH
62355: LD_VAR 0 18
62359: PPUSH
62360: CALL_OW 74
62364: PPUSH
62365: CALL_OW 296
62369: PUSH
62370: LD_INT 10
62372: LESS
62373: PUSH
62374: LD_VAR 0 18
62378: PPUSH
62379: CALL_OW 461
62383: PUSH
62384: LD_INT 7
62386: NONEQUAL
62387: AND
62388: IFFALSE 62392
// continue ;
62390: GO 61840
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
62392: LD_ADDR_VAR 0 17
62396: PUSH
62397: LD_VAR 0 17
62401: PPUSH
62402: LD_VAR 0 17
62406: PUSH
62407: LD_INT 1
62409: PLUS
62410: PPUSH
62411: LD_VAR 0 5
62415: PPUSH
62416: CALL_OW 1
62420: ST_TO_ADDR
// ComExitBuilding ( i ) ;
62421: LD_VAR 0 5
62425: PPUSH
62426: CALL_OW 122
// end ; if sold_defenders then
62430: LD_VAR 0 17
62434: IFFALSE 62494
// if i in sold_defenders then
62436: LD_VAR 0 5
62440: PUSH
62441: LD_VAR 0 17
62445: IN
62446: IFFALSE 62494
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
62448: LD_VAR 0 5
62452: PPUSH
62453: CALL_OW 314
62457: NOT
62458: PUSH
62459: LD_VAR 0 5
62463: PPUSH
62464: LD_VAR 0 13
62468: PPUSH
62469: CALL_OW 296
62473: PUSH
62474: LD_INT 30
62476: LESS
62477: AND
62478: IFFALSE 62494
// ComAttackUnit ( i , e ) ;
62480: LD_VAR 0 5
62484: PPUSH
62485: LD_VAR 0 13
62489: PPUSH
62490: CALL_OW 115
// end ; end ; end ;
62494: GO 62497
62496: POP
// if IsDead ( i ) then
62497: LD_VAR 0 5
62501: PPUSH
62502: CALL_OW 301
62506: IFFALSE 62524
// defenders := defenders diff i ;
62508: LD_ADDR_VAR 0 2
62512: PUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_VAR 0 5
62522: DIFF
62523: ST_TO_ADDR
// end ;
62524: GO 61840
62526: POP
62527: POP
// until not enemy or not defenders ;
62528: LD_VAR 0 3
62532: NOT
62533: PUSH
62534: LD_VAR 0 2
62538: NOT
62539: OR
62540: IFFALSE 61807
// MC_Reset ( base , 18 ) ;
62542: LD_VAR 0 1
62546: PPUSH
62547: LD_INT 18
62549: PPUSH
62550: CALL 34535 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_VAR 0 2
62568: PPUSH
62569: LD_INT 2
62571: PUSH
62572: LD_INT 25
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 25
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 25
62594: PUSH
62595: LD_INT 8
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 25
62604: PUSH
62605: LD_INT 9
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: PPUSH
62619: CALL_OW 72
62623: DIFF
62624: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
62625: LD_VAR 0 3
62629: NOT
62630: PUSH
62631: LD_VAR 0 2
62635: PPUSH
62636: LD_INT 21
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PPUSH
62646: CALL_OW 72
62650: AND
62651: IFFALSE 62913
// begin tmp := FilterByTag ( defenders , 19 ) ;
62653: LD_ADDR_VAR 0 11
62657: PUSH
62658: LD_VAR 0 2
62662: PPUSH
62663: LD_INT 19
62665: PPUSH
62666: CALL 99260 0 2
62670: ST_TO_ADDR
// if tmp then
62671: LD_VAR 0 11
62675: IFFALSE 62745
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
62677: LD_ADDR_VAR 0 11
62681: PUSH
62682: LD_VAR 0 11
62686: PPUSH
62687: LD_INT 25
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PPUSH
62697: CALL_OW 72
62701: ST_TO_ADDR
// if tmp then
62702: LD_VAR 0 11
62706: IFFALSE 62745
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
62708: LD_ADDR_EXP 111
62712: PUSH
62713: LD_EXP 111
62717: PPUSH
62718: LD_VAR 0 1
62722: PPUSH
62723: LD_EXP 111
62727: PUSH
62728: LD_VAR 0 1
62732: ARRAY
62733: PUSH
62734: LD_VAR 0 11
62738: UNION
62739: PPUSH
62740: CALL_OW 1
62744: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
62745: LD_VAR 0 1
62749: PPUSH
62750: LD_INT 19
62752: PPUSH
62753: CALL 34535 0 2
// repeat wait ( 0 0$1 ) ;
62757: LD_INT 35
62759: PPUSH
62760: CALL_OW 67
// for i in defenders do
62764: LD_ADDR_VAR 0 5
62768: PUSH
62769: LD_VAR 0 2
62773: PUSH
62774: FOR_IN
62775: IFFALSE 62864
// begin if not IsInArea ( i , mc_parking [ base ] ) then
62777: LD_VAR 0 5
62781: PPUSH
62782: LD_EXP 123
62786: PUSH
62787: LD_VAR 0 1
62791: ARRAY
62792: PPUSH
62793: CALL_OW 308
62797: NOT
62798: IFFALSE 62822
// ComMoveToArea ( i , mc_parking [ base ] ) else
62800: LD_VAR 0 5
62804: PPUSH
62805: LD_EXP 123
62809: PUSH
62810: LD_VAR 0 1
62814: ARRAY
62815: PPUSH
62816: CALL_OW 113
62820: GO 62862
// if GetControl ( i ) = control_manual then
62822: LD_VAR 0 5
62826: PPUSH
62827: CALL_OW 263
62831: PUSH
62832: LD_INT 1
62834: EQUAL
62835: IFFALSE 62862
// if IsDrivenBy ( i ) then
62837: LD_VAR 0 5
62841: PPUSH
62842: CALL_OW 311
62846: IFFALSE 62862
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
62848: LD_VAR 0 5
62852: PPUSH
62853: CALL_OW 311
62857: PPUSH
62858: CALL_OW 121
// end ;
62862: GO 62774
62864: POP
62865: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
62866: LD_VAR 0 2
62870: PPUSH
62871: LD_INT 95
62873: PUSH
62874: LD_EXP 123
62878: PUSH
62879: LD_VAR 0 1
62883: ARRAY
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PPUSH
62889: CALL_OW 72
62893: PUSH
62894: LD_VAR 0 2
62898: EQUAL
62899: PUSH
62900: LD_EXP 122
62904: PUSH
62905: LD_VAR 0 1
62909: ARRAY
62910: OR
62911: IFFALSE 62757
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
62913: LD_ADDR_EXP 121
62917: PUSH
62918: LD_EXP 121
62922: PPUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_EXP 121
62932: PUSH
62933: LD_VAR 0 1
62937: ARRAY
62938: PUSH
62939: LD_VAR 0 2
62943: UNION
62944: PPUSH
62945: CALL_OW 1
62949: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
62950: LD_VAR 0 1
62954: PPUSH
62955: LD_INT 20
62957: PPUSH
62958: CALL 34535 0 2
// end ;
62962: LD_VAR 0 4
62966: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
62967: LD_INT 0
62969: PPUSH
62970: PPUSH
62971: PPUSH
62972: PPUSH
// result := false ;
62973: LD_ADDR_VAR 0 2
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// side := GetSide ( unit ) ;
62981: LD_ADDR_VAR 0 3
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: CALL_OW 255
62995: ST_TO_ADDR
// nat := GetNation ( unit ) ;
62996: LD_ADDR_VAR 0 4
63000: PUSH
63001: LD_VAR 0 1
63005: PPUSH
63006: CALL_OW 248
63010: ST_TO_ADDR
// case nat of 1 :
63011: LD_VAR 0 4
63015: PUSH
63016: LD_INT 1
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63024
63022: GO 63035
63024: POP
// tech := tech_lassight ; 2 :
63025: LD_ADDR_VAR 0 5
63029: PUSH
63030: LD_INT 12
63032: ST_TO_ADDR
63033: GO 63074
63035: LD_INT 2
63037: DOUBLE
63038: EQUAL
63039: IFTRUE 63043
63041: GO 63054
63043: POP
// tech := tech_mortar ; 3 :
63044: LD_ADDR_VAR 0 5
63048: PUSH
63049: LD_INT 41
63051: ST_TO_ADDR
63052: GO 63074
63054: LD_INT 3
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63062
63060: GO 63073
63062: POP
// tech := tech_bazooka ; end ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: LD_INT 44
63070: ST_TO_ADDR
63071: GO 63074
63073: POP
// if Researched ( side , tech ) then
63074: LD_VAR 0 3
63078: PPUSH
63079: LD_VAR 0 5
63083: PPUSH
63084: CALL_OW 325
63088: IFFALSE 63115
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
63090: LD_ADDR_VAR 0 2
63094: PUSH
63095: LD_INT 5
63097: PUSH
63098: LD_INT 8
63100: PUSH
63101: LD_INT 9
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: PUSH
63109: LD_VAR 0 4
63113: ARRAY
63114: ST_TO_ADDR
// end ;
63115: LD_VAR 0 2
63119: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
63120: LD_INT 0
63122: PPUSH
63123: PPUSH
63124: PPUSH
// if not mines then
63125: LD_VAR 0 2
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
63134: LD_ADDR_VAR 0 5
63138: PUSH
63139: LD_INT 81
63141: PUSH
63142: LD_VAR 0 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 21
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PPUSH
63172: CALL_OW 69
63176: ST_TO_ADDR
// for i in mines do
63177: LD_ADDR_VAR 0 4
63181: PUSH
63182: LD_VAR 0 2
63186: PUSH
63187: FOR_IN
63188: IFFALSE 63276
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
63190: LD_VAR 0 4
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PPUSH
63199: LD_VAR 0 4
63203: PUSH
63204: LD_INT 2
63206: ARRAY
63207: PPUSH
63208: CALL_OW 458
63212: NOT
63213: IFFALSE 63217
// continue ;
63215: GO 63187
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
63217: LD_VAR 0 4
63221: PUSH
63222: LD_INT 1
63224: ARRAY
63225: PPUSH
63226: LD_VAR 0 4
63230: PUSH
63231: LD_INT 2
63233: ARRAY
63234: PPUSH
63235: CALL_OW 428
63239: PUSH
63240: LD_VAR 0 5
63244: IN
63245: IFFALSE 63274
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
63247: LD_VAR 0 4
63251: PUSH
63252: LD_INT 1
63254: ARRAY
63255: PPUSH
63256: LD_VAR 0 4
63260: PUSH
63261: LD_INT 2
63263: ARRAY
63264: PPUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 456
// end ;
63274: GO 63187
63276: POP
63277: POP
// end ;
63278: LD_VAR 0 3
63282: RET
// export function Count ( array ) ; var i ; begin
63283: LD_INT 0
63285: PPUSH
63286: PPUSH
// result := 0 ;
63287: LD_ADDR_VAR 0 2
63291: PUSH
63292: LD_INT 0
63294: ST_TO_ADDR
// for i in array do
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: LD_VAR 0 1
63304: PUSH
63305: FOR_IN
63306: IFFALSE 63330
// if i then
63308: LD_VAR 0 3
63312: IFFALSE 63328
// result := result + 1 ;
63314: LD_ADDR_VAR 0 2
63318: PUSH
63319: LD_VAR 0 2
63323: PUSH
63324: LD_INT 1
63326: PLUS
63327: ST_TO_ADDR
63328: GO 63305
63330: POP
63331: POP
// end ;
63332: LD_VAR 0 2
63336: RET
// export function IsEmpty ( building ) ; begin
63337: LD_INT 0
63339: PPUSH
// if not building then
63340: LD_VAR 0 1
63344: NOT
63345: IFFALSE 63349
// exit ;
63347: GO 63392
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
63349: LD_ADDR_VAR 0 2
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_INT 22
63361: PUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 255
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 58
63378: PUSH
63379: EMPTY
63380: LIST
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PPUSH
63386: CALL_OW 69
63390: IN
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function IsNotFull ( building ) ; begin
63397: LD_INT 0
63399: PPUSH
// if not building then
63400: LD_VAR 0 1
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63428
// result := UnitsInside ( building ) < 6 ;
63409: LD_ADDR_VAR 0 2
63413: PUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: CALL_OW 313
63423: PUSH
63424: LD_INT 6
63426: LESS
63427: ST_TO_ADDR
// end ;
63428: LD_VAR 0 2
63432: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
63433: LD_INT 0
63435: PPUSH
63436: PPUSH
63437: PPUSH
63438: PPUSH
// tmp := [ ] ;
63439: LD_ADDR_VAR 0 3
63443: PUSH
63444: EMPTY
63445: ST_TO_ADDR
// list := [ ] ;
63446: LD_ADDR_VAR 0 5
63450: PUSH
63451: EMPTY
63452: ST_TO_ADDR
// for i = 16 to 25 do
63453: LD_ADDR_VAR 0 4
63457: PUSH
63458: DOUBLE
63459: LD_INT 16
63461: DEC
63462: ST_TO_ADDR
63463: LD_INT 25
63465: PUSH
63466: FOR_TO
63467: IFFALSE 63540
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
63469: LD_ADDR_VAR 0 3
63473: PUSH
63474: LD_VAR 0 3
63478: PUSH
63479: LD_INT 22
63481: PUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: CALL_OW 255
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 91
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 6
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 30
63514: PUSH
63515: LD_VAR 0 4
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: PPUSH
63532: CALL_OW 69
63536: ADD
63537: ST_TO_ADDR
63538: GO 63466
63540: POP
63541: POP
// for i = 1 to tmp do
63542: LD_ADDR_VAR 0 4
63546: PUSH
63547: DOUBLE
63548: LD_INT 1
63550: DEC
63551: ST_TO_ADDR
63552: LD_VAR 0 3
63556: PUSH
63557: FOR_TO
63558: IFFALSE 63646
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
63560: LD_ADDR_VAR 0 5
63564: PUSH
63565: LD_VAR 0 5
63569: PUSH
63570: LD_VAR 0 3
63574: PUSH
63575: LD_VAR 0 4
63579: ARRAY
63580: PPUSH
63581: CALL_OW 266
63585: PUSH
63586: LD_VAR 0 3
63590: PUSH
63591: LD_VAR 0 4
63595: ARRAY
63596: PPUSH
63597: CALL_OW 250
63601: PUSH
63602: LD_VAR 0 3
63606: PUSH
63607: LD_VAR 0 4
63611: ARRAY
63612: PPUSH
63613: CALL_OW 251
63617: PUSH
63618: LD_VAR 0 3
63622: PUSH
63623: LD_VAR 0 4
63627: ARRAY
63628: PPUSH
63629: CALL_OW 254
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: EMPTY
63641: LIST
63642: ADD
63643: ST_TO_ADDR
63644: GO 63557
63646: POP
63647: POP
// result := list ;
63648: LD_ADDR_VAR 0 2
63652: PUSH
63653: LD_VAR 0 5
63657: ST_TO_ADDR
// end ;
63658: LD_VAR 0 2
63662: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
63663: LD_INT 0
63665: PPUSH
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
63671: PPUSH
// if not factory then
63672: LD_VAR 0 1
63676: NOT
63677: IFFALSE 63681
// exit ;
63679: GO 64206
// if control = control_apeman then
63681: LD_VAR 0 4
63685: PUSH
63686: LD_INT 5
63688: EQUAL
63689: IFFALSE 63798
// begin tmp := UnitsInside ( factory ) ;
63691: LD_ADDR_VAR 0 8
63695: PUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 313
63705: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
63706: LD_VAR 0 8
63710: PPUSH
63711: LD_INT 25
63713: PUSH
63714: LD_INT 12
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PPUSH
63721: CALL_OW 72
63725: NOT
63726: IFFALSE 63736
// control := control_manual ;
63728: LD_ADDR_VAR 0 4
63732: PUSH
63733: LD_INT 1
63735: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
63736: LD_ADDR_VAR 0 8
63740: PUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL 63433 0 1
63750: ST_TO_ADDR
// if tmp then
63751: LD_VAR 0 8
63755: IFFALSE 63798
// begin for i in tmp do
63757: LD_ADDR_VAR 0 7
63761: PUSH
63762: LD_VAR 0 8
63766: PUSH
63767: FOR_IN
63768: IFFALSE 63796
// if i [ 1 ] = b_ext_radar then
63770: LD_VAR 0 7
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: PUSH
63779: LD_INT 20
63781: EQUAL
63782: IFFALSE 63794
// begin control := control_remote ;
63784: LD_ADDR_VAR 0 4
63788: PUSH
63789: LD_INT 2
63791: ST_TO_ADDR
// break ;
63792: GO 63796
// end ;
63794: GO 63767
63796: POP
63797: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
63798: LD_VAR 0 1
63802: PPUSH
63803: LD_VAR 0 2
63807: PPUSH
63808: LD_VAR 0 3
63812: PPUSH
63813: LD_VAR 0 4
63817: PPUSH
63818: LD_VAR 0 5
63822: PPUSH
63823: CALL_OW 448
63827: IFFALSE 63862
// begin result := [ chassis , engine , control , weapon ] ;
63829: LD_ADDR_VAR 0 6
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_VAR 0 3
63843: PUSH
63844: LD_VAR 0 4
63848: PUSH
63849: LD_VAR 0 5
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// exit ;
63860: GO 64206
// end ; _chassis := AvailableChassisList ( factory ) ;
63862: LD_ADDR_VAR 0 9
63866: PUSH
63867: LD_VAR 0 1
63871: PPUSH
63872: CALL_OW 475
63876: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
63877: LD_ADDR_VAR 0 11
63881: PUSH
63882: LD_VAR 0 1
63886: PPUSH
63887: CALL_OW 476
63891: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
63892: LD_ADDR_VAR 0 12
63896: PUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: CALL_OW 477
63906: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
63907: LD_ADDR_VAR 0 10
63911: PUSH
63912: LD_VAR 0 1
63916: PPUSH
63917: CALL_OW 478
63921: ST_TO_ADDR
// if not chassis in _chassis then
63922: LD_VAR 0 2
63926: PUSH
63927: LD_VAR 0 9
63931: IN
63932: NOT
63933: IFFALSE 63959
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
63935: LD_ADDR_VAR 0 2
63939: PUSH
63940: LD_VAR 0 9
63944: PUSH
63945: LD_INT 1
63947: PPUSH
63948: LD_VAR 0 9
63952: PPUSH
63953: CALL_OW 12
63957: ARRAY
63958: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
63959: LD_VAR 0 2
63963: PPUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: CALL 64211 0 2
63973: NOT
63974: IFFALSE 64033
// repeat engine := _engine [ 1 ] ;
63976: LD_ADDR_VAR 0 3
63980: PUSH
63981: LD_VAR 0 11
63985: PUSH
63986: LD_INT 1
63988: ARRAY
63989: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
63990: LD_ADDR_VAR 0 11
63994: PUSH
63995: LD_VAR 0 11
63999: PPUSH
64000: LD_INT 1
64002: PPUSH
64003: CALL_OW 3
64007: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
64008: LD_VAR 0 2
64012: PPUSH
64013: LD_VAR 0 3
64017: PPUSH
64018: CALL 64211 0 2
64022: PUSH
64023: LD_VAR 0 11
64027: PUSH
64028: EMPTY
64029: EQUAL
64030: OR
64031: IFFALSE 63976
// if not control in _control then
64033: LD_VAR 0 4
64037: PUSH
64038: LD_VAR 0 12
64042: IN
64043: NOT
64044: IFFALSE 64070
// control := _control [ rand ( 1 , _control ) ] ;
64046: LD_ADDR_VAR 0 4
64050: PUSH
64051: LD_VAR 0 12
64055: PUSH
64056: LD_INT 1
64058: PPUSH
64059: LD_VAR 0 12
64063: PPUSH
64064: CALL_OW 12
64068: ARRAY
64069: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
64070: LD_VAR 0 2
64074: PPUSH
64075: LD_VAR 0 5
64079: PPUSH
64080: CALL 64431 0 2
64084: NOT
64085: IFFALSE 64144
// repeat weapon := _weapon [ 1 ] ;
64087: LD_ADDR_VAR 0 5
64091: PUSH
64092: LD_VAR 0 10
64096: PUSH
64097: LD_INT 1
64099: ARRAY
64100: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
64101: LD_ADDR_VAR 0 10
64105: PUSH
64106: LD_VAR 0 10
64110: PPUSH
64111: LD_INT 1
64113: PPUSH
64114: CALL_OW 3
64118: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
64119: LD_VAR 0 2
64123: PPUSH
64124: LD_VAR 0 5
64128: PPUSH
64129: CALL 64431 0 2
64133: PUSH
64134: LD_VAR 0 10
64138: PUSH
64139: EMPTY
64140: EQUAL
64141: OR
64142: IFFALSE 64087
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
64144: LD_VAR 0 1
64148: PPUSH
64149: LD_VAR 0 2
64153: PPUSH
64154: LD_VAR 0 3
64158: PPUSH
64159: LD_VAR 0 4
64163: PPUSH
64164: LD_VAR 0 5
64168: PPUSH
64169: CALL_OW 448
64173: IFFALSE 64206
// result := [ chassis , engine , control , weapon ] ;
64175: LD_ADDR_VAR 0 6
64179: PUSH
64180: LD_VAR 0 2
64184: PUSH
64185: LD_VAR 0 3
64189: PUSH
64190: LD_VAR 0 4
64194: PUSH
64195: LD_VAR 0 5
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: ST_TO_ADDR
// end ;
64206: LD_VAR 0 6
64210: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
64211: LD_INT 0
64213: PPUSH
// if not chassis or not engine then
64214: LD_VAR 0 1
64218: NOT
64219: PUSH
64220: LD_VAR 0 2
64224: NOT
64225: OR
64226: IFFALSE 64230
// exit ;
64228: GO 64426
// case engine of engine_solar :
64230: LD_VAR 0 2
64234: PUSH
64235: LD_INT 2
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64243
64241: GO 64281
64243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: LD_INT 11
64251: PUSH
64252: LD_INT 12
64254: PUSH
64255: LD_INT 13
64257: PUSH
64258: LD_INT 14
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 3
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: ST_TO_ADDR
64279: GO 64410
64281: LD_INT 1
64283: DOUBLE
64284: EQUAL
64285: IFTRUE 64289
64287: GO 64351
64289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
64290: LD_ADDR_VAR 0 3
64294: PUSH
64295: LD_INT 11
64297: PUSH
64298: LD_INT 12
64300: PUSH
64301: LD_INT 13
64303: PUSH
64304: LD_INT 14
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: LD_INT 3
64315: PUSH
64316: LD_INT 4
64318: PUSH
64319: LD_INT 5
64321: PUSH
64322: LD_INT 21
64324: PUSH
64325: LD_INT 23
64327: PUSH
64328: LD_INT 22
64330: PUSH
64331: LD_INT 24
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
64349: GO 64410
64351: LD_INT 3
64353: DOUBLE
64354: EQUAL
64355: IFTRUE 64359
64357: GO 64409
64359: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_INT 13
64367: PUSH
64368: LD_INT 14
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: LD_INT 3
64376: PUSH
64377: LD_INT 4
64379: PUSH
64380: LD_INT 5
64382: PUSH
64383: LD_INT 21
64385: PUSH
64386: LD_INT 22
64388: PUSH
64389: LD_INT 23
64391: PUSH
64392: LD_INT 24
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: ST_TO_ADDR
64407: GO 64410
64409: POP
// result := ( chassis in result ) ;
64410: LD_ADDR_VAR 0 3
64414: PUSH
64415: LD_VAR 0 1
64419: PUSH
64420: LD_VAR 0 3
64424: IN
64425: ST_TO_ADDR
// end ;
64426: LD_VAR 0 3
64430: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
64431: LD_INT 0
64433: PPUSH
// if not chassis or not weapon then
64434: LD_VAR 0 1
64438: NOT
64439: PUSH
64440: LD_VAR 0 2
64444: NOT
64445: OR
64446: IFFALSE 64450
// exit ;
64448: GO 65476
// case weapon of us_machine_gun :
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 2
64457: DOUBLE
64458: EQUAL
64459: IFTRUE 64463
64461: GO 64493
64463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
64464: LD_ADDR_VAR 0 3
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 3
64477: PUSH
64478: LD_INT 4
64480: PUSH
64481: LD_INT 5
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
64491: GO 65460
64493: LD_INT 3
64495: DOUBLE
64496: EQUAL
64497: IFTRUE 64501
64499: GO 64531
64501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
64502: LD_ADDR_VAR 0 3
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: LD_INT 4
64518: PUSH
64519: LD_INT 5
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: ST_TO_ADDR
64529: GO 65460
64531: LD_INT 11
64533: DOUBLE
64534: EQUAL
64535: IFTRUE 64539
64537: GO 64569
64539: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
64540: LD_ADDR_VAR 0 3
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: LD_INT 4
64556: PUSH
64557: LD_INT 5
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
64567: GO 65460
64569: LD_INT 4
64571: DOUBLE
64572: EQUAL
64573: IFTRUE 64577
64575: GO 64603
64577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
64578: LD_ADDR_VAR 0 3
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 4
64591: PUSH
64592: LD_INT 5
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
64601: GO 65460
64603: LD_INT 5
64605: DOUBLE
64606: EQUAL
64607: IFTRUE 64611
64609: GO 64637
64611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
64612: LD_ADDR_VAR 0 3
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: LD_INT 5
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
64635: GO 65460
64637: LD_INT 9
64639: DOUBLE
64640: EQUAL
64641: IFTRUE 64645
64643: GO 64671
64645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
64646: LD_ADDR_VAR 0 3
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: LD_INT 4
64659: PUSH
64660: LD_INT 5
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
64669: GO 65460
64671: LD_INT 7
64673: DOUBLE
64674: EQUAL
64675: IFTRUE 64679
64677: GO 64705
64679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
64680: LD_ADDR_VAR 0 3
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 4
64693: PUSH
64694: LD_INT 5
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
64703: GO 65460
64705: LD_INT 12
64707: DOUBLE
64708: EQUAL
64709: IFTRUE 64713
64711: GO 64739
64713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: LD_INT 5
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
64737: GO 65460
64739: LD_INT 13
64741: DOUBLE
64742: EQUAL
64743: IFTRUE 64747
64745: GO 64773
64747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
64748: LD_ADDR_VAR 0 3
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: LD_INT 3
64758: PUSH
64759: LD_INT 4
64761: PUSH
64762: LD_INT 5
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: ST_TO_ADDR
64771: GO 65460
64773: LD_INT 14
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64781
64779: GO 64799
64781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
64782: LD_ADDR_VAR 0 3
64786: PUSH
64787: LD_INT 4
64789: PUSH
64790: LD_INT 5
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: ST_TO_ADDR
64797: GO 65460
64799: LD_INT 6
64801: DOUBLE
64802: EQUAL
64803: IFTRUE 64807
64805: GO 64825
64807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
64808: LD_ADDR_VAR 0 3
64812: PUSH
64813: LD_INT 4
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: ST_TO_ADDR
64823: GO 65460
64825: LD_INT 10
64827: DOUBLE
64828: EQUAL
64829: IFTRUE 64833
64831: GO 64851
64833: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 5
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: ST_TO_ADDR
64849: GO 65460
64851: LD_INT 22
64853: DOUBLE
64854: EQUAL
64855: IFTRUE 64859
64857: GO 64885
64859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
64860: LD_ADDR_VAR 0 3
64864: PUSH
64865: LD_INT 11
64867: PUSH
64868: LD_INT 12
64870: PUSH
64871: LD_INT 13
64873: PUSH
64874: LD_INT 14
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: ST_TO_ADDR
64883: GO 65460
64885: LD_INT 23
64887: DOUBLE
64888: EQUAL
64889: IFTRUE 64893
64891: GO 64919
64893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
64894: LD_ADDR_VAR 0 3
64898: PUSH
64899: LD_INT 11
64901: PUSH
64902: LD_INT 12
64904: PUSH
64905: LD_INT 13
64907: PUSH
64908: LD_INT 14
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: ST_TO_ADDR
64917: GO 65460
64919: LD_INT 24
64921: DOUBLE
64922: EQUAL
64923: IFTRUE 64927
64925: GO 64953
64927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
64928: LD_ADDR_VAR 0 3
64932: PUSH
64933: LD_INT 11
64935: PUSH
64936: LD_INT 12
64938: PUSH
64939: LD_INT 13
64941: PUSH
64942: LD_INT 14
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: ST_TO_ADDR
64951: GO 65460
64953: LD_INT 30
64955: DOUBLE
64956: EQUAL
64957: IFTRUE 64961
64959: GO 64987
64961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
64962: LD_ADDR_VAR 0 3
64966: PUSH
64967: LD_INT 11
64969: PUSH
64970: LD_INT 12
64972: PUSH
64973: LD_INT 13
64975: PUSH
64976: LD_INT 14
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: ST_TO_ADDR
64985: GO 65460
64987: LD_INT 25
64989: DOUBLE
64990: EQUAL
64991: IFTRUE 64995
64993: GO 65013
64995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_INT 13
65003: PUSH
65004: LD_INT 14
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: ST_TO_ADDR
65011: GO 65460
65013: LD_INT 27
65015: DOUBLE
65016: EQUAL
65017: IFTRUE 65021
65019: GO 65039
65021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
65022: LD_ADDR_VAR 0 3
65026: PUSH
65027: LD_INT 13
65029: PUSH
65030: LD_INT 14
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: ST_TO_ADDR
65037: GO 65460
65039: LD_INT 28
65041: DOUBLE
65042: EQUAL
65043: IFTRUE 65047
65045: GO 65065
65047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
65048: LD_ADDR_VAR 0 3
65052: PUSH
65053: LD_INT 13
65055: PUSH
65056: LD_INT 14
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: ST_TO_ADDR
65063: GO 65460
65065: LD_INT 29
65067: DOUBLE
65068: EQUAL
65069: IFTRUE 65073
65071: GO 65091
65073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
65074: LD_ADDR_VAR 0 3
65078: PUSH
65079: LD_INT 13
65081: PUSH
65082: LD_INT 14
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: ST_TO_ADDR
65089: GO 65460
65091: LD_INT 31
65093: DOUBLE
65094: EQUAL
65095: IFTRUE 65099
65097: GO 65117
65099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
65100: LD_ADDR_VAR 0 3
65104: PUSH
65105: LD_INT 13
65107: PUSH
65108: LD_INT 14
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: ST_TO_ADDR
65115: GO 65460
65117: LD_INT 26
65119: DOUBLE
65120: EQUAL
65121: IFTRUE 65125
65123: GO 65143
65125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
65126: LD_ADDR_VAR 0 3
65130: PUSH
65131: LD_INT 13
65133: PUSH
65134: LD_INT 14
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: ST_TO_ADDR
65141: GO 65460
65143: LD_INT 42
65145: DOUBLE
65146: EQUAL
65147: IFTRUE 65151
65149: GO 65177
65151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
65152: LD_ADDR_VAR 0 3
65156: PUSH
65157: LD_INT 21
65159: PUSH
65160: LD_INT 22
65162: PUSH
65163: LD_INT 23
65165: PUSH
65166: LD_INT 24
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: ST_TO_ADDR
65175: GO 65460
65177: LD_INT 43
65179: DOUBLE
65180: EQUAL
65181: IFTRUE 65185
65183: GO 65211
65185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
65186: LD_ADDR_VAR 0 3
65190: PUSH
65191: LD_INT 21
65193: PUSH
65194: LD_INT 22
65196: PUSH
65197: LD_INT 23
65199: PUSH
65200: LD_INT 24
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
65209: GO 65460
65211: LD_INT 44
65213: DOUBLE
65214: EQUAL
65215: IFTRUE 65219
65217: GO 65245
65219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_INT 21
65227: PUSH
65228: LD_INT 22
65230: PUSH
65231: LD_INT 23
65233: PUSH
65234: LD_INT 24
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: ST_TO_ADDR
65243: GO 65460
65245: LD_INT 45
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65253
65251: GO 65279
65253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
65254: LD_ADDR_VAR 0 3
65258: PUSH
65259: LD_INT 21
65261: PUSH
65262: LD_INT 22
65264: PUSH
65265: LD_INT 23
65267: PUSH
65268: LD_INT 24
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
65277: GO 65460
65279: LD_INT 49
65281: DOUBLE
65282: EQUAL
65283: IFTRUE 65287
65285: GO 65313
65287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
65288: LD_ADDR_VAR 0 3
65292: PUSH
65293: LD_INT 21
65295: PUSH
65296: LD_INT 22
65298: PUSH
65299: LD_INT 23
65301: PUSH
65302: LD_INT 24
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: ST_TO_ADDR
65311: GO 65460
65313: LD_INT 51
65315: DOUBLE
65316: EQUAL
65317: IFTRUE 65321
65319: GO 65347
65321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
65322: LD_ADDR_VAR 0 3
65326: PUSH
65327: LD_INT 21
65329: PUSH
65330: LD_INT 22
65332: PUSH
65333: LD_INT 23
65335: PUSH
65336: LD_INT 24
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
65345: GO 65460
65347: LD_INT 52
65349: DOUBLE
65350: EQUAL
65351: IFTRUE 65355
65353: GO 65381
65355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
65356: LD_ADDR_VAR 0 3
65360: PUSH
65361: LD_INT 21
65363: PUSH
65364: LD_INT 22
65366: PUSH
65367: LD_INT 23
65369: PUSH
65370: LD_INT 24
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
65379: GO 65460
65381: LD_INT 53
65383: DOUBLE
65384: EQUAL
65385: IFTRUE 65389
65387: GO 65407
65389: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
65390: LD_ADDR_VAR 0 3
65394: PUSH
65395: LD_INT 23
65397: PUSH
65398: LD_INT 24
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: ST_TO_ADDR
65405: GO 65460
65407: LD_INT 46
65409: DOUBLE
65410: EQUAL
65411: IFTRUE 65415
65413: GO 65433
65415: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
65416: LD_ADDR_VAR 0 3
65420: PUSH
65421: LD_INT 23
65423: PUSH
65424: LD_INT 24
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: ST_TO_ADDR
65431: GO 65460
65433: LD_INT 47
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65441
65439: GO 65459
65441: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
65442: LD_ADDR_VAR 0 3
65446: PUSH
65447: LD_INT 23
65449: PUSH
65450: LD_INT 24
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: ST_TO_ADDR
65457: GO 65460
65459: POP
// result := ( chassis in result ) ;
65460: LD_ADDR_VAR 0 3
65464: PUSH
65465: LD_VAR 0 1
65469: PUSH
65470: LD_VAR 0 3
65474: IN
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 3
65480: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
65481: LD_INT 0
65483: PPUSH
65484: PPUSH
65485: PPUSH
65486: PPUSH
65487: PPUSH
65488: PPUSH
65489: PPUSH
// result := array ;
65490: LD_ADDR_VAR 0 5
65494: PUSH
65495: LD_VAR 0 1
65499: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
65500: LD_VAR 0 1
65504: NOT
65505: PUSH
65506: LD_VAR 0 2
65510: NOT
65511: OR
65512: PUSH
65513: LD_VAR 0 3
65517: NOT
65518: OR
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_VAR 0 1
65529: GREATER
65530: OR
65531: PUSH
65532: LD_VAR 0 3
65536: PUSH
65537: LD_VAR 0 1
65541: GREATER
65542: OR
65543: IFFALSE 65547
// exit ;
65545: GO 65843
// if direction then
65547: LD_VAR 0 4
65551: IFFALSE 65615
// begin d := 1 ;
65553: LD_ADDR_VAR 0 9
65557: PUSH
65558: LD_INT 1
65560: ST_TO_ADDR
// if i_from > i_to then
65561: LD_VAR 0 2
65565: PUSH
65566: LD_VAR 0 3
65570: GREATER
65571: IFFALSE 65597
// length := ( array - i_from ) + i_to else
65573: LD_ADDR_VAR 0 11
65577: PUSH
65578: LD_VAR 0 1
65582: PUSH
65583: LD_VAR 0 2
65587: MINUS
65588: PUSH
65589: LD_VAR 0 3
65593: PLUS
65594: ST_TO_ADDR
65595: GO 65613
// length := i_to - i_from ;
65597: LD_ADDR_VAR 0 11
65601: PUSH
65602: LD_VAR 0 3
65606: PUSH
65607: LD_VAR 0 2
65611: MINUS
65612: ST_TO_ADDR
// end else
65613: GO 65676
// begin d := - 1 ;
65615: LD_ADDR_VAR 0 9
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: ST_TO_ADDR
// if i_from > i_to then
65624: LD_VAR 0 2
65628: PUSH
65629: LD_VAR 0 3
65633: GREATER
65634: IFFALSE 65654
// length := i_from - i_to else
65636: LD_ADDR_VAR 0 11
65640: PUSH
65641: LD_VAR 0 2
65645: PUSH
65646: LD_VAR 0 3
65650: MINUS
65651: ST_TO_ADDR
65652: GO 65676
// length := ( array - i_to ) + i_from ;
65654: LD_ADDR_VAR 0 11
65658: PUSH
65659: LD_VAR 0 1
65663: PUSH
65664: LD_VAR 0 3
65668: MINUS
65669: PUSH
65670: LD_VAR 0 2
65674: PLUS
65675: ST_TO_ADDR
// end ; if not length then
65676: LD_VAR 0 11
65680: NOT
65681: IFFALSE 65685
// exit ;
65683: GO 65843
// tmp := array ;
65685: LD_ADDR_VAR 0 10
65689: PUSH
65690: LD_VAR 0 1
65694: ST_TO_ADDR
// for i = 1 to length do
65695: LD_ADDR_VAR 0 6
65699: PUSH
65700: DOUBLE
65701: LD_INT 1
65703: DEC
65704: ST_TO_ADDR
65705: LD_VAR 0 11
65709: PUSH
65710: FOR_TO
65711: IFFALSE 65831
// begin for j = 1 to array do
65713: LD_ADDR_VAR 0 7
65717: PUSH
65718: DOUBLE
65719: LD_INT 1
65721: DEC
65722: ST_TO_ADDR
65723: LD_VAR 0 1
65727: PUSH
65728: FOR_TO
65729: IFFALSE 65817
// begin k := j + d ;
65731: LD_ADDR_VAR 0 8
65735: PUSH
65736: LD_VAR 0 7
65740: PUSH
65741: LD_VAR 0 9
65745: PLUS
65746: ST_TO_ADDR
// if k > array then
65747: LD_VAR 0 8
65751: PUSH
65752: LD_VAR 0 1
65756: GREATER
65757: IFFALSE 65767
// k := 1 ;
65759: LD_ADDR_VAR 0 8
65763: PUSH
65764: LD_INT 1
65766: ST_TO_ADDR
// if not k then
65767: LD_VAR 0 8
65771: NOT
65772: IFFALSE 65784
// k := array ;
65774: LD_ADDR_VAR 0 8
65778: PUSH
65779: LD_VAR 0 1
65783: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
65784: LD_ADDR_VAR 0 10
65788: PUSH
65789: LD_VAR 0 10
65793: PPUSH
65794: LD_VAR 0 8
65798: PPUSH
65799: LD_VAR 0 1
65803: PUSH
65804: LD_VAR 0 7
65808: ARRAY
65809: PPUSH
65810: CALL_OW 1
65814: ST_TO_ADDR
// end ;
65815: GO 65728
65817: POP
65818: POP
// array := tmp ;
65819: LD_ADDR_VAR 0 1
65823: PUSH
65824: LD_VAR 0 10
65828: ST_TO_ADDR
// end ;
65829: GO 65710
65831: POP
65832: POP
// result := array ;
65833: LD_ADDR_VAR 0 5
65837: PUSH
65838: LD_VAR 0 1
65842: ST_TO_ADDR
// end ;
65843: LD_VAR 0 5
65847: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
65848: LD_INT 0
65850: PPUSH
65851: PPUSH
// result := 0 ;
65852: LD_ADDR_VAR 0 3
65856: PUSH
65857: LD_INT 0
65859: ST_TO_ADDR
// if not array or not value in array then
65860: LD_VAR 0 1
65864: NOT
65865: PUSH
65866: LD_VAR 0 2
65870: PUSH
65871: LD_VAR 0 1
65875: IN
65876: NOT
65877: OR
65878: IFFALSE 65882
// exit ;
65880: GO 65936
// for i = 1 to array do
65882: LD_ADDR_VAR 0 4
65886: PUSH
65887: DOUBLE
65888: LD_INT 1
65890: DEC
65891: ST_TO_ADDR
65892: LD_VAR 0 1
65896: PUSH
65897: FOR_TO
65898: IFFALSE 65934
// if value = array [ i ] then
65900: LD_VAR 0 2
65904: PUSH
65905: LD_VAR 0 1
65909: PUSH
65910: LD_VAR 0 4
65914: ARRAY
65915: EQUAL
65916: IFFALSE 65932
// begin result := i ;
65918: LD_ADDR_VAR 0 3
65922: PUSH
65923: LD_VAR 0 4
65927: ST_TO_ADDR
// exit ;
65928: POP
65929: POP
65930: GO 65936
// end ;
65932: GO 65897
65934: POP
65935: POP
// end ;
65936: LD_VAR 0 3
65940: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
65941: LD_INT 0
65943: PPUSH
// vc_chassis := chassis ;
65944: LD_ADDR_OWVAR 37
65948: PUSH
65949: LD_VAR 0 1
65953: ST_TO_ADDR
// vc_engine := engine ;
65954: LD_ADDR_OWVAR 39
65958: PUSH
65959: LD_VAR 0 2
65963: ST_TO_ADDR
// vc_control := control ;
65964: LD_ADDR_OWVAR 38
65968: PUSH
65969: LD_VAR 0 3
65973: ST_TO_ADDR
// vc_weapon := weapon ;
65974: LD_ADDR_OWVAR 40
65978: PUSH
65979: LD_VAR 0 4
65983: ST_TO_ADDR
// vc_fuel_battery := fuel ;
65984: LD_ADDR_OWVAR 41
65988: PUSH
65989: LD_VAR 0 5
65993: ST_TO_ADDR
// end ;
65994: LD_VAR 0 6
65998: RET
// export function WantPlant ( unit ) ; var task ; begin
65999: LD_INT 0
66001: PPUSH
66002: PPUSH
// result := false ;
66003: LD_ADDR_VAR 0 2
66007: PUSH
66008: LD_INT 0
66010: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
66011: LD_ADDR_VAR 0 3
66015: PUSH
66016: LD_VAR 0 1
66020: PPUSH
66021: CALL_OW 437
66025: ST_TO_ADDR
// if task then
66026: LD_VAR 0 3
66030: IFFALSE 66058
// if task [ 1 ] [ 1 ] = p then
66032: LD_VAR 0 3
66036: PUSH
66037: LD_INT 1
66039: ARRAY
66040: PUSH
66041: LD_INT 1
66043: ARRAY
66044: PUSH
66045: LD_STRING p
66047: EQUAL
66048: IFFALSE 66058
// result := true ;
66050: LD_ADDR_VAR 0 2
66054: PUSH
66055: LD_INT 1
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 2
66062: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
66067: PPUSH
66068: PPUSH
// if pos < 1 then
66069: LD_VAR 0 2
66073: PUSH
66074: LD_INT 1
66076: LESS
66077: IFFALSE 66081
// exit ;
66079: GO 66384
// if pos = 1 then
66081: LD_VAR 0 2
66085: PUSH
66086: LD_INT 1
66088: EQUAL
66089: IFFALSE 66122
// result := Replace ( arr , pos [ 1 ] , value ) else
66091: LD_ADDR_VAR 0 4
66095: PUSH
66096: LD_VAR 0 1
66100: PPUSH
66101: LD_VAR 0 2
66105: PUSH
66106: LD_INT 1
66108: ARRAY
66109: PPUSH
66110: LD_VAR 0 3
66114: PPUSH
66115: CALL_OW 1
66119: ST_TO_ADDR
66120: GO 66384
// begin tmp := arr ;
66122: LD_ADDR_VAR 0 6
66126: PUSH
66127: LD_VAR 0 1
66131: ST_TO_ADDR
// s_arr := [ tmp ] ;
66132: LD_ADDR_VAR 0 7
66136: PUSH
66137: LD_VAR 0 6
66141: PUSH
66142: EMPTY
66143: LIST
66144: ST_TO_ADDR
// for i = 1 to pos - 1 do
66145: LD_ADDR_VAR 0 5
66149: PUSH
66150: DOUBLE
66151: LD_INT 1
66153: DEC
66154: ST_TO_ADDR
66155: LD_VAR 0 2
66159: PUSH
66160: LD_INT 1
66162: MINUS
66163: PUSH
66164: FOR_TO
66165: IFFALSE 66210
// begin tmp := tmp [ pos [ i ] ] ;
66167: LD_ADDR_VAR 0 6
66171: PUSH
66172: LD_VAR 0 6
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: LD_VAR 0 5
66186: ARRAY
66187: ARRAY
66188: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
66189: LD_ADDR_VAR 0 7
66193: PUSH
66194: LD_VAR 0 7
66198: PUSH
66199: LD_VAR 0 6
66203: PUSH
66204: EMPTY
66205: LIST
66206: ADD
66207: ST_TO_ADDR
// end ;
66208: GO 66164
66210: POP
66211: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
66212: LD_ADDR_VAR 0 6
66216: PUSH
66217: LD_VAR 0 6
66221: PPUSH
66222: LD_VAR 0 2
66226: PUSH
66227: LD_VAR 0 2
66231: ARRAY
66232: PPUSH
66233: LD_VAR 0 3
66237: PPUSH
66238: CALL_OW 1
66242: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
66243: LD_ADDR_VAR 0 7
66247: PUSH
66248: LD_VAR 0 7
66252: PPUSH
66253: LD_VAR 0 7
66257: PPUSH
66258: LD_VAR 0 6
66262: PPUSH
66263: CALL_OW 1
66267: ST_TO_ADDR
// for i = s_arr downto 2 do
66268: LD_ADDR_VAR 0 5
66272: PUSH
66273: DOUBLE
66274: LD_VAR 0 7
66278: INC
66279: ST_TO_ADDR
66280: LD_INT 2
66282: PUSH
66283: FOR_DOWNTO
66284: IFFALSE 66368
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
66286: LD_ADDR_VAR 0 6
66290: PUSH
66291: LD_VAR 0 7
66295: PUSH
66296: LD_VAR 0 5
66300: PUSH
66301: LD_INT 1
66303: MINUS
66304: ARRAY
66305: PPUSH
66306: LD_VAR 0 2
66310: PUSH
66311: LD_VAR 0 5
66315: PUSH
66316: LD_INT 1
66318: MINUS
66319: ARRAY
66320: PPUSH
66321: LD_VAR 0 7
66325: PUSH
66326: LD_VAR 0 5
66330: ARRAY
66331: PPUSH
66332: CALL_OW 1
66336: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
66337: LD_ADDR_VAR 0 7
66341: PUSH
66342: LD_VAR 0 7
66346: PPUSH
66347: LD_VAR 0 5
66351: PUSH
66352: LD_INT 1
66354: MINUS
66355: PPUSH
66356: LD_VAR 0 6
66360: PPUSH
66361: CALL_OW 1
66365: ST_TO_ADDR
// end ;
66366: GO 66283
66368: POP
66369: POP
// result := s_arr [ 1 ] ;
66370: LD_ADDR_VAR 0 4
66374: PUSH
66375: LD_VAR 0 7
66379: PUSH
66380: LD_INT 1
66382: ARRAY
66383: ST_TO_ADDR
// end ; end ;
66384: LD_VAR 0 4
66388: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
66389: LD_INT 0
66391: PPUSH
66392: PPUSH
// if not list then
66393: LD_VAR 0 1
66397: NOT
66398: IFFALSE 66402
// exit ;
66400: GO 66493
// i := list [ pos1 ] ;
66402: LD_ADDR_VAR 0 5
66406: PUSH
66407: LD_VAR 0 1
66411: PUSH
66412: LD_VAR 0 2
66416: ARRAY
66417: ST_TO_ADDR
// if not i then
66418: LD_VAR 0 5
66422: NOT
66423: IFFALSE 66427
// exit ;
66425: GO 66493
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
66427: LD_ADDR_VAR 0 1
66431: PUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: LD_VAR 0 2
66441: PPUSH
66442: LD_VAR 0 1
66446: PUSH
66447: LD_VAR 0 3
66451: ARRAY
66452: PPUSH
66453: CALL_OW 1
66457: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
66458: LD_ADDR_VAR 0 1
66462: PUSH
66463: LD_VAR 0 1
66467: PPUSH
66468: LD_VAR 0 3
66472: PPUSH
66473: LD_VAR 0 5
66477: PPUSH
66478: CALL_OW 1
66482: ST_TO_ADDR
// result := list ;
66483: LD_ADDR_VAR 0 4
66487: PUSH
66488: LD_VAR 0 1
66492: ST_TO_ADDR
// end ;
66493: LD_VAR 0 4
66497: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
66498: LD_INT 0
66500: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
66501: LD_ADDR_VAR 0 5
66505: PUSH
66506: LD_VAR 0 1
66510: PPUSH
66511: CALL_OW 250
66515: PPUSH
66516: LD_VAR 0 1
66520: PPUSH
66521: CALL_OW 251
66525: PPUSH
66526: LD_VAR 0 2
66530: PPUSH
66531: LD_VAR 0 3
66535: PPUSH
66536: LD_VAR 0 4
66540: PPUSH
66541: CALL 66551 0 5
66545: ST_TO_ADDR
// end ;
66546: LD_VAR 0 5
66550: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
66551: LD_INT 0
66553: PPUSH
66554: PPUSH
66555: PPUSH
66556: PPUSH
// if not list then
66557: LD_VAR 0 3
66561: NOT
66562: IFFALSE 66566
// exit ;
66564: GO 66954
// result := [ ] ;
66566: LD_ADDR_VAR 0 6
66570: PUSH
66571: EMPTY
66572: ST_TO_ADDR
// for i in list do
66573: LD_ADDR_VAR 0 7
66577: PUSH
66578: LD_VAR 0 3
66582: PUSH
66583: FOR_IN
66584: IFFALSE 66786
// begin tmp := GetDistUnitXY ( i , x , y ) ;
66586: LD_ADDR_VAR 0 9
66590: PUSH
66591: LD_VAR 0 7
66595: PPUSH
66596: LD_VAR 0 1
66600: PPUSH
66601: LD_VAR 0 2
66605: PPUSH
66606: CALL_OW 297
66610: ST_TO_ADDR
// if not result then
66611: LD_VAR 0 6
66615: NOT
66616: IFFALSE 66642
// result := [ [ i , tmp ] ] else
66618: LD_ADDR_VAR 0 6
66622: PUSH
66623: LD_VAR 0 7
66627: PUSH
66628: LD_VAR 0 9
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: ST_TO_ADDR
66640: GO 66784
// begin if result [ result ] [ 2 ] < tmp then
66642: LD_VAR 0 6
66646: PUSH
66647: LD_VAR 0 6
66651: ARRAY
66652: PUSH
66653: LD_INT 2
66655: ARRAY
66656: PUSH
66657: LD_VAR 0 9
66661: LESS
66662: IFFALSE 66704
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
66664: LD_ADDR_VAR 0 6
66668: PUSH
66669: LD_VAR 0 6
66673: PPUSH
66674: LD_VAR 0 6
66678: PUSH
66679: LD_INT 1
66681: PLUS
66682: PPUSH
66683: LD_VAR 0 7
66687: PUSH
66688: LD_VAR 0 9
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PPUSH
66697: CALL_OW 2
66701: ST_TO_ADDR
66702: GO 66784
// for j = 1 to result do
66704: LD_ADDR_VAR 0 8
66708: PUSH
66709: DOUBLE
66710: LD_INT 1
66712: DEC
66713: ST_TO_ADDR
66714: LD_VAR 0 6
66718: PUSH
66719: FOR_TO
66720: IFFALSE 66782
// begin if tmp < result [ j ] [ 2 ] then
66722: LD_VAR 0 9
66726: PUSH
66727: LD_VAR 0 6
66731: PUSH
66732: LD_VAR 0 8
66736: ARRAY
66737: PUSH
66738: LD_INT 2
66740: ARRAY
66741: LESS
66742: IFFALSE 66780
// begin result := Insert ( result , j , [ i , tmp ] ) ;
66744: LD_ADDR_VAR 0 6
66748: PUSH
66749: LD_VAR 0 6
66753: PPUSH
66754: LD_VAR 0 8
66758: PPUSH
66759: LD_VAR 0 7
66763: PUSH
66764: LD_VAR 0 9
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PPUSH
66773: CALL_OW 2
66777: ST_TO_ADDR
// break ;
66778: GO 66782
// end ; end ;
66780: GO 66719
66782: POP
66783: POP
// end ; end ;
66784: GO 66583
66786: POP
66787: POP
// if result and not asc then
66788: LD_VAR 0 6
66792: PUSH
66793: LD_VAR 0 4
66797: NOT
66798: AND
66799: IFFALSE 66874
// begin tmp := result ;
66801: LD_ADDR_VAR 0 9
66805: PUSH
66806: LD_VAR 0 6
66810: ST_TO_ADDR
// for i = tmp downto 1 do
66811: LD_ADDR_VAR 0 7
66815: PUSH
66816: DOUBLE
66817: LD_VAR 0 9
66821: INC
66822: ST_TO_ADDR
66823: LD_INT 1
66825: PUSH
66826: FOR_DOWNTO
66827: IFFALSE 66872
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
66829: LD_ADDR_VAR 0 6
66833: PUSH
66834: LD_VAR 0 6
66838: PPUSH
66839: LD_VAR 0 9
66843: PUSH
66844: LD_VAR 0 7
66848: MINUS
66849: PUSH
66850: LD_INT 1
66852: PLUS
66853: PPUSH
66854: LD_VAR 0 9
66858: PUSH
66859: LD_VAR 0 7
66863: ARRAY
66864: PPUSH
66865: CALL_OW 1
66869: ST_TO_ADDR
66870: GO 66826
66872: POP
66873: POP
// end ; tmp := [ ] ;
66874: LD_ADDR_VAR 0 9
66878: PUSH
66879: EMPTY
66880: ST_TO_ADDR
// if mode then
66881: LD_VAR 0 5
66885: IFFALSE 66954
// begin for i = 1 to result do
66887: LD_ADDR_VAR 0 7
66891: PUSH
66892: DOUBLE
66893: LD_INT 1
66895: DEC
66896: ST_TO_ADDR
66897: LD_VAR 0 6
66901: PUSH
66902: FOR_TO
66903: IFFALSE 66942
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
66905: LD_ADDR_VAR 0 9
66909: PUSH
66910: LD_VAR 0 9
66914: PPUSH
66915: LD_VAR 0 7
66919: PPUSH
66920: LD_VAR 0 6
66924: PUSH
66925: LD_VAR 0 7
66929: ARRAY
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: PPUSH
66935: CALL_OW 1
66939: ST_TO_ADDR
66940: GO 66902
66942: POP
66943: POP
// result := tmp ;
66944: LD_ADDR_VAR 0 6
66948: PUSH
66949: LD_VAR 0 9
66953: ST_TO_ADDR
// end ; end ;
66954: LD_VAR 0 6
66958: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
66959: LD_INT 0
66961: PPUSH
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
66966: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
66967: LD_ADDR_VAR 0 5
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: ST_TO_ADDR
// if not x or not y then
66989: LD_VAR 0 2
66993: NOT
66994: PUSH
66995: LD_VAR 0 3
66999: NOT
67000: OR
67001: IFFALSE 67005
// exit ;
67003: GO 68651
// if not range then
67005: LD_VAR 0 4
67009: NOT
67010: IFFALSE 67020
// range := 10 ;
67012: LD_ADDR_VAR 0 4
67016: PUSH
67017: LD_INT 10
67019: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
67020: LD_ADDR_VAR 0 8
67024: PUSH
67025: LD_INT 81
67027: PUSH
67028: LD_VAR 0 1
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 92
67039: PUSH
67040: LD_VAR 0 2
67044: PUSH
67045: LD_VAR 0 3
67049: PUSH
67050: LD_VAR 0 4
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: LD_INT 21
67066: PUSH
67067: LD_INT 3
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: PPUSH
67083: CALL_OW 69
67087: ST_TO_ADDR
// if not tmp then
67088: LD_VAR 0 8
67092: NOT
67093: IFFALSE 67097
// exit ;
67095: GO 68651
// for i in tmp do
67097: LD_ADDR_VAR 0 6
67101: PUSH
67102: LD_VAR 0 8
67106: PUSH
67107: FOR_IN
67108: IFFALSE 68626
// begin points := [ 0 , 0 , 0 ] ;
67110: LD_ADDR_VAR 0 9
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// bpoints := 1 ;
67129: LD_ADDR_VAR 0 10
67133: PUSH
67134: LD_INT 1
67136: ST_TO_ADDR
// case GetType ( i ) of unit_human :
67137: LD_VAR 0 6
67141: PPUSH
67142: CALL_OW 247
67146: PUSH
67147: LD_INT 1
67149: DOUBLE
67150: EQUAL
67151: IFTRUE 67155
67153: GO 67733
67155: POP
// begin if GetClass ( i ) = 1 then
67156: LD_VAR 0 6
67160: PPUSH
67161: CALL_OW 257
67165: PUSH
67166: LD_INT 1
67168: EQUAL
67169: IFFALSE 67190
// points := [ 10 , 5 , 3 ] ;
67171: LD_ADDR_VAR 0 9
67175: PUSH
67176: LD_INT 10
67178: PUSH
67179: LD_INT 5
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
67190: LD_VAR 0 6
67194: PPUSH
67195: CALL_OW 257
67199: PUSH
67200: LD_INT 2
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 4
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: IN
67214: IFFALSE 67235
// points := [ 3 , 2 , 1 ] ;
67216: LD_ADDR_VAR 0 9
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// if GetClass ( i ) = 5 then
67235: LD_VAR 0 6
67239: PPUSH
67240: CALL_OW 257
67244: PUSH
67245: LD_INT 5
67247: EQUAL
67248: IFFALSE 67269
// points := [ 130 , 5 , 2 ] ;
67250: LD_ADDR_VAR 0 9
67254: PUSH
67255: LD_INT 130
67257: PUSH
67258: LD_INT 5
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// if GetClass ( i ) = 8 then
67269: LD_VAR 0 6
67273: PPUSH
67274: CALL_OW 257
67278: PUSH
67279: LD_INT 8
67281: EQUAL
67282: IFFALSE 67303
// points := [ 35 , 35 , 30 ] ;
67284: LD_ADDR_VAR 0 9
67288: PUSH
67289: LD_INT 35
67291: PUSH
67292: LD_INT 35
67294: PUSH
67295: LD_INT 30
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: ST_TO_ADDR
// if GetClass ( i ) = 9 then
67303: LD_VAR 0 6
67307: PPUSH
67308: CALL_OW 257
67312: PUSH
67313: LD_INT 9
67315: EQUAL
67316: IFFALSE 67337
// points := [ 20 , 55 , 40 ] ;
67318: LD_ADDR_VAR 0 9
67322: PUSH
67323: LD_INT 20
67325: PUSH
67326: LD_INT 55
67328: PUSH
67329: LD_INT 40
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
67337: LD_VAR 0 6
67341: PPUSH
67342: CALL_OW 257
67346: PUSH
67347: LD_INT 12
67349: PUSH
67350: LD_INT 16
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: IN
67357: IFFALSE 67378
// points := [ 5 , 3 , 2 ] ;
67359: LD_ADDR_VAR 0 9
67363: PUSH
67364: LD_INT 5
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: LIST
67377: ST_TO_ADDR
// if GetClass ( i ) = 17 then
67378: LD_VAR 0 6
67382: PPUSH
67383: CALL_OW 257
67387: PUSH
67388: LD_INT 17
67390: EQUAL
67391: IFFALSE 67412
// points := [ 100 , 50 , 75 ] ;
67393: LD_ADDR_VAR 0 9
67397: PUSH
67398: LD_INT 100
67400: PUSH
67401: LD_INT 50
67403: PUSH
67404: LD_INT 75
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: ST_TO_ADDR
// if GetClass ( i ) = 15 then
67412: LD_VAR 0 6
67416: PPUSH
67417: CALL_OW 257
67421: PUSH
67422: LD_INT 15
67424: EQUAL
67425: IFFALSE 67446
// points := [ 10 , 5 , 3 ] ;
67427: LD_ADDR_VAR 0 9
67431: PUSH
67432: LD_INT 10
67434: PUSH
67435: LD_INT 5
67437: PUSH
67438: LD_INT 3
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: ST_TO_ADDR
// if GetClass ( i ) = 14 then
67446: LD_VAR 0 6
67450: PPUSH
67451: CALL_OW 257
67455: PUSH
67456: LD_INT 14
67458: EQUAL
67459: IFFALSE 67480
// points := [ 10 , 0 , 0 ] ;
67461: LD_ADDR_VAR 0 9
67465: PUSH
67466: LD_INT 10
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: ST_TO_ADDR
// if GetClass ( i ) = 11 then
67480: LD_VAR 0 6
67484: PPUSH
67485: CALL_OW 257
67489: PUSH
67490: LD_INT 11
67492: EQUAL
67493: IFFALSE 67514
// points := [ 30 , 10 , 5 ] ;
67495: LD_ADDR_VAR 0 9
67499: PUSH
67500: LD_INT 30
67502: PUSH
67503: LD_INT 10
67505: PUSH
67506: LD_INT 5
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: LIST
67513: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
67514: LD_VAR 0 1
67518: PPUSH
67519: LD_INT 5
67521: PPUSH
67522: CALL_OW 321
67526: PUSH
67527: LD_INT 2
67529: EQUAL
67530: IFFALSE 67547
// bpoints := bpoints * 1.8 ;
67532: LD_ADDR_VAR 0 10
67536: PUSH
67537: LD_VAR 0 10
67541: PUSH
67542: LD_REAL  1.80000000000000E+0000
67545: MUL
67546: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
67547: LD_VAR 0 6
67551: PPUSH
67552: CALL_OW 257
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: IN
67575: PUSH
67576: LD_VAR 0 1
67580: PPUSH
67581: LD_INT 51
67583: PPUSH
67584: CALL_OW 321
67588: PUSH
67589: LD_INT 2
67591: EQUAL
67592: AND
67593: IFFALSE 67610
// bpoints := bpoints * 1.2 ;
67595: LD_ADDR_VAR 0 10
67599: PUSH
67600: LD_VAR 0 10
67604: PUSH
67605: LD_REAL  1.20000000000000E+0000
67608: MUL
67609: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
67610: LD_VAR 0 6
67614: PPUSH
67615: CALL_OW 257
67619: PUSH
67620: LD_INT 5
67622: PUSH
67623: LD_INT 7
67625: PUSH
67626: LD_INT 9
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: LIST
67633: IN
67634: PUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: LD_INT 52
67642: PPUSH
67643: CALL_OW 321
67647: PUSH
67648: LD_INT 2
67650: EQUAL
67651: AND
67652: IFFALSE 67669
// bpoints := bpoints * 1.5 ;
67654: LD_ADDR_VAR 0 10
67658: PUSH
67659: LD_VAR 0 10
67663: PUSH
67664: LD_REAL  1.50000000000000E+0000
67667: MUL
67668: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_INT 66
67676: PPUSH
67677: CALL_OW 321
67681: PUSH
67682: LD_INT 2
67684: EQUAL
67685: IFFALSE 67702
// bpoints := bpoints * 1.1 ;
67687: LD_ADDR_VAR 0 10
67691: PUSH
67692: LD_VAR 0 10
67696: PUSH
67697: LD_REAL  1.10000000000000E+0000
67700: MUL
67701: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
67702: LD_ADDR_VAR 0 10
67706: PUSH
67707: LD_VAR 0 10
67711: PUSH
67712: LD_VAR 0 6
67716: PPUSH
67717: LD_INT 1
67719: PPUSH
67720: CALL_OW 259
67724: PUSH
67725: LD_REAL  1.15000000000000E+0000
67728: MUL
67729: MUL
67730: ST_TO_ADDR
// end ; unit_vehicle :
67731: GO 68555
67733: LD_INT 2
67735: DOUBLE
67736: EQUAL
67737: IFTRUE 67741
67739: GO 68543
67741: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
67742: LD_VAR 0 6
67746: PPUSH
67747: CALL_OW 264
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: LD_INT 42
67757: PUSH
67758: LD_INT 24
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: IN
67766: IFFALSE 67787
// points := [ 25 , 5 , 3 ] ;
67768: LD_ADDR_VAR 0 9
67772: PUSH
67773: LD_INT 25
67775: PUSH
67776: LD_INT 5
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
67787: LD_VAR 0 6
67791: PPUSH
67792: CALL_OW 264
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: LD_INT 43
67802: PUSH
67803: LD_INT 25
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: LIST
67810: IN
67811: IFFALSE 67832
// points := [ 40 , 15 , 5 ] ;
67813: LD_ADDR_VAR 0 9
67817: PUSH
67818: LD_INT 40
67820: PUSH
67821: LD_INT 15
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
67832: LD_VAR 0 6
67836: PPUSH
67837: CALL_OW 264
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: LD_INT 23
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: IN
67852: IFFALSE 67873
// points := [ 7 , 25 , 8 ] ;
67854: LD_ADDR_VAR 0 9
67858: PUSH
67859: LD_INT 7
67861: PUSH
67862: LD_INT 25
67864: PUSH
67865: LD_INT 8
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
67873: LD_VAR 0 6
67877: PPUSH
67878: CALL_OW 264
67882: PUSH
67883: LD_INT 5
67885: PUSH
67886: LD_INT 27
67888: PUSH
67889: LD_INT 44
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: IN
67897: IFFALSE 67918
// points := [ 14 , 50 , 16 ] ;
67899: LD_ADDR_VAR 0 9
67903: PUSH
67904: LD_INT 14
67906: PUSH
67907: LD_INT 50
67909: PUSH
67910: LD_INT 16
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
67918: LD_VAR 0 6
67922: PPUSH
67923: CALL_OW 264
67927: PUSH
67928: LD_INT 6
67930: PUSH
67931: LD_INT 46
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: IN
67938: IFFALSE 67959
// points := [ 32 , 120 , 70 ] ;
67940: LD_ADDR_VAR 0 9
67944: PUSH
67945: LD_INT 32
67947: PUSH
67948: LD_INT 120
67950: PUSH
67951: LD_INT 70
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
67959: LD_VAR 0 6
67963: PPUSH
67964: CALL_OW 264
67968: PUSH
67969: LD_INT 7
67971: PUSH
67972: LD_INT 28
67974: PUSH
67975: LD_INT 45
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: IN
67983: IFFALSE 68004
// points := [ 35 , 20 , 45 ] ;
67985: LD_ADDR_VAR 0 9
67989: PUSH
67990: LD_INT 35
67992: PUSH
67993: LD_INT 20
67995: PUSH
67996: LD_INT 45
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
68004: LD_VAR 0 6
68008: PPUSH
68009: CALL_OW 264
68013: PUSH
68014: LD_INT 47
68016: PUSH
68017: EMPTY
68018: LIST
68019: IN
68020: IFFALSE 68041
// points := [ 67 , 45 , 75 ] ;
68022: LD_ADDR_VAR 0 9
68026: PUSH
68027: LD_INT 67
68029: PUSH
68030: LD_INT 45
68032: PUSH
68033: LD_INT 75
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
68041: LD_VAR 0 6
68045: PPUSH
68046: CALL_OW 264
68050: PUSH
68051: LD_INT 26
68053: PUSH
68054: EMPTY
68055: LIST
68056: IN
68057: IFFALSE 68078
// points := [ 120 , 30 , 80 ] ;
68059: LD_ADDR_VAR 0 9
68063: PUSH
68064: LD_INT 120
68066: PUSH
68067: LD_INT 30
68069: PUSH
68070: LD_INT 80
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
68078: LD_VAR 0 6
68082: PPUSH
68083: CALL_OW 264
68087: PUSH
68088: LD_INT 22
68090: PUSH
68091: EMPTY
68092: LIST
68093: IN
68094: IFFALSE 68115
// points := [ 40 , 1 , 1 ] ;
68096: LD_ADDR_VAR 0 9
68100: PUSH
68101: LD_INT 40
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: LD_INT 1
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
68115: LD_VAR 0 6
68119: PPUSH
68120: CALL_OW 264
68124: PUSH
68125: LD_INT 29
68127: PUSH
68128: EMPTY
68129: LIST
68130: IN
68131: IFFALSE 68152
// points := [ 70 , 200 , 400 ] ;
68133: LD_ADDR_VAR 0 9
68137: PUSH
68138: LD_INT 70
68140: PUSH
68141: LD_INT 200
68143: PUSH
68144: LD_INT 400
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
68152: LD_VAR 0 6
68156: PPUSH
68157: CALL_OW 264
68161: PUSH
68162: LD_INT 14
68164: PUSH
68165: LD_INT 53
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: IN
68172: IFFALSE 68193
// points := [ 40 , 10 , 20 ] ;
68174: LD_ADDR_VAR 0 9
68178: PUSH
68179: LD_INT 40
68181: PUSH
68182: LD_INT 10
68184: PUSH
68185: LD_INT 20
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
68193: LD_VAR 0 6
68197: PPUSH
68198: CALL_OW 264
68202: PUSH
68203: LD_INT 9
68205: PUSH
68206: EMPTY
68207: LIST
68208: IN
68209: IFFALSE 68230
// points := [ 5 , 70 , 20 ] ;
68211: LD_ADDR_VAR 0 9
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: LD_INT 70
68221: PUSH
68222: LD_INT 20
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
68230: LD_VAR 0 6
68234: PPUSH
68235: CALL_OW 264
68239: PUSH
68240: LD_INT 10
68242: PUSH
68243: EMPTY
68244: LIST
68245: IN
68246: IFFALSE 68267
// points := [ 35 , 110 , 70 ] ;
68248: LD_ADDR_VAR 0 9
68252: PUSH
68253: LD_INT 35
68255: PUSH
68256: LD_INT 110
68258: PUSH
68259: LD_INT 70
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
68267: LD_VAR 0 6
68271: PPUSH
68272: CALL_OW 265
68276: PUSH
68277: LD_INT 25
68279: EQUAL
68280: IFFALSE 68301
// points := [ 80 , 65 , 100 ] ;
68282: LD_ADDR_VAR 0 9
68286: PUSH
68287: LD_INT 80
68289: PUSH
68290: LD_INT 65
68292: PUSH
68293: LD_INT 100
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: LIST
68300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
68301: LD_VAR 0 6
68305: PPUSH
68306: CALL_OW 263
68310: PUSH
68311: LD_INT 1
68313: EQUAL
68314: IFFALSE 68349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
68316: LD_ADDR_VAR 0 10
68320: PUSH
68321: LD_VAR 0 10
68325: PUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: CALL_OW 311
68335: PPUSH
68336: LD_INT 3
68338: PPUSH
68339: CALL_OW 259
68343: PUSH
68344: LD_INT 4
68346: MUL
68347: MUL
68348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
68349: LD_VAR 0 6
68353: PPUSH
68354: CALL_OW 263
68358: PUSH
68359: LD_INT 2
68361: EQUAL
68362: IFFALSE 68413
// begin j := IsControledBy ( i ) ;
68364: LD_ADDR_VAR 0 7
68368: PUSH
68369: LD_VAR 0 6
68373: PPUSH
68374: CALL_OW 312
68378: ST_TO_ADDR
// if j then
68379: LD_VAR 0 7
68383: IFFALSE 68413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
68385: LD_ADDR_VAR 0 10
68389: PUSH
68390: LD_VAR 0 10
68394: PUSH
68395: LD_VAR 0 7
68399: PPUSH
68400: LD_INT 3
68402: PPUSH
68403: CALL_OW 259
68407: PUSH
68408: LD_INT 3
68410: MUL
68411: MUL
68412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
68413: LD_VAR 0 6
68417: PPUSH
68418: CALL_OW 264
68422: PUSH
68423: LD_INT 5
68425: PUSH
68426: LD_INT 6
68428: PUSH
68429: LD_INT 46
68431: PUSH
68432: LD_INT 44
68434: PUSH
68435: LD_INT 47
68437: PUSH
68438: LD_INT 45
68440: PUSH
68441: LD_INT 28
68443: PUSH
68444: LD_INT 7
68446: PUSH
68447: LD_INT 27
68449: PUSH
68450: LD_INT 29
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: IN
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: LD_INT 52
68473: PPUSH
68474: CALL_OW 321
68478: PUSH
68479: LD_INT 2
68481: EQUAL
68482: AND
68483: IFFALSE 68500
// bpoints := bpoints * 1.2 ;
68485: LD_ADDR_VAR 0 10
68489: PUSH
68490: LD_VAR 0 10
68494: PUSH
68495: LD_REAL  1.20000000000000E+0000
68498: MUL
68499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
68500: LD_VAR 0 6
68504: PPUSH
68505: CALL_OW 264
68509: PUSH
68510: LD_INT 6
68512: PUSH
68513: LD_INT 46
68515: PUSH
68516: LD_INT 47
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: IN
68524: IFFALSE 68541
// bpoints := bpoints * 1.2 ;
68526: LD_ADDR_VAR 0 10
68530: PUSH
68531: LD_VAR 0 10
68535: PUSH
68536: LD_REAL  1.20000000000000E+0000
68539: MUL
68540: ST_TO_ADDR
// end ; unit_building :
68541: GO 68555
68543: LD_INT 3
68545: DOUBLE
68546: EQUAL
68547: IFTRUE 68551
68549: GO 68554
68551: POP
// ; end ;
68552: GO 68555
68554: POP
// for j = 1 to 3 do
68555: LD_ADDR_VAR 0 7
68559: PUSH
68560: DOUBLE
68561: LD_INT 1
68563: DEC
68564: ST_TO_ADDR
68565: LD_INT 3
68567: PUSH
68568: FOR_TO
68569: IFFALSE 68622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
68571: LD_ADDR_VAR 0 5
68575: PUSH
68576: LD_VAR 0 5
68580: PPUSH
68581: LD_VAR 0 7
68585: PPUSH
68586: LD_VAR 0 5
68590: PUSH
68591: LD_VAR 0 7
68595: ARRAY
68596: PUSH
68597: LD_VAR 0 9
68601: PUSH
68602: LD_VAR 0 7
68606: ARRAY
68607: PUSH
68608: LD_VAR 0 10
68612: MUL
68613: PLUS
68614: PPUSH
68615: CALL_OW 1
68619: ST_TO_ADDR
68620: GO 68568
68622: POP
68623: POP
// end ;
68624: GO 67107
68626: POP
68627: POP
// result := Replace ( result , 4 , tmp ) ;
68628: LD_ADDR_VAR 0 5
68632: PUSH
68633: LD_VAR 0 5
68637: PPUSH
68638: LD_INT 4
68640: PPUSH
68641: LD_VAR 0 8
68645: PPUSH
68646: CALL_OW 1
68650: ST_TO_ADDR
// end ;
68651: LD_VAR 0 5
68655: RET
// export function DangerAtRange ( unit , range ) ; begin
68656: LD_INT 0
68658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
68659: LD_ADDR_VAR 0 3
68663: PUSH
68664: LD_VAR 0 1
68668: PPUSH
68669: CALL_OW 255
68673: PPUSH
68674: LD_VAR 0 1
68678: PPUSH
68679: CALL_OW 250
68683: PPUSH
68684: LD_VAR 0 1
68688: PPUSH
68689: CALL_OW 251
68693: PPUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: CALL 66959 0 4
68703: ST_TO_ADDR
// end ;
68704: LD_VAR 0 3
68708: RET
// export function DangerInArea ( side , area ) ; begin
68709: LD_INT 0
68711: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
68712: LD_ADDR_VAR 0 3
68716: PUSH
68717: LD_VAR 0 2
68721: PPUSH
68722: LD_INT 81
68724: PUSH
68725: LD_VAR 0 1
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PPUSH
68734: CALL_OW 70
68738: ST_TO_ADDR
// end ;
68739: LD_VAR 0 3
68743: RET
// export function IsExtension ( b ) ; begin
68744: LD_INT 0
68746: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
68747: LD_ADDR_VAR 0 2
68751: PUSH
68752: LD_VAR 0 1
68756: PUSH
68757: LD_INT 23
68759: PUSH
68760: LD_INT 20
68762: PUSH
68763: LD_INT 22
68765: PUSH
68766: LD_INT 17
68768: PUSH
68769: LD_INT 24
68771: PUSH
68772: LD_INT 21
68774: PUSH
68775: LD_INT 19
68777: PUSH
68778: LD_INT 16
68780: PUSH
68781: LD_INT 25
68783: PUSH
68784: LD_INT 18
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: IN
68799: ST_TO_ADDR
// end ;
68800: LD_VAR 0 2
68804: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
68805: LD_INT 0
68807: PPUSH
68808: PPUSH
68809: PPUSH
// result := [ ] ;
68810: LD_ADDR_VAR 0 3
68814: PUSH
68815: EMPTY
68816: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
68817: LD_ADDR_VAR 0 4
68821: PUSH
68822: LD_VAR 0 2
68826: PPUSH
68827: LD_INT 21
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PPUSH
68837: CALL_OW 70
68841: ST_TO_ADDR
// if not tmp then
68842: LD_VAR 0 4
68846: NOT
68847: IFFALSE 68851
// exit ;
68849: GO 68909
// for i in tmp do
68851: LD_ADDR_VAR 0 5
68855: PUSH
68856: LD_VAR 0 4
68860: PUSH
68861: FOR_IN
68862: IFFALSE 68897
// if GetBase ( i ) <> base then
68864: LD_VAR 0 5
68868: PPUSH
68869: CALL_OW 274
68873: PUSH
68874: LD_VAR 0 1
68878: NONEQUAL
68879: IFFALSE 68895
// ComLinkToBase ( base , i ) ;
68881: LD_VAR 0 1
68885: PPUSH
68886: LD_VAR 0 5
68890: PPUSH
68891: CALL_OW 169
68895: GO 68861
68897: POP
68898: POP
// result := tmp ;
68899: LD_ADDR_VAR 0 3
68903: PUSH
68904: LD_VAR 0 4
68908: ST_TO_ADDR
// end ;
68909: LD_VAR 0 3
68913: RET
// export function ComComplete ( unit , b ) ; var i ; begin
68914: LD_INT 0
68916: PPUSH
68917: PPUSH
// if BuildingStatus ( b ) = bs_build then
68918: LD_VAR 0 2
68922: PPUSH
68923: CALL_OW 461
68927: PUSH
68928: LD_INT 1
68930: EQUAL
68931: IFFALSE 68991
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
68933: LD_VAR 0 1
68937: PPUSH
68938: LD_STRING h
68940: PUSH
68941: LD_VAR 0 2
68945: PPUSH
68946: CALL_OW 250
68950: PUSH
68951: LD_VAR 0 2
68955: PPUSH
68956: CALL_OW 251
68960: PUSH
68961: LD_VAR 0 2
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: PPUSH
68987: CALL_OW 446
// end ;
68991: LD_VAR 0 3
68995: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
68996: LD_INT 0
68998: PPUSH
68999: PPUSH
69000: PPUSH
69001: PPUSH
69002: PPUSH
69003: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
69004: LD_VAR 0 1
69008: NOT
69009: PUSH
69010: LD_VAR 0 1
69014: PPUSH
69015: CALL_OW 263
69019: PUSH
69020: LD_INT 2
69022: EQUAL
69023: NOT
69024: OR
69025: IFFALSE 69029
// exit ;
69027: GO 69345
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
69029: LD_ADDR_VAR 0 6
69033: PUSH
69034: LD_INT 22
69036: PUSH
69037: LD_VAR 0 1
69041: PPUSH
69042: CALL_OW 255
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: LD_INT 30
69056: PUSH
69057: LD_INT 36
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 34
69066: PUSH
69067: LD_INT 31
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PPUSH
69083: CALL_OW 69
69087: ST_TO_ADDR
// if not tmp then
69088: LD_VAR 0 6
69092: NOT
69093: IFFALSE 69097
// exit ;
69095: GO 69345
// result := [ ] ;
69097: LD_ADDR_VAR 0 2
69101: PUSH
69102: EMPTY
69103: ST_TO_ADDR
// for i in tmp do
69104: LD_ADDR_VAR 0 3
69108: PUSH
69109: LD_VAR 0 6
69113: PUSH
69114: FOR_IN
69115: IFFALSE 69186
// begin t := UnitsInside ( i ) ;
69117: LD_ADDR_VAR 0 4
69121: PUSH
69122: LD_VAR 0 3
69126: PPUSH
69127: CALL_OW 313
69131: ST_TO_ADDR
// if t then
69132: LD_VAR 0 4
69136: IFFALSE 69184
// for j in t do
69138: LD_ADDR_VAR 0 7
69142: PUSH
69143: LD_VAR 0 4
69147: PUSH
69148: FOR_IN
69149: IFFALSE 69182
// result := Insert ( result , result + 1 , j ) ;
69151: LD_ADDR_VAR 0 2
69155: PUSH
69156: LD_VAR 0 2
69160: PPUSH
69161: LD_VAR 0 2
69165: PUSH
69166: LD_INT 1
69168: PLUS
69169: PPUSH
69170: LD_VAR 0 7
69174: PPUSH
69175: CALL_OW 2
69179: ST_TO_ADDR
69180: GO 69148
69182: POP
69183: POP
// end ;
69184: GO 69114
69186: POP
69187: POP
// if not result then
69188: LD_VAR 0 2
69192: NOT
69193: IFFALSE 69197
// exit ;
69195: GO 69345
// mech := result [ 1 ] ;
69197: LD_ADDR_VAR 0 5
69201: PUSH
69202: LD_VAR 0 2
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: ST_TO_ADDR
// if result > 1 then
69211: LD_VAR 0 2
69215: PUSH
69216: LD_INT 1
69218: GREATER
69219: IFFALSE 69331
// for i = 2 to result do
69221: LD_ADDR_VAR 0 3
69225: PUSH
69226: DOUBLE
69227: LD_INT 2
69229: DEC
69230: ST_TO_ADDR
69231: LD_VAR 0 2
69235: PUSH
69236: FOR_TO
69237: IFFALSE 69329
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
69239: LD_ADDR_VAR 0 4
69243: PUSH
69244: LD_VAR 0 2
69248: PUSH
69249: LD_VAR 0 3
69253: ARRAY
69254: PPUSH
69255: LD_INT 3
69257: PPUSH
69258: CALL_OW 259
69262: PUSH
69263: LD_VAR 0 2
69267: PUSH
69268: LD_VAR 0 3
69272: ARRAY
69273: PPUSH
69274: CALL_OW 432
69278: MINUS
69279: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
69280: LD_VAR 0 4
69284: PUSH
69285: LD_VAR 0 5
69289: PPUSH
69290: LD_INT 3
69292: PPUSH
69293: CALL_OW 259
69297: PUSH
69298: LD_VAR 0 5
69302: PPUSH
69303: CALL_OW 432
69307: MINUS
69308: GREATEREQUAL
69309: IFFALSE 69327
// mech := result [ i ] ;
69311: LD_ADDR_VAR 0 5
69315: PUSH
69316: LD_VAR 0 2
69320: PUSH
69321: LD_VAR 0 3
69325: ARRAY
69326: ST_TO_ADDR
// end ;
69327: GO 69236
69329: POP
69330: POP
// ComLinkTo ( vehicle , mech ) ;
69331: LD_VAR 0 1
69335: PPUSH
69336: LD_VAR 0 5
69340: PPUSH
69341: CALL_OW 135
// end ;
69345: LD_VAR 0 2
69349: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
69350: LD_INT 0
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
69356: PPUSH
69357: PPUSH
69358: PPUSH
69359: PPUSH
69360: PPUSH
69361: PPUSH
69362: PPUSH
69363: PPUSH
69364: PPUSH
// result := [ ] ;
69365: LD_ADDR_VAR 0 7
69369: PUSH
69370: EMPTY
69371: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
69372: LD_VAR 0 1
69376: PPUSH
69377: CALL_OW 266
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: IN
69392: NOT
69393: IFFALSE 69397
// exit ;
69395: GO 71028
// if name then
69397: LD_VAR 0 3
69401: IFFALSE 69417
// SetBName ( base_dep , name ) ;
69403: LD_VAR 0 1
69407: PPUSH
69408: LD_VAR 0 3
69412: PPUSH
69413: CALL_OW 500
// base := GetBase ( base_dep ) ;
69417: LD_ADDR_VAR 0 15
69421: PUSH
69422: LD_VAR 0 1
69426: PPUSH
69427: CALL_OW 274
69431: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
69432: LD_ADDR_VAR 0 16
69436: PUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: CALL_OW 255
69446: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
69447: LD_ADDR_VAR 0 17
69451: PUSH
69452: LD_VAR 0 1
69456: PPUSH
69457: CALL_OW 248
69461: ST_TO_ADDR
// if sources then
69462: LD_VAR 0 5
69466: IFFALSE 69513
// for i = 1 to 3 do
69468: LD_ADDR_VAR 0 8
69472: PUSH
69473: DOUBLE
69474: LD_INT 1
69476: DEC
69477: ST_TO_ADDR
69478: LD_INT 3
69480: PUSH
69481: FOR_TO
69482: IFFALSE 69511
// AddResourceType ( base , i , sources [ i ] ) ;
69484: LD_VAR 0 15
69488: PPUSH
69489: LD_VAR 0 8
69493: PPUSH
69494: LD_VAR 0 5
69498: PUSH
69499: LD_VAR 0 8
69503: ARRAY
69504: PPUSH
69505: CALL_OW 276
69509: GO 69481
69511: POP
69512: POP
// buildings := GetBaseBuildings ( base , area ) ;
69513: LD_ADDR_VAR 0 18
69517: PUSH
69518: LD_VAR 0 15
69522: PPUSH
69523: LD_VAR 0 2
69527: PPUSH
69528: CALL 68805 0 2
69532: ST_TO_ADDR
// InitHc ;
69533: CALL_OW 19
// InitUc ;
69537: CALL_OW 18
// uc_side := side ;
69541: LD_ADDR_OWVAR 20
69545: PUSH
69546: LD_VAR 0 16
69550: ST_TO_ADDR
// uc_nation := nation ;
69551: LD_ADDR_OWVAR 21
69555: PUSH
69556: LD_VAR 0 17
69560: ST_TO_ADDR
// if buildings then
69561: LD_VAR 0 18
69565: IFFALSE 70887
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
69567: LD_ADDR_VAR 0 19
69571: PUSH
69572: LD_VAR 0 18
69576: PPUSH
69577: LD_INT 2
69579: PUSH
69580: LD_INT 30
69582: PUSH
69583: LD_INT 29
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 30
69592: PUSH
69593: LD_INT 30
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: PPUSH
69605: CALL_OW 72
69609: ST_TO_ADDR
// if tmp then
69610: LD_VAR 0 19
69614: IFFALSE 69662
// for i in tmp do
69616: LD_ADDR_VAR 0 8
69620: PUSH
69621: LD_VAR 0 19
69625: PUSH
69626: FOR_IN
69627: IFFALSE 69660
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
69629: LD_VAR 0 8
69633: PPUSH
69634: CALL_OW 250
69638: PPUSH
69639: LD_VAR 0 8
69643: PPUSH
69644: CALL_OW 251
69648: PPUSH
69649: LD_VAR 0 16
69653: PPUSH
69654: CALL_OW 441
69658: GO 69626
69660: POP
69661: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
69662: LD_VAR 0 18
69666: PPUSH
69667: LD_INT 2
69669: PUSH
69670: LD_INT 30
69672: PUSH
69673: LD_INT 32
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 30
69682: PUSH
69683: LD_INT 33
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: PPUSH
69695: CALL_OW 72
69699: IFFALSE 69787
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
69701: LD_ADDR_VAR 0 8
69705: PUSH
69706: LD_VAR 0 18
69710: PPUSH
69711: LD_INT 2
69713: PUSH
69714: LD_INT 30
69716: PUSH
69717: LD_INT 32
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 30
69726: PUSH
69727: LD_INT 33
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: PPUSH
69739: CALL_OW 72
69743: PUSH
69744: FOR_IN
69745: IFFALSE 69785
// begin if not GetBWeapon ( i ) then
69747: LD_VAR 0 8
69751: PPUSH
69752: CALL_OW 269
69756: NOT
69757: IFFALSE 69783
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
69759: LD_VAR 0 8
69763: PPUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_VAR 0 2
69773: PPUSH
69774: CALL 71033 0 2
69778: PPUSH
69779: CALL_OW 431
// end ;
69783: GO 69744
69785: POP
69786: POP
// end ; for i = 1 to personel do
69787: LD_ADDR_VAR 0 8
69791: PUSH
69792: DOUBLE
69793: LD_INT 1
69795: DEC
69796: ST_TO_ADDR
69797: LD_VAR 0 6
69801: PUSH
69802: FOR_TO
69803: IFFALSE 70867
// begin if i > 4 then
69805: LD_VAR 0 8
69809: PUSH
69810: LD_INT 4
69812: GREATER
69813: IFFALSE 69817
// break ;
69815: GO 70867
// case i of 1 :
69817: LD_VAR 0 8
69821: PUSH
69822: LD_INT 1
69824: DOUBLE
69825: EQUAL
69826: IFTRUE 69830
69828: GO 69910
69830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
69831: LD_ADDR_VAR 0 12
69835: PUSH
69836: LD_VAR 0 18
69840: PPUSH
69841: LD_INT 22
69843: PUSH
69844: LD_VAR 0 16
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 58
69855: PUSH
69856: EMPTY
69857: LIST
69858: PUSH
69859: LD_INT 2
69861: PUSH
69862: LD_INT 30
69864: PUSH
69865: LD_INT 32
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 30
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 30
69884: PUSH
69885: LD_INT 5
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: PPUSH
69903: CALL_OW 72
69907: ST_TO_ADDR
69908: GO 70132
69910: LD_INT 2
69912: DOUBLE
69913: EQUAL
69914: IFTRUE 69918
69916: GO 69980
69918: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
69919: LD_ADDR_VAR 0 12
69923: PUSH
69924: LD_VAR 0 18
69928: PPUSH
69929: LD_INT 22
69931: PUSH
69932: LD_VAR 0 16
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 2
69943: PUSH
69944: LD_INT 30
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 30
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: LIST
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PPUSH
69973: CALL_OW 72
69977: ST_TO_ADDR
69978: GO 70132
69980: LD_INT 3
69982: DOUBLE
69983: EQUAL
69984: IFTRUE 69988
69986: GO 70050
69988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
69989: LD_ADDR_VAR 0 12
69993: PUSH
69994: LD_VAR 0 18
69998: PPUSH
69999: LD_INT 22
70001: PUSH
70002: LD_VAR 0 16
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: LD_INT 30
70016: PUSH
70017: LD_INT 2
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 30
70026: PUSH
70027: LD_INT 3
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PPUSH
70043: CALL_OW 72
70047: ST_TO_ADDR
70048: GO 70132
70050: LD_INT 4
70052: DOUBLE
70053: EQUAL
70054: IFTRUE 70058
70056: GO 70131
70058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
70059: LD_ADDR_VAR 0 12
70063: PUSH
70064: LD_VAR 0 18
70068: PPUSH
70069: LD_INT 22
70071: PUSH
70072: LD_VAR 0 16
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 2
70083: PUSH
70084: LD_INT 30
70086: PUSH
70087: LD_INT 6
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 30
70096: PUSH
70097: LD_INT 7
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 30
70106: PUSH
70107: LD_INT 8
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PPUSH
70124: CALL_OW 72
70128: ST_TO_ADDR
70129: GO 70132
70131: POP
// if i = 1 then
70132: LD_VAR 0 8
70136: PUSH
70137: LD_INT 1
70139: EQUAL
70140: IFFALSE 70251
// begin tmp := [ ] ;
70142: LD_ADDR_VAR 0 19
70146: PUSH
70147: EMPTY
70148: ST_TO_ADDR
// for j in f do
70149: LD_ADDR_VAR 0 9
70153: PUSH
70154: LD_VAR 0 12
70158: PUSH
70159: FOR_IN
70160: IFFALSE 70233
// if GetBType ( j ) = b_bunker then
70162: LD_VAR 0 9
70166: PPUSH
70167: CALL_OW 266
70171: PUSH
70172: LD_INT 32
70174: EQUAL
70175: IFFALSE 70202
// tmp := Insert ( tmp , 1 , j ) else
70177: LD_ADDR_VAR 0 19
70181: PUSH
70182: LD_VAR 0 19
70186: PPUSH
70187: LD_INT 1
70189: PPUSH
70190: LD_VAR 0 9
70194: PPUSH
70195: CALL_OW 2
70199: ST_TO_ADDR
70200: GO 70231
// tmp := Insert ( tmp , tmp + 1 , j ) ;
70202: LD_ADDR_VAR 0 19
70206: PUSH
70207: LD_VAR 0 19
70211: PPUSH
70212: LD_VAR 0 19
70216: PUSH
70217: LD_INT 1
70219: PLUS
70220: PPUSH
70221: LD_VAR 0 9
70225: PPUSH
70226: CALL_OW 2
70230: ST_TO_ADDR
70231: GO 70159
70233: POP
70234: POP
// if tmp then
70235: LD_VAR 0 19
70239: IFFALSE 70251
// f := tmp ;
70241: LD_ADDR_VAR 0 12
70245: PUSH
70246: LD_VAR 0 19
70250: ST_TO_ADDR
// end ; x := personel [ i ] ;
70251: LD_ADDR_VAR 0 13
70255: PUSH
70256: LD_VAR 0 6
70260: PUSH
70261: LD_VAR 0 8
70265: ARRAY
70266: ST_TO_ADDR
// if x = - 1 then
70267: LD_VAR 0 13
70271: PUSH
70272: LD_INT 1
70274: NEG
70275: EQUAL
70276: IFFALSE 70485
// begin for j in f do
70278: LD_ADDR_VAR 0 9
70282: PUSH
70283: LD_VAR 0 12
70287: PUSH
70288: FOR_IN
70289: IFFALSE 70481
// repeat InitHc ;
70291: CALL_OW 19
// if GetBType ( j ) = b_barracks then
70295: LD_VAR 0 9
70299: PPUSH
70300: CALL_OW 266
70304: PUSH
70305: LD_INT 5
70307: EQUAL
70308: IFFALSE 70378
// begin if UnitsInside ( j ) < 3 then
70310: LD_VAR 0 9
70314: PPUSH
70315: CALL_OW 313
70319: PUSH
70320: LD_INT 3
70322: LESS
70323: IFFALSE 70359
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
70325: LD_INT 0
70327: PPUSH
70328: LD_INT 5
70330: PUSH
70331: LD_INT 8
70333: PUSH
70334: LD_INT 9
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: PUSH
70342: LD_VAR 0 17
70346: ARRAY
70347: PPUSH
70348: LD_VAR 0 4
70352: PPUSH
70353: CALL_OW 380
70357: GO 70376
// PrepareHuman ( false , i , skill ) ;
70359: LD_INT 0
70361: PPUSH
70362: LD_VAR 0 8
70366: PPUSH
70367: LD_VAR 0 4
70371: PPUSH
70372: CALL_OW 380
// end else
70376: GO 70395
// PrepareHuman ( false , i , skill ) ;
70378: LD_INT 0
70380: PPUSH
70381: LD_VAR 0 8
70385: PPUSH
70386: LD_VAR 0 4
70390: PPUSH
70391: CALL_OW 380
// un := CreateHuman ;
70395: LD_ADDR_VAR 0 14
70399: PUSH
70400: CALL_OW 44
70404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
70405: LD_ADDR_VAR 0 7
70409: PUSH
70410: LD_VAR 0 7
70414: PPUSH
70415: LD_INT 1
70417: PPUSH
70418: LD_VAR 0 14
70422: PPUSH
70423: CALL_OW 2
70427: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
70428: LD_VAR 0 14
70432: PPUSH
70433: LD_VAR 0 9
70437: PPUSH
70438: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
70442: LD_VAR 0 9
70446: PPUSH
70447: CALL_OW 313
70451: PUSH
70452: LD_INT 6
70454: EQUAL
70455: PUSH
70456: LD_VAR 0 9
70460: PPUSH
70461: CALL_OW 266
70465: PUSH
70466: LD_INT 32
70468: PUSH
70469: LD_INT 31
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: IN
70476: OR
70477: IFFALSE 70291
70479: GO 70288
70481: POP
70482: POP
// end else
70483: GO 70865
// for j = 1 to x do
70485: LD_ADDR_VAR 0 9
70489: PUSH
70490: DOUBLE
70491: LD_INT 1
70493: DEC
70494: ST_TO_ADDR
70495: LD_VAR 0 13
70499: PUSH
70500: FOR_TO
70501: IFFALSE 70863
// begin InitHc ;
70503: CALL_OW 19
// if not f then
70507: LD_VAR 0 12
70511: NOT
70512: IFFALSE 70601
// begin PrepareHuman ( false , i , skill ) ;
70514: LD_INT 0
70516: PPUSH
70517: LD_VAR 0 8
70521: PPUSH
70522: LD_VAR 0 4
70526: PPUSH
70527: CALL_OW 380
// un := CreateHuman ;
70531: LD_ADDR_VAR 0 14
70535: PUSH
70536: CALL_OW 44
70540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
70541: LD_ADDR_VAR 0 7
70545: PUSH
70546: LD_VAR 0 7
70550: PPUSH
70551: LD_INT 1
70553: PPUSH
70554: LD_VAR 0 14
70558: PPUSH
70559: CALL_OW 2
70563: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
70564: LD_VAR 0 14
70568: PPUSH
70569: LD_VAR 0 1
70573: PPUSH
70574: CALL_OW 250
70578: PPUSH
70579: LD_VAR 0 1
70583: PPUSH
70584: CALL_OW 251
70588: PPUSH
70589: LD_INT 10
70591: PPUSH
70592: LD_INT 0
70594: PPUSH
70595: CALL_OW 50
// continue ;
70599: GO 70500
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
70601: LD_VAR 0 12
70605: PUSH
70606: LD_INT 1
70608: ARRAY
70609: PPUSH
70610: CALL_OW 313
70614: PUSH
70615: LD_VAR 0 12
70619: PUSH
70620: LD_INT 1
70622: ARRAY
70623: PPUSH
70624: CALL_OW 266
70628: PUSH
70629: LD_INT 32
70631: PUSH
70632: LD_INT 31
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: IN
70639: AND
70640: PUSH
70641: LD_VAR 0 12
70645: PUSH
70646: LD_INT 1
70648: ARRAY
70649: PPUSH
70650: CALL_OW 313
70654: PUSH
70655: LD_INT 6
70657: EQUAL
70658: OR
70659: IFFALSE 70679
// f := Delete ( f , 1 ) ;
70661: LD_ADDR_VAR 0 12
70665: PUSH
70666: LD_VAR 0 12
70670: PPUSH
70671: LD_INT 1
70673: PPUSH
70674: CALL_OW 3
70678: ST_TO_ADDR
// if not f then
70679: LD_VAR 0 12
70683: NOT
70684: IFFALSE 70702
// begin x := x + 2 ;
70686: LD_ADDR_VAR 0 13
70690: PUSH
70691: LD_VAR 0 13
70695: PUSH
70696: LD_INT 2
70698: PLUS
70699: ST_TO_ADDR
// continue ;
70700: GO 70500
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
70702: LD_VAR 0 12
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PPUSH
70711: CALL_OW 266
70715: PUSH
70716: LD_INT 5
70718: EQUAL
70719: IFFALSE 70793
// begin if UnitsInside ( f [ 1 ] ) < 3 then
70721: LD_VAR 0 12
70725: PUSH
70726: LD_INT 1
70728: ARRAY
70729: PPUSH
70730: CALL_OW 313
70734: PUSH
70735: LD_INT 3
70737: LESS
70738: IFFALSE 70774
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
70740: LD_INT 0
70742: PPUSH
70743: LD_INT 5
70745: PUSH
70746: LD_INT 8
70748: PUSH
70749: LD_INT 9
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: PUSH
70757: LD_VAR 0 17
70761: ARRAY
70762: PPUSH
70763: LD_VAR 0 4
70767: PPUSH
70768: CALL_OW 380
70772: GO 70791
// PrepareHuman ( false , i , skill ) ;
70774: LD_INT 0
70776: PPUSH
70777: LD_VAR 0 8
70781: PPUSH
70782: LD_VAR 0 4
70786: PPUSH
70787: CALL_OW 380
// end else
70791: GO 70810
// PrepareHuman ( false , i , skill ) ;
70793: LD_INT 0
70795: PPUSH
70796: LD_VAR 0 8
70800: PPUSH
70801: LD_VAR 0 4
70805: PPUSH
70806: CALL_OW 380
// un := CreateHuman ;
70810: LD_ADDR_VAR 0 14
70814: PUSH
70815: CALL_OW 44
70819: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
70820: LD_ADDR_VAR 0 7
70824: PUSH
70825: LD_VAR 0 7
70829: PPUSH
70830: LD_INT 1
70832: PPUSH
70833: LD_VAR 0 14
70837: PPUSH
70838: CALL_OW 2
70842: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
70843: LD_VAR 0 14
70847: PPUSH
70848: LD_VAR 0 12
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PPUSH
70857: CALL_OW 52
// end ;
70861: GO 70500
70863: POP
70864: POP
// end ;
70865: GO 69802
70867: POP
70868: POP
// result := result ^ buildings ;
70869: LD_ADDR_VAR 0 7
70873: PUSH
70874: LD_VAR 0 7
70878: PUSH
70879: LD_VAR 0 18
70883: ADD
70884: ST_TO_ADDR
// end else
70885: GO 71028
// begin for i = 1 to personel do
70887: LD_ADDR_VAR 0 8
70891: PUSH
70892: DOUBLE
70893: LD_INT 1
70895: DEC
70896: ST_TO_ADDR
70897: LD_VAR 0 6
70901: PUSH
70902: FOR_TO
70903: IFFALSE 71026
// begin if i > 4 then
70905: LD_VAR 0 8
70909: PUSH
70910: LD_INT 4
70912: GREATER
70913: IFFALSE 70917
// break ;
70915: GO 71026
// x := personel [ i ] ;
70917: LD_ADDR_VAR 0 13
70921: PUSH
70922: LD_VAR 0 6
70926: PUSH
70927: LD_VAR 0 8
70931: ARRAY
70932: ST_TO_ADDR
// if x = - 1 then
70933: LD_VAR 0 13
70937: PUSH
70938: LD_INT 1
70940: NEG
70941: EQUAL
70942: IFFALSE 70946
// continue ;
70944: GO 70902
// PrepareHuman ( false , i , skill ) ;
70946: LD_INT 0
70948: PPUSH
70949: LD_VAR 0 8
70953: PPUSH
70954: LD_VAR 0 4
70958: PPUSH
70959: CALL_OW 380
// un := CreateHuman ;
70963: LD_ADDR_VAR 0 14
70967: PUSH
70968: CALL_OW 44
70972: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
70973: LD_VAR 0 14
70977: PPUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: CALL_OW 250
70987: PPUSH
70988: LD_VAR 0 1
70992: PPUSH
70993: CALL_OW 251
70997: PPUSH
70998: LD_INT 10
71000: PPUSH
71001: LD_INT 0
71003: PPUSH
71004: CALL_OW 50
// result := result ^ un ;
71008: LD_ADDR_VAR 0 7
71012: PUSH
71013: LD_VAR 0 7
71017: PUSH
71018: LD_VAR 0 14
71022: ADD
71023: ST_TO_ADDR
// end ;
71024: GO 70902
71026: POP
71027: POP
// end ; end ;
71028: LD_VAR 0 7
71032: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
71033: LD_INT 0
71035: PPUSH
71036: PPUSH
71037: PPUSH
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
71044: PPUSH
71045: PPUSH
71046: PPUSH
71047: PPUSH
71048: PPUSH
71049: PPUSH
71050: PPUSH
// result := false ;
71051: LD_ADDR_VAR 0 3
71055: PUSH
71056: LD_INT 0
71058: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
71059: LD_VAR 0 1
71063: NOT
71064: PUSH
71065: LD_VAR 0 1
71069: PPUSH
71070: CALL_OW 266
71074: PUSH
71075: LD_INT 32
71077: PUSH
71078: LD_INT 33
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: IN
71085: NOT
71086: OR
71087: IFFALSE 71091
// exit ;
71089: GO 72227
// nat := GetNation ( tower ) ;
71091: LD_ADDR_VAR 0 12
71095: PUSH
71096: LD_VAR 0 1
71100: PPUSH
71101: CALL_OW 248
71105: ST_TO_ADDR
// side := GetSide ( tower ) ;
71106: LD_ADDR_VAR 0 16
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: CALL_OW 255
71120: ST_TO_ADDR
// x := GetX ( tower ) ;
71121: LD_ADDR_VAR 0 10
71125: PUSH
71126: LD_VAR 0 1
71130: PPUSH
71131: CALL_OW 250
71135: ST_TO_ADDR
// y := GetY ( tower ) ;
71136: LD_ADDR_VAR 0 11
71140: PUSH
71141: LD_VAR 0 1
71145: PPUSH
71146: CALL_OW 251
71150: ST_TO_ADDR
// if not x or not y then
71151: LD_VAR 0 10
71155: NOT
71156: PUSH
71157: LD_VAR 0 11
71161: NOT
71162: OR
71163: IFFALSE 71167
// exit ;
71165: GO 72227
// weapon := 0 ;
71167: LD_ADDR_VAR 0 18
71171: PUSH
71172: LD_INT 0
71174: ST_TO_ADDR
// fac_list := [ ] ;
71175: LD_ADDR_VAR 0 17
71179: PUSH
71180: EMPTY
71181: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
71182: LD_ADDR_VAR 0 6
71186: PUSH
71187: LD_VAR 0 1
71191: PPUSH
71192: CALL_OW 274
71196: PPUSH
71197: LD_VAR 0 2
71201: PPUSH
71202: CALL 68805 0 2
71206: PPUSH
71207: LD_INT 30
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PPUSH
71217: CALL_OW 72
71221: ST_TO_ADDR
// if not factories then
71222: LD_VAR 0 6
71226: NOT
71227: IFFALSE 71231
// exit ;
71229: GO 72227
// for i in factories do
71231: LD_ADDR_VAR 0 8
71235: PUSH
71236: LD_VAR 0 6
71240: PUSH
71241: FOR_IN
71242: IFFALSE 71267
// fac_list := fac_list union AvailableWeaponList ( i ) ;
71244: LD_ADDR_VAR 0 17
71248: PUSH
71249: LD_VAR 0 17
71253: PUSH
71254: LD_VAR 0 8
71258: PPUSH
71259: CALL_OW 478
71263: UNION
71264: ST_TO_ADDR
71265: GO 71241
71267: POP
71268: POP
// if not fac_list then
71269: LD_VAR 0 17
71273: NOT
71274: IFFALSE 71278
// exit ;
71276: GO 72227
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
71278: LD_ADDR_VAR 0 5
71282: PUSH
71283: LD_INT 4
71285: PUSH
71286: LD_INT 5
71288: PUSH
71289: LD_INT 9
71291: PUSH
71292: LD_INT 10
71294: PUSH
71295: LD_INT 6
71297: PUSH
71298: LD_INT 7
71300: PUSH
71301: LD_INT 11
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 27
71315: PUSH
71316: LD_INT 28
71318: PUSH
71319: LD_INT 26
71321: PUSH
71322: LD_INT 30
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 43
71333: PUSH
71334: LD_INT 44
71336: PUSH
71337: LD_INT 46
71339: PUSH
71340: LD_INT 45
71342: PUSH
71343: LD_INT 47
71345: PUSH
71346: LD_INT 49
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: LIST
71361: PUSH
71362: LD_VAR 0 12
71366: ARRAY
71367: ST_TO_ADDR
// for i in list do
71368: LD_ADDR_VAR 0 8
71372: PUSH
71373: LD_VAR 0 5
71377: PUSH
71378: FOR_IN
71379: IFFALSE 71412
// if not i in fac_list then
71381: LD_VAR 0 8
71385: PUSH
71386: LD_VAR 0 17
71390: IN
71391: NOT
71392: IFFALSE 71410
// list := list diff i ;
71394: LD_ADDR_VAR 0 5
71398: PUSH
71399: LD_VAR 0 5
71403: PUSH
71404: LD_VAR 0 8
71408: DIFF
71409: ST_TO_ADDR
71410: GO 71378
71412: POP
71413: POP
// if not list then
71414: LD_VAR 0 5
71418: NOT
71419: IFFALSE 71423
// exit ;
71421: GO 72227
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
71423: LD_VAR 0 12
71427: PUSH
71428: LD_INT 3
71430: EQUAL
71431: PUSH
71432: LD_INT 49
71434: PUSH
71435: LD_VAR 0 5
71439: IN
71440: AND
71441: PUSH
71442: LD_INT 31
71444: PPUSH
71445: LD_VAR 0 16
71449: PPUSH
71450: CALL_OW 321
71454: PUSH
71455: LD_INT 2
71457: EQUAL
71458: AND
71459: IFFALSE 71519
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
71461: LD_INT 22
71463: PUSH
71464: LD_VAR 0 16
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: LD_INT 35
71475: PUSH
71476: LD_INT 49
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 91
71485: PUSH
71486: LD_VAR 0 1
71490: PUSH
71491: LD_INT 10
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: LIST
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: PPUSH
71504: CALL_OW 69
71508: NOT
71509: IFFALSE 71519
// weapon := ru_time_lapser ;
71511: LD_ADDR_VAR 0 18
71515: PUSH
71516: LD_INT 49
71518: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
71519: LD_VAR 0 12
71523: PUSH
71524: LD_INT 1
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: IN
71534: PUSH
71535: LD_INT 11
71537: PUSH
71538: LD_VAR 0 5
71542: IN
71543: PUSH
71544: LD_INT 30
71546: PUSH
71547: LD_VAR 0 5
71551: IN
71552: OR
71553: AND
71554: PUSH
71555: LD_INT 6
71557: PPUSH
71558: LD_VAR 0 16
71562: PPUSH
71563: CALL_OW 321
71567: PUSH
71568: LD_INT 2
71570: EQUAL
71571: AND
71572: IFFALSE 71737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
71574: LD_INT 22
71576: PUSH
71577: LD_VAR 0 16
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: LD_INT 35
71591: PUSH
71592: LD_INT 11
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 35
71601: PUSH
71602: LD_INT 30
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 91
71616: PUSH
71617: LD_VAR 0 1
71621: PUSH
71622: LD_INT 18
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: PPUSH
71635: CALL_OW 69
71639: NOT
71640: PUSH
71641: LD_INT 22
71643: PUSH
71644: LD_VAR 0 16
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 2
71655: PUSH
71656: LD_INT 30
71658: PUSH
71659: LD_INT 32
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 30
71668: PUSH
71669: LD_INT 33
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 91
71683: PUSH
71684: LD_VAR 0 1
71688: PUSH
71689: LD_INT 12
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: LIST
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: LIST
71701: PUSH
71702: EMPTY
71703: LIST
71704: PPUSH
71705: CALL_OW 69
71709: PUSH
71710: LD_INT 2
71712: GREATER
71713: AND
71714: IFFALSE 71737
// weapon := [ us_radar , ar_radar ] [ nat ] ;
71716: LD_ADDR_VAR 0 18
71720: PUSH
71721: LD_INT 11
71723: PUSH
71724: LD_INT 30
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_VAR 0 12
71735: ARRAY
71736: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
71737: LD_VAR 0 18
71741: NOT
71742: PUSH
71743: LD_INT 40
71745: PPUSH
71746: LD_VAR 0 16
71750: PPUSH
71751: CALL_OW 321
71755: PUSH
71756: LD_INT 2
71758: EQUAL
71759: AND
71760: PUSH
71761: LD_INT 7
71763: PUSH
71764: LD_VAR 0 5
71768: IN
71769: PUSH
71770: LD_INT 28
71772: PUSH
71773: LD_VAR 0 5
71777: IN
71778: OR
71779: PUSH
71780: LD_INT 45
71782: PUSH
71783: LD_VAR 0 5
71787: IN
71788: OR
71789: AND
71790: IFFALSE 72044
// begin hex := GetHexInfo ( x , y ) ;
71792: LD_ADDR_VAR 0 4
71796: PUSH
71797: LD_VAR 0 10
71801: PPUSH
71802: LD_VAR 0 11
71806: PPUSH
71807: CALL_OW 546
71811: ST_TO_ADDR
// if hex [ 1 ] then
71812: LD_VAR 0 4
71816: PUSH
71817: LD_INT 1
71819: ARRAY
71820: IFFALSE 71824
// exit ;
71822: GO 72227
// height := hex [ 2 ] ;
71824: LD_ADDR_VAR 0 15
71828: PUSH
71829: LD_VAR 0 4
71833: PUSH
71834: LD_INT 2
71836: ARRAY
71837: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
71838: LD_ADDR_VAR 0 14
71842: PUSH
71843: LD_INT 0
71845: PUSH
71846: LD_INT 2
71848: PUSH
71849: LD_INT 3
71851: PUSH
71852: LD_INT 5
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: ST_TO_ADDR
// for i in tmp do
71861: LD_ADDR_VAR 0 8
71865: PUSH
71866: LD_VAR 0 14
71870: PUSH
71871: FOR_IN
71872: IFFALSE 72042
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
71874: LD_ADDR_VAR 0 9
71878: PUSH
71879: LD_VAR 0 10
71883: PPUSH
71884: LD_VAR 0 8
71888: PPUSH
71889: LD_INT 5
71891: PPUSH
71892: CALL_OW 272
71896: PUSH
71897: LD_VAR 0 11
71901: PPUSH
71902: LD_VAR 0 8
71906: PPUSH
71907: LD_INT 5
71909: PPUSH
71910: CALL_OW 273
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
71919: LD_VAR 0 9
71923: PUSH
71924: LD_INT 1
71926: ARRAY
71927: PPUSH
71928: LD_VAR 0 9
71932: PUSH
71933: LD_INT 2
71935: ARRAY
71936: PPUSH
71937: CALL_OW 488
71941: IFFALSE 72040
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
71943: LD_ADDR_VAR 0 4
71947: PUSH
71948: LD_VAR 0 9
71952: PUSH
71953: LD_INT 1
71955: ARRAY
71956: PPUSH
71957: LD_VAR 0 9
71961: PUSH
71962: LD_INT 2
71964: ARRAY
71965: PPUSH
71966: CALL_OW 546
71970: ST_TO_ADDR
// if hex [ 1 ] then
71971: LD_VAR 0 4
71975: PUSH
71976: LD_INT 1
71978: ARRAY
71979: IFFALSE 71983
// continue ;
71981: GO 71871
// h := hex [ 2 ] ;
71983: LD_ADDR_VAR 0 13
71987: PUSH
71988: LD_VAR 0 4
71992: PUSH
71993: LD_INT 2
71995: ARRAY
71996: ST_TO_ADDR
// if h + 7 < height then
71997: LD_VAR 0 13
72001: PUSH
72002: LD_INT 7
72004: PLUS
72005: PUSH
72006: LD_VAR 0 15
72010: LESS
72011: IFFALSE 72040
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
72013: LD_ADDR_VAR 0 18
72017: PUSH
72018: LD_INT 7
72020: PUSH
72021: LD_INT 28
72023: PUSH
72024: LD_INT 45
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: LD_VAR 0 12
72036: ARRAY
72037: ST_TO_ADDR
// break ;
72038: GO 72042
// end ; end ; end ;
72040: GO 71871
72042: POP
72043: POP
// end ; if not weapon then
72044: LD_VAR 0 18
72048: NOT
72049: IFFALSE 72109
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
72051: LD_ADDR_VAR 0 5
72055: PUSH
72056: LD_VAR 0 5
72060: PUSH
72061: LD_INT 11
72063: PUSH
72064: LD_INT 30
72066: PUSH
72067: LD_INT 49
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: LIST
72074: DIFF
72075: ST_TO_ADDR
// if not list then
72076: LD_VAR 0 5
72080: NOT
72081: IFFALSE 72085
// exit ;
72083: GO 72227
// weapon := list [ rand ( 1 , list ) ] ;
72085: LD_ADDR_VAR 0 18
72089: PUSH
72090: LD_VAR 0 5
72094: PUSH
72095: LD_INT 1
72097: PPUSH
72098: LD_VAR 0 5
72102: PPUSH
72103: CALL_OW 12
72107: ARRAY
72108: ST_TO_ADDR
// end ; if weapon then
72109: LD_VAR 0 18
72113: IFFALSE 72227
// begin tmp := CostOfWeapon ( weapon ) ;
72115: LD_ADDR_VAR 0 14
72119: PUSH
72120: LD_VAR 0 18
72124: PPUSH
72125: CALL_OW 451
72129: ST_TO_ADDR
// j := GetBase ( tower ) ;
72130: LD_ADDR_VAR 0 9
72134: PUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 274
72144: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
72145: LD_VAR 0 9
72149: PPUSH
72150: LD_INT 1
72152: PPUSH
72153: CALL_OW 275
72157: PUSH
72158: LD_VAR 0 14
72162: PUSH
72163: LD_INT 1
72165: ARRAY
72166: GREATEREQUAL
72167: PUSH
72168: LD_VAR 0 9
72172: PPUSH
72173: LD_INT 2
72175: PPUSH
72176: CALL_OW 275
72180: PUSH
72181: LD_VAR 0 14
72185: PUSH
72186: LD_INT 2
72188: ARRAY
72189: GREATEREQUAL
72190: AND
72191: PUSH
72192: LD_VAR 0 9
72196: PPUSH
72197: LD_INT 3
72199: PPUSH
72200: CALL_OW 275
72204: PUSH
72205: LD_VAR 0 14
72209: PUSH
72210: LD_INT 3
72212: ARRAY
72213: GREATEREQUAL
72214: AND
72215: IFFALSE 72227
// result := weapon ;
72217: LD_ADDR_VAR 0 3
72221: PUSH
72222: LD_VAR 0 18
72226: ST_TO_ADDR
// end ; end ;
72227: LD_VAR 0 3
72231: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
72232: LD_INT 0
72234: PPUSH
72235: PPUSH
// result := true ;
72236: LD_ADDR_VAR 0 3
72240: PUSH
72241: LD_INT 1
72243: ST_TO_ADDR
// if array1 = array2 then
72244: LD_VAR 0 1
72248: PUSH
72249: LD_VAR 0 2
72253: EQUAL
72254: IFFALSE 72314
// begin for i = 1 to array1 do
72256: LD_ADDR_VAR 0 4
72260: PUSH
72261: DOUBLE
72262: LD_INT 1
72264: DEC
72265: ST_TO_ADDR
72266: LD_VAR 0 1
72270: PUSH
72271: FOR_TO
72272: IFFALSE 72310
// if array1 [ i ] <> array2 [ i ] then
72274: LD_VAR 0 1
72278: PUSH
72279: LD_VAR 0 4
72283: ARRAY
72284: PUSH
72285: LD_VAR 0 2
72289: PUSH
72290: LD_VAR 0 4
72294: ARRAY
72295: NONEQUAL
72296: IFFALSE 72308
// begin result := false ;
72298: LD_ADDR_VAR 0 3
72302: PUSH
72303: LD_INT 0
72305: ST_TO_ADDR
// break ;
72306: GO 72310
// end ;
72308: GO 72271
72310: POP
72311: POP
// end else
72312: GO 72322
// result := false ;
72314: LD_ADDR_VAR 0 3
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// end ;
72322: LD_VAR 0 3
72326: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
72327: LD_INT 0
72329: PPUSH
72330: PPUSH
72331: PPUSH
// pom := GetBase ( fac ) ;
72332: LD_ADDR_VAR 0 5
72336: PUSH
72337: LD_VAR 0 1
72341: PPUSH
72342: CALL_OW 274
72346: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
72347: LD_ADDR_VAR 0 4
72351: PUSH
72352: LD_VAR 0 2
72356: PUSH
72357: LD_INT 1
72359: ARRAY
72360: PPUSH
72361: LD_VAR 0 2
72365: PUSH
72366: LD_INT 2
72368: ARRAY
72369: PPUSH
72370: LD_VAR 0 2
72374: PUSH
72375: LD_INT 3
72377: ARRAY
72378: PPUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 4
72386: ARRAY
72387: PPUSH
72388: CALL_OW 449
72392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
72393: LD_ADDR_VAR 0 3
72397: PUSH
72398: LD_VAR 0 5
72402: PPUSH
72403: LD_INT 1
72405: PPUSH
72406: CALL_OW 275
72410: PUSH
72411: LD_VAR 0 4
72415: PUSH
72416: LD_INT 1
72418: ARRAY
72419: GREATEREQUAL
72420: PUSH
72421: LD_VAR 0 5
72425: PPUSH
72426: LD_INT 2
72428: PPUSH
72429: CALL_OW 275
72433: PUSH
72434: LD_VAR 0 4
72438: PUSH
72439: LD_INT 2
72441: ARRAY
72442: GREATEREQUAL
72443: AND
72444: PUSH
72445: LD_VAR 0 5
72449: PPUSH
72450: LD_INT 3
72452: PPUSH
72453: CALL_OW 275
72457: PUSH
72458: LD_VAR 0 4
72462: PUSH
72463: LD_INT 3
72465: ARRAY
72466: GREATEREQUAL
72467: AND
72468: ST_TO_ADDR
// end ;
72469: LD_VAR 0 3
72473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
72474: LD_INT 0
72476: PPUSH
72477: PPUSH
72478: PPUSH
72479: PPUSH
// pom := GetBase ( building ) ;
72480: LD_ADDR_VAR 0 3
72484: PUSH
72485: LD_VAR 0 1
72489: PPUSH
72490: CALL_OW 274
72494: ST_TO_ADDR
// if not pom then
72495: LD_VAR 0 3
72499: NOT
72500: IFFALSE 72504
// exit ;
72502: GO 72674
// btype := GetBType ( building ) ;
72504: LD_ADDR_VAR 0 5
72508: PUSH
72509: LD_VAR 0 1
72513: PPUSH
72514: CALL_OW 266
72518: ST_TO_ADDR
// if btype = b_armoury then
72519: LD_VAR 0 5
72523: PUSH
72524: LD_INT 4
72526: EQUAL
72527: IFFALSE 72537
// btype := b_barracks ;
72529: LD_ADDR_VAR 0 5
72533: PUSH
72534: LD_INT 5
72536: ST_TO_ADDR
// if btype = b_depot then
72537: LD_VAR 0 5
72541: PUSH
72542: LD_INT 0
72544: EQUAL
72545: IFFALSE 72555
// btype := b_warehouse ;
72547: LD_ADDR_VAR 0 5
72551: PUSH
72552: LD_INT 1
72554: ST_TO_ADDR
// if btype = b_workshop then
72555: LD_VAR 0 5
72559: PUSH
72560: LD_INT 2
72562: EQUAL
72563: IFFALSE 72573
// btype := b_factory ;
72565: LD_ADDR_VAR 0 5
72569: PUSH
72570: LD_INT 3
72572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
72573: LD_ADDR_VAR 0 4
72577: PUSH
72578: LD_VAR 0 5
72582: PPUSH
72583: LD_VAR 0 1
72587: PPUSH
72588: CALL_OW 248
72592: PPUSH
72593: CALL_OW 450
72597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
72598: LD_ADDR_VAR 0 2
72602: PUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: LD_INT 1
72610: PPUSH
72611: CALL_OW 275
72615: PUSH
72616: LD_VAR 0 4
72620: PUSH
72621: LD_INT 1
72623: ARRAY
72624: GREATEREQUAL
72625: PUSH
72626: LD_VAR 0 3
72630: PPUSH
72631: LD_INT 2
72633: PPUSH
72634: CALL_OW 275
72638: PUSH
72639: LD_VAR 0 4
72643: PUSH
72644: LD_INT 2
72646: ARRAY
72647: GREATEREQUAL
72648: AND
72649: PUSH
72650: LD_VAR 0 3
72654: PPUSH
72655: LD_INT 3
72657: PPUSH
72658: CALL_OW 275
72662: PUSH
72663: LD_VAR 0 4
72667: PUSH
72668: LD_INT 3
72670: ARRAY
72671: GREATEREQUAL
72672: AND
72673: ST_TO_ADDR
// end ;
72674: LD_VAR 0 2
72678: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
72679: LD_INT 0
72681: PPUSH
72682: PPUSH
72683: PPUSH
// pom := GetBase ( building ) ;
72684: LD_ADDR_VAR 0 4
72688: PUSH
72689: LD_VAR 0 1
72693: PPUSH
72694: CALL_OW 274
72698: ST_TO_ADDR
// if not pom then
72699: LD_VAR 0 4
72703: NOT
72704: IFFALSE 72708
// exit ;
72706: GO 72809
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
72708: LD_ADDR_VAR 0 5
72712: PUSH
72713: LD_VAR 0 2
72717: PPUSH
72718: LD_VAR 0 1
72722: PPUSH
72723: CALL_OW 248
72727: PPUSH
72728: CALL_OW 450
72732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
72733: LD_ADDR_VAR 0 3
72737: PUSH
72738: LD_VAR 0 4
72742: PPUSH
72743: LD_INT 1
72745: PPUSH
72746: CALL_OW 275
72750: PUSH
72751: LD_VAR 0 5
72755: PUSH
72756: LD_INT 1
72758: ARRAY
72759: GREATEREQUAL
72760: PUSH
72761: LD_VAR 0 4
72765: PPUSH
72766: LD_INT 2
72768: PPUSH
72769: CALL_OW 275
72773: PUSH
72774: LD_VAR 0 5
72778: PUSH
72779: LD_INT 2
72781: ARRAY
72782: GREATEREQUAL
72783: AND
72784: PUSH
72785: LD_VAR 0 4
72789: PPUSH
72790: LD_INT 3
72792: PPUSH
72793: CALL_OW 275
72797: PUSH
72798: LD_VAR 0 5
72802: PUSH
72803: LD_INT 3
72805: ARRAY
72806: GREATEREQUAL
72807: AND
72808: ST_TO_ADDR
// end ;
72809: LD_VAR 0 3
72813: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
72818: PPUSH
72819: PPUSH
72820: PPUSH
72821: PPUSH
72822: PPUSH
72823: PPUSH
72824: PPUSH
72825: PPUSH
// result := false ;
72826: LD_ADDR_VAR 0 6
72830: PUSH
72831: LD_INT 0
72833: ST_TO_ADDR
// if not base or not btype or not x or not y then
72834: LD_VAR 0 1
72838: NOT
72839: PUSH
72840: LD_VAR 0 2
72844: NOT
72845: OR
72846: PUSH
72847: LD_VAR 0 3
72851: NOT
72852: OR
72853: PUSH
72854: LD_VAR 0 4
72858: NOT
72859: OR
72860: IFFALSE 72864
// exit ;
72862: GO 73455
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
72864: LD_ADDR_VAR 0 12
72868: PUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: LD_VAR 0 3
72878: PPUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: LD_VAR 0 5
72888: PPUSH
72889: LD_VAR 0 1
72893: PUSH
72894: LD_INT 1
72896: ARRAY
72897: PPUSH
72898: CALL_OW 248
72902: PPUSH
72903: LD_INT 0
72905: PPUSH
72906: CALL 74292 0 6
72910: ST_TO_ADDR
// if not hexes then
72911: LD_VAR 0 12
72915: NOT
72916: IFFALSE 72920
// exit ;
72918: GO 73455
// for i = 1 to hexes do
72920: LD_ADDR_VAR 0 7
72924: PUSH
72925: DOUBLE
72926: LD_INT 1
72928: DEC
72929: ST_TO_ADDR
72930: LD_VAR 0 12
72934: PUSH
72935: FOR_TO
72936: IFFALSE 73453
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72938: LD_ADDR_VAR 0 11
72942: PUSH
72943: LD_VAR 0 12
72947: PUSH
72948: LD_VAR 0 7
72952: ARRAY
72953: PUSH
72954: LD_INT 1
72956: ARRAY
72957: PPUSH
72958: LD_VAR 0 12
72962: PUSH
72963: LD_VAR 0 7
72967: ARRAY
72968: PUSH
72969: LD_INT 2
72971: ARRAY
72972: PPUSH
72973: CALL_OW 428
72977: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
72978: LD_VAR 0 12
72982: PUSH
72983: LD_VAR 0 7
72987: ARRAY
72988: PUSH
72989: LD_INT 1
72991: ARRAY
72992: PPUSH
72993: LD_VAR 0 12
72997: PUSH
72998: LD_VAR 0 7
73002: ARRAY
73003: PUSH
73004: LD_INT 2
73006: ARRAY
73007: PPUSH
73008: CALL_OW 351
73012: PUSH
73013: LD_VAR 0 12
73017: PUSH
73018: LD_VAR 0 7
73022: ARRAY
73023: PUSH
73024: LD_INT 1
73026: ARRAY
73027: PPUSH
73028: LD_VAR 0 12
73032: PUSH
73033: LD_VAR 0 7
73037: ARRAY
73038: PUSH
73039: LD_INT 2
73041: ARRAY
73042: PPUSH
73043: CALL_OW 488
73047: NOT
73048: OR
73049: PUSH
73050: LD_VAR 0 11
73054: PPUSH
73055: CALL_OW 247
73059: PUSH
73060: LD_INT 3
73062: EQUAL
73063: OR
73064: IFFALSE 73070
// exit ;
73066: POP
73067: POP
73068: GO 73455
// if not tmp then
73070: LD_VAR 0 11
73074: NOT
73075: IFFALSE 73079
// continue ;
73077: GO 72935
// result := true ;
73079: LD_ADDR_VAR 0 6
73083: PUSH
73084: LD_INT 1
73086: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73087: LD_ADDR_VAR 0 15
73091: PUSH
73092: LD_INT 22
73094: PUSH
73095: LD_VAR 0 11
73099: PPUSH
73100: CALL_OW 255
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 2
73111: PUSH
73112: LD_INT 30
73114: PUSH
73115: LD_INT 0
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 30
73124: PUSH
73125: LD_INT 1
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: LIST
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PPUSH
73141: CALL_OW 69
73145: ST_TO_ADDR
// if dep then
73146: LD_VAR 0 15
73150: IFFALSE 73286
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
73152: LD_ADDR_VAR 0 14
73156: PUSH
73157: LD_VAR 0 15
73161: PUSH
73162: LD_INT 1
73164: ARRAY
73165: PPUSH
73166: CALL_OW 250
73170: PPUSH
73171: LD_VAR 0 15
73175: PUSH
73176: LD_INT 1
73178: ARRAY
73179: PPUSH
73180: CALL_OW 254
73184: PPUSH
73185: LD_INT 5
73187: PPUSH
73188: CALL_OW 272
73192: PUSH
73193: LD_VAR 0 15
73197: PUSH
73198: LD_INT 1
73200: ARRAY
73201: PPUSH
73202: CALL_OW 251
73206: PPUSH
73207: LD_VAR 0 15
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: CALL_OW 254
73220: PPUSH
73221: LD_INT 5
73223: PPUSH
73224: CALL_OW 273
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
73233: LD_VAR 0 14
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PPUSH
73242: LD_VAR 0 14
73246: PUSH
73247: LD_INT 2
73249: ARRAY
73250: PPUSH
73251: CALL_OW 488
73255: IFFALSE 73286
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
73257: LD_VAR 0 11
73261: PPUSH
73262: LD_VAR 0 14
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: PPUSH
73271: LD_VAR 0 14
73275: PUSH
73276: LD_INT 2
73278: ARRAY
73279: PPUSH
73280: CALL_OW 111
// continue ;
73284: GO 72935
// end ; end ; r := GetDir ( tmp ) ;
73286: LD_ADDR_VAR 0 13
73290: PUSH
73291: LD_VAR 0 11
73295: PPUSH
73296: CALL_OW 254
73300: ST_TO_ADDR
// if r = 5 then
73301: LD_VAR 0 13
73305: PUSH
73306: LD_INT 5
73308: EQUAL
73309: IFFALSE 73319
// r := 0 ;
73311: LD_ADDR_VAR 0 13
73315: PUSH
73316: LD_INT 0
73318: ST_TO_ADDR
// for j = r to 5 do
73319: LD_ADDR_VAR 0 8
73323: PUSH
73324: DOUBLE
73325: LD_VAR 0 13
73329: DEC
73330: ST_TO_ADDR
73331: LD_INT 5
73333: PUSH
73334: FOR_TO
73335: IFFALSE 73449
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
73337: LD_ADDR_VAR 0 9
73341: PUSH
73342: LD_VAR 0 11
73346: PPUSH
73347: CALL_OW 250
73351: PPUSH
73352: LD_VAR 0 8
73356: PPUSH
73357: LD_INT 2
73359: PPUSH
73360: CALL_OW 272
73364: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
73365: LD_ADDR_VAR 0 10
73369: PUSH
73370: LD_VAR 0 11
73374: PPUSH
73375: CALL_OW 251
73379: PPUSH
73380: LD_VAR 0 8
73384: PPUSH
73385: LD_INT 2
73387: PPUSH
73388: CALL_OW 273
73392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
73393: LD_VAR 0 9
73397: PPUSH
73398: LD_VAR 0 10
73402: PPUSH
73403: CALL_OW 488
73407: PUSH
73408: LD_VAR 0 9
73412: PPUSH
73413: LD_VAR 0 10
73417: PPUSH
73418: CALL_OW 428
73422: NOT
73423: AND
73424: IFFALSE 73447
// begin ComMoveXY ( tmp , _x , _y ) ;
73426: LD_VAR 0 11
73430: PPUSH
73431: LD_VAR 0 9
73435: PPUSH
73436: LD_VAR 0 10
73440: PPUSH
73441: CALL_OW 111
// break ;
73445: GO 73449
// end ; end ;
73447: GO 73334
73449: POP
73450: POP
// end ;
73451: GO 72935
73453: POP
73454: POP
// end ;
73455: LD_VAR 0 6
73459: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
73460: LD_INT 0
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
73469: PPUSH
73470: PPUSH
73471: PPUSH
// result := false ;
73472: LD_ADDR_VAR 0 6
73476: PUSH
73477: LD_INT 0
73479: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
73480: LD_VAR 0 1
73484: NOT
73485: PUSH
73486: LD_VAR 0 1
73490: PPUSH
73491: CALL_OW 266
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: LD_INT 1
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: IN
73506: NOT
73507: OR
73508: PUSH
73509: LD_VAR 0 2
73513: NOT
73514: OR
73515: PUSH
73516: LD_VAR 0 5
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: LD_INT 1
73526: PUSH
73527: LD_INT 2
73529: PUSH
73530: LD_INT 3
73532: PUSH
73533: LD_INT 4
73535: PUSH
73536: LD_INT 5
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: IN
73547: NOT
73548: OR
73549: PUSH
73550: LD_VAR 0 3
73554: PPUSH
73555: LD_VAR 0 4
73559: PPUSH
73560: CALL_OW 488
73564: NOT
73565: OR
73566: IFFALSE 73570
// exit ;
73568: GO 74287
// pom := GetBase ( bdepot ) ;
73570: LD_ADDR_VAR 0 10
73574: PUSH
73575: LD_VAR 0 1
73579: PPUSH
73580: CALL_OW 274
73584: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
73585: LD_ADDR_VAR 0 11
73589: PUSH
73590: LD_VAR 0 2
73594: PPUSH
73595: LD_VAR 0 1
73599: PPUSH
73600: CALL_OW 248
73604: PPUSH
73605: CALL_OW 450
73609: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
73610: LD_VAR 0 10
73614: PPUSH
73615: LD_INT 1
73617: PPUSH
73618: CALL_OW 275
73622: PUSH
73623: LD_VAR 0 11
73627: PUSH
73628: LD_INT 1
73630: ARRAY
73631: GREATEREQUAL
73632: PUSH
73633: LD_VAR 0 10
73637: PPUSH
73638: LD_INT 2
73640: PPUSH
73641: CALL_OW 275
73645: PUSH
73646: LD_VAR 0 11
73650: PUSH
73651: LD_INT 2
73653: ARRAY
73654: GREATEREQUAL
73655: AND
73656: PUSH
73657: LD_VAR 0 10
73661: PPUSH
73662: LD_INT 3
73664: PPUSH
73665: CALL_OW 275
73669: PUSH
73670: LD_VAR 0 11
73674: PUSH
73675: LD_INT 3
73677: ARRAY
73678: GREATEREQUAL
73679: AND
73680: NOT
73681: IFFALSE 73685
// exit ;
73683: GO 74287
// if GetBType ( bdepot ) = b_depot then
73685: LD_VAR 0 1
73689: PPUSH
73690: CALL_OW 266
73694: PUSH
73695: LD_INT 0
73697: EQUAL
73698: IFFALSE 73710
// dist := 28 else
73700: LD_ADDR_VAR 0 14
73704: PUSH
73705: LD_INT 28
73707: ST_TO_ADDR
73708: GO 73718
// dist := 36 ;
73710: LD_ADDR_VAR 0 14
73714: PUSH
73715: LD_INT 36
73717: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
73718: LD_VAR 0 1
73722: PPUSH
73723: LD_VAR 0 3
73727: PPUSH
73728: LD_VAR 0 4
73732: PPUSH
73733: CALL_OW 297
73737: PUSH
73738: LD_VAR 0 14
73742: GREATER
73743: IFFALSE 73747
// exit ;
73745: GO 74287
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
73747: LD_ADDR_VAR 0 12
73751: PUSH
73752: LD_VAR 0 2
73756: PPUSH
73757: LD_VAR 0 3
73761: PPUSH
73762: LD_VAR 0 4
73766: PPUSH
73767: LD_VAR 0 5
73771: PPUSH
73772: LD_VAR 0 1
73776: PPUSH
73777: CALL_OW 248
73781: PPUSH
73782: LD_INT 0
73784: PPUSH
73785: CALL 74292 0 6
73789: ST_TO_ADDR
// if not hexes then
73790: LD_VAR 0 12
73794: NOT
73795: IFFALSE 73799
// exit ;
73797: GO 74287
// hex := GetHexInfo ( x , y ) ;
73799: LD_ADDR_VAR 0 15
73803: PUSH
73804: LD_VAR 0 3
73808: PPUSH
73809: LD_VAR 0 4
73813: PPUSH
73814: CALL_OW 546
73818: ST_TO_ADDR
// if hex [ 1 ] then
73819: LD_VAR 0 15
73823: PUSH
73824: LD_INT 1
73826: ARRAY
73827: IFFALSE 73831
// exit ;
73829: GO 74287
// height := hex [ 2 ] ;
73831: LD_ADDR_VAR 0 13
73835: PUSH
73836: LD_VAR 0 15
73840: PUSH
73841: LD_INT 2
73843: ARRAY
73844: ST_TO_ADDR
// for i = 1 to hexes do
73845: LD_ADDR_VAR 0 7
73849: PUSH
73850: DOUBLE
73851: LD_INT 1
73853: DEC
73854: ST_TO_ADDR
73855: LD_VAR 0 12
73859: PUSH
73860: FOR_TO
73861: IFFALSE 74191
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
73863: LD_VAR 0 12
73867: PUSH
73868: LD_VAR 0 7
73872: ARRAY
73873: PUSH
73874: LD_INT 1
73876: ARRAY
73877: PPUSH
73878: LD_VAR 0 12
73882: PUSH
73883: LD_VAR 0 7
73887: ARRAY
73888: PUSH
73889: LD_INT 2
73891: ARRAY
73892: PPUSH
73893: CALL_OW 488
73897: NOT
73898: PUSH
73899: LD_VAR 0 12
73903: PUSH
73904: LD_VAR 0 7
73908: ARRAY
73909: PUSH
73910: LD_INT 1
73912: ARRAY
73913: PPUSH
73914: LD_VAR 0 12
73918: PUSH
73919: LD_VAR 0 7
73923: ARRAY
73924: PUSH
73925: LD_INT 2
73927: ARRAY
73928: PPUSH
73929: CALL_OW 428
73933: PUSH
73934: LD_INT 0
73936: GREATER
73937: OR
73938: PUSH
73939: LD_VAR 0 12
73943: PUSH
73944: LD_VAR 0 7
73948: ARRAY
73949: PUSH
73950: LD_INT 1
73952: ARRAY
73953: PPUSH
73954: LD_VAR 0 12
73958: PUSH
73959: LD_VAR 0 7
73963: ARRAY
73964: PUSH
73965: LD_INT 2
73967: ARRAY
73968: PPUSH
73969: CALL_OW 351
73973: OR
73974: IFFALSE 73980
// exit ;
73976: POP
73977: POP
73978: GO 74287
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73980: LD_ADDR_VAR 0 8
73984: PUSH
73985: LD_VAR 0 12
73989: PUSH
73990: LD_VAR 0 7
73994: ARRAY
73995: PUSH
73996: LD_INT 1
73998: ARRAY
73999: PPUSH
74000: LD_VAR 0 12
74004: PUSH
74005: LD_VAR 0 7
74009: ARRAY
74010: PUSH
74011: LD_INT 2
74013: ARRAY
74014: PPUSH
74015: CALL_OW 546
74019: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
74020: LD_VAR 0 8
74024: PUSH
74025: LD_INT 1
74027: ARRAY
74028: PUSH
74029: LD_VAR 0 8
74033: PUSH
74034: LD_INT 2
74036: ARRAY
74037: PUSH
74038: LD_VAR 0 13
74042: PUSH
74043: LD_INT 2
74045: PLUS
74046: GREATER
74047: OR
74048: PUSH
74049: LD_VAR 0 8
74053: PUSH
74054: LD_INT 2
74056: ARRAY
74057: PUSH
74058: LD_VAR 0 13
74062: PUSH
74063: LD_INT 2
74065: MINUS
74066: LESS
74067: OR
74068: PUSH
74069: LD_VAR 0 8
74073: PUSH
74074: LD_INT 3
74076: ARRAY
74077: PUSH
74078: LD_INT 0
74080: PUSH
74081: LD_INT 8
74083: PUSH
74084: LD_INT 9
74086: PUSH
74087: LD_INT 10
74089: PUSH
74090: LD_INT 11
74092: PUSH
74093: LD_INT 12
74095: PUSH
74096: LD_INT 13
74098: PUSH
74099: LD_INT 16
74101: PUSH
74102: LD_INT 17
74104: PUSH
74105: LD_INT 18
74107: PUSH
74108: LD_INT 19
74110: PUSH
74111: LD_INT 20
74113: PUSH
74114: LD_INT 21
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: IN
74132: NOT
74133: OR
74134: PUSH
74135: LD_VAR 0 8
74139: PUSH
74140: LD_INT 5
74142: ARRAY
74143: NOT
74144: OR
74145: PUSH
74146: LD_VAR 0 8
74150: PUSH
74151: LD_INT 6
74153: ARRAY
74154: PUSH
74155: LD_INT 1
74157: PUSH
74158: LD_INT 2
74160: PUSH
74161: LD_INT 7
74163: PUSH
74164: LD_INT 9
74166: PUSH
74167: LD_INT 10
74169: PUSH
74170: LD_INT 11
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: IN
74181: NOT
74182: OR
74183: IFFALSE 74189
// exit ;
74185: POP
74186: POP
74187: GO 74287
// end ;
74189: GO 73860
74191: POP
74192: POP
// side := GetSide ( bdepot ) ;
74193: LD_ADDR_VAR 0 9
74197: PUSH
74198: LD_VAR 0 1
74202: PPUSH
74203: CALL_OW 255
74207: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74208: LD_VAR 0 9
74212: PPUSH
74213: LD_VAR 0 3
74217: PPUSH
74218: LD_VAR 0 4
74222: PPUSH
74223: LD_INT 20
74225: PPUSH
74226: CALL 66959 0 4
74230: PUSH
74231: LD_INT 4
74233: ARRAY
74234: IFFALSE 74238
// exit ;
74236: GO 74287
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
74238: LD_VAR 0 2
74242: PUSH
74243: LD_INT 29
74245: PUSH
74246: LD_INT 30
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: IN
74253: PUSH
74254: LD_VAR 0 3
74258: PPUSH
74259: LD_VAR 0 4
74263: PPUSH
74264: LD_VAR 0 9
74268: PPUSH
74269: CALL_OW 440
74273: NOT
74274: AND
74275: IFFALSE 74279
// exit ;
74277: GO 74287
// result := true ;
74279: LD_ADDR_VAR 0 6
74283: PUSH
74284: LD_INT 1
74286: ST_TO_ADDR
// end ;
74287: LD_VAR 0 6
74291: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
74296: PPUSH
74297: PPUSH
74298: PPUSH
74299: PPUSH
74300: PPUSH
74301: PPUSH
74302: PPUSH
74303: PPUSH
74304: PPUSH
74305: PPUSH
74306: PPUSH
74307: PPUSH
74308: PPUSH
74309: PPUSH
74310: PPUSH
74311: PPUSH
74312: PPUSH
74313: PPUSH
74314: PPUSH
74315: PPUSH
74316: PPUSH
74317: PPUSH
74318: PPUSH
74319: PPUSH
74320: PPUSH
74321: PPUSH
74322: PPUSH
74323: PPUSH
74324: PPUSH
74325: PPUSH
74326: PPUSH
74327: PPUSH
74328: PPUSH
74329: PPUSH
74330: PPUSH
74331: PPUSH
74332: PPUSH
74333: PPUSH
74334: PPUSH
74335: PPUSH
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
74340: PPUSH
74341: PPUSH
74342: PPUSH
74343: PPUSH
74344: PPUSH
74345: PPUSH
74346: PPUSH
74347: PPUSH
74348: PPUSH
74349: PPUSH
74350: PPUSH
74351: PPUSH
// result = [ ] ;
74352: LD_ADDR_VAR 0 7
74356: PUSH
74357: EMPTY
74358: ST_TO_ADDR
// temp_list = [ ] ;
74359: LD_ADDR_VAR 0 9
74363: PUSH
74364: EMPTY
74365: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
74366: LD_VAR 0 4
74370: PUSH
74371: LD_INT 0
74373: PUSH
74374: LD_INT 1
74376: PUSH
74377: LD_INT 2
74379: PUSH
74380: LD_INT 3
74382: PUSH
74383: LD_INT 4
74385: PUSH
74386: LD_INT 5
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: IN
74397: NOT
74398: PUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: LD_INT 1
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: IN
74414: PUSH
74415: LD_VAR 0 5
74419: PUSH
74420: LD_INT 1
74422: PUSH
74423: LD_INT 2
74425: PUSH
74426: LD_INT 3
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: LIST
74433: IN
74434: NOT
74435: AND
74436: OR
74437: IFFALSE 74441
// exit ;
74439: GO 92826
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
74441: LD_VAR 0 1
74445: PUSH
74446: LD_INT 6
74448: PUSH
74449: LD_INT 7
74451: PUSH
74452: LD_INT 8
74454: PUSH
74455: LD_INT 13
74457: PUSH
74458: LD_INT 12
74460: PUSH
74461: LD_INT 15
74463: PUSH
74464: LD_INT 11
74466: PUSH
74467: LD_INT 14
74469: PUSH
74470: LD_INT 10
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: IN
74484: IFFALSE 74494
// btype = b_lab ;
74486: LD_ADDR_VAR 0 1
74490: PUSH
74491: LD_INT 6
74493: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
74494: LD_VAR 0 6
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: LD_INT 1
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: IN
74513: NOT
74514: PUSH
74515: LD_VAR 0 1
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: LD_INT 1
74525: PUSH
74526: LD_INT 2
74528: PUSH
74529: LD_INT 3
74531: PUSH
74532: LD_INT 6
74534: PUSH
74535: LD_INT 36
74537: PUSH
74538: LD_INT 4
74540: PUSH
74541: LD_INT 5
74543: PUSH
74544: LD_INT 31
74546: PUSH
74547: LD_INT 32
74549: PUSH
74550: LD_INT 33
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: IN
74566: NOT
74567: PUSH
74568: LD_VAR 0 6
74572: PUSH
74573: LD_INT 1
74575: EQUAL
74576: AND
74577: OR
74578: PUSH
74579: LD_VAR 0 1
74583: PUSH
74584: LD_INT 2
74586: PUSH
74587: LD_INT 3
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: IN
74594: NOT
74595: PUSH
74596: LD_VAR 0 6
74600: PUSH
74601: LD_INT 2
74603: EQUAL
74604: AND
74605: OR
74606: IFFALSE 74616
// mode = 0 ;
74608: LD_ADDR_VAR 0 6
74612: PUSH
74613: LD_INT 0
74615: ST_TO_ADDR
// case mode of 0 :
74616: LD_VAR 0 6
74620: PUSH
74621: LD_INT 0
74623: DOUBLE
74624: EQUAL
74625: IFTRUE 74629
74627: GO 86082
74629: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74630: LD_ADDR_VAR 0 11
74634: PUSH
74635: LD_INT 0
74637: PUSH
74638: LD_INT 0
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 0
74647: PUSH
74648: LD_INT 1
74650: NEG
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PUSH
74656: LD_INT 1
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_INT 1
74668: PUSH
74669: LD_INT 1
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 0
74678: PUSH
74679: LD_INT 1
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 1
74688: NEG
74689: PUSH
74690: LD_INT 0
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 1
74699: NEG
74700: PUSH
74701: LD_INT 1
74703: NEG
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 1
74711: NEG
74712: PUSH
74713: LD_INT 2
74715: NEG
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 2
74726: NEG
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: PUSH
74735: LD_INT 1
74737: NEG
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 1
74745: PUSH
74746: LD_INT 2
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 0
74755: PUSH
74756: LD_INT 2
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PUSH
74763: LD_INT 1
74765: NEG
74766: PUSH
74767: LD_INT 1
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 1
74776: PUSH
74777: LD_INT 3
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: LD_INT 3
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 1
74796: NEG
74797: PUSH
74798: LD_INT 2
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74823: LD_ADDR_VAR 0 12
74827: PUSH
74828: LD_INT 0
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 0
74840: PUSH
74841: LD_INT 1
74843: NEG
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 1
74861: PUSH
74862: LD_INT 1
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 0
74871: PUSH
74872: LD_INT 1
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 1
74881: NEG
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 1
74892: NEG
74893: PUSH
74894: LD_INT 1
74896: NEG
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: LD_INT 1
74907: NEG
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 2
74915: PUSH
74916: LD_INT 0
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 2
74925: PUSH
74926: LD_INT 1
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 1
74935: NEG
74936: PUSH
74937: LD_INT 1
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 2
74946: NEG
74947: PUSH
74948: LD_INT 0
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 2
74957: NEG
74958: PUSH
74959: LD_INT 1
74961: NEG
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 2
74969: NEG
74970: PUSH
74971: LD_INT 1
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 3
74980: NEG
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 3
74991: NEG
74992: PUSH
74993: LD_INT 1
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75019: LD_ADDR_VAR 0 13
75023: PUSH
75024: LD_INT 0
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 0
75036: PUSH
75037: LD_INT 1
75039: NEG
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 1
75047: PUSH
75048: LD_INT 0
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 1
75057: PUSH
75058: LD_INT 1
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 0
75067: PUSH
75068: LD_INT 1
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 1
75077: NEG
75078: PUSH
75079: LD_INT 0
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 1
75088: NEG
75089: PUSH
75090: LD_INT 1
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 1
75100: NEG
75101: PUSH
75102: LD_INT 2
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 2
75112: PUSH
75113: LD_INT 1
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 2
75122: PUSH
75123: LD_INT 2
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 1
75132: PUSH
75133: LD_INT 2
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 2
75142: NEG
75143: PUSH
75144: LD_INT 1
75146: NEG
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: LD_INT 2
75154: NEG
75155: PUSH
75156: LD_INT 2
75158: NEG
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 2
75166: NEG
75167: PUSH
75168: LD_INT 3
75170: NEG
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: LD_INT 3
75178: NEG
75179: PUSH
75180: LD_INT 2
75182: NEG
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 3
75190: NEG
75191: PUSH
75192: LD_INT 3
75194: NEG
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75218: LD_ADDR_VAR 0 14
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: LD_INT 0
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 0
75235: PUSH
75236: LD_INT 1
75238: NEG
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 1
75246: PUSH
75247: LD_INT 0
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 1
75256: PUSH
75257: LD_INT 1
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 0
75266: PUSH
75267: LD_INT 1
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 1
75276: NEG
75277: PUSH
75278: LD_INT 0
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 1
75287: NEG
75288: PUSH
75289: LD_INT 1
75291: NEG
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 1
75299: NEG
75300: PUSH
75301: LD_INT 2
75303: NEG
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 0
75311: PUSH
75312: LD_INT 2
75314: NEG
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 1
75322: PUSH
75323: LD_INT 1
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 1
75333: PUSH
75334: LD_INT 2
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: LD_INT 2
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PUSH
75351: LD_INT 1
75353: NEG
75354: PUSH
75355: LD_INT 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 1
75364: NEG
75365: PUSH
75366: LD_INT 3
75368: NEG
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 0
75376: PUSH
75377: LD_INT 3
75379: NEG
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: LD_INT 1
75387: PUSH
75388: LD_INT 2
75390: NEG
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75414: LD_ADDR_VAR 0 15
75418: PUSH
75419: LD_INT 0
75421: PUSH
75422: LD_INT 0
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: LD_INT 1
75434: NEG
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 1
75442: PUSH
75443: LD_INT 0
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 1
75452: PUSH
75453: LD_INT 1
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 0
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PUSH
75470: LD_INT 1
75472: NEG
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: LD_INT 1
75483: NEG
75484: PUSH
75485: LD_INT 1
75487: NEG
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: LD_INT 1
75495: PUSH
75496: LD_INT 1
75498: NEG
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 2
75506: PUSH
75507: LD_INT 0
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: LD_INT 2
75516: PUSH
75517: LD_INT 1
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 1
75526: NEG
75527: PUSH
75528: LD_INT 1
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 2
75537: NEG
75538: PUSH
75539: LD_INT 0
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 2
75548: NEG
75549: PUSH
75550: LD_INT 1
75552: NEG
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: LD_INT 1
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 3
75571: PUSH
75572: LD_INT 0
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 3
75581: PUSH
75582: LD_INT 1
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75607: LD_ADDR_VAR 0 16
75611: PUSH
75612: LD_INT 0
75614: PUSH
75615: LD_INT 0
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 0
75624: PUSH
75625: LD_INT 1
75627: NEG
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: PUSH
75633: LD_INT 1
75635: PUSH
75636: LD_INT 0
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 1
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 0
75655: PUSH
75656: LD_INT 1
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 1
75665: NEG
75666: PUSH
75667: LD_INT 0
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 1
75676: NEG
75677: PUSH
75678: LD_INT 1
75680: NEG
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 1
75688: NEG
75689: PUSH
75690: LD_INT 2
75692: NEG
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 2
75700: PUSH
75701: LD_INT 1
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 2
75710: PUSH
75711: LD_INT 2
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 2
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 2
75730: NEG
75731: PUSH
75732: LD_INT 1
75734: NEG
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 2
75742: NEG
75743: PUSH
75744: LD_INT 2
75746: NEG
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 3
75754: PUSH
75755: LD_INT 2
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 3
75764: PUSH
75765: LD_INT 3
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: PUSH
75772: LD_INT 2
75774: PUSH
75775: LD_INT 3
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75800: LD_ADDR_VAR 0 17
75804: PUSH
75805: LD_INT 0
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 0
75817: PUSH
75818: LD_INT 1
75820: NEG
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 1
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 1
75838: PUSH
75839: LD_INT 1
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 1
75858: NEG
75859: PUSH
75860: LD_INT 0
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 1
75869: NEG
75870: PUSH
75871: LD_INT 1
75873: NEG
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 1
75881: NEG
75882: PUSH
75883: LD_INT 2
75885: NEG
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: LD_INT 2
75896: NEG
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 1
75904: PUSH
75905: LD_INT 1
75907: NEG
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 2
75915: PUSH
75916: LD_INT 0
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 2
75925: PUSH
75926: LD_INT 1
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PUSH
75933: LD_INT 2
75935: PUSH
75936: LD_INT 2
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 1
75945: PUSH
75946: LD_INT 2
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 0
75955: PUSH
75956: LD_INT 2
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 1
75965: NEG
75966: PUSH
75967: LD_INT 1
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 2
75976: NEG
75977: PUSH
75978: LD_INT 0
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 2
75987: NEG
75988: PUSH
75989: LD_INT 1
75991: NEG
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: LD_INT 2
75999: NEG
76000: PUSH
76001: LD_INT 2
76003: NEG
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76030: LD_ADDR_VAR 0 18
76034: PUSH
76035: LD_INT 0
76037: PUSH
76038: LD_INT 0
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 0
76047: PUSH
76048: LD_INT 1
76050: NEG
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 1
76058: PUSH
76059: LD_INT 0
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: PUSH
76066: LD_INT 1
76068: PUSH
76069: LD_INT 1
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 0
76078: PUSH
76079: LD_INT 1
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PUSH
76086: LD_INT 1
76088: NEG
76089: PUSH
76090: LD_INT 0
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 1
76099: NEG
76100: PUSH
76101: LD_INT 1
76103: NEG
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 1
76111: NEG
76112: PUSH
76113: LD_INT 2
76115: NEG
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 0
76123: PUSH
76124: LD_INT 2
76126: NEG
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 1
76134: PUSH
76135: LD_INT 1
76137: NEG
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: PUSH
76143: LD_INT 2
76145: PUSH
76146: LD_INT 0
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: LD_INT 2
76155: PUSH
76156: LD_INT 1
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 2
76165: PUSH
76166: LD_INT 2
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 1
76175: PUSH
76176: LD_INT 2
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 0
76185: PUSH
76186: LD_INT 2
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 1
76195: NEG
76196: PUSH
76197: LD_INT 1
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 2
76206: NEG
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 2
76217: NEG
76218: PUSH
76219: LD_INT 1
76221: NEG
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 2
76229: NEG
76230: PUSH
76231: LD_INT 2
76233: NEG
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76260: LD_ADDR_VAR 0 19
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: LD_INT 0
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 0
76277: PUSH
76278: LD_INT 1
76280: NEG
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 1
76288: PUSH
76289: LD_INT 0
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 1
76298: PUSH
76299: LD_INT 1
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 0
76308: PUSH
76309: LD_INT 1
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: PUSH
76316: LD_INT 1
76318: NEG
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PUSH
76327: LD_INT 1
76329: NEG
76330: PUSH
76331: LD_INT 1
76333: NEG
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 1
76341: NEG
76342: PUSH
76343: LD_INT 2
76345: NEG
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: LD_INT 2
76356: NEG
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 1
76364: PUSH
76365: LD_INT 1
76367: NEG
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 2
76375: PUSH
76376: LD_INT 0
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: LD_INT 2
76385: PUSH
76386: LD_INT 1
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 2
76395: PUSH
76396: LD_INT 2
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 1
76405: PUSH
76406: LD_INT 2
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 0
76415: PUSH
76416: LD_INT 2
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 1
76425: NEG
76426: PUSH
76427: LD_INT 1
76429: PUSH
76430: EMPTY
76431: LIST
76432: LIST
76433: PUSH
76434: LD_INT 2
76436: NEG
76437: PUSH
76438: LD_INT 0
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 2
76447: NEG
76448: PUSH
76449: LD_INT 1
76451: NEG
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 2
76459: NEG
76460: PUSH
76461: LD_INT 2
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76490: LD_ADDR_VAR 0 20
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 0
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: LD_INT 1
76510: NEG
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 1
76518: PUSH
76519: LD_INT 0
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 1
76528: PUSH
76529: LD_INT 1
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: LD_INT 1
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: PUSH
76546: LD_INT 1
76548: NEG
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 1
76559: NEG
76560: PUSH
76561: LD_INT 1
76563: NEG
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 1
76571: NEG
76572: PUSH
76573: LD_INT 2
76575: NEG
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 0
76583: PUSH
76584: LD_INT 2
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 1
76594: PUSH
76595: LD_INT 1
76597: NEG
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 2
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 2
76615: PUSH
76616: LD_INT 1
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 2
76625: PUSH
76626: LD_INT 2
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: LD_INT 2
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 0
76645: PUSH
76646: LD_INT 2
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 1
76655: NEG
76656: PUSH
76657: LD_INT 1
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 2
76666: NEG
76667: PUSH
76668: LD_INT 0
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 2
76677: NEG
76678: PUSH
76679: LD_INT 1
76681: NEG
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 2
76689: NEG
76690: PUSH
76691: LD_INT 2
76693: NEG
76694: PUSH
76695: EMPTY
76696: LIST
76697: LIST
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76720: LD_ADDR_VAR 0 21
76724: PUSH
76725: LD_INT 0
76727: PUSH
76728: LD_INT 0
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 0
76737: PUSH
76738: LD_INT 1
76740: NEG
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 1
76748: PUSH
76749: LD_INT 0
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: LD_INT 1
76758: PUSH
76759: LD_INT 1
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: LD_INT 0
76768: PUSH
76769: LD_INT 1
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 0
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 1
76789: NEG
76790: PUSH
76791: LD_INT 1
76793: NEG
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 1
76801: NEG
76802: PUSH
76803: LD_INT 2
76805: NEG
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 0
76813: PUSH
76814: LD_INT 2
76816: NEG
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 1
76824: PUSH
76825: LD_INT 1
76827: NEG
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 2
76835: PUSH
76836: LD_INT 0
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 2
76845: PUSH
76846: LD_INT 1
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 2
76855: PUSH
76856: LD_INT 2
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: LD_INT 2
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 0
76875: PUSH
76876: LD_INT 2
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 1
76885: NEG
76886: PUSH
76887: LD_INT 1
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 2
76896: NEG
76897: PUSH
76898: LD_INT 0
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 2
76907: NEG
76908: PUSH
76909: LD_INT 1
76911: NEG
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 2
76919: NEG
76920: PUSH
76921: LD_INT 2
76923: NEG
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76950: LD_ADDR_VAR 0 22
76954: PUSH
76955: LD_INT 0
76957: PUSH
76958: LD_INT 0
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 0
76967: PUSH
76968: LD_INT 1
76970: NEG
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: LD_INT 1
76978: PUSH
76979: LD_INT 0
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: PUSH
76986: LD_INT 1
76988: PUSH
76989: LD_INT 1
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: LD_INT 0
76998: PUSH
76999: LD_INT 1
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PUSH
77006: LD_INT 1
77008: NEG
77009: PUSH
77010: LD_INT 0
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 1
77019: NEG
77020: PUSH
77021: LD_INT 1
77023: NEG
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PUSH
77029: LD_INT 1
77031: NEG
77032: PUSH
77033: LD_INT 2
77035: NEG
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: PUSH
77041: LD_INT 0
77043: PUSH
77044: LD_INT 2
77046: NEG
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 1
77054: PUSH
77055: LD_INT 1
77057: NEG
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 2
77065: PUSH
77066: LD_INT 0
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 2
77075: PUSH
77076: LD_INT 1
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: PUSH
77083: LD_INT 2
77085: PUSH
77086: LD_INT 2
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 1
77095: PUSH
77096: LD_INT 2
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: LD_INT 0
77105: PUSH
77106: LD_INT 2
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: LD_INT 1
77115: NEG
77116: PUSH
77117: LD_INT 1
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: LD_INT 2
77126: NEG
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 2
77137: NEG
77138: PUSH
77139: LD_INT 1
77141: NEG
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PUSH
77147: LD_INT 2
77149: NEG
77150: PUSH
77151: LD_INT 2
77153: NEG
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77180: LD_ADDR_VAR 0 23
77184: PUSH
77185: LD_INT 0
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 0
77197: PUSH
77198: LD_INT 1
77200: NEG
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 1
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 1
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: LD_INT 1
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 1
77238: NEG
77239: PUSH
77240: LD_INT 0
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PUSH
77247: LD_INT 1
77249: NEG
77250: PUSH
77251: LD_INT 1
77253: NEG
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 1
77261: NEG
77262: PUSH
77263: LD_INT 2
77265: NEG
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 0
77273: PUSH
77274: LD_INT 2
77276: NEG
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: LD_INT 1
77287: NEG
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PUSH
77293: LD_INT 2
77295: PUSH
77296: LD_INT 0
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PUSH
77303: LD_INT 2
77305: PUSH
77306: LD_INT 1
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 2
77315: PUSH
77316: LD_INT 2
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 1
77325: PUSH
77326: LD_INT 2
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 0
77335: PUSH
77336: LD_INT 2
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: PUSH
77343: LD_INT 1
77345: NEG
77346: PUSH
77347: LD_INT 1
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 2
77356: NEG
77357: PUSH
77358: LD_INT 0
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: LD_INT 2
77367: NEG
77368: PUSH
77369: LD_INT 1
77371: NEG
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 2
77379: NEG
77380: PUSH
77381: LD_INT 2
77383: NEG
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: PUSH
77389: LD_INT 2
77391: NEG
77392: PUSH
77393: LD_INT 3
77395: NEG
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 1
77403: NEG
77404: PUSH
77405: LD_INT 3
77407: NEG
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 1
77415: PUSH
77416: LD_INT 2
77418: NEG
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: LD_INT 2
77426: PUSH
77427: LD_INT 1
77429: NEG
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
77460: LD_ADDR_VAR 0 24
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 0
77477: PUSH
77478: LD_INT 1
77480: NEG
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 1
77488: PUSH
77489: LD_INT 0
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 1
77498: PUSH
77499: LD_INT 1
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: LD_INT 0
77508: PUSH
77509: LD_INT 1
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 1
77518: NEG
77519: PUSH
77520: LD_INT 0
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 1
77529: NEG
77530: PUSH
77531: LD_INT 1
77533: NEG
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 1
77541: NEG
77542: PUSH
77543: LD_INT 2
77545: NEG
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 0
77553: PUSH
77554: LD_INT 2
77556: NEG
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PUSH
77562: LD_INT 1
77564: PUSH
77565: LD_INT 1
77567: NEG
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 2
77575: PUSH
77576: LD_INT 0
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 2
77585: PUSH
77586: LD_INT 1
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 2
77595: PUSH
77596: LD_INT 2
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 1
77605: PUSH
77606: LD_INT 2
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 0
77615: PUSH
77616: LD_INT 2
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 1
77625: NEG
77626: PUSH
77627: LD_INT 1
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 2
77636: NEG
77637: PUSH
77638: LD_INT 0
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: LD_INT 2
77647: NEG
77648: PUSH
77649: LD_INT 1
77651: NEG
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: PUSH
77657: LD_INT 2
77659: NEG
77660: PUSH
77661: LD_INT 2
77663: NEG
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PUSH
77669: LD_INT 1
77671: PUSH
77672: LD_INT 2
77674: NEG
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 2
77682: PUSH
77683: LD_INT 1
77685: NEG
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: LD_INT 3
77693: PUSH
77694: LD_INT 1
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 3
77703: PUSH
77704: LD_INT 2
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
77736: LD_ADDR_VAR 0 25
77740: PUSH
77741: LD_INT 0
77743: PUSH
77744: LD_INT 0
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 0
77753: PUSH
77754: LD_INT 1
77756: NEG
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 1
77764: PUSH
77765: LD_INT 0
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PUSH
77772: LD_INT 1
77774: PUSH
77775: LD_INT 1
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 0
77784: PUSH
77785: LD_INT 1
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 1
77794: NEG
77795: PUSH
77796: LD_INT 0
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 1
77805: NEG
77806: PUSH
77807: LD_INT 1
77809: NEG
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: PUSH
77815: LD_INT 1
77817: NEG
77818: PUSH
77819: LD_INT 2
77821: NEG
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: LD_INT 0
77829: PUSH
77830: LD_INT 2
77832: NEG
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 1
77840: PUSH
77841: LD_INT 1
77843: NEG
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 2
77851: PUSH
77852: LD_INT 0
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: LD_INT 2
77861: PUSH
77862: LD_INT 1
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: LD_INT 2
77871: PUSH
77872: LD_INT 2
77874: PUSH
77875: EMPTY
77876: LIST
77877: LIST
77878: PUSH
77879: LD_INT 1
77881: PUSH
77882: LD_INT 2
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PUSH
77889: LD_INT 0
77891: PUSH
77892: LD_INT 2
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: PUSH
77899: LD_INT 1
77901: NEG
77902: PUSH
77903: LD_INT 1
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 2
77912: NEG
77913: PUSH
77914: LD_INT 0
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: PUSH
77921: LD_INT 2
77923: NEG
77924: PUSH
77925: LD_INT 1
77927: NEG
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: PUSH
77933: LD_INT 2
77935: NEG
77936: PUSH
77937: LD_INT 2
77939: NEG
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: LD_INT 3
77947: PUSH
77948: LD_INT 1
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 3
77957: PUSH
77958: LD_INT 2
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: LD_INT 2
77967: PUSH
77968: LD_INT 3
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: LD_INT 1
77977: PUSH
77978: LD_INT 3
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: LIST
78009: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78010: LD_ADDR_VAR 0 26
78014: PUSH
78015: LD_INT 0
78017: PUSH
78018: LD_INT 0
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: LD_INT 1
78030: NEG
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: LD_INT 1
78038: PUSH
78039: LD_INT 0
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: LD_INT 1
78048: PUSH
78049: LD_INT 1
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 1
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 1
78068: NEG
78069: PUSH
78070: LD_INT 0
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 1
78079: NEG
78080: PUSH
78081: LD_INT 1
78083: NEG
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PUSH
78089: LD_INT 1
78091: NEG
78092: PUSH
78093: LD_INT 2
78095: NEG
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: PUSH
78101: LD_INT 0
78103: PUSH
78104: LD_INT 2
78106: NEG
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PUSH
78112: LD_INT 1
78114: PUSH
78115: LD_INT 1
78117: NEG
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: LD_INT 2
78125: PUSH
78126: LD_INT 0
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: PUSH
78133: LD_INT 2
78135: PUSH
78136: LD_INT 1
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 2
78145: PUSH
78146: LD_INT 2
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 1
78155: PUSH
78156: LD_INT 2
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 0
78165: PUSH
78166: LD_INT 2
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: LD_INT 1
78175: NEG
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: LD_INT 2
78186: NEG
78187: PUSH
78188: LD_INT 0
78190: PUSH
78191: EMPTY
78192: LIST
78193: LIST
78194: PUSH
78195: LD_INT 2
78197: NEG
78198: PUSH
78199: LD_INT 1
78201: NEG
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: PUSH
78207: LD_INT 2
78209: NEG
78210: PUSH
78211: LD_INT 2
78213: NEG
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 2
78221: PUSH
78222: LD_INT 3
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 1
78231: PUSH
78232: LD_INT 3
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: LD_INT 1
78241: NEG
78242: PUSH
78243: LD_INT 2
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PUSH
78250: LD_INT 2
78252: NEG
78253: PUSH
78254: LD_INT 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78286: LD_ADDR_VAR 0 27
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: LD_INT 0
78296: PUSH
78297: EMPTY
78298: LIST
78299: LIST
78300: PUSH
78301: LD_INT 0
78303: PUSH
78304: LD_INT 1
78306: NEG
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: LD_INT 1
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 1
78324: PUSH
78325: LD_INT 1
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 0
78334: PUSH
78335: LD_INT 1
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 1
78344: NEG
78345: PUSH
78346: LD_INT 0
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 1
78355: NEG
78356: PUSH
78357: LD_INT 1
78359: NEG
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PUSH
78365: LD_INT 1
78367: NEG
78368: PUSH
78369: LD_INT 2
78371: NEG
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: LD_INT 0
78379: PUSH
78380: LD_INT 2
78382: NEG
78383: PUSH
78384: EMPTY
78385: LIST
78386: LIST
78387: PUSH
78388: LD_INT 1
78390: PUSH
78391: LD_INT 1
78393: NEG
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 2
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 2
78411: PUSH
78412: LD_INT 1
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: LD_INT 2
78421: PUSH
78422: LD_INT 2
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: LD_INT 2
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 0
78441: PUSH
78442: LD_INT 2
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: LD_INT 1
78451: NEG
78452: PUSH
78453: LD_INT 1
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 2
78462: NEG
78463: PUSH
78464: LD_INT 0
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: PUSH
78471: LD_INT 2
78473: NEG
78474: PUSH
78475: LD_INT 1
78477: NEG
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PUSH
78483: LD_INT 2
78485: NEG
78486: PUSH
78487: LD_INT 2
78489: NEG
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 1
78497: NEG
78498: PUSH
78499: LD_INT 2
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: LD_INT 2
78508: NEG
78509: PUSH
78510: LD_INT 1
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 3
78519: NEG
78520: PUSH
78521: LD_INT 1
78523: NEG
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 3
78531: NEG
78532: PUSH
78533: LD_INT 2
78535: NEG
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78566: LD_ADDR_VAR 0 28
78570: PUSH
78571: LD_INT 0
78573: PUSH
78574: LD_INT 0
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 0
78583: PUSH
78584: LD_INT 1
78586: NEG
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 1
78594: PUSH
78595: LD_INT 0
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 1
78604: PUSH
78605: LD_INT 1
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 0
78614: PUSH
78615: LD_INT 1
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: LD_INT 1
78624: NEG
78625: PUSH
78626: LD_INT 0
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: PUSH
78633: LD_INT 1
78635: NEG
78636: PUSH
78637: LD_INT 1
78639: NEG
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 1
78647: NEG
78648: PUSH
78649: LD_INT 2
78651: NEG
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: LD_INT 2
78662: NEG
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 1
78670: PUSH
78671: LD_INT 1
78673: NEG
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 2
78681: PUSH
78682: LD_INT 0
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 2
78691: PUSH
78692: LD_INT 1
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: PUSH
78699: LD_INT 2
78701: PUSH
78702: LD_INT 2
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: PUSH
78709: LD_INT 1
78711: PUSH
78712: LD_INT 2
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 0
78721: PUSH
78722: LD_INT 2
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 1
78731: NEG
78732: PUSH
78733: LD_INT 1
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 2
78742: NEG
78743: PUSH
78744: LD_INT 0
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 2
78753: NEG
78754: PUSH
78755: LD_INT 1
78757: NEG
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 2
78765: NEG
78766: PUSH
78767: LD_INT 2
78769: NEG
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: LD_INT 2
78777: NEG
78778: PUSH
78779: LD_INT 3
78781: NEG
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 1
78789: NEG
78790: PUSH
78791: LD_INT 3
78793: NEG
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 3
78801: NEG
78802: PUSH
78803: LD_INT 1
78805: NEG
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: PUSH
78811: LD_INT 3
78813: NEG
78814: PUSH
78815: LD_INT 2
78817: NEG
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: LIST
78827: LIST
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
78848: LD_ADDR_VAR 0 29
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: LD_INT 0
78865: PUSH
78866: LD_INT 1
78868: NEG
78869: PUSH
78870: EMPTY
78871: LIST
78872: LIST
78873: PUSH
78874: LD_INT 1
78876: PUSH
78877: LD_INT 0
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: PUSH
78884: LD_INT 1
78886: PUSH
78887: LD_INT 1
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: LD_INT 0
78896: PUSH
78897: LD_INT 1
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: LD_INT 1
78906: NEG
78907: PUSH
78908: LD_INT 0
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 1
78917: NEG
78918: PUSH
78919: LD_INT 1
78921: NEG
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 1
78929: NEG
78930: PUSH
78931: LD_INT 2
78933: NEG
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PUSH
78939: LD_INT 0
78941: PUSH
78942: LD_INT 2
78944: NEG
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 1
78952: PUSH
78953: LD_INT 1
78955: NEG
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 2
78963: PUSH
78964: LD_INT 0
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 2
78973: PUSH
78974: LD_INT 1
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: LD_INT 1
78983: PUSH
78984: LD_INT 2
78986: PUSH
78987: EMPTY
78988: LIST
78989: LIST
78990: PUSH
78991: LD_INT 0
78993: PUSH
78994: LD_INT 2
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: PUSH
79001: LD_INT 1
79003: NEG
79004: PUSH
79005: LD_INT 1
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 2
79014: NEG
79015: PUSH
79016: LD_INT 1
79018: NEG
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: LD_INT 2
79026: NEG
79027: PUSH
79028: LD_INT 2
79030: NEG
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: LD_INT 2
79038: NEG
79039: PUSH
79040: LD_INT 3
79042: NEG
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 2
79050: PUSH
79051: LD_INT 1
79053: NEG
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 3
79061: PUSH
79062: LD_INT 1
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 1
79071: PUSH
79072: LD_INT 3
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PUSH
79079: LD_INT 1
79081: NEG
79082: PUSH
79083: LD_INT 2
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 3
79092: NEG
79093: PUSH
79094: LD_INT 2
79096: NEG
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: LIST
79126: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
79127: LD_ADDR_VAR 0 30
79131: PUSH
79132: LD_INT 0
79134: PUSH
79135: LD_INT 0
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 0
79144: PUSH
79145: LD_INT 1
79147: NEG
79148: PUSH
79149: EMPTY
79150: LIST
79151: LIST
79152: PUSH
79153: LD_INT 1
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: LD_INT 1
79165: PUSH
79166: LD_INT 1
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 0
79175: PUSH
79176: LD_INT 1
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PUSH
79183: LD_INT 1
79185: NEG
79186: PUSH
79187: LD_INT 0
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 1
79196: NEG
79197: PUSH
79198: LD_INT 1
79200: NEG
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 1
79208: NEG
79209: PUSH
79210: LD_INT 2
79212: NEG
79213: PUSH
79214: EMPTY
79215: LIST
79216: LIST
79217: PUSH
79218: LD_INT 0
79220: PUSH
79221: LD_INT 2
79223: NEG
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 1
79231: PUSH
79232: LD_INT 1
79234: NEG
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 2
79242: PUSH
79243: LD_INT 0
79245: PUSH
79246: EMPTY
79247: LIST
79248: LIST
79249: PUSH
79250: LD_INT 2
79252: PUSH
79253: LD_INT 1
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: PUSH
79260: LD_INT 2
79262: PUSH
79263: LD_INT 2
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 1
79272: PUSH
79273: LD_INT 2
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PUSH
79280: LD_INT 1
79282: NEG
79283: PUSH
79284: LD_INT 1
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: PUSH
79291: LD_INT 2
79293: NEG
79294: PUSH
79295: LD_INT 0
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: LD_INT 2
79304: NEG
79305: PUSH
79306: LD_INT 1
79308: NEG
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: PUSH
79314: LD_INT 1
79316: NEG
79317: PUSH
79318: LD_INT 3
79320: NEG
79321: PUSH
79322: EMPTY
79323: LIST
79324: LIST
79325: PUSH
79326: LD_INT 1
79328: PUSH
79329: LD_INT 2
79331: NEG
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 3
79339: PUSH
79340: LD_INT 2
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 2
79349: PUSH
79350: LD_INT 3
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 2
79359: NEG
79360: PUSH
79361: LD_INT 1
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 3
79370: NEG
79371: PUSH
79372: LD_INT 1
79374: NEG
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: LIST
79386: LIST
79387: LIST
79388: LIST
79389: LIST
79390: LIST
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: LIST
79403: LIST
79404: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
79405: LD_ADDR_VAR 0 31
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: LD_INT 0
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: LD_INT 1
79425: NEG
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 1
79433: PUSH
79434: LD_INT 0
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 1
79443: PUSH
79444: LD_INT 1
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PUSH
79451: LD_INT 0
79453: PUSH
79454: LD_INT 1
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 1
79463: NEG
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 1
79474: NEG
79475: PUSH
79476: LD_INT 1
79478: NEG
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: PUSH
79484: LD_INT 1
79486: NEG
79487: PUSH
79488: LD_INT 2
79490: NEG
79491: PUSH
79492: EMPTY
79493: LIST
79494: LIST
79495: PUSH
79496: LD_INT 1
79498: PUSH
79499: LD_INT 1
79501: NEG
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 2
79509: PUSH
79510: LD_INT 0
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 2
79519: PUSH
79520: LD_INT 1
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 2
79529: PUSH
79530: LD_INT 2
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: LD_INT 1
79539: PUSH
79540: LD_INT 2
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: LD_INT 0
79549: PUSH
79550: LD_INT 2
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: PUSH
79557: LD_INT 1
79559: NEG
79560: PUSH
79561: LD_INT 1
79563: PUSH
79564: EMPTY
79565: LIST
79566: LIST
79567: PUSH
79568: LD_INT 2
79570: NEG
79571: PUSH
79572: LD_INT 1
79574: NEG
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 2
79582: NEG
79583: PUSH
79584: LD_INT 2
79586: NEG
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 2
79594: NEG
79595: PUSH
79596: LD_INT 3
79598: NEG
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PUSH
79604: LD_INT 2
79606: PUSH
79607: LD_INT 1
79609: NEG
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: PUSH
79615: LD_INT 3
79617: PUSH
79618: LD_INT 1
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: LD_INT 1
79627: PUSH
79628: LD_INT 3
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 1
79637: NEG
79638: PUSH
79639: LD_INT 2
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: PUSH
79646: LD_INT 3
79648: NEG
79649: PUSH
79650: LD_INT 2
79652: NEG
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: LIST
79662: LIST
79663: LIST
79664: LIST
79665: LIST
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
79683: LD_ADDR_VAR 0 32
79687: PUSH
79688: LD_INT 0
79690: PUSH
79691: LD_INT 0
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: PUSH
79698: LD_INT 0
79700: PUSH
79701: LD_INT 1
79703: NEG
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 1
79711: PUSH
79712: LD_INT 0
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 1
79721: PUSH
79722: LD_INT 1
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 0
79731: PUSH
79732: LD_INT 1
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 1
79741: NEG
79742: PUSH
79743: LD_INT 0
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 1
79752: NEG
79753: PUSH
79754: LD_INT 1
79756: NEG
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 1
79764: NEG
79765: PUSH
79766: LD_INT 2
79768: NEG
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 0
79776: PUSH
79777: LD_INT 2
79779: NEG
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: LD_INT 1
79787: PUSH
79788: LD_INT 1
79790: NEG
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: LD_INT 2
79798: PUSH
79799: LD_INT 1
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 2
79808: PUSH
79809: LD_INT 2
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PUSH
79816: LD_INT 1
79818: PUSH
79819: LD_INT 2
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: PUSH
79826: LD_INT 0
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: LD_INT 1
79838: NEG
79839: PUSH
79840: LD_INT 1
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 2
79849: NEG
79850: PUSH
79851: LD_INT 0
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 2
79860: NEG
79861: PUSH
79862: LD_INT 1
79864: NEG
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 1
79872: NEG
79873: PUSH
79874: LD_INT 3
79876: NEG
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: PUSH
79882: LD_INT 1
79884: PUSH
79885: LD_INT 2
79887: NEG
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 3
79895: PUSH
79896: LD_INT 2
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 2
79905: PUSH
79906: LD_INT 3
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: LD_INT 2
79915: NEG
79916: PUSH
79917: LD_INT 1
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 3
79926: NEG
79927: PUSH
79928: LD_INT 1
79930: NEG
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
79961: LD_ADDR_VAR 0 33
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: LD_INT 0
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 0
79978: PUSH
79979: LD_INT 1
79981: NEG
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 1
79989: PUSH
79990: LD_INT 0
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 1
79999: PUSH
80000: LD_INT 1
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: LD_INT 1
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: PUSH
80017: LD_INT 1
80019: NEG
80020: PUSH
80021: LD_INT 0
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 1
80030: NEG
80031: PUSH
80032: LD_INT 1
80034: NEG
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: PUSH
80040: LD_INT 1
80042: NEG
80043: PUSH
80044: LD_INT 2
80046: NEG
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 1
80054: PUSH
80055: LD_INT 1
80057: NEG
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: PUSH
80063: LD_INT 2
80065: PUSH
80066: LD_INT 0
80068: PUSH
80069: EMPTY
80070: LIST
80071: LIST
80072: PUSH
80073: LD_INT 2
80075: PUSH
80076: LD_INT 1
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: LD_INT 1
80085: PUSH
80086: LD_INT 2
80088: PUSH
80089: EMPTY
80090: LIST
80091: LIST
80092: PUSH
80093: LD_INT 0
80095: PUSH
80096: LD_INT 2
80098: PUSH
80099: EMPTY
80100: LIST
80101: LIST
80102: PUSH
80103: LD_INT 1
80105: NEG
80106: PUSH
80107: LD_INT 1
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PUSH
80114: LD_INT 2
80116: NEG
80117: PUSH
80118: LD_INT 0
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PUSH
80125: LD_INT 2
80127: NEG
80128: PUSH
80129: LD_INT 1
80131: NEG
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: PUSH
80137: LD_INT 2
80139: NEG
80140: PUSH
80141: LD_INT 2
80143: NEG
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 2
80151: NEG
80152: PUSH
80153: LD_INT 3
80155: NEG
80156: PUSH
80157: EMPTY
80158: LIST
80159: LIST
80160: PUSH
80161: LD_INT 2
80163: PUSH
80164: LD_INT 1
80166: NEG
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PUSH
80172: LD_INT 3
80174: PUSH
80175: LD_INT 1
80177: PUSH
80178: EMPTY
80179: LIST
80180: LIST
80181: PUSH
80182: LD_INT 1
80184: PUSH
80185: LD_INT 3
80187: PUSH
80188: EMPTY
80189: LIST
80190: LIST
80191: PUSH
80192: LD_INT 1
80194: NEG
80195: PUSH
80196: LD_INT 2
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 3
80205: NEG
80206: PUSH
80207: LD_INT 2
80209: NEG
80210: PUSH
80211: EMPTY
80212: LIST
80213: LIST
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: LIST
80222: LIST
80223: LIST
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
80240: LD_ADDR_VAR 0 34
80244: PUSH
80245: LD_INT 0
80247: PUSH
80248: LD_INT 0
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PUSH
80255: LD_INT 0
80257: PUSH
80258: LD_INT 1
80260: NEG
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PUSH
80266: LD_INT 1
80268: PUSH
80269: LD_INT 0
80271: PUSH
80272: EMPTY
80273: LIST
80274: LIST
80275: PUSH
80276: LD_INT 1
80278: PUSH
80279: LD_INT 1
80281: PUSH
80282: EMPTY
80283: LIST
80284: LIST
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_INT 1
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: PUSH
80296: LD_INT 1
80298: NEG
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 1
80309: NEG
80310: PUSH
80311: LD_INT 1
80313: NEG
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: LD_INT 1
80321: NEG
80322: PUSH
80323: LD_INT 2
80325: NEG
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PUSH
80331: LD_INT 0
80333: PUSH
80334: LD_INT 2
80336: NEG
80337: PUSH
80338: EMPTY
80339: LIST
80340: LIST
80341: PUSH
80342: LD_INT 1
80344: PUSH
80345: LD_INT 1
80347: NEG
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_INT 2
80355: PUSH
80356: LD_INT 1
80358: PUSH
80359: EMPTY
80360: LIST
80361: LIST
80362: PUSH
80363: LD_INT 2
80365: PUSH
80366: LD_INT 2
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: PUSH
80373: LD_INT 1
80375: PUSH
80376: LD_INT 2
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 1
80385: NEG
80386: PUSH
80387: LD_INT 1
80389: PUSH
80390: EMPTY
80391: LIST
80392: LIST
80393: PUSH
80394: LD_INT 2
80396: NEG
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 2
80407: NEG
80408: PUSH
80409: LD_INT 1
80411: NEG
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: PUSH
80417: LD_INT 2
80419: NEG
80420: PUSH
80421: LD_INT 2
80423: NEG
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PUSH
80429: LD_INT 1
80431: NEG
80432: PUSH
80433: LD_INT 3
80435: NEG
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PUSH
80441: LD_INT 1
80443: PUSH
80444: LD_INT 2
80446: NEG
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: PUSH
80452: LD_INT 3
80454: PUSH
80455: LD_INT 2
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: PUSH
80462: LD_INT 2
80464: PUSH
80465: LD_INT 3
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 2
80474: NEG
80475: PUSH
80476: LD_INT 1
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 3
80485: NEG
80486: PUSH
80487: LD_INT 1
80489: NEG
80490: PUSH
80491: EMPTY
80492: LIST
80493: LIST
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: LIST
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: LIST
80504: LIST
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: LIST
80516: LIST
80517: LIST
80518: LIST
80519: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
80520: LD_ADDR_VAR 0 35
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 0
80537: PUSH
80538: LD_INT 1
80540: NEG
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: PUSH
80546: LD_INT 1
80548: PUSH
80549: LD_INT 0
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: LD_INT 1
80558: PUSH
80559: LD_INT 1
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 0
80568: PUSH
80569: LD_INT 1
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: PUSH
80576: LD_INT 1
80578: NEG
80579: PUSH
80580: LD_INT 0
80582: PUSH
80583: EMPTY
80584: LIST
80585: LIST
80586: PUSH
80587: LD_INT 1
80589: NEG
80590: PUSH
80591: LD_INT 1
80593: NEG
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PUSH
80599: LD_INT 2
80601: PUSH
80602: LD_INT 1
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: PUSH
80609: LD_INT 2
80611: NEG
80612: PUSH
80613: LD_INT 1
80615: NEG
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: PUSH
80621: EMPTY
80622: LIST
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
80632: LD_ADDR_VAR 0 36
80636: PUSH
80637: LD_INT 0
80639: PUSH
80640: LD_INT 0
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 0
80649: PUSH
80650: LD_INT 1
80652: NEG
80653: PUSH
80654: EMPTY
80655: LIST
80656: LIST
80657: PUSH
80658: LD_INT 1
80660: PUSH
80661: LD_INT 0
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: PUSH
80668: LD_INT 1
80670: PUSH
80671: LD_INT 1
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: LD_INT 0
80680: PUSH
80681: LD_INT 1
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 1
80690: NEG
80691: PUSH
80692: LD_INT 0
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: PUSH
80699: LD_INT 1
80701: NEG
80702: PUSH
80703: LD_INT 1
80705: NEG
80706: PUSH
80707: EMPTY
80708: LIST
80709: LIST
80710: PUSH
80711: LD_INT 1
80713: NEG
80714: PUSH
80715: LD_INT 2
80717: NEG
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: PUSH
80723: LD_INT 1
80725: PUSH
80726: LD_INT 2
80728: PUSH
80729: EMPTY
80730: LIST
80731: LIST
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: LIST
80742: LIST
80743: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
80744: LD_ADDR_VAR 0 37
80748: PUSH
80749: LD_INT 0
80751: PUSH
80752: LD_INT 0
80754: PUSH
80755: EMPTY
80756: LIST
80757: LIST
80758: PUSH
80759: LD_INT 0
80761: PUSH
80762: LD_INT 1
80764: NEG
80765: PUSH
80766: EMPTY
80767: LIST
80768: LIST
80769: PUSH
80770: LD_INT 1
80772: PUSH
80773: LD_INT 0
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 1
80782: PUSH
80783: LD_INT 1
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PUSH
80790: LD_INT 0
80792: PUSH
80793: LD_INT 1
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: PUSH
80800: LD_INT 1
80802: NEG
80803: PUSH
80804: LD_INT 0
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 1
80813: NEG
80814: PUSH
80815: LD_INT 1
80817: NEG
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 1
80825: PUSH
80826: LD_INT 1
80828: NEG
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PUSH
80834: LD_INT 1
80836: NEG
80837: PUSH
80838: LD_INT 1
80840: PUSH
80841: EMPTY
80842: LIST
80843: LIST
80844: PUSH
80845: EMPTY
80846: LIST
80847: LIST
80848: LIST
80849: LIST
80850: LIST
80851: LIST
80852: LIST
80853: LIST
80854: LIST
80855: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
80856: LD_ADDR_VAR 0 38
80860: PUSH
80861: LD_INT 0
80863: PUSH
80864: LD_INT 0
80866: PUSH
80867: EMPTY
80868: LIST
80869: LIST
80870: PUSH
80871: LD_INT 0
80873: PUSH
80874: LD_INT 1
80876: NEG
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: PUSH
80882: LD_INT 1
80884: PUSH
80885: LD_INT 0
80887: PUSH
80888: EMPTY
80889: LIST
80890: LIST
80891: PUSH
80892: LD_INT 1
80894: PUSH
80895: LD_INT 1
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 0
80904: PUSH
80905: LD_INT 1
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 1
80914: NEG
80915: PUSH
80916: LD_INT 0
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PUSH
80923: LD_INT 1
80925: NEG
80926: PUSH
80927: LD_INT 1
80929: NEG
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 2
80937: PUSH
80938: LD_INT 1
80940: PUSH
80941: EMPTY
80942: LIST
80943: LIST
80944: PUSH
80945: LD_INT 2
80947: NEG
80948: PUSH
80949: LD_INT 1
80951: NEG
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
80968: LD_ADDR_VAR 0 39
80972: PUSH
80973: LD_INT 0
80975: PUSH
80976: LD_INT 0
80978: PUSH
80979: EMPTY
80980: LIST
80981: LIST
80982: PUSH
80983: LD_INT 0
80985: PUSH
80986: LD_INT 1
80988: NEG
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: PUSH
80994: LD_INT 1
80996: PUSH
80997: LD_INT 0
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: PUSH
81004: LD_INT 1
81006: PUSH
81007: LD_INT 1
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 0
81016: PUSH
81017: LD_INT 1
81019: PUSH
81020: EMPTY
81021: LIST
81022: LIST
81023: PUSH
81024: LD_INT 1
81026: NEG
81027: PUSH
81028: LD_INT 0
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: PUSH
81035: LD_INT 1
81037: NEG
81038: PUSH
81039: LD_INT 1
81041: NEG
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 1
81049: NEG
81050: PUSH
81051: LD_INT 2
81053: NEG
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 1
81061: PUSH
81062: LD_INT 2
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: LIST
81073: LIST
81074: LIST
81075: LIST
81076: LIST
81077: LIST
81078: LIST
81079: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
81080: LD_ADDR_VAR 0 40
81084: PUSH
81085: LD_INT 0
81087: PUSH
81088: LD_INT 0
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: PUSH
81095: LD_INT 0
81097: PUSH
81098: LD_INT 1
81100: NEG
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PUSH
81106: LD_INT 1
81108: PUSH
81109: LD_INT 0
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: LD_INT 1
81118: PUSH
81119: LD_INT 1
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: PUSH
81126: LD_INT 0
81128: PUSH
81129: LD_INT 1
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: PUSH
81136: LD_INT 1
81138: NEG
81139: PUSH
81140: LD_INT 0
81142: PUSH
81143: EMPTY
81144: LIST
81145: LIST
81146: PUSH
81147: LD_INT 1
81149: NEG
81150: PUSH
81151: LD_INT 1
81153: NEG
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PUSH
81159: LD_INT 1
81161: PUSH
81162: LD_INT 1
81164: NEG
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: PUSH
81170: LD_INT 1
81172: NEG
81173: PUSH
81174: LD_INT 1
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: LIST
81185: LIST
81186: LIST
81187: LIST
81188: LIST
81189: LIST
81190: LIST
81191: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81192: LD_ADDR_VAR 0 41
81196: PUSH
81197: LD_INT 0
81199: PUSH
81200: LD_INT 0
81202: PUSH
81203: EMPTY
81204: LIST
81205: LIST
81206: PUSH
81207: LD_INT 0
81209: PUSH
81210: LD_INT 1
81212: NEG
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PUSH
81218: LD_INT 1
81220: PUSH
81221: LD_INT 0
81223: PUSH
81224: EMPTY
81225: LIST
81226: LIST
81227: PUSH
81228: LD_INT 1
81230: PUSH
81231: LD_INT 1
81233: PUSH
81234: EMPTY
81235: LIST
81236: LIST
81237: PUSH
81238: LD_INT 0
81240: PUSH
81241: LD_INT 1
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: PUSH
81248: LD_INT 1
81250: NEG
81251: PUSH
81252: LD_INT 0
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: PUSH
81259: LD_INT 1
81261: NEG
81262: PUSH
81263: LD_INT 1
81265: NEG
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: PUSH
81271: LD_INT 1
81273: NEG
81274: PUSH
81275: LD_INT 2
81277: NEG
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 1
81285: PUSH
81286: LD_INT 1
81288: NEG
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: PUSH
81294: LD_INT 2
81296: PUSH
81297: LD_INT 0
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: LD_INT 2
81306: PUSH
81307: LD_INT 1
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: PUSH
81314: LD_INT 2
81316: PUSH
81317: LD_INT 2
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PUSH
81324: LD_INT 1
81326: PUSH
81327: LD_INT 2
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PUSH
81334: LD_INT 1
81336: NEG
81337: PUSH
81338: LD_INT 1
81340: PUSH
81341: EMPTY
81342: LIST
81343: LIST
81344: PUSH
81345: LD_INT 2
81347: NEG
81348: PUSH
81349: LD_INT 0
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: PUSH
81356: LD_INT 2
81358: NEG
81359: PUSH
81360: LD_INT 1
81362: NEG
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: PUSH
81368: LD_INT 2
81370: NEG
81371: PUSH
81372: LD_INT 2
81374: NEG
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: PUSH
81380: LD_INT 2
81382: NEG
81383: PUSH
81384: LD_INT 3
81386: NEG
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: LD_INT 2
81394: PUSH
81395: LD_INT 1
81397: NEG
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 3
81405: PUSH
81406: LD_INT 0
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PUSH
81413: LD_INT 3
81415: PUSH
81416: LD_INT 1
81418: PUSH
81419: EMPTY
81420: LIST
81421: LIST
81422: PUSH
81423: LD_INT 3
81425: PUSH
81426: LD_INT 2
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: LD_INT 3
81435: PUSH
81436: LD_INT 3
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: PUSH
81443: LD_INT 2
81445: PUSH
81446: LD_INT 3
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: PUSH
81453: LD_INT 2
81455: NEG
81456: PUSH
81457: LD_INT 1
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: PUSH
81464: LD_INT 3
81466: NEG
81467: PUSH
81468: LD_INT 0
81470: PUSH
81471: EMPTY
81472: LIST
81473: LIST
81474: PUSH
81475: LD_INT 3
81477: NEG
81478: PUSH
81479: LD_INT 1
81481: NEG
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: LD_INT 3
81489: NEG
81490: PUSH
81491: LD_INT 2
81493: NEG
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 3
81501: NEG
81502: PUSH
81503: LD_INT 3
81505: NEG
81506: PUSH
81507: EMPTY
81508: LIST
81509: LIST
81510: PUSH
81511: EMPTY
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: LIST
81535: LIST
81536: LIST
81537: LIST
81538: LIST
81539: LIST
81540: LIST
81541: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81542: LD_ADDR_VAR 0 42
81546: PUSH
81547: LD_INT 0
81549: PUSH
81550: LD_INT 0
81552: PUSH
81553: EMPTY
81554: LIST
81555: LIST
81556: PUSH
81557: LD_INT 0
81559: PUSH
81560: LD_INT 1
81562: NEG
81563: PUSH
81564: EMPTY
81565: LIST
81566: LIST
81567: PUSH
81568: LD_INT 1
81570: PUSH
81571: LD_INT 0
81573: PUSH
81574: EMPTY
81575: LIST
81576: LIST
81577: PUSH
81578: LD_INT 1
81580: PUSH
81581: LD_INT 1
81583: PUSH
81584: EMPTY
81585: LIST
81586: LIST
81587: PUSH
81588: LD_INT 0
81590: PUSH
81591: LD_INT 1
81593: PUSH
81594: EMPTY
81595: LIST
81596: LIST
81597: PUSH
81598: LD_INT 1
81600: NEG
81601: PUSH
81602: LD_INT 0
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: PUSH
81609: LD_INT 1
81611: NEG
81612: PUSH
81613: LD_INT 1
81615: NEG
81616: PUSH
81617: EMPTY
81618: LIST
81619: LIST
81620: PUSH
81621: LD_INT 1
81623: NEG
81624: PUSH
81625: LD_INT 2
81627: NEG
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PUSH
81633: LD_INT 0
81635: PUSH
81636: LD_INT 2
81638: NEG
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: PUSH
81644: LD_INT 1
81646: PUSH
81647: LD_INT 1
81649: NEG
81650: PUSH
81651: EMPTY
81652: LIST
81653: LIST
81654: PUSH
81655: LD_INT 2
81657: PUSH
81658: LD_INT 1
81660: PUSH
81661: EMPTY
81662: LIST
81663: LIST
81664: PUSH
81665: LD_INT 2
81667: PUSH
81668: LD_INT 2
81670: PUSH
81671: EMPTY
81672: LIST
81673: LIST
81674: PUSH
81675: LD_INT 1
81677: PUSH
81678: LD_INT 2
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: LD_INT 0
81687: PUSH
81688: LD_INT 2
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PUSH
81695: LD_INT 1
81697: NEG
81698: PUSH
81699: LD_INT 1
81701: PUSH
81702: EMPTY
81703: LIST
81704: LIST
81705: PUSH
81706: LD_INT 2
81708: NEG
81709: PUSH
81710: LD_INT 1
81712: NEG
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: LD_INT 2
81720: NEG
81721: PUSH
81722: LD_INT 2
81724: NEG
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: PUSH
81730: LD_INT 2
81732: NEG
81733: PUSH
81734: LD_INT 3
81736: NEG
81737: PUSH
81738: EMPTY
81739: LIST
81740: LIST
81741: PUSH
81742: LD_INT 1
81744: NEG
81745: PUSH
81746: LD_INT 3
81748: NEG
81749: PUSH
81750: EMPTY
81751: LIST
81752: LIST
81753: PUSH
81754: LD_INT 0
81756: PUSH
81757: LD_INT 3
81759: NEG
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: LD_INT 1
81767: PUSH
81768: LD_INT 2
81770: NEG
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: PUSH
81776: LD_INT 3
81778: PUSH
81779: LD_INT 2
81781: PUSH
81782: EMPTY
81783: LIST
81784: LIST
81785: PUSH
81786: LD_INT 3
81788: PUSH
81789: LD_INT 3
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: PUSH
81796: LD_INT 2
81798: PUSH
81799: LD_INT 3
81801: PUSH
81802: EMPTY
81803: LIST
81804: LIST
81805: PUSH
81806: LD_INT 1
81808: PUSH
81809: LD_INT 3
81811: PUSH
81812: EMPTY
81813: LIST
81814: LIST
81815: PUSH
81816: LD_INT 0
81818: PUSH
81819: LD_INT 3
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: PUSH
81826: LD_INT 1
81828: NEG
81829: PUSH
81830: LD_INT 2
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: LD_INT 3
81839: NEG
81840: PUSH
81841: LD_INT 2
81843: NEG
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: PUSH
81849: LD_INT 3
81851: NEG
81852: PUSH
81853: LD_INT 3
81855: NEG
81856: PUSH
81857: EMPTY
81858: LIST
81859: LIST
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81892: LD_ADDR_VAR 0 43
81896: PUSH
81897: LD_INT 0
81899: PUSH
81900: LD_INT 0
81902: PUSH
81903: EMPTY
81904: LIST
81905: LIST
81906: PUSH
81907: LD_INT 0
81909: PUSH
81910: LD_INT 1
81912: NEG
81913: PUSH
81914: EMPTY
81915: LIST
81916: LIST
81917: PUSH
81918: LD_INT 1
81920: PUSH
81921: LD_INT 0
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: PUSH
81928: LD_INT 1
81930: PUSH
81931: LD_INT 1
81933: PUSH
81934: EMPTY
81935: LIST
81936: LIST
81937: PUSH
81938: LD_INT 0
81940: PUSH
81941: LD_INT 1
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: LD_INT 1
81950: NEG
81951: PUSH
81952: LD_INT 0
81954: PUSH
81955: EMPTY
81956: LIST
81957: LIST
81958: PUSH
81959: LD_INT 1
81961: NEG
81962: PUSH
81963: LD_INT 1
81965: NEG
81966: PUSH
81967: EMPTY
81968: LIST
81969: LIST
81970: PUSH
81971: LD_INT 1
81973: NEG
81974: PUSH
81975: LD_INT 2
81977: NEG
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: PUSH
81983: LD_INT 0
81985: PUSH
81986: LD_INT 2
81988: NEG
81989: PUSH
81990: EMPTY
81991: LIST
81992: LIST
81993: PUSH
81994: LD_INT 1
81996: PUSH
81997: LD_INT 1
81999: NEG
82000: PUSH
82001: EMPTY
82002: LIST
82003: LIST
82004: PUSH
82005: LD_INT 2
82007: PUSH
82008: LD_INT 0
82010: PUSH
82011: EMPTY
82012: LIST
82013: LIST
82014: PUSH
82015: LD_INT 2
82017: PUSH
82018: LD_INT 1
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: PUSH
82025: LD_INT 1
82027: PUSH
82028: LD_INT 2
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: LD_INT 0
82037: PUSH
82038: LD_INT 2
82040: PUSH
82041: EMPTY
82042: LIST
82043: LIST
82044: PUSH
82045: LD_INT 1
82047: NEG
82048: PUSH
82049: LD_INT 1
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: PUSH
82056: LD_INT 2
82058: NEG
82059: PUSH
82060: LD_INT 0
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: LD_INT 2
82069: NEG
82070: PUSH
82071: LD_INT 1
82073: NEG
82074: PUSH
82075: EMPTY
82076: LIST
82077: LIST
82078: PUSH
82079: LD_INT 1
82081: NEG
82082: PUSH
82083: LD_INT 3
82085: NEG
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: PUSH
82091: LD_INT 0
82093: PUSH
82094: LD_INT 3
82096: NEG
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: LD_INT 1
82104: PUSH
82105: LD_INT 2
82107: NEG
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: PUSH
82113: LD_INT 2
82115: PUSH
82116: LD_INT 1
82118: NEG
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: PUSH
82124: LD_INT 3
82126: PUSH
82127: LD_INT 0
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: PUSH
82134: LD_INT 3
82136: PUSH
82137: LD_INT 1
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: PUSH
82144: LD_INT 1
82146: PUSH
82147: LD_INT 3
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: LD_INT 0
82156: PUSH
82157: LD_INT 3
82159: PUSH
82160: EMPTY
82161: LIST
82162: LIST
82163: PUSH
82164: LD_INT 1
82166: NEG
82167: PUSH
82168: LD_INT 2
82170: PUSH
82171: EMPTY
82172: LIST
82173: LIST
82174: PUSH
82175: LD_INT 2
82177: NEG
82178: PUSH
82179: LD_INT 1
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: PUSH
82186: LD_INT 3
82188: NEG
82189: PUSH
82190: LD_INT 0
82192: PUSH
82193: EMPTY
82194: LIST
82195: LIST
82196: PUSH
82197: LD_INT 3
82199: NEG
82200: PUSH
82201: LD_INT 1
82203: NEG
82204: PUSH
82205: EMPTY
82206: LIST
82207: LIST
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: LIST
82217: LIST
82218: LIST
82219: LIST
82220: LIST
82221: LIST
82222: LIST
82223: LIST
82224: LIST
82225: LIST
82226: LIST
82227: LIST
82228: LIST
82229: LIST
82230: LIST
82231: LIST
82232: LIST
82233: LIST
82234: LIST
82235: LIST
82236: LIST
82237: LIST
82238: LIST
82239: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82240: LD_ADDR_VAR 0 44
82244: PUSH
82245: LD_INT 0
82247: PUSH
82248: LD_INT 0
82250: PUSH
82251: EMPTY
82252: LIST
82253: LIST
82254: PUSH
82255: LD_INT 0
82257: PUSH
82258: LD_INT 1
82260: NEG
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PUSH
82266: LD_INT 1
82268: PUSH
82269: LD_INT 0
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: PUSH
82276: LD_INT 1
82278: PUSH
82279: LD_INT 1
82281: PUSH
82282: EMPTY
82283: LIST
82284: LIST
82285: PUSH
82286: LD_INT 0
82288: PUSH
82289: LD_INT 1
82291: PUSH
82292: EMPTY
82293: LIST
82294: LIST
82295: PUSH
82296: LD_INT 1
82298: NEG
82299: PUSH
82300: LD_INT 0
82302: PUSH
82303: EMPTY
82304: LIST
82305: LIST
82306: PUSH
82307: LD_INT 1
82309: NEG
82310: PUSH
82311: LD_INT 1
82313: NEG
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PUSH
82319: LD_INT 1
82321: NEG
82322: PUSH
82323: LD_INT 2
82325: NEG
82326: PUSH
82327: EMPTY
82328: LIST
82329: LIST
82330: PUSH
82331: LD_INT 1
82333: PUSH
82334: LD_INT 1
82336: NEG
82337: PUSH
82338: EMPTY
82339: LIST
82340: LIST
82341: PUSH
82342: LD_INT 2
82344: PUSH
82345: LD_INT 0
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: PUSH
82352: LD_INT 2
82354: PUSH
82355: LD_INT 1
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PUSH
82362: LD_INT 2
82364: PUSH
82365: LD_INT 2
82367: PUSH
82368: EMPTY
82369: LIST
82370: LIST
82371: PUSH
82372: LD_INT 1
82374: PUSH
82375: LD_INT 2
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PUSH
82382: LD_INT 1
82384: NEG
82385: PUSH
82386: LD_INT 1
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: PUSH
82393: LD_INT 2
82395: NEG
82396: PUSH
82397: LD_INT 0
82399: PUSH
82400: EMPTY
82401: LIST
82402: LIST
82403: PUSH
82404: LD_INT 2
82406: NEG
82407: PUSH
82408: LD_INT 1
82410: NEG
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: PUSH
82416: LD_INT 2
82418: NEG
82419: PUSH
82420: LD_INT 2
82422: NEG
82423: PUSH
82424: EMPTY
82425: LIST
82426: LIST
82427: PUSH
82428: LD_INT 2
82430: NEG
82431: PUSH
82432: LD_INT 3
82434: NEG
82435: PUSH
82436: EMPTY
82437: LIST
82438: LIST
82439: PUSH
82440: LD_INT 2
82442: PUSH
82443: LD_INT 1
82445: NEG
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: PUSH
82451: LD_INT 3
82453: PUSH
82454: LD_INT 0
82456: PUSH
82457: EMPTY
82458: LIST
82459: LIST
82460: PUSH
82461: LD_INT 3
82463: PUSH
82464: LD_INT 1
82466: PUSH
82467: EMPTY
82468: LIST
82469: LIST
82470: PUSH
82471: LD_INT 3
82473: PUSH
82474: LD_INT 2
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: PUSH
82481: LD_INT 3
82483: PUSH
82484: LD_INT 3
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PUSH
82491: LD_INT 2
82493: PUSH
82494: LD_INT 3
82496: PUSH
82497: EMPTY
82498: LIST
82499: LIST
82500: PUSH
82501: LD_INT 2
82503: NEG
82504: PUSH
82505: LD_INT 1
82507: PUSH
82508: EMPTY
82509: LIST
82510: LIST
82511: PUSH
82512: LD_INT 3
82514: NEG
82515: PUSH
82516: LD_INT 0
82518: PUSH
82519: EMPTY
82520: LIST
82521: LIST
82522: PUSH
82523: LD_INT 3
82525: NEG
82526: PUSH
82527: LD_INT 1
82529: NEG
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: PUSH
82535: LD_INT 3
82537: NEG
82538: PUSH
82539: LD_INT 2
82541: NEG
82542: PUSH
82543: EMPTY
82544: LIST
82545: LIST
82546: PUSH
82547: LD_INT 3
82549: NEG
82550: PUSH
82551: LD_INT 3
82553: NEG
82554: PUSH
82555: EMPTY
82556: LIST
82557: LIST
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: LIST
82581: LIST
82582: LIST
82583: LIST
82584: LIST
82585: LIST
82586: LIST
82587: LIST
82588: LIST
82589: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82590: LD_ADDR_VAR 0 45
82594: PUSH
82595: LD_INT 0
82597: PUSH
82598: LD_INT 0
82600: PUSH
82601: EMPTY
82602: LIST
82603: LIST
82604: PUSH
82605: LD_INT 0
82607: PUSH
82608: LD_INT 1
82610: NEG
82611: PUSH
82612: EMPTY
82613: LIST
82614: LIST
82615: PUSH
82616: LD_INT 1
82618: PUSH
82619: LD_INT 0
82621: PUSH
82622: EMPTY
82623: LIST
82624: LIST
82625: PUSH
82626: LD_INT 1
82628: PUSH
82629: LD_INT 1
82631: PUSH
82632: EMPTY
82633: LIST
82634: LIST
82635: PUSH
82636: LD_INT 0
82638: PUSH
82639: LD_INT 1
82641: PUSH
82642: EMPTY
82643: LIST
82644: LIST
82645: PUSH
82646: LD_INT 1
82648: NEG
82649: PUSH
82650: LD_INT 0
82652: PUSH
82653: EMPTY
82654: LIST
82655: LIST
82656: PUSH
82657: LD_INT 1
82659: NEG
82660: PUSH
82661: LD_INT 1
82663: NEG
82664: PUSH
82665: EMPTY
82666: LIST
82667: LIST
82668: PUSH
82669: LD_INT 1
82671: NEG
82672: PUSH
82673: LD_INT 2
82675: NEG
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PUSH
82681: LD_INT 0
82683: PUSH
82684: LD_INT 2
82686: NEG
82687: PUSH
82688: EMPTY
82689: LIST
82690: LIST
82691: PUSH
82692: LD_INT 1
82694: PUSH
82695: LD_INT 1
82697: NEG
82698: PUSH
82699: EMPTY
82700: LIST
82701: LIST
82702: PUSH
82703: LD_INT 2
82705: PUSH
82706: LD_INT 1
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: PUSH
82713: LD_INT 2
82715: PUSH
82716: LD_INT 2
82718: PUSH
82719: EMPTY
82720: LIST
82721: LIST
82722: PUSH
82723: LD_INT 1
82725: PUSH
82726: LD_INT 2
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: LD_INT 0
82735: PUSH
82736: LD_INT 2
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: PUSH
82743: LD_INT 1
82745: NEG
82746: PUSH
82747: LD_INT 1
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: PUSH
82754: LD_INT 2
82756: NEG
82757: PUSH
82758: LD_INT 1
82760: NEG
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: PUSH
82766: LD_INT 2
82768: NEG
82769: PUSH
82770: LD_INT 2
82772: NEG
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: PUSH
82778: LD_INT 2
82780: NEG
82781: PUSH
82782: LD_INT 3
82784: NEG
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: PUSH
82790: LD_INT 1
82792: NEG
82793: PUSH
82794: LD_INT 3
82796: NEG
82797: PUSH
82798: EMPTY
82799: LIST
82800: LIST
82801: PUSH
82802: LD_INT 0
82804: PUSH
82805: LD_INT 3
82807: NEG
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PUSH
82813: LD_INT 1
82815: PUSH
82816: LD_INT 2
82818: NEG
82819: PUSH
82820: EMPTY
82821: LIST
82822: LIST
82823: PUSH
82824: LD_INT 3
82826: PUSH
82827: LD_INT 2
82829: PUSH
82830: EMPTY
82831: LIST
82832: LIST
82833: PUSH
82834: LD_INT 3
82836: PUSH
82837: LD_INT 3
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: PUSH
82844: LD_INT 2
82846: PUSH
82847: LD_INT 3
82849: PUSH
82850: EMPTY
82851: LIST
82852: LIST
82853: PUSH
82854: LD_INT 1
82856: PUSH
82857: LD_INT 3
82859: PUSH
82860: EMPTY
82861: LIST
82862: LIST
82863: PUSH
82864: LD_INT 0
82866: PUSH
82867: LD_INT 3
82869: PUSH
82870: EMPTY
82871: LIST
82872: LIST
82873: PUSH
82874: LD_INT 1
82876: NEG
82877: PUSH
82878: LD_INT 2
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PUSH
82885: LD_INT 3
82887: NEG
82888: PUSH
82889: LD_INT 2
82891: NEG
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: PUSH
82897: LD_INT 3
82899: NEG
82900: PUSH
82901: LD_INT 3
82903: NEG
82904: PUSH
82905: EMPTY
82906: LIST
82907: LIST
82908: PUSH
82909: EMPTY
82910: LIST
82911: LIST
82912: LIST
82913: LIST
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: LIST
82932: LIST
82933: LIST
82934: LIST
82935: LIST
82936: LIST
82937: LIST
82938: LIST
82939: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82940: LD_ADDR_VAR 0 46
82944: PUSH
82945: LD_INT 0
82947: PUSH
82948: LD_INT 0
82950: PUSH
82951: EMPTY
82952: LIST
82953: LIST
82954: PUSH
82955: LD_INT 0
82957: PUSH
82958: LD_INT 1
82960: NEG
82961: PUSH
82962: EMPTY
82963: LIST
82964: LIST
82965: PUSH
82966: LD_INT 1
82968: PUSH
82969: LD_INT 0
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: PUSH
82976: LD_INT 1
82978: PUSH
82979: LD_INT 1
82981: PUSH
82982: EMPTY
82983: LIST
82984: LIST
82985: PUSH
82986: LD_INT 0
82988: PUSH
82989: LD_INT 1
82991: PUSH
82992: EMPTY
82993: LIST
82994: LIST
82995: PUSH
82996: LD_INT 1
82998: NEG
82999: PUSH
83000: LD_INT 0
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PUSH
83007: LD_INT 1
83009: NEG
83010: PUSH
83011: LD_INT 1
83013: NEG
83014: PUSH
83015: EMPTY
83016: LIST
83017: LIST
83018: PUSH
83019: LD_INT 1
83021: NEG
83022: PUSH
83023: LD_INT 2
83025: NEG
83026: PUSH
83027: EMPTY
83028: LIST
83029: LIST
83030: PUSH
83031: LD_INT 0
83033: PUSH
83034: LD_INT 2
83036: NEG
83037: PUSH
83038: EMPTY
83039: LIST
83040: LIST
83041: PUSH
83042: LD_INT 1
83044: PUSH
83045: LD_INT 1
83047: NEG
83048: PUSH
83049: EMPTY
83050: LIST
83051: LIST
83052: PUSH
83053: LD_INT 2
83055: PUSH
83056: LD_INT 0
83058: PUSH
83059: EMPTY
83060: LIST
83061: LIST
83062: PUSH
83063: LD_INT 2
83065: PUSH
83066: LD_INT 1
83068: PUSH
83069: EMPTY
83070: LIST
83071: LIST
83072: PUSH
83073: LD_INT 1
83075: PUSH
83076: LD_INT 2
83078: PUSH
83079: EMPTY
83080: LIST
83081: LIST
83082: PUSH
83083: LD_INT 0
83085: PUSH
83086: LD_INT 2
83088: PUSH
83089: EMPTY
83090: LIST
83091: LIST
83092: PUSH
83093: LD_INT 1
83095: NEG
83096: PUSH
83097: LD_INT 1
83099: PUSH
83100: EMPTY
83101: LIST
83102: LIST
83103: PUSH
83104: LD_INT 2
83106: NEG
83107: PUSH
83108: LD_INT 0
83110: PUSH
83111: EMPTY
83112: LIST
83113: LIST
83114: PUSH
83115: LD_INT 2
83117: NEG
83118: PUSH
83119: LD_INT 1
83121: NEG
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: PUSH
83127: LD_INT 1
83129: NEG
83130: PUSH
83131: LD_INT 3
83133: NEG
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: PUSH
83139: LD_INT 0
83141: PUSH
83142: LD_INT 3
83144: NEG
83145: PUSH
83146: EMPTY
83147: LIST
83148: LIST
83149: PUSH
83150: LD_INT 1
83152: PUSH
83153: LD_INT 2
83155: NEG
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: PUSH
83161: LD_INT 2
83163: PUSH
83164: LD_INT 1
83166: NEG
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_INT 3
83174: PUSH
83175: LD_INT 0
83177: PUSH
83178: EMPTY
83179: LIST
83180: LIST
83181: PUSH
83182: LD_INT 3
83184: PUSH
83185: LD_INT 1
83187: PUSH
83188: EMPTY
83189: LIST
83190: LIST
83191: PUSH
83192: LD_INT 1
83194: PUSH
83195: LD_INT 3
83197: PUSH
83198: EMPTY
83199: LIST
83200: LIST
83201: PUSH
83202: LD_INT 0
83204: PUSH
83205: LD_INT 3
83207: PUSH
83208: EMPTY
83209: LIST
83210: LIST
83211: PUSH
83212: LD_INT 1
83214: NEG
83215: PUSH
83216: LD_INT 2
83218: PUSH
83219: EMPTY
83220: LIST
83221: LIST
83222: PUSH
83223: LD_INT 2
83225: NEG
83226: PUSH
83227: LD_INT 1
83229: PUSH
83230: EMPTY
83231: LIST
83232: LIST
83233: PUSH
83234: LD_INT 3
83236: NEG
83237: PUSH
83238: LD_INT 0
83240: PUSH
83241: EMPTY
83242: LIST
83243: LIST
83244: PUSH
83245: LD_INT 3
83247: NEG
83248: PUSH
83249: LD_INT 1
83251: NEG
83252: PUSH
83253: EMPTY
83254: LIST
83255: LIST
83256: PUSH
83257: EMPTY
83258: LIST
83259: LIST
83260: LIST
83261: LIST
83262: LIST
83263: LIST
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: LIST
83271: LIST
83272: LIST
83273: LIST
83274: LIST
83275: LIST
83276: LIST
83277: LIST
83278: LIST
83279: LIST
83280: LIST
83281: LIST
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: LIST
83287: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83288: LD_ADDR_VAR 0 47
83292: PUSH
83293: LD_INT 0
83295: PUSH
83296: LD_INT 0
83298: PUSH
83299: EMPTY
83300: LIST
83301: LIST
83302: PUSH
83303: LD_INT 0
83305: PUSH
83306: LD_INT 1
83308: NEG
83309: PUSH
83310: EMPTY
83311: LIST
83312: LIST
83313: PUSH
83314: LD_INT 1
83316: PUSH
83317: LD_INT 0
83319: PUSH
83320: EMPTY
83321: LIST
83322: LIST
83323: PUSH
83324: LD_INT 1
83326: PUSH
83327: LD_INT 1
83329: PUSH
83330: EMPTY
83331: LIST
83332: LIST
83333: PUSH
83334: LD_INT 0
83336: PUSH
83337: LD_INT 1
83339: PUSH
83340: EMPTY
83341: LIST
83342: LIST
83343: PUSH
83344: LD_INT 1
83346: NEG
83347: PUSH
83348: LD_INT 0
83350: PUSH
83351: EMPTY
83352: LIST
83353: LIST
83354: PUSH
83355: LD_INT 1
83357: NEG
83358: PUSH
83359: LD_INT 1
83361: NEG
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: PUSH
83367: LD_INT 1
83369: NEG
83370: PUSH
83371: LD_INT 2
83373: NEG
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: PUSH
83379: LD_INT 0
83381: PUSH
83382: LD_INT 2
83384: NEG
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: PUSH
83390: LD_INT 1
83392: PUSH
83393: LD_INT 1
83395: NEG
83396: PUSH
83397: EMPTY
83398: LIST
83399: LIST
83400: PUSH
83401: LD_INT 2
83403: NEG
83404: PUSH
83405: LD_INT 1
83407: NEG
83408: PUSH
83409: EMPTY
83410: LIST
83411: LIST
83412: PUSH
83413: LD_INT 2
83415: NEG
83416: PUSH
83417: LD_INT 2
83419: NEG
83420: PUSH
83421: EMPTY
83422: LIST
83423: LIST
83424: PUSH
83425: EMPTY
83426: LIST
83427: LIST
83428: LIST
83429: LIST
83430: LIST
83431: LIST
83432: LIST
83433: LIST
83434: LIST
83435: LIST
83436: LIST
83437: LIST
83438: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83439: LD_ADDR_VAR 0 48
83443: PUSH
83444: LD_INT 0
83446: PUSH
83447: LD_INT 0
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: PUSH
83454: LD_INT 0
83456: PUSH
83457: LD_INT 1
83459: NEG
83460: PUSH
83461: EMPTY
83462: LIST
83463: LIST
83464: PUSH
83465: LD_INT 1
83467: PUSH
83468: LD_INT 0
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: PUSH
83475: LD_INT 1
83477: PUSH
83478: LD_INT 1
83480: PUSH
83481: EMPTY
83482: LIST
83483: LIST
83484: PUSH
83485: LD_INT 0
83487: PUSH
83488: LD_INT 1
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PUSH
83495: LD_INT 1
83497: NEG
83498: PUSH
83499: LD_INT 0
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: PUSH
83506: LD_INT 1
83508: NEG
83509: PUSH
83510: LD_INT 1
83512: NEG
83513: PUSH
83514: EMPTY
83515: LIST
83516: LIST
83517: PUSH
83518: LD_INT 1
83520: NEG
83521: PUSH
83522: LD_INT 2
83524: NEG
83525: PUSH
83526: EMPTY
83527: LIST
83528: LIST
83529: PUSH
83530: LD_INT 0
83532: PUSH
83533: LD_INT 2
83535: NEG
83536: PUSH
83537: EMPTY
83538: LIST
83539: LIST
83540: PUSH
83541: LD_INT 1
83543: PUSH
83544: LD_INT 1
83546: NEG
83547: PUSH
83548: EMPTY
83549: LIST
83550: LIST
83551: PUSH
83552: LD_INT 2
83554: PUSH
83555: LD_INT 0
83557: PUSH
83558: EMPTY
83559: LIST
83560: LIST
83561: PUSH
83562: LD_INT 2
83564: PUSH
83565: LD_INT 1
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: LIST
83576: LIST
83577: LIST
83578: LIST
83579: LIST
83580: LIST
83581: LIST
83582: LIST
83583: LIST
83584: LIST
83585: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83586: LD_ADDR_VAR 0 49
83590: PUSH
83591: LD_INT 0
83593: PUSH
83594: LD_INT 0
83596: PUSH
83597: EMPTY
83598: LIST
83599: LIST
83600: PUSH
83601: LD_INT 0
83603: PUSH
83604: LD_INT 1
83606: NEG
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PUSH
83612: LD_INT 1
83614: PUSH
83615: LD_INT 0
83617: PUSH
83618: EMPTY
83619: LIST
83620: LIST
83621: PUSH
83622: LD_INT 1
83624: PUSH
83625: LD_INT 1
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: PUSH
83632: LD_INT 0
83634: PUSH
83635: LD_INT 1
83637: PUSH
83638: EMPTY
83639: LIST
83640: LIST
83641: PUSH
83642: LD_INT 1
83644: NEG
83645: PUSH
83646: LD_INT 0
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 1
83655: NEG
83656: PUSH
83657: LD_INT 1
83659: NEG
83660: PUSH
83661: EMPTY
83662: LIST
83663: LIST
83664: PUSH
83665: LD_INT 1
83667: PUSH
83668: LD_INT 1
83670: NEG
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: LD_INT 2
83678: PUSH
83679: LD_INT 0
83681: PUSH
83682: EMPTY
83683: LIST
83684: LIST
83685: PUSH
83686: LD_INT 2
83688: PUSH
83689: LD_INT 1
83691: PUSH
83692: EMPTY
83693: LIST
83694: LIST
83695: PUSH
83696: LD_INT 2
83698: PUSH
83699: LD_INT 2
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: PUSH
83706: LD_INT 1
83708: PUSH
83709: LD_INT 2
83711: PUSH
83712: EMPTY
83713: LIST
83714: LIST
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: LIST
83720: LIST
83721: LIST
83722: LIST
83723: LIST
83724: LIST
83725: LIST
83726: LIST
83727: LIST
83728: LIST
83729: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83730: LD_ADDR_VAR 0 50
83734: PUSH
83735: LD_INT 0
83737: PUSH
83738: LD_INT 0
83740: PUSH
83741: EMPTY
83742: LIST
83743: LIST
83744: PUSH
83745: LD_INT 0
83747: PUSH
83748: LD_INT 1
83750: NEG
83751: PUSH
83752: EMPTY
83753: LIST
83754: LIST
83755: PUSH
83756: LD_INT 1
83758: PUSH
83759: LD_INT 0
83761: PUSH
83762: EMPTY
83763: LIST
83764: LIST
83765: PUSH
83766: LD_INT 1
83768: PUSH
83769: LD_INT 1
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PUSH
83776: LD_INT 0
83778: PUSH
83779: LD_INT 1
83781: PUSH
83782: EMPTY
83783: LIST
83784: LIST
83785: PUSH
83786: LD_INT 1
83788: NEG
83789: PUSH
83790: LD_INT 0
83792: PUSH
83793: EMPTY
83794: LIST
83795: LIST
83796: PUSH
83797: LD_INT 1
83799: NEG
83800: PUSH
83801: LD_INT 1
83803: NEG
83804: PUSH
83805: EMPTY
83806: LIST
83807: LIST
83808: PUSH
83809: LD_INT 2
83811: PUSH
83812: LD_INT 1
83814: PUSH
83815: EMPTY
83816: LIST
83817: LIST
83818: PUSH
83819: LD_INT 2
83821: PUSH
83822: LD_INT 2
83824: PUSH
83825: EMPTY
83826: LIST
83827: LIST
83828: PUSH
83829: LD_INT 1
83831: PUSH
83832: LD_INT 2
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: PUSH
83839: LD_INT 0
83841: PUSH
83842: LD_INT 2
83844: PUSH
83845: EMPTY
83846: LIST
83847: LIST
83848: PUSH
83849: LD_INT 1
83851: NEG
83852: PUSH
83853: LD_INT 1
83855: PUSH
83856: EMPTY
83857: LIST
83858: LIST
83859: PUSH
83860: EMPTY
83861: LIST
83862: LIST
83863: LIST
83864: LIST
83865: LIST
83866: LIST
83867: LIST
83868: LIST
83869: LIST
83870: LIST
83871: LIST
83872: LIST
83873: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83874: LD_ADDR_VAR 0 51
83878: PUSH
83879: LD_INT 0
83881: PUSH
83882: LD_INT 0
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: PUSH
83889: LD_INT 0
83891: PUSH
83892: LD_INT 1
83894: NEG
83895: PUSH
83896: EMPTY
83897: LIST
83898: LIST
83899: PUSH
83900: LD_INT 1
83902: PUSH
83903: LD_INT 0
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: PUSH
83910: LD_INT 1
83912: PUSH
83913: LD_INT 1
83915: PUSH
83916: EMPTY
83917: LIST
83918: LIST
83919: PUSH
83920: LD_INT 0
83922: PUSH
83923: LD_INT 1
83925: PUSH
83926: EMPTY
83927: LIST
83928: LIST
83929: PUSH
83930: LD_INT 1
83932: NEG
83933: PUSH
83934: LD_INT 0
83936: PUSH
83937: EMPTY
83938: LIST
83939: LIST
83940: PUSH
83941: LD_INT 1
83943: NEG
83944: PUSH
83945: LD_INT 1
83947: NEG
83948: PUSH
83949: EMPTY
83950: LIST
83951: LIST
83952: PUSH
83953: LD_INT 1
83955: PUSH
83956: LD_INT 2
83958: PUSH
83959: EMPTY
83960: LIST
83961: LIST
83962: PUSH
83963: LD_INT 0
83965: PUSH
83966: LD_INT 2
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: PUSH
83973: LD_INT 1
83975: NEG
83976: PUSH
83977: LD_INT 1
83979: PUSH
83980: EMPTY
83981: LIST
83982: LIST
83983: PUSH
83984: LD_INT 2
83986: NEG
83987: PUSH
83988: LD_INT 0
83990: PUSH
83991: EMPTY
83992: LIST
83993: LIST
83994: PUSH
83995: LD_INT 2
83997: NEG
83998: PUSH
83999: LD_INT 1
84001: NEG
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: PUSH
84007: EMPTY
84008: LIST
84009: LIST
84010: LIST
84011: LIST
84012: LIST
84013: LIST
84014: LIST
84015: LIST
84016: LIST
84017: LIST
84018: LIST
84019: LIST
84020: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84021: LD_ADDR_VAR 0 52
84025: PUSH
84026: LD_INT 0
84028: PUSH
84029: LD_INT 0
84031: PUSH
84032: EMPTY
84033: LIST
84034: LIST
84035: PUSH
84036: LD_INT 0
84038: PUSH
84039: LD_INT 1
84041: NEG
84042: PUSH
84043: EMPTY
84044: LIST
84045: LIST
84046: PUSH
84047: LD_INT 1
84049: PUSH
84050: LD_INT 0
84052: PUSH
84053: EMPTY
84054: LIST
84055: LIST
84056: PUSH
84057: LD_INT 1
84059: PUSH
84060: LD_INT 1
84062: PUSH
84063: EMPTY
84064: LIST
84065: LIST
84066: PUSH
84067: LD_INT 0
84069: PUSH
84070: LD_INT 1
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PUSH
84077: LD_INT 1
84079: NEG
84080: PUSH
84081: LD_INT 0
84083: PUSH
84084: EMPTY
84085: LIST
84086: LIST
84087: PUSH
84088: LD_INT 1
84090: NEG
84091: PUSH
84092: LD_INT 1
84094: NEG
84095: PUSH
84096: EMPTY
84097: LIST
84098: LIST
84099: PUSH
84100: LD_INT 1
84102: NEG
84103: PUSH
84104: LD_INT 2
84106: NEG
84107: PUSH
84108: EMPTY
84109: LIST
84110: LIST
84111: PUSH
84112: LD_INT 1
84114: NEG
84115: PUSH
84116: LD_INT 1
84118: PUSH
84119: EMPTY
84120: LIST
84121: LIST
84122: PUSH
84123: LD_INT 2
84125: NEG
84126: PUSH
84127: LD_INT 0
84129: PUSH
84130: EMPTY
84131: LIST
84132: LIST
84133: PUSH
84134: LD_INT 2
84136: NEG
84137: PUSH
84138: LD_INT 1
84140: NEG
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PUSH
84146: LD_INT 2
84148: NEG
84149: PUSH
84150: LD_INT 2
84152: NEG
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: PUSH
84158: EMPTY
84159: LIST
84160: LIST
84161: LIST
84162: LIST
84163: LIST
84164: LIST
84165: LIST
84166: LIST
84167: LIST
84168: LIST
84169: LIST
84170: LIST
84171: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84172: LD_ADDR_VAR 0 53
84176: PUSH
84177: LD_INT 0
84179: PUSH
84180: LD_INT 0
84182: PUSH
84183: EMPTY
84184: LIST
84185: LIST
84186: PUSH
84187: LD_INT 0
84189: PUSH
84190: LD_INT 1
84192: NEG
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: PUSH
84198: LD_INT 1
84200: PUSH
84201: LD_INT 0
84203: PUSH
84204: EMPTY
84205: LIST
84206: LIST
84207: PUSH
84208: LD_INT 1
84210: PUSH
84211: LD_INT 1
84213: PUSH
84214: EMPTY
84215: LIST
84216: LIST
84217: PUSH
84218: LD_INT 0
84220: PUSH
84221: LD_INT 1
84223: PUSH
84224: EMPTY
84225: LIST
84226: LIST
84227: PUSH
84228: LD_INT 1
84230: NEG
84231: PUSH
84232: LD_INT 0
84234: PUSH
84235: EMPTY
84236: LIST
84237: LIST
84238: PUSH
84239: LD_INT 1
84241: NEG
84242: PUSH
84243: LD_INT 1
84245: NEG
84246: PUSH
84247: EMPTY
84248: LIST
84249: LIST
84250: PUSH
84251: LD_INT 1
84253: NEG
84254: PUSH
84255: LD_INT 2
84257: NEG
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 0
84265: PUSH
84266: LD_INT 2
84268: NEG
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: PUSH
84274: LD_INT 1
84276: PUSH
84277: LD_INT 1
84279: NEG
84280: PUSH
84281: EMPTY
84282: LIST
84283: LIST
84284: PUSH
84285: LD_INT 2
84287: PUSH
84288: LD_INT 0
84290: PUSH
84291: EMPTY
84292: LIST
84293: LIST
84294: PUSH
84295: LD_INT 2
84297: PUSH
84298: LD_INT 1
84300: PUSH
84301: EMPTY
84302: LIST
84303: LIST
84304: PUSH
84305: LD_INT 2
84307: PUSH
84308: LD_INT 2
84310: PUSH
84311: EMPTY
84312: LIST
84313: LIST
84314: PUSH
84315: LD_INT 1
84317: PUSH
84318: LD_INT 2
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PUSH
84325: LD_INT 0
84327: PUSH
84328: LD_INT 2
84330: PUSH
84331: EMPTY
84332: LIST
84333: LIST
84334: PUSH
84335: LD_INT 1
84337: NEG
84338: PUSH
84339: LD_INT 1
84341: PUSH
84342: EMPTY
84343: LIST
84344: LIST
84345: PUSH
84346: LD_INT 2
84348: NEG
84349: PUSH
84350: LD_INT 0
84352: PUSH
84353: EMPTY
84354: LIST
84355: LIST
84356: PUSH
84357: LD_INT 2
84359: NEG
84360: PUSH
84361: LD_INT 1
84363: NEG
84364: PUSH
84365: EMPTY
84366: LIST
84367: LIST
84368: PUSH
84369: LD_INT 2
84371: NEG
84372: PUSH
84373: LD_INT 2
84375: NEG
84376: PUSH
84377: EMPTY
84378: LIST
84379: LIST
84380: PUSH
84381: EMPTY
84382: LIST
84383: LIST
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: LIST
84389: LIST
84390: LIST
84391: LIST
84392: LIST
84393: LIST
84394: LIST
84395: LIST
84396: LIST
84397: LIST
84398: LIST
84399: LIST
84400: LIST
84401: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84402: LD_ADDR_VAR 0 54
84406: PUSH
84407: LD_INT 0
84409: PUSH
84410: LD_INT 0
84412: PUSH
84413: EMPTY
84414: LIST
84415: LIST
84416: PUSH
84417: LD_INT 0
84419: PUSH
84420: LD_INT 1
84422: NEG
84423: PUSH
84424: EMPTY
84425: LIST
84426: LIST
84427: PUSH
84428: LD_INT 1
84430: PUSH
84431: LD_INT 0
84433: PUSH
84434: EMPTY
84435: LIST
84436: LIST
84437: PUSH
84438: LD_INT 1
84440: PUSH
84441: LD_INT 1
84443: PUSH
84444: EMPTY
84445: LIST
84446: LIST
84447: PUSH
84448: LD_INT 0
84450: PUSH
84451: LD_INT 1
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 1
84460: NEG
84461: PUSH
84462: LD_INT 0
84464: PUSH
84465: EMPTY
84466: LIST
84467: LIST
84468: PUSH
84469: LD_INT 1
84471: NEG
84472: PUSH
84473: LD_INT 1
84475: NEG
84476: PUSH
84477: EMPTY
84478: LIST
84479: LIST
84480: PUSH
84481: LD_INT 1
84483: NEG
84484: PUSH
84485: LD_INT 2
84487: NEG
84488: PUSH
84489: EMPTY
84490: LIST
84491: LIST
84492: PUSH
84493: LD_INT 0
84495: PUSH
84496: LD_INT 2
84498: NEG
84499: PUSH
84500: EMPTY
84501: LIST
84502: LIST
84503: PUSH
84504: LD_INT 1
84506: PUSH
84507: LD_INT 1
84509: NEG
84510: PUSH
84511: EMPTY
84512: LIST
84513: LIST
84514: PUSH
84515: LD_INT 2
84517: PUSH
84518: LD_INT 0
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: PUSH
84525: LD_INT 2
84527: PUSH
84528: LD_INT 1
84530: PUSH
84531: EMPTY
84532: LIST
84533: LIST
84534: PUSH
84535: LD_INT 2
84537: PUSH
84538: LD_INT 2
84540: PUSH
84541: EMPTY
84542: LIST
84543: LIST
84544: PUSH
84545: LD_INT 1
84547: PUSH
84548: LD_INT 2
84550: PUSH
84551: EMPTY
84552: LIST
84553: LIST
84554: PUSH
84555: LD_INT 0
84557: PUSH
84558: LD_INT 2
84560: PUSH
84561: EMPTY
84562: LIST
84563: LIST
84564: PUSH
84565: LD_INT 1
84567: NEG
84568: PUSH
84569: LD_INT 1
84571: PUSH
84572: EMPTY
84573: LIST
84574: LIST
84575: PUSH
84576: LD_INT 2
84578: NEG
84579: PUSH
84580: LD_INT 0
84582: PUSH
84583: EMPTY
84584: LIST
84585: LIST
84586: PUSH
84587: LD_INT 2
84589: NEG
84590: PUSH
84591: LD_INT 1
84593: NEG
84594: PUSH
84595: EMPTY
84596: LIST
84597: LIST
84598: PUSH
84599: LD_INT 2
84601: NEG
84602: PUSH
84603: LD_INT 2
84605: NEG
84606: PUSH
84607: EMPTY
84608: LIST
84609: LIST
84610: PUSH
84611: EMPTY
84612: LIST
84613: LIST
84614: LIST
84615: LIST
84616: LIST
84617: LIST
84618: LIST
84619: LIST
84620: LIST
84621: LIST
84622: LIST
84623: LIST
84624: LIST
84625: LIST
84626: LIST
84627: LIST
84628: LIST
84629: LIST
84630: LIST
84631: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84632: LD_ADDR_VAR 0 55
84636: PUSH
84637: LD_INT 0
84639: PUSH
84640: LD_INT 0
84642: PUSH
84643: EMPTY
84644: LIST
84645: LIST
84646: PUSH
84647: LD_INT 0
84649: PUSH
84650: LD_INT 1
84652: NEG
84653: PUSH
84654: EMPTY
84655: LIST
84656: LIST
84657: PUSH
84658: LD_INT 1
84660: PUSH
84661: LD_INT 0
84663: PUSH
84664: EMPTY
84665: LIST
84666: LIST
84667: PUSH
84668: LD_INT 1
84670: PUSH
84671: LD_INT 1
84673: PUSH
84674: EMPTY
84675: LIST
84676: LIST
84677: PUSH
84678: LD_INT 0
84680: PUSH
84681: LD_INT 1
84683: PUSH
84684: EMPTY
84685: LIST
84686: LIST
84687: PUSH
84688: LD_INT 1
84690: NEG
84691: PUSH
84692: LD_INT 0
84694: PUSH
84695: EMPTY
84696: LIST
84697: LIST
84698: PUSH
84699: LD_INT 1
84701: NEG
84702: PUSH
84703: LD_INT 1
84705: NEG
84706: PUSH
84707: EMPTY
84708: LIST
84709: LIST
84710: PUSH
84711: LD_INT 1
84713: NEG
84714: PUSH
84715: LD_INT 2
84717: NEG
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: PUSH
84723: LD_INT 0
84725: PUSH
84726: LD_INT 2
84728: NEG
84729: PUSH
84730: EMPTY
84731: LIST
84732: LIST
84733: PUSH
84734: LD_INT 1
84736: PUSH
84737: LD_INT 1
84739: NEG
84740: PUSH
84741: EMPTY
84742: LIST
84743: LIST
84744: PUSH
84745: LD_INT 2
84747: PUSH
84748: LD_INT 0
84750: PUSH
84751: EMPTY
84752: LIST
84753: LIST
84754: PUSH
84755: LD_INT 2
84757: PUSH
84758: LD_INT 1
84760: PUSH
84761: EMPTY
84762: LIST
84763: LIST
84764: PUSH
84765: LD_INT 2
84767: PUSH
84768: LD_INT 2
84770: PUSH
84771: EMPTY
84772: LIST
84773: LIST
84774: PUSH
84775: LD_INT 1
84777: PUSH
84778: LD_INT 2
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 0
84787: PUSH
84788: LD_INT 2
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 1
84797: NEG
84798: PUSH
84799: LD_INT 1
84801: PUSH
84802: EMPTY
84803: LIST
84804: LIST
84805: PUSH
84806: LD_INT 2
84808: NEG
84809: PUSH
84810: LD_INT 0
84812: PUSH
84813: EMPTY
84814: LIST
84815: LIST
84816: PUSH
84817: LD_INT 2
84819: NEG
84820: PUSH
84821: LD_INT 1
84823: NEG
84824: PUSH
84825: EMPTY
84826: LIST
84827: LIST
84828: PUSH
84829: LD_INT 2
84831: NEG
84832: PUSH
84833: LD_INT 2
84835: NEG
84836: PUSH
84837: EMPTY
84838: LIST
84839: LIST
84840: PUSH
84841: EMPTY
84842: LIST
84843: LIST
84844: LIST
84845: LIST
84846: LIST
84847: LIST
84848: LIST
84849: LIST
84850: LIST
84851: LIST
84852: LIST
84853: LIST
84854: LIST
84855: LIST
84856: LIST
84857: LIST
84858: LIST
84859: LIST
84860: LIST
84861: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84862: LD_ADDR_VAR 0 56
84866: PUSH
84867: LD_INT 0
84869: PUSH
84870: LD_INT 0
84872: PUSH
84873: EMPTY
84874: LIST
84875: LIST
84876: PUSH
84877: LD_INT 0
84879: PUSH
84880: LD_INT 1
84882: NEG
84883: PUSH
84884: EMPTY
84885: LIST
84886: LIST
84887: PUSH
84888: LD_INT 1
84890: PUSH
84891: LD_INT 0
84893: PUSH
84894: EMPTY
84895: LIST
84896: LIST
84897: PUSH
84898: LD_INT 1
84900: PUSH
84901: LD_INT 1
84903: PUSH
84904: EMPTY
84905: LIST
84906: LIST
84907: PUSH
84908: LD_INT 0
84910: PUSH
84911: LD_INT 1
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: PUSH
84918: LD_INT 1
84920: NEG
84921: PUSH
84922: LD_INT 0
84924: PUSH
84925: EMPTY
84926: LIST
84927: LIST
84928: PUSH
84929: LD_INT 1
84931: NEG
84932: PUSH
84933: LD_INT 1
84935: NEG
84936: PUSH
84937: EMPTY
84938: LIST
84939: LIST
84940: PUSH
84941: LD_INT 1
84943: NEG
84944: PUSH
84945: LD_INT 2
84947: NEG
84948: PUSH
84949: EMPTY
84950: LIST
84951: LIST
84952: PUSH
84953: LD_INT 0
84955: PUSH
84956: LD_INT 2
84958: NEG
84959: PUSH
84960: EMPTY
84961: LIST
84962: LIST
84963: PUSH
84964: LD_INT 1
84966: PUSH
84967: LD_INT 1
84969: NEG
84970: PUSH
84971: EMPTY
84972: LIST
84973: LIST
84974: PUSH
84975: LD_INT 2
84977: PUSH
84978: LD_INT 0
84980: PUSH
84981: EMPTY
84982: LIST
84983: LIST
84984: PUSH
84985: LD_INT 2
84987: PUSH
84988: LD_INT 1
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: PUSH
84995: LD_INT 2
84997: PUSH
84998: LD_INT 2
85000: PUSH
85001: EMPTY
85002: LIST
85003: LIST
85004: PUSH
85005: LD_INT 1
85007: PUSH
85008: LD_INT 2
85010: PUSH
85011: EMPTY
85012: LIST
85013: LIST
85014: PUSH
85015: LD_INT 0
85017: PUSH
85018: LD_INT 2
85020: PUSH
85021: EMPTY
85022: LIST
85023: LIST
85024: PUSH
85025: LD_INT 1
85027: NEG
85028: PUSH
85029: LD_INT 1
85031: PUSH
85032: EMPTY
85033: LIST
85034: LIST
85035: PUSH
85036: LD_INT 2
85038: NEG
85039: PUSH
85040: LD_INT 0
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 2
85049: NEG
85050: PUSH
85051: LD_INT 1
85053: NEG
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: PUSH
85059: LD_INT 2
85061: NEG
85062: PUSH
85063: LD_INT 2
85065: NEG
85066: PUSH
85067: EMPTY
85068: LIST
85069: LIST
85070: PUSH
85071: EMPTY
85072: LIST
85073: LIST
85074: LIST
85075: LIST
85076: LIST
85077: LIST
85078: LIST
85079: LIST
85080: LIST
85081: LIST
85082: LIST
85083: LIST
85084: LIST
85085: LIST
85086: LIST
85087: LIST
85088: LIST
85089: LIST
85090: LIST
85091: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85092: LD_ADDR_VAR 0 57
85096: PUSH
85097: LD_INT 0
85099: PUSH
85100: LD_INT 0
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 0
85109: PUSH
85110: LD_INT 1
85112: NEG
85113: PUSH
85114: EMPTY
85115: LIST
85116: LIST
85117: PUSH
85118: LD_INT 1
85120: PUSH
85121: LD_INT 0
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: LD_INT 1
85130: PUSH
85131: LD_INT 1
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: PUSH
85138: LD_INT 0
85140: PUSH
85141: LD_INT 1
85143: PUSH
85144: EMPTY
85145: LIST
85146: LIST
85147: PUSH
85148: LD_INT 1
85150: NEG
85151: PUSH
85152: LD_INT 0
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PUSH
85159: LD_INT 1
85161: NEG
85162: PUSH
85163: LD_INT 1
85165: NEG
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: PUSH
85171: LD_INT 1
85173: NEG
85174: PUSH
85175: LD_INT 2
85177: NEG
85178: PUSH
85179: EMPTY
85180: LIST
85181: LIST
85182: PUSH
85183: LD_INT 0
85185: PUSH
85186: LD_INT 2
85188: NEG
85189: PUSH
85190: EMPTY
85191: LIST
85192: LIST
85193: PUSH
85194: LD_INT 1
85196: PUSH
85197: LD_INT 1
85199: NEG
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: PUSH
85205: LD_INT 2
85207: PUSH
85208: LD_INT 0
85210: PUSH
85211: EMPTY
85212: LIST
85213: LIST
85214: PUSH
85215: LD_INT 2
85217: PUSH
85218: LD_INT 1
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: PUSH
85225: LD_INT 2
85227: PUSH
85228: LD_INT 2
85230: PUSH
85231: EMPTY
85232: LIST
85233: LIST
85234: PUSH
85235: LD_INT 1
85237: PUSH
85238: LD_INT 2
85240: PUSH
85241: EMPTY
85242: LIST
85243: LIST
85244: PUSH
85245: LD_INT 0
85247: PUSH
85248: LD_INT 2
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: PUSH
85255: LD_INT 1
85257: NEG
85258: PUSH
85259: LD_INT 1
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: LD_INT 2
85268: NEG
85269: PUSH
85270: LD_INT 0
85272: PUSH
85273: EMPTY
85274: LIST
85275: LIST
85276: PUSH
85277: LD_INT 2
85279: NEG
85280: PUSH
85281: LD_INT 1
85283: NEG
85284: PUSH
85285: EMPTY
85286: LIST
85287: LIST
85288: PUSH
85289: LD_INT 2
85291: NEG
85292: PUSH
85293: LD_INT 2
85295: NEG
85296: PUSH
85297: EMPTY
85298: LIST
85299: LIST
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: LIST
85305: LIST
85306: LIST
85307: LIST
85308: LIST
85309: LIST
85310: LIST
85311: LIST
85312: LIST
85313: LIST
85314: LIST
85315: LIST
85316: LIST
85317: LIST
85318: LIST
85319: LIST
85320: LIST
85321: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85322: LD_ADDR_VAR 0 58
85326: PUSH
85327: LD_INT 0
85329: PUSH
85330: LD_INT 0
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: LD_INT 0
85339: PUSH
85340: LD_INT 1
85342: NEG
85343: PUSH
85344: EMPTY
85345: LIST
85346: LIST
85347: PUSH
85348: LD_INT 1
85350: PUSH
85351: LD_INT 0
85353: PUSH
85354: EMPTY
85355: LIST
85356: LIST
85357: PUSH
85358: LD_INT 1
85360: PUSH
85361: LD_INT 1
85363: PUSH
85364: EMPTY
85365: LIST
85366: LIST
85367: PUSH
85368: LD_INT 0
85370: PUSH
85371: LD_INT 1
85373: PUSH
85374: EMPTY
85375: LIST
85376: LIST
85377: PUSH
85378: LD_INT 1
85380: NEG
85381: PUSH
85382: LD_INT 0
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: PUSH
85389: LD_INT 1
85391: NEG
85392: PUSH
85393: LD_INT 1
85395: NEG
85396: PUSH
85397: EMPTY
85398: LIST
85399: LIST
85400: PUSH
85401: LD_INT 1
85403: NEG
85404: PUSH
85405: LD_INT 2
85407: NEG
85408: PUSH
85409: EMPTY
85410: LIST
85411: LIST
85412: PUSH
85413: LD_INT 0
85415: PUSH
85416: LD_INT 2
85418: NEG
85419: PUSH
85420: EMPTY
85421: LIST
85422: LIST
85423: PUSH
85424: LD_INT 1
85426: PUSH
85427: LD_INT 1
85429: NEG
85430: PUSH
85431: EMPTY
85432: LIST
85433: LIST
85434: PUSH
85435: LD_INT 2
85437: PUSH
85438: LD_INT 0
85440: PUSH
85441: EMPTY
85442: LIST
85443: LIST
85444: PUSH
85445: LD_INT 2
85447: PUSH
85448: LD_INT 1
85450: PUSH
85451: EMPTY
85452: LIST
85453: LIST
85454: PUSH
85455: LD_INT 2
85457: PUSH
85458: LD_INT 2
85460: PUSH
85461: EMPTY
85462: LIST
85463: LIST
85464: PUSH
85465: LD_INT 1
85467: PUSH
85468: LD_INT 2
85470: PUSH
85471: EMPTY
85472: LIST
85473: LIST
85474: PUSH
85475: LD_INT 0
85477: PUSH
85478: LD_INT 2
85480: PUSH
85481: EMPTY
85482: LIST
85483: LIST
85484: PUSH
85485: LD_INT 1
85487: NEG
85488: PUSH
85489: LD_INT 1
85491: PUSH
85492: EMPTY
85493: LIST
85494: LIST
85495: PUSH
85496: LD_INT 2
85498: NEG
85499: PUSH
85500: LD_INT 0
85502: PUSH
85503: EMPTY
85504: LIST
85505: LIST
85506: PUSH
85507: LD_INT 2
85509: NEG
85510: PUSH
85511: LD_INT 1
85513: NEG
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: PUSH
85519: LD_INT 2
85521: NEG
85522: PUSH
85523: LD_INT 2
85525: NEG
85526: PUSH
85527: EMPTY
85528: LIST
85529: LIST
85530: PUSH
85531: EMPTY
85532: LIST
85533: LIST
85534: LIST
85535: LIST
85536: LIST
85537: LIST
85538: LIST
85539: LIST
85540: LIST
85541: LIST
85542: LIST
85543: LIST
85544: LIST
85545: LIST
85546: LIST
85547: LIST
85548: LIST
85549: LIST
85550: LIST
85551: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85552: LD_ADDR_VAR 0 59
85556: PUSH
85557: LD_INT 0
85559: PUSH
85560: LD_INT 0
85562: PUSH
85563: EMPTY
85564: LIST
85565: LIST
85566: PUSH
85567: LD_INT 0
85569: PUSH
85570: LD_INT 1
85572: NEG
85573: PUSH
85574: EMPTY
85575: LIST
85576: LIST
85577: PUSH
85578: LD_INT 1
85580: PUSH
85581: LD_INT 0
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: PUSH
85588: LD_INT 1
85590: PUSH
85591: LD_INT 1
85593: PUSH
85594: EMPTY
85595: LIST
85596: LIST
85597: PUSH
85598: LD_INT 0
85600: PUSH
85601: LD_INT 1
85603: PUSH
85604: EMPTY
85605: LIST
85606: LIST
85607: PUSH
85608: LD_INT 1
85610: NEG
85611: PUSH
85612: LD_INT 0
85614: PUSH
85615: EMPTY
85616: LIST
85617: LIST
85618: PUSH
85619: LD_INT 1
85621: NEG
85622: PUSH
85623: LD_INT 1
85625: NEG
85626: PUSH
85627: EMPTY
85628: LIST
85629: LIST
85630: PUSH
85631: EMPTY
85632: LIST
85633: LIST
85634: LIST
85635: LIST
85636: LIST
85637: LIST
85638: LIST
85639: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85640: LD_ADDR_VAR 0 60
85644: PUSH
85645: LD_INT 0
85647: PUSH
85648: LD_INT 0
85650: PUSH
85651: EMPTY
85652: LIST
85653: LIST
85654: PUSH
85655: LD_INT 0
85657: PUSH
85658: LD_INT 1
85660: NEG
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 1
85668: PUSH
85669: LD_INT 0
85671: PUSH
85672: EMPTY
85673: LIST
85674: LIST
85675: PUSH
85676: LD_INT 1
85678: PUSH
85679: LD_INT 1
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: PUSH
85686: LD_INT 0
85688: PUSH
85689: LD_INT 1
85691: PUSH
85692: EMPTY
85693: LIST
85694: LIST
85695: PUSH
85696: LD_INT 1
85698: NEG
85699: PUSH
85700: LD_INT 0
85702: PUSH
85703: EMPTY
85704: LIST
85705: LIST
85706: PUSH
85707: LD_INT 1
85709: NEG
85710: PUSH
85711: LD_INT 1
85713: NEG
85714: PUSH
85715: EMPTY
85716: LIST
85717: LIST
85718: PUSH
85719: EMPTY
85720: LIST
85721: LIST
85722: LIST
85723: LIST
85724: LIST
85725: LIST
85726: LIST
85727: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85728: LD_ADDR_VAR 0 61
85732: PUSH
85733: LD_INT 0
85735: PUSH
85736: LD_INT 0
85738: PUSH
85739: EMPTY
85740: LIST
85741: LIST
85742: PUSH
85743: LD_INT 0
85745: PUSH
85746: LD_INT 1
85748: NEG
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: PUSH
85754: LD_INT 1
85756: PUSH
85757: LD_INT 0
85759: PUSH
85760: EMPTY
85761: LIST
85762: LIST
85763: PUSH
85764: LD_INT 1
85766: PUSH
85767: LD_INT 1
85769: PUSH
85770: EMPTY
85771: LIST
85772: LIST
85773: PUSH
85774: LD_INT 0
85776: PUSH
85777: LD_INT 1
85779: PUSH
85780: EMPTY
85781: LIST
85782: LIST
85783: PUSH
85784: LD_INT 1
85786: NEG
85787: PUSH
85788: LD_INT 0
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: PUSH
85795: LD_INT 1
85797: NEG
85798: PUSH
85799: LD_INT 1
85801: NEG
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: PUSH
85807: EMPTY
85808: LIST
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: LIST
85815: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85816: LD_ADDR_VAR 0 62
85820: PUSH
85821: LD_INT 0
85823: PUSH
85824: LD_INT 0
85826: PUSH
85827: EMPTY
85828: LIST
85829: LIST
85830: PUSH
85831: LD_INT 0
85833: PUSH
85834: LD_INT 1
85836: NEG
85837: PUSH
85838: EMPTY
85839: LIST
85840: LIST
85841: PUSH
85842: LD_INT 1
85844: PUSH
85845: LD_INT 0
85847: PUSH
85848: EMPTY
85849: LIST
85850: LIST
85851: PUSH
85852: LD_INT 1
85854: PUSH
85855: LD_INT 1
85857: PUSH
85858: EMPTY
85859: LIST
85860: LIST
85861: PUSH
85862: LD_INT 0
85864: PUSH
85865: LD_INT 1
85867: PUSH
85868: EMPTY
85869: LIST
85870: LIST
85871: PUSH
85872: LD_INT 1
85874: NEG
85875: PUSH
85876: LD_INT 0
85878: PUSH
85879: EMPTY
85880: LIST
85881: LIST
85882: PUSH
85883: LD_INT 1
85885: NEG
85886: PUSH
85887: LD_INT 1
85889: NEG
85890: PUSH
85891: EMPTY
85892: LIST
85893: LIST
85894: PUSH
85895: EMPTY
85896: LIST
85897: LIST
85898: LIST
85899: LIST
85900: LIST
85901: LIST
85902: LIST
85903: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85904: LD_ADDR_VAR 0 63
85908: PUSH
85909: LD_INT 0
85911: PUSH
85912: LD_INT 0
85914: PUSH
85915: EMPTY
85916: LIST
85917: LIST
85918: PUSH
85919: LD_INT 0
85921: PUSH
85922: LD_INT 1
85924: NEG
85925: PUSH
85926: EMPTY
85927: LIST
85928: LIST
85929: PUSH
85930: LD_INT 1
85932: PUSH
85933: LD_INT 0
85935: PUSH
85936: EMPTY
85937: LIST
85938: LIST
85939: PUSH
85940: LD_INT 1
85942: PUSH
85943: LD_INT 1
85945: PUSH
85946: EMPTY
85947: LIST
85948: LIST
85949: PUSH
85950: LD_INT 0
85952: PUSH
85953: LD_INT 1
85955: PUSH
85956: EMPTY
85957: LIST
85958: LIST
85959: PUSH
85960: LD_INT 1
85962: NEG
85963: PUSH
85964: LD_INT 0
85966: PUSH
85967: EMPTY
85968: LIST
85969: LIST
85970: PUSH
85971: LD_INT 1
85973: NEG
85974: PUSH
85975: LD_INT 1
85977: NEG
85978: PUSH
85979: EMPTY
85980: LIST
85981: LIST
85982: PUSH
85983: EMPTY
85984: LIST
85985: LIST
85986: LIST
85987: LIST
85988: LIST
85989: LIST
85990: LIST
85991: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85992: LD_ADDR_VAR 0 64
85996: PUSH
85997: LD_INT 0
85999: PUSH
86000: LD_INT 0
86002: PUSH
86003: EMPTY
86004: LIST
86005: LIST
86006: PUSH
86007: LD_INT 0
86009: PUSH
86010: LD_INT 1
86012: NEG
86013: PUSH
86014: EMPTY
86015: LIST
86016: LIST
86017: PUSH
86018: LD_INT 1
86020: PUSH
86021: LD_INT 0
86023: PUSH
86024: EMPTY
86025: LIST
86026: LIST
86027: PUSH
86028: LD_INT 1
86030: PUSH
86031: LD_INT 1
86033: PUSH
86034: EMPTY
86035: LIST
86036: LIST
86037: PUSH
86038: LD_INT 0
86040: PUSH
86041: LD_INT 1
86043: PUSH
86044: EMPTY
86045: LIST
86046: LIST
86047: PUSH
86048: LD_INT 1
86050: NEG
86051: PUSH
86052: LD_INT 0
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: PUSH
86059: LD_INT 1
86061: NEG
86062: PUSH
86063: LD_INT 1
86065: NEG
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: PUSH
86071: EMPTY
86072: LIST
86073: LIST
86074: LIST
86075: LIST
86076: LIST
86077: LIST
86078: LIST
86079: ST_TO_ADDR
// end ; 1 :
86080: GO 91977
86082: LD_INT 1
86084: DOUBLE
86085: EQUAL
86086: IFTRUE 86090
86088: GO 88713
86090: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
86091: LD_ADDR_VAR 0 11
86095: PUSH
86096: LD_INT 1
86098: NEG
86099: PUSH
86100: LD_INT 3
86102: NEG
86103: PUSH
86104: EMPTY
86105: LIST
86106: LIST
86107: PUSH
86108: LD_INT 0
86110: PUSH
86111: LD_INT 3
86113: NEG
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: PUSH
86119: LD_INT 1
86121: PUSH
86122: LD_INT 2
86124: NEG
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: PUSH
86130: EMPTY
86131: LIST
86132: LIST
86133: LIST
86134: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
86135: LD_ADDR_VAR 0 12
86139: PUSH
86140: LD_INT 2
86142: PUSH
86143: LD_INT 1
86145: NEG
86146: PUSH
86147: EMPTY
86148: LIST
86149: LIST
86150: PUSH
86151: LD_INT 3
86153: PUSH
86154: LD_INT 0
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 3
86163: PUSH
86164: LD_INT 1
86166: PUSH
86167: EMPTY
86168: LIST
86169: LIST
86170: PUSH
86171: EMPTY
86172: LIST
86173: LIST
86174: LIST
86175: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
86176: LD_ADDR_VAR 0 13
86180: PUSH
86181: LD_INT 3
86183: PUSH
86184: LD_INT 2
86186: PUSH
86187: EMPTY
86188: LIST
86189: LIST
86190: PUSH
86191: LD_INT 3
86193: PUSH
86194: LD_INT 3
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: PUSH
86201: LD_INT 2
86203: PUSH
86204: LD_INT 3
86206: PUSH
86207: EMPTY
86208: LIST
86209: LIST
86210: PUSH
86211: EMPTY
86212: LIST
86213: LIST
86214: LIST
86215: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
86216: LD_ADDR_VAR 0 14
86220: PUSH
86221: LD_INT 1
86223: PUSH
86224: LD_INT 3
86226: PUSH
86227: EMPTY
86228: LIST
86229: LIST
86230: PUSH
86231: LD_INT 0
86233: PUSH
86234: LD_INT 3
86236: PUSH
86237: EMPTY
86238: LIST
86239: LIST
86240: PUSH
86241: LD_INT 1
86243: NEG
86244: PUSH
86245: LD_INT 2
86247: PUSH
86248: EMPTY
86249: LIST
86250: LIST
86251: PUSH
86252: EMPTY
86253: LIST
86254: LIST
86255: LIST
86256: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
86257: LD_ADDR_VAR 0 15
86261: PUSH
86262: LD_INT 2
86264: NEG
86265: PUSH
86266: LD_INT 1
86268: PUSH
86269: EMPTY
86270: LIST
86271: LIST
86272: PUSH
86273: LD_INT 3
86275: NEG
86276: PUSH
86277: LD_INT 0
86279: PUSH
86280: EMPTY
86281: LIST
86282: LIST
86283: PUSH
86284: LD_INT 3
86286: NEG
86287: PUSH
86288: LD_INT 1
86290: NEG
86291: PUSH
86292: EMPTY
86293: LIST
86294: LIST
86295: PUSH
86296: EMPTY
86297: LIST
86298: LIST
86299: LIST
86300: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
86301: LD_ADDR_VAR 0 16
86305: PUSH
86306: LD_INT 2
86308: NEG
86309: PUSH
86310: LD_INT 3
86312: NEG
86313: PUSH
86314: EMPTY
86315: LIST
86316: LIST
86317: PUSH
86318: LD_INT 3
86320: NEG
86321: PUSH
86322: LD_INT 2
86324: NEG
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: PUSH
86330: LD_INT 3
86332: NEG
86333: PUSH
86334: LD_INT 3
86336: NEG
86337: PUSH
86338: EMPTY
86339: LIST
86340: LIST
86341: PUSH
86342: EMPTY
86343: LIST
86344: LIST
86345: LIST
86346: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
86347: LD_ADDR_VAR 0 17
86351: PUSH
86352: LD_INT 1
86354: NEG
86355: PUSH
86356: LD_INT 3
86358: NEG
86359: PUSH
86360: EMPTY
86361: LIST
86362: LIST
86363: PUSH
86364: LD_INT 0
86366: PUSH
86367: LD_INT 3
86369: NEG
86370: PUSH
86371: EMPTY
86372: LIST
86373: LIST
86374: PUSH
86375: LD_INT 1
86377: PUSH
86378: LD_INT 2
86380: NEG
86381: PUSH
86382: EMPTY
86383: LIST
86384: LIST
86385: PUSH
86386: EMPTY
86387: LIST
86388: LIST
86389: LIST
86390: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
86391: LD_ADDR_VAR 0 18
86395: PUSH
86396: LD_INT 2
86398: PUSH
86399: LD_INT 1
86401: NEG
86402: PUSH
86403: EMPTY
86404: LIST
86405: LIST
86406: PUSH
86407: LD_INT 3
86409: PUSH
86410: LD_INT 0
86412: PUSH
86413: EMPTY
86414: LIST
86415: LIST
86416: PUSH
86417: LD_INT 3
86419: PUSH
86420: LD_INT 1
86422: PUSH
86423: EMPTY
86424: LIST
86425: LIST
86426: PUSH
86427: EMPTY
86428: LIST
86429: LIST
86430: LIST
86431: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
86432: LD_ADDR_VAR 0 19
86436: PUSH
86437: LD_INT 3
86439: PUSH
86440: LD_INT 2
86442: PUSH
86443: EMPTY
86444: LIST
86445: LIST
86446: PUSH
86447: LD_INT 3
86449: PUSH
86450: LD_INT 3
86452: PUSH
86453: EMPTY
86454: LIST
86455: LIST
86456: PUSH
86457: LD_INT 2
86459: PUSH
86460: LD_INT 3
86462: PUSH
86463: EMPTY
86464: LIST
86465: LIST
86466: PUSH
86467: EMPTY
86468: LIST
86469: LIST
86470: LIST
86471: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
86472: LD_ADDR_VAR 0 20
86476: PUSH
86477: LD_INT 1
86479: PUSH
86480: LD_INT 3
86482: PUSH
86483: EMPTY
86484: LIST
86485: LIST
86486: PUSH
86487: LD_INT 0
86489: PUSH
86490: LD_INT 3
86492: PUSH
86493: EMPTY
86494: LIST
86495: LIST
86496: PUSH
86497: LD_INT 1
86499: NEG
86500: PUSH
86501: LD_INT 2
86503: PUSH
86504: EMPTY
86505: LIST
86506: LIST
86507: PUSH
86508: EMPTY
86509: LIST
86510: LIST
86511: LIST
86512: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
86513: LD_ADDR_VAR 0 21
86517: PUSH
86518: LD_INT 2
86520: NEG
86521: PUSH
86522: LD_INT 1
86524: PUSH
86525: EMPTY
86526: LIST
86527: LIST
86528: PUSH
86529: LD_INT 3
86531: NEG
86532: PUSH
86533: LD_INT 0
86535: PUSH
86536: EMPTY
86537: LIST
86538: LIST
86539: PUSH
86540: LD_INT 3
86542: NEG
86543: PUSH
86544: LD_INT 1
86546: NEG
86547: PUSH
86548: EMPTY
86549: LIST
86550: LIST
86551: PUSH
86552: EMPTY
86553: LIST
86554: LIST
86555: LIST
86556: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
86557: LD_ADDR_VAR 0 22
86561: PUSH
86562: LD_INT 2
86564: NEG
86565: PUSH
86566: LD_INT 3
86568: NEG
86569: PUSH
86570: EMPTY
86571: LIST
86572: LIST
86573: PUSH
86574: LD_INT 3
86576: NEG
86577: PUSH
86578: LD_INT 2
86580: NEG
86581: PUSH
86582: EMPTY
86583: LIST
86584: LIST
86585: PUSH
86586: LD_INT 3
86588: NEG
86589: PUSH
86590: LD_INT 3
86592: NEG
86593: PUSH
86594: EMPTY
86595: LIST
86596: LIST
86597: PUSH
86598: EMPTY
86599: LIST
86600: LIST
86601: LIST
86602: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
86603: LD_ADDR_VAR 0 23
86607: PUSH
86608: LD_INT 0
86610: PUSH
86611: LD_INT 3
86613: NEG
86614: PUSH
86615: EMPTY
86616: LIST
86617: LIST
86618: PUSH
86619: LD_INT 1
86621: NEG
86622: PUSH
86623: LD_INT 4
86625: NEG
86626: PUSH
86627: EMPTY
86628: LIST
86629: LIST
86630: PUSH
86631: LD_INT 1
86633: PUSH
86634: LD_INT 3
86636: NEG
86637: PUSH
86638: EMPTY
86639: LIST
86640: LIST
86641: PUSH
86642: EMPTY
86643: LIST
86644: LIST
86645: LIST
86646: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
86647: LD_ADDR_VAR 0 24
86651: PUSH
86652: LD_INT 3
86654: PUSH
86655: LD_INT 0
86657: PUSH
86658: EMPTY
86659: LIST
86660: LIST
86661: PUSH
86662: LD_INT 3
86664: PUSH
86665: LD_INT 1
86667: NEG
86668: PUSH
86669: EMPTY
86670: LIST
86671: LIST
86672: PUSH
86673: LD_INT 4
86675: PUSH
86676: LD_INT 1
86678: PUSH
86679: EMPTY
86680: LIST
86681: LIST
86682: PUSH
86683: EMPTY
86684: LIST
86685: LIST
86686: LIST
86687: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
86688: LD_ADDR_VAR 0 25
86692: PUSH
86693: LD_INT 3
86695: PUSH
86696: LD_INT 3
86698: PUSH
86699: EMPTY
86700: LIST
86701: LIST
86702: PUSH
86703: LD_INT 4
86705: PUSH
86706: LD_INT 3
86708: PUSH
86709: EMPTY
86710: LIST
86711: LIST
86712: PUSH
86713: LD_INT 3
86715: PUSH
86716: LD_INT 4
86718: PUSH
86719: EMPTY
86720: LIST
86721: LIST
86722: PUSH
86723: EMPTY
86724: LIST
86725: LIST
86726: LIST
86727: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
86728: LD_ADDR_VAR 0 26
86732: PUSH
86733: LD_INT 0
86735: PUSH
86736: LD_INT 3
86738: PUSH
86739: EMPTY
86740: LIST
86741: LIST
86742: PUSH
86743: LD_INT 1
86745: PUSH
86746: LD_INT 4
86748: PUSH
86749: EMPTY
86750: LIST
86751: LIST
86752: PUSH
86753: LD_INT 1
86755: NEG
86756: PUSH
86757: LD_INT 3
86759: PUSH
86760: EMPTY
86761: LIST
86762: LIST
86763: PUSH
86764: EMPTY
86765: LIST
86766: LIST
86767: LIST
86768: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
86769: LD_ADDR_VAR 0 27
86773: PUSH
86774: LD_INT 3
86776: NEG
86777: PUSH
86778: LD_INT 0
86780: PUSH
86781: EMPTY
86782: LIST
86783: LIST
86784: PUSH
86785: LD_INT 3
86787: NEG
86788: PUSH
86789: LD_INT 1
86791: PUSH
86792: EMPTY
86793: LIST
86794: LIST
86795: PUSH
86796: LD_INT 4
86798: NEG
86799: PUSH
86800: LD_INT 1
86802: NEG
86803: PUSH
86804: EMPTY
86805: LIST
86806: LIST
86807: PUSH
86808: EMPTY
86809: LIST
86810: LIST
86811: LIST
86812: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
86813: LD_ADDR_VAR 0 28
86817: PUSH
86818: LD_INT 3
86820: NEG
86821: PUSH
86822: LD_INT 3
86824: NEG
86825: PUSH
86826: EMPTY
86827: LIST
86828: LIST
86829: PUSH
86830: LD_INT 3
86832: NEG
86833: PUSH
86834: LD_INT 4
86836: NEG
86837: PUSH
86838: EMPTY
86839: LIST
86840: LIST
86841: PUSH
86842: LD_INT 4
86844: NEG
86845: PUSH
86846: LD_INT 3
86848: NEG
86849: PUSH
86850: EMPTY
86851: LIST
86852: LIST
86853: PUSH
86854: EMPTY
86855: LIST
86856: LIST
86857: LIST
86858: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
86859: LD_ADDR_VAR 0 29
86863: PUSH
86864: LD_INT 1
86866: NEG
86867: PUSH
86868: LD_INT 3
86870: NEG
86871: PUSH
86872: EMPTY
86873: LIST
86874: LIST
86875: PUSH
86876: LD_INT 0
86878: PUSH
86879: LD_INT 3
86881: NEG
86882: PUSH
86883: EMPTY
86884: LIST
86885: LIST
86886: PUSH
86887: LD_INT 1
86889: PUSH
86890: LD_INT 2
86892: NEG
86893: PUSH
86894: EMPTY
86895: LIST
86896: LIST
86897: PUSH
86898: LD_INT 1
86900: NEG
86901: PUSH
86902: LD_INT 4
86904: NEG
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: PUSH
86910: LD_INT 0
86912: PUSH
86913: LD_INT 4
86915: NEG
86916: PUSH
86917: EMPTY
86918: LIST
86919: LIST
86920: PUSH
86921: LD_INT 1
86923: PUSH
86924: LD_INT 3
86926: NEG
86927: PUSH
86928: EMPTY
86929: LIST
86930: LIST
86931: PUSH
86932: LD_INT 1
86934: NEG
86935: PUSH
86936: LD_INT 5
86938: NEG
86939: PUSH
86940: EMPTY
86941: LIST
86942: LIST
86943: PUSH
86944: LD_INT 0
86946: PUSH
86947: LD_INT 5
86949: NEG
86950: PUSH
86951: EMPTY
86952: LIST
86953: LIST
86954: PUSH
86955: LD_INT 1
86957: PUSH
86958: LD_INT 4
86960: NEG
86961: PUSH
86962: EMPTY
86963: LIST
86964: LIST
86965: PUSH
86966: LD_INT 1
86968: NEG
86969: PUSH
86970: LD_INT 6
86972: NEG
86973: PUSH
86974: EMPTY
86975: LIST
86976: LIST
86977: PUSH
86978: LD_INT 0
86980: PUSH
86981: LD_INT 6
86983: NEG
86984: PUSH
86985: EMPTY
86986: LIST
86987: LIST
86988: PUSH
86989: LD_INT 1
86991: PUSH
86992: LD_INT 5
86994: NEG
86995: PUSH
86996: EMPTY
86997: LIST
86998: LIST
86999: PUSH
87000: EMPTY
87001: LIST
87002: LIST
87003: LIST
87004: LIST
87005: LIST
87006: LIST
87007: LIST
87008: LIST
87009: LIST
87010: LIST
87011: LIST
87012: LIST
87013: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
87014: LD_ADDR_VAR 0 30
87018: PUSH
87019: LD_INT 2
87021: PUSH
87022: LD_INT 1
87024: NEG
87025: PUSH
87026: EMPTY
87027: LIST
87028: LIST
87029: PUSH
87030: LD_INT 3
87032: PUSH
87033: LD_INT 0
87035: PUSH
87036: EMPTY
87037: LIST
87038: LIST
87039: PUSH
87040: LD_INT 3
87042: PUSH
87043: LD_INT 1
87045: PUSH
87046: EMPTY
87047: LIST
87048: LIST
87049: PUSH
87050: LD_INT 3
87052: PUSH
87053: LD_INT 1
87055: NEG
87056: PUSH
87057: EMPTY
87058: LIST
87059: LIST
87060: PUSH
87061: LD_INT 4
87063: PUSH
87064: LD_INT 0
87066: PUSH
87067: EMPTY
87068: LIST
87069: LIST
87070: PUSH
87071: LD_INT 4
87073: PUSH
87074: LD_INT 1
87076: PUSH
87077: EMPTY
87078: LIST
87079: LIST
87080: PUSH
87081: LD_INT 4
87083: PUSH
87084: LD_INT 1
87086: NEG
87087: PUSH
87088: EMPTY
87089: LIST
87090: LIST
87091: PUSH
87092: LD_INT 5
87094: PUSH
87095: LD_INT 0
87097: PUSH
87098: EMPTY
87099: LIST
87100: LIST
87101: PUSH
87102: LD_INT 5
87104: PUSH
87105: LD_INT 1
87107: PUSH
87108: EMPTY
87109: LIST
87110: LIST
87111: PUSH
87112: LD_INT 5
87114: PUSH
87115: LD_INT 1
87117: NEG
87118: PUSH
87119: EMPTY
87120: LIST
87121: LIST
87122: PUSH
87123: LD_INT 6
87125: PUSH
87126: LD_INT 0
87128: PUSH
87129: EMPTY
87130: LIST
87131: LIST
87132: PUSH
87133: LD_INT 6
87135: PUSH
87136: LD_INT 1
87138: PUSH
87139: EMPTY
87140: LIST
87141: LIST
87142: PUSH
87143: EMPTY
87144: LIST
87145: LIST
87146: LIST
87147: LIST
87148: LIST
87149: LIST
87150: LIST
87151: LIST
87152: LIST
87153: LIST
87154: LIST
87155: LIST
87156: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
87157: LD_ADDR_VAR 0 31
87161: PUSH
87162: LD_INT 3
87164: PUSH
87165: LD_INT 2
87167: PUSH
87168: EMPTY
87169: LIST
87170: LIST
87171: PUSH
87172: LD_INT 3
87174: PUSH
87175: LD_INT 3
87177: PUSH
87178: EMPTY
87179: LIST
87180: LIST
87181: PUSH
87182: LD_INT 2
87184: PUSH
87185: LD_INT 3
87187: PUSH
87188: EMPTY
87189: LIST
87190: LIST
87191: PUSH
87192: LD_INT 4
87194: PUSH
87195: LD_INT 3
87197: PUSH
87198: EMPTY
87199: LIST
87200: LIST
87201: PUSH
87202: LD_INT 4
87204: PUSH
87205: LD_INT 4
87207: PUSH
87208: EMPTY
87209: LIST
87210: LIST
87211: PUSH
87212: LD_INT 3
87214: PUSH
87215: LD_INT 4
87217: PUSH
87218: EMPTY
87219: LIST
87220: LIST
87221: PUSH
87222: LD_INT 5
87224: PUSH
87225: LD_INT 4
87227: PUSH
87228: EMPTY
87229: LIST
87230: LIST
87231: PUSH
87232: LD_INT 5
87234: PUSH
87235: LD_INT 5
87237: PUSH
87238: EMPTY
87239: LIST
87240: LIST
87241: PUSH
87242: LD_INT 4
87244: PUSH
87245: LD_INT 5
87247: PUSH
87248: EMPTY
87249: LIST
87250: LIST
87251: PUSH
87252: LD_INT 6
87254: PUSH
87255: LD_INT 5
87257: PUSH
87258: EMPTY
87259: LIST
87260: LIST
87261: PUSH
87262: LD_INT 6
87264: PUSH
87265: LD_INT 6
87267: PUSH
87268: EMPTY
87269: LIST
87270: LIST
87271: PUSH
87272: LD_INT 5
87274: PUSH
87275: LD_INT 6
87277: PUSH
87278: EMPTY
87279: LIST
87280: LIST
87281: PUSH
87282: EMPTY
87283: LIST
87284: LIST
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: LIST
87292: LIST
87293: LIST
87294: LIST
87295: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
87296: LD_ADDR_VAR 0 32
87300: PUSH
87301: LD_INT 1
87303: PUSH
87304: LD_INT 3
87306: PUSH
87307: EMPTY
87308: LIST
87309: LIST
87310: PUSH
87311: LD_INT 0
87313: PUSH
87314: LD_INT 3
87316: PUSH
87317: EMPTY
87318: LIST
87319: LIST
87320: PUSH
87321: LD_INT 1
87323: NEG
87324: PUSH
87325: LD_INT 2
87327: PUSH
87328: EMPTY
87329: LIST
87330: LIST
87331: PUSH
87332: LD_INT 1
87334: PUSH
87335: LD_INT 4
87337: PUSH
87338: EMPTY
87339: LIST
87340: LIST
87341: PUSH
87342: LD_INT 0
87344: PUSH
87345: LD_INT 4
87347: PUSH
87348: EMPTY
87349: LIST
87350: LIST
87351: PUSH
87352: LD_INT 1
87354: NEG
87355: PUSH
87356: LD_INT 3
87358: PUSH
87359: EMPTY
87360: LIST
87361: LIST
87362: PUSH
87363: LD_INT 1
87365: PUSH
87366: LD_INT 5
87368: PUSH
87369: EMPTY
87370: LIST
87371: LIST
87372: PUSH
87373: LD_INT 0
87375: PUSH
87376: LD_INT 5
87378: PUSH
87379: EMPTY
87380: LIST
87381: LIST
87382: PUSH
87383: LD_INT 1
87385: NEG
87386: PUSH
87387: LD_INT 4
87389: PUSH
87390: EMPTY
87391: LIST
87392: LIST
87393: PUSH
87394: LD_INT 1
87396: PUSH
87397: LD_INT 6
87399: PUSH
87400: EMPTY
87401: LIST
87402: LIST
87403: PUSH
87404: LD_INT 0
87406: PUSH
87407: LD_INT 6
87409: PUSH
87410: EMPTY
87411: LIST
87412: LIST
87413: PUSH
87414: LD_INT 1
87416: NEG
87417: PUSH
87418: LD_INT 5
87420: PUSH
87421: EMPTY
87422: LIST
87423: LIST
87424: PUSH
87425: EMPTY
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: LIST
87431: LIST
87432: LIST
87433: LIST
87434: LIST
87435: LIST
87436: LIST
87437: LIST
87438: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
87439: LD_ADDR_VAR 0 33
87443: PUSH
87444: LD_INT 2
87446: NEG
87447: PUSH
87448: LD_INT 1
87450: PUSH
87451: EMPTY
87452: LIST
87453: LIST
87454: PUSH
87455: LD_INT 3
87457: NEG
87458: PUSH
87459: LD_INT 0
87461: PUSH
87462: EMPTY
87463: LIST
87464: LIST
87465: PUSH
87466: LD_INT 3
87468: NEG
87469: PUSH
87470: LD_INT 1
87472: NEG
87473: PUSH
87474: EMPTY
87475: LIST
87476: LIST
87477: PUSH
87478: LD_INT 3
87480: NEG
87481: PUSH
87482: LD_INT 1
87484: PUSH
87485: EMPTY
87486: LIST
87487: LIST
87488: PUSH
87489: LD_INT 4
87491: NEG
87492: PUSH
87493: LD_INT 0
87495: PUSH
87496: EMPTY
87497: LIST
87498: LIST
87499: PUSH
87500: LD_INT 4
87502: NEG
87503: PUSH
87504: LD_INT 1
87506: NEG
87507: PUSH
87508: EMPTY
87509: LIST
87510: LIST
87511: PUSH
87512: LD_INT 4
87514: NEG
87515: PUSH
87516: LD_INT 1
87518: PUSH
87519: EMPTY
87520: LIST
87521: LIST
87522: PUSH
87523: LD_INT 5
87525: NEG
87526: PUSH
87527: LD_INT 0
87529: PUSH
87530: EMPTY
87531: LIST
87532: LIST
87533: PUSH
87534: LD_INT 5
87536: NEG
87537: PUSH
87538: LD_INT 1
87540: NEG
87541: PUSH
87542: EMPTY
87543: LIST
87544: LIST
87545: PUSH
87546: LD_INT 5
87548: NEG
87549: PUSH
87550: LD_INT 1
87552: PUSH
87553: EMPTY
87554: LIST
87555: LIST
87556: PUSH
87557: LD_INT 6
87559: NEG
87560: PUSH
87561: LD_INT 0
87563: PUSH
87564: EMPTY
87565: LIST
87566: LIST
87567: PUSH
87568: LD_INT 6
87570: NEG
87571: PUSH
87572: LD_INT 1
87574: NEG
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: EMPTY
87581: LIST
87582: LIST
87583: LIST
87584: LIST
87585: LIST
87586: LIST
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
87594: LD_ADDR_VAR 0 34
87598: PUSH
87599: LD_INT 2
87601: NEG
87602: PUSH
87603: LD_INT 3
87605: NEG
87606: PUSH
87607: EMPTY
87608: LIST
87609: LIST
87610: PUSH
87611: LD_INT 3
87613: NEG
87614: PUSH
87615: LD_INT 2
87617: NEG
87618: PUSH
87619: EMPTY
87620: LIST
87621: LIST
87622: PUSH
87623: LD_INT 3
87625: NEG
87626: PUSH
87627: LD_INT 3
87629: NEG
87630: PUSH
87631: EMPTY
87632: LIST
87633: LIST
87634: PUSH
87635: LD_INT 3
87637: NEG
87638: PUSH
87639: LD_INT 4
87641: NEG
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: PUSH
87647: LD_INT 4
87649: NEG
87650: PUSH
87651: LD_INT 3
87653: NEG
87654: PUSH
87655: EMPTY
87656: LIST
87657: LIST
87658: PUSH
87659: LD_INT 4
87661: NEG
87662: PUSH
87663: LD_INT 4
87665: NEG
87666: PUSH
87667: EMPTY
87668: LIST
87669: LIST
87670: PUSH
87671: LD_INT 4
87673: NEG
87674: PUSH
87675: LD_INT 5
87677: NEG
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: PUSH
87683: LD_INT 5
87685: NEG
87686: PUSH
87687: LD_INT 4
87689: NEG
87690: PUSH
87691: EMPTY
87692: LIST
87693: LIST
87694: PUSH
87695: LD_INT 5
87697: NEG
87698: PUSH
87699: LD_INT 5
87701: NEG
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: PUSH
87707: LD_INT 5
87709: NEG
87710: PUSH
87711: LD_INT 6
87713: NEG
87714: PUSH
87715: EMPTY
87716: LIST
87717: LIST
87718: PUSH
87719: LD_INT 6
87721: NEG
87722: PUSH
87723: LD_INT 5
87725: NEG
87726: PUSH
87727: EMPTY
87728: LIST
87729: LIST
87730: PUSH
87731: LD_INT 6
87733: NEG
87734: PUSH
87735: LD_INT 6
87737: NEG
87738: PUSH
87739: EMPTY
87740: LIST
87741: LIST
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: LIST
87747: LIST
87748: LIST
87749: LIST
87750: LIST
87751: LIST
87752: LIST
87753: LIST
87754: LIST
87755: LIST
87756: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
87757: LD_ADDR_VAR 0 41
87761: PUSH
87762: LD_INT 0
87764: PUSH
87765: LD_INT 2
87767: NEG
87768: PUSH
87769: EMPTY
87770: LIST
87771: LIST
87772: PUSH
87773: LD_INT 1
87775: NEG
87776: PUSH
87777: LD_INT 3
87779: NEG
87780: PUSH
87781: EMPTY
87782: LIST
87783: LIST
87784: PUSH
87785: LD_INT 1
87787: PUSH
87788: LD_INT 2
87790: NEG
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: LIST
87800: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
87801: LD_ADDR_VAR 0 42
87805: PUSH
87806: LD_INT 2
87808: PUSH
87809: LD_INT 0
87811: PUSH
87812: EMPTY
87813: LIST
87814: LIST
87815: PUSH
87816: LD_INT 2
87818: PUSH
87819: LD_INT 1
87821: NEG
87822: PUSH
87823: EMPTY
87824: LIST
87825: LIST
87826: PUSH
87827: LD_INT 3
87829: PUSH
87830: LD_INT 1
87832: PUSH
87833: EMPTY
87834: LIST
87835: LIST
87836: PUSH
87837: EMPTY
87838: LIST
87839: LIST
87840: LIST
87841: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
87842: LD_ADDR_VAR 0 43
87846: PUSH
87847: LD_INT 2
87849: PUSH
87850: LD_INT 2
87852: PUSH
87853: EMPTY
87854: LIST
87855: LIST
87856: PUSH
87857: LD_INT 3
87859: PUSH
87860: LD_INT 2
87862: PUSH
87863: EMPTY
87864: LIST
87865: LIST
87866: PUSH
87867: LD_INT 2
87869: PUSH
87870: LD_INT 3
87872: PUSH
87873: EMPTY
87874: LIST
87875: LIST
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: LIST
87881: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
87882: LD_ADDR_VAR 0 44
87886: PUSH
87887: LD_INT 0
87889: PUSH
87890: LD_INT 2
87892: PUSH
87893: EMPTY
87894: LIST
87895: LIST
87896: PUSH
87897: LD_INT 1
87899: PUSH
87900: LD_INT 3
87902: PUSH
87903: EMPTY
87904: LIST
87905: LIST
87906: PUSH
87907: LD_INT 1
87909: NEG
87910: PUSH
87911: LD_INT 2
87913: PUSH
87914: EMPTY
87915: LIST
87916: LIST
87917: PUSH
87918: EMPTY
87919: LIST
87920: LIST
87921: LIST
87922: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
87923: LD_ADDR_VAR 0 45
87927: PUSH
87928: LD_INT 2
87930: NEG
87931: PUSH
87932: LD_INT 0
87934: PUSH
87935: EMPTY
87936: LIST
87937: LIST
87938: PUSH
87939: LD_INT 2
87941: NEG
87942: PUSH
87943: LD_INT 1
87945: PUSH
87946: EMPTY
87947: LIST
87948: LIST
87949: PUSH
87950: LD_INT 3
87952: NEG
87953: PUSH
87954: LD_INT 1
87956: NEG
87957: PUSH
87958: EMPTY
87959: LIST
87960: LIST
87961: PUSH
87962: EMPTY
87963: LIST
87964: LIST
87965: LIST
87966: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
87967: LD_ADDR_VAR 0 46
87971: PUSH
87972: LD_INT 2
87974: NEG
87975: PUSH
87976: LD_INT 2
87978: NEG
87979: PUSH
87980: EMPTY
87981: LIST
87982: LIST
87983: PUSH
87984: LD_INT 2
87986: NEG
87987: PUSH
87988: LD_INT 3
87990: NEG
87991: PUSH
87992: EMPTY
87993: LIST
87994: LIST
87995: PUSH
87996: LD_INT 3
87998: NEG
87999: PUSH
88000: LD_INT 2
88002: NEG
88003: PUSH
88004: EMPTY
88005: LIST
88006: LIST
88007: PUSH
88008: EMPTY
88009: LIST
88010: LIST
88011: LIST
88012: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
88013: LD_ADDR_VAR 0 47
88017: PUSH
88018: LD_INT 2
88020: NEG
88021: PUSH
88022: LD_INT 3
88024: NEG
88025: PUSH
88026: EMPTY
88027: LIST
88028: LIST
88029: PUSH
88030: LD_INT 1
88032: NEG
88033: PUSH
88034: LD_INT 3
88036: NEG
88037: PUSH
88038: EMPTY
88039: LIST
88040: LIST
88041: PUSH
88042: EMPTY
88043: LIST
88044: LIST
88045: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
88046: LD_ADDR_VAR 0 48
88050: PUSH
88051: LD_INT 1
88053: PUSH
88054: LD_INT 2
88056: NEG
88057: PUSH
88058: EMPTY
88059: LIST
88060: LIST
88061: PUSH
88062: LD_INT 2
88064: PUSH
88065: LD_INT 1
88067: NEG
88068: PUSH
88069: EMPTY
88070: LIST
88071: LIST
88072: PUSH
88073: EMPTY
88074: LIST
88075: LIST
88076: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
88077: LD_ADDR_VAR 0 49
88081: PUSH
88082: LD_INT 3
88084: PUSH
88085: LD_INT 1
88087: PUSH
88088: EMPTY
88089: LIST
88090: LIST
88091: PUSH
88092: LD_INT 3
88094: PUSH
88095: LD_INT 2
88097: PUSH
88098: EMPTY
88099: LIST
88100: LIST
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
88106: LD_ADDR_VAR 0 50
88110: PUSH
88111: LD_INT 2
88113: PUSH
88114: LD_INT 3
88116: PUSH
88117: EMPTY
88118: LIST
88119: LIST
88120: PUSH
88121: LD_INT 1
88123: PUSH
88124: LD_INT 3
88126: PUSH
88127: EMPTY
88128: LIST
88129: LIST
88130: PUSH
88131: EMPTY
88132: LIST
88133: LIST
88134: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
88135: LD_ADDR_VAR 0 51
88139: PUSH
88140: LD_INT 1
88142: NEG
88143: PUSH
88144: LD_INT 2
88146: PUSH
88147: EMPTY
88148: LIST
88149: LIST
88150: PUSH
88151: LD_INT 2
88153: NEG
88154: PUSH
88155: LD_INT 1
88157: PUSH
88158: EMPTY
88159: LIST
88160: LIST
88161: PUSH
88162: EMPTY
88163: LIST
88164: LIST
88165: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
88166: LD_ADDR_VAR 0 52
88170: PUSH
88171: LD_INT 3
88173: NEG
88174: PUSH
88175: LD_INT 1
88177: NEG
88178: PUSH
88179: EMPTY
88180: LIST
88181: LIST
88182: PUSH
88183: LD_INT 3
88185: NEG
88186: PUSH
88187: LD_INT 2
88189: NEG
88190: PUSH
88191: EMPTY
88192: LIST
88193: LIST
88194: PUSH
88195: EMPTY
88196: LIST
88197: LIST
88198: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
88199: LD_ADDR_VAR 0 53
88203: PUSH
88204: LD_INT 1
88206: NEG
88207: PUSH
88208: LD_INT 3
88210: NEG
88211: PUSH
88212: EMPTY
88213: LIST
88214: LIST
88215: PUSH
88216: LD_INT 0
88218: PUSH
88219: LD_INT 3
88221: NEG
88222: PUSH
88223: EMPTY
88224: LIST
88225: LIST
88226: PUSH
88227: LD_INT 1
88229: PUSH
88230: LD_INT 2
88232: NEG
88233: PUSH
88234: EMPTY
88235: LIST
88236: LIST
88237: PUSH
88238: EMPTY
88239: LIST
88240: LIST
88241: LIST
88242: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
88243: LD_ADDR_VAR 0 54
88247: PUSH
88248: LD_INT 2
88250: PUSH
88251: LD_INT 1
88253: NEG
88254: PUSH
88255: EMPTY
88256: LIST
88257: LIST
88258: PUSH
88259: LD_INT 3
88261: PUSH
88262: LD_INT 0
88264: PUSH
88265: EMPTY
88266: LIST
88267: LIST
88268: PUSH
88269: LD_INT 3
88271: PUSH
88272: LD_INT 1
88274: PUSH
88275: EMPTY
88276: LIST
88277: LIST
88278: PUSH
88279: EMPTY
88280: LIST
88281: LIST
88282: LIST
88283: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
88284: LD_ADDR_VAR 0 55
88288: PUSH
88289: LD_INT 3
88291: PUSH
88292: LD_INT 2
88294: PUSH
88295: EMPTY
88296: LIST
88297: LIST
88298: PUSH
88299: LD_INT 3
88301: PUSH
88302: LD_INT 3
88304: PUSH
88305: EMPTY
88306: LIST
88307: LIST
88308: PUSH
88309: LD_INT 2
88311: PUSH
88312: LD_INT 3
88314: PUSH
88315: EMPTY
88316: LIST
88317: LIST
88318: PUSH
88319: EMPTY
88320: LIST
88321: LIST
88322: LIST
88323: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
88324: LD_ADDR_VAR 0 56
88328: PUSH
88329: LD_INT 1
88331: PUSH
88332: LD_INT 3
88334: PUSH
88335: EMPTY
88336: LIST
88337: LIST
88338: PUSH
88339: LD_INT 0
88341: PUSH
88342: LD_INT 3
88344: PUSH
88345: EMPTY
88346: LIST
88347: LIST
88348: PUSH
88349: LD_INT 1
88351: NEG
88352: PUSH
88353: LD_INT 2
88355: PUSH
88356: EMPTY
88357: LIST
88358: LIST
88359: PUSH
88360: EMPTY
88361: LIST
88362: LIST
88363: LIST
88364: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
88365: LD_ADDR_VAR 0 57
88369: PUSH
88370: LD_INT 2
88372: NEG
88373: PUSH
88374: LD_INT 1
88376: PUSH
88377: EMPTY
88378: LIST
88379: LIST
88380: PUSH
88381: LD_INT 3
88383: NEG
88384: PUSH
88385: LD_INT 0
88387: PUSH
88388: EMPTY
88389: LIST
88390: LIST
88391: PUSH
88392: LD_INT 3
88394: NEG
88395: PUSH
88396: LD_INT 1
88398: NEG
88399: PUSH
88400: EMPTY
88401: LIST
88402: LIST
88403: PUSH
88404: EMPTY
88405: LIST
88406: LIST
88407: LIST
88408: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
88409: LD_ADDR_VAR 0 58
88413: PUSH
88414: LD_INT 2
88416: NEG
88417: PUSH
88418: LD_INT 3
88420: NEG
88421: PUSH
88422: EMPTY
88423: LIST
88424: LIST
88425: PUSH
88426: LD_INT 3
88428: NEG
88429: PUSH
88430: LD_INT 2
88432: NEG
88433: PUSH
88434: EMPTY
88435: LIST
88436: LIST
88437: PUSH
88438: LD_INT 3
88440: NEG
88441: PUSH
88442: LD_INT 3
88444: NEG
88445: PUSH
88446: EMPTY
88447: LIST
88448: LIST
88449: PUSH
88450: EMPTY
88451: LIST
88452: LIST
88453: LIST
88454: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
88455: LD_ADDR_VAR 0 59
88459: PUSH
88460: LD_INT 1
88462: NEG
88463: PUSH
88464: LD_INT 2
88466: NEG
88467: PUSH
88468: EMPTY
88469: LIST
88470: LIST
88471: PUSH
88472: LD_INT 0
88474: PUSH
88475: LD_INT 2
88477: NEG
88478: PUSH
88479: EMPTY
88480: LIST
88481: LIST
88482: PUSH
88483: LD_INT 1
88485: PUSH
88486: LD_INT 1
88488: NEG
88489: PUSH
88490: EMPTY
88491: LIST
88492: LIST
88493: PUSH
88494: EMPTY
88495: LIST
88496: LIST
88497: LIST
88498: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
88499: LD_ADDR_VAR 0 60
88503: PUSH
88504: LD_INT 1
88506: PUSH
88507: LD_INT 1
88509: NEG
88510: PUSH
88511: EMPTY
88512: LIST
88513: LIST
88514: PUSH
88515: LD_INT 2
88517: PUSH
88518: LD_INT 0
88520: PUSH
88521: EMPTY
88522: LIST
88523: LIST
88524: PUSH
88525: LD_INT 2
88527: PUSH
88528: LD_INT 1
88530: PUSH
88531: EMPTY
88532: LIST
88533: LIST
88534: PUSH
88535: EMPTY
88536: LIST
88537: LIST
88538: LIST
88539: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
88540: LD_ADDR_VAR 0 61
88544: PUSH
88545: LD_INT 2
88547: PUSH
88548: LD_INT 1
88550: PUSH
88551: EMPTY
88552: LIST
88553: LIST
88554: PUSH
88555: LD_INT 2
88557: PUSH
88558: LD_INT 2
88560: PUSH
88561: EMPTY
88562: LIST
88563: LIST
88564: PUSH
88565: LD_INT 1
88567: PUSH
88568: LD_INT 2
88570: PUSH
88571: EMPTY
88572: LIST
88573: LIST
88574: PUSH
88575: EMPTY
88576: LIST
88577: LIST
88578: LIST
88579: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
88580: LD_ADDR_VAR 0 62
88584: PUSH
88585: LD_INT 1
88587: PUSH
88588: LD_INT 2
88590: PUSH
88591: EMPTY
88592: LIST
88593: LIST
88594: PUSH
88595: LD_INT 0
88597: PUSH
88598: LD_INT 2
88600: PUSH
88601: EMPTY
88602: LIST
88603: LIST
88604: PUSH
88605: LD_INT 1
88607: NEG
88608: PUSH
88609: LD_INT 1
88611: PUSH
88612: EMPTY
88613: LIST
88614: LIST
88615: PUSH
88616: EMPTY
88617: LIST
88618: LIST
88619: LIST
88620: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
88621: LD_ADDR_VAR 0 63
88625: PUSH
88626: LD_INT 1
88628: NEG
88629: PUSH
88630: LD_INT 1
88632: PUSH
88633: EMPTY
88634: LIST
88635: LIST
88636: PUSH
88637: LD_INT 2
88639: NEG
88640: PUSH
88641: LD_INT 0
88643: PUSH
88644: EMPTY
88645: LIST
88646: LIST
88647: PUSH
88648: LD_INT 2
88650: NEG
88651: PUSH
88652: LD_INT 1
88654: NEG
88655: PUSH
88656: EMPTY
88657: LIST
88658: LIST
88659: PUSH
88660: EMPTY
88661: LIST
88662: LIST
88663: LIST
88664: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
88665: LD_ADDR_VAR 0 64
88669: PUSH
88670: LD_INT 1
88672: NEG
88673: PUSH
88674: LD_INT 2
88676: NEG
88677: PUSH
88678: EMPTY
88679: LIST
88680: LIST
88681: PUSH
88682: LD_INT 2
88684: NEG
88685: PUSH
88686: LD_INT 1
88688: NEG
88689: PUSH
88690: EMPTY
88691: LIST
88692: LIST
88693: PUSH
88694: LD_INT 2
88696: NEG
88697: PUSH
88698: LD_INT 2
88700: NEG
88701: PUSH
88702: EMPTY
88703: LIST
88704: LIST
88705: PUSH
88706: EMPTY
88707: LIST
88708: LIST
88709: LIST
88710: ST_TO_ADDR
// end ; 2 :
88711: GO 91977
88713: LD_INT 2
88715: DOUBLE
88716: EQUAL
88717: IFTRUE 88721
88719: GO 91976
88721: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
88722: LD_ADDR_VAR 0 29
88726: PUSH
88727: LD_INT 4
88729: PUSH
88730: LD_INT 0
88732: PUSH
88733: EMPTY
88734: LIST
88735: LIST
88736: PUSH
88737: LD_INT 4
88739: PUSH
88740: LD_INT 1
88742: NEG
88743: PUSH
88744: EMPTY
88745: LIST
88746: LIST
88747: PUSH
88748: LD_INT 5
88750: PUSH
88751: LD_INT 0
88753: PUSH
88754: EMPTY
88755: LIST
88756: LIST
88757: PUSH
88758: LD_INT 5
88760: PUSH
88761: LD_INT 1
88763: PUSH
88764: EMPTY
88765: LIST
88766: LIST
88767: PUSH
88768: LD_INT 4
88770: PUSH
88771: LD_INT 1
88773: PUSH
88774: EMPTY
88775: LIST
88776: LIST
88777: PUSH
88778: LD_INT 3
88780: PUSH
88781: LD_INT 0
88783: PUSH
88784: EMPTY
88785: LIST
88786: LIST
88787: PUSH
88788: LD_INT 3
88790: PUSH
88791: LD_INT 1
88793: NEG
88794: PUSH
88795: EMPTY
88796: LIST
88797: LIST
88798: PUSH
88799: LD_INT 3
88801: PUSH
88802: LD_INT 2
88804: NEG
88805: PUSH
88806: EMPTY
88807: LIST
88808: LIST
88809: PUSH
88810: LD_INT 5
88812: PUSH
88813: LD_INT 2
88815: PUSH
88816: EMPTY
88817: LIST
88818: LIST
88819: PUSH
88820: LD_INT 3
88822: PUSH
88823: LD_INT 3
88825: PUSH
88826: EMPTY
88827: LIST
88828: LIST
88829: PUSH
88830: LD_INT 3
88832: PUSH
88833: LD_INT 2
88835: PUSH
88836: EMPTY
88837: LIST
88838: LIST
88839: PUSH
88840: LD_INT 4
88842: PUSH
88843: LD_INT 3
88845: PUSH
88846: EMPTY
88847: LIST
88848: LIST
88849: PUSH
88850: LD_INT 4
88852: PUSH
88853: LD_INT 4
88855: PUSH
88856: EMPTY
88857: LIST
88858: LIST
88859: PUSH
88860: LD_INT 3
88862: PUSH
88863: LD_INT 4
88865: PUSH
88866: EMPTY
88867: LIST
88868: LIST
88869: PUSH
88870: LD_INT 2
88872: PUSH
88873: LD_INT 3
88875: PUSH
88876: EMPTY
88877: LIST
88878: LIST
88879: PUSH
88880: LD_INT 2
88882: PUSH
88883: LD_INT 2
88885: PUSH
88886: EMPTY
88887: LIST
88888: LIST
88889: PUSH
88890: LD_INT 4
88892: PUSH
88893: LD_INT 2
88895: PUSH
88896: EMPTY
88897: LIST
88898: LIST
88899: PUSH
88900: LD_INT 2
88902: PUSH
88903: LD_INT 4
88905: PUSH
88906: EMPTY
88907: LIST
88908: LIST
88909: PUSH
88910: LD_INT 0
88912: PUSH
88913: LD_INT 4
88915: PUSH
88916: EMPTY
88917: LIST
88918: LIST
88919: PUSH
88920: LD_INT 0
88922: PUSH
88923: LD_INT 3
88925: PUSH
88926: EMPTY
88927: LIST
88928: LIST
88929: PUSH
88930: LD_INT 1
88932: PUSH
88933: LD_INT 4
88935: PUSH
88936: EMPTY
88937: LIST
88938: LIST
88939: PUSH
88940: LD_INT 1
88942: PUSH
88943: LD_INT 5
88945: PUSH
88946: EMPTY
88947: LIST
88948: LIST
88949: PUSH
88950: LD_INT 0
88952: PUSH
88953: LD_INT 5
88955: PUSH
88956: EMPTY
88957: LIST
88958: LIST
88959: PUSH
88960: LD_INT 1
88962: NEG
88963: PUSH
88964: LD_INT 4
88966: PUSH
88967: EMPTY
88968: LIST
88969: LIST
88970: PUSH
88971: LD_INT 1
88973: NEG
88974: PUSH
88975: LD_INT 3
88977: PUSH
88978: EMPTY
88979: LIST
88980: LIST
88981: PUSH
88982: LD_INT 2
88984: PUSH
88985: LD_INT 5
88987: PUSH
88988: EMPTY
88989: LIST
88990: LIST
88991: PUSH
88992: LD_INT 2
88994: NEG
88995: PUSH
88996: LD_INT 3
88998: PUSH
88999: EMPTY
89000: LIST
89001: LIST
89002: PUSH
89003: LD_INT 3
89005: NEG
89006: PUSH
89007: LD_INT 0
89009: PUSH
89010: EMPTY
89011: LIST
89012: LIST
89013: PUSH
89014: LD_INT 3
89016: NEG
89017: PUSH
89018: LD_INT 1
89020: NEG
89021: PUSH
89022: EMPTY
89023: LIST
89024: LIST
89025: PUSH
89026: LD_INT 2
89028: NEG
89029: PUSH
89030: LD_INT 0
89032: PUSH
89033: EMPTY
89034: LIST
89035: LIST
89036: PUSH
89037: LD_INT 2
89039: NEG
89040: PUSH
89041: LD_INT 1
89043: PUSH
89044: EMPTY
89045: LIST
89046: LIST
89047: PUSH
89048: LD_INT 3
89050: NEG
89051: PUSH
89052: LD_INT 1
89054: PUSH
89055: EMPTY
89056: LIST
89057: LIST
89058: PUSH
89059: LD_INT 4
89061: NEG
89062: PUSH
89063: LD_INT 0
89065: PUSH
89066: EMPTY
89067: LIST
89068: LIST
89069: PUSH
89070: LD_INT 4
89072: NEG
89073: PUSH
89074: LD_INT 1
89076: NEG
89077: PUSH
89078: EMPTY
89079: LIST
89080: LIST
89081: PUSH
89082: LD_INT 4
89084: NEG
89085: PUSH
89086: LD_INT 2
89088: NEG
89089: PUSH
89090: EMPTY
89091: LIST
89092: LIST
89093: PUSH
89094: LD_INT 2
89096: NEG
89097: PUSH
89098: LD_INT 2
89100: PUSH
89101: EMPTY
89102: LIST
89103: LIST
89104: PUSH
89105: LD_INT 4
89107: NEG
89108: PUSH
89109: LD_INT 4
89111: NEG
89112: PUSH
89113: EMPTY
89114: LIST
89115: LIST
89116: PUSH
89117: LD_INT 4
89119: NEG
89120: PUSH
89121: LD_INT 5
89123: NEG
89124: PUSH
89125: EMPTY
89126: LIST
89127: LIST
89128: PUSH
89129: LD_INT 3
89131: NEG
89132: PUSH
89133: LD_INT 4
89135: NEG
89136: PUSH
89137: EMPTY
89138: LIST
89139: LIST
89140: PUSH
89141: LD_INT 3
89143: NEG
89144: PUSH
89145: LD_INT 3
89147: NEG
89148: PUSH
89149: EMPTY
89150: LIST
89151: LIST
89152: PUSH
89153: LD_INT 4
89155: NEG
89156: PUSH
89157: LD_INT 3
89159: NEG
89160: PUSH
89161: EMPTY
89162: LIST
89163: LIST
89164: PUSH
89165: LD_INT 5
89167: NEG
89168: PUSH
89169: LD_INT 4
89171: NEG
89172: PUSH
89173: EMPTY
89174: LIST
89175: LIST
89176: PUSH
89177: LD_INT 5
89179: NEG
89180: PUSH
89181: LD_INT 5
89183: NEG
89184: PUSH
89185: EMPTY
89186: LIST
89187: LIST
89188: PUSH
89189: LD_INT 3
89191: NEG
89192: PUSH
89193: LD_INT 5
89195: NEG
89196: PUSH
89197: EMPTY
89198: LIST
89199: LIST
89200: PUSH
89201: LD_INT 5
89203: NEG
89204: PUSH
89205: LD_INT 3
89207: NEG
89208: PUSH
89209: EMPTY
89210: LIST
89211: LIST
89212: PUSH
89213: EMPTY
89214: LIST
89215: LIST
89216: LIST
89217: LIST
89218: LIST
89219: LIST
89220: LIST
89221: LIST
89222: LIST
89223: LIST
89224: LIST
89225: LIST
89226: LIST
89227: LIST
89228: LIST
89229: LIST
89230: LIST
89231: LIST
89232: LIST
89233: LIST
89234: LIST
89235: LIST
89236: LIST
89237: LIST
89238: LIST
89239: LIST
89240: LIST
89241: LIST
89242: LIST
89243: LIST
89244: LIST
89245: LIST
89246: LIST
89247: LIST
89248: LIST
89249: LIST
89250: LIST
89251: LIST
89252: LIST
89253: LIST
89254: LIST
89255: LIST
89256: LIST
89257: LIST
89258: LIST
89259: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
89260: LD_ADDR_VAR 0 30
89264: PUSH
89265: LD_INT 4
89267: PUSH
89268: LD_INT 4
89270: PUSH
89271: EMPTY
89272: LIST
89273: LIST
89274: PUSH
89275: LD_INT 4
89277: PUSH
89278: LD_INT 3
89280: PUSH
89281: EMPTY
89282: LIST
89283: LIST
89284: PUSH
89285: LD_INT 5
89287: PUSH
89288: LD_INT 4
89290: PUSH
89291: EMPTY
89292: LIST
89293: LIST
89294: PUSH
89295: LD_INT 5
89297: PUSH
89298: LD_INT 5
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PUSH
89305: LD_INT 4
89307: PUSH
89308: LD_INT 5
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 3
89317: PUSH
89318: LD_INT 4
89320: PUSH
89321: EMPTY
89322: LIST
89323: LIST
89324: PUSH
89325: LD_INT 3
89327: PUSH
89328: LD_INT 3
89330: PUSH
89331: EMPTY
89332: LIST
89333: LIST
89334: PUSH
89335: LD_INT 5
89337: PUSH
89338: LD_INT 3
89340: PUSH
89341: EMPTY
89342: LIST
89343: LIST
89344: PUSH
89345: LD_INT 3
89347: PUSH
89348: LD_INT 5
89350: PUSH
89351: EMPTY
89352: LIST
89353: LIST
89354: PUSH
89355: LD_INT 0
89357: PUSH
89358: LD_INT 3
89360: PUSH
89361: EMPTY
89362: LIST
89363: LIST
89364: PUSH
89365: LD_INT 0
89367: PUSH
89368: LD_INT 2
89370: PUSH
89371: EMPTY
89372: LIST
89373: LIST
89374: PUSH
89375: LD_INT 1
89377: PUSH
89378: LD_INT 3
89380: PUSH
89381: EMPTY
89382: LIST
89383: LIST
89384: PUSH
89385: LD_INT 1
89387: PUSH
89388: LD_INT 4
89390: PUSH
89391: EMPTY
89392: LIST
89393: LIST
89394: PUSH
89395: LD_INT 0
89397: PUSH
89398: LD_INT 4
89400: PUSH
89401: EMPTY
89402: LIST
89403: LIST
89404: PUSH
89405: LD_INT 1
89407: NEG
89408: PUSH
89409: LD_INT 3
89411: PUSH
89412: EMPTY
89413: LIST
89414: LIST
89415: PUSH
89416: LD_INT 1
89418: NEG
89419: PUSH
89420: LD_INT 2
89422: PUSH
89423: EMPTY
89424: LIST
89425: LIST
89426: PUSH
89427: LD_INT 2
89429: PUSH
89430: LD_INT 4
89432: PUSH
89433: EMPTY
89434: LIST
89435: LIST
89436: PUSH
89437: LD_INT 2
89439: NEG
89440: PUSH
89441: LD_INT 2
89443: PUSH
89444: EMPTY
89445: LIST
89446: LIST
89447: PUSH
89448: LD_INT 4
89450: NEG
89451: PUSH
89452: LD_INT 0
89454: PUSH
89455: EMPTY
89456: LIST
89457: LIST
89458: PUSH
89459: LD_INT 4
89461: NEG
89462: PUSH
89463: LD_INT 1
89465: NEG
89466: PUSH
89467: EMPTY
89468: LIST
89469: LIST
89470: PUSH
89471: LD_INT 3
89473: NEG
89474: PUSH
89475: LD_INT 0
89477: PUSH
89478: EMPTY
89479: LIST
89480: LIST
89481: PUSH
89482: LD_INT 3
89484: NEG
89485: PUSH
89486: LD_INT 1
89488: PUSH
89489: EMPTY
89490: LIST
89491: LIST
89492: PUSH
89493: LD_INT 4
89495: NEG
89496: PUSH
89497: LD_INT 1
89499: PUSH
89500: EMPTY
89501: LIST
89502: LIST
89503: PUSH
89504: LD_INT 5
89506: NEG
89507: PUSH
89508: LD_INT 0
89510: PUSH
89511: EMPTY
89512: LIST
89513: LIST
89514: PUSH
89515: LD_INT 5
89517: NEG
89518: PUSH
89519: LD_INT 1
89521: NEG
89522: PUSH
89523: EMPTY
89524: LIST
89525: LIST
89526: PUSH
89527: LD_INT 5
89529: NEG
89530: PUSH
89531: LD_INT 2
89533: NEG
89534: PUSH
89535: EMPTY
89536: LIST
89537: LIST
89538: PUSH
89539: LD_INT 3
89541: NEG
89542: PUSH
89543: LD_INT 2
89545: PUSH
89546: EMPTY
89547: LIST
89548: LIST
89549: PUSH
89550: LD_INT 3
89552: NEG
89553: PUSH
89554: LD_INT 3
89556: NEG
89557: PUSH
89558: EMPTY
89559: LIST
89560: LIST
89561: PUSH
89562: LD_INT 3
89564: NEG
89565: PUSH
89566: LD_INT 4
89568: NEG
89569: PUSH
89570: EMPTY
89571: LIST
89572: LIST
89573: PUSH
89574: LD_INT 2
89576: NEG
89577: PUSH
89578: LD_INT 3
89580: NEG
89581: PUSH
89582: EMPTY
89583: LIST
89584: LIST
89585: PUSH
89586: LD_INT 2
89588: NEG
89589: PUSH
89590: LD_INT 2
89592: NEG
89593: PUSH
89594: EMPTY
89595: LIST
89596: LIST
89597: PUSH
89598: LD_INT 3
89600: NEG
89601: PUSH
89602: LD_INT 2
89604: NEG
89605: PUSH
89606: EMPTY
89607: LIST
89608: LIST
89609: PUSH
89610: LD_INT 4
89612: NEG
89613: PUSH
89614: LD_INT 3
89616: NEG
89617: PUSH
89618: EMPTY
89619: LIST
89620: LIST
89621: PUSH
89622: LD_INT 4
89624: NEG
89625: PUSH
89626: LD_INT 4
89628: NEG
89629: PUSH
89630: EMPTY
89631: LIST
89632: LIST
89633: PUSH
89634: LD_INT 2
89636: NEG
89637: PUSH
89638: LD_INT 4
89640: NEG
89641: PUSH
89642: EMPTY
89643: LIST
89644: LIST
89645: PUSH
89646: LD_INT 4
89648: NEG
89649: PUSH
89650: LD_INT 2
89652: NEG
89653: PUSH
89654: EMPTY
89655: LIST
89656: LIST
89657: PUSH
89658: LD_INT 0
89660: PUSH
89661: LD_INT 4
89663: NEG
89664: PUSH
89665: EMPTY
89666: LIST
89667: LIST
89668: PUSH
89669: LD_INT 0
89671: PUSH
89672: LD_INT 5
89674: NEG
89675: PUSH
89676: EMPTY
89677: LIST
89678: LIST
89679: PUSH
89680: LD_INT 1
89682: PUSH
89683: LD_INT 4
89685: NEG
89686: PUSH
89687: EMPTY
89688: LIST
89689: LIST
89690: PUSH
89691: LD_INT 1
89693: PUSH
89694: LD_INT 3
89696: NEG
89697: PUSH
89698: EMPTY
89699: LIST
89700: LIST
89701: PUSH
89702: LD_INT 0
89704: PUSH
89705: LD_INT 3
89707: NEG
89708: PUSH
89709: EMPTY
89710: LIST
89711: LIST
89712: PUSH
89713: LD_INT 1
89715: NEG
89716: PUSH
89717: LD_INT 4
89719: NEG
89720: PUSH
89721: EMPTY
89722: LIST
89723: LIST
89724: PUSH
89725: LD_INT 1
89727: NEG
89728: PUSH
89729: LD_INT 5
89731: NEG
89732: PUSH
89733: EMPTY
89734: LIST
89735: LIST
89736: PUSH
89737: LD_INT 2
89739: PUSH
89740: LD_INT 3
89742: NEG
89743: PUSH
89744: EMPTY
89745: LIST
89746: LIST
89747: PUSH
89748: LD_INT 2
89750: NEG
89751: PUSH
89752: LD_INT 5
89754: NEG
89755: PUSH
89756: EMPTY
89757: LIST
89758: LIST
89759: PUSH
89760: EMPTY
89761: LIST
89762: LIST
89763: LIST
89764: LIST
89765: LIST
89766: LIST
89767: LIST
89768: LIST
89769: LIST
89770: LIST
89771: LIST
89772: LIST
89773: LIST
89774: LIST
89775: LIST
89776: LIST
89777: LIST
89778: LIST
89779: LIST
89780: LIST
89781: LIST
89782: LIST
89783: LIST
89784: LIST
89785: LIST
89786: LIST
89787: LIST
89788: LIST
89789: LIST
89790: LIST
89791: LIST
89792: LIST
89793: LIST
89794: LIST
89795: LIST
89796: LIST
89797: LIST
89798: LIST
89799: LIST
89800: LIST
89801: LIST
89802: LIST
89803: LIST
89804: LIST
89805: LIST
89806: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
89807: LD_ADDR_VAR 0 31
89811: PUSH
89812: LD_INT 0
89814: PUSH
89815: LD_INT 4
89817: PUSH
89818: EMPTY
89819: LIST
89820: LIST
89821: PUSH
89822: LD_INT 0
89824: PUSH
89825: LD_INT 3
89827: PUSH
89828: EMPTY
89829: LIST
89830: LIST
89831: PUSH
89832: LD_INT 1
89834: PUSH
89835: LD_INT 4
89837: PUSH
89838: EMPTY
89839: LIST
89840: LIST
89841: PUSH
89842: LD_INT 1
89844: PUSH
89845: LD_INT 5
89847: PUSH
89848: EMPTY
89849: LIST
89850: LIST
89851: PUSH
89852: LD_INT 0
89854: PUSH
89855: LD_INT 5
89857: PUSH
89858: EMPTY
89859: LIST
89860: LIST
89861: PUSH
89862: LD_INT 1
89864: NEG
89865: PUSH
89866: LD_INT 4
89868: PUSH
89869: EMPTY
89870: LIST
89871: LIST
89872: PUSH
89873: LD_INT 1
89875: NEG
89876: PUSH
89877: LD_INT 3
89879: PUSH
89880: EMPTY
89881: LIST
89882: LIST
89883: PUSH
89884: LD_INT 2
89886: PUSH
89887: LD_INT 5
89889: PUSH
89890: EMPTY
89891: LIST
89892: LIST
89893: PUSH
89894: LD_INT 2
89896: NEG
89897: PUSH
89898: LD_INT 3
89900: PUSH
89901: EMPTY
89902: LIST
89903: LIST
89904: PUSH
89905: LD_INT 3
89907: NEG
89908: PUSH
89909: LD_INT 0
89911: PUSH
89912: EMPTY
89913: LIST
89914: LIST
89915: PUSH
89916: LD_INT 3
89918: NEG
89919: PUSH
89920: LD_INT 1
89922: NEG
89923: PUSH
89924: EMPTY
89925: LIST
89926: LIST
89927: PUSH
89928: LD_INT 2
89930: NEG
89931: PUSH
89932: LD_INT 0
89934: PUSH
89935: EMPTY
89936: LIST
89937: LIST
89938: PUSH
89939: LD_INT 2
89941: NEG
89942: PUSH
89943: LD_INT 1
89945: PUSH
89946: EMPTY
89947: LIST
89948: LIST
89949: PUSH
89950: LD_INT 3
89952: NEG
89953: PUSH
89954: LD_INT 1
89956: PUSH
89957: EMPTY
89958: LIST
89959: LIST
89960: PUSH
89961: LD_INT 4
89963: NEG
89964: PUSH
89965: LD_INT 0
89967: PUSH
89968: EMPTY
89969: LIST
89970: LIST
89971: PUSH
89972: LD_INT 4
89974: NEG
89975: PUSH
89976: LD_INT 1
89978: NEG
89979: PUSH
89980: EMPTY
89981: LIST
89982: LIST
89983: PUSH
89984: LD_INT 4
89986: NEG
89987: PUSH
89988: LD_INT 2
89990: NEG
89991: PUSH
89992: EMPTY
89993: LIST
89994: LIST
89995: PUSH
89996: LD_INT 2
89998: NEG
89999: PUSH
90000: LD_INT 2
90002: PUSH
90003: EMPTY
90004: LIST
90005: LIST
90006: PUSH
90007: LD_INT 4
90009: NEG
90010: PUSH
90011: LD_INT 4
90013: NEG
90014: PUSH
90015: EMPTY
90016: LIST
90017: LIST
90018: PUSH
90019: LD_INT 4
90021: NEG
90022: PUSH
90023: LD_INT 5
90025: NEG
90026: PUSH
90027: EMPTY
90028: LIST
90029: LIST
90030: PUSH
90031: LD_INT 3
90033: NEG
90034: PUSH
90035: LD_INT 4
90037: NEG
90038: PUSH
90039: EMPTY
90040: LIST
90041: LIST
90042: PUSH
90043: LD_INT 3
90045: NEG
90046: PUSH
90047: LD_INT 3
90049: NEG
90050: PUSH
90051: EMPTY
90052: LIST
90053: LIST
90054: PUSH
90055: LD_INT 4
90057: NEG
90058: PUSH
90059: LD_INT 3
90061: NEG
90062: PUSH
90063: EMPTY
90064: LIST
90065: LIST
90066: PUSH
90067: LD_INT 5
90069: NEG
90070: PUSH
90071: LD_INT 4
90073: NEG
90074: PUSH
90075: EMPTY
90076: LIST
90077: LIST
90078: PUSH
90079: LD_INT 5
90081: NEG
90082: PUSH
90083: LD_INT 5
90085: NEG
90086: PUSH
90087: EMPTY
90088: LIST
90089: LIST
90090: PUSH
90091: LD_INT 3
90093: NEG
90094: PUSH
90095: LD_INT 5
90097: NEG
90098: PUSH
90099: EMPTY
90100: LIST
90101: LIST
90102: PUSH
90103: LD_INT 5
90105: NEG
90106: PUSH
90107: LD_INT 3
90109: NEG
90110: PUSH
90111: EMPTY
90112: LIST
90113: LIST
90114: PUSH
90115: LD_INT 0
90117: PUSH
90118: LD_INT 3
90120: NEG
90121: PUSH
90122: EMPTY
90123: LIST
90124: LIST
90125: PUSH
90126: LD_INT 0
90128: PUSH
90129: LD_INT 4
90131: NEG
90132: PUSH
90133: EMPTY
90134: LIST
90135: LIST
90136: PUSH
90137: LD_INT 1
90139: PUSH
90140: LD_INT 3
90142: NEG
90143: PUSH
90144: EMPTY
90145: LIST
90146: LIST
90147: PUSH
90148: LD_INT 1
90150: PUSH
90151: LD_INT 2
90153: NEG
90154: PUSH
90155: EMPTY
90156: LIST
90157: LIST
90158: PUSH
90159: LD_INT 0
90161: PUSH
90162: LD_INT 2
90164: NEG
90165: PUSH
90166: EMPTY
90167: LIST
90168: LIST
90169: PUSH
90170: LD_INT 1
90172: NEG
90173: PUSH
90174: LD_INT 3
90176: NEG
90177: PUSH
90178: EMPTY
90179: LIST
90180: LIST
90181: PUSH
90182: LD_INT 1
90184: NEG
90185: PUSH
90186: LD_INT 4
90188: NEG
90189: PUSH
90190: EMPTY
90191: LIST
90192: LIST
90193: PUSH
90194: LD_INT 2
90196: PUSH
90197: LD_INT 2
90199: NEG
90200: PUSH
90201: EMPTY
90202: LIST
90203: LIST
90204: PUSH
90205: LD_INT 2
90207: NEG
90208: PUSH
90209: LD_INT 4
90211: NEG
90212: PUSH
90213: EMPTY
90214: LIST
90215: LIST
90216: PUSH
90217: LD_INT 4
90219: PUSH
90220: LD_INT 0
90222: PUSH
90223: EMPTY
90224: LIST
90225: LIST
90226: PUSH
90227: LD_INT 4
90229: PUSH
90230: LD_INT 1
90232: NEG
90233: PUSH
90234: EMPTY
90235: LIST
90236: LIST
90237: PUSH
90238: LD_INT 5
90240: PUSH
90241: LD_INT 0
90243: PUSH
90244: EMPTY
90245: LIST
90246: LIST
90247: PUSH
90248: LD_INT 5
90250: PUSH
90251: LD_INT 1
90253: PUSH
90254: EMPTY
90255: LIST
90256: LIST
90257: PUSH
90258: LD_INT 4
90260: PUSH
90261: LD_INT 1
90263: PUSH
90264: EMPTY
90265: LIST
90266: LIST
90267: PUSH
90268: LD_INT 3
90270: PUSH
90271: LD_INT 0
90273: PUSH
90274: EMPTY
90275: LIST
90276: LIST
90277: PUSH
90278: LD_INT 3
90280: PUSH
90281: LD_INT 1
90283: NEG
90284: PUSH
90285: EMPTY
90286: LIST
90287: LIST
90288: PUSH
90289: LD_INT 3
90291: PUSH
90292: LD_INT 2
90294: NEG
90295: PUSH
90296: EMPTY
90297: LIST
90298: LIST
90299: PUSH
90300: LD_INT 5
90302: PUSH
90303: LD_INT 2
90305: PUSH
90306: EMPTY
90307: LIST
90308: LIST
90309: PUSH
90310: EMPTY
90311: LIST
90312: LIST
90313: LIST
90314: LIST
90315: LIST
90316: LIST
90317: LIST
90318: LIST
90319: LIST
90320: LIST
90321: LIST
90322: LIST
90323: LIST
90324: LIST
90325: LIST
90326: LIST
90327: LIST
90328: LIST
90329: LIST
90330: LIST
90331: LIST
90332: LIST
90333: LIST
90334: LIST
90335: LIST
90336: LIST
90337: LIST
90338: LIST
90339: LIST
90340: LIST
90341: LIST
90342: LIST
90343: LIST
90344: LIST
90345: LIST
90346: LIST
90347: LIST
90348: LIST
90349: LIST
90350: LIST
90351: LIST
90352: LIST
90353: LIST
90354: LIST
90355: LIST
90356: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
90357: LD_ADDR_VAR 0 32
90361: PUSH
90362: LD_INT 4
90364: NEG
90365: PUSH
90366: LD_INT 0
90368: PUSH
90369: EMPTY
90370: LIST
90371: LIST
90372: PUSH
90373: LD_INT 4
90375: NEG
90376: PUSH
90377: LD_INT 1
90379: NEG
90380: PUSH
90381: EMPTY
90382: LIST
90383: LIST
90384: PUSH
90385: LD_INT 3
90387: NEG
90388: PUSH
90389: LD_INT 0
90391: PUSH
90392: EMPTY
90393: LIST
90394: LIST
90395: PUSH
90396: LD_INT 3
90398: NEG
90399: PUSH
90400: LD_INT 1
90402: PUSH
90403: EMPTY
90404: LIST
90405: LIST
90406: PUSH
90407: LD_INT 4
90409: NEG
90410: PUSH
90411: LD_INT 1
90413: PUSH
90414: EMPTY
90415: LIST
90416: LIST
90417: PUSH
90418: LD_INT 5
90420: NEG
90421: PUSH
90422: LD_INT 0
90424: PUSH
90425: EMPTY
90426: LIST
90427: LIST
90428: PUSH
90429: LD_INT 5
90431: NEG
90432: PUSH
90433: LD_INT 1
90435: NEG
90436: PUSH
90437: EMPTY
90438: LIST
90439: LIST
90440: PUSH
90441: LD_INT 5
90443: NEG
90444: PUSH
90445: LD_INT 2
90447: NEG
90448: PUSH
90449: EMPTY
90450: LIST
90451: LIST
90452: PUSH
90453: LD_INT 3
90455: NEG
90456: PUSH
90457: LD_INT 2
90459: PUSH
90460: EMPTY
90461: LIST
90462: LIST
90463: PUSH
90464: LD_INT 3
90466: NEG
90467: PUSH
90468: LD_INT 3
90470: NEG
90471: PUSH
90472: EMPTY
90473: LIST
90474: LIST
90475: PUSH
90476: LD_INT 3
90478: NEG
90479: PUSH
90480: LD_INT 4
90482: NEG
90483: PUSH
90484: EMPTY
90485: LIST
90486: LIST
90487: PUSH
90488: LD_INT 2
90490: NEG
90491: PUSH
90492: LD_INT 3
90494: NEG
90495: PUSH
90496: EMPTY
90497: LIST
90498: LIST
90499: PUSH
90500: LD_INT 2
90502: NEG
90503: PUSH
90504: LD_INT 2
90506: NEG
90507: PUSH
90508: EMPTY
90509: LIST
90510: LIST
90511: PUSH
90512: LD_INT 3
90514: NEG
90515: PUSH
90516: LD_INT 2
90518: NEG
90519: PUSH
90520: EMPTY
90521: LIST
90522: LIST
90523: PUSH
90524: LD_INT 4
90526: NEG
90527: PUSH
90528: LD_INT 3
90530: NEG
90531: PUSH
90532: EMPTY
90533: LIST
90534: LIST
90535: PUSH
90536: LD_INT 4
90538: NEG
90539: PUSH
90540: LD_INT 4
90542: NEG
90543: PUSH
90544: EMPTY
90545: LIST
90546: LIST
90547: PUSH
90548: LD_INT 2
90550: NEG
90551: PUSH
90552: LD_INT 4
90554: NEG
90555: PUSH
90556: EMPTY
90557: LIST
90558: LIST
90559: PUSH
90560: LD_INT 4
90562: NEG
90563: PUSH
90564: LD_INT 2
90566: NEG
90567: PUSH
90568: EMPTY
90569: LIST
90570: LIST
90571: PUSH
90572: LD_INT 0
90574: PUSH
90575: LD_INT 4
90577: NEG
90578: PUSH
90579: EMPTY
90580: LIST
90581: LIST
90582: PUSH
90583: LD_INT 0
90585: PUSH
90586: LD_INT 5
90588: NEG
90589: PUSH
90590: EMPTY
90591: LIST
90592: LIST
90593: PUSH
90594: LD_INT 1
90596: PUSH
90597: LD_INT 4
90599: NEG
90600: PUSH
90601: EMPTY
90602: LIST
90603: LIST
90604: PUSH
90605: LD_INT 1
90607: PUSH
90608: LD_INT 3
90610: NEG
90611: PUSH
90612: EMPTY
90613: LIST
90614: LIST
90615: PUSH
90616: LD_INT 0
90618: PUSH
90619: LD_INT 3
90621: NEG
90622: PUSH
90623: EMPTY
90624: LIST
90625: LIST
90626: PUSH
90627: LD_INT 1
90629: NEG
90630: PUSH
90631: LD_INT 4
90633: NEG
90634: PUSH
90635: EMPTY
90636: LIST
90637: LIST
90638: PUSH
90639: LD_INT 1
90641: NEG
90642: PUSH
90643: LD_INT 5
90645: NEG
90646: PUSH
90647: EMPTY
90648: LIST
90649: LIST
90650: PUSH
90651: LD_INT 2
90653: PUSH
90654: LD_INT 3
90656: NEG
90657: PUSH
90658: EMPTY
90659: LIST
90660: LIST
90661: PUSH
90662: LD_INT 2
90664: NEG
90665: PUSH
90666: LD_INT 5
90668: NEG
90669: PUSH
90670: EMPTY
90671: LIST
90672: LIST
90673: PUSH
90674: LD_INT 3
90676: PUSH
90677: LD_INT 0
90679: PUSH
90680: EMPTY
90681: LIST
90682: LIST
90683: PUSH
90684: LD_INT 3
90686: PUSH
90687: LD_INT 1
90689: NEG
90690: PUSH
90691: EMPTY
90692: LIST
90693: LIST
90694: PUSH
90695: LD_INT 4
90697: PUSH
90698: LD_INT 0
90700: PUSH
90701: EMPTY
90702: LIST
90703: LIST
90704: PUSH
90705: LD_INT 4
90707: PUSH
90708: LD_INT 1
90710: PUSH
90711: EMPTY
90712: LIST
90713: LIST
90714: PUSH
90715: LD_INT 3
90717: PUSH
90718: LD_INT 1
90720: PUSH
90721: EMPTY
90722: LIST
90723: LIST
90724: PUSH
90725: LD_INT 2
90727: PUSH
90728: LD_INT 0
90730: PUSH
90731: EMPTY
90732: LIST
90733: LIST
90734: PUSH
90735: LD_INT 2
90737: PUSH
90738: LD_INT 1
90740: NEG
90741: PUSH
90742: EMPTY
90743: LIST
90744: LIST
90745: PUSH
90746: LD_INT 2
90748: PUSH
90749: LD_INT 2
90751: NEG
90752: PUSH
90753: EMPTY
90754: LIST
90755: LIST
90756: PUSH
90757: LD_INT 4
90759: PUSH
90760: LD_INT 2
90762: PUSH
90763: EMPTY
90764: LIST
90765: LIST
90766: PUSH
90767: LD_INT 4
90769: PUSH
90770: LD_INT 4
90772: PUSH
90773: EMPTY
90774: LIST
90775: LIST
90776: PUSH
90777: LD_INT 4
90779: PUSH
90780: LD_INT 3
90782: PUSH
90783: EMPTY
90784: LIST
90785: LIST
90786: PUSH
90787: LD_INT 5
90789: PUSH
90790: LD_INT 4
90792: PUSH
90793: EMPTY
90794: LIST
90795: LIST
90796: PUSH
90797: LD_INT 5
90799: PUSH
90800: LD_INT 5
90802: PUSH
90803: EMPTY
90804: LIST
90805: LIST
90806: PUSH
90807: LD_INT 4
90809: PUSH
90810: LD_INT 5
90812: PUSH
90813: EMPTY
90814: LIST
90815: LIST
90816: PUSH
90817: LD_INT 3
90819: PUSH
90820: LD_INT 4
90822: PUSH
90823: EMPTY
90824: LIST
90825: LIST
90826: PUSH
90827: LD_INT 3
90829: PUSH
90830: LD_INT 3
90832: PUSH
90833: EMPTY
90834: LIST
90835: LIST
90836: PUSH
90837: LD_INT 5
90839: PUSH
90840: LD_INT 3
90842: PUSH
90843: EMPTY
90844: LIST
90845: LIST
90846: PUSH
90847: LD_INT 3
90849: PUSH
90850: LD_INT 5
90852: PUSH
90853: EMPTY
90854: LIST
90855: LIST
90856: PUSH
90857: EMPTY
90858: LIST
90859: LIST
90860: LIST
90861: LIST
90862: LIST
90863: LIST
90864: LIST
90865: LIST
90866: LIST
90867: LIST
90868: LIST
90869: LIST
90870: LIST
90871: LIST
90872: LIST
90873: LIST
90874: LIST
90875: LIST
90876: LIST
90877: LIST
90878: LIST
90879: LIST
90880: LIST
90881: LIST
90882: LIST
90883: LIST
90884: LIST
90885: LIST
90886: LIST
90887: LIST
90888: LIST
90889: LIST
90890: LIST
90891: LIST
90892: LIST
90893: LIST
90894: LIST
90895: LIST
90896: LIST
90897: LIST
90898: LIST
90899: LIST
90900: LIST
90901: LIST
90902: LIST
90903: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
90904: LD_ADDR_VAR 0 33
90908: PUSH
90909: LD_INT 4
90911: NEG
90912: PUSH
90913: LD_INT 4
90915: NEG
90916: PUSH
90917: EMPTY
90918: LIST
90919: LIST
90920: PUSH
90921: LD_INT 4
90923: NEG
90924: PUSH
90925: LD_INT 5
90927: NEG
90928: PUSH
90929: EMPTY
90930: LIST
90931: LIST
90932: PUSH
90933: LD_INT 3
90935: NEG
90936: PUSH
90937: LD_INT 4
90939: NEG
90940: PUSH
90941: EMPTY
90942: LIST
90943: LIST
90944: PUSH
90945: LD_INT 3
90947: NEG
90948: PUSH
90949: LD_INT 3
90951: NEG
90952: PUSH
90953: EMPTY
90954: LIST
90955: LIST
90956: PUSH
90957: LD_INT 4
90959: NEG
90960: PUSH
90961: LD_INT 3
90963: NEG
90964: PUSH
90965: EMPTY
90966: LIST
90967: LIST
90968: PUSH
90969: LD_INT 5
90971: NEG
90972: PUSH
90973: LD_INT 4
90975: NEG
90976: PUSH
90977: EMPTY
90978: LIST
90979: LIST
90980: PUSH
90981: LD_INT 5
90983: NEG
90984: PUSH
90985: LD_INT 5
90987: NEG
90988: PUSH
90989: EMPTY
90990: LIST
90991: LIST
90992: PUSH
90993: LD_INT 3
90995: NEG
90996: PUSH
90997: LD_INT 5
90999: NEG
91000: PUSH
91001: EMPTY
91002: LIST
91003: LIST
91004: PUSH
91005: LD_INT 5
91007: NEG
91008: PUSH
91009: LD_INT 3
91011: NEG
91012: PUSH
91013: EMPTY
91014: LIST
91015: LIST
91016: PUSH
91017: LD_INT 0
91019: PUSH
91020: LD_INT 3
91022: NEG
91023: PUSH
91024: EMPTY
91025: LIST
91026: LIST
91027: PUSH
91028: LD_INT 0
91030: PUSH
91031: LD_INT 4
91033: NEG
91034: PUSH
91035: EMPTY
91036: LIST
91037: LIST
91038: PUSH
91039: LD_INT 1
91041: PUSH
91042: LD_INT 3
91044: NEG
91045: PUSH
91046: EMPTY
91047: LIST
91048: LIST
91049: PUSH
91050: LD_INT 1
91052: PUSH
91053: LD_INT 2
91055: NEG
91056: PUSH
91057: EMPTY
91058: LIST
91059: LIST
91060: PUSH
91061: LD_INT 0
91063: PUSH
91064: LD_INT 2
91066: NEG
91067: PUSH
91068: EMPTY
91069: LIST
91070: LIST
91071: PUSH
91072: LD_INT 1
91074: NEG
91075: PUSH
91076: LD_INT 3
91078: NEG
91079: PUSH
91080: EMPTY
91081: LIST
91082: LIST
91083: PUSH
91084: LD_INT 1
91086: NEG
91087: PUSH
91088: LD_INT 4
91090: NEG
91091: PUSH
91092: EMPTY
91093: LIST
91094: LIST
91095: PUSH
91096: LD_INT 2
91098: PUSH
91099: LD_INT 2
91101: NEG
91102: PUSH
91103: EMPTY
91104: LIST
91105: LIST
91106: PUSH
91107: LD_INT 2
91109: NEG
91110: PUSH
91111: LD_INT 4
91113: NEG
91114: PUSH
91115: EMPTY
91116: LIST
91117: LIST
91118: PUSH
91119: LD_INT 4
91121: PUSH
91122: LD_INT 0
91124: PUSH
91125: EMPTY
91126: LIST
91127: LIST
91128: PUSH
91129: LD_INT 4
91131: PUSH
91132: LD_INT 1
91134: NEG
91135: PUSH
91136: EMPTY
91137: LIST
91138: LIST
91139: PUSH
91140: LD_INT 5
91142: PUSH
91143: LD_INT 0
91145: PUSH
91146: EMPTY
91147: LIST
91148: LIST
91149: PUSH
91150: LD_INT 5
91152: PUSH
91153: LD_INT 1
91155: PUSH
91156: EMPTY
91157: LIST
91158: LIST
91159: PUSH
91160: LD_INT 4
91162: PUSH
91163: LD_INT 1
91165: PUSH
91166: EMPTY
91167: LIST
91168: LIST
91169: PUSH
91170: LD_INT 3
91172: PUSH
91173: LD_INT 0
91175: PUSH
91176: EMPTY
91177: LIST
91178: LIST
91179: PUSH
91180: LD_INT 3
91182: PUSH
91183: LD_INT 1
91185: NEG
91186: PUSH
91187: EMPTY
91188: LIST
91189: LIST
91190: PUSH
91191: LD_INT 3
91193: PUSH
91194: LD_INT 2
91196: NEG
91197: PUSH
91198: EMPTY
91199: LIST
91200: LIST
91201: PUSH
91202: LD_INT 5
91204: PUSH
91205: LD_INT 2
91207: PUSH
91208: EMPTY
91209: LIST
91210: LIST
91211: PUSH
91212: LD_INT 3
91214: PUSH
91215: LD_INT 3
91217: PUSH
91218: EMPTY
91219: LIST
91220: LIST
91221: PUSH
91222: LD_INT 3
91224: PUSH
91225: LD_INT 2
91227: PUSH
91228: EMPTY
91229: LIST
91230: LIST
91231: PUSH
91232: LD_INT 4
91234: PUSH
91235: LD_INT 3
91237: PUSH
91238: EMPTY
91239: LIST
91240: LIST
91241: PUSH
91242: LD_INT 4
91244: PUSH
91245: LD_INT 4
91247: PUSH
91248: EMPTY
91249: LIST
91250: LIST
91251: PUSH
91252: LD_INT 3
91254: PUSH
91255: LD_INT 4
91257: PUSH
91258: EMPTY
91259: LIST
91260: LIST
91261: PUSH
91262: LD_INT 2
91264: PUSH
91265: LD_INT 3
91267: PUSH
91268: EMPTY
91269: LIST
91270: LIST
91271: PUSH
91272: LD_INT 2
91274: PUSH
91275: LD_INT 2
91277: PUSH
91278: EMPTY
91279: LIST
91280: LIST
91281: PUSH
91282: LD_INT 4
91284: PUSH
91285: LD_INT 2
91287: PUSH
91288: EMPTY
91289: LIST
91290: LIST
91291: PUSH
91292: LD_INT 2
91294: PUSH
91295: LD_INT 4
91297: PUSH
91298: EMPTY
91299: LIST
91300: LIST
91301: PUSH
91302: LD_INT 0
91304: PUSH
91305: LD_INT 4
91307: PUSH
91308: EMPTY
91309: LIST
91310: LIST
91311: PUSH
91312: LD_INT 0
91314: PUSH
91315: LD_INT 3
91317: PUSH
91318: EMPTY
91319: LIST
91320: LIST
91321: PUSH
91322: LD_INT 1
91324: PUSH
91325: LD_INT 4
91327: PUSH
91328: EMPTY
91329: LIST
91330: LIST
91331: PUSH
91332: LD_INT 1
91334: PUSH
91335: LD_INT 5
91337: PUSH
91338: EMPTY
91339: LIST
91340: LIST
91341: PUSH
91342: LD_INT 0
91344: PUSH
91345: LD_INT 5
91347: PUSH
91348: EMPTY
91349: LIST
91350: LIST
91351: PUSH
91352: LD_INT 1
91354: NEG
91355: PUSH
91356: LD_INT 4
91358: PUSH
91359: EMPTY
91360: LIST
91361: LIST
91362: PUSH
91363: LD_INT 1
91365: NEG
91366: PUSH
91367: LD_INT 3
91369: PUSH
91370: EMPTY
91371: LIST
91372: LIST
91373: PUSH
91374: LD_INT 2
91376: PUSH
91377: LD_INT 5
91379: PUSH
91380: EMPTY
91381: LIST
91382: LIST
91383: PUSH
91384: LD_INT 2
91386: NEG
91387: PUSH
91388: LD_INT 3
91390: PUSH
91391: EMPTY
91392: LIST
91393: LIST
91394: PUSH
91395: EMPTY
91396: LIST
91397: LIST
91398: LIST
91399: LIST
91400: LIST
91401: LIST
91402: LIST
91403: LIST
91404: LIST
91405: LIST
91406: LIST
91407: LIST
91408: LIST
91409: LIST
91410: LIST
91411: LIST
91412: LIST
91413: LIST
91414: LIST
91415: LIST
91416: LIST
91417: LIST
91418: LIST
91419: LIST
91420: LIST
91421: LIST
91422: LIST
91423: LIST
91424: LIST
91425: LIST
91426: LIST
91427: LIST
91428: LIST
91429: LIST
91430: LIST
91431: LIST
91432: LIST
91433: LIST
91434: LIST
91435: LIST
91436: LIST
91437: LIST
91438: LIST
91439: LIST
91440: LIST
91441: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
91442: LD_ADDR_VAR 0 34
91446: PUSH
91447: LD_INT 0
91449: PUSH
91450: LD_INT 4
91452: NEG
91453: PUSH
91454: EMPTY
91455: LIST
91456: LIST
91457: PUSH
91458: LD_INT 0
91460: PUSH
91461: LD_INT 5
91463: NEG
91464: PUSH
91465: EMPTY
91466: LIST
91467: LIST
91468: PUSH
91469: LD_INT 1
91471: PUSH
91472: LD_INT 4
91474: NEG
91475: PUSH
91476: EMPTY
91477: LIST
91478: LIST
91479: PUSH
91480: LD_INT 1
91482: PUSH
91483: LD_INT 3
91485: NEG
91486: PUSH
91487: EMPTY
91488: LIST
91489: LIST
91490: PUSH
91491: LD_INT 0
91493: PUSH
91494: LD_INT 3
91496: NEG
91497: PUSH
91498: EMPTY
91499: LIST
91500: LIST
91501: PUSH
91502: LD_INT 1
91504: NEG
91505: PUSH
91506: LD_INT 4
91508: NEG
91509: PUSH
91510: EMPTY
91511: LIST
91512: LIST
91513: PUSH
91514: LD_INT 1
91516: NEG
91517: PUSH
91518: LD_INT 5
91520: NEG
91521: PUSH
91522: EMPTY
91523: LIST
91524: LIST
91525: PUSH
91526: LD_INT 2
91528: PUSH
91529: LD_INT 3
91531: NEG
91532: PUSH
91533: EMPTY
91534: LIST
91535: LIST
91536: PUSH
91537: LD_INT 2
91539: NEG
91540: PUSH
91541: LD_INT 5
91543: NEG
91544: PUSH
91545: EMPTY
91546: LIST
91547: LIST
91548: PUSH
91549: LD_INT 3
91551: PUSH
91552: LD_INT 0
91554: PUSH
91555: EMPTY
91556: LIST
91557: LIST
91558: PUSH
91559: LD_INT 3
91561: PUSH
91562: LD_INT 1
91564: NEG
91565: PUSH
91566: EMPTY
91567: LIST
91568: LIST
91569: PUSH
91570: LD_INT 4
91572: PUSH
91573: LD_INT 0
91575: PUSH
91576: EMPTY
91577: LIST
91578: LIST
91579: PUSH
91580: LD_INT 4
91582: PUSH
91583: LD_INT 1
91585: PUSH
91586: EMPTY
91587: LIST
91588: LIST
91589: PUSH
91590: LD_INT 3
91592: PUSH
91593: LD_INT 1
91595: PUSH
91596: EMPTY
91597: LIST
91598: LIST
91599: PUSH
91600: LD_INT 2
91602: PUSH
91603: LD_INT 0
91605: PUSH
91606: EMPTY
91607: LIST
91608: LIST
91609: PUSH
91610: LD_INT 2
91612: PUSH
91613: LD_INT 1
91615: NEG
91616: PUSH
91617: EMPTY
91618: LIST
91619: LIST
91620: PUSH
91621: LD_INT 2
91623: PUSH
91624: LD_INT 2
91626: NEG
91627: PUSH
91628: EMPTY
91629: LIST
91630: LIST
91631: PUSH
91632: LD_INT 4
91634: PUSH
91635: LD_INT 2
91637: PUSH
91638: EMPTY
91639: LIST
91640: LIST
91641: PUSH
91642: LD_INT 4
91644: PUSH
91645: LD_INT 4
91647: PUSH
91648: EMPTY
91649: LIST
91650: LIST
91651: PUSH
91652: LD_INT 4
91654: PUSH
91655: LD_INT 3
91657: PUSH
91658: EMPTY
91659: LIST
91660: LIST
91661: PUSH
91662: LD_INT 5
91664: PUSH
91665: LD_INT 4
91667: PUSH
91668: EMPTY
91669: LIST
91670: LIST
91671: PUSH
91672: LD_INT 5
91674: PUSH
91675: LD_INT 5
91677: PUSH
91678: EMPTY
91679: LIST
91680: LIST
91681: PUSH
91682: LD_INT 4
91684: PUSH
91685: LD_INT 5
91687: PUSH
91688: EMPTY
91689: LIST
91690: LIST
91691: PUSH
91692: LD_INT 3
91694: PUSH
91695: LD_INT 4
91697: PUSH
91698: EMPTY
91699: LIST
91700: LIST
91701: PUSH
91702: LD_INT 3
91704: PUSH
91705: LD_INT 3
91707: PUSH
91708: EMPTY
91709: LIST
91710: LIST
91711: PUSH
91712: LD_INT 5
91714: PUSH
91715: LD_INT 3
91717: PUSH
91718: EMPTY
91719: LIST
91720: LIST
91721: PUSH
91722: LD_INT 3
91724: PUSH
91725: LD_INT 5
91727: PUSH
91728: EMPTY
91729: LIST
91730: LIST
91731: PUSH
91732: LD_INT 0
91734: PUSH
91735: LD_INT 3
91737: PUSH
91738: EMPTY
91739: LIST
91740: LIST
91741: PUSH
91742: LD_INT 0
91744: PUSH
91745: LD_INT 2
91747: PUSH
91748: EMPTY
91749: LIST
91750: LIST
91751: PUSH
91752: LD_INT 1
91754: PUSH
91755: LD_INT 3
91757: PUSH
91758: EMPTY
91759: LIST
91760: LIST
91761: PUSH
91762: LD_INT 1
91764: PUSH
91765: LD_INT 4
91767: PUSH
91768: EMPTY
91769: LIST
91770: LIST
91771: PUSH
91772: LD_INT 0
91774: PUSH
91775: LD_INT 4
91777: PUSH
91778: EMPTY
91779: LIST
91780: LIST
91781: PUSH
91782: LD_INT 1
91784: NEG
91785: PUSH
91786: LD_INT 3
91788: PUSH
91789: EMPTY
91790: LIST
91791: LIST
91792: PUSH
91793: LD_INT 1
91795: NEG
91796: PUSH
91797: LD_INT 2
91799: PUSH
91800: EMPTY
91801: LIST
91802: LIST
91803: PUSH
91804: LD_INT 2
91806: PUSH
91807: LD_INT 4
91809: PUSH
91810: EMPTY
91811: LIST
91812: LIST
91813: PUSH
91814: LD_INT 2
91816: NEG
91817: PUSH
91818: LD_INT 2
91820: PUSH
91821: EMPTY
91822: LIST
91823: LIST
91824: PUSH
91825: LD_INT 4
91827: NEG
91828: PUSH
91829: LD_INT 0
91831: PUSH
91832: EMPTY
91833: LIST
91834: LIST
91835: PUSH
91836: LD_INT 4
91838: NEG
91839: PUSH
91840: LD_INT 1
91842: NEG
91843: PUSH
91844: EMPTY
91845: LIST
91846: LIST
91847: PUSH
91848: LD_INT 3
91850: NEG
91851: PUSH
91852: LD_INT 0
91854: PUSH
91855: EMPTY
91856: LIST
91857: LIST
91858: PUSH
91859: LD_INT 3
91861: NEG
91862: PUSH
91863: LD_INT 1
91865: PUSH
91866: EMPTY
91867: LIST
91868: LIST
91869: PUSH
91870: LD_INT 4
91872: NEG
91873: PUSH
91874: LD_INT 1
91876: PUSH
91877: EMPTY
91878: LIST
91879: LIST
91880: PUSH
91881: LD_INT 5
91883: NEG
91884: PUSH
91885: LD_INT 0
91887: PUSH
91888: EMPTY
91889: LIST
91890: LIST
91891: PUSH
91892: LD_INT 5
91894: NEG
91895: PUSH
91896: LD_INT 1
91898: NEG
91899: PUSH
91900: EMPTY
91901: LIST
91902: LIST
91903: PUSH
91904: LD_INT 5
91906: NEG
91907: PUSH
91908: LD_INT 2
91910: NEG
91911: PUSH
91912: EMPTY
91913: LIST
91914: LIST
91915: PUSH
91916: LD_INT 3
91918: NEG
91919: PUSH
91920: LD_INT 2
91922: PUSH
91923: EMPTY
91924: LIST
91925: LIST
91926: PUSH
91927: EMPTY
91928: LIST
91929: LIST
91930: LIST
91931: LIST
91932: LIST
91933: LIST
91934: LIST
91935: LIST
91936: LIST
91937: LIST
91938: LIST
91939: LIST
91940: LIST
91941: LIST
91942: LIST
91943: LIST
91944: LIST
91945: LIST
91946: LIST
91947: LIST
91948: LIST
91949: LIST
91950: LIST
91951: LIST
91952: LIST
91953: LIST
91954: LIST
91955: LIST
91956: LIST
91957: LIST
91958: LIST
91959: LIST
91960: LIST
91961: LIST
91962: LIST
91963: LIST
91964: LIST
91965: LIST
91966: LIST
91967: LIST
91968: LIST
91969: LIST
91970: LIST
91971: LIST
91972: LIST
91973: ST_TO_ADDR
// end ; end ;
91974: GO 91977
91976: POP
// case btype of b_depot , b_warehouse :
91977: LD_VAR 0 1
91981: PUSH
91982: LD_INT 0
91984: DOUBLE
91985: EQUAL
91986: IFTRUE 91996
91988: LD_INT 1
91990: DOUBLE
91991: EQUAL
91992: IFTRUE 91996
91994: GO 92197
91996: POP
// case nation of nation_american :
91997: LD_VAR 0 5
92001: PUSH
92002: LD_INT 1
92004: DOUBLE
92005: EQUAL
92006: IFTRUE 92010
92008: GO 92066
92010: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
92011: LD_ADDR_VAR 0 9
92015: PUSH
92016: LD_VAR 0 11
92020: PUSH
92021: LD_VAR 0 12
92025: PUSH
92026: LD_VAR 0 13
92030: PUSH
92031: LD_VAR 0 14
92035: PUSH
92036: LD_VAR 0 15
92040: PUSH
92041: LD_VAR 0 16
92045: PUSH
92046: EMPTY
92047: LIST
92048: LIST
92049: LIST
92050: LIST
92051: LIST
92052: LIST
92053: PUSH
92054: LD_VAR 0 4
92058: PUSH
92059: LD_INT 1
92061: PLUS
92062: ARRAY
92063: ST_TO_ADDR
92064: GO 92195
92066: LD_INT 2
92068: DOUBLE
92069: EQUAL
92070: IFTRUE 92074
92072: GO 92130
92074: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
92075: LD_ADDR_VAR 0 9
92079: PUSH
92080: LD_VAR 0 17
92084: PUSH
92085: LD_VAR 0 18
92089: PUSH
92090: LD_VAR 0 19
92094: PUSH
92095: LD_VAR 0 20
92099: PUSH
92100: LD_VAR 0 21
92104: PUSH
92105: LD_VAR 0 22
92109: PUSH
92110: EMPTY
92111: LIST
92112: LIST
92113: LIST
92114: LIST
92115: LIST
92116: LIST
92117: PUSH
92118: LD_VAR 0 4
92122: PUSH
92123: LD_INT 1
92125: PLUS
92126: ARRAY
92127: ST_TO_ADDR
92128: GO 92195
92130: LD_INT 3
92132: DOUBLE
92133: EQUAL
92134: IFTRUE 92138
92136: GO 92194
92138: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
92139: LD_ADDR_VAR 0 9
92143: PUSH
92144: LD_VAR 0 23
92148: PUSH
92149: LD_VAR 0 24
92153: PUSH
92154: LD_VAR 0 25
92158: PUSH
92159: LD_VAR 0 26
92163: PUSH
92164: LD_VAR 0 27
92168: PUSH
92169: LD_VAR 0 28
92173: PUSH
92174: EMPTY
92175: LIST
92176: LIST
92177: LIST
92178: LIST
92179: LIST
92180: LIST
92181: PUSH
92182: LD_VAR 0 4
92186: PUSH
92187: LD_INT 1
92189: PLUS
92190: ARRAY
92191: ST_TO_ADDR
92192: GO 92195
92194: POP
92195: GO 92744
92197: LD_INT 2
92199: DOUBLE
92200: EQUAL
92201: IFTRUE 92211
92203: LD_INT 3
92205: DOUBLE
92206: EQUAL
92207: IFTRUE 92211
92209: GO 92267
92211: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
92212: LD_ADDR_VAR 0 9
92216: PUSH
92217: LD_VAR 0 29
92221: PUSH
92222: LD_VAR 0 30
92226: PUSH
92227: LD_VAR 0 31
92231: PUSH
92232: LD_VAR 0 32
92236: PUSH
92237: LD_VAR 0 33
92241: PUSH
92242: LD_VAR 0 34
92246: PUSH
92247: EMPTY
92248: LIST
92249: LIST
92250: LIST
92251: LIST
92252: LIST
92253: LIST
92254: PUSH
92255: LD_VAR 0 4
92259: PUSH
92260: LD_INT 1
92262: PLUS
92263: ARRAY
92264: ST_TO_ADDR
92265: GO 92744
92267: LD_INT 16
92269: DOUBLE
92270: EQUAL
92271: IFTRUE 92323
92273: LD_INT 17
92275: DOUBLE
92276: EQUAL
92277: IFTRUE 92323
92279: LD_INT 18
92281: DOUBLE
92282: EQUAL
92283: IFTRUE 92323
92285: LD_INT 19
92287: DOUBLE
92288: EQUAL
92289: IFTRUE 92323
92291: LD_INT 20
92293: DOUBLE
92294: EQUAL
92295: IFTRUE 92323
92297: LD_INT 21
92299: DOUBLE
92300: EQUAL
92301: IFTRUE 92323
92303: LD_INT 23
92305: DOUBLE
92306: EQUAL
92307: IFTRUE 92323
92309: LD_INT 24
92311: DOUBLE
92312: EQUAL
92313: IFTRUE 92323
92315: LD_INT 25
92317: DOUBLE
92318: EQUAL
92319: IFTRUE 92323
92321: GO 92379
92323: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
92324: LD_ADDR_VAR 0 9
92328: PUSH
92329: LD_VAR 0 35
92333: PUSH
92334: LD_VAR 0 36
92338: PUSH
92339: LD_VAR 0 37
92343: PUSH
92344: LD_VAR 0 38
92348: PUSH
92349: LD_VAR 0 39
92353: PUSH
92354: LD_VAR 0 40
92358: PUSH
92359: EMPTY
92360: LIST
92361: LIST
92362: LIST
92363: LIST
92364: LIST
92365: LIST
92366: PUSH
92367: LD_VAR 0 4
92371: PUSH
92372: LD_INT 1
92374: PLUS
92375: ARRAY
92376: ST_TO_ADDR
92377: GO 92744
92379: LD_INT 6
92381: DOUBLE
92382: EQUAL
92383: IFTRUE 92435
92385: LD_INT 7
92387: DOUBLE
92388: EQUAL
92389: IFTRUE 92435
92391: LD_INT 8
92393: DOUBLE
92394: EQUAL
92395: IFTRUE 92435
92397: LD_INT 13
92399: DOUBLE
92400: EQUAL
92401: IFTRUE 92435
92403: LD_INT 12
92405: DOUBLE
92406: EQUAL
92407: IFTRUE 92435
92409: LD_INT 15
92411: DOUBLE
92412: EQUAL
92413: IFTRUE 92435
92415: LD_INT 11
92417: DOUBLE
92418: EQUAL
92419: IFTRUE 92435
92421: LD_INT 14
92423: DOUBLE
92424: EQUAL
92425: IFTRUE 92435
92427: LD_INT 10
92429: DOUBLE
92430: EQUAL
92431: IFTRUE 92435
92433: GO 92491
92435: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
92436: LD_ADDR_VAR 0 9
92440: PUSH
92441: LD_VAR 0 41
92445: PUSH
92446: LD_VAR 0 42
92450: PUSH
92451: LD_VAR 0 43
92455: PUSH
92456: LD_VAR 0 44
92460: PUSH
92461: LD_VAR 0 45
92465: PUSH
92466: LD_VAR 0 46
92470: PUSH
92471: EMPTY
92472: LIST
92473: LIST
92474: LIST
92475: LIST
92476: LIST
92477: LIST
92478: PUSH
92479: LD_VAR 0 4
92483: PUSH
92484: LD_INT 1
92486: PLUS
92487: ARRAY
92488: ST_TO_ADDR
92489: GO 92744
92491: LD_INT 36
92493: DOUBLE
92494: EQUAL
92495: IFTRUE 92499
92497: GO 92555
92499: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
92500: LD_ADDR_VAR 0 9
92504: PUSH
92505: LD_VAR 0 47
92509: PUSH
92510: LD_VAR 0 48
92514: PUSH
92515: LD_VAR 0 49
92519: PUSH
92520: LD_VAR 0 50
92524: PUSH
92525: LD_VAR 0 51
92529: PUSH
92530: LD_VAR 0 52
92534: PUSH
92535: EMPTY
92536: LIST
92537: LIST
92538: LIST
92539: LIST
92540: LIST
92541: LIST
92542: PUSH
92543: LD_VAR 0 4
92547: PUSH
92548: LD_INT 1
92550: PLUS
92551: ARRAY
92552: ST_TO_ADDR
92553: GO 92744
92555: LD_INT 4
92557: DOUBLE
92558: EQUAL
92559: IFTRUE 92581
92561: LD_INT 5
92563: DOUBLE
92564: EQUAL
92565: IFTRUE 92581
92567: LD_INT 34
92569: DOUBLE
92570: EQUAL
92571: IFTRUE 92581
92573: LD_INT 37
92575: DOUBLE
92576: EQUAL
92577: IFTRUE 92581
92579: GO 92637
92581: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
92582: LD_ADDR_VAR 0 9
92586: PUSH
92587: LD_VAR 0 53
92591: PUSH
92592: LD_VAR 0 54
92596: PUSH
92597: LD_VAR 0 55
92601: PUSH
92602: LD_VAR 0 56
92606: PUSH
92607: LD_VAR 0 57
92611: PUSH
92612: LD_VAR 0 58
92616: PUSH
92617: EMPTY
92618: LIST
92619: LIST
92620: LIST
92621: LIST
92622: LIST
92623: LIST
92624: PUSH
92625: LD_VAR 0 4
92629: PUSH
92630: LD_INT 1
92632: PLUS
92633: ARRAY
92634: ST_TO_ADDR
92635: GO 92744
92637: LD_INT 31
92639: DOUBLE
92640: EQUAL
92641: IFTRUE 92687
92643: LD_INT 32
92645: DOUBLE
92646: EQUAL
92647: IFTRUE 92687
92649: LD_INT 33
92651: DOUBLE
92652: EQUAL
92653: IFTRUE 92687
92655: LD_INT 27
92657: DOUBLE
92658: EQUAL
92659: IFTRUE 92687
92661: LD_INT 26
92663: DOUBLE
92664: EQUAL
92665: IFTRUE 92687
92667: LD_INT 28
92669: DOUBLE
92670: EQUAL
92671: IFTRUE 92687
92673: LD_INT 29
92675: DOUBLE
92676: EQUAL
92677: IFTRUE 92687
92679: LD_INT 30
92681: DOUBLE
92682: EQUAL
92683: IFTRUE 92687
92685: GO 92743
92687: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
92688: LD_ADDR_VAR 0 9
92692: PUSH
92693: LD_VAR 0 59
92697: PUSH
92698: LD_VAR 0 60
92702: PUSH
92703: LD_VAR 0 61
92707: PUSH
92708: LD_VAR 0 62
92712: PUSH
92713: LD_VAR 0 63
92717: PUSH
92718: LD_VAR 0 64
92722: PUSH
92723: EMPTY
92724: LIST
92725: LIST
92726: LIST
92727: LIST
92728: LIST
92729: LIST
92730: PUSH
92731: LD_VAR 0 4
92735: PUSH
92736: LD_INT 1
92738: PLUS
92739: ARRAY
92740: ST_TO_ADDR
92741: GO 92744
92743: POP
// temp_list2 = [ ] ;
92744: LD_ADDR_VAR 0 10
92748: PUSH
92749: EMPTY
92750: ST_TO_ADDR
// for i in temp_list do
92751: LD_ADDR_VAR 0 8
92755: PUSH
92756: LD_VAR 0 9
92760: PUSH
92761: FOR_IN
92762: IFFALSE 92814
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
92764: LD_ADDR_VAR 0 10
92768: PUSH
92769: LD_VAR 0 10
92773: PUSH
92774: LD_VAR 0 8
92778: PUSH
92779: LD_INT 1
92781: ARRAY
92782: PUSH
92783: LD_VAR 0 2
92787: PLUS
92788: PUSH
92789: LD_VAR 0 8
92793: PUSH
92794: LD_INT 2
92796: ARRAY
92797: PUSH
92798: LD_VAR 0 3
92802: PLUS
92803: PUSH
92804: EMPTY
92805: LIST
92806: LIST
92807: PUSH
92808: EMPTY
92809: LIST
92810: ADD
92811: ST_TO_ADDR
92812: GO 92761
92814: POP
92815: POP
// result = temp_list2 ;
92816: LD_ADDR_VAR 0 7
92820: PUSH
92821: LD_VAR 0 10
92825: ST_TO_ADDR
// end ;
92826: LD_VAR 0 7
92830: RET
// export function EnemyInRange ( unit , dist ) ; begin
92831: LD_INT 0
92833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
92834: LD_ADDR_VAR 0 3
92838: PUSH
92839: LD_VAR 0 1
92843: PPUSH
92844: CALL_OW 255
92848: PPUSH
92849: LD_VAR 0 1
92853: PPUSH
92854: CALL_OW 250
92858: PPUSH
92859: LD_VAR 0 1
92863: PPUSH
92864: CALL_OW 251
92868: PPUSH
92869: LD_VAR 0 2
92873: PPUSH
92874: CALL 66959 0 4
92878: PUSH
92879: LD_INT 4
92881: ARRAY
92882: ST_TO_ADDR
// end ;
92883: LD_VAR 0 3
92887: RET
// export function PlayerSeeMe ( unit ) ; begin
92888: LD_INT 0
92890: PPUSH
// result := See ( your_side , unit ) ;
92891: LD_ADDR_VAR 0 2
92895: PUSH
92896: LD_OWVAR 2
92900: PPUSH
92901: LD_VAR 0 1
92905: PPUSH
92906: CALL_OW 292
92910: ST_TO_ADDR
// end ;
92911: LD_VAR 0 2
92915: RET
// export function ReverseDir ( unit ) ; begin
92916: LD_INT 0
92918: PPUSH
// if not unit then
92919: LD_VAR 0 1
92923: NOT
92924: IFFALSE 92928
// exit ;
92926: GO 92974
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
92928: LD_ADDR_VAR 0 2
92932: PUSH
92933: LD_INT 3
92935: PUSH
92936: LD_INT 4
92938: PUSH
92939: LD_INT 5
92941: PUSH
92942: LD_INT 0
92944: PUSH
92945: LD_INT 1
92947: PUSH
92948: LD_INT 2
92950: PUSH
92951: EMPTY
92952: LIST
92953: LIST
92954: LIST
92955: LIST
92956: LIST
92957: LIST
92958: PUSH
92959: LD_VAR 0 1
92963: PPUSH
92964: CALL_OW 254
92968: PUSH
92969: LD_INT 1
92971: PLUS
92972: ARRAY
92973: ST_TO_ADDR
// end ;
92974: LD_VAR 0 2
92978: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
92979: LD_INT 0
92981: PPUSH
92982: PPUSH
92983: PPUSH
92984: PPUSH
92985: PPUSH
// if not hexes then
92986: LD_VAR 0 2
92990: NOT
92991: IFFALSE 92995
// exit ;
92993: GO 93143
// dist := 9999 ;
92995: LD_ADDR_VAR 0 5
92999: PUSH
93000: LD_INT 9999
93002: ST_TO_ADDR
// for i = 1 to hexes do
93003: LD_ADDR_VAR 0 4
93007: PUSH
93008: DOUBLE
93009: LD_INT 1
93011: DEC
93012: ST_TO_ADDR
93013: LD_VAR 0 2
93017: PUSH
93018: FOR_TO
93019: IFFALSE 93131
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
93021: LD_VAR 0 1
93025: PPUSH
93026: LD_VAR 0 2
93030: PUSH
93031: LD_VAR 0 4
93035: ARRAY
93036: PUSH
93037: LD_INT 1
93039: ARRAY
93040: PPUSH
93041: LD_VAR 0 2
93045: PUSH
93046: LD_VAR 0 4
93050: ARRAY
93051: PUSH
93052: LD_INT 2
93054: ARRAY
93055: PPUSH
93056: CALL_OW 297
93060: PUSH
93061: LD_VAR 0 5
93065: LESS
93066: IFFALSE 93129
// begin hex := hexes [ i ] ;
93068: LD_ADDR_VAR 0 7
93072: PUSH
93073: LD_VAR 0 2
93077: PUSH
93078: LD_VAR 0 4
93082: ARRAY
93083: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
93084: LD_ADDR_VAR 0 5
93088: PUSH
93089: LD_VAR 0 1
93093: PPUSH
93094: LD_VAR 0 2
93098: PUSH
93099: LD_VAR 0 4
93103: ARRAY
93104: PUSH
93105: LD_INT 1
93107: ARRAY
93108: PPUSH
93109: LD_VAR 0 2
93113: PUSH
93114: LD_VAR 0 4
93118: ARRAY
93119: PUSH
93120: LD_INT 2
93122: ARRAY
93123: PPUSH
93124: CALL_OW 297
93128: ST_TO_ADDR
// end ; end ;
93129: GO 93018
93131: POP
93132: POP
// result := hex ;
93133: LD_ADDR_VAR 0 3
93137: PUSH
93138: LD_VAR 0 7
93142: ST_TO_ADDR
// end ;
93143: LD_VAR 0 3
93147: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
93148: LD_INT 0
93150: PPUSH
93151: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
93152: LD_VAR 0 1
93156: NOT
93157: PUSH
93158: LD_VAR 0 1
93162: PUSH
93163: LD_INT 21
93165: PUSH
93166: LD_INT 2
93168: PUSH
93169: EMPTY
93170: LIST
93171: LIST
93172: PUSH
93173: LD_INT 23
93175: PUSH
93176: LD_INT 2
93178: PUSH
93179: EMPTY
93180: LIST
93181: LIST
93182: PUSH
93183: EMPTY
93184: LIST
93185: LIST
93186: PPUSH
93187: CALL_OW 69
93191: IN
93192: NOT
93193: OR
93194: IFFALSE 93198
// exit ;
93196: GO 93245
// for i = 1 to 3 do
93198: LD_ADDR_VAR 0 3
93202: PUSH
93203: DOUBLE
93204: LD_INT 1
93206: DEC
93207: ST_TO_ADDR
93208: LD_INT 3
93210: PUSH
93211: FOR_TO
93212: IFFALSE 93243
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
93214: LD_VAR 0 1
93218: PPUSH
93219: CALL_OW 250
93223: PPUSH
93224: LD_VAR 0 1
93228: PPUSH
93229: CALL_OW 251
93233: PPUSH
93234: LD_INT 1
93236: PPUSH
93237: CALL_OW 453
93241: GO 93211
93243: POP
93244: POP
// end ;
93245: LD_VAR 0 2
93249: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
93250: LD_INT 0
93252: PPUSH
93253: PPUSH
93254: PPUSH
93255: PPUSH
93256: PPUSH
93257: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
93258: LD_VAR 0 1
93262: NOT
93263: PUSH
93264: LD_VAR 0 2
93268: NOT
93269: OR
93270: PUSH
93271: LD_VAR 0 1
93275: PPUSH
93276: CALL_OW 314
93280: OR
93281: IFFALSE 93285
// exit ;
93283: GO 93726
// x := GetX ( enemy_unit ) ;
93285: LD_ADDR_VAR 0 7
93289: PUSH
93290: LD_VAR 0 2
93294: PPUSH
93295: CALL_OW 250
93299: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
93300: LD_ADDR_VAR 0 8
93304: PUSH
93305: LD_VAR 0 2
93309: PPUSH
93310: CALL_OW 251
93314: ST_TO_ADDR
// if not x or not y then
93315: LD_VAR 0 7
93319: NOT
93320: PUSH
93321: LD_VAR 0 8
93325: NOT
93326: OR
93327: IFFALSE 93331
// exit ;
93329: GO 93726
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
93331: LD_ADDR_VAR 0 6
93335: PUSH
93336: LD_VAR 0 7
93340: PPUSH
93341: LD_INT 0
93343: PPUSH
93344: LD_INT 4
93346: PPUSH
93347: CALL_OW 272
93351: PUSH
93352: LD_VAR 0 8
93356: PPUSH
93357: LD_INT 0
93359: PPUSH
93360: LD_INT 4
93362: PPUSH
93363: CALL_OW 273
93367: PUSH
93368: EMPTY
93369: LIST
93370: LIST
93371: PUSH
93372: LD_VAR 0 7
93376: PPUSH
93377: LD_INT 1
93379: PPUSH
93380: LD_INT 4
93382: PPUSH
93383: CALL_OW 272
93387: PUSH
93388: LD_VAR 0 8
93392: PPUSH
93393: LD_INT 1
93395: PPUSH
93396: LD_INT 4
93398: PPUSH
93399: CALL_OW 273
93403: PUSH
93404: EMPTY
93405: LIST
93406: LIST
93407: PUSH
93408: LD_VAR 0 7
93412: PPUSH
93413: LD_INT 2
93415: PPUSH
93416: LD_INT 4
93418: PPUSH
93419: CALL_OW 272
93423: PUSH
93424: LD_VAR 0 8
93428: PPUSH
93429: LD_INT 2
93431: PPUSH
93432: LD_INT 4
93434: PPUSH
93435: CALL_OW 273
93439: PUSH
93440: EMPTY
93441: LIST
93442: LIST
93443: PUSH
93444: LD_VAR 0 7
93448: PPUSH
93449: LD_INT 3
93451: PPUSH
93452: LD_INT 4
93454: PPUSH
93455: CALL_OW 272
93459: PUSH
93460: LD_VAR 0 8
93464: PPUSH
93465: LD_INT 3
93467: PPUSH
93468: LD_INT 4
93470: PPUSH
93471: CALL_OW 273
93475: PUSH
93476: EMPTY
93477: LIST
93478: LIST
93479: PUSH
93480: LD_VAR 0 7
93484: PPUSH
93485: LD_INT 4
93487: PPUSH
93488: LD_INT 4
93490: PPUSH
93491: CALL_OW 272
93495: PUSH
93496: LD_VAR 0 8
93500: PPUSH
93501: LD_INT 4
93503: PPUSH
93504: LD_INT 4
93506: PPUSH
93507: CALL_OW 273
93511: PUSH
93512: EMPTY
93513: LIST
93514: LIST
93515: PUSH
93516: LD_VAR 0 7
93520: PPUSH
93521: LD_INT 5
93523: PPUSH
93524: LD_INT 4
93526: PPUSH
93527: CALL_OW 272
93531: PUSH
93532: LD_VAR 0 8
93536: PPUSH
93537: LD_INT 5
93539: PPUSH
93540: LD_INT 4
93542: PPUSH
93543: CALL_OW 273
93547: PUSH
93548: EMPTY
93549: LIST
93550: LIST
93551: PUSH
93552: EMPTY
93553: LIST
93554: LIST
93555: LIST
93556: LIST
93557: LIST
93558: LIST
93559: ST_TO_ADDR
// for i = tmp downto 1 do
93560: LD_ADDR_VAR 0 4
93564: PUSH
93565: DOUBLE
93566: LD_VAR 0 6
93570: INC
93571: ST_TO_ADDR
93572: LD_INT 1
93574: PUSH
93575: FOR_DOWNTO
93576: IFFALSE 93677
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
93578: LD_VAR 0 6
93582: PUSH
93583: LD_VAR 0 4
93587: ARRAY
93588: PUSH
93589: LD_INT 1
93591: ARRAY
93592: PPUSH
93593: LD_VAR 0 6
93597: PUSH
93598: LD_VAR 0 4
93602: ARRAY
93603: PUSH
93604: LD_INT 2
93606: ARRAY
93607: PPUSH
93608: CALL_OW 488
93612: NOT
93613: PUSH
93614: LD_VAR 0 6
93618: PUSH
93619: LD_VAR 0 4
93623: ARRAY
93624: PUSH
93625: LD_INT 1
93627: ARRAY
93628: PPUSH
93629: LD_VAR 0 6
93633: PUSH
93634: LD_VAR 0 4
93638: ARRAY
93639: PUSH
93640: LD_INT 2
93642: ARRAY
93643: PPUSH
93644: CALL_OW 428
93648: PUSH
93649: LD_INT 0
93651: NONEQUAL
93652: OR
93653: IFFALSE 93675
// tmp := Delete ( tmp , i ) ;
93655: LD_ADDR_VAR 0 6
93659: PUSH
93660: LD_VAR 0 6
93664: PPUSH
93665: LD_VAR 0 4
93669: PPUSH
93670: CALL_OW 3
93674: ST_TO_ADDR
93675: GO 93575
93677: POP
93678: POP
// j := GetClosestHex ( unit , tmp ) ;
93679: LD_ADDR_VAR 0 5
93683: PUSH
93684: LD_VAR 0 1
93688: PPUSH
93689: LD_VAR 0 6
93693: PPUSH
93694: CALL 92979 0 2
93698: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
93699: LD_VAR 0 1
93703: PPUSH
93704: LD_VAR 0 5
93708: PUSH
93709: LD_INT 1
93711: ARRAY
93712: PPUSH
93713: LD_VAR 0 5
93717: PUSH
93718: LD_INT 2
93720: ARRAY
93721: PPUSH
93722: CALL_OW 111
// end ;
93726: LD_VAR 0 3
93730: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
93731: LD_INT 0
93733: PPUSH
93734: PPUSH
93735: PPUSH
// uc_side = 0 ;
93736: LD_ADDR_OWVAR 20
93740: PUSH
93741: LD_INT 0
93743: ST_TO_ADDR
// uc_nation = 0 ;
93744: LD_ADDR_OWVAR 21
93748: PUSH
93749: LD_INT 0
93751: ST_TO_ADDR
// InitHc ;
93752: CALL_OW 19
// InitVc ;
93756: CALL_OW 20
// if mastodonts then
93760: LD_VAR 0 6
93764: IFFALSE 93831
// for i = 1 to mastodonts do
93766: LD_ADDR_VAR 0 11
93770: PUSH
93771: DOUBLE
93772: LD_INT 1
93774: DEC
93775: ST_TO_ADDR
93776: LD_VAR 0 6
93780: PUSH
93781: FOR_TO
93782: IFFALSE 93829
// begin vc_chassis := 31 ;
93784: LD_ADDR_OWVAR 37
93788: PUSH
93789: LD_INT 31
93791: ST_TO_ADDR
// vc_control := control_rider ;
93792: LD_ADDR_OWVAR 38
93796: PUSH
93797: LD_INT 4
93799: ST_TO_ADDR
// animal := CreateVehicle ;
93800: LD_ADDR_VAR 0 12
93804: PUSH
93805: CALL_OW 45
93809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
93810: LD_VAR 0 12
93814: PPUSH
93815: LD_VAR 0 8
93819: PPUSH
93820: LD_INT 0
93822: PPUSH
93823: CALL 100537 0 3
// end ;
93827: GO 93781
93829: POP
93830: POP
// if horses then
93831: LD_VAR 0 5
93835: IFFALSE 93902
// for i = 1 to horses do
93837: LD_ADDR_VAR 0 11
93841: PUSH
93842: DOUBLE
93843: LD_INT 1
93845: DEC
93846: ST_TO_ADDR
93847: LD_VAR 0 5
93851: PUSH
93852: FOR_TO
93853: IFFALSE 93900
// begin hc_class := 21 ;
93855: LD_ADDR_OWVAR 28
93859: PUSH
93860: LD_INT 21
93862: ST_TO_ADDR
// hc_gallery :=  ;
93863: LD_ADDR_OWVAR 33
93867: PUSH
93868: LD_STRING 
93870: ST_TO_ADDR
// animal := CreateHuman ;
93871: LD_ADDR_VAR 0 12
93875: PUSH
93876: CALL_OW 44
93880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
93881: LD_VAR 0 12
93885: PPUSH
93886: LD_VAR 0 8
93890: PPUSH
93891: LD_INT 0
93893: PPUSH
93894: CALL 100537 0 3
// end ;
93898: GO 93852
93900: POP
93901: POP
// if birds then
93902: LD_VAR 0 1
93906: IFFALSE 93973
// for i = 1 to birds do
93908: LD_ADDR_VAR 0 11
93912: PUSH
93913: DOUBLE
93914: LD_INT 1
93916: DEC
93917: ST_TO_ADDR
93918: LD_VAR 0 1
93922: PUSH
93923: FOR_TO
93924: IFFALSE 93971
// begin hc_class = 18 ;
93926: LD_ADDR_OWVAR 28
93930: PUSH
93931: LD_INT 18
93933: ST_TO_ADDR
// hc_gallery =  ;
93934: LD_ADDR_OWVAR 33
93938: PUSH
93939: LD_STRING 
93941: ST_TO_ADDR
// animal := CreateHuman ;
93942: LD_ADDR_VAR 0 12
93946: PUSH
93947: CALL_OW 44
93951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
93952: LD_VAR 0 12
93956: PPUSH
93957: LD_VAR 0 8
93961: PPUSH
93962: LD_INT 0
93964: PPUSH
93965: CALL 100537 0 3
// end ;
93969: GO 93923
93971: POP
93972: POP
// if tigers then
93973: LD_VAR 0 2
93977: IFFALSE 94061
// for i = 1 to tigers do
93979: LD_ADDR_VAR 0 11
93983: PUSH
93984: DOUBLE
93985: LD_INT 1
93987: DEC
93988: ST_TO_ADDR
93989: LD_VAR 0 2
93993: PUSH
93994: FOR_TO
93995: IFFALSE 94059
// begin hc_class = class_tiger ;
93997: LD_ADDR_OWVAR 28
94001: PUSH
94002: LD_INT 14
94004: ST_TO_ADDR
// hc_gallery =  ;
94005: LD_ADDR_OWVAR 33
94009: PUSH
94010: LD_STRING 
94012: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
94013: LD_ADDR_OWVAR 35
94017: PUSH
94018: LD_INT 7
94020: NEG
94021: PPUSH
94022: LD_INT 7
94024: PPUSH
94025: CALL_OW 12
94029: ST_TO_ADDR
// animal := CreateHuman ;
94030: LD_ADDR_VAR 0 12
94034: PUSH
94035: CALL_OW 44
94039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94040: LD_VAR 0 12
94044: PPUSH
94045: LD_VAR 0 8
94049: PPUSH
94050: LD_INT 0
94052: PPUSH
94053: CALL 100537 0 3
// end ;
94057: GO 93994
94059: POP
94060: POP
// if apemans then
94061: LD_VAR 0 3
94065: IFFALSE 94188
// for i = 1 to apemans do
94067: LD_ADDR_VAR 0 11
94071: PUSH
94072: DOUBLE
94073: LD_INT 1
94075: DEC
94076: ST_TO_ADDR
94077: LD_VAR 0 3
94081: PUSH
94082: FOR_TO
94083: IFFALSE 94186
// begin hc_class = class_apeman ;
94085: LD_ADDR_OWVAR 28
94089: PUSH
94090: LD_INT 12
94092: ST_TO_ADDR
// hc_gallery =  ;
94093: LD_ADDR_OWVAR 33
94097: PUSH
94098: LD_STRING 
94100: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
94101: LD_ADDR_OWVAR 35
94105: PUSH
94106: LD_INT 5
94108: NEG
94109: PPUSH
94110: LD_INT 5
94112: PPUSH
94113: CALL_OW 12
94117: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
94118: LD_ADDR_OWVAR 31
94122: PUSH
94123: LD_INT 1
94125: PPUSH
94126: LD_INT 3
94128: PPUSH
94129: CALL_OW 12
94133: PUSH
94134: LD_INT 1
94136: PPUSH
94137: LD_INT 3
94139: PPUSH
94140: CALL_OW 12
94144: PUSH
94145: LD_INT 0
94147: PUSH
94148: LD_INT 0
94150: PUSH
94151: EMPTY
94152: LIST
94153: LIST
94154: LIST
94155: LIST
94156: ST_TO_ADDR
// animal := CreateHuman ;
94157: LD_ADDR_VAR 0 12
94161: PUSH
94162: CALL_OW 44
94166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94167: LD_VAR 0 12
94171: PPUSH
94172: LD_VAR 0 8
94176: PPUSH
94177: LD_INT 0
94179: PPUSH
94180: CALL 100537 0 3
// end ;
94184: GO 94082
94186: POP
94187: POP
// if enchidnas then
94188: LD_VAR 0 4
94192: IFFALSE 94259
// for i = 1 to enchidnas do
94194: LD_ADDR_VAR 0 11
94198: PUSH
94199: DOUBLE
94200: LD_INT 1
94202: DEC
94203: ST_TO_ADDR
94204: LD_VAR 0 4
94208: PUSH
94209: FOR_TO
94210: IFFALSE 94257
// begin hc_class = 13 ;
94212: LD_ADDR_OWVAR 28
94216: PUSH
94217: LD_INT 13
94219: ST_TO_ADDR
// hc_gallery =  ;
94220: LD_ADDR_OWVAR 33
94224: PUSH
94225: LD_STRING 
94227: ST_TO_ADDR
// animal := CreateHuman ;
94228: LD_ADDR_VAR 0 12
94232: PUSH
94233: CALL_OW 44
94237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94238: LD_VAR 0 12
94242: PPUSH
94243: LD_VAR 0 8
94247: PPUSH
94248: LD_INT 0
94250: PPUSH
94251: CALL 100537 0 3
// end ;
94255: GO 94209
94257: POP
94258: POP
// if fishes then
94259: LD_VAR 0 7
94263: IFFALSE 94330
// for i = 1 to fishes do
94265: LD_ADDR_VAR 0 11
94269: PUSH
94270: DOUBLE
94271: LD_INT 1
94273: DEC
94274: ST_TO_ADDR
94275: LD_VAR 0 7
94279: PUSH
94280: FOR_TO
94281: IFFALSE 94328
// begin hc_class = 20 ;
94283: LD_ADDR_OWVAR 28
94287: PUSH
94288: LD_INT 20
94290: ST_TO_ADDR
// hc_gallery =  ;
94291: LD_ADDR_OWVAR 33
94295: PUSH
94296: LD_STRING 
94298: ST_TO_ADDR
// animal := CreateHuman ;
94299: LD_ADDR_VAR 0 12
94303: PUSH
94304: CALL_OW 44
94308: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
94309: LD_VAR 0 12
94313: PPUSH
94314: LD_VAR 0 9
94318: PPUSH
94319: LD_INT 0
94321: PPUSH
94322: CALL 100537 0 3
// end ;
94326: GO 94280
94328: POP
94329: POP
// end ;
94330: LD_VAR 0 10
94334: RET
// export function WantHeal ( sci , unit ) ; begin
94335: LD_INT 0
94337: PPUSH
// if GetTaskList ( sci ) > 0 then
94338: LD_VAR 0 1
94342: PPUSH
94343: CALL_OW 437
94347: PUSH
94348: LD_INT 0
94350: GREATER
94351: IFFALSE 94421
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
94353: LD_VAR 0 1
94357: PPUSH
94358: CALL_OW 437
94362: PUSH
94363: LD_INT 1
94365: ARRAY
94366: PUSH
94367: LD_INT 1
94369: ARRAY
94370: PUSH
94371: LD_STRING l
94373: EQUAL
94374: PUSH
94375: LD_VAR 0 1
94379: PPUSH
94380: CALL_OW 437
94384: PUSH
94385: LD_INT 1
94387: ARRAY
94388: PUSH
94389: LD_INT 4
94391: ARRAY
94392: PUSH
94393: LD_VAR 0 2
94397: EQUAL
94398: AND
94399: IFFALSE 94411
// result := true else
94401: LD_ADDR_VAR 0 3
94405: PUSH
94406: LD_INT 1
94408: ST_TO_ADDR
94409: GO 94419
// result := false ;
94411: LD_ADDR_VAR 0 3
94415: PUSH
94416: LD_INT 0
94418: ST_TO_ADDR
// end else
94419: GO 94429
// result := false ;
94421: LD_ADDR_VAR 0 3
94425: PUSH
94426: LD_INT 0
94428: ST_TO_ADDR
// end ;
94429: LD_VAR 0 3
94433: RET
// export function HealTarget ( sci ) ; begin
94434: LD_INT 0
94436: PPUSH
// if not sci then
94437: LD_VAR 0 1
94441: NOT
94442: IFFALSE 94446
// exit ;
94444: GO 94511
// result := 0 ;
94446: LD_ADDR_VAR 0 2
94450: PUSH
94451: LD_INT 0
94453: ST_TO_ADDR
// if GetTaskList ( sci ) then
94454: LD_VAR 0 1
94458: PPUSH
94459: CALL_OW 437
94463: IFFALSE 94511
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
94465: LD_VAR 0 1
94469: PPUSH
94470: CALL_OW 437
94474: PUSH
94475: LD_INT 1
94477: ARRAY
94478: PUSH
94479: LD_INT 1
94481: ARRAY
94482: PUSH
94483: LD_STRING l
94485: EQUAL
94486: IFFALSE 94511
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
94488: LD_ADDR_VAR 0 2
94492: PUSH
94493: LD_VAR 0 1
94497: PPUSH
94498: CALL_OW 437
94502: PUSH
94503: LD_INT 1
94505: ARRAY
94506: PUSH
94507: LD_INT 4
94509: ARRAY
94510: ST_TO_ADDR
// end ;
94511: LD_VAR 0 2
94515: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
94516: LD_INT 0
94518: PPUSH
94519: PPUSH
94520: PPUSH
94521: PPUSH
94522: PPUSH
94523: PPUSH
94524: PPUSH
94525: PPUSH
94526: PPUSH
94527: PPUSH
94528: PPUSH
94529: PPUSH
94530: PPUSH
94531: PPUSH
94532: PPUSH
94533: PPUSH
94534: PPUSH
94535: PPUSH
94536: PPUSH
94537: PPUSH
94538: PPUSH
94539: PPUSH
94540: PPUSH
94541: PPUSH
94542: PPUSH
94543: PPUSH
94544: PPUSH
94545: PPUSH
94546: PPUSH
94547: PPUSH
94548: PPUSH
94549: PPUSH
94550: PPUSH
// if not list then
94551: LD_VAR 0 1
94555: NOT
94556: IFFALSE 94560
// exit ;
94558: GO 99148
// base := list [ 1 ] ;
94560: LD_ADDR_VAR 0 3
94564: PUSH
94565: LD_VAR 0 1
94569: PUSH
94570: LD_INT 1
94572: ARRAY
94573: ST_TO_ADDR
// group := list [ 2 ] ;
94574: LD_ADDR_VAR 0 4
94578: PUSH
94579: LD_VAR 0 1
94583: PUSH
94584: LD_INT 2
94586: ARRAY
94587: ST_TO_ADDR
// path := list [ 3 ] ;
94588: LD_ADDR_VAR 0 5
94592: PUSH
94593: LD_VAR 0 1
94597: PUSH
94598: LD_INT 3
94600: ARRAY
94601: ST_TO_ADDR
// flags := list [ 4 ] ;
94602: LD_ADDR_VAR 0 6
94606: PUSH
94607: LD_VAR 0 1
94611: PUSH
94612: LD_INT 4
94614: ARRAY
94615: ST_TO_ADDR
// mined := [ ] ;
94616: LD_ADDR_VAR 0 27
94620: PUSH
94621: EMPTY
94622: ST_TO_ADDR
// bombed := [ ] ;
94623: LD_ADDR_VAR 0 28
94627: PUSH
94628: EMPTY
94629: ST_TO_ADDR
// healers := [ ] ;
94630: LD_ADDR_VAR 0 31
94634: PUSH
94635: EMPTY
94636: ST_TO_ADDR
// to_heal := [ ] ;
94637: LD_ADDR_VAR 0 30
94641: PUSH
94642: EMPTY
94643: ST_TO_ADDR
// repairs := [ ] ;
94644: LD_ADDR_VAR 0 33
94648: PUSH
94649: EMPTY
94650: ST_TO_ADDR
// to_repair := [ ] ;
94651: LD_ADDR_VAR 0 32
94655: PUSH
94656: EMPTY
94657: ST_TO_ADDR
// if not group or not path then
94658: LD_VAR 0 4
94662: NOT
94663: PUSH
94664: LD_VAR 0 5
94668: NOT
94669: OR
94670: IFFALSE 94674
// exit ;
94672: GO 99148
// if flags then
94674: LD_VAR 0 6
94678: IFFALSE 94822
// begin f_ignore_area := flags [ 1 ] ;
94680: LD_ADDR_VAR 0 17
94684: PUSH
94685: LD_VAR 0 6
94689: PUSH
94690: LD_INT 1
94692: ARRAY
94693: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
94694: LD_ADDR_VAR 0 18
94698: PUSH
94699: LD_VAR 0 6
94703: PUSH
94704: LD_INT 2
94706: ARRAY
94707: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
94708: LD_ADDR_VAR 0 19
94712: PUSH
94713: LD_VAR 0 6
94717: PUSH
94718: LD_INT 3
94720: ARRAY
94721: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
94722: LD_ADDR_VAR 0 20
94726: PUSH
94727: LD_VAR 0 6
94731: PUSH
94732: LD_INT 4
94734: ARRAY
94735: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
94736: LD_ADDR_VAR 0 21
94740: PUSH
94741: LD_VAR 0 6
94745: PUSH
94746: LD_INT 5
94748: ARRAY
94749: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
94750: LD_ADDR_VAR 0 22
94754: PUSH
94755: LD_VAR 0 6
94759: PUSH
94760: LD_INT 6
94762: ARRAY
94763: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
94764: LD_ADDR_VAR 0 23
94768: PUSH
94769: LD_VAR 0 6
94773: PUSH
94774: LD_INT 7
94776: ARRAY
94777: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
94778: LD_ADDR_VAR 0 24
94782: PUSH
94783: LD_VAR 0 6
94787: PUSH
94788: LD_INT 8
94790: ARRAY
94791: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
94792: LD_ADDR_VAR 0 25
94796: PUSH
94797: LD_VAR 0 6
94801: PUSH
94802: LD_INT 9
94804: ARRAY
94805: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
94806: LD_ADDR_VAR 0 26
94810: PUSH
94811: LD_VAR 0 6
94815: PUSH
94816: LD_INT 10
94818: ARRAY
94819: ST_TO_ADDR
// end else
94820: GO 94902
// begin f_ignore_area := false ;
94822: LD_ADDR_VAR 0 17
94826: PUSH
94827: LD_INT 0
94829: ST_TO_ADDR
// f_capture := false ;
94830: LD_ADDR_VAR 0 18
94834: PUSH
94835: LD_INT 0
94837: ST_TO_ADDR
// f_ignore_civ := false ;
94838: LD_ADDR_VAR 0 19
94842: PUSH
94843: LD_INT 0
94845: ST_TO_ADDR
// f_murder := false ;
94846: LD_ADDR_VAR 0 20
94850: PUSH
94851: LD_INT 0
94853: ST_TO_ADDR
// f_mines := false ;
94854: LD_ADDR_VAR 0 21
94858: PUSH
94859: LD_INT 0
94861: ST_TO_ADDR
// f_repair := false ;
94862: LD_ADDR_VAR 0 22
94866: PUSH
94867: LD_INT 0
94869: ST_TO_ADDR
// f_heal := false ;
94870: LD_ADDR_VAR 0 23
94874: PUSH
94875: LD_INT 0
94877: ST_TO_ADDR
// f_spacetime := false ;
94878: LD_ADDR_VAR 0 24
94882: PUSH
94883: LD_INT 0
94885: ST_TO_ADDR
// f_attack_depot := false ;
94886: LD_ADDR_VAR 0 25
94890: PUSH
94891: LD_INT 0
94893: ST_TO_ADDR
// f_crawl := false ;
94894: LD_ADDR_VAR 0 26
94898: PUSH
94899: LD_INT 0
94901: ST_TO_ADDR
// end ; if f_heal then
94902: LD_VAR 0 23
94906: IFFALSE 94933
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
94908: LD_ADDR_VAR 0 31
94912: PUSH
94913: LD_VAR 0 4
94917: PPUSH
94918: LD_INT 25
94920: PUSH
94921: LD_INT 4
94923: PUSH
94924: EMPTY
94925: LIST
94926: LIST
94927: PPUSH
94928: CALL_OW 72
94932: ST_TO_ADDR
// if f_repair then
94933: LD_VAR 0 22
94937: IFFALSE 94964
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
94939: LD_ADDR_VAR 0 33
94943: PUSH
94944: LD_VAR 0 4
94948: PPUSH
94949: LD_INT 25
94951: PUSH
94952: LD_INT 3
94954: PUSH
94955: EMPTY
94956: LIST
94957: LIST
94958: PPUSH
94959: CALL_OW 72
94963: ST_TO_ADDR
// units_path := [ ] ;
94964: LD_ADDR_VAR 0 16
94968: PUSH
94969: EMPTY
94970: ST_TO_ADDR
// for i = 1 to group do
94971: LD_ADDR_VAR 0 7
94975: PUSH
94976: DOUBLE
94977: LD_INT 1
94979: DEC
94980: ST_TO_ADDR
94981: LD_VAR 0 4
94985: PUSH
94986: FOR_TO
94987: IFFALSE 95016
// units_path := Replace ( units_path , i , path ) ;
94989: LD_ADDR_VAR 0 16
94993: PUSH
94994: LD_VAR 0 16
94998: PPUSH
94999: LD_VAR 0 7
95003: PPUSH
95004: LD_VAR 0 5
95008: PPUSH
95009: CALL_OW 1
95013: ST_TO_ADDR
95014: GO 94986
95016: POP
95017: POP
// repeat for i = group downto 1 do
95018: LD_ADDR_VAR 0 7
95022: PUSH
95023: DOUBLE
95024: LD_VAR 0 4
95028: INC
95029: ST_TO_ADDR
95030: LD_INT 1
95032: PUSH
95033: FOR_DOWNTO
95034: IFFALSE 99130
// begin wait ( 5 ) ;
95036: LD_INT 5
95038: PPUSH
95039: CALL_OW 67
// tmp := [ ] ;
95043: LD_ADDR_VAR 0 14
95047: PUSH
95048: EMPTY
95049: ST_TO_ADDR
// attacking := false ;
95050: LD_ADDR_VAR 0 29
95054: PUSH
95055: LD_INT 0
95057: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
95058: LD_VAR 0 4
95062: PUSH
95063: LD_VAR 0 7
95067: ARRAY
95068: PPUSH
95069: CALL_OW 301
95073: PUSH
95074: LD_VAR 0 4
95078: PUSH
95079: LD_VAR 0 7
95083: ARRAY
95084: NOT
95085: OR
95086: IFFALSE 95195
// begin if GetType ( group [ i ] ) = unit_human then
95088: LD_VAR 0 4
95092: PUSH
95093: LD_VAR 0 7
95097: ARRAY
95098: PPUSH
95099: CALL_OW 247
95103: PUSH
95104: LD_INT 1
95106: EQUAL
95107: IFFALSE 95153
// begin to_heal := to_heal diff group [ i ] ;
95109: LD_ADDR_VAR 0 30
95113: PUSH
95114: LD_VAR 0 30
95118: PUSH
95119: LD_VAR 0 4
95123: PUSH
95124: LD_VAR 0 7
95128: ARRAY
95129: DIFF
95130: ST_TO_ADDR
// healers := healers diff group [ i ] ;
95131: LD_ADDR_VAR 0 31
95135: PUSH
95136: LD_VAR 0 31
95140: PUSH
95141: LD_VAR 0 4
95145: PUSH
95146: LD_VAR 0 7
95150: ARRAY
95151: DIFF
95152: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
95153: LD_ADDR_VAR 0 4
95157: PUSH
95158: LD_VAR 0 4
95162: PPUSH
95163: LD_VAR 0 7
95167: PPUSH
95168: CALL_OW 3
95172: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
95173: LD_ADDR_VAR 0 16
95177: PUSH
95178: LD_VAR 0 16
95182: PPUSH
95183: LD_VAR 0 7
95187: PPUSH
95188: CALL_OW 3
95192: ST_TO_ADDR
// continue ;
95193: GO 95033
// end ; if f_repair then
95195: LD_VAR 0 22
95199: IFFALSE 95688
// begin if GetType ( group [ i ] ) = unit_vehicle then
95201: LD_VAR 0 4
95205: PUSH
95206: LD_VAR 0 7
95210: ARRAY
95211: PPUSH
95212: CALL_OW 247
95216: PUSH
95217: LD_INT 2
95219: EQUAL
95220: IFFALSE 95410
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
95222: LD_VAR 0 4
95226: PUSH
95227: LD_VAR 0 7
95231: ARRAY
95232: PPUSH
95233: CALL_OW 256
95237: PUSH
95238: LD_INT 700
95240: LESS
95241: PUSH
95242: LD_VAR 0 4
95246: PUSH
95247: LD_VAR 0 7
95251: ARRAY
95252: PUSH
95253: LD_VAR 0 32
95257: IN
95258: NOT
95259: AND
95260: IFFALSE 95284
// to_repair := to_repair union group [ i ] ;
95262: LD_ADDR_VAR 0 32
95266: PUSH
95267: LD_VAR 0 32
95271: PUSH
95272: LD_VAR 0 4
95276: PUSH
95277: LD_VAR 0 7
95281: ARRAY
95282: UNION
95283: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
95284: LD_VAR 0 4
95288: PUSH
95289: LD_VAR 0 7
95293: ARRAY
95294: PPUSH
95295: CALL_OW 256
95299: PUSH
95300: LD_INT 1000
95302: EQUAL
95303: PUSH
95304: LD_VAR 0 4
95308: PUSH
95309: LD_VAR 0 7
95313: ARRAY
95314: PUSH
95315: LD_VAR 0 32
95319: IN
95320: AND
95321: IFFALSE 95345
// to_repair := to_repair diff group [ i ] ;
95323: LD_ADDR_VAR 0 32
95327: PUSH
95328: LD_VAR 0 32
95332: PUSH
95333: LD_VAR 0 4
95337: PUSH
95338: LD_VAR 0 7
95342: ARRAY
95343: DIFF
95344: ST_TO_ADDR
// if group [ i ] in to_repair then
95345: LD_VAR 0 4
95349: PUSH
95350: LD_VAR 0 7
95354: ARRAY
95355: PUSH
95356: LD_VAR 0 32
95360: IN
95361: IFFALSE 95408
// begin if not IsInArea ( group [ i ] , f_repair ) then
95363: LD_VAR 0 4
95367: PUSH
95368: LD_VAR 0 7
95372: ARRAY
95373: PPUSH
95374: LD_VAR 0 22
95378: PPUSH
95379: CALL_OW 308
95383: NOT
95384: IFFALSE 95406
// ComMoveToArea ( group [ i ] , f_repair ) ;
95386: LD_VAR 0 4
95390: PUSH
95391: LD_VAR 0 7
95395: ARRAY
95396: PPUSH
95397: LD_VAR 0 22
95401: PPUSH
95402: CALL_OW 113
// continue ;
95406: GO 95033
// end ; end else
95408: GO 95688
// if group [ i ] in repairs then
95410: LD_VAR 0 4
95414: PUSH
95415: LD_VAR 0 7
95419: ARRAY
95420: PUSH
95421: LD_VAR 0 33
95425: IN
95426: IFFALSE 95688
// begin if IsInUnit ( group [ i ] ) then
95428: LD_VAR 0 4
95432: PUSH
95433: LD_VAR 0 7
95437: ARRAY
95438: PPUSH
95439: CALL_OW 310
95443: IFFALSE 95511
// begin z := IsInUnit ( group [ i ] ) ;
95445: LD_ADDR_VAR 0 13
95449: PUSH
95450: LD_VAR 0 4
95454: PUSH
95455: LD_VAR 0 7
95459: ARRAY
95460: PPUSH
95461: CALL_OW 310
95465: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
95466: LD_VAR 0 13
95470: PUSH
95471: LD_VAR 0 32
95475: IN
95476: PUSH
95477: LD_VAR 0 13
95481: PPUSH
95482: LD_VAR 0 22
95486: PPUSH
95487: CALL_OW 308
95491: AND
95492: IFFALSE 95509
// ComExitVehicle ( group [ i ] ) ;
95494: LD_VAR 0 4
95498: PUSH
95499: LD_VAR 0 7
95503: ARRAY
95504: PPUSH
95505: CALL_OW 121
// end else
95509: GO 95688
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
95511: LD_ADDR_VAR 0 13
95515: PUSH
95516: LD_VAR 0 4
95520: PPUSH
95521: LD_INT 95
95523: PUSH
95524: LD_VAR 0 22
95528: PUSH
95529: EMPTY
95530: LIST
95531: LIST
95532: PUSH
95533: LD_INT 58
95535: PUSH
95536: EMPTY
95537: LIST
95538: PUSH
95539: EMPTY
95540: LIST
95541: LIST
95542: PPUSH
95543: CALL_OW 72
95547: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
95548: LD_VAR 0 4
95552: PUSH
95553: LD_VAR 0 7
95557: ARRAY
95558: PPUSH
95559: CALL_OW 314
95563: NOT
95564: IFFALSE 95686
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
95566: LD_ADDR_VAR 0 10
95570: PUSH
95571: LD_VAR 0 13
95575: PPUSH
95576: LD_VAR 0 4
95580: PUSH
95581: LD_VAR 0 7
95585: ARRAY
95586: PPUSH
95587: CALL_OW 74
95591: ST_TO_ADDR
// if not x then
95592: LD_VAR 0 10
95596: NOT
95597: IFFALSE 95601
// continue ;
95599: GO 95033
// if GetLives ( x ) < 1000 then
95601: LD_VAR 0 10
95605: PPUSH
95606: CALL_OW 256
95610: PUSH
95611: LD_INT 1000
95613: LESS
95614: IFFALSE 95638
// ComRepairVehicle ( group [ i ] , x ) else
95616: LD_VAR 0 4
95620: PUSH
95621: LD_VAR 0 7
95625: ARRAY
95626: PPUSH
95627: LD_VAR 0 10
95631: PPUSH
95632: CALL_OW 129
95636: GO 95686
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
95638: LD_VAR 0 23
95642: PUSH
95643: LD_VAR 0 4
95647: PUSH
95648: LD_VAR 0 7
95652: ARRAY
95653: PPUSH
95654: CALL_OW 256
95658: PUSH
95659: LD_INT 1000
95661: LESS
95662: AND
95663: NOT
95664: IFFALSE 95686
// ComEnterUnit ( group [ i ] , x ) ;
95666: LD_VAR 0 4
95670: PUSH
95671: LD_VAR 0 7
95675: ARRAY
95676: PPUSH
95677: LD_VAR 0 10
95681: PPUSH
95682: CALL_OW 120
// end ; continue ;
95686: GO 95033
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
95688: LD_VAR 0 23
95692: PUSH
95693: LD_VAR 0 4
95697: PUSH
95698: LD_VAR 0 7
95702: ARRAY
95703: PPUSH
95704: CALL_OW 247
95708: PUSH
95709: LD_INT 1
95711: EQUAL
95712: AND
95713: IFFALSE 96191
// begin if group [ i ] in healers then
95715: LD_VAR 0 4
95719: PUSH
95720: LD_VAR 0 7
95724: ARRAY
95725: PUSH
95726: LD_VAR 0 31
95730: IN
95731: IFFALSE 96004
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
95733: LD_VAR 0 4
95737: PUSH
95738: LD_VAR 0 7
95742: ARRAY
95743: PPUSH
95744: LD_VAR 0 23
95748: PPUSH
95749: CALL_OW 308
95753: NOT
95754: PUSH
95755: LD_VAR 0 4
95759: PUSH
95760: LD_VAR 0 7
95764: ARRAY
95765: PPUSH
95766: CALL_OW 314
95770: NOT
95771: AND
95772: IFFALSE 95796
// ComMoveToArea ( group [ i ] , f_heal ) else
95774: LD_VAR 0 4
95778: PUSH
95779: LD_VAR 0 7
95783: ARRAY
95784: PPUSH
95785: LD_VAR 0 23
95789: PPUSH
95790: CALL_OW 113
95794: GO 96002
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
95796: LD_VAR 0 4
95800: PUSH
95801: LD_VAR 0 7
95805: ARRAY
95806: PPUSH
95807: CALL 94434 0 1
95811: PPUSH
95812: CALL_OW 256
95816: PUSH
95817: LD_INT 1000
95819: EQUAL
95820: IFFALSE 95839
// ComStop ( group [ i ] ) else
95822: LD_VAR 0 4
95826: PUSH
95827: LD_VAR 0 7
95831: ARRAY
95832: PPUSH
95833: CALL_OW 141
95837: GO 96002
// if not HasTask ( group [ i ] ) and to_heal then
95839: LD_VAR 0 4
95843: PUSH
95844: LD_VAR 0 7
95848: ARRAY
95849: PPUSH
95850: CALL_OW 314
95854: NOT
95855: PUSH
95856: LD_VAR 0 30
95860: AND
95861: IFFALSE 96002
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
95863: LD_ADDR_VAR 0 13
95867: PUSH
95868: LD_VAR 0 30
95872: PPUSH
95873: LD_INT 3
95875: PUSH
95876: LD_INT 54
95878: PUSH
95879: EMPTY
95880: LIST
95881: PUSH
95882: EMPTY
95883: LIST
95884: LIST
95885: PPUSH
95886: CALL_OW 72
95890: PPUSH
95891: LD_VAR 0 4
95895: PUSH
95896: LD_VAR 0 7
95900: ARRAY
95901: PPUSH
95902: CALL_OW 74
95906: ST_TO_ADDR
// if z then
95907: LD_VAR 0 13
95911: IFFALSE 96002
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
95913: LD_INT 91
95915: PUSH
95916: LD_VAR 0 13
95920: PUSH
95921: LD_INT 10
95923: PUSH
95924: EMPTY
95925: LIST
95926: LIST
95927: LIST
95928: PUSH
95929: LD_INT 81
95931: PUSH
95932: LD_VAR 0 13
95936: PPUSH
95937: CALL_OW 255
95941: PUSH
95942: EMPTY
95943: LIST
95944: LIST
95945: PUSH
95946: EMPTY
95947: LIST
95948: LIST
95949: PPUSH
95950: CALL_OW 69
95954: PUSH
95955: LD_INT 0
95957: EQUAL
95958: IFFALSE 95982
// ComHeal ( group [ i ] , z ) else
95960: LD_VAR 0 4
95964: PUSH
95965: LD_VAR 0 7
95969: ARRAY
95970: PPUSH
95971: LD_VAR 0 13
95975: PPUSH
95976: CALL_OW 128
95980: GO 96002
// ComMoveToArea ( group [ i ] , f_heal ) ;
95982: LD_VAR 0 4
95986: PUSH
95987: LD_VAR 0 7
95991: ARRAY
95992: PPUSH
95993: LD_VAR 0 23
95997: PPUSH
95998: CALL_OW 113
// end ; continue ;
96002: GO 95033
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
96004: LD_VAR 0 4
96008: PUSH
96009: LD_VAR 0 7
96013: ARRAY
96014: PPUSH
96015: CALL_OW 256
96019: PUSH
96020: LD_INT 700
96022: LESS
96023: PUSH
96024: LD_VAR 0 4
96028: PUSH
96029: LD_VAR 0 7
96033: ARRAY
96034: PUSH
96035: LD_VAR 0 30
96039: IN
96040: NOT
96041: AND
96042: IFFALSE 96066
// to_heal := to_heal union group [ i ] ;
96044: LD_ADDR_VAR 0 30
96048: PUSH
96049: LD_VAR 0 30
96053: PUSH
96054: LD_VAR 0 4
96058: PUSH
96059: LD_VAR 0 7
96063: ARRAY
96064: UNION
96065: ST_TO_ADDR
// if group [ i ] in to_heal then
96066: LD_VAR 0 4
96070: PUSH
96071: LD_VAR 0 7
96075: ARRAY
96076: PUSH
96077: LD_VAR 0 30
96081: IN
96082: IFFALSE 96191
// begin if GetLives ( group [ i ] ) = 1000 then
96084: LD_VAR 0 4
96088: PUSH
96089: LD_VAR 0 7
96093: ARRAY
96094: PPUSH
96095: CALL_OW 256
96099: PUSH
96100: LD_INT 1000
96102: EQUAL
96103: IFFALSE 96129
// to_heal := to_heal diff group [ i ] else
96105: LD_ADDR_VAR 0 30
96109: PUSH
96110: LD_VAR 0 30
96114: PUSH
96115: LD_VAR 0 4
96119: PUSH
96120: LD_VAR 0 7
96124: ARRAY
96125: DIFF
96126: ST_TO_ADDR
96127: GO 96191
// begin if not IsInArea ( group [ i ] , to_heal ) then
96129: LD_VAR 0 4
96133: PUSH
96134: LD_VAR 0 7
96138: ARRAY
96139: PPUSH
96140: LD_VAR 0 30
96144: PPUSH
96145: CALL_OW 308
96149: NOT
96150: IFFALSE 96174
// ComMoveToArea ( group [ i ] , f_heal ) else
96152: LD_VAR 0 4
96156: PUSH
96157: LD_VAR 0 7
96161: ARRAY
96162: PPUSH
96163: LD_VAR 0 23
96167: PPUSH
96168: CALL_OW 113
96172: GO 96189
// ComHold ( group [ i ] ) ;
96174: LD_VAR 0 4
96178: PUSH
96179: LD_VAR 0 7
96183: ARRAY
96184: PPUSH
96185: CALL_OW 140
// continue ;
96189: GO 95033
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
96191: LD_VAR 0 4
96195: PUSH
96196: LD_VAR 0 7
96200: ARRAY
96201: PPUSH
96202: LD_INT 10
96204: PPUSH
96205: CALL 92831 0 2
96209: NOT
96210: PUSH
96211: LD_VAR 0 16
96215: PUSH
96216: LD_VAR 0 7
96220: ARRAY
96221: PUSH
96222: EMPTY
96223: EQUAL
96224: NOT
96225: AND
96226: IFFALSE 96492
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
96228: LD_VAR 0 4
96232: PUSH
96233: LD_VAR 0 7
96237: ARRAY
96238: PPUSH
96239: CALL_OW 262
96243: PUSH
96244: LD_INT 1
96246: PUSH
96247: LD_INT 2
96249: PUSH
96250: EMPTY
96251: LIST
96252: LIST
96253: IN
96254: IFFALSE 96295
// if GetFuel ( group [ i ] ) < 10 then
96256: LD_VAR 0 4
96260: PUSH
96261: LD_VAR 0 7
96265: ARRAY
96266: PPUSH
96267: CALL_OW 261
96271: PUSH
96272: LD_INT 10
96274: LESS
96275: IFFALSE 96295
// SetFuel ( group [ i ] , 12 ) ;
96277: LD_VAR 0 4
96281: PUSH
96282: LD_VAR 0 7
96286: ARRAY
96287: PPUSH
96288: LD_INT 12
96290: PPUSH
96291: CALL_OW 240
// if units_path [ i ] then
96295: LD_VAR 0 16
96299: PUSH
96300: LD_VAR 0 7
96304: ARRAY
96305: IFFALSE 96490
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
96307: LD_VAR 0 4
96311: PUSH
96312: LD_VAR 0 7
96316: ARRAY
96317: PPUSH
96318: LD_VAR 0 16
96322: PUSH
96323: LD_VAR 0 7
96327: ARRAY
96328: PUSH
96329: LD_INT 1
96331: ARRAY
96332: PUSH
96333: LD_INT 1
96335: ARRAY
96336: PPUSH
96337: LD_VAR 0 16
96341: PUSH
96342: LD_VAR 0 7
96346: ARRAY
96347: PUSH
96348: LD_INT 1
96350: ARRAY
96351: PUSH
96352: LD_INT 2
96354: ARRAY
96355: PPUSH
96356: CALL_OW 297
96360: PUSH
96361: LD_INT 6
96363: GREATER
96364: IFFALSE 96439
// begin if not HasTask ( group [ i ] ) then
96366: LD_VAR 0 4
96370: PUSH
96371: LD_VAR 0 7
96375: ARRAY
96376: PPUSH
96377: CALL_OW 314
96381: NOT
96382: IFFALSE 96437
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
96384: LD_VAR 0 4
96388: PUSH
96389: LD_VAR 0 7
96393: ARRAY
96394: PPUSH
96395: LD_VAR 0 16
96399: PUSH
96400: LD_VAR 0 7
96404: ARRAY
96405: PUSH
96406: LD_INT 1
96408: ARRAY
96409: PUSH
96410: LD_INT 1
96412: ARRAY
96413: PPUSH
96414: LD_VAR 0 16
96418: PUSH
96419: LD_VAR 0 7
96423: ARRAY
96424: PUSH
96425: LD_INT 1
96427: ARRAY
96428: PUSH
96429: LD_INT 2
96431: ARRAY
96432: PPUSH
96433: CALL_OW 114
// end else
96437: GO 96490
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
96439: LD_ADDR_VAR 0 15
96443: PUSH
96444: LD_VAR 0 16
96448: PUSH
96449: LD_VAR 0 7
96453: ARRAY
96454: PPUSH
96455: LD_INT 1
96457: PPUSH
96458: CALL_OW 3
96462: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
96463: LD_ADDR_VAR 0 16
96467: PUSH
96468: LD_VAR 0 16
96472: PPUSH
96473: LD_VAR 0 7
96477: PPUSH
96478: LD_VAR 0 15
96482: PPUSH
96483: CALL_OW 1
96487: ST_TO_ADDR
// continue ;
96488: GO 95033
// end ; end ; end else
96490: GO 99128
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
96492: LD_ADDR_VAR 0 14
96496: PUSH
96497: LD_INT 81
96499: PUSH
96500: LD_VAR 0 4
96504: PUSH
96505: LD_VAR 0 7
96509: ARRAY
96510: PPUSH
96511: CALL_OW 255
96515: PUSH
96516: EMPTY
96517: LIST
96518: LIST
96519: PPUSH
96520: CALL_OW 69
96524: ST_TO_ADDR
// if not tmp then
96525: LD_VAR 0 14
96529: NOT
96530: IFFALSE 96534
// continue ;
96532: GO 95033
// if f_ignore_area then
96534: LD_VAR 0 17
96538: IFFALSE 96626
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
96540: LD_ADDR_VAR 0 15
96544: PUSH
96545: LD_VAR 0 14
96549: PPUSH
96550: LD_INT 3
96552: PUSH
96553: LD_INT 92
96555: PUSH
96556: LD_VAR 0 17
96560: PUSH
96561: LD_INT 1
96563: ARRAY
96564: PUSH
96565: LD_VAR 0 17
96569: PUSH
96570: LD_INT 2
96572: ARRAY
96573: PUSH
96574: LD_VAR 0 17
96578: PUSH
96579: LD_INT 3
96581: ARRAY
96582: PUSH
96583: EMPTY
96584: LIST
96585: LIST
96586: LIST
96587: LIST
96588: PUSH
96589: EMPTY
96590: LIST
96591: LIST
96592: PPUSH
96593: CALL_OW 72
96597: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
96598: LD_VAR 0 14
96602: PUSH
96603: LD_VAR 0 15
96607: DIFF
96608: IFFALSE 96626
// tmp := tmp diff tmp2 ;
96610: LD_ADDR_VAR 0 14
96614: PUSH
96615: LD_VAR 0 14
96619: PUSH
96620: LD_VAR 0 15
96624: DIFF
96625: ST_TO_ADDR
// end ; if not f_murder then
96626: LD_VAR 0 20
96630: NOT
96631: IFFALSE 96689
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
96633: LD_ADDR_VAR 0 15
96637: PUSH
96638: LD_VAR 0 14
96642: PPUSH
96643: LD_INT 3
96645: PUSH
96646: LD_INT 50
96648: PUSH
96649: EMPTY
96650: LIST
96651: PUSH
96652: EMPTY
96653: LIST
96654: LIST
96655: PPUSH
96656: CALL_OW 72
96660: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
96661: LD_VAR 0 14
96665: PUSH
96666: LD_VAR 0 15
96670: DIFF
96671: IFFALSE 96689
// tmp := tmp diff tmp2 ;
96673: LD_ADDR_VAR 0 14
96677: PUSH
96678: LD_VAR 0 14
96682: PUSH
96683: LD_VAR 0 15
96687: DIFF
96688: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
96689: LD_ADDR_VAR 0 14
96693: PUSH
96694: LD_VAR 0 4
96698: PUSH
96699: LD_VAR 0 7
96703: ARRAY
96704: PPUSH
96705: LD_VAR 0 14
96709: PPUSH
96710: LD_INT 1
96712: PPUSH
96713: LD_INT 1
96715: PPUSH
96716: CALL 66498 0 4
96720: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
96721: LD_VAR 0 4
96725: PUSH
96726: LD_VAR 0 7
96730: ARRAY
96731: PPUSH
96732: CALL_OW 257
96736: PUSH
96737: LD_INT 1
96739: EQUAL
96740: IFFALSE 97188
// begin if WantPlant ( group [ i ] ) then
96742: LD_VAR 0 4
96746: PUSH
96747: LD_VAR 0 7
96751: ARRAY
96752: PPUSH
96753: CALL 65999 0 1
96757: IFFALSE 96761
// continue ;
96759: GO 95033
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
96761: LD_VAR 0 18
96765: PUSH
96766: LD_VAR 0 4
96770: PUSH
96771: LD_VAR 0 7
96775: ARRAY
96776: PPUSH
96777: CALL_OW 310
96781: NOT
96782: AND
96783: PUSH
96784: LD_VAR 0 14
96788: PUSH
96789: LD_INT 1
96791: ARRAY
96792: PUSH
96793: LD_VAR 0 14
96797: PPUSH
96798: LD_INT 21
96800: PUSH
96801: LD_INT 2
96803: PUSH
96804: EMPTY
96805: LIST
96806: LIST
96807: PUSH
96808: LD_INT 58
96810: PUSH
96811: EMPTY
96812: LIST
96813: PUSH
96814: EMPTY
96815: LIST
96816: LIST
96817: PPUSH
96818: CALL_OW 72
96822: IN
96823: AND
96824: IFFALSE 96860
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
96826: LD_VAR 0 4
96830: PUSH
96831: LD_VAR 0 7
96835: ARRAY
96836: PPUSH
96837: LD_VAR 0 14
96841: PUSH
96842: LD_INT 1
96844: ARRAY
96845: PPUSH
96846: CALL_OW 120
// attacking := true ;
96850: LD_ADDR_VAR 0 29
96854: PUSH
96855: LD_INT 1
96857: ST_TO_ADDR
// continue ;
96858: GO 95033
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
96860: LD_VAR 0 26
96864: PUSH
96865: LD_VAR 0 4
96869: PUSH
96870: LD_VAR 0 7
96874: ARRAY
96875: PPUSH
96876: CALL_OW 257
96880: PUSH
96881: LD_INT 1
96883: EQUAL
96884: AND
96885: PUSH
96886: LD_VAR 0 4
96890: PUSH
96891: LD_VAR 0 7
96895: ARRAY
96896: PPUSH
96897: CALL_OW 256
96901: PUSH
96902: LD_INT 800
96904: LESS
96905: AND
96906: PUSH
96907: LD_VAR 0 4
96911: PUSH
96912: LD_VAR 0 7
96916: ARRAY
96917: PPUSH
96918: CALL_OW 318
96922: NOT
96923: AND
96924: IFFALSE 96941
// ComCrawl ( group [ i ] ) ;
96926: LD_VAR 0 4
96930: PUSH
96931: LD_VAR 0 7
96935: ARRAY
96936: PPUSH
96937: CALL_OW 137
// if f_mines then
96941: LD_VAR 0 21
96945: IFFALSE 97188
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
96947: LD_VAR 0 14
96951: PUSH
96952: LD_INT 1
96954: ARRAY
96955: PPUSH
96956: CALL_OW 247
96960: PUSH
96961: LD_INT 3
96963: EQUAL
96964: PUSH
96965: LD_VAR 0 14
96969: PUSH
96970: LD_INT 1
96972: ARRAY
96973: PUSH
96974: LD_VAR 0 27
96978: IN
96979: NOT
96980: AND
96981: IFFALSE 97188
// begin x := GetX ( tmp [ 1 ] ) ;
96983: LD_ADDR_VAR 0 10
96987: PUSH
96988: LD_VAR 0 14
96992: PUSH
96993: LD_INT 1
96995: ARRAY
96996: PPUSH
96997: CALL_OW 250
97001: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
97002: LD_ADDR_VAR 0 11
97006: PUSH
97007: LD_VAR 0 14
97011: PUSH
97012: LD_INT 1
97014: ARRAY
97015: PPUSH
97016: CALL_OW 251
97020: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
97021: LD_ADDR_VAR 0 12
97025: PUSH
97026: LD_VAR 0 4
97030: PUSH
97031: LD_VAR 0 7
97035: ARRAY
97036: PPUSH
97037: CALL 92916 0 1
97041: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
97042: LD_VAR 0 4
97046: PUSH
97047: LD_VAR 0 7
97051: ARRAY
97052: PPUSH
97053: LD_VAR 0 10
97057: PPUSH
97058: LD_VAR 0 11
97062: PPUSH
97063: LD_VAR 0 14
97067: PUSH
97068: LD_INT 1
97070: ARRAY
97071: PPUSH
97072: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
97076: LD_VAR 0 4
97080: PUSH
97081: LD_VAR 0 7
97085: ARRAY
97086: PPUSH
97087: LD_VAR 0 10
97091: PPUSH
97092: LD_VAR 0 12
97096: PPUSH
97097: LD_INT 7
97099: PPUSH
97100: CALL_OW 272
97104: PPUSH
97105: LD_VAR 0 11
97109: PPUSH
97110: LD_VAR 0 12
97114: PPUSH
97115: LD_INT 7
97117: PPUSH
97118: CALL_OW 273
97122: PPUSH
97123: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
97127: LD_VAR 0 4
97131: PUSH
97132: LD_VAR 0 7
97136: ARRAY
97137: PPUSH
97138: LD_INT 71
97140: PPUSH
97141: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
97145: LD_ADDR_VAR 0 27
97149: PUSH
97150: LD_VAR 0 27
97154: PPUSH
97155: LD_VAR 0 27
97159: PUSH
97160: LD_INT 1
97162: PLUS
97163: PPUSH
97164: LD_VAR 0 14
97168: PUSH
97169: LD_INT 1
97171: ARRAY
97172: PPUSH
97173: CALL_OW 1
97177: ST_TO_ADDR
// attacking := true ;
97178: LD_ADDR_VAR 0 29
97182: PUSH
97183: LD_INT 1
97185: ST_TO_ADDR
// continue ;
97186: GO 95033
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
97188: LD_VAR 0 4
97192: PUSH
97193: LD_VAR 0 7
97197: ARRAY
97198: PPUSH
97199: CALL_OW 257
97203: PUSH
97204: LD_INT 17
97206: EQUAL
97207: PUSH
97208: LD_VAR 0 4
97212: PUSH
97213: LD_VAR 0 7
97217: ARRAY
97218: PPUSH
97219: CALL_OW 110
97223: PUSH
97224: LD_INT 71
97226: EQUAL
97227: NOT
97228: AND
97229: IFFALSE 97375
// begin attacking := false ;
97231: LD_ADDR_VAR 0 29
97235: PUSH
97236: LD_INT 0
97238: ST_TO_ADDR
// k := 5 ;
97239: LD_ADDR_VAR 0 9
97243: PUSH
97244: LD_INT 5
97246: ST_TO_ADDR
// if tmp < k then
97247: LD_VAR 0 14
97251: PUSH
97252: LD_VAR 0 9
97256: LESS
97257: IFFALSE 97269
// k := tmp ;
97259: LD_ADDR_VAR 0 9
97263: PUSH
97264: LD_VAR 0 14
97268: ST_TO_ADDR
// for j = 1 to k do
97269: LD_ADDR_VAR 0 8
97273: PUSH
97274: DOUBLE
97275: LD_INT 1
97277: DEC
97278: ST_TO_ADDR
97279: LD_VAR 0 9
97283: PUSH
97284: FOR_TO
97285: IFFALSE 97373
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
97287: LD_VAR 0 14
97291: PUSH
97292: LD_VAR 0 8
97296: ARRAY
97297: PUSH
97298: LD_VAR 0 14
97302: PPUSH
97303: LD_INT 58
97305: PUSH
97306: EMPTY
97307: LIST
97308: PPUSH
97309: CALL_OW 72
97313: IN
97314: NOT
97315: IFFALSE 97371
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
97317: LD_VAR 0 4
97321: PUSH
97322: LD_VAR 0 7
97326: ARRAY
97327: PPUSH
97328: LD_VAR 0 14
97332: PUSH
97333: LD_VAR 0 8
97337: ARRAY
97338: PPUSH
97339: CALL_OW 115
// attacking := true ;
97343: LD_ADDR_VAR 0 29
97347: PUSH
97348: LD_INT 1
97350: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
97351: LD_VAR 0 4
97355: PUSH
97356: LD_VAR 0 7
97360: ARRAY
97361: PPUSH
97362: LD_INT 71
97364: PPUSH
97365: CALL_OW 109
// continue ;
97369: GO 97284
// end ; end ;
97371: GO 97284
97373: POP
97374: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
97375: LD_VAR 0 4
97379: PUSH
97380: LD_VAR 0 7
97384: ARRAY
97385: PPUSH
97386: CALL_OW 257
97390: PUSH
97391: LD_INT 8
97393: EQUAL
97394: PUSH
97395: LD_VAR 0 4
97399: PUSH
97400: LD_VAR 0 7
97404: ARRAY
97405: PPUSH
97406: CALL_OW 264
97410: PUSH
97411: LD_INT 28
97413: PUSH
97414: LD_INT 45
97416: PUSH
97417: LD_INT 7
97419: PUSH
97420: LD_INT 47
97422: PUSH
97423: EMPTY
97424: LIST
97425: LIST
97426: LIST
97427: LIST
97428: IN
97429: OR
97430: IFFALSE 97660
// begin attacking := false ;
97432: LD_ADDR_VAR 0 29
97436: PUSH
97437: LD_INT 0
97439: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
97440: LD_VAR 0 14
97444: PUSH
97445: LD_INT 1
97447: ARRAY
97448: PPUSH
97449: CALL_OW 266
97453: PUSH
97454: LD_INT 32
97456: PUSH
97457: LD_INT 31
97459: PUSH
97460: LD_INT 33
97462: PUSH
97463: LD_INT 4
97465: PUSH
97466: LD_INT 5
97468: PUSH
97469: EMPTY
97470: LIST
97471: LIST
97472: LIST
97473: LIST
97474: LIST
97475: IN
97476: IFFALSE 97660
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
97478: LD_ADDR_VAR 0 9
97482: PUSH
97483: LD_VAR 0 14
97487: PUSH
97488: LD_INT 1
97490: ARRAY
97491: PPUSH
97492: CALL_OW 266
97496: PPUSH
97497: LD_VAR 0 14
97501: PUSH
97502: LD_INT 1
97504: ARRAY
97505: PPUSH
97506: CALL_OW 250
97510: PPUSH
97511: LD_VAR 0 14
97515: PUSH
97516: LD_INT 1
97518: ARRAY
97519: PPUSH
97520: CALL_OW 251
97524: PPUSH
97525: LD_VAR 0 14
97529: PUSH
97530: LD_INT 1
97532: ARRAY
97533: PPUSH
97534: CALL_OW 254
97538: PPUSH
97539: LD_VAR 0 14
97543: PUSH
97544: LD_INT 1
97546: ARRAY
97547: PPUSH
97548: CALL_OW 248
97552: PPUSH
97553: LD_INT 0
97555: PPUSH
97556: CALL 74292 0 6
97560: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
97561: LD_ADDR_VAR 0 8
97565: PUSH
97566: LD_VAR 0 4
97570: PUSH
97571: LD_VAR 0 7
97575: ARRAY
97576: PPUSH
97577: LD_VAR 0 9
97581: PPUSH
97582: CALL 92979 0 2
97586: ST_TO_ADDR
// if j then
97587: LD_VAR 0 8
97591: IFFALSE 97660
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
97593: LD_VAR 0 8
97597: PUSH
97598: LD_INT 1
97600: ARRAY
97601: PPUSH
97602: LD_VAR 0 8
97606: PUSH
97607: LD_INT 2
97609: ARRAY
97610: PPUSH
97611: CALL_OW 488
97615: IFFALSE 97660
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
97617: LD_VAR 0 4
97621: PUSH
97622: LD_VAR 0 7
97626: ARRAY
97627: PPUSH
97628: LD_VAR 0 8
97632: PUSH
97633: LD_INT 1
97635: ARRAY
97636: PPUSH
97637: LD_VAR 0 8
97641: PUSH
97642: LD_INT 2
97644: ARRAY
97645: PPUSH
97646: CALL_OW 116
// attacking := true ;
97650: LD_ADDR_VAR 0 29
97654: PUSH
97655: LD_INT 1
97657: ST_TO_ADDR
// continue ;
97658: GO 95033
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
97660: LD_VAR 0 4
97664: PUSH
97665: LD_VAR 0 7
97669: ARRAY
97670: PPUSH
97671: CALL_OW 265
97675: PUSH
97676: LD_INT 11
97678: EQUAL
97679: IFFALSE 97957
// begin k := 10 ;
97681: LD_ADDR_VAR 0 9
97685: PUSH
97686: LD_INT 10
97688: ST_TO_ADDR
// x := 0 ;
97689: LD_ADDR_VAR 0 10
97693: PUSH
97694: LD_INT 0
97696: ST_TO_ADDR
// if tmp < k then
97697: LD_VAR 0 14
97701: PUSH
97702: LD_VAR 0 9
97706: LESS
97707: IFFALSE 97719
// k := tmp ;
97709: LD_ADDR_VAR 0 9
97713: PUSH
97714: LD_VAR 0 14
97718: ST_TO_ADDR
// for j = k downto 1 do
97719: LD_ADDR_VAR 0 8
97723: PUSH
97724: DOUBLE
97725: LD_VAR 0 9
97729: INC
97730: ST_TO_ADDR
97731: LD_INT 1
97733: PUSH
97734: FOR_DOWNTO
97735: IFFALSE 97810
// begin if GetType ( tmp [ j ] ) = unit_human then
97737: LD_VAR 0 14
97741: PUSH
97742: LD_VAR 0 8
97746: ARRAY
97747: PPUSH
97748: CALL_OW 247
97752: PUSH
97753: LD_INT 1
97755: EQUAL
97756: IFFALSE 97808
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
97758: LD_VAR 0 4
97762: PUSH
97763: LD_VAR 0 7
97767: ARRAY
97768: PPUSH
97769: LD_VAR 0 14
97773: PUSH
97774: LD_VAR 0 8
97778: ARRAY
97779: PPUSH
97780: CALL 93250 0 2
// x := tmp [ j ] ;
97784: LD_ADDR_VAR 0 10
97788: PUSH
97789: LD_VAR 0 14
97793: PUSH
97794: LD_VAR 0 8
97798: ARRAY
97799: ST_TO_ADDR
// attacking := true ;
97800: LD_ADDR_VAR 0 29
97804: PUSH
97805: LD_INT 1
97807: ST_TO_ADDR
// end ; end ;
97808: GO 97734
97810: POP
97811: POP
// if not x then
97812: LD_VAR 0 10
97816: NOT
97817: IFFALSE 97957
// begin attacking := true ;
97819: LD_ADDR_VAR 0 29
97823: PUSH
97824: LD_INT 1
97826: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
97827: LD_VAR 0 4
97831: PUSH
97832: LD_VAR 0 7
97836: ARRAY
97837: PPUSH
97838: CALL_OW 250
97842: PPUSH
97843: LD_VAR 0 4
97847: PUSH
97848: LD_VAR 0 7
97852: ARRAY
97853: PPUSH
97854: CALL_OW 251
97858: PPUSH
97859: CALL_OW 546
97863: PUSH
97864: LD_INT 2
97866: ARRAY
97867: PUSH
97868: LD_VAR 0 14
97872: PUSH
97873: LD_INT 1
97875: ARRAY
97876: PPUSH
97877: CALL_OW 250
97881: PPUSH
97882: LD_VAR 0 14
97886: PUSH
97887: LD_INT 1
97889: ARRAY
97890: PPUSH
97891: CALL_OW 251
97895: PPUSH
97896: CALL_OW 546
97900: PUSH
97901: LD_INT 2
97903: ARRAY
97904: EQUAL
97905: IFFALSE 97933
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
97907: LD_VAR 0 4
97911: PUSH
97912: LD_VAR 0 7
97916: ARRAY
97917: PPUSH
97918: LD_VAR 0 14
97922: PUSH
97923: LD_INT 1
97925: ARRAY
97926: PPUSH
97927: CALL 93250 0 2
97931: GO 97957
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
97933: LD_VAR 0 4
97937: PUSH
97938: LD_VAR 0 7
97942: ARRAY
97943: PPUSH
97944: LD_VAR 0 14
97948: PUSH
97949: LD_INT 1
97951: ARRAY
97952: PPUSH
97953: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
97957: LD_VAR 0 4
97961: PUSH
97962: LD_VAR 0 7
97966: ARRAY
97967: PPUSH
97968: CALL_OW 264
97972: PUSH
97973: LD_INT 29
97975: EQUAL
97976: IFFALSE 98342
// begin if WantsToAttack ( group [ i ] ) in bombed then
97978: LD_VAR 0 4
97982: PUSH
97983: LD_VAR 0 7
97987: ARRAY
97988: PPUSH
97989: CALL_OW 319
97993: PUSH
97994: LD_VAR 0 28
97998: IN
97999: IFFALSE 98003
// continue ;
98001: GO 95033
// k := 8 ;
98003: LD_ADDR_VAR 0 9
98007: PUSH
98008: LD_INT 8
98010: ST_TO_ADDR
// x := 0 ;
98011: LD_ADDR_VAR 0 10
98015: PUSH
98016: LD_INT 0
98018: ST_TO_ADDR
// if tmp < k then
98019: LD_VAR 0 14
98023: PUSH
98024: LD_VAR 0 9
98028: LESS
98029: IFFALSE 98041
// k := tmp ;
98031: LD_ADDR_VAR 0 9
98035: PUSH
98036: LD_VAR 0 14
98040: ST_TO_ADDR
// for j = 1 to k do
98041: LD_ADDR_VAR 0 8
98045: PUSH
98046: DOUBLE
98047: LD_INT 1
98049: DEC
98050: ST_TO_ADDR
98051: LD_VAR 0 9
98055: PUSH
98056: FOR_TO
98057: IFFALSE 98189
// begin if GetType ( tmp [ j ] ) = unit_building then
98059: LD_VAR 0 14
98063: PUSH
98064: LD_VAR 0 8
98068: ARRAY
98069: PPUSH
98070: CALL_OW 247
98074: PUSH
98075: LD_INT 3
98077: EQUAL
98078: IFFALSE 98187
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
98080: LD_VAR 0 14
98084: PUSH
98085: LD_VAR 0 8
98089: ARRAY
98090: PUSH
98091: LD_VAR 0 28
98095: IN
98096: NOT
98097: PUSH
98098: LD_VAR 0 14
98102: PUSH
98103: LD_VAR 0 8
98107: ARRAY
98108: PPUSH
98109: CALL_OW 313
98113: AND
98114: IFFALSE 98187
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
98116: LD_VAR 0 4
98120: PUSH
98121: LD_VAR 0 7
98125: ARRAY
98126: PPUSH
98127: LD_VAR 0 14
98131: PUSH
98132: LD_VAR 0 8
98136: ARRAY
98137: PPUSH
98138: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
98142: LD_ADDR_VAR 0 28
98146: PUSH
98147: LD_VAR 0 28
98151: PPUSH
98152: LD_VAR 0 28
98156: PUSH
98157: LD_INT 1
98159: PLUS
98160: PPUSH
98161: LD_VAR 0 14
98165: PUSH
98166: LD_VAR 0 8
98170: ARRAY
98171: PPUSH
98172: CALL_OW 1
98176: ST_TO_ADDR
// attacking := true ;
98177: LD_ADDR_VAR 0 29
98181: PUSH
98182: LD_INT 1
98184: ST_TO_ADDR
// break ;
98185: GO 98189
// end ; end ;
98187: GO 98056
98189: POP
98190: POP
// if not attacking and f_attack_depot then
98191: LD_VAR 0 29
98195: NOT
98196: PUSH
98197: LD_VAR 0 25
98201: AND
98202: IFFALSE 98297
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
98204: LD_ADDR_VAR 0 13
98208: PUSH
98209: LD_VAR 0 14
98213: PPUSH
98214: LD_INT 2
98216: PUSH
98217: LD_INT 30
98219: PUSH
98220: LD_INT 0
98222: PUSH
98223: EMPTY
98224: LIST
98225: LIST
98226: PUSH
98227: LD_INT 30
98229: PUSH
98230: LD_INT 1
98232: PUSH
98233: EMPTY
98234: LIST
98235: LIST
98236: PUSH
98237: EMPTY
98238: LIST
98239: LIST
98240: LIST
98241: PPUSH
98242: CALL_OW 72
98246: ST_TO_ADDR
// if z then
98247: LD_VAR 0 13
98251: IFFALSE 98297
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
98253: LD_VAR 0 4
98257: PUSH
98258: LD_VAR 0 7
98262: ARRAY
98263: PPUSH
98264: LD_VAR 0 13
98268: PPUSH
98269: LD_VAR 0 4
98273: PUSH
98274: LD_VAR 0 7
98278: ARRAY
98279: PPUSH
98280: CALL_OW 74
98284: PPUSH
98285: CALL_OW 115
// attacking := true ;
98289: LD_ADDR_VAR 0 29
98293: PUSH
98294: LD_INT 1
98296: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
98297: LD_VAR 0 4
98301: PUSH
98302: LD_VAR 0 7
98306: ARRAY
98307: PPUSH
98308: CALL_OW 256
98312: PUSH
98313: LD_INT 500
98315: LESS
98316: IFFALSE 98342
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
98318: LD_VAR 0 4
98322: PUSH
98323: LD_VAR 0 7
98327: ARRAY
98328: PPUSH
98329: LD_VAR 0 14
98333: PUSH
98334: LD_INT 1
98336: ARRAY
98337: PPUSH
98338: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
98342: LD_VAR 0 4
98346: PUSH
98347: LD_VAR 0 7
98351: ARRAY
98352: PPUSH
98353: CALL_OW 264
98357: PUSH
98358: LD_INT 49
98360: EQUAL
98361: IFFALSE 98482
// begin if not HasTask ( group [ i ] ) then
98363: LD_VAR 0 4
98367: PUSH
98368: LD_VAR 0 7
98372: ARRAY
98373: PPUSH
98374: CALL_OW 314
98378: NOT
98379: IFFALSE 98482
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
98381: LD_ADDR_VAR 0 9
98385: PUSH
98386: LD_INT 81
98388: PUSH
98389: LD_VAR 0 4
98393: PUSH
98394: LD_VAR 0 7
98398: ARRAY
98399: PPUSH
98400: CALL_OW 255
98404: PUSH
98405: EMPTY
98406: LIST
98407: LIST
98408: PPUSH
98409: CALL_OW 69
98413: PPUSH
98414: LD_VAR 0 4
98418: PUSH
98419: LD_VAR 0 7
98423: ARRAY
98424: PPUSH
98425: CALL_OW 74
98429: ST_TO_ADDR
// if k then
98430: LD_VAR 0 9
98434: IFFALSE 98482
// if GetDistUnits ( group [ i ] , k ) > 10 then
98436: LD_VAR 0 4
98440: PUSH
98441: LD_VAR 0 7
98445: ARRAY
98446: PPUSH
98447: LD_VAR 0 9
98451: PPUSH
98452: CALL_OW 296
98456: PUSH
98457: LD_INT 10
98459: GREATER
98460: IFFALSE 98482
// ComMoveUnit ( group [ i ] , k ) ;
98462: LD_VAR 0 4
98466: PUSH
98467: LD_VAR 0 7
98471: ARRAY
98472: PPUSH
98473: LD_VAR 0 9
98477: PPUSH
98478: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
98482: LD_VAR 0 4
98486: PUSH
98487: LD_VAR 0 7
98491: ARRAY
98492: PPUSH
98493: CALL_OW 256
98497: PUSH
98498: LD_INT 250
98500: LESS
98501: PUSH
98502: LD_VAR 0 4
98506: PUSH
98507: LD_VAR 0 7
98511: ARRAY
98512: PUSH
98513: LD_INT 21
98515: PUSH
98516: LD_INT 2
98518: PUSH
98519: EMPTY
98520: LIST
98521: LIST
98522: PUSH
98523: LD_INT 23
98525: PUSH
98526: LD_INT 2
98528: PUSH
98529: EMPTY
98530: LIST
98531: LIST
98532: PUSH
98533: EMPTY
98534: LIST
98535: LIST
98536: PPUSH
98537: CALL_OW 69
98541: IN
98542: AND
98543: IFFALSE 98668
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
98545: LD_ADDR_VAR 0 9
98549: PUSH
98550: LD_OWVAR 3
98554: PUSH
98555: LD_VAR 0 4
98559: PUSH
98560: LD_VAR 0 7
98564: ARRAY
98565: DIFF
98566: PPUSH
98567: LD_VAR 0 4
98571: PUSH
98572: LD_VAR 0 7
98576: ARRAY
98577: PPUSH
98578: CALL_OW 74
98582: ST_TO_ADDR
// if not k then
98583: LD_VAR 0 9
98587: NOT
98588: IFFALSE 98592
// continue ;
98590: GO 95033
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
98592: LD_VAR 0 9
98596: PUSH
98597: LD_INT 81
98599: PUSH
98600: LD_VAR 0 4
98604: PUSH
98605: LD_VAR 0 7
98609: ARRAY
98610: PPUSH
98611: CALL_OW 255
98615: PUSH
98616: EMPTY
98617: LIST
98618: LIST
98619: PPUSH
98620: CALL_OW 69
98624: IN
98625: PUSH
98626: LD_VAR 0 9
98630: PPUSH
98631: LD_VAR 0 4
98635: PUSH
98636: LD_VAR 0 7
98640: ARRAY
98641: PPUSH
98642: CALL_OW 296
98646: PUSH
98647: LD_INT 5
98649: LESS
98650: AND
98651: IFFALSE 98668
// ComAutodestruct ( group [ i ] ) ;
98653: LD_VAR 0 4
98657: PUSH
98658: LD_VAR 0 7
98662: ARRAY
98663: PPUSH
98664: CALL 93148 0 1
// end ; if f_attack_depot then
98668: LD_VAR 0 25
98672: IFFALSE 98784
// begin k := 6 ;
98674: LD_ADDR_VAR 0 9
98678: PUSH
98679: LD_INT 6
98681: ST_TO_ADDR
// if tmp < k then
98682: LD_VAR 0 14
98686: PUSH
98687: LD_VAR 0 9
98691: LESS
98692: IFFALSE 98704
// k := tmp ;
98694: LD_ADDR_VAR 0 9
98698: PUSH
98699: LD_VAR 0 14
98703: ST_TO_ADDR
// for j = 1 to k do
98704: LD_ADDR_VAR 0 8
98708: PUSH
98709: DOUBLE
98710: LD_INT 1
98712: DEC
98713: ST_TO_ADDR
98714: LD_VAR 0 9
98718: PUSH
98719: FOR_TO
98720: IFFALSE 98782
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
98722: LD_VAR 0 8
98726: PPUSH
98727: CALL_OW 266
98731: PUSH
98732: LD_INT 0
98734: PUSH
98735: LD_INT 1
98737: PUSH
98738: EMPTY
98739: LIST
98740: LIST
98741: IN
98742: IFFALSE 98780
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
98744: LD_VAR 0 4
98748: PUSH
98749: LD_VAR 0 7
98753: ARRAY
98754: PPUSH
98755: LD_VAR 0 14
98759: PUSH
98760: LD_VAR 0 8
98764: ARRAY
98765: PPUSH
98766: CALL_OW 115
// attacking := true ;
98770: LD_ADDR_VAR 0 29
98774: PUSH
98775: LD_INT 1
98777: ST_TO_ADDR
// break ;
98778: GO 98782
// end ;
98780: GO 98719
98782: POP
98783: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
98784: LD_VAR 0 4
98788: PUSH
98789: LD_VAR 0 7
98793: ARRAY
98794: PPUSH
98795: CALL_OW 302
98799: PUSH
98800: LD_VAR 0 29
98804: NOT
98805: AND
98806: IFFALSE 99128
// begin if GetTag ( group [ i ] ) = 71 then
98808: LD_VAR 0 4
98812: PUSH
98813: LD_VAR 0 7
98817: ARRAY
98818: PPUSH
98819: CALL_OW 110
98823: PUSH
98824: LD_INT 71
98826: EQUAL
98827: IFFALSE 98868
// begin if HasTask ( group [ i ] ) then
98829: LD_VAR 0 4
98833: PUSH
98834: LD_VAR 0 7
98838: ARRAY
98839: PPUSH
98840: CALL_OW 314
98844: IFFALSE 98850
// continue else
98846: GO 95033
98848: GO 98868
// SetTag ( group [ i ] , 0 ) ;
98850: LD_VAR 0 4
98854: PUSH
98855: LD_VAR 0 7
98859: ARRAY
98860: PPUSH
98861: LD_INT 0
98863: PPUSH
98864: CALL_OW 109
// end ; k := 8 ;
98868: LD_ADDR_VAR 0 9
98872: PUSH
98873: LD_INT 8
98875: ST_TO_ADDR
// x := 0 ;
98876: LD_ADDR_VAR 0 10
98880: PUSH
98881: LD_INT 0
98883: ST_TO_ADDR
// if tmp < k then
98884: LD_VAR 0 14
98888: PUSH
98889: LD_VAR 0 9
98893: LESS
98894: IFFALSE 98906
// k := tmp ;
98896: LD_ADDR_VAR 0 9
98900: PUSH
98901: LD_VAR 0 14
98905: ST_TO_ADDR
// for j = 1 to k do
98906: LD_ADDR_VAR 0 8
98910: PUSH
98911: DOUBLE
98912: LD_INT 1
98914: DEC
98915: ST_TO_ADDR
98916: LD_VAR 0 9
98920: PUSH
98921: FOR_TO
98922: IFFALSE 99020
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
98924: LD_VAR 0 14
98928: PUSH
98929: LD_VAR 0 8
98933: ARRAY
98934: PPUSH
98935: CALL_OW 247
98939: PUSH
98940: LD_INT 1
98942: EQUAL
98943: PUSH
98944: LD_VAR 0 14
98948: PUSH
98949: LD_VAR 0 8
98953: ARRAY
98954: PPUSH
98955: CALL_OW 256
98959: PUSH
98960: LD_INT 250
98962: LESS
98963: PUSH
98964: LD_VAR 0 20
98968: AND
98969: PUSH
98970: LD_VAR 0 20
98974: NOT
98975: PUSH
98976: LD_VAR 0 14
98980: PUSH
98981: LD_VAR 0 8
98985: ARRAY
98986: PPUSH
98987: CALL_OW 256
98991: PUSH
98992: LD_INT 250
98994: GREATEREQUAL
98995: AND
98996: OR
98997: AND
98998: IFFALSE 99018
// begin x := tmp [ j ] ;
99000: LD_ADDR_VAR 0 10
99004: PUSH
99005: LD_VAR 0 14
99009: PUSH
99010: LD_VAR 0 8
99014: ARRAY
99015: ST_TO_ADDR
// break ;
99016: GO 99020
// end ;
99018: GO 98921
99020: POP
99021: POP
// if x then
99022: LD_VAR 0 10
99026: IFFALSE 99050
// ComAttackUnit ( group [ i ] , x ) else
99028: LD_VAR 0 4
99032: PUSH
99033: LD_VAR 0 7
99037: ARRAY
99038: PPUSH
99039: LD_VAR 0 10
99043: PPUSH
99044: CALL_OW 115
99048: GO 99074
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
99050: LD_VAR 0 4
99054: PUSH
99055: LD_VAR 0 7
99059: ARRAY
99060: PPUSH
99061: LD_VAR 0 14
99065: PUSH
99066: LD_INT 1
99068: ARRAY
99069: PPUSH
99070: CALL_OW 115
// if not HasTask ( group [ i ] ) then
99074: LD_VAR 0 4
99078: PUSH
99079: LD_VAR 0 7
99083: ARRAY
99084: PPUSH
99085: CALL_OW 314
99089: NOT
99090: IFFALSE 99128
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
99092: LD_VAR 0 4
99096: PUSH
99097: LD_VAR 0 7
99101: ARRAY
99102: PPUSH
99103: LD_VAR 0 14
99107: PPUSH
99108: LD_VAR 0 4
99112: PUSH
99113: LD_VAR 0 7
99117: ARRAY
99118: PPUSH
99119: CALL_OW 74
99123: PPUSH
99124: CALL_OW 115
// end ; end ; end ;
99128: GO 95033
99130: POP
99131: POP
// wait ( 0 0$1 ) ;
99132: LD_INT 35
99134: PPUSH
99135: CALL_OW 67
// until group = [ ] ;
99139: LD_VAR 0 4
99143: PUSH
99144: EMPTY
99145: EQUAL
99146: IFFALSE 95018
// end ;
99148: LD_VAR 0 2
99152: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
99153: LD_INT 0
99155: PPUSH
99156: PPUSH
99157: PPUSH
99158: PPUSH
// if not base_units then
99159: LD_VAR 0 1
99163: NOT
99164: IFFALSE 99168
// exit ;
99166: GO 99255
// result := false ;
99168: LD_ADDR_VAR 0 2
99172: PUSH
99173: LD_INT 0
99175: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
99176: LD_ADDR_VAR 0 5
99180: PUSH
99181: LD_VAR 0 1
99185: PPUSH
99186: LD_INT 21
99188: PUSH
99189: LD_INT 3
99191: PUSH
99192: EMPTY
99193: LIST
99194: LIST
99195: PPUSH
99196: CALL_OW 72
99200: ST_TO_ADDR
// if not tmp then
99201: LD_VAR 0 5
99205: NOT
99206: IFFALSE 99210
// exit ;
99208: GO 99255
// for i in tmp do
99210: LD_ADDR_VAR 0 3
99214: PUSH
99215: LD_VAR 0 5
99219: PUSH
99220: FOR_IN
99221: IFFALSE 99253
// begin result := EnemyInRange ( i , 22 ) ;
99223: LD_ADDR_VAR 0 2
99227: PUSH
99228: LD_VAR 0 3
99232: PPUSH
99233: LD_INT 22
99235: PPUSH
99236: CALL 92831 0 2
99240: ST_TO_ADDR
// if result then
99241: LD_VAR 0 2
99245: IFFALSE 99251
// exit ;
99247: POP
99248: POP
99249: GO 99255
// end ;
99251: GO 99220
99253: POP
99254: POP
// end ;
99255: LD_VAR 0 2
99259: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
99260: LD_INT 0
99262: PPUSH
99263: PPUSH
// if not units then
99264: LD_VAR 0 1
99268: NOT
99269: IFFALSE 99273
// exit ;
99271: GO 99343
// result := [ ] ;
99273: LD_ADDR_VAR 0 3
99277: PUSH
99278: EMPTY
99279: ST_TO_ADDR
// for i in units do
99280: LD_ADDR_VAR 0 4
99284: PUSH
99285: LD_VAR 0 1
99289: PUSH
99290: FOR_IN
99291: IFFALSE 99341
// if GetTag ( i ) = tag then
99293: LD_VAR 0 4
99297: PPUSH
99298: CALL_OW 110
99302: PUSH
99303: LD_VAR 0 2
99307: EQUAL
99308: IFFALSE 99339
// result := Insert ( result , result + 1 , i ) ;
99310: LD_ADDR_VAR 0 3
99314: PUSH
99315: LD_VAR 0 3
99319: PPUSH
99320: LD_VAR 0 3
99324: PUSH
99325: LD_INT 1
99327: PLUS
99328: PPUSH
99329: LD_VAR 0 4
99333: PPUSH
99334: CALL_OW 2
99338: ST_TO_ADDR
99339: GO 99290
99341: POP
99342: POP
// end ;
99343: LD_VAR 0 3
99347: RET
// export function IsDriver ( un ) ; begin
99348: LD_INT 0
99350: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
99351: LD_ADDR_VAR 0 2
99355: PUSH
99356: LD_VAR 0 1
99360: PUSH
99361: LD_INT 55
99363: PUSH
99364: EMPTY
99365: LIST
99366: PPUSH
99367: CALL_OW 69
99371: IN
99372: ST_TO_ADDR
// end ;
99373: LD_VAR 0 2
99377: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
99378: LD_INT 0
99380: PPUSH
99381: PPUSH
// list := [ ] ;
99382: LD_ADDR_VAR 0 5
99386: PUSH
99387: EMPTY
99388: ST_TO_ADDR
// case d of 0 :
99389: LD_VAR 0 3
99393: PUSH
99394: LD_INT 0
99396: DOUBLE
99397: EQUAL
99398: IFTRUE 99402
99400: GO 99535
99402: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
99403: LD_ADDR_VAR 0 5
99407: PUSH
99408: LD_VAR 0 1
99412: PUSH
99413: LD_INT 4
99415: MINUS
99416: PUSH
99417: LD_VAR 0 2
99421: PUSH
99422: LD_INT 4
99424: MINUS
99425: PUSH
99426: LD_INT 2
99428: PUSH
99429: EMPTY
99430: LIST
99431: LIST
99432: LIST
99433: PUSH
99434: LD_VAR 0 1
99438: PUSH
99439: LD_INT 3
99441: MINUS
99442: PUSH
99443: LD_VAR 0 2
99447: PUSH
99448: LD_INT 1
99450: PUSH
99451: EMPTY
99452: LIST
99453: LIST
99454: LIST
99455: PUSH
99456: LD_VAR 0 1
99460: PUSH
99461: LD_INT 4
99463: PLUS
99464: PUSH
99465: LD_VAR 0 2
99469: PUSH
99470: LD_INT 4
99472: PUSH
99473: EMPTY
99474: LIST
99475: LIST
99476: LIST
99477: PUSH
99478: LD_VAR 0 1
99482: PUSH
99483: LD_INT 3
99485: PLUS
99486: PUSH
99487: LD_VAR 0 2
99491: PUSH
99492: LD_INT 3
99494: PLUS
99495: PUSH
99496: LD_INT 5
99498: PUSH
99499: EMPTY
99500: LIST
99501: LIST
99502: LIST
99503: PUSH
99504: LD_VAR 0 1
99508: PUSH
99509: LD_VAR 0 2
99513: PUSH
99514: LD_INT 4
99516: PLUS
99517: PUSH
99518: LD_INT 0
99520: PUSH
99521: EMPTY
99522: LIST
99523: LIST
99524: LIST
99525: PUSH
99526: EMPTY
99527: LIST
99528: LIST
99529: LIST
99530: LIST
99531: LIST
99532: ST_TO_ADDR
// end ; 1 :
99533: GO 100233
99535: LD_INT 1
99537: DOUBLE
99538: EQUAL
99539: IFTRUE 99543
99541: GO 99676
99543: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
99544: LD_ADDR_VAR 0 5
99548: PUSH
99549: LD_VAR 0 1
99553: PUSH
99554: LD_VAR 0 2
99558: PUSH
99559: LD_INT 4
99561: MINUS
99562: PUSH
99563: LD_INT 3
99565: PUSH
99566: EMPTY
99567: LIST
99568: LIST
99569: LIST
99570: PUSH
99571: LD_VAR 0 1
99575: PUSH
99576: LD_INT 3
99578: MINUS
99579: PUSH
99580: LD_VAR 0 2
99584: PUSH
99585: LD_INT 3
99587: MINUS
99588: PUSH
99589: LD_INT 2
99591: PUSH
99592: EMPTY
99593: LIST
99594: LIST
99595: LIST
99596: PUSH
99597: LD_VAR 0 1
99601: PUSH
99602: LD_INT 4
99604: MINUS
99605: PUSH
99606: LD_VAR 0 2
99610: PUSH
99611: LD_INT 1
99613: PUSH
99614: EMPTY
99615: LIST
99616: LIST
99617: LIST
99618: PUSH
99619: LD_VAR 0 1
99623: PUSH
99624: LD_VAR 0 2
99628: PUSH
99629: LD_INT 3
99631: PLUS
99632: PUSH
99633: LD_INT 0
99635: PUSH
99636: EMPTY
99637: LIST
99638: LIST
99639: LIST
99640: PUSH
99641: LD_VAR 0 1
99645: PUSH
99646: LD_INT 4
99648: PLUS
99649: PUSH
99650: LD_VAR 0 2
99654: PUSH
99655: LD_INT 4
99657: PLUS
99658: PUSH
99659: LD_INT 5
99661: PUSH
99662: EMPTY
99663: LIST
99664: LIST
99665: LIST
99666: PUSH
99667: EMPTY
99668: LIST
99669: LIST
99670: LIST
99671: LIST
99672: LIST
99673: ST_TO_ADDR
// end ; 2 :
99674: GO 100233
99676: LD_INT 2
99678: DOUBLE
99679: EQUAL
99680: IFTRUE 99684
99682: GO 99813
99684: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
99685: LD_ADDR_VAR 0 5
99689: PUSH
99690: LD_VAR 0 1
99694: PUSH
99695: LD_VAR 0 2
99699: PUSH
99700: LD_INT 3
99702: MINUS
99703: PUSH
99704: LD_INT 3
99706: PUSH
99707: EMPTY
99708: LIST
99709: LIST
99710: LIST
99711: PUSH
99712: LD_VAR 0 1
99716: PUSH
99717: LD_INT 4
99719: PLUS
99720: PUSH
99721: LD_VAR 0 2
99725: PUSH
99726: LD_INT 4
99728: PUSH
99729: EMPTY
99730: LIST
99731: LIST
99732: LIST
99733: PUSH
99734: LD_VAR 0 1
99738: PUSH
99739: LD_VAR 0 2
99743: PUSH
99744: LD_INT 4
99746: PLUS
99747: PUSH
99748: LD_INT 0
99750: PUSH
99751: EMPTY
99752: LIST
99753: LIST
99754: LIST
99755: PUSH
99756: LD_VAR 0 1
99760: PUSH
99761: LD_INT 3
99763: MINUS
99764: PUSH
99765: LD_VAR 0 2
99769: PUSH
99770: LD_INT 1
99772: PUSH
99773: EMPTY
99774: LIST
99775: LIST
99776: LIST
99777: PUSH
99778: LD_VAR 0 1
99782: PUSH
99783: LD_INT 4
99785: MINUS
99786: PUSH
99787: LD_VAR 0 2
99791: PUSH
99792: LD_INT 4
99794: MINUS
99795: PUSH
99796: LD_INT 2
99798: PUSH
99799: EMPTY
99800: LIST
99801: LIST
99802: LIST
99803: PUSH
99804: EMPTY
99805: LIST
99806: LIST
99807: LIST
99808: LIST
99809: LIST
99810: ST_TO_ADDR
// end ; 3 :
99811: GO 100233
99813: LD_INT 3
99815: DOUBLE
99816: EQUAL
99817: IFTRUE 99821
99819: GO 99954
99821: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
99822: LD_ADDR_VAR 0 5
99826: PUSH
99827: LD_VAR 0 1
99831: PUSH
99832: LD_INT 3
99834: PLUS
99835: PUSH
99836: LD_VAR 0 2
99840: PUSH
99841: LD_INT 4
99843: PUSH
99844: EMPTY
99845: LIST
99846: LIST
99847: LIST
99848: PUSH
99849: LD_VAR 0 1
99853: PUSH
99854: LD_INT 4
99856: PLUS
99857: PUSH
99858: LD_VAR 0 2
99862: PUSH
99863: LD_INT 4
99865: PLUS
99866: PUSH
99867: LD_INT 5
99869: PUSH
99870: EMPTY
99871: LIST
99872: LIST
99873: LIST
99874: PUSH
99875: LD_VAR 0 1
99879: PUSH
99880: LD_INT 4
99882: MINUS
99883: PUSH
99884: LD_VAR 0 2
99888: PUSH
99889: LD_INT 1
99891: PUSH
99892: EMPTY
99893: LIST
99894: LIST
99895: LIST
99896: PUSH
99897: LD_VAR 0 1
99901: PUSH
99902: LD_VAR 0 2
99906: PUSH
99907: LD_INT 4
99909: MINUS
99910: PUSH
99911: LD_INT 3
99913: PUSH
99914: EMPTY
99915: LIST
99916: LIST
99917: LIST
99918: PUSH
99919: LD_VAR 0 1
99923: PUSH
99924: LD_INT 3
99926: MINUS
99927: PUSH
99928: LD_VAR 0 2
99932: PUSH
99933: LD_INT 3
99935: MINUS
99936: PUSH
99937: LD_INT 2
99939: PUSH
99940: EMPTY
99941: LIST
99942: LIST
99943: LIST
99944: PUSH
99945: EMPTY
99946: LIST
99947: LIST
99948: LIST
99949: LIST
99950: LIST
99951: ST_TO_ADDR
// end ; 4 :
99952: GO 100233
99954: LD_INT 4
99956: DOUBLE
99957: EQUAL
99958: IFTRUE 99962
99960: GO 100095
99962: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
99963: LD_ADDR_VAR 0 5
99967: PUSH
99968: LD_VAR 0 1
99972: PUSH
99973: LD_VAR 0 2
99977: PUSH
99978: LD_INT 4
99980: PLUS
99981: PUSH
99982: LD_INT 0
99984: PUSH
99985: EMPTY
99986: LIST
99987: LIST
99988: LIST
99989: PUSH
99990: LD_VAR 0 1
99994: PUSH
99995: LD_INT 3
99997: PLUS
99998: PUSH
99999: LD_VAR 0 2
100003: PUSH
100004: LD_INT 3
100006: PLUS
100007: PUSH
100008: LD_INT 5
100010: PUSH
100011: EMPTY
100012: LIST
100013: LIST
100014: LIST
100015: PUSH
100016: LD_VAR 0 1
100020: PUSH
100021: LD_INT 4
100023: PLUS
100024: PUSH
100025: LD_VAR 0 2
100029: PUSH
100030: LD_INT 4
100032: PUSH
100033: EMPTY
100034: LIST
100035: LIST
100036: LIST
100037: PUSH
100038: LD_VAR 0 1
100042: PUSH
100043: LD_VAR 0 2
100047: PUSH
100048: LD_INT 3
100050: MINUS
100051: PUSH
100052: LD_INT 3
100054: PUSH
100055: EMPTY
100056: LIST
100057: LIST
100058: LIST
100059: PUSH
100060: LD_VAR 0 1
100064: PUSH
100065: LD_INT 4
100067: MINUS
100068: PUSH
100069: LD_VAR 0 2
100073: PUSH
100074: LD_INT 4
100076: MINUS
100077: PUSH
100078: LD_INT 2
100080: PUSH
100081: EMPTY
100082: LIST
100083: LIST
100084: LIST
100085: PUSH
100086: EMPTY
100087: LIST
100088: LIST
100089: LIST
100090: LIST
100091: LIST
100092: ST_TO_ADDR
// end ; 5 :
100093: GO 100233
100095: LD_INT 5
100097: DOUBLE
100098: EQUAL
100099: IFTRUE 100103
100101: GO 100232
100103: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
100104: LD_ADDR_VAR 0 5
100108: PUSH
100109: LD_VAR 0 1
100113: PUSH
100114: LD_INT 4
100116: MINUS
100117: PUSH
100118: LD_VAR 0 2
100122: PUSH
100123: LD_INT 1
100125: PUSH
100126: EMPTY
100127: LIST
100128: LIST
100129: LIST
100130: PUSH
100131: LD_VAR 0 1
100135: PUSH
100136: LD_VAR 0 2
100140: PUSH
100141: LD_INT 4
100143: MINUS
100144: PUSH
100145: LD_INT 3
100147: PUSH
100148: EMPTY
100149: LIST
100150: LIST
100151: LIST
100152: PUSH
100153: LD_VAR 0 1
100157: PUSH
100158: LD_INT 4
100160: PLUS
100161: PUSH
100162: LD_VAR 0 2
100166: PUSH
100167: LD_INT 4
100169: PLUS
100170: PUSH
100171: LD_INT 5
100173: PUSH
100174: EMPTY
100175: LIST
100176: LIST
100177: LIST
100178: PUSH
100179: LD_VAR 0 1
100183: PUSH
100184: LD_INT 3
100186: PLUS
100187: PUSH
100188: LD_VAR 0 2
100192: PUSH
100193: LD_INT 4
100195: PUSH
100196: EMPTY
100197: LIST
100198: LIST
100199: LIST
100200: PUSH
100201: LD_VAR 0 1
100205: PUSH
100206: LD_VAR 0 2
100210: PUSH
100211: LD_INT 3
100213: PLUS
100214: PUSH
100215: LD_INT 0
100217: PUSH
100218: EMPTY
100219: LIST
100220: LIST
100221: LIST
100222: PUSH
100223: EMPTY
100224: LIST
100225: LIST
100226: LIST
100227: LIST
100228: LIST
100229: ST_TO_ADDR
// end ; end ;
100230: GO 100233
100232: POP
// result := list ;
100233: LD_ADDR_VAR 0 4
100237: PUSH
100238: LD_VAR 0 5
100242: ST_TO_ADDR
// end ;
100243: LD_VAR 0 4
100247: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
100248: LD_INT 0
100250: PPUSH
100251: PPUSH
100252: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
100253: LD_VAR 0 1
100257: NOT
100258: PUSH
100259: LD_VAR 0 2
100263: PUSH
100264: LD_INT 1
100266: PUSH
100267: LD_INT 2
100269: PUSH
100270: LD_INT 3
100272: PUSH
100273: LD_INT 4
100275: PUSH
100276: EMPTY
100277: LIST
100278: LIST
100279: LIST
100280: LIST
100281: IN
100282: NOT
100283: OR
100284: IFFALSE 100288
// exit ;
100286: GO 100380
// tmp := [ ] ;
100288: LD_ADDR_VAR 0 5
100292: PUSH
100293: EMPTY
100294: ST_TO_ADDR
// for i in units do
100295: LD_ADDR_VAR 0 4
100299: PUSH
100300: LD_VAR 0 1
100304: PUSH
100305: FOR_IN
100306: IFFALSE 100349
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
100308: LD_ADDR_VAR 0 5
100312: PUSH
100313: LD_VAR 0 5
100317: PPUSH
100318: LD_VAR 0 5
100322: PUSH
100323: LD_INT 1
100325: PLUS
100326: PPUSH
100327: LD_VAR 0 4
100331: PPUSH
100332: LD_VAR 0 2
100336: PPUSH
100337: CALL_OW 259
100341: PPUSH
100342: CALL_OW 2
100346: ST_TO_ADDR
100347: GO 100305
100349: POP
100350: POP
// if not tmp then
100351: LD_VAR 0 5
100355: NOT
100356: IFFALSE 100360
// exit ;
100358: GO 100380
// result := SortListByListDesc ( units , tmp ) ;
100360: LD_ADDR_VAR 0 3
100364: PUSH
100365: LD_VAR 0 1
100369: PPUSH
100370: LD_VAR 0 5
100374: PPUSH
100375: CALL_OW 77
100379: ST_TO_ADDR
// end ;
100380: LD_VAR 0 3
100384: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
100385: LD_INT 0
100387: PPUSH
100388: PPUSH
100389: PPUSH
// x := GetX ( building ) ;
100390: LD_ADDR_VAR 0 4
100394: PUSH
100395: LD_VAR 0 2
100399: PPUSH
100400: CALL_OW 250
100404: ST_TO_ADDR
// y := GetY ( building ) ;
100405: LD_ADDR_VAR 0 5
100409: PUSH
100410: LD_VAR 0 2
100414: PPUSH
100415: CALL_OW 251
100419: ST_TO_ADDR
// if GetTaskList ( unit ) then
100420: LD_VAR 0 1
100424: PPUSH
100425: CALL_OW 437
100429: IFFALSE 100524
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
100431: LD_STRING e
100433: PUSH
100434: LD_VAR 0 1
100438: PPUSH
100439: CALL_OW 437
100443: PUSH
100444: LD_INT 1
100446: ARRAY
100447: PUSH
100448: LD_INT 1
100450: ARRAY
100451: EQUAL
100452: PUSH
100453: LD_VAR 0 4
100457: PUSH
100458: LD_VAR 0 1
100462: PPUSH
100463: CALL_OW 437
100467: PUSH
100468: LD_INT 1
100470: ARRAY
100471: PUSH
100472: LD_INT 2
100474: ARRAY
100475: EQUAL
100476: AND
100477: PUSH
100478: LD_VAR 0 5
100482: PUSH
100483: LD_VAR 0 1
100487: PPUSH
100488: CALL_OW 437
100492: PUSH
100493: LD_INT 1
100495: ARRAY
100496: PUSH
100497: LD_INT 3
100499: ARRAY
100500: EQUAL
100501: AND
100502: IFFALSE 100514
// result := true else
100504: LD_ADDR_VAR 0 3
100508: PUSH
100509: LD_INT 1
100511: ST_TO_ADDR
100512: GO 100522
// result := false ;
100514: LD_ADDR_VAR 0 3
100518: PUSH
100519: LD_INT 0
100521: ST_TO_ADDR
// end else
100522: GO 100532
// result := false ;
100524: LD_ADDR_VAR 0 3
100528: PUSH
100529: LD_INT 0
100531: ST_TO_ADDR
// end ;
100532: LD_VAR 0 3
100536: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
100537: LD_INT 0
100539: PPUSH
100540: PPUSH
100541: PPUSH
100542: PPUSH
// if not unit or not area then
100543: LD_VAR 0 1
100547: NOT
100548: PUSH
100549: LD_VAR 0 2
100553: NOT
100554: OR
100555: IFFALSE 100559
// exit ;
100557: GO 100724
// tmp := AreaToList ( area , i ) ;
100559: LD_ADDR_VAR 0 6
100563: PUSH
100564: LD_VAR 0 2
100568: PPUSH
100569: LD_VAR 0 5
100573: PPUSH
100574: CALL_OW 517
100578: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
100579: LD_ADDR_VAR 0 5
100583: PUSH
100584: DOUBLE
100585: LD_INT 1
100587: DEC
100588: ST_TO_ADDR
100589: LD_VAR 0 6
100593: PUSH
100594: LD_INT 1
100596: ARRAY
100597: PUSH
100598: FOR_TO
100599: IFFALSE 100714
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
100601: LD_ADDR_VAR 0 7
100605: PUSH
100606: LD_VAR 0 6
100610: PUSH
100611: LD_INT 1
100613: ARRAY
100614: PUSH
100615: LD_VAR 0 5
100619: ARRAY
100620: PUSH
100621: LD_VAR 0 6
100625: PUSH
100626: LD_INT 2
100628: ARRAY
100629: PUSH
100630: LD_VAR 0 5
100634: ARRAY
100635: PUSH
100636: EMPTY
100637: LIST
100638: LIST
100639: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
100640: LD_VAR 0 7
100644: PUSH
100645: LD_INT 1
100647: ARRAY
100648: PPUSH
100649: LD_VAR 0 7
100653: PUSH
100654: LD_INT 2
100656: ARRAY
100657: PPUSH
100658: CALL_OW 428
100662: PUSH
100663: LD_INT 0
100665: EQUAL
100666: IFFALSE 100712
// begin result := true ;
100668: LD_ADDR_VAR 0 4
100672: PUSH
100673: LD_INT 1
100675: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
100676: LD_VAR 0 1
100680: PPUSH
100681: LD_VAR 0 7
100685: PUSH
100686: LD_INT 1
100688: ARRAY
100689: PPUSH
100690: LD_VAR 0 7
100694: PUSH
100695: LD_INT 2
100697: ARRAY
100698: PPUSH
100699: LD_VAR 0 3
100703: PPUSH
100704: CALL_OW 48
// exit ;
100708: POP
100709: POP
100710: GO 100724
// end ; end ;
100712: GO 100598
100714: POP
100715: POP
// result := false ;
100716: LD_ADDR_VAR 0 4
100720: PUSH
100721: LD_INT 0
100723: ST_TO_ADDR
// end ;
100724: LD_VAR 0 4
100728: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
100729: LD_INT 0
100731: PPUSH
100732: PPUSH
100733: PPUSH
// if not side or side > 8 then
100734: LD_VAR 0 1
100738: NOT
100739: PUSH
100740: LD_VAR 0 1
100744: PUSH
100745: LD_INT 8
100747: GREATER
100748: OR
100749: IFFALSE 100753
// exit ;
100751: GO 100940
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
100753: LD_ADDR_VAR 0 4
100757: PUSH
100758: LD_INT 22
100760: PUSH
100761: LD_VAR 0 1
100765: PUSH
100766: EMPTY
100767: LIST
100768: LIST
100769: PUSH
100770: LD_INT 21
100772: PUSH
100773: LD_INT 3
100775: PUSH
100776: EMPTY
100777: LIST
100778: LIST
100779: PUSH
100780: EMPTY
100781: LIST
100782: LIST
100783: PPUSH
100784: CALL_OW 69
100788: ST_TO_ADDR
// if not tmp then
100789: LD_VAR 0 4
100793: NOT
100794: IFFALSE 100798
// exit ;
100796: GO 100940
// enable_addtolog := true ;
100798: LD_ADDR_OWVAR 81
100802: PUSH
100803: LD_INT 1
100805: ST_TO_ADDR
// AddToLog ( [ ) ;
100806: LD_STRING [
100808: PPUSH
100809: CALL_OW 561
// for i in tmp do
100813: LD_ADDR_VAR 0 3
100817: PUSH
100818: LD_VAR 0 4
100822: PUSH
100823: FOR_IN
100824: IFFALSE 100931
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
100826: LD_STRING [
100828: PUSH
100829: LD_VAR 0 3
100833: PPUSH
100834: CALL_OW 266
100838: STR
100839: PUSH
100840: LD_STRING , 
100842: STR
100843: PUSH
100844: LD_VAR 0 3
100848: PPUSH
100849: CALL_OW 250
100853: STR
100854: PUSH
100855: LD_STRING , 
100857: STR
100858: PUSH
100859: LD_VAR 0 3
100863: PPUSH
100864: CALL_OW 251
100868: STR
100869: PUSH
100870: LD_STRING , 
100872: STR
100873: PUSH
100874: LD_VAR 0 3
100878: PPUSH
100879: CALL_OW 254
100883: STR
100884: PUSH
100885: LD_STRING , 
100887: STR
100888: PUSH
100889: LD_VAR 0 3
100893: PPUSH
100894: LD_INT 1
100896: PPUSH
100897: CALL_OW 268
100901: STR
100902: PUSH
100903: LD_STRING , 
100905: STR
100906: PUSH
100907: LD_VAR 0 3
100911: PPUSH
100912: LD_INT 2
100914: PPUSH
100915: CALL_OW 268
100919: STR
100920: PUSH
100921: LD_STRING ],
100923: STR
100924: PPUSH
100925: CALL_OW 561
// end ;
100929: GO 100823
100931: POP
100932: POP
// AddToLog ( ]; ) ;
100933: LD_STRING ];
100935: PPUSH
100936: CALL_OW 561
// end ;
100940: LD_VAR 0 2
100944: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
100945: LD_INT 0
100947: PPUSH
100948: PPUSH
100949: PPUSH
100950: PPUSH
100951: PPUSH
// if not area or not rate or not max then
100952: LD_VAR 0 1
100956: NOT
100957: PUSH
100958: LD_VAR 0 2
100962: NOT
100963: OR
100964: PUSH
100965: LD_VAR 0 4
100969: NOT
100970: OR
100971: IFFALSE 100975
// exit ;
100973: GO 101167
// while 1 do
100975: LD_INT 1
100977: IFFALSE 101167
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
100979: LD_ADDR_VAR 0 9
100983: PUSH
100984: LD_VAR 0 1
100988: PPUSH
100989: LD_INT 1
100991: PPUSH
100992: CALL_OW 287
100996: PUSH
100997: LD_INT 10
100999: MUL
101000: ST_TO_ADDR
// r := rate / 10 ;
101001: LD_ADDR_VAR 0 7
101005: PUSH
101006: LD_VAR 0 2
101010: PUSH
101011: LD_INT 10
101013: DIVREAL
101014: ST_TO_ADDR
// time := 1 1$00 ;
101015: LD_ADDR_VAR 0 8
101019: PUSH
101020: LD_INT 2100
101022: ST_TO_ADDR
// if amount < min then
101023: LD_VAR 0 9
101027: PUSH
101028: LD_VAR 0 3
101032: LESS
101033: IFFALSE 101051
// r := r * 2 else
101035: LD_ADDR_VAR 0 7
101039: PUSH
101040: LD_VAR 0 7
101044: PUSH
101045: LD_INT 2
101047: MUL
101048: ST_TO_ADDR
101049: GO 101077
// if amount > max then
101051: LD_VAR 0 9
101055: PUSH
101056: LD_VAR 0 4
101060: GREATER
101061: IFFALSE 101077
// r := r / 2 ;
101063: LD_ADDR_VAR 0 7
101067: PUSH
101068: LD_VAR 0 7
101072: PUSH
101073: LD_INT 2
101075: DIVREAL
101076: ST_TO_ADDR
// time := time / r ;
101077: LD_ADDR_VAR 0 8
101081: PUSH
101082: LD_VAR 0 8
101086: PUSH
101087: LD_VAR 0 7
101091: DIVREAL
101092: ST_TO_ADDR
// if time < 0 then
101093: LD_VAR 0 8
101097: PUSH
101098: LD_INT 0
101100: LESS
101101: IFFALSE 101118
// time := time * - 1 ;
101103: LD_ADDR_VAR 0 8
101107: PUSH
101108: LD_VAR 0 8
101112: PUSH
101113: LD_INT 1
101115: NEG
101116: MUL
101117: ST_TO_ADDR
// wait ( time ) ;
101118: LD_VAR 0 8
101122: PPUSH
101123: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
101127: LD_INT 35
101129: PPUSH
101130: LD_INT 875
101132: PPUSH
101133: CALL_OW 12
101137: PPUSH
101138: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
101142: LD_INT 1
101144: PPUSH
101145: LD_INT 5
101147: PPUSH
101148: CALL_OW 12
101152: PPUSH
101153: LD_VAR 0 1
101157: PPUSH
101158: LD_INT 1
101160: PPUSH
101161: CALL_OW 55
// end ;
101165: GO 100975
// end ;
101167: LD_VAR 0 5
101171: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
101172: LD_INT 0
101174: PPUSH
101175: PPUSH
101176: PPUSH
101177: PPUSH
101178: PPUSH
101179: PPUSH
101180: PPUSH
101181: PPUSH
// if not turrets or not factories then
101182: LD_VAR 0 1
101186: NOT
101187: PUSH
101188: LD_VAR 0 2
101192: NOT
101193: OR
101194: IFFALSE 101198
// exit ;
101196: GO 101505
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
101198: LD_ADDR_VAR 0 10
101202: PUSH
101203: LD_INT 5
101205: PUSH
101206: LD_INT 6
101208: PUSH
101209: EMPTY
101210: LIST
101211: LIST
101212: PUSH
101213: LD_INT 2
101215: PUSH
101216: LD_INT 4
101218: PUSH
101219: EMPTY
101220: LIST
101221: LIST
101222: PUSH
101223: LD_INT 3
101225: PUSH
101226: LD_INT 5
101228: PUSH
101229: EMPTY
101230: LIST
101231: LIST
101232: PUSH
101233: EMPTY
101234: LIST
101235: LIST
101236: LIST
101237: PUSH
101238: LD_INT 24
101240: PUSH
101241: LD_INT 25
101243: PUSH
101244: EMPTY
101245: LIST
101246: LIST
101247: PUSH
101248: LD_INT 23
101250: PUSH
101251: LD_INT 27
101253: PUSH
101254: EMPTY
101255: LIST
101256: LIST
101257: PUSH
101258: EMPTY
101259: LIST
101260: LIST
101261: PUSH
101262: LD_INT 42
101264: PUSH
101265: LD_INT 43
101267: PUSH
101268: EMPTY
101269: LIST
101270: LIST
101271: PUSH
101272: LD_INT 44
101274: PUSH
101275: LD_INT 46
101277: PUSH
101278: EMPTY
101279: LIST
101280: LIST
101281: PUSH
101282: LD_INT 45
101284: PUSH
101285: LD_INT 47
101287: PUSH
101288: EMPTY
101289: LIST
101290: LIST
101291: PUSH
101292: EMPTY
101293: LIST
101294: LIST
101295: LIST
101296: PUSH
101297: EMPTY
101298: LIST
101299: LIST
101300: LIST
101301: ST_TO_ADDR
// result := [ ] ;
101302: LD_ADDR_VAR 0 3
101306: PUSH
101307: EMPTY
101308: ST_TO_ADDR
// for i in turrets do
101309: LD_ADDR_VAR 0 4
101313: PUSH
101314: LD_VAR 0 1
101318: PUSH
101319: FOR_IN
101320: IFFALSE 101503
// begin nat := GetNation ( i ) ;
101322: LD_ADDR_VAR 0 7
101326: PUSH
101327: LD_VAR 0 4
101331: PPUSH
101332: CALL_OW 248
101336: ST_TO_ADDR
// weapon := 0 ;
101337: LD_ADDR_VAR 0 8
101341: PUSH
101342: LD_INT 0
101344: ST_TO_ADDR
// if not nat then
101345: LD_VAR 0 7
101349: NOT
101350: IFFALSE 101354
// continue ;
101352: GO 101319
// for j in list [ nat ] do
101354: LD_ADDR_VAR 0 5
101358: PUSH
101359: LD_VAR 0 10
101363: PUSH
101364: LD_VAR 0 7
101368: ARRAY
101369: PUSH
101370: FOR_IN
101371: IFFALSE 101412
// if GetBWeapon ( i ) = j [ 1 ] then
101373: LD_VAR 0 4
101377: PPUSH
101378: CALL_OW 269
101382: PUSH
101383: LD_VAR 0 5
101387: PUSH
101388: LD_INT 1
101390: ARRAY
101391: EQUAL
101392: IFFALSE 101410
// begin weapon := j [ 2 ] ;
101394: LD_ADDR_VAR 0 8
101398: PUSH
101399: LD_VAR 0 5
101403: PUSH
101404: LD_INT 2
101406: ARRAY
101407: ST_TO_ADDR
// break ;
101408: GO 101412
// end ;
101410: GO 101370
101412: POP
101413: POP
// if not weapon then
101414: LD_VAR 0 8
101418: NOT
101419: IFFALSE 101423
// continue ;
101421: GO 101319
// for k in factories do
101423: LD_ADDR_VAR 0 6
101427: PUSH
101428: LD_VAR 0 2
101432: PUSH
101433: FOR_IN
101434: IFFALSE 101499
// begin weapons := AvailableWeaponList ( k ) ;
101436: LD_ADDR_VAR 0 9
101440: PUSH
101441: LD_VAR 0 6
101445: PPUSH
101446: CALL_OW 478
101450: ST_TO_ADDR
// if not weapons then
101451: LD_VAR 0 9
101455: NOT
101456: IFFALSE 101460
// continue ;
101458: GO 101433
// if weapon in weapons then
101460: LD_VAR 0 8
101464: PUSH
101465: LD_VAR 0 9
101469: IN
101470: IFFALSE 101497
// begin result := [ i , weapon ] ;
101472: LD_ADDR_VAR 0 3
101476: PUSH
101477: LD_VAR 0 4
101481: PUSH
101482: LD_VAR 0 8
101486: PUSH
101487: EMPTY
101488: LIST
101489: LIST
101490: ST_TO_ADDR
// exit ;
101491: POP
101492: POP
101493: POP
101494: POP
101495: GO 101505
// end ; end ;
101497: GO 101433
101499: POP
101500: POP
// end ;
101501: GO 101319
101503: POP
101504: POP
// end ;
101505: LD_VAR 0 3
101509: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
101510: LD_INT 0
101512: PPUSH
// if not side or side > 8 then
101513: LD_VAR 0 3
101517: NOT
101518: PUSH
101519: LD_VAR 0 3
101523: PUSH
101524: LD_INT 8
101526: GREATER
101527: OR
101528: IFFALSE 101532
// exit ;
101530: GO 101591
// if not range then
101532: LD_VAR 0 4
101536: NOT
101537: IFFALSE 101548
// range := - 12 ;
101539: LD_ADDR_VAR 0 4
101543: PUSH
101544: LD_INT 12
101546: NEG
101547: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
101548: LD_VAR 0 1
101552: PPUSH
101553: LD_VAR 0 2
101557: PPUSH
101558: LD_VAR 0 3
101562: PPUSH
101563: LD_VAR 0 4
101567: PPUSH
101568: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
101572: LD_VAR 0 1
101576: PPUSH
101577: LD_VAR 0 2
101581: PPUSH
101582: LD_VAR 0 3
101586: PPUSH
101587: CALL_OW 331
// end ;
101591: LD_VAR 0 5
101595: RET
// export function Video ( mode ) ; begin
101596: LD_INT 0
101598: PPUSH
// ingame_video = mode ;
101599: LD_ADDR_OWVAR 52
101603: PUSH
101604: LD_VAR 0 1
101608: ST_TO_ADDR
// interface_hidden = mode ;
101609: LD_ADDR_OWVAR 54
101613: PUSH
101614: LD_VAR 0 1
101618: ST_TO_ADDR
// end ;
101619: LD_VAR 0 2
101623: RET
// export function Join ( array , element ) ; begin
101624: LD_INT 0
101626: PPUSH
// result := array ^ element ;
101627: LD_ADDR_VAR 0 3
101631: PUSH
101632: LD_VAR 0 1
101636: PUSH
101637: LD_VAR 0 2
101641: ADD
101642: ST_TO_ADDR
// end ;
101643: LD_VAR 0 3
101647: RET
// export function JoinUnion ( array , element ) ; begin
101648: LD_INT 0
101650: PPUSH
// result := array union element ;
101651: LD_ADDR_VAR 0 3
101655: PUSH
101656: LD_VAR 0 1
101660: PUSH
101661: LD_VAR 0 2
101665: UNION
101666: ST_TO_ADDR
// end ;
101667: LD_VAR 0 3
101671: RET
// export function GetBehemoths ( side ) ; begin
101672: LD_INT 0
101674: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
101675: LD_ADDR_VAR 0 2
101679: PUSH
101680: LD_INT 22
101682: PUSH
101683: LD_VAR 0 1
101687: PUSH
101688: EMPTY
101689: LIST
101690: LIST
101691: PUSH
101692: LD_INT 31
101694: PUSH
101695: LD_INT 25
101697: PUSH
101698: EMPTY
101699: LIST
101700: LIST
101701: PUSH
101702: EMPTY
101703: LIST
101704: LIST
101705: PPUSH
101706: CALL_OW 69
101710: ST_TO_ADDR
// end ;
101711: LD_VAR 0 2
101715: RET
// export function Shuffle ( array ) ; var i , index ; begin
101716: LD_INT 0
101718: PPUSH
101719: PPUSH
101720: PPUSH
// result := [ ] ;
101721: LD_ADDR_VAR 0 2
101725: PUSH
101726: EMPTY
101727: ST_TO_ADDR
// if not array then
101728: LD_VAR 0 1
101732: NOT
101733: IFFALSE 101737
// exit ;
101735: GO 101836
// Randomize ;
101737: CALL_OW 10
// for i = array downto 1 do
101741: LD_ADDR_VAR 0 3
101745: PUSH
101746: DOUBLE
101747: LD_VAR 0 1
101751: INC
101752: ST_TO_ADDR
101753: LD_INT 1
101755: PUSH
101756: FOR_DOWNTO
101757: IFFALSE 101834
// begin index := rand ( 1 , array ) ;
101759: LD_ADDR_VAR 0 4
101763: PUSH
101764: LD_INT 1
101766: PPUSH
101767: LD_VAR 0 1
101771: PPUSH
101772: CALL_OW 12
101776: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
101777: LD_ADDR_VAR 0 2
101781: PUSH
101782: LD_VAR 0 2
101786: PPUSH
101787: LD_VAR 0 2
101791: PUSH
101792: LD_INT 1
101794: PLUS
101795: PPUSH
101796: LD_VAR 0 1
101800: PUSH
101801: LD_VAR 0 4
101805: ARRAY
101806: PPUSH
101807: CALL_OW 2
101811: ST_TO_ADDR
// array := Delete ( array , index ) ;
101812: LD_ADDR_VAR 0 1
101816: PUSH
101817: LD_VAR 0 1
101821: PPUSH
101822: LD_VAR 0 4
101826: PPUSH
101827: CALL_OW 3
101831: ST_TO_ADDR
// end ;
101832: GO 101756
101834: POP
101835: POP
// end ;
101836: LD_VAR 0 2
101840: RET
