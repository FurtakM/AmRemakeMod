// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export startAttacks ; export powellVeh ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 31
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 32
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 33
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 34
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 35
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
  86: LD_ADDR_EXP 24
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// amUnitsAttack = [ ] ;
  93: LD_ADDR_EXP 25
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// startAttacks = 0 ;
 107: LD_ADDR_EXP 29
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// powellBuildBase = 0 ;
 115: LD_ADDR_EXP 27
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// powellAttacks = 0 ;
 123: LD_ADDR_EXP 28
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// missionStage = 0 ;
 131: LD_ADDR_EXP 36
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// blockEvent1 = 0 ;
 139: LD_ADDR_EXP 37
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// debugMode = 1 ;
 147: LD_ADDR_EXP 38
 151: PUSH
 152: LD_INT 1
 154: ST_TO_ADDR
// PrepareHeroes ;
 155: CALL 526 0 0
// PrepareHeroesFromEpsilon ;
 159: CALL 1048 0 0
// PrepareRandoms ;
 163: CALL 1392 0 0
// PrepareLegion ;
 167: CALL 2188 0 0
// PrepareRussians ;
 171: CALL 2470 0 0
// PrepareAlliance ;
 175: CALL 2774 0 0
// PrepareDifficulty ;
 179: CALL 3662 0 0
// SetBName ( RuDep2 , zhukov ) ;
 183: LD_INT 23
 185: PPUSH
 186: LD_STRING zhukov
 188: PPUSH
 189: CALL_OW 500
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 38
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 508
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 30
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PPUSH
 318: CALL_OW 69
 322: PUSH
 323: FOR_IN
 324: IFFALSE 348
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 326: LD_VAR 0 1
 330: PPUSH
 331: CALL_OW 274
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: LD_INT 9999
 341: PPUSH
 342: CALL_OW 277
 346: GO 323
 348: POP
 349: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 350: LD_ADDR_VAR 0 1
 354: PUSH
 355: LD_INT 22
 357: PUSH
 358: LD_INT 1
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 30
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 1
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 427
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 274
 414: PPUSH
 415: LD_INT 2
 417: PPUSH
 418: LD_INT 9999
 420: PPUSH
 421: CALL_OW 277
 425: GO 402
 427: POP
 428: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 429: LD_ADDR_VAR 0 1
 433: PUSH
 434: LD_INT 22
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: LD_INT 30
 449: PUSH
 450: LD_INT 0
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 1
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 3
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ;
 508: PPOPN 1
 510: END
// every 0 0$1 do
 511: GO 513
 513: DISABLE
// begin enable ;
 514: ENABLE
// display_strings = others13 ;
 515: LD_ADDR_OWVAR 47
 519: PUSH
 520: LD_EXP 18
 524: ST_TO_ADDR
// end ; end_of_file
 525: END
// export function PrepareHeroes ; begin
 526: LD_INT 0
 528: PPUSH
// uc_side = 1 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 1
 536: ST_TO_ADDR
// uc_nation = 1 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// if JMMVeh = [ ] then
 545: LD_EXP 31
 549: PUSH
 550: EMPTY
 551: EQUAL
 552: IFFALSE 598
// begin vc_engine = 3 ;
 554: LD_ADDR_OWVAR 39
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// vc_control = 1 ;
 562: LD_ADDR_OWVAR 38
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// vc_chassis = 5 ;
 570: LD_ADDR_OWVAR 37
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// vc_weapon = 9 ;
 578: LD_ADDR_OWVAR 40
 582: PUSH
 583: LD_INT 9
 585: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 586: LD_ADDR_EXP 19
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// end else
 596: GO 680
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 598: LD_ADDR_OWVAR 37
 602: PUSH
 603: LD_EXP 31
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PUSH
 612: LD_INT 1
 614: ARRAY
 615: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 616: LD_ADDR_OWVAR 39
 620: PUSH
 621: LD_EXP 31
 625: PUSH
 626: LD_INT 2
 628: ARRAY
 629: PUSH
 630: LD_INT 1
 632: ARRAY
 633: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 634: LD_ADDR_OWVAR 38
 638: PUSH
 639: LD_EXP 31
 643: PUSH
 644: LD_INT 3
 646: ARRAY
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 652: LD_ADDR_OWVAR 40
 656: PUSH
 657: LD_EXP 31
 661: PUSH
 662: LD_INT 4
 664: ARRAY
 665: PUSH
 666: LD_INT 1
 668: ARRAY
 669: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 670: LD_ADDR_EXP 19
 674: PUSH
 675: CALL_OW 45
 679: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 680: LD_EXP 32
 684: PUSH
 685: EMPTY
 686: EQUAL
 687: NOT
 688: IFFALSE 772
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 690: LD_ADDR_OWVAR 37
 694: PUSH
 695: LD_EXP 32
 699: PUSH
 700: LD_INT 1
 702: ARRAY
 703: PUSH
 704: LD_INT 1
 706: ARRAY
 707: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 708: LD_ADDR_OWVAR 39
 712: PUSH
 713: LD_EXP 32
 717: PUSH
 718: LD_INT 2
 720: ARRAY
 721: PUSH
 722: LD_INT 1
 724: ARRAY
 725: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 726: LD_ADDR_OWVAR 38
 730: PUSH
 731: LD_EXP 32
 735: PUSH
 736: LD_INT 3
 738: ARRAY
 739: PUSH
 740: LD_INT 1
 742: ARRAY
 743: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 744: LD_ADDR_OWVAR 40
 748: PUSH
 749: LD_EXP 32
 753: PUSH
 754: LD_INT 4
 756: ARRAY
 757: PUSH
 758: LD_INT 1
 760: ARRAY
 761: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 762: LD_ADDR_EXP 20
 766: PUSH
 767: CALL_OW 45
 771: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 772: LD_EXP 19
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 784: LD_EXP 20
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 796: LD_EXP 19
 800: PPUSH
 801: LD_INT 99
 803: PPUSH
 804: LD_INT 154
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 48
// if JMMGirlVeh then
 814: LD_EXP 32
 818: IFFALSE 838
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 820: LD_EXP 20
 824: PPUSH
 825: LD_INT 98
 827: PPUSH
 828: LD_INT 159
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 838: LD_ADDR_EXP 1
 842: PUSH
 843: LD_STRING 14_JMM
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: CALL 3140 0 2
 853: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 854: LD_EXP 1
 858: PPUSH
 859: LD_EXP 19
 863: PPUSH
 864: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 868: LD_EXP 32
 872: PUSH
 873: EMPTY
 874: EQUAL
 875: NOT
 876: IFFALSE 998
// begin if JMMGirl = 1 then
 878: LD_EXP 33
 882: PUSH
 883: LD_INT 1
 885: EQUAL
 886: IFFALSE 918
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 888: LD_ADDR_EXP 2
 892: PUSH
 893: LD_STRING 14_Joan
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: CALL 3140 0 2
 903: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 904: LD_EXP 2
 908: PPUSH
 909: LD_EXP 20
 913: PPUSH
 914: CALL_OW 52
// end ; if JMMGirl = 2 then
 918: LD_EXP 33
 922: PUSH
 923: LD_INT 2
 925: EQUAL
 926: IFFALSE 958
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 928: LD_ADDR_EXP 4
 932: PUSH
 933: LD_STRING 14_Lisa
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: CALL 3140 0 2
 943: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 944: LD_EXP 4
 948: PPUSH
 949: LD_EXP 20
 953: PPUSH
 954: CALL_OW 52
// end ; if JMMGirl = 3 then
 958: LD_EXP 33
 962: PUSH
 963: LD_INT 3
 965: EQUAL
 966: IFFALSE 998
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 968: LD_ADDR_EXP 16
 972: PUSH
 973: LD_STRING 14_Connie
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 3140 0 2
 983: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
 984: LD_EXP 16
 988: PPUSH
 989: LD_EXP 20
 993: PPUSH
 994: CALL_OW 52
// end ; end ; uc_side = 4 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_STRING Powell
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL 3140 0 2
1021: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
1022: LD_EXP 17
1026: PPUSH
1027: LD_INT 47
1029: PPUSH
1030: LD_INT 63
1032: PPUSH
1033: LD_INT 5
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL_OW 50
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareHeroesFromEpsilon ; begin
1048: LD_INT 0
1050: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1051: LD_ADDR_EXP 4
1055: PUSH
1056: LD_STRING Lisa
1058: PPUSH
1059: CALL 3197 0 1
1063: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1064: LD_ADDR_EXP 5
1068: PUSH
1069: LD_STRING Donaldson
1071: PPUSH
1072: CALL 3197 0 1
1076: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1077: LD_ADDR_EXP 6
1081: PUSH
1082: LD_STRING Bobby
1084: PPUSH
1085: CALL 3197 0 1
1089: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1090: LD_ADDR_EXP 7
1094: PUSH
1095: LD_STRING Cyrus
1097: PPUSH
1098: CALL 3197 0 1
1102: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1103: LD_ADDR_EXP 8
1107: PUSH
1108: LD_STRING Denis
1110: PPUSH
1111: CALL 3197 0 1
1115: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1116: LD_ADDR_EXP 9
1120: PUSH
1121: LD_STRING Brown
1123: PPUSH
1124: CALL 3197 0 1
1128: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1129: LD_ADDR_EXP 10
1133: PUSH
1134: LD_STRING Gladstone
1136: PPUSH
1137: CALL 3197 0 1
1141: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1142: LD_ADDR_EXP 11
1146: PUSH
1147: LD_STRING Houten
1149: PPUSH
1150: CALL 3197 0 1
1154: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1155: LD_ADDR_EXP 12
1159: PUSH
1160: LD_STRING Cornel
1162: PPUSH
1163: CALL 3197 0 1
1167: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1168: LD_ADDR_EXP 13
1172: PUSH
1173: LD_STRING Gary
1175: PPUSH
1176: CALL 3197 0 1
1180: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1181: LD_ADDR_EXP 14
1185: PUSH
1186: LD_STRING Frank
1188: PPUSH
1189: CALL 3197 0 1
1193: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1194: LD_ADDR_EXP 15
1198: PUSH
1199: LD_STRING Kikuchi
1201: PPUSH
1202: CALL 3197 0 1
1206: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1222: LD_EXP 5
1226: PPUSH
1227: LD_INT 6
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1237: LD_EXP 6
1241: PPUSH
1242: LD_INT 6
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1252: LD_EXP 7
1256: PPUSH
1257: LD_INT 6
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1267: LD_EXP 8
1271: PPUSH
1272: LD_INT 6
1274: PPUSH
1275: LD_INT 0
1277: PPUSH
1278: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1282: LD_EXP 9
1286: PPUSH
1287: LD_INT 6
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1297: LD_EXP 10
1301: PPUSH
1302: LD_INT 6
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1312: LD_EXP 11
1316: PPUSH
1317: LD_INT 6
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1327: LD_EXP 12
1331: PPUSH
1332: LD_INT 6
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1342: LD_EXP 13
1346: PPUSH
1347: LD_INT 6
1349: PPUSH
1350: LD_INT 0
1352: PPUSH
1353: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1357: LD_EXP 14
1361: PPUSH
1362: LD_INT 6
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1372: LD_EXP 15
1376: PPUSH
1377: LD_INT 6
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 49
// end ;
1387: LD_VAR 0 1
1391: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1392: LD_INT 0
1394: PPUSH
1395: PPUSH
1396: PPUSH
1397: PPUSH
1398: PPUSH
// uc_side = 4 ;
1399: LD_ADDR_OWVAR 20
1403: PUSH
1404: LD_INT 4
1406: ST_TO_ADDR
// uc_nation = 1 ;
1407: LD_ADDR_OWVAR 21
1411: PUSH
1412: LD_INT 1
1414: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1415: LD_ADDR_EXP 18
1419: PUSH
1420: LD_STRING 13s_others
1422: PPUSH
1423: CALL_OW 31
1427: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1428: LD_ADDR_VAR 0 4
1432: PUSH
1433: LD_INT 22
1435: PUSH
1436: LD_INT 4
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 21
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PPUSH
1457: CALL_OW 69
1461: PUSH
1462: LD_EXP 17
1466: PUSH
1467: EMPTY
1468: LIST
1469: DIFF
1470: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1471: LD_ADDR_VAR 0 5
1475: PUSH
1476: LD_VAR 0 4
1480: PPUSH
1481: CALL 3254 0 1
1485: ST_TO_ADDR
// if others13 >= 8 then
1486: LD_EXP 18
1490: PUSH
1491: LD_INT 8
1493: GREATEREQUAL
1494: IFFALSE 1555
// begin for i = 1 to 8 do
1496: LD_ADDR_VAR 0 2
1500: PUSH
1501: DOUBLE
1502: LD_INT 1
1504: DEC
1505: ST_TO_ADDR
1506: LD_INT 8
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1551
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1512: LD_EXP 18
1516: PUSH
1517: LD_INT 1
1519: ARRAY
1520: PPUSH
1521: LD_INT 6
1523: PPUSH
1524: LD_INT 0
1526: PPUSH
1527: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1531: LD_ADDR_EXP 18
1535: PUSH
1536: LD_EXP 18
1540: PPUSH
1541: LD_INT 1
1543: PPUSH
1544: CALL_OW 3
1548: ST_TO_ADDR
// end ;
1549: GO 1509
1551: POP
1552: POP
// end else
1553: GO 1614
// begin for i = 1 to others13 do
1555: LD_ADDR_VAR 0 2
1559: PUSH
1560: DOUBLE
1561: LD_INT 1
1563: DEC
1564: ST_TO_ADDR
1565: LD_EXP 18
1569: PUSH
1570: FOR_TO
1571: IFFALSE 1612
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1573: LD_EXP 18
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: LD_INT 6
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1592: LD_ADDR_EXP 18
1596: PUSH
1597: LD_EXP 18
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 3
1609: ST_TO_ADDR
// end ;
1610: GO 1570
1612: POP
1613: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_INT 22
1621: PUSH
1622: LD_INT 4
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 69
1647: PUSH
1648: LD_EXP 17
1652: PUSH
1653: EMPTY
1654: LIST
1655: DIFF
1656: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL 3254 0 1
1671: ST_TO_ADDR
// if others13 >= heroLenght then
1672: LD_EXP 18
1676: PUSH
1677: LD_VAR 0 5
1681: GREATEREQUAL
1682: IFFALSE 1745
// begin for i = 1 to heroLenght do
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: DOUBLE
1690: LD_INT 1
1692: DEC
1693: ST_TO_ADDR
1694: LD_VAR 0 5
1698: PUSH
1699: FOR_TO
1700: IFFALSE 1741
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: LD_INT 6
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1721: LD_ADDR_EXP 18
1725: PUSH
1726: LD_EXP 18
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: CALL_OW 3
1738: ST_TO_ADDR
// end ;
1739: GO 1699
1741: POP
1742: POP
// end else
1743: GO 1804
// begin for i = 1 to others13 do
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: DOUBLE
1751: LD_INT 1
1753: DEC
1754: ST_TO_ADDR
1755: LD_EXP 18
1759: PUSH
1760: FOR_TO
1761: IFFALSE 1802
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1763: LD_EXP 18
1767: PUSH
1768: LD_INT 1
1770: ARRAY
1771: PPUSH
1772: LD_INT 6
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1782: LD_ADDR_EXP 18
1786: PUSH
1787: LD_EXP 18
1791: PPUSH
1792: LD_INT 1
1794: PPUSH
1795: CALL_OW 3
1799: ST_TO_ADDR
// end ;
1800: GO 1760
1802: POP
1803: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1804: LD_ADDR_VAR 0 4
1808: PUSH
1809: LD_INT 22
1811: PUSH
1812: LD_INT 4
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 21
1821: PUSH
1822: LD_INT 1
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PPUSH
1833: CALL_OW 69
1837: PUSH
1838: LD_EXP 17
1842: PUSH
1843: EMPTY
1844: LIST
1845: DIFF
1846: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1847: LD_ADDR_VAR 0 5
1851: PUSH
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 3254 0 1
1861: ST_TO_ADDR
// if heroLenght < 19 then
1862: LD_VAR 0 5
1866: PUSH
1867: LD_INT 19
1869: LESS
1870: IFFALSE 1968
// for i = 1 to 19 - heroLenght do
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: DOUBLE
1878: LD_INT 1
1880: DEC
1881: ST_TO_ADDR
1882: LD_INT 19
1884: PUSH
1885: LD_VAR 0 5
1889: MINUS
1890: PUSH
1891: FOR_TO
1892: IFFALSE 1966
// begin hc_gallery =  ;
1894: LD_ADDR_OWVAR 33
1898: PUSH
1899: LD_STRING 
1901: ST_TO_ADDR
// hc_name =  ;
1902: LD_ADDR_OWVAR 26
1906: PUSH
1907: LD_STRING 
1909: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
1910: LD_INT 0
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_INT 4
1918: PPUSH
1919: CALL_OW 12
1923: PPUSH
1924: LD_INT 6
1926: PPUSH
1927: LD_INT 8
1929: PPUSH
1930: CALL_OW 12
1934: PPUSH
1935: CALL_OW 380
// un = CreateHuman ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: CALL_OW 44
1948: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
1949: LD_VAR 0 3
1953: PPUSH
1954: LD_INT 6
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL_OW 49
// end ;
1964: GO 1891
1966: POP
1967: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
1968: LD_ADDR_VAR 0 4
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: LD_INT 4
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 21
1985: PUSH
1986: LD_INT 1
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PPUSH
1997: CALL_OW 69
2001: PUSH
2002: LD_EXP 17
2006: PUSH
2007: LD_EXP 1
2011: PUSH
2012: LD_EXP 2
2016: PUSH
2017: LD_EXP 3
2021: PUSH
2022: LD_EXP 4
2026: PUSH
2027: LD_EXP 5
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 7
2041: PUSH
2042: LD_EXP 8
2046: PUSH
2047: LD_EXP 9
2051: PUSH
2052: LD_EXP 10
2056: PUSH
2057: LD_EXP 11
2061: PUSH
2062: LD_EXP 12
2066: PUSH
2067: LD_EXP 13
2071: PUSH
2072: LD_EXP 14
2076: PUSH
2077: LD_EXP 15
2081: PUSH
2082: LD_EXP 16
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: DIFF
2106: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2107: LD_ADDR_EXP 24
2111: PUSH
2112: LD_VAR 0 4
2116: PPUSH
2117: LD_INT 1
2119: PPUSH
2120: CALL 3295 0 2
2124: ST_TO_ADDR
// for i = 1 to 8 do
2125: LD_ADDR_VAR 0 2
2129: PUSH
2130: DOUBLE
2131: LD_INT 1
2133: DEC
2134: ST_TO_ADDR
2135: LD_INT 8
2137: PUSH
2138: FOR_TO
2139: IFFALSE 2169
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2141: LD_ADDR_EXP 25
2145: PUSH
2146: LD_EXP 25
2150: PUSH
2151: LD_EXP 24
2155: PUSH
2156: LD_VAR 0 2
2160: ARRAY
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: ADD
2166: ST_TO_ADDR
2167: GO 2138
2169: POP
2170: POP
// SetClass ( amUnitsAttack , 1 ) ;
2171: LD_EXP 25
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: CALL_OW 336
// end ; end_of_file
2183: LD_VAR 0 1
2187: RET
// export function PrepareLegion ; var i ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
// uc_side = 8 ;
2192: LD_ADDR_OWVAR 20
2196: PUSH
2197: LD_INT 8
2199: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
2200: LD_ADDR_EXP 23
2204: PUSH
2205: LD_STRING Kurt
2207: PPUSH
2208: LD_INT 0
2210: PPUSH
2211: CALL 3140 0 2
2215: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
2216: LD_EXP 23
2220: PPUSH
2221: LD_INT 122
2223: PPUSH
2224: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
2228: LD_INT 8
2230: PPUSH
2231: LD_INT 2
2233: PPUSH
2234: LD_INT 122
2236: PPUSH
2237: LD_INT 10
2239: PPUSH
2240: LD_INT 2
2242: PPUSH
2243: LD_INT 4
2245: PPUSH
2246: CALL 4127 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
2250: LD_INT 8
2252: PPUSH
2253: LD_INT 2
2255: PPUSH
2256: LD_INT 99
2258: PPUSH
2259: LD_INT 10
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: LD_INT 2
2267: PPUSH
2268: CALL 4127 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
2272: LD_INT 8
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: LD_INT 104
2280: PPUSH
2281: LD_INT 10
2283: PPUSH
2284: LD_INT 1
2286: PPUSH
2287: LD_INT 2
2289: PPUSH
2290: CALL 4127 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
2294: LD_INT 8
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: LD_INT 104
2302: PPUSH
2303: LD_INT 10
2305: PPUSH
2306: LD_INT 8
2308: PPUSH
2309: LD_INT 1
2311: PPUSH
2312: CALL 4127 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
2316: LD_INT 8
2318: PPUSH
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 118
2324: PPUSH
2325: LD_INT 10
2327: PPUSH
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 1
2333: PPUSH
2334: CALL 4127 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
2338: LD_INT 8
2340: PPUSH
2341: LD_INT 2
2343: PPUSH
2344: LD_INT 117
2346: PPUSH
2347: LD_INT 10
2349: PPUSH
2350: LD_INT 3
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: CALL 4127 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2360: LD_ADDR_VAR 0 2
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 8
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 21
2377: PUSH
2378: LD_INT 3
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 30
2387: PUSH
2388: LD_INT 32
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 58
2397: PUSH
2398: EMPTY
2399: LIST
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: PPUSH
2407: CALL_OW 69
2411: PUSH
2412: FOR_IN
2413: IFFALSE 2441
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
2415: LD_INT 8
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: LD_VAR 0 2
2425: PPUSH
2426: LD_INT 10
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL 4127 0 6
2439: GO 2412
2441: POP
2442: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
2443: LD_INT 8
2445: PPUSH
2446: LD_INT 2
2448: PPUSH
2449: LD_INT 140
2451: PPUSH
2452: LD_INT 10
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL 4127 0 6
// end ; end_of_file
2465: LD_VAR 0 1
2469: RET
// export function PrepareRussians ; var i ; begin
2470: LD_INT 0
2472: PPUSH
2473: PPUSH
// uc_side = 3 ;
2474: LD_ADDR_OWVAR 20
2478: PUSH
2479: LD_INT 3
2481: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2482: LD_ADDR_EXP 21
2486: PUSH
2487: LD_STRING Platonov
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL 3140 0 2
2497: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
2498: LD_EXP 21
2502: PPUSH
2503: LD_INT 23
2505: PPUSH
2506: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
2510: LD_INT 3
2512: PPUSH
2513: LD_INT 3
2515: PPUSH
2516: LD_INT 26
2518: PPUSH
2519: LD_INT 10
2521: PPUSH
2522: LD_INT 2
2524: PPUSH
2525: LD_INT 5
2527: PPUSH
2528: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
2532: LD_INT 3
2534: PPUSH
2535: LD_INT 3
2537: PPUSH
2538: LD_INT 26
2540: PPUSH
2541: LD_INT 10
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: LD_INT 6
2549: PPUSH
2550: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
2554: LD_INT 3
2556: PPUSH
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 27
2562: PPUSH
2563: LD_INT 10
2565: PPUSH
2566: LD_INT 9
2568: PPUSH
2569: LD_INT 6
2571: PPUSH
2572: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 27
2584: PPUSH
2585: LD_INT 10
2587: PPUSH
2588: LD_INT 3
2590: PPUSH
2591: LD_INT 3
2593: PPUSH
2594: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
2598: LD_INT 3
2600: PPUSH
2601: LD_INT 3
2603: PPUSH
2604: LD_INT 4
2606: PPUSH
2607: LD_INT 10
2609: PPUSH
2610: LD_INT 3
2612: PPUSH
2613: LD_INT 6
2615: PPUSH
2616: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 10
2628: PPUSH
2629: LD_INT 10
2631: PPUSH
2632: LD_INT 3
2634: PPUSH
2635: LD_INT 6
2637: PPUSH
2638: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_INT 10
2653: PPUSH
2654: LD_INT 4
2656: PPUSH
2657: LD_INT 3
2659: PPUSH
2660: CALL 4127 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
2664: LD_INT 3
2666: PPUSH
2667: LD_INT 3
2669: PPUSH
2670: LD_INT 1
2672: PPUSH
2673: LD_INT 10
2675: PPUSH
2676: LD_INT 4
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL 4127 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: LD_INT 22
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 21
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 30
2713: PUSH
2714: LD_INT 32
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 58
2723: PUSH
2724: EMPTY
2725: LIST
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2767
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_VAR 0 2
2751: PPUSH
2752: LD_INT 10
2754: PPUSH
2755: LD_INT 1
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL 4127 0 6
2765: GO 2738
2767: POP
2768: POP
// end ; end_of_file
2769: LD_VAR 0 1
2773: RET
// export function PrepareAlliance ; var i ; begin
2774: LD_INT 0
2776: PPUSH
2777: PPUSH
// uc_side = 7 ;
2778: LD_ADDR_OWVAR 20
2782: PUSH
2783: LD_INT 7
2785: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
2786: LD_ADDR_EXP 22
2790: PUSH
2791: LD_STRING Roth
2793: PPUSH
2794: LD_INT 0
2796: PPUSH
2797: CALL 3140 0 2
2801: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
2802: LD_EXP 22
2806: PPUSH
2807: LD_INT 249
2809: PPUSH
2810: LD_INT 187
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
2820: LD_EXP 22
2824: PPUSH
2825: LD_INT 248
2827: PPUSH
2828: LD_INT 187
2830: PPUSH
2831: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
2835: LD_INT 7
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_INT 45
2843: PPUSH
2844: LD_INT 10
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL 4127 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
2857: LD_INT 7
2859: PPUSH
2860: LD_INT 3
2862: PPUSH
2863: LD_INT 45
2865: PPUSH
2866: LD_INT 10
2868: PPUSH
2869: LD_INT 2
2871: PPUSH
2872: LD_INT 2
2874: PPUSH
2875: CALL 4127 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
2879: LD_INT 7
2881: PPUSH
2882: LD_INT 1
2884: PPUSH
2885: LD_INT 194
2887: PPUSH
2888: LD_INT 10
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: CALL 4127 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
2901: LD_INT 7
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 194
2909: PPUSH
2910: LD_INT 10
2912: PPUSH
2913: LD_INT 8
2915: PPUSH
2916: LD_INT 6
2918: PPUSH
2919: CALL 4127 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
2923: LD_INT 7
2925: PPUSH
2926: LD_INT 1
2928: PPUSH
2929: LD_INT 156
2931: PPUSH
2932: LD_INT 10
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 6
2940: PPUSH
2941: CALL 4127 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
2945: LD_INT 7
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 162
2953: PPUSH
2954: LD_INT 10
2956: PPUSH
2957: LD_INT 3
2959: PPUSH
2960: LD_INT 6
2962: PPUSH
2963: CALL 4127 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
2967: LD_INT 7
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_INT 39
2975: PPUSH
2976: LD_INT 10
2978: PPUSH
2979: LD_INT 4
2981: PPUSH
2982: LD_INT 4
2984: PPUSH
2985: CALL 4127 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
2989: LD_INT 7
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: LD_INT 133
2997: PPUSH
2998: LD_INT 10
3000: PPUSH
3001: LD_INT 4
3003: PPUSH
3004: LD_INT 4
3006: PPUSH
3007: CALL 4127 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
3011: LD_INT 7
3013: PPUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 46
3019: PPUSH
3020: LD_INT 10
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 2
3028: PPUSH
3029: CALL 4127 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 7
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 21
3050: PUSH
3051: LD_INT 3
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 32
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 58
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: FOR_IN
3086: IFFALSE 3133
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
3088: LD_INT 7
3090: PPUSH
3091: LD_INT 1
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 1
3103: PPUSH
3104: LD_INT 2
3106: PPUSH
3107: CALL_OW 12
3111: ARRAY
3112: PPUSH
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 10
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: CALL 4127 0 6
3131: GO 3085
3133: POP
3134: POP
// end ; end_of_file
3135: LD_VAR 0 1
3139: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
// if exist_mode then
3144: LD_VAR 0 2
3148: IFFALSE 3167
// unit := CreateCharacter ( ident ) else
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_VAR 0 1
3159: PPUSH
3160: CALL_OW 34
3164: ST_TO_ADDR
3165: GO 3182
// unit := NewCharacter ( ident ) ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL_OW 25
3181: ST_TO_ADDR
// result := unit ;
3182: LD_ADDR_VAR 0 3
3186: PUSH
3187: LD_VAR 0 4
3191: ST_TO_ADDR
// end ;
3192: LD_VAR 0 3
3196: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
3197: LD_INT 0
3199: PPUSH
3200: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
3201: LD_STRING 13s_
3203: PUSH
3204: LD_VAR 0 1
3208: STR
3209: PPUSH
3210: CALL_OW 28
3214: PUSH
3215: LD_INT 1
3217: EQUAL
3218: IFFALSE 3239
// unit = CreateCharacter ( 13s_ & ident ) ;
3220: LD_ADDR_VAR 0 3
3224: PUSH
3225: LD_STRING 13s_
3227: PUSH
3228: LD_VAR 0 1
3232: STR
3233: PPUSH
3234: CALL_OW 34
3238: ST_TO_ADDR
// result := unit ;
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_VAR 0 3
3248: ST_TO_ADDR
// end ;
3249: LD_VAR 0 2
3253: RET
// export function TabLenght ( tab ) ; var i ; begin
3254: LD_INT 0
3256: PPUSH
3257: PPUSH
// for i = 1 to tab do
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: DOUBLE
3264: LD_INT 1
3266: DEC
3267: ST_TO_ADDR
3268: LD_VAR 0 1
3272: PUSH
3273: FOR_TO
3274: IFFALSE 3288
// result = i ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 3
3285: ST_TO_ADDR
3286: GO 3273
3288: POP
3289: POP
// end ;
3290: LD_VAR 0 2
3294: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
3295: LD_INT 0
3297: PPUSH
3298: PPUSH
3299: PPUSH
3300: PPUSH
// if not list then
3301: LD_VAR 0 1
3305: NOT
3306: IFFALSE 3310
// exit ;
3308: GO 3657
// result := [ ] ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// for i in list do
3317: LD_ADDR_VAR 0 4
3321: PUSH
3322: LD_VAR 0 1
3326: PUSH
3327: FOR_IN
3328: IFFALSE 3569
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
3330: LD_ADDR_VAR 0 6
3334: PUSH
3335: LD_VAR 0 4
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: CALL_OW 259
3347: PUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: LD_INT 2
3355: PPUSH
3356: CALL_OW 259
3360: PLUS
3361: PUSH
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: CALL_OW 259
3374: PLUS
3375: PUSH
3376: LD_VAR 0 4
3380: PPUSH
3381: LD_INT 4
3383: PPUSH
3384: CALL_OW 259
3388: PLUS
3389: PUSH
3390: LD_INT 4
3392: DIV
3393: ST_TO_ADDR
// if not result then
3394: LD_VAR 0 3
3398: NOT
3399: IFFALSE 3425
// result := [ [ i , tmp ] ] else
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: LD_VAR 0 4
3410: PUSH
3411: LD_VAR 0 6
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: ST_TO_ADDR
3423: GO 3567
// begin if result [ result ] [ 2 ] < tmp then
3425: LD_VAR 0 3
3429: PUSH
3430: LD_VAR 0 3
3434: ARRAY
3435: PUSH
3436: LD_INT 2
3438: ARRAY
3439: PUSH
3440: LD_VAR 0 6
3444: LESS
3445: IFFALSE 3487
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_VAR 0 3
3456: PPUSH
3457: LD_VAR 0 3
3461: PUSH
3462: LD_INT 1
3464: PLUS
3465: PPUSH
3466: LD_VAR 0 4
3470: PUSH
3471: LD_VAR 0 6
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL_OW 2
3484: ST_TO_ADDR
3485: GO 3567
// for j = 1 to result do
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: DOUBLE
3493: LD_INT 1
3495: DEC
3496: ST_TO_ADDR
3497: LD_VAR 0 3
3501: PUSH
3502: FOR_TO
3503: IFFALSE 3565
// begin if tmp < result [ j ] [ 2 ] then
3505: LD_VAR 0 6
3509: PUSH
3510: LD_VAR 0 3
3514: PUSH
3515: LD_VAR 0 5
3519: ARRAY
3520: PUSH
3521: LD_INT 2
3523: ARRAY
3524: LESS
3525: IFFALSE 3563
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_VAR 0 5
3541: PPUSH
3542: LD_VAR 0 4
3546: PUSH
3547: LD_VAR 0 6
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PPUSH
3556: CALL_OW 2
3560: ST_TO_ADDR
// break ;
3561: GO 3565
// end ; end ;
3563: GO 3502
3565: POP
3566: POP
// end ; end ;
3567: GO 3327
3569: POP
3570: POP
// if result and not asc then
3571: LD_VAR 0 3
3575: PUSH
3576: LD_VAR 0 2
3580: NOT
3581: AND
3582: IFFALSE 3657
// begin tmp := result ;
3584: LD_ADDR_VAR 0 6
3588: PUSH
3589: LD_VAR 0 3
3593: ST_TO_ADDR
// for i = tmp downto 1 do
3594: LD_ADDR_VAR 0 4
3598: PUSH
3599: DOUBLE
3600: LD_VAR 0 6
3604: INC
3605: ST_TO_ADDR
3606: LD_INT 1
3608: PUSH
3609: FOR_DOWNTO
3610: IFFALSE 3655
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3612: LD_ADDR_VAR 0 3
3616: PUSH
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_VAR 0 6
3626: PUSH
3627: LD_VAR 0 4
3631: MINUS
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 6
3641: PUSH
3642: LD_VAR 0 4
3646: ARRAY
3647: PPUSH
3648: CALL_OW 1
3652: ST_TO_ADDR
3653: GO 3609
3655: POP
3656: POP
// end ; end ;
3657: LD_VAR 0 3
3661: RET
// export function PrepareDifficulty ; begin
3662: LD_INT 0
3664: PPUSH
// if difficulty = 1 then
3665: LD_OWVAR 67
3669: PUSH
3670: LD_INT 1
3672: EQUAL
3673: IFFALSE 3701
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3675: LD_INT 51
3677: PPUSH
3678: LD_INT 6
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3688: LD_INT 57
3690: PPUSH
3691: LD_INT 6
3693: PPUSH
3694: LD_INT 2
3696: PPUSH
3697: CALL_OW 322
// end ; if difficulty = 2 then
3701: LD_OWVAR 67
3705: PUSH
3706: LD_INT 2
3708: EQUAL
3709: IFFALSE 3763
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3711: LD_INT 51
3713: PPUSH
3714: LD_INT 6
3716: PPUSH
3717: LD_INT 2
3719: PPUSH
3720: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3724: LD_INT 57
3726: PPUSH
3727: LD_INT 6
3729: PPUSH
3730: LD_INT 2
3732: PPUSH
3733: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3737: LD_INT 52
3739: PPUSH
3740: LD_INT 6
3742: PPUSH
3743: LD_INT 2
3745: PPUSH
3746: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3750: LD_INT 58
3752: PPUSH
3753: LD_INT 6
3755: PPUSH
3756: LD_INT 2
3758: PPUSH
3759: CALL_OW 322
// end ; if difficulty = 3 then
3763: LD_OWVAR 67
3767: PUSH
3768: LD_INT 3
3770: EQUAL
3771: IFFALSE 3851
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
3773: LD_INT 51
3775: PPUSH
3776: LD_INT 6
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3786: LD_INT 57
3788: PPUSH
3789: LD_INT 6
3791: PPUSH
3792: LD_INT 2
3794: PPUSH
3795: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3799: LD_INT 52
3801: PPUSH
3802: LD_INT 6
3804: PPUSH
3805: LD_INT 2
3807: PPUSH
3808: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3812: LD_INT 58
3814: PPUSH
3815: LD_INT 6
3817: PPUSH
3818: LD_INT 2
3820: PPUSH
3821: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3825: LD_INT 53
3827: PPUSH
3828: LD_INT 6
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3838: LD_INT 59
3840: PPUSH
3841: LD_INT 6
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: CALL_OW 322
// end ; end ;
3851: LD_VAR 0 1
3855: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3856: LD_INT 0
3858: PPUSH
3859: PPUSH
3860: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 1
3870: PUSH
3871: LD_EXP 1
3875: PUSH
3876: LD_EXP 2
3880: PUSH
3881: LD_EXP 3
3885: PUSH
3886: LD_EXP 4
3890: PUSH
3891: LD_EXP 5
3895: PUSH
3896: LD_EXP 6
3900: PUSH
3901: LD_EXP 7
3905: PUSH
3906: LD_EXP 8
3910: PUSH
3911: LD_EXP 9
3915: PUSH
3916: LD_EXP 10
3920: PUSH
3921: LD_EXP 11
3925: PUSH
3926: LD_EXP 12
3930: PUSH
3931: LD_EXP 13
3935: PUSH
3936: LD_EXP 14
3940: PUSH
3941: LD_EXP 15
3945: PUSH
3946: LD_EXP 17
3950: PUSH
3951: LD_EXP 16
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: DIFF
3975: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3976: LD_ADDR_VAR 0 6
3980: PUSH
3981: LD_INT 1
3983: PPUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 12
3993: ST_TO_ADDR
// for i = 1 to characters do
3994: LD_ADDR_VAR 0 5
3998: PUSH
3999: DOUBLE
4000: LD_INT 1
4002: DEC
4003: ST_TO_ADDR
4004: LD_VAR 0 1
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4120
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4012: LD_VAR 0 5
4016: PUSH
4017: LD_VAR 0 6
4021: EQUAL
4022: PUSH
4023: LD_VAR 0 1
4027: PUSH
4028: LD_VAR 0 5
4032: ARRAY
4033: PPUSH
4034: CALL_OW 258
4038: PUSH
4039: LD_INT 1
4041: EQUAL
4042: AND
4043: IFFALSE 4065
// Say ( characters [ i ] , dialogMID ) ;
4045: LD_VAR 0 1
4049: PUSH
4050: LD_VAR 0 5
4054: ARRAY
4055: PPUSH
4056: LD_VAR 0 2
4060: PPUSH
4061: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4065: LD_VAR 0 5
4069: PUSH
4070: LD_VAR 0 6
4074: EQUAL
4075: PUSH
4076: LD_VAR 0 1
4080: PUSH
4081: LD_VAR 0 5
4085: ARRAY
4086: PPUSH
4087: CALL_OW 258
4091: PUSH
4092: LD_INT 2
4094: EQUAL
4095: AND
4096: IFFALSE 4118
// Say ( characters [ i ] , dialogFID ) ;
4098: LD_VAR 0 1
4102: PUSH
4103: LD_VAR 0 5
4107: ARRAY
4108: PPUSH
4109: LD_VAR 0 3
4113: PPUSH
4114: CALL_OW 88
// end ;
4118: GO 4009
4120: POP
4121: POP
// end ;
4122: LD_VAR 0 4
4126: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
4127: LD_INT 0
4129: PPUSH
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
// for i = 1 to count do
4134: LD_ADDR_VAR 0 8
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_VAR 0 6
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4231
// begin uc_side = side ;
4152: LD_ADDR_OWVAR 20
4156: PUSH
4157: LD_VAR 0 1
4161: ST_TO_ADDR
// uc_nation = nation ;
4162: LD_ADDR_OWVAR 21
4166: PUSH
4167: LD_VAR 0 2
4171: ST_TO_ADDR
// hc_gallery =  ;
4172: LD_ADDR_OWVAR 33
4176: PUSH
4177: LD_STRING 
4179: ST_TO_ADDR
// hc_name =  ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING 
4187: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4188: LD_INT 0
4190: PPUSH
4191: LD_VAR 0 5
4195: PPUSH
4196: LD_VAR 0 4
4200: PPUSH
4201: CALL_OW 380
// un = CreateHuman ;
4205: LD_ADDR_VAR 0 10
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4215: LD_VAR 0 10
4219: PPUSH
4220: LD_VAR 0 3
4224: PPUSH
4225: CALL_OW 52
// end ;
4229: GO 4149
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 7
4237: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
4238: LD_INT 0
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
4246: PPUSH
4247: PPUSH
4248: PPUSH
4249: PPUSH
4250: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
4251: LD_INT 2100
4253: PUSH
4254: LD_INT 3150
4256: PUSH
4257: LD_INT 4200
4259: PUSH
4260: LD_INT 5250
4262: PUSH
4263: LD_INT 6300
4265: PUSH
4266: LD_INT 7350
4268: PUSH
4269: LD_INT 8400
4271: PUSH
4272: LD_INT 9450
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 8
4290: PPUSH
4291: CALL_OW 12
4295: ARRAY
4296: PPUSH
4297: CALL_OW 67
// amChassisTab = [ ] ;
4301: LD_ADDR_VAR 0 19
4305: PUSH
4306: EMPTY
4307: ST_TO_ADDR
// arChassisTab = [ ] ;
4308: LD_ADDR_VAR 0 18
4312: PUSH
4313: EMPTY
4314: ST_TO_ADDR
// ruChassisTab = [ ] ;
4315: LD_ADDR_VAR 0 17
4319: PUSH
4320: EMPTY
4321: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4322: LD_INT 35
4324: PPUSH
4325: CALL_OW 67
// if nation = 1 then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_INT 1
4336: EQUAL
4337: IFFALSE 4828
// begin uc_side = side ;
4339: LD_ADDR_OWVAR 20
4343: PUSH
4344: LD_VAR 0 2
4348: ST_TO_ADDR
// uc_nation = nation ;
4349: LD_ADDR_OWVAR 21
4353: PUSH
4354: LD_VAR 0 5
4358: ST_TO_ADDR
// vc_engine = vehengine ;
4359: LD_ADDR_OWVAR 39
4363: PUSH
4364: LD_VAR 0 6
4368: ST_TO_ADDR
// vc_control = vehcontrol ;
4369: LD_ADDR_OWVAR 38
4373: PUSH
4374: LD_VAR 0 7
4378: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4379: LD_ADDR_OWVAR 40
4383: PUSH
4384: LD_VAR 0 10
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_VAR 0 10
4396: PPUSH
4397: CALL_OW 12
4401: ARRAY
4402: ST_TO_ADDR
// for j = 1 to AMWeapon do
4403: LD_ADDR_VAR 0 14
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_VAR 0 10
4417: PUSH
4418: FOR_TO
4419: IFFALSE 4720
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4421: LD_VAR 0 10
4425: PUSH
4426: LD_VAR 0 14
4430: ARRAY
4431: PUSH
4432: LD_INT 2
4434: EQUAL
4435: PUSH
4436: LD_VAR 0 10
4440: PUSH
4441: LD_VAR 0 14
4445: ARRAY
4446: PUSH
4447: LD_INT 3
4449: EQUAL
4450: OR
4451: IFFALSE 4504
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4453: LD_ADDR_VAR 0 19
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: LD_INT 3
4466: PUSH
4467: LD_INT 4
4469: PUSH
4470: LD_INT 5
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4480: LD_ADDR_OWVAR 37
4484: PUSH
4485: LD_VAR 0 19
4489: PUSH
4490: LD_INT 1
4492: PPUSH
4493: LD_VAR 0 19
4497: PPUSH
4498: CALL_OW 12
4502: ARRAY
4503: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4504: LD_VAR 0 10
4508: PUSH
4509: LD_VAR 0 14
4513: ARRAY
4514: PUSH
4515: LD_INT 4
4517: EQUAL
4518: PUSH
4519: LD_VAR 0 10
4523: PUSH
4524: LD_VAR 0 14
4528: ARRAY
4529: PUSH
4530: LD_INT 5
4532: EQUAL
4533: OR
4534: PUSH
4535: LD_VAR 0 10
4539: PUSH
4540: LD_VAR 0 14
4544: ARRAY
4545: PUSH
4546: LD_INT 9
4548: EQUAL
4549: OR
4550: PUSH
4551: LD_VAR 0 10
4555: PUSH
4556: LD_VAR 0 14
4560: ARRAY
4561: PUSH
4562: LD_INT 11
4564: EQUAL
4565: OR
4566: PUSH
4567: LD_VAR 0 10
4571: PUSH
4572: LD_VAR 0 14
4576: ARRAY
4577: PUSH
4578: LD_INT 7
4580: EQUAL
4581: OR
4582: IFFALSE 4631
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4584: LD_ADDR_VAR 0 19
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: LD_INT 4
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4607: LD_ADDR_OWVAR 37
4611: PUSH
4612: LD_VAR 0 19
4616: PUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_VAR 0 19
4624: PPUSH
4625: CALL_OW 12
4629: ARRAY
4630: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4631: LD_VAR 0 10
4635: PUSH
4636: LD_VAR 0 14
4640: ARRAY
4641: PUSH
4642: LD_INT 8
4644: EQUAL
4645: PUSH
4646: LD_VAR 0 10
4650: PUSH
4651: LD_VAR 0 14
4655: ARRAY
4656: PUSH
4657: LD_INT 6
4659: EQUAL
4660: OR
4661: PUSH
4662: LD_VAR 0 10
4666: PUSH
4667: LD_VAR 0 14
4671: ARRAY
4672: PUSH
4673: LD_INT 10
4675: EQUAL
4676: OR
4677: IFFALSE 4718
// begin amChassisTab = [ 4 , 5 ] ;
4679: LD_ADDR_VAR 0 19
4683: PUSH
4684: LD_INT 4
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4694: LD_ADDR_OWVAR 37
4698: PUSH
4699: LD_VAR 0 19
4703: PUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_VAR 0 19
4711: PPUSH
4712: CALL_OW 12
4716: ARRAY
4717: ST_TO_ADDR
// end ; end ;
4718: GO 4418
4720: POP
4721: POP
// veh = CreateVehicle ;
4722: LD_ADDR_VAR 0 16
4726: PUSH
4727: CALL_OW 45
4731: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4732: LD_VAR 0 16
4736: PPUSH
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_INT 0
4744: PPUSH
4745: CALL_OW 49
// if vc_control = 1 then
4749: LD_OWVAR 38
4753: PUSH
4754: LD_INT 1
4756: EQUAL
4757: IFFALSE 4814
// begin hc_gallery =  ;
4759: LD_ADDR_OWVAR 33
4763: PUSH
4764: LD_STRING 
4766: ST_TO_ADDR
// hc_name =  ;
4767: LD_ADDR_OWVAR 26
4771: PUSH
4772: LD_STRING 
4774: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4775: LD_INT 0
4777: PPUSH
4778: LD_INT 3
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 380
// un = CreateHuman ;
4790: LD_ADDR_VAR 0 15
4794: PUSH
4795: CALL_OW 44
4799: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4800: LD_VAR 0 15
4804: PPUSH
4805: LD_VAR 0 16
4809: PPUSH
4810: CALL_OW 52
// end ; i = i + 1 ;
4814: LD_ADDR_VAR 0 13
4818: PUSH
4819: LD_VAR 0 13
4823: PUSH
4824: LD_INT 1
4826: PLUS
4827: ST_TO_ADDR
// end ; if nation = 2 then
4828: LD_VAR 0 5
4832: PUSH
4833: LD_INT 2
4835: EQUAL
4836: IFFALSE 5260
// begin uc_side = side ;
4838: LD_ADDR_OWVAR 20
4842: PUSH
4843: LD_VAR 0 2
4847: ST_TO_ADDR
// uc_nation = nation ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_VAR 0 5
4857: ST_TO_ADDR
// vc_engine = vehengine ;
4858: LD_ADDR_OWVAR 39
4862: PUSH
4863: LD_VAR 0 6
4867: ST_TO_ADDR
// vc_control = vehcontrol ;
4868: LD_ADDR_OWVAR 38
4872: PUSH
4873: LD_VAR 0 7
4877: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4878: LD_ADDR_OWVAR 40
4882: PUSH
4883: LD_VAR 0 9
4887: PUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_VAR 0 9
4895: PPUSH
4896: CALL_OW 12
4900: ARRAY
4901: ST_TO_ADDR
// for j = 1 to ARWeapons do
4902: LD_ADDR_VAR 0 14
4906: PUSH
4907: DOUBLE
4908: LD_INT 1
4910: DEC
4911: ST_TO_ADDR
4912: LD_VAR 0 9
4916: PUSH
4917: FOR_TO
4918: IFFALSE 5152
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4920: LD_VAR 0 9
4924: PUSH
4925: LD_VAR 0 14
4929: ARRAY
4930: PUSH
4931: LD_INT 24
4933: EQUAL
4934: PUSH
4935: LD_VAR 0 9
4939: PUSH
4940: LD_VAR 0 14
4944: ARRAY
4945: PUSH
4946: LD_INT 22
4948: EQUAL
4949: OR
4950: PUSH
4951: LD_VAR 0 9
4955: PUSH
4956: LD_VAR 0 14
4960: ARRAY
4961: PUSH
4962: LD_INT 23
4964: EQUAL
4965: OR
4966: PUSH
4967: LD_VAR 0 9
4971: PUSH
4972: LD_VAR 0 14
4976: ARRAY
4977: PUSH
4978: LD_INT 30
4980: EQUAL
4981: OR
4982: IFFALSE 5031
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
4984: LD_ADDR_VAR 0 18
4988: PUSH
4989: LD_INT 11
4991: PUSH
4992: LD_INT 12
4994: PUSH
4995: LD_INT 13
4997: PUSH
4998: LD_INT 14
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5007: LD_ADDR_OWVAR 37
5011: PUSH
5012: LD_VAR 0 18
5016: PUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_VAR 0 18
5024: PPUSH
5025: CALL_OW 12
5029: ARRAY
5030: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
5031: LD_VAR 0 9
5035: PUSH
5036: LD_VAR 0 14
5040: ARRAY
5041: PUSH
5042: LD_INT 29
5044: EQUAL
5045: PUSH
5046: LD_VAR 0 9
5050: PUSH
5051: LD_VAR 0 14
5055: ARRAY
5056: PUSH
5057: LD_INT 28
5059: EQUAL
5060: OR
5061: PUSH
5062: LD_VAR 0 9
5066: PUSH
5067: LD_VAR 0 14
5071: ARRAY
5072: PUSH
5073: LD_INT 27
5075: EQUAL
5076: OR
5077: PUSH
5078: LD_VAR 0 9
5082: PUSH
5083: LD_VAR 0 14
5087: ARRAY
5088: PUSH
5089: LD_INT 26
5091: EQUAL
5092: OR
5093: PUSH
5094: LD_VAR 0 9
5098: PUSH
5099: LD_VAR 0 14
5103: ARRAY
5104: PUSH
5105: LD_INT 25
5107: EQUAL
5108: OR
5109: IFFALSE 5150
// begin arChassisTab = [ 13 , 14 ] ;
5111: LD_ADDR_VAR 0 18
5115: PUSH
5116: LD_INT 13
5118: PUSH
5119: LD_INT 14
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
5126: LD_ADDR_OWVAR 37
5130: PUSH
5131: LD_VAR 0 18
5135: PUSH
5136: LD_INT 1
5138: PPUSH
5139: LD_VAR 0 18
5143: PPUSH
5144: CALL_OW 12
5148: ARRAY
5149: ST_TO_ADDR
// end ; end ;
5150: GO 4917
5152: POP
5153: POP
// veh = CreateVehicle ;
5154: LD_ADDR_VAR 0 16
5158: PUSH
5159: CALL_OW 45
5163: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5164: LD_VAR 0 16
5168: PPUSH
5169: LD_VAR 0 1
5173: PPUSH
5174: LD_INT 0
5176: PPUSH
5177: CALL_OW 49
// if vc_control = 1 then
5181: LD_OWVAR 38
5185: PUSH
5186: LD_INT 1
5188: EQUAL
5189: IFFALSE 5246
// begin hc_gallery =  ;
5191: LD_ADDR_OWVAR 33
5195: PUSH
5196: LD_STRING 
5198: ST_TO_ADDR
// hc_name =  ;
5199: LD_ADDR_OWVAR 26
5203: PUSH
5204: LD_STRING 
5206: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5207: LD_INT 0
5209: PPUSH
5210: LD_INT 3
5212: PPUSH
5213: LD_VAR 0 4
5217: PPUSH
5218: CALL_OW 380
// un = CreateHuman ;
5222: LD_ADDR_VAR 0 15
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5232: LD_VAR 0 15
5236: PPUSH
5237: LD_VAR 0 16
5241: PPUSH
5242: CALL_OW 52
// end ; i = i + 1 ;
5246: LD_ADDR_VAR 0 13
5250: PUSH
5251: LD_VAR 0 13
5255: PUSH
5256: LD_INT 1
5258: PLUS
5259: ST_TO_ADDR
// end ; if nation = 3 then
5260: LD_VAR 0 5
5264: PUSH
5265: LD_INT 3
5267: EQUAL
5268: IFFALSE 5644
// begin uc_side = side ;
5270: LD_ADDR_OWVAR 20
5274: PUSH
5275: LD_VAR 0 2
5279: ST_TO_ADDR
// uc_nation = nation ;
5280: LD_ADDR_OWVAR 21
5284: PUSH
5285: LD_VAR 0 5
5289: ST_TO_ADDR
// vc_engine = vehengine ;
5290: LD_ADDR_OWVAR 39
5294: PUSH
5295: LD_VAR 0 6
5299: ST_TO_ADDR
// vc_control = vehcontrol ;
5300: LD_ADDR_OWVAR 38
5304: PUSH
5305: LD_VAR 0 7
5309: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5310: LD_ADDR_OWVAR 40
5314: PUSH
5315: LD_VAR 0 8
5319: PUSH
5320: LD_INT 1
5322: PPUSH
5323: LD_VAR 0 8
5327: PPUSH
5328: CALL_OW 12
5332: ARRAY
5333: ST_TO_ADDR
// for j = 1 to RuWeapons do
5334: LD_ADDR_VAR 0 14
5338: PUSH
5339: DOUBLE
5340: LD_INT 1
5342: DEC
5343: ST_TO_ADDR
5344: LD_VAR 0 8
5348: PUSH
5349: FOR_TO
5350: IFFALSE 5536
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5352: LD_VAR 0 8
5356: PUSH
5357: LD_VAR 0 14
5361: ARRAY
5362: PUSH
5363: LD_INT 42
5365: EQUAL
5366: PUSH
5367: LD_VAR 0 8
5371: PUSH
5372: LD_VAR 0 14
5376: ARRAY
5377: PUSH
5378: LD_INT 43
5380: EQUAL
5381: OR
5382: PUSH
5383: LD_VAR 0 8
5387: PUSH
5388: LD_VAR 0 14
5392: ARRAY
5393: PUSH
5394: LD_INT 44
5396: EQUAL
5397: OR
5398: PUSH
5399: LD_VAR 0 8
5403: PUSH
5404: LD_VAR 0 14
5408: ARRAY
5409: PUSH
5410: LD_INT 45
5412: EQUAL
5413: OR
5414: PUSH
5415: LD_VAR 0 8
5419: PUSH
5420: LD_VAR 0 14
5424: ARRAY
5425: PUSH
5426: LD_INT 49
5428: EQUAL
5429: OR
5430: IFFALSE 5467
// begin ruChassisTab = [ 24 ] ;
5432: LD_ADDR_VAR 0 17
5436: PUSH
5437: LD_INT 24
5439: PUSH
5440: EMPTY
5441: LIST
5442: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5443: LD_ADDR_OWVAR 37
5447: PUSH
5448: LD_VAR 0 17
5452: PUSH
5453: LD_INT 1
5455: PPUSH
5456: LD_VAR 0 17
5460: PPUSH
5461: CALL_OW 12
5465: ARRAY
5466: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5467: LD_VAR 0 8
5471: PUSH
5472: LD_VAR 0 14
5476: ARRAY
5477: PUSH
5478: LD_INT 46
5480: EQUAL
5481: PUSH
5482: LD_VAR 0 8
5486: PUSH
5487: LD_VAR 0 14
5491: ARRAY
5492: PUSH
5493: LD_INT 47
5495: EQUAL
5496: OR
5497: IFFALSE 5534
// begin ruChassisTab = [ 24 ] ;
5499: LD_ADDR_VAR 0 17
5503: PUSH
5504: LD_INT 24
5506: PUSH
5507: EMPTY
5508: LIST
5509: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5510: LD_ADDR_OWVAR 37
5514: PUSH
5515: LD_VAR 0 17
5519: PUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_VAR 0 17
5527: PPUSH
5528: CALL_OW 12
5532: ARRAY
5533: ST_TO_ADDR
// end ; end ;
5534: GO 5349
5536: POP
5537: POP
// veh = CreateVehicle ;
5538: LD_ADDR_VAR 0 16
5542: PUSH
5543: CALL_OW 45
5547: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5548: LD_VAR 0 16
5552: PPUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// if vc_control = 1 then
5565: LD_OWVAR 38
5569: PUSH
5570: LD_INT 1
5572: EQUAL
5573: IFFALSE 5630
// begin hc_gallery =  ;
5575: LD_ADDR_OWVAR 33
5579: PUSH
5580: LD_STRING 
5582: ST_TO_ADDR
// hc_name =  ;
5583: LD_ADDR_OWVAR 26
5587: PUSH
5588: LD_STRING 
5590: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 3
5596: PPUSH
5597: LD_VAR 0 4
5601: PPUSH
5602: CALL_OW 380
// un = CreateHuman ;
5606: LD_ADDR_VAR 0 15
5610: PUSH
5611: CALL_OW 44
5615: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5616: LD_VAR 0 15
5620: PPUSH
5621: LD_VAR 0 16
5625: PPUSH
5626: CALL_OW 52
// end ; i = i + 1 ;
5630: LD_ADDR_VAR 0 13
5634: PUSH
5635: LD_VAR 0 13
5639: PUSH
5640: LD_INT 1
5642: PLUS
5643: ST_TO_ADDR
// end ; until i = vehCount ;
5644: LD_VAR 0 13
5648: PUSH
5649: LD_VAR 0 3
5653: EQUAL
5654: IFFALSE 4322
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
5663: LD_ADDR_VAR 0 20
5667: PUSH
5668: LD_INT 22
5670: PUSH
5671: LD_VAR 0 2
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 24
5692: PUSH
5693: LD_INT 250
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 69
5709: ST_TO_ADDR
// if vehicleOK_list > 0 then
5710: LD_VAR 0 20
5714: PUSH
5715: LD_INT 0
5717: GREATER
5718: IFFALSE 5909
// begin for i in vehicleOK_list do
5720: LD_ADDR_VAR 0 13
5724: PUSH
5725: LD_VAR 0 20
5729: PUSH
5730: FOR_IN
5731: IFFALSE 5907
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5733: LD_ADDR_VAR 0 21
5737: PUSH
5738: LD_INT 22
5740: PUSH
5741: LD_VAR 0 11
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PPUSH
5750: CALL_OW 69
5754: PPUSH
5755: LD_VAR 0 13
5759: PPUSH
5760: CALL_OW 74
5764: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5765: LD_ADDR_VAR 0 22
5769: PUSH
5770: LD_INT 22
5772: PUSH
5773: LD_VAR 0 11
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 2
5784: PUSH
5785: LD_INT 59
5787: PUSH
5788: EMPTY
5789: LIST
5790: PUSH
5791: LD_INT 21
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 21
5803: PUSH
5804: LD_INT 2
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PPUSH
5829: LD_VAR 0 13
5833: PPUSH
5834: CALL_OW 74
5838: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5839: LD_VAR 0 13
5843: PPUSH
5844: LD_VAR 0 21
5848: PPUSH
5849: CALL_OW 296
5853: PUSH
5854: LD_INT 8
5856: PLUS
5857: PUSH
5858: LD_VAR 0 13
5862: PPUSH
5863: LD_VAR 0 22
5867: PPUSH
5868: CALL_OW 296
5872: LESS
5873: IFFALSE 5891
// begin ComAttackUnit ( i , target1 ) ;
5875: LD_VAR 0 13
5879: PPUSH
5880: LD_VAR 0 21
5884: PPUSH
5885: CALL_OW 115
// end else
5889: GO 5905
// begin ComAttackUnit ( i , target2 ) ;
5891: LD_VAR 0 13
5895: PPUSH
5896: LD_VAR 0 22
5900: PPUSH
5901: CALL_OW 115
// end ; end ;
5905: GO 5730
5907: POP
5908: POP
// end ; until vehicleOK_list = [ ] ;
5909: LD_VAR 0 20
5913: PUSH
5914: EMPTY
5915: EQUAL
5916: IFFALSE 5656
// end ;
5918: LD_VAR 0 12
5922: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
// for i = 1 to 72 do
5929: LD_ADDR_VAR 0 5
5933: PUSH
5934: DOUBLE
5935: LD_INT 1
5937: DEC
5938: ST_TO_ADDR
5939: LD_INT 72
5941: PUSH
5942: FOR_TO
5943: IFFALSE 6001
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5945: LD_VAR 0 5
5949: PPUSH
5950: LD_VAR 0 1
5954: PPUSH
5955: CALL_OW 321
5959: PUSH
5960: LD_INT 1
5962: EQUAL
5963: PUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: LD_VAR 0 3
5973: PPUSH
5974: CALL_OW 482
5978: PUSH
5979: LD_INT 1
5981: EQUAL
5982: AND
5983: IFFALSE 5999
// AddComResearch ( lab , i ) ;
5985: LD_VAR 0 2
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL_OW 184
5999: GO 5942
6001: POP
6002: POP
// end ;
6003: LD_VAR 0 4
6007: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6016: LD_ADDR_VAR 0 7
6020: PUSH
6021: LD_VAR 0 2
6025: PPUSH
6026: CALL_OW 313
6030: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6031: LD_ADDR_VAR 0 8
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 22
6043: PUSH
6044: LD_VAR 0 1
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 25
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 24
6065: PUSH
6066: LD_INT 750
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: LD_INT 54
6078: PUSH
6079: EMPTY
6080: LIST
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 70
6096: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_VAR 0 3
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 21
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: LD_INT 24
6134: PUSH
6135: LD_INT 1000
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: PPUSH
6154: CALL_OW 70
6158: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6159: LD_VAR 0 5
6163: NOT
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_VAR 0 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: LD_INT 24
6189: PUSH
6190: LD_INT 250
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: PPUSH
6202: CALL_OW 69
6206: NOT
6207: AND
6208: IFFALSE 6212
// exit ;
6210: GO 6324
// if buildings_list > 0 and engineerOkInside then
6212: LD_VAR 0 5
6216: PUSH
6217: LD_INT 0
6219: GREATER
6220: PUSH
6221: LD_VAR 0 7
6225: AND
6226: IFFALSE 6252
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6228: LD_VAR 0 7
6232: PPUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 72
6247: PPUSH
6248: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6252: LD_VAR 0 5
6256: PUSH
6257: LD_INT 0
6259: GREATER
6260: PUSH
6261: LD_VAR 0 8
6265: PUSH
6266: LD_INT 0
6268: GREATER
6269: AND
6270: IFFALSE 6290
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6272: LD_VAR 0 8
6276: PPUSH
6277: LD_VAR 0 5
6281: PUSH
6282: LD_INT 1
6284: ARRAY
6285: PPUSH
6286: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6290: LD_VAR 0 5
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: PUSH
6299: LD_VAR 0 8
6303: PUSH
6304: LD_INT 0
6306: GREATER
6307: AND
6308: IFFALSE 6324
// ComEnterUnit ( engineerOkOutside , building ) ;
6310: LD_VAR 0 8
6314: PPUSH
6315: LD_VAR 0 2
6319: PPUSH
6320: CALL_OW 120
// end ; end_of_file
6324: LD_VAR 0 4
6328: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
6329: LD_VAR 0 1
6333: PUSH
6334: LD_INT 235
6336: EQUAL
6337: PUSH
6338: LD_VAR 0 2
6342: PPUSH
6343: CALL_OW 255
6347: PUSH
6348: LD_INT 4
6350: EQUAL
6351: AND
6352: IFFALSE 6400
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
6354: LD_INT 235
6356: PPUSH
6357: LD_INT 84
6359: PPUSH
6360: LD_INT 1
6362: PPUSH
6363: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
6367: LD_INT 235
6369: PPUSH
6370: LD_INT 68
6372: PPUSH
6373: LD_INT 100
6375: PPUSH
6376: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
6380: LD_INT 235
6382: PPUSH
6383: CALL_OW 219
// AddComMoveXY ( PowellCargo , 41 , 61 ) ;
6387: LD_INT 235
6389: PPUSH
6390: LD_INT 41
6392: PPUSH
6393: LD_INT 61
6395: PPUSH
6396: CALL_OW 171
// end ; end ;
6400: PPOPN 2
6402: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
6407: LD_ADDR_VAR 0 3
6411: PUSH
6412: LD_INT 22
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 21
6424: PUSH
6425: LD_INT 1
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 56
6434: PUSH
6435: EMPTY
6436: LIST
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: LD_INT 60
6443: PUSH
6444: EMPTY
6445: LIST
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: PPUSH
6457: CALL_OW 69
6461: PUSH
6462: LD_EXP 17
6466: PUSH
6467: EMPTY
6468: LIST
6469: DIFF
6470: ST_TO_ADDR
// if GetSide ( building ) = 4 then
6471: LD_VAR 0 1
6475: PPUSH
6476: CALL_OW 255
6480: PUSH
6481: LD_INT 4
6483: EQUAL
6484: IFFALSE 6760
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
6486: LD_INT 22
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 30
6498: PUSH
6499: LD_INT 8
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: CALL_OW 69
6514: PUSH
6515: LD_INT 1
6517: EQUAL
6518: IFFALSE 6760
// begin for i = 1 to 3 do
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: DOUBLE
6526: LD_INT 1
6528: DEC
6529: ST_TO_ADDR
6530: LD_INT 3
6532: PUSH
6533: FOR_TO
6534: IFFALSE 6598
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
6536: LD_VAR 0 3
6540: PUSH
6541: LD_VAR 0 2
6545: ARRAY
6546: PPUSH
6547: LD_INT 3
6549: PUSH
6550: LD_INT 25
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PPUSH
6564: CALL_OW 72
6568: PPUSH
6569: LD_VAR 0 1
6573: PPUSH
6574: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
6578: LD_VAR 0 3
6582: PUSH
6583: LD_VAR 0 2
6587: ARRAY
6588: PPUSH
6589: LD_INT 4
6591: PPUSH
6592: CALL_OW 183
// end ;
6596: GO 6533
6598: POP
6599: POP
// ResAllTechs ( 4 , building , 1 ) ;
6600: LD_INT 4
6602: PPUSH
6603: LD_VAR 0 1
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: CALL 5923 0 3
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
6615: LD_INT 85
6617: PPUSH
6618: LD_INT 3
6620: PPUSH
6621: LD_INT 3
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 3
6629: PUSH
6630: LD_INT 5
6632: PUSH
6633: LD_INT 7
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 3
6646: PPUSH
6647: CALL_OW 12
6651: ARRAY
6652: PPUSH
6653: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
6657: LD_INT 85
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_INT 3
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: LD_INT 3
6671: PUSH
6672: LD_INT 5
6674: PUSH
6675: LD_INT 7
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 3
6688: PPUSH
6689: CALL_OW 12
6693: ARRAY
6694: PPUSH
6695: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
6699: LD_INT 85
6701: PPUSH
6702: LD_INT 3
6704: PPUSH
6705: LD_INT 3
6707: PPUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 5
6716: PUSH
6717: LD_INT 7
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: CALL_OW 12
6735: ARRAY
6736: PPUSH
6737: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
6741: LD_INT 85
6743: PPUSH
6744: LD_INT 5
6746: PPUSH
6747: LD_INT 3
6749: PPUSH
6750: LD_INT 1
6752: PPUSH
6753: LD_INT 6
6755: PPUSH
6756: CALL_OW 185
// end ; end ;
6760: PPOPN 3
6762: END
// on BuildingComplete ( building ) do var powellPeople ;
6763: LD_INT 0
6765: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
6766: LD_VAR 0 1
6770: PPUSH
6771: CALL_OW 255
6775: PUSH
6776: LD_INT 4
6778: EQUAL
6779: PUSH
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 266
6789: PUSH
6790: LD_INT 17
6792: EQUAL
6793: AND
6794: IFFALSE 7076
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
6796: LD_ADDR_VAR 0 2
6800: PUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 4
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 21
6813: PUSH
6814: LD_INT 1
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 56
6823: PUSH
6824: EMPTY
6825: LIST
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: LD_INT 60
6832: PUSH
6833: EMPTY
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 69
6850: PUSH
6851: LD_EXP 17
6855: PUSH
6856: EMPTY
6857: LIST
6858: DIFF
6859: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
6860: LD_INT 22
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 21
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 30
6882: PUSH
6883: LD_INT 32
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: PPUSH
6895: CALL_OW 69
6899: PUSH
6900: LD_INT 1
6902: ARRAY
6903: PPUSH
6904: LD_INT 6
6906: PPUSH
6907: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
6911: LD_INT 22
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 21
6923: PUSH
6924: LD_INT 3
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 30
6933: PUSH
6934: LD_INT 32
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 69
6950: PUSH
6951: LD_INT 2
6953: ARRAY
6954: PPUSH
6955: LD_INT 5
6957: PPUSH
6958: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
6962: LD_VAR 0 2
6966: PUSH
6967: LD_INT 1
6969: ARRAY
6970: PPUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 4
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 30
6993: PUSH
6994: LD_INT 32
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: PPUSH
7006: CALL_OW 69
7010: PUSH
7011: LD_INT 1
7013: ARRAY
7014: PPUSH
7015: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
7019: LD_VAR 0 2
7023: PUSH
7024: LD_INT 2
7026: ARRAY
7027: PPUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 21
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 30
7050: PUSH
7051: LD_INT 32
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: PUSH
7068: LD_INT 2
7070: ARRAY
7071: PPUSH
7072: CALL_OW 120
// end ; end ;
7076: PPOPN 2
7078: END
// on EnterBuilding ( building , human ) do begin end ;
7079: PPOPN 2
7081: END
// on VehicleConstructed ( vehicle , building ) do begin if vehicle = powellVeh then
7082: LD_VAR 0 1
7086: PUSH
7087: LD_EXP 30
7091: EQUAL
7092: IFFALSE 7108
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL_OW 313
7103: PPUSH
7104: CALL_OW 121
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 255
7117: PUSH
7118: LD_INT 4
7120: EQUAL
7121: PUSH
7122: LD_EXP 28
7126: PUSH
7127: LD_INT 2
7129: EQUAL
7130: AND
7131: PUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 264
7141: PUSH
7142: LD_INT 6
7144: EQUAL
7145: AND
7146: IFFALSE 7200
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
7148: LD_EXP 25
7152: PUSH
7153: LD_INT 5
7155: ARRAY
7156: PPUSH
7157: CALL_OW 122
// wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
7168: LD_EXP 25
7172: PUSH
7173: LD_INT 5
7175: ARRAY
7176: PPUSH
7177: LD_INT 85
7179: PPUSH
7180: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
7184: LD_EXP 25
7188: PUSH
7189: LD_INT 5
7191: ARRAY
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
7200: LD_VAR 0 1
7204: PPUSH
7205: CALL_OW 255
7209: PUSH
7210: LD_INT 4
7212: EQUAL
7213: PUSH
7214: LD_EXP 28
7218: PUSH
7219: LD_INT 2
7221: EQUAL
7222: AND
7223: PUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 264
7233: PUSH
7234: LD_INT 3
7236: EQUAL
7237: AND
7238: IFFALSE 7250
// powellVeh = vehicle ;
7240: LD_ADDR_EXP 30
7244: PUSH
7245: LD_VAR 0 1
7249: ST_TO_ADDR
// end ;
7250: PPOPN 2
7252: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 255
7262: PUSH
7263: LD_INT 4
7265: EQUAL
7266: PUSH
7267: LD_EXP 28
7271: PUSH
7272: LD_INT 1
7274: EQUAL
7275: AND
7276: IFFALSE 7379
// begin ComEnterUnit ( human , AmFact ) ;
7278: LD_VAR 0 2
7282: PPUSH
7283: LD_INT 85
7285: PPUSH
7286: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 258
7299: PUSH
7300: LD_INT 1
7302: EQUAL
7303: PUSH
7304: LD_EXP 37
7308: PUSH
7309: LD_INT 0
7311: EQUAL
7312: AND
7313: IFFALSE 7379
// begin blockEvent1 = 1 ;
7315: LD_ADDR_EXP 37
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// startAttacks = 1 ;
7323: LD_ADDR_EXP 29
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
7331: LD_VAR 0 2
7335: PPUSH
7336: LD_STRING D4a-Sol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
7343: LD_EXP 17
7347: PPUSH
7348: LD_STRING D4a-Pow-1
7350: PPUSH
7351: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_STRING D4a-Sol1-2
7362: PPUSH
7363: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
7367: LD_EXP 17
7371: PPUSH
7372: LD_STRING D4a-Pow-2
7374: PPUSH
7375: CALL_OW 88
// end ; end ; end ;
7379: PPOPN 2
7381: END
// on UnitDestroyed ( unit ) do var i ;
7382: LD_INT 0
7384: PPUSH
// begin if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 255
7394: PUSH
7395: LD_INT 4
7397: EQUAL
7398: PUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 247
7408: PUSH
7409: LD_INT 1
7411: EQUAL
7412: AND
7413: IFFALSE 7463
// begin for i in amUnitsAttack do
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_EXP 25
7424: PUSH
7425: FOR_IN
7426: IFFALSE 7461
// if i = unit then
7428: LD_VAR 0 2
7432: PUSH
7433: LD_VAR 0 1
7437: EQUAL
7438: IFFALSE 7459
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
7440: LD_ADDR_EXP 25
7444: PUSH
7445: LD_EXP 25
7449: PUSH
7450: LD_VAR 0 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: DIFF
7458: ST_TO_ADDR
7459: GO 7425
7461: POP
7462: POP
// end ; end ; end_of_file
7463: PPOPN 2
7465: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
7466: LD_EXP 27
7470: PUSH
7471: LD_INT 1
7473: EQUAL
7474: IFFALSE 8051
7476: GO 7478
7478: DISABLE
7479: LD_INT 0
7481: PPUSH
7482: PPUSH
// begin for i = 1 to 4 do
7483: LD_ADDR_VAR 0 1
7487: PUSH
7488: DOUBLE
7489: LD_INT 1
7491: DEC
7492: ST_TO_ADDR
7493: LD_INT 4
7495: PUSH
7496: FOR_TO
7497: IFFALSE 7537
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
7499: LD_EXP 25
7503: PUSH
7504: LD_VAR 0 1
7508: ARRAY
7509: PPUSH
7510: LD_INT 85
7512: PPUSH
7513: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
7517: LD_EXP 25
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: PPUSH
7528: LD_INT 3
7530: PPUSH
7531: CALL_OW 183
// end ;
7535: GO 7496
7537: POP
7538: POP
// wait ( 0 0$1 ) ;
7539: LD_INT 35
7541: PPUSH
7542: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
7546: LD_ADDR_VAR 0 2
7550: PUSH
7551: LD_INT 22
7553: PUSH
7554: LD_INT 4
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 21
7563: PUSH
7564: LD_INT 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 56
7573: PUSH
7574: EMPTY
7575: LIST
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: LD_INT 60
7582: PUSH
7583: EMPTY
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: PUSH
7601: LD_EXP 17
7605: PUSH
7606: EMPTY
7607: LIST
7608: DIFF
7609: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
7610: LD_VAR 0 2
7614: PUSH
7615: LD_INT 1
7617: ARRAY
7618: PPUSH
7619: LD_INT 235
7621: PPUSH
7622: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
7626: LD_VAR 0 2
7630: PUSH
7631: LD_INT 2
7633: ARRAY
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
7642: LD_VAR 0 2
7646: PUSH
7647: LD_INT 3
7649: ARRAY
7650: PPUSH
7651: LD_INT 2
7653: PPUSH
7654: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
7658: LD_INT 30
7660: PPUSH
7661: LD_INT 49
7663: PPUSH
7664: LD_INT 4
7666: PPUSH
7667: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
7671: LD_INT 91
7673: PPUSH
7674: LD_INT 10
7676: PPUSH
7677: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
7681: LD_INT 91
7683: PPUSH
7684: LD_INT 11
7686: PPUSH
7687: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
7691: LD_INT 22
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 25
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PPUSH
7715: CALL_OW 69
7719: PPUSH
7720: LD_INT 30
7722: PPUSH
7723: LD_INT 30
7725: PPUSH
7726: LD_INT 49
7728: PPUSH
7729: LD_INT 1
7731: PPUSH
7732: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
7736: LD_INT 22
7738: PUSH
7739: LD_INT 4
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 25
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 69
7764: PPUSH
7765: LD_INT 32
7767: PPUSH
7768: LD_INT 55
7770: PPUSH
7771: LD_INT 56
7773: PPUSH
7774: LD_INT 4
7776: PPUSH
7777: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
7781: LD_INT 22
7783: PUSH
7784: LD_INT 4
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 25
7793: PUSH
7794: LD_INT 2
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: PPUSH
7810: LD_INT 32
7812: PPUSH
7813: LD_INT 63
7815: PPUSH
7816: LD_INT 71
7818: PPUSH
7819: LD_INT 4
7821: PPUSH
7822: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
7826: LD_INT 22
7828: PUSH
7829: LD_INT 4
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 25
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 69
7854: PPUSH
7855: LD_INT 28
7857: PPUSH
7858: LD_INT 40
7860: PPUSH
7861: LD_INT 72
7863: PPUSH
7864: LD_INT 4
7866: PPUSH
7867: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
7871: LD_INT 22
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 25
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 69
7899: PPUSH
7900: LD_INT 27
7902: PPUSH
7903: LD_INT 45
7905: PPUSH
7906: LD_INT 73
7908: PPUSH
7909: LD_INT 4
7911: PPUSH
7912: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
7916: LD_INT 22
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 25
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: PPUSH
7945: LD_INT 18
7947: PPUSH
7948: LD_INT 37
7950: PPUSH
7951: LD_INT 50
7953: PPUSH
7954: LD_INT 2
7956: PPUSH
7957: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
7961: LD_INT 22
7963: PUSH
7964: LD_INT 4
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 25
7973: PUSH
7974: LD_INT 2
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PPUSH
7985: CALL_OW 69
7989: PPUSH
7990: LD_INT 17
7992: PPUSH
7993: LD_INT 41
7995: PPUSH
7996: LD_INT 51
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
8006: LD_INT 22
8008: PUSH
8009: LD_INT 4
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 25
8018: PUSH
8019: LD_INT 2
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PPUSH
8035: LD_INT 21
8037: PPUSH
8038: LD_INT 38
8040: PPUSH
8041: LD_INT 54
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 205
// end ;
8051: PPOPN 2
8053: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) do
8054: LD_INT 235
8056: PPUSH
8057: LD_INT 10
8059: PPUSH
8060: CALL_OW 308
8064: IFFALSE 8088
8066: GO 8068
8068: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
8069: LD_INT 235
8071: PPUSH
8072: CALL_OW 313
8076: PPUSH
8077: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
8081: LD_INT 84
8083: PPUSH
8084: CALL_OW 146
// end ;
8088: END
// every 0 0$1 do
8089: GO 8091
8091: DISABLE
// begin enable ;
8092: ENABLE
// RepairBuilding ( 8 , ArDep1 , LegionBaseArea ) ;
8093: LD_INT 8
8095: PPUSH
8096: LD_INT 122
8098: PPUSH
8099: LD_INT 11
8101: PPUSH
8102: CALL 6008 0 3
// end ; end_of_file end_of_file
8106: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 do
8107: LD_EXP 29
8111: PUSH
8112: LD_INT 1
8114: EQUAL
8115: PUSH
8116: LD_EXP 36
8120: PUSH
8121: LD_INT 0
8123: EQUAL
8124: AND
8125: IFFALSE 8185
8127: GO 8129
8129: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
8130: LD_INT 2
8132: PPUSH
8133: LD_INT 6
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: LD_INT 4
8141: PPUSH
8142: CALL_OW 12
8146: PPUSH
8147: LD_INT 10
8149: PPUSH
8150: LD_INT 3
8152: PPUSH
8153: LD_INT 3
8155: PPUSH
8156: LD_INT 3
8158: PPUSH
8159: LD_INT 42
8161: PUSH
8162: LD_INT 43
8164: PUSH
8165: LD_INT 44
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: EMPTY
8174: PPUSH
8175: EMPTY
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: CALL 4238 0 11
// enable ;
8184: ENABLE
// end ; end_of_file
8185: END
// every 1 do var i , dec1 , options , people ;
8186: GO 8188
8188: DISABLE
8189: LD_INT 0
8191: PPUSH
8192: PPUSH
8193: PPUSH
8194: PPUSH
// begin InGameOn ;
8195: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
8199: LD_EXP 19
8203: PUSH
8204: LD_EXP 20
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PPUSH
8213: LD_INT 48
8215: PPUSH
8216: LD_INT 68
8218: PPUSH
8219: CALL_OW 111
// if KappaStatus = 0 then
8223: LD_EXP 34
8227: PUSH
8228: LD_INT 0
8230: EQUAL
8231: IFFALSE 8277
// begin CenterNowOnUnits ( NewJMMVeh ) ;
8233: LD_EXP 19
8237: PPUSH
8238: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
8242: LD_EXP 1
8246: PPUSH
8247: LD_STRING D1T-JMM-1
8249: PPUSH
8250: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8254: LD_EXP 19
8258: PPUSH
8259: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
8263: LD_EXP 17
8267: PPUSH
8268: LD_STRING D1nT-JMM-1
8270: PPUSH
8271: CALL_OW 88
// end else
8275: GO 8562
// begin CenterNowOnUnits ( NewJMMVeh ) ;
8277: LD_EXP 19
8281: PPUSH
8282: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
8286: LD_EXP 1
8290: PPUSH
8291: LD_STRING D1T-JMM-1
8293: PPUSH
8294: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8298: LD_EXP 19
8302: PPUSH
8303: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D1T-Pow-1
8314: PPUSH
8315: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8319: LD_EXP 19
8323: PPUSH
8324: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
8328: LD_EXP 1
8332: PPUSH
8333: LD_STRING D1T-JMM-2
8335: PPUSH
8336: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8340: LD_EXP 19
8344: PPUSH
8345: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
8349: LD_EXP 17
8353: PPUSH
8354: LD_STRING D1T-Pow-2
8356: PPUSH
8357: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8361: LD_EXP 19
8365: PPUSH
8366: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
8370: LD_EXP 1
8374: PPUSH
8375: LD_STRING D1T-JMM-3
8377: PPUSH
8378: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8382: LD_EXP 19
8386: PPUSH
8387: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
8391: LD_EXP 17
8395: PPUSH
8396: LD_STRING D1T-Pow-3
8398: PPUSH
8399: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8403: LD_EXP 19
8407: PPUSH
8408: CALL_OW 87
// if not JMMGirlVeh = [ ] then
8412: LD_EXP 32
8416: PUSH
8417: EMPTY
8418: EQUAL
8419: NOT
8420: IFFALSE 8520
// begin if JMMGirl = 1 then
8422: LD_EXP 33
8426: PUSH
8427: LD_INT 1
8429: EQUAL
8430: IFFALSE 8444
// Say ( Joan , D1T-Joan-3 ) ;
8432: LD_EXP 2
8436: PPUSH
8437: LD_STRING D1T-Joan-3
8439: PPUSH
8440: CALL_OW 88
// if JMMGirl = 2 then
8444: LD_EXP 33
8448: PUSH
8449: LD_INT 2
8451: EQUAL
8452: IFFALSE 8466
// Say ( Lisa , D1T-Lisa-3 ) ;
8454: LD_EXP 4
8458: PPUSH
8459: LD_STRING D1T-Lisa-3
8461: PPUSH
8462: CALL_OW 88
// if JMMGirl = 3 then
8466: LD_EXP 33
8470: PUSH
8471: LD_INT 3
8473: EQUAL
8474: IFFALSE 8488
// Say ( Connie , D1T-Con-3 ) ;
8476: LD_EXP 16
8480: PPUSH
8481: LD_STRING D1T-Con-3
8483: PPUSH
8484: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8488: LD_EXP 19
8492: PPUSH
8493: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
8497: LD_EXP 17
8501: PPUSH
8502: LD_STRING D1T-Pow-4
8504: PPUSH
8505: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8509: LD_EXP 19
8513: PPUSH
8514: CALL_OW 87
// end else
8518: GO 8562
// begin Say ( JMM , D1T-JMM-4 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D1T-JMM-4
8527: PPUSH
8528: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8532: LD_EXP 19
8536: PPUSH
8537: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
8541: LD_EXP 17
8545: PPUSH
8546: LD_STRING D1T-Pow-5
8548: PPUSH
8549: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
8553: LD_EXP 19
8557: PPUSH
8558: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
8562: LD_INT 35
8564: PPUSH
8565: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
8569: LD_EXP 19
8573: PUSH
8574: LD_EXP 20
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PPUSH
8583: LD_INT 48
8585: PPUSH
8586: LD_INT 68
8588: PPUSH
8589: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
8593: LD_EXP 19
8597: PPUSH
8598: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 15 ;
8602: LD_EXP 19
8606: PPUSH
8607: LD_EXP 17
8611: PPUSH
8612: CALL_OW 296
8616: PUSH
8617: LD_INT 15
8619: LESS
8620: IFFALSE 8562
// ComExitVehicle ( JMM ) ;
8622: LD_EXP 1
8626: PPUSH
8627: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
8631: LD_INT 35
8633: PPUSH
8634: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
8638: LD_EXP 1
8642: PPUSH
8643: LD_EXP 17
8647: PPUSH
8648: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
8652: LD_EXP 1
8656: PPUSH
8657: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
8661: LD_EXP 1
8665: PPUSH
8666: LD_EXP 17
8670: PPUSH
8671: CALL_OW 296
8675: PUSH
8676: LD_INT 6
8678: LESS
8679: IFFALSE 8631
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
8681: LD_EXP 1
8685: PUSH
8686: LD_EXP 17
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
8699: LD_EXP 1
8703: PPUSH
8704: LD_EXP 17
8708: PPUSH
8709: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
8713: LD_EXP 17
8717: PPUSH
8718: LD_EXP 1
8722: PPUSH
8723: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
8727: LD_EXP 1
8731: PPUSH
8732: LD_STRING D1-JMM-1
8734: PPUSH
8735: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
8739: LD_EXP 17
8743: PPUSH
8744: LD_STRING D1-Pow-1
8746: PPUSH
8747: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
8751: LD_INT 1
8753: PPUSH
8754: LD_INT 3
8756: PPUSH
8757: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
8761: LD_INT 1
8763: PPUSH
8764: LD_INT 4
8766: PPUSH
8767: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
8771: LD_INT 1
8773: PPUSH
8774: LD_INT 5
8776: PPUSH
8777: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
8781: LD_INT 171
8783: PPUSH
8784: LD_INT 81
8786: PPUSH
8787: CALL_OW 84
// wait ( 0 0$4 ) ;
8791: LD_INT 140
8793: PPUSH
8794: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
8798: LD_INT 162
8800: PPUSH
8801: LD_INT 36
8803: PPUSH
8804: CALL_OW 84
// wait ( 0 0$4 ) ;
8808: LD_INT 140
8810: PPUSH
8811: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
8815: LD_INT 75
8817: PPUSH
8818: LD_INT 16
8820: PPUSH
8821: CALL_OW 84
// wait ( 0 0$4 ) ;
8825: LD_INT 140
8827: PPUSH
8828: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
8832: LD_EXP 17
8836: PUSH
8837: LD_EXP 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
8850: LD_EXP 1
8854: PPUSH
8855: LD_STRING D1-JMM-2
8857: PPUSH
8858: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
8862: LD_EXP 17
8866: PPUSH
8867: LD_STRING D1-Pow-2
8869: PPUSH
8870: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8874: LD_EXP 1
8878: PPUSH
8879: LD_STRING D1-JMM-3
8881: PPUSH
8882: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
8886: LD_EXP 17
8890: PPUSH
8891: LD_STRING D1-Pow-3
8893: PPUSH
8894: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
8898: LD_EXP 1
8902: PPUSH
8903: LD_STRING D1-JMM-4
8905: PPUSH
8906: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
8910: LD_EXP 17
8914: PPUSH
8915: LD_STRING D1-Pow-4
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
8922: LD_EXP 1
8926: PPUSH
8927: LD_STRING D1-JMM-5
8929: PPUSH
8930: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
8934: LD_EXP 17
8938: PPUSH
8939: LD_STRING D1-Pow-5
8941: PPUSH
8942: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_INT 1
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: LD_INT 5
8965: PUSH
8966: LD_INT 6
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_STRING Q1
8984: PPUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: CALL_OW 98
8994: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
8995: LD_ADDR_VAR 0 2
8999: PUSH
9000: LD_STRING Q1
9002: PPUSH
9003: LD_VAR 0 3
9007: PPUSH
9008: CALL_OW 98
9012: ST_TO_ADDR
// options = options diff dec1 ;
9013: LD_ADDR_VAR 0 3
9017: PUSH
9018: LD_VAR 0 3
9022: PUSH
9023: LD_VAR 0 2
9027: DIFF
9028: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
9029: LD_VAR 0 2
9033: PPUSH
9034: LD_VAR 0 3
9038: PPUSH
9039: CALL 10549 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
9043: LD_VAR 0 2
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: LD_INT 6
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: IN
9058: PUSH
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 2
9066: EQUAL
9067: OR
9068: IFFALSE 8995
// if not ( dec1 in [ 5 , 6 ] ) then
9070: LD_VAR 0 2
9074: PUSH
9075: LD_INT 5
9077: PUSH
9078: LD_INT 6
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: IN
9085: NOT
9086: IFFALSE 9129
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
9088: LD_ADDR_VAR 0 2
9092: PUSH
9093: LD_STRING Q1a
9095: PPUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 2
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 98
9110: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
9111: LD_VAR 0 2
9115: PUSH
9116: LD_INT 4
9118: PLUS
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: CALL 10549 0 2
// end ; if not JMMGirlVeh = [ ] then
9129: LD_EXP 32
9133: PUSH
9134: EMPTY
9135: EQUAL
9136: NOT
9137: IFFALSE 9299
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
9139: LD_EXP 20
9143: PPUSH
9144: CALL_OW 313
9148: PPUSH
9149: CALL_OW 121
// wait ( 0 0$1 ) ;
9153: LD_INT 35
9155: PPUSH
9156: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9160: LD_INT 35
9162: PPUSH
9163: CALL_OW 67
// if JMMGirl = 1 then
9167: LD_EXP 33
9171: PUSH
9172: LD_INT 1
9174: EQUAL
9175: IFFALSE 9191
// ComMoveUnit ( JMM , Joan ) ;
9177: LD_EXP 1
9181: PPUSH
9182: LD_EXP 2
9186: PPUSH
9187: CALL_OW 112
// if JMMGirl = 2 then
9191: LD_EXP 33
9195: PUSH
9196: LD_INT 2
9198: EQUAL
9199: IFFALSE 9215
// ComMoveUnit ( JMM , Lisa ) ;
9201: LD_EXP 1
9205: PPUSH
9206: LD_EXP 4
9210: PPUSH
9211: CALL_OW 112
// if JMMGirl = 3 then
9215: LD_EXP 33
9219: PUSH
9220: LD_INT 3
9222: EQUAL
9223: IFFALSE 9239
// ComMoveUnit ( JMM , Connie ) ;
9225: LD_EXP 1
9229: PPUSH
9230: LD_EXP 16
9234: PPUSH
9235: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
9239: LD_EXP 1
9243: PPUSH
9244: LD_EXP 2
9248: PPUSH
9249: CALL_OW 296
9253: PUSH
9254: LD_INT 6
9256: LESS
9257: PUSH
9258: LD_EXP 1
9262: PPUSH
9263: LD_EXP 4
9267: PPUSH
9268: CALL_OW 296
9272: PUSH
9273: LD_INT 6
9275: LESS
9276: OR
9277: PUSH
9278: LD_EXP 1
9282: PPUSH
9283: LD_EXP 16
9287: PPUSH
9288: CALL_OW 296
9292: PUSH
9293: LD_INT 6
9295: LESS
9296: OR
9297: IFFALSE 9160
// end ; CenterNowOnUnits ( JMM ) ;
9299: LD_EXP 1
9303: PPUSH
9304: CALL_OW 87
// case JMMGirl of 1 :
9308: LD_EXP 33
9312: PUSH
9313: LD_INT 1
9315: DOUBLE
9316: EQUAL
9317: IFTRUE 9321
9319: GO 9364
9321: POP
// begin ComTurnUnit ( JMM , Joan ) ;
9322: LD_EXP 1
9326: PPUSH
9327: LD_EXP 2
9331: PPUSH
9332: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
9336: LD_EXP 2
9340: PPUSH
9341: LD_EXP 1
9345: PPUSH
9346: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
9350: LD_EXP 2
9354: PPUSH
9355: LD_STRING D3W-Joan-1
9357: PPUSH
9358: CALL_OW 88
// end ; 2 :
9362: GO 9467
9364: LD_INT 2
9366: DOUBLE
9367: EQUAL
9368: IFTRUE 9372
9370: GO 9415
9372: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
9373: LD_EXP 1
9377: PPUSH
9378: LD_EXP 4
9382: PPUSH
9383: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
9387: LD_EXP 4
9391: PPUSH
9392: LD_EXP 1
9396: PPUSH
9397: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
9401: LD_EXP 4
9405: PPUSH
9406: LD_STRING D3W-Lisa-1
9408: PPUSH
9409: CALL_OW 88
// end ; 3 :
9413: GO 9467
9415: LD_INT 3
9417: DOUBLE
9418: EQUAL
9419: IFTRUE 9423
9421: GO 9466
9423: POP
// begin ComTurnUnit ( JMM , Connie ) ;
9424: LD_EXP 1
9428: PPUSH
9429: LD_EXP 16
9433: PPUSH
9434: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
9438: LD_EXP 16
9442: PPUSH
9443: LD_EXP 1
9447: PPUSH
9448: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
9452: LD_EXP 16
9456: PPUSH
9457: LD_STRING D3W-Con-1
9459: PPUSH
9460: CALL_OW 88
// end ; end ;
9464: GO 9467
9466: POP
// Say ( JMM , D3W-JMM-1 ) ;
9467: LD_EXP 1
9471: PPUSH
9472: LD_STRING D3W-JMM-1
9474: PPUSH
9475: CALL_OW 88
// people = 0 ;
9479: LD_ADDR_VAR 0 4
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// if Lisa and people < 5 then
9487: LD_EXP 4
9491: PUSH
9492: LD_VAR 0 4
9496: PUSH
9497: LD_INT 5
9499: LESS
9500: AND
9501: IFFALSE 9533
// begin people = people + 1 ;
9503: LD_ADDR_VAR 0 4
9507: PUSH
9508: LD_VAR 0 4
9512: PUSH
9513: LD_INT 1
9515: PLUS
9516: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
9517: LD_ADDR_EXP 26
9521: PUSH
9522: LD_EXP 26
9526: PUSH
9527: LD_EXP 4
9531: ADD
9532: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
9533: LD_EXP 5
9537: PUSH
9538: LD_VAR 0 4
9542: PUSH
9543: LD_INT 5
9545: LESS
9546: AND
9547: IFFALSE 9579
// begin people = people + 1 ;
9549: LD_ADDR_VAR 0 4
9553: PUSH
9554: LD_VAR 0 4
9558: PUSH
9559: LD_INT 1
9561: PLUS
9562: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
9563: LD_ADDR_EXP 26
9567: PUSH
9568: LD_EXP 26
9572: PUSH
9573: LD_EXP 5
9577: ADD
9578: ST_TO_ADDR
// end ; if Bobby and people < 5 then
9579: LD_EXP 6
9583: PUSH
9584: LD_VAR 0 4
9588: PUSH
9589: LD_INT 5
9591: LESS
9592: AND
9593: IFFALSE 9625
// begin people = people + 1 ;
9595: LD_ADDR_VAR 0 4
9599: PUSH
9600: LD_VAR 0 4
9604: PUSH
9605: LD_INT 1
9607: PLUS
9608: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
9609: LD_ADDR_EXP 26
9613: PUSH
9614: LD_EXP 26
9618: PUSH
9619: LD_EXP 6
9623: ADD
9624: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
9625: LD_EXP 7
9629: PUSH
9630: LD_VAR 0 4
9634: PUSH
9635: LD_INT 5
9637: LESS
9638: AND
9639: IFFALSE 9671
// begin people = people + 1 ;
9641: LD_ADDR_VAR 0 4
9645: PUSH
9646: LD_VAR 0 4
9650: PUSH
9651: LD_INT 1
9653: PLUS
9654: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
9655: LD_ADDR_EXP 26
9659: PUSH
9660: LD_EXP 26
9664: PUSH
9665: LD_EXP 7
9669: ADD
9670: ST_TO_ADDR
// end ; if Denis and people < 5 then
9671: LD_EXP 8
9675: PUSH
9676: LD_VAR 0 4
9680: PUSH
9681: LD_INT 5
9683: LESS
9684: AND
9685: IFFALSE 9717
// begin people = people + 1 ;
9687: LD_ADDR_VAR 0 4
9691: PUSH
9692: LD_VAR 0 4
9696: PUSH
9697: LD_INT 1
9699: PLUS
9700: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
9701: LD_ADDR_EXP 26
9705: PUSH
9706: LD_EXP 26
9710: PUSH
9711: LD_EXP 8
9715: ADD
9716: ST_TO_ADDR
// end ; if Brown and people < 5 then
9717: LD_EXP 9
9721: PUSH
9722: LD_VAR 0 4
9726: PUSH
9727: LD_INT 5
9729: LESS
9730: AND
9731: IFFALSE 9763
// begin people = people + 1 ;
9733: LD_ADDR_VAR 0 4
9737: PUSH
9738: LD_VAR 0 4
9742: PUSH
9743: LD_INT 1
9745: PLUS
9746: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
9747: LD_ADDR_EXP 26
9751: PUSH
9752: LD_EXP 26
9756: PUSH
9757: LD_EXP 9
9761: ADD
9762: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
9763: LD_EXP 10
9767: PUSH
9768: LD_VAR 0 4
9772: PUSH
9773: LD_INT 5
9775: LESS
9776: AND
9777: IFFALSE 9809
// begin people = people + 1 ;
9779: LD_ADDR_VAR 0 4
9783: PUSH
9784: LD_VAR 0 4
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
9793: LD_ADDR_EXP 26
9797: PUSH
9798: LD_EXP 26
9802: PUSH
9803: LD_EXP 10
9807: ADD
9808: ST_TO_ADDR
// end ; if Houten and people < 5 then
9809: LD_EXP 11
9813: PUSH
9814: LD_VAR 0 4
9818: PUSH
9819: LD_INT 5
9821: LESS
9822: AND
9823: IFFALSE 9855
// begin people = people + 1 ;
9825: LD_ADDR_VAR 0 4
9829: PUSH
9830: LD_VAR 0 4
9834: PUSH
9835: LD_INT 1
9837: PLUS
9838: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
9839: LD_ADDR_EXP 26
9843: PUSH
9844: LD_EXP 26
9848: PUSH
9849: LD_EXP 11
9853: ADD
9854: ST_TO_ADDR
// end ; if Cornel and people < 5 then
9855: LD_EXP 12
9859: PUSH
9860: LD_VAR 0 4
9864: PUSH
9865: LD_INT 5
9867: LESS
9868: AND
9869: IFFALSE 9901
// begin people = people + 1 ;
9871: LD_ADDR_VAR 0 4
9875: PUSH
9876: LD_VAR 0 4
9880: PUSH
9881: LD_INT 1
9883: PLUS
9884: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
9885: LD_ADDR_EXP 26
9889: PUSH
9890: LD_EXP 26
9894: PUSH
9895: LD_EXP 12
9899: ADD
9900: ST_TO_ADDR
// end ; if Gary and people < 5 then
9901: LD_EXP 13
9905: PUSH
9906: LD_VAR 0 4
9910: PUSH
9911: LD_INT 5
9913: LESS
9914: AND
9915: IFFALSE 9947
// begin people = people + 1 ;
9917: LD_ADDR_VAR 0 4
9921: PUSH
9922: LD_VAR 0 4
9926: PUSH
9927: LD_INT 1
9929: PLUS
9930: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
9931: LD_ADDR_EXP 26
9935: PUSH
9936: LD_EXP 26
9940: PUSH
9941: LD_EXP 13
9945: ADD
9946: ST_TO_ADDR
// end ; if Frank and people < 5 then
9947: LD_EXP 14
9951: PUSH
9952: LD_VAR 0 4
9956: PUSH
9957: LD_INT 5
9959: LESS
9960: AND
9961: IFFALSE 9993
// begin people = people + 1 ;
9963: LD_ADDR_VAR 0 4
9967: PUSH
9968: LD_VAR 0 4
9972: PUSH
9973: LD_INT 1
9975: PLUS
9976: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
9977: LD_ADDR_EXP 26
9981: PUSH
9982: LD_EXP 26
9986: PUSH
9987: LD_EXP 14
9991: ADD
9992: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
9993: LD_EXP 15
9997: PUSH
9998: LD_VAR 0 4
10002: PUSH
10003: LD_INT 5
10005: LESS
10006: AND
10007: IFFALSE 10039
// begin people = people + 1 ;
10009: LD_ADDR_VAR 0 4
10013: PUSH
10014: LD_VAR 0 4
10018: PUSH
10019: LD_INT 1
10021: PLUS
10022: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
10023: LD_ADDR_EXP 26
10027: PUSH
10028: LD_EXP 26
10032: PUSH
10033: LD_EXP 15
10037: ADD
10038: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
10039: LD_EXP 26
10043: PPUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PPUSH
10054: CALL_OW 72
10058: PUSH
10059: LD_INT 0
10061: EQUAL
10062: IFFALSE 10080
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
10064: LD_EXP 26
10068: PUSH
10069: LD_INT 1
10071: ARRAY
10072: PPUSH
10073: LD_INT 2
10075: PPUSH
10076: CALL_OW 336
// for i = 1 to 5 do
10080: LD_ADDR_VAR 0 1
10084: PUSH
10085: DOUBLE
10086: LD_INT 1
10088: DEC
10089: ST_TO_ADDR
10090: LD_INT 5
10092: PUSH
10093: FOR_TO
10094: IFFALSE 10145
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
10096: LD_EXP 26
10100: PUSH
10101: LD_VAR 0 1
10105: ARRAY
10106: PPUSH
10107: LD_INT 62
10109: PUSH
10110: LD_VAR 0 1
10114: PLUS
10115: PPUSH
10116: LD_INT 95
10118: PPUSH
10119: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
10123: LD_EXP 26
10127: PUSH
10128: LD_VAR 0 1
10132: ARRAY
10133: PPUSH
10134: LD_EXP 1
10138: PPUSH
10139: CALL_OW 179
// end ;
10143: GO 10093
10145: POP
10146: POP
// repeat wait ( 0 0$1 ) ;
10147: LD_INT 35
10149: PPUSH
10150: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10154: LD_EXP 1
10158: PPUSH
10159: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
10163: LD_EXP 1
10167: PPUSH
10168: LD_INT 66
10170: PPUSH
10171: LD_INT 98
10173: PPUSH
10174: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
10178: LD_EXP 2
10182: PUSH
10183: LD_EXP 4
10187: PUSH
10188: LD_EXP 16
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: PPUSH
10198: LD_INT 67
10200: PPUSH
10201: LD_INT 98
10203: PPUSH
10204: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
10208: LD_EXP 1
10212: PUSH
10213: LD_EXP 2
10217: PUSH
10218: LD_EXP 4
10222: PUSH
10223: LD_EXP 16
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: LD_INT 63
10236: PPUSH
10237: LD_INT 95
10239: PPUSH
10240: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
10244: LD_EXP 1
10248: PPUSH
10249: LD_INT 9
10251: PPUSH
10252: CALL_OW 308
10256: PUSH
10257: LD_INT 9
10259: PPUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 4
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 70
10288: PUSH
10289: LD_INT 5
10291: EQUAL
10292: AND
10293: IFFALSE 10147
// wait ( 0 0$2 ) ;
10295: LD_INT 70
10297: PPUSH
10298: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
10302: LD_EXP 4
10306: PPUSH
10307: LD_INT 9
10309: PPUSH
10310: CALL_OW 308
10314: IFFALSE 10328
// Say ( Lisa , D3nW-Lisa-1 ) ;
10316: LD_EXP 4
10320: PPUSH
10321: LD_STRING D3nW-Lisa-1
10323: PPUSH
10324: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
10328: LD_EXP 7
10332: PPUSH
10333: LD_INT 9
10335: PPUSH
10336: CALL_OW 308
10340: IFFALSE 10354
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
10342: LD_EXP 7
10346: PPUSH
10347: LD_STRING D3nW-Cyrus-1
10349: PPUSH
10350: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
10354: LD_EXP 6
10358: PPUSH
10359: LD_INT 9
10361: PPUSH
10362: CALL_OW 308
10366: IFFALSE 10380
// Say ( Bobby , D3nW-Bobby-1 ) ;
10368: LD_EXP 6
10372: PPUSH
10373: LD_STRING D3nW-Bobby-1
10375: PPUSH
10376: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
10380: LD_EXP 13
10384: PPUSH
10385: LD_INT 9
10387: PPUSH
10388: CALL_OW 308
10392: IFFALSE 10406
// Say ( Gary , D3nW-Gary-1 ) ;
10394: LD_EXP 13
10398: PPUSH
10399: LD_STRING D3nW-Gary-1
10401: PPUSH
10402: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
10406: LD_EXP 5
10410: PPUSH
10411: LD_INT 9
10413: PPUSH
10414: CALL_OW 308
10418: IFFALSE 10432
// Say ( Donaldson , D3nW-Don-1 ) ;
10420: LD_EXP 5
10424: PPUSH
10425: LD_STRING D3nW-Don-1
10427: PPUSH
10428: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
10432: LD_EXP 12
10436: PPUSH
10437: LD_INT 9
10439: PPUSH
10440: CALL_OW 308
10444: IFFALSE 10458
// Say ( Cornel , D3nW-Corn-1 ) ;
10446: LD_EXP 12
10450: PPUSH
10451: LD_STRING D3nW-Corn-1
10453: PPUSH
10454: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
10458: LD_EXP 14
10462: PPUSH
10463: LD_INT 9
10465: PPUSH
10466: CALL_OW 308
10470: IFFALSE 10484
// Say ( Frank , D3nW-Frank-1 ) ;
10472: LD_EXP 14
10476: PPUSH
10477: LD_STRING D3nW-Frank-1
10479: PPUSH
10480: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
10484: LD_EXP 1
10488: PPUSH
10489: LD_STRING D3nW-JMM-1
10491: PPUSH
10492: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
10496: LD_EXP 1
10500: PPUSH
10501: LD_STRING D3nW-JMM-1a
10503: PPUSH
10504: CALL_OW 88
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// startAttacks = 1 ;
10523: LD_ADDR_EXP 29
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10531: LD_INT 175
10533: PPUSH
10534: CALL_OW 67
// powellBuildBase = 1 ;
10538: LD_ADDR_EXP 27
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// end ;
10546: PPOPN 4
10548: END
// function ResolveQuery ( question , list_of_q ) ; begin
10549: LD_INT 0
10551: PPUSH
// case question of 1 :
10552: LD_VAR 0 1
10556: PUSH
10557: LD_INT 1
10559: DOUBLE
10560: EQUAL
10561: IFTRUE 10565
10563: GO 10616
10565: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
10566: LD_EXP 1
10570: PPUSH
10571: LD_STRING D2Mot-JMM-1
10573: PPUSH
10574: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
10578: LD_EXP 17
10582: PPUSH
10583: LD_STRING D2Mot-Pow-1
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
10590: LD_EXP 1
10594: PPUSH
10595: LD_STRING D2Mot-JMM-2
10597: PPUSH
10598: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
10602: LD_EXP 17
10606: PPUSH
10607: LD_STRING D2Mot-Pow-2
10609: PPUSH
10610: CALL_OW 88
// end ; 2 :
10614: GO 10959
10616: LD_INT 2
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10700
10624: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D2Rus-JMM-1
10632: PPUSH
10633: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
10637: LD_EXP 17
10641: PPUSH
10642: LD_STRING D2Rus-Pow-1
10644: PPUSH
10645: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D2Rus-JMM-2
10656: PPUSH
10657: CALL_OW 88
// if not ( 3 in list_of_q ) then
10661: LD_INT 3
10663: PUSH
10664: LD_VAR 0 2
10668: IN
10669: NOT
10670: IFFALSE 10686
// Say ( Powell , D2Rus-Pow-2 ) else
10672: LD_EXP 17
10676: PPUSH
10677: LD_STRING D2Rus-Pow-2
10679: PPUSH
10680: CALL_OW 88
10684: GO 10698
// Say ( Powell , D2Rus-Pow-2a ) ;
10686: LD_EXP 17
10690: PPUSH
10691: LD_STRING D2Rus-Pow-2a
10693: PPUSH
10694: CALL_OW 88
// end ; 3 :
10698: GO 10959
10700: LD_INT 3
10702: DOUBLE
10703: EQUAL
10704: IFTRUE 10708
10706: GO 10793
10708: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
10709: LD_EXP 1
10713: PPUSH
10714: LD_STRING D2Leg-JMM-1
10716: PPUSH
10717: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
10721: LD_EXP 17
10725: PPUSH
10726: LD_STRING D2Leg-Pow-1
10728: PPUSH
10729: CALL_OW 88
// if ( 2 in list_of_q ) then
10733: LD_INT 2
10735: PUSH
10736: LD_VAR 0 2
10740: IN
10741: IFFALSE 10767
// begin Say ( JMM , D2Leg-JMM-2 ) ;
10743: LD_EXP 1
10747: PPUSH
10748: LD_STRING D2Leg-JMM-2
10750: PPUSH
10751: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
10755: LD_EXP 17
10759: PPUSH
10760: LD_STRING D2Leg-Pow-2
10762: PPUSH
10763: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
10767: LD_EXP 1
10771: PPUSH
10772: LD_STRING D2Leg-JMM-3
10774: PPUSH
10775: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
10779: LD_EXP 17
10783: PPUSH
10784: LD_STRING D2Leg-Pow-3
10786: PPUSH
10787: CALL_OW 88
// end ; 4 :
10791: GO 10959
10793: LD_INT 4
10795: DOUBLE
10796: EQUAL
10797: IFTRUE 10801
10799: GO 10876
10801: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D2Ar-JMM-1
10809: PPUSH
10810: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
10814: LD_EXP 17
10818: PPUSH
10819: LD_STRING D2Ar-Pow-1
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_STRING D2Ar-JMM-2
10833: PPUSH
10834: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
10838: LD_EXP 17
10842: PPUSH
10843: LD_STRING D2Ar-Pow-2
10845: PPUSH
10846: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
10850: LD_EXP 1
10854: PPUSH
10855: LD_STRING D2Ar-JMM-3
10857: PPUSH
10858: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
10862: LD_EXP 17
10866: PPUSH
10867: LD_STRING D2Ar-Pow-3
10869: PPUSH
10870: CALL_OW 88
// end ; 5 :
10874: GO 10959
10876: LD_INT 5
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10899
10884: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
10885: LD_EXP 1
10889: PPUSH
10890: LD_STRING D2Conf-JMM-1
10892: PPUSH
10893: CALL_OW 88
// end ; 6 :
10897: GO 10959
10899: LD_INT 6
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10958
10907: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D2Com-JMM-1
10915: PPUSH
10916: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
10920: LD_EXP 17
10924: PPUSH
10925: LD_STRING D2Com-Pow-1
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
10932: LD_EXP 1
10936: PPUSH
10937: LD_STRING D2Com-JMM-2
10939: PPUSH
10940: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
10944: LD_EXP 17
10948: PPUSH
10949: LD_STRING D2Com-Pow-2
10951: PPUSH
10952: CALL_OW 88
// end ; end ;
10956: GO 10959
10958: POP
// end ;
10959: LD_VAR 0 3
10963: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
10964: LD_INT 9
10966: PPUSH
10967: LD_INT 22
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 21
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL_OW 70
10995: IFFALSE 11040
10997: GO 10999
10999: DISABLE
// begin enable ;
11000: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
11001: LD_INT 9
11003: PPUSH
11004: LD_INT 22
11006: PUSH
11007: LD_INT 4
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 21
11016: PUSH
11017: LD_INT 1
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: CALL_OW 70
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 235
// end ;
11040: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
11041: LD_INT 22
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 21
11053: PUSH
11054: LD_INT 2
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: LD_INT 58
11066: PUSH
11067: EMPTY
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: PUSH
11084: LD_INT 4
11086: EQUAL
11087: PUSH
11088: LD_EXP 29
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: AND
11097: IFFALSE 11110
11099: GO 11101
11101: DISABLE
// startAttacks = 0 ;
11102: LD_ADDR_EXP 29
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
11110: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
11111: LD_INT 22
11113: PUSH
11114: LD_INT 4
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 3
11133: PUSH
11134: LD_INT 58
11136: PUSH
11137: EMPTY
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: PUSH
11154: LD_INT 4
11156: EQUAL
11157: PUSH
11158: LD_INT 22
11160: PUSH
11161: LD_INT 6
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 21
11170: PUSH
11171: LD_INT 2
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 24
11180: PUSH
11181: LD_INT 250
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 69
11197: PUSH
11198: LD_INT 0
11200: EQUAL
11201: AND
11202: PUSH
11203: LD_EXP 29
11207: PUSH
11208: LD_INT 0
11210: EQUAL
11211: AND
11212: PUSH
11213: LD_EXP 28
11217: PUSH
11218: LD_INT 0
11220: EQUAL
11221: AND
11222: IFFALSE 11410
11224: GO 11226
11226: DISABLE
11227: LD_INT 0
11229: PPUSH
// begin powellAttacks = 1 ;
11230: LD_ADDR_EXP 28
11234: PUSH
11235: LD_INT 1
11237: ST_TO_ADDR
// InGameOn ;
11238: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
11242: LD_EXP 17
11246: PPUSH
11247: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
11251: LD_EXP 17
11255: PPUSH
11256: LD_INT 47
11258: PPUSH
11259: LD_INT 60
11261: PPUSH
11262: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
11266: LD_EXP 17
11270: PPUSH
11271: LD_STRING D4-Pow-1
11273: PPUSH
11274: CALL_OW 88
// for i = 1 to amUnitsAttack do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: DOUBLE
11284: LD_INT 1
11286: DEC
11287: ST_TO_ADDR
11288: LD_EXP 25
11292: PUSH
11293: FOR_TO
11294: IFFALSE 11339
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
11296: LD_EXP 25
11300: PUSH
11301: LD_VAR 0 1
11305: ARRAY
11306: PPUSH
11307: CALL_OW 258
11311: PUSH
11312: LD_INT 1
11314: EQUAL
11315: IFFALSE 11337
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
11317: LD_EXP 25
11321: PUSH
11322: LD_VAR 0 1
11326: ARRAY
11327: PPUSH
11328: LD_STRING D4-Sol1-1
11330: PPUSH
11331: CALL_OW 88
// break ;
11335: GO 11339
// end ;
11337: GO 11293
11339: POP
11340: POP
// Say ( Powell , D4-Pow-2 ) ;
11341: LD_EXP 17
11345: PPUSH
11346: LD_STRING D4-Pow-2
11348: PPUSH
11349: CALL_OW 88
// InGameOff ;
11353: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
11357: LD_INT 22
11359: PUSH
11360: LD_INT 4
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 21
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: LD_INT 58
11382: PUSH
11383: EMPTY
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: PPUSH
11400: LD_INT 59
11402: PPUSH
11403: LD_INT 21
11405: PPUSH
11406: CALL_OW 114
// end ;
11410: PPOPN 1
11412: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
11413: LD_EXP 28
11417: PUSH
11418: LD_INT 1
11420: EQUAL
11421: IFFALSE 11470
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
// begin enable ;
11429: ENABLE
// for i = 1 to amUnitsAttack do
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: DOUBLE
11436: LD_INT 1
11438: DEC
11439: ST_TO_ADDR
11440: LD_EXP 25
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11468
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
11448: LD_INT 8
11450: PPUSH
11451: LD_EXP 25
11455: PUSH
11456: LD_VAR 0 1
11460: ARRAY
11461: PPUSH
11462: CALL_OW 471
11466: GO 11445
11468: POP
11469: POP
// end ;
11470: PPOPN 1
11472: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
11473: LD_INT 22
11475: PUSH
11476: LD_INT 4
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: LD_INT 58
11498: PUSH
11499: EMPTY
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: PUSH
11516: LD_INT 0
11518: EQUAL
11519: PUSH
11520: LD_EXP 28
11524: PUSH
11525: LD_INT 1
11527: EQUAL
11528: AND
11529: IFFALSE 11712
11531: GO 11533
11533: DISABLE
// begin powellAttacks = 2 ;
11534: LD_ADDR_EXP 28
11538: PUSH
11539: LD_INT 2
11541: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
11542: LD_INT 85
11544: PPUSH
11545: LD_INT 3
11547: PPUSH
11548: LD_INT 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: LD_INT 3
11556: PUSH
11557: LD_INT 5
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 1
11570: PPUSH
11571: LD_INT 3
11573: PPUSH
11574: CALL_OW 12
11578: ARRAY
11579: PPUSH
11580: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
11584: LD_INT 85
11586: PPUSH
11587: LD_INT 3
11589: PPUSH
11590: LD_INT 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_INT 3
11598: PUSH
11599: LD_INT 5
11601: PUSH
11602: LD_INT 7
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 1
11612: PPUSH
11613: LD_INT 3
11615: PPUSH
11616: CALL_OW 12
11620: ARRAY
11621: PPUSH
11622: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
11626: LD_INT 85
11628: PPUSH
11629: LD_INT 3
11631: PPUSH
11632: LD_INT 3
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: LD_INT 3
11640: PUSH
11641: LD_INT 5
11643: PUSH
11644: LD_INT 7
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 1
11654: PPUSH
11655: LD_INT 3
11657: PPUSH
11658: CALL_OW 12
11662: ARRAY
11663: PPUSH
11664: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
11668: LD_INT 85
11670: PPUSH
11671: LD_INT 5
11673: PPUSH
11674: LD_INT 3
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_INT 6
11682: PPUSH
11683: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
11687: LD_ADDR_EXP 30
11691: PUSH
11692: LD_INT 85
11694: PPUSH
11695: LD_INT 3
11697: PPUSH
11698: LD_INT 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: LD_INT 3
11706: PPUSH
11707: CALL_OW 185
11711: ST_TO_ADDR
// end ;
11712: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
11713: LD_INT 22
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: LD_INT 58
11738: PUSH
11739: EMPTY
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: PUSH
11756: LD_INT 5
11758: GREATEREQUAL
11759: PUSH
11760: LD_EXP 29
11764: PUSH
11765: LD_INT 1
11767: EQUAL
11768: AND
11769: IFFALSE 11782
11771: GO 11773
11773: DISABLE
// startAttacks = 0 ;
11774: LD_ADDR_EXP 29
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
11782: END
// every 0 0$1 trigger powellAttacks = 3 do var i ;
11783: LD_EXP 28
11787: PUSH
11788: LD_INT 3
11790: EQUAL
11791: IFFALSE 11840
11793: GO 11795
11795: DISABLE
11796: LD_INT 0
11798: PPUSH
// begin enable ;
11799: ENABLE
// for i = 1 to amUnitsAttack do
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: DOUBLE
11806: LD_INT 1
11808: DEC
11809: ST_TO_ADDR
11810: LD_EXP 25
11814: PUSH
11815: FOR_TO
11816: IFFALSE 11838
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
11818: LD_INT 8
11820: PPUSH
11821: LD_EXP 25
11825: PUSH
11826: LD_VAR 0 1
11830: ARRAY
11831: PPUSH
11832: CALL_OW 472
11836: GO 11815
11838: POP
11839: POP
// end ;
11840: PPOPN 1
11842: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople ;
11843: LD_INT 22
11845: PUSH
11846: LD_INT 4
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 3
11865: PUSH
11866: LD_INT 58
11868: PUSH
11869: EMPTY
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: PPUSH
11881: CALL_OW 69
11885: PUSH
11886: LD_INT 5
11888: GREATEREQUAL
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 6
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 24
11912: PUSH
11913: LD_INT 250
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: PUSH
11930: LD_INT 0
11932: EQUAL
11933: AND
11934: PUSH
11935: LD_EXP 29
11939: PUSH
11940: LD_INT 0
11942: EQUAL
11943: AND
11944: PUSH
11945: LD_EXP 28
11949: PUSH
11950: LD_INT 2
11952: EQUAL
11953: AND
11954: IFFALSE 12799
11956: GO 11958
11958: DISABLE
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// begin powellAttacks = 3 ;
11964: LD_ADDR_EXP 28
11968: PUSH
11969: LD_INT 3
11971: ST_TO_ADDR
// InGameOn ;
11972: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
11976: LD_EXP 17
11980: PPUSH
11981: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
11985: LD_EXP 17
11989: PPUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 64
11995: PPUSH
11996: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
12000: LD_EXP 17
12004: PPUSH
12005: LD_INT 46
12007: PPUSH
12008: LD_INT 66
12010: PPUSH
12011: CALL_OW 178
// for i = 5 to 8 do
12015: LD_ADDR_VAR 0 1
12019: PUSH
12020: DOUBLE
12021: LD_INT 5
12023: DEC
12024: ST_TO_ADDR
12025: LD_INT 8
12027: PUSH
12028: FOR_TO
12029: IFFALSE 12175
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
12031: LD_EXP 25
12035: PUSH
12036: LD_VAR 0 1
12040: ARRAY
12041: PPUSH
12042: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
12046: LD_EXP 25
12050: PUSH
12051: LD_VAR 0 1
12055: ARRAY
12056: PPUSH
12057: CALL_OW 121
// wait ( 0 0$1 ) ;
12061: LD_INT 35
12063: PPUSH
12064: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
12068: LD_EXP 25
12072: PUSH
12073: LD_VAR 0 1
12077: ARRAY
12078: PPUSH
12079: LD_INT 92
12081: PPUSH
12082: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
12086: LD_EXP 25
12090: PUSH
12091: LD_VAR 0 1
12095: ARRAY
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
12104: LD_EXP 25
12108: PUSH
12109: LD_VAR 0 1
12113: ARRAY
12114: PPUSH
12115: CALL_OW 182
// wait ( 0 0$1 ) ;
12119: LD_INT 35
12121: PPUSH
12122: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 45 + i , 67 ) ;
12126: LD_EXP 25
12130: PUSH
12131: LD_VAR 0 1
12135: ARRAY
12136: PPUSH
12137: LD_INT 45
12139: PUSH
12140: LD_VAR 0 1
12144: PLUS
12145: PPUSH
12146: LD_INT 67
12148: PPUSH
12149: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
12153: LD_EXP 25
12157: PUSH
12158: LD_VAR 0 1
12162: ARRAY
12163: PPUSH
12164: LD_EXP 17
12168: PPUSH
12169: CALL_OW 179
// end ;
12173: GO 12028
12175: POP
12176: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12177: LD_ADDR_VAR 0 3
12181: PUSH
12182: LD_INT 22
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 56
12204: PUSH
12205: EMPTY
12206: LIST
12207: PUSH
12208: LD_INT 3
12210: PUSH
12211: LD_INT 60
12213: PUSH
12214: EMPTY
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PUSH
12232: LD_EXP 17
12236: PUSH
12237: EMPTY
12238: LIST
12239: DIFF
12240: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 92
12248: PPUSH
12249: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
12265: LD_EXP 17
12269: PPUSH
12270: LD_STRING D5-Pow-1
12272: PPUSH
12273: CALL_OW 88
// for i = 1 to amUnitsAttack do
12277: LD_ADDR_VAR 0 1
12281: PUSH
12282: DOUBLE
12283: LD_INT 1
12285: DEC
12286: ST_TO_ADDR
12287: LD_EXP 25
12291: PUSH
12292: FOR_TO
12293: IFFALSE 12338
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
12295: LD_EXP 25
12299: PUSH
12300: LD_VAR 0 1
12304: ARRAY
12305: PPUSH
12306: CALL_OW 258
12310: PUSH
12311: LD_INT 1
12313: EQUAL
12314: IFFALSE 12336
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
12316: LD_EXP 25
12320: PUSH
12321: LD_VAR 0 1
12325: ARRAY
12326: PPUSH
12327: LD_STRING D5-Sol2-1
12329: PPUSH
12330: CALL_OW 88
// break ;
12334: GO 12338
// end ;
12336: GO 12292
12338: POP
12339: POP
// Say ( Powell , D5-Pow-2 ) ;
12340: LD_EXP 17
12344: PPUSH
12345: LD_STRING D5-Pow-2
12347: PPUSH
12348: CALL_OW 88
// for i = 1 to amUnitsAttack do
12352: LD_ADDR_VAR 0 1
12356: PUSH
12357: DOUBLE
12358: LD_INT 1
12360: DEC
12361: ST_TO_ADDR
12362: LD_EXP 25
12366: PUSH
12367: FOR_TO
12368: IFFALSE 12413
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
12370: LD_EXP 25
12374: PUSH
12375: LD_VAR 0 1
12379: ARRAY
12380: PPUSH
12381: CALL_OW 258
12385: PUSH
12386: LD_INT 1
12388: EQUAL
12389: IFFALSE 12411
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
12391: LD_EXP 25
12395: PUSH
12396: LD_VAR 0 1
12400: ARRAY
12401: PPUSH
12402: LD_STRING D5-Sol2-2
12404: PPUSH
12405: CALL_OW 88
// break ;
12409: GO 12413
// end ;
12411: GO 12367
12413: POP
12414: POP
// Say ( Powell , D5-Pow-3 ) ;
12415: LD_EXP 17
12419: PPUSH
12420: LD_STRING D5-Pow-3
12422: PPUSH
12423: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
12427: LD_INT 22
12429: PUSH
12430: LD_INT 4
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 2
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: LD_INT 58
12452: PUSH
12453: EMPTY
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: PPUSH
12470: LD_INT 59
12472: PPUSH
12473: LD_INT 21
12475: PPUSH
12476: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
12480: LD_EXP 25
12484: PPUSH
12485: LD_INT 59
12487: PPUSH
12488: LD_INT 21
12490: PPUSH
12491: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
12495: LD_INT 61
12497: PPUSH
12498: LD_INT 35
12500: PPUSH
12501: CALL_OW 84
// wait ( 0 0$15 ) ;
12505: LD_INT 525
12507: PPUSH
12508: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
12512: LD_EXP 17
12516: PPUSH
12517: LD_STRING D5a-Pow-1
12519: PPUSH
12520: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
12524: LD_EXP 17
12528: PPUSH
12529: LD_STRING D5a-Pow-1a
12531: PPUSH
12532: CALL_OW 88
// wait ( 0 0$2 ) ;
12536: LD_INT 70
12538: PPUSH
12539: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
12543: LD_EXP 17
12547: PPUSH
12548: LD_STRING D5a-Pow-1b
12550: PPUSH
12551: CALL_OW 88
// wait ( 0 0$3 ) ;
12555: LD_INT 105
12557: PPUSH
12558: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
12562: LD_EXP 17
12566: PPUSH
12567: LD_STRING D5a-Pow-1c
12569: PPUSH
12570: CALL_OW 88
// wait ( 0 0$1 ) ;
12574: LD_INT 35
12576: PPUSH
12577: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
12581: LD_EXP 17
12585: PPUSH
12586: LD_STRING D5a-Pow-1d
12588: PPUSH
12589: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12593: LD_INT 35
12595: PPUSH
12596: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
12600: LD_INT 22
12602: PUSH
12603: LD_INT 4
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 21
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 3
12622: PUSH
12623: LD_INT 58
12625: PUSH
12626: EMPTY
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: PPUSH
12643: LD_INT 59
12645: PPUSH
12646: LD_INT 21
12648: PPUSH
12649: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
12653: LD_EXP 25
12657: PPUSH
12658: LD_INT 59
12660: PPUSH
12661: LD_INT 21
12663: PPUSH
12664: CALL_OW 114
// until amUnitsAttack = [ ] ;
12668: LD_EXP 25
12672: PUSH
12673: EMPTY
12674: EQUAL
12675: IFFALSE 12593
// CenterNowOnUnits ( Powell ) ;
12677: LD_EXP 17
12681: PPUSH
12682: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
12686: LD_ADDR_VAR 0 3
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 4
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 21
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: PUSH
12720: LD_EXP 17
12724: PUSH
12725: EMPTY
12726: LIST
12727: DIFF
12728: ST_TO_ADDR
// for i in powellPeople do
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: LD_VAR 0 3
12738: PUSH
12739: FOR_IN
12740: IFFALSE 12769
// if GetSex ( i ) = sex_male then
12742: LD_VAR 0 1
12746: PPUSH
12747: CALL_OW 258
12751: PUSH
12752: LD_INT 1
12754: EQUAL
12755: IFFALSE 12767
// sold = i ;
12757: LD_ADDR_VAR 0 2
12761: PUSH
12762: LD_VAR 0 1
12766: ST_TO_ADDR
12767: GO 12739
12769: POP
12770: POP
// Say ( sold , D6-Sol3-1 ) ;
12771: LD_VAR 0 2
12775: PPUSH
12776: LD_STRING D6-Sol3-1
12778: PPUSH
12779: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
12783: LD_EXP 17
12787: PPUSH
12788: LD_STRING D6-Pow-1
12790: PPUSH
12791: CALL_OW 88
// InGameOff ;
12795: CALL_OW 9
// end ;
12799: PPOPN 3
12801: END
