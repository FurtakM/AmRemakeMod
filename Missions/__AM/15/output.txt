// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 24
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 25
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 26
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 27
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 28
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// debugMode = 1 ;
  86: LD_ADDR_EXP 29
  90: PUSH
  91: LD_INT 1
  93: ST_TO_ADDR
// PrepareHeroes ;
  94: CALL 438 0 0
// PrepareLegion ;
  98: CALL 960 0 0
// PrepareRussians ;
 102: CALL 1220 0 0
// PrepareAlliance ;
 106: CALL 1524 0 0
// SetBName ( RuDep2 , zhukov ) ;
 110: LD_INT 23
 112: PPUSH
 113: LD_STRING zhukov
 115: PPUSH
 116: CALL_OW 500
// end ;
 120: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 121: LD_EXP 29
 125: PUSH
 126: LD_INT 1
 128: EQUAL
 129: IFFALSE 435
 131: GO 133
 133: DISABLE
 134: LD_INT 0
 136: PPUSH
// begin enable ;
 137: ENABLE
// fogoff ( true ) ;
 138: LD_INT 1
 140: PPUSH
 141: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 145: LD_ADDR_VAR 0 1
 149: PUSH
 150: LD_INT 22
 152: PUSH
 153: LD_INT 1
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 21
 162: PUSH
 163: LD_INT 1
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PPUSH
 174: CALL_OW 69
 178: PUSH
 179: FOR_IN
 180: IFFALSE 196
// SetLives ( i , 1000 ) ;
 182: LD_VAR 0 1
 186: PPUSH
 187: LD_INT 1000
 189: PPUSH
 190: CALL_OW 234
 194: GO 179
 196: POP
 197: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 198: LD_ADDR_VAR 0 1
 202: PUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 30
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 30
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: FOR_IN
 251: IFFALSE 275
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 253: LD_VAR 0 1
 257: PPUSH
 258: CALL_OW 274
 262: PPUSH
 263: LD_INT 1
 265: PPUSH
 266: LD_INT 9999
 268: PPUSH
 269: CALL_OW 277
 273: GO 250
 275: POP
 276: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 277: LD_ADDR_VAR 0 1
 281: PUSH
 282: LD_INT 22
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 30
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: LD_INT 30
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 354
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: CALL_OW 274
 341: PPUSH
 342: LD_INT 2
 344: PPUSH
 345: LD_INT 9999
 347: PPUSH
 348: CALL_OW 277
 352: GO 329
 354: POP
 355: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 356: LD_ADDR_VAR 0 1
 360: PUSH
 361: LD_INT 22
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 30
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 30
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; begin
 438: LD_INT 0
 440: PPUSH
// uc_side = 1 ;
 441: LD_ADDR_OWVAR 20
 445: PUSH
 446: LD_INT 1
 448: ST_TO_ADDR
// uc_nation = 1 ;
 449: LD_ADDR_OWVAR 21
 453: PUSH
 454: LD_INT 1
 456: ST_TO_ADDR
// if JMMVeh = [ ] then
 457: LD_EXP 24
 461: PUSH
 462: EMPTY
 463: EQUAL
 464: IFFALSE 510
// begin vc_engine = 3 ;
 466: LD_ADDR_OWVAR 39
 470: PUSH
 471: LD_INT 3
 473: ST_TO_ADDR
// vc_control = 1 ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// vc_chassis = 5 ;
 482: LD_ADDR_OWVAR 37
 486: PUSH
 487: LD_INT 5
 489: ST_TO_ADDR
// vc_weapon = 9 ;
 490: LD_ADDR_OWVAR 40
 494: PUSH
 495: LD_INT 9
 497: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 498: LD_ADDR_EXP 19
 502: PUSH
 503: CALL_OW 45
 507: ST_TO_ADDR
// end else
 508: GO 592
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 510: LD_ADDR_OWVAR 37
 514: PUSH
 515: LD_EXP 24
 519: PUSH
 520: LD_INT 1
 522: ARRAY
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 528: LD_ADDR_OWVAR 39
 532: PUSH
 533: LD_EXP 24
 537: PUSH
 538: LD_INT 2
 540: ARRAY
 541: PUSH
 542: LD_INT 1
 544: ARRAY
 545: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 546: LD_ADDR_OWVAR 38
 550: PUSH
 551: LD_EXP 24
 555: PUSH
 556: LD_INT 3
 558: ARRAY
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 564: LD_ADDR_OWVAR 40
 568: PUSH
 569: LD_EXP 24
 573: PUSH
 574: LD_INT 4
 576: ARRAY
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 582: LD_ADDR_EXP 19
 586: PUSH
 587: CALL_OW 45
 591: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 592: LD_EXP 25
 596: PUSH
 597: EMPTY
 598: EQUAL
 599: NOT
 600: IFFALSE 684
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 602: LD_ADDR_OWVAR 37
 606: PUSH
 607: LD_EXP 25
 611: PUSH
 612: LD_INT 1
 614: ARRAY
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 620: LD_ADDR_OWVAR 39
 624: PUSH
 625: LD_EXP 25
 629: PUSH
 630: LD_INT 2
 632: ARRAY
 633: PUSH
 634: LD_INT 1
 636: ARRAY
 637: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 638: LD_ADDR_OWVAR 38
 642: PUSH
 643: LD_EXP 25
 647: PUSH
 648: LD_INT 3
 650: ARRAY
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 656: LD_ADDR_OWVAR 40
 660: PUSH
 661: LD_EXP 25
 665: PUSH
 666: LD_INT 4
 668: ARRAY
 669: PUSH
 670: LD_INT 1
 672: ARRAY
 673: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 674: LD_ADDR_EXP 20
 678: PUSH
 679: CALL_OW 45
 683: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 684: LD_EXP 19
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 696: LD_EXP 20
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 708: LD_EXP 19
 712: PPUSH
 713: LD_INT 99
 715: PPUSH
 716: LD_INT 154
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: CALL_OW 48
// if JMMGirlVeh then
 726: LD_EXP 25
 730: IFFALSE 750
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 732: LD_EXP 20
 736: PPUSH
 737: LD_INT 98
 739: PPUSH
 740: LD_INT 159
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 750: LD_ADDR_EXP 1
 754: PUSH
 755: LD_STRING 14_JMM
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL 1890 0 2
 765: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 766: LD_EXP 1
 770: PPUSH
 771: LD_EXP 19
 775: PPUSH
 776: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 780: LD_EXP 25
 784: PUSH
 785: EMPTY
 786: EQUAL
 787: NOT
 788: IFFALSE 910
// begin if JMMGirl = 1 then
 790: LD_EXP 26
 794: PUSH
 795: LD_INT 1
 797: EQUAL
 798: IFFALSE 830
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_STRING 14_Joan
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL 1890 0 2
 815: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 816: LD_EXP 2
 820: PPUSH
 821: LD_EXP 20
 825: PPUSH
 826: CALL_OW 52
// end ; if JMMGirl = 2 then
 830: LD_EXP 26
 834: PUSH
 835: LD_INT 2
 837: EQUAL
 838: IFFALSE 870
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 840: LD_ADDR_EXP 4
 844: PUSH
 845: LD_STRING 14_Lisa
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: CALL 1890 0 2
 855: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 856: LD_EXP 4
 860: PPUSH
 861: LD_EXP 20
 865: PPUSH
 866: CALL_OW 52
// end ; if JMMGirl = 3 then
 870: LD_EXP 26
 874: PUSH
 875: LD_INT 3
 877: EQUAL
 878: IFFALSE 910
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 880: LD_ADDR_EXP 16
 884: PUSH
 885: LD_STRING 14_Connie
 887: PPUSH
 888: LD_INT 1
 890: PPUSH
 891: CALL 1890 0 2
 895: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
 896: LD_EXP 16
 900: PPUSH
 901: LD_EXP 20
 905: PPUSH
 906: CALL_OW 52
// end ; end ; uc_side = 4 ;
 910: LD_ADDR_OWVAR 20
 914: PUSH
 915: LD_INT 4
 917: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 918: LD_ADDR_EXP 17
 922: PUSH
 923: LD_STRING Powell
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL 1890 0 2
 933: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
 934: LD_EXP 17
 938: PPUSH
 939: LD_INT 47
 941: PPUSH
 942: LD_INT 63
 944: PPUSH
 945: LD_INT 5
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 50
// end ; end_of_file
 955: LD_VAR 0 1
 959: RET
// export function PrepareLegion ; var i ; begin
 960: LD_INT 0
 962: PPUSH
 963: PPUSH
// uc_side = 8 ;
 964: LD_ADDR_OWVAR 20
 968: PUSH
 969: LD_INT 8
 971: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
 972: LD_ADDR_EXP 23
 976: PUSH
 977: LD_STRING Kurt
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL 1890 0 2
 987: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
 988: LD_EXP 23
 992: PPUSH
 993: LD_INT 122
 995: PPUSH
 996: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
1000: LD_INT 8
1002: PPUSH
1003: LD_INT 2
1005: PPUSH
1006: LD_INT 122
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: LD_INT 4
1017: PPUSH
1018: CALL 2218 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
1022: LD_INT 8
1024: PPUSH
1025: LD_INT 2
1027: PPUSH
1028: LD_INT 99
1030: PPUSH
1031: LD_INT 10
1033: PPUSH
1034: LD_INT 2
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: CALL 2218 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
1044: LD_INT 8
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 104
1052: PPUSH
1053: LD_INT 10
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_INT 2
1061: PPUSH
1062: CALL 2218 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
1066: LD_INT 8
1068: PPUSH
1069: LD_INT 2
1071: PPUSH
1072: LD_INT 104
1074: PPUSH
1075: LD_INT 10
1077: PPUSH
1078: LD_INT 8
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL 2218 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
1088: LD_INT 8
1090: PPUSH
1091: LD_INT 2
1093: PPUSH
1094: LD_INT 118
1096: PPUSH
1097: LD_INT 10
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: CALL 2218 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
1110: LD_INT 8
1112: PPUSH
1113: LD_INT 2
1115: PPUSH
1116: LD_INT 117
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: LD_INT 4
1127: PPUSH
1128: CALL 2218 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_INT 22
1139: PUSH
1140: LD_INT 8
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 21
1149: PUSH
1150: LD_INT 3
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 30
1159: PUSH
1160: LD_INT 32
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 58
1169: PUSH
1170: EMPTY
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1213
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
1187: LD_INT 8
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_VAR 0 2
1197: PPUSH
1198: LD_INT 10
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 1
1206: PPUSH
1207: CALL 2218 0 6
1211: GO 1184
1213: POP
1214: POP
// end ; end_of_file
1215: LD_VAR 0 1
1219: RET
// export function PrepareRussians ; var i ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
// uc_side = 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
1232: LD_ADDR_EXP 21
1236: PUSH
1237: LD_STRING Platonov
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL 1890 0 2
1247: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
1248: LD_EXP 21
1252: PPUSH
1253: LD_INT 23
1255: PPUSH
1256: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
1260: LD_INT 3
1262: PPUSH
1263: LD_INT 3
1265: PPUSH
1266: LD_INT 26
1268: PPUSH
1269: LD_INT 10
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: LD_INT 5
1277: PPUSH
1278: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
1282: LD_INT 3
1284: PPUSH
1285: LD_INT 3
1287: PPUSH
1288: LD_INT 26
1290: PPUSH
1291: LD_INT 10
1293: PPUSH
1294: LD_INT 2
1296: PPUSH
1297: LD_INT 6
1299: PPUSH
1300: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 27
1312: PPUSH
1313: LD_INT 10
1315: PPUSH
1316: LD_INT 9
1318: PPUSH
1319: LD_INT 6
1321: PPUSH
1322: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 3
1331: PPUSH
1332: LD_INT 27
1334: PPUSH
1335: LD_INT 10
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
1348: LD_INT 3
1350: PPUSH
1351: LD_INT 3
1353: PPUSH
1354: LD_INT 4
1356: PPUSH
1357: LD_INT 10
1359: PPUSH
1360: LD_INT 3
1362: PPUSH
1363: LD_INT 6
1365: PPUSH
1366: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
1370: LD_INT 3
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: LD_INT 10
1378: PPUSH
1379: LD_INT 10
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: LD_INT 6
1387: PPUSH
1388: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
1392: LD_INT 3
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: LD_INT 2
1400: PPUSH
1401: LD_INT 10
1403: PPUSH
1404: LD_INT 4
1406: PPUSH
1407: LD_INT 3
1409: PPUSH
1410: CALL 2218 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
1414: LD_INT 3
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 10
1425: PPUSH
1426: LD_INT 4
1428: PPUSH
1429: LD_INT 3
1431: PPUSH
1432: CALL 2218 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1436: LD_ADDR_VAR 0 2
1440: PUSH
1441: LD_INT 22
1443: PUSH
1444: LD_INT 3
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 21
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 30
1463: PUSH
1464: LD_INT 32
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 58
1473: PUSH
1474: EMPTY
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: PPUSH
1483: CALL_OW 69
1487: PUSH
1488: FOR_IN
1489: IFFALSE 1517
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
1491: LD_INT 3
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: LD_VAR 0 2
1501: PPUSH
1502: LD_INT 10
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: CALL 2218 0 6
1515: GO 1488
1517: POP
1518: POP
// end ; end_of_file
1519: LD_VAR 0 1
1523: RET
// export function PrepareAlliance ; var i ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
// uc_side = 7 ;
1528: LD_ADDR_OWVAR 20
1532: PUSH
1533: LD_INT 7
1535: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
1536: LD_ADDR_EXP 22
1540: PUSH
1541: LD_STRING Roth
1543: PPUSH
1544: LD_INT 0
1546: PPUSH
1547: CALL 1890 0 2
1551: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
1552: LD_EXP 22
1556: PPUSH
1557: LD_INT 249
1559: PPUSH
1560: LD_INT 187
1562: PPUSH
1563: LD_INT 0
1565: PPUSH
1566: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
1570: LD_EXP 22
1574: PPUSH
1575: LD_INT 248
1577: PPUSH
1578: LD_INT 187
1580: PPUSH
1581: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
1585: LD_INT 7
1587: PPUSH
1588: LD_INT 1
1590: PPUSH
1591: LD_INT 45
1593: PPUSH
1594: LD_INT 10
1596: PPUSH
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 3
1602: PPUSH
1603: CALL 2218 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
1607: LD_INT 7
1609: PPUSH
1610: LD_INT 3
1612: PPUSH
1613: LD_INT 45
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: LD_INT 2
1621: PPUSH
1622: LD_INT 2
1624: PPUSH
1625: CALL 2218 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
1629: LD_INT 7
1631: PPUSH
1632: LD_INT 1
1634: PPUSH
1635: LD_INT 194
1637: PPUSH
1638: LD_INT 10
1640: PPUSH
1641: LD_INT 5
1643: PPUSH
1644: LD_INT 4
1646: PPUSH
1647: CALL 2218 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
1651: LD_INT 7
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 194
1659: PPUSH
1660: LD_INT 10
1662: PPUSH
1663: LD_INT 8
1665: PPUSH
1666: LD_INT 6
1668: PPUSH
1669: CALL 2218 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
1673: LD_INT 7
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: LD_INT 156
1681: PPUSH
1682: LD_INT 10
1684: PPUSH
1685: LD_INT 3
1687: PPUSH
1688: LD_INT 6
1690: PPUSH
1691: CALL 2218 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
1695: LD_INT 7
1697: PPUSH
1698: LD_INT 3
1700: PPUSH
1701: LD_INT 162
1703: PPUSH
1704: LD_INT 10
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_INT 6
1712: PPUSH
1713: CALL 2218 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
1717: LD_INT 7
1719: PPUSH
1720: LD_INT 3
1722: PPUSH
1723: LD_INT 39
1725: PPUSH
1726: LD_INT 10
1728: PPUSH
1729: LD_INT 4
1731: PPUSH
1732: LD_INT 4
1734: PPUSH
1735: CALL 2218 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
1739: LD_INT 7
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: LD_INT 133
1747: PPUSH
1748: LD_INT 10
1750: PPUSH
1751: LD_INT 4
1753: PPUSH
1754: LD_INT 4
1756: PPUSH
1757: CALL 2218 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
1761: LD_INT 7
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: LD_INT 46
1769: PPUSH
1770: LD_INT 10
1772: PPUSH
1773: LD_INT 4
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: CALL 2218 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1783: LD_ADDR_VAR 0 2
1787: PUSH
1788: LD_INT 22
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 21
1800: PUSH
1801: LD_INT 3
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: LD_INT 30
1810: PUSH
1811: LD_INT 32
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 58
1820: PUSH
1821: EMPTY
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 69
1834: PUSH
1835: FOR_IN
1836: IFFALSE 1883
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
1838: LD_INT 7
1840: PPUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_INT 2
1856: PPUSH
1857: CALL_OW 12
1861: ARRAY
1862: PPUSH
1863: LD_VAR 0 2
1867: PPUSH
1868: LD_INT 10
1870: PPUSH
1871: LD_INT 1
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: CALL 2218 0 6
1881: GO 1835
1883: POP
1884: POP
// end ; end_of_file
1885: LD_VAR 0 1
1889: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
// if exist_mode then
1894: LD_VAR 0 2
1898: IFFALSE 1917
// unit := CreateCharacter ( ident ) else
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: LD_VAR 0 1
1909: PPUSH
1910: CALL_OW 34
1914: ST_TO_ADDR
1915: GO 1932
// unit := NewCharacter ( ident ) ;
1917: LD_ADDR_VAR 0 4
1921: PUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: CALL_OW 25
1931: ST_TO_ADDR
// result := unit ;
1932: LD_ADDR_VAR 0 3
1936: PUSH
1937: LD_VAR 0 4
1941: ST_TO_ADDR
// end ;
1942: LD_VAR 0 3
1946: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
1947: LD_INT 0
1949: PPUSH
1950: PPUSH
1951: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
1952: LD_ADDR_VAR 0 1
1956: PUSH
1957: LD_VAR 0 1
1961: PUSH
1962: LD_EXP 1
1966: PUSH
1967: LD_EXP 2
1971: PUSH
1972: LD_EXP 3
1976: PUSH
1977: LD_EXP 4
1981: PUSH
1982: LD_EXP 5
1986: PUSH
1987: LD_EXP 6
1991: PUSH
1992: LD_EXP 7
1996: PUSH
1997: LD_EXP 8
2001: PUSH
2002: LD_EXP 9
2006: PUSH
2007: LD_EXP 10
2011: PUSH
2012: LD_EXP 11
2016: PUSH
2017: LD_EXP 12
2021: PUSH
2022: LD_EXP 13
2026: PUSH
2027: LD_EXP 14
2031: PUSH
2032: LD_EXP 15
2036: PUSH
2037: LD_EXP 17
2041: PUSH
2042: LD_EXP 16
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
2067: LD_ADDR_VAR 0 6
2071: PUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_VAR 0 1
2079: PPUSH
2080: CALL_OW 12
2084: ST_TO_ADDR
// for i = 1 to characters do
2085: LD_ADDR_VAR 0 5
2089: PUSH
2090: DOUBLE
2091: LD_INT 1
2093: DEC
2094: ST_TO_ADDR
2095: LD_VAR 0 1
2099: PUSH
2100: FOR_TO
2101: IFFALSE 2211
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2103: LD_VAR 0 5
2107: PUSH
2108: LD_VAR 0 6
2112: EQUAL
2113: PUSH
2114: LD_VAR 0 1
2118: PUSH
2119: LD_VAR 0 5
2123: ARRAY
2124: PPUSH
2125: CALL_OW 258
2129: PUSH
2130: LD_INT 1
2132: EQUAL
2133: AND
2134: IFFALSE 2156
// Say ( characters [ i ] , dialogMID ) ;
2136: LD_VAR 0 1
2140: PUSH
2141: LD_VAR 0 5
2145: ARRAY
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2156: LD_VAR 0 5
2160: PUSH
2161: LD_VAR 0 6
2165: EQUAL
2166: PUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_VAR 0 5
2176: ARRAY
2177: PPUSH
2178: CALL_OW 258
2182: PUSH
2183: LD_INT 2
2185: EQUAL
2186: AND
2187: IFFALSE 2209
// Say ( characters [ i ] , dialogFID ) ;
2189: LD_VAR 0 1
2193: PUSH
2194: LD_VAR 0 5
2198: ARRAY
2199: PPUSH
2200: LD_VAR 0 3
2204: PPUSH
2205: CALL_OW 88
// end ;
2209: GO 2100
2211: POP
2212: POP
// end ;
2213: LD_VAR 0 4
2217: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
2218: LD_INT 0
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
// for i = 1 to count do
2225: LD_ADDR_VAR 0 8
2229: PUSH
2230: DOUBLE
2231: LD_INT 1
2233: DEC
2234: ST_TO_ADDR
2235: LD_VAR 0 6
2239: PUSH
2240: FOR_TO
2241: IFFALSE 2322
// begin uc_side = side ;
2243: LD_ADDR_OWVAR 20
2247: PUSH
2248: LD_VAR 0 1
2252: ST_TO_ADDR
// uc_nation = nation ;
2253: LD_ADDR_OWVAR 21
2257: PUSH
2258: LD_VAR 0 2
2262: ST_TO_ADDR
// hc_gallery =  ;
2263: LD_ADDR_OWVAR 33
2267: PUSH
2268: LD_STRING 
2270: ST_TO_ADDR
// hc_name =  ;
2271: LD_ADDR_OWVAR 26
2275: PUSH
2276: LD_STRING 
2278: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
2279: LD_INT 0
2281: PPUSH
2282: LD_VAR 0 5
2286: PPUSH
2287: LD_VAR 0 4
2291: PPUSH
2292: CALL_OW 380
// un = CreateHuman ;
2296: LD_ADDR_VAR 0 10
2300: PUSH
2301: CALL_OW 44
2305: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
2306: LD_VAR 0 10
2310: PPUSH
2311: LD_VAR 0 3
2315: PPUSH
2316: CALL_OW 52
// end ;
2320: GO 2240
2322: POP
2323: POP
// end ;
2324: LD_VAR 0 7
2328: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
2329: LD_INT 0
2331: PPUSH
2332: PPUSH
2333: PPUSH
2334: PPUSH
2335: PPUSH
2336: PPUSH
2337: PPUSH
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
2342: LD_INT 2100
2344: PUSH
2345: LD_INT 3150
2347: PUSH
2348: LD_INT 4200
2350: PUSH
2351: LD_INT 5250
2353: PUSH
2354: LD_INT 6300
2356: PUSH
2357: LD_INT 7350
2359: PUSH
2360: LD_INT 8400
2362: PUSH
2363: LD_INT 9450
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 8
2381: PPUSH
2382: CALL_OW 12
2386: ARRAY
2387: PPUSH
2388: CALL_OW 67
// amChassisTab = [ ] ;
2392: LD_ADDR_VAR 0 19
2396: PUSH
2397: EMPTY
2398: ST_TO_ADDR
// arChassisTab = [ ] ;
2399: LD_ADDR_VAR 0 18
2403: PUSH
2404: EMPTY
2405: ST_TO_ADDR
// ruChassisTab = [ ] ;
2406: LD_ADDR_VAR 0 17
2410: PUSH
2411: EMPTY
2412: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
2413: LD_INT 35
2415: PPUSH
2416: CALL_OW 67
// if nation = 1 then
2420: LD_VAR 0 5
2424: PUSH
2425: LD_INT 1
2427: EQUAL
2428: IFFALSE 2919
// begin uc_side = side ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_VAR 0 2
2439: ST_TO_ADDR
// uc_nation = nation ;
2440: LD_ADDR_OWVAR 21
2444: PUSH
2445: LD_VAR 0 5
2449: ST_TO_ADDR
// vc_engine = vehengine ;
2450: LD_ADDR_OWVAR 39
2454: PUSH
2455: LD_VAR 0 6
2459: ST_TO_ADDR
// vc_control = vehcontrol ;
2460: LD_ADDR_OWVAR 38
2464: PUSH
2465: LD_VAR 0 7
2469: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
2470: LD_ADDR_OWVAR 40
2474: PUSH
2475: LD_VAR 0 10
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_VAR 0 10
2487: PPUSH
2488: CALL_OW 12
2492: ARRAY
2493: ST_TO_ADDR
// for j = 1 to AMWeapon do
2494: LD_ADDR_VAR 0 14
2498: PUSH
2499: DOUBLE
2500: LD_INT 1
2502: DEC
2503: ST_TO_ADDR
2504: LD_VAR 0 10
2508: PUSH
2509: FOR_TO
2510: IFFALSE 2811
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
2512: LD_VAR 0 10
2516: PUSH
2517: LD_VAR 0 14
2521: ARRAY
2522: PUSH
2523: LD_INT 2
2525: EQUAL
2526: PUSH
2527: LD_VAR 0 10
2531: PUSH
2532: LD_VAR 0 14
2536: ARRAY
2537: PUSH
2538: LD_INT 3
2540: EQUAL
2541: OR
2542: IFFALSE 2595
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
2544: LD_ADDR_VAR 0 19
2548: PUSH
2549: LD_INT 1
2551: PUSH
2552: LD_INT 2
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: LD_INT 4
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2571: LD_ADDR_OWVAR 37
2575: PUSH
2576: LD_VAR 0 19
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_VAR 0 19
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
2595: LD_VAR 0 10
2599: PUSH
2600: LD_VAR 0 14
2604: ARRAY
2605: PUSH
2606: LD_INT 4
2608: EQUAL
2609: PUSH
2610: LD_VAR 0 10
2614: PUSH
2615: LD_VAR 0 14
2619: ARRAY
2620: PUSH
2621: LD_INT 5
2623: EQUAL
2624: OR
2625: PUSH
2626: LD_VAR 0 10
2630: PUSH
2631: LD_VAR 0 14
2635: ARRAY
2636: PUSH
2637: LD_INT 9
2639: EQUAL
2640: OR
2641: PUSH
2642: LD_VAR 0 10
2646: PUSH
2647: LD_VAR 0 14
2651: ARRAY
2652: PUSH
2653: LD_INT 11
2655: EQUAL
2656: OR
2657: PUSH
2658: LD_VAR 0 10
2662: PUSH
2663: LD_VAR 0 14
2667: ARRAY
2668: PUSH
2669: LD_INT 7
2671: EQUAL
2672: OR
2673: IFFALSE 2722
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
2675: LD_ADDR_VAR 0 19
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 4
2688: PUSH
2689: LD_INT 5
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2698: LD_ADDR_OWVAR 37
2702: PUSH
2703: LD_VAR 0 19
2707: PUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_VAR 0 19
2715: PPUSH
2716: CALL_OW 12
2720: ARRAY
2721: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
2722: LD_VAR 0 10
2726: PUSH
2727: LD_VAR 0 14
2731: ARRAY
2732: PUSH
2733: LD_INT 8
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 10
2741: PUSH
2742: LD_VAR 0 14
2746: ARRAY
2747: PUSH
2748: LD_INT 6
2750: EQUAL
2751: OR
2752: PUSH
2753: LD_VAR 0 10
2757: PUSH
2758: LD_VAR 0 14
2762: ARRAY
2763: PUSH
2764: LD_INT 10
2766: EQUAL
2767: OR
2768: IFFALSE 2809
// begin amChassisTab = [ 4 , 5 ] ;
2770: LD_ADDR_VAR 0 19
2774: PUSH
2775: LD_INT 4
2777: PUSH
2778: LD_INT 5
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2785: LD_ADDR_OWVAR 37
2789: PUSH
2790: LD_VAR 0 19
2794: PUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_VAR 0 19
2802: PPUSH
2803: CALL_OW 12
2807: ARRAY
2808: ST_TO_ADDR
// end ; end ;
2809: GO 2509
2811: POP
2812: POP
// veh = CreateVehicle ;
2813: LD_ADDR_VAR 0 16
2817: PUSH
2818: CALL_OW 45
2822: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2823: LD_VAR 0 16
2827: PPUSH
2828: LD_VAR 0 1
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL_OW 49
// if vc_control = 1 then
2840: LD_OWVAR 38
2844: PUSH
2845: LD_INT 1
2847: EQUAL
2848: IFFALSE 2905
// begin hc_gallery =  ;
2850: LD_ADDR_OWVAR 33
2854: PUSH
2855: LD_STRING 
2857: ST_TO_ADDR
// hc_name =  ;
2858: LD_ADDR_OWVAR 26
2862: PUSH
2863: LD_STRING 
2865: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 3
2871: PPUSH
2872: LD_VAR 0 4
2876: PPUSH
2877: CALL_OW 380
// un = CreateHuman ;
2881: LD_ADDR_VAR 0 15
2885: PUSH
2886: CALL_OW 44
2890: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2891: LD_VAR 0 15
2895: PPUSH
2896: LD_VAR 0 16
2900: PPUSH
2901: CALL_OW 52
// end ; i = i + 1 ;
2905: LD_ADDR_VAR 0 13
2909: PUSH
2910: LD_VAR 0 13
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ST_TO_ADDR
// end ; if nation = 2 then
2919: LD_VAR 0 5
2923: PUSH
2924: LD_INT 2
2926: EQUAL
2927: IFFALSE 3351
// begin uc_side = side ;
2929: LD_ADDR_OWVAR 20
2933: PUSH
2934: LD_VAR 0 2
2938: ST_TO_ADDR
// uc_nation = nation ;
2939: LD_ADDR_OWVAR 21
2943: PUSH
2944: LD_VAR 0 5
2948: ST_TO_ADDR
// vc_engine = vehengine ;
2949: LD_ADDR_OWVAR 39
2953: PUSH
2954: LD_VAR 0 6
2958: ST_TO_ADDR
// vc_control = vehcontrol ;
2959: LD_ADDR_OWVAR 38
2963: PUSH
2964: LD_VAR 0 7
2968: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
2969: LD_ADDR_OWVAR 40
2973: PUSH
2974: LD_VAR 0 9
2978: PUSH
2979: LD_INT 1
2981: PPUSH
2982: LD_VAR 0 9
2986: PPUSH
2987: CALL_OW 12
2991: ARRAY
2992: ST_TO_ADDR
// for j = 1 to ARWeapons do
2993: LD_ADDR_VAR 0 14
2997: PUSH
2998: DOUBLE
2999: LD_INT 1
3001: DEC
3002: ST_TO_ADDR
3003: LD_VAR 0 9
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3243
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
3011: LD_VAR 0 9
3015: PUSH
3016: LD_VAR 0 14
3020: ARRAY
3021: PUSH
3022: LD_INT 24
3024: EQUAL
3025: PUSH
3026: LD_VAR 0 9
3030: PUSH
3031: LD_VAR 0 14
3035: ARRAY
3036: PUSH
3037: LD_INT 22
3039: EQUAL
3040: OR
3041: PUSH
3042: LD_VAR 0 9
3046: PUSH
3047: LD_VAR 0 14
3051: ARRAY
3052: PUSH
3053: LD_INT 23
3055: EQUAL
3056: OR
3057: PUSH
3058: LD_VAR 0 9
3062: PUSH
3063: LD_VAR 0 14
3067: ARRAY
3068: PUSH
3069: LD_INT 30
3071: EQUAL
3072: OR
3073: IFFALSE 3122
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
3075: LD_ADDR_VAR 0 18
3079: PUSH
3080: LD_INT 11
3082: PUSH
3083: LD_INT 12
3085: PUSH
3086: LD_INT 13
3088: PUSH
3089: LD_INT 14
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
3098: LD_ADDR_OWVAR 37
3102: PUSH
3103: LD_VAR 0 18
3107: PUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_VAR 0 18
3115: PPUSH
3116: CALL_OW 12
3120: ARRAY
3121: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
3122: LD_VAR 0 9
3126: PUSH
3127: LD_VAR 0 14
3131: ARRAY
3132: PUSH
3133: LD_INT 29
3135: EQUAL
3136: PUSH
3137: LD_VAR 0 9
3141: PUSH
3142: LD_VAR 0 14
3146: ARRAY
3147: PUSH
3148: LD_INT 28
3150: EQUAL
3151: OR
3152: PUSH
3153: LD_VAR 0 9
3157: PUSH
3158: LD_VAR 0 14
3162: ARRAY
3163: PUSH
3164: LD_INT 27
3166: EQUAL
3167: OR
3168: PUSH
3169: LD_VAR 0 9
3173: PUSH
3174: LD_VAR 0 14
3178: ARRAY
3179: PUSH
3180: LD_INT 26
3182: EQUAL
3183: OR
3184: PUSH
3185: LD_VAR 0 9
3189: PUSH
3190: LD_VAR 0 14
3194: ARRAY
3195: PUSH
3196: LD_INT 25
3198: EQUAL
3199: OR
3200: IFFALSE 3241
// begin arChassisTab = [ 13 , 14 ] ;
3202: LD_ADDR_VAR 0 18
3206: PUSH
3207: LD_INT 13
3209: PUSH
3210: LD_INT 14
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
3217: LD_ADDR_OWVAR 37
3221: PUSH
3222: LD_VAR 0 18
3226: PUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_VAR 0 18
3234: PPUSH
3235: CALL_OW 12
3239: ARRAY
3240: ST_TO_ADDR
// end ; end ;
3241: GO 3008
3243: POP
3244: POP
// veh = CreateVehicle ;
3245: LD_ADDR_VAR 0 16
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3255: LD_VAR 0 16
3259: PPUSH
3260: LD_VAR 0 1
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 49
// if vc_control = 1 then
3272: LD_OWVAR 38
3276: PUSH
3277: LD_INT 1
3279: EQUAL
3280: IFFALSE 3337
// begin hc_gallery =  ;
3282: LD_ADDR_OWVAR 33
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// hc_name =  ;
3290: LD_ADDR_OWVAR 26
3294: PUSH
3295: LD_STRING 
3297: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_VAR 0 4
3308: PPUSH
3309: CALL_OW 380
// un = CreateHuman ;
3313: LD_ADDR_VAR 0 15
3317: PUSH
3318: CALL_OW 44
3322: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3323: LD_VAR 0 15
3327: PPUSH
3328: LD_VAR 0 16
3332: PPUSH
3333: CALL_OW 52
// end ; i = i + 1 ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_VAR 0 13
3346: PUSH
3347: LD_INT 1
3349: PLUS
3350: ST_TO_ADDR
// end ; if nation = 3 then
3351: LD_VAR 0 5
3355: PUSH
3356: LD_INT 3
3358: EQUAL
3359: IFFALSE 3751
// begin uc_side = side ;
3361: LD_ADDR_OWVAR 20
3365: PUSH
3366: LD_VAR 0 2
3370: ST_TO_ADDR
// uc_nation = nation ;
3371: LD_ADDR_OWVAR 21
3375: PUSH
3376: LD_VAR 0 5
3380: ST_TO_ADDR
// vc_engine = vehengine ;
3381: LD_ADDR_OWVAR 39
3385: PUSH
3386: LD_VAR 0 6
3390: ST_TO_ADDR
// vc_control = vehcontrol ;
3391: LD_ADDR_OWVAR 38
3395: PUSH
3396: LD_VAR 0 7
3400: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
3401: LD_ADDR_OWVAR 40
3405: PUSH
3406: LD_VAR 0 8
3410: PUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_VAR 0 8
3418: PPUSH
3419: CALL_OW 12
3423: ARRAY
3424: ST_TO_ADDR
// for j = 1 to RuWeapons do
3425: LD_ADDR_VAR 0 14
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_VAR 0 8
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3643
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
3443: LD_VAR 0 8
3447: PUSH
3448: LD_VAR 0 14
3452: ARRAY
3453: PUSH
3454: LD_INT 42
3456: EQUAL
3457: PUSH
3458: LD_VAR 0 8
3462: PUSH
3463: LD_VAR 0 14
3467: ARRAY
3468: PUSH
3469: LD_INT 43
3471: EQUAL
3472: OR
3473: PUSH
3474: LD_VAR 0 8
3478: PUSH
3479: LD_VAR 0 14
3483: ARRAY
3484: PUSH
3485: LD_INT 44
3487: EQUAL
3488: OR
3489: PUSH
3490: LD_VAR 0 8
3494: PUSH
3495: LD_VAR 0 14
3499: ARRAY
3500: PUSH
3501: LD_INT 45
3503: EQUAL
3504: OR
3505: PUSH
3506: LD_VAR 0 8
3510: PUSH
3511: LD_VAR 0 14
3515: ARRAY
3516: PUSH
3517: LD_INT 49
3519: EQUAL
3520: OR
3521: IFFALSE 3570
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
3523: LD_ADDR_VAR 0 17
3527: PUSH
3528: LD_INT 21
3530: PUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 23
3536: PUSH
3537: LD_INT 24
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
3546: LD_ADDR_OWVAR 37
3550: PUSH
3551: LD_VAR 0 17
3555: PUSH
3556: LD_INT 1
3558: PPUSH
3559: LD_VAR 0 17
3563: PPUSH
3564: CALL_OW 12
3568: ARRAY
3569: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
3570: LD_VAR 0 8
3574: PUSH
3575: LD_VAR 0 14
3579: ARRAY
3580: PUSH
3581: LD_INT 46
3583: EQUAL
3584: PUSH
3585: LD_VAR 0 8
3589: PUSH
3590: LD_VAR 0 14
3594: ARRAY
3595: PUSH
3596: LD_INT 47
3598: EQUAL
3599: OR
3600: IFFALSE 3641
// begin ruChassisTab = [ 23 , 24 ] ;
3602: LD_ADDR_VAR 0 17
3606: PUSH
3607: LD_INT 23
3609: PUSH
3610: LD_INT 24
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
3617: LD_ADDR_OWVAR 37
3621: PUSH
3622: LD_VAR 0 17
3626: PUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_VAR 0 17
3634: PPUSH
3635: CALL_OW 12
3639: ARRAY
3640: ST_TO_ADDR
// end ; end ;
3641: GO 3440
3643: POP
3644: POP
// veh = CreateVehicle ;
3645: LD_ADDR_VAR 0 16
3649: PUSH
3650: CALL_OW 45
3654: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3655: LD_VAR 0 16
3659: PPUSH
3660: LD_VAR 0 1
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 49
// if vc_control = 1 then
3672: LD_OWVAR 38
3676: PUSH
3677: LD_INT 1
3679: EQUAL
3680: IFFALSE 3737
// begin hc_gallery =  ;
3682: LD_ADDR_OWVAR 33
3686: PUSH
3687: LD_STRING 
3689: ST_TO_ADDR
// hc_name =  ;
3690: LD_ADDR_OWVAR 26
3694: PUSH
3695: LD_STRING 
3697: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
3698: LD_INT 0
3700: PPUSH
3701: LD_INT 3
3703: PPUSH
3704: LD_VAR 0 4
3708: PPUSH
3709: CALL_OW 380
// un = CreateHuman ;
3713: LD_ADDR_VAR 0 15
3717: PUSH
3718: CALL_OW 44
3722: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3723: LD_VAR 0 15
3727: PPUSH
3728: LD_VAR 0 16
3732: PPUSH
3733: CALL_OW 52
// end ; i = i + 1 ;
3737: LD_ADDR_VAR 0 13
3741: PUSH
3742: LD_VAR 0 13
3746: PUSH
3747: LD_INT 1
3749: PLUS
3750: ST_TO_ADDR
// end ; until i = vehCount ;
3751: LD_VAR 0 13
3755: PUSH
3756: LD_VAR 0 3
3760: EQUAL
3761: IFFALSE 2413
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
3770: LD_ADDR_VAR 0 20
3774: PUSH
3775: LD_INT 22
3777: PUSH
3778: LD_VAR 0 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 21
3789: PUSH
3790: LD_INT 2
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 24
3799: PUSH
3800: LD_INT 661
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 69
3816: ST_TO_ADDR
// if vehicleOK_list > 0 then
3817: LD_VAR 0 20
3821: PUSH
3822: LD_INT 0
3824: GREATER
3825: IFFALSE 4016
// begin for i in vehicleOK_list do
3827: LD_ADDR_VAR 0 13
3831: PUSH
3832: LD_VAR 0 20
3836: PUSH
3837: FOR_IN
3838: IFFALSE 4014
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
3840: LD_ADDR_VAR 0 21
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_VAR 0 11
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: PPUSH
3862: LD_VAR 0 13
3866: PPUSH
3867: CALL_OW 74
3871: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3872: LD_ADDR_VAR 0 22
3876: PUSH
3877: LD_INT 22
3879: PUSH
3880: LD_VAR 0 11
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 59
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: LD_INT 21
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: LD_INT 21
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: PPUSH
3931: CALL_OW 69
3935: PPUSH
3936: LD_VAR 0 13
3940: PPUSH
3941: CALL_OW 74
3945: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
3946: LD_VAR 0 13
3950: PPUSH
3951: LD_VAR 0 21
3955: PPUSH
3956: CALL_OW 296
3960: PUSH
3961: LD_INT 8
3963: PLUS
3964: PUSH
3965: LD_VAR 0 13
3969: PPUSH
3970: LD_VAR 0 22
3974: PPUSH
3975: CALL_OW 296
3979: LESS
3980: IFFALSE 3998
// begin ComAttackUnit ( i , target1 ) ;
3982: LD_VAR 0 13
3986: PPUSH
3987: LD_VAR 0 21
3991: PPUSH
3992: CALL_OW 115
// end else
3996: GO 4012
// begin ComAttackUnit ( i , target2 ) ;
3998: LD_VAR 0 13
4002: PPUSH
4003: LD_VAR 0 22
4007: PPUSH
4008: CALL_OW 115
// end ; end ;
4012: GO 3837
4014: POP
4015: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
4016: LD_INT 22
4018: PUSH
4019: LD_VAR 0 2
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 21
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 24
4040: PUSH
4041: LD_INT 250
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 59
4050: PUSH
4051: EMPTY
4052: LIST
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: LD_INT 31
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: LD_INT 0
4078: EQUAL
4079: IFFALSE 3763
// end ; end_of_file end_of_file end_of_file end_of_file
4081: LD_VAR 0 12
4085: RET
// every 3 3$0 do
4086: GO 4088
4088: DISABLE
// begin enable ;
4089: ENABLE
// RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
4090: LD_INT 2
4092: PPUSH
4093: LD_INT 6
4095: PPUSH
4096: LD_INT 2
4098: PPUSH
4099: LD_INT 4
4101: PPUSH
4102: CALL_OW 12
4106: PPUSH
4107: LD_INT 10
4109: PPUSH
4110: LD_INT 3
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: LD_INT 3
4118: PPUSH
4119: LD_INT 42
4121: PUSH
4122: LD_INT 43
4124: PUSH
4125: LD_INT 44
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: PPUSH
4133: EMPTY
4134: PPUSH
4135: EMPTY
4136: PPUSH
4137: LD_INT 1
4139: PPUSH
4140: CALL 2329 0 11
// end ; end_of_file
4144: END
// every 1 do var dec1 , options ;
4145: GO 4147
4147: DISABLE
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
// begin InGameOn ;
4152: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
4156: LD_EXP 19
4160: PUSH
4161: LD_EXP 20
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PPUSH
4170: LD_INT 48
4172: PPUSH
4173: LD_INT 68
4175: PPUSH
4176: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
4180: LD_EXP 19
4184: PPUSH
4185: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
4189: LD_EXP 1
4193: PPUSH
4194: LD_STRING D1T-JMM-1
4196: PPUSH
4197: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4201: LD_EXP 19
4205: PPUSH
4206: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
4210: LD_EXP 17
4214: PPUSH
4215: LD_STRING D1T-Pow-1
4217: PPUSH
4218: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4222: LD_EXP 19
4226: PPUSH
4227: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
4231: LD_EXP 1
4235: PPUSH
4236: LD_STRING D1T-JMM-2
4238: PPUSH
4239: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4243: LD_EXP 19
4247: PPUSH
4248: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
4252: LD_EXP 17
4256: PPUSH
4257: LD_STRING D1T-Pow-2
4259: PPUSH
4260: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4264: LD_EXP 19
4268: PPUSH
4269: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
4273: LD_EXP 1
4277: PPUSH
4278: LD_STRING D1T-JMM-3
4280: PPUSH
4281: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4285: LD_EXP 19
4289: PPUSH
4290: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
4294: LD_EXP 17
4298: PPUSH
4299: LD_STRING D1T-Pow-3
4301: PPUSH
4302: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4306: LD_EXP 19
4310: PPUSH
4311: CALL_OW 87
// if not JMMGirlVeh = [ ] then
4315: LD_EXP 25
4319: PUSH
4320: EMPTY
4321: EQUAL
4322: NOT
4323: IFFALSE 4423
// begin if JMMGirl = 1 then
4325: LD_EXP 26
4329: PUSH
4330: LD_INT 1
4332: EQUAL
4333: IFFALSE 4347
// Say ( Joan , D1T-Joan-3 ) ;
4335: LD_EXP 2
4339: PPUSH
4340: LD_STRING D1T-Joan-3
4342: PPUSH
4343: CALL_OW 88
// if JMMGirl = 2 then
4347: LD_EXP 26
4351: PUSH
4352: LD_INT 2
4354: EQUAL
4355: IFFALSE 4369
// Say ( Joan , D1T-Lisa-3 ) ;
4357: LD_EXP 2
4361: PPUSH
4362: LD_STRING D1T-Lisa-3
4364: PPUSH
4365: CALL_OW 88
// if JMMGirl = 3 then
4369: LD_EXP 26
4373: PUSH
4374: LD_INT 3
4376: EQUAL
4377: IFFALSE 4391
// Say ( Joan , D1T-Con-3 ) ;
4379: LD_EXP 2
4383: PPUSH
4384: LD_STRING D1T-Con-3
4386: PPUSH
4387: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4391: LD_EXP 19
4395: PPUSH
4396: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
4400: LD_EXP 17
4404: PPUSH
4405: LD_STRING D1T-Pow-4
4407: PPUSH
4408: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4412: LD_EXP 19
4416: PPUSH
4417: CALL_OW 87
// end else
4421: GO 4465
// begin Say ( JMM , D1T-JMM-4 ) ;
4423: LD_EXP 1
4427: PPUSH
4428: LD_STRING D1T-JMM-4
4430: PPUSH
4431: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4435: LD_EXP 19
4439: PPUSH
4440: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
4444: LD_EXP 17
4448: PPUSH
4449: LD_STRING D1T-Pow-5
4451: PPUSH
4452: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4456: LD_EXP 19
4460: PPUSH
4461: CALL_OW 87
// end ; repeat wait ( 0 0$1 ) ;
4465: LD_INT 35
4467: PPUSH
4468: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
4472: LD_EXP 19
4476: PUSH
4477: LD_EXP 20
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: LD_INT 48
4488: PPUSH
4489: LD_INT 68
4491: PPUSH
4492: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
4496: LD_EXP 19
4500: PPUSH
4501: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 15 ;
4505: LD_EXP 19
4509: PPUSH
4510: LD_EXP 17
4514: PPUSH
4515: CALL_OW 296
4519: PUSH
4520: LD_INT 15
4522: LESS
4523: IFFALSE 4465
// ComExitVehicle ( JMM ) ;
4525: LD_EXP 1
4529: PPUSH
4530: CALL_OW 121
// wait ( 0 0$1 ) ;
4534: LD_INT 35
4536: PPUSH
4537: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4541: LD_INT 35
4543: PPUSH
4544: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
4548: LD_EXP 1
4552: PPUSH
4553: LD_EXP 17
4557: PPUSH
4558: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
4562: LD_EXP 1
4566: PPUSH
4567: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 4 ;
4571: LD_EXP 1
4575: PPUSH
4576: LD_EXP 17
4580: PPUSH
4581: CALL_OW 296
4585: PUSH
4586: LD_INT 4
4588: LESS
4589: IFFALSE 4541
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
4591: LD_EXP 1
4595: PUSH
4596: LD_EXP 17
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
4609: LD_EXP 1
4613: PPUSH
4614: LD_EXP 17
4618: PPUSH
4619: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
4623: LD_EXP 17
4627: PPUSH
4628: LD_EXP 1
4632: PPUSH
4633: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
4637: LD_EXP 1
4641: PPUSH
4642: LD_STRING D1-JMM-1
4644: PPUSH
4645: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
4649: LD_EXP 17
4653: PPUSH
4654: LD_STRING D1-Pow-1
4656: PPUSH
4657: CALL_OW 88
// CenterOnXY ( 171 , 81 ) ;
4661: LD_INT 171
4663: PPUSH
4664: LD_INT 81
4666: PPUSH
4667: CALL_OW 84
// wait ( 0 0$2 ) ;
4671: LD_INT 70
4673: PPUSH
4674: CALL_OW 67
// CenterOnXY ( 157 , 49 ) ;
4678: LD_INT 157
4680: PPUSH
4681: LD_INT 49
4683: PPUSH
4684: CALL_OW 84
// wait ( 0 0$2 ) ;
4688: LD_INT 70
4690: PPUSH
4691: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
4695: LD_INT 75
4697: PPUSH
4698: LD_INT 16
4700: PPUSH
4701: CALL_OW 84
// wait ( 0 0$3 ) ;
4705: LD_INT 105
4707: PPUSH
4708: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
4712: LD_EXP 17
4716: PUSH
4717: LD_EXP 1
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
4730: LD_EXP 1
4734: PPUSH
4735: LD_STRING D1-JMM-2
4737: PPUSH
4738: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
4742: LD_EXP 17
4746: PPUSH
4747: LD_STRING D1-Pow-2
4749: PPUSH
4750: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
4754: LD_EXP 1
4758: PPUSH
4759: LD_STRING D1-JMM-3
4761: PPUSH
4762: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
4766: LD_EXP 17
4770: PPUSH
4771: LD_STRING D1-Pow-3
4773: PPUSH
4774: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
4778: LD_EXP 1
4782: PPUSH
4783: LD_STRING D1-JMM-4
4785: PPUSH
4786: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
4790: LD_EXP 17
4794: PPUSH
4795: LD_STRING D1-Pow-4
4797: PPUSH
4798: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
4802: LD_EXP 1
4806: PPUSH
4807: LD_STRING D1-JMM-5
4809: PPUSH
4810: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
4814: LD_EXP 17
4818: PPUSH
4819: LD_STRING D1-Pow-5
4821: PPUSH
4822: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: LD_INT 2
4836: PUSH
4837: LD_INT 3
4839: PUSH
4840: LD_INT 4
4842: PUSH
4843: LD_INT 5
4845: PUSH
4846: LD_INT 6
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
4857: LD_ADDR_VAR 0 1
4861: PUSH
4862: LD_STRING Q1
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 98
4874: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
4875: LD_ADDR_VAR 0 1
4879: PUSH
4880: LD_STRING Q1
4882: PPUSH
4883: LD_VAR 0 2
4887: PPUSH
4888: CALL_OW 98
4892: ST_TO_ADDR
// options = options diff dec1 ;
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: LD_VAR 0 2
4902: PUSH
4903: LD_VAR 0 1
4907: DIFF
4908: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
4909: LD_VAR 0 1
4913: PPUSH
4914: LD_VAR 0 2
4918: PPUSH
4919: CALL 5016 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 5
4930: PUSH
4931: LD_INT 6
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: IN
4938: PUSH
4939: LD_VAR 0 2
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: OR
4948: IFFALSE 4875
// if not ( dec1 in [ 5 , 6 ] ) then
4950: LD_VAR 0 1
4954: PUSH
4955: LD_INT 5
4957: PUSH
4958: LD_INT 6
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: IN
4965: NOT
4966: IFFALSE 5009
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
4968: LD_ADDR_VAR 0 1
4972: PUSH
4973: LD_STRING Q1a
4975: PPUSH
4976: LD_INT 1
4978: PUSH
4979: LD_INT 2
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PPUSH
4986: CALL_OW 98
4990: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 4
4998: PLUS
4999: PPUSH
5000: LD_VAR 0 2
5004: PPUSH
5005: CALL 5016 0 2
// end ; InGameOff ;
5009: CALL_OW 9
// end ;
5013: PPOPN 2
5015: END
// function ResolveQuery ( question , list_of_q ) ; begin
5016: LD_INT 0
5018: PPUSH
// case question of 1 :
5019: LD_VAR 0 1
5023: PUSH
5024: LD_INT 1
5026: DOUBLE
5027: EQUAL
5028: IFTRUE 5032
5030: GO 5083
5032: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
5033: LD_EXP 1
5037: PPUSH
5038: LD_STRING D2Mot-JMM-1
5040: PPUSH
5041: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
5045: LD_EXP 17
5049: PPUSH
5050: LD_STRING D2Mot-Pow-1
5052: PPUSH
5053: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D2Mot-JMM-2
5064: PPUSH
5065: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
5069: LD_EXP 17
5073: PPUSH
5074: LD_STRING D2Mot-Pow-2
5076: PPUSH
5077: CALL_OW 88
// end ; 2 :
5081: GO 5426
5083: LD_INT 2
5085: DOUBLE
5086: EQUAL
5087: IFTRUE 5091
5089: GO 5167
5091: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
5092: LD_EXP 1
5096: PPUSH
5097: LD_STRING D2Rus-JMM-1
5099: PPUSH
5100: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
5104: LD_EXP 17
5108: PPUSH
5109: LD_STRING D2Rus-Pow-1
5111: PPUSH
5112: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
5116: LD_EXP 1
5120: PPUSH
5121: LD_STRING D2Rus-JMM-2
5123: PPUSH
5124: CALL_OW 88
// if not ( 3 in list_of_q ) then
5128: LD_INT 3
5130: PUSH
5131: LD_VAR 0 2
5135: IN
5136: NOT
5137: IFFALSE 5153
// Say ( Powell , D2Rus-Pow-2 ) else
5139: LD_EXP 17
5143: PPUSH
5144: LD_STRING D2Rus-Pow-2
5146: PPUSH
5147: CALL_OW 88
5151: GO 5165
// Say ( Powell , D2Rus-Pow-2a ) ;
5153: LD_EXP 17
5157: PPUSH
5158: LD_STRING D2Rus-Pow-2a
5160: PPUSH
5161: CALL_OW 88
// end ; 3 :
5165: GO 5426
5167: LD_INT 3
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5175
5173: GO 5260
5175: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
5176: LD_EXP 1
5180: PPUSH
5181: LD_STRING D2Leg-JMM-1
5183: PPUSH
5184: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
5188: LD_EXP 17
5192: PPUSH
5193: LD_STRING D2Leg-Pow-1
5195: PPUSH
5196: CALL_OW 88
// if ( 2 in list_of_q ) then
5200: LD_INT 2
5202: PUSH
5203: LD_VAR 0 2
5207: IN
5208: IFFALSE 5234
// begin Say ( JMM , D2Leg-JMM-2 ) ;
5210: LD_EXP 1
5214: PPUSH
5215: LD_STRING D2Leg-JMM-2
5217: PPUSH
5218: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
5222: LD_EXP 17
5226: PPUSH
5227: LD_STRING D2Leg-Pow-2
5229: PPUSH
5230: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
5234: LD_EXP 1
5238: PPUSH
5239: LD_STRING D2Leg-JMM-3
5241: PPUSH
5242: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
5246: LD_EXP 17
5250: PPUSH
5251: LD_STRING D2Leg-Pow-3
5253: PPUSH
5254: CALL_OW 88
// end ; 4 :
5258: GO 5426
5260: LD_INT 4
5262: DOUBLE
5263: EQUAL
5264: IFTRUE 5268
5266: GO 5343
5268: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
5269: LD_EXP 1
5273: PPUSH
5274: LD_STRING D2Ar-JMM-1
5276: PPUSH
5277: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
5281: LD_EXP 17
5285: PPUSH
5286: LD_STRING D2Ar-Pow-1
5288: PPUSH
5289: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
5293: LD_EXP 1
5297: PPUSH
5298: LD_STRING D2Ar-JMM-2
5300: PPUSH
5301: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
5305: LD_EXP 17
5309: PPUSH
5310: LD_STRING D2Ar-Pow-2
5312: PPUSH
5313: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
5317: LD_EXP 1
5321: PPUSH
5322: LD_STRING D2Ar-JMM-3
5324: PPUSH
5325: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
5329: LD_EXP 17
5333: PPUSH
5334: LD_STRING D2Ar-Pow-3
5336: PPUSH
5337: CALL_OW 88
// end ; 5 :
5341: GO 5426
5343: LD_INT 5
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5366
5351: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
5352: LD_EXP 1
5356: PPUSH
5357: LD_STRING D2Conf-JMM-1
5359: PPUSH
5360: CALL_OW 88
// end ; 6 :
5364: GO 5426
5366: LD_INT 6
5368: DOUBLE
5369: EQUAL
5370: IFTRUE 5374
5372: GO 5425
5374: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
5375: LD_EXP 1
5379: PPUSH
5380: LD_STRING D2Com-JMM-1
5382: PPUSH
5383: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
5387: LD_EXP 17
5391: PPUSH
5392: LD_STRING D2Com-Pow-1
5394: PPUSH
5395: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D2Com-JMM-2
5406: PPUSH
5407: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
5411: LD_EXP 17
5415: PPUSH
5416: LD_STRING D2Com-Pow-2
5418: PPUSH
5419: CALL_OW 88
// end ; end ;
5423: GO 5426
5425: POP
// end ;
5426: LD_VAR 0 3
5430: RET
