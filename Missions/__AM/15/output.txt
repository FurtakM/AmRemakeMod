// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Roth , Kurt ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus ; export KhatamStatus ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 24
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 25
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 26
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 27
  58: PUSH
  59: LD_STRING 14_KappaStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 28
  74: PUSH
  75: LD_STRING 10_KhatamStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// debugMode = 1 ;
  86: LD_ADDR_EXP 29
  90: PUSH
  91: LD_INT 1
  93: ST_TO_ADDR
// PrepareHeroes ;
  94: CALL 442 0 0
// PrepareRandoms ;
  98: CALL 964 0 0
// PrepareLegion ;
 102: CALL 1034 0 0
// PrepareRussians ;
 106: CALL 1294 0 0
// PrepareAlliance ;
 110: CALL 1598 0 0
// SetBName ( RuDep2 , zhukov ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_STRING zhukov
 119: PPUSH
 120: CALL_OW 500
// end ;
 124: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 125: LD_EXP 29
 129: PUSH
 130: LD_INT 1
 132: EQUAL
 133: IFFALSE 439
 135: GO 137
 137: DISABLE
 138: LD_INT 0
 140: PPUSH
// begin enable ;
 141: ENABLE
// fogoff ( true ) ;
 142: LD_INT 1
 144: PPUSH
 145: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 149: LD_ADDR_VAR 0 1
 153: PUSH
 154: LD_INT 22
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 21
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: FOR_IN
 184: IFFALSE 200
// SetLives ( i , 1000 ) ;
 186: LD_VAR 0 1
 190: PPUSH
 191: LD_INT 1000
 193: PPUSH
 194: CALL_OW 234
 198: GO 183
 200: POP
 201: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 202: LD_ADDR_VAR 0 1
 206: PUSH
 207: LD_INT 22
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 30
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: PUSH
 230: LD_INT 30
 232: PUSH
 233: LD_INT 1
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PPUSH
 249: CALL_OW 69
 253: PUSH
 254: FOR_IN
 255: IFFALSE 279
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 257: LD_VAR 0 1
 261: PPUSH
 262: CALL_OW 274
 266: PPUSH
 267: LD_INT 1
 269: PPUSH
 270: LD_INT 9999
 272: PPUSH
 273: CALL_OW 277
 277: GO 254
 279: POP
 280: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 281: LD_ADDR_VAR 0 1
 285: PUSH
 286: LD_INT 22
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 2
 298: PUSH
 299: LD_INT 30
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 30
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 358
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: CALL_OW 274
 345: PPUSH
 346: LD_INT 2
 348: PPUSH
 349: LD_INT 9999
 351: PPUSH
 352: CALL_OW 277
 356: GO 333
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// end ; end_of_file
 439: PPOPN 1
 441: END
// export function PrepareHeroes ; begin
 442: LD_INT 0
 444: PPUSH
// uc_side = 1 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// uc_nation = 1 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 1
 460: ST_TO_ADDR
// if JMMVeh = [ ] then
 461: LD_EXP 24
 465: PUSH
 466: EMPTY
 467: EQUAL
 468: IFFALSE 514
// begin vc_engine = 3 ;
 470: LD_ADDR_OWVAR 39
 474: PUSH
 475: LD_INT 3
 477: ST_TO_ADDR
// vc_control = 1 ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// vc_chassis = 5 ;
 486: LD_ADDR_OWVAR 37
 490: PUSH
 491: LD_INT 5
 493: ST_TO_ADDR
// vc_weapon = 9 ;
 494: LD_ADDR_OWVAR 40
 498: PUSH
 499: LD_INT 9
 501: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 502: LD_ADDR_EXP 19
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end else
 512: GO 596
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 514: LD_ADDR_OWVAR 37
 518: PUSH
 519: LD_EXP 24
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: PUSH
 528: LD_INT 1
 530: ARRAY
 531: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 532: LD_ADDR_OWVAR 39
 536: PUSH
 537: LD_EXP 24
 541: PUSH
 542: LD_INT 2
 544: ARRAY
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 550: LD_ADDR_OWVAR 38
 554: PUSH
 555: LD_EXP 24
 559: PUSH
 560: LD_INT 3
 562: ARRAY
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 568: LD_ADDR_OWVAR 40
 572: PUSH
 573: LD_EXP 24
 577: PUSH
 578: LD_INT 4
 580: ARRAY
 581: PUSH
 582: LD_INT 1
 584: ARRAY
 585: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 586: LD_ADDR_EXP 19
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 596: LD_EXP 25
 600: PUSH
 601: EMPTY
 602: EQUAL
 603: NOT
 604: IFFALSE 688
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 606: LD_ADDR_OWVAR 37
 610: PUSH
 611: LD_EXP 25
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 624: LD_ADDR_OWVAR 39
 628: PUSH
 629: LD_EXP 25
 633: PUSH
 634: LD_INT 2
 636: ARRAY
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 642: LD_ADDR_OWVAR 38
 646: PUSH
 647: LD_EXP 25
 651: PUSH
 652: LD_INT 3
 654: ARRAY
 655: PUSH
 656: LD_INT 1
 658: ARRAY
 659: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 660: LD_ADDR_OWVAR 40
 664: PUSH
 665: LD_EXP 25
 669: PUSH
 670: LD_INT 4
 672: ARRAY
 673: PUSH
 674: LD_INT 1
 676: ARRAY
 677: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 678: LD_ADDR_EXP 20
 682: PUSH
 683: CALL_OW 45
 687: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 688: LD_EXP 19
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 700: LD_EXP 20
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 712: LD_EXP 19
 716: PPUSH
 717: LD_INT 99
 719: PPUSH
 720: LD_INT 154
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 48
// if JMMGirlVeh then
 730: LD_EXP 25
 734: IFFALSE 754
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 736: LD_EXP 20
 740: PPUSH
 741: LD_INT 98
 743: PPUSH
 744: LD_INT 159
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 754: LD_ADDR_EXP 1
 758: PUSH
 759: LD_STRING 14_JMM
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 1964 0 2
 769: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 770: LD_EXP 1
 774: PPUSH
 775: LD_EXP 19
 779: PPUSH
 780: CALL_OW 52
// if not JMMGirlVeh = [ ] then
 784: LD_EXP 25
 788: PUSH
 789: EMPTY
 790: EQUAL
 791: NOT
 792: IFFALSE 914
// begin if JMMGirl = 1 then
 794: LD_EXP 26
 798: PUSH
 799: LD_INT 1
 801: EQUAL
 802: IFFALSE 834
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
 804: LD_ADDR_EXP 2
 808: PUSH
 809: LD_STRING 14_Joan
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: CALL 1964 0 2
 819: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
 820: LD_EXP 2
 824: PPUSH
 825: LD_EXP 20
 829: PPUSH
 830: CALL_OW 52
// end ; if JMMGirl = 2 then
 834: LD_EXP 26
 838: PUSH
 839: LD_INT 2
 841: EQUAL
 842: IFFALSE 874
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
 844: LD_ADDR_EXP 4
 848: PUSH
 849: LD_STRING 14_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 1964 0 2
 859: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
 860: LD_EXP 4
 864: PPUSH
 865: LD_EXP 20
 869: PPUSH
 870: CALL_OW 52
// end ; if JMMGirl = 3 then
 874: LD_EXP 26
 878: PUSH
 879: LD_INT 3
 881: EQUAL
 882: IFFALSE 914
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_STRING 14_Connie
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: CALL 1964 0 2
 899: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
 900: LD_EXP 16
 904: PPUSH
 905: LD_EXP 20
 909: PPUSH
 910: CALL_OW 52
// end ; end ; uc_side = 4 ;
 914: LD_ADDR_OWVAR 20
 918: PUSH
 919: LD_INT 4
 921: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 922: LD_ADDR_EXP 17
 926: PUSH
 927: LD_STRING Powell
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL 1964 0 2
 937: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
 938: LD_EXP 17
 942: PPUSH
 943: LD_INT 47
 945: PPUSH
 946: LD_INT 63
 948: PPUSH
 949: LD_INT 5
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: CALL_OW 50
// end ;
 959: LD_VAR 0 1
 963: RET
// export function PrepareRandoms ; var i ; begin
 964: LD_INT 0
 966: PPUSH
 967: PPUSH
// uc_side = 4 ;
 968: LD_ADDR_OWVAR 20
 972: PUSH
 973: LD_INT 4
 975: ST_TO_ADDR
// uc_nation = 1 ;
 976: LD_ADDR_OWVAR 21
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
 984: LD_ADDR_EXP 18
 988: PUSH
 989: LD_STRING 13s_others
 991: PPUSH
 992: CALL_OW 31
 996: ST_TO_ADDR
// for i in others13 do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_EXP 18
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1027
// PlaceUnitArea ( i , PowellBaseSpawn , false ) ;
1010: LD_VAR 0 2
1014: PPUSH
1015: LD_INT 6
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
1025: GO 1007
1027: POP
1028: POP
// end ; end_of_file
1029: LD_VAR 0 1
1033: RET
// export function PrepareLegion ; var i ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// uc_side = 8 ;
1038: LD_ADDR_OWVAR 20
1042: PUSH
1043: LD_INT 8
1045: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
1046: LD_ADDR_EXP 23
1050: PUSH
1051: LD_STRING Kurt
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL 1964 0 2
1061: ST_TO_ADDR
// PlaceHumanInUnit ( Kurt , ArDep1 ) ;
1062: LD_EXP 23
1066: PPUSH
1067: LD_INT 122
1069: PPUSH
1070: CALL_OW 52
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
1074: LD_INT 8
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 122
1082: PPUSH
1083: LD_INT 10
1085: PPUSH
1086: LD_INT 2
1088: PPUSH
1089: LD_INT 4
1091: PPUSH
1092: CALL 2292 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
1096: LD_INT 8
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 99
1104: PPUSH
1105: LD_INT 10
1107: PPUSH
1108: LD_INT 2
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL 2292 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
1118: LD_INT 8
1120: PPUSH
1121: LD_INT 2
1123: PPUSH
1124: LD_INT 104
1126: PPUSH
1127: LD_INT 10
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 2
1135: PPUSH
1136: CALL 2292 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
1140: LD_INT 8
1142: PPUSH
1143: LD_INT 2
1145: PPUSH
1146: LD_INT 104
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: LD_INT 8
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL 2292 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
1162: LD_INT 8
1164: PPUSH
1165: LD_INT 2
1167: PPUSH
1168: LD_INT 118
1170: PPUSH
1171: LD_INT 10
1173: PPUSH
1174: LD_INT 1
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 2292 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
1184: LD_INT 8
1186: PPUSH
1187: LD_INT 2
1189: PPUSH
1190: LD_INT 117
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: LD_INT 3
1198: PPUSH
1199: LD_INT 4
1201: PPUSH
1202: CALL 2292 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 8
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 3
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 30
1233: PUSH
1234: LD_INT 32
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 58
1243: PUSH
1244: EMPTY
1245: LIST
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: PPUSH
1253: CALL_OW 69
1257: PUSH
1258: FOR_IN
1259: IFFALSE 1287
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
1261: LD_INT 8
1263: PPUSH
1264: LD_INT 2
1266: PPUSH
1267: LD_VAR 0 2
1271: PPUSH
1272: LD_INT 10
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: CALL 2292 0 6
1285: GO 1258
1287: POP
1288: POP
// end ; end_of_file
1289: LD_VAR 0 1
1293: RET
// export function PrepareRussians ; var i ; begin
1294: LD_INT 0
1296: PPUSH
1297: PPUSH
// uc_side = 3 ;
1298: LD_ADDR_OWVAR 20
1302: PUSH
1303: LD_INT 3
1305: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_STRING Platonov
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL 1964 0 2
1321: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
1322: LD_EXP 21
1326: PPUSH
1327: LD_INT 23
1329: PPUSH
1330: CALL_OW 52
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 26
1342: PPUSH
1343: LD_INT 10
1345: PPUSH
1346: LD_INT 2
1348: PPUSH
1349: LD_INT 5
1351: PPUSH
1352: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
1356: LD_INT 3
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 26
1364: PPUSH
1365: LD_INT 10
1367: PPUSH
1368: LD_INT 2
1370: PPUSH
1371: LD_INT 6
1373: PPUSH
1374: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
1378: LD_INT 3
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 27
1386: PPUSH
1387: LD_INT 10
1389: PPUSH
1390: LD_INT 9
1392: PPUSH
1393: LD_INT 6
1395: PPUSH
1396: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
1400: LD_INT 3
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 27
1408: PPUSH
1409: LD_INT 10
1411: PPUSH
1412: LD_INT 3
1414: PPUSH
1415: LD_INT 3
1417: PPUSH
1418: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
1422: LD_INT 3
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 10
1433: PPUSH
1434: LD_INT 3
1436: PPUSH
1437: LD_INT 6
1439: PPUSH
1440: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
1444: LD_INT 3
1446: PPUSH
1447: LD_INT 3
1449: PPUSH
1450: LD_INT 10
1452: PPUSH
1453: LD_INT 10
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
1466: LD_INT 3
1468: PPUSH
1469: LD_INT 3
1471: PPUSH
1472: LD_INT 2
1474: PPUSH
1475: LD_INT 10
1477: PPUSH
1478: LD_INT 4
1480: PPUSH
1481: LD_INT 3
1483: PPUSH
1484: CALL 2292 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
1488: LD_INT 3
1490: PPUSH
1491: LD_INT 3
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: LD_INT 4
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: CALL 2292 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1510: LD_ADDR_VAR 0 2
1514: PUSH
1515: LD_INT 22
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 21
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 30
1537: PUSH
1538: LD_INT 32
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 58
1547: PUSH
1548: EMPTY
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: PPUSH
1557: CALL_OW 69
1561: PUSH
1562: FOR_IN
1563: IFFALSE 1591
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
1565: LD_INT 3
1567: PPUSH
1568: LD_INT 3
1570: PPUSH
1571: LD_VAR 0 2
1575: PPUSH
1576: LD_INT 10
1578: PPUSH
1579: LD_INT 1
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: CALL 2292 0 6
1589: GO 1562
1591: POP
1592: POP
// end ; end_of_file
1593: LD_VAR 0 1
1597: RET
// export function PrepareAlliance ; var i ; begin
1598: LD_INT 0
1600: PPUSH
1601: PPUSH
// uc_side = 7 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 7
1609: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
1610: LD_ADDR_EXP 22
1614: PUSH
1615: LD_STRING Roth
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL 1964 0 2
1625: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
1626: LD_EXP 22
1630: PPUSH
1631: LD_INT 249
1633: PPUSH
1634: LD_INT 187
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
1644: LD_EXP 22
1648: PPUSH
1649: LD_INT 248
1651: PPUSH
1652: LD_INT 187
1654: PPUSH
1655: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
1659: LD_INT 7
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: LD_INT 45
1667: PPUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 3
1676: PPUSH
1677: CALL 2292 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
1681: LD_INT 7
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 45
1689: PPUSH
1690: LD_INT 10
1692: PPUSH
1693: LD_INT 2
1695: PPUSH
1696: LD_INT 2
1698: PPUSH
1699: CALL 2292 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
1703: LD_INT 7
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 194
1711: PPUSH
1712: LD_INT 10
1714: PPUSH
1715: LD_INT 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL 2292 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
1725: LD_INT 7
1727: PPUSH
1728: LD_INT 3
1730: PPUSH
1731: LD_INT 194
1733: PPUSH
1734: LD_INT 10
1736: PPUSH
1737: LD_INT 8
1739: PPUSH
1740: LD_INT 6
1742: PPUSH
1743: CALL 2292 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
1747: LD_INT 7
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: LD_INT 156
1755: PPUSH
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 3
1761: PPUSH
1762: LD_INT 6
1764: PPUSH
1765: CALL 2292 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
1769: LD_INT 7
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: LD_INT 162
1777: PPUSH
1778: LD_INT 10
1780: PPUSH
1781: LD_INT 3
1783: PPUSH
1784: LD_INT 6
1786: PPUSH
1787: CALL 2292 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
1791: LD_INT 7
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: LD_INT 39
1799: PPUSH
1800: LD_INT 10
1802: PPUSH
1803: LD_INT 4
1805: PPUSH
1806: LD_INT 4
1808: PPUSH
1809: CALL 2292 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
1813: LD_INT 7
1815: PPUSH
1816: LD_INT 3
1818: PPUSH
1819: LD_INT 133
1821: PPUSH
1822: LD_INT 10
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: LD_INT 4
1830: PPUSH
1831: CALL 2292 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
1835: LD_INT 7
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 46
1843: PPUSH
1844: LD_INT 10
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 2
1852: PPUSH
1853: CALL 2292 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_INT 22
1864: PUSH
1865: LD_INT 7
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 21
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 30
1884: PUSH
1885: LD_INT 32
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 58
1894: PUSH
1895: EMPTY
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PPUSH
1904: CALL_OW 69
1908: PUSH
1909: FOR_IN
1910: IFFALSE 1957
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
1912: LD_INT 7
1914: PPUSH
1915: LD_INT 1
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 1
1927: PPUSH
1928: LD_INT 2
1930: PPUSH
1931: CALL_OW 12
1935: ARRAY
1936: PPUSH
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_INT 10
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL 2292 0 6
1955: GO 1909
1957: POP
1958: POP
// end ; end_of_file
1959: LD_VAR 0 1
1963: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1964: LD_INT 0
1966: PPUSH
1967: PPUSH
// if exist_mode then
1968: LD_VAR 0 2
1972: IFFALSE 1991
// unit := CreateCharacter ( ident ) else
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_VAR 0 1
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
1989: GO 2006
// unit := NewCharacter ( ident ) ;
1991: LD_ADDR_VAR 0 4
1995: PUSH
1996: LD_VAR 0 1
2000: PPUSH
2001: CALL_OW 25
2005: ST_TO_ADDR
// result := unit ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_VAR 0 4
2015: ST_TO_ADDR
// end ;
2016: LD_VAR 0 3
2020: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2021: LD_INT 0
2023: PPUSH
2024: PPUSH
2025: PPUSH
// characters := characters diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell , Connie ] ;
2026: LD_ADDR_VAR 0 1
2030: PUSH
2031: LD_VAR 0 1
2035: PUSH
2036: LD_EXP 1
2040: PUSH
2041: LD_EXP 2
2045: PUSH
2046: LD_EXP 3
2050: PUSH
2051: LD_EXP 4
2055: PUSH
2056: LD_EXP 5
2060: PUSH
2061: LD_EXP 6
2065: PUSH
2066: LD_EXP 7
2070: PUSH
2071: LD_EXP 8
2075: PUSH
2076: LD_EXP 9
2080: PUSH
2081: LD_EXP 10
2085: PUSH
2086: LD_EXP 11
2090: PUSH
2091: LD_EXP 12
2095: PUSH
2096: LD_EXP 13
2100: PUSH
2101: LD_EXP 14
2105: PUSH
2106: LD_EXP 15
2110: PUSH
2111: LD_EXP 17
2115: PUSH
2116: LD_EXP 16
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: DIFF
2140: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
2141: LD_ADDR_VAR 0 6
2145: PUSH
2146: LD_INT 1
2148: PPUSH
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL_OW 12
2158: ST_TO_ADDR
// for i = 1 to characters do
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2285
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2177: LD_VAR 0 5
2181: PUSH
2182: LD_VAR 0 6
2186: EQUAL
2187: PUSH
2188: LD_VAR 0 1
2192: PUSH
2193: LD_VAR 0 5
2197: ARRAY
2198: PPUSH
2199: CALL_OW 258
2203: PUSH
2204: LD_INT 1
2206: EQUAL
2207: AND
2208: IFFALSE 2230
// Say ( characters [ i ] , dialogMID ) ;
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 5
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2230: LD_VAR 0 5
2234: PUSH
2235: LD_VAR 0 6
2239: EQUAL
2240: PUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_VAR 0 5
2250: ARRAY
2251: PPUSH
2252: CALL_OW 258
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: AND
2261: IFFALSE 2283
// Say ( characters [ i ] , dialogFID ) ;
2263: LD_VAR 0 1
2267: PUSH
2268: LD_VAR 0 5
2272: ARRAY
2273: PPUSH
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 88
// end ;
2283: GO 2174
2285: POP
2286: POP
// end ;
2287: LD_VAR 0 4
2291: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
2298: PPUSH
// for i = 1 to count do
2299: LD_ADDR_VAR 0 8
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_VAR 0 6
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2396
// begin uc_side = side ;
2317: LD_ADDR_OWVAR 20
2321: PUSH
2322: LD_VAR 0 1
2326: ST_TO_ADDR
// uc_nation = nation ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_VAR 0 2
2336: ST_TO_ADDR
// hc_gallery =  ;
2337: LD_ADDR_OWVAR 33
2341: PUSH
2342: LD_STRING 
2344: ST_TO_ADDR
// hc_name =  ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
2353: LD_INT 0
2355: PPUSH
2356: LD_VAR 0 5
2360: PPUSH
2361: LD_VAR 0 4
2365: PPUSH
2366: CALL_OW 380
// un = CreateHuman ;
2370: LD_ADDR_VAR 0 10
2374: PUSH
2375: CALL_OW 44
2379: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
2380: LD_VAR 0 10
2384: PPUSH
2385: LD_VAR 0 3
2389: PPUSH
2390: CALL_OW 52
// end ;
2394: GO 2314
2396: POP
2397: POP
// end ;
2398: LD_VAR 0 7
2402: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
2403: LD_INT 0
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
2416: LD_INT 2100
2418: PUSH
2419: LD_INT 3150
2421: PUSH
2422: LD_INT 4200
2424: PUSH
2425: LD_INT 5250
2427: PUSH
2428: LD_INT 6300
2430: PUSH
2431: LD_INT 7350
2433: PUSH
2434: LD_INT 8400
2436: PUSH
2437: LD_INT 9450
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: PUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: CALL_OW 12
2460: ARRAY
2461: PPUSH
2462: CALL_OW 67
// amChassisTab = [ ] ;
2466: LD_ADDR_VAR 0 19
2470: PUSH
2471: EMPTY
2472: ST_TO_ADDR
// arChassisTab = [ ] ;
2473: LD_ADDR_VAR 0 18
2477: PUSH
2478: EMPTY
2479: ST_TO_ADDR
// ruChassisTab = [ ] ;
2480: LD_ADDR_VAR 0 17
2484: PUSH
2485: EMPTY
2486: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
2487: LD_INT 35
2489: PPUSH
2490: CALL_OW 67
// if nation = 1 then
2494: LD_VAR 0 5
2498: PUSH
2499: LD_INT 1
2501: EQUAL
2502: IFFALSE 2993
// begin uc_side = side ;
2504: LD_ADDR_OWVAR 20
2508: PUSH
2509: LD_VAR 0 2
2513: ST_TO_ADDR
// uc_nation = nation ;
2514: LD_ADDR_OWVAR 21
2518: PUSH
2519: LD_VAR 0 5
2523: ST_TO_ADDR
// vc_engine = vehengine ;
2524: LD_ADDR_OWVAR 39
2528: PUSH
2529: LD_VAR 0 6
2533: ST_TO_ADDR
// vc_control = vehcontrol ;
2534: LD_ADDR_OWVAR 38
2538: PUSH
2539: LD_VAR 0 7
2543: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
2544: LD_ADDR_OWVAR 40
2548: PUSH
2549: LD_VAR 0 10
2553: PUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_VAR 0 10
2561: PPUSH
2562: CALL_OW 12
2566: ARRAY
2567: ST_TO_ADDR
// for j = 1 to AMWeapon do
2568: LD_ADDR_VAR 0 14
2572: PUSH
2573: DOUBLE
2574: LD_INT 1
2576: DEC
2577: ST_TO_ADDR
2578: LD_VAR 0 10
2582: PUSH
2583: FOR_TO
2584: IFFALSE 2885
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
2586: LD_VAR 0 10
2590: PUSH
2591: LD_VAR 0 14
2595: ARRAY
2596: PUSH
2597: LD_INT 2
2599: EQUAL
2600: PUSH
2601: LD_VAR 0 10
2605: PUSH
2606: LD_VAR 0 14
2610: ARRAY
2611: PUSH
2612: LD_INT 3
2614: EQUAL
2615: OR
2616: IFFALSE 2669
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
2618: LD_ADDR_VAR 0 19
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 2
2628: PUSH
2629: LD_INT 3
2631: PUSH
2632: LD_INT 4
2634: PUSH
2635: LD_INT 5
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2645: LD_ADDR_OWVAR 37
2649: PUSH
2650: LD_VAR 0 19
2654: PUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_VAR 0 19
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
2669: LD_VAR 0 10
2673: PUSH
2674: LD_VAR 0 14
2678: ARRAY
2679: PUSH
2680: LD_INT 4
2682: EQUAL
2683: PUSH
2684: LD_VAR 0 10
2688: PUSH
2689: LD_VAR 0 14
2693: ARRAY
2694: PUSH
2695: LD_INT 5
2697: EQUAL
2698: OR
2699: PUSH
2700: LD_VAR 0 10
2704: PUSH
2705: LD_VAR 0 14
2709: ARRAY
2710: PUSH
2711: LD_INT 9
2713: EQUAL
2714: OR
2715: PUSH
2716: LD_VAR 0 10
2720: PUSH
2721: LD_VAR 0 14
2725: ARRAY
2726: PUSH
2727: LD_INT 11
2729: EQUAL
2730: OR
2731: PUSH
2732: LD_VAR 0 10
2736: PUSH
2737: LD_VAR 0 14
2741: ARRAY
2742: PUSH
2743: LD_INT 7
2745: EQUAL
2746: OR
2747: IFFALSE 2796
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
2749: LD_ADDR_VAR 0 19
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: LD_INT 5
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2772: LD_ADDR_OWVAR 37
2776: PUSH
2777: LD_VAR 0 19
2781: PUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_VAR 0 19
2789: PPUSH
2790: CALL_OW 12
2794: ARRAY
2795: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
2796: LD_VAR 0 10
2800: PUSH
2801: LD_VAR 0 14
2805: ARRAY
2806: PUSH
2807: LD_INT 8
2809: EQUAL
2810: PUSH
2811: LD_VAR 0 10
2815: PUSH
2816: LD_VAR 0 14
2820: ARRAY
2821: PUSH
2822: LD_INT 6
2824: EQUAL
2825: OR
2826: PUSH
2827: LD_VAR 0 10
2831: PUSH
2832: LD_VAR 0 14
2836: ARRAY
2837: PUSH
2838: LD_INT 10
2840: EQUAL
2841: OR
2842: IFFALSE 2883
// begin amChassisTab = [ 4 , 5 ] ;
2844: LD_ADDR_VAR 0 19
2848: PUSH
2849: LD_INT 4
2851: PUSH
2852: LD_INT 5
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
2859: LD_ADDR_OWVAR 37
2863: PUSH
2864: LD_VAR 0 19
2868: PUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_VAR 0 19
2876: PPUSH
2877: CALL_OW 12
2881: ARRAY
2882: ST_TO_ADDR
// end ; end ;
2883: GO 2583
2885: POP
2886: POP
// veh = CreateVehicle ;
2887: LD_ADDR_VAR 0 16
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2897: LD_VAR 0 16
2901: PPUSH
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// if vc_control = 1 then
2914: LD_OWVAR 38
2918: PUSH
2919: LD_INT 1
2921: EQUAL
2922: IFFALSE 2979
// begin hc_gallery =  ;
2924: LD_ADDR_OWVAR 33
2928: PUSH
2929: LD_STRING 
2931: ST_TO_ADDR
// hc_name =  ;
2932: LD_ADDR_OWVAR 26
2936: PUSH
2937: LD_STRING 
2939: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
2940: LD_INT 0
2942: PPUSH
2943: LD_INT 3
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: CALL_OW 380
// un = CreateHuman ;
2955: LD_ADDR_VAR 0 15
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2965: LD_VAR 0 15
2969: PPUSH
2970: LD_VAR 0 16
2974: PPUSH
2975: CALL_OW 52
// end ; i = i + 1 ;
2979: LD_ADDR_VAR 0 13
2983: PUSH
2984: LD_VAR 0 13
2988: PUSH
2989: LD_INT 1
2991: PLUS
2992: ST_TO_ADDR
// end ; if nation = 2 then
2993: LD_VAR 0 5
2997: PUSH
2998: LD_INT 2
3000: EQUAL
3001: IFFALSE 3425
// begin uc_side = side ;
3003: LD_ADDR_OWVAR 20
3007: PUSH
3008: LD_VAR 0 2
3012: ST_TO_ADDR
// uc_nation = nation ;
3013: LD_ADDR_OWVAR 21
3017: PUSH
3018: LD_VAR 0 5
3022: ST_TO_ADDR
// vc_engine = vehengine ;
3023: LD_ADDR_OWVAR 39
3027: PUSH
3028: LD_VAR 0 6
3032: ST_TO_ADDR
// vc_control = vehcontrol ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_VAR 0 7
3042: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
3043: LD_ADDR_OWVAR 40
3047: PUSH
3048: LD_VAR 0 9
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_VAR 0 9
3060: PPUSH
3061: CALL_OW 12
3065: ARRAY
3066: ST_TO_ADDR
// for j = 1 to ARWeapons do
3067: LD_ADDR_VAR 0 14
3071: PUSH
3072: DOUBLE
3073: LD_INT 1
3075: DEC
3076: ST_TO_ADDR
3077: LD_VAR 0 9
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3317
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
3085: LD_VAR 0 9
3089: PUSH
3090: LD_VAR 0 14
3094: ARRAY
3095: PUSH
3096: LD_INT 24
3098: EQUAL
3099: PUSH
3100: LD_VAR 0 9
3104: PUSH
3105: LD_VAR 0 14
3109: ARRAY
3110: PUSH
3111: LD_INT 22
3113: EQUAL
3114: OR
3115: PUSH
3116: LD_VAR 0 9
3120: PUSH
3121: LD_VAR 0 14
3125: ARRAY
3126: PUSH
3127: LD_INT 23
3129: EQUAL
3130: OR
3131: PUSH
3132: LD_VAR 0 9
3136: PUSH
3137: LD_VAR 0 14
3141: ARRAY
3142: PUSH
3143: LD_INT 30
3145: EQUAL
3146: OR
3147: IFFALSE 3196
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
3149: LD_ADDR_VAR 0 18
3153: PUSH
3154: LD_INT 11
3156: PUSH
3157: LD_INT 12
3159: PUSH
3160: LD_INT 13
3162: PUSH
3163: LD_INT 14
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
3172: LD_ADDR_OWVAR 37
3176: PUSH
3177: LD_VAR 0 18
3181: PUSH
3182: LD_INT 1
3184: PPUSH
3185: LD_VAR 0 18
3189: PPUSH
3190: CALL_OW 12
3194: ARRAY
3195: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
3196: LD_VAR 0 9
3200: PUSH
3201: LD_VAR 0 14
3205: ARRAY
3206: PUSH
3207: LD_INT 29
3209: EQUAL
3210: PUSH
3211: LD_VAR 0 9
3215: PUSH
3216: LD_VAR 0 14
3220: ARRAY
3221: PUSH
3222: LD_INT 28
3224: EQUAL
3225: OR
3226: PUSH
3227: LD_VAR 0 9
3231: PUSH
3232: LD_VAR 0 14
3236: ARRAY
3237: PUSH
3238: LD_INT 27
3240: EQUAL
3241: OR
3242: PUSH
3243: LD_VAR 0 9
3247: PUSH
3248: LD_VAR 0 14
3252: ARRAY
3253: PUSH
3254: LD_INT 26
3256: EQUAL
3257: OR
3258: PUSH
3259: LD_VAR 0 9
3263: PUSH
3264: LD_VAR 0 14
3268: ARRAY
3269: PUSH
3270: LD_INT 25
3272: EQUAL
3273: OR
3274: IFFALSE 3315
// begin arChassisTab = [ 13 , 14 ] ;
3276: LD_ADDR_VAR 0 18
3280: PUSH
3281: LD_INT 13
3283: PUSH
3284: LD_INT 14
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
3291: LD_ADDR_OWVAR 37
3295: PUSH
3296: LD_VAR 0 18
3300: PUSH
3301: LD_INT 1
3303: PPUSH
3304: LD_VAR 0 18
3308: PPUSH
3309: CALL_OW 12
3313: ARRAY
3314: ST_TO_ADDR
// end ; end ;
3315: GO 3082
3317: POP
3318: POP
// veh = CreateVehicle ;
3319: LD_ADDR_VAR 0 16
3323: PUSH
3324: CALL_OW 45
3328: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3329: LD_VAR 0 16
3333: PPUSH
3334: LD_VAR 0 1
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: CALL_OW 49
// if vc_control = 1 then
3346: LD_OWVAR 38
3350: PUSH
3351: LD_INT 1
3353: EQUAL
3354: IFFALSE 3411
// begin hc_gallery =  ;
3356: LD_ADDR_OWVAR 33
3360: PUSH
3361: LD_STRING 
3363: ST_TO_ADDR
// hc_name =  ;
3364: LD_ADDR_OWVAR 26
3368: PUSH
3369: LD_STRING 
3371: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
3372: LD_INT 0
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_VAR 0 4
3382: PPUSH
3383: CALL_OW 380
// un = CreateHuman ;
3387: LD_ADDR_VAR 0 15
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3397: LD_VAR 0 15
3401: PPUSH
3402: LD_VAR 0 16
3406: PPUSH
3407: CALL_OW 52
// end ; i = i + 1 ;
3411: LD_ADDR_VAR 0 13
3415: PUSH
3416: LD_VAR 0 13
3420: PUSH
3421: LD_INT 1
3423: PLUS
3424: ST_TO_ADDR
// end ; if nation = 3 then
3425: LD_VAR 0 5
3429: PUSH
3430: LD_INT 3
3432: EQUAL
3433: IFFALSE 3825
// begin uc_side = side ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_VAR 0 2
3444: ST_TO_ADDR
// uc_nation = nation ;
3445: LD_ADDR_OWVAR 21
3449: PUSH
3450: LD_VAR 0 5
3454: ST_TO_ADDR
// vc_engine = vehengine ;
3455: LD_ADDR_OWVAR 39
3459: PUSH
3460: LD_VAR 0 6
3464: ST_TO_ADDR
// vc_control = vehcontrol ;
3465: LD_ADDR_OWVAR 38
3469: PUSH
3470: LD_VAR 0 7
3474: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
3475: LD_ADDR_OWVAR 40
3479: PUSH
3480: LD_VAR 0 8
3484: PUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_VAR 0 8
3492: PPUSH
3493: CALL_OW 12
3497: ARRAY
3498: ST_TO_ADDR
// for j = 1 to RuWeapons do
3499: LD_ADDR_VAR 0 14
3503: PUSH
3504: DOUBLE
3505: LD_INT 1
3507: DEC
3508: ST_TO_ADDR
3509: LD_VAR 0 8
3513: PUSH
3514: FOR_TO
3515: IFFALSE 3717
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
3517: LD_VAR 0 8
3521: PUSH
3522: LD_VAR 0 14
3526: ARRAY
3527: PUSH
3528: LD_INT 42
3530: EQUAL
3531: PUSH
3532: LD_VAR 0 8
3536: PUSH
3537: LD_VAR 0 14
3541: ARRAY
3542: PUSH
3543: LD_INT 43
3545: EQUAL
3546: OR
3547: PUSH
3548: LD_VAR 0 8
3552: PUSH
3553: LD_VAR 0 14
3557: ARRAY
3558: PUSH
3559: LD_INT 44
3561: EQUAL
3562: OR
3563: PUSH
3564: LD_VAR 0 8
3568: PUSH
3569: LD_VAR 0 14
3573: ARRAY
3574: PUSH
3575: LD_INT 45
3577: EQUAL
3578: OR
3579: PUSH
3580: LD_VAR 0 8
3584: PUSH
3585: LD_VAR 0 14
3589: ARRAY
3590: PUSH
3591: LD_INT 49
3593: EQUAL
3594: OR
3595: IFFALSE 3644
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
3597: LD_ADDR_VAR 0 17
3601: PUSH
3602: LD_INT 21
3604: PUSH
3605: LD_INT 22
3607: PUSH
3608: LD_INT 23
3610: PUSH
3611: LD_INT 24
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
3620: LD_ADDR_OWVAR 37
3624: PUSH
3625: LD_VAR 0 17
3629: PUSH
3630: LD_INT 1
3632: PPUSH
3633: LD_VAR 0 17
3637: PPUSH
3638: CALL_OW 12
3642: ARRAY
3643: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
3644: LD_VAR 0 8
3648: PUSH
3649: LD_VAR 0 14
3653: ARRAY
3654: PUSH
3655: LD_INT 46
3657: EQUAL
3658: PUSH
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 14
3668: ARRAY
3669: PUSH
3670: LD_INT 47
3672: EQUAL
3673: OR
3674: IFFALSE 3715
// begin ruChassisTab = [ 23 , 24 ] ;
3676: LD_ADDR_VAR 0 17
3680: PUSH
3681: LD_INT 23
3683: PUSH
3684: LD_INT 24
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
3691: LD_ADDR_OWVAR 37
3695: PUSH
3696: LD_VAR 0 17
3700: PUSH
3701: LD_INT 1
3703: PPUSH
3704: LD_VAR 0 17
3708: PPUSH
3709: CALL_OW 12
3713: ARRAY
3714: ST_TO_ADDR
// end ; end ;
3715: GO 3514
3717: POP
3718: POP
// veh = CreateVehicle ;
3719: LD_ADDR_VAR 0 16
3723: PUSH
3724: CALL_OW 45
3728: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3729: LD_VAR 0 16
3733: PPUSH
3734: LD_VAR 0 1
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL_OW 49
// if vc_control = 1 then
3746: LD_OWVAR 38
3750: PUSH
3751: LD_INT 1
3753: EQUAL
3754: IFFALSE 3811
// begin hc_gallery =  ;
3756: LD_ADDR_OWVAR 33
3760: PUSH
3761: LD_STRING 
3763: ST_TO_ADDR
// hc_name =  ;
3764: LD_ADDR_OWVAR 26
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 3
3777: PPUSH
3778: LD_VAR 0 4
3782: PPUSH
3783: CALL_OW 380
// un = CreateHuman ;
3787: LD_ADDR_VAR 0 15
3791: PUSH
3792: CALL_OW 44
3796: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3797: LD_VAR 0 15
3801: PPUSH
3802: LD_VAR 0 16
3806: PPUSH
3807: CALL_OW 52
// end ; i = i + 1 ;
3811: LD_ADDR_VAR 0 13
3815: PUSH
3816: LD_VAR 0 13
3820: PUSH
3821: LD_INT 1
3823: PLUS
3824: ST_TO_ADDR
// end ; until i = vehCount ;
3825: LD_VAR 0 13
3829: PUSH
3830: LD_VAR 0 3
3834: EQUAL
3835: IFFALSE 2487
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
3844: LD_ADDR_VAR 0 20
3848: PUSH
3849: LD_INT 22
3851: PUSH
3852: LD_VAR 0 2
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 24
3873: PUSH
3874: LD_INT 661
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// if vehicleOK_list > 0 then
3891: LD_VAR 0 20
3895: PUSH
3896: LD_INT 0
3898: GREATER
3899: IFFALSE 4090
// begin for i in vehicleOK_list do
3901: LD_ADDR_VAR 0 13
3905: PUSH
3906: LD_VAR 0 20
3910: PUSH
3911: FOR_IN
3912: IFFALSE 4088
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
3914: LD_ADDR_VAR 0 21
3918: PUSH
3919: LD_INT 22
3921: PUSH
3922: LD_VAR 0 11
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PPUSH
3931: CALL_OW 69
3935: PPUSH
3936: LD_VAR 0 13
3940: PPUSH
3941: CALL_OW 74
3945: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3946: LD_ADDR_VAR 0 22
3950: PUSH
3951: LD_INT 22
3953: PUSH
3954: LD_VAR 0 11
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 59
3968: PUSH
3969: EMPTY
3970: LIST
3971: PUSH
3972: LD_INT 21
3974: PUSH
3975: LD_INT 1
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 21
3984: PUSH
3985: LD_INT 2
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: PPUSH
4010: LD_VAR 0 13
4014: PPUSH
4015: CALL_OW 74
4019: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4020: LD_VAR 0 13
4024: PPUSH
4025: LD_VAR 0 21
4029: PPUSH
4030: CALL_OW 296
4034: PUSH
4035: LD_INT 8
4037: PLUS
4038: PUSH
4039: LD_VAR 0 13
4043: PPUSH
4044: LD_VAR 0 22
4048: PPUSH
4049: CALL_OW 296
4053: LESS
4054: IFFALSE 4072
// begin ComAttackUnit ( i , target1 ) ;
4056: LD_VAR 0 13
4060: PPUSH
4061: LD_VAR 0 21
4065: PPUSH
4066: CALL_OW 115
// end else
4070: GO 4086
// begin ComAttackUnit ( i , target2 ) ;
4072: LD_VAR 0 13
4076: PPUSH
4077: LD_VAR 0 22
4081: PPUSH
4082: CALL_OW 115
// end ; end ;
4086: GO 3911
4088: POP
4089: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
4090: LD_INT 22
4092: PUSH
4093: LD_VAR 0 2
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 21
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 24
4114: PUSH
4115: LD_INT 250
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 59
4124: PUSH
4125: EMPTY
4126: LIST
4127: PUSH
4128: LD_INT 3
4130: PUSH
4131: LD_INT 31
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PPUSH
4145: CALL_OW 69
4149: PUSH
4150: LD_INT 0
4152: EQUAL
4153: IFFALSE 3837
// end ; end_of_file end_of_file end_of_file end_of_file
4155: LD_VAR 0 12
4159: RET
// every 3 3$0 do
4160: GO 4162
4162: DISABLE
// begin enable ;
4163: ENABLE
// RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
4164: LD_INT 2
4166: PPUSH
4167: LD_INT 6
4169: PPUSH
4170: LD_INT 2
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: CALL_OW 12
4180: PPUSH
4181: LD_INT 10
4183: PPUSH
4184: LD_INT 3
4186: PPUSH
4187: LD_INT 3
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 42
4195: PUSH
4196: LD_INT 43
4198: PUSH
4199: LD_INT 44
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: PPUSH
4207: EMPTY
4208: PPUSH
4209: EMPTY
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: CALL 2403 0 11
// end ; end_of_file
4218: END
// every 1 do var dec1 , options ;
4219: GO 4221
4221: DISABLE
4222: LD_INT 0
4224: PPUSH
4225: PPUSH
// begin InGameOn ;
4226: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
4230: LD_EXP 19
4234: PUSH
4235: LD_EXP 20
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: LD_INT 48
4246: PPUSH
4247: LD_INT 68
4249: PPUSH
4250: CALL_OW 111
// if KappaStatus = 0 then
4254: LD_EXP 27
4258: PUSH
4259: LD_INT 0
4261: EQUAL
4262: IFFALSE 4308
// begin CenterNowOnUnits ( NewJMMVeh ) ;
4264: LD_EXP 19
4268: PPUSH
4269: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
4273: LD_EXP 1
4277: PPUSH
4278: LD_STRING D1T-JMM-1
4280: PPUSH
4281: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4285: LD_EXP 19
4289: PPUSH
4290: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
4294: LD_EXP 17
4298: PPUSH
4299: LD_STRING D1nT-JMM-1
4301: PPUSH
4302: CALL_OW 88
// end else
4306: GO 4593
// begin CenterNowOnUnits ( NewJMMVeh ) ;
4308: LD_EXP 19
4312: PPUSH
4313: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
4317: LD_EXP 1
4321: PPUSH
4322: LD_STRING D1T-JMM-1
4324: PPUSH
4325: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4329: LD_EXP 19
4333: PPUSH
4334: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
4338: LD_EXP 17
4342: PPUSH
4343: LD_STRING D1T-Pow-1
4345: PPUSH
4346: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4350: LD_EXP 19
4354: PPUSH
4355: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
4359: LD_EXP 1
4363: PPUSH
4364: LD_STRING D1T-JMM-2
4366: PPUSH
4367: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4371: LD_EXP 19
4375: PPUSH
4376: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_STRING D1T-Pow-2
4387: PPUSH
4388: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4392: LD_EXP 19
4396: PPUSH
4397: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
4401: LD_EXP 1
4405: PPUSH
4406: LD_STRING D1T-JMM-3
4408: PPUSH
4409: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4413: LD_EXP 19
4417: PPUSH
4418: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
4422: LD_EXP 17
4426: PPUSH
4427: LD_STRING D1T-Pow-3
4429: PPUSH
4430: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4434: LD_EXP 19
4438: PPUSH
4439: CALL_OW 87
// if not JMMGirlVeh = [ ] then
4443: LD_EXP 25
4447: PUSH
4448: EMPTY
4449: EQUAL
4450: NOT
4451: IFFALSE 4551
// begin if JMMGirl = 1 then
4453: LD_EXP 26
4457: PUSH
4458: LD_INT 1
4460: EQUAL
4461: IFFALSE 4475
// Say ( Joan , D1T-Joan-3 ) ;
4463: LD_EXP 2
4467: PPUSH
4468: LD_STRING D1T-Joan-3
4470: PPUSH
4471: CALL_OW 88
// if JMMGirl = 2 then
4475: LD_EXP 26
4479: PUSH
4480: LD_INT 2
4482: EQUAL
4483: IFFALSE 4497
// Say ( Lisa , D1T-Lisa-3 ) ;
4485: LD_EXP 4
4489: PPUSH
4490: LD_STRING D1T-Lisa-3
4492: PPUSH
4493: CALL_OW 88
// if JMMGirl = 3 then
4497: LD_EXP 26
4501: PUSH
4502: LD_INT 3
4504: EQUAL
4505: IFFALSE 4519
// Say ( Connie , D1T-Con-3 ) ;
4507: LD_EXP 16
4511: PPUSH
4512: LD_STRING D1T-Con-3
4514: PPUSH
4515: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4519: LD_EXP 19
4523: PPUSH
4524: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
4528: LD_EXP 17
4532: PPUSH
4533: LD_STRING D1T-Pow-4
4535: PPUSH
4536: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4540: LD_EXP 19
4544: PPUSH
4545: CALL_OW 87
// end else
4549: GO 4593
// begin Say ( JMM , D1T-JMM-4 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D1T-JMM-4
4558: PPUSH
4559: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4563: LD_EXP 19
4567: PPUSH
4568: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
4572: LD_EXP 17
4576: PPUSH
4577: LD_STRING D1T-Pow-5
4579: PPUSH
4580: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
4584: LD_EXP 19
4588: PPUSH
4589: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
4593: LD_INT 35
4595: PPUSH
4596: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 48 , 68 ) ;
4600: LD_EXP 19
4604: PUSH
4605: LD_EXP 20
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: LD_INT 48
4616: PPUSH
4617: LD_INT 68
4619: PPUSH
4620: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
4624: LD_EXP 19
4628: PPUSH
4629: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 15 ;
4633: LD_EXP 19
4637: PPUSH
4638: LD_EXP 17
4642: PPUSH
4643: CALL_OW 296
4647: PUSH
4648: LD_INT 15
4650: LESS
4651: IFFALSE 4593
// ComExitVehicle ( JMM ) ;
4653: LD_EXP 1
4657: PPUSH
4658: CALL_OW 121
// wait ( 0 0$1 ) ;
4662: LD_INT 35
4664: PPUSH
4665: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4669: LD_INT 35
4671: PPUSH
4672: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
4676: LD_EXP 1
4680: PPUSH
4681: LD_EXP 17
4685: PPUSH
4686: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
4690: LD_EXP 1
4694: PPUSH
4695: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
4699: LD_EXP 1
4703: PPUSH
4704: LD_EXP 17
4708: PPUSH
4709: CALL_OW 296
4713: PUSH
4714: LD_INT 6
4716: LESS
4717: IFFALSE 4669
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
4719: LD_EXP 1
4723: PUSH
4724: LD_EXP 17
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
4737: LD_EXP 1
4741: PPUSH
4742: LD_EXP 17
4746: PPUSH
4747: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
4751: LD_EXP 17
4755: PPUSH
4756: LD_EXP 1
4760: PPUSH
4761: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
4765: LD_EXP 1
4769: PPUSH
4770: LD_STRING D1-JMM-1
4772: PPUSH
4773: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
4777: LD_EXP 17
4781: PPUSH
4782: LD_STRING D1-Pow-1
4784: PPUSH
4785: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 3
4794: PPUSH
4795: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
4799: LD_INT 1
4801: PPUSH
4802: LD_INT 4
4804: PPUSH
4805: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
4809: LD_INT 1
4811: PPUSH
4812: LD_INT 5
4814: PPUSH
4815: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
4819: LD_INT 171
4821: PPUSH
4822: LD_INT 81
4824: PPUSH
4825: CALL_OW 84
// wait ( 0 0$4 ) ;
4829: LD_INT 140
4831: PPUSH
4832: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
4836: LD_INT 162
4838: PPUSH
4839: LD_INT 36
4841: PPUSH
4842: CALL_OW 84
// wait ( 0 0$4 ) ;
4846: LD_INT 140
4848: PPUSH
4849: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
4853: LD_INT 75
4855: PPUSH
4856: LD_INT 16
4858: PPUSH
4859: CALL_OW 84
// wait ( 0 0$4 ) ;
4863: LD_INT 140
4865: PPUSH
4866: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
4870: LD_EXP 17
4874: PUSH
4875: LD_EXP 1
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PPUSH
4884: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
4888: LD_EXP 1
4892: PPUSH
4893: LD_STRING D1-JMM-2
4895: PPUSH
4896: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
4900: LD_EXP 17
4904: PPUSH
4905: LD_STRING D1-Pow-2
4907: PPUSH
4908: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
4912: LD_EXP 1
4916: PPUSH
4917: LD_STRING D1-JMM-3
4919: PPUSH
4920: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
4924: LD_EXP 17
4928: PPUSH
4929: LD_STRING D1-Pow-3
4931: PPUSH
4932: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
4936: LD_EXP 1
4940: PPUSH
4941: LD_STRING D1-JMM-4
4943: PPUSH
4944: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
4948: LD_EXP 17
4952: PPUSH
4953: LD_STRING D1-Pow-4
4955: PPUSH
4956: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
4960: LD_EXP 1
4964: PPUSH
4965: LD_STRING D1-JMM-5
4967: PPUSH
4968: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
4972: LD_EXP 17
4976: PPUSH
4977: LD_STRING D1-Pow-5
4979: PPUSH
4980: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
4984: LD_ADDR_VAR 0 2
4988: PUSH
4989: LD_INT 1
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 4
5000: PUSH
5001: LD_INT 5
5003: PUSH
5004: LD_INT 6
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_STRING Q1
5022: PPUSH
5023: LD_VAR 0 2
5027: PPUSH
5028: CALL_OW 98
5032: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
5033: LD_ADDR_VAR 0 1
5037: PUSH
5038: LD_STRING Q1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: CALL_OW 98
5050: ST_TO_ADDR
// options = options diff dec1 ;
5051: LD_ADDR_VAR 0 2
5055: PUSH
5056: LD_VAR 0 2
5060: PUSH
5061: LD_VAR 0 1
5065: DIFF
5066: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 2
5076: PPUSH
5077: CALL 5174 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
5081: LD_VAR 0 1
5085: PUSH
5086: LD_INT 5
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: IN
5096: PUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_INT 2
5104: EQUAL
5105: OR
5106: IFFALSE 5033
// if not ( dec1 in [ 5 , 6 ] ) then
5108: LD_VAR 0 1
5112: PUSH
5113: LD_INT 5
5115: PUSH
5116: LD_INT 6
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: IN
5123: NOT
5124: IFFALSE 5167
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_STRING Q1a
5133: PPUSH
5134: LD_INT 1
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 98
5148: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
5149: LD_VAR 0 1
5153: PUSH
5154: LD_INT 4
5156: PLUS
5157: PPUSH
5158: LD_VAR 0 2
5162: PPUSH
5163: CALL 5174 0 2
// end ; InGameOff ;
5167: CALL_OW 9
// end ;
5171: PPOPN 2
5173: END
// function ResolveQuery ( question , list_of_q ) ; begin
5174: LD_INT 0
5176: PPUSH
// case question of 1 :
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 1
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5241
5190: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
5191: LD_EXP 1
5195: PPUSH
5196: LD_STRING D2Mot-JMM-1
5198: PPUSH
5199: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
5203: LD_EXP 17
5207: PPUSH
5208: LD_STRING D2Mot-Pow-1
5210: PPUSH
5211: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D2Mot-JMM-2
5222: PPUSH
5223: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
5227: LD_EXP 17
5231: PPUSH
5232: LD_STRING D2Mot-Pow-2
5234: PPUSH
5235: CALL_OW 88
// end ; 2 :
5239: GO 5584
5241: LD_INT 2
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5325
5249: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
5250: LD_EXP 1
5254: PPUSH
5255: LD_STRING D2Rus-JMM-1
5257: PPUSH
5258: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
5262: LD_EXP 17
5266: PPUSH
5267: LD_STRING D2Rus-Pow-1
5269: PPUSH
5270: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
5274: LD_EXP 1
5278: PPUSH
5279: LD_STRING D2Rus-JMM-2
5281: PPUSH
5282: CALL_OW 88
// if not ( 3 in list_of_q ) then
5286: LD_INT 3
5288: PUSH
5289: LD_VAR 0 2
5293: IN
5294: NOT
5295: IFFALSE 5311
// Say ( Powell , D2Rus-Pow-2 ) else
5297: LD_EXP 17
5301: PPUSH
5302: LD_STRING D2Rus-Pow-2
5304: PPUSH
5305: CALL_OW 88
5309: GO 5323
// Say ( Powell , D2Rus-Pow-2a ) ;
5311: LD_EXP 17
5315: PPUSH
5316: LD_STRING D2Rus-Pow-2a
5318: PPUSH
5319: CALL_OW 88
// end ; 3 :
5323: GO 5584
5325: LD_INT 3
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5418
5333: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
5334: LD_EXP 1
5338: PPUSH
5339: LD_STRING D2Leg-JMM-1
5341: PPUSH
5342: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
5346: LD_EXP 17
5350: PPUSH
5351: LD_STRING D2Leg-Pow-1
5353: PPUSH
5354: CALL_OW 88
// if ( 2 in list_of_q ) then
5358: LD_INT 2
5360: PUSH
5361: LD_VAR 0 2
5365: IN
5366: IFFALSE 5392
// begin Say ( JMM , D2Leg-JMM-2 ) ;
5368: LD_EXP 1
5372: PPUSH
5373: LD_STRING D2Leg-JMM-2
5375: PPUSH
5376: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
5380: LD_EXP 17
5384: PPUSH
5385: LD_STRING D2Leg-Pow-2
5387: PPUSH
5388: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
5392: LD_EXP 1
5396: PPUSH
5397: LD_STRING D2Leg-JMM-3
5399: PPUSH
5400: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
5404: LD_EXP 17
5408: PPUSH
5409: LD_STRING D2Leg-Pow-3
5411: PPUSH
5412: CALL_OW 88
// end ; 4 :
5416: GO 5584
5418: LD_INT 4
5420: DOUBLE
5421: EQUAL
5422: IFTRUE 5426
5424: GO 5501
5426: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
5427: LD_EXP 1
5431: PPUSH
5432: LD_STRING D2Ar-JMM-1
5434: PPUSH
5435: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
5439: LD_EXP 17
5443: PPUSH
5444: LD_STRING D2Ar-Pow-1
5446: PPUSH
5447: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
5451: LD_EXP 1
5455: PPUSH
5456: LD_STRING D2Ar-JMM-2
5458: PPUSH
5459: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
5463: LD_EXP 17
5467: PPUSH
5468: LD_STRING D2Ar-Pow-2
5470: PPUSH
5471: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D2Ar-JMM-3
5482: PPUSH
5483: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
5487: LD_EXP 17
5491: PPUSH
5492: LD_STRING D2Ar-Pow-3
5494: PPUSH
5495: CALL_OW 88
// end ; 5 :
5499: GO 5584
5501: LD_INT 5
5503: DOUBLE
5504: EQUAL
5505: IFTRUE 5509
5507: GO 5524
5509: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
5510: LD_EXP 1
5514: PPUSH
5515: LD_STRING D2Conf-JMM-1
5517: PPUSH
5518: CALL_OW 88
// end ; 6 :
5522: GO 5584
5524: LD_INT 6
5526: DOUBLE
5527: EQUAL
5528: IFTRUE 5532
5530: GO 5583
5532: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
5533: LD_EXP 1
5537: PPUSH
5538: LD_STRING D2Com-JMM-1
5540: PPUSH
5541: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_STRING D2Com-Pow-1
5552: PPUSH
5553: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_STRING D2Com-JMM-2
5564: PPUSH
5565: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
5569: LD_EXP 17
5573: PPUSH
5574: LD_STRING D2Com-Pow-2
5576: PPUSH
5577: CALL_OW 88
// end ; end ;
5581: GO 5584
5583: POP
// end ;
5584: LD_VAR 0 3
5588: RET
