// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 58 0 0
// InitMacro ;
   8: CALL 31688 0 0
// InitNature ;
  12: CALL 31512 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareAlliance ;
  29: CALL 9465 0 0
// PrepareRussian ;
  33: CALL 5727 0 0
// PrepareLegion ;
  37: CALL 3793 0 0
// PreparePowell ;
  41: CALL 2547 0 0
// PrepareAmerican ;
  45: CALL 1377 0 0
// Action ;
  49: CALL 13211 0 0
// MC_Start ( ) ;
  53: CALL 32835 0 0
// end ;
  57: END
// export debug ; export KappaStatus , KurtStatus , JMMVeh , JMMGirlVeh , JMMGirlStatus , JMMGirl , KhatamStatus , BurlakStatus , StevensStatus , FastEnd , FakeInfo ; export missionStart , missionTime , missionStage , activeAttacks , powellAnger , powellSquadAttack , powellAllowRetreat , powellCenterCameraMode , russianDestroyed , legionDestroyed , allianceDestroyed , vsevolodFirstAttack , allowBehemothConstruct , behemothUnderConstruct , behemothDestroyedBeforeFinish , behemothDone , seeBehemoth , platonovHasBomb , allianceActive , lostCounter , rothCaptured , capturedUnit , trueAmericans ; export function InitVariables ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// missionStart := false ;
  69: LD_ADDR_EXP 13
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// missionTime := 0 0$00 ;
  77: LD_ADDR_EXP 14
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// missionStage := 1 ;
  85: LD_ADDR_EXP 15
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// activeAttacks := false ;
  93: LD_ADDR_EXP 16
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// powellAnger := 0 ;
 101: LD_ADDR_EXP 17
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// powellAllowRetreat := true ;
 109: LD_ADDR_EXP 19
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// powellCenterCameraMode := false ;
 117: LD_ADDR_EXP 20
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// powellSquadAttack := [ [ ] , [ ] ] ;
 125: LD_ADDR_EXP 18
 129: PUSH
 130: EMPTY
 131: PUSH
 132: EMPTY
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: ST_TO_ADDR
// russianDestroyed := false ;
 138: LD_ADDR_EXP 21
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// legionDestroyed := false ;
 146: LD_ADDR_EXP 22
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// allianceDestroyed := false ;
 154: LD_ADDR_EXP 23
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// KappaStatus := LoadVariable ( 14_KappaStatus_1 , 0 ) ;
 162: LD_ADDR_EXP 2
 166: PUSH
 167: LD_STRING 14_KappaStatus_1
 169: PPUSH
 170: LD_INT 0
 172: PPUSH
 173: CALL_OW 30
 177: ST_TO_ADDR
// KurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 178: LD_ADDR_EXP 3
 182: PUSH
 183: LD_STRING 06_KurtStatus_1
 185: PPUSH
 186: LD_INT 0
 188: PPUSH
 189: CALL_OW 30
 193: ST_TO_ADDR
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , 0 ) ;
 194: LD_ADDR_EXP 4
 198: PUSH
 199: LD_STRING 14_JMMVeh_1
 201: PPUSH
 202: LD_INT 0
 204: PPUSH
 205: CALL_OW 30
 209: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , 0 ) ;
 210: LD_ADDR_EXP 5
 214: PUSH
 215: LD_STRING 14_JMMGirlVeh_1
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
 226: LD_ADDR_EXP 7
 230: PUSH
 231: LD_STRING 14_JMMGirl_1
 233: PPUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 30
 241: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
 242: LD_ADDR_EXP 6
 246: PUSH
 247: LD_STRING 14_JMMGirlStatus_1
 249: PPUSH
 250: LD_INT 0
 252: PPUSH
 253: CALL_OW 30
 257: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
 258: LD_ADDR_EXP 8
 262: PUSH
 263: LD_STRING 10_KhatamStatus_1
 265: PPUSH
 266: LD_INT 0
 268: PPUSH
 269: CALL_OW 30
 273: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 274: LD_ADDR_EXP 9
 278: PUSH
 279: LD_STRING 13_BurlakStatus_1
 281: PPUSH
 282: LD_INT 0
 284: PPUSH
 285: CALL_OW 30
 289: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 290: LD_ADDR_EXP 10
 294: PUSH
 295: LD_STRING 13_StevensStatus_1
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 30
 305: ST_TO_ADDR
// FastEnd := LoadVariable ( 14_FastEnd_1 , 0 ) ;
 306: LD_ADDR_EXP 11
 310: PUSH
 311: LD_STRING 14_FastEnd_1
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 30
 321: ST_TO_ADDR
// FakeInfo := LoadVariable ( 12_MainDepositFake_1 , 0 ) ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: LD_STRING 12_MainDepositFake_1
 329: PPUSH
 330: LD_INT 0
 332: PPUSH
 333: CALL_OW 30
 337: ST_TO_ADDR
// vsevolodFirstAttack := true ;
 338: LD_ADDR_EXP 24
 342: PUSH
 343: LD_INT 1
 345: ST_TO_ADDR
// behemothUnderConstruct := false ;
 346: LD_ADDR_EXP 26
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// behemothDestroyedBeforeFinish := false ;
 354: LD_ADDR_EXP 27
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// behemothDone := false ;
 362: LD_ADDR_EXP 28
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// allowBehemothConstruct := false ;
 370: LD_ADDR_EXP 25
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// seeBehemoth := false ;
 378: LD_ADDR_EXP 29
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// platonovHasBomb := false ;
 386: LD_ADDR_EXP 30
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// allianceActive := false ;
 394: LD_ADDR_EXP 31
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// rothCaptured := false ;
 402: LD_ADDR_EXP 33
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// lostCounter := 0 ;
 410: LD_ADDR_EXP 32
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// capturedUnit := [ ] ;
 418: LD_ADDR_EXP 34
 422: PUSH
 423: EMPTY
 424: ST_TO_ADDR
// trueAmericans := [ ] ;
 425: LD_ADDR_EXP 35
 429: PUSH
 430: EMPTY
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 1
 436: RET
// export function CustomInitMacro ( ) ; begin
 437: LD_INT 0
 439: PPUSH
// mc_parking := [ allianceParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 440: LD_ADDR_EXP 123
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 3
 450: PUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 10
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// mc_scan_area := [ allianceBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 463: LD_ADDR_EXP 124
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 5
 476: PUSH
 477: LD_INT 9
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_computer ] ) ;
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 10
 491: PUSH
 492: LD_INT 11
 494: PUSH
 495: LD_INT 12
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL 54368 0 2
// MC_SetCratesArea ( 1 , [ allianceCratesArea ] ) ;
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 17
 512: PUSH
 513: EMPTY
 514: LIST
 515: PPUSH
 516: CALL 54461 0 2
// MC_SetTame ( 1 , allianceCratesArea ) ;
 520: LD_INT 1
 522: PPUSH
 523: LD_INT 17
 525: PPUSH
 526: CALL 54192 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 530: LD_INT 2
 532: PPUSH
 533: LD_INT 10
 535: PUSH
 536: LD_INT 11
 538: PUSH
 539: LD_INT 12
 541: PUSH
 542: LD_INT 14
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL 54368 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 555: LD_INT 2
 557: PPUSH
 558: LD_INT 16
 560: PUSH
 561: EMPTY
 562: LIST
 563: PPUSH
 564: CALL 54461 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 568: LD_INT 2
 570: PPUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 3
 576: PUSH
 577: LD_INT 3
 579: PUSH
 580: LD_INT 51
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 24
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 3
 597: PUSH
 598: LD_INT 47
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 24
 609: PUSH
 610: LD_INT 3
 612: PUSH
 613: LD_INT 3
 615: PUSH
 616: LD_INT 47
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_INT 24
 627: PUSH
 628: LD_INT 3
 630: PUSH
 631: LD_INT 3
 633: PUSH
 634: LD_INT 47
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 24
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: LD_INT 47
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 24
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 47
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL 53631 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 691: LD_INT 2
 693: PPUSH
 694: LD_INT 5
 696: PPUSH
 697: CALL 53874 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 701: LD_INT 2
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL 54241 0 2
// MC_SetMinesField ( 2 , [ 10 , 12 , 15 ] [ Difficulty ] , legionMinefield ) ;
 711: LD_INT 2
 713: PPUSH
 714: LD_INT 10
 716: PUSH
 717: LD_INT 12
 719: PUSH
 720: LD_INT 15
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_OWVAR 67
 732: ARRAY
 733: PPUSH
 734: LD_INT 27
 736: PPUSH
 737: CALL 53313 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 741: LD_INT 3
 743: PPUSH
 744: LD_INT 10
 746: PUSH
 747: LD_INT 11
 749: PUSH
 750: LD_INT 13
 752: PUSH
 753: LD_INT 15
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL 54368 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 766: LD_INT 3
 768: PPUSH
 769: LD_INT 15
 771: PUSH
 772: EMPTY
 773: LIST
 774: PPUSH
 775: CALL 54461 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 779: LD_ADDR_EXP 128
 783: PUSH
 784: LD_EXP 128
 788: PPUSH
 789: LD_INT 3
 791: PPUSH
 792: LD_INT 22
 794: PUSH
 795: LD_INT 8
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 25
 804: PUSH
 805: LD_INT 15
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PPUSH
 816: CALL_OW 69
 820: PPUSH
 821: CALL_OW 1
 825: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
 826: LD_INT 3
 828: PPUSH
 829: LD_INT 13
 831: PUSH
 832: LD_INT 2
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: LD_INT 31
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 13
 849: PUSH
 850: LD_INT 2
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: LD_INT 31
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 2
 873: PUSH
 874: LD_INT 32
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: LIST
 887: PPUSH
 888: CALL 53631 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer ] ) ;
 892: LD_INT 4
 894: PPUSH
 895: LD_INT 10
 897: PUSH
 898: LD_INT 12
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL 54368 0 2
// MC_SetCratesArea ( 4 , [ powellBase ] ) ;
 909: LD_INT 4
 911: PPUSH
 912: LD_INT 9
 914: PUSH
 915: EMPTY
 916: LIST
 917: PPUSH
 918: CALL 54461 0 2
// MC_SetBuildingList ( 4 , [ [ b_oil_power , 74 , 107 , 0 ] , [ b_bunker , 77 , 101 , 4 ] , [ b_bunker , 69 , 86 , 4 ] , [ b_solar_power , 77 , 110 , 3 ] , [ b_solar_power , 42 , 79 , 5 ] , [ b_oil_mine , 86 , 105 , 2 ] , [ b_siberite_mine , 40 , 75 , 1 ] , [ b_bunker , 80 , 106 , 4 ] , [ b_bunker , 75 , 114 , 5 ] , [ b_bunker , 82 , 110 , 5 ] , [ b_bunker , 62 , 78 , 4 ] , [ b_armoury , 39 , 61 , 3 ] ] ) ;
 922: LD_INT 4
 924: PPUSH
 925: LD_INT 26
 927: PUSH
 928: LD_INT 74
 930: PUSH
 931: LD_INT 107
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 32
 945: PUSH
 946: LD_INT 77
 948: PUSH
 949: LD_INT 101
 951: PUSH
 952: LD_INT 4
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 32
 963: PUSH
 964: LD_INT 69
 966: PUSH
 967: LD_INT 86
 969: PUSH
 970: LD_INT 4
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 27
 981: PUSH
 982: LD_INT 77
 984: PUSH
 985: LD_INT 110
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: PUSH
 997: LD_INT 27
 999: PUSH
1000: LD_INT 42
1002: PUSH
1003: LD_INT 79
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 29
1017: PUSH
1018: LD_INT 86
1020: PUSH
1021: LD_INT 105
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 30
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 75
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: LD_INT 32
1053: PUSH
1054: LD_INT 80
1056: PUSH
1057: LD_INT 106
1059: PUSH
1060: LD_INT 4
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 32
1071: PUSH
1072: LD_INT 75
1074: PUSH
1075: LD_INT 114
1077: PUSH
1078: LD_INT 5
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 32
1089: PUSH
1090: LD_INT 82
1092: PUSH
1093: LD_INT 110
1095: PUSH
1096: LD_INT 5
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 32
1107: PUSH
1108: LD_INT 62
1110: PUSH
1111: LD_INT 78
1113: PUSH
1114: LD_INT 4
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 4
1125: PUSH
1126: LD_INT 39
1128: PUSH
1129: LD_INT 61
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL 53523 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_laser ] ) ;
1159: LD_INT 4
1161: PPUSH
1162: LD_INT 5
1164: PUSH
1165: LD_INT 6
1167: PUSH
1168: LD_INT 7
1170: PUSH
1171: LD_INT 9
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PPUSH
1180: CALL 54779 0 2
// MC_SetDepositsXY ( 4 , [ [ 40 , 75 , 1 ] , [ 86 , 105 , 0 ] ] ) ;
1184: LD_INT 4
1186: PPUSH
1187: LD_INT 40
1189: PUSH
1190: LD_INT 75
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 86
1203: PUSH
1204: LD_INT 105
1206: PUSH
1207: LD_INT 0
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL 54013 0 2
// MC_SetUpgradeBuilding ( 4 , b_workshop ) ;
1223: LD_INT 4
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL 54241 0 2
// MC_SetUpgradeBuilding ( 4 , b_depot ) ;
1233: LD_INT 4
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL 54241 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket ] ) ;
1243: LD_INT 4
1245: PPUSH
1246: LD_INT 54
1248: PPUSH
1249: LD_INT 85
1251: PPUSH
1252: LD_INT 2
1254: PPUSH
1255: LD_INT 19
1257: PUSH
1258: LD_INT 16
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 18
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL 54573 0 5
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ) ;
1277: LD_INT 4
1279: PPUSH
1280: LD_INT 3
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: LD_INT 1
1288: PUSH
1289: LD_INT 5
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_INT 4
1300: PUSH
1301: LD_INT 1
1303: PUSH
1304: LD_INT 1
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: PUSH
1316: LD_INT 4
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: LD_INT 7
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 4
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 6
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL 53631 0 2
// MC_SetTame ( 4 , powellApe ) ;
1362: LD_INT 4
1364: PPUSH
1365: LD_INT 13
1367: PPUSH
1368: CALL 54192 0 2
// end ; end_of_file
1372: LD_VAR 0 1
1376: RET
// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ; export JMMNewVeh , GirlNewVeh ; export function PrepareAmerican ; begin
1377: LD_INT 0
1379: PPUSH
// uc_side := 1 ;
1380: LD_ADDR_OWVAR 20
1384: PUSH
1385: LD_INT 1
1387: ST_TO_ADDR
// uc_nation := 1 ;
1388: LD_ADDR_OWVAR 21
1392: PUSH
1393: LD_INT 1
1395: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14_ ) ;
1396: LD_ADDR_EXP 36
1400: PUSH
1401: LD_STRING JMM
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_STRING 14_
1412: PPUSH
1413: CALL 59586 0 3
1417: ST_TO_ADDR
// if not JMMVeh then
1418: LD_EXP 4
1422: NOT
1423: IFFALSE 1446
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) else
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 5
1436: PPUSH
1437: LD_INT 100
1439: PPUSH
1440: CALL 66219 0 5
1444: GO 1505
// PrepareVehicle ( JMMVeh [ 1 ] [ 1 ] , JMMVeh [ 2 ] [ 1 ] , JMMVeh [ 3 ] [ 1 ] , JMMVeh [ 4 ] [ 1 ] , 30 ) ;
1446: LD_EXP 4
1450: PUSH
1451: LD_INT 1
1453: ARRAY
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_EXP 4
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PUSH
1468: LD_INT 1
1470: ARRAY
1471: PPUSH
1472: LD_EXP 4
1476: PUSH
1477: LD_INT 3
1479: ARRAY
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: LD_EXP 4
1489: PUSH
1490: LD_INT 4
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: PPUSH
1498: LD_INT 30
1500: PPUSH
1501: CALL 66219 0 5
// JMMNewVeh := CreateVehicle ;
1505: LD_ADDR_EXP 53
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// SetDir ( JMMNewVeh , 4 ) ;
1515: LD_EXP 53
1519: PPUSH
1520: LD_INT 4
1522: PPUSH
1523: CALL_OW 233
// PlaceUnitXY ( JMMNewVeh , 75 , 92 , false ) ;
1527: LD_EXP 53
1531: PPUSH
1532: LD_INT 75
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: LD_INT 0
1540: PPUSH
1541: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMNewVeh ) ;
1545: LD_EXP 36
1549: PPUSH
1550: LD_EXP 53
1554: PPUSH
1555: CALL_OW 52
// if JMMGirl and not KappaStatus then
1559: LD_EXP 7
1563: PUSH
1564: LD_EXP 2
1568: NOT
1569: AND
1570: IFFALSE 1828
// begin if not JMMGirlVeh then
1572: LD_EXP 5
1576: NOT
1577: IFFALSE 1600
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_laser , 100 ) else
1579: LD_INT 3
1581: PPUSH
1582: LD_INT 3
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 9
1590: PPUSH
1591: LD_INT 100
1593: PPUSH
1594: CALL 66219 0 5
1598: GO 1659
// PrepareVehicle ( JMMGirlVeh [ 1 ] [ 1 ] , JMMGirlVeh [ 2 ] [ 1 ] , JMMGirlVeh [ 3 ] [ 1 ] , JMMGirlVeh [ 4 ] [ 1 ] , 30 ) ;
1600: LD_EXP 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: LD_EXP 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 1
1624: ARRAY
1625: PPUSH
1626: LD_EXP 5
1630: PUSH
1631: LD_INT 3
1633: ARRAY
1634: PUSH
1635: LD_INT 1
1637: ARRAY
1638: PPUSH
1639: LD_EXP 5
1643: PUSH
1644: LD_INT 4
1646: ARRAY
1647: PUSH
1648: LD_INT 1
1650: ARRAY
1651: PPUSH
1652: LD_INT 30
1654: PPUSH
1655: CALL 66219 0 5
// GirlNewVeh := CreateVehicle ;
1659: LD_ADDR_EXP 54
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// SetDir ( GirlNewVeh , 4 ) ;
1669: LD_EXP 54
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: CALL_OW 233
// PlaceUnitXY ( GirlNewVeh , 82 , 96 , false ) ;
1681: LD_EXP 54
1685: PPUSH
1686: LD_INT 82
1688: PPUSH
1689: LD_INT 96
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 48
// if JMMGirl = 1 then
1699: LD_EXP 7
1703: PUSH
1704: LD_INT 1
1706: EQUAL
1707: IFFALSE 1742
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
1709: LD_ADDR_EXP 37
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_STRING 14_
1722: PPUSH
1723: CALL 59586 0 3
1727: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , GirlNewVeh ) ;
1728: LD_EXP 37
1732: PPUSH
1733: LD_EXP 54
1737: PPUSH
1738: CALL_OW 52
// end ; if JMMGirl = 2 then
1742: LD_EXP 7
1746: PUSH
1747: LD_INT 2
1749: EQUAL
1750: IFFALSE 1785
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
1752: LD_ADDR_EXP 39
1756: PUSH
1757: LD_STRING Lisa
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_STRING 14_
1765: PPUSH
1766: CALL 59586 0 3
1770: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , GirlNewVeh ) ;
1771: LD_EXP 39
1775: PPUSH
1776: LD_EXP 54
1780: PPUSH
1781: CALL_OW 52
// end ; if JMMGirl = 3 then
1785: LD_EXP 7
1789: PUSH
1790: LD_INT 3
1792: EQUAL
1793: IFFALSE 1828
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
1795: LD_ADDR_EXP 51
1799: PUSH
1800: LD_STRING Connie
1802: PPUSH
1803: LD_INT 1
1805: PPUSH
1806: LD_STRING 14_
1808: PPUSH
1809: CALL 59586 0 3
1813: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , GirlNewVeh ) ;
1814: LD_EXP 51
1818: PPUSH
1819: LD_EXP 54
1823: PPUSH
1824: CALL_OW 52
// end ; end ; end ;
1828: LD_VAR 0 1
1832: RET
// export function PrepareStevensSquad ; var tmp ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
// uc_side := 1 ;
1837: LD_ADDR_OWVAR 20
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// uc_nation := 1 ;
1845: LD_ADDR_OWVAR 21
1849: PUSH
1850: LD_INT 1
1852: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debug ) , 13f_ ) ;
1853: LD_ADDR_EXP 38
1857: PUSH
1858: LD_STRING Stevens
1860: PPUSH
1861: LD_EXP 1
1865: NOT
1866: PPUSH
1867: LD_STRING 13f_
1869: PPUSH
1870: CALL 59586 0 3
1874: ST_TO_ADDR
// if not Stevens then
1875: LD_EXP 38
1879: NOT
1880: IFFALSE 1936
// begin hc_name = Baker Smith ;
1882: LD_ADDR_OWVAR 26
1886: PUSH
1887: LD_STRING Baker Smith
1889: ST_TO_ADDR
// hc_gallery =  ;
1890: LD_ADDR_OWVAR 33
1894: PUSH
1895: LD_STRING 
1897: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 10
1903: PPUSH
1904: CALL_OW 384
// Baker = CreateHuman ;
1908: LD_ADDR_EXP 52
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// tmp := tmp ^ Baker ;
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_VAR 0 2
1927: PUSH
1928: LD_EXP 52
1932: ADD
1933: ST_TO_ADDR
// end else
1934: GO 1952
// tmp := tmp ^ Stevens ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 2
1945: PUSH
1946: LD_EXP 38
1950: ADD
1951: ST_TO_ADDR
// if not Lisa then
1952: LD_EXP 39
1956: NOT
1957: IFFALSE 2003
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13f_ ) ;
1959: LD_ADDR_EXP 39
1963: PUSH
1964: LD_STRING Lisa
1966: PPUSH
1967: LD_EXP 1
1971: NOT
1972: PPUSH
1973: LD_STRING 13f_
1975: PPUSH
1976: CALL 59586 0 3
1980: ST_TO_ADDR
// if Lisa then
1981: LD_EXP 39
1985: IFFALSE 2003
// tmp := tmp ^ Lisa ;
1987: LD_ADDR_VAR 0 2
1991: PUSH
1992: LD_VAR 0 2
1996: PUSH
1997: LD_EXP 39
2001: ADD
2002: ST_TO_ADDR
// end ; if not Donaldson then
2003: LD_EXP 40
2007: NOT
2008: IFFALSE 2054
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13f_ ) ;
2010: LD_ADDR_EXP 40
2014: PUSH
2015: LD_STRING Donaldson
2017: PPUSH
2018: LD_EXP 1
2022: NOT
2023: PPUSH
2024: LD_STRING 13f_
2026: PPUSH
2027: CALL 59586 0 3
2031: ST_TO_ADDR
// if Donaldson then
2032: LD_EXP 40
2036: IFFALSE 2054
// tmp := tmp ^ Donaldson ;
2038: LD_ADDR_VAR 0 2
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 40
2052: ADD
2053: ST_TO_ADDR
// end ; if not Bobby then
2054: LD_EXP 41
2058: NOT
2059: IFFALSE 2105
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13f_ ) ;
2061: LD_ADDR_EXP 41
2065: PUSH
2066: LD_STRING Bobby
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13f_
2077: PPUSH
2078: CALL 59586 0 3
2082: ST_TO_ADDR
// if Bobby then
2083: LD_EXP 41
2087: IFFALSE 2105
// tmp := tmp ^ Bobby ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 41
2103: ADD
2104: ST_TO_ADDR
// end ; if not Cyrus then
2105: LD_EXP 42
2109: NOT
2110: IFFALSE 2156
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13f_ ) ;
2112: LD_ADDR_EXP 42
2116: PUSH
2117: LD_STRING Cyrus
2119: PPUSH
2120: LD_EXP 1
2124: NOT
2125: PPUSH
2126: LD_STRING 13f_
2128: PPUSH
2129: CALL 59586 0 3
2133: ST_TO_ADDR
// if Cyrus then
2134: LD_EXP 42
2138: IFFALSE 2156
// tmp := tmp ^ Cyrus ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_VAR 0 2
2149: PUSH
2150: LD_EXP 42
2154: ADD
2155: ST_TO_ADDR
// end ; if not Brown then
2156: LD_EXP 44
2160: NOT
2161: IFFALSE 2207
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13f_ ) ;
2163: LD_ADDR_EXP 44
2167: PUSH
2168: LD_STRING Brown
2170: PPUSH
2171: LD_EXP 1
2175: NOT
2176: PPUSH
2177: LD_STRING 13f_
2179: PPUSH
2180: CALL 59586 0 3
2184: ST_TO_ADDR
// if Brown then
2185: LD_EXP 44
2189: IFFALSE 2207
// tmp := tmp ^ Brown ;
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: LD_VAR 0 2
2200: PUSH
2201: LD_EXP 44
2205: ADD
2206: ST_TO_ADDR
// end ; if not Gladstone then
2207: LD_EXP 45
2211: NOT
2212: IFFALSE 2258
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13f_ ) ;
2214: LD_ADDR_EXP 45
2218: PUSH
2219: LD_STRING Gladstone
2221: PPUSH
2222: LD_EXP 1
2226: NOT
2227: PPUSH
2228: LD_STRING 13f_
2230: PPUSH
2231: CALL 59586 0 3
2235: ST_TO_ADDR
// if Gladstone then
2236: LD_EXP 45
2240: IFFALSE 2258
// tmp := tmp ^ Gladstone ;
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_EXP 45
2256: ADD
2257: ST_TO_ADDR
// end ; if not Houten then
2258: LD_EXP 46
2262: NOT
2263: IFFALSE 2309
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13f_ ) ;
2265: LD_ADDR_EXP 46
2269: PUSH
2270: LD_STRING Houten
2272: PPUSH
2273: LD_EXP 1
2277: NOT
2278: PPUSH
2279: LD_STRING 13f_
2281: PPUSH
2282: CALL 59586 0 3
2286: ST_TO_ADDR
// if Houten then
2287: LD_EXP 46
2291: IFFALSE 2309
// tmp := tmp ^ Houten ;
2293: LD_ADDR_VAR 0 2
2297: PUSH
2298: LD_VAR 0 2
2302: PUSH
2303: LD_EXP 46
2307: ADD
2308: ST_TO_ADDR
// end ; if not Cornel then
2309: LD_EXP 47
2313: NOT
2314: IFFALSE 2360
// begin Cornel := PrepareUnit ( Cornel , ( not debug ) , 13f_ ) ;
2316: LD_ADDR_EXP 47
2320: PUSH
2321: LD_STRING Cornel
2323: PPUSH
2324: LD_EXP 1
2328: NOT
2329: PPUSH
2330: LD_STRING 13f_
2332: PPUSH
2333: CALL 59586 0 3
2337: ST_TO_ADDR
// if Cornel then
2338: LD_EXP 47
2342: IFFALSE 2360
// tmp := tmp ^ Cornel ;
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: LD_VAR 0 2
2353: PUSH
2354: LD_EXP 47
2358: ADD
2359: ST_TO_ADDR
// end ; if not Gary then
2360: LD_EXP 48
2364: NOT
2365: IFFALSE 2411
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13f_ ) ;
2367: LD_ADDR_EXP 48
2371: PUSH
2372: LD_STRING Gary
2374: PPUSH
2375: LD_EXP 1
2379: NOT
2380: PPUSH
2381: LD_STRING 13f_
2383: PPUSH
2384: CALL 59586 0 3
2388: ST_TO_ADDR
// if Gary then
2389: LD_EXP 48
2393: IFFALSE 2411
// tmp := tmp ^ Gary ;
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: LD_VAR 0 2
2404: PUSH
2405: LD_EXP 48
2409: ADD
2410: ST_TO_ADDR
// end ; if not Frank then
2411: LD_EXP 49
2415: NOT
2416: IFFALSE 2462
// begin Frank := PrepareUnit ( Frank , ( not debug ) , 13f_ ) ;
2418: LD_ADDR_EXP 49
2422: PUSH
2423: LD_STRING Frank
2425: PPUSH
2426: LD_EXP 1
2430: NOT
2431: PPUSH
2432: LD_STRING 13f_
2434: PPUSH
2435: CALL 59586 0 3
2439: ST_TO_ADDR
// if Frank then
2440: LD_EXP 49
2444: IFFALSE 2462
// tmp := tmp ^ Frank ;
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: LD_VAR 0 2
2455: PUSH
2456: LD_EXP 49
2460: ADD
2461: ST_TO_ADDR
// end ; if not Kikuchi then
2462: LD_EXP 50
2466: NOT
2467: IFFALSE 2513
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13f_ ) ;
2469: LD_ADDR_EXP 50
2473: PUSH
2474: LD_STRING Kikuchi
2476: PPUSH
2477: LD_EXP 1
2481: NOT
2482: PPUSH
2483: LD_STRING 13f_
2485: PPUSH
2486: CALL 59586 0 3
2490: ST_TO_ADDR
// if Kikuchi then
2491: LD_EXP 50
2495: IFFALSE 2513
// tmp := tmp ^ Kikuchi ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_EXP 50
2511: ADD
2512: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13_other_survivors ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_VAR 0 2
2522: PUSH
2523: LD_STRING 13_other_survivors
2525: PPUSH
2526: CALL_OW 31
2530: UNION
2531: ST_TO_ADDR
// result := tmp ;
2532: LD_ADDR_VAR 0 1
2536: PUSH
2537: LD_VAR 0 2
2541: ST_TO_ADDR
// end ; end_of_file
2542: LD_VAR 0 1
2546: RET
// export Powell ; export vip ; export function PreparePowell ; var i , b , veh , cl , tmp , depot , lab , armoury , workshop ; begin
2547: LD_INT 0
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
2554: PPUSH
2555: PPUSH
2556: PPUSH
2557: PPUSH
2558: PPUSH
// uc_side := 4 ;
2559: LD_ADDR_OWVAR 20
2563: PUSH
2564: LD_INT 4
2566: ST_TO_ADDR
// uc_nation := 1 ;
2567: LD_ADDR_OWVAR 21
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// SetResourceType ( GetBase ( am_depot ) , mat_cans , 2500 ) ;
2575: LD_INT 387
2577: PPUSH
2578: CALL_OW 274
2582: PPUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2500
2588: PPUSH
2589: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 400 ) ;
2593: LD_INT 387
2595: PPUSH
2596: CALL_OW 274
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: LD_INT 400
2606: PPUSH
2607: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 10 ) ;
2611: LD_INT 387
2613: PPUSH
2614: CALL_OW 274
2618: PPUSH
2619: LD_INT 3
2621: PPUSH
2622: LD_INT 10
2624: PPUSH
2625: CALL_OW 277
// Powell := NewCharacter ( Powell ) ;
2629: LD_ADDR_EXP 55
2633: PUSH
2634: LD_STRING Powell
2636: PPUSH
2637: CALL_OW 25
2641: ST_TO_ADDR
// PlaceUnitXY ( Powell , 57 , 94 , false ) ;
2642: LD_EXP 55
2646: PPUSH
2647: LD_INT 57
2649: PPUSH
2650: LD_INT 94
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 48
// ComTurnXY ( Powell , 58 , 94 ) ;
2660: LD_EXP 55
2664: PPUSH
2665: LD_INT 58
2667: PPUSH
2668: LD_INT 94
2670: PPUSH
2671: CALL_OW 118
// vip := [ ] ;
2675: LD_ADDR_EXP 56
2679: PUSH
2680: EMPTY
2681: ST_TO_ADDR
// tmp := [ ] ;
2682: LD_ADDR_VAR 0 6
2686: PUSH
2687: EMPTY
2688: ST_TO_ADDR
// if JMMGirl <> 2 then
2689: LD_EXP 7
2693: PUSH
2694: LD_INT 2
2696: NONEQUAL
2697: IFFALSE 2721
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
2699: LD_ADDR_EXP 39
2703: PUSH
2704: LD_STRING Lisa
2706: PPUSH
2707: LD_EXP 1
2711: NOT
2712: PPUSH
2713: LD_STRING 13s_
2715: PPUSH
2716: CALL 59586 0 3
2720: ST_TO_ADDR
// if Lisa then
2721: LD_EXP 39
2725: IFFALSE 2743
// tmp := tmp ^ Lisa ;
2727: LD_ADDR_VAR 0 6
2731: PUSH
2732: LD_VAR 0 6
2736: PUSH
2737: LD_EXP 39
2741: ADD
2742: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13s_ ) ;
2743: LD_ADDR_EXP 40
2747: PUSH
2748: LD_STRING Donaldson
2750: PPUSH
2751: LD_EXP 1
2755: NOT
2756: PPUSH
2757: LD_STRING 13s_
2759: PPUSH
2760: CALL 59586 0 3
2764: ST_TO_ADDR
// if Donaldson then
2765: LD_EXP 40
2769: IFFALSE 2787
// tmp := tmp ^ Donaldson ;
2771: LD_ADDR_VAR 0 6
2775: PUSH
2776: LD_VAR 0 6
2780: PUSH
2781: LD_EXP 40
2785: ADD
2786: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 13s_ ) ;
2787: LD_ADDR_EXP 41
2791: PUSH
2792: LD_STRING Bobby
2794: PPUSH
2795: LD_EXP 1
2799: NOT
2800: PPUSH
2801: LD_STRING 13s_
2803: PPUSH
2804: CALL 59586 0 3
2808: ST_TO_ADDR
// if Bobby then
2809: LD_EXP 41
2813: IFFALSE 2831
// tmp := tmp ^ Bobby ;
2815: LD_ADDR_VAR 0 6
2819: PUSH
2820: LD_VAR 0 6
2824: PUSH
2825: LD_EXP 41
2829: ADD
2830: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13s_ ) ;
2831: LD_ADDR_EXP 42
2835: PUSH
2836: LD_STRING Cyrus
2838: PPUSH
2839: LD_EXP 1
2843: NOT
2844: PPUSH
2845: LD_STRING 13s_
2847: PPUSH
2848: CALL 59586 0 3
2852: ST_TO_ADDR
// if Cyrus then
2853: LD_EXP 42
2857: IFFALSE 2875
// tmp := tmp ^ Cyrus ;
2859: LD_ADDR_VAR 0 6
2863: PUSH
2864: LD_VAR 0 6
2868: PUSH
2869: LD_EXP 42
2873: ADD
2874: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13s_ ) ;
2875: LD_ADDR_EXP 43
2879: PUSH
2880: LD_STRING Denis
2882: PPUSH
2883: LD_EXP 1
2887: NOT
2888: PPUSH
2889: LD_STRING 13s_
2891: PPUSH
2892: CALL 59586 0 3
2896: ST_TO_ADDR
// if not Denis then
2897: LD_EXP 43
2901: NOT
2902: IFFALSE 2926
// Denis := PrepareUnit ( Denis , ( not debug ) , 13f_ ) ;
2904: LD_ADDR_EXP 43
2908: PUSH
2909: LD_STRING Denis
2911: PPUSH
2912: LD_EXP 1
2916: NOT
2917: PPUSH
2918: LD_STRING 13f_
2920: PPUSH
2921: CALL 59586 0 3
2925: ST_TO_ADDR
// if Denis then
2926: LD_EXP 43
2930: IFFALSE 2948
// tmp := tmp ^ Denis ;
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: LD_VAR 0 6
2941: PUSH
2942: LD_EXP 43
2946: ADD
2947: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 13s_ ) ;
2948: LD_ADDR_EXP 44
2952: PUSH
2953: LD_STRING Brown
2955: PPUSH
2956: LD_EXP 1
2960: NOT
2961: PPUSH
2962: LD_STRING 13s_
2964: PPUSH
2965: CALL 59586 0 3
2969: ST_TO_ADDR
// if Brown then
2970: LD_EXP 44
2974: IFFALSE 2992
// tmp := tmp ^ Brown ;
2976: LD_ADDR_VAR 0 6
2980: PUSH
2981: LD_VAR 0 6
2985: PUSH
2986: LD_EXP 44
2990: ADD
2991: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13s_ ) ;
2992: LD_ADDR_EXP 45
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: LD_EXP 1
3004: NOT
3005: PPUSH
3006: LD_STRING 13s_
3008: PPUSH
3009: CALL 59586 0 3
3013: ST_TO_ADDR
// if Gladstone then
3014: LD_EXP 45
3018: IFFALSE 3036
// tmp := tmp ^ Gladstone ;
3020: LD_ADDR_VAR 0 6
3024: PUSH
3025: LD_VAR 0 6
3029: PUSH
3030: LD_EXP 45
3034: ADD
3035: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 13s_ ) ;
3036: LD_ADDR_EXP 46
3040: PUSH
3041: LD_STRING Houten
3043: PPUSH
3044: LD_EXP 1
3048: NOT
3049: PPUSH
3050: LD_STRING 13s_
3052: PPUSH
3053: CALL 59586 0 3
3057: ST_TO_ADDR
// if Houten then
3058: LD_EXP 46
3062: IFFALSE 3080
// tmp := tmp ^ Houten ;
3064: LD_ADDR_VAR 0 6
3068: PUSH
3069: LD_VAR 0 6
3073: PUSH
3074: LD_EXP 46
3078: ADD
3079: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 13s_ ) ;
3080: LD_ADDR_EXP 47
3084: PUSH
3085: LD_STRING Cornel
3087: PPUSH
3088: LD_EXP 1
3092: NOT
3093: PPUSH
3094: LD_STRING 13s_
3096: PPUSH
3097: CALL 59586 0 3
3101: ST_TO_ADDR
// if Cornel then
3102: LD_EXP 47
3106: IFFALSE 3124
// tmp := tmp ^ Cornel ;
3108: LD_ADDR_VAR 0 6
3112: PUSH
3113: LD_VAR 0 6
3117: PUSH
3118: LD_EXP 47
3122: ADD
3123: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 13s_ ) ;
3124: LD_ADDR_EXP 48
3128: PUSH
3129: LD_STRING Gary
3131: PPUSH
3132: LD_EXP 1
3136: NOT
3137: PPUSH
3138: LD_STRING 13s_
3140: PPUSH
3141: CALL 59586 0 3
3145: ST_TO_ADDR
// if Gary then
3146: LD_EXP 48
3150: IFFALSE 3168
// tmp := tmp ^ Gary ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_VAR 0 6
3161: PUSH
3162: LD_EXP 48
3166: ADD
3167: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13s_ ) ;
3168: LD_ADDR_EXP 49
3172: PUSH
3173: LD_STRING Frank
3175: PPUSH
3176: LD_EXP 1
3180: NOT
3181: PPUSH
3182: LD_STRING 13s_
3184: PPUSH
3185: CALL 59586 0 3
3189: ST_TO_ADDR
// if Frank then
3190: LD_EXP 49
3194: IFFALSE 3212
// tmp := tmp ^ Frank ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: LD_VAR 0 6
3205: PUSH
3206: LD_EXP 49
3210: ADD
3211: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13s_ ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_STRING Kikuchi
3219: PPUSH
3220: LD_EXP 1
3224: NOT
3225: PPUSH
3226: LD_STRING 13s_
3228: PPUSH
3229: CALL 59586 0 3
3233: ST_TO_ADDR
// if Kikuchi then
3234: LD_EXP 50
3238: IFFALSE 3256
// tmp := tmp ^ Kikuchi ;
3240: LD_ADDR_VAR 0 6
3244: PUSH
3245: LD_VAR 0 6
3249: PUSH
3250: LD_EXP 50
3254: ADD
3255: ST_TO_ADDR
// vip := tmp ;
3256: LD_ADDR_EXP 56
3260: PUSH
3261: LD_VAR 0 6
3265: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 13s_others ) ;
3266: LD_ADDR_VAR 0 6
3270: PUSH
3271: LD_VAR 0 6
3275: PUSH
3276: LD_STRING 13s_others
3278: PPUSH
3279: CALL_OW 31
3283: UNION
3284: ST_TO_ADDR
// if tmp < 20 then
3285: LD_VAR 0 6
3289: PUSH
3290: LD_INT 20
3292: LESS
3293: IFFALSE 3360
// for i = 1 to 20 - tmp do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 20
3307: PUSH
3308: LD_VAR 0 6
3312: MINUS
3313: PUSH
3314: FOR_TO
3315: IFFALSE 3358
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 5 ) ;
3317: LD_INT 1
3319: PPUSH
3320: LD_VAR 0 2
3324: PUSH
3325: LD_INT 4
3327: MOD
3328: PUSH
3329: LD_INT 1
3331: PLUS
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3340: LD_ADDR_VAR 0 6
3344: PUSH
3345: LD_VAR 0 6
3349: PUSH
3350: CALL_OW 44
3354: ADD
3355: ST_TO_ADDR
// end ;
3356: GO 3314
3358: POP
3359: POP
// depot := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
3360: LD_ADDR_VAR 0 7
3364: PUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 4
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 30
3377: PUSH
3378: LD_INT 0
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PPUSH
3389: CALL_OW 69
3393: PUSH
3394: LD_INT 1
3396: ARRAY
3397: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
3398: LD_ADDR_VAR 0 8
3402: PUSH
3403: LD_INT 22
3405: PUSH
3406: LD_INT 4
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 30
3415: PUSH
3416: LD_INT 6
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: ST_TO_ADDR
// armoury := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3436: LD_ADDR_VAR 0 9
3440: PUSH
3441: LD_INT 22
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: LD_INT 30
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PPUSH
3465: CALL_OW 69
3469: PUSH
3470: LD_INT 1
3472: ARRAY
3473: ST_TO_ADDR
// workshop := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
3474: LD_ADDR_VAR 0 10
3478: PUSH
3479: LD_INT 22
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 30
3491: PUSH
3492: LD_INT 2
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: ST_TO_ADDR
// for i in tmp do
3512: LD_ADDR_VAR 0 2
3516: PUSH
3517: LD_VAR 0 6
3521: PUSH
3522: FOR_IN
3523: IFFALSE 3649
// begin cl := GetClass ( i ) ;
3525: LD_ADDR_VAR 0 5
3529: PUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: CALL_OW 257
3539: ST_TO_ADDR
// if cl > 4 then
3540: LD_VAR 0 5
3544: PUSH
3545: LD_INT 4
3547: GREATER
3548: IFFALSE 3558
// cl := 1 ;
3550: LD_ADDR_VAR 0 5
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// b := [ armoury , depot , workshop , lab ] [ cl ] ;
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: LD_VAR 0 9
3567: PUSH
3568: LD_VAR 0 7
3572: PUSH
3573: LD_VAR 0 10
3577: PUSH
3578: LD_VAR 0 8
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_VAR 0 5
3593: ARRAY
3594: ST_TO_ADDR
// if UnitsInside ( b ) < 5 then
3595: LD_VAR 0 3
3599: PPUSH
3600: CALL_OW 313
3604: PUSH
3605: LD_INT 5
3607: LESS
3608: IFFALSE 3626
// PlaceHumanInUnit ( i , b ) else
3610: LD_VAR 0 2
3614: PPUSH
3615: LD_VAR 0 3
3619: PPUSH
3620: CALL_OW 52
3624: GO 3647
// PlaceUnitXYR ( i , 58 , 91 , 6 , false ) ;
3626: LD_VAR 0 2
3630: PPUSH
3631: LD_INT 58
3633: PPUSH
3634: LD_INT 91
3636: PPUSH
3637: LD_INT 6
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 50
// end ;
3647: GO 3522
3649: POP
3650: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 100 ) ;
3651: LD_INT 2
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 12
3662: PPUSH
3663: LD_INT 100
3665: PPUSH
3666: CALL 66219 0 5
// veh := CreateVehicle ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: CALL_OW 45
3679: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3680: LD_VAR 0 4
3684: PPUSH
3685: LD_INT 4
3687: PPUSH
3688: CALL_OW 233
// PlaceUnitXY ( veh , 49 , 88 , false ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_INT 49
3699: PPUSH
3700: LD_INT 88
3702: PPUSH
3703: LD_INT 0
3705: PPUSH
3706: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 100
3720: PPUSH
3721: CALL_OW 290
// uc_side := 0 ;
3725: LD_ADDR_OWVAR 20
3729: PUSH
3730: LD_INT 0
3732: ST_TO_ADDR
// uc_nation := 0 ;
3733: LD_ADDR_OWVAR 21
3737: PUSH
3738: LD_INT 0
3740: ST_TO_ADDR
// for i = 1 to 4 do
3741: LD_ADDR_VAR 0 2
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_INT 4
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3786
// begin InitHc ;
3757: CALL_OW 19
// hc_class := class_apeman ;
3761: LD_ADDR_OWVAR 28
3765: PUSH
3766: LD_INT 12
3768: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
3769: CALL_OW 44
3773: PPUSH
3774: LD_INT 13
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// end ;
3784: GO 3754
3786: POP
3787: POP
// end ; end_of_file
3788: LD_VAR 0 1
3792: RET
// export Kurt , Kozlov , Friend ; export powellBomb ; export function PrepareLegion ; var i , side , un , tmp ; begin
3793: LD_INT 0
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
// side := 8 ;
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: LD_INT 8
3807: ST_TO_ADDR
// uc_side := side ;
3808: LD_ADDR_OWVAR 20
3812: PUSH
3813: LD_VAR 0 3
3817: ST_TO_ADDR
// uc_nation := 2 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 2
3825: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
3826: LD_ADDR_VAR 0 2
3830: PUSH
3831: LD_INT 22
3833: PUSH
3834: LD_VAR 0 3
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 21
3845: PUSH
3846: LD_INT 3
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: PUSH
3862: FOR_IN
3863: IFFALSE 3879
// SetBLevel ( i , 10 ) ;
3865: LD_VAR 0 2
3869: PPUSH
3870: LD_INT 10
3872: PPUSH
3873: CALL_OW 241
3877: GO 3862
3879: POP
3880: POP
// if KurtStatus then
3881: LD_EXP 3
3885: IFFALSE 3908
// Kurt := PrepareUnit ( Kurt , false ,  ) else
3887: LD_ADDR_EXP 57
3891: PUSH
3892: LD_STRING Kurt
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: LD_STRING 
3900: PPUSH
3901: CALL 59586 0 3
3905: ST_TO_ADDR
3906: GO 3930
// Kurt := PrepareUnit ( AltKurt , ( not debug ) ,  ) ;
3908: LD_ADDR_EXP 57
3912: PUSH
3913: LD_STRING AltKurt
3915: PPUSH
3916: LD_EXP 1
3920: NOT
3921: PPUSH
3922: LD_STRING 
3924: PPUSH
3925: CALL 59586 0 3
3929: ST_TO_ADDR
// if not Kurt then
3930: LD_EXP 57
3934: NOT
3935: IFFALSE 3961
// begin InitHc ;
3937: CALL_OW 19
// PrepareSoldier ( sex_male , 10 ) ;
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 10
3946: PPUSH
3947: CALL_OW 381
// Kurt := CreateHuman ;
3951: LD_ADDR_EXP 57
3955: PUSH
3956: CALL_OW 44
3960: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Kurt , ar_depot1 ) ;
3961: LD_EXP 57
3965: PPUSH
3966: LD_INT 324
3968: PPUSH
3969: CALL_OW 52
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
3973: LD_ADDR_EXP 58
3977: PUSH
3978: LD_STRING Kozlov
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: LD_STRING 
3986: PPUSH
3987: CALL 59586 0 3
3991: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
3992: LD_EXP 58
3996: PPUSH
3997: LD_INT 22
3999: PUSH
4000: LD_INT 8
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: LD_INT 23
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 30
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL_OW 52
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
4045: LD_ADDR_VAR 0 5
4049: PUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 3
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 30
4064: PUSH
4065: LD_INT 32
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 58
4074: PUSH
4075: EMPTY
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: PPUSH
4083: CALL_OW 69
4087: ST_TO_ADDR
// for i = 1 to 10 do
4088: LD_ADDR_VAR 0 2
4092: PUSH
4093: DOUBLE
4094: LD_INT 1
4096: DEC
4097: ST_TO_ADDR
4098: LD_INT 10
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4174
// begin uc_nation := nation_nature ;
4104: LD_ADDR_OWVAR 21
4108: PUSH
4109: LD_INT 0
4111: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
4112: LD_ADDR_OWVAR 28
4116: PUSH
4117: LD_INT 15
4119: ST_TO_ADDR
// hc_gallery :=  ;
4120: LD_ADDR_OWVAR 33
4124: PUSH
4125: LD_STRING 
4127: ST_TO_ADDR
// hc_name :=  ;
4128: LD_ADDR_OWVAR 26
4132: PUSH
4133: LD_STRING 
4135: ST_TO_ADDR
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 4
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
4146: LD_VAR 0 4
4150: PPUSH
4151: LD_VAR 0 5
4155: PUSH
4156: LD_VAR 0 5
4160: PUSH
4161: LD_VAR 0 2
4165: MINUS
4166: ARRAY
4167: PPUSH
4168: CALL_OW 52
// end ;
4172: GO 4101
4174: POP
4175: POP
// tmp := CreateCharacterSet ( 12_kurt_squad ) ;
4176: LD_ADDR_VAR 0 5
4180: PUSH
4181: LD_STRING 12_kurt_squad
4183: PPUSH
4184: CALL_OW 31
4188: ST_TO_ADDR
// if tmp then
4189: LD_VAR 0 5
4193: IFFALSE 4227
// for i in tmp do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: LD_VAR 0 5
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4225
// PlaceUnitArea ( i , legionBaseArea , false ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 49
4223: GO 4205
4225: POP
4226: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 12 , 6 , 6 , 8 ] ) ;
4227: LD_INT 324
4229: PPUSH
4230: LD_INT 5
4232: PPUSH
4233: LD_STRING 
4235: PPUSH
4236: LD_INT 8
4238: PUSH
4239: LD_INT 9
4241: PUSH
4242: LD_INT 10
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: PUSH
4250: LD_OWVAR 67
4254: ARRAY
4255: PPUSH
4256: LD_INT 3000
4258: PUSH
4259: LD_INT 500
4261: PUSH
4262: LD_INT 150
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: PPUSH
4270: LD_INT 12
4272: PUSH
4273: LD_INT 6
4275: PUSH
4276: LD_INT 6
4278: PUSH
4279: LD_INT 8
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: PPUSH
4288: CALL 69628 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Kurt ) ;
4292: LD_ADDR_EXP 99
4296: PUSH
4297: LD_EXP 99
4301: PPUSH
4302: LD_INT 3
4304: PPUSH
4305: LD_INT 22
4307: PUSH
4308: LD_VAR 0 3
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 23
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 3
4329: PUSH
4330: LD_INT 21
4332: PUSH
4333: LD_INT 2
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: PUSH
4354: LD_EXP 57
4358: DIFF
4359: PPUSH
4360: CALL_OW 1
4364: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
4365: LD_INT 1
4367: PPUSH
4368: LD_INT 7
4370: PPUSH
4371: CALL_OW 383
// Friend := CreateHuman ;
4375: LD_ADDR_EXP 59
4379: PUSH
4380: CALL_OW 44
4384: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_selfpropelled_bomb , 100 ) ;
4385: LD_INT 14
4387: PPUSH
4388: LD_INT 3
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: LD_INT 29
4396: PPUSH
4397: LD_INT 100
4399: PPUSH
4400: CALL 66219 0 5
// powellBomb := CreateVehicle ;
4404: LD_ADDR_EXP 60
4408: PUSH
4409: CALL_OW 45
4413: ST_TO_ADDR
// PlaceUnitXY ( powellBomb , 90 , 51 , false ) ;
4414: LD_EXP 60
4418: PPUSH
4419: LD_INT 90
4421: PPUSH
4422: LD_INT 51
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL_OW 48
// end ;
4432: LD_VAR 0 1
4436: RET
// export function RebuildKozlovFactory ; var fac , lab ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
4441: PPUSH
// if IsLive ( kozlov_fac ) then
4442: LD_INT 332
4444: PPUSH
4445: CALL_OW 300
4449: IFFALSE 4453
// exit ;
4451: GO 5020
// ComExitBuilding ( Kozlov ) ;
4453: LD_EXP 58
4457: PPUSH
4458: CALL_OW 122
// if GetClass ( Kozlov ) <> 2 then
4462: LD_EXP 58
4466: PPUSH
4467: CALL_OW 257
4471: PUSH
4472: LD_INT 2
4474: NONEQUAL
4475: IFFALSE 4510
// begin AddComEnterUnit ( Kozlov , ar_depot1 ) ;
4477: LD_EXP 58
4481: PPUSH
4482: LD_INT 324
4484: PPUSH
4485: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_engineer ) ;
4489: LD_EXP 58
4493: PPUSH
4494: LD_INT 2
4496: PPUSH
4497: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
4501: LD_EXP 58
4505: PPUSH
4506: CALL_OW 182
// end ; AddComBuild ( Kozlov , b_workshop , 93 , 32 , 3 ) ;
4510: LD_EXP 58
4514: PPUSH
4515: LD_INT 2
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 32
4523: PPUSH
4524: LD_INT 3
4526: PPUSH
4527: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4531: LD_INT 35
4533: PPUSH
4534: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) ;
4538: LD_INT 22
4540: PUSH
4541: LD_INT 8
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 30
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 23
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 57
4570: PUSH
4571: EMPTY
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: PPUSH
4580: CALL_OW 69
4584: IFFALSE 4531
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) [ 1 ] ;
4586: LD_ADDR_VAR 0 2
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 8
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 30
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 23
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 57
4623: PUSH
4624: EMPTY
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] ] ) then
4642: LD_INT 22
4644: PUSH
4645: LD_INT 8
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 23
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 21
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: PPUSH
4677: CALL_OW 69
4681: NOT
4682: IFFALSE 4760
// begin AddComBuild ( Kozlov , b_ext_siberium , 97 , 36 , 5 ) ;
4684: LD_EXP 58
4688: PPUSH
4689: LD_INT 21
4691: PPUSH
4692: LD_INT 97
4694: PPUSH
4695: LD_INT 36
4697: PPUSH
4698: LD_INT 5
4700: PPUSH
4701: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4705: LD_INT 35
4707: PPUSH
4708: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] , [ f_constructed ] ] ) ;
4712: LD_INT 22
4714: PUSH
4715: LD_INT 8
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 23
4724: PUSH
4725: LD_INT 3
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 21
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 57
4744: PUSH
4745: EMPTY
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: PPUSH
4754: CALL_OW 69
4758: IFFALSE 4705
// end ; if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] ] ) then
4760: LD_INT 22
4762: PUSH
4763: LD_INT 8
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 23
4772: PUSH
4773: LD_INT 3
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 30
4782: PUSH
4783: LD_INT 18
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: PPUSH
4795: CALL_OW 69
4799: NOT
4800: IFFALSE 4878
// begin AddComBuild ( Kozlov , b_ext_rocket , 89 , 32 , 1 ) ;
4802: LD_EXP 58
4806: PPUSH
4807: LD_INT 18
4809: PPUSH
4810: LD_INT 89
4812: PPUSH
4813: LD_INT 32
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
4823: LD_INT 35
4825: PPUSH
4826: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] , [ f_constructed ] ] ) ;
4830: LD_INT 22
4832: PUSH
4833: LD_INT 8
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 23
4842: PUSH
4843: LD_INT 3
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 30
4852: PUSH
4853: LD_INT 18
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 57
4862: PUSH
4863: EMPTY
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PPUSH
4872: CALL_OW 69
4876: IFFALSE 4823
// end ; lab := kozlov_lab ;
4878: LD_ADDR_VAR 0 3
4882: PUSH
4883: LD_INT 336
4885: ST_TO_ADDR
// if not lab then
4886: LD_VAR 0 3
4890: NOT
4891: IFFALSE 4895
// exit ;
4893: GO 5020
// AddComEnterUnit ( Kozlov , lab [ 1 ] ) ;
4895: LD_EXP 58
4899: PPUSH
4900: LD_VAR 0 3
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: CALL_OW 180
// AddComChangeProfession ( Kozlov , 4 ) ;
4913: LD_EXP 58
4917: PPUSH
4918: LD_INT 4
4920: PPUSH
4921: CALL_OW 183
// ComResearch ( lab [ 1 ] , tech_sibFiss ) ;
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 1
4932: ARRAY
4933: PPUSH
4934: LD_INT 25
4936: PPUSH
4937: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
4941: LD_INT 35
4943: PPUSH
4944: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
4948: LD_INT 25
4950: PPUSH
4951: LD_INT 8
4953: PPUSH
4954: CALL_OW 321
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: IFFALSE 4941
// ComExitBuilding ( Kozlov ) ;
4964: LD_EXP 58
4968: PPUSH
4969: CALL_OW 122
// AddComEnterUnit ( Kozlov , fac ) ;
4973: LD_EXP 58
4977: PPUSH
4978: LD_VAR 0 2
4982: PPUSH
4983: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
4987: LD_EXP 58
4991: PPUSH
4992: LD_INT 3
4994: PPUSH
4995: CALL_OW 183
// ComConstruct ( fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
4999: LD_VAR 0 2
5003: PPUSH
5004: LD_INT 23
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 48
5015: PPUSH
5016: CALL_OW 125
// end ;
5020: LD_VAR 0 1
5024: RET
// every 7 7$30 trigger not legionDestroyed and missionStage >= 6 do var i , tmp , target ;
5025: LD_EXP 22
5029: NOT
5030: PUSH
5031: LD_EXP 15
5035: PUSH
5036: LD_INT 6
5038: GREATEREQUAL
5039: AND
5040: IFFALSE 5724
5042: GO 5044
5044: DISABLE
5045: LD_INT 0
5047: PPUSH
5048: PPUSH
5049: PPUSH
// begin enable ;
5050: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
5051: LD_INT 22
5053: PUSH
5054: LD_INT 8
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 23
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: LD_INT 30
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: PPUSH
5086: CALL_OW 69
5090: NOT
5091: IFFALSE 5095
// exit ;
5093: GO 5724
// if Prob ( 40 ) then
5095: LD_INT 40
5097: PPUSH
5098: CALL_OW 13
5102: IFFALSE 5229
// begin MC_InsertProduceList ( 3 , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
5104: LD_INT 3
5106: PPUSH
5107: LD_INT 13
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: LD_INT 28
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 13
5127: PUSH
5128: LD_INT 1
5130: PUSH
5131: LD_INT 2
5133: PUSH
5134: LD_INT 28
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 13
5145: PUSH
5146: LD_INT 1
5148: PUSH
5149: LD_INT 2
5151: PUSH
5152: LD_INT 28
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 13
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: LD_INT 2
5169: PUSH
5170: LD_INT 28
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 13
5181: PUSH
5182: LD_INT 1
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: LD_INT 28
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: LD_INT 26
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PPUSH
5223: CALL 53679 0 2
// end else
5227: GO 5420
// begin MC_InsertProduceList ( 3 , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
5229: LD_INT 3
5231: PPUSH
5232: LD_INT 13
5234: PUSH
5235: LD_INT 1
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: LD_INT 27
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 26
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: LD_OWVAR 67
5259: ARRAY
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 13
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: LD_INT 27
5278: PUSH
5279: LD_INT 26
5281: PUSH
5282: LD_INT 26
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: PUSH
5290: LD_OWVAR 67
5294: ARRAY
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 13
5304: PUSH
5305: LD_INT 1
5307: PUSH
5308: LD_INT 2
5310: PUSH
5311: LD_INT 26
5313: PUSH
5314: LD_INT 26
5316: PUSH
5317: LD_INT 29
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: LD_OWVAR 67
5329: ARRAY
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_INT 13
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 2
5345: PUSH
5346: LD_INT 26
5348: PUSH
5349: LD_INT 29
5351: PUSH
5352: LD_INT 29
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: PUSH
5360: LD_OWVAR 67
5364: ARRAY
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 13
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: LD_INT 29
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 13
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 26
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL 53679 0 2
// end ; repeat wait ( 0 0$1 ) ;
5420: LD_INT 35
5422: PPUSH
5423: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
5427: LD_INT 3
5429: PPUSH
5430: LD_INT 1
5432: PPUSH
5433: CALL 55092 0 2
5437: PUSH
5438: LD_INT 6
5440: GREATEREQUAL
5441: IFFALSE 5420
// tmp := MC_GetVehicles ( 3 , true ) ;
5443: LD_ADDR_VAR 0 2
5447: PUSH
5448: LD_INT 3
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL 55092 0 2
5458: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
5459: LD_ADDR_EXP 118
5463: PUSH
5464: LD_EXP 118
5468: PPUSH
5469: LD_INT 3
5471: PPUSH
5472: LD_EXP 118
5476: PUSH
5477: LD_INT 3
5479: ARRAY
5480: PUSH
5481: LD_VAR 0 2
5485: DIFF
5486: PPUSH
5487: CALL_OW 1
5491: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
5492: LD_ADDR_VAR 0 3
5496: PUSH
5497: LD_INT 0
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 12
5507: ST_TO_ADDR
// if target then
5508: LD_VAR 0 3
5512: IFFALSE 5571
// begin repeat ComMoveXY ( tmp , 90 , 75 ) ;
5514: LD_VAR 0 2
5518: PPUSH
5519: LD_INT 90
5521: PPUSH
5522: LD_INT 75
5524: PPUSH
5525: CALL_OW 111
// wait ( 0 0$1 ) ;
5529: LD_INT 35
5531: PPUSH
5532: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 90 , 75 , 6 ] ) > 2 ;
5536: LD_VAR 0 2
5540: PPUSH
5541: LD_INT 92
5543: PUSH
5544: LD_INT 90
5546: PUSH
5547: LD_INT 75
5549: PUSH
5550: LD_INT 6
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 72
5563: PUSH
5564: LD_INT 2
5566: GREATER
5567: IFFALSE 5514
// end else
5569: GO 5626
// begin repeat ComMoveXY ( tmp , 128 , 11 ) ;
5571: LD_VAR 0 2
5575: PPUSH
5576: LD_INT 128
5578: PPUSH
5579: LD_INT 11
5581: PPUSH
5582: CALL_OW 111
// wait ( 0 0$1 ) ;
5586: LD_INT 35
5588: PPUSH
5589: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 128 , 11 , 6 ] ) > 2 ;
5593: LD_VAR 0 2
5597: PPUSH
5598: LD_INT 92
5600: PUSH
5601: LD_INT 128
5603: PUSH
5604: LD_INT 11
5606: PUSH
5607: LD_INT 6
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PPUSH
5616: CALL_OW 72
5620: PUSH
5621: LD_INT 2
5623: GREATER
5624: IFFALSE 5571
// end ; repeat wait ( 0 0$1 ) ;
5626: LD_INT 35
5628: PPUSH
5629: CALL_OW 67
// for i in tmp do
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_VAR 0 2
5642: PUSH
5643: FOR_IN
5644: IFFALSE 5715
// if GetLives ( i ) > 251 then
5646: LD_VAR 0 1
5650: PPUSH
5651: CALL_OW 256
5655: PUSH
5656: LD_INT 251
5658: GREATER
5659: IFFALSE 5697
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
5661: LD_VAR 0 1
5665: PPUSH
5666: LD_INT 81
5668: PUSH
5669: LD_INT 8
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PPUSH
5676: CALL_OW 69
5680: PPUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 74
5690: PPUSH
5691: CALL_OW 115
5695: GO 5713
// tmp := tmp diff i ;
5697: LD_ADDR_VAR 0 2
5701: PUSH
5702: LD_VAR 0 2
5706: PUSH
5707: LD_VAR 0 1
5711: DIFF
5712: ST_TO_ADDR
5713: GO 5643
5715: POP
5716: POP
// until not tmp ;
5717: LD_VAR 0 2
5721: NOT
5722: IFFALSE 5626
// end ; end_of_file
5724: PPOPN 3
5726: END
// export Platonov , Kovalyuk , Bystrov , Yakotich , Gleb , Bierezov ; export Vsevolod , sewiVeh ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , b , teleport ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
// side := 3 ;
5738: LD_ADDR_VAR 0 6
5742: PUSH
5743: LD_INT 3
5745: ST_TO_ADDR
// uc_side := side ;
5746: LD_ADDR_OWVAR 20
5750: PUSH
5751: LD_VAR 0 6
5755: ST_TO_ADDR
// uc_nation := 3 ;
5756: LD_ADDR_OWVAR 21
5760: PUSH
5761: LD_INT 3
5763: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
5764: LD_ADDR_VAR 0 2
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_VAR 0 6
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 21
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5817
// SetBLevel ( i , 10 ) ;
5803: LD_VAR 0 2
5807: PPUSH
5808: LD_INT 10
5810: PPUSH
5811: CALL_OW 241
5815: GO 5800
5817: POP
5818: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
5819: LD_ADDR_VAR 0 9
5823: PUSH
5824: LD_INT 22
5826: PUSH
5827: LD_VAR 0 6
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: LD_INT 30
5838: PUSH
5839: LD_INT 34
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 69
5854: ST_TO_ADDR
// if teleport then
5855: LD_VAR 0 9
5859: IFFALSE 5880
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
5861: LD_VAR 0 9
5865: PUSH
5866: LD_INT 1
5868: ARRAY
5869: PPUSH
5870: LD_INT 123
5872: PPUSH
5873: LD_INT 122
5875: PPUSH
5876: CALL_OW 243
// Platonov := NewCharacter ( Platonov ) ;
5880: LD_ADDR_EXP 61
5884: PUSH
5885: LD_STRING Platonov
5887: PPUSH
5888: CALL_OW 25
5892: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
5893: LD_ADDR_EXP 62
5897: PUSH
5898: LD_STRING Kovalyuk
5900: PPUSH
5901: CALL_OW 25
5905: ST_TO_ADDR
// Yakotich := NewCharacter ( Yakotich ) ;
5906: LD_ADDR_EXP 64
5910: PUSH
5911: LD_STRING Yakotich
5913: PPUSH
5914: CALL_OW 25
5918: ST_TO_ADDR
// Bystrov := NewCharacter ( Bystrov ) ;
5919: LD_ADDR_EXP 63
5923: PUSH
5924: LD_STRING Bystrov
5926: PPUSH
5927: CALL_OW 25
5931: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
5932: LD_ADDR_EXP 65
5936: PUSH
5937: LD_STRING Gleb
5939: PPUSH
5940: CALL_OW 25
5944: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
5945: LD_STRING 03_Cornel
5947: PPUSH
5948: CALL_OW 28
5952: IFFALSE 6000
// begin Bierezov := NewCharacter ( Mikhail ) ;
5954: LD_ADDR_EXP 66
5958: PUSH
5959: LD_STRING Mikhail
5961: PPUSH
5962: CALL_OW 25
5966: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
5967: LD_EXP 66
5971: PPUSH
5972: LD_INT 197
5974: PPUSH
5975: LD_INT 111
5977: PPUSH
5978: LD_INT 9
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
5988: LD_EXP 66
5992: PPUSH
5993: LD_INT 3
5995: PPUSH
5996: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
6000: LD_EXP 61
6004: PPUSH
6005: LD_INT 126
6007: PPUSH
6008: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , ru_fac1 ) ;
6012: LD_EXP 62
6016: PPUSH
6017: LD_INT 134
6019: PPUSH
6020: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
6024: LD_EXP 64
6028: PPUSH
6029: LD_INT 197
6031: PPUSH
6032: LD_INT 111
6034: PPUSH
6035: LD_INT 9
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 50
// PlaceUnitXYR ( Bystrov , 197 , 111 , 9 , false ) ;
6045: LD_EXP 63
6049: PPUSH
6050: LD_INT 197
6052: PPUSH
6053: LD_INT 111
6055: PPUSH
6056: LD_INT 9
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
6066: LD_EXP 65
6070: PPUSH
6071: LD_INT 197
6073: PPUSH
6074: LD_INT 111
6076: PPUSH
6077: LD_INT 9
6079: PPUSH
6080: LD_INT 0
6082: PPUSH
6083: CALL_OW 50
// PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 ] [ Difficulty ] , [ 10000 , 1000 , 300 ] , [ - 1 , 8 , 13 , 8 ] ) ;
6087: LD_INT 126
6089: PPUSH
6090: LD_INT 4
6092: PPUSH
6093: LD_STRING zhukov
6095: PPUSH
6096: LD_INT 9
6098: PUSH
6099: LD_INT 10
6101: PUSH
6102: LD_INT 10
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_OWVAR 67
6114: ARRAY
6115: PPUSH
6116: LD_INT 10000
6118: PUSH
6119: LD_INT 1000
6121: PUSH
6122: LD_INT 300
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: LD_INT 1
6132: NEG
6133: PUSH
6134: LD_INT 8
6136: PUSH
6137: LD_INT 13
6139: PUSH
6140: LD_INT 8
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL 69628 0 6
// base := GetBase ( ru_depot2 ) ;
6153: LD_ADDR_VAR 0 4
6157: PUSH
6158: LD_INT 267
6160: PPUSH
6161: CALL_OW 274
6165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 2000 ) ;
6166: LD_VAR 0 4
6170: PPUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2000
6176: PPUSH
6177: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
6181: LD_VAR 0 4
6185: PPUSH
6186: LD_INT 2
6188: PPUSH
6189: LD_INT 200
6191: PPUSH
6192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
6196: LD_VAR 0 4
6200: PPUSH
6201: LD_INT 3
6203: PPUSH
6204: LD_INT 200
6206: PPUSH
6207: CALL_OW 277
// mc_bases := Replace ( mc_bases , 2 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Platonov ) ;
6211: LD_ADDR_EXP 99
6215: PUSH
6216: LD_EXP 99
6220: PPUSH
6221: LD_INT 2
6223: PPUSH
6224: LD_INT 22
6226: PUSH
6227: LD_VAR 0 6
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: LD_INT 21
6241: PUSH
6242: LD_INT 2
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PPUSH
6257: CALL_OW 69
6261: PUSH
6262: LD_EXP 61
6266: DIFF
6267: PPUSH
6268: CALL_OW 1
6272: ST_TO_ADDR
// behemoths := [ ] ;
6273: LD_ADDR_EXP 69
6277: PUSH
6278: EMPTY
6279: ST_TO_ADDR
// behemothBuilders := [ ] ;
6280: LD_ADDR_EXP 70
6284: PUSH
6285: EMPTY
6286: ST_TO_ADDR
// if Kovalyuk then
6287: LD_EXP 62
6291: IFFALSE 6313
// behemothBuilders := Join ( behemothBuilders , Kovalyuk ) ;
6293: LD_ADDR_EXP 70
6297: PUSH
6298: LD_EXP 70
6302: PPUSH
6303: LD_EXP 62
6307: PPUSH
6308: CALL 101902 0 2
6312: ST_TO_ADDR
// j := 3 ;
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: LD_INT 3
6320: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) diff Kovalyuk do
6321: LD_ADDR_VAR 0 2
6325: PUSH
6326: LD_INT 22
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 3
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 69
6354: PUSH
6355: LD_EXP 62
6359: DIFF
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6412
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
6364: LD_ADDR_EXP 70
6368: PUSH
6369: LD_EXP 70
6373: PPUSH
6374: LD_VAR 0 2
6378: PPUSH
6379: CALL 101902 0 2
6383: ST_TO_ADDR
// j := j - 1 ;
6384: LD_ADDR_VAR 0 3
6388: PUSH
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: MINUS
6397: ST_TO_ADDR
// if j = 0 then
6398: LD_VAR 0 3
6402: PUSH
6403: LD_INT 0
6405: EQUAL
6406: IFFALSE 6410
// break ;
6408: GO 6412
// end ;
6410: GO 6361
6412: POP
6413: POP
// end ;
6414: LD_VAR 0 1
6418: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
6419: LD_INT 0
6421: PPUSH
6422: PPUSH
6423: PPUSH
6424: PPUSH
6425: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_INT 209
6433: PUSH
6434: LD_INT 149
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 219
6443: PUSH
6444: LD_INT 154
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 223
6453: PUSH
6454: LD_INT 149
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 232
6463: PUSH
6464: LD_INT 155
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
// if not behemothBuilders then
6477: LD_EXP 70
6481: NOT
6482: IFFALSE 6486
// exit ;
6484: GO 6590
// j := 1 ;
6486: LD_ADDR_VAR 0 3
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// for i in behemothBuilders do
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: LD_EXP 70
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6588
// begin if IsInUnit ( i ) then
6507: LD_VAR 0 2
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
6527: LD_VAR 0 2
6531: PPUSH
6532: LD_INT 37
6534: PPUSH
6535: LD_VAR 0 4
6539: PUSH
6540: LD_VAR 0 3
6544: ARRAY
6545: PUSH
6546: LD_INT 1
6548: ARRAY
6549: PPUSH
6550: LD_VAR 0 4
6554: PUSH
6555: LD_VAR 0 3
6559: ARRAY
6560: PUSH
6561: LD_INT 2
6563: ARRAY
6564: PPUSH
6565: LD_INT 0
6567: PPUSH
6568: CALL_OW 230
// j := j + 1 ;
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 1
6584: PLUS
6585: ST_TO_ADDR
// end ;
6586: GO 6504
6588: POP
6589: POP
// end ;
6590: LD_VAR 0 1
6594: RET
// every 0 0$1 trigger FilterUnitsInArea ( behemothParking , [ f_btype , b_behemoth ] ) do
6595: LD_INT 24
6597: PPUSH
6598: LD_INT 30
6600: PUSH
6601: LD_INT 37
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 70
6612: IFFALSE 6625
6614: GO 6616
6616: DISABLE
// behemothUnderConstruct := true ;
6617: LD_ADDR_EXP 26
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
6625: END
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
6626: LD_INT 3
6628: PPUSH
6629: CALL 101950 0 1
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 3
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 30
6646: PUSH
6647: LD_INT 37
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: NOT
6663: AND
6664: IFFALSE 6850
6666: GO 6668
6668: DISABLE
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
// begin enable ;
6673: ENABLE
// tmp := GetBehemoths ( 3 ) ;
6674: LD_ADDR_VAR 0 2
6678: PUSH
6679: LD_INT 3
6681: PPUSH
6682: CALL 101950 0 1
6686: ST_TO_ADDR
// for i in tmp do
6687: LD_ADDR_VAR 0 1
6691: PUSH
6692: LD_VAR 0 2
6696: PUSH
6697: FOR_IN
6698: IFFALSE 6848
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
6700: LD_VAR 0 1
6704: PPUSH
6705: LD_INT 9
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 110
6722: PUSH
6723: LD_INT 2
6725: EQUAL
6726: NOT
6727: AND
6728: IFFALSE 6742
// SetTag ( i , 2 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
6742: LD_INT 81
6744: PUSH
6745: LD_INT 3
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 91
6754: PUSH
6755: LD_VAR 0 1
6759: PUSH
6760: LD_INT 12
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 69
6776: NOT
6777: PUSH
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 110
6787: PUSH
6788: LD_INT 2
6790: EQUAL
6791: NOT
6792: AND
6793: IFFALSE 6812
// ComAgressiveMove ( i , 64 , 93 ) else
6795: LD_VAR 0 1
6799: PPUSH
6800: LD_INT 64
6802: PPUSH
6803: LD_INT 93
6805: PPUSH
6806: CALL_OW 114
6810: GO 6846
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
6812: LD_VAR 0 1
6816: PPUSH
6817: LD_INT 81
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: PPUSH
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 74
6841: PPUSH
6842: CALL_OW 115
// end ;
6846: GO 6697
6848: POP
6849: POP
// end ;
6850: PPOPN 2
6852: END
// export function PrepareRussianAttack ( strength ) ; var i ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
// result := [ ] ;
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: EMPTY
6863: ST_TO_ADDR
// uc_side := 6 ;
6864: LD_ADDR_OWVAR 20
6868: PUSH
6869: LD_INT 6
6871: ST_TO_ADDR
// uc_nation := 3 ;
6872: LD_ADDR_OWVAR 21
6876: PUSH
6877: LD_INT 3
6879: ST_TO_ADDR
// case strength of 1 :
6880: LD_VAR 0 1
6884: PUSH
6885: LD_INT 1
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6893
6891: GO 7031
6893: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_INT 4
6906: PUSH
6907: LD_INT 5
6909: PUSH
6910: LD_INT 6
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_OWVAR 67
6922: ARRAY
6923: PUSH
6924: FOR_TO
6925: IFFALSE 7027
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked ] [ i mod 2 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] , 80 ) ;
6927: LD_INT 22
6929: PUSH
6930: LD_INT 24
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_VAR 0 3
6941: PUSH
6942: LD_INT 2
6944: MOD
6945: PUSH
6946: LD_INT 1
6948: PLUS
6949: ARRAY
6950: PPUSH
6951: LD_INT 1
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 2
6966: PPUSH
6967: CALL_OW 12
6971: ARRAY
6972: PPUSH
6973: LD_INT 3
6975: PPUSH
6976: LD_INT 43
6978: PUSH
6979: LD_INT 44
6981: PUSH
6982: LD_INT 45
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 1
6992: PPUSH
6993: LD_INT 3
6995: PPUSH
6996: CALL_OW 12
7000: ARRAY
7001: PPUSH
7002: LD_INT 80
7004: PPUSH
7005: CALL 66219 0 5
// result := result union CreateVehicle ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_VAR 0 2
7018: PUSH
7019: CALL_OW 45
7023: UNION
7024: ST_TO_ADDR
// end ;
7025: GO 6924
7027: POP
7028: POP
// end ; 2 :
7029: GO 7935
7031: LD_INT 2
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7195
7039: POP
// begin for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_INT 6
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 7
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_OWVAR 67
7068: ARRAY
7069: PUSH
7070: FOR_TO
7071: IFFALSE 7191
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
7073: LD_INT 22
7075: PUSH
7076: LD_INT 24
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: PUSH
7087: LD_VAR 0 3
7091: PUSH
7092: LD_INT 3
7094: MOD
7095: PUSH
7096: LD_INT 1
7098: PLUS
7099: ARRAY
7100: PPUSH
7101: LD_INT 1
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 2
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: PPUSH
7123: LD_INT 3
7125: PPUSH
7126: LD_INT 43
7128: PUSH
7129: LD_INT 44
7131: PUSH
7132: LD_INT 45
7134: PUSH
7135: LD_INT 44
7137: PUSH
7138: LD_INT 46
7140: PUSH
7141: LD_INT 46
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: LD_VAR 0 3
7156: PUSH
7157: LD_INT 6
7159: MOD
7160: PUSH
7161: LD_INT 1
7163: PLUS
7164: ARRAY
7165: PPUSH
7166: LD_INT 80
7168: PPUSH
7169: CALL 66219 0 5
// result := result union CreateVehicle ;
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: LD_VAR 0 2
7182: PUSH
7183: CALL_OW 45
7187: UNION
7188: ST_TO_ADDR
// end ;
7189: GO 7070
7191: POP
7192: POP
// end ; 3 :
7193: GO 7935
7195: LD_INT 3
7197: DOUBLE
7198: EQUAL
7199: IFTRUE 7203
7201: GO 7359
7203: POP
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: DOUBLE
7210: LD_INT 1
7212: DEC
7213: ST_TO_ADDR
7214: LD_INT 6
7216: PUSH
7217: LD_INT 7
7219: PUSH
7220: LD_INT 8
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: PUSH
7228: LD_OWVAR 67
7232: ARRAY
7233: PUSH
7234: FOR_TO
7235: IFFALSE 7355
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
7237: LD_INT 22
7239: PUSH
7240: LD_INT 24
7242: PUSH
7243: LD_INT 24
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PUSH
7251: LD_VAR 0 3
7255: PUSH
7256: LD_INT 3
7258: MOD
7259: PUSH
7260: LD_INT 1
7262: PLUS
7263: ARRAY
7264: PPUSH
7265: LD_INT 1
7267: PUSH
7268: LD_INT 3
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 1
7277: PPUSH
7278: LD_INT 2
7280: PPUSH
7281: CALL_OW 12
7285: ARRAY
7286: PPUSH
7287: LD_INT 3
7289: PPUSH
7290: LD_INT 43
7292: PUSH
7293: LD_INT 47
7295: PUSH
7296: LD_INT 45
7298: PUSH
7299: LD_INT 45
7301: PUSH
7302: LD_INT 46
7304: PUSH
7305: LD_INT 46
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: LD_VAR 0 3
7320: PUSH
7321: LD_INT 6
7323: MOD
7324: PUSH
7325: LD_INT 1
7327: PLUS
7328: ARRAY
7329: PPUSH
7330: LD_INT 80
7332: PPUSH
7333: CALL 66219 0 5
// result := result union CreateVehicle ;
7337: LD_ADDR_VAR 0 2
7341: PUSH
7342: LD_VAR 0 2
7346: PUSH
7347: CALL_OW 45
7351: UNION
7352: ST_TO_ADDR
// end ;
7353: GO 7234
7355: POP
7356: POP
// end ; 4 :
7357: GO 7935
7359: LD_INT 4
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7934
7367: POP
// begin uc_nation := 3 ;
7368: LD_ADDR_OWVAR 21
7372: PUSH
7373: LD_INT 3
7375: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
7376: LD_ADDR_VAR 0 3
7380: PUSH
7381: DOUBLE
7382: LD_INT 1
7384: DEC
7385: ST_TO_ADDR
7386: LD_INT 7
7388: PUSH
7389: LD_INT 8
7391: PUSH
7392: LD_INT 9
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_OWVAR 67
7404: ARRAY
7405: PUSH
7406: FOR_TO
7407: IFFALSE 7527
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_rocket_launcher , ru_rocket , ru_rocket , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ i mod 6 + 1 ] , 80 ) ;
7409: LD_INT 22
7411: PUSH
7412: LD_INT 24
7414: PUSH
7415: LD_INT 24
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 3
7430: MOD
7431: PUSH
7432: LD_INT 1
7434: PLUS
7435: ARRAY
7436: PPUSH
7437: LD_INT 1
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: LD_INT 1
7449: PPUSH
7450: LD_INT 2
7452: PPUSH
7453: CALL_OW 12
7457: ARRAY
7458: PPUSH
7459: LD_INT 3
7461: PPUSH
7462: LD_INT 45
7464: PUSH
7465: LD_INT 47
7467: PUSH
7468: LD_INT 47
7470: PUSH
7471: LD_INT 45
7473: PUSH
7474: LD_INT 46
7476: PUSH
7477: LD_INT 46
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 6
7495: MOD
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ARRAY
7501: PPUSH
7502: LD_INT 80
7504: PPUSH
7505: CALL 66219 0 5
// result := result union CreateVehicle ;
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_VAR 0 2
7518: PUSH
7519: CALL_OW 45
7523: UNION
7524: ST_TO_ADDR
// end ;
7525: GO 7406
7527: POP
7528: POP
// if not KappaStatus then
7529: LD_EXP 2
7533: NOT
7534: IFFALSE 7729
// begin uc_nation := 1 ;
7536: LD_ADDR_OWVAR 21
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// for i = 1 to 3 do
7544: LD_ADDR_VAR 0 3
7548: PUSH
7549: DOUBLE
7550: LD_INT 1
7552: DEC
7553: ST_TO_ADDR
7554: LD_INT 3
7556: PUSH
7557: FOR_TO
7558: IFFALSE 7654
// begin PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 85 ) ;
7560: LD_INT 3
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 1
7572: PPUSH
7573: LD_INT 2
7575: PPUSH
7576: CALL_OW 12
7580: ARRAY
7581: PPUSH
7582: LD_INT 1
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 1
7594: PPUSH
7595: LD_INT 2
7597: PPUSH
7598: CALL_OW 12
7602: ARRAY
7603: PPUSH
7604: LD_INT 3
7606: PPUSH
7607: LD_INT 9
7609: PUSH
7610: LD_INT 7
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 1
7619: PPUSH
7620: LD_INT 2
7622: PPUSH
7623: CALL_OW 12
7627: ARRAY
7628: PPUSH
7629: LD_INT 85
7631: PPUSH
7632: CALL 66219 0 5
// result := result union CreateVehicle ;
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_VAR 0 2
7645: PUSH
7646: CALL_OW 45
7650: UNION
7651: ST_TO_ADDR
// end ;
7652: GO 7557
7654: POP
7655: POP
// if vsevolodFirstAttack then
7656: LD_EXP 24
7660: IFFALSE 7727
// begin vsevolodFirstAttack := false ;
7662: LD_ADDR_EXP 24
7666: PUSH
7667: LD_INT 0
7669: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
7670: LD_INT 5
7672: PPUSH
7673: LD_INT 3
7675: PPUSH
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 6
7681: PPUSH
7682: LD_INT 100
7684: PPUSH
7685: CALL 66219 0 5
// sewiVeh := CreateVehicle ;
7689: LD_ADDR_EXP 68
7693: PUSH
7694: CALL_OW 45
7698: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
7699: LD_EXP 68
7703: PPUSH
7704: LD_INT 1
7706: PPUSH
7707: CALL_OW 242
// result := result union sewiVeh ;
7711: LD_ADDR_VAR 0 2
7715: PUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_EXP 68
7725: UNION
7726: ST_TO_ADDR
// end ; end else
7727: GO 7932
// if vsevolodFirstAttack then
7729: LD_EXP 24
7733: IFFALSE 7932
// begin vsevolodFirstAttack := false ;
7735: LD_ADDR_EXP 24
7739: PUSH
7740: LD_INT 0
7742: ST_TO_ADDR
// uc_nation := 3 ;
7743: LD_ADDR_OWVAR 21
7747: PUSH
7748: LD_INT 3
7750: ST_TO_ADDR
// for i = 1 to 3 do
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: DOUBLE
7757: LD_INT 1
7759: DEC
7760: ST_TO_ADDR
7761: LD_INT 3
7763: PUSH
7764: FOR_TO
7765: IFFALSE 7873
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_rocket_launcher , ru_rocket , ru_rocket ] [ i mod 3 + 1 ] , 80 ) ;
7767: LD_INT 22
7769: PUSH
7770: LD_INT 24
7772: PUSH
7773: LD_INT 24
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 3
7788: MOD
7789: PUSH
7790: LD_INT 1
7792: PLUS
7793: ARRAY
7794: PPUSH
7795: LD_INT 1
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 1
7807: PPUSH
7808: LD_INT 2
7810: PPUSH
7811: CALL_OW 12
7815: ARRAY
7816: PPUSH
7817: LD_INT 3
7819: PPUSH
7820: LD_INT 45
7822: PUSH
7823: LD_INT 47
7825: PUSH
7826: LD_INT 47
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: PUSH
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 3
7841: MOD
7842: PUSH
7843: LD_INT 1
7845: PLUS
7846: ARRAY
7847: PPUSH
7848: LD_INT 80
7850: PPUSH
7851: CALL 66219 0 5
// result := result union CreateVehicle ;
7855: LD_ADDR_VAR 0 2
7859: PUSH
7860: LD_VAR 0 2
7864: PUSH
7865: CALL_OW 45
7869: UNION
7870: ST_TO_ADDR
// end ;
7871: GO 7764
7873: POP
7874: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_rocket , 100 ) ;
7875: LD_INT 24
7877: PPUSH
7878: LD_INT 3
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_INT 47
7886: PPUSH
7887: LD_INT 100
7889: PPUSH
7890: CALL 66219 0 5
// sewiVeh := CreateVehicle ;
7894: LD_ADDR_EXP 68
7898: PUSH
7899: CALL_OW 45
7903: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
7904: LD_EXP 68
7908: PPUSH
7909: LD_INT 1
7911: PPUSH
7912: CALL_OW 242
// result := result union sewiVeh ;
7916: LD_ADDR_VAR 0 2
7920: PUSH
7921: LD_VAR 0 2
7925: PUSH
7926: LD_EXP 68
7930: UNION
7931: ST_TO_ADDR
// end ; end ; end ;
7932: GO 7935
7934: POP
// end ;
7935: LD_VAR 0 2
7939: RET
// every 0 0$30 trigger activeAttacks do var i , tmp , time , areas , strength , xy , x , y ;
7940: LD_EXP 16
7944: IFFALSE 8633
7946: GO 7948
7948: DISABLE
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
7958: PPUSH
// begin areas := [ southSpawn , southWestSpawn ] ;
7959: LD_ADDR_VAR 0 4
7963: PUSH
7964: LD_INT 11
7966: PUSH
7967: LD_INT 12
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: ST_TO_ADDR
// time := [ 4 4$00 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
7974: LD_ADDR_VAR 0 3
7978: PUSH
7979: LD_INT 8400
7981: PUSH
7982: LD_INT 7350
7984: PUSH
7985: LD_INT 6650
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: PUSH
7993: LD_OWVAR 67
7997: ARRAY
7998: ST_TO_ADDR
// xy := [ 60 , 96 ] ;
7999: LD_ADDR_VAR 0 6
8003: PUSH
8004: LD_INT 60
8006: PUSH
8007: LD_INT 96
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: ST_TO_ADDR
// repeat if missionStage = 2 then
8014: LD_EXP 15
8018: PUSH
8019: LD_INT 2
8021: EQUAL
8022: IFFALSE 8033
// wait ( 1 1$30 ) else
8024: LD_INT 3150
8026: PPUSH
8027: CALL_OW 67
8031: GO 8042
// wait ( time ) ;
8033: LD_VAR 0 3
8037: PPUSH
8038: CALL_OW 67
// if missionStage = 6 then
8042: LD_EXP 15
8046: PUSH
8047: LD_INT 6
8049: EQUAL
8050: IFFALSE 8078
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
8052: LD_INT 51
8054: PPUSH
8055: LD_INT 6
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
8065: LD_INT 57
8067: PPUSH
8068: LD_INT 6
8070: PPUSH
8071: LD_INT 2
8073: PPUSH
8074: CALL_OW 322
// end ; if missionStage = 8 then
8078: LD_EXP 15
8082: PUSH
8083: LD_INT 8
8085: EQUAL
8086: IFFALSE 8114
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
8088: LD_INT 52
8090: PPUSH
8091: LD_INT 6
8093: PPUSH
8094: LD_INT 2
8096: PPUSH
8097: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
8101: LD_INT 58
8103: PPUSH
8104: LD_INT 6
8106: PPUSH
8107: LD_INT 2
8109: PPUSH
8110: CALL_OW 322
// end ; if missionStage = 10 then
8114: LD_EXP 15
8118: PUSH
8119: LD_INT 10
8121: EQUAL
8122: IFFALSE 8150
// begin SetTech ( tech_weap3 , 6 , state_researched ) ;
8124: LD_INT 53
8126: PPUSH
8127: LD_INT 6
8129: PPUSH
8130: LD_INT 2
8132: PPUSH
8133: CALL_OW 322
// SetTech ( tech_comp3 , 6 , state_researched ) ;
8137: LD_INT 59
8139: PPUSH
8140: LD_INT 6
8142: PPUSH
8143: LD_INT 2
8145: PPUSH
8146: CALL_OW 322
// end ; if activeAttacks then
8150: LD_EXP 16
8154: IFFALSE 8627
// begin if missionStage = 2 then
8156: LD_EXP 15
8160: PUSH
8161: LD_INT 2
8163: EQUAL
8164: IFFALSE 8174
// strength := 1 ;
8166: LD_ADDR_VAR 0 5
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if missionStage > 2 then
8174: LD_EXP 15
8178: PUSH
8179: LD_INT 2
8181: GREATER
8182: IFFALSE 8192
// strength := 2 ;
8184: LD_ADDR_VAR 0 5
8188: PUSH
8189: LD_INT 2
8191: ST_TO_ADDR
// if missionStage > 6 then
8192: LD_EXP 15
8196: PUSH
8197: LD_INT 6
8199: GREATER
8200: IFFALSE 8210
// strength := 3 ;
8202: LD_ADDR_VAR 0 5
8206: PUSH
8207: LD_INT 3
8209: ST_TO_ADDR
// if missionStage > 10 then
8210: LD_EXP 15
8214: PUSH
8215: LD_INT 10
8217: GREATER
8218: IFFALSE 8228
// strength := 4 ;
8220: LD_ADDR_VAR 0 5
8224: PUSH
8225: LD_INT 4
8227: ST_TO_ADDR
// tmp := PrepareRussianAttack ( strength ) ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_VAR 0 5
8237: PPUSH
8238: CALL 6853 0 1
8242: ST_TO_ADDR
// for i in tmp do
8243: LD_ADDR_VAR 0 1
8247: PUSH
8248: LD_VAR 0 2
8252: PUSH
8253: FOR_IN
8254: IFFALSE 8354
// begin PlaceUnitArea ( i , areas [ rand ( 1 , 2 ) ] , false ) ;
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_VAR 0 4
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: CALL_OW 12
8276: ARRAY
8277: PPUSH
8278: LD_INT 0
8280: PPUSH
8281: CALL_OW 49
// if i = sewiVeh then
8285: LD_VAR 0 1
8289: PUSH
8290: LD_EXP 68
8294: EQUAL
8295: IFFALSE 8330
// begin Vsevolod = PrepareUnit ( Vsevolod , false ,  ) ;
8297: LD_ADDR_EXP 67
8301: PUSH
8302: LD_STRING Vsevolod
8304: PPUSH
8305: LD_INT 0
8307: PPUSH
8308: LD_STRING 
8310: PPUSH
8311: CALL 59586 0 3
8315: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , i ) ;
8316: LD_EXP 67
8320: PPUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 52
// end ; ComMoveXY ( i , 111 , 197 ) ;
8330: LD_VAR 0 1
8334: PPUSH
8335: LD_INT 111
8337: PPUSH
8338: LD_INT 197
8340: PPUSH
8341: CALL_OW 111
// wait ( 0 0$2 ) ;
8345: LD_INT 70
8347: PPUSH
8348: CALL_OW 67
// end ;
8352: GO 8253
8354: POP
8355: POP
// repeat wait ( 0 0$1 ) ;
8356: LD_INT 35
8358: PPUSH
8359: CALL_OW 67
// for i in tmp do
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: LD_VAR 0 2
8372: PUSH
8373: FOR_IN
8374: IFFALSE 8608
// begin x := GetX ( i ) ;
8376: LD_ADDR_VAR 0 7
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 250
8390: ST_TO_ADDR
// y := GetY ( i ) ;
8391: LD_ADDR_VAR 0 8
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 251
8405: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , x , y , 12 ] ] ) then
8406: LD_INT 81
8408: PUSH
8409: LD_INT 6
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 92
8418: PUSH
8419: LD_VAR 0 7
8423: PUSH
8424: LD_VAR 0 8
8428: PUSH
8429: LD_INT 12
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 69
8446: IFFALSE 8510
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , x , y , 12 ] ] ) , i ) ) else
8448: LD_VAR 0 1
8452: PPUSH
8453: LD_INT 81
8455: PUSH
8456: LD_INT 6
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 92
8465: PUSH
8466: LD_VAR 0 7
8470: PUSH
8471: LD_VAR 0 8
8475: PUSH
8476: LD_INT 12
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: PPUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 74
8503: PPUSH
8504: CALL_OW 115
8508: GO 8606
// if GetDistUnitXY ( i , xy [ 1 ] , xy [ 2 ] ) > 10 then
8510: LD_VAR 0 1
8514: PPUSH
8515: LD_VAR 0 6
8519: PUSH
8520: LD_INT 1
8522: ARRAY
8523: PPUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_INT 2
8531: ARRAY
8532: PPUSH
8533: CALL_OW 297
8537: PUSH
8538: LD_INT 10
8540: GREATER
8541: IFFALSE 8572
// ComAgressiveMove ( i , xy [ 1 ] , xy [ 2 ] ) else
8543: LD_VAR 0 1
8547: PPUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_INT 1
8555: ARRAY
8556: PPUSH
8557: LD_VAR 0 6
8561: PUSH
8562: LD_INT 2
8564: ARRAY
8565: PPUSH
8566: CALL_OW 114
8570: GO 8606
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_INT 81
8579: PUSH
8580: LD_INT 6
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 69
8591: PPUSH
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 74
8601: PPUSH
8602: CALL_OW 115
// end ;
8606: GO 8373
8608: POP
8609: POP
// until not FilterAllUnits ( [ f_side , 6 ] ) ;
8610: LD_INT 22
8612: PUSH
8613: LD_INT 6
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: NOT
8625: IFFALSE 8356
// end ; until russianDestroyed ;
8627: LD_EXP 21
8631: IFFALSE 8014
// end ;
8633: PPOPN 8
8635: END
// every 7 7$30 trigger not russianDestroyed and missionStage >= 8 do var i , tmp , target , teleport ;
8636: LD_EXP 21
8640: NOT
8641: PUSH
8642: LD_EXP 15
8646: PUSH
8647: LD_INT 8
8649: GREATEREQUAL
8650: AND
8651: IFFALSE 9462
8653: GO 8655
8655: DISABLE
8656: LD_INT 0
8658: PPUSH
8659: PPUSH
8660: PPUSH
8661: PPUSH
// begin enable ;
8662: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) then
8663: LD_INT 22
8665: PUSH
8666: LD_INT 3
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 30
8685: PUSH
8686: LD_INT 3
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: NOT
8703: IFFALSE 8707
// exit ;
8705: GO 9462
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
8707: LD_ADDR_VAR 0 4
8711: PUSH
8712: LD_INT 22
8714: PUSH
8715: LD_INT 3
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 30
8724: PUSH
8725: LD_INT 34
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PPUSH
8736: CALL_OW 69
8740: ST_TO_ADDR
// if Prob ( 40 ) then
8741: LD_INT 40
8743: PPUSH
8744: CALL_OW 13
8748: IFFALSE 8875
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
8750: LD_INT 2
8752: PPUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 3
8758: PUSH
8759: LD_INT 3
8761: PUSH
8762: LD_INT 49
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_INT 3
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: LD_INT 49
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 3
8794: PUSH
8795: LD_INT 3
8797: PUSH
8798: LD_INT 49
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 3
8812: PUSH
8813: LD_INT 3
8815: PUSH
8816: LD_INT 46
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 24
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 3
8833: PUSH
8834: LD_INT 46
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 24
8845: PUSH
8846: LD_INT 3
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: LD_INT 46
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL 53679 0 2
// end else
8873: GO 8998
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
8875: LD_INT 2
8877: PPUSH
8878: LD_INT 24
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 3
8886: PUSH
8887: LD_INT 47
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 24
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 3
8904: PUSH
8905: LD_INT 47
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 24
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 47
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 3
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 46
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 24
8952: PUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: LD_INT 46
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 24
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 3
8976: PUSH
8977: LD_INT 46
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL 53679 0 2
// end ; if Difficulty > 1 then
8998: LD_OWVAR 67
9002: PUSH
9003: LD_INT 1
9005: GREATER
9006: IFFALSE 9036
// MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
9008: LD_INT 2
9010: PPUSH
9011: LD_INT 24
9013: PUSH
9014: LD_INT 3
9016: PUSH
9017: LD_INT 3
9019: PUSH
9020: LD_INT 47
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: PPUSH
9032: CALL 53679 0 2
// repeat wait ( 0 0$1 ) ;
9036: LD_INT 35
9038: PPUSH
9039: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
9043: LD_INT 2
9045: PPUSH
9046: LD_INT 1
9048: PPUSH
9049: CALL 55092 0 2
9053: PUSH
9054: LD_INT 6
9056: PUSH
9057: LD_INT 7
9059: PUSH
9060: LD_INT 7
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: LD_OWVAR 67
9072: ARRAY
9073: GREATEREQUAL
9074: IFFALSE 9036
// tmp := MC_GetVehicles ( 2 , true ) ;
9076: LD_ADDR_VAR 0 2
9080: PUSH
9081: LD_INT 2
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: CALL 55092 0 2
9091: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
9092: LD_ADDR_EXP 118
9096: PUSH
9097: LD_EXP 118
9101: PPUSH
9102: LD_INT 2
9104: PPUSH
9105: LD_EXP 118
9109: PUSH
9110: LD_INT 2
9112: ARRAY
9113: PUSH
9114: LD_VAR 0 2
9118: DIFF
9119: PPUSH
9120: CALL_OW 1
9124: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
9125: LD_ADDR_VAR 0 3
9129: PUSH
9130: LD_INT 0
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 12
9140: ST_TO_ADDR
// if target then
9141: LD_VAR 0 3
9145: IFFALSE 9204
// begin repeat ComMoveXY ( tmp , 139 , 89 ) ;
9147: LD_VAR 0 2
9151: PPUSH
9152: LD_INT 139
9154: PPUSH
9155: LD_INT 89
9157: PPUSH
9158: CALL_OW 111
// wait ( 0 0$1 ) ;
9162: LD_INT 35
9164: PPUSH
9165: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 6 ] ) > 3 ;
9169: LD_VAR 0 2
9173: PPUSH
9174: LD_INT 92
9176: PUSH
9177: LD_INT 139
9179: PUSH
9180: LD_INT 89
9182: PUSH
9183: LD_INT 6
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 72
9196: PUSH
9197: LD_INT 3
9199: GREATER
9200: IFFALSE 9147
// end else
9202: GO 9277
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
9204: LD_VAR 0 2
9208: PPUSH
9209: LD_VAR 0 4
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: CALL_OW 120
// repeat AddComMoveXY ( tmp , 124 , 139 ) ;
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_INT 124
9229: PPUSH
9230: LD_INT 139
9232: PPUSH
9233: CALL_OW 171
// wait ( 0 0$1 ) ;
9237: LD_INT 35
9239: PPUSH
9240: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 6 ] ) > 5 ;
9244: LD_VAR 0 2
9248: PPUSH
9249: LD_INT 92
9251: PUSH
9252: LD_INT 124
9254: PUSH
9255: LD_INT 139
9257: PUSH
9258: LD_INT 6
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 72
9271: PUSH
9272: LD_INT 5
9274: GREATER
9275: IFFALSE 9222
// end ; repeat wait ( 0 0$1 ) ;
9277: LD_INT 35
9279: PPUSH
9280: CALL_OW 67
// for i in tmp do
9284: LD_ADDR_VAR 0 1
9288: PUSH
9289: LD_VAR 0 2
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9453
// if GetLives ( i ) > 251 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL_OW 256
9306: PUSH
9307: LD_INT 251
9309: GREATER
9310: IFFALSE 9435
// begin if GetWeapon ( i ) = ru_time_lapser then
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 264
9321: PUSH
9322: LD_INT 49
9324: EQUAL
9325: IFFALSE 9381
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) else
9327: LD_VAR 0 1
9331: PPUSH
9332: LD_INT 2
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_INT 8
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PPUSH
9365: LD_VAR 0 1
9369: PPUSH
9370: CALL_OW 74
9374: PPUSH
9375: CALL_OW 112
9379: GO 9433
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) ;
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_INT 2
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 22
9401: PUSH
9402: LD_INT 8
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 69
9418: PPUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 74
9428: PPUSH
9429: CALL_OW 115
// end else
9433: GO 9451
// tmp := tmp diff i ;
9435: LD_ADDR_VAR 0 2
9439: PUSH
9440: LD_VAR 0 2
9444: PUSH
9445: LD_VAR 0 1
9449: DIFF
9450: ST_TO_ADDR
9451: GO 9294
9453: POP
9454: POP
// until not tmp ;
9455: LD_VAR 0 2
9459: NOT
9460: IFFALSE 9277
// end ; end_of_file
9462: PPOPN 4
9464: END
// export Roth , Simms , Kirilenkova , Dolgov , Petrosyan , Petrovova , Kuzmov , Lipshchin , Gnyevko , Titov , Xavier , Belkov , Burlak , Karamazov , Kapitsova , Scholtze , Oblukov ; export allianceSpecialForce ; export function PrepareAlliance ; var i , tmp , base , side , teleport ; begin
9465: LD_INT 0
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
9471: PPUSH
9472: PPUSH
// side := 7 ;
9473: LD_ADDR_VAR 0 5
9477: PUSH
9478: LD_INT 7
9480: ST_TO_ADDR
// uc_side := side ;
9481: LD_ADDR_OWVAR 20
9485: PUSH
9486: LD_VAR 0 5
9490: ST_TO_ADDR
// uc_nation := 1 ;
9491: LD_ADDR_OWVAR 21
9495: PUSH
9496: LD_INT 1
9498: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
9499: LD_ADDR_VAR 0 2
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_VAR 0 5
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 21
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: PUSH
9535: FOR_IN
9536: IFFALSE 9552
// SetBLevel ( i , 10 ) ;
9538: LD_VAR 0 2
9542: PPUSH
9543: LD_INT 10
9545: PPUSH
9546: CALL_OW 241
9550: GO 9535
9552: POP
9553: POP
// base := GetBase ( al_depot ) ;
9554: LD_ADDR_VAR 0 4
9558: PUSH
9559: LD_INT 2
9561: PPUSH
9562: CALL_OW 274
9566: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
9567: LD_ADDR_VAR 0 6
9571: PUSH
9572: LD_INT 22
9574: PUSH
9575: LD_VAR 0 5
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 34
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 69
9602: ST_TO_ADDR
// if teleport then
9603: LD_VAR 0 6
9607: IFFALSE 9628
// TeleportExit ( teleport [ 1 ] , 262 , 119 ) ;
9609: LD_VAR 0 6
9613: PUSH
9614: LD_INT 1
9616: ARRAY
9617: PPUSH
9618: LD_INT 262
9620: PPUSH
9621: LD_INT 119
9623: PPUSH
9624: CALL_OW 243
// SetResourceType ( base , mat_cans , 3500 ) ;
9628: LD_VAR 0 4
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_INT 3500
9638: PPUSH
9639: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
9643: LD_VAR 0 4
9647: PPUSH
9648: LD_INT 2
9650: PPUSH
9651: LD_INT 200
9653: PPUSH
9654: CALL_OW 277
// SetResourceType ( base , mat_siberit , 50 ) ;
9658: LD_VAR 0 4
9662: PPUSH
9663: LD_INT 3
9665: PPUSH
9666: LD_INT 50
9668: PPUSH
9669: CALL_OW 277
// Roth := NewCharacter ( Roth ) ;
9673: LD_ADDR_EXP 71
9677: PUSH
9678: LD_STRING Roth
9680: PPUSH
9681: CALL_OW 25
9685: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
9686: LD_ADDR_EXP 72
9690: PUSH
9691: LD_STRING Simms
9693: PPUSH
9694: LD_EXP 1
9698: NOT
9699: PPUSH
9700: LD_STRING 10c_
9702: PPUSH
9703: CALL 59586 0 3
9707: ST_TO_ADDR
// if not Simms then
9708: LD_EXP 72
9712: NOT
9713: IFFALSE 9743
// begin uc_nation := 1 ;
9715: LD_ADDR_OWVAR 21
9719: PUSH
9720: LD_INT 1
9722: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 10
9728: PPUSH
9729: CALL_OW 384
// Simms := CreateHuman ;
9733: LD_ADDR_EXP 72
9737: PUSH
9738: CALL_OW 44
9742: ST_TO_ADDR
// end ; uc_nation := 3 ;
9743: LD_ADDR_OWVAR 21
9747: PUSH
9748: LD_INT 3
9750: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
9751: LD_ADDR_EXP 73
9755: PUSH
9756: LD_STRING Kirilenkova
9758: PPUSH
9759: CALL_OW 25
9763: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
9764: LD_ADDR_EXP 87
9768: PUSH
9769: LD_STRING Oblukov
9771: PPUSH
9772: CALL_OW 25
9776: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
9777: LD_ADDR_EXP 74
9781: PUSH
9782: LD_STRING Dolgov
9784: PPUSH
9785: CALL_OW 25
9789: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
9790: LD_ADDR_EXP 75
9794: PUSH
9795: LD_STRING Petrosyan
9797: PPUSH
9798: CALL_OW 25
9802: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
9803: LD_ADDR_EXP 86
9807: PUSH
9808: LD_STRING Scholtze
9810: PPUSH
9811: CALL_OW 25
9815: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
9816: LD_ADDR_EXP 85
9820: PUSH
9821: LD_STRING Kapitsova
9823: PPUSH
9824: CALL_OW 25
9828: ST_TO_ADDR
// Petrovova := NewCharacter ( Petrovova ) ;
9829: LD_ADDR_EXP 76
9833: PUSH
9834: LD_STRING Petrovova
9836: PPUSH
9837: CALL_OW 25
9841: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
9842: LD_ADDR_EXP 77
9846: PUSH
9847: LD_STRING Kuzmov
9849: PPUSH
9850: CALL_OW 25
9854: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
9855: LD_ADDR_EXP 84
9859: PUSH
9860: LD_STRING Karamazov
9862: PPUSH
9863: CALL_OW 25
9867: ST_TO_ADDR
// if LoadVariable ( 13_Lipshchin_1 , 0 ) then
9868: LD_STRING 13_Lipshchin_1
9870: PPUSH
9871: LD_INT 0
9873: PPUSH
9874: CALL_OW 30
9878: IFFALSE 9893
// Lipshchin := NewCharacter ( Lipshchin ) ;
9880: LD_ADDR_EXP 78
9884: PUSH
9885: LD_STRING Lipshchin
9887: PPUSH
9888: CALL_OW 25
9892: ST_TO_ADDR
// if LoadVariable ( 13_Titov_1 , 0 ) then
9893: LD_STRING 13_Titov_1
9895: PPUSH
9896: LD_INT 0
9898: PPUSH
9899: CALL_OW 30
9903: IFFALSE 9918
// Titov := NewCharacter ( Titov ) ;
9905: LD_ADDR_EXP 80
9909: PUSH
9910: LD_STRING Titov
9912: PPUSH
9913: CALL_OW 25
9917: ST_TO_ADDR
// if LoadVariable ( 13_Gnyevko_1 , 0 ) then
9918: LD_STRING 13_Gnyevko_1
9920: PPUSH
9921: LD_INT 0
9923: PPUSH
9924: CALL_OW 30
9928: IFFALSE 9943
// Gnyevko := NewCharacter ( Gnyevko ) ;
9930: LD_ADDR_EXP 79
9934: PUSH
9935: LD_STRING Gnyevko
9937: PPUSH
9938: CALL_OW 25
9942: ST_TO_ADDR
// if LoadVariable ( 13_Xavier_1 , 0 ) then
9943: LD_STRING 13_Xavier_1
9945: PPUSH
9946: LD_INT 0
9948: PPUSH
9949: CALL_OW 30
9953: IFFALSE 9968
// Xavier := NewCharacter ( Xavier2 ) ;
9955: LD_ADDR_EXP 81
9959: PUSH
9960: LD_STRING Xavier2
9962: PPUSH
9963: CALL_OW 25
9967: ST_TO_ADDR
// if LoadVariable ( 13_Belkov_1 , 0 ) then
9968: LD_STRING 13_Belkov_1
9970: PPUSH
9971: LD_INT 0
9973: PPUSH
9974: CALL_OW 30
9978: IFFALSE 9993
// Belkov := NewCharacter ( Belkov ) ;
9980: LD_ADDR_EXP 82
9984: PUSH
9985: LD_STRING Belkov
9987: PPUSH
9988: CALL_OW 25
9992: ST_TO_ADDR
// if not BurlakStatus then
9993: LD_EXP 9
9997: NOT
9998: IFFALSE 10013
// Burlak = NewCharacter ( Burlak ) ;
10000: LD_ADDR_EXP 83
10004: PUSH
10005: LD_STRING Burlak
10007: PPUSH
10008: CALL_OW 25
10012: ST_TO_ADDR
// tmp := [ Roth , Kirilenkova , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova , Petrovova , Kuzmov , Karamazov ] ;
10013: LD_ADDR_VAR 0 3
10017: PUSH
10018: LD_EXP 71
10022: PUSH
10023: LD_EXP 73
10027: PUSH
10028: LD_EXP 87
10032: PUSH
10033: LD_EXP 74
10037: PUSH
10038: LD_EXP 75
10042: PUSH
10043: LD_EXP 86
10047: PUSH
10048: LD_EXP 85
10052: PUSH
10053: LD_EXP 76
10057: PUSH
10058: LD_EXP 77
10062: PUSH
10063: LD_EXP 84
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: ST_TO_ADDR
// if Simms then
10080: LD_EXP 72
10084: IFFALSE 10102
// tmp := tmp ^ Simms ;
10086: LD_ADDR_VAR 0 3
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_EXP 72
10100: ADD
10101: ST_TO_ADDR
// if Titov then
10102: LD_EXP 80
10106: IFFALSE 10124
// tmp := tmp ^ Titov ;
10108: LD_ADDR_VAR 0 3
10112: PUSH
10113: LD_VAR 0 3
10117: PUSH
10118: LD_EXP 80
10122: ADD
10123: ST_TO_ADDR
// if Lipshchin then
10124: LD_EXP 78
10128: IFFALSE 10146
// tmp := tmp ^ Lipshchin ;
10130: LD_ADDR_VAR 0 3
10134: PUSH
10135: LD_VAR 0 3
10139: PUSH
10140: LD_EXP 78
10144: ADD
10145: ST_TO_ADDR
// if Gnyevko then
10146: LD_EXP 79
10150: IFFALSE 10168
// tmp := tmp ^ Gnyevko ;
10152: LD_ADDR_VAR 0 3
10156: PUSH
10157: LD_VAR 0 3
10161: PUSH
10162: LD_EXP 79
10166: ADD
10167: ST_TO_ADDR
// if Xavier then
10168: LD_EXP 81
10172: IFFALSE 10190
// tmp := tmp ^ Xavier ;
10174: LD_ADDR_VAR 0 3
10178: PUSH
10179: LD_VAR 0 3
10183: PUSH
10184: LD_EXP 81
10188: ADD
10189: ST_TO_ADDR
// if Belkov then
10190: LD_EXP 82
10194: IFFALSE 10212
// tmp := tmp ^ Belkov ;
10196: LD_ADDR_VAR 0 3
10200: PUSH
10201: LD_VAR 0 3
10205: PUSH
10206: LD_EXP 82
10210: ADD
10211: ST_TO_ADDR
// if Burlak then
10212: LD_EXP 83
10216: IFFALSE 10234
// tmp := tmp ^ Burlak ;
10218: LD_ADDR_VAR 0 3
10222: PUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_EXP 83
10232: ADD
10233: ST_TO_ADDR
// for i = 1 to 8 do
10234: LD_ADDR_VAR 0 2
10238: PUSH
10239: DOUBLE
10240: LD_INT 1
10242: DEC
10243: ST_TO_ADDR
10244: LD_INT 8
10246: PUSH
10247: FOR_TO
10248: IFFALSE 10314
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
10250: LD_ADDR_OWVAR 21
10254: PUSH
10255: LD_INT 1
10257: PUSH
10258: LD_INT 3
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 1
10267: PPUSH
10268: LD_INT 2
10270: PPUSH
10271: CALL_OW 12
10275: ARRAY
10276: ST_TO_ADDR
// PrepareHuman ( false , i div 2 , 10 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 2
10284: PUSH
10285: LD_INT 2
10287: DIV
10288: PPUSH
10289: LD_INT 10
10291: PPUSH
10292: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
10296: LD_ADDR_VAR 0 3
10300: PUSH
10301: LD_VAR 0 3
10305: PUSH
10306: CALL_OW 44
10310: ADD
10311: ST_TO_ADDR
// end ;
10312: GO 10247
10314: POP
10315: POP
// for i in tmp do
10316: LD_ADDR_VAR 0 2
10320: PUSH
10321: LD_VAR 0 3
10325: PUSH
10326: FOR_IN
10327: IFFALSE 10352
// PlaceUnitXYR ( i , 260 , 235 , 8 , false ) ;
10329: LD_VAR 0 2
10333: PPUSH
10334: LD_INT 260
10336: PPUSH
10337: LD_INT 235
10339: PPUSH
10340: LD_INT 8
10342: PPUSH
10343: LD_INT 0
10345: PPUSH
10346: CALL_OW 50
10350: GO 10326
10352: POP
10353: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff [ Roth , Simms ] ) ;
10354: LD_ADDR_EXP 99
10358: PUSH
10359: LD_EXP 99
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: LD_INT 22
10369: PUSH
10370: LD_VAR 0 5
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: LD_INT 21
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 69
10404: PUSH
10405: LD_EXP 71
10409: PUSH
10410: LD_EXP 72
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: DIFF
10419: PPUSH
10420: CALL_OW 1
10424: ST_TO_ADDR
// uc_side := 0 ;
10425: LD_ADDR_OWVAR 20
10429: PUSH
10430: LD_INT 0
10432: ST_TO_ADDR
// uc_nation := 0 ;
10433: LD_ADDR_OWVAR 21
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
// for i = 1 to 5 do
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: DOUBLE
10447: LD_INT 1
10449: DEC
10450: ST_TO_ADDR
10451: LD_INT 5
10453: PUSH
10454: FOR_TO
10455: IFFALSE 10492
// begin InitHc ;
10457: CALL_OW 19
// hc_class := class_apeman ;
10461: LD_ADDR_OWVAR 28
10465: PUSH
10466: LD_INT 12
10468: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 299 , 229 , 10 , false ) ;
10469: CALL_OW 44
10473: PPUSH
10474: LD_INT 299
10476: PPUSH
10477: LD_INT 229
10479: PPUSH
10480: LD_INT 10
10482: PPUSH
10483: LD_INT 0
10485: PPUSH
10486: CALL_OW 50
// end ;
10490: GO 10454
10492: POP
10493: POP
// ComMoveXY ( Roth , 259 , 235 ) ;
10494: LD_EXP 71
10498: PPUSH
10499: LD_INT 259
10501: PPUSH
10502: LD_INT 235
10504: PPUSH
10505: CALL_OW 111
// AddComTurnXY ( Roth , 262 , 235 ) ;
10509: LD_EXP 71
10513: PPUSH
10514: LD_INT 262
10516: PPUSH
10517: LD_INT 235
10519: PPUSH
10520: CALL_OW 178
// if Simms then
10524: LD_EXP 72
10528: IFFALSE 10559
// begin ComMoveXY ( Simms , 262 , 235 ) ;
10530: LD_EXP 72
10534: PPUSH
10535: LD_INT 262
10537: PPUSH
10538: LD_INT 235
10540: PPUSH
10541: CALL_OW 111
// AddComTurnUnit ( Simms , Roth ) ;
10545: LD_EXP 72
10549: PPUSH
10550: LD_EXP 71
10554: PPUSH
10555: CALL_OW 179
// end ; end ;
10559: LD_VAR 0 1
10563: RET
// every 4 4$00 trigger allianceActive and not allianceDestroyed do var i , tmp ;
10564: LD_EXP 31
10568: PUSH
10569: LD_EXP 23
10573: NOT
10574: AND
10575: IFFALSE 10716
10577: GO 10579
10579: DISABLE
10580: LD_INT 0
10582: PPUSH
10583: PPUSH
// begin enable ;
10584: ENABLE
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_weapon , us_siberium_rocket ] ] ] ) ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 81
10592: PUSH
10593: LD_INT 7
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 32
10605: PUSH
10606: LD_INT 3
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: LD_INT 30
10615: PUSH
10616: LD_INT 30
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 30
10625: PUSH
10626: LD_INT 28
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 34
10635: PUSH
10636: LD_INT 49
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 34
10645: PUSH
10646: LD_INT 10
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 34
10655: PUSH
10656: LD_INT 8
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PPUSH
10676: CALL_OW 69
10680: ST_TO_ADDR
// if not tmp then
10681: LD_VAR 0 2
10685: NOT
10686: IFFALSE 10690
// exit ;
10688: GO 10716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 0 ) ;
10690: LD_VAR 0 2
10694: PUSH
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 2
10702: PPUSH
10703: CALL_OW 12
10707: ARRAY
10708: PPUSH
10709: LD_INT 0
10711: PPUSH
10712: CALL_OW 234
// end ;
10716: PPOPN 2
10718: END
// every 0 0$2 trigger not allianceDestroyed and allianceActive do var i , un , tmp ;
10719: LD_EXP 23
10723: NOT
10724: PUSH
10725: LD_EXP 31
10729: AND
10730: IFFALSE 11284
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
10738: PPUSH
10739: PPUSH
// begin uc_side := 7 ;
10740: LD_ADDR_OWVAR 20
10744: PUSH
10745: LD_INT 7
10747: ST_TO_ADDR
// uc_nation := 1 ;
10748: LD_ADDR_OWVAR 21
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// tmp := Shuffle ( [ [ 125 , 163 ] , [ 185 , 168 ] , [ 111 , 97 ] ] ) ;
10756: LD_ADDR_VAR 0 3
10760: PUSH
10761: LD_INT 125
10763: PUSH
10764: LD_INT 163
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 185
10773: PUSH
10774: LD_INT 168
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 111
10783: PUSH
10784: LD_INT 97
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL 101994 0 1
10800: ST_TO_ADDR
// allianceSpecialForce := [ ] ;
10801: LD_ADDR_EXP 88
10805: PUSH
10806: EMPTY
10807: ST_TO_ADDR
// for i = 1 to Difficulty do
10808: LD_ADDR_VAR 0 1
10812: PUSH
10813: DOUBLE
10814: LD_INT 1
10816: DEC
10817: ST_TO_ADDR
10818: LD_OWVAR 67
10822: PUSH
10823: FOR_TO
10824: IFFALSE 10982
// begin InitHc ;
10826: CALL_OW 19
// PrepareSoldier ( false , 8 ) ;
10830: LD_INT 0
10832: PPUSH
10833: LD_INT 8
10835: PPUSH
10836: CALL_OW 381
// un := CreateHuman ;
10840: LD_ADDR_VAR 0 2
10844: PUSH
10845: CALL_OW 44
10849: ST_TO_ADDR
// PlaceUnitXYR ( un , 258 , 267 , 4 , false ) ;
10850: LD_VAR 0 2
10854: PPUSH
10855: LD_INT 258
10857: PPUSH
10858: LD_INT 267
10860: PPUSH
10861: LD_INT 4
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 50
// allianceSpecialForce := allianceSpecialForce union un ;
10871: LD_ADDR_EXP 88
10875: PUSH
10876: LD_EXP 88
10880: PUSH
10881: LD_VAR 0 2
10885: UNION
10886: ST_TO_ADDR
// TeleportUnit ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 4 , true ) ;
10887: LD_VAR 0 2
10891: PPUSH
10892: LD_VAR 0 3
10896: PUSH
10897: LD_VAR 0 1
10901: ARRAY
10902: PUSH
10903: LD_INT 1
10905: ARRAY
10906: PPUSH
10907: LD_VAR 0 3
10911: PUSH
10912: LD_VAR 0 1
10916: ARRAY
10917: PUSH
10918: LD_INT 2
10920: ARRAY
10921: PPUSH
10922: LD_INT 4
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 483
// AddComMoveXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10932: LD_VAR 0 2
10936: PPUSH
10937: LD_VAR 0 3
10941: PUSH
10942: LD_VAR 0 1
10946: ARRAY
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: PPUSH
10952: LD_VAR 0 3
10956: PUSH
10957: LD_VAR 0 1
10961: ARRAY
10962: PUSH
10963: LD_INT 2
10965: ARRAY
10966: PPUSH
10967: CALL_OW 171
// AddComInvisible ( un ) ;
10971: LD_VAR 0 2
10975: PPUSH
10976: CALL_OW 212
// end ;
10980: GO 10823
10982: POP
10983: POP
// repeat wait ( 0 0$20 ) ;
10984: LD_INT 700
10986: PPUSH
10987: CALL_OW 67
// for i in allianceSpecialForce do
10991: LD_ADDR_VAR 0 1
10995: PUSH
10996: LD_EXP 88
11000: PUSH
11001: FOR_IN
11002: IFFALSE 11269
// begin if IsInvisible ( i ) then
11004: LD_VAR 0 1
11008: PPUSH
11009: CALL_OW 571
11013: IFFALSE 11238
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_driving ] ] , [ f_dist , i , [ 25 , 30 , 35 ] [ Difficulty ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 50
11032: PUSH
11033: EMPTY
11034: LIST
11035: PUSH
11036: LD_INT 3
11038: PUSH
11039: LD_INT 55
11041: PUSH
11042: EMPTY
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 91
11051: PUSH
11052: LD_VAR 0 1
11056: PUSH
11057: LD_INT 25
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 35
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: PUSH
11071: LD_OWVAR 67
11075: ARRAY
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 2
11084: PUSH
11085: LD_INT 25
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 25
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 25
11107: PUSH
11108: LD_INT 3
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 25
11117: PUSH
11118: LD_INT 4
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 25
11127: PUSH
11128: LD_INT 5
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 25
11137: PUSH
11138: LD_INT 8
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: PPUSH
11161: CALL_OW 69
11165: ST_TO_ADDR
// display_strings := [ tick , i , tmp ] ;
11166: LD_ADDR_OWVAR 47
11170: PUSH
11171: LD_OWVAR 1
11175: PUSH
11176: LD_VAR 0 1
11180: PUSH
11181: LD_VAR 0 3
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: ST_TO_ADDR
// if not tmp then
11191: LD_VAR 0 3
11195: NOT
11196: IFFALSE 11200
// continue ;
11198: GO 11001
// if Prob ( 30 * Difficulty ) then
11200: LD_INT 30
11202: PUSH
11203: LD_OWVAR 67
11207: MUL
11208: PPUSH
11209: CALL_OW 13
11213: IFFALSE 11238
// AllianceCaptureUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 1
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: CALL_OW 12
11232: ARRAY
11233: PPUSH
11234: CALL 28198 0 1
// end ; if IsDead ( i ) then
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL_OW 301
11247: IFFALSE 11267
// begin allianceSpecialForce := allianceSpecialForce diff i ;
11249: LD_ADDR_EXP 88
11253: PUSH
11254: LD_EXP 88
11258: PUSH
11259: LD_VAR 0 1
11263: DIFF
11264: ST_TO_ADDR
// continue ;
11265: GO 11001
// end ; end ;
11267: GO 11001
11269: POP
11270: POP
// until allianceDestroyed or not allianceSpecialForce ;
11271: LD_EXP 23
11275: PUSH
11276: LD_EXP 88
11280: NOT
11281: OR
11282: IFFALSE 10984
// end ;
11284: PPOPN 3
11286: END
// every 11 11$30 trigger not allianceDestroyed and allianceActive do var i , tmp , target , teleport ;
11287: LD_EXP 23
11291: NOT
11292: PUSH
11293: LD_EXP 31
11297: AND
11298: IFFALSE 12120
11300: GO 11302
11302: DISABLE
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
11308: PPUSH
// begin enable ;
11309: ENABLE
// if not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) then
11310: LD_INT 22
11312: PUSH
11313: LD_INT 7
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 30
11322: PUSH
11323: LD_INT 3
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: NOT
11339: IFFALSE 11343
// exit ;
11341: GO 12120
// teleport := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_teleport ] ] ) ;
11343: LD_ADDR_VAR 0 4
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 7
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 30
11360: PUSH
11361: LD_INT 34
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 69
11376: ST_TO_ADDR
// if Prob ( 40 ) then
11377: LD_INT 40
11379: PPUSH
11380: CALL_OW 13
11384: IFFALSE 11511
// begin MC_InsertProduceList ( 1 , [ [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ) ;
11386: LD_INT 1
11388: PPUSH
11389: LD_INT 5
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: LD_INT 6
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 5
11409: PUSH
11410: LD_INT 3
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: LD_INT 6
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 5
11427: PUSH
11428: LD_INT 3
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: LD_INT 6
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 24
11445: PUSH
11446: LD_INT 3
11448: PUSH
11449: LD_INT 3
11451: PUSH
11452: LD_INT 45
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 24
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: LD_INT 47
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 24
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: LD_INT 45
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL 53679 0 2
// end else
11509: GO 11634
// begin MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , ] ) ;
11511: LD_INT 1
11513: PPUSH
11514: LD_INT 24
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 47
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 24
11534: PUSH
11535: LD_INT 3
11537: PUSH
11538: LD_INT 3
11540: PUSH
11541: LD_INT 47
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 24
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: LD_INT 45
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 24
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 45
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 24
11588: PUSH
11589: LD_INT 1
11591: PUSH
11592: LD_INT 3
11594: PUSH
11595: LD_INT 45
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 24
11606: PUSH
11607: LD_INT 1
11609: PUSH
11610: LD_INT 3
11612: PUSH
11613: LD_INT 45
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL 53679 0 2
// end ; if Difficulty > 1 then
11634: LD_OWVAR 67
11638: PUSH
11639: LD_INT 1
11641: GREATER
11642: IFFALSE 11672
// MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
11644: LD_INT 1
11646: PPUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 3
11652: PUSH
11653: LD_INT 3
11655: PUSH
11656: LD_INT 47
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: PPUSH
11668: CALL 53679 0 2
// repeat wait ( 0 0$1 ) ;
11672: LD_INT 35
11674: PPUSH
11675: CALL_OW 67
// until MC_GetVehicles ( 1 , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
11679: LD_INT 1
11681: PPUSH
11682: LD_INT 1
11684: PPUSH
11685: CALL 55092 0 2
11689: PUSH
11690: LD_INT 6
11692: PUSH
11693: LD_INT 7
11695: PUSH
11696: LD_INT 7
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: LD_OWVAR 67
11708: ARRAY
11709: GREATEREQUAL
11710: IFFALSE 11672
// tmp := MC_GetVehicles ( 1 , true ) ;
11712: LD_ADDR_VAR 0 2
11716: PUSH
11717: LD_INT 1
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL 55092 0 2
11727: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 1 , mc_vehicles [ 1 ] diff tmp ) ;
11728: LD_ADDR_EXP 118
11732: PUSH
11733: LD_EXP 118
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: LD_EXP 118
11745: PUSH
11746: LD_INT 1
11748: ARRAY
11749: PUSH
11750: LD_VAR 0 2
11754: DIFF
11755: PPUSH
11756: CALL_OW 1
11760: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
11761: LD_ADDR_VAR 0 3
11765: PUSH
11766: LD_INT 0
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 12
11776: ST_TO_ADDR
// if target then
11777: LD_VAR 0 3
11781: IFFALSE 11878
// begin for i in tmp do
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11819
// TeleportUnit ( i , 179 , 209 , 8 , true ) ;
11796: LD_VAR 0 1
11800: PPUSH
11801: LD_INT 179
11803: PPUSH
11804: LD_INT 209
11806: PPUSH
11807: LD_INT 8
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 483
11817: GO 11793
11819: POP
11820: POP
// repeat AddComMoveXY ( tmp , 179 , 209 ) ;
11821: LD_VAR 0 2
11825: PPUSH
11826: LD_INT 179
11828: PPUSH
11829: LD_INT 209
11831: PPUSH
11832: CALL_OW 171
// wait ( 0 0$1 ) ;
11836: LD_INT 35
11838: PPUSH
11839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 179 , 209 , 6 ] ) > 3 ;
11843: LD_VAR 0 2
11847: PPUSH
11848: LD_INT 92
11850: PUSH
11851: LD_INT 179
11853: PUSH
11854: LD_INT 209
11856: PUSH
11857: LD_INT 6
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: PUSH
11871: LD_INT 3
11873: GREATER
11874: IFFALSE 11821
// end else
11876: GO 11971
// begin for i in tmp do
11878: LD_ADDR_VAR 0 1
11882: PUSH
11883: LD_VAR 0 2
11887: PUSH
11888: FOR_IN
11889: IFFALSE 11914
// TeleportUnit ( i , 285 , 163 , 8 , true ) ;
11891: LD_VAR 0 1
11895: PPUSH
11896: LD_INT 285
11898: PPUSH
11899: LD_INT 163
11901: PPUSH
11902: LD_INT 8
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 483
11912: GO 11888
11914: POP
11915: POP
// repeat AddComMoveXY ( tmp , 285 , 163 ) ;
11916: LD_VAR 0 2
11920: PPUSH
11921: LD_INT 285
11923: PPUSH
11924: LD_INT 163
11926: PPUSH
11927: CALL_OW 171
// wait ( 0 0$1 ) ;
11931: LD_INT 35
11933: PPUSH
11934: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 285 , 163 , 6 ] ) > 3 ;
11938: LD_VAR 0 2
11942: PPUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 285
11948: PUSH
11949: LD_INT 163
11951: PUSH
11952: LD_INT 6
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: PUSH
11966: LD_INT 3
11968: GREATER
11969: IFFALSE 11916
// end ; repeat wait ( 0 0$1 ) ;
11971: LD_INT 35
11973: PPUSH
11974: CALL_OW 67
// for i in tmp do
11978: LD_ADDR_VAR 0 1
11982: PUSH
11983: LD_VAR 0 2
11987: PUSH
11988: FOR_IN
11989: IFFALSE 12111
// if GetLives ( i ) > 251 then
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 256
12000: PUSH
12001: LD_INT 251
12003: GREATER
12004: IFFALSE 12093
// begin if GetWeapon ( i ) = ru_time_lapser then
12006: LD_VAR 0 1
12010: PPUSH
12011: CALL_OW 264
12015: PUSH
12016: LD_INT 49
12018: EQUAL
12019: IFFALSE 12057
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) else
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_INT 81
12028: PUSH
12029: LD_INT 7
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PPUSH
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL_OW 74
12050: PPUSH
12051: CALL_OW 112
12055: GO 12091
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_INT 81
12064: PUSH
12065: LD_INT 7
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: PPUSH
12077: LD_VAR 0 1
12081: PPUSH
12082: CALL_OW 74
12086: PPUSH
12087: CALL_OW 115
// end else
12091: GO 12109
// tmp := tmp diff i ;
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: LD_VAR 0 2
12102: PUSH
12103: LD_VAR 0 1
12107: DIFF
12108: ST_TO_ADDR
12109: GO 11988
12111: POP
12112: POP
// until not tmp ;
12113: LD_VAR 0 2
12117: NOT
12118: IFFALSE 11971
// end ; end_of_file
12120: PPOPN 4
12122: END
// export Omar , Heike , Khatam ; export function PrepareOmarInvasion ; var i , veh , un ; begin
12123: LD_INT 0
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
// missionStage := 13 ;
12129: LD_ADDR_EXP 15
12133: PUSH
12134: LD_INT 13
12136: ST_TO_ADDR
// uc_side := 2 ;
12137: LD_ADDR_OWVAR 20
12141: PUSH
12142: LD_INT 2
12144: ST_TO_ADDR
// uc_nation := 2 ;
12145: LD_ADDR_OWVAR 21
12149: PUSH
12150: LD_INT 2
12152: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
12153: LD_ADDR_EXP 89
12157: PUSH
12158: LD_STRING Omar
12160: PPUSH
12161: CALL_OW 25
12165: ST_TO_ADDR
// SetDir ( Omar , 4 ) ;
12166: LD_EXP 89
12170: PPUSH
12171: LD_INT 4
12173: PPUSH
12174: CALL_OW 233
// PlaceUnitXY ( Omar , 242 , 75 , false ) ;
12178: LD_EXP 89
12182: PPUSH
12183: LD_INT 242
12185: PPUSH
12186: LD_INT 75
12188: PPUSH
12189: LD_INT 0
12191: PPUSH
12192: CALL_OW 48
// Heike := NewCharacter ( Heike ) ;
12196: LD_ADDR_EXP 90
12200: PUSH
12201: LD_STRING Heike
12203: PPUSH
12204: CALL_OW 25
12208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
12209: LD_INT 14
12211: PPUSH
12212: LD_INT 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_INT 27
12220: PPUSH
12221: LD_INT 100
12223: PPUSH
12224: CALL 66219 0 5
// veh := CreateVehicle ;
12228: LD_ADDR_VAR 0 3
12232: PUSH
12233: CALL_OW 45
12237: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 242
// SetDir ( veh , 4 ) ;
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 4
12257: PPUSH
12258: CALL_OW 233
// PlaceUnitXY ( veh , 241 , 72 , false ) ;
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 241
12269: PPUSH
12270: LD_INT 72
12272: PPUSH
12273: LD_INT 0
12275: PPUSH
12276: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
12280: LD_EXP 90
12284: PPUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: CALL_OW 52
// if KhatamStatus then
12294: LD_EXP 8
12298: IFFALSE 12349
// begin Khatam := NewCharacter ( Khatam ) ;
12300: LD_ADDR_EXP 91
12304: PUSH
12305: LD_STRING Khatam
12307: PPUSH
12308: CALL_OW 25
12312: ST_TO_ADDR
// PlaceUnitXYR ( Khatam , 245 , 78 , 3 , false ) ;
12313: LD_EXP 91
12317: PPUSH
12318: LD_INT 245
12320: PPUSH
12321: LD_INT 78
12323: PPUSH
12324: LD_INT 3
12326: PPUSH
12327: LD_INT 0
12329: PPUSH
12330: CALL_OW 50
// SetSkill ( Khatam , 4 , 10 ) ;
12334: LD_EXP 91
12338: PPUSH
12339: LD_INT 4
12341: PPUSH
12342: LD_INT 10
12344: PPUSH
12345: CALL_OW 237
// end ; for i = 1 to Difficulty do
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: DOUBLE
12355: LD_INT 1
12357: DEC
12358: ST_TO_ADDR
12359: LD_OWVAR 67
12363: PUSH
12364: FOR_TO
12365: IFFALSE 12431
// begin PrepareScientist ( false , 7 + Difficulty ) ;
12367: LD_INT 0
12369: PPUSH
12370: LD_INT 7
12372: PUSH
12373: LD_OWVAR 67
12377: PLUS
12378: PPUSH
12379: CALL_OW 384
// un := CreateHuman ;
12383: LD_ADDR_VAR 0 4
12387: PUSH
12388: CALL_OW 44
12392: ST_TO_ADDR
// PlaceUnitArea ( un , [ arabianAttackArea , arabianAttackArea2 ] [ i mod 3 + 1 ] , false ) ;
12393: LD_VAR 0 4
12397: PPUSH
12398: LD_INT 28
12400: PUSH
12401: LD_INT 29
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_VAR 0 2
12412: PUSH
12413: LD_INT 3
12415: MOD
12416: PUSH
12417: LD_INT 1
12419: PLUS
12420: ARRAY
12421: PPUSH
12422: LD_INT 0
12424: PPUSH
12425: CALL_OW 49
// end ;
12429: GO 12364
12431: POP
12432: POP
// for i = 1 to 6 do
12433: LD_ADDR_VAR 0 2
12437: PUSH
12438: DOUBLE
12439: LD_INT 1
12441: DEC
12442: ST_TO_ADDR
12443: LD_INT 6
12445: PUSH
12446: FOR_TO
12447: IFFALSE 12492
// begin PrepareSoldier ( false , 7 + Difficulty ) ;
12449: LD_INT 0
12451: PPUSH
12452: LD_INT 7
12454: PUSH
12455: LD_OWVAR 67
12459: PLUS
12460: PPUSH
12461: CALL_OW 381
// un := CreateHuman ;
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: CALL_OW 44
12474: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea , false ) ;
12475: LD_VAR 0 4
12479: PPUSH
12480: LD_INT 28
12482: PPUSH
12483: LD_INT 0
12485: PPUSH
12486: CALL_OW 49
// end ;
12490: GO 12446
12492: POP
12493: POP
// for i = 1 to 3 do
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: DOUBLE
12500: LD_INT 1
12502: DEC
12503: ST_TO_ADDR
12504: LD_INT 3
12506: PUSH
12507: FOR_TO
12508: IFFALSE 12556
// begin PrepareHuman ( false , class_mortar , 7 + Difficulty ) ;
12510: LD_INT 0
12512: PPUSH
12513: LD_INT 8
12515: PPUSH
12516: LD_INT 7
12518: PUSH
12519: LD_OWVAR 67
12523: PLUS
12524: PPUSH
12525: CALL_OW 380
// un := CreateHuman ;
12529: LD_ADDR_VAR 0 4
12533: PUSH
12534: CALL_OW 44
12538: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea , false ) ;
12539: LD_VAR 0 4
12543: PPUSH
12544: LD_INT 28
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 49
// end ;
12554: GO 12507
12556: POP
12557: POP
// for i = 1 to 3 do
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: DOUBLE
12564: LD_INT 1
12566: DEC
12567: ST_TO_ADDR
12568: LD_INT 3
12570: PUSH
12571: FOR_TO
12572: IFFALSE 12662
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_rocket_launcher , 80 ) ;
12574: LD_INT 14
12576: PPUSH
12577: LD_INT 2
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: LD_INT 28
12585: PPUSH
12586: LD_INT 80
12588: PPUSH
12589: CALL 66219 0 5
// veh := CreateVehicle ;
12593: LD_ADDR_VAR 0 3
12597: PUSH
12598: CALL_OW 45
12602: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12603: LD_VAR 0 3
12607: PPUSH
12608: LD_INT 3
12610: PPUSH
12611: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 29
12622: PPUSH
12623: LD_INT 0
12625: PPUSH
12626: CALL_OW 49
// PrepareMechanic ( false , 7 + Difficulty ) ;
12630: LD_INT 0
12632: PPUSH
12633: LD_INT 7
12635: PUSH
12636: LD_OWVAR 67
12640: PLUS
12641: PPUSH
12642: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12646: CALL_OW 44
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: CALL_OW 52
// end ;
12660: GO 12571
12662: POP
12663: POP
// for i = 1 to 5 + Difficulty do
12664: LD_ADDR_VAR 0 2
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_INT 5
12676: PUSH
12677: LD_OWVAR 67
12681: PLUS
12682: PUSH
12683: FOR_TO
12684: IFFALSE 12811
// begin PrepareVehicle ( ar_half_tracked , rand ( 1 , 3 ) , control_manual , [ ar_rocket_launcher , ar_flame_thrower , ar_gun , ar_gatling_gun ] [ i mod 4 + 1 ] , 80 ) ;
12686: LD_INT 14
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: LD_INT 3
12694: PPUSH
12695: CALL_OW 12
12699: PPUSH
12700: LD_INT 1
12702: PPUSH
12703: LD_INT 28
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: LD_INT 27
12711: PUSH
12712: LD_INT 25
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_VAR 0 2
12725: PUSH
12726: LD_INT 4
12728: MOD
12729: PUSH
12730: LD_INT 1
12732: PLUS
12733: ARRAY
12734: PPUSH
12735: LD_INT 80
12737: PPUSH
12738: CALL 66219 0 5
// veh := CreateVehicle ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: CALL_OW 45
12751: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 4
12759: PPUSH
12760: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 28
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 49
// PrepareMechanic ( false , 7 + Difficulty ) ;
12779: LD_INT 0
12781: PPUSH
12782: LD_INT 7
12784: PUSH
12785: LD_OWVAR 67
12789: PLUS
12790: PPUSH
12791: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12795: CALL_OW 44
12799: PPUSH
12800: LD_VAR 0 3
12804: PPUSH
12805: CALL_OW 52
// end ;
12809: GO 12683
12811: POP
12812: POP
// for i = 1 to 3 do
12813: LD_ADDR_VAR 0 2
12817: PUSH
12818: DOUBLE
12819: LD_INT 1
12821: DEC
12822: ST_TO_ADDR
12823: LD_INT 3
12825: PUSH
12826: FOR_TO
12827: IFFALSE 12887
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12829: LD_INT 14
12831: PPUSH
12832: LD_INT 3
12834: PPUSH
12835: LD_INT 5
12837: PPUSH
12838: LD_INT 29
12840: PPUSH
12841: LD_INT 80
12843: PPUSH
12844: CALL 66219 0 5
// veh := CreateVehicle ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: CALL_OW 45
12857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_INT 4
12865: PPUSH
12866: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 28
12877: PPUSH
12878: LD_INT 0
12880: PPUSH
12881: CALL_OW 49
// end ;
12885: GO 12826
12887: POP
12888: POP
// end ;
12889: LD_VAR 0 1
12893: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , tmp , sci ;
12894: LD_INT 22
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PPUSH
12904: CALL_OW 69
12908: IFFALSE 13208
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
12917: PPUSH
// begin sci := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff Khatam ;
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 4
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: PUSH
12952: LD_EXP 91
12956: DIFF
12957: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 2 ] ) diff ( Khatam union sci ) ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_INT 22
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_EXP 91
12982: PUSH
12983: LD_VAR 0 3
12987: UNION
12988: DIFF
12989: ST_TO_ADDR
// if Khatam then
12990: LD_EXP 91
12994: IFFALSE 13011
// ComMoveXY ( Khatam , 211 , 92 ) ;
12996: LD_EXP 91
13000: PPUSH
13001: LD_INT 211
13003: PPUSH
13004: LD_INT 92
13006: PPUSH
13007: CALL_OW 111
// SetResourceVisibility ( 197 , 80 , 2 ) ;
13011: LD_INT 197
13013: PPUSH
13014: LD_INT 80
13016: PPUSH
13017: LD_INT 2
13019: PPUSH
13020: CALL_OW 441
// SetResourceVisibility ( 213 , 90 , 2 ) ;
13024: LD_INT 213
13026: PPUSH
13027: LD_INT 90
13029: PPUSH
13030: LD_INT 2
13032: PPUSH
13033: CALL_OW 441
// SetResourceVisibility ( 215 , 129 , 2 ) ;
13037: LD_INT 215
13039: PPUSH
13040: LD_INT 129
13042: PPUSH
13043: LD_INT 2
13045: PPUSH
13046: CALL_OW 441
// if sci then
13050: LD_VAR 0 3
13054: IFFALSE 13075
// ComContaminate ( sci [ 1 ] , 197 , 80 ) ;
13056: LD_VAR 0 3
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PPUSH
13065: LD_INT 197
13067: PPUSH
13068: LD_INT 80
13070: PPUSH
13071: CALL_OW 158
// if sci > 1 then
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 1
13082: GREATER
13083: IFFALSE 13104
// ComContaminate ( sci [ 2 ] , 213 , 90 ) ;
13085: LD_VAR 0 3
13089: PUSH
13090: LD_INT 2
13092: ARRAY
13093: PPUSH
13094: LD_INT 213
13096: PPUSH
13097: LD_INT 90
13099: PPUSH
13100: CALL_OW 158
// if sci > 2 then
13104: LD_VAR 0 3
13108: PUSH
13109: LD_INT 2
13111: GREATER
13112: IFFALSE 13133
// ComContaminate ( sci [ 3 ] , 215 , 129 ) ;
13114: LD_VAR 0 3
13118: PUSH
13119: LD_INT 3
13121: ARRAY
13122: PPUSH
13123: LD_INT 215
13125: PPUSH
13126: LD_INT 129
13128: PPUSH
13129: CALL_OW 158
// repeat wait ( 0 0$1 ) ;
13133: LD_INT 35
13135: PPUSH
13136: CALL_OW 67
// for i in tmp do
13140: LD_ADDR_VAR 0 1
13144: PUSH
13145: LD_VAR 0 2
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13189
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_INT 81
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: PPUSH
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 74
13182: PPUSH
13183: CALL_OW 115
13187: GO 13150
13189: POP
13190: POP
// until not FilterAllUnits ( [ f_side , 2 ] ) ;
13191: LD_INT 22
13193: PUSH
13194: LD_INT 2
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 69
13205: NOT
13206: IFFALSE 13133
// end ; end_of_file
13208: PPOPN 3
13210: END
// export function Action ; var i , t , cargo , tmp , options , dec , amount , macmilan_squad ; begin
13211: LD_INT 0
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
13219: PPUSH
13220: PPUSH
13221: PPUSH
// Video ( true ) ;
13222: LD_INT 1
13224: PPUSH
13225: CALL 101874 0 1
// tmp := AreaToList ( macmilanCameraArea , 0 ) ;
13229: LD_ADDR_VAR 0 5
13233: PUSH
13234: LD_INT 7
13236: PPUSH
13237: LD_INT 0
13239: PPUSH
13240: CALL_OW 517
13244: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
13245: LD_ADDR_VAR 0 2
13249: PUSH
13250: DOUBLE
13251: LD_INT 1
13253: DEC
13254: ST_TO_ADDR
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13310
// RevealMapOnXY ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 1 , - 15 ) ;
13267: LD_VAR 0 5
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PUSH
13276: LD_VAR 0 2
13280: ARRAY
13281: PPUSH
13282: LD_VAR 0 5
13286: PUSH
13287: LD_INT 2
13289: ARRAY
13290: PUSH
13291: LD_VAR 0 2
13295: ARRAY
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_INT 15
13302: NEG
13303: PPUSH
13304: CALL 101788 0 4
13308: GO 13264
13310: POP
13311: POP
// CenterNowOnUnits ( Powell ) ;
13312: LD_EXP 55
13316: PPUSH
13317: CALL_OW 87
// tmp := [ JMMNewVeh ] ;
13321: LD_ADDR_VAR 0 5
13325: PUSH
13326: LD_EXP 53
13330: PUSH
13331: EMPTY
13332: LIST
13333: ST_TO_ADDR
// if GirlNewVeh then
13334: LD_EXP 54
13338: IFFALSE 13356
// tmp := tmp ^ GirlNewVeh ;
13340: LD_ADDR_VAR 0 5
13344: PUSH
13345: LD_VAR 0 5
13349: PUSH
13350: LD_EXP 54
13354: ADD
13355: ST_TO_ADDR
// ComMoveXY ( tmp , 60 , 109 ) ;
13356: LD_VAR 0 5
13360: PPUSH
13361: LD_INT 60
13363: PPUSH
13364: LD_INT 109
13366: PPUSH
13367: CALL_OW 111
// if KappaStatus then
13371: LD_EXP 2
13375: IFFALSE 13427
// begin Say ( JMM , D1T-JMM-1 ) ;
13377: LD_EXP 36
13381: PPUSH
13382: LD_STRING D1T-JMM-1
13384: PPUSH
13385: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
13389: LD_EXP 55
13393: PPUSH
13394: LD_STRING D1T-Pow-1
13396: PPUSH
13397: CALL_OW 88
// Say ( JMM , D1T-JMM-2 ) ;
13401: LD_EXP 36
13405: PPUSH
13406: LD_STRING D1T-JMM-2
13408: PPUSH
13409: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
13413: LD_EXP 55
13417: PPUSH
13418: LD_STRING D1T-Pow-2
13420: PPUSH
13421: CALL_OW 88
// end else
13425: GO 13633
// if JMMGirlStatus then
13427: LD_EXP 6
13431: IFFALSE 13576
// begin Say ( JMM , D1T-JMM-1 ) ;
13433: LD_EXP 36
13437: PPUSH
13438: LD_STRING D1T-JMM-1
13440: PPUSH
13441: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
13445: LD_EXP 55
13449: PPUSH
13450: LD_STRING D1T-Pow-1
13452: PPUSH
13453: CALL_OW 88
// Say ( JMM , D1T-JMM-3 ) ;
13457: LD_EXP 36
13461: PPUSH
13462: LD_STRING D1T-JMM-3
13464: PPUSH
13465: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
13469: LD_EXP 55
13473: PPUSH
13474: LD_STRING D1T-Pow-3
13476: PPUSH
13477: CALL_OW 88
// if JMMGirl then
13481: LD_EXP 7
13485: IFFALSE 13574
// begin case JMMGirl of 1 :
13487: LD_EXP 7
13491: PUSH
13492: LD_INT 1
13494: DOUBLE
13495: EQUAL
13496: IFTRUE 13500
13498: GO 13515
13500: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
13501: LD_EXP 37
13505: PPUSH
13506: LD_STRING D1T-Joan-3
13508: PPUSH
13509: CALL_OW 88
13513: GO 13562
13515: LD_INT 2
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13538
13523: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
13524: LD_EXP 39
13528: PPUSH
13529: LD_STRING D1T-Lisa-3
13531: PPUSH
13532: CALL_OW 88
13536: GO 13562
13538: LD_INT 3
13540: DOUBLE
13541: EQUAL
13542: IFTRUE 13546
13544: GO 13561
13546: POP
// Say ( Connie , D1T-Con-3 ) ; end ;
13547: LD_EXP 51
13551: PPUSH
13552: LD_STRING D1T-Con-3
13554: PPUSH
13555: CALL_OW 88
13559: GO 13562
13561: POP
// Say ( Powell , D1T-Pow-4 ) ;
13562: LD_EXP 55
13566: PPUSH
13567: LD_STRING D1T-Pow-4
13569: PPUSH
13570: CALL_OW 88
// end ; end else
13574: GO 13633
// if not FastEnd then
13576: LD_EXP 11
13580: NOT
13581: IFFALSE 13609
// begin Say ( JMM , D1T-JMM-4 ) ;
13583: LD_EXP 36
13587: PPUSH
13588: LD_STRING D1T-JMM-4
13590: PPUSH
13591: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
13595: LD_EXP 55
13599: PPUSH
13600: LD_STRING D1T-Pow-5
13602: PPUSH
13603: CALL_OW 88
// end else
13607: GO 13633
// begin Say ( JMM , D1nT-JMM-1 ) ;
13609: LD_EXP 36
13613: PPUSH
13614: LD_STRING D1nT-JMM-1
13616: PPUSH
13617: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
13621: LD_EXP 55
13625: PPUSH
13626: LD_STRING D1nT-Pow-1
13628: PPUSH
13629: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
13633: LD_INT 35
13635: PPUSH
13636: CALL_OW 67
// until not HasTask ( JMMNewVeh ) ;
13640: LD_EXP 53
13644: PPUSH
13645: CALL_OW 314
13649: NOT
13650: IFFALSE 13633
// ComExitVehicle ( JMM ) ;
13652: LD_EXP 36
13656: PPUSH
13657: CALL_OW 121
// wait ( 3 ) ;
13661: LD_INT 3
13663: PPUSH
13664: CALL_OW 67
// ComMoveXY ( JMM , 60 , 94 ) ;
13668: LD_EXP 36
13672: PPUSH
13673: LD_INT 60
13675: PPUSH
13676: LD_INT 94
13678: PPUSH
13679: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
13683: LD_EXP 36
13687: PPUSH
13688: LD_EXP 55
13692: PPUSH
13693: CALL_OW 179
// if Joan then
13697: LD_EXP 37
13701: IFFALSE 13755
// begin ComExitVehicle ( Joan ) ;
13703: LD_EXP 37
13707: PPUSH
13708: CALL_OW 121
// AddComWait ( Joan , 0 0$1 ) ;
13712: LD_EXP 37
13716: PPUSH
13717: LD_INT 35
13719: PPUSH
13720: CALL_OW 202
// AddComMoveXY ( Joan , 65 , 104 ) ;
13724: LD_EXP 37
13728: PPUSH
13729: LD_INT 65
13731: PPUSH
13732: LD_INT 104
13734: PPUSH
13735: CALL_OW 171
// AddComTurnUnit ( Joan , JMM ) ;
13739: LD_EXP 37
13743: PPUSH
13744: LD_EXP 36
13748: PPUSH
13749: CALL_OW 179
// end else
13753: GO 13889
// if Lisa and JMMGirl = 2 then
13755: LD_EXP 39
13759: PUSH
13760: LD_EXP 7
13764: PUSH
13765: LD_INT 2
13767: EQUAL
13768: AND
13769: IFFALSE 13823
// begin ComExitVehicle ( Lisa ) ;
13771: LD_EXP 39
13775: PPUSH
13776: CALL_OW 121
// AddComWait ( Lisa , 0 0$1 ) ;
13780: LD_EXP 39
13784: PPUSH
13785: LD_INT 35
13787: PPUSH
13788: CALL_OW 202
// AddComMoveXY ( Lisa , 65 , 104 ) ;
13792: LD_EXP 39
13796: PPUSH
13797: LD_INT 65
13799: PPUSH
13800: LD_INT 104
13802: PPUSH
13803: CALL_OW 171
// AddComTurnUnit ( Lisa , JMM ) ;
13807: LD_EXP 39
13811: PPUSH
13812: LD_EXP 36
13816: PPUSH
13817: CALL_OW 179
// end else
13821: GO 13889
// if Connie and JMMGirl = 3 then
13823: LD_EXP 51
13827: PUSH
13828: LD_EXP 7
13832: PUSH
13833: LD_INT 3
13835: EQUAL
13836: AND
13837: IFFALSE 13889
// begin ComExitVehicle ( Connie ) ;
13839: LD_EXP 51
13843: PPUSH
13844: CALL_OW 121
// AddComWait ( Connie , 0 0$1 ) ;
13848: LD_EXP 51
13852: PPUSH
13853: LD_INT 35
13855: PPUSH
13856: CALL_OW 202
// AddComMoveXY ( Connie , 65 , 104 ) ;
13860: LD_EXP 51
13864: PPUSH
13865: LD_INT 65
13867: PPUSH
13868: LD_INT 104
13870: PPUSH
13871: CALL_OW 171
// AddComTurnUnit ( Connie , JMM ) ;
13875: LD_EXP 51
13879: PPUSH
13880: LD_EXP 36
13884: PPUSH
13885: CALL_OW 179
// end ; repeat wait ( 0 0$1 ) ;
13889: LD_INT 35
13891: PPUSH
13892: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) < 6 ;
13896: LD_EXP 36
13900: PPUSH
13901: LD_EXP 55
13905: PPUSH
13906: CALL_OW 296
13910: PUSH
13911: LD_INT 6
13913: LESS
13914: IFFALSE 13889
// wait ( 0 0$0.5 ) ;
13916: LD_INT 18
13918: PPUSH
13919: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
13923: LD_EXP 36
13927: PPUSH
13928: LD_STRING D1-JMM-1
13930: PPUSH
13931: CALL_OW 88
// async ;
13935: ASYNC
// Say ( Powell , D1-Pow-1 ) ;
13936: LD_EXP 55
13940: PPUSH
13941: LD_STRING D1-Pow-1
13943: PPUSH
13944: CALL_OW 88
// if not dialogue_skipped then
13948: LD_OWVAR 59
13952: NOT
13953: IFFALSE 13962
// wait ( 0 0$2 ) ;
13955: LD_INT 70
13957: PPUSH
13958: CALL_OW 67
// RevealMapOnXY ( 170 , 99 , 1 , - 6 ) ;
13962: LD_INT 170
13964: PPUSH
13965: LD_INT 99
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 6
13973: NEG
13974: PPUSH
13975: CALL 101788 0 4
// RevealMapOnXY ( 174 , 115 , 1 , - 6 ) ;
13979: LD_INT 174
13981: PPUSH
13982: LD_INT 115
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_INT 6
13990: NEG
13991: PPUSH
13992: CALL 101788 0 4
// RevealMapOnXY ( 169 , 71 , 1 , - 6 ) ;
13996: LD_INT 169
13998: PPUSH
13999: LD_INT 71
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: LD_INT 6
14007: NEG
14008: PPUSH
14009: CALL 101788 0 4
// if not dialogue_skipped then
14013: LD_OWVAR 59
14017: NOT
14018: IFFALSE 14037
// begin CenterOnXY ( 170 , 99 ) ;
14020: LD_INT 170
14022: PPUSH
14023: LD_INT 99
14025: PPUSH
14026: CALL_OW 84
// wait ( 0 0$2.3 ) ;
14030: LD_INT 80
14032: PPUSH
14033: CALL_OW 67
// end ; RevealMapOnXY ( 75 , 53 , 1 , - 9 ) ;
14037: LD_INT 75
14039: PPUSH
14040: LD_INT 53
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: LD_INT 9
14048: NEG
14049: PPUSH
14050: CALL 101788 0 4
// RevealMapOnXY ( 54 , 42 , 1 , - 9 ) ;
14054: LD_INT 54
14056: PPUSH
14057: LD_INT 42
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 9
14065: NEG
14066: PPUSH
14067: CALL 101788 0 4
// RevealMapOnXY ( 62 , 51 , 1 , - 9 ) ;
14071: LD_INT 62
14073: PPUSH
14074: LD_INT 51
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: LD_INT 9
14082: NEG
14083: PPUSH
14084: CALL 101788 0 4
// if not dialogue_skipped then
14088: LD_OWVAR 59
14092: NOT
14093: IFFALSE 14112
// begin CenterOnXY ( 75 , 53 ) ;
14095: LD_INT 75
14097: PPUSH
14098: LD_INT 53
14100: PPUSH
14101: CALL_OW 84
// wait ( 0 0$4 ) ;
14105: LD_INT 140
14107: PPUSH
14108: CALL_OW 67
// end ; CenterNowOnUnits ( Powell ) ;
14112: LD_EXP 55
14116: PPUSH
14117: CALL_OW 87
// if not dialogue_skipped then
14121: LD_OWVAR 59
14125: NOT
14126: IFFALSE 14135
// wait ( 0 0$2 ) ;
14128: LD_INT 70
14130: PPUSH
14131: CALL_OW 67
// sync ;
14135: SYNC
// Say ( JMM , D1-JMM-2 ) ;
14136: LD_EXP 36
14140: PPUSH
14141: LD_STRING D1-JMM-2
14143: PPUSH
14144: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
14148: LD_EXP 55
14152: PPUSH
14153: LD_STRING D1-Pow-2
14155: PPUSH
14156: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
14160: LD_EXP 36
14164: PPUSH
14165: LD_STRING D1-JMM-3
14167: PPUSH
14168: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
14172: LD_EXP 55
14176: PPUSH
14177: LD_STRING D1-Pow-3
14179: PPUSH
14180: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
14184: LD_EXP 36
14188: PPUSH
14189: LD_STRING D1-JMM-4
14191: PPUSH
14192: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
14196: LD_EXP 55
14200: PPUSH
14201: LD_STRING D1-Pow-4
14203: PPUSH
14204: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
14208: LD_EXP 36
14212: PPUSH
14213: LD_STRING D1-JMM-5
14215: PPUSH
14216: CALL_OW 88
// async ;
14220: ASYNC
// Say ( Powell , D1-Pow-5 ) ;
14221: LD_EXP 55
14225: PPUSH
14226: LD_STRING D1-Pow-5
14228: PPUSH
14229: CALL_OW 88
// if not dialogue_skipped then
14233: LD_OWVAR 59
14237: NOT
14238: IFFALSE 14247
// wait ( 0 0$3.6 ) ;
14240: LD_INT 126
14242: PPUSH
14243: CALL_OW 67
// RevealMapOnXY ( 134 , 210 , 1 , - 11 ) ;
14247: LD_INT 134
14249: PPUSH
14250: LD_INT 210
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 11
14258: NEG
14259: PPUSH
14260: CALL 101788 0 4
// if not dialogue_skipped then
14264: LD_OWVAR 59
14268: NOT
14269: IFFALSE 14288
// begin CenterOnXY ( 134 , 210 ) ;
14271: LD_INT 134
14273: PPUSH
14274: LD_INT 210
14276: PPUSH
14277: CALL_OW 84
// wait ( 0 0$2 ) ;
14281: LD_INT 70
14283: PPUSH
14284: CALL_OW 67
// end ; RevealMapOnXY ( 101 , 159 , 1 , - 10 ) ;
14288: LD_INT 101
14290: PPUSH
14291: LD_INT 159
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: LD_INT 10
14299: NEG
14300: PPUSH
14301: CALL 101788 0 4
// if not dialogue_skipped then
14305: LD_OWVAR 59
14309: NOT
14310: IFFALSE 14329
// begin CenterOnXY ( 101 , 159 ) ;
14312: LD_INT 101
14314: PPUSH
14315: LD_INT 159
14317: PPUSH
14318: CALL_OW 84
// wait ( 0 0$2 ) ;
14322: LD_INT 70
14324: PPUSH
14325: CALL_OW 67
// end ; sync ;
14329: SYNC
// CenterNowOnUnits ( Powell ) ;
14330: LD_EXP 55
14334: PPUSH
14335: CALL_OW 87
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
14339: LD_ADDR_VAR 0 6
14343: PUSH
14344: LD_INT 1
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: LD_INT 3
14352: PUSH
14353: LD_INT 4
14355: PUSH
14356: LD_INT 5
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: ST_TO_ADDR
// if not dialogue_skipped then
14370: LD_OWVAR 59
14374: NOT
14375: IFFALSE 14544
// begin game_speed := 4 ;
14377: LD_ADDR_OWVAR 65
14381: PUSH
14382: LD_INT 4
14384: ST_TO_ADDR
// wait ( 0 0$6 ) ;
14385: LD_INT 210
14387: PPUSH
14388: CALL_OW 67
// dec = SelectiveQuery ( Q1 , options ) ;
14392: LD_ADDR_VAR 0 7
14396: PUSH
14397: LD_STRING Q1
14399: PPUSH
14400: LD_VAR 0 6
14404: PPUSH
14405: CALL_OW 98
14409: ST_TO_ADDR
// repeat dec = SelectiveQuery ( Q1 , options ) ;
14410: LD_ADDR_VAR 0 7
14414: PUSH
14415: LD_STRING Q1
14417: PPUSH
14418: LD_VAR 0 6
14422: PPUSH
14423: CALL_OW 98
14427: ST_TO_ADDR
// options = options diff dec ;
14428: LD_ADDR_VAR 0 6
14432: PUSH
14433: LD_VAR 0 6
14437: PUSH
14438: LD_VAR 0 7
14442: DIFF
14443: ST_TO_ADDR
// ResolveQuery ( dec , options ) ;
14444: LD_VAR 0 7
14448: PPUSH
14449: LD_VAR 0 6
14453: PPUSH
14454: CALL 15827 0 2
// until ( dec in [ 5 , 6 ] ) or options = 2 ;
14458: LD_VAR 0 7
14462: PUSH
14463: LD_INT 5
14465: PUSH
14466: LD_INT 6
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: IN
14473: PUSH
14474: LD_VAR 0 6
14478: PUSH
14479: LD_INT 2
14481: EQUAL
14482: OR
14483: IFFALSE 14410
// if not ( dec in [ 5 , 6 ] ) then
14485: LD_VAR 0 7
14489: PUSH
14490: LD_INT 5
14492: PUSH
14493: LD_INT 6
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: IN
14500: NOT
14501: IFFALSE 14544
// begin dec = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
14503: LD_ADDR_VAR 0 7
14507: PUSH
14508: LD_STRING Q1a
14510: PPUSH
14511: LD_INT 1
14513: PUSH
14514: LD_INT 2
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 98
14525: ST_TO_ADDR
// ResolveQuery ( dec + 4 , options ) ;
14526: LD_VAR 0 7
14530: PUSH
14531: LD_INT 4
14533: PLUS
14534: PPUSH
14535: LD_VAR 0 6
14539: PPUSH
14540: CALL 15827 0 2
// end ; end ; CenterOnXY ( 81 , 127 ) ;
14544: LD_INT 81
14546: PPUSH
14547: LD_INT 127
14549: PPUSH
14550: CALL_OW 84
// amount := 5 ;
14554: LD_ADDR_VAR 0 8
14558: PUSH
14559: LD_INT 5
14561: ST_TO_ADDR
// macmilan_squad := [ ] ;
14562: LD_ADDR_VAR 0 9
14566: PUSH
14567: EMPTY
14568: ST_TO_ADDR
// if vip < amount then
14569: LD_EXP 56
14573: PUSH
14574: LD_VAR 0 8
14578: LESS
14579: IFFALSE 14623
// tmp := vip union FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) else
14581: LD_ADDR_VAR 0 5
14585: PUSH
14586: LD_EXP 56
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_INT 4
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 21
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PPUSH
14615: CALL_OW 69
14619: UNION
14620: ST_TO_ADDR
14621: GO 14633
// tmp := vip ;
14623: LD_ADDR_VAR 0 5
14627: PUSH
14628: LD_EXP 56
14632: ST_TO_ADDR
// tmp := tmp diff Powell ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_VAR 0 5
14642: PUSH
14643: LD_EXP 55
14647: DIFF
14648: ST_TO_ADDR
// if tmp < amount then
14649: LD_VAR 0 5
14653: PUSH
14654: LD_VAR 0 8
14658: LESS
14659: IFFALSE 14671
// amount := tmp ;
14661: LD_ADDR_VAR 0 8
14665: PUSH
14666: LD_VAR 0 5
14670: ST_TO_ADDR
// if GetClass ( tmp [ 1 ] ) <> 2 then
14671: LD_VAR 0 5
14675: PUSH
14676: LD_INT 1
14678: ARRAY
14679: PPUSH
14680: CALL_OW 257
14684: PUSH
14685: LD_INT 2
14687: NONEQUAL
14688: IFFALSE 14750
// begin if IsInUnit ( tmp [ 1 ] ) then
14690: LD_VAR 0 5
14694: PUSH
14695: LD_INT 1
14697: ARRAY
14698: PPUSH
14699: CALL_OW 310
14703: IFFALSE 14718
// ComExitBuilding ( tmp [ 1 ] ) ;
14705: LD_VAR 0 5
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , am_depot ) ;
14718: LD_VAR 0 5
14722: PUSH
14723: LD_INT 1
14725: ARRAY
14726: PPUSH
14727: LD_INT 387
14729: PPUSH
14730: CALL_OW 180
// AddComChangeProfession ( tmp [ 1 ] , 2 ) ;
14734: LD_VAR 0 5
14738: PUSH
14739: LD_INT 1
14741: ARRAY
14742: PPUSH
14743: LD_INT 2
14745: PPUSH
14746: CALL_OW 183
// end ; ComMoveXY ( JMM , 82 , 129 ) ;
14750: LD_EXP 36
14754: PPUSH
14755: LD_INT 82
14757: PPUSH
14758: LD_INT 129
14760: PPUSH
14761: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
14765: LD_EXP 36
14769: PPUSH
14770: LD_EXP 55
14774: PPUSH
14775: CALL_OW 179
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , 84 , 128 ) ;
14779: LD_INT 22
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 69
14793: PUSH
14794: LD_EXP 36
14798: DIFF
14799: PPUSH
14800: LD_INT 84
14802: PPUSH
14803: LD_INT 128
14805: PPUSH
14806: CALL_OW 111
// AddComTurnUnit ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , JMM ) ;
14810: LD_INT 22
14812: PUSH
14813: LD_INT 1
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 69
14824: PUSH
14825: LD_EXP 36
14829: DIFF
14830: PPUSH
14831: LD_EXP 36
14835: PPUSH
14836: CALL_OW 179
// for i = 1 to amount do
14840: LD_ADDR_VAR 0 2
14844: PUSH
14845: DOUBLE
14846: LD_INT 1
14848: DEC
14849: ST_TO_ADDR
14850: LD_VAR 0 8
14854: PUSH
14855: FOR_TO
14856: IFFALSE 15024
// begin macmilan_squad := macmilan_squad ^ tmp [ i ] ;
14858: LD_ADDR_VAR 0 9
14862: PUSH
14863: LD_VAR 0 9
14867: PUSH
14868: LD_VAR 0 5
14872: PUSH
14873: LD_VAR 0 2
14877: ARRAY
14878: ADD
14879: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
14880: LD_VAR 0 5
14884: PUSH
14885: LD_VAR 0 2
14889: ARRAY
14890: PPUSH
14891: CALL_OW 310
14895: IFFALSE 14912
// AddComExitBuilding ( tmp [ i ] ) ;
14897: LD_VAR 0 5
14901: PUSH
14902: LD_VAR 0 2
14906: ARRAY
14907: PPUSH
14908: CALL_OW 182
// if i = 2 and JMMNewVeh then
14912: LD_VAR 0 2
14916: PUSH
14917: LD_INT 2
14919: EQUAL
14920: PUSH
14921: LD_EXP 53
14925: AND
14926: IFFALSE 14984
// begin AddComEnterUnit ( tmp [ i ] , JMMNewVeh ) ;
14928: LD_VAR 0 5
14932: PUSH
14933: LD_VAR 0 2
14937: ARRAY
14938: PPUSH
14939: LD_EXP 53
14943: PPUSH
14944: CALL_OW 180
// AddComMoveXY ( tmp [ i ] , 86 , 133 ) ;
14948: LD_VAR 0 5
14952: PUSH
14953: LD_VAR 0 2
14957: ARRAY
14958: PPUSH
14959: LD_INT 86
14961: PPUSH
14962: LD_INT 133
14964: PPUSH
14965: CALL_OW 171
// AddComExitVehicle ( tmp [ i ] ) ;
14969: LD_VAR 0 5
14973: PUSH
14974: LD_VAR 0 2
14978: ARRAY
14979: PPUSH
14980: CALL_OW 181
// end ; AddComMoveToArea ( tmp [ i ] , macmilanSquadStand ) ;
14984: LD_VAR 0 5
14988: PUSH
14989: LD_VAR 0 2
14993: ARRAY
14994: PPUSH
14995: LD_INT 8
14997: PPUSH
14998: CALL_OW 173
// AddComTurnUnit ( tmp [ i ] , JMM ) ;
15002: LD_VAR 0 5
15006: PUSH
15007: LD_VAR 0 2
15011: ARRAY
15012: PPUSH
15013: LD_EXP 36
15017: PPUSH
15018: CALL_OW 179
// end ;
15022: GO 14855
15024: POP
15025: POP
// if GirlNewVeh then
15026: LD_EXP 54
15030: IFFALSE 15044
// SetSide ( GirlNewVeh , 4 ) ;
15032: LD_EXP 54
15036: PPUSH
15037: LD_INT 4
15039: PPUSH
15040: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
15044: LD_INT 35
15046: PPUSH
15047: CALL_OW 67
// until UnitFilter ( macmilan_squad , [ f_inarea , powellBase ] ) = 0 and not IsInArea ( JMM , powellBase ) ;
15051: LD_VAR 0 9
15055: PPUSH
15056: LD_INT 95
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PPUSH
15066: CALL_OW 72
15070: PUSH
15071: LD_INT 0
15073: EQUAL
15074: PUSH
15075: LD_EXP 36
15079: PPUSH
15080: LD_INT 9
15082: PPUSH
15083: CALL_OW 308
15087: NOT
15088: AND
15089: IFFALSE 15044
// wait ( 0 0$2 ) ;
15091: LD_INT 70
15093: PPUSH
15094: CALL_OW 67
// SetSide ( macmilan_squad , 1 ) ;
15098: LD_VAR 0 9
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_distxy , 83 , 130 , 10 ] ] ) , 1 ) ;
15110: LD_INT 21
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 92
15122: PUSH
15123: LD_INT 83
15125: PUSH
15126: LD_INT 130
15128: PUSH
15129: LD_INT 10
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 235
// Video ( false ) ;
15154: LD_INT 0
15156: PPUSH
15157: CALL 101874 0 1
// ChangeMissionObjectives ( M1 ) ;
15161: LD_STRING M1
15163: PPUSH
15164: CALL_OW 337
// SaveForQuickRestart ;
15168: CALL_OW 22
// missionStart := true ;
15172: LD_ADDR_EXP 13
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// missionStage := 2 ;
15180: LD_ADDR_EXP 15
15184: PUSH
15185: LD_INT 2
15187: ST_TO_ADDR
// wait ( 0 0$3 ) ;
15188: LD_INT 105
15190: PPUSH
15191: CALL_OW 67
// tmp := tmp diff FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
15195: LD_ADDR_VAR 0 5
15199: PUSH
15200: LD_VAR 0 5
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 21
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: DIFF
15234: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Powell ) ;
15235: LD_ADDR_EXP 99
15239: PUSH
15240: LD_EXP 99
15244: PPUSH
15245: LD_INT 4
15247: PPUSH
15248: LD_INT 22
15250: PUSH
15251: LD_INT 4
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 23
15260: PUSH
15261: LD_INT 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: LD_INT 21
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 69
15294: PUSH
15295: LD_EXP 55
15299: DIFF
15300: PPUSH
15301: CALL_OW 1
15305: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) [ 1 ] ;
15306: LD_ADDR_VAR 0 4
15310: PUSH
15311: LD_INT 22
15313: PUSH
15314: LD_INT 4
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: LD_INT 12
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PPUSH
15335: CALL_OW 69
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: ST_TO_ADDR
// if IsInUnit ( tmp [ 1 ] ) then
15344: LD_VAR 0 5
15348: PUSH
15349: LD_INT 1
15351: ARRAY
15352: PPUSH
15353: CALL_OW 310
15357: IFFALSE 15372
// ComExitBuilding ( tmp [ 1 ] ) ;
15359: LD_VAR 0 5
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: PPUSH
15368: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , cargo ) ;
15372: LD_VAR 0 5
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: LD_VAR 0 4
15385: PPUSH
15386: CALL_OW 180
// AddComMoveXY ( tmp [ 1 ] , 80 , 136 ) ;
15390: LD_VAR 0 5
15394: PUSH
15395: LD_INT 1
15397: ARRAY
15398: PPUSH
15399: LD_INT 80
15401: PPUSH
15402: LD_INT 136
15404: PPUSH
15405: CALL_OW 171
// AddComUnload ( tmp [ 1 ] ) ;
15409: LD_VAR 0 5
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 219
// AddComMoveXY ( tmp [ 1 ] , 59 , 112 ) ;
15422: LD_VAR 0 5
15426: PUSH
15427: LD_INT 1
15429: ARRAY
15430: PPUSH
15431: LD_INT 59
15433: PPUSH
15434: LD_INT 112
15436: PPUSH
15437: CALL_OW 171
// AddComExitVehicle ( tmp [ 1 ] ) ;
15441: LD_VAR 0 5
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 181
// if Lisa in vip and GetSide ( Lisa ) = 1 then
15454: LD_EXP 39
15458: PUSH
15459: LD_EXP 56
15463: IN
15464: PUSH
15465: LD_EXP 39
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: AND
15479: IFFALSE 15495
// Say ( Lisa , D3nW-Lisa-1 ) else
15481: LD_EXP 39
15485: PPUSH
15486: LD_STRING D3nW-Lisa-1
15488: PPUSH
15489: CALL_OW 88
15493: GO 15739
// if Cyrus in vip and GetSide ( Cyrus ) = 1 then
15495: LD_EXP 42
15499: PUSH
15500: LD_EXP 56
15504: IN
15505: PUSH
15506: LD_EXP 42
15510: PPUSH
15511: CALL_OW 255
15515: PUSH
15516: LD_INT 1
15518: EQUAL
15519: AND
15520: IFFALSE 15536
// Say ( Cyrus , D3nW-Cyrus-1 ) else
15522: LD_EXP 42
15526: PPUSH
15527: LD_STRING D3nW-Cyrus-1
15529: PPUSH
15530: CALL_OW 88
15534: GO 15739
// if Bobby in vip and GetSide ( Bobby ) = 1 then
15536: LD_EXP 41
15540: PUSH
15541: LD_EXP 56
15545: IN
15546: PUSH
15547: LD_EXP 41
15551: PPUSH
15552: CALL_OW 255
15556: PUSH
15557: LD_INT 1
15559: EQUAL
15560: AND
15561: IFFALSE 15577
// Say ( Bobby , D3nW-Bobby-1 ) else
15563: LD_EXP 41
15567: PPUSH
15568: LD_STRING D3nW-Bobby-1
15570: PPUSH
15571: CALL_OW 88
15575: GO 15739
// if Gary in vip and GetSide ( Gary ) = 1 then
15577: LD_EXP 48
15581: PUSH
15582: LD_EXP 56
15586: IN
15587: PUSH
15588: LD_EXP 48
15592: PPUSH
15593: CALL_OW 255
15597: PUSH
15598: LD_INT 1
15600: EQUAL
15601: AND
15602: IFFALSE 15618
// Say ( Gary , D3nW-Gary-1 ) else
15604: LD_EXP 48
15608: PPUSH
15609: LD_STRING D3nW-Gary-1
15611: PPUSH
15612: CALL_OW 88
15616: GO 15739
// if Donaldson in vip and GetSide ( Donaldson ) = 1 then
15618: LD_EXP 40
15622: PUSH
15623: LD_EXP 56
15627: IN
15628: PUSH
15629: LD_EXP 40
15633: PPUSH
15634: CALL_OW 255
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: AND
15643: IFFALSE 15659
// Say ( Donaldson , D3nW-Don-1 ) else
15645: LD_EXP 40
15649: PPUSH
15650: LD_STRING D3nW-Don-1
15652: PPUSH
15653: CALL_OW 88
15657: GO 15739
// if Cornel in vip and GetSide ( Cornel ) = 1 then
15659: LD_EXP 47
15663: PUSH
15664: LD_EXP 56
15668: IN
15669: PUSH
15670: LD_EXP 47
15674: PPUSH
15675: CALL_OW 255
15679: PUSH
15680: LD_INT 1
15682: EQUAL
15683: AND
15684: IFFALSE 15700
// Say ( Cornel , D3nW-Corn-1 ) else
15686: LD_EXP 47
15690: PPUSH
15691: LD_STRING D3nW-Corn-1
15693: PPUSH
15694: CALL_OW 88
15698: GO 15739
// if Frank in vip and GetSide ( Frank ) = 1 then
15700: LD_EXP 49
15704: PUSH
15705: LD_EXP 56
15709: IN
15710: PUSH
15711: LD_EXP 49
15715: PPUSH
15716: CALL_OW 255
15720: PUSH
15721: LD_INT 1
15723: EQUAL
15724: AND
15725: IFFALSE 15739
// Say ( Frank , D3nW-Frank-1 ) ;
15727: LD_EXP 49
15731: PPUSH
15732: LD_STRING D3nW-Frank-1
15734: PPUSH
15735: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
15739: LD_EXP 36
15743: PPUSH
15744: LD_STRING D3nW-JMM-1
15746: PPUSH
15747: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
15751: LD_EXP 36
15755: PPUSH
15756: LD_STRING D3nW-JMM-1a
15758: PPUSH
15759: CALL_OW 88
// t := 0 0$00 ;
15763: LD_ADDR_VAR 0 3
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15771: LD_INT 35
15773: PPUSH
15774: CALL_OW 67
// t := t + 0 0$1 ;
15778: LD_ADDR_VAR 0 3
15782: PUSH
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 35
15790: PLUS
15791: ST_TO_ADDR
// until HexInfo ( 59 , 112 ) or t > 1 1$00 ;
15792: LD_INT 59
15794: PPUSH
15795: LD_INT 112
15797: PPUSH
15798: CALL_OW 428
15802: PUSH
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 2100
15810: GREATER
15811: OR
15812: IFFALSE 15771
// activeAttacks := true ;
15814: LD_ADDR_EXP 16
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// end ;
15822: LD_VAR 0 1
15826: RET
// export function ResolveQuery ( question , list_of_q ) ; begin
15827: LD_INT 0
15829: PPUSH
// case question of 1 :
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 1
15837: DOUBLE
15838: EQUAL
15839: IFTRUE 15843
15841: GO 15894
15843: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
15844: LD_EXP 36
15848: PPUSH
15849: LD_STRING D2Mot-JMM-1
15851: PPUSH
15852: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
15856: LD_EXP 55
15860: PPUSH
15861: LD_STRING D2Mot-Pow-1
15863: PPUSH
15864: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
15868: LD_EXP 36
15872: PPUSH
15873: LD_STRING D2Mot-JMM-2
15875: PPUSH
15876: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
15880: LD_EXP 55
15884: PPUSH
15885: LD_STRING D2Mot-Pow-2
15887: PPUSH
15888: CALL_OW 88
// end ; 2 :
15892: GO 16237
15894: LD_INT 2
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 15978
15902: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
15903: LD_EXP 36
15907: PPUSH
15908: LD_STRING D2Rus-JMM-1
15910: PPUSH
15911: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
15915: LD_EXP 55
15919: PPUSH
15920: LD_STRING D2Rus-Pow-1
15922: PPUSH
15923: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
15927: LD_EXP 36
15931: PPUSH
15932: LD_STRING D2Rus-JMM-2
15934: PPUSH
15935: CALL_OW 88
// if not ( 3 in list_of_q ) then
15939: LD_INT 3
15941: PUSH
15942: LD_VAR 0 2
15946: IN
15947: NOT
15948: IFFALSE 15964
// Say ( Powell , D2Rus-Pow-2 ) else
15950: LD_EXP 55
15954: PPUSH
15955: LD_STRING D2Rus-Pow-2
15957: PPUSH
15958: CALL_OW 88
15962: GO 15976
// Say ( Powell , D2Rus-Pow-2a ) ;
15964: LD_EXP 55
15968: PPUSH
15969: LD_STRING D2Rus-Pow-2a
15971: PPUSH
15972: CALL_OW 88
// end ; 3 :
15976: GO 16237
15978: LD_INT 3
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 16071
15986: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
15987: LD_EXP 36
15991: PPUSH
15992: LD_STRING D2Leg-JMM-1
15994: PPUSH
15995: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
15999: LD_EXP 55
16003: PPUSH
16004: LD_STRING D2Leg-Pow-1
16006: PPUSH
16007: CALL_OW 88
// if 2 in list_of_q then
16011: LD_INT 2
16013: PUSH
16014: LD_VAR 0 2
16018: IN
16019: IFFALSE 16045
// begin Say ( JMM , D2Leg-JMM-2 ) ;
16021: LD_EXP 36
16025: PPUSH
16026: LD_STRING D2Leg-JMM-2
16028: PPUSH
16029: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
16033: LD_EXP 55
16037: PPUSH
16038: LD_STRING D2Leg-Pow-2
16040: PPUSH
16041: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
16045: LD_EXP 36
16049: PPUSH
16050: LD_STRING D2Leg-JMM-3
16052: PPUSH
16053: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
16057: LD_EXP 55
16061: PPUSH
16062: LD_STRING D2Leg-Pow-3
16064: PPUSH
16065: CALL_OW 88
// end ; 4 :
16069: GO 16237
16071: LD_INT 4
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16154
16079: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
16080: LD_EXP 36
16084: PPUSH
16085: LD_STRING D2Ar-JMM-1
16087: PPUSH
16088: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
16092: LD_EXP 55
16096: PPUSH
16097: LD_STRING D2Ar-Pow-1
16099: PPUSH
16100: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
16104: LD_EXP 36
16108: PPUSH
16109: LD_STRING D2Ar-JMM-2
16111: PPUSH
16112: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
16116: LD_EXP 55
16120: PPUSH
16121: LD_STRING D2Ar-Pow-2
16123: PPUSH
16124: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
16128: LD_EXP 36
16132: PPUSH
16133: LD_STRING D2Ar-JMM-3
16135: PPUSH
16136: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
16140: LD_EXP 55
16144: PPUSH
16145: LD_STRING D2Ar-Pow-3
16147: PPUSH
16148: CALL_OW 88
// end ; 5 :
16152: GO 16237
16154: LD_INT 5
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16177
16162: POP
// Say ( JMM , D2Conf-JMM-1 ) ; 6 :
16163: LD_EXP 36
16167: PPUSH
16168: LD_STRING D2Conf-JMM-1
16170: PPUSH
16171: CALL_OW 88
16175: GO 16237
16177: LD_INT 6
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16236
16185: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
16186: LD_EXP 36
16190: PPUSH
16191: LD_STRING D2Com-JMM-1
16193: PPUSH
16194: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
16198: LD_EXP 55
16202: PPUSH
16203: LD_STRING D2Com-Pow-1
16205: PPUSH
16206: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
16210: LD_EXP 36
16214: PPUSH
16215: LD_STRING D2Com-JMM-2
16217: PPUSH
16218: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
16222: LD_EXP 55
16226: PPUSH
16227: LD_STRING D2Com-Pow-2
16229: PPUSH
16230: CALL_OW 88
// end ; end ;
16234: GO 16237
16236: POP
// end ;
16237: LD_VAR 0 3
16241: RET
// every 0 0$5 trigger missionStart do var tmp ;
16242: LD_EXP 13
16246: IFFALSE 16529
16248: GO 16250
16250: DISABLE
16251: LD_INT 0
16253: PPUSH
// begin repeat wait ( 0 0$1 ) ;
16254: LD_INT 35
16256: PPUSH
16257: CALL_OW 67
// if FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) and missionStage in [ 2 , 3 , 4 , 5 ] then
16261: LD_INT 14
16263: PPUSH
16264: LD_INT 22
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 70
16278: PUSH
16279: LD_EXP 15
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: LD_INT 4
16292: PUSH
16293: LD_INT 5
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: IN
16302: AND
16303: IFFALSE 16519
// begin powellAnger := powellAnger + 1 ;
16305: LD_ADDR_EXP 17
16309: PUSH
16310: LD_EXP 17
16314: PUSH
16315: LD_INT 1
16317: PLUS
16318: ST_TO_ADDR
// Video ( true ) ;
16319: LD_INT 1
16321: PPUSH
16322: CALL 101874 0 1
// CenterNowOnUnits ( tmp ) ;
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 87
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
16335: LD_INT 14
16337: PPUSH
16338: LD_INT 22
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 70
16352: PPUSH
16353: LD_INT 86
16355: PPUSH
16356: LD_INT 133
16358: PPUSH
16359: CALL_OW 111
// async ;
16363: ASYNC
// case powellAnger of 1 :
16364: LD_EXP 17
16368: PUSH
16369: LD_INT 1
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16392
16377: POP
// Say ( Powell , DBack1-Pow-1 ) ; 2 :
16378: LD_EXP 55
16382: PPUSH
16383: LD_STRING DBack1-Pow-1
16385: PPUSH
16386: CALL_OW 88
16390: GO 16439
16392: LD_INT 2
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16415
16400: POP
// Say ( Powell , DBack2-Pow-1 ) ; 3 :
16401: LD_EXP 55
16405: PPUSH
16406: LD_STRING DBack2-Pow-1
16408: PPUSH
16409: CALL_OW 88
16413: GO 16439
16415: LD_INT 3
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16438
16423: POP
// Say ( Powell , DBack3-Pow-1 ) ; end ;
16424: LD_EXP 55
16428: PPUSH
16429: LD_STRING DBack3-Pow-1
16431: PPUSH
16432: CALL_OW 88
16436: GO 16439
16438: POP
// sync ;
16439: SYNC
// repeat wait ( 0 0$1 ) ;
16440: LD_INT 35
16442: PPUSH
16443: CALL_OW 67
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
16447: LD_INT 14
16449: PPUSH
16450: LD_INT 22
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PPUSH
16460: CALL_OW 70
16464: PPUSH
16465: LD_INT 86
16467: PPUSH
16468: LD_INT 133
16470: PPUSH
16471: CALL_OW 111
// until not FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) ;
16475: LD_INT 14
16477: PPUSH
16478: LD_INT 22
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 70
16492: NOT
16493: IFFALSE 16440
// if powellAnger >= 3 then
16495: LD_EXP 17
16499: PUSH
16500: LD_INT 3
16502: GREATEREQUAL
16503: IFFALSE 16512
// YouLost ( Dismissed ) ;
16505: LD_STRING Dismissed
16507: PPUSH
16508: CALL_OW 104
// Video ( false ) ;
16512: LD_INT 0
16514: PPUSH
16515: CALL 101874 0 1
// end ; until missionStage > 5 ;
16519: LD_EXP 15
16523: PUSH
16524: LD_INT 5
16526: GREATER
16527: IFFALSE 16254
// end ;
16529: PPOPN 1
16531: END
// every 0 0$30 trigger missionStart and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 4 and missionStage = 2 do var i , tmp , tmp2 , retreat , arm , ru , un ;
16532: LD_EXP 13
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 4
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PPUSH
16561: CALL_OW 69
16565: PUSH
16566: LD_INT 4
16568: GREATEREQUAL
16569: AND
16570: PUSH
16571: LD_EXP 15
16575: PUSH
16576: LD_INT 2
16578: EQUAL
16579: AND
16580: IFFALSE 18138
16582: GO 16584
16584: DISABLE
16585: LD_INT 0
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
// begin missionStage := 3 ;
16594: LD_ADDR_EXP 15
16598: PUSH
16599: LD_INT 3
16601: ST_TO_ADDR
// retreat := false ;
16602: LD_ADDR_VAR 0 4
16606: PUSH
16607: LD_INT 0
16609: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16610: LD_ADDR_VAR 0 5
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_INT 4
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 69
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16648: LD_INT 35
16650: PPUSH
16651: CALL_OW 67
// until mc_vehicles [ 4 ] >= 4 ;
16655: LD_EXP 118
16659: PUSH
16660: LD_INT 4
16662: ARRAY
16663: PUSH
16664: LD_INT 4
16666: GREATEREQUAL
16667: IFFALSE 16648
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff ( Powell ^ vip ) ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_INT 4
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 2
16686: PUSH
16687: LD_INT 25
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 25
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 25
16709: PUSH
16710: LD_INT 3
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 25
16719: PUSH
16720: LD_INT 4
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 25
16729: PUSH
16730: LD_INT 5
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PPUSH
16749: CALL_OW 69
16753: PUSH
16754: LD_EXP 55
16758: PUSH
16759: LD_EXP 56
16763: ADD
16764: DIFF
16765: ST_TO_ADDR
// tmp2 := UnitFilter ( tmp , [ f_sex , sex_male ] ) ;
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_VAR 0 2
16775: PPUSH
16776: LD_INT 26
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 72
16790: ST_TO_ADDR
// tmp := tmp diff tmp2 ;
16791: LD_ADDR_VAR 0 2
16795: PUSH
16796: LD_VAR 0 2
16800: PUSH
16801: LD_VAR 0 3
16805: DIFF
16806: ST_TO_ADDR
// for i = 1 to 4 do
16807: LD_ADDR_VAR 0 1
16811: PUSH
16812: DOUBLE
16813: LD_INT 1
16815: DEC
16816: ST_TO_ADDR
16817: LD_INT 4
16819: PUSH
16820: FOR_TO
16821: IFFALSE 16987
// begin if tmp2 then
16823: LD_VAR 0 3
16827: IFFALSE 16908
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp2 [ tmp2 ] ) ;
16829: LD_ADDR_EXP 18
16833: PUSH
16834: LD_EXP 18
16838: PPUSH
16839: LD_INT 1
16841: PPUSH
16842: LD_EXP 18
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PUSH
16851: LD_VAR 0 3
16855: PUSH
16856: LD_VAR 0 3
16860: ARRAY
16861: ADD
16862: PPUSH
16863: CALL_OW 1
16867: ST_TO_ADDR
// SetTag ( tmp2 [ tmp2 ] , 1 ) ;
16868: LD_VAR 0 3
16872: PUSH
16873: LD_VAR 0 3
16877: ARRAY
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 109
// tmp2 := Delete ( tmp2 , tmp2 ) ;
16886: LD_ADDR_VAR 0 3
16890: PUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_VAR 0 3
16900: PPUSH
16901: CALL_OW 3
16905: ST_TO_ADDR
// end else
16906: GO 16985
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp [ tmp ] ) ;
16908: LD_ADDR_EXP 18
16912: PUSH
16913: LD_EXP 18
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_EXP 18
16925: PUSH
16926: LD_INT 1
16928: ARRAY
16929: PUSH
16930: LD_VAR 0 2
16934: PUSH
16935: LD_VAR 0 2
16939: ARRAY
16940: ADD
16941: PPUSH
16942: CALL_OW 1
16946: ST_TO_ADDR
// SetTag ( tmp [ tmp ] , 1 ) ;
16947: LD_VAR 0 2
16951: PUSH
16952: LD_VAR 0 2
16956: ARRAY
16957: PPUSH
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 109
// tmp := Delete ( tmp , tmp ) ;
16965: LD_ADDR_VAR 0 2
16969: PUSH
16970: LD_VAR 0 2
16974: PPUSH
16975: LD_VAR 0 2
16979: PPUSH
16980: CALL_OW 3
16984: ST_TO_ADDR
// end ; end ;
16985: GO 16820
16987: POP
16988: POP
// if tmp2 then
16989: LD_VAR 0 3
16993: IFFALSE 17011
// tmp := tmp union tmp2 ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_VAR 0 2
17004: PUSH
17005: LD_VAR 0 3
17009: UNION
17010: ST_TO_ADDR
// for i = 1 to 4 do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: DOUBLE
17017: LD_INT 1
17019: DEC
17020: ST_TO_ADDR
17021: LD_INT 4
17023: PUSH
17024: FOR_TO
17025: IFFALSE 17074
// powellSquadAttack := Replace ( powellSquadAttack , 2 , powellSquadAttack [ 2 ] ^ tmp [ tmp - i ] ) ;
17027: LD_ADDR_EXP 18
17031: PUSH
17032: LD_EXP 18
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: LD_EXP 18
17044: PUSH
17045: LD_INT 2
17047: ARRAY
17048: PUSH
17049: LD_VAR 0 2
17053: PUSH
17054: LD_VAR 0 2
17058: PUSH
17059: LD_VAR 0 1
17063: MINUS
17064: ARRAY
17065: ADD
17066: PPUSH
17067: CALL_OW 1
17071: ST_TO_ADDR
17072: GO 17024
17074: POP
17075: POP
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff powellSquadAttack [ 1 ] ) ;
17076: LD_ADDR_EXP 99
17080: PUSH
17081: LD_EXP 99
17085: PPUSH
17086: LD_INT 4
17088: PPUSH
17089: LD_EXP 99
17093: PUSH
17094: LD_INT 4
17096: ARRAY
17097: PUSH
17098: LD_EXP 18
17102: PUSH
17103: LD_INT 1
17105: ARRAY
17106: DIFF
17107: PPUSH
17108: CALL_OW 1
17112: ST_TO_ADDR
// for i in powellSquadAttack [ 1 ] do
17113: LD_ADDR_VAR 0 1
17117: PUSH
17118: LD_EXP 18
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17231
// begin if IsInUnit ( i ) then
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL_OW 310
17139: IFFALSE 17150
// ComExitBuilding ( i ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 122
// if GetClass ( i ) <> 1 then
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 257
17159: PUSH
17160: LD_INT 1
17162: NONEQUAL
17163: IFFALSE 17200
// begin AddComEnterUnit ( i , arm ) ;
17165: LD_VAR 0 1
17169: PPUSH
17170: LD_VAR 0 5
17174: PPUSH
17175: CALL_OW 180
// AddComChangeProfession ( i , class_soldier ) ;
17179: LD_VAR 0 1
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL_OW 183
// AddComExitBuilding ( i ) ;
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 182
// end ; AddComMoveXY ( i , 60 , 94 ) ;
17200: LD_VAR 0 1
17204: PPUSH
17205: LD_INT 60
17207: PPUSH
17208: LD_INT 94
17210: PPUSH
17211: CALL_OW 171
// AddComTurnUnit ( i , Powell ) ;
17215: LD_VAR 0 1
17219: PPUSH
17220: LD_EXP 55
17224: PPUSH
17225: CALL_OW 179
// end ;
17229: GO 17127
17231: POP
17232: POP
// wait ( 0 0$15 ) ;
17233: LD_INT 525
17235: PPUSH
17236: CALL_OW 67
// Say ( Powell , D4-Pow-1 ) ;
17240: LD_EXP 55
17244: PPUSH
17245: LD_STRING D4-Pow-1
17247: PPUSH
17248: CALL_OW 88
// tmp := UnitFilter ( powellSquadAttack [ 1 ] , [ f_sex , sex_male ] ) ;
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_EXP 18
17261: PUSH
17262: LD_INT 1
17264: ARRAY
17265: PPUSH
17266: LD_INT 26
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PPUSH
17276: CALL_OW 72
17280: ST_TO_ADDR
// if tmp then
17281: LD_VAR 0 2
17285: IFFALSE 17303
// Say ( tmp [ 1 ] , D4-Sol1-1 ) ;
17287: LD_VAR 0 2
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: LD_STRING D4-Sol1-1
17298: PPUSH
17299: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
17303: LD_EXP 55
17307: PPUSH
17308: LD_STRING D4-Pow-2
17310: PPUSH
17311: CALL_OW 88
// for i = 1 to powellSquadAttack [ 1 ] do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: DOUBLE
17321: LD_INT 1
17323: DEC
17324: ST_TO_ADDR
17325: LD_EXP 18
17329: PUSH
17330: LD_INT 1
17332: ARRAY
17333: PUSH
17334: FOR_TO
17335: IFFALSE 17428
// begin ComEnterUnit ( powellSquadAttack [ 1 ] [ i ] , mc_vehicles [ 4 ] [ 1 ] ) ;
17337: LD_EXP 18
17341: PUSH
17342: LD_INT 1
17344: ARRAY
17345: PUSH
17346: LD_VAR 0 1
17350: ARRAY
17351: PPUSH
17352: LD_EXP 118
17356: PUSH
17357: LD_INT 4
17359: ARRAY
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: CALL_OW 120
// mc_vehicles := Replace ( mc_vehicles , 4 , Delete ( mc_vehicles [ 4 ] , 1 ) ) ;
17369: LD_ADDR_EXP 118
17373: PUSH
17374: LD_EXP 118
17378: PPUSH
17379: LD_INT 4
17381: PPUSH
17382: LD_EXP 118
17386: PUSH
17387: LD_INT 4
17389: ARRAY
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 3
17398: PPUSH
17399: CALL_OW 1
17403: ST_TO_ADDR
// DoNotAttack ( 8 , powellSquadAttack [ 1 ] [ i ] ) ;
17404: LD_INT 8
17406: PPUSH
17407: LD_EXP 18
17411: PUSH
17412: LD_INT 1
17414: ARRAY
17415: PUSH
17416: LD_VAR 0 1
17420: ARRAY
17421: PPUSH
17422: CALL_OW 471
// end ;
17426: GO 17334
17428: POP
17429: POP
// repeat wait ( 0 0$1 ) ;
17430: LD_INT 35
17432: PPUSH
17433: CALL_OW 67
// until UnitFilter ( powellSquadAttack [ 1 ] , [ f_driving ] ) >= 4 ;
17437: LD_EXP 18
17441: PUSH
17442: LD_INT 1
17444: ARRAY
17445: PPUSH
17446: LD_INT 55
17448: PUSH
17449: EMPTY
17450: LIST
17451: PPUSH
17452: CALL_OW 72
17456: PUSH
17457: LD_INT 4
17459: GREATEREQUAL
17460: IFFALSE 17430
// ComMoveXY ( powellSquadAttack [ 1 ] , 69 , 94 ) ;
17462: LD_EXP 18
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PPUSH
17471: LD_INT 69
17473: PPUSH
17474: LD_INT 94
17476: PPUSH
17477: CALL_OW 111
// AddComMoveXY ( powellSquadAttack [ 1 ] , 82 , 83 ) ;
17481: LD_EXP 18
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: PPUSH
17490: LD_INT 82
17492: PPUSH
17493: LD_INT 83
17495: PPUSH
17496: CALL_OW 171
// AddComAgressiveMove ( powellSquadAttack [ 1 ] , 77 , 69 ) ;
17500: LD_EXP 18
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: PPUSH
17509: LD_INT 77
17511: PPUSH
17512: LD_INT 69
17514: PPUSH
17515: CALL_OW 174
// repeat wait ( 3 ) ;
17519: LD_INT 3
17521: PPUSH
17522: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 18
17535: PUSH
17536: LD_INT 1
17538: ARRAY
17539: PUSH
17540: FOR_IN
17541: IFFALSE 17650
// begin if GetLives ( i ) < 990 then
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL_OW 256
17552: PUSH
17553: LD_INT 990
17555: LESS
17556: IFFALSE 17570
// SetLives ( i , 1000 ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_INT 1000
17565: PPUSH
17566: CALL_OW 234
// if not IsInUnit ( i ) then
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 310
17579: NOT
17580: IFFALSE 17648
// begin if not retreat and GetSex ( i ) = sex_male then
17582: LD_VAR 0 4
17586: NOT
17587: PUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 258
17597: PUSH
17598: LD_INT 1
17600: EQUAL
17601: AND
17602: IFFALSE 17648
// begin retreat := true ;
17604: LD_ADDR_VAR 0 4
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// SetTag ( i , 2 ) ;
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_INT 2
17619: PPUSH
17620: CALL_OW 109
// Say ( i , D4a-Sol1-1 ) ;
17624: LD_VAR 0 1
17628: PPUSH
17629: LD_STRING D4a-Sol1-1
17631: PPUSH
17632: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
17636: LD_EXP 55
17640: PPUSH
17641: LD_STRING D4a-Pow-1
17643: PPUSH
17644: CALL_OW 88
// end ; end ; end ;
17648: GO 17540
17650: POP
17651: POP
// until UnitFilter ( powellSquadAttack [ 1 ] , [ [ f_inarea , powellBase ] , [ f_not , [ f_driving ] ] ] ) >= 4 ;
17652: LD_EXP 18
17656: PUSH
17657: LD_INT 1
17659: ARRAY
17660: PPUSH
17661: LD_INT 95
17663: PUSH
17664: LD_INT 9
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: LD_INT 55
17676: PUSH
17677: EMPTY
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PPUSH
17688: CALL_OW 72
17692: PUSH
17693: LD_INT 4
17695: GREATEREQUAL
17696: IFFALSE 17519
// for i in powellSquadAttack [ 1 ] do
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: LD_EXP 18
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PUSH
17712: FOR_IN
17713: IFFALSE 17849
// begin if GetTag ( i ) = 2 then
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 110
17724: PUSH
17725: LD_INT 2
17727: EQUAL
17728: IFFALSE 17790
// begin ComMoveXY ( i , 60 , 94 ) ;
17730: LD_VAR 0 1
17734: PPUSH
17735: LD_INT 60
17737: PPUSH
17738: LD_INT 94
17740: PPUSH
17741: CALL_OW 111
// AddComTurnUnit ( i , Powell ) ;
17745: LD_VAR 0 1
17749: PPUSH
17750: LD_EXP 55
17754: PPUSH
17755: CALL_OW 179
// wait ( 0 0$3 ) ;
17759: LD_INT 105
17761: PPUSH
17762: CALL_OW 67
// Say ( i , D4a-Sol1-2 ) ;
17766: LD_VAR 0 1
17770: PPUSH
17771: LD_STRING D4a-Sol1-2
17773: PPUSH
17774: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
17778: LD_EXP 55
17782: PPUSH
17783: LD_STRING D4a-Pow-2
17785: PPUSH
17786: CALL_OW 88
// end ; SetTag ( i , 0 ) ;
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_INT 0
17797: PPUSH
17798: CALL_OW 109
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] union i ) ;
17802: LD_ADDR_EXP 99
17806: PUSH
17807: LD_EXP 99
17811: PPUSH
17812: LD_INT 4
17814: PPUSH
17815: LD_EXP 99
17819: PUSH
17820: LD_INT 4
17822: ARRAY
17823: PUSH
17824: LD_VAR 0 1
17828: UNION
17829: PPUSH
17830: CALL_OW 1
17834: ST_TO_ADDR
// NormalAttack ( 8 , i ) ;
17835: LD_INT 8
17837: PPUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 472
// end ;
17847: GO 17712
17849: POP
17850: POP
// wait ( 4 4$00 ) ;
17851: LD_INT 8400
17853: PPUSH
17854: CALL_OW 67
// uc_side := 6 ;
17858: LD_ADDR_OWVAR 20
17862: PUSH
17863: LD_INT 6
17865: ST_TO_ADDR
// uc_nation := 3 ;
17866: LD_ADDR_OWVAR 21
17870: PUSH
17871: LD_INT 3
17873: ST_TO_ADDR
// ru := [ ] ;
17874: LD_ADDR_VAR 0 6
17878: PUSH
17879: EMPTY
17880: ST_TO_ADDR
// for i = 1 to 4 do
17881: LD_ADDR_VAR 0 1
17885: PUSH
17886: DOUBLE
17887: LD_INT 1
17889: DEC
17890: ST_TO_ADDR
17891: LD_INT 4
17893: PUSH
17894: FOR_TO
17895: IFFALSE 17996
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , 89 ) ;
17897: LD_INT 22
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 3
17905: PPUSH
17906: LD_INT 43
17908: PUSH
17909: LD_INT 44
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 2
17921: PPUSH
17922: CALL_OW 12
17926: ARRAY
17927: PPUSH
17928: LD_INT 89
17930: PPUSH
17931: CALL 66219 0 5
// un := CreateVehicle ;
17935: LD_ADDR_VAR 0 7
17939: PUSH
17940: CALL_OW 45
17944: ST_TO_ADDR
// SetDir ( un , 4 ) ;
17945: LD_VAR 0 7
17949: PPUSH
17950: LD_INT 4
17952: PPUSH
17953: CALL_OW 233
// PlaceUnitXYR ( un , 136 , 90 , 8 , false ) ;
17957: LD_VAR 0 7
17961: PPUSH
17962: LD_INT 136
17964: PPUSH
17965: LD_INT 90
17967: PPUSH
17968: LD_INT 8
17970: PPUSH
17971: LD_INT 0
17973: PPUSH
17974: CALL_OW 50
// ru := ru ^ un ;
17978: LD_ADDR_VAR 0 6
17982: PUSH
17983: LD_VAR 0 6
17987: PUSH
17988: LD_VAR 0 7
17992: ADD
17993: ST_TO_ADDR
// end ;
17994: GO 17894
17996: POP
17997: POP
// if ru then
17998: LD_VAR 0 6
18002: IFFALSE 18019
// ComAgressiveMove ( ru , 80 , 93 ) ;
18004: LD_VAR 0 6
18008: PPUSH
18009: LD_INT 80
18011: PPUSH
18012: LD_INT 93
18014: PPUSH
18015: CALL_OW 114
// wait ( 8 8$00 ) ;
18019: LD_INT 16800
18021: PPUSH
18022: CALL_OW 67
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
18026: LD_INT 4
18028: PPUSH
18029: LD_INT 3
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 5
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 4
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: LD_INT 6
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 4
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 7
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: LD_INT 7
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: LD_INT 5
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL 53631 0 2
// missionStage := 4 ;
18130: LD_ADDR_EXP 15
18134: PUSH
18135: LD_INT 4
18137: ST_TO_ADDR
// end ;
18138: PPOPN 7
18140: END
// every 0 0$30 trigger missionStage = 4 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 5 do var i , j , tmp , tmp2 , xy , forces , _xy , dist , fac , arm , speaker , emp_towers , veh ;
18141: LD_EXP 15
18145: PUSH
18146: LD_INT 4
18148: EQUAL
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_INT 4
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 21
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: PUSH
18179: LD_INT 5
18181: GREATEREQUAL
18182: AND
18183: IFFALSE 22237
18185: GO 18187
18187: DISABLE
18188: LD_INT 0
18190: PPUSH
18191: PPUSH
18192: PPUSH
18193: PPUSH
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
18199: PPUSH
18200: PPUSH
18201: PPUSH
18202: PPUSH
// begin missionStage := 5 ;
18203: LD_ADDR_EXP 15
18207: PUSH
18208: LD_INT 5
18210: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
18211: LD_ADDR_VAR 0 10
18215: PUSH
18216: LD_INT 22
18218: PUSH
18219: LD_INT 4
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 30
18231: PUSH
18232: LD_INT 4
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 30
18241: PUSH
18242: LD_INT 5
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: ST_TO_ADDR
// forces := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 16 ] ] , [ f_not , [ f_class , 12 ] ] ] ) diff Powell ;
18263: LD_ADDR_VAR 0 6
18267: PUSH
18268: LD_INT 22
18270: PUSH
18271: LD_INT 4
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 21
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 3
18290: PUSH
18291: LD_INT 25
18293: PUSH
18294: LD_INT 16
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: LD_INT 25
18310: PUSH
18311: LD_INT 12
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: PUSH
18333: LD_EXP 55
18337: DIFF
18338: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18339: LD_ADDR_VAR 0 9
18343: PUSH
18344: LD_INT 22
18346: PUSH
18347: LD_INT 4
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// until mc_vehicles [ 4 ] >= 5 ;
18384: LD_EXP 118
18388: PUSH
18389: LD_INT 4
18391: ARRAY
18392: PUSH
18393: LD_INT 5
18395: GREATEREQUAL
18396: IFFALSE 18377
// powellAllowRetreat := false ;
18398: LD_ADDR_EXP 19
18402: PUSH
18403: LD_INT 0
18405: ST_TO_ADDR
// wait ( 0 0$20 ) ;
18406: LD_INT 700
18408: PPUSH
18409: CALL_OW 67
// activeAttacks := false ;
18413: LD_ADDR_EXP 16
18417: PUSH
18418: LD_INT 0
18420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18421: LD_INT 35
18423: PPUSH
18424: CALL_OW 67
// until FilterAllUnits ( [ f_side , 6 ] ) = 0 ;
18428: LD_INT 22
18430: PUSH
18431: LD_INT 6
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: PUSH
18443: LD_INT 0
18445: EQUAL
18446: IFFALSE 18421
// tmp := mc_vehicles [ 4 ] ;
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: LD_EXP 118
18457: PUSH
18458: LD_INT 4
18460: ARRAY
18461: ST_TO_ADDR
// for i = 1 to powellSquadAttack do
18462: LD_ADDR_VAR 0 1
18466: PUSH
18467: DOUBLE
18468: LD_INT 1
18470: DEC
18471: ST_TO_ADDR
18472: LD_EXP 18
18476: PUSH
18477: FOR_TO
18478: IFFALSE 18739
// begin for j in powellSquadAttack [ i ] do
18480: LD_ADDR_VAR 0 2
18484: PUSH
18485: LD_EXP 18
18489: PUSH
18490: LD_VAR 0 1
18494: ARRAY
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18735
// begin forces := forces diff j ;
18499: LD_ADDR_VAR 0 6
18503: PUSH
18504: LD_VAR 0 6
18508: PUSH
18509: LD_VAR 0 2
18513: DIFF
18514: ST_TO_ADDR
// SetTag ( j , 1 ) ;
18515: LD_VAR 0 2
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 109
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// if IsInUnit ( j ) then
18534: LD_VAR 0 2
18538: PPUSH
18539: CALL_OW 310
18543: IFFALSE 18554
// ComExitBuilding ( j ) ;
18545: LD_VAR 0 2
18549: PPUSH
18550: CALL_OW 122
// if GetClass ( j ) <> 1 then
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 257
18563: PUSH
18564: LD_INT 1
18566: NONEQUAL
18567: IFFALSE 18647
// begin if UnitsInside ( arm [ 1 ] ) >= 5 then
18569: LD_VAR 0 10
18573: PUSH
18574: LD_INT 1
18576: ARRAY
18577: PPUSH
18578: CALL_OW 313
18582: PUSH
18583: LD_INT 5
18585: GREATEREQUAL
18586: IFFALSE 18608
// AddComEnterUnit ( j , arm [ 2 ] ) else
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_VAR 0 10
18597: PUSH
18598: LD_INT 2
18600: ARRAY
18601: PPUSH
18602: CALL_OW 180
18606: GO 18626
// AddComEnterUnit ( j , arm [ 1 ] ) ;
18608: LD_VAR 0 2
18612: PPUSH
18613: LD_VAR 0 10
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: CALL_OW 180
// AddComChangeProfession ( j , 1 ) ;
18626: LD_VAR 0 2
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 183
// AddComExitBuilding ( j ) ;
18638: LD_VAR 0 2
18642: PPUSH
18643: CALL_OW 182
// end ; if i = 2 then
18647: LD_VAR 0 1
18651: PUSH
18652: LD_INT 2
18654: EQUAL
18655: IFFALSE 18672
// AddComMoveXY ( j , 61 , 93 ) ;
18657: LD_VAR 0 2
18661: PPUSH
18662: LD_INT 61
18664: PPUSH
18665: LD_INT 93
18667: PPUSH
18668: CALL_OW 171
// if i = 1 then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_INT 1
18679: EQUAL
18680: IFFALSE 18733
// begin AddComEnterUnit ( j , tmp [ 1 ] ) ;
18682: LD_VAR 0 2
18686: PPUSH
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 1
18694: ARRAY
18695: PPUSH
18696: CALL_OW 180
// tmp := Delete ( tmp , 1 ) ;
18700: LD_ADDR_VAR 0 3
18704: PUSH
18705: LD_VAR 0 3
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 3
18717: ST_TO_ADDR
// AddComMoveXY ( j , 69 , 94 ) ;
18718: LD_VAR 0 2
18722: PPUSH
18723: LD_INT 69
18725: PPUSH
18726: LD_INT 94
18728: PPUSH
18729: CALL_OW 171
// end ; end ;
18733: GO 18496
18735: POP
18736: POP
// end ;
18737: GO 18477
18739: POP
18740: POP
// wait ( 0 0$45 ) ;
18741: LD_INT 1575
18743: PPUSH
18744: CALL_OW 67
// MC_Kill ( 4 ) ;
18748: LD_INT 4
18750: PPUSH
18751: CALL 31923 0 1
// tmp := UnitsInside ( fac ) ;
18755: LD_ADDR_VAR 0 3
18759: PUSH
18760: LD_VAR 0 9
18764: PPUSH
18765: CALL_OW 313
18769: ST_TO_ADDR
// if tmp then
18770: LD_VAR 0 3
18774: IFFALSE 18895
// for i in tmp do
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 3
18785: PUSH
18786: FOR_IN
18787: IFFALSE 18893
// begin ComExitBuilding ( i ) ;
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 122
// if UnitsInside ( arm [ 2 ] ) < 6 then
18798: LD_VAR 0 10
18802: PUSH
18803: LD_INT 2
18805: ARRAY
18806: PPUSH
18807: CALL_OW 313
18811: PUSH
18812: LD_INT 6
18814: LESS
18815: IFFALSE 18837
// AddComEnterUnit ( i , arm [ 2 ] ) else
18817: LD_VAR 0 1
18821: PPUSH
18822: LD_VAR 0 10
18826: PUSH
18827: LD_INT 2
18829: ARRAY
18830: PPUSH
18831: CALL_OW 180
18835: GO 18891
// if UnitsInside ( arm [ 1 ] ) < 6 then
18837: LD_VAR 0 10
18841: PUSH
18842: LD_INT 1
18844: ARRAY
18845: PPUSH
18846: CALL_OW 313
18850: PUSH
18851: LD_INT 6
18853: LESS
18854: IFFALSE 18876
// AddComEnterUnit ( i , arm [ 1 ] ) else
18856: LD_VAR 0 1
18860: PPUSH
18861: LD_VAR 0 10
18865: PUSH
18866: LD_INT 1
18868: ARRAY
18869: PPUSH
18870: CALL_OW 180
18874: GO 18891
// AddComMoveXY ( i , 37 , 68 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_INT 37
18883: PPUSH
18884: LD_INT 68
18886: PPUSH
18887: CALL_OW 171
// end ;
18891: GO 18786
18893: POP
18894: POP
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) diff vip ;
18895: LD_ADDR_VAR 0 11
18899: PUSH
18900: LD_VAR 0 6
18904: PPUSH
18905: LD_INT 26
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PPUSH
18915: CALL_OW 72
18919: PUSH
18920: LD_EXP 56
18924: DIFF
18925: ST_TO_ADDR
// if not speaker then
18926: LD_VAR 0 11
18930: NOT
18931: IFFALSE 18958
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) ;
18933: LD_ADDR_VAR 0 11
18937: PUSH
18938: LD_VAR 0 6
18942: PPUSH
18943: LD_INT 26
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PPUSH
18953: CALL_OW 72
18957: ST_TO_ADDR
// if speaker then
18958: LD_VAR 0 11
18962: IFFALSE 18978
// speaker := speaker [ 1 ] ;
18964: LD_ADDR_VAR 0 11
18968: PUSH
18969: LD_VAR 0 11
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: ST_TO_ADDR
// Video ( true ) ;
18978: LD_INT 1
18980: PPUSH
18981: CALL 101874 0 1
// CenterNowOnUnits ( Powell ) ;
18985: LD_EXP 55
18989: PPUSH
18990: CALL_OW 87
// tmp := UnitFilter ( forces , [ f_not , [ f_class , 1 ] ] ) ;
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: LD_VAR 0 6
19003: PPUSH
19004: LD_INT 3
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 72
19025: ST_TO_ADDR
// emp_towers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
19026: LD_ADDR_VAR 0 12
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_INT 4
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 30
19043: PUSH
19044: LD_INT 32
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 58
19053: PUSH
19054: EMPTY
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: ST_TO_ADDR
// for i = 1 to 6 do
19067: LD_ADDR_VAR 0 1
19071: PUSH
19072: DOUBLE
19073: LD_INT 1
19075: DEC
19076: ST_TO_ADDR
19077: LD_INT 6
19079: PUSH
19080: FOR_TO
19081: IFFALSE 19222
// begin if IsInUnit ( tmp [ i ] ) then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_VAR 0 1
19092: ARRAY
19093: PPUSH
19094: CALL_OW 310
19098: IFFALSE 19115
// ComExitBuilding ( tmp [ i ] ) ;
19100: LD_VAR 0 3
19104: PUSH
19105: LD_VAR 0 1
19109: ARRAY
19110: PPUSH
19111: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
19115: LD_VAR 0 3
19119: PUSH
19120: LD_VAR 0 1
19124: ARRAY
19125: PPUSH
19126: LD_VAR 0 10
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
19139: LD_VAR 0 3
19143: PUSH
19144: LD_VAR 0 1
19148: ARRAY
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: CALL_OW 183
// if emp_towers then
19157: LD_VAR 0 12
19161: IFFALSE 19220
// begin AddComExitBuilding ( tmp [ i ] ) ;
19163: LD_VAR 0 3
19167: PUSH
19168: LD_VAR 0 1
19172: ARRAY
19173: PPUSH
19174: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emp_towers [ 1 ] ) ;
19178: LD_VAR 0 3
19182: PUSH
19183: LD_VAR 0 1
19187: ARRAY
19188: PPUSH
19189: LD_VAR 0 12
19193: PUSH
19194: LD_INT 1
19196: ARRAY
19197: PPUSH
19198: CALL_OW 180
// emp_towers := Delete ( emp_towers , 1 ) ;
19202: LD_ADDR_VAR 0 12
19206: PUSH
19207: LD_VAR 0 12
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 3
19219: ST_TO_ADDR
// end ; end ;
19220: GO 19080
19222: POP
19223: POP
// tmp := UnitFilter ( powellSquadAttack [ 1 ] ^ powellSquadAttack [ 2 ] , [ f_sex , sex_male ] ) ;
19224: LD_ADDR_VAR 0 3
19228: PUSH
19229: LD_EXP 18
19233: PUSH
19234: LD_INT 1
19236: ARRAY
19237: PUSH
19238: LD_EXP 18
19242: PUSH
19243: LD_INT 2
19245: ARRAY
19246: ADD
19247: PPUSH
19248: LD_INT 26
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 72
19262: ST_TO_ADDR
// for i in powellSquadAttack [ 2 ] do
19263: LD_ADDR_VAR 0 1
19267: PUSH
19268: LD_EXP 18
19272: PUSH
19273: LD_INT 2
19275: ARRAY
19276: PUSH
19277: FOR_IN
19278: IFFALSE 19296
// ComTurnUnit ( i , Powell ) ;
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 55
19289: PPUSH
19290: CALL_OW 119
19294: GO 19277
19296: POP
19297: POP
// Say ( Powell , D5-Pow-1 ) ;
19298: LD_EXP 55
19302: PPUSH
19303: LD_STRING D5-Pow-1
19305: PPUSH
19306: CALL_OW 88
// if tmp then
19310: LD_VAR 0 3
19314: IFFALSE 19332
// Say ( tmp [ 1 ] , D5-Sol2-1 ) ;
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 1
19323: ARRAY
19324: PPUSH
19325: LD_STRING D5-Sol2-1
19327: PPUSH
19328: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
19332: LD_EXP 55
19336: PPUSH
19337: LD_STRING D5-Pow-2
19339: PPUSH
19340: CALL_OW 88
// if tmp > 1 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 1
19351: GREATER
19352: IFFALSE 19370
// Say ( tmp [ 2 ] , D5-Sol2-2 ) ;
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 2
19361: ARRAY
19362: PPUSH
19363: LD_STRING D5-Sol2-2
19365: PPUSH
19366: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
19370: LD_EXP 55
19374: PPUSH
19375: LD_STRING D5-Pow-3
19377: PPUSH
19378: CALL_OW 88
// wait ( 0 0$1 ) ;
19382: LD_INT 35
19384: PPUSH
19385: CALL_OW 67
// tmp := powellSquadAttack [ 1 ] union powellSquadAttack [ 2 ] ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_EXP 18
19398: PUSH
19399: LD_INT 1
19401: ARRAY
19402: PUSH
19403: LD_EXP 18
19407: PUSH
19408: LD_INT 2
19410: ARRAY
19411: UNION
19412: ST_TO_ADDR
// ComAgressiveMove ( tmp , 80 , 67 ) ;
19413: LD_VAR 0 3
19417: PPUSH
19418: LD_INT 80
19420: PPUSH
19421: LD_INT 67
19423: PPUSH
19424: CALL_OW 114
// wait ( 0 0$2 ) ;
19428: LD_INT 70
19430: PPUSH
19431: CALL_OW 67
// CenterOnXY ( 79 , 72 ) ;
19435: LD_INT 79
19437: PPUSH
19438: LD_INT 72
19440: PPUSH
19441: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
19445: LD_INT 35
19447: PPUSH
19448: CALL_OW 67
// until UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) ;
19452: LD_VAR 0 3
19456: PPUSH
19457: LD_INT 3
19459: PUSH
19460: LD_INT 24
19462: PUSH
19463: LD_INT 1000
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 72
19478: IFFALSE 19445
// Say ( Powell , D5a-Pow-1 ) ;
19480: LD_EXP 55
19484: PPUSH
19485: LD_STRING D5a-Pow-1
19487: PPUSH
19488: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
19492: LD_EXP 55
19496: PPUSH
19497: LD_STRING D5a-Pow-1a
19499: PPUSH
19500: CALL_OW 88
// wait ( 0 0$0.3 ) ;
19504: LD_INT 10
19506: PPUSH
19507: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
19511: LD_EXP 55
19515: PPUSH
19516: LD_STRING D5a-Pow-1b
19518: PPUSH
19519: CALL_OW 88
// Say ( Powell , D5a-Pow-1c ) ;
19523: LD_EXP 55
19527: PPUSH
19528: LD_STRING D5a-Pow-1c
19530: PPUSH
19531: CALL_OW 88
// Say ( Powell , D5a-Pow-1d ) ;
19535: LD_EXP 55
19539: PPUSH
19540: LD_STRING D5a-Pow-1d
19542: PPUSH
19543: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
19547: LD_INT 35
19549: PPUSH
19550: CALL_OW 67
// if not HasTask ( tmp ) then
19554: LD_VAR 0 3
19558: PPUSH
19559: CALL_OW 314
19563: NOT
19564: IFFALSE 19581
// ComAgressiveMove ( tmp , 80 , 67 ) ;
19566: LD_VAR 0 3
19570: PPUSH
19571: LD_INT 80
19573: PPUSH
19574: LD_INT 67
19576: PPUSH
19577: CALL_OW 114
// until not UnitFilter ( tmp , [ f_lives , 1 ] ) ;
19581: LD_VAR 0 3
19585: PPUSH
19586: LD_INT 24
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PPUSH
19596: CALL_OW 72
19600: NOT
19601: IFFALSE 19547
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 60 , 93 , 10 ] , [ f_not , [ f_inside ] ] ] ) diff Powell ;
19603: LD_ADDR_VAR 0 3
19607: PUSH
19608: LD_INT 22
19610: PUSH
19611: LD_INT 4
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 92
19620: PUSH
19621: LD_INT 60
19623: PUSH
19624: LD_INT 93
19626: PUSH
19627: LD_INT 10
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 54
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: PPUSH
19654: CALL_OW 69
19658: PUSH
19659: LD_EXP 55
19663: DIFF
19664: ST_TO_ADDR
// if tmp then
19665: LD_VAR 0 3
19669: IFFALSE 19703
// for i in tmp do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: LD_VAR 0 3
19680: PUSH
19681: FOR_IN
19682: IFFALSE 19701
// ComMoveXY ( i , 36 , 67 ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 36
19691: PPUSH
19692: LD_INT 67
19694: PPUSH
19695: CALL_OW 111
19699: GO 19681
19701: POP
19702: POP
// wait ( 0 0$3 ) ;
19703: LD_INT 105
19705: PPUSH
19706: CALL_OW 67
// Say ( speaker , D6-Sol3-1 ) ;
19710: LD_VAR 0 11
19714: PPUSH
19715: LD_STRING D6-Sol3-1
19717: PPUSH
19718: CALL_OW 88
// CenterNowOnUnits ( Powell ) ;
19722: LD_EXP 55
19726: PPUSH
19727: CALL_OW 87
// Say ( Powell , D6-Pow-1 ) ;
19731: LD_EXP 55
19735: PPUSH
19736: LD_STRING D6-Pow-1
19738: PPUSH
19739: CALL_OW 88
// tmp := [ ] ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: EMPTY
19749: ST_TO_ADDR
// for i = 1 to 2 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 2
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19871
// begin uc_side := 8 ;
19766: LD_ADDR_OWVAR 20
19770: PUSH
19771: LD_INT 8
19773: ST_TO_ADDR
// uc_nation := 2 ;
19774: LD_ADDR_OWVAR 21
19778: PUSH
19779: LD_INT 2
19781: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb , 100 ) ;
19782: LD_INT 14
19784: PPUSH
19785: LD_INT 3
19787: PPUSH
19788: LD_INT 2
19790: PPUSH
19791: LD_INT 29
19793: PPUSH
19794: LD_INT 100
19796: PPUSH
19797: CALL 66219 0 5
// veh := CreateVehicle ;
19801: LD_ADDR_VAR 0 13
19805: PUSH
19806: CALL_OW 45
19810: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
19811: LD_VAR 0 13
19815: PPUSH
19816: LD_INT 4
19818: PPUSH
19819: CALL_OW 233
// PlaceUnitXYR ( veh , 99 , 83 , 5 , false ) ;
19823: LD_VAR 0 13
19827: PPUSH
19828: LD_INT 99
19830: PPUSH
19831: LD_INT 83
19833: PPUSH
19834: LD_INT 5
19836: PPUSH
19837: LD_INT 0
19839: PPUSH
19840: CALL_OW 50
// Connect ( veh ) ;
19844: LD_VAR 0 13
19848: PPUSH
19849: CALL 69274 0 1
// tmp := tmp ^ veh ;
19853: LD_ADDR_VAR 0 3
19857: PUSH
19858: LD_VAR 0 3
19862: PUSH
19863: LD_VAR 0 13
19867: ADD
19868: ST_TO_ADDR
// end ;
19869: GO 19763
19871: POP
19872: POP
// wait ( 0 0$1 ) ;
19873: LD_INT 35
19875: PPUSH
19876: CALL_OW 67
// PlaceSeeing ( 99 , 83 , 1 , 10 ) ;
19880: LD_INT 99
19882: PPUSH
19883: LD_INT 83
19885: PPUSH
19886: LD_INT 1
19888: PPUSH
19889: LD_INT 10
19891: PPUSH
19892: CALL_OW 330
// CenterNowOnXY ( 99 , 83 ) ;
19896: LD_INT 99
19898: PPUSH
19899: LD_INT 83
19901: PPUSH
19902: CALL_OW 86
// Say ( speaker , D6-Sol3-2 ) ;
19906: LD_VAR 0 11
19910: PPUSH
19911: LD_STRING D6-Sol3-2
19913: PPUSH
19914: CALL_OW 88
// async ;
19918: ASYNC
// Say ( Powell , D6-Pow-2 ) ;
19919: LD_EXP 55
19923: PPUSH
19924: LD_STRING D6-Pow-2
19926: PPUSH
19927: CALL_OW 88
// ComAttackUnit ( tmp [ 1 ] , fac ) ;
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 1
19938: ARRAY
19939: PPUSH
19940: LD_VAR 0 9
19944: PPUSH
19945: CALL_OW 115
// ComAttackUnit ( tmp [ 2 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , tmp [ 2 ] ) ) ;
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 2
19956: ARRAY
19957: PPUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 4
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 3
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 69
19986: PPUSH
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 2
19994: ARRAY
19995: PPUSH
19996: CALL_OW 74
20000: PPUSH
20001: CALL_OW 115
// CenterNowOnUnits ( Powell ) ;
20005: LD_EXP 55
20009: PPUSH
20010: CALL_OW 87
// RemoveSeeing ( 99 , 83 , 1 ) ;
20014: LD_INT 99
20016: PPUSH
20017: LD_INT 83
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 331
// repeat wait ( 4 ) ;
20027: LD_INT 4
20029: PPUSH
20030: CALL_OW 67
// if GetLives ( tmp [ 1 ] ) < 1000 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 1
20041: ARRAY
20042: PPUSH
20043: CALL_OW 256
20047: PUSH
20048: LD_INT 1000
20050: LESS
20051: IFFALSE 20069
// SetLives ( tmp [ 1 ] , 1000 ) ;
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 1
20060: ARRAY
20061: PPUSH
20062: LD_INT 1000
20064: PPUSH
20065: CALL_OW 234
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) = 0 ;
20069: LD_INT 22
20071: PUSH
20072: LD_INT 4
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 3
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: CALL_OW 69
20097: PUSH
20098: LD_INT 0
20100: EQUAL
20101: IFFALSE 20027
// sync ;
20103: SYNC
// Say ( Powell , D6a-Pow-1 ) ;
20104: LD_EXP 55
20108: PPUSH
20109: LD_STRING D6a-Pow-1
20111: PPUSH
20112: CALL_OW 88
// Say ( Speaker , D6a-Sol3-1 ) ;
20116: LD_VAR 0 11
20120: PPUSH
20121: LD_STRING D6a-Sol3-1
20123: PPUSH
20124: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
20128: LD_EXP 55
20132: PPUSH
20133: LD_STRING D6a-Pow-2
20135: PPUSH
20136: CALL_OW 88
// Say ( Speaker , D6a-Sol3-2 ) ;
20140: LD_VAR 0 11
20144: PPUSH
20145: LD_STRING D6a-Sol3-2
20147: PPUSH
20148: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
20152: LD_EXP 55
20156: PPUSH
20157: LD_STRING D6a-Pow-3
20159: PPUSH
20160: CALL_OW 88
// powellCenterCameraMode := true ;
20164: LD_ADDR_EXP 20
20168: PUSH
20169: LD_INT 1
20171: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
20172: LD_ADDR_VAR 0 1
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 8
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 25
20189: PUSH
20190: LD_INT 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PPUSH
20201: CALL_OW 69
20205: PUSH
20206: FOR_IN
20207: IFFALSE 20262
// begin SetTag ( i , 1 ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_INT 1
20216: PPUSH
20217: CALL_OW 109
// ComExitBuilding ( i ) ;
20221: LD_VAR 0 1
20225: PPUSH
20226: CALL_OW 122
// AddComMoveXY ( i , 35 , 6 ) ;
20230: LD_VAR 0 1
20234: PPUSH
20235: LD_INT 35
20237: PPUSH
20238: LD_INT 6
20240: PPUSH
20241: CALL_OW 171
// AddComMoveXY ( i , 53 , 4 ) ;
20245: LD_VAR 0 1
20249: PPUSH
20250: LD_INT 53
20252: PPUSH
20253: LD_INT 4
20255: PPUSH
20256: CALL_OW 171
// end ;
20260: GO 20206
20262: POP
20263: POP
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ) ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_INT 22
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 21
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 34
20294: PUSH
20295: LD_INT 12
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: LIST
20310: PPUSH
20311: CALL_OW 69
20315: ST_TO_ADDR
// ComEnterUnit ( Powell , NearestUnitToUnit ( tmp , Powell ) ) ;
20316: LD_EXP 55
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: LD_EXP 55
20330: PPUSH
20331: CALL_OW 74
20335: PPUSH
20336: CALL_OW 120
// AddComMoveXY ( Powell , 100 , 88 ) ;
20340: LD_EXP 55
20344: PPUSH
20345: LD_INT 100
20347: PPUSH
20348: LD_INT 88
20350: PPUSH
20351: CALL_OW 171
// AddComMoveXY ( Powell , 100 , 75 ) ;
20355: LD_EXP 55
20359: PPUSH
20360: LD_INT 100
20362: PPUSH
20363: LD_INT 75
20365: PPUSH
20366: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 53 ) ;
20370: LD_EXP 55
20374: PPUSH
20375: LD_INT 88
20377: PPUSH
20378: LD_INT 53
20380: PPUSH
20381: CALL_OW 171
// DoNotAttack ( 8 , Powell ) ;
20385: LD_INT 8
20387: PPUSH
20388: LD_EXP 55
20392: PPUSH
20393: CALL_OW 471
// repeat wait ( 3 ) ;
20397: LD_INT 3
20399: PPUSH
20400: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 100 , 75 , 6 ] ] ) ;
20404: LD_INT 22
20406: PUSH
20407: LD_INT 4
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 92
20416: PUSH
20417: LD_INT 100
20419: PUSH
20420: LD_INT 75
20422: PUSH
20423: LD_INT 6
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PPUSH
20436: CALL_OW 69
20440: IFFALSE 20397
// async ;
20442: ASYNC
// Say ( Powell , D6b-Pow-1 ) ;
20443: LD_EXP 55
20447: PPUSH
20448: LD_STRING D6b-Pow-1
20450: PPUSH
20451: CALL_OW 88
// repeat wait ( 3 ) ;
20455: LD_INT 3
20457: PPUSH
20458: CALL_OW 67
// if GetLives ( IsInUnit ( Powell ) ) < 1000 then
20462: LD_EXP 55
20466: PPUSH
20467: CALL_OW 310
20471: PPUSH
20472: CALL_OW 256
20476: PUSH
20477: LD_INT 1000
20479: LESS
20480: IFFALSE 20499
// SetLives ( IsInUnit ( Powell ) , 1000 ) ;
20482: LD_EXP 55
20486: PPUSH
20487: CALL_OW 310
20491: PPUSH
20492: LD_INT 1000
20494: PPUSH
20495: CALL_OW 234
// if GetLives ( Powell ) < 1000 then
20499: LD_EXP 55
20503: PPUSH
20504: CALL_OW 256
20508: PUSH
20509: LD_INT 1000
20511: LESS
20512: IFFALSE 20526
// SetLives ( Powell , 1000 ) ;
20514: LD_EXP 55
20518: PPUSH
20519: LD_INT 1000
20521: PPUSH
20522: CALL_OW 234
// if GetDistUnits ( Powell , powellBomb ) < 5 or GetDistUnits ( IsInUnit ( Powell ) , powellBomb ) < 5 then
20526: LD_EXP 55
20530: PPUSH
20531: LD_EXP 60
20535: PPUSH
20536: CALL_OW 296
20540: PUSH
20541: LD_INT 5
20543: LESS
20544: PUSH
20545: LD_EXP 55
20549: PPUSH
20550: CALL_OW 310
20554: PPUSH
20555: LD_EXP 60
20559: PPUSH
20560: CALL_OW 296
20564: PUSH
20565: LD_INT 5
20567: LESS
20568: OR
20569: IFFALSE 20588
// SetLives ( IsInUnit ( Powell ) , 100 ) ;
20571: LD_EXP 55
20575: PPUSH
20576: CALL_OW 310
20580: PPUSH
20581: LD_INT 100
20583: PPUSH
20584: CALL_OW 234
// until not IsInUnit ( Powell ) ;
20588: LD_EXP 55
20592: PPUSH
20593: CALL_OW 310
20597: NOT
20598: IFFALSE 20455
// game_speed := 4 ;
20600: LD_ADDR_OWVAR 65
20604: PUSH
20605: LD_INT 4
20607: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1a ) ;
20608: LD_EXP 55
20612: PPUSH
20613: LD_STRING D6b-Pow-1a
20615: PPUSH
20616: CALL_OW 88
// AddComEnterUnit ( Powell , powellBomb ) ;
20620: LD_EXP 55
20624: PPUSH
20625: LD_EXP 60
20629: PPUSH
20630: CALL_OW 180
// sync ;
20634: SYNC
// repeat wait ( 0 0$1 ) ;
20635: LD_INT 35
20637: PPUSH
20638: CALL_OW 67
// until IsInUnit ( Powell ) ;
20642: LD_EXP 55
20646: PPUSH
20647: CALL_OW 310
20651: IFFALSE 20635
// DoNotAttack ( 8 , IsInUnit ( Powell ) ) ;
20653: LD_INT 8
20655: PPUSH
20656: LD_EXP 55
20660: PPUSH
20661: CALL_OW 310
20665: PPUSH
20666: CALL_OW 471
// AddComMoveXY ( Powell , 91 , 44 ) ;
20670: LD_EXP 55
20674: PPUSH
20675: LD_INT 91
20677: PPUSH
20678: LD_INT 44
20680: PPUSH
20681: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
20685: LD_EXP 55
20689: PPUSH
20690: LD_INT 96
20692: PPUSH
20693: LD_INT 44
20695: PPUSH
20696: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
20700: LD_EXP 55
20704: PPUSH
20705: LD_INT 96
20707: PPUSH
20708: LD_INT 41
20710: PPUSH
20711: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
20715: LD_EXP 55
20719: PPUSH
20720: LD_INT 92
20722: PPUSH
20723: LD_INT 39
20725: PPUSH
20726: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
20730: LD_EXP 55
20734: PPUSH
20735: LD_INT 88
20737: PPUSH
20738: LD_INT 41
20740: PPUSH
20741: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
20745: LD_EXP 55
20749: PPUSH
20750: LD_INT 91
20752: PPUSH
20753: LD_INT 44
20755: PPUSH
20756: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
20760: LD_EXP 55
20764: PPUSH
20765: LD_INT 96
20767: PPUSH
20768: LD_INT 44
20770: PPUSH
20771: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
20775: LD_EXP 55
20779: PPUSH
20780: LD_INT 96
20782: PPUSH
20783: LD_INT 41
20785: PPUSH
20786: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
20790: LD_EXP 55
20794: PPUSH
20795: LD_INT 92
20797: PPUSH
20798: LD_INT 39
20800: PPUSH
20801: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
20805: LD_EXP 55
20809: PPUSH
20810: LD_INT 88
20812: PPUSH
20813: LD_INT 41
20815: PPUSH
20816: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
20820: LD_EXP 55
20824: PPUSH
20825: LD_INT 91
20827: PPUSH
20828: LD_INT 44
20830: PPUSH
20831: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 39 ) ;
20835: LD_EXP 55
20839: PPUSH
20840: LD_INT 93
20842: PPUSH
20843: LD_INT 39
20845: PPUSH
20846: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 36 ) ;
20850: LD_EXP 55
20854: PPUSH
20855: LD_INT 93
20857: PPUSH
20858: LD_INT 36
20860: PPUSH
20861: CALL_OW 171
// wait ( 0 0$3.5 ) ;
20865: LD_INT 122
20867: PPUSH
20868: CALL_OW 67
// game_speed := 4 ;
20872: LD_ADDR_OWVAR 65
20876: PUSH
20877: LD_INT 4
20879: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1b ) ;
20880: LD_EXP 55
20884: PPUSH
20885: LD_STRING D6b-Pow-1b
20887: PPUSH
20888: CALL_OW 88
// tmp := [ ] ;
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: EMPTY
20898: ST_TO_ADDR
// xy := [ [ 78 , 47 ] , [ 106 , 53 ] ] ;
20899: LD_ADDR_VAR 0 5
20903: PUSH
20904: LD_INT 78
20906: PUSH
20907: LD_INT 47
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 106
20916: PUSH
20917: LD_INT 53
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_distxy , 90 , 52 , 12 ] ] ) do
20928: LD_ADDR_VAR 0 1
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 8
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 21
20945: PUSH
20946: LD_INT 3
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 92
20955: PUSH
20956: LD_INT 90
20958: PUSH
20959: LD_INT 52
20961: PUSH
20962: LD_INT 12
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: PUSH
20981: FOR_IN
20982: IFFALSE 21007
// tmp := tmp ^ UnitsInside ( i ) ;
20984: LD_ADDR_VAR 0 3
20988: PUSH
20989: LD_VAR 0 3
20993: PUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 313
21003: ADD
21004: ST_TO_ADDR
21005: GO 20981
21007: POP
21008: POP
// for i in tmp do
21009: LD_ADDR_VAR 0 1
21013: PUSH
21014: LD_VAR 0 3
21018: PUSH
21019: FOR_IN
21020: IFFALSE 21182
// begin dist := 9999 ;
21022: LD_ADDR_VAR 0 8
21026: PUSH
21027: LD_INT 9999
21029: ST_TO_ADDR
// _xy := [ ] ;
21030: LD_ADDR_VAR 0 7
21034: PUSH
21035: EMPTY
21036: ST_TO_ADDR
// SetTag ( i , 1 ) ;
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_INT 1
21044: PPUSH
21045: CALL_OW 109
// ComExitBuilding ( i ) ;
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 122
// for j in xy do
21058: LD_ADDR_VAR 0 2
21062: PUSH
21063: LD_VAR 0 5
21067: PUSH
21068: FOR_IN
21069: IFFALSE 21151
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < dist then
21071: LD_VAR 0 1
21075: PPUSH
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 1
21083: ARRAY
21084: PPUSH
21085: LD_VAR 0 2
21089: PUSH
21090: LD_INT 2
21092: ARRAY
21093: PPUSH
21094: CALL_OW 297
21098: PUSH
21099: LD_VAR 0 8
21103: LESS
21104: IFFALSE 21149
// begin dist := GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) ;
21106: LD_ADDR_VAR 0 8
21110: PUSH
21111: LD_VAR 0 1
21115: PPUSH
21116: LD_VAR 0 2
21120: PUSH
21121: LD_INT 1
21123: ARRAY
21124: PPUSH
21125: LD_VAR 0 2
21129: PUSH
21130: LD_INT 2
21132: ARRAY
21133: PPUSH
21134: CALL_OW 297
21138: ST_TO_ADDR
// _xy := j ;
21139: LD_ADDR_VAR 0 7
21143: PUSH
21144: LD_VAR 0 2
21148: ST_TO_ADDR
// end ;
21149: GO 21068
21151: POP
21152: POP
// AddComMoveXY ( i , _xy [ 1 ] , _xy [ 2 ] ) ;
21153: LD_VAR 0 1
21157: PPUSH
21158: LD_VAR 0 7
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: LD_VAR 0 7
21171: PUSH
21172: LD_INT 2
21174: ARRAY
21175: PPUSH
21176: CALL_OW 171
// end ;
21180: GO 21019
21182: POP
21183: POP
// tmp2 := UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_class , 1 ] ] ) ;
21184: LD_ADDR_VAR 0 4
21188: PUSH
21189: LD_VAR 0 3
21193: PPUSH
21194: LD_INT 26
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 25
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PPUSH
21218: CALL_OW 72
21222: ST_TO_ADDR
// if tmp2 < 2 then
21223: LD_VAR 0 4
21227: PUSH
21228: LD_INT 2
21230: LESS
21231: IFFALSE 21300
// tmp2 := FilterAllUnits ( [ [ f_side , 8 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_soldier ] ] ] ) diff [ Kurt , Kozlov ] ;
21233: LD_ADDR_VAR 0 4
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_INT 8
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 26
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 15
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: PUSH
21285: LD_EXP 57
21289: PUSH
21290: LD_EXP 58
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: DIFF
21299: ST_TO_ADDR
// if tmp2 then
21300: LD_VAR 0 4
21304: IFFALSE 21322
// Say ( tmp2 [ 1 ] , D6b-ArSol1-1 ) ;
21306: LD_VAR 0 4
21310: PUSH
21311: LD_INT 1
21313: ARRAY
21314: PPUSH
21315: LD_STRING D6b-ArSol1-1
21317: PPUSH
21318: CALL_OW 88
// async ;
21322: ASYNC
// Say ( Powell , D6b-Pow-2 ) ;
21323: LD_EXP 55
21327: PPUSH
21328: LD_STRING D6b-Pow-2
21330: PPUSH
21331: CALL_OW 88
// if tmp2 > 1 then
21335: LD_VAR 0 4
21339: PUSH
21340: LD_INT 1
21342: GREATER
21343: IFFALSE 21361
// Say ( tmp2 [ 2 ] , D6b-ArSol2-1 ) ;
21345: LD_VAR 0 4
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: PPUSH
21354: LD_STRING D6b-ArSol2-1
21356: PPUSH
21357: CALL_OW 88
// sync ;
21361: SYNC
// repeat wait ( 5 ) ;
21362: LD_INT 5
21364: PPUSH
21365: CALL_OW 67
// until GetSide ( HexInfo ( 93 , 36 ) ) = 4 ;
21369: LD_INT 93
21371: PPUSH
21372: LD_INT 36
21374: PPUSH
21375: CALL_OW 428
21379: PPUSH
21380: CALL_OW 255
21384: PUSH
21385: LD_INT 4
21387: EQUAL
21388: IFFALSE 21362
// DialogueOn ;
21390: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
21394: LD_INT 10
21396: PPUSH
21397: CALL_OW 68
// Say ( Powell , D6b-Pow-2a ) ;
21401: LD_EXP 55
21405: PPUSH
21406: LD_STRING D6b-Pow-2a
21408: PPUSH
21409: CALL_OW 88
// DialogueOff ;
21413: CALL_OW 7
// ComAttackUnit ( IsInUnit ( Powell ) , kozlov_fac ) ;
21417: LD_EXP 55
21421: PPUSH
21422: CALL_OW 310
21426: PPUSH
21427: LD_INT 332
21429: PPUSH
21430: CALL_OW 115
// PlaceSeeing ( 93 , 35 , 1 , - 6 ) ;
21434: LD_INT 93
21436: PPUSH
21437: LD_INT 35
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: LD_INT 6
21445: NEG
21446: PPUSH
21447: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21451: LD_INT 35
21453: PPUSH
21454: CALL_OW 67
// if GetLives ( kozlov_fac ) < 1000 and IsLive ( kozlov_fac ) then
21458: LD_INT 332
21460: PPUSH
21461: CALL_OW 256
21465: PUSH
21466: LD_INT 1000
21468: LESS
21469: PUSH
21470: LD_INT 332
21472: PPUSH
21473: CALL_OW 300
21477: AND
21478: IFFALSE 21490
// SetLives ( kozlov_fac , 0 ) ;
21480: LD_INT 332
21482: PPUSH
21483: LD_INT 0
21485: PPUSH
21486: CALL_OW 234
// until IsDead ( kozlov_fac ) or IsDead ( Powell ) ;
21490: LD_INT 332
21492: PPUSH
21493: CALL_OW 301
21497: PUSH
21498: LD_EXP 55
21502: PPUSH
21503: CALL_OW 301
21507: OR
21508: IFFALSE 21451
// game_speed := 4 ;
21510: LD_ADDR_OWVAR 65
21514: PUSH
21515: LD_INT 4
21517: ST_TO_ADDR
// powellCenterCameraMode := false ;
21518: LD_ADDR_EXP 20
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// for i in tmp union FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
21526: LD_ADDR_VAR 0 1
21530: PUSH
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 22
21538: PUSH
21539: LD_INT 8
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 25
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PPUSH
21560: CALL_OW 69
21564: UNION
21565: PUSH
21566: FOR_IN
21567: IFFALSE 21583
// SetTag ( i , 0 ) ;
21569: LD_VAR 0 1
21573: PPUSH
21574: LD_INT 0
21576: PPUSH
21577: CALL_OW 109
21581: GO 21566
21583: POP
21584: POP
// wait ( 0 0$3 ) ;
21585: LD_INT 105
21587: PPUSH
21588: CALL_OW 67
// RemoveSeeing ( 93 , 35 , 1 ) ;
21592: LD_INT 93
21594: PPUSH
21595: LD_INT 35
21597: PPUSH
21598: LD_INT 1
21600: PPUSH
21601: CALL_OW 331
// DialogueOn ;
21605: CALL_OW 6
// Say ( speaker , D6c-Sol3-1 ) ;
21609: LD_VAR 0 11
21613: PPUSH
21614: LD_STRING D6c-Sol3-1
21616: PPUSH
21617: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
21621: LD_INT 10
21623: PPUSH
21624: CALL_OW 68
// CenterNowOnUnits ( JMM ) ;
21628: LD_EXP 36
21632: PPUSH
21633: CALL_OW 87
// Say ( JMM , D6c-JMM-1 ) ;
21637: LD_EXP 36
21641: PPUSH
21642: LD_STRING D6c-JMM-1
21644: PPUSH
21645: CALL_OW 88
// if Cyrus then
21649: LD_EXP 42
21653: IFFALSE 21667
// Say ( Cyrus , D6c-Cyrus-1 ) ;
21655: LD_EXP 42
21659: PPUSH
21660: LD_STRING D6c-Cyrus-1
21662: PPUSH
21663: CALL_OW 88
// if Bobby then
21667: LD_EXP 41
21671: IFFALSE 21685
// Say ( Bobby , D6c-Bobby-1 ) ;
21673: LD_EXP 41
21677: PPUSH
21678: LD_STRING D6c-Bobby-1
21680: PPUSH
21681: CALL_OW 88
// if Cornel then
21685: LD_EXP 47
21689: IFFALSE 21703
// Say ( Cornel , D6c-Corn-1 ) ;
21691: LD_EXP 47
21695: PPUSH
21696: LD_STRING D6c-Corn-1
21698: PPUSH
21699: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman ] ] ] ) diff [ speaker union JMM union vip ] ;
21703: LD_ADDR_VAR 0 4
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: LD_INT 22
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 22
21723: PUSH
21724: LD_INT 4
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 26
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: LD_INT 25
21751: PUSH
21752: LD_INT 16
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 25
21761: PUSH
21762: LD_INT 12
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: PPUSH
21779: CALL_OW 69
21783: PUSH
21784: LD_VAR 0 11
21788: PUSH
21789: LD_EXP 36
21793: UNION
21794: PUSH
21795: LD_EXP 56
21799: UNION
21800: PUSH
21801: EMPTY
21802: LIST
21803: DIFF
21804: ST_TO_ADDR
// if tmp2 then
21805: LD_VAR 0 4
21809: IFFALSE 21827
// Say ( tmp2 [ 1 ] , D6c-Sol1-1 ) ;
21811: LD_VAR 0 4
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PPUSH
21820: LD_STRING D6c-Sol1-1
21822: PPUSH
21823: CALL_OW 88
// if Lisa then
21827: LD_EXP 39
21831: IFFALSE 21845
// Say ( Lisa , D6c-Lisa-1 ) ;
21833: LD_EXP 39
21837: PPUSH
21838: LD_STRING D6c-Lisa-1
21840: PPUSH
21841: CALL_OW 88
// if Gary then
21845: LD_EXP 48
21849: IFFALSE 21863
// Say ( Gary , D6c-Gary-1 ) ;
21851: LD_EXP 48
21855: PPUSH
21856: LD_STRING D6c-Gary-1
21858: PPUSH
21859: CALL_OW 88
// if Donaldson then
21863: LD_EXP 40
21867: IFFALSE 21881
// Say ( Donaldson , D6c-Don-1 ) ;
21869: LD_EXP 40
21873: PPUSH
21874: LD_STRING D6c-Don-1
21876: PPUSH
21877: CALL_OW 88
// if tmp2 > 1 then
21881: LD_VAR 0 4
21885: PUSH
21886: LD_INT 1
21888: GREATER
21889: IFFALSE 21907
// Say ( tmp2 [ 2 ] , D6c-Sol2-1 ) ;
21891: LD_VAR 0 4
21895: PUSH
21896: LD_INT 2
21898: ARRAY
21899: PPUSH
21900: LD_STRING D6c-Sol2-1
21902: PPUSH
21903: CALL_OW 88
// Say ( speaker , D6c-Sol3-2 ) ;
21907: LD_VAR 0 11
21911: PPUSH
21912: LD_STRING D6c-Sol3-2
21914: PPUSH
21915: CALL_OW 88
// dwait ( 0 0$1 ) ;
21919: LD_INT 35
21921: PPUSH
21922: CALL_OW 68
// Say ( JMM , D6c-JMM-2 ) ;
21926: LD_EXP 36
21930: PPUSH
21931: LD_STRING D6c-JMM-2
21933: PPUSH
21934: CALL_OW 88
// DialogueOff ;
21938: CALL_OW 7
// Video ( false ) ;
21942: LD_INT 0
21944: PPUSH
21945: CALL 101874 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
21949: LD_INT 22
21951: PUSH
21952: LD_INT 4
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PPUSH
21959: CALL_OW 69
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 235
// ChangeSideFog ( 4 , 4 ) ;
21971: LD_INT 4
21973: PPUSH
21974: LD_INT 4
21976: PPUSH
21977: CALL_OW 343
// for i in GetTechNation ( 4 , 1 , 2 ) do
21981: LD_ADDR_VAR 0 1
21985: PUSH
21986: LD_INT 4
21988: PPUSH
21989: LD_INT 1
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL 59649 0 3
21999: PUSH
22000: FOR_IN
22001: IFFALSE 22038
// if GetTech ( i , 1 ) <> state_researched then
22003: LD_VAR 0 1
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: CALL_OW 321
22015: PUSH
22016: LD_INT 2
22018: NONEQUAL
22019: IFFALSE 22036
// SetTech ( i , 1 , state_researched ) ;
22021: LD_VAR 0 1
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: LD_INT 2
22031: PPUSH
22032: CALL_OW 322
22036: GO 22000
22038: POP
22039: POP
// missionStage := 6 ;
22040: LD_ADDR_EXP 15
22044: PUSH
22045: LD_INT 6
22047: ST_TO_ADDR
// activeAttacks := true ;
22048: LD_ADDR_EXP 16
22052: PUSH
22053: LD_INT 1
22055: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
22056: LD_STRING M2
22058: PPUSH
22059: CALL_OW 337
// SaveForQuickRestart ;
22063: CALL_OW 22
// wait ( 0 0$40 ) ;
22067: LD_INT 1400
22069: PPUSH
22070: CALL_OW 67
// DialogueOn ;
22074: CALL_OW 6
// SayRadio ( Friend , D7-Friend-1 ) ;
22078: LD_EXP 59
22082: PPUSH
22083: LD_STRING D7-Friend-1
22085: PPUSH
22086: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
22090: LD_EXP 36
22094: PPUSH
22095: LD_STRING D7-JMM-1
22097: PPUSH
22098: CALL_OW 88
// SayRadio ( Friend , D7-Friend-2 ) ;
22102: LD_EXP 59
22106: PPUSH
22107: LD_STRING D7-Friend-2
22109: PPUSH
22110: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
22114: LD_EXP 36
22118: PPUSH
22119: LD_STRING D7-JMM-2
22121: PPUSH
22122: CALL_OW 88
// SayRadio ( Friend , D7-Friend-3 ) ;
22126: LD_EXP 59
22130: PPUSH
22131: LD_STRING D7-Friend-3
22133: PPUSH
22134: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
22138: LD_EXP 36
22142: PPUSH
22143: LD_STRING D7-JMM-3
22145: PPUSH
22146: CALL_OW 88
// SayRadio ( Friend , D7-Friend-4 ) ;
22150: LD_EXP 59
22154: PPUSH
22155: LD_STRING D7-Friend-4
22157: PPUSH
22158: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
22162: LD_EXP 36
22166: PPUSH
22167: LD_STRING D7-JMM-4
22169: PPUSH
22170: CALL_OW 88
// SayRadio ( Friend , D7-Friend-5 ) ;
22174: LD_EXP 59
22178: PPUSH
22179: LD_STRING D7-Friend-5
22181: PPUSH
22182: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
22186: LD_EXP 36
22190: PPUSH
22191: LD_STRING D7-JMM-5
22193: PPUSH
22194: CALL_OW 88
// SayRadio ( Friend , D7-Friend-6 ) ;
22198: LD_EXP 59
22202: PPUSH
22203: LD_STRING D7-Friend-6
22205: PPUSH
22206: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
22210: LD_EXP 36
22214: PPUSH
22215: LD_STRING D7-JMM-6
22217: PPUSH
22218: CALL_OW 88
// DialogueOff ;
22222: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
22226: LD_STRING Mlegion
22228: PPUSH
22229: CALL_OW 337
// RebuildKozlovFactory ;
22233: CALL 4437 0 0
// end ;
22237: PPOPN 13
22239: END
// every 0 0$2 trigger powellCenterCameraMode and IsLive ( Powell ) do
22240: LD_EXP 20
22244: PUSH
22245: LD_EXP 55
22249: PPUSH
22250: CALL_OW 300
22254: AND
22255: IFFALSE 22297
22257: GO 22259
22259: DISABLE
// begin enable ;
22260: ENABLE
// if IsInUnit ( Powell ) then
22261: LD_EXP 55
22265: PPUSH
22266: CALL_OW 310
22270: IFFALSE 22288
// CenterOnUnits ( IsInUnit ( Powell ) ) else
22272: LD_EXP 55
22276: PPUSH
22277: CALL_OW 310
22281: PPUSH
22282: CALL_OW 85
22286: GO 22297
// CenterOnUnits ( Powell ) ;
22288: LD_EXP 55
22292: PPUSH
22293: CALL_OW 85
// end ;
22297: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do var bomb , target ;
22298: LD_INT 22
22300: PUSH
22301: LD_INT 8
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 34
22310: PUSH
22311: LD_INT 48
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: IFFALSE 22589
22328: GO 22330
22330: DISABLE
22331: LD_INT 0
22333: PPUSH
22334: PPUSH
// begin if missionStage < 9 then
22335: LD_EXP 15
22339: PUSH
22340: LD_INT 9
22342: LESS
22343: IFFALSE 22353
// missionStage := 9 ;
22345: LD_ADDR_EXP 15
22349: PUSH
22350: LD_INT 9
22352: ST_TO_ADDR
// bomb := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_INT 22
22360: PUSH
22361: LD_INT 8
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 34
22370: PUSH
22371: LD_INT 48
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PPUSH
22382: CALL_OW 69
22386: PUSH
22387: LD_INT 1
22389: ARRAY
22390: ST_TO_ADDR
// wait ( 0 0$05 ) ;
22391: LD_INT 175
22393: PPUSH
22394: CALL_OW 67
// if FakeInfo or KurtStatus in [ 0 , 2 ] then
22398: LD_EXP 12
22402: PUSH
22403: LD_EXP 3
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: IN
22418: OR
22419: IFFALSE 22442
// target := [ 68 , 108 , 1 ] else
22421: LD_ADDR_VAR 0 2
22425: PUSH
22426: LD_INT 68
22428: PUSH
22429: LD_INT 108
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: ST_TO_ADDR
22440: GO 22461
// target := [ 181 , 88 , 2 ] ;
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_INT 181
22449: PUSH
22450: LD_INT 88
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: ST_TO_ADDR
// AddComAttackPlace ( bomb , target [ 1 ] , target [ 2 ] ) ;
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_VAR 0 2
22470: PUSH
22471: LD_INT 1
22473: ARRAY
22474: PPUSH
22475: LD_VAR 0 2
22479: PUSH
22480: LD_INT 2
22482: ARRAY
22483: PPUSH
22484: CALL_OW 176
// if target [ 3 ] = 1 then
22488: LD_VAR 0 2
22492: PUSH
22493: LD_INT 3
22495: ARRAY
22496: PUSH
22497: LD_INT 1
22499: EQUAL
22500: IFFALSE 22516
// SayRadio ( Kurt , D12-Kurt-1 ) else
22502: LD_EXP 57
22506: PPUSH
22507: LD_STRING D12-Kurt-1
22509: PPUSH
22510: CALL_OW 94
22514: GO 22540
// begin SayRadio ( Kurt , D12a-Kurt-1 ) ;
22516: LD_EXP 57
22520: PPUSH
22521: LD_STRING D12a-Kurt-1
22523: PPUSH
22524: CALL_OW 94
// SayRadio ( Roth , D12a-Roth-1 ) ;
22528: LD_EXP 71
22532: PPUSH
22533: LD_STRING D12a-Roth-1
22535: PPUSH
22536: CALL_OW 94
// end ; wait ( 0 0$10 ) ;
22540: LD_INT 350
22542: PPUSH
22543: CALL_OW 67
// AddComRecycle ( bomb , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
22547: LD_VAR 0 1
22551: PPUSH
22552: LD_INT 22
22554: PUSH
22555: LD_INT 8
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 30
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: PUSH
22581: LD_INT 1
22583: ARRAY
22584: PPUSH
22585: CALL_OW 228
// end ;
22589: PPOPN 2
22591: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 8 , 7 , 6 ] [ Difficulty ] and not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) and IsOk ( Kurt ) do
22592: LD_INT 22
22594: PUSH
22595: LD_INT 8
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 21
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 23
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: PPUSH
22627: CALL_OW 69
22631: PUSH
22632: LD_INT 8
22634: PUSH
22635: LD_INT 7
22637: PUSH
22638: LD_INT 6
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: PUSH
22646: LD_OWVAR 67
22650: ARRAY
22651: LESSEQUAL
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_INT 8
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 34
22665: PUSH
22666: LD_INT 48
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PPUSH
22677: CALL_OW 69
22681: NOT
22682: AND
22683: PUSH
22684: LD_EXP 57
22688: PPUSH
22689: CALL_OW 302
22693: AND
22694: IFFALSE 23011
22696: GO 22698
22698: DISABLE
// begin DialogueOn ;
22699: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
22703: LD_EXP 36
22707: PPUSH
22708: LD_STRING D13-JMM-1
22710: PPUSH
22711: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
22715: LD_EXP 57
22719: PPUSH
22720: LD_STRING D13-Kurt-1
22722: PPUSH
22723: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
22727: LD_EXP 36
22731: PPUSH
22732: LD_STRING D13-JMM-2
22734: PPUSH
22735: CALL_OW 88
// if FakeInfo then
22739: LD_EXP 12
22743: IFFALSE 22763
// begin Say ( Kurt , D13-Kurt-2 ) ;
22745: LD_EXP 57
22749: PPUSH
22750: LD_STRING D13-Kurt-2
22752: PPUSH
22753: CALL_OW 88
// DialogueOff ;
22757: CALL_OW 7
// exit ;
22761: GO 23011
// end ; if not KurtStatus then
22763: LD_EXP 3
22767: NOT
22768: IFFALSE 22784
// Say ( Kurt , D13-Kurt-2b ) else
22770: LD_EXP 57
22774: PPUSH
22775: LD_STRING D13-Kurt-2b
22777: PPUSH
22778: CALL_OW 88
22782: GO 22796
// Say ( Kurt , D13-Kurt-2a ) ;
22784: LD_EXP 57
22788: PPUSH
22789: LD_STRING D13-Kurt-2a
22791: PPUSH
22792: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
22796: LD_EXP 57
22800: PPUSH
22801: LD_STRING D13-Kurt-2a
22803: PPUSH
22804: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
22808: LD_EXP 36
22812: PPUSH
22813: LD_STRING D13-JMM-3
22815: PPUSH
22816: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
22820: LD_EXP 57
22824: PPUSH
22825: LD_STRING D13-Kurt-3
22827: PPUSH
22828: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
22832: LD_EXP 36
22836: PPUSH
22837: LD_STRING D13-JMM-4
22839: PPUSH
22840: CALL_OW 88
// DialogueOff ;
22844: CALL_OW 7
// MC_Kill ( 3 ) ;
22848: LD_INT 3
22850: PPUSH
22851: CALL 31923 0 1
// KillUnit ( Kozlov ) ;
22855: LD_EXP 58
22859: PPUSH
22860: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
22864: LD_INT 22
22866: PUSH
22867: LD_INT 8
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 21
22876: PUSH
22877: LD_INT 3
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 23
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 30
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PPUSH
22910: CALL_OW 69
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PPUSH
22919: CALL_OW 66
// ChangeSideFog ( 8 , 1 ) ;
22923: LD_INT 8
22925: PPUSH
22926: LD_INT 1
22928: PPUSH
22929: CALL_OW 343
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 1 ) ;
22933: LD_INT 22
22935: PUSH
22936: LD_INT 8
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 69
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 235
// SetAttitude ( 8 , 1 , att_friend , true ) ;
22955: LD_INT 8
22957: PPUSH
22958: LD_INT 1
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 80
// PlaceUnitXY ( Friend , 37 , 1 , false ) ;
22971: LD_EXP 59
22975: PPUSH
22976: LD_INT 37
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: LD_INT 0
22984: PPUSH
22985: CALL_OW 48
// wait ( 0 0$1 ) ;
22989: LD_INT 35
22991: PPUSH
22992: CALL_OW 67
// ComMoveXY ( Friend , 60 , 95 ) ;
22996: LD_EXP 59
23000: PPUSH
23001: LD_INT 60
23003: PPUSH
23004: LD_INT 95
23006: PPUSH
23007: CALL_OW 111
// end ;
23011: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 do
23012: LD_INT 22
23014: PUSH
23015: LD_INT 8
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: PUSH
23041: LD_INT 0
23043: EQUAL
23044: IFFALSE 23064
23046: GO 23048
23048: DISABLE
// begin ChangeMissionObjectives ( MlegionOut ) ;
23049: LD_STRING MlegionOut
23051: PPUSH
23052: CALL_OW 337
// legionDestroyed := true ;
23056: LD_ADDR_EXP 22
23060: PUSH
23061: LD_INT 1
23063: ST_TO_ADDR
// end ;
23064: END
// every 0 0$1 trigger See ( 1 , Friend ) do var dec ;
23065: LD_INT 1
23067: PPUSH
23068: LD_EXP 59
23072: PPUSH
23073: CALL_OW 292
23077: IFFALSE 23377
23079: GO 23081
23081: DISABLE
23082: LD_INT 0
23084: PPUSH
// begin CenterNowOnUnits ( Friend ) ;
23085: LD_EXP 59
23089: PPUSH
23090: CALL_OW 87
// DialogueOn ;
23094: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
23098: LD_EXP 36
23102: PPUSH
23103: LD_STRING D14-JMM-1
23105: PPUSH
23106: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
23110: LD_EXP 59
23114: PPUSH
23115: LD_STRING D14-Friend-1
23117: PPUSH
23118: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
23122: LD_EXP 36
23126: PPUSH
23127: LD_STRING D14-JMM-2
23129: PPUSH
23130: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
23134: LD_EXP 59
23138: PPUSH
23139: LD_STRING D14-Friend-2
23141: PPUSH
23142: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
23146: LD_EXP 36
23150: PPUSH
23151: LD_STRING D14-JMM-3
23153: PPUSH
23154: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
23158: LD_EXP 59
23162: PPUSH
23163: LD_STRING D14-Friend-3
23165: PPUSH
23166: CALL_OW 88
// DialogueOff ;
23170: CALL_OW 7
// dec = Query ( Q14 ) ;
23174: LD_ADDR_VAR 0 1
23178: PUSH
23179: LD_STRING Q14
23181: PPUSH
23182: CALL_OW 97
23186: ST_TO_ADDR
// if dec = 1 then
23187: LD_VAR 0 1
23191: PUSH
23192: LD_INT 1
23194: EQUAL
23195: IFFALSE 23229
// begin DialogueOn ;
23197: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
23201: LD_EXP 36
23205: PPUSH
23206: LD_STRING D14a-JMM-1
23208: PPUSH
23209: CALL_OW 88
// DialogueOff ;
23213: CALL_OW 7
// SetSide ( Friend , 1 ) ;
23217: LD_EXP 59
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: CALL_OW 235
// end ; if dec = 2 then
23229: LD_VAR 0 1
23233: PUSH
23234: LD_INT 2
23236: EQUAL
23237: IFFALSE 23283
// begin DialogueOn ;
23239: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
23243: LD_EXP 36
23247: PPUSH
23248: LD_STRING D14b-JMM-1
23250: PPUSH
23251: CALL_OW 88
// DialogueOff ;
23255: CALL_OW 7
// ComMoveXY ( Friend , 9 , 2 ) ;
23259: LD_EXP 59
23263: PPUSH
23264: LD_INT 9
23266: PPUSH
23267: LD_INT 2
23269: PPUSH
23270: CALL_OW 111
// AddComHold ( Friend ) ;
23274: LD_EXP 59
23278: PPUSH
23279: CALL_OW 200
// end ; if dec = 3 then
23283: LD_VAR 0 1
23287: PUSH
23288: LD_INT 3
23290: EQUAL
23291: IFFALSE 23377
// begin DialogueOn ;
23293: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
23297: LD_EXP 36
23301: PPUSH
23302: LD_STRING D14c-JMM-1
23304: PPUSH
23305: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
23309: LD_EXP 59
23313: PPUSH
23314: LD_STRING D14c-Friend-1
23316: PPUSH
23317: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
23321: LD_EXP 36
23325: PPUSH
23326: LD_STRING D14c-JMM-2
23328: PPUSH
23329: CALL_OW 88
// DialogueOff ;
23333: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
23337: LD_INT 8
23339: PPUSH
23340: LD_INT 1
23342: PPUSH
23343: LD_INT 2
23345: PPUSH
23346: LD_INT 1
23348: PPUSH
23349: CALL_OW 80
// ComMoveXY ( Friend , 9 , 2 ) ;
23353: LD_EXP 59
23357: PPUSH
23358: LD_INT 9
23360: PPUSH
23361: LD_INT 2
23363: PPUSH
23364: CALL_OW 111
// AddComHold ( Friend ) ;
23368: LD_EXP 59
23372: PPUSH
23373: CALL_OW 200
// end ; end ;
23377: PPOPN 1
23379: END
// every 0 0$1 trigger HexInfo ( 9 , 2 ) = Friend and GetSide ( Friend ) = 8 do
23380: LD_INT 9
23382: PPUSH
23383: LD_INT 2
23385: PPUSH
23386: CALL_OW 428
23390: PUSH
23391: LD_EXP 59
23395: EQUAL
23396: PUSH
23397: LD_EXP 59
23401: PPUSH
23402: CALL_OW 255
23406: PUSH
23407: LD_INT 8
23409: EQUAL
23410: AND
23411: IFFALSE 23425
23413: GO 23415
23415: DISABLE
// RemoveUnit ( Friend ) ;
23416: LD_EXP 59
23420: PPUSH
23421: CALL_OW 64
23425: END
// every 0 0$1 trigger missionTime >= 15 15$00 and JMMGirl and KappaStatus do var i , veh , vehG ;
23426: LD_EXP 14
23430: PUSH
23431: LD_INT 31500
23433: GREATEREQUAL
23434: PUSH
23435: LD_EXP 7
23439: AND
23440: PUSH
23441: LD_EXP 2
23445: AND
23446: IFFALSE 23876
23448: GO 23450
23450: DISABLE
23451: LD_INT 0
23453: PPUSH
23454: PPUSH
23455: PPUSH
// begin missionStage := 7 ;
23456: LD_ADDR_EXP 15
23460: PUSH
23461: LD_INT 7
23463: ST_TO_ADDR
// uc_side = 1 ;
23464: LD_ADDR_OWVAR 20
23468: PUSH
23469: LD_INT 1
23471: ST_TO_ADDR
// uc_nation = 1 ;
23472: LD_ADDR_OWVAR 21
23476: PUSH
23477: LD_INT 1
23479: ST_TO_ADDR
// for i = 1 to 5 do
23480: LD_ADDR_VAR 0 1
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_INT 5
23492: PUSH
23493: FOR_TO
23494: IFFALSE 23590
// begin vc_engine = 3 ;
23496: LD_ADDR_OWVAR 39
23500: PUSH
23501: LD_INT 3
23503: ST_TO_ADDR
// vc_control = 3 ;
23504: LD_ADDR_OWVAR 38
23508: PUSH
23509: LD_INT 3
23511: ST_TO_ADDR
// vc_chassis = 3 ;
23512: LD_ADDR_OWVAR 37
23516: PUSH
23517: LD_INT 3
23519: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
23520: LD_ADDR_OWVAR 40
23524: PUSH
23525: LD_INT 5
23527: PUSH
23528: LD_INT 9
23530: PUSH
23531: LD_INT 7
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: PPUSH
23542: LD_INT 3
23544: PPUSH
23545: CALL_OW 12
23549: ARRAY
23550: ST_TO_ADDR
// veh = CreateVehicle ;
23551: LD_ADDR_VAR 0 2
23555: PUSH
23556: CALL_OW 45
23560: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
23561: LD_VAR 0 2
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
23573: LD_VAR 0 2
23577: PPUSH
23578: LD_INT 19
23580: PPUSH
23581: LD_INT 0
23583: PPUSH
23584: CALL_OW 49
// end ;
23588: GO 23493
23590: POP
23591: POP
// vc_engine = 3 ;
23592: LD_ADDR_OWVAR 39
23596: PUSH
23597: LD_INT 3
23599: ST_TO_ADDR
// vc_control = 1 ;
23600: LD_ADDR_OWVAR 38
23604: PUSH
23605: LD_INT 1
23607: ST_TO_ADDR
// vc_chassis = 3 ;
23608: LD_ADDR_OWVAR 37
23612: PUSH
23613: LD_INT 3
23615: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
23616: LD_ADDR_OWVAR 40
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: LD_INT 9
23626: PUSH
23627: LD_INT 7
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PPUSH
23638: LD_INT 3
23640: PPUSH
23641: CALL_OW 12
23645: ARRAY
23646: ST_TO_ADDR
// vehG = CreateVehicle ;
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: CALL_OW 45
23656: ST_TO_ADDR
// SetDir ( vehG , 1 ) ;
23657: LD_VAR 0 3
23661: PPUSH
23662: LD_INT 1
23664: PPUSH
23665: CALL_OW 233
// PlaceUnitArea ( vehG , reinforcementsArea , false ) ;
23669: LD_VAR 0 3
23673: PPUSH
23674: LD_INT 19
23676: PPUSH
23677: LD_INT 0
23679: PPUSH
23680: CALL_OW 49
// if JMMGirl = 1 then
23684: LD_EXP 7
23688: PUSH
23689: LD_INT 1
23691: EQUAL
23692: IFFALSE 23748
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
23694: LD_ADDR_EXP 37
23698: PUSH
23699: LD_STRING Joan
23701: PPUSH
23702: LD_INT 1
23704: PPUSH
23705: LD_STRING 14_
23707: PPUSH
23708: CALL 59586 0 3
23712: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehG ) ;
23713: LD_EXP 37
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23727: LD_VAR 0 3
23731: PPUSH
23732: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
23736: LD_EXP 37
23740: PPUSH
23741: LD_STRING D10BW-Joan-1
23743: PPUSH
23744: CALL_OW 94
// end ; if JMMGirl = 2 then
23748: LD_EXP 7
23752: PUSH
23753: LD_INT 2
23755: EQUAL
23756: IFFALSE 23812
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
23758: LD_ADDR_EXP 39
23762: PUSH
23763: LD_STRING Lisa
23765: PPUSH
23766: LD_INT 1
23768: PPUSH
23769: LD_STRING 14_
23771: PPUSH
23772: CALL 59586 0 3
23776: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , vehG ) ;
23777: LD_EXP 39
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23791: LD_VAR 0 3
23795: PPUSH
23796: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
23800: LD_EXP 39
23804: PPUSH
23805: LD_STRING D10BW-Lisa-1
23807: PPUSH
23808: CALL_OW 94
// end ; if JMMGirl = 3 then
23812: LD_EXP 7
23816: PUSH
23817: LD_INT 3
23819: EQUAL
23820: IFFALSE 23876
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
23822: LD_ADDR_EXP 51
23826: PUSH
23827: LD_STRING Connie
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: LD_STRING 14_
23835: PPUSH
23836: CALL 59586 0 3
23840: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , vehG ) ;
23841: LD_EXP 51
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
23855: LD_VAR 0 3
23859: PPUSH
23860: CALL_OW 87
// SayRadio ( Lisa , D10BW-Con-1 ) ;
23864: LD_EXP 39
23868: PPUSH
23869: LD_STRING D10BW-Con-1
23871: PPUSH
23872: CALL_OW 94
// end ; end ;
23876: PPOPN 3
23878: END
// every 0 0$1 trigger missionTime >= 30 30$00 do var i , veh , tmp ;
23879: LD_EXP 14
23883: PUSH
23884: LD_INT 63000
23886: GREATEREQUAL
23887: IFFALSE 24299
23889: GO 23891
23891: DISABLE
23892: LD_INT 0
23894: PPUSH
23895: PPUSH
23896: PPUSH
// begin tmp := PrepareStevensSquad ;
23897: LD_ADDR_VAR 0 3
23901: PUSH
23902: CALL 1833 0 0
23906: ST_TO_ADDR
// if not tmp then
23907: LD_VAR 0 3
23911: NOT
23912: IFFALSE 23916
// exit ;
23914: GO 24299
// uc_side := 1 ;
23916: LD_ADDR_OWVAR 20
23920: PUSH
23921: LD_INT 1
23923: ST_TO_ADDR
// uc_nation := 1 ;
23924: LD_ADDR_OWVAR 21
23928: PUSH
23929: LD_INT 1
23931: ST_TO_ADDR
// for i in tmp do
23932: LD_ADDR_VAR 0 1
23936: PUSH
23937: LD_VAR 0 3
23941: PUSH
23942: FOR_IN
23943: IFFALSE 24040
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , [ us_double_gun , us_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 40 ) ;
23945: LD_INT 3
23947: PPUSH
23948: LD_INT 3
23950: PPUSH
23951: LD_INT 1
23953: PPUSH
23954: LD_INT 5
23956: PUSH
23957: LD_INT 9
23959: PUSH
23960: LD_INT 7
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PPUSH
23971: LD_INT 3
23973: PPUSH
23974: CALL_OW 12
23978: ARRAY
23979: PPUSH
23980: LD_INT 40
23982: PPUSH
23983: CALL 66219 0 5
// veh := CreateVehicle ;
23987: LD_ADDR_VAR 0 2
23991: PUSH
23992: CALL_OW 45
23996: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
23997: LD_VAR 0 2
24001: PPUSH
24002: LD_INT 1
24004: PPUSH
24005: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
24009: LD_VAR 0 2
24013: PPUSH
24014: LD_INT 19
24016: PPUSH
24017: LD_INT 0
24019: PPUSH
24020: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_VAR 0 2
24033: PPUSH
24034: CALL_OW 52
// end ;
24038: GO 23942
24040: POP
24041: POP
// missionStage := 8 ;
24042: LD_ADDR_EXP 15
24046: PUSH
24047: LD_INT 8
24049: ST_TO_ADDR
// DialogueOn ;
24050: CALL_OW 6
// if Stevens then
24054: LD_EXP 38
24058: IFFALSE 24172
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
24060: LD_EXP 38
24064: PPUSH
24065: CALL_OW 310
24069: PPUSH
24070: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
24074: LD_EXP 38
24078: PPUSH
24079: LD_STRING D8-Huck-1
24081: PPUSH
24082: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
24086: LD_EXP 36
24090: PPUSH
24091: LD_STRING D8-JMM-1
24093: PPUSH
24094: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
24098: LD_EXP 38
24102: PPUSH
24103: LD_STRING D8-Huck-2
24105: PPUSH
24106: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
24110: LD_EXP 36
24114: PPUSH
24115: LD_STRING D8-JMM-2
24117: PPUSH
24118: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
24122: LD_EXP 38
24126: PPUSH
24127: LD_STRING D8-Huck-3
24129: PPUSH
24130: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
24134: LD_EXP 36
24138: PPUSH
24139: LD_STRING D8-JMM-3
24141: PPUSH
24142: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
24146: LD_EXP 38
24150: PPUSH
24151: LD_STRING D8-Huck-4
24153: PPUSH
24154: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
24158: LD_EXP 36
24162: PPUSH
24163: LD_STRING D8-JMM-4
24165: PPUSH
24166: CALL_OW 88
// end else
24170: GO 24282
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
24172: LD_EXP 52
24176: PPUSH
24177: CALL_OW 310
24181: PPUSH
24182: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
24186: LD_EXP 52
24190: PPUSH
24191: LD_STRING D8-Huck-1
24193: PPUSH
24194: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
24198: LD_EXP 36
24202: PPUSH
24203: LD_STRING D8-JMM-1a
24205: PPUSH
24206: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
24210: LD_EXP 52
24214: PPUSH
24215: LD_STRING D8-Huck-2
24217: PPUSH
24218: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
24222: LD_EXP 36
24226: PPUSH
24227: LD_STRING D8-JMM-2
24229: PPUSH
24230: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
24234: LD_EXP 52
24238: PPUSH
24239: LD_STRING D8-Huck-3
24241: PPUSH
24242: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
24246: LD_EXP 36
24250: PPUSH
24251: LD_STRING D8-JMM-3
24253: PPUSH
24254: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
24258: LD_EXP 52
24262: PPUSH
24263: LD_STRING D8-Huck-4
24265: PPUSH
24266: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
24270: LD_EXP 36
24274: PPUSH
24275: LD_STRING D8-JMM-4
24277: PPUSH
24278: CALL_OW 88
// end ; DialogueOff ;
24282: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
24286: LD_INT 25
24288: PPUSH
24289: LD_INT 1
24291: PPUSH
24292: LD_INT 1
24294: PPUSH
24295: CALL_OW 322
// end ;
24299: PPOPN 3
24301: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
24302: LD_INT 1
24304: PPUSH
24305: LD_EXP 68
24309: PPUSH
24310: CALL_OW 292
24314: IFFALSE 24565
24316: GO 24318
24318: DISABLE
// begin CenterNowOnUnits ( sewiVeh ) ;
24319: LD_EXP 68
24323: PPUSH
24324: CALL_OW 87
// DialogueOn ;
24328: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
24332: LD_EXP 36
24336: PPUSH
24337: LD_STRING D10nB-JMM-1
24339: PPUSH
24340: CALL_OW 88
// if BurlakStatus = 1 then
24344: LD_EXP 9
24348: PUSH
24349: LD_INT 1
24351: EQUAL
24352: IFFALSE 24366
// begin SayRadio ( Vsevolod , D10nB-Vse-1a ) ;
24354: LD_EXP 67
24358: PPUSH
24359: LD_STRING D10nB-Vse-1a
24361: PPUSH
24362: CALL_OW 94
// end ; if BurlakStatus = 0 then
24366: LD_EXP 9
24370: PUSH
24371: LD_INT 0
24373: EQUAL
24374: IFFALSE 24388
// SayRadio ( Vsevolod , D10nB-Vse-1 ) ;
24376: LD_EXP 67
24380: PPUSH
24381: LD_STRING D10nB-Vse-1
24383: PPUSH
24384: CALL_OW 94
// Say ( JMM , D10nB-JMM-2 ) ;
24388: LD_EXP 36
24392: PPUSH
24393: LD_STRING D10nB-JMM-2
24395: PPUSH
24396: CALL_OW 88
// if KappaStatus then
24400: LD_EXP 2
24404: IFFALSE 24418
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
24406: LD_EXP 67
24410: PPUSH
24411: LD_STRING D10nB-Vse-5a
24413: PPUSH
24414: CALL_OW 94
// if not KappaStatus and JMMGirlStatus = 0 then
24418: LD_EXP 2
24422: NOT
24423: PUSH
24424: LD_EXP 6
24428: PUSH
24429: LD_INT 0
24431: EQUAL
24432: AND
24433: IFFALSE 24561
// begin if JMMGirl = 1 then
24435: LD_EXP 7
24439: PUSH
24440: LD_INT 1
24442: EQUAL
24443: IFFALSE 24493
// begin SayRadio ( Vsevolod , D10nB-Vse-2 ) ;
24445: LD_EXP 67
24449: PPUSH
24450: LD_STRING D10nB-Vse-2
24452: PPUSH
24453: CALL_OW 94
// Say ( JMM , D10nB-JMM-3 ) ;
24457: LD_EXP 36
24461: PPUSH
24462: LD_STRING D10nB-JMM-3
24464: PPUSH
24465: CALL_OW 88
// SayRadio ( Vsevolod , D10nB-Vse-3 ) ;
24469: LD_EXP 67
24473: PPUSH
24474: LD_STRING D10nB-Vse-3
24476: PPUSH
24477: CALL_OW 94
// Say ( JMM , D10nB-JMM-4 ) ;
24481: LD_EXP 36
24485: PPUSH
24486: LD_STRING D10nB-JMM-4
24488: PPUSH
24489: CALL_OW 88
// end ; if JMMGirl = 2 then
24493: LD_EXP 7
24497: PUSH
24498: LD_INT 2
24500: EQUAL
24501: IFFALSE 24527
// begin SayRadio ( Vsevolod , D10nB-Vse-4 ) ;
24503: LD_EXP 67
24507: PPUSH
24508: LD_STRING D10nB-Vse-4
24510: PPUSH
24511: CALL_OW 94
// Say ( JMM , D10nB-JMM-5 ) ;
24515: LD_EXP 36
24519: PPUSH
24520: LD_STRING D10nB-JMM-5
24522: PPUSH
24523: CALL_OW 88
// end ; if JMMGirl = 3 then
24527: LD_EXP 7
24531: PUSH
24532: LD_INT 3
24534: EQUAL
24535: IFFALSE 24561
// begin SayRadio ( Vsevolod , D10nB-Vse-5 ) ;
24537: LD_EXP 67
24541: PPUSH
24542: LD_STRING D10nB-Vse-5
24544: PPUSH
24545: CALL_OW 94
// Say ( JMM , D10nB-JMM-6 ) ;
24549: LD_EXP 36
24553: PPUSH
24554: LD_STRING D10nB-JMM-6
24556: PPUSH
24557: CALL_OW 88
// end ; end ; DialogueOff ;
24561: CALL_OW 7
// end ;
24565: END
// every 0 0$1 trigger missionTime >= 55 55$00 do var tmp ;
24566: LD_EXP 14
24570: PUSH
24571: LD_INT 115500
24573: GREATEREQUAL
24574: IFFALSE 24933
24576: GO 24578
24578: DISABLE
24579: LD_INT 0
24581: PPUSH
// begin missionStage := 10 ;
24582: LD_ADDR_EXP 15
24586: PUSH
24587: LD_INT 10
24589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
24590: LD_ADDR_VAR 0 1
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 26
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: LD_INT 25
24620: PUSH
24621: LD_INT 12
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: LD_INT 25
24637: PUSH
24638: LD_INT 16
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL_OW 69
24659: PUSH
24660: LD_EXP 36
24664: PUSH
24665: LD_EXP 38
24669: PUSH
24670: LD_EXP 52
24674: PUSH
24675: LD_EXP 39
24679: PUSH
24680: LD_EXP 40
24684: PUSH
24685: LD_EXP 41
24689: PUSH
24690: LD_EXP 42
24694: PUSH
24695: LD_EXP 43
24699: PUSH
24700: LD_EXP 44
24704: PUSH
24705: LD_EXP 45
24709: PUSH
24710: LD_EXP 46
24714: PUSH
24715: LD_EXP 47
24719: PUSH
24720: LD_EXP 48
24724: PUSH
24725: LD_EXP 49
24729: PUSH
24730: LD_EXP 50
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: DIFF
24752: ST_TO_ADDR
// if not tmp and Brown then
24753: LD_VAR 0 1
24757: NOT
24758: PUSH
24759: LD_EXP 44
24763: AND
24764: IFFALSE 24779
// tmp := [ Brown ] ;
24766: LD_ADDR_VAR 0 1
24770: PUSH
24771: LD_EXP 44
24775: PUSH
24776: EMPTY
24777: LIST
24778: ST_TO_ADDR
// DialogueOn ;
24779: CALL_OW 6
// Say ( tmp [ 1 ] , D11-Sol1-1 ) ;
24783: LD_VAR 0 1
24787: PUSH
24788: LD_INT 1
24790: ARRAY
24791: PPUSH
24792: LD_STRING D11-Sol1-1
24794: PPUSH
24795: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
24799: LD_EXP 61
24803: PPUSH
24804: LD_STRING D11-Pla-1
24806: PPUSH
24807: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
24811: LD_EXP 62
24815: PPUSH
24816: LD_STRING D11-Kov-1
24818: PPUSH
24819: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
24823: LD_EXP 61
24827: PPUSH
24828: LD_STRING D11-Pla-2
24830: PPUSH
24831: CALL_OW 94
// Say ( tmp [ 1 ] , D11-Sol1-2 ) ;
24835: LD_VAR 0 1
24839: PUSH
24840: LD_INT 1
24842: ARRAY
24843: PPUSH
24844: LD_STRING D11-Sol1-2
24846: PPUSH
24847: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
24851: LD_EXP 36
24855: PPUSH
24856: LD_STRING D11-JMM-2
24858: PPUSH
24859: CALL_OW 88
// DialogueOff ;
24863: CALL_OW 7
// allowBehemothConstruct := true ;
24867: LD_ADDR_EXP 25
24871: PUSH
24872: LD_INT 1
24874: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
24875: LD_STRING M4
24877: PPUSH
24878: CALL_OW 337
// BuildBehemoths ;
24882: CALL 6419 0 0
// repeat wait ( 15 15$00 ) ;
24886: LD_INT 31500
24888: PPUSH
24889: CALL_OW 67
// if behemothDestroyedBeforeFinish then
24893: LD_EXP 27
24897: IFFALSE 24901
// break ;
24899: GO 24933
// if GetResourceType ( GetBase ( ru_depot2 ) , mat_cans ) >= 1000 then
24901: LD_INT 267
24903: PPUSH
24904: CALL_OW 274
24908: PPUSH
24909: LD_INT 1
24911: PPUSH
24912: CALL_OW 275
24916: PUSH
24917: LD_INT 1000
24919: GREATEREQUAL
24920: IFFALSE 24926
// BuildBehemoths ;
24922: CALL 6419 0 0
// until not behemothBuilders ;
24926: LD_EXP 70
24930: NOT
24931: IFFALSE 24886
// end ;
24933: PPOPN 1
24935: END
// every 0 0$1 trigger not behemothBuilders and not behemothDone and allowBehemothConstruct do
24936: LD_EXP 70
24940: NOT
24941: PUSH
24942: LD_EXP 28
24946: NOT
24947: AND
24948: PUSH
24949: LD_EXP 25
24953: AND
24954: IFFALSE 24974
24956: GO 24958
24958: DISABLE
// begin ChangeMissionObjectives ( M4a ) ;
24959: LD_STRING M4a
24961: PPUSH
24962: CALL_OW 337
// behemothDestroyedBeforeFinish := true ;
24966: LD_ADDR_EXP 27
24970: PUSH
24971: LD_INT 1
24973: ST_TO_ADDR
// end ;
24974: END
// every 0 0$1 trigger behemothDone do
24975: LD_EXP 28
24979: IFFALSE 24991
24981: GO 24983
24983: DISABLE
// ChangeMissionObjectives ( M4b ) ;
24984: LD_STRING M4b
24986: PPUSH
24987: CALL_OW 337
24991: END
// every 0 0$1 trigger not seeBehemoth do var tmp , i ;
24992: LD_EXP 29
24996: NOT
24997: IFFALSE 25193
24999: GO 25001
25001: DISABLE
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
// begin enable ;
25006: ENABLE
// tmp := GetBehemoths ( 3 ) ;
25007: LD_ADDR_VAR 0 1
25011: PUSH
25012: LD_INT 3
25014: PPUSH
25015: CALL 101950 0 1
25019: ST_TO_ADDR
// if not tmp and not behemothDone then
25020: LD_VAR 0 1
25024: NOT
25025: PUSH
25026: LD_EXP 28
25030: NOT
25031: AND
25032: IFFALSE 25068
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) ;
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_INT 22
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 30
25051: PUSH
25052: LD_INT 37
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: ST_TO_ADDR
// if not tmp then
25068: LD_VAR 0 1
25072: NOT
25073: IFFALSE 25077
// exit ;
25075: GO 25193
// for i in tmp do
25077: LD_ADDR_VAR 0 2
25081: PUSH
25082: LD_VAR 0 1
25086: PUSH
25087: FOR_IN
25088: IFFALSE 25191
// if See ( 1 , i ) then
25090: LD_INT 1
25092: PPUSH
25093: LD_VAR 0 2
25097: PPUSH
25098: CALL_OW 292
25102: IFFALSE 25189
// begin if GetType ( i ) = unit_building then
25104: LD_VAR 0 2
25108: PPUSH
25109: CALL_OW 247
25113: PUSH
25114: LD_INT 3
25116: EQUAL
25117: IFFALSE 25155
// begin CenterNowOnUnits ( i ) ;
25119: LD_VAR 0 2
25123: PPUSH
25124: CALL_OW 87
// Say ( JMM , D17a-JMM-1 ) ;
25128: LD_EXP 36
25132: PPUSH
25133: LD_STRING D17a-JMM-1
25135: PPUSH
25136: CALL_OW 88
// seeBehemoth := true ;
25140: LD_ADDR_EXP 29
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// disable ;
25148: DISABLE
// exit ;
25149: POP
25150: POP
25151: GO 25193
// end else
25153: GO 25189
// begin CenterNowOnUnits ( i ) ;
25155: LD_VAR 0 2
25159: PPUSH
25160: CALL_OW 87
// Say ( JMM , D17b-JMM-1 ) ;
25164: LD_EXP 36
25168: PPUSH
25169: LD_STRING D17b-JMM-1
25171: PPUSH
25172: CALL_OW 88
// seeBehemoth := true ;
25176: LD_ADDR_EXP 29
25180: PUSH
25181: LD_INT 1
25183: ST_TO_ADDR
// disable ;
25184: DISABLE
// exit ;
25185: POP
25186: POP
25187: GO 25193
// end ; end ;
25189: GO 25087
25191: POP
25192: POP
// end ;
25193: PPOPN 2
25195: END
// every 0 0$1 trigger missionTime >= 55 55$00 do var bomb , dec , tmp ;
25196: LD_EXP 14
25200: PUSH
25201: LD_INT 115500
25203: GREATEREQUAL
25204: IFFALSE 26377
25206: GO 25208
25208: DISABLE
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
25213: PPUSH
// begin MC_InsertProduceList ( 2 , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ) ;
25214: LD_INT 2
25216: PPUSH
25217: LD_INT 23
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: LD_INT 3
25225: PUSH
25226: LD_INT 48
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: PPUSH
25235: CALL 53679 0 2
// repeat wait ( 0 0$1 ) ;
25239: LD_INT 35
25241: PPUSH
25242: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
25246: LD_INT 22
25248: PUSH
25249: LD_INT 3
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 34
25258: PUSH
25259: LD_INT 48
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: IFFALSE 25239
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
25276: LD_ADDR_VAR 0 1
25280: PUSH
25281: LD_INT 22
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 34
25293: PUSH
25294: LD_INT 48
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: ST_TO_ADDR
// missionStage := 12 ;
25314: LD_ADDR_EXP 15
25318: PUSH
25319: LD_INT 12
25321: ST_TO_ADDR
// platonovHasBomb := true ;
25322: LD_ADDR_EXP 30
25326: PUSH
25327: LD_INT 1
25329: ST_TO_ADDR
// AddComMoveXY ( bomb , 181 , 86 ) ;
25330: LD_VAR 0 1
25334: PPUSH
25335: LD_INT 181
25337: PPUSH
25338: LD_INT 86
25340: PPUSH
25341: CALL_OW 171
// AddComHold ( bomb ) ;
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL_OW 200
// wait ( 0 0$10 ) ;
25354: LD_INT 350
25356: PPUSH
25357: CALL_OW 67
// DialogueOn ;
25361: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
25365: LD_EXP 61
25369: PPUSH
25370: LD_STRING D15-Pla-1
25372: PPUSH
25373: CALL_OW 94
// dec = Query ( Q15a ) ;
25377: LD_ADDR_VAR 0 2
25381: PUSH
25382: LD_STRING Q15a
25384: PPUSH
25385: CALL_OW 97
25389: ST_TO_ADDR
// if dec = 1 then
25390: LD_VAR 0 2
25394: PUSH
25395: LD_INT 1
25397: EQUAL
25398: IFFALSE 25421
// begin Say ( JMM , D15a-JMM-1 ) ;
25400: LD_EXP 36
25404: PPUSH
25405: LD_STRING D15a-JMM-1
25407: PPUSH
25408: CALL_OW 88
// YouLost ( Surrender ) ;
25412: LD_STRING Surrender
25414: PPUSH
25415: CALL_OW 104
// exit ;
25419: GO 26377
// end ; if dec = 2 then
25421: LD_VAR 0 2
25425: PUSH
25426: LD_INT 2
25428: EQUAL
25429: IFFALSE 25498
// begin Say ( JMM , D15b-JMM-1 ) ;
25431: LD_EXP 36
25435: PPUSH
25436: LD_STRING D15b-JMM-1
25438: PPUSH
25439: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
25443: LD_EXP 61
25447: PPUSH
25448: LD_STRING D15b-Pla-1
25450: PPUSH
25451: CALL_OW 94
// DialogueOff ;
25455: CALL_OW 7
// wait ( 3 3$00 ) ;
25459: LD_INT 6300
25461: PPUSH
25462: CALL_OW 67
// DialogueOn ;
25466: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
25470: LD_EXP 36
25474: PPUSH
25475: LD_STRING D15d-JMM-1a
25477: PPUSH
25478: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
25482: LD_EXP 61
25486: PPUSH
25487: LD_STRING D15d-Pla-1
25489: PPUSH
25490: CALL_OW 94
// DialogueOff ;
25494: CALL_OW 7
// end ; if dec = 3 then
25498: LD_VAR 0 2
25502: PUSH
25503: LD_INT 3
25505: EQUAL
25506: IFFALSE 25560
// begin Say ( JMM , D15c-JMM-1 ) ;
25508: LD_EXP 36
25512: PPUSH
25513: LD_STRING D15c-JMM-1
25515: PPUSH
25516: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
25520: LD_EXP 61
25524: PPUSH
25525: LD_STRING D15c-Pla-1
25527: PPUSH
25528: CALL_OW 94
// DialogueOff ;
25532: CALL_OW 7
// wait ( 0 0$15 ) ;
25536: LD_INT 525
25538: PPUSH
25539: CALL_OW 67
// ComAttackPlace ( bomb , 60 , 95 ) ;
25543: LD_VAR 0 1
25547: PPUSH
25548: LD_INT 60
25550: PPUSH
25551: LD_INT 95
25553: PPUSH
25554: CALL_OW 116
// exit ;
25558: GO 26377
// end ; if dec = 4 then
25560: LD_VAR 0 2
25564: PUSH
25565: LD_INT 4
25567: EQUAL
25568: IFFALSE 25598
// begin Say ( JMM , D15d-JMM-1 ) ;
25570: LD_EXP 36
25574: PPUSH
25575: LD_STRING D15d-JMM-1
25577: PPUSH
25578: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
25582: LD_EXP 61
25586: PPUSH
25587: LD_STRING D15d-Pla-1
25589: PPUSH
25590: CALL_OW 94
// DialogueOff ;
25594: CALL_OW 7
// end ; if IsOk ( Friend ) and GetSide ( Friend ) = 1 and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
25598: LD_EXP 59
25602: PPUSH
25603: CALL_OW 302
25607: PUSH
25608: LD_EXP 59
25612: PPUSH
25613: CALL_OW 255
25617: PUSH
25618: LD_INT 1
25620: EQUAL
25621: AND
25622: PUSH
25623: LD_INT 22
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 34
25635: PUSH
25636: LD_INT 8
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 69
25651: NOT
25652: AND
25653: IFFALSE 26278
// begin SetSide ( Friend , 8 ) ;
25655: LD_EXP 59
25659: PPUSH
25660: LD_INT 8
25662: PPUSH
25663: CALL_OW 235
// if IsInUnit ( Friend ) then
25667: LD_EXP 59
25671: PPUSH
25672: CALL_OW 310
25676: IFFALSE 25687
// ComExitBuilding ( Friend ) ;
25678: LD_EXP 59
25682: PPUSH
25683: CALL_OW 122
// if IsDriver ( Friend ) then
25687: LD_EXP 59
25691: PPUSH
25692: CALL 99626 0 1
25696: IFFALSE 25707
// ComExitVehicle ( Friend ) ;
25698: LD_EXP 59
25702: PPUSH
25703: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
25707: LD_EXP 59
25711: PPUSH
25712: LD_INT 9
25714: PPUSH
25715: LD_INT 2
25717: PPUSH
25718: CALL_OW 171
// wait ( 0 0$05 ) ;
25722: LD_INT 175
25724: PPUSH
25725: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
25729: LD_EXP 59
25733: PPUSH
25734: CALL_OW 87
// DialogueOn ;
25738: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
25742: LD_EXP 36
25746: PPUSH
25747: LD_STRING D16-JMM-1
25749: PPUSH
25750: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
25754: LD_EXP 59
25758: PPUSH
25759: LD_STRING D16-Friend-1
25761: PPUSH
25762: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
25766: LD_EXP 36
25770: PPUSH
25771: LD_STRING D16-JMM-2
25773: PPUSH
25774: CALL_OW 88
// DialogueOff ;
25778: CALL_OW 7
// SetSide ( Friend , 1 ) ;
25782: LD_EXP 59
25786: PPUSH
25787: LD_INT 1
25789: PPUSH
25790: CALL_OW 235
// ComHold ( Friend ) ;
25794: LD_EXP 59
25798: PPUSH
25799: CALL_OW 140
// wait ( 0 0$20 ) ;
25803: LD_INT 700
25805: PPUSH
25806: CALL_OW 67
// if GetDistUnitXY ( Friend , 9 , 2 ) < 30 then
25810: LD_EXP 59
25814: PPUSH
25815: LD_INT 9
25817: PPUSH
25818: LD_INT 2
25820: PPUSH
25821: CALL_OW 297
25825: PUSH
25826: LD_INT 30
25828: LESS
25829: IFFALSE 25898
// begin SetSide ( Friend , 8 ) ;
25831: LD_EXP 59
25835: PPUSH
25836: LD_INT 8
25838: PPUSH
25839: CALL_OW 235
// if IsInUnit ( Friend ) then
25843: LD_EXP 59
25847: PPUSH
25848: CALL_OW 310
25852: IFFALSE 25863
// ComExitBuilding ( Friend ) ;
25854: LD_EXP 59
25858: PPUSH
25859: CALL_OW 122
// if IsDriver ( Friend ) then
25863: LD_EXP 59
25867: PPUSH
25868: CALL 99626 0 1
25872: IFFALSE 25883
// ComExitVehicle ( Friend ) ;
25874: LD_EXP 59
25878: PPUSH
25879: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
25883: LD_EXP 59
25887: PPUSH
25888: LD_INT 9
25890: PPUSH
25891: LD_INT 2
25893: PPUSH
25894: CALL_OW 171
// end ; wait ( 0 0$30 ) ;
25898: LD_INT 1050
25900: PPUSH
25901: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
25905: LD_INT 22
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 34
25917: PUSH
25918: LD_INT 8
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: NOT
25934: IFFALSE 26256
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_INT 22
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 26
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: LD_INT 25
25966: PUSH
25967: LD_INT 12
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 25
25976: PUSH
25977: LD_INT 16
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: PPUSH
25994: CALL_OW 69
25998: PUSH
25999: LD_EXP 36
26003: PUSH
26004: LD_EXP 38
26008: PUSH
26009: LD_EXP 52
26013: PUSH
26014: LD_EXP 39
26018: PUSH
26019: LD_EXP 40
26023: PUSH
26024: LD_EXP 41
26028: PUSH
26029: LD_EXP 42
26033: PUSH
26034: LD_EXP 43
26038: PUSH
26039: LD_EXP 44
26043: PUSH
26044: LD_EXP 45
26048: PUSH
26049: LD_EXP 46
26053: PUSH
26054: LD_EXP 47
26058: PUSH
26059: LD_EXP 48
26063: PUSH
26064: LD_EXP 49
26068: PUSH
26069: LD_EXP 50
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: DIFF
26091: ST_TO_ADDR
// DialogueOn ;
26092: CALL_OW 6
// SayRadio ( Platonov , D16a-Pla-1 ) ;
26096: LD_EXP 61
26100: PPUSH
26101: LD_STRING D16a-Pla-1
26103: PPUSH
26104: CALL_OW 94
// if Stevens then
26108: LD_EXP 38
26112: IFFALSE 26128
// Say ( Stevens , D16a-Huck-1 ) else
26114: LD_EXP 38
26118: PPUSH
26119: LD_STRING D16a-Huck-1
26121: PPUSH
26122: CALL_OW 88
26126: GO 26170
// if Baker then
26128: LD_EXP 52
26132: IFFALSE 26148
// Say ( Baker , D16a-Huck-1 ) else
26134: LD_EXP 52
26138: PPUSH
26139: LD_STRING D16a-Huck-1
26141: PPUSH
26142: CALL_OW 88
26146: GO 26170
// if tmp then
26148: LD_VAR 0 3
26152: IFFALSE 26170
// Say ( tmp [ 1 ] , D16a-Sol1-1 ) ;
26154: LD_VAR 0 3
26158: PUSH
26159: LD_INT 1
26161: ARRAY
26162: PPUSH
26163: LD_STRING D16a-Sol1-1
26165: PPUSH
26166: CALL_OW 88
// if GetSide ( Friend ) = 8 then
26170: LD_EXP 59
26174: PPUSH
26175: CALL_OW 255
26179: PUSH
26180: LD_INT 8
26182: EQUAL
26183: IFFALSE 26199
// Say ( JMM , D16a-JMM-1 ) else
26185: LD_EXP 36
26189: PPUSH
26190: LD_STRING D16a-JMM-1
26192: PPUSH
26193: CALL_OW 88
26197: GO 26235
// begin Say ( JMM , D16a-JMM-1a ) ;
26199: LD_EXP 36
26203: PPUSH
26204: LD_STRING D16a-JMM-1a
26206: PPUSH
26207: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
26211: LD_EXP 59
26215: PPUSH
26216: LD_STRING D16a-Friend-1
26218: PPUSH
26219: CALL_OW 88
// SetSide ( Friend , 3 ) ;
26223: LD_EXP 59
26227: PPUSH
26228: LD_INT 3
26230: PPUSH
26231: CALL_OW 235
// end ; DialogueOff ;
26235: CALL_OW 7
// ComAttackPlace ( bomb , 60 , 95 ) ;
26239: LD_VAR 0 1
26243: PPUSH
26244: LD_INT 60
26246: PPUSH
26247: LD_INT 95
26249: PPUSH
26250: CALL_OW 116
// end else
26254: GO 26276
// begin DialogueOn ;
26256: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla- ) ;
26260: LD_EXP 61
26264: PPUSH
26265: LD_STRING D16c-Pla-
26267: PPUSH
26268: CALL_OW 94
// DialogueOff ;
26272: CALL_OW 7
// end ; end else
26276: GO 26377
// begin wait ( 3 3$00 ) ;
26278: LD_INT 6300
26280: PPUSH
26281: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
26285: LD_INT 22
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 34
26297: PUSH
26298: LD_INT 8
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PPUSH
26309: CALL_OW 69
26313: NOT
26314: IFFALSE 26357
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
26316: LD_EXP 61
26320: PPUSH
26321: LD_STRING D16b-Pla-1
26323: PPUSH
26324: CALL_OW 94
// Say ( JMM , D16b-JMM- ) ;
26328: LD_EXP 36
26332: PPUSH
26333: LD_STRING D16b-JMM-
26335: PPUSH
26336: CALL_OW 88
// ComAttackPlace ( bomb , 60 , 95 ) ;
26340: LD_VAR 0 1
26344: PPUSH
26345: LD_INT 60
26347: PPUSH
26348: LD_INT 95
26350: PPUSH
26351: CALL_OW 116
// end else
26355: GO 26377
// begin DialogueOn ;
26357: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla- ) ;
26361: LD_EXP 61
26365: PPUSH
26366: LD_STRING D16c-Pla-
26368: PPUSH
26369: CALL_OW 94
// DialogueOff ;
26373: CALL_OW 7
// end ; end ; end ;
26377: PPOPN 3
26379: END
// every 0 0$1 trigger missionTime >= 60 60$00 and not allianceDestroyed and IsOk ( Roth ) do var dec ;
26380: LD_EXP 14
26384: PUSH
26385: LD_INT 126000
26387: GREATEREQUAL
26388: PUSH
26389: LD_EXP 23
26393: NOT
26394: AND
26395: PUSH
26396: LD_EXP 71
26400: PPUSH
26401: CALL_OW 302
26405: AND
26406: IFFALSE 26764
26408: GO 26410
26410: DISABLE
26411: LD_INT 0
26413: PPUSH
// begin missionStage = 11 ;
26414: LD_ADDR_EXP 15
26418: PUSH
26419: LD_INT 11
26421: ST_TO_ADDR
// DialogueOn ;
26422: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
26426: LD_EXP 71
26430: PPUSH
26431: LD_STRING D9-Roth-1
26433: PPUSH
26434: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
26438: LD_EXP 36
26442: PPUSH
26443: LD_STRING D9-JMM-1
26445: PPUSH
26446: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
26450: LD_EXP 71
26454: PPUSH
26455: LD_STRING D9-Roth-2
26457: PPUSH
26458: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
26462: LD_EXP 71
26466: PPUSH
26467: LD_STRING D9-Roth-2a
26469: PPUSH
26470: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
26474: LD_EXP 61
26478: PPUSH
26479: LD_STRING D9-Pla-2
26481: PPUSH
26482: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
26486: LD_EXP 71
26490: PPUSH
26491: LD_STRING D9-Roth-3
26493: PPUSH
26494: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
26498: LD_EXP 61
26502: PPUSH
26503: LD_STRING D9-Pla-3
26505: PPUSH
26506: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
26510: LD_EXP 71
26514: PPUSH
26515: LD_STRING D9-Roth-4
26517: PPUSH
26518: CALL_OW 94
// dec = Query ( Q9 ) ;
26522: LD_ADDR_VAR 0 1
26526: PUSH
26527: LD_STRING Q9
26529: PPUSH
26530: CALL_OW 97
26534: ST_TO_ADDR
// if dec = 1 then
26535: LD_VAR 0 1
26539: PUSH
26540: LD_INT 1
26542: EQUAL
26543: IFFALSE 26557
// SayRadio ( Roth , D9a-Roth-1 ) ;
26545: LD_EXP 71
26549: PPUSH
26550: LD_STRING D9a-Roth-1
26552: PPUSH
26553: CALL_OW 94
// if dec = 2 then
26557: LD_VAR 0 1
26561: PUSH
26562: LD_INT 2
26564: EQUAL
26565: IFFALSE 26591
// begin Say ( JMM , D9b-JMM-1 ) ;
26567: LD_EXP 36
26571: PPUSH
26572: LD_STRING D9b-JMM-1
26574: PPUSH
26575: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
26579: LD_EXP 71
26583: PPUSH
26584: LD_STRING D9b-Roth-1
26586: PPUSH
26587: CALL_OW 94
// end ; if dec = 3 then
26591: LD_VAR 0 1
26595: PUSH
26596: LD_INT 3
26598: EQUAL
26599: IFFALSE 26661
// begin Say ( JMM , D9c-JMM-1 ) ;
26601: LD_EXP 36
26605: PPUSH
26606: LD_STRING D9c-JMM-1
26608: PPUSH
26609: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
26613: LD_EXP 71
26617: PPUSH
26618: LD_STRING D9c-Roth-1
26620: PPUSH
26621: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
26625: LD_EXP 36
26629: PPUSH
26630: LD_STRING D9c-JMM-2
26632: PPUSH
26633: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
26637: LD_EXP 71
26641: PPUSH
26642: LD_STRING D9c-Roth-2
26644: PPUSH
26645: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
26649: LD_EXP 36
26653: PPUSH
26654: LD_STRING D9c-JMM-3
26656: PPUSH
26657: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
26661: LD_EXP 71
26665: PPUSH
26666: LD_STRING D9c-Roth-3
26668: PPUSH
26669: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
26673: LD_EXP 71
26677: PPUSH
26678: LD_STRING D9cont-Roth-1
26680: PPUSH
26681: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
26685: LD_EXP 36
26689: PPUSH
26690: LD_STRING D9cont-JMM-1
26692: PPUSH
26693: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
26697: LD_EXP 71
26701: PPUSH
26702: LD_STRING D9cont-Roth-2
26704: PPUSH
26705: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
26709: LD_EXP 36
26713: PPUSH
26714: LD_STRING D9cont-JMM-2
26716: PPUSH
26717: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
26721: LD_EXP 71
26725: PPUSH
26726: LD_STRING D9cont-Roth-3
26728: PPUSH
26729: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
26733: LD_EXP 36
26737: PPUSH
26738: LD_STRING D9cont-JMM-3
26740: PPUSH
26741: CALL_OW 88
// DialogueOff ;
26745: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
26749: LD_STRING M3
26751: PPUSH
26752: CALL_OW 337
// allianceActive := true ;
26756: LD_ADDR_EXP 31
26760: PUSH
26761: LD_INT 1
26763: ST_TO_ADDR
// end ;
26764: PPOPN 1
26766: END
// every 0 0$2 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , tmp2 , omarOnMotherLode ;
26767: LD_EXP 61
26771: PPUSH
26772: CALL_OW 301
26776: PUSH
26777: LD_EXP 64
26781: PPUSH
26782: CALL_OW 301
26786: AND
26787: PUSH
26788: LD_INT 22
26790: PUSH
26791: LD_INT 3
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 21
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 50
26810: PUSH
26811: EMPTY
26812: LIST
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 69
26823: PUSH
26824: LD_INT 7
26826: PUSH
26827: LD_INT 8
26829: PUSH
26830: LD_INT 9
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: PUSH
26838: LD_OWVAR 67
26842: ARRAY
26843: LESS
26844: AND
26845: IFFALSE 27604
26847: GO 26849
26849: DISABLE
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// begin MC_Kill ( 1 ) ;
26856: LD_INT 1
26858: PPUSH
26859: CALL 31923 0 1
// SetAttitude ( 1 , 3 , att_friend , true ) ;
26863: LD_INT 1
26865: PPUSH
26866: LD_INT 3
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: LD_INT 1
26874: PPUSH
26875: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
26879: LD_ADDR_VAR 0 1
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 21
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 24
26906: PUSH
26907: LD_INT 900
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: PUSH
26924: FOR_IN
26925: IFFALSE 26956
// if GetSex ( i ) = sex_male then
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 258
26936: PUSH
26937: LD_INT 1
26939: EQUAL
26940: IFFALSE 26954
// begin tmp = i ;
26942: LD_ADDR_VAR 0 2
26946: PUSH
26947: LD_VAR 0 1
26951: ST_TO_ADDR
// break ;
26952: GO 26956
// end ;
26954: GO 26924
26956: POP
26957: POP
// if tmp = 0 then
26958: LD_VAR 0 2
26962: PUSH
26963: LD_INT 0
26965: EQUAL
26966: IFFALSE 27020
// begin uc_side = 3 ;
26968: LD_ADDR_OWVAR 20
26972: PUSH
26973: LD_INT 3
26975: ST_TO_ADDR
// uc_nation = 3 ;
26976: LD_ADDR_OWVAR 21
26980: PUSH
26981: LD_INT 3
26983: ST_TO_ADDR
// hc_name =  ;
26984: LD_ADDR_OWVAR 26
26988: PUSH
26989: LD_STRING 
26991: ST_TO_ADDR
// hc_gallery =  ;
26992: LD_ADDR_OWVAR 33
26996: PUSH
26997: LD_STRING 
26999: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
27000: LD_INT 1
27002: PPUSH
27003: LD_INT 10
27005: PPUSH
27006: CALL_OW 381
// tmp = CreateHuman ;
27010: LD_ADDR_VAR 0 2
27014: PUSH
27015: CALL_OW 44
27019: ST_TO_ADDR
// end ; DialogueOn ;
27020: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: LD_STRING DSurrenderRussians-RSol1-1a
27031: PPUSH
27032: CALL_OW 88
// DialogueOff ;
27036: CALL_OW 7
// russianDestroyed := true ;
27040: LD_ADDR_EXP 21
27044: PUSH
27045: LD_INT 1
27047: ST_TO_ADDR
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
27048: LD_INT 22
27050: PUSH
27051: LD_INT 3
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 21
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PPUSH
27072: CALL_OW 69
27076: PPUSH
27077: CALL_OW 122
// wait ( 0 0$1 ) ;
27081: LD_INT 35
27083: PPUSH
27084: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , russianEscapeArea ) ;
27088: LD_INT 22
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 21
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 69
27116: PPUSH
27117: LD_INT 25
27119: PPUSH
27120: CALL_OW 173
// wait ( 0 0$10 ) ;
27124: LD_INT 350
27126: PPUSH
27127: CALL_OW 67
// PrepareOmarInvasion ;
27131: CALL 12123 0 0
// tmp := [ GetX ( Omar ) , GetY ( Omar ) ] ;
27135: LD_ADDR_VAR 0 2
27139: PUSH
27140: LD_EXP 89
27144: PPUSH
27145: CALL_OW 250
27149: PUSH
27150: LD_EXP 89
27154: PPUSH
27155: CALL_OW 251
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: ST_TO_ADDR
// PlaceSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 , - 8 ) ;
27164: LD_VAR 0 2
27168: PUSH
27169: LD_INT 1
27171: ARRAY
27172: PPUSH
27173: LD_VAR 0 2
27177: PUSH
27178: LD_INT 2
27180: ARRAY
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: LD_INT 8
27187: NEG
27188: PPUSH
27189: CALL_OW 330
// CenterNowOnUnits ( Omar ) ;
27193: LD_EXP 89
27197: PPUSH
27198: CALL_OW 87
// DialogueOn ;
27202: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
27206: LD_EXP 36
27210: PPUSH
27211: LD_STRING D19-JMM-1
27213: PPUSH
27214: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ] ;
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: LD_INT 22
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 26
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 25
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 25
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 25
27268: PUSH
27269: LD_INT 3
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 25
27278: PUSH
27279: LD_INT 4
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 25
27288: PUSH
27289: LD_INT 5
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 25
27298: PUSH
27299: LD_INT 8
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: PUSH
27325: LD_EXP 36
27329: PUSH
27330: LD_EXP 37
27334: PUSH
27335: LD_EXP 38
27339: PUSH
27340: LD_EXP 39
27344: PUSH
27345: LD_EXP 40
27349: PUSH
27350: LD_EXP 41
27354: PUSH
27355: LD_EXP 42
27359: PUSH
27360: LD_EXP 43
27364: PUSH
27365: LD_EXP 44
27369: PUSH
27370: LD_EXP 45
27374: PUSH
27375: LD_EXP 46
27379: PUSH
27380: LD_EXP 47
27384: PUSH
27385: LD_EXP 48
27389: PUSH
27390: LD_EXP 49
27394: PUSH
27395: LD_EXP 50
27399: PUSH
27400: LD_EXP 51
27404: PUSH
27405: LD_EXP 52
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: DIFF
27429: ST_TO_ADDR
// if tmp2 then
27430: LD_VAR 0 3
27434: IFFALSE 27452
// Say ( tmp2 [ 1 ] , D19-Sol1-1 ) ;
27436: LD_VAR 0 3
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: PPUSH
27445: LD_STRING D19-Sol1-1
27447: PPUSH
27448: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
27452: LD_EXP 36
27456: PPUSH
27457: LD_STRING D19-JMM-2
27459: PPUSH
27460: CALL_OW 88
// DialogueOff ;
27464: CALL_OW 7
// RemoveSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 ) ;
27468: LD_VAR 0 2
27472: PUSH
27473: LD_INT 1
27475: ARRAY
27476: PPUSH
27477: LD_VAR 0 2
27481: PUSH
27482: LD_INT 2
27484: ARRAY
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 331
// ChangeMissionObjectives ( M5 ) ;
27493: LD_STRING M5
27495: PPUSH
27496: CALL_OW 337
// omarOnMotherLode := false ;
27500: LD_ADDR_VAR 0 4
27504: PUSH
27505: LD_INT 0
27507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27508: LD_INT 35
27510: PPUSH
27511: CALL_OW 67
// if GetDistUnitXY ( Omar , 215 , 100 ) < 10 and not omarOnMotherLode then
27515: LD_EXP 89
27519: PPUSH
27520: LD_INT 215
27522: PPUSH
27523: LD_INT 100
27525: PPUSH
27526: CALL_OW 297
27530: PUSH
27531: LD_INT 10
27533: LESS
27534: PUSH
27535: LD_VAR 0 4
27539: NOT
27540: AND
27541: IFFALSE 27563
// begin omarOnMotherLode := true ;
27543: LD_ADDR_VAR 0 4
27547: PUSH
27548: LD_INT 1
27550: ST_TO_ADDR
// Say ( JMM , D19b-JMM-1 ) ;
27551: LD_EXP 36
27555: PPUSH
27556: LD_STRING D19b-JMM-1
27558: PPUSH
27559: CALL_OW 88
// end ; until IsDead ( Omar ) ;
27563: LD_EXP 89
27567: PPUSH
27568: CALL_OW 301
27572: IFFALSE 27508
// Say ( JMM , D19a-JMM-1 ) ;
27574: LD_EXP 36
27578: PPUSH
27579: LD_STRING D19a-JMM-1
27581: PPUSH
27582: CALL_OW 88
// if Heike then
27586: LD_EXP 90
27590: IFFALSE 27604
// Say ( Heike , D19a-Hke-1 ) ;
27592: LD_EXP 90
27596: PPUSH
27597: LD_STRING D19a-Hke-1
27599: PPUSH
27600: CALL_OW 88
// end ;
27604: PPOPN 4
27606: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and russianDestroyed do var i , tmp ;
27607: LD_INT 22
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 21
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PPUSH
27631: CALL_OW 69
27635: PUSH
27636: LD_EXP 21
27640: AND
27641: IFFALSE 27709
27643: GO 27645
27645: DISABLE
27646: LD_INT 0
27648: PPUSH
27649: PPUSH
// begin enable ;
27650: ENABLE
// tmp := FilterUnitsInArea ( russianEscapeArea , [ f_side , 3 ] ) ;
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_INT 25
27658: PPUSH
27659: LD_INT 22
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 70
27673: ST_TO_ADDR
// if not tmp then
27674: LD_VAR 0 2
27678: NOT
27679: IFFALSE 27683
// exit ;
27681: GO 27709
// for i in tmp do
27683: LD_ADDR_VAR 0 1
27687: PUSH
27688: LD_VAR 0 2
27692: PUSH
27693: FOR_IN
27694: IFFALSE 27707
// RemoveUnit ( i ) ;
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 64
27705: GO 27693
27707: POP
27708: POP
// end ;
27709: PPOPN 2
27711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) < 6 do var tmp , i ;
27712: LD_INT 22
27714: PUSH
27715: LD_INT 7
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 21
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 69
27740: PUSH
27741: LD_INT 6
27743: LESS
27744: IFFALSE 28195
27746: GO 27748
27748: DISABLE
27749: LD_INT 0
27751: PPUSH
27752: PPUSH
// begin MC_Kill ( 1 ) ;
27753: LD_INT 1
27755: PPUSH
27756: CALL 31923 0 1
// SetAttitude ( 7 , 1 , att_friend , true ) ;
27760: LD_INT 7
27762: PPUSH
27763: LD_INT 1
27765: PPUSH
27766: LD_INT 1
27768: PPUSH
27769: LD_INT 1
27771: PPUSH
27772: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_sex , sex_male ] ] ) diff Roth ;
27776: LD_ADDR_VAR 0 1
27780: PUSH
27781: LD_INT 22
27783: PUSH
27784: LD_INT 7
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 26
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 69
27809: PUSH
27810: LD_EXP 71
27814: DIFF
27815: ST_TO_ADDR
// if tmp then
27816: LD_VAR 0 1
27820: IFFALSE 27838
// tmp := tmp [ 1 ] else
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 1
27831: PUSH
27832: LD_INT 1
27834: ARRAY
27835: ST_TO_ADDR
27836: GO 27874
// begin uc_side := 7 ;
27838: LD_ADDR_OWVAR 20
27842: PUSH
27843: LD_INT 7
27845: ST_TO_ADDR
// uc_nation := 1 ;
27846: LD_ADDR_OWVAR 21
27850: PUSH
27851: LD_INT 1
27853: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
27854: LD_INT 1
27856: PPUSH
27857: LD_INT 8
27859: PPUSH
27860: CALL_OW 384
// tmp := CreateHuman ;
27864: LD_ADDR_VAR 0 1
27868: PUSH
27869: CALL_OW 44
27873: ST_TO_ADDR
// end ; DialogueOn ;
27874: CALL_OW 6
// if IsOK ( Roth ) then
27878: LD_EXP 71
27882: PPUSH
27883: CALL_OW 302
27887: IFFALSE 27901
// Say ( JMM , DAb-JMM-1 ) ;
27889: LD_EXP 36
27893: PPUSH
27894: LD_STRING DAb-JMM-1
27896: PPUSH
27897: CALL_OW 88
// if IsOK ( Roth ) then
27901: LD_EXP 71
27905: PPUSH
27906: CALL_OW 302
27910: IFFALSE 27934
// begin Say ( Roth , DSurrenderAlliance-Roth-1 ) ;
27912: LD_EXP 71
27916: PPUSH
27917: LD_STRING DSurrenderAlliance-Roth-1
27919: PPUSH
27920: CALL_OW 88
// RothCaptured := true ;
27924: LD_ADDR_EXP 33
27928: PUSH
27929: LD_INT 1
27931: ST_TO_ADDR
// end else
27932: GO 27946
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
27934: LD_VAR 0 1
27938: PPUSH
27939: LD_STRING DSurrenderAlliance-Sci1-1
27941: PPUSH
27942: CALL_OW 88
// DialogueOff ;
27946: CALL_OW 7
// allianceDestroyed := true ;
27950: LD_ADDR_EXP 23
27954: PUSH
27955: LD_INT 1
27957: ST_TO_ADDR
// if trueAmericans then
27958: LD_EXP 35
27962: IFFALSE 28038
// begin if trueAmericans = 1 then
27964: LD_EXP 35
27968: PUSH
27969: LD_INT 1
27971: EQUAL
27972: IFFALSE 27988
// Say ( JMM , DAb-JMM-1a ) else
27974: LD_EXP 36
27978: PPUSH
27979: LD_STRING DAb-JMM-1a
27981: PPUSH
27982: CALL_OW 88
27986: GO 28000
// Say ( JMM , DAb-JMM-1b ) ;
27988: LD_EXP 36
27992: PPUSH
27993: LD_STRING DAb-JMM-1b
27995: PPUSH
27996: CALL_OW 88
// CenterNowOnUnits ( trueAmericans ) ;
28000: LD_EXP 35
28004: PPUSH
28005: CALL_OW 87
// for i in trueAmericans do
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: LD_EXP 35
28018: PUSH
28019: FOR_IN
28020: IFFALSE 28036
// SetSide ( i , 1 ) ;
28022: LD_VAR 0 2
28026: PPUSH
28027: LD_INT 1
28029: PPUSH
28030: CALL_OW 235
28034: GO 28019
28036: POP
28037: POP
// end ; repeat wait ( 0 0$1 ) ;
28038: LD_INT 35
28040: PPUSH
28041: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
28045: LD_ADDR_VAR 0 2
28049: PUSH
28050: LD_INT 22
28052: PUSH
28053: LD_INT 7
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 21
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PPUSH
28074: CALL_OW 69
28078: PUSH
28079: FOR_IN
28080: IFFALSE 28162
// begin if IsInUnit ( i ) then
28082: LD_VAR 0 2
28086: PPUSH
28087: CALL_OW 310
28091: IFFALSE 28102
// ComExitBuilding ( i ) ;
28093: LD_VAR 0 2
28097: PPUSH
28098: CALL_OW 122
// if IsDriver ( i ) then
28102: LD_VAR 0 2
28106: PPUSH
28107: CALL 99626 0 1
28111: IFFALSE 28122
// ComExitVehicle ( i ) ;
28113: LD_VAR 0 2
28117: PPUSH
28118: CALL_OW 121
// if not IsInArea ( i , allianceEscapeArea ) then
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_INT 26
28129: PPUSH
28130: CALL_OW 308
28134: NOT
28135: IFFALSE 28151
// AddComMoveToArea ( i , allianceEscapeArea ) else
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_INT 26
28144: PPUSH
28145: CALL_OW 173
28149: GO 28160
// RemoveUnit ( i ) ;
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 64
// end ;
28160: GO 28079
28162: POP
28163: POP
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
28164: LD_INT 22
28166: PUSH
28167: LD_INT 7
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 21
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PPUSH
28188: CALL_OW 69
28192: NOT
28193: IFFALSE 28038
// end ;
28195: PPOPN 2
28197: END
// export function AllianceCaptureUnit ( unit ) ; var join ; begin
28198: LD_INT 0
28200: PPUSH
28201: PPUSH
// if not unit then
28202: LD_VAR 0 1
28206: NOT
28207: IFFALSE 28211
// exit ;
28209: GO 29700
// DoNotAttack ( 8 , unit ) ;
28211: LD_INT 8
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 471
// TeleportUnit ( unit , 260 , 235 , 3 , true ) ;
28223: LD_VAR 0 1
28227: PPUSH
28228: LD_INT 260
28230: PPUSH
28231: LD_INT 235
28233: PPUSH
28234: LD_INT 3
28236: PPUSH
28237: LD_INT 1
28239: PPUSH
28240: CALL_OW 483
// SetSide ( unit , 4 ) ;
28244: LD_VAR 0 1
28248: PPUSH
28249: LD_INT 4
28251: PPUSH
28252: CALL_OW 235
// capturedUnit := capturedUnit + 1 ;
28256: LD_ADDR_EXP 34
28260: PUSH
28261: LD_EXP 34
28265: PUSH
28266: LD_INT 1
28268: PLUS
28269: ST_TO_ADDR
// wait ( 0 0$2 ) ;
28270: LD_INT 70
28272: PPUSH
28273: CALL_OW 67
// PlaceSeeing ( 260 , 235 , 1 , - 8 ) ;
28277: LD_INT 260
28279: PPUSH
28280: LD_INT 235
28282: PPUSH
28283: LD_INT 1
28285: PPUSH
28286: LD_INT 8
28288: NEG
28289: PPUSH
28290: CALL_OW 330
// CenterNowOnUnits ( unit ) ;
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL_OW 87
// ComTurnUnit ( unit , Roth ) ;
28303: LD_VAR 0 1
28307: PPUSH
28308: LD_EXP 71
28312: PPUSH
28313: CALL_OW 119
// DialogueOn ;
28317: CALL_OW 6
// case unit of JMM :
28321: LD_VAR 0 1
28325: PUSH
28326: LD_EXP 36
28330: DOUBLE
28331: EQUAL
28332: IFTRUE 28336
28334: GO 28351
28336: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
28337: LD_EXP 36
28341: PPUSH
28342: LD_STRING DA1-JMM-1
28344: PPUSH
28345: CALL_OW 91
28349: GO 28793
28351: LD_EXP 37
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28376
28361: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
28362: LD_EXP 37
28366: PPUSH
28367: LD_STRING DA1-Joan-1
28369: PPUSH
28370: CALL_OW 91
28374: GO 28793
28376: LD_EXP 39
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28401
28386: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
28387: LD_EXP 39
28391: PPUSH
28392: LD_STRING DA1-Lisa-1
28394: PPUSH
28395: CALL_OW 91
28399: GO 28793
28401: LD_EXP 40
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28426
28411: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornel :
28412: LD_EXP 40
28416: PPUSH
28417: LD_STRING DA1-Don-1
28419: PPUSH
28420: CALL_OW 91
28424: GO 28793
28426: LD_EXP 47
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28451
28436: POP
// ForceSay ( Cornel , DA1-Corn-1 ) ; Denis :
28437: LD_EXP 47
28441: PPUSH
28442: LD_STRING DA1-Corn-1
28444: PPUSH
28445: CALL_OW 91
28449: GO 28793
28451: LD_EXP 43
28455: DOUBLE
28456: EQUAL
28457: IFTRUE 28461
28459: GO 28476
28461: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
28462: LD_EXP 43
28466: PPUSH
28467: LD_STRING DA1-Den-1
28469: PPUSH
28470: CALL_OW 91
28474: GO 28793
28476: LD_EXP 41
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28501
28486: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
28487: LD_EXP 41
28491: PPUSH
28492: LD_STRING DA1-Bobby-1
28494: PPUSH
28495: CALL_OW 91
28499: GO 28793
28501: LD_EXP 45
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28526
28511: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
28512: LD_EXP 45
28516: PPUSH
28517: LD_STRING DA1-Glad-1
28519: PPUSH
28520: CALL_OW 91
28524: GO 28793
28526: LD_EXP 42
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28551
28536: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
28537: LD_EXP 42
28541: PPUSH
28542: LD_STRING DA1-Cyrus-1
28544: PPUSH
28545: CALL_OW 91
28549: GO 28793
28551: LD_EXP 38
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28576
28561: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Baker :
28562: LD_EXP 38
28566: PPUSH
28567: LD_STRING DA1-Huck-1
28569: PPUSH
28570: CALL_OW 91
28574: GO 28793
28576: LD_EXP 52
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28601
28586: POP
// ForceSay ( Baker , DA1-Huck-1 ) ; Brown :
28587: LD_EXP 52
28591: PPUSH
28592: LD_STRING DA1-Huck-1
28594: PPUSH
28595: CALL_OW 91
28599: GO 28793
28601: LD_EXP 44
28605: DOUBLE
28606: EQUAL
28607: IFTRUE 28611
28609: GO 28626
28611: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
28612: LD_EXP 44
28616: PPUSH
28617: LD_STRING DA1-Brown-1
28619: PPUSH
28620: CALL_OW 91
28624: GO 28793
28626: LD_EXP 48
28630: DOUBLE
28631: EQUAL
28632: IFTRUE 28636
28634: GO 28651
28636: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Connie :
28637: LD_EXP 48
28641: PPUSH
28642: LD_STRING DA1-Gary-1
28644: PPUSH
28645: CALL_OW 91
28649: GO 28793
28651: LD_EXP 51
28655: DOUBLE
28656: EQUAL
28657: IFTRUE 28661
28659: GO 28676
28661: POP
// ForceSay ( Connie , DA1-Con-1 ) ; Kurt :
28662: LD_EXP 51
28666: PPUSH
28667: LD_STRING DA1-Con-1
28669: PPUSH
28670: CALL_OW 91
28674: GO 28793
28676: LD_EXP 57
28680: DOUBLE
28681: EQUAL
28682: IFTRUE 28686
28684: GO 28701
28686: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Kikuchi :
28687: LD_EXP 57
28691: PPUSH
28692: LD_STRING DA1-Kurt-1
28694: PPUSH
28695: CALL_OW 91
28699: GO 28793
28701: LD_EXP 50
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28726
28711: POP
// ForceSay ( Kikuchi , DA1-Yam-1 ) ; Frank :
28712: LD_EXP 50
28716: PPUSH
28717: LD_STRING DA1-Yam-1
28719: PPUSH
28720: CALL_OW 91
28724: GO 28793
28726: LD_EXP 49
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28751
28736: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
28737: LD_EXP 49
28741: PPUSH
28742: LD_STRING DA1-Frank-1
28744: PPUSH
28745: CALL_OW 91
28749: GO 28793
28751: POP
// begin if GetSex ( unit ) = sex_male then
28752: LD_VAR 0 1
28756: PPUSH
28757: CALL_OW 258
28761: PUSH
28762: LD_INT 1
28764: EQUAL
28765: IFFALSE 28781
// ForceSay ( unit , DA1-Sol1-1 ) else
28767: LD_VAR 0 1
28771: PPUSH
28772: LD_STRING DA1-Sol1-1
28774: PPUSH
28775: CALL_OW 91
28779: GO 28793
// ForceSay ( unit , DA1-FSol1-1 ) ;
28781: LD_VAR 0 1
28785: PPUSH
28786: LD_STRING DA1-FSol1-1
28788: PPUSH
28789: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
28793: LD_EXP 71
28797: PPUSH
28798: LD_STRING DA-Roth-1
28800: PPUSH
28801: CALL_OW 88
// if capturedUnit = 1 then
28805: LD_EXP 34
28809: PUSH
28810: LD_INT 1
28812: EQUAL
28813: IFFALSE 28841
// begin Say ( Simms , DA-Sim-1 ) ;
28815: LD_EXP 72
28819: PPUSH
28820: LD_STRING DA-Sim-1
28822: PPUSH
28823: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
28827: LD_EXP 71
28831: PPUSH
28832: LD_STRING DA-Roth-2
28834: PPUSH
28835: CALL_OW 88
// end else
28839: GO 28853
// Say ( Simms , DA-Sim-2 ) ;
28841: LD_EXP 72
28845: PPUSH
28846: LD_STRING DA-Sim-2
28848: PPUSH
28849: CALL_OW 88
// case unit of JMM :
28853: LD_VAR 0 1
28857: PUSH
28858: LD_EXP 36
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28883
28868: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
28869: LD_EXP 36
28873: PPUSH
28874: LD_STRING DA1-JMM-1a
28876: PPUSH
28877: CALL_OW 91
28881: GO 29390
28883: LD_EXP 37
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28908
28893: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
28894: LD_EXP 37
28898: PPUSH
28899: LD_STRING DA1-Joan-1a
28901: PPUSH
28902: CALL_OW 91
28906: GO 29390
28908: LD_EXP 39
28912: DOUBLE
28913: EQUAL
28914: IFTRUE 28918
28916: GO 28933
28918: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
28919: LD_EXP 39
28923: PPUSH
28924: LD_STRING DA1-Lisa-1a
28926: PPUSH
28927: CALL_OW 91
28931: GO 29390
28933: LD_EXP 40
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 28958
28943: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornel :
28944: LD_EXP 40
28948: PPUSH
28949: LD_STRING DA1-Don-1a
28951: PPUSH
28952: CALL_OW 91
28956: GO 29390
28958: LD_EXP 47
28962: DOUBLE
28963: EQUAL
28964: IFTRUE 28968
28966: GO 28983
28968: POP
// ForceSay ( Cornel , DA1-Corn-1a ) ; Denis :
28969: LD_EXP 47
28973: PPUSH
28974: LD_STRING DA1-Corn-1a
28976: PPUSH
28977: CALL_OW 91
28981: GO 29390
28983: LD_EXP 43
28987: DOUBLE
28988: EQUAL
28989: IFTRUE 28993
28991: GO 29008
28993: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
28994: LD_EXP 43
28998: PPUSH
28999: LD_STRING DA1-Den-1a
29001: PPUSH
29002: CALL_OW 91
29006: GO 29390
29008: LD_EXP 41
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29018
29016: GO 29033
29018: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
29019: LD_EXP 41
29023: PPUSH
29024: LD_STRING DA1-Bobby-1a
29026: PPUSH
29027: CALL_OW 91
29031: GO 29390
29033: LD_EXP 45
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29058
29043: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
29044: LD_EXP 45
29048: PPUSH
29049: LD_STRING DA1-Glad-1a
29051: PPUSH
29052: CALL_OW 91
29056: GO 29390
29058: LD_EXP 42
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29083
29068: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
29069: LD_EXP 42
29073: PPUSH
29074: LD_STRING DA1-Cyrus-1a
29076: PPUSH
29077: CALL_OW 91
29081: GO 29390
29083: LD_EXP 38
29087: DOUBLE
29088: EQUAL
29089: IFTRUE 29093
29091: GO 29108
29093: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Baker :
29094: LD_EXP 38
29098: PPUSH
29099: LD_STRING DA1-Huck-1a
29101: PPUSH
29102: CALL_OW 91
29106: GO 29390
29108: LD_EXP 52
29112: DOUBLE
29113: EQUAL
29114: IFTRUE 29118
29116: GO 29133
29118: POP
// ForceSay ( Baker , DA1-Huck-1a ) ; Brown :
29119: LD_EXP 52
29123: PPUSH
29124: LD_STRING DA1-Huck-1a
29126: PPUSH
29127: CALL_OW 91
29131: GO 29390
29133: LD_EXP 44
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29158
29143: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
29144: LD_EXP 44
29148: PPUSH
29149: LD_STRING DA1-Brown-1a
29151: PPUSH
29152: CALL_OW 91
29156: GO 29390
29158: LD_EXP 48
29162: DOUBLE
29163: EQUAL
29164: IFTRUE 29168
29166: GO 29183
29168: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Connie :
29169: LD_EXP 48
29173: PPUSH
29174: LD_STRING DA1-Gary-1a
29176: PPUSH
29177: CALL_OW 91
29181: GO 29390
29183: LD_EXP 51
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29208
29193: POP
// ForceSay ( Connie , DA1-Con-1a ) ; Kurt :
29194: LD_EXP 51
29198: PPUSH
29199: LD_STRING DA1-Con-1a
29201: PPUSH
29202: CALL_OW 91
29206: GO 29390
29208: LD_EXP 57
29212: DOUBLE
29213: EQUAL
29214: IFTRUE 29218
29216: GO 29233
29218: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Kikuchi :
29219: LD_EXP 57
29223: PPUSH
29224: LD_STRING DA1-Kurt-1a
29226: PPUSH
29227: CALL_OW 91
29231: GO 29390
29233: LD_EXP 50
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29258
29243: POP
// ForceSay ( Kikuchi , DA1-Yam-1a ) ; Frank :
29244: LD_EXP 50
29248: PPUSH
29249: LD_STRING DA1-Yam-1a
29251: PPUSH
29252: CALL_OW 91
29256: GO 29390
29258: LD_EXP 49
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29283
29268: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
29269: LD_EXP 49
29273: PPUSH
29274: LD_STRING DA1-Frank-1a
29276: PPUSH
29277: CALL_OW 91
29281: GO 29390
29283: POP
// begin join := rand ( 0 , 1 ) ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 0
29291: PPUSH
29292: LD_INT 1
29294: PPUSH
29295: CALL_OW 12
29299: ST_TO_ADDR
// if join then
29300: LD_VAR 0 3
29304: IFFALSE 29349
// begin if GetSex ( unit ) = sex_male then
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 258
29315: PUSH
29316: LD_INT 1
29318: EQUAL
29319: IFFALSE 29335
// ForceSay ( unit , DA1-Sol1-1b ) else
29321: LD_VAR 0 1
29325: PPUSH
29326: LD_STRING DA1-Sol1-1b
29328: PPUSH
29329: CALL_OW 91
29333: GO 29347
// ForceSay ( unit , DA1-FSol1-1b ) ;
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_STRING DA1-FSol1-1b
29342: PPUSH
29343: CALL_OW 91
// end else
29347: GO 29390
// begin if GetSex ( unit ) = sex_male then
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL_OW 258
29358: PUSH
29359: LD_INT 1
29361: EQUAL
29362: IFFALSE 29378
// ForceSay ( unit , DA1-Sol1-1a ) else
29364: LD_VAR 0 1
29368: PPUSH
29369: LD_STRING DA1-Sol1-1a
29371: PPUSH
29372: CALL_OW 91
29376: GO 29390
// ForceSay ( unit , DA1-FSol1-1a ) ;
29378: LD_VAR 0 1
29382: PPUSH
29383: LD_STRING DA1-FSol1-1a
29385: PPUSH
29386: CALL_OW 91
// end ; end ; end ; if unit = JMM then
29390: LD_VAR 0 1
29394: PUSH
29395: LD_EXP 36
29399: EQUAL
29400: IFFALSE 29411
// begin YouLost ( JMMCaptured ) ;
29402: LD_STRING JMMCaptured
29404: PPUSH
29405: CALL_OW 104
// exit ;
29409: GO 29700
// end ; if unit in [ Donaldson , Denis , Bobby , Stevens , Baker , Brown , Kikuchi ] or join then
29411: LD_VAR 0 1
29415: PUSH
29416: LD_EXP 40
29420: PUSH
29421: LD_EXP 43
29425: PUSH
29426: LD_EXP 41
29430: PUSH
29431: LD_EXP 38
29435: PUSH
29436: LD_EXP 52
29440: PUSH
29441: LD_EXP 44
29445: PUSH
29446: LD_EXP 50
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: IN
29460: PUSH
29461: LD_VAR 0 3
29465: OR
29466: IFFALSE 29556
// begin Say ( Roth , DA-Roth-3 ) ;
29468: LD_EXP 71
29472: PPUSH
29473: LD_STRING DA-Roth-3
29475: PPUSH
29476: CALL_OW 88
// SetSide ( unit , 7 ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_INT 7
29487: PPUSH
29488: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] union unit ) ;
29492: LD_ADDR_EXP 99
29496: PUSH
29497: LD_EXP 99
29501: PPUSH
29502: LD_INT 1
29504: PPUSH
29505: LD_EXP 99
29509: PUSH
29510: LD_INT 1
29512: ARRAY
29513: PUSH
29514: LD_VAR 0 1
29518: UNION
29519: PPUSH
29520: CALL_OW 1
29524: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
29525: LD_INT 260
29527: PPUSH
29528: LD_INT 235
29530: PPUSH
29531: LD_INT 1
29533: PPUSH
29534: CALL_OW 331
// SetLives ( unit , 1000 ) ;
29538: LD_VAR 0 1
29542: PPUSH
29543: LD_INT 1000
29545: PPUSH
29546: CALL_OW 234
// DialogueOff ;
29550: CALL_OW 7
// end else
29554: GO 29637
// begin Say ( Roth , DA-Roth-3a ) ;
29556: LD_EXP 71
29560: PPUSH
29561: LD_STRING DA-Roth-3a
29563: PPUSH
29564: CALL_OW 88
// trueAmericans := trueAmericans union unit ;
29568: LD_ADDR_EXP 35
29572: PUSH
29573: LD_EXP 35
29577: PUSH
29578: LD_VAR 0 1
29582: UNION
29583: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
29584: LD_INT 260
29586: PPUSH
29587: LD_INT 235
29589: PPUSH
29590: LD_INT 1
29592: PPUSH
29593: CALL_OW 331
// SetLives ( unit , 1000 ) ;
29597: LD_VAR 0 1
29601: PPUSH
29602: LD_INT 1000
29604: PPUSH
29605: CALL_OW 234
// DialogueOff ;
29609: CALL_OW 7
// ComMoveXY ( unit , 272 , 254 ) ;
29613: LD_VAR 0 1
29617: PPUSH
29618: LD_INT 272
29620: PPUSH
29621: LD_INT 254
29623: PPUSH
29624: CALL_OW 111
// AddComHold ( unit ) ;
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 200
// end ; if capturedUnit = 1 then
29637: LD_EXP 34
29641: PUSH
29642: LD_INT 1
29644: EQUAL
29645: IFFALSE 29700
// begin DialogueOn ;
29647: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
29651: LD_EXP 36
29655: PPUSH
29656: CALL_OW 87
// Say ( JMM , DAa-JMM-1 ) ;
29660: LD_EXP 36
29664: PPUSH
29665: LD_STRING DAa-JMM-1
29667: PPUSH
29668: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
29672: LD_EXP 36
29676: PPUSH
29677: LD_STRING DAa-JMM-1a
29679: PPUSH
29680: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
29684: LD_EXP 36
29688: PPUSH
29689: LD_STRING DAa-JMM-1b
29691: PPUSH
29692: CALL_OW 88
// DialogueOff ;
29696: CALL_OW 7
// end ; end ;
29700: LD_VAR 0 2
29704: RET
// every 0 0$1 trigger missionStage >= 13 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and russianDestroyed and legionDestroyed and allianceDestroyed do
29705: LD_EXP 15
29709: PUSH
29710: LD_INT 13
29712: GREATEREQUAL
29713: PUSH
29714: LD_INT 22
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 21
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: PUSH
29743: LD_INT 0
29745: EQUAL
29746: AND
29747: PUSH
29748: LD_INT 22
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 21
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 50
29770: PUSH
29771: EMPTY
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: PPUSH
29779: CALL_OW 69
29783: PUSH
29784: LD_INT 0
29786: EQUAL
29787: AND
29788: PUSH
29789: LD_EXP 21
29793: AND
29794: PUSH
29795: LD_EXP 22
29799: AND
29800: PUSH
29801: LD_EXP 23
29805: AND
29806: IFFALSE 30287
29808: GO 29810
29810: DISABLE
// begin DialogueOn ;
29811: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
29815: LD_EXP 36
29819: PPUSH
29820: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
29824: LD_EXP 36
29828: PPUSH
29829: LD_STRING D20-JMM-1
29831: PPUSH
29832: CALL_OW 88
// if IsOK ( Joan ) then
29836: LD_EXP 37
29840: PPUSH
29841: CALL_OW 302
29845: IFFALSE 29859
// Say ( Joan , D20-Joan-1 ) ;
29847: LD_EXP 37
29851: PPUSH
29852: LD_STRING D20-Joan-1
29854: PPUSH
29855: CALL_OW 88
// if IsOk ( Lisa ) then
29859: LD_EXP 39
29863: PPUSH
29864: CALL_OW 302
29868: IFFALSE 29882
// Say ( Lisa , D20-Lisa-1 ) ;
29870: LD_EXP 39
29874: PPUSH
29875: LD_STRING D20-Lisa-1
29877: PPUSH
29878: CALL_OW 88
// if IsOk ( Donaldson ) then
29882: LD_EXP 40
29886: PPUSH
29887: CALL_OW 302
29891: IFFALSE 29905
// Say ( Donaldson , D20-Don-1 ) ;
29893: LD_EXP 40
29897: PPUSH
29898: LD_STRING D20-Don-1
29900: PPUSH
29901: CALL_OW 88
// if IsOK ( Cornel ) then
29905: LD_EXP 47
29909: PPUSH
29910: CALL_OW 302
29914: IFFALSE 29928
// Say ( Cornel , D20-Corn-1 ) ;
29916: LD_EXP 47
29920: PPUSH
29921: LD_STRING D20-Corn-1
29923: PPUSH
29924: CALL_OW 88
// if IsOk ( Denis ) then
29928: LD_EXP 43
29932: PPUSH
29933: CALL_OW 302
29937: IFFALSE 29951
// Say ( Denis , D20-Den-1 ) ;
29939: LD_EXP 43
29943: PPUSH
29944: LD_STRING D20-Den-1
29946: PPUSH
29947: CALL_OW 88
// if IsOk ( Bobby ) then
29951: LD_EXP 41
29955: PPUSH
29956: CALL_OW 302
29960: IFFALSE 29974
// Say ( Bobby , D20-Bobby-1 ) ;
29962: LD_EXP 41
29966: PPUSH
29967: LD_STRING D20-Bobby-1
29969: PPUSH
29970: CALL_OW 88
// if IsOk ( Gladstone ) then
29974: LD_EXP 45
29978: PPUSH
29979: CALL_OW 302
29983: IFFALSE 29997
// Say ( Gladstone , D20-Glad-1 ) ;
29985: LD_EXP 45
29989: PPUSH
29990: LD_STRING D20-Glad-1
29992: PPUSH
29993: CALL_OW 88
// if IsOk ( Cyrus ) then
29997: LD_EXP 42
30001: PPUSH
30002: CALL_OW 302
30006: IFFALSE 30020
// Say ( Cyrus , D20-Cyrus-1 ) ;
30008: LD_EXP 42
30012: PPUSH
30013: LD_STRING D20-Cyrus-1
30015: PPUSH
30016: CALL_OW 88
// if IsOk ( Stevens ) then
30020: LD_EXP 38
30024: PPUSH
30025: CALL_OW 302
30029: IFFALSE 30043
// Say ( Stevens , D20-Huck-1 ) ;
30031: LD_EXP 38
30035: PPUSH
30036: LD_STRING D20-Huck-1
30038: PPUSH
30039: CALL_OW 88
// if IsOk ( Brown ) then
30043: LD_EXP 44
30047: PPUSH
30048: CALL_OW 302
30052: IFFALSE 30066
// Say ( Brown , D20-Brown-1 ) ;
30054: LD_EXP 44
30058: PPUSH
30059: LD_STRING D20-Brown-1
30061: PPUSH
30062: CALL_OW 88
// if IsOk ( Gary ) then
30066: LD_EXP 48
30070: PPUSH
30071: CALL_OW 302
30075: IFFALSE 30089
// Say ( Gary , D20-Gary-1 ) ;
30077: LD_EXP 48
30081: PPUSH
30082: LD_STRING D20-Gary-1
30084: PPUSH
30085: CALL_OW 88
// if IsOk ( Connie ) then
30089: LD_EXP 51
30093: PPUSH
30094: CALL_OW 302
30098: IFFALSE 30112
// Say ( Connie , D20-Con-1 ) ;
30100: LD_EXP 51
30104: PPUSH
30105: LD_STRING D20-Con-1
30107: PPUSH
30108: CALL_OW 88
// if IsOk ( Kurt ) then
30112: LD_EXP 57
30116: PPUSH
30117: CALL_OW 302
30121: IFFALSE 30135
// Say ( Kurt , D20-Kurt-1 ) ;
30123: LD_EXP 57
30127: PPUSH
30128: LD_STRING D20-Kurt-1
30130: PPUSH
30131: CALL_OW 88
// if IsOk ( Kikuchi ) then
30135: LD_EXP 50
30139: PPUSH
30140: CALL_OW 302
30144: IFFALSE 30158
// Say ( Kikuchi , D20-Yam-1 ) ;
30146: LD_EXP 50
30150: PPUSH
30151: LD_STRING D20-Yam-1
30153: PPUSH
30154: CALL_OW 88
// if IsOk ( Frank ) then
30158: LD_EXP 49
30162: PPUSH
30163: CALL_OW 302
30167: IFFALSE 30181
// Say ( Frank , D20-Frank-1 ) ;
30169: LD_EXP 49
30173: PPUSH
30174: LD_STRING D20-Frank-1
30176: PPUSH
30177: CALL_OW 88
// DialogueOff ;
30181: CALL_OW 7
// if RothCaptured then
30185: LD_EXP 33
30189: IFFALSE 30203
// AddMedal ( Roth , 1 ) else
30191: LD_STRING Roth
30193: PPUSH
30194: LD_INT 1
30196: PPUSH
30197: CALL_OW 101
30201: GO 30214
// AddMedal ( Roth , - 1 ) ;
30203: LD_STRING Roth
30205: PPUSH
30206: LD_INT 1
30208: NEG
30209: PPUSH
30210: CALL_OW 101
// if behemothDestroyedBeforeFinish then
30214: LD_EXP 27
30218: IFFALSE 30232
// AddMedal ( Project , 1 ) else
30220: LD_STRING Project
30222: PPUSH
30223: LD_INT 1
30225: PPUSH
30226: CALL_OW 101
30230: GO 30243
// AddMedal ( Project , - 1 ) ;
30232: LD_STRING Project
30234: PPUSH
30235: LD_INT 1
30237: NEG
30238: PPUSH
30239: CALL_OW 101
// if lostCounter = 0 then
30243: LD_EXP 32
30247: PUSH
30248: LD_INT 0
30250: EQUAL
30251: IFFALSE 30265
// AddMedal ( NoLosses , 1 ) else
30253: LD_STRING NoLosses
30255: PPUSH
30256: LD_INT 1
30258: PPUSH
30259: CALL_OW 101
30263: GO 30276
// AddMedal ( NoLosses , - 1 ) ;
30265: LD_STRING NoLosses
30267: PPUSH
30268: LD_INT 1
30270: NEG
30271: PPUSH
30272: CALL_OW 101
// GiveMedals ( MAIN ) ;
30276: LD_STRING MAIN
30278: PPUSH
30279: CALL_OW 102
// YouWin ;
30283: CALL_OW 103
// end ; end_of_file
30287: END
// export function CustomEvent ( event ) ; begin
30288: LD_INT 0
30290: PPUSH
// end ;
30291: LD_VAR 0 2
30295: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 and IsLive ( Powell ) then
30296: LD_VAR 0 1
30300: PUSH
30301: LD_INT 1
30303: EQUAL
30304: PUSH
30305: LD_VAR 0 2
30309: PUSH
30310: LD_INT 4
30312: EQUAL
30313: AND
30314: PUSH
30315: LD_EXP 55
30319: PPUSH
30320: CALL_OW 300
30324: AND
30325: IFFALSE 30341
// begin wait ( 0 0$2 ) ;
30327: LD_INT 70
30329: PPUSH
30330: CALL_OW 67
// YouLost ( Dismissed ) ;
30334: LD_STRING Dismissed
30336: PPUSH
30337: CALL_OW 104
// end ; end ;
30341: PPOPN 2
30343: END
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
30344: LD_VAR 0 2
30348: PPUSH
30349: LD_VAR 0 3
30353: PPUSH
30354: LD_INT 18
30356: PPUSH
30357: CALL_OW 309
30361: IFFALSE 30370
// YouLost ( Motherlode3 ) ;
30363: LD_STRING Motherlode3
30365: PPUSH
30366: CALL_OW 104
// end ;
30370: PPOPN 3
30372: END
// on BehemothConstructed ( behemoth ) do begin if not behemothDestroyedBeforeFinish then
30373: LD_EXP 27
30377: NOT
30378: IFFALSE 30388
// behemothDone := true ;
30380: LD_ADDR_EXP 28
30384: PUSH
30385: LD_INT 1
30387: ST_TO_ADDR
// end ;
30388: PPOPN 1
30390: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
30391: LD_VAR 0 2
30395: PPUSH
30396: LD_VAR 0 3
30400: PPUSH
30401: LD_INT 18
30403: PPUSH
30404: CALL_OW 309
30408: IFFALSE 30468
// begin if GetSide ( unit ) = 1 then
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 255
30419: PUSH
30420: LD_INT 1
30422: EQUAL
30423: IFFALSE 30439
// begin wait ( 0 0$6 ) ;
30425: LD_INT 210
30427: PPUSH
30428: CALL_OW 67
// YouLost ( Motherlode2 ) ;
30432: LD_STRING Motherlode2
30434: PPUSH
30435: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 255
30448: PUSH
30449: LD_INT 8
30451: EQUAL
30452: IFFALSE 30468
// begin wait ( 0 0$6 ) ;
30454: LD_INT 210
30456: PPUSH
30457: CALL_OW 67
// YouLost ( Motherlode1 ) ;
30461: LD_STRING Motherlode1
30463: PPUSH
30464: CALL_OW 104
// end ; end ; if GetSide ( unit ) = 3 then
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 255
30477: PUSH
30478: LD_INT 3
30480: EQUAL
30481: IFFALSE 30502
// begin wait ( 0 0$5 ) ;
30483: LD_INT 175
30485: PPUSH
30486: CALL_OW 67
// SayRadio ( Platonov , D18-Pla-1 ) ;
30490: LD_EXP 61
30494: PPUSH
30495: LD_STRING D18-Pla-1
30497: PPUSH
30498: CALL_OW 94
// end ; end ;
30502: PPOPN 3
30504: END
// on UnitDestroyed ( un ) do begin if un in behemothBuilders then
30505: LD_VAR 0 1
30509: PUSH
30510: LD_EXP 70
30514: IN
30515: IFFALSE 30535
// begin behemothBuilders := behemothBuilders diff un ;
30517: LD_ADDR_EXP 70
30521: PUSH
30522: LD_EXP 70
30526: PUSH
30527: LD_VAR 0 1
30531: DIFF
30532: ST_TO_ADDR
// exit ;
30533: GO 30633
// end ; if un = JMM then
30535: LD_VAR 0 1
30539: PUSH
30540: LD_EXP 36
30544: EQUAL
30545: IFFALSE 30556
// begin YouLost ( JMM ) ;
30547: LD_STRING JMM
30549: PPUSH
30550: CALL_OW 104
// exit ;
30554: GO 30633
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman ] ] ] ) then
30556: LD_VAR 0 1
30560: PUSH
30561: LD_INT 22
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 3
30573: PUSH
30574: LD_INT 25
30576: PUSH
30577: LD_INT 16
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 25
30586: PUSH
30587: LD_INT 12
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PPUSH
30603: CALL_OW 69
30607: IN
30608: IFFALSE 30624
// lostCounter := lostCounter + 1 ;
30610: LD_ADDR_EXP 32
30614: PUSH
30615: LD_EXP 32
30619: PUSH
30620: LD_INT 1
30622: PLUS
30623: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL 57062 0 1
// end ;
30633: PPOPN 1
30635: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
30636: LD_VAR 0 1
30640: PPUSH
30641: LD_VAR 0 2
30645: PPUSH
30646: CALL 58968 0 2
// end ;
30650: PPOPN 2
30652: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL 58036 0 1
// end ;
30662: PPOPN 1
30664: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
30665: LD_VAR 0 1
30669: PUSH
30670: LD_INT 22
30672: PUSH
30673: LD_INT 8
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 30
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 23
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: PPUSH
30705: CALL_OW 69
30709: IN
30710: IFFALSE 30737
// begin ComUpgrade ( building ) ;
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
30721: LD_EXP 58
30725: PPUSH
30726: LD_VAR 0 1
30730: PPUSH
30731: CALL 69192 0 2
// exit ;
30735: GO 30746
// end ; MCE_BuildingComplete ( building ) ;
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL 58277 0 1
// end ;
30746: PPOPN 1
30748: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
30749: LD_VAR 0 1
30753: PPUSH
30754: LD_VAR 0 2
30758: PPUSH
30759: CALL 56758 0 2
// end ;
30763: PPOPN 2
30765: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
30766: LD_VAR 0 1
30770: PPUSH
30771: LD_VAR 0 2
30775: PPUSH
30776: LD_VAR 0 3
30780: PPUSH
30781: LD_VAR 0 4
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: CALL 56378 0 5
// end ;
30795: PPOPN 5
30797: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
30798: LD_VAR 0 1
30802: PPUSH
30803: LD_VAR 0 2
30807: PPUSH
30808: CALL 55968 0 2
// end ;
30812: PPOPN 2
30814: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 2
30824: PPUSH
30825: LD_VAR 0 3
30829: PPUSH
30830: LD_VAR 0 4
30834: PPUSH
30835: CALL 55806 0 4
// end ;
30839: PPOPN 4
30841: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
30842: LD_VAR 0 1
30846: PPUSH
30847: LD_VAR 0 2
30851: PPUSH
30852: LD_VAR 0 3
30856: PPUSH
30857: CALL 55581 0 3
// end ;
30861: PPOPN 3
30863: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
30864: LD_VAR 0 1
30868: PPUSH
30869: LD_VAR 0 2
30873: PPUSH
30874: CALL 55466 0 2
// end ;
30878: PPOPN 2
30880: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
30881: LD_VAR 0 1
30885: PPUSH
30886: LD_VAR 0 2
30890: PPUSH
30891: CALL 59229 0 2
// end ;
30895: PPOPN 2
30897: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 4 and driver in powellSquadAttack [ 1 ] and powellAllowRetreat then
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 255
30907: PUSH
30908: LD_INT 4
30910: EQUAL
30911: PUSH
30912: LD_VAR 0 1
30916: PUSH
30917: LD_EXP 18
30921: PUSH
30922: LD_INT 1
30924: ARRAY
30925: IN
30926: AND
30927: PUSH
30928: LD_EXP 19
30932: AND
30933: IFFALSE 30952
// begin ComMoveXY ( driver , 61 , 93 ) ;
30935: LD_VAR 0 1
30939: PPUSH
30940: LD_INT 61
30942: PPUSH
30943: LD_INT 93
30945: PPUSH
30946: CALL_OW 111
// exit ;
30950: GO 30976
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
30952: LD_VAR 0 1
30956: PPUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: LD_VAR 0 3
30966: PPUSH
30967: LD_VAR 0 4
30971: PPUSH
30972: CALL 59445 0 4
// end ;
30976: PPOPN 4
30978: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: LD_VAR 0 2
30988: PPUSH
30989: CALL 55275 0 2
// end ; end_of_file
30993: PPOPN 2
30995: END
// every 0 0$30 trigger missionStage = 2 do var time ;
30996: LD_EXP 15
31000: PUSH
31001: LD_INT 2
31003: EQUAL
31004: IFFALSE 31457
31006: GO 31008
31008: DISABLE
31009: LD_INT 0
31011: PPUSH
// begin time := 0 0$40 ;
31012: LD_ADDR_VAR 0 1
31016: PUSH
31017: LD_INT 1400
31019: ST_TO_ADDR
// repeat wait ( time ) ;
31020: LD_VAR 0 1
31024: PPUSH
31025: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 150 , 19 , true ) ;
31029: LD_INT 1
31031: PPUSH
31032: LD_INT 5
31034: PPUSH
31035: CALL_OW 12
31039: PPUSH
31040: LD_INT 106
31042: PPUSH
31043: LD_INT 150
31045: PPUSH
31046: LD_INT 19
31048: PPUSH
31049: LD_INT 1
31051: PPUSH
31052: CALL_OW 56
// time := time + 0 0$9 ;
31056: LD_ADDR_VAR 0 1
31060: PUSH
31061: LD_VAR 0 1
31065: PUSH
31066: LD_INT 315
31068: PLUS
31069: ST_TO_ADDR
// wait ( rand ( 0 0$13 , 0 0$21 ) ) ;
31070: LD_INT 455
31072: PPUSH
31073: LD_INT 735
31075: PPUSH
31076: CALL_OW 12
31080: PPUSH
31081: CALL_OW 67
// if Prob ( 50 ) then
31085: LD_INT 50
31087: PPUSH
31088: CALL_OW 13
31092: IFFALSE 31121
// CreateCratesXYR ( rand ( 1 , 5 ) , 62 , 108 , 10 , true ) ;
31094: LD_INT 1
31096: PPUSH
31097: LD_INT 5
31099: PPUSH
31100: CALL_OW 12
31104: PPUSH
31105: LD_INT 62
31107: PPUSH
31108: LD_INT 108
31110: PPUSH
31111: LD_INT 10
31113: PPUSH
31114: LD_INT 1
31116: PPUSH
31117: CALL_OW 56
// until missionStage > 4 ;
31121: LD_EXP 15
31125: PUSH
31126: LD_INT 4
31128: GREATER
31129: IFFALSE 31020
// repeat wait ( 0 0$1 ) ;
31131: LD_INT 35
31133: PPUSH
31134: CALL_OW 67
// until missionStage = 6 ;
31138: LD_EXP 15
31142: PUSH
31143: LD_INT 6
31145: EQUAL
31146: IFFALSE 31131
// time := 0 0$50 ;
31148: LD_ADDR_VAR 0 1
31152: PUSH
31153: LD_INT 1750
31155: ST_TO_ADDR
// repeat wait ( time ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 35 , true ) ;
31165: LD_INT 1
31167: PPUSH
31168: LD_INT 5
31170: PPUSH
31171: CALL_OW 12
31175: PPUSH
31176: LD_INT 106
31178: PPUSH
31179: LD_INT 89
31181: PPUSH
31182: LD_INT 35
31184: PPUSH
31185: LD_INT 1
31187: PPUSH
31188: CALL_OW 56
// time := time + 0 0$3 ;
31192: LD_ADDR_VAR 0 1
31196: PUSH
31197: LD_VAR 0 1
31201: PUSH
31202: LD_INT 105
31204: PLUS
31205: ST_TO_ADDR
// if Prob ( 30 ) then
31206: LD_INT 30
31208: PPUSH
31209: CALL_OW 13
31213: IFFALSE 31259
// begin wait ( rand ( 0 0$15 , 0 0$21 ) ) ;
31215: LD_INT 525
31217: PPUSH
31218: LD_INT 735
31220: PPUSH
31221: CALL_OW 12
31225: PPUSH
31226: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
31230: LD_INT 1
31232: PPUSH
31233: LD_INT 5
31235: PPUSH
31236: CALL_OW 12
31240: PPUSH
31241: LD_INT 21
31243: PPUSH
31244: LD_INT 26
31246: PPUSH
31247: LD_INT 12
31249: PPUSH
31250: LD_INT 1
31252: PPUSH
31253: CALL_OW 56
// end else
31257: GO 31295
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
31259: LD_INT 700
31261: PPUSH
31262: LD_INT 1225
31264: PPUSH
31265: CALL_OW 12
31269: PPUSH
31270: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
31274: LD_INT 1
31276: PPUSH
31277: LD_INT 5
31279: PPUSH
31280: CALL_OW 12
31284: PPUSH
31285: LD_INT 16
31287: PPUSH
31288: LD_INT 1
31290: PPUSH
31291: CALL_OW 55
// end ; if Prob ( 50 ) then
31295: LD_INT 50
31297: PPUSH
31298: CALL_OW 13
31302: IFFALSE 31348
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
31304: LD_INT 700
31306: PPUSH
31307: LD_INT 1050
31309: PPUSH
31310: CALL_OW 12
31314: PPUSH
31315: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 181 , 218 , 16 , true ) ;
31319: LD_INT 1
31321: PPUSH
31322: LD_INT 5
31324: PPUSH
31325: CALL_OW 12
31329: PPUSH
31330: LD_INT 181
31332: PPUSH
31333: LD_INT 218
31335: PPUSH
31336: LD_INT 16
31338: PPUSH
31339: LD_INT 1
31341: PPUSH
31342: CALL_OW 56
// end else
31346: GO 31384
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
31348: LD_INT 350
31350: PPUSH
31351: LD_INT 525
31353: PPUSH
31354: CALL_OW 12
31358: PPUSH
31359: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
31363: LD_INT 1
31365: PPUSH
31366: LD_INT 5
31368: PPUSH
31369: CALL_OW 12
31373: PPUSH
31374: LD_INT 15
31376: PPUSH
31377: LD_INT 1
31379: PPUSH
31380: CALL_OW 55
// end ; if Prob ( 45 ) then
31384: LD_INT 45
31386: PPUSH
31387: CALL_OW 13
31391: IFFALSE 31435
// begin wait ( rand ( 0 0$15 , 0 0$25 ) ) ;
31393: LD_INT 525
31395: PPUSH
31396: LD_INT 875
31398: PPUSH
31399: CALL_OW 12
31403: PPUSH
31404: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 103 , 140 , 20 , true ) ;
31408: LD_INT 1
31410: PPUSH
31411: LD_INT 5
31413: PPUSH
31414: CALL_OW 12
31418: PPUSH
31419: LD_INT 103
31421: PPUSH
31422: LD_INT 140
31424: PPUSH
31425: LD_INT 20
31427: PPUSH
31428: LD_INT 1
31430: PPUSH
31431: CALL_OW 56
// end ; if time > 2 2$20 then
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 4900
31442: GREATER
31443: IFFALSE 31453
// time := 0 0$50 ;
31445: LD_ADDR_VAR 0 1
31449: PUSH
31450: LD_INT 1750
31452: ST_TO_ADDR
// until false ;
31453: LD_INT 0
31455: IFFALSE 31156
// end ; end_of_file
31457: PPOPN 1
31459: END
// every 0 0$1 trigger missionStart and missionStage >= 6 do
31460: LD_EXP 13
31464: PUSH
31465: LD_EXP 15
31469: PUSH
31470: LD_INT 6
31472: GREATEREQUAL
31473: AND
31474: IFFALSE 31511
31476: GO 31478
31478: DISABLE
// begin enable ;
31479: ENABLE
// missionTime := missionTime + 0 0$1 ;
31480: LD_ADDR_EXP 14
31484: PUSH
31485: LD_EXP 14
31489: PUSH
31490: LD_INT 35
31492: PLUS
31493: ST_TO_ADDR
// display_strings = [ #Am15-1 , missionTime ] ;
31494: LD_ADDR_OWVAR 47
31498: PUSH
31499: LD_STRING #Am15-1
31501: PUSH
31502: LD_EXP 14
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// end ; end_of_file
31511: END
// export function InitNature ; begin
31512: LD_INT 0
31514: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
31515: LD_INT 3
31517: PPUSH
31518: LD_INT 3
31520: PPUSH
31521: LD_INT 2
31523: PPUSH
31524: LD_INT 1
31526: PPUSH
31527: LD_INT 1
31529: PPUSH
31530: LD_INT 0
31532: PPUSH
31533: LD_INT 0
31535: PPUSH
31536: LD_INT 20
31538: PPUSH
31539: LD_INT 0
31541: PPUSH
31542: CALL 94009 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
31546: LD_INT 2
31548: PPUSH
31549: LD_INT 1
31551: PPUSH
31552: LD_INT 1
31554: PPUSH
31555: LD_INT 1
31557: PPUSH
31558: LD_INT 1
31560: PPUSH
31561: LD_INT 0
31563: PPUSH
31564: LD_INT 0
31566: PPUSH
31567: LD_INT 21
31569: PPUSH
31570: LD_INT 0
31572: PPUSH
31573: CALL 94009 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
31577: LD_INT 4
31579: PPUSH
31580: LD_INT 1
31582: PPUSH
31583: LD_INT 2
31585: PPUSH
31586: LD_INT 4
31588: PPUSH
31589: LD_INT 2
31591: PPUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_INT 0
31597: PPUSH
31598: LD_INT 22
31600: PPUSH
31601: LD_INT 0
31603: PPUSH
31604: CALL 94009 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
31608: LD_INT 0
31610: PPUSH
31611: LD_INT 0
31613: PPUSH
31614: LD_INT 0
31616: PPUSH
31617: LD_INT 0
31619: PPUSH
31620: LD_INT 0
31622: PPUSH
31623: LD_INT 0
31625: PPUSH
31626: LD_INT 9
31628: PPUSH
31629: LD_INT 0
31631: PPUSH
31632: LD_INT 23
31634: PPUSH
31635: CALL 94009 0 9
// end ; end_of_file
31639: LD_VAR 0 1
31643: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
31644: GO 31646
31646: DISABLE
// begin ru_radar := 98 ;
31647: LD_ADDR_EXP 92
31651: PUSH
31652: LD_INT 98
31654: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31655: LD_ADDR_EXP 93
31659: PUSH
31660: LD_INT 89
31662: ST_TO_ADDR
// us_hack := 99 ;
31663: LD_ADDR_EXP 94
31667: PUSH
31668: LD_INT 99
31670: ST_TO_ADDR
// us_artillery := 97 ;
31671: LD_ADDR_EXP 95
31675: PUSH
31676: LD_INT 97
31678: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31679: LD_ADDR_EXP 96
31683: PUSH
31684: LD_INT 91
31686: ST_TO_ADDR
// end ; end_of_file
31687: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
31688: LD_INT 0
31690: PPUSH
31691: PPUSH
// skirmish := false ;
31692: LD_ADDR_EXP 97
31696: PUSH
31697: LD_INT 0
31699: ST_TO_ADDR
// debug_mc := false ;
31700: LD_ADDR_EXP 98
31704: PUSH
31705: LD_INT 0
31707: ST_TO_ADDR
// mc_bases := [ ] ;
31708: LD_ADDR_EXP 99
31712: PUSH
31713: EMPTY
31714: ST_TO_ADDR
// mc_sides := [ ] ;
31715: LD_ADDR_EXP 125
31719: PUSH
31720: EMPTY
31721: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
31722: LD_ADDR_EXP 100
31726: PUSH
31727: EMPTY
31728: ST_TO_ADDR
// mc_building_repairs := [ ] ;
31729: LD_ADDR_EXP 101
31733: PUSH
31734: EMPTY
31735: ST_TO_ADDR
// mc_need_heal := [ ] ;
31736: LD_ADDR_EXP 102
31740: PUSH
31741: EMPTY
31742: ST_TO_ADDR
// mc_healers := [ ] ;
31743: LD_ADDR_EXP 103
31747: PUSH
31748: EMPTY
31749: ST_TO_ADDR
// mc_build_list := [ ] ;
31750: LD_ADDR_EXP 104
31754: PUSH
31755: EMPTY
31756: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
31757: LD_ADDR_EXP 131
31761: PUSH
31762: EMPTY
31763: ST_TO_ADDR
// mc_builders := [ ] ;
31764: LD_ADDR_EXP 105
31768: PUSH
31769: EMPTY
31770: ST_TO_ADDR
// mc_construct_list := [ ] ;
31771: LD_ADDR_EXP 106
31775: PUSH
31776: EMPTY
31777: ST_TO_ADDR
// mc_turret_list := [ ] ;
31778: LD_ADDR_EXP 107
31782: PUSH
31783: EMPTY
31784: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
31785: LD_ADDR_EXP 108
31789: PUSH
31790: EMPTY
31791: ST_TO_ADDR
// mc_miners := [ ] ;
31792: LD_ADDR_EXP 113
31796: PUSH
31797: EMPTY
31798: ST_TO_ADDR
// mc_mines := [ ] ;
31799: LD_ADDR_EXP 112
31803: PUSH
31804: EMPTY
31805: ST_TO_ADDR
// mc_minefields := [ ] ;
31806: LD_ADDR_EXP 114
31810: PUSH
31811: EMPTY
31812: ST_TO_ADDR
// mc_crates := [ ] ;
31813: LD_ADDR_EXP 115
31817: PUSH
31818: EMPTY
31819: ST_TO_ADDR
// mc_crates_collector := [ ] ;
31820: LD_ADDR_EXP 116
31824: PUSH
31825: EMPTY
31826: ST_TO_ADDR
// mc_crates_area := [ ] ;
31827: LD_ADDR_EXP 117
31831: PUSH
31832: EMPTY
31833: ST_TO_ADDR
// mc_vehicles := [ ] ;
31834: LD_ADDR_EXP 118
31838: PUSH
31839: EMPTY
31840: ST_TO_ADDR
// mc_attack := [ ] ;
31841: LD_ADDR_EXP 119
31845: PUSH
31846: EMPTY
31847: ST_TO_ADDR
// mc_produce := [ ] ;
31848: LD_ADDR_EXP 120
31852: PUSH
31853: EMPTY
31854: ST_TO_ADDR
// mc_defender := [ ] ;
31855: LD_ADDR_EXP 121
31859: PUSH
31860: EMPTY
31861: ST_TO_ADDR
// mc_parking := [ ] ;
31862: LD_ADDR_EXP 123
31866: PUSH
31867: EMPTY
31868: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
31869: LD_ADDR_EXP 109
31873: PUSH
31874: EMPTY
31875: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
31876: LD_ADDR_EXP 111
31880: PUSH
31881: EMPTY
31882: ST_TO_ADDR
// mc_scan := [ ] ;
31883: LD_ADDR_EXP 122
31887: PUSH
31888: EMPTY
31889: ST_TO_ADDR
// mc_scan_area := [ ] ;
31890: LD_ADDR_EXP 124
31894: PUSH
31895: EMPTY
31896: ST_TO_ADDR
// mc_tech := [ ] ;
31897: LD_ADDR_EXP 126
31901: PUSH
31902: EMPTY
31903: ST_TO_ADDR
// mc_class := [ ] ;
31904: LD_ADDR_EXP 140
31908: PUSH
31909: EMPTY
31910: ST_TO_ADDR
// mc_class_case_use := [ ] ;
31911: LD_ADDR_EXP 141
31915: PUSH
31916: EMPTY
31917: ST_TO_ADDR
// end ;
31918: LD_VAR 0 1
31922: RET
// export function MC_Kill ( base ) ; begin
31923: LD_INT 0
31925: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
31926: LD_ADDR_EXP 99
31930: PUSH
31931: LD_EXP 99
31935: PPUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: EMPTY
31942: PPUSH
31943: CALL_OW 1
31947: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
31948: LD_ADDR_EXP 100
31952: PUSH
31953: LD_EXP 100
31957: PPUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: EMPTY
31964: PPUSH
31965: CALL_OW 1
31969: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
31970: LD_ADDR_EXP 101
31974: PUSH
31975: LD_EXP 101
31979: PPUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: EMPTY
31986: PPUSH
31987: CALL_OW 1
31991: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
31992: LD_ADDR_EXP 102
31996: PUSH
31997: LD_EXP 102
32001: PPUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: EMPTY
32008: PPUSH
32009: CALL_OW 1
32013: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
32014: LD_ADDR_EXP 103
32018: PUSH
32019: LD_EXP 103
32023: PPUSH
32024: LD_VAR 0 1
32028: PPUSH
32029: EMPTY
32030: PPUSH
32031: CALL_OW 1
32035: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
32036: LD_ADDR_EXP 104
32040: PUSH
32041: LD_EXP 104
32045: PPUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: EMPTY
32052: PPUSH
32053: CALL_OW 1
32057: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
32058: LD_ADDR_EXP 105
32062: PUSH
32063: LD_EXP 105
32067: PPUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: EMPTY
32074: PPUSH
32075: CALL_OW 1
32079: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
32080: LD_ADDR_EXP 106
32084: PUSH
32085: LD_EXP 106
32089: PPUSH
32090: LD_VAR 0 1
32094: PPUSH
32095: EMPTY
32096: PPUSH
32097: CALL_OW 1
32101: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
32102: LD_ADDR_EXP 107
32106: PUSH
32107: LD_EXP 107
32111: PPUSH
32112: LD_VAR 0 1
32116: PPUSH
32117: EMPTY
32118: PPUSH
32119: CALL_OW 1
32123: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
32124: LD_ADDR_EXP 108
32128: PUSH
32129: LD_EXP 108
32133: PPUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: EMPTY
32140: PPUSH
32141: CALL_OW 1
32145: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
32146: LD_ADDR_EXP 109
32150: PUSH
32151: LD_EXP 109
32155: PPUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: EMPTY
32162: PPUSH
32163: CALL_OW 1
32167: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
32168: LD_ADDR_EXP 110
32172: PUSH
32173: LD_EXP 110
32177: PPUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_INT 0
32185: PPUSH
32186: CALL_OW 1
32190: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
32191: LD_ADDR_EXP 111
32195: PUSH
32196: LD_EXP 111
32200: PPUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: EMPTY
32207: PPUSH
32208: CALL_OW 1
32212: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
32213: LD_ADDR_EXP 112
32217: PUSH
32218: LD_EXP 112
32222: PPUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: EMPTY
32229: PPUSH
32230: CALL_OW 1
32234: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
32235: LD_ADDR_EXP 113
32239: PUSH
32240: LD_EXP 113
32244: PPUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: EMPTY
32251: PPUSH
32252: CALL_OW 1
32256: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
32257: LD_ADDR_EXP 114
32261: PUSH
32262: LD_EXP 114
32266: PPUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: EMPTY
32273: PPUSH
32274: CALL_OW 1
32278: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
32279: LD_ADDR_EXP 115
32283: PUSH
32284: LD_EXP 115
32288: PPUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: EMPTY
32295: PPUSH
32296: CALL_OW 1
32300: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
32301: LD_ADDR_EXP 116
32305: PUSH
32306: LD_EXP 116
32310: PPUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: EMPTY
32317: PPUSH
32318: CALL_OW 1
32322: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
32323: LD_ADDR_EXP 117
32327: PUSH
32328: LD_EXP 117
32332: PPUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: EMPTY
32339: PPUSH
32340: CALL_OW 1
32344: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
32345: LD_ADDR_EXP 118
32349: PUSH
32350: LD_EXP 118
32354: PPUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: EMPTY
32361: PPUSH
32362: CALL_OW 1
32366: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
32367: LD_ADDR_EXP 119
32371: PUSH
32372: LD_EXP 119
32376: PPUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: EMPTY
32383: PPUSH
32384: CALL_OW 1
32388: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
32389: LD_ADDR_EXP 120
32393: PUSH
32394: LD_EXP 120
32398: PPUSH
32399: LD_VAR 0 1
32403: PPUSH
32404: EMPTY
32405: PPUSH
32406: CALL_OW 1
32410: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
32411: LD_ADDR_EXP 121
32415: PUSH
32416: LD_EXP 121
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: EMPTY
32427: PPUSH
32428: CALL_OW 1
32432: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
32433: LD_ADDR_EXP 122
32437: PUSH
32438: LD_EXP 122
32442: PPUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: EMPTY
32449: PPUSH
32450: CALL_OW 1
32454: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
32455: LD_ADDR_EXP 123
32459: PUSH
32460: LD_EXP 123
32464: PPUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: EMPTY
32471: PPUSH
32472: CALL_OW 1
32476: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
32477: LD_ADDR_EXP 124
32481: PUSH
32482: LD_EXP 124
32486: PPUSH
32487: LD_VAR 0 1
32491: PPUSH
32492: EMPTY
32493: PPUSH
32494: CALL_OW 1
32498: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
32499: LD_ADDR_EXP 126
32503: PUSH
32504: LD_EXP 126
32508: PPUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: EMPTY
32515: PPUSH
32516: CALL_OW 1
32520: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
32521: LD_ADDR_EXP 128
32525: PUSH
32526: LD_EXP 128
32530: PPUSH
32531: LD_VAR 0 1
32535: PPUSH
32536: EMPTY
32537: PPUSH
32538: CALL_OW 1
32542: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
32543: LD_ADDR_EXP 129
32547: PUSH
32548: LD_EXP 129
32552: PPUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: EMPTY
32559: PPUSH
32560: CALL_OW 1
32564: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
32565: LD_ADDR_EXP 130
32569: PUSH
32570: LD_EXP 130
32574: PPUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: EMPTY
32581: PPUSH
32582: CALL_OW 1
32586: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
32587: LD_ADDR_EXP 131
32591: PUSH
32592: LD_EXP 131
32596: PPUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: EMPTY
32603: PPUSH
32604: CALL_OW 1
32608: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
32609: LD_ADDR_EXP 132
32613: PUSH
32614: LD_EXP 132
32618: PPUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: EMPTY
32625: PPUSH
32626: CALL_OW 1
32630: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
32631: LD_ADDR_EXP 133
32635: PUSH
32636: LD_EXP 133
32640: PPUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: EMPTY
32647: PPUSH
32648: CALL_OW 1
32652: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
32653: LD_ADDR_EXP 134
32657: PUSH
32658: LD_EXP 134
32662: PPUSH
32663: LD_VAR 0 1
32667: PPUSH
32668: EMPTY
32669: PPUSH
32670: CALL_OW 1
32674: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
32675: LD_ADDR_EXP 135
32679: PUSH
32680: LD_EXP 135
32684: PPUSH
32685: LD_VAR 0 1
32689: PPUSH
32690: EMPTY
32691: PPUSH
32692: CALL_OW 1
32696: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
32697: LD_ADDR_EXP 136
32701: PUSH
32702: LD_EXP 136
32706: PPUSH
32707: LD_VAR 0 1
32711: PPUSH
32712: EMPTY
32713: PPUSH
32714: CALL_OW 1
32718: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
32719: LD_ADDR_EXP 137
32723: PUSH
32724: LD_EXP 137
32728: PPUSH
32729: LD_VAR 0 1
32733: PPUSH
32734: EMPTY
32735: PPUSH
32736: CALL_OW 1
32740: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
32741: LD_ADDR_EXP 138
32745: PUSH
32746: LD_EXP 138
32750: PPUSH
32751: LD_VAR 0 1
32755: PPUSH
32756: EMPTY
32757: PPUSH
32758: CALL_OW 1
32762: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
32763: LD_ADDR_EXP 139
32767: PUSH
32768: LD_EXP 139
32772: PPUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: EMPTY
32779: PPUSH
32780: CALL_OW 1
32784: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
32785: LD_ADDR_EXP 140
32789: PUSH
32790: LD_EXP 140
32794: PPUSH
32795: LD_VAR 0 1
32799: PPUSH
32800: EMPTY
32801: PPUSH
32802: CALL_OW 1
32806: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
32807: LD_ADDR_EXP 141
32811: PUSH
32812: LD_EXP 141
32816: PPUSH
32817: LD_VAR 0 1
32821: PPUSH
32822: LD_INT 0
32824: PPUSH
32825: CALL_OW 1
32829: ST_TO_ADDR
// end ;
32830: LD_VAR 0 2
32834: RET
// export function MC_Start ( ) ; var i ; begin
32835: LD_INT 0
32837: PPUSH
32838: PPUSH
// for i = 1 to mc_bases do
32839: LD_ADDR_VAR 0 2
32843: PUSH
32844: DOUBLE
32845: LD_INT 1
32847: DEC
32848: ST_TO_ADDR
32849: LD_EXP 99
32853: PUSH
32854: FOR_TO
32855: IFFALSE 33932
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
32857: LD_ADDR_EXP 99
32861: PUSH
32862: LD_EXP 99
32866: PPUSH
32867: LD_VAR 0 2
32871: PPUSH
32872: LD_EXP 99
32876: PUSH
32877: LD_VAR 0 2
32881: ARRAY
32882: PUSH
32883: LD_INT 0
32885: DIFF
32886: PPUSH
32887: CALL_OW 1
32891: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
32892: LD_ADDR_EXP 100
32896: PUSH
32897: LD_EXP 100
32901: PPUSH
32902: LD_VAR 0 2
32906: PPUSH
32907: EMPTY
32908: PPUSH
32909: CALL_OW 1
32913: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
32914: LD_ADDR_EXP 101
32918: PUSH
32919: LD_EXP 101
32923: PPUSH
32924: LD_VAR 0 2
32928: PPUSH
32929: EMPTY
32930: PPUSH
32931: CALL_OW 1
32935: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
32936: LD_ADDR_EXP 102
32940: PUSH
32941: LD_EXP 102
32945: PPUSH
32946: LD_VAR 0 2
32950: PPUSH
32951: EMPTY
32952: PPUSH
32953: CALL_OW 1
32957: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
32958: LD_ADDR_EXP 103
32962: PUSH
32963: LD_EXP 103
32967: PPUSH
32968: LD_VAR 0 2
32972: PPUSH
32973: EMPTY
32974: PUSH
32975: EMPTY
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PPUSH
32981: CALL_OW 1
32985: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
32986: LD_ADDR_EXP 104
32990: PUSH
32991: LD_EXP 104
32995: PPUSH
32996: LD_VAR 0 2
33000: PPUSH
33001: EMPTY
33002: PPUSH
33003: CALL_OW 1
33007: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
33008: LD_ADDR_EXP 131
33012: PUSH
33013: LD_EXP 131
33017: PPUSH
33018: LD_VAR 0 2
33022: PPUSH
33023: EMPTY
33024: PPUSH
33025: CALL_OW 1
33029: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
33030: LD_ADDR_EXP 105
33034: PUSH
33035: LD_EXP 105
33039: PPUSH
33040: LD_VAR 0 2
33044: PPUSH
33045: EMPTY
33046: PPUSH
33047: CALL_OW 1
33051: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
33052: LD_ADDR_EXP 106
33056: PUSH
33057: LD_EXP 106
33061: PPUSH
33062: LD_VAR 0 2
33066: PPUSH
33067: EMPTY
33068: PPUSH
33069: CALL_OW 1
33073: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
33074: LD_ADDR_EXP 107
33078: PUSH
33079: LD_EXP 107
33083: PPUSH
33084: LD_VAR 0 2
33088: PPUSH
33089: LD_EXP 99
33093: PUSH
33094: LD_VAR 0 2
33098: ARRAY
33099: PPUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 30
33105: PUSH
33106: LD_INT 32
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 33
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 72
33132: PPUSH
33133: CALL_OW 1
33137: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
33138: LD_ADDR_EXP 108
33142: PUSH
33143: LD_EXP 108
33147: PPUSH
33148: LD_VAR 0 2
33152: PPUSH
33153: LD_EXP 99
33157: PUSH
33158: LD_VAR 0 2
33162: ARRAY
33163: PPUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 30
33169: PUSH
33170: LD_INT 32
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 30
33179: PUSH
33180: LD_INT 31
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 58
33194: PUSH
33195: EMPTY
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PPUSH
33202: CALL_OW 72
33206: PPUSH
33207: CALL_OW 1
33211: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
33212: LD_ADDR_EXP 109
33216: PUSH
33217: LD_EXP 109
33221: PPUSH
33222: LD_VAR 0 2
33226: PPUSH
33227: EMPTY
33228: PPUSH
33229: CALL_OW 1
33233: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
33234: LD_ADDR_EXP 113
33238: PUSH
33239: LD_EXP 113
33243: PPUSH
33244: LD_VAR 0 2
33248: PPUSH
33249: EMPTY
33250: PPUSH
33251: CALL_OW 1
33255: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
33256: LD_ADDR_EXP 112
33260: PUSH
33261: LD_EXP 112
33265: PPUSH
33266: LD_VAR 0 2
33270: PPUSH
33271: EMPTY
33272: PPUSH
33273: CALL_OW 1
33277: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
33278: LD_ADDR_EXP 114
33282: PUSH
33283: LD_EXP 114
33287: PPUSH
33288: LD_VAR 0 2
33292: PPUSH
33293: EMPTY
33294: PPUSH
33295: CALL_OW 1
33299: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
33300: LD_ADDR_EXP 115
33304: PUSH
33305: LD_EXP 115
33309: PPUSH
33310: LD_VAR 0 2
33314: PPUSH
33315: EMPTY
33316: PPUSH
33317: CALL_OW 1
33321: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33322: LD_ADDR_EXP 116
33326: PUSH
33327: LD_EXP 116
33331: PPUSH
33332: LD_VAR 0 2
33336: PPUSH
33337: EMPTY
33338: PPUSH
33339: CALL_OW 1
33343: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
33344: LD_ADDR_EXP 117
33348: PUSH
33349: LD_EXP 117
33353: PPUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: EMPTY
33360: PPUSH
33361: CALL_OW 1
33365: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
33366: LD_ADDR_EXP 118
33370: PUSH
33371: LD_EXP 118
33375: PPUSH
33376: LD_VAR 0 2
33380: PPUSH
33381: EMPTY
33382: PPUSH
33383: CALL_OW 1
33387: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
33388: LD_ADDR_EXP 119
33392: PUSH
33393: LD_EXP 119
33397: PPUSH
33398: LD_VAR 0 2
33402: PPUSH
33403: EMPTY
33404: PPUSH
33405: CALL_OW 1
33409: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
33410: LD_ADDR_EXP 120
33414: PUSH
33415: LD_EXP 120
33419: PPUSH
33420: LD_VAR 0 2
33424: PPUSH
33425: EMPTY
33426: PPUSH
33427: CALL_OW 1
33431: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
33432: LD_ADDR_EXP 121
33436: PUSH
33437: LD_EXP 121
33441: PPUSH
33442: LD_VAR 0 2
33446: PPUSH
33447: EMPTY
33448: PPUSH
33449: CALL_OW 1
33453: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
33454: LD_ADDR_EXP 110
33458: PUSH
33459: LD_EXP 110
33463: PPUSH
33464: LD_VAR 0 2
33468: PPUSH
33469: LD_INT 0
33471: PPUSH
33472: CALL_OW 1
33476: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
33477: LD_ADDR_EXP 123
33481: PUSH
33482: LD_EXP 123
33486: PPUSH
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_INT 0
33494: PPUSH
33495: CALL_OW 1
33499: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
33500: LD_ADDR_EXP 111
33504: PUSH
33505: LD_EXP 111
33509: PPUSH
33510: LD_VAR 0 2
33514: PPUSH
33515: EMPTY
33516: PPUSH
33517: CALL_OW 1
33521: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
33522: LD_ADDR_EXP 122
33526: PUSH
33527: LD_EXP 122
33531: PPUSH
33532: LD_VAR 0 2
33536: PPUSH
33537: LD_INT 0
33539: PPUSH
33540: CALL_OW 1
33544: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
33545: LD_ADDR_EXP 124
33549: PUSH
33550: LD_EXP 124
33554: PPUSH
33555: LD_VAR 0 2
33559: PPUSH
33560: EMPTY
33561: PPUSH
33562: CALL_OW 1
33566: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
33567: LD_ADDR_EXP 127
33571: PUSH
33572: LD_EXP 127
33576: PPUSH
33577: LD_VAR 0 2
33581: PPUSH
33582: LD_INT 0
33584: PPUSH
33585: CALL_OW 1
33589: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
33590: LD_ADDR_EXP 128
33594: PUSH
33595: LD_EXP 128
33599: PPUSH
33600: LD_VAR 0 2
33604: PPUSH
33605: EMPTY
33606: PPUSH
33607: CALL_OW 1
33611: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
33612: LD_ADDR_EXP 129
33616: PUSH
33617: LD_EXP 129
33621: PPUSH
33622: LD_VAR 0 2
33626: PPUSH
33627: EMPTY
33628: PPUSH
33629: CALL_OW 1
33633: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33634: LD_ADDR_EXP 130
33638: PUSH
33639: LD_EXP 130
33643: PPUSH
33644: LD_VAR 0 2
33648: PPUSH
33649: EMPTY
33650: PPUSH
33651: CALL_OW 1
33655: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
33656: LD_ADDR_EXP 132
33660: PUSH
33661: LD_EXP 132
33665: PPUSH
33666: LD_VAR 0 2
33670: PPUSH
33671: LD_EXP 99
33675: PUSH
33676: LD_VAR 0 2
33680: ARRAY
33681: PPUSH
33682: LD_INT 2
33684: PUSH
33685: LD_INT 30
33687: PUSH
33688: LD_INT 6
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: LD_INT 7
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 30
33707: PUSH
33708: LD_INT 8
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: PPUSH
33721: CALL_OW 72
33725: PPUSH
33726: CALL_OW 1
33730: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
33731: LD_ADDR_EXP 133
33735: PUSH
33736: LD_EXP 133
33740: PPUSH
33741: LD_VAR 0 2
33745: PPUSH
33746: EMPTY
33747: PPUSH
33748: CALL_OW 1
33752: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
33753: LD_ADDR_EXP 134
33757: PUSH
33758: LD_EXP 134
33762: PPUSH
33763: LD_VAR 0 2
33767: PPUSH
33768: EMPTY
33769: PPUSH
33770: CALL_OW 1
33774: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
33775: LD_ADDR_EXP 135
33779: PUSH
33780: LD_EXP 135
33784: PPUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: EMPTY
33791: PPUSH
33792: CALL_OW 1
33796: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
33797: LD_ADDR_EXP 136
33801: PUSH
33802: LD_EXP 136
33806: PPUSH
33807: LD_VAR 0 2
33811: PPUSH
33812: EMPTY
33813: PPUSH
33814: CALL_OW 1
33818: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
33819: LD_ADDR_EXP 137
33823: PUSH
33824: LD_EXP 137
33828: PPUSH
33829: LD_VAR 0 2
33833: PPUSH
33834: EMPTY
33835: PPUSH
33836: CALL_OW 1
33840: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
33841: LD_ADDR_EXP 138
33845: PUSH
33846: LD_EXP 138
33850: PPUSH
33851: LD_VAR 0 2
33855: PPUSH
33856: EMPTY
33857: PPUSH
33858: CALL_OW 1
33862: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
33863: LD_ADDR_EXP 139
33867: PUSH
33868: LD_EXP 139
33872: PPUSH
33873: LD_VAR 0 2
33877: PPUSH
33878: EMPTY
33879: PPUSH
33880: CALL_OW 1
33884: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
33885: LD_ADDR_EXP 140
33889: PUSH
33890: LD_EXP 140
33894: PPUSH
33895: LD_VAR 0 2
33899: PPUSH
33900: EMPTY
33901: PPUSH
33902: CALL_OW 1
33906: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
33907: LD_ADDR_EXP 141
33911: PUSH
33912: LD_EXP 141
33916: PPUSH
33917: LD_VAR 0 2
33921: PPUSH
33922: LD_INT 0
33924: PPUSH
33925: CALL_OW 1
33929: ST_TO_ADDR
// end ;
33930: GO 32854
33932: POP
33933: POP
// MC_InitSides ( ) ;
33934: CALL 34220 0 0
// MC_InitResearch ( ) ;
33938: CALL 33959 0 0
// CustomInitMacro ( ) ;
33942: CALL 437 0 0
// skirmish := true ;
33946: LD_ADDR_EXP 97
33950: PUSH
33951: LD_INT 1
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 1
33958: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
// if not mc_bases then
33967: LD_EXP 99
33971: NOT
33972: IFFALSE 33976
// exit ;
33974: GO 34215
// for i = 1 to 8 do
33976: LD_ADDR_VAR 0 2
33980: PUSH
33981: DOUBLE
33982: LD_INT 1
33984: DEC
33985: ST_TO_ADDR
33986: LD_INT 8
33988: PUSH
33989: FOR_TO
33990: IFFALSE 34016
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
33992: LD_ADDR_EXP 126
33996: PUSH
33997: LD_EXP 126
34001: PPUSH
34002: LD_VAR 0 2
34006: PPUSH
34007: EMPTY
34008: PPUSH
34009: CALL_OW 1
34013: ST_TO_ADDR
34014: GO 33989
34016: POP
34017: POP
// tmp := [ ] ;
34018: LD_ADDR_VAR 0 5
34022: PUSH
34023: EMPTY
34024: ST_TO_ADDR
// for i = 1 to mc_sides do
34025: LD_ADDR_VAR 0 2
34029: PUSH
34030: DOUBLE
34031: LD_INT 1
34033: DEC
34034: ST_TO_ADDR
34035: LD_EXP 125
34039: PUSH
34040: FOR_TO
34041: IFFALSE 34099
// if not mc_sides [ i ] in tmp then
34043: LD_EXP 125
34047: PUSH
34048: LD_VAR 0 2
34052: ARRAY
34053: PUSH
34054: LD_VAR 0 5
34058: IN
34059: NOT
34060: IFFALSE 34097
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
34062: LD_ADDR_VAR 0 5
34066: PUSH
34067: LD_VAR 0 5
34071: PPUSH
34072: LD_VAR 0 5
34076: PUSH
34077: LD_INT 1
34079: PLUS
34080: PPUSH
34081: LD_EXP 125
34085: PUSH
34086: LD_VAR 0 2
34090: ARRAY
34091: PPUSH
34092: CALL_OW 2
34096: ST_TO_ADDR
34097: GO 34040
34099: POP
34100: POP
// if not tmp then
34101: LD_VAR 0 5
34105: NOT
34106: IFFALSE 34110
// exit ;
34108: GO 34215
// for j in tmp do
34110: LD_ADDR_VAR 0 3
34114: PUSH
34115: LD_VAR 0 5
34119: PUSH
34120: FOR_IN
34121: IFFALSE 34213
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
34123: LD_ADDR_VAR 0 6
34127: PUSH
34128: LD_INT 22
34130: PUSH
34131: LD_VAR 0 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PPUSH
34140: CALL_OW 69
34144: ST_TO_ADDR
// if not un then
34145: LD_VAR 0 6
34149: NOT
34150: IFFALSE 34154
// continue ;
34152: GO 34120
// nation := GetNation ( un [ 1 ] ) ;
34154: LD_ADDR_VAR 0 4
34158: PUSH
34159: LD_VAR 0 6
34163: PUSH
34164: LD_INT 1
34166: ARRAY
34167: PPUSH
34168: CALL_OW 248
34172: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
34173: LD_ADDR_EXP 126
34177: PUSH
34178: LD_EXP 126
34182: PPUSH
34183: LD_VAR 0 3
34187: PPUSH
34188: LD_VAR 0 3
34192: PPUSH
34193: LD_VAR 0 4
34197: PPUSH
34198: LD_INT 1
34200: PPUSH
34201: CALL 59649 0 3
34205: PPUSH
34206: CALL_OW 1
34210: ST_TO_ADDR
// end ;
34211: GO 34120
34213: POP
34214: POP
// end ;
34215: LD_VAR 0 1
34219: RET
// export function MC_InitSides ( ) ; var i ; begin
34220: LD_INT 0
34222: PPUSH
34223: PPUSH
// if not mc_bases then
34224: LD_EXP 99
34228: NOT
34229: IFFALSE 34233
// exit ;
34231: GO 34307
// for i = 1 to mc_bases do
34233: LD_ADDR_VAR 0 2
34237: PUSH
34238: DOUBLE
34239: LD_INT 1
34241: DEC
34242: ST_TO_ADDR
34243: LD_EXP 99
34247: PUSH
34248: FOR_TO
34249: IFFALSE 34305
// if mc_bases [ i ] then
34251: LD_EXP 99
34255: PUSH
34256: LD_VAR 0 2
34260: ARRAY
34261: IFFALSE 34303
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
34263: LD_ADDR_EXP 125
34267: PUSH
34268: LD_EXP 125
34272: PPUSH
34273: LD_VAR 0 2
34277: PPUSH
34278: LD_EXP 99
34282: PUSH
34283: LD_VAR 0 2
34287: ARRAY
34288: PUSH
34289: LD_INT 1
34291: ARRAY
34292: PPUSH
34293: CALL_OW 255
34297: PPUSH
34298: CALL_OW 1
34302: ST_TO_ADDR
34303: GO 34248
34305: POP
34306: POP
// end ;
34307: LD_VAR 0 1
34311: RET
// every 0 0$01 trigger skirmish do
34312: LD_EXP 97
34316: IFFALSE 34470
34318: GO 34320
34320: DISABLE
// begin enable ;
34321: ENABLE
// MC_CheckBuildings ( ) ;
34322: CALL 38636 0 0
// MC_CheckPeopleLife ( ) ;
34326: CALL 38761 0 0
// RaiseSailEvent ( 100 ) ;
34330: LD_INT 100
34332: PPUSH
34333: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
34337: LD_INT 103
34339: PPUSH
34340: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
34344: LD_INT 104
34346: PPUSH
34347: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
34351: LD_INT 105
34353: PPUSH
34354: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
34358: LD_INT 106
34360: PPUSH
34361: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
34365: LD_INT 107
34367: PPUSH
34368: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
34372: LD_INT 108
34374: PPUSH
34375: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
34379: LD_INT 109
34381: PPUSH
34382: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
34386: LD_INT 110
34388: PPUSH
34389: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
34393: LD_INT 111
34395: PPUSH
34396: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
34400: LD_INT 112
34402: PPUSH
34403: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
34407: LD_INT 113
34409: PPUSH
34410: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
34414: LD_INT 120
34416: PPUSH
34417: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
34421: LD_INT 121
34423: PPUSH
34424: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
34428: LD_INT 122
34430: PPUSH
34431: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
34435: LD_INT 123
34437: PPUSH
34438: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
34442: LD_INT 124
34444: PPUSH
34445: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
34449: LD_INT 125
34451: PPUSH
34452: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
34456: LD_INT 126
34458: PPUSH
34459: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
34463: LD_INT 200
34465: PPUSH
34466: CALL_OW 427
// end ;
34470: END
// on SailEvent ( event ) do begin if event < 100 then
34471: LD_VAR 0 1
34475: PUSH
34476: LD_INT 100
34478: LESS
34479: IFFALSE 34490
// CustomEvent ( event ) ;
34481: LD_VAR 0 1
34485: PPUSH
34486: CALL 30288 0 1
// if event = 100 then
34490: LD_VAR 0 1
34494: PUSH
34495: LD_INT 100
34497: EQUAL
34498: IFFALSE 34504
// MC_ClassManager ( ) ;
34500: CALL 34896 0 0
// if event = 101 then
34504: LD_VAR 0 1
34508: PUSH
34509: LD_INT 101
34511: EQUAL
34512: IFFALSE 34518
// MC_RepairBuildings ( ) ;
34514: CALL 39357 0 0
// if event = 102 then
34518: LD_VAR 0 1
34522: PUSH
34523: LD_INT 102
34525: EQUAL
34526: IFFALSE 34532
// MC_Heal ( ) ;
34528: CALL 39763 0 0
// if event = 103 then
34532: LD_VAR 0 1
34536: PUSH
34537: LD_INT 103
34539: EQUAL
34540: IFFALSE 34546
// MC_Build ( ) ;
34542: CALL 40185 0 0
// if event = 104 then
34546: LD_VAR 0 1
34550: PUSH
34551: LD_INT 104
34553: EQUAL
34554: IFFALSE 34560
// MC_TurretWeapon ( ) ;
34556: CALL 41798 0 0
// if event = 105 then
34560: LD_VAR 0 1
34564: PUSH
34565: LD_INT 105
34567: EQUAL
34568: IFFALSE 34574
// MC_BuildUpgrade ( ) ;
34570: CALL 41349 0 0
// if event = 106 then
34574: LD_VAR 0 1
34578: PUSH
34579: LD_INT 106
34581: EQUAL
34582: IFFALSE 34588
// MC_PlantMines ( ) ;
34584: CALL 42228 0 0
// if event = 107 then
34588: LD_VAR 0 1
34592: PUSH
34593: LD_INT 107
34595: EQUAL
34596: IFFALSE 34602
// MC_CollectCrates ( ) ;
34598: CALL 43262 0 0
// if event = 108 then
34602: LD_VAR 0 1
34606: PUSH
34607: LD_INT 108
34609: EQUAL
34610: IFFALSE 34616
// MC_LinkRemoteControl ( ) ;
34612: CALL 45019 0 0
// if event = 109 then
34616: LD_VAR 0 1
34620: PUSH
34621: LD_INT 109
34623: EQUAL
34624: IFFALSE 34630
// MC_ProduceVehicle ( ) ;
34626: CALL 45200 0 0
// if event = 110 then
34630: LD_VAR 0 1
34634: PUSH
34635: LD_INT 110
34637: EQUAL
34638: IFFALSE 34644
// MC_SendAttack ( ) ;
34640: CALL 45681 0 0
// if event = 111 then
34644: LD_VAR 0 1
34648: PUSH
34649: LD_INT 111
34651: EQUAL
34652: IFFALSE 34658
// MC_Defend ( ) ;
34654: CALL 45789 0 0
// if event = 112 then
34658: LD_VAR 0 1
34662: PUSH
34663: LD_INT 112
34665: EQUAL
34666: IFFALSE 34672
// MC_Research ( ) ;
34668: CALL 46416 0 0
// if event = 113 then
34672: LD_VAR 0 1
34676: PUSH
34677: LD_INT 113
34679: EQUAL
34680: IFFALSE 34686
// MC_MinesTrigger ( ) ;
34682: CALL 47530 0 0
// if event = 120 then
34686: LD_VAR 0 1
34690: PUSH
34691: LD_INT 120
34693: EQUAL
34694: IFFALSE 34700
// MC_RepairVehicle ( ) ;
34696: CALL 47629 0 0
// if event = 121 then
34700: LD_VAR 0 1
34704: PUSH
34705: LD_INT 121
34707: EQUAL
34708: IFFALSE 34714
// MC_TameApe ( ) ;
34710: CALL 48372 0 0
// if event = 122 then
34714: LD_VAR 0 1
34718: PUSH
34719: LD_INT 122
34721: EQUAL
34722: IFFALSE 34728
// MC_ChangeApeClass ( ) ;
34724: CALL 49201 0 0
// if event = 123 then
34728: LD_VAR 0 1
34732: PUSH
34733: LD_INT 123
34735: EQUAL
34736: IFFALSE 34742
// MC_Bazooka ( ) ;
34738: CALL 49851 0 0
// if event = 124 then
34742: LD_VAR 0 1
34746: PUSH
34747: LD_INT 124
34749: EQUAL
34750: IFFALSE 34756
// MC_TeleportExit ( ) ;
34752: CALL 50049 0 0
// if event = 125 then
34756: LD_VAR 0 1
34760: PUSH
34761: LD_INT 125
34763: EQUAL
34764: IFFALSE 34770
// MC_Deposits ( ) ;
34766: CALL 50696 0 0
// if event = 126 then
34770: LD_VAR 0 1
34774: PUSH
34775: LD_INT 126
34777: EQUAL
34778: IFFALSE 34784
// MC_RemoteDriver ( ) ;
34780: CALL 51321 0 0
// if event = 200 then
34784: LD_VAR 0 1
34788: PUSH
34789: LD_INT 200
34791: EQUAL
34792: IFFALSE 34798
// MC_Idle ( ) ;
34794: CALL 53054 0 0
// end ;
34798: PPOPN 1
34800: END
// export function MC_Reset ( base , tag ) ; var i ; begin
34801: LD_INT 0
34803: PPUSH
34804: PPUSH
// if not mc_bases [ base ] or not tag then
34805: LD_EXP 99
34809: PUSH
34810: LD_VAR 0 1
34814: ARRAY
34815: NOT
34816: PUSH
34817: LD_VAR 0 2
34821: NOT
34822: OR
34823: IFFALSE 34827
// exit ;
34825: GO 34891
// for i in mc_bases [ base ] union mc_ape [ base ] do
34827: LD_ADDR_VAR 0 4
34831: PUSH
34832: LD_EXP 99
34836: PUSH
34837: LD_VAR 0 1
34841: ARRAY
34842: PUSH
34843: LD_EXP 128
34847: PUSH
34848: LD_VAR 0 1
34852: ARRAY
34853: UNION
34854: PUSH
34855: FOR_IN
34856: IFFALSE 34889
// if GetTag ( i ) = tag then
34858: LD_VAR 0 4
34862: PPUSH
34863: CALL_OW 110
34867: PUSH
34868: LD_VAR 0 2
34872: EQUAL
34873: IFFALSE 34887
// SetTag ( i , 0 ) ;
34875: LD_VAR 0 4
34879: PPUSH
34880: LD_INT 0
34882: PPUSH
34883: CALL_OW 109
34887: GO 34855
34889: POP
34890: POP
// end ;
34891: LD_VAR 0 3
34895: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
34896: LD_INT 0
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
// if not mc_bases then
34906: LD_EXP 99
34910: NOT
34911: IFFALSE 34915
// exit ;
34913: GO 35373
// for i = 1 to mc_bases do
34915: LD_ADDR_VAR 0 2
34919: PUSH
34920: DOUBLE
34921: LD_INT 1
34923: DEC
34924: ST_TO_ADDR
34925: LD_EXP 99
34929: PUSH
34930: FOR_TO
34931: IFFALSE 35371
// begin tmp := MC_ClassCheckReq ( i ) ;
34933: LD_ADDR_VAR 0 4
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: CALL 35378 0 1
34947: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
34948: LD_ADDR_EXP 140
34952: PUSH
34953: LD_EXP 140
34957: PPUSH
34958: LD_VAR 0 2
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: CALL_OW 1
34972: ST_TO_ADDR
// if not tmp then
34973: LD_VAR 0 4
34977: NOT
34978: IFFALSE 34982
// continue ;
34980: GO 34930
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
34982: LD_ADDR_VAR 0 6
34986: PUSH
34987: LD_EXP 99
34991: PUSH
34992: LD_VAR 0 2
34996: ARRAY
34997: PPUSH
34998: LD_INT 2
35000: PUSH
35001: LD_INT 30
35003: PUSH
35004: LD_INT 4
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 30
35013: PUSH
35014: LD_INT 5
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: PPUSH
35026: CALL_OW 72
35030: PUSH
35031: LD_EXP 99
35035: PUSH
35036: LD_VAR 0 2
35040: ARRAY
35041: PPUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 30
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 30
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: PPUSH
35070: CALL_OW 72
35074: PUSH
35075: LD_EXP 99
35079: PUSH
35080: LD_VAR 0 2
35084: ARRAY
35085: PPUSH
35086: LD_INT 30
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PPUSH
35096: CALL_OW 72
35100: PUSH
35101: LD_EXP 99
35105: PUSH
35106: LD_VAR 0 2
35110: ARRAY
35111: PPUSH
35112: LD_INT 2
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: LD_INT 6
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 30
35127: PUSH
35128: LD_INT 7
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 30
35137: PUSH
35138: LD_INT 8
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: PPUSH
35151: CALL_OW 72
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// for j = 1 to 4 do
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: DOUBLE
35168: LD_INT 1
35170: DEC
35171: ST_TO_ADDR
35172: LD_INT 4
35174: PUSH
35175: FOR_TO
35176: IFFALSE 35367
// begin if not tmp [ j ] then
35178: LD_VAR 0 4
35182: PUSH
35183: LD_VAR 0 3
35187: ARRAY
35188: NOT
35189: IFFALSE 35193
// continue ;
35191: GO 35175
// for p in tmp [ j ] do
35193: LD_ADDR_VAR 0 5
35197: PUSH
35198: LD_VAR 0 4
35202: PUSH
35203: LD_VAR 0 3
35207: ARRAY
35208: PUSH
35209: FOR_IN
35210: IFFALSE 35363
// begin if not b [ j ] then
35212: LD_VAR 0 6
35216: PUSH
35217: LD_VAR 0 3
35221: ARRAY
35222: NOT
35223: IFFALSE 35227
// break ;
35225: GO 35363
// e := 0 ;
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: LD_INT 0
35234: ST_TO_ADDR
// for k in b [ j ] do
35235: LD_ADDR_VAR 0 8
35239: PUSH
35240: LD_VAR 0 6
35244: PUSH
35245: LD_VAR 0 3
35249: ARRAY
35250: PUSH
35251: FOR_IN
35252: IFFALSE 35279
// if IsNotFull ( k ) then
35254: LD_VAR 0 8
35258: PPUSH
35259: CALL 63675 0 1
35263: IFFALSE 35277
// begin e := k ;
35265: LD_ADDR_VAR 0 7
35269: PUSH
35270: LD_VAR 0 8
35274: ST_TO_ADDR
// break ;
35275: GO 35279
// end ;
35277: GO 35251
35279: POP
35280: POP
// if e and not UnitGoingToBuilding ( p , e ) then
35281: LD_VAR 0 7
35285: PUSH
35286: LD_VAR 0 5
35290: PPUSH
35291: LD_VAR 0 7
35295: PPUSH
35296: CALL 100663 0 2
35300: NOT
35301: AND
35302: IFFALSE 35361
// begin if IsInUnit ( p ) then
35304: LD_VAR 0 5
35308: PPUSH
35309: CALL_OW 310
35313: IFFALSE 35324
// ComExitBuilding ( p ) ;
35315: LD_VAR 0 5
35319: PPUSH
35320: CALL_OW 122
// ComEnterUnit ( p , e ) ;
35324: LD_VAR 0 5
35328: PPUSH
35329: LD_VAR 0 7
35333: PPUSH
35334: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
35338: LD_VAR 0 5
35342: PPUSH
35343: LD_VAR 0 3
35347: PPUSH
35348: CALL_OW 183
// AddComExitBuilding ( p ) ;
35352: LD_VAR 0 5
35356: PPUSH
35357: CALL_OW 182
// end ; end ;
35361: GO 35209
35363: POP
35364: POP
// end ;
35365: GO 35175
35367: POP
35368: POP
// end ;
35369: GO 34930
35371: POP
35372: POP
// end ;
35373: LD_VAR 0 1
35377: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
35378: LD_INT 0
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35392: LD_VAR 0 1
35396: NOT
35397: PUSH
35398: LD_EXP 99
35402: PUSH
35403: LD_VAR 0 1
35407: ARRAY
35408: NOT
35409: OR
35410: PUSH
35411: LD_EXP 99
35415: PUSH
35416: LD_VAR 0 1
35420: ARRAY
35421: PPUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 30
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 30
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: PPUSH
35450: CALL_OW 72
35454: NOT
35455: OR
35456: IFFALSE 35460
// exit ;
35458: GO 38631
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35460: LD_ADDR_VAR 0 4
35464: PUSH
35465: LD_EXP 99
35469: PUSH
35470: LD_VAR 0 1
35474: ARRAY
35475: PPUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 25
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 25
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 25
35501: PUSH
35502: LD_INT 3
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 25
35511: PUSH
35512: LD_INT 4
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 25
35521: PUSH
35522: LD_INT 5
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 25
35531: PUSH
35532: LD_INT 8
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 25
35541: PUSH
35542: LD_INT 9
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: PPUSH
35559: CALL_OW 72
35563: ST_TO_ADDR
// for i in tmp do
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_VAR 0 4
35573: PUSH
35574: FOR_IN
35575: IFFALSE 35606
// if GetTag ( i ) then
35577: LD_VAR 0 3
35581: PPUSH
35582: CALL_OW 110
35586: IFFALSE 35604
// tmp := tmp diff i ;
35588: LD_ADDR_VAR 0 4
35592: PUSH
35593: LD_VAR 0 4
35597: PUSH
35598: LD_VAR 0 3
35602: DIFF
35603: ST_TO_ADDR
35604: GO 35574
35606: POP
35607: POP
// if not tmp then
35608: LD_VAR 0 4
35612: NOT
35613: IFFALSE 35617
// exit ;
35615: GO 38631
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35617: LD_ADDR_VAR 0 5
35621: PUSH
35622: LD_EXP 99
35626: PUSH
35627: LD_VAR 0 1
35631: ARRAY
35632: PPUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 25
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 25
35648: PUSH
35649: LD_INT 5
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 25
35658: PUSH
35659: LD_INT 8
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 25
35668: PUSH
35669: LD_INT 9
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL_OW 72
35687: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
35688: LD_ADDR_VAR 0 6
35692: PUSH
35693: LD_EXP 99
35697: PUSH
35698: LD_VAR 0 1
35702: ARRAY
35703: PPUSH
35704: LD_INT 25
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 72
35718: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
35719: LD_ADDR_VAR 0 7
35723: PUSH
35724: LD_EXP 99
35728: PUSH
35729: LD_VAR 0 1
35733: ARRAY
35734: PPUSH
35735: LD_INT 25
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PPUSH
35745: CALL_OW 72
35749: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
35750: LD_ADDR_VAR 0 8
35754: PUSH
35755: LD_EXP 99
35759: PUSH
35760: LD_VAR 0 1
35764: ARRAY
35765: PPUSH
35766: LD_INT 25
35768: PUSH
35769: LD_INT 4
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 24
35778: PUSH
35779: LD_INT 251
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PPUSH
35790: CALL_OW 72
35794: ST_TO_ADDR
// if mc_scan [ base ] then
35795: LD_EXP 122
35799: PUSH
35800: LD_VAR 0 1
35804: ARRAY
35805: IFFALSE 36266
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
35807: LD_ADDR_EXP 141
35811: PUSH
35812: LD_EXP 141
35816: PPUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: LD_INT 4
35824: PPUSH
35825: CALL_OW 1
35829: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
35830: LD_ADDR_VAR 0 12
35834: PUSH
35835: LD_EXP 99
35839: PUSH
35840: LD_VAR 0 1
35844: ARRAY
35845: PPUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 30
35851: PUSH
35852: LD_INT 4
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 30
35861: PUSH
35862: LD_INT 5
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: PPUSH
35874: CALL_OW 72
35878: ST_TO_ADDR
// if not b then
35879: LD_VAR 0 12
35883: NOT
35884: IFFALSE 35888
// exit ;
35886: GO 38631
// p := [ ] ;
35888: LD_ADDR_VAR 0 11
35892: PUSH
35893: EMPTY
35894: ST_TO_ADDR
// if sci >= 2 then
35895: LD_VAR 0 8
35899: PUSH
35900: LD_INT 2
35902: GREATEREQUAL
35903: IFFALSE 35934
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
35905: LD_ADDR_VAR 0 8
35909: PUSH
35910: LD_VAR 0 8
35914: PUSH
35915: LD_INT 1
35917: ARRAY
35918: PUSH
35919: LD_VAR 0 8
35923: PUSH
35924: LD_INT 2
35926: ARRAY
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: ST_TO_ADDR
35932: GO 35995
// if sci = 1 then
35934: LD_VAR 0 8
35938: PUSH
35939: LD_INT 1
35941: EQUAL
35942: IFFALSE 35963
// sci := [ sci [ 1 ] ] else
35944: LD_ADDR_VAR 0 8
35948: PUSH
35949: LD_VAR 0 8
35953: PUSH
35954: LD_INT 1
35956: ARRAY
35957: PUSH
35958: EMPTY
35959: LIST
35960: ST_TO_ADDR
35961: GO 35995
// if sci = 0 then
35963: LD_VAR 0 8
35967: PUSH
35968: LD_INT 0
35970: EQUAL
35971: IFFALSE 35995
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
35973: LD_ADDR_VAR 0 11
35977: PUSH
35978: LD_VAR 0 4
35982: PPUSH
35983: LD_INT 4
35985: PPUSH
35986: CALL 100526 0 2
35990: PUSH
35991: LD_INT 1
35993: ARRAY
35994: ST_TO_ADDR
// if eng > 4 then
35995: LD_VAR 0 6
35999: PUSH
36000: LD_INT 4
36002: GREATER
36003: IFFALSE 36049
// for i = eng downto 4 do
36005: LD_ADDR_VAR 0 3
36009: PUSH
36010: DOUBLE
36011: LD_VAR 0 6
36015: INC
36016: ST_TO_ADDR
36017: LD_INT 4
36019: PUSH
36020: FOR_DOWNTO
36021: IFFALSE 36047
// eng := eng diff eng [ i ] ;
36023: LD_ADDR_VAR 0 6
36027: PUSH
36028: LD_VAR 0 6
36032: PUSH
36033: LD_VAR 0 6
36037: PUSH
36038: LD_VAR 0 3
36042: ARRAY
36043: DIFF
36044: ST_TO_ADDR
36045: GO 36020
36047: POP
36048: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
36049: LD_ADDR_VAR 0 4
36053: PUSH
36054: LD_VAR 0 4
36058: PUSH
36059: LD_VAR 0 5
36063: PUSH
36064: LD_VAR 0 6
36068: UNION
36069: PUSH
36070: LD_VAR 0 7
36074: UNION
36075: PUSH
36076: LD_VAR 0 8
36080: UNION
36081: DIFF
36082: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
36083: LD_ADDR_VAR 0 13
36087: PUSH
36088: LD_EXP 99
36092: PUSH
36093: LD_VAR 0 1
36097: ARRAY
36098: PPUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 30
36104: PUSH
36105: LD_INT 32
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 30
36114: PUSH
36115: LD_INT 31
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: PPUSH
36127: CALL_OW 72
36131: PUSH
36132: LD_EXP 99
36136: PUSH
36137: LD_VAR 0 1
36141: ARRAY
36142: PPUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 30
36148: PUSH
36149: LD_INT 4
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 30
36158: PUSH
36159: LD_INT 5
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL_OW 72
36175: PUSH
36176: LD_INT 6
36178: MUL
36179: PLUS
36180: ST_TO_ADDR
// if bcount < tmp then
36181: LD_VAR 0 13
36185: PUSH
36186: LD_VAR 0 4
36190: LESS
36191: IFFALSE 36237
// for i = tmp downto bcount do
36193: LD_ADDR_VAR 0 3
36197: PUSH
36198: DOUBLE
36199: LD_VAR 0 4
36203: INC
36204: ST_TO_ADDR
36205: LD_VAR 0 13
36209: PUSH
36210: FOR_DOWNTO
36211: IFFALSE 36235
// tmp := Delete ( tmp , tmp ) ;
36213: LD_ADDR_VAR 0 4
36217: PUSH
36218: LD_VAR 0 4
36222: PPUSH
36223: LD_VAR 0 4
36227: PPUSH
36228: CALL_OW 3
36232: ST_TO_ADDR
36233: GO 36210
36235: POP
36236: POP
// result := [ tmp , 0 , 0 , p ] ;
36237: LD_ADDR_VAR 0 2
36241: PUSH
36242: LD_VAR 0 4
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_VAR 0 11
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: ST_TO_ADDR
// exit ;
36264: GO 38631
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36266: LD_EXP 99
36270: PUSH
36271: LD_VAR 0 1
36275: ARRAY
36276: PPUSH
36277: LD_INT 2
36279: PUSH
36280: LD_INT 30
36282: PUSH
36283: LD_INT 6
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 30
36292: PUSH
36293: LD_INT 7
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 30
36302: PUSH
36303: LD_INT 8
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: PPUSH
36316: CALL_OW 72
36320: NOT
36321: PUSH
36322: LD_EXP 99
36326: PUSH
36327: LD_VAR 0 1
36331: ARRAY
36332: PPUSH
36333: LD_INT 30
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PPUSH
36343: CALL_OW 72
36347: NOT
36348: AND
36349: IFFALSE 36421
// begin if eng = tmp then
36351: LD_VAR 0 6
36355: PUSH
36356: LD_VAR 0 4
36360: EQUAL
36361: IFFALSE 36365
// exit ;
36363: GO 38631
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
36365: LD_ADDR_EXP 141
36369: PUSH
36370: LD_EXP 141
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: LD_INT 1
36382: PPUSH
36383: CALL_OW 1
36387: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
36388: LD_ADDR_VAR 0 2
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_VAR 0 4
36400: PUSH
36401: LD_VAR 0 6
36405: DIFF
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// exit ;
36419: GO 38631
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36421: LD_EXP 126
36425: PUSH
36426: LD_EXP 125
36430: PUSH
36431: LD_VAR 0 1
36435: ARRAY
36436: ARRAY
36437: PUSH
36438: LD_EXP 99
36442: PUSH
36443: LD_VAR 0 1
36447: ARRAY
36448: PPUSH
36449: LD_INT 2
36451: PUSH
36452: LD_INT 30
36454: PUSH
36455: LD_INT 6
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 30
36464: PUSH
36465: LD_INT 7
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 30
36474: PUSH
36475: LD_INT 8
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: PPUSH
36488: CALL_OW 72
36492: AND
36493: PUSH
36494: LD_EXP 99
36498: PUSH
36499: LD_VAR 0 1
36503: ARRAY
36504: PPUSH
36505: LD_INT 30
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 72
36519: NOT
36520: AND
36521: IFFALSE 36735
// begin if sci >= 6 then
36523: LD_VAR 0 8
36527: PUSH
36528: LD_INT 6
36530: GREATEREQUAL
36531: IFFALSE 36535
// exit ;
36533: GO 38631
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
36535: LD_ADDR_EXP 141
36539: PUSH
36540: LD_EXP 141
36544: PPUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_INT 2
36552: PPUSH
36553: CALL_OW 1
36557: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
36558: LD_ADDR_VAR 0 9
36562: PUSH
36563: LD_VAR 0 4
36567: PUSH
36568: LD_VAR 0 8
36572: DIFF
36573: PPUSH
36574: LD_INT 4
36576: PPUSH
36577: CALL 100526 0 2
36581: ST_TO_ADDR
// p := [ ] ;
36582: LD_ADDR_VAR 0 11
36586: PUSH
36587: EMPTY
36588: ST_TO_ADDR
// if sci < 6 and sort > 6 then
36589: LD_VAR 0 8
36593: PUSH
36594: LD_INT 6
36596: LESS
36597: PUSH
36598: LD_VAR 0 9
36602: PUSH
36603: LD_INT 6
36605: GREATER
36606: AND
36607: IFFALSE 36688
// begin for i = 1 to 6 - sci do
36609: LD_ADDR_VAR 0 3
36613: PUSH
36614: DOUBLE
36615: LD_INT 1
36617: DEC
36618: ST_TO_ADDR
36619: LD_INT 6
36621: PUSH
36622: LD_VAR 0 8
36626: MINUS
36627: PUSH
36628: FOR_TO
36629: IFFALSE 36684
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
36631: LD_ADDR_VAR 0 11
36635: PUSH
36636: LD_VAR 0 11
36640: PPUSH
36641: LD_VAR 0 11
36645: PUSH
36646: LD_INT 1
36648: PLUS
36649: PPUSH
36650: LD_VAR 0 9
36654: PUSH
36655: LD_INT 1
36657: ARRAY
36658: PPUSH
36659: CALL_OW 2
36663: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_VAR 0 9
36673: PPUSH
36674: LD_INT 1
36676: PPUSH
36677: CALL_OW 3
36681: ST_TO_ADDR
// end ;
36682: GO 36628
36684: POP
36685: POP
// end else
36686: GO 36708
// if sort then
36688: LD_VAR 0 9
36692: IFFALSE 36708
// p := sort [ 1 ] ;
36694: LD_ADDR_VAR 0 11
36698: PUSH
36699: LD_VAR 0 9
36703: PUSH
36704: LD_INT 1
36706: ARRAY
36707: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
36708: LD_ADDR_VAR 0 2
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_VAR 0 11
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// exit ;
36733: GO 38631
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
36735: LD_EXP 126
36739: PUSH
36740: LD_EXP 125
36744: PUSH
36745: LD_VAR 0 1
36749: ARRAY
36750: ARRAY
36751: PUSH
36752: LD_EXP 99
36756: PUSH
36757: LD_VAR 0 1
36761: ARRAY
36762: PPUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 30
36768: PUSH
36769: LD_INT 6
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 30
36778: PUSH
36779: LD_INT 7
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 30
36788: PUSH
36789: LD_INT 8
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: PPUSH
36802: CALL_OW 72
36806: AND
36807: PUSH
36808: LD_EXP 99
36812: PUSH
36813: LD_VAR 0 1
36817: ARRAY
36818: PPUSH
36819: LD_INT 30
36821: PUSH
36822: LD_INT 3
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 72
36833: AND
36834: IFFALSE 37361
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
36836: LD_ADDR_EXP 141
36840: PUSH
36841: LD_EXP 141
36845: PPUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: LD_INT 3
36853: PPUSH
36854: CALL_OW 1
36858: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
// if not eng then
36882: LD_VAR 0 6
36886: NOT
36887: IFFALSE 36950
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
36889: LD_ADDR_VAR 0 11
36893: PUSH
36894: LD_VAR 0 4
36898: PPUSH
36899: LD_INT 2
36901: PPUSH
36902: CALL 100526 0 2
36906: PUSH
36907: LD_INT 1
36909: ARRAY
36910: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
36911: LD_ADDR_VAR 0 2
36915: PUSH
36916: LD_VAR 0 2
36920: PPUSH
36921: LD_INT 2
36923: PPUSH
36924: LD_VAR 0 11
36928: PPUSH
36929: CALL_OW 1
36933: ST_TO_ADDR
// tmp := tmp diff p ;
36934: LD_ADDR_VAR 0 4
36938: PUSH
36939: LD_VAR 0 4
36943: PUSH
36944: LD_VAR 0 11
36948: DIFF
36949: ST_TO_ADDR
// end ; if not eng then
36950: LD_VAR 0 6
36954: NOT
36955: IFFALSE 36981
// tmp := tmp diff ( mech union sci ) else
36957: LD_ADDR_VAR 0 4
36961: PUSH
36962: LD_VAR 0 4
36966: PUSH
36967: LD_VAR 0 7
36971: PUSH
36972: LD_VAR 0 8
36976: UNION
36977: DIFF
36978: ST_TO_ADDR
36979: GO 37013
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
36981: LD_ADDR_VAR 0 4
36985: PUSH
36986: LD_VAR 0 4
36990: PUSH
36991: LD_VAR 0 6
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: PUSH
37000: LD_VAR 0 7
37004: UNION
37005: PUSH
37006: LD_VAR 0 8
37010: UNION
37011: DIFF
37012: ST_TO_ADDR
// if tmp and sci < 6 then
37013: LD_VAR 0 4
37017: PUSH
37018: LD_VAR 0 8
37022: PUSH
37023: LD_INT 6
37025: LESS
37026: AND
37027: IFFALSE 37186
// begin sort := SortBySkill ( tmp , 4 ) ;
37029: LD_ADDR_VAR 0 9
37033: PUSH
37034: LD_VAR 0 4
37038: PPUSH
37039: LD_INT 4
37041: PPUSH
37042: CALL 100526 0 2
37046: ST_TO_ADDR
// p := [ ] ;
37047: LD_ADDR_VAR 0 11
37051: PUSH
37052: EMPTY
37053: ST_TO_ADDR
// if sort then
37054: LD_VAR 0 9
37058: IFFALSE 37157
// for i = 1 to 6 - sci do
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: DOUBLE
37066: LD_INT 1
37068: DEC
37069: ST_TO_ADDR
37070: LD_INT 6
37072: PUSH
37073: LD_VAR 0 8
37077: MINUS
37078: PUSH
37079: FOR_TO
37080: IFFALSE 37155
// begin if i = sort then
37082: LD_VAR 0 3
37086: PUSH
37087: LD_VAR 0 9
37091: EQUAL
37092: IFFALSE 37096
// break ;
37094: GO 37155
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37096: LD_ADDR_VAR 0 11
37100: PUSH
37101: LD_VAR 0 11
37105: PPUSH
37106: LD_VAR 0 11
37110: PUSH
37111: LD_INT 1
37113: PLUS
37114: PPUSH
37115: LD_VAR 0 9
37119: PUSH
37120: LD_VAR 0 3
37124: ARRAY
37125: PPUSH
37126: CALL_OW 2
37130: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37131: LD_ADDR_VAR 0 4
37135: PUSH
37136: LD_VAR 0 4
37140: PUSH
37141: LD_VAR 0 9
37145: PUSH
37146: LD_VAR 0 3
37150: ARRAY
37151: DIFF
37152: ST_TO_ADDR
// end ;
37153: GO 37079
37155: POP
37156: POP
// if p then
37157: LD_VAR 0 11
37161: IFFALSE 37186
// result := Replace ( result , 4 , p ) ;
37163: LD_ADDR_VAR 0 2
37167: PUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: LD_INT 4
37175: PPUSH
37176: LD_VAR 0 11
37180: PPUSH
37181: CALL_OW 1
37185: ST_TO_ADDR
// end ; if tmp and mech < 6 then
37186: LD_VAR 0 4
37190: PUSH
37191: LD_VAR 0 7
37195: PUSH
37196: LD_INT 6
37198: LESS
37199: AND
37200: IFFALSE 37359
// begin sort := SortBySkill ( tmp , 3 ) ;
37202: LD_ADDR_VAR 0 9
37206: PUSH
37207: LD_VAR 0 4
37211: PPUSH
37212: LD_INT 3
37214: PPUSH
37215: CALL 100526 0 2
37219: ST_TO_ADDR
// p := [ ] ;
37220: LD_ADDR_VAR 0 11
37224: PUSH
37225: EMPTY
37226: ST_TO_ADDR
// if sort then
37227: LD_VAR 0 9
37231: IFFALSE 37330
// for i = 1 to 6 - mech do
37233: LD_ADDR_VAR 0 3
37237: PUSH
37238: DOUBLE
37239: LD_INT 1
37241: DEC
37242: ST_TO_ADDR
37243: LD_INT 6
37245: PUSH
37246: LD_VAR 0 7
37250: MINUS
37251: PUSH
37252: FOR_TO
37253: IFFALSE 37328
// begin if i = sort then
37255: LD_VAR 0 3
37259: PUSH
37260: LD_VAR 0 9
37264: EQUAL
37265: IFFALSE 37269
// break ;
37267: GO 37328
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37269: LD_ADDR_VAR 0 11
37273: PUSH
37274: LD_VAR 0 11
37278: PPUSH
37279: LD_VAR 0 11
37283: PUSH
37284: LD_INT 1
37286: PLUS
37287: PPUSH
37288: LD_VAR 0 9
37292: PUSH
37293: LD_VAR 0 3
37297: ARRAY
37298: PPUSH
37299: CALL_OW 2
37303: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37304: LD_ADDR_VAR 0 4
37308: PUSH
37309: LD_VAR 0 4
37313: PUSH
37314: LD_VAR 0 9
37318: PUSH
37319: LD_VAR 0 3
37323: ARRAY
37324: DIFF
37325: ST_TO_ADDR
// end ;
37326: GO 37252
37328: POP
37329: POP
// if p then
37330: LD_VAR 0 11
37334: IFFALSE 37359
// result := Replace ( result , 3 , p ) ;
37336: LD_ADDR_VAR 0 2
37340: PUSH
37341: LD_VAR 0 2
37345: PPUSH
37346: LD_INT 3
37348: PPUSH
37349: LD_VAR 0 11
37353: PPUSH
37354: CALL_OW 1
37358: ST_TO_ADDR
// end ; exit ;
37359: GO 38631
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
37361: LD_EXP 126
37365: PUSH
37366: LD_EXP 125
37370: PUSH
37371: LD_VAR 0 1
37375: ARRAY
37376: ARRAY
37377: NOT
37378: PUSH
37379: LD_EXP 99
37383: PUSH
37384: LD_VAR 0 1
37388: ARRAY
37389: PPUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 3
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PPUSH
37400: CALL_OW 72
37404: AND
37405: PUSH
37406: LD_EXP 104
37410: PUSH
37411: LD_VAR 0 1
37415: ARRAY
37416: AND
37417: IFFALSE 37961
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
37419: LD_ADDR_EXP 141
37423: PUSH
37424: LD_EXP 141
37428: PPUSH
37429: LD_VAR 0 1
37433: PPUSH
37434: LD_INT 5
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
37442: LD_ADDR_VAR 0 2
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// if sci > 1 then
37465: LD_VAR 0 8
37469: PUSH
37470: LD_INT 1
37472: GREATER
37473: IFFALSE 37501
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
37475: LD_ADDR_VAR 0 4
37479: PUSH
37480: LD_VAR 0 4
37484: PUSH
37485: LD_VAR 0 8
37489: PUSH
37490: LD_VAR 0 8
37494: PUSH
37495: LD_INT 1
37497: ARRAY
37498: DIFF
37499: DIFF
37500: ST_TO_ADDR
// if tmp and not sci then
37501: LD_VAR 0 4
37505: PUSH
37506: LD_VAR 0 8
37510: NOT
37511: AND
37512: IFFALSE 37581
// begin sort := SortBySkill ( tmp , 4 ) ;
37514: LD_ADDR_VAR 0 9
37518: PUSH
37519: LD_VAR 0 4
37523: PPUSH
37524: LD_INT 4
37526: PPUSH
37527: CALL 100526 0 2
37531: ST_TO_ADDR
// if sort then
37532: LD_VAR 0 9
37536: IFFALSE 37552
// p := sort [ 1 ] ;
37538: LD_ADDR_VAR 0 11
37542: PUSH
37543: LD_VAR 0 9
37547: PUSH
37548: LD_INT 1
37550: ARRAY
37551: ST_TO_ADDR
// if p then
37552: LD_VAR 0 11
37556: IFFALSE 37581
// result := Replace ( result , 4 , p ) ;
37558: LD_ADDR_VAR 0 2
37562: PUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: LD_INT 4
37570: PPUSH
37571: LD_VAR 0 11
37575: PPUSH
37576: CALL_OW 1
37580: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
37581: LD_ADDR_VAR 0 4
37585: PUSH
37586: LD_VAR 0 4
37590: PUSH
37591: LD_VAR 0 7
37595: DIFF
37596: ST_TO_ADDR
// if tmp and mech < 6 then
37597: LD_VAR 0 4
37601: PUSH
37602: LD_VAR 0 7
37606: PUSH
37607: LD_INT 6
37609: LESS
37610: AND
37611: IFFALSE 37770
// begin sort := SortBySkill ( tmp , 3 ) ;
37613: LD_ADDR_VAR 0 9
37617: PUSH
37618: LD_VAR 0 4
37622: PPUSH
37623: LD_INT 3
37625: PPUSH
37626: CALL 100526 0 2
37630: ST_TO_ADDR
// p := [ ] ;
37631: LD_ADDR_VAR 0 11
37635: PUSH
37636: EMPTY
37637: ST_TO_ADDR
// if sort then
37638: LD_VAR 0 9
37642: IFFALSE 37741
// for i = 1 to 6 - mech do
37644: LD_ADDR_VAR 0 3
37648: PUSH
37649: DOUBLE
37650: LD_INT 1
37652: DEC
37653: ST_TO_ADDR
37654: LD_INT 6
37656: PUSH
37657: LD_VAR 0 7
37661: MINUS
37662: PUSH
37663: FOR_TO
37664: IFFALSE 37739
// begin if i = sort then
37666: LD_VAR 0 3
37670: PUSH
37671: LD_VAR 0 9
37675: EQUAL
37676: IFFALSE 37680
// break ;
37678: GO 37739
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37680: LD_ADDR_VAR 0 11
37684: PUSH
37685: LD_VAR 0 11
37689: PPUSH
37690: LD_VAR 0 11
37694: PUSH
37695: LD_INT 1
37697: PLUS
37698: PPUSH
37699: LD_VAR 0 9
37703: PUSH
37704: LD_VAR 0 3
37708: ARRAY
37709: PPUSH
37710: CALL_OW 2
37714: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37715: LD_ADDR_VAR 0 4
37719: PUSH
37720: LD_VAR 0 4
37724: PUSH
37725: LD_VAR 0 9
37729: PUSH
37730: LD_VAR 0 3
37734: ARRAY
37735: DIFF
37736: ST_TO_ADDR
// end ;
37737: GO 37663
37739: POP
37740: POP
// if p then
37741: LD_VAR 0 11
37745: IFFALSE 37770
// result := Replace ( result , 3 , p ) ;
37747: LD_ADDR_VAR 0 2
37751: PUSH
37752: LD_VAR 0 2
37756: PPUSH
37757: LD_INT 3
37759: PPUSH
37760: LD_VAR 0 11
37764: PPUSH
37765: CALL_OW 1
37769: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
37770: LD_ADDR_VAR 0 4
37774: PUSH
37775: LD_VAR 0 4
37779: PUSH
37780: LD_VAR 0 6
37784: DIFF
37785: ST_TO_ADDR
// if tmp and eng < 6 then
37786: LD_VAR 0 4
37790: PUSH
37791: LD_VAR 0 6
37795: PUSH
37796: LD_INT 6
37798: LESS
37799: AND
37800: IFFALSE 37959
// begin sort := SortBySkill ( tmp , 2 ) ;
37802: LD_ADDR_VAR 0 9
37806: PUSH
37807: LD_VAR 0 4
37811: PPUSH
37812: LD_INT 2
37814: PPUSH
37815: CALL 100526 0 2
37819: ST_TO_ADDR
// p := [ ] ;
37820: LD_ADDR_VAR 0 11
37824: PUSH
37825: EMPTY
37826: ST_TO_ADDR
// if sort then
37827: LD_VAR 0 9
37831: IFFALSE 37930
// for i = 1 to 6 - eng do
37833: LD_ADDR_VAR 0 3
37837: PUSH
37838: DOUBLE
37839: LD_INT 1
37841: DEC
37842: ST_TO_ADDR
37843: LD_INT 6
37845: PUSH
37846: LD_VAR 0 6
37850: MINUS
37851: PUSH
37852: FOR_TO
37853: IFFALSE 37928
// begin if i = sort then
37855: LD_VAR 0 3
37859: PUSH
37860: LD_VAR 0 9
37864: EQUAL
37865: IFFALSE 37869
// break ;
37867: GO 37928
// p := Insert ( p , p + 1 , sort [ i ] ) ;
37869: LD_ADDR_VAR 0 11
37873: PUSH
37874: LD_VAR 0 11
37878: PPUSH
37879: LD_VAR 0 11
37883: PUSH
37884: LD_INT 1
37886: PLUS
37887: PPUSH
37888: LD_VAR 0 9
37892: PUSH
37893: LD_VAR 0 3
37897: ARRAY
37898: PPUSH
37899: CALL_OW 2
37903: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: LD_VAR 0 4
37913: PUSH
37914: LD_VAR 0 9
37918: PUSH
37919: LD_VAR 0 3
37923: ARRAY
37924: DIFF
37925: ST_TO_ADDR
// end ;
37926: GO 37852
37928: POP
37929: POP
// if p then
37930: LD_VAR 0 11
37934: IFFALSE 37959
// result := Replace ( result , 2 , p ) ;
37936: LD_ADDR_VAR 0 2
37940: PUSH
37941: LD_VAR 0 2
37945: PPUSH
37946: LD_INT 2
37948: PPUSH
37949: LD_VAR 0 11
37953: PPUSH
37954: CALL_OW 1
37958: ST_TO_ADDR
// end ; exit ;
37959: GO 38631
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
37961: LD_EXP 126
37965: PUSH
37966: LD_EXP 125
37970: PUSH
37971: LD_VAR 0 1
37975: ARRAY
37976: ARRAY
37977: NOT
37978: PUSH
37979: LD_EXP 99
37983: PUSH
37984: LD_VAR 0 1
37988: ARRAY
37989: PPUSH
37990: LD_INT 30
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 72
38004: AND
38005: PUSH
38006: LD_EXP 104
38010: PUSH
38011: LD_VAR 0 1
38015: ARRAY
38016: NOT
38017: AND
38018: IFFALSE 38631
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
38020: LD_ADDR_EXP 141
38024: PUSH
38025: LD_EXP 141
38029: PPUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_INT 6
38037: PPUSH
38038: CALL_OW 1
38042: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
38043: LD_ADDR_VAR 0 2
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: ST_TO_ADDR
// if sci >= 1 then
38066: LD_VAR 0 8
38070: PUSH
38071: LD_INT 1
38073: GREATEREQUAL
38074: IFFALSE 38096
// tmp := tmp diff sci [ 1 ] ;
38076: LD_ADDR_VAR 0 4
38080: PUSH
38081: LD_VAR 0 4
38085: PUSH
38086: LD_VAR 0 8
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: DIFF
38095: ST_TO_ADDR
// if tmp and not sci then
38096: LD_VAR 0 4
38100: PUSH
38101: LD_VAR 0 8
38105: NOT
38106: AND
38107: IFFALSE 38176
// begin sort := SortBySkill ( tmp , 4 ) ;
38109: LD_ADDR_VAR 0 9
38113: PUSH
38114: LD_VAR 0 4
38118: PPUSH
38119: LD_INT 4
38121: PPUSH
38122: CALL 100526 0 2
38126: ST_TO_ADDR
// if sort then
38127: LD_VAR 0 9
38131: IFFALSE 38147
// p := sort [ 1 ] ;
38133: LD_ADDR_VAR 0 11
38137: PUSH
38138: LD_VAR 0 9
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: ST_TO_ADDR
// if p then
38147: LD_VAR 0 11
38151: IFFALSE 38176
// result := Replace ( result , 4 , p ) ;
38153: LD_ADDR_VAR 0 2
38157: PUSH
38158: LD_VAR 0 2
38162: PPUSH
38163: LD_INT 4
38165: PPUSH
38166: LD_VAR 0 11
38170: PPUSH
38171: CALL_OW 1
38175: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: LD_VAR 0 4
38185: PUSH
38186: LD_VAR 0 7
38190: DIFF
38191: ST_TO_ADDR
// if tmp and mech < 6 then
38192: LD_VAR 0 4
38196: PUSH
38197: LD_VAR 0 7
38201: PUSH
38202: LD_INT 6
38204: LESS
38205: AND
38206: IFFALSE 38365
// begin sort := SortBySkill ( tmp , 3 ) ;
38208: LD_ADDR_VAR 0 9
38212: PUSH
38213: LD_VAR 0 4
38217: PPUSH
38218: LD_INT 3
38220: PPUSH
38221: CALL 100526 0 2
38225: ST_TO_ADDR
// p := [ ] ;
38226: LD_ADDR_VAR 0 11
38230: PUSH
38231: EMPTY
38232: ST_TO_ADDR
// if sort then
38233: LD_VAR 0 9
38237: IFFALSE 38336
// for i = 1 to 6 - mech do
38239: LD_ADDR_VAR 0 3
38243: PUSH
38244: DOUBLE
38245: LD_INT 1
38247: DEC
38248: ST_TO_ADDR
38249: LD_INT 6
38251: PUSH
38252: LD_VAR 0 7
38256: MINUS
38257: PUSH
38258: FOR_TO
38259: IFFALSE 38334
// begin if i = sort then
38261: LD_VAR 0 3
38265: PUSH
38266: LD_VAR 0 9
38270: EQUAL
38271: IFFALSE 38275
// break ;
38273: GO 38334
// p := Insert ( p , p + 1 , sort [ i ] ) ;
38275: LD_ADDR_VAR 0 11
38279: PUSH
38280: LD_VAR 0 11
38284: PPUSH
38285: LD_VAR 0 11
38289: PUSH
38290: LD_INT 1
38292: PLUS
38293: PPUSH
38294: LD_VAR 0 9
38298: PUSH
38299: LD_VAR 0 3
38303: ARRAY
38304: PPUSH
38305: CALL_OW 2
38309: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
38310: LD_ADDR_VAR 0 4
38314: PUSH
38315: LD_VAR 0 4
38319: PUSH
38320: LD_VAR 0 9
38324: PUSH
38325: LD_VAR 0 3
38329: ARRAY
38330: DIFF
38331: ST_TO_ADDR
// end ;
38332: GO 38258
38334: POP
38335: POP
// if p then
38336: LD_VAR 0 11
38340: IFFALSE 38365
// result := Replace ( result , 3 , p ) ;
38342: LD_ADDR_VAR 0 2
38346: PUSH
38347: LD_VAR 0 2
38351: PPUSH
38352: LD_INT 3
38354: PPUSH
38355: LD_VAR 0 11
38359: PPUSH
38360: CALL_OW 1
38364: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
38365: LD_ADDR_VAR 0 4
38369: PUSH
38370: LD_VAR 0 4
38374: PUSH
38375: LD_VAR 0 6
38379: DIFF
38380: ST_TO_ADDR
// if tmp and eng < 4 then
38381: LD_VAR 0 4
38385: PUSH
38386: LD_VAR 0 6
38390: PUSH
38391: LD_INT 4
38393: LESS
38394: AND
38395: IFFALSE 38556
// begin sort := SortBySkill ( tmp , 2 ) ;
38397: LD_ADDR_VAR 0 9
38401: PUSH
38402: LD_VAR 0 4
38406: PPUSH
38407: LD_INT 2
38409: PPUSH
38410: CALL 100526 0 2
38414: ST_TO_ADDR
// p := [ ] ;
38415: LD_ADDR_VAR 0 11
38419: PUSH
38420: EMPTY
38421: ST_TO_ADDR
// if sort then
38422: LD_VAR 0 9
38426: IFFALSE 38525
// for i = 1 to 4 - eng do
38428: LD_ADDR_VAR 0 3
38432: PUSH
38433: DOUBLE
38434: LD_INT 1
38436: DEC
38437: ST_TO_ADDR
38438: LD_INT 4
38440: PUSH
38441: LD_VAR 0 6
38445: MINUS
38446: PUSH
38447: FOR_TO
38448: IFFALSE 38523
// begin if i = sort then
38450: LD_VAR 0 3
38454: PUSH
38455: LD_VAR 0 9
38459: EQUAL
38460: IFFALSE 38464
// break ;
38462: GO 38523
// p := Insert ( p , p + 1 , sort [ i ] ) ;
38464: LD_ADDR_VAR 0 11
38468: PUSH
38469: LD_VAR 0 11
38473: PPUSH
38474: LD_VAR 0 11
38478: PUSH
38479: LD_INT 1
38481: PLUS
38482: PPUSH
38483: LD_VAR 0 9
38487: PUSH
38488: LD_VAR 0 3
38492: ARRAY
38493: PPUSH
38494: CALL_OW 2
38498: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
38499: LD_ADDR_VAR 0 4
38503: PUSH
38504: LD_VAR 0 4
38508: PUSH
38509: LD_VAR 0 9
38513: PUSH
38514: LD_VAR 0 3
38518: ARRAY
38519: DIFF
38520: ST_TO_ADDR
// end ;
38521: GO 38447
38523: POP
38524: POP
// if p then
38525: LD_VAR 0 11
38529: IFFALSE 38554
// result := Replace ( result , 2 , p ) ;
38531: LD_ADDR_VAR 0 2
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 2
38543: PPUSH
38544: LD_VAR 0 11
38548: PPUSH
38549: CALL_OW 1
38553: ST_TO_ADDR
// end else
38554: GO 38600
// for i = eng downto 5 do
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: DOUBLE
38562: LD_VAR 0 6
38566: INC
38567: ST_TO_ADDR
38568: LD_INT 5
38570: PUSH
38571: FOR_DOWNTO
38572: IFFALSE 38598
// tmp := tmp union eng [ i ] ;
38574: LD_ADDR_VAR 0 4
38578: PUSH
38579: LD_VAR 0 4
38583: PUSH
38584: LD_VAR 0 6
38588: PUSH
38589: LD_VAR 0 3
38593: ARRAY
38594: UNION
38595: ST_TO_ADDR
38596: GO 38571
38598: POP
38599: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
38600: LD_ADDR_VAR 0 2
38604: PUSH
38605: LD_VAR 0 2
38609: PPUSH
38610: LD_INT 1
38612: PPUSH
38613: LD_VAR 0 4
38617: PUSH
38618: LD_VAR 0 5
38622: DIFF
38623: PPUSH
38624: CALL_OW 1
38628: ST_TO_ADDR
// exit ;
38629: GO 38631
// end ; end ;
38631: LD_VAR 0 2
38635: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
38636: LD_INT 0
38638: PPUSH
38639: PPUSH
38640: PPUSH
// if not mc_bases then
38641: LD_EXP 99
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 38756
// for i = 1 to mc_bases do
38650: LD_ADDR_VAR 0 2
38654: PUSH
38655: DOUBLE
38656: LD_INT 1
38658: DEC
38659: ST_TO_ADDR
38660: LD_EXP 99
38664: PUSH
38665: FOR_TO
38666: IFFALSE 38747
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_EXP 99
38677: PUSH
38678: LD_VAR 0 2
38682: ARRAY
38683: PPUSH
38684: LD_INT 21
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: LD_INT 24
38699: PUSH
38700: LD_INT 1000
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PPUSH
38715: CALL_OW 72
38719: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
38720: LD_ADDR_EXP 100
38724: PUSH
38725: LD_EXP 100
38729: PPUSH
38730: LD_VAR 0 2
38734: PPUSH
38735: LD_VAR 0 3
38739: PPUSH
38740: CALL_OW 1
38744: ST_TO_ADDR
// end ;
38745: GO 38665
38747: POP
38748: POP
// RaiseSailEvent ( 101 ) ;
38749: LD_INT 101
38751: PPUSH
38752: CALL_OW 427
// end ;
38756: LD_VAR 0 1
38760: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
38761: LD_INT 0
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
// if not mc_bases then
38770: LD_EXP 99
38774: NOT
38775: IFFALSE 38779
// exit ;
38777: GO 39352
// for i = 1 to mc_bases do
38779: LD_ADDR_VAR 0 2
38783: PUSH
38784: DOUBLE
38785: LD_INT 1
38787: DEC
38788: ST_TO_ADDR
38789: LD_EXP 99
38793: PUSH
38794: FOR_TO
38795: IFFALSE 39343
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
38797: LD_ADDR_VAR 0 5
38801: PUSH
38802: LD_EXP 99
38806: PUSH
38807: LD_VAR 0 2
38811: ARRAY
38812: PUSH
38813: LD_EXP 128
38817: PUSH
38818: LD_VAR 0 2
38822: ARRAY
38823: UNION
38824: PPUSH
38825: LD_INT 21
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 54
38843: PUSH
38844: EMPTY
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 24
38856: PUSH
38857: LD_INT 750
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PPUSH
38877: CALL_OW 72
38881: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
38882: LD_ADDR_VAR 0 6
38886: PUSH
38887: LD_EXP 99
38891: PUSH
38892: LD_VAR 0 2
38896: ARRAY
38897: PPUSH
38898: LD_INT 21
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 54
38916: PUSH
38917: EMPTY
38918: LIST
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: LD_INT 24
38929: PUSH
38930: LD_INT 250
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PPUSH
38950: CALL_OW 72
38954: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
38955: LD_ADDR_VAR 0 7
38959: PUSH
38960: LD_VAR 0 5
38964: PUSH
38965: LD_VAR 0 6
38969: DIFF
38970: ST_TO_ADDR
// if not need_heal_1 then
38971: LD_VAR 0 6
38975: NOT
38976: IFFALSE 39009
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
38978: LD_ADDR_EXP 102
38982: PUSH
38983: LD_EXP 102
38987: PPUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PPUSH
39000: EMPTY
39001: PPUSH
39002: CALL 66341 0 3
39006: ST_TO_ADDR
39007: GO 39079
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
39009: LD_ADDR_EXP 102
39013: PUSH
39014: LD_EXP 102
39018: PPUSH
39019: LD_VAR 0 2
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PPUSH
39031: LD_EXP 102
39035: PUSH
39036: LD_VAR 0 2
39040: ARRAY
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PPUSH
39046: LD_INT 3
39048: PUSH
39049: LD_INT 24
39051: PUSH
39052: LD_INT 1000
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PPUSH
39063: CALL_OW 72
39067: PUSH
39068: LD_VAR 0 6
39072: UNION
39073: PPUSH
39074: CALL 66341 0 3
39078: ST_TO_ADDR
// if not need_heal_2 then
39079: LD_VAR 0 7
39083: NOT
39084: IFFALSE 39117
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
39086: LD_ADDR_EXP 102
39090: PUSH
39091: LD_EXP 102
39095: PPUSH
39096: LD_VAR 0 2
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PPUSH
39108: EMPTY
39109: PPUSH
39110: CALL 66341 0 3
39114: ST_TO_ADDR
39115: GO 39149
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
39117: LD_ADDR_EXP 102
39121: PUSH
39122: LD_EXP 102
39126: PPUSH
39127: LD_VAR 0 2
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PPUSH
39139: LD_VAR 0 7
39143: PPUSH
39144: CALL 66341 0 3
39148: ST_TO_ADDR
// if need_heal_2 then
39149: LD_VAR 0 7
39153: IFFALSE 39325
// for j in need_heal_2 do
39155: LD_ADDR_VAR 0 3
39159: PUSH
39160: LD_VAR 0 7
39164: PUSH
39165: FOR_IN
39166: IFFALSE 39323
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_EXP 99
39177: PUSH
39178: LD_VAR 0 2
39182: ARRAY
39183: PPUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 30
39189: PUSH
39190: LD_INT 6
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 30
39199: PUSH
39200: LD_INT 7
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 30
39209: PUSH
39210: LD_INT 8
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 30
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 25
39239: PUSH
39240: LD_INT 4
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: PPUSH
39256: CALL_OW 72
39260: ST_TO_ADDR
// if tmp then
39261: LD_VAR 0 5
39265: IFFALSE 39321
// begin k := NearestUnitToUnit ( tmp , j ) ;
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_VAR 0 5
39276: PPUSH
39277: LD_VAR 0 3
39281: PPUSH
39282: CALL_OW 74
39286: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
39287: LD_VAR 0 3
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: CALL_OW 296
39301: PUSH
39302: LD_INT 7
39304: GREATER
39305: IFFALSE 39321
// ComMoveUnit ( j , k ) ;
39307: LD_VAR 0 3
39311: PPUSH
39312: LD_VAR 0 4
39316: PPUSH
39317: CALL_OW 112
// end ; end ;
39321: GO 39165
39323: POP
39324: POP
// if not need_heal_1 and not need_heal_2 then
39325: LD_VAR 0 6
39329: NOT
39330: PUSH
39331: LD_VAR 0 7
39335: NOT
39336: AND
39337: IFFALSE 39341
// continue ;
39339: GO 38794
// end ;
39341: GO 38794
39343: POP
39344: POP
// RaiseSailEvent ( 102 ) ;
39345: LD_INT 102
39347: PPUSH
39348: CALL_OW 427
// end ;
39352: LD_VAR 0 1
39356: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
39357: LD_INT 0
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
39363: PPUSH
// if not mc_bases then
39364: LD_EXP 99
39368: NOT
39369: IFFALSE 39373
// exit ;
39371: GO 39758
// for i = 1 to mc_bases do
39373: LD_ADDR_VAR 0 2
39377: PUSH
39378: DOUBLE
39379: LD_INT 1
39381: DEC
39382: ST_TO_ADDR
39383: LD_EXP 99
39387: PUSH
39388: FOR_TO
39389: IFFALSE 39756
// begin if not mc_building_need_repair [ i ] then
39391: LD_EXP 100
39395: PUSH
39396: LD_VAR 0 2
39400: ARRAY
39401: NOT
39402: IFFALSE 39440
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
39404: LD_ADDR_EXP 101
39408: PUSH
39409: LD_EXP 101
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: EMPTY
39420: PPUSH
39421: CALL_OW 1
39425: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
39426: LD_VAR 0 2
39430: PPUSH
39431: LD_INT 101
39433: PPUSH
39434: CALL 34801 0 2
// continue ;
39438: GO 39388
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
39440: LD_ADDR_EXP 105
39444: PUSH
39445: LD_EXP 105
39449: PPUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: EMPTY
39456: PPUSH
39457: CALL_OW 1
39461: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39462: LD_VAR 0 2
39466: PPUSH
39467: LD_INT 103
39469: PPUSH
39470: CALL 34801 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
39474: LD_ADDR_VAR 0 5
39478: PUSH
39479: LD_EXP 99
39483: PUSH
39484: LD_VAR 0 2
39488: ARRAY
39489: PUSH
39490: LD_EXP 128
39494: PUSH
39495: LD_VAR 0 2
39499: ARRAY
39500: UNION
39501: PPUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 25
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 25
39517: PUSH
39518: LD_INT 16
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: PPUSH
39533: CALL_OW 72
39537: ST_TO_ADDR
// if not tmp then
39538: LD_VAR 0 5
39542: NOT
39543: IFFALSE 39547
// continue ;
39545: GO 39388
// for j in tmp do
39547: LD_ADDR_VAR 0 3
39551: PUSH
39552: LD_VAR 0 5
39556: PUSH
39557: FOR_IN
39558: IFFALSE 39752
// begin if mc_need_heal [ i ] then
39560: LD_EXP 102
39564: PUSH
39565: LD_VAR 0 2
39569: ARRAY
39570: IFFALSE 39618
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
39572: LD_VAR 0 3
39576: PUSH
39577: LD_EXP 102
39581: PUSH
39582: LD_VAR 0 2
39586: ARRAY
39587: PUSH
39588: LD_INT 1
39590: ARRAY
39591: IN
39592: PUSH
39593: LD_VAR 0 3
39597: PUSH
39598: LD_EXP 102
39602: PUSH
39603: LD_VAR 0 2
39607: ARRAY
39608: PUSH
39609: LD_INT 2
39611: ARRAY
39612: IN
39613: OR
39614: IFFALSE 39618
// continue ;
39616: GO 39557
// if IsInUnit ( j ) then
39618: LD_VAR 0 3
39622: PPUSH
39623: CALL_OW 310
39627: IFFALSE 39638
// ComExitBuilding ( j ) ;
39629: LD_VAR 0 3
39633: PPUSH
39634: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
39638: LD_VAR 0 3
39642: PUSH
39643: LD_EXP 101
39647: PUSH
39648: LD_VAR 0 2
39652: ARRAY
39653: IN
39654: NOT
39655: IFFALSE 39713
// begin SetTag ( j , 101 ) ;
39657: LD_VAR 0 3
39661: PPUSH
39662: LD_INT 101
39664: PPUSH
39665: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
39669: LD_ADDR_EXP 101
39673: PUSH
39674: LD_EXP 101
39678: PPUSH
39679: LD_VAR 0 2
39683: PUSH
39684: LD_EXP 101
39688: PUSH
39689: LD_VAR 0 2
39693: ARRAY
39694: PUSH
39695: LD_INT 1
39697: PLUS
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: LD_VAR 0 3
39707: PPUSH
39708: CALL 66341 0 3
39712: ST_TO_ADDR
// end ; wait ( 1 ) ;
39713: LD_INT 1
39715: PPUSH
39716: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
39720: LD_VAR 0 3
39724: PPUSH
39725: LD_EXP 100
39729: PUSH
39730: LD_VAR 0 2
39734: ARRAY
39735: PPUSH
39736: LD_VAR 0 3
39740: PPUSH
39741: CALL_OW 74
39745: PPUSH
39746: CALL_OW 130
// end ;
39750: GO 39557
39752: POP
39753: POP
// end ;
39754: GO 39388
39756: POP
39757: POP
// end ;
39758: LD_VAR 0 1
39762: RET
// export function MC_Heal ; var i , j , tmp ; begin
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
// if not mc_bases then
39769: LD_EXP 99
39773: NOT
39774: IFFALSE 39778
// exit ;
39776: GO 40180
// for i = 1 to mc_bases do
39778: LD_ADDR_VAR 0 2
39782: PUSH
39783: DOUBLE
39784: LD_INT 1
39786: DEC
39787: ST_TO_ADDR
39788: LD_EXP 99
39792: PUSH
39793: FOR_TO
39794: IFFALSE 40178
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
39796: LD_EXP 102
39800: PUSH
39801: LD_VAR 0 2
39805: ARRAY
39806: PUSH
39807: LD_INT 1
39809: ARRAY
39810: NOT
39811: PUSH
39812: LD_EXP 102
39816: PUSH
39817: LD_VAR 0 2
39821: ARRAY
39822: PUSH
39823: LD_INT 2
39825: ARRAY
39826: NOT
39827: AND
39828: IFFALSE 39866
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
39830: LD_ADDR_EXP 103
39834: PUSH
39835: LD_EXP 103
39839: PPUSH
39840: LD_VAR 0 2
39844: PPUSH
39845: EMPTY
39846: PPUSH
39847: CALL_OW 1
39851: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
39852: LD_VAR 0 2
39856: PPUSH
39857: LD_INT 102
39859: PPUSH
39860: CALL 34801 0 2
// continue ;
39864: GO 39793
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
39866: LD_ADDR_VAR 0 4
39870: PUSH
39871: LD_EXP 99
39875: PUSH
39876: LD_VAR 0 2
39880: ARRAY
39881: PPUSH
39882: LD_INT 25
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PPUSH
39892: CALL_OW 72
39896: ST_TO_ADDR
// if not tmp then
39897: LD_VAR 0 4
39901: NOT
39902: IFFALSE 39906
// continue ;
39904: GO 39793
// if mc_taming [ i ] then
39906: LD_EXP 130
39910: PUSH
39911: LD_VAR 0 2
39915: ARRAY
39916: IFFALSE 39940
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39918: LD_ADDR_EXP 130
39922: PUSH
39923: LD_EXP 130
39927: PPUSH
39928: LD_VAR 0 2
39932: PPUSH
39933: EMPTY
39934: PPUSH
39935: CALL_OW 1
39939: ST_TO_ADDR
// for j in tmp do
39940: LD_ADDR_VAR 0 3
39944: PUSH
39945: LD_VAR 0 4
39949: PUSH
39950: FOR_IN
39951: IFFALSE 40174
// begin if IsInUnit ( j ) then
39953: LD_VAR 0 3
39957: PPUSH
39958: CALL_OW 310
39962: IFFALSE 39973
// ComExitBuilding ( j ) ;
39964: LD_VAR 0 3
39968: PPUSH
39969: CALL_OW 122
// if not j in mc_healers [ i ] then
39973: LD_VAR 0 3
39977: PUSH
39978: LD_EXP 103
39982: PUSH
39983: LD_VAR 0 2
39987: ARRAY
39988: IN
39989: NOT
39990: IFFALSE 40036
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
39992: LD_ADDR_EXP 103
39996: PUSH
39997: LD_EXP 103
40001: PPUSH
40002: LD_VAR 0 2
40006: PUSH
40007: LD_EXP 103
40011: PUSH
40012: LD_VAR 0 2
40016: ARRAY
40017: PUSH
40018: LD_INT 1
40020: PLUS
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PPUSH
40026: LD_VAR 0 3
40030: PPUSH
40031: CALL 66341 0 3
40035: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
40036: LD_VAR 0 3
40040: PPUSH
40041: CALL_OW 110
40045: PUSH
40046: LD_INT 102
40048: NONEQUAL
40049: IFFALSE 40063
// SetTag ( j , 102 ) ;
40051: LD_VAR 0 3
40055: PPUSH
40056: LD_INT 102
40058: PPUSH
40059: CALL_OW 109
// Wait ( 3 ) ;
40063: LD_INT 3
40065: PPUSH
40066: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
40070: LD_EXP 102
40074: PUSH
40075: LD_VAR 0 2
40079: ARRAY
40080: PUSH
40081: LD_INT 1
40083: ARRAY
40084: IFFALSE 40116
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
40086: LD_VAR 0 3
40090: PPUSH
40091: LD_EXP 102
40095: PUSH
40096: LD_VAR 0 2
40100: ARRAY
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: PUSH
40106: LD_INT 1
40108: ARRAY
40109: PPUSH
40110: CALL_OW 128
40114: GO 40172
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
40116: LD_VAR 0 3
40120: PPUSH
40121: CALL_OW 314
40125: NOT
40126: PUSH
40127: LD_EXP 102
40131: PUSH
40132: LD_VAR 0 2
40136: ARRAY
40137: PUSH
40138: LD_INT 2
40140: ARRAY
40141: AND
40142: IFFALSE 40172
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
40144: LD_VAR 0 3
40148: PPUSH
40149: LD_EXP 102
40153: PUSH
40154: LD_VAR 0 2
40158: ARRAY
40159: PUSH
40160: LD_INT 2
40162: ARRAY
40163: PUSH
40164: LD_INT 1
40166: ARRAY
40167: PPUSH
40168: CALL_OW 128
// end ;
40172: GO 39950
40174: POP
40175: POP
// end ;
40176: GO 39793
40178: POP
40179: POP
// end ;
40180: LD_VAR 0 1
40184: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
40185: LD_INT 0
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
// if not mc_bases then
40192: LD_EXP 99
40196: NOT
40197: IFFALSE 40201
// exit ;
40199: GO 41344
// for i = 1 to mc_bases do
40201: LD_ADDR_VAR 0 2
40205: PUSH
40206: DOUBLE
40207: LD_INT 1
40209: DEC
40210: ST_TO_ADDR
40211: LD_EXP 99
40215: PUSH
40216: FOR_TO
40217: IFFALSE 41342
// begin if mc_scan [ i ] then
40219: LD_EXP 122
40223: PUSH
40224: LD_VAR 0 2
40228: ARRAY
40229: IFFALSE 40233
// continue ;
40231: GO 40216
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
40233: LD_EXP 104
40237: PUSH
40238: LD_VAR 0 2
40242: ARRAY
40243: NOT
40244: PUSH
40245: LD_EXP 106
40249: PUSH
40250: LD_VAR 0 2
40254: ARRAY
40255: NOT
40256: AND
40257: PUSH
40258: LD_EXP 105
40262: PUSH
40263: LD_VAR 0 2
40267: ARRAY
40268: AND
40269: IFFALSE 40307
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
40271: LD_ADDR_EXP 105
40275: PUSH
40276: LD_EXP 105
40280: PPUSH
40281: LD_VAR 0 2
40285: PPUSH
40286: EMPTY
40287: PPUSH
40288: CALL_OW 1
40292: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
40293: LD_VAR 0 2
40297: PPUSH
40298: LD_INT 103
40300: PPUSH
40301: CALL 34801 0 2
// continue ;
40305: GO 40216
// end ; if mc_construct_list [ i ] then
40307: LD_EXP 106
40311: PUSH
40312: LD_VAR 0 2
40316: ARRAY
40317: IFFALSE 40537
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40319: LD_ADDR_VAR 0 4
40323: PUSH
40324: LD_EXP 99
40328: PUSH
40329: LD_VAR 0 2
40333: ARRAY
40334: PPUSH
40335: LD_INT 25
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PPUSH
40345: CALL_OW 72
40349: PUSH
40350: LD_EXP 101
40354: PUSH
40355: LD_VAR 0 2
40359: ARRAY
40360: DIFF
40361: ST_TO_ADDR
// if not tmp then
40362: LD_VAR 0 4
40366: NOT
40367: IFFALSE 40371
// continue ;
40369: GO 40216
// for j in tmp do
40371: LD_ADDR_VAR 0 3
40375: PUSH
40376: LD_VAR 0 4
40380: PUSH
40381: FOR_IN
40382: IFFALSE 40533
// begin if not mc_builders [ i ] then
40384: LD_EXP 105
40388: PUSH
40389: LD_VAR 0 2
40393: ARRAY
40394: NOT
40395: IFFALSE 40453
// begin SetTag ( j , 103 ) ;
40397: LD_VAR 0 3
40401: PPUSH
40402: LD_INT 103
40404: PPUSH
40405: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40409: LD_ADDR_EXP 105
40413: PUSH
40414: LD_EXP 105
40418: PPUSH
40419: LD_VAR 0 2
40423: PUSH
40424: LD_EXP 105
40428: PUSH
40429: LD_VAR 0 2
40433: ARRAY
40434: PUSH
40435: LD_INT 1
40437: PLUS
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PPUSH
40443: LD_VAR 0 3
40447: PPUSH
40448: CALL 66341 0 3
40452: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40453: LD_VAR 0 3
40457: PPUSH
40458: CALL_OW 310
40462: IFFALSE 40473
// ComExitBuilding ( j ) ;
40464: LD_VAR 0 3
40468: PPUSH
40469: CALL_OW 122
// wait ( 3 ) ;
40473: LD_INT 3
40475: PPUSH
40476: CALL_OW 67
// if not mc_construct_list [ i ] then
40480: LD_EXP 106
40484: PUSH
40485: LD_VAR 0 2
40489: ARRAY
40490: NOT
40491: IFFALSE 40495
// break ;
40493: GO 40533
// if not HasTask ( j ) then
40495: LD_VAR 0 3
40499: PPUSH
40500: CALL_OW 314
40504: NOT
40505: IFFALSE 40531
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
40507: LD_VAR 0 3
40511: PPUSH
40512: LD_EXP 106
40516: PUSH
40517: LD_VAR 0 2
40521: ARRAY
40522: PUSH
40523: LD_INT 1
40525: ARRAY
40526: PPUSH
40527: CALL 69192 0 2
// end ;
40531: GO 40381
40533: POP
40534: POP
// end else
40535: GO 41340
// if mc_build_list [ i ] then
40537: LD_EXP 104
40541: PUSH
40542: LD_VAR 0 2
40546: ARRAY
40547: IFFALSE 41340
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: LD_EXP 99
40558: PUSH
40559: LD_VAR 0 2
40563: ARRAY
40564: PPUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 30
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 30
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 72
40597: ST_TO_ADDR
// if depot then
40598: LD_VAR 0 5
40602: IFFALSE 40620
// depot := depot [ 1 ] else
40604: LD_ADDR_VAR 0 5
40608: PUSH
40609: LD_VAR 0 5
40613: PUSH
40614: LD_INT 1
40616: ARRAY
40617: ST_TO_ADDR
40618: GO 40628
// depot := 0 ;
40620: LD_ADDR_VAR 0 5
40624: PUSH
40625: LD_INT 0
40627: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
40628: LD_EXP 104
40632: PUSH
40633: LD_VAR 0 2
40637: ARRAY
40638: PUSH
40639: LD_INT 1
40641: ARRAY
40642: PUSH
40643: LD_INT 1
40645: ARRAY
40646: PPUSH
40647: CALL 69022 0 1
40651: PUSH
40652: LD_EXP 99
40656: PUSH
40657: LD_VAR 0 2
40661: ARRAY
40662: PPUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 30
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 30
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: PPUSH
40691: CALL_OW 72
40695: NOT
40696: AND
40697: IFFALSE 40802
// begin for j = 1 to mc_build_list [ i ] do
40699: LD_ADDR_VAR 0 3
40703: PUSH
40704: DOUBLE
40705: LD_INT 1
40707: DEC
40708: ST_TO_ADDR
40709: LD_EXP 104
40713: PUSH
40714: LD_VAR 0 2
40718: ARRAY
40719: PUSH
40720: FOR_TO
40721: IFFALSE 40800
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
40723: LD_EXP 104
40727: PUSH
40728: LD_VAR 0 2
40732: ARRAY
40733: PUSH
40734: LD_VAR 0 3
40738: ARRAY
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PUSH
40744: LD_INT 2
40746: EQUAL
40747: IFFALSE 40798
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
40749: LD_ADDR_EXP 104
40753: PUSH
40754: LD_EXP 104
40758: PPUSH
40759: LD_VAR 0 2
40763: PPUSH
40764: LD_EXP 104
40768: PUSH
40769: LD_VAR 0 2
40773: ARRAY
40774: PPUSH
40775: LD_VAR 0 3
40779: PPUSH
40780: LD_INT 1
40782: PPUSH
40783: LD_INT 0
40785: PPUSH
40786: CALL 65759 0 4
40790: PPUSH
40791: CALL_OW 1
40795: ST_TO_ADDR
// break ;
40796: GO 40800
// end ;
40798: GO 40720
40800: POP
40801: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
40802: LD_EXP 104
40806: PUSH
40807: LD_VAR 0 2
40811: ARRAY
40812: PUSH
40813: LD_INT 1
40815: ARRAY
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: PUSH
40821: LD_INT 0
40823: EQUAL
40824: PUSH
40825: LD_VAR 0 5
40829: PUSH
40830: LD_VAR 0 5
40834: PPUSH
40835: LD_EXP 104
40839: PUSH
40840: LD_VAR 0 2
40844: ARRAY
40845: PUSH
40846: LD_INT 1
40848: ARRAY
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: PPUSH
40854: LD_EXP 104
40858: PUSH
40859: LD_VAR 0 2
40863: ARRAY
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PUSH
40869: LD_INT 2
40871: ARRAY
40872: PPUSH
40873: LD_EXP 104
40877: PUSH
40878: LD_VAR 0 2
40882: ARRAY
40883: PUSH
40884: LD_INT 1
40886: ARRAY
40887: PUSH
40888: LD_INT 3
40890: ARRAY
40891: PPUSH
40892: LD_EXP 104
40896: PUSH
40897: LD_VAR 0 2
40901: ARRAY
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: PUSH
40907: LD_INT 4
40909: ARRAY
40910: PPUSH
40911: CALL 73738 0 5
40915: AND
40916: OR
40917: IFFALSE 41198
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40919: LD_ADDR_VAR 0 4
40923: PUSH
40924: LD_EXP 99
40928: PUSH
40929: LD_VAR 0 2
40933: ARRAY
40934: PPUSH
40935: LD_INT 25
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PPUSH
40945: CALL_OW 72
40949: PUSH
40950: LD_EXP 101
40954: PUSH
40955: LD_VAR 0 2
40959: ARRAY
40960: DIFF
40961: ST_TO_ADDR
// if not tmp then
40962: LD_VAR 0 4
40966: NOT
40967: IFFALSE 40971
// continue ;
40969: GO 40216
// for j in tmp do
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_VAR 0 4
40980: PUSH
40981: FOR_IN
40982: IFFALSE 41194
// begin if not mc_builders [ i ] then
40984: LD_EXP 105
40988: PUSH
40989: LD_VAR 0 2
40993: ARRAY
40994: NOT
40995: IFFALSE 41053
// begin SetTag ( j , 103 ) ;
40997: LD_VAR 0 3
41001: PPUSH
41002: LD_INT 103
41004: PPUSH
41005: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
41009: LD_ADDR_EXP 105
41013: PUSH
41014: LD_EXP 105
41018: PPUSH
41019: LD_VAR 0 2
41023: PUSH
41024: LD_EXP 105
41028: PUSH
41029: LD_VAR 0 2
41033: ARRAY
41034: PUSH
41035: LD_INT 1
41037: PLUS
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PPUSH
41043: LD_VAR 0 3
41047: PPUSH
41048: CALL 66341 0 3
41052: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
41053: LD_VAR 0 3
41057: PPUSH
41058: CALL_OW 310
41062: IFFALSE 41073
// ComExitBuilding ( j ) ;
41064: LD_VAR 0 3
41068: PPUSH
41069: CALL_OW 122
// wait ( 3 ) ;
41073: LD_INT 3
41075: PPUSH
41076: CALL_OW 67
// if not mc_build_list [ i ] then
41080: LD_EXP 104
41084: PUSH
41085: LD_VAR 0 2
41089: ARRAY
41090: NOT
41091: IFFALSE 41095
// break ;
41093: GO 41194
// if not HasTask ( j ) then
41095: LD_VAR 0 3
41099: PPUSH
41100: CALL_OW 314
41104: NOT
41105: IFFALSE 41192
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
41107: LD_VAR 0 3
41111: PPUSH
41112: LD_EXP 104
41116: PUSH
41117: LD_VAR 0 2
41121: ARRAY
41122: PUSH
41123: LD_INT 1
41125: ARRAY
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PPUSH
41131: LD_EXP 104
41135: PUSH
41136: LD_VAR 0 2
41140: ARRAY
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: PUSH
41146: LD_INT 2
41148: ARRAY
41149: PPUSH
41150: LD_EXP 104
41154: PUSH
41155: LD_VAR 0 2
41159: ARRAY
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PUSH
41165: LD_INT 3
41167: ARRAY
41168: PPUSH
41169: LD_EXP 104
41173: PUSH
41174: LD_VAR 0 2
41178: ARRAY
41179: PUSH
41180: LD_INT 1
41182: ARRAY
41183: PUSH
41184: LD_INT 4
41186: ARRAY
41187: PPUSH
41188: CALL_OW 145
// end ;
41192: GO 40981
41194: POP
41195: POP
// end else
41196: GO 41340
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
41198: LD_EXP 99
41202: PUSH
41203: LD_VAR 0 2
41207: ARRAY
41208: PPUSH
41209: LD_EXP 104
41213: PUSH
41214: LD_VAR 0 2
41218: ARRAY
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: PUSH
41224: LD_INT 1
41226: ARRAY
41227: PPUSH
41228: LD_EXP 104
41232: PUSH
41233: LD_VAR 0 2
41237: ARRAY
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PUSH
41243: LD_INT 2
41245: ARRAY
41246: PPUSH
41247: LD_EXP 104
41251: PUSH
41252: LD_VAR 0 2
41256: ARRAY
41257: PUSH
41258: LD_INT 1
41260: ARRAY
41261: PUSH
41262: LD_INT 3
41264: ARRAY
41265: PPUSH
41266: LD_EXP 104
41270: PUSH
41271: LD_VAR 0 2
41275: ARRAY
41276: PUSH
41277: LD_INT 1
41279: ARRAY
41280: PUSH
41281: LD_INT 4
41283: ARRAY
41284: PPUSH
41285: CALL 73092 0 5
41289: NOT
41290: IFFALSE 41340
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
41292: LD_ADDR_EXP 104
41296: PUSH
41297: LD_EXP 104
41301: PPUSH
41302: LD_VAR 0 2
41306: PPUSH
41307: LD_EXP 104
41311: PUSH
41312: LD_VAR 0 2
41316: ARRAY
41317: PPUSH
41318: LD_INT 1
41320: PPUSH
41321: LD_INT 1
41323: NEG
41324: PPUSH
41325: LD_INT 0
41327: PPUSH
41328: CALL 65759 0 4
41332: PPUSH
41333: CALL_OW 1
41337: ST_TO_ADDR
// continue ;
41338: GO 40216
// end ; end ; end ;
41340: GO 40216
41342: POP
41343: POP
// end ;
41344: LD_VAR 0 1
41348: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
41349: LD_INT 0
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
// if not mc_bases then
41357: LD_EXP 99
41361: NOT
41362: IFFALSE 41366
// exit ;
41364: GO 41793
// for i = 1 to mc_bases do
41366: LD_ADDR_VAR 0 2
41370: PUSH
41371: DOUBLE
41372: LD_INT 1
41374: DEC
41375: ST_TO_ADDR
41376: LD_EXP 99
41380: PUSH
41381: FOR_TO
41382: IFFALSE 41791
// begin tmp := mc_build_upgrade [ i ] ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_EXP 131
41393: PUSH
41394: LD_VAR 0 2
41398: ARRAY
41399: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
41400: LD_ADDR_VAR 0 6
41404: PUSH
41405: LD_EXP 132
41409: PUSH
41410: LD_VAR 0 2
41414: ARRAY
41415: PPUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 30
41421: PUSH
41422: LD_INT 6
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 30
41431: PUSH
41432: LD_INT 7
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 72
41448: ST_TO_ADDR
// if not tmp and not lab then
41449: LD_VAR 0 4
41453: NOT
41454: PUSH
41455: LD_VAR 0 6
41459: NOT
41460: AND
41461: IFFALSE 41465
// continue ;
41463: GO 41381
// if tmp then
41465: LD_VAR 0 4
41469: IFFALSE 41589
// for j in tmp do
41471: LD_ADDR_VAR 0 3
41475: PUSH
41476: LD_VAR 0 4
41480: PUSH
41481: FOR_IN
41482: IFFALSE 41587
// begin if UpgradeCost ( j ) then
41484: LD_VAR 0 3
41488: PPUSH
41489: CALL 72752 0 1
41493: IFFALSE 41585
// begin ComUpgrade ( j ) ;
41495: LD_VAR 0 3
41499: PPUSH
41500: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
41504: LD_ADDR_EXP 131
41508: PUSH
41509: LD_EXP 131
41513: PPUSH
41514: LD_VAR 0 2
41518: PPUSH
41519: LD_EXP 131
41523: PUSH
41524: LD_VAR 0 2
41528: ARRAY
41529: PUSH
41530: LD_VAR 0 3
41534: DIFF
41535: PPUSH
41536: CALL_OW 1
41540: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
41541: LD_ADDR_EXP 106
41545: PUSH
41546: LD_EXP 106
41550: PPUSH
41551: LD_VAR 0 2
41555: PUSH
41556: LD_EXP 106
41560: PUSH
41561: LD_VAR 0 2
41565: ARRAY
41566: PUSH
41567: LD_INT 1
41569: PLUS
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PPUSH
41575: LD_VAR 0 3
41579: PPUSH
41580: CALL 66341 0 3
41584: ST_TO_ADDR
// end ; end ;
41585: GO 41481
41587: POP
41588: POP
// if not lab or not mc_lab_upgrade [ i ] then
41589: LD_VAR 0 6
41593: NOT
41594: PUSH
41595: LD_EXP 133
41599: PUSH
41600: LD_VAR 0 2
41604: ARRAY
41605: NOT
41606: OR
41607: IFFALSE 41611
// continue ;
41609: GO 41381
// for j in lab do
41611: LD_ADDR_VAR 0 3
41615: PUSH
41616: LD_VAR 0 6
41620: PUSH
41621: FOR_IN
41622: IFFALSE 41787
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
41624: LD_VAR 0 3
41628: PPUSH
41629: CALL_OW 266
41633: PUSH
41634: LD_INT 6
41636: PUSH
41637: LD_INT 7
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: IN
41644: PUSH
41645: LD_VAR 0 3
41649: PPUSH
41650: CALL_OW 461
41654: PUSH
41655: LD_INT 1
41657: NONEQUAL
41658: AND
41659: IFFALSE 41785
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
41661: LD_VAR 0 3
41665: PPUSH
41666: LD_EXP 133
41670: PUSH
41671: LD_VAR 0 2
41675: ARRAY
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: PPUSH
41681: CALL 72957 0 2
41685: IFFALSE 41785
// begin ComCancel ( j ) ;
41687: LD_VAR 0 3
41691: PPUSH
41692: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
41696: LD_VAR 0 3
41700: PPUSH
41701: LD_EXP 133
41705: PUSH
41706: LD_VAR 0 2
41710: ARRAY
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: CALL_OW 207
// if not j in mc_construct_list [ i ] then
41720: LD_VAR 0 3
41724: PUSH
41725: LD_EXP 106
41729: PUSH
41730: LD_VAR 0 2
41734: ARRAY
41735: IN
41736: NOT
41737: IFFALSE 41783
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
41739: LD_ADDR_EXP 106
41743: PUSH
41744: LD_EXP 106
41748: PPUSH
41749: LD_VAR 0 2
41753: PUSH
41754: LD_EXP 106
41758: PUSH
41759: LD_VAR 0 2
41763: ARRAY
41764: PUSH
41765: LD_INT 1
41767: PLUS
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PPUSH
41773: LD_VAR 0 3
41777: PPUSH
41778: CALL 66341 0 3
41782: ST_TO_ADDR
// break ;
41783: GO 41787
// end ; end ; end ;
41785: GO 41621
41787: POP
41788: POP
// end ;
41789: GO 41381
41791: POP
41792: POP
// end ;
41793: LD_VAR 0 1
41797: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
41798: LD_INT 0
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
// if not mc_bases then
41809: LD_EXP 99
41813: NOT
41814: IFFALSE 41818
// exit ;
41816: GO 42223
// for i = 1 to mc_bases do
41818: LD_ADDR_VAR 0 2
41822: PUSH
41823: DOUBLE
41824: LD_INT 1
41826: DEC
41827: ST_TO_ADDR
41828: LD_EXP 99
41832: PUSH
41833: FOR_TO
41834: IFFALSE 42221
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
41836: LD_EXP 107
41840: PUSH
41841: LD_VAR 0 2
41845: ARRAY
41846: NOT
41847: PUSH
41848: LD_EXP 99
41852: PUSH
41853: LD_VAR 0 2
41857: ARRAY
41858: PPUSH
41859: LD_INT 30
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PPUSH
41869: CALL_OW 72
41873: NOT
41874: OR
41875: IFFALSE 41879
// continue ;
41877: GO 41833
// busy := false ;
41879: LD_ADDR_VAR 0 8
41883: PUSH
41884: LD_INT 0
41886: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
41887: LD_ADDR_VAR 0 4
41891: PUSH
41892: LD_EXP 99
41896: PUSH
41897: LD_VAR 0 2
41901: ARRAY
41902: PPUSH
41903: LD_INT 30
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PPUSH
41913: CALL_OW 72
41917: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
41918: LD_ADDR_VAR 0 6
41922: PUSH
41923: LD_EXP 107
41927: PUSH
41928: LD_VAR 0 2
41932: ARRAY
41933: PPUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 30
41939: PUSH
41940: LD_INT 32
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 30
41949: PUSH
41950: LD_INT 33
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL_OW 72
41966: ST_TO_ADDR
// if not t then
41967: LD_VAR 0 6
41971: NOT
41972: IFFALSE 41976
// continue ;
41974: GO 41833
// for j in tmp do
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_VAR 0 4
41985: PUSH
41986: FOR_IN
41987: IFFALSE 42017
// if not BuildingStatus ( j ) = bs_idle then
41989: LD_VAR 0 3
41993: PPUSH
41994: CALL_OW 461
41998: PUSH
41999: LD_INT 2
42001: EQUAL
42002: NOT
42003: IFFALSE 42015
// begin busy := true ;
42005: LD_ADDR_VAR 0 8
42009: PUSH
42010: LD_INT 1
42012: ST_TO_ADDR
// break ;
42013: GO 42017
// end ;
42015: GO 41986
42017: POP
42018: POP
// if busy then
42019: LD_VAR 0 8
42023: IFFALSE 42027
// continue ;
42025: GO 41833
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
42027: LD_ADDR_VAR 0 7
42031: PUSH
42032: LD_VAR 0 6
42036: PPUSH
42037: LD_INT 35
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PPUSH
42047: CALL_OW 72
42051: ST_TO_ADDR
// if tw then
42052: LD_VAR 0 7
42056: IFFALSE 42133
// begin tw := tw [ 1 ] ;
42058: LD_ADDR_VAR 0 7
42062: PUSH
42063: LD_VAR 0 7
42067: PUSH
42068: LD_INT 1
42070: ARRAY
42071: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_VAR 0 7
42081: PPUSH
42082: LD_EXP 124
42086: PUSH
42087: LD_VAR 0 2
42091: ARRAY
42092: PPUSH
42093: CALL 71311 0 2
42097: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
42098: LD_EXP 138
42102: PUSH
42103: LD_VAR 0 2
42107: ARRAY
42108: IFFALSE 42131
// if not weapon in mc_allowed_tower_weapons [ i ] then
42110: LD_VAR 0 9
42114: PUSH
42115: LD_EXP 138
42119: PUSH
42120: LD_VAR 0 2
42124: ARRAY
42125: IN
42126: NOT
42127: IFFALSE 42131
// continue ;
42129: GO 41833
// end else
42131: GO 42196
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
42133: LD_ADDR_VAR 0 5
42137: PUSH
42138: LD_EXP 107
42142: PUSH
42143: LD_VAR 0 2
42147: ARRAY
42148: PPUSH
42149: LD_VAR 0 4
42153: PPUSH
42154: CALL 101450 0 2
42158: ST_TO_ADDR
// if not tmp2 then
42159: LD_VAR 0 5
42163: NOT
42164: IFFALSE 42168
// continue ;
42166: GO 41833
// tw := tmp2 [ 1 ] ;
42168: LD_ADDR_VAR 0 7
42172: PUSH
42173: LD_VAR 0 5
42177: PUSH
42178: LD_INT 1
42180: ARRAY
42181: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
42182: LD_ADDR_VAR 0 9
42186: PUSH
42187: LD_VAR 0 5
42191: PUSH
42192: LD_INT 2
42194: ARRAY
42195: ST_TO_ADDR
// end ; if not weapon then
42196: LD_VAR 0 9
42200: NOT
42201: IFFALSE 42205
// continue ;
42203: GO 41833
// ComPlaceWeapon ( tw , weapon ) ;
42205: LD_VAR 0 7
42209: PPUSH
42210: LD_VAR 0 9
42214: PPUSH
42215: CALL_OW 148
// end ;
42219: GO 41833
42221: POP
42222: POP
// end ;
42223: LD_VAR 0 1
42227: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
42228: LD_INT 0
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
// if not mc_bases then
42236: LD_EXP 99
42240: NOT
42241: IFFALSE 42245
// exit ;
42243: GO 43257
// for i = 1 to mc_bases do
42245: LD_ADDR_VAR 0 2
42249: PUSH
42250: DOUBLE
42251: LD_INT 1
42253: DEC
42254: ST_TO_ADDR
42255: LD_EXP 99
42259: PUSH
42260: FOR_TO
42261: IFFALSE 43255
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
42263: LD_EXP 112
42267: PUSH
42268: LD_VAR 0 2
42272: ARRAY
42273: NOT
42274: PUSH
42275: LD_EXP 112
42279: PUSH
42280: LD_VAR 0 2
42284: ARRAY
42285: PUSH
42286: LD_EXP 113
42290: PUSH
42291: LD_VAR 0 2
42295: ARRAY
42296: EQUAL
42297: OR
42298: IFFALSE 42302
// continue ;
42300: GO 42260
// if mc_miners [ i ] then
42302: LD_EXP 113
42306: PUSH
42307: LD_VAR 0 2
42311: ARRAY
42312: IFFALSE 42942
// begin k := 1 ;
42314: LD_ADDR_VAR 0 4
42318: PUSH
42319: LD_INT 1
42321: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: DOUBLE
42328: LD_EXP 113
42332: PUSH
42333: LD_VAR 0 2
42337: ARRAY
42338: INC
42339: ST_TO_ADDR
42340: LD_INT 1
42342: PUSH
42343: FOR_DOWNTO
42344: IFFALSE 42940
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
42346: LD_EXP 113
42350: PUSH
42351: LD_VAR 0 2
42355: ARRAY
42356: PUSH
42357: LD_VAR 0 3
42361: ARRAY
42362: PPUSH
42363: CALL_OW 301
42367: PUSH
42368: LD_EXP 113
42372: PUSH
42373: LD_VAR 0 2
42377: ARRAY
42378: PUSH
42379: LD_VAR 0 3
42383: ARRAY
42384: PPUSH
42385: CALL_OW 257
42389: PUSH
42390: LD_INT 1
42392: NONEQUAL
42393: OR
42394: IFFALSE 42457
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
42396: LD_ADDR_VAR 0 5
42400: PUSH
42401: LD_EXP 113
42405: PUSH
42406: LD_VAR 0 2
42410: ARRAY
42411: PUSH
42412: LD_EXP 113
42416: PUSH
42417: LD_VAR 0 2
42421: ARRAY
42422: PUSH
42423: LD_VAR 0 3
42427: ARRAY
42428: DIFF
42429: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
42430: LD_ADDR_EXP 113
42434: PUSH
42435: LD_EXP 113
42439: PPUSH
42440: LD_VAR 0 2
42444: PPUSH
42445: LD_VAR 0 5
42449: PPUSH
42450: CALL_OW 1
42454: ST_TO_ADDR
// continue ;
42455: GO 42343
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
42457: LD_EXP 113
42461: PUSH
42462: LD_VAR 0 2
42466: ARRAY
42467: PUSH
42468: LD_VAR 0 3
42472: ARRAY
42473: PPUSH
42474: CALL 66277 0 1
42478: PUSH
42479: LD_EXP 113
42483: PUSH
42484: LD_VAR 0 2
42488: ARRAY
42489: PUSH
42490: LD_VAR 0 3
42494: ARRAY
42495: PPUSH
42496: CALL_OW 255
42500: PPUSH
42501: LD_EXP 112
42505: PUSH
42506: LD_VAR 0 2
42510: ARRAY
42511: PUSH
42512: LD_VAR 0 4
42516: ARRAY
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: PPUSH
42522: LD_EXP 112
42526: PUSH
42527: LD_VAR 0 2
42531: ARRAY
42532: PUSH
42533: LD_VAR 0 4
42537: ARRAY
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: PPUSH
42543: LD_INT 15
42545: PPUSH
42546: CALL 67237 0 4
42550: PUSH
42551: LD_INT 4
42553: ARRAY
42554: PUSH
42555: LD_EXP 113
42559: PUSH
42560: LD_VAR 0 2
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 3
42570: ARRAY
42571: PPUSH
42572: LD_INT 10
42574: PPUSH
42575: CALL 68934 0 2
42579: PUSH
42580: LD_INT 4
42582: ARRAY
42583: OR
42584: AND
42585: IFFALSE 42608
// ComStop ( mc_miners [ i ] [ j ] ) ;
42587: LD_EXP 113
42591: PUSH
42592: LD_VAR 0 2
42596: ARRAY
42597: PUSH
42598: LD_VAR 0 3
42602: ARRAY
42603: PPUSH
42604: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
42608: LD_EXP 113
42612: PUSH
42613: LD_VAR 0 2
42617: ARRAY
42618: PUSH
42619: LD_VAR 0 3
42623: ARRAY
42624: PPUSH
42625: CALL_OW 257
42629: PUSH
42630: LD_INT 1
42632: EQUAL
42633: PUSH
42634: LD_EXP 113
42638: PUSH
42639: LD_VAR 0 2
42643: ARRAY
42644: PUSH
42645: LD_VAR 0 3
42649: ARRAY
42650: PPUSH
42651: CALL_OW 459
42655: NOT
42656: AND
42657: PUSH
42658: LD_EXP 113
42662: PUSH
42663: LD_VAR 0 2
42667: ARRAY
42668: PUSH
42669: LD_VAR 0 3
42673: ARRAY
42674: PPUSH
42675: CALL_OW 255
42679: PPUSH
42680: LD_EXP 112
42684: PUSH
42685: LD_VAR 0 2
42689: ARRAY
42690: PUSH
42691: LD_VAR 0 4
42695: ARRAY
42696: PUSH
42697: LD_INT 1
42699: ARRAY
42700: PPUSH
42701: LD_EXP 112
42705: PUSH
42706: LD_VAR 0 2
42710: ARRAY
42711: PUSH
42712: LD_VAR 0 4
42716: ARRAY
42717: PUSH
42718: LD_INT 2
42720: ARRAY
42721: PPUSH
42722: LD_INT 15
42724: PPUSH
42725: CALL 67237 0 4
42729: PUSH
42730: LD_INT 4
42732: ARRAY
42733: PUSH
42734: LD_INT 0
42736: EQUAL
42737: AND
42738: PUSH
42739: LD_EXP 113
42743: PUSH
42744: LD_VAR 0 2
42748: ARRAY
42749: PUSH
42750: LD_VAR 0 3
42754: ARRAY
42755: PPUSH
42756: CALL_OW 314
42760: NOT
42761: AND
42762: IFFALSE 42938
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
42764: LD_EXP 113
42768: PUSH
42769: LD_VAR 0 2
42773: ARRAY
42774: PUSH
42775: LD_VAR 0 3
42779: ARRAY
42780: PPUSH
42781: CALL_OW 310
42785: IFFALSE 42808
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
42787: LD_EXP 113
42791: PUSH
42792: LD_VAR 0 2
42796: ARRAY
42797: PUSH
42798: LD_VAR 0 3
42802: ARRAY
42803: PPUSH
42804: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
42808: LD_EXP 113
42812: PUSH
42813: LD_VAR 0 2
42817: ARRAY
42818: PUSH
42819: LD_VAR 0 3
42823: ARRAY
42824: PPUSH
42825: CALL_OW 314
42829: NOT
42830: IFFALSE 42898
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
42832: LD_EXP 113
42836: PUSH
42837: LD_VAR 0 2
42841: ARRAY
42842: PUSH
42843: LD_VAR 0 3
42847: ARRAY
42848: PPUSH
42849: LD_EXP 112
42853: PUSH
42854: LD_VAR 0 2
42858: ARRAY
42859: PUSH
42860: LD_VAR 0 4
42864: ARRAY
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PPUSH
42870: LD_EXP 112
42874: PUSH
42875: LD_VAR 0 2
42879: ARRAY
42880: PUSH
42881: LD_VAR 0 4
42885: ARRAY
42886: PUSH
42887: LD_INT 2
42889: ARRAY
42890: PPUSH
42891: LD_INT 0
42893: PPUSH
42894: CALL_OW 193
// k := k + 1 ;
42898: LD_ADDR_VAR 0 4
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_INT 1
42910: PLUS
42911: ST_TO_ADDR
// if k > mc_mines [ i ] then
42912: LD_VAR 0 4
42916: PUSH
42917: LD_EXP 112
42921: PUSH
42922: LD_VAR 0 2
42926: ARRAY
42927: GREATER
42928: IFFALSE 42938
// k := 1 ;
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_INT 1
42937: ST_TO_ADDR
// end ; end ;
42938: GO 42343
42940: POP
42941: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
42942: LD_ADDR_VAR 0 5
42946: PUSH
42947: LD_EXP 99
42951: PUSH
42952: LD_VAR 0 2
42956: ARRAY
42957: PPUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 4
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: LD_INT 5
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 30
42983: PUSH
42984: LD_INT 32
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: PPUSH
42997: CALL_OW 72
43001: ST_TO_ADDR
// if not tmp then
43002: LD_VAR 0 5
43006: NOT
43007: IFFALSE 43011
// continue ;
43009: GO 42260
// list := [ ] ;
43011: LD_ADDR_VAR 0 6
43015: PUSH
43016: EMPTY
43017: ST_TO_ADDR
// for j in tmp do
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_VAR 0 5
43027: PUSH
43028: FOR_IN
43029: IFFALSE 43098
// begin for k in UnitsInside ( j ) do
43031: LD_ADDR_VAR 0 4
43035: PUSH
43036: LD_VAR 0 3
43040: PPUSH
43041: CALL_OW 313
43045: PUSH
43046: FOR_IN
43047: IFFALSE 43094
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
43049: LD_VAR 0 4
43053: PPUSH
43054: CALL_OW 257
43058: PUSH
43059: LD_INT 1
43061: EQUAL
43062: PUSH
43063: LD_VAR 0 4
43067: PPUSH
43068: CALL_OW 459
43072: NOT
43073: AND
43074: IFFALSE 43092
// list := list ^ k ;
43076: LD_ADDR_VAR 0 6
43080: PUSH
43081: LD_VAR 0 6
43085: PUSH
43086: LD_VAR 0 4
43090: ADD
43091: ST_TO_ADDR
43092: GO 43046
43094: POP
43095: POP
// end ;
43096: GO 43028
43098: POP
43099: POP
// list := list diff mc_miners [ i ] ;
43100: LD_ADDR_VAR 0 6
43104: PUSH
43105: LD_VAR 0 6
43109: PUSH
43110: LD_EXP 113
43114: PUSH
43115: LD_VAR 0 2
43119: ARRAY
43120: DIFF
43121: ST_TO_ADDR
// if not list then
43122: LD_VAR 0 6
43126: NOT
43127: IFFALSE 43131
// continue ;
43129: GO 42260
// k := mc_mines [ i ] - mc_miners [ i ] ;
43131: LD_ADDR_VAR 0 4
43135: PUSH
43136: LD_EXP 112
43140: PUSH
43141: LD_VAR 0 2
43145: ARRAY
43146: PUSH
43147: LD_EXP 113
43151: PUSH
43152: LD_VAR 0 2
43156: ARRAY
43157: MINUS
43158: ST_TO_ADDR
// if k > list then
43159: LD_VAR 0 4
43163: PUSH
43164: LD_VAR 0 6
43168: GREATER
43169: IFFALSE 43181
// k := list ;
43171: LD_ADDR_VAR 0 4
43175: PUSH
43176: LD_VAR 0 6
43180: ST_TO_ADDR
// for j = 1 to k do
43181: LD_ADDR_VAR 0 3
43185: PUSH
43186: DOUBLE
43187: LD_INT 1
43189: DEC
43190: ST_TO_ADDR
43191: LD_VAR 0 4
43195: PUSH
43196: FOR_TO
43197: IFFALSE 43251
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
43199: LD_ADDR_EXP 113
43203: PUSH
43204: LD_EXP 113
43208: PPUSH
43209: LD_VAR 0 2
43213: PUSH
43214: LD_EXP 113
43218: PUSH
43219: LD_VAR 0 2
43223: ARRAY
43224: PUSH
43225: LD_INT 1
43227: PLUS
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PPUSH
43233: LD_VAR 0 6
43237: PUSH
43238: LD_VAR 0 3
43242: ARRAY
43243: PPUSH
43244: CALL 66341 0 3
43248: ST_TO_ADDR
43249: GO 43196
43251: POP
43252: POP
// end ;
43253: GO 42260
43255: POP
43256: POP
// end ;
43257: LD_VAR 0 1
43261: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
43262: LD_INT 0
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
// if not mc_bases then
43274: LD_EXP 99
43278: NOT
43279: IFFALSE 43283
// exit ;
43281: GO 45014
// for i = 1 to mc_bases do
43283: LD_ADDR_VAR 0 2
43287: PUSH
43288: DOUBLE
43289: LD_INT 1
43291: DEC
43292: ST_TO_ADDR
43293: LD_EXP 99
43297: PUSH
43298: FOR_TO
43299: IFFALSE 45012
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
43301: LD_EXP 99
43305: PUSH
43306: LD_VAR 0 2
43310: ARRAY
43311: NOT
43312: PUSH
43313: LD_EXP 106
43317: PUSH
43318: LD_VAR 0 2
43322: ARRAY
43323: OR
43324: IFFALSE 43328
// continue ;
43326: GO 43298
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
43328: LD_EXP 115
43332: PUSH
43333: LD_VAR 0 2
43337: ARRAY
43338: NOT
43339: PUSH
43340: LD_EXP 116
43344: PUSH
43345: LD_VAR 0 2
43349: ARRAY
43350: AND
43351: IFFALSE 43389
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43353: LD_ADDR_EXP 116
43357: PUSH
43358: LD_EXP 116
43362: PPUSH
43363: LD_VAR 0 2
43367: PPUSH
43368: EMPTY
43369: PPUSH
43370: CALL_OW 1
43374: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
43375: LD_VAR 0 2
43379: PPUSH
43380: LD_INT 107
43382: PPUSH
43383: CALL 34801 0 2
// continue ;
43387: GO 43298
// end ; target := [ ] ;
43389: LD_ADDR_VAR 0 6
43393: PUSH
43394: EMPTY
43395: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: DOUBLE
43402: LD_EXP 115
43406: PUSH
43407: LD_VAR 0 2
43411: ARRAY
43412: INC
43413: ST_TO_ADDR
43414: LD_INT 1
43416: PUSH
43417: FOR_DOWNTO
43418: IFFALSE 43678
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
43420: LD_EXP 115
43424: PUSH
43425: LD_VAR 0 2
43429: ARRAY
43430: PUSH
43431: LD_VAR 0 3
43435: ARRAY
43436: PUSH
43437: LD_INT 2
43439: ARRAY
43440: PPUSH
43441: LD_EXP 115
43445: PUSH
43446: LD_VAR 0 2
43450: ARRAY
43451: PUSH
43452: LD_VAR 0 3
43456: ARRAY
43457: PUSH
43458: LD_INT 3
43460: ARRAY
43461: PPUSH
43462: CALL_OW 488
43466: PUSH
43467: LD_EXP 115
43471: PUSH
43472: LD_VAR 0 2
43476: ARRAY
43477: PUSH
43478: LD_VAR 0 3
43482: ARRAY
43483: PUSH
43484: LD_INT 2
43486: ARRAY
43487: PPUSH
43488: LD_EXP 115
43492: PUSH
43493: LD_VAR 0 2
43497: ARRAY
43498: PUSH
43499: LD_VAR 0 3
43503: ARRAY
43504: PUSH
43505: LD_INT 3
43507: ARRAY
43508: PPUSH
43509: CALL_OW 284
43513: PUSH
43514: LD_INT 0
43516: EQUAL
43517: AND
43518: IFFALSE 43573
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
43520: LD_ADDR_VAR 0 5
43524: PUSH
43525: LD_EXP 115
43529: PUSH
43530: LD_VAR 0 2
43534: ARRAY
43535: PPUSH
43536: LD_VAR 0 3
43540: PPUSH
43541: CALL_OW 3
43545: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
43546: LD_ADDR_EXP 115
43550: PUSH
43551: LD_EXP 115
43555: PPUSH
43556: LD_VAR 0 2
43560: PPUSH
43561: LD_VAR 0 5
43565: PPUSH
43566: CALL_OW 1
43570: ST_TO_ADDR
// continue ;
43571: GO 43417
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
43573: LD_EXP 99
43577: PUSH
43578: LD_VAR 0 2
43582: ARRAY
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: CALL_OW 255
43592: PPUSH
43593: LD_EXP 115
43597: PUSH
43598: LD_VAR 0 2
43602: ARRAY
43603: PUSH
43604: LD_VAR 0 3
43608: ARRAY
43609: PUSH
43610: LD_INT 2
43612: ARRAY
43613: PPUSH
43614: LD_EXP 115
43618: PUSH
43619: LD_VAR 0 2
43623: ARRAY
43624: PUSH
43625: LD_VAR 0 3
43629: ARRAY
43630: PUSH
43631: LD_INT 3
43633: ARRAY
43634: PPUSH
43635: LD_INT 30
43637: PPUSH
43638: CALL 67237 0 4
43642: PUSH
43643: LD_INT 4
43645: ARRAY
43646: PUSH
43647: LD_INT 0
43649: EQUAL
43650: IFFALSE 43676
// begin target := mc_crates [ i ] [ j ] ;
43652: LD_ADDR_VAR 0 6
43656: PUSH
43657: LD_EXP 115
43661: PUSH
43662: LD_VAR 0 2
43666: ARRAY
43667: PUSH
43668: LD_VAR 0 3
43672: ARRAY
43673: ST_TO_ADDR
// break ;
43674: GO 43678
// end ; end ;
43676: GO 43417
43678: POP
43679: POP
// if not target then
43680: LD_VAR 0 6
43684: NOT
43685: IFFALSE 43689
// continue ;
43687: GO 43298
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
43689: LD_ADDR_VAR 0 7
43693: PUSH
43694: LD_EXP 118
43698: PUSH
43699: LD_VAR 0 2
43703: ARRAY
43704: PPUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 58
43713: PUSH
43714: EMPTY
43715: LIST
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 61
43723: PUSH
43724: EMPTY
43725: LIST
43726: PUSH
43727: LD_INT 33
43729: PUSH
43730: LD_INT 5
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 33
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 34
43759: PUSH
43760: LD_INT 32
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 34
43769: PUSH
43770: LD_INT 51
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 34
43779: PUSH
43780: LD_INT 12
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PPUSH
43797: CALL_OW 72
43801: ST_TO_ADDR
// if not cargo then
43802: LD_VAR 0 7
43806: NOT
43807: IFFALSE 44450
// begin if mc_crates_collector [ i ] < 5 then
43809: LD_EXP 116
43813: PUSH
43814: LD_VAR 0 2
43818: ARRAY
43819: PUSH
43820: LD_INT 5
43822: LESS
43823: IFFALSE 44189
// begin if mc_ape [ i ] then
43825: LD_EXP 128
43829: PUSH
43830: LD_VAR 0 2
43834: ARRAY
43835: IFFALSE 43882
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
43837: LD_ADDR_VAR 0 5
43841: PUSH
43842: LD_EXP 128
43846: PUSH
43847: LD_VAR 0 2
43851: ARRAY
43852: PPUSH
43853: LD_INT 25
43855: PUSH
43856: LD_INT 16
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 24
43865: PUSH
43866: LD_INT 750
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PPUSH
43877: CALL_OW 72
43881: ST_TO_ADDR
// if not tmp then
43882: LD_VAR 0 5
43886: NOT
43887: IFFALSE 43934
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_EXP 99
43898: PUSH
43899: LD_VAR 0 2
43903: ARRAY
43904: PPUSH
43905: LD_INT 25
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 24
43917: PUSH
43918: LD_INT 750
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PPUSH
43929: CALL_OW 72
43933: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
43934: LD_EXP 128
43938: PUSH
43939: LD_VAR 0 2
43943: ARRAY
43944: PUSH
43945: LD_EXP 99
43949: PUSH
43950: LD_VAR 0 2
43954: ARRAY
43955: PPUSH
43956: LD_INT 25
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 24
43968: PUSH
43969: LD_INT 750
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PPUSH
43980: CALL_OW 72
43984: AND
43985: PUSH
43986: LD_VAR 0 5
43990: PUSH
43991: LD_INT 5
43993: LESS
43994: AND
43995: IFFALSE 44077
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_EXP 99
44006: PUSH
44007: LD_VAR 0 2
44011: ARRAY
44012: PPUSH
44013: LD_INT 25
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 24
44025: PUSH
44026: LD_INT 750
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PPUSH
44037: CALL_OW 72
44041: PUSH
44042: FOR_IN
44043: IFFALSE 44075
// begin tmp := tmp union j ;
44045: LD_ADDR_VAR 0 5
44049: PUSH
44050: LD_VAR 0 5
44054: PUSH
44055: LD_VAR 0 3
44059: UNION
44060: ST_TO_ADDR
// if tmp >= 5 then
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 5
44068: GREATEREQUAL
44069: IFFALSE 44073
// break ;
44071: GO 44075
// end ;
44073: GO 44042
44075: POP
44076: POP
// end ; if not tmp then
44077: LD_VAR 0 5
44081: NOT
44082: IFFALSE 44086
// continue ;
44084: GO 43298
// for j in tmp do
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_VAR 0 5
44095: PUSH
44096: FOR_IN
44097: IFFALSE 44187
// if not GetTag ( j ) then
44099: LD_VAR 0 3
44103: PPUSH
44104: CALL_OW 110
44108: NOT
44109: IFFALSE 44185
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
44111: LD_ADDR_EXP 116
44115: PUSH
44116: LD_EXP 116
44120: PPUSH
44121: LD_VAR 0 2
44125: PUSH
44126: LD_EXP 116
44130: PUSH
44131: LD_VAR 0 2
44135: ARRAY
44136: PUSH
44137: LD_INT 1
44139: PLUS
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: CALL 66341 0 3
44154: ST_TO_ADDR
// SetTag ( j , 107 ) ;
44155: LD_VAR 0 3
44159: PPUSH
44160: LD_INT 107
44162: PPUSH
44163: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
44167: LD_EXP 116
44171: PUSH
44172: LD_VAR 0 2
44176: ARRAY
44177: PUSH
44178: LD_INT 5
44180: GREATEREQUAL
44181: IFFALSE 44185
// break ;
44183: GO 44187
// end ;
44185: GO 44096
44187: POP
44188: POP
// end ; if mc_crates_collector [ i ] and target then
44189: LD_EXP 116
44193: PUSH
44194: LD_VAR 0 2
44198: ARRAY
44199: PUSH
44200: LD_VAR 0 6
44204: AND
44205: IFFALSE 44448
// begin if mc_crates_collector [ i ] < target [ 1 ] then
44207: LD_EXP 116
44211: PUSH
44212: LD_VAR 0 2
44216: ARRAY
44217: PUSH
44218: LD_VAR 0 6
44222: PUSH
44223: LD_INT 1
44225: ARRAY
44226: LESS
44227: IFFALSE 44247
// tmp := mc_crates_collector [ i ] else
44229: LD_ADDR_VAR 0 5
44233: PUSH
44234: LD_EXP 116
44238: PUSH
44239: LD_VAR 0 2
44243: ARRAY
44244: ST_TO_ADDR
44245: GO 44261
// tmp := target [ 1 ] ;
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_VAR 0 6
44256: PUSH
44257: LD_INT 1
44259: ARRAY
44260: ST_TO_ADDR
// k := 0 ;
44261: LD_ADDR_VAR 0 4
44265: PUSH
44266: LD_INT 0
44268: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
44269: LD_ADDR_VAR 0 3
44273: PUSH
44274: LD_EXP 116
44278: PUSH
44279: LD_VAR 0 2
44283: ARRAY
44284: PUSH
44285: FOR_IN
44286: IFFALSE 44446
// begin k := k + 1 ;
44288: LD_ADDR_VAR 0 4
44292: PUSH
44293: LD_VAR 0 4
44297: PUSH
44298: LD_INT 1
44300: PLUS
44301: ST_TO_ADDR
// if k > tmp then
44302: LD_VAR 0 4
44306: PUSH
44307: LD_VAR 0 5
44311: GREATER
44312: IFFALSE 44316
// break ;
44314: GO 44446
// if not GetClass ( j ) in [ 2 , 16 ] then
44316: LD_VAR 0 3
44320: PPUSH
44321: CALL_OW 257
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 16
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: IN
44336: NOT
44337: IFFALSE 44390
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
44339: LD_ADDR_EXP 116
44343: PUSH
44344: LD_EXP 116
44348: PPUSH
44349: LD_VAR 0 2
44353: PPUSH
44354: LD_EXP 116
44358: PUSH
44359: LD_VAR 0 2
44363: ARRAY
44364: PUSH
44365: LD_VAR 0 3
44369: DIFF
44370: PPUSH
44371: CALL_OW 1
44375: ST_TO_ADDR
// SetTag ( j , 0 ) ;
44376: LD_VAR 0 3
44380: PPUSH
44381: LD_INT 0
44383: PPUSH
44384: CALL_OW 109
// continue ;
44388: GO 44285
// end ; if IsInUnit ( j ) then
44390: LD_VAR 0 3
44394: PPUSH
44395: CALL_OW 310
44399: IFFALSE 44410
// ComExitBuilding ( j ) ;
44401: LD_VAR 0 3
44405: PPUSH
44406: CALL_OW 122
// wait ( 3 ) ;
44410: LD_INT 3
44412: PPUSH
44413: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
44417: LD_VAR 0 3
44421: PPUSH
44422: LD_VAR 0 6
44426: PUSH
44427: LD_INT 2
44429: ARRAY
44430: PPUSH
44431: LD_VAR 0 6
44435: PUSH
44436: LD_INT 3
44438: ARRAY
44439: PPUSH
44440: CALL_OW 117
// end ;
44444: GO 44285
44446: POP
44447: POP
// end ; end else
44448: GO 45010
// begin for j in cargo do
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_VAR 0 7
44459: PUSH
44460: FOR_IN
44461: IFFALSE 45008
// begin if GetTag ( j ) <> 0 then
44463: LD_VAR 0 3
44467: PPUSH
44468: CALL_OW 110
44472: PUSH
44473: LD_INT 0
44475: NONEQUAL
44476: IFFALSE 44480
// continue ;
44478: GO 44460
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
44480: LD_VAR 0 3
44484: PPUSH
44485: CALL_OW 256
44489: PUSH
44490: LD_INT 1000
44492: LESS
44493: PUSH
44494: LD_VAR 0 3
44498: PPUSH
44499: LD_EXP 123
44503: PUSH
44504: LD_VAR 0 2
44508: ARRAY
44509: PPUSH
44510: CALL_OW 308
44514: NOT
44515: AND
44516: IFFALSE 44538
// ComMoveToArea ( j , mc_parking [ i ] ) ;
44518: LD_VAR 0 3
44522: PPUSH
44523: LD_EXP 123
44527: PUSH
44528: LD_VAR 0 2
44532: ARRAY
44533: PPUSH
44534: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
44538: LD_VAR 0 3
44542: PPUSH
44543: CALL_OW 256
44547: PUSH
44548: LD_INT 1000
44550: LESS
44551: PUSH
44552: LD_VAR 0 3
44556: PPUSH
44557: LD_EXP 123
44561: PUSH
44562: LD_VAR 0 2
44566: ARRAY
44567: PPUSH
44568: CALL_OW 308
44572: AND
44573: IFFALSE 44577
// continue ;
44575: GO 44460
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
44577: LD_VAR 0 3
44581: PPUSH
44582: CALL_OW 262
44586: PUSH
44587: LD_INT 2
44589: EQUAL
44590: PUSH
44591: LD_VAR 0 3
44595: PPUSH
44596: CALL_OW 261
44600: PUSH
44601: LD_INT 15
44603: LESS
44604: AND
44605: IFFALSE 44609
// continue ;
44607: GO 44460
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
44609: LD_VAR 0 3
44613: PPUSH
44614: CALL_OW 262
44618: PUSH
44619: LD_INT 1
44621: EQUAL
44622: PUSH
44623: LD_VAR 0 3
44627: PPUSH
44628: CALL_OW 261
44632: PUSH
44633: LD_INT 10
44635: LESS
44636: AND
44637: IFFALSE 44947
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44639: LD_ADDR_VAR 0 8
44643: PUSH
44644: LD_EXP 99
44648: PUSH
44649: LD_VAR 0 2
44653: ARRAY
44654: PPUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 30
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 30
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: PPUSH
44683: CALL_OW 72
44687: ST_TO_ADDR
// if not depot then
44688: LD_VAR 0 8
44692: NOT
44693: IFFALSE 44697
// continue ;
44695: GO 44460
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
44697: LD_VAR 0 3
44701: PPUSH
44702: LD_VAR 0 8
44706: PPUSH
44707: LD_VAR 0 3
44711: PPUSH
44712: CALL_OW 74
44716: PPUSH
44717: CALL_OW 296
44721: PUSH
44722: LD_INT 6
44724: LESS
44725: IFFALSE 44741
// SetFuel ( j , 100 ) else
44727: LD_VAR 0 3
44731: PPUSH
44732: LD_INT 100
44734: PPUSH
44735: CALL_OW 240
44739: GO 44947
// if GetFuel ( j ) = 0 then
44741: LD_VAR 0 3
44745: PPUSH
44746: CALL_OW 261
44750: PUSH
44751: LD_INT 0
44753: EQUAL
44754: IFFALSE 44947
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
44756: LD_ADDR_EXP 118
44760: PUSH
44761: LD_EXP 118
44765: PPUSH
44766: LD_VAR 0 2
44770: PPUSH
44771: LD_EXP 118
44775: PUSH
44776: LD_VAR 0 2
44780: ARRAY
44781: PUSH
44782: LD_VAR 0 3
44786: DIFF
44787: PPUSH
44788: CALL_OW 1
44792: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
44793: LD_VAR 0 3
44797: PPUSH
44798: CALL_OW 263
44802: PUSH
44803: LD_INT 1
44805: EQUAL
44806: IFFALSE 44822
// ComExitVehicle ( IsInUnit ( j ) ) ;
44808: LD_VAR 0 3
44812: PPUSH
44813: CALL_OW 310
44817: PPUSH
44818: CALL_OW 121
// if GetControl ( j ) = control_remote then
44822: LD_VAR 0 3
44826: PPUSH
44827: CALL_OW 263
44831: PUSH
44832: LD_INT 2
44834: EQUAL
44835: IFFALSE 44846
// ComUnlink ( j ) ;
44837: LD_VAR 0 3
44841: PPUSH
44842: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
44846: LD_ADDR_VAR 0 9
44850: PUSH
44851: LD_VAR 0 2
44855: PPUSH
44856: LD_INT 3
44858: PPUSH
44859: CALL 54109 0 2
44863: ST_TO_ADDR
// if fac then
44864: LD_VAR 0 9
44868: IFFALSE 44945
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
44870: LD_ADDR_VAR 0 10
44874: PUSH
44875: LD_VAR 0 9
44879: PPUSH
44880: LD_VAR 0 3
44884: PPUSH
44885: CALL_OW 265
44889: PPUSH
44890: LD_VAR 0 3
44894: PPUSH
44895: CALL_OW 262
44899: PPUSH
44900: LD_VAR 0 3
44904: PPUSH
44905: CALL_OW 263
44909: PPUSH
44910: LD_VAR 0 3
44914: PPUSH
44915: CALL_OW 264
44919: PPUSH
44920: CALL 63941 0 5
44924: ST_TO_ADDR
// if components then
44925: LD_VAR 0 10
44929: IFFALSE 44945
// MC_InsertProduceList ( i , components ) ;
44931: LD_VAR 0 2
44935: PPUSH
44936: LD_VAR 0 10
44940: PPUSH
44941: CALL 53679 0 2
// end ; continue ;
44945: GO 44460
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
44947: LD_VAR 0 3
44951: PPUSH
44952: LD_INT 1
44954: PPUSH
44955: CALL_OW 289
44959: PUSH
44960: LD_INT 100
44962: LESS
44963: PUSH
44964: LD_VAR 0 3
44968: PPUSH
44969: CALL_OW 314
44973: NOT
44974: AND
44975: IFFALSE 45004
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
44977: LD_VAR 0 3
44981: PPUSH
44982: LD_VAR 0 6
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: PPUSH
44991: LD_VAR 0 6
44995: PUSH
44996: LD_INT 3
44998: ARRAY
44999: PPUSH
45000: CALL_OW 117
// break ;
45004: GO 45008
// end ;
45006: GO 44460
45008: POP
45009: POP
// end ; end ;
45010: GO 43298
45012: POP
45013: POP
// end ;
45014: LD_VAR 0 1
45018: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
45019: LD_INT 0
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
// if not mc_bases then
45025: LD_EXP 99
45029: NOT
45030: IFFALSE 45034
// exit ;
45032: GO 45195
// for i = 1 to mc_bases do
45034: LD_ADDR_VAR 0 2
45038: PUSH
45039: DOUBLE
45040: LD_INT 1
45042: DEC
45043: ST_TO_ADDR
45044: LD_EXP 99
45048: PUSH
45049: FOR_TO
45050: IFFALSE 45193
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
45052: LD_ADDR_VAR 0 4
45056: PUSH
45057: LD_EXP 118
45061: PUSH
45062: LD_VAR 0 2
45066: ARRAY
45067: PUSH
45068: LD_EXP 121
45072: PUSH
45073: LD_VAR 0 2
45077: ARRAY
45078: UNION
45079: PPUSH
45080: LD_INT 33
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PPUSH
45090: CALL_OW 72
45094: ST_TO_ADDR
// if tmp then
45095: LD_VAR 0 4
45099: IFFALSE 45191
// for j in tmp do
45101: LD_ADDR_VAR 0 3
45105: PUSH
45106: LD_VAR 0 4
45110: PUSH
45111: FOR_IN
45112: IFFALSE 45189
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
45114: LD_VAR 0 3
45118: PPUSH
45119: CALL_OW 312
45123: NOT
45124: PUSH
45125: LD_VAR 0 3
45129: PPUSH
45130: CALL_OW 256
45134: PUSH
45135: LD_INT 250
45137: GREATEREQUAL
45138: AND
45139: IFFALSE 45152
// Connect ( j ) else
45141: LD_VAR 0 3
45145: PPUSH
45146: CALL 69274 0 1
45150: GO 45187
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
45152: LD_VAR 0 3
45156: PPUSH
45157: CALL_OW 256
45161: PUSH
45162: LD_INT 250
45164: LESS
45165: PUSH
45166: LD_VAR 0 3
45170: PPUSH
45171: CALL_OW 312
45175: AND
45176: IFFALSE 45187
// ComUnlink ( j ) ;
45178: LD_VAR 0 3
45182: PPUSH
45183: CALL_OW 136
45187: GO 45111
45189: POP
45190: POP
// end ;
45191: GO 45049
45193: POP
45194: POP
// end ;
45195: LD_VAR 0 1
45199: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
45200: LD_INT 0
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
// if not mc_bases then
45207: LD_EXP 99
45211: NOT
45212: IFFALSE 45216
// exit ;
45214: GO 45676
// for i = 1 to mc_bases do
45216: LD_ADDR_VAR 0 2
45220: PUSH
45221: DOUBLE
45222: LD_INT 1
45224: DEC
45225: ST_TO_ADDR
45226: LD_EXP 99
45230: PUSH
45231: FOR_TO
45232: IFFALSE 45674
// begin if not mc_produce [ i ] then
45234: LD_EXP 120
45238: PUSH
45239: LD_VAR 0 2
45243: ARRAY
45244: NOT
45245: IFFALSE 45249
// continue ;
45247: GO 45231
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45249: LD_ADDR_VAR 0 5
45253: PUSH
45254: LD_EXP 99
45258: PUSH
45259: LD_VAR 0 2
45263: ARRAY
45264: PPUSH
45265: LD_INT 30
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PPUSH
45275: CALL_OW 72
45279: ST_TO_ADDR
// if not fac then
45280: LD_VAR 0 5
45284: NOT
45285: IFFALSE 45289
// continue ;
45287: GO 45231
// for j in fac do
45289: LD_ADDR_VAR 0 3
45293: PUSH
45294: LD_VAR 0 5
45298: PUSH
45299: FOR_IN
45300: IFFALSE 45670
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
45302: LD_VAR 0 3
45306: PPUSH
45307: CALL_OW 461
45311: PUSH
45312: LD_INT 2
45314: NONEQUAL
45315: PUSH
45316: LD_VAR 0 3
45320: PPUSH
45321: LD_INT 15
45323: PPUSH
45324: CALL 68934 0 2
45328: PUSH
45329: LD_INT 4
45331: ARRAY
45332: OR
45333: PUSH
45334: LD_VAR 0 3
45338: PPUSH
45339: CALL_OW 313
45343: PUSH
45344: LD_INT 0
45346: EQUAL
45347: OR
45348: IFFALSE 45352
// continue ;
45350: GO 45299
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
45352: LD_VAR 0 3
45356: PPUSH
45357: LD_EXP 120
45361: PUSH
45362: LD_VAR 0 2
45366: ARRAY
45367: PUSH
45368: LD_INT 1
45370: ARRAY
45371: PUSH
45372: LD_INT 1
45374: ARRAY
45375: PPUSH
45376: LD_EXP 120
45380: PUSH
45381: LD_VAR 0 2
45385: ARRAY
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: LD_EXP 120
45399: PUSH
45400: LD_VAR 0 2
45404: ARRAY
45405: PUSH
45406: LD_INT 1
45408: ARRAY
45409: PUSH
45410: LD_INT 3
45412: ARRAY
45413: PPUSH
45414: LD_EXP 120
45418: PUSH
45419: LD_VAR 0 2
45423: ARRAY
45424: PUSH
45425: LD_INT 1
45427: ARRAY
45428: PUSH
45429: LD_INT 4
45431: ARRAY
45432: PPUSH
45433: CALL_OW 448
45437: PUSH
45438: LD_VAR 0 3
45442: PPUSH
45443: LD_EXP 120
45447: PUSH
45448: LD_VAR 0 2
45452: ARRAY
45453: PUSH
45454: LD_INT 1
45456: ARRAY
45457: PUSH
45458: LD_INT 1
45460: ARRAY
45461: PUSH
45462: LD_EXP 120
45466: PUSH
45467: LD_VAR 0 2
45471: ARRAY
45472: PUSH
45473: LD_INT 1
45475: ARRAY
45476: PUSH
45477: LD_INT 2
45479: ARRAY
45480: PUSH
45481: LD_EXP 120
45485: PUSH
45486: LD_VAR 0 2
45490: ARRAY
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PUSH
45496: LD_INT 3
45498: ARRAY
45499: PUSH
45500: LD_EXP 120
45504: PUSH
45505: LD_VAR 0 2
45509: ARRAY
45510: PUSH
45511: LD_INT 1
45513: ARRAY
45514: PUSH
45515: LD_INT 4
45517: ARRAY
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: PPUSH
45525: CALL 72605 0 2
45529: AND
45530: IFFALSE 45668
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
45532: LD_VAR 0 3
45536: PPUSH
45537: LD_EXP 120
45541: PUSH
45542: LD_VAR 0 2
45546: ARRAY
45547: PUSH
45548: LD_INT 1
45550: ARRAY
45551: PUSH
45552: LD_INT 1
45554: ARRAY
45555: PPUSH
45556: LD_EXP 120
45560: PUSH
45561: LD_VAR 0 2
45565: ARRAY
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: PUSH
45571: LD_INT 2
45573: ARRAY
45574: PPUSH
45575: LD_EXP 120
45579: PUSH
45580: LD_VAR 0 2
45584: ARRAY
45585: PUSH
45586: LD_INT 1
45588: ARRAY
45589: PUSH
45590: LD_INT 3
45592: ARRAY
45593: PPUSH
45594: LD_EXP 120
45598: PUSH
45599: LD_VAR 0 2
45603: ARRAY
45604: PUSH
45605: LD_INT 1
45607: ARRAY
45608: PUSH
45609: LD_INT 4
45611: ARRAY
45612: PPUSH
45613: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
45617: LD_ADDR_VAR 0 4
45621: PUSH
45622: LD_EXP 120
45626: PUSH
45627: LD_VAR 0 2
45631: ARRAY
45632: PPUSH
45633: LD_INT 1
45635: PPUSH
45636: CALL_OW 3
45640: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45641: LD_ADDR_EXP 120
45645: PUSH
45646: LD_EXP 120
45650: PPUSH
45651: LD_VAR 0 2
45655: PPUSH
45656: LD_VAR 0 4
45660: PPUSH
45661: CALL_OW 1
45665: ST_TO_ADDR
// break ;
45666: GO 45670
// end ; end ;
45668: GO 45299
45670: POP
45671: POP
// end ;
45672: GO 45231
45674: POP
45675: POP
// end ;
45676: LD_VAR 0 1
45680: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
45681: LD_INT 0
45683: PPUSH
45684: PPUSH
45685: PPUSH
// if not mc_bases then
45686: LD_EXP 99
45690: NOT
45691: IFFALSE 45695
// exit ;
45693: GO 45784
// for i = 1 to mc_bases do
45695: LD_ADDR_VAR 0 2
45699: PUSH
45700: DOUBLE
45701: LD_INT 1
45703: DEC
45704: ST_TO_ADDR
45705: LD_EXP 99
45709: PUSH
45710: FOR_TO
45711: IFFALSE 45782
// begin if mc_attack [ i ] then
45713: LD_EXP 119
45717: PUSH
45718: LD_VAR 0 2
45722: ARRAY
45723: IFFALSE 45780
// begin tmp := mc_attack [ i ] [ 1 ] ;
45725: LD_ADDR_VAR 0 3
45729: PUSH
45730: LD_EXP 119
45734: PUSH
45735: LD_VAR 0 2
45739: ARRAY
45740: PUSH
45741: LD_INT 1
45743: ARRAY
45744: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45745: LD_ADDR_EXP 119
45749: PUSH
45750: LD_EXP 119
45754: PPUSH
45755: LD_VAR 0 2
45759: PPUSH
45760: EMPTY
45761: PPUSH
45762: CALL_OW 1
45766: ST_TO_ADDR
// Attack ( tmp ) ;
45767: LD_VAR 0 3
45771: PPUSH
45772: CALL 94794 0 1
// exit ;
45776: POP
45777: POP
45778: GO 45784
// end ; end ;
45780: GO 45710
45782: POP
45783: POP
// end ;
45784: LD_VAR 0 1
45788: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
45789: LD_INT 0
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
// if not mc_bases then
45798: LD_EXP 99
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 46411
// for i = 1 to mc_bases do
45807: LD_ADDR_VAR 0 2
45811: PUSH
45812: DOUBLE
45813: LD_INT 1
45815: DEC
45816: ST_TO_ADDR
45817: LD_EXP 99
45821: PUSH
45822: FOR_TO
45823: IFFALSE 46409
// begin if not mc_bases [ i ] then
45825: LD_EXP 99
45829: PUSH
45830: LD_VAR 0 2
45834: ARRAY
45835: NOT
45836: IFFALSE 45840
// continue ;
45838: GO 45822
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
45840: LD_ADDR_VAR 0 7
45844: PUSH
45845: LD_EXP 99
45849: PUSH
45850: LD_VAR 0 2
45854: ARRAY
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: PPUSH
45860: CALL 63245 0 1
45864: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
45865: LD_ADDR_EXP 122
45869: PUSH
45870: LD_EXP 122
45874: PPUSH
45875: LD_VAR 0 2
45879: PPUSH
45880: LD_EXP 99
45884: PUSH
45885: LD_VAR 0 2
45889: ARRAY
45890: PUSH
45891: LD_INT 1
45893: ARRAY
45894: PPUSH
45895: CALL_OW 255
45899: PPUSH
45900: LD_EXP 124
45904: PUSH
45905: LD_VAR 0 2
45909: ARRAY
45910: PPUSH
45911: CALL 61205 0 2
45915: PPUSH
45916: CALL_OW 1
45920: ST_TO_ADDR
// if not mc_scan [ i ] then
45921: LD_EXP 122
45925: PUSH
45926: LD_VAR 0 2
45930: ARRAY
45931: NOT
45932: IFFALSE 46087
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45934: LD_ADDR_VAR 0 4
45938: PUSH
45939: LD_EXP 99
45943: PUSH
45944: LD_VAR 0 2
45948: ARRAY
45949: PPUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 25
45955: PUSH
45956: LD_INT 5
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 25
45965: PUSH
45966: LD_INT 8
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 25
45975: PUSH
45976: LD_INT 9
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: PPUSH
45989: CALL_OW 72
45993: ST_TO_ADDR
// if not tmp then
45994: LD_VAR 0 4
45998: NOT
45999: IFFALSE 46003
// continue ;
46001: GO 45822
// for j in tmp do
46003: LD_ADDR_VAR 0 3
46007: PUSH
46008: LD_VAR 0 4
46012: PUSH
46013: FOR_IN
46014: IFFALSE 46085
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
46016: LD_VAR 0 3
46020: PPUSH
46021: CALL_OW 310
46025: PPUSH
46026: CALL_OW 266
46030: PUSH
46031: LD_INT 5
46033: EQUAL
46034: PUSH
46035: LD_VAR 0 3
46039: PPUSH
46040: CALL_OW 257
46044: PUSH
46045: LD_INT 1
46047: EQUAL
46048: AND
46049: PUSH
46050: LD_VAR 0 3
46054: PPUSH
46055: CALL_OW 459
46059: NOT
46060: AND
46061: PUSH
46062: LD_VAR 0 7
46066: AND
46067: IFFALSE 46083
// ComChangeProfession ( j , class ) ;
46069: LD_VAR 0 3
46073: PPUSH
46074: LD_VAR 0 7
46078: PPUSH
46079: CALL_OW 123
46083: GO 46013
46085: POP
46086: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
46087: LD_EXP 122
46091: PUSH
46092: LD_VAR 0 2
46096: ARRAY
46097: PUSH
46098: LD_EXP 121
46102: PUSH
46103: LD_VAR 0 2
46107: ARRAY
46108: NOT
46109: AND
46110: PUSH
46111: LD_EXP 99
46115: PUSH
46116: LD_VAR 0 2
46120: ARRAY
46121: PPUSH
46122: LD_INT 30
46124: PUSH
46125: LD_INT 32
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PPUSH
46132: CALL_OW 72
46136: NOT
46137: AND
46138: PUSH
46139: LD_EXP 99
46143: PUSH
46144: LD_VAR 0 2
46148: ARRAY
46149: PPUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 30
46155: PUSH
46156: LD_INT 4
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 30
46165: PUSH
46166: LD_INT 5
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: PPUSH
46178: CALL_OW 72
46182: NOT
46183: AND
46184: IFFALSE 46316
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46186: LD_ADDR_VAR 0 4
46190: PUSH
46191: LD_EXP 99
46195: PUSH
46196: LD_VAR 0 2
46200: ARRAY
46201: PPUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 25
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 25
46217: PUSH
46218: LD_INT 5
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 25
46227: PUSH
46228: LD_INT 8
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 25
46237: PUSH
46238: LD_INT 9
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: PPUSH
46252: CALL_OW 72
46256: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
46257: LD_ADDR_VAR 0 4
46261: PUSH
46262: LD_VAR 0 4
46266: PUSH
46267: LD_VAR 0 4
46271: PPUSH
46272: LD_INT 18
46274: PPUSH
46275: CALL 99538 0 2
46279: DIFF
46280: ST_TO_ADDR
// if tmp then
46281: LD_VAR 0 4
46285: IFFALSE 46316
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
46287: LD_VAR 0 2
46291: PPUSH
46292: LD_VAR 0 4
46296: PPUSH
46297: LD_EXP 124
46301: PUSH
46302: LD_VAR 0 2
46306: ARRAY
46307: PPUSH
46308: CALL 61240 0 3
// exit ;
46312: POP
46313: POP
46314: GO 46411
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
46316: LD_EXP 122
46320: PUSH
46321: LD_VAR 0 2
46325: ARRAY
46326: PUSH
46327: LD_EXP 121
46331: PUSH
46332: LD_VAR 0 2
46336: ARRAY
46337: AND
46338: IFFALSE 46407
// begin tmp := mc_defender [ i ] ;
46340: LD_ADDR_VAR 0 4
46344: PUSH
46345: LD_EXP 121
46349: PUSH
46350: LD_VAR 0 2
46354: ARRAY
46355: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46356: LD_ADDR_EXP 121
46360: PUSH
46361: LD_EXP 121
46365: PPUSH
46366: LD_VAR 0 2
46370: PPUSH
46371: EMPTY
46372: PPUSH
46373: CALL_OW 1
46377: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
46378: LD_VAR 0 2
46382: PPUSH
46383: LD_VAR 0 4
46387: PPUSH
46388: LD_EXP 122
46392: PUSH
46393: LD_VAR 0 2
46397: ARRAY
46398: PPUSH
46399: CALL 61738 0 3
// exit ;
46403: POP
46404: POP
46405: GO 46411
// end ; end ;
46407: GO 45822
46409: POP
46410: POP
// end ;
46411: LD_VAR 0 1
46415: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
46416: LD_INT 0
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
// if not mc_bases then
46429: LD_EXP 99
46433: NOT
46434: IFFALSE 46438
// exit ;
46436: GO 47525
// for i = 1 to mc_bases do
46438: LD_ADDR_VAR 0 2
46442: PUSH
46443: DOUBLE
46444: LD_INT 1
46446: DEC
46447: ST_TO_ADDR
46448: LD_EXP 99
46452: PUSH
46453: FOR_TO
46454: IFFALSE 47523
// begin tmp := mc_lab [ i ] ;
46456: LD_ADDR_VAR 0 6
46460: PUSH
46461: LD_EXP 132
46465: PUSH
46466: LD_VAR 0 2
46470: ARRAY
46471: ST_TO_ADDR
// if not tmp then
46472: LD_VAR 0 6
46476: NOT
46477: IFFALSE 46481
// continue ;
46479: GO 46453
// idle_lab := 0 ;
46481: LD_ADDR_VAR 0 11
46485: PUSH
46486: LD_INT 0
46488: ST_TO_ADDR
// for j in tmp do
46489: LD_ADDR_VAR 0 3
46493: PUSH
46494: LD_VAR 0 6
46498: PUSH
46499: FOR_IN
46500: IFFALSE 47519
// begin researching := false ;
46502: LD_ADDR_VAR 0 10
46506: PUSH
46507: LD_INT 0
46509: ST_TO_ADDR
// side := GetSide ( j ) ;
46510: LD_ADDR_VAR 0 4
46514: PUSH
46515: LD_VAR 0 3
46519: PPUSH
46520: CALL_OW 255
46524: ST_TO_ADDR
// if not mc_tech [ side ] then
46525: LD_EXP 126
46529: PUSH
46530: LD_VAR 0 4
46534: ARRAY
46535: NOT
46536: IFFALSE 46540
// continue ;
46538: GO 46499
// if BuildingStatus ( j ) = bs_idle then
46540: LD_VAR 0 3
46544: PPUSH
46545: CALL_OW 461
46549: PUSH
46550: LD_INT 2
46552: EQUAL
46553: IFFALSE 46741
// begin if idle_lab and UnitsInside ( j ) < 6 then
46555: LD_VAR 0 11
46559: PUSH
46560: LD_VAR 0 3
46564: PPUSH
46565: CALL_OW 313
46569: PUSH
46570: LD_INT 6
46572: LESS
46573: AND
46574: IFFALSE 46645
// begin tmp2 := UnitsInside ( idle_lab ) ;
46576: LD_ADDR_VAR 0 9
46580: PUSH
46581: LD_VAR 0 11
46585: PPUSH
46586: CALL_OW 313
46590: ST_TO_ADDR
// if tmp2 then
46591: LD_VAR 0 9
46595: IFFALSE 46637
// for x in tmp2 do
46597: LD_ADDR_VAR 0 7
46601: PUSH
46602: LD_VAR 0 9
46606: PUSH
46607: FOR_IN
46608: IFFALSE 46635
// begin ComExitBuilding ( x ) ;
46610: LD_VAR 0 7
46614: PPUSH
46615: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
46619: LD_VAR 0 7
46623: PPUSH
46624: LD_VAR 0 3
46628: PPUSH
46629: CALL_OW 180
// end ;
46633: GO 46607
46635: POP
46636: POP
// idle_lab := 0 ;
46637: LD_ADDR_VAR 0 11
46641: PUSH
46642: LD_INT 0
46644: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
46645: LD_ADDR_VAR 0 5
46649: PUSH
46650: LD_EXP 126
46654: PUSH
46655: LD_VAR 0 4
46659: ARRAY
46660: PUSH
46661: FOR_IN
46662: IFFALSE 46722
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
46664: LD_VAR 0 3
46668: PPUSH
46669: LD_VAR 0 5
46673: PPUSH
46674: CALL_OW 430
46678: PUSH
46679: LD_VAR 0 4
46683: PPUSH
46684: LD_VAR 0 5
46688: PPUSH
46689: CALL 60310 0 2
46693: AND
46694: IFFALSE 46720
// begin researching := true ;
46696: LD_ADDR_VAR 0 10
46700: PUSH
46701: LD_INT 1
46703: ST_TO_ADDR
// ComResearch ( j , t ) ;
46704: LD_VAR 0 3
46708: PPUSH
46709: LD_VAR 0 5
46713: PPUSH
46714: CALL_OW 124
// break ;
46718: GO 46722
// end ;
46720: GO 46661
46722: POP
46723: POP
// if not researching then
46724: LD_VAR 0 10
46728: NOT
46729: IFFALSE 46741
// idle_lab := j ;
46731: LD_ADDR_VAR 0 11
46735: PUSH
46736: LD_VAR 0 3
46740: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
46741: LD_VAR 0 3
46745: PPUSH
46746: CALL_OW 461
46750: PUSH
46751: LD_INT 10
46753: EQUAL
46754: IFFALSE 47342
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
46756: LD_EXP 128
46760: PUSH
46761: LD_VAR 0 2
46765: ARRAY
46766: NOT
46767: PUSH
46768: LD_EXP 129
46772: PUSH
46773: LD_VAR 0 2
46777: ARRAY
46778: NOT
46779: AND
46780: PUSH
46781: LD_EXP 126
46785: PUSH
46786: LD_VAR 0 4
46790: ARRAY
46791: PUSH
46792: LD_INT 1
46794: GREATER
46795: AND
46796: IFFALSE 46927
// begin ComCancel ( j ) ;
46798: LD_VAR 0 3
46802: PPUSH
46803: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
46807: LD_ADDR_EXP 126
46811: PUSH
46812: LD_EXP 126
46816: PPUSH
46817: LD_VAR 0 4
46821: PPUSH
46822: LD_EXP 126
46826: PUSH
46827: LD_VAR 0 4
46831: ARRAY
46832: PPUSH
46833: LD_EXP 126
46837: PUSH
46838: LD_VAR 0 4
46842: ARRAY
46843: PUSH
46844: LD_INT 1
46846: MINUS
46847: PPUSH
46848: LD_EXP 126
46852: PUSH
46853: LD_VAR 0 4
46857: ARRAY
46858: PPUSH
46859: LD_INT 0
46861: PPUSH
46862: CALL 65759 0 4
46866: PPUSH
46867: CALL_OW 1
46871: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
46872: LD_ADDR_EXP 126
46876: PUSH
46877: LD_EXP 126
46881: PPUSH
46882: LD_VAR 0 4
46886: PPUSH
46887: LD_EXP 126
46891: PUSH
46892: LD_VAR 0 4
46896: ARRAY
46897: PPUSH
46898: LD_EXP 126
46902: PUSH
46903: LD_VAR 0 4
46907: ARRAY
46908: PPUSH
46909: LD_INT 1
46911: PPUSH
46912: LD_INT 0
46914: PPUSH
46915: CALL 65759 0 4
46919: PPUSH
46920: CALL_OW 1
46924: ST_TO_ADDR
// continue ;
46925: GO 46499
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
46927: LD_EXP 128
46931: PUSH
46932: LD_VAR 0 2
46936: ARRAY
46937: PUSH
46938: LD_EXP 129
46942: PUSH
46943: LD_VAR 0 2
46947: ARRAY
46948: NOT
46949: AND
46950: IFFALSE 47077
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
46952: LD_ADDR_EXP 129
46956: PUSH
46957: LD_EXP 129
46961: PPUSH
46962: LD_VAR 0 2
46966: PUSH
46967: LD_EXP 129
46971: PUSH
46972: LD_VAR 0 2
46976: ARRAY
46977: PUSH
46978: LD_INT 1
46980: PLUS
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PPUSH
46986: LD_EXP 128
46990: PUSH
46991: LD_VAR 0 2
46995: ARRAY
46996: PUSH
46997: LD_INT 1
46999: ARRAY
47000: PPUSH
47001: CALL 66341 0 3
47005: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
47006: LD_EXP 128
47010: PUSH
47011: LD_VAR 0 2
47015: ARRAY
47016: PUSH
47017: LD_INT 1
47019: ARRAY
47020: PPUSH
47021: LD_INT 112
47023: PPUSH
47024: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
47028: LD_ADDR_VAR 0 9
47032: PUSH
47033: LD_EXP 128
47037: PUSH
47038: LD_VAR 0 2
47042: ARRAY
47043: PPUSH
47044: LD_INT 1
47046: PPUSH
47047: CALL_OW 3
47051: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
47052: LD_ADDR_EXP 128
47056: PUSH
47057: LD_EXP 128
47061: PPUSH
47062: LD_VAR 0 2
47066: PPUSH
47067: LD_VAR 0 9
47071: PPUSH
47072: CALL_OW 1
47076: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
47077: LD_EXP 128
47081: PUSH
47082: LD_VAR 0 2
47086: ARRAY
47087: PUSH
47088: LD_EXP 129
47092: PUSH
47093: LD_VAR 0 2
47097: ARRAY
47098: AND
47099: PUSH
47100: LD_EXP 129
47104: PUSH
47105: LD_VAR 0 2
47109: ARRAY
47110: PUSH
47111: LD_INT 1
47113: ARRAY
47114: PPUSH
47115: CALL_OW 310
47119: NOT
47120: AND
47121: PUSH
47122: LD_VAR 0 3
47126: PPUSH
47127: CALL_OW 313
47131: PUSH
47132: LD_INT 6
47134: EQUAL
47135: AND
47136: IFFALSE 47192
// begin tmp2 := UnitsInside ( j ) ;
47138: LD_ADDR_VAR 0 9
47142: PUSH
47143: LD_VAR 0 3
47147: PPUSH
47148: CALL_OW 313
47152: ST_TO_ADDR
// if tmp2 = 6 then
47153: LD_VAR 0 9
47157: PUSH
47158: LD_INT 6
47160: EQUAL
47161: IFFALSE 47192
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
47163: LD_VAR 0 9
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: PPUSH
47172: LD_INT 112
47174: PPUSH
47175: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
47179: LD_VAR 0 9
47183: PUSH
47184: LD_INT 1
47186: ARRAY
47187: PPUSH
47188: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
47192: LD_EXP 129
47196: PUSH
47197: LD_VAR 0 2
47201: ARRAY
47202: PUSH
47203: LD_EXP 129
47207: PUSH
47208: LD_VAR 0 2
47212: ARRAY
47213: PUSH
47214: LD_INT 1
47216: ARRAY
47217: PPUSH
47218: CALL_OW 314
47222: NOT
47223: AND
47224: PUSH
47225: LD_EXP 129
47229: PUSH
47230: LD_VAR 0 2
47234: ARRAY
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PPUSH
47240: CALL_OW 310
47244: NOT
47245: AND
47246: IFFALSE 47272
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
47248: LD_EXP 129
47252: PUSH
47253: LD_VAR 0 2
47257: ARRAY
47258: PUSH
47259: LD_INT 1
47261: ARRAY
47262: PPUSH
47263: LD_VAR 0 3
47267: PPUSH
47268: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
47272: LD_EXP 129
47276: PUSH
47277: LD_VAR 0 2
47281: ARRAY
47282: PUSH
47283: LD_INT 1
47285: ARRAY
47286: PPUSH
47287: CALL_OW 310
47291: PUSH
47292: LD_EXP 129
47296: PUSH
47297: LD_VAR 0 2
47301: ARRAY
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: PPUSH
47307: CALL_OW 310
47311: PPUSH
47312: CALL_OW 461
47316: PUSH
47317: LD_INT 3
47319: NONEQUAL
47320: AND
47321: IFFALSE 47342
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
47323: LD_EXP 129
47327: PUSH
47328: LD_VAR 0 2
47332: ARRAY
47333: PUSH
47334: LD_INT 1
47336: ARRAY
47337: PPUSH
47338: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
47342: LD_VAR 0 3
47346: PPUSH
47347: CALL_OW 461
47351: PUSH
47352: LD_INT 6
47354: EQUAL
47355: PUSH
47356: LD_VAR 0 6
47360: PUSH
47361: LD_INT 1
47363: GREATER
47364: AND
47365: IFFALSE 47517
// begin sci := [ ] ;
47367: LD_ADDR_VAR 0 8
47371: PUSH
47372: EMPTY
47373: ST_TO_ADDR
// for x in ( tmp diff j ) do
47374: LD_ADDR_VAR 0 7
47378: PUSH
47379: LD_VAR 0 6
47383: PUSH
47384: LD_VAR 0 3
47388: DIFF
47389: PUSH
47390: FOR_IN
47391: IFFALSE 47443
// begin if sci = 6 then
47393: LD_VAR 0 8
47397: PUSH
47398: LD_INT 6
47400: EQUAL
47401: IFFALSE 47405
// break ;
47403: GO 47443
// if BuildingStatus ( x ) = bs_idle then
47405: LD_VAR 0 7
47409: PPUSH
47410: CALL_OW 461
47414: PUSH
47415: LD_INT 2
47417: EQUAL
47418: IFFALSE 47441
// sci := sci ^ UnitsInside ( x ) ;
47420: LD_ADDR_VAR 0 8
47424: PUSH
47425: LD_VAR 0 8
47429: PUSH
47430: LD_VAR 0 7
47434: PPUSH
47435: CALL_OW 313
47439: ADD
47440: ST_TO_ADDR
// end ;
47441: GO 47390
47443: POP
47444: POP
// if not sci then
47445: LD_VAR 0 8
47449: NOT
47450: IFFALSE 47454
// continue ;
47452: GO 46499
// for x in sci do
47454: LD_ADDR_VAR 0 7
47458: PUSH
47459: LD_VAR 0 8
47463: PUSH
47464: FOR_IN
47465: IFFALSE 47515
// if IsInUnit ( x ) and not HasTask ( x ) then
47467: LD_VAR 0 7
47471: PPUSH
47472: CALL_OW 310
47476: PUSH
47477: LD_VAR 0 7
47481: PPUSH
47482: CALL_OW 314
47486: NOT
47487: AND
47488: IFFALSE 47513
// begin ComExitBuilding ( x ) ;
47490: LD_VAR 0 7
47494: PPUSH
47495: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
47499: LD_VAR 0 7
47503: PPUSH
47504: LD_VAR 0 3
47508: PPUSH
47509: CALL_OW 180
// end ;
47513: GO 47464
47515: POP
47516: POP
// end ; end ;
47517: GO 46499
47519: POP
47520: POP
// end ;
47521: GO 46453
47523: POP
47524: POP
// end ;
47525: LD_VAR 0 1
47529: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
47530: LD_INT 0
47532: PPUSH
47533: PPUSH
// if not mc_bases then
47534: LD_EXP 99
47538: NOT
47539: IFFALSE 47543
// exit ;
47541: GO 47624
// for i = 1 to mc_bases do
47543: LD_ADDR_VAR 0 2
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_EXP 99
47557: PUSH
47558: FOR_TO
47559: IFFALSE 47622
// if mc_mines [ i ] and mc_miners [ i ] then
47561: LD_EXP 112
47565: PUSH
47566: LD_VAR 0 2
47570: ARRAY
47571: PUSH
47572: LD_EXP 113
47576: PUSH
47577: LD_VAR 0 2
47581: ARRAY
47582: AND
47583: IFFALSE 47620
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47585: LD_EXP 113
47589: PUSH
47590: LD_VAR 0 2
47594: ARRAY
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: PPUSH
47600: CALL_OW 255
47604: PPUSH
47605: LD_EXP 112
47609: PUSH
47610: LD_VAR 0 2
47614: ARRAY
47615: PPUSH
47616: CALL 63398 0 2
47620: GO 47558
47622: POP
47623: POP
// end ;
47624: LD_VAR 0 1
47628: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
47629: LD_INT 0
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
// if not mc_bases or not mc_parking then
47639: LD_EXP 99
47643: NOT
47644: PUSH
47645: LD_EXP 123
47649: NOT
47650: OR
47651: IFFALSE 47655
// exit ;
47653: GO 48367
// for i = 1 to mc_bases do
47655: LD_ADDR_VAR 0 2
47659: PUSH
47660: DOUBLE
47661: LD_INT 1
47663: DEC
47664: ST_TO_ADDR
47665: LD_EXP 99
47669: PUSH
47670: FOR_TO
47671: IFFALSE 48365
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
47673: LD_EXP 99
47677: PUSH
47678: LD_VAR 0 2
47682: ARRAY
47683: NOT
47684: PUSH
47685: LD_EXP 123
47689: PUSH
47690: LD_VAR 0 2
47694: ARRAY
47695: NOT
47696: OR
47697: IFFALSE 47701
// continue ;
47699: GO 47670
// if mc_scan [ i ] then
47701: LD_EXP 122
47705: PUSH
47706: LD_VAR 0 2
47710: ARRAY
47711: IFFALSE 47737
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
47713: LD_ADDR_EXP 111
47717: PUSH
47718: LD_EXP 111
47722: PPUSH
47723: LD_VAR 0 2
47727: PPUSH
47728: EMPTY
47729: PPUSH
47730: CALL_OW 1
47734: ST_TO_ADDR
// continue ;
47735: GO 47670
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
47737: LD_ADDR_VAR 0 5
47741: PUSH
47742: LD_EXP 99
47746: PUSH
47747: LD_VAR 0 2
47751: ARRAY
47752: PUSH
47753: LD_INT 1
47755: ARRAY
47756: PPUSH
47757: CALL_OW 255
47761: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47762: LD_ADDR_VAR 0 6
47766: PUSH
47767: LD_EXP 99
47771: PUSH
47772: LD_VAR 0 2
47776: ARRAY
47777: PPUSH
47778: LD_INT 30
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PPUSH
47788: CALL_OW 72
47792: ST_TO_ADDR
// if not fac then
47793: LD_VAR 0 6
47797: NOT
47798: IFFALSE 47849
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47800: LD_ADDR_VAR 0 6
47804: PUSH
47805: LD_EXP 99
47809: PUSH
47810: LD_VAR 0 2
47814: ARRAY
47815: PPUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 30
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 30
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: PPUSH
47844: CALL_OW 72
47848: ST_TO_ADDR
// if not fac then
47849: LD_VAR 0 6
47853: NOT
47854: IFFALSE 47858
// continue ;
47856: GO 47670
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47858: LD_ADDR_VAR 0 7
47862: PUSH
47863: LD_EXP 123
47867: PUSH
47868: LD_VAR 0 2
47872: ARRAY
47873: PPUSH
47874: LD_INT 22
47876: PUSH
47877: LD_VAR 0 5
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 21
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 24
47901: PUSH
47902: LD_INT 1000
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: PPUSH
47918: CALL_OW 70
47922: PUSH
47923: LD_INT 22
47925: PUSH
47926: LD_VAR 0 5
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 91
47937: PUSH
47938: LD_VAR 0 6
47942: PUSH
47943: LD_INT 1
47945: ARRAY
47946: PUSH
47947: LD_INT 25
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 21
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: LD_INT 24
47970: PUSH
47971: LD_INT 1000
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: PPUSH
47988: CALL_OW 69
47992: UNION
47993: ST_TO_ADDR
// if not vehs then
47994: LD_VAR 0 7
47998: NOT
47999: IFFALSE 48025
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
48001: LD_ADDR_EXP 111
48005: PUSH
48006: LD_EXP 111
48010: PPUSH
48011: LD_VAR 0 2
48015: PPUSH
48016: EMPTY
48017: PPUSH
48018: CALL_OW 1
48022: ST_TO_ADDR
// continue ;
48023: GO 47670
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48025: LD_ADDR_VAR 0 8
48029: PUSH
48030: LD_EXP 99
48034: PUSH
48035: LD_VAR 0 2
48039: ARRAY
48040: PPUSH
48041: LD_INT 30
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PPUSH
48051: CALL_OW 72
48055: ST_TO_ADDR
// if tmp then
48056: LD_VAR 0 8
48060: IFFALSE 48163
// begin for j in tmp do
48062: LD_ADDR_VAR 0 3
48066: PUSH
48067: LD_VAR 0 8
48071: PUSH
48072: FOR_IN
48073: IFFALSE 48161
// for k in UnitsInside ( j ) do
48075: LD_ADDR_VAR 0 4
48079: PUSH
48080: LD_VAR 0 3
48084: PPUSH
48085: CALL_OW 313
48089: PUSH
48090: FOR_IN
48091: IFFALSE 48157
// if k then
48093: LD_VAR 0 4
48097: IFFALSE 48155
// if not k in mc_repair_vehicle [ i ] then
48099: LD_VAR 0 4
48103: PUSH
48104: LD_EXP 111
48108: PUSH
48109: LD_VAR 0 2
48113: ARRAY
48114: IN
48115: NOT
48116: IFFALSE 48155
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
48118: LD_ADDR_EXP 111
48122: PUSH
48123: LD_EXP 111
48127: PPUSH
48128: LD_VAR 0 2
48132: PPUSH
48133: LD_EXP 111
48137: PUSH
48138: LD_VAR 0 2
48142: ARRAY
48143: PUSH
48144: LD_VAR 0 4
48148: UNION
48149: PPUSH
48150: CALL_OW 1
48154: ST_TO_ADDR
48155: GO 48090
48157: POP
48158: POP
48159: GO 48072
48161: POP
48162: POP
// end ; if not mc_repair_vehicle [ i ] then
48163: LD_EXP 111
48167: PUSH
48168: LD_VAR 0 2
48172: ARRAY
48173: NOT
48174: IFFALSE 48178
// continue ;
48176: GO 47670
// for j in mc_repair_vehicle [ i ] do
48178: LD_ADDR_VAR 0 3
48182: PUSH
48183: LD_EXP 111
48187: PUSH
48188: LD_VAR 0 2
48192: ARRAY
48193: PUSH
48194: FOR_IN
48195: IFFALSE 48361
// begin if GetClass ( j ) <> 3 then
48197: LD_VAR 0 3
48201: PPUSH
48202: CALL_OW 257
48206: PUSH
48207: LD_INT 3
48209: NONEQUAL
48210: IFFALSE 48251
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
48212: LD_ADDR_EXP 111
48216: PUSH
48217: LD_EXP 111
48221: PPUSH
48222: LD_VAR 0 2
48226: PPUSH
48227: LD_EXP 111
48231: PUSH
48232: LD_VAR 0 2
48236: ARRAY
48237: PUSH
48238: LD_VAR 0 3
48242: DIFF
48243: PPUSH
48244: CALL_OW 1
48248: ST_TO_ADDR
// continue ;
48249: GO 48194
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
48251: LD_VAR 0 3
48255: PPUSH
48256: CALL_OW 311
48260: NOT
48261: PUSH
48262: LD_VAR 0 3
48266: PUSH
48267: LD_EXP 102
48271: PUSH
48272: LD_VAR 0 2
48276: ARRAY
48277: PUSH
48278: LD_INT 1
48280: ARRAY
48281: IN
48282: NOT
48283: AND
48284: PUSH
48285: LD_VAR 0 3
48289: PUSH
48290: LD_EXP 102
48294: PUSH
48295: LD_VAR 0 2
48299: ARRAY
48300: PUSH
48301: LD_INT 2
48303: ARRAY
48304: IN
48305: NOT
48306: AND
48307: IFFALSE 48359
// begin if IsInUnit ( j ) then
48309: LD_VAR 0 3
48313: PPUSH
48314: CALL_OW 310
48318: IFFALSE 48329
// ComExitBuilding ( j ) ;
48320: LD_VAR 0 3
48324: PPUSH
48325: CALL_OW 122
// if not HasTask ( j ) then
48329: LD_VAR 0 3
48333: PPUSH
48334: CALL_OW 314
48338: NOT
48339: IFFALSE 48359
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
48341: LD_VAR 0 3
48345: PPUSH
48346: LD_VAR 0 7
48350: PUSH
48351: LD_INT 1
48353: ARRAY
48354: PPUSH
48355: CALL_OW 189
// end ; end ;
48359: GO 48194
48361: POP
48362: POP
// end ;
48363: GO 47670
48365: POP
48366: POP
// end ;
48367: LD_VAR 0 1
48371: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
48372: LD_INT 0
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
// if not mc_bases then
48385: LD_EXP 99
48389: NOT
48390: IFFALSE 48394
// exit ;
48392: GO 49196
// for i = 1 to mc_bases do
48394: LD_ADDR_VAR 0 2
48398: PUSH
48399: DOUBLE
48400: LD_INT 1
48402: DEC
48403: ST_TO_ADDR
48404: LD_EXP 99
48408: PUSH
48409: FOR_TO
48410: IFFALSE 49194
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
48412: LD_EXP 127
48416: PUSH
48417: LD_VAR 0 2
48421: ARRAY
48422: NOT
48423: PUSH
48424: LD_EXP 102
48428: PUSH
48429: LD_VAR 0 2
48433: ARRAY
48434: PUSH
48435: LD_INT 1
48437: ARRAY
48438: OR
48439: PUSH
48440: LD_EXP 102
48444: PUSH
48445: LD_VAR 0 2
48449: ARRAY
48450: PUSH
48451: LD_INT 2
48453: ARRAY
48454: OR
48455: PUSH
48456: LD_EXP 125
48460: PUSH
48461: LD_VAR 0 2
48465: ARRAY
48466: PPUSH
48467: LD_INT 1
48469: PPUSH
48470: CALL_OW 325
48474: NOT
48475: OR
48476: PUSH
48477: LD_EXP 122
48481: PUSH
48482: LD_VAR 0 2
48486: ARRAY
48487: OR
48488: IFFALSE 48492
// continue ;
48490: GO 48409
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
48492: LD_ADDR_VAR 0 8
48496: PUSH
48497: LD_EXP 99
48501: PUSH
48502: LD_VAR 0 2
48506: ARRAY
48507: PPUSH
48508: LD_INT 25
48510: PUSH
48511: LD_INT 4
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 50
48520: PUSH
48521: EMPTY
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 60
48529: PUSH
48530: EMPTY
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: PPUSH
48542: CALL_OW 72
48546: PUSH
48547: LD_EXP 103
48551: PUSH
48552: LD_VAR 0 2
48556: ARRAY
48557: DIFF
48558: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48559: LD_ADDR_VAR 0 9
48563: PUSH
48564: LD_EXP 99
48568: PUSH
48569: LD_VAR 0 2
48573: ARRAY
48574: PPUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 30
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 30
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: PPUSH
48603: CALL_OW 72
48607: ST_TO_ADDR
// if not tmp or not dep then
48608: LD_VAR 0 8
48612: NOT
48613: PUSH
48614: LD_VAR 0 9
48618: NOT
48619: OR
48620: IFFALSE 48624
// continue ;
48622: GO 48409
// side := GetSide ( tmp [ 1 ] ) ;
48624: LD_ADDR_VAR 0 11
48628: PUSH
48629: LD_VAR 0 8
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: PPUSH
48638: CALL_OW 255
48642: ST_TO_ADDR
// dep := dep [ 1 ] ;
48643: LD_ADDR_VAR 0 9
48647: PUSH
48648: LD_VAR 0 9
48652: PUSH
48653: LD_INT 1
48655: ARRAY
48656: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
48657: LD_ADDR_VAR 0 7
48661: PUSH
48662: LD_EXP 127
48666: PUSH
48667: LD_VAR 0 2
48671: ARRAY
48672: PPUSH
48673: LD_INT 22
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 25
48685: PUSH
48686: LD_INT 12
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PPUSH
48697: CALL_OW 70
48701: PUSH
48702: LD_INT 22
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 25
48714: PUSH
48715: LD_INT 12
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 91
48724: PUSH
48725: LD_VAR 0 9
48729: PUSH
48730: LD_INT 20
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: PPUSH
48743: CALL_OW 69
48747: UNION
48748: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
48749: LD_ADDR_VAR 0 10
48753: PUSH
48754: LD_EXP 127
48758: PUSH
48759: LD_VAR 0 2
48763: ARRAY
48764: PPUSH
48765: LD_INT 81
48767: PUSH
48768: LD_VAR 0 11
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PPUSH
48777: CALL_OW 70
48781: ST_TO_ADDR
// if not apes or danger_at_area then
48782: LD_VAR 0 7
48786: NOT
48787: PUSH
48788: LD_VAR 0 10
48792: OR
48793: IFFALSE 48843
// begin if mc_taming [ i ] then
48795: LD_EXP 130
48799: PUSH
48800: LD_VAR 0 2
48804: ARRAY
48805: IFFALSE 48841
// begin MC_Reset ( i , 121 ) ;
48807: LD_VAR 0 2
48811: PPUSH
48812: LD_INT 121
48814: PPUSH
48815: CALL 34801 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48819: LD_ADDR_EXP 130
48823: PUSH
48824: LD_EXP 130
48828: PPUSH
48829: LD_VAR 0 2
48833: PPUSH
48834: EMPTY
48835: PPUSH
48836: CALL_OW 1
48840: ST_TO_ADDR
// end ; continue ;
48841: GO 48409
// end ; for j in tmp do
48843: LD_ADDR_VAR 0 3
48847: PUSH
48848: LD_VAR 0 8
48852: PUSH
48853: FOR_IN
48854: IFFALSE 49190
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
48856: LD_VAR 0 3
48860: PUSH
48861: LD_EXP 130
48865: PUSH
48866: LD_VAR 0 2
48870: ARRAY
48871: IN
48872: NOT
48873: PUSH
48874: LD_EXP 130
48878: PUSH
48879: LD_VAR 0 2
48883: ARRAY
48884: PUSH
48885: LD_INT 3
48887: LESS
48888: AND
48889: IFFALSE 48947
// begin SetTag ( j , 121 ) ;
48891: LD_VAR 0 3
48895: PPUSH
48896: LD_INT 121
48898: PPUSH
48899: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
48903: LD_ADDR_EXP 130
48907: PUSH
48908: LD_EXP 130
48912: PPUSH
48913: LD_VAR 0 2
48917: PUSH
48918: LD_EXP 130
48922: PUSH
48923: LD_VAR 0 2
48927: ARRAY
48928: PUSH
48929: LD_INT 1
48931: PLUS
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PPUSH
48937: LD_VAR 0 3
48941: PPUSH
48942: CALL 66341 0 3
48946: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
48947: LD_VAR 0 3
48951: PUSH
48952: LD_EXP 130
48956: PUSH
48957: LD_VAR 0 2
48961: ARRAY
48962: IN
48963: IFFALSE 49188
// begin if GetClass ( j ) <> 4 then
48965: LD_VAR 0 3
48969: PPUSH
48970: CALL_OW 257
48974: PUSH
48975: LD_INT 4
48977: NONEQUAL
48978: IFFALSE 49031
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
48980: LD_ADDR_EXP 130
48984: PUSH
48985: LD_EXP 130
48989: PPUSH
48990: LD_VAR 0 2
48994: PPUSH
48995: LD_EXP 130
48999: PUSH
49000: LD_VAR 0 2
49004: ARRAY
49005: PUSH
49006: LD_VAR 0 3
49010: DIFF
49011: PPUSH
49012: CALL_OW 1
49016: ST_TO_ADDR
// SetTag ( j , 0 ) ;
49017: LD_VAR 0 3
49021: PPUSH
49022: LD_INT 0
49024: PPUSH
49025: CALL_OW 109
// continue ;
49029: GO 48853
// end ; if IsInUnit ( j ) then
49031: LD_VAR 0 3
49035: PPUSH
49036: CALL_OW 310
49040: IFFALSE 49051
// ComExitBuilding ( j ) ;
49042: LD_VAR 0 3
49046: PPUSH
49047: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
49051: LD_ADDR_VAR 0 6
49055: PUSH
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_VAR 0 3
49065: PPUSH
49066: CALL_OW 74
49070: ST_TO_ADDR
// if not ape then
49071: LD_VAR 0 6
49075: NOT
49076: IFFALSE 49080
// break ;
49078: GO 49190
// x := GetX ( ape ) ;
49080: LD_ADDR_VAR 0 4
49084: PUSH
49085: LD_VAR 0 6
49089: PPUSH
49090: CALL_OW 250
49094: ST_TO_ADDR
// y := GetY ( ape ) ;
49095: LD_ADDR_VAR 0 5
49099: PUSH
49100: LD_VAR 0 6
49104: PPUSH
49105: CALL_OW 251
49109: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49110: LD_VAR 0 4
49114: PPUSH
49115: LD_VAR 0 5
49119: PPUSH
49120: CALL_OW 488
49124: NOT
49125: PUSH
49126: LD_VAR 0 11
49130: PPUSH
49131: LD_VAR 0 4
49135: PPUSH
49136: LD_VAR 0 5
49140: PPUSH
49141: LD_INT 20
49143: PPUSH
49144: CALL 67237 0 4
49148: PUSH
49149: LD_INT 4
49151: ARRAY
49152: OR
49153: IFFALSE 49157
// break ;
49155: GO 49190
// if not HasTask ( j ) then
49157: LD_VAR 0 3
49161: PPUSH
49162: CALL_OW 314
49166: NOT
49167: IFFALSE 49188
// ComTameXY ( j , x , y ) ;
49169: LD_VAR 0 3
49173: PPUSH
49174: LD_VAR 0 4
49178: PPUSH
49179: LD_VAR 0 5
49183: PPUSH
49184: CALL_OW 131
// end ; end ;
49188: GO 48853
49190: POP
49191: POP
// end ;
49192: GO 48409
49194: POP
49195: POP
// end ;
49196: LD_VAR 0 1
49200: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
49201: LD_INT 0
49203: PPUSH
49204: PPUSH
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
49210: PPUSH
// if not mc_bases then
49211: LD_EXP 99
49215: NOT
49216: IFFALSE 49220
// exit ;
49218: GO 49846
// for i = 1 to mc_bases do
49220: LD_ADDR_VAR 0 2
49224: PUSH
49225: DOUBLE
49226: LD_INT 1
49228: DEC
49229: ST_TO_ADDR
49230: LD_EXP 99
49234: PUSH
49235: FOR_TO
49236: IFFALSE 49844
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
49238: LD_EXP 128
49242: PUSH
49243: LD_VAR 0 2
49247: ARRAY
49248: NOT
49249: PUSH
49250: LD_EXP 128
49254: PUSH
49255: LD_VAR 0 2
49259: ARRAY
49260: PPUSH
49261: LD_INT 25
49263: PUSH
49264: LD_INT 12
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PPUSH
49271: CALL_OW 72
49275: NOT
49276: OR
49277: IFFALSE 49281
// continue ;
49279: GO 49235
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
49281: LD_ADDR_VAR 0 5
49285: PUSH
49286: LD_EXP 128
49290: PUSH
49291: LD_VAR 0 2
49295: ARRAY
49296: PUSH
49297: LD_INT 1
49299: ARRAY
49300: PPUSH
49301: CALL_OW 255
49305: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
49306: LD_VAR 0 5
49310: PPUSH
49311: LD_INT 2
49313: PPUSH
49314: CALL_OW 325
49318: IFFALSE 49571
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49320: LD_ADDR_VAR 0 4
49324: PUSH
49325: LD_EXP 128
49329: PUSH
49330: LD_VAR 0 2
49334: ARRAY
49335: PPUSH
49336: LD_INT 25
49338: PUSH
49339: LD_INT 16
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PPUSH
49346: CALL_OW 72
49350: ST_TO_ADDR
// if tmp < 6 then
49351: LD_VAR 0 4
49355: PUSH
49356: LD_INT 6
49358: LESS
49359: IFFALSE 49571
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49361: LD_ADDR_VAR 0 6
49365: PUSH
49366: LD_EXP 99
49370: PUSH
49371: LD_VAR 0 2
49375: ARRAY
49376: PPUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 30
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 30
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: PPUSH
49405: CALL_OW 72
49409: ST_TO_ADDR
// if depot then
49410: LD_VAR 0 6
49414: IFFALSE 49571
// begin selected := 0 ;
49416: LD_ADDR_VAR 0 7
49420: PUSH
49421: LD_INT 0
49423: ST_TO_ADDR
// for j in depot do
49424: LD_ADDR_VAR 0 3
49428: PUSH
49429: LD_VAR 0 6
49433: PUSH
49434: FOR_IN
49435: IFFALSE 49466
// begin if UnitsInside ( j ) < 6 then
49437: LD_VAR 0 3
49441: PPUSH
49442: CALL_OW 313
49446: PUSH
49447: LD_INT 6
49449: LESS
49450: IFFALSE 49464
// begin selected := j ;
49452: LD_ADDR_VAR 0 7
49456: PUSH
49457: LD_VAR 0 3
49461: ST_TO_ADDR
// break ;
49462: GO 49466
// end ; end ;
49464: GO 49434
49466: POP
49467: POP
// if selected then
49468: LD_VAR 0 7
49472: IFFALSE 49571
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49474: LD_ADDR_VAR 0 3
49478: PUSH
49479: LD_EXP 128
49483: PUSH
49484: LD_VAR 0 2
49488: ARRAY
49489: PPUSH
49490: LD_INT 25
49492: PUSH
49493: LD_INT 12
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PPUSH
49500: CALL_OW 72
49504: PUSH
49505: FOR_IN
49506: IFFALSE 49569
// if not HasTask ( j ) then
49508: LD_VAR 0 3
49512: PPUSH
49513: CALL_OW 314
49517: NOT
49518: IFFALSE 49567
// begin if not IsInUnit ( j ) then
49520: LD_VAR 0 3
49524: PPUSH
49525: CALL_OW 310
49529: NOT
49530: IFFALSE 49546
// ComEnterUnit ( j , selected ) ;
49532: LD_VAR 0 3
49536: PPUSH
49537: LD_VAR 0 7
49541: PPUSH
49542: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
49546: LD_VAR 0 3
49550: PPUSH
49551: LD_INT 16
49553: PPUSH
49554: CALL_OW 183
// AddComExitBuilding ( j ) ;
49558: LD_VAR 0 3
49562: PPUSH
49563: CALL_OW 182
// end ;
49567: GO 49505
49569: POP
49570: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
49571: LD_VAR 0 5
49575: PPUSH
49576: LD_INT 11
49578: PPUSH
49579: CALL_OW 325
49583: IFFALSE 49842
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49585: LD_ADDR_VAR 0 4
49589: PUSH
49590: LD_EXP 128
49594: PUSH
49595: LD_VAR 0 2
49599: ARRAY
49600: PPUSH
49601: LD_INT 25
49603: PUSH
49604: LD_INT 16
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PPUSH
49611: CALL_OW 72
49615: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
49616: LD_VAR 0 4
49620: PUSH
49621: LD_INT 6
49623: GREATEREQUAL
49624: PUSH
49625: LD_VAR 0 5
49629: PPUSH
49630: LD_INT 2
49632: PPUSH
49633: CALL_OW 325
49637: NOT
49638: OR
49639: IFFALSE 49842
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49641: LD_ADDR_VAR 0 8
49645: PUSH
49646: LD_EXP 99
49650: PUSH
49651: LD_VAR 0 2
49655: ARRAY
49656: PPUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 30
49662: PUSH
49663: LD_INT 4
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 30
49672: PUSH
49673: LD_INT 5
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: PPUSH
49685: CALL_OW 72
49689: ST_TO_ADDR
// if barracks then
49690: LD_VAR 0 8
49694: IFFALSE 49842
// begin selected := 0 ;
49696: LD_ADDR_VAR 0 7
49700: PUSH
49701: LD_INT 0
49703: ST_TO_ADDR
// for j in barracks do
49704: LD_ADDR_VAR 0 3
49708: PUSH
49709: LD_VAR 0 8
49713: PUSH
49714: FOR_IN
49715: IFFALSE 49746
// begin if UnitsInside ( j ) < 6 then
49717: LD_VAR 0 3
49721: PPUSH
49722: CALL_OW 313
49726: PUSH
49727: LD_INT 6
49729: LESS
49730: IFFALSE 49744
// begin selected := j ;
49732: LD_ADDR_VAR 0 7
49736: PUSH
49737: LD_VAR 0 3
49741: ST_TO_ADDR
// break ;
49742: GO 49746
// end ; end ;
49744: GO 49714
49746: POP
49747: POP
// if selected then
49748: LD_VAR 0 7
49752: IFFALSE 49842
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49754: LD_ADDR_VAR 0 3
49758: PUSH
49759: LD_EXP 128
49763: PUSH
49764: LD_VAR 0 2
49768: ARRAY
49769: PPUSH
49770: LD_INT 25
49772: PUSH
49773: LD_INT 12
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PPUSH
49780: CALL_OW 72
49784: PUSH
49785: FOR_IN
49786: IFFALSE 49840
// if not IsInUnit ( j ) and not HasTask ( j ) then
49788: LD_VAR 0 3
49792: PPUSH
49793: CALL_OW 310
49797: NOT
49798: PUSH
49799: LD_VAR 0 3
49803: PPUSH
49804: CALL_OW 314
49808: NOT
49809: AND
49810: IFFALSE 49838
// begin ComEnterUnit ( j , selected ) ;
49812: LD_VAR 0 3
49816: PPUSH
49817: LD_VAR 0 7
49821: PPUSH
49822: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
49826: LD_VAR 0 3
49830: PPUSH
49831: LD_INT 15
49833: PPUSH
49834: CALL_OW 183
// end ;
49838: GO 49785
49840: POP
49841: POP
// end ; end ; end ; end ; end ;
49842: GO 49235
49844: POP
49845: POP
// end ;
49846: LD_VAR 0 1
49850: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
49851: LD_INT 0
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
// if not mc_bases then
49857: LD_EXP 99
49861: NOT
49862: IFFALSE 49866
// exit ;
49864: GO 50044
// for i = 1 to mc_bases do
49866: LD_ADDR_VAR 0 2
49870: PUSH
49871: DOUBLE
49872: LD_INT 1
49874: DEC
49875: ST_TO_ADDR
49876: LD_EXP 99
49880: PUSH
49881: FOR_TO
49882: IFFALSE 50042
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
49884: LD_ADDR_VAR 0 4
49888: PUSH
49889: LD_EXP 99
49893: PUSH
49894: LD_VAR 0 2
49898: ARRAY
49899: PPUSH
49900: LD_INT 25
49902: PUSH
49903: LD_INT 9
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PPUSH
49910: CALL_OW 72
49914: ST_TO_ADDR
// if not tmp then
49915: LD_VAR 0 4
49919: NOT
49920: IFFALSE 49924
// continue ;
49922: GO 49881
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
49924: LD_EXP 125
49928: PUSH
49929: LD_VAR 0 2
49933: ARRAY
49934: PPUSH
49935: LD_INT 29
49937: PPUSH
49938: CALL_OW 325
49942: NOT
49943: PUSH
49944: LD_EXP 125
49948: PUSH
49949: LD_VAR 0 2
49953: ARRAY
49954: PPUSH
49955: LD_INT 28
49957: PPUSH
49958: CALL_OW 325
49962: NOT
49963: AND
49964: IFFALSE 49968
// continue ;
49966: GO 49881
// for j in tmp do
49968: LD_ADDR_VAR 0 3
49972: PUSH
49973: LD_VAR 0 4
49977: PUSH
49978: FOR_IN
49979: IFFALSE 50038
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
49981: LD_VAR 0 3
49985: PUSH
49986: LD_EXP 102
49990: PUSH
49991: LD_VAR 0 2
49995: ARRAY
49996: PUSH
49997: LD_INT 1
49999: ARRAY
50000: IN
50001: NOT
50002: PUSH
50003: LD_VAR 0 3
50007: PUSH
50008: LD_EXP 102
50012: PUSH
50013: LD_VAR 0 2
50017: ARRAY
50018: PUSH
50019: LD_INT 2
50021: ARRAY
50022: IN
50023: NOT
50024: AND
50025: IFFALSE 50036
// ComSpaceTimeShoot ( j ) ;
50027: LD_VAR 0 3
50031: PPUSH
50032: CALL 60401 0 1
50036: GO 49978
50038: POP
50039: POP
// end ;
50040: GO 49881
50042: POP
50043: POP
// end ;
50044: LD_VAR 0 1
50048: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
50049: LD_INT 0
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
// if not mc_bases then
50060: LD_EXP 99
50064: NOT
50065: IFFALSE 50069
// exit ;
50067: GO 50691
// for i = 1 to mc_bases do
50069: LD_ADDR_VAR 0 2
50073: PUSH
50074: DOUBLE
50075: LD_INT 1
50077: DEC
50078: ST_TO_ADDR
50079: LD_EXP 99
50083: PUSH
50084: FOR_TO
50085: IFFALSE 50689
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
50087: LD_EXP 134
50091: PUSH
50092: LD_VAR 0 2
50096: ARRAY
50097: NOT
50098: PUSH
50099: LD_INT 38
50101: PPUSH
50102: LD_EXP 125
50106: PUSH
50107: LD_VAR 0 2
50111: ARRAY
50112: PPUSH
50113: CALL_OW 321
50117: PUSH
50118: LD_INT 2
50120: NONEQUAL
50121: OR
50122: IFFALSE 50126
// continue ;
50124: GO 50084
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
50126: LD_ADDR_VAR 0 8
50130: PUSH
50131: LD_EXP 99
50135: PUSH
50136: LD_VAR 0 2
50140: ARRAY
50141: PPUSH
50142: LD_INT 30
50144: PUSH
50145: LD_INT 34
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PPUSH
50152: CALL_OW 72
50156: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
50157: LD_ADDR_VAR 0 9
50161: PUSH
50162: LD_EXP 99
50166: PUSH
50167: LD_VAR 0 2
50171: ARRAY
50172: PPUSH
50173: LD_INT 25
50175: PUSH
50176: LD_INT 4
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PPUSH
50183: CALL_OW 72
50187: PPUSH
50188: LD_INT 0
50190: PPUSH
50191: CALL 99538 0 2
50195: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
50196: LD_VAR 0 9
50200: NOT
50201: PUSH
50202: LD_VAR 0 8
50206: NOT
50207: OR
50208: PUSH
50209: LD_EXP 99
50213: PUSH
50214: LD_VAR 0 2
50218: ARRAY
50219: PPUSH
50220: LD_INT 124
50222: PPUSH
50223: CALL 99538 0 2
50227: OR
50228: IFFALSE 50232
// continue ;
50230: GO 50084
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
50232: LD_EXP 135
50236: PUSH
50237: LD_VAR 0 2
50241: ARRAY
50242: PUSH
50243: LD_EXP 134
50247: PUSH
50248: LD_VAR 0 2
50252: ARRAY
50253: LESS
50254: PUSH
50255: LD_EXP 135
50259: PUSH
50260: LD_VAR 0 2
50264: ARRAY
50265: PUSH
50266: LD_VAR 0 8
50270: LESS
50271: AND
50272: IFFALSE 50687
// begin tmp := sci [ 1 ] ;
50274: LD_ADDR_VAR 0 7
50278: PUSH
50279: LD_VAR 0 9
50283: PUSH
50284: LD_INT 1
50286: ARRAY
50287: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
50288: LD_VAR 0 7
50292: PPUSH
50293: LD_INT 124
50295: PPUSH
50296: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
50300: LD_ADDR_VAR 0 3
50304: PUSH
50305: DOUBLE
50306: LD_EXP 134
50310: PUSH
50311: LD_VAR 0 2
50315: ARRAY
50316: INC
50317: ST_TO_ADDR
50318: LD_EXP 134
50322: PUSH
50323: LD_VAR 0 2
50327: ARRAY
50328: PUSH
50329: FOR_DOWNTO
50330: IFFALSE 50673
// begin if IsInUnit ( tmp ) then
50332: LD_VAR 0 7
50336: PPUSH
50337: CALL_OW 310
50341: IFFALSE 50352
// ComExitBuilding ( tmp ) ;
50343: LD_VAR 0 7
50347: PPUSH
50348: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
50352: LD_INT 35
50354: PPUSH
50355: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
50359: LD_VAR 0 7
50363: PPUSH
50364: CALL_OW 310
50368: NOT
50369: PUSH
50370: LD_VAR 0 7
50374: PPUSH
50375: CALL_OW 314
50379: NOT
50380: AND
50381: IFFALSE 50352
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
50383: LD_ADDR_VAR 0 6
50387: PUSH
50388: LD_VAR 0 7
50392: PPUSH
50393: CALL_OW 250
50397: PUSH
50398: LD_VAR 0 7
50402: PPUSH
50403: CALL_OW 251
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50412: LD_INT 35
50414: PPUSH
50415: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
50419: LD_ADDR_VAR 0 4
50423: PUSH
50424: LD_EXP 134
50428: PUSH
50429: LD_VAR 0 2
50433: ARRAY
50434: PUSH
50435: LD_VAR 0 3
50439: ARRAY
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
50445: LD_ADDR_VAR 0 5
50449: PUSH
50450: LD_EXP 134
50454: PUSH
50455: LD_VAR 0 2
50459: ARRAY
50460: PUSH
50461: LD_VAR 0 3
50465: ARRAY
50466: PUSH
50467: LD_INT 2
50469: ARRAY
50470: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
50471: LD_VAR 0 7
50475: PPUSH
50476: LD_INT 10
50478: PPUSH
50479: CALL 68934 0 2
50483: PUSH
50484: LD_INT 4
50486: ARRAY
50487: IFFALSE 50525
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
50489: LD_VAR 0 7
50493: PPUSH
50494: LD_VAR 0 6
50498: PUSH
50499: LD_INT 1
50501: ARRAY
50502: PPUSH
50503: LD_VAR 0 6
50507: PUSH
50508: LD_INT 2
50510: ARRAY
50511: PPUSH
50512: CALL_OW 111
// wait ( 0 0$10 ) ;
50516: LD_INT 350
50518: PPUSH
50519: CALL_OW 67
// end else
50523: GO 50551
// begin ComMoveXY ( tmp , x , y ) ;
50525: LD_VAR 0 7
50529: PPUSH
50530: LD_VAR 0 4
50534: PPUSH
50535: LD_VAR 0 5
50539: PPUSH
50540: CALL_OW 111
// wait ( 0 0$3 ) ;
50544: LD_INT 105
50546: PPUSH
50547: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
50551: LD_VAR 0 7
50555: PPUSH
50556: LD_VAR 0 4
50560: PPUSH
50561: LD_VAR 0 5
50565: PPUSH
50566: CALL_OW 307
50570: IFFALSE 50412
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
50572: LD_VAR 0 7
50576: PPUSH
50577: LD_VAR 0 4
50581: PPUSH
50582: LD_VAR 0 5
50586: PPUSH
50587: LD_VAR 0 8
50591: PUSH
50592: LD_VAR 0 3
50596: ARRAY
50597: PPUSH
50598: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
50602: LD_INT 35
50604: PPUSH
50605: CALL_OW 67
// until not HasTask ( tmp ) ;
50609: LD_VAR 0 7
50613: PPUSH
50614: CALL_OW 314
50618: NOT
50619: IFFALSE 50602
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
50621: LD_ADDR_EXP 135
50625: PUSH
50626: LD_EXP 135
50630: PPUSH
50631: LD_VAR 0 2
50635: PUSH
50636: LD_EXP 135
50640: PUSH
50641: LD_VAR 0 2
50645: ARRAY
50646: PUSH
50647: LD_INT 1
50649: PLUS
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PPUSH
50655: LD_VAR 0 8
50659: PUSH
50660: LD_VAR 0 3
50664: ARRAY
50665: PPUSH
50666: CALL 66341 0 3
50670: ST_TO_ADDR
// end ;
50671: GO 50329
50673: POP
50674: POP
// MC_Reset ( i , 124 ) ;
50675: LD_VAR 0 2
50679: PPUSH
50680: LD_INT 124
50682: PPUSH
50683: CALL 34801 0 2
// end ; end ;
50687: GO 50084
50689: POP
50690: POP
// end ;
50691: LD_VAR 0 1
50695: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
50696: LD_INT 0
50698: PPUSH
50699: PPUSH
50700: PPUSH
// if not mc_bases then
50701: LD_EXP 99
50705: NOT
50706: IFFALSE 50710
// exit ;
50708: GO 51316
// for i = 1 to mc_bases do
50710: LD_ADDR_VAR 0 2
50714: PUSH
50715: DOUBLE
50716: LD_INT 1
50718: DEC
50719: ST_TO_ADDR
50720: LD_EXP 99
50724: PUSH
50725: FOR_TO
50726: IFFALSE 51314
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50728: LD_ADDR_VAR 0 3
50732: PUSH
50733: LD_EXP 99
50737: PUSH
50738: LD_VAR 0 2
50742: ARRAY
50743: PPUSH
50744: LD_INT 25
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PPUSH
50754: CALL_OW 72
50758: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
50759: LD_VAR 0 3
50763: NOT
50764: PUSH
50765: LD_EXP 136
50769: PUSH
50770: LD_VAR 0 2
50774: ARRAY
50775: NOT
50776: OR
50777: PUSH
50778: LD_EXP 99
50782: PUSH
50783: LD_VAR 0 2
50787: ARRAY
50788: PPUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 30
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 30
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: PPUSH
50817: CALL_OW 72
50821: NOT
50822: OR
50823: IFFALSE 50873
// begin if mc_deposits_finder [ i ] then
50825: LD_EXP 137
50829: PUSH
50830: LD_VAR 0 2
50834: ARRAY
50835: IFFALSE 50871
// begin MC_Reset ( i , 125 ) ;
50837: LD_VAR 0 2
50841: PPUSH
50842: LD_INT 125
50844: PPUSH
50845: CALL 34801 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50849: LD_ADDR_EXP 137
50853: PUSH
50854: LD_EXP 137
50858: PPUSH
50859: LD_VAR 0 2
50863: PPUSH
50864: EMPTY
50865: PPUSH
50866: CALL_OW 1
50870: ST_TO_ADDR
// end ; continue ;
50871: GO 50725
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
50873: LD_EXP 136
50877: PUSH
50878: LD_VAR 0 2
50882: ARRAY
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PUSH
50888: LD_INT 3
50890: ARRAY
50891: PUSH
50892: LD_INT 1
50894: EQUAL
50895: PUSH
50896: LD_INT 20
50898: PPUSH
50899: LD_EXP 125
50903: PUSH
50904: LD_VAR 0 2
50908: ARRAY
50909: PPUSH
50910: CALL_OW 321
50914: PUSH
50915: LD_INT 2
50917: NONEQUAL
50918: AND
50919: IFFALSE 50969
// begin if mc_deposits_finder [ i ] then
50921: LD_EXP 137
50925: PUSH
50926: LD_VAR 0 2
50930: ARRAY
50931: IFFALSE 50967
// begin MC_Reset ( i , 125 ) ;
50933: LD_VAR 0 2
50937: PPUSH
50938: LD_INT 125
50940: PPUSH
50941: CALL 34801 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50945: LD_ADDR_EXP 137
50949: PUSH
50950: LD_EXP 137
50954: PPUSH
50955: LD_VAR 0 2
50959: PPUSH
50960: EMPTY
50961: PPUSH
50962: CALL_OW 1
50966: ST_TO_ADDR
// end ; continue ;
50967: GO 50725
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
50969: LD_EXP 136
50973: PUSH
50974: LD_VAR 0 2
50978: ARRAY
50979: PUSH
50980: LD_INT 1
50982: ARRAY
50983: PUSH
50984: LD_INT 1
50986: ARRAY
50987: PPUSH
50988: LD_EXP 136
50992: PUSH
50993: LD_VAR 0 2
50997: ARRAY
50998: PUSH
50999: LD_INT 1
51001: ARRAY
51002: PUSH
51003: LD_INT 2
51005: ARRAY
51006: PPUSH
51007: LD_EXP 125
51011: PUSH
51012: LD_VAR 0 2
51016: ARRAY
51017: PPUSH
51018: CALL_OW 440
51022: IFFALSE 51065
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
51024: LD_ADDR_EXP 136
51028: PUSH
51029: LD_EXP 136
51033: PPUSH
51034: LD_VAR 0 2
51038: PPUSH
51039: LD_EXP 136
51043: PUSH
51044: LD_VAR 0 2
51048: ARRAY
51049: PPUSH
51050: LD_INT 1
51052: PPUSH
51053: CALL_OW 3
51057: PPUSH
51058: CALL_OW 1
51062: ST_TO_ADDR
51063: GO 51312
// begin if not mc_deposits_finder [ i ] then
51065: LD_EXP 137
51069: PUSH
51070: LD_VAR 0 2
51074: ARRAY
51075: NOT
51076: IFFALSE 51128
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
51078: LD_ADDR_EXP 137
51082: PUSH
51083: LD_EXP 137
51087: PPUSH
51088: LD_VAR 0 2
51092: PPUSH
51093: LD_VAR 0 3
51097: PUSH
51098: LD_INT 1
51100: ARRAY
51101: PUSH
51102: EMPTY
51103: LIST
51104: PPUSH
51105: CALL_OW 1
51109: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
51110: LD_VAR 0 3
51114: PUSH
51115: LD_INT 1
51117: ARRAY
51118: PPUSH
51119: LD_INT 125
51121: PPUSH
51122: CALL_OW 109
// end else
51126: GO 51312
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
51128: LD_EXP 137
51132: PUSH
51133: LD_VAR 0 2
51137: ARRAY
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PPUSH
51143: CALL_OW 310
51147: IFFALSE 51170
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
51149: LD_EXP 137
51153: PUSH
51154: LD_VAR 0 2
51158: ARRAY
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: PPUSH
51164: CALL_OW 122
51168: GO 51312
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
51170: LD_EXP 137
51174: PUSH
51175: LD_VAR 0 2
51179: ARRAY
51180: PUSH
51181: LD_INT 1
51183: ARRAY
51184: PPUSH
51185: CALL_OW 314
51189: NOT
51190: PUSH
51191: LD_EXP 137
51195: PUSH
51196: LD_VAR 0 2
51200: ARRAY
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: PPUSH
51206: LD_EXP 136
51210: PUSH
51211: LD_VAR 0 2
51215: ARRAY
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: PUSH
51221: LD_INT 1
51223: ARRAY
51224: PPUSH
51225: LD_EXP 136
51229: PUSH
51230: LD_VAR 0 2
51234: ARRAY
51235: PUSH
51236: LD_INT 1
51238: ARRAY
51239: PUSH
51240: LD_INT 2
51242: ARRAY
51243: PPUSH
51244: CALL_OW 297
51248: PUSH
51249: LD_INT 6
51251: GREATER
51252: AND
51253: IFFALSE 51312
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
51255: LD_EXP 137
51259: PUSH
51260: LD_VAR 0 2
51264: ARRAY
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: PPUSH
51270: LD_EXP 136
51274: PUSH
51275: LD_VAR 0 2
51279: ARRAY
51280: PUSH
51281: LD_INT 1
51283: ARRAY
51284: PUSH
51285: LD_INT 1
51287: ARRAY
51288: PPUSH
51289: LD_EXP 136
51293: PUSH
51294: LD_VAR 0 2
51298: ARRAY
51299: PUSH
51300: LD_INT 1
51302: ARRAY
51303: PUSH
51304: LD_INT 2
51306: ARRAY
51307: PPUSH
51308: CALL_OW 111
// end ; end ; end ;
51312: GO 50725
51314: POP
51315: POP
// end ;
51316: LD_VAR 0 1
51320: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
51321: LD_INT 0
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
// if not mc_bases then
51334: LD_EXP 99
51338: NOT
51339: IFFALSE 51343
// exit ;
51341: GO 52067
// for i = 1 to mc_bases do
51343: LD_ADDR_VAR 0 2
51347: PUSH
51348: DOUBLE
51349: LD_INT 1
51351: DEC
51352: ST_TO_ADDR
51353: LD_EXP 99
51357: PUSH
51358: FOR_TO
51359: IFFALSE 52065
// begin if not mc_bases [ i ] then
51361: LD_EXP 99
51365: PUSH
51366: LD_VAR 0 2
51370: ARRAY
51371: NOT
51372: IFFALSE 51376
// continue ;
51374: GO 51358
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
51376: LD_ADDR_VAR 0 7
51380: PUSH
51381: LD_EXP 99
51385: PUSH
51386: LD_VAR 0 2
51390: ARRAY
51391: PUSH
51392: LD_INT 1
51394: ARRAY
51395: PPUSH
51396: CALL_OW 248
51400: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
51401: LD_VAR 0 7
51405: PUSH
51406: LD_INT 3
51408: EQUAL
51409: PUSH
51410: LD_EXP 118
51414: PUSH
51415: LD_VAR 0 2
51419: ARRAY
51420: PUSH
51421: LD_EXP 121
51425: PUSH
51426: LD_VAR 0 2
51430: ARRAY
51431: UNION
51432: PPUSH
51433: LD_INT 33
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PPUSH
51443: CALL_OW 72
51447: NOT
51448: OR
51449: IFFALSE 51453
// continue ;
51451: GO 51358
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
51453: LD_ADDR_VAR 0 9
51457: PUSH
51458: LD_EXP 99
51462: PUSH
51463: LD_VAR 0 2
51467: ARRAY
51468: PPUSH
51469: LD_INT 30
51471: PUSH
51472: LD_INT 36
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PPUSH
51479: CALL_OW 72
51483: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
51484: LD_ADDR_VAR 0 10
51488: PUSH
51489: LD_EXP 118
51493: PUSH
51494: LD_VAR 0 2
51498: ARRAY
51499: PPUSH
51500: LD_INT 34
51502: PUSH
51503: LD_INT 31
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PPUSH
51510: CALL_OW 72
51514: ST_TO_ADDR
// if not cts and not mcts then
51515: LD_VAR 0 9
51519: NOT
51520: PUSH
51521: LD_VAR 0 10
51525: NOT
51526: AND
51527: IFFALSE 51531
// continue ;
51529: GO 51358
// x := cts ;
51531: LD_ADDR_VAR 0 11
51535: PUSH
51536: LD_VAR 0 9
51540: ST_TO_ADDR
// if not x then
51541: LD_VAR 0 11
51545: NOT
51546: IFFALSE 51558
// x := mcts ;
51548: LD_ADDR_VAR 0 11
51552: PUSH
51553: LD_VAR 0 10
51557: ST_TO_ADDR
// if mc_remote_driver [ i ] then
51558: LD_EXP 139
51562: PUSH
51563: LD_VAR 0 2
51567: ARRAY
51568: IFFALSE 51837
// for j in mc_remote_driver [ i ] do
51570: LD_ADDR_VAR 0 3
51574: PUSH
51575: LD_EXP 139
51579: PUSH
51580: LD_VAR 0 2
51584: ARRAY
51585: PUSH
51586: FOR_IN
51587: IFFALSE 51835
// begin if GetClass ( j ) <> 3 then
51589: LD_VAR 0 3
51593: PPUSH
51594: CALL_OW 257
51598: PUSH
51599: LD_INT 3
51601: NONEQUAL
51602: IFFALSE 51655
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
51604: LD_ADDR_EXP 139
51608: PUSH
51609: LD_EXP 139
51613: PPUSH
51614: LD_VAR 0 2
51618: PPUSH
51619: LD_EXP 139
51623: PUSH
51624: LD_VAR 0 2
51628: ARRAY
51629: PUSH
51630: LD_VAR 0 3
51634: DIFF
51635: PPUSH
51636: CALL_OW 1
51640: ST_TO_ADDR
// SetTag ( j , 0 ) ;
51641: LD_VAR 0 3
51645: PPUSH
51646: LD_INT 0
51648: PPUSH
51649: CALL_OW 109
// continue ;
51653: GO 51586
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
51655: LD_VAR 0 3
51659: PPUSH
51660: CALL_OW 310
51664: NOT
51665: PUSH
51666: LD_VAR 0 3
51670: PPUSH
51671: CALL_OW 310
51675: PPUSH
51676: CALL_OW 266
51680: PUSH
51681: LD_INT 36
51683: NONEQUAL
51684: PUSH
51685: LD_VAR 0 3
51689: PPUSH
51690: CALL 99626 0 1
51694: NOT
51695: AND
51696: OR
51697: IFFALSE 51833
// begin if IsInUnit ( j ) then
51699: LD_VAR 0 3
51703: PPUSH
51704: CALL_OW 310
51708: IFFALSE 51719
// ComExitBuilding ( j ) ;
51710: LD_VAR 0 3
51714: PPUSH
51715: CALL_OW 122
// ct := 0 ;
51719: LD_ADDR_VAR 0 8
51723: PUSH
51724: LD_INT 0
51726: ST_TO_ADDR
// for k in x do
51727: LD_ADDR_VAR 0 4
51731: PUSH
51732: LD_VAR 0 11
51736: PUSH
51737: FOR_IN
51738: IFFALSE 51811
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
51740: LD_VAR 0 4
51744: PPUSH
51745: CALL_OW 264
51749: PUSH
51750: LD_INT 31
51752: EQUAL
51753: PUSH
51754: LD_VAR 0 4
51758: PPUSH
51759: CALL_OW 311
51763: NOT
51764: AND
51765: PUSH
51766: LD_VAR 0 4
51770: PPUSH
51771: CALL_OW 266
51775: PUSH
51776: LD_INT 36
51778: EQUAL
51779: PUSH
51780: LD_VAR 0 4
51784: PPUSH
51785: CALL_OW 313
51789: PUSH
51790: LD_INT 3
51792: LESS
51793: AND
51794: OR
51795: IFFALSE 51809
// begin ct := k ;
51797: LD_ADDR_VAR 0 8
51801: PUSH
51802: LD_VAR 0 4
51806: ST_TO_ADDR
// break ;
51807: GO 51811
// end ;
51809: GO 51737
51811: POP
51812: POP
// if ct then
51813: LD_VAR 0 8
51817: IFFALSE 51833
// ComEnterUnit ( j , ct ) ;
51819: LD_VAR 0 3
51823: PPUSH
51824: LD_VAR 0 8
51828: PPUSH
51829: CALL_OW 120
// end ; end ;
51833: GO 51586
51835: POP
51836: POP
// places := 0 ;
51837: LD_ADDR_VAR 0 5
51841: PUSH
51842: LD_INT 0
51844: ST_TO_ADDR
// for j = 1 to x do
51845: LD_ADDR_VAR 0 3
51849: PUSH
51850: DOUBLE
51851: LD_INT 1
51853: DEC
51854: ST_TO_ADDR
51855: LD_VAR 0 11
51859: PUSH
51860: FOR_TO
51861: IFFALSE 51916
// if GetWeapon ( x [ j ] ) = ar_control_tower then
51863: LD_VAR 0 11
51867: PUSH
51868: LD_VAR 0 3
51872: ARRAY
51873: PPUSH
51874: CALL_OW 264
51878: PUSH
51879: LD_INT 31
51881: EQUAL
51882: IFFALSE 51900
// places := places + 1 else
51884: LD_ADDR_VAR 0 5
51888: PUSH
51889: LD_VAR 0 5
51893: PUSH
51894: LD_INT 1
51896: PLUS
51897: ST_TO_ADDR
51898: GO 51914
// places := places + 3 ;
51900: LD_ADDR_VAR 0 5
51904: PUSH
51905: LD_VAR 0 5
51909: PUSH
51910: LD_INT 3
51912: PLUS
51913: ST_TO_ADDR
51914: GO 51860
51916: POP
51917: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
51918: LD_ADDR_VAR 0 6
51922: PUSH
51923: LD_EXP 99
51927: PUSH
51928: LD_VAR 0 2
51932: ARRAY
51933: PPUSH
51934: LD_INT 25
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PPUSH
51944: CALL_OW 72
51948: PUSH
51949: LD_EXP 139
51953: PUSH
51954: LD_VAR 0 2
51958: ARRAY
51959: DIFF
51960: PPUSH
51961: LD_INT 3
51963: PPUSH
51964: CALL 100526 0 2
51968: ST_TO_ADDR
// if not tmp then
51969: LD_VAR 0 6
51973: NOT
51974: IFFALSE 51978
// continue ;
51976: GO 51358
// places := places - mc_remote_driver [ i ] ;
51978: LD_ADDR_VAR 0 5
51982: PUSH
51983: LD_VAR 0 5
51987: PUSH
51988: LD_EXP 139
51992: PUSH
51993: LD_VAR 0 2
51997: ARRAY
51998: MINUS
51999: ST_TO_ADDR
// if places then
52000: LD_VAR 0 5
52004: IFFALSE 52063
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
52006: LD_ADDR_EXP 139
52010: PUSH
52011: LD_EXP 139
52015: PPUSH
52016: LD_VAR 0 2
52020: PPUSH
52021: LD_EXP 139
52025: PUSH
52026: LD_VAR 0 2
52030: ARRAY
52031: PUSH
52032: LD_VAR 0 6
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: UNION
52041: PPUSH
52042: CALL_OW 1
52046: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
52047: LD_VAR 0 6
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PPUSH
52056: LD_INT 126
52058: PPUSH
52059: CALL_OW 109
// end ; end ;
52063: GO 51358
52065: POP
52066: POP
// end ;
52067: LD_VAR 0 1
52071: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
52072: LD_INT 0
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
52080: LD_VAR 0 1
52084: NOT
52085: PUSH
52086: LD_VAR 0 2
52090: NOT
52091: OR
52092: PUSH
52093: LD_VAR 0 3
52097: NOT
52098: OR
52099: PUSH
52100: LD_VAR 0 4
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: LD_INT 5
52119: PUSH
52120: LD_INT 8
52122: PUSH
52123: LD_INT 9
52125: PUSH
52126: LD_INT 15
52128: PUSH
52129: LD_INT 16
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: IN
52143: NOT
52144: OR
52145: IFFALSE 52149
// exit ;
52147: GO 53049
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
52149: LD_ADDR_VAR 0 2
52153: PUSH
52154: LD_VAR 0 2
52158: PPUSH
52159: LD_INT 21
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 24
52171: PUSH
52172: LD_INT 250
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PPUSH
52183: CALL_OW 72
52187: ST_TO_ADDR
// case class of 1 , 15 :
52188: LD_VAR 0 4
52192: PUSH
52193: LD_INT 1
52195: DOUBLE
52196: EQUAL
52197: IFTRUE 52207
52199: LD_INT 15
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52292
52207: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
52208: LD_ADDR_VAR 0 8
52212: PUSH
52213: LD_VAR 0 2
52217: PPUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 30
52223: PUSH
52224: LD_INT 32
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 30
52233: PUSH
52234: LD_INT 31
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: PPUSH
52246: CALL_OW 72
52250: PUSH
52251: LD_VAR 0 2
52255: PPUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 30
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 30
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: PPUSH
52284: CALL_OW 72
52288: ADD
52289: ST_TO_ADDR
52290: GO 52538
52292: LD_INT 2
52294: DOUBLE
52295: EQUAL
52296: IFTRUE 52306
52298: LD_INT 16
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52306
52304: GO 52352
52306: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
52307: LD_ADDR_VAR 0 8
52311: PUSH
52312: LD_VAR 0 2
52316: PPUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 30
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 30
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PPUSH
52345: CALL_OW 72
52349: ST_TO_ADDR
52350: GO 52538
52352: LD_INT 3
52354: DOUBLE
52355: EQUAL
52356: IFTRUE 52360
52358: GO 52406
52360: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52361: LD_ADDR_VAR 0 8
52365: PUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 30
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 30
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: PPUSH
52399: CALL_OW 72
52403: ST_TO_ADDR
52404: GO 52538
52406: LD_INT 4
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52414
52412: GO 52471
52414: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
52415: LD_ADDR_VAR 0 8
52419: PUSH
52420: LD_VAR 0 2
52424: PPUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 30
52430: PUSH
52431: LD_INT 6
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 30
52440: PUSH
52441: LD_INT 7
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 30
52450: PUSH
52451: LD_INT 8
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: PPUSH
52464: CALL_OW 72
52468: ST_TO_ADDR
52469: GO 52538
52471: LD_INT 5
52473: DOUBLE
52474: EQUAL
52475: IFTRUE 52491
52477: LD_INT 8
52479: DOUBLE
52480: EQUAL
52481: IFTRUE 52491
52483: LD_INT 9
52485: DOUBLE
52486: EQUAL
52487: IFTRUE 52491
52489: GO 52537
52491: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
52492: LD_ADDR_VAR 0 8
52496: PUSH
52497: LD_VAR 0 2
52501: PPUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 30
52507: PUSH
52508: LD_INT 4
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 30
52517: PUSH
52518: LD_INT 5
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: PPUSH
52530: CALL_OW 72
52534: ST_TO_ADDR
52535: GO 52538
52537: POP
// if not tmp then
52538: LD_VAR 0 8
52542: NOT
52543: IFFALSE 52547
// exit ;
52545: GO 53049
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
52547: LD_VAR 0 4
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 15
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: IN
52562: PUSH
52563: LD_EXP 108
52567: PUSH
52568: LD_VAR 0 1
52572: ARRAY
52573: AND
52574: IFFALSE 52730
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
52576: LD_ADDR_VAR 0 9
52580: PUSH
52581: LD_EXP 108
52585: PUSH
52586: LD_VAR 0 1
52590: ARRAY
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
52596: LD_VAR 0 9
52600: PUSH
52601: LD_EXP 109
52605: PUSH
52606: LD_VAR 0 1
52610: ARRAY
52611: IN
52612: NOT
52613: IFFALSE 52728
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
52615: LD_ADDR_EXP 109
52619: PUSH
52620: LD_EXP 109
52624: PPUSH
52625: LD_VAR 0 1
52629: PUSH
52630: LD_EXP 109
52634: PUSH
52635: LD_VAR 0 1
52639: ARRAY
52640: PUSH
52641: LD_INT 1
52643: PLUS
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PPUSH
52649: LD_VAR 0 9
52653: PPUSH
52654: CALL 66341 0 3
52658: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
52659: LD_ADDR_EXP 108
52663: PUSH
52664: LD_EXP 108
52668: PPUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: LD_EXP 108
52678: PUSH
52679: LD_VAR 0 1
52683: ARRAY
52684: PUSH
52685: LD_VAR 0 9
52689: DIFF
52690: PPUSH
52691: CALL_OW 1
52695: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
52696: LD_VAR 0 3
52700: PPUSH
52701: LD_EXP 109
52705: PUSH
52706: LD_VAR 0 1
52710: ARRAY
52711: PUSH
52712: LD_EXP 109
52716: PUSH
52717: LD_VAR 0 1
52721: ARRAY
52722: ARRAY
52723: PPUSH
52724: CALL_OW 120
// end ; exit ;
52728: GO 53049
// end ; if tmp > 1 then
52730: LD_VAR 0 8
52734: PUSH
52735: LD_INT 1
52737: GREATER
52738: IFFALSE 52842
// for i = 2 to tmp do
52740: LD_ADDR_VAR 0 6
52744: PUSH
52745: DOUBLE
52746: LD_INT 2
52748: DEC
52749: ST_TO_ADDR
52750: LD_VAR 0 8
52754: PUSH
52755: FOR_TO
52756: IFFALSE 52840
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
52758: LD_VAR 0 8
52762: PUSH
52763: LD_VAR 0 6
52767: ARRAY
52768: PPUSH
52769: CALL_OW 461
52773: PUSH
52774: LD_INT 6
52776: EQUAL
52777: IFFALSE 52838
// begin x := tmp [ i ] ;
52779: LD_ADDR_VAR 0 9
52783: PUSH
52784: LD_VAR 0 8
52788: PUSH
52789: LD_VAR 0 6
52793: ARRAY
52794: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
52795: LD_ADDR_VAR 0 8
52799: PUSH
52800: LD_VAR 0 8
52804: PPUSH
52805: LD_VAR 0 6
52809: PPUSH
52810: CALL_OW 3
52814: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
52815: LD_ADDR_VAR 0 8
52819: PUSH
52820: LD_VAR 0 8
52824: PPUSH
52825: LD_INT 1
52827: PPUSH
52828: LD_VAR 0 9
52832: PPUSH
52833: CALL_OW 2
52837: ST_TO_ADDR
// end ;
52838: GO 52755
52840: POP
52841: POP
// for i in tmp do
52842: LD_ADDR_VAR 0 6
52846: PUSH
52847: LD_VAR 0 8
52851: PUSH
52852: FOR_IN
52853: IFFALSE 52922
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
52855: LD_VAR 0 6
52859: PPUSH
52860: CALL_OW 313
52864: PUSH
52865: LD_INT 6
52867: LESS
52868: PUSH
52869: LD_VAR 0 6
52873: PPUSH
52874: CALL_OW 266
52878: PUSH
52879: LD_INT 31
52881: PUSH
52882: LD_INT 32
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: IN
52889: NOT
52890: AND
52891: PUSH
52892: LD_VAR 0 6
52896: PPUSH
52897: CALL_OW 313
52901: PUSH
52902: LD_INT 0
52904: EQUAL
52905: OR
52906: IFFALSE 52920
// begin j := i ;
52908: LD_ADDR_VAR 0 7
52912: PUSH
52913: LD_VAR 0 6
52917: ST_TO_ADDR
// break ;
52918: GO 52922
// end ; end ;
52920: GO 52852
52922: POP
52923: POP
// if j then
52924: LD_VAR 0 7
52928: IFFALSE 52946
// ComEnterUnit ( unit , j ) else
52930: LD_VAR 0 3
52934: PPUSH
52935: LD_VAR 0 7
52939: PPUSH
52940: CALL_OW 120
52944: GO 53049
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
52946: LD_ADDR_VAR 0 10
52950: PUSH
52951: LD_VAR 0 2
52955: PPUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 30
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 30
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PPUSH
52984: CALL_OW 72
52988: ST_TO_ADDR
// if depot then
52989: LD_VAR 0 10
52993: IFFALSE 53049
// begin depot := NearestUnitToUnit ( depot , unit ) ;
52995: LD_ADDR_VAR 0 10
52999: PUSH
53000: LD_VAR 0 10
53004: PPUSH
53005: LD_VAR 0 3
53009: PPUSH
53010: CALL_OW 74
53014: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
53015: LD_VAR 0 3
53019: PPUSH
53020: LD_VAR 0 10
53024: PPUSH
53025: CALL_OW 296
53029: PUSH
53030: LD_INT 10
53032: GREATER
53033: IFFALSE 53049
// ComStandNearbyBuilding ( unit , depot ) ;
53035: LD_VAR 0 3
53039: PPUSH
53040: LD_VAR 0 10
53044: PPUSH
53045: CALL 61018 0 2
// end ; end ; end ;
53049: LD_VAR 0 5
53053: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
53054: LD_INT 0
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
// if not mc_bases then
53060: LD_EXP 99
53064: NOT
53065: IFFALSE 53069
// exit ;
53067: GO 53308
// for i = 1 to mc_bases do
53069: LD_ADDR_VAR 0 2
53073: PUSH
53074: DOUBLE
53075: LD_INT 1
53077: DEC
53078: ST_TO_ADDR
53079: LD_EXP 99
53083: PUSH
53084: FOR_TO
53085: IFFALSE 53306
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
53087: LD_ADDR_VAR 0 4
53091: PUSH
53092: LD_EXP 99
53096: PUSH
53097: LD_VAR 0 2
53101: ARRAY
53102: PPUSH
53103: LD_INT 21
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PPUSH
53113: CALL_OW 72
53117: PUSH
53118: LD_EXP 128
53122: PUSH
53123: LD_VAR 0 2
53127: ARRAY
53128: UNION
53129: ST_TO_ADDR
// if not tmp then
53130: LD_VAR 0 4
53134: NOT
53135: IFFALSE 53139
// continue ;
53137: GO 53084
// for j in tmp do
53139: LD_ADDR_VAR 0 3
53143: PUSH
53144: LD_VAR 0 4
53148: PUSH
53149: FOR_IN
53150: IFFALSE 53302
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
53152: LD_VAR 0 3
53156: PPUSH
53157: CALL_OW 110
53161: NOT
53162: PUSH
53163: LD_VAR 0 3
53167: PPUSH
53168: CALL_OW 314
53172: NOT
53173: AND
53174: PUSH
53175: LD_VAR 0 3
53179: PPUSH
53180: CALL_OW 311
53184: NOT
53185: AND
53186: PUSH
53187: LD_VAR 0 3
53191: PPUSH
53192: CALL_OW 310
53196: NOT
53197: AND
53198: PUSH
53199: LD_VAR 0 3
53203: PUSH
53204: LD_EXP 102
53208: PUSH
53209: LD_VAR 0 2
53213: ARRAY
53214: PUSH
53215: LD_INT 1
53217: ARRAY
53218: IN
53219: NOT
53220: AND
53221: PUSH
53222: LD_VAR 0 3
53226: PUSH
53227: LD_EXP 102
53231: PUSH
53232: LD_VAR 0 2
53236: ARRAY
53237: PUSH
53238: LD_INT 2
53240: ARRAY
53241: IN
53242: NOT
53243: AND
53244: PUSH
53245: LD_VAR 0 3
53249: PUSH
53250: LD_EXP 111
53254: PUSH
53255: LD_VAR 0 2
53259: ARRAY
53260: IN
53261: NOT
53262: AND
53263: IFFALSE 53300
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
53265: LD_VAR 0 2
53269: PPUSH
53270: LD_EXP 99
53274: PUSH
53275: LD_VAR 0 2
53279: ARRAY
53280: PPUSH
53281: LD_VAR 0 3
53285: PPUSH
53286: LD_VAR 0 3
53290: PPUSH
53291: CALL_OW 257
53295: PPUSH
53296: CALL 52072 0 4
// end ;
53300: GO 53149
53302: POP
53303: POP
// end ;
53304: GO 53084
53306: POP
53307: POP
// end ;
53308: LD_VAR 0 1
53312: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
53313: LD_INT 0
53315: PPUSH
53316: PPUSH
53317: PPUSH
53318: PPUSH
53319: PPUSH
53320: PPUSH
// if not mc_bases [ base ] then
53321: LD_EXP 99
53325: PUSH
53326: LD_VAR 0 1
53330: ARRAY
53331: NOT
53332: IFFALSE 53336
// exit ;
53334: GO 53518
// tmp := [ ] ;
53336: LD_ADDR_VAR 0 6
53340: PUSH
53341: EMPTY
53342: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
53343: LD_ADDR_VAR 0 7
53347: PUSH
53348: LD_VAR 0 3
53352: PPUSH
53353: LD_INT 0
53355: PPUSH
53356: CALL_OW 517
53360: ST_TO_ADDR
// if not list then
53361: LD_VAR 0 7
53365: NOT
53366: IFFALSE 53370
// exit ;
53368: GO 53518
// for i = 1 to amount do
53370: LD_ADDR_VAR 0 5
53374: PUSH
53375: DOUBLE
53376: LD_INT 1
53378: DEC
53379: ST_TO_ADDR
53380: LD_VAR 0 2
53384: PUSH
53385: FOR_TO
53386: IFFALSE 53466
// begin x := rand ( 1 , list [ 1 ] ) ;
53388: LD_ADDR_VAR 0 8
53392: PUSH
53393: LD_INT 1
53395: PPUSH
53396: LD_VAR 0 7
53400: PUSH
53401: LD_INT 1
53403: ARRAY
53404: PPUSH
53405: CALL_OW 12
53409: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
53410: LD_ADDR_VAR 0 6
53414: PUSH
53415: LD_VAR 0 6
53419: PPUSH
53420: LD_VAR 0 5
53424: PPUSH
53425: LD_VAR 0 7
53429: PUSH
53430: LD_INT 1
53432: ARRAY
53433: PUSH
53434: LD_VAR 0 8
53438: ARRAY
53439: PUSH
53440: LD_VAR 0 7
53444: PUSH
53445: LD_INT 2
53447: ARRAY
53448: PUSH
53449: LD_VAR 0 8
53453: ARRAY
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PPUSH
53459: CALL_OW 1
53463: ST_TO_ADDR
// end ;
53464: GO 53385
53466: POP
53467: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
53468: LD_ADDR_EXP 112
53472: PUSH
53473: LD_EXP 112
53477: PPUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: LD_VAR 0 6
53487: PPUSH
53488: CALL_OW 1
53492: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
53493: LD_ADDR_EXP 114
53497: PUSH
53498: LD_EXP 114
53502: PPUSH
53503: LD_VAR 0 1
53507: PPUSH
53508: LD_VAR 0 3
53512: PPUSH
53513: CALL_OW 1
53517: ST_TO_ADDR
// end ;
53518: LD_VAR 0 4
53522: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
53523: LD_INT 0
53525: PPUSH
// if not mc_bases [ base ] then
53526: LD_EXP 99
53530: PUSH
53531: LD_VAR 0 1
53535: ARRAY
53536: NOT
53537: IFFALSE 53541
// exit ;
53539: GO 53566
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
53541: LD_ADDR_EXP 104
53545: PUSH
53546: LD_EXP 104
53550: PPUSH
53551: LD_VAR 0 1
53555: PPUSH
53556: LD_VAR 0 2
53560: PPUSH
53561: CALL_OW 1
53565: ST_TO_ADDR
// end ;
53566: LD_VAR 0 3
53570: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
53571: LD_INT 0
53573: PPUSH
// if not mc_bases [ base ] then
53574: LD_EXP 99
53578: PUSH
53579: LD_VAR 0 1
53583: ARRAY
53584: NOT
53585: IFFALSE 53589
// exit ;
53587: GO 53626
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
53589: LD_ADDR_EXP 104
53593: PUSH
53594: LD_EXP 104
53598: PPUSH
53599: LD_VAR 0 1
53603: PPUSH
53604: LD_EXP 104
53608: PUSH
53609: LD_VAR 0 1
53613: ARRAY
53614: PUSH
53615: LD_VAR 0 2
53619: UNION
53620: PPUSH
53621: CALL_OW 1
53625: ST_TO_ADDR
// end ;
53626: LD_VAR 0 3
53630: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
53631: LD_INT 0
53633: PPUSH
// if not mc_bases [ base ] then
53634: LD_EXP 99
53638: PUSH
53639: LD_VAR 0 1
53643: ARRAY
53644: NOT
53645: IFFALSE 53649
// exit ;
53647: GO 53674
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
53649: LD_ADDR_EXP 120
53653: PUSH
53654: LD_EXP 120
53658: PPUSH
53659: LD_VAR 0 1
53663: PPUSH
53664: LD_VAR 0 2
53668: PPUSH
53669: CALL_OW 1
53673: ST_TO_ADDR
// end ;
53674: LD_VAR 0 3
53678: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
53679: LD_INT 0
53681: PPUSH
// if not mc_bases [ base ] then
53682: LD_EXP 99
53686: PUSH
53687: LD_VAR 0 1
53691: ARRAY
53692: NOT
53693: IFFALSE 53697
// exit ;
53695: GO 53734
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
53697: LD_ADDR_EXP 120
53701: PUSH
53702: LD_EXP 120
53706: PPUSH
53707: LD_VAR 0 1
53711: PPUSH
53712: LD_EXP 120
53716: PUSH
53717: LD_VAR 0 1
53721: ARRAY
53722: PUSH
53723: LD_VAR 0 2
53727: UNION
53728: PPUSH
53729: CALL_OW 1
53733: ST_TO_ADDR
// end ;
53734: LD_VAR 0 3
53738: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53739: LD_INT 0
53741: PPUSH
// if not mc_bases [ base ] then
53742: LD_EXP 99
53746: PUSH
53747: LD_VAR 0 1
53751: ARRAY
53752: NOT
53753: IFFALSE 53757
// exit ;
53755: GO 53869
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53757: LD_ADDR_EXP 121
53761: PUSH
53762: LD_EXP 121
53766: PPUSH
53767: LD_VAR 0 1
53771: PPUSH
53772: LD_VAR 0 2
53776: PPUSH
53777: CALL_OW 1
53781: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
53782: LD_ADDR_EXP 110
53786: PUSH
53787: LD_EXP 110
53791: PPUSH
53792: LD_VAR 0 1
53796: PPUSH
53797: LD_VAR 0 2
53801: PUSH
53802: LD_INT 0
53804: PLUS
53805: PPUSH
53806: CALL_OW 1
53810: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
53811: LD_ADDR_EXP 118
53815: PUSH
53816: LD_EXP 118
53820: PPUSH
53821: LD_VAR 0 1
53825: PPUSH
53826: LD_EXP 118
53830: PUSH
53831: LD_VAR 0 1
53835: ARRAY
53836: PUSH
53837: LD_EXP 121
53841: PUSH
53842: LD_VAR 0 1
53846: ARRAY
53847: PPUSH
53848: LD_INT 21
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PPUSH
53858: CALL_OW 72
53862: UNION
53863: PPUSH
53864: CALL_OW 1
53868: ST_TO_ADDR
// end ;
53869: LD_VAR 0 3
53873: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
53874: LD_INT 0
53876: PPUSH
// if not mc_bases [ base ] then
53877: LD_EXP 99
53881: PUSH
53882: LD_VAR 0 1
53886: ARRAY
53887: NOT
53888: IFFALSE 53892
// exit ;
53890: GO 53917
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
53892: LD_ADDR_EXP 110
53896: PUSH
53897: LD_EXP 110
53901: PPUSH
53902: LD_VAR 0 1
53906: PPUSH
53907: LD_VAR 0 2
53911: PPUSH
53912: CALL_OW 1
53916: ST_TO_ADDR
// end ;
53917: LD_VAR 0 3
53921: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
53922: LD_INT 0
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
// if not mc_bases [ base ] then
53928: LD_EXP 99
53932: PUSH
53933: LD_VAR 0 1
53937: ARRAY
53938: NOT
53939: IFFALSE 53943
// exit ;
53941: GO 54008
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
53943: LD_ADDR_EXP 119
53947: PUSH
53948: LD_EXP 119
53952: PPUSH
53953: LD_VAR 0 1
53957: PUSH
53958: LD_EXP 119
53962: PUSH
53963: LD_VAR 0 1
53967: ARRAY
53968: PUSH
53969: LD_INT 1
53971: PLUS
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PPUSH
53977: LD_VAR 0 1
53981: PUSH
53982: LD_VAR 0 2
53986: PUSH
53987: LD_VAR 0 3
53991: PUSH
53992: LD_VAR 0 4
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: PPUSH
54003: CALL 66341 0 3
54007: ST_TO_ADDR
// end ;
54008: LD_VAR 0 5
54012: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
54013: LD_INT 0
54015: PPUSH
// if not mc_bases [ base ] then
54016: LD_EXP 99
54020: PUSH
54021: LD_VAR 0 1
54025: ARRAY
54026: NOT
54027: IFFALSE 54031
// exit ;
54029: GO 54056
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
54031: LD_ADDR_EXP 136
54035: PUSH
54036: LD_EXP 136
54040: PPUSH
54041: LD_VAR 0 1
54045: PPUSH
54046: LD_VAR 0 2
54050: PPUSH
54051: CALL_OW 1
54055: ST_TO_ADDR
// end ;
54056: LD_VAR 0 3
54060: RET
// export function MC_GetMinesField ( base ) ; begin
54061: LD_INT 0
54063: PPUSH
// result := mc_mines [ base ] ;
54064: LD_ADDR_VAR 0 2
54068: PUSH
54069: LD_EXP 112
54073: PUSH
54074: LD_VAR 0 1
54078: ARRAY
54079: ST_TO_ADDR
// end ;
54080: LD_VAR 0 2
54084: RET
// export function MC_GetProduceList ( base ) ; begin
54085: LD_INT 0
54087: PPUSH
// result := mc_produce [ base ] ;
54088: LD_ADDR_VAR 0 2
54092: PUSH
54093: LD_EXP 120
54097: PUSH
54098: LD_VAR 0 1
54102: ARRAY
54103: ST_TO_ADDR
// end ;
54104: LD_VAR 0 2
54108: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
54109: LD_INT 0
54111: PPUSH
54112: PPUSH
// if not mc_bases then
54113: LD_EXP 99
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54187
// if mc_bases [ base ] then
54122: LD_EXP 99
54126: PUSH
54127: LD_VAR 0 1
54131: ARRAY
54132: IFFALSE 54187
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
54134: LD_ADDR_VAR 0 3
54138: PUSH
54139: LD_EXP 99
54143: PUSH
54144: LD_VAR 0 1
54148: ARRAY
54149: PPUSH
54150: LD_INT 30
54152: PUSH
54153: LD_VAR 0 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PPUSH
54162: CALL_OW 72
54166: ST_TO_ADDR
// if result then
54167: LD_VAR 0 3
54171: IFFALSE 54187
// result := result [ 1 ] ;
54173: LD_ADDR_VAR 0 3
54177: PUSH
54178: LD_VAR 0 3
54182: PUSH
54183: LD_INT 1
54185: ARRAY
54186: ST_TO_ADDR
// end ; end ;
54187: LD_VAR 0 3
54191: RET
// export function MC_SetTame ( base , area ) ; begin
54192: LD_INT 0
54194: PPUSH
// if not mc_bases or not base then
54195: LD_EXP 99
54199: NOT
54200: PUSH
54201: LD_VAR 0 1
54205: NOT
54206: OR
54207: IFFALSE 54211
// exit ;
54209: GO 54236
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
54211: LD_ADDR_EXP 127
54215: PUSH
54216: LD_EXP 127
54220: PPUSH
54221: LD_VAR 0 1
54225: PPUSH
54226: LD_VAR 0 2
54230: PPUSH
54231: CALL_OW 1
54235: ST_TO_ADDR
// end ;
54236: LD_VAR 0 3
54240: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
54241: LD_INT 0
54243: PPUSH
54244: PPUSH
// if not mc_bases or not base then
54245: LD_EXP 99
54249: NOT
54250: PUSH
54251: LD_VAR 0 1
54255: NOT
54256: OR
54257: IFFALSE 54261
// exit ;
54259: GO 54363
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
54261: LD_ADDR_VAR 0 4
54265: PUSH
54266: LD_EXP 99
54270: PUSH
54271: LD_VAR 0 1
54275: ARRAY
54276: PPUSH
54277: LD_INT 30
54279: PUSH
54280: LD_VAR 0 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PPUSH
54289: CALL_OW 72
54293: ST_TO_ADDR
// if not tmp then
54294: LD_VAR 0 4
54298: NOT
54299: IFFALSE 54303
// exit ;
54301: GO 54363
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
54303: LD_ADDR_EXP 131
54307: PUSH
54308: LD_EXP 131
54312: PPUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: LD_EXP 131
54322: PUSH
54323: LD_VAR 0 1
54327: ARRAY
54328: PPUSH
54329: LD_EXP 131
54333: PUSH
54334: LD_VAR 0 1
54338: ARRAY
54339: PUSH
54340: LD_INT 1
54342: PLUS
54343: PPUSH
54344: LD_VAR 0 4
54348: PUSH
54349: LD_INT 1
54351: ARRAY
54352: PPUSH
54353: CALL_OW 2
54357: PPUSH
54358: CALL_OW 1
54362: ST_TO_ADDR
// end ;
54363: LD_VAR 0 3
54367: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
54368: LD_INT 0
54370: PPUSH
54371: PPUSH
// if not mc_bases or not base or not kinds then
54372: LD_EXP 99
54376: NOT
54377: PUSH
54378: LD_VAR 0 1
54382: NOT
54383: OR
54384: PUSH
54385: LD_VAR 0 2
54389: NOT
54390: OR
54391: IFFALSE 54395
// exit ;
54393: GO 54456
// for i in kinds do
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_VAR 0 2
54404: PUSH
54405: FOR_IN
54406: IFFALSE 54454
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
54408: LD_ADDR_EXP 133
54412: PUSH
54413: LD_EXP 133
54417: PPUSH
54418: LD_VAR 0 1
54422: PUSH
54423: LD_EXP 133
54427: PUSH
54428: LD_VAR 0 1
54432: ARRAY
54433: PUSH
54434: LD_INT 1
54436: PLUS
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PPUSH
54442: LD_VAR 0 4
54446: PPUSH
54447: CALL 66341 0 3
54451: ST_TO_ADDR
54452: GO 54405
54454: POP
54455: POP
// end ;
54456: LD_VAR 0 3
54460: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
54461: LD_INT 0
54463: PPUSH
// if not mc_bases or not base or not areas then
54464: LD_EXP 99
54468: NOT
54469: PUSH
54470: LD_VAR 0 1
54474: NOT
54475: OR
54476: PUSH
54477: LD_VAR 0 2
54481: NOT
54482: OR
54483: IFFALSE 54487
// exit ;
54485: GO 54512
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
54487: LD_ADDR_EXP 117
54491: PUSH
54492: LD_EXP 117
54496: PPUSH
54497: LD_VAR 0 1
54501: PPUSH
54502: LD_VAR 0 2
54506: PPUSH
54507: CALL_OW 1
54511: ST_TO_ADDR
// end ;
54512: LD_VAR 0 3
54516: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
54517: LD_INT 0
54519: PPUSH
// if not mc_bases or not base or not teleports_exit then
54520: LD_EXP 99
54524: NOT
54525: PUSH
54526: LD_VAR 0 1
54530: NOT
54531: OR
54532: PUSH
54533: LD_VAR 0 2
54537: NOT
54538: OR
54539: IFFALSE 54543
// exit ;
54541: GO 54568
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
54543: LD_ADDR_EXP 134
54547: PUSH
54548: LD_EXP 134
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: LD_VAR 0 2
54562: PPUSH
54563: CALL_OW 1
54567: ST_TO_ADDR
// end ;
54568: LD_VAR 0 3
54572: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
54573: LD_INT 0
54575: PPUSH
54576: PPUSH
54577: PPUSH
// if not mc_bases or not base or not ext_list then
54578: LD_EXP 99
54582: NOT
54583: PUSH
54584: LD_VAR 0 1
54588: NOT
54589: OR
54590: PUSH
54591: LD_VAR 0 5
54595: NOT
54596: OR
54597: IFFALSE 54601
// exit ;
54599: GO 54774
// tmp := GetFacExtXYD ( x , y , d ) ;
54601: LD_ADDR_VAR 0 8
54605: PUSH
54606: LD_VAR 0 2
54610: PPUSH
54611: LD_VAR 0 3
54615: PPUSH
54616: LD_VAR 0 4
54620: PPUSH
54621: CALL 99656 0 3
54625: ST_TO_ADDR
// if not tmp then
54626: LD_VAR 0 8
54630: NOT
54631: IFFALSE 54635
// exit ;
54633: GO 54774
// for i in tmp do
54635: LD_ADDR_VAR 0 7
54639: PUSH
54640: LD_VAR 0 8
54644: PUSH
54645: FOR_IN
54646: IFFALSE 54772
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
54648: LD_ADDR_EXP 104
54652: PUSH
54653: LD_EXP 104
54657: PPUSH
54658: LD_VAR 0 1
54662: PPUSH
54663: LD_EXP 104
54667: PUSH
54668: LD_VAR 0 1
54672: ARRAY
54673: PPUSH
54674: LD_EXP 104
54678: PUSH
54679: LD_VAR 0 1
54683: ARRAY
54684: PUSH
54685: LD_INT 1
54687: PLUS
54688: PPUSH
54689: LD_VAR 0 5
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PUSH
54698: LD_VAR 0 7
54702: PUSH
54703: LD_INT 1
54705: ARRAY
54706: PUSH
54707: LD_VAR 0 7
54711: PUSH
54712: LD_INT 2
54714: ARRAY
54715: PUSH
54716: LD_VAR 0 7
54720: PUSH
54721: LD_INT 3
54723: ARRAY
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: PPUSH
54731: CALL_OW 2
54735: PPUSH
54736: CALL_OW 1
54740: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
54741: LD_ADDR_VAR 0 5
54745: PUSH
54746: LD_VAR 0 5
54750: PPUSH
54751: LD_INT 1
54753: PPUSH
54754: CALL_OW 3
54758: ST_TO_ADDR
// if not ext_list then
54759: LD_VAR 0 5
54763: NOT
54764: IFFALSE 54770
// exit ;
54766: POP
54767: POP
54768: GO 54774
// end ;
54770: GO 54645
54772: POP
54773: POP
// end ;
54774: LD_VAR 0 6
54778: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
54779: LD_INT 0
54781: PPUSH
// if not mc_bases or not base or not weapon_list then
54782: LD_EXP 99
54786: NOT
54787: PUSH
54788: LD_VAR 0 1
54792: NOT
54793: OR
54794: PUSH
54795: LD_VAR 0 2
54799: NOT
54800: OR
54801: IFFALSE 54805
// exit ;
54803: GO 54830
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
54805: LD_ADDR_EXP 138
54809: PUSH
54810: LD_EXP 138
54814: PPUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: LD_VAR 0 2
54824: PPUSH
54825: CALL_OW 1
54829: ST_TO_ADDR
// end ;
54830: LD_VAR 0 3
54834: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
54835: LD_INT 0
54837: PPUSH
// if not mc_bases or not base or not tech_list then
54838: LD_EXP 99
54842: NOT
54843: PUSH
54844: LD_VAR 0 1
54848: NOT
54849: OR
54850: PUSH
54851: LD_VAR 0 2
54855: NOT
54856: OR
54857: IFFALSE 54861
// exit ;
54859: GO 54886
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
54861: LD_ADDR_EXP 126
54865: PUSH
54866: LD_EXP 126
54870: PPUSH
54871: LD_VAR 0 1
54875: PPUSH
54876: LD_VAR 0 2
54880: PPUSH
54881: CALL_OW 1
54885: ST_TO_ADDR
// end ;
54886: LD_VAR 0 3
54890: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
54891: LD_INT 0
54893: PPUSH
// if not mc_bases or not parking_area or not base then
54894: LD_EXP 99
54898: NOT
54899: PUSH
54900: LD_VAR 0 2
54904: NOT
54905: OR
54906: PUSH
54907: LD_VAR 0 1
54911: NOT
54912: OR
54913: IFFALSE 54917
// exit ;
54915: GO 54942
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
54917: LD_ADDR_EXP 123
54921: PUSH
54922: LD_EXP 123
54926: PPUSH
54927: LD_VAR 0 1
54931: PPUSH
54932: LD_VAR 0 2
54936: PPUSH
54937: CALL_OW 1
54941: ST_TO_ADDR
// end ;
54942: LD_VAR 0 3
54946: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
54947: LD_INT 0
54949: PPUSH
// if not mc_bases or not base or not scan_area then
54950: LD_EXP 99
54954: NOT
54955: PUSH
54956: LD_VAR 0 1
54960: NOT
54961: OR
54962: PUSH
54963: LD_VAR 0 2
54967: NOT
54968: OR
54969: IFFALSE 54973
// exit ;
54971: GO 54998
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
54973: LD_ADDR_EXP 124
54977: PUSH
54978: LD_EXP 124
54982: PPUSH
54983: LD_VAR 0 1
54987: PPUSH
54988: LD_VAR 0 2
54992: PPUSH
54993: CALL_OW 1
54997: ST_TO_ADDR
// end ;
54998: LD_VAR 0 3
55002: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
55003: LD_INT 0
55005: PPUSH
55006: PPUSH
// if not mc_bases or not base then
55007: LD_EXP 99
55011: NOT
55012: PUSH
55013: LD_VAR 0 1
55017: NOT
55018: OR
55019: IFFALSE 55023
// exit ;
55021: GO 55087
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
55023: LD_ADDR_VAR 0 3
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: LD_INT 4
55039: PUSH
55040: LD_INT 11
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
55050: LD_ADDR_EXP 126
55054: PUSH
55055: LD_EXP 126
55059: PPUSH
55060: LD_VAR 0 1
55064: PPUSH
55065: LD_EXP 126
55069: PUSH
55070: LD_VAR 0 1
55074: ARRAY
55075: PUSH
55076: LD_VAR 0 3
55080: DIFF
55081: PPUSH
55082: CALL_OW 1
55086: ST_TO_ADDR
// end ;
55087: LD_VAR 0 2
55091: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
55092: LD_INT 0
55094: PPUSH
// result := mc_vehicles [ base ] diff mc_defender [ base ] ;
55095: LD_ADDR_VAR 0 3
55099: PUSH
55100: LD_EXP 118
55104: PUSH
55105: LD_VAR 0 1
55109: ARRAY
55110: PUSH
55111: LD_EXP 121
55115: PUSH
55116: LD_VAR 0 1
55120: ARRAY
55121: DIFF
55122: ST_TO_ADDR
// if onlyCombat then
55123: LD_VAR 0 2
55127: IFFALSE 55270
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] ] ) ;
55129: LD_ADDR_VAR 0 3
55133: PUSH
55134: LD_VAR 0 3
55138: PUSH
55139: LD_VAR 0 3
55143: PPUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 34
55149: PUSH
55150: LD_INT 12
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 34
55159: PUSH
55160: LD_INT 51
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 34
55169: PUSH
55170: LD_EXP 93
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 34
55181: PUSH
55182: LD_INT 32
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 34
55191: PUSH
55192: LD_INT 13
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 34
55201: PUSH
55202: LD_INT 52
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 34
55211: PUSH
55212: LD_INT 14
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 34
55221: PUSH
55222: LD_INT 53
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 34
55231: PUSH
55232: LD_EXP 92
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 34
55243: PUSH
55244: LD_INT 31
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: PPUSH
55264: CALL_OW 72
55268: DIFF
55269: ST_TO_ADDR
// end ; end_of_file
55270: LD_VAR 0 3
55274: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
55275: LD_INT 0
55277: PPUSH
55278: PPUSH
55279: PPUSH
// if not mc_bases or not skirmish then
55280: LD_EXP 99
55284: NOT
55285: PUSH
55286: LD_EXP 97
55290: NOT
55291: OR
55292: IFFALSE 55296
// exit ;
55294: GO 55461
// for i = 1 to mc_bases do
55296: LD_ADDR_VAR 0 4
55300: PUSH
55301: DOUBLE
55302: LD_INT 1
55304: DEC
55305: ST_TO_ADDR
55306: LD_EXP 99
55310: PUSH
55311: FOR_TO
55312: IFFALSE 55459
// begin if sci in mc_bases [ i ] then
55314: LD_VAR 0 2
55318: PUSH
55319: LD_EXP 99
55323: PUSH
55324: LD_VAR 0 4
55328: ARRAY
55329: IN
55330: IFFALSE 55457
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
55332: LD_ADDR_EXP 128
55336: PUSH
55337: LD_EXP 128
55341: PPUSH
55342: LD_VAR 0 4
55346: PUSH
55347: LD_EXP 128
55351: PUSH
55352: LD_VAR 0 4
55356: ARRAY
55357: PUSH
55358: LD_INT 1
55360: PLUS
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PPUSH
55366: LD_VAR 0 1
55370: PPUSH
55371: CALL 66341 0 3
55375: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
55376: LD_ADDR_VAR 0 5
55380: PUSH
55381: LD_EXP 99
55385: PUSH
55386: LD_VAR 0 4
55390: ARRAY
55391: PPUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 30
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 30
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: PPUSH
55420: CALL_OW 72
55424: PPUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: CALL_OW 74
55434: ST_TO_ADDR
// if tmp then
55435: LD_VAR 0 5
55439: IFFALSE 55455
// ComStandNearbyBuilding ( ape , tmp ) ;
55441: LD_VAR 0 1
55445: PPUSH
55446: LD_VAR 0 5
55450: PPUSH
55451: CALL 61018 0 2
// break ;
55455: GO 55459
// end ; end ;
55457: GO 55311
55459: POP
55460: POP
// end ;
55461: LD_VAR 0 3
55465: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
55466: LD_INT 0
55468: PPUSH
55469: PPUSH
55470: PPUSH
// if not mc_bases or not skirmish then
55471: LD_EXP 99
55475: NOT
55476: PUSH
55477: LD_EXP 97
55481: NOT
55482: OR
55483: IFFALSE 55487
// exit ;
55485: GO 55576
// for i = 1 to mc_bases do
55487: LD_ADDR_VAR 0 4
55491: PUSH
55492: DOUBLE
55493: LD_INT 1
55495: DEC
55496: ST_TO_ADDR
55497: LD_EXP 99
55501: PUSH
55502: FOR_TO
55503: IFFALSE 55574
// begin if building in mc_busy_turret_list [ i ] then
55505: LD_VAR 0 1
55509: PUSH
55510: LD_EXP 109
55514: PUSH
55515: LD_VAR 0 4
55519: ARRAY
55520: IN
55521: IFFALSE 55572
// begin tmp := mc_busy_turret_list [ i ] diff building ;
55523: LD_ADDR_VAR 0 5
55527: PUSH
55528: LD_EXP 109
55532: PUSH
55533: LD_VAR 0 4
55537: ARRAY
55538: PUSH
55539: LD_VAR 0 1
55543: DIFF
55544: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
55545: LD_ADDR_EXP 109
55549: PUSH
55550: LD_EXP 109
55554: PPUSH
55555: LD_VAR 0 4
55559: PPUSH
55560: LD_VAR 0 5
55564: PPUSH
55565: CALL_OW 1
55569: ST_TO_ADDR
// break ;
55570: GO 55574
// end ; end ;
55572: GO 55502
55574: POP
55575: POP
// end ;
55576: LD_VAR 0 3
55580: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
55581: LD_INT 0
55583: PPUSH
55584: PPUSH
55585: PPUSH
// if not mc_bases or not skirmish then
55586: LD_EXP 99
55590: NOT
55591: PUSH
55592: LD_EXP 97
55596: NOT
55597: OR
55598: IFFALSE 55602
// exit ;
55600: GO 55801
// for i = 1 to mc_bases do
55602: LD_ADDR_VAR 0 5
55606: PUSH
55607: DOUBLE
55608: LD_INT 1
55610: DEC
55611: ST_TO_ADDR
55612: LD_EXP 99
55616: PUSH
55617: FOR_TO
55618: IFFALSE 55799
// if building in mc_bases [ i ] then
55620: LD_VAR 0 1
55624: PUSH
55625: LD_EXP 99
55629: PUSH
55630: LD_VAR 0 5
55634: ARRAY
55635: IN
55636: IFFALSE 55797
// begin tmp := mc_bases [ i ] diff building ;
55638: LD_ADDR_VAR 0 6
55642: PUSH
55643: LD_EXP 99
55647: PUSH
55648: LD_VAR 0 5
55652: ARRAY
55653: PUSH
55654: LD_VAR 0 1
55658: DIFF
55659: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55660: LD_ADDR_EXP 99
55664: PUSH
55665: LD_EXP 99
55669: PPUSH
55670: LD_VAR 0 5
55674: PPUSH
55675: LD_VAR 0 6
55679: PPUSH
55680: CALL_OW 1
55684: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
55685: LD_VAR 0 1
55689: PUSH
55690: LD_EXP 107
55694: PUSH
55695: LD_VAR 0 5
55699: ARRAY
55700: IN
55701: IFFALSE 55740
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
55703: LD_ADDR_EXP 107
55707: PUSH
55708: LD_EXP 107
55712: PPUSH
55713: LD_VAR 0 5
55717: PPUSH
55718: LD_EXP 107
55722: PUSH
55723: LD_VAR 0 5
55727: ARRAY
55728: PUSH
55729: LD_VAR 0 1
55733: DIFF
55734: PPUSH
55735: CALL_OW 1
55739: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
55740: LD_VAR 0 1
55744: PUSH
55745: LD_EXP 108
55749: PUSH
55750: LD_VAR 0 5
55754: ARRAY
55755: IN
55756: IFFALSE 55795
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
55758: LD_ADDR_EXP 108
55762: PUSH
55763: LD_EXP 108
55767: PPUSH
55768: LD_VAR 0 5
55772: PPUSH
55773: LD_EXP 108
55777: PUSH
55778: LD_VAR 0 5
55782: ARRAY
55783: PUSH
55784: LD_VAR 0 1
55788: DIFF
55789: PPUSH
55790: CALL_OW 1
55794: ST_TO_ADDR
// break ;
55795: GO 55799
// end ;
55797: GO 55617
55799: POP
55800: POP
// end ;
55801: LD_VAR 0 4
55805: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
55806: LD_INT 0
55808: PPUSH
55809: PPUSH
55810: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
55811: LD_EXP 99
55815: NOT
55816: PUSH
55817: LD_EXP 97
55821: NOT
55822: OR
55823: PUSH
55824: LD_VAR 0 3
55828: PUSH
55829: LD_EXP 125
55833: IN
55834: NOT
55835: OR
55836: IFFALSE 55840
// exit ;
55838: GO 55963
// for i = 1 to mc_vehicles do
55840: LD_ADDR_VAR 0 6
55844: PUSH
55845: DOUBLE
55846: LD_INT 1
55848: DEC
55849: ST_TO_ADDR
55850: LD_EXP 118
55854: PUSH
55855: FOR_TO
55856: IFFALSE 55961
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
55858: LD_VAR 0 2
55862: PUSH
55863: LD_EXP 118
55867: PUSH
55868: LD_VAR 0 6
55872: ARRAY
55873: IN
55874: PUSH
55875: LD_VAR 0 1
55879: PUSH
55880: LD_EXP 118
55884: PUSH
55885: LD_VAR 0 6
55889: ARRAY
55890: IN
55891: OR
55892: IFFALSE 55959
// begin tmp := mc_vehicles [ i ] diff old ;
55894: LD_ADDR_VAR 0 7
55898: PUSH
55899: LD_EXP 118
55903: PUSH
55904: LD_VAR 0 6
55908: ARRAY
55909: PUSH
55910: LD_VAR 0 2
55914: DIFF
55915: ST_TO_ADDR
// tmp := tmp diff new ;
55916: LD_ADDR_VAR 0 7
55920: PUSH
55921: LD_VAR 0 7
55925: PUSH
55926: LD_VAR 0 1
55930: DIFF
55931: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
55932: LD_ADDR_EXP 118
55936: PUSH
55937: LD_EXP 118
55941: PPUSH
55942: LD_VAR 0 6
55946: PPUSH
55947: LD_VAR 0 7
55951: PPUSH
55952: CALL_OW 1
55956: ST_TO_ADDR
// break ;
55957: GO 55961
// end ;
55959: GO 55855
55961: POP
55962: POP
// end ;
55963: LD_VAR 0 5
55967: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
55968: LD_INT 0
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
// if not mc_bases or not skirmish then
55974: LD_EXP 99
55978: NOT
55979: PUSH
55980: LD_EXP 97
55984: NOT
55985: OR
55986: IFFALSE 55990
// exit ;
55988: GO 56373
// side := GetSide ( vehicle ) ;
55990: LD_ADDR_VAR 0 5
55994: PUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: CALL_OW 255
56004: ST_TO_ADDR
// for i = 1 to mc_bases do
56005: LD_ADDR_VAR 0 4
56009: PUSH
56010: DOUBLE
56011: LD_INT 1
56013: DEC
56014: ST_TO_ADDR
56015: LD_EXP 99
56019: PUSH
56020: FOR_TO
56021: IFFALSE 56371
// begin if factory in mc_bases [ i ] then
56023: LD_VAR 0 2
56027: PUSH
56028: LD_EXP 99
56032: PUSH
56033: LD_VAR 0 4
56037: ARRAY
56038: IN
56039: IFFALSE 56369
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
56041: LD_EXP 121
56045: PUSH
56046: LD_VAR 0 4
56050: ARRAY
56051: PUSH
56052: LD_EXP 110
56056: PUSH
56057: LD_VAR 0 4
56061: ARRAY
56062: LESS
56063: PUSH
56064: LD_VAR 0 1
56068: PPUSH
56069: CALL_OW 264
56073: PUSH
56074: LD_INT 31
56076: PUSH
56077: LD_INT 32
56079: PUSH
56080: LD_INT 51
56082: PUSH
56083: LD_EXP 93
56087: PUSH
56088: LD_INT 12
56090: PUSH
56091: LD_INT 30
56093: PUSH
56094: LD_EXP 92
56098: PUSH
56099: LD_INT 11
56101: PUSH
56102: LD_INT 53
56104: PUSH
56105: LD_INT 14
56107: PUSH
56108: LD_EXP 96
56112: PUSH
56113: LD_INT 29
56115: PUSH
56116: LD_EXP 94
56120: PUSH
56121: LD_INT 13
56123: PUSH
56124: LD_INT 52
56126: PUSH
56127: LD_INT 48
56129: PUSH
56130: LD_INT 8
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: IN
56152: NOT
56153: AND
56154: IFFALSE 56195
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
56156: LD_ADDR_EXP 121
56160: PUSH
56161: LD_EXP 121
56165: PPUSH
56166: LD_VAR 0 4
56170: PPUSH
56171: LD_EXP 121
56175: PUSH
56176: LD_VAR 0 4
56180: ARRAY
56181: PUSH
56182: LD_VAR 0 1
56186: ADD
56187: PPUSH
56188: CALL_OW 1
56192: ST_TO_ADDR
56193: GO 56239
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56195: LD_ADDR_EXP 118
56199: PUSH
56200: LD_EXP 118
56204: PPUSH
56205: LD_VAR 0 4
56209: PUSH
56210: LD_EXP 118
56214: PUSH
56215: LD_VAR 0 4
56219: ARRAY
56220: PUSH
56221: LD_INT 1
56223: PLUS
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PPUSH
56229: LD_VAR 0 1
56233: PPUSH
56234: CALL 66341 0 3
56238: ST_TO_ADDR
// if not mc_scan [ i ] then
56239: LD_EXP 122
56243: PUSH
56244: LD_VAR 0 4
56248: ARRAY
56249: NOT
56250: IFFALSE 56369
// begin if GetControl ( vehicle ) = control_remote then
56252: LD_VAR 0 1
56256: PPUSH
56257: CALL_OW 263
56261: PUSH
56262: LD_INT 2
56264: EQUAL
56265: IFFALSE 56285
// repeat wait ( 0 0$1 ) ;
56267: LD_INT 35
56269: PPUSH
56270: CALL_OW 67
// until IsControledBy ( vehicle ) ;
56274: LD_VAR 0 1
56278: PPUSH
56279: CALL_OW 312
56283: IFFALSE 56267
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
56285: LD_VAR 0 1
56289: PPUSH
56290: LD_EXP 123
56294: PUSH
56295: LD_VAR 0 4
56299: ARRAY
56300: PPUSH
56301: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 263
56314: PUSH
56315: LD_INT 1
56317: NONEQUAL
56318: IFFALSE 56322
// break ;
56320: GO 56371
// repeat wait ( 0 0$1 ) ;
56322: LD_INT 35
56324: PPUSH
56325: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
56329: LD_VAR 0 1
56333: PPUSH
56334: LD_EXP 123
56338: PUSH
56339: LD_VAR 0 4
56343: ARRAY
56344: PPUSH
56345: CALL_OW 308
56349: IFFALSE 56322
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
56351: LD_VAR 0 1
56355: PPUSH
56356: CALL_OW 311
56360: PPUSH
56361: CALL_OW 121
// exit ;
56365: POP
56366: POP
56367: GO 56373
// end ; end ; end ;
56369: GO 56020
56371: POP
56372: POP
// end ;
56373: LD_VAR 0 3
56377: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
56378: LD_INT 0
56380: PPUSH
56381: PPUSH
56382: PPUSH
56383: PPUSH
// if not mc_bases or not skirmish then
56384: LD_EXP 99
56388: NOT
56389: PUSH
56390: LD_EXP 97
56394: NOT
56395: OR
56396: IFFALSE 56400
// exit ;
56398: GO 56753
// repeat wait ( 0 0$1 ) ;
56400: LD_INT 35
56402: PPUSH
56403: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56407: LD_VAR 0 2
56411: PPUSH
56412: LD_VAR 0 3
56416: PPUSH
56417: CALL_OW 284
56421: IFFALSE 56400
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56423: LD_VAR 0 2
56427: PPUSH
56428: LD_VAR 0 3
56432: PPUSH
56433: CALL_OW 283
56437: PUSH
56438: LD_INT 4
56440: EQUAL
56441: IFFALSE 56445
// exit ;
56443: GO 56753
// for i = 1 to mc_bases do
56445: LD_ADDR_VAR 0 7
56449: PUSH
56450: DOUBLE
56451: LD_INT 1
56453: DEC
56454: ST_TO_ADDR
56455: LD_EXP 99
56459: PUSH
56460: FOR_TO
56461: IFFALSE 56751
// begin if mc_crates_area [ i ] then
56463: LD_EXP 117
56467: PUSH
56468: LD_VAR 0 7
56472: ARRAY
56473: IFFALSE 56584
// for j in mc_crates_area [ i ] do
56475: LD_ADDR_VAR 0 8
56479: PUSH
56480: LD_EXP 117
56484: PUSH
56485: LD_VAR 0 7
56489: ARRAY
56490: PUSH
56491: FOR_IN
56492: IFFALSE 56582
// if InArea ( x , y , j ) then
56494: LD_VAR 0 2
56498: PPUSH
56499: LD_VAR 0 3
56503: PPUSH
56504: LD_VAR 0 8
56508: PPUSH
56509: CALL_OW 309
56513: IFFALSE 56580
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56515: LD_ADDR_EXP 115
56519: PUSH
56520: LD_EXP 115
56524: PPUSH
56525: LD_VAR 0 7
56529: PUSH
56530: LD_EXP 115
56534: PUSH
56535: LD_VAR 0 7
56539: ARRAY
56540: PUSH
56541: LD_INT 1
56543: PLUS
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PPUSH
56549: LD_VAR 0 4
56553: PUSH
56554: LD_VAR 0 2
56558: PUSH
56559: LD_VAR 0 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: PPUSH
56569: CALL 66341 0 3
56573: ST_TO_ADDR
// exit ;
56574: POP
56575: POP
56576: POP
56577: POP
56578: GO 56753
// end ;
56580: GO 56491
56582: POP
56583: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56584: LD_ADDR_VAR 0 9
56588: PUSH
56589: LD_EXP 99
56593: PUSH
56594: LD_VAR 0 7
56598: ARRAY
56599: PPUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 30
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 30
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: PPUSH
56628: CALL_OW 72
56632: ST_TO_ADDR
// if not depot then
56633: LD_VAR 0 9
56637: NOT
56638: IFFALSE 56642
// continue ;
56640: GO 56460
// for j in depot do
56642: LD_ADDR_VAR 0 8
56646: PUSH
56647: LD_VAR 0 9
56651: PUSH
56652: FOR_IN
56653: IFFALSE 56747
// if GetDistUnitXY ( j , x , y ) < 30 then
56655: LD_VAR 0 8
56659: PPUSH
56660: LD_VAR 0 2
56664: PPUSH
56665: LD_VAR 0 3
56669: PPUSH
56670: CALL_OW 297
56674: PUSH
56675: LD_INT 30
56677: LESS
56678: IFFALSE 56745
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56680: LD_ADDR_EXP 115
56684: PUSH
56685: LD_EXP 115
56689: PPUSH
56690: LD_VAR 0 7
56694: PUSH
56695: LD_EXP 115
56699: PUSH
56700: LD_VAR 0 7
56704: ARRAY
56705: PUSH
56706: LD_INT 1
56708: PLUS
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PPUSH
56714: LD_VAR 0 4
56718: PUSH
56719: LD_VAR 0 2
56723: PUSH
56724: LD_VAR 0 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: PPUSH
56734: CALL 66341 0 3
56738: ST_TO_ADDR
// exit ;
56739: POP
56740: POP
56741: POP
56742: POP
56743: GO 56753
// end ;
56745: GO 56652
56747: POP
56748: POP
// end ;
56749: GO 56460
56751: POP
56752: POP
// end ;
56753: LD_VAR 0 6
56757: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
// if not mc_bases or not skirmish then
56764: LD_EXP 99
56768: NOT
56769: PUSH
56770: LD_EXP 97
56774: NOT
56775: OR
56776: IFFALSE 56780
// exit ;
56778: GO 57057
// side := GetSide ( lab ) ;
56780: LD_ADDR_VAR 0 4
56784: PUSH
56785: LD_VAR 0 2
56789: PPUSH
56790: CALL_OW 255
56794: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
56795: LD_VAR 0 4
56799: PUSH
56800: LD_EXP 125
56804: IN
56805: NOT
56806: PUSH
56807: LD_EXP 126
56811: NOT
56812: OR
56813: PUSH
56814: LD_EXP 99
56818: NOT
56819: OR
56820: IFFALSE 56824
// exit ;
56822: GO 57057
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
56824: LD_ADDR_EXP 126
56828: PUSH
56829: LD_EXP 126
56833: PPUSH
56834: LD_VAR 0 4
56838: PPUSH
56839: LD_EXP 126
56843: PUSH
56844: LD_VAR 0 4
56848: ARRAY
56849: PUSH
56850: LD_VAR 0 1
56854: DIFF
56855: PPUSH
56856: CALL_OW 1
56860: ST_TO_ADDR
// for i = 1 to mc_bases do
56861: LD_ADDR_VAR 0 5
56865: PUSH
56866: DOUBLE
56867: LD_INT 1
56869: DEC
56870: ST_TO_ADDR
56871: LD_EXP 99
56875: PUSH
56876: FOR_TO
56877: IFFALSE 57055
// begin if lab in mc_bases [ i ] then
56879: LD_VAR 0 2
56883: PUSH
56884: LD_EXP 99
56888: PUSH
56889: LD_VAR 0 5
56893: ARRAY
56894: IN
56895: IFFALSE 57053
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
56897: LD_VAR 0 1
56901: PUSH
56902: LD_INT 11
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: IN
56920: PUSH
56921: LD_EXP 129
56925: PUSH
56926: LD_VAR 0 5
56930: ARRAY
56931: AND
56932: IFFALSE 57053
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
56934: LD_ADDR_VAR 0 6
56938: PUSH
56939: LD_EXP 129
56943: PUSH
56944: LD_VAR 0 5
56948: ARRAY
56949: PUSH
56950: LD_INT 1
56952: ARRAY
56953: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56954: LD_ADDR_EXP 129
56958: PUSH
56959: LD_EXP 129
56963: PPUSH
56964: LD_VAR 0 5
56968: PPUSH
56969: EMPTY
56970: PPUSH
56971: CALL_OW 1
56975: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
56976: LD_VAR 0 6
56980: PPUSH
56981: LD_INT 0
56983: PPUSH
56984: CALL_OW 109
// ComExitBuilding ( tmp ) ;
56988: LD_VAR 0 6
56992: PPUSH
56993: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
56997: LD_ADDR_EXP 128
57001: PUSH
57002: LD_EXP 128
57006: PPUSH
57007: LD_VAR 0 5
57011: PPUSH
57012: LD_EXP 128
57016: PUSH
57017: LD_VAR 0 5
57021: ARRAY
57022: PPUSH
57023: LD_INT 1
57025: PPUSH
57026: LD_VAR 0 6
57030: PPUSH
57031: CALL_OW 2
57035: PPUSH
57036: CALL_OW 1
57040: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
57041: LD_VAR 0 5
57045: PPUSH
57046: LD_INT 112
57048: PPUSH
57049: CALL 34801 0 2
// end ; end ; end ;
57053: GO 56876
57055: POP
57056: POP
// end ;
57057: LD_VAR 0 3
57061: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
57062: LD_INT 0
57064: PPUSH
57065: PPUSH
57066: PPUSH
57067: PPUSH
57068: PPUSH
57069: PPUSH
57070: PPUSH
57071: PPUSH
// if not mc_bases or not skirmish then
57072: LD_EXP 99
57076: NOT
57077: PUSH
57078: LD_EXP 97
57082: NOT
57083: OR
57084: IFFALSE 57088
// exit ;
57086: GO 58031
// for i = 1 to mc_bases do
57088: LD_ADDR_VAR 0 3
57092: PUSH
57093: DOUBLE
57094: LD_INT 1
57096: DEC
57097: ST_TO_ADDR
57098: LD_EXP 99
57102: PUSH
57103: FOR_TO
57104: IFFALSE 58029
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
57106: LD_VAR 0 1
57110: PUSH
57111: LD_EXP 99
57115: PUSH
57116: LD_VAR 0 3
57120: ARRAY
57121: IN
57122: PUSH
57123: LD_VAR 0 1
57127: PUSH
57128: LD_EXP 106
57132: PUSH
57133: LD_VAR 0 3
57137: ARRAY
57138: IN
57139: OR
57140: PUSH
57141: LD_VAR 0 1
57145: PUSH
57146: LD_EXP 118
57150: PUSH
57151: LD_VAR 0 3
57155: ARRAY
57156: IN
57157: OR
57158: PUSH
57159: LD_VAR 0 1
57163: PUSH
57164: LD_EXP 128
57168: PUSH
57169: LD_VAR 0 3
57173: ARRAY
57174: IN
57175: OR
57176: PUSH
57177: LD_VAR 0 1
57181: PUSH
57182: LD_EXP 129
57186: PUSH
57187: LD_VAR 0 3
57191: ARRAY
57192: IN
57193: OR
57194: IFFALSE 58027
// begin if un in mc_ape [ i ] then
57196: LD_VAR 0 1
57200: PUSH
57201: LD_EXP 128
57205: PUSH
57206: LD_VAR 0 3
57210: ARRAY
57211: IN
57212: IFFALSE 57251
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
57214: LD_ADDR_EXP 128
57218: PUSH
57219: LD_EXP 128
57223: PPUSH
57224: LD_VAR 0 3
57228: PPUSH
57229: LD_EXP 128
57233: PUSH
57234: LD_VAR 0 3
57238: ARRAY
57239: PUSH
57240: LD_VAR 0 1
57244: DIFF
57245: PPUSH
57246: CALL_OW 1
57250: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
57251: LD_VAR 0 1
57255: PUSH
57256: LD_EXP 129
57260: PUSH
57261: LD_VAR 0 3
57265: ARRAY
57266: IN
57267: IFFALSE 57291
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57269: LD_ADDR_EXP 129
57273: PUSH
57274: LD_EXP 129
57278: PPUSH
57279: LD_VAR 0 3
57283: PPUSH
57284: EMPTY
57285: PPUSH
57286: CALL_OW 1
57290: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
57291: LD_VAR 0 1
57295: PPUSH
57296: CALL_OW 247
57300: PUSH
57301: LD_INT 2
57303: EQUAL
57304: PUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 110
57314: PUSH
57315: LD_INT 20
57317: EQUAL
57318: AND
57319: IFFALSE 57422
// begin fac := MC_GetBuilding ( i , b_factory ) ;
57321: LD_ADDR_VAR 0 8
57325: PUSH
57326: LD_VAR 0 3
57330: PPUSH
57331: LD_INT 3
57333: PPUSH
57334: CALL 54109 0 2
57338: ST_TO_ADDR
// if fac then
57339: LD_VAR 0 8
57343: IFFALSE 57422
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
57345: LD_ADDR_VAR 0 9
57349: PUSH
57350: LD_VAR 0 8
57354: PPUSH
57355: LD_VAR 0 1
57359: PPUSH
57360: CALL_OW 265
57364: PPUSH
57365: LD_VAR 0 1
57369: PPUSH
57370: CALL_OW 262
57374: PPUSH
57375: LD_VAR 0 1
57379: PPUSH
57380: CALL_OW 263
57384: PPUSH
57385: LD_VAR 0 1
57389: PPUSH
57390: CALL_OW 264
57394: PPUSH
57395: CALL 63941 0 5
57399: ST_TO_ADDR
// if components then
57400: LD_VAR 0 9
57404: IFFALSE 57420
// MC_InsertProduceList ( i , components ) ;
57406: LD_VAR 0 3
57410: PPUSH
57411: LD_VAR 0 9
57415: PPUSH
57416: CALL 53679 0 2
// break ;
57420: GO 58029
// end ; end ; if GetType ( un ) = unit_building then
57422: LD_VAR 0 1
57426: PPUSH
57427: CALL_OW 247
57431: PUSH
57432: LD_INT 3
57434: EQUAL
57435: IFFALSE 57750
// begin btype := GetBType ( un ) ;
57437: LD_ADDR_VAR 0 5
57441: PUSH
57442: LD_VAR 0 1
57446: PPUSH
57447: CALL_OW 266
57451: ST_TO_ADDR
// if btype = b_warehouse then
57452: LD_VAR 0 5
57456: PUSH
57457: LD_INT 1
57459: EQUAL
57460: IFFALSE 57478
// begin btype := b_depot ;
57462: LD_ADDR_VAR 0 5
57466: PUSH
57467: LD_INT 0
57469: ST_TO_ADDR
// pos := 1 ;
57470: LD_ADDR_VAR 0 6
57474: PUSH
57475: LD_INT 1
57477: ST_TO_ADDR
// end ; if btype = b_factory then
57478: LD_VAR 0 5
57482: PUSH
57483: LD_INT 3
57485: EQUAL
57486: IFFALSE 57504
// begin btype := b_workshop ;
57488: LD_ADDR_VAR 0 5
57492: PUSH
57493: LD_INT 2
57495: ST_TO_ADDR
// pos := 1 ;
57496: LD_ADDR_VAR 0 6
57500: PUSH
57501: LD_INT 1
57503: ST_TO_ADDR
// end ; if btype = b_barracks then
57504: LD_VAR 0 5
57508: PUSH
57509: LD_INT 5
57511: EQUAL
57512: IFFALSE 57522
// btype := b_armoury ;
57514: LD_ADDR_VAR 0 5
57518: PUSH
57519: LD_INT 4
57521: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
57522: LD_VAR 0 5
57526: PUSH
57527: LD_INT 7
57529: PUSH
57530: LD_INT 8
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: IN
57537: IFFALSE 57547
// btype := b_lab ;
57539: LD_ADDR_VAR 0 5
57543: PUSH
57544: LD_INT 6
57546: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
57547: LD_ADDR_EXP 104
57551: PUSH
57552: LD_EXP 104
57556: PPUSH
57557: LD_VAR 0 3
57561: PUSH
57562: LD_EXP 104
57566: PUSH
57567: LD_VAR 0 3
57571: ARRAY
57572: PUSH
57573: LD_INT 1
57575: PLUS
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PPUSH
57581: LD_VAR 0 5
57585: PUSH
57586: LD_VAR 0 1
57590: PPUSH
57591: CALL_OW 250
57595: PUSH
57596: LD_VAR 0 1
57600: PPUSH
57601: CALL_OW 251
57605: PUSH
57606: LD_VAR 0 1
57610: PPUSH
57611: CALL_OW 254
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: PPUSH
57622: CALL 66341 0 3
57626: ST_TO_ADDR
// if pos = 1 then
57627: LD_VAR 0 6
57631: PUSH
57632: LD_INT 1
57634: EQUAL
57635: IFFALSE 57750
// begin tmp := mc_build_list [ i ] ;
57637: LD_ADDR_VAR 0 7
57641: PUSH
57642: LD_EXP 104
57646: PUSH
57647: LD_VAR 0 3
57651: ARRAY
57652: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57653: LD_VAR 0 7
57657: PPUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 30
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 30
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: PPUSH
57686: CALL_OW 72
57690: IFFALSE 57700
// pos := 2 ;
57692: LD_ADDR_VAR 0 6
57696: PUSH
57697: LD_INT 2
57699: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
57700: LD_ADDR_VAR 0 7
57704: PUSH
57705: LD_VAR 0 7
57709: PPUSH
57710: LD_VAR 0 6
57714: PPUSH
57715: LD_VAR 0 7
57719: PPUSH
57720: CALL 66667 0 3
57724: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
57725: LD_ADDR_EXP 104
57729: PUSH
57730: LD_EXP 104
57734: PPUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: LD_VAR 0 7
57744: PPUSH
57745: CALL_OW 1
57749: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
57750: LD_VAR 0 1
57754: PUSH
57755: LD_EXP 99
57759: PUSH
57760: LD_VAR 0 3
57764: ARRAY
57765: IN
57766: IFFALSE 57805
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
57768: LD_ADDR_EXP 99
57772: PUSH
57773: LD_EXP 99
57777: PPUSH
57778: LD_VAR 0 3
57782: PPUSH
57783: LD_EXP 99
57787: PUSH
57788: LD_VAR 0 3
57792: ARRAY
57793: PUSH
57794: LD_VAR 0 1
57798: DIFF
57799: PPUSH
57800: CALL_OW 1
57804: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
57805: LD_VAR 0 1
57809: PUSH
57810: LD_EXP 106
57814: PUSH
57815: LD_VAR 0 3
57819: ARRAY
57820: IN
57821: IFFALSE 57860
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
57823: LD_ADDR_EXP 106
57827: PUSH
57828: LD_EXP 106
57832: PPUSH
57833: LD_VAR 0 3
57837: PPUSH
57838: LD_EXP 106
57842: PUSH
57843: LD_VAR 0 3
57847: ARRAY
57848: PUSH
57849: LD_VAR 0 1
57853: DIFF
57854: PPUSH
57855: CALL_OW 1
57859: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
57860: LD_VAR 0 1
57864: PUSH
57865: LD_EXP 118
57869: PUSH
57870: LD_VAR 0 3
57874: ARRAY
57875: IN
57876: IFFALSE 57915
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
57878: LD_ADDR_EXP 118
57882: PUSH
57883: LD_EXP 118
57887: PPUSH
57888: LD_VAR 0 3
57892: PPUSH
57893: LD_EXP 118
57897: PUSH
57898: LD_VAR 0 3
57902: ARRAY
57903: PUSH
57904: LD_VAR 0 1
57908: DIFF
57909: PPUSH
57910: CALL_OW 1
57914: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
57915: LD_VAR 0 1
57919: PUSH
57920: LD_EXP 108
57924: PUSH
57925: LD_VAR 0 3
57929: ARRAY
57930: IN
57931: IFFALSE 57970
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
57933: LD_ADDR_EXP 108
57937: PUSH
57938: LD_EXP 108
57942: PPUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: LD_EXP 108
57952: PUSH
57953: LD_VAR 0 3
57957: ARRAY
57958: PUSH
57959: LD_VAR 0 1
57963: DIFF
57964: PPUSH
57965: CALL_OW 1
57969: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
57970: LD_VAR 0 1
57974: PUSH
57975: LD_EXP 107
57979: PUSH
57980: LD_VAR 0 3
57984: ARRAY
57985: IN
57986: IFFALSE 58025
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
57988: LD_ADDR_EXP 107
57992: PUSH
57993: LD_EXP 107
57997: PPUSH
57998: LD_VAR 0 3
58002: PPUSH
58003: LD_EXP 107
58007: PUSH
58008: LD_VAR 0 3
58012: ARRAY
58013: PUSH
58014: LD_VAR 0 1
58018: DIFF
58019: PPUSH
58020: CALL_OW 1
58024: ST_TO_ADDR
// end ; break ;
58025: GO 58029
// end ;
58027: GO 57103
58029: POP
58030: POP
// end ;
58031: LD_VAR 0 2
58035: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
58036: LD_INT 0
58038: PPUSH
58039: PPUSH
58040: PPUSH
// if not mc_bases or not skirmish then
58041: LD_EXP 99
58045: NOT
58046: PUSH
58047: LD_EXP 97
58051: NOT
58052: OR
58053: IFFALSE 58057
// exit ;
58055: GO 58272
// for i = 1 to mc_bases do
58057: LD_ADDR_VAR 0 3
58061: PUSH
58062: DOUBLE
58063: LD_INT 1
58065: DEC
58066: ST_TO_ADDR
58067: LD_EXP 99
58071: PUSH
58072: FOR_TO
58073: IFFALSE 58270
// begin if building in mc_construct_list [ i ] then
58075: LD_VAR 0 1
58079: PUSH
58080: LD_EXP 106
58084: PUSH
58085: LD_VAR 0 3
58089: ARRAY
58090: IN
58091: IFFALSE 58268
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
58093: LD_ADDR_EXP 106
58097: PUSH
58098: LD_EXP 106
58102: PPUSH
58103: LD_VAR 0 3
58107: PPUSH
58108: LD_EXP 106
58112: PUSH
58113: LD_VAR 0 3
58117: ARRAY
58118: PUSH
58119: LD_VAR 0 1
58123: DIFF
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// if building in mc_lab [ i ] then
58130: LD_VAR 0 1
58134: PUSH
58135: LD_EXP 132
58139: PUSH
58140: LD_VAR 0 3
58144: ARRAY
58145: IN
58146: IFFALSE 58201
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
58148: LD_ADDR_EXP 133
58152: PUSH
58153: LD_EXP 133
58157: PPUSH
58158: LD_VAR 0 3
58162: PPUSH
58163: LD_EXP 133
58167: PUSH
58168: LD_VAR 0 3
58172: ARRAY
58173: PPUSH
58174: LD_INT 1
58176: PPUSH
58177: LD_EXP 133
58181: PUSH
58182: LD_VAR 0 3
58186: ARRAY
58187: PPUSH
58188: LD_INT 0
58190: PPUSH
58191: CALL 65759 0 4
58195: PPUSH
58196: CALL_OW 1
58200: ST_TO_ADDR
// if not building in mc_bases [ i ] then
58201: LD_VAR 0 1
58205: PUSH
58206: LD_EXP 99
58210: PUSH
58211: LD_VAR 0 3
58215: ARRAY
58216: IN
58217: NOT
58218: IFFALSE 58264
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
58220: LD_ADDR_EXP 99
58224: PUSH
58225: LD_EXP 99
58229: PPUSH
58230: LD_VAR 0 3
58234: PUSH
58235: LD_EXP 99
58239: PUSH
58240: LD_VAR 0 3
58244: ARRAY
58245: PUSH
58246: LD_INT 1
58248: PLUS
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PPUSH
58254: LD_VAR 0 1
58258: PPUSH
58259: CALL 66341 0 3
58263: ST_TO_ADDR
// exit ;
58264: POP
58265: POP
58266: GO 58272
// end ; end ;
58268: GO 58072
58270: POP
58271: POP
// end ;
58272: LD_VAR 0 2
58276: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
58277: LD_INT 0
58279: PPUSH
58280: PPUSH
58281: PPUSH
58282: PPUSH
58283: PPUSH
58284: PPUSH
58285: PPUSH
// if not mc_bases or not skirmish then
58286: LD_EXP 99
58290: NOT
58291: PUSH
58292: LD_EXP 97
58296: NOT
58297: OR
58298: IFFALSE 58302
// exit ;
58300: GO 58963
// for i = 1 to mc_bases do
58302: LD_ADDR_VAR 0 3
58306: PUSH
58307: DOUBLE
58308: LD_INT 1
58310: DEC
58311: ST_TO_ADDR
58312: LD_EXP 99
58316: PUSH
58317: FOR_TO
58318: IFFALSE 58961
// begin if building in mc_construct_list [ i ] then
58320: LD_VAR 0 1
58324: PUSH
58325: LD_EXP 106
58329: PUSH
58330: LD_VAR 0 3
58334: ARRAY
58335: IN
58336: IFFALSE 58959
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
58338: LD_ADDR_EXP 106
58342: PUSH
58343: LD_EXP 106
58347: PPUSH
58348: LD_VAR 0 3
58352: PPUSH
58353: LD_EXP 106
58357: PUSH
58358: LD_VAR 0 3
58362: ARRAY
58363: PUSH
58364: LD_VAR 0 1
58368: DIFF
58369: PPUSH
58370: CALL_OW 1
58374: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
58375: LD_ADDR_EXP 99
58379: PUSH
58380: LD_EXP 99
58384: PPUSH
58385: LD_VAR 0 3
58389: PUSH
58390: LD_EXP 99
58394: PUSH
58395: LD_VAR 0 3
58399: ARRAY
58400: PUSH
58401: LD_INT 1
58403: PLUS
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PPUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL 66341 0 3
58418: ST_TO_ADDR
// btype := GetBType ( building ) ;
58419: LD_ADDR_VAR 0 5
58423: PUSH
58424: LD_VAR 0 1
58428: PPUSH
58429: CALL_OW 266
58433: ST_TO_ADDR
// side := GetSide ( building ) ;
58434: LD_ADDR_VAR 0 8
58438: PUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL_OW 255
58448: ST_TO_ADDR
// if btype = b_lab then
58449: LD_VAR 0 5
58453: PUSH
58454: LD_INT 6
58456: EQUAL
58457: IFFALSE 58507
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
58459: LD_ADDR_EXP 132
58463: PUSH
58464: LD_EXP 132
58468: PPUSH
58469: LD_VAR 0 3
58473: PUSH
58474: LD_EXP 132
58478: PUSH
58479: LD_VAR 0 3
58483: ARRAY
58484: PUSH
58485: LD_INT 1
58487: PLUS
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PPUSH
58493: LD_VAR 0 1
58497: PPUSH
58498: CALL 66341 0 3
58502: ST_TO_ADDR
// exit ;
58503: POP
58504: POP
58505: GO 58963
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
58507: LD_VAR 0 5
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 4
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: IN
58526: IFFALSE 58650
// begin if btype = b_armoury then
58528: LD_VAR 0 5
58532: PUSH
58533: LD_INT 4
58535: EQUAL
58536: IFFALSE 58546
// btype := b_barracks ;
58538: LD_ADDR_VAR 0 5
58542: PUSH
58543: LD_INT 5
58545: ST_TO_ADDR
// if btype = b_depot then
58546: LD_VAR 0 5
58550: PUSH
58551: LD_INT 0
58553: EQUAL
58554: IFFALSE 58564
// btype := b_warehouse ;
58556: LD_ADDR_VAR 0 5
58560: PUSH
58561: LD_INT 1
58563: ST_TO_ADDR
// if btype = b_workshop then
58564: LD_VAR 0 5
58568: PUSH
58569: LD_INT 2
58571: EQUAL
58572: IFFALSE 58582
// btype := b_factory ;
58574: LD_ADDR_VAR 0 5
58578: PUSH
58579: LD_INT 3
58581: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
58582: LD_VAR 0 5
58586: PPUSH
58587: LD_VAR 0 8
58591: PPUSH
58592: CALL_OW 323
58596: PUSH
58597: LD_INT 1
58599: EQUAL
58600: IFFALSE 58646
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
58602: LD_ADDR_EXP 131
58606: PUSH
58607: LD_EXP 131
58611: PPUSH
58612: LD_VAR 0 3
58616: PUSH
58617: LD_EXP 131
58621: PUSH
58622: LD_VAR 0 3
58626: ARRAY
58627: PUSH
58628: LD_INT 1
58630: PLUS
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PPUSH
58636: LD_VAR 0 1
58640: PPUSH
58641: CALL 66341 0 3
58645: ST_TO_ADDR
// exit ;
58646: POP
58647: POP
58648: GO 58963
// end ; if btype in [ b_bunker , b_turret ] then
58650: LD_VAR 0 5
58654: PUSH
58655: LD_INT 32
58657: PUSH
58658: LD_INT 33
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: IN
58665: IFFALSE 58955
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
58667: LD_ADDR_EXP 107
58671: PUSH
58672: LD_EXP 107
58676: PPUSH
58677: LD_VAR 0 3
58681: PUSH
58682: LD_EXP 107
58686: PUSH
58687: LD_VAR 0 3
58691: ARRAY
58692: PUSH
58693: LD_INT 1
58695: PLUS
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PPUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL 66341 0 3
58710: ST_TO_ADDR
// if btype = b_bunker then
58711: LD_VAR 0 5
58715: PUSH
58716: LD_INT 32
58718: EQUAL
58719: IFFALSE 58955
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
58721: LD_ADDR_EXP 108
58725: PUSH
58726: LD_EXP 108
58730: PPUSH
58731: LD_VAR 0 3
58735: PUSH
58736: LD_EXP 108
58740: PUSH
58741: LD_VAR 0 3
58745: ARRAY
58746: PUSH
58747: LD_INT 1
58749: PLUS
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PPUSH
58755: LD_VAR 0 1
58759: PPUSH
58760: CALL 66341 0 3
58764: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
58765: LD_ADDR_VAR 0 6
58769: PUSH
58770: LD_EXP 99
58774: PUSH
58775: LD_VAR 0 3
58779: ARRAY
58780: PPUSH
58781: LD_INT 25
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: LD_INT 54
58796: PUSH
58797: EMPTY
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PPUSH
58808: CALL_OW 72
58812: ST_TO_ADDR
// if tmp then
58813: LD_VAR 0 6
58817: IFFALSE 58823
// exit ;
58819: POP
58820: POP
58821: GO 58963
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58823: LD_ADDR_VAR 0 6
58827: PUSH
58828: LD_EXP 99
58832: PUSH
58833: LD_VAR 0 3
58837: ARRAY
58838: PPUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 30
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 30
58854: PUSH
58855: LD_INT 5
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: PPUSH
58867: CALL_OW 72
58871: ST_TO_ADDR
// if not tmp then
58872: LD_VAR 0 6
58876: NOT
58877: IFFALSE 58883
// exit ;
58879: POP
58880: POP
58881: GO 58963
// for j in tmp do
58883: LD_ADDR_VAR 0 4
58887: PUSH
58888: LD_VAR 0 6
58892: PUSH
58893: FOR_IN
58894: IFFALSE 58953
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
58896: LD_ADDR_VAR 0 7
58900: PUSH
58901: LD_VAR 0 4
58905: PPUSH
58906: CALL_OW 313
58910: PPUSH
58911: LD_INT 25
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PPUSH
58921: CALL_OW 72
58925: ST_TO_ADDR
// if units then
58926: LD_VAR 0 7
58930: IFFALSE 58951
// begin ComExitBuilding ( units [ 1 ] ) ;
58932: LD_VAR 0 7
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PPUSH
58941: CALL_OW 122
// exit ;
58945: POP
58946: POP
58947: POP
58948: POP
58949: GO 58963
// end ; end ;
58951: GO 58893
58953: POP
58954: POP
// end ; end ; exit ;
58955: POP
58956: POP
58957: GO 58963
// end ; end ;
58959: GO 58317
58961: POP
58962: POP
// end ;
58963: LD_VAR 0 2
58967: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
58968: LD_INT 0
58970: PPUSH
58971: PPUSH
58972: PPUSH
58973: PPUSH
58974: PPUSH
58975: PPUSH
58976: PPUSH
// if not mc_bases or not skirmish then
58977: LD_EXP 99
58981: NOT
58982: PUSH
58983: LD_EXP 97
58987: NOT
58988: OR
58989: IFFALSE 58993
// exit ;
58991: GO 59224
// btype := GetBType ( building ) ;
58993: LD_ADDR_VAR 0 6
58997: PUSH
58998: LD_VAR 0 1
59002: PPUSH
59003: CALL_OW 266
59007: ST_TO_ADDR
// x := GetX ( building ) ;
59008: LD_ADDR_VAR 0 7
59012: PUSH
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 250
59022: ST_TO_ADDR
// y := GetY ( building ) ;
59023: LD_ADDR_VAR 0 8
59027: PUSH
59028: LD_VAR 0 1
59032: PPUSH
59033: CALL_OW 251
59037: ST_TO_ADDR
// d := GetDir ( building ) ;
59038: LD_ADDR_VAR 0 9
59042: PUSH
59043: LD_VAR 0 1
59047: PPUSH
59048: CALL_OW 254
59052: ST_TO_ADDR
// for i = 1 to mc_bases do
59053: LD_ADDR_VAR 0 4
59057: PUSH
59058: DOUBLE
59059: LD_INT 1
59061: DEC
59062: ST_TO_ADDR
59063: LD_EXP 99
59067: PUSH
59068: FOR_TO
59069: IFFALSE 59222
// begin if not mc_build_list [ i ] then
59071: LD_EXP 104
59075: PUSH
59076: LD_VAR 0 4
59080: ARRAY
59081: NOT
59082: IFFALSE 59086
// continue ;
59084: GO 59068
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
59086: LD_VAR 0 6
59090: PUSH
59091: LD_VAR 0 7
59095: PUSH
59096: LD_VAR 0 8
59100: PUSH
59101: LD_VAR 0 9
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: PPUSH
59112: LD_EXP 104
59116: PUSH
59117: LD_VAR 0 4
59121: ARRAY
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PPUSH
59127: CALL 72510 0 2
59131: IFFALSE 59220
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
59133: LD_ADDR_EXP 104
59137: PUSH
59138: LD_EXP 104
59142: PPUSH
59143: LD_VAR 0 4
59147: PPUSH
59148: LD_EXP 104
59152: PUSH
59153: LD_VAR 0 4
59157: ARRAY
59158: PPUSH
59159: LD_INT 1
59161: PPUSH
59162: CALL_OW 3
59166: PPUSH
59167: CALL_OW 1
59171: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
59172: LD_ADDR_EXP 106
59176: PUSH
59177: LD_EXP 106
59181: PPUSH
59182: LD_VAR 0 4
59186: PUSH
59187: LD_EXP 106
59191: PUSH
59192: LD_VAR 0 4
59196: ARRAY
59197: PUSH
59198: LD_INT 1
59200: PLUS
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PPUSH
59206: LD_VAR 0 1
59210: PPUSH
59211: CALL 66341 0 3
59215: ST_TO_ADDR
// exit ;
59216: POP
59217: POP
59218: GO 59224
// end ; end ;
59220: GO 59068
59222: POP
59223: POP
// end ;
59224: LD_VAR 0 3
59228: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
59229: LD_INT 0
59231: PPUSH
59232: PPUSH
59233: PPUSH
// if not mc_bases or not skirmish then
59234: LD_EXP 99
59238: NOT
59239: PUSH
59240: LD_EXP 97
59244: NOT
59245: OR
59246: IFFALSE 59250
// exit ;
59248: GO 59440
// for i = 1 to mc_bases do
59250: LD_ADDR_VAR 0 4
59254: PUSH
59255: DOUBLE
59256: LD_INT 1
59258: DEC
59259: ST_TO_ADDR
59260: LD_EXP 99
59264: PUSH
59265: FOR_TO
59266: IFFALSE 59353
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
59268: LD_VAR 0 1
59272: PUSH
59273: LD_EXP 107
59277: PUSH
59278: LD_VAR 0 4
59282: ARRAY
59283: IN
59284: PUSH
59285: LD_VAR 0 1
59289: PUSH
59290: LD_EXP 108
59294: PUSH
59295: LD_VAR 0 4
59299: ARRAY
59300: IN
59301: NOT
59302: AND
59303: IFFALSE 59351
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
59305: LD_ADDR_EXP 108
59309: PUSH
59310: LD_EXP 108
59314: PPUSH
59315: LD_VAR 0 4
59319: PUSH
59320: LD_EXP 108
59324: PUSH
59325: LD_VAR 0 4
59329: ARRAY
59330: PUSH
59331: LD_INT 1
59333: PLUS
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PPUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL 66341 0 3
59348: ST_TO_ADDR
// break ;
59349: GO 59353
// end ; end ;
59351: GO 59265
59353: POP
59354: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
59355: LD_VAR 0 1
59359: PPUSH
59360: CALL_OW 257
59364: PUSH
59365: LD_EXP 125
59369: IN
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 266
59380: PUSH
59381: LD_INT 5
59383: EQUAL
59384: AND
59385: PUSH
59386: LD_VAR 0 2
59390: PPUSH
59391: CALL_OW 110
59395: PUSH
59396: LD_INT 18
59398: NONEQUAL
59399: AND
59400: IFFALSE 59440
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
59402: LD_VAR 0 2
59406: PPUSH
59407: CALL_OW 257
59411: PUSH
59412: LD_INT 5
59414: PUSH
59415: LD_INT 8
59417: PUSH
59418: LD_INT 9
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: IN
59426: IFFALSE 59440
// SetClass ( unit , 1 ) ;
59428: LD_VAR 0 2
59432: PPUSH
59433: LD_INT 1
59435: PPUSH
59436: CALL_OW 336
// end ;
59440: LD_VAR 0 3
59444: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
59445: LD_INT 0
59447: PPUSH
59448: PPUSH
// if not mc_bases or not skirmish then
59449: LD_EXP 99
59453: NOT
59454: PUSH
59455: LD_EXP 97
59459: NOT
59460: OR
59461: IFFALSE 59465
// exit ;
59463: GO 59581
// if GetLives ( abandoned_vehicle ) > 250 then
59465: LD_VAR 0 2
59469: PPUSH
59470: CALL_OW 256
59474: PUSH
59475: LD_INT 250
59477: GREATER
59478: IFFALSE 59482
// exit ;
59480: GO 59581
// for i = 1 to mc_bases do
59482: LD_ADDR_VAR 0 6
59486: PUSH
59487: DOUBLE
59488: LD_INT 1
59490: DEC
59491: ST_TO_ADDR
59492: LD_EXP 99
59496: PUSH
59497: FOR_TO
59498: IFFALSE 59579
// begin if driver in mc_bases [ i ] then
59500: LD_VAR 0 1
59504: PUSH
59505: LD_EXP 99
59509: PUSH
59510: LD_VAR 0 6
59514: ARRAY
59515: IN
59516: IFFALSE 59577
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
59518: LD_VAR 0 1
59522: PPUSH
59523: LD_EXP 99
59527: PUSH
59528: LD_VAR 0 6
59532: ARRAY
59533: PPUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 30
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 30
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: PPUSH
59562: CALL_OW 72
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: PPUSH
59571: CALL_OW 112
// break ;
59575: GO 59579
// end ; end ;
59577: GO 59497
59579: POP
59580: POP
// end ; end_of_file
59581: LD_VAR 0 5
59585: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
59586: LD_INT 0
59588: PPUSH
59589: PPUSH
// if exist_mode then
59590: LD_VAR 0 2
59594: IFFALSE 59619
// unit := CreateCharacter ( prefix & ident ) else
59596: LD_ADDR_VAR 0 5
59600: PUSH
59601: LD_VAR 0 3
59605: PUSH
59606: LD_VAR 0 1
59610: STR
59611: PPUSH
59612: CALL_OW 34
59616: ST_TO_ADDR
59617: GO 59634
// unit := NewCharacter ( ident ) ;
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: CALL_OW 25
59633: ST_TO_ADDR
// result := unit ;
59634: LD_ADDR_VAR 0 4
59638: PUSH
59639: LD_VAR 0 5
59643: ST_TO_ADDR
// end ;
59644: LD_VAR 0 4
59648: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
59649: LD_INT 0
59651: PPUSH
59652: PPUSH
// if not side or not nation then
59653: LD_VAR 0 1
59657: NOT
59658: PUSH
59659: LD_VAR 0 2
59663: NOT
59664: OR
59665: IFFALSE 59669
// exit ;
59667: GO 60305
// case nation of nation_american :
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 1
59676: DOUBLE
59677: EQUAL
59678: IFTRUE 59682
59680: GO 59852
59682: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
59683: LD_ADDR_VAR 0 4
59687: PUSH
59688: LD_INT 35
59690: PUSH
59691: LD_INT 45
59693: PUSH
59694: LD_INT 46
59696: PUSH
59697: LD_INT 47
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 6
59708: PUSH
59709: LD_INT 15
59711: PUSH
59712: LD_INT 16
59714: PUSH
59715: LD_INT 7
59717: PUSH
59718: LD_INT 12
59720: PUSH
59721: LD_INT 13
59723: PUSH
59724: LD_INT 10
59726: PUSH
59727: LD_INT 14
59729: PUSH
59730: LD_INT 20
59732: PUSH
59733: LD_INT 21
59735: PUSH
59736: LD_INT 22
59738: PUSH
59739: LD_INT 25
59741: PUSH
59742: LD_INT 32
59744: PUSH
59745: LD_INT 27
59747: PUSH
59748: LD_INT 36
59750: PUSH
59751: LD_INT 69
59753: PUSH
59754: LD_INT 39
59756: PUSH
59757: LD_INT 34
59759: PUSH
59760: LD_INT 40
59762: PUSH
59763: LD_INT 48
59765: PUSH
59766: LD_INT 49
59768: PUSH
59769: LD_INT 50
59771: PUSH
59772: LD_INT 51
59774: PUSH
59775: LD_INT 52
59777: PUSH
59778: LD_INT 53
59780: PUSH
59781: LD_INT 54
59783: PUSH
59784: LD_INT 55
59786: PUSH
59787: LD_INT 56
59789: PUSH
59790: LD_INT 57
59792: PUSH
59793: LD_INT 58
59795: PUSH
59796: LD_INT 59
59798: PUSH
59799: LD_INT 60
59801: PUSH
59802: LD_INT 61
59804: PUSH
59805: LD_INT 62
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
59850: GO 60229
59852: LD_INT 2
59854: DOUBLE
59855: EQUAL
59856: IFTRUE 59860
59858: GO 60038
59860: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
59861: LD_ADDR_VAR 0 4
59865: PUSH
59866: LD_INT 35
59868: PUSH
59869: LD_INT 45
59871: PUSH
59872: LD_INT 46
59874: PUSH
59875: LD_INT 47
59877: PUSH
59878: LD_INT 70
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 11
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: LD_INT 4
59892: PUSH
59893: LD_INT 5
59895: PUSH
59896: LD_INT 6
59898: PUSH
59899: LD_INT 15
59901: PUSH
59902: LD_INT 18
59904: PUSH
59905: LD_INT 7
59907: PUSH
59908: LD_INT 17
59910: PUSH
59911: LD_INT 8
59913: PUSH
59914: LD_INT 20
59916: PUSH
59917: LD_INT 21
59919: PUSH
59920: LD_INT 22
59922: PUSH
59923: LD_INT 72
59925: PUSH
59926: LD_INT 26
59928: PUSH
59929: LD_INT 69
59931: PUSH
59932: LD_INT 39
59934: PUSH
59935: LD_INT 40
59937: PUSH
59938: LD_INT 41
59940: PUSH
59941: LD_INT 42
59943: PUSH
59944: LD_INT 43
59946: PUSH
59947: LD_INT 48
59949: PUSH
59950: LD_INT 49
59952: PUSH
59953: LD_INT 50
59955: PUSH
59956: LD_INT 51
59958: PUSH
59959: LD_INT 52
59961: PUSH
59962: LD_INT 53
59964: PUSH
59965: LD_INT 54
59967: PUSH
59968: LD_INT 55
59970: PUSH
59971: LD_INT 56
59973: PUSH
59974: LD_INT 60
59976: PUSH
59977: LD_INT 61
59979: PUSH
59980: LD_INT 62
59982: PUSH
59983: LD_INT 66
59985: PUSH
59986: LD_INT 67
59988: PUSH
59989: LD_INT 68
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: ST_TO_ADDR
60036: GO 60229
60038: LD_INT 3
60040: DOUBLE
60041: EQUAL
60042: IFTRUE 60046
60044: GO 60228
60046: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
60047: LD_ADDR_VAR 0 4
60051: PUSH
60052: LD_INT 46
60054: PUSH
60055: LD_INT 47
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 11
60066: PUSH
60067: LD_INT 9
60069: PUSH
60070: LD_INT 20
60072: PUSH
60073: LD_INT 19
60075: PUSH
60076: LD_INT 21
60078: PUSH
60079: LD_INT 24
60081: PUSH
60082: LD_INT 22
60084: PUSH
60085: LD_INT 25
60087: PUSH
60088: LD_INT 28
60090: PUSH
60091: LD_INT 29
60093: PUSH
60094: LD_INT 30
60096: PUSH
60097: LD_INT 31
60099: PUSH
60100: LD_INT 37
60102: PUSH
60103: LD_INT 38
60105: PUSH
60106: LD_INT 32
60108: PUSH
60109: LD_INT 27
60111: PUSH
60112: LD_INT 33
60114: PUSH
60115: LD_INT 69
60117: PUSH
60118: LD_INT 39
60120: PUSH
60121: LD_INT 34
60123: PUSH
60124: LD_INT 40
60126: PUSH
60127: LD_INT 71
60129: PUSH
60130: LD_INT 23
60132: PUSH
60133: LD_INT 44
60135: PUSH
60136: LD_INT 48
60138: PUSH
60139: LD_INT 49
60141: PUSH
60142: LD_INT 50
60144: PUSH
60145: LD_INT 51
60147: PUSH
60148: LD_INT 52
60150: PUSH
60151: LD_INT 53
60153: PUSH
60154: LD_INT 54
60156: PUSH
60157: LD_INT 55
60159: PUSH
60160: LD_INT 56
60162: PUSH
60163: LD_INT 57
60165: PUSH
60166: LD_INT 58
60168: PUSH
60169: LD_INT 59
60171: PUSH
60172: LD_INT 63
60174: PUSH
60175: LD_INT 64
60177: PUSH
60178: LD_INT 65
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: ST_TO_ADDR
60226: GO 60229
60228: POP
// if state > - 1 and state < 3 then
60229: LD_VAR 0 3
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: GREATER
60238: PUSH
60239: LD_VAR 0 3
60243: PUSH
60244: LD_INT 3
60246: LESS
60247: AND
60248: IFFALSE 60305
// for i in result do
60250: LD_ADDR_VAR 0 5
60254: PUSH
60255: LD_VAR 0 4
60259: PUSH
60260: FOR_IN
60261: IFFALSE 60303
// if GetTech ( i , side ) <> state then
60263: LD_VAR 0 5
60267: PPUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 321
60277: PUSH
60278: LD_VAR 0 3
60282: NONEQUAL
60283: IFFALSE 60301
// result := result diff i ;
60285: LD_ADDR_VAR 0 4
60289: PUSH
60290: LD_VAR 0 4
60294: PUSH
60295: LD_VAR 0 5
60299: DIFF
60300: ST_TO_ADDR
60301: GO 60260
60303: POP
60304: POP
// end ;
60305: LD_VAR 0 4
60309: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
60310: LD_INT 0
60312: PPUSH
60313: PPUSH
60314: PPUSH
// result := true ;
60315: LD_ADDR_VAR 0 3
60319: PUSH
60320: LD_INT 1
60322: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
60323: LD_ADDR_VAR 0 5
60327: PUSH
60328: LD_VAR 0 2
60332: PPUSH
60333: CALL_OW 480
60337: ST_TO_ADDR
// if not tmp then
60338: LD_VAR 0 5
60342: NOT
60343: IFFALSE 60347
// exit ;
60345: GO 60396
// for i in tmp do
60347: LD_ADDR_VAR 0 4
60351: PUSH
60352: LD_VAR 0 5
60356: PUSH
60357: FOR_IN
60358: IFFALSE 60394
// if GetTech ( i , side ) <> state_researched then
60360: LD_VAR 0 4
60364: PPUSH
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL_OW 321
60374: PUSH
60375: LD_INT 2
60377: NONEQUAL
60378: IFFALSE 60392
// begin result := false ;
60380: LD_ADDR_VAR 0 3
60384: PUSH
60385: LD_INT 0
60387: ST_TO_ADDR
// exit ;
60388: POP
60389: POP
60390: GO 60396
// end ;
60392: GO 60357
60394: POP
60395: POP
// end ;
60396: LD_VAR 0 3
60400: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
60401: LD_INT 0
60403: PPUSH
60404: PPUSH
60405: PPUSH
60406: PPUSH
60407: PPUSH
60408: PPUSH
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
60416: LD_VAR 0 1
60420: NOT
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: CALL_OW 257
60431: PUSH
60432: LD_INT 9
60434: NONEQUAL
60435: OR
60436: IFFALSE 60440
// exit ;
60438: GO 61013
// side := GetSide ( unit ) ;
60440: LD_ADDR_VAR 0 9
60444: PUSH
60445: LD_VAR 0 1
60449: PPUSH
60450: CALL_OW 255
60454: ST_TO_ADDR
// tech_space := tech_spacanom ;
60455: LD_ADDR_VAR 0 12
60459: PUSH
60460: LD_INT 29
60462: ST_TO_ADDR
// tech_time := tech_taurad ;
60463: LD_ADDR_VAR 0 13
60467: PUSH
60468: LD_INT 28
60470: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
60471: LD_ADDR_VAR 0 11
60475: PUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 310
60485: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
60486: LD_VAR 0 11
60490: PPUSH
60491: CALL_OW 247
60495: PUSH
60496: LD_INT 2
60498: EQUAL
60499: IFFALSE 60503
// exit ;
60501: GO 61013
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60503: LD_ADDR_VAR 0 8
60507: PUSH
60508: LD_INT 81
60510: PUSH
60511: LD_VAR 0 9
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 21
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PPUSH
60541: CALL_OW 69
60545: ST_TO_ADDR
// if not tmp then
60546: LD_VAR 0 8
60550: NOT
60551: IFFALSE 60555
// exit ;
60553: GO 61013
// if in_unit then
60555: LD_VAR 0 11
60559: IFFALSE 60583
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
60561: LD_ADDR_VAR 0 10
60565: PUSH
60566: LD_VAR 0 8
60570: PPUSH
60571: LD_VAR 0 11
60575: PPUSH
60576: CALL_OW 74
60580: ST_TO_ADDR
60581: GO 60603
// enemy := NearestUnitToUnit ( tmp , unit ) ;
60583: LD_ADDR_VAR 0 10
60587: PUSH
60588: LD_VAR 0 8
60592: PPUSH
60593: LD_VAR 0 1
60597: PPUSH
60598: CALL_OW 74
60602: ST_TO_ADDR
// if not enemy then
60603: LD_VAR 0 10
60607: NOT
60608: IFFALSE 60612
// exit ;
60610: GO 61013
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
60612: LD_VAR 0 11
60616: PUSH
60617: LD_VAR 0 11
60621: PPUSH
60622: LD_VAR 0 10
60626: PPUSH
60627: CALL_OW 296
60631: PUSH
60632: LD_INT 13
60634: GREATER
60635: AND
60636: PUSH
60637: LD_VAR 0 1
60641: PPUSH
60642: LD_VAR 0 10
60646: PPUSH
60647: CALL_OW 296
60651: PUSH
60652: LD_INT 12
60654: GREATER
60655: OR
60656: IFFALSE 60660
// exit ;
60658: GO 61013
// missile := [ 1 ] ;
60660: LD_ADDR_VAR 0 14
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: ST_TO_ADDR
// if Researched ( side , tech_space ) then
60671: LD_VAR 0 9
60675: PPUSH
60676: LD_VAR 0 12
60680: PPUSH
60681: CALL_OW 325
60685: IFFALSE 60714
// missile := Insert ( missile , missile + 1 , 2 ) ;
60687: LD_ADDR_VAR 0 14
60691: PUSH
60692: LD_VAR 0 14
60696: PPUSH
60697: LD_VAR 0 14
60701: PUSH
60702: LD_INT 1
60704: PLUS
60705: PPUSH
60706: LD_INT 2
60708: PPUSH
60709: CALL_OW 2
60713: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
60714: LD_VAR 0 9
60718: PPUSH
60719: LD_VAR 0 13
60723: PPUSH
60724: CALL_OW 325
60728: PUSH
60729: LD_VAR 0 10
60733: PPUSH
60734: CALL_OW 255
60738: PPUSH
60739: LD_VAR 0 13
60743: PPUSH
60744: CALL_OW 325
60748: NOT
60749: AND
60750: IFFALSE 60779
// missile := Insert ( missile , missile + 1 , 3 ) ;
60752: LD_ADDR_VAR 0 14
60756: PUSH
60757: LD_VAR 0 14
60761: PPUSH
60762: LD_VAR 0 14
60766: PUSH
60767: LD_INT 1
60769: PLUS
60770: PPUSH
60771: LD_INT 3
60773: PPUSH
60774: CALL_OW 2
60778: ST_TO_ADDR
// if missile < 2 then
60779: LD_VAR 0 14
60783: PUSH
60784: LD_INT 2
60786: LESS
60787: IFFALSE 60791
// exit ;
60789: GO 61013
// x := GetX ( enemy ) ;
60791: LD_ADDR_VAR 0 4
60795: PUSH
60796: LD_VAR 0 10
60800: PPUSH
60801: CALL_OW 250
60805: ST_TO_ADDR
// y := GetY ( enemy ) ;
60806: LD_ADDR_VAR 0 5
60810: PUSH
60811: LD_VAR 0 10
60815: PPUSH
60816: CALL_OW 251
60820: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
60821: LD_ADDR_VAR 0 6
60825: PUSH
60826: LD_VAR 0 4
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PPUSH
60835: LD_INT 1
60837: PPUSH
60838: CALL_OW 12
60842: PLUS
60843: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
60844: LD_ADDR_VAR 0 7
60848: PUSH
60849: LD_VAR 0 5
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PPUSH
60858: LD_INT 1
60860: PPUSH
60861: CALL_OW 12
60865: PLUS
60866: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60867: LD_VAR 0 6
60871: PPUSH
60872: LD_VAR 0 7
60876: PPUSH
60877: CALL_OW 488
60881: NOT
60882: IFFALSE 60904
// begin _x := x ;
60884: LD_ADDR_VAR 0 6
60888: PUSH
60889: LD_VAR 0 4
60893: ST_TO_ADDR
// _y := y ;
60894: LD_ADDR_VAR 0 7
60898: PUSH
60899: LD_VAR 0 5
60903: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
60904: LD_ADDR_VAR 0 3
60908: PUSH
60909: LD_INT 1
60911: PPUSH
60912: LD_VAR 0 14
60916: PPUSH
60917: CALL_OW 12
60921: ST_TO_ADDR
// case i of 1 :
60922: LD_VAR 0 3
60926: PUSH
60927: LD_INT 1
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60935
60933: GO 60952
60935: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
60936: LD_VAR 0 1
60940: PPUSH
60941: LD_VAR 0 10
60945: PPUSH
60946: CALL_OW 115
60950: GO 61013
60952: LD_INT 2
60954: DOUBLE
60955: EQUAL
60956: IFTRUE 60960
60958: GO 60982
60960: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
60961: LD_VAR 0 1
60965: PPUSH
60966: LD_VAR 0 6
60970: PPUSH
60971: LD_VAR 0 7
60975: PPUSH
60976: CALL_OW 153
60980: GO 61013
60982: LD_INT 3
60984: DOUBLE
60985: EQUAL
60986: IFTRUE 60990
60988: GO 61012
60990: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
60991: LD_VAR 0 1
60995: PPUSH
60996: LD_VAR 0 6
61000: PPUSH
61001: LD_VAR 0 7
61005: PPUSH
61006: CALL_OW 154
61010: GO 61013
61012: POP
// end ;
61013: LD_VAR 0 2
61017: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
61018: LD_INT 0
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
// if not unit or not building then
61026: LD_VAR 0 1
61030: NOT
61031: PUSH
61032: LD_VAR 0 2
61036: NOT
61037: OR
61038: IFFALSE 61042
// exit ;
61040: GO 61200
// x := GetX ( building ) ;
61042: LD_ADDR_VAR 0 5
61046: PUSH
61047: LD_VAR 0 2
61051: PPUSH
61052: CALL_OW 250
61056: ST_TO_ADDR
// y := GetY ( building ) ;
61057: LD_ADDR_VAR 0 6
61061: PUSH
61062: LD_VAR 0 2
61066: PPUSH
61067: CALL_OW 251
61071: ST_TO_ADDR
// for i = 0 to 5 do
61072: LD_ADDR_VAR 0 4
61076: PUSH
61077: DOUBLE
61078: LD_INT 0
61080: DEC
61081: ST_TO_ADDR
61082: LD_INT 5
61084: PUSH
61085: FOR_TO
61086: IFFALSE 61198
// begin _x := ShiftX ( x , i , 3 ) ;
61088: LD_ADDR_VAR 0 7
61092: PUSH
61093: LD_VAR 0 5
61097: PPUSH
61098: LD_VAR 0 4
61102: PPUSH
61103: LD_INT 3
61105: PPUSH
61106: CALL_OW 272
61110: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
61111: LD_ADDR_VAR 0 8
61115: PUSH
61116: LD_VAR 0 6
61120: PPUSH
61121: LD_VAR 0 4
61125: PPUSH
61126: LD_INT 3
61128: PPUSH
61129: CALL_OW 273
61133: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61134: LD_VAR 0 7
61138: PPUSH
61139: LD_VAR 0 8
61143: PPUSH
61144: CALL_OW 488
61148: NOT
61149: IFFALSE 61153
// continue ;
61151: GO 61085
// if HexInfo ( _x , _y ) = 0 then
61153: LD_VAR 0 7
61157: PPUSH
61158: LD_VAR 0 8
61162: PPUSH
61163: CALL_OW 428
61167: PUSH
61168: LD_INT 0
61170: EQUAL
61171: IFFALSE 61196
// begin ComMoveXY ( unit , _x , _y ) ;
61173: LD_VAR 0 1
61177: PPUSH
61178: LD_VAR 0 7
61182: PPUSH
61183: LD_VAR 0 8
61187: PPUSH
61188: CALL_OW 111
// exit ;
61192: POP
61193: POP
61194: GO 61200
// end ; end ;
61196: GO 61085
61198: POP
61199: POP
// end ;
61200: LD_VAR 0 3
61204: RET
// export function ScanBase ( side , base_area ) ; begin
61205: LD_INT 0
61207: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
61208: LD_ADDR_VAR 0 3
61212: PUSH
61213: LD_VAR 0 2
61217: PPUSH
61218: LD_INT 81
61220: PUSH
61221: LD_VAR 0 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PPUSH
61230: CALL_OW 70
61234: ST_TO_ADDR
// end ;
61235: LD_VAR 0 3
61239: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
61240: LD_INT 0
61242: PPUSH
61243: PPUSH
61244: PPUSH
61245: PPUSH
61246: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
61247: LD_VAR 0 1
61251: NOT
61252: PUSH
61253: LD_EXP 99
61257: PUSH
61258: LD_VAR 0 1
61262: ARRAY
61263: NOT
61264: OR
61265: PUSH
61266: LD_VAR 0 2
61270: NOT
61271: OR
61272: PUSH
61273: LD_VAR 0 3
61277: NOT
61278: OR
61279: IFFALSE 61283
// exit ;
61281: GO 61733
// side := mc_sides [ base ] ;
61283: LD_ADDR_VAR 0 6
61287: PUSH
61288: LD_EXP 125
61292: PUSH
61293: LD_VAR 0 1
61297: ARRAY
61298: ST_TO_ADDR
// if not side then
61299: LD_VAR 0 6
61303: NOT
61304: IFFALSE 61308
// exit ;
61306: GO 61733
// for i in solds do
61308: LD_ADDR_VAR 0 7
61312: PUSH
61313: LD_VAR 0 2
61317: PUSH
61318: FOR_IN
61319: IFFALSE 61380
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
61321: LD_VAR 0 7
61325: PPUSH
61326: CALL_OW 310
61330: PPUSH
61331: CALL_OW 266
61335: PUSH
61336: LD_INT 32
61338: PUSH
61339: LD_INT 31
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: IN
61346: IFFALSE 61366
// solds := solds diff i else
61348: LD_ADDR_VAR 0 2
61352: PUSH
61353: LD_VAR 0 2
61357: PUSH
61358: LD_VAR 0 7
61362: DIFF
61363: ST_TO_ADDR
61364: GO 61378
// SetTag ( i , 18 ) ;
61366: LD_VAR 0 7
61370: PPUSH
61371: LD_INT 18
61373: PPUSH
61374: CALL_OW 109
61378: GO 61318
61380: POP
61381: POP
// if not solds then
61382: LD_VAR 0 2
61386: NOT
61387: IFFALSE 61391
// exit ;
61389: GO 61733
// repeat wait ( 0 0$1 ) ;
61391: LD_INT 35
61393: PPUSH
61394: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
61398: LD_ADDR_VAR 0 5
61402: PUSH
61403: LD_VAR 0 6
61407: PPUSH
61408: LD_VAR 0 3
61412: PPUSH
61413: CALL 61205 0 2
61417: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
61418: LD_VAR 0 5
61422: NOT
61423: PUSH
61424: LD_VAR 0 5
61428: PUSH
61429: LD_INT 3
61431: GREATER
61432: OR
61433: PUSH
61434: LD_EXP 121
61438: PUSH
61439: LD_VAR 0 1
61443: ARRAY
61444: OR
61445: IFFALSE 61486
// begin for i in solds do
61447: LD_ADDR_VAR 0 7
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: FOR_IN
61458: IFFALSE 61482
// if HasTask ( i ) then
61460: LD_VAR 0 7
61464: PPUSH
61465: CALL_OW 314
61469: IFFALSE 61480
// ComStop ( i ) ;
61471: LD_VAR 0 7
61475: PPUSH
61476: CALL_OW 141
61480: GO 61457
61482: POP
61483: POP
// break ;
61484: GO 61721
// end ; for i in solds do
61486: LD_ADDR_VAR 0 7
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: FOR_IN
61497: IFFALSE 61713
// begin if IsInUnit ( i ) then
61499: LD_VAR 0 7
61503: PPUSH
61504: CALL_OW 310
61508: IFFALSE 61519
// ComExitBuilding ( i ) ;
61510: LD_VAR 0 7
61514: PPUSH
61515: CALL_OW 122
// if GetLives ( i ) > 333 then
61519: LD_VAR 0 7
61523: PPUSH
61524: CALL_OW 256
61528: PUSH
61529: LD_INT 333
61531: GREATER
61532: IFFALSE 61560
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61534: LD_VAR 0 7
61538: PPUSH
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 7
61548: PPUSH
61549: CALL_OW 74
61553: PPUSH
61554: CALL_OW 115
61558: GO 61711
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
61560: LD_ADDR_VAR 0 8
61564: PUSH
61565: LD_EXP 99
61569: PUSH
61570: LD_VAR 0 1
61574: ARRAY
61575: PPUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 30
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 30
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 30
61601: PUSH
61602: LD_INT 6
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: PPUSH
61615: CALL_OW 72
61619: PPUSH
61620: LD_VAR 0 7
61624: PPUSH
61625: CALL_OW 74
61629: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
61630: LD_VAR 0 7
61634: PPUSH
61635: LD_VAR 0 8
61639: PPUSH
61640: CALL_OW 250
61644: PPUSH
61645: LD_INT 3
61647: PPUSH
61648: LD_INT 5
61650: PPUSH
61651: CALL_OW 272
61655: PPUSH
61656: LD_VAR 0 8
61660: PPUSH
61661: CALL_OW 251
61665: PPUSH
61666: LD_INT 3
61668: PPUSH
61669: LD_INT 5
61671: PPUSH
61672: CALL_OW 273
61676: PPUSH
61677: CALL_OW 111
// SetTag ( i , 0 ) ;
61681: LD_VAR 0 7
61685: PPUSH
61686: LD_INT 0
61688: PPUSH
61689: CALL_OW 109
// solds := solds diff i ;
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_VAR 0 7
61707: DIFF
61708: ST_TO_ADDR
// continue ;
61709: GO 61496
// end ; end ;
61711: GO 61496
61713: POP
61714: POP
// until solds ;
61715: LD_VAR 0 2
61719: IFFALSE 61391
// MC_Reset ( base , 18 ) ;
61721: LD_VAR 0 1
61725: PPUSH
61726: LD_INT 18
61728: PPUSH
61729: CALL 34801 0 2
// end ;
61733: LD_VAR 0 4
61737: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
61738: LD_INT 0
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
61746: PPUSH
61747: PPUSH
61748: PPUSH
61749: PPUSH
61750: PPUSH
61751: PPUSH
61752: PPUSH
61753: PPUSH
61754: PPUSH
61755: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
61756: LD_ADDR_VAR 0 12
61760: PUSH
61761: LD_EXP 99
61765: PUSH
61766: LD_VAR 0 1
61770: ARRAY
61771: PPUSH
61772: LD_INT 25
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PPUSH
61782: CALL_OW 72
61786: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61787: LD_ADDR_VAR 0 8
61791: PUSH
61792: LD_EXP 99
61796: PUSH
61797: LD_VAR 0 1
61801: ARRAY
61802: PPUSH
61803: LD_INT 2
61805: PUSH
61806: LD_INT 25
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 25
61818: PUSH
61819: LD_INT 5
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 25
61828: PUSH
61829: LD_INT 8
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 25
61838: PUSH
61839: LD_INT 9
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: PPUSH
61853: CALL_OW 72
61857: ST_TO_ADDR
// if not defenders and not solds then
61858: LD_VAR 0 2
61862: NOT
61863: PUSH
61864: LD_VAR 0 8
61868: NOT
61869: AND
61870: IFFALSE 61874
// exit ;
61872: GO 63240
// depot_under_attack := false ;
61874: LD_ADDR_VAR 0 16
61878: PUSH
61879: LD_INT 0
61881: ST_TO_ADDR
// sold_defenders := [ ] ;
61882: LD_ADDR_VAR 0 17
61886: PUSH
61887: EMPTY
61888: ST_TO_ADDR
// if mechs then
61889: LD_VAR 0 12
61893: IFFALSE 62022
// for i in defenders do
61895: LD_ADDR_VAR 0 5
61899: PUSH
61900: LD_VAR 0 2
61904: PUSH
61905: FOR_IN
61906: IFFALSE 62020
// begin SetTag ( i , 20 ) ;
61908: LD_VAR 0 5
61912: PPUSH
61913: LD_INT 20
61915: PPUSH
61916: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
61920: LD_VAR 0 5
61924: PPUSH
61925: CALL_OW 263
61929: PUSH
61930: LD_INT 1
61932: EQUAL
61933: PUSH
61934: LD_VAR 0 5
61938: PPUSH
61939: CALL_OW 311
61943: NOT
61944: AND
61945: PUSH
61946: LD_VAR 0 12
61950: AND
61951: IFFALSE 62018
// begin un := mechs [ 1 ] ;
61953: LD_ADDR_VAR 0 10
61957: PUSH
61958: LD_VAR 0 12
61962: PUSH
61963: LD_INT 1
61965: ARRAY
61966: ST_TO_ADDR
// ComExitBuilding ( un ) ;
61967: LD_VAR 0 10
61971: PPUSH
61972: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
61976: LD_VAR 0 10
61980: PPUSH
61981: LD_VAR 0 5
61985: PPUSH
61986: CALL_OW 180
// SetTag ( un , 19 ) ;
61990: LD_VAR 0 10
61994: PPUSH
61995: LD_INT 19
61997: PPUSH
61998: CALL_OW 109
// mechs := mechs diff un ;
62002: LD_ADDR_VAR 0 12
62006: PUSH
62007: LD_VAR 0 12
62011: PUSH
62012: LD_VAR 0 10
62016: DIFF
62017: ST_TO_ADDR
// end ; end ;
62018: GO 61905
62020: POP
62021: POP
// if solds then
62022: LD_VAR 0 8
62026: IFFALSE 62085
// for i in solds do
62028: LD_ADDR_VAR 0 5
62032: PUSH
62033: LD_VAR 0 8
62037: PUSH
62038: FOR_IN
62039: IFFALSE 62083
// if not GetTag ( i ) then
62041: LD_VAR 0 5
62045: PPUSH
62046: CALL_OW 110
62050: NOT
62051: IFFALSE 62081
// begin defenders := defenders union i ;
62053: LD_ADDR_VAR 0 2
62057: PUSH
62058: LD_VAR 0 2
62062: PUSH
62063: LD_VAR 0 5
62067: UNION
62068: ST_TO_ADDR
// SetTag ( i , 18 ) ;
62069: LD_VAR 0 5
62073: PPUSH
62074: LD_INT 18
62076: PPUSH
62077: CALL_OW 109
// end ;
62081: GO 62038
62083: POP
62084: POP
// repeat wait ( 0 0$1 ) ;
62085: LD_INT 35
62087: PPUSH
62088: CALL_OW 67
// enemy := mc_scan [ base ] ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_EXP 122
62101: PUSH
62102: LD_VAR 0 1
62106: ARRAY
62107: ST_TO_ADDR
// for i in defenders do
62108: LD_ADDR_VAR 0 5
62112: PUSH
62113: LD_VAR 0 2
62117: PUSH
62118: FOR_IN
62119: IFFALSE 62804
// begin e := NearestUnitToUnit ( enemy , i ) ;
62121: LD_ADDR_VAR 0 13
62125: PUSH
62126: LD_VAR 0 3
62130: PPUSH
62131: LD_VAR 0 5
62135: PPUSH
62136: CALL_OW 74
62140: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
62141: LD_ADDR_VAR 0 16
62145: PUSH
62146: LD_EXP 99
62150: PUSH
62151: LD_VAR 0 1
62155: ARRAY
62156: PPUSH
62157: LD_INT 2
62159: PUSH
62160: LD_INT 30
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 30
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: PPUSH
62185: CALL_OW 72
62189: NOT
62190: PUSH
62191: LD_EXP 99
62195: PUSH
62196: LD_VAR 0 1
62200: ARRAY
62201: PPUSH
62202: LD_INT 2
62204: PUSH
62205: LD_INT 30
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 30
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: PPUSH
62230: CALL_OW 72
62234: PPUSH
62235: CALL_OW 256
62239: PUSH
62240: LD_INT 600
62242: LESS
62243: OR
62244: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
62245: LD_VAR 0 5
62249: PPUSH
62250: CALL_OW 247
62254: PUSH
62255: LD_INT 2
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62263
62261: GO 62510
62263: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
62264: LD_VAR 0 5
62268: PPUSH
62269: CALL_OW 256
62273: PUSH
62274: LD_INT 650
62276: GREATER
62277: PUSH
62278: LD_VAR 0 5
62282: PPUSH
62283: LD_VAR 0 13
62287: PPUSH
62288: CALL_OW 296
62292: PUSH
62293: LD_INT 40
62295: LESS
62296: AND
62297: IFFALSE 62315
// ComAttackUnit ( i , e ) else
62299: LD_VAR 0 5
62303: PPUSH
62304: LD_VAR 0 13
62308: PPUSH
62309: CALL_OW 115
62313: GO 62393
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
62315: LD_VAR 0 5
62319: PPUSH
62320: LD_VAR 0 13
62324: PPUSH
62325: CALL_OW 296
62329: PUSH
62330: LD_INT 30
62332: GREATEREQUAL
62333: PUSH
62334: LD_VAR 0 5
62338: PPUSH
62339: CALL_OW 256
62343: PUSH
62344: LD_INT 650
62346: LESSEQUAL
62347: OR
62348: PUSH
62349: LD_VAR 0 5
62353: PPUSH
62354: LD_EXP 123
62358: PUSH
62359: LD_VAR 0 1
62363: ARRAY
62364: PPUSH
62365: CALL_OW 308
62369: NOT
62370: AND
62371: IFFALSE 62393
// ComMoveToArea ( i , mc_parking [ base ] ) ;
62373: LD_VAR 0 5
62377: PPUSH
62378: LD_EXP 123
62382: PUSH
62383: LD_VAR 0 1
62387: ARRAY
62388: PPUSH
62389: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
62393: LD_VAR 0 5
62397: PPUSH
62398: CALL_OW 256
62402: PUSH
62403: LD_INT 998
62405: LESS
62406: PUSH
62407: LD_VAR 0 5
62411: PPUSH
62412: CALL_OW 263
62416: PUSH
62417: LD_INT 1
62419: EQUAL
62420: AND
62421: PUSH
62422: LD_VAR 0 5
62426: PPUSH
62427: CALL_OW 311
62431: AND
62432: PUSH
62433: LD_VAR 0 5
62437: PPUSH
62438: LD_EXP 123
62442: PUSH
62443: LD_VAR 0 1
62447: ARRAY
62448: PPUSH
62449: CALL_OW 308
62453: AND
62454: IFFALSE 62508
// begin mech := IsDrivenBy ( i ) ;
62456: LD_ADDR_VAR 0 9
62460: PUSH
62461: LD_VAR 0 5
62465: PPUSH
62466: CALL_OW 311
62470: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
62471: LD_VAR 0 9
62475: PPUSH
62476: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
62480: LD_VAR 0 9
62484: PPUSH
62485: LD_VAR 0 5
62489: PPUSH
62490: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
62494: LD_VAR 0 9
62498: PPUSH
62499: LD_VAR 0 5
62503: PPUSH
62504: CALL_OW 180
// end ; end ; unit_human :
62508: GO 62775
62510: LD_INT 1
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62774
62518: POP
// begin b := IsInUnit ( i ) ;
62519: LD_ADDR_VAR 0 18
62523: PUSH
62524: LD_VAR 0 5
62528: PPUSH
62529: CALL_OW 310
62533: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
62534: LD_ADDR_VAR 0 19
62538: PUSH
62539: LD_VAR 0 18
62543: NOT
62544: PUSH
62545: LD_VAR 0 18
62549: PPUSH
62550: CALL_OW 266
62554: PUSH
62555: LD_INT 32
62557: PUSH
62558: LD_INT 31
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: IN
62565: OR
62566: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
62567: LD_VAR 0 16
62571: PUSH
62572: LD_VAR 0 2
62576: PPUSH
62577: LD_INT 21
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PPUSH
62587: CALL_OW 72
62591: PUSH
62592: LD_INT 1
62594: LESSEQUAL
62595: OR
62596: PUSH
62597: LD_VAR 0 19
62601: AND
62602: PUSH
62603: LD_VAR 0 5
62607: PUSH
62608: LD_VAR 0 17
62612: IN
62613: NOT
62614: AND
62615: IFFALSE 62708
// begin if b then
62617: LD_VAR 0 18
62621: IFFALSE 62670
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
62623: LD_VAR 0 18
62627: PPUSH
62628: LD_VAR 0 3
62632: PPUSH
62633: LD_VAR 0 18
62637: PPUSH
62638: CALL_OW 74
62642: PPUSH
62643: CALL_OW 296
62647: PUSH
62648: LD_INT 10
62650: LESS
62651: PUSH
62652: LD_VAR 0 18
62656: PPUSH
62657: CALL_OW 461
62661: PUSH
62662: LD_INT 7
62664: NONEQUAL
62665: AND
62666: IFFALSE 62670
// continue ;
62668: GO 62118
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
62670: LD_ADDR_VAR 0 17
62674: PUSH
62675: LD_VAR 0 17
62679: PPUSH
62680: LD_VAR 0 17
62684: PUSH
62685: LD_INT 1
62687: PLUS
62688: PPUSH
62689: LD_VAR 0 5
62693: PPUSH
62694: CALL_OW 1
62698: ST_TO_ADDR
// ComExitBuilding ( i ) ;
62699: LD_VAR 0 5
62703: PPUSH
62704: CALL_OW 122
// end ; if sold_defenders then
62708: LD_VAR 0 17
62712: IFFALSE 62772
// if i in sold_defenders then
62714: LD_VAR 0 5
62718: PUSH
62719: LD_VAR 0 17
62723: IN
62724: IFFALSE 62772
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
62726: LD_VAR 0 5
62730: PPUSH
62731: CALL_OW 314
62735: NOT
62736: PUSH
62737: LD_VAR 0 5
62741: PPUSH
62742: LD_VAR 0 13
62746: PPUSH
62747: CALL_OW 296
62751: PUSH
62752: LD_INT 30
62754: LESS
62755: AND
62756: IFFALSE 62772
// ComAttackUnit ( i , e ) ;
62758: LD_VAR 0 5
62762: PPUSH
62763: LD_VAR 0 13
62767: PPUSH
62768: CALL_OW 115
// end ; end ; end ;
62772: GO 62775
62774: POP
// if IsDead ( i ) then
62775: LD_VAR 0 5
62779: PPUSH
62780: CALL_OW 301
62784: IFFALSE 62802
// defenders := defenders diff i ;
62786: LD_ADDR_VAR 0 2
62790: PUSH
62791: LD_VAR 0 2
62795: PUSH
62796: LD_VAR 0 5
62800: DIFF
62801: ST_TO_ADDR
// end ;
62802: GO 62118
62804: POP
62805: POP
// until not enemy or not defenders ;
62806: LD_VAR 0 3
62810: NOT
62811: PUSH
62812: LD_VAR 0 2
62816: NOT
62817: OR
62818: IFFALSE 62085
// MC_Reset ( base , 18 ) ;
62820: LD_VAR 0 1
62824: PPUSH
62825: LD_INT 18
62827: PPUSH
62828: CALL 34801 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62832: LD_ADDR_VAR 0 2
62836: PUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_VAR 0 2
62846: PPUSH
62847: LD_INT 2
62849: PUSH
62850: LD_INT 25
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 25
62862: PUSH
62863: LD_INT 5
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 25
62872: PUSH
62873: LD_INT 8
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 25
62882: PUSH
62883: LD_INT 9
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: PPUSH
62897: CALL_OW 72
62901: DIFF
62902: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
62903: LD_VAR 0 3
62907: NOT
62908: PUSH
62909: LD_VAR 0 2
62913: PPUSH
62914: LD_INT 21
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PPUSH
62924: CALL_OW 72
62928: AND
62929: IFFALSE 63191
// begin tmp := FilterByTag ( defenders , 19 ) ;
62931: LD_ADDR_VAR 0 11
62935: PUSH
62936: LD_VAR 0 2
62940: PPUSH
62941: LD_INT 19
62943: PPUSH
62944: CALL 99538 0 2
62948: ST_TO_ADDR
// if tmp then
62949: LD_VAR 0 11
62953: IFFALSE 63023
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
62955: LD_ADDR_VAR 0 11
62959: PUSH
62960: LD_VAR 0 11
62964: PPUSH
62965: LD_INT 25
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PPUSH
62975: CALL_OW 72
62979: ST_TO_ADDR
// if tmp then
62980: LD_VAR 0 11
62984: IFFALSE 63023
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
62986: LD_ADDR_EXP 111
62990: PUSH
62991: LD_EXP 111
62995: PPUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: LD_EXP 111
63005: PUSH
63006: LD_VAR 0 1
63010: ARRAY
63011: PUSH
63012: LD_VAR 0 11
63016: UNION
63017: PPUSH
63018: CALL_OW 1
63022: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
63023: LD_VAR 0 1
63027: PPUSH
63028: LD_INT 19
63030: PPUSH
63031: CALL 34801 0 2
// repeat wait ( 0 0$1 ) ;
63035: LD_INT 35
63037: PPUSH
63038: CALL_OW 67
// for i in defenders do
63042: LD_ADDR_VAR 0 5
63046: PUSH
63047: LD_VAR 0 2
63051: PUSH
63052: FOR_IN
63053: IFFALSE 63142
// begin if not IsInArea ( i , mc_parking [ base ] ) then
63055: LD_VAR 0 5
63059: PPUSH
63060: LD_EXP 123
63064: PUSH
63065: LD_VAR 0 1
63069: ARRAY
63070: PPUSH
63071: CALL_OW 308
63075: NOT
63076: IFFALSE 63100
// ComMoveToArea ( i , mc_parking [ base ] ) else
63078: LD_VAR 0 5
63082: PPUSH
63083: LD_EXP 123
63087: PUSH
63088: LD_VAR 0 1
63092: ARRAY
63093: PPUSH
63094: CALL_OW 113
63098: GO 63140
// if GetControl ( i ) = control_manual then
63100: LD_VAR 0 5
63104: PPUSH
63105: CALL_OW 263
63109: PUSH
63110: LD_INT 1
63112: EQUAL
63113: IFFALSE 63140
// if IsDrivenBy ( i ) then
63115: LD_VAR 0 5
63119: PPUSH
63120: CALL_OW 311
63124: IFFALSE 63140
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 311
63135: PPUSH
63136: CALL_OW 121
// end ;
63140: GO 63052
63142: POP
63143: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
63144: LD_VAR 0 2
63148: PPUSH
63149: LD_INT 95
63151: PUSH
63152: LD_EXP 123
63156: PUSH
63157: LD_VAR 0 1
63161: ARRAY
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 72
63171: PUSH
63172: LD_VAR 0 2
63176: EQUAL
63177: PUSH
63178: LD_EXP 122
63182: PUSH
63183: LD_VAR 0 1
63187: ARRAY
63188: OR
63189: IFFALSE 63035
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
63191: LD_ADDR_EXP 121
63195: PUSH
63196: LD_EXP 121
63200: PPUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_EXP 121
63210: PUSH
63211: LD_VAR 0 1
63215: ARRAY
63216: PUSH
63217: LD_VAR 0 2
63221: UNION
63222: PPUSH
63223: CALL_OW 1
63227: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
63228: LD_VAR 0 1
63232: PPUSH
63233: LD_INT 20
63235: PPUSH
63236: CALL 34801 0 2
// end ;
63240: LD_VAR 0 4
63244: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
63245: LD_INT 0
63247: PPUSH
63248: PPUSH
63249: PPUSH
63250: PPUSH
// result := false ;
63251: LD_ADDR_VAR 0 2
63255: PUSH
63256: LD_INT 0
63258: ST_TO_ADDR
// side := GetSide ( unit ) ;
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_VAR 0 1
63268: PPUSH
63269: CALL_OW 255
63273: ST_TO_ADDR
// nat := GetNation ( unit ) ;
63274: LD_ADDR_VAR 0 4
63278: PUSH
63279: LD_VAR 0 1
63283: PPUSH
63284: CALL_OW 248
63288: ST_TO_ADDR
// case nat of 1 :
63289: LD_VAR 0 4
63293: PUSH
63294: LD_INT 1
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63302
63300: GO 63313
63302: POP
// tech := tech_lassight ; 2 :
63303: LD_ADDR_VAR 0 5
63307: PUSH
63308: LD_INT 12
63310: ST_TO_ADDR
63311: GO 63352
63313: LD_INT 2
63315: DOUBLE
63316: EQUAL
63317: IFTRUE 63321
63319: GO 63332
63321: POP
// tech := tech_mortar ; 3 :
63322: LD_ADDR_VAR 0 5
63326: PUSH
63327: LD_INT 41
63329: ST_TO_ADDR
63330: GO 63352
63332: LD_INT 3
63334: DOUBLE
63335: EQUAL
63336: IFTRUE 63340
63338: GO 63351
63340: POP
// tech := tech_bazooka ; end ;
63341: LD_ADDR_VAR 0 5
63345: PUSH
63346: LD_INT 44
63348: ST_TO_ADDR
63349: GO 63352
63351: POP
// if Researched ( side , tech ) then
63352: LD_VAR 0 3
63356: PPUSH
63357: LD_VAR 0 5
63361: PPUSH
63362: CALL_OW 325
63366: IFFALSE 63393
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
63368: LD_ADDR_VAR 0 2
63372: PUSH
63373: LD_INT 5
63375: PUSH
63376: LD_INT 8
63378: PUSH
63379: LD_INT 9
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: PUSH
63387: LD_VAR 0 4
63391: ARRAY
63392: ST_TO_ADDR
// end ;
63393: LD_VAR 0 2
63397: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
63398: LD_INT 0
63400: PPUSH
63401: PPUSH
63402: PPUSH
// if not mines then
63403: LD_VAR 0 2
63407: NOT
63408: IFFALSE 63412
// exit ;
63410: GO 63556
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_INT 81
63419: PUSH
63420: LD_VAR 0 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: LD_INT 21
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PPUSH
63450: CALL_OW 69
63454: ST_TO_ADDR
// for i in mines do
63455: LD_ADDR_VAR 0 4
63459: PUSH
63460: LD_VAR 0 2
63464: PUSH
63465: FOR_IN
63466: IFFALSE 63554
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
63468: LD_VAR 0 4
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: PPUSH
63477: LD_VAR 0 4
63481: PUSH
63482: LD_INT 2
63484: ARRAY
63485: PPUSH
63486: CALL_OW 458
63490: NOT
63491: IFFALSE 63495
// continue ;
63493: GO 63465
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
63495: LD_VAR 0 4
63499: PUSH
63500: LD_INT 1
63502: ARRAY
63503: PPUSH
63504: LD_VAR 0 4
63508: PUSH
63509: LD_INT 2
63511: ARRAY
63512: PPUSH
63513: CALL_OW 428
63517: PUSH
63518: LD_VAR 0 5
63522: IN
63523: IFFALSE 63552
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
63525: LD_VAR 0 4
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PPUSH
63534: LD_VAR 0 4
63538: PUSH
63539: LD_INT 2
63541: ARRAY
63542: PPUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: CALL_OW 456
// end ;
63552: GO 63465
63554: POP
63555: POP
// end ;
63556: LD_VAR 0 3
63560: RET
// export function Count ( array ) ; var i ; begin
63561: LD_INT 0
63563: PPUSH
63564: PPUSH
// result := 0 ;
63565: LD_ADDR_VAR 0 2
63569: PUSH
63570: LD_INT 0
63572: ST_TO_ADDR
// for i in array do
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: LD_VAR 0 1
63582: PUSH
63583: FOR_IN
63584: IFFALSE 63608
// if i then
63586: LD_VAR 0 3
63590: IFFALSE 63606
// result := result + 1 ;
63592: LD_ADDR_VAR 0 2
63596: PUSH
63597: LD_VAR 0 2
63601: PUSH
63602: LD_INT 1
63604: PLUS
63605: ST_TO_ADDR
63606: GO 63583
63608: POP
63609: POP
// end ;
63610: LD_VAR 0 2
63614: RET
// export function IsEmpty ( building ) ; begin
63615: LD_INT 0
63617: PPUSH
// if not building then
63618: LD_VAR 0 1
63622: NOT
63623: IFFALSE 63627
// exit ;
63625: GO 63670
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
63627: LD_ADDR_VAR 0 2
63631: PUSH
63632: LD_VAR 0 1
63636: PUSH
63637: LD_INT 22
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: CALL_OW 255
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 58
63656: PUSH
63657: EMPTY
63658: LIST
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PPUSH
63664: CALL_OW 69
63668: IN
63669: ST_TO_ADDR
// end ;
63670: LD_VAR 0 2
63674: RET
// export function IsNotFull ( building ) ; begin
63675: LD_INT 0
63677: PPUSH
// if not building then
63678: LD_VAR 0 1
63682: NOT
63683: IFFALSE 63687
// exit ;
63685: GO 63706
// result := UnitsInside ( building ) < 6 ;
63687: LD_ADDR_VAR 0 2
63691: PUSH
63692: LD_VAR 0 1
63696: PPUSH
63697: CALL_OW 313
63701: PUSH
63702: LD_INT 6
63704: LESS
63705: ST_TO_ADDR
// end ;
63706: LD_VAR 0 2
63710: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
63711: LD_INT 0
63713: PPUSH
63714: PPUSH
63715: PPUSH
63716: PPUSH
// tmp := [ ] ;
63717: LD_ADDR_VAR 0 3
63721: PUSH
63722: EMPTY
63723: ST_TO_ADDR
// list := [ ] ;
63724: LD_ADDR_VAR 0 5
63728: PUSH
63729: EMPTY
63730: ST_TO_ADDR
// for i = 16 to 25 do
63731: LD_ADDR_VAR 0 4
63735: PUSH
63736: DOUBLE
63737: LD_INT 16
63739: DEC
63740: ST_TO_ADDR
63741: LD_INT 25
63743: PUSH
63744: FOR_TO
63745: IFFALSE 63818
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
63747: LD_ADDR_VAR 0 3
63751: PUSH
63752: LD_VAR 0 3
63756: PUSH
63757: LD_INT 22
63759: PUSH
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 255
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 91
63776: PUSH
63777: LD_VAR 0 1
63781: PUSH
63782: LD_INT 6
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 30
63792: PUSH
63793: LD_VAR 0 4
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: PUSH
63807: EMPTY
63808: LIST
63809: PPUSH
63810: CALL_OW 69
63814: ADD
63815: ST_TO_ADDR
63816: GO 63744
63818: POP
63819: POP
// for i = 1 to tmp do
63820: LD_ADDR_VAR 0 4
63824: PUSH
63825: DOUBLE
63826: LD_INT 1
63828: DEC
63829: ST_TO_ADDR
63830: LD_VAR 0 3
63834: PUSH
63835: FOR_TO
63836: IFFALSE 63924
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: LD_VAR 0 5
63847: PUSH
63848: LD_VAR 0 3
63852: PUSH
63853: LD_VAR 0 4
63857: ARRAY
63858: PPUSH
63859: CALL_OW 266
63863: PUSH
63864: LD_VAR 0 3
63868: PUSH
63869: LD_VAR 0 4
63873: ARRAY
63874: PPUSH
63875: CALL_OW 250
63879: PUSH
63880: LD_VAR 0 3
63884: PUSH
63885: LD_VAR 0 4
63889: ARRAY
63890: PPUSH
63891: CALL_OW 251
63895: PUSH
63896: LD_VAR 0 3
63900: PUSH
63901: LD_VAR 0 4
63905: ARRAY
63906: PPUSH
63907: CALL_OW 254
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: ADD
63921: ST_TO_ADDR
63922: GO 63835
63924: POP
63925: POP
// result := list ;
63926: LD_ADDR_VAR 0 2
63930: PUSH
63931: LD_VAR 0 5
63935: ST_TO_ADDR
// end ;
63936: LD_VAR 0 2
63940: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
63941: LD_INT 0
63943: PPUSH
63944: PPUSH
63945: PPUSH
63946: PPUSH
63947: PPUSH
63948: PPUSH
63949: PPUSH
// if not factory then
63950: LD_VAR 0 1
63954: NOT
63955: IFFALSE 63959
// exit ;
63957: GO 64484
// if control = control_apeman then
63959: LD_VAR 0 4
63963: PUSH
63964: LD_INT 5
63966: EQUAL
63967: IFFALSE 64076
// begin tmp := UnitsInside ( factory ) ;
63969: LD_ADDR_VAR 0 8
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: CALL_OW 313
63983: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
63984: LD_VAR 0 8
63988: PPUSH
63989: LD_INT 25
63991: PUSH
63992: LD_INT 12
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PPUSH
63999: CALL_OW 72
64003: NOT
64004: IFFALSE 64014
// control := control_manual ;
64006: LD_ADDR_VAR 0 4
64010: PUSH
64011: LD_INT 1
64013: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
64014: LD_ADDR_VAR 0 8
64018: PUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: CALL 63711 0 1
64028: ST_TO_ADDR
// if tmp then
64029: LD_VAR 0 8
64033: IFFALSE 64076
// begin for i in tmp do
64035: LD_ADDR_VAR 0 7
64039: PUSH
64040: LD_VAR 0 8
64044: PUSH
64045: FOR_IN
64046: IFFALSE 64074
// if i [ 1 ] = b_ext_radar then
64048: LD_VAR 0 7
64052: PUSH
64053: LD_INT 1
64055: ARRAY
64056: PUSH
64057: LD_INT 20
64059: EQUAL
64060: IFFALSE 64072
// begin control := control_remote ;
64062: LD_ADDR_VAR 0 4
64066: PUSH
64067: LD_INT 2
64069: ST_TO_ADDR
// break ;
64070: GO 64074
// end ;
64072: GO 64045
64074: POP
64075: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
64076: LD_VAR 0 1
64080: PPUSH
64081: LD_VAR 0 2
64085: PPUSH
64086: LD_VAR 0 3
64090: PPUSH
64091: LD_VAR 0 4
64095: PPUSH
64096: LD_VAR 0 5
64100: PPUSH
64101: CALL_OW 448
64105: IFFALSE 64140
// begin result := [ chassis , engine , control , weapon ] ;
64107: LD_ADDR_VAR 0 6
64111: PUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_VAR 0 3
64121: PUSH
64122: LD_VAR 0 4
64126: PUSH
64127: LD_VAR 0 5
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// exit ;
64138: GO 64484
// end ; _chassis := AvailableChassisList ( factory ) ;
64140: LD_ADDR_VAR 0 9
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: CALL_OW 475
64154: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
64155: LD_ADDR_VAR 0 11
64159: PUSH
64160: LD_VAR 0 1
64164: PPUSH
64165: CALL_OW 476
64169: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
64170: LD_ADDR_VAR 0 12
64174: PUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 477
64184: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
64185: LD_ADDR_VAR 0 10
64189: PUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 478
64199: ST_TO_ADDR
// if not chassis in _chassis then
64200: LD_VAR 0 2
64204: PUSH
64205: LD_VAR 0 9
64209: IN
64210: NOT
64211: IFFALSE 64237
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: LD_VAR 0 9
64222: PUSH
64223: LD_INT 1
64225: PPUSH
64226: LD_VAR 0 9
64230: PPUSH
64231: CALL_OW 12
64235: ARRAY
64236: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
64237: LD_VAR 0 2
64241: PPUSH
64242: LD_VAR 0 3
64246: PPUSH
64247: CALL 64489 0 2
64251: NOT
64252: IFFALSE 64311
// repeat engine := _engine [ 1 ] ;
64254: LD_ADDR_VAR 0 3
64258: PUSH
64259: LD_VAR 0 11
64263: PUSH
64264: LD_INT 1
64266: ARRAY
64267: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
64268: LD_ADDR_VAR 0 11
64272: PUSH
64273: LD_VAR 0 11
64277: PPUSH
64278: LD_INT 1
64280: PPUSH
64281: CALL_OW 3
64285: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
64286: LD_VAR 0 2
64290: PPUSH
64291: LD_VAR 0 3
64295: PPUSH
64296: CALL 64489 0 2
64300: PUSH
64301: LD_VAR 0 11
64305: PUSH
64306: EMPTY
64307: EQUAL
64308: OR
64309: IFFALSE 64254
// if not control in _control then
64311: LD_VAR 0 4
64315: PUSH
64316: LD_VAR 0 12
64320: IN
64321: NOT
64322: IFFALSE 64348
// control := _control [ rand ( 1 , _control ) ] ;
64324: LD_ADDR_VAR 0 4
64328: PUSH
64329: LD_VAR 0 12
64333: PUSH
64334: LD_INT 1
64336: PPUSH
64337: LD_VAR 0 12
64341: PPUSH
64342: CALL_OW 12
64346: ARRAY
64347: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
64348: LD_VAR 0 2
64352: PPUSH
64353: LD_VAR 0 5
64357: PPUSH
64358: CALL 64709 0 2
64362: NOT
64363: IFFALSE 64422
// repeat weapon := _weapon [ 1 ] ;
64365: LD_ADDR_VAR 0 5
64369: PUSH
64370: LD_VAR 0 10
64374: PUSH
64375: LD_INT 1
64377: ARRAY
64378: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
64379: LD_ADDR_VAR 0 10
64383: PUSH
64384: LD_VAR 0 10
64388: PPUSH
64389: LD_INT 1
64391: PPUSH
64392: CALL_OW 3
64396: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
64397: LD_VAR 0 2
64401: PPUSH
64402: LD_VAR 0 5
64406: PPUSH
64407: CALL 64709 0 2
64411: PUSH
64412: LD_VAR 0 10
64416: PUSH
64417: EMPTY
64418: EQUAL
64419: OR
64420: IFFALSE 64365
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
64422: LD_VAR 0 1
64426: PPUSH
64427: LD_VAR 0 2
64431: PPUSH
64432: LD_VAR 0 3
64436: PPUSH
64437: LD_VAR 0 4
64441: PPUSH
64442: LD_VAR 0 5
64446: PPUSH
64447: CALL_OW 448
64451: IFFALSE 64484
// result := [ chassis , engine , control , weapon ] ;
64453: LD_ADDR_VAR 0 6
64457: PUSH
64458: LD_VAR 0 2
64462: PUSH
64463: LD_VAR 0 3
64467: PUSH
64468: LD_VAR 0 4
64472: PUSH
64473: LD_VAR 0 5
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// end ;
64484: LD_VAR 0 6
64488: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
64489: LD_INT 0
64491: PPUSH
// if not chassis or not engine then
64492: LD_VAR 0 1
64496: NOT
64497: PUSH
64498: LD_VAR 0 2
64502: NOT
64503: OR
64504: IFFALSE 64508
// exit ;
64506: GO 64704
// case engine of engine_solar :
64508: LD_VAR 0 2
64512: PUSH
64513: LD_INT 2
64515: DOUBLE
64516: EQUAL
64517: IFTRUE 64521
64519: GO 64559
64521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
64522: LD_ADDR_VAR 0 3
64526: PUSH
64527: LD_INT 11
64529: PUSH
64530: LD_INT 12
64532: PUSH
64533: LD_INT 13
64535: PUSH
64536: LD_INT 14
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
64557: GO 64688
64559: LD_INT 1
64561: DOUBLE
64562: EQUAL
64563: IFTRUE 64567
64565: GO 64629
64567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
64568: LD_ADDR_VAR 0 3
64572: PUSH
64573: LD_INT 11
64575: PUSH
64576: LD_INT 12
64578: PUSH
64579: LD_INT 13
64581: PUSH
64582: LD_INT 14
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: LD_INT 5
64599: PUSH
64600: LD_INT 21
64602: PUSH
64603: LD_INT 23
64605: PUSH
64606: LD_INT 22
64608: PUSH
64609: LD_INT 24
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
64627: GO 64688
64629: LD_INT 3
64631: DOUBLE
64632: EQUAL
64633: IFTRUE 64637
64635: GO 64687
64637: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
64638: LD_ADDR_VAR 0 3
64642: PUSH
64643: LD_INT 13
64645: PUSH
64646: LD_INT 14
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: LD_INT 4
64657: PUSH
64658: LD_INT 5
64660: PUSH
64661: LD_INT 21
64663: PUSH
64664: LD_INT 22
64666: PUSH
64667: LD_INT 23
64669: PUSH
64670: LD_INT 24
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
64685: GO 64688
64687: POP
// result := ( chassis in result ) ;
64688: LD_ADDR_VAR 0 3
64692: PUSH
64693: LD_VAR 0 1
64697: PUSH
64698: LD_VAR 0 3
64702: IN
64703: ST_TO_ADDR
// end ;
64704: LD_VAR 0 3
64708: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
64709: LD_INT 0
64711: PPUSH
// if not chassis or not weapon then
64712: LD_VAR 0 1
64716: NOT
64717: PUSH
64718: LD_VAR 0 2
64722: NOT
64723: OR
64724: IFFALSE 64728
// exit ;
64726: GO 65754
// case weapon of us_machine_gun :
64728: LD_VAR 0 2
64732: PUSH
64733: LD_INT 2
64735: DOUBLE
64736: EQUAL
64737: IFTRUE 64741
64739: GO 64771
64741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
64742: LD_ADDR_VAR 0 3
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: LD_INT 4
64758: PUSH
64759: LD_INT 5
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: ST_TO_ADDR
64769: GO 65738
64771: LD_INT 3
64773: DOUBLE
64774: EQUAL
64775: IFTRUE 64779
64777: GO 64809
64779: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
64780: LD_ADDR_VAR 0 3
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: LD_INT 4
64796: PUSH
64797: LD_INT 5
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: ST_TO_ADDR
64807: GO 65738
64809: LD_INT 11
64811: DOUBLE
64812: EQUAL
64813: IFTRUE 64817
64815: GO 64847
64817: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
64818: LD_ADDR_VAR 0 3
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 4
64834: PUSH
64835: LD_INT 5
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: ST_TO_ADDR
64845: GO 65738
64847: LD_INT 4
64849: DOUBLE
64850: EQUAL
64851: IFTRUE 64855
64853: GO 64881
64855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
64856: LD_ADDR_VAR 0 3
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 4
64869: PUSH
64870: LD_INT 5
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: ST_TO_ADDR
64879: GO 65738
64881: LD_INT 5
64883: DOUBLE
64884: EQUAL
64885: IFTRUE 64889
64887: GO 64915
64889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
64890: LD_ADDR_VAR 0 3
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: LD_INT 4
64903: PUSH
64904: LD_INT 5
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: ST_TO_ADDR
64913: GO 65738
64915: LD_INT 9
64917: DOUBLE
64918: EQUAL
64919: IFTRUE 64923
64921: GO 64949
64923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
64924: LD_ADDR_VAR 0 3
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: LD_INT 5
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
64947: GO 65738
64949: LD_INT 7
64951: DOUBLE
64952: EQUAL
64953: IFTRUE 64957
64955: GO 64983
64957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
64981: GO 65738
64983: LD_INT 12
64985: DOUBLE
64986: EQUAL
64987: IFTRUE 64991
64989: GO 65017
64991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
64992: LD_ADDR_VAR 0 3
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: LD_INT 3
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: LD_INT 5
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: ST_TO_ADDR
65015: GO 65738
65017: LD_INT 13
65019: DOUBLE
65020: EQUAL
65021: IFTRUE 65025
65023: GO 65051
65025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
65026: LD_ADDR_VAR 0 3
65030: PUSH
65031: LD_INT 2
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: LD_INT 5
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: ST_TO_ADDR
65049: GO 65738
65051: LD_INT 14
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65059
65057: GO 65077
65059: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
65060: LD_ADDR_VAR 0 3
65064: PUSH
65065: LD_INT 4
65067: PUSH
65068: LD_INT 5
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: ST_TO_ADDR
65075: GO 65738
65077: LD_INT 6
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65085
65083: GO 65103
65085: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
65086: LD_ADDR_VAR 0 3
65090: PUSH
65091: LD_INT 4
65093: PUSH
65094: LD_INT 5
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: ST_TO_ADDR
65101: GO 65738
65103: LD_INT 10
65105: DOUBLE
65106: EQUAL
65107: IFTRUE 65111
65109: GO 65129
65111: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
65112: LD_ADDR_VAR 0 3
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: LD_INT 5
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: ST_TO_ADDR
65127: GO 65738
65129: LD_INT 22
65131: DOUBLE
65132: EQUAL
65133: IFTRUE 65137
65135: GO 65163
65137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
65138: LD_ADDR_VAR 0 3
65142: PUSH
65143: LD_INT 11
65145: PUSH
65146: LD_INT 12
65148: PUSH
65149: LD_INT 13
65151: PUSH
65152: LD_INT 14
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: ST_TO_ADDR
65161: GO 65738
65163: LD_INT 23
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65171
65169: GO 65197
65171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
65172: LD_ADDR_VAR 0 3
65176: PUSH
65177: LD_INT 11
65179: PUSH
65180: LD_INT 12
65182: PUSH
65183: LD_INT 13
65185: PUSH
65186: LD_INT 14
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
65195: GO 65738
65197: LD_INT 24
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65231
65205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
65206: LD_ADDR_VAR 0 3
65210: PUSH
65211: LD_INT 11
65213: PUSH
65214: LD_INT 12
65216: PUSH
65217: LD_INT 13
65219: PUSH
65220: LD_INT 14
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: ST_TO_ADDR
65229: GO 65738
65231: LD_INT 30
65233: DOUBLE
65234: EQUAL
65235: IFTRUE 65239
65237: GO 65265
65239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
65240: LD_ADDR_VAR 0 3
65244: PUSH
65245: LD_INT 11
65247: PUSH
65248: LD_INT 12
65250: PUSH
65251: LD_INT 13
65253: PUSH
65254: LD_INT 14
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
65263: GO 65738
65265: LD_INT 25
65267: DOUBLE
65268: EQUAL
65269: IFTRUE 65273
65271: GO 65291
65273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
65274: LD_ADDR_VAR 0 3
65278: PUSH
65279: LD_INT 13
65281: PUSH
65282: LD_INT 14
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: ST_TO_ADDR
65289: GO 65738
65291: LD_INT 27
65293: DOUBLE
65294: EQUAL
65295: IFTRUE 65299
65297: GO 65317
65299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
65300: LD_ADDR_VAR 0 3
65304: PUSH
65305: LD_INT 13
65307: PUSH
65308: LD_INT 14
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: ST_TO_ADDR
65315: GO 65738
65317: LD_INT 28
65319: DOUBLE
65320: EQUAL
65321: IFTRUE 65325
65323: GO 65343
65325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
65326: LD_ADDR_VAR 0 3
65330: PUSH
65331: LD_INT 13
65333: PUSH
65334: LD_INT 14
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: ST_TO_ADDR
65341: GO 65738
65343: LD_INT 29
65345: DOUBLE
65346: EQUAL
65347: IFTRUE 65351
65349: GO 65369
65351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
65352: LD_ADDR_VAR 0 3
65356: PUSH
65357: LD_INT 13
65359: PUSH
65360: LD_INT 14
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: ST_TO_ADDR
65367: GO 65738
65369: LD_INT 31
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65377
65375: GO 65395
65377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_INT 13
65385: PUSH
65386: LD_INT 14
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: ST_TO_ADDR
65393: GO 65738
65395: LD_INT 26
65397: DOUBLE
65398: EQUAL
65399: IFTRUE 65403
65401: GO 65421
65403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
65404: LD_ADDR_VAR 0 3
65408: PUSH
65409: LD_INT 13
65411: PUSH
65412: LD_INT 14
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: ST_TO_ADDR
65419: GO 65738
65421: LD_INT 42
65423: DOUBLE
65424: EQUAL
65425: IFTRUE 65429
65427: GO 65455
65429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
65430: LD_ADDR_VAR 0 3
65434: PUSH
65435: LD_INT 21
65437: PUSH
65438: LD_INT 22
65440: PUSH
65441: LD_INT 23
65443: PUSH
65444: LD_INT 24
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: ST_TO_ADDR
65453: GO 65738
65455: LD_INT 43
65457: DOUBLE
65458: EQUAL
65459: IFTRUE 65463
65461: GO 65489
65463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
65464: LD_ADDR_VAR 0 3
65468: PUSH
65469: LD_INT 21
65471: PUSH
65472: LD_INT 22
65474: PUSH
65475: LD_INT 23
65477: PUSH
65478: LD_INT 24
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: ST_TO_ADDR
65487: GO 65738
65489: LD_INT 44
65491: DOUBLE
65492: EQUAL
65493: IFTRUE 65497
65495: GO 65523
65497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
65498: LD_ADDR_VAR 0 3
65502: PUSH
65503: LD_INT 21
65505: PUSH
65506: LD_INT 22
65508: PUSH
65509: LD_INT 23
65511: PUSH
65512: LD_INT 24
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: ST_TO_ADDR
65521: GO 65738
65523: LD_INT 45
65525: DOUBLE
65526: EQUAL
65527: IFTRUE 65531
65529: GO 65557
65531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
65532: LD_ADDR_VAR 0 3
65536: PUSH
65537: LD_INT 21
65539: PUSH
65540: LD_INT 22
65542: PUSH
65543: LD_INT 23
65545: PUSH
65546: LD_INT 24
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: ST_TO_ADDR
65555: GO 65738
65557: LD_INT 49
65559: DOUBLE
65560: EQUAL
65561: IFTRUE 65565
65563: GO 65591
65565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
65566: LD_ADDR_VAR 0 3
65570: PUSH
65571: LD_INT 21
65573: PUSH
65574: LD_INT 22
65576: PUSH
65577: LD_INT 23
65579: PUSH
65580: LD_INT 24
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: ST_TO_ADDR
65589: GO 65738
65591: LD_INT 51
65593: DOUBLE
65594: EQUAL
65595: IFTRUE 65599
65597: GO 65625
65599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
65600: LD_ADDR_VAR 0 3
65604: PUSH
65605: LD_INT 21
65607: PUSH
65608: LD_INT 22
65610: PUSH
65611: LD_INT 23
65613: PUSH
65614: LD_INT 24
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
65623: GO 65738
65625: LD_INT 52
65627: DOUBLE
65628: EQUAL
65629: IFTRUE 65633
65631: GO 65659
65633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
65634: LD_ADDR_VAR 0 3
65638: PUSH
65639: LD_INT 21
65641: PUSH
65642: LD_INT 22
65644: PUSH
65645: LD_INT 23
65647: PUSH
65648: LD_INT 24
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: ST_TO_ADDR
65657: GO 65738
65659: LD_INT 53
65661: DOUBLE
65662: EQUAL
65663: IFTRUE 65667
65665: GO 65685
65667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
65668: LD_ADDR_VAR 0 3
65672: PUSH
65673: LD_INT 23
65675: PUSH
65676: LD_INT 24
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: ST_TO_ADDR
65683: GO 65738
65685: LD_INT 46
65687: DOUBLE
65688: EQUAL
65689: IFTRUE 65693
65691: GO 65711
65693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
65694: LD_ADDR_VAR 0 3
65698: PUSH
65699: LD_INT 23
65701: PUSH
65702: LD_INT 24
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: ST_TO_ADDR
65709: GO 65738
65711: LD_INT 47
65713: DOUBLE
65714: EQUAL
65715: IFTRUE 65719
65717: GO 65737
65719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
65720: LD_ADDR_VAR 0 3
65724: PUSH
65725: LD_INT 23
65727: PUSH
65728: LD_INT 24
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: ST_TO_ADDR
65735: GO 65738
65737: POP
// result := ( chassis in result ) ;
65738: LD_ADDR_VAR 0 3
65742: PUSH
65743: LD_VAR 0 1
65747: PUSH
65748: LD_VAR 0 3
65752: IN
65753: ST_TO_ADDR
// end ;
65754: LD_VAR 0 3
65758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
65759: LD_INT 0
65761: PPUSH
65762: PPUSH
65763: PPUSH
65764: PPUSH
65765: PPUSH
65766: PPUSH
65767: PPUSH
// result := array ;
65768: LD_ADDR_VAR 0 5
65772: PUSH
65773: LD_VAR 0 1
65777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
65778: LD_VAR 0 1
65782: NOT
65783: PUSH
65784: LD_VAR 0 2
65788: NOT
65789: OR
65790: PUSH
65791: LD_VAR 0 3
65795: NOT
65796: OR
65797: PUSH
65798: LD_VAR 0 2
65802: PUSH
65803: LD_VAR 0 1
65807: GREATER
65808: OR
65809: PUSH
65810: LD_VAR 0 3
65814: PUSH
65815: LD_VAR 0 1
65819: GREATER
65820: OR
65821: IFFALSE 65825
// exit ;
65823: GO 66121
// if direction then
65825: LD_VAR 0 4
65829: IFFALSE 65893
// begin d := 1 ;
65831: LD_ADDR_VAR 0 9
65835: PUSH
65836: LD_INT 1
65838: ST_TO_ADDR
// if i_from > i_to then
65839: LD_VAR 0 2
65843: PUSH
65844: LD_VAR 0 3
65848: GREATER
65849: IFFALSE 65875
// length := ( array - i_from ) + i_to else
65851: LD_ADDR_VAR 0 11
65855: PUSH
65856: LD_VAR 0 1
65860: PUSH
65861: LD_VAR 0 2
65865: MINUS
65866: PUSH
65867: LD_VAR 0 3
65871: PLUS
65872: ST_TO_ADDR
65873: GO 65891
// length := i_to - i_from ;
65875: LD_ADDR_VAR 0 11
65879: PUSH
65880: LD_VAR 0 3
65884: PUSH
65885: LD_VAR 0 2
65889: MINUS
65890: ST_TO_ADDR
// end else
65891: GO 65954
// begin d := - 1 ;
65893: LD_ADDR_VAR 0 9
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: ST_TO_ADDR
// if i_from > i_to then
65902: LD_VAR 0 2
65906: PUSH
65907: LD_VAR 0 3
65911: GREATER
65912: IFFALSE 65932
// length := i_from - i_to else
65914: LD_ADDR_VAR 0 11
65918: PUSH
65919: LD_VAR 0 2
65923: PUSH
65924: LD_VAR 0 3
65928: MINUS
65929: ST_TO_ADDR
65930: GO 65954
// length := ( array - i_to ) + i_from ;
65932: LD_ADDR_VAR 0 11
65936: PUSH
65937: LD_VAR 0 1
65941: PUSH
65942: LD_VAR 0 3
65946: MINUS
65947: PUSH
65948: LD_VAR 0 2
65952: PLUS
65953: ST_TO_ADDR
// end ; if not length then
65954: LD_VAR 0 11
65958: NOT
65959: IFFALSE 65963
// exit ;
65961: GO 66121
// tmp := array ;
65963: LD_ADDR_VAR 0 10
65967: PUSH
65968: LD_VAR 0 1
65972: ST_TO_ADDR
// for i = 1 to length do
65973: LD_ADDR_VAR 0 6
65977: PUSH
65978: DOUBLE
65979: LD_INT 1
65981: DEC
65982: ST_TO_ADDR
65983: LD_VAR 0 11
65987: PUSH
65988: FOR_TO
65989: IFFALSE 66109
// begin for j = 1 to array do
65991: LD_ADDR_VAR 0 7
65995: PUSH
65996: DOUBLE
65997: LD_INT 1
65999: DEC
66000: ST_TO_ADDR
66001: LD_VAR 0 1
66005: PUSH
66006: FOR_TO
66007: IFFALSE 66095
// begin k := j + d ;
66009: LD_ADDR_VAR 0 8
66013: PUSH
66014: LD_VAR 0 7
66018: PUSH
66019: LD_VAR 0 9
66023: PLUS
66024: ST_TO_ADDR
// if k > array then
66025: LD_VAR 0 8
66029: PUSH
66030: LD_VAR 0 1
66034: GREATER
66035: IFFALSE 66045
// k := 1 ;
66037: LD_ADDR_VAR 0 8
66041: PUSH
66042: LD_INT 1
66044: ST_TO_ADDR
// if not k then
66045: LD_VAR 0 8
66049: NOT
66050: IFFALSE 66062
// k := array ;
66052: LD_ADDR_VAR 0 8
66056: PUSH
66057: LD_VAR 0 1
66061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
66062: LD_ADDR_VAR 0 10
66066: PUSH
66067: LD_VAR 0 10
66071: PPUSH
66072: LD_VAR 0 8
66076: PPUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_VAR 0 7
66086: ARRAY
66087: PPUSH
66088: CALL_OW 1
66092: ST_TO_ADDR
// end ;
66093: GO 66006
66095: POP
66096: POP
// array := tmp ;
66097: LD_ADDR_VAR 0 1
66101: PUSH
66102: LD_VAR 0 10
66106: ST_TO_ADDR
// end ;
66107: GO 65988
66109: POP
66110: POP
// result := array ;
66111: LD_ADDR_VAR 0 5
66115: PUSH
66116: LD_VAR 0 1
66120: ST_TO_ADDR
// end ;
66121: LD_VAR 0 5
66125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
66126: LD_INT 0
66128: PPUSH
66129: PPUSH
// result := 0 ;
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_INT 0
66137: ST_TO_ADDR
// if not array or not value in array then
66138: LD_VAR 0 1
66142: NOT
66143: PUSH
66144: LD_VAR 0 2
66148: PUSH
66149: LD_VAR 0 1
66153: IN
66154: NOT
66155: OR
66156: IFFALSE 66160
// exit ;
66158: GO 66214
// for i = 1 to array do
66160: LD_ADDR_VAR 0 4
66164: PUSH
66165: DOUBLE
66166: LD_INT 1
66168: DEC
66169: ST_TO_ADDR
66170: LD_VAR 0 1
66174: PUSH
66175: FOR_TO
66176: IFFALSE 66212
// if value = array [ i ] then
66178: LD_VAR 0 2
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_VAR 0 4
66192: ARRAY
66193: EQUAL
66194: IFFALSE 66210
// begin result := i ;
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_VAR 0 4
66205: ST_TO_ADDR
// exit ;
66206: POP
66207: POP
66208: GO 66214
// end ;
66210: GO 66175
66212: POP
66213: POP
// end ;
66214: LD_VAR 0 3
66218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
66219: LD_INT 0
66221: PPUSH
// vc_chassis := chassis ;
66222: LD_ADDR_OWVAR 37
66226: PUSH
66227: LD_VAR 0 1
66231: ST_TO_ADDR
// vc_engine := engine ;
66232: LD_ADDR_OWVAR 39
66236: PUSH
66237: LD_VAR 0 2
66241: ST_TO_ADDR
// vc_control := control ;
66242: LD_ADDR_OWVAR 38
66246: PUSH
66247: LD_VAR 0 3
66251: ST_TO_ADDR
// vc_weapon := weapon ;
66252: LD_ADDR_OWVAR 40
66256: PUSH
66257: LD_VAR 0 4
66261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
66262: LD_ADDR_OWVAR 41
66266: PUSH
66267: LD_VAR 0 5
66271: ST_TO_ADDR
// end ;
66272: LD_VAR 0 6
66276: RET
// export function WantPlant ( unit ) ; var task ; begin
66277: LD_INT 0
66279: PPUSH
66280: PPUSH
// result := false ;
66281: LD_ADDR_VAR 0 2
66285: PUSH
66286: LD_INT 0
66288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
66289: LD_ADDR_VAR 0 3
66293: PUSH
66294: LD_VAR 0 1
66298: PPUSH
66299: CALL_OW 437
66303: ST_TO_ADDR
// if task then
66304: LD_VAR 0 3
66308: IFFALSE 66336
// if task [ 1 ] [ 1 ] = p then
66310: LD_VAR 0 3
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: PUSH
66319: LD_INT 1
66321: ARRAY
66322: PUSH
66323: LD_STRING p
66325: EQUAL
66326: IFFALSE 66336
// result := true ;
66328: LD_ADDR_VAR 0 2
66332: PUSH
66333: LD_INT 1
66335: ST_TO_ADDR
// end ;
66336: LD_VAR 0 2
66340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
66341: LD_INT 0
66343: PPUSH
66344: PPUSH
66345: PPUSH
66346: PPUSH
// if pos < 1 then
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 1
66354: LESS
66355: IFFALSE 66359
// exit ;
66357: GO 66662
// if pos = 1 then
66359: LD_VAR 0 2
66363: PUSH
66364: LD_INT 1
66366: EQUAL
66367: IFFALSE 66400
// result := Replace ( arr , pos [ 1 ] , value ) else
66369: LD_ADDR_VAR 0 4
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: LD_VAR 0 2
66383: PUSH
66384: LD_INT 1
66386: ARRAY
66387: PPUSH
66388: LD_VAR 0 3
66392: PPUSH
66393: CALL_OW 1
66397: ST_TO_ADDR
66398: GO 66662
// begin tmp := arr ;
66400: LD_ADDR_VAR 0 6
66404: PUSH
66405: LD_VAR 0 1
66409: ST_TO_ADDR
// s_arr := [ tmp ] ;
66410: LD_ADDR_VAR 0 7
66414: PUSH
66415: LD_VAR 0 6
66419: PUSH
66420: EMPTY
66421: LIST
66422: ST_TO_ADDR
// for i = 1 to pos - 1 do
66423: LD_ADDR_VAR 0 5
66427: PUSH
66428: DOUBLE
66429: LD_INT 1
66431: DEC
66432: ST_TO_ADDR
66433: LD_VAR 0 2
66437: PUSH
66438: LD_INT 1
66440: MINUS
66441: PUSH
66442: FOR_TO
66443: IFFALSE 66488
// begin tmp := tmp [ pos [ i ] ] ;
66445: LD_ADDR_VAR 0 6
66449: PUSH
66450: LD_VAR 0 6
66454: PUSH
66455: LD_VAR 0 2
66459: PUSH
66460: LD_VAR 0 5
66464: ARRAY
66465: ARRAY
66466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
66467: LD_ADDR_VAR 0 7
66471: PUSH
66472: LD_VAR 0 7
66476: PUSH
66477: LD_VAR 0 6
66481: PUSH
66482: EMPTY
66483: LIST
66484: ADD
66485: ST_TO_ADDR
// end ;
66486: GO 66442
66488: POP
66489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
66490: LD_ADDR_VAR 0 6
66494: PUSH
66495: LD_VAR 0 6
66499: PPUSH
66500: LD_VAR 0 2
66504: PUSH
66505: LD_VAR 0 2
66509: ARRAY
66510: PPUSH
66511: LD_VAR 0 3
66515: PPUSH
66516: CALL_OW 1
66520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
66521: LD_ADDR_VAR 0 7
66525: PUSH
66526: LD_VAR 0 7
66530: PPUSH
66531: LD_VAR 0 7
66535: PPUSH
66536: LD_VAR 0 6
66540: PPUSH
66541: CALL_OW 1
66545: ST_TO_ADDR
// for i = s_arr downto 2 do
66546: LD_ADDR_VAR 0 5
66550: PUSH
66551: DOUBLE
66552: LD_VAR 0 7
66556: INC
66557: ST_TO_ADDR
66558: LD_INT 2
66560: PUSH
66561: FOR_DOWNTO
66562: IFFALSE 66646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
66564: LD_ADDR_VAR 0 6
66568: PUSH
66569: LD_VAR 0 7
66573: PUSH
66574: LD_VAR 0 5
66578: PUSH
66579: LD_INT 1
66581: MINUS
66582: ARRAY
66583: PPUSH
66584: LD_VAR 0 2
66588: PUSH
66589: LD_VAR 0 5
66593: PUSH
66594: LD_INT 1
66596: MINUS
66597: ARRAY
66598: PPUSH
66599: LD_VAR 0 7
66603: PUSH
66604: LD_VAR 0 5
66608: ARRAY
66609: PPUSH
66610: CALL_OW 1
66614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
66615: LD_ADDR_VAR 0 7
66619: PUSH
66620: LD_VAR 0 7
66624: PPUSH
66625: LD_VAR 0 5
66629: PUSH
66630: LD_INT 1
66632: MINUS
66633: PPUSH
66634: LD_VAR 0 6
66638: PPUSH
66639: CALL_OW 1
66643: ST_TO_ADDR
// end ;
66644: GO 66561
66646: POP
66647: POP
// result := s_arr [ 1 ] ;
66648: LD_ADDR_VAR 0 4
66652: PUSH
66653: LD_VAR 0 7
66657: PUSH
66658: LD_INT 1
66660: ARRAY
66661: ST_TO_ADDR
// end ; end ;
66662: LD_VAR 0 4
66666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
66667: LD_INT 0
66669: PPUSH
66670: PPUSH
// if not list then
66671: LD_VAR 0 1
66675: NOT
66676: IFFALSE 66680
// exit ;
66678: GO 66771
// i := list [ pos1 ] ;
66680: LD_ADDR_VAR 0 5
66684: PUSH
66685: LD_VAR 0 1
66689: PUSH
66690: LD_VAR 0 2
66694: ARRAY
66695: ST_TO_ADDR
// if not i then
66696: LD_VAR 0 5
66700: NOT
66701: IFFALSE 66705
// exit ;
66703: GO 66771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
66705: LD_ADDR_VAR 0 1
66709: PUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: LD_VAR 0 2
66719: PPUSH
66720: LD_VAR 0 1
66724: PUSH
66725: LD_VAR 0 3
66729: ARRAY
66730: PPUSH
66731: CALL_OW 1
66735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
66736: LD_ADDR_VAR 0 1
66740: PUSH
66741: LD_VAR 0 1
66745: PPUSH
66746: LD_VAR 0 3
66750: PPUSH
66751: LD_VAR 0 5
66755: PPUSH
66756: CALL_OW 1
66760: ST_TO_ADDR
// result := list ;
66761: LD_ADDR_VAR 0 4
66765: PUSH
66766: LD_VAR 0 1
66770: ST_TO_ADDR
// end ;
66771: LD_VAR 0 4
66775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
66776: LD_INT 0
66778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
66779: LD_ADDR_VAR 0 5
66783: PUSH
66784: LD_VAR 0 1
66788: PPUSH
66789: CALL_OW 250
66793: PPUSH
66794: LD_VAR 0 1
66798: PPUSH
66799: CALL_OW 251
66803: PPUSH
66804: LD_VAR 0 2
66808: PPUSH
66809: LD_VAR 0 3
66813: PPUSH
66814: LD_VAR 0 4
66818: PPUSH
66819: CALL 66829 0 5
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 5
66828: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
66829: LD_INT 0
66831: PPUSH
66832: PPUSH
66833: PPUSH
66834: PPUSH
// if not list then
66835: LD_VAR 0 3
66839: NOT
66840: IFFALSE 66844
// exit ;
66842: GO 67232
// result := [ ] ;
66844: LD_ADDR_VAR 0 6
66848: PUSH
66849: EMPTY
66850: ST_TO_ADDR
// for i in list do
66851: LD_ADDR_VAR 0 7
66855: PUSH
66856: LD_VAR 0 3
66860: PUSH
66861: FOR_IN
66862: IFFALSE 67064
// begin tmp := GetDistUnitXY ( i , x , y ) ;
66864: LD_ADDR_VAR 0 9
66868: PUSH
66869: LD_VAR 0 7
66873: PPUSH
66874: LD_VAR 0 1
66878: PPUSH
66879: LD_VAR 0 2
66883: PPUSH
66884: CALL_OW 297
66888: ST_TO_ADDR
// if not result then
66889: LD_VAR 0 6
66893: NOT
66894: IFFALSE 66920
// result := [ [ i , tmp ] ] else
66896: LD_ADDR_VAR 0 6
66900: PUSH
66901: LD_VAR 0 7
66905: PUSH
66906: LD_VAR 0 9
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: ST_TO_ADDR
66918: GO 67062
// begin if result [ result ] [ 2 ] < tmp then
66920: LD_VAR 0 6
66924: PUSH
66925: LD_VAR 0 6
66929: ARRAY
66930: PUSH
66931: LD_INT 2
66933: ARRAY
66934: PUSH
66935: LD_VAR 0 9
66939: LESS
66940: IFFALSE 66982
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
66942: LD_ADDR_VAR 0 6
66946: PUSH
66947: LD_VAR 0 6
66951: PPUSH
66952: LD_VAR 0 6
66956: PUSH
66957: LD_INT 1
66959: PLUS
66960: PPUSH
66961: LD_VAR 0 7
66965: PUSH
66966: LD_VAR 0 9
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PPUSH
66975: CALL_OW 2
66979: ST_TO_ADDR
66980: GO 67062
// for j = 1 to result do
66982: LD_ADDR_VAR 0 8
66986: PUSH
66987: DOUBLE
66988: LD_INT 1
66990: DEC
66991: ST_TO_ADDR
66992: LD_VAR 0 6
66996: PUSH
66997: FOR_TO
66998: IFFALSE 67060
// begin if tmp < result [ j ] [ 2 ] then
67000: LD_VAR 0 9
67004: PUSH
67005: LD_VAR 0 6
67009: PUSH
67010: LD_VAR 0 8
67014: ARRAY
67015: PUSH
67016: LD_INT 2
67018: ARRAY
67019: LESS
67020: IFFALSE 67058
// begin result := Insert ( result , j , [ i , tmp ] ) ;
67022: LD_ADDR_VAR 0 6
67026: PUSH
67027: LD_VAR 0 6
67031: PPUSH
67032: LD_VAR 0 8
67036: PPUSH
67037: LD_VAR 0 7
67041: PUSH
67042: LD_VAR 0 9
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PPUSH
67051: CALL_OW 2
67055: ST_TO_ADDR
// break ;
67056: GO 67060
// end ; end ;
67058: GO 66997
67060: POP
67061: POP
// end ; end ;
67062: GO 66861
67064: POP
67065: POP
// if result and not asc then
67066: LD_VAR 0 6
67070: PUSH
67071: LD_VAR 0 4
67075: NOT
67076: AND
67077: IFFALSE 67152
// begin tmp := result ;
67079: LD_ADDR_VAR 0 9
67083: PUSH
67084: LD_VAR 0 6
67088: ST_TO_ADDR
// for i = tmp downto 1 do
67089: LD_ADDR_VAR 0 7
67093: PUSH
67094: DOUBLE
67095: LD_VAR 0 9
67099: INC
67100: ST_TO_ADDR
67101: LD_INT 1
67103: PUSH
67104: FOR_DOWNTO
67105: IFFALSE 67150
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
67107: LD_ADDR_VAR 0 6
67111: PUSH
67112: LD_VAR 0 6
67116: PPUSH
67117: LD_VAR 0 9
67121: PUSH
67122: LD_VAR 0 7
67126: MINUS
67127: PUSH
67128: LD_INT 1
67130: PLUS
67131: PPUSH
67132: LD_VAR 0 9
67136: PUSH
67137: LD_VAR 0 7
67141: ARRAY
67142: PPUSH
67143: CALL_OW 1
67147: ST_TO_ADDR
67148: GO 67104
67150: POP
67151: POP
// end ; tmp := [ ] ;
67152: LD_ADDR_VAR 0 9
67156: PUSH
67157: EMPTY
67158: ST_TO_ADDR
// if mode then
67159: LD_VAR 0 5
67163: IFFALSE 67232
// begin for i = 1 to result do
67165: LD_ADDR_VAR 0 7
67169: PUSH
67170: DOUBLE
67171: LD_INT 1
67173: DEC
67174: ST_TO_ADDR
67175: LD_VAR 0 6
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67220
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
67183: LD_ADDR_VAR 0 9
67187: PUSH
67188: LD_VAR 0 9
67192: PPUSH
67193: LD_VAR 0 7
67197: PPUSH
67198: LD_VAR 0 6
67202: PUSH
67203: LD_VAR 0 7
67207: ARRAY
67208: PUSH
67209: LD_INT 1
67211: ARRAY
67212: PPUSH
67213: CALL_OW 1
67217: ST_TO_ADDR
67218: GO 67180
67220: POP
67221: POP
// result := tmp ;
67222: LD_ADDR_VAR 0 6
67226: PUSH
67227: LD_VAR 0 9
67231: ST_TO_ADDR
// end ; end ;
67232: LD_VAR 0 6
67236: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
67237: LD_INT 0
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
67244: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
67245: LD_ADDR_VAR 0 5
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: EMPTY
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// if not x or not y then
67267: LD_VAR 0 2
67271: NOT
67272: PUSH
67273: LD_VAR 0 3
67277: NOT
67278: OR
67279: IFFALSE 67283
// exit ;
67281: GO 68929
// if not range then
67283: LD_VAR 0 4
67287: NOT
67288: IFFALSE 67298
// range := 10 ;
67290: LD_ADDR_VAR 0 4
67294: PUSH
67295: LD_INT 10
67297: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
67298: LD_ADDR_VAR 0 8
67302: PUSH
67303: LD_INT 81
67305: PUSH
67306: LD_VAR 0 1
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 92
67317: PUSH
67318: LD_VAR 0 2
67322: PUSH
67323: LD_VAR 0 3
67327: PUSH
67328: LD_VAR 0 4
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 3
67341: PUSH
67342: LD_INT 21
67344: PUSH
67345: LD_INT 3
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: PPUSH
67361: CALL_OW 69
67365: ST_TO_ADDR
// if not tmp then
67366: LD_VAR 0 8
67370: NOT
67371: IFFALSE 67375
// exit ;
67373: GO 68929
// for i in tmp do
67375: LD_ADDR_VAR 0 6
67379: PUSH
67380: LD_VAR 0 8
67384: PUSH
67385: FOR_IN
67386: IFFALSE 68904
// begin points := [ 0 , 0 , 0 ] ;
67388: LD_ADDR_VAR 0 9
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: ST_TO_ADDR
// bpoints := 1 ;
67407: LD_ADDR_VAR 0 10
67411: PUSH
67412: LD_INT 1
67414: ST_TO_ADDR
// case GetType ( i ) of unit_human :
67415: LD_VAR 0 6
67419: PPUSH
67420: CALL_OW 247
67424: PUSH
67425: LD_INT 1
67427: DOUBLE
67428: EQUAL
67429: IFTRUE 67433
67431: GO 68011
67433: POP
// begin if GetClass ( i ) = 1 then
67434: LD_VAR 0 6
67438: PPUSH
67439: CALL_OW 257
67443: PUSH
67444: LD_INT 1
67446: EQUAL
67447: IFFALSE 67468
// points := [ 10 , 5 , 3 ] ;
67449: LD_ADDR_VAR 0 9
67453: PUSH
67454: LD_INT 10
67456: PUSH
67457: LD_INT 5
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
67468: LD_VAR 0 6
67472: PPUSH
67473: CALL_OW 257
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 4
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: IN
67492: IFFALSE 67513
// points := [ 3 , 2 , 1 ] ;
67494: LD_ADDR_VAR 0 9
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 1
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// if GetClass ( i ) = 5 then
67513: LD_VAR 0 6
67517: PPUSH
67518: CALL_OW 257
67522: PUSH
67523: LD_INT 5
67525: EQUAL
67526: IFFALSE 67547
// points := [ 130 , 5 , 2 ] ;
67528: LD_ADDR_VAR 0 9
67532: PUSH
67533: LD_INT 130
67535: PUSH
67536: LD_INT 5
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// if GetClass ( i ) = 8 then
67547: LD_VAR 0 6
67551: PPUSH
67552: CALL_OW 257
67556: PUSH
67557: LD_INT 8
67559: EQUAL
67560: IFFALSE 67581
// points := [ 35 , 35 , 30 ] ;
67562: LD_ADDR_VAR 0 9
67566: PUSH
67567: LD_INT 35
67569: PUSH
67570: LD_INT 35
67572: PUSH
67573: LD_INT 30
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// if GetClass ( i ) = 9 then
67581: LD_VAR 0 6
67585: PPUSH
67586: CALL_OW 257
67590: PUSH
67591: LD_INT 9
67593: EQUAL
67594: IFFALSE 67615
// points := [ 20 , 55 , 40 ] ;
67596: LD_ADDR_VAR 0 9
67600: PUSH
67601: LD_INT 20
67603: PUSH
67604: LD_INT 55
67606: PUSH
67607: LD_INT 40
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
67615: LD_VAR 0 6
67619: PPUSH
67620: CALL_OW 257
67624: PUSH
67625: LD_INT 12
67627: PUSH
67628: LD_INT 16
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: IN
67635: IFFALSE 67656
// points := [ 5 , 3 , 2 ] ;
67637: LD_ADDR_VAR 0 9
67641: PUSH
67642: LD_INT 5
67644: PUSH
67645: LD_INT 3
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// if GetClass ( i ) = 17 then
67656: LD_VAR 0 6
67660: PPUSH
67661: CALL_OW 257
67665: PUSH
67666: LD_INT 17
67668: EQUAL
67669: IFFALSE 67690
// points := [ 100 , 50 , 75 ] ;
67671: LD_ADDR_VAR 0 9
67675: PUSH
67676: LD_INT 100
67678: PUSH
67679: LD_INT 50
67681: PUSH
67682: LD_INT 75
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: ST_TO_ADDR
// if GetClass ( i ) = 15 then
67690: LD_VAR 0 6
67694: PPUSH
67695: CALL_OW 257
67699: PUSH
67700: LD_INT 15
67702: EQUAL
67703: IFFALSE 67724
// points := [ 10 , 5 , 3 ] ;
67705: LD_ADDR_VAR 0 9
67709: PUSH
67710: LD_INT 10
67712: PUSH
67713: LD_INT 5
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: ST_TO_ADDR
// if GetClass ( i ) = 14 then
67724: LD_VAR 0 6
67728: PPUSH
67729: CALL_OW 257
67733: PUSH
67734: LD_INT 14
67736: EQUAL
67737: IFFALSE 67758
// points := [ 10 , 0 , 0 ] ;
67739: LD_ADDR_VAR 0 9
67743: PUSH
67744: LD_INT 10
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: ST_TO_ADDR
// if GetClass ( i ) = 11 then
67758: LD_VAR 0 6
67762: PPUSH
67763: CALL_OW 257
67767: PUSH
67768: LD_INT 11
67770: EQUAL
67771: IFFALSE 67792
// points := [ 30 , 10 , 5 ] ;
67773: LD_ADDR_VAR 0 9
67777: PUSH
67778: LD_INT 30
67780: PUSH
67781: LD_INT 10
67783: PUSH
67784: LD_INT 5
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
67792: LD_VAR 0 1
67796: PPUSH
67797: LD_INT 5
67799: PPUSH
67800: CALL_OW 321
67804: PUSH
67805: LD_INT 2
67807: EQUAL
67808: IFFALSE 67825
// bpoints := bpoints * 1.8 ;
67810: LD_ADDR_VAR 0 10
67814: PUSH
67815: LD_VAR 0 10
67819: PUSH
67820: LD_REAL  1.80000000000000E+0000
67823: MUL
67824: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
67825: LD_VAR 0 6
67829: PPUSH
67830: CALL_OW 257
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: LD_INT 3
67843: PUSH
67844: LD_INT 4
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: IN
67853: PUSH
67854: LD_VAR 0 1
67858: PPUSH
67859: LD_INT 51
67861: PPUSH
67862: CALL_OW 321
67866: PUSH
67867: LD_INT 2
67869: EQUAL
67870: AND
67871: IFFALSE 67888
// bpoints := bpoints * 1.2 ;
67873: LD_ADDR_VAR 0 10
67877: PUSH
67878: LD_VAR 0 10
67882: PUSH
67883: LD_REAL  1.20000000000000E+0000
67886: MUL
67887: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
67888: LD_VAR 0 6
67892: PPUSH
67893: CALL_OW 257
67897: PUSH
67898: LD_INT 5
67900: PUSH
67901: LD_INT 7
67903: PUSH
67904: LD_INT 9
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: IN
67912: PUSH
67913: LD_VAR 0 1
67917: PPUSH
67918: LD_INT 52
67920: PPUSH
67921: CALL_OW 321
67925: PUSH
67926: LD_INT 2
67928: EQUAL
67929: AND
67930: IFFALSE 67947
// bpoints := bpoints * 1.5 ;
67932: LD_ADDR_VAR 0 10
67936: PUSH
67937: LD_VAR 0 10
67941: PUSH
67942: LD_REAL  1.50000000000000E+0000
67945: MUL
67946: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
67947: LD_VAR 0 1
67951: PPUSH
67952: LD_INT 66
67954: PPUSH
67955: CALL_OW 321
67959: PUSH
67960: LD_INT 2
67962: EQUAL
67963: IFFALSE 67980
// bpoints := bpoints * 1.1 ;
67965: LD_ADDR_VAR 0 10
67969: PUSH
67970: LD_VAR 0 10
67974: PUSH
67975: LD_REAL  1.10000000000000E+0000
67978: MUL
67979: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
67980: LD_ADDR_VAR 0 10
67984: PUSH
67985: LD_VAR 0 10
67989: PUSH
67990: LD_VAR 0 6
67994: PPUSH
67995: LD_INT 1
67997: PPUSH
67998: CALL_OW 259
68002: PUSH
68003: LD_REAL  1.15000000000000E+0000
68006: MUL
68007: MUL
68008: ST_TO_ADDR
// end ; unit_vehicle :
68009: GO 68833
68011: LD_INT 2
68013: DOUBLE
68014: EQUAL
68015: IFTRUE 68019
68017: GO 68821
68019: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
68020: LD_VAR 0 6
68024: PPUSH
68025: CALL_OW 264
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: LD_INT 42
68035: PUSH
68036: LD_INT 24
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: IN
68044: IFFALSE 68065
// points := [ 25 , 5 , 3 ] ;
68046: LD_ADDR_VAR 0 9
68050: PUSH
68051: LD_INT 25
68053: PUSH
68054: LD_INT 5
68056: PUSH
68057: LD_INT 3
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: LIST
68064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
68065: LD_VAR 0 6
68069: PPUSH
68070: CALL_OW 264
68074: PUSH
68075: LD_INT 4
68077: PUSH
68078: LD_INT 43
68080: PUSH
68081: LD_INT 25
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: IN
68089: IFFALSE 68110
// points := [ 40 , 15 , 5 ] ;
68091: LD_ADDR_VAR 0 9
68095: PUSH
68096: LD_INT 40
68098: PUSH
68099: LD_INT 15
68101: PUSH
68102: LD_INT 5
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
68110: LD_VAR 0 6
68114: PPUSH
68115: CALL_OW 264
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: LD_INT 23
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: IN
68130: IFFALSE 68151
// points := [ 7 , 25 , 8 ] ;
68132: LD_ADDR_VAR 0 9
68136: PUSH
68137: LD_INT 7
68139: PUSH
68140: LD_INT 25
68142: PUSH
68143: LD_INT 8
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
68151: LD_VAR 0 6
68155: PPUSH
68156: CALL_OW 264
68160: PUSH
68161: LD_INT 5
68163: PUSH
68164: LD_INT 27
68166: PUSH
68167: LD_INT 44
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: LIST
68174: IN
68175: IFFALSE 68196
// points := [ 14 , 50 , 16 ] ;
68177: LD_ADDR_VAR 0 9
68181: PUSH
68182: LD_INT 14
68184: PUSH
68185: LD_INT 50
68187: PUSH
68188: LD_INT 16
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: LIST
68195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
68196: LD_VAR 0 6
68200: PPUSH
68201: CALL_OW 264
68205: PUSH
68206: LD_INT 6
68208: PUSH
68209: LD_INT 46
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: IN
68216: IFFALSE 68237
// points := [ 32 , 120 , 70 ] ;
68218: LD_ADDR_VAR 0 9
68222: PUSH
68223: LD_INT 32
68225: PUSH
68226: LD_INT 120
68228: PUSH
68229: LD_INT 70
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
68237: LD_VAR 0 6
68241: PPUSH
68242: CALL_OW 264
68246: PUSH
68247: LD_INT 7
68249: PUSH
68250: LD_INT 28
68252: PUSH
68253: LD_INT 45
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: LIST
68260: IN
68261: IFFALSE 68282
// points := [ 35 , 20 , 45 ] ;
68263: LD_ADDR_VAR 0 9
68267: PUSH
68268: LD_INT 35
68270: PUSH
68271: LD_INT 20
68273: PUSH
68274: LD_INT 45
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
68282: LD_VAR 0 6
68286: PPUSH
68287: CALL_OW 264
68291: PUSH
68292: LD_INT 47
68294: PUSH
68295: EMPTY
68296: LIST
68297: IN
68298: IFFALSE 68319
// points := [ 67 , 45 , 75 ] ;
68300: LD_ADDR_VAR 0 9
68304: PUSH
68305: LD_INT 67
68307: PUSH
68308: LD_INT 45
68310: PUSH
68311: LD_INT 75
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: LIST
68318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
68319: LD_VAR 0 6
68323: PPUSH
68324: CALL_OW 264
68328: PUSH
68329: LD_INT 26
68331: PUSH
68332: EMPTY
68333: LIST
68334: IN
68335: IFFALSE 68356
// points := [ 120 , 30 , 80 ] ;
68337: LD_ADDR_VAR 0 9
68341: PUSH
68342: LD_INT 120
68344: PUSH
68345: LD_INT 30
68347: PUSH
68348: LD_INT 80
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
68356: LD_VAR 0 6
68360: PPUSH
68361: CALL_OW 264
68365: PUSH
68366: LD_INT 22
68368: PUSH
68369: EMPTY
68370: LIST
68371: IN
68372: IFFALSE 68393
// points := [ 40 , 1 , 1 ] ;
68374: LD_ADDR_VAR 0 9
68378: PUSH
68379: LD_INT 40
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
68393: LD_VAR 0 6
68397: PPUSH
68398: CALL_OW 264
68402: PUSH
68403: LD_INT 29
68405: PUSH
68406: EMPTY
68407: LIST
68408: IN
68409: IFFALSE 68430
// points := [ 70 , 200 , 400 ] ;
68411: LD_ADDR_VAR 0 9
68415: PUSH
68416: LD_INT 70
68418: PUSH
68419: LD_INT 200
68421: PUSH
68422: LD_INT 400
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: LIST
68429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
68430: LD_VAR 0 6
68434: PPUSH
68435: CALL_OW 264
68439: PUSH
68440: LD_INT 14
68442: PUSH
68443: LD_INT 53
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: IN
68450: IFFALSE 68471
// points := [ 40 , 10 , 20 ] ;
68452: LD_ADDR_VAR 0 9
68456: PUSH
68457: LD_INT 40
68459: PUSH
68460: LD_INT 10
68462: PUSH
68463: LD_INT 20
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
68471: LD_VAR 0 6
68475: PPUSH
68476: CALL_OW 264
68480: PUSH
68481: LD_INT 9
68483: PUSH
68484: EMPTY
68485: LIST
68486: IN
68487: IFFALSE 68508
// points := [ 5 , 70 , 20 ] ;
68489: LD_ADDR_VAR 0 9
68493: PUSH
68494: LD_INT 5
68496: PUSH
68497: LD_INT 70
68499: PUSH
68500: LD_INT 20
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
68508: LD_VAR 0 6
68512: PPUSH
68513: CALL_OW 264
68517: PUSH
68518: LD_INT 10
68520: PUSH
68521: EMPTY
68522: LIST
68523: IN
68524: IFFALSE 68545
// points := [ 35 , 110 , 70 ] ;
68526: LD_ADDR_VAR 0 9
68530: PUSH
68531: LD_INT 35
68533: PUSH
68534: LD_INT 110
68536: PUSH
68537: LD_INT 70
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: LIST
68544: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
68545: LD_VAR 0 6
68549: PPUSH
68550: CALL_OW 265
68554: PUSH
68555: LD_INT 25
68557: EQUAL
68558: IFFALSE 68579
// points := [ 80 , 65 , 100 ] ;
68560: LD_ADDR_VAR 0 9
68564: PUSH
68565: LD_INT 80
68567: PUSH
68568: LD_INT 65
68570: PUSH
68571: LD_INT 100
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: LIST
68578: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
68579: LD_VAR 0 6
68583: PPUSH
68584: CALL_OW 263
68588: PUSH
68589: LD_INT 1
68591: EQUAL
68592: IFFALSE 68627
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
68594: LD_ADDR_VAR 0 10
68598: PUSH
68599: LD_VAR 0 10
68603: PUSH
68604: LD_VAR 0 6
68608: PPUSH
68609: CALL_OW 311
68613: PPUSH
68614: LD_INT 3
68616: PPUSH
68617: CALL_OW 259
68621: PUSH
68622: LD_INT 4
68624: MUL
68625: MUL
68626: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
68627: LD_VAR 0 6
68631: PPUSH
68632: CALL_OW 263
68636: PUSH
68637: LD_INT 2
68639: EQUAL
68640: IFFALSE 68691
// begin j := IsControledBy ( i ) ;
68642: LD_ADDR_VAR 0 7
68646: PUSH
68647: LD_VAR 0 6
68651: PPUSH
68652: CALL_OW 312
68656: ST_TO_ADDR
// if j then
68657: LD_VAR 0 7
68661: IFFALSE 68691
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
68663: LD_ADDR_VAR 0 10
68667: PUSH
68668: LD_VAR 0 10
68672: PUSH
68673: LD_VAR 0 7
68677: PPUSH
68678: LD_INT 3
68680: PPUSH
68681: CALL_OW 259
68685: PUSH
68686: LD_INT 3
68688: MUL
68689: MUL
68690: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
68691: LD_VAR 0 6
68695: PPUSH
68696: CALL_OW 264
68700: PUSH
68701: LD_INT 5
68703: PUSH
68704: LD_INT 6
68706: PUSH
68707: LD_INT 46
68709: PUSH
68710: LD_INT 44
68712: PUSH
68713: LD_INT 47
68715: PUSH
68716: LD_INT 45
68718: PUSH
68719: LD_INT 28
68721: PUSH
68722: LD_INT 7
68724: PUSH
68725: LD_INT 27
68727: PUSH
68728: LD_INT 29
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: IN
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: LD_INT 52
68751: PPUSH
68752: CALL_OW 321
68756: PUSH
68757: LD_INT 2
68759: EQUAL
68760: AND
68761: IFFALSE 68778
// bpoints := bpoints * 1.2 ;
68763: LD_ADDR_VAR 0 10
68767: PUSH
68768: LD_VAR 0 10
68772: PUSH
68773: LD_REAL  1.20000000000000E+0000
68776: MUL
68777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
68778: LD_VAR 0 6
68782: PPUSH
68783: CALL_OW 264
68787: PUSH
68788: LD_INT 6
68790: PUSH
68791: LD_INT 46
68793: PUSH
68794: LD_INT 47
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: IN
68802: IFFALSE 68819
// bpoints := bpoints * 1.2 ;
68804: LD_ADDR_VAR 0 10
68808: PUSH
68809: LD_VAR 0 10
68813: PUSH
68814: LD_REAL  1.20000000000000E+0000
68817: MUL
68818: ST_TO_ADDR
// end ; unit_building :
68819: GO 68833
68821: LD_INT 3
68823: DOUBLE
68824: EQUAL
68825: IFTRUE 68829
68827: GO 68832
68829: POP
// ; end ;
68830: GO 68833
68832: POP
// for j = 1 to 3 do
68833: LD_ADDR_VAR 0 7
68837: PUSH
68838: DOUBLE
68839: LD_INT 1
68841: DEC
68842: ST_TO_ADDR
68843: LD_INT 3
68845: PUSH
68846: FOR_TO
68847: IFFALSE 68900
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
68849: LD_ADDR_VAR 0 5
68853: PUSH
68854: LD_VAR 0 5
68858: PPUSH
68859: LD_VAR 0 7
68863: PPUSH
68864: LD_VAR 0 5
68868: PUSH
68869: LD_VAR 0 7
68873: ARRAY
68874: PUSH
68875: LD_VAR 0 9
68879: PUSH
68880: LD_VAR 0 7
68884: ARRAY
68885: PUSH
68886: LD_VAR 0 10
68890: MUL
68891: PLUS
68892: PPUSH
68893: CALL_OW 1
68897: ST_TO_ADDR
68898: GO 68846
68900: POP
68901: POP
// end ;
68902: GO 67385
68904: POP
68905: POP
// result := Replace ( result , 4 , tmp ) ;
68906: LD_ADDR_VAR 0 5
68910: PUSH
68911: LD_VAR 0 5
68915: PPUSH
68916: LD_INT 4
68918: PPUSH
68919: LD_VAR 0 8
68923: PPUSH
68924: CALL_OW 1
68928: ST_TO_ADDR
// end ;
68929: LD_VAR 0 5
68933: RET
// export function DangerAtRange ( unit , range ) ; begin
68934: LD_INT 0
68936: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
68937: LD_ADDR_VAR 0 3
68941: PUSH
68942: LD_VAR 0 1
68946: PPUSH
68947: CALL_OW 255
68951: PPUSH
68952: LD_VAR 0 1
68956: PPUSH
68957: CALL_OW 250
68961: PPUSH
68962: LD_VAR 0 1
68966: PPUSH
68967: CALL_OW 251
68971: PPUSH
68972: LD_VAR 0 2
68976: PPUSH
68977: CALL 67237 0 4
68981: ST_TO_ADDR
// end ;
68982: LD_VAR 0 3
68986: RET
// export function DangerInArea ( side , area ) ; begin
68987: LD_INT 0
68989: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
68990: LD_ADDR_VAR 0 3
68994: PUSH
68995: LD_VAR 0 2
68999: PPUSH
69000: LD_INT 81
69002: PUSH
69003: LD_VAR 0 1
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PPUSH
69012: CALL_OW 70
69016: ST_TO_ADDR
// end ;
69017: LD_VAR 0 3
69021: RET
// export function IsExtension ( b ) ; begin
69022: LD_INT 0
69024: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
69025: LD_ADDR_VAR 0 2
69029: PUSH
69030: LD_VAR 0 1
69034: PUSH
69035: LD_INT 23
69037: PUSH
69038: LD_INT 20
69040: PUSH
69041: LD_INT 22
69043: PUSH
69044: LD_INT 17
69046: PUSH
69047: LD_INT 24
69049: PUSH
69050: LD_INT 21
69052: PUSH
69053: LD_INT 19
69055: PUSH
69056: LD_INT 16
69058: PUSH
69059: LD_INT 25
69061: PUSH
69062: LD_INT 18
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: IN
69077: ST_TO_ADDR
// end ;
69078: LD_VAR 0 2
69082: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
69083: LD_INT 0
69085: PPUSH
69086: PPUSH
69087: PPUSH
// result := [ ] ;
69088: LD_ADDR_VAR 0 3
69092: PUSH
69093: EMPTY
69094: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
69095: LD_ADDR_VAR 0 4
69099: PUSH
69100: LD_VAR 0 2
69104: PPUSH
69105: LD_INT 21
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PPUSH
69115: CALL_OW 70
69119: ST_TO_ADDR
// if not tmp then
69120: LD_VAR 0 4
69124: NOT
69125: IFFALSE 69129
// exit ;
69127: GO 69187
// for i in tmp do
69129: LD_ADDR_VAR 0 5
69133: PUSH
69134: LD_VAR 0 4
69138: PUSH
69139: FOR_IN
69140: IFFALSE 69175
// if GetBase ( i ) <> base then
69142: LD_VAR 0 5
69146: PPUSH
69147: CALL_OW 274
69151: PUSH
69152: LD_VAR 0 1
69156: NONEQUAL
69157: IFFALSE 69173
// ComLinkToBase ( base , i ) ;
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_VAR 0 5
69168: PPUSH
69169: CALL_OW 169
69173: GO 69139
69175: POP
69176: POP
// result := tmp ;
69177: LD_ADDR_VAR 0 3
69181: PUSH
69182: LD_VAR 0 4
69186: ST_TO_ADDR
// end ;
69187: LD_VAR 0 3
69191: RET
// export function ComComplete ( unit , b ) ; var i ; begin
69192: LD_INT 0
69194: PPUSH
69195: PPUSH
// if BuildingStatus ( b ) = bs_build then
69196: LD_VAR 0 2
69200: PPUSH
69201: CALL_OW 461
69205: PUSH
69206: LD_INT 1
69208: EQUAL
69209: IFFALSE 69269
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
69211: LD_VAR 0 1
69215: PPUSH
69216: LD_STRING h
69218: PUSH
69219: LD_VAR 0 2
69223: PPUSH
69224: CALL_OW 250
69228: PUSH
69229: LD_VAR 0 2
69233: PPUSH
69234: CALL_OW 251
69238: PUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: PPUSH
69265: CALL_OW 446
// end ;
69269: LD_VAR 0 3
69273: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
69274: LD_INT 0
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
69282: LD_VAR 0 1
69286: NOT
69287: PUSH
69288: LD_VAR 0 1
69292: PPUSH
69293: CALL_OW 263
69297: PUSH
69298: LD_INT 2
69300: EQUAL
69301: NOT
69302: OR
69303: IFFALSE 69307
// exit ;
69305: GO 69623
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
69307: LD_ADDR_VAR 0 6
69311: PUSH
69312: LD_INT 22
69314: PUSH
69315: LD_VAR 0 1
69319: PPUSH
69320: CALL_OW 255
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: LD_INT 30
69334: PUSH
69335: LD_INT 36
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 34
69344: PUSH
69345: LD_INT 31
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PPUSH
69361: CALL_OW 69
69365: ST_TO_ADDR
// if not tmp then
69366: LD_VAR 0 6
69370: NOT
69371: IFFALSE 69375
// exit ;
69373: GO 69623
// result := [ ] ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: EMPTY
69381: ST_TO_ADDR
// for i in tmp do
69382: LD_ADDR_VAR 0 3
69386: PUSH
69387: LD_VAR 0 6
69391: PUSH
69392: FOR_IN
69393: IFFALSE 69464
// begin t := UnitsInside ( i ) ;
69395: LD_ADDR_VAR 0 4
69399: PUSH
69400: LD_VAR 0 3
69404: PPUSH
69405: CALL_OW 313
69409: ST_TO_ADDR
// if t then
69410: LD_VAR 0 4
69414: IFFALSE 69462
// for j in t do
69416: LD_ADDR_VAR 0 7
69420: PUSH
69421: LD_VAR 0 4
69425: PUSH
69426: FOR_IN
69427: IFFALSE 69460
// result := Insert ( result , result + 1 , j ) ;
69429: LD_ADDR_VAR 0 2
69433: PUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 2
69443: PUSH
69444: LD_INT 1
69446: PLUS
69447: PPUSH
69448: LD_VAR 0 7
69452: PPUSH
69453: CALL_OW 2
69457: ST_TO_ADDR
69458: GO 69426
69460: POP
69461: POP
// end ;
69462: GO 69392
69464: POP
69465: POP
// if not result then
69466: LD_VAR 0 2
69470: NOT
69471: IFFALSE 69475
// exit ;
69473: GO 69623
// mech := result [ 1 ] ;
69475: LD_ADDR_VAR 0 5
69479: PUSH
69480: LD_VAR 0 2
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: ST_TO_ADDR
// if result > 1 then
69489: LD_VAR 0 2
69493: PUSH
69494: LD_INT 1
69496: GREATER
69497: IFFALSE 69609
// for i = 2 to result do
69499: LD_ADDR_VAR 0 3
69503: PUSH
69504: DOUBLE
69505: LD_INT 2
69507: DEC
69508: ST_TO_ADDR
69509: LD_VAR 0 2
69513: PUSH
69514: FOR_TO
69515: IFFALSE 69607
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
69517: LD_ADDR_VAR 0 4
69521: PUSH
69522: LD_VAR 0 2
69526: PUSH
69527: LD_VAR 0 3
69531: ARRAY
69532: PPUSH
69533: LD_INT 3
69535: PPUSH
69536: CALL_OW 259
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_VAR 0 3
69550: ARRAY
69551: PPUSH
69552: CALL_OW 432
69556: MINUS
69557: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
69558: LD_VAR 0 4
69562: PUSH
69563: LD_VAR 0 5
69567: PPUSH
69568: LD_INT 3
69570: PPUSH
69571: CALL_OW 259
69575: PUSH
69576: LD_VAR 0 5
69580: PPUSH
69581: CALL_OW 432
69585: MINUS
69586: GREATEREQUAL
69587: IFFALSE 69605
// mech := result [ i ] ;
69589: LD_ADDR_VAR 0 5
69593: PUSH
69594: LD_VAR 0 2
69598: PUSH
69599: LD_VAR 0 3
69603: ARRAY
69604: ST_TO_ADDR
// end ;
69605: GO 69514
69607: POP
69608: POP
// ComLinkTo ( vehicle , mech ) ;
69609: LD_VAR 0 1
69613: PPUSH
69614: LD_VAR 0 5
69618: PPUSH
69619: CALL_OW 135
// end ;
69623: LD_VAR 0 2
69627: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
69628: LD_INT 0
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
// result := [ ] ;
69643: LD_ADDR_VAR 0 7
69647: PUSH
69648: EMPTY
69649: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
69650: LD_VAR 0 1
69654: PPUSH
69655: CALL_OW 266
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: LD_INT 1
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: IN
69670: NOT
69671: IFFALSE 69675
// exit ;
69673: GO 71306
// if name then
69675: LD_VAR 0 3
69679: IFFALSE 69695
// SetBName ( base_dep , name ) ;
69681: LD_VAR 0 1
69685: PPUSH
69686: LD_VAR 0 3
69690: PPUSH
69691: CALL_OW 500
// base := GetBase ( base_dep ) ;
69695: LD_ADDR_VAR 0 15
69699: PUSH
69700: LD_VAR 0 1
69704: PPUSH
69705: CALL_OW 274
69709: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
69710: LD_ADDR_VAR 0 16
69714: PUSH
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 255
69724: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
69725: LD_ADDR_VAR 0 17
69729: PUSH
69730: LD_VAR 0 1
69734: PPUSH
69735: CALL_OW 248
69739: ST_TO_ADDR
// if sources then
69740: LD_VAR 0 5
69744: IFFALSE 69791
// for i = 1 to 3 do
69746: LD_ADDR_VAR 0 8
69750: PUSH
69751: DOUBLE
69752: LD_INT 1
69754: DEC
69755: ST_TO_ADDR
69756: LD_INT 3
69758: PUSH
69759: FOR_TO
69760: IFFALSE 69789
// AddResourceType ( base , i , sources [ i ] ) ;
69762: LD_VAR 0 15
69766: PPUSH
69767: LD_VAR 0 8
69771: PPUSH
69772: LD_VAR 0 5
69776: PUSH
69777: LD_VAR 0 8
69781: ARRAY
69782: PPUSH
69783: CALL_OW 276
69787: GO 69759
69789: POP
69790: POP
// buildings := GetBaseBuildings ( base , area ) ;
69791: LD_ADDR_VAR 0 18
69795: PUSH
69796: LD_VAR 0 15
69800: PPUSH
69801: LD_VAR 0 2
69805: PPUSH
69806: CALL 69083 0 2
69810: ST_TO_ADDR
// InitHc ;
69811: CALL_OW 19
// InitUc ;
69815: CALL_OW 18
// uc_side := side ;
69819: LD_ADDR_OWVAR 20
69823: PUSH
69824: LD_VAR 0 16
69828: ST_TO_ADDR
// uc_nation := nation ;
69829: LD_ADDR_OWVAR 21
69833: PUSH
69834: LD_VAR 0 17
69838: ST_TO_ADDR
// if buildings then
69839: LD_VAR 0 18
69843: IFFALSE 71165
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
69845: LD_ADDR_VAR 0 19
69849: PUSH
69850: LD_VAR 0 18
69854: PPUSH
69855: LD_INT 2
69857: PUSH
69858: LD_INT 30
69860: PUSH
69861: LD_INT 29
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 30
69870: PUSH
69871: LD_INT 30
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: PPUSH
69883: CALL_OW 72
69887: ST_TO_ADDR
// if tmp then
69888: LD_VAR 0 19
69892: IFFALSE 69940
// for i in tmp do
69894: LD_ADDR_VAR 0 8
69898: PUSH
69899: LD_VAR 0 19
69903: PUSH
69904: FOR_IN
69905: IFFALSE 69938
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
69907: LD_VAR 0 8
69911: PPUSH
69912: CALL_OW 250
69916: PPUSH
69917: LD_VAR 0 8
69921: PPUSH
69922: CALL_OW 251
69926: PPUSH
69927: LD_VAR 0 16
69931: PPUSH
69932: CALL_OW 441
69936: GO 69904
69938: POP
69939: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
69940: LD_VAR 0 18
69944: PPUSH
69945: LD_INT 2
69947: PUSH
69948: LD_INT 30
69950: PUSH
69951: LD_INT 32
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 30
69960: PUSH
69961: LD_INT 33
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: PPUSH
69973: CALL_OW 72
69977: IFFALSE 70065
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
69979: LD_ADDR_VAR 0 8
69983: PUSH
69984: LD_VAR 0 18
69988: PPUSH
69989: LD_INT 2
69991: PUSH
69992: LD_INT 30
69994: PUSH
69995: LD_INT 32
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 30
70004: PUSH
70005: LD_INT 33
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: PPUSH
70017: CALL_OW 72
70021: PUSH
70022: FOR_IN
70023: IFFALSE 70063
// begin if not GetBWeapon ( i ) then
70025: LD_VAR 0 8
70029: PPUSH
70030: CALL_OW 269
70034: NOT
70035: IFFALSE 70061
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
70037: LD_VAR 0 8
70041: PPUSH
70042: LD_VAR 0 8
70046: PPUSH
70047: LD_VAR 0 2
70051: PPUSH
70052: CALL 71311 0 2
70056: PPUSH
70057: CALL_OW 431
// end ;
70061: GO 70022
70063: POP
70064: POP
// end ; for i = 1 to personel do
70065: LD_ADDR_VAR 0 8
70069: PUSH
70070: DOUBLE
70071: LD_INT 1
70073: DEC
70074: ST_TO_ADDR
70075: LD_VAR 0 6
70079: PUSH
70080: FOR_TO
70081: IFFALSE 71145
// begin if i > 4 then
70083: LD_VAR 0 8
70087: PUSH
70088: LD_INT 4
70090: GREATER
70091: IFFALSE 70095
// break ;
70093: GO 71145
// case i of 1 :
70095: LD_VAR 0 8
70099: PUSH
70100: LD_INT 1
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70108
70106: GO 70188
70108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
70109: LD_ADDR_VAR 0 12
70113: PUSH
70114: LD_VAR 0 18
70118: PPUSH
70119: LD_INT 22
70121: PUSH
70122: LD_VAR 0 16
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 58
70133: PUSH
70134: EMPTY
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: PUSH
70140: LD_INT 30
70142: PUSH
70143: LD_INT 32
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 30
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 30
70162: PUSH
70163: LD_INT 5
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: LIST
70180: PPUSH
70181: CALL_OW 72
70185: ST_TO_ADDR
70186: GO 70410
70188: LD_INT 2
70190: DOUBLE
70191: EQUAL
70192: IFTRUE 70196
70194: GO 70258
70196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
70197: LD_ADDR_VAR 0 12
70201: PUSH
70202: LD_VAR 0 18
70206: PPUSH
70207: LD_INT 22
70209: PUSH
70210: LD_VAR 0 16
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 2
70221: PUSH
70222: LD_INT 30
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 30
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PPUSH
70251: CALL_OW 72
70255: ST_TO_ADDR
70256: GO 70410
70258: LD_INT 3
70260: DOUBLE
70261: EQUAL
70262: IFTRUE 70266
70264: GO 70328
70266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
70267: LD_ADDR_VAR 0 12
70271: PUSH
70272: LD_VAR 0 18
70276: PPUSH
70277: LD_INT 22
70279: PUSH
70280: LD_VAR 0 16
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 2
70291: PUSH
70292: LD_INT 30
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 30
70304: PUSH
70305: LD_INT 3
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 72
70325: ST_TO_ADDR
70326: GO 70410
70328: LD_INT 4
70330: DOUBLE
70331: EQUAL
70332: IFTRUE 70336
70334: GO 70409
70336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
70337: LD_ADDR_VAR 0 12
70341: PUSH
70342: LD_VAR 0 18
70346: PPUSH
70347: LD_INT 22
70349: PUSH
70350: LD_VAR 0 16
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: LD_INT 30
70364: PUSH
70365: LD_INT 6
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 30
70374: PUSH
70375: LD_INT 7
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 30
70384: PUSH
70385: LD_INT 8
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PPUSH
70402: CALL_OW 72
70406: ST_TO_ADDR
70407: GO 70410
70409: POP
// if i = 1 then
70410: LD_VAR 0 8
70414: PUSH
70415: LD_INT 1
70417: EQUAL
70418: IFFALSE 70529
// begin tmp := [ ] ;
70420: LD_ADDR_VAR 0 19
70424: PUSH
70425: EMPTY
70426: ST_TO_ADDR
// for j in f do
70427: LD_ADDR_VAR 0 9
70431: PUSH
70432: LD_VAR 0 12
70436: PUSH
70437: FOR_IN
70438: IFFALSE 70511
// if GetBType ( j ) = b_bunker then
70440: LD_VAR 0 9
70444: PPUSH
70445: CALL_OW 266
70449: PUSH
70450: LD_INT 32
70452: EQUAL
70453: IFFALSE 70480
// tmp := Insert ( tmp , 1 , j ) else
70455: LD_ADDR_VAR 0 19
70459: PUSH
70460: LD_VAR 0 19
70464: PPUSH
70465: LD_INT 1
70467: PPUSH
70468: LD_VAR 0 9
70472: PPUSH
70473: CALL_OW 2
70477: ST_TO_ADDR
70478: GO 70509
// tmp := Insert ( tmp , tmp + 1 , j ) ;
70480: LD_ADDR_VAR 0 19
70484: PUSH
70485: LD_VAR 0 19
70489: PPUSH
70490: LD_VAR 0 19
70494: PUSH
70495: LD_INT 1
70497: PLUS
70498: PPUSH
70499: LD_VAR 0 9
70503: PPUSH
70504: CALL_OW 2
70508: ST_TO_ADDR
70509: GO 70437
70511: POP
70512: POP
// if tmp then
70513: LD_VAR 0 19
70517: IFFALSE 70529
// f := tmp ;
70519: LD_ADDR_VAR 0 12
70523: PUSH
70524: LD_VAR 0 19
70528: ST_TO_ADDR
// end ; x := personel [ i ] ;
70529: LD_ADDR_VAR 0 13
70533: PUSH
70534: LD_VAR 0 6
70538: PUSH
70539: LD_VAR 0 8
70543: ARRAY
70544: ST_TO_ADDR
// if x = - 1 then
70545: LD_VAR 0 13
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: EQUAL
70554: IFFALSE 70763
// begin for j in f do
70556: LD_ADDR_VAR 0 9
70560: PUSH
70561: LD_VAR 0 12
70565: PUSH
70566: FOR_IN
70567: IFFALSE 70759
// repeat InitHc ;
70569: CALL_OW 19
// if GetBType ( j ) = b_barracks then
70573: LD_VAR 0 9
70577: PPUSH
70578: CALL_OW 266
70582: PUSH
70583: LD_INT 5
70585: EQUAL
70586: IFFALSE 70656
// begin if UnitsInside ( j ) < 3 then
70588: LD_VAR 0 9
70592: PPUSH
70593: CALL_OW 313
70597: PUSH
70598: LD_INT 3
70600: LESS
70601: IFFALSE 70637
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
70603: LD_INT 0
70605: PPUSH
70606: LD_INT 5
70608: PUSH
70609: LD_INT 8
70611: PUSH
70612: LD_INT 9
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: LD_VAR 0 17
70624: ARRAY
70625: PPUSH
70626: LD_VAR 0 4
70630: PPUSH
70631: CALL_OW 380
70635: GO 70654
// PrepareHuman ( false , i , skill ) ;
70637: LD_INT 0
70639: PPUSH
70640: LD_VAR 0 8
70644: PPUSH
70645: LD_VAR 0 4
70649: PPUSH
70650: CALL_OW 380
// end else
70654: GO 70673
// PrepareHuman ( false , i , skill ) ;
70656: LD_INT 0
70658: PPUSH
70659: LD_VAR 0 8
70663: PPUSH
70664: LD_VAR 0 4
70668: PPUSH
70669: CALL_OW 380
// un := CreateHuman ;
70673: LD_ADDR_VAR 0 14
70677: PUSH
70678: CALL_OW 44
70682: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
70683: LD_ADDR_VAR 0 7
70687: PUSH
70688: LD_VAR 0 7
70692: PPUSH
70693: LD_INT 1
70695: PPUSH
70696: LD_VAR 0 14
70700: PPUSH
70701: CALL_OW 2
70705: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
70706: LD_VAR 0 14
70710: PPUSH
70711: LD_VAR 0 9
70715: PPUSH
70716: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
70720: LD_VAR 0 9
70724: PPUSH
70725: CALL_OW 313
70729: PUSH
70730: LD_INT 6
70732: EQUAL
70733: PUSH
70734: LD_VAR 0 9
70738: PPUSH
70739: CALL_OW 266
70743: PUSH
70744: LD_INT 32
70746: PUSH
70747: LD_INT 31
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: IN
70754: OR
70755: IFFALSE 70569
70757: GO 70566
70759: POP
70760: POP
// end else
70761: GO 71143
// for j = 1 to x do
70763: LD_ADDR_VAR 0 9
70767: PUSH
70768: DOUBLE
70769: LD_INT 1
70771: DEC
70772: ST_TO_ADDR
70773: LD_VAR 0 13
70777: PUSH
70778: FOR_TO
70779: IFFALSE 71141
// begin InitHc ;
70781: CALL_OW 19
// if not f then
70785: LD_VAR 0 12
70789: NOT
70790: IFFALSE 70879
// begin PrepareHuman ( false , i , skill ) ;
70792: LD_INT 0
70794: PPUSH
70795: LD_VAR 0 8
70799: PPUSH
70800: LD_VAR 0 4
70804: PPUSH
70805: CALL_OW 380
// un := CreateHuman ;
70809: LD_ADDR_VAR 0 14
70813: PUSH
70814: CALL_OW 44
70818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
70819: LD_ADDR_VAR 0 7
70823: PUSH
70824: LD_VAR 0 7
70828: PPUSH
70829: LD_INT 1
70831: PPUSH
70832: LD_VAR 0 14
70836: PPUSH
70837: CALL_OW 2
70841: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
70842: LD_VAR 0 14
70846: PPUSH
70847: LD_VAR 0 1
70851: PPUSH
70852: CALL_OW 250
70856: PPUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: CALL_OW 251
70866: PPUSH
70867: LD_INT 10
70869: PPUSH
70870: LD_INT 0
70872: PPUSH
70873: CALL_OW 50
// continue ;
70877: GO 70778
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
70879: LD_VAR 0 12
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PPUSH
70888: CALL_OW 313
70892: PUSH
70893: LD_VAR 0 12
70897: PUSH
70898: LD_INT 1
70900: ARRAY
70901: PPUSH
70902: CALL_OW 266
70906: PUSH
70907: LD_INT 32
70909: PUSH
70910: LD_INT 31
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: IN
70917: AND
70918: PUSH
70919: LD_VAR 0 12
70923: PUSH
70924: LD_INT 1
70926: ARRAY
70927: PPUSH
70928: CALL_OW 313
70932: PUSH
70933: LD_INT 6
70935: EQUAL
70936: OR
70937: IFFALSE 70957
// f := Delete ( f , 1 ) ;
70939: LD_ADDR_VAR 0 12
70943: PUSH
70944: LD_VAR 0 12
70948: PPUSH
70949: LD_INT 1
70951: PPUSH
70952: CALL_OW 3
70956: ST_TO_ADDR
// if not f then
70957: LD_VAR 0 12
70961: NOT
70962: IFFALSE 70980
// begin x := x + 2 ;
70964: LD_ADDR_VAR 0 13
70968: PUSH
70969: LD_VAR 0 13
70973: PUSH
70974: LD_INT 2
70976: PLUS
70977: ST_TO_ADDR
// continue ;
70978: GO 70778
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
70980: LD_VAR 0 12
70984: PUSH
70985: LD_INT 1
70987: ARRAY
70988: PPUSH
70989: CALL_OW 266
70993: PUSH
70994: LD_INT 5
70996: EQUAL
70997: IFFALSE 71071
// begin if UnitsInside ( f [ 1 ] ) < 3 then
70999: LD_VAR 0 12
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PPUSH
71008: CALL_OW 313
71012: PUSH
71013: LD_INT 3
71015: LESS
71016: IFFALSE 71052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
71018: LD_INT 0
71020: PPUSH
71021: LD_INT 5
71023: PUSH
71024: LD_INT 8
71026: PUSH
71027: LD_INT 9
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: LIST
71034: PUSH
71035: LD_VAR 0 17
71039: ARRAY
71040: PPUSH
71041: LD_VAR 0 4
71045: PPUSH
71046: CALL_OW 380
71050: GO 71069
// PrepareHuman ( false , i , skill ) ;
71052: LD_INT 0
71054: PPUSH
71055: LD_VAR 0 8
71059: PPUSH
71060: LD_VAR 0 4
71064: PPUSH
71065: CALL_OW 380
// end else
71069: GO 71088
// PrepareHuman ( false , i , skill ) ;
71071: LD_INT 0
71073: PPUSH
71074: LD_VAR 0 8
71078: PPUSH
71079: LD_VAR 0 4
71083: PPUSH
71084: CALL_OW 380
// un := CreateHuman ;
71088: LD_ADDR_VAR 0 14
71092: PUSH
71093: CALL_OW 44
71097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
71098: LD_ADDR_VAR 0 7
71102: PUSH
71103: LD_VAR 0 7
71107: PPUSH
71108: LD_INT 1
71110: PPUSH
71111: LD_VAR 0 14
71115: PPUSH
71116: CALL_OW 2
71120: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
71121: LD_VAR 0 14
71125: PPUSH
71126: LD_VAR 0 12
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: PPUSH
71135: CALL_OW 52
// end ;
71139: GO 70778
71141: POP
71142: POP
// end ;
71143: GO 70080
71145: POP
71146: POP
// result := result ^ buildings ;
71147: LD_ADDR_VAR 0 7
71151: PUSH
71152: LD_VAR 0 7
71156: PUSH
71157: LD_VAR 0 18
71161: ADD
71162: ST_TO_ADDR
// end else
71163: GO 71306
// begin for i = 1 to personel do
71165: LD_ADDR_VAR 0 8
71169: PUSH
71170: DOUBLE
71171: LD_INT 1
71173: DEC
71174: ST_TO_ADDR
71175: LD_VAR 0 6
71179: PUSH
71180: FOR_TO
71181: IFFALSE 71304
// begin if i > 4 then
71183: LD_VAR 0 8
71187: PUSH
71188: LD_INT 4
71190: GREATER
71191: IFFALSE 71195
// break ;
71193: GO 71304
// x := personel [ i ] ;
71195: LD_ADDR_VAR 0 13
71199: PUSH
71200: LD_VAR 0 6
71204: PUSH
71205: LD_VAR 0 8
71209: ARRAY
71210: ST_TO_ADDR
// if x = - 1 then
71211: LD_VAR 0 13
71215: PUSH
71216: LD_INT 1
71218: NEG
71219: EQUAL
71220: IFFALSE 71224
// continue ;
71222: GO 71180
// PrepareHuman ( false , i , skill ) ;
71224: LD_INT 0
71226: PPUSH
71227: LD_VAR 0 8
71231: PPUSH
71232: LD_VAR 0 4
71236: PPUSH
71237: CALL_OW 380
// un := CreateHuman ;
71241: LD_ADDR_VAR 0 14
71245: PUSH
71246: CALL_OW 44
71250: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
71251: LD_VAR 0 14
71255: PPUSH
71256: LD_VAR 0 1
71260: PPUSH
71261: CALL_OW 250
71265: PPUSH
71266: LD_VAR 0 1
71270: PPUSH
71271: CALL_OW 251
71275: PPUSH
71276: LD_INT 10
71278: PPUSH
71279: LD_INT 0
71281: PPUSH
71282: CALL_OW 50
// result := result ^ un ;
71286: LD_ADDR_VAR 0 7
71290: PUSH
71291: LD_VAR 0 7
71295: PUSH
71296: LD_VAR 0 14
71300: ADD
71301: ST_TO_ADDR
// end ;
71302: GO 71180
71304: POP
71305: POP
// end ; end ;
71306: LD_VAR 0 7
71310: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
71311: LD_INT 0
71313: PPUSH
71314: PPUSH
71315: PPUSH
71316: PPUSH
71317: PPUSH
71318: PPUSH
71319: PPUSH
71320: PPUSH
71321: PPUSH
71322: PPUSH
71323: PPUSH
71324: PPUSH
71325: PPUSH
71326: PPUSH
71327: PPUSH
71328: PPUSH
// result := false ;
71329: LD_ADDR_VAR 0 3
71333: PUSH
71334: LD_INT 0
71336: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
71337: LD_VAR 0 1
71341: NOT
71342: PUSH
71343: LD_VAR 0 1
71347: PPUSH
71348: CALL_OW 266
71352: PUSH
71353: LD_INT 32
71355: PUSH
71356: LD_INT 33
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: IN
71363: NOT
71364: OR
71365: IFFALSE 71369
// exit ;
71367: GO 72505
// nat := GetNation ( tower ) ;
71369: LD_ADDR_VAR 0 12
71373: PUSH
71374: LD_VAR 0 1
71378: PPUSH
71379: CALL_OW 248
71383: ST_TO_ADDR
// side := GetSide ( tower ) ;
71384: LD_ADDR_VAR 0 16
71388: PUSH
71389: LD_VAR 0 1
71393: PPUSH
71394: CALL_OW 255
71398: ST_TO_ADDR
// x := GetX ( tower ) ;
71399: LD_ADDR_VAR 0 10
71403: PUSH
71404: LD_VAR 0 1
71408: PPUSH
71409: CALL_OW 250
71413: ST_TO_ADDR
// y := GetY ( tower ) ;
71414: LD_ADDR_VAR 0 11
71418: PUSH
71419: LD_VAR 0 1
71423: PPUSH
71424: CALL_OW 251
71428: ST_TO_ADDR
// if not x or not y then
71429: LD_VAR 0 10
71433: NOT
71434: PUSH
71435: LD_VAR 0 11
71439: NOT
71440: OR
71441: IFFALSE 71445
// exit ;
71443: GO 72505
// weapon := 0 ;
71445: LD_ADDR_VAR 0 18
71449: PUSH
71450: LD_INT 0
71452: ST_TO_ADDR
// fac_list := [ ] ;
71453: LD_ADDR_VAR 0 17
71457: PUSH
71458: EMPTY
71459: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
71460: LD_ADDR_VAR 0 6
71464: PUSH
71465: LD_VAR 0 1
71469: PPUSH
71470: CALL_OW 274
71474: PPUSH
71475: LD_VAR 0 2
71479: PPUSH
71480: CALL 69083 0 2
71484: PPUSH
71485: LD_INT 30
71487: PUSH
71488: LD_INT 3
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PPUSH
71495: CALL_OW 72
71499: ST_TO_ADDR
// if not factories then
71500: LD_VAR 0 6
71504: NOT
71505: IFFALSE 71509
// exit ;
71507: GO 72505
// for i in factories do
71509: LD_ADDR_VAR 0 8
71513: PUSH
71514: LD_VAR 0 6
71518: PUSH
71519: FOR_IN
71520: IFFALSE 71545
// fac_list := fac_list union AvailableWeaponList ( i ) ;
71522: LD_ADDR_VAR 0 17
71526: PUSH
71527: LD_VAR 0 17
71531: PUSH
71532: LD_VAR 0 8
71536: PPUSH
71537: CALL_OW 478
71541: UNION
71542: ST_TO_ADDR
71543: GO 71519
71545: POP
71546: POP
// if not fac_list then
71547: LD_VAR 0 17
71551: NOT
71552: IFFALSE 71556
// exit ;
71554: GO 72505
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
71556: LD_ADDR_VAR 0 5
71560: PUSH
71561: LD_INT 4
71563: PUSH
71564: LD_INT 5
71566: PUSH
71567: LD_INT 9
71569: PUSH
71570: LD_INT 10
71572: PUSH
71573: LD_INT 6
71575: PUSH
71576: LD_INT 7
71578: PUSH
71579: LD_INT 11
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 27
71593: PUSH
71594: LD_INT 28
71596: PUSH
71597: LD_INT 26
71599: PUSH
71600: LD_INT 30
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 43
71611: PUSH
71612: LD_INT 44
71614: PUSH
71615: LD_INT 46
71617: PUSH
71618: LD_INT 45
71620: PUSH
71621: LD_INT 47
71623: PUSH
71624: LD_INT 49
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: LIST
71639: PUSH
71640: LD_VAR 0 12
71644: ARRAY
71645: ST_TO_ADDR
// for i in list do
71646: LD_ADDR_VAR 0 8
71650: PUSH
71651: LD_VAR 0 5
71655: PUSH
71656: FOR_IN
71657: IFFALSE 71690
// if not i in fac_list then
71659: LD_VAR 0 8
71663: PUSH
71664: LD_VAR 0 17
71668: IN
71669: NOT
71670: IFFALSE 71688
// list := list diff i ;
71672: LD_ADDR_VAR 0 5
71676: PUSH
71677: LD_VAR 0 5
71681: PUSH
71682: LD_VAR 0 8
71686: DIFF
71687: ST_TO_ADDR
71688: GO 71656
71690: POP
71691: POP
// if not list then
71692: LD_VAR 0 5
71696: NOT
71697: IFFALSE 71701
// exit ;
71699: GO 72505
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
71701: LD_VAR 0 12
71705: PUSH
71706: LD_INT 3
71708: EQUAL
71709: PUSH
71710: LD_INT 49
71712: PUSH
71713: LD_VAR 0 5
71717: IN
71718: AND
71719: PUSH
71720: LD_INT 31
71722: PPUSH
71723: LD_VAR 0 16
71727: PPUSH
71728: CALL_OW 321
71732: PUSH
71733: LD_INT 2
71735: EQUAL
71736: AND
71737: IFFALSE 71797
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
71739: LD_INT 22
71741: PUSH
71742: LD_VAR 0 16
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 35
71753: PUSH
71754: LD_INT 49
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 91
71763: PUSH
71764: LD_VAR 0 1
71768: PUSH
71769: LD_INT 10
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: LIST
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: PPUSH
71782: CALL_OW 69
71786: NOT
71787: IFFALSE 71797
// weapon := ru_time_lapser ;
71789: LD_ADDR_VAR 0 18
71793: PUSH
71794: LD_INT 49
71796: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
71797: LD_VAR 0 12
71801: PUSH
71802: LD_INT 1
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: IN
71812: PUSH
71813: LD_INT 11
71815: PUSH
71816: LD_VAR 0 5
71820: IN
71821: PUSH
71822: LD_INT 30
71824: PUSH
71825: LD_VAR 0 5
71829: IN
71830: OR
71831: AND
71832: PUSH
71833: LD_INT 6
71835: PPUSH
71836: LD_VAR 0 16
71840: PPUSH
71841: CALL_OW 321
71845: PUSH
71846: LD_INT 2
71848: EQUAL
71849: AND
71850: IFFALSE 72015
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
71852: LD_INT 22
71854: PUSH
71855: LD_VAR 0 16
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 35
71869: PUSH
71870: LD_INT 11
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 35
71879: PUSH
71880: LD_INT 30
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 91
71894: PUSH
71895: LD_VAR 0 1
71899: PUSH
71900: LD_INT 18
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: LIST
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: LIST
71912: PPUSH
71913: CALL_OW 69
71917: NOT
71918: PUSH
71919: LD_INT 22
71921: PUSH
71922: LD_VAR 0 16
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 2
71933: PUSH
71934: LD_INT 30
71936: PUSH
71937: LD_INT 32
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 30
71946: PUSH
71947: LD_INT 33
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 91
71961: PUSH
71962: LD_VAR 0 1
71966: PUSH
71967: LD_INT 12
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: LIST
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: PPUSH
71983: CALL_OW 69
71987: PUSH
71988: LD_INT 2
71990: GREATER
71991: AND
71992: IFFALSE 72015
// weapon := [ us_radar , ar_radar ] [ nat ] ;
71994: LD_ADDR_VAR 0 18
71998: PUSH
71999: LD_INT 11
72001: PUSH
72002: LD_INT 30
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_VAR 0 12
72013: ARRAY
72014: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
72015: LD_VAR 0 18
72019: NOT
72020: PUSH
72021: LD_INT 40
72023: PPUSH
72024: LD_VAR 0 16
72028: PPUSH
72029: CALL_OW 321
72033: PUSH
72034: LD_INT 2
72036: EQUAL
72037: AND
72038: PUSH
72039: LD_INT 7
72041: PUSH
72042: LD_VAR 0 5
72046: IN
72047: PUSH
72048: LD_INT 28
72050: PUSH
72051: LD_VAR 0 5
72055: IN
72056: OR
72057: PUSH
72058: LD_INT 45
72060: PUSH
72061: LD_VAR 0 5
72065: IN
72066: OR
72067: AND
72068: IFFALSE 72322
// begin hex := GetHexInfo ( x , y ) ;
72070: LD_ADDR_VAR 0 4
72074: PUSH
72075: LD_VAR 0 10
72079: PPUSH
72080: LD_VAR 0 11
72084: PPUSH
72085: CALL_OW 546
72089: ST_TO_ADDR
// if hex [ 1 ] then
72090: LD_VAR 0 4
72094: PUSH
72095: LD_INT 1
72097: ARRAY
72098: IFFALSE 72102
// exit ;
72100: GO 72505
// height := hex [ 2 ] ;
72102: LD_ADDR_VAR 0 15
72106: PUSH
72107: LD_VAR 0 4
72111: PUSH
72112: LD_INT 2
72114: ARRAY
72115: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
72116: LD_ADDR_VAR 0 14
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: LD_INT 2
72126: PUSH
72127: LD_INT 3
72129: PUSH
72130: LD_INT 5
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: ST_TO_ADDR
// for i in tmp do
72139: LD_ADDR_VAR 0 8
72143: PUSH
72144: LD_VAR 0 14
72148: PUSH
72149: FOR_IN
72150: IFFALSE 72320
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
72152: LD_ADDR_VAR 0 9
72156: PUSH
72157: LD_VAR 0 10
72161: PPUSH
72162: LD_VAR 0 8
72166: PPUSH
72167: LD_INT 5
72169: PPUSH
72170: CALL_OW 272
72174: PUSH
72175: LD_VAR 0 11
72179: PPUSH
72180: LD_VAR 0 8
72184: PPUSH
72185: LD_INT 5
72187: PPUSH
72188: CALL_OW 273
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
72197: LD_VAR 0 9
72201: PUSH
72202: LD_INT 1
72204: ARRAY
72205: PPUSH
72206: LD_VAR 0 9
72210: PUSH
72211: LD_INT 2
72213: ARRAY
72214: PPUSH
72215: CALL_OW 488
72219: IFFALSE 72318
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
72221: LD_ADDR_VAR 0 4
72225: PUSH
72226: LD_VAR 0 9
72230: PUSH
72231: LD_INT 1
72233: ARRAY
72234: PPUSH
72235: LD_VAR 0 9
72239: PUSH
72240: LD_INT 2
72242: ARRAY
72243: PPUSH
72244: CALL_OW 546
72248: ST_TO_ADDR
// if hex [ 1 ] then
72249: LD_VAR 0 4
72253: PUSH
72254: LD_INT 1
72256: ARRAY
72257: IFFALSE 72261
// continue ;
72259: GO 72149
// h := hex [ 2 ] ;
72261: LD_ADDR_VAR 0 13
72265: PUSH
72266: LD_VAR 0 4
72270: PUSH
72271: LD_INT 2
72273: ARRAY
72274: ST_TO_ADDR
// if h + 7 < height then
72275: LD_VAR 0 13
72279: PUSH
72280: LD_INT 7
72282: PLUS
72283: PUSH
72284: LD_VAR 0 15
72288: LESS
72289: IFFALSE 72318
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
72291: LD_ADDR_VAR 0 18
72295: PUSH
72296: LD_INT 7
72298: PUSH
72299: LD_INT 28
72301: PUSH
72302: LD_INT 45
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: PUSH
72310: LD_VAR 0 12
72314: ARRAY
72315: ST_TO_ADDR
// break ;
72316: GO 72320
// end ; end ; end ;
72318: GO 72149
72320: POP
72321: POP
// end ; if not weapon then
72322: LD_VAR 0 18
72326: NOT
72327: IFFALSE 72387
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
72329: LD_ADDR_VAR 0 5
72333: PUSH
72334: LD_VAR 0 5
72338: PUSH
72339: LD_INT 11
72341: PUSH
72342: LD_INT 30
72344: PUSH
72345: LD_INT 49
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: DIFF
72353: ST_TO_ADDR
// if not list then
72354: LD_VAR 0 5
72358: NOT
72359: IFFALSE 72363
// exit ;
72361: GO 72505
// weapon := list [ rand ( 1 , list ) ] ;
72363: LD_ADDR_VAR 0 18
72367: PUSH
72368: LD_VAR 0 5
72372: PUSH
72373: LD_INT 1
72375: PPUSH
72376: LD_VAR 0 5
72380: PPUSH
72381: CALL_OW 12
72385: ARRAY
72386: ST_TO_ADDR
// end ; if weapon then
72387: LD_VAR 0 18
72391: IFFALSE 72505
// begin tmp := CostOfWeapon ( weapon ) ;
72393: LD_ADDR_VAR 0 14
72397: PUSH
72398: LD_VAR 0 18
72402: PPUSH
72403: CALL_OW 451
72407: ST_TO_ADDR
// j := GetBase ( tower ) ;
72408: LD_ADDR_VAR 0 9
72412: PUSH
72413: LD_VAR 0 1
72417: PPUSH
72418: CALL_OW 274
72422: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
72423: LD_VAR 0 9
72427: PPUSH
72428: LD_INT 1
72430: PPUSH
72431: CALL_OW 275
72435: PUSH
72436: LD_VAR 0 14
72440: PUSH
72441: LD_INT 1
72443: ARRAY
72444: GREATEREQUAL
72445: PUSH
72446: LD_VAR 0 9
72450: PPUSH
72451: LD_INT 2
72453: PPUSH
72454: CALL_OW 275
72458: PUSH
72459: LD_VAR 0 14
72463: PUSH
72464: LD_INT 2
72466: ARRAY
72467: GREATEREQUAL
72468: AND
72469: PUSH
72470: LD_VAR 0 9
72474: PPUSH
72475: LD_INT 3
72477: PPUSH
72478: CALL_OW 275
72482: PUSH
72483: LD_VAR 0 14
72487: PUSH
72488: LD_INT 3
72490: ARRAY
72491: GREATEREQUAL
72492: AND
72493: IFFALSE 72505
// result := weapon ;
72495: LD_ADDR_VAR 0 3
72499: PUSH
72500: LD_VAR 0 18
72504: ST_TO_ADDR
// end ; end ;
72505: LD_VAR 0 3
72509: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
72510: LD_INT 0
72512: PPUSH
72513: PPUSH
// result := true ;
72514: LD_ADDR_VAR 0 3
72518: PUSH
72519: LD_INT 1
72521: ST_TO_ADDR
// if array1 = array2 then
72522: LD_VAR 0 1
72526: PUSH
72527: LD_VAR 0 2
72531: EQUAL
72532: IFFALSE 72592
// begin for i = 1 to array1 do
72534: LD_ADDR_VAR 0 4
72538: PUSH
72539: DOUBLE
72540: LD_INT 1
72542: DEC
72543: ST_TO_ADDR
72544: LD_VAR 0 1
72548: PUSH
72549: FOR_TO
72550: IFFALSE 72588
// if array1 [ i ] <> array2 [ i ] then
72552: LD_VAR 0 1
72556: PUSH
72557: LD_VAR 0 4
72561: ARRAY
72562: PUSH
72563: LD_VAR 0 2
72567: PUSH
72568: LD_VAR 0 4
72572: ARRAY
72573: NONEQUAL
72574: IFFALSE 72586
// begin result := false ;
72576: LD_ADDR_VAR 0 3
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// break ;
72584: GO 72588
// end ;
72586: GO 72549
72588: POP
72589: POP
// end else
72590: GO 72600
// result := false ;
72592: LD_ADDR_VAR 0 3
72596: PUSH
72597: LD_INT 0
72599: ST_TO_ADDR
// end ;
72600: LD_VAR 0 3
72604: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
72605: LD_INT 0
72607: PPUSH
72608: PPUSH
72609: PPUSH
// pom := GetBase ( fac ) ;
72610: LD_ADDR_VAR 0 5
72614: PUSH
72615: LD_VAR 0 1
72619: PPUSH
72620: CALL_OW 274
72624: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
72625: LD_ADDR_VAR 0 4
72629: PUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PPUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_INT 2
72646: ARRAY
72647: PPUSH
72648: LD_VAR 0 2
72652: PUSH
72653: LD_INT 3
72655: ARRAY
72656: PPUSH
72657: LD_VAR 0 2
72661: PUSH
72662: LD_INT 4
72664: ARRAY
72665: PPUSH
72666: CALL_OW 449
72670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
72671: LD_ADDR_VAR 0 3
72675: PUSH
72676: LD_VAR 0 5
72680: PPUSH
72681: LD_INT 1
72683: PPUSH
72684: CALL_OW 275
72688: PUSH
72689: LD_VAR 0 4
72693: PUSH
72694: LD_INT 1
72696: ARRAY
72697: GREATEREQUAL
72698: PUSH
72699: LD_VAR 0 5
72703: PPUSH
72704: LD_INT 2
72706: PPUSH
72707: CALL_OW 275
72711: PUSH
72712: LD_VAR 0 4
72716: PUSH
72717: LD_INT 2
72719: ARRAY
72720: GREATEREQUAL
72721: AND
72722: PUSH
72723: LD_VAR 0 5
72727: PPUSH
72728: LD_INT 3
72730: PPUSH
72731: CALL_OW 275
72735: PUSH
72736: LD_VAR 0 4
72740: PUSH
72741: LD_INT 3
72743: ARRAY
72744: GREATEREQUAL
72745: AND
72746: ST_TO_ADDR
// end ;
72747: LD_VAR 0 3
72751: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
72752: LD_INT 0
72754: PPUSH
72755: PPUSH
72756: PPUSH
72757: PPUSH
// pom := GetBase ( building ) ;
72758: LD_ADDR_VAR 0 3
72762: PUSH
72763: LD_VAR 0 1
72767: PPUSH
72768: CALL_OW 274
72772: ST_TO_ADDR
// if not pom then
72773: LD_VAR 0 3
72777: NOT
72778: IFFALSE 72782
// exit ;
72780: GO 72952
// btype := GetBType ( building ) ;
72782: LD_ADDR_VAR 0 5
72786: PUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: CALL_OW 266
72796: ST_TO_ADDR
// if btype = b_armoury then
72797: LD_VAR 0 5
72801: PUSH
72802: LD_INT 4
72804: EQUAL
72805: IFFALSE 72815
// btype := b_barracks ;
72807: LD_ADDR_VAR 0 5
72811: PUSH
72812: LD_INT 5
72814: ST_TO_ADDR
// if btype = b_depot then
72815: LD_VAR 0 5
72819: PUSH
72820: LD_INT 0
72822: EQUAL
72823: IFFALSE 72833
// btype := b_warehouse ;
72825: LD_ADDR_VAR 0 5
72829: PUSH
72830: LD_INT 1
72832: ST_TO_ADDR
// if btype = b_workshop then
72833: LD_VAR 0 5
72837: PUSH
72838: LD_INT 2
72840: EQUAL
72841: IFFALSE 72851
// btype := b_factory ;
72843: LD_ADDR_VAR 0 5
72847: PUSH
72848: LD_INT 3
72850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
72851: LD_ADDR_VAR 0 4
72855: PUSH
72856: LD_VAR 0 5
72860: PPUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 248
72870: PPUSH
72871: CALL_OW 450
72875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
72876: LD_ADDR_VAR 0 2
72880: PUSH
72881: LD_VAR 0 3
72885: PPUSH
72886: LD_INT 1
72888: PPUSH
72889: CALL_OW 275
72893: PUSH
72894: LD_VAR 0 4
72898: PUSH
72899: LD_INT 1
72901: ARRAY
72902: GREATEREQUAL
72903: PUSH
72904: LD_VAR 0 3
72908: PPUSH
72909: LD_INT 2
72911: PPUSH
72912: CALL_OW 275
72916: PUSH
72917: LD_VAR 0 4
72921: PUSH
72922: LD_INT 2
72924: ARRAY
72925: GREATEREQUAL
72926: AND
72927: PUSH
72928: LD_VAR 0 3
72932: PPUSH
72933: LD_INT 3
72935: PPUSH
72936: CALL_OW 275
72940: PUSH
72941: LD_VAR 0 4
72945: PUSH
72946: LD_INT 3
72948: ARRAY
72949: GREATEREQUAL
72950: AND
72951: ST_TO_ADDR
// end ;
72952: LD_VAR 0 2
72956: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
72957: LD_INT 0
72959: PPUSH
72960: PPUSH
72961: PPUSH
// pom := GetBase ( building ) ;
72962: LD_ADDR_VAR 0 4
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: CALL_OW 274
72976: ST_TO_ADDR
// if not pom then
72977: LD_VAR 0 4
72981: NOT
72982: IFFALSE 72986
// exit ;
72984: GO 73087
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
72986: LD_ADDR_VAR 0 5
72990: PUSH
72991: LD_VAR 0 2
72995: PPUSH
72996: LD_VAR 0 1
73000: PPUSH
73001: CALL_OW 248
73005: PPUSH
73006: CALL_OW 450
73010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
73011: LD_ADDR_VAR 0 3
73015: PUSH
73016: LD_VAR 0 4
73020: PPUSH
73021: LD_INT 1
73023: PPUSH
73024: CALL_OW 275
73028: PUSH
73029: LD_VAR 0 5
73033: PUSH
73034: LD_INT 1
73036: ARRAY
73037: GREATEREQUAL
73038: PUSH
73039: LD_VAR 0 4
73043: PPUSH
73044: LD_INT 2
73046: PPUSH
73047: CALL_OW 275
73051: PUSH
73052: LD_VAR 0 5
73056: PUSH
73057: LD_INT 2
73059: ARRAY
73060: GREATEREQUAL
73061: AND
73062: PUSH
73063: LD_VAR 0 4
73067: PPUSH
73068: LD_INT 3
73070: PPUSH
73071: CALL_OW 275
73075: PUSH
73076: LD_VAR 0 5
73080: PUSH
73081: LD_INT 3
73083: ARRAY
73084: GREATEREQUAL
73085: AND
73086: ST_TO_ADDR
// end ;
73087: LD_VAR 0 3
73091: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
73092: LD_INT 0
73094: PPUSH
73095: PPUSH
73096: PPUSH
73097: PPUSH
73098: PPUSH
73099: PPUSH
73100: PPUSH
73101: PPUSH
73102: PPUSH
73103: PPUSH
// result := false ;
73104: LD_ADDR_VAR 0 6
73108: PUSH
73109: LD_INT 0
73111: ST_TO_ADDR
// if not base or not btype or not x or not y then
73112: LD_VAR 0 1
73116: NOT
73117: PUSH
73118: LD_VAR 0 2
73122: NOT
73123: OR
73124: PUSH
73125: LD_VAR 0 3
73129: NOT
73130: OR
73131: PUSH
73132: LD_VAR 0 4
73136: NOT
73137: OR
73138: IFFALSE 73142
// exit ;
73140: GO 73733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
73142: LD_ADDR_VAR 0 12
73146: PUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: LD_VAR 0 3
73156: PPUSH
73157: LD_VAR 0 4
73161: PPUSH
73162: LD_VAR 0 5
73166: PPUSH
73167: LD_VAR 0 1
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: PPUSH
73176: CALL_OW 248
73180: PPUSH
73181: LD_INT 0
73183: PPUSH
73184: CALL 74570 0 6
73188: ST_TO_ADDR
// if not hexes then
73189: LD_VAR 0 12
73193: NOT
73194: IFFALSE 73198
// exit ;
73196: GO 73733
// for i = 1 to hexes do
73198: LD_ADDR_VAR 0 7
73202: PUSH
73203: DOUBLE
73204: LD_INT 1
73206: DEC
73207: ST_TO_ADDR
73208: LD_VAR 0 12
73212: PUSH
73213: FOR_TO
73214: IFFALSE 73731
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73216: LD_ADDR_VAR 0 11
73220: PUSH
73221: LD_VAR 0 12
73225: PUSH
73226: LD_VAR 0 7
73230: ARRAY
73231: PUSH
73232: LD_INT 1
73234: ARRAY
73235: PPUSH
73236: LD_VAR 0 12
73240: PUSH
73241: LD_VAR 0 7
73245: ARRAY
73246: PUSH
73247: LD_INT 2
73249: ARRAY
73250: PPUSH
73251: CALL_OW 428
73255: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
73256: LD_VAR 0 12
73260: PUSH
73261: LD_VAR 0 7
73265: ARRAY
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: PPUSH
73271: LD_VAR 0 12
73275: PUSH
73276: LD_VAR 0 7
73280: ARRAY
73281: PUSH
73282: LD_INT 2
73284: ARRAY
73285: PPUSH
73286: CALL_OW 351
73290: PUSH
73291: LD_VAR 0 12
73295: PUSH
73296: LD_VAR 0 7
73300: ARRAY
73301: PUSH
73302: LD_INT 1
73304: ARRAY
73305: PPUSH
73306: LD_VAR 0 12
73310: PUSH
73311: LD_VAR 0 7
73315: ARRAY
73316: PUSH
73317: LD_INT 2
73319: ARRAY
73320: PPUSH
73321: CALL_OW 488
73325: NOT
73326: OR
73327: PUSH
73328: LD_VAR 0 11
73332: PPUSH
73333: CALL_OW 247
73337: PUSH
73338: LD_INT 3
73340: EQUAL
73341: OR
73342: IFFALSE 73348
// exit ;
73344: POP
73345: POP
73346: GO 73733
// if not tmp then
73348: LD_VAR 0 11
73352: NOT
73353: IFFALSE 73357
// continue ;
73355: GO 73213
// result := true ;
73357: LD_ADDR_VAR 0 6
73361: PUSH
73362: LD_INT 1
73364: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73365: LD_ADDR_VAR 0 15
73369: PUSH
73370: LD_INT 22
73372: PUSH
73373: LD_VAR 0 11
73377: PPUSH
73378: CALL_OW 255
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 2
73389: PUSH
73390: LD_INT 30
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 30
73402: PUSH
73403: LD_INT 1
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PPUSH
73419: CALL_OW 69
73423: ST_TO_ADDR
// if dep then
73424: LD_VAR 0 15
73428: IFFALSE 73564
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
73430: LD_ADDR_VAR 0 14
73434: PUSH
73435: LD_VAR 0 15
73439: PUSH
73440: LD_INT 1
73442: ARRAY
73443: PPUSH
73444: CALL_OW 250
73448: PPUSH
73449: LD_VAR 0 15
73453: PUSH
73454: LD_INT 1
73456: ARRAY
73457: PPUSH
73458: CALL_OW 254
73462: PPUSH
73463: LD_INT 5
73465: PPUSH
73466: CALL_OW 272
73470: PUSH
73471: LD_VAR 0 15
73475: PUSH
73476: LD_INT 1
73478: ARRAY
73479: PPUSH
73480: CALL_OW 251
73484: PPUSH
73485: LD_VAR 0 15
73489: PUSH
73490: LD_INT 1
73492: ARRAY
73493: PPUSH
73494: CALL_OW 254
73498: PPUSH
73499: LD_INT 5
73501: PPUSH
73502: CALL_OW 273
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
73511: LD_VAR 0 14
73515: PUSH
73516: LD_INT 1
73518: ARRAY
73519: PPUSH
73520: LD_VAR 0 14
73524: PUSH
73525: LD_INT 2
73527: ARRAY
73528: PPUSH
73529: CALL_OW 488
73533: IFFALSE 73564
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
73535: LD_VAR 0 11
73539: PPUSH
73540: LD_VAR 0 14
73544: PUSH
73545: LD_INT 1
73547: ARRAY
73548: PPUSH
73549: LD_VAR 0 14
73553: PUSH
73554: LD_INT 2
73556: ARRAY
73557: PPUSH
73558: CALL_OW 111
// continue ;
73562: GO 73213
// end ; end ; r := GetDir ( tmp ) ;
73564: LD_ADDR_VAR 0 13
73568: PUSH
73569: LD_VAR 0 11
73573: PPUSH
73574: CALL_OW 254
73578: ST_TO_ADDR
// if r = 5 then
73579: LD_VAR 0 13
73583: PUSH
73584: LD_INT 5
73586: EQUAL
73587: IFFALSE 73597
// r := 0 ;
73589: LD_ADDR_VAR 0 13
73593: PUSH
73594: LD_INT 0
73596: ST_TO_ADDR
// for j = r to 5 do
73597: LD_ADDR_VAR 0 8
73601: PUSH
73602: DOUBLE
73603: LD_VAR 0 13
73607: DEC
73608: ST_TO_ADDR
73609: LD_INT 5
73611: PUSH
73612: FOR_TO
73613: IFFALSE 73727
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
73615: LD_ADDR_VAR 0 9
73619: PUSH
73620: LD_VAR 0 11
73624: PPUSH
73625: CALL_OW 250
73629: PPUSH
73630: LD_VAR 0 8
73634: PPUSH
73635: LD_INT 2
73637: PPUSH
73638: CALL_OW 272
73642: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
73643: LD_ADDR_VAR 0 10
73647: PUSH
73648: LD_VAR 0 11
73652: PPUSH
73653: CALL_OW 251
73657: PPUSH
73658: LD_VAR 0 8
73662: PPUSH
73663: LD_INT 2
73665: PPUSH
73666: CALL_OW 273
73670: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
73671: LD_VAR 0 9
73675: PPUSH
73676: LD_VAR 0 10
73680: PPUSH
73681: CALL_OW 488
73685: PUSH
73686: LD_VAR 0 9
73690: PPUSH
73691: LD_VAR 0 10
73695: PPUSH
73696: CALL_OW 428
73700: NOT
73701: AND
73702: IFFALSE 73725
// begin ComMoveXY ( tmp , _x , _y ) ;
73704: LD_VAR 0 11
73708: PPUSH
73709: LD_VAR 0 9
73713: PPUSH
73714: LD_VAR 0 10
73718: PPUSH
73719: CALL_OW 111
// break ;
73723: GO 73727
// end ; end ;
73725: GO 73612
73727: POP
73728: POP
// end ;
73729: GO 73213
73731: POP
73732: POP
// end ;
73733: LD_VAR 0 6
73737: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
73738: LD_INT 0
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
73745: PPUSH
73746: PPUSH
73747: PPUSH
73748: PPUSH
73749: PPUSH
// result := false ;
73750: LD_ADDR_VAR 0 6
73754: PUSH
73755: LD_INT 0
73757: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
73758: LD_VAR 0 1
73762: NOT
73763: PUSH
73764: LD_VAR 0 1
73768: PPUSH
73769: CALL_OW 266
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: LD_INT 1
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: IN
73784: NOT
73785: OR
73786: PUSH
73787: LD_VAR 0 2
73791: NOT
73792: OR
73793: PUSH
73794: LD_VAR 0 5
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: LD_INT 1
73804: PUSH
73805: LD_INT 2
73807: PUSH
73808: LD_INT 3
73810: PUSH
73811: LD_INT 4
73813: PUSH
73814: LD_INT 5
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: IN
73825: NOT
73826: OR
73827: PUSH
73828: LD_VAR 0 3
73832: PPUSH
73833: LD_VAR 0 4
73837: PPUSH
73838: CALL_OW 488
73842: NOT
73843: OR
73844: IFFALSE 73848
// exit ;
73846: GO 74565
// pom := GetBase ( bdepot ) ;
73848: LD_ADDR_VAR 0 10
73852: PUSH
73853: LD_VAR 0 1
73857: PPUSH
73858: CALL_OW 274
73862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
73863: LD_ADDR_VAR 0 11
73867: PUSH
73868: LD_VAR 0 2
73872: PPUSH
73873: LD_VAR 0 1
73877: PPUSH
73878: CALL_OW 248
73882: PPUSH
73883: CALL_OW 450
73887: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
73888: LD_VAR 0 10
73892: PPUSH
73893: LD_INT 1
73895: PPUSH
73896: CALL_OW 275
73900: PUSH
73901: LD_VAR 0 11
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: GREATEREQUAL
73910: PUSH
73911: LD_VAR 0 10
73915: PPUSH
73916: LD_INT 2
73918: PPUSH
73919: CALL_OW 275
73923: PUSH
73924: LD_VAR 0 11
73928: PUSH
73929: LD_INT 2
73931: ARRAY
73932: GREATEREQUAL
73933: AND
73934: PUSH
73935: LD_VAR 0 10
73939: PPUSH
73940: LD_INT 3
73942: PPUSH
73943: CALL_OW 275
73947: PUSH
73948: LD_VAR 0 11
73952: PUSH
73953: LD_INT 3
73955: ARRAY
73956: GREATEREQUAL
73957: AND
73958: NOT
73959: IFFALSE 73963
// exit ;
73961: GO 74565
// if GetBType ( bdepot ) = b_depot then
73963: LD_VAR 0 1
73967: PPUSH
73968: CALL_OW 266
73972: PUSH
73973: LD_INT 0
73975: EQUAL
73976: IFFALSE 73988
// dist := 28 else
73978: LD_ADDR_VAR 0 14
73982: PUSH
73983: LD_INT 28
73985: ST_TO_ADDR
73986: GO 73996
// dist := 36 ;
73988: LD_ADDR_VAR 0 14
73992: PUSH
73993: LD_INT 36
73995: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
73996: LD_VAR 0 1
74000: PPUSH
74001: LD_VAR 0 3
74005: PPUSH
74006: LD_VAR 0 4
74010: PPUSH
74011: CALL_OW 297
74015: PUSH
74016: LD_VAR 0 14
74020: GREATER
74021: IFFALSE 74025
// exit ;
74023: GO 74565
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
74025: LD_ADDR_VAR 0 12
74029: PUSH
74030: LD_VAR 0 2
74034: PPUSH
74035: LD_VAR 0 3
74039: PPUSH
74040: LD_VAR 0 4
74044: PPUSH
74045: LD_VAR 0 5
74049: PPUSH
74050: LD_VAR 0 1
74054: PPUSH
74055: CALL_OW 248
74059: PPUSH
74060: LD_INT 0
74062: PPUSH
74063: CALL 74570 0 6
74067: ST_TO_ADDR
// if not hexes then
74068: LD_VAR 0 12
74072: NOT
74073: IFFALSE 74077
// exit ;
74075: GO 74565
// hex := GetHexInfo ( x , y ) ;
74077: LD_ADDR_VAR 0 15
74081: PUSH
74082: LD_VAR 0 3
74086: PPUSH
74087: LD_VAR 0 4
74091: PPUSH
74092: CALL_OW 546
74096: ST_TO_ADDR
// if hex [ 1 ] then
74097: LD_VAR 0 15
74101: PUSH
74102: LD_INT 1
74104: ARRAY
74105: IFFALSE 74109
// exit ;
74107: GO 74565
// height := hex [ 2 ] ;
74109: LD_ADDR_VAR 0 13
74113: PUSH
74114: LD_VAR 0 15
74118: PUSH
74119: LD_INT 2
74121: ARRAY
74122: ST_TO_ADDR
// for i = 1 to hexes do
74123: LD_ADDR_VAR 0 7
74127: PUSH
74128: DOUBLE
74129: LD_INT 1
74131: DEC
74132: ST_TO_ADDR
74133: LD_VAR 0 12
74137: PUSH
74138: FOR_TO
74139: IFFALSE 74469
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
74141: LD_VAR 0 12
74145: PUSH
74146: LD_VAR 0 7
74150: ARRAY
74151: PUSH
74152: LD_INT 1
74154: ARRAY
74155: PPUSH
74156: LD_VAR 0 12
74160: PUSH
74161: LD_VAR 0 7
74165: ARRAY
74166: PUSH
74167: LD_INT 2
74169: ARRAY
74170: PPUSH
74171: CALL_OW 488
74175: NOT
74176: PUSH
74177: LD_VAR 0 12
74181: PUSH
74182: LD_VAR 0 7
74186: ARRAY
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PPUSH
74192: LD_VAR 0 12
74196: PUSH
74197: LD_VAR 0 7
74201: ARRAY
74202: PUSH
74203: LD_INT 2
74205: ARRAY
74206: PPUSH
74207: CALL_OW 428
74211: PUSH
74212: LD_INT 0
74214: GREATER
74215: OR
74216: PUSH
74217: LD_VAR 0 12
74221: PUSH
74222: LD_VAR 0 7
74226: ARRAY
74227: PUSH
74228: LD_INT 1
74230: ARRAY
74231: PPUSH
74232: LD_VAR 0 12
74236: PUSH
74237: LD_VAR 0 7
74241: ARRAY
74242: PUSH
74243: LD_INT 2
74245: ARRAY
74246: PPUSH
74247: CALL_OW 351
74251: OR
74252: IFFALSE 74258
// exit ;
74254: POP
74255: POP
74256: GO 74565
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74258: LD_ADDR_VAR 0 8
74262: PUSH
74263: LD_VAR 0 12
74267: PUSH
74268: LD_VAR 0 7
74272: ARRAY
74273: PUSH
74274: LD_INT 1
74276: ARRAY
74277: PPUSH
74278: LD_VAR 0 12
74282: PUSH
74283: LD_VAR 0 7
74287: ARRAY
74288: PUSH
74289: LD_INT 2
74291: ARRAY
74292: PPUSH
74293: CALL_OW 546
74297: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
74298: LD_VAR 0 8
74302: PUSH
74303: LD_INT 1
74305: ARRAY
74306: PUSH
74307: LD_VAR 0 8
74311: PUSH
74312: LD_INT 2
74314: ARRAY
74315: PUSH
74316: LD_VAR 0 13
74320: PUSH
74321: LD_INT 2
74323: PLUS
74324: GREATER
74325: OR
74326: PUSH
74327: LD_VAR 0 8
74331: PUSH
74332: LD_INT 2
74334: ARRAY
74335: PUSH
74336: LD_VAR 0 13
74340: PUSH
74341: LD_INT 2
74343: MINUS
74344: LESS
74345: OR
74346: PUSH
74347: LD_VAR 0 8
74351: PUSH
74352: LD_INT 3
74354: ARRAY
74355: PUSH
74356: LD_INT 0
74358: PUSH
74359: LD_INT 8
74361: PUSH
74362: LD_INT 9
74364: PUSH
74365: LD_INT 10
74367: PUSH
74368: LD_INT 11
74370: PUSH
74371: LD_INT 12
74373: PUSH
74374: LD_INT 13
74376: PUSH
74377: LD_INT 16
74379: PUSH
74380: LD_INT 17
74382: PUSH
74383: LD_INT 18
74385: PUSH
74386: LD_INT 19
74388: PUSH
74389: LD_INT 20
74391: PUSH
74392: LD_INT 21
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: IN
74410: NOT
74411: OR
74412: PUSH
74413: LD_VAR 0 8
74417: PUSH
74418: LD_INT 5
74420: ARRAY
74421: NOT
74422: OR
74423: PUSH
74424: LD_VAR 0 8
74428: PUSH
74429: LD_INT 6
74431: ARRAY
74432: PUSH
74433: LD_INT 1
74435: PUSH
74436: LD_INT 2
74438: PUSH
74439: LD_INT 7
74441: PUSH
74442: LD_INT 9
74444: PUSH
74445: LD_INT 10
74447: PUSH
74448: LD_INT 11
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: IN
74459: NOT
74460: OR
74461: IFFALSE 74467
// exit ;
74463: POP
74464: POP
74465: GO 74565
// end ;
74467: GO 74138
74469: POP
74470: POP
// side := GetSide ( bdepot ) ;
74471: LD_ADDR_VAR 0 9
74475: PUSH
74476: LD_VAR 0 1
74480: PPUSH
74481: CALL_OW 255
74485: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74486: LD_VAR 0 9
74490: PPUSH
74491: LD_VAR 0 3
74495: PPUSH
74496: LD_VAR 0 4
74500: PPUSH
74501: LD_INT 20
74503: PPUSH
74504: CALL 67237 0 4
74508: PUSH
74509: LD_INT 4
74511: ARRAY
74512: IFFALSE 74516
// exit ;
74514: GO 74565
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 29
74523: PUSH
74524: LD_INT 30
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: IN
74531: PUSH
74532: LD_VAR 0 3
74536: PPUSH
74537: LD_VAR 0 4
74541: PPUSH
74542: LD_VAR 0 9
74546: PPUSH
74547: CALL_OW 440
74551: NOT
74552: AND
74553: IFFALSE 74557
// exit ;
74555: GO 74565
// result := true ;
74557: LD_ADDR_VAR 0 6
74561: PUSH
74562: LD_INT 1
74564: ST_TO_ADDR
// end ;
74565: LD_VAR 0 6
74569: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
74570: LD_INT 0
74572: PPUSH
74573: PPUSH
74574: PPUSH
74575: PPUSH
74576: PPUSH
74577: PPUSH
74578: PPUSH
74579: PPUSH
74580: PPUSH
74581: PPUSH
74582: PPUSH
74583: PPUSH
74584: PPUSH
74585: PPUSH
74586: PPUSH
74587: PPUSH
74588: PPUSH
74589: PPUSH
74590: PPUSH
74591: PPUSH
74592: PPUSH
74593: PPUSH
74594: PPUSH
74595: PPUSH
74596: PPUSH
74597: PPUSH
74598: PPUSH
74599: PPUSH
74600: PPUSH
74601: PPUSH
74602: PPUSH
74603: PPUSH
74604: PPUSH
74605: PPUSH
74606: PPUSH
74607: PPUSH
74608: PPUSH
74609: PPUSH
74610: PPUSH
74611: PPUSH
74612: PPUSH
74613: PPUSH
74614: PPUSH
74615: PPUSH
74616: PPUSH
74617: PPUSH
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
74622: PPUSH
74623: PPUSH
74624: PPUSH
74625: PPUSH
74626: PPUSH
74627: PPUSH
74628: PPUSH
74629: PPUSH
// result = [ ] ;
74630: LD_ADDR_VAR 0 7
74634: PUSH
74635: EMPTY
74636: ST_TO_ADDR
// temp_list = [ ] ;
74637: LD_ADDR_VAR 0 9
74641: PUSH
74642: EMPTY
74643: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
74644: LD_VAR 0 4
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: LD_INT 2
74657: PUSH
74658: LD_INT 3
74660: PUSH
74661: LD_INT 4
74663: PUSH
74664: LD_INT 5
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: IN
74675: NOT
74676: PUSH
74677: LD_VAR 0 1
74681: PUSH
74682: LD_INT 0
74684: PUSH
74685: LD_INT 1
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: IN
74692: PUSH
74693: LD_VAR 0 5
74697: PUSH
74698: LD_INT 1
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: LD_INT 3
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: IN
74712: NOT
74713: AND
74714: OR
74715: IFFALSE 74719
// exit ;
74717: GO 93104
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
74719: LD_VAR 0 1
74723: PUSH
74724: LD_INT 6
74726: PUSH
74727: LD_INT 7
74729: PUSH
74730: LD_INT 8
74732: PUSH
74733: LD_INT 13
74735: PUSH
74736: LD_INT 12
74738: PUSH
74739: LD_INT 15
74741: PUSH
74742: LD_INT 11
74744: PUSH
74745: LD_INT 14
74747: PUSH
74748: LD_INT 10
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: IN
74762: IFFALSE 74772
// btype = b_lab ;
74764: LD_ADDR_VAR 0 1
74768: PUSH
74769: LD_INT 6
74771: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
74772: LD_VAR 0 6
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: LD_INT 1
74782: PUSH
74783: LD_INT 2
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: IN
74791: NOT
74792: PUSH
74793: LD_VAR 0 1
74797: PUSH
74798: LD_INT 0
74800: PUSH
74801: LD_INT 1
74803: PUSH
74804: LD_INT 2
74806: PUSH
74807: LD_INT 3
74809: PUSH
74810: LD_INT 6
74812: PUSH
74813: LD_INT 36
74815: PUSH
74816: LD_INT 4
74818: PUSH
74819: LD_INT 5
74821: PUSH
74822: LD_INT 31
74824: PUSH
74825: LD_INT 32
74827: PUSH
74828: LD_INT 33
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: IN
74844: NOT
74845: PUSH
74846: LD_VAR 0 6
74850: PUSH
74851: LD_INT 1
74853: EQUAL
74854: AND
74855: OR
74856: PUSH
74857: LD_VAR 0 1
74861: PUSH
74862: LD_INT 2
74864: PUSH
74865: LD_INT 3
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: IN
74872: NOT
74873: PUSH
74874: LD_VAR 0 6
74878: PUSH
74879: LD_INT 2
74881: EQUAL
74882: AND
74883: OR
74884: IFFALSE 74894
// mode = 0 ;
74886: LD_ADDR_VAR 0 6
74890: PUSH
74891: LD_INT 0
74893: ST_TO_ADDR
// case mode of 0 :
74894: LD_VAR 0 6
74898: PUSH
74899: LD_INT 0
74901: DOUBLE
74902: EQUAL
74903: IFTRUE 74907
74905: GO 86360
74907: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74908: LD_ADDR_VAR 0 11
74912: PUSH
74913: LD_INT 0
74915: PUSH
74916: LD_INT 0
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 0
74925: PUSH
74926: LD_INT 1
74928: NEG
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 1
74936: PUSH
74937: LD_INT 0
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 1
74946: PUSH
74947: LD_INT 1
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: LD_INT 1
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 1
74966: NEG
74967: PUSH
74968: LD_INT 0
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 1
74977: NEG
74978: PUSH
74979: LD_INT 1
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 1
74989: NEG
74990: PUSH
74991: LD_INT 2
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 0
75001: PUSH
75002: LD_INT 2
75004: NEG
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: LD_INT 1
75012: PUSH
75013: LD_INT 1
75015: NEG
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 1
75023: PUSH
75024: LD_INT 2
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: LD_INT 0
75033: PUSH
75034: LD_INT 2
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: LD_INT 1
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 1
75054: PUSH
75055: LD_INT 3
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 0
75064: PUSH
75065: LD_INT 3
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 1
75074: NEG
75075: PUSH
75076: LD_INT 2
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75101: LD_ADDR_VAR 0 12
75105: PUSH
75106: LD_INT 0
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: LD_INT 1
75121: NEG
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: LD_INT 1
75129: PUSH
75130: LD_INT 0
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: LD_INT 1
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 0
75149: PUSH
75150: LD_INT 1
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 1
75159: NEG
75160: PUSH
75161: LD_INT 0
75163: PUSH
75164: EMPTY
75165: LIST
75166: LIST
75167: PUSH
75168: LD_INT 1
75170: NEG
75171: PUSH
75172: LD_INT 1
75174: NEG
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 1
75182: PUSH
75183: LD_INT 1
75185: NEG
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 2
75193: PUSH
75194: LD_INT 0
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 2
75203: PUSH
75204: LD_INT 1
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 1
75213: NEG
75214: PUSH
75215: LD_INT 1
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 2
75224: NEG
75225: PUSH
75226: LD_INT 0
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 2
75235: NEG
75236: PUSH
75237: LD_INT 1
75239: NEG
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 2
75247: NEG
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 3
75258: NEG
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 3
75269: NEG
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75297: LD_ADDR_VAR 0 13
75301: PUSH
75302: LD_INT 0
75304: PUSH
75305: LD_INT 0
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 0
75314: PUSH
75315: LD_INT 1
75317: NEG
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 1
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 1
75335: PUSH
75336: LD_INT 1
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 0
75345: PUSH
75346: LD_INT 1
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 1
75355: NEG
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 1
75366: NEG
75367: PUSH
75368: LD_INT 1
75370: NEG
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 1
75378: NEG
75379: PUSH
75380: LD_INT 2
75382: NEG
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 2
75390: PUSH
75391: LD_INT 1
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 2
75400: PUSH
75401: LD_INT 2
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: PUSH
75408: LD_INT 1
75410: PUSH
75411: LD_INT 2
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PUSH
75418: LD_INT 2
75420: NEG
75421: PUSH
75422: LD_INT 1
75424: NEG
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 2
75432: NEG
75433: PUSH
75434: LD_INT 2
75436: NEG
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PUSH
75442: LD_INT 2
75444: NEG
75445: PUSH
75446: LD_INT 3
75448: NEG
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: LD_INT 3
75456: NEG
75457: PUSH
75458: LD_INT 2
75460: NEG
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 3
75468: NEG
75469: PUSH
75470: LD_INT 3
75472: NEG
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75496: LD_ADDR_VAR 0 14
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 0
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: LD_INT 1
75516: NEG
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 1
75524: PUSH
75525: LD_INT 0
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 1
75534: PUSH
75535: LD_INT 1
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: LD_INT 1
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 1
75554: NEG
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: LD_INT 1
75565: NEG
75566: PUSH
75567: LD_INT 1
75569: NEG
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 1
75577: NEG
75578: PUSH
75579: LD_INT 2
75581: NEG
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: LD_INT 2
75592: NEG
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: LD_INT 1
75600: PUSH
75601: LD_INT 1
75603: NEG
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 1
75611: PUSH
75612: LD_INT 2
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: LD_INT 2
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 1
75631: NEG
75632: PUSH
75633: LD_INT 1
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 1
75642: NEG
75643: PUSH
75644: LD_INT 3
75646: NEG
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: LD_INT 3
75657: NEG
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 1
75665: PUSH
75666: LD_INT 2
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75692: LD_ADDR_VAR 0 15
75696: PUSH
75697: LD_INT 0
75699: PUSH
75700: LD_INT 0
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: LD_INT 1
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 0
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 1
75730: PUSH
75731: LD_INT 1
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 0
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 1
75750: NEG
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 1
75761: NEG
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: LD_INT 1
75776: NEG
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: LD_INT 2
75784: PUSH
75785: LD_INT 0
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: PUSH
75792: LD_INT 2
75794: PUSH
75795: LD_INT 1
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 1
75804: NEG
75805: PUSH
75806: LD_INT 1
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: LD_INT 2
75815: NEG
75816: PUSH
75817: LD_INT 0
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: PUSH
75824: LD_INT 2
75826: NEG
75827: PUSH
75828: LD_INT 1
75830: NEG
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 2
75838: PUSH
75839: LD_INT 1
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 3
75849: PUSH
75850: LD_INT 0
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 3
75859: PUSH
75860: LD_INT 1
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75885: LD_ADDR_VAR 0 16
75889: PUSH
75890: LD_INT 0
75892: PUSH
75893: LD_INT 0
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 0
75902: PUSH
75903: LD_INT 1
75905: NEG
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 1
75913: PUSH
75914: LD_INT 0
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 1
75923: PUSH
75924: LD_INT 1
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 1
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 1
75943: NEG
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: NEG
75955: PUSH
75956: LD_INT 1
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 1
75966: NEG
75967: PUSH
75968: LD_INT 2
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 2
75978: PUSH
75979: LD_INT 1
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: LD_INT 2
75988: PUSH
75989: LD_INT 2
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 1
75998: PUSH
75999: LD_INT 2
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 2
76008: NEG
76009: PUSH
76010: LD_INT 1
76012: NEG
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: LD_INT 2
76020: NEG
76021: PUSH
76022: LD_INT 2
76024: NEG
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 3
76032: PUSH
76033: LD_INT 2
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 3
76042: PUSH
76043: LD_INT 3
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 2
76052: PUSH
76053: LD_INT 3
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76078: LD_ADDR_VAR 0 17
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 0
76095: PUSH
76096: LD_INT 1
76098: NEG
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 1
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 1
76116: PUSH
76117: LD_INT 1
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 0
76126: PUSH
76127: LD_INT 1
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 1
76136: NEG
76137: PUSH
76138: LD_INT 0
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 1
76147: NEG
76148: PUSH
76149: LD_INT 1
76151: NEG
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 1
76159: NEG
76160: PUSH
76161: LD_INT 2
76163: NEG
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 0
76171: PUSH
76172: LD_INT 2
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 1
76182: PUSH
76183: LD_INT 1
76185: NEG
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: LD_INT 2
76193: PUSH
76194: LD_INT 0
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: PUSH
76201: LD_INT 2
76203: PUSH
76204: LD_INT 1
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 2
76213: PUSH
76214: LD_INT 2
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: PUSH
76221: LD_INT 1
76223: PUSH
76224: LD_INT 2
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: LD_INT 2
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 1
76243: NEG
76244: PUSH
76245: LD_INT 1
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: LD_INT 2
76254: NEG
76255: PUSH
76256: LD_INT 0
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PUSH
76263: LD_INT 2
76265: NEG
76266: PUSH
76267: LD_INT 1
76269: NEG
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 2
76277: NEG
76278: PUSH
76279: LD_INT 2
76281: NEG
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76308: LD_ADDR_VAR 0 18
76312: PUSH
76313: LD_INT 0
76315: PUSH
76316: LD_INT 0
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 0
76325: PUSH
76326: LD_INT 1
76328: NEG
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 1
76336: PUSH
76337: LD_INT 0
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 1
76346: PUSH
76347: LD_INT 1
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 0
76356: PUSH
76357: LD_INT 1
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 1
76366: NEG
76367: PUSH
76368: LD_INT 0
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 1
76377: NEG
76378: PUSH
76379: LD_INT 1
76381: NEG
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 1
76389: NEG
76390: PUSH
76391: LD_INT 2
76393: NEG
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 0
76401: PUSH
76402: LD_INT 2
76404: NEG
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 1
76412: PUSH
76413: LD_INT 1
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 2
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 2
76433: PUSH
76434: LD_INT 1
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 2
76443: PUSH
76444: LD_INT 2
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 1
76453: PUSH
76454: LD_INT 2
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 0
76463: PUSH
76464: LD_INT 2
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: LD_INT 1
76473: NEG
76474: PUSH
76475: LD_INT 1
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 2
76484: NEG
76485: PUSH
76486: LD_INT 0
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 2
76495: NEG
76496: PUSH
76497: LD_INT 1
76499: NEG
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 2
76507: NEG
76508: PUSH
76509: LD_INT 2
76511: NEG
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76538: LD_ADDR_VAR 0 19
76542: PUSH
76543: LD_INT 0
76545: PUSH
76546: LD_INT 0
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 0
76555: PUSH
76556: LD_INT 1
76558: NEG
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 1
76566: PUSH
76567: LD_INT 0
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 1
76576: PUSH
76577: LD_INT 1
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 0
76586: PUSH
76587: LD_INT 1
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 1
76596: NEG
76597: PUSH
76598: LD_INT 0
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 1
76607: NEG
76608: PUSH
76609: LD_INT 1
76611: NEG
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 1
76619: NEG
76620: PUSH
76621: LD_INT 2
76623: NEG
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 0
76631: PUSH
76632: LD_INT 2
76634: NEG
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 1
76642: PUSH
76643: LD_INT 1
76645: NEG
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: LD_INT 2
76653: PUSH
76654: LD_INT 0
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 2
76663: PUSH
76664: LD_INT 1
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: LD_INT 2
76673: PUSH
76674: LD_INT 2
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 1
76683: PUSH
76684: LD_INT 2
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: PUSH
76691: LD_INT 0
76693: PUSH
76694: LD_INT 2
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: PUSH
76701: LD_INT 1
76703: NEG
76704: PUSH
76705: LD_INT 1
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: LD_INT 2
76714: NEG
76715: PUSH
76716: LD_INT 0
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 2
76725: NEG
76726: PUSH
76727: LD_INT 1
76729: NEG
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 2
76737: NEG
76738: PUSH
76739: LD_INT 2
76741: NEG
76742: PUSH
76743: EMPTY
76744: LIST
76745: LIST
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76768: LD_ADDR_VAR 0 20
76772: PUSH
76773: LD_INT 0
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 0
76785: PUSH
76786: LD_INT 1
76788: NEG
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 1
76796: PUSH
76797: LD_INT 0
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 1
76806: PUSH
76807: LD_INT 1
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: LD_INT 1
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 1
76826: NEG
76827: PUSH
76828: LD_INT 0
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 1
76837: NEG
76838: PUSH
76839: LD_INT 1
76841: NEG
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 1
76849: NEG
76850: PUSH
76851: LD_INT 2
76853: NEG
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: LD_INT 0
76861: PUSH
76862: LD_INT 2
76864: NEG
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 1
76872: PUSH
76873: LD_INT 1
76875: NEG
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PUSH
76881: LD_INT 2
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: LD_INT 2
76893: PUSH
76894: LD_INT 1
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 2
76903: PUSH
76904: LD_INT 2
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: LD_INT 1
76913: PUSH
76914: LD_INT 2
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_INT 0
76923: PUSH
76924: LD_INT 2
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 1
76933: NEG
76934: PUSH
76935: LD_INT 1
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 2
76944: NEG
76945: PUSH
76946: LD_INT 0
76948: PUSH
76949: EMPTY
76950: LIST
76951: LIST
76952: PUSH
76953: LD_INT 2
76955: NEG
76956: PUSH
76957: LD_INT 1
76959: NEG
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 2
76967: NEG
76968: PUSH
76969: LD_INT 2
76971: NEG
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76998: LD_ADDR_VAR 0 21
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 0
77015: PUSH
77016: LD_INT 1
77018: NEG
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: LD_INT 0
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 1
77036: PUSH
77037: LD_INT 1
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 0
77046: PUSH
77047: LD_INT 1
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 1
77056: NEG
77057: PUSH
77058: LD_INT 0
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 1
77067: NEG
77068: PUSH
77069: LD_INT 1
77071: NEG
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 1
77079: NEG
77080: PUSH
77081: LD_INT 2
77083: NEG
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 0
77091: PUSH
77092: LD_INT 2
77094: NEG
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_INT 1
77102: PUSH
77103: LD_INT 1
77105: NEG
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 2
77113: PUSH
77114: LD_INT 0
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 2
77123: PUSH
77124: LD_INT 1
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 2
77133: PUSH
77134: LD_INT 2
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 1
77143: PUSH
77144: LD_INT 2
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 0
77153: PUSH
77154: LD_INT 2
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 1
77163: NEG
77164: PUSH
77165: LD_INT 1
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 2
77174: NEG
77175: PUSH
77176: LD_INT 0
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 2
77185: NEG
77186: PUSH
77187: LD_INT 1
77189: NEG
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 2
77197: NEG
77198: PUSH
77199: LD_INT 2
77201: NEG
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77228: LD_ADDR_VAR 0 22
77232: PUSH
77233: LD_INT 0
77235: PUSH
77236: LD_INT 0
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 0
77245: PUSH
77246: LD_INT 1
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 1
77256: PUSH
77257: LD_INT 0
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 1
77266: PUSH
77267: LD_INT 1
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 0
77276: PUSH
77277: LD_INT 1
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 1
77286: NEG
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 1
77297: NEG
77298: PUSH
77299: LD_INT 1
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 1
77309: NEG
77310: PUSH
77311: LD_INT 2
77313: NEG
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: LD_INT 0
77321: PUSH
77322: LD_INT 2
77324: NEG
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: PUSH
77330: LD_INT 1
77332: PUSH
77333: LD_INT 1
77335: NEG
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PUSH
77341: LD_INT 2
77343: PUSH
77344: LD_INT 0
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 2
77353: PUSH
77354: LD_INT 1
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 2
77363: PUSH
77364: LD_INT 2
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 1
77373: PUSH
77374: LD_INT 2
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: LD_INT 0
77383: PUSH
77384: LD_INT 2
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_INT 1
77393: NEG
77394: PUSH
77395: LD_INT 1
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 2
77404: NEG
77405: PUSH
77406: LD_INT 0
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 2
77415: NEG
77416: PUSH
77417: LD_INT 1
77419: NEG
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: PUSH
77425: LD_INT 2
77427: NEG
77428: PUSH
77429: LD_INT 2
77431: NEG
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77458: LD_ADDR_VAR 0 23
77462: PUSH
77463: LD_INT 0
77465: PUSH
77466: LD_INT 0
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: LD_INT 0
77475: PUSH
77476: LD_INT 1
77478: NEG
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PUSH
77484: LD_INT 1
77486: PUSH
77487: LD_INT 0
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 1
77496: PUSH
77497: LD_INT 1
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 0
77506: PUSH
77507: LD_INT 1
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 1
77516: NEG
77517: PUSH
77518: LD_INT 0
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_INT 1
77527: NEG
77528: PUSH
77529: LD_INT 1
77531: NEG
77532: PUSH
77533: EMPTY
77534: LIST
77535: LIST
77536: PUSH
77537: LD_INT 1
77539: NEG
77540: PUSH
77541: LD_INT 2
77543: NEG
77544: PUSH
77545: EMPTY
77546: LIST
77547: LIST
77548: PUSH
77549: LD_INT 0
77551: PUSH
77552: LD_INT 2
77554: NEG
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: PUSH
77560: LD_INT 1
77562: PUSH
77563: LD_INT 1
77565: NEG
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PUSH
77571: LD_INT 2
77573: PUSH
77574: LD_INT 0
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: PUSH
77581: LD_INT 2
77583: PUSH
77584: LD_INT 1
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 2
77593: PUSH
77594: LD_INT 2
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: PUSH
77601: LD_INT 1
77603: PUSH
77604: LD_INT 2
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 0
77613: PUSH
77614: LD_INT 2
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 1
77623: NEG
77624: PUSH
77625: LD_INT 1
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 2
77634: NEG
77635: PUSH
77636: LD_INT 0
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 2
77645: NEG
77646: PUSH
77647: LD_INT 1
77649: NEG
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 2
77657: NEG
77658: PUSH
77659: LD_INT 2
77661: NEG
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PUSH
77667: LD_INT 2
77669: NEG
77670: PUSH
77671: LD_INT 3
77673: NEG
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PUSH
77679: LD_INT 1
77681: NEG
77682: PUSH
77683: LD_INT 3
77685: NEG
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: LD_INT 1
77693: PUSH
77694: LD_INT 2
77696: NEG
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: LD_INT 2
77704: PUSH
77705: LD_INT 1
77707: NEG
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: LIST
77736: LIST
77737: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
77738: LD_ADDR_VAR 0 24
77742: PUSH
77743: LD_INT 0
77745: PUSH
77746: LD_INT 0
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: PUSH
77753: LD_INT 0
77755: PUSH
77756: LD_INT 1
77758: NEG
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 1
77766: PUSH
77767: LD_INT 0
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 1
77776: PUSH
77777: LD_INT 1
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 0
77786: PUSH
77787: LD_INT 1
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 1
77796: NEG
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: PUSH
77805: LD_INT 1
77807: NEG
77808: PUSH
77809: LD_INT 1
77811: NEG
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 1
77819: NEG
77820: PUSH
77821: LD_INT 2
77823: NEG
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: LD_INT 0
77831: PUSH
77832: LD_INT 2
77834: NEG
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: PUSH
77840: LD_INT 1
77842: PUSH
77843: LD_INT 1
77845: NEG
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PUSH
77851: LD_INT 2
77853: PUSH
77854: LD_INT 0
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 2
77863: PUSH
77864: LD_INT 1
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: LD_INT 2
77873: PUSH
77874: LD_INT 2
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PUSH
77881: LD_INT 1
77883: PUSH
77884: LD_INT 2
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: PUSH
77891: LD_INT 0
77893: PUSH
77894: LD_INT 2
77896: PUSH
77897: EMPTY
77898: LIST
77899: LIST
77900: PUSH
77901: LD_INT 1
77903: NEG
77904: PUSH
77905: LD_INT 1
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: PUSH
77912: LD_INT 2
77914: NEG
77915: PUSH
77916: LD_INT 0
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: PUSH
77923: LD_INT 2
77925: NEG
77926: PUSH
77927: LD_INT 1
77929: NEG
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: LD_INT 2
77937: NEG
77938: PUSH
77939: LD_INT 2
77941: NEG
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: LD_INT 1
77949: PUSH
77950: LD_INT 2
77952: NEG
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 2
77960: PUSH
77961: LD_INT 1
77963: NEG
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 3
77971: PUSH
77972: LD_INT 1
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: PUSH
77979: LD_INT 3
77981: PUSH
77982: LD_INT 2
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: LIST
78009: LIST
78010: LIST
78011: LIST
78012: LIST
78013: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
78014: LD_ADDR_VAR 0 25
78018: PUSH
78019: LD_INT 0
78021: PUSH
78022: LD_INT 0
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 0
78031: PUSH
78032: LD_INT 1
78034: NEG
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: PUSH
78040: LD_INT 1
78042: PUSH
78043: LD_INT 0
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_INT 1
78052: PUSH
78053: LD_INT 1
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: LD_INT 0
78062: PUSH
78063: LD_INT 1
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: LD_INT 1
78072: NEG
78073: PUSH
78074: LD_INT 0
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PUSH
78081: LD_INT 1
78083: NEG
78084: PUSH
78085: LD_INT 1
78087: NEG
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: LD_INT 1
78095: NEG
78096: PUSH
78097: LD_INT 2
78099: NEG
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PUSH
78105: LD_INT 0
78107: PUSH
78108: LD_INT 2
78110: NEG
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 1
78118: PUSH
78119: LD_INT 1
78121: NEG
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 2
78129: PUSH
78130: LD_INT 0
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 2
78139: PUSH
78140: LD_INT 1
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: LD_INT 2
78149: PUSH
78150: LD_INT 2
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PUSH
78157: LD_INT 1
78159: PUSH
78160: LD_INT 2
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: LD_INT 2
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 1
78179: NEG
78180: PUSH
78181: LD_INT 1
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 2
78190: NEG
78191: PUSH
78192: LD_INT 0
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 2
78201: NEG
78202: PUSH
78203: LD_INT 1
78205: NEG
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 2
78213: NEG
78214: PUSH
78215: LD_INT 2
78217: NEG
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 3
78225: PUSH
78226: LD_INT 1
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PUSH
78233: LD_INT 3
78235: PUSH
78236: LD_INT 2
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 2
78245: PUSH
78246: LD_INT 3
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 1
78255: PUSH
78256: LD_INT 3
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78288: LD_ADDR_VAR 0 26
78292: PUSH
78293: LD_INT 0
78295: PUSH
78296: LD_INT 0
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: LD_INT 1
78308: NEG
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: PUSH
78314: LD_INT 1
78316: PUSH
78317: LD_INT 0
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PUSH
78324: LD_INT 1
78326: PUSH
78327: LD_INT 1
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: LD_INT 0
78336: PUSH
78337: LD_INT 1
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: LD_INT 1
78346: NEG
78347: PUSH
78348: LD_INT 0
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PUSH
78355: LD_INT 1
78357: NEG
78358: PUSH
78359: LD_INT 1
78361: NEG
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 1
78369: NEG
78370: PUSH
78371: LD_INT 2
78373: NEG
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 0
78381: PUSH
78382: LD_INT 2
78384: NEG
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: PUSH
78390: LD_INT 1
78392: PUSH
78393: LD_INT 1
78395: NEG
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: LD_INT 2
78403: PUSH
78404: LD_INT 0
78406: PUSH
78407: EMPTY
78408: LIST
78409: LIST
78410: PUSH
78411: LD_INT 2
78413: PUSH
78414: LD_INT 1
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 2
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 1
78433: PUSH
78434: LD_INT 2
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 0
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 1
78453: NEG
78454: PUSH
78455: LD_INT 1
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 2
78464: NEG
78465: PUSH
78466: LD_INT 0
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 2
78475: NEG
78476: PUSH
78477: LD_INT 1
78479: NEG
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: PUSH
78485: LD_INT 2
78487: NEG
78488: PUSH
78489: LD_INT 2
78491: NEG
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 2
78499: PUSH
78500: LD_INT 3
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: LD_INT 1
78509: PUSH
78510: LD_INT 3
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 1
78519: NEG
78520: PUSH
78521: LD_INT 2
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: PUSH
78528: LD_INT 2
78530: NEG
78531: PUSH
78532: LD_INT 1
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78564: LD_ADDR_VAR 0 27
78568: PUSH
78569: LD_INT 0
78571: PUSH
78572: LD_INT 0
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PUSH
78579: LD_INT 0
78581: PUSH
78582: LD_INT 1
78584: NEG
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: LD_INT 1
78592: PUSH
78593: LD_INT 0
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 1
78602: PUSH
78603: LD_INT 1
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 0
78612: PUSH
78613: LD_INT 1
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 1
78622: NEG
78623: PUSH
78624: LD_INT 0
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: PUSH
78631: LD_INT 1
78633: NEG
78634: PUSH
78635: LD_INT 1
78637: NEG
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: PUSH
78643: LD_INT 1
78645: NEG
78646: PUSH
78647: LD_INT 2
78649: NEG
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 0
78657: PUSH
78658: LD_INT 2
78660: NEG
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: PUSH
78666: LD_INT 1
78668: PUSH
78669: LD_INT 1
78671: NEG
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: LD_INT 2
78679: PUSH
78680: LD_INT 0
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 2
78689: PUSH
78690: LD_INT 1
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PUSH
78697: LD_INT 2
78699: PUSH
78700: LD_INT 2
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: PUSH
78707: LD_INT 1
78709: PUSH
78710: LD_INT 2
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PUSH
78717: LD_INT 0
78719: PUSH
78720: LD_INT 2
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 1
78729: NEG
78730: PUSH
78731: LD_INT 1
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 2
78740: NEG
78741: PUSH
78742: LD_INT 0
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PUSH
78749: LD_INT 2
78751: NEG
78752: PUSH
78753: LD_INT 1
78755: NEG
78756: PUSH
78757: EMPTY
78758: LIST
78759: LIST
78760: PUSH
78761: LD_INT 2
78763: NEG
78764: PUSH
78765: LD_INT 2
78767: NEG
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 1
78775: NEG
78776: PUSH
78777: LD_INT 2
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 2
78786: NEG
78787: PUSH
78788: LD_INT 1
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 3
78797: NEG
78798: PUSH
78799: LD_INT 1
78801: NEG
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: PUSH
78807: LD_INT 3
78809: NEG
78810: PUSH
78811: LD_INT 2
78813: NEG
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: LIST
78823: LIST
78824: LIST
78825: LIST
78826: LIST
78827: LIST
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78844: LD_ADDR_VAR 0 28
78848: PUSH
78849: LD_INT 0
78851: PUSH
78852: LD_INT 0
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: LD_INT 1
78864: NEG
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 1
78872: PUSH
78873: LD_INT 0
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 1
78882: PUSH
78883: LD_INT 1
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 0
78892: PUSH
78893: LD_INT 1
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 1
78902: NEG
78903: PUSH
78904: LD_INT 0
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PUSH
78911: LD_INT 1
78913: NEG
78914: PUSH
78915: LD_INT 1
78917: NEG
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: PUSH
78923: LD_INT 1
78925: NEG
78926: PUSH
78927: LD_INT 2
78929: NEG
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: PUSH
78935: LD_INT 0
78937: PUSH
78938: LD_INT 2
78940: NEG
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 1
78948: PUSH
78949: LD_INT 1
78951: NEG
78952: PUSH
78953: EMPTY
78954: LIST
78955: LIST
78956: PUSH
78957: LD_INT 2
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 2
78969: PUSH
78970: LD_INT 1
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 2
78979: PUSH
78980: LD_INT 2
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: LD_INT 1
78989: PUSH
78990: LD_INT 2
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 0
78999: PUSH
79000: LD_INT 2
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 1
79009: NEG
79010: PUSH
79011: LD_INT 1
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: LD_INT 2
79020: NEG
79021: PUSH
79022: LD_INT 0
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: LD_INT 2
79031: NEG
79032: PUSH
79033: LD_INT 1
79035: NEG
79036: PUSH
79037: EMPTY
79038: LIST
79039: LIST
79040: PUSH
79041: LD_INT 2
79043: NEG
79044: PUSH
79045: LD_INT 2
79047: NEG
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PUSH
79053: LD_INT 2
79055: NEG
79056: PUSH
79057: LD_INT 3
79059: NEG
79060: PUSH
79061: EMPTY
79062: LIST
79063: LIST
79064: PUSH
79065: LD_INT 1
79067: NEG
79068: PUSH
79069: LD_INT 3
79071: NEG
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: PUSH
79077: LD_INT 3
79079: NEG
79080: PUSH
79081: LD_INT 1
79083: NEG
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: LD_INT 3
79091: NEG
79092: PUSH
79093: LD_INT 2
79095: NEG
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
79126: LD_ADDR_VAR 0 29
79130: PUSH
79131: LD_INT 0
79133: PUSH
79134: LD_INT 0
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PUSH
79141: LD_INT 0
79143: PUSH
79144: LD_INT 1
79146: NEG
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 1
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 1
79164: PUSH
79165: LD_INT 1
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: LD_INT 0
79174: PUSH
79175: LD_INT 1
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: PUSH
79182: LD_INT 1
79184: NEG
79185: PUSH
79186: LD_INT 0
79188: PUSH
79189: EMPTY
79190: LIST
79191: LIST
79192: PUSH
79193: LD_INT 1
79195: NEG
79196: PUSH
79197: LD_INT 1
79199: NEG
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 1
79207: NEG
79208: PUSH
79209: LD_INT 2
79211: NEG
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 0
79219: PUSH
79220: LD_INT 2
79222: NEG
79223: PUSH
79224: EMPTY
79225: LIST
79226: LIST
79227: PUSH
79228: LD_INT 1
79230: PUSH
79231: LD_INT 1
79233: NEG
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PUSH
79239: LD_INT 2
79241: PUSH
79242: LD_INT 0
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PUSH
79249: LD_INT 2
79251: PUSH
79252: LD_INT 1
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 1
79261: PUSH
79262: LD_INT 2
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 0
79271: PUSH
79272: LD_INT 2
79274: PUSH
79275: EMPTY
79276: LIST
79277: LIST
79278: PUSH
79279: LD_INT 1
79281: NEG
79282: PUSH
79283: LD_INT 1
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PUSH
79290: LD_INT 2
79292: NEG
79293: PUSH
79294: LD_INT 1
79296: NEG
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: LD_INT 2
79304: NEG
79305: PUSH
79306: LD_INT 2
79308: NEG
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: PUSH
79314: LD_INT 2
79316: NEG
79317: PUSH
79318: LD_INT 3
79320: NEG
79321: PUSH
79322: EMPTY
79323: LIST
79324: LIST
79325: PUSH
79326: LD_INT 2
79328: PUSH
79329: LD_INT 1
79331: NEG
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 3
79339: PUSH
79340: LD_INT 1
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 1
79349: PUSH
79350: LD_INT 3
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 1
79359: NEG
79360: PUSH
79361: LD_INT 2
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 3
79370: NEG
79371: PUSH
79372: LD_INT 2
79374: NEG
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: LIST
79386: LIST
79387: LIST
79388: LIST
79389: LIST
79390: LIST
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: LIST
79403: LIST
79404: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
79405: LD_ADDR_VAR 0 30
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: LD_INT 0
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: LD_INT 1
79425: NEG
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 1
79433: PUSH
79434: LD_INT 0
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 1
79443: PUSH
79444: LD_INT 1
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PUSH
79451: LD_INT 0
79453: PUSH
79454: LD_INT 1
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 1
79463: NEG
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 1
79474: NEG
79475: PUSH
79476: LD_INT 1
79478: NEG
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: PUSH
79484: LD_INT 1
79486: NEG
79487: PUSH
79488: LD_INT 2
79490: NEG
79491: PUSH
79492: EMPTY
79493: LIST
79494: LIST
79495: PUSH
79496: LD_INT 0
79498: PUSH
79499: LD_INT 2
79501: NEG
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 1
79509: PUSH
79510: LD_INT 1
79512: NEG
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 2
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 2
79530: PUSH
79531: LD_INT 1
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: PUSH
79538: LD_INT 2
79540: PUSH
79541: LD_INT 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 1
79550: PUSH
79551: LD_INT 2
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 1
79560: NEG
79561: PUSH
79562: LD_INT 1
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 2
79571: NEG
79572: PUSH
79573: LD_INT 0
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 2
79582: NEG
79583: PUSH
79584: LD_INT 1
79586: NEG
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 1
79594: NEG
79595: PUSH
79596: LD_INT 3
79598: NEG
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PUSH
79604: LD_INT 1
79606: PUSH
79607: LD_INT 2
79609: NEG
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: PUSH
79615: LD_INT 3
79617: PUSH
79618: LD_INT 2
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: LD_INT 2
79627: PUSH
79628: LD_INT 3
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 2
79637: NEG
79638: PUSH
79639: LD_INT 1
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: PUSH
79646: LD_INT 3
79648: NEG
79649: PUSH
79650: LD_INT 1
79652: NEG
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: LIST
79662: LIST
79663: LIST
79664: LIST
79665: LIST
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
79683: LD_ADDR_VAR 0 31
79687: PUSH
79688: LD_INT 0
79690: PUSH
79691: LD_INT 0
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: PUSH
79698: LD_INT 0
79700: PUSH
79701: LD_INT 1
79703: NEG
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 1
79711: PUSH
79712: LD_INT 0
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 1
79721: PUSH
79722: LD_INT 1
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 0
79731: PUSH
79732: LD_INT 1
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 1
79741: NEG
79742: PUSH
79743: LD_INT 0
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 1
79752: NEG
79753: PUSH
79754: LD_INT 1
79756: NEG
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 1
79764: NEG
79765: PUSH
79766: LD_INT 2
79768: NEG
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 1
79776: PUSH
79777: LD_INT 1
79779: NEG
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: LD_INT 2
79787: PUSH
79788: LD_INT 0
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: PUSH
79795: LD_INT 2
79797: PUSH
79798: LD_INT 1
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: PUSH
79805: LD_INT 2
79807: PUSH
79808: LD_INT 2
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: PUSH
79815: LD_INT 1
79817: PUSH
79818: LD_INT 2
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 0
79827: PUSH
79828: LD_INT 2
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 1
79837: NEG
79838: PUSH
79839: LD_INT 1
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 2
79848: NEG
79849: PUSH
79850: LD_INT 1
79852: NEG
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 2
79860: NEG
79861: PUSH
79862: LD_INT 2
79864: NEG
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 2
79872: NEG
79873: PUSH
79874: LD_INT 3
79876: NEG
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: PUSH
79882: LD_INT 2
79884: PUSH
79885: LD_INT 1
79887: NEG
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 3
79895: PUSH
79896: LD_INT 1
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 1
79905: PUSH
79906: LD_INT 3
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: LD_INT 1
79915: NEG
79916: PUSH
79917: LD_INT 2
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 3
79926: NEG
79927: PUSH
79928: LD_INT 2
79930: NEG
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
79961: LD_ADDR_VAR 0 32
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: LD_INT 0
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 0
79978: PUSH
79979: LD_INT 1
79981: NEG
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 1
79989: PUSH
79990: LD_INT 0
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 1
79999: PUSH
80000: LD_INT 1
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: LD_INT 1
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: PUSH
80017: LD_INT 1
80019: NEG
80020: PUSH
80021: LD_INT 0
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 1
80030: NEG
80031: PUSH
80032: LD_INT 1
80034: NEG
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: PUSH
80040: LD_INT 1
80042: NEG
80043: PUSH
80044: LD_INT 2
80046: NEG
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 0
80054: PUSH
80055: LD_INT 2
80057: NEG
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: PUSH
80063: LD_INT 1
80065: PUSH
80066: LD_INT 1
80068: NEG
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: LD_INT 2
80076: PUSH
80077: LD_INT 1
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 2
80086: PUSH
80087: LD_INT 2
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: LD_INT 1
80096: PUSH
80097: LD_INT 2
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 0
80106: PUSH
80107: LD_INT 2
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PUSH
80114: LD_INT 1
80116: NEG
80117: PUSH
80118: LD_INT 1
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PUSH
80125: LD_INT 2
80127: NEG
80128: PUSH
80129: LD_INT 0
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: PUSH
80136: LD_INT 2
80138: NEG
80139: PUSH
80140: LD_INT 1
80142: NEG
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: PUSH
80148: LD_INT 1
80150: NEG
80151: PUSH
80152: LD_INT 3
80154: NEG
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: LD_INT 1
80162: PUSH
80163: LD_INT 2
80165: NEG
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: LD_INT 3
80173: PUSH
80174: LD_INT 2
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: PUSH
80181: LD_INT 2
80183: PUSH
80184: LD_INT 3
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 2
80193: NEG
80194: PUSH
80195: LD_INT 1
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: LD_INT 3
80204: NEG
80205: PUSH
80206: LD_INT 1
80208: NEG
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: LIST
80222: LIST
80223: LIST
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
80239: LD_ADDR_VAR 0 33
80243: PUSH
80244: LD_INT 0
80246: PUSH
80247: LD_INT 0
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PUSH
80254: LD_INT 0
80256: PUSH
80257: LD_INT 1
80259: NEG
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: PUSH
80265: LD_INT 1
80267: PUSH
80268: LD_INT 0
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: PUSH
80275: LD_INT 1
80277: PUSH
80278: LD_INT 1
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 0
80287: PUSH
80288: LD_INT 1
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: PUSH
80295: LD_INT 1
80297: NEG
80298: PUSH
80299: LD_INT 0
80301: PUSH
80302: EMPTY
80303: LIST
80304: LIST
80305: PUSH
80306: LD_INT 1
80308: NEG
80309: PUSH
80310: LD_INT 1
80312: NEG
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 1
80320: NEG
80321: PUSH
80322: LD_INT 2
80324: NEG
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: PUSH
80330: LD_INT 1
80332: PUSH
80333: LD_INT 1
80335: NEG
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PUSH
80341: LD_INT 2
80343: PUSH
80344: LD_INT 0
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: PUSH
80351: LD_INT 2
80353: PUSH
80354: LD_INT 1
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: LD_INT 1
80363: PUSH
80364: LD_INT 2
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 0
80373: PUSH
80374: LD_INT 2
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PUSH
80381: LD_INT 1
80383: NEG
80384: PUSH
80385: LD_INT 1
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 2
80394: NEG
80395: PUSH
80396: LD_INT 0
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 2
80405: NEG
80406: PUSH
80407: LD_INT 1
80409: NEG
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 2
80417: NEG
80418: PUSH
80419: LD_INT 2
80421: NEG
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 2
80429: NEG
80430: PUSH
80431: LD_INT 3
80433: NEG
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: PUSH
80439: LD_INT 2
80441: PUSH
80442: LD_INT 1
80444: NEG
80445: PUSH
80446: EMPTY
80447: LIST
80448: LIST
80449: PUSH
80450: LD_INT 3
80452: PUSH
80453: LD_INT 1
80455: PUSH
80456: EMPTY
80457: LIST
80458: LIST
80459: PUSH
80460: LD_INT 1
80462: PUSH
80463: LD_INT 3
80465: PUSH
80466: EMPTY
80467: LIST
80468: LIST
80469: PUSH
80470: LD_INT 1
80472: NEG
80473: PUSH
80474: LD_INT 2
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: PUSH
80481: LD_INT 3
80483: NEG
80484: PUSH
80485: LD_INT 2
80487: NEG
80488: PUSH
80489: EMPTY
80490: LIST
80491: LIST
80492: PUSH
80493: EMPTY
80494: LIST
80495: LIST
80496: LIST
80497: LIST
80498: LIST
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: LIST
80504: LIST
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: LIST
80516: LIST
80517: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
80518: LD_ADDR_VAR 0 34
80522: PUSH
80523: LD_INT 0
80525: PUSH
80526: LD_INT 0
80528: PUSH
80529: EMPTY
80530: LIST
80531: LIST
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: LD_INT 1
80538: NEG
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PUSH
80544: LD_INT 1
80546: PUSH
80547: LD_INT 0
80549: PUSH
80550: EMPTY
80551: LIST
80552: LIST
80553: PUSH
80554: LD_INT 1
80556: PUSH
80557: LD_INT 1
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: PUSH
80564: LD_INT 0
80566: PUSH
80567: LD_INT 1
80569: PUSH
80570: EMPTY
80571: LIST
80572: LIST
80573: PUSH
80574: LD_INT 1
80576: NEG
80577: PUSH
80578: LD_INT 0
80580: PUSH
80581: EMPTY
80582: LIST
80583: LIST
80584: PUSH
80585: LD_INT 1
80587: NEG
80588: PUSH
80589: LD_INT 1
80591: NEG
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: PUSH
80597: LD_INT 1
80599: NEG
80600: PUSH
80601: LD_INT 2
80603: NEG
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: PUSH
80609: LD_INT 0
80611: PUSH
80612: LD_INT 2
80614: NEG
80615: PUSH
80616: EMPTY
80617: LIST
80618: LIST
80619: PUSH
80620: LD_INT 1
80622: PUSH
80623: LD_INT 1
80625: NEG
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: PUSH
80631: LD_INT 2
80633: PUSH
80634: LD_INT 1
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: PUSH
80641: LD_INT 2
80643: PUSH
80644: LD_INT 2
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: PUSH
80651: LD_INT 1
80653: PUSH
80654: LD_INT 2
80656: PUSH
80657: EMPTY
80658: LIST
80659: LIST
80660: PUSH
80661: LD_INT 1
80663: NEG
80664: PUSH
80665: LD_INT 1
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PUSH
80672: LD_INT 2
80674: NEG
80675: PUSH
80676: LD_INT 0
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: LD_INT 2
80685: NEG
80686: PUSH
80687: LD_INT 1
80689: NEG
80690: PUSH
80691: EMPTY
80692: LIST
80693: LIST
80694: PUSH
80695: LD_INT 2
80697: NEG
80698: PUSH
80699: LD_INT 2
80701: NEG
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: PUSH
80707: LD_INT 1
80709: NEG
80710: PUSH
80711: LD_INT 3
80713: NEG
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 1
80721: PUSH
80722: LD_INT 2
80724: NEG
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 3
80732: PUSH
80733: LD_INT 2
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: LD_INT 2
80742: PUSH
80743: LD_INT 3
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: PUSH
80750: LD_INT 2
80752: NEG
80753: PUSH
80754: LD_INT 1
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: PUSH
80761: LD_INT 3
80763: NEG
80764: PUSH
80765: LD_INT 1
80767: NEG
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: EMPTY
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: LIST
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: LIST
80795: LIST
80796: LIST
80797: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
80798: LD_ADDR_VAR 0 35
80802: PUSH
80803: LD_INT 0
80805: PUSH
80806: LD_INT 0
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 0
80815: PUSH
80816: LD_INT 1
80818: NEG
80819: PUSH
80820: EMPTY
80821: LIST
80822: LIST
80823: PUSH
80824: LD_INT 1
80826: PUSH
80827: LD_INT 0
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PUSH
80834: LD_INT 1
80836: PUSH
80837: LD_INT 1
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: LD_INT 0
80846: PUSH
80847: LD_INT 1
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: LD_INT 1
80856: NEG
80857: PUSH
80858: LD_INT 0
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: LD_INT 1
80867: NEG
80868: PUSH
80869: LD_INT 1
80871: NEG
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 2
80879: PUSH
80880: LD_INT 1
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 2
80889: NEG
80890: PUSH
80891: LD_INT 1
80893: NEG
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: EMPTY
80900: LIST
80901: LIST
80902: LIST
80903: LIST
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: LIST
80909: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
80910: LD_ADDR_VAR 0 36
80914: PUSH
80915: LD_INT 0
80917: PUSH
80918: LD_INT 0
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: LD_INT 0
80927: PUSH
80928: LD_INT 1
80930: NEG
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PUSH
80936: LD_INT 1
80938: PUSH
80939: LD_INT 0
80941: PUSH
80942: EMPTY
80943: LIST
80944: LIST
80945: PUSH
80946: LD_INT 1
80948: PUSH
80949: LD_INT 1
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PUSH
80956: LD_INT 0
80958: PUSH
80959: LD_INT 1
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PUSH
80966: LD_INT 1
80968: NEG
80969: PUSH
80970: LD_INT 0
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: PUSH
80977: LD_INT 1
80979: NEG
80980: PUSH
80981: LD_INT 1
80983: NEG
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: LD_INT 1
80991: NEG
80992: PUSH
80993: LD_INT 2
80995: NEG
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 1
81003: PUSH
81004: LD_INT 2
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: LIST
81015: LIST
81016: LIST
81017: LIST
81018: LIST
81019: LIST
81020: LIST
81021: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
81022: LD_ADDR_VAR 0 37
81026: PUSH
81027: LD_INT 0
81029: PUSH
81030: LD_INT 0
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: LD_INT 0
81039: PUSH
81040: LD_INT 1
81042: NEG
81043: PUSH
81044: EMPTY
81045: LIST
81046: LIST
81047: PUSH
81048: LD_INT 1
81050: PUSH
81051: LD_INT 0
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: LD_INT 1
81060: PUSH
81061: LD_INT 1
81063: PUSH
81064: EMPTY
81065: LIST
81066: LIST
81067: PUSH
81068: LD_INT 0
81070: PUSH
81071: LD_INT 1
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: PUSH
81078: LD_INT 1
81080: NEG
81081: PUSH
81082: LD_INT 0
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: PUSH
81089: LD_INT 1
81091: NEG
81092: PUSH
81093: LD_INT 1
81095: NEG
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 1
81103: PUSH
81104: LD_INT 1
81106: NEG
81107: PUSH
81108: EMPTY
81109: LIST
81110: LIST
81111: PUSH
81112: LD_INT 1
81114: NEG
81115: PUSH
81116: LD_INT 1
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PUSH
81123: EMPTY
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: LIST
81129: LIST
81130: LIST
81131: LIST
81132: LIST
81133: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
81134: LD_ADDR_VAR 0 38
81138: PUSH
81139: LD_INT 0
81141: PUSH
81142: LD_INT 0
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: PUSH
81149: LD_INT 0
81151: PUSH
81152: LD_INT 1
81154: NEG
81155: PUSH
81156: EMPTY
81157: LIST
81158: LIST
81159: PUSH
81160: LD_INT 1
81162: PUSH
81163: LD_INT 0
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: PUSH
81170: LD_INT 1
81172: PUSH
81173: LD_INT 1
81175: PUSH
81176: EMPTY
81177: LIST
81178: LIST
81179: PUSH
81180: LD_INT 0
81182: PUSH
81183: LD_INT 1
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: PUSH
81190: LD_INT 1
81192: NEG
81193: PUSH
81194: LD_INT 0
81196: PUSH
81197: EMPTY
81198: LIST
81199: LIST
81200: PUSH
81201: LD_INT 1
81203: NEG
81204: PUSH
81205: LD_INT 1
81207: NEG
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PUSH
81213: LD_INT 2
81215: PUSH
81216: LD_INT 1
81218: PUSH
81219: EMPTY
81220: LIST
81221: LIST
81222: PUSH
81223: LD_INT 2
81225: NEG
81226: PUSH
81227: LD_INT 1
81229: NEG
81230: PUSH
81231: EMPTY
81232: LIST
81233: LIST
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: LIST
81243: LIST
81244: LIST
81245: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
81246: LD_ADDR_VAR 0 39
81250: PUSH
81251: LD_INT 0
81253: PUSH
81254: LD_INT 0
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: PUSH
81261: LD_INT 0
81263: PUSH
81264: LD_INT 1
81266: NEG
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: PUSH
81272: LD_INT 1
81274: PUSH
81275: LD_INT 0
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: PUSH
81282: LD_INT 1
81284: PUSH
81285: LD_INT 1
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PUSH
81292: LD_INT 0
81294: PUSH
81295: LD_INT 1
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 1
81304: NEG
81305: PUSH
81306: LD_INT 0
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PUSH
81313: LD_INT 1
81315: NEG
81316: PUSH
81317: LD_INT 1
81319: NEG
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 1
81327: NEG
81328: PUSH
81329: LD_INT 2
81331: NEG
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: LD_INT 1
81339: PUSH
81340: LD_INT 2
81342: PUSH
81343: EMPTY
81344: LIST
81345: LIST
81346: PUSH
81347: EMPTY
81348: LIST
81349: LIST
81350: LIST
81351: LIST
81352: LIST
81353: LIST
81354: LIST
81355: LIST
81356: LIST
81357: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
81358: LD_ADDR_VAR 0 40
81362: PUSH
81363: LD_INT 0
81365: PUSH
81366: LD_INT 0
81368: PUSH
81369: EMPTY
81370: LIST
81371: LIST
81372: PUSH
81373: LD_INT 0
81375: PUSH
81376: LD_INT 1
81378: NEG
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 1
81386: PUSH
81387: LD_INT 0
81389: PUSH
81390: EMPTY
81391: LIST
81392: LIST
81393: PUSH
81394: LD_INT 1
81396: PUSH
81397: LD_INT 1
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: PUSH
81404: LD_INT 0
81406: PUSH
81407: LD_INT 1
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: PUSH
81414: LD_INT 1
81416: NEG
81417: PUSH
81418: LD_INT 0
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PUSH
81425: LD_INT 1
81427: NEG
81428: PUSH
81429: LD_INT 1
81431: NEG
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: PUSH
81437: LD_INT 1
81439: PUSH
81440: LD_INT 1
81442: NEG
81443: PUSH
81444: EMPTY
81445: LIST
81446: LIST
81447: PUSH
81448: LD_INT 1
81450: NEG
81451: PUSH
81452: LD_INT 1
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81470: LD_ADDR_VAR 0 41
81474: PUSH
81475: LD_INT 0
81477: PUSH
81478: LD_INT 0
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PUSH
81485: LD_INT 0
81487: PUSH
81488: LD_INT 1
81490: NEG
81491: PUSH
81492: EMPTY
81493: LIST
81494: LIST
81495: PUSH
81496: LD_INT 1
81498: PUSH
81499: LD_INT 0
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: LD_INT 1
81508: PUSH
81509: LD_INT 1
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PUSH
81516: LD_INT 0
81518: PUSH
81519: LD_INT 1
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: PUSH
81526: LD_INT 1
81528: NEG
81529: PUSH
81530: LD_INT 0
81532: PUSH
81533: EMPTY
81534: LIST
81535: LIST
81536: PUSH
81537: LD_INT 1
81539: NEG
81540: PUSH
81541: LD_INT 1
81543: NEG
81544: PUSH
81545: EMPTY
81546: LIST
81547: LIST
81548: PUSH
81549: LD_INT 1
81551: NEG
81552: PUSH
81553: LD_INT 2
81555: NEG
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 1
81563: PUSH
81564: LD_INT 1
81566: NEG
81567: PUSH
81568: EMPTY
81569: LIST
81570: LIST
81571: PUSH
81572: LD_INT 2
81574: PUSH
81575: LD_INT 0
81577: PUSH
81578: EMPTY
81579: LIST
81580: LIST
81581: PUSH
81582: LD_INT 2
81584: PUSH
81585: LD_INT 1
81587: PUSH
81588: EMPTY
81589: LIST
81590: LIST
81591: PUSH
81592: LD_INT 2
81594: PUSH
81595: LD_INT 2
81597: PUSH
81598: EMPTY
81599: LIST
81600: LIST
81601: PUSH
81602: LD_INT 1
81604: PUSH
81605: LD_INT 2
81607: PUSH
81608: EMPTY
81609: LIST
81610: LIST
81611: PUSH
81612: LD_INT 1
81614: NEG
81615: PUSH
81616: LD_INT 1
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: PUSH
81623: LD_INT 2
81625: NEG
81626: PUSH
81627: LD_INT 0
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: PUSH
81634: LD_INT 2
81636: NEG
81637: PUSH
81638: LD_INT 1
81640: NEG
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: PUSH
81646: LD_INT 2
81648: NEG
81649: PUSH
81650: LD_INT 2
81652: NEG
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: PUSH
81658: LD_INT 2
81660: NEG
81661: PUSH
81662: LD_INT 3
81664: NEG
81665: PUSH
81666: EMPTY
81667: LIST
81668: LIST
81669: PUSH
81670: LD_INT 2
81672: PUSH
81673: LD_INT 1
81675: NEG
81676: PUSH
81677: EMPTY
81678: LIST
81679: LIST
81680: PUSH
81681: LD_INT 3
81683: PUSH
81684: LD_INT 0
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: PUSH
81691: LD_INT 3
81693: PUSH
81694: LD_INT 1
81696: PUSH
81697: EMPTY
81698: LIST
81699: LIST
81700: PUSH
81701: LD_INT 3
81703: PUSH
81704: LD_INT 2
81706: PUSH
81707: EMPTY
81708: LIST
81709: LIST
81710: PUSH
81711: LD_INT 3
81713: PUSH
81714: LD_INT 3
81716: PUSH
81717: EMPTY
81718: LIST
81719: LIST
81720: PUSH
81721: LD_INT 2
81723: PUSH
81724: LD_INT 3
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: PUSH
81731: LD_INT 2
81733: NEG
81734: PUSH
81735: LD_INT 1
81737: PUSH
81738: EMPTY
81739: LIST
81740: LIST
81741: PUSH
81742: LD_INT 3
81744: NEG
81745: PUSH
81746: LD_INT 0
81748: PUSH
81749: EMPTY
81750: LIST
81751: LIST
81752: PUSH
81753: LD_INT 3
81755: NEG
81756: PUSH
81757: LD_INT 1
81759: NEG
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: LD_INT 3
81767: NEG
81768: PUSH
81769: LD_INT 2
81771: NEG
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PUSH
81777: LD_INT 3
81779: NEG
81780: PUSH
81781: LD_INT 3
81783: NEG
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: EMPTY
81790: LIST
81791: LIST
81792: LIST
81793: LIST
81794: LIST
81795: LIST
81796: LIST
81797: LIST
81798: LIST
81799: LIST
81800: LIST
81801: LIST
81802: LIST
81803: LIST
81804: LIST
81805: LIST
81806: LIST
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: LIST
81812: LIST
81813: LIST
81814: LIST
81815: LIST
81816: LIST
81817: LIST
81818: LIST
81819: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81820: LD_ADDR_VAR 0 42
81824: PUSH
81825: LD_INT 0
81827: PUSH
81828: LD_INT 0
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: PUSH
81835: LD_INT 0
81837: PUSH
81838: LD_INT 1
81840: NEG
81841: PUSH
81842: EMPTY
81843: LIST
81844: LIST
81845: PUSH
81846: LD_INT 1
81848: PUSH
81849: LD_INT 0
81851: PUSH
81852: EMPTY
81853: LIST
81854: LIST
81855: PUSH
81856: LD_INT 1
81858: PUSH
81859: LD_INT 1
81861: PUSH
81862: EMPTY
81863: LIST
81864: LIST
81865: PUSH
81866: LD_INT 0
81868: PUSH
81869: LD_INT 1
81871: PUSH
81872: EMPTY
81873: LIST
81874: LIST
81875: PUSH
81876: LD_INT 1
81878: NEG
81879: PUSH
81880: LD_INT 0
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: PUSH
81887: LD_INT 1
81889: NEG
81890: PUSH
81891: LD_INT 1
81893: NEG
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: PUSH
81899: LD_INT 1
81901: NEG
81902: PUSH
81903: LD_INT 2
81905: NEG
81906: PUSH
81907: EMPTY
81908: LIST
81909: LIST
81910: PUSH
81911: LD_INT 0
81913: PUSH
81914: LD_INT 2
81916: NEG
81917: PUSH
81918: EMPTY
81919: LIST
81920: LIST
81921: PUSH
81922: LD_INT 1
81924: PUSH
81925: LD_INT 1
81927: NEG
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: PUSH
81933: LD_INT 2
81935: PUSH
81936: LD_INT 1
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: PUSH
81943: LD_INT 2
81945: PUSH
81946: LD_INT 2
81948: PUSH
81949: EMPTY
81950: LIST
81951: LIST
81952: PUSH
81953: LD_INT 1
81955: PUSH
81956: LD_INT 2
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: PUSH
81963: LD_INT 0
81965: PUSH
81966: LD_INT 2
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PUSH
81973: LD_INT 1
81975: NEG
81976: PUSH
81977: LD_INT 1
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: PUSH
81984: LD_INT 2
81986: NEG
81987: PUSH
81988: LD_INT 1
81990: NEG
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: PUSH
81996: LD_INT 2
81998: NEG
81999: PUSH
82000: LD_INT 2
82002: NEG
82003: PUSH
82004: EMPTY
82005: LIST
82006: LIST
82007: PUSH
82008: LD_INT 2
82010: NEG
82011: PUSH
82012: LD_INT 3
82014: NEG
82015: PUSH
82016: EMPTY
82017: LIST
82018: LIST
82019: PUSH
82020: LD_INT 1
82022: NEG
82023: PUSH
82024: LD_INT 3
82026: NEG
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: PUSH
82032: LD_INT 0
82034: PUSH
82035: LD_INT 3
82037: NEG
82038: PUSH
82039: EMPTY
82040: LIST
82041: LIST
82042: PUSH
82043: LD_INT 1
82045: PUSH
82046: LD_INT 2
82048: NEG
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PUSH
82054: LD_INT 3
82056: PUSH
82057: LD_INT 2
82059: PUSH
82060: EMPTY
82061: LIST
82062: LIST
82063: PUSH
82064: LD_INT 3
82066: PUSH
82067: LD_INT 3
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: PUSH
82074: LD_INT 2
82076: PUSH
82077: LD_INT 3
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PUSH
82084: LD_INT 1
82086: PUSH
82087: LD_INT 3
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PUSH
82094: LD_INT 0
82096: PUSH
82097: LD_INT 3
82099: PUSH
82100: EMPTY
82101: LIST
82102: LIST
82103: PUSH
82104: LD_INT 1
82106: NEG
82107: PUSH
82108: LD_INT 2
82110: PUSH
82111: EMPTY
82112: LIST
82113: LIST
82114: PUSH
82115: LD_INT 3
82117: NEG
82118: PUSH
82119: LD_INT 2
82121: NEG
82122: PUSH
82123: EMPTY
82124: LIST
82125: LIST
82126: PUSH
82127: LD_INT 3
82129: NEG
82130: PUSH
82131: LD_INT 3
82133: NEG
82134: PUSH
82135: EMPTY
82136: LIST
82137: LIST
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: LIST
82143: LIST
82144: LIST
82145: LIST
82146: LIST
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: LIST
82155: LIST
82156: LIST
82157: LIST
82158: LIST
82159: LIST
82160: LIST
82161: LIST
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: LIST
82169: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82170: LD_ADDR_VAR 0 43
82174: PUSH
82175: LD_INT 0
82177: PUSH
82178: LD_INT 0
82180: PUSH
82181: EMPTY
82182: LIST
82183: LIST
82184: PUSH
82185: LD_INT 0
82187: PUSH
82188: LD_INT 1
82190: NEG
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: LD_INT 1
82198: PUSH
82199: LD_INT 0
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 1
82208: PUSH
82209: LD_INT 1
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: PUSH
82216: LD_INT 0
82218: PUSH
82219: LD_INT 1
82221: PUSH
82222: EMPTY
82223: LIST
82224: LIST
82225: PUSH
82226: LD_INT 1
82228: NEG
82229: PUSH
82230: LD_INT 0
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: LD_INT 1
82239: NEG
82240: PUSH
82241: LD_INT 1
82243: NEG
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: PUSH
82249: LD_INT 1
82251: NEG
82252: PUSH
82253: LD_INT 2
82255: NEG
82256: PUSH
82257: EMPTY
82258: LIST
82259: LIST
82260: PUSH
82261: LD_INT 0
82263: PUSH
82264: LD_INT 2
82266: NEG
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: PUSH
82272: LD_INT 1
82274: PUSH
82275: LD_INT 1
82277: NEG
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 2
82285: PUSH
82286: LD_INT 0
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: PUSH
82293: LD_INT 2
82295: PUSH
82296: LD_INT 1
82298: PUSH
82299: EMPTY
82300: LIST
82301: LIST
82302: PUSH
82303: LD_INT 1
82305: PUSH
82306: LD_INT 2
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: PUSH
82313: LD_INT 0
82315: PUSH
82316: LD_INT 2
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: PUSH
82323: LD_INT 1
82325: NEG
82326: PUSH
82327: LD_INT 1
82329: PUSH
82330: EMPTY
82331: LIST
82332: LIST
82333: PUSH
82334: LD_INT 2
82336: NEG
82337: PUSH
82338: LD_INT 0
82340: PUSH
82341: EMPTY
82342: LIST
82343: LIST
82344: PUSH
82345: LD_INT 2
82347: NEG
82348: PUSH
82349: LD_INT 1
82351: NEG
82352: PUSH
82353: EMPTY
82354: LIST
82355: LIST
82356: PUSH
82357: LD_INT 1
82359: NEG
82360: PUSH
82361: LD_INT 3
82363: NEG
82364: PUSH
82365: EMPTY
82366: LIST
82367: LIST
82368: PUSH
82369: LD_INT 0
82371: PUSH
82372: LD_INT 3
82374: NEG
82375: PUSH
82376: EMPTY
82377: LIST
82378: LIST
82379: PUSH
82380: LD_INT 1
82382: PUSH
82383: LD_INT 2
82385: NEG
82386: PUSH
82387: EMPTY
82388: LIST
82389: LIST
82390: PUSH
82391: LD_INT 2
82393: PUSH
82394: LD_INT 1
82396: NEG
82397: PUSH
82398: EMPTY
82399: LIST
82400: LIST
82401: PUSH
82402: LD_INT 3
82404: PUSH
82405: LD_INT 0
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: PUSH
82412: LD_INT 3
82414: PUSH
82415: LD_INT 1
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: PUSH
82422: LD_INT 1
82424: PUSH
82425: LD_INT 3
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: PUSH
82432: LD_INT 0
82434: PUSH
82435: LD_INT 3
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PUSH
82442: LD_INT 1
82444: NEG
82445: PUSH
82446: LD_INT 2
82448: PUSH
82449: EMPTY
82450: LIST
82451: LIST
82452: PUSH
82453: LD_INT 2
82455: NEG
82456: PUSH
82457: LD_INT 1
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: PUSH
82464: LD_INT 3
82466: NEG
82467: PUSH
82468: LD_INT 0
82470: PUSH
82471: EMPTY
82472: LIST
82473: LIST
82474: PUSH
82475: LD_INT 3
82477: NEG
82478: PUSH
82479: LD_INT 1
82481: NEG
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: LIST
82491: LIST
82492: LIST
82493: LIST
82494: LIST
82495: LIST
82496: LIST
82497: LIST
82498: LIST
82499: LIST
82500: LIST
82501: LIST
82502: LIST
82503: LIST
82504: LIST
82505: LIST
82506: LIST
82507: LIST
82508: LIST
82509: LIST
82510: LIST
82511: LIST
82512: LIST
82513: LIST
82514: LIST
82515: LIST
82516: LIST
82517: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82518: LD_ADDR_VAR 0 44
82522: PUSH
82523: LD_INT 0
82525: PUSH
82526: LD_INT 0
82528: PUSH
82529: EMPTY
82530: LIST
82531: LIST
82532: PUSH
82533: LD_INT 0
82535: PUSH
82536: LD_INT 1
82538: NEG
82539: PUSH
82540: EMPTY
82541: LIST
82542: LIST
82543: PUSH
82544: LD_INT 1
82546: PUSH
82547: LD_INT 0
82549: PUSH
82550: EMPTY
82551: LIST
82552: LIST
82553: PUSH
82554: LD_INT 1
82556: PUSH
82557: LD_INT 1
82559: PUSH
82560: EMPTY
82561: LIST
82562: LIST
82563: PUSH
82564: LD_INT 0
82566: PUSH
82567: LD_INT 1
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: LD_INT 1
82576: NEG
82577: PUSH
82578: LD_INT 0
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 1
82587: NEG
82588: PUSH
82589: LD_INT 1
82591: NEG
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: PUSH
82597: LD_INT 1
82599: NEG
82600: PUSH
82601: LD_INT 2
82603: NEG
82604: PUSH
82605: EMPTY
82606: LIST
82607: LIST
82608: PUSH
82609: LD_INT 1
82611: PUSH
82612: LD_INT 1
82614: NEG
82615: PUSH
82616: EMPTY
82617: LIST
82618: LIST
82619: PUSH
82620: LD_INT 2
82622: PUSH
82623: LD_INT 0
82625: PUSH
82626: EMPTY
82627: LIST
82628: LIST
82629: PUSH
82630: LD_INT 2
82632: PUSH
82633: LD_INT 1
82635: PUSH
82636: EMPTY
82637: LIST
82638: LIST
82639: PUSH
82640: LD_INT 2
82642: PUSH
82643: LD_INT 2
82645: PUSH
82646: EMPTY
82647: LIST
82648: LIST
82649: PUSH
82650: LD_INT 1
82652: PUSH
82653: LD_INT 2
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: PUSH
82660: LD_INT 1
82662: NEG
82663: PUSH
82664: LD_INT 1
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: PUSH
82671: LD_INT 2
82673: NEG
82674: PUSH
82675: LD_INT 0
82677: PUSH
82678: EMPTY
82679: LIST
82680: LIST
82681: PUSH
82682: LD_INT 2
82684: NEG
82685: PUSH
82686: LD_INT 1
82688: NEG
82689: PUSH
82690: EMPTY
82691: LIST
82692: LIST
82693: PUSH
82694: LD_INT 2
82696: NEG
82697: PUSH
82698: LD_INT 2
82700: NEG
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: PUSH
82706: LD_INT 2
82708: NEG
82709: PUSH
82710: LD_INT 3
82712: NEG
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: PUSH
82718: LD_INT 2
82720: PUSH
82721: LD_INT 1
82723: NEG
82724: PUSH
82725: EMPTY
82726: LIST
82727: LIST
82728: PUSH
82729: LD_INT 3
82731: PUSH
82732: LD_INT 0
82734: PUSH
82735: EMPTY
82736: LIST
82737: LIST
82738: PUSH
82739: LD_INT 3
82741: PUSH
82742: LD_INT 1
82744: PUSH
82745: EMPTY
82746: LIST
82747: LIST
82748: PUSH
82749: LD_INT 3
82751: PUSH
82752: LD_INT 2
82754: PUSH
82755: EMPTY
82756: LIST
82757: LIST
82758: PUSH
82759: LD_INT 3
82761: PUSH
82762: LD_INT 3
82764: PUSH
82765: EMPTY
82766: LIST
82767: LIST
82768: PUSH
82769: LD_INT 2
82771: PUSH
82772: LD_INT 3
82774: PUSH
82775: EMPTY
82776: LIST
82777: LIST
82778: PUSH
82779: LD_INT 2
82781: NEG
82782: PUSH
82783: LD_INT 1
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: PUSH
82790: LD_INT 3
82792: NEG
82793: PUSH
82794: LD_INT 0
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: PUSH
82801: LD_INT 3
82803: NEG
82804: PUSH
82805: LD_INT 1
82807: NEG
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PUSH
82813: LD_INT 3
82815: NEG
82816: PUSH
82817: LD_INT 2
82819: NEG
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: PUSH
82825: LD_INT 3
82827: NEG
82828: PUSH
82829: LD_INT 3
82831: NEG
82832: PUSH
82833: EMPTY
82834: LIST
82835: LIST
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: LIST
82841: LIST
82842: LIST
82843: LIST
82844: LIST
82845: LIST
82846: LIST
82847: LIST
82848: LIST
82849: LIST
82850: LIST
82851: LIST
82852: LIST
82853: LIST
82854: LIST
82855: LIST
82856: LIST
82857: LIST
82858: LIST
82859: LIST
82860: LIST
82861: LIST
82862: LIST
82863: LIST
82864: LIST
82865: LIST
82866: LIST
82867: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82868: LD_ADDR_VAR 0 45
82872: PUSH
82873: LD_INT 0
82875: PUSH
82876: LD_INT 0
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PUSH
82883: LD_INT 0
82885: PUSH
82886: LD_INT 1
82888: NEG
82889: PUSH
82890: EMPTY
82891: LIST
82892: LIST
82893: PUSH
82894: LD_INT 1
82896: PUSH
82897: LD_INT 0
82899: PUSH
82900: EMPTY
82901: LIST
82902: LIST
82903: PUSH
82904: LD_INT 1
82906: PUSH
82907: LD_INT 1
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: PUSH
82914: LD_INT 0
82916: PUSH
82917: LD_INT 1
82919: PUSH
82920: EMPTY
82921: LIST
82922: LIST
82923: PUSH
82924: LD_INT 1
82926: NEG
82927: PUSH
82928: LD_INT 0
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: PUSH
82935: LD_INT 1
82937: NEG
82938: PUSH
82939: LD_INT 1
82941: NEG
82942: PUSH
82943: EMPTY
82944: LIST
82945: LIST
82946: PUSH
82947: LD_INT 1
82949: NEG
82950: PUSH
82951: LD_INT 2
82953: NEG
82954: PUSH
82955: EMPTY
82956: LIST
82957: LIST
82958: PUSH
82959: LD_INT 0
82961: PUSH
82962: LD_INT 2
82964: NEG
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PUSH
82970: LD_INT 1
82972: PUSH
82973: LD_INT 1
82975: NEG
82976: PUSH
82977: EMPTY
82978: LIST
82979: LIST
82980: PUSH
82981: LD_INT 2
82983: PUSH
82984: LD_INT 1
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: PUSH
82991: LD_INT 2
82993: PUSH
82994: LD_INT 2
82996: PUSH
82997: EMPTY
82998: LIST
82999: LIST
83000: PUSH
83001: LD_INT 1
83003: PUSH
83004: LD_INT 2
83006: PUSH
83007: EMPTY
83008: LIST
83009: LIST
83010: PUSH
83011: LD_INT 0
83013: PUSH
83014: LD_INT 2
83016: PUSH
83017: EMPTY
83018: LIST
83019: LIST
83020: PUSH
83021: LD_INT 1
83023: NEG
83024: PUSH
83025: LD_INT 1
83027: PUSH
83028: EMPTY
83029: LIST
83030: LIST
83031: PUSH
83032: LD_INT 2
83034: NEG
83035: PUSH
83036: LD_INT 1
83038: NEG
83039: PUSH
83040: EMPTY
83041: LIST
83042: LIST
83043: PUSH
83044: LD_INT 2
83046: NEG
83047: PUSH
83048: LD_INT 2
83050: NEG
83051: PUSH
83052: EMPTY
83053: LIST
83054: LIST
83055: PUSH
83056: LD_INT 2
83058: NEG
83059: PUSH
83060: LD_INT 3
83062: NEG
83063: PUSH
83064: EMPTY
83065: LIST
83066: LIST
83067: PUSH
83068: LD_INT 1
83070: NEG
83071: PUSH
83072: LD_INT 3
83074: NEG
83075: PUSH
83076: EMPTY
83077: LIST
83078: LIST
83079: PUSH
83080: LD_INT 0
83082: PUSH
83083: LD_INT 3
83085: NEG
83086: PUSH
83087: EMPTY
83088: LIST
83089: LIST
83090: PUSH
83091: LD_INT 1
83093: PUSH
83094: LD_INT 2
83096: NEG
83097: PUSH
83098: EMPTY
83099: LIST
83100: LIST
83101: PUSH
83102: LD_INT 3
83104: PUSH
83105: LD_INT 2
83107: PUSH
83108: EMPTY
83109: LIST
83110: LIST
83111: PUSH
83112: LD_INT 3
83114: PUSH
83115: LD_INT 3
83117: PUSH
83118: EMPTY
83119: LIST
83120: LIST
83121: PUSH
83122: LD_INT 2
83124: PUSH
83125: LD_INT 3
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: PUSH
83132: LD_INT 1
83134: PUSH
83135: LD_INT 3
83137: PUSH
83138: EMPTY
83139: LIST
83140: LIST
83141: PUSH
83142: LD_INT 0
83144: PUSH
83145: LD_INT 3
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PUSH
83152: LD_INT 1
83154: NEG
83155: PUSH
83156: LD_INT 2
83158: PUSH
83159: EMPTY
83160: LIST
83161: LIST
83162: PUSH
83163: LD_INT 3
83165: NEG
83166: PUSH
83167: LD_INT 2
83169: NEG
83170: PUSH
83171: EMPTY
83172: LIST
83173: LIST
83174: PUSH
83175: LD_INT 3
83177: NEG
83178: PUSH
83179: LD_INT 3
83181: NEG
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: PUSH
83187: EMPTY
83188: LIST
83189: LIST
83190: LIST
83191: LIST
83192: LIST
83193: LIST
83194: LIST
83195: LIST
83196: LIST
83197: LIST
83198: LIST
83199: LIST
83200: LIST
83201: LIST
83202: LIST
83203: LIST
83204: LIST
83205: LIST
83206: LIST
83207: LIST
83208: LIST
83209: LIST
83210: LIST
83211: LIST
83212: LIST
83213: LIST
83214: LIST
83215: LIST
83216: LIST
83217: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83218: LD_ADDR_VAR 0 46
83222: PUSH
83223: LD_INT 0
83225: PUSH
83226: LD_INT 0
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: PUSH
83233: LD_INT 0
83235: PUSH
83236: LD_INT 1
83238: NEG
83239: PUSH
83240: EMPTY
83241: LIST
83242: LIST
83243: PUSH
83244: LD_INT 1
83246: PUSH
83247: LD_INT 0
83249: PUSH
83250: EMPTY
83251: LIST
83252: LIST
83253: PUSH
83254: LD_INT 1
83256: PUSH
83257: LD_INT 1
83259: PUSH
83260: EMPTY
83261: LIST
83262: LIST
83263: PUSH
83264: LD_INT 0
83266: PUSH
83267: LD_INT 1
83269: PUSH
83270: EMPTY
83271: LIST
83272: LIST
83273: PUSH
83274: LD_INT 1
83276: NEG
83277: PUSH
83278: LD_INT 0
83280: PUSH
83281: EMPTY
83282: LIST
83283: LIST
83284: PUSH
83285: LD_INT 1
83287: NEG
83288: PUSH
83289: LD_INT 1
83291: NEG
83292: PUSH
83293: EMPTY
83294: LIST
83295: LIST
83296: PUSH
83297: LD_INT 1
83299: NEG
83300: PUSH
83301: LD_INT 2
83303: NEG
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: PUSH
83309: LD_INT 0
83311: PUSH
83312: LD_INT 2
83314: NEG
83315: PUSH
83316: EMPTY
83317: LIST
83318: LIST
83319: PUSH
83320: LD_INT 1
83322: PUSH
83323: LD_INT 1
83325: NEG
83326: PUSH
83327: EMPTY
83328: LIST
83329: LIST
83330: PUSH
83331: LD_INT 2
83333: PUSH
83334: LD_INT 0
83336: PUSH
83337: EMPTY
83338: LIST
83339: LIST
83340: PUSH
83341: LD_INT 2
83343: PUSH
83344: LD_INT 1
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: PUSH
83351: LD_INT 1
83353: PUSH
83354: LD_INT 2
83356: PUSH
83357: EMPTY
83358: LIST
83359: LIST
83360: PUSH
83361: LD_INT 0
83363: PUSH
83364: LD_INT 2
83366: PUSH
83367: EMPTY
83368: LIST
83369: LIST
83370: PUSH
83371: LD_INT 1
83373: NEG
83374: PUSH
83375: LD_INT 1
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: LD_INT 2
83384: NEG
83385: PUSH
83386: LD_INT 0
83388: PUSH
83389: EMPTY
83390: LIST
83391: LIST
83392: PUSH
83393: LD_INT 2
83395: NEG
83396: PUSH
83397: LD_INT 1
83399: NEG
83400: PUSH
83401: EMPTY
83402: LIST
83403: LIST
83404: PUSH
83405: LD_INT 1
83407: NEG
83408: PUSH
83409: LD_INT 3
83411: NEG
83412: PUSH
83413: EMPTY
83414: LIST
83415: LIST
83416: PUSH
83417: LD_INT 0
83419: PUSH
83420: LD_INT 3
83422: NEG
83423: PUSH
83424: EMPTY
83425: LIST
83426: LIST
83427: PUSH
83428: LD_INT 1
83430: PUSH
83431: LD_INT 2
83433: NEG
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 2
83441: PUSH
83442: LD_INT 1
83444: NEG
83445: PUSH
83446: EMPTY
83447: LIST
83448: LIST
83449: PUSH
83450: LD_INT 3
83452: PUSH
83453: LD_INT 0
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 3
83462: PUSH
83463: LD_INT 1
83465: PUSH
83466: EMPTY
83467: LIST
83468: LIST
83469: PUSH
83470: LD_INT 1
83472: PUSH
83473: LD_INT 3
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: LD_INT 0
83482: PUSH
83483: LD_INT 3
83485: PUSH
83486: EMPTY
83487: LIST
83488: LIST
83489: PUSH
83490: LD_INT 1
83492: NEG
83493: PUSH
83494: LD_INT 2
83496: PUSH
83497: EMPTY
83498: LIST
83499: LIST
83500: PUSH
83501: LD_INT 2
83503: NEG
83504: PUSH
83505: LD_INT 1
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PUSH
83512: LD_INT 3
83514: NEG
83515: PUSH
83516: LD_INT 0
83518: PUSH
83519: EMPTY
83520: LIST
83521: LIST
83522: PUSH
83523: LD_INT 3
83525: NEG
83526: PUSH
83527: LD_INT 1
83529: NEG
83530: PUSH
83531: EMPTY
83532: LIST
83533: LIST
83534: PUSH
83535: EMPTY
83536: LIST
83537: LIST
83538: LIST
83539: LIST
83540: LIST
83541: LIST
83542: LIST
83543: LIST
83544: LIST
83545: LIST
83546: LIST
83547: LIST
83548: LIST
83549: LIST
83550: LIST
83551: LIST
83552: LIST
83553: LIST
83554: LIST
83555: LIST
83556: LIST
83557: LIST
83558: LIST
83559: LIST
83560: LIST
83561: LIST
83562: LIST
83563: LIST
83564: LIST
83565: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83566: LD_ADDR_VAR 0 47
83570: PUSH
83571: LD_INT 0
83573: PUSH
83574: LD_INT 0
83576: PUSH
83577: EMPTY
83578: LIST
83579: LIST
83580: PUSH
83581: LD_INT 0
83583: PUSH
83584: LD_INT 1
83586: NEG
83587: PUSH
83588: EMPTY
83589: LIST
83590: LIST
83591: PUSH
83592: LD_INT 1
83594: PUSH
83595: LD_INT 0
83597: PUSH
83598: EMPTY
83599: LIST
83600: LIST
83601: PUSH
83602: LD_INT 1
83604: PUSH
83605: LD_INT 1
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PUSH
83612: LD_INT 0
83614: PUSH
83615: LD_INT 1
83617: PUSH
83618: EMPTY
83619: LIST
83620: LIST
83621: PUSH
83622: LD_INT 1
83624: NEG
83625: PUSH
83626: LD_INT 0
83628: PUSH
83629: EMPTY
83630: LIST
83631: LIST
83632: PUSH
83633: LD_INT 1
83635: NEG
83636: PUSH
83637: LD_INT 1
83639: NEG
83640: PUSH
83641: EMPTY
83642: LIST
83643: LIST
83644: PUSH
83645: LD_INT 1
83647: NEG
83648: PUSH
83649: LD_INT 2
83651: NEG
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: PUSH
83657: LD_INT 0
83659: PUSH
83660: LD_INT 2
83662: NEG
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_INT 1
83670: PUSH
83671: LD_INT 1
83673: NEG
83674: PUSH
83675: EMPTY
83676: LIST
83677: LIST
83678: PUSH
83679: LD_INT 2
83681: NEG
83682: PUSH
83683: LD_INT 1
83685: NEG
83686: PUSH
83687: EMPTY
83688: LIST
83689: LIST
83690: PUSH
83691: LD_INT 2
83693: NEG
83694: PUSH
83695: LD_INT 2
83697: NEG
83698: PUSH
83699: EMPTY
83700: LIST
83701: LIST
83702: PUSH
83703: EMPTY
83704: LIST
83705: LIST
83706: LIST
83707: LIST
83708: LIST
83709: LIST
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: LIST
83715: LIST
83716: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83717: LD_ADDR_VAR 0 48
83721: PUSH
83722: LD_INT 0
83724: PUSH
83725: LD_INT 0
83727: PUSH
83728: EMPTY
83729: LIST
83730: LIST
83731: PUSH
83732: LD_INT 0
83734: PUSH
83735: LD_INT 1
83737: NEG
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: PUSH
83743: LD_INT 1
83745: PUSH
83746: LD_INT 0
83748: PUSH
83749: EMPTY
83750: LIST
83751: LIST
83752: PUSH
83753: LD_INT 1
83755: PUSH
83756: LD_INT 1
83758: PUSH
83759: EMPTY
83760: LIST
83761: LIST
83762: PUSH
83763: LD_INT 0
83765: PUSH
83766: LD_INT 1
83768: PUSH
83769: EMPTY
83770: LIST
83771: LIST
83772: PUSH
83773: LD_INT 1
83775: NEG
83776: PUSH
83777: LD_INT 0
83779: PUSH
83780: EMPTY
83781: LIST
83782: LIST
83783: PUSH
83784: LD_INT 1
83786: NEG
83787: PUSH
83788: LD_INT 1
83790: NEG
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 1
83798: NEG
83799: PUSH
83800: LD_INT 2
83802: NEG
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PUSH
83808: LD_INT 0
83810: PUSH
83811: LD_INT 2
83813: NEG
83814: PUSH
83815: EMPTY
83816: LIST
83817: LIST
83818: PUSH
83819: LD_INT 1
83821: PUSH
83822: LD_INT 1
83824: NEG
83825: PUSH
83826: EMPTY
83827: LIST
83828: LIST
83829: PUSH
83830: LD_INT 2
83832: PUSH
83833: LD_INT 0
83835: PUSH
83836: EMPTY
83837: LIST
83838: LIST
83839: PUSH
83840: LD_INT 2
83842: PUSH
83843: LD_INT 1
83845: PUSH
83846: EMPTY
83847: LIST
83848: LIST
83849: PUSH
83850: EMPTY
83851: LIST
83852: LIST
83853: LIST
83854: LIST
83855: LIST
83856: LIST
83857: LIST
83858: LIST
83859: LIST
83860: LIST
83861: LIST
83862: LIST
83863: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83864: LD_ADDR_VAR 0 49
83868: PUSH
83869: LD_INT 0
83871: PUSH
83872: LD_INT 0
83874: PUSH
83875: EMPTY
83876: LIST
83877: LIST
83878: PUSH
83879: LD_INT 0
83881: PUSH
83882: LD_INT 1
83884: NEG
83885: PUSH
83886: EMPTY
83887: LIST
83888: LIST
83889: PUSH
83890: LD_INT 1
83892: PUSH
83893: LD_INT 0
83895: PUSH
83896: EMPTY
83897: LIST
83898: LIST
83899: PUSH
83900: LD_INT 1
83902: PUSH
83903: LD_INT 1
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: PUSH
83910: LD_INT 0
83912: PUSH
83913: LD_INT 1
83915: PUSH
83916: EMPTY
83917: LIST
83918: LIST
83919: PUSH
83920: LD_INT 1
83922: NEG
83923: PUSH
83924: LD_INT 0
83926: PUSH
83927: EMPTY
83928: LIST
83929: LIST
83930: PUSH
83931: LD_INT 1
83933: NEG
83934: PUSH
83935: LD_INT 1
83937: NEG
83938: PUSH
83939: EMPTY
83940: LIST
83941: LIST
83942: PUSH
83943: LD_INT 1
83945: PUSH
83946: LD_INT 1
83948: NEG
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: PUSH
83954: LD_INT 2
83956: PUSH
83957: LD_INT 0
83959: PUSH
83960: EMPTY
83961: LIST
83962: LIST
83963: PUSH
83964: LD_INT 2
83966: PUSH
83967: LD_INT 1
83969: PUSH
83970: EMPTY
83971: LIST
83972: LIST
83973: PUSH
83974: LD_INT 2
83976: PUSH
83977: LD_INT 2
83979: PUSH
83980: EMPTY
83981: LIST
83982: LIST
83983: PUSH
83984: LD_INT 1
83986: PUSH
83987: LD_INT 2
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PUSH
83994: EMPTY
83995: LIST
83996: LIST
83997: LIST
83998: LIST
83999: LIST
84000: LIST
84001: LIST
84002: LIST
84003: LIST
84004: LIST
84005: LIST
84006: LIST
84007: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
84008: LD_ADDR_VAR 0 50
84012: PUSH
84013: LD_INT 0
84015: PUSH
84016: LD_INT 0
84018: PUSH
84019: EMPTY
84020: LIST
84021: LIST
84022: PUSH
84023: LD_INT 0
84025: PUSH
84026: LD_INT 1
84028: NEG
84029: PUSH
84030: EMPTY
84031: LIST
84032: LIST
84033: PUSH
84034: LD_INT 1
84036: PUSH
84037: LD_INT 0
84039: PUSH
84040: EMPTY
84041: LIST
84042: LIST
84043: PUSH
84044: LD_INT 1
84046: PUSH
84047: LD_INT 1
84049: PUSH
84050: EMPTY
84051: LIST
84052: LIST
84053: PUSH
84054: LD_INT 0
84056: PUSH
84057: LD_INT 1
84059: PUSH
84060: EMPTY
84061: LIST
84062: LIST
84063: PUSH
84064: LD_INT 1
84066: NEG
84067: PUSH
84068: LD_INT 0
84070: PUSH
84071: EMPTY
84072: LIST
84073: LIST
84074: PUSH
84075: LD_INT 1
84077: NEG
84078: PUSH
84079: LD_INT 1
84081: NEG
84082: PUSH
84083: EMPTY
84084: LIST
84085: LIST
84086: PUSH
84087: LD_INT 2
84089: PUSH
84090: LD_INT 1
84092: PUSH
84093: EMPTY
84094: LIST
84095: LIST
84096: PUSH
84097: LD_INT 2
84099: PUSH
84100: LD_INT 2
84102: PUSH
84103: EMPTY
84104: LIST
84105: LIST
84106: PUSH
84107: LD_INT 1
84109: PUSH
84110: LD_INT 2
84112: PUSH
84113: EMPTY
84114: LIST
84115: LIST
84116: PUSH
84117: LD_INT 0
84119: PUSH
84120: LD_INT 2
84122: PUSH
84123: EMPTY
84124: LIST
84125: LIST
84126: PUSH
84127: LD_INT 1
84129: NEG
84130: PUSH
84131: LD_INT 1
84133: PUSH
84134: EMPTY
84135: LIST
84136: LIST
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: LIST
84142: LIST
84143: LIST
84144: LIST
84145: LIST
84146: LIST
84147: LIST
84148: LIST
84149: LIST
84150: LIST
84151: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
84152: LD_ADDR_VAR 0 51
84156: PUSH
84157: LD_INT 0
84159: PUSH
84160: LD_INT 0
84162: PUSH
84163: EMPTY
84164: LIST
84165: LIST
84166: PUSH
84167: LD_INT 0
84169: PUSH
84170: LD_INT 1
84172: NEG
84173: PUSH
84174: EMPTY
84175: LIST
84176: LIST
84177: PUSH
84178: LD_INT 1
84180: PUSH
84181: LD_INT 0
84183: PUSH
84184: EMPTY
84185: LIST
84186: LIST
84187: PUSH
84188: LD_INT 1
84190: PUSH
84191: LD_INT 1
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: PUSH
84198: LD_INT 0
84200: PUSH
84201: LD_INT 1
84203: PUSH
84204: EMPTY
84205: LIST
84206: LIST
84207: PUSH
84208: LD_INT 1
84210: NEG
84211: PUSH
84212: LD_INT 0
84214: PUSH
84215: EMPTY
84216: LIST
84217: LIST
84218: PUSH
84219: LD_INT 1
84221: NEG
84222: PUSH
84223: LD_INT 1
84225: NEG
84226: PUSH
84227: EMPTY
84228: LIST
84229: LIST
84230: PUSH
84231: LD_INT 1
84233: PUSH
84234: LD_INT 2
84236: PUSH
84237: EMPTY
84238: LIST
84239: LIST
84240: PUSH
84241: LD_INT 0
84243: PUSH
84244: LD_INT 2
84246: PUSH
84247: EMPTY
84248: LIST
84249: LIST
84250: PUSH
84251: LD_INT 1
84253: NEG
84254: PUSH
84255: LD_INT 1
84257: PUSH
84258: EMPTY
84259: LIST
84260: LIST
84261: PUSH
84262: LD_INT 2
84264: NEG
84265: PUSH
84266: LD_INT 0
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: PUSH
84273: LD_INT 2
84275: NEG
84276: PUSH
84277: LD_INT 1
84279: NEG
84280: PUSH
84281: EMPTY
84282: LIST
84283: LIST
84284: PUSH
84285: EMPTY
84286: LIST
84287: LIST
84288: LIST
84289: LIST
84290: LIST
84291: LIST
84292: LIST
84293: LIST
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84299: LD_ADDR_VAR 0 52
84303: PUSH
84304: LD_INT 0
84306: PUSH
84307: LD_INT 0
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PUSH
84314: LD_INT 0
84316: PUSH
84317: LD_INT 1
84319: NEG
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PUSH
84325: LD_INT 1
84327: PUSH
84328: LD_INT 0
84330: PUSH
84331: EMPTY
84332: LIST
84333: LIST
84334: PUSH
84335: LD_INT 1
84337: PUSH
84338: LD_INT 1
84340: PUSH
84341: EMPTY
84342: LIST
84343: LIST
84344: PUSH
84345: LD_INT 0
84347: PUSH
84348: LD_INT 1
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: PUSH
84355: LD_INT 1
84357: NEG
84358: PUSH
84359: LD_INT 0
84361: PUSH
84362: EMPTY
84363: LIST
84364: LIST
84365: PUSH
84366: LD_INT 1
84368: NEG
84369: PUSH
84370: LD_INT 1
84372: NEG
84373: PUSH
84374: EMPTY
84375: LIST
84376: LIST
84377: PUSH
84378: LD_INT 1
84380: NEG
84381: PUSH
84382: LD_INT 2
84384: NEG
84385: PUSH
84386: EMPTY
84387: LIST
84388: LIST
84389: PUSH
84390: LD_INT 1
84392: NEG
84393: PUSH
84394: LD_INT 1
84396: PUSH
84397: EMPTY
84398: LIST
84399: LIST
84400: PUSH
84401: LD_INT 2
84403: NEG
84404: PUSH
84405: LD_INT 0
84407: PUSH
84408: EMPTY
84409: LIST
84410: LIST
84411: PUSH
84412: LD_INT 2
84414: NEG
84415: PUSH
84416: LD_INT 1
84418: NEG
84419: PUSH
84420: EMPTY
84421: LIST
84422: LIST
84423: PUSH
84424: LD_INT 2
84426: NEG
84427: PUSH
84428: LD_INT 2
84430: NEG
84431: PUSH
84432: EMPTY
84433: LIST
84434: LIST
84435: PUSH
84436: EMPTY
84437: LIST
84438: LIST
84439: LIST
84440: LIST
84441: LIST
84442: LIST
84443: LIST
84444: LIST
84445: LIST
84446: LIST
84447: LIST
84448: LIST
84449: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84450: LD_ADDR_VAR 0 53
84454: PUSH
84455: LD_INT 0
84457: PUSH
84458: LD_INT 0
84460: PUSH
84461: EMPTY
84462: LIST
84463: LIST
84464: PUSH
84465: LD_INT 0
84467: PUSH
84468: LD_INT 1
84470: NEG
84471: PUSH
84472: EMPTY
84473: LIST
84474: LIST
84475: PUSH
84476: LD_INT 1
84478: PUSH
84479: LD_INT 0
84481: PUSH
84482: EMPTY
84483: LIST
84484: LIST
84485: PUSH
84486: LD_INT 1
84488: PUSH
84489: LD_INT 1
84491: PUSH
84492: EMPTY
84493: LIST
84494: LIST
84495: PUSH
84496: LD_INT 0
84498: PUSH
84499: LD_INT 1
84501: PUSH
84502: EMPTY
84503: LIST
84504: LIST
84505: PUSH
84506: LD_INT 1
84508: NEG
84509: PUSH
84510: LD_INT 0
84512: PUSH
84513: EMPTY
84514: LIST
84515: LIST
84516: PUSH
84517: LD_INT 1
84519: NEG
84520: PUSH
84521: LD_INT 1
84523: NEG
84524: PUSH
84525: EMPTY
84526: LIST
84527: LIST
84528: PUSH
84529: LD_INT 1
84531: NEG
84532: PUSH
84533: LD_INT 2
84535: NEG
84536: PUSH
84537: EMPTY
84538: LIST
84539: LIST
84540: PUSH
84541: LD_INT 0
84543: PUSH
84544: LD_INT 2
84546: NEG
84547: PUSH
84548: EMPTY
84549: LIST
84550: LIST
84551: PUSH
84552: LD_INT 1
84554: PUSH
84555: LD_INT 1
84557: NEG
84558: PUSH
84559: EMPTY
84560: LIST
84561: LIST
84562: PUSH
84563: LD_INT 2
84565: PUSH
84566: LD_INT 0
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PUSH
84573: LD_INT 2
84575: PUSH
84576: LD_INT 1
84578: PUSH
84579: EMPTY
84580: LIST
84581: LIST
84582: PUSH
84583: LD_INT 2
84585: PUSH
84586: LD_INT 2
84588: PUSH
84589: EMPTY
84590: LIST
84591: LIST
84592: PUSH
84593: LD_INT 1
84595: PUSH
84596: LD_INT 2
84598: PUSH
84599: EMPTY
84600: LIST
84601: LIST
84602: PUSH
84603: LD_INT 0
84605: PUSH
84606: LD_INT 2
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: PUSH
84613: LD_INT 1
84615: NEG
84616: PUSH
84617: LD_INT 1
84619: PUSH
84620: EMPTY
84621: LIST
84622: LIST
84623: PUSH
84624: LD_INT 2
84626: NEG
84627: PUSH
84628: LD_INT 0
84630: PUSH
84631: EMPTY
84632: LIST
84633: LIST
84634: PUSH
84635: LD_INT 2
84637: NEG
84638: PUSH
84639: LD_INT 1
84641: NEG
84642: PUSH
84643: EMPTY
84644: LIST
84645: LIST
84646: PUSH
84647: LD_INT 2
84649: NEG
84650: PUSH
84651: LD_INT 2
84653: NEG
84654: PUSH
84655: EMPTY
84656: LIST
84657: LIST
84658: PUSH
84659: EMPTY
84660: LIST
84661: LIST
84662: LIST
84663: LIST
84664: LIST
84665: LIST
84666: LIST
84667: LIST
84668: LIST
84669: LIST
84670: LIST
84671: LIST
84672: LIST
84673: LIST
84674: LIST
84675: LIST
84676: LIST
84677: LIST
84678: LIST
84679: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84680: LD_ADDR_VAR 0 54
84684: PUSH
84685: LD_INT 0
84687: PUSH
84688: LD_INT 0
84690: PUSH
84691: EMPTY
84692: LIST
84693: LIST
84694: PUSH
84695: LD_INT 0
84697: PUSH
84698: LD_INT 1
84700: NEG
84701: PUSH
84702: EMPTY
84703: LIST
84704: LIST
84705: PUSH
84706: LD_INT 1
84708: PUSH
84709: LD_INT 0
84711: PUSH
84712: EMPTY
84713: LIST
84714: LIST
84715: PUSH
84716: LD_INT 1
84718: PUSH
84719: LD_INT 1
84721: PUSH
84722: EMPTY
84723: LIST
84724: LIST
84725: PUSH
84726: LD_INT 0
84728: PUSH
84729: LD_INT 1
84731: PUSH
84732: EMPTY
84733: LIST
84734: LIST
84735: PUSH
84736: LD_INT 1
84738: NEG
84739: PUSH
84740: LD_INT 0
84742: PUSH
84743: EMPTY
84744: LIST
84745: LIST
84746: PUSH
84747: LD_INT 1
84749: NEG
84750: PUSH
84751: LD_INT 1
84753: NEG
84754: PUSH
84755: EMPTY
84756: LIST
84757: LIST
84758: PUSH
84759: LD_INT 1
84761: NEG
84762: PUSH
84763: LD_INT 2
84765: NEG
84766: PUSH
84767: EMPTY
84768: LIST
84769: LIST
84770: PUSH
84771: LD_INT 0
84773: PUSH
84774: LD_INT 2
84776: NEG
84777: PUSH
84778: EMPTY
84779: LIST
84780: LIST
84781: PUSH
84782: LD_INT 1
84784: PUSH
84785: LD_INT 1
84787: NEG
84788: PUSH
84789: EMPTY
84790: LIST
84791: LIST
84792: PUSH
84793: LD_INT 2
84795: PUSH
84796: LD_INT 0
84798: PUSH
84799: EMPTY
84800: LIST
84801: LIST
84802: PUSH
84803: LD_INT 2
84805: PUSH
84806: LD_INT 1
84808: PUSH
84809: EMPTY
84810: LIST
84811: LIST
84812: PUSH
84813: LD_INT 2
84815: PUSH
84816: LD_INT 2
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: PUSH
84823: LD_INT 1
84825: PUSH
84826: LD_INT 2
84828: PUSH
84829: EMPTY
84830: LIST
84831: LIST
84832: PUSH
84833: LD_INT 0
84835: PUSH
84836: LD_INT 2
84838: PUSH
84839: EMPTY
84840: LIST
84841: LIST
84842: PUSH
84843: LD_INT 1
84845: NEG
84846: PUSH
84847: LD_INT 1
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: PUSH
84854: LD_INT 2
84856: NEG
84857: PUSH
84858: LD_INT 0
84860: PUSH
84861: EMPTY
84862: LIST
84863: LIST
84864: PUSH
84865: LD_INT 2
84867: NEG
84868: PUSH
84869: LD_INT 1
84871: NEG
84872: PUSH
84873: EMPTY
84874: LIST
84875: LIST
84876: PUSH
84877: LD_INT 2
84879: NEG
84880: PUSH
84881: LD_INT 2
84883: NEG
84884: PUSH
84885: EMPTY
84886: LIST
84887: LIST
84888: PUSH
84889: EMPTY
84890: LIST
84891: LIST
84892: LIST
84893: LIST
84894: LIST
84895: LIST
84896: LIST
84897: LIST
84898: LIST
84899: LIST
84900: LIST
84901: LIST
84902: LIST
84903: LIST
84904: LIST
84905: LIST
84906: LIST
84907: LIST
84908: LIST
84909: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84910: LD_ADDR_VAR 0 55
84914: PUSH
84915: LD_INT 0
84917: PUSH
84918: LD_INT 0
84920: PUSH
84921: EMPTY
84922: LIST
84923: LIST
84924: PUSH
84925: LD_INT 0
84927: PUSH
84928: LD_INT 1
84930: NEG
84931: PUSH
84932: EMPTY
84933: LIST
84934: LIST
84935: PUSH
84936: LD_INT 1
84938: PUSH
84939: LD_INT 0
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: PUSH
84946: LD_INT 1
84948: PUSH
84949: LD_INT 1
84951: PUSH
84952: EMPTY
84953: LIST
84954: LIST
84955: PUSH
84956: LD_INT 0
84958: PUSH
84959: LD_INT 1
84961: PUSH
84962: EMPTY
84963: LIST
84964: LIST
84965: PUSH
84966: LD_INT 1
84968: NEG
84969: PUSH
84970: LD_INT 0
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PUSH
84977: LD_INT 1
84979: NEG
84980: PUSH
84981: LD_INT 1
84983: NEG
84984: PUSH
84985: EMPTY
84986: LIST
84987: LIST
84988: PUSH
84989: LD_INT 1
84991: NEG
84992: PUSH
84993: LD_INT 2
84995: NEG
84996: PUSH
84997: EMPTY
84998: LIST
84999: LIST
85000: PUSH
85001: LD_INT 0
85003: PUSH
85004: LD_INT 2
85006: NEG
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 1
85014: PUSH
85015: LD_INT 1
85017: NEG
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: PUSH
85023: LD_INT 2
85025: PUSH
85026: LD_INT 0
85028: PUSH
85029: EMPTY
85030: LIST
85031: LIST
85032: PUSH
85033: LD_INT 2
85035: PUSH
85036: LD_INT 1
85038: PUSH
85039: EMPTY
85040: LIST
85041: LIST
85042: PUSH
85043: LD_INT 2
85045: PUSH
85046: LD_INT 2
85048: PUSH
85049: EMPTY
85050: LIST
85051: LIST
85052: PUSH
85053: LD_INT 1
85055: PUSH
85056: LD_INT 2
85058: PUSH
85059: EMPTY
85060: LIST
85061: LIST
85062: PUSH
85063: LD_INT 0
85065: PUSH
85066: LD_INT 2
85068: PUSH
85069: EMPTY
85070: LIST
85071: LIST
85072: PUSH
85073: LD_INT 1
85075: NEG
85076: PUSH
85077: LD_INT 1
85079: PUSH
85080: EMPTY
85081: LIST
85082: LIST
85083: PUSH
85084: LD_INT 2
85086: NEG
85087: PUSH
85088: LD_INT 0
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 2
85097: NEG
85098: PUSH
85099: LD_INT 1
85101: NEG
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 2
85109: NEG
85110: PUSH
85111: LD_INT 2
85113: NEG
85114: PUSH
85115: EMPTY
85116: LIST
85117: LIST
85118: PUSH
85119: EMPTY
85120: LIST
85121: LIST
85122: LIST
85123: LIST
85124: LIST
85125: LIST
85126: LIST
85127: LIST
85128: LIST
85129: LIST
85130: LIST
85131: LIST
85132: LIST
85133: LIST
85134: LIST
85135: LIST
85136: LIST
85137: LIST
85138: LIST
85139: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85140: LD_ADDR_VAR 0 56
85144: PUSH
85145: LD_INT 0
85147: PUSH
85148: LD_INT 0
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 0
85157: PUSH
85158: LD_INT 1
85160: NEG
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: PUSH
85166: LD_INT 1
85168: PUSH
85169: LD_INT 0
85171: PUSH
85172: EMPTY
85173: LIST
85174: LIST
85175: PUSH
85176: LD_INT 1
85178: PUSH
85179: LD_INT 1
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: PUSH
85186: LD_INT 0
85188: PUSH
85189: LD_INT 1
85191: PUSH
85192: EMPTY
85193: LIST
85194: LIST
85195: PUSH
85196: LD_INT 1
85198: NEG
85199: PUSH
85200: LD_INT 0
85202: PUSH
85203: EMPTY
85204: LIST
85205: LIST
85206: PUSH
85207: LD_INT 1
85209: NEG
85210: PUSH
85211: LD_INT 1
85213: NEG
85214: PUSH
85215: EMPTY
85216: LIST
85217: LIST
85218: PUSH
85219: LD_INT 1
85221: NEG
85222: PUSH
85223: LD_INT 2
85225: NEG
85226: PUSH
85227: EMPTY
85228: LIST
85229: LIST
85230: PUSH
85231: LD_INT 0
85233: PUSH
85234: LD_INT 2
85236: NEG
85237: PUSH
85238: EMPTY
85239: LIST
85240: LIST
85241: PUSH
85242: LD_INT 1
85244: PUSH
85245: LD_INT 1
85247: NEG
85248: PUSH
85249: EMPTY
85250: LIST
85251: LIST
85252: PUSH
85253: LD_INT 2
85255: PUSH
85256: LD_INT 0
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: PUSH
85263: LD_INT 2
85265: PUSH
85266: LD_INT 1
85268: PUSH
85269: EMPTY
85270: LIST
85271: LIST
85272: PUSH
85273: LD_INT 2
85275: PUSH
85276: LD_INT 2
85278: PUSH
85279: EMPTY
85280: LIST
85281: LIST
85282: PUSH
85283: LD_INT 1
85285: PUSH
85286: LD_INT 2
85288: PUSH
85289: EMPTY
85290: LIST
85291: LIST
85292: PUSH
85293: LD_INT 0
85295: PUSH
85296: LD_INT 2
85298: PUSH
85299: EMPTY
85300: LIST
85301: LIST
85302: PUSH
85303: LD_INT 1
85305: NEG
85306: PUSH
85307: LD_INT 1
85309: PUSH
85310: EMPTY
85311: LIST
85312: LIST
85313: PUSH
85314: LD_INT 2
85316: NEG
85317: PUSH
85318: LD_INT 0
85320: PUSH
85321: EMPTY
85322: LIST
85323: LIST
85324: PUSH
85325: LD_INT 2
85327: NEG
85328: PUSH
85329: LD_INT 1
85331: NEG
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: LD_INT 2
85339: NEG
85340: PUSH
85341: LD_INT 2
85343: NEG
85344: PUSH
85345: EMPTY
85346: LIST
85347: LIST
85348: PUSH
85349: EMPTY
85350: LIST
85351: LIST
85352: LIST
85353: LIST
85354: LIST
85355: LIST
85356: LIST
85357: LIST
85358: LIST
85359: LIST
85360: LIST
85361: LIST
85362: LIST
85363: LIST
85364: LIST
85365: LIST
85366: LIST
85367: LIST
85368: LIST
85369: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85370: LD_ADDR_VAR 0 57
85374: PUSH
85375: LD_INT 0
85377: PUSH
85378: LD_INT 0
85380: PUSH
85381: EMPTY
85382: LIST
85383: LIST
85384: PUSH
85385: LD_INT 0
85387: PUSH
85388: LD_INT 1
85390: NEG
85391: PUSH
85392: EMPTY
85393: LIST
85394: LIST
85395: PUSH
85396: LD_INT 1
85398: PUSH
85399: LD_INT 0
85401: PUSH
85402: EMPTY
85403: LIST
85404: LIST
85405: PUSH
85406: LD_INT 1
85408: PUSH
85409: LD_INT 1
85411: PUSH
85412: EMPTY
85413: LIST
85414: LIST
85415: PUSH
85416: LD_INT 0
85418: PUSH
85419: LD_INT 1
85421: PUSH
85422: EMPTY
85423: LIST
85424: LIST
85425: PUSH
85426: LD_INT 1
85428: NEG
85429: PUSH
85430: LD_INT 0
85432: PUSH
85433: EMPTY
85434: LIST
85435: LIST
85436: PUSH
85437: LD_INT 1
85439: NEG
85440: PUSH
85441: LD_INT 1
85443: NEG
85444: PUSH
85445: EMPTY
85446: LIST
85447: LIST
85448: PUSH
85449: LD_INT 1
85451: NEG
85452: PUSH
85453: LD_INT 2
85455: NEG
85456: PUSH
85457: EMPTY
85458: LIST
85459: LIST
85460: PUSH
85461: LD_INT 0
85463: PUSH
85464: LD_INT 2
85466: NEG
85467: PUSH
85468: EMPTY
85469: LIST
85470: LIST
85471: PUSH
85472: LD_INT 1
85474: PUSH
85475: LD_INT 1
85477: NEG
85478: PUSH
85479: EMPTY
85480: LIST
85481: LIST
85482: PUSH
85483: LD_INT 2
85485: PUSH
85486: LD_INT 0
85488: PUSH
85489: EMPTY
85490: LIST
85491: LIST
85492: PUSH
85493: LD_INT 2
85495: PUSH
85496: LD_INT 1
85498: PUSH
85499: EMPTY
85500: LIST
85501: LIST
85502: PUSH
85503: LD_INT 2
85505: PUSH
85506: LD_INT 2
85508: PUSH
85509: EMPTY
85510: LIST
85511: LIST
85512: PUSH
85513: LD_INT 1
85515: PUSH
85516: LD_INT 2
85518: PUSH
85519: EMPTY
85520: LIST
85521: LIST
85522: PUSH
85523: LD_INT 0
85525: PUSH
85526: LD_INT 2
85528: PUSH
85529: EMPTY
85530: LIST
85531: LIST
85532: PUSH
85533: LD_INT 1
85535: NEG
85536: PUSH
85537: LD_INT 1
85539: PUSH
85540: EMPTY
85541: LIST
85542: LIST
85543: PUSH
85544: LD_INT 2
85546: NEG
85547: PUSH
85548: LD_INT 0
85550: PUSH
85551: EMPTY
85552: LIST
85553: LIST
85554: PUSH
85555: LD_INT 2
85557: NEG
85558: PUSH
85559: LD_INT 1
85561: NEG
85562: PUSH
85563: EMPTY
85564: LIST
85565: LIST
85566: PUSH
85567: LD_INT 2
85569: NEG
85570: PUSH
85571: LD_INT 2
85573: NEG
85574: PUSH
85575: EMPTY
85576: LIST
85577: LIST
85578: PUSH
85579: EMPTY
85580: LIST
85581: LIST
85582: LIST
85583: LIST
85584: LIST
85585: LIST
85586: LIST
85587: LIST
85588: LIST
85589: LIST
85590: LIST
85591: LIST
85592: LIST
85593: LIST
85594: LIST
85595: LIST
85596: LIST
85597: LIST
85598: LIST
85599: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85600: LD_ADDR_VAR 0 58
85604: PUSH
85605: LD_INT 0
85607: PUSH
85608: LD_INT 0
85610: PUSH
85611: EMPTY
85612: LIST
85613: LIST
85614: PUSH
85615: LD_INT 0
85617: PUSH
85618: LD_INT 1
85620: NEG
85621: PUSH
85622: EMPTY
85623: LIST
85624: LIST
85625: PUSH
85626: LD_INT 1
85628: PUSH
85629: LD_INT 0
85631: PUSH
85632: EMPTY
85633: LIST
85634: LIST
85635: PUSH
85636: LD_INT 1
85638: PUSH
85639: LD_INT 1
85641: PUSH
85642: EMPTY
85643: LIST
85644: LIST
85645: PUSH
85646: LD_INT 0
85648: PUSH
85649: LD_INT 1
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: PUSH
85656: LD_INT 1
85658: NEG
85659: PUSH
85660: LD_INT 0
85662: PUSH
85663: EMPTY
85664: LIST
85665: LIST
85666: PUSH
85667: LD_INT 1
85669: NEG
85670: PUSH
85671: LD_INT 1
85673: NEG
85674: PUSH
85675: EMPTY
85676: LIST
85677: LIST
85678: PUSH
85679: LD_INT 1
85681: NEG
85682: PUSH
85683: LD_INT 2
85685: NEG
85686: PUSH
85687: EMPTY
85688: LIST
85689: LIST
85690: PUSH
85691: LD_INT 0
85693: PUSH
85694: LD_INT 2
85696: NEG
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: PUSH
85702: LD_INT 1
85704: PUSH
85705: LD_INT 1
85707: NEG
85708: PUSH
85709: EMPTY
85710: LIST
85711: LIST
85712: PUSH
85713: LD_INT 2
85715: PUSH
85716: LD_INT 0
85718: PUSH
85719: EMPTY
85720: LIST
85721: LIST
85722: PUSH
85723: LD_INT 2
85725: PUSH
85726: LD_INT 1
85728: PUSH
85729: EMPTY
85730: LIST
85731: LIST
85732: PUSH
85733: LD_INT 2
85735: PUSH
85736: LD_INT 2
85738: PUSH
85739: EMPTY
85740: LIST
85741: LIST
85742: PUSH
85743: LD_INT 1
85745: PUSH
85746: LD_INT 2
85748: PUSH
85749: EMPTY
85750: LIST
85751: LIST
85752: PUSH
85753: LD_INT 0
85755: PUSH
85756: LD_INT 2
85758: PUSH
85759: EMPTY
85760: LIST
85761: LIST
85762: PUSH
85763: LD_INT 1
85765: NEG
85766: PUSH
85767: LD_INT 1
85769: PUSH
85770: EMPTY
85771: LIST
85772: LIST
85773: PUSH
85774: LD_INT 2
85776: NEG
85777: PUSH
85778: LD_INT 0
85780: PUSH
85781: EMPTY
85782: LIST
85783: LIST
85784: PUSH
85785: LD_INT 2
85787: NEG
85788: PUSH
85789: LD_INT 1
85791: NEG
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: PUSH
85797: LD_INT 2
85799: NEG
85800: PUSH
85801: LD_INT 2
85803: NEG
85804: PUSH
85805: EMPTY
85806: LIST
85807: LIST
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: LIST
85815: LIST
85816: LIST
85817: LIST
85818: LIST
85819: LIST
85820: LIST
85821: LIST
85822: LIST
85823: LIST
85824: LIST
85825: LIST
85826: LIST
85827: LIST
85828: LIST
85829: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85830: LD_ADDR_VAR 0 59
85834: PUSH
85835: LD_INT 0
85837: PUSH
85838: LD_INT 0
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: PUSH
85845: LD_INT 0
85847: PUSH
85848: LD_INT 1
85850: NEG
85851: PUSH
85852: EMPTY
85853: LIST
85854: LIST
85855: PUSH
85856: LD_INT 1
85858: PUSH
85859: LD_INT 0
85861: PUSH
85862: EMPTY
85863: LIST
85864: LIST
85865: PUSH
85866: LD_INT 1
85868: PUSH
85869: LD_INT 1
85871: PUSH
85872: EMPTY
85873: LIST
85874: LIST
85875: PUSH
85876: LD_INT 0
85878: PUSH
85879: LD_INT 1
85881: PUSH
85882: EMPTY
85883: LIST
85884: LIST
85885: PUSH
85886: LD_INT 1
85888: NEG
85889: PUSH
85890: LD_INT 0
85892: PUSH
85893: EMPTY
85894: LIST
85895: LIST
85896: PUSH
85897: LD_INT 1
85899: NEG
85900: PUSH
85901: LD_INT 1
85903: NEG
85904: PUSH
85905: EMPTY
85906: LIST
85907: LIST
85908: PUSH
85909: EMPTY
85910: LIST
85911: LIST
85912: LIST
85913: LIST
85914: LIST
85915: LIST
85916: LIST
85917: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
85918: LD_ADDR_VAR 0 60
85922: PUSH
85923: LD_INT 0
85925: PUSH
85926: LD_INT 0
85928: PUSH
85929: EMPTY
85930: LIST
85931: LIST
85932: PUSH
85933: LD_INT 0
85935: PUSH
85936: LD_INT 1
85938: NEG
85939: PUSH
85940: EMPTY
85941: LIST
85942: LIST
85943: PUSH
85944: LD_INT 1
85946: PUSH
85947: LD_INT 0
85949: PUSH
85950: EMPTY
85951: LIST
85952: LIST
85953: PUSH
85954: LD_INT 1
85956: PUSH
85957: LD_INT 1
85959: PUSH
85960: EMPTY
85961: LIST
85962: LIST
85963: PUSH
85964: LD_INT 0
85966: PUSH
85967: LD_INT 1
85969: PUSH
85970: EMPTY
85971: LIST
85972: LIST
85973: PUSH
85974: LD_INT 1
85976: NEG
85977: PUSH
85978: LD_INT 0
85980: PUSH
85981: EMPTY
85982: LIST
85983: LIST
85984: PUSH
85985: LD_INT 1
85987: NEG
85988: PUSH
85989: LD_INT 1
85991: NEG
85992: PUSH
85993: EMPTY
85994: LIST
85995: LIST
85996: PUSH
85997: EMPTY
85998: LIST
85999: LIST
86000: LIST
86001: LIST
86002: LIST
86003: LIST
86004: LIST
86005: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
86006: LD_ADDR_VAR 0 61
86010: PUSH
86011: LD_INT 0
86013: PUSH
86014: LD_INT 0
86016: PUSH
86017: EMPTY
86018: LIST
86019: LIST
86020: PUSH
86021: LD_INT 0
86023: PUSH
86024: LD_INT 1
86026: NEG
86027: PUSH
86028: EMPTY
86029: LIST
86030: LIST
86031: PUSH
86032: LD_INT 1
86034: PUSH
86035: LD_INT 0
86037: PUSH
86038: EMPTY
86039: LIST
86040: LIST
86041: PUSH
86042: LD_INT 1
86044: PUSH
86045: LD_INT 1
86047: PUSH
86048: EMPTY
86049: LIST
86050: LIST
86051: PUSH
86052: LD_INT 0
86054: PUSH
86055: LD_INT 1
86057: PUSH
86058: EMPTY
86059: LIST
86060: LIST
86061: PUSH
86062: LD_INT 1
86064: NEG
86065: PUSH
86066: LD_INT 0
86068: PUSH
86069: EMPTY
86070: LIST
86071: LIST
86072: PUSH
86073: LD_INT 1
86075: NEG
86076: PUSH
86077: LD_INT 1
86079: NEG
86080: PUSH
86081: EMPTY
86082: LIST
86083: LIST
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: LIST
86089: LIST
86090: LIST
86091: LIST
86092: LIST
86093: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
86094: LD_ADDR_VAR 0 62
86098: PUSH
86099: LD_INT 0
86101: PUSH
86102: LD_INT 0
86104: PUSH
86105: EMPTY
86106: LIST
86107: LIST
86108: PUSH
86109: LD_INT 0
86111: PUSH
86112: LD_INT 1
86114: NEG
86115: PUSH
86116: EMPTY
86117: LIST
86118: LIST
86119: PUSH
86120: LD_INT 1
86122: PUSH
86123: LD_INT 0
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: PUSH
86130: LD_INT 1
86132: PUSH
86133: LD_INT 1
86135: PUSH
86136: EMPTY
86137: LIST
86138: LIST
86139: PUSH
86140: LD_INT 0
86142: PUSH
86143: LD_INT 1
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: PUSH
86150: LD_INT 1
86152: NEG
86153: PUSH
86154: LD_INT 0
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 1
86163: NEG
86164: PUSH
86165: LD_INT 1
86167: NEG
86168: PUSH
86169: EMPTY
86170: LIST
86171: LIST
86172: PUSH
86173: EMPTY
86174: LIST
86175: LIST
86176: LIST
86177: LIST
86178: LIST
86179: LIST
86180: LIST
86181: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
86182: LD_ADDR_VAR 0 63
86186: PUSH
86187: LD_INT 0
86189: PUSH
86190: LD_INT 0
86192: PUSH
86193: EMPTY
86194: LIST
86195: LIST
86196: PUSH
86197: LD_INT 0
86199: PUSH
86200: LD_INT 1
86202: NEG
86203: PUSH
86204: EMPTY
86205: LIST
86206: LIST
86207: PUSH
86208: LD_INT 1
86210: PUSH
86211: LD_INT 0
86213: PUSH
86214: EMPTY
86215: LIST
86216: LIST
86217: PUSH
86218: LD_INT 1
86220: PUSH
86221: LD_INT 1
86223: PUSH
86224: EMPTY
86225: LIST
86226: LIST
86227: PUSH
86228: LD_INT 0
86230: PUSH
86231: LD_INT 1
86233: PUSH
86234: EMPTY
86235: LIST
86236: LIST
86237: PUSH
86238: LD_INT 1
86240: NEG
86241: PUSH
86242: LD_INT 0
86244: PUSH
86245: EMPTY
86246: LIST
86247: LIST
86248: PUSH
86249: LD_INT 1
86251: NEG
86252: PUSH
86253: LD_INT 1
86255: NEG
86256: PUSH
86257: EMPTY
86258: LIST
86259: LIST
86260: PUSH
86261: EMPTY
86262: LIST
86263: LIST
86264: LIST
86265: LIST
86266: LIST
86267: LIST
86268: LIST
86269: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
86270: LD_ADDR_VAR 0 64
86274: PUSH
86275: LD_INT 0
86277: PUSH
86278: LD_INT 0
86280: PUSH
86281: EMPTY
86282: LIST
86283: LIST
86284: PUSH
86285: LD_INT 0
86287: PUSH
86288: LD_INT 1
86290: NEG
86291: PUSH
86292: EMPTY
86293: LIST
86294: LIST
86295: PUSH
86296: LD_INT 1
86298: PUSH
86299: LD_INT 0
86301: PUSH
86302: EMPTY
86303: LIST
86304: LIST
86305: PUSH
86306: LD_INT 1
86308: PUSH
86309: LD_INT 1
86311: PUSH
86312: EMPTY
86313: LIST
86314: LIST
86315: PUSH
86316: LD_INT 0
86318: PUSH
86319: LD_INT 1
86321: PUSH
86322: EMPTY
86323: LIST
86324: LIST
86325: PUSH
86326: LD_INT 1
86328: NEG
86329: PUSH
86330: LD_INT 0
86332: PUSH
86333: EMPTY
86334: LIST
86335: LIST
86336: PUSH
86337: LD_INT 1
86339: NEG
86340: PUSH
86341: LD_INT 1
86343: NEG
86344: PUSH
86345: EMPTY
86346: LIST
86347: LIST
86348: PUSH
86349: EMPTY
86350: LIST
86351: LIST
86352: LIST
86353: LIST
86354: LIST
86355: LIST
86356: LIST
86357: ST_TO_ADDR
// end ; 1 :
86358: GO 92255
86360: LD_INT 1
86362: DOUBLE
86363: EQUAL
86364: IFTRUE 86368
86366: GO 88991
86368: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
86369: LD_ADDR_VAR 0 11
86373: PUSH
86374: LD_INT 1
86376: NEG
86377: PUSH
86378: LD_INT 3
86380: NEG
86381: PUSH
86382: EMPTY
86383: LIST
86384: LIST
86385: PUSH
86386: LD_INT 0
86388: PUSH
86389: LD_INT 3
86391: NEG
86392: PUSH
86393: EMPTY
86394: LIST
86395: LIST
86396: PUSH
86397: LD_INT 1
86399: PUSH
86400: LD_INT 2
86402: NEG
86403: PUSH
86404: EMPTY
86405: LIST
86406: LIST
86407: PUSH
86408: EMPTY
86409: LIST
86410: LIST
86411: LIST
86412: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
86413: LD_ADDR_VAR 0 12
86417: PUSH
86418: LD_INT 2
86420: PUSH
86421: LD_INT 1
86423: NEG
86424: PUSH
86425: EMPTY
86426: LIST
86427: LIST
86428: PUSH
86429: LD_INT 3
86431: PUSH
86432: LD_INT 0
86434: PUSH
86435: EMPTY
86436: LIST
86437: LIST
86438: PUSH
86439: LD_INT 3
86441: PUSH
86442: LD_INT 1
86444: PUSH
86445: EMPTY
86446: LIST
86447: LIST
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: LIST
86453: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
86454: LD_ADDR_VAR 0 13
86458: PUSH
86459: LD_INT 3
86461: PUSH
86462: LD_INT 2
86464: PUSH
86465: EMPTY
86466: LIST
86467: LIST
86468: PUSH
86469: LD_INT 3
86471: PUSH
86472: LD_INT 3
86474: PUSH
86475: EMPTY
86476: LIST
86477: LIST
86478: PUSH
86479: LD_INT 2
86481: PUSH
86482: LD_INT 3
86484: PUSH
86485: EMPTY
86486: LIST
86487: LIST
86488: PUSH
86489: EMPTY
86490: LIST
86491: LIST
86492: LIST
86493: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
86494: LD_ADDR_VAR 0 14
86498: PUSH
86499: LD_INT 1
86501: PUSH
86502: LD_INT 3
86504: PUSH
86505: EMPTY
86506: LIST
86507: LIST
86508: PUSH
86509: LD_INT 0
86511: PUSH
86512: LD_INT 3
86514: PUSH
86515: EMPTY
86516: LIST
86517: LIST
86518: PUSH
86519: LD_INT 1
86521: NEG
86522: PUSH
86523: LD_INT 2
86525: PUSH
86526: EMPTY
86527: LIST
86528: LIST
86529: PUSH
86530: EMPTY
86531: LIST
86532: LIST
86533: LIST
86534: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
86535: LD_ADDR_VAR 0 15
86539: PUSH
86540: LD_INT 2
86542: NEG
86543: PUSH
86544: LD_INT 1
86546: PUSH
86547: EMPTY
86548: LIST
86549: LIST
86550: PUSH
86551: LD_INT 3
86553: NEG
86554: PUSH
86555: LD_INT 0
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: PUSH
86562: LD_INT 3
86564: NEG
86565: PUSH
86566: LD_INT 1
86568: NEG
86569: PUSH
86570: EMPTY
86571: LIST
86572: LIST
86573: PUSH
86574: EMPTY
86575: LIST
86576: LIST
86577: LIST
86578: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
86579: LD_ADDR_VAR 0 16
86583: PUSH
86584: LD_INT 2
86586: NEG
86587: PUSH
86588: LD_INT 3
86590: NEG
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: PUSH
86596: LD_INT 3
86598: NEG
86599: PUSH
86600: LD_INT 2
86602: NEG
86603: PUSH
86604: EMPTY
86605: LIST
86606: LIST
86607: PUSH
86608: LD_INT 3
86610: NEG
86611: PUSH
86612: LD_INT 3
86614: NEG
86615: PUSH
86616: EMPTY
86617: LIST
86618: LIST
86619: PUSH
86620: EMPTY
86621: LIST
86622: LIST
86623: LIST
86624: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
86625: LD_ADDR_VAR 0 17
86629: PUSH
86630: LD_INT 1
86632: NEG
86633: PUSH
86634: LD_INT 3
86636: NEG
86637: PUSH
86638: EMPTY
86639: LIST
86640: LIST
86641: PUSH
86642: LD_INT 0
86644: PUSH
86645: LD_INT 3
86647: NEG
86648: PUSH
86649: EMPTY
86650: LIST
86651: LIST
86652: PUSH
86653: LD_INT 1
86655: PUSH
86656: LD_INT 2
86658: NEG
86659: PUSH
86660: EMPTY
86661: LIST
86662: LIST
86663: PUSH
86664: EMPTY
86665: LIST
86666: LIST
86667: LIST
86668: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
86669: LD_ADDR_VAR 0 18
86673: PUSH
86674: LD_INT 2
86676: PUSH
86677: LD_INT 1
86679: NEG
86680: PUSH
86681: EMPTY
86682: LIST
86683: LIST
86684: PUSH
86685: LD_INT 3
86687: PUSH
86688: LD_INT 0
86690: PUSH
86691: EMPTY
86692: LIST
86693: LIST
86694: PUSH
86695: LD_INT 3
86697: PUSH
86698: LD_INT 1
86700: PUSH
86701: EMPTY
86702: LIST
86703: LIST
86704: PUSH
86705: EMPTY
86706: LIST
86707: LIST
86708: LIST
86709: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
86710: LD_ADDR_VAR 0 19
86714: PUSH
86715: LD_INT 3
86717: PUSH
86718: LD_INT 2
86720: PUSH
86721: EMPTY
86722: LIST
86723: LIST
86724: PUSH
86725: LD_INT 3
86727: PUSH
86728: LD_INT 3
86730: PUSH
86731: EMPTY
86732: LIST
86733: LIST
86734: PUSH
86735: LD_INT 2
86737: PUSH
86738: LD_INT 3
86740: PUSH
86741: EMPTY
86742: LIST
86743: LIST
86744: PUSH
86745: EMPTY
86746: LIST
86747: LIST
86748: LIST
86749: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
86750: LD_ADDR_VAR 0 20
86754: PUSH
86755: LD_INT 1
86757: PUSH
86758: LD_INT 3
86760: PUSH
86761: EMPTY
86762: LIST
86763: LIST
86764: PUSH
86765: LD_INT 0
86767: PUSH
86768: LD_INT 3
86770: PUSH
86771: EMPTY
86772: LIST
86773: LIST
86774: PUSH
86775: LD_INT 1
86777: NEG
86778: PUSH
86779: LD_INT 2
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: PUSH
86786: EMPTY
86787: LIST
86788: LIST
86789: LIST
86790: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
86791: LD_ADDR_VAR 0 21
86795: PUSH
86796: LD_INT 2
86798: NEG
86799: PUSH
86800: LD_INT 1
86802: PUSH
86803: EMPTY
86804: LIST
86805: LIST
86806: PUSH
86807: LD_INT 3
86809: NEG
86810: PUSH
86811: LD_INT 0
86813: PUSH
86814: EMPTY
86815: LIST
86816: LIST
86817: PUSH
86818: LD_INT 3
86820: NEG
86821: PUSH
86822: LD_INT 1
86824: NEG
86825: PUSH
86826: EMPTY
86827: LIST
86828: LIST
86829: PUSH
86830: EMPTY
86831: LIST
86832: LIST
86833: LIST
86834: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
86835: LD_ADDR_VAR 0 22
86839: PUSH
86840: LD_INT 2
86842: NEG
86843: PUSH
86844: LD_INT 3
86846: NEG
86847: PUSH
86848: EMPTY
86849: LIST
86850: LIST
86851: PUSH
86852: LD_INT 3
86854: NEG
86855: PUSH
86856: LD_INT 2
86858: NEG
86859: PUSH
86860: EMPTY
86861: LIST
86862: LIST
86863: PUSH
86864: LD_INT 3
86866: NEG
86867: PUSH
86868: LD_INT 3
86870: NEG
86871: PUSH
86872: EMPTY
86873: LIST
86874: LIST
86875: PUSH
86876: EMPTY
86877: LIST
86878: LIST
86879: LIST
86880: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
86881: LD_ADDR_VAR 0 23
86885: PUSH
86886: LD_INT 0
86888: PUSH
86889: LD_INT 3
86891: NEG
86892: PUSH
86893: EMPTY
86894: LIST
86895: LIST
86896: PUSH
86897: LD_INT 1
86899: NEG
86900: PUSH
86901: LD_INT 4
86903: NEG
86904: PUSH
86905: EMPTY
86906: LIST
86907: LIST
86908: PUSH
86909: LD_INT 1
86911: PUSH
86912: LD_INT 3
86914: NEG
86915: PUSH
86916: EMPTY
86917: LIST
86918: LIST
86919: PUSH
86920: EMPTY
86921: LIST
86922: LIST
86923: LIST
86924: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
86925: LD_ADDR_VAR 0 24
86929: PUSH
86930: LD_INT 3
86932: PUSH
86933: LD_INT 0
86935: PUSH
86936: EMPTY
86937: LIST
86938: LIST
86939: PUSH
86940: LD_INT 3
86942: PUSH
86943: LD_INT 1
86945: NEG
86946: PUSH
86947: EMPTY
86948: LIST
86949: LIST
86950: PUSH
86951: LD_INT 4
86953: PUSH
86954: LD_INT 1
86956: PUSH
86957: EMPTY
86958: LIST
86959: LIST
86960: PUSH
86961: EMPTY
86962: LIST
86963: LIST
86964: LIST
86965: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
86966: LD_ADDR_VAR 0 25
86970: PUSH
86971: LD_INT 3
86973: PUSH
86974: LD_INT 3
86976: PUSH
86977: EMPTY
86978: LIST
86979: LIST
86980: PUSH
86981: LD_INT 4
86983: PUSH
86984: LD_INT 3
86986: PUSH
86987: EMPTY
86988: LIST
86989: LIST
86990: PUSH
86991: LD_INT 3
86993: PUSH
86994: LD_INT 4
86996: PUSH
86997: EMPTY
86998: LIST
86999: LIST
87000: PUSH
87001: EMPTY
87002: LIST
87003: LIST
87004: LIST
87005: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
87006: LD_ADDR_VAR 0 26
87010: PUSH
87011: LD_INT 0
87013: PUSH
87014: LD_INT 3
87016: PUSH
87017: EMPTY
87018: LIST
87019: LIST
87020: PUSH
87021: LD_INT 1
87023: PUSH
87024: LD_INT 4
87026: PUSH
87027: EMPTY
87028: LIST
87029: LIST
87030: PUSH
87031: LD_INT 1
87033: NEG
87034: PUSH
87035: LD_INT 3
87037: PUSH
87038: EMPTY
87039: LIST
87040: LIST
87041: PUSH
87042: EMPTY
87043: LIST
87044: LIST
87045: LIST
87046: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
87047: LD_ADDR_VAR 0 27
87051: PUSH
87052: LD_INT 3
87054: NEG
87055: PUSH
87056: LD_INT 0
87058: PUSH
87059: EMPTY
87060: LIST
87061: LIST
87062: PUSH
87063: LD_INT 3
87065: NEG
87066: PUSH
87067: LD_INT 1
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: PUSH
87074: LD_INT 4
87076: NEG
87077: PUSH
87078: LD_INT 1
87080: NEG
87081: PUSH
87082: EMPTY
87083: LIST
87084: LIST
87085: PUSH
87086: EMPTY
87087: LIST
87088: LIST
87089: LIST
87090: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
87091: LD_ADDR_VAR 0 28
87095: PUSH
87096: LD_INT 3
87098: NEG
87099: PUSH
87100: LD_INT 3
87102: NEG
87103: PUSH
87104: EMPTY
87105: LIST
87106: LIST
87107: PUSH
87108: LD_INT 3
87110: NEG
87111: PUSH
87112: LD_INT 4
87114: NEG
87115: PUSH
87116: EMPTY
87117: LIST
87118: LIST
87119: PUSH
87120: LD_INT 4
87122: NEG
87123: PUSH
87124: LD_INT 3
87126: NEG
87127: PUSH
87128: EMPTY
87129: LIST
87130: LIST
87131: PUSH
87132: EMPTY
87133: LIST
87134: LIST
87135: LIST
87136: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
87137: LD_ADDR_VAR 0 29
87141: PUSH
87142: LD_INT 1
87144: NEG
87145: PUSH
87146: LD_INT 3
87148: NEG
87149: PUSH
87150: EMPTY
87151: LIST
87152: LIST
87153: PUSH
87154: LD_INT 0
87156: PUSH
87157: LD_INT 3
87159: NEG
87160: PUSH
87161: EMPTY
87162: LIST
87163: LIST
87164: PUSH
87165: LD_INT 1
87167: PUSH
87168: LD_INT 2
87170: NEG
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: PUSH
87176: LD_INT 1
87178: NEG
87179: PUSH
87180: LD_INT 4
87182: NEG
87183: PUSH
87184: EMPTY
87185: LIST
87186: LIST
87187: PUSH
87188: LD_INT 0
87190: PUSH
87191: LD_INT 4
87193: NEG
87194: PUSH
87195: EMPTY
87196: LIST
87197: LIST
87198: PUSH
87199: LD_INT 1
87201: PUSH
87202: LD_INT 3
87204: NEG
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: PUSH
87210: LD_INT 1
87212: NEG
87213: PUSH
87214: LD_INT 5
87216: NEG
87217: PUSH
87218: EMPTY
87219: LIST
87220: LIST
87221: PUSH
87222: LD_INT 0
87224: PUSH
87225: LD_INT 5
87227: NEG
87228: PUSH
87229: EMPTY
87230: LIST
87231: LIST
87232: PUSH
87233: LD_INT 1
87235: PUSH
87236: LD_INT 4
87238: NEG
87239: PUSH
87240: EMPTY
87241: LIST
87242: LIST
87243: PUSH
87244: LD_INT 1
87246: NEG
87247: PUSH
87248: LD_INT 6
87250: NEG
87251: PUSH
87252: EMPTY
87253: LIST
87254: LIST
87255: PUSH
87256: LD_INT 0
87258: PUSH
87259: LD_INT 6
87261: NEG
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: PUSH
87267: LD_INT 1
87269: PUSH
87270: LD_INT 5
87272: NEG
87273: PUSH
87274: EMPTY
87275: LIST
87276: LIST
87277: PUSH
87278: EMPTY
87279: LIST
87280: LIST
87281: LIST
87282: LIST
87283: LIST
87284: LIST
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
87292: LD_ADDR_VAR 0 30
87296: PUSH
87297: LD_INT 2
87299: PUSH
87300: LD_INT 1
87302: NEG
87303: PUSH
87304: EMPTY
87305: LIST
87306: LIST
87307: PUSH
87308: LD_INT 3
87310: PUSH
87311: LD_INT 0
87313: PUSH
87314: EMPTY
87315: LIST
87316: LIST
87317: PUSH
87318: LD_INT 3
87320: PUSH
87321: LD_INT 1
87323: PUSH
87324: EMPTY
87325: LIST
87326: LIST
87327: PUSH
87328: LD_INT 3
87330: PUSH
87331: LD_INT 1
87333: NEG
87334: PUSH
87335: EMPTY
87336: LIST
87337: LIST
87338: PUSH
87339: LD_INT 4
87341: PUSH
87342: LD_INT 0
87344: PUSH
87345: EMPTY
87346: LIST
87347: LIST
87348: PUSH
87349: LD_INT 4
87351: PUSH
87352: LD_INT 1
87354: PUSH
87355: EMPTY
87356: LIST
87357: LIST
87358: PUSH
87359: LD_INT 4
87361: PUSH
87362: LD_INT 1
87364: NEG
87365: PUSH
87366: EMPTY
87367: LIST
87368: LIST
87369: PUSH
87370: LD_INT 5
87372: PUSH
87373: LD_INT 0
87375: PUSH
87376: EMPTY
87377: LIST
87378: LIST
87379: PUSH
87380: LD_INT 5
87382: PUSH
87383: LD_INT 1
87385: PUSH
87386: EMPTY
87387: LIST
87388: LIST
87389: PUSH
87390: LD_INT 5
87392: PUSH
87393: LD_INT 1
87395: NEG
87396: PUSH
87397: EMPTY
87398: LIST
87399: LIST
87400: PUSH
87401: LD_INT 6
87403: PUSH
87404: LD_INT 0
87406: PUSH
87407: EMPTY
87408: LIST
87409: LIST
87410: PUSH
87411: LD_INT 6
87413: PUSH
87414: LD_INT 1
87416: PUSH
87417: EMPTY
87418: LIST
87419: LIST
87420: PUSH
87421: EMPTY
87422: LIST
87423: LIST
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: LIST
87431: LIST
87432: LIST
87433: LIST
87434: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
87435: LD_ADDR_VAR 0 31
87439: PUSH
87440: LD_INT 3
87442: PUSH
87443: LD_INT 2
87445: PUSH
87446: EMPTY
87447: LIST
87448: LIST
87449: PUSH
87450: LD_INT 3
87452: PUSH
87453: LD_INT 3
87455: PUSH
87456: EMPTY
87457: LIST
87458: LIST
87459: PUSH
87460: LD_INT 2
87462: PUSH
87463: LD_INT 3
87465: PUSH
87466: EMPTY
87467: LIST
87468: LIST
87469: PUSH
87470: LD_INT 4
87472: PUSH
87473: LD_INT 3
87475: PUSH
87476: EMPTY
87477: LIST
87478: LIST
87479: PUSH
87480: LD_INT 4
87482: PUSH
87483: LD_INT 4
87485: PUSH
87486: EMPTY
87487: LIST
87488: LIST
87489: PUSH
87490: LD_INT 3
87492: PUSH
87493: LD_INT 4
87495: PUSH
87496: EMPTY
87497: LIST
87498: LIST
87499: PUSH
87500: LD_INT 5
87502: PUSH
87503: LD_INT 4
87505: PUSH
87506: EMPTY
87507: LIST
87508: LIST
87509: PUSH
87510: LD_INT 5
87512: PUSH
87513: LD_INT 5
87515: PUSH
87516: EMPTY
87517: LIST
87518: LIST
87519: PUSH
87520: LD_INT 4
87522: PUSH
87523: LD_INT 5
87525: PUSH
87526: EMPTY
87527: LIST
87528: LIST
87529: PUSH
87530: LD_INT 6
87532: PUSH
87533: LD_INT 5
87535: PUSH
87536: EMPTY
87537: LIST
87538: LIST
87539: PUSH
87540: LD_INT 6
87542: PUSH
87543: LD_INT 6
87545: PUSH
87546: EMPTY
87547: LIST
87548: LIST
87549: PUSH
87550: LD_INT 5
87552: PUSH
87553: LD_INT 6
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: PUSH
87560: EMPTY
87561: LIST
87562: LIST
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: LIST
87570: LIST
87571: LIST
87572: LIST
87573: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
87574: LD_ADDR_VAR 0 32
87578: PUSH
87579: LD_INT 1
87581: PUSH
87582: LD_INT 3
87584: PUSH
87585: EMPTY
87586: LIST
87587: LIST
87588: PUSH
87589: LD_INT 0
87591: PUSH
87592: LD_INT 3
87594: PUSH
87595: EMPTY
87596: LIST
87597: LIST
87598: PUSH
87599: LD_INT 1
87601: NEG
87602: PUSH
87603: LD_INT 2
87605: PUSH
87606: EMPTY
87607: LIST
87608: LIST
87609: PUSH
87610: LD_INT 1
87612: PUSH
87613: LD_INT 4
87615: PUSH
87616: EMPTY
87617: LIST
87618: LIST
87619: PUSH
87620: LD_INT 0
87622: PUSH
87623: LD_INT 4
87625: PUSH
87626: EMPTY
87627: LIST
87628: LIST
87629: PUSH
87630: LD_INT 1
87632: NEG
87633: PUSH
87634: LD_INT 3
87636: PUSH
87637: EMPTY
87638: LIST
87639: LIST
87640: PUSH
87641: LD_INT 1
87643: PUSH
87644: LD_INT 5
87646: PUSH
87647: EMPTY
87648: LIST
87649: LIST
87650: PUSH
87651: LD_INT 0
87653: PUSH
87654: LD_INT 5
87656: PUSH
87657: EMPTY
87658: LIST
87659: LIST
87660: PUSH
87661: LD_INT 1
87663: NEG
87664: PUSH
87665: LD_INT 4
87667: PUSH
87668: EMPTY
87669: LIST
87670: LIST
87671: PUSH
87672: LD_INT 1
87674: PUSH
87675: LD_INT 6
87677: PUSH
87678: EMPTY
87679: LIST
87680: LIST
87681: PUSH
87682: LD_INT 0
87684: PUSH
87685: LD_INT 6
87687: PUSH
87688: EMPTY
87689: LIST
87690: LIST
87691: PUSH
87692: LD_INT 1
87694: NEG
87695: PUSH
87696: LD_INT 5
87698: PUSH
87699: EMPTY
87700: LIST
87701: LIST
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: LIST
87707: LIST
87708: LIST
87709: LIST
87710: LIST
87711: LIST
87712: LIST
87713: LIST
87714: LIST
87715: LIST
87716: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
87717: LD_ADDR_VAR 0 33
87721: PUSH
87722: LD_INT 2
87724: NEG
87725: PUSH
87726: LD_INT 1
87728: PUSH
87729: EMPTY
87730: LIST
87731: LIST
87732: PUSH
87733: LD_INT 3
87735: NEG
87736: PUSH
87737: LD_INT 0
87739: PUSH
87740: EMPTY
87741: LIST
87742: LIST
87743: PUSH
87744: LD_INT 3
87746: NEG
87747: PUSH
87748: LD_INT 1
87750: NEG
87751: PUSH
87752: EMPTY
87753: LIST
87754: LIST
87755: PUSH
87756: LD_INT 3
87758: NEG
87759: PUSH
87760: LD_INT 1
87762: PUSH
87763: EMPTY
87764: LIST
87765: LIST
87766: PUSH
87767: LD_INT 4
87769: NEG
87770: PUSH
87771: LD_INT 0
87773: PUSH
87774: EMPTY
87775: LIST
87776: LIST
87777: PUSH
87778: LD_INT 4
87780: NEG
87781: PUSH
87782: LD_INT 1
87784: NEG
87785: PUSH
87786: EMPTY
87787: LIST
87788: LIST
87789: PUSH
87790: LD_INT 4
87792: NEG
87793: PUSH
87794: LD_INT 1
87796: PUSH
87797: EMPTY
87798: LIST
87799: LIST
87800: PUSH
87801: LD_INT 5
87803: NEG
87804: PUSH
87805: LD_INT 0
87807: PUSH
87808: EMPTY
87809: LIST
87810: LIST
87811: PUSH
87812: LD_INT 5
87814: NEG
87815: PUSH
87816: LD_INT 1
87818: NEG
87819: PUSH
87820: EMPTY
87821: LIST
87822: LIST
87823: PUSH
87824: LD_INT 5
87826: NEG
87827: PUSH
87828: LD_INT 1
87830: PUSH
87831: EMPTY
87832: LIST
87833: LIST
87834: PUSH
87835: LD_INT 6
87837: NEG
87838: PUSH
87839: LD_INT 0
87841: PUSH
87842: EMPTY
87843: LIST
87844: LIST
87845: PUSH
87846: LD_INT 6
87848: NEG
87849: PUSH
87850: LD_INT 1
87852: NEG
87853: PUSH
87854: EMPTY
87855: LIST
87856: LIST
87857: PUSH
87858: EMPTY
87859: LIST
87860: LIST
87861: LIST
87862: LIST
87863: LIST
87864: LIST
87865: LIST
87866: LIST
87867: LIST
87868: LIST
87869: LIST
87870: LIST
87871: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
87872: LD_ADDR_VAR 0 34
87876: PUSH
87877: LD_INT 2
87879: NEG
87880: PUSH
87881: LD_INT 3
87883: NEG
87884: PUSH
87885: EMPTY
87886: LIST
87887: LIST
87888: PUSH
87889: LD_INT 3
87891: NEG
87892: PUSH
87893: LD_INT 2
87895: NEG
87896: PUSH
87897: EMPTY
87898: LIST
87899: LIST
87900: PUSH
87901: LD_INT 3
87903: NEG
87904: PUSH
87905: LD_INT 3
87907: NEG
87908: PUSH
87909: EMPTY
87910: LIST
87911: LIST
87912: PUSH
87913: LD_INT 3
87915: NEG
87916: PUSH
87917: LD_INT 4
87919: NEG
87920: PUSH
87921: EMPTY
87922: LIST
87923: LIST
87924: PUSH
87925: LD_INT 4
87927: NEG
87928: PUSH
87929: LD_INT 3
87931: NEG
87932: PUSH
87933: EMPTY
87934: LIST
87935: LIST
87936: PUSH
87937: LD_INT 4
87939: NEG
87940: PUSH
87941: LD_INT 4
87943: NEG
87944: PUSH
87945: EMPTY
87946: LIST
87947: LIST
87948: PUSH
87949: LD_INT 4
87951: NEG
87952: PUSH
87953: LD_INT 5
87955: NEG
87956: PUSH
87957: EMPTY
87958: LIST
87959: LIST
87960: PUSH
87961: LD_INT 5
87963: NEG
87964: PUSH
87965: LD_INT 4
87967: NEG
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: PUSH
87973: LD_INT 5
87975: NEG
87976: PUSH
87977: LD_INT 5
87979: NEG
87980: PUSH
87981: EMPTY
87982: LIST
87983: LIST
87984: PUSH
87985: LD_INT 5
87987: NEG
87988: PUSH
87989: LD_INT 6
87991: NEG
87992: PUSH
87993: EMPTY
87994: LIST
87995: LIST
87996: PUSH
87997: LD_INT 6
87999: NEG
88000: PUSH
88001: LD_INT 5
88003: NEG
88004: PUSH
88005: EMPTY
88006: LIST
88007: LIST
88008: PUSH
88009: LD_INT 6
88011: NEG
88012: PUSH
88013: LD_INT 6
88015: NEG
88016: PUSH
88017: EMPTY
88018: LIST
88019: LIST
88020: PUSH
88021: EMPTY
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: LIST
88029: LIST
88030: LIST
88031: LIST
88032: LIST
88033: LIST
88034: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
88035: LD_ADDR_VAR 0 41
88039: PUSH
88040: LD_INT 0
88042: PUSH
88043: LD_INT 2
88045: NEG
88046: PUSH
88047: EMPTY
88048: LIST
88049: LIST
88050: PUSH
88051: LD_INT 1
88053: NEG
88054: PUSH
88055: LD_INT 3
88057: NEG
88058: PUSH
88059: EMPTY
88060: LIST
88061: LIST
88062: PUSH
88063: LD_INT 1
88065: PUSH
88066: LD_INT 2
88068: NEG
88069: PUSH
88070: EMPTY
88071: LIST
88072: LIST
88073: PUSH
88074: EMPTY
88075: LIST
88076: LIST
88077: LIST
88078: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
88079: LD_ADDR_VAR 0 42
88083: PUSH
88084: LD_INT 2
88086: PUSH
88087: LD_INT 0
88089: PUSH
88090: EMPTY
88091: LIST
88092: LIST
88093: PUSH
88094: LD_INT 2
88096: PUSH
88097: LD_INT 1
88099: NEG
88100: PUSH
88101: EMPTY
88102: LIST
88103: LIST
88104: PUSH
88105: LD_INT 3
88107: PUSH
88108: LD_INT 1
88110: PUSH
88111: EMPTY
88112: LIST
88113: LIST
88114: PUSH
88115: EMPTY
88116: LIST
88117: LIST
88118: LIST
88119: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
88120: LD_ADDR_VAR 0 43
88124: PUSH
88125: LD_INT 2
88127: PUSH
88128: LD_INT 2
88130: PUSH
88131: EMPTY
88132: LIST
88133: LIST
88134: PUSH
88135: LD_INT 3
88137: PUSH
88138: LD_INT 2
88140: PUSH
88141: EMPTY
88142: LIST
88143: LIST
88144: PUSH
88145: LD_INT 2
88147: PUSH
88148: LD_INT 3
88150: PUSH
88151: EMPTY
88152: LIST
88153: LIST
88154: PUSH
88155: EMPTY
88156: LIST
88157: LIST
88158: LIST
88159: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
88160: LD_ADDR_VAR 0 44
88164: PUSH
88165: LD_INT 0
88167: PUSH
88168: LD_INT 2
88170: PUSH
88171: EMPTY
88172: LIST
88173: LIST
88174: PUSH
88175: LD_INT 1
88177: PUSH
88178: LD_INT 3
88180: PUSH
88181: EMPTY
88182: LIST
88183: LIST
88184: PUSH
88185: LD_INT 1
88187: NEG
88188: PUSH
88189: LD_INT 2
88191: PUSH
88192: EMPTY
88193: LIST
88194: LIST
88195: PUSH
88196: EMPTY
88197: LIST
88198: LIST
88199: LIST
88200: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
88201: LD_ADDR_VAR 0 45
88205: PUSH
88206: LD_INT 2
88208: NEG
88209: PUSH
88210: LD_INT 0
88212: PUSH
88213: EMPTY
88214: LIST
88215: LIST
88216: PUSH
88217: LD_INT 2
88219: NEG
88220: PUSH
88221: LD_INT 1
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: PUSH
88228: LD_INT 3
88230: NEG
88231: PUSH
88232: LD_INT 1
88234: NEG
88235: PUSH
88236: EMPTY
88237: LIST
88238: LIST
88239: PUSH
88240: EMPTY
88241: LIST
88242: LIST
88243: LIST
88244: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
88245: LD_ADDR_VAR 0 46
88249: PUSH
88250: LD_INT 2
88252: NEG
88253: PUSH
88254: LD_INT 2
88256: NEG
88257: PUSH
88258: EMPTY
88259: LIST
88260: LIST
88261: PUSH
88262: LD_INT 2
88264: NEG
88265: PUSH
88266: LD_INT 3
88268: NEG
88269: PUSH
88270: EMPTY
88271: LIST
88272: LIST
88273: PUSH
88274: LD_INT 3
88276: NEG
88277: PUSH
88278: LD_INT 2
88280: NEG
88281: PUSH
88282: EMPTY
88283: LIST
88284: LIST
88285: PUSH
88286: EMPTY
88287: LIST
88288: LIST
88289: LIST
88290: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
88291: LD_ADDR_VAR 0 47
88295: PUSH
88296: LD_INT 2
88298: NEG
88299: PUSH
88300: LD_INT 3
88302: NEG
88303: PUSH
88304: EMPTY
88305: LIST
88306: LIST
88307: PUSH
88308: LD_INT 1
88310: NEG
88311: PUSH
88312: LD_INT 3
88314: NEG
88315: PUSH
88316: EMPTY
88317: LIST
88318: LIST
88319: PUSH
88320: EMPTY
88321: LIST
88322: LIST
88323: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
88324: LD_ADDR_VAR 0 48
88328: PUSH
88329: LD_INT 1
88331: PUSH
88332: LD_INT 2
88334: NEG
88335: PUSH
88336: EMPTY
88337: LIST
88338: LIST
88339: PUSH
88340: LD_INT 2
88342: PUSH
88343: LD_INT 1
88345: NEG
88346: PUSH
88347: EMPTY
88348: LIST
88349: LIST
88350: PUSH
88351: EMPTY
88352: LIST
88353: LIST
88354: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
88355: LD_ADDR_VAR 0 49
88359: PUSH
88360: LD_INT 3
88362: PUSH
88363: LD_INT 1
88365: PUSH
88366: EMPTY
88367: LIST
88368: LIST
88369: PUSH
88370: LD_INT 3
88372: PUSH
88373: LD_INT 2
88375: PUSH
88376: EMPTY
88377: LIST
88378: LIST
88379: PUSH
88380: EMPTY
88381: LIST
88382: LIST
88383: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
88384: LD_ADDR_VAR 0 50
88388: PUSH
88389: LD_INT 2
88391: PUSH
88392: LD_INT 3
88394: PUSH
88395: EMPTY
88396: LIST
88397: LIST
88398: PUSH
88399: LD_INT 1
88401: PUSH
88402: LD_INT 3
88404: PUSH
88405: EMPTY
88406: LIST
88407: LIST
88408: PUSH
88409: EMPTY
88410: LIST
88411: LIST
88412: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
88413: LD_ADDR_VAR 0 51
88417: PUSH
88418: LD_INT 1
88420: NEG
88421: PUSH
88422: LD_INT 2
88424: PUSH
88425: EMPTY
88426: LIST
88427: LIST
88428: PUSH
88429: LD_INT 2
88431: NEG
88432: PUSH
88433: LD_INT 1
88435: PUSH
88436: EMPTY
88437: LIST
88438: LIST
88439: PUSH
88440: EMPTY
88441: LIST
88442: LIST
88443: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
88444: LD_ADDR_VAR 0 52
88448: PUSH
88449: LD_INT 3
88451: NEG
88452: PUSH
88453: LD_INT 1
88455: NEG
88456: PUSH
88457: EMPTY
88458: LIST
88459: LIST
88460: PUSH
88461: LD_INT 3
88463: NEG
88464: PUSH
88465: LD_INT 2
88467: NEG
88468: PUSH
88469: EMPTY
88470: LIST
88471: LIST
88472: PUSH
88473: EMPTY
88474: LIST
88475: LIST
88476: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
88477: LD_ADDR_VAR 0 53
88481: PUSH
88482: LD_INT 1
88484: NEG
88485: PUSH
88486: LD_INT 3
88488: NEG
88489: PUSH
88490: EMPTY
88491: LIST
88492: LIST
88493: PUSH
88494: LD_INT 0
88496: PUSH
88497: LD_INT 3
88499: NEG
88500: PUSH
88501: EMPTY
88502: LIST
88503: LIST
88504: PUSH
88505: LD_INT 1
88507: PUSH
88508: LD_INT 2
88510: NEG
88511: PUSH
88512: EMPTY
88513: LIST
88514: LIST
88515: PUSH
88516: EMPTY
88517: LIST
88518: LIST
88519: LIST
88520: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
88521: LD_ADDR_VAR 0 54
88525: PUSH
88526: LD_INT 2
88528: PUSH
88529: LD_INT 1
88531: NEG
88532: PUSH
88533: EMPTY
88534: LIST
88535: LIST
88536: PUSH
88537: LD_INT 3
88539: PUSH
88540: LD_INT 0
88542: PUSH
88543: EMPTY
88544: LIST
88545: LIST
88546: PUSH
88547: LD_INT 3
88549: PUSH
88550: LD_INT 1
88552: PUSH
88553: EMPTY
88554: LIST
88555: LIST
88556: PUSH
88557: EMPTY
88558: LIST
88559: LIST
88560: LIST
88561: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
88562: LD_ADDR_VAR 0 55
88566: PUSH
88567: LD_INT 3
88569: PUSH
88570: LD_INT 2
88572: PUSH
88573: EMPTY
88574: LIST
88575: LIST
88576: PUSH
88577: LD_INT 3
88579: PUSH
88580: LD_INT 3
88582: PUSH
88583: EMPTY
88584: LIST
88585: LIST
88586: PUSH
88587: LD_INT 2
88589: PUSH
88590: LD_INT 3
88592: PUSH
88593: EMPTY
88594: LIST
88595: LIST
88596: PUSH
88597: EMPTY
88598: LIST
88599: LIST
88600: LIST
88601: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
88602: LD_ADDR_VAR 0 56
88606: PUSH
88607: LD_INT 1
88609: PUSH
88610: LD_INT 3
88612: PUSH
88613: EMPTY
88614: LIST
88615: LIST
88616: PUSH
88617: LD_INT 0
88619: PUSH
88620: LD_INT 3
88622: PUSH
88623: EMPTY
88624: LIST
88625: LIST
88626: PUSH
88627: LD_INT 1
88629: NEG
88630: PUSH
88631: LD_INT 2
88633: PUSH
88634: EMPTY
88635: LIST
88636: LIST
88637: PUSH
88638: EMPTY
88639: LIST
88640: LIST
88641: LIST
88642: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
88643: LD_ADDR_VAR 0 57
88647: PUSH
88648: LD_INT 2
88650: NEG
88651: PUSH
88652: LD_INT 1
88654: PUSH
88655: EMPTY
88656: LIST
88657: LIST
88658: PUSH
88659: LD_INT 3
88661: NEG
88662: PUSH
88663: LD_INT 0
88665: PUSH
88666: EMPTY
88667: LIST
88668: LIST
88669: PUSH
88670: LD_INT 3
88672: NEG
88673: PUSH
88674: LD_INT 1
88676: NEG
88677: PUSH
88678: EMPTY
88679: LIST
88680: LIST
88681: PUSH
88682: EMPTY
88683: LIST
88684: LIST
88685: LIST
88686: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
88687: LD_ADDR_VAR 0 58
88691: PUSH
88692: LD_INT 2
88694: NEG
88695: PUSH
88696: LD_INT 3
88698: NEG
88699: PUSH
88700: EMPTY
88701: LIST
88702: LIST
88703: PUSH
88704: LD_INT 3
88706: NEG
88707: PUSH
88708: LD_INT 2
88710: NEG
88711: PUSH
88712: EMPTY
88713: LIST
88714: LIST
88715: PUSH
88716: LD_INT 3
88718: NEG
88719: PUSH
88720: LD_INT 3
88722: NEG
88723: PUSH
88724: EMPTY
88725: LIST
88726: LIST
88727: PUSH
88728: EMPTY
88729: LIST
88730: LIST
88731: LIST
88732: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
88733: LD_ADDR_VAR 0 59
88737: PUSH
88738: LD_INT 1
88740: NEG
88741: PUSH
88742: LD_INT 2
88744: NEG
88745: PUSH
88746: EMPTY
88747: LIST
88748: LIST
88749: PUSH
88750: LD_INT 0
88752: PUSH
88753: LD_INT 2
88755: NEG
88756: PUSH
88757: EMPTY
88758: LIST
88759: LIST
88760: PUSH
88761: LD_INT 1
88763: PUSH
88764: LD_INT 1
88766: NEG
88767: PUSH
88768: EMPTY
88769: LIST
88770: LIST
88771: PUSH
88772: EMPTY
88773: LIST
88774: LIST
88775: LIST
88776: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
88777: LD_ADDR_VAR 0 60
88781: PUSH
88782: LD_INT 1
88784: PUSH
88785: LD_INT 1
88787: NEG
88788: PUSH
88789: EMPTY
88790: LIST
88791: LIST
88792: PUSH
88793: LD_INT 2
88795: PUSH
88796: LD_INT 0
88798: PUSH
88799: EMPTY
88800: LIST
88801: LIST
88802: PUSH
88803: LD_INT 2
88805: PUSH
88806: LD_INT 1
88808: PUSH
88809: EMPTY
88810: LIST
88811: LIST
88812: PUSH
88813: EMPTY
88814: LIST
88815: LIST
88816: LIST
88817: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
88818: LD_ADDR_VAR 0 61
88822: PUSH
88823: LD_INT 2
88825: PUSH
88826: LD_INT 1
88828: PUSH
88829: EMPTY
88830: LIST
88831: LIST
88832: PUSH
88833: LD_INT 2
88835: PUSH
88836: LD_INT 2
88838: PUSH
88839: EMPTY
88840: LIST
88841: LIST
88842: PUSH
88843: LD_INT 1
88845: PUSH
88846: LD_INT 2
88848: PUSH
88849: EMPTY
88850: LIST
88851: LIST
88852: PUSH
88853: EMPTY
88854: LIST
88855: LIST
88856: LIST
88857: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
88858: LD_ADDR_VAR 0 62
88862: PUSH
88863: LD_INT 1
88865: PUSH
88866: LD_INT 2
88868: PUSH
88869: EMPTY
88870: LIST
88871: LIST
88872: PUSH
88873: LD_INT 0
88875: PUSH
88876: LD_INT 2
88878: PUSH
88879: EMPTY
88880: LIST
88881: LIST
88882: PUSH
88883: LD_INT 1
88885: NEG
88886: PUSH
88887: LD_INT 1
88889: PUSH
88890: EMPTY
88891: LIST
88892: LIST
88893: PUSH
88894: EMPTY
88895: LIST
88896: LIST
88897: LIST
88898: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
88899: LD_ADDR_VAR 0 63
88903: PUSH
88904: LD_INT 1
88906: NEG
88907: PUSH
88908: LD_INT 1
88910: PUSH
88911: EMPTY
88912: LIST
88913: LIST
88914: PUSH
88915: LD_INT 2
88917: NEG
88918: PUSH
88919: LD_INT 0
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: PUSH
88926: LD_INT 2
88928: NEG
88929: PUSH
88930: LD_INT 1
88932: NEG
88933: PUSH
88934: EMPTY
88935: LIST
88936: LIST
88937: PUSH
88938: EMPTY
88939: LIST
88940: LIST
88941: LIST
88942: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
88943: LD_ADDR_VAR 0 64
88947: PUSH
88948: LD_INT 1
88950: NEG
88951: PUSH
88952: LD_INT 2
88954: NEG
88955: PUSH
88956: EMPTY
88957: LIST
88958: LIST
88959: PUSH
88960: LD_INT 2
88962: NEG
88963: PUSH
88964: LD_INT 1
88966: NEG
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PUSH
88972: LD_INT 2
88974: NEG
88975: PUSH
88976: LD_INT 2
88978: NEG
88979: PUSH
88980: EMPTY
88981: LIST
88982: LIST
88983: PUSH
88984: EMPTY
88985: LIST
88986: LIST
88987: LIST
88988: ST_TO_ADDR
// end ; 2 :
88989: GO 92255
88991: LD_INT 2
88993: DOUBLE
88994: EQUAL
88995: IFTRUE 88999
88997: GO 92254
88999: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
89000: LD_ADDR_VAR 0 29
89004: PUSH
89005: LD_INT 4
89007: PUSH
89008: LD_INT 0
89010: PUSH
89011: EMPTY
89012: LIST
89013: LIST
89014: PUSH
89015: LD_INT 4
89017: PUSH
89018: LD_INT 1
89020: NEG
89021: PUSH
89022: EMPTY
89023: LIST
89024: LIST
89025: PUSH
89026: LD_INT 5
89028: PUSH
89029: LD_INT 0
89031: PUSH
89032: EMPTY
89033: LIST
89034: LIST
89035: PUSH
89036: LD_INT 5
89038: PUSH
89039: LD_INT 1
89041: PUSH
89042: EMPTY
89043: LIST
89044: LIST
89045: PUSH
89046: LD_INT 4
89048: PUSH
89049: LD_INT 1
89051: PUSH
89052: EMPTY
89053: LIST
89054: LIST
89055: PUSH
89056: LD_INT 3
89058: PUSH
89059: LD_INT 0
89061: PUSH
89062: EMPTY
89063: LIST
89064: LIST
89065: PUSH
89066: LD_INT 3
89068: PUSH
89069: LD_INT 1
89071: NEG
89072: PUSH
89073: EMPTY
89074: LIST
89075: LIST
89076: PUSH
89077: LD_INT 3
89079: PUSH
89080: LD_INT 2
89082: NEG
89083: PUSH
89084: EMPTY
89085: LIST
89086: LIST
89087: PUSH
89088: LD_INT 5
89090: PUSH
89091: LD_INT 2
89093: PUSH
89094: EMPTY
89095: LIST
89096: LIST
89097: PUSH
89098: LD_INT 3
89100: PUSH
89101: LD_INT 3
89103: PUSH
89104: EMPTY
89105: LIST
89106: LIST
89107: PUSH
89108: LD_INT 3
89110: PUSH
89111: LD_INT 2
89113: PUSH
89114: EMPTY
89115: LIST
89116: LIST
89117: PUSH
89118: LD_INT 4
89120: PUSH
89121: LD_INT 3
89123: PUSH
89124: EMPTY
89125: LIST
89126: LIST
89127: PUSH
89128: LD_INT 4
89130: PUSH
89131: LD_INT 4
89133: PUSH
89134: EMPTY
89135: LIST
89136: LIST
89137: PUSH
89138: LD_INT 3
89140: PUSH
89141: LD_INT 4
89143: PUSH
89144: EMPTY
89145: LIST
89146: LIST
89147: PUSH
89148: LD_INT 2
89150: PUSH
89151: LD_INT 3
89153: PUSH
89154: EMPTY
89155: LIST
89156: LIST
89157: PUSH
89158: LD_INT 2
89160: PUSH
89161: LD_INT 2
89163: PUSH
89164: EMPTY
89165: LIST
89166: LIST
89167: PUSH
89168: LD_INT 4
89170: PUSH
89171: LD_INT 2
89173: PUSH
89174: EMPTY
89175: LIST
89176: LIST
89177: PUSH
89178: LD_INT 2
89180: PUSH
89181: LD_INT 4
89183: PUSH
89184: EMPTY
89185: LIST
89186: LIST
89187: PUSH
89188: LD_INT 0
89190: PUSH
89191: LD_INT 4
89193: PUSH
89194: EMPTY
89195: LIST
89196: LIST
89197: PUSH
89198: LD_INT 0
89200: PUSH
89201: LD_INT 3
89203: PUSH
89204: EMPTY
89205: LIST
89206: LIST
89207: PUSH
89208: LD_INT 1
89210: PUSH
89211: LD_INT 4
89213: PUSH
89214: EMPTY
89215: LIST
89216: LIST
89217: PUSH
89218: LD_INT 1
89220: PUSH
89221: LD_INT 5
89223: PUSH
89224: EMPTY
89225: LIST
89226: LIST
89227: PUSH
89228: LD_INT 0
89230: PUSH
89231: LD_INT 5
89233: PUSH
89234: EMPTY
89235: LIST
89236: LIST
89237: PUSH
89238: LD_INT 1
89240: NEG
89241: PUSH
89242: LD_INT 4
89244: PUSH
89245: EMPTY
89246: LIST
89247: LIST
89248: PUSH
89249: LD_INT 1
89251: NEG
89252: PUSH
89253: LD_INT 3
89255: PUSH
89256: EMPTY
89257: LIST
89258: LIST
89259: PUSH
89260: LD_INT 2
89262: PUSH
89263: LD_INT 5
89265: PUSH
89266: EMPTY
89267: LIST
89268: LIST
89269: PUSH
89270: LD_INT 2
89272: NEG
89273: PUSH
89274: LD_INT 3
89276: PUSH
89277: EMPTY
89278: LIST
89279: LIST
89280: PUSH
89281: LD_INT 3
89283: NEG
89284: PUSH
89285: LD_INT 0
89287: PUSH
89288: EMPTY
89289: LIST
89290: LIST
89291: PUSH
89292: LD_INT 3
89294: NEG
89295: PUSH
89296: LD_INT 1
89298: NEG
89299: PUSH
89300: EMPTY
89301: LIST
89302: LIST
89303: PUSH
89304: LD_INT 2
89306: NEG
89307: PUSH
89308: LD_INT 0
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 2
89317: NEG
89318: PUSH
89319: LD_INT 1
89321: PUSH
89322: EMPTY
89323: LIST
89324: LIST
89325: PUSH
89326: LD_INT 3
89328: NEG
89329: PUSH
89330: LD_INT 1
89332: PUSH
89333: EMPTY
89334: LIST
89335: LIST
89336: PUSH
89337: LD_INT 4
89339: NEG
89340: PUSH
89341: LD_INT 0
89343: PUSH
89344: EMPTY
89345: LIST
89346: LIST
89347: PUSH
89348: LD_INT 4
89350: NEG
89351: PUSH
89352: LD_INT 1
89354: NEG
89355: PUSH
89356: EMPTY
89357: LIST
89358: LIST
89359: PUSH
89360: LD_INT 4
89362: NEG
89363: PUSH
89364: LD_INT 2
89366: NEG
89367: PUSH
89368: EMPTY
89369: LIST
89370: LIST
89371: PUSH
89372: LD_INT 2
89374: NEG
89375: PUSH
89376: LD_INT 2
89378: PUSH
89379: EMPTY
89380: LIST
89381: LIST
89382: PUSH
89383: LD_INT 4
89385: NEG
89386: PUSH
89387: LD_INT 4
89389: NEG
89390: PUSH
89391: EMPTY
89392: LIST
89393: LIST
89394: PUSH
89395: LD_INT 4
89397: NEG
89398: PUSH
89399: LD_INT 5
89401: NEG
89402: PUSH
89403: EMPTY
89404: LIST
89405: LIST
89406: PUSH
89407: LD_INT 3
89409: NEG
89410: PUSH
89411: LD_INT 4
89413: NEG
89414: PUSH
89415: EMPTY
89416: LIST
89417: LIST
89418: PUSH
89419: LD_INT 3
89421: NEG
89422: PUSH
89423: LD_INT 3
89425: NEG
89426: PUSH
89427: EMPTY
89428: LIST
89429: LIST
89430: PUSH
89431: LD_INT 4
89433: NEG
89434: PUSH
89435: LD_INT 3
89437: NEG
89438: PUSH
89439: EMPTY
89440: LIST
89441: LIST
89442: PUSH
89443: LD_INT 5
89445: NEG
89446: PUSH
89447: LD_INT 4
89449: NEG
89450: PUSH
89451: EMPTY
89452: LIST
89453: LIST
89454: PUSH
89455: LD_INT 5
89457: NEG
89458: PUSH
89459: LD_INT 5
89461: NEG
89462: PUSH
89463: EMPTY
89464: LIST
89465: LIST
89466: PUSH
89467: LD_INT 3
89469: NEG
89470: PUSH
89471: LD_INT 5
89473: NEG
89474: PUSH
89475: EMPTY
89476: LIST
89477: LIST
89478: PUSH
89479: LD_INT 5
89481: NEG
89482: PUSH
89483: LD_INT 3
89485: NEG
89486: PUSH
89487: EMPTY
89488: LIST
89489: LIST
89490: PUSH
89491: EMPTY
89492: LIST
89493: LIST
89494: LIST
89495: LIST
89496: LIST
89497: LIST
89498: LIST
89499: LIST
89500: LIST
89501: LIST
89502: LIST
89503: LIST
89504: LIST
89505: LIST
89506: LIST
89507: LIST
89508: LIST
89509: LIST
89510: LIST
89511: LIST
89512: LIST
89513: LIST
89514: LIST
89515: LIST
89516: LIST
89517: LIST
89518: LIST
89519: LIST
89520: LIST
89521: LIST
89522: LIST
89523: LIST
89524: LIST
89525: LIST
89526: LIST
89527: LIST
89528: LIST
89529: LIST
89530: LIST
89531: LIST
89532: LIST
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
89538: LD_ADDR_VAR 0 30
89542: PUSH
89543: LD_INT 4
89545: PUSH
89546: LD_INT 4
89548: PUSH
89549: EMPTY
89550: LIST
89551: LIST
89552: PUSH
89553: LD_INT 4
89555: PUSH
89556: LD_INT 3
89558: PUSH
89559: EMPTY
89560: LIST
89561: LIST
89562: PUSH
89563: LD_INT 5
89565: PUSH
89566: LD_INT 4
89568: PUSH
89569: EMPTY
89570: LIST
89571: LIST
89572: PUSH
89573: LD_INT 5
89575: PUSH
89576: LD_INT 5
89578: PUSH
89579: EMPTY
89580: LIST
89581: LIST
89582: PUSH
89583: LD_INT 4
89585: PUSH
89586: LD_INT 5
89588: PUSH
89589: EMPTY
89590: LIST
89591: LIST
89592: PUSH
89593: LD_INT 3
89595: PUSH
89596: LD_INT 4
89598: PUSH
89599: EMPTY
89600: LIST
89601: LIST
89602: PUSH
89603: LD_INT 3
89605: PUSH
89606: LD_INT 3
89608: PUSH
89609: EMPTY
89610: LIST
89611: LIST
89612: PUSH
89613: LD_INT 5
89615: PUSH
89616: LD_INT 3
89618: PUSH
89619: EMPTY
89620: LIST
89621: LIST
89622: PUSH
89623: LD_INT 3
89625: PUSH
89626: LD_INT 5
89628: PUSH
89629: EMPTY
89630: LIST
89631: LIST
89632: PUSH
89633: LD_INT 0
89635: PUSH
89636: LD_INT 3
89638: PUSH
89639: EMPTY
89640: LIST
89641: LIST
89642: PUSH
89643: LD_INT 0
89645: PUSH
89646: LD_INT 2
89648: PUSH
89649: EMPTY
89650: LIST
89651: LIST
89652: PUSH
89653: LD_INT 1
89655: PUSH
89656: LD_INT 3
89658: PUSH
89659: EMPTY
89660: LIST
89661: LIST
89662: PUSH
89663: LD_INT 1
89665: PUSH
89666: LD_INT 4
89668: PUSH
89669: EMPTY
89670: LIST
89671: LIST
89672: PUSH
89673: LD_INT 0
89675: PUSH
89676: LD_INT 4
89678: PUSH
89679: EMPTY
89680: LIST
89681: LIST
89682: PUSH
89683: LD_INT 1
89685: NEG
89686: PUSH
89687: LD_INT 3
89689: PUSH
89690: EMPTY
89691: LIST
89692: LIST
89693: PUSH
89694: LD_INT 1
89696: NEG
89697: PUSH
89698: LD_INT 2
89700: PUSH
89701: EMPTY
89702: LIST
89703: LIST
89704: PUSH
89705: LD_INT 2
89707: PUSH
89708: LD_INT 4
89710: PUSH
89711: EMPTY
89712: LIST
89713: LIST
89714: PUSH
89715: LD_INT 2
89717: NEG
89718: PUSH
89719: LD_INT 2
89721: PUSH
89722: EMPTY
89723: LIST
89724: LIST
89725: PUSH
89726: LD_INT 4
89728: NEG
89729: PUSH
89730: LD_INT 0
89732: PUSH
89733: EMPTY
89734: LIST
89735: LIST
89736: PUSH
89737: LD_INT 4
89739: NEG
89740: PUSH
89741: LD_INT 1
89743: NEG
89744: PUSH
89745: EMPTY
89746: LIST
89747: LIST
89748: PUSH
89749: LD_INT 3
89751: NEG
89752: PUSH
89753: LD_INT 0
89755: PUSH
89756: EMPTY
89757: LIST
89758: LIST
89759: PUSH
89760: LD_INT 3
89762: NEG
89763: PUSH
89764: LD_INT 1
89766: PUSH
89767: EMPTY
89768: LIST
89769: LIST
89770: PUSH
89771: LD_INT 4
89773: NEG
89774: PUSH
89775: LD_INT 1
89777: PUSH
89778: EMPTY
89779: LIST
89780: LIST
89781: PUSH
89782: LD_INT 5
89784: NEG
89785: PUSH
89786: LD_INT 0
89788: PUSH
89789: EMPTY
89790: LIST
89791: LIST
89792: PUSH
89793: LD_INT 5
89795: NEG
89796: PUSH
89797: LD_INT 1
89799: NEG
89800: PUSH
89801: EMPTY
89802: LIST
89803: LIST
89804: PUSH
89805: LD_INT 5
89807: NEG
89808: PUSH
89809: LD_INT 2
89811: NEG
89812: PUSH
89813: EMPTY
89814: LIST
89815: LIST
89816: PUSH
89817: LD_INT 3
89819: NEG
89820: PUSH
89821: LD_INT 2
89823: PUSH
89824: EMPTY
89825: LIST
89826: LIST
89827: PUSH
89828: LD_INT 3
89830: NEG
89831: PUSH
89832: LD_INT 3
89834: NEG
89835: PUSH
89836: EMPTY
89837: LIST
89838: LIST
89839: PUSH
89840: LD_INT 3
89842: NEG
89843: PUSH
89844: LD_INT 4
89846: NEG
89847: PUSH
89848: EMPTY
89849: LIST
89850: LIST
89851: PUSH
89852: LD_INT 2
89854: NEG
89855: PUSH
89856: LD_INT 3
89858: NEG
89859: PUSH
89860: EMPTY
89861: LIST
89862: LIST
89863: PUSH
89864: LD_INT 2
89866: NEG
89867: PUSH
89868: LD_INT 2
89870: NEG
89871: PUSH
89872: EMPTY
89873: LIST
89874: LIST
89875: PUSH
89876: LD_INT 3
89878: NEG
89879: PUSH
89880: LD_INT 2
89882: NEG
89883: PUSH
89884: EMPTY
89885: LIST
89886: LIST
89887: PUSH
89888: LD_INT 4
89890: NEG
89891: PUSH
89892: LD_INT 3
89894: NEG
89895: PUSH
89896: EMPTY
89897: LIST
89898: LIST
89899: PUSH
89900: LD_INT 4
89902: NEG
89903: PUSH
89904: LD_INT 4
89906: NEG
89907: PUSH
89908: EMPTY
89909: LIST
89910: LIST
89911: PUSH
89912: LD_INT 2
89914: NEG
89915: PUSH
89916: LD_INT 4
89918: NEG
89919: PUSH
89920: EMPTY
89921: LIST
89922: LIST
89923: PUSH
89924: LD_INT 4
89926: NEG
89927: PUSH
89928: LD_INT 2
89930: NEG
89931: PUSH
89932: EMPTY
89933: LIST
89934: LIST
89935: PUSH
89936: LD_INT 0
89938: PUSH
89939: LD_INT 4
89941: NEG
89942: PUSH
89943: EMPTY
89944: LIST
89945: LIST
89946: PUSH
89947: LD_INT 0
89949: PUSH
89950: LD_INT 5
89952: NEG
89953: PUSH
89954: EMPTY
89955: LIST
89956: LIST
89957: PUSH
89958: LD_INT 1
89960: PUSH
89961: LD_INT 4
89963: NEG
89964: PUSH
89965: EMPTY
89966: LIST
89967: LIST
89968: PUSH
89969: LD_INT 1
89971: PUSH
89972: LD_INT 3
89974: NEG
89975: PUSH
89976: EMPTY
89977: LIST
89978: LIST
89979: PUSH
89980: LD_INT 0
89982: PUSH
89983: LD_INT 3
89985: NEG
89986: PUSH
89987: EMPTY
89988: LIST
89989: LIST
89990: PUSH
89991: LD_INT 1
89993: NEG
89994: PUSH
89995: LD_INT 4
89997: NEG
89998: PUSH
89999: EMPTY
90000: LIST
90001: LIST
90002: PUSH
90003: LD_INT 1
90005: NEG
90006: PUSH
90007: LD_INT 5
90009: NEG
90010: PUSH
90011: EMPTY
90012: LIST
90013: LIST
90014: PUSH
90015: LD_INT 2
90017: PUSH
90018: LD_INT 3
90020: NEG
90021: PUSH
90022: EMPTY
90023: LIST
90024: LIST
90025: PUSH
90026: LD_INT 2
90028: NEG
90029: PUSH
90030: LD_INT 5
90032: NEG
90033: PUSH
90034: EMPTY
90035: LIST
90036: LIST
90037: PUSH
90038: EMPTY
90039: LIST
90040: LIST
90041: LIST
90042: LIST
90043: LIST
90044: LIST
90045: LIST
90046: LIST
90047: LIST
90048: LIST
90049: LIST
90050: LIST
90051: LIST
90052: LIST
90053: LIST
90054: LIST
90055: LIST
90056: LIST
90057: LIST
90058: LIST
90059: LIST
90060: LIST
90061: LIST
90062: LIST
90063: LIST
90064: LIST
90065: LIST
90066: LIST
90067: LIST
90068: LIST
90069: LIST
90070: LIST
90071: LIST
90072: LIST
90073: LIST
90074: LIST
90075: LIST
90076: LIST
90077: LIST
90078: LIST
90079: LIST
90080: LIST
90081: LIST
90082: LIST
90083: LIST
90084: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
90085: LD_ADDR_VAR 0 31
90089: PUSH
90090: LD_INT 0
90092: PUSH
90093: LD_INT 4
90095: PUSH
90096: EMPTY
90097: LIST
90098: LIST
90099: PUSH
90100: LD_INT 0
90102: PUSH
90103: LD_INT 3
90105: PUSH
90106: EMPTY
90107: LIST
90108: LIST
90109: PUSH
90110: LD_INT 1
90112: PUSH
90113: LD_INT 4
90115: PUSH
90116: EMPTY
90117: LIST
90118: LIST
90119: PUSH
90120: LD_INT 1
90122: PUSH
90123: LD_INT 5
90125: PUSH
90126: EMPTY
90127: LIST
90128: LIST
90129: PUSH
90130: LD_INT 0
90132: PUSH
90133: LD_INT 5
90135: PUSH
90136: EMPTY
90137: LIST
90138: LIST
90139: PUSH
90140: LD_INT 1
90142: NEG
90143: PUSH
90144: LD_INT 4
90146: PUSH
90147: EMPTY
90148: LIST
90149: LIST
90150: PUSH
90151: LD_INT 1
90153: NEG
90154: PUSH
90155: LD_INT 3
90157: PUSH
90158: EMPTY
90159: LIST
90160: LIST
90161: PUSH
90162: LD_INT 2
90164: PUSH
90165: LD_INT 5
90167: PUSH
90168: EMPTY
90169: LIST
90170: LIST
90171: PUSH
90172: LD_INT 2
90174: NEG
90175: PUSH
90176: LD_INT 3
90178: PUSH
90179: EMPTY
90180: LIST
90181: LIST
90182: PUSH
90183: LD_INT 3
90185: NEG
90186: PUSH
90187: LD_INT 0
90189: PUSH
90190: EMPTY
90191: LIST
90192: LIST
90193: PUSH
90194: LD_INT 3
90196: NEG
90197: PUSH
90198: LD_INT 1
90200: NEG
90201: PUSH
90202: EMPTY
90203: LIST
90204: LIST
90205: PUSH
90206: LD_INT 2
90208: NEG
90209: PUSH
90210: LD_INT 0
90212: PUSH
90213: EMPTY
90214: LIST
90215: LIST
90216: PUSH
90217: LD_INT 2
90219: NEG
90220: PUSH
90221: LD_INT 1
90223: PUSH
90224: EMPTY
90225: LIST
90226: LIST
90227: PUSH
90228: LD_INT 3
90230: NEG
90231: PUSH
90232: LD_INT 1
90234: PUSH
90235: EMPTY
90236: LIST
90237: LIST
90238: PUSH
90239: LD_INT 4
90241: NEG
90242: PUSH
90243: LD_INT 0
90245: PUSH
90246: EMPTY
90247: LIST
90248: LIST
90249: PUSH
90250: LD_INT 4
90252: NEG
90253: PUSH
90254: LD_INT 1
90256: NEG
90257: PUSH
90258: EMPTY
90259: LIST
90260: LIST
90261: PUSH
90262: LD_INT 4
90264: NEG
90265: PUSH
90266: LD_INT 2
90268: NEG
90269: PUSH
90270: EMPTY
90271: LIST
90272: LIST
90273: PUSH
90274: LD_INT 2
90276: NEG
90277: PUSH
90278: LD_INT 2
90280: PUSH
90281: EMPTY
90282: LIST
90283: LIST
90284: PUSH
90285: LD_INT 4
90287: NEG
90288: PUSH
90289: LD_INT 4
90291: NEG
90292: PUSH
90293: EMPTY
90294: LIST
90295: LIST
90296: PUSH
90297: LD_INT 4
90299: NEG
90300: PUSH
90301: LD_INT 5
90303: NEG
90304: PUSH
90305: EMPTY
90306: LIST
90307: LIST
90308: PUSH
90309: LD_INT 3
90311: NEG
90312: PUSH
90313: LD_INT 4
90315: NEG
90316: PUSH
90317: EMPTY
90318: LIST
90319: LIST
90320: PUSH
90321: LD_INT 3
90323: NEG
90324: PUSH
90325: LD_INT 3
90327: NEG
90328: PUSH
90329: EMPTY
90330: LIST
90331: LIST
90332: PUSH
90333: LD_INT 4
90335: NEG
90336: PUSH
90337: LD_INT 3
90339: NEG
90340: PUSH
90341: EMPTY
90342: LIST
90343: LIST
90344: PUSH
90345: LD_INT 5
90347: NEG
90348: PUSH
90349: LD_INT 4
90351: NEG
90352: PUSH
90353: EMPTY
90354: LIST
90355: LIST
90356: PUSH
90357: LD_INT 5
90359: NEG
90360: PUSH
90361: LD_INT 5
90363: NEG
90364: PUSH
90365: EMPTY
90366: LIST
90367: LIST
90368: PUSH
90369: LD_INT 3
90371: NEG
90372: PUSH
90373: LD_INT 5
90375: NEG
90376: PUSH
90377: EMPTY
90378: LIST
90379: LIST
90380: PUSH
90381: LD_INT 5
90383: NEG
90384: PUSH
90385: LD_INT 3
90387: NEG
90388: PUSH
90389: EMPTY
90390: LIST
90391: LIST
90392: PUSH
90393: LD_INT 0
90395: PUSH
90396: LD_INT 3
90398: NEG
90399: PUSH
90400: EMPTY
90401: LIST
90402: LIST
90403: PUSH
90404: LD_INT 0
90406: PUSH
90407: LD_INT 4
90409: NEG
90410: PUSH
90411: EMPTY
90412: LIST
90413: LIST
90414: PUSH
90415: LD_INT 1
90417: PUSH
90418: LD_INT 3
90420: NEG
90421: PUSH
90422: EMPTY
90423: LIST
90424: LIST
90425: PUSH
90426: LD_INT 1
90428: PUSH
90429: LD_INT 2
90431: NEG
90432: PUSH
90433: EMPTY
90434: LIST
90435: LIST
90436: PUSH
90437: LD_INT 0
90439: PUSH
90440: LD_INT 2
90442: NEG
90443: PUSH
90444: EMPTY
90445: LIST
90446: LIST
90447: PUSH
90448: LD_INT 1
90450: NEG
90451: PUSH
90452: LD_INT 3
90454: NEG
90455: PUSH
90456: EMPTY
90457: LIST
90458: LIST
90459: PUSH
90460: LD_INT 1
90462: NEG
90463: PUSH
90464: LD_INT 4
90466: NEG
90467: PUSH
90468: EMPTY
90469: LIST
90470: LIST
90471: PUSH
90472: LD_INT 2
90474: PUSH
90475: LD_INT 2
90477: NEG
90478: PUSH
90479: EMPTY
90480: LIST
90481: LIST
90482: PUSH
90483: LD_INT 2
90485: NEG
90486: PUSH
90487: LD_INT 4
90489: NEG
90490: PUSH
90491: EMPTY
90492: LIST
90493: LIST
90494: PUSH
90495: LD_INT 4
90497: PUSH
90498: LD_INT 0
90500: PUSH
90501: EMPTY
90502: LIST
90503: LIST
90504: PUSH
90505: LD_INT 4
90507: PUSH
90508: LD_INT 1
90510: NEG
90511: PUSH
90512: EMPTY
90513: LIST
90514: LIST
90515: PUSH
90516: LD_INT 5
90518: PUSH
90519: LD_INT 0
90521: PUSH
90522: EMPTY
90523: LIST
90524: LIST
90525: PUSH
90526: LD_INT 5
90528: PUSH
90529: LD_INT 1
90531: PUSH
90532: EMPTY
90533: LIST
90534: LIST
90535: PUSH
90536: LD_INT 4
90538: PUSH
90539: LD_INT 1
90541: PUSH
90542: EMPTY
90543: LIST
90544: LIST
90545: PUSH
90546: LD_INT 3
90548: PUSH
90549: LD_INT 0
90551: PUSH
90552: EMPTY
90553: LIST
90554: LIST
90555: PUSH
90556: LD_INT 3
90558: PUSH
90559: LD_INT 1
90561: NEG
90562: PUSH
90563: EMPTY
90564: LIST
90565: LIST
90566: PUSH
90567: LD_INT 3
90569: PUSH
90570: LD_INT 2
90572: NEG
90573: PUSH
90574: EMPTY
90575: LIST
90576: LIST
90577: PUSH
90578: LD_INT 5
90580: PUSH
90581: LD_INT 2
90583: PUSH
90584: EMPTY
90585: LIST
90586: LIST
90587: PUSH
90588: EMPTY
90589: LIST
90590: LIST
90591: LIST
90592: LIST
90593: LIST
90594: LIST
90595: LIST
90596: LIST
90597: LIST
90598: LIST
90599: LIST
90600: LIST
90601: LIST
90602: LIST
90603: LIST
90604: LIST
90605: LIST
90606: LIST
90607: LIST
90608: LIST
90609: LIST
90610: LIST
90611: LIST
90612: LIST
90613: LIST
90614: LIST
90615: LIST
90616: LIST
90617: LIST
90618: LIST
90619: LIST
90620: LIST
90621: LIST
90622: LIST
90623: LIST
90624: LIST
90625: LIST
90626: LIST
90627: LIST
90628: LIST
90629: LIST
90630: LIST
90631: LIST
90632: LIST
90633: LIST
90634: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
90635: LD_ADDR_VAR 0 32
90639: PUSH
90640: LD_INT 4
90642: NEG
90643: PUSH
90644: LD_INT 0
90646: PUSH
90647: EMPTY
90648: LIST
90649: LIST
90650: PUSH
90651: LD_INT 4
90653: NEG
90654: PUSH
90655: LD_INT 1
90657: NEG
90658: PUSH
90659: EMPTY
90660: LIST
90661: LIST
90662: PUSH
90663: LD_INT 3
90665: NEG
90666: PUSH
90667: LD_INT 0
90669: PUSH
90670: EMPTY
90671: LIST
90672: LIST
90673: PUSH
90674: LD_INT 3
90676: NEG
90677: PUSH
90678: LD_INT 1
90680: PUSH
90681: EMPTY
90682: LIST
90683: LIST
90684: PUSH
90685: LD_INT 4
90687: NEG
90688: PUSH
90689: LD_INT 1
90691: PUSH
90692: EMPTY
90693: LIST
90694: LIST
90695: PUSH
90696: LD_INT 5
90698: NEG
90699: PUSH
90700: LD_INT 0
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: PUSH
90707: LD_INT 5
90709: NEG
90710: PUSH
90711: LD_INT 1
90713: NEG
90714: PUSH
90715: EMPTY
90716: LIST
90717: LIST
90718: PUSH
90719: LD_INT 5
90721: NEG
90722: PUSH
90723: LD_INT 2
90725: NEG
90726: PUSH
90727: EMPTY
90728: LIST
90729: LIST
90730: PUSH
90731: LD_INT 3
90733: NEG
90734: PUSH
90735: LD_INT 2
90737: PUSH
90738: EMPTY
90739: LIST
90740: LIST
90741: PUSH
90742: LD_INT 3
90744: NEG
90745: PUSH
90746: LD_INT 3
90748: NEG
90749: PUSH
90750: EMPTY
90751: LIST
90752: LIST
90753: PUSH
90754: LD_INT 3
90756: NEG
90757: PUSH
90758: LD_INT 4
90760: NEG
90761: PUSH
90762: EMPTY
90763: LIST
90764: LIST
90765: PUSH
90766: LD_INT 2
90768: NEG
90769: PUSH
90770: LD_INT 3
90772: NEG
90773: PUSH
90774: EMPTY
90775: LIST
90776: LIST
90777: PUSH
90778: LD_INT 2
90780: NEG
90781: PUSH
90782: LD_INT 2
90784: NEG
90785: PUSH
90786: EMPTY
90787: LIST
90788: LIST
90789: PUSH
90790: LD_INT 3
90792: NEG
90793: PUSH
90794: LD_INT 2
90796: NEG
90797: PUSH
90798: EMPTY
90799: LIST
90800: LIST
90801: PUSH
90802: LD_INT 4
90804: NEG
90805: PUSH
90806: LD_INT 3
90808: NEG
90809: PUSH
90810: EMPTY
90811: LIST
90812: LIST
90813: PUSH
90814: LD_INT 4
90816: NEG
90817: PUSH
90818: LD_INT 4
90820: NEG
90821: PUSH
90822: EMPTY
90823: LIST
90824: LIST
90825: PUSH
90826: LD_INT 2
90828: NEG
90829: PUSH
90830: LD_INT 4
90832: NEG
90833: PUSH
90834: EMPTY
90835: LIST
90836: LIST
90837: PUSH
90838: LD_INT 4
90840: NEG
90841: PUSH
90842: LD_INT 2
90844: NEG
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: PUSH
90850: LD_INT 0
90852: PUSH
90853: LD_INT 4
90855: NEG
90856: PUSH
90857: EMPTY
90858: LIST
90859: LIST
90860: PUSH
90861: LD_INT 0
90863: PUSH
90864: LD_INT 5
90866: NEG
90867: PUSH
90868: EMPTY
90869: LIST
90870: LIST
90871: PUSH
90872: LD_INT 1
90874: PUSH
90875: LD_INT 4
90877: NEG
90878: PUSH
90879: EMPTY
90880: LIST
90881: LIST
90882: PUSH
90883: LD_INT 1
90885: PUSH
90886: LD_INT 3
90888: NEG
90889: PUSH
90890: EMPTY
90891: LIST
90892: LIST
90893: PUSH
90894: LD_INT 0
90896: PUSH
90897: LD_INT 3
90899: NEG
90900: PUSH
90901: EMPTY
90902: LIST
90903: LIST
90904: PUSH
90905: LD_INT 1
90907: NEG
90908: PUSH
90909: LD_INT 4
90911: NEG
90912: PUSH
90913: EMPTY
90914: LIST
90915: LIST
90916: PUSH
90917: LD_INT 1
90919: NEG
90920: PUSH
90921: LD_INT 5
90923: NEG
90924: PUSH
90925: EMPTY
90926: LIST
90927: LIST
90928: PUSH
90929: LD_INT 2
90931: PUSH
90932: LD_INT 3
90934: NEG
90935: PUSH
90936: EMPTY
90937: LIST
90938: LIST
90939: PUSH
90940: LD_INT 2
90942: NEG
90943: PUSH
90944: LD_INT 5
90946: NEG
90947: PUSH
90948: EMPTY
90949: LIST
90950: LIST
90951: PUSH
90952: LD_INT 3
90954: PUSH
90955: LD_INT 0
90957: PUSH
90958: EMPTY
90959: LIST
90960: LIST
90961: PUSH
90962: LD_INT 3
90964: PUSH
90965: LD_INT 1
90967: NEG
90968: PUSH
90969: EMPTY
90970: LIST
90971: LIST
90972: PUSH
90973: LD_INT 4
90975: PUSH
90976: LD_INT 0
90978: PUSH
90979: EMPTY
90980: LIST
90981: LIST
90982: PUSH
90983: LD_INT 4
90985: PUSH
90986: LD_INT 1
90988: PUSH
90989: EMPTY
90990: LIST
90991: LIST
90992: PUSH
90993: LD_INT 3
90995: PUSH
90996: LD_INT 1
90998: PUSH
90999: EMPTY
91000: LIST
91001: LIST
91002: PUSH
91003: LD_INT 2
91005: PUSH
91006: LD_INT 0
91008: PUSH
91009: EMPTY
91010: LIST
91011: LIST
91012: PUSH
91013: LD_INT 2
91015: PUSH
91016: LD_INT 1
91018: NEG
91019: PUSH
91020: EMPTY
91021: LIST
91022: LIST
91023: PUSH
91024: LD_INT 2
91026: PUSH
91027: LD_INT 2
91029: NEG
91030: PUSH
91031: EMPTY
91032: LIST
91033: LIST
91034: PUSH
91035: LD_INT 4
91037: PUSH
91038: LD_INT 2
91040: PUSH
91041: EMPTY
91042: LIST
91043: LIST
91044: PUSH
91045: LD_INT 4
91047: PUSH
91048: LD_INT 4
91050: PUSH
91051: EMPTY
91052: LIST
91053: LIST
91054: PUSH
91055: LD_INT 4
91057: PUSH
91058: LD_INT 3
91060: PUSH
91061: EMPTY
91062: LIST
91063: LIST
91064: PUSH
91065: LD_INT 5
91067: PUSH
91068: LD_INT 4
91070: PUSH
91071: EMPTY
91072: LIST
91073: LIST
91074: PUSH
91075: LD_INT 5
91077: PUSH
91078: LD_INT 5
91080: PUSH
91081: EMPTY
91082: LIST
91083: LIST
91084: PUSH
91085: LD_INT 4
91087: PUSH
91088: LD_INT 5
91090: PUSH
91091: EMPTY
91092: LIST
91093: LIST
91094: PUSH
91095: LD_INT 3
91097: PUSH
91098: LD_INT 4
91100: PUSH
91101: EMPTY
91102: LIST
91103: LIST
91104: PUSH
91105: LD_INT 3
91107: PUSH
91108: LD_INT 3
91110: PUSH
91111: EMPTY
91112: LIST
91113: LIST
91114: PUSH
91115: LD_INT 5
91117: PUSH
91118: LD_INT 3
91120: PUSH
91121: EMPTY
91122: LIST
91123: LIST
91124: PUSH
91125: LD_INT 3
91127: PUSH
91128: LD_INT 5
91130: PUSH
91131: EMPTY
91132: LIST
91133: LIST
91134: PUSH
91135: EMPTY
91136: LIST
91137: LIST
91138: LIST
91139: LIST
91140: LIST
91141: LIST
91142: LIST
91143: LIST
91144: LIST
91145: LIST
91146: LIST
91147: LIST
91148: LIST
91149: LIST
91150: LIST
91151: LIST
91152: LIST
91153: LIST
91154: LIST
91155: LIST
91156: LIST
91157: LIST
91158: LIST
91159: LIST
91160: LIST
91161: LIST
91162: LIST
91163: LIST
91164: LIST
91165: LIST
91166: LIST
91167: LIST
91168: LIST
91169: LIST
91170: LIST
91171: LIST
91172: LIST
91173: LIST
91174: LIST
91175: LIST
91176: LIST
91177: LIST
91178: LIST
91179: LIST
91180: LIST
91181: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
91182: LD_ADDR_VAR 0 33
91186: PUSH
91187: LD_INT 4
91189: NEG
91190: PUSH
91191: LD_INT 4
91193: NEG
91194: PUSH
91195: EMPTY
91196: LIST
91197: LIST
91198: PUSH
91199: LD_INT 4
91201: NEG
91202: PUSH
91203: LD_INT 5
91205: NEG
91206: PUSH
91207: EMPTY
91208: LIST
91209: LIST
91210: PUSH
91211: LD_INT 3
91213: NEG
91214: PUSH
91215: LD_INT 4
91217: NEG
91218: PUSH
91219: EMPTY
91220: LIST
91221: LIST
91222: PUSH
91223: LD_INT 3
91225: NEG
91226: PUSH
91227: LD_INT 3
91229: NEG
91230: PUSH
91231: EMPTY
91232: LIST
91233: LIST
91234: PUSH
91235: LD_INT 4
91237: NEG
91238: PUSH
91239: LD_INT 3
91241: NEG
91242: PUSH
91243: EMPTY
91244: LIST
91245: LIST
91246: PUSH
91247: LD_INT 5
91249: NEG
91250: PUSH
91251: LD_INT 4
91253: NEG
91254: PUSH
91255: EMPTY
91256: LIST
91257: LIST
91258: PUSH
91259: LD_INT 5
91261: NEG
91262: PUSH
91263: LD_INT 5
91265: NEG
91266: PUSH
91267: EMPTY
91268: LIST
91269: LIST
91270: PUSH
91271: LD_INT 3
91273: NEG
91274: PUSH
91275: LD_INT 5
91277: NEG
91278: PUSH
91279: EMPTY
91280: LIST
91281: LIST
91282: PUSH
91283: LD_INT 5
91285: NEG
91286: PUSH
91287: LD_INT 3
91289: NEG
91290: PUSH
91291: EMPTY
91292: LIST
91293: LIST
91294: PUSH
91295: LD_INT 0
91297: PUSH
91298: LD_INT 3
91300: NEG
91301: PUSH
91302: EMPTY
91303: LIST
91304: LIST
91305: PUSH
91306: LD_INT 0
91308: PUSH
91309: LD_INT 4
91311: NEG
91312: PUSH
91313: EMPTY
91314: LIST
91315: LIST
91316: PUSH
91317: LD_INT 1
91319: PUSH
91320: LD_INT 3
91322: NEG
91323: PUSH
91324: EMPTY
91325: LIST
91326: LIST
91327: PUSH
91328: LD_INT 1
91330: PUSH
91331: LD_INT 2
91333: NEG
91334: PUSH
91335: EMPTY
91336: LIST
91337: LIST
91338: PUSH
91339: LD_INT 0
91341: PUSH
91342: LD_INT 2
91344: NEG
91345: PUSH
91346: EMPTY
91347: LIST
91348: LIST
91349: PUSH
91350: LD_INT 1
91352: NEG
91353: PUSH
91354: LD_INT 3
91356: NEG
91357: PUSH
91358: EMPTY
91359: LIST
91360: LIST
91361: PUSH
91362: LD_INT 1
91364: NEG
91365: PUSH
91366: LD_INT 4
91368: NEG
91369: PUSH
91370: EMPTY
91371: LIST
91372: LIST
91373: PUSH
91374: LD_INT 2
91376: PUSH
91377: LD_INT 2
91379: NEG
91380: PUSH
91381: EMPTY
91382: LIST
91383: LIST
91384: PUSH
91385: LD_INT 2
91387: NEG
91388: PUSH
91389: LD_INT 4
91391: NEG
91392: PUSH
91393: EMPTY
91394: LIST
91395: LIST
91396: PUSH
91397: LD_INT 4
91399: PUSH
91400: LD_INT 0
91402: PUSH
91403: EMPTY
91404: LIST
91405: LIST
91406: PUSH
91407: LD_INT 4
91409: PUSH
91410: LD_INT 1
91412: NEG
91413: PUSH
91414: EMPTY
91415: LIST
91416: LIST
91417: PUSH
91418: LD_INT 5
91420: PUSH
91421: LD_INT 0
91423: PUSH
91424: EMPTY
91425: LIST
91426: LIST
91427: PUSH
91428: LD_INT 5
91430: PUSH
91431: LD_INT 1
91433: PUSH
91434: EMPTY
91435: LIST
91436: LIST
91437: PUSH
91438: LD_INT 4
91440: PUSH
91441: LD_INT 1
91443: PUSH
91444: EMPTY
91445: LIST
91446: LIST
91447: PUSH
91448: LD_INT 3
91450: PUSH
91451: LD_INT 0
91453: PUSH
91454: EMPTY
91455: LIST
91456: LIST
91457: PUSH
91458: LD_INT 3
91460: PUSH
91461: LD_INT 1
91463: NEG
91464: PUSH
91465: EMPTY
91466: LIST
91467: LIST
91468: PUSH
91469: LD_INT 3
91471: PUSH
91472: LD_INT 2
91474: NEG
91475: PUSH
91476: EMPTY
91477: LIST
91478: LIST
91479: PUSH
91480: LD_INT 5
91482: PUSH
91483: LD_INT 2
91485: PUSH
91486: EMPTY
91487: LIST
91488: LIST
91489: PUSH
91490: LD_INT 3
91492: PUSH
91493: LD_INT 3
91495: PUSH
91496: EMPTY
91497: LIST
91498: LIST
91499: PUSH
91500: LD_INT 3
91502: PUSH
91503: LD_INT 2
91505: PUSH
91506: EMPTY
91507: LIST
91508: LIST
91509: PUSH
91510: LD_INT 4
91512: PUSH
91513: LD_INT 3
91515: PUSH
91516: EMPTY
91517: LIST
91518: LIST
91519: PUSH
91520: LD_INT 4
91522: PUSH
91523: LD_INT 4
91525: PUSH
91526: EMPTY
91527: LIST
91528: LIST
91529: PUSH
91530: LD_INT 3
91532: PUSH
91533: LD_INT 4
91535: PUSH
91536: EMPTY
91537: LIST
91538: LIST
91539: PUSH
91540: LD_INT 2
91542: PUSH
91543: LD_INT 3
91545: PUSH
91546: EMPTY
91547: LIST
91548: LIST
91549: PUSH
91550: LD_INT 2
91552: PUSH
91553: LD_INT 2
91555: PUSH
91556: EMPTY
91557: LIST
91558: LIST
91559: PUSH
91560: LD_INT 4
91562: PUSH
91563: LD_INT 2
91565: PUSH
91566: EMPTY
91567: LIST
91568: LIST
91569: PUSH
91570: LD_INT 2
91572: PUSH
91573: LD_INT 4
91575: PUSH
91576: EMPTY
91577: LIST
91578: LIST
91579: PUSH
91580: LD_INT 0
91582: PUSH
91583: LD_INT 4
91585: PUSH
91586: EMPTY
91587: LIST
91588: LIST
91589: PUSH
91590: LD_INT 0
91592: PUSH
91593: LD_INT 3
91595: PUSH
91596: EMPTY
91597: LIST
91598: LIST
91599: PUSH
91600: LD_INT 1
91602: PUSH
91603: LD_INT 4
91605: PUSH
91606: EMPTY
91607: LIST
91608: LIST
91609: PUSH
91610: LD_INT 1
91612: PUSH
91613: LD_INT 5
91615: PUSH
91616: EMPTY
91617: LIST
91618: LIST
91619: PUSH
91620: LD_INT 0
91622: PUSH
91623: LD_INT 5
91625: PUSH
91626: EMPTY
91627: LIST
91628: LIST
91629: PUSH
91630: LD_INT 1
91632: NEG
91633: PUSH
91634: LD_INT 4
91636: PUSH
91637: EMPTY
91638: LIST
91639: LIST
91640: PUSH
91641: LD_INT 1
91643: NEG
91644: PUSH
91645: LD_INT 3
91647: PUSH
91648: EMPTY
91649: LIST
91650: LIST
91651: PUSH
91652: LD_INT 2
91654: PUSH
91655: LD_INT 5
91657: PUSH
91658: EMPTY
91659: LIST
91660: LIST
91661: PUSH
91662: LD_INT 2
91664: NEG
91665: PUSH
91666: LD_INT 3
91668: PUSH
91669: EMPTY
91670: LIST
91671: LIST
91672: PUSH
91673: EMPTY
91674: LIST
91675: LIST
91676: LIST
91677: LIST
91678: LIST
91679: LIST
91680: LIST
91681: LIST
91682: LIST
91683: LIST
91684: LIST
91685: LIST
91686: LIST
91687: LIST
91688: LIST
91689: LIST
91690: LIST
91691: LIST
91692: LIST
91693: LIST
91694: LIST
91695: LIST
91696: LIST
91697: LIST
91698: LIST
91699: LIST
91700: LIST
91701: LIST
91702: LIST
91703: LIST
91704: LIST
91705: LIST
91706: LIST
91707: LIST
91708: LIST
91709: LIST
91710: LIST
91711: LIST
91712: LIST
91713: LIST
91714: LIST
91715: LIST
91716: LIST
91717: LIST
91718: LIST
91719: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
91720: LD_ADDR_VAR 0 34
91724: PUSH
91725: LD_INT 0
91727: PUSH
91728: LD_INT 4
91730: NEG
91731: PUSH
91732: EMPTY
91733: LIST
91734: LIST
91735: PUSH
91736: LD_INT 0
91738: PUSH
91739: LD_INT 5
91741: NEG
91742: PUSH
91743: EMPTY
91744: LIST
91745: LIST
91746: PUSH
91747: LD_INT 1
91749: PUSH
91750: LD_INT 4
91752: NEG
91753: PUSH
91754: EMPTY
91755: LIST
91756: LIST
91757: PUSH
91758: LD_INT 1
91760: PUSH
91761: LD_INT 3
91763: NEG
91764: PUSH
91765: EMPTY
91766: LIST
91767: LIST
91768: PUSH
91769: LD_INT 0
91771: PUSH
91772: LD_INT 3
91774: NEG
91775: PUSH
91776: EMPTY
91777: LIST
91778: LIST
91779: PUSH
91780: LD_INT 1
91782: NEG
91783: PUSH
91784: LD_INT 4
91786: NEG
91787: PUSH
91788: EMPTY
91789: LIST
91790: LIST
91791: PUSH
91792: LD_INT 1
91794: NEG
91795: PUSH
91796: LD_INT 5
91798: NEG
91799: PUSH
91800: EMPTY
91801: LIST
91802: LIST
91803: PUSH
91804: LD_INT 2
91806: PUSH
91807: LD_INT 3
91809: NEG
91810: PUSH
91811: EMPTY
91812: LIST
91813: LIST
91814: PUSH
91815: LD_INT 2
91817: NEG
91818: PUSH
91819: LD_INT 5
91821: NEG
91822: PUSH
91823: EMPTY
91824: LIST
91825: LIST
91826: PUSH
91827: LD_INT 3
91829: PUSH
91830: LD_INT 0
91832: PUSH
91833: EMPTY
91834: LIST
91835: LIST
91836: PUSH
91837: LD_INT 3
91839: PUSH
91840: LD_INT 1
91842: NEG
91843: PUSH
91844: EMPTY
91845: LIST
91846: LIST
91847: PUSH
91848: LD_INT 4
91850: PUSH
91851: LD_INT 0
91853: PUSH
91854: EMPTY
91855: LIST
91856: LIST
91857: PUSH
91858: LD_INT 4
91860: PUSH
91861: LD_INT 1
91863: PUSH
91864: EMPTY
91865: LIST
91866: LIST
91867: PUSH
91868: LD_INT 3
91870: PUSH
91871: LD_INT 1
91873: PUSH
91874: EMPTY
91875: LIST
91876: LIST
91877: PUSH
91878: LD_INT 2
91880: PUSH
91881: LD_INT 0
91883: PUSH
91884: EMPTY
91885: LIST
91886: LIST
91887: PUSH
91888: LD_INT 2
91890: PUSH
91891: LD_INT 1
91893: NEG
91894: PUSH
91895: EMPTY
91896: LIST
91897: LIST
91898: PUSH
91899: LD_INT 2
91901: PUSH
91902: LD_INT 2
91904: NEG
91905: PUSH
91906: EMPTY
91907: LIST
91908: LIST
91909: PUSH
91910: LD_INT 4
91912: PUSH
91913: LD_INT 2
91915: PUSH
91916: EMPTY
91917: LIST
91918: LIST
91919: PUSH
91920: LD_INT 4
91922: PUSH
91923: LD_INT 4
91925: PUSH
91926: EMPTY
91927: LIST
91928: LIST
91929: PUSH
91930: LD_INT 4
91932: PUSH
91933: LD_INT 3
91935: PUSH
91936: EMPTY
91937: LIST
91938: LIST
91939: PUSH
91940: LD_INT 5
91942: PUSH
91943: LD_INT 4
91945: PUSH
91946: EMPTY
91947: LIST
91948: LIST
91949: PUSH
91950: LD_INT 5
91952: PUSH
91953: LD_INT 5
91955: PUSH
91956: EMPTY
91957: LIST
91958: LIST
91959: PUSH
91960: LD_INT 4
91962: PUSH
91963: LD_INT 5
91965: PUSH
91966: EMPTY
91967: LIST
91968: LIST
91969: PUSH
91970: LD_INT 3
91972: PUSH
91973: LD_INT 4
91975: PUSH
91976: EMPTY
91977: LIST
91978: LIST
91979: PUSH
91980: LD_INT 3
91982: PUSH
91983: LD_INT 3
91985: PUSH
91986: EMPTY
91987: LIST
91988: LIST
91989: PUSH
91990: LD_INT 5
91992: PUSH
91993: LD_INT 3
91995: PUSH
91996: EMPTY
91997: LIST
91998: LIST
91999: PUSH
92000: LD_INT 3
92002: PUSH
92003: LD_INT 5
92005: PUSH
92006: EMPTY
92007: LIST
92008: LIST
92009: PUSH
92010: LD_INT 0
92012: PUSH
92013: LD_INT 3
92015: PUSH
92016: EMPTY
92017: LIST
92018: LIST
92019: PUSH
92020: LD_INT 0
92022: PUSH
92023: LD_INT 2
92025: PUSH
92026: EMPTY
92027: LIST
92028: LIST
92029: PUSH
92030: LD_INT 1
92032: PUSH
92033: LD_INT 3
92035: PUSH
92036: EMPTY
92037: LIST
92038: LIST
92039: PUSH
92040: LD_INT 1
92042: PUSH
92043: LD_INT 4
92045: PUSH
92046: EMPTY
92047: LIST
92048: LIST
92049: PUSH
92050: LD_INT 0
92052: PUSH
92053: LD_INT 4
92055: PUSH
92056: EMPTY
92057: LIST
92058: LIST
92059: PUSH
92060: LD_INT 1
92062: NEG
92063: PUSH
92064: LD_INT 3
92066: PUSH
92067: EMPTY
92068: LIST
92069: LIST
92070: PUSH
92071: LD_INT 1
92073: NEG
92074: PUSH
92075: LD_INT 2
92077: PUSH
92078: EMPTY
92079: LIST
92080: LIST
92081: PUSH
92082: LD_INT 2
92084: PUSH
92085: LD_INT 4
92087: PUSH
92088: EMPTY
92089: LIST
92090: LIST
92091: PUSH
92092: LD_INT 2
92094: NEG
92095: PUSH
92096: LD_INT 2
92098: PUSH
92099: EMPTY
92100: LIST
92101: LIST
92102: PUSH
92103: LD_INT 4
92105: NEG
92106: PUSH
92107: LD_INT 0
92109: PUSH
92110: EMPTY
92111: LIST
92112: LIST
92113: PUSH
92114: LD_INT 4
92116: NEG
92117: PUSH
92118: LD_INT 1
92120: NEG
92121: PUSH
92122: EMPTY
92123: LIST
92124: LIST
92125: PUSH
92126: LD_INT 3
92128: NEG
92129: PUSH
92130: LD_INT 0
92132: PUSH
92133: EMPTY
92134: LIST
92135: LIST
92136: PUSH
92137: LD_INT 3
92139: NEG
92140: PUSH
92141: LD_INT 1
92143: PUSH
92144: EMPTY
92145: LIST
92146: LIST
92147: PUSH
92148: LD_INT 4
92150: NEG
92151: PUSH
92152: LD_INT 1
92154: PUSH
92155: EMPTY
92156: LIST
92157: LIST
92158: PUSH
92159: LD_INT 5
92161: NEG
92162: PUSH
92163: LD_INT 0
92165: PUSH
92166: EMPTY
92167: LIST
92168: LIST
92169: PUSH
92170: LD_INT 5
92172: NEG
92173: PUSH
92174: LD_INT 1
92176: NEG
92177: PUSH
92178: EMPTY
92179: LIST
92180: LIST
92181: PUSH
92182: LD_INT 5
92184: NEG
92185: PUSH
92186: LD_INT 2
92188: NEG
92189: PUSH
92190: EMPTY
92191: LIST
92192: LIST
92193: PUSH
92194: LD_INT 3
92196: NEG
92197: PUSH
92198: LD_INT 2
92200: PUSH
92201: EMPTY
92202: LIST
92203: LIST
92204: PUSH
92205: EMPTY
92206: LIST
92207: LIST
92208: LIST
92209: LIST
92210: LIST
92211: LIST
92212: LIST
92213: LIST
92214: LIST
92215: LIST
92216: LIST
92217: LIST
92218: LIST
92219: LIST
92220: LIST
92221: LIST
92222: LIST
92223: LIST
92224: LIST
92225: LIST
92226: LIST
92227: LIST
92228: LIST
92229: LIST
92230: LIST
92231: LIST
92232: LIST
92233: LIST
92234: LIST
92235: LIST
92236: LIST
92237: LIST
92238: LIST
92239: LIST
92240: LIST
92241: LIST
92242: LIST
92243: LIST
92244: LIST
92245: LIST
92246: LIST
92247: LIST
92248: LIST
92249: LIST
92250: LIST
92251: ST_TO_ADDR
// end ; end ;
92252: GO 92255
92254: POP
// case btype of b_depot , b_warehouse :
92255: LD_VAR 0 1
92259: PUSH
92260: LD_INT 0
92262: DOUBLE
92263: EQUAL
92264: IFTRUE 92274
92266: LD_INT 1
92268: DOUBLE
92269: EQUAL
92270: IFTRUE 92274
92272: GO 92475
92274: POP
// case nation of nation_american :
92275: LD_VAR 0 5
92279: PUSH
92280: LD_INT 1
92282: DOUBLE
92283: EQUAL
92284: IFTRUE 92288
92286: GO 92344
92288: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
92289: LD_ADDR_VAR 0 9
92293: PUSH
92294: LD_VAR 0 11
92298: PUSH
92299: LD_VAR 0 12
92303: PUSH
92304: LD_VAR 0 13
92308: PUSH
92309: LD_VAR 0 14
92313: PUSH
92314: LD_VAR 0 15
92318: PUSH
92319: LD_VAR 0 16
92323: PUSH
92324: EMPTY
92325: LIST
92326: LIST
92327: LIST
92328: LIST
92329: LIST
92330: LIST
92331: PUSH
92332: LD_VAR 0 4
92336: PUSH
92337: LD_INT 1
92339: PLUS
92340: ARRAY
92341: ST_TO_ADDR
92342: GO 92473
92344: LD_INT 2
92346: DOUBLE
92347: EQUAL
92348: IFTRUE 92352
92350: GO 92408
92352: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
92353: LD_ADDR_VAR 0 9
92357: PUSH
92358: LD_VAR 0 17
92362: PUSH
92363: LD_VAR 0 18
92367: PUSH
92368: LD_VAR 0 19
92372: PUSH
92373: LD_VAR 0 20
92377: PUSH
92378: LD_VAR 0 21
92382: PUSH
92383: LD_VAR 0 22
92387: PUSH
92388: EMPTY
92389: LIST
92390: LIST
92391: LIST
92392: LIST
92393: LIST
92394: LIST
92395: PUSH
92396: LD_VAR 0 4
92400: PUSH
92401: LD_INT 1
92403: PLUS
92404: ARRAY
92405: ST_TO_ADDR
92406: GO 92473
92408: LD_INT 3
92410: DOUBLE
92411: EQUAL
92412: IFTRUE 92416
92414: GO 92472
92416: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
92417: LD_ADDR_VAR 0 9
92421: PUSH
92422: LD_VAR 0 23
92426: PUSH
92427: LD_VAR 0 24
92431: PUSH
92432: LD_VAR 0 25
92436: PUSH
92437: LD_VAR 0 26
92441: PUSH
92442: LD_VAR 0 27
92446: PUSH
92447: LD_VAR 0 28
92451: PUSH
92452: EMPTY
92453: LIST
92454: LIST
92455: LIST
92456: LIST
92457: LIST
92458: LIST
92459: PUSH
92460: LD_VAR 0 4
92464: PUSH
92465: LD_INT 1
92467: PLUS
92468: ARRAY
92469: ST_TO_ADDR
92470: GO 92473
92472: POP
92473: GO 93022
92475: LD_INT 2
92477: DOUBLE
92478: EQUAL
92479: IFTRUE 92489
92481: LD_INT 3
92483: DOUBLE
92484: EQUAL
92485: IFTRUE 92489
92487: GO 92545
92489: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
92490: LD_ADDR_VAR 0 9
92494: PUSH
92495: LD_VAR 0 29
92499: PUSH
92500: LD_VAR 0 30
92504: PUSH
92505: LD_VAR 0 31
92509: PUSH
92510: LD_VAR 0 32
92514: PUSH
92515: LD_VAR 0 33
92519: PUSH
92520: LD_VAR 0 34
92524: PUSH
92525: EMPTY
92526: LIST
92527: LIST
92528: LIST
92529: LIST
92530: LIST
92531: LIST
92532: PUSH
92533: LD_VAR 0 4
92537: PUSH
92538: LD_INT 1
92540: PLUS
92541: ARRAY
92542: ST_TO_ADDR
92543: GO 93022
92545: LD_INT 16
92547: DOUBLE
92548: EQUAL
92549: IFTRUE 92601
92551: LD_INT 17
92553: DOUBLE
92554: EQUAL
92555: IFTRUE 92601
92557: LD_INT 18
92559: DOUBLE
92560: EQUAL
92561: IFTRUE 92601
92563: LD_INT 19
92565: DOUBLE
92566: EQUAL
92567: IFTRUE 92601
92569: LD_INT 20
92571: DOUBLE
92572: EQUAL
92573: IFTRUE 92601
92575: LD_INT 21
92577: DOUBLE
92578: EQUAL
92579: IFTRUE 92601
92581: LD_INT 23
92583: DOUBLE
92584: EQUAL
92585: IFTRUE 92601
92587: LD_INT 24
92589: DOUBLE
92590: EQUAL
92591: IFTRUE 92601
92593: LD_INT 25
92595: DOUBLE
92596: EQUAL
92597: IFTRUE 92601
92599: GO 92657
92601: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
92602: LD_ADDR_VAR 0 9
92606: PUSH
92607: LD_VAR 0 35
92611: PUSH
92612: LD_VAR 0 36
92616: PUSH
92617: LD_VAR 0 37
92621: PUSH
92622: LD_VAR 0 38
92626: PUSH
92627: LD_VAR 0 39
92631: PUSH
92632: LD_VAR 0 40
92636: PUSH
92637: EMPTY
92638: LIST
92639: LIST
92640: LIST
92641: LIST
92642: LIST
92643: LIST
92644: PUSH
92645: LD_VAR 0 4
92649: PUSH
92650: LD_INT 1
92652: PLUS
92653: ARRAY
92654: ST_TO_ADDR
92655: GO 93022
92657: LD_INT 6
92659: DOUBLE
92660: EQUAL
92661: IFTRUE 92713
92663: LD_INT 7
92665: DOUBLE
92666: EQUAL
92667: IFTRUE 92713
92669: LD_INT 8
92671: DOUBLE
92672: EQUAL
92673: IFTRUE 92713
92675: LD_INT 13
92677: DOUBLE
92678: EQUAL
92679: IFTRUE 92713
92681: LD_INT 12
92683: DOUBLE
92684: EQUAL
92685: IFTRUE 92713
92687: LD_INT 15
92689: DOUBLE
92690: EQUAL
92691: IFTRUE 92713
92693: LD_INT 11
92695: DOUBLE
92696: EQUAL
92697: IFTRUE 92713
92699: LD_INT 14
92701: DOUBLE
92702: EQUAL
92703: IFTRUE 92713
92705: LD_INT 10
92707: DOUBLE
92708: EQUAL
92709: IFTRUE 92713
92711: GO 92769
92713: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
92714: LD_ADDR_VAR 0 9
92718: PUSH
92719: LD_VAR 0 41
92723: PUSH
92724: LD_VAR 0 42
92728: PUSH
92729: LD_VAR 0 43
92733: PUSH
92734: LD_VAR 0 44
92738: PUSH
92739: LD_VAR 0 45
92743: PUSH
92744: LD_VAR 0 46
92748: PUSH
92749: EMPTY
92750: LIST
92751: LIST
92752: LIST
92753: LIST
92754: LIST
92755: LIST
92756: PUSH
92757: LD_VAR 0 4
92761: PUSH
92762: LD_INT 1
92764: PLUS
92765: ARRAY
92766: ST_TO_ADDR
92767: GO 93022
92769: LD_INT 36
92771: DOUBLE
92772: EQUAL
92773: IFTRUE 92777
92775: GO 92833
92777: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
92778: LD_ADDR_VAR 0 9
92782: PUSH
92783: LD_VAR 0 47
92787: PUSH
92788: LD_VAR 0 48
92792: PUSH
92793: LD_VAR 0 49
92797: PUSH
92798: LD_VAR 0 50
92802: PUSH
92803: LD_VAR 0 51
92807: PUSH
92808: LD_VAR 0 52
92812: PUSH
92813: EMPTY
92814: LIST
92815: LIST
92816: LIST
92817: LIST
92818: LIST
92819: LIST
92820: PUSH
92821: LD_VAR 0 4
92825: PUSH
92826: LD_INT 1
92828: PLUS
92829: ARRAY
92830: ST_TO_ADDR
92831: GO 93022
92833: LD_INT 4
92835: DOUBLE
92836: EQUAL
92837: IFTRUE 92859
92839: LD_INT 5
92841: DOUBLE
92842: EQUAL
92843: IFTRUE 92859
92845: LD_INT 34
92847: DOUBLE
92848: EQUAL
92849: IFTRUE 92859
92851: LD_INT 37
92853: DOUBLE
92854: EQUAL
92855: IFTRUE 92859
92857: GO 92915
92859: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
92860: LD_ADDR_VAR 0 9
92864: PUSH
92865: LD_VAR 0 53
92869: PUSH
92870: LD_VAR 0 54
92874: PUSH
92875: LD_VAR 0 55
92879: PUSH
92880: LD_VAR 0 56
92884: PUSH
92885: LD_VAR 0 57
92889: PUSH
92890: LD_VAR 0 58
92894: PUSH
92895: EMPTY
92896: LIST
92897: LIST
92898: LIST
92899: LIST
92900: LIST
92901: LIST
92902: PUSH
92903: LD_VAR 0 4
92907: PUSH
92908: LD_INT 1
92910: PLUS
92911: ARRAY
92912: ST_TO_ADDR
92913: GO 93022
92915: LD_INT 31
92917: DOUBLE
92918: EQUAL
92919: IFTRUE 92965
92921: LD_INT 32
92923: DOUBLE
92924: EQUAL
92925: IFTRUE 92965
92927: LD_INT 33
92929: DOUBLE
92930: EQUAL
92931: IFTRUE 92965
92933: LD_INT 27
92935: DOUBLE
92936: EQUAL
92937: IFTRUE 92965
92939: LD_INT 26
92941: DOUBLE
92942: EQUAL
92943: IFTRUE 92965
92945: LD_INT 28
92947: DOUBLE
92948: EQUAL
92949: IFTRUE 92965
92951: LD_INT 29
92953: DOUBLE
92954: EQUAL
92955: IFTRUE 92965
92957: LD_INT 30
92959: DOUBLE
92960: EQUAL
92961: IFTRUE 92965
92963: GO 93021
92965: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
92966: LD_ADDR_VAR 0 9
92970: PUSH
92971: LD_VAR 0 59
92975: PUSH
92976: LD_VAR 0 60
92980: PUSH
92981: LD_VAR 0 61
92985: PUSH
92986: LD_VAR 0 62
92990: PUSH
92991: LD_VAR 0 63
92995: PUSH
92996: LD_VAR 0 64
93000: PUSH
93001: EMPTY
93002: LIST
93003: LIST
93004: LIST
93005: LIST
93006: LIST
93007: LIST
93008: PUSH
93009: LD_VAR 0 4
93013: PUSH
93014: LD_INT 1
93016: PLUS
93017: ARRAY
93018: ST_TO_ADDR
93019: GO 93022
93021: POP
// temp_list2 = [ ] ;
93022: LD_ADDR_VAR 0 10
93026: PUSH
93027: EMPTY
93028: ST_TO_ADDR
// for i in temp_list do
93029: LD_ADDR_VAR 0 8
93033: PUSH
93034: LD_VAR 0 9
93038: PUSH
93039: FOR_IN
93040: IFFALSE 93092
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
93042: LD_ADDR_VAR 0 10
93046: PUSH
93047: LD_VAR 0 10
93051: PUSH
93052: LD_VAR 0 8
93056: PUSH
93057: LD_INT 1
93059: ARRAY
93060: PUSH
93061: LD_VAR 0 2
93065: PLUS
93066: PUSH
93067: LD_VAR 0 8
93071: PUSH
93072: LD_INT 2
93074: ARRAY
93075: PUSH
93076: LD_VAR 0 3
93080: PLUS
93081: PUSH
93082: EMPTY
93083: LIST
93084: LIST
93085: PUSH
93086: EMPTY
93087: LIST
93088: ADD
93089: ST_TO_ADDR
93090: GO 93039
93092: POP
93093: POP
// result = temp_list2 ;
93094: LD_ADDR_VAR 0 7
93098: PUSH
93099: LD_VAR 0 10
93103: ST_TO_ADDR
// end ;
93104: LD_VAR 0 7
93108: RET
// export function EnemyInRange ( unit , dist ) ; begin
93109: LD_INT 0
93111: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
93112: LD_ADDR_VAR 0 3
93116: PUSH
93117: LD_VAR 0 1
93121: PPUSH
93122: CALL_OW 255
93126: PPUSH
93127: LD_VAR 0 1
93131: PPUSH
93132: CALL_OW 250
93136: PPUSH
93137: LD_VAR 0 1
93141: PPUSH
93142: CALL_OW 251
93146: PPUSH
93147: LD_VAR 0 2
93151: PPUSH
93152: CALL 67237 0 4
93156: PUSH
93157: LD_INT 4
93159: ARRAY
93160: ST_TO_ADDR
// end ;
93161: LD_VAR 0 3
93165: RET
// export function PlayerSeeMe ( unit ) ; begin
93166: LD_INT 0
93168: PPUSH
// result := See ( your_side , unit ) ;
93169: LD_ADDR_VAR 0 2
93173: PUSH
93174: LD_OWVAR 2
93178: PPUSH
93179: LD_VAR 0 1
93183: PPUSH
93184: CALL_OW 292
93188: ST_TO_ADDR
// end ;
93189: LD_VAR 0 2
93193: RET
// export function ReverseDir ( unit ) ; begin
93194: LD_INT 0
93196: PPUSH
// if not unit then
93197: LD_VAR 0 1
93201: NOT
93202: IFFALSE 93206
// exit ;
93204: GO 93252
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
93206: LD_ADDR_VAR 0 2
93210: PUSH
93211: LD_INT 3
93213: PUSH
93214: LD_INT 4
93216: PUSH
93217: LD_INT 5
93219: PUSH
93220: LD_INT 0
93222: PUSH
93223: LD_INT 1
93225: PUSH
93226: LD_INT 2
93228: PUSH
93229: EMPTY
93230: LIST
93231: LIST
93232: LIST
93233: LIST
93234: LIST
93235: LIST
93236: PUSH
93237: LD_VAR 0 1
93241: PPUSH
93242: CALL_OW 254
93246: PUSH
93247: LD_INT 1
93249: PLUS
93250: ARRAY
93251: ST_TO_ADDR
// end ;
93252: LD_VAR 0 2
93256: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
93257: LD_INT 0
93259: PPUSH
93260: PPUSH
93261: PPUSH
93262: PPUSH
93263: PPUSH
// if not hexes then
93264: LD_VAR 0 2
93268: NOT
93269: IFFALSE 93273
// exit ;
93271: GO 93421
// dist := 9999 ;
93273: LD_ADDR_VAR 0 5
93277: PUSH
93278: LD_INT 9999
93280: ST_TO_ADDR
// for i = 1 to hexes do
93281: LD_ADDR_VAR 0 4
93285: PUSH
93286: DOUBLE
93287: LD_INT 1
93289: DEC
93290: ST_TO_ADDR
93291: LD_VAR 0 2
93295: PUSH
93296: FOR_TO
93297: IFFALSE 93409
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
93299: LD_VAR 0 1
93303: PPUSH
93304: LD_VAR 0 2
93308: PUSH
93309: LD_VAR 0 4
93313: ARRAY
93314: PUSH
93315: LD_INT 1
93317: ARRAY
93318: PPUSH
93319: LD_VAR 0 2
93323: PUSH
93324: LD_VAR 0 4
93328: ARRAY
93329: PUSH
93330: LD_INT 2
93332: ARRAY
93333: PPUSH
93334: CALL_OW 297
93338: PUSH
93339: LD_VAR 0 5
93343: LESS
93344: IFFALSE 93407
// begin hex := hexes [ i ] ;
93346: LD_ADDR_VAR 0 7
93350: PUSH
93351: LD_VAR 0 2
93355: PUSH
93356: LD_VAR 0 4
93360: ARRAY
93361: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
93362: LD_ADDR_VAR 0 5
93366: PUSH
93367: LD_VAR 0 1
93371: PPUSH
93372: LD_VAR 0 2
93376: PUSH
93377: LD_VAR 0 4
93381: ARRAY
93382: PUSH
93383: LD_INT 1
93385: ARRAY
93386: PPUSH
93387: LD_VAR 0 2
93391: PUSH
93392: LD_VAR 0 4
93396: ARRAY
93397: PUSH
93398: LD_INT 2
93400: ARRAY
93401: PPUSH
93402: CALL_OW 297
93406: ST_TO_ADDR
// end ; end ;
93407: GO 93296
93409: POP
93410: POP
// result := hex ;
93411: LD_ADDR_VAR 0 3
93415: PUSH
93416: LD_VAR 0 7
93420: ST_TO_ADDR
// end ;
93421: LD_VAR 0 3
93425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
93426: LD_INT 0
93428: PPUSH
93429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
93430: LD_VAR 0 1
93434: NOT
93435: PUSH
93436: LD_VAR 0 1
93440: PUSH
93441: LD_INT 21
93443: PUSH
93444: LD_INT 2
93446: PUSH
93447: EMPTY
93448: LIST
93449: LIST
93450: PUSH
93451: LD_INT 23
93453: PUSH
93454: LD_INT 2
93456: PUSH
93457: EMPTY
93458: LIST
93459: LIST
93460: PUSH
93461: EMPTY
93462: LIST
93463: LIST
93464: PPUSH
93465: CALL_OW 69
93469: IN
93470: NOT
93471: OR
93472: IFFALSE 93476
// exit ;
93474: GO 93523
// for i = 1 to 3 do
93476: LD_ADDR_VAR 0 3
93480: PUSH
93481: DOUBLE
93482: LD_INT 1
93484: DEC
93485: ST_TO_ADDR
93486: LD_INT 3
93488: PUSH
93489: FOR_TO
93490: IFFALSE 93521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
93492: LD_VAR 0 1
93496: PPUSH
93497: CALL_OW 250
93501: PPUSH
93502: LD_VAR 0 1
93506: PPUSH
93507: CALL_OW 251
93511: PPUSH
93512: LD_INT 1
93514: PPUSH
93515: CALL_OW 453
93519: GO 93489
93521: POP
93522: POP
// end ;
93523: LD_VAR 0 2
93527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
93528: LD_INT 0
93530: PPUSH
93531: PPUSH
93532: PPUSH
93533: PPUSH
93534: PPUSH
93535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
93536: LD_VAR 0 1
93540: NOT
93541: PUSH
93542: LD_VAR 0 2
93546: NOT
93547: OR
93548: PUSH
93549: LD_VAR 0 1
93553: PPUSH
93554: CALL_OW 314
93558: OR
93559: IFFALSE 93563
// exit ;
93561: GO 94004
// x := GetX ( enemy_unit ) ;
93563: LD_ADDR_VAR 0 7
93567: PUSH
93568: LD_VAR 0 2
93572: PPUSH
93573: CALL_OW 250
93577: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
93578: LD_ADDR_VAR 0 8
93582: PUSH
93583: LD_VAR 0 2
93587: PPUSH
93588: CALL_OW 251
93592: ST_TO_ADDR
// if not x or not y then
93593: LD_VAR 0 7
93597: NOT
93598: PUSH
93599: LD_VAR 0 8
93603: NOT
93604: OR
93605: IFFALSE 93609
// exit ;
93607: GO 94004
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
93609: LD_ADDR_VAR 0 6
93613: PUSH
93614: LD_VAR 0 7
93618: PPUSH
93619: LD_INT 0
93621: PPUSH
93622: LD_INT 4
93624: PPUSH
93625: CALL_OW 272
93629: PUSH
93630: LD_VAR 0 8
93634: PPUSH
93635: LD_INT 0
93637: PPUSH
93638: LD_INT 4
93640: PPUSH
93641: CALL_OW 273
93645: PUSH
93646: EMPTY
93647: LIST
93648: LIST
93649: PUSH
93650: LD_VAR 0 7
93654: PPUSH
93655: LD_INT 1
93657: PPUSH
93658: LD_INT 4
93660: PPUSH
93661: CALL_OW 272
93665: PUSH
93666: LD_VAR 0 8
93670: PPUSH
93671: LD_INT 1
93673: PPUSH
93674: LD_INT 4
93676: PPUSH
93677: CALL_OW 273
93681: PUSH
93682: EMPTY
93683: LIST
93684: LIST
93685: PUSH
93686: LD_VAR 0 7
93690: PPUSH
93691: LD_INT 2
93693: PPUSH
93694: LD_INT 4
93696: PPUSH
93697: CALL_OW 272
93701: PUSH
93702: LD_VAR 0 8
93706: PPUSH
93707: LD_INT 2
93709: PPUSH
93710: LD_INT 4
93712: PPUSH
93713: CALL_OW 273
93717: PUSH
93718: EMPTY
93719: LIST
93720: LIST
93721: PUSH
93722: LD_VAR 0 7
93726: PPUSH
93727: LD_INT 3
93729: PPUSH
93730: LD_INT 4
93732: PPUSH
93733: CALL_OW 272
93737: PUSH
93738: LD_VAR 0 8
93742: PPUSH
93743: LD_INT 3
93745: PPUSH
93746: LD_INT 4
93748: PPUSH
93749: CALL_OW 273
93753: PUSH
93754: EMPTY
93755: LIST
93756: LIST
93757: PUSH
93758: LD_VAR 0 7
93762: PPUSH
93763: LD_INT 4
93765: PPUSH
93766: LD_INT 4
93768: PPUSH
93769: CALL_OW 272
93773: PUSH
93774: LD_VAR 0 8
93778: PPUSH
93779: LD_INT 4
93781: PPUSH
93782: LD_INT 4
93784: PPUSH
93785: CALL_OW 273
93789: PUSH
93790: EMPTY
93791: LIST
93792: LIST
93793: PUSH
93794: LD_VAR 0 7
93798: PPUSH
93799: LD_INT 5
93801: PPUSH
93802: LD_INT 4
93804: PPUSH
93805: CALL_OW 272
93809: PUSH
93810: LD_VAR 0 8
93814: PPUSH
93815: LD_INT 5
93817: PPUSH
93818: LD_INT 4
93820: PPUSH
93821: CALL_OW 273
93825: PUSH
93826: EMPTY
93827: LIST
93828: LIST
93829: PUSH
93830: EMPTY
93831: LIST
93832: LIST
93833: LIST
93834: LIST
93835: LIST
93836: LIST
93837: ST_TO_ADDR
// for i = tmp downto 1 do
93838: LD_ADDR_VAR 0 4
93842: PUSH
93843: DOUBLE
93844: LD_VAR 0 6
93848: INC
93849: ST_TO_ADDR
93850: LD_INT 1
93852: PUSH
93853: FOR_DOWNTO
93854: IFFALSE 93955
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
93856: LD_VAR 0 6
93860: PUSH
93861: LD_VAR 0 4
93865: ARRAY
93866: PUSH
93867: LD_INT 1
93869: ARRAY
93870: PPUSH
93871: LD_VAR 0 6
93875: PUSH
93876: LD_VAR 0 4
93880: ARRAY
93881: PUSH
93882: LD_INT 2
93884: ARRAY
93885: PPUSH
93886: CALL_OW 488
93890: NOT
93891: PUSH
93892: LD_VAR 0 6
93896: PUSH
93897: LD_VAR 0 4
93901: ARRAY
93902: PUSH
93903: LD_INT 1
93905: ARRAY
93906: PPUSH
93907: LD_VAR 0 6
93911: PUSH
93912: LD_VAR 0 4
93916: ARRAY
93917: PUSH
93918: LD_INT 2
93920: ARRAY
93921: PPUSH
93922: CALL_OW 428
93926: PUSH
93927: LD_INT 0
93929: NONEQUAL
93930: OR
93931: IFFALSE 93953
// tmp := Delete ( tmp , i ) ;
93933: LD_ADDR_VAR 0 6
93937: PUSH
93938: LD_VAR 0 6
93942: PPUSH
93943: LD_VAR 0 4
93947: PPUSH
93948: CALL_OW 3
93952: ST_TO_ADDR
93953: GO 93853
93955: POP
93956: POP
// j := GetClosestHex ( unit , tmp ) ;
93957: LD_ADDR_VAR 0 5
93961: PUSH
93962: LD_VAR 0 1
93966: PPUSH
93967: LD_VAR 0 6
93971: PPUSH
93972: CALL 93257 0 2
93976: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
93977: LD_VAR 0 1
93981: PPUSH
93982: LD_VAR 0 5
93986: PUSH
93987: LD_INT 1
93989: ARRAY
93990: PPUSH
93991: LD_VAR 0 5
93995: PUSH
93996: LD_INT 2
93998: ARRAY
93999: PPUSH
94000: CALL_OW 111
// end ;
94004: LD_VAR 0 3
94008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
94009: LD_INT 0
94011: PPUSH
94012: PPUSH
94013: PPUSH
// uc_side = 0 ;
94014: LD_ADDR_OWVAR 20
94018: PUSH
94019: LD_INT 0
94021: ST_TO_ADDR
// uc_nation = 0 ;
94022: LD_ADDR_OWVAR 21
94026: PUSH
94027: LD_INT 0
94029: ST_TO_ADDR
// InitHc ;
94030: CALL_OW 19
// InitVc ;
94034: CALL_OW 20
// if mastodonts then
94038: LD_VAR 0 6
94042: IFFALSE 94109
// for i = 1 to mastodonts do
94044: LD_ADDR_VAR 0 11
94048: PUSH
94049: DOUBLE
94050: LD_INT 1
94052: DEC
94053: ST_TO_ADDR
94054: LD_VAR 0 6
94058: PUSH
94059: FOR_TO
94060: IFFALSE 94107
// begin vc_chassis := 31 ;
94062: LD_ADDR_OWVAR 37
94066: PUSH
94067: LD_INT 31
94069: ST_TO_ADDR
// vc_control := control_rider ;
94070: LD_ADDR_OWVAR 38
94074: PUSH
94075: LD_INT 4
94077: ST_TO_ADDR
// animal := CreateVehicle ;
94078: LD_ADDR_VAR 0 12
94082: PUSH
94083: CALL_OW 45
94087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94088: LD_VAR 0 12
94092: PPUSH
94093: LD_VAR 0 8
94097: PPUSH
94098: LD_INT 0
94100: PPUSH
94101: CALL 100815 0 3
// end ;
94105: GO 94059
94107: POP
94108: POP
// if horses then
94109: LD_VAR 0 5
94113: IFFALSE 94180
// for i = 1 to horses do
94115: LD_ADDR_VAR 0 11
94119: PUSH
94120: DOUBLE
94121: LD_INT 1
94123: DEC
94124: ST_TO_ADDR
94125: LD_VAR 0 5
94129: PUSH
94130: FOR_TO
94131: IFFALSE 94178
// begin hc_class := 21 ;
94133: LD_ADDR_OWVAR 28
94137: PUSH
94138: LD_INT 21
94140: ST_TO_ADDR
// hc_gallery :=  ;
94141: LD_ADDR_OWVAR 33
94145: PUSH
94146: LD_STRING 
94148: ST_TO_ADDR
// animal := CreateHuman ;
94149: LD_ADDR_VAR 0 12
94153: PUSH
94154: CALL_OW 44
94158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94159: LD_VAR 0 12
94163: PPUSH
94164: LD_VAR 0 8
94168: PPUSH
94169: LD_INT 0
94171: PPUSH
94172: CALL 100815 0 3
// end ;
94176: GO 94130
94178: POP
94179: POP
// if birds then
94180: LD_VAR 0 1
94184: IFFALSE 94251
// for i = 1 to birds do
94186: LD_ADDR_VAR 0 11
94190: PUSH
94191: DOUBLE
94192: LD_INT 1
94194: DEC
94195: ST_TO_ADDR
94196: LD_VAR 0 1
94200: PUSH
94201: FOR_TO
94202: IFFALSE 94249
// begin hc_class = 18 ;
94204: LD_ADDR_OWVAR 28
94208: PUSH
94209: LD_INT 18
94211: ST_TO_ADDR
// hc_gallery =  ;
94212: LD_ADDR_OWVAR 33
94216: PUSH
94217: LD_STRING 
94219: ST_TO_ADDR
// animal := CreateHuman ;
94220: LD_ADDR_VAR 0 12
94224: PUSH
94225: CALL_OW 44
94229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94230: LD_VAR 0 12
94234: PPUSH
94235: LD_VAR 0 8
94239: PPUSH
94240: LD_INT 0
94242: PPUSH
94243: CALL 100815 0 3
// end ;
94247: GO 94201
94249: POP
94250: POP
// if tigers then
94251: LD_VAR 0 2
94255: IFFALSE 94339
// for i = 1 to tigers do
94257: LD_ADDR_VAR 0 11
94261: PUSH
94262: DOUBLE
94263: LD_INT 1
94265: DEC
94266: ST_TO_ADDR
94267: LD_VAR 0 2
94271: PUSH
94272: FOR_TO
94273: IFFALSE 94337
// begin hc_class = class_tiger ;
94275: LD_ADDR_OWVAR 28
94279: PUSH
94280: LD_INT 14
94282: ST_TO_ADDR
// hc_gallery =  ;
94283: LD_ADDR_OWVAR 33
94287: PUSH
94288: LD_STRING 
94290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
94291: LD_ADDR_OWVAR 35
94295: PUSH
94296: LD_INT 7
94298: NEG
94299: PPUSH
94300: LD_INT 7
94302: PPUSH
94303: CALL_OW 12
94307: ST_TO_ADDR
// animal := CreateHuman ;
94308: LD_ADDR_VAR 0 12
94312: PUSH
94313: CALL_OW 44
94317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94318: LD_VAR 0 12
94322: PPUSH
94323: LD_VAR 0 8
94327: PPUSH
94328: LD_INT 0
94330: PPUSH
94331: CALL 100815 0 3
// end ;
94335: GO 94272
94337: POP
94338: POP
// if apemans then
94339: LD_VAR 0 3
94343: IFFALSE 94466
// for i = 1 to apemans do
94345: LD_ADDR_VAR 0 11
94349: PUSH
94350: DOUBLE
94351: LD_INT 1
94353: DEC
94354: ST_TO_ADDR
94355: LD_VAR 0 3
94359: PUSH
94360: FOR_TO
94361: IFFALSE 94464
// begin hc_class = class_apeman ;
94363: LD_ADDR_OWVAR 28
94367: PUSH
94368: LD_INT 12
94370: ST_TO_ADDR
// hc_gallery =  ;
94371: LD_ADDR_OWVAR 33
94375: PUSH
94376: LD_STRING 
94378: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
94379: LD_ADDR_OWVAR 35
94383: PUSH
94384: LD_INT 5
94386: NEG
94387: PPUSH
94388: LD_INT 5
94390: PPUSH
94391: CALL_OW 12
94395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
94396: LD_ADDR_OWVAR 31
94400: PUSH
94401: LD_INT 1
94403: PPUSH
94404: LD_INT 3
94406: PPUSH
94407: CALL_OW 12
94411: PUSH
94412: LD_INT 1
94414: PPUSH
94415: LD_INT 3
94417: PPUSH
94418: CALL_OW 12
94422: PUSH
94423: LD_INT 0
94425: PUSH
94426: LD_INT 0
94428: PUSH
94429: EMPTY
94430: LIST
94431: LIST
94432: LIST
94433: LIST
94434: ST_TO_ADDR
// animal := CreateHuman ;
94435: LD_ADDR_VAR 0 12
94439: PUSH
94440: CALL_OW 44
94444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94445: LD_VAR 0 12
94449: PPUSH
94450: LD_VAR 0 8
94454: PPUSH
94455: LD_INT 0
94457: PPUSH
94458: CALL 100815 0 3
// end ;
94462: GO 94360
94464: POP
94465: POP
// if enchidnas then
94466: LD_VAR 0 4
94470: IFFALSE 94537
// for i = 1 to enchidnas do
94472: LD_ADDR_VAR 0 11
94476: PUSH
94477: DOUBLE
94478: LD_INT 1
94480: DEC
94481: ST_TO_ADDR
94482: LD_VAR 0 4
94486: PUSH
94487: FOR_TO
94488: IFFALSE 94535
// begin hc_class = 13 ;
94490: LD_ADDR_OWVAR 28
94494: PUSH
94495: LD_INT 13
94497: ST_TO_ADDR
// hc_gallery =  ;
94498: LD_ADDR_OWVAR 33
94502: PUSH
94503: LD_STRING 
94505: ST_TO_ADDR
// animal := CreateHuman ;
94506: LD_ADDR_VAR 0 12
94510: PUSH
94511: CALL_OW 44
94515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
94516: LD_VAR 0 12
94520: PPUSH
94521: LD_VAR 0 8
94525: PPUSH
94526: LD_INT 0
94528: PPUSH
94529: CALL 100815 0 3
// end ;
94533: GO 94487
94535: POP
94536: POP
// if fishes then
94537: LD_VAR 0 7
94541: IFFALSE 94608
// for i = 1 to fishes do
94543: LD_ADDR_VAR 0 11
94547: PUSH
94548: DOUBLE
94549: LD_INT 1
94551: DEC
94552: ST_TO_ADDR
94553: LD_VAR 0 7
94557: PUSH
94558: FOR_TO
94559: IFFALSE 94606
// begin hc_class = 20 ;
94561: LD_ADDR_OWVAR 28
94565: PUSH
94566: LD_INT 20
94568: ST_TO_ADDR
// hc_gallery =  ;
94569: LD_ADDR_OWVAR 33
94573: PUSH
94574: LD_STRING 
94576: ST_TO_ADDR
// animal := CreateHuman ;
94577: LD_ADDR_VAR 0 12
94581: PUSH
94582: CALL_OW 44
94586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
94587: LD_VAR 0 12
94591: PPUSH
94592: LD_VAR 0 9
94596: PPUSH
94597: LD_INT 0
94599: PPUSH
94600: CALL 100815 0 3
// end ;
94604: GO 94558
94606: POP
94607: POP
// end ;
94608: LD_VAR 0 10
94612: RET
// export function WantHeal ( sci , unit ) ; begin
94613: LD_INT 0
94615: PPUSH
// if GetTaskList ( sci ) > 0 then
94616: LD_VAR 0 1
94620: PPUSH
94621: CALL_OW 437
94625: PUSH
94626: LD_INT 0
94628: GREATER
94629: IFFALSE 94699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
94631: LD_VAR 0 1
94635: PPUSH
94636: CALL_OW 437
94640: PUSH
94641: LD_INT 1
94643: ARRAY
94644: PUSH
94645: LD_INT 1
94647: ARRAY
94648: PUSH
94649: LD_STRING l
94651: EQUAL
94652: PUSH
94653: LD_VAR 0 1
94657: PPUSH
94658: CALL_OW 437
94662: PUSH
94663: LD_INT 1
94665: ARRAY
94666: PUSH
94667: LD_INT 4
94669: ARRAY
94670: PUSH
94671: LD_VAR 0 2
94675: EQUAL
94676: AND
94677: IFFALSE 94689
// result := true else
94679: LD_ADDR_VAR 0 3
94683: PUSH
94684: LD_INT 1
94686: ST_TO_ADDR
94687: GO 94697
// result := false ;
94689: LD_ADDR_VAR 0 3
94693: PUSH
94694: LD_INT 0
94696: ST_TO_ADDR
// end else
94697: GO 94707
// result := false ;
94699: LD_ADDR_VAR 0 3
94703: PUSH
94704: LD_INT 0
94706: ST_TO_ADDR
// end ;
94707: LD_VAR 0 3
94711: RET
// export function HealTarget ( sci ) ; begin
94712: LD_INT 0
94714: PPUSH
// if not sci then
94715: LD_VAR 0 1
94719: NOT
94720: IFFALSE 94724
// exit ;
94722: GO 94789
// result := 0 ;
94724: LD_ADDR_VAR 0 2
94728: PUSH
94729: LD_INT 0
94731: ST_TO_ADDR
// if GetTaskList ( sci ) then
94732: LD_VAR 0 1
94736: PPUSH
94737: CALL_OW 437
94741: IFFALSE 94789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
94743: LD_VAR 0 1
94747: PPUSH
94748: CALL_OW 437
94752: PUSH
94753: LD_INT 1
94755: ARRAY
94756: PUSH
94757: LD_INT 1
94759: ARRAY
94760: PUSH
94761: LD_STRING l
94763: EQUAL
94764: IFFALSE 94789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
94766: LD_ADDR_VAR 0 2
94770: PUSH
94771: LD_VAR 0 1
94775: PPUSH
94776: CALL_OW 437
94780: PUSH
94781: LD_INT 1
94783: ARRAY
94784: PUSH
94785: LD_INT 4
94787: ARRAY
94788: ST_TO_ADDR
// end ;
94789: LD_VAR 0 2
94793: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
94794: LD_INT 0
94796: PPUSH
94797: PPUSH
94798: PPUSH
94799: PPUSH
94800: PPUSH
94801: PPUSH
94802: PPUSH
94803: PPUSH
94804: PPUSH
94805: PPUSH
94806: PPUSH
94807: PPUSH
94808: PPUSH
94809: PPUSH
94810: PPUSH
94811: PPUSH
94812: PPUSH
94813: PPUSH
94814: PPUSH
94815: PPUSH
94816: PPUSH
94817: PPUSH
94818: PPUSH
94819: PPUSH
94820: PPUSH
94821: PPUSH
94822: PPUSH
94823: PPUSH
94824: PPUSH
94825: PPUSH
94826: PPUSH
94827: PPUSH
94828: PPUSH
// if not list then
94829: LD_VAR 0 1
94833: NOT
94834: IFFALSE 94838
// exit ;
94836: GO 99426
// base := list [ 1 ] ;
94838: LD_ADDR_VAR 0 3
94842: PUSH
94843: LD_VAR 0 1
94847: PUSH
94848: LD_INT 1
94850: ARRAY
94851: ST_TO_ADDR
// group := list [ 2 ] ;
94852: LD_ADDR_VAR 0 4
94856: PUSH
94857: LD_VAR 0 1
94861: PUSH
94862: LD_INT 2
94864: ARRAY
94865: ST_TO_ADDR
// path := list [ 3 ] ;
94866: LD_ADDR_VAR 0 5
94870: PUSH
94871: LD_VAR 0 1
94875: PUSH
94876: LD_INT 3
94878: ARRAY
94879: ST_TO_ADDR
// flags := list [ 4 ] ;
94880: LD_ADDR_VAR 0 6
94884: PUSH
94885: LD_VAR 0 1
94889: PUSH
94890: LD_INT 4
94892: ARRAY
94893: ST_TO_ADDR
// mined := [ ] ;
94894: LD_ADDR_VAR 0 27
94898: PUSH
94899: EMPTY
94900: ST_TO_ADDR
// bombed := [ ] ;
94901: LD_ADDR_VAR 0 28
94905: PUSH
94906: EMPTY
94907: ST_TO_ADDR
// healers := [ ] ;
94908: LD_ADDR_VAR 0 31
94912: PUSH
94913: EMPTY
94914: ST_TO_ADDR
// to_heal := [ ] ;
94915: LD_ADDR_VAR 0 30
94919: PUSH
94920: EMPTY
94921: ST_TO_ADDR
// repairs := [ ] ;
94922: LD_ADDR_VAR 0 33
94926: PUSH
94927: EMPTY
94928: ST_TO_ADDR
// to_repair := [ ] ;
94929: LD_ADDR_VAR 0 32
94933: PUSH
94934: EMPTY
94935: ST_TO_ADDR
// if not group or not path then
94936: LD_VAR 0 4
94940: NOT
94941: PUSH
94942: LD_VAR 0 5
94946: NOT
94947: OR
94948: IFFALSE 94952
// exit ;
94950: GO 99426
// if flags then
94952: LD_VAR 0 6
94956: IFFALSE 95100
// begin f_ignore_area := flags [ 1 ] ;
94958: LD_ADDR_VAR 0 17
94962: PUSH
94963: LD_VAR 0 6
94967: PUSH
94968: LD_INT 1
94970: ARRAY
94971: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
94972: LD_ADDR_VAR 0 18
94976: PUSH
94977: LD_VAR 0 6
94981: PUSH
94982: LD_INT 2
94984: ARRAY
94985: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
94986: LD_ADDR_VAR 0 19
94990: PUSH
94991: LD_VAR 0 6
94995: PUSH
94996: LD_INT 3
94998: ARRAY
94999: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
95000: LD_ADDR_VAR 0 20
95004: PUSH
95005: LD_VAR 0 6
95009: PUSH
95010: LD_INT 4
95012: ARRAY
95013: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
95014: LD_ADDR_VAR 0 21
95018: PUSH
95019: LD_VAR 0 6
95023: PUSH
95024: LD_INT 5
95026: ARRAY
95027: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
95028: LD_ADDR_VAR 0 22
95032: PUSH
95033: LD_VAR 0 6
95037: PUSH
95038: LD_INT 6
95040: ARRAY
95041: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
95042: LD_ADDR_VAR 0 23
95046: PUSH
95047: LD_VAR 0 6
95051: PUSH
95052: LD_INT 7
95054: ARRAY
95055: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
95056: LD_ADDR_VAR 0 24
95060: PUSH
95061: LD_VAR 0 6
95065: PUSH
95066: LD_INT 8
95068: ARRAY
95069: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
95070: LD_ADDR_VAR 0 25
95074: PUSH
95075: LD_VAR 0 6
95079: PUSH
95080: LD_INT 9
95082: ARRAY
95083: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
95084: LD_ADDR_VAR 0 26
95088: PUSH
95089: LD_VAR 0 6
95093: PUSH
95094: LD_INT 10
95096: ARRAY
95097: ST_TO_ADDR
// end else
95098: GO 95180
// begin f_ignore_area := false ;
95100: LD_ADDR_VAR 0 17
95104: PUSH
95105: LD_INT 0
95107: ST_TO_ADDR
// f_capture := false ;
95108: LD_ADDR_VAR 0 18
95112: PUSH
95113: LD_INT 0
95115: ST_TO_ADDR
// f_ignore_civ := false ;
95116: LD_ADDR_VAR 0 19
95120: PUSH
95121: LD_INT 0
95123: ST_TO_ADDR
// f_murder := false ;
95124: LD_ADDR_VAR 0 20
95128: PUSH
95129: LD_INT 0
95131: ST_TO_ADDR
// f_mines := false ;
95132: LD_ADDR_VAR 0 21
95136: PUSH
95137: LD_INT 0
95139: ST_TO_ADDR
// f_repair := false ;
95140: LD_ADDR_VAR 0 22
95144: PUSH
95145: LD_INT 0
95147: ST_TO_ADDR
// f_heal := false ;
95148: LD_ADDR_VAR 0 23
95152: PUSH
95153: LD_INT 0
95155: ST_TO_ADDR
// f_spacetime := false ;
95156: LD_ADDR_VAR 0 24
95160: PUSH
95161: LD_INT 0
95163: ST_TO_ADDR
// f_attack_depot := false ;
95164: LD_ADDR_VAR 0 25
95168: PUSH
95169: LD_INT 0
95171: ST_TO_ADDR
// f_crawl := false ;
95172: LD_ADDR_VAR 0 26
95176: PUSH
95177: LD_INT 0
95179: ST_TO_ADDR
// end ; if f_heal then
95180: LD_VAR 0 23
95184: IFFALSE 95211
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
95186: LD_ADDR_VAR 0 31
95190: PUSH
95191: LD_VAR 0 4
95195: PPUSH
95196: LD_INT 25
95198: PUSH
95199: LD_INT 4
95201: PUSH
95202: EMPTY
95203: LIST
95204: LIST
95205: PPUSH
95206: CALL_OW 72
95210: ST_TO_ADDR
// if f_repair then
95211: LD_VAR 0 22
95215: IFFALSE 95242
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
95217: LD_ADDR_VAR 0 33
95221: PUSH
95222: LD_VAR 0 4
95226: PPUSH
95227: LD_INT 25
95229: PUSH
95230: LD_INT 3
95232: PUSH
95233: EMPTY
95234: LIST
95235: LIST
95236: PPUSH
95237: CALL_OW 72
95241: ST_TO_ADDR
// units_path := [ ] ;
95242: LD_ADDR_VAR 0 16
95246: PUSH
95247: EMPTY
95248: ST_TO_ADDR
// for i = 1 to group do
95249: LD_ADDR_VAR 0 7
95253: PUSH
95254: DOUBLE
95255: LD_INT 1
95257: DEC
95258: ST_TO_ADDR
95259: LD_VAR 0 4
95263: PUSH
95264: FOR_TO
95265: IFFALSE 95294
// units_path := Replace ( units_path , i , path ) ;
95267: LD_ADDR_VAR 0 16
95271: PUSH
95272: LD_VAR 0 16
95276: PPUSH
95277: LD_VAR 0 7
95281: PPUSH
95282: LD_VAR 0 5
95286: PPUSH
95287: CALL_OW 1
95291: ST_TO_ADDR
95292: GO 95264
95294: POP
95295: POP
// repeat for i = group downto 1 do
95296: LD_ADDR_VAR 0 7
95300: PUSH
95301: DOUBLE
95302: LD_VAR 0 4
95306: INC
95307: ST_TO_ADDR
95308: LD_INT 1
95310: PUSH
95311: FOR_DOWNTO
95312: IFFALSE 99408
// begin wait ( 5 ) ;
95314: LD_INT 5
95316: PPUSH
95317: CALL_OW 67
// tmp := [ ] ;
95321: LD_ADDR_VAR 0 14
95325: PUSH
95326: EMPTY
95327: ST_TO_ADDR
// attacking := false ;
95328: LD_ADDR_VAR 0 29
95332: PUSH
95333: LD_INT 0
95335: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
95336: LD_VAR 0 4
95340: PUSH
95341: LD_VAR 0 7
95345: ARRAY
95346: PPUSH
95347: CALL_OW 301
95351: PUSH
95352: LD_VAR 0 4
95356: PUSH
95357: LD_VAR 0 7
95361: ARRAY
95362: NOT
95363: OR
95364: IFFALSE 95473
// begin if GetType ( group [ i ] ) = unit_human then
95366: LD_VAR 0 4
95370: PUSH
95371: LD_VAR 0 7
95375: ARRAY
95376: PPUSH
95377: CALL_OW 247
95381: PUSH
95382: LD_INT 1
95384: EQUAL
95385: IFFALSE 95431
// begin to_heal := to_heal diff group [ i ] ;
95387: LD_ADDR_VAR 0 30
95391: PUSH
95392: LD_VAR 0 30
95396: PUSH
95397: LD_VAR 0 4
95401: PUSH
95402: LD_VAR 0 7
95406: ARRAY
95407: DIFF
95408: ST_TO_ADDR
// healers := healers diff group [ i ] ;
95409: LD_ADDR_VAR 0 31
95413: PUSH
95414: LD_VAR 0 31
95418: PUSH
95419: LD_VAR 0 4
95423: PUSH
95424: LD_VAR 0 7
95428: ARRAY
95429: DIFF
95430: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
95431: LD_ADDR_VAR 0 4
95435: PUSH
95436: LD_VAR 0 4
95440: PPUSH
95441: LD_VAR 0 7
95445: PPUSH
95446: CALL_OW 3
95450: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
95451: LD_ADDR_VAR 0 16
95455: PUSH
95456: LD_VAR 0 16
95460: PPUSH
95461: LD_VAR 0 7
95465: PPUSH
95466: CALL_OW 3
95470: ST_TO_ADDR
// continue ;
95471: GO 95311
// end ; if f_repair then
95473: LD_VAR 0 22
95477: IFFALSE 95966
// begin if GetType ( group [ i ] ) = unit_vehicle then
95479: LD_VAR 0 4
95483: PUSH
95484: LD_VAR 0 7
95488: ARRAY
95489: PPUSH
95490: CALL_OW 247
95494: PUSH
95495: LD_INT 2
95497: EQUAL
95498: IFFALSE 95688
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
95500: LD_VAR 0 4
95504: PUSH
95505: LD_VAR 0 7
95509: ARRAY
95510: PPUSH
95511: CALL_OW 256
95515: PUSH
95516: LD_INT 700
95518: LESS
95519: PUSH
95520: LD_VAR 0 4
95524: PUSH
95525: LD_VAR 0 7
95529: ARRAY
95530: PUSH
95531: LD_VAR 0 32
95535: IN
95536: NOT
95537: AND
95538: IFFALSE 95562
// to_repair := to_repair union group [ i ] ;
95540: LD_ADDR_VAR 0 32
95544: PUSH
95545: LD_VAR 0 32
95549: PUSH
95550: LD_VAR 0 4
95554: PUSH
95555: LD_VAR 0 7
95559: ARRAY
95560: UNION
95561: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
95562: LD_VAR 0 4
95566: PUSH
95567: LD_VAR 0 7
95571: ARRAY
95572: PPUSH
95573: CALL_OW 256
95577: PUSH
95578: LD_INT 1000
95580: EQUAL
95581: PUSH
95582: LD_VAR 0 4
95586: PUSH
95587: LD_VAR 0 7
95591: ARRAY
95592: PUSH
95593: LD_VAR 0 32
95597: IN
95598: AND
95599: IFFALSE 95623
// to_repair := to_repair diff group [ i ] ;
95601: LD_ADDR_VAR 0 32
95605: PUSH
95606: LD_VAR 0 32
95610: PUSH
95611: LD_VAR 0 4
95615: PUSH
95616: LD_VAR 0 7
95620: ARRAY
95621: DIFF
95622: ST_TO_ADDR
// if group [ i ] in to_repair then
95623: LD_VAR 0 4
95627: PUSH
95628: LD_VAR 0 7
95632: ARRAY
95633: PUSH
95634: LD_VAR 0 32
95638: IN
95639: IFFALSE 95686
// begin if not IsInArea ( group [ i ] , f_repair ) then
95641: LD_VAR 0 4
95645: PUSH
95646: LD_VAR 0 7
95650: ARRAY
95651: PPUSH
95652: LD_VAR 0 22
95656: PPUSH
95657: CALL_OW 308
95661: NOT
95662: IFFALSE 95684
// ComMoveToArea ( group [ i ] , f_repair ) ;
95664: LD_VAR 0 4
95668: PUSH
95669: LD_VAR 0 7
95673: ARRAY
95674: PPUSH
95675: LD_VAR 0 22
95679: PPUSH
95680: CALL_OW 113
// continue ;
95684: GO 95311
// end ; end else
95686: GO 95966
// if group [ i ] in repairs then
95688: LD_VAR 0 4
95692: PUSH
95693: LD_VAR 0 7
95697: ARRAY
95698: PUSH
95699: LD_VAR 0 33
95703: IN
95704: IFFALSE 95966
// begin if IsInUnit ( group [ i ] ) then
95706: LD_VAR 0 4
95710: PUSH
95711: LD_VAR 0 7
95715: ARRAY
95716: PPUSH
95717: CALL_OW 310
95721: IFFALSE 95789
// begin z := IsInUnit ( group [ i ] ) ;
95723: LD_ADDR_VAR 0 13
95727: PUSH
95728: LD_VAR 0 4
95732: PUSH
95733: LD_VAR 0 7
95737: ARRAY
95738: PPUSH
95739: CALL_OW 310
95743: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
95744: LD_VAR 0 13
95748: PUSH
95749: LD_VAR 0 32
95753: IN
95754: PUSH
95755: LD_VAR 0 13
95759: PPUSH
95760: LD_VAR 0 22
95764: PPUSH
95765: CALL_OW 308
95769: AND
95770: IFFALSE 95787
// ComExitVehicle ( group [ i ] ) ;
95772: LD_VAR 0 4
95776: PUSH
95777: LD_VAR 0 7
95781: ARRAY
95782: PPUSH
95783: CALL_OW 121
// end else
95787: GO 95966
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
95789: LD_ADDR_VAR 0 13
95793: PUSH
95794: LD_VAR 0 4
95798: PPUSH
95799: LD_INT 95
95801: PUSH
95802: LD_VAR 0 22
95806: PUSH
95807: EMPTY
95808: LIST
95809: LIST
95810: PUSH
95811: LD_INT 58
95813: PUSH
95814: EMPTY
95815: LIST
95816: PUSH
95817: EMPTY
95818: LIST
95819: LIST
95820: PPUSH
95821: CALL_OW 72
95825: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
95826: LD_VAR 0 4
95830: PUSH
95831: LD_VAR 0 7
95835: ARRAY
95836: PPUSH
95837: CALL_OW 314
95841: NOT
95842: IFFALSE 95964
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
95844: LD_ADDR_VAR 0 10
95848: PUSH
95849: LD_VAR 0 13
95853: PPUSH
95854: LD_VAR 0 4
95858: PUSH
95859: LD_VAR 0 7
95863: ARRAY
95864: PPUSH
95865: CALL_OW 74
95869: ST_TO_ADDR
// if not x then
95870: LD_VAR 0 10
95874: NOT
95875: IFFALSE 95879
// continue ;
95877: GO 95311
// if GetLives ( x ) < 1000 then
95879: LD_VAR 0 10
95883: PPUSH
95884: CALL_OW 256
95888: PUSH
95889: LD_INT 1000
95891: LESS
95892: IFFALSE 95916
// ComRepairVehicle ( group [ i ] , x ) else
95894: LD_VAR 0 4
95898: PUSH
95899: LD_VAR 0 7
95903: ARRAY
95904: PPUSH
95905: LD_VAR 0 10
95909: PPUSH
95910: CALL_OW 129
95914: GO 95964
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
95916: LD_VAR 0 23
95920: PUSH
95921: LD_VAR 0 4
95925: PUSH
95926: LD_VAR 0 7
95930: ARRAY
95931: PPUSH
95932: CALL_OW 256
95936: PUSH
95937: LD_INT 1000
95939: LESS
95940: AND
95941: NOT
95942: IFFALSE 95964
// ComEnterUnit ( group [ i ] , x ) ;
95944: LD_VAR 0 4
95948: PUSH
95949: LD_VAR 0 7
95953: ARRAY
95954: PPUSH
95955: LD_VAR 0 10
95959: PPUSH
95960: CALL_OW 120
// end ; continue ;
95964: GO 95311
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
95966: LD_VAR 0 23
95970: PUSH
95971: LD_VAR 0 4
95975: PUSH
95976: LD_VAR 0 7
95980: ARRAY
95981: PPUSH
95982: CALL_OW 247
95986: PUSH
95987: LD_INT 1
95989: EQUAL
95990: AND
95991: IFFALSE 96469
// begin if group [ i ] in healers then
95993: LD_VAR 0 4
95997: PUSH
95998: LD_VAR 0 7
96002: ARRAY
96003: PUSH
96004: LD_VAR 0 31
96008: IN
96009: IFFALSE 96282
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
96011: LD_VAR 0 4
96015: PUSH
96016: LD_VAR 0 7
96020: ARRAY
96021: PPUSH
96022: LD_VAR 0 23
96026: PPUSH
96027: CALL_OW 308
96031: NOT
96032: PUSH
96033: LD_VAR 0 4
96037: PUSH
96038: LD_VAR 0 7
96042: ARRAY
96043: PPUSH
96044: CALL_OW 314
96048: NOT
96049: AND
96050: IFFALSE 96074
// ComMoveToArea ( group [ i ] , f_heal ) else
96052: LD_VAR 0 4
96056: PUSH
96057: LD_VAR 0 7
96061: ARRAY
96062: PPUSH
96063: LD_VAR 0 23
96067: PPUSH
96068: CALL_OW 113
96072: GO 96280
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
96074: LD_VAR 0 4
96078: PUSH
96079: LD_VAR 0 7
96083: ARRAY
96084: PPUSH
96085: CALL 94712 0 1
96089: PPUSH
96090: CALL_OW 256
96094: PUSH
96095: LD_INT 1000
96097: EQUAL
96098: IFFALSE 96117
// ComStop ( group [ i ] ) else
96100: LD_VAR 0 4
96104: PUSH
96105: LD_VAR 0 7
96109: ARRAY
96110: PPUSH
96111: CALL_OW 141
96115: GO 96280
// if not HasTask ( group [ i ] ) and to_heal then
96117: LD_VAR 0 4
96121: PUSH
96122: LD_VAR 0 7
96126: ARRAY
96127: PPUSH
96128: CALL_OW 314
96132: NOT
96133: PUSH
96134: LD_VAR 0 30
96138: AND
96139: IFFALSE 96280
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
96141: LD_ADDR_VAR 0 13
96145: PUSH
96146: LD_VAR 0 30
96150: PPUSH
96151: LD_INT 3
96153: PUSH
96154: LD_INT 54
96156: PUSH
96157: EMPTY
96158: LIST
96159: PUSH
96160: EMPTY
96161: LIST
96162: LIST
96163: PPUSH
96164: CALL_OW 72
96168: PPUSH
96169: LD_VAR 0 4
96173: PUSH
96174: LD_VAR 0 7
96178: ARRAY
96179: PPUSH
96180: CALL_OW 74
96184: ST_TO_ADDR
// if z then
96185: LD_VAR 0 13
96189: IFFALSE 96280
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
96191: LD_INT 91
96193: PUSH
96194: LD_VAR 0 13
96198: PUSH
96199: LD_INT 10
96201: PUSH
96202: EMPTY
96203: LIST
96204: LIST
96205: LIST
96206: PUSH
96207: LD_INT 81
96209: PUSH
96210: LD_VAR 0 13
96214: PPUSH
96215: CALL_OW 255
96219: PUSH
96220: EMPTY
96221: LIST
96222: LIST
96223: PUSH
96224: EMPTY
96225: LIST
96226: LIST
96227: PPUSH
96228: CALL_OW 69
96232: PUSH
96233: LD_INT 0
96235: EQUAL
96236: IFFALSE 96260
// ComHeal ( group [ i ] , z ) else
96238: LD_VAR 0 4
96242: PUSH
96243: LD_VAR 0 7
96247: ARRAY
96248: PPUSH
96249: LD_VAR 0 13
96253: PPUSH
96254: CALL_OW 128
96258: GO 96280
// ComMoveToArea ( group [ i ] , f_heal ) ;
96260: LD_VAR 0 4
96264: PUSH
96265: LD_VAR 0 7
96269: ARRAY
96270: PPUSH
96271: LD_VAR 0 23
96275: PPUSH
96276: CALL_OW 113
// end ; continue ;
96280: GO 95311
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
96282: LD_VAR 0 4
96286: PUSH
96287: LD_VAR 0 7
96291: ARRAY
96292: PPUSH
96293: CALL_OW 256
96297: PUSH
96298: LD_INT 700
96300: LESS
96301: PUSH
96302: LD_VAR 0 4
96306: PUSH
96307: LD_VAR 0 7
96311: ARRAY
96312: PUSH
96313: LD_VAR 0 30
96317: IN
96318: NOT
96319: AND
96320: IFFALSE 96344
// to_heal := to_heal union group [ i ] ;
96322: LD_ADDR_VAR 0 30
96326: PUSH
96327: LD_VAR 0 30
96331: PUSH
96332: LD_VAR 0 4
96336: PUSH
96337: LD_VAR 0 7
96341: ARRAY
96342: UNION
96343: ST_TO_ADDR
// if group [ i ] in to_heal then
96344: LD_VAR 0 4
96348: PUSH
96349: LD_VAR 0 7
96353: ARRAY
96354: PUSH
96355: LD_VAR 0 30
96359: IN
96360: IFFALSE 96469
// begin if GetLives ( group [ i ] ) = 1000 then
96362: LD_VAR 0 4
96366: PUSH
96367: LD_VAR 0 7
96371: ARRAY
96372: PPUSH
96373: CALL_OW 256
96377: PUSH
96378: LD_INT 1000
96380: EQUAL
96381: IFFALSE 96407
// to_heal := to_heal diff group [ i ] else
96383: LD_ADDR_VAR 0 30
96387: PUSH
96388: LD_VAR 0 30
96392: PUSH
96393: LD_VAR 0 4
96397: PUSH
96398: LD_VAR 0 7
96402: ARRAY
96403: DIFF
96404: ST_TO_ADDR
96405: GO 96469
// begin if not IsInArea ( group [ i ] , to_heal ) then
96407: LD_VAR 0 4
96411: PUSH
96412: LD_VAR 0 7
96416: ARRAY
96417: PPUSH
96418: LD_VAR 0 30
96422: PPUSH
96423: CALL_OW 308
96427: NOT
96428: IFFALSE 96452
// ComMoveToArea ( group [ i ] , f_heal ) else
96430: LD_VAR 0 4
96434: PUSH
96435: LD_VAR 0 7
96439: ARRAY
96440: PPUSH
96441: LD_VAR 0 23
96445: PPUSH
96446: CALL_OW 113
96450: GO 96467
// ComHold ( group [ i ] ) ;
96452: LD_VAR 0 4
96456: PUSH
96457: LD_VAR 0 7
96461: ARRAY
96462: PPUSH
96463: CALL_OW 140
// continue ;
96467: GO 95311
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
96469: LD_VAR 0 4
96473: PUSH
96474: LD_VAR 0 7
96478: ARRAY
96479: PPUSH
96480: LD_INT 10
96482: PPUSH
96483: CALL 93109 0 2
96487: NOT
96488: PUSH
96489: LD_VAR 0 16
96493: PUSH
96494: LD_VAR 0 7
96498: ARRAY
96499: PUSH
96500: EMPTY
96501: EQUAL
96502: NOT
96503: AND
96504: IFFALSE 96770
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
96506: LD_VAR 0 4
96510: PUSH
96511: LD_VAR 0 7
96515: ARRAY
96516: PPUSH
96517: CALL_OW 262
96521: PUSH
96522: LD_INT 1
96524: PUSH
96525: LD_INT 2
96527: PUSH
96528: EMPTY
96529: LIST
96530: LIST
96531: IN
96532: IFFALSE 96573
// if GetFuel ( group [ i ] ) < 10 then
96534: LD_VAR 0 4
96538: PUSH
96539: LD_VAR 0 7
96543: ARRAY
96544: PPUSH
96545: CALL_OW 261
96549: PUSH
96550: LD_INT 10
96552: LESS
96553: IFFALSE 96573
// SetFuel ( group [ i ] , 12 ) ;
96555: LD_VAR 0 4
96559: PUSH
96560: LD_VAR 0 7
96564: ARRAY
96565: PPUSH
96566: LD_INT 12
96568: PPUSH
96569: CALL_OW 240
// if units_path [ i ] then
96573: LD_VAR 0 16
96577: PUSH
96578: LD_VAR 0 7
96582: ARRAY
96583: IFFALSE 96768
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
96585: LD_VAR 0 4
96589: PUSH
96590: LD_VAR 0 7
96594: ARRAY
96595: PPUSH
96596: LD_VAR 0 16
96600: PUSH
96601: LD_VAR 0 7
96605: ARRAY
96606: PUSH
96607: LD_INT 1
96609: ARRAY
96610: PUSH
96611: LD_INT 1
96613: ARRAY
96614: PPUSH
96615: LD_VAR 0 16
96619: PUSH
96620: LD_VAR 0 7
96624: ARRAY
96625: PUSH
96626: LD_INT 1
96628: ARRAY
96629: PUSH
96630: LD_INT 2
96632: ARRAY
96633: PPUSH
96634: CALL_OW 297
96638: PUSH
96639: LD_INT 6
96641: GREATER
96642: IFFALSE 96717
// begin if not HasTask ( group [ i ] ) then
96644: LD_VAR 0 4
96648: PUSH
96649: LD_VAR 0 7
96653: ARRAY
96654: PPUSH
96655: CALL_OW 314
96659: NOT
96660: IFFALSE 96715
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
96662: LD_VAR 0 4
96666: PUSH
96667: LD_VAR 0 7
96671: ARRAY
96672: PPUSH
96673: LD_VAR 0 16
96677: PUSH
96678: LD_VAR 0 7
96682: ARRAY
96683: PUSH
96684: LD_INT 1
96686: ARRAY
96687: PUSH
96688: LD_INT 1
96690: ARRAY
96691: PPUSH
96692: LD_VAR 0 16
96696: PUSH
96697: LD_VAR 0 7
96701: ARRAY
96702: PUSH
96703: LD_INT 1
96705: ARRAY
96706: PUSH
96707: LD_INT 2
96709: ARRAY
96710: PPUSH
96711: CALL_OW 114
// end else
96715: GO 96768
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
96717: LD_ADDR_VAR 0 15
96721: PUSH
96722: LD_VAR 0 16
96726: PUSH
96727: LD_VAR 0 7
96731: ARRAY
96732: PPUSH
96733: LD_INT 1
96735: PPUSH
96736: CALL_OW 3
96740: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
96741: LD_ADDR_VAR 0 16
96745: PUSH
96746: LD_VAR 0 16
96750: PPUSH
96751: LD_VAR 0 7
96755: PPUSH
96756: LD_VAR 0 15
96760: PPUSH
96761: CALL_OW 1
96765: ST_TO_ADDR
// continue ;
96766: GO 95311
// end ; end ; end else
96768: GO 99406
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
96770: LD_ADDR_VAR 0 14
96774: PUSH
96775: LD_INT 81
96777: PUSH
96778: LD_VAR 0 4
96782: PUSH
96783: LD_VAR 0 7
96787: ARRAY
96788: PPUSH
96789: CALL_OW 255
96793: PUSH
96794: EMPTY
96795: LIST
96796: LIST
96797: PPUSH
96798: CALL_OW 69
96802: ST_TO_ADDR
// if not tmp then
96803: LD_VAR 0 14
96807: NOT
96808: IFFALSE 96812
// continue ;
96810: GO 95311
// if f_ignore_area then
96812: LD_VAR 0 17
96816: IFFALSE 96904
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
96818: LD_ADDR_VAR 0 15
96822: PUSH
96823: LD_VAR 0 14
96827: PPUSH
96828: LD_INT 3
96830: PUSH
96831: LD_INT 92
96833: PUSH
96834: LD_VAR 0 17
96838: PUSH
96839: LD_INT 1
96841: ARRAY
96842: PUSH
96843: LD_VAR 0 17
96847: PUSH
96848: LD_INT 2
96850: ARRAY
96851: PUSH
96852: LD_VAR 0 17
96856: PUSH
96857: LD_INT 3
96859: ARRAY
96860: PUSH
96861: EMPTY
96862: LIST
96863: LIST
96864: LIST
96865: LIST
96866: PUSH
96867: EMPTY
96868: LIST
96869: LIST
96870: PPUSH
96871: CALL_OW 72
96875: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
96876: LD_VAR 0 14
96880: PUSH
96881: LD_VAR 0 15
96885: DIFF
96886: IFFALSE 96904
// tmp := tmp diff tmp2 ;
96888: LD_ADDR_VAR 0 14
96892: PUSH
96893: LD_VAR 0 14
96897: PUSH
96898: LD_VAR 0 15
96902: DIFF
96903: ST_TO_ADDR
// end ; if not f_murder then
96904: LD_VAR 0 20
96908: NOT
96909: IFFALSE 96967
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
96911: LD_ADDR_VAR 0 15
96915: PUSH
96916: LD_VAR 0 14
96920: PPUSH
96921: LD_INT 3
96923: PUSH
96924: LD_INT 50
96926: PUSH
96927: EMPTY
96928: LIST
96929: PUSH
96930: EMPTY
96931: LIST
96932: LIST
96933: PPUSH
96934: CALL_OW 72
96938: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
96939: LD_VAR 0 14
96943: PUSH
96944: LD_VAR 0 15
96948: DIFF
96949: IFFALSE 96967
// tmp := tmp diff tmp2 ;
96951: LD_ADDR_VAR 0 14
96955: PUSH
96956: LD_VAR 0 14
96960: PUSH
96961: LD_VAR 0 15
96965: DIFF
96966: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
96967: LD_ADDR_VAR 0 14
96971: PUSH
96972: LD_VAR 0 4
96976: PUSH
96977: LD_VAR 0 7
96981: ARRAY
96982: PPUSH
96983: LD_VAR 0 14
96987: PPUSH
96988: LD_INT 1
96990: PPUSH
96991: LD_INT 1
96993: PPUSH
96994: CALL 66776 0 4
96998: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
96999: LD_VAR 0 4
97003: PUSH
97004: LD_VAR 0 7
97008: ARRAY
97009: PPUSH
97010: CALL_OW 257
97014: PUSH
97015: LD_INT 1
97017: EQUAL
97018: IFFALSE 97466
// begin if WantPlant ( group [ i ] ) then
97020: LD_VAR 0 4
97024: PUSH
97025: LD_VAR 0 7
97029: ARRAY
97030: PPUSH
97031: CALL 66277 0 1
97035: IFFALSE 97039
// continue ;
97037: GO 95311
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
97039: LD_VAR 0 18
97043: PUSH
97044: LD_VAR 0 4
97048: PUSH
97049: LD_VAR 0 7
97053: ARRAY
97054: PPUSH
97055: CALL_OW 310
97059: NOT
97060: AND
97061: PUSH
97062: LD_VAR 0 14
97066: PUSH
97067: LD_INT 1
97069: ARRAY
97070: PUSH
97071: LD_VAR 0 14
97075: PPUSH
97076: LD_INT 21
97078: PUSH
97079: LD_INT 2
97081: PUSH
97082: EMPTY
97083: LIST
97084: LIST
97085: PUSH
97086: LD_INT 58
97088: PUSH
97089: EMPTY
97090: LIST
97091: PUSH
97092: EMPTY
97093: LIST
97094: LIST
97095: PPUSH
97096: CALL_OW 72
97100: IN
97101: AND
97102: IFFALSE 97138
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
97104: LD_VAR 0 4
97108: PUSH
97109: LD_VAR 0 7
97113: ARRAY
97114: PPUSH
97115: LD_VAR 0 14
97119: PUSH
97120: LD_INT 1
97122: ARRAY
97123: PPUSH
97124: CALL_OW 120
// attacking := true ;
97128: LD_ADDR_VAR 0 29
97132: PUSH
97133: LD_INT 1
97135: ST_TO_ADDR
// continue ;
97136: GO 95311
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
97138: LD_VAR 0 26
97142: PUSH
97143: LD_VAR 0 4
97147: PUSH
97148: LD_VAR 0 7
97152: ARRAY
97153: PPUSH
97154: CALL_OW 257
97158: PUSH
97159: LD_INT 1
97161: EQUAL
97162: AND
97163: PUSH
97164: LD_VAR 0 4
97168: PUSH
97169: LD_VAR 0 7
97173: ARRAY
97174: PPUSH
97175: CALL_OW 256
97179: PUSH
97180: LD_INT 800
97182: LESS
97183: AND
97184: PUSH
97185: LD_VAR 0 4
97189: PUSH
97190: LD_VAR 0 7
97194: ARRAY
97195: PPUSH
97196: CALL_OW 318
97200: NOT
97201: AND
97202: IFFALSE 97219
// ComCrawl ( group [ i ] ) ;
97204: LD_VAR 0 4
97208: PUSH
97209: LD_VAR 0 7
97213: ARRAY
97214: PPUSH
97215: CALL_OW 137
// if f_mines then
97219: LD_VAR 0 21
97223: IFFALSE 97466
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
97225: LD_VAR 0 14
97229: PUSH
97230: LD_INT 1
97232: ARRAY
97233: PPUSH
97234: CALL_OW 247
97238: PUSH
97239: LD_INT 3
97241: EQUAL
97242: PUSH
97243: LD_VAR 0 14
97247: PUSH
97248: LD_INT 1
97250: ARRAY
97251: PUSH
97252: LD_VAR 0 27
97256: IN
97257: NOT
97258: AND
97259: IFFALSE 97466
// begin x := GetX ( tmp [ 1 ] ) ;
97261: LD_ADDR_VAR 0 10
97265: PUSH
97266: LD_VAR 0 14
97270: PUSH
97271: LD_INT 1
97273: ARRAY
97274: PPUSH
97275: CALL_OW 250
97279: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
97280: LD_ADDR_VAR 0 11
97284: PUSH
97285: LD_VAR 0 14
97289: PUSH
97290: LD_INT 1
97292: ARRAY
97293: PPUSH
97294: CALL_OW 251
97298: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
97299: LD_ADDR_VAR 0 12
97303: PUSH
97304: LD_VAR 0 4
97308: PUSH
97309: LD_VAR 0 7
97313: ARRAY
97314: PPUSH
97315: CALL 93194 0 1
97319: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
97320: LD_VAR 0 4
97324: PUSH
97325: LD_VAR 0 7
97329: ARRAY
97330: PPUSH
97331: LD_VAR 0 10
97335: PPUSH
97336: LD_VAR 0 11
97340: PPUSH
97341: LD_VAR 0 14
97345: PUSH
97346: LD_INT 1
97348: ARRAY
97349: PPUSH
97350: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
97354: LD_VAR 0 4
97358: PUSH
97359: LD_VAR 0 7
97363: ARRAY
97364: PPUSH
97365: LD_VAR 0 10
97369: PPUSH
97370: LD_VAR 0 12
97374: PPUSH
97375: LD_INT 7
97377: PPUSH
97378: CALL_OW 272
97382: PPUSH
97383: LD_VAR 0 11
97387: PPUSH
97388: LD_VAR 0 12
97392: PPUSH
97393: LD_INT 7
97395: PPUSH
97396: CALL_OW 273
97400: PPUSH
97401: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
97405: LD_VAR 0 4
97409: PUSH
97410: LD_VAR 0 7
97414: ARRAY
97415: PPUSH
97416: LD_INT 71
97418: PPUSH
97419: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
97423: LD_ADDR_VAR 0 27
97427: PUSH
97428: LD_VAR 0 27
97432: PPUSH
97433: LD_VAR 0 27
97437: PUSH
97438: LD_INT 1
97440: PLUS
97441: PPUSH
97442: LD_VAR 0 14
97446: PUSH
97447: LD_INT 1
97449: ARRAY
97450: PPUSH
97451: CALL_OW 1
97455: ST_TO_ADDR
// attacking := true ;
97456: LD_ADDR_VAR 0 29
97460: PUSH
97461: LD_INT 1
97463: ST_TO_ADDR
// continue ;
97464: GO 95311
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
97466: LD_VAR 0 4
97470: PUSH
97471: LD_VAR 0 7
97475: ARRAY
97476: PPUSH
97477: CALL_OW 257
97481: PUSH
97482: LD_INT 17
97484: EQUAL
97485: PUSH
97486: LD_VAR 0 4
97490: PUSH
97491: LD_VAR 0 7
97495: ARRAY
97496: PPUSH
97497: CALL_OW 110
97501: PUSH
97502: LD_INT 71
97504: EQUAL
97505: NOT
97506: AND
97507: IFFALSE 97653
// begin attacking := false ;
97509: LD_ADDR_VAR 0 29
97513: PUSH
97514: LD_INT 0
97516: ST_TO_ADDR
// k := 5 ;
97517: LD_ADDR_VAR 0 9
97521: PUSH
97522: LD_INT 5
97524: ST_TO_ADDR
// if tmp < k then
97525: LD_VAR 0 14
97529: PUSH
97530: LD_VAR 0 9
97534: LESS
97535: IFFALSE 97547
// k := tmp ;
97537: LD_ADDR_VAR 0 9
97541: PUSH
97542: LD_VAR 0 14
97546: ST_TO_ADDR
// for j = 1 to k do
97547: LD_ADDR_VAR 0 8
97551: PUSH
97552: DOUBLE
97553: LD_INT 1
97555: DEC
97556: ST_TO_ADDR
97557: LD_VAR 0 9
97561: PUSH
97562: FOR_TO
97563: IFFALSE 97651
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
97565: LD_VAR 0 14
97569: PUSH
97570: LD_VAR 0 8
97574: ARRAY
97575: PUSH
97576: LD_VAR 0 14
97580: PPUSH
97581: LD_INT 58
97583: PUSH
97584: EMPTY
97585: LIST
97586: PPUSH
97587: CALL_OW 72
97591: IN
97592: NOT
97593: IFFALSE 97649
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
97595: LD_VAR 0 4
97599: PUSH
97600: LD_VAR 0 7
97604: ARRAY
97605: PPUSH
97606: LD_VAR 0 14
97610: PUSH
97611: LD_VAR 0 8
97615: ARRAY
97616: PPUSH
97617: CALL_OW 115
// attacking := true ;
97621: LD_ADDR_VAR 0 29
97625: PUSH
97626: LD_INT 1
97628: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
97629: LD_VAR 0 4
97633: PUSH
97634: LD_VAR 0 7
97638: ARRAY
97639: PPUSH
97640: LD_INT 71
97642: PPUSH
97643: CALL_OW 109
// continue ;
97647: GO 97562
// end ; end ;
97649: GO 97562
97651: POP
97652: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
97653: LD_VAR 0 4
97657: PUSH
97658: LD_VAR 0 7
97662: ARRAY
97663: PPUSH
97664: CALL_OW 257
97668: PUSH
97669: LD_INT 8
97671: EQUAL
97672: PUSH
97673: LD_VAR 0 4
97677: PUSH
97678: LD_VAR 0 7
97682: ARRAY
97683: PPUSH
97684: CALL_OW 264
97688: PUSH
97689: LD_INT 28
97691: PUSH
97692: LD_INT 45
97694: PUSH
97695: LD_INT 7
97697: PUSH
97698: LD_INT 47
97700: PUSH
97701: EMPTY
97702: LIST
97703: LIST
97704: LIST
97705: LIST
97706: IN
97707: OR
97708: IFFALSE 97938
// begin attacking := false ;
97710: LD_ADDR_VAR 0 29
97714: PUSH
97715: LD_INT 0
97717: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
97718: LD_VAR 0 14
97722: PUSH
97723: LD_INT 1
97725: ARRAY
97726: PPUSH
97727: CALL_OW 266
97731: PUSH
97732: LD_INT 32
97734: PUSH
97735: LD_INT 31
97737: PUSH
97738: LD_INT 33
97740: PUSH
97741: LD_INT 4
97743: PUSH
97744: LD_INT 5
97746: PUSH
97747: EMPTY
97748: LIST
97749: LIST
97750: LIST
97751: LIST
97752: LIST
97753: IN
97754: IFFALSE 97938
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
97756: LD_ADDR_VAR 0 9
97760: PUSH
97761: LD_VAR 0 14
97765: PUSH
97766: LD_INT 1
97768: ARRAY
97769: PPUSH
97770: CALL_OW 266
97774: PPUSH
97775: LD_VAR 0 14
97779: PUSH
97780: LD_INT 1
97782: ARRAY
97783: PPUSH
97784: CALL_OW 250
97788: PPUSH
97789: LD_VAR 0 14
97793: PUSH
97794: LD_INT 1
97796: ARRAY
97797: PPUSH
97798: CALL_OW 251
97802: PPUSH
97803: LD_VAR 0 14
97807: PUSH
97808: LD_INT 1
97810: ARRAY
97811: PPUSH
97812: CALL_OW 254
97816: PPUSH
97817: LD_VAR 0 14
97821: PUSH
97822: LD_INT 1
97824: ARRAY
97825: PPUSH
97826: CALL_OW 248
97830: PPUSH
97831: LD_INT 0
97833: PPUSH
97834: CALL 74570 0 6
97838: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
97839: LD_ADDR_VAR 0 8
97843: PUSH
97844: LD_VAR 0 4
97848: PUSH
97849: LD_VAR 0 7
97853: ARRAY
97854: PPUSH
97855: LD_VAR 0 9
97859: PPUSH
97860: CALL 93257 0 2
97864: ST_TO_ADDR
// if j then
97865: LD_VAR 0 8
97869: IFFALSE 97938
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
97871: LD_VAR 0 8
97875: PUSH
97876: LD_INT 1
97878: ARRAY
97879: PPUSH
97880: LD_VAR 0 8
97884: PUSH
97885: LD_INT 2
97887: ARRAY
97888: PPUSH
97889: CALL_OW 488
97893: IFFALSE 97938
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
97895: LD_VAR 0 4
97899: PUSH
97900: LD_VAR 0 7
97904: ARRAY
97905: PPUSH
97906: LD_VAR 0 8
97910: PUSH
97911: LD_INT 1
97913: ARRAY
97914: PPUSH
97915: LD_VAR 0 8
97919: PUSH
97920: LD_INT 2
97922: ARRAY
97923: PPUSH
97924: CALL_OW 116
// attacking := true ;
97928: LD_ADDR_VAR 0 29
97932: PUSH
97933: LD_INT 1
97935: ST_TO_ADDR
// continue ;
97936: GO 95311
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
97938: LD_VAR 0 4
97942: PUSH
97943: LD_VAR 0 7
97947: ARRAY
97948: PPUSH
97949: CALL_OW 265
97953: PUSH
97954: LD_INT 11
97956: EQUAL
97957: IFFALSE 98235
// begin k := 10 ;
97959: LD_ADDR_VAR 0 9
97963: PUSH
97964: LD_INT 10
97966: ST_TO_ADDR
// x := 0 ;
97967: LD_ADDR_VAR 0 10
97971: PUSH
97972: LD_INT 0
97974: ST_TO_ADDR
// if tmp < k then
97975: LD_VAR 0 14
97979: PUSH
97980: LD_VAR 0 9
97984: LESS
97985: IFFALSE 97997
// k := tmp ;
97987: LD_ADDR_VAR 0 9
97991: PUSH
97992: LD_VAR 0 14
97996: ST_TO_ADDR
// for j = k downto 1 do
97997: LD_ADDR_VAR 0 8
98001: PUSH
98002: DOUBLE
98003: LD_VAR 0 9
98007: INC
98008: ST_TO_ADDR
98009: LD_INT 1
98011: PUSH
98012: FOR_DOWNTO
98013: IFFALSE 98088
// begin if GetType ( tmp [ j ] ) = unit_human then
98015: LD_VAR 0 14
98019: PUSH
98020: LD_VAR 0 8
98024: ARRAY
98025: PPUSH
98026: CALL_OW 247
98030: PUSH
98031: LD_INT 1
98033: EQUAL
98034: IFFALSE 98086
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
98036: LD_VAR 0 4
98040: PUSH
98041: LD_VAR 0 7
98045: ARRAY
98046: PPUSH
98047: LD_VAR 0 14
98051: PUSH
98052: LD_VAR 0 8
98056: ARRAY
98057: PPUSH
98058: CALL 93528 0 2
// x := tmp [ j ] ;
98062: LD_ADDR_VAR 0 10
98066: PUSH
98067: LD_VAR 0 14
98071: PUSH
98072: LD_VAR 0 8
98076: ARRAY
98077: ST_TO_ADDR
// attacking := true ;
98078: LD_ADDR_VAR 0 29
98082: PUSH
98083: LD_INT 1
98085: ST_TO_ADDR
// end ; end ;
98086: GO 98012
98088: POP
98089: POP
// if not x then
98090: LD_VAR 0 10
98094: NOT
98095: IFFALSE 98235
// begin attacking := true ;
98097: LD_ADDR_VAR 0 29
98101: PUSH
98102: LD_INT 1
98104: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
98105: LD_VAR 0 4
98109: PUSH
98110: LD_VAR 0 7
98114: ARRAY
98115: PPUSH
98116: CALL_OW 250
98120: PPUSH
98121: LD_VAR 0 4
98125: PUSH
98126: LD_VAR 0 7
98130: ARRAY
98131: PPUSH
98132: CALL_OW 251
98136: PPUSH
98137: CALL_OW 546
98141: PUSH
98142: LD_INT 2
98144: ARRAY
98145: PUSH
98146: LD_VAR 0 14
98150: PUSH
98151: LD_INT 1
98153: ARRAY
98154: PPUSH
98155: CALL_OW 250
98159: PPUSH
98160: LD_VAR 0 14
98164: PUSH
98165: LD_INT 1
98167: ARRAY
98168: PPUSH
98169: CALL_OW 251
98173: PPUSH
98174: CALL_OW 546
98178: PUSH
98179: LD_INT 2
98181: ARRAY
98182: EQUAL
98183: IFFALSE 98211
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
98185: LD_VAR 0 4
98189: PUSH
98190: LD_VAR 0 7
98194: ARRAY
98195: PPUSH
98196: LD_VAR 0 14
98200: PUSH
98201: LD_INT 1
98203: ARRAY
98204: PPUSH
98205: CALL 93528 0 2
98209: GO 98235
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
98211: LD_VAR 0 4
98215: PUSH
98216: LD_VAR 0 7
98220: ARRAY
98221: PPUSH
98222: LD_VAR 0 14
98226: PUSH
98227: LD_INT 1
98229: ARRAY
98230: PPUSH
98231: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
98235: LD_VAR 0 4
98239: PUSH
98240: LD_VAR 0 7
98244: ARRAY
98245: PPUSH
98246: CALL_OW 264
98250: PUSH
98251: LD_INT 29
98253: EQUAL
98254: IFFALSE 98620
// begin if WantsToAttack ( group [ i ] ) in bombed then
98256: LD_VAR 0 4
98260: PUSH
98261: LD_VAR 0 7
98265: ARRAY
98266: PPUSH
98267: CALL_OW 319
98271: PUSH
98272: LD_VAR 0 28
98276: IN
98277: IFFALSE 98281
// continue ;
98279: GO 95311
// k := 8 ;
98281: LD_ADDR_VAR 0 9
98285: PUSH
98286: LD_INT 8
98288: ST_TO_ADDR
// x := 0 ;
98289: LD_ADDR_VAR 0 10
98293: PUSH
98294: LD_INT 0
98296: ST_TO_ADDR
// if tmp < k then
98297: LD_VAR 0 14
98301: PUSH
98302: LD_VAR 0 9
98306: LESS
98307: IFFALSE 98319
// k := tmp ;
98309: LD_ADDR_VAR 0 9
98313: PUSH
98314: LD_VAR 0 14
98318: ST_TO_ADDR
// for j = 1 to k do
98319: LD_ADDR_VAR 0 8
98323: PUSH
98324: DOUBLE
98325: LD_INT 1
98327: DEC
98328: ST_TO_ADDR
98329: LD_VAR 0 9
98333: PUSH
98334: FOR_TO
98335: IFFALSE 98467
// begin if GetType ( tmp [ j ] ) = unit_building then
98337: LD_VAR 0 14
98341: PUSH
98342: LD_VAR 0 8
98346: ARRAY
98347: PPUSH
98348: CALL_OW 247
98352: PUSH
98353: LD_INT 3
98355: EQUAL
98356: IFFALSE 98465
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
98358: LD_VAR 0 14
98362: PUSH
98363: LD_VAR 0 8
98367: ARRAY
98368: PUSH
98369: LD_VAR 0 28
98373: IN
98374: NOT
98375: PUSH
98376: LD_VAR 0 14
98380: PUSH
98381: LD_VAR 0 8
98385: ARRAY
98386: PPUSH
98387: CALL_OW 313
98391: AND
98392: IFFALSE 98465
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
98394: LD_VAR 0 4
98398: PUSH
98399: LD_VAR 0 7
98403: ARRAY
98404: PPUSH
98405: LD_VAR 0 14
98409: PUSH
98410: LD_VAR 0 8
98414: ARRAY
98415: PPUSH
98416: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
98420: LD_ADDR_VAR 0 28
98424: PUSH
98425: LD_VAR 0 28
98429: PPUSH
98430: LD_VAR 0 28
98434: PUSH
98435: LD_INT 1
98437: PLUS
98438: PPUSH
98439: LD_VAR 0 14
98443: PUSH
98444: LD_VAR 0 8
98448: ARRAY
98449: PPUSH
98450: CALL_OW 1
98454: ST_TO_ADDR
// attacking := true ;
98455: LD_ADDR_VAR 0 29
98459: PUSH
98460: LD_INT 1
98462: ST_TO_ADDR
// break ;
98463: GO 98467
// end ; end ;
98465: GO 98334
98467: POP
98468: POP
// if not attacking and f_attack_depot then
98469: LD_VAR 0 29
98473: NOT
98474: PUSH
98475: LD_VAR 0 25
98479: AND
98480: IFFALSE 98575
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
98482: LD_ADDR_VAR 0 13
98486: PUSH
98487: LD_VAR 0 14
98491: PPUSH
98492: LD_INT 2
98494: PUSH
98495: LD_INT 30
98497: PUSH
98498: LD_INT 0
98500: PUSH
98501: EMPTY
98502: LIST
98503: LIST
98504: PUSH
98505: LD_INT 30
98507: PUSH
98508: LD_INT 1
98510: PUSH
98511: EMPTY
98512: LIST
98513: LIST
98514: PUSH
98515: EMPTY
98516: LIST
98517: LIST
98518: LIST
98519: PPUSH
98520: CALL_OW 72
98524: ST_TO_ADDR
// if z then
98525: LD_VAR 0 13
98529: IFFALSE 98575
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
98531: LD_VAR 0 4
98535: PUSH
98536: LD_VAR 0 7
98540: ARRAY
98541: PPUSH
98542: LD_VAR 0 13
98546: PPUSH
98547: LD_VAR 0 4
98551: PUSH
98552: LD_VAR 0 7
98556: ARRAY
98557: PPUSH
98558: CALL_OW 74
98562: PPUSH
98563: CALL_OW 115
// attacking := true ;
98567: LD_ADDR_VAR 0 29
98571: PUSH
98572: LD_INT 1
98574: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
98575: LD_VAR 0 4
98579: PUSH
98580: LD_VAR 0 7
98584: ARRAY
98585: PPUSH
98586: CALL_OW 256
98590: PUSH
98591: LD_INT 500
98593: LESS
98594: IFFALSE 98620
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
98596: LD_VAR 0 4
98600: PUSH
98601: LD_VAR 0 7
98605: ARRAY
98606: PPUSH
98607: LD_VAR 0 14
98611: PUSH
98612: LD_INT 1
98614: ARRAY
98615: PPUSH
98616: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
98620: LD_VAR 0 4
98624: PUSH
98625: LD_VAR 0 7
98629: ARRAY
98630: PPUSH
98631: CALL_OW 264
98635: PUSH
98636: LD_INT 49
98638: EQUAL
98639: IFFALSE 98760
// begin if not HasTask ( group [ i ] ) then
98641: LD_VAR 0 4
98645: PUSH
98646: LD_VAR 0 7
98650: ARRAY
98651: PPUSH
98652: CALL_OW 314
98656: NOT
98657: IFFALSE 98760
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
98659: LD_ADDR_VAR 0 9
98663: PUSH
98664: LD_INT 81
98666: PUSH
98667: LD_VAR 0 4
98671: PUSH
98672: LD_VAR 0 7
98676: ARRAY
98677: PPUSH
98678: CALL_OW 255
98682: PUSH
98683: EMPTY
98684: LIST
98685: LIST
98686: PPUSH
98687: CALL_OW 69
98691: PPUSH
98692: LD_VAR 0 4
98696: PUSH
98697: LD_VAR 0 7
98701: ARRAY
98702: PPUSH
98703: CALL_OW 74
98707: ST_TO_ADDR
// if k then
98708: LD_VAR 0 9
98712: IFFALSE 98760
// if GetDistUnits ( group [ i ] , k ) > 10 then
98714: LD_VAR 0 4
98718: PUSH
98719: LD_VAR 0 7
98723: ARRAY
98724: PPUSH
98725: LD_VAR 0 9
98729: PPUSH
98730: CALL_OW 296
98734: PUSH
98735: LD_INT 10
98737: GREATER
98738: IFFALSE 98760
// ComMoveUnit ( group [ i ] , k ) ;
98740: LD_VAR 0 4
98744: PUSH
98745: LD_VAR 0 7
98749: ARRAY
98750: PPUSH
98751: LD_VAR 0 9
98755: PPUSH
98756: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
98760: LD_VAR 0 4
98764: PUSH
98765: LD_VAR 0 7
98769: ARRAY
98770: PPUSH
98771: CALL_OW 256
98775: PUSH
98776: LD_INT 250
98778: LESS
98779: PUSH
98780: LD_VAR 0 4
98784: PUSH
98785: LD_VAR 0 7
98789: ARRAY
98790: PUSH
98791: LD_INT 21
98793: PUSH
98794: LD_INT 2
98796: PUSH
98797: EMPTY
98798: LIST
98799: LIST
98800: PUSH
98801: LD_INT 23
98803: PUSH
98804: LD_INT 2
98806: PUSH
98807: EMPTY
98808: LIST
98809: LIST
98810: PUSH
98811: EMPTY
98812: LIST
98813: LIST
98814: PPUSH
98815: CALL_OW 69
98819: IN
98820: AND
98821: IFFALSE 98946
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
98823: LD_ADDR_VAR 0 9
98827: PUSH
98828: LD_OWVAR 3
98832: PUSH
98833: LD_VAR 0 4
98837: PUSH
98838: LD_VAR 0 7
98842: ARRAY
98843: DIFF
98844: PPUSH
98845: LD_VAR 0 4
98849: PUSH
98850: LD_VAR 0 7
98854: ARRAY
98855: PPUSH
98856: CALL_OW 74
98860: ST_TO_ADDR
// if not k then
98861: LD_VAR 0 9
98865: NOT
98866: IFFALSE 98870
// continue ;
98868: GO 95311
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
98870: LD_VAR 0 9
98874: PUSH
98875: LD_INT 81
98877: PUSH
98878: LD_VAR 0 4
98882: PUSH
98883: LD_VAR 0 7
98887: ARRAY
98888: PPUSH
98889: CALL_OW 255
98893: PUSH
98894: EMPTY
98895: LIST
98896: LIST
98897: PPUSH
98898: CALL_OW 69
98902: IN
98903: PUSH
98904: LD_VAR 0 9
98908: PPUSH
98909: LD_VAR 0 4
98913: PUSH
98914: LD_VAR 0 7
98918: ARRAY
98919: PPUSH
98920: CALL_OW 296
98924: PUSH
98925: LD_INT 5
98927: LESS
98928: AND
98929: IFFALSE 98946
// ComAutodestruct ( group [ i ] ) ;
98931: LD_VAR 0 4
98935: PUSH
98936: LD_VAR 0 7
98940: ARRAY
98941: PPUSH
98942: CALL 93426 0 1
// end ; if f_attack_depot then
98946: LD_VAR 0 25
98950: IFFALSE 99062
// begin k := 6 ;
98952: LD_ADDR_VAR 0 9
98956: PUSH
98957: LD_INT 6
98959: ST_TO_ADDR
// if tmp < k then
98960: LD_VAR 0 14
98964: PUSH
98965: LD_VAR 0 9
98969: LESS
98970: IFFALSE 98982
// k := tmp ;
98972: LD_ADDR_VAR 0 9
98976: PUSH
98977: LD_VAR 0 14
98981: ST_TO_ADDR
// for j = 1 to k do
98982: LD_ADDR_VAR 0 8
98986: PUSH
98987: DOUBLE
98988: LD_INT 1
98990: DEC
98991: ST_TO_ADDR
98992: LD_VAR 0 9
98996: PUSH
98997: FOR_TO
98998: IFFALSE 99060
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
99000: LD_VAR 0 8
99004: PPUSH
99005: CALL_OW 266
99009: PUSH
99010: LD_INT 0
99012: PUSH
99013: LD_INT 1
99015: PUSH
99016: EMPTY
99017: LIST
99018: LIST
99019: IN
99020: IFFALSE 99058
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
99022: LD_VAR 0 4
99026: PUSH
99027: LD_VAR 0 7
99031: ARRAY
99032: PPUSH
99033: LD_VAR 0 14
99037: PUSH
99038: LD_VAR 0 8
99042: ARRAY
99043: PPUSH
99044: CALL_OW 115
// attacking := true ;
99048: LD_ADDR_VAR 0 29
99052: PUSH
99053: LD_INT 1
99055: ST_TO_ADDR
// break ;
99056: GO 99060
// end ;
99058: GO 98997
99060: POP
99061: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
99062: LD_VAR 0 4
99066: PUSH
99067: LD_VAR 0 7
99071: ARRAY
99072: PPUSH
99073: CALL_OW 302
99077: PUSH
99078: LD_VAR 0 29
99082: NOT
99083: AND
99084: IFFALSE 99406
// begin if GetTag ( group [ i ] ) = 71 then
99086: LD_VAR 0 4
99090: PUSH
99091: LD_VAR 0 7
99095: ARRAY
99096: PPUSH
99097: CALL_OW 110
99101: PUSH
99102: LD_INT 71
99104: EQUAL
99105: IFFALSE 99146
// begin if HasTask ( group [ i ] ) then
99107: LD_VAR 0 4
99111: PUSH
99112: LD_VAR 0 7
99116: ARRAY
99117: PPUSH
99118: CALL_OW 314
99122: IFFALSE 99128
// continue else
99124: GO 95311
99126: GO 99146
// SetTag ( group [ i ] , 0 ) ;
99128: LD_VAR 0 4
99132: PUSH
99133: LD_VAR 0 7
99137: ARRAY
99138: PPUSH
99139: LD_INT 0
99141: PPUSH
99142: CALL_OW 109
// end ; k := 8 ;
99146: LD_ADDR_VAR 0 9
99150: PUSH
99151: LD_INT 8
99153: ST_TO_ADDR
// x := 0 ;
99154: LD_ADDR_VAR 0 10
99158: PUSH
99159: LD_INT 0
99161: ST_TO_ADDR
// if tmp < k then
99162: LD_VAR 0 14
99166: PUSH
99167: LD_VAR 0 9
99171: LESS
99172: IFFALSE 99184
// k := tmp ;
99174: LD_ADDR_VAR 0 9
99178: PUSH
99179: LD_VAR 0 14
99183: ST_TO_ADDR
// for j = 1 to k do
99184: LD_ADDR_VAR 0 8
99188: PUSH
99189: DOUBLE
99190: LD_INT 1
99192: DEC
99193: ST_TO_ADDR
99194: LD_VAR 0 9
99198: PUSH
99199: FOR_TO
99200: IFFALSE 99298
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
99202: LD_VAR 0 14
99206: PUSH
99207: LD_VAR 0 8
99211: ARRAY
99212: PPUSH
99213: CALL_OW 247
99217: PUSH
99218: LD_INT 1
99220: EQUAL
99221: PUSH
99222: LD_VAR 0 14
99226: PUSH
99227: LD_VAR 0 8
99231: ARRAY
99232: PPUSH
99233: CALL_OW 256
99237: PUSH
99238: LD_INT 250
99240: LESS
99241: PUSH
99242: LD_VAR 0 20
99246: AND
99247: PUSH
99248: LD_VAR 0 20
99252: NOT
99253: PUSH
99254: LD_VAR 0 14
99258: PUSH
99259: LD_VAR 0 8
99263: ARRAY
99264: PPUSH
99265: CALL_OW 256
99269: PUSH
99270: LD_INT 250
99272: GREATEREQUAL
99273: AND
99274: OR
99275: AND
99276: IFFALSE 99296
// begin x := tmp [ j ] ;
99278: LD_ADDR_VAR 0 10
99282: PUSH
99283: LD_VAR 0 14
99287: PUSH
99288: LD_VAR 0 8
99292: ARRAY
99293: ST_TO_ADDR
// break ;
99294: GO 99298
// end ;
99296: GO 99199
99298: POP
99299: POP
// if x then
99300: LD_VAR 0 10
99304: IFFALSE 99328
// ComAttackUnit ( group [ i ] , x ) else
99306: LD_VAR 0 4
99310: PUSH
99311: LD_VAR 0 7
99315: ARRAY
99316: PPUSH
99317: LD_VAR 0 10
99321: PPUSH
99322: CALL_OW 115
99326: GO 99352
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
99328: LD_VAR 0 4
99332: PUSH
99333: LD_VAR 0 7
99337: ARRAY
99338: PPUSH
99339: LD_VAR 0 14
99343: PUSH
99344: LD_INT 1
99346: ARRAY
99347: PPUSH
99348: CALL_OW 115
// if not HasTask ( group [ i ] ) then
99352: LD_VAR 0 4
99356: PUSH
99357: LD_VAR 0 7
99361: ARRAY
99362: PPUSH
99363: CALL_OW 314
99367: NOT
99368: IFFALSE 99406
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
99370: LD_VAR 0 4
99374: PUSH
99375: LD_VAR 0 7
99379: ARRAY
99380: PPUSH
99381: LD_VAR 0 14
99385: PPUSH
99386: LD_VAR 0 4
99390: PUSH
99391: LD_VAR 0 7
99395: ARRAY
99396: PPUSH
99397: CALL_OW 74
99401: PPUSH
99402: CALL_OW 115
// end ; end ; end ;
99406: GO 95311
99408: POP
99409: POP
// wait ( 0 0$1 ) ;
99410: LD_INT 35
99412: PPUSH
99413: CALL_OW 67
// until group = [ ] ;
99417: LD_VAR 0 4
99421: PUSH
99422: EMPTY
99423: EQUAL
99424: IFFALSE 95296
// end ;
99426: LD_VAR 0 2
99430: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
99431: LD_INT 0
99433: PPUSH
99434: PPUSH
99435: PPUSH
99436: PPUSH
// if not base_units then
99437: LD_VAR 0 1
99441: NOT
99442: IFFALSE 99446
// exit ;
99444: GO 99533
// result := false ;
99446: LD_ADDR_VAR 0 2
99450: PUSH
99451: LD_INT 0
99453: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
99454: LD_ADDR_VAR 0 5
99458: PUSH
99459: LD_VAR 0 1
99463: PPUSH
99464: LD_INT 21
99466: PUSH
99467: LD_INT 3
99469: PUSH
99470: EMPTY
99471: LIST
99472: LIST
99473: PPUSH
99474: CALL_OW 72
99478: ST_TO_ADDR
// if not tmp then
99479: LD_VAR 0 5
99483: NOT
99484: IFFALSE 99488
// exit ;
99486: GO 99533
// for i in tmp do
99488: LD_ADDR_VAR 0 3
99492: PUSH
99493: LD_VAR 0 5
99497: PUSH
99498: FOR_IN
99499: IFFALSE 99531
// begin result := EnemyInRange ( i , 22 ) ;
99501: LD_ADDR_VAR 0 2
99505: PUSH
99506: LD_VAR 0 3
99510: PPUSH
99511: LD_INT 22
99513: PPUSH
99514: CALL 93109 0 2
99518: ST_TO_ADDR
// if result then
99519: LD_VAR 0 2
99523: IFFALSE 99529
// exit ;
99525: POP
99526: POP
99527: GO 99533
// end ;
99529: GO 99498
99531: POP
99532: POP
// end ;
99533: LD_VAR 0 2
99537: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
99538: LD_INT 0
99540: PPUSH
99541: PPUSH
// if not units then
99542: LD_VAR 0 1
99546: NOT
99547: IFFALSE 99551
// exit ;
99549: GO 99621
// result := [ ] ;
99551: LD_ADDR_VAR 0 3
99555: PUSH
99556: EMPTY
99557: ST_TO_ADDR
// for i in units do
99558: LD_ADDR_VAR 0 4
99562: PUSH
99563: LD_VAR 0 1
99567: PUSH
99568: FOR_IN
99569: IFFALSE 99619
// if GetTag ( i ) = tag then
99571: LD_VAR 0 4
99575: PPUSH
99576: CALL_OW 110
99580: PUSH
99581: LD_VAR 0 2
99585: EQUAL
99586: IFFALSE 99617
// result := Insert ( result , result + 1 , i ) ;
99588: LD_ADDR_VAR 0 3
99592: PUSH
99593: LD_VAR 0 3
99597: PPUSH
99598: LD_VAR 0 3
99602: PUSH
99603: LD_INT 1
99605: PLUS
99606: PPUSH
99607: LD_VAR 0 4
99611: PPUSH
99612: CALL_OW 2
99616: ST_TO_ADDR
99617: GO 99568
99619: POP
99620: POP
// end ;
99621: LD_VAR 0 3
99625: RET
// export function IsDriver ( un ) ; begin
99626: LD_INT 0
99628: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
99629: LD_ADDR_VAR 0 2
99633: PUSH
99634: LD_VAR 0 1
99638: PUSH
99639: LD_INT 55
99641: PUSH
99642: EMPTY
99643: LIST
99644: PPUSH
99645: CALL_OW 69
99649: IN
99650: ST_TO_ADDR
// end ;
99651: LD_VAR 0 2
99655: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
99656: LD_INT 0
99658: PPUSH
99659: PPUSH
// list := [ ] ;
99660: LD_ADDR_VAR 0 5
99664: PUSH
99665: EMPTY
99666: ST_TO_ADDR
// case d of 0 :
99667: LD_VAR 0 3
99671: PUSH
99672: LD_INT 0
99674: DOUBLE
99675: EQUAL
99676: IFTRUE 99680
99678: GO 99813
99680: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
99681: LD_ADDR_VAR 0 5
99685: PUSH
99686: LD_VAR 0 1
99690: PUSH
99691: LD_INT 4
99693: MINUS
99694: PUSH
99695: LD_VAR 0 2
99699: PUSH
99700: LD_INT 4
99702: MINUS
99703: PUSH
99704: LD_INT 2
99706: PUSH
99707: EMPTY
99708: LIST
99709: LIST
99710: LIST
99711: PUSH
99712: LD_VAR 0 1
99716: PUSH
99717: LD_INT 3
99719: MINUS
99720: PUSH
99721: LD_VAR 0 2
99725: PUSH
99726: LD_INT 1
99728: PUSH
99729: EMPTY
99730: LIST
99731: LIST
99732: LIST
99733: PUSH
99734: LD_VAR 0 1
99738: PUSH
99739: LD_INT 4
99741: PLUS
99742: PUSH
99743: LD_VAR 0 2
99747: PUSH
99748: LD_INT 4
99750: PUSH
99751: EMPTY
99752: LIST
99753: LIST
99754: LIST
99755: PUSH
99756: LD_VAR 0 1
99760: PUSH
99761: LD_INT 3
99763: PLUS
99764: PUSH
99765: LD_VAR 0 2
99769: PUSH
99770: LD_INT 3
99772: PLUS
99773: PUSH
99774: LD_INT 5
99776: PUSH
99777: EMPTY
99778: LIST
99779: LIST
99780: LIST
99781: PUSH
99782: LD_VAR 0 1
99786: PUSH
99787: LD_VAR 0 2
99791: PUSH
99792: LD_INT 4
99794: PLUS
99795: PUSH
99796: LD_INT 0
99798: PUSH
99799: EMPTY
99800: LIST
99801: LIST
99802: LIST
99803: PUSH
99804: EMPTY
99805: LIST
99806: LIST
99807: LIST
99808: LIST
99809: LIST
99810: ST_TO_ADDR
// end ; 1 :
99811: GO 100511
99813: LD_INT 1
99815: DOUBLE
99816: EQUAL
99817: IFTRUE 99821
99819: GO 99954
99821: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
99822: LD_ADDR_VAR 0 5
99826: PUSH
99827: LD_VAR 0 1
99831: PUSH
99832: LD_VAR 0 2
99836: PUSH
99837: LD_INT 4
99839: MINUS
99840: PUSH
99841: LD_INT 3
99843: PUSH
99844: EMPTY
99845: LIST
99846: LIST
99847: LIST
99848: PUSH
99849: LD_VAR 0 1
99853: PUSH
99854: LD_INT 3
99856: MINUS
99857: PUSH
99858: LD_VAR 0 2
99862: PUSH
99863: LD_INT 3
99865: MINUS
99866: PUSH
99867: LD_INT 2
99869: PUSH
99870: EMPTY
99871: LIST
99872: LIST
99873: LIST
99874: PUSH
99875: LD_VAR 0 1
99879: PUSH
99880: LD_INT 4
99882: MINUS
99883: PUSH
99884: LD_VAR 0 2
99888: PUSH
99889: LD_INT 1
99891: PUSH
99892: EMPTY
99893: LIST
99894: LIST
99895: LIST
99896: PUSH
99897: LD_VAR 0 1
99901: PUSH
99902: LD_VAR 0 2
99906: PUSH
99907: LD_INT 3
99909: PLUS
99910: PUSH
99911: LD_INT 0
99913: PUSH
99914: EMPTY
99915: LIST
99916: LIST
99917: LIST
99918: PUSH
99919: LD_VAR 0 1
99923: PUSH
99924: LD_INT 4
99926: PLUS
99927: PUSH
99928: LD_VAR 0 2
99932: PUSH
99933: LD_INT 4
99935: PLUS
99936: PUSH
99937: LD_INT 5
99939: PUSH
99940: EMPTY
99941: LIST
99942: LIST
99943: LIST
99944: PUSH
99945: EMPTY
99946: LIST
99947: LIST
99948: LIST
99949: LIST
99950: LIST
99951: ST_TO_ADDR
// end ; 2 :
99952: GO 100511
99954: LD_INT 2
99956: DOUBLE
99957: EQUAL
99958: IFTRUE 99962
99960: GO 100091
99962: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
99963: LD_ADDR_VAR 0 5
99967: PUSH
99968: LD_VAR 0 1
99972: PUSH
99973: LD_VAR 0 2
99977: PUSH
99978: LD_INT 3
99980: MINUS
99981: PUSH
99982: LD_INT 3
99984: PUSH
99985: EMPTY
99986: LIST
99987: LIST
99988: LIST
99989: PUSH
99990: LD_VAR 0 1
99994: PUSH
99995: LD_INT 4
99997: PLUS
99998: PUSH
99999: LD_VAR 0 2
100003: PUSH
100004: LD_INT 4
100006: PUSH
100007: EMPTY
100008: LIST
100009: LIST
100010: LIST
100011: PUSH
100012: LD_VAR 0 1
100016: PUSH
100017: LD_VAR 0 2
100021: PUSH
100022: LD_INT 4
100024: PLUS
100025: PUSH
100026: LD_INT 0
100028: PUSH
100029: EMPTY
100030: LIST
100031: LIST
100032: LIST
100033: PUSH
100034: LD_VAR 0 1
100038: PUSH
100039: LD_INT 3
100041: MINUS
100042: PUSH
100043: LD_VAR 0 2
100047: PUSH
100048: LD_INT 1
100050: PUSH
100051: EMPTY
100052: LIST
100053: LIST
100054: LIST
100055: PUSH
100056: LD_VAR 0 1
100060: PUSH
100061: LD_INT 4
100063: MINUS
100064: PUSH
100065: LD_VAR 0 2
100069: PUSH
100070: LD_INT 4
100072: MINUS
100073: PUSH
100074: LD_INT 2
100076: PUSH
100077: EMPTY
100078: LIST
100079: LIST
100080: LIST
100081: PUSH
100082: EMPTY
100083: LIST
100084: LIST
100085: LIST
100086: LIST
100087: LIST
100088: ST_TO_ADDR
// end ; 3 :
100089: GO 100511
100091: LD_INT 3
100093: DOUBLE
100094: EQUAL
100095: IFTRUE 100099
100097: GO 100232
100099: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
100100: LD_ADDR_VAR 0 5
100104: PUSH
100105: LD_VAR 0 1
100109: PUSH
100110: LD_INT 3
100112: PLUS
100113: PUSH
100114: LD_VAR 0 2
100118: PUSH
100119: LD_INT 4
100121: PUSH
100122: EMPTY
100123: LIST
100124: LIST
100125: LIST
100126: PUSH
100127: LD_VAR 0 1
100131: PUSH
100132: LD_INT 4
100134: PLUS
100135: PUSH
100136: LD_VAR 0 2
100140: PUSH
100141: LD_INT 4
100143: PLUS
100144: PUSH
100145: LD_INT 5
100147: PUSH
100148: EMPTY
100149: LIST
100150: LIST
100151: LIST
100152: PUSH
100153: LD_VAR 0 1
100157: PUSH
100158: LD_INT 4
100160: MINUS
100161: PUSH
100162: LD_VAR 0 2
100166: PUSH
100167: LD_INT 1
100169: PUSH
100170: EMPTY
100171: LIST
100172: LIST
100173: LIST
100174: PUSH
100175: LD_VAR 0 1
100179: PUSH
100180: LD_VAR 0 2
100184: PUSH
100185: LD_INT 4
100187: MINUS
100188: PUSH
100189: LD_INT 3
100191: PUSH
100192: EMPTY
100193: LIST
100194: LIST
100195: LIST
100196: PUSH
100197: LD_VAR 0 1
100201: PUSH
100202: LD_INT 3
100204: MINUS
100205: PUSH
100206: LD_VAR 0 2
100210: PUSH
100211: LD_INT 3
100213: MINUS
100214: PUSH
100215: LD_INT 2
100217: PUSH
100218: EMPTY
100219: LIST
100220: LIST
100221: LIST
100222: PUSH
100223: EMPTY
100224: LIST
100225: LIST
100226: LIST
100227: LIST
100228: LIST
100229: ST_TO_ADDR
// end ; 4 :
100230: GO 100511
100232: LD_INT 4
100234: DOUBLE
100235: EQUAL
100236: IFTRUE 100240
100238: GO 100373
100240: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
100241: LD_ADDR_VAR 0 5
100245: PUSH
100246: LD_VAR 0 1
100250: PUSH
100251: LD_VAR 0 2
100255: PUSH
100256: LD_INT 4
100258: PLUS
100259: PUSH
100260: LD_INT 0
100262: PUSH
100263: EMPTY
100264: LIST
100265: LIST
100266: LIST
100267: PUSH
100268: LD_VAR 0 1
100272: PUSH
100273: LD_INT 3
100275: PLUS
100276: PUSH
100277: LD_VAR 0 2
100281: PUSH
100282: LD_INT 3
100284: PLUS
100285: PUSH
100286: LD_INT 5
100288: PUSH
100289: EMPTY
100290: LIST
100291: LIST
100292: LIST
100293: PUSH
100294: LD_VAR 0 1
100298: PUSH
100299: LD_INT 4
100301: PLUS
100302: PUSH
100303: LD_VAR 0 2
100307: PUSH
100308: LD_INT 4
100310: PUSH
100311: EMPTY
100312: LIST
100313: LIST
100314: LIST
100315: PUSH
100316: LD_VAR 0 1
100320: PUSH
100321: LD_VAR 0 2
100325: PUSH
100326: LD_INT 3
100328: MINUS
100329: PUSH
100330: LD_INT 3
100332: PUSH
100333: EMPTY
100334: LIST
100335: LIST
100336: LIST
100337: PUSH
100338: LD_VAR 0 1
100342: PUSH
100343: LD_INT 4
100345: MINUS
100346: PUSH
100347: LD_VAR 0 2
100351: PUSH
100352: LD_INT 4
100354: MINUS
100355: PUSH
100356: LD_INT 2
100358: PUSH
100359: EMPTY
100360: LIST
100361: LIST
100362: LIST
100363: PUSH
100364: EMPTY
100365: LIST
100366: LIST
100367: LIST
100368: LIST
100369: LIST
100370: ST_TO_ADDR
// end ; 5 :
100371: GO 100511
100373: LD_INT 5
100375: DOUBLE
100376: EQUAL
100377: IFTRUE 100381
100379: GO 100510
100381: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
100382: LD_ADDR_VAR 0 5
100386: PUSH
100387: LD_VAR 0 1
100391: PUSH
100392: LD_INT 4
100394: MINUS
100395: PUSH
100396: LD_VAR 0 2
100400: PUSH
100401: LD_INT 1
100403: PUSH
100404: EMPTY
100405: LIST
100406: LIST
100407: LIST
100408: PUSH
100409: LD_VAR 0 1
100413: PUSH
100414: LD_VAR 0 2
100418: PUSH
100419: LD_INT 4
100421: MINUS
100422: PUSH
100423: LD_INT 3
100425: PUSH
100426: EMPTY
100427: LIST
100428: LIST
100429: LIST
100430: PUSH
100431: LD_VAR 0 1
100435: PUSH
100436: LD_INT 4
100438: PLUS
100439: PUSH
100440: LD_VAR 0 2
100444: PUSH
100445: LD_INT 4
100447: PLUS
100448: PUSH
100449: LD_INT 5
100451: PUSH
100452: EMPTY
100453: LIST
100454: LIST
100455: LIST
100456: PUSH
100457: LD_VAR 0 1
100461: PUSH
100462: LD_INT 3
100464: PLUS
100465: PUSH
100466: LD_VAR 0 2
100470: PUSH
100471: LD_INT 4
100473: PUSH
100474: EMPTY
100475: LIST
100476: LIST
100477: LIST
100478: PUSH
100479: LD_VAR 0 1
100483: PUSH
100484: LD_VAR 0 2
100488: PUSH
100489: LD_INT 3
100491: PLUS
100492: PUSH
100493: LD_INT 0
100495: PUSH
100496: EMPTY
100497: LIST
100498: LIST
100499: LIST
100500: PUSH
100501: EMPTY
100502: LIST
100503: LIST
100504: LIST
100505: LIST
100506: LIST
100507: ST_TO_ADDR
// end ; end ;
100508: GO 100511
100510: POP
// result := list ;
100511: LD_ADDR_VAR 0 4
100515: PUSH
100516: LD_VAR 0 5
100520: ST_TO_ADDR
// end ;
100521: LD_VAR 0 4
100525: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
100526: LD_INT 0
100528: PPUSH
100529: PPUSH
100530: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
100531: LD_VAR 0 1
100535: NOT
100536: PUSH
100537: LD_VAR 0 2
100541: PUSH
100542: LD_INT 1
100544: PUSH
100545: LD_INT 2
100547: PUSH
100548: LD_INT 3
100550: PUSH
100551: LD_INT 4
100553: PUSH
100554: EMPTY
100555: LIST
100556: LIST
100557: LIST
100558: LIST
100559: IN
100560: NOT
100561: OR
100562: IFFALSE 100566
// exit ;
100564: GO 100658
// tmp := [ ] ;
100566: LD_ADDR_VAR 0 5
100570: PUSH
100571: EMPTY
100572: ST_TO_ADDR
// for i in units do
100573: LD_ADDR_VAR 0 4
100577: PUSH
100578: LD_VAR 0 1
100582: PUSH
100583: FOR_IN
100584: IFFALSE 100627
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
100586: LD_ADDR_VAR 0 5
100590: PUSH
100591: LD_VAR 0 5
100595: PPUSH
100596: LD_VAR 0 5
100600: PUSH
100601: LD_INT 1
100603: PLUS
100604: PPUSH
100605: LD_VAR 0 4
100609: PPUSH
100610: LD_VAR 0 2
100614: PPUSH
100615: CALL_OW 259
100619: PPUSH
100620: CALL_OW 2
100624: ST_TO_ADDR
100625: GO 100583
100627: POP
100628: POP
// if not tmp then
100629: LD_VAR 0 5
100633: NOT
100634: IFFALSE 100638
// exit ;
100636: GO 100658
// result := SortListByListDesc ( units , tmp ) ;
100638: LD_ADDR_VAR 0 3
100642: PUSH
100643: LD_VAR 0 1
100647: PPUSH
100648: LD_VAR 0 5
100652: PPUSH
100653: CALL_OW 77
100657: ST_TO_ADDR
// end ;
100658: LD_VAR 0 3
100662: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
100663: LD_INT 0
100665: PPUSH
100666: PPUSH
100667: PPUSH
// x := GetX ( building ) ;
100668: LD_ADDR_VAR 0 4
100672: PUSH
100673: LD_VAR 0 2
100677: PPUSH
100678: CALL_OW 250
100682: ST_TO_ADDR
// y := GetY ( building ) ;
100683: LD_ADDR_VAR 0 5
100687: PUSH
100688: LD_VAR 0 2
100692: PPUSH
100693: CALL_OW 251
100697: ST_TO_ADDR
// if GetTaskList ( unit ) then
100698: LD_VAR 0 1
100702: PPUSH
100703: CALL_OW 437
100707: IFFALSE 100802
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
100709: LD_STRING e
100711: PUSH
100712: LD_VAR 0 1
100716: PPUSH
100717: CALL_OW 437
100721: PUSH
100722: LD_INT 1
100724: ARRAY
100725: PUSH
100726: LD_INT 1
100728: ARRAY
100729: EQUAL
100730: PUSH
100731: LD_VAR 0 4
100735: PUSH
100736: LD_VAR 0 1
100740: PPUSH
100741: CALL_OW 437
100745: PUSH
100746: LD_INT 1
100748: ARRAY
100749: PUSH
100750: LD_INT 2
100752: ARRAY
100753: EQUAL
100754: AND
100755: PUSH
100756: LD_VAR 0 5
100760: PUSH
100761: LD_VAR 0 1
100765: PPUSH
100766: CALL_OW 437
100770: PUSH
100771: LD_INT 1
100773: ARRAY
100774: PUSH
100775: LD_INT 3
100777: ARRAY
100778: EQUAL
100779: AND
100780: IFFALSE 100792
// result := true else
100782: LD_ADDR_VAR 0 3
100786: PUSH
100787: LD_INT 1
100789: ST_TO_ADDR
100790: GO 100800
// result := false ;
100792: LD_ADDR_VAR 0 3
100796: PUSH
100797: LD_INT 0
100799: ST_TO_ADDR
// end else
100800: GO 100810
// result := false ;
100802: LD_ADDR_VAR 0 3
100806: PUSH
100807: LD_INT 0
100809: ST_TO_ADDR
// end ;
100810: LD_VAR 0 3
100814: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
100815: LD_INT 0
100817: PPUSH
100818: PPUSH
100819: PPUSH
100820: PPUSH
// if not unit or not area then
100821: LD_VAR 0 1
100825: NOT
100826: PUSH
100827: LD_VAR 0 2
100831: NOT
100832: OR
100833: IFFALSE 100837
// exit ;
100835: GO 101002
// tmp := AreaToList ( area , i ) ;
100837: LD_ADDR_VAR 0 6
100841: PUSH
100842: LD_VAR 0 2
100846: PPUSH
100847: LD_VAR 0 5
100851: PPUSH
100852: CALL_OW 517
100856: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
100857: LD_ADDR_VAR 0 5
100861: PUSH
100862: DOUBLE
100863: LD_INT 1
100865: DEC
100866: ST_TO_ADDR
100867: LD_VAR 0 6
100871: PUSH
100872: LD_INT 1
100874: ARRAY
100875: PUSH
100876: FOR_TO
100877: IFFALSE 100992
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
100879: LD_ADDR_VAR 0 7
100883: PUSH
100884: LD_VAR 0 6
100888: PUSH
100889: LD_INT 1
100891: ARRAY
100892: PUSH
100893: LD_VAR 0 5
100897: ARRAY
100898: PUSH
100899: LD_VAR 0 6
100903: PUSH
100904: LD_INT 2
100906: ARRAY
100907: PUSH
100908: LD_VAR 0 5
100912: ARRAY
100913: PUSH
100914: EMPTY
100915: LIST
100916: LIST
100917: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
100918: LD_VAR 0 7
100922: PUSH
100923: LD_INT 1
100925: ARRAY
100926: PPUSH
100927: LD_VAR 0 7
100931: PUSH
100932: LD_INT 2
100934: ARRAY
100935: PPUSH
100936: CALL_OW 428
100940: PUSH
100941: LD_INT 0
100943: EQUAL
100944: IFFALSE 100990
// begin result := true ;
100946: LD_ADDR_VAR 0 4
100950: PUSH
100951: LD_INT 1
100953: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
100954: LD_VAR 0 1
100958: PPUSH
100959: LD_VAR 0 7
100963: PUSH
100964: LD_INT 1
100966: ARRAY
100967: PPUSH
100968: LD_VAR 0 7
100972: PUSH
100973: LD_INT 2
100975: ARRAY
100976: PPUSH
100977: LD_VAR 0 3
100981: PPUSH
100982: CALL_OW 48
// exit ;
100986: POP
100987: POP
100988: GO 101002
// end ; end ;
100990: GO 100876
100992: POP
100993: POP
// result := false ;
100994: LD_ADDR_VAR 0 4
100998: PUSH
100999: LD_INT 0
101001: ST_TO_ADDR
// end ;
101002: LD_VAR 0 4
101006: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
101007: LD_INT 0
101009: PPUSH
101010: PPUSH
101011: PPUSH
// if not side or side > 8 then
101012: LD_VAR 0 1
101016: NOT
101017: PUSH
101018: LD_VAR 0 1
101022: PUSH
101023: LD_INT 8
101025: GREATER
101026: OR
101027: IFFALSE 101031
// exit ;
101029: GO 101218
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
101031: LD_ADDR_VAR 0 4
101035: PUSH
101036: LD_INT 22
101038: PUSH
101039: LD_VAR 0 1
101043: PUSH
101044: EMPTY
101045: LIST
101046: LIST
101047: PUSH
101048: LD_INT 21
101050: PUSH
101051: LD_INT 3
101053: PUSH
101054: EMPTY
101055: LIST
101056: LIST
101057: PUSH
101058: EMPTY
101059: LIST
101060: LIST
101061: PPUSH
101062: CALL_OW 69
101066: ST_TO_ADDR
// if not tmp then
101067: LD_VAR 0 4
101071: NOT
101072: IFFALSE 101076
// exit ;
101074: GO 101218
// enable_addtolog := true ;
101076: LD_ADDR_OWVAR 81
101080: PUSH
101081: LD_INT 1
101083: ST_TO_ADDR
// AddToLog ( [ ) ;
101084: LD_STRING [
101086: PPUSH
101087: CALL_OW 561
// for i in tmp do
101091: LD_ADDR_VAR 0 3
101095: PUSH
101096: LD_VAR 0 4
101100: PUSH
101101: FOR_IN
101102: IFFALSE 101209
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
101104: LD_STRING [
101106: PUSH
101107: LD_VAR 0 3
101111: PPUSH
101112: CALL_OW 266
101116: STR
101117: PUSH
101118: LD_STRING , 
101120: STR
101121: PUSH
101122: LD_VAR 0 3
101126: PPUSH
101127: CALL_OW 250
101131: STR
101132: PUSH
101133: LD_STRING , 
101135: STR
101136: PUSH
101137: LD_VAR 0 3
101141: PPUSH
101142: CALL_OW 251
101146: STR
101147: PUSH
101148: LD_STRING , 
101150: STR
101151: PUSH
101152: LD_VAR 0 3
101156: PPUSH
101157: CALL_OW 254
101161: STR
101162: PUSH
101163: LD_STRING , 
101165: STR
101166: PUSH
101167: LD_VAR 0 3
101171: PPUSH
101172: LD_INT 1
101174: PPUSH
101175: CALL_OW 268
101179: STR
101180: PUSH
101181: LD_STRING , 
101183: STR
101184: PUSH
101185: LD_VAR 0 3
101189: PPUSH
101190: LD_INT 2
101192: PPUSH
101193: CALL_OW 268
101197: STR
101198: PUSH
101199: LD_STRING ],
101201: STR
101202: PPUSH
101203: CALL_OW 561
// end ;
101207: GO 101101
101209: POP
101210: POP
// AddToLog ( ]; ) ;
101211: LD_STRING ];
101213: PPUSH
101214: CALL_OW 561
// end ;
101218: LD_VAR 0 2
101222: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
101223: LD_INT 0
101225: PPUSH
101226: PPUSH
101227: PPUSH
101228: PPUSH
101229: PPUSH
// if not area or not rate or not max then
101230: LD_VAR 0 1
101234: NOT
101235: PUSH
101236: LD_VAR 0 2
101240: NOT
101241: OR
101242: PUSH
101243: LD_VAR 0 4
101247: NOT
101248: OR
101249: IFFALSE 101253
// exit ;
101251: GO 101445
// while 1 do
101253: LD_INT 1
101255: IFFALSE 101445
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
101257: LD_ADDR_VAR 0 9
101261: PUSH
101262: LD_VAR 0 1
101266: PPUSH
101267: LD_INT 1
101269: PPUSH
101270: CALL_OW 287
101274: PUSH
101275: LD_INT 10
101277: MUL
101278: ST_TO_ADDR
// r := rate / 10 ;
101279: LD_ADDR_VAR 0 7
101283: PUSH
101284: LD_VAR 0 2
101288: PUSH
101289: LD_INT 10
101291: DIVREAL
101292: ST_TO_ADDR
// time := 1 1$00 ;
101293: LD_ADDR_VAR 0 8
101297: PUSH
101298: LD_INT 2100
101300: ST_TO_ADDR
// if amount < min then
101301: LD_VAR 0 9
101305: PUSH
101306: LD_VAR 0 3
101310: LESS
101311: IFFALSE 101329
// r := r * 2 else
101313: LD_ADDR_VAR 0 7
101317: PUSH
101318: LD_VAR 0 7
101322: PUSH
101323: LD_INT 2
101325: MUL
101326: ST_TO_ADDR
101327: GO 101355
// if amount > max then
101329: LD_VAR 0 9
101333: PUSH
101334: LD_VAR 0 4
101338: GREATER
101339: IFFALSE 101355
// r := r / 2 ;
101341: LD_ADDR_VAR 0 7
101345: PUSH
101346: LD_VAR 0 7
101350: PUSH
101351: LD_INT 2
101353: DIVREAL
101354: ST_TO_ADDR
// time := time / r ;
101355: LD_ADDR_VAR 0 8
101359: PUSH
101360: LD_VAR 0 8
101364: PUSH
101365: LD_VAR 0 7
101369: DIVREAL
101370: ST_TO_ADDR
// if time < 0 then
101371: LD_VAR 0 8
101375: PUSH
101376: LD_INT 0
101378: LESS
101379: IFFALSE 101396
// time := time * - 1 ;
101381: LD_ADDR_VAR 0 8
101385: PUSH
101386: LD_VAR 0 8
101390: PUSH
101391: LD_INT 1
101393: NEG
101394: MUL
101395: ST_TO_ADDR
// wait ( time ) ;
101396: LD_VAR 0 8
101400: PPUSH
101401: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
101405: LD_INT 35
101407: PPUSH
101408: LD_INT 875
101410: PPUSH
101411: CALL_OW 12
101415: PPUSH
101416: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
101420: LD_INT 1
101422: PPUSH
101423: LD_INT 5
101425: PPUSH
101426: CALL_OW 12
101430: PPUSH
101431: LD_VAR 0 1
101435: PPUSH
101436: LD_INT 1
101438: PPUSH
101439: CALL_OW 55
// end ;
101443: GO 101253
// end ;
101445: LD_VAR 0 5
101449: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
101450: LD_INT 0
101452: PPUSH
101453: PPUSH
101454: PPUSH
101455: PPUSH
101456: PPUSH
101457: PPUSH
101458: PPUSH
101459: PPUSH
// if not turrets or not factories then
101460: LD_VAR 0 1
101464: NOT
101465: PUSH
101466: LD_VAR 0 2
101470: NOT
101471: OR
101472: IFFALSE 101476
// exit ;
101474: GO 101783
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
101476: LD_ADDR_VAR 0 10
101480: PUSH
101481: LD_INT 5
101483: PUSH
101484: LD_INT 6
101486: PUSH
101487: EMPTY
101488: LIST
101489: LIST
101490: PUSH
101491: LD_INT 2
101493: PUSH
101494: LD_INT 4
101496: PUSH
101497: EMPTY
101498: LIST
101499: LIST
101500: PUSH
101501: LD_INT 3
101503: PUSH
101504: LD_INT 5
101506: PUSH
101507: EMPTY
101508: LIST
101509: LIST
101510: PUSH
101511: EMPTY
101512: LIST
101513: LIST
101514: LIST
101515: PUSH
101516: LD_INT 24
101518: PUSH
101519: LD_INT 25
101521: PUSH
101522: EMPTY
101523: LIST
101524: LIST
101525: PUSH
101526: LD_INT 23
101528: PUSH
101529: LD_INT 27
101531: PUSH
101532: EMPTY
101533: LIST
101534: LIST
101535: PUSH
101536: EMPTY
101537: LIST
101538: LIST
101539: PUSH
101540: LD_INT 42
101542: PUSH
101543: LD_INT 43
101545: PUSH
101546: EMPTY
101547: LIST
101548: LIST
101549: PUSH
101550: LD_INT 44
101552: PUSH
101553: LD_INT 46
101555: PUSH
101556: EMPTY
101557: LIST
101558: LIST
101559: PUSH
101560: LD_INT 45
101562: PUSH
101563: LD_INT 47
101565: PUSH
101566: EMPTY
101567: LIST
101568: LIST
101569: PUSH
101570: EMPTY
101571: LIST
101572: LIST
101573: LIST
101574: PUSH
101575: EMPTY
101576: LIST
101577: LIST
101578: LIST
101579: ST_TO_ADDR
// result := [ ] ;
101580: LD_ADDR_VAR 0 3
101584: PUSH
101585: EMPTY
101586: ST_TO_ADDR
// for i in turrets do
101587: LD_ADDR_VAR 0 4
101591: PUSH
101592: LD_VAR 0 1
101596: PUSH
101597: FOR_IN
101598: IFFALSE 101781
// begin nat := GetNation ( i ) ;
101600: LD_ADDR_VAR 0 7
101604: PUSH
101605: LD_VAR 0 4
101609: PPUSH
101610: CALL_OW 248
101614: ST_TO_ADDR
// weapon := 0 ;
101615: LD_ADDR_VAR 0 8
101619: PUSH
101620: LD_INT 0
101622: ST_TO_ADDR
// if not nat then
101623: LD_VAR 0 7
101627: NOT
101628: IFFALSE 101632
// continue ;
101630: GO 101597
// for j in list [ nat ] do
101632: LD_ADDR_VAR 0 5
101636: PUSH
101637: LD_VAR 0 10
101641: PUSH
101642: LD_VAR 0 7
101646: ARRAY
101647: PUSH
101648: FOR_IN
101649: IFFALSE 101690
// if GetBWeapon ( i ) = j [ 1 ] then
101651: LD_VAR 0 4
101655: PPUSH
101656: CALL_OW 269
101660: PUSH
101661: LD_VAR 0 5
101665: PUSH
101666: LD_INT 1
101668: ARRAY
101669: EQUAL
101670: IFFALSE 101688
// begin weapon := j [ 2 ] ;
101672: LD_ADDR_VAR 0 8
101676: PUSH
101677: LD_VAR 0 5
101681: PUSH
101682: LD_INT 2
101684: ARRAY
101685: ST_TO_ADDR
// break ;
101686: GO 101690
// end ;
101688: GO 101648
101690: POP
101691: POP
// if not weapon then
101692: LD_VAR 0 8
101696: NOT
101697: IFFALSE 101701
// continue ;
101699: GO 101597
// for k in factories do
101701: LD_ADDR_VAR 0 6
101705: PUSH
101706: LD_VAR 0 2
101710: PUSH
101711: FOR_IN
101712: IFFALSE 101777
// begin weapons := AvailableWeaponList ( k ) ;
101714: LD_ADDR_VAR 0 9
101718: PUSH
101719: LD_VAR 0 6
101723: PPUSH
101724: CALL_OW 478
101728: ST_TO_ADDR
// if not weapons then
101729: LD_VAR 0 9
101733: NOT
101734: IFFALSE 101738
// continue ;
101736: GO 101711
// if weapon in weapons then
101738: LD_VAR 0 8
101742: PUSH
101743: LD_VAR 0 9
101747: IN
101748: IFFALSE 101775
// begin result := [ i , weapon ] ;
101750: LD_ADDR_VAR 0 3
101754: PUSH
101755: LD_VAR 0 4
101759: PUSH
101760: LD_VAR 0 8
101764: PUSH
101765: EMPTY
101766: LIST
101767: LIST
101768: ST_TO_ADDR
// exit ;
101769: POP
101770: POP
101771: POP
101772: POP
101773: GO 101783
// end ; end ;
101775: GO 101711
101777: POP
101778: POP
// end ;
101779: GO 101597
101781: POP
101782: POP
// end ;
101783: LD_VAR 0 3
101787: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
101788: LD_INT 0
101790: PPUSH
// if not side or side > 8 then
101791: LD_VAR 0 3
101795: NOT
101796: PUSH
101797: LD_VAR 0 3
101801: PUSH
101802: LD_INT 8
101804: GREATER
101805: OR
101806: IFFALSE 101810
// exit ;
101808: GO 101869
// if not range then
101810: LD_VAR 0 4
101814: NOT
101815: IFFALSE 101826
// range := - 12 ;
101817: LD_ADDR_VAR 0 4
101821: PUSH
101822: LD_INT 12
101824: NEG
101825: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
101826: LD_VAR 0 1
101830: PPUSH
101831: LD_VAR 0 2
101835: PPUSH
101836: LD_VAR 0 3
101840: PPUSH
101841: LD_VAR 0 4
101845: PPUSH
101846: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
101850: LD_VAR 0 1
101854: PPUSH
101855: LD_VAR 0 2
101859: PPUSH
101860: LD_VAR 0 3
101864: PPUSH
101865: CALL_OW 331
// end ;
101869: LD_VAR 0 5
101873: RET
// export function Video ( mode ) ; begin
101874: LD_INT 0
101876: PPUSH
// ingame_video = mode ;
101877: LD_ADDR_OWVAR 52
101881: PUSH
101882: LD_VAR 0 1
101886: ST_TO_ADDR
// interface_hidden = mode ;
101887: LD_ADDR_OWVAR 54
101891: PUSH
101892: LD_VAR 0 1
101896: ST_TO_ADDR
// end ;
101897: LD_VAR 0 2
101901: RET
// export function Join ( array , element ) ; begin
101902: LD_INT 0
101904: PPUSH
// result := array ^ element ;
101905: LD_ADDR_VAR 0 3
101909: PUSH
101910: LD_VAR 0 1
101914: PUSH
101915: LD_VAR 0 2
101919: ADD
101920: ST_TO_ADDR
// end ;
101921: LD_VAR 0 3
101925: RET
// export function JoinUnion ( array , element ) ; begin
101926: LD_INT 0
101928: PPUSH
// result := array union element ;
101929: LD_ADDR_VAR 0 3
101933: PUSH
101934: LD_VAR 0 1
101938: PUSH
101939: LD_VAR 0 2
101943: UNION
101944: ST_TO_ADDR
// end ;
101945: LD_VAR 0 3
101949: RET
// export function GetBehemoths ( side ) ; begin
101950: LD_INT 0
101952: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
101953: LD_ADDR_VAR 0 2
101957: PUSH
101958: LD_INT 22
101960: PUSH
101961: LD_VAR 0 1
101965: PUSH
101966: EMPTY
101967: LIST
101968: LIST
101969: PUSH
101970: LD_INT 31
101972: PUSH
101973: LD_INT 25
101975: PUSH
101976: EMPTY
101977: LIST
101978: LIST
101979: PUSH
101980: EMPTY
101981: LIST
101982: LIST
101983: PPUSH
101984: CALL_OW 69
101988: ST_TO_ADDR
// end ;
101989: LD_VAR 0 2
101993: RET
// export function Shuffle ( array ) ; var i , index ; begin
101994: LD_INT 0
101996: PPUSH
101997: PPUSH
101998: PPUSH
// result := [ ] ;
101999: LD_ADDR_VAR 0 2
102003: PUSH
102004: EMPTY
102005: ST_TO_ADDR
// if not array then
102006: LD_VAR 0 1
102010: NOT
102011: IFFALSE 102015
// exit ;
102013: GO 102114
// Randomize ;
102015: CALL_OW 10
// for i = array downto 1 do
102019: LD_ADDR_VAR 0 3
102023: PUSH
102024: DOUBLE
102025: LD_VAR 0 1
102029: INC
102030: ST_TO_ADDR
102031: LD_INT 1
102033: PUSH
102034: FOR_DOWNTO
102035: IFFALSE 102112
// begin index := rand ( 1 , array ) ;
102037: LD_ADDR_VAR 0 4
102041: PUSH
102042: LD_INT 1
102044: PPUSH
102045: LD_VAR 0 1
102049: PPUSH
102050: CALL_OW 12
102054: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
102055: LD_ADDR_VAR 0 2
102059: PUSH
102060: LD_VAR 0 2
102064: PPUSH
102065: LD_VAR 0 2
102069: PUSH
102070: LD_INT 1
102072: PLUS
102073: PPUSH
102074: LD_VAR 0 1
102078: PUSH
102079: LD_VAR 0 4
102083: ARRAY
102084: PPUSH
102085: CALL_OW 2
102089: ST_TO_ADDR
// array := Delete ( array , index ) ;
102090: LD_ADDR_VAR 0 1
102094: PUSH
102095: LD_VAR 0 1
102099: PPUSH
102100: LD_VAR 0 4
102104: PPUSH
102105: CALL_OW 3
102109: ST_TO_ADDR
// end ;
102110: GO 102034
102112: POP
102113: POP
// end ;
102114: LD_VAR 0 2
102118: RET
