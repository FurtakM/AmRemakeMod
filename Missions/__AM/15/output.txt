// export Stevens , Baker , Gordon , Peter , DeltaDoctor , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13Omega ; export Burlak , burlakVeh ; export omegaHeroes ; export ruAttacksCounter ; export amSciStatus ; export russianTPUnits ; export escapeAvalaible ; export StevensStatus , BurlakStatus ; export unitLost ; export allUnitsLengh ; export mission_prefix ; export siberiteRocketStatus ; export JMMGirl ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// ChangeSideFog ( 4 , 1 ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL_OW 343
// PrepareNature ( 4 , 3 , 3 , 3 , 2 , 0 , 0 , natureArea , 0 ) ;
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 3
  26: PPUSH
  27: LD_INT 3
  29: PPUSH
  30: LD_INT 2
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 17
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: CALL 7484 0 9
// SetBName ( amheaddepo , lambda ) ;
  49: LD_INT 295
  51: PPUSH
  52: LD_STRING lambda
  54: PPUSH
  55: CALL_OW 500
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
  59: LD_ADDR_EXP 28
  63: PUSH
  64: LD_STRING 13_StevensStatus_1
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: CALL_OW 30
  74: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
  75: LD_ADDR_EXP 29
  79: PUSH
  80: LD_STRING 13_BurlakStatus_1
  82: PPUSH
  83: LD_INT 0
  85: PPUSH
  86: CALL_OW 30
  90: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
  91: LD_ADDR_EXP 34
  95: PUSH
  96: LD_STRING 14_JMMGirl_1
  98: PPUSH
  99: LD_INT 0
 101: PPUSH
 102: CALL_OW 30
 106: ST_TO_ADDR
// omegaHeroes = [ ] ;
 107: LD_ADDR_EXP 23
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// russianTPUnits = [ ] ;
 114: LD_ADDR_EXP 26
 118: PUSH
 119: EMPTY
 120: ST_TO_ADDR
// ruAttacksCounter = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// escapeAvalaible = 0 ;
 129: LD_ADDR_EXP 27
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allUnitsLengh = 0 ;
 137: LD_ADDR_EXP 31
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// siberiteRocketStatus = 0 ;
 145: LD_ADDR_EXP 33
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// unitLost = 0 ;
 153: LD_ADDR_EXP 30
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// amSciStatus = 1 ;
 161: LD_ADDR_EXP 25
 165: PUSH
 166: LD_INT 1
 168: ST_TO_ADDR
// mission_prefix = 15_ ;
 169: LD_ADDR_EXP 32
 173: PUSH
 174: LD_STRING 15_
 176: ST_TO_ADDR
// debugMode = 0 ;
 177: LD_ADDR_EXP 35
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// PrepareOmegaTeam ;
 185: CALL 511 0 0
// SetDifficulty ;
 189: CALL 3509 0 0
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 35
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 508
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 30
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PPUSH
 318: CALL_OW 69
 322: PUSH
 323: FOR_IN
 324: IFFALSE 348
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 326: LD_VAR 0 1
 330: PPUSH
 331: CALL_OW 274
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: LD_INT 9999
 341: PPUSH
 342: CALL_OW 277
 346: GO 323
 348: POP
 349: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 350: LD_ADDR_VAR 0 1
 354: PUSH
 355: LD_INT 22
 357: PUSH
 358: LD_INT 1
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 30
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 1
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 427
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 274
 414: PPUSH
 415: LD_INT 2
 417: PPUSH
 418: LD_INT 9999
 420: PPUSH
 421: CALL_OW 277
 425: GO 402
 427: POP
 428: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 429: LD_ADDR_VAR 0 1
 433: PUSH
 434: LD_INT 22
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: LD_INT 30
 449: PUSH
 450: LD_INT 0
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 1
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 3
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ; end_of_file
 508: PPOPN 1
 510: END
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , un , mecha , avalaibleVehs , randBuild ; begin
 511: LD_INT 0
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
// uc_side = 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation = 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// omegaVeh = [ ] ;
 538: LD_ADDR_VAR 0 3
 542: PUSH
 543: EMPTY
 544: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 545: LD_ADDR_EXP 19
 549: PUSH
 550: LD_STRING Powell
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL 3200 0 2
 560: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
 561: LD_STRING 13s_Lisa
 563: PPUSH
 564: CALL_OW 28
 568: PUSH
 569: LD_INT 0
 571: EQUAL
 572: IFFALSE 587
// Lisa = PrepareUnitOmega ( Lisa ) ;
 574: LD_ADDR_EXP 6
 578: PUSH
 579: LD_STRING Lisa
 581: PPUSH
 582: CALL 3257 0 1
 586: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
 587: LD_STRING 13s_Donaldson
 589: PPUSH
 590: CALL_OW 28
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: IFFALSE 613
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
 600: LD_ADDR_EXP 7
 604: PUSH
 605: LD_STRING Donaldson
 607: PPUSH
 608: CALL 3257 0 1
 612: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
 613: LD_STRING 13s_Bobby
 615: PPUSH
 616: CALL_OW 28
 620: PUSH
 621: LD_INT 0
 623: EQUAL
 624: IFFALSE 639
// Bobby = PrepareUnitOmega ( Bobby ) ;
 626: LD_ADDR_EXP 8
 630: PUSH
 631: LD_STRING Bobby
 633: PPUSH
 634: CALL 3257 0 1
 638: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
 639: LD_STRING 13s_Cyrus
 641: PPUSH
 642: CALL_OW 28
 646: PUSH
 647: LD_INT 0
 649: EQUAL
 650: IFFALSE 665
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
 652: LD_ADDR_EXP 9
 656: PUSH
 657: LD_STRING Cyrus
 659: PPUSH
 660: CALL 3257 0 1
 664: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
 665: LD_STRING 13s_Denis
 667: PPUSH
 668: CALL_OW 28
 672: PUSH
 673: LD_INT 0
 675: EQUAL
 676: IFFALSE 691
// Denis = PrepareUnitOmega ( Denis ) ;
 678: LD_ADDR_EXP 10
 682: PUSH
 683: LD_STRING Denis
 685: PPUSH
 686: CALL 3257 0 1
 690: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
 691: LD_STRING 13s_Brown
 693: PPUSH
 694: CALL_OW 28
 698: PUSH
 699: LD_INT 0
 701: EQUAL
 702: IFFALSE 717
// Brown = PrepareUnitOmega ( Brown ) ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_STRING Brown
 711: PPUSH
 712: CALL 3257 0 1
 716: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
 717: LD_STRING 13s_Gladstone
 719: PPUSH
 720: CALL_OW 28
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: IFFALSE 743
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
 730: LD_ADDR_EXP 12
 734: PUSH
 735: LD_STRING Gladstone
 737: PPUSH
 738: CALL 3257 0 1
 742: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
 743: LD_STRING 13s_Houten
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 0
 753: EQUAL
 754: IFFALSE 769
// Houten = PrepareUnitOmega ( Houten ) ;
 756: LD_ADDR_EXP 13
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: CALL 3257 0 1
 768: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
 769: LD_STRING 13s_Cornel
 771: PPUSH
 772: CALL_OW 28
 776: PUSH
 777: LD_INT 0
 779: EQUAL
 780: IFFALSE 795
// Cornell = PrepareUnitOmega ( Cornell ) ;
 782: LD_ADDR_EXP 14
 786: PUSH
 787: LD_STRING Cornell
 789: PPUSH
 790: CALL 3257 0 1
 794: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
 795: LD_STRING 13s_Gary
 797: PPUSH
 798: CALL_OW 28
 802: PUSH
 803: LD_INT 0
 805: EQUAL
 806: IFFALSE 821
// Gary = PrepareUnitOmega ( Gary ) ;
 808: LD_ADDR_EXP 15
 812: PUSH
 813: LD_STRING Gary
 815: PPUSH
 816: CALL 3257 0 1
 820: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
 821: LD_STRING 13s_Frank
 823: PPUSH
 824: CALL_OW 28
 828: PUSH
 829: LD_INT 0
 831: EQUAL
 832: IFFALSE 847
// Frank = PrepareUnitOmega ( Frank ) ;
 834: LD_ADDR_EXP 16
 838: PUSH
 839: LD_STRING Frank
 841: PPUSH
 842: CALL 3257 0 1
 846: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
 847: LD_STRING 13s_Kikuchi
 849: PPUSH
 850: CALL_OW 28
 854: PUSH
 855: LD_INT 0
 857: EQUAL
 858: IFFALSE 873
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Kikuchi
 867: PPUSH
 868: CALL 3257 0 1
 872: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
 873: LD_EXP 34
 877: PUSH
 878: LD_INT 1
 880: EQUAL
 881: PUSH
 882: LD_EXP 34
 886: PUSH
 887: LD_INT 2
 889: EQUAL
 890: OR
 891: IFFALSE 921
// begin Connie = PrepareUnit ( Connie , true ) ;
 893: LD_ADDR_EXP 18
 897: PUSH
 898: LD_STRING Connie
 900: PPUSH
 901: LD_INT 1
 903: PPUSH
 904: CALL 3200 0 2
 908: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , AmFab1 ) ;
 909: LD_EXP 18
 913: PPUSH
 914: LD_INT 51
 916: PPUSH
 917: CALL_OW 52
// end ; if StevensStatus = 1 then
 921: LD_EXP 28
 925: PUSH
 926: LD_INT 1
 928: EQUAL
 929: IFFALSE 988
// begin Stevens = PrepareUnitOmega ( Stevens ) ;
 931: LD_ADDR_EXP 1
 935: PUSH
 936: LD_STRING Stevens
 938: PPUSH
 939: CALL 3257 0 1
 943: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawn , false ) ;
 944: LD_EXP 1
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: CALL_OW 49
// ComTurnXY ( Stevens , 125 , 16 ) ;
 959: LD_EXP 1
 963: PPUSH
 964: LD_INT 125
 966: PPUSH
 967: LD_INT 16
 969: PPUSH
 970: CALL_OW 118
// SetClass ( Stevens , 4 ) ;
 974: LD_EXP 1
 978: PPUSH
 979: LD_INT 4
 981: PPUSH
 982: CALL_OW 336
// end else
 986: GO 1054
// begin hc_name = Baker Smith ;
 988: LD_ADDR_OWVAR 26
 992: PUSH
 993: LD_STRING Baker Smith
 995: ST_TO_ADDR
// hc_gallery =  ;
 996: LD_ADDR_OWVAR 33
1000: PUSH
1001: LD_STRING 
1003: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1004: LD_INT 1
1006: PPUSH
1007: LD_INT 10
1009: PPUSH
1010: CALL_OW 384
// Baker = CreateHuman ;
1014: LD_ADDR_EXP 2
1018: PUSH
1019: CALL_OW 44
1023: ST_TO_ADDR
// PlaceUnitArea ( Baker , StevensSpawn , false ) ;
1024: LD_EXP 2
1028: PPUSH
1029: LD_INT 2
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 49
// ComTurnXY ( Baker , 125 , 16 ) ;
1039: LD_EXP 2
1043: PPUSH
1044: LD_INT 125
1046: PPUSH
1047: LD_INT 16
1049: PPUSH
1050: CALL_OW 118
// end ; Gordon = NewCharacter ( Gordon ) ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: LD_STRING Gordon
1061: PPUSH
1062: CALL_OW 25
1066: ST_TO_ADDR
// PlaceUnitArea ( Gordon , GordonSpawn , false ) ;
1067: LD_EXP 3
1071: PPUSH
1072: LD_INT 3
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// ComTurnXY ( Gordon , 125 , 16 ) ;
1082: LD_EXP 3
1086: PPUSH
1087: LD_INT 125
1089: PPUSH
1090: LD_INT 16
1092: PPUSH
1093: CALL_OW 118
// hc_name = Peter McClain ;
1097: LD_ADDR_OWVAR 26
1101: PUSH
1102: LD_STRING Peter McClain
1104: ST_TO_ADDR
// hc_gallery =  ;
1105: LD_ADDR_OWVAR 33
1109: PUSH
1110: LD_STRING 
1112: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1113: LD_INT 1
1115: PPUSH
1116: LD_INT 10
1118: PPUSH
1119: CALL_OW 384
// Peter = CreateHuman ;
1123: LD_ADDR_EXP 4
1127: PUSH
1128: CALL_OW 44
1132: ST_TO_ADDR
// PlaceUnitArea ( Peter , PeterSpawn , false ) ;
1133: LD_EXP 4
1137: PPUSH
1138: LD_INT 4
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 49
// ComTurnXY ( Peter , 125 , 16 ) ;
1148: LD_EXP 4
1152: PPUSH
1153: LD_INT 125
1155: PPUSH
1156: LD_INT 16
1158: PPUSH
1159: CALL_OW 118
// if TestCharacters ( 10c_DeltaDoctor ) = true then
1163: LD_STRING 10c_DeltaDoctor
1165: PPUSH
1166: CALL_OW 28
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1234
// begin DeltaDoctor = PrepareUnit ( 10c_DeltaDoctor , true ) ;
1176: LD_ADDR_EXP 5
1180: PUSH
1181: LD_STRING 10c_DeltaDoctor
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: CALL 3200 0 2
1191: ST_TO_ADDR
// PlaceUnitArea ( DeltaDoctor , DeltaSciSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// ComTurnXY ( DeltaDoctor , 125 , 16 ) ;
1207: LD_EXP 5
1211: PPUSH
1212: LD_INT 125
1214: PPUSH
1215: LD_INT 16
1217: PPUSH
1218: CALL_OW 118
// SetClass ( DeltaDoctor , 4 ) ;
1222: LD_EXP 5
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: CALL_OW 336
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
1234: LD_ADDR_EXP 20
1238: PUSH
1239: LD_STRING 13_other_survivors
1241: PPUSH
1242: CALL_OW 31
1246: ST_TO_ADDR
// for i in omegaHeroes do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: LD_EXP 23
1256: PUSH
1257: FOR_IN
1258: IFFALSE 1400
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1260: LD_INT 22
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 30
1272: PUSH
1273: LD_INT 32
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 58
1282: PUSH
1283: EMPTY
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: PPUSH
1291: CALL_OW 69
1295: PUSH
1296: LD_INT 0
1298: GREATER
1299: IFFALSE 1364
// begin PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1301: LD_VAR 0 2
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PUSH
1316: LD_INT 30
1318: PUSH
1319: LD_INT 32
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 58
1328: PUSH
1329: EMPTY
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: PPUSH
1337: CALL_OW 69
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: PPUSH
1346: CALL_OW 52
// SetClass ( i , 1 ) ;
1350: LD_VAR 0 2
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: CALL_OW 336
// end else
1362: GO 1398
// begin PlaceUnitArea ( i , [ AmericanSpawn1 , AmericanSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1364: LD_VAR 0 2
1368: PPUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 6
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 12
1389: ARRAY
1390: PPUSH
1391: LD_INT 0
1393: PPUSH
1394: CALL_OW 49
// end ; end ;
1398: GO 1257
1400: POP
1401: POP
// if others13Omega >= 2 then
1402: LD_EXP 20
1406: PUSH
1407: LD_INT 2
1409: GREATEREQUAL
1410: IFFALSE 1614
// begin for i := 1 to others13Omega - 1 do
1412: LD_ADDR_VAR 0 2
1416: PUSH
1417: DOUBLE
1418: LD_INT 1
1420: DEC
1421: ST_TO_ADDR
1422: LD_EXP 20
1426: PUSH
1427: LD_INT 1
1429: MINUS
1430: PUSH
1431: FOR_TO
1432: IFFALSE 1612
// begin if GetSkill ( others13Omega [ i ] , 3 ) < GetSkill ( others13Omega [ i + 1 ] , 3 ) then
1434: LD_EXP 20
1438: PUSH
1439: LD_VAR 0 2
1443: ARRAY
1444: PPUSH
1445: LD_INT 3
1447: PPUSH
1448: CALL_OW 259
1452: PUSH
1453: LD_EXP 20
1457: PUSH
1458: LD_VAR 0 2
1462: PUSH
1463: LD_INT 1
1465: PLUS
1466: ARRAY
1467: PPUSH
1468: LD_INT 3
1470: PPUSH
1471: CALL_OW 259
1475: LESS
1476: IFFALSE 1610
// begin mecha = others13Omega [ i + 1 ] ;
1478: LD_ADDR_VAR 0 7
1482: PUSH
1483: LD_EXP 20
1487: PUSH
1488: LD_VAR 0 2
1492: PUSH
1493: LD_INT 1
1495: PLUS
1496: ARRAY
1497: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1498: LD_VAR 0 7
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: CALL_OW 336
// PlaceHumanInUnit ( mecha , AmControlTow ) ;
1510: LD_VAR 0 7
1514: PPUSH
1515: LD_INT 148
1517: PPUSH
1518: CALL_OW 52
// others13Omega = others13Omega diff mecha ;
1522: LD_ADDR_EXP 20
1526: PUSH
1527: LD_EXP 20
1531: PUSH
1532: LD_VAR 0 7
1536: DIFF
1537: ST_TO_ADDR
// for i in FilterUnitsInArea ( AmericanBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
1538: LD_ADDR_VAR 0 2
1542: PUSH
1543: LD_INT 1
1545: PPUSH
1546: LD_INT 22
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 21
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 3
1568: PUSH
1569: LD_INT 61
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 70
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1608
// ComLinkTo ( i , mecha ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 7
1601: PPUSH
1602: CALL_OW 135
1606: GO 1589
1608: POP
1609: POP
// end ; end ;
1610: GO 1431
1612: POP
1613: POP
// end ; if others13Omega > 0 then
1614: LD_EXP 20
1618: PUSH
1619: LD_INT 0
1621: GREATER
1622: IFFALSE 1961
// begin for i = 1 to others13Omega do
1624: LD_ADDR_VAR 0 2
1628: PUSH
1629: DOUBLE
1630: LD_INT 1
1632: DEC
1633: ST_TO_ADDR
1634: LD_EXP 20
1638: PUSH
1639: FOR_TO
1640: IFFALSE 1959
// begin randBuild = [ AmLab1 , AmLab2 , AmLab3 , AmFab1 , AmFab2 , AmBar1 , AmBar2 ] [ Rand ( 1 , 7 ) ] ;
1642: LD_ADDR_VAR 0 9
1646: PUSH
1647: LD_INT 40
1649: PUSH
1650: LD_INT 43
1652: PUSH
1653: LD_INT 66
1655: PUSH
1656: LD_INT 51
1658: PUSH
1659: LD_INT 60
1661: PUSH
1662: LD_INT 31
1664: PUSH
1665: LD_INT 69
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 7
1682: PPUSH
1683: CALL_OW 12
1687: ARRAY
1688: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1689: LD_INT 22
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 30
1701: PUSH
1702: LD_INT 32
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 58
1711: PUSH
1712: EMPTY
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PPUSH
1720: CALL_OW 69
1724: PUSH
1725: LD_INT 0
1727: GREATER
1728: IFFALSE 1805
// begin PlaceHumanInUnit ( others13Omega [ i ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1730: LD_EXP 20
1734: PUSH
1735: LD_VAR 0 2
1739: ARRAY
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 32
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 58
1763: PUSH
1764: EMPTY
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: LD_INT 1
1779: ARRAY
1780: PPUSH
1781: CALL_OW 52
// SetClass ( others13Omega [ i ] , 1 ) ;
1785: LD_EXP 20
1789: PUSH
1790: LD_VAR 0 2
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: CALL_OW 336
// end else
1803: GO 1957
// begin PlaceHumanInUnit ( others13Omega [ i ] , randBuild ) ;
1805: LD_EXP 20
1809: PUSH
1810: LD_VAR 0 2
1814: ARRAY
1815: PPUSH
1816: LD_VAR 0 9
1820: PPUSH
1821: CALL_OW 52
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_factory then
1825: LD_EXP 20
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: CALL_OW 310
1840: PPUSH
1841: CALL_OW 266
1845: PUSH
1846: LD_INT 3
1848: EQUAL
1849: IFFALSE 1869
// SetClass ( others13Omega [ i ] , 3 ) ;
1851: LD_EXP 20
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 3
1864: PPUSH
1865: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = 4 then
1869: LD_EXP 20
1873: PUSH
1874: LD_VAR 0 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 310
1884: PPUSH
1885: CALL_OW 266
1889: PUSH
1890: LD_INT 4
1892: EQUAL
1893: IFFALSE 1913
// SetClass ( others13Omega [ i ] , 1 ) ;
1895: LD_EXP 20
1899: PUSH
1900: LD_VAR 0 2
1904: ARRAY
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_lab_full then
1913: LD_EXP 20
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PPUSH
1924: CALL_OW 310
1928: PPUSH
1929: CALL_OW 266
1933: PUSH
1934: LD_INT 8
1936: EQUAL
1937: IFFALSE 1957
// SetClass ( others13Omega [ i ] , 1 ) ;
1939: LD_EXP 20
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 336
// end ; end ;
1957: GO 1639
1959: POP
1960: POP
// end ; for i = 1 to 8 do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: DOUBLE
1967: LD_INT 1
1969: DEC
1970: ST_TO_ADDR
1971: LD_INT 8
1973: PUSH
1974: FOR_TO
1975: IFFALSE 2139
// begin PrepareVehicle ( [ us_morphling , us_heavy_tracked , us_medium_tracked ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , [ control_computer , control_remote , control_computer ] [ rand ( 1 , 3 ) ] , [ us_laser , us_rocket_launcher , us_laser , us_crane , us_double_gun ] [ rand ( 1 , 5 ) ] , 100 ) ;
1977: LD_INT 5
1979: PUSH
1980: LD_INT 4
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 12
2001: ARRAY
2002: PPUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 3
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 12
2023: ARRAY
2024: PPUSH
2025: LD_INT 3
2027: PUSH
2028: LD_INT 2
2030: PUSH
2031: LD_INT 3
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 1
2041: PPUSH
2042: LD_INT 3
2044: PPUSH
2045: CALL_OW 12
2049: ARRAY
2050: PPUSH
2051: LD_INT 9
2053: PUSH
2054: LD_INT 7
2056: PUSH
2057: LD_INT 9
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_INT 5
2078: PPUSH
2079: CALL_OW 12
2083: ARRAY
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL 3359 0 5
// veh := CreateVehicle ;
2092: LD_ADDR_VAR 0 5
2096: PUSH
2097: CALL_OW 45
2101: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2102: LD_VAR 0 5
2106: PPUSH
2107: LD_INT 0
2109: PPUSH
2110: LD_INT 5
2112: PPUSH
2113: CALL_OW 12
2117: PPUSH
2118: CALL_OW 233
// PlaceUnitArea ( veh , base_vehicles , false ) ;
2122: LD_VAR 0 5
2126: PPUSH
2127: LD_INT 16
2129: PPUSH
2130: LD_INT 0
2132: PPUSH
2133: CALL_OW 49
// end ;
2137: GO 1974
2139: POP
2140: POP
// PrepareVehicle ( us_morphling , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , us_cargo_bay , 100 ) ;
2141: LD_INT 5
2143: PPUSH
2144: LD_INT 1
2146: PUSH
2147: LD_INT 3
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 1
2156: PPUSH
2157: LD_INT 2
2159: PPUSH
2160: CALL_OW 12
2164: ARRAY
2165: PPUSH
2166: LD_INT 2
2168: PPUSH
2169: LD_INT 12
2171: PPUSH
2172: LD_INT 100
2174: PPUSH
2175: CALL 3359 0 5
// veh := CreateVehicle ;
2179: LD_ADDR_VAR 0 5
2183: PUSH
2184: CALL_OW 45
2188: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2189: LD_VAR 0 5
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: LD_INT 5
2199: PPUSH
2200: CALL_OW 12
2204: PPUSH
2205: CALL_OW 233
// PlaceUnitArea ( veh , base_vehicles , false ) ;
2209: LD_VAR 0 5
2213: PPUSH
2214: LD_INT 16
2216: PPUSH
2217: LD_INT 0
2219: PPUSH
2220: CALL_OW 49
// for i = 1 to 5 do
2224: LD_ADDR_VAR 0 2
2228: PUSH
2229: DOUBLE
2230: LD_INT 1
2232: DEC
2233: ST_TO_ADDR
2234: LD_INT 5
2236: PUSH
2237: FOR_TO
2238: IFFALSE 2286
// begin PrepareHuman ( false , class_apeman_engineer , 5 ) ;
2240: LD_INT 0
2242: PPUSH
2243: LD_INT 16
2245: PPUSH
2246: LD_INT 5
2248: PPUSH
2249: CALL_OW 380
// un := CreateHuman ;
2253: LD_ADDR_VAR 0 6
2257: PUSH
2258: CALL_OW 44
2262: ST_TO_ADDR
// PlaceUnitXYR ( un , 69 , 36 , 8 , false ) ;
2263: LD_VAR 0 6
2267: PPUSH
2268: LD_INT 69
2270: PPUSH
2271: LD_INT 36
2273: PPUSH
2274: LD_INT 8
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 50
// end ;
2284: GO 2237
2286: POP
2287: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_INT 22
2295: PUSH
2296: LD_INT 1
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PUSH
2303: LD_INT 33
2305: PUSH
2306: LD_INT 2
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 69
2321: PUSH
2322: FOR_IN
2323: IFFALSE 2336
// Connect ( i ) ;
2325: LD_VAR 0 2
2329: PPUSH
2330: CALL 2846 0 1
2334: GO 2322
2336: POP
2337: POP
// end ; end_of_file
2338: LD_VAR 0 1
2342: RET
// export function PrepareFirstAtacks ; var i , veh ; begin
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// for i := 1 to 10 do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 10
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2511
// begin uc_side = 3 ;
2364: LD_ADDR_OWVAR 20
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// uc_nation = 3 ;
2372: LD_ADDR_OWVAR 21
2376: PUSH
2377: LD_INT 3
2379: ST_TO_ADDR
// vc_engine = 3 ;
2380: LD_ADDR_OWVAR 39
2384: PUSH
2385: LD_INT 3
2387: ST_TO_ADDR
// vc_control = 3 ;
2388: LD_ADDR_OWVAR 38
2392: PUSH
2393: LD_INT 3
2395: ST_TO_ADDR
// vc_weapon = [ 46 , 44 , 45 , 47 ] [ Rand ( 1 , 4 ) ] ;
2396: LD_ADDR_OWVAR 40
2400: PUSH
2401: LD_INT 46
2403: PUSH
2404: LD_INT 44
2406: PUSH
2407: LD_INT 45
2409: PUSH
2410: LD_INT 47
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 1
2421: PPUSH
2422: LD_INT 4
2424: PPUSH
2425: CALL_OW 12
2429: ARRAY
2430: ST_TO_ADDR
// vc_chassis = 24 ;
2431: LD_ADDR_OWVAR 37
2435: PUSH
2436: LD_INT 24
2438: ST_TO_ADDR
// veh = CreateVehicle ;
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: CALL_OW 45
2448: ST_TO_ADDR
// PlaceUnitArea ( veh , PreludiumAttack , false ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: LD_INT 7
2456: PPUSH
2457: LD_INT 0
2459: PPUSH
2460: CALL_OW 49
// ComAgressiveMove ( veh , 104 , 143 ) ;
2464: LD_VAR 0 3
2468: PPUSH
2469: LD_INT 104
2471: PPUSH
2472: LD_INT 143
2474: PPUSH
2475: CALL_OW 114
// AddComAgressiveMove ( veh , 114 , 136 ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 114
2486: PPUSH
2487: LD_INT 136
2489: PPUSH
2490: CALL_OW 174
// AddComAgressiveMove ( veh , 112 , 40 ) ;
2494: LD_VAR 0 3
2498: PPUSH
2499: LD_INT 112
2501: PPUSH
2502: LD_INT 40
2504: PPUSH
2505: CALL_OW 174
// end ;
2509: GO 2361
2511: POP
2512: POP
// end ;
2513: LD_VAR 0 1
2517: RET
// export function PrepareRussianTPUNits ; var i , un ; begin
2518: LD_INT 0
2520: PPUSH
2521: PPUSH
2522: PPUSH
// for i = 1 to 6 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 6
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2627
// begin uc_side = 3 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 3
2546: ST_TO_ADDR
// uc_nation = 3 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// hc_name =  ;
2555: LD_ADDR_OWVAR 26
2559: PUSH
2560: LD_STRING 
2562: ST_TO_ADDR
// hc_gallery =  ;
2563: LD_ADDR_OWVAR 33
2567: PUSH
2568: LD_STRING 
2570: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
2571: LD_INT 0
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 10
2579: PPUSH
2580: CALL_OW 380
// un = CreateHuman ;
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: CALL_OW 44
2593: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 14
2601: PPUSH
2602: LD_INT 0
2604: PPUSH
2605: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2609: LD_ADDR_EXP 26
2613: PUSH
2614: LD_EXP 26
2618: PUSH
2619: LD_VAR 0 3
2623: ADD
2624: ST_TO_ADDR
// end ;
2625: GO 2536
2627: POP
2628: POP
// for i = 1 to 3 do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 3
2641: PUSH
2642: FOR_TO
2643: IFFALSE 2733
// begin uc_side = 3 ;
2645: LD_ADDR_OWVAR 20
2649: PUSH
2650: LD_INT 3
2652: ST_TO_ADDR
// uc_nation = 3 ;
2653: LD_ADDR_OWVAR 21
2657: PUSH
2658: LD_INT 3
2660: ST_TO_ADDR
// hc_name =  ;
2661: LD_ADDR_OWVAR 26
2665: PUSH
2666: LD_STRING 
2668: ST_TO_ADDR
// hc_gallery =  ;
2669: LD_ADDR_OWVAR 33
2673: PUSH
2674: LD_STRING 
2676: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
2677: LD_INT 0
2679: PPUSH
2680: LD_INT 9
2682: PPUSH
2683: LD_INT 10
2685: PPUSH
2686: CALL_OW 380
// un = CreateHuman ;
2690: LD_ADDR_VAR 0 3
2694: PUSH
2695: CALL_OW 44
2699: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2700: LD_VAR 0 3
2704: PPUSH
2705: LD_INT 14
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2715: LD_ADDR_EXP 26
2719: PUSH
2720: LD_EXP 26
2724: PUSH
2725: LD_VAR 0 3
2729: ADD
2730: ST_TO_ADDR
// end ;
2731: GO 2642
2733: POP
2734: POP
// for i = 1 to 2 do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: DOUBLE
2741: LD_INT 1
2743: DEC
2744: ST_TO_ADDR
2745: LD_INT 2
2747: PUSH
2748: FOR_TO
2749: IFFALSE 2839
// begin uc_side = 3 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 3
2758: ST_TO_ADDR
// uc_nation = 3 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 3
2766: ST_TO_ADDR
// hc_name =  ;
2767: LD_ADDR_OWVAR 26
2771: PUSH
2772: LD_STRING 
2774: ST_TO_ADDR
// hc_gallery =  ;
2775: LD_ADDR_OWVAR 33
2779: PUSH
2780: LD_STRING 
2782: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
2783: LD_INT 1
2785: PPUSH
2786: LD_INT 4
2788: PPUSH
2789: LD_INT 10
2791: PPUSH
2792: CALL_OW 380
// un = CreateHuman ;
2796: LD_ADDR_VAR 0 3
2800: PUSH
2801: CALL_OW 44
2805: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_INT 14
2813: PPUSH
2814: LD_INT 0
2816: PPUSH
2817: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2821: LD_ADDR_EXP 26
2825: PUSH
2826: LD_EXP 26
2830: PUSH
2831: LD_VAR 0 3
2835: ADD
2836: ST_TO_ADDR
// end ;
2837: GO 2748
2839: POP
2840: POP
// end ; end_of_file end_of_file
2841: LD_VAR 0 1
2845: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
2850: PPUSH
2851: PPUSH
2852: PPUSH
2853: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
2854: LD_VAR 0 1
2858: NOT
2859: PUSH
2860: LD_VAR 0 1
2864: PPUSH
2865: CALL_OW 263
2869: PUSH
2870: LD_INT 2
2872: EQUAL
2873: NOT
2874: OR
2875: IFFALSE 2879
// exit ;
2877: GO 3195
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
2879: LD_ADDR_VAR 0 6
2883: PUSH
2884: LD_INT 22
2886: PUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 255
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: LD_INT 30
2906: PUSH
2907: LD_INT 36
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 34
2916: PUSH
2917: LD_INT 31
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PPUSH
2933: CALL_OW 69
2937: ST_TO_ADDR
// if not tmp then
2938: LD_VAR 0 6
2942: NOT
2943: IFFALSE 2947
// exit ;
2945: GO 3195
// result := [ ] ;
2947: LD_ADDR_VAR 0 2
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// for i in tmp do
2954: LD_ADDR_VAR 0 3
2958: PUSH
2959: LD_VAR 0 6
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3036
// begin t := UnitsInside ( i ) ;
2967: LD_ADDR_VAR 0 4
2971: PUSH
2972: LD_VAR 0 3
2976: PPUSH
2977: CALL_OW 313
2981: ST_TO_ADDR
// if t then
2982: LD_VAR 0 4
2986: IFFALSE 3034
// for j in t do
2988: LD_ADDR_VAR 0 7
2992: PUSH
2993: LD_VAR 0 4
2997: PUSH
2998: FOR_IN
2999: IFFALSE 3032
// result := Insert ( result , result + 1 , j ) ;
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: LD_VAR 0 2
3010: PPUSH
3011: LD_VAR 0 2
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: PPUSH
3020: LD_VAR 0 7
3024: PPUSH
3025: CALL_OW 2
3029: ST_TO_ADDR
3030: GO 2998
3032: POP
3033: POP
// end ;
3034: GO 2964
3036: POP
3037: POP
// if not result then
3038: LD_VAR 0 2
3042: NOT
3043: IFFALSE 3047
// exit ;
3045: GO 3195
// mech := result [ 1 ] ;
3047: LD_ADDR_VAR 0 5
3051: PUSH
3052: LD_VAR 0 2
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: ST_TO_ADDR
// if result > 1 then
3061: LD_VAR 0 2
3065: PUSH
3066: LD_INT 1
3068: GREATER
3069: IFFALSE 3181
// for i = 2 to result do
3071: LD_ADDR_VAR 0 3
3075: PUSH
3076: DOUBLE
3077: LD_INT 2
3079: DEC
3080: ST_TO_ADDR
3081: LD_VAR 0 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3179
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_VAR 0 2
3098: PUSH
3099: LD_VAR 0 3
3103: ARRAY
3104: PPUSH
3105: LD_INT 3
3107: PPUSH
3108: CALL_OW 259
3112: PUSH
3113: LD_VAR 0 2
3117: PUSH
3118: LD_VAR 0 3
3122: ARRAY
3123: PPUSH
3124: CALL_OW 432
3128: MINUS
3129: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
3130: LD_VAR 0 4
3134: PUSH
3135: LD_VAR 0 5
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: CALL_OW 259
3147: PUSH
3148: LD_VAR 0 5
3152: PPUSH
3153: CALL_OW 432
3157: MINUS
3158: GREATEREQUAL
3159: IFFALSE 3177
// mech := result [ i ] ;
3161: LD_ADDR_VAR 0 5
3165: PUSH
3166: LD_VAR 0 2
3170: PUSH
3171: LD_VAR 0 3
3175: ARRAY
3176: ST_TO_ADDR
// end ;
3177: GO 3086
3179: POP
3180: POP
// ComLinkTo ( vehicle , mech ) ;
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 5
3190: PPUSH
3191: CALL_OW 135
// end ;
3195: LD_VAR 0 2
3199: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3200: LD_INT 0
3202: PPUSH
3203: PPUSH
// if exist_mode then
3204: LD_VAR 0 2
3208: IFFALSE 3227
// unit := CreateCharacter ( ident ) else
3210: LD_ADDR_VAR 0 4
3214: PUSH
3215: LD_VAR 0 1
3219: PPUSH
3220: CALL_OW 34
3224: ST_TO_ADDR
3225: GO 3242
// unit := NewCharacter ( ident ) ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 25
3241: ST_TO_ADDR
// result := unit ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_VAR 0 4
3251: ST_TO_ADDR
// end ;
3252: LD_VAR 0 3
3256: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
3257: LD_INT 0
3259: PPUSH
3260: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
3261: LD_STRING 13f_
3263: PUSH
3264: LD_VAR 0 1
3268: STR
3269: PPUSH
3270: CALL_OW 28
3274: PUSH
3275: LD_INT 1
3277: EQUAL
3278: IFFALSE 3344
// begin unit = CreateCharacter ( 13f_ & ident ) ;
3280: LD_ADDR_VAR 0 3
3284: PUSH
3285: LD_STRING 13f_
3287: PUSH
3288: LD_VAR 0 1
3292: STR
3293: PPUSH
3294: CALL_OW 34
3298: ST_TO_ADDR
// omegaHeroes = omegaHeroes ^ unit ;
3299: LD_ADDR_EXP 23
3303: PUSH
3304: LD_EXP 23
3308: PUSH
3309: LD_VAR 0 3
3313: ADD
3314: ST_TO_ADDR
// if not unit = Stevens then
3315: LD_VAR 0 3
3319: PUSH
3320: LD_EXP 1
3324: EQUAL
3325: NOT
3326: IFFALSE 3344
// omegaHeroes = omegaHeroes ^ unit ;
3328: LD_ADDR_EXP 23
3332: PUSH
3333: LD_EXP 23
3337: PUSH
3338: LD_VAR 0 3
3342: ADD
3343: ST_TO_ADDR
// end ; result := unit ;
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_VAR 0 3
3353: ST_TO_ADDR
// end ;
3354: LD_VAR 0 2
3358: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
3359: LD_INT 0
3361: PPUSH
// vc_chassis := chassis ;
3362: LD_ADDR_OWVAR 37
3366: PUSH
3367: LD_VAR 0 1
3371: ST_TO_ADDR
// vc_engine := engine ;
3372: LD_ADDR_OWVAR 39
3376: PUSH
3377: LD_VAR 0 2
3381: ST_TO_ADDR
// vc_control := control ;
3382: LD_ADDR_OWVAR 38
3386: PUSH
3387: LD_VAR 0 3
3391: ST_TO_ADDR
// vc_weapon := weapon ;
3392: LD_ADDR_OWVAR 40
3396: PUSH
3397: LD_VAR 0 4
3401: ST_TO_ADDR
// vc_fuel_battery := fuel ;
3402: LD_ADDR_OWVAR 41
3406: PUSH
3407: LD_VAR 0 5
3411: ST_TO_ADDR
// end ;
3412: LD_VAR 0 6
3416: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
3417: LD_INT 0
3419: PPUSH
3420: PPUSH
// for i in charactersList do
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_VAR 0 1
3430: PUSH
3431: FOR_IN
3432: IFFALSE 3461
// begin if IsOk ( i ) then
3434: LD_VAR 0 4
3438: PPUSH
3439: CALL_OW 302
3443: IFFALSE 3459
// SaveCharacters ( i , ident ) ;
3445: LD_VAR 0 4
3449: PPUSH
3450: LD_VAR 0 2
3454: PPUSH
3455: CALL_OW 38
// end ;
3459: GO 3431
3461: POP
3462: POP
// end ;
3463: LD_VAR 0 3
3467: RET
// export function TabLenght ( tab ) ; var i ; begin
3468: LD_INT 0
3470: PPUSH
3471: PPUSH
// for i = 1 to tab do
3472: LD_ADDR_VAR 0 3
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 1
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3502
// result = i ;
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_VAR 0 3
3499: ST_TO_ADDR
3500: GO 3487
3502: POP
3503: POP
// end ;
3504: LD_VAR 0 2
3508: RET
// export function SetDifficulty ; begin
3509: LD_INT 0
3511: PPUSH
// if Difficulty = 1 then
3512: LD_OWVAR 67
3516: PUSH
3517: LD_INT 1
3519: EQUAL
3520: IFFALSE 3587
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3522: LD_INT 51
3524: PPUSH
3525: LD_INT 3
3527: PPUSH
3528: LD_INT 2
3530: PPUSH
3531: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3535: LD_INT 57
3537: PPUSH
3538: LD_INT 3
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3548: LD_INT 63
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 2
3556: PPUSH
3557: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3561: LD_INT 52
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3574: LD_INT 58
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: LD_INT 2
3582: PPUSH
3583: CALL_OW 322
// end ; if Difficulty = 2 then
3587: LD_OWVAR 67
3591: PUSH
3592: LD_INT 2
3594: EQUAL
3595: IFFALSE 3688
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3597: LD_INT 51
3599: PPUSH
3600: LD_INT 3
3602: PPUSH
3603: LD_INT 2
3605: PPUSH
3606: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3610: LD_INT 57
3612: PPUSH
3613: LD_INT 3
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3623: LD_INT 63
3625: PPUSH
3626: LD_INT 3
3628: PPUSH
3629: LD_INT 2
3631: PPUSH
3632: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3636: LD_INT 52
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 2
3644: PPUSH
3645: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3649: LD_INT 58
3651: PPUSH
3652: LD_INT 3
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3662: LD_INT 64
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 2
3670: PPUSH
3671: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3675: LD_INT 59
3677: PPUSH
3678: LD_INT 3
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 322
// end ; if Difficulty = 3 then
3688: LD_OWVAR 67
3692: PUSH
3693: LD_INT 3
3695: EQUAL
3696: IFFALSE 3815
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3698: LD_INT 51
3700: PPUSH
3701: LD_INT 3
3703: PPUSH
3704: LD_INT 2
3706: PPUSH
3707: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3711: LD_INT 57
3713: PPUSH
3714: LD_INT 3
3716: PPUSH
3717: LD_INT 2
3719: PPUSH
3720: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3724: LD_INT 63
3726: PPUSH
3727: LD_INT 3
3729: PPUSH
3730: LD_INT 2
3732: PPUSH
3733: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3737: LD_INT 52
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_INT 2
3745: PPUSH
3746: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3750: LD_INT 58
3752: PPUSH
3753: LD_INT 3
3755: PPUSH
3756: LD_INT 2
3758: PPUSH
3759: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3763: LD_INT 64
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_INT 2
3771: PPUSH
3772: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
3776: LD_INT 53
3778: PPUSH
3779: LD_INT 3
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3789: LD_INT 59
3791: PPUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_INT 2
3797: PPUSH
3798: CALL_OW 322
// SetTech ( tech_ST3 , 3 , state_researched ) ;
3802: LD_INT 65
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: CALL_OW 322
// end ; end ;
3815: LD_VAR 0 1
3819: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
3824: PPUSH
// characters := characters diff [ Stevens , Baker , Gordon , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Powell ] ;
3825: LD_ADDR_VAR 0 1
3829: PUSH
3830: LD_VAR 0 1
3834: PUSH
3835: LD_EXP 1
3839: PUSH
3840: LD_EXP 2
3844: PUSH
3845: LD_EXP 3
3849: PUSH
3850: LD_EXP 6
3854: PUSH
3855: LD_EXP 7
3859: PUSH
3860: LD_EXP 8
3864: PUSH
3865: LD_EXP 9
3869: PUSH
3870: LD_EXP 10
3874: PUSH
3875: LD_EXP 11
3879: PUSH
3880: LD_EXP 12
3884: PUSH
3885: LD_EXP 13
3889: PUSH
3890: LD_EXP 14
3894: PUSH
3895: LD_EXP 15
3899: PUSH
3900: LD_EXP 16
3904: PUSH
3905: LD_EXP 17
3909: PUSH
3910: LD_EXP 19
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: DIFF
3933: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3934: LD_ADDR_VAR 0 6
3938: PUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 12
3951: ST_TO_ADDR
// for i = 1 to characters do
3952: LD_ADDR_VAR 0 5
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_VAR 0 1
3966: PUSH
3967: FOR_TO
3968: IFFALSE 4078
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3970: LD_VAR 0 5
3974: PUSH
3975: LD_VAR 0 6
3979: EQUAL
3980: PUSH
3981: LD_VAR 0 1
3985: PUSH
3986: LD_VAR 0 5
3990: ARRAY
3991: PPUSH
3992: CALL_OW 258
3996: PUSH
3997: LD_INT 1
3999: EQUAL
4000: AND
4001: IFFALSE 4023
// Say ( characters [ i ] , dialogMID ) ;
4003: LD_VAR 0 1
4007: PUSH
4008: LD_VAR 0 5
4012: ARRAY
4013: PPUSH
4014: LD_VAR 0 2
4018: PPUSH
4019: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4023: LD_VAR 0 5
4027: PUSH
4028: LD_VAR 0 6
4032: EQUAL
4033: PUSH
4034: LD_VAR 0 1
4038: PUSH
4039: LD_VAR 0 5
4043: ARRAY
4044: PPUSH
4045: CALL_OW 258
4049: PUSH
4050: LD_INT 2
4052: EQUAL
4053: AND
4054: IFFALSE 4076
// Say ( characters [ i ] , dialogFID ) ;
4056: LD_VAR 0 1
4060: PUSH
4061: LD_VAR 0 5
4065: ARRAY
4066: PPUSH
4067: LD_VAR 0 3
4071: PPUSH
4072: CALL_OW 88
// end ;
4076: GO 3967
4078: POP
4079: POP
// end ;
4080: LD_VAR 0 4
4084: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
4085: LD_INT 0
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4093: LD_ADDR_VAR 0 6
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_VAR 0 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 25
4112: PUSH
4113: LD_INT 9
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PPUSH
4124: CALL_OW 69
4128: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4129: LD_ADDR_VAR 0 7
4133: PUSH
4134: LD_INT 81
4136: PUSH
4137: LD_VAR 0 1
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 21
4151: PUSH
4152: LD_INT 3
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PPUSH
4167: CALL_OW 69
4171: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4172: LD_ADDR_VAR 0 4
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 3
4182: PPUSH
4183: CALL_OW 12
4187: ST_TO_ADDR
// for i = 1 to list do
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: DOUBLE
4194: LD_INT 1
4196: DEC
4197: ST_TO_ADDR
4198: LD_VAR 0 6
4202: PUSH
4203: FOR_TO
4204: IFFALSE 4406
// for ta in filter do
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_VAR 0 7
4215: PUSH
4216: FOR_IN
4217: IFFALSE 4402
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4219: LD_VAR 0 6
4223: PUSH
4224: LD_VAR 0 5
4228: ARRAY
4229: PPUSH
4230: LD_VAR 0 3
4234: PPUSH
4235: CALL_OW 296
4239: PUSH
4240: LD_INT 15
4242: LESSEQUAL
4243: IFFALSE 4400
// begin case c of 1 :
4245: LD_VAR 0 4
4249: PUSH
4250: LD_INT 1
4252: DOUBLE
4253: EQUAL
4254: IFTRUE 4258
4256: GO 4296
4258: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4259: LD_VAR 0 6
4263: PUSH
4264: LD_VAR 0 5
4268: ARRAY
4269: PPUSH
4270: LD_VAR 0 3
4274: PPUSH
4275: CALL_OW 250
4279: PPUSH
4280: LD_VAR 0 3
4284: PPUSH
4285: CALL_OW 251
4289: PPUSH
4290: CALL_OW 154
4294: GO 4400
4296: LD_INT 2
4298: DOUBLE
4299: EQUAL
4300: IFTRUE 4304
4302: GO 4368
4304: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4305: LD_VAR 0 6
4309: PUSH
4310: LD_VAR 0 5
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 3
4320: PPUSH
4321: CALL_OW 250
4325: PUSH
4326: LD_INT 1
4328: NEG
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 12
4337: PLUS
4338: PPUSH
4339: LD_VAR 0 3
4343: PPUSH
4344: CALL_OW 251
4348: PUSH
4349: LD_INT 1
4351: NEG
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 12
4360: PLUS
4361: PPUSH
4362: CALL_OW 153
4366: GO 4400
4368: LD_INT 3
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4399
4376: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4377: LD_VAR 0 6
4381: PUSH
4382: LD_VAR 0 5
4386: ARRAY
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 115
4397: GO 4400
4399: POP
// end ; end ;
4400: GO 4216
4402: POP
4403: POP
4404: GO 4203
4406: POP
4407: POP
// end ;
4408: LD_VAR 0 2
4412: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit , vehs ; begin
4413: LD_INT 0
4415: PPUSH
4416: PPUSH
4417: PPUSH
4418: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
4419: LD_INT 22
4421: PUSH
4422: LD_VAR 0 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 34
4443: PUSH
4444: LD_INT 49
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PPUSH
4456: CALL_OW 69
4460: PUSH
4461: LD_INT 0
4463: GREATER
4464: IFFALSE 4672
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
4466: LD_ADDR_VAR 0 5
4470: PUSH
4471: LD_INT 22
4473: PUSH
4474: LD_VAR 0 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 34
4495: PUSH
4496: LD_INT 49
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: PPUSH
4508: CALL_OW 69
4512: ST_TO_ADDR
// wait ( 0 0$3 ) ;
4513: LD_INT 105
4515: PPUSH
4516: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_VAR 0 5
4529: PPUSH
4530: LD_INT 3
4532: PUSH
4533: LD_INT 60
4535: PUSH
4536: EMPTY
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 72
4547: PUSH
4548: FOR_IN
4549: IFFALSE 4660
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
4551: LD_ADDR_VAR 0 4
4555: PUSH
4556: LD_INT 81
4558: PUSH
4559: LD_VAR 0 1
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 101
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 2
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 58
4596: PUSH
4597: EMPTY
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_VAR 0 3
4623: PPUSH
4624: CALL_OW 74
4628: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4629: LD_VAR 0 3
4633: PPUSH
4634: LD_VAR 0 4
4638: PPUSH
4639: CALL_OW 250
4643: PPUSH
4644: LD_VAR 0 4
4648: PPUSH
4649: CALL_OW 251
4653: PPUSH
4654: CALL_OW 111
// end ;
4658: GO 4548
4660: POP
4661: POP
// until vehs = 0 ;
4662: LD_VAR 0 5
4666: PUSH
4667: LD_INT 0
4669: EQUAL
4670: IFFALSE 4466
// end ;
4672: LD_VAR 0 2
4676: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
4677: LD_INT 0
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
// for i = 1 to medicCount do
4690: LD_ADDR_VAR 0 13
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 7
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4788
// begin uc_side = side ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_VAR 0 1
4717: ST_TO_ADDR
// uc_nation = nation ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_VAR 0 2
4727: ST_TO_ADDR
// hc_name =  ;
4728: LD_ADDR_OWVAR 26
4732: PUSH
4733: LD_STRING 
4735: ST_TO_ADDR
// hc_gallery =  ;
4736: LD_ADDR_OWVAR 33
4740: PUSH
4741: LD_STRING 
4743: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
4744: LD_INT 0
4746: PPUSH
4747: LD_INT 4
4749: PPUSH
4750: LD_VAR 0 8
4754: PPUSH
4755: CALL_OW 380
// un = CreateHuman ;
4759: LD_ADDR_VAR 0 15
4763: PUSH
4764: CALL_OW 44
4768: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4769: LD_VAR 0 15
4773: PPUSH
4774: LD_VAR 0 9
4778: PPUSH
4779: LD_INT 0
4781: PPUSH
4782: CALL_OW 49
// end ;
4786: GO 4705
4788: POP
4789: POP
// for i = 1 to soldierCount do
4790: LD_ADDR_VAR 0 13
4794: PUSH
4795: DOUBLE
4796: LD_INT 1
4798: DEC
4799: ST_TO_ADDR
4800: LD_VAR 0 3
4804: PUSH
4805: FOR_TO
4806: IFFALSE 4888
// begin uc_side = side ;
4808: LD_ADDR_OWVAR 20
4812: PUSH
4813: LD_VAR 0 1
4817: ST_TO_ADDR
// uc_nation = nation ;
4818: LD_ADDR_OWVAR 21
4822: PUSH
4823: LD_VAR 0 2
4827: ST_TO_ADDR
// hc_name =  ;
4828: LD_ADDR_OWVAR 26
4832: PUSH
4833: LD_STRING 
4835: ST_TO_ADDR
// hc_gallery =  ;
4836: LD_ADDR_OWVAR 33
4840: PUSH
4841: LD_STRING 
4843: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
4844: LD_INT 0
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_VAR 0 8
4854: PPUSH
4855: CALL_OW 380
// un = CreateHuman ;
4859: LD_ADDR_VAR 0 15
4863: PUSH
4864: CALL_OW 44
4868: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4869: LD_VAR 0 15
4873: PPUSH
4874: LD_VAR 0 9
4878: PPUSH
4879: LD_INT 0
4881: PPUSH
4882: CALL_OW 49
// end ;
4886: GO 4805
4888: POP
4889: POP
// for i = 1 to sniperCount do
4890: LD_ADDR_VAR 0 13
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_VAR 0 4
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4988
// begin uc_side = side ;
4908: LD_ADDR_OWVAR 20
4912: PUSH
4913: LD_VAR 0 1
4917: ST_TO_ADDR
// uc_nation = nation ;
4918: LD_ADDR_OWVAR 21
4922: PUSH
4923: LD_VAR 0 2
4927: ST_TO_ADDR
// hc_name =  ;
4928: LD_ADDR_OWVAR 26
4932: PUSH
4933: LD_STRING 
4935: ST_TO_ADDR
// hc_gallery =  ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING 
4943: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
4944: LD_INT 0
4946: PPUSH
4947: LD_INT 5
4949: PPUSH
4950: LD_VAR 0 8
4954: PPUSH
4955: CALL_OW 380
// un = CreateHuman ;
4959: LD_ADDR_VAR 0 15
4963: PUSH
4964: CALL_OW 44
4968: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4969: LD_VAR 0 15
4973: PPUSH
4974: LD_VAR 0 9
4978: PPUSH
4979: LD_INT 0
4981: PPUSH
4982: CALL_OW 49
// end ;
4986: GO 4905
4988: POP
4989: POP
// for i = 1 to bazookCount do
4990: LD_ADDR_VAR 0 13
4994: PUSH
4995: DOUBLE
4996: LD_INT 1
4998: DEC
4999: ST_TO_ADDR
5000: LD_VAR 0 5
5004: PUSH
5005: FOR_TO
5006: IFFALSE 5088
// begin uc_side = side ;
5008: LD_ADDR_OWVAR 20
5012: PUSH
5013: LD_VAR 0 1
5017: ST_TO_ADDR
// uc_nation = nation ;
5018: LD_ADDR_OWVAR 21
5022: PUSH
5023: LD_VAR 0 2
5027: ST_TO_ADDR
// hc_name =  ;
5028: LD_ADDR_OWVAR 26
5032: PUSH
5033: LD_STRING 
5035: ST_TO_ADDR
// hc_gallery =  ;
5036: LD_ADDR_OWVAR 33
5040: PUSH
5041: LD_STRING 
5043: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5044: LD_INT 0
5046: PPUSH
5047: LD_INT 9
5049: PPUSH
5050: LD_VAR 0 8
5054: PPUSH
5055: CALL_OW 380
// un = CreateHuman ;
5059: LD_ADDR_VAR 0 15
5063: PUSH
5064: CALL_OW 44
5068: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5069: LD_VAR 0 15
5073: PPUSH
5074: LD_VAR 0 9
5078: PPUSH
5079: LD_INT 0
5081: PPUSH
5082: CALL_OW 49
// end ;
5086: GO 5005
5088: POP
5089: POP
// for i = 1 to mortalCount do
5090: LD_ADDR_VAR 0 13
5094: PUSH
5095: DOUBLE
5096: LD_INT 1
5098: DEC
5099: ST_TO_ADDR
5100: LD_VAR 0 6
5104: PUSH
5105: FOR_TO
5106: IFFALSE 5188
// begin uc_side = side ;
5108: LD_ADDR_OWVAR 20
5112: PUSH
5113: LD_VAR 0 1
5117: ST_TO_ADDR
// uc_nation = nation ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_VAR 0 2
5127: ST_TO_ADDR
// hc_name =  ;
5128: LD_ADDR_OWVAR 26
5132: PUSH
5133: LD_STRING 
5135: ST_TO_ADDR
// hc_gallery =  ;
5136: LD_ADDR_OWVAR 33
5140: PUSH
5141: LD_STRING 
5143: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5144: LD_INT 0
5146: PPUSH
5147: LD_INT 8
5149: PPUSH
5150: LD_VAR 0 8
5154: PPUSH
5155: CALL_OW 380
// un = CreateHuman ;
5159: LD_ADDR_VAR 0 15
5163: PUSH
5164: CALL_OW 44
5168: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5169: LD_VAR 0 15
5173: PPUSH
5174: LD_VAR 0 9
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 49
// end ;
5186: GO 5105
5188: POP
5189: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5190: LD_ADDR_VAR 0 17
5194: PUSH
5195: LD_INT 22
5197: PUSH
5198: LD_VAR 0 1
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 25
5209: PUSH
5210: LD_INT 4
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// for i in medic_list do
5226: LD_ADDR_VAR 0 13
5230: PUSH
5231: LD_VAR 0 17
5235: PUSH
5236: FOR_IN
5237: IFFALSE 5255
// ComMoveToArea ( i , healArea ) ;
5239: LD_VAR 0 13
5243: PPUSH
5244: LD_VAR 0 10
5248: PPUSH
5249: CALL_OW 113
5253: GO 5236
5255: POP
5256: POP
// repeat wait ( 0 0$1 ) ;
5257: LD_INT 35
5259: PPUSH
5260: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
5264: LD_ADDR_VAR 0 16
5268: PUSH
5269: LD_INT 22
5271: PUSH
5272: LD_VAR 0 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 24
5289: PUSH
5290: LD_INT 550
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 24
5303: PUSH
5304: LD_INT 250
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PPUSH
5320: CALL_OW 69
5324: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
5325: LD_ADDR_VAR 0 18
5329: PUSH
5330: LD_INT 22
5332: PUSH
5333: LD_VAR 0 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 2
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 1
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 5
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 8
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 9
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 69
5411: ST_TO_ADDR
// if medicCount > 0 then
5412: LD_VAR 0 7
5416: PUSH
5417: LD_INT 0
5419: GREATER
5420: IFFALSE 5494
// begin if damageUnit_list > 0 then
5422: LD_VAR 0 16
5426: PUSH
5427: LD_INT 0
5429: GREATER
5430: IFFALSE 5494
// begin for i in damageUnit_list do
5432: LD_ADDR_VAR 0 13
5436: PUSH
5437: LD_VAR 0 16
5441: PUSH
5442: FOR_IN
5443: IFFALSE 5492
// begin ComMoveToArea ( i , healArea ) ;
5445: LD_VAR 0 13
5449: PPUSH
5450: LD_VAR 0 10
5454: PPUSH
5455: CALL_OW 113
// for j in medic_list do
5459: LD_ADDR_VAR 0 14
5463: PUSH
5464: LD_VAR 0 17
5468: PUSH
5469: FOR_IN
5470: IFFALSE 5488
// AddComHeal ( j , i ) ;
5472: LD_VAR 0 14
5476: PPUSH
5477: LD_VAR 0 13
5481: PPUSH
5482: CALL_OW 188
5486: GO 5469
5488: POP
5489: POP
// end ;
5490: GO 5442
5492: POP
5493: POP
// end ; end ; for i in soldiersOK_list do
5494: LD_ADDR_VAR 0 13
5498: PUSH
5499: LD_VAR 0 18
5503: PUSH
5504: FOR_IN
5505: IFFALSE 5681
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , i ) ;
5507: LD_ADDR_VAR 0 21
5511: PUSH
5512: LD_INT 81
5514: PUSH
5515: LD_VAR 0 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_VAR 0 13
5533: PPUSH
5534: CALL_OW 74
5538: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5539: LD_ADDR_VAR 0 22
5543: PUSH
5544: LD_INT 81
5546: PUSH
5547: LD_VAR 0 1
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 59
5561: PUSH
5562: EMPTY
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 1
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 21
5577: PUSH
5578: LD_INT 2
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: PPUSH
5598: CALL_OW 69
5602: PPUSH
5603: LD_VAR 0 13
5607: PPUSH
5608: CALL_OW 74
5612: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5613: LD_VAR 0 13
5617: PPUSH
5618: LD_VAR 0 21
5622: PPUSH
5623: CALL_OW 296
5627: PUSH
5628: LD_INT 8
5630: PLUS
5631: PUSH
5632: LD_VAR 0 13
5636: PPUSH
5637: LD_VAR 0 22
5641: PPUSH
5642: CALL_OW 296
5646: LESS
5647: IFFALSE 5665
// begin ComAttackUnit ( i , target1 ) ;
5649: LD_VAR 0 13
5653: PPUSH
5654: LD_VAR 0 21
5658: PPUSH
5659: CALL_OW 115
// end else
5663: GO 5679
// begin ComAttackUnit ( i , target2 ) ;
5665: LD_VAR 0 13
5669: PPUSH
5670: LD_VAR 0 22
5674: PPUSH
5675: CALL_OW 115
// end ; end ;
5679: GO 5504
5681: POP
5682: POP
// until soldiersOK_list = [ ] ;
5683: LD_VAR 0 18
5687: PUSH
5688: EMPTY
5689: EQUAL
5690: IFFALSE 5257
// end ;
5692: LD_VAR 0 12
5696: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
5697: LD_INT 0
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
5707: PPUSH
5708: PPUSH
5709: PPUSH
// amChassisTab = [ ] ;
5710: LD_ADDR_VAR 0 19
5714: PUSH
5715: EMPTY
5716: ST_TO_ADDR
// arChassisTab = [ ] ;
5717: LD_ADDR_VAR 0 18
5721: PUSH
5722: EMPTY
5723: ST_TO_ADDR
// ruChassisTab = [ ] ;
5724: LD_ADDR_VAR 0 17
5728: PUSH
5729: EMPTY
5730: ST_TO_ADDR
// for i = 1 to vehCount do
5731: LD_ADDR_VAR 0 13
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 7171
// begin wait ( 0 0$01 ) ;
5749: LD_INT 35
5751: PPUSH
5752: CALL_OW 67
// if nation = 1 then
5756: LD_VAR 0 5
5760: PUSH
5761: LD_INT 1
5763: EQUAL
5764: IFFALSE 6245
// begin uc_side = side ;
5766: LD_ADDR_OWVAR 20
5770: PUSH
5771: LD_VAR 0 2
5775: ST_TO_ADDR
// uc_nation = nation ;
5776: LD_ADDR_OWVAR 21
5780: PUSH
5781: LD_VAR 0 5
5785: ST_TO_ADDR
// vc_engine = vehengine ;
5786: LD_ADDR_OWVAR 39
5790: PUSH
5791: LD_VAR 0 6
5795: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
5796: LD_ADDR_OWVAR 40
5800: PUSH
5801: LD_VAR 0 10
5805: PUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_VAR 0 10
5813: PPUSH
5814: CALL_OW 12
5818: ARRAY
5819: ST_TO_ADDR
// for j = 1 to AMWeapon do
5820: LD_ADDR_VAR 0 14
5824: PUSH
5825: DOUBLE
5826: LD_INT 1
5828: DEC
5829: ST_TO_ADDR
5830: LD_VAR 0 10
5834: PUSH
5835: FOR_TO
5836: IFFALSE 6137
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
5838: LD_VAR 0 10
5842: PUSH
5843: LD_VAR 0 14
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: EQUAL
5852: PUSH
5853: LD_VAR 0 10
5857: PUSH
5858: LD_VAR 0 14
5862: ARRAY
5863: PUSH
5864: LD_INT 3
5866: EQUAL
5867: OR
5868: IFFALSE 5921
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
5870: LD_ADDR_VAR 0 19
5874: PUSH
5875: LD_INT 1
5877: PUSH
5878: LD_INT 2
5880: PUSH
5881: LD_INT 3
5883: PUSH
5884: LD_INT 4
5886: PUSH
5887: LD_INT 5
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5897: LD_ADDR_OWVAR 37
5901: PUSH
5902: LD_VAR 0 19
5906: PUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_VAR 0 19
5914: PPUSH
5915: CALL_OW 12
5919: ARRAY
5920: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
5921: LD_VAR 0 10
5925: PUSH
5926: LD_VAR 0 14
5930: ARRAY
5931: PUSH
5932: LD_INT 4
5934: EQUAL
5935: PUSH
5936: LD_VAR 0 10
5940: PUSH
5941: LD_VAR 0 14
5945: ARRAY
5946: PUSH
5947: LD_INT 5
5949: EQUAL
5950: OR
5951: PUSH
5952: LD_VAR 0 10
5956: PUSH
5957: LD_VAR 0 14
5961: ARRAY
5962: PUSH
5963: LD_INT 9
5965: EQUAL
5966: OR
5967: PUSH
5968: LD_VAR 0 10
5972: PUSH
5973: LD_VAR 0 14
5977: ARRAY
5978: PUSH
5979: LD_INT 11
5981: EQUAL
5982: OR
5983: PUSH
5984: LD_VAR 0 10
5988: PUSH
5989: LD_VAR 0 14
5993: ARRAY
5994: PUSH
5995: LD_INT 7
5997: EQUAL
5998: OR
5999: IFFALSE 6048
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
6001: LD_ADDR_VAR 0 19
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6024: LD_ADDR_OWVAR 37
6028: PUSH
6029: LD_VAR 0 19
6033: PUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_VAR 0 19
6041: PPUSH
6042: CALL_OW 12
6046: ARRAY
6047: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
6048: LD_VAR 0 10
6052: PUSH
6053: LD_VAR 0 14
6057: ARRAY
6058: PUSH
6059: LD_INT 8
6061: EQUAL
6062: PUSH
6063: LD_VAR 0 10
6067: PUSH
6068: LD_VAR 0 14
6072: ARRAY
6073: PUSH
6074: LD_INT 6
6076: EQUAL
6077: OR
6078: PUSH
6079: LD_VAR 0 10
6083: PUSH
6084: LD_VAR 0 14
6088: ARRAY
6089: PUSH
6090: LD_INT 10
6092: EQUAL
6093: OR
6094: IFFALSE 6135
// begin amChassisTab = [ 4 , 5 ] ;
6096: LD_ADDR_VAR 0 19
6100: PUSH
6101: LD_INT 4
6103: PUSH
6104: LD_INT 5
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6111: LD_ADDR_OWVAR 37
6115: PUSH
6116: LD_VAR 0 19
6120: PUSH
6121: LD_INT 1
6123: PPUSH
6124: LD_VAR 0 19
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// end ; end ;
6135: GO 5835
6137: POP
6138: POP
// veh = CreateVehicle ;
6139: LD_ADDR_VAR 0 16
6143: PUSH
6144: CALL_OW 45
6148: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6149: LD_VAR 0 16
6153: PPUSH
6154: LD_VAR 0 1
6158: PPUSH
6159: LD_INT 0
6161: PPUSH
6162: CALL_OW 49
// if vc_control = 1 then
6166: LD_OWVAR 38
6170: PUSH
6171: LD_INT 1
6173: EQUAL
6174: IFFALSE 6231
// begin hc_gallery =  ;
6176: LD_ADDR_OWVAR 33
6180: PUSH
6181: LD_STRING 
6183: ST_TO_ADDR
// hc_name =  ;
6184: LD_ADDR_OWVAR 26
6188: PUSH
6189: LD_STRING 
6191: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6192: LD_INT 0
6194: PPUSH
6195: LD_INT 3
6197: PPUSH
6198: LD_VAR 0 4
6202: PPUSH
6203: CALL_OW 380
// un = CreateHuman ;
6207: LD_ADDR_VAR 0 15
6211: PUSH
6212: CALL_OW 44
6216: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6217: LD_VAR 0 15
6221: PPUSH
6222: LD_VAR 0 16
6226: PPUSH
6227: CALL_OW 52
// end ; i = i + 1 ;
6231: LD_ADDR_VAR 0 13
6235: PUSH
6236: LD_VAR 0 13
6240: PUSH
6241: LD_INT 1
6243: PLUS
6244: ST_TO_ADDR
// end ; if nation = 2 then
6245: LD_VAR 0 5
6249: PUSH
6250: LD_INT 2
6252: EQUAL
6253: IFFALSE 6755
// begin uc_side = side ;
6255: LD_ADDR_OWVAR 20
6259: PUSH
6260: LD_VAR 0 2
6264: ST_TO_ADDR
// uc_nation = nation ;
6265: LD_ADDR_OWVAR 21
6269: PUSH
6270: LD_VAR 0 5
6274: ST_TO_ADDR
// vc_engine = vehengine ;
6275: LD_ADDR_OWVAR 39
6279: PUSH
6280: LD_VAR 0 6
6284: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
6285: LD_INT 22
6287: PUSH
6288: LD_VAR 0 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 33
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 50
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: PUSH
6334: LD_INT 8
6336: LESSEQUAL
6337: IFFALSE 6365
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
6339: LD_ADDR_OWVAR 38
6343: PUSH
6344: LD_VAR 0 7
6348: PUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_VAR 0 7
6356: PPUSH
6357: CALL_OW 12
6361: ARRAY
6362: ST_TO_ADDR
6363: GO 6373
// vc_control = control_apeman ;
6365: LD_ADDR_OWVAR 38
6369: PUSH
6370: LD_INT 5
6372: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
6373: LD_ADDR_OWVAR 40
6377: PUSH
6378: LD_VAR 0 9
6382: PUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_VAR 0 9
6390: PPUSH
6391: CALL_OW 12
6395: ARRAY
6396: ST_TO_ADDR
// for j = 1 to ARWeapons do
6397: LD_ADDR_VAR 0 14
6401: PUSH
6402: DOUBLE
6403: LD_INT 1
6405: DEC
6406: ST_TO_ADDR
6407: LD_VAR 0 9
6411: PUSH
6412: FOR_TO
6413: IFFALSE 6647
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
6415: LD_VAR 0 9
6419: PUSH
6420: LD_VAR 0 14
6424: ARRAY
6425: PUSH
6426: LD_INT 24
6428: EQUAL
6429: PUSH
6430: LD_VAR 0 9
6434: PUSH
6435: LD_VAR 0 14
6439: ARRAY
6440: PUSH
6441: LD_INT 22
6443: EQUAL
6444: OR
6445: PUSH
6446: LD_VAR 0 9
6450: PUSH
6451: LD_VAR 0 14
6455: ARRAY
6456: PUSH
6457: LD_INT 23
6459: EQUAL
6460: OR
6461: PUSH
6462: LD_VAR 0 9
6466: PUSH
6467: LD_VAR 0 14
6471: ARRAY
6472: PUSH
6473: LD_INT 30
6475: EQUAL
6476: OR
6477: IFFALSE 6526
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
6479: LD_ADDR_VAR 0 18
6483: PUSH
6484: LD_INT 11
6486: PUSH
6487: LD_INT 12
6489: PUSH
6490: LD_INT 13
6492: PUSH
6493: LD_INT 14
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
6502: LD_ADDR_OWVAR 37
6506: PUSH
6507: LD_VAR 0 18
6511: PUSH
6512: LD_INT 1
6514: PPUSH
6515: LD_VAR 0 18
6519: PPUSH
6520: CALL_OW 12
6524: ARRAY
6525: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
6526: LD_VAR 0 9
6530: PUSH
6531: LD_VAR 0 14
6535: ARRAY
6536: PUSH
6537: LD_INT 29
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 9
6545: PUSH
6546: LD_VAR 0 14
6550: ARRAY
6551: PUSH
6552: LD_INT 28
6554: EQUAL
6555: OR
6556: PUSH
6557: LD_VAR 0 9
6561: PUSH
6562: LD_VAR 0 14
6566: ARRAY
6567: PUSH
6568: LD_INT 27
6570: EQUAL
6571: OR
6572: PUSH
6573: LD_VAR 0 9
6577: PUSH
6578: LD_VAR 0 14
6582: ARRAY
6583: PUSH
6584: LD_INT 26
6586: EQUAL
6587: OR
6588: PUSH
6589: LD_VAR 0 9
6593: PUSH
6594: LD_VAR 0 14
6598: ARRAY
6599: PUSH
6600: LD_INT 25
6602: EQUAL
6603: OR
6604: IFFALSE 6645
// begin arChassisTab = [ 13 , 14 ] ;
6606: LD_ADDR_VAR 0 18
6610: PUSH
6611: LD_INT 13
6613: PUSH
6614: LD_INT 14
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
6621: LD_ADDR_OWVAR 37
6625: PUSH
6626: LD_VAR 0 18
6630: PUSH
6631: LD_INT 1
6633: PPUSH
6634: LD_VAR 0 18
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: ST_TO_ADDR
// end ; end ;
6645: GO 6412
6647: POP
6648: POP
// veh = CreateVehicle ;
6649: LD_ADDR_VAR 0 16
6653: PUSH
6654: CALL_OW 45
6658: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6659: LD_VAR 0 16
6663: PPUSH
6664: LD_VAR 0 1
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 49
// if vc_control = 1 then
6676: LD_OWVAR 38
6680: PUSH
6681: LD_INT 1
6683: EQUAL
6684: IFFALSE 6741
// begin hc_gallery =  ;
6686: LD_ADDR_OWVAR 33
6690: PUSH
6691: LD_STRING 
6693: ST_TO_ADDR
// hc_name =  ;
6694: LD_ADDR_OWVAR 26
6698: PUSH
6699: LD_STRING 
6701: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6702: LD_INT 0
6704: PPUSH
6705: LD_INT 3
6707: PPUSH
6708: LD_VAR 0 4
6712: PPUSH
6713: CALL_OW 380
// un = CreateHuman ;
6717: LD_ADDR_VAR 0 15
6721: PUSH
6722: CALL_OW 44
6726: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6727: LD_VAR 0 15
6731: PPUSH
6732: LD_VAR 0 16
6736: PPUSH
6737: CALL_OW 52
// end ; i = i + 1 ;
6741: LD_ADDR_VAR 0 13
6745: PUSH
6746: LD_VAR 0 13
6750: PUSH
6751: LD_INT 1
6753: PLUS
6754: ST_TO_ADDR
// end ; if nation = 3 then
6755: LD_VAR 0 5
6759: PUSH
6760: LD_INT 3
6762: EQUAL
6763: IFFALSE 7169
// begin uc_side = side ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_VAR 0 2
6774: ST_TO_ADDR
// uc_nation = nation ;
6775: LD_ADDR_OWVAR 21
6779: PUSH
6780: LD_VAR 0 5
6784: ST_TO_ADDR
// vc_engine = vehengine ;
6785: LD_ADDR_OWVAR 39
6789: PUSH
6790: LD_VAR 0 6
6794: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
6795: LD_ADDR_OWVAR 38
6799: PUSH
6800: LD_VAR 0 7
6804: PUSH
6805: LD_INT 1
6807: PPUSH
6808: LD_VAR 0 7
6812: PPUSH
6813: CALL_OW 12
6817: ARRAY
6818: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
6819: LD_ADDR_OWVAR 40
6823: PUSH
6824: LD_VAR 0 8
6828: PUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_VAR 0 8
6836: PPUSH
6837: CALL_OW 12
6841: ARRAY
6842: ST_TO_ADDR
// for j = 1 to RuWeapons do
6843: LD_ADDR_VAR 0 14
6847: PUSH
6848: DOUBLE
6849: LD_INT 1
6851: DEC
6852: ST_TO_ADDR
6853: LD_VAR 0 8
6857: PUSH
6858: FOR_TO
6859: IFFALSE 7045
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
6861: LD_VAR 0 8
6865: PUSH
6866: LD_VAR 0 14
6870: ARRAY
6871: PUSH
6872: LD_INT 42
6874: EQUAL
6875: PUSH
6876: LD_VAR 0 8
6880: PUSH
6881: LD_VAR 0 14
6885: ARRAY
6886: PUSH
6887: LD_INT 43
6889: EQUAL
6890: OR
6891: PUSH
6892: LD_VAR 0 8
6896: PUSH
6897: LD_VAR 0 14
6901: ARRAY
6902: PUSH
6903: LD_INT 44
6905: EQUAL
6906: OR
6907: PUSH
6908: LD_VAR 0 8
6912: PUSH
6913: LD_VAR 0 14
6917: ARRAY
6918: PUSH
6919: LD_INT 45
6921: EQUAL
6922: OR
6923: PUSH
6924: LD_VAR 0 8
6928: PUSH
6929: LD_VAR 0 14
6933: ARRAY
6934: PUSH
6935: LD_INT 49
6937: EQUAL
6938: OR
6939: IFFALSE 6976
// begin ruChassisTab = [ 24 ] ;
6941: LD_ADDR_VAR 0 17
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: EMPTY
6950: LIST
6951: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6952: LD_ADDR_OWVAR 37
6956: PUSH
6957: LD_VAR 0 17
6961: PUSH
6962: LD_INT 1
6964: PPUSH
6965: LD_VAR 0 17
6969: PPUSH
6970: CALL_OW 12
6974: ARRAY
6975: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
6976: LD_VAR 0 8
6980: PUSH
6981: LD_VAR 0 14
6985: ARRAY
6986: PUSH
6987: LD_INT 46
6989: EQUAL
6990: PUSH
6991: LD_VAR 0 8
6995: PUSH
6996: LD_VAR 0 14
7000: ARRAY
7001: PUSH
7002: LD_INT 47
7004: EQUAL
7005: OR
7006: IFFALSE 7043
// begin ruChassisTab = [ 24 ] ;
7008: LD_ADDR_VAR 0 17
7012: PUSH
7013: LD_INT 24
7015: PUSH
7016: EMPTY
7017: LIST
7018: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7019: LD_ADDR_OWVAR 37
7023: PUSH
7024: LD_VAR 0 17
7028: PUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_VAR 0 17
7036: PPUSH
7037: CALL_OW 12
7041: ARRAY
7042: ST_TO_ADDR
// end ; end ;
7043: GO 6858
7045: POP
7046: POP
// veh = CreateVehicle ;
7047: LD_ADDR_VAR 0 16
7051: PUSH
7052: CALL_OW 45
7056: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7057: LD_VAR 0 16
7061: PPUSH
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_INT 0
7069: PPUSH
7070: CALL_OW 49
// if vc_control = 1 then
7074: LD_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: EQUAL
7082: IFFALSE 7169
// begin if uc_side = 8 then
7084: LD_OWVAR 20
7088: PUSH
7089: LD_INT 8
7091: EQUAL
7092: IFFALSE 7104
// uc_nation = 2 else
7094: LD_ADDR_OWVAR 21
7098: PUSH
7099: LD_INT 2
7101: ST_TO_ADDR
7102: GO 7114
// uc_nation = nation ;
7104: LD_ADDR_OWVAR 21
7108: PUSH
7109: LD_VAR 0 5
7113: ST_TO_ADDR
// hc_gallery =  ;
7114: LD_ADDR_OWVAR 33
7118: PUSH
7119: LD_STRING 
7121: ST_TO_ADDR
// hc_name =  ;
7122: LD_ADDR_OWVAR 26
7126: PUSH
7127: LD_STRING 
7129: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7130: LD_INT 0
7132: PPUSH
7133: LD_INT 3
7135: PPUSH
7136: LD_VAR 0 4
7140: PPUSH
7141: CALL_OW 380
// un = CreateHuman ;
7145: LD_ADDR_VAR 0 15
7149: PUSH
7150: CALL_OW 44
7154: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7155: LD_VAR 0 15
7159: PPUSH
7160: LD_VAR 0 16
7164: PPUSH
7165: CALL_OW 52
// end ; end ; end ;
7169: GO 5746
7171: POP
7172: POP
// repeat wait ( 0 0$1 ) ;
7173: LD_INT 35
7175: PPUSH
7176: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
7180: LD_ADDR_VAR 0 20
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 24
7209: PUSH
7210: LD_INT 250
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: PUSH
7227: LD_INT 22
7229: PUSH
7230: LD_VAR 0 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 34
7251: PUSH
7252: LD_INT 49
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: DIFF
7269: ST_TO_ADDR
// if vehicleOK_list > 0 then
7270: LD_VAR 0 20
7274: PUSH
7275: LD_INT 0
7277: GREATER
7278: IFFALSE 7469
// begin for i in vehicleOK_list do
7280: LD_ADDR_VAR 0 13
7284: PUSH
7285: LD_VAR 0 20
7289: PUSH
7290: FOR_IN
7291: IFFALSE 7467
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , i ) ;
7293: LD_ADDR_VAR 0 21
7297: PUSH
7298: LD_INT 81
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PPUSH
7315: LD_VAR 0 13
7319: PPUSH
7320: CALL_OW 74
7324: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7325: LD_ADDR_VAR 0 22
7329: PUSH
7330: LD_INT 81
7332: PUSH
7333: LD_VAR 0 2
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 59
7347: PUSH
7348: EMPTY
7349: LIST
7350: PUSH
7351: LD_INT 21
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 21
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: PPUSH
7384: CALL_OW 69
7388: PPUSH
7389: LD_VAR 0 13
7393: PPUSH
7394: CALL_OW 74
7398: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7399: LD_VAR 0 13
7403: PPUSH
7404: LD_VAR 0 21
7408: PPUSH
7409: CALL_OW 296
7413: PUSH
7414: LD_INT 8
7416: PLUS
7417: PUSH
7418: LD_VAR 0 13
7422: PPUSH
7423: LD_VAR 0 22
7427: PPUSH
7428: CALL_OW 296
7432: LESS
7433: IFFALSE 7451
// begin ComAttackUnit ( i , target1 ) ;
7435: LD_VAR 0 13
7439: PPUSH
7440: LD_VAR 0 21
7444: PPUSH
7445: CALL_OW 115
// end else
7449: GO 7465
// begin ComAttackUnit ( i , target2 ) ;
7451: LD_VAR 0 13
7455: PPUSH
7456: LD_VAR 0 22
7460: PPUSH
7461: CALL_OW 115
// end ; end ;
7465: GO 7290
7467: POP
7468: POP
// end ; until vehicleOK_list = 0 ;
7469: LD_VAR 0 20
7473: PUSH
7474: LD_INT 0
7476: EQUAL
7477: IFFALSE 7173
// end ;
7479: LD_VAR 0 12
7483: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
7484: LD_INT 0
7486: PPUSH
7487: PPUSH
7488: PPUSH
// uc_side = 0 ;
7489: LD_ADDR_OWVAR 20
7493: PUSH
7494: LD_INT 0
7496: ST_TO_ADDR
// uc_nation = 0 ;
7497: LD_ADDR_OWVAR 21
7501: PUSH
7502: LD_INT 0
7504: ST_TO_ADDR
// InitHc ;
7505: CALL_OW 19
// InitVc ;
7509: CALL_OW 20
// if mastodonts then
7513: LD_VAR 0 6
7517: IFFALSE 7584
// for i = 1 to mastodonts do
7519: LD_ADDR_VAR 0 11
7523: PUSH
7524: DOUBLE
7525: LD_INT 1
7527: DEC
7528: ST_TO_ADDR
7529: LD_VAR 0 6
7533: PUSH
7534: FOR_TO
7535: IFFALSE 7582
// begin vc_chassis := 31 ;
7537: LD_ADDR_OWVAR 37
7541: PUSH
7542: LD_INT 31
7544: ST_TO_ADDR
// vc_control := control_rider ;
7545: LD_ADDR_OWVAR 38
7549: PUSH
7550: LD_INT 4
7552: ST_TO_ADDR
// animal := CreateVehicle ;
7553: LD_ADDR_VAR 0 12
7557: PUSH
7558: CALL_OW 45
7562: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7563: LD_VAR 0 12
7567: PPUSH
7568: LD_VAR 0 8
7572: PPUSH
7573: LD_INT 0
7575: PPUSH
7576: CALL_OW 49
// end ;
7580: GO 7534
7582: POP
7583: POP
// if horses then
7584: LD_VAR 0 5
7588: IFFALSE 7655
// for i = 1 to horses do
7590: LD_ADDR_VAR 0 11
7594: PUSH
7595: DOUBLE
7596: LD_INT 1
7598: DEC
7599: ST_TO_ADDR
7600: LD_VAR 0 5
7604: PUSH
7605: FOR_TO
7606: IFFALSE 7653
// begin hc_class := 21 ;
7608: LD_ADDR_OWVAR 28
7612: PUSH
7613: LD_INT 21
7615: ST_TO_ADDR
// hc_gallery :=  ;
7616: LD_ADDR_OWVAR 33
7620: PUSH
7621: LD_STRING 
7623: ST_TO_ADDR
// animal := CreateHuman ;
7624: LD_ADDR_VAR 0 12
7628: PUSH
7629: CALL_OW 44
7633: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7634: LD_VAR 0 12
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_INT 0
7646: PPUSH
7647: CALL_OW 49
// end ;
7651: GO 7605
7653: POP
7654: POP
// if birds then
7655: LD_VAR 0 1
7659: IFFALSE 7726
// for i = 1 to birds do
7661: LD_ADDR_VAR 0 11
7665: PUSH
7666: DOUBLE
7667: LD_INT 1
7669: DEC
7670: ST_TO_ADDR
7671: LD_VAR 0 1
7675: PUSH
7676: FOR_TO
7677: IFFALSE 7724
// begin hc_class = 18 ;
7679: LD_ADDR_OWVAR 28
7683: PUSH
7684: LD_INT 18
7686: ST_TO_ADDR
// hc_gallery =  ;
7687: LD_ADDR_OWVAR 33
7691: PUSH
7692: LD_STRING 
7694: ST_TO_ADDR
// animal := CreateHuman ;
7695: LD_ADDR_VAR 0 12
7699: PUSH
7700: CALL_OW 44
7704: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7705: LD_VAR 0 12
7709: PPUSH
7710: LD_VAR 0 8
7714: PPUSH
7715: LD_INT 0
7717: PPUSH
7718: CALL_OW 49
// end ;
7722: GO 7676
7724: POP
7725: POP
// if tigers then
7726: LD_VAR 0 2
7730: IFFALSE 7814
// for i = 1 to tigers do
7732: LD_ADDR_VAR 0 11
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 2
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7812
// begin hc_class = class_tiger ;
7750: LD_ADDR_OWVAR 28
7754: PUSH
7755: LD_INT 14
7757: ST_TO_ADDR
// hc_gallery =  ;
7758: LD_ADDR_OWVAR 33
7762: PUSH
7763: LD_STRING 
7765: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7766: LD_ADDR_OWVAR 35
7770: PUSH
7771: LD_INT 7
7773: NEG
7774: PPUSH
7775: LD_INT 7
7777: PPUSH
7778: CALL_OW 12
7782: ST_TO_ADDR
// animal := CreateHuman ;
7783: LD_ADDR_VAR 0 12
7787: PUSH
7788: CALL_OW 44
7792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7793: LD_VAR 0 12
7797: PPUSH
7798: LD_VAR 0 8
7802: PPUSH
7803: LD_INT 0
7805: PPUSH
7806: CALL_OW 49
// end ;
7810: GO 7747
7812: POP
7813: POP
// if apemans then
7814: LD_VAR 0 3
7818: IFFALSE 7941
// for i = 1 to apemans do
7820: LD_ADDR_VAR 0 11
7824: PUSH
7825: DOUBLE
7826: LD_INT 1
7828: DEC
7829: ST_TO_ADDR
7830: LD_VAR 0 3
7834: PUSH
7835: FOR_TO
7836: IFFALSE 7939
// begin hc_class = class_apeman ;
7838: LD_ADDR_OWVAR 28
7842: PUSH
7843: LD_INT 12
7845: ST_TO_ADDR
// hc_gallery =  ;
7846: LD_ADDR_OWVAR 33
7850: PUSH
7851: LD_STRING 
7853: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
7854: LD_ADDR_OWVAR 35
7858: PUSH
7859: LD_INT 5
7861: NEG
7862: PPUSH
7863: LD_INT 5
7865: PPUSH
7866: CALL_OW 12
7870: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
7871: LD_ADDR_OWVAR 31
7875: PUSH
7876: LD_INT 1
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: CALL_OW 12
7886: PUSH
7887: LD_INT 1
7889: PPUSH
7890: LD_INT 3
7892: PPUSH
7893: CALL_OW 12
7897: PUSH
7898: LD_INT 0
7900: PUSH
7901: LD_INT 0
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: ST_TO_ADDR
// animal := CreateHuman ;
7910: LD_ADDR_VAR 0 12
7914: PUSH
7915: CALL_OW 44
7919: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7920: LD_VAR 0 12
7924: PPUSH
7925: LD_VAR 0 8
7929: PPUSH
7930: LD_INT 0
7932: PPUSH
7933: CALL_OW 49
// end ;
7937: GO 7835
7939: POP
7940: POP
// if enchidnas then
7941: LD_VAR 0 4
7945: IFFALSE 8012
// for i = 1 to enchidnas do
7947: LD_ADDR_VAR 0 11
7951: PUSH
7952: DOUBLE
7953: LD_INT 1
7955: DEC
7956: ST_TO_ADDR
7957: LD_VAR 0 4
7961: PUSH
7962: FOR_TO
7963: IFFALSE 8010
// begin hc_class = 13 ;
7965: LD_ADDR_OWVAR 28
7969: PUSH
7970: LD_INT 13
7972: ST_TO_ADDR
// hc_gallery =  ;
7973: LD_ADDR_OWVAR 33
7977: PUSH
7978: LD_STRING 
7980: ST_TO_ADDR
// animal := CreateHuman ;
7981: LD_ADDR_VAR 0 12
7985: PUSH
7986: CALL_OW 44
7990: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7991: LD_VAR 0 12
7995: PPUSH
7996: LD_VAR 0 8
8000: PPUSH
8001: LD_INT 0
8003: PPUSH
8004: CALL_OW 49
// end ;
8008: GO 7962
8010: POP
8011: POP
// if not wat_area then
8012: LD_VAR 0 9
8016: NOT
8017: IFFALSE 8021
// exit ;
8019: GO 8092
// if fishes then
8021: LD_VAR 0 7
8025: IFFALSE 8092
// for i = 1 to fishes do
8027: LD_ADDR_VAR 0 11
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_VAR 0 7
8041: PUSH
8042: FOR_TO
8043: IFFALSE 8090
// begin hc_class = 20 ;
8045: LD_ADDR_OWVAR 28
8049: PUSH
8050: LD_INT 20
8052: ST_TO_ADDR
// hc_gallery =  ;
8053: LD_ADDR_OWVAR 33
8057: PUSH
8058: LD_STRING 
8060: ST_TO_ADDR
// animal := CreateHuman ;
8061: LD_ADDR_VAR 0 12
8065: PUSH
8066: CALL_OW 44
8070: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
8071: LD_VAR 0 12
8075: PPUSH
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// end ;
8088: GO 8042
8090: POP
8091: POP
// end ; end_of_file
8092: LD_VAR 0 10
8096: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 1
8104: EQUAL
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 4
8113: EQUAL
8114: AND
8115: IFFALSE 8124
// YouLost ( sojusz ) ;
8117: LD_STRING sojusz
8119: PPUSH
8120: CALL_OW 104
// end ;
8124: PPOPN 2
8126: END
// on BuildingCaptured ( building , side , human ) do begin if side = 4 then
8127: LD_VAR 0 2
8131: PUSH
8132: LD_INT 4
8134: EQUAL
8135: IFFALSE 8149
// SetSide ( building , 4 ) ;
8137: LD_VAR 0 1
8141: PPUSH
8142: LD_INT 4
8144: PPUSH
8145: CALL_OW 235
// end ;
8149: PPOPN 3
8151: END
// on UnitDestroyed ( unit ) do var i ;
8152: LD_INT 0
8154: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
8155: LD_VAR 0 1
8159: PPUSH
8160: CALL_OW 255
8164: PUSH
8165: LD_INT 1
8167: EQUAL
8168: PUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 247
8178: PUSH
8179: LD_INT 1
8181: EQUAL
8182: AND
8183: IFFALSE 8243
// begin unitLost = unitLost + 1 ;
8185: LD_ADDR_EXP 30
8189: PUSH
8190: LD_EXP 30
8194: PUSH
8195: LD_INT 1
8197: PLUS
8198: ST_TO_ADDR
// if unit = DeltaDoctor or unit = Gordon or unit = Peter then
8199: LD_VAR 0 1
8203: PUSH
8204: LD_EXP 5
8208: EQUAL
8209: PUSH
8210: LD_VAR 0 1
8214: PUSH
8215: LD_EXP 3
8219: EQUAL
8220: OR
8221: PUSH
8222: LD_VAR 0 1
8226: PUSH
8227: LD_EXP 4
8231: EQUAL
8232: OR
8233: IFFALSE 8243
// amSciStatus = 0 ;
8235: LD_ADDR_EXP 25
8239: PUSH
8240: LD_INT 0
8242: ST_TO_ADDR
// end ; end ;
8243: PPOPN 2
8245: END
// on SiberiteRocketExploded ( unit , x , y ) do var i ;
8246: LD_INT 0
8248: PPUSH
// begin if siberiteRocketStatus = 0 then
8249: LD_EXP 33
8253: PUSH
8254: LD_INT 0
8256: EQUAL
8257: IFFALSE 8322
// for i in FilterAllUnits ( [ [ f_side , 3 ] ] ) do
8259: LD_ADDR_VAR 0 4
8263: PUSH
8264: LD_INT 22
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: PPUSH
8277: CALL_OW 69
8281: PUSH
8282: FOR_IN
8283: IFFALSE 8320
// if GetDistUnitXY ( i , x , y ) < 25 then
8285: LD_VAR 0 4
8289: PPUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_VAR 0 3
8299: PPUSH
8300: CALL_OW 297
8304: PUSH
8305: LD_INT 25
8307: LESS
8308: IFFALSE 8318
// siberiteRocketStatus = 1 ;
8310: LD_ADDR_EXP 33
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
8318: GO 8282
8320: POP
8321: POP
// end ; end_of_file
8322: PPOPN 4
8324: END
// every 1 do
8325: GO 8327
8327: DISABLE
// begin InGameOn ;
8328: CALL_OW 8
// SetClass ( Stevens , 4 ) ;
8332: LD_EXP 1
8336: PPUSH
8337: LD_INT 4
8339: PPUSH
8340: CALL_OW 336
// RevealFogArea ( 1 , AmericanBaseArea ) ;
8344: LD_INT 1
8346: PPUSH
8347: LD_INT 1
8349: PPUSH
8350: CALL_OW 332
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8354: LD_EXP 3
8358: PUSH
8359: LD_EXP 4
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 87
// Say ( Peter , D1-Pet-1 ) ;
8372: LD_EXP 4
8376: PPUSH
8377: LD_STRING D1-Pet-1
8379: PPUSH
8380: CALL_OW 88
// if IsOK ( Stevens ) then
8384: LD_EXP 1
8388: PPUSH
8389: CALL_OW 302
8393: IFFALSE 8409
// Say ( Stevens , D1-Stev-1 ) else
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D1-Stev-1
8402: PPUSH
8403: CALL_OW 88
8407: GO 8421
// Say ( Baker , D1-Stev-1 ) ;
8409: LD_EXP 2
8413: PPUSH
8414: LD_STRING D1-Stev-1
8416: PPUSH
8417: CALL_OW 88
// CenterOnXY ( 108 , 140 ) ;
8421: LD_INT 108
8423: PPUSH
8424: LD_INT 140
8426: PPUSH
8427: CALL_OW 84
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8438: LD_EXP 3
8442: PUSH
8443: LD_EXP 4
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 87
// SayRadio ( Powell , D1-Pow-1 ) ;
8456: LD_EXP 19
8460: PPUSH
8461: LD_STRING D1-Pow-1
8463: PPUSH
8464: CALL_OW 94
// if IsOK ( Stevens ) then
8468: LD_EXP 1
8472: PPUSH
8473: CALL_OW 302
8477: IFFALSE 8493
// Say ( Stevens , D1-Stev-2 ) else
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D1-Stev-2
8486: PPUSH
8487: CALL_OW 88
8491: GO 8505
// Say ( Baker , D1-Stev-2 ) ;
8493: LD_EXP 2
8497: PPUSH
8498: LD_STRING D1-Stev-2
8500: PPUSH
8501: CALL_OW 88
// PrepareFirstAtacks ;
8505: CALL 2343 0 0
// CenterOnXY ( 108 , 140 ) ;
8509: LD_INT 108
8511: PPUSH
8512: LD_INT 140
8514: PPUSH
8515: CALL_OW 84
// wait ( 0 0$5 ) ;
8519: LD_INT 175
8521: PPUSH
8522: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D1-Rand-1 ,  ) ;
8526: LD_INT 22
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 21
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 26
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: LD_INT 25
8561: PUSH
8562: LD_INT 1
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 25
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 25
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 25
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 69
8627: PPUSH
8628: LD_STRING D1-Rand-1
8630: PPUSH
8631: LD_STRING 
8633: PPUSH
8634: CALL 3820 0 3
// wait ( 0 0$3 ) ;
8638: LD_INT 105
8640: PPUSH
8641: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8645: LD_EXP 3
8649: PUSH
8650: LD_EXP 4
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 87
// Say ( Peter , D1-Pet-2 ) ;
8663: LD_EXP 4
8667: PPUSH
8668: LD_STRING D1-Pet-2
8670: PPUSH
8671: CALL_OW 88
// if IsOK ( Stevens ) then
8675: LD_EXP 1
8679: PPUSH
8680: CALL_OW 302
8684: IFFALSE 8700
// Say ( Stevens , D1-Stev-3 ) else
8686: LD_EXP 1
8690: PPUSH
8691: LD_STRING D1-Stev-3
8693: PPUSH
8694: CALL_OW 88
8698: GO 8712
// Say ( Baker , D1-Stev-3 ) ;
8700: LD_EXP 2
8704: PPUSH
8705: LD_STRING D1-Stev-3
8707: PPUSH
8708: CALL_OW 88
// Say ( Peter , D1-Pet-3 ) ;
8712: LD_EXP 4
8716: PPUSH
8717: LD_STRING D1-Pet-3
8719: PPUSH
8720: CALL_OW 88
// SetLives ( FilterUnitsInArea ( ObsBaseArea , [ f_side , 1 ] ) , 150 ) ;
8724: LD_INT 9
8726: PPUSH
8727: LD_INT 22
8729: PUSH
8730: LD_INT 1
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 70
8741: PPUSH
8742: LD_INT 150
8744: PPUSH
8745: CALL_OW 234
// InGameOff ;
8749: CALL_OW 9
// if IsOk ( Stevens ) then
8753: LD_EXP 1
8757: PPUSH
8758: CALL_OW 302
8762: IFFALSE 8773
// ChangeMissionObjectives ( C1stev ) else
8764: LD_STRING C1stev
8766: PPUSH
8767: CALL_OW 337
8771: GO 8780
// ChangeMissionObjectives ( C1baker ) ;
8773: LD_STRING C1baker
8775: PPUSH
8776: CALL_OW 337
// end ;
8780: END
// every 0 0$1 trigger EscapeAvalaible = 1 do
8781: LD_EXP 27
8785: PUSH
8786: LD_INT 1
8788: EQUAL
8789: IFFALSE 8841
8791: GO 8793
8793: DISABLE
// begin enable ;
8794: ENABLE
// allUnitsLengh = TabLenght ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) ;
8795: LD_ADDR_EXP 31
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 1
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 50
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: PPUSH
8836: CALL 3468 0 1
8840: ST_TO_ADDR
// end ;
8841: END
// every 0 0$10 trigger ruAttacksCounter = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
8842: LD_EXP 24
8846: PUSH
8847: LD_INT 3
8849: EQUAL
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 2
8863: PUSH
8864: LD_INT 21
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 21
8876: PUSH
8877: LD_INT 1
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8915
8904: GO 8906
8906: DISABLE
// EscapeAvalaible = 1 ;
8907: LD_ADDR_EXP 27
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
8915: END
// every 0 0$1 trigger EscapeAvalaible = 1 do var i , tmp ;
8916: LD_EXP 27
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: IFFALSE 9876
8926: GO 8928
8928: DISABLE
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
// begin InGameOn ;
8933: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , true ) ;
8937: LD_INT 3
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: CALL_OW 80
// PlaceSeeing ( 126 , 17 , 1 , - 8 ) ;
8953: LD_INT 126
8955: PPUSH
8956: LD_INT 17
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_INT 8
8964: NEG
8965: PPUSH
8966: CALL_OW 330
// CenterNowOnUnits ( amsiblab ) ;
8970: LD_INT 1
8972: PPUSH
8973: CALL_OW 87
// PrepareRussianTPUNits ;
8977: CALL 2518 0 0
// ChangeSideFog ( 3 , 1 ) ;
8981: LD_INT 3
8983: PPUSH
8984: LD_INT 1
8986: PPUSH
8987: CALL_OW 343
// wait ( 0 0$5 ) ;
8991: LD_INT 175
8993: PPUSH
8994: CALL_OW 67
// tmp := FilterUnitsInArea ( labHill , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8998: LD_ADDR_VAR 0 2
9002: PUSH
9003: LD_INT 15
9005: PPUSH
9006: LD_INT 22
9008: PUSH
9009: LD_INT 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 3
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 3
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PPUSH
9037: CALL_OW 70
9041: ST_TO_ADDR
// if tmp then
9042: LD_VAR 0 2
9046: IFFALSE 9086
// for i in tmp do
9048: LD_ADDR_VAR 0 1
9052: PUSH
9053: LD_VAR 0 2
9057: PUSH
9058: FOR_IN
9059: IFFALSE 9084
// TeleportUnit ( i , 143 , 98 , 10 , true ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_INT 143
9068: PPUSH
9069: LD_INT 98
9071: PPUSH
9072: LD_INT 10
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 483
9082: GO 9058
9084: POP
9085: POP
// for i in russianTPUnits do
9086: LD_ADDR_VAR 0 1
9090: PUSH
9091: LD_EXP 26
9095: PUSH
9096: FOR_IN
9097: IFFALSE 9122
// TeleportUnit ( i , 128 , 19 , 4 , true ) ;
9099: LD_VAR 0 1
9103: PPUSH
9104: LD_INT 128
9106: PPUSH
9107: LD_INT 19
9109: PPUSH
9110: LD_INT 4
9112: PPUSH
9113: LD_INT 1
9115: PPUSH
9116: CALL_OW 483
9120: GO 9096
9122: POP
9123: POP
// wait ( 0 0$1 ) ;
9124: LD_INT 35
9126: PPUSH
9127: CALL_OW 67
// ComTurnUnit ( russianTPUnits , amsiblab ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_INT 1
9138: PPUSH
9139: CALL_OW 119
// SetSide ( amsiblab , 3 ) ;
9143: LD_INT 1
9145: PPUSH
9146: LD_INT 3
9148: PPUSH
9149: CALL_OW 235
// ComEnterUnit ( UnitFilter ( russianTPUnits , [ f_class , 4 ] ) , amsiblab ) ;
9153: LD_EXP 26
9157: PPUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 72
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 120
// for i in FilterUnitsInArea ( LabHill , [ [ f_type , unit_building ] ] ) diff [ amsiblab ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: LD_INT 15
9187: PPUSH
9188: LD_INT 21
9190: PUSH
9191: LD_INT 3
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: PPUSH
9201: CALL_OW 70
9205: PUSH
9206: LD_INT 1
9208: PUSH
9209: EMPTY
9210: LIST
9211: DIFF
9212: PUSH
9213: FOR_IN
9214: IFFALSE 9232
// AddComAttackUnit ( russianTPUnits , i ) ;
9216: LD_EXP 26
9220: PPUSH
9221: LD_VAR 0 1
9225: PPUSH
9226: CALL_OW 175
9230: GO 9213
9232: POP
9233: POP
// wait ( 0 0$2 ) ;
9234: LD_INT 70
9236: PPUSH
9237: CALL_OW 67
// if IsOK ( Peter ) then
9241: LD_EXP 4
9245: PPUSH
9246: CALL_OW 302
9250: IFFALSE 9266
// Say ( Peter , D2-Pet-1 ) else
9252: LD_EXP 4
9256: PPUSH
9257: LD_STRING D2-Pet-1
9259: PPUSH
9260: CALL_OW 88
9264: GO 9316
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) , D2-Pet-1 ,  ) ;
9266: LD_INT 22
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 21
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 26
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: LIST
9300: PPUSH
9301: CALL_OW 69
9305: PPUSH
9306: LD_STRING D2-Pet-1
9308: PPUSH
9309: LD_STRING 
9311: PPUSH
9312: CALL 3820 0 3
// if IsOK ( Stevens ) then
9316: LD_EXP 1
9320: PPUSH
9321: CALL_OW 302
9325: IFFALSE 9341
// Say ( Stevens , D2-Stev-1 ) else
9327: LD_EXP 1
9331: PPUSH
9332: LD_STRING D2-Stev-1
9334: PPUSH
9335: CALL_OW 88
9339: GO 9353
// Say ( Baker , D2-Stev-1 ) ;
9341: LD_EXP 2
9345: PPUSH
9346: LD_STRING D2-Stev-1
9348: PPUSH
9349: CALL_OW 88
// if IsOk ( Peter ) then
9353: LD_EXP 4
9357: PPUSH
9358: CALL_OW 302
9362: IFFALSE 9378
// begin Say ( Peter , D2-Pet-2 ) ;
9364: LD_EXP 4
9368: PPUSH
9369: LD_STRING D2-Pet-2
9371: PPUSH
9372: CALL_OW 88
// end else
9376: GO 9515
// begin if IsOk ( DeltaDoctor ) then
9378: LD_EXP 5
9382: PPUSH
9383: CALL_OW 302
9387: IFFALSE 9403
// begin Say ( DeltaDoctor , D2-Pet-2 ) ;
9389: LD_EXP 5
9393: PPUSH
9394: LD_STRING D2-Pet-2
9396: PPUSH
9397: CALL_OW 88
// end else
9401: GO 9515
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-2 ,  ) ;
9403: LD_INT 22
9405: PUSH
9406: LD_INT 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 26
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 25
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 25
9448: PUSH
9449: LD_INT 2
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 25
9458: PUSH
9459: LD_INT 3
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 25
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: PPUSH
9505: LD_STRING D2-Pet-2
9507: PPUSH
9508: LD_STRING 
9510: PPUSH
9511: CALL 3820 0 3
// end ; end ; if IsOK ( Stevens ) then
9515: LD_EXP 1
9519: PPUSH
9520: CALL_OW 302
9524: IFFALSE 9540
// Say ( Stevens , D2-Stev-2 ) else
9526: LD_EXP 1
9530: PPUSH
9531: LD_STRING D2-Stev-2
9533: PPUSH
9534: CALL_OW 88
9538: GO 9552
// Say ( Baker , D2-Stev-2 ) ;
9540: LD_EXP 2
9544: PPUSH
9545: LD_STRING D2-Stev-2
9547: PPUSH
9548: CALL_OW 88
// if IsOk ( Peter ) then
9552: LD_EXP 4
9556: PPUSH
9557: CALL_OW 302
9561: IFFALSE 9577
// begin Say ( Peter , D2-Pet-3 ) ;
9563: LD_EXP 4
9567: PPUSH
9568: LD_STRING D2-Pet-3
9570: PPUSH
9571: CALL_OW 88
// end else
9575: GO 9714
// begin if IsOk ( DeltaDoctor ) then
9577: LD_EXP 5
9581: PPUSH
9582: CALL_OW 302
9586: IFFALSE 9602
// begin Say ( DeltaDoctor , D2-Pet-3 ) ;
9588: LD_EXP 5
9592: PPUSH
9593: LD_STRING D2-Pet-3
9595: PPUSH
9596: CALL_OW 88
// end else
9600: GO 9714
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-3 ,  ) ;
9602: LD_INT 22
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 21
9614: PUSH
9615: LD_INT 1
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 26
9624: PUSH
9625: LD_INT 1
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 2
9634: PUSH
9635: LD_INT 25
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 25
9657: PUSH
9658: LD_INT 3
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 25
9667: PUSH
9668: LD_INT 4
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 25
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 69
9703: PPUSH
9704: LD_STRING D2-Pet-3
9706: PPUSH
9707: LD_STRING 
9709: PPUSH
9710: CALL 3820 0 3
// end ; end ; ComExitBuilding ( UnitsInside ( amsiblab ) ) ;
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 313
9721: PPUSH
9722: CALL_OW 122
// wait ( 0 0$2 ) ;
9726: LD_INT 70
9728: PPUSH
9729: CALL_OW 67
// for i in russianTPUnits do
9733: LD_ADDR_VAR 0 1
9737: PUSH
9738: LD_EXP 26
9742: PUSH
9743: FOR_IN
9744: IFFALSE 9769
// TeleportUnit ( i , 185 , 175 , 4 , true ) ;
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 185
9753: PPUSH
9754: LD_INT 175
9756: PPUSH
9757: LD_INT 4
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: CALL_OW 483
9767: GO 9743
9769: POP
9770: POP
// wait ( 0 0$2 ) ;
9771: LD_INT 70
9773: PPUSH
9774: CALL_OW 67
// SetLives ( amsiblab , 0 ) ;
9778: LD_INT 1
9780: PPUSH
9781: LD_INT 0
9783: PPUSH
9784: CALL_OW 234
// wait ( 0 0$2 ) ;
9788: LD_INT 70
9790: PPUSH
9791: CALL_OW 67
// for i in russianTPUnits do
9795: LD_ADDR_VAR 0 1
9799: PUSH
9800: LD_EXP 26
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9819
// RemoveUnit ( i ) ;
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 64
9817: GO 9805
9819: POP
9820: POP
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
9821: LD_INT 3
9823: PPUSH
9824: LD_INT 1
9826: PPUSH
9827: LD_INT 2
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 80
// ChangeSideFog ( 3 , 3 ) ;
9837: LD_INT 3
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: CALL_OW 343
// escapeAvalaible = 1 ;
9847: LD_ADDR_EXP 27
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// InGameOff ;
9855: CALL_OW 9
// ChangeMissionObjectives ( C2 ) ;
9859: LD_STRING C2
9861: PPUSH
9862: CALL_OW 337
// SetAreaMapShow ( EscapeArea , 1 ) ;
9866: LD_INT 11
9868: PPUSH
9869: LD_INT 1
9871: PPUSH
9872: CALL_OW 424
// end ; end_of_file
9876: PPOPN 2
9878: END
// every 0 0$1 trigger StevensStatus = 1 and IsDead ( Stevens ) do
9879: LD_EXP 28
9883: PUSH
9884: LD_INT 1
9886: EQUAL
9887: PUSH
9888: LD_EXP 1
9892: PPUSH
9893: CALL_OW 301
9897: AND
9898: IFFALSE 9910
9900: GO 9902
9902: DISABLE
// YouLost ( stevded ) ;
9903: LD_STRING stevded
9905: PPUSH
9906: CALL_OW 104
9910: END
// every 0 0$1 trigger not StevensStatus = 1 and IsDead ( Baker ) do
9911: LD_EXP 28
9915: PUSH
9916: LD_INT 1
9918: EQUAL
9919: NOT
9920: PUSH
9921: LD_EXP 2
9925: PPUSH
9926: CALL_OW 301
9930: AND
9931: IFFALSE 9943
9933: GO 9935
9935: DISABLE
// YouLost ( bakerded ) ;
9936: LD_STRING bakerded
9938: PPUSH
9939: CALL_OW 104
9943: END
// every 0 0$1 trigger IsDead ( amsiblab ) and EscapeAvalaible = 0 do
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 301
9951: PUSH
9952: LD_EXP 27
9956: PUSH
9957: LD_INT 0
9959: EQUAL
9960: AND
9961: IFFALSE 9973
9963: GO 9965
9965: DISABLE
// YouLost ( lab ) ; end_of_file
9966: LD_STRING lab
9968: PPUSH
9969: CALL_OW 104
9973: END
// every 3 3$0 do
9974: GO 9976
9976: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 10 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
9977: LD_INT 8
9979: PPUSH
9980: LD_INT 3
9982: PPUSH
9983: LD_INT 10
9985: PUSH
9986: LD_INT 11
9988: PUSH
9989: LD_INT 12
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: LD_OWVAR 67
10001: ARRAY
10002: PUSH
10003: LD_INT 5
10005: PPUSH
10006: LD_INT 10
10008: PPUSH
10009: CALL_OW 12
10013: PLUS
10014: PPUSH
10015: LD_INT 10
10017: PPUSH
10018: LD_INT 3
10020: PPUSH
10021: LD_INT 3
10023: PPUSH
10024: LD_INT 3
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PPUSH
10034: LD_INT 44
10036: PUSH
10037: LD_INT 45
10039: PUSH
10040: LD_INT 46
10042: PUSH
10043: LD_INT 47
10045: PUSH
10046: LD_INT 49
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: PPUSH
10056: EMPTY
10057: PPUSH
10058: EMPTY
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL 5697 0 11
// end ;
10067: END
// every 3 3$0 do
10068: GO 10070
10070: DISABLE
// begin ruAttacksCounter = 1 ;
10071: LD_ADDR_EXP 24
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 5 , 5 , 6 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10079: LD_INT 3
10081: PPUSH
10082: LD_INT 3
10084: PPUSH
10085: LD_INT 2
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: LD_INT 4
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: PUSH
10099: LD_OWVAR 67
10103: ARRAY
10104: PPUSH
10105: LD_INT 0
10107: PPUSH
10108: LD_INT 5
10110: PUSH
10111: LD_INT 5
10113: PUSH
10114: LD_INT 6
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: LD_OWVAR 67
10126: ARRAY
10127: PPUSH
10128: LD_INT 0
10130: PPUSH
10131: LD_INT 0
10133: PPUSH
10134: LD_INT 6
10136: PUSH
10137: LD_INT 7
10139: PUSH
10140: LD_INT 8
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_OWVAR 67
10152: ARRAY
10153: PPUSH
10154: LD_INT 8
10156: PPUSH
10157: LD_INT 8
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL 4677 0 11
// end ;
10167: END
// every 11 11$0 do
10168: GO 10170
10170: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 11 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10171: LD_INT 8
10173: PPUSH
10174: LD_INT 3
10176: PPUSH
10177: LD_INT 11
10179: PUSH
10180: LD_INT 11
10182: PUSH
10183: LD_INT 12
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: LD_OWVAR 67
10195: ARRAY
10196: PUSH
10197: LD_INT 5
10199: PPUSH
10200: LD_INT 10
10202: PPUSH
10203: CALL_OW 12
10207: PLUS
10208: PPUSH
10209: LD_INT 10
10211: PPUSH
10212: LD_INT 3
10214: PPUSH
10215: LD_INT 3
10217: PPUSH
10218: LD_INT 3
10220: PUSH
10221: LD_INT 3
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PPUSH
10228: LD_INT 44
10230: PUSH
10231: LD_INT 45
10233: PUSH
10234: LD_INT 46
10236: PUSH
10237: LD_INT 47
10239: PUSH
10240: LD_INT 49
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: PPUSH
10250: EMPTY
10251: PPUSH
10252: EMPTY
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL 5697 0 11
// end ;
10261: END
// every 11 11$0 do
10262: GO 10264
10264: DISABLE
// begin ruAttacksCounter = 2 ;
10265: LD_ADDR_EXP 24
10269: PUSH
10270: LD_INT 2
10272: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 6 , 7 , 7 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10273: LD_INT 3
10275: PPUSH
10276: LD_INT 3
10278: PPUSH
10279: LD_INT 2
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: LD_INT 4
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: LD_OWVAR 67
10297: ARRAY
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: LD_INT 6
10304: PUSH
10305: LD_INT 7
10307: PUSH
10308: LD_INT 7
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: LD_OWVAR 67
10320: ARRAY
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: LD_INT 0
10327: PPUSH
10328: LD_INT 6
10330: PUSH
10331: LD_INT 7
10333: PUSH
10334: LD_INT 8
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_OWVAR 67
10346: ARRAY
10347: PPUSH
10348: LD_INT 8
10350: PPUSH
10351: LD_INT 8
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL 4677 0 11
// end ;
10361: END
// every 18 18$0 trigger BurlakStatus = 1 do
10362: LD_EXP 29
10366: PUSH
10367: LD_INT 1
10369: EQUAL
10370: IFFALSE 10465
10372: GO 10374
10374: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10375: LD_INT 8
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: LD_INT 13
10383: PUSH
10384: LD_INT 14
10386: PUSH
10387: LD_INT 15
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_OWVAR 67
10399: ARRAY
10400: PUSH
10401: LD_INT 5
10403: PPUSH
10404: LD_INT 10
10406: PPUSH
10407: CALL_OW 12
10411: PLUS
10412: PPUSH
10413: LD_INT 10
10415: PPUSH
10416: LD_INT 3
10418: PPUSH
10419: LD_INT 3
10421: PPUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 3
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PPUSH
10432: LD_INT 44
10434: PUSH
10435: LD_INT 45
10437: PUSH
10438: LD_INT 46
10440: PUSH
10441: LD_INT 47
10443: PUSH
10444: LD_INT 49
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PPUSH
10454: EMPTY
10455: PPUSH
10456: EMPTY
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL 5697 0 11
// end ;
10465: END
// every 18 18$0 trigger BurlakStatus = 1 do
10466: LD_EXP 29
10470: PUSH
10471: LD_INT 1
10473: EQUAL
10474: IFFALSE 10575
10476: GO 10478
10478: DISABLE
// begin ruAttacksCounter = 3 ;
10479: LD_ADDR_EXP 24
10483: PUSH
10484: LD_INT 3
10486: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10487: LD_INT 3
10489: PPUSH
10490: LD_INT 3
10492: PPUSH
10493: LD_INT 2
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: LD_INT 4
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_OWVAR 67
10511: ARRAY
10512: PPUSH
10513: LD_INT 0
10515: PPUSH
10516: LD_INT 7
10518: PUSH
10519: LD_INT 8
10521: PUSH
10522: LD_INT 9
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: PUSH
10530: LD_OWVAR 67
10534: ARRAY
10535: PPUSH
10536: LD_INT 0
10538: PPUSH
10539: LD_INT 0
10541: PPUSH
10542: LD_INT 6
10544: PUSH
10545: LD_INT 7
10547: PUSH
10548: LD_INT 8
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_OWVAR 67
10560: ARRAY
10561: PPUSH
10562: LD_INT 8
10564: PPUSH
10565: LD_INT 8
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL 4677 0 11
// end ;
10575: END
// every 18 18$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
10576: LD_EXP 24
10580: PUSH
10581: LD_INT 2
10583: EQUAL
10584: PUSH
10585: LD_EXP 29
10589: PUSH
10590: LD_INT 0
10592: EQUAL
10593: AND
10594: IFFALSE 10689
10596: GO 10598
10598: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10599: LD_INT 8
10601: PPUSH
10602: LD_INT 3
10604: PPUSH
10605: LD_INT 13
10607: PUSH
10608: LD_INT 14
10610: PUSH
10611: LD_INT 15
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: PUSH
10625: LD_INT 5
10627: PPUSH
10628: LD_INT 10
10630: PPUSH
10631: CALL_OW 12
10635: PLUS
10636: PPUSH
10637: LD_INT 10
10639: PPUSH
10640: LD_INT 3
10642: PPUSH
10643: LD_INT 3
10645: PPUSH
10646: LD_INT 3
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: LD_INT 44
10658: PUSH
10659: LD_INT 45
10661: PUSH
10662: LD_INT 46
10664: PUSH
10665: LD_INT 47
10667: PUSH
10668: LD_INT 49
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PPUSH
10678: EMPTY
10679: PPUSH
10680: EMPTY
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL 5697 0 11
// end ;
10689: END
// every 18 18$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
10690: LD_EXP 24
10694: PUSH
10695: LD_INT 2
10697: EQUAL
10698: PUSH
10699: LD_EXP 29
10703: PUSH
10704: LD_INT 0
10706: EQUAL
10707: AND
10708: IFFALSE 10809
10710: GO 10712
10712: DISABLE
// begin ruAttacksCounter = 3 ;
10713: LD_ADDR_EXP 24
10717: PUSH
10718: LD_INT 3
10720: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10721: LD_INT 3
10723: PPUSH
10724: LD_INT 3
10726: PPUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 67
10745: ARRAY
10746: PPUSH
10747: LD_INT 0
10749: PPUSH
10750: LD_INT 7
10752: PUSH
10753: LD_INT 8
10755: PUSH
10756: LD_INT 9
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: LD_OWVAR 67
10768: ARRAY
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: LD_INT 6
10778: PUSH
10779: LD_INT 7
10781: PUSH
10782: LD_INT 8
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_OWVAR 67
10794: ARRAY
10795: PPUSH
10796: LD_INT 8
10798: PPUSH
10799: LD_INT 8
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL 4677 0 11
// end ;
10809: END
// every 18 18$0 trigger BurlakStatus = 0 do
10810: LD_EXP 29
10814: PUSH
10815: LD_INT 0
10817: EQUAL
10818: IFFALSE 10913
10820: GO 10822
10822: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10823: LD_INT 8
10825: PPUSH
10826: LD_INT 7
10828: PPUSH
10829: LD_INT 6
10831: PUSH
10832: LD_INT 7
10834: PUSH
10835: LD_INT 7
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_OWVAR 67
10847: ARRAY
10848: PUSH
10849: LD_INT 2
10851: PPUSH
10852: LD_INT 4
10854: PPUSH
10855: CALL_OW 12
10859: PLUS
10860: PPUSH
10861: LD_INT 10
10863: PPUSH
10864: LD_INT 3
10866: PPUSH
10867: LD_INT 3
10869: PPUSH
10870: LD_INT 3
10872: PUSH
10873: LD_INT 3
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PPUSH
10880: LD_INT 44
10882: PUSH
10883: LD_INT 45
10885: PUSH
10886: LD_INT 46
10888: PUSH
10889: LD_INT 47
10891: PUSH
10892: LD_INT 49
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PPUSH
10902: EMPTY
10903: PPUSH
10904: EMPTY
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL 5697 0 11
// end ;
10913: END
// every 18 18$0 trigger BurlakStatus = 0 do
10914: LD_EXP 29
10918: PUSH
10919: LD_INT 0
10921: EQUAL
10922: IFFALSE 11017
10924: GO 10926
10926: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10927: LD_INT 8
10929: PPUSH
10930: LD_INT 7
10932: PPUSH
10933: LD_INT 6
10935: PUSH
10936: LD_INT 7
10938: PUSH
10939: LD_INT 7
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: LD_OWVAR 67
10951: ARRAY
10952: PUSH
10953: LD_INT 2
10955: PPUSH
10956: LD_INT 4
10958: PPUSH
10959: CALL_OW 12
10963: PLUS
10964: PPUSH
10965: LD_INT 10
10967: PPUSH
10968: LD_INT 3
10970: PPUSH
10971: LD_INT 3
10973: PPUSH
10974: LD_INT 3
10976: PUSH
10977: LD_INT 3
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PPUSH
10984: LD_INT 44
10986: PUSH
10987: LD_INT 45
10989: PUSH
10990: LD_INT 46
10992: PUSH
10993: LD_INT 47
10995: PUSH
10996: LD_INT 49
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: EMPTY
11007: PPUSH
11008: EMPTY
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL 5697 0 11
// end ;
11017: END
// every 18 18$0 trigger BurlakStatus = 0 do
11018: LD_EXP 29
11022: PUSH
11023: LD_INT 0
11025: EQUAL
11026: IFFALSE 11117
11028: GO 11030
11030: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 1 , 3 , [ 3 , 3 ] , [ ] , [ ] , [ 10 , 9 , 7 , 6 ] , 1 ) ;
11031: LD_INT 8
11033: PPUSH
11034: LD_INT 7
11036: PPUSH
11037: LD_INT 6
11039: PUSH
11040: LD_INT 7
11042: PUSH
11043: LD_INT 7
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_OWVAR 67
11055: ARRAY
11056: PUSH
11057: LD_INT 2
11059: PPUSH
11060: LD_INT 4
11062: PPUSH
11063: CALL_OW 12
11067: PLUS
11068: PPUSH
11069: LD_INT 10
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 3
11077: PPUSH
11078: LD_INT 3
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: EMPTY
11089: PPUSH
11090: EMPTY
11091: PPUSH
11092: LD_INT 10
11094: PUSH
11095: LD_INT 9
11097: PUSH
11098: LD_INT 7
11100: PUSH
11101: LD_INT 6
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL 5697 0 11
// end ;
11117: END
// every 18 18$0 trigger BurlakStatus = 0 do
11118: LD_EXP 29
11122: PUSH
11123: LD_INT 0
11125: EQUAL
11126: IFFALSE 11270
11128: GO 11130
11130: DISABLE
// begin uc_side = 7 ;
11131: LD_ADDR_OWVAR 20
11135: PUSH
11136: LD_INT 7
11138: ST_TO_ADDR
// uc_nation = 1 ;
11139: LD_ADDR_OWVAR 21
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// vc_engine = 3 ;
11147: LD_ADDR_OWVAR 39
11151: PUSH
11152: LD_INT 3
11154: ST_TO_ADDR
// vc_control = 1 ;
11155: LD_ADDR_OWVAR 38
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// vc_chassis = 24 ;
11163: LD_ADDR_OWVAR 37
11167: PUSH
11168: LD_INT 24
11170: ST_TO_ADDR
// vc_weapon = 46 ;
11171: LD_ADDR_OWVAR 40
11175: PUSH
11176: LD_INT 46
11178: ST_TO_ADDR
// burlakVeh = CreateVehicle ;
11179: LD_ADDR_EXP 22
11183: PUSH
11184: CALL_OW 45
11188: ST_TO_ADDR
// PlaceUnitArea ( burlakVeh , RussianAttackSpawn , false ) ;
11189: LD_EXP 22
11193: PPUSH
11194: LD_INT 8
11196: PPUSH
11197: LD_INT 0
11199: PPUSH
11200: CALL_OW 49
// Burlak = PrepareUnit ( Burlak , false ) ;
11204: LD_ADDR_EXP 21
11208: PUSH
11209: LD_STRING Burlak
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL 3200 0 2
11219: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , burlakVeh ) ;
11220: LD_EXP 21
11224: PPUSH
11225: LD_EXP 22
11229: PPUSH
11230: CALL_OW 52
// SetMark ( burlakVeh , 1 ) ;
11234: LD_EXP 22
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 242
// ComAgressiveMove ( [ Burlak , BurlakVeh ] , 117 , 39 ) ;
11246: LD_EXP 21
11250: PUSH
11251: LD_EXP 22
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PPUSH
11260: LD_INT 117
11262: PPUSH
11263: LD_INT 39
11265: PPUSH
11266: CALL_OW 114
// end ;
11270: END
// every 0 0$50 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and escapeAvalaible = 1 and IsDead ( amsiblab ) do
11271: LD_INT 22
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 21
11283: PUSH
11284: LD_INT 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 50
11293: PUSH
11294: EMPTY
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 0
11309: EQUAL
11310: PUSH
11311: LD_EXP 27
11315: PUSH
11316: LD_INT 1
11318: EQUAL
11319: AND
11320: PUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 301
11328: AND
11329: IFFALSE 11425
11331: GO 11333
11333: DISABLE
// begin RespawnAttackVehicle ( RussianSpawn2 , 3 , [ 8 , 9 , 9 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
11334: LD_INT 13
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: LD_INT 8
11342: PUSH
11343: LD_INT 9
11345: PUSH
11346: LD_INT 9
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_OWVAR 67
11358: ARRAY
11359: PUSH
11360: LD_INT 2
11362: PPUSH
11363: LD_INT 4
11365: PPUSH
11366: CALL_OW 12
11370: PLUS
11371: PPUSH
11372: LD_INT 10
11374: PPUSH
11375: LD_INT 3
11377: PPUSH
11378: LD_INT 3
11380: PPUSH
11381: LD_INT 3
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PPUSH
11391: LD_INT 44
11393: PUSH
11394: LD_INT 45
11396: PUSH
11397: LD_INT 46
11399: PUSH
11400: LD_INT 47
11402: PUSH
11403: LD_INT 49
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PPUSH
11413: EMPTY
11414: PPUSH
11415: EMPTY
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL 5697 0 11
// enable ;
11424: ENABLE
// end ; end_of_file
11425: END
// every 0 0$1 do
11426: GO 11428
11428: DISABLE
// begin enable ;
11429: ENABLE
// TimeLapsersAI ( 3 ) ;
11430: LD_INT 3
11432: PPUSH
11433: CALL 4413 0 1
// IntBazooka ( 3 ) ;
11437: LD_INT 3
11439: PPUSH
11440: CALL 4085 0 1
// end ; end_of_file
11444: END
// every 0 0$1 trigger FilterUnitsExceptArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_engine , 3 ] , [ f_not , [ f_empty ] ] ] ) = allUnitsLengh and EscapeAvalaible = 1 do var i , cargoType , yourVehicles ;
11445: LD_INT 11
11447: PPUSH
11448: LD_INT 22
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 21
11460: PUSH
11461: LD_INT 1
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 71
11476: PUSH
11477: LD_INT 0
11479: EQUAL
11480: PUSH
11481: LD_INT 11
11483: PPUSH
11484: LD_INT 22
11486: PUSH
11487: LD_INT 1
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 32
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: LD_INT 58
11529: PUSH
11530: EMPTY
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 70
11548: PUSH
11549: LD_EXP 31
11553: EQUAL
11554: AND
11555: PUSH
11556: LD_EXP 27
11560: PUSH
11561: LD_INT 1
11563: EQUAL
11564: AND
11565: IFFALSE 12679
11567: GO 11569
11569: DISABLE
11570: LD_INT 0
11572: PPUSH
11573: PPUSH
11574: PPUSH
// begin yourVehicles = [ ] ;
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: EMPTY
11581: ST_TO_ADDR
// if FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11582: LD_INT 11
11584: PPUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 33
11597: PUSH
11598: LD_INT 1
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: LD_INT 58
11610: PUSH
11611: EMPTY
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 70
11627: PUSH
11628: LD_INT 0
11630: GREATER
11631: IFFALSE 11899
// begin for i in FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_INT 11
11640: PPUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: LD_INT 58
11666: PUSH
11667: EMPTY
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 70
11683: PUSH
11684: FOR_IN
11685: IFFALSE 11885
// begin cargoType = GetCargoType ( i ) ;
11687: LD_ADDR_VAR 0 2
11691: PUSH
11692: LD_VAR 0 1
11696: PPUSH
11697: CALL_OW 288
11701: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL_OW 264
11711: PUSH
11712: LD_INT 12
11714: EQUAL
11715: IFFALSE 11812
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_VAR 0 3
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 248
11736: PUSH
11737: LD_VAR 0 1
11741: PPUSH
11742: CALL_OW 265
11746: PUSH
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 262
11756: PUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 263
11766: PUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 264
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_VAR 0 2
11791: PPUSH
11792: CALL_OW 289
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: ADD
11809: ST_TO_ADDR
// end else
11810: GO 11883
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: LD_VAR 0 3
11821: PUSH
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 248
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 265
11841: PUSH
11842: LD_VAR 0 1
11846: PPUSH
11847: CALL_OW 262
11851: PUSH
11852: LD_VAR 0 1
11856: PPUSH
11857: CALL_OW 263
11861: PUSH
11862: LD_VAR 0 1
11866: PPUSH
11867: CALL_OW 264
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: ADD
11882: ST_TO_ADDR
// end ; end ;
11883: GO 11684
11885: POP
11886: POP
// SaveVariable ( yourVehicles , 15_Vehicles_1 ) ;
11887: LD_VAR 0 3
11891: PPUSH
11892: LD_STRING 15_Vehicles_1
11894: PPUSH
11895: CALL_OW 39
// end ; SaveCargos ;
11899: CALL 12682 0 0
// if siberiteRocketStatus = 1 then
11903: LD_EXP 33
11907: PUSH
11908: LD_INT 1
11910: EQUAL
11911: IFFALSE 11925
// AddMedal ( med1 , 1 ) else
11913: LD_STRING med1
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 101
11923: GO 11936
// AddMedal ( med1 , - 1 ) ;
11925: LD_STRING med1
11927: PPUSH
11928: LD_INT 1
11930: NEG
11931: PPUSH
11932: CALL_OW 101
// if unitLost > 3 and unitLost < 5 then
11936: LD_EXP 30
11940: PUSH
11941: LD_INT 3
11943: GREATER
11944: PUSH
11945: LD_EXP 30
11949: PUSH
11950: LD_INT 5
11952: LESS
11953: AND
11954: IFFALSE 11968
// begin AddMedal ( med2 , 2 ) end else
11956: LD_STRING med2
11958: PPUSH
11959: LD_INT 2
11961: PPUSH
11962: CALL_OW 101
11966: GO 12001
// begin if unitLost > 5 then
11968: LD_EXP 30
11972: PUSH
11973: LD_INT 5
11975: GREATER
11976: IFFALSE 11991
// AddMedal ( med2 , - 1 ) else
11978: LD_STRING med2
11980: PPUSH
11981: LD_INT 1
11983: NEG
11984: PPUSH
11985: CALL_OW 101
11989: GO 12001
// AddMedal ( med2 , 1 ) ;
11991: LD_STRING med2
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 101
// end ; if amSciStatus = 1 then
12001: LD_EXP 25
12005: PUSH
12006: LD_INT 1
12008: EQUAL
12009: IFFALSE 12023
// AddMedal ( med3 , 1 ) else
12011: LD_STRING med3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 101
12021: GO 12034
// AddMedal ( med3 , - 1 ) ;
12023: LD_STRING med3
12025: PPUSH
12026: LD_INT 1
12028: NEG
12029: PPUSH
12030: CALL_OW 101
// GiveMedals ( MAIN ) ;
12034: LD_STRING MAIN
12036: PPUSH
12037: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
12041: LD_INT 50
12043: PUSH
12044: EMPTY
12045: LIST
12046: PUSH
12047: LD_INT 22
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 1
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 25
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 4
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 25
12122: PUSH
12123: LD_INT 8
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: PPUSH
12150: CALL_OW 43
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
12154: LD_EXP 11
12158: PPUSH
12159: LD_EXP 32
12163: PUSH
12164: LD_STRING Brown
12166: STR
12167: PPUSH
12168: CALL 3417 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
12172: LD_EXP 7
12176: PPUSH
12177: LD_EXP 32
12181: PUSH
12182: LD_STRING Donaldson
12184: STR
12185: PPUSH
12186: CALL 3417 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12190: LD_EXP 8
12194: PPUSH
12195: LD_EXP 32
12199: PUSH
12200: LD_STRING Bobby
12202: STR
12203: PPUSH
12204: CALL 3417 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12208: LD_EXP 9
12212: PPUSH
12213: LD_EXP 32
12217: PUSH
12218: LD_STRING Cyrus
12220: STR
12221: PPUSH
12222: CALL 3417 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12226: LD_EXP 6
12230: PPUSH
12231: LD_EXP 32
12235: PUSH
12236: LD_STRING Lisa
12238: STR
12239: PPUSH
12240: CALL 3417 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
12244: LD_EXP 16
12248: PPUSH
12249: LD_EXP 32
12253: PUSH
12254: LD_STRING Frank
12256: STR
12257: PPUSH
12258: CALL 3417 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
12262: LD_EXP 17
12266: PPUSH
12267: LD_EXP 32
12271: PUSH
12272: LD_STRING Kikuchi
12274: STR
12275: PPUSH
12276: CALL 3417 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
12280: LD_EXP 13
12284: PPUSH
12285: LD_EXP 32
12289: PUSH
12290: LD_STRING Houten
12292: STR
12293: PPUSH
12294: CALL 3417 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
12298: LD_EXP 15
12302: PPUSH
12303: LD_EXP 32
12307: PUSH
12308: LD_STRING Gary
12310: STR
12311: PPUSH
12312: CALL 3417 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
12316: LD_EXP 14
12320: PPUSH
12321: LD_EXP 32
12325: PUSH
12326: LD_STRING Cornell
12328: STR
12329: PPUSH
12330: CALL 3417 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
12334: LD_EXP 10
12338: PPUSH
12339: LD_EXP 32
12343: PUSH
12344: LD_STRING Denis
12346: STR
12347: PPUSH
12348: CALL 3417 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
12352: LD_EXP 12
12356: PPUSH
12357: LD_EXP 32
12361: PUSH
12362: LD_STRING Gladstone
12364: STR
12365: PPUSH
12366: CALL 3417 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
12370: LD_EXP 1
12374: PPUSH
12375: LD_EXP 32
12379: PUSH
12380: LD_STRING Stevens
12382: STR
12383: PPUSH
12384: CALL 3417 0 2
// EnchancedSaveCharacters ( Baker , mission_prefix & Baker ) ;
12388: LD_EXP 2
12392: PPUSH
12393: LD_EXP 32
12397: PUSH
12398: LD_STRING Baker
12400: STR
12401: PPUSH
12402: CALL 3417 0 2
// EnchancedSaveCharacters ( Gordon , mission_prefix & Gordon ) ;
12406: LD_EXP 3
12410: PPUSH
12411: LD_EXP 32
12415: PUSH
12416: LD_STRING Gordon
12418: STR
12419: PPUSH
12420: CALL 3417 0 2
// EnchancedSaveCharacters ( Peter , mission_prefix & Peter ) ;
12424: LD_EXP 4
12428: PPUSH
12429: LD_EXP 32
12433: PUSH
12434: LD_STRING Peter
12436: STR
12437: PPUSH
12438: CALL 3417 0 2
// EnchancedSaveCharacters ( Connie , mission_prefix & Connie ) ;
12442: LD_EXP 18
12446: PPUSH
12447: LD_EXP 32
12451: PUSH
12452: LD_STRING Connie
12454: STR
12455: PPUSH
12456: CALL 3417 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornell , Stevens , Baker , Gordon , Peter ] , 15_other_survivors ) ;
12460: LD_INT 50
12462: PUSH
12463: EMPTY
12464: LIST
12465: PUSH
12466: LD_INT 22
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 21
12478: PUSH
12479: LD_INT 1
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 25
12491: PUSH
12492: LD_INT 1
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 25
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 25
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 25
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 25
12531: PUSH
12532: LD_INT 5
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 25
12541: PUSH
12542: LD_INT 8
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: PUSH
12569: LD_EXP 11
12573: PUSH
12574: LD_EXP 7
12578: PUSH
12579: LD_EXP 8
12583: PUSH
12584: LD_EXP 9
12588: PUSH
12589: LD_EXP 6
12593: PUSH
12594: LD_EXP 16
12598: PUSH
12599: LD_EXP 12
12603: PUSH
12604: LD_EXP 17
12608: PUSH
12609: LD_EXP 10
12613: PUSH
12614: LD_EXP 13
12618: PUSH
12619: LD_EXP 15
12623: PUSH
12624: LD_EXP 14
12628: PUSH
12629: LD_EXP 1
12633: PUSH
12634: LD_EXP 2
12638: PUSH
12639: LD_EXP 3
12643: PUSH
12644: LD_EXP 4
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: DIFF
12667: PPUSH
12668: LD_STRING 15_other_survivors
12670: PPUSH
12671: CALL_OW 38
// YouWin ;
12675: CALL_OW 103
// end ;
12679: PPOPN 3
12681: END
// export function SaveCargos ; var i , resources ; begin
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
12686: PPUSH
// resources = [ ] ;
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: EMPTY
12693: ST_TO_ADDR
// for i in FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 11
12701: PPUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 1
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 33
12714: PUSH
12715: LD_INT 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 34
12724: PUSH
12725: LD_INT 12
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 70
12741: PUSH
12742: FOR_IN
12743: IFFALSE 12771
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
12745: LD_ADDR_VAR 0 3
12749: PUSH
12750: LD_VAR 0 3
12754: PUSH
12755: LD_VAR 0 2
12759: PPUSH
12760: CALL 12790 0 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: ADD
12768: ST_TO_ADDR
12769: GO 12742
12771: POP
12772: POP
// SaveVariable ( resources , 15_ResourcesInCargo_1 ) ;
12773: LD_VAR 0 3
12777: PPUSH
12778: LD_STRING 15_ResourcesInCargo_1
12780: PPUSH
12781: CALL_OW 39
// end ;
12785: LD_VAR 0 1
12789: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
12794: LD_ADDR_VAR 0 2
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 289
12811: PUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_INT 2
12819: PPUSH
12820: CALL_OW 289
12824: PUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: LD_INT 3
12832: PPUSH
12833: CALL_OW 289
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: ST_TO_ADDR
// end ; end_of_file
12843: LD_VAR 0 2
12847: RET
// every 2 2$30 do
12848: GO 12850
12850: DISABLE
// begin enable ;
12851: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12852: LD_INT 3
12854: PPUSH
12855: LD_INT 5
12857: PPUSH
12858: CALL_OW 12
12862: PPUSH
12863: LD_INT 12
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 55
// end ;
12873: END
