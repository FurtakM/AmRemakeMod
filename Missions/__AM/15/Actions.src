Every 1 do
var dec1, options;
begin
    InGameOn;
    ComMoveXY([NewJMMVeh, NewJMMGirlVeh], 48, 68);
    CenterNowOnUnits(NewJMMVeh);
    Say(JMM, 'D1T-JMM-1');
    CenterNowOnUnits(NewJMMVeh);
    Say(Powell, 'D1T-Pow-1');
    CenterNowOnUnits(NewJMMVeh);
    Say(JMM, 'D1T-JMM-2');
    CenterNowOnUnits(NewJMMVeh);
    Say(Powell, 'D1T-Pow-2');
    CenterNowOnUnits(NewJMMVeh);
    Say(JMM, 'D1T-JMM-3');
    CenterNowOnUnits(NewJMMVeh);
    Say(Powell, 'D1T-Pow-3');
    CenterNowOnUnits(NewJMMVeh);
    if not JMMGirlVeh = [] then
    begin
        if JMMGirl = 1 then Say(Joan, 'D1T-Joan-3');
        if JMMGirl = 2 then Say(Joan, 'D1T-Lisa-3');
        if JMMGirl = 3 then Say(Joan, 'D1T-Con-3');
        CenterNowOnUnits(NewJMMVeh);
        Say(Powell, 'D1T-Pow-4');
        CenterNowOnUnits(NewJMMVeh);
    end else
    begin
        Say(JMM, 'D1T-JMM-4');
        CenterNowOnUnits(NewJMMVeh);
        Say(Powell, 'D1T-Pow-5');
        CenterNowOnUnits(NewJMMVeh);
    end;

    repeat
        wait(0$1);
        ComMoveXY([NewJMMVeh, NewJMMGirlVeh], 48, 68);
        CenterNowOnUnits(NewJMMVeh);
    until GetDistUnits(NewJMMVeh, Powell) < 15;

    ComExitVehicle(JMM);
    wait(0$1);

    repeat
        wait(0$1);
        ComMoveUnit(JMM, Powell);
        CenterNowOnUnits(JMM);
    until GetDistUnits(JMM, Powell) < 4;

    CenterNowOnUnits([JMM, Powell]);
    ComTurnUnit(JMM, Powell);
    ComTurnUnit(Powell, JMM);

    Say(JMM, 'D1-JMM-1');
    Say(Powell, 'D1-Pow-1');
    CenterOnXY(171, 81);
    wait(0$2);
    CenterOnXY(157, 49);
    wait(0$2);
    CenterOnXY(75, 16);
    wait(0$3);
    CenterNowOnUnits([Powell, JMM]);
    Say(JMM, 'D1-JMM-2');
    Say(Powell, 'D1-Pow-2');
    Say(JMM, 'D1-JMM-3');
    Say(Powell, 'D1-Pow-3');
    Say(JMM, 'D1-JMM-4');
    Say(Powell, 'D1-Pow-4');
    Say(JMM, 'D1-JMM-5');
    Say(Powell, 'D1-Pow-5');

    options = [1, 2, 3, 4, 5, 6];

    dec1 = SelectiveQuery('Q1', options);

    repeat
        dec1 = SelectiveQuery('Q1', options);
        options = options diff dec1;
        ResolveQuery(dec1, options);
    until (dec1 in [5, 6]) or options = 2;

    if not(dec1 in [5, 6]) then
    begin
        dec1 = SelectiveQuery('Q1a', [1, 2]);
        ResolveQuery(dec1+4, options);
    end;

    InGameOff;

end;

Function ResolveQuery(question, list_of_q);
 begin
   case question of
     1: begin
          Say(JMM, 'D2Mot-JMM-1');
          Say(Powell, 'D2Mot-Pow-1');
          Say(JMM, 'D2Mot-JMM-2');
          Say(Powell, 'D2Mot-Pow-2');
        end;

     2: begin
          Say(JMM, 'D2Rus-JMM-1');
          Say(Powell, 'D2Rus-Pow-1');
          Say(JMM, 'D2Rus-JMM-2');
          if not(3 in list_of_q) then Say(Powell, 'D2Rus-Pow-2')
          else Say(Powell, 'D2Rus-Pow-2a');
        end;

     3: begin
          Say(JMM, 'D2Leg-JMM-1');
          Say(Powell, 'D2Leg-Pow-1');
          if (2 in list_of_q) then
            begin
              Say(JMM, 'D2Leg-JMM-2');
              Say(Powell, 'D2Leg-Pow-2');
            end;
          Say(JMM, 'D2Leg-JMM-3');
          Say(Powell, 'D2Leg-Pow-3');
        end;

     4: begin
          Say(JMM, 'D2Ar-JMM-1');
          Say(Powell, 'D2Ar-Pow-1');
          Say(JMM, 'D2Ar-JMM-2');
          Say(Powell, 'D2Ar-Pow-2');
          Say(JMM, 'D2Ar-JMM-3');
          Say(Powell, 'D2Ar-Pow-3');
        end;

     5: begin
          Say(JMM, 'D2Conf-JMM-1');
        end;

     6: begin
          Say(JMM, 'D2Com-JMM-1');
          Say(Powell, 'D2Com-Pow-1');
          Say(JMM, 'D2Com-JMM-2');
          Say(Powell, 'D2Com-Pow-2');
        end;
   end;
 end;