// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46041 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28916 0 0
// PrepareAmerican ;
  33: CALL 294 0 0
// PrepareArabian ;
  37: CALL 33527 0 0
// Action ;
  41: CALL 38680 0 0
// RunMacro ;
  45: CALL 46204 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// end ;
 235: LD_VAR 0 1
 239: RET
// function Debuger ; var i ; begin
 240: LD_INT 0
 242: PPUSH
 243: PPUSH
// if not debug then
 244: LD_EXP 1
 248: NOT
 249: IFFALSE 253
// exit ;
 251: GO 289
// game_speed := 5 ;
 253: LD_ADDR_OWVAR 65
 257: PUSH
 258: LD_INT 5
 260: ST_TO_ADDR
// uc_side := 1 ;
 261: LD_ADDR_OWVAR 20
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// uc_nation := 1 ;
 269: LD_ADDR_OWVAR 21
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 277: LD_EXP 34
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 235
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
// uc_side := 4 ;
 305: LD_ADDR_OWVAR 20
 309: PUSH
 310: LD_INT 4
 312: ST_TO_ADDR
// uc_nation := 1 ;
 313: LD_ADDR_OWVAR 21
 317: PUSH
 318: LD_INT 1
 320: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 321: LD_ADDR_EXP 27
 325: PUSH
 326: LD_STRING Powell
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL 1852 0 2
 336: ST_TO_ADDR
// uc_side := 1 ;
 337: LD_ADDR_OWVAR 20
 341: PUSH
 342: LD_INT 1
 344: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 345: LD_ADDR_EXP 18
 349: PUSH
 350: LD_STRING JMM
 352: PPUSH
 353: LD_EXP 1
 357: NOT
 358: PPUSH
 359: CALL 1852 0 2
 363: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 364: LD_ADDR_EXP 19
 368: PUSH
 369: LD_STRING Lisa
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: CALL 1852 0 2
 382: ST_TO_ADDR
// if not Lisa then
 383: LD_EXP 19
 387: NOT
 388: IFFALSE 403
// Lisa := CreateCharacter ( 10_Lisa ) ;
 390: LD_ADDR_EXP 19
 394: PUSH
 395: LD_STRING 10_Lisa
 397: PPUSH
 398: CALL_OW 34
 402: ST_TO_ADDR
// if not Lisa then
 403: LD_EXP 19
 407: NOT
 408: IFFALSE 423
// Lisa := CreateCharacter ( 09_Lisa ) ;
 410: LD_ADDR_EXP 19
 414: PUSH
 415: LD_STRING 09_Lisa
 417: PPUSH
 418: CALL_OW 34
 422: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 423: LD_ADDR_EXP 20
 427: PUSH
 428: LD_STRING Donaldson
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: CALL 1852 0 2
 441: ST_TO_ADDR
// if not Donaldson then
 442: LD_EXP 20
 446: NOT
 447: IFFALSE 462
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 449: LD_ADDR_EXP 20
 453: PUSH
 454: LD_STRING 10_Donaldson
 456: PPUSH
 457: CALL_OW 34
 461: ST_TO_ADDR
// if not Donaldson then
 462: LD_EXP 20
 466: NOT
 467: IFFALSE 482
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 469: LD_ADDR_EXP 20
 473: PUSH
 474: LD_STRING 09_Donaldson
 476: PPUSH
 477: CALL_OW 34
 481: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 482: LD_ADDR_EXP 21
 486: PUSH
 487: LD_STRING Bobby
 489: PPUSH
 490: LD_EXP 1
 494: NOT
 495: PPUSH
 496: CALL 1852 0 2
 500: ST_TO_ADDR
// if not Bobby then
 501: LD_EXP 21
 505: NOT
 506: IFFALSE 521
// Bobby := CreateCharacter ( 10_Bobby ) ;
 508: LD_ADDR_EXP 21
 512: PUSH
 513: LD_STRING 10_Bobby
 515: PPUSH
 516: CALL_OW 34
 520: ST_TO_ADDR
// if not Bobby then
 521: LD_EXP 21
 525: NOT
 526: IFFALSE 541
// Bobby := CreateCharacter ( 09_Bobby ) ;
 528: LD_ADDR_EXP 21
 532: PUSH
 533: LD_STRING 09_Bobby
 535: PPUSH
 536: CALL_OW 34
 540: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 541: LD_ADDR_EXP 22
 545: PUSH
 546: LD_STRING Cyrus
 548: PPUSH
 549: LD_EXP 1
 553: NOT
 554: PPUSH
 555: CALL 1852 0 2
 559: ST_TO_ADDR
// if not Cyrus then
 560: LD_EXP 22
 564: NOT
 565: IFFALSE 580
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 567: LD_ADDR_EXP 22
 571: PUSH
 572: LD_STRING 10_Cyrus
 574: PPUSH
 575: CALL_OW 34
 579: ST_TO_ADDR
// if not Cyrus then
 580: LD_EXP 22
 584: NOT
 585: IFFALSE 600
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 587: LD_ADDR_EXP 22
 591: PUSH
 592: LD_STRING 09_Cyrus
 594: PPUSH
 595: CALL_OW 34
 599: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 600: LD_ADDR_EXP 23
 604: PUSH
 605: LD_STRING Denis
 607: PPUSH
 608: LD_EXP 1
 612: NOT
 613: PPUSH
 614: CALL 1852 0 2
 618: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 619: LD_ADDR_EXP 24
 623: PUSH
 624: LD_STRING Brown
 626: PPUSH
 627: LD_EXP 1
 631: NOT
 632: PPUSH
 633: CALL 1852 0 2
 637: ST_TO_ADDR
// if not Brown then
 638: LD_EXP 24
 642: NOT
 643: IFFALSE 658
// Brown := CreateCharacter ( 10_Brown ) ;
 645: LD_ADDR_EXP 24
 649: PUSH
 650: LD_STRING 10_Brown
 652: PPUSH
 653: CALL_OW 34
 657: ST_TO_ADDR
// if not Brown then
 658: LD_EXP 24
 662: NOT
 663: IFFALSE 678
// Brown := CreateCharacter ( 08_Brown ) ;
 665: LD_ADDR_EXP 24
 669: PUSH
 670: LD_STRING 08_Brown
 672: PPUSH
 673: CALL_OW 34
 677: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 678: LD_ADDR_EXP 25
 682: PUSH
 683: LD_STRING Gladstone
 685: PPUSH
 686: LD_EXP 1
 690: NOT
 691: PPUSH
 692: CALL 1852 0 2
 696: ST_TO_ADDR
// if not Gladstone then
 697: LD_EXP 25
 701: NOT
 702: IFFALSE 717
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 704: LD_ADDR_EXP 25
 708: PUSH
 709: LD_STRING 10_Gladstone
 711: PPUSH
 712: CALL_OW 34
 716: ST_TO_ADDR
// if not Gladstone then
 717: LD_EXP 25
 721: NOT
 722: IFFALSE 737
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 724: LD_ADDR_EXP 25
 728: PUSH
 729: LD_STRING 08_Gladstone
 731: PPUSH
 732: CALL_OW 34
 736: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 737: LD_ADDR_EXP 26
 741: PUSH
 742: LD_STRING Houten
 744: PPUSH
 745: LD_EXP 1
 749: NOT
 750: PPUSH
 751: CALL 1852 0 2
 755: ST_TO_ADDR
// if not Houten then
 756: LD_EXP 26
 760: NOT
 761: IFFALSE 776
// Houten := CreateCharacter ( 10_Houten ) ;
 763: LD_ADDR_EXP 26
 767: PUSH
 768: LD_STRING 10_Houten
 770: PPUSH
 771: CALL_OW 34
 775: ST_TO_ADDR
// if not Houten then
 776: LD_EXP 26
 780: NOT
 781: IFFALSE 796
// Houten := CreateCharacter ( 09_Houten ) ;
 783: LD_ADDR_EXP 26
 787: PUSH
 788: LD_STRING 09_Houten
 790: PPUSH
 791: CALL_OW 34
 795: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 796: LD_ADDR_EXP 28
 800: PUSH
 801: LD_STRING Cornel
 803: PPUSH
 804: LD_EXP 1
 808: NOT
 809: PPUSH
 810: CALL 1852 0 2
 814: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 815: LD_ADDR_EXP 29
 819: PUSH
 820: LD_STRING Gary
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: CALL 1852 0 2
 833: ST_TO_ADDR
// if not Gary then
 834: LD_EXP 29
 838: NOT
 839: IFFALSE 854
// Gary := CreateCharacter ( 10_Gary ) ;
 841: LD_ADDR_EXP 29
 845: PUSH
 846: LD_STRING 10_Gary
 848: PPUSH
 849: CALL_OW 34
 853: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 854: LD_ADDR_EXP 30
 858: PUSH
 859: LD_STRING Frank
 861: PPUSH
 862: LD_EXP 1
 866: NOT
 867: PPUSH
 868: CALL 1852 0 2
 872: ST_TO_ADDR
// if not Frank then
 873: LD_EXP 30
 877: NOT
 878: IFFALSE 893
// Frank := CreateCharacter ( 08_Frank ) ;
 880: LD_ADDR_EXP 30
 884: PUSH
 885: LD_STRING 08_Frank
 887: PPUSH
 888: CALL_OW 34
 892: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 893: LD_ADDR_EXP 31
 897: PUSH
 898: LD_STRING Kikuchi
 900: PPUSH
 901: LD_EXP 1
 905: NOT
 906: PPUSH
 907: CALL 1852 0 2
 911: ST_TO_ADDR
// if not Kikuchi then
 912: LD_EXP 31
 916: NOT
 917: IFFALSE 932
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 919: LD_ADDR_EXP 31
 923: PUSH
 924: LD_STRING 08_Kikuchi
 926: PPUSH
 927: CALL_OW 34
 931: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 932: LD_ADDR_VAR 0 5
 936: PUSH
 937: LD_EXP 19
 941: PUSH
 942: LD_EXP 20
 946: PUSH
 947: LD_EXP 21
 951: PUSH
 952: LD_EXP 22
 956: PUSH
 957: LD_EXP 23
 961: PUSH
 962: LD_EXP 24
 966: PUSH
 967: LD_EXP 25
 971: PUSH
 972: LD_EXP 26
 976: PUSH
 977: LD_EXP 28
 981: PUSH
 982: LD_EXP 29
 986: PUSH
 987: LD_EXP 30
 991: PUSH
 992: LD_EXP 31
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: ST_TO_ADDR
// tmp := tmp diff 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_VAR 0 5
1020: PUSH
1021: LD_INT 0
1023: DIFF
1024: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1025: LD_ADDR_VAR 0 5
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: LD_STRING 10_lock
1037: PPUSH
1038: CALL_OW 31
1042: UNION
1043: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1044: LD_ADDR_VAR 0 5
1048: PUSH
1049: LD_VAR 0 5
1053: PUSH
1054: LD_STRING 10c_lock
1056: PPUSH
1057: CALL_OW 31
1061: UNION
1062: ST_TO_ADDR
// for i in tmp do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: LD_VAR 0 5
1072: PUSH
1073: FOR_IN
1074: IFFALSE 1105
// if GetClass ( i ) = class_mortar then
1076: LD_VAR 0 2
1080: PPUSH
1081: CALL_OW 257
1085: PUSH
1086: LD_INT 8
1088: EQUAL
1089: IFFALSE 1103
// SetClass ( i , class_soldier ) ;
1091: LD_VAR 0 2
1095: PPUSH
1096: LD_INT 1
1098: PPUSH
1099: CALL_OW 336
1103: GO 1073
1105: POP
1106: POP
// if tmp < 12 then
1107: LD_VAR 0 5
1111: PUSH
1112: LD_INT 12
1114: LESS
1115: IFFALSE 1213
// begin k := 16 - tmp ;
1117: LD_ADDR_VAR 0 3
1121: PUSH
1122: LD_INT 16
1124: PUSH
1125: LD_VAR 0 5
1129: MINUS
1130: ST_TO_ADDR
// for i = 1 to k do
1131: LD_ADDR_VAR 0 2
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 3
1145: PUSH
1146: FOR_TO
1147: IFFALSE 1211
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1149: LD_INT 0
1151: PPUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: LD_INT 4
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 1
1176: PPUSH
1177: LD_INT 5
1179: PPUSH
1180: CALL_OW 12
1184: ARRAY
1185: PPUSH
1186: LD_INT 6
1188: PPUSH
1189: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1193: LD_ADDR_VAR 0 5
1197: PUSH
1198: LD_VAR 0 5
1202: PUSH
1203: CALL_OW 44
1207: ADD
1208: ST_TO_ADDR
// end ;
1209: GO 1146
1211: POP
1212: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1213: LD_ADDR_VAR 0 6
1217: PUSH
1218: LD_STRING 1
1220: PPUSH
1221: LD_INT 12
1223: PPUSH
1224: LD_INT 12
1226: PPUSH
1227: LD_INT -5
1229: PUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT -2
1237: PUSH
1238: LD_INT -3
1240: PUSH
1241: LD_INT -5
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_VAR 0 5
1255: ADD
1256: PUSH
1257: LD_INT -6
1259: PUSH
1260: LD_INT -4
1262: PUSH
1263: LD_EXP 27
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: ADD
1273: PPUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 4
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 2
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 4
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 5
1324: PUSH
1325: LD_INT 0
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: PPUSH
1343: CALL_OW 42
1347: ST_TO_ADDR
// others := tmp diff selected ;
1348: LD_ADDR_VAR 0 9
1352: PUSH
1353: LD_VAR 0 5
1357: PUSH
1358: LD_VAR 0 6
1362: DIFF
1363: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1364: LD_ADDR_VAR 0 9
1368: PUSH
1369: LD_VAR 0 5
1373: PUSH
1374: LD_EXP 19
1378: PUSH
1379: LD_EXP 20
1383: PUSH
1384: LD_EXP 21
1388: PUSH
1389: LD_EXP 22
1393: PUSH
1394: LD_EXP 23
1398: PUSH
1399: LD_EXP 24
1403: PUSH
1404: LD_EXP 25
1408: PUSH
1409: LD_EXP 26
1413: PUSH
1414: LD_EXP 28
1418: PUSH
1419: LD_EXP 29
1423: PUSH
1424: LD_EXP 30
1428: PUSH
1429: LD_EXP 31
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: DIFF
1448: ST_TO_ADDR
// if others then
1449: LD_VAR 0 9
1453: IFFALSE 1467
// SaveCharacters ( others , 11_others ) ;
1455: LD_VAR 0 9
1459: PPUSH
1460: LD_STRING 11_others
1462: PPUSH
1463: CALL_OW 38
// us_team := tmp ;
1467: LD_ADDR_EXP 32
1471: PUSH
1472: LD_VAR 0 5
1476: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1477: LD_ADDR_VAR 0 7
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 1
1487: PUSH
1488: LD_INT 1
1490: PUSH
1491: LD_INT 4
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: LD_INT 2
1505: PUSH
1506: LD_INT 1
1508: PUSH
1509: LD_INT 5
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 4
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 2
1538: PUSH
1539: LD_INT 1
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: LD_INT 7
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: ST_TO_ADDR
// for i in JMM ^ selected do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: LD_EXP 18
1588: PUSH
1589: LD_VAR 0 6
1593: ADD
1594: PUSH
1595: FOR_IN
1596: IFFALSE 1785
// begin if GetClass ( i ) = 3 then
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 257
1607: PUSH
1608: LD_INT 3
1610: EQUAL
1611: IFFALSE 1768
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1613: LD_ADDR_OWVAR 37
1617: PUSH
1618: LD_VAR 0 7
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PUSH
1627: LD_INT 1
1629: ARRAY
1630: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1631: LD_ADDR_OWVAR 39
1635: PUSH
1636: LD_VAR 0 7
1640: PUSH
1641: LD_INT 1
1643: ARRAY
1644: PUSH
1645: LD_INT 2
1647: ARRAY
1648: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1649: LD_ADDR_OWVAR 38
1653: PUSH
1654: LD_VAR 0 7
1658: PUSH
1659: LD_INT 1
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1667: LD_ADDR_OWVAR 40
1671: PUSH
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: PUSH
1681: LD_INT 4
1683: ARRAY
1684: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1685: LD_ADDR_VAR 0 7
1689: PUSH
1690: LD_VAR 0 7
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: CALL_OW 3
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1713: LD_VAR 0 8
1717: PPUSH
1718: LD_INT 8
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1728: LD_VAR 0 2
1732: PPUSH
1733: LD_VAR 0 8
1737: PPUSH
1738: CALL_OW 52
// if i = JMM then
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 18
1751: EQUAL
1752: IFFALSE 1766
// SetMark ( veh , 1 ) ;
1754: LD_VAR 0 8
1758: PPUSH
1759: LD_INT 1
1761: PPUSH
1762: CALL_OW 242
// end else
1766: GO 1783
// PlaceUnitArea ( i , am_hum_start , false ) ;
1768: LD_VAR 0 2
1772: PPUSH
1773: LD_INT 9
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 49
// end ;
1783: GO 1595
1785: POP
1786: POP
// vc_chassis := us_medium_tracked ;
1787: LD_ADDR_OWVAR 37
1791: PUSH
1792: LD_INT 3
1794: ST_TO_ADDR
// vc_engine := engine_solar ;
1795: LD_ADDR_OWVAR 39
1799: PUSH
1800: LD_INT 2
1802: ST_TO_ADDR
// vc_control := control_computer ;
1803: LD_ADDR_OWVAR 38
1807: PUSH
1808: LD_INT 3
1810: ST_TO_ADDR
// vc_weapon := us_radar ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 11
1818: ST_TO_ADDR
// veh := CreateVehicle ;
1819: LD_ADDR_VAR 0 8
1823: PUSH
1824: CALL_OW 45
1828: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1829: LD_VAR 0 8
1833: PPUSH
1834: LD_INT 87
1836: PPUSH
1837: LD_INT 142
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 48
// end ; end_of_file
1847: LD_VAR 0 1
1851: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
// if exist_mode then
1856: LD_VAR 0 2
1860: IFFALSE 1885
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1862: LD_ADDR_VAR 0 4
1866: PUSH
1867: LD_EXP 4
1871: PUSH
1872: LD_VAR 0 1
1876: STR
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
1883: GO 1900
// unit := NewCharacter ( ident ) ;
1885: LD_ADDR_VAR 0 4
1889: PUSH
1890: LD_VAR 0 1
1894: PPUSH
1895: CALL_OW 25
1899: ST_TO_ADDR
// result := unit ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: LD_VAR 0 4
1909: ST_TO_ADDR
// end ;
1910: LD_VAR 0 3
1914: RET
// export function _GetHexInfo ( x , y ) ; begin
1915: LD_INT 0
1917: PPUSH
// result := false ;
1918: LD_ADDR_VAR 0 3
1922: PUSH
1923: LD_INT 0
1925: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1926: LD_VAR 0 1
1930: PPUSH
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 488
1940: NOT
1941: PUSH
1942: LD_VAR 0 1
1946: NOT
1947: OR
1948: PUSH
1949: LD_VAR 0 2
1953: NOT
1954: OR
1955: IFFALSE 1959
// exit ;
1957: GO 1979
// result := GetHexInfo ( x , y ) ;
1959: LD_ADDR_VAR 0 3
1963: PUSH
1964: LD_VAR 0 1
1968: PPUSH
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 546
1978: ST_TO_ADDR
// end ;
1979: LD_VAR 0 3
1983: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1984: LD_INT 0
1986: PPUSH
// vc_chassis := chassis ;
1987: LD_ADDR_OWVAR 37
1991: PUSH
1992: LD_VAR 0 1
1996: ST_TO_ADDR
// vc_engine := engine ;
1997: LD_ADDR_OWVAR 39
2001: PUSH
2002: LD_VAR 0 2
2006: ST_TO_ADDR
// vc_control := control ;
2007: LD_ADDR_OWVAR 38
2011: PUSH
2012: LD_VAR 0 3
2016: ST_TO_ADDR
// vc_weapon := weapon ;
2017: LD_ADDR_OWVAR 40
2021: PUSH
2022: LD_VAR 0 4
2026: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2027: LD_ADDR_OWVAR 41
2031: PUSH
2032: LD_VAR 0 5
2036: ST_TO_ADDR
// end ;
2037: LD_VAR 0 6
2041: RET
// export function CanSayRand ( side ) ; begin
2042: LD_INT 0
2044: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_VAR 0 1
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 2
2064: PUSH
2065: LD_INT 25
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 25
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 25
2087: PUSH
2088: LD_INT 3
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 25
2097: PUSH
2098: LD_INT 4
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PPUSH
2116: CALL_OW 69
2120: PUSH
2121: LD_EXP 18
2125: PUSH
2126: LD_EXP 30
2130: PUSH
2131: LD_EXP 19
2135: PUSH
2136: LD_EXP 20
2140: PUSH
2141: LD_EXP 21
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: LD_EXP 23
2155: PUSH
2156: LD_EXP 24
2160: PUSH
2161: LD_EXP 25
2165: PUSH
2166: LD_EXP 26
2170: PUSH
2171: LD_EXP 27
2175: PUSH
2176: LD_EXP 28
2180: PUSH
2181: LD_EXP 29
2185: PUSH
2186: LD_EXP 31
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: DIFF
2207: ST_TO_ADDR
// end ;
2208: LD_VAR 0 2
2212: RET
// export function SayRand ( sex , dial ) ; begin
2213: LD_INT 0
2215: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2216: LD_ADDR_VAR 0 3
2220: PUSH
2221: LD_INT 22
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PUSH
2231: LD_INT 26
2233: PUSH
2234: LD_VAR 0 1
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 2
2245: PUSH
2246: LD_INT 25
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 25
2258: PUSH
2259: LD_INT 2
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 25
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 25
2278: PUSH
2279: LD_INT 4
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: PPUSH
2298: CALL_OW 69
2302: PUSH
2303: LD_EXP 18
2307: PUSH
2308: LD_EXP 30
2312: PUSH
2313: LD_EXP 19
2317: PUSH
2318: LD_EXP 20
2322: PUSH
2323: LD_EXP 21
2327: PUSH
2328: LD_EXP 22
2332: PUSH
2333: LD_EXP 23
2337: PUSH
2338: LD_EXP 24
2342: PUSH
2343: LD_EXP 25
2347: PUSH
2348: LD_EXP 26
2352: PUSH
2353: LD_EXP 27
2357: PUSH
2358: LD_EXP 28
2362: PUSH
2363: LD_EXP 29
2367: PUSH
2368: LD_EXP 31
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: DIFF
2389: ST_TO_ADDR
// if not result then
2390: LD_VAR 0 3
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 2427
// result := result [ 1 ] ;
2399: LD_ADDR_VAR 0 3
2403: PUSH
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: ST_TO_ADDR
// Say ( result , dial ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: LD_VAR 0 2
2422: PPUSH
2423: CALL_OW 88
// end ;
2427: LD_VAR 0 3
2431: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2432: LD_INT 0
2434: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2435: LD_ADDR_VAR 0 4
2439: PUSH
2440: LD_INT 22
2442: PUSH
2443: LD_INT 1
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PUSH
2450: LD_INT 26
2452: PUSH
2453: LD_VAR 0 1
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 2
2464: PUSH
2465: LD_INT 25
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 25
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: LD_INT 25
2497: PUSH
2498: LD_INT 4
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 69
2521: PUSH
2522: LD_EXP 18
2526: PUSH
2527: LD_EXP 30
2531: PUSH
2532: LD_EXP 19
2536: PUSH
2537: LD_EXP 20
2541: PUSH
2542: LD_EXP 21
2546: PUSH
2547: LD_EXP 22
2551: PUSH
2552: LD_EXP 23
2556: PUSH
2557: LD_EXP 24
2561: PUSH
2562: LD_EXP 25
2566: PUSH
2567: LD_EXP 26
2571: PUSH
2572: LD_EXP 27
2576: PUSH
2577: LD_EXP 28
2581: PUSH
2582: LD_EXP 29
2586: PUSH
2587: LD_EXP 31
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_VAR 0 3
2612: ADD
2613: DIFF
2614: ST_TO_ADDR
// if not result then
2615: LD_VAR 0 4
2619: NOT
2620: IFFALSE 2624
// exit ;
2622: GO 2652
// result := result [ 1 ] ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: ST_TO_ADDR
// Say ( result , dial ) ;
2638: LD_VAR 0 4
2642: PPUSH
2643: LD_VAR 0 2
2647: PPUSH
2648: CALL_OW 88
// end ;
2652: LD_VAR 0 4
2656: RET
// export function WantPlant ( unit ) ; var task ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
// result := false ;
2661: LD_ADDR_VAR 0 2
2665: PUSH
2666: LD_INT 0
2668: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: LD_VAR 0 1
2678: PPUSH
2679: CALL_OW 437
2683: ST_TO_ADDR
// if task then
2684: LD_VAR 0 3
2688: IFFALSE 2716
// if task [ 1 ] [ 1 ] = p then
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PUSH
2699: LD_INT 1
2701: ARRAY
2702: PUSH
2703: LD_STRING p
2705: EQUAL
2706: IFFALSE 2716
// result := true ;
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: LD_INT 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 2
2720: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
// if pos < 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: LESS
2735: IFFALSE 2739
// exit ;
2737: GO 3042
// if pos = 1 then
2739: LD_VAR 0 2
2743: PUSH
2744: LD_INT 1
2746: EQUAL
2747: IFFALSE 2780
// result := Replace ( arr , pos [ 1 ] , value ) else
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: LD_VAR 0 1
2758: PPUSH
2759: LD_VAR 0 2
2763: PUSH
2764: LD_INT 1
2766: ARRAY
2767: PPUSH
2768: LD_VAR 0 3
2772: PPUSH
2773: CALL_OW 1
2777: ST_TO_ADDR
2778: GO 3042
// begin tmp := arr ;
2780: LD_ADDR_VAR 0 6
2784: PUSH
2785: LD_VAR 0 1
2789: ST_TO_ADDR
// s_arr := [ tmp ] ;
2790: LD_ADDR_VAR 0 7
2794: PUSH
2795: LD_VAR 0 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: ST_TO_ADDR
// for i = 1 to pos - 1 do
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_VAR 0 2
2817: PUSH
2818: LD_INT 1
2820: MINUS
2821: PUSH
2822: FOR_TO
2823: IFFALSE 2868
// begin tmp := tmp [ pos [ i ] ] ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 6
2834: PUSH
2835: LD_VAR 0 2
2839: PUSH
2840: LD_VAR 0 5
2844: ARRAY
2845: ARRAY
2846: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2847: LD_ADDR_VAR 0 7
2851: PUSH
2852: LD_VAR 0 7
2856: PUSH
2857: LD_VAR 0 6
2861: PUSH
2862: EMPTY
2863: LIST
2864: ADD
2865: ST_TO_ADDR
// end ;
2866: GO 2822
2868: POP
2869: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2870: LD_ADDR_VAR 0 6
2874: PUSH
2875: LD_VAR 0 6
2879: PPUSH
2880: LD_VAR 0 2
2884: PUSH
2885: LD_VAR 0 2
2889: ARRAY
2890: PPUSH
2891: LD_VAR 0 3
2895: PPUSH
2896: CALL_OW 1
2900: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2901: LD_ADDR_VAR 0 7
2905: PUSH
2906: LD_VAR 0 7
2910: PPUSH
2911: LD_VAR 0 7
2915: PPUSH
2916: LD_VAR 0 6
2920: PPUSH
2921: CALL_OW 1
2925: ST_TO_ADDR
// for i = s_arr downto 2 do
2926: LD_ADDR_VAR 0 5
2930: PUSH
2931: DOUBLE
2932: LD_VAR 0 7
2936: INC
2937: ST_TO_ADDR
2938: LD_INT 2
2940: PUSH
2941: FOR_DOWNTO
2942: IFFALSE 3026
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2944: LD_ADDR_VAR 0 6
2948: PUSH
2949: LD_VAR 0 7
2953: PUSH
2954: LD_VAR 0 5
2958: PUSH
2959: LD_INT 1
2961: MINUS
2962: ARRAY
2963: PPUSH
2964: LD_VAR 0 2
2968: PUSH
2969: LD_VAR 0 5
2973: PUSH
2974: LD_INT 1
2976: MINUS
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 7
2983: PUSH
2984: LD_VAR 0 5
2988: ARRAY
2989: PPUSH
2990: CALL_OW 1
2994: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
2995: LD_ADDR_VAR 0 7
2999: PUSH
3000: LD_VAR 0 7
3004: PPUSH
3005: LD_VAR 0 5
3009: PUSH
3010: LD_INT 1
3012: MINUS
3013: PPUSH
3014: LD_VAR 0 6
3018: PPUSH
3019: CALL_OW 1
3023: ST_TO_ADDR
// end ;
3024: GO 2941
3026: POP
3027: POP
// result := s_arr [ 1 ] ;
3028: LD_ADDR_VAR 0 4
3032: PUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: ST_TO_ADDR
// end ; end ;
3042: LD_VAR 0 4
3046: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3047: LD_INT 0
3049: PPUSH
3050: PPUSH
// if not list then
3051: LD_VAR 0 1
3055: NOT
3056: IFFALSE 3060
// exit ;
3058: GO 3151
// i := list [ pos1 ] ;
3060: LD_ADDR_VAR 0 5
3064: PUSH
3065: LD_VAR 0 1
3069: PUSH
3070: LD_VAR 0 2
3074: ARRAY
3075: ST_TO_ADDR
// if not i then
3076: LD_VAR 0 5
3080: NOT
3081: IFFALSE 3085
// exit ;
3083: GO 3151
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3085: LD_ADDR_VAR 0 1
3089: PUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_VAR 0 1
3104: PUSH
3105: LD_VAR 0 3
3109: ARRAY
3110: PPUSH
3111: CALL_OW 1
3115: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 1
3125: PPUSH
3126: LD_VAR 0 3
3130: PPUSH
3131: LD_VAR 0 5
3135: PPUSH
3136: CALL_OW 1
3140: ST_TO_ADDR
// result := list ;
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_VAR 0 1
3150: ST_TO_ADDR
// end ;
3151: LD_VAR 0 4
3155: RET
// export function Add ( list , pos , val ) ; begin
3156: LD_INT 0
3158: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3159: LD_ADDR_VAR 0 4
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_VAR 0 3
3178: PPUSH
3179: CALL 2721 0 3
3183: ST_TO_ADDR
3184: LD_VAR 0 4
3188: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3189: LD_INT 0
3191: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3192: LD_ADDR_VAR 0 5
3196: PUSH
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL_OW 250
3206: PPUSH
3207: LD_VAR 0 1
3211: PPUSH
3212: CALL_OW 251
3216: PPUSH
3217: LD_VAR 0 2
3221: PPUSH
3222: LD_VAR 0 3
3226: PPUSH
3227: LD_VAR 0 4
3231: PPUSH
3232: CALL 3242 0 5
3236: ST_TO_ADDR
// end ;
3237: LD_VAR 0 5
3241: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
// if not list then
3248: LD_VAR 0 3
3252: NOT
3253: IFFALSE 3257
// exit ;
3255: GO 3645
// result := [ ] ;
3257: LD_ADDR_VAR 0 6
3261: PUSH
3262: EMPTY
3263: ST_TO_ADDR
// for i in list do
3264: LD_ADDR_VAR 0 7
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3477
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3277: LD_ADDR_VAR 0 9
3281: PUSH
3282: LD_VAR 0 7
3286: PPUSH
3287: LD_VAR 0 1
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: CALL_OW 297
3301: ST_TO_ADDR
// if not result then
3302: LD_VAR 0 6
3306: NOT
3307: IFFALSE 3333
// result := [ [ i , tmp ] ] else
3309: LD_ADDR_VAR 0 6
3313: PUSH
3314: LD_VAR 0 7
3318: PUSH
3319: LD_VAR 0 9
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: ST_TO_ADDR
3331: GO 3475
// begin if result [ result ] [ 2 ] < tmp then
3333: LD_VAR 0 6
3337: PUSH
3338: LD_VAR 0 6
3342: ARRAY
3343: PUSH
3344: LD_INT 2
3346: ARRAY
3347: PUSH
3348: LD_VAR 0 9
3352: LESS
3353: IFFALSE 3395
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3355: LD_ADDR_VAR 0 6
3359: PUSH
3360: LD_VAR 0 6
3364: PPUSH
3365: LD_VAR 0 6
3369: PUSH
3370: LD_INT 1
3372: PLUS
3373: PPUSH
3374: LD_VAR 0 7
3378: PUSH
3379: LD_VAR 0 9
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 2
3392: ST_TO_ADDR
3393: GO 3475
// for j = 1 to result do
3395: LD_ADDR_VAR 0 8
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_VAR 0 6
3409: PUSH
3410: FOR_TO
3411: IFFALSE 3473
// begin if tmp < result [ j ] [ 2 ] then
3413: LD_VAR 0 9
3417: PUSH
3418: LD_VAR 0 6
3422: PUSH
3423: LD_VAR 0 8
3427: ARRAY
3428: PUSH
3429: LD_INT 2
3431: ARRAY
3432: LESS
3433: IFFALSE 3471
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3435: LD_ADDR_VAR 0 6
3439: PUSH
3440: LD_VAR 0 6
3444: PPUSH
3445: LD_VAR 0 8
3449: PPUSH
3450: LD_VAR 0 7
3454: PUSH
3455: LD_VAR 0 9
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 2
3468: ST_TO_ADDR
// break ;
3469: GO 3473
// end ; end ;
3471: GO 3410
3473: POP
3474: POP
// end ; end ;
3475: GO 3274
3477: POP
3478: POP
// if result and not asc then
3479: LD_VAR 0 6
3483: PUSH
3484: LD_VAR 0 4
3488: NOT
3489: AND
3490: IFFALSE 3565
// begin tmp := result ;
3492: LD_ADDR_VAR 0 9
3496: PUSH
3497: LD_VAR 0 6
3501: ST_TO_ADDR
// for i = tmp downto 1 do
3502: LD_ADDR_VAR 0 7
3506: PUSH
3507: DOUBLE
3508: LD_VAR 0 9
3512: INC
3513: ST_TO_ADDR
3514: LD_INT 1
3516: PUSH
3517: FOR_DOWNTO
3518: IFFALSE 3563
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3520: LD_ADDR_VAR 0 6
3524: PUSH
3525: LD_VAR 0 6
3529: PPUSH
3530: LD_VAR 0 9
3534: PUSH
3535: LD_VAR 0 7
3539: MINUS
3540: PUSH
3541: LD_INT 1
3543: PLUS
3544: PPUSH
3545: LD_VAR 0 9
3549: PUSH
3550: LD_VAR 0 7
3554: ARRAY
3555: PPUSH
3556: CALL_OW 1
3560: ST_TO_ADDR
3561: GO 3517
3563: POP
3564: POP
// end ; tmp := [ ] ;
3565: LD_ADDR_VAR 0 9
3569: PUSH
3570: EMPTY
3571: ST_TO_ADDR
// if mode then
3572: LD_VAR 0 5
3576: IFFALSE 3645
// begin for i = 1 to result do
3578: LD_ADDR_VAR 0 7
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_VAR 0 6
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3633
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3596: LD_ADDR_VAR 0 9
3600: PUSH
3601: LD_VAR 0 9
3605: PPUSH
3606: LD_VAR 0 7
3610: PPUSH
3611: LD_VAR 0 6
3615: PUSH
3616: LD_VAR 0 7
3620: ARRAY
3621: PUSH
3622: LD_INT 1
3624: ARRAY
3625: PPUSH
3626: CALL_OW 1
3630: ST_TO_ADDR
3631: GO 3593
3633: POP
3634: POP
// result := tmp ;
3635: LD_ADDR_VAR 0 6
3639: PUSH
3640: LD_VAR 0 9
3644: ST_TO_ADDR
// end ; end ;
3645: LD_VAR 0 6
3649: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
3656: PPUSH
3657: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3658: LD_ADDR_VAR 0 5
3662: PUSH
3663: LD_INT 0
3665: PUSH
3666: LD_INT 0
3668: PUSH
3669: LD_INT 0
3671: PUSH
3672: EMPTY
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: ST_TO_ADDR
// if not x or not y then
3680: LD_VAR 0 2
3684: NOT
3685: PUSH
3686: LD_VAR 0 3
3690: NOT
3691: OR
3692: IFFALSE 3696
// exit ;
3694: GO 5324
// if not range then
3696: LD_VAR 0 4
3700: NOT
3701: IFFALSE 3711
// range := 10 ;
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: LD_INT 10
3710: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3711: LD_ADDR_VAR 0 8
3715: PUSH
3716: LD_INT 81
3718: PUSH
3719: LD_VAR 0 1
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 92
3730: PUSH
3731: LD_VAR 0 2
3735: PUSH
3736: LD_VAR 0 3
3740: PUSH
3741: LD_VAR 0 4
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PPUSH
3756: CALL_OW 69
3760: ST_TO_ADDR
// if not tmp then
3761: LD_VAR 0 8
3765: NOT
3766: IFFALSE 3770
// exit ;
3768: GO 5324
// for i in tmp do
3770: LD_ADDR_VAR 0 6
3774: PUSH
3775: LD_VAR 0 8
3779: PUSH
3780: FOR_IN
3781: IFFALSE 5299
// begin points := [ 0 , 0 , 0 ] ;
3783: LD_ADDR_VAR 0 9
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: LD_INT 0
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: ST_TO_ADDR
// bpoints := 1 ;
3802: LD_ADDR_VAR 0 10
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3810: LD_VAR 0 6
3814: PPUSH
3815: CALL_OW 247
3819: PUSH
3820: LD_INT 1
3822: DOUBLE
3823: EQUAL
3824: IFTRUE 3828
3826: GO 4406
3828: POP
// begin if GetClass ( i ) = 1 then
3829: LD_VAR 0 6
3833: PPUSH
3834: CALL_OW 257
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3863
// points := [ 10 , 5 , 3 ] ;
3844: LD_ADDR_VAR 0 9
3848: PUSH
3849: LD_INT 10
3851: PUSH
3852: LD_INT 5
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3863: LD_VAR 0 6
3867: PPUSH
3868: CALL_OW 257
3872: PUSH
3873: LD_INT 2
3875: PUSH
3876: LD_INT 3
3878: PUSH
3879: LD_INT 4
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: IN
3887: IFFALSE 3908
// points := [ 3 , 2 , 1 ] ;
3889: LD_ADDR_VAR 0 9
3893: PUSH
3894: LD_INT 3
3896: PUSH
3897: LD_INT 2
3899: PUSH
3900: LD_INT 1
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3908: LD_VAR 0 6
3912: PPUSH
3913: CALL_OW 257
3917: PUSH
3918: LD_INT 5
3920: EQUAL
3921: IFFALSE 3942
// points := [ 130 , 5 , 2 ] ;
3923: LD_ADDR_VAR 0 9
3927: PUSH
3928: LD_INT 130
3930: PUSH
3931: LD_INT 5
3933: PUSH
3934: LD_INT 2
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3942: LD_VAR 0 6
3946: PPUSH
3947: CALL_OW 257
3951: PUSH
3952: LD_INT 8
3954: EQUAL
3955: IFFALSE 3976
// points := [ 35 , 35 , 30 ] ;
3957: LD_ADDR_VAR 0 9
3961: PUSH
3962: LD_INT 35
3964: PUSH
3965: LD_INT 35
3967: PUSH
3968: LD_INT 30
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3976: LD_VAR 0 6
3980: PPUSH
3981: CALL_OW 257
3985: PUSH
3986: LD_INT 9
3988: EQUAL
3989: IFFALSE 4010
// points := [ 20 , 55 , 40 ] ;
3991: LD_ADDR_VAR 0 9
3995: PUSH
3996: LD_INT 20
3998: PUSH
3999: LD_INT 55
4001: PUSH
4002: LD_INT 40
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4010: LD_VAR 0 6
4014: PPUSH
4015: CALL_OW 257
4019: PUSH
4020: LD_INT 12
4022: PUSH
4023: LD_INT 16
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: IN
4030: IFFALSE 4051
// points := [ 5 , 3 , 2 ] ;
4032: LD_ADDR_VAR 0 9
4036: PUSH
4037: LD_INT 5
4039: PUSH
4040: LD_INT 3
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4051: LD_VAR 0 6
4055: PPUSH
4056: CALL_OW 257
4060: PUSH
4061: LD_INT 17
4063: EQUAL
4064: IFFALSE 4085
// points := [ 100 , 50 , 75 ] ;
4066: LD_ADDR_VAR 0 9
4070: PUSH
4071: LD_INT 100
4073: PUSH
4074: LD_INT 50
4076: PUSH
4077: LD_INT 75
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4085: LD_VAR 0 6
4089: PPUSH
4090: CALL_OW 257
4094: PUSH
4095: LD_INT 15
4097: EQUAL
4098: IFFALSE 4119
// points := [ 10 , 5 , 3 ] ;
4100: LD_ADDR_VAR 0 9
4104: PUSH
4105: LD_INT 10
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 3
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4119: LD_VAR 0 6
4123: PPUSH
4124: CALL_OW 257
4128: PUSH
4129: LD_INT 14
4131: EQUAL
4132: IFFALSE 4153
// points := [ 10 , 0 , 0 ] ;
4134: LD_ADDR_VAR 0 9
4138: PUSH
4139: LD_INT 10
4141: PUSH
4142: LD_INT 0
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4153: LD_VAR 0 6
4157: PPUSH
4158: CALL_OW 257
4162: PUSH
4163: LD_INT 11
4165: EQUAL
4166: IFFALSE 4187
// points := [ 30 , 10 , 5 ] ;
4168: LD_ADDR_VAR 0 9
4172: PUSH
4173: LD_INT 30
4175: PUSH
4176: LD_INT 10
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4187: LD_VAR 0 1
4191: PPUSH
4192: LD_INT 5
4194: PPUSH
4195: CALL_OW 321
4199: PUSH
4200: LD_INT 2
4202: EQUAL
4203: IFFALSE 4220
// bpoints := bpoints * 1.8 ;
4205: LD_ADDR_VAR 0 10
4209: PUSH
4210: LD_VAR 0 10
4214: PUSH
4215: LD_REAL  1.80000000000000E+0000
4218: MUL
4219: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4220: LD_VAR 0 6
4224: PPUSH
4225: CALL_OW 257
4229: PUSH
4230: LD_INT 1
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: IN
4248: PUSH
4249: LD_VAR 0 1
4253: PPUSH
4254: LD_INT 51
4256: PPUSH
4257: CALL_OW 321
4261: PUSH
4262: LD_INT 2
4264: EQUAL
4265: AND
4266: IFFALSE 4283
// bpoints := bpoints * 1.2 ;
4268: LD_ADDR_VAR 0 10
4272: PUSH
4273: LD_VAR 0 10
4277: PUSH
4278: LD_REAL  1.20000000000000E+0000
4281: MUL
4282: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4283: LD_VAR 0 6
4287: PPUSH
4288: CALL_OW 257
4292: PUSH
4293: LD_INT 5
4295: PUSH
4296: LD_INT 7
4298: PUSH
4299: LD_INT 9
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: IN
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 52
4315: PPUSH
4316: CALL_OW 321
4320: PUSH
4321: LD_INT 2
4323: EQUAL
4324: AND
4325: IFFALSE 4342
// bpoints := bpoints * 1.5 ;
4327: LD_ADDR_VAR 0 10
4331: PUSH
4332: LD_VAR 0 10
4336: PUSH
4337: LD_REAL  1.50000000000000E+0000
4340: MUL
4341: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4342: LD_VAR 0 1
4346: PPUSH
4347: LD_INT 66
4349: PPUSH
4350: CALL_OW 321
4354: PUSH
4355: LD_INT 2
4357: EQUAL
4358: IFFALSE 4375
// bpoints := bpoints * 1.1 ;
4360: LD_ADDR_VAR 0 10
4364: PUSH
4365: LD_VAR 0 10
4369: PUSH
4370: LD_REAL  1.10000000000000E+0000
4373: MUL
4374: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4375: LD_ADDR_VAR 0 10
4379: PUSH
4380: LD_VAR 0 10
4384: PUSH
4385: LD_VAR 0 6
4389: PPUSH
4390: LD_INT 1
4392: PPUSH
4393: CALL_OW 259
4397: PUSH
4398: LD_REAL  1.15000000000000E+0000
4401: MUL
4402: MUL
4403: ST_TO_ADDR
// end ; unit_vehicle :
4404: GO 5228
4406: LD_INT 2
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 5216
4414: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4415: LD_VAR 0 6
4419: PPUSH
4420: CALL_OW 264
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: LD_INT 42
4430: PUSH
4431: LD_INT 24
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: IN
4439: IFFALSE 4460
// points := [ 25 , 5 , 3 ] ;
4441: LD_ADDR_VAR 0 9
4445: PUSH
4446: LD_INT 25
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4460: LD_VAR 0 6
4464: PPUSH
4465: CALL_OW 264
4469: PUSH
4470: LD_INT 4
4472: PUSH
4473: LD_INT 43
4475: PUSH
4476: LD_INT 25
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: IN
4484: IFFALSE 4505
// points := [ 40 , 15 , 5 ] ;
4486: LD_ADDR_VAR 0 9
4490: PUSH
4491: LD_INT 40
4493: PUSH
4494: LD_INT 15
4496: PUSH
4497: LD_INT 5
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4505: LD_VAR 0 6
4509: PPUSH
4510: CALL_OW 264
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: LD_INT 23
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: IN
4525: IFFALSE 4546
// points := [ 7 , 25 , 8 ] ;
4527: LD_ADDR_VAR 0 9
4531: PUSH
4532: LD_INT 7
4534: PUSH
4535: LD_INT 25
4537: PUSH
4538: LD_INT 8
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4546: LD_VAR 0 6
4550: PPUSH
4551: CALL_OW 264
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 44
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: IN
4570: IFFALSE 4591
// points := [ 14 , 50 , 16 ] ;
4572: LD_ADDR_VAR 0 9
4576: PUSH
4577: LD_INT 14
4579: PUSH
4580: LD_INT 50
4582: PUSH
4583: LD_INT 16
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4591: LD_VAR 0 6
4595: PPUSH
4596: CALL_OW 264
4600: PUSH
4601: LD_INT 6
4603: PUSH
4604: LD_INT 46
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: IN
4611: IFFALSE 4632
// points := [ 32 , 120 , 70 ] ;
4613: LD_ADDR_VAR 0 9
4617: PUSH
4618: LD_INT 32
4620: PUSH
4621: LD_INT 120
4623: PUSH
4624: LD_INT 70
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4632: LD_VAR 0 6
4636: PPUSH
4637: CALL_OW 264
4641: PUSH
4642: LD_INT 7
4644: PUSH
4645: LD_INT 28
4647: PUSH
4648: LD_INT 45
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: IN
4656: IFFALSE 4677
// points := [ 35 , 20 , 45 ] ;
4658: LD_ADDR_VAR 0 9
4662: PUSH
4663: LD_INT 35
4665: PUSH
4666: LD_INT 20
4668: PUSH
4669: LD_INT 45
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4677: LD_VAR 0 6
4681: PPUSH
4682: CALL_OW 264
4686: PUSH
4687: LD_INT 47
4689: PUSH
4690: EMPTY
4691: LIST
4692: IN
4693: IFFALSE 4714
// points := [ 67 , 45 , 75 ] ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_INT 67
4702: PUSH
4703: LD_INT 45
4705: PUSH
4706: LD_INT 75
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4714: LD_VAR 0 6
4718: PPUSH
4719: CALL_OW 264
4723: PUSH
4724: LD_INT 26
4726: PUSH
4727: EMPTY
4728: LIST
4729: IN
4730: IFFALSE 4751
// points := [ 120 , 30 , 80 ] ;
4732: LD_ADDR_VAR 0 9
4736: PUSH
4737: LD_INT 120
4739: PUSH
4740: LD_INT 30
4742: PUSH
4743: LD_INT 80
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4751: LD_VAR 0 6
4755: PPUSH
4756: CALL_OW 264
4760: PUSH
4761: LD_INT 22
4763: PUSH
4764: EMPTY
4765: LIST
4766: IN
4767: IFFALSE 4788
// points := [ 40 , 1 , 1 ] ;
4769: LD_ADDR_VAR 0 9
4773: PUSH
4774: LD_INT 40
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4788: LD_VAR 0 6
4792: PPUSH
4793: CALL_OW 264
4797: PUSH
4798: LD_INT 29
4800: PUSH
4801: EMPTY
4802: LIST
4803: IN
4804: IFFALSE 4825
// points := [ 70 , 200 , 400 ] ;
4806: LD_ADDR_VAR 0 9
4810: PUSH
4811: LD_INT 70
4813: PUSH
4814: LD_INT 200
4816: PUSH
4817: LD_INT 400
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4825: LD_VAR 0 6
4829: PPUSH
4830: CALL_OW 264
4834: PUSH
4835: LD_INT 14
4837: PUSH
4838: LD_INT 53
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: IN
4845: IFFALSE 4866
// points := [ 40 , 10 , 20 ] ;
4847: LD_ADDR_VAR 0 9
4851: PUSH
4852: LD_INT 40
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 20
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4866: LD_VAR 0 6
4870: PPUSH
4871: CALL_OW 264
4875: PUSH
4876: LD_INT 9
4878: PUSH
4879: EMPTY
4880: LIST
4881: IN
4882: IFFALSE 4903
// points := [ 5 , 70 , 20 ] ;
4884: LD_ADDR_VAR 0 9
4888: PUSH
4889: LD_INT 5
4891: PUSH
4892: LD_INT 70
4894: PUSH
4895: LD_INT 20
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4903: LD_VAR 0 6
4907: PPUSH
4908: CALL_OW 264
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: IN
4919: IFFALSE 4940
// points := [ 35 , 110 , 70 ] ;
4921: LD_ADDR_VAR 0 9
4925: PUSH
4926: LD_INT 35
4928: PUSH
4929: LD_INT 110
4931: PUSH
4932: LD_INT 70
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 265
4949: PUSH
4950: LD_INT 25
4952: EQUAL
4953: IFFALSE 4974
// points := [ 80 , 65 , 100 ] ;
4955: LD_ADDR_VAR 0 9
4959: PUSH
4960: LD_INT 80
4962: PUSH
4963: LD_INT 65
4965: PUSH
4966: LD_INT 100
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4974: LD_VAR 0 6
4978: PPUSH
4979: CALL_OW 263
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 5022
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
4989: LD_ADDR_VAR 0 10
4993: PUSH
4994: LD_VAR 0 10
4998: PUSH
4999: LD_VAR 0 6
5003: PPUSH
5004: CALL_OW 311
5008: PPUSH
5009: LD_INT 3
5011: PPUSH
5012: CALL_OW 259
5016: PUSH
5017: LD_INT 4
5019: MUL
5020: MUL
5021: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5022: LD_VAR 0 6
5026: PPUSH
5027: CALL_OW 263
5031: PUSH
5032: LD_INT 2
5034: EQUAL
5035: IFFALSE 5086
// begin j := IsControledBy ( i ) ;
5037: LD_ADDR_VAR 0 7
5041: PUSH
5042: LD_VAR 0 6
5046: PPUSH
5047: CALL_OW 312
5051: ST_TO_ADDR
// if j then
5052: LD_VAR 0 7
5056: IFFALSE 5086
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5058: LD_ADDR_VAR 0 10
5062: PUSH
5063: LD_VAR 0 10
5067: PUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: LD_INT 3
5075: PPUSH
5076: CALL_OW 259
5080: PUSH
5081: LD_INT 3
5083: MUL
5084: MUL
5085: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5086: LD_VAR 0 6
5090: PPUSH
5091: CALL_OW 264
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 46
5104: PUSH
5105: LD_INT 44
5107: PUSH
5108: LD_INT 47
5110: PUSH
5111: LD_INT 45
5113: PUSH
5114: LD_INT 28
5116: PUSH
5117: LD_INT 7
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 29
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: IN
5138: PUSH
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 52
5146: PPUSH
5147: CALL_OW 321
5151: PUSH
5152: LD_INT 2
5154: EQUAL
5155: AND
5156: IFFALSE 5173
// bpoints := bpoints * 1.2 ;
5158: LD_ADDR_VAR 0 10
5162: PUSH
5163: LD_VAR 0 10
5167: PUSH
5168: LD_REAL  1.20000000000000E+0000
5171: MUL
5172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5173: LD_VAR 0 6
5177: PPUSH
5178: CALL_OW 264
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: LD_INT 46
5188: PUSH
5189: LD_INT 47
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: IN
5197: IFFALSE 5214
// bpoints := bpoints * 1.2 ;
5199: LD_ADDR_VAR 0 10
5203: PUSH
5204: LD_VAR 0 10
5208: PUSH
5209: LD_REAL  1.20000000000000E+0000
5212: MUL
5213: ST_TO_ADDR
// end ; unit_building :
5214: GO 5228
5216: LD_INT 3
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5227
5224: POP
// ; end ;
5225: GO 5228
5227: POP
// for j = 1 to 3 do
5228: LD_ADDR_VAR 0 7
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 3
5240: PUSH
5241: FOR_TO
5242: IFFALSE 5295
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5244: LD_ADDR_VAR 0 5
5248: PUSH
5249: LD_VAR 0 5
5253: PPUSH
5254: LD_VAR 0 7
5258: PPUSH
5259: LD_VAR 0 5
5263: PUSH
5264: LD_VAR 0 7
5268: ARRAY
5269: PUSH
5270: LD_VAR 0 9
5274: PUSH
5275: LD_VAR 0 7
5279: ARRAY
5280: PUSH
5281: LD_VAR 0 10
5285: MUL
5286: PLUS
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
5293: GO 5241
5295: POP
5296: POP
// end ;
5297: GO 3780
5299: POP
5300: POP
// result := Replace ( result , 4 , tmp ) ;
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: LD_VAR 0 5
5310: PPUSH
5311: LD_INT 4
5313: PPUSH
5314: LD_VAR 0 8
5318: PPUSH
5319: CALL_OW 1
5323: ST_TO_ADDR
// end ;
5324: LD_VAR 0 5
5328: RET
// export function DangerAtRange ( unit , range ) ; begin
5329: LD_INT 0
5331: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5332: LD_ADDR_VAR 0 3
5336: PUSH
5337: LD_VAR 0 1
5341: PPUSH
5342: CALL_OW 255
5346: PPUSH
5347: LD_VAR 0 1
5351: PPUSH
5352: CALL_OW 250
5356: PPUSH
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 251
5366: PPUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: CALL 3650 0 4
5376: ST_TO_ADDR
// end ;
5377: LD_VAR 0 3
5381: RET
// export function IsExtension ( b ) ; begin
5382: LD_INT 0
5384: PPUSH
// result := false ;
5385: LD_ADDR_VAR 0 2
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5393: LD_VAR 0 1
5397: PPUSH
5398: CALL_OW 266
5402: PUSH
5403: LD_INT 23
5405: PUSH
5406: LD_INT 20
5408: PUSH
5409: LD_INT 22
5411: PUSH
5412: LD_INT 17
5414: PUSH
5415: LD_INT 24
5417: PUSH
5418: LD_INT 21
5420: PUSH
5421: LD_INT 19
5423: PUSH
5424: LD_INT 16
5426: PUSH
5427: LD_INT 25
5429: PUSH
5430: LD_INT 18
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: IN
5445: IFFALSE 5455
// result := true ;
5447: LD_ADDR_VAR 0 2
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// end ;
5455: LD_VAR 0 2
5459: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// result := [ ] ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: EMPTY
5471: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5472: LD_ADDR_VAR 0 3
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PPUSH
5487: CALL_OW 69
5491: ST_TO_ADDR
// if not tmp then
5492: LD_VAR 0 3
5496: NOT
5497: IFFALSE 5501
// exit ;
5499: GO 5551
// for i in tmp do
5501: LD_ADDR_VAR 0 4
5505: PUSH
5506: LD_VAR 0 3
5510: PUSH
5511: FOR_IN
5512: IFFALSE 5549
// if GetBase ( i ) = base then
5514: LD_VAR 0 4
5518: PPUSH
5519: CALL_OW 274
5523: PUSH
5524: LD_VAR 0 1
5528: EQUAL
5529: IFFALSE 5547
// result := result ^ i ;
5531: LD_ADDR_VAR 0 2
5535: PUSH
5536: LD_VAR 0 2
5540: PUSH
5541: LD_VAR 0 4
5545: ADD
5546: ST_TO_ADDR
5547: GO 5511
5549: POP
5550: POP
// end ;
5551: LD_VAR 0 2
5555: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
// if BuildingStatus ( b ) = bs_build then
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 461
5569: PUSH
5570: LD_INT 1
5572: EQUAL
5573: IFFALSE 5633
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_STRING h
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 250
5592: PUSH
5593: LD_VAR 0 2
5597: PPUSH
5598: CALL_OW 251
5602: PUSH
5603: LD_VAR 0 2
5607: PUSH
5608: LD_INT 0
5610: PUSH
5611: LD_INT 0
5613: PUSH
5614: LD_INT 0
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: EMPTY
5627: LIST
5628: PPUSH
5629: CALL_OW 446
// end ;
5633: LD_VAR 0 3
5637: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5638: LD_INT 0
5640: PPUSH
5641: PPUSH
5642: PPUSH
5643: PPUSH
5644: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5645: LD_VAR 0 1
5649: NOT
5650: PUSH
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 263
5660: PUSH
5661: LD_INT 2
5663: EQUAL
5664: NOT
5665: OR
5666: IFFALSE 5670
// exit ;
5668: GO 5942
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5670: LD_ADDR_VAR 0 6
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: LD_INT 30
5697: PUSH
5698: LD_INT 36
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 34
5707: PUSH
5708: LD_INT 31
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PPUSH
5724: CALL_OW 69
5728: ST_TO_ADDR
// if not tmp then
5729: LD_VAR 0 6
5733: NOT
5734: IFFALSE 5738
// exit ;
5736: GO 5942
// result := [ ] ;
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: EMPTY
5744: ST_TO_ADDR
// for i in tmp do
5745: LD_ADDR_VAR 0 3
5749: PUSH
5750: LD_VAR 0 6
5754: PUSH
5755: FOR_IN
5756: IFFALSE 5804
// begin t := UnitsInside ( i ) ;
5758: LD_ADDR_VAR 0 4
5762: PUSH
5763: LD_VAR 0 3
5767: PPUSH
5768: CALL_OW 313
5772: ST_TO_ADDR
// if t then
5773: LD_VAR 0 4
5777: IFFALSE 5802
// result := Insert ( result , 1 , t ) ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_VAR 0 2
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 4
5796: PPUSH
5797: CALL_OW 2
5801: ST_TO_ADDR
// end ;
5802: GO 5755
5804: POP
5805: POP
// if not result then
5806: LD_VAR 0 2
5810: NOT
5811: IFFALSE 5815
// exit ;
5813: GO 5942
// mech := 0 ;
5815: LD_ADDR_VAR 0 5
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// for i in result do
5823: LD_ADDR_VAR 0 3
5827: PUSH
5828: LD_VAR 0 2
5832: PUSH
5833: FOR_IN
5834: IFFALSE 5916
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5836: LD_ADDR_VAR 0 4
5840: PUSH
5841: LD_VAR 0 3
5845: PPUSH
5846: LD_INT 3
5848: PPUSH
5849: CALL_OW 259
5853: PUSH
5854: LD_VAR 0 3
5858: PPUSH
5859: CALL_OW 432
5863: MINUS
5864: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5865: LD_VAR 0 4
5869: PUSH
5870: LD_VAR 0 5
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: LD_INT 3
5881: PPUSH
5882: CALL_OW 259
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PPUSH
5896: CALL_OW 432
5900: MINUS
5901: GREATEREQUAL
5902: IFFALSE 5914
// mech := i ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: LD_VAR 0 3
5913: ST_TO_ADDR
// end ;
5914: GO 5833
5916: POP
5917: POP
// if mech then
5918: LD_VAR 0 5
5922: IFFALSE 5942
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5924: LD_VAR 0 1
5928: PPUSH
5929: LD_VAR 0 5
5933: PUSH
5934: LD_INT 1
5936: ARRAY
5937: PPUSH
5938: CALL_OW 135
// end ;
5942: LD_VAR 0 2
5946: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
// result := [ ] ;
5961: LD_ADDR_VAR 0 6
5965: PUSH
5966: EMPTY
5967: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 266
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: IN
5988: NOT
5989: IFFALSE 5993
// exit ;
5991: GO 7112
// if name then
5993: LD_VAR 0 2
5997: IFFALSE 6013
// SetBName ( base_dep , name ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 500
// base := GetBase ( base_dep ) ;
6013: LD_ADDR_VAR 0 14
6017: PUSH
6018: LD_VAR 0 1
6022: PPUSH
6023: CALL_OW 274
6027: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6028: LD_ADDR_VAR 0 15
6032: PUSH
6033: LD_VAR 0 1
6037: PPUSH
6038: CALL_OW 255
6042: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6043: LD_ADDR_VAR 0 16
6047: PUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 248
6057: ST_TO_ADDR
// if sources then
6058: LD_VAR 0 4
6062: IFFALSE 6109
// for i = 1 to 3 do
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 3
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6107
// AddResourceType ( base , i , sources [ i ] ) ;
6080: LD_VAR 0 14
6084: PPUSH
6085: LD_VAR 0 7
6089: PPUSH
6090: LD_VAR 0 4
6094: PUSH
6095: LD_VAR 0 7
6099: ARRAY
6100: PPUSH
6101: CALL_OW 276
6105: GO 6077
6107: POP
6108: POP
// buildings := GetBaseBuildings ( base ) ;
6109: LD_ADDR_VAR 0 17
6113: PUSH
6114: LD_VAR 0 14
6118: PPUSH
6119: CALL 5460 0 1
6123: ST_TO_ADDR
// InitHc ;
6124: CALL_OW 19
// InitUc ;
6128: CALL_OW 18
// uc_side := side ;
6132: LD_ADDR_OWVAR 20
6136: PUSH
6137: LD_VAR 0 15
6141: ST_TO_ADDR
// uc_nation := nation ;
6142: LD_ADDR_OWVAR 21
6146: PUSH
6147: LD_VAR 0 16
6151: ST_TO_ADDR
// if buildings then
6152: LD_VAR 0 17
6156: IFFALSE 6971
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6158: LD_VAR 0 17
6162: PPUSH
6163: LD_INT 2
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 32
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 30
6178: PUSH
6179: LD_INT 33
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 72
6195: IFFALSE 6278
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6197: LD_ADDR_VAR 0 7
6201: PUSH
6202: LD_VAR 0 17
6206: PPUSH
6207: LD_INT 2
6209: PUSH
6210: LD_INT 30
6212: PUSH
6213: LD_INT 32
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 30
6222: PUSH
6223: LD_INT 33
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 72
6239: PUSH
6240: FOR_IN
6241: IFFALSE 6276
// begin if not GetBWeapon ( i ) then
6243: LD_VAR 0 7
6247: PPUSH
6248: CALL_OW 269
6252: NOT
6253: IFFALSE 6274
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6255: LD_VAR 0 7
6259: PPUSH
6260: LD_VAR 0 7
6264: PPUSH
6265: CALL 7117 0 1
6269: PPUSH
6270: CALL_OW 431
// end ;
6274: GO 6240
6276: POP
6277: POP
// end ; for i = 1 to personel do
6278: LD_ADDR_VAR 0 7
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_VAR 0 5
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6951
// begin if i > 4 then
6296: LD_VAR 0 7
6300: PUSH
6301: LD_INT 4
6303: GREATER
6304: IFFALSE 6308
// break ;
6306: GO 6951
// case i of 1 :
6308: LD_VAR 0 7
6312: PUSH
6313: LD_INT 1
6315: DOUBLE
6316: EQUAL
6317: IFTRUE 6321
6319: GO 6394
6321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6322: LD_ADDR_VAR 0 11
6326: PUSH
6327: LD_VAR 0 17
6331: PPUSH
6332: LD_INT 22
6334: PUSH
6335: LD_VAR 0 15
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: LD_INT 30
6349: PUSH
6350: LD_INT 32
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 30
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 30
6369: PUSH
6370: LD_INT 5
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PPUSH
6387: CALL_OW 72
6391: ST_TO_ADDR
6392: GO 6616
6394: LD_INT 2
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6464
6402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6403: LD_ADDR_VAR 0 11
6407: PUSH
6408: LD_VAR 0 17
6412: PPUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 15
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 30
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 30
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PPUSH
6457: CALL_OW 72
6461: ST_TO_ADDR
6462: GO 6616
6464: LD_INT 3
6466: DOUBLE
6467: EQUAL
6468: IFTRUE 6472
6470: GO 6534
6472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6473: LD_ADDR_VAR 0 11
6477: PUSH
6478: LD_VAR 0 17
6482: PPUSH
6483: LD_INT 22
6485: PUSH
6486: LD_VAR 0 15
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 30
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 30
6510: PUSH
6511: LD_INT 3
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PPUSH
6527: CALL_OW 72
6531: ST_TO_ADDR
6532: GO 6616
6534: LD_INT 4
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6542
6540: GO 6615
6542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6543: LD_ADDR_VAR 0 11
6547: PUSH
6548: LD_VAR 0 17
6552: PPUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 15
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 6
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 30
6580: PUSH
6581: LD_INT 7
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 8
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 72
6612: ST_TO_ADDR
6613: GO 6616
6615: POP
// if not f then
6616: LD_VAR 0 11
6620: NOT
6621: IFFALSE 6625
// continue ;
6623: GO 6293
// x := personel [ i ] ;
6625: LD_ADDR_VAR 0 12
6629: PUSH
6630: LD_VAR 0 5
6634: PUSH
6635: LD_VAR 0 7
6639: ARRAY
6640: ST_TO_ADDR
// if x = - 1 then
6641: LD_VAR 0 12
6645: PUSH
6646: LD_INT 1
6648: NEG
6649: EQUAL
6650: IFFALSE 6772
// begin for j in f do
6652: LD_ADDR_VAR 0 8
6656: PUSH
6657: LD_VAR 0 11
6661: PUSH
6662: FOR_IN
6663: IFFALSE 6768
// repeat PrepareHuman ( false , i , skill ) ;
6665: LD_INT 0
6667: PPUSH
6668: LD_VAR 0 7
6672: PPUSH
6673: LD_VAR 0 3
6677: PPUSH
6678: CALL_OW 380
// un := CreateHuman ;
6682: LD_ADDR_VAR 0 13
6686: PUSH
6687: CALL_OW 44
6691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6692: LD_ADDR_VAR 0 6
6696: PUSH
6697: LD_VAR 0 6
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: LD_VAR 0 13
6709: PPUSH
6710: CALL_OW 2
6714: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6715: LD_VAR 0 13
6719: PPUSH
6720: LD_VAR 0 8
6724: PPUSH
6725: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6729: LD_VAR 0 8
6733: PPUSH
6734: CALL_OW 313
6738: PUSH
6739: LD_INT 6
6741: EQUAL
6742: PUSH
6743: LD_VAR 0 8
6747: PPUSH
6748: CALL_OW 266
6752: PUSH
6753: LD_INT 32
6755: PUSH
6756: LD_INT 31
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: IN
6763: OR
6764: IFFALSE 6665
6766: GO 6662
6768: POP
6769: POP
// end else
6770: GO 6949
// for j = 1 to x do
6772: LD_ADDR_VAR 0 8
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_VAR 0 12
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6947
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6790: LD_VAR 0 11
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 313
6803: PUSH
6804: LD_VAR 0 11
6808: PUSH
6809: LD_INT 1
6811: ARRAY
6812: PPUSH
6813: CALL_OW 266
6817: PUSH
6818: LD_INT 32
6820: PUSH
6821: LD_INT 31
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: IN
6828: AND
6829: PUSH
6830: LD_VAR 0 11
6834: PUSH
6835: LD_INT 1
6837: ARRAY
6838: PPUSH
6839: CALL_OW 313
6843: PUSH
6844: LD_INT 6
6846: EQUAL
6847: OR
6848: IFFALSE 6868
// f := Delete ( f , 1 ) ;
6850: LD_ADDR_VAR 0 11
6854: PUSH
6855: LD_VAR 0 11
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: CALL_OW 3
6867: ST_TO_ADDR
// if not f then
6868: LD_VAR 0 11
6872: NOT
6873: IFFALSE 6877
// break ;
6875: GO 6947
// PrepareHuman ( false , i , skill ) ;
6877: LD_INT 0
6879: PPUSH
6880: LD_VAR 0 7
6884: PPUSH
6885: LD_VAR 0 3
6889: PPUSH
6890: CALL_OW 380
// un := CreateHuman ;
6894: LD_ADDR_VAR 0 13
6898: PUSH
6899: CALL_OW 44
6903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6904: LD_ADDR_VAR 0 6
6908: PUSH
6909: LD_VAR 0 6
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: LD_VAR 0 13
6921: PPUSH
6922: CALL_OW 2
6926: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6927: LD_VAR 0 13
6931: PPUSH
6932: LD_VAR 0 11
6936: PUSH
6937: LD_INT 1
6939: ARRAY
6940: PPUSH
6941: CALL_OW 52
// end ;
6945: GO 6787
6947: POP
6948: POP
// end ;
6949: GO 6293
6951: POP
6952: POP
// result := result ^ buildings ;
6953: LD_ADDR_VAR 0 6
6957: PUSH
6958: LD_VAR 0 6
6962: PUSH
6963: LD_VAR 0 17
6967: ADD
6968: ST_TO_ADDR
// end else
6969: GO 7112
// begin for i = 1 to personel do
6971: LD_ADDR_VAR 0 7
6975: PUSH
6976: DOUBLE
6977: LD_INT 1
6979: DEC
6980: ST_TO_ADDR
6981: LD_VAR 0 5
6985: PUSH
6986: FOR_TO
6987: IFFALSE 7110
// begin if i > 4 then
6989: LD_VAR 0 7
6993: PUSH
6994: LD_INT 4
6996: GREATER
6997: IFFALSE 7001
// break ;
6999: GO 7110
// x := personel [ i ] ;
7001: LD_ADDR_VAR 0 12
7005: PUSH
7006: LD_VAR 0 5
7010: PUSH
7011: LD_VAR 0 7
7015: ARRAY
7016: ST_TO_ADDR
// if x = - 1 then
7017: LD_VAR 0 12
7021: PUSH
7022: LD_INT 1
7024: NEG
7025: EQUAL
7026: IFFALSE 7030
// continue ;
7028: GO 6986
// PrepareHuman ( false , i , skill ) ;
7030: LD_INT 0
7032: PPUSH
7033: LD_VAR 0 7
7037: PPUSH
7038: LD_VAR 0 3
7042: PPUSH
7043: CALL_OW 380
// un := CreateHuman ;
7047: LD_ADDR_VAR 0 13
7051: PUSH
7052: CALL_OW 44
7056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7057: LD_VAR 0 13
7061: PPUSH
7062: LD_VAR 0 1
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_INT 10
7084: PPUSH
7085: LD_INT 0
7087: PPUSH
7088: CALL_OW 50
// result := result ^ un ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_VAR 0 6
7101: PUSH
7102: LD_VAR 0 13
7106: ADD
7107: ST_TO_ADDR
// end ;
7108: GO 6986
7110: POP
7111: POP
// end ; end ;
7112: LD_VAR 0 6
7116: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
7121: PPUSH
7122: PPUSH
7123: PPUSH
7124: PPUSH
7125: PPUSH
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// result := false ;
7135: LD_ADDR_VAR 0 2
7139: PUSH
7140: LD_INT 0
7142: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7143: LD_VAR 0 1
7147: NOT
7148: PUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: CALL_OW 266
7158: PUSH
7159: LD_INT 32
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: IN
7169: NOT
7170: OR
7171: IFFALSE 7175
// exit ;
7173: GO 8408
// nat := GetNation ( tower ) ;
7175: LD_ADDR_VAR 0 11
7179: PUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: CALL_OW 248
7189: ST_TO_ADDR
// side := GetSide ( tower ) ;
7190: LD_ADDR_VAR 0 15
7194: PUSH
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 255
7204: ST_TO_ADDR
// x := GetX ( tower ) ;
7205: LD_ADDR_VAR 0 9
7209: PUSH
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 250
7219: ST_TO_ADDR
// y := GetY ( tower ) ;
7220: LD_ADDR_VAR 0 10
7224: PUSH
7225: LD_VAR 0 1
7229: PPUSH
7230: CALL_OW 251
7234: ST_TO_ADDR
// if not x or not y then
7235: LD_VAR 0 9
7239: NOT
7240: PUSH
7241: LD_VAR 0 10
7245: NOT
7246: OR
7247: IFFALSE 7251
// exit ;
7249: GO 8408
// weapon := 0 ;
7251: LD_ADDR_VAR 0 17
7255: PUSH
7256: LD_INT 0
7258: ST_TO_ADDR
// fac_list := [ ] ;
7259: LD_ADDR_VAR 0 16
7263: PUSH
7264: EMPTY
7265: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 274
7280: PPUSH
7281: CALL 5460 0 1
7285: PPUSH
7286: LD_INT 30
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 72
7300: ST_TO_ADDR
// if not factories then
7301: LD_VAR 0 5
7305: NOT
7306: IFFALSE 7310
// exit ;
7308: GO 8408
// for i in factories do
7310: LD_ADDR_VAR 0 7
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: FOR_IN
7321: IFFALSE 7346
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7323: LD_ADDR_VAR 0 16
7327: PUSH
7328: LD_VAR 0 16
7332: PUSH
7333: LD_VAR 0 7
7337: PPUSH
7338: CALL_OW 478
7342: UNION
7343: ST_TO_ADDR
7344: GO 7320
7346: POP
7347: POP
// if not fac_list then
7348: LD_VAR 0 16
7352: NOT
7353: IFFALSE 7357
// exit ;
7355: GO 8408
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_INT 4
7364: PUSH
7365: LD_INT 5
7367: PUSH
7368: LD_INT 9
7370: PUSH
7371: LD_INT 10
7373: PUSH
7374: LD_INT 6
7376: PUSH
7377: LD_INT 7
7379: PUSH
7380: LD_INT 11
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 27
7394: PUSH
7395: LD_INT 28
7397: PUSH
7398: LD_INT 26
7400: PUSH
7401: LD_INT 30
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 43
7412: PUSH
7413: LD_INT 44
7415: PUSH
7416: LD_INT 46
7418: PUSH
7419: LD_INT 45
7421: PUSH
7422: LD_INT 47
7424: PUSH
7425: LD_INT 49
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: PUSH
7441: LD_VAR 0 11
7445: ARRAY
7446: ST_TO_ADDR
// for i in list do
7447: LD_ADDR_VAR 0 7
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: FOR_IN
7458: IFFALSE 7491
// if not i in fac_list then
7460: LD_VAR 0 7
7464: PUSH
7465: LD_VAR 0 16
7469: IN
7470: NOT
7471: IFFALSE 7489
// list := list diff i ;
7473: LD_ADDR_VAR 0 4
7477: PUSH
7478: LD_VAR 0 4
7482: PUSH
7483: LD_VAR 0 7
7487: DIFF
7488: ST_TO_ADDR
7489: GO 7457
7491: POP
7492: POP
// if not list then
7493: LD_VAR 0 4
7497: NOT
7498: IFFALSE 7502
// exit ;
7500: GO 8408
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7502: LD_VAR 0 11
7506: PUSH
7507: LD_INT 3
7509: EQUAL
7510: PUSH
7511: LD_INT 49
7513: PUSH
7514: LD_VAR 0 4
7518: IN
7519: AND
7520: PUSH
7521: LD_INT 31
7523: PPUSH
7524: LD_VAR 0 15
7528: PPUSH
7529: CALL_OW 321
7533: PUSH
7534: LD_INT 2
7536: EQUAL
7537: AND
7538: IFFALSE 7598
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7540: LD_INT 22
7542: PUSH
7543: LD_VAR 0 15
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 35
7554: PUSH
7555: LD_INT 49
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 91
7564: PUSH
7565: LD_VAR 0 1
7569: PUSH
7570: LD_INT 10
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: PPUSH
7583: CALL_OW 69
7587: NOT
7588: IFFALSE 7598
// weapon := ru_time_lapser ;
7590: LD_ADDR_VAR 0 17
7594: PUSH
7595: LD_INT 49
7597: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7598: LD_VAR 0 11
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: IN
7613: PUSH
7614: LD_INT 11
7616: PUSH
7617: LD_VAR 0 4
7621: IN
7622: PUSH
7623: LD_INT 30
7625: PUSH
7626: LD_VAR 0 4
7630: IN
7631: OR
7632: AND
7633: PUSH
7634: LD_INT 6
7636: PPUSH
7637: LD_VAR 0 15
7641: PPUSH
7642: CALL_OW 321
7646: PUSH
7647: LD_INT 2
7649: EQUAL
7650: AND
7651: IFFALSE 7816
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7653: LD_INT 22
7655: PUSH
7656: LD_VAR 0 15
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: LD_INT 35
7670: PUSH
7671: LD_INT 11
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 35
7680: PUSH
7681: LD_INT 30
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 91
7695: PUSH
7696: LD_VAR 0 1
7700: PUSH
7701: LD_INT 15
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: NOT
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_VAR 0 15
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 2
7734: PUSH
7735: LD_INT 30
7737: PUSH
7738: LD_INT 32
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 30
7747: PUSH
7748: LD_INT 33
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 91
7762: PUSH
7763: LD_VAR 0 1
7767: PUSH
7768: LD_INT 12
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PUSH
7789: LD_INT 1
7791: GREATER
7792: AND
7793: IFFALSE 7816
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7795: LD_ADDR_VAR 0 17
7799: PUSH
7800: LD_INT 11
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_VAR 0 11
7814: ARRAY
7815: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7816: LD_VAR 0 17
7820: NOT
7821: PUSH
7822: LD_INT 40
7824: PPUSH
7825: LD_VAR 0 15
7829: PPUSH
7830: CALL_OW 321
7834: PUSH
7835: LD_INT 2
7837: EQUAL
7838: AND
7839: PUSH
7840: LD_INT 7
7842: PUSH
7843: LD_VAR 0 4
7847: IN
7848: PUSH
7849: LD_INT 28
7851: PUSH
7852: LD_VAR 0 4
7856: IN
7857: OR
7858: PUSH
7859: LD_INT 45
7861: PUSH
7862: LD_VAR 0 4
7866: IN
7867: OR
7868: AND
7869: IFFALSE 8123
// begin hex := _GetHexInfo ( x , y ) ;
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_VAR 0 9
7880: PPUSH
7881: LD_VAR 0 10
7885: PPUSH
7886: CALL 1915 0 2
7890: ST_TO_ADDR
// if hex [ 1 ] then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 1
7898: ARRAY
7899: IFFALSE 7903
// exit ;
7901: GO 8408
// height := hex [ 2 ] ;
7903: LD_ADDR_VAR 0 14
7907: PUSH
7908: LD_VAR 0 3
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7917: LD_ADDR_VAR 0 13
7921: PUSH
7922: LD_INT 0
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 5
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: ST_TO_ADDR
// for i in tmp do
7940: LD_ADDR_VAR 0 7
7944: PUSH
7945: LD_VAR 0 13
7949: PUSH
7950: FOR_IN
7951: IFFALSE 8121
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7953: LD_ADDR_VAR 0 8
7957: PUSH
7958: LD_VAR 0 9
7962: PPUSH
7963: LD_VAR 0 7
7967: PPUSH
7968: LD_INT 5
7970: PPUSH
7971: CALL_OW 272
7975: PUSH
7976: LD_VAR 0 10
7980: PPUSH
7981: LD_VAR 0 7
7985: PPUSH
7986: LD_INT 5
7988: PPUSH
7989: CALL_OW 273
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
7998: LD_VAR 0 8
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_VAR 0 8
8011: PUSH
8012: LD_INT 2
8014: ARRAY
8015: PPUSH
8016: CALL_OW 488
8020: IFFALSE 8119
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: LD_VAR 0 8
8031: PUSH
8032: LD_INT 1
8034: ARRAY
8035: PPUSH
8036: LD_VAR 0 8
8040: PUSH
8041: LD_INT 2
8043: ARRAY
8044: PPUSH
8045: CALL 1915 0 2
8049: ST_TO_ADDR
// if hex [ 1 ] then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 1
8057: ARRAY
8058: IFFALSE 8062
// continue ;
8060: GO 7950
// h := hex [ 2 ] ;
8062: LD_ADDR_VAR 0 12
8066: PUSH
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: ST_TO_ADDR
// if h + 7 < height then
8076: LD_VAR 0 12
8080: PUSH
8081: LD_INT 7
8083: PLUS
8084: PUSH
8085: LD_VAR 0 14
8089: LESS
8090: IFFALSE 8119
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8092: LD_ADDR_VAR 0 17
8096: PUSH
8097: LD_INT 7
8099: PUSH
8100: LD_INT 28
8102: PUSH
8103: LD_INT 45
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: LD_VAR 0 11
8115: ARRAY
8116: ST_TO_ADDR
// break ;
8117: GO 8121
// end ; end ; end ;
8119: GO 7950
8121: POP
8122: POP
// end ; if not weapon then
8123: LD_VAR 0 17
8127: NOT
8128: IFFALSE 8290
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8130: LD_ADDR_VAR 0 4
8134: PUSH
8135: LD_VAR 0 4
8139: PUSH
8140: LD_INT 11
8142: PUSH
8143: LD_INT 30
8145: PUSH
8146: LD_INT 49
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: DIFF
8154: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8155: LD_ADDR_VAR 0 17
8159: PUSH
8160: LD_VAR 0 4
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_VAR 0 4
8172: PPUSH
8173: CALL_OW 12
8177: ARRAY
8178: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8179: LD_ADDR_VAR 0 13
8183: PUSH
8184: LD_INT 22
8186: PUSH
8187: LD_VAR 0 15
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 3
8198: PUSH
8199: LD_INT 35
8201: PUSH
8202: LD_INT 0
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PPUSH
8217: CALL_OW 69
8221: ST_TO_ADDR
// for i in tmp do
8222: LD_ADDR_VAR 0 7
8226: PUSH
8227: LD_VAR 0 13
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// list := list diff GetBWeapon ( i ) ;
8235: LD_ADDR_VAR 0 4
8239: PUSH
8240: LD_VAR 0 4
8244: PUSH
8245: LD_VAR 0 7
8249: PPUSH
8250: CALL_OW 269
8254: DIFF
8255: ST_TO_ADDR
8256: GO 8232
8258: POP
8259: POP
// if list then
8260: LD_VAR 0 4
8264: IFFALSE 8290
// weapon := list [ rand ( 1 , list ) ] ;
8266: LD_ADDR_VAR 0 17
8270: PUSH
8271: LD_VAR 0 4
8275: PUSH
8276: LD_INT 1
8278: PPUSH
8279: LD_VAR 0 4
8283: PPUSH
8284: CALL_OW 12
8288: ARRAY
8289: ST_TO_ADDR
// end ; if weapon then
8290: LD_VAR 0 17
8294: IFFALSE 8408
// begin tmp := CostOfWeapon ( weapon ) ;
8296: LD_ADDR_VAR 0 13
8300: PUSH
8301: LD_VAR 0 17
8305: PPUSH
8306: CALL_OW 451
8310: ST_TO_ADDR
// j := GetBase ( tower ) ;
8311: LD_ADDR_VAR 0 8
8315: PUSH
8316: LD_VAR 0 1
8320: PPUSH
8321: CALL_OW 274
8325: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8326: LD_VAR 0 8
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: CALL_OW 275
8338: PUSH
8339: LD_VAR 0 13
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: GREATEREQUAL
8348: PUSH
8349: LD_VAR 0 8
8353: PPUSH
8354: LD_INT 2
8356: PPUSH
8357: CALL_OW 275
8361: PUSH
8362: LD_VAR 0 13
8366: PUSH
8367: LD_INT 2
8369: ARRAY
8370: GREATEREQUAL
8371: AND
8372: PUSH
8373: LD_VAR 0 8
8377: PPUSH
8378: LD_INT 3
8380: PPUSH
8381: CALL_OW 275
8385: PUSH
8386: LD_VAR 0 13
8390: PUSH
8391: LD_INT 3
8393: ARRAY
8394: GREATEREQUAL
8395: AND
8396: IFFALSE 8408
// result := weapon ;
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_VAR 0 17
8407: ST_TO_ADDR
// end ; end ;
8408: LD_VAR 0 2
8412: RET
// export function Compare ( val1 , val2 ) ; begin
8413: LD_INT 0
8415: PPUSH
// if val1 = val2 then
8416: LD_VAR 0 1
8420: PUSH
8421: LD_VAR 0 2
8425: EQUAL
8426: IFFALSE 8438
// result := true else
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: LD_INT 1
8435: ST_TO_ADDR
8436: GO 8446
// result := false ;
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_INT 0
8445: ST_TO_ADDR
// end ;
8446: LD_VAR 0 3
8450: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8451: LD_INT 0
8453: PPUSH
8454: PPUSH
// result := true ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// if array1 = array2 then
8463: LD_VAR 0 1
8467: PUSH
8468: LD_VAR 0 2
8472: EQUAL
8473: IFFALSE 8538
// begin for i = 1 to array1 do
8475: LD_ADDR_VAR 0 4
8479: PUSH
8480: DOUBLE
8481: LD_INT 1
8483: DEC
8484: ST_TO_ADDR
8485: LD_VAR 0 1
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8534
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8493: LD_VAR 0 1
8497: PUSH
8498: LD_VAR 0 4
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PPUSH
8515: CALL 8413 0 2
8519: NOT
8520: IFFALSE 8532
// begin result := false ;
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_INT 0
8529: ST_TO_ADDR
// break ;
8530: GO 8534
// end ;
8532: GO 8490
8534: POP
8535: POP
// end else
8536: GO 8546
// result := false ;
8538: LD_ADDR_VAR 0 3
8542: PUSH
8543: LD_INT 0
8545: ST_TO_ADDR
// end ;
8546: LD_VAR 0 3
8550: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8551: LD_INT 0
8553: PPUSH
8554: PPUSH
8555: PPUSH
// pom := GetBase ( fac ) ;
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 274
8570: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8571: LD_ADDR_VAR 0 4
8575: PUSH
8576: LD_VAR 0 2
8580: PUSH
8581: LD_INT 1
8583: ARRAY
8584: PPUSH
8585: LD_VAR 0 2
8589: PUSH
8590: LD_INT 2
8592: ARRAY
8593: PPUSH
8594: LD_VAR 0 2
8598: PUSH
8599: LD_INT 3
8601: ARRAY
8602: PPUSH
8603: LD_VAR 0 2
8607: PUSH
8608: LD_INT 4
8610: ARRAY
8611: PPUSH
8612: CALL_OW 449
8616: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8617: LD_VAR 0 5
8621: PPUSH
8622: LD_INT 1
8624: PPUSH
8625: CALL_OW 275
8629: PUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: GREATEREQUAL
8639: PUSH
8640: LD_VAR 0 5
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL_OW 275
8652: PUSH
8653: LD_VAR 0 4
8657: PUSH
8658: LD_INT 2
8660: ARRAY
8661: GREATEREQUAL
8662: AND
8663: PUSH
8664: LD_VAR 0 5
8668: PPUSH
8669: LD_INT 3
8671: PPUSH
8672: CALL_OW 275
8676: PUSH
8677: LD_VAR 0 4
8681: PUSH
8682: LD_INT 3
8684: ARRAY
8685: GREATEREQUAL
8686: AND
8687: IFFALSE 8699
// result := true else
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
8697: GO 8707
// result := false ;
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// end ;
8707: LD_VAR 0 3
8711: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8712: LD_INT 0
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
8721: PPUSH
8722: PPUSH
// result := false ;
8723: LD_ADDR_VAR 0 6
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8731: LD_VAR 0 1
8735: NOT
8736: PUSH
8737: LD_VAR 0 2
8741: NOT
8742: OR
8743: PUSH
8744: LD_VAR 0 5
8748: PUSH
8749: LD_INT 0
8751: PUSH
8752: LD_INT 1
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 3
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: IN
8775: NOT
8776: OR
8777: PUSH
8778: LD_VAR 0 3
8782: PPUSH
8783: LD_VAR 0 4
8787: PPUSH
8788: CALL_OW 488
8792: NOT
8793: OR
8794: IFFALSE 8798
// exit ;
8796: GO 9472
// pom := GetBase ( bdepot ) ;
8798: LD_ADDR_VAR 0 9
8802: PUSH
8803: LD_VAR 0 1
8807: PPUSH
8808: CALL_OW 274
8812: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8813: LD_ADDR_VAR 0 10
8817: PUSH
8818: LD_VAR 0 2
8822: PPUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: CALL_OW 248
8832: PPUSH
8833: CALL_OW 450
8837: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8838: LD_VAR 0 9
8842: PPUSH
8843: LD_INT 1
8845: PPUSH
8846: CALL_OW 275
8850: PUSH
8851: LD_VAR 0 10
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: GREATEREQUAL
8860: PUSH
8861: LD_VAR 0 9
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: CALL_OW 275
8873: PUSH
8874: LD_VAR 0 10
8878: PUSH
8879: LD_INT 2
8881: ARRAY
8882: GREATEREQUAL
8883: AND
8884: PUSH
8885: LD_VAR 0 9
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: CALL_OW 275
8897: PUSH
8898: LD_VAR 0 10
8902: PUSH
8903: LD_INT 3
8905: ARRAY
8906: GREATEREQUAL
8907: AND
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9472
// if GetBType ( bdepot ) = b_depot then
8913: LD_VAR 0 1
8917: PPUSH
8918: CALL_OW 266
8922: PUSH
8923: LD_INT 0
8925: EQUAL
8926: IFFALSE 8938
// dist := 28 else
8928: LD_ADDR_VAR 0 13
8932: PUSH
8933: LD_INT 28
8935: ST_TO_ADDR
8936: GO 8946
// dist := 36 ;
8938: LD_ADDR_VAR 0 13
8942: PUSH
8943: LD_INT 36
8945: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8946: LD_VAR 0 1
8950: PPUSH
8951: LD_VAR 0 3
8955: PPUSH
8956: LD_VAR 0 4
8960: PPUSH
8961: CALL_OW 297
8965: PUSH
8966: LD_VAR 0 13
8970: GREATER
8971: IFFALSE 8975
// exit ;
8973: GO 9472
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8975: LD_ADDR_VAR 0 11
8979: PUSH
8980: LD_VAR 0 2
8984: PPUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_VAR 0 4
8994: PPUSH
8995: LD_VAR 0 5
8999: PPUSH
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 248
9009: PPUSH
9010: LD_INT 0
9012: PPUSH
9013: CALL 9477 0 6
9017: ST_TO_ADDR
// if not hexes then
9018: LD_VAR 0 11
9022: NOT
9023: IFFALSE 9027
// exit ;
9025: GO 9472
// hex := _GetHexInfo ( x , y ) ;
9027: LD_ADDR_VAR 0 14
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_VAR 0 4
9041: PPUSH
9042: CALL 1915 0 2
9046: ST_TO_ADDR
// if hex [ 1 ] then
9047: LD_VAR 0 14
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: IFFALSE 9059
// exit ;
9057: GO 9472
// height := hex [ 2 ] ;
9059: LD_ADDR_VAR 0 12
9063: PUSH
9064: LD_VAR 0 14
9068: PUSH
9069: LD_INT 2
9071: ARRAY
9072: ST_TO_ADDR
// for i = 1 to hexes do
9073: LD_ADDR_VAR 0 7
9077: PUSH
9078: DOUBLE
9079: LD_INT 1
9081: DEC
9082: ST_TO_ADDR
9083: LD_VAR 0 11
9087: PUSH
9088: FOR_TO
9089: IFFALSE 9427
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9091: LD_VAR 0 11
9095: PUSH
9096: LD_VAR 0 7
9100: ARRAY
9101: PUSH
9102: LD_INT 1
9104: ARRAY
9105: PPUSH
9106: LD_VAR 0 11
9110: PUSH
9111: LD_VAR 0 7
9115: ARRAY
9116: PUSH
9117: LD_INT 2
9119: ARRAY
9120: PPUSH
9121: CALL_OW 488
9125: NOT
9126: IFFALSE 9130
// continue ;
9128: GO 9088
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: LD_VAR 0 11
9139: PUSH
9140: LD_VAR 0 7
9144: ARRAY
9145: PUSH
9146: LD_INT 1
9148: ARRAY
9149: PPUSH
9150: LD_VAR 0 11
9154: PUSH
9155: LD_VAR 0 7
9159: ARRAY
9160: PUSH
9161: LD_INT 2
9163: ARRAY
9164: PPUSH
9165: CALL 1915 0 2
9169: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9170: LD_VAR 0 8
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PUSH
9179: LD_VAR 0 8
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PUSH
9188: LD_VAR 0 12
9192: PUSH
9193: LD_INT 2
9195: PLUS
9196: GREATER
9197: OR
9198: PUSH
9199: LD_VAR 0 8
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PUSH
9208: LD_VAR 0 12
9212: PUSH
9213: LD_INT 2
9215: MINUS
9216: LESS
9217: OR
9218: PUSH
9219: LD_VAR 0 8
9223: PUSH
9224: LD_INT 3
9226: ARRAY
9227: PUSH
9228: LD_INT 0
9230: PUSH
9231: LD_INT 8
9233: PUSH
9234: LD_INT 9
9236: PUSH
9237: LD_INT 10
9239: PUSH
9240: LD_INT 11
9242: PUSH
9243: LD_INT 12
9245: PUSH
9246: LD_INT 13
9248: PUSH
9249: LD_INT 16
9251: PUSH
9252: LD_INT 17
9254: PUSH
9255: LD_INT 18
9257: PUSH
9258: LD_INT 19
9260: PUSH
9261: LD_INT 20
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: IN
9282: NOT
9283: OR
9284: PUSH
9285: LD_VAR 0 8
9289: PUSH
9290: LD_INT 4
9292: ARRAY
9293: OR
9294: PUSH
9295: LD_VAR 0 8
9299: PUSH
9300: LD_INT 5
9302: ARRAY
9303: NOT
9304: OR
9305: PUSH
9306: LD_VAR 0 8
9310: PUSH
9311: LD_INT 6
9313: ARRAY
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: LD_INT 7
9323: PUSH
9324: LD_INT 9
9326: PUSH
9327: LD_INT 10
9329: PUSH
9330: LD_INT 11
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: IN
9341: NOT
9342: OR
9343: PUSH
9344: LD_VAR 0 11
9348: PUSH
9349: LD_VAR 0 7
9353: ARRAY
9354: PUSH
9355: LD_INT 1
9357: ARRAY
9358: PPUSH
9359: LD_VAR 0 11
9363: PUSH
9364: LD_VAR 0 7
9368: ARRAY
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PPUSH
9374: CALL_OW 428
9378: PUSH
9379: LD_INT 0
9381: GREATER
9382: OR
9383: PUSH
9384: LD_VAR 0 11
9388: PUSH
9389: LD_VAR 0 7
9393: ARRAY
9394: PUSH
9395: LD_INT 1
9397: ARRAY
9398: PPUSH
9399: LD_VAR 0 11
9403: PUSH
9404: LD_VAR 0 7
9408: ARRAY
9409: PUSH
9410: LD_INT 2
9412: ARRAY
9413: PPUSH
9414: CALL_OW 351
9418: OR
9419: IFFALSE 9425
// exit ;
9421: POP
9422: POP
9423: GO 9472
// end ;
9425: GO 9088
9427: POP
9428: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9429: LD_VAR 0 1
9433: PPUSH
9434: CALL_OW 255
9438: PPUSH
9439: LD_VAR 0 3
9443: PPUSH
9444: LD_VAR 0 4
9448: PPUSH
9449: LD_INT 20
9451: PPUSH
9452: CALL 3650 0 4
9456: PUSH
9457: LD_INT 4
9459: ARRAY
9460: IFFALSE 9464
// exit ;
9462: GO 9472
// result := true ;
9464: LD_ADDR_VAR 0 6
9468: PUSH
9469: LD_INT 1
9471: ST_TO_ADDR
// end ;
9472: LD_VAR 0 6
9476: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9477: LD_INT 0
9479: PPUSH
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
9484: PPUSH
9485: PPUSH
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
// result = [ ] ;
9537: LD_ADDR_VAR 0 7
9541: PUSH
9542: EMPTY
9543: ST_TO_ADDR
// temp_list = [ ] ;
9544: LD_ADDR_VAR 0 9
9548: PUSH
9549: EMPTY
9550: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9551: LD_VAR 0 4
9555: PUSH
9556: LD_INT 0
9558: PUSH
9559: LD_INT 1
9561: PUSH
9562: LD_INT 2
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: LD_INT 4
9570: PUSH
9571: LD_INT 5
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: IN
9582: NOT
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 0
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: IN
9599: PUSH
9600: LD_VAR 0 5
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 3
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: IN
9619: NOT
9620: AND
9621: OR
9622: IFFALSE 9626
// exit ;
9624: GO 28011
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9626: LD_VAR 0 1
9630: PUSH
9631: LD_INT 6
9633: PUSH
9634: LD_INT 7
9636: PUSH
9637: LD_INT 8
9639: PUSH
9640: LD_INT 13
9642: PUSH
9643: LD_INT 12
9645: PUSH
9646: LD_INT 15
9648: PUSH
9649: LD_INT 11
9651: PUSH
9652: LD_INT 14
9654: PUSH
9655: LD_INT 10
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: IN
9669: IFFALSE 9679
// btype = b_lab ;
9671: LD_ADDR_VAR 0 1
9675: PUSH
9676: LD_INT 6
9678: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9679: LD_VAR 0 6
9683: PUSH
9684: LD_INT 0
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: IN
9698: NOT
9699: PUSH
9700: LD_VAR 0 1
9704: PUSH
9705: LD_INT 0
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: LD_INT 2
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: LD_INT 6
9719: PUSH
9720: LD_INT 36
9722: PUSH
9723: LD_INT 4
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: LD_INT 31
9731: PUSH
9732: LD_INT 32
9734: PUSH
9735: LD_INT 33
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: IN
9751: NOT
9752: PUSH
9753: LD_VAR 0 6
9757: PUSH
9758: LD_INT 1
9760: EQUAL
9761: AND
9762: OR
9763: PUSH
9764: LD_VAR 0 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: IN
9779: NOT
9780: PUSH
9781: LD_VAR 0 6
9785: PUSH
9786: LD_INT 2
9788: EQUAL
9789: AND
9790: OR
9791: IFFALSE 9801
// mode = 0 ;
9793: LD_ADDR_VAR 0 6
9797: PUSH
9798: LD_INT 0
9800: ST_TO_ADDR
// case mode of 0 :
9801: LD_VAR 0 6
9805: PUSH
9806: LD_INT 0
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 21267
9814: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9815: LD_ADDR_VAR 0 11
9819: PUSH
9820: LD_INT 0
9822: PUSH
9823: LD_INT 0
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 0
9832: PUSH
9833: LD_INT 1
9835: NEG
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: LD_INT 0
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 0
9863: PUSH
9864: LD_INT 1
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 1
9873: NEG
9874: PUSH
9875: LD_INT 0
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 1
9884: NEG
9885: PUSH
9886: LD_INT 1
9888: NEG
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 1
9896: NEG
9897: PUSH
9898: LD_INT 2
9900: NEG
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 0
9908: PUSH
9909: LD_INT 2
9911: NEG
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: LD_INT 1
9922: NEG
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 1
9930: PUSH
9931: LD_INT 2
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 0
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 1
9950: NEG
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 0
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 1
9981: NEG
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10008: LD_ADDR_VAR 0 12
10012: PUSH
10013: LD_INT 0
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 0
10025: PUSH
10026: LD_INT 1
10028: NEG
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 1
10036: PUSH
10037: LD_INT 0
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 0
10056: PUSH
10057: LD_INT 1
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 1
10066: NEG
10067: PUSH
10068: LD_INT 0
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 1
10077: NEG
10078: PUSH
10079: LD_INT 1
10081: NEG
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 1
10089: PUSH
10090: LD_INT 1
10092: NEG
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: LD_INT 0
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 1
10120: NEG
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 2
10131: NEG
10132: PUSH
10133: LD_INT 0
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 2
10142: NEG
10143: PUSH
10144: LD_INT 1
10146: NEG
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 2
10154: NEG
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 3
10165: NEG
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 3
10176: NEG
10177: PUSH
10178: LD_INT 1
10180: NEG
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10204: LD_ADDR_VAR 0 13
10208: PUSH
10209: LD_INT 0
10211: PUSH
10212: LD_INT 0
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 0
10221: PUSH
10222: LD_INT 1
10224: NEG
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: LD_INT 0
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: LD_INT 1
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 0
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 1
10262: NEG
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 1
10273: NEG
10274: PUSH
10275: LD_INT 1
10277: NEG
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 1
10285: NEG
10286: PUSH
10287: LD_INT 2
10289: NEG
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 2
10327: NEG
10328: PUSH
10329: LD_INT 1
10331: NEG
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 2
10339: NEG
10340: PUSH
10341: LD_INT 2
10343: NEG
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 2
10351: NEG
10352: PUSH
10353: LD_INT 3
10355: NEG
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 3
10363: NEG
10364: PUSH
10365: LD_INT 2
10367: NEG
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 3
10375: NEG
10376: PUSH
10377: LD_INT 3
10379: NEG
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10403: LD_ADDR_VAR 0 14
10407: PUSH
10408: LD_INT 0
10410: PUSH
10411: LD_INT 0
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: LD_INT 1
10423: NEG
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 0
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 1
10441: PUSH
10442: LD_INT 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 0
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 1
10461: NEG
10462: PUSH
10463: LD_INT 0
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 1
10472: NEG
10473: PUSH
10474: LD_INT 1
10476: NEG
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 1
10484: NEG
10485: PUSH
10486: LD_INT 2
10488: NEG
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 0
10496: PUSH
10497: LD_INT 2
10499: NEG
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 1
10507: PUSH
10508: LD_INT 1
10510: NEG
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: LD_INT 2
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 1
10538: NEG
10539: PUSH
10540: LD_INT 1
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 1
10549: NEG
10550: PUSH
10551: LD_INT 3
10553: NEG
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 0
10561: PUSH
10562: LD_INT 3
10564: NEG
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 1
10572: PUSH
10573: LD_INT 2
10575: NEG
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10599: LD_ADDR_VAR 0 15
10603: PUSH
10604: LD_INT 0
10606: PUSH
10607: LD_INT 0
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 0
10616: PUSH
10617: LD_INT 1
10619: NEG
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: LD_INT 0
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 0
10647: PUSH
10648: LD_INT 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 1
10657: NEG
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 1
10668: NEG
10669: PUSH
10670: LD_INT 1
10672: NEG
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: LD_INT 1
10683: NEG
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 0
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 1
10711: NEG
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 2
10722: NEG
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 2
10733: NEG
10734: PUSH
10735: LD_INT 1
10737: NEG
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 2
10745: PUSH
10746: LD_INT 1
10748: NEG
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: LD_INT 0
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10792: LD_ADDR_VAR 0 16
10796: PUSH
10797: LD_INT 0
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 0
10809: PUSH
10810: LD_INT 1
10812: NEG
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 0
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 1
10830: PUSH
10831: LD_INT 1
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 1
10850: NEG
10851: PUSH
10852: LD_INT 0
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 1
10861: NEG
10862: PUSH
10863: LD_INT 1
10865: NEG
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 1
10873: NEG
10874: PUSH
10875: LD_INT 2
10877: NEG
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 2
10915: NEG
10916: PUSH
10917: LD_INT 1
10919: NEG
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 2
10927: NEG
10928: PUSH
10929: LD_INT 2
10931: NEG
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 3
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 3
10949: PUSH
10950: LD_INT 3
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 2
10959: PUSH
10960: LD_INT 3
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10985: LD_ADDR_VAR 0 17
10989: PUSH
10990: LD_INT 0
10992: PUSH
10993: LD_INT 0
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 0
11002: PUSH
11003: LD_INT 1
11005: NEG
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 0
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 0
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 1
11043: NEG
11044: PUSH
11045: LD_INT 0
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 1
11054: NEG
11055: PUSH
11056: LD_INT 1
11058: NEG
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 1
11066: NEG
11067: PUSH
11068: LD_INT 2
11070: NEG
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 0
11078: PUSH
11079: LD_INT 2
11081: NEG
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: LD_INT 1
11092: NEG
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: LD_INT 0
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 2
11110: PUSH
11111: LD_INT 1
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: LD_INT 2
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 1
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 1
11150: NEG
11151: PUSH
11152: LD_INT 1
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 2
11161: NEG
11162: PUSH
11163: LD_INT 0
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: NEG
11173: PUSH
11174: LD_INT 1
11176: NEG
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 2
11184: NEG
11185: PUSH
11186: LD_INT 2
11188: NEG
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11215: LD_ADDR_VAR 0 18
11219: PUSH
11220: LD_INT 0
11222: PUSH
11223: LD_INT 0
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 0
11232: PUSH
11233: LD_INT 1
11235: NEG
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: LD_INT 0
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 0
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 1
11273: NEG
11274: PUSH
11275: LD_INT 0
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 1
11284: NEG
11285: PUSH
11286: LD_INT 1
11288: NEG
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 1
11296: NEG
11297: PUSH
11298: LD_INT 2
11300: NEG
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: LD_INT 2
11311: NEG
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 1
11319: PUSH
11320: LD_INT 1
11322: NEG
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 0
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 0
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 1
11380: NEG
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: NEG
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 2
11402: NEG
11403: PUSH
11404: LD_INT 1
11406: NEG
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: NEG
11415: PUSH
11416: LD_INT 2
11418: NEG
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11445: LD_ADDR_VAR 0 19
11449: PUSH
11450: LD_INT 0
11452: PUSH
11453: LD_INT 0
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 0
11462: PUSH
11463: LD_INT 1
11465: NEG
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 1
11473: PUSH
11474: LD_INT 0
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: LD_INT 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 0
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 1
11503: NEG
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 1
11514: NEG
11515: PUSH
11516: LD_INT 1
11518: NEG
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: NEG
11527: PUSH
11528: LD_INT 2
11530: NEG
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 0
11538: PUSH
11539: LD_INT 2
11541: NEG
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: LD_INT 1
11552: NEG
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 0
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 0
11600: PUSH
11601: LD_INT 2
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 1
11610: NEG
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: NEG
11622: PUSH
11623: LD_INT 0
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 2
11632: NEG
11633: PUSH
11634: LD_INT 1
11636: NEG
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 2
11644: NEG
11645: PUSH
11646: LD_INT 2
11648: NEG
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11675: LD_ADDR_VAR 0 20
11679: PUSH
11680: LD_INT 0
11682: PUSH
11683: LD_INT 0
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 0
11692: PUSH
11693: LD_INT 1
11695: NEG
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: LD_INT 0
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 0
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 1
11733: NEG
11734: PUSH
11735: LD_INT 0
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 1
11744: NEG
11745: PUSH
11746: LD_INT 1
11748: NEG
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 1
11756: NEG
11757: PUSH
11758: LD_INT 2
11760: NEG
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 0
11768: PUSH
11769: LD_INT 2
11771: NEG
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: LD_INT 1
11782: NEG
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 2
11790: PUSH
11791: LD_INT 0
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 2
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: LD_INT 2
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 0
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 1
11840: NEG
11841: PUSH
11842: LD_INT 1
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 2
11851: NEG
11852: PUSH
11853: LD_INT 0
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: NEG
11863: PUSH
11864: LD_INT 1
11866: NEG
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 2
11874: NEG
11875: PUSH
11876: LD_INT 2
11878: NEG
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11905: LD_ADDR_VAR 0 21
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: LD_INT 0
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 0
11922: PUSH
11923: LD_INT 1
11925: NEG
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 1
11933: PUSH
11934: LD_INT 0
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 0
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 1
11963: NEG
11964: PUSH
11965: LD_INT 0
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 1
11974: NEG
11975: PUSH
11976: LD_INT 1
11978: NEG
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 1
11986: NEG
11987: PUSH
11988: LD_INT 2
11990: NEG
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 0
11998: PUSH
11999: LD_INT 2
12001: NEG
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: LD_INT 1
12012: NEG
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: LD_INT 0
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 2
12030: PUSH
12031: LD_INT 1
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 2
12040: PUSH
12041: LD_INT 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 1
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 0
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 1
12070: NEG
12071: PUSH
12072: LD_INT 1
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 2
12081: NEG
12082: PUSH
12083: LD_INT 0
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 2
12092: NEG
12093: PUSH
12094: LD_INT 1
12096: NEG
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 2
12104: NEG
12105: PUSH
12106: LD_INT 2
12108: NEG
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12135: LD_ADDR_VAR 0 22
12139: PUSH
12140: LD_INT 0
12142: PUSH
12143: LD_INT 0
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 0
12152: PUSH
12153: LD_INT 1
12155: NEG
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: LD_INT 0
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 0
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 1
12193: NEG
12194: PUSH
12195: LD_INT 0
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 1
12204: NEG
12205: PUSH
12206: LD_INT 1
12208: NEG
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 1
12216: NEG
12217: PUSH
12218: LD_INT 2
12220: NEG
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 0
12228: PUSH
12229: LD_INT 2
12231: NEG
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: LD_INT 1
12242: NEG
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 0
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 0
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 1
12300: NEG
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 2
12311: NEG
12312: PUSH
12313: LD_INT 0
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 2
12322: NEG
12323: PUSH
12324: LD_INT 1
12326: NEG
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 2
12334: NEG
12335: PUSH
12336: LD_INT 2
12338: NEG
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12365: LD_ADDR_VAR 0 23
12369: PUSH
12370: LD_INT 0
12372: PUSH
12373: LD_INT 0
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 0
12382: PUSH
12383: LD_INT 1
12385: NEG
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 1
12393: PUSH
12394: LD_INT 0
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 1
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 0
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 1
12423: NEG
12424: PUSH
12425: LD_INT 0
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 1
12434: NEG
12435: PUSH
12436: LD_INT 1
12438: NEG
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: NEG
12447: PUSH
12448: LD_INT 2
12450: NEG
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 0
12458: PUSH
12459: LD_INT 2
12461: NEG
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 1
12469: PUSH
12470: LD_INT 1
12472: NEG
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 2
12480: PUSH
12481: LD_INT 0
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 2
12490: PUSH
12491: LD_INT 1
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 1
12510: PUSH
12511: LD_INT 2
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 0
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 1
12530: NEG
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 2
12541: NEG
12542: PUSH
12543: LD_INT 0
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 2
12552: NEG
12553: PUSH
12554: LD_INT 1
12556: NEG
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 2
12564: NEG
12565: PUSH
12566: LD_INT 2
12568: NEG
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 2
12576: NEG
12577: PUSH
12578: LD_INT 3
12580: NEG
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 1
12588: NEG
12589: PUSH
12590: LD_INT 3
12592: NEG
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: LD_INT 2
12603: NEG
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: LD_INT 1
12614: NEG
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12645: LD_ADDR_VAR 0 24
12649: PUSH
12650: LD_INT 0
12652: PUSH
12653: LD_INT 0
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 0
12662: PUSH
12663: LD_INT 1
12665: NEG
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: LD_INT 0
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 1
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 0
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 1
12703: NEG
12704: PUSH
12705: LD_INT 0
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 1
12714: NEG
12715: PUSH
12716: LD_INT 1
12718: NEG
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 1
12726: NEG
12727: PUSH
12728: LD_INT 2
12730: NEG
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 0
12738: PUSH
12739: LD_INT 2
12741: NEG
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: LD_INT 1
12752: NEG
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 0
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: LD_INT 1
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: LD_INT 2
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 0
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 1
12810: NEG
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 2
12821: NEG
12822: PUSH
12823: LD_INT 0
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 2
12832: NEG
12833: PUSH
12834: LD_INT 1
12836: NEG
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 2
12844: NEG
12845: PUSH
12846: LD_INT 2
12848: NEG
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 1
12856: PUSH
12857: LD_INT 2
12859: NEG
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 2
12867: PUSH
12868: LD_INT 1
12870: NEG
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 3
12878: PUSH
12879: LD_INT 1
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 3
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12921: LD_ADDR_VAR 0 25
12925: PUSH
12926: LD_INT 0
12928: PUSH
12929: LD_INT 0
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 0
12938: PUSH
12939: LD_INT 1
12941: NEG
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: LD_INT 0
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 0
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 1
12979: NEG
12980: PUSH
12981: LD_INT 0
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 1
12990: NEG
12991: PUSH
12992: LD_INT 1
12994: NEG
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 1
13002: NEG
13003: PUSH
13004: LD_INT 2
13006: NEG
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 0
13014: PUSH
13015: LD_INT 2
13017: NEG
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: LD_INT 1
13028: NEG
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 0
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: LD_INT 2
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 1
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 0
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 1
13086: NEG
13087: PUSH
13088: LD_INT 1
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 2
13097: NEG
13098: PUSH
13099: LD_INT 0
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 2
13108: NEG
13109: PUSH
13110: LD_INT 1
13112: NEG
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 2
13120: NEG
13121: PUSH
13122: LD_INT 2
13124: NEG
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 1
13162: PUSH
13163: LD_INT 3
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13195: LD_ADDR_VAR 0 26
13199: PUSH
13200: LD_INT 0
13202: PUSH
13203: LD_INT 0
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 0
13212: PUSH
13213: LD_INT 1
13215: NEG
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: LD_INT 0
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 0
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 1
13253: NEG
13254: PUSH
13255: LD_INT 0
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 1
13264: NEG
13265: PUSH
13266: LD_INT 1
13268: NEG
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 1
13276: NEG
13277: PUSH
13278: LD_INT 2
13280: NEG
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 0
13288: PUSH
13289: LD_INT 2
13291: NEG
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: LD_INT 1
13302: NEG
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 0
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 1
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 0
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 1
13360: NEG
13361: PUSH
13362: LD_INT 1
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 2
13371: NEG
13372: PUSH
13373: LD_INT 0
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 2
13382: NEG
13383: PUSH
13384: LD_INT 1
13386: NEG
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 2
13394: NEG
13395: PUSH
13396: LD_INT 2
13398: NEG
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 1
13426: NEG
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 2
13437: NEG
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13471: LD_ADDR_VAR 0 27
13475: PUSH
13476: LD_INT 0
13478: PUSH
13479: LD_INT 0
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 0
13488: PUSH
13489: LD_INT 1
13491: NEG
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 1
13499: PUSH
13500: LD_INT 0
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 0
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 1
13529: NEG
13530: PUSH
13531: LD_INT 0
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 1
13540: NEG
13541: PUSH
13542: LD_INT 1
13544: NEG
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 1
13552: NEG
13553: PUSH
13554: LD_INT 2
13556: NEG
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 0
13564: PUSH
13565: LD_INT 2
13567: NEG
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: LD_INT 1
13578: NEG
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 0
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 0
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 1
13636: NEG
13637: PUSH
13638: LD_INT 1
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 2
13647: NEG
13648: PUSH
13649: LD_INT 0
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 2
13658: NEG
13659: PUSH
13660: LD_INT 1
13662: NEG
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: NEG
13671: PUSH
13672: LD_INT 2
13674: NEG
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 1
13682: NEG
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 2
13693: NEG
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 3
13704: NEG
13705: PUSH
13706: LD_INT 1
13708: NEG
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 3
13716: NEG
13717: PUSH
13718: LD_INT 2
13720: NEG
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13751: LD_ADDR_VAR 0 28
13755: PUSH
13756: LD_INT 0
13758: PUSH
13759: LD_INT 0
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: LD_INT 1
13771: NEG
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 1
13779: PUSH
13780: LD_INT 0
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 0
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 1
13809: NEG
13810: PUSH
13811: LD_INT 0
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 1
13820: NEG
13821: PUSH
13822: LD_INT 1
13824: NEG
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 1
13832: NEG
13833: PUSH
13834: LD_INT 2
13836: NEG
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 0
13844: PUSH
13845: LD_INT 2
13847: NEG
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: LD_INT 1
13858: NEG
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: LD_INT 0
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 2
13876: PUSH
13877: LD_INT 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 0
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 1
13916: NEG
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 2
13927: NEG
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 2
13938: NEG
13939: PUSH
13940: LD_INT 1
13942: NEG
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 2
13950: NEG
13951: PUSH
13952: LD_INT 2
13954: NEG
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 2
13962: NEG
13963: PUSH
13964: LD_INT 3
13966: NEG
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 1
13974: NEG
13975: PUSH
13976: LD_INT 3
13978: NEG
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 3
13986: NEG
13987: PUSH
13988: LD_INT 1
13990: NEG
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 3
13998: NEG
13999: PUSH
14000: LD_INT 2
14002: NEG
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14033: LD_ADDR_VAR 0 29
14037: PUSH
14038: LD_INT 0
14040: PUSH
14041: LD_INT 0
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 0
14050: PUSH
14051: LD_INT 1
14053: NEG
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 1
14061: PUSH
14062: LD_INT 0
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 0
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 1
14091: NEG
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 1
14102: NEG
14103: PUSH
14104: LD_INT 1
14106: NEG
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 1
14114: NEG
14115: PUSH
14116: LD_INT 2
14118: NEG
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: LD_INT 2
14129: NEG
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 1
14137: PUSH
14138: LD_INT 1
14140: NEG
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: LD_INT 0
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 2
14158: PUSH
14159: LD_INT 1
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 1
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 1
14188: NEG
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 2
14199: NEG
14200: PUSH
14201: LD_INT 1
14203: NEG
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 2
14211: NEG
14212: PUSH
14213: LD_INT 2
14215: NEG
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 2
14223: NEG
14224: PUSH
14225: LD_INT 3
14227: NEG
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: LD_INT 1
14238: NEG
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 1
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 1
14266: NEG
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 3
14277: NEG
14278: PUSH
14279: LD_INT 2
14281: NEG
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14312: LD_ADDR_VAR 0 30
14316: PUSH
14317: LD_INT 0
14319: PUSH
14320: LD_INT 0
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 0
14329: PUSH
14330: LD_INT 1
14332: NEG
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 1
14340: PUSH
14341: LD_INT 0
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 1
14370: NEG
14371: PUSH
14372: LD_INT 0
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 1
14381: NEG
14382: PUSH
14383: LD_INT 1
14385: NEG
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 1
14393: NEG
14394: PUSH
14395: LD_INT 2
14397: NEG
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 0
14405: PUSH
14406: LD_INT 2
14408: NEG
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: LD_INT 1
14419: NEG
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 0
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 1
14467: NEG
14468: PUSH
14469: LD_INT 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 2
14478: NEG
14479: PUSH
14480: LD_INT 0
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 2
14489: NEG
14490: PUSH
14491: LD_INT 1
14493: NEG
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 1
14501: NEG
14502: PUSH
14503: LD_INT 3
14505: NEG
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 1
14513: PUSH
14514: LD_INT 2
14516: NEG
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: LD_INT 3
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 2
14544: NEG
14545: PUSH
14546: LD_INT 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 3
14555: NEG
14556: PUSH
14557: LD_INT 1
14559: NEG
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14590: LD_ADDR_VAR 0 31
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: LD_INT 0
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: LD_INT 1
14610: NEG
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: LD_INT 0
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: LD_INT 1
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 0
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 1
14648: NEG
14649: PUSH
14650: LD_INT 0
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 1
14659: NEG
14660: PUSH
14661: LD_INT 1
14663: NEG
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 1
14671: NEG
14672: PUSH
14673: LD_INT 2
14675: NEG
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: LD_INT 1
14686: NEG
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 2
14694: PUSH
14695: LD_INT 0
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 2
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 1
14744: NEG
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 2
14755: NEG
14756: PUSH
14757: LD_INT 1
14759: NEG
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 2
14767: NEG
14768: PUSH
14769: LD_INT 2
14771: NEG
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 2
14779: NEG
14780: PUSH
14781: LD_INT 3
14783: NEG
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 1
14794: NEG
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 1
14822: NEG
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 3
14833: NEG
14834: PUSH
14835: LD_INT 2
14837: NEG
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14868: LD_ADDR_VAR 0 32
14872: PUSH
14873: LD_INT 0
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 0
14885: PUSH
14886: LD_INT 1
14888: NEG
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: LD_INT 0
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 0
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: NEG
14927: PUSH
14928: LD_INT 0
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 1
14937: NEG
14938: PUSH
14939: LD_INT 1
14941: NEG
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: NEG
14950: PUSH
14951: LD_INT 2
14953: NEG
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 0
14961: PUSH
14962: LD_INT 2
14964: NEG
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 1
14972: PUSH
14973: LD_INT 1
14975: NEG
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 0
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 1
15023: NEG
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 2
15034: NEG
15035: PUSH
15036: LD_INT 0
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 2
15045: NEG
15046: PUSH
15047: LD_INT 1
15049: NEG
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 1
15057: NEG
15058: PUSH
15059: LD_INT 3
15061: NEG
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: LD_INT 2
15072: NEG
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 2
15100: NEG
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 3
15111: NEG
15112: PUSH
15113: LD_INT 1
15115: NEG
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15146: LD_ADDR_VAR 0 33
15150: PUSH
15151: LD_INT 0
15153: PUSH
15154: LD_INT 0
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 1
15166: NEG
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 1
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 1
15204: NEG
15205: PUSH
15206: LD_INT 0
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 1
15215: NEG
15216: PUSH
15217: LD_INT 1
15219: NEG
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 1
15227: NEG
15228: PUSH
15229: LD_INT 2
15231: NEG
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: LD_INT 1
15242: NEG
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 2
15250: PUSH
15251: LD_INT 0
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 2
15260: PUSH
15261: LD_INT 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: LD_INT 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 0
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 1
15290: NEG
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 2
15301: NEG
15302: PUSH
15303: LD_INT 0
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 2
15312: NEG
15313: PUSH
15314: LD_INT 1
15316: NEG
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: NEG
15325: PUSH
15326: LD_INT 2
15328: NEG
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 2
15336: NEG
15337: PUSH
15338: LD_INT 3
15340: NEG
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 2
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 3
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 1
15379: NEG
15380: PUSH
15381: LD_INT 2
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 3
15390: NEG
15391: PUSH
15392: LD_INT 2
15394: NEG
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15425: LD_ADDR_VAR 0 34
15429: PUSH
15430: LD_INT 0
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: LD_INT 1
15445: NEG
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 0
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 1
15483: NEG
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 1
15494: NEG
15495: PUSH
15496: LD_INT 1
15498: NEG
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: LD_INT 2
15510: NEG
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 0
15518: PUSH
15519: LD_INT 2
15521: NEG
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: LD_INT 1
15532: NEG
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 2
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 1
15570: NEG
15571: PUSH
15572: LD_INT 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 2
15581: NEG
15582: PUSH
15583: LD_INT 0
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 2
15592: NEG
15593: PUSH
15594: LD_INT 1
15596: NEG
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 2
15604: NEG
15605: PUSH
15606: LD_INT 2
15608: NEG
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 1
15616: NEG
15617: PUSH
15618: LD_INT 3
15620: NEG
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: LD_INT 2
15631: NEG
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 3
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: LD_INT 3
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 2
15659: NEG
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 3
15670: NEG
15671: PUSH
15672: LD_INT 1
15674: NEG
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15705: LD_ADDR_VAR 0 35
15709: PUSH
15710: LD_INT 0
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: LD_INT 1
15725: NEG
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: LD_INT 0
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: LD_INT 1
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 1
15763: NEG
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 1
15774: NEG
15775: PUSH
15776: LD_INT 1
15778: NEG
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 2
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 2
15796: NEG
15797: PUSH
15798: LD_INT 1
15800: NEG
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15817: LD_ADDR_VAR 0 36
15821: PUSH
15822: LD_INT 0
15824: PUSH
15825: LD_INT 0
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: LD_INT 1
15837: NEG
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: LD_INT 0
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 1
15875: NEG
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 1
15886: NEG
15887: PUSH
15888: LD_INT 1
15890: NEG
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: LD_INT 2
15902: NEG
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15929: LD_ADDR_VAR 0 37
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 0
15946: PUSH
15947: LD_INT 1
15949: NEG
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 1
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: NEG
15988: PUSH
15989: LD_INT 0
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 1
15998: NEG
15999: PUSH
16000: LD_INT 1
16002: NEG
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: LD_INT 1
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 1
16021: NEG
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16041: LD_ADDR_VAR 0 38
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 1
16061: NEG
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 1
16099: NEG
16100: PUSH
16101: LD_INT 0
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 1
16110: NEG
16111: PUSH
16112: LD_INT 1
16114: NEG
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 2
16132: NEG
16133: PUSH
16134: LD_INT 1
16136: NEG
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16153: LD_ADDR_VAR 0 39
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 1
16173: NEG
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: NEG
16212: PUSH
16213: LD_INT 0
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 1
16222: NEG
16223: PUSH
16224: LD_INT 1
16226: NEG
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 1
16234: NEG
16235: PUSH
16236: LD_INT 2
16238: NEG
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: LD_INT 2
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16265: LD_ADDR_VAR 0 40
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: LD_INT 0
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 1
16285: NEG
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: NEG
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 1
16334: NEG
16335: PUSH
16336: LD_INT 1
16338: NEG
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: LD_INT 1
16349: NEG
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16377: LD_ADDR_VAR 0 41
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: LD_INT 1
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: NEG
16436: PUSH
16437: LD_INT 0
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: LD_INT 2
16462: NEG
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 1
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 1
16521: NEG
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 2
16532: NEG
16533: PUSH
16534: LD_INT 0
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 2
16543: NEG
16544: PUSH
16545: LD_INT 1
16547: NEG
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: LD_INT 2
16559: NEG
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 2
16567: NEG
16568: PUSH
16569: LD_INT 3
16571: NEG
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 3
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 3
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: LD_INT 3
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 3
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: NEG
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 3
16651: NEG
16652: PUSH
16653: LD_INT 0
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 3
16662: NEG
16663: PUSH
16664: LD_INT 1
16666: NEG
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 3
16674: NEG
16675: PUSH
16676: LD_INT 2
16678: NEG
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 3
16686: NEG
16687: PUSH
16688: LD_INT 3
16690: NEG
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16727: LD_ADDR_VAR 0 42
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: LD_INT 1
16747: NEG
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 0
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 1
16796: NEG
16797: PUSH
16798: LD_INT 1
16800: NEG
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: LD_INT 2
16812: NEG
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 0
16820: PUSH
16821: LD_INT 2
16823: NEG
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: LD_INT 1
16834: NEG
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: LD_INT 1
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 0
16872: PUSH
16873: LD_INT 2
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: LD_INT 1
16897: NEG
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: NEG
16906: PUSH
16907: LD_INT 2
16909: NEG
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: NEG
16918: PUSH
16919: LD_INT 3
16921: NEG
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: NEG
16930: PUSH
16931: LD_INT 3
16933: NEG
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 0
16941: PUSH
16942: LD_INT 3
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: LD_INT 2
16955: NEG
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 3
16973: PUSH
16974: LD_INT 3
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 2
16983: PUSH
16984: LD_INT 3
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: PUSH
16994: LD_INT 3
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: LD_INT 3
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: PUSH
17015: LD_INT 2
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 3
17024: NEG
17025: PUSH
17026: LD_INT 2
17028: NEG
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 3
17036: NEG
17037: PUSH
17038: LD_INT 3
17040: NEG
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17077: LD_ADDR_VAR 0 43
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 0
17094: PUSH
17095: LD_INT 1
17097: NEG
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: NEG
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 1
17158: NEG
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 2
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 2
17192: PUSH
17193: LD_INT 0
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: NEG
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 2
17243: NEG
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 2
17254: NEG
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: NEG
17267: PUSH
17268: LD_INT 3
17270: NEG
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: LD_INT 3
17281: NEG
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: LD_INT 2
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 3
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 3
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: NEG
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 3
17373: NEG
17374: PUSH
17375: LD_INT 0
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 3
17384: NEG
17385: PUSH
17386: LD_INT 1
17388: NEG
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17425: LD_ADDR_VAR 0 44
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 0
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: NEG
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 1
17494: NEG
17495: PUSH
17496: LD_INT 1
17498: NEG
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 1
17521: NEG
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 1
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 2
17580: NEG
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 2
17591: NEG
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: LD_INT 2
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 2
17615: NEG
17616: PUSH
17617: LD_INT 3
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 3
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 3
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 3
17668: PUSH
17669: LD_INT 3
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 2
17688: NEG
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 3
17699: NEG
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 3
17710: NEG
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 3
17722: NEG
17723: PUSH
17724: LD_INT 2
17726: NEG
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 3
17734: NEG
17735: PUSH
17736: LD_INT 3
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17775: LD_ADDR_VAR 0 45
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: LD_INT 1
17795: NEG
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: LD_INT 2
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: LD_INT 2
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: LD_INT 1
17882: NEG
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: NEG
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: NEG
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: LD_INT 2
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: LD_INT 3
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: LD_INT 3
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 3
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 3
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 3
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 3
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: NEG
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 3
18072: NEG
18073: PUSH
18074: LD_INT 2
18076: NEG
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 3
18084: NEG
18085: PUSH
18086: LD_INT 3
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18125: LD_ADDR_VAR 0 46
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: LD_INT 1
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: LD_INT 1
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 2
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: NEG
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: NEG
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: LD_INT 3
18318: NEG
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 3
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: LD_INT 3
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: NEG
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 2
18410: NEG
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 3
18421: NEG
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 3
18432: NEG
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18473: LD_ADDR_VAR 0 47
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 1
18542: NEG
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 2
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 1
18580: NEG
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18624: LD_ADDR_VAR 0 48
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 0
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18771: LD_ADDR_VAR 0 49
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 1
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18915: LD_ADDR_VAR 0 50
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19059: LD_ADDR_VAR 0 51
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: NEG
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19206: LD_ADDR_VAR 0 52
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: LD_INT 0
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: NEG
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19357: LD_ADDR_VAR 0 53
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: NEG
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19587: LD_ADDR_VAR 0 54
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: LD_INT 2
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19817: LD_ADDR_VAR 0 55
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20047: LD_ADDR_VAR 0 56
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20277: LD_ADDR_VAR 0 57
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: NEG
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20507: LD_ADDR_VAR 0 58
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20737: LD_ADDR_VAR 0 59
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20825: LD_ADDR_VAR 0 60
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20913: LD_ADDR_VAR 0 61
20917: PUSH
20918: LD_INT 0
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21001: LD_ADDR_VAR 0 62
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21089: LD_ADDR_VAR 0 63
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21177: LD_ADDR_VAR 0 64
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// end ; 1 :
21265: GO 27162
21267: LD_INT 1
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 23898
21275: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21276: LD_ADDR_VAR 0 11
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 3
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: LD_INT 3
21298: NEG
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 2
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21320: LD_ADDR_VAR 0 12
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 3
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 3
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21361: LD_ADDR_VAR 0 13
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 3
21378: PUSH
21379: LD_INT 3
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 3
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21401: LD_ADDR_VAR 0 14
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 3
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21442: LD_ADDR_VAR 0 15
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 3
21460: NEG
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 3
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21486: LD_ADDR_VAR 0 16
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: LD_INT 3
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: NEG
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 3
21517: NEG
21518: PUSH
21519: LD_INT 3
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21532: LD_ADDR_VAR 0 17
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 3
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 0
21551: PUSH
21552: LD_INT 3
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21576: LD_ADDR_VAR 0 18
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 3
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21617: LD_ADDR_VAR 0 19
21621: PUSH
21622: LD_INT 3
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 3
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21657: LD_ADDR_VAR 0 20
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 3
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21698: LD_ADDR_VAR 0 21
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: NEG
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 3
21727: NEG
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: LIST
21741: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21742: LD_ADDR_VAR 0 22
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: LD_INT 3
21753: NEG
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 3
21761: NEG
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 3
21773: NEG
21774: PUSH
21775: LD_INT 3
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21788: LD_ADDR_VAR 0 23
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: LD_INT 3
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: LD_INT 4
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 3
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21832: LD_ADDR_VAR 0 24
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 4
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21873: LD_ADDR_VAR 0 25
21877: PUSH
21878: LD_INT 3
21880: PUSH
21881: LD_INT 3
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 4
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: LD_INT 4
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21913: LD_ADDR_VAR 0 26
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 3
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 4
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21954: LD_ADDR_VAR 0 27
21958: PUSH
21959: LD_INT 3
21961: NEG
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 3
21972: NEG
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 4
21983: NEG
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
21998: LD_ADDR_VAR 0 28
22002: PUSH
22003: LD_INT 3
22005: NEG
22006: PUSH
22007: LD_INT 3
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 3
22017: NEG
22018: PUSH
22019: LD_INT 4
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 4
22029: NEG
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22044: LD_ADDR_VAR 0 29
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 3
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 3
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 2
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: LD_INT 4
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: LD_INT 4
22100: NEG
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 3
22111: NEG
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 5
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 5
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 4
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 6
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 6
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 5
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22199: LD_ADDR_VAR 0 30
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 4
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 4
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 4
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 5
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 6
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 6
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22342: LD_ADDR_VAR 0 31
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 3
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 4
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 4
22389: PUSH
22390: LD_INT 4
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: LD_INT 4
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 5
22419: PUSH
22420: LD_INT 5
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 4
22429: PUSH
22430: LD_INT 5
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 6
22439: PUSH
22440: LD_INT 5
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 6
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 5
22459: PUSH
22460: LD_INT 6
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22481: LD_ADDR_VAR 0 32
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 3
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 3
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 5
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: LD_INT 5
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: LD_INT 4
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 6
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 6
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22624: LD_ADDR_VAR 0 33
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 3
22642: NEG
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 3
22653: NEG
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 3
22665: NEG
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 4
22676: NEG
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 4
22687: NEG
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 4
22699: NEG
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 5
22710: NEG
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 5
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 5
22733: NEG
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 6
22744: NEG
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 6
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22779: LD_ADDR_VAR 0 34
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: LD_INT 3
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 3
22798: NEG
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 3
22810: NEG
22811: PUSH
22812: LD_INT 3
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 3
22822: NEG
22823: PUSH
22824: LD_INT 4
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 4
22834: NEG
22835: PUSH
22836: LD_INT 3
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 4
22846: NEG
22847: PUSH
22848: LD_INT 4
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 4
22858: NEG
22859: PUSH
22860: LD_INT 5
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 5
22870: NEG
22871: PUSH
22872: LD_INT 4
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 5
22882: NEG
22883: PUSH
22884: LD_INT 5
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 5
22894: NEG
22895: PUSH
22896: LD_INT 6
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 6
22906: NEG
22907: PUSH
22908: LD_INT 5
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 6
22918: NEG
22919: PUSH
22920: LD_INT 6
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22942: LD_ADDR_VAR 0 41
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: LD_INT 3
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
22986: LD_ADDR_VAR 0 42
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23027: LD_ADDR_VAR 0 43
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 3
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23067: LD_ADDR_VAR 0 44
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23108: LD_ADDR_VAR 0 45
23112: PUSH
23113: LD_INT 2
23115: NEG
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 3
23137: NEG
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23152: LD_ADDR_VAR 0 46
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 3
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 3
23183: NEG
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23198: LD_ADDR_VAR 0 47
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 3
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 3
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23231: LD_ADDR_VAR 0 48
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23262: LD_ADDR_VAR 0 49
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 3
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23291: LD_ADDR_VAR 0 50
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23320: LD_ADDR_VAR 0 51
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23351: LD_ADDR_VAR 0 52
23355: PUSH
23356: LD_INT 3
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 3
23370: NEG
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23384: LD_ADDR_VAR 0 53
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 3
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 3
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23428: LD_ADDR_VAR 0 54
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23469: LD_ADDR_VAR 0 55
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 3
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23509: LD_ADDR_VAR 0 56
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23550: LD_ADDR_VAR 0 57
23554: PUSH
23555: LD_INT 2
23557: NEG
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 3
23568: NEG
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 3
23579: NEG
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23594: LD_ADDR_VAR 0 58
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 3
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 3
23613: NEG
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 3
23625: NEG
23626: PUSH
23627: LD_INT 3
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23640: LD_ADDR_VAR 0 59
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23684: LD_ADDR_VAR 0 60
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23725: LD_ADDR_VAR 0 61
23729: PUSH
23730: LD_INT 2
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23765: LD_ADDR_VAR 0 62
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23806: LD_ADDR_VAR 0 63
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 2
23824: NEG
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23850: LD_ADDR_VAR 0 64
23854: PUSH
23855: LD_INT 1
23857: NEG
23858: PUSH
23859: LD_INT 2
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 2
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: ST_TO_ADDR
// end ; 2 :
23896: GO 27162
23898: LD_INT 2
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 27161
23906: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23907: LD_ADDR_VAR 0 29
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 5
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 5
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 4
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 3
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 5
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 4
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 4
24037: PUSH
24038: LD_INT 4
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: LD_INT 4
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 3
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 4
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 4
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 4
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 5
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 5
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 4
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 3
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: LD_INT 5
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: NEG
24180: PUSH
24181: LD_INT 3
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 3
24190: NEG
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: NEG
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 3
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 4
24246: NEG
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 4
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 4
24269: NEG
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 4
24292: NEG
24293: PUSH
24294: LD_INT 4
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 4
24304: NEG
24305: PUSH
24306: LD_INT 5
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 3
24316: NEG
24317: PUSH
24318: LD_INT 4
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: LD_INT 3
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 4
24340: NEG
24341: PUSH
24342: LD_INT 3
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 5
24352: NEG
24353: PUSH
24354: LD_INT 4
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 5
24364: NEG
24365: PUSH
24366: LD_INT 5
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 3
24376: NEG
24377: PUSH
24378: LD_INT 5
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 5
24388: NEG
24389: PUSH
24390: LD_INT 3
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24445: LD_ADDR_VAR 0 30
24449: PUSH
24450: LD_INT 4
24452: PUSH
24453: LD_INT 4
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 4
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 5
24472: PUSH
24473: LD_INT 4
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 5
24482: PUSH
24483: LD_INT 5
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 4
24492: PUSH
24493: LD_INT 5
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: LD_INT 4
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 3
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 5
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 3
24532: PUSH
24533: LD_INT 5
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 3
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: LD_INT 4
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: LD_INT 4
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 4
24635: NEG
24636: PUSH
24637: LD_INT 0
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 4
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: NEG
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 3
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 4
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 5
24691: NEG
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 5
24702: NEG
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 5
24714: NEG
24715: PUSH
24716: LD_INT 2
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 3
24726: NEG
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: LD_INT 3
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: NEG
24750: PUSH
24751: LD_INT 4
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: LD_INT 2
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 4
24797: NEG
24798: PUSH
24799: LD_INT 3
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 4
24809: NEG
24810: PUSH
24811: LD_INT 4
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: NEG
24822: PUSH
24823: LD_INT 4
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 4
24833: NEG
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: LD_INT 4
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 5
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 4
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 3
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 3
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 4
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: LD_INT 5
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 3
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: LD_INT 5
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
24992: LD_ADDR_VAR 0 31
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: LD_INT 4
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: LD_INT 4
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 5
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 5
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 4
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 5
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: LD_INT 3
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 3
25092: NEG
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 3
25103: NEG
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 2
25115: NEG
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: NEG
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 3
25137: NEG
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 4
25148: NEG
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 4
25159: NEG
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 4
25171: NEG
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 4
25194: NEG
25195: PUSH
25196: LD_INT 4
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 4
25206: NEG
25207: PUSH
25208: LD_INT 5
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 3
25218: NEG
25219: PUSH
25220: LD_INT 4
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 3
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 4
25242: NEG
25243: PUSH
25244: LD_INT 3
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 5
25254: NEG
25255: PUSH
25256: LD_INT 4
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 5
25266: NEG
25267: PUSH
25268: LD_INT 5
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 3
25278: NEG
25279: PUSH
25280: LD_INT 5
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 5
25290: NEG
25291: PUSH
25292: LD_INT 3
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 3
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 4
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 3
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 4
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: LD_INT 4
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 4
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 4
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 5
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 4
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 3
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 5
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25542: LD_ADDR_VAR 0 32
25546: PUSH
25547: LD_INT 4
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 4
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 3
25572: NEG
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 3
25583: NEG
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 4
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 5
25605: NEG
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 5
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 5
25628: NEG
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: LD_INT 3
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: LD_INT 4
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: NEG
25700: PUSH
25701: LD_INT 2
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 4
25711: NEG
25712: PUSH
25713: LD_INT 3
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 4
25723: NEG
25724: PUSH
25725: LD_INT 4
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 4
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 4
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 4
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 5
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: LD_INT 4
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: LD_INT 4
25818: NEG
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: LD_INT 5
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: LD_INT 5
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 3
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 4
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 4
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 4
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 4
25954: PUSH
25955: LD_INT 4
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 4
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 5
25974: PUSH
25975: LD_INT 4
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 5
25984: PUSH
25985: LD_INT 5
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 4
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: LD_INT 4
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: LD_INT 3
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 5
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: LD_INT 5
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26089: LD_ADDR_VAR 0 33
26093: PUSH
26094: LD_INT 4
26096: NEG
26097: PUSH
26098: LD_INT 4
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 4
26108: NEG
26109: PUSH
26110: LD_INT 5
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 3
26120: NEG
26121: PUSH
26122: LD_INT 4
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: NEG
26133: PUSH
26134: LD_INT 3
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 4
26144: NEG
26145: PUSH
26146: LD_INT 3
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 5
26156: NEG
26157: PUSH
26158: LD_INT 4
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 5
26168: NEG
26169: PUSH
26170: LD_INT 5
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: NEG
26181: PUSH
26182: LD_INT 5
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 5
26192: NEG
26193: PUSH
26194: LD_INT 3
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: LD_INT 3
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 4
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: LD_INT 3
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: LD_INT 4
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: LD_INT 4
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 4
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 4
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 5
26327: PUSH
26328: LD_INT 0
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 5
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 4
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 3
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 5
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 4
26419: PUSH
26420: LD_INT 3
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 4
26429: PUSH
26430: LD_INT 4
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: LD_INT 4
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 4
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 4
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 4
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 4
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 5
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 5
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 4
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 3
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 5
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: LD_INT 3
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26627: LD_ADDR_VAR 0 34
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 4
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 5
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 4
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 3
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 3
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: LD_INT 4
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: LD_INT 5
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 3
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: LD_INT 5
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 3
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 3
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 4
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 4
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 3
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 2
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 4
26819: PUSH
26820: LD_INT 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 4
26829: PUSH
26830: LD_INT 4
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 4
26839: PUSH
26840: LD_INT 3
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 5
26849: PUSH
26850: LD_INT 4
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 5
26859: PUSH
26860: LD_INT 5
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 4
26869: PUSH
26870: LD_INT 5
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: LD_INT 4
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: LD_INT 3
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: LD_INT 5
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 3
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 3
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 4
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 4
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 3
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 4
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 4
27012: NEG
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 4
27023: NEG
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 3
27035: NEG
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 3
27046: NEG
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 4
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 5
27068: NEG
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 5
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 5
27091: NEG
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 3
27103: NEG
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: ST_TO_ADDR
// end ; end ;
27159: GO 27162
27161: POP
// case btype of b_depot , b_warehouse :
27162: LD_VAR 0 1
27166: PUSH
27167: LD_INT 0
27169: DOUBLE
27170: EQUAL
27171: IFTRUE 27181
27173: LD_INT 1
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27382
27181: POP
// case nation of nation_american :
27182: LD_VAR 0 5
27186: PUSH
27187: LD_INT 1
27189: DOUBLE
27190: EQUAL
27191: IFTRUE 27195
27193: GO 27251
27195: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27196: LD_ADDR_VAR 0 9
27200: PUSH
27201: LD_VAR 0 11
27205: PUSH
27206: LD_VAR 0 12
27210: PUSH
27211: LD_VAR 0 13
27215: PUSH
27216: LD_VAR 0 14
27220: PUSH
27221: LD_VAR 0 15
27225: PUSH
27226: LD_VAR 0 16
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: PUSH
27239: LD_VAR 0 4
27243: PUSH
27244: LD_INT 1
27246: PLUS
27247: ARRAY
27248: ST_TO_ADDR
27249: GO 27380
27251: LD_INT 2
27253: DOUBLE
27254: EQUAL
27255: IFTRUE 27259
27257: GO 27315
27259: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27260: LD_ADDR_VAR 0 9
27264: PUSH
27265: LD_VAR 0 17
27269: PUSH
27270: LD_VAR 0 18
27274: PUSH
27275: LD_VAR 0 19
27279: PUSH
27280: LD_VAR 0 20
27284: PUSH
27285: LD_VAR 0 21
27289: PUSH
27290: LD_VAR 0 22
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: PUSH
27303: LD_VAR 0 4
27307: PUSH
27308: LD_INT 1
27310: PLUS
27311: ARRAY
27312: ST_TO_ADDR
27313: GO 27380
27315: LD_INT 3
27317: DOUBLE
27318: EQUAL
27319: IFTRUE 27323
27321: GO 27379
27323: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27324: LD_ADDR_VAR 0 9
27328: PUSH
27329: LD_VAR 0 23
27333: PUSH
27334: LD_VAR 0 24
27338: PUSH
27339: LD_VAR 0 25
27343: PUSH
27344: LD_VAR 0 26
27348: PUSH
27349: LD_VAR 0 27
27353: PUSH
27354: LD_VAR 0 28
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: PUSH
27367: LD_VAR 0 4
27371: PUSH
27372: LD_INT 1
27374: PLUS
27375: ARRAY
27376: ST_TO_ADDR
27377: GO 27380
27379: POP
27380: GO 27929
27382: LD_INT 2
27384: DOUBLE
27385: EQUAL
27386: IFTRUE 27396
27388: LD_INT 3
27390: DOUBLE
27391: EQUAL
27392: IFTRUE 27396
27394: GO 27452
27396: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27397: LD_ADDR_VAR 0 9
27401: PUSH
27402: LD_VAR 0 29
27406: PUSH
27407: LD_VAR 0 30
27411: PUSH
27412: LD_VAR 0 31
27416: PUSH
27417: LD_VAR 0 32
27421: PUSH
27422: LD_VAR 0 33
27426: PUSH
27427: LD_VAR 0 34
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: PUSH
27440: LD_VAR 0 4
27444: PUSH
27445: LD_INT 1
27447: PLUS
27448: ARRAY
27449: ST_TO_ADDR
27450: GO 27929
27452: LD_INT 16
27454: DOUBLE
27455: EQUAL
27456: IFTRUE 27508
27458: LD_INT 17
27460: DOUBLE
27461: EQUAL
27462: IFTRUE 27508
27464: LD_INT 18
27466: DOUBLE
27467: EQUAL
27468: IFTRUE 27508
27470: LD_INT 19
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27508
27476: LD_INT 20
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27508
27482: LD_INT 21
27484: DOUBLE
27485: EQUAL
27486: IFTRUE 27508
27488: LD_INT 23
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27508
27494: LD_INT 24
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27508
27500: LD_INT 25
27502: DOUBLE
27503: EQUAL
27504: IFTRUE 27508
27506: GO 27564
27508: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27509: LD_ADDR_VAR 0 9
27513: PUSH
27514: LD_VAR 0 35
27518: PUSH
27519: LD_VAR 0 36
27523: PUSH
27524: LD_VAR 0 37
27528: PUSH
27529: LD_VAR 0 38
27533: PUSH
27534: LD_VAR 0 39
27538: PUSH
27539: LD_VAR 0 40
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: PUSH
27552: LD_VAR 0 4
27556: PUSH
27557: LD_INT 1
27559: PLUS
27560: ARRAY
27561: ST_TO_ADDR
27562: GO 27929
27564: LD_INT 6
27566: DOUBLE
27567: EQUAL
27568: IFTRUE 27620
27570: LD_INT 7
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27620
27576: LD_INT 8
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27620
27582: LD_INT 13
27584: DOUBLE
27585: EQUAL
27586: IFTRUE 27620
27588: LD_INT 12
27590: DOUBLE
27591: EQUAL
27592: IFTRUE 27620
27594: LD_INT 15
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27620
27600: LD_INT 11
27602: DOUBLE
27603: EQUAL
27604: IFTRUE 27620
27606: LD_INT 14
27608: DOUBLE
27609: EQUAL
27610: IFTRUE 27620
27612: LD_INT 10
27614: DOUBLE
27615: EQUAL
27616: IFTRUE 27620
27618: GO 27676
27620: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27621: LD_ADDR_VAR 0 9
27625: PUSH
27626: LD_VAR 0 41
27630: PUSH
27631: LD_VAR 0 42
27635: PUSH
27636: LD_VAR 0 43
27640: PUSH
27641: LD_VAR 0 44
27645: PUSH
27646: LD_VAR 0 45
27650: PUSH
27651: LD_VAR 0 46
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: PUSH
27664: LD_VAR 0 4
27668: PUSH
27669: LD_INT 1
27671: PLUS
27672: ARRAY
27673: ST_TO_ADDR
27674: GO 27929
27676: LD_INT 36
27678: DOUBLE
27679: EQUAL
27680: IFTRUE 27684
27682: GO 27740
27684: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27685: LD_ADDR_VAR 0 9
27689: PUSH
27690: LD_VAR 0 47
27694: PUSH
27695: LD_VAR 0 48
27699: PUSH
27700: LD_VAR 0 49
27704: PUSH
27705: LD_VAR 0 50
27709: PUSH
27710: LD_VAR 0 51
27714: PUSH
27715: LD_VAR 0 52
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: PUSH
27728: LD_VAR 0 4
27732: PUSH
27733: LD_INT 1
27735: PLUS
27736: ARRAY
27737: ST_TO_ADDR
27738: GO 27929
27740: LD_INT 4
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27766
27746: LD_INT 5
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27766
27752: LD_INT 34
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27766
27758: LD_INT 37
27760: DOUBLE
27761: EQUAL
27762: IFTRUE 27766
27764: GO 27822
27766: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27767: LD_ADDR_VAR 0 9
27771: PUSH
27772: LD_VAR 0 53
27776: PUSH
27777: LD_VAR 0 54
27781: PUSH
27782: LD_VAR 0 55
27786: PUSH
27787: LD_VAR 0 56
27791: PUSH
27792: LD_VAR 0 57
27796: PUSH
27797: LD_VAR 0 58
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: PUSH
27810: LD_VAR 0 4
27814: PUSH
27815: LD_INT 1
27817: PLUS
27818: ARRAY
27819: ST_TO_ADDR
27820: GO 27929
27822: LD_INT 31
27824: DOUBLE
27825: EQUAL
27826: IFTRUE 27872
27828: LD_INT 32
27830: DOUBLE
27831: EQUAL
27832: IFTRUE 27872
27834: LD_INT 33
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27872
27840: LD_INT 27
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27872
27846: LD_INT 26
27848: DOUBLE
27849: EQUAL
27850: IFTRUE 27872
27852: LD_INT 28
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27872
27858: LD_INT 29
27860: DOUBLE
27861: EQUAL
27862: IFTRUE 27872
27864: LD_INT 30
27866: DOUBLE
27867: EQUAL
27868: IFTRUE 27872
27870: GO 27928
27872: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27873: LD_ADDR_VAR 0 9
27877: PUSH
27878: LD_VAR 0 59
27882: PUSH
27883: LD_VAR 0 60
27887: PUSH
27888: LD_VAR 0 61
27892: PUSH
27893: LD_VAR 0 62
27897: PUSH
27898: LD_VAR 0 63
27902: PUSH
27903: LD_VAR 0 64
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: PUSH
27916: LD_VAR 0 4
27920: PUSH
27921: LD_INT 1
27923: PLUS
27924: ARRAY
27925: ST_TO_ADDR
27926: GO 27929
27928: POP
// temp_list2 = [ ] ;
27929: LD_ADDR_VAR 0 10
27933: PUSH
27934: EMPTY
27935: ST_TO_ADDR
// for i in temp_list do
27936: LD_ADDR_VAR 0 8
27940: PUSH
27941: LD_VAR 0 9
27945: PUSH
27946: FOR_IN
27947: IFFALSE 27999
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27949: LD_ADDR_VAR 0 10
27953: PUSH
27954: LD_VAR 0 10
27958: PUSH
27959: LD_VAR 0 8
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PUSH
27968: LD_VAR 0 2
27972: PLUS
27973: PUSH
27974: LD_VAR 0 8
27978: PUSH
27979: LD_INT 2
27981: ARRAY
27982: PUSH
27983: LD_VAR 0 3
27987: PLUS
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: ADD
27996: ST_TO_ADDR
27997: GO 27946
27999: POP
28000: POP
// result = temp_list2 ;
28001: LD_ADDR_VAR 0 7
28005: PUSH
28006: LD_VAR 0 10
28010: ST_TO_ADDR
// end ;
28011: LD_VAR 0 7
28015: RET
// export function EnemyInRange ( unit , dist ) ; begin
28016: LD_INT 0
28018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_VAR 0 1
28028: PPUSH
28029: CALL_OW 255
28033: PPUSH
28034: LD_VAR 0 1
28038: PPUSH
28039: CALL_OW 250
28043: PPUSH
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 251
28053: PPUSH
28054: LD_VAR 0 2
28058: PPUSH
28059: CALL 3650 0 4
28063: PUSH
28064: LD_INT 4
28066: ARRAY
28067: ST_TO_ADDR
// end ;
28068: LD_VAR 0 3
28072: RET
// export function PlayerSeeMe ( unit ) ; begin
28073: LD_INT 0
28075: PPUSH
// result := See ( your_side , unit ) ;
28076: LD_ADDR_VAR 0 2
28080: PUSH
28081: LD_OWVAR 2
28085: PPUSH
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 292
28095: ST_TO_ADDR
// end ;
28096: LD_VAR 0 2
28100: RET
// export function ReverseDir ( unit ) ; begin
28101: LD_INT 0
28103: PPUSH
// if not unit then
28104: LD_VAR 0 1
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 28159
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_INT 3
28120: PUSH
28121: LD_INT 4
28123: PUSH
28124: LD_INT 5
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: PUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 254
28153: PUSH
28154: LD_INT 1
28156: PLUS
28157: ARRAY
28158: ST_TO_ADDR
// end ;
28159: LD_VAR 0 2
28163: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28164: LD_INT 0
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
// if not hexes then
28171: LD_VAR 0 2
28175: NOT
28176: IFFALSE 28180
// exit ;
28178: GO 28328
// dist := 9999 ;
28180: LD_ADDR_VAR 0 5
28184: PUSH
28185: LD_INT 9999
28187: ST_TO_ADDR
// for i = 1 to hexes do
28188: LD_ADDR_VAR 0 4
28192: PUSH
28193: DOUBLE
28194: LD_INT 1
28196: DEC
28197: ST_TO_ADDR
28198: LD_VAR 0 2
28202: PUSH
28203: FOR_TO
28204: IFFALSE 28316
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28206: LD_VAR 0 1
28210: PPUSH
28211: LD_VAR 0 2
28215: PUSH
28216: LD_VAR 0 4
28220: ARRAY
28221: PUSH
28222: LD_INT 1
28224: ARRAY
28225: PPUSH
28226: LD_VAR 0 2
28230: PUSH
28231: LD_VAR 0 4
28235: ARRAY
28236: PUSH
28237: LD_INT 2
28239: ARRAY
28240: PPUSH
28241: CALL_OW 297
28245: PUSH
28246: LD_VAR 0 5
28250: LESS
28251: IFFALSE 28314
// begin hex := hexes [ i ] ;
28253: LD_ADDR_VAR 0 7
28257: PUSH
28258: LD_VAR 0 2
28262: PUSH
28263: LD_VAR 0 4
28267: ARRAY
28268: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28269: LD_ADDR_VAR 0 5
28273: PUSH
28274: LD_VAR 0 1
28278: PPUSH
28279: LD_VAR 0 2
28283: PUSH
28284: LD_VAR 0 4
28288: ARRAY
28289: PUSH
28290: LD_INT 1
28292: ARRAY
28293: PPUSH
28294: LD_VAR 0 2
28298: PUSH
28299: LD_VAR 0 4
28303: ARRAY
28304: PUSH
28305: LD_INT 2
28307: ARRAY
28308: PPUSH
28309: CALL_OW 297
28313: ST_TO_ADDR
// end ; end ;
28314: GO 28203
28316: POP
28317: POP
// result := hex ;
28318: LD_ADDR_VAR 0 3
28322: PUSH
28323: LD_VAR 0 7
28327: ST_TO_ADDR
// end ;
28328: LD_VAR 0 3
28332: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28337: LD_VAR 0 1
28341: NOT
28342: PUSH
28343: LD_VAR 0 1
28347: PUSH
28348: LD_INT 21
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 23
28360: PUSH
28361: LD_INT 2
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 69
28376: IN
28377: NOT
28378: OR
28379: IFFALSE 28383
// exit ;
28381: GO 28430
// for i = 1 to 3 do
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: DOUBLE
28389: LD_INT 1
28391: DEC
28392: ST_TO_ADDR
28393: LD_INT 3
28395: PUSH
28396: FOR_TO
28397: IFFALSE 28428
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28399: LD_VAR 0 1
28403: PPUSH
28404: CALL_OW 250
28408: PPUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 251
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: CALL_OW 453
28426: GO 28396
28428: POP
28429: POP
// end ;
28430: LD_VAR 0 2
28434: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28435: LD_INT 0
28437: PPUSH
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28443: LD_VAR 0 1
28447: NOT
28448: PUSH
28449: LD_VAR 0 2
28453: NOT
28454: OR
28455: PUSH
28456: LD_VAR 0 1
28460: PPUSH
28461: CALL_OW 314
28465: OR
28466: IFFALSE 28470
// exit ;
28468: GO 28911
// x := GetX ( enemy_unit ) ;
28470: LD_ADDR_VAR 0 7
28474: PUSH
28475: LD_VAR 0 2
28479: PPUSH
28480: CALL_OW 250
28484: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28485: LD_ADDR_VAR 0 8
28489: PUSH
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL_OW 251
28499: ST_TO_ADDR
// if not x or not y then
28500: LD_VAR 0 7
28504: NOT
28505: PUSH
28506: LD_VAR 0 8
28510: NOT
28511: OR
28512: IFFALSE 28516
// exit ;
28514: GO 28911
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28516: LD_ADDR_VAR 0 6
28520: PUSH
28521: LD_VAR 0 7
28525: PPUSH
28526: LD_INT 0
28528: PPUSH
28529: LD_INT 4
28531: PPUSH
28532: CALL_OW 272
28536: PUSH
28537: LD_VAR 0 8
28541: PPUSH
28542: LD_INT 0
28544: PPUSH
28545: LD_INT 4
28547: PPUSH
28548: CALL_OW 273
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_VAR 0 7
28561: PPUSH
28562: LD_INT 1
28564: PPUSH
28565: LD_INT 4
28567: PPUSH
28568: CALL_OW 272
28572: PUSH
28573: LD_VAR 0 8
28577: PPUSH
28578: LD_INT 1
28580: PPUSH
28581: LD_INT 4
28583: PPUSH
28584: CALL_OW 273
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_VAR 0 7
28597: PPUSH
28598: LD_INT 2
28600: PPUSH
28601: LD_INT 4
28603: PPUSH
28604: CALL_OW 272
28608: PUSH
28609: LD_VAR 0 8
28613: PPUSH
28614: LD_INT 2
28616: PPUSH
28617: LD_INT 4
28619: PPUSH
28620: CALL_OW 273
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_VAR 0 7
28633: PPUSH
28634: LD_INT 3
28636: PPUSH
28637: LD_INT 4
28639: PPUSH
28640: CALL_OW 272
28644: PUSH
28645: LD_VAR 0 8
28649: PPUSH
28650: LD_INT 3
28652: PPUSH
28653: LD_INT 4
28655: PPUSH
28656: CALL_OW 273
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_VAR 0 7
28669: PPUSH
28670: LD_INT 4
28672: PPUSH
28673: LD_INT 4
28675: PPUSH
28676: CALL_OW 272
28680: PUSH
28681: LD_VAR 0 8
28685: PPUSH
28686: LD_INT 4
28688: PPUSH
28689: LD_INT 4
28691: PPUSH
28692: CALL_OW 273
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_VAR 0 7
28705: PPUSH
28706: LD_INT 5
28708: PPUSH
28709: LD_INT 4
28711: PPUSH
28712: CALL_OW 272
28716: PUSH
28717: LD_VAR 0 8
28721: PPUSH
28722: LD_INT 5
28724: PPUSH
28725: LD_INT 4
28727: PPUSH
28728: CALL_OW 273
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// for i = tmp downto 1 do
28745: LD_ADDR_VAR 0 4
28749: PUSH
28750: DOUBLE
28751: LD_VAR 0 6
28755: INC
28756: ST_TO_ADDR
28757: LD_INT 1
28759: PUSH
28760: FOR_DOWNTO
28761: IFFALSE 28862
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28763: LD_VAR 0 6
28767: PUSH
28768: LD_VAR 0 4
28772: ARRAY
28773: PUSH
28774: LD_INT 1
28776: ARRAY
28777: PPUSH
28778: LD_VAR 0 6
28782: PUSH
28783: LD_VAR 0 4
28787: ARRAY
28788: PUSH
28789: LD_INT 2
28791: ARRAY
28792: PPUSH
28793: CALL_OW 488
28797: NOT
28798: PUSH
28799: LD_VAR 0 6
28803: PUSH
28804: LD_VAR 0 4
28808: ARRAY
28809: PUSH
28810: LD_INT 1
28812: ARRAY
28813: PPUSH
28814: LD_VAR 0 6
28818: PUSH
28819: LD_VAR 0 4
28823: ARRAY
28824: PUSH
28825: LD_INT 2
28827: ARRAY
28828: PPUSH
28829: CALL_OW 428
28833: PUSH
28834: LD_INT 0
28836: NONEQUAL
28837: OR
28838: IFFALSE 28860
// tmp := Delete ( tmp , i ) ;
28840: LD_ADDR_VAR 0 6
28844: PUSH
28845: LD_VAR 0 6
28849: PPUSH
28850: LD_VAR 0 4
28854: PPUSH
28855: CALL_OW 3
28859: ST_TO_ADDR
28860: GO 28760
28862: POP
28863: POP
// j := GetClosestHex ( unit , tmp ) ;
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_VAR 0 6
28878: PPUSH
28879: CALL 28164 0 2
28883: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28884: LD_VAR 0 1
28888: PPUSH
28889: LD_VAR 0 5
28893: PUSH
28894: LD_INT 1
28896: ARRAY
28897: PPUSH
28898: LD_VAR 0 5
28902: PUSH
28903: LD_INT 2
28905: ARRAY
28906: PPUSH
28907: CALL_OW 111
// end ;
28911: LD_VAR 0 3
28915: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
// uc_side = 0 ;
28922: LD_ADDR_OWVAR 20
28926: PUSH
28927: LD_INT 0
28929: ST_TO_ADDR
// uc_nation = 0 ;
28930: LD_ADDR_OWVAR 21
28934: PUSH
28935: LD_INT 0
28937: ST_TO_ADDR
// nat_area := natureArea ;
28938: LD_ADDR_VAR 0 4
28942: PUSH
28943: LD_INT 18
28945: ST_TO_ADDR
// InitHc ;
28946: CALL_OW 19
// for i = 1 to 4 do
28950: LD_ADDR_VAR 0 2
28954: PUSH
28955: DOUBLE
28956: LD_INT 1
28958: DEC
28959: ST_TO_ADDR
28960: LD_INT 4
28962: PUSH
28963: FOR_TO
28964: IFFALSE 29011
// begin hc_class = 18 ;
28966: LD_ADDR_OWVAR 28
28970: PUSH
28971: LD_INT 18
28973: ST_TO_ADDR
// hc_gallery =  ;
28974: LD_ADDR_OWVAR 33
28978: PUSH
28979: LD_STRING 
28981: ST_TO_ADDR
// animal := CreateHuman ;
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: CALL_OW 44
28991: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28992: LD_VAR 0 3
28996: PPUSH
28997: LD_VAR 0 4
29001: PPUSH
29002: LD_INT 0
29004: PPUSH
29005: CALL_OW 49
// end ;
29009: GO 28963
29011: POP
29012: POP
// for i = 1 to 3 do
29013: LD_ADDR_VAR 0 2
29017: PUSH
29018: DOUBLE
29019: LD_INT 1
29021: DEC
29022: ST_TO_ADDR
29023: LD_INT 3
29025: PUSH
29026: FOR_TO
29027: IFFALSE 29091
// begin hc_class = class_tiger ;
29029: LD_ADDR_OWVAR 28
29033: PUSH
29034: LD_INT 14
29036: ST_TO_ADDR
// hc_gallery =  ;
29037: LD_ADDR_OWVAR 33
29041: PUSH
29042: LD_STRING 
29044: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29045: LD_ADDR_OWVAR 35
29049: PUSH
29050: LD_INT 5
29052: NEG
29053: PPUSH
29054: LD_INT 5
29056: PPUSH
29057: CALL_OW 12
29061: ST_TO_ADDR
// animal := CreateHuman ;
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: CALL_OW 44
29071: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29072: LD_VAR 0 3
29076: PPUSH
29077: LD_VAR 0 4
29081: PPUSH
29082: LD_INT 0
29084: PPUSH
29085: CALL_OW 49
// end ;
29089: GO 29026
29091: POP
29092: POP
// for i = 1 to 5 do
29093: LD_ADDR_VAR 0 2
29097: PUSH
29098: DOUBLE
29099: LD_INT 1
29101: DEC
29102: ST_TO_ADDR
29103: LD_INT 5
29105: PUSH
29106: FOR_TO
29107: IFFALSE 29210
// begin hc_class = class_apeman ;
29109: LD_ADDR_OWVAR 28
29113: PUSH
29114: LD_INT 12
29116: ST_TO_ADDR
// hc_gallery =  ;
29117: LD_ADDR_OWVAR 33
29121: PUSH
29122: LD_STRING 
29124: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29125: LD_ADDR_OWVAR 35
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PPUSH
29134: LD_INT 2
29136: PPUSH
29137: CALL_OW 12
29141: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29142: LD_ADDR_OWVAR 31
29146: PUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_INT 3
29152: PPUSH
29153: CALL_OW 12
29157: PUSH
29158: LD_INT 1
29160: PPUSH
29161: LD_INT 3
29163: PPUSH
29164: CALL_OW 12
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// animal := CreateHuman ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: CALL_OW 44
29190: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29191: LD_VAR 0 3
29195: PPUSH
29196: LD_VAR 0 4
29200: PPUSH
29201: LD_INT 0
29203: PPUSH
29204: CALL_OW 49
// end ;
29208: GO 29106
29210: POP
29211: POP
// for i = 1 to 3 do
29212: LD_ADDR_VAR 0 2
29216: PUSH
29217: DOUBLE
29218: LD_INT 1
29220: DEC
29221: ST_TO_ADDR
29222: LD_INT 3
29224: PUSH
29225: FOR_TO
29226: IFFALSE 29273
// begin hc_class = 13 ;
29228: LD_ADDR_OWVAR 28
29232: PUSH
29233: LD_INT 13
29235: ST_TO_ADDR
// hc_gallery =  ;
29236: LD_ADDR_OWVAR 33
29240: PUSH
29241: LD_STRING 
29243: ST_TO_ADDR
// animal := CreateHuman ;
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: CALL_OW 44
29253: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29254: LD_VAR 0 3
29258: PPUSH
29259: LD_VAR 0 4
29263: PPUSH
29264: LD_INT 0
29266: PPUSH
29267: CALL_OW 49
// end ;
29271: GO 29225
29273: POP
29274: POP
// for i = 1 to 7 do
29275: LD_ADDR_VAR 0 2
29279: PUSH
29280: DOUBLE
29281: LD_INT 1
29283: DEC
29284: ST_TO_ADDR
29285: LD_INT 7
29287: PUSH
29288: FOR_TO
29289: IFFALSE 29334
// begin hc_class = 20 ;
29291: LD_ADDR_OWVAR 28
29295: PUSH
29296: LD_INT 20
29298: ST_TO_ADDR
// hc_gallery =  ;
29299: LD_ADDR_OWVAR 33
29303: PUSH
29304: LD_STRING 
29306: ST_TO_ADDR
// animal := CreateHuman ;
29307: LD_ADDR_VAR 0 3
29311: PUSH
29312: CALL_OW 44
29316: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29317: LD_VAR 0 3
29321: PPUSH
29322: LD_INT 19
29324: PPUSH
29325: LD_INT 0
29327: PPUSH
29328: CALL_OW 49
// end ;
29332: GO 29288
29334: POP
29335: POP
// end ;
29336: LD_VAR 0 1
29340: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29341: LD_INT 0
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
// if not list then
29371: LD_VAR 0 1
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 32573
// base := list [ 1 ] ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_VAR 0 1
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: ST_TO_ADDR
// group := list [ 2 ] ;
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: LD_VAR 0 1
29403: PUSH
29404: LD_INT 2
29406: ARRAY
29407: ST_TO_ADDR
// path := list [ 3 ] ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_VAR 0 1
29417: PUSH
29418: LD_INT 3
29420: ARRAY
29421: ST_TO_ADDR
// flags := list [ 4 ] ;
29422: LD_ADDR_VAR 0 6
29426: PUSH
29427: LD_VAR 0 1
29431: PUSH
29432: LD_INT 4
29434: ARRAY
29435: ST_TO_ADDR
// mined := [ ] ;
29436: LD_ADDR_VAR 0 27
29440: PUSH
29441: EMPTY
29442: ST_TO_ADDR
// bombed := [ ] ;
29443: LD_ADDR_VAR 0 28
29447: PUSH
29448: EMPTY
29449: ST_TO_ADDR
// if not group or not path then
29450: LD_VAR 0 4
29454: NOT
29455: PUSH
29456: LD_VAR 0 5
29460: NOT
29461: OR
29462: IFFALSE 29466
// exit ;
29464: GO 32573
// if flags then
29466: LD_VAR 0 6
29470: IFFALSE 29614
// begin f_ignore_area := flags [ 1 ] ;
29472: LD_ADDR_VAR 0 17
29476: PUSH
29477: LD_VAR 0 6
29481: PUSH
29482: LD_INT 1
29484: ARRAY
29485: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29486: LD_ADDR_VAR 0 18
29490: PUSH
29491: LD_VAR 0 6
29495: PUSH
29496: LD_INT 2
29498: ARRAY
29499: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29500: LD_ADDR_VAR 0 19
29504: PUSH
29505: LD_VAR 0 6
29509: PUSH
29510: LD_INT 3
29512: ARRAY
29513: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29514: LD_ADDR_VAR 0 20
29518: PUSH
29519: LD_VAR 0 6
29523: PUSH
29524: LD_INT 4
29526: ARRAY
29527: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29528: LD_ADDR_VAR 0 21
29532: PUSH
29533: LD_VAR 0 6
29537: PUSH
29538: LD_INT 5
29540: ARRAY
29541: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29542: LD_ADDR_VAR 0 22
29546: PUSH
29547: LD_VAR 0 6
29551: PUSH
29552: LD_INT 6
29554: ARRAY
29555: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29556: LD_ADDR_VAR 0 23
29560: PUSH
29561: LD_VAR 0 6
29565: PUSH
29566: LD_INT 7
29568: ARRAY
29569: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29570: LD_ADDR_VAR 0 24
29574: PUSH
29575: LD_VAR 0 6
29579: PUSH
29580: LD_INT 8
29582: ARRAY
29583: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29584: LD_ADDR_VAR 0 25
29588: PUSH
29589: LD_VAR 0 6
29593: PUSH
29594: LD_INT 9
29596: ARRAY
29597: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29598: LD_ADDR_VAR 0 26
29602: PUSH
29603: LD_VAR 0 6
29607: PUSH
29608: LD_INT 10
29610: ARRAY
29611: ST_TO_ADDR
// end else
29612: GO 29694
// begin f_ignore_area := false ;
29614: LD_ADDR_VAR 0 17
29618: PUSH
29619: LD_INT 0
29621: ST_TO_ADDR
// f_capture := false ;
29622: LD_ADDR_VAR 0 18
29626: PUSH
29627: LD_INT 0
29629: ST_TO_ADDR
// f_ignore_civ := false ;
29630: LD_ADDR_VAR 0 19
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// f_murder := false ;
29638: LD_ADDR_VAR 0 20
29642: PUSH
29643: LD_INT 0
29645: ST_TO_ADDR
// f_mines := false ;
29646: LD_ADDR_VAR 0 21
29650: PUSH
29651: LD_INT 0
29653: ST_TO_ADDR
// f_repair := false ;
29654: LD_ADDR_VAR 0 22
29658: PUSH
29659: LD_INT 0
29661: ST_TO_ADDR
// f_heal := false ;
29662: LD_ADDR_VAR 0 23
29666: PUSH
29667: LD_INT 0
29669: ST_TO_ADDR
// f_spacetime := false ;
29670: LD_ADDR_VAR 0 24
29674: PUSH
29675: LD_INT 0
29677: ST_TO_ADDR
// f_attack_depot := false ;
29678: LD_ADDR_VAR 0 25
29682: PUSH
29683: LD_INT 0
29685: ST_TO_ADDR
// f_crawl := false ;
29686: LD_ADDR_VAR 0 26
29690: PUSH
29691: LD_INT 0
29693: ST_TO_ADDR
// end ; units_path := [ ] ;
29694: LD_ADDR_VAR 0 16
29698: PUSH
29699: EMPTY
29700: ST_TO_ADDR
// for i = 1 to group do
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: DOUBLE
29707: LD_INT 1
29709: DEC
29710: ST_TO_ADDR
29711: LD_VAR 0 4
29715: PUSH
29716: FOR_TO
29717: IFFALSE 29746
// begin units_path := Replace ( units_path , i , path ) ;
29719: LD_ADDR_VAR 0 16
29723: PUSH
29724: LD_VAR 0 16
29728: PPUSH
29729: LD_VAR 0 7
29733: PPUSH
29734: LD_VAR 0 5
29738: PPUSH
29739: CALL_OW 1
29743: ST_TO_ADDR
// end ;
29744: GO 29716
29746: POP
29747: POP
// repeat for i = group downto 1 do
29748: LD_ADDR_VAR 0 7
29752: PUSH
29753: DOUBLE
29754: LD_VAR 0 4
29758: INC
29759: ST_TO_ADDR
29760: LD_INT 1
29762: PUSH
29763: FOR_DOWNTO
29764: IFFALSE 32555
// begin tmp := [ ] ;
29766: LD_ADDR_VAR 0 14
29770: PUSH
29771: EMPTY
29772: ST_TO_ADDR
// attacking := false ;
29773: LD_ADDR_VAR 0 29
29777: PUSH
29778: LD_INT 0
29780: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29781: LD_VAR 0 4
29785: PUSH
29786: LD_VAR 0 7
29790: ARRAY
29791: PPUSH
29792: CALL_OW 301
29796: PUSH
29797: LD_VAR 0 4
29801: PUSH
29802: LD_VAR 0 7
29806: ARRAY
29807: NOT
29808: OR
29809: IFFALSE 29853
// begin group := Delete ( group , i ) ;
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_VAR 0 4
29820: PPUSH
29821: LD_VAR 0 7
29825: PPUSH
29826: CALL_OW 3
29830: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29831: LD_ADDR_VAR 0 16
29835: PUSH
29836: LD_VAR 0 16
29840: PPUSH
29841: LD_VAR 0 7
29845: PPUSH
29846: CALL_OW 3
29850: ST_TO_ADDR
// continue ;
29851: GO 29763
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29853: LD_VAR 0 4
29857: PUSH
29858: LD_VAR 0 7
29862: ARRAY
29863: PPUSH
29864: LD_INT 10
29866: PPUSH
29867: CALL 28016 0 2
29871: NOT
29872: PUSH
29873: LD_VAR 0 16
29877: PUSH
29878: LD_VAR 0 7
29882: ARRAY
29883: PUSH
29884: EMPTY
29885: EQUAL
29886: NOT
29887: AND
29888: IFFALSE 30172
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29890: LD_VAR 0 4
29894: PUSH
29895: LD_VAR 0 7
29899: ARRAY
29900: PPUSH
29901: CALL_OW 262
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: IN
29916: IFFALSE 29975
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29918: LD_VAR 0 4
29922: PUSH
29923: LD_VAR 0 7
29927: ARRAY
29928: PPUSH
29929: CALL_OW 261
29933: PUSH
29934: LD_INT 10
29936: LESS
29937: PUSH
29938: LD_VAR 0 4
29942: PUSH
29943: LD_VAR 0 7
29947: ARRAY
29948: PPUSH
29949: CALL 28073 0 1
29953: NOT
29954: AND
29955: IFFALSE 29975
// SetFuel ( group [ i ] , 12 ) ;
29957: LD_VAR 0 4
29961: PUSH
29962: LD_VAR 0 7
29966: ARRAY
29967: PPUSH
29968: LD_INT 12
29970: PPUSH
29971: CALL_OW 240
// if units_path [ i ] then
29975: LD_VAR 0 16
29979: PUSH
29980: LD_VAR 0 7
29984: ARRAY
29985: IFFALSE 30170
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29987: LD_VAR 0 4
29991: PUSH
29992: LD_VAR 0 7
29996: ARRAY
29997: PPUSH
29998: LD_VAR 0 16
30002: PUSH
30003: LD_VAR 0 7
30007: ARRAY
30008: PUSH
30009: LD_INT 1
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: LD_VAR 0 16
30021: PUSH
30022: LD_VAR 0 7
30026: ARRAY
30027: PUSH
30028: LD_INT 1
30030: ARRAY
30031: PUSH
30032: LD_INT 2
30034: ARRAY
30035: PPUSH
30036: CALL_OW 297
30040: PUSH
30041: LD_INT 6
30043: GREATER
30044: IFFALSE 30119
// begin if not HasTask ( group [ i ] ) then
30046: LD_VAR 0 4
30050: PUSH
30051: LD_VAR 0 7
30055: ARRAY
30056: PPUSH
30057: CALL_OW 314
30061: NOT
30062: IFFALSE 30117
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30064: LD_VAR 0 4
30068: PUSH
30069: LD_VAR 0 7
30073: ARRAY
30074: PPUSH
30075: LD_VAR 0 16
30079: PUSH
30080: LD_VAR 0 7
30084: ARRAY
30085: PUSH
30086: LD_INT 1
30088: ARRAY
30089: PUSH
30090: LD_INT 1
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 16
30098: PUSH
30099: LD_VAR 0 7
30103: ARRAY
30104: PUSH
30105: LD_INT 1
30107: ARRAY
30108: PUSH
30109: LD_INT 2
30111: ARRAY
30112: PPUSH
30113: CALL_OW 114
// end else
30117: GO 30170
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30119: LD_ADDR_VAR 0 15
30123: PUSH
30124: LD_VAR 0 16
30128: PUSH
30129: LD_VAR 0 7
30133: ARRAY
30134: PPUSH
30135: LD_INT 1
30137: PPUSH
30138: CALL_OW 3
30142: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30143: LD_ADDR_VAR 0 16
30147: PUSH
30148: LD_VAR 0 16
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: LD_VAR 0 15
30162: PPUSH
30163: CALL_OW 1
30167: ST_TO_ADDR
// continue ;
30168: GO 29763
// end ; end ; end else
30170: GO 32553
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30172: LD_ADDR_VAR 0 14
30176: PUSH
30177: LD_INT 81
30179: PUSH
30180: LD_VAR 0 4
30184: PUSH
30185: LD_VAR 0 7
30189: ARRAY
30190: PPUSH
30191: CALL_OW 255
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PPUSH
30200: CALL_OW 69
30204: ST_TO_ADDR
// if not tmp then
30205: LD_VAR 0 14
30209: NOT
30210: IFFALSE 30214
// continue ;
30212: GO 29763
// if f_ignore_area then
30214: LD_VAR 0 17
30218: IFFALSE 30306
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30220: LD_ADDR_VAR 0 15
30224: PUSH
30225: LD_VAR 0 14
30229: PPUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 92
30235: PUSH
30236: LD_VAR 0 17
30240: PUSH
30241: LD_INT 1
30243: ARRAY
30244: PUSH
30245: LD_VAR 0 17
30249: PUSH
30250: LD_INT 2
30252: ARRAY
30253: PUSH
30254: LD_VAR 0 17
30258: PUSH
30259: LD_INT 3
30261: ARRAY
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PPUSH
30273: CALL_OW 72
30277: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30278: LD_VAR 0 14
30282: PUSH
30283: LD_VAR 0 15
30287: DIFF
30288: IFFALSE 30306
// tmp := tmp diff tmp2 ;
30290: LD_ADDR_VAR 0 14
30294: PUSH
30295: LD_VAR 0 14
30299: PUSH
30300: LD_VAR 0 15
30304: DIFF
30305: ST_TO_ADDR
// end ; if not f_murder then
30306: LD_VAR 0 20
30310: NOT
30311: IFFALSE 30369
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30313: LD_ADDR_VAR 0 15
30317: PUSH
30318: LD_VAR 0 14
30322: PPUSH
30323: LD_INT 3
30325: PUSH
30326: LD_INT 50
30328: PUSH
30329: EMPTY
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 72
30340: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30341: LD_VAR 0 14
30345: PUSH
30346: LD_VAR 0 15
30350: DIFF
30351: IFFALSE 30369
// tmp := tmp diff tmp2 ;
30353: LD_ADDR_VAR 0 14
30357: PUSH
30358: LD_VAR 0 14
30362: PUSH
30363: LD_VAR 0 15
30367: DIFF
30368: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30369: LD_ADDR_VAR 0 14
30373: PUSH
30374: LD_VAR 0 4
30378: PUSH
30379: LD_VAR 0 7
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 14
30389: PPUSH
30390: LD_INT 1
30392: PPUSH
30393: LD_INT 1
30395: PPUSH
30396: CALL 3189 0 4
30400: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30401: LD_VAR 0 4
30405: PUSH
30406: LD_VAR 0 7
30410: ARRAY
30411: PPUSH
30412: CALL_OW 257
30416: PUSH
30417: LD_INT 1
30419: EQUAL
30420: IFFALSE 30847
// begin if WantPlant ( group [ i ] ) then
30422: LD_VAR 0 4
30426: PUSH
30427: LD_VAR 0 7
30431: ARRAY
30432: PPUSH
30433: CALL 2657 0 1
30437: IFFALSE 30441
// continue ;
30439: GO 29763
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30441: LD_VAR 0 18
30445: PUSH
30446: LD_VAR 0 4
30450: PUSH
30451: LD_VAR 0 7
30455: ARRAY
30456: PPUSH
30457: CALL_OW 310
30461: NOT
30462: AND
30463: PUSH
30464: LD_VAR 0 14
30468: PUSH
30469: LD_INT 1
30471: ARRAY
30472: PUSH
30473: LD_VAR 0 14
30477: PPUSH
30478: LD_INT 21
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 58
30490: PUSH
30491: EMPTY
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 72
30502: IN
30503: AND
30504: IFFALSE 30540
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30506: LD_VAR 0 4
30510: PUSH
30511: LD_VAR 0 7
30515: ARRAY
30516: PPUSH
30517: LD_VAR 0 14
30521: PUSH
30522: LD_INT 1
30524: ARRAY
30525: PPUSH
30526: CALL_OW 120
// attacking := true ;
30530: LD_ADDR_VAR 0 29
30534: PUSH
30535: LD_INT 1
30537: ST_TO_ADDR
// continue ;
30538: GO 29763
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30540: LD_VAR 0 26
30544: PUSH
30545: LD_VAR 0 4
30549: PUSH
30550: LD_VAR 0 7
30554: ARRAY
30555: PPUSH
30556: CALL_OW 256
30560: PUSH
30561: LD_INT 800
30563: LESS
30564: AND
30565: PUSH
30566: LD_VAR 0 4
30570: PUSH
30571: LD_VAR 0 7
30575: ARRAY
30576: PPUSH
30577: CALL_OW 318
30581: NOT
30582: AND
30583: IFFALSE 30600
// ComCrawl ( group [ i ] ) ;
30585: LD_VAR 0 4
30589: PUSH
30590: LD_VAR 0 7
30594: ARRAY
30595: PPUSH
30596: CALL_OW 137
// if f_mines then
30600: LD_VAR 0 21
30604: IFFALSE 30847
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30606: LD_VAR 0 14
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: PPUSH
30615: CALL_OW 247
30619: PUSH
30620: LD_INT 3
30622: EQUAL
30623: PUSH
30624: LD_VAR 0 14
30628: PUSH
30629: LD_INT 1
30631: ARRAY
30632: PUSH
30633: LD_VAR 0 27
30637: IN
30638: NOT
30639: AND
30640: IFFALSE 30847
// begin x := GetX ( tmp [ 1 ] ) ;
30642: LD_ADDR_VAR 0 10
30646: PUSH
30647: LD_VAR 0 14
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PPUSH
30656: CALL_OW 250
30660: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30661: LD_ADDR_VAR 0 11
30665: PUSH
30666: LD_VAR 0 14
30670: PUSH
30671: LD_INT 1
30673: ARRAY
30674: PPUSH
30675: CALL_OW 251
30679: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30680: LD_ADDR_VAR 0 12
30684: PUSH
30685: LD_VAR 0 4
30689: PUSH
30690: LD_VAR 0 7
30694: ARRAY
30695: PPUSH
30696: CALL 28101 0 1
30700: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30701: LD_VAR 0 4
30705: PUSH
30706: LD_VAR 0 7
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 10
30716: PPUSH
30717: LD_VAR 0 11
30721: PPUSH
30722: LD_VAR 0 14
30726: PUSH
30727: LD_INT 1
30729: ARRAY
30730: PPUSH
30731: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30735: LD_VAR 0 4
30739: PUSH
30740: LD_VAR 0 7
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 10
30750: PPUSH
30751: LD_VAR 0 12
30755: PPUSH
30756: LD_INT 7
30758: PPUSH
30759: CALL_OW 272
30763: PPUSH
30764: LD_VAR 0 11
30768: PPUSH
30769: LD_VAR 0 12
30773: PPUSH
30774: LD_INT 7
30776: PPUSH
30777: CALL_OW 273
30781: PPUSH
30782: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
30786: LD_VAR 0 4
30790: PUSH
30791: LD_VAR 0 7
30795: ARRAY
30796: PPUSH
30797: LD_INT 71
30799: PPUSH
30800: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30804: LD_ADDR_VAR 0 27
30808: PUSH
30809: LD_VAR 0 27
30813: PPUSH
30814: LD_VAR 0 27
30818: PUSH
30819: LD_INT 1
30821: PLUS
30822: PPUSH
30823: LD_VAR 0 14
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: CALL_OW 1
30836: ST_TO_ADDR
// attacking := true ;
30837: LD_ADDR_VAR 0 29
30841: PUSH
30842: LD_INT 1
30844: ST_TO_ADDR
// continue ;
30845: GO 29763
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30847: LD_VAR 0 4
30851: PUSH
30852: LD_VAR 0 7
30856: ARRAY
30857: PPUSH
30858: CALL_OW 257
30862: PUSH
30863: LD_INT 17
30865: EQUAL
30866: IFFALSE 30994
// begin attacking := false ;
30868: LD_ADDR_VAR 0 29
30872: PUSH
30873: LD_INT 0
30875: ST_TO_ADDR
// k := 5 ;
30876: LD_ADDR_VAR 0 9
30880: PUSH
30881: LD_INT 5
30883: ST_TO_ADDR
// if tmp < k then
30884: LD_VAR 0 14
30888: PUSH
30889: LD_VAR 0 9
30893: LESS
30894: IFFALSE 30906
// k := tmp ;
30896: LD_ADDR_VAR 0 9
30900: PUSH
30901: LD_VAR 0 14
30905: ST_TO_ADDR
// for j = 1 to k do
30906: LD_ADDR_VAR 0 8
30910: PUSH
30911: DOUBLE
30912: LD_INT 1
30914: DEC
30915: ST_TO_ADDR
30916: LD_VAR 0 9
30920: PUSH
30921: FOR_TO
30922: IFFALSE 30992
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30924: LD_VAR 0 14
30928: PUSH
30929: LD_VAR 0 8
30933: ARRAY
30934: PUSH
30935: LD_VAR 0 14
30939: PPUSH
30940: LD_INT 58
30942: PUSH
30943: EMPTY
30944: LIST
30945: PPUSH
30946: CALL_OW 72
30950: IN
30951: NOT
30952: IFFALSE 30990
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30954: LD_VAR 0 4
30958: PUSH
30959: LD_VAR 0 7
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 14
30969: PUSH
30970: LD_VAR 0 8
30974: ARRAY
30975: PPUSH
30976: CALL_OW 115
// attacking := true ;
30980: LD_ADDR_VAR 0 29
30984: PUSH
30985: LD_INT 1
30987: ST_TO_ADDR
// continue ;
30988: GO 30921
// end ; end ;
30990: GO 30921
30992: POP
30993: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
30994: LD_VAR 0 4
30998: PUSH
30999: LD_VAR 0 7
31003: ARRAY
31004: PPUSH
31005: CALL_OW 257
31009: PUSH
31010: LD_INT 8
31012: EQUAL
31013: PUSH
31014: LD_VAR 0 4
31018: PUSH
31019: LD_VAR 0 7
31023: ARRAY
31024: PPUSH
31025: CALL_OW 264
31029: PUSH
31030: LD_INT 28
31032: PUSH
31033: LD_INT 45
31035: PUSH
31036: LD_INT 7
31038: PUSH
31039: LD_INT 47
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: IN
31048: OR
31049: IFFALSE 31279
// begin attacking := false ;
31051: LD_ADDR_VAR 0 29
31055: PUSH
31056: LD_INT 0
31058: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31059: LD_VAR 0 14
31063: PUSH
31064: LD_INT 1
31066: ARRAY
31067: PPUSH
31068: CALL_OW 266
31072: PUSH
31073: LD_INT 32
31075: PUSH
31076: LD_INT 31
31078: PUSH
31079: LD_INT 33
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: IN
31095: IFFALSE 31279
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31097: LD_ADDR_VAR 0 9
31101: PUSH
31102: LD_VAR 0 14
31106: PUSH
31107: LD_INT 1
31109: ARRAY
31110: PPUSH
31111: CALL_OW 266
31115: PPUSH
31116: LD_VAR 0 14
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: CALL_OW 250
31129: PPUSH
31130: LD_VAR 0 14
31134: PUSH
31135: LD_INT 1
31137: ARRAY
31138: PPUSH
31139: CALL_OW 251
31143: PPUSH
31144: LD_VAR 0 14
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: PPUSH
31153: CALL_OW 254
31157: PPUSH
31158: LD_VAR 0 14
31162: PUSH
31163: LD_INT 1
31165: ARRAY
31166: PPUSH
31167: CALL_OW 248
31171: PPUSH
31172: LD_INT 0
31174: PPUSH
31175: CALL 9477 0 6
31179: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31180: LD_ADDR_VAR 0 8
31184: PUSH
31185: LD_VAR 0 4
31189: PUSH
31190: LD_VAR 0 7
31194: ARRAY
31195: PPUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: CALL 28164 0 2
31205: ST_TO_ADDR
// if j then
31206: LD_VAR 0 8
31210: IFFALSE 31279
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31212: LD_VAR 0 8
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_VAR 0 8
31225: PUSH
31226: LD_INT 2
31228: ARRAY
31229: PPUSH
31230: CALL_OW 488
31234: IFFALSE 31279
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31236: LD_VAR 0 4
31240: PUSH
31241: LD_VAR 0 7
31245: ARRAY
31246: PPUSH
31247: LD_VAR 0 8
31251: PUSH
31252: LD_INT 1
31254: ARRAY
31255: PPUSH
31256: LD_VAR 0 8
31260: PUSH
31261: LD_INT 2
31263: ARRAY
31264: PPUSH
31265: CALL_OW 116
// attacking := true ;
31269: LD_ADDR_VAR 0 29
31273: PUSH
31274: LD_INT 1
31276: ST_TO_ADDR
// continue ;
31277: GO 29763
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31279: LD_VAR 0 4
31283: PUSH
31284: LD_VAR 0 7
31288: ARRAY
31289: PPUSH
31290: CALL_OW 265
31294: PUSH
31295: LD_INT 11
31297: EQUAL
31298: IFFALSE 31576
// begin k := 10 ;
31300: LD_ADDR_VAR 0 9
31304: PUSH
31305: LD_INT 10
31307: ST_TO_ADDR
// x := 0 ;
31308: LD_ADDR_VAR 0 10
31312: PUSH
31313: LD_INT 0
31315: ST_TO_ADDR
// if tmp < k then
31316: LD_VAR 0 14
31320: PUSH
31321: LD_VAR 0 9
31325: LESS
31326: IFFALSE 31338
// k := tmp ;
31328: LD_ADDR_VAR 0 9
31332: PUSH
31333: LD_VAR 0 14
31337: ST_TO_ADDR
// for j = k downto 1 do
31338: LD_ADDR_VAR 0 8
31342: PUSH
31343: DOUBLE
31344: LD_VAR 0 9
31348: INC
31349: ST_TO_ADDR
31350: LD_INT 1
31352: PUSH
31353: FOR_DOWNTO
31354: IFFALSE 31429
// begin if GetType ( tmp [ j ] ) = unit_human then
31356: LD_VAR 0 14
31360: PUSH
31361: LD_VAR 0 8
31365: ARRAY
31366: PPUSH
31367: CALL_OW 247
31371: PUSH
31372: LD_INT 1
31374: EQUAL
31375: IFFALSE 31427
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31377: LD_VAR 0 4
31381: PUSH
31382: LD_VAR 0 7
31386: ARRAY
31387: PPUSH
31388: LD_VAR 0 14
31392: PUSH
31393: LD_VAR 0 8
31397: ARRAY
31398: PPUSH
31399: CALL 28435 0 2
// x := tmp [ j ] ;
31403: LD_ADDR_VAR 0 10
31407: PUSH
31408: LD_VAR 0 14
31412: PUSH
31413: LD_VAR 0 8
31417: ARRAY
31418: ST_TO_ADDR
// attacking := true ;
31419: LD_ADDR_VAR 0 29
31423: PUSH
31424: LD_INT 1
31426: ST_TO_ADDR
// end ; end ;
31427: GO 31353
31429: POP
31430: POP
// if not x then
31431: LD_VAR 0 10
31435: NOT
31436: IFFALSE 31576
// begin attacking := true ;
31438: LD_ADDR_VAR 0 29
31442: PUSH
31443: LD_INT 1
31445: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31446: LD_VAR 0 4
31450: PUSH
31451: LD_VAR 0 7
31455: ARRAY
31456: PPUSH
31457: CALL_OW 250
31461: PPUSH
31462: LD_VAR 0 4
31466: PUSH
31467: LD_VAR 0 7
31471: ARRAY
31472: PPUSH
31473: CALL_OW 251
31477: PPUSH
31478: CALL 1915 0 2
31482: PUSH
31483: LD_INT 2
31485: ARRAY
31486: PUSH
31487: LD_VAR 0 14
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: PPUSH
31496: CALL_OW 250
31500: PPUSH
31501: LD_VAR 0 14
31505: PUSH
31506: LD_INT 1
31508: ARRAY
31509: PPUSH
31510: CALL_OW 251
31514: PPUSH
31515: CALL 1915 0 2
31519: PUSH
31520: LD_INT 2
31522: ARRAY
31523: EQUAL
31524: IFFALSE 31552
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31526: LD_VAR 0 4
31530: PUSH
31531: LD_VAR 0 7
31535: ARRAY
31536: PPUSH
31537: LD_VAR 0 14
31541: PUSH
31542: LD_INT 1
31544: ARRAY
31545: PPUSH
31546: CALL 28435 0 2
31550: GO 31576
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31552: LD_VAR 0 4
31556: PUSH
31557: LD_VAR 0 7
31561: ARRAY
31562: PPUSH
31563: LD_VAR 0 14
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: PPUSH
31572: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31576: LD_VAR 0 4
31580: PUSH
31581: LD_VAR 0 7
31585: ARRAY
31586: PPUSH
31587: CALL_OW 264
31591: PUSH
31592: LD_INT 29
31594: EQUAL
31595: IFFALSE 31961
// begin if WantsToAttack ( group [ i ] ) in bombed then
31597: LD_VAR 0 4
31601: PUSH
31602: LD_VAR 0 7
31606: ARRAY
31607: PPUSH
31608: CALL_OW 319
31612: PUSH
31613: LD_VAR 0 28
31617: IN
31618: IFFALSE 31622
// continue ;
31620: GO 29763
// k := 8 ;
31622: LD_ADDR_VAR 0 9
31626: PUSH
31627: LD_INT 8
31629: ST_TO_ADDR
// x := 0 ;
31630: LD_ADDR_VAR 0 10
31634: PUSH
31635: LD_INT 0
31637: ST_TO_ADDR
// if tmp < k then
31638: LD_VAR 0 14
31642: PUSH
31643: LD_VAR 0 9
31647: LESS
31648: IFFALSE 31660
// k := tmp ;
31650: LD_ADDR_VAR 0 9
31654: PUSH
31655: LD_VAR 0 14
31659: ST_TO_ADDR
// for j = 1 to k do
31660: LD_ADDR_VAR 0 8
31664: PUSH
31665: DOUBLE
31666: LD_INT 1
31668: DEC
31669: ST_TO_ADDR
31670: LD_VAR 0 9
31674: PUSH
31675: FOR_TO
31676: IFFALSE 31808
// begin if GetType ( tmp [ j ] ) = unit_building then
31678: LD_VAR 0 14
31682: PUSH
31683: LD_VAR 0 8
31687: ARRAY
31688: PPUSH
31689: CALL_OW 247
31693: PUSH
31694: LD_INT 3
31696: EQUAL
31697: IFFALSE 31806
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31699: LD_VAR 0 14
31703: PUSH
31704: LD_VAR 0 8
31708: ARRAY
31709: PUSH
31710: LD_VAR 0 28
31714: IN
31715: NOT
31716: PUSH
31717: LD_VAR 0 14
31721: PUSH
31722: LD_VAR 0 8
31726: ARRAY
31727: PPUSH
31728: CALL_OW 313
31732: AND
31733: IFFALSE 31806
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31735: LD_VAR 0 4
31739: PUSH
31740: LD_VAR 0 7
31744: ARRAY
31745: PPUSH
31746: LD_VAR 0 14
31750: PUSH
31751: LD_VAR 0 8
31755: ARRAY
31756: PPUSH
31757: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31761: LD_ADDR_VAR 0 28
31765: PUSH
31766: LD_VAR 0 28
31770: PPUSH
31771: LD_VAR 0 28
31775: PUSH
31776: LD_INT 1
31778: PLUS
31779: PPUSH
31780: LD_VAR 0 14
31784: PUSH
31785: LD_VAR 0 8
31789: ARRAY
31790: PPUSH
31791: CALL_OW 1
31795: ST_TO_ADDR
// attacking := true ;
31796: LD_ADDR_VAR 0 29
31800: PUSH
31801: LD_INT 1
31803: ST_TO_ADDR
// break ;
31804: GO 31808
// end ; end ;
31806: GO 31675
31808: POP
31809: POP
// if not attacking and f_attack_depot then
31810: LD_VAR 0 29
31814: NOT
31815: PUSH
31816: LD_VAR 0 25
31820: AND
31821: IFFALSE 31916
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31823: LD_ADDR_VAR 0 13
31827: PUSH
31828: LD_VAR 0 14
31832: PPUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 30
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: PPUSH
31861: CALL_OW 72
31865: ST_TO_ADDR
// if z then
31866: LD_VAR 0 13
31870: IFFALSE 31916
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31872: LD_VAR 0 4
31876: PUSH
31877: LD_VAR 0 7
31881: ARRAY
31882: PPUSH
31883: LD_VAR 0 13
31887: PPUSH
31888: LD_VAR 0 4
31892: PUSH
31893: LD_VAR 0 7
31897: ARRAY
31898: PPUSH
31899: CALL_OW 74
31903: PPUSH
31904: CALL_OW 115
// attacking := true ;
31908: LD_ADDR_VAR 0 29
31912: PUSH
31913: LD_INT 1
31915: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31916: LD_VAR 0 4
31920: PUSH
31921: LD_VAR 0 7
31925: ARRAY
31926: PPUSH
31927: CALL_OW 256
31931: PUSH
31932: LD_INT 500
31934: LESS
31935: IFFALSE 31961
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31937: LD_VAR 0 4
31941: PUSH
31942: LD_VAR 0 7
31946: ARRAY
31947: PPUSH
31948: LD_VAR 0 14
31952: PUSH
31953: LD_INT 1
31955: ARRAY
31956: PPUSH
31957: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31961: LD_VAR 0 4
31965: PUSH
31966: LD_VAR 0 7
31970: ARRAY
31971: PPUSH
31972: CALL_OW 256
31976: PUSH
31977: LD_INT 250
31979: LESS
31980: PUSH
31981: LD_VAR 0 4
31985: PUSH
31986: LD_VAR 0 7
31990: ARRAY
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 23
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PPUSH
32016: CALL_OW 69
32020: IN
32021: AND
32022: IFFALSE 32147
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: LD_OWVAR 3
32033: PUSH
32034: LD_VAR 0 4
32038: PUSH
32039: LD_VAR 0 7
32043: ARRAY
32044: DIFF
32045: PPUSH
32046: LD_VAR 0 4
32050: PUSH
32051: LD_VAR 0 7
32055: ARRAY
32056: PPUSH
32057: CALL_OW 74
32061: ST_TO_ADDR
// if not k then
32062: LD_VAR 0 9
32066: NOT
32067: IFFALSE 32071
// continue ;
32069: GO 29763
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32071: LD_VAR 0 9
32075: PUSH
32076: LD_INT 81
32078: PUSH
32079: LD_VAR 0 4
32083: PUSH
32084: LD_VAR 0 7
32088: ARRAY
32089: PPUSH
32090: CALL_OW 255
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: IN
32104: PUSH
32105: LD_VAR 0 9
32109: PPUSH
32110: LD_VAR 0 4
32114: PUSH
32115: LD_VAR 0 7
32119: ARRAY
32120: PPUSH
32121: CALL_OW 296
32125: PUSH
32126: LD_INT 5
32128: LESS
32129: AND
32130: IFFALSE 32147
// ComAutodestruct ( group [ i ] ) ;
32132: LD_VAR 0 4
32136: PUSH
32137: LD_VAR 0 7
32141: ARRAY
32142: PPUSH
32143: CALL 28333 0 1
// end ; if f_attack_depot then
32147: LD_VAR 0 25
32151: IFFALSE 32263
// begin k := 6 ;
32153: LD_ADDR_VAR 0 9
32157: PUSH
32158: LD_INT 6
32160: ST_TO_ADDR
// if tmp < k then
32161: LD_VAR 0 14
32165: PUSH
32166: LD_VAR 0 9
32170: LESS
32171: IFFALSE 32183
// k := tmp ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_VAR 0 14
32182: ST_TO_ADDR
// for j = 1 to k do
32183: LD_ADDR_VAR 0 8
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 9
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32261
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32201: LD_VAR 0 8
32205: PPUSH
32206: CALL_OW 266
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: IN
32221: IFFALSE 32259
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32223: LD_VAR 0 4
32227: PUSH
32228: LD_VAR 0 7
32232: ARRAY
32233: PPUSH
32234: LD_VAR 0 14
32238: PUSH
32239: LD_VAR 0 8
32243: ARRAY
32244: PPUSH
32245: CALL_OW 115
// attacking := true ;
32249: LD_ADDR_VAR 0 29
32253: PUSH
32254: LD_INT 1
32256: ST_TO_ADDR
// break ;
32257: GO 32261
// end ;
32259: GO 32198
32261: POP
32262: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32263: LD_VAR 0 4
32267: PUSH
32268: LD_VAR 0 7
32272: ARRAY
32273: PPUSH
32274: CALL_OW 302
32278: PUSH
32279: LD_VAR 0 29
32283: NOT
32284: AND
32285: IFFALSE 32553
// begin if GetTag ( group [ i ] ) = 71 then
32287: LD_VAR 0 4
32291: PUSH
32292: LD_VAR 0 7
32296: ARRAY
32297: PPUSH
32298: CALL_OW 110
32302: PUSH
32303: LD_INT 71
32305: EQUAL
32306: IFFALSE 32347
// begin if HasTask ( group [ i ] ) then
32308: LD_VAR 0 4
32312: PUSH
32313: LD_VAR 0 7
32317: ARRAY
32318: PPUSH
32319: CALL_OW 314
32323: IFFALSE 32329
// continue else
32325: GO 29763
32327: GO 32347
// SetTag ( group [ i ] , 0 ) ;
32329: LD_VAR 0 4
32333: PUSH
32334: LD_VAR 0 7
32338: ARRAY
32339: PPUSH
32340: LD_INT 0
32342: PPUSH
32343: CALL_OW 109
// end ; k := 8 ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_INT 8
32354: ST_TO_ADDR
// x := 0 ;
32355: LD_ADDR_VAR 0 10
32359: PUSH
32360: LD_INT 0
32362: ST_TO_ADDR
// if tmp < k then
32363: LD_VAR 0 14
32367: PUSH
32368: LD_VAR 0 9
32372: LESS
32373: IFFALSE 32385
// k := tmp ;
32375: LD_ADDR_VAR 0 9
32379: PUSH
32380: LD_VAR 0 14
32384: ST_TO_ADDR
// for j = 1 to k do
32385: LD_ADDR_VAR 0 8
32389: PUSH
32390: DOUBLE
32391: LD_INT 1
32393: DEC
32394: ST_TO_ADDR
32395: LD_VAR 0 9
32399: PUSH
32400: FOR_TO
32401: IFFALSE 32499
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32403: LD_VAR 0 14
32407: PUSH
32408: LD_VAR 0 8
32412: ARRAY
32413: PPUSH
32414: CALL_OW 247
32418: PUSH
32419: LD_INT 1
32421: EQUAL
32422: PUSH
32423: LD_VAR 0 14
32427: PUSH
32428: LD_VAR 0 8
32432: ARRAY
32433: PPUSH
32434: CALL_OW 256
32438: PUSH
32439: LD_INT 250
32441: LESS
32442: PUSH
32443: LD_VAR 0 20
32447: AND
32448: PUSH
32449: LD_VAR 0 20
32453: NOT
32454: PUSH
32455: LD_VAR 0 14
32459: PUSH
32460: LD_VAR 0 8
32464: ARRAY
32465: PPUSH
32466: CALL_OW 256
32470: PUSH
32471: LD_INT 250
32473: GREATEREQUAL
32474: AND
32475: OR
32476: AND
32477: IFFALSE 32497
// begin x := tmp [ j ] ;
32479: LD_ADDR_VAR 0 10
32483: PUSH
32484: LD_VAR 0 14
32488: PUSH
32489: LD_VAR 0 8
32493: ARRAY
32494: ST_TO_ADDR
// break ;
32495: GO 32499
// end ;
32497: GO 32400
32499: POP
32500: POP
// if x then
32501: LD_VAR 0 10
32505: IFFALSE 32529
// ComAttackUnit ( group [ i ] , x ) else
32507: LD_VAR 0 4
32511: PUSH
32512: LD_VAR 0 7
32516: ARRAY
32517: PPUSH
32518: LD_VAR 0 10
32522: PPUSH
32523: CALL_OW 115
32527: GO 32553
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32529: LD_VAR 0 4
32533: PUSH
32534: LD_VAR 0 7
32538: ARRAY
32539: PPUSH
32540: LD_VAR 0 14
32544: PUSH
32545: LD_INT 1
32547: ARRAY
32548: PPUSH
32549: CALL_OW 115
// end ; end ; end ;
32553: GO 29763
32555: POP
32556: POP
// wait ( 0 0$1 ) ;
32557: LD_INT 35
32559: PPUSH
32560: CALL_OW 67
// until group = [ ] ;
32564: LD_VAR 0 4
32568: PUSH
32569: EMPTY
32570: EQUAL
32571: IFFALSE 29748
// end ;
32573: LD_VAR 0 2
32577: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32578: LD_INT 0
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
// if not defenders then
32587: LD_VAR 0 2
32591: NOT
32592: IFFALSE 32596
// exit ;
32594: GO 33120
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_EXP 46
32605: PUSH
32606: LD_VAR 0 1
32610: ARRAY
32611: PPUSH
32612: LD_INT 25
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PPUSH
32622: CALL_OW 72
32626: ST_TO_ADDR
// if mechs then
32627: LD_VAR 0 9
32631: IFFALSE 32730
// for i in defenders do
32633: LD_ADDR_VAR 0 5
32637: PUSH
32638: LD_VAR 0 2
32642: PUSH
32643: FOR_IN
32644: IFFALSE 32728
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32646: LD_VAR 0 5
32650: PPUSH
32651: CALL_OW 263
32655: PUSH
32656: LD_INT 1
32658: EQUAL
32659: PUSH
32660: LD_VAR 0 5
32664: PPUSH
32665: CALL_OW 311
32669: NOT
32670: AND
32671: IFFALSE 32726
// begin un := mechs [ 1 ] ;
32673: LD_ADDR_VAR 0 7
32677: PUSH
32678: LD_VAR 0 9
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32687: LD_VAR 0 7
32691: PPUSH
32692: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32696: LD_VAR 0 7
32700: PPUSH
32701: LD_VAR 0 5
32705: PPUSH
32706: CALL_OW 180
// mechs := mechs diff un ;
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 9
32719: PUSH
32720: LD_VAR 0 7
32724: DIFF
32725: ST_TO_ADDR
// end ;
32726: GO 32643
32728: POP
32729: POP
// repeat wait ( 0 0$1 ) ;
32730: LD_INT 35
32732: PPUSH
32733: CALL_OW 67
// enemy := mc_scan [ base ] ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_EXP 65
32746: PUSH
32747: LD_VAR 0 1
32751: ARRAY
32752: ST_TO_ADDR
// for i in defenders do
32753: LD_ADDR_VAR 0 5
32757: PUSH
32758: LD_VAR 0 2
32762: PUSH
32763: FOR_IN
32764: IFFALSE 32910
// begin e := NearestUnitToUnit ( enemy , i ) ;
32766: LD_ADDR_VAR 0 10
32770: PUSH
32771: LD_VAR 0 3
32775: PPUSH
32776: LD_VAR 0 5
32780: PPUSH
32781: CALL_OW 74
32785: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32786: LD_VAR 0 5
32790: PPUSH
32791: CALL_OW 319
32795: NOT
32796: PUSH
32797: LD_VAR 0 5
32801: PPUSH
32802: CALL_OW 302
32806: AND
32807: PUSH
32808: LD_VAR 0 5
32812: PPUSH
32813: LD_VAR 0 10
32817: PPUSH
32818: CALL_OW 296
32822: PUSH
32823: LD_INT 30
32825: LESS
32826: AND
32827: IFFALSE 32845
// ComAttackUnit ( i , e ) else
32829: LD_VAR 0 5
32833: PPUSH
32834: LD_VAR 0 10
32838: PPUSH
32839: CALL_OW 115
32843: GO 32908
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32845: LD_VAR 0 5
32849: PPUSH
32850: LD_VAR 0 10
32854: PPUSH
32855: CALL_OW 296
32859: PUSH
32860: LD_INT 30
32862: GREATEREQUAL
32863: PUSH
32864: LD_VAR 0 5
32868: PPUSH
32869: LD_EXP 66
32873: PUSH
32874: LD_VAR 0 1
32878: ARRAY
32879: PPUSH
32880: CALL_OW 308
32884: NOT
32885: AND
32886: IFFALSE 32908
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32888: LD_VAR 0 5
32892: PPUSH
32893: LD_EXP 66
32897: PUSH
32898: LD_VAR 0 1
32902: ARRAY
32903: PPUSH
32904: CALL_OW 113
// end ;
32908: GO 32763
32910: POP
32911: POP
// until not enemy or not defenders ;
32912: LD_VAR 0 3
32916: NOT
32917: PUSH
32918: LD_VAR 0 2
32922: NOT
32923: OR
32924: IFFALSE 32730
// if not enemy and defenders then
32926: LD_VAR 0 3
32930: NOT
32931: PUSH
32932: LD_VAR 0 2
32936: AND
32937: IFFALSE 33095
// repeat wait ( 0 0$1 ) ;
32939: LD_INT 35
32941: PPUSH
32942: CALL_OW 67
// for i in defenders do
32946: LD_ADDR_VAR 0 5
32950: PUSH
32951: LD_VAR 0 2
32955: PUSH
32956: FOR_IN
32957: IFFALSE 33046
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32959: LD_VAR 0 5
32963: PPUSH
32964: LD_EXP 66
32968: PUSH
32969: LD_VAR 0 1
32973: ARRAY
32974: PPUSH
32975: CALL_OW 308
32979: NOT
32980: IFFALSE 33004
// ComMoveToArea ( i , mc_parking [ base ] ) else
32982: LD_VAR 0 5
32986: PPUSH
32987: LD_EXP 66
32991: PUSH
32992: LD_VAR 0 1
32996: ARRAY
32997: PPUSH
32998: CALL_OW 113
33002: GO 33044
// if GetControl ( i ) = control_manual then
33004: LD_VAR 0 5
33008: PPUSH
33009: CALL_OW 263
33013: PUSH
33014: LD_INT 1
33016: EQUAL
33017: IFFALSE 33044
// if IsDrivenBy ( i ) then
33019: LD_VAR 0 5
33023: PPUSH
33024: CALL_OW 311
33028: IFFALSE 33044
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33030: LD_VAR 0 5
33034: PPUSH
33035: CALL_OW 311
33039: PPUSH
33040: CALL_OW 121
// end ;
33044: GO 32956
33046: POP
33047: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33048: LD_VAR 0 2
33052: PPUSH
33053: LD_INT 95
33055: PUSH
33056: LD_EXP 66
33060: PUSH
33061: LD_VAR 0 1
33065: ARRAY
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PPUSH
33071: CALL_OW 72
33075: PUSH
33076: LD_VAR 0 2
33080: EQUAL
33081: PUSH
33082: LD_EXP 65
33086: PUSH
33087: LD_VAR 0 1
33091: ARRAY
33092: OR
33093: IFFALSE 32939
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33095: LD_ADDR_EXP 64
33099: PUSH
33100: LD_EXP 64
33104: PPUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: CALL_OW 1
33119: ST_TO_ADDR
// end ;
33120: LD_VAR 0 4
33124: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33125: LD_INT 0
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
// if not base_units then
33131: LD_VAR 0 1
33135: NOT
33136: IFFALSE 33140
// exit ;
33138: GO 33227
// result := false ;
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: LD_INT 0
33147: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33148: LD_ADDR_VAR 0 5
33152: PUSH
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_INT 21
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PPUSH
33168: CALL_OW 72
33172: ST_TO_ADDR
// if not tmp then
33173: LD_VAR 0 5
33177: NOT
33178: IFFALSE 33182
// exit ;
33180: GO 33227
// for i in tmp do
33182: LD_ADDR_VAR 0 3
33186: PUSH
33187: LD_VAR 0 5
33191: PUSH
33192: FOR_IN
33193: IFFALSE 33225
// begin result := EnemyInRange ( i , 18 ) ;
33195: LD_ADDR_VAR 0 2
33199: PUSH
33200: LD_VAR 0 3
33204: PPUSH
33205: LD_INT 18
33207: PPUSH
33208: CALL 28016 0 2
33212: ST_TO_ADDR
// if result then
33213: LD_VAR 0 2
33217: IFFALSE 33223
// exit ;
33219: POP
33220: POP
33221: GO 33227
// end ;
33223: GO 33192
33225: POP
33226: POP
// end ;
33227: LD_VAR 0 2
33231: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
// result := false ;
33238: LD_ADDR_VAR 0 2
33242: PUSH
33243: LD_INT 0
33245: ST_TO_ADDR
// side := GetSide ( unit ) ;
33246: LD_ADDR_VAR 0 3
33250: PUSH
33251: LD_VAR 0 1
33255: PPUSH
33256: CALL_OW 255
33260: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 248
33275: ST_TO_ADDR
// case nat of 1 :
33276: LD_VAR 0 4
33280: PUSH
33281: LD_INT 1
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33289
33287: GO 33300
33289: POP
// tech := tech_lassight ; 2 :
33290: LD_ADDR_VAR 0 5
33294: PUSH
33295: LD_INT 12
33297: ST_TO_ADDR
33298: GO 33339
33300: LD_INT 2
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33319
33308: POP
// tech := tech_mortar ; 3 :
33309: LD_ADDR_VAR 0 5
33313: PUSH
33314: LD_INT 41
33316: ST_TO_ADDR
33317: GO 33339
33319: LD_INT 3
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33338
33327: POP
// tech := tech_bazooka ; end ;
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_INT 44
33335: ST_TO_ADDR
33336: GO 33339
33338: POP
// if Researched ( side , tech ) then
33339: LD_VAR 0 3
33343: PPUSH
33344: LD_VAR 0 5
33348: PPUSH
33349: CALL_OW 325
33353: IFFALSE 33380
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33355: LD_ADDR_VAR 0 2
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: LD_INT 8
33365: PUSH
33366: LD_INT 9
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: LIST
33373: PUSH
33374: LD_VAR 0 4
33378: ARRAY
33379: ST_TO_ADDR
// end ;
33380: LD_VAR 0 2
33384: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
33389: PPUSH
// if not mines then
33390: LD_VAR 0 2
33394: NOT
33395: IFFALSE 33399
// exit ;
33397: GO 33522
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33399: LD_ADDR_VAR 0 5
33403: PUSH
33404: LD_INT 81
33406: PUSH
33407: LD_VAR 0 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PPUSH
33416: CALL_OW 69
33420: ST_TO_ADDR
// for i in mines do
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_VAR 0 2
33430: PUSH
33431: FOR_IN
33432: IFFALSE 33520
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33434: LD_VAR 0 4
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: PPUSH
33443: LD_VAR 0 4
33447: PUSH
33448: LD_INT 2
33450: ARRAY
33451: PPUSH
33452: CALL_OW 458
33456: NOT
33457: IFFALSE 33461
// continue ;
33459: GO 33431
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33461: LD_VAR 0 4
33465: PUSH
33466: LD_INT 1
33468: ARRAY
33469: PPUSH
33470: LD_VAR 0 4
33474: PUSH
33475: LD_INT 2
33477: ARRAY
33478: PPUSH
33479: CALL_OW 428
33483: PUSH
33484: LD_VAR 0 5
33488: IN
33489: IFFALSE 33518
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33491: LD_VAR 0 4
33495: PUSH
33496: LD_INT 1
33498: ARRAY
33499: PPUSH
33500: LD_VAR 0 4
33504: PUSH
33505: LD_INT 2
33507: ARRAY
33508: PPUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL_OW 456
// end ;
33518: GO 33431
33520: POP
33521: POP
// end ; end_of_file
33522: LD_VAR 0 3
33526: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33527: LD_INT 0
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33534: LD_ADDR_VAR 0 5
33538: PUSH
33539: LD_INT 6
33541: PUSH
33542: LD_INT 7
33544: PUSH
33545: LD_INT 8
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: PUSH
33553: LD_OWVAR 67
33557: ARRAY
33558: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33559: LD_INT 69
33561: PUSH
33562: EMPTY
33563: LIST
33564: PPUSH
33565: LD_INT 141
33567: PPUSH
33568: CALL_OW 169
// Wait ( 1 ) ;
33572: LD_INT 1
33574: PPUSH
33575: CALL_OW 67
// uc_side := 2 ;
33579: LD_ADDR_OWVAR 20
33583: PUSH
33584: LD_INT 2
33586: ST_TO_ADDR
// uc_nation := 2 ;
33587: LD_ADDR_OWVAR 21
33591: PUSH
33592: LD_INT 2
33594: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33595: LD_ADDR_OWVAR 37
33599: PUSH
33600: LD_INT 14
33602: ST_TO_ADDR
// vc_engine := engine_siberite ;
33603: LD_ADDR_OWVAR 39
33607: PUSH
33608: LD_INT 3
33610: ST_TO_ADDR
// vc_control := control_manual ;
33611: LD_ADDR_OWVAR 38
33615: PUSH
33616: LD_INT 1
33618: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33619: LD_ADDR_OWVAR 40
33623: PUSH
33624: LD_INT 31
33626: ST_TO_ADDR
// for i = 1 to 3 do
33627: LD_ADDR_VAR 0 2
33631: PUSH
33632: DOUBLE
33633: LD_INT 1
33635: DEC
33636: ST_TO_ADDR
33637: LD_INT 3
33639: PUSH
33640: FOR_TO
33641: IFFALSE 33725
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33643: LD_INT 0
33645: PPUSH
33646: LD_INT 3
33648: PPUSH
33649: LD_VAR 0 5
33653: PPUSH
33654: CALL_OW 380
// un := CreateVehicle ;
33658: LD_ADDR_VAR 0 4
33662: PUSH
33663: CALL_OW 45
33667: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_INT 0
33675: PPUSH
33676: LD_INT 5
33678: PPUSH
33679: CALL_OW 12
33683: PPUSH
33684: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33688: LD_VAR 0 4
33692: PPUSH
33693: LD_INT 156
33695: PPUSH
33696: LD_INT 15
33698: PPUSH
33699: LD_INT 6
33701: PPUSH
33702: LD_INT 0
33704: PPUSH
33705: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33709: CALL_OW 44
33713: PPUSH
33714: LD_VAR 0 4
33718: PPUSH
33719: CALL_OW 52
// end ;
33723: GO 33640
33725: POP
33726: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33727: LD_ADDR_EXP 35
33731: PUSH
33732: LD_INT 94
33734: PPUSH
33735: LD_STRING dammam
33737: PPUSH
33738: LD_VAR 0 5
33742: PPUSH
33743: LD_INT 10000
33745: PUSH
33746: LD_INT 1000
33748: PUSH
33749: LD_INT 300
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: PPUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 5
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: LD_INT 4
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: PPUSH
33777: CALL 5947 0 5
33781: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33782: LD_ADDR_EXP 35
33786: PUSH
33787: LD_EXP 35
33791: PUSH
33792: LD_INT 122
33794: PPUSH
33795: LD_STRING 
33797: PPUSH
33798: LD_VAR 0 5
33802: PPUSH
33803: LD_INT 100
33805: PUSH
33806: LD_INT 60
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: PPUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 4
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: PPUSH
33836: CALL 5947 0 5
33840: ADD
33841: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33842: LD_ADDR_EXP 33
33846: PUSH
33847: LD_INT 45
33849: PPUSH
33850: LD_STRING jeddah
33852: PPUSH
33853: LD_VAR 0 5
33857: PPUSH
33858: LD_INT 700
33860: PUSH
33861: LD_INT 300
33863: PUSH
33864: LD_INT 10
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: PPUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 5
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: PPUSH
33891: CALL 5947 0 5
33895: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33896: LD_ADDR_EXP 34
33900: PUSH
33901: LD_INT 7
33903: PPUSH
33904: LD_STRING riyadh
33906: PPUSH
33907: LD_VAR 0 5
33911: PPUSH
33912: LD_INT 500
33914: PUSH
33915: LD_INT 60
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: PPUSH
33926: LD_INT 4
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: PPUSH
33944: CALL 5947 0 5
33948: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33949: LD_ADDR_EXP 36
33953: PUSH
33954: LD_INT 69
33956: PPUSH
33957: LD_STRING 
33959: PPUSH
33960: LD_VAR 0 5
33964: PPUSH
33965: LD_INT 500
33967: PUSH
33968: LD_INT 50
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: PPUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL 5947 0 5
34002: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34003: LD_ADDR_EXP 46
34007: PUSH
34008: LD_EXP 35
34012: PUSH
34013: LD_EXP 33
34017: PUSH
34018: LD_EXP 36
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34028: LD_ADDR_VAR 0 2
34032: PUSH
34033: LD_INT 22
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 30
34045: PUSH
34046: LD_INT 31
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 58
34055: PUSH
34056: EMPTY
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: PPUSH
34064: CALL_OW 69
34068: PUSH
34069: FOR_IN
34070: IFFALSE 34195
// begin if GetBase ( i ) then
34072: LD_VAR 0 2
34076: PPUSH
34077: CALL_OW 274
34081: IFFALSE 34085
// continue ;
34083: GO 34069
// d := GetDir ( i ) ;
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_VAR 0 2
34094: PPUSH
34095: CALL_OW 254
34099: ST_TO_ADDR
// if d < 3 then
34100: LD_VAR 0 3
34104: PUSH
34105: LD_INT 3
34107: LESS
34108: IFFALSE 34126
// d := d + 3 else
34110: LD_ADDR_VAR 0 3
34114: PUSH
34115: LD_VAR 0 3
34119: PUSH
34120: LD_INT 3
34122: PLUS
34123: ST_TO_ADDR
34124: GO 34140
// d := d - 3 ;
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_VAR 0 3
34135: PUSH
34136: LD_INT 3
34138: MINUS
34139: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34140: LD_INT 0
34142: PPUSH
34143: LD_INT 8
34145: PPUSH
34146: LD_VAR 0 5
34150: PPUSH
34151: CALL_OW 380
// un := CreateHuman ;
34155: LD_ADDR_VAR 0 4
34159: PUSH
34160: CALL_OW 44
34164: ST_TO_ADDR
// SetDir ( un , d ) ;
34165: LD_VAR 0 4
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34179: LD_VAR 0 4
34183: PPUSH
34184: LD_VAR 0 2
34188: PPUSH
34189: CALL_OW 52
// end ;
34193: GO 34069
34195: POP
34196: POP
// if Difficulty > 1 then
34197: LD_OWVAR 67
34201: PUSH
34202: LD_INT 1
34204: GREATER
34205: IFFALSE 34576
// begin ar_kamikadze := [ ] ;
34207: LD_ADDR_EXP 39
34211: PUSH
34212: EMPTY
34213: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34214: LD_INT 0
34216: PPUSH
34217: LD_INT 1
34219: PPUSH
34220: LD_VAR 0 5
34224: PPUSH
34225: CALL_OW 380
// un := CreateHuman ;
34229: LD_ADDR_VAR 0 4
34233: PUSH
34234: CALL_OW 44
34238: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34239: LD_VAR 0 4
34243: PPUSH
34244: LD_INT 3
34246: PPUSH
34247: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34251: LD_VAR 0 4
34255: PPUSH
34256: LD_INT 23
34258: PPUSH
34259: LD_INT 44
34261: PPUSH
34262: LD_INT 0
34264: PPUSH
34265: CALL_OW 48
// ComCrawl ( un ) ;
34269: LD_VAR 0 4
34273: PPUSH
34274: CALL_OW 137
// un := CreateHuman ;
34278: LD_ADDR_VAR 0 4
34282: PUSH
34283: CALL_OW 44
34287: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34288: LD_VAR 0 4
34292: PPUSH
34293: LD_INT 3
34295: PPUSH
34296: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34300: LD_VAR 0 4
34304: PPUSH
34305: LD_INT 30
34307: PPUSH
34308: LD_INT 39
34310: PPUSH
34311: LD_INT 0
34313: PPUSH
34314: CALL_OW 48
// ComCrawl ( un ) ;
34318: LD_VAR 0 4
34322: PPUSH
34323: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34327: LD_INT 0
34329: PPUSH
34330: LD_INT 17
34332: PPUSH
34333: LD_VAR 0 5
34337: PPUSH
34338: CALL_OW 380
// un := CreateHuman ;
34342: LD_ADDR_VAR 0 4
34346: PUSH
34347: CALL_OW 44
34351: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34352: LD_VAR 0 4
34356: PPUSH
34357: LD_INT 3
34359: PPUSH
34360: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34364: LD_VAR 0 4
34368: PPUSH
34369: LD_INT 45
34371: PPUSH
34372: LD_INT 86
34374: PPUSH
34375: LD_INT 0
34377: PPUSH
34378: CALL_OW 48
// ComHold ( un ) ;
34382: LD_VAR 0 4
34386: PPUSH
34387: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34391: LD_ADDR_EXP 39
34395: PUSH
34396: LD_EXP 39
34400: PPUSH
34401: LD_EXP 39
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: PPUSH
34410: LD_VAR 0 4
34414: PPUSH
34415: CALL_OW 1
34419: ST_TO_ADDR
// un := CreateHuman ;
34420: LD_ADDR_VAR 0 4
34424: PUSH
34425: CALL_OW 44
34429: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34430: LD_VAR 0 4
34434: PPUSH
34435: LD_INT 3
34437: PPUSH
34438: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34442: LD_VAR 0 4
34446: PPUSH
34447: LD_INT 60
34449: PPUSH
34450: LD_INT 85
34452: PPUSH
34453: LD_INT 0
34455: PPUSH
34456: CALL_OW 48
// ComHold ( un ) ;
34460: LD_VAR 0 4
34464: PPUSH
34465: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34469: LD_ADDR_EXP 39
34473: PUSH
34474: LD_EXP 39
34478: PPUSH
34479: LD_EXP 39
34483: PUSH
34484: LD_INT 1
34486: PLUS
34487: PPUSH
34488: LD_VAR 0 4
34492: PPUSH
34493: CALL_OW 1
34497: ST_TO_ADDR
// un := CreateHuman ;
34498: LD_ADDR_VAR 0 4
34502: PUSH
34503: CALL_OW 44
34507: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34508: LD_VAR 0 4
34512: PPUSH
34513: LD_INT 3
34515: PPUSH
34516: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34520: LD_VAR 0 4
34524: PPUSH
34525: LD_INT 222
34527: PPUSH
34528: LD_INT 166
34530: PPUSH
34531: LD_INT 0
34533: PPUSH
34534: CALL_OW 48
// ComHold ( un ) ;
34538: LD_VAR 0 4
34542: PPUSH
34543: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34547: LD_ADDR_EXP 39
34551: PUSH
34552: LD_EXP 39
34556: PPUSH
34557: LD_EXP 39
34561: PUSH
34562: LD_INT 1
34564: PLUS
34565: PPUSH
34566: LD_VAR 0 4
34570: PPUSH
34571: CALL_OW 1
34575: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34576: LD_ADDR_EXP 37
34580: PUSH
34581: EMPTY
34582: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34583: LD_INT 1
34585: PPUSH
34586: LD_INT 1
34588: PPUSH
34589: LD_VAR 0 5
34593: PPUSH
34594: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34598: LD_ADDR_OWVAR 33
34602: PUSH
34603: LD_STRING SecondCharsGal
34605: ST_TO_ADDR
// hc_face_number := 4 ;
34606: LD_ADDR_OWVAR 34
34610: PUSH
34611: LD_INT 4
34613: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34614: LD_ADDR_EXP 37
34618: PUSH
34619: LD_EXP 37
34623: PPUSH
34624: LD_INT 1
34626: PPUSH
34627: CALL_OW 44
34631: PPUSH
34632: CALL_OW 1
34636: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34637: LD_INT 2
34639: PPUSH
34640: LD_INT 4
34642: PPUSH
34643: LD_VAR 0 5
34647: PPUSH
34648: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34652: LD_ADDR_OWVAR 33
34656: PUSH
34657: LD_STRING SecondCharsGal
34659: ST_TO_ADDR
// hc_face_number := 15 ;
34660: LD_ADDR_OWVAR 34
34664: PUSH
34665: LD_INT 15
34667: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34668: LD_ADDR_EXP 37
34672: PUSH
34673: LD_EXP 37
34677: PPUSH
34678: LD_INT 2
34680: PPUSH
34681: CALL_OW 44
34685: PPUSH
34686: CALL_OW 1
34690: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34691: LD_INT 2
34693: PPUSH
34694: LD_INT 4
34696: PPUSH
34697: LD_VAR 0 5
34701: PPUSH
34702: CALL_OW 380
// hc_gallery :=  ;
34706: LD_ADDR_OWVAR 33
34710: PUSH
34711: LD_STRING 
34713: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34714: LD_ADDR_EXP 37
34718: PUSH
34719: LD_EXP 37
34723: PPUSH
34724: LD_INT 3
34726: PPUSH
34727: CALL_OW 44
34731: PPUSH
34732: CALL_OW 1
34736: ST_TO_ADDR
// hc_sex := sex_male ;
34737: LD_ADDR_OWVAR 27
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
// hc_class = 11 ;
34745: LD_ADDR_OWVAR 28
34749: PUSH
34750: LD_INT 11
34752: ST_TO_ADDR
// hc_gallery = sandar ;
34753: LD_ADDR_OWVAR 33
34757: PUSH
34758: LD_STRING sandar
34760: ST_TO_ADDR
// hc_face_number = 33 ;
34761: LD_ADDR_OWVAR 34
34765: PUSH
34766: LD_INT 33
34768: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34769: LD_ADDR_OWVAR 26
34773: PUSH
34774: LD_STRING Thabit Muhair Saliba
34776: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34777: LD_ADDR_OWVAR 31
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// Saliba = CreateHuman ;
34800: LD_ADDR_EXP 41
34804: PUSH
34805: CALL_OW 44
34809: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34810: LD_EXP 41
34814: PPUSH
34815: LD_INT 7
34817: PPUSH
34818: CALL_OW 52
// if gensher_active then
34822: LD_EXP 17
34826: IFFALSE 34853
// begin Gensher = NewCharacter ( Gensher ) ;
34828: LD_ADDR_EXP 42
34832: PUSH
34833: LD_STRING Gensher
34835: PPUSH
34836: CALL_OW 25
34840: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
34841: LD_EXP 42
34845: PPUSH
34846: LD_INT 94
34848: PPUSH
34849: CALL_OW 52
// end ; InitHc ;
34853: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
34857: LD_ADDR_EXP 38
34861: PUSH
34862: EMPTY
34863: ST_TO_ADDR
// for i = 1 to 4 do
34864: LD_ADDR_VAR 0 2
34868: PUSH
34869: DOUBLE
34870: LD_INT 1
34872: DEC
34873: ST_TO_ADDR
34874: LD_INT 4
34876: PUSH
34877: FOR_TO
34878: IFFALSE 35050
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34880: LD_INT 13
34882: PUSH
34883: LD_INT 14
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PPUSH
34893: LD_INT 2
34895: PPUSH
34896: CALL_OW 12
34900: ARRAY
34901: PPUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PPUSH
34915: LD_INT 2
34917: PPUSH
34918: CALL_OW 12
34922: ARRAY
34923: PPUSH
34924: LD_INT 1
34926: PPUSH
34927: LD_INT 25
34929: PUSH
34930: LD_INT 27
34932: PUSH
34933: LD_INT 26
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PPUSH
34944: LD_INT 3
34946: PPUSH
34947: CALL_OW 12
34951: ARRAY
34952: PPUSH
34953: LD_INT 60
34955: PPUSH
34956: LD_INT 100
34958: PPUSH
34959: CALL_OW 12
34963: PPUSH
34964: CALL 1984 0 5
// un := CreateVehicle ;
34968: LD_ADDR_VAR 0 4
34972: PUSH
34973: CALL_OW 45
34977: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34978: LD_ADDR_EXP 38
34982: PUSH
34983: LD_EXP 38
34987: PPUSH
34988: LD_EXP 38
34992: PUSH
34993: LD_INT 1
34995: PLUS
34996: PPUSH
34997: LD_VAR 0 4
35001: PPUSH
35002: CALL_OW 1
35006: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35007: LD_VAR 0 4
35011: PPUSH
35012: LD_INT 0
35014: PPUSH
35015: LD_INT 5
35017: PPUSH
35018: CALL_OW 12
35022: PPUSH
35023: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35027: LD_VAR 0 4
35031: PPUSH
35032: LD_INT 124
35034: PPUSH
35035: LD_INT 141
35037: PPUSH
35038: LD_INT 6
35040: PPUSH
35041: LD_INT 0
35043: PPUSH
35044: CALL_OW 50
// end ;
35048: GO 34877
35050: POP
35051: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35052: LD_ADDR_EXP 40
35056: PUSH
35057: EMPTY
35058: PUSH
35059: EMPTY
35060: PUSH
35061: EMPTY
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: DOUBLE
35074: LD_INT 1
35076: DEC
35077: ST_TO_ADDR
35078: LD_INT 3
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 4
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: PUSH
35092: LD_OWVAR 67
35096: ARRAY
35097: PUSH
35098: FOR_TO
35099: IFFALSE 35313
// for i = 1 to 3 do
35101: LD_ADDR_VAR 0 2
35105: PUSH
35106: DOUBLE
35107: LD_INT 1
35109: DEC
35110: ST_TO_ADDR
35111: LD_INT 3
35113: PUSH
35114: FOR_TO
35115: IFFALSE 35309
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35117: LD_INT 14
35119: PPUSH
35120: LD_INT 3
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PPUSH
35133: LD_INT 2
35135: PPUSH
35136: CALL_OW 12
35140: ARRAY
35141: PPUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 5
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PPUSH
35155: LD_INT 2
35157: PPUSH
35158: CALL_OW 12
35162: ARRAY
35163: PPUSH
35164: LD_INT 25
35166: PUSH
35167: LD_INT 27
35169: PUSH
35170: LD_INT 26
35172: PUSH
35173: LD_INT 28
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PPUSH
35185: LD_INT 4
35187: PPUSH
35188: CALL_OW 12
35192: ARRAY
35193: PPUSH
35194: LD_INT 100
35196: PPUSH
35197: CALL 1984 0 5
// un := CreateVehicle ;
35201: LD_ADDR_VAR 0 4
35205: PUSH
35206: CALL_OW 45
35210: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35211: LD_ADDR_EXP 40
35215: PUSH
35216: LD_EXP 40
35220: PPUSH
35221: LD_VAR 0 2
35225: PUSH
35226: LD_EXP 40
35230: PUSH
35231: LD_VAR 0 2
35235: ARRAY
35236: PUSH
35237: LD_INT 1
35239: PLUS
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PPUSH
35245: LD_VAR 0 4
35249: PPUSH
35250: CALL 3156 0 3
35254: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35255: LD_VAR 0 4
35259: PPUSH
35260: LD_INT 0
35262: PPUSH
35263: LD_INT 5
35265: PPUSH
35266: CALL_OW 12
35270: PPUSH
35271: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35275: LD_VAR 0 4
35279: PPUSH
35280: LD_INT 20
35282: PUSH
35283: LD_INT 21
35285: PUSH
35286: LD_INT 22
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: PUSH
35294: LD_VAR 0 2
35298: ARRAY
35299: PPUSH
35300: LD_INT 0
35302: PPUSH
35303: CALL_OW 49
// end ;
35307: GO 35114
35309: POP
35310: POP
35311: GO 35098
35313: POP
35314: POP
// InitHc ;
35315: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35319: LD_INT 4
35321: PPUSH
35322: LD_INT 5
35324: PPUSH
35325: LD_INT 10
35327: PPUSH
35328: LD_INT 5
35330: PPUSH
35331: LD_INT 0
35333: PPUSH
35334: CALL_OW 58
// end ;
35338: LD_VAR 0 1
35342: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35343: LD_EXP 39
35347: IFFALSE 35421
35349: GO 35351
35351: DISABLE
35352: LD_INT 0
35354: PPUSH
// begin enable ;
35355: ENABLE
// for i in ar_kamikadze do
35356: LD_ADDR_VAR 0 1
35360: PUSH
35361: LD_EXP 39
35365: PUSH
35366: FOR_IN
35367: IFFALSE 35419
// if See ( 1 , i ) then
35369: LD_INT 1
35371: PPUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 292
35381: IFFALSE 35417
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35383: LD_VAR 0 1
35387: PPUSH
35388: LD_INT 81
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PPUSH
35398: CALL_OW 69
35402: PPUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 74
35412: PPUSH
35413: CALL_OW 115
35417: GO 35366
35419: POP
35420: POP
// end ;
35421: PPOPN 1
35423: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35424: LD_EXP 12
35428: IFFALSE 35745
35430: GO 35432
35432: DISABLE
35433: LD_INT 0
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35439: LD_INT 35
35441: PPUSH
35442: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35446: LD_INT 1
35448: PPUSH
35449: CALL 54712 0 1
35453: PUSH
35454: LD_INT 0
35456: EQUAL
35457: IFFALSE 35439
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35459: LD_INT 1
35461: PPUSH
35462: LD_INT 14
35464: PUSH
35465: LD_INT 3
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 32
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: PUSH
35480: EMPTY
35481: LIST
35482: PPUSH
35483: CALL 54501 0 2
// repeat wait ( 0 0$1 ) ;
35487: LD_INT 35
35489: PPUSH
35490: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35494: LD_EXP 61
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: PPUSH
35503: LD_INT 33
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 34
35515: PUSH
35516: LD_INT 32
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PPUSH
35527: CALL_OW 72
35531: IFFALSE 35487
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35533: LD_ADDR_VAR 0 2
35537: PUSH
35538: LD_EXP 61
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: PPUSH
35547: LD_INT 33
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 34
35559: PUSH
35560: LD_INT 32
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PPUSH
35571: CALL_OW 72
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35580: LD_ADDR_VAR 0 4
35584: PUSH
35585: LD_INT 5
35587: PPUSH
35588: CALL_OW 469
35592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35593: LD_INT 35
35595: PPUSH
35596: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35600: LD_ADDR_VAR 0 4
35604: PUSH
35605: LD_INT 5
35607: PPUSH
35608: CALL_OW 469
35612: ST_TO_ADDR
// tmp := 100 ;
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_INT 100
35620: ST_TO_ADDR
// if pos then
35621: LD_VAR 0 4
35625: IFFALSE 35665
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35627: LD_ADDR_VAR 0 3
35631: PUSH
35632: LD_INT 2
35634: PPUSH
35635: LD_VAR 0 4
35639: PUSH
35640: LD_INT 1
35642: ARRAY
35643: PPUSH
35644: LD_VAR 0 4
35648: PUSH
35649: LD_INT 2
35651: ARRAY
35652: PPUSH
35653: LD_INT 20
35655: PPUSH
35656: CALL 3650 0 4
35660: PUSH
35661: LD_INT 4
35663: ARRAY
35664: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35665: LD_VAR 0 4
35669: PUSH
35670: LD_EXP 13
35674: NOT
35675: AND
35676: PUSH
35677: LD_VAR 0 3
35681: PUSH
35682: LD_INT 10
35684: LESS
35685: AND
35686: IFFALSE 35593
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35688: LD_VAR 0 2
35692: PPUSH
35693: LD_VAR 0 4
35697: PUSH
35698: LD_INT 1
35700: ARRAY
35701: PPUSH
35702: LD_VAR 0 4
35706: PUSH
35707: LD_INT 2
35709: ARRAY
35710: PPUSH
35711: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35715: LD_VAR 0 2
35719: PPUSH
35720: LD_INT 198
35722: PPUSH
35723: LD_INT 113
35725: PPUSH
35726: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35730: LD_VAR 0 2
35734: PPUSH
35735: LD_INT 124
35737: PPUSH
35738: LD_INT 7
35740: PPUSH
35741: CALL_OW 171
// end ;
35745: PPOPN 4
35747: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35748: LD_EXP 6
35752: IFFALSE 38297
35754: GO 35756
35756: DISABLE
35757: LD_INT 0
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35767: LD_ADDR_VAR 0 4
35771: PUSH
35772: LD_INT 5
35774: PUSH
35775: LD_INT 6
35777: PUSH
35778: LD_INT 7
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: PUSH
35786: LD_OWVAR 67
35790: ARRAY
35791: ST_TO_ADDR
// coords := [ ] ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: EMPTY
35798: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35799: LD_ADDR_VAR 0 6
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35846: LD_INT 1
35848: PPUSH
35849: LD_INT 14
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 28
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 14
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 25
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 14
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 28
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 14
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 29
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL 54501 0 2
// wait ( [ 10 10$00 , 9 9$00 , 8 8$20 ] [ Difficulty ] ) ;
35931: LD_INT 21000
35933: PUSH
35934: LD_INT 18900
35936: PUSH
35937: LD_INT 17500
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: PUSH
35945: LD_OWVAR 67
35949: ARRAY
35950: PPUSH
35951: CALL_OW 67
// InitHc ;
35955: CALL_OW 19
// InitUc ;
35959: CALL_OW 18
// uc_side := 2 ;
35963: LD_ADDR_OWVAR 20
35967: PUSH
35968: LD_INT 2
35970: ST_TO_ADDR
// uc_nation := 2 ;
35971: LD_ADDR_OWVAR 21
35975: PUSH
35976: LD_INT 2
35978: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
35979: LD_ADDR_VAR 0 3
35983: PUSH
35984: EMPTY
35985: PUSH
35986: EMPTY
35987: PUSH
35988: EMPTY
35989: PUSH
35990: EMPTY
35991: PUSH
35992: EMPTY
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_VAR 0 3
36010: PPUSH
36011: LD_INT 1
36013: PPUSH
36014: LD_EXP 61
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PUSH
36023: LD_INT 34
36025: PUSH
36026: LD_INT 32
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PPUSH
36033: CALL_OW 69
36037: DIFF
36038: PPUSH
36039: CALL_OW 1
36043: ST_TO_ADDR
// for i = 1 to Difficulty do
36044: LD_ADDR_VAR 0 1
36048: PUSH
36049: DOUBLE
36050: LD_INT 1
36052: DEC
36053: ST_TO_ADDR
36054: LD_OWVAR 67
36058: PUSH
36059: FOR_TO
36060: IFFALSE 36182
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36062: LD_INT 13
36064: PPUSH
36065: LD_INT 3
36067: PPUSH
36068: LD_INT 5
36070: PPUSH
36071: LD_INT 29
36073: PPUSH
36074: LD_INT 100
36076: PPUSH
36077: CALL 1984 0 5
// un := CreateVehicle ;
36081: LD_ADDR_VAR 0 2
36085: PUSH
36086: CALL_OW 45
36090: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36091: LD_ADDR_VAR 0 3
36095: PUSH
36096: LD_VAR 0 3
36100: PPUSH
36101: LD_INT 1
36103: PUSH
36104: LD_VAR 0 3
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PUSH
36113: LD_INT 1
36115: PLUS
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PPUSH
36121: LD_VAR 0 2
36125: PPUSH
36126: CALL 3156 0 3
36130: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36131: LD_VAR 0 2
36135: PPUSH
36136: LD_INT 3
36138: PPUSH
36139: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36143: LD_VAR 0 2
36147: PPUSH
36148: LD_INT 16
36150: PPUSH
36151: LD_INT 0
36153: PPUSH
36154: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36158: LD_VAR 0 2
36162: PPUSH
36163: LD_INT 51
36165: PPUSH
36166: LD_INT 10
36168: PPUSH
36169: CALL_OW 111
// wait ( 0 0$2 ) ;
36173: LD_INT 70
36175: PPUSH
36176: CALL_OW 67
// end ;
36180: GO 36059
36182: POP
36183: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36184: LD_ADDR_VAR 0 5
36188: PUSH
36189: LD_INT 51
36191: PUSH
36192: LD_INT 24
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 75
36201: PUSH
36202: LD_INT 90
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36213: LD_INT 1
36215: PPUSH
36216: LD_VAR 0 3
36220: PUSH
36221: LD_INT 1
36223: ARRAY
36224: PPUSH
36225: LD_VAR 0 5
36229: PPUSH
36230: LD_VAR 0 6
36234: PPUSH
36235: CALL 54597 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36239: LD_ADDR_VAR 0 1
36243: PUSH
36244: DOUBLE
36245: LD_INT 1
36247: DEC
36248: ST_TO_ADDR
36249: LD_INT 2
36251: PUSH
36252: LD_INT 3
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: PUSH
36263: LD_OWVAR 67
36267: ARRAY
36268: PUSH
36269: FOR_TO
36270: IFFALSE 36354
// begin PrepareHuman ( false , 17 , skill ) ;
36272: LD_INT 0
36274: PPUSH
36275: LD_INT 17
36277: PPUSH
36278: LD_VAR 0 4
36282: PPUSH
36283: CALL_OW 380
// un := CreateHuman ;
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: CALL_OW 44
36296: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_VAR 0 3
36306: PPUSH
36307: LD_INT 2
36309: PUSH
36310: LD_VAR 0 3
36314: PUSH
36315: LD_INT 2
36317: ARRAY
36318: PUSH
36319: LD_INT 1
36321: PLUS
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PPUSH
36327: LD_VAR 0 2
36331: PPUSH
36332: CALL 3156 0 3
36336: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_INT 13
36344: PPUSH
36345: LD_INT 0
36347: PPUSH
36348: CALL_OW 49
// end ;
36352: GO 36269
36354: POP
36355: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36356: LD_ADDR_VAR 0 1
36360: PUSH
36361: DOUBLE
36362: LD_INT 1
36364: DEC
36365: ST_TO_ADDR
36366: LD_INT 3
36368: PUSH
36369: LD_INT 4
36371: PUSH
36372: LD_INT 4
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: LD_OWVAR 67
36384: ARRAY
36385: PUSH
36386: FOR_TO
36387: IFFALSE 36490
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36389: LD_INT 0
36391: PPUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 8
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PPUSH
36405: LD_INT 2
36407: PPUSH
36408: CALL_OW 12
36412: ARRAY
36413: PPUSH
36414: LD_VAR 0 4
36418: PPUSH
36419: CALL_OW 380
// un := CreateHuman ;
36423: LD_ADDR_VAR 0 2
36427: PUSH
36428: CALL_OW 44
36432: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36433: LD_ADDR_VAR 0 3
36437: PUSH
36438: LD_VAR 0 3
36442: PPUSH
36443: LD_INT 2
36445: PUSH
36446: LD_VAR 0 3
36450: PUSH
36451: LD_INT 2
36453: ARRAY
36454: PUSH
36455: LD_INT 1
36457: PLUS
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PPUSH
36463: LD_VAR 0 2
36467: PPUSH
36468: CALL 3156 0 3
36472: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36473: LD_VAR 0 2
36477: PPUSH
36478: LD_INT 13
36480: PPUSH
36481: LD_INT 0
36483: PPUSH
36484: CALL_OW 49
// end ;
36488: GO 36386
36490: POP
36491: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_INT 67
36499: PUSH
36500: LD_INT 112
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 85
36509: PUSH
36510: LD_INT 130
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36521: LD_INT 2
36523: PPUSH
36524: LD_VAR 0 3
36528: PUSH
36529: LD_INT 2
36531: ARRAY
36532: PPUSH
36533: LD_VAR 0 5
36537: PPUSH
36538: LD_VAR 0 6
36542: PPUSH
36543: CALL 54597 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36547: LD_ADDR_VAR 0 1
36551: PUSH
36552: DOUBLE
36553: LD_INT 1
36555: DEC
36556: ST_TO_ADDR
36557: LD_INT 1
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: PUSH
36571: LD_OWVAR 67
36575: ARRAY
36576: PUSH
36577: FOR_TO
36578: IFFALSE 36662
// begin PrepareHuman ( false , 17 , skill ) ;
36580: LD_INT 0
36582: PPUSH
36583: LD_INT 17
36585: PPUSH
36586: LD_VAR 0 4
36590: PPUSH
36591: CALL_OW 380
// un := CreateHuman ;
36595: LD_ADDR_VAR 0 2
36599: PUSH
36600: CALL_OW 44
36604: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_VAR 0 3
36614: PPUSH
36615: LD_INT 3
36617: PUSH
36618: LD_VAR 0 3
36622: PUSH
36623: LD_INT 3
36625: ARRAY
36626: PUSH
36627: LD_INT 1
36629: PLUS
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PPUSH
36635: LD_VAR 0 2
36639: PPUSH
36640: CALL 3156 0 3
36644: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_INT 14
36652: PPUSH
36653: LD_INT 0
36655: PPUSH
36656: CALL_OW 49
// end ;
36660: GO 36577
36662: POP
36663: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36664: LD_ADDR_VAR 0 5
36668: PUSH
36669: LD_INT 148
36671: PUSH
36672: LD_INT 158
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 148
36681: PUSH
36682: LD_INT 158
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36693: LD_INT 3
36695: PPUSH
36696: LD_VAR 0 3
36700: PUSH
36701: LD_INT 3
36703: ARRAY
36704: PPUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: LD_VAR 0 6
36714: PPUSH
36715: CALL 54597 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36719: LD_ADDR_VAR 0 1
36723: PUSH
36724: DOUBLE
36725: LD_INT 1
36727: DEC
36728: ST_TO_ADDR
36729: LD_INT 3
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: LD_INT 5
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: LD_OWVAR 67
36747: ARRAY
36748: PUSH
36749: FOR_TO
36750: IFFALSE 36958
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36752: LD_INT 14
36754: PPUSH
36755: LD_INT 3
36757: PPUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 5
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PPUSH
36771: LD_INT 2
36773: PPUSH
36774: CALL_OW 12
36778: ARRAY
36779: PPUSH
36780: LD_INT 27
36782: PUSH
36783: LD_INT 26
36785: PUSH
36786: LD_INT 28
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PPUSH
36797: LD_INT 3
36799: PPUSH
36800: CALL_OW 12
36804: ARRAY
36805: PPUSH
36806: LD_INT 100
36808: PPUSH
36809: CALL 1984 0 5
// un := CreateVehicle ;
36813: LD_ADDR_VAR 0 2
36817: PUSH
36818: CALL_OW 45
36822: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36823: LD_ADDR_VAR 0 3
36827: PUSH
36828: LD_VAR 0 3
36832: PPUSH
36833: LD_INT 4
36835: PUSH
36836: LD_VAR 0 3
36840: PUSH
36841: LD_INT 4
36843: ARRAY
36844: PUSH
36845: LD_INT 1
36847: PLUS
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PPUSH
36853: LD_VAR 0 2
36857: PPUSH
36858: CALL 3156 0 3
36862: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36863: LD_VAR 0 2
36867: PPUSH
36868: LD_INT 5
36870: PPUSH
36871: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36875: LD_VAR 0 2
36879: PPUSH
36880: LD_INT 15
36882: PPUSH
36883: LD_INT 0
36885: PPUSH
36886: CALL_OW 49
// if GetControl ( un ) = control_manual then
36890: LD_VAR 0 2
36894: PPUSH
36895: CALL_OW 263
36899: PUSH
36900: LD_INT 1
36902: EQUAL
36903: IFFALSE 36934
// begin PrepareHuman ( false , 3 , skill ) ;
36905: LD_INT 0
36907: PPUSH
36908: LD_INT 3
36910: PPUSH
36911: LD_VAR 0 4
36915: PPUSH
36916: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36920: CALL_OW 44
36924: PPUSH
36925: LD_VAR 0 2
36929: PPUSH
36930: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36934: LD_VAR 0 2
36938: PPUSH
36939: LD_INT 179
36941: PPUSH
36942: LD_INT 135
36944: PPUSH
36945: CALL_OW 111
// wait ( 0 0$2 ) ;
36949: LD_INT 70
36951: PPUSH
36952: CALL_OW 67
// end ;
36956: GO 36749
36958: POP
36959: POP
// vc_chassis := 15 ;
36960: LD_ADDR_OWVAR 37
36964: PUSH
36965: LD_INT 15
36967: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36968: LD_ADDR_VAR 0 3
36972: PUSH
36973: LD_VAR 0 3
36977: PPUSH
36978: LD_INT 4
36980: PUSH
36981: LD_VAR 0 3
36985: PUSH
36986: LD_INT 4
36988: ARRAY
36989: PUSH
36990: LD_INT 1
36992: PLUS
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PPUSH
36998: CALL_OW 45
37002: PPUSH
37003: CALL 3156 0 3
37007: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37008: LD_VAR 0 3
37012: PUSH
37013: LD_INT 4
37015: ARRAY
37016: PUSH
37017: LD_VAR 0 3
37021: PUSH
37022: LD_INT 4
37024: ARRAY
37025: ARRAY
37026: PPUSH
37027: LD_INT 15
37029: PPUSH
37030: LD_INT 0
37032: PPUSH
37033: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37037: LD_INT 0
37039: PPUSH
37040: LD_INT 11
37042: PPUSH
37043: LD_VAR 0 4
37047: PPUSH
37048: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_VAR 0 3
37061: PPUSH
37062: LD_INT 4
37064: PUSH
37065: LD_VAR 0 3
37069: PUSH
37070: LD_INT 4
37072: ARRAY
37073: PUSH
37074: LD_INT 1
37076: PLUS
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL_OW 44
37086: PPUSH
37087: CALL 3156 0 3
37091: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37092: LD_VAR 0 3
37096: PUSH
37097: LD_INT 4
37099: ARRAY
37100: PUSH
37101: LD_VAR 0 3
37105: PUSH
37106: LD_INT 4
37108: ARRAY
37109: ARRAY
37110: PPUSH
37111: LD_VAR 0 3
37115: PUSH
37116: LD_INT 4
37118: ARRAY
37119: PUSH
37120: LD_VAR 0 3
37124: PUSH
37125: LD_INT 4
37127: ARRAY
37128: PUSH
37129: LD_INT 1
37131: MINUS
37132: ARRAY
37133: PPUSH
37134: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37138: LD_ADDR_VAR 0 5
37142: PUSH
37143: LD_INT 148
37145: PUSH
37146: LD_INT 140
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: EMPTY
37154: LIST
37155: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37156: LD_INT 1
37158: PPUSH
37159: LD_VAR 0 3
37163: PUSH
37164: LD_INT 4
37166: ARRAY
37167: PPUSH
37168: LD_VAR 0 5
37172: PPUSH
37173: LD_VAR 0 6
37177: PPUSH
37178: CALL 54597 0 4
// if gensher_active then
37182: LD_EXP 17
37186: IFFALSE 37539
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37188: LD_EXP 42
37192: PPUSH
37193: LD_STRING D10-Diet-1
37195: PPUSH
37196: CALL_OW 94
// for i = 1 to 2 do
37200: LD_ADDR_VAR 0 1
37204: PUSH
37205: DOUBLE
37206: LD_INT 1
37208: DEC
37209: ST_TO_ADDR
37210: LD_INT 2
37212: PUSH
37213: FOR_TO
37214: IFFALSE 37336
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37216: LD_INT 13
37218: PPUSH
37219: LD_INT 3
37221: PPUSH
37222: LD_INT 5
37224: PPUSH
37225: LD_INT 29
37227: PPUSH
37228: LD_INT 100
37230: PPUSH
37231: CALL 1984 0 5
// un := CreateVehicle ;
37235: LD_ADDR_VAR 0 2
37239: PUSH
37240: CALL_OW 45
37244: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: LD_INT 5
37257: PUSH
37258: LD_VAR 0 3
37262: PUSH
37263: LD_INT 5
37265: ARRAY
37266: PUSH
37267: LD_INT 1
37269: PLUS
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PPUSH
37275: LD_VAR 0 2
37279: PPUSH
37280: CALL 3156 0 3
37284: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37285: LD_VAR 0 2
37289: PPUSH
37290: LD_INT 0
37292: PPUSH
37293: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37297: LD_VAR 0 2
37301: PPUSH
37302: LD_INT 23
37304: PPUSH
37305: LD_INT 0
37307: PPUSH
37308: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37312: LD_VAR 0 2
37316: PPUSH
37317: LD_INT 85
37319: PPUSH
37320: LD_INT 152
37322: PPUSH
37323: CALL_OW 111
// wait ( 0 0$2 ) ;
37327: LD_INT 70
37329: PPUSH
37330: CALL_OW 67
// end ;
37334: GO 37213
37336: POP
37337: POP
// for i = 1 to 3 do
37338: LD_ADDR_VAR 0 1
37342: PUSH
37343: DOUBLE
37344: LD_INT 1
37346: DEC
37347: ST_TO_ADDR
37348: LD_INT 3
37350: PUSH
37351: FOR_TO
37352: IFFALSE 37493
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37354: LD_INT 14
37356: PPUSH
37357: LD_INT 3
37359: PPUSH
37360: LD_INT 5
37362: PPUSH
37363: LD_INT 27
37365: PUSH
37366: LD_INT 28
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PPUSH
37376: LD_INT 2
37378: PPUSH
37379: CALL_OW 12
37383: ARRAY
37384: PPUSH
37385: LD_INT 100
37387: PPUSH
37388: CALL 1984 0 5
// un := CreateVehicle ;
37392: LD_ADDR_VAR 0 2
37396: PUSH
37397: CALL_OW 45
37401: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_VAR 0 3
37411: PPUSH
37412: LD_INT 5
37414: PUSH
37415: LD_VAR 0 3
37419: PUSH
37420: LD_INT 5
37422: ARRAY
37423: PUSH
37424: LD_INT 1
37426: PLUS
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PPUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL 3156 0 3
37441: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37442: LD_VAR 0 2
37446: PPUSH
37447: LD_INT 0
37449: PPUSH
37450: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37454: LD_VAR 0 2
37458: PPUSH
37459: LD_INT 23
37461: PPUSH
37462: LD_INT 0
37464: PPUSH
37465: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37469: LD_VAR 0 2
37473: PPUSH
37474: LD_INT 85
37476: PPUSH
37477: LD_INT 152
37479: PPUSH
37480: CALL_OW 111
// wait ( 0 0$2 ) ;
37484: LD_INT 70
37486: PPUSH
37487: CALL_OW 67
// end ;
37491: GO 37351
37493: POP
37494: POP
// coords := [ [ 97 , 143 ] ] ;
37495: LD_ADDR_VAR 0 5
37499: PUSH
37500: LD_INT 97
37502: PUSH
37503: LD_INT 143
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37513: LD_INT 1
37515: PPUSH
37516: LD_VAR 0 3
37520: PUSH
37521: LD_INT 5
37523: ARRAY
37524: PPUSH
37525: LD_VAR 0 5
37529: PPUSH
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL 54597 0 4
// end ; Wait ( 10 10$00 ) ;
37539: LD_INT 21000
37541: PPUSH
37542: CALL_OW 67
// tmp := [ ] ;
37546: LD_ADDR_VAR 0 3
37550: PUSH
37551: EMPTY
37552: ST_TO_ADDR
// w := 1 ;
37553: LD_ADDR_VAR 0 7
37557: PUSH
37558: LD_INT 1
37560: ST_TO_ADDR
// repeat tmp := [ ] ;
37561: LD_ADDR_VAR 0 3
37565: PUSH
37566: EMPTY
37567: ST_TO_ADDR
// if w mod 4 = 0 then
37568: LD_VAR 0 7
37572: PUSH
37573: LD_INT 4
37575: MOD
37576: PUSH
37577: LD_INT 0
37579: EQUAL
37580: IFFALSE 37667
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37582: LD_ADDR_VAR 0 8
37586: PUSH
37587: LD_INT 11
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 24
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 11
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 24
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 11
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 24
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 11
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 24
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
37665: GO 37769
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37667: LD_ADDR_VAR 0 8
37671: PUSH
37672: LD_INT 14
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 28
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 14
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 25
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 14
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 28
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 14
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 29
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 11
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 24
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: ST_TO_ADDR
// if w mod 3 = 0 then
37769: LD_VAR 0 7
37773: PUSH
37774: LD_INT 3
37776: MOD
37777: PUSH
37778: LD_INT 0
37780: EQUAL
37781: IFFALSE 37857
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37783: LD_ADDR_VAR 0 8
37787: PUSH
37788: LD_VAR 0 8
37792: PPUSH
37793: LD_INT 1
37795: PUSH
37796: LD_VAR 0 8
37800: PUSH
37801: LD_VAR 0 1
37805: ARRAY
37806: PUSH
37807: LD_INT 1
37809: PLUS
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: LD_INT 14
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: LD_INT 25
37826: PUSH
37827: LD_INT 28
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PPUSH
37837: LD_INT 2
37839: PPUSH
37840: CALL_OW 12
37844: ARRAY
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: PPUSH
37852: CALL 3156 0 3
37856: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37857: LD_INT 1
37859: PPUSH
37860: LD_VAR 0 8
37864: PPUSH
37865: CALL 54501 0 2
// if GetSide ( ar_dep_w ) = 2 then
37869: LD_INT 45
37871: PPUSH
37872: CALL_OW 255
37876: PUSH
37877: LD_INT 2
37879: EQUAL
37880: IFFALSE 37965
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
37882: LD_ADDR_VAR 0 8
37886: PUSH
37887: LD_INT 14
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 28
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 14
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: LD_INT 27
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 14
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: LD_INT 27
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
37946: LD_INT 2
37948: PPUSH
37949: LD_VAR 0 8
37953: PPUSH
37954: CALL 54501 0 2
// wait ( 0 0$50 ) ;
37958: LD_INT 1750
37960: PPUSH
37961: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
37965: LD_INT 35
37967: PPUSH
37968: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37972: LD_EXP 61
37976: PUSH
37977: LD_INT 1
37979: ARRAY
37980: PPUSH
37981: LD_INT 3
37983: PUSH
37984: LD_INT 34
37986: PUSH
37987: LD_INT 32
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PPUSH
37998: CALL_OW 72
38002: PUSH
38003: LD_INT 4
38005: GREATEREQUAL
38006: IFFALSE 37965
// wait ( 0 0$10 ) ;
38008: LD_INT 350
38010: PPUSH
38011: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_EXP 61
38024: PUSH
38025: LD_INT 1
38027: ARRAY
38028: PPUSH
38029: LD_INT 3
38031: PUSH
38032: LD_INT 34
38034: PUSH
38035: LD_INT 32
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 72
38050: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38051: LD_INT 100
38053: PPUSH
38054: CALL_OW 13
38058: PUSH
38059: LD_INT 50
38061: LESS
38062: IFFALSE 38095
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: LD_INT 55
38071: PUSH
38072: LD_INT 7
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 75
38081: PUSH
38082: LD_INT 90
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: ST_TO_ADDR
38093: GO 38124
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38095: LD_ADDR_VAR 0 5
38099: PUSH
38100: LD_INT 128
38102: PUSH
38103: LD_INT 94
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 180
38112: PUSH
38113: LD_INT 135
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: ST_TO_ADDR
// if w mod 4 = 0 then
38124: LD_VAR 0 7
38128: PUSH
38129: LD_INT 4
38131: MOD
38132: PUSH
38133: LD_INT 0
38135: EQUAL
38136: IFFALSE 38167
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38138: LD_ADDR_VAR 0 5
38142: PUSH
38143: LD_INT 91
38145: PUSH
38146: LD_INT 58
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 117
38155: PUSH
38156: LD_INT 107
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38167: LD_INT 1
38169: PPUSH
38170: LD_VAR 0 3
38174: PPUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: LD_VAR 0 6
38184: PPUSH
38185: CALL 54597 0 4
// if mc_vehicles [ 2 ] then
38189: LD_EXP 61
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: IFFALSE 38233
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38199: LD_INT 2
38201: PPUSH
38202: LD_EXP 61
38206: PUSH
38207: LD_INT 2
38209: ARRAY
38210: PPUSH
38211: LD_INT 73
38213: PUSH
38214: LD_INT 115
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: EMPTY
38222: LIST
38223: PPUSH
38224: LD_VAR 0 6
38228: PPUSH
38229: CALL 54597 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38233: LD_INT 19950
38235: PPUSH
38236: LD_INT 26250
38238: PPUSH
38239: CALL_OW 12
38243: PPUSH
38244: CALL_OW 67
// w := w + 1 ;
38248: LD_ADDR_VAR 0 7
38252: PUSH
38253: LD_VAR 0 7
38257: PUSH
38258: LD_INT 1
38260: PLUS
38261: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38262: LD_INT 94
38264: PPUSH
38265: CALL_OW 301
38269: PUSH
38270: LD_EXP 46
38274: PUSH
38275: LD_INT 1
38277: ARRAY
38278: PPUSH
38279: LD_INT 30
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PPUSH
38289: CALL_OW 72
38293: NOT
38294: OR
38295: IFFALSE 37561
// end ;
38297: PPOPN 8
38299: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38300: LD_INT 69
38302: IFFALSE 38677
38304: GO 38306
38306: DISABLE
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
// begin enable ;
38313: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38314: LD_INT 35
38316: PPUSH
38317: LD_INT 1190
38319: PPUSH
38320: CALL_OW 12
38324: PPUSH
38325: CALL_OW 67
// tmp := [ ] ;
38329: LD_ADDR_VAR 0 2
38333: PUSH
38334: EMPTY
38335: ST_TO_ADDR
// uc_side := 8 ;
38336: LD_ADDR_OWVAR 20
38340: PUSH
38341: LD_INT 8
38343: ST_TO_ADDR
// uc_nation := 2 ;
38344: LD_ADDR_OWVAR 21
38348: PUSH
38349: LD_INT 2
38351: ST_TO_ADDR
// InitHc ;
38352: CALL_OW 19
// for i = 1 to 3 do
38356: LD_ADDR_VAR 0 1
38360: PUSH
38361: DOUBLE
38362: LD_INT 1
38364: DEC
38365: ST_TO_ADDR
38366: LD_INT 3
38368: PUSH
38369: FOR_TO
38370: IFFALSE 38497
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38372: LD_INT 13
38374: PUSH
38375: LD_INT 14
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PPUSH
38385: LD_INT 2
38387: PPUSH
38388: CALL_OW 12
38392: ARRAY
38393: PPUSH
38394: LD_INT 3
38396: PPUSH
38397: LD_INT 5
38399: PPUSH
38400: LD_INT 27
38402: PUSH
38403: LD_INT 28
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PPUSH
38413: LD_INT 2
38415: PPUSH
38416: CALL_OW 12
38420: ARRAY
38421: PPUSH
38422: LD_INT 100
38424: PPUSH
38425: CALL 1984 0 5
// un := CreateVehicle ;
38429: LD_ADDR_VAR 0 3
38433: PUSH
38434: CALL_OW 45
38438: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38439: LD_VAR 0 3
38443: PPUSH
38444: LD_INT 4
38446: PPUSH
38447: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38451: LD_VAR 0 3
38455: PPUSH
38456: LD_INT 15
38458: PPUSH
38459: LD_INT 0
38461: PPUSH
38462: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38466: LD_ADDR_VAR 0 2
38470: PUSH
38471: LD_VAR 0 2
38475: PPUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 1
38483: PLUS
38484: PPUSH
38485: LD_VAR 0 3
38489: PPUSH
38490: CALL_OW 1
38494: ST_TO_ADDR
// end ;
38495: GO 38369
38497: POP
38498: POP
// for i = 1 to 4 do
38499: LD_ADDR_VAR 0 1
38503: PUSH
38504: DOUBLE
38505: LD_INT 1
38507: DEC
38508: ST_TO_ADDR
38509: LD_INT 4
38511: PUSH
38512: FOR_TO
38513: IFFALSE 38592
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38515: LD_INT 0
38517: PPUSH
38518: LD_INT 1
38520: PPUSH
38521: LD_INT 4
38523: PPUSH
38524: CALL_OW 12
38528: PPUSH
38529: LD_INT 6
38531: PPUSH
38532: CALL_OW 380
// un := CreateHuman ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: CALL_OW 44
38545: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38546: LD_VAR 0 3
38550: PPUSH
38551: LD_INT 15
38553: PPUSH
38554: LD_INT 0
38556: PPUSH
38557: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38561: LD_ADDR_VAR 0 2
38565: PUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 1
38578: PLUS
38579: PPUSH
38580: LD_VAR 0 3
38584: PPUSH
38585: CALL_OW 1
38589: ST_TO_ADDR
// end ;
38590: GO 38512
38592: POP
38593: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38594: LD_VAR 0 2
38598: PPUSH
38599: LD_INT 210
38601: PPUSH
38602: LD_INT 177
38604: PPUSH
38605: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38609: LD_ADDR_VAR 0 4
38613: PUSH
38614: LD_INT 10
38616: PPUSH
38617: LD_INT 22
38619: PUSH
38620: LD_INT 8
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PPUSH
38627: CALL_OW 70
38631: ST_TO_ADDR
// if x then
38632: LD_VAR 0 4
38636: IFFALSE 38664
// for i in x do
38638: LD_ADDR_VAR 0 1
38642: PUSH
38643: LD_VAR 0 4
38647: PUSH
38648: FOR_IN
38649: IFFALSE 38662
// RemoveUnit ( i ) ;
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 64
38660: GO 38648
38662: POP
38663: POP
// wait ( 0 0$3 ) ;
38664: LD_INT 105
38666: PPUSH
38667: CALL_OW 67
// until tmp ;
38671: LD_VAR 0 2
38675: IFFALSE 38594
// end ; end_of_file
38677: PPOPN 4
38679: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38680: LD_INT 0
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
// InGameOn ;
38688: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38692: LD_EXP 18
38696: PPUSH
38697: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38701: LD_ADDR_VAR 0 2
38705: PUSH
38706: LD_INT 22
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 25
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PPUSH
38730: CALL_OW 69
38734: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
38735: LD_ADDR_VAR 0 4
38739: PUSH
38740: LD_INT 22
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 34
38752: PUSH
38753: LD_INT 11
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PPUSH
38764: CALL_OW 69
38768: PUSH
38769: LD_INT 1
38771: ARRAY
38772: ST_TO_ADDR
// for i = 1 to tmp do
38773: LD_ADDR_VAR 0 6
38777: PUSH
38778: DOUBLE
38779: LD_INT 1
38781: DEC
38782: ST_TO_ADDR
38783: LD_VAR 0 2
38787: PUSH
38788: FOR_TO
38789: IFFALSE 38836
// begin if i = 5 then
38791: LD_VAR 0 6
38795: PUSH
38796: LD_INT 5
38798: EQUAL
38799: IFFALSE 38803
// break ;
38801: GO 38836
// sols := Replace ( sols , i , tmp [ i ] ) ;
38803: LD_ADDR_VAR 0 5
38807: PUSH
38808: LD_VAR 0 5
38812: PPUSH
38813: LD_VAR 0 6
38817: PPUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_VAR 0 6
38827: ARRAY
38828: PPUSH
38829: CALL_OW 1
38833: ST_TO_ADDR
// end ;
38834: GO 38788
38836: POP
38837: POP
// tmp := ar_force_tmp ;
38838: LD_ADDR_VAR 0 2
38842: PUSH
38843: LD_EXP 37
38847: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
38848: LD_VAR 0 2
38852: PUSH
38853: LD_INT 1
38855: ARRAY
38856: PPUSH
38857: LD_INT 108
38859: PPUSH
38860: LD_INT 139
38862: PPUSH
38863: LD_INT 0
38865: PPUSH
38866: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: PPUSH
38879: LD_EXP 18
38883: PPUSH
38884: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
38888: LD_VAR 0 2
38892: PUSH
38893: LD_INT 2
38895: ARRAY
38896: PPUSH
38897: LD_INT 114
38899: PPUSH
38900: LD_INT 132
38902: PPUSH
38903: LD_INT 0
38905: PPUSH
38906: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
38910: LD_VAR 0 2
38914: PUSH
38915: LD_INT 3
38917: ARRAY
38918: PPUSH
38919: LD_INT 115
38921: PPUSH
38922: LD_INT 132
38924: PPUSH
38925: LD_INT 0
38927: PPUSH
38928: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 2
38939: ARRAY
38940: PUSH
38941: LD_VAR 0 2
38945: PUSH
38946: LD_INT 3
38948: ARRAY
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PPUSH
38954: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
38958: LD_VAR 0 4
38962: PPUSH
38963: LD_INT 83
38965: PPUSH
38966: LD_INT 123
38968: PPUSH
38969: CALL_OW 111
// Wait ( 0 0$01 ) ;
38973: LD_INT 35
38975: PPUSH
38976: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
38980: LD_INT 90
38982: PPUSH
38983: LD_INT 144
38985: PPUSH
38986: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
38990: LD_VAR 0 5
38994: PPUSH
38995: LD_INT 88
38997: PPUSH
38998: LD_INT 129
39000: PPUSH
39001: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39005: LD_ADDR_VAR 0 3
39009: PUSH
39010: LD_INT 92
39012: PUSH
39013: LD_INT 131
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 88
39022: PUSH
39023: LD_INT 127
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 91
39032: PUSH
39033: LD_INT 132
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 92
39042: PUSH
39043: LD_INT 134
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// for i = 1 to sols do
39056: LD_ADDR_VAR 0 6
39060: PUSH
39061: DOUBLE
39062: LD_INT 1
39064: DEC
39065: ST_TO_ADDR
39066: LD_VAR 0 5
39070: PUSH
39071: FOR_TO
39072: IFFALSE 39145
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39074: LD_VAR 0 5
39078: PUSH
39079: LD_VAR 0 6
39083: ARRAY
39084: PPUSH
39085: LD_VAR 0 3
39089: PUSH
39090: LD_VAR 0 6
39094: ARRAY
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PPUSH
39100: LD_VAR 0 3
39104: PUSH
39105: LD_VAR 0 6
39109: ARRAY
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: PPUSH
39115: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39119: LD_VAR 0 5
39123: PUSH
39124: LD_VAR 0 6
39128: ARRAY
39129: PPUSH
39130: CALL_OW 197
// AddComHold ( sols ) ;
39134: LD_VAR 0 5
39138: PPUSH
39139: CALL_OW 200
// end ;
39143: GO 39071
39145: POP
39146: POP
// repeat wait ( 0 0$1 ) ;
39147: LD_INT 35
39149: PPUSH
39150: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39154: LD_VAR 0 5
39158: PUSH
39159: LD_INT 1
39161: ARRAY
39162: PPUSH
39163: LD_INT 92
39165: PPUSH
39166: LD_INT 131
39168: PPUSH
39169: CALL_OW 297
39173: PUSH
39174: LD_INT 4
39176: LESS
39177: IFFALSE 39147
// CenterOnXY ( 96 , 139 ) ;
39179: LD_INT 96
39181: PPUSH
39182: LD_INT 139
39184: PPUSH
39185: CALL_OW 84
// wait ( 0 0$3 ) ;
39189: LD_INT 105
39191: PPUSH
39192: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39196: LD_INT 111
39198: PPUSH
39199: LD_INT 135
39201: PPUSH
39202: LD_INT 1
39204: PPUSH
39205: LD_INT 25
39207: NEG
39208: PPUSH
39209: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39213: LD_VAR 0 2
39217: PUSH
39218: LD_INT 2
39220: ARRAY
39221: PPUSH
39222: LD_VAR 0 2
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PPUSH
39231: CALL_OW 250
39235: PUSH
39236: LD_INT 3
39238: PLUS
39239: PPUSH
39240: LD_VAR 0 2
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: CALL_OW 251
39253: PPUSH
39254: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39258: LD_VAR 0 2
39262: PUSH
39263: LD_INT 3
39265: ARRAY
39266: PPUSH
39267: LD_INT 7
39269: PPUSH
39270: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: LD_VAR 0 2
39287: PUSH
39288: LD_INT 1
39290: ARRAY
39291: PPUSH
39292: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39296: LD_INT 35
39298: PPUSH
39299: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39303: LD_VAR 0 2
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PPUSH
39312: LD_VAR 0 2
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: PPUSH
39321: CALL_OW 296
39325: PUSH
39326: LD_INT 5
39328: LESS
39329: IFFALSE 39296
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 2
39347: ARRAY
39348: PPUSH
39349: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39353: LD_VAR 0 2
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: PPUSH
39362: LD_STRING D1a-Merc1-1
39364: PPUSH
39365: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39369: LD_VAR 0 2
39373: PUSH
39374: LD_INT 2
39376: ARRAY
39377: PPUSH
39378: LD_STRING D1a-FMerc2-1
39380: PPUSH
39381: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39385: LD_VAR 0 2
39389: PUSH
39390: LD_INT 2
39392: ARRAY
39393: PPUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PPUSH
39403: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39407: LD_VAR 0 2
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: LD_INT 500
39418: PPUSH
39419: CALL_OW 234
// wait ( 0 0$2 ) ;
39423: LD_INT 70
39425: PPUSH
39426: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: PPUSH
39439: LD_INT 2
39441: PPUSH
39442: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39446: LD_INT 10
39448: PPUSH
39449: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: LD_STRING D1a-Merc1-2
39464: PPUSH
39465: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39469: LD_INT 7
39471: PPUSH
39472: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PPUSH
39485: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39489: LD_VAR 0 2
39493: PUSH
39494: LD_INT 2
39496: ARRAY
39497: PPUSH
39498: LD_INT 10
39500: PPUSH
39501: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39505: LD_VAR 0 2
39509: PUSH
39510: LD_INT 2
39512: ARRAY
39513: PPUSH
39514: LD_STRING D1a-FMerc2-2
39516: PPUSH
39517: CALL_OW 88
// wait ( 0 0$1 ) ;
39521: LD_INT 35
39523: PPUSH
39524: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39528: LD_INT 7
39530: PPUSH
39531: CALL_OW 85
// wait ( 0 0$2 ) ;
39535: LD_INT 70
39537: PPUSH
39538: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39542: LD_EXP 41
39546: PPUSH
39547: LD_STRING D1a-Saliba-1
39549: PPUSH
39550: CALL_OW 91
// KillUnit ( Saliba ) ;
39554: LD_EXP 41
39558: PPUSH
39559: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39563: LD_VAR 0 2
39567: PUSH
39568: LD_INT 3
39570: ARRAY
39571: PPUSH
39572: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39576: LD_EXP 18
39580: PPUSH
39581: CALL_OW 85
// wait ( 0 0$1 ) ;
39585: LD_INT 35
39587: PPUSH
39588: CALL_OW 67
// InGameOff ;
39592: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39596: LD_STRING M1
39598: PPUSH
39599: CALL_OW 337
// game_speed := 4 ;
39603: LD_ADDR_OWVAR 65
39607: PUSH
39608: LD_INT 4
39610: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39611: LD_INT 111
39613: PPUSH
39614: LD_INT 135
39616: PPUSH
39617: LD_INT 1
39619: PPUSH
39620: CALL_OW 331
// SaveForQuickRestart ;
39624: CALL_OW 22
// ar_run := true ;
39628: LD_ADDR_EXP 5
39632: PUSH
39633: LD_INT 1
39635: ST_TO_ADDR
// end ;
39636: LD_VAR 0 1
39640: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39641: LD_EXP 5
39645: IFFALSE 39987
39647: GO 39649
39649: DISABLE
39650: LD_INT 0
39652: PPUSH
39653: PPUSH
39654: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
39655: LD_ADDR_VAR 0 2
39659: PUSH
39660: LD_EXP 37
39664: PUSH
39665: LD_EXP 34
39669: PPUSH
39670: LD_INT 21
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PPUSH
39680: CALL_OW 72
39684: ADD
39685: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
39686: LD_VAR 0 2
39690: PPUSH
39691: LD_INT 5
39693: PPUSH
39694: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
39698: LD_INT 5
39700: PPUSH
39701: LD_INT 1
39703: PPUSH
39704: CALL_OW 343
// k := 1 ;
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 1
39715: ST_TO_ADDR
// for i in tmp do
39716: LD_ADDR_VAR 0 1
39720: PUSH
39721: LD_VAR 0 2
39725: PUSH
39726: FOR_IN
39727: IFFALSE 39812
// begin if IsInUnit ( i ) then
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 310
39738: IFFALSE 39749
// ComExitBuilding ( i ) ;
39740: LD_VAR 0 1
39744: PPUSH
39745: CALL_OW 122
// if GetClass ( i ) = 3 then
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 257
39758: PUSH
39759: LD_INT 3
39761: EQUAL
39762: IFFALSE 39798
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
39764: LD_VAR 0 1
39768: PPUSH
39769: LD_EXP 38
39773: PUSH
39774: LD_VAR 0 3
39778: ARRAY
39779: PPUSH
39780: CALL_OW 180
// k := k + 1 ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_VAR 0 3
39793: PUSH
39794: LD_INT 1
39796: PLUS
39797: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
39798: LD_VAR 0 1
39802: PPUSH
39803: LD_INT 10
39805: PPUSH
39806: CALL_OW 173
// end ;
39810: GO 39726
39812: POP
39813: POP
// ar_patrol := true ;
39814: LD_ADDR_EXP 7
39818: PUSH
39819: LD_INT 1
39821: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
39822: LD_INT 10
39824: PPUSH
39825: CALL_OW 67
// for i in tmp do
39829: LD_ADDR_VAR 0 1
39833: PUSH
39834: LD_VAR 0 2
39838: PUSH
39839: FOR_IN
39840: IFFALSE 39868
// if not HasTask ( i ) then
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 314
39851: NOT
39852: IFFALSE 39866
// ComMoveToArea ( i , escape_area ) ;
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_INT 10
39861: PPUSH
39862: CALL_OW 113
39866: GO 39839
39868: POP
39869: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_VAR 0 2
39879: PPUSH
39880: LD_INT 95
39882: PUSH
39883: LD_INT 10
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PPUSH
39890: CALL_OW 72
39894: ST_TO_ADDR
// if k then
39895: LD_VAR 0 3
39899: IFFALSE 39968
// for i in k do
39901: LD_ADDR_VAR 0 1
39905: PUSH
39906: LD_VAR 0 3
39910: PUSH
39911: FOR_IN
39912: IFFALSE 39966
// begin if IsInUnit ( i ) then
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 310
39923: IFFALSE 39939
// RemoveUnit ( IsInUnit ( i ) ) ;
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 310
39934: PPUSH
39935: CALL_OW 64
// RemoveUnit ( i ) ;
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 64
// tmp := tmp diff i ;
39948: LD_ADDR_VAR 0 2
39952: PUSH
39953: LD_VAR 0 2
39957: PUSH
39958: LD_VAR 0 1
39962: DIFF
39963: ST_TO_ADDR
// end ;
39964: GO 39911
39966: POP
39967: POP
// until tmp = [ ] ;
39968: LD_VAR 0 2
39972: PUSH
39973: EMPTY
39974: EQUAL
39975: IFFALSE 39822
// ChangeSideFog ( 5 , 5 ) ;
39977: LD_INT 5
39979: PPUSH
39980: LD_INT 5
39982: PPUSH
39983: CALL_OW 343
// end ;
39987: PPOPN 3
39989: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
39990: LD_EXP 7
39994: IFFALSE 40284
39996: GO 39998
39998: DISABLE
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
// begin uc_side := 2 ;
40004: LD_ADDR_OWVAR 20
40008: PUSH
40009: LD_INT 2
40011: ST_TO_ADDR
// uc_nation := 2 ;
40012: LD_ADDR_OWVAR 21
40016: PUSH
40017: LD_INT 2
40019: ST_TO_ADDR
// InitHc ;
40020: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40024: LD_INT 1
40026: PPUSH
40027: LD_INT 1
40029: PPUSH
40030: LD_INT 6
40032: PPUSH
40033: CALL_OW 380
// un := CreateHuman ;
40037: LD_ADDR_VAR 0 2
40041: PUSH
40042: CALL_OW 44
40046: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40047: LD_INT 14
40049: PPUSH
40050: LD_INT 1
40052: PPUSH
40053: LD_INT 1
40055: PPUSH
40056: LD_INT 27
40058: PPUSH
40059: LD_INT 98
40061: PPUSH
40062: CALL 1984 0 5
// veh := CreateVehicle ;
40066: LD_ADDR_VAR 0 3
40070: PUSH
40071: CALL_OW 45
40075: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40076: LD_VAR 0 3
40080: PPUSH
40081: LD_INT 4
40083: PPUSH
40084: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40088: LD_VAR 0 3
40092: PPUSH
40093: LD_INT 179
40095: PPUSH
40096: LD_INT 135
40098: PPUSH
40099: LD_INT 0
40101: PPUSH
40102: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40106: LD_VAR 0 2
40110: PPUSH
40111: LD_VAR 0 3
40115: PPUSH
40116: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40120: LD_VAR 0 2
40124: PPUSH
40125: LD_INT 126
40127: PPUSH
40128: LD_INT 133
40130: PPUSH
40131: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40135: LD_INT 10
40137: PPUSH
40138: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40142: LD_INT 1
40144: PPUSH
40145: LD_VAR 0 3
40149: PPUSH
40150: CALL_OW 292
40154: PUSH
40155: LD_VAR 0 3
40159: PPUSH
40160: LD_INT 7
40162: PPUSH
40163: CALL_OW 296
40167: PUSH
40168: LD_INT 9
40170: LESS
40171: OR
40172: IFFALSE 40135
// ComHold ( veh ) ;
40174: LD_VAR 0 3
40178: PPUSH
40179: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40183: LD_VAR 0 2
40187: PPUSH
40188: LD_STRING D2aa-Ar1-1
40190: PPUSH
40191: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40195: LD_VAR 0 2
40199: PPUSH
40200: LD_INT 177
40202: PPUSH
40203: LD_INT 96
40205: PPUSH
40206: CALL_OW 111
// AddComExitVehicle ( un ) ;
40210: LD_VAR 0 2
40214: PPUSH
40215: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40219: LD_INT 35
40221: PPUSH
40222: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40226: LD_VAR 0 2
40230: PPUSH
40231: LD_INT 69
40233: PPUSH
40234: CALL_OW 296
40238: PUSH
40239: LD_INT 15
40241: LESS
40242: IFFALSE 40219
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40244: LD_ADDR_EXP 46
40248: PUSH
40249: LD_EXP 46
40253: PPUSH
40254: LD_INT 3
40256: PUSH
40257: LD_EXP 46
40261: PUSH
40262: LD_INT 3
40264: ARRAY
40265: PUSH
40266: LD_INT 1
40268: PLUS
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PPUSH
40274: LD_VAR 0 2
40278: PPUSH
40279: CALL 3156 0 3
40283: ST_TO_ADDR
// end ;
40284: PPOPN 3
40286: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40287: LD_INT 7
40289: PPUSH
40290: CALL_OW 255
40294: PUSH
40295: LD_INT 1
40297: EQUAL
40298: PUSH
40299: LD_INT 7
40301: PPUSH
40302: CALL_OW 301
40306: OR
40307: IFFALSE 42674
40309: GO 40311
40311: DISABLE
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40316: LD_ADDR_VAR 0 2
40320: PUSH
40321: LD_INT 46
40323: PUSH
40324: LD_INT 41
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 50
40333: PUSH
40334: LD_INT 25
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 57
40343: PUSH
40344: LD_INT 75
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 75
40353: PUSH
40354: LD_INT 89
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 51
40363: PUSH
40364: LD_INT 45
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 95
40373: PUSH
40374: LD_INT 95
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 84
40383: PUSH
40384: LD_INT 77
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 101
40393: PUSH
40394: LD_INT 76
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 118
40403: PUSH
40404: LD_INT 81
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 139
40413: PUSH
40414: LD_INT 97
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 129
40423: PUSH
40424: LD_INT 114
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 154
40433: PUSH
40434: LD_INT 111
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// base_captured := true ;
40455: LD_ADDR_EXP 6
40459: PUSH
40460: LD_INT 1
40462: ST_TO_ADDR
// DialogueOn ;
40463: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40467: LD_EXP 18
40471: PPUSH
40472: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40476: LD_EXP 18
40480: PPUSH
40481: LD_STRING D2-JMM-1
40483: PPUSH
40484: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40488: LD_EXP 27
40492: PPUSH
40493: LD_STRING D2-Pow-1
40495: PPUSH
40496: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40500: LD_EXP 18
40504: PPUSH
40505: LD_STRING D2-JMM-2
40507: PPUSH
40508: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40512: LD_EXP 27
40516: PPUSH
40517: LD_STRING D2-Pow-2
40519: PPUSH
40520: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40524: LD_EXP 18
40528: PPUSH
40529: LD_STRING D2-JMM-3
40531: PPUSH
40532: CALL_OW 88
// DialogueOff ;
40536: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40540: LD_STRING M2
40542: PPUSH
40543: CALL_OW 337
// Wait ( 0 0$2 ) ;
40547: LD_INT 70
40549: PPUSH
40550: CALL_OW 67
// if IsOk ( Gary ) then
40554: LD_EXP 29
40558: PPUSH
40559: CALL_OW 302
40563: IFFALSE 40577
// Say ( Gary , D2a-Gary-1 ) ;
40565: LD_EXP 29
40569: PPUSH
40570: LD_STRING D2a-Gary-1
40572: PPUSH
40573: CALL_OW 88
// if IsOk ( Bobby ) then
40577: LD_EXP 21
40581: PPUSH
40582: CALL_OW 302
40586: IFFALSE 40600
// Say ( Bobby , D2a-Bobby-1 ) ;
40588: LD_EXP 21
40592: PPUSH
40593: LD_STRING D2a-Bobby-1
40595: PPUSH
40596: CALL_OW 88
// if IsOk ( Cyrus ) then
40600: LD_EXP 22
40604: PPUSH
40605: CALL_OW 302
40609: IFFALSE 40623
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40611: LD_EXP 22
40615: PPUSH
40616: LD_STRING D2a-Cyrus-1
40618: PPUSH
40619: CALL_OW 88
// if IsOk ( Lisa ) then
40623: LD_EXP 19
40627: PPUSH
40628: CALL_OW 302
40632: IFFALSE 40646
// Say ( Lisa , D2a-Lisa-1 ) ;
40634: LD_EXP 19
40638: PPUSH
40639: LD_STRING D2a-Lisa-1
40641: PPUSH
40642: CALL_OW 88
// if IsOk ( Frank ) then
40646: LD_EXP 30
40650: PPUSH
40651: CALL_OW 302
40655: IFFALSE 40669
// Say ( Frank , D2a-Frank-1 ) ;
40657: LD_EXP 30
40661: PPUSH
40662: LD_STRING D2a-Frank-1
40664: PPUSH
40665: CALL_OW 88
// if IsOk ( Cornel ) then
40669: LD_EXP 28
40673: PPUSH
40674: CALL_OW 302
40678: IFFALSE 40692
// Say ( Cornel , D2a-Corn-1 ) ;
40680: LD_EXP 28
40684: PPUSH
40685: LD_STRING D2a-Corn-1
40687: PPUSH
40688: CALL_OW 88
// if IsOk ( Donaldson ) then
40692: LD_EXP 20
40696: PPUSH
40697: CALL_OW 302
40701: IFFALSE 40715
// Say ( Donaldson , D2a-Don-1 ) ;
40703: LD_EXP 20
40707: PPUSH
40708: LD_STRING D2a-Don-1
40710: PPUSH
40711: CALL_OW 88
// if IsOk ( Brown ) then
40715: LD_EXP 24
40719: PPUSH
40720: CALL_OW 302
40724: IFFALSE 40738
// Say ( Brown , D2a-Brown-1 ) ;
40726: LD_EXP 24
40730: PPUSH
40731: LD_STRING D2a-Brown-1
40733: PPUSH
40734: CALL_OW 88
// Wait ( 0 0$30 ) ;
40738: LD_INT 1050
40740: PPUSH
40741: CALL_OW 67
// if IsOk ( Frank ) then
40745: LD_EXP 30
40749: PPUSH
40750: CALL_OW 302
40754: IFFALSE 41020
// begin DialogueOn ;
40756: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
40760: LD_EXP 18
40764: PUSH
40765: LD_EXP 30
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PPUSH
40774: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
40778: LD_EXP 30
40782: PPUSH
40783: LD_STRING D3F-Frank-1
40785: PPUSH
40786: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
40790: LD_EXP 18
40794: PPUSH
40795: LD_STRING D3F-JMM-1
40797: PPUSH
40798: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
40802: LD_EXP 30
40806: PPUSH
40807: LD_STRING D3F-Frank-2
40809: PPUSH
40810: CALL_OW 88
// case Query ( QFrank ) of 1 :
40814: LD_STRING QFrank
40816: PPUSH
40817: CALL_OW 97
40821: PUSH
40822: LD_INT 1
40824: DOUBLE
40825: EQUAL
40826: IFTRUE 40830
40828: GO 40853
40830: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
40831: LD_EXP 18
40835: PPUSH
40836: LD_STRING D3Fa-JMM-1
40838: PPUSH
40839: CALL_OW 88
// us_scout := 1 ;
40843: LD_ADDR_EXP 8
40847: PUSH
40848: LD_INT 1
40850: ST_TO_ADDR
// end ; 2 :
40851: GO 41016
40853: LD_INT 2
40855: DOUBLE
40856: EQUAL
40857: IFTRUE 40861
40859: GO 40983
40861: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
40862: LD_EXP 18
40866: PPUSH
40867: LD_STRING D3Fb-JMM-1
40869: PPUSH
40870: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
40874: LD_EXP 30
40878: PPUSH
40879: LD_STRING D3Fb-Frank-1
40881: PPUSH
40882: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
40886: LD_STRING QFrank2
40888: PPUSH
40889: CALL_OW 97
40893: PUSH
40894: LD_INT 1
40896: DOUBLE
40897: EQUAL
40898: IFTRUE 40902
40900: GO 40949
40902: POP
// begin us_scout := 2 ;
40903: LD_ADDR_EXP 8
40907: PUSH
40908: LD_INT 2
40910: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
40911: LD_EXP 18
40915: PPUSH
40916: LD_STRING D3Fba-JMM-1
40918: PPUSH
40919: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
40923: LD_EXP 30
40927: PPUSH
40928: LD_STRING D3Fba-Frank-1
40930: PPUSH
40931: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
40935: LD_EXP 18
40939: PPUSH
40940: LD_STRING D3Fba-JMM-2
40942: PPUSH
40943: CALL_OW 88
// end ; 2 :
40947: GO 40981
40949: LD_INT 2
40951: DOUBLE
40952: EQUAL
40953: IFTRUE 40957
40955: GO 40980
40957: POP
// begin us_scout := 0 ;
40958: LD_ADDR_EXP 8
40962: PUSH
40963: LD_INT 0
40965: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
40966: LD_EXP 18
40970: PPUSH
40971: LD_STRING D3Fbb-JMM-1
40973: PPUSH
40974: CALL_OW 88
// end ; end ;
40978: GO 40981
40980: POP
// end ; 3 :
40981: GO 41016
40983: LD_INT 3
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41015
40991: POP
// begin us_scout := - 1 ;
40992: LD_ADDR_EXP 8
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41001: LD_EXP 18
41005: PPUSH
41006: LD_STRING D3Fc-JMM-1
41008: PPUSH
41009: CALL_OW 88
// end ; end ;
41013: GO 41016
41015: POP
// DialogueOff ;
41016: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41020: LD_EXP 8
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: IN
41036: IFFALSE 41040
// exit ;
41038: GO 42674
// if us_scout in [ 1 , 2 ] then
41040: LD_EXP 8
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: IN
41055: IFFALSE 41756
// begin if IsInUnit ( Frank ) then
41057: LD_EXP 30
41061: PPUSH
41062: CALL_OW 310
41066: IFFALSE 41077
// ComExitBuilding ( Frank ) ;
41068: LD_EXP 30
41072: PPUSH
41073: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41077: LD_EXP 30
41081: PPUSH
41082: CALL_OW 311
41086: IFFALSE 41097
// ComExitVehicle ( Frank ) ;
41088: LD_EXP 30
41092: PPUSH
41093: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41097: LD_EXP 30
41101: PPUSH
41102: LD_INT 4
41104: PPUSH
41105: CALL_OW 235
// wait ( 0 0$1 ) ;
41109: LD_INT 35
41111: PPUSH
41112: CALL_OW 67
// if us_scout = 2 then
41116: LD_EXP 8
41120: PUSH
41121: LD_INT 2
41123: EQUAL
41124: IFFALSE 41492
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41126: LD_EXP 30
41130: PPUSH
41131: LD_INT 75
41133: PPUSH
41134: LD_INT 63
41136: PPUSH
41137: CALL_OW 111
// AddComHold ( Frank ) ;
41141: LD_EXP 30
41145: PPUSH
41146: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41150: LD_EXP 30
41154: PPUSH
41155: LD_INT 770
41157: PPUSH
41158: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41162: LD_EXP 30
41166: PPUSH
41167: LD_INT 100
41169: PPUSH
41170: LD_INT 75
41172: PPUSH
41173: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41177: LD_EXP 30
41181: PPUSH
41182: LD_INT 123
41184: PPUSH
41185: LD_INT 103
41187: PPUSH
41188: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41192: LD_EXP 30
41196: PPUSH
41197: LD_INT 138
41199: PPUSH
41200: LD_INT 108
41202: PPUSH
41203: CALL_OW 171
// AddComHold ( Frank ) ;
41207: LD_EXP 30
41211: PPUSH
41212: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41216: LD_INT 35
41218: PPUSH
41219: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41223: LD_EXP 30
41227: PPUSH
41228: LD_INT 138
41230: PPUSH
41231: LD_INT 108
41233: PPUSH
41234: CALL_OW 307
41238: IFFALSE 41216
// AddComMoveXY ( Frank , 125 , 132 ) ;
41240: LD_EXP 30
41244: PPUSH
41245: LD_INT 125
41247: PPUSH
41248: LD_INT 132
41250: PPUSH
41251: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41255: LD_INT 35
41257: PPUSH
41258: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41262: LD_INT 1
41264: PPUSH
41265: LD_EXP 30
41269: PPUSH
41270: CALL_OW 292
41274: PUSH
41275: LD_EXP 30
41279: PPUSH
41280: LD_INT 7
41282: PPUSH
41283: CALL_OW 296
41287: PUSH
41288: LD_INT 7
41290: LESS
41291: OR
41292: IFFALSE 41255
// DialogueOn ;
41294: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41298: LD_EXP 30
41302: PPUSH
41303: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41307: LD_INT 10
41309: PPUSH
41310: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41314: LD_EXP 18
41318: PPUSH
41319: LD_STRING D4Fa-JMM-1
41321: PPUSH
41322: CALL_OW 88
// for i in points do
41326: LD_ADDR_VAR 0 1
41330: PUSH
41331: LD_VAR 0 2
41335: PUSH
41336: FOR_IN
41337: IFFALSE 41395
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41339: LD_VAR 0 1
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PPUSH
41348: LD_VAR 0 1
41352: PUSH
41353: LD_INT 2
41355: ARRAY
41356: PPUSH
41357: LD_INT 1
41359: PPUSH
41360: LD_INT 20
41362: NEG
41363: PPUSH
41364: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41368: LD_VAR 0 1
41372: PUSH
41373: LD_INT 1
41375: ARRAY
41376: PPUSH
41377: LD_VAR 0 1
41381: PUSH
41382: LD_INT 2
41384: ARRAY
41385: PPUSH
41386: LD_INT 1
41388: PPUSH
41389: CALL_OW 331
// end ;
41393: GO 41336
41395: POP
41396: POP
// dwait ( 0 0$0.5 ) ;
41397: LD_INT 18
41399: PPUSH
41400: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41404: LD_INT 42
41406: PPUSH
41407: LD_INT 27
41409: PPUSH
41410: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41414: LD_EXP 30
41418: PPUSH
41419: LD_STRING D4Fa-Frank-1
41421: PPUSH
41422: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41426: LD_INT 18
41428: PPUSH
41429: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41433: LD_EXP 18
41437: PPUSH
41438: LD_STRING D4Fa-JMM-2
41440: PPUSH
41441: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41445: LD_INT 118
41447: PPUSH
41448: LD_INT 80
41450: PPUSH
41451: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41455: LD_EXP 30
41459: PPUSH
41460: LD_STRING D4Fa-Frank-2
41462: PPUSH
41463: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41467: LD_INT 10
41469: PPUSH
41470: CALL_OW 68
// DialogueOff ;
41474: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41478: LD_EXP 30
41482: PPUSH
41483: LD_INT 1
41485: PPUSH
41486: CALL_OW 235
// end else
41490: GO 41754
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41492: LD_INT 2
41494: PPUSH
41495: LD_INT 4
41497: PPUSH
41498: LD_INT 2
41500: PPUSH
41501: LD_INT 1
41503: PPUSH
41504: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41508: LD_EXP 30
41512: PPUSH
41513: LD_INT 75
41515: PPUSH
41516: LD_INT 63
41518: PPUSH
41519: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41523: LD_EXP 30
41527: PPUSH
41528: LD_INT 175
41530: PPUSH
41531: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41535: LD_EXP 30
41539: PPUSH
41540: LD_INT 102
41542: PPUSH
41543: LD_INT 76
41545: PPUSH
41546: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41550: LD_EXP 30
41554: PPUSH
41555: LD_INT 108
41557: PPUSH
41558: LD_INT 70
41560: PPUSH
41561: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41565: LD_INT 35
41567: PPUSH
41568: CALL_OW 67
// until See ( 2 , Frank ) ;
41572: LD_INT 2
41574: PPUSH
41575: LD_EXP 30
41579: PPUSH
41580: CALL_OW 292
41584: IFFALSE 41565
// ComMoveXY ( Frank , 112 , 118 ) ;
41586: LD_EXP 30
41590: PPUSH
41591: LD_INT 112
41593: PPUSH
41594: LD_INT 118
41596: PPUSH
41597: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41601: LD_EXP 30
41605: PPUSH
41606: CALL_OW 256
41610: PUSH
41611: LD_INT 750
41613: GREATEREQUAL
41614: IFFALSE 41628
// SetLives ( Frank , 700 ) ;
41616: LD_EXP 30
41620: PPUSH
41621: LD_INT 700
41623: PPUSH
41624: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41628: LD_INT 35
41630: PPUSH
41631: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
41635: LD_INT 1
41637: PPUSH
41638: LD_EXP 30
41642: PPUSH
41643: CALL_OW 292
41647: PUSH
41648: LD_EXP 30
41652: PPUSH
41653: LD_INT 7
41655: PPUSH
41656: CALL_OW 296
41660: PUSH
41661: LD_INT 17
41663: LESS
41664: OR
41665: IFFALSE 41628
// DialogueOn ;
41667: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41671: LD_EXP 30
41675: PPUSH
41676: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
41680: LD_EXP 30
41684: PPUSH
41685: LD_STRING D4Fb-Frank-1
41687: PPUSH
41688: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
41692: LD_EXP 18
41696: PPUSH
41697: LD_STRING D4Fb-JMM-1
41699: PPUSH
41700: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
41704: LD_INT 2
41706: PPUSH
41707: LD_STRING D4Fb-FSci1-1
41709: PPUSH
41710: CALL 2213 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
41714: LD_EXP 30
41718: PPUSH
41719: LD_STRING D4Fb-Frank-2
41721: PPUSH
41722: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
41726: LD_EXP 18
41730: PPUSH
41731: LD_STRING D4Fb-JMM-2
41733: PPUSH
41734: CALL_OW 88
// DialogueOff ;
41738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41742: LD_EXP 30
41746: PPUSH
41747: LD_INT 1
41749: PPUSH
41750: CALL_OW 235
// end ; end else
41754: GO 41913
// if IsOk ( Kikuchi ) then
41756: LD_EXP 31
41760: PPUSH
41761: CALL_OW 302
41765: IFFALSE 41913
// begin DialogueOn ;
41767: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
41771: LD_EXP 18
41775: PUSH
41776: LD_EXP 31
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PPUSH
41785: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
41789: LD_EXP 31
41793: PPUSH
41794: LD_STRING D3Y-Yam-1
41796: PPUSH
41797: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
41801: LD_EXP 18
41805: PPUSH
41806: LD_STRING D3Y-JMM-1
41808: PPUSH
41809: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
41813: LD_EXP 31
41817: PPUSH
41818: LD_STRING D3Y-Yam-2
41820: PPUSH
41821: CALL_OW 88
// case Query ( QYamoko ) of 1 :
41825: LD_STRING QYamoko
41827: PPUSH
41828: CALL_OW 97
41832: PUSH
41833: LD_INT 1
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41876
41841: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
41842: LD_EXP 18
41846: PPUSH
41847: LD_STRING D3Ya-JMM-1
41849: PPUSH
41850: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
41854: LD_EXP 31
41858: PPUSH
41859: LD_STRING D3Ya-Yam-1
41861: PPUSH
41862: CALL_OW 88
// us_scout := 1 ;
41866: LD_ADDR_EXP 8
41870: PUSH
41871: LD_INT 1
41873: ST_TO_ADDR
// end ; 2 :
41874: GO 41909
41876: LD_INT 2
41878: DOUBLE
41879: EQUAL
41880: IFTRUE 41884
41882: GO 41908
41884: POP
// begin us_scout := - 1 ;
41885: LD_ADDR_EXP 8
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
41894: LD_EXP 18
41898: PPUSH
41899: LD_STRING D3Yb-JMM-1
41901: PPUSH
41902: CALL_OW 88
// end ; end ;
41906: GO 41909
41908: POP
// DialogueOff ;
41909: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41913: LD_EXP 8
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: IN
41929: IFFALSE 41933
// exit ;
41931: GO 42674
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
41933: LD_ADDR_EXP 8
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: PUSH
41952: LD_OWVAR 67
41956: ARRAY
41957: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
41958: LD_EXP 8
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: IN
41973: IFFALSE 42674
// begin if IsInUnit ( Kikuchi ) then
41975: LD_EXP 31
41979: PPUSH
41980: CALL_OW 310
41984: IFFALSE 41995
// ComExitBuilding ( Kikuchi ) ;
41986: LD_EXP 31
41990: PPUSH
41991: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
41995: LD_EXP 31
41999: PPUSH
42000: CALL_OW 311
42004: IFFALSE 42015
// ComExitVehicle ( Kikuchi ) ;
42006: LD_EXP 31
42010: PPUSH
42011: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42015: LD_EXP 31
42019: PPUSH
42020: LD_INT 4
42022: PPUSH
42023: CALL_OW 235
// wait ( 0 0$1 ) ;
42027: LD_INT 35
42029: PPUSH
42030: CALL_OW 67
// if us_scout = 2 then
42034: LD_EXP 8
42038: PUSH
42039: LD_INT 2
42041: EQUAL
42042: IFFALSE 42422
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42044: LD_EXP 31
42048: PPUSH
42049: LD_INT 75
42051: PPUSH
42052: LD_INT 63
42054: PPUSH
42055: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42059: LD_EXP 31
42063: PPUSH
42064: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42068: LD_EXP 31
42072: PPUSH
42073: LD_INT 770
42075: PPUSH
42076: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42080: LD_EXP 31
42084: PPUSH
42085: LD_INT 100
42087: PPUSH
42088: LD_INT 75
42090: PPUSH
42091: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42095: LD_EXP 31
42099: PPUSH
42100: LD_INT 123
42102: PPUSH
42103: LD_INT 103
42105: PPUSH
42106: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42110: LD_EXP 31
42114: PPUSH
42115: LD_INT 138
42117: PPUSH
42118: LD_INT 108
42120: PPUSH
42121: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42125: LD_EXP 31
42129: PPUSH
42130: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42134: LD_INT 35
42136: PPUSH
42137: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42141: LD_EXP 31
42145: PPUSH
42146: LD_INT 138
42148: PPUSH
42149: LD_INT 108
42151: PPUSH
42152: CALL_OW 307
42156: IFFALSE 42134
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42158: LD_EXP 31
42162: PPUSH
42163: LD_INT 125
42165: PPUSH
42166: LD_INT 132
42168: PPUSH
42169: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42173: LD_INT 35
42175: PPUSH
42176: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42180: LD_INT 1
42182: PPUSH
42183: LD_EXP 31
42187: PPUSH
42188: CALL_OW 292
42192: PUSH
42193: LD_EXP 31
42197: PPUSH
42198: LD_INT 7
42200: PPUSH
42201: CALL_OW 296
42205: PUSH
42206: LD_INT 7
42208: LESS
42209: OR
42210: IFFALSE 42173
// DialogueOn ;
42212: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42216: LD_EXP 31
42220: PPUSH
42221: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42225: LD_INT 10
42227: PPUSH
42228: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42232: LD_EXP 31
42236: PPUSH
42237: LD_STRING D4Ya-Yam-1
42239: PPUSH
42240: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42244: LD_EXP 18
42248: PPUSH
42249: LD_STRING D4Ya-JMM-1
42251: PPUSH
42252: CALL_OW 88
// for i in points do
42256: LD_ADDR_VAR 0 1
42260: PUSH
42261: LD_VAR 0 2
42265: PUSH
42266: FOR_IN
42267: IFFALSE 42325
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42269: LD_VAR 0 1
42273: PUSH
42274: LD_INT 1
42276: ARRAY
42277: PPUSH
42278: LD_VAR 0 1
42282: PUSH
42283: LD_INT 2
42285: ARRAY
42286: PPUSH
42287: LD_INT 1
42289: PPUSH
42290: LD_INT 20
42292: NEG
42293: PPUSH
42294: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42298: LD_VAR 0 1
42302: PUSH
42303: LD_INT 1
42305: ARRAY
42306: PPUSH
42307: LD_VAR 0 1
42311: PUSH
42312: LD_INT 2
42314: ARRAY
42315: PPUSH
42316: LD_INT 1
42318: PPUSH
42319: CALL_OW 331
// end ;
42323: GO 42266
42325: POP
42326: POP
// dwait ( 0 0$0.5 ) ;
42327: LD_INT 18
42329: PPUSH
42330: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42334: LD_INT 42
42336: PPUSH
42337: LD_INT 27
42339: PPUSH
42340: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42344: LD_EXP 31
42348: PPUSH
42349: LD_STRING D4Ya-Yam-2
42351: PPUSH
42352: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42356: LD_INT 18
42358: PPUSH
42359: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42363: LD_INT 118
42365: PPUSH
42366: LD_INT 80
42368: PPUSH
42369: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42373: LD_EXP 18
42377: PPUSH
42378: LD_STRING D4Ya-JMM-2
42380: PPUSH
42381: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42385: LD_EXP 31
42389: PPUSH
42390: LD_STRING D4Ya-Yam-3
42392: PPUSH
42393: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42397: LD_INT 10
42399: PPUSH
42400: CALL_OW 68
// DialogueOff ;
42404: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42408: LD_EXP 31
42412: PPUSH
42413: LD_INT 1
42415: PPUSH
42416: CALL_OW 235
// end else
42420: GO 42674
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42422: LD_INT 2
42424: PPUSH
42425: LD_INT 4
42427: PPUSH
42428: LD_INT 2
42430: PPUSH
42431: LD_INT 1
42433: PPUSH
42434: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42438: LD_EXP 31
42442: PPUSH
42443: LD_INT 75
42445: PPUSH
42446: LD_INT 63
42448: PPUSH
42449: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42453: LD_EXP 31
42457: PPUSH
42458: LD_INT 175
42460: PPUSH
42461: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42465: LD_EXP 31
42469: PPUSH
42470: LD_INT 102
42472: PPUSH
42473: LD_INT 76
42475: PPUSH
42476: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42480: LD_EXP 31
42484: PPUSH
42485: LD_INT 108
42487: PPUSH
42488: LD_INT 70
42490: PPUSH
42491: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42495: LD_INT 35
42497: PPUSH
42498: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42502: LD_INT 2
42504: PPUSH
42505: LD_EXP 31
42509: PPUSH
42510: CALL_OW 292
42514: IFFALSE 42495
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42516: LD_EXP 31
42520: PPUSH
42521: LD_INT 112
42523: PPUSH
42524: LD_INT 118
42526: PPUSH
42527: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42531: LD_EXP 31
42535: PPUSH
42536: CALL_OW 256
42540: PUSH
42541: LD_INT 750
42543: GREATEREQUAL
42544: IFFALSE 42558
// SetLives ( Kikuchi , 700 ) ;
42546: LD_EXP 31
42550: PPUSH
42551: LD_INT 700
42553: PPUSH
42554: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42558: LD_INT 35
42560: PPUSH
42561: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42565: LD_INT 1
42567: PPUSH
42568: LD_EXP 31
42572: PPUSH
42573: CALL_OW 292
42577: PUSH
42578: LD_EXP 31
42582: PPUSH
42583: LD_INT 7
42585: PPUSH
42586: CALL_OW 296
42590: PUSH
42591: LD_INT 17
42593: LESS
42594: OR
42595: IFFALSE 42558
// DialogueOn ;
42597: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42601: LD_EXP 31
42605: PPUSH
42606: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42610: LD_EXP 31
42614: PPUSH
42615: LD_STRING D4Yb-Yam-1
42617: PPUSH
42618: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
42622: LD_EXP 18
42626: PPUSH
42627: LD_STRING D4Yb-JMM-1
42629: PPUSH
42630: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
42634: LD_EXP 31
42638: PPUSH
42639: LD_STRING D4Yb-Yam-2
42641: PPUSH
42642: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
42646: LD_EXP 18
42650: PPUSH
42651: LD_STRING D4Yb-JMM-2
42653: PPUSH
42654: CALL_OW 88
// DialogueOff ;
42658: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42662: LD_EXP 31
42666: PPUSH
42667: LD_INT 1
42669: PPUSH
42670: CALL_OW 235
// end ; end ; end ;
42674: PPOPN 2
42676: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
42677: LD_EXP 6
42681: IFFALSE 43706
42683: GO 42685
42685: DISABLE
42686: LD_INT 0
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
// begin enable ;
42692: ENABLE
// if not seen [ 1 ] then
42693: LD_EXP 9
42697: PUSH
42698: LD_INT 1
42700: ARRAY
42701: NOT
42702: IFFALSE 42882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
42704: LD_ADDR_VAR 0 2
42708: PUSH
42709: LD_INT 22
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 25
42724: PUSH
42725: LD_INT 11
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 33
42734: PUSH
42735: LD_INT 4
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PPUSH
42751: CALL_OW 69
42755: ST_TO_ADDR
// if tmp then
42756: LD_VAR 0 2
42760: IFFALSE 42882
// for i in tmp do
42762: LD_ADDR_VAR 0 1
42766: PUSH
42767: LD_VAR 0 2
42771: PUSH
42772: FOR_IN
42773: IFFALSE 42880
// if See ( 1 , i ) then
42775: LD_INT 1
42777: PPUSH
42778: LD_VAR 0 1
42782: PPUSH
42783: CALL_OW 292
42787: IFFALSE 42878
// begin seen := Replace ( seen , 1 , true ) ;
42789: LD_ADDR_EXP 9
42793: PUSH
42794: LD_EXP 9
42798: PPUSH
42799: LD_INT 1
42801: PPUSH
42802: LD_INT 1
42804: PPUSH
42805: CALL_OW 1
42809: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42810: LD_INT 1
42812: PPUSH
42813: CALL 2042 0 1
42817: IFFALSE 42878
// begin DialogueOn ;
42819: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42832: LD_INT 10
42834: PPUSH
42835: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_INT 1
42846: PPUSH
42847: LD_STRING D5a-Sol2-1
42849: PPUSH
42850: CALL 2213 0 2
42854: ST_TO_ADDR
// if not un then
42855: LD_VAR 0 3
42859: NOT
42860: IFFALSE 42872
// SayRand ( sex_female , D5a-FSol2-1 ) ;
42862: LD_INT 2
42864: PPUSH
42865: LD_STRING D5a-FSol2-1
42867: PPUSH
42868: CALL 2213 0 2
// DialogueOff ;
42872: CALL_OW 7
// break ;
42876: GO 42880
// end ; end ;
42878: GO 42772
42880: POP
42881: POP
// end ; if not seen [ 2 ] then
42882: LD_EXP 9
42886: PUSH
42887: LD_INT 2
42889: ARRAY
42890: NOT
42891: IFFALSE 43108
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
42893: LD_ADDR_VAR 0 2
42897: PUSH
42898: LD_INT 22
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 25
42910: PUSH
42911: LD_INT 17
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PPUSH
42922: CALL_OW 69
42926: ST_TO_ADDR
// if tmp then
42927: LD_VAR 0 2
42931: IFFALSE 43108
// for i in tmp do
42933: LD_ADDR_VAR 0 1
42937: PUSH
42938: LD_VAR 0 2
42942: PUSH
42943: FOR_IN
42944: IFFALSE 43106
// if See ( 1 , i ) then
42946: LD_INT 1
42948: PPUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 292
42958: IFFALSE 43104
// begin seen := Replace ( seen , 2 , true ) ;
42960: LD_ADDR_EXP 9
42964: PUSH
42965: LD_EXP 9
42969: PPUSH
42970: LD_INT 2
42972: PPUSH
42973: LD_INT 1
42975: PPUSH
42976: CALL_OW 1
42980: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42981: LD_INT 1
42983: PPUSH
42984: CALL 2042 0 1
42988: IFFALSE 43104
// begin DialogueOn ;
42990: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42994: LD_VAR 0 1
42998: PPUSH
42999: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43003: LD_INT 10
43005: PPUSH
43006: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_INT 1
43017: PPUSH
43018: LD_STRING D5b-Sol1-1
43020: PPUSH
43021: CALL 2213 0 2
43025: ST_TO_ADDR
// if not un then
43026: LD_VAR 0 3
43030: NOT
43031: IFFALSE 43049
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_INT 2
43040: PPUSH
43041: LD_STRING D5b-FSol1-1
43043: PPUSH
43044: CALL 2213 0 2
43048: ST_TO_ADDR
// if un then
43049: LD_VAR 0 3
43053: IFFALSE 43098
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43055: LD_ADDR_VAR 0 4
43059: PUSH
43060: LD_INT 1
43062: PPUSH
43063: LD_STRING D5b-Sol2-1
43065: PPUSH
43066: LD_VAR 0 3
43070: PPUSH
43071: CALL 2432 0 3
43075: ST_TO_ADDR
// if not un2 then
43076: LD_VAR 0 4
43080: NOT
43081: IFFALSE 43098
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43083: LD_INT 2
43085: PPUSH
43086: LD_STRING D5b-FSol2-1
43088: PPUSH
43089: LD_VAR 0 3
43093: PPUSH
43094: CALL 2432 0 3
// end ; DialogueOff ;
43098: CALL_OW 7
// break ;
43102: GO 43106
// end ; end ;
43104: GO 42943
43106: POP
43107: POP
// end ; if not seen [ 3 ] then
43108: LD_EXP 9
43112: PUSH
43113: LD_INT 3
43115: ARRAY
43116: NOT
43117: IFFALSE 43291
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43119: LD_ADDR_VAR 0 2
43123: PUSH
43124: LD_INT 22
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 33
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PPUSH
43148: CALL_OW 69
43152: ST_TO_ADDR
// if tmp then
43153: LD_VAR 0 2
43157: IFFALSE 43291
// for i in tmp do
43159: LD_ADDR_VAR 0 1
43163: PUSH
43164: LD_VAR 0 2
43168: PUSH
43169: FOR_IN
43170: IFFALSE 43289
// if See ( 1 , i ) then
43172: LD_INT 1
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 292
43184: IFFALSE 43287
// begin seen := Replace ( seen , 3 , true ) ;
43186: LD_ADDR_EXP 9
43190: PUSH
43191: LD_EXP 9
43195: PPUSH
43196: LD_INT 3
43198: PPUSH
43199: LD_INT 1
43201: PPUSH
43202: CALL_OW 1
43206: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43207: LD_INT 1
43209: PPUSH
43210: CALL 2042 0 1
43214: IFFALSE 43287
// begin DialogueOn ;
43216: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43220: LD_VAR 0 1
43224: PPUSH
43225: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43229: LD_INT 10
43231: PPUSH
43232: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43236: LD_ADDR_VAR 0 3
43240: PUSH
43241: LD_INT 1
43243: PPUSH
43244: LD_STRING D8-Sol1-1
43246: PPUSH
43247: CALL 2213 0 2
43251: ST_TO_ADDR
// if not un then
43252: LD_VAR 0 3
43256: NOT
43257: IFFALSE 43269
// SayRand ( sex_female , D8-FSol1-1 ) ;
43259: LD_INT 2
43261: PPUSH
43262: LD_STRING D8-FSol1-1
43264: PPUSH
43265: CALL 2213 0 2
// Say ( JMM , D8-JMM-1 ) ;
43269: LD_EXP 18
43273: PPUSH
43274: LD_STRING D8-JMM-1
43276: PPUSH
43277: CALL_OW 88
// DialogueOff ;
43281: CALL_OW 7
// break ;
43285: GO 43289
// end ; end ;
43287: GO 43169
43289: POP
43290: POP
// end ; if not seen [ 4 ] then
43291: LD_EXP 9
43295: PUSH
43296: LD_INT 4
43298: ARRAY
43299: NOT
43300: IFFALSE 43462
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43302: LD_ADDR_VAR 0 2
43306: PUSH
43307: LD_INT 22
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 33
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PPUSH
43331: CALL_OW 69
43335: ST_TO_ADDR
// if tmp then
43336: LD_VAR 0 2
43340: IFFALSE 43462
// for i in tmp do
43342: LD_ADDR_VAR 0 1
43346: PUSH
43347: LD_VAR 0 2
43351: PUSH
43352: FOR_IN
43353: IFFALSE 43460
// if See ( 1 , i ) then
43355: LD_INT 1
43357: PPUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: CALL_OW 292
43367: IFFALSE 43458
// begin seen := Replace ( seen , 4 , true ) ;
43369: LD_ADDR_EXP 9
43373: PUSH
43374: LD_EXP 9
43378: PPUSH
43379: LD_INT 4
43381: PPUSH
43382: LD_INT 1
43384: PPUSH
43385: CALL_OW 1
43389: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43390: LD_INT 1
43392: PPUSH
43393: CALL 2042 0 1
43397: IFFALSE 43458
// begin DialogueOn ;
43399: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43403: LD_VAR 0 1
43407: PPUSH
43408: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43412: LD_INT 10
43414: PPUSH
43415: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_INT 1
43426: PPUSH
43427: LD_STRING D5a-Sol1-1
43429: PPUSH
43430: CALL 2213 0 2
43434: ST_TO_ADDR
// if not un then
43435: LD_VAR 0 3
43439: NOT
43440: IFFALSE 43452
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43442: LD_INT 2
43444: PPUSH
43445: LD_STRING D5a-FSol1-1
43447: PPUSH
43448: CALL 2213 0 2
// DialogueOff ;
43452: CALL_OW 7
// break ;
43456: GO 43460
// end ; end ;
43458: GO 43352
43460: POP
43461: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43462: LD_EXP 9
43466: PUSH
43467: LD_INT 5
43469: ARRAY
43470: NOT
43471: PUSH
43472: LD_EXP 9
43476: PUSH
43477: LD_INT 3
43479: ARRAY
43480: AND
43481: IFFALSE 43655
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43483: LD_ADDR_VAR 0 2
43487: PUSH
43488: LD_INT 22
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 34
43500: PUSH
43501: LD_INT 31
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PPUSH
43512: CALL_OW 69
43516: ST_TO_ADDR
// if tmp then
43517: LD_VAR 0 2
43521: IFFALSE 43655
// for i in tmp do
43523: LD_ADDR_VAR 0 1
43527: PUSH
43528: LD_VAR 0 2
43532: PUSH
43533: FOR_IN
43534: IFFALSE 43653
// if See ( 1 , i ) then
43536: LD_INT 1
43538: PPUSH
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 292
43548: IFFALSE 43651
// begin seen := Replace ( seen , 5 , true ) ;
43550: LD_ADDR_EXP 9
43554: PUSH
43555: LD_EXP 9
43559: PPUSH
43560: LD_INT 5
43562: PPUSH
43563: LD_INT 1
43565: PPUSH
43566: CALL_OW 1
43570: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43571: LD_INT 1
43573: PPUSH
43574: CALL 2042 0 1
43578: IFFALSE 43651
// begin DialogueOn ;
43580: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43584: LD_VAR 0 1
43588: PPUSH
43589: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43593: LD_INT 10
43595: PPUSH
43596: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_INT 1
43607: PPUSH
43608: LD_STRING D8a-Sol2-1
43610: PPUSH
43611: CALL 2213 0 2
43615: ST_TO_ADDR
// if not un then
43616: LD_VAR 0 3
43620: NOT
43621: IFFALSE 43633
// SayRand ( sex_female , D8a-FSol2-1 ) ;
43623: LD_INT 2
43625: PPUSH
43626: LD_STRING D8a-FSol2-1
43628: PPUSH
43629: CALL 2213 0 2
// Say ( JMM , D8a-JMM-1 ) ;
43633: LD_EXP 18
43637: PPUSH
43638: LD_STRING D8a-JMM-1
43640: PPUSH
43641: CALL_OW 88
// DialogueOff ;
43645: CALL_OW 7
// break ;
43649: GO 43653
// end ; end ;
43651: GO 43533
43653: POP
43654: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
43655: LD_EXP 9
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PUSH
43664: LD_EXP 9
43668: PUSH
43669: LD_INT 2
43671: ARRAY
43672: AND
43673: PUSH
43674: LD_EXP 9
43678: PUSH
43679: LD_INT 3
43681: ARRAY
43682: AND
43683: PUSH
43684: LD_EXP 9
43688: PUSH
43689: LD_INT 4
43691: ARRAY
43692: AND
43693: PUSH
43694: LD_EXP 9
43698: PUSH
43699: LD_INT 5
43701: ARRAY
43702: AND
43703: IFFALSE 43706
// disable ;
43705: DISABLE
// end ;
43706: PPOPN 4
43708: END
// every 0 0$1 trigger kamikazed do var un ;
43709: LD_EXP 10
43713: IFFALSE 43911
43715: GO 43717
43717: DISABLE
43718: LD_INT 0
43720: PPUSH
// begin DialogueOn ;
43721: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
43725: LD_EXP 10
43729: PPUSH
43730: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
43734: LD_ADDR_VAR 0 1
43738: PUSH
43739: LD_INT 1
43741: PPUSH
43742: LD_STRING D5c-Sol1-1
43744: PPUSH
43745: CALL 2213 0 2
43749: ST_TO_ADDR
// if not un then
43750: LD_VAR 0 1
43754: NOT
43755: IFFALSE 43773
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
43757: LD_ADDR_VAR 0 1
43761: PUSH
43762: LD_INT 2
43764: PPUSH
43765: LD_STRING D5c-Sol1-1
43767: PPUSH
43768: CALL 2213 0 2
43772: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
43773: LD_EXP 18
43777: PPUSH
43778: LD_STRING D5c-JMM-1
43780: PPUSH
43781: CALL_OW 88
// if IsOk ( Lisa ) then
43785: LD_EXP 19
43789: PPUSH
43790: CALL_OW 302
43794: IFFALSE 43810
// Say ( Lisa , D5d-Lisa-1 ) else
43796: LD_EXP 19
43800: PPUSH
43801: LD_STRING D5d-Lisa-1
43803: PPUSH
43804: CALL_OW 88
43808: GO 43895
// if IsOk ( Cyrus ) then
43810: LD_EXP 22
43814: PPUSH
43815: CALL_OW 302
43819: IFFALSE 43835
// Say ( Cyrus , D5d-Cyrus-1 ) else
43821: LD_EXP 22
43825: PPUSH
43826: LD_STRING D5d-Cyrus-1
43828: PPUSH
43829: CALL_OW 88
43833: GO 43895
// if IsOk ( Gary ) then
43835: LD_EXP 29
43839: PPUSH
43840: CALL_OW 302
43844: IFFALSE 43860
// Say ( Gary , D5d-Gary-1 ) else
43846: LD_EXP 29
43850: PPUSH
43851: LD_STRING D5d-Gary-1
43853: PPUSH
43854: CALL_OW 88
43858: GO 43895
// if GetSex ( un ) = sex_male then
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 258
43869: PUSH
43870: LD_INT 1
43872: EQUAL
43873: IFFALSE 43889
// Say ( un , D5d-Sol1-1 ) else
43875: LD_VAR 0 1
43879: PPUSH
43880: LD_STRING D5d-Sol1-1
43882: PPUSH
43883: CALL_OW 88
43887: GO 43895
// begin DialogueOff ;
43889: CALL_OW 7
// exit ;
43893: GO 43911
// end ; Say ( JMM , D5d-JMM-1 ) ;
43895: LD_EXP 18
43899: PPUSH
43900: LD_STRING D5d-JMM-1
43902: PPUSH
43903: CALL_OW 88
// DialogueOff ;
43907: CALL_OW 7
// end ;
43911: PPOPN 1
43913: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
43914: LD_INT 1
43916: PPUSH
43917: LD_INT 17
43919: PPUSH
43920: CALL_OW 294
43924: PUSH
43925: LD_INT 2
43927: GREATEREQUAL
43928: IFFALSE 44049
43930: GO 43932
43932: DISABLE
43933: LD_INT 0
43935: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
43936: LD_INT 10
43938: PPUSH
43939: LD_INT 5
43941: PPUSH
43942: LD_INT 1
43944: PPUSH
43945: LD_INT 10
43947: NEG
43948: PPUSH
43949: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
43953: LD_INT 10
43955: PPUSH
43956: LD_INT 5
43958: PPUSH
43959: LD_INT 1
43961: PPUSH
43962: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
43966: LD_INT 10
43968: PPUSH
43969: LD_INT 5
43971: PPUSH
43972: CALL_OW 86
// DialogueOn ;
43976: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
43980: LD_ADDR_VAR 0 1
43984: PUSH
43985: LD_INT 1
43987: PPUSH
43988: LD_STRING D6-Sci1-1
43990: PPUSH
43991: CALL 2213 0 2
43995: ST_TO_ADDR
// if un then
43996: LD_VAR 0 1
44000: IFFALSE 44038
// begin Say ( JMM , D6-JMM-1 ) ;
44002: LD_EXP 18
44006: PPUSH
44007: LD_STRING D6-JMM-1
44009: PPUSH
44010: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44014: LD_VAR 0 1
44018: PPUSH
44019: LD_STRING D6-Sci1-2
44021: PPUSH
44022: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44026: LD_EXP 18
44030: PPUSH
44031: LD_STRING D6-JMM-2
44033: PPUSH
44034: CALL_OW 88
// end ; DialogueOff ;
44038: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44042: LD_STRING M3
44044: PPUSH
44045: CALL_OW 337
// end ;
44049: PPOPN 1
44051: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44052: LD_OWVAR 1
44056: PUSH
44057: LD_INT 65100
44059: GREATEREQUAL
44060: PUSH
44061: LD_INT 2
44063: PPUSH
44064: LD_INT 169
44066: PPUSH
44067: LD_INT 90
44069: PPUSH
44070: LD_INT 40
44072: PPUSH
44073: CALL 3650 0 4
44077: PUSH
44078: LD_INT 4
44080: ARRAY
44081: PUSH
44082: LD_INT 0
44084: EQUAL
44085: AND
44086: IFFALSE 45120
44088: GO 44090
44090: DISABLE
44091: LD_INT 0
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
// begin uc_side := 5 ;
44097: LD_ADDR_OWVAR 20
44101: PUSH
44102: LD_INT 5
44104: ST_TO_ADDR
// uc_nation := 2 ;
44105: LD_ADDR_OWVAR 21
44109: PUSH
44110: LD_INT 2
44112: ST_TO_ADDR
// InitHc ;
44113: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44117: LD_INT 1
44119: PPUSH
44120: LD_INT 3
44122: PPUSH
44123: LD_INT 8
44125: PPUSH
44126: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44130: LD_ADDR_OWVAR 29
44134: PUSH
44135: LD_INT 12
44137: PUSH
44138: LD_INT 12
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44145: LD_ADDR_OWVAR 33
44149: PUSH
44150: LD_STRING SecondCharsGal
44152: ST_TO_ADDR
// hc_face_number := 7 ;
44153: LD_ADDR_OWVAR 34
44157: PUSH
44158: LD_INT 7
44160: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44161: LD_ADDR_EXP 43
44165: PUSH
44166: CALL_OW 44
44170: ST_TO_ADDR
// InitHc ;
44171: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44175: LD_INT 1
44177: PPUSH
44178: LD_INT 16
44180: PPUSH
44181: LD_INT 2
44183: PPUSH
44184: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44188: LD_ADDR_OWVAR 29
44192: PUSH
44193: LD_INT 12
44195: PUSH
44196: LD_INT 12
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: ST_TO_ADDR
// hc_name := Livid ;
44203: LD_ADDR_OWVAR 26
44207: PUSH
44208: LD_STRING Livid
44210: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44211: LD_ADDR_EXP 44
44215: PUSH
44216: CALL_OW 44
44220: ST_TO_ADDR
// InitHc ;
44221: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44225: LD_INT 35
44227: PPUSH
44228: CALL_OW 67
// until not InBattle ( 1 ) ;
44232: LD_INT 1
44234: PPUSH
44235: CALL_OW 463
44239: NOT
44240: IFFALSE 44225
// wait ( 0 0$5 ) ;
44242: LD_INT 175
44244: PPUSH
44245: CALL_OW 67
// DialogueOn ;
44249: CALL_OW 6
// InGameOn ;
44253: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44257: LD_ADDR_VAR 0 1
44261: PUSH
44262: LD_EXP 32
44266: PUSH
44267: LD_EXP 19
44271: PUSH
44272: LD_EXP 20
44276: PUSH
44277: LD_EXP 21
44281: PUSH
44282: LD_EXP 22
44286: PUSH
44287: LD_EXP 23
44291: PUSH
44292: LD_EXP 24
44296: PUSH
44297: LD_EXP 25
44301: PUSH
44302: LD_EXP 26
44306: PUSH
44307: LD_EXP 28
44311: PUSH
44312: LD_EXP 29
44316: PUSH
44317: LD_EXP 30
44321: PUSH
44322: LD_EXP 31
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: DIFF
44341: PPUSH
44342: LD_INT 26
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PPUSH
44352: CALL_OW 72
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: ST_TO_ADDR
// if not un and Brown then
44361: LD_VAR 0 1
44365: NOT
44366: PUSH
44367: LD_EXP 24
44371: AND
44372: IFFALSE 44384
// un := Brown ;
44374: LD_ADDR_VAR 0 1
44378: PUSH
44379: LD_EXP 24
44383: ST_TO_ADDR
// if un then
44384: LD_VAR 0 1
44388: IFFALSE 44414
// begin Say ( un , D7-Sol1-1 ) ;
44390: LD_VAR 0 1
44394: PPUSH
44395: LD_STRING D7-Sol1-1
44397: PPUSH
44398: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44402: LD_EXP 18
44406: PPUSH
44407: LD_STRING D7-JMM-1
44409: PPUSH
44410: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44414: LD_EXP 43
44418: PPUSH
44419: LD_STRING D7-Ar1-1
44421: PPUSH
44422: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44426: LD_EXP 18
44430: PPUSH
44431: LD_STRING D7-JMM-2
44433: PPUSH
44434: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44438: LD_EXP 43
44442: PPUSH
44443: LD_STRING D7-Ar1-2
44445: PPUSH
44446: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44450: LD_EXP 18
44454: PPUSH
44455: LD_STRING D7-JMM-3
44457: PPUSH
44458: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44462: LD_EXP 43
44466: PPUSH
44467: LD_STRING D7-Ar1-3
44469: PPUSH
44470: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44474: LD_EXP 18
44478: PPUSH
44479: LD_STRING D7-JMM-4
44481: PPUSH
44482: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44486: LD_EXP 43
44490: PPUSH
44491: LD_STRING D7-Ar1-4
44493: PPUSH
44494: CALL_OW 94
// InGameOff ;
44498: CALL_OW 9
// DialogueOff ;
44502: CALL_OW 7
// case Query ( QCameras ) of 1 :
44506: LD_STRING QCameras
44508: PPUSH
44509: CALL_OW 97
44513: PUSH
44514: LD_INT 1
44516: DOUBLE
44517: EQUAL
44518: IFTRUE 44522
44520: GO 44525
44522: POP
// ; 2 :
44523: GO 44539
44525: LD_INT 2
44527: DOUBLE
44528: EQUAL
44529: IFTRUE 44533
44531: GO 44538
44533: POP
// exit ; end ;
44534: GO 45120
44536: GO 44539
44538: POP
// ChangeMissionObjectives ( MCar ) ;
44539: LD_STRING MCar
44541: PPUSH
44542: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
44546: LD_INT 124
44548: PPUSH
44549: LD_INT 90
44551: PPUSH
44552: LD_INT 1
44554: PPUSH
44555: LD_INT 6
44557: NEG
44558: PPUSH
44559: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
44563: LD_INT 124
44565: PPUSH
44566: LD_INT 90
44568: PPUSH
44569: LD_INT 1
44571: PPUSH
44572: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
44576: LD_INT 12
44578: PPUSH
44579: LD_INT 1
44581: PPUSH
44582: CALL_OW 424
// wait ( 3 ) ;
44586: LD_INT 3
44588: PPUSH
44589: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
44593: LD_INT 124
44595: PPUSH
44596: LD_INT 90
44598: PPUSH
44599: CALL_OW 86
// cargo := false ;
44603: LD_ADDR_VAR 0 3
44607: PUSH
44608: LD_INT 0
44610: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44611: LD_INT 35
44613: PPUSH
44614: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: LD_INT 12
44625: PPUSH
44626: LD_INT 32
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 34
44638: PUSH
44639: LD_INT 32
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 58
44648: PUSH
44649: EMPTY
44650: LIST
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: PPUSH
44657: CALL_OW 70
44661: ST_TO_ADDR
// until cargo ;
44662: LD_VAR 0 3
44666: IFFALSE 44611
// cargo := cargo [ 1 ] ;
44668: LD_ADDR_VAR 0 3
44672: PUSH
44673: LD_VAR 0 3
44677: PUSH
44678: LD_INT 1
44680: ARRAY
44681: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
44682: LD_VAR 0 3
44686: PPUSH
44687: LD_INT 5
44689: PPUSH
44690: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
44694: LD_INT 12
44696: PPUSH
44697: LD_INT 0
44699: PPUSH
44700: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
44704: LD_EXP 43
44708: PPUSH
44709: LD_INT 11
44711: PPUSH
44712: LD_INT 0
44714: PPUSH
44715: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
44719: LD_EXP 44
44723: PPUSH
44724: LD_INT 11
44726: PPUSH
44727: LD_INT 0
44729: PPUSH
44730: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
44734: LD_EXP 43
44738: PUSH
44739: LD_EXP 44
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PPUSH
44748: LD_INT 12
44750: PPUSH
44751: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
44755: LD_EXP 43
44759: PPUSH
44760: LD_VAR 0 3
44764: PPUSH
44765: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44769: LD_EXP 43
44773: PUSH
44774: LD_EXP 44
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PPUSH
44783: LD_INT 209
44785: PPUSH
44786: LD_INT 178
44788: PPUSH
44789: CALL_OW 171
// while ( true ) do
44793: LD_INT 1
44795: IFFALSE 44949
// begin wait ( 0 0$1 ) ;
44797: LD_INT 35
44799: PPUSH
44800: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
44804: LD_EXP 43
44808: PPUSH
44809: CALL_OW 314
44813: NOT
44814: PUSH
44815: LD_EXP 44
44819: PPUSH
44820: CALL_OW 314
44824: NOT
44825: OR
44826: IFFALSE 44852
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44828: LD_EXP 43
44832: PUSH
44833: LD_EXP 44
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PPUSH
44842: LD_INT 209
44844: PPUSH
44845: LD_INT 178
44847: PPUSH
44848: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
44852: LD_EXP 43
44856: PPUSH
44857: LD_INT 10
44859: PPUSH
44860: CALL_OW 308
44864: IFFALSE 44875
// RemoveUnit ( ar_mechanic ) ;
44866: LD_EXP 43
44870: PPUSH
44871: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
44875: LD_EXP 44
44879: PPUSH
44880: LD_INT 10
44882: PPUSH
44883: CALL_OW 308
44887: IFFALSE 44898
// RemoveUnit ( ar_mechanic_friend ) ;
44889: LD_EXP 44
44893: PPUSH
44894: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
44898: LD_VAR 0 3
44902: PPUSH
44903: LD_INT 10
44905: PPUSH
44906: CALL_OW 308
44910: IFFALSE 44921
// RemoveUnit ( cargo ) ;
44912: LD_VAR 0 3
44916: PPUSH
44917: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
44921: LD_EXP 43
44925: PPUSH
44926: CALL_OW 300
44930: NOT
44931: PUSH
44932: LD_EXP 44
44936: PPUSH
44937: CALL_OW 300
44941: NOT
44942: AND
44943: IFFALSE 44947
// break ;
44945: GO 44949
// end ;
44947: GO 44793
// wait ( 0 0$2 ) ;
44949: LD_INT 70
44951: PPUSH
44952: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
44956: LD_EXP 43
44960: PPUSH
44961: LD_STRING D7a-Ar1-1
44963: PPUSH
44964: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
44968: LD_ADDR_VAR 0 4
44972: PUSH
44973: LD_INT 129
44975: PUSH
44976: LD_INT 10
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 103
44985: PUSH
44986: LD_INT 6
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 148
44995: PUSH
44996: LD_INT 47
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 155
45005: PUSH
45006: LD_INT 16
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// if Difficulty = 1 then
45019: LD_OWVAR 67
45023: PUSH
45024: LD_INT 1
45026: EQUAL
45027: IFFALSE 45064
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45029: LD_ADDR_VAR 0 4
45033: PUSH
45034: LD_VAR 0 4
45038: PUSH
45039: LD_INT 78
45041: PUSH
45042: LD_INT 7
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 104
45051: PUSH
45052: LD_INT 43
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: ADD
45063: ST_TO_ADDR
// for i in tmp do
45064: LD_ADDR_VAR 0 2
45068: PUSH
45069: LD_VAR 0 4
45073: PUSH
45074: FOR_IN
45075: IFFALSE 45108
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45077: LD_VAR 0 2
45081: PUSH
45082: LD_INT 1
45084: ARRAY
45085: PPUSH
45086: LD_VAR 0 2
45090: PUSH
45091: LD_INT 2
45093: ARRAY
45094: PPUSH
45095: LD_INT 1
45097: PPUSH
45098: LD_INT 9
45100: NEG
45101: PPUSH
45102: CALL_OW 330
45106: GO 45074
45108: POP
45109: POP
// CenterOnXY ( 129 , 10 ) ;
45110: LD_INT 129
45112: PPUSH
45113: LD_INT 10
45115: PPUSH
45116: CALL_OW 84
// end ;
45120: PPOPN 4
45122: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45123: LD_EXP 14
45127: PUSH
45128: LD_INT 21000
45130: MINUS
45131: PUSH
45132: LD_OWVAR 1
45136: LESSEQUAL
45137: IFFALSE 45177
45139: GO 45141
45141: DISABLE
// begin powell_warn := true ;
45142: LD_ADDR_EXP 15
45146: PUSH
45147: LD_INT 1
45149: ST_TO_ADDR
// DialogueOn ;
45150: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45154: LD_EXP 27
45158: PPUSH
45159: LD_STRING D9-Pow-1
45161: PPUSH
45162: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45166: LD_INT 10
45168: PPUSH
45169: CALL_OW 68
// DialogueOff ;
45173: CALL_OW 7
// end ;
45177: END
// every 0 0$1 trigger game_time <= tick do
45178: LD_EXP 14
45182: PUSH
45183: LD_OWVAR 1
45187: LESSEQUAL
45188: IFFALSE 45227
45190: GO 45192
45192: DISABLE
// begin DialogueOn ;
45193: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45197: LD_EXP 27
45201: PPUSH
45202: LD_STRING D9a-Pow-1
45204: PPUSH
45205: CALL_OW 94
// dwait ( 0 0$2 ) ;
45209: LD_INT 70
45211: PPUSH
45212: CALL_OW 68
// DialogueOff ;
45216: CALL_OW 7
// YouLost ( Command ) ;
45220: LD_STRING Command
45222: PPUSH
45223: CALL_OW 104
// end ;
45227: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45228: LD_EXP 18
45232: PPUSH
45233: CALL_OW 301
45237: PUSH
45238: LD_EXP 5
45242: AND
45243: IFFALSE 45255
45245: GO 45247
45247: DISABLE
// YouLost ( JMM ) ;
45248: LD_STRING JMM
45250: PPUSH
45251: CALL_OW 104
45255: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
45256: LD_INT 22
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 30
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PPUSH
45280: CALL_OW 69
45284: PUSH
45285: LD_INT 0
45287: EQUAL
45288: PUSH
45289: LD_EXP 18
45293: PPUSH
45294: CALL_OW 302
45298: AND
45299: IFFALSE 46040
45301: GO 45303
45303: DISABLE
// begin DialogueOn ;
45304: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45308: LD_OWVAR 1
45312: PUSH
45313: LD_INT 126000
45315: PUSH
45316: LD_INT 105000
45318: PUSH
45319: LD_INT 94500
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: PUSH
45327: LD_OWVAR 67
45331: ARRAY
45332: LESS
45333: IFFALSE 45347
// AddMedal ( Time1 , 2 ) else
45335: LD_STRING Time1
45337: PPUSH
45338: LD_INT 2
45340: PPUSH
45341: CALL_OW 101
45345: GO 45377
// if not powell_warn then
45347: LD_EXP 15
45351: NOT
45352: IFFALSE 45366
// AddMedal ( Time1 , 1 ) else
45354: LD_STRING Time1
45356: PPUSH
45357: LD_INT 1
45359: PPUSH
45360: CALL_OW 101
45364: GO 45377
// AddMedal ( Time1 , - 1 ) ;
45366: LD_STRING Time1
45368: PPUSH
45369: LD_INT 1
45371: NEG
45372: PPUSH
45373: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45377: LD_EXP 16
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: LD_INT 4
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: PUSH
45396: LD_OWVAR 67
45400: ARRAY
45401: GREATEREQUAL
45402: IFFALSE 45417
// AddMedal ( Destroy , - 2 ) else
45404: LD_STRING Destroy
45406: PPUSH
45407: LD_INT 2
45409: NEG
45410: PPUSH
45411: CALL_OW 101
45415: GO 45534
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45417: LD_INT 22
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 21
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 50
45439: PUSH
45440: EMPTY
45441: LIST
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: LIST
45447: PPUSH
45448: CALL_OW 69
45452: PUSH
45453: LD_INT 20
45455: GREATEREQUAL
45456: IFFALSE 45471
// AddMedal ( Destroy , - 1 ) else
45458: LD_STRING Destroy
45460: PPUSH
45461: LD_INT 1
45463: NEG
45464: PPUSH
45465: CALL_OW 101
45469: GO 45534
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45471: LD_INT 22
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 21
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 50
45493: PUSH
45494: EMPTY
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: PPUSH
45502: CALL_OW 69
45506: PUSH
45507: LD_INT 10
45509: GREATEREQUAL
45510: IFFALSE 45524
// AddMedal ( Destroy , 1 ) else
45512: LD_STRING Destroy
45514: PPUSH
45515: LD_INT 1
45517: PPUSH
45518: CALL_OW 101
45522: GO 45534
// AddMedal ( Destroy , 2 ) ;
45524: LD_STRING Destroy
45526: PPUSH
45527: LD_INT 2
45529: PPUSH
45530: CALL_OW 101
// if artifact_get then
45534: LD_EXP 12
45538: IFFALSE 45552
// AddMedal ( Artefact , 1 ) else
45540: LD_STRING Artefact
45542: PPUSH
45543: LD_INT 1
45545: PPUSH
45546: CALL_OW 101
45550: GO 45563
// AddMedal ( Artefact , - 1 ) ;
45552: LD_STRING Artefact
45554: PPUSH
45555: LD_INT 1
45557: NEG
45558: PPUSH
45559: CALL_OW 101
// GiveMedals ( MAIN ) ;
45563: LD_STRING MAIN
45565: PPUSH
45566: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45570: LD_INT 22
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 25
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 25
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 25
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 25
45615: PUSH
45616: LD_INT 4
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PPUSH
45634: CALL_OW 69
45638: PPUSH
45639: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
45643: LD_EXP 32
45647: PUSH
45648: LD_EXP 19
45652: PUSH
45653: LD_EXP 20
45657: PUSH
45658: LD_EXP 21
45662: PUSH
45663: LD_EXP 22
45667: PUSH
45668: LD_EXP 23
45672: PUSH
45673: LD_EXP 24
45677: PUSH
45678: LD_EXP 25
45682: PUSH
45683: LD_EXP 26
45687: PUSH
45688: LD_EXP 28
45692: PUSH
45693: LD_EXP 29
45697: PUSH
45698: LD_EXP 30
45702: PUSH
45703: LD_EXP 31
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: DIFF
45722: PPUSH
45723: LD_STRING 11c_others
45725: PPUSH
45726: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45730: LD_EXP 18
45734: PPUSH
45735: LD_EXP 3
45739: PUSH
45740: LD_STRING JMM
45742: STR
45743: PPUSH
45744: CALL_OW 38
// if Lisa then
45748: LD_EXP 19
45752: IFFALSE 45772
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45754: LD_EXP 19
45758: PPUSH
45759: LD_EXP 3
45763: PUSH
45764: LD_STRING Lisa
45766: STR
45767: PPUSH
45768: CALL_OW 38
// if Donaldson then
45772: LD_EXP 20
45776: IFFALSE 45796
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45778: LD_EXP 20
45782: PPUSH
45783: LD_EXP 3
45787: PUSH
45788: LD_STRING Donaldson
45790: STR
45791: PPUSH
45792: CALL_OW 38
// if Bobby then
45796: LD_EXP 21
45800: IFFALSE 45820
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45802: LD_EXP 21
45806: PPUSH
45807: LD_EXP 3
45811: PUSH
45812: LD_STRING Bobby
45814: STR
45815: PPUSH
45816: CALL_OW 38
// if Cyrus then
45820: LD_EXP 22
45824: IFFALSE 45844
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45826: LD_EXP 22
45830: PPUSH
45831: LD_EXP 3
45835: PUSH
45836: LD_STRING Cyrus
45838: STR
45839: PPUSH
45840: CALL_OW 38
// if Denis then
45844: LD_EXP 23
45848: IFFALSE 45868
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
45850: LD_EXP 23
45854: PPUSH
45855: LD_EXP 3
45859: PUSH
45860: LD_STRING Denis
45862: STR
45863: PPUSH
45864: CALL_OW 38
// if Brown then
45868: LD_EXP 24
45872: IFFALSE 45892
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
45874: LD_EXP 24
45878: PPUSH
45879: LD_EXP 3
45883: PUSH
45884: LD_STRING Brown
45886: STR
45887: PPUSH
45888: CALL_OW 38
// if Gladstone then
45892: LD_EXP 25
45896: IFFALSE 45916
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45898: LD_EXP 25
45902: PPUSH
45903: LD_EXP 3
45907: PUSH
45908: LD_STRING Gladstone
45910: STR
45911: PPUSH
45912: CALL_OW 38
// if Houten then
45916: LD_EXP 26
45920: IFFALSE 45940
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
45922: LD_EXP 26
45926: PPUSH
45927: LD_EXP 3
45931: PUSH
45932: LD_STRING Houten
45934: STR
45935: PPUSH
45936: CALL_OW 38
// if Cornel then
45940: LD_EXP 28
45944: IFFALSE 45964
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
45946: LD_EXP 28
45950: PPUSH
45951: LD_EXP 3
45955: PUSH
45956: LD_STRING Cornel
45958: STR
45959: PPUSH
45960: CALL_OW 38
// if Gary then
45964: LD_EXP 29
45968: IFFALSE 45988
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
45970: LD_EXP 29
45974: PPUSH
45975: LD_EXP 3
45979: PUSH
45980: LD_STRING Gary
45982: STR
45983: PPUSH
45984: CALL_OW 38
// if Frank then
45988: LD_EXP 30
45992: IFFALSE 46012
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
45994: LD_EXP 30
45998: PPUSH
45999: LD_EXP 3
46003: PUSH
46004: LD_STRING Frank
46006: STR
46007: PPUSH
46008: CALL_OW 38
// if Kikuchi then
46012: LD_EXP 31
46016: IFFALSE 46036
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46018: LD_EXP 31
46022: PPUSH
46023: LD_EXP 3
46027: PUSH
46028: LD_STRING Kikuchi
46030: STR
46031: PPUSH
46032: CALL_OW 38
// YouWin ;
46036: CALL_OW 103
// end ; end_of_file
46040: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46041: LD_INT 0
46043: PPUSH
// skirmish := false ;
46044: LD_ADDR_EXP 45
46048: PUSH
46049: LD_INT 0
46051: ST_TO_ADDR
// mc_bases := [ ] ;
46052: LD_ADDR_EXP 46
46056: PUSH
46057: EMPTY
46058: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46059: LD_ADDR_EXP 47
46063: PUSH
46064: EMPTY
46065: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46066: LD_ADDR_EXP 48
46070: PUSH
46071: EMPTY
46072: ST_TO_ADDR
// mc_need_heal := [ ] ;
46073: LD_ADDR_EXP 49
46077: PUSH
46078: EMPTY
46079: ST_TO_ADDR
// mc_healers := [ ] ;
46080: LD_ADDR_EXP 50
46084: PUSH
46085: EMPTY
46086: ST_TO_ADDR
// mc_build_list := [ ] ;
46087: LD_ADDR_EXP 51
46091: PUSH
46092: EMPTY
46093: ST_TO_ADDR
// mc_builders := [ ] ;
46094: LD_ADDR_EXP 52
46098: PUSH
46099: EMPTY
46100: ST_TO_ADDR
// mc_construct_list := [ ] ;
46101: LD_ADDR_EXP 53
46105: PUSH
46106: EMPTY
46107: ST_TO_ADDR
// mc_turret_list := [ ] ;
46108: LD_ADDR_EXP 54
46112: PUSH
46113: EMPTY
46114: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46115: LD_ADDR_EXP 55
46119: PUSH
46120: EMPTY
46121: ST_TO_ADDR
// mc_miners := [ ] ;
46122: LD_ADDR_EXP 57
46126: PUSH
46127: EMPTY
46128: ST_TO_ADDR
// mc_mines := [ ] ;
46129: LD_ADDR_EXP 56
46133: PUSH
46134: EMPTY
46135: ST_TO_ADDR
// mc_minefields := [ ] ;
46136: LD_ADDR_EXP 58
46140: PUSH
46141: EMPTY
46142: ST_TO_ADDR
// mc_crates := [ ] ;
46143: LD_ADDR_EXP 59
46147: PUSH
46148: EMPTY
46149: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46150: LD_ADDR_EXP 60
46154: PUSH
46155: EMPTY
46156: ST_TO_ADDR
// mc_vehicles := [ ] ;
46157: LD_ADDR_EXP 61
46161: PUSH
46162: EMPTY
46163: ST_TO_ADDR
// mc_attack := [ ] ;
46164: LD_ADDR_EXP 62
46168: PUSH
46169: EMPTY
46170: ST_TO_ADDR
// mc_produce := [ ] ;
46171: LD_ADDR_EXP 63
46175: PUSH
46176: EMPTY
46177: ST_TO_ADDR
// mc_defender := [ ] ;
46178: LD_ADDR_EXP 64
46182: PUSH
46183: EMPTY
46184: ST_TO_ADDR
// mc_parking := [ ] ;
46185: LD_ADDR_EXP 66
46189: PUSH
46190: EMPTY
46191: ST_TO_ADDR
// mc_scan := [ ] ;
46192: LD_ADDR_EXP 65
46196: PUSH
46197: EMPTY
46198: ST_TO_ADDR
// end ;
46199: LD_VAR 0 1
46203: RET
// export function RunMacro ; var i ; begin
46204: LD_INT 0
46206: PPUSH
46207: PPUSH
// for i = 1 to mc_bases do
46208: LD_ADDR_VAR 0 2
46212: PUSH
46213: DOUBLE
46214: LD_INT 1
46216: DEC
46217: ST_TO_ADDR
46218: LD_EXP 46
46222: PUSH
46223: FOR_TO
46224: IFFALSE 46712
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46226: LD_ADDR_EXP 47
46230: PUSH
46231: LD_EXP 47
46235: PPUSH
46236: LD_VAR 0 2
46240: PPUSH
46241: EMPTY
46242: PPUSH
46243: CALL_OW 1
46247: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46248: LD_ADDR_EXP 48
46252: PUSH
46253: LD_EXP 48
46257: PPUSH
46258: LD_VAR 0 2
46262: PPUSH
46263: EMPTY
46264: PPUSH
46265: CALL_OW 1
46269: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46270: LD_ADDR_EXP 49
46274: PUSH
46275: LD_EXP 49
46279: PPUSH
46280: LD_VAR 0 2
46284: PPUSH
46285: EMPTY
46286: PPUSH
46287: CALL_OW 1
46291: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46292: LD_ADDR_EXP 50
46296: PUSH
46297: LD_EXP 50
46301: PPUSH
46302: LD_VAR 0 2
46306: PPUSH
46307: EMPTY
46308: PUSH
46309: EMPTY
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PPUSH
46315: CALL_OW 1
46319: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46320: LD_ADDR_EXP 51
46324: PUSH
46325: LD_EXP 51
46329: PPUSH
46330: LD_VAR 0 2
46334: PPUSH
46335: EMPTY
46336: PPUSH
46337: CALL_OW 1
46341: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46342: LD_ADDR_EXP 53
46346: PUSH
46347: LD_EXP 53
46351: PPUSH
46352: LD_VAR 0 2
46356: PPUSH
46357: EMPTY
46358: PPUSH
46359: CALL_OW 1
46363: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46364: LD_ADDR_EXP 54
46368: PUSH
46369: LD_EXP 54
46373: PPUSH
46374: LD_VAR 0 2
46378: PPUSH
46379: EMPTY
46380: PPUSH
46381: CALL_OW 1
46385: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46386: LD_ADDR_EXP 55
46390: PUSH
46391: LD_EXP 55
46395: PPUSH
46396: LD_VAR 0 2
46400: PPUSH
46401: EMPTY
46402: PPUSH
46403: CALL_OW 1
46407: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46408: LD_ADDR_EXP 55
46412: PUSH
46413: LD_EXP 55
46417: PPUSH
46418: LD_VAR 0 2
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PPUSH
46430: EMPTY
46431: PPUSH
46432: CALL 3156 0 3
46436: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46437: LD_ADDR_EXP 55
46441: PUSH
46442: LD_EXP 55
46446: PPUSH
46447: LD_VAR 0 2
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PPUSH
46459: EMPTY
46460: PPUSH
46461: CALL 3156 0 3
46465: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46466: LD_ADDR_EXP 57
46470: PUSH
46471: LD_EXP 57
46475: PPUSH
46476: LD_VAR 0 2
46480: PPUSH
46481: EMPTY
46482: PPUSH
46483: CALL_OW 1
46487: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
46488: LD_ADDR_EXP 56
46492: PUSH
46493: LD_EXP 56
46497: PPUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: EMPTY
46504: PPUSH
46505: CALL_OW 1
46509: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
46510: LD_ADDR_EXP 58
46514: PUSH
46515: LD_EXP 58
46519: PPUSH
46520: LD_VAR 0 2
46524: PPUSH
46525: EMPTY
46526: PPUSH
46527: CALL_OW 1
46531: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
46532: LD_ADDR_EXP 59
46536: PUSH
46537: LD_EXP 59
46541: PPUSH
46542: LD_VAR 0 2
46546: PPUSH
46547: EMPTY
46548: PPUSH
46549: CALL_OW 1
46553: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46554: LD_ADDR_EXP 60
46558: PUSH
46559: LD_EXP 60
46563: PPUSH
46564: LD_VAR 0 2
46568: PPUSH
46569: EMPTY
46570: PPUSH
46571: CALL_OW 1
46575: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
46576: LD_ADDR_EXP 61
46580: PUSH
46581: LD_EXP 61
46585: PPUSH
46586: LD_VAR 0 2
46590: PPUSH
46591: EMPTY
46592: PPUSH
46593: CALL_OW 1
46597: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
46598: LD_ADDR_EXP 62
46602: PUSH
46603: LD_EXP 62
46607: PPUSH
46608: LD_VAR 0 2
46612: PPUSH
46613: EMPTY
46614: PPUSH
46615: CALL_OW 1
46619: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
46620: LD_ADDR_EXP 63
46624: PUSH
46625: LD_EXP 63
46629: PPUSH
46630: LD_VAR 0 2
46634: PPUSH
46635: EMPTY
46636: PPUSH
46637: CALL_OW 1
46641: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46642: LD_ADDR_EXP 64
46646: PUSH
46647: LD_EXP 64
46651: PPUSH
46652: LD_VAR 0 2
46656: PPUSH
46657: EMPTY
46658: PPUSH
46659: CALL_OW 1
46663: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
46664: LD_ADDR_EXP 66
46668: PUSH
46669: LD_EXP 66
46673: PPUSH
46674: LD_VAR 0 2
46678: PPUSH
46679: LD_INT 0
46681: PPUSH
46682: CALL_OW 1
46686: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
46687: LD_ADDR_EXP 65
46691: PUSH
46692: LD_EXP 65
46696: PPUSH
46697: LD_VAR 0 2
46701: PPUSH
46702: LD_INT 0
46704: PPUSH
46705: CALL_OW 1
46709: ST_TO_ADDR
// end ;
46710: GO 46223
46712: POP
46713: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
46714: LD_INT 1
46716: PPUSH
46717: LD_INT 8
46719: PUSH
46720: LD_INT 10
46722: PUSH
46723: LD_INT 12
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: PUSH
46731: LD_OWVAR 67
46735: ARRAY
46736: PPUSH
46737: LD_INT 3
46739: PPUSH
46740: CALL 54204 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
46744: LD_INT 2
46746: PPUSH
46747: LD_INT 6
46749: PUSH
46750: LD_INT 8
46752: PUSH
46753: LD_INT 9
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: PUSH
46761: LD_OWVAR 67
46765: ARRAY
46766: PPUSH
46767: LD_INT 2
46769: PPUSH
46770: CALL 54204 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
46774: LD_INT 3
46776: PPUSH
46777: LD_INT 6
46779: PUSH
46780: LD_INT 7
46782: PUSH
46783: LD_INT 9
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: PUSH
46791: LD_OWVAR 67
46795: ARRAY
46796: PPUSH
46797: LD_INT 1
46799: PPUSH
46800: CALL 54204 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
46804: LD_ADDR_EXP 66
46808: PUSH
46809: LD_INT 20
46811: PUSH
46812: LD_INT 21
46814: PUSH
46815: LD_INT 22
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// for i = 1 to mc_bases do
46823: LD_ADDR_VAR 0 2
46827: PUSH
46828: DOUBLE
46829: LD_INT 1
46831: DEC
46832: ST_TO_ADDR
46833: LD_EXP 46
46837: PUSH
46838: FOR_TO
46839: IFFALSE 46863
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
46841: LD_VAR 0 2
46845: PPUSH
46846: LD_EXP 40
46850: PUSH
46851: LD_VAR 0 2
46855: ARRAY
46856: PPUSH
46857: CALL 54549 0 2
46861: GO 46838
46863: POP
46864: POP
// skirmish := true ;
46865: LD_ADDR_EXP 45
46869: PUSH
46870: LD_INT 1
46872: ST_TO_ADDR
// end ;
46873: LD_VAR 0 1
46877: RET
// every 0 0$01 trigger skirmish do
46878: LD_EXP 45
46882: IFFALSE 46966
46884: GO 46886
46886: DISABLE
// begin enable ;
46887: ENABLE
// MC_CheckBuildings ( ) ;
46888: CALL 47327 0 0
// MC_CheckPeopleLife ( ) ;
46892: CALL 47545 0 0
// RaiseSailEvent ( 103 ) ;
46896: LD_INT 103
46898: PPUSH
46899: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
46903: LD_INT 104
46905: PPUSH
46906: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
46910: LD_INT 105
46912: PPUSH
46913: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
46917: LD_INT 106
46919: PPUSH
46920: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
46924: LD_INT 107
46926: PPUSH
46927: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
46931: LD_INT 108
46933: PPUSH
46934: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
46938: LD_INT 109
46940: PPUSH
46941: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
46945: LD_INT 110
46947: PPUSH
46948: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
46952: LD_INT 111
46954: PPUSH
46955: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
46959: LD_INT 200
46961: PPUSH
46962: CALL_OW 427
// end ;
46966: END
// every 10 trigger skirmish do var i ;
46967: LD_EXP 45
46971: IFFALSE 47070
46973: GO 46975
46975: DISABLE
46976: LD_INT 0
46978: PPUSH
// begin enable ;
46979: ENABLE
// if not mc_bases then
46980: LD_EXP 46
46984: NOT
46985: IFFALSE 46989
// exit ;
46987: GO 47070
// for i = 1 to mc_bases do
46989: LD_ADDR_VAR 0 1
46993: PUSH
46994: DOUBLE
46995: LD_INT 1
46997: DEC
46998: ST_TO_ADDR
46999: LD_EXP 46
47003: PUSH
47004: FOR_TO
47005: IFFALSE 47068
// if mc_mines [ i ] and mc_miners [ i ] then
47007: LD_EXP 56
47011: PUSH
47012: LD_VAR 0 1
47016: ARRAY
47017: PUSH
47018: LD_EXP 57
47022: PUSH
47023: LD_VAR 0 1
47027: ARRAY
47028: AND
47029: IFFALSE 47066
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47031: LD_EXP 57
47035: PUSH
47036: LD_VAR 0 1
47040: ARRAY
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: PPUSH
47046: CALL_OW 255
47050: PPUSH
47051: LD_EXP 56
47055: PUSH
47056: LD_VAR 0 1
47060: ARRAY
47061: PPUSH
47062: CALL 33385 0 2
47066: GO 47004
47068: POP
47069: POP
// end ;
47070: PPOPN 1
47072: END
// on SailEvent ( event ) do begin if event = 101 then
47073: LD_VAR 0 1
47077: PUSH
47078: LD_INT 101
47080: EQUAL
47081: IFFALSE 47087
// MC_RepairBuildings ( ) ;
47083: CALL 48091 0 0
// if event = 102 then
47087: LD_VAR 0 1
47091: PUSH
47092: LD_INT 102
47094: EQUAL
47095: IFFALSE 47101
// MC_Heal ( ) ;
47097: CALL 48485 0 0
// if event = 103 then
47101: LD_VAR 0 1
47105: PUSH
47106: LD_INT 103
47108: EQUAL
47109: IFFALSE 47115
// MC_Build ( ) ;
47111: CALL 48870 0 0
// if event = 104 then
47115: LD_VAR 0 1
47119: PUSH
47120: LD_INT 104
47122: EQUAL
47123: IFFALSE 47129
// MC_TurretWeapon ( ) ;
47125: CALL 49638 0 0
// if event = 105 then
47129: LD_VAR 0 1
47133: PUSH
47134: LD_INT 105
47136: EQUAL
47137: IFFALSE 47143
// MC_TurretCrew ( ) ;
47139: CALL 49957 0 0
// if event = 106 then
47143: LD_VAR 0 1
47147: PUSH
47148: LD_INT 106
47150: EQUAL
47151: IFFALSE 47157
// MC_PlantMines ( ) ;
47153: CALL 50750 0 0
// if event = 107 then
47157: LD_VAR 0 1
47161: PUSH
47162: LD_INT 107
47164: EQUAL
47165: IFFALSE 47171
// MC_CollectCrates ( ) ;
47167: CALL 51558 0 0
// if event = 108 then
47171: LD_VAR 0 1
47175: PUSH
47176: LD_INT 108
47178: EQUAL
47179: IFFALSE 47185
// MC_LinkRemoteControl ( ) ;
47181: CALL 52355 0 0
// if event = 109 then
47185: LD_VAR 0 1
47189: PUSH
47190: LD_INT 109
47192: EQUAL
47193: IFFALSE 47199
// MC_ProduceVehicle ( ) ;
47195: CALL 52524 0 0
// if event = 110 then
47199: LD_VAR 0 1
47203: PUSH
47204: LD_INT 110
47206: EQUAL
47207: IFFALSE 47213
// MC_SendAttack ( ) ;
47209: CALL 52912 0 0
// if event = 111 then
47213: LD_VAR 0 1
47217: PUSH
47218: LD_INT 111
47220: EQUAL
47221: IFFALSE 47227
// MC_Defend ( ) ;
47223: CALL 53020 0 0
// if event = 200 then
47227: LD_VAR 0 1
47231: PUSH
47232: LD_INT 200
47234: EQUAL
47235: IFFALSE 47241
// MC_Idle ( ) ;
47237: CALL 53955 0 0
// end ;
47241: PPOPN 1
47243: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47244: LD_INT 0
47246: PPUSH
47247: PPUSH
// if not mc_bases [ base ] or not tag then
47248: LD_EXP 46
47252: PUSH
47253: LD_VAR 0 1
47257: ARRAY
47258: NOT
47259: PUSH
47260: LD_VAR 0 2
47264: NOT
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47322
// for i in mc_bases [ base ] do
47270: LD_ADDR_VAR 0 4
47274: PUSH
47275: LD_EXP 46
47279: PUSH
47280: LD_VAR 0 1
47284: ARRAY
47285: PUSH
47286: FOR_IN
47287: IFFALSE 47320
// if GetTag ( i ) = tag then
47289: LD_VAR 0 4
47293: PPUSH
47294: CALL_OW 110
47298: PUSH
47299: LD_VAR 0 2
47303: EQUAL
47304: IFFALSE 47318
// SetTag ( i , 0 ) ;
47306: LD_VAR 0 4
47310: PPUSH
47311: LD_INT 0
47313: PPUSH
47314: CALL_OW 109
47318: GO 47286
47320: POP
47321: POP
// end ;
47322: LD_VAR 0 3
47326: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47327: LD_INT 0
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
// if not mc_bases then
47333: LD_EXP 46
47337: NOT
47338: IFFALSE 47342
// exit ;
47340: GO 47540
// for i = 1 to mc_bases do
47342: LD_ADDR_VAR 0 2
47346: PUSH
47347: DOUBLE
47348: LD_INT 1
47350: DEC
47351: ST_TO_ADDR
47352: LD_EXP 46
47356: PUSH
47357: FOR_TO
47358: IFFALSE 47525
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47360: LD_ADDR_VAR 0 4
47364: PUSH
47365: LD_EXP 46
47369: PUSH
47370: LD_VAR 0 2
47374: ARRAY
47375: PPUSH
47376: LD_INT 21
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 24
47391: PUSH
47392: LD_INT 1000
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PPUSH
47407: CALL_OW 72
47411: ST_TO_ADDR
// if not tmp then
47412: LD_VAR 0 4
47416: NOT
47417: IFFALSE 47443
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47419: LD_ADDR_EXP 47
47423: PUSH
47424: LD_EXP 47
47428: PPUSH
47429: LD_VAR 0 2
47433: PPUSH
47434: EMPTY
47435: PPUSH
47436: CALL_OW 1
47440: ST_TO_ADDR
// continue ;
47441: GO 47357
// end ; for j in tmp do
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: LD_VAR 0 4
47452: PUSH
47453: FOR_IN
47454: IFFALSE 47521
// if not j in mc_building_need_repair [ i ] then
47456: LD_VAR 0 3
47460: PUSH
47461: LD_EXP 47
47465: PUSH
47466: LD_VAR 0 2
47470: ARRAY
47471: IN
47472: NOT
47473: IFFALSE 47519
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
47475: LD_ADDR_EXP 47
47479: PUSH
47480: LD_EXP 47
47484: PPUSH
47485: LD_VAR 0 2
47489: PUSH
47490: LD_EXP 47
47494: PUSH
47495: LD_VAR 0 2
47499: ARRAY
47500: PUSH
47501: LD_INT 1
47503: PLUS
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PPUSH
47509: LD_VAR 0 3
47513: PPUSH
47514: CALL 3156 0 3
47518: ST_TO_ADDR
47519: GO 47453
47521: POP
47522: POP
// end ;
47523: GO 47357
47525: POP
47526: POP
// if mc_building_need_repair then
47527: LD_EXP 47
47531: IFFALSE 47540
// RaiseSailEvent ( 101 ) ;
47533: LD_INT 101
47535: PPUSH
47536: CALL_OW 427
// end ;
47540: LD_VAR 0 1
47544: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47545: LD_INT 0
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
// if not mc_bases then
47554: LD_EXP 46
47558: NOT
47559: IFFALSE 47563
// exit ;
47561: GO 48086
// for i = 1 to mc_bases do
47563: LD_ADDR_VAR 0 2
47567: PUSH
47568: DOUBLE
47569: LD_INT 1
47571: DEC
47572: ST_TO_ADDR
47573: LD_EXP 46
47577: PUSH
47578: FOR_TO
47579: IFFALSE 48077
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
47581: LD_ADDR_VAR 0 5
47585: PUSH
47586: LD_EXP 46
47590: PUSH
47591: LD_VAR 0 2
47595: ARRAY
47596: PPUSH
47597: LD_INT 21
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 54
47615: PUSH
47616: EMPTY
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 24
47628: PUSH
47629: LD_INT 700
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PPUSH
47649: CALL_OW 72
47653: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
47654: LD_ADDR_VAR 0 6
47658: PUSH
47659: LD_EXP 46
47663: PUSH
47664: LD_VAR 0 2
47668: ARRAY
47669: PPUSH
47670: LD_INT 21
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 54
47688: PUSH
47689: EMPTY
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 24
47701: PUSH
47702: LD_INT 250
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PPUSH
47722: CALL_OW 72
47726: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47727: LD_ADDR_VAR 0 7
47731: PUSH
47732: LD_VAR 0 5
47736: PUSH
47737: LD_VAR 0 6
47741: DIFF
47742: ST_TO_ADDR
// if not need_heal_1 then
47743: LD_VAR 0 6
47747: NOT
47748: IFFALSE 47781
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
47750: LD_ADDR_EXP 49
47754: PUSH
47755: LD_EXP 49
47759: PPUSH
47760: LD_VAR 0 2
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PPUSH
47772: EMPTY
47773: PPUSH
47774: CALL 3156 0 3
47778: ST_TO_ADDR
47779: GO 47813
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
47781: LD_ADDR_EXP 49
47785: PUSH
47786: LD_EXP 49
47790: PPUSH
47791: LD_VAR 0 2
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PPUSH
47803: LD_VAR 0 6
47807: PPUSH
47808: CALL 3156 0 3
47812: ST_TO_ADDR
// if not need_heal_2 then
47813: LD_VAR 0 7
47817: NOT
47818: IFFALSE 47851
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
47820: LD_ADDR_EXP 49
47824: PUSH
47825: LD_EXP 49
47829: PPUSH
47830: LD_VAR 0 2
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PPUSH
47842: EMPTY
47843: PPUSH
47844: CALL 3156 0 3
47848: ST_TO_ADDR
47849: GO 47883
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47851: LD_ADDR_EXP 49
47855: PUSH
47856: LD_EXP 49
47860: PPUSH
47861: LD_VAR 0 2
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PPUSH
47873: LD_VAR 0 7
47877: PPUSH
47878: CALL 3156 0 3
47882: ST_TO_ADDR
// if need_heal_2 then
47883: LD_VAR 0 7
47887: IFFALSE 48059
// for j in need_heal_2 do
47889: LD_ADDR_VAR 0 3
47893: PUSH
47894: LD_VAR 0 7
47898: PUSH
47899: FOR_IN
47900: IFFALSE 48057
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
47902: LD_ADDR_VAR 0 5
47906: PUSH
47907: LD_EXP 46
47911: PUSH
47912: LD_VAR 0 2
47916: ARRAY
47917: PPUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 30
47923: PUSH
47924: LD_INT 6
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 30
47933: PUSH
47934: LD_INT 7
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 30
47943: PUSH
47944: LD_INT 8
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 30
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 30
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 25
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: PPUSH
47990: CALL_OW 72
47994: ST_TO_ADDR
// if tmp then
47995: LD_VAR 0 5
47999: IFFALSE 48055
// begin k := NearestUnitToUnit ( tmp , j ) ;
48001: LD_ADDR_VAR 0 4
48005: PUSH
48006: LD_VAR 0 5
48010: PPUSH
48011: LD_VAR 0 3
48015: PPUSH
48016: CALL_OW 74
48020: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48021: LD_VAR 0 3
48025: PPUSH
48026: LD_VAR 0 4
48030: PPUSH
48031: CALL_OW 296
48035: PUSH
48036: LD_INT 7
48038: GREATER
48039: IFFALSE 48055
// ComMoveUnit ( j , k ) ;
48041: LD_VAR 0 3
48045: PPUSH
48046: LD_VAR 0 4
48050: PPUSH
48051: CALL_OW 112
// end ; end ;
48055: GO 47899
48057: POP
48058: POP
// if not need_heal_1 and not need_heal_2 then
48059: LD_VAR 0 6
48063: NOT
48064: PUSH
48065: LD_VAR 0 7
48069: NOT
48070: AND
48071: IFFALSE 48075
// continue ;
48073: GO 47578
// end ;
48075: GO 47578
48077: POP
48078: POP
// RaiseSailEvent ( 102 ) ;
48079: LD_INT 102
48081: PPUSH
48082: CALL_OW 427
// end ;
48086: LD_VAR 0 1
48090: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48091: LD_INT 0
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
// if not mc_bases then
48098: LD_EXP 46
48102: NOT
48103: IFFALSE 48107
// exit ;
48105: GO 48480
// for i = 1 to mc_bases do
48107: LD_ADDR_VAR 0 2
48111: PUSH
48112: DOUBLE
48113: LD_INT 1
48115: DEC
48116: ST_TO_ADDR
48117: LD_EXP 46
48121: PUSH
48122: FOR_TO
48123: IFFALSE 48478
// begin if not mc_building_need_repair [ i ] then
48125: LD_EXP 47
48129: PUSH
48130: LD_VAR 0 2
48134: ARRAY
48135: NOT
48136: IFFALSE 48174
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48138: LD_ADDR_EXP 48
48142: PUSH
48143: LD_EXP 48
48147: PPUSH
48148: LD_VAR 0 2
48152: PPUSH
48153: EMPTY
48154: PPUSH
48155: CALL_OW 1
48159: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48160: LD_VAR 0 2
48164: PPUSH
48165: LD_INT 101
48167: PPUSH
48168: CALL 47244 0 2
// continue ;
48172: GO 48122
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48174: LD_ADDR_EXP 52
48178: PUSH
48179: LD_EXP 52
48183: PPUSH
48184: LD_VAR 0 2
48188: PPUSH
48189: EMPTY
48190: PPUSH
48191: CALL_OW 1
48195: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48196: LD_VAR 0 2
48200: PPUSH
48201: LD_INT 103
48203: PPUSH
48204: CALL 47244 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48208: LD_ADDR_VAR 0 5
48212: PUSH
48213: LD_EXP 46
48217: PUSH
48218: LD_VAR 0 2
48222: ARRAY
48223: PPUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 25
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 25
48239: PUSH
48240: LD_INT 16
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: PPUSH
48255: CALL_OW 72
48259: ST_TO_ADDR
// if not tmp then
48260: LD_VAR 0 5
48264: NOT
48265: IFFALSE 48269
// continue ;
48267: GO 48122
// for j in tmp do
48269: LD_ADDR_VAR 0 3
48273: PUSH
48274: LD_VAR 0 5
48278: PUSH
48279: FOR_IN
48280: IFFALSE 48474
// begin if mc_need_heal [ i ] then
48282: LD_EXP 49
48286: PUSH
48287: LD_VAR 0 2
48291: ARRAY
48292: IFFALSE 48340
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48294: LD_VAR 0 3
48298: PUSH
48299: LD_EXP 49
48303: PUSH
48304: LD_VAR 0 2
48308: ARRAY
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: IN
48314: PUSH
48315: LD_VAR 0 3
48319: PUSH
48320: LD_EXP 49
48324: PUSH
48325: LD_VAR 0 2
48329: ARRAY
48330: PUSH
48331: LD_INT 2
48333: ARRAY
48334: IN
48335: OR
48336: IFFALSE 48340
// continue ;
48338: GO 48279
// if IsInUnit ( j ) then
48340: LD_VAR 0 3
48344: PPUSH
48345: CALL_OW 310
48349: IFFALSE 48360
// ComExitBuilding ( j ) ;
48351: LD_VAR 0 3
48355: PPUSH
48356: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48360: LD_VAR 0 3
48364: PUSH
48365: LD_EXP 48
48369: PUSH
48370: LD_VAR 0 2
48374: ARRAY
48375: IN
48376: NOT
48377: IFFALSE 48435
// begin SetTag ( j , 101 ) ;
48379: LD_VAR 0 3
48383: PPUSH
48384: LD_INT 101
48386: PPUSH
48387: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48391: LD_ADDR_EXP 48
48395: PUSH
48396: LD_EXP 48
48400: PPUSH
48401: LD_VAR 0 2
48405: PUSH
48406: LD_EXP 48
48410: PUSH
48411: LD_VAR 0 2
48415: ARRAY
48416: PUSH
48417: LD_INT 1
48419: PLUS
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL 3156 0 3
48434: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48435: LD_INT 3
48437: PPUSH
48438: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48442: LD_VAR 0 3
48446: PPUSH
48447: LD_EXP 47
48451: PUSH
48452: LD_VAR 0 2
48456: ARRAY
48457: PPUSH
48458: LD_VAR 0 3
48462: PPUSH
48463: CALL_OW 74
48467: PPUSH
48468: CALL_OW 130
// end ;
48472: GO 48279
48474: POP
48475: POP
// end ;
48476: GO 48122
48478: POP
48479: POP
// end ;
48480: LD_VAR 0 1
48484: RET
// export function MC_Heal ; var i , j , tmp ; begin
48485: LD_INT 0
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
// if not mc_bases then
48491: LD_EXP 46
48495: NOT
48496: IFFALSE 48500
// exit ;
48498: GO 48865
// for i = 1 to mc_bases do
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: DOUBLE
48506: LD_INT 1
48508: DEC
48509: ST_TO_ADDR
48510: LD_EXP 46
48514: PUSH
48515: FOR_TO
48516: IFFALSE 48863
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48518: LD_EXP 49
48522: PUSH
48523: LD_VAR 0 2
48527: ARRAY
48528: PUSH
48529: LD_INT 1
48531: ARRAY
48532: NOT
48533: PUSH
48534: LD_EXP 49
48538: PUSH
48539: LD_VAR 0 2
48543: ARRAY
48544: PUSH
48545: LD_INT 2
48547: ARRAY
48548: NOT
48549: AND
48550: IFFALSE 48588
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48552: LD_ADDR_EXP 50
48556: PUSH
48557: LD_EXP 50
48561: PPUSH
48562: LD_VAR 0 2
48566: PPUSH
48567: EMPTY
48568: PPUSH
48569: CALL_OW 1
48573: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48574: LD_VAR 0 2
48578: PPUSH
48579: LD_INT 102
48581: PPUSH
48582: CALL 47244 0 2
// continue ;
48586: GO 48515
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48588: LD_ADDR_VAR 0 4
48592: PUSH
48593: LD_EXP 46
48597: PUSH
48598: LD_VAR 0 2
48602: ARRAY
48603: PPUSH
48604: LD_INT 25
48606: PUSH
48607: LD_INT 4
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PPUSH
48614: CALL_OW 72
48618: ST_TO_ADDR
// if not tmp then
48619: LD_VAR 0 4
48623: NOT
48624: IFFALSE 48628
// continue ;
48626: GO 48515
// for j in tmp do
48628: LD_ADDR_VAR 0 3
48632: PUSH
48633: LD_VAR 0 4
48637: PUSH
48638: FOR_IN
48639: IFFALSE 48859
// begin if IsInUnit ( j ) then
48641: LD_VAR 0 3
48645: PPUSH
48646: CALL_OW 310
48650: IFFALSE 48661
// ComExitBuilding ( j ) ;
48652: LD_VAR 0 3
48656: PPUSH
48657: CALL_OW 122
// if not j in mc_healers [ i ] then
48661: LD_VAR 0 3
48665: PUSH
48666: LD_EXP 50
48670: PUSH
48671: LD_VAR 0 2
48675: ARRAY
48676: IN
48677: NOT
48678: IFFALSE 48724
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48680: LD_ADDR_EXP 50
48684: PUSH
48685: LD_EXP 50
48689: PPUSH
48690: LD_VAR 0 2
48694: PUSH
48695: LD_EXP 50
48699: PUSH
48700: LD_VAR 0 2
48704: ARRAY
48705: PUSH
48706: LD_INT 1
48708: PLUS
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PPUSH
48714: LD_VAR 0 3
48718: PPUSH
48719: CALL 3156 0 3
48723: ST_TO_ADDR
// if not GetTag ( j ) then
48724: LD_VAR 0 3
48728: PPUSH
48729: CALL_OW 110
48733: NOT
48734: IFFALSE 48748
// SetTag ( j , 102 ) ;
48736: LD_VAR 0 3
48740: PPUSH
48741: LD_INT 102
48743: PPUSH
48744: CALL_OW 109
// Wait ( 3 ) ;
48748: LD_INT 3
48750: PPUSH
48751: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48755: LD_EXP 49
48759: PUSH
48760: LD_VAR 0 2
48764: ARRAY
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: IFFALSE 48801
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48771: LD_VAR 0 3
48775: PPUSH
48776: LD_EXP 49
48780: PUSH
48781: LD_VAR 0 2
48785: ARRAY
48786: PUSH
48787: LD_INT 1
48789: ARRAY
48790: PUSH
48791: LD_INT 1
48793: ARRAY
48794: PPUSH
48795: CALL_OW 128
48799: GO 48857
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48801: LD_VAR 0 3
48805: PPUSH
48806: CALL_OW 314
48810: NOT
48811: PUSH
48812: LD_EXP 49
48816: PUSH
48817: LD_VAR 0 2
48821: ARRAY
48822: PUSH
48823: LD_INT 2
48825: ARRAY
48826: AND
48827: IFFALSE 48857
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48829: LD_VAR 0 3
48833: PPUSH
48834: LD_EXP 49
48838: PUSH
48839: LD_VAR 0 2
48843: ARRAY
48844: PUSH
48845: LD_INT 2
48847: ARRAY
48848: PUSH
48849: LD_INT 1
48851: ARRAY
48852: PPUSH
48853: CALL_OW 128
// end ;
48857: GO 48638
48859: POP
48860: POP
// end ;
48861: GO 48515
48863: POP
48864: POP
// end ;
48865: LD_VAR 0 1
48869: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
48870: LD_INT 0
48872: PPUSH
48873: PPUSH
48874: PPUSH
48875: PPUSH
// if not mc_bases then
48876: LD_EXP 46
48880: NOT
48881: IFFALSE 48885
// exit ;
48883: GO 49633
// for i = 1 to mc_bases do
48885: LD_ADDR_VAR 0 2
48889: PUSH
48890: DOUBLE
48891: LD_INT 1
48893: DEC
48894: ST_TO_ADDR
48895: LD_EXP 46
48899: PUSH
48900: FOR_TO
48901: IFFALSE 49631
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
48903: LD_EXP 51
48907: PUSH
48908: LD_VAR 0 2
48912: ARRAY
48913: NOT
48914: PUSH
48915: LD_EXP 53
48919: PUSH
48920: LD_VAR 0 2
48924: ARRAY
48925: NOT
48926: AND
48927: IFFALSE 48965
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
48929: LD_ADDR_EXP 52
48933: PUSH
48934: LD_EXP 52
48938: PPUSH
48939: LD_VAR 0 2
48943: PPUSH
48944: EMPTY
48945: PPUSH
48946: CALL_OW 1
48950: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48951: LD_VAR 0 2
48955: PPUSH
48956: LD_INT 103
48958: PPUSH
48959: CALL 47244 0 2
// continue ;
48963: GO 48900
// end ; if mc_construct_list [ i ] then
48965: LD_EXP 53
48969: PUSH
48970: LD_VAR 0 2
48974: ARRAY
48975: IFFALSE 49180
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48977: LD_ADDR_VAR 0 4
48981: PUSH
48982: LD_EXP 46
48986: PUSH
48987: LD_VAR 0 2
48991: ARRAY
48992: PPUSH
48993: LD_INT 25
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PPUSH
49003: CALL_OW 72
49007: PUSH
49008: LD_EXP 48
49012: PUSH
49013: LD_VAR 0 2
49017: ARRAY
49018: DIFF
49019: ST_TO_ADDR
// if not tmp then
49020: LD_VAR 0 4
49024: NOT
49025: IFFALSE 49029
// continue ;
49027: GO 48900
// for j in tmp do
49029: LD_ADDR_VAR 0 3
49033: PUSH
49034: LD_VAR 0 4
49038: PUSH
49039: FOR_IN
49040: IFFALSE 49176
// begin if not mc_builders [ i ] then
49042: LD_EXP 52
49046: PUSH
49047: LD_VAR 0 2
49051: ARRAY
49052: NOT
49053: IFFALSE 49111
// begin SetTag ( j , 103 ) ;
49055: LD_VAR 0 3
49059: PPUSH
49060: LD_INT 103
49062: PPUSH
49063: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49067: LD_ADDR_EXP 52
49071: PUSH
49072: LD_EXP 52
49076: PPUSH
49077: LD_VAR 0 2
49081: PUSH
49082: LD_EXP 52
49086: PUSH
49087: LD_VAR 0 2
49091: ARRAY
49092: PUSH
49093: LD_INT 1
49095: PLUS
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PPUSH
49101: LD_VAR 0 3
49105: PPUSH
49106: CALL 3156 0 3
49110: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49111: LD_VAR 0 3
49115: PPUSH
49116: CALL_OW 310
49120: IFFALSE 49131
// ComExitBuilding ( j ) ;
49122: LD_VAR 0 3
49126: PPUSH
49127: CALL_OW 122
// wait ( 3 ) ;
49131: LD_INT 3
49133: PPUSH
49134: CALL_OW 67
// if not HasTask ( j ) then
49138: LD_VAR 0 3
49142: PPUSH
49143: CALL_OW 314
49147: NOT
49148: IFFALSE 49174
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49150: LD_VAR 0 3
49154: PPUSH
49155: LD_EXP 53
49159: PUSH
49160: LD_VAR 0 2
49164: ARRAY
49165: PUSH
49166: LD_INT 1
49168: ARRAY
49169: PPUSH
49170: CALL 5556 0 2
// end ;
49174: GO 49039
49176: POP
49177: POP
// end else
49178: GO 49629
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49180: LD_EXP 51
49184: PUSH
49185: LD_VAR 0 2
49189: ARRAY
49190: PUSH
49191: LD_EXP 46
49195: PUSH
49196: LD_VAR 0 2
49200: ARRAY
49201: PPUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 30
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 30
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: PPUSH
49230: CALL_OW 72
49234: AND
49235: IFFALSE 49629
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49237: LD_EXP 46
49241: PUSH
49242: LD_VAR 0 2
49246: ARRAY
49247: PPUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 30
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 30
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: PPUSH
49276: CALL_OW 72
49280: PUSH
49281: LD_INT 1
49283: ARRAY
49284: PPUSH
49285: LD_EXP 51
49289: PUSH
49290: LD_VAR 0 2
49294: ARRAY
49295: PUSH
49296: LD_INT 1
49298: ARRAY
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PPUSH
49304: LD_EXP 51
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PUSH
49319: LD_INT 2
49321: ARRAY
49322: PPUSH
49323: LD_EXP 51
49327: PUSH
49328: LD_VAR 0 2
49332: ARRAY
49333: PUSH
49334: LD_INT 1
49336: ARRAY
49337: PUSH
49338: LD_INT 3
49340: ARRAY
49341: PPUSH
49342: LD_EXP 51
49346: PUSH
49347: LD_VAR 0 2
49351: ARRAY
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PUSH
49357: LD_INT 4
49359: ARRAY
49360: PPUSH
49361: CALL 8712 0 5
49365: IFFALSE 49629
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49367: LD_ADDR_VAR 0 4
49371: PUSH
49372: LD_EXP 46
49376: PUSH
49377: LD_VAR 0 2
49381: ARRAY
49382: PPUSH
49383: LD_INT 25
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PPUSH
49393: CALL_OW 72
49397: PUSH
49398: LD_EXP 48
49402: PUSH
49403: LD_VAR 0 2
49407: ARRAY
49408: DIFF
49409: ST_TO_ADDR
// if not tmp then
49410: LD_VAR 0 4
49414: NOT
49415: IFFALSE 49419
// continue ;
49417: GO 48900
// for j in tmp do
49419: LD_ADDR_VAR 0 3
49423: PUSH
49424: LD_VAR 0 4
49428: PUSH
49429: FOR_IN
49430: IFFALSE 49627
// begin if not mc_builders [ i ] then
49432: LD_EXP 52
49436: PUSH
49437: LD_VAR 0 2
49441: ARRAY
49442: NOT
49443: IFFALSE 49501
// begin SetTag ( j , 103 ) ;
49445: LD_VAR 0 3
49449: PPUSH
49450: LD_INT 103
49452: PPUSH
49453: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49457: LD_ADDR_EXP 52
49461: PUSH
49462: LD_EXP 52
49466: PPUSH
49467: LD_VAR 0 2
49471: PUSH
49472: LD_EXP 52
49476: PUSH
49477: LD_VAR 0 2
49481: ARRAY
49482: PUSH
49483: LD_INT 1
49485: PLUS
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PPUSH
49491: LD_VAR 0 3
49495: PPUSH
49496: CALL 3156 0 3
49500: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49501: LD_VAR 0 3
49505: PPUSH
49506: CALL_OW 310
49510: IFFALSE 49521
// ComExitBuilding ( j ) ;
49512: LD_VAR 0 3
49516: PPUSH
49517: CALL_OW 122
// wait ( 3 ) ;
49521: LD_INT 3
49523: PPUSH
49524: CALL_OW 67
// if not HasTask ( j ) then
49528: LD_VAR 0 3
49532: PPUSH
49533: CALL_OW 314
49537: NOT
49538: IFFALSE 49625
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49540: LD_VAR 0 3
49544: PPUSH
49545: LD_EXP 51
49549: PUSH
49550: LD_VAR 0 2
49554: ARRAY
49555: PUSH
49556: LD_INT 1
49558: ARRAY
49559: PUSH
49560: LD_INT 1
49562: ARRAY
49563: PPUSH
49564: LD_EXP 51
49568: PUSH
49569: LD_VAR 0 2
49573: ARRAY
49574: PUSH
49575: LD_INT 1
49577: ARRAY
49578: PUSH
49579: LD_INT 2
49581: ARRAY
49582: PPUSH
49583: LD_EXP 51
49587: PUSH
49588: LD_VAR 0 2
49592: ARRAY
49593: PUSH
49594: LD_INT 1
49596: ARRAY
49597: PUSH
49598: LD_INT 3
49600: ARRAY
49601: PPUSH
49602: LD_EXP 51
49606: PUSH
49607: LD_VAR 0 2
49611: ARRAY
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: PUSH
49617: LD_INT 4
49619: ARRAY
49620: PPUSH
49621: CALL_OW 145
// end ;
49625: GO 49429
49627: POP
49628: POP
// end ; end ;
49629: GO 48900
49631: POP
49632: POP
// end ;
49633: LD_VAR 0 1
49637: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
49638: LD_INT 0
49640: PPUSH
49641: PPUSH
49642: PPUSH
49643: PPUSH
49644: PPUSH
49645: PPUSH
49646: PPUSH
// if not mc_bases then
49647: LD_EXP 46
49651: NOT
49652: IFFALSE 49656
// exit ;
49654: GO 49952
// for i = 1 to mc_bases do
49656: LD_ADDR_VAR 0 2
49660: PUSH
49661: DOUBLE
49662: LD_INT 1
49664: DEC
49665: ST_TO_ADDR
49666: LD_EXP 46
49670: PUSH
49671: FOR_TO
49672: IFFALSE 49950
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
49674: LD_EXP 54
49678: PUSH
49679: LD_VAR 0 2
49683: ARRAY
49684: NOT
49685: PUSH
49686: LD_EXP 46
49690: PUSH
49691: LD_VAR 0 2
49695: ARRAY
49696: PPUSH
49697: LD_INT 30
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 72
49711: NOT
49712: OR
49713: IFFALSE 49717
// continue ;
49715: GO 49671
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
49717: LD_EXP 54
49721: PUSH
49722: LD_VAR 0 2
49726: ARRAY
49727: PUSH
49728: LD_INT 1
49730: ARRAY
49731: PPUSH
49732: CALL_OW 269
49736: IFFALSE 49802
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
49738: LD_ADDR_VAR 0 4
49742: PUSH
49743: LD_EXP 54
49747: PUSH
49748: LD_VAR 0 2
49752: ARRAY
49753: PPUSH
49754: LD_INT 1
49756: PPUSH
49757: CALL_OW 3
49761: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
49762: LD_ADDR_EXP 54
49766: PUSH
49767: LD_EXP 54
49771: PPUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: LD_VAR 0 4
49781: PPUSH
49782: CALL_OW 1
49786: ST_TO_ADDR
// if not mc_turret_list [ i ] then
49787: LD_EXP 54
49791: PUSH
49792: LD_VAR 0 2
49796: ARRAY
49797: NOT
49798: IFFALSE 49802
// continue ;
49800: GO 49671
// end ; busy := false ;
49802: LD_ADDR_VAR 0 6
49806: PUSH
49807: LD_INT 0
49809: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
49810: LD_ADDR_VAR 0 4
49814: PUSH
49815: LD_EXP 46
49819: PUSH
49820: LD_VAR 0 2
49824: ARRAY
49825: PPUSH
49826: LD_INT 30
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PPUSH
49836: CALL_OW 72
49840: ST_TO_ADDR
// for j in tmp do
49841: LD_ADDR_VAR 0 3
49845: PUSH
49846: LD_VAR 0 4
49850: PUSH
49851: FOR_IN
49852: IFFALSE 49880
// if not BuildingStatus ( j ) = bs_idle then
49854: LD_VAR 0 3
49858: PPUSH
49859: CALL_OW 461
49863: PUSH
49864: LD_INT 2
49866: EQUAL
49867: NOT
49868: IFFALSE 49878
// busy := true ;
49870: LD_ADDR_VAR 0 6
49874: PUSH
49875: LD_INT 1
49877: ST_TO_ADDR
49878: GO 49851
49880: POP
49881: POP
// if busy then
49882: LD_VAR 0 6
49886: IFFALSE 49890
// continue ;
49888: GO 49671
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
49890: LD_ADDR_VAR 0 7
49894: PUSH
49895: LD_EXP 54
49899: PUSH
49900: LD_VAR 0 2
49904: ARRAY
49905: PUSH
49906: LD_INT 1
49908: ARRAY
49909: PPUSH
49910: CALL 7117 0 1
49914: ST_TO_ADDR
// if not weapon then
49915: LD_VAR 0 7
49919: NOT
49920: IFFALSE 49924
// continue ;
49922: GO 49671
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
49924: LD_EXP 54
49928: PUSH
49929: LD_VAR 0 2
49933: ARRAY
49934: PUSH
49935: LD_INT 1
49937: ARRAY
49938: PPUSH
49939: LD_VAR 0 7
49943: PPUSH
49944: CALL_OW 148
// end ;
49948: GO 49671
49950: POP
49951: POP
// end ;
49952: LD_VAR 0 1
49956: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
49957: LD_INT 0
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
49963: PPUSH
49964: PPUSH
49965: PPUSH
// if not mc_bases then
49966: LD_EXP 46
49970: NOT
49971: IFFALSE 49975
// exit ;
49973: GO 50745
// for i = 1 to mc_bases do
49975: LD_ADDR_VAR 0 2
49979: PUSH
49980: DOUBLE
49981: LD_INT 1
49983: DEC
49984: ST_TO_ADDR
49985: LD_EXP 46
49989: PUSH
49990: FOR_TO
49991: IFFALSE 50743
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
49993: LD_ADDR_VAR 0 7
49997: PUSH
49998: LD_EXP 46
50002: PUSH
50003: LD_VAR 0 2
50007: ARRAY
50008: PPUSH
50009: LD_INT 24
50011: PUSH
50012: LD_INT 375
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 30
50024: PUSH
50025: LD_INT 32
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 30
50034: PUSH
50035: LD_INT 31
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 58
50049: PUSH
50050: EMPTY
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: PPUSH
50058: CALL_OW 72
50062: ST_TO_ADDR
// if not x then
50063: LD_VAR 0 7
50067: NOT
50068: IFFALSE 50072
// continue ;
50070: GO 49990
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50072: LD_ADDR_EXP 55
50076: PUSH
50077: LD_EXP 55
50081: PPUSH
50082: LD_VAR 0 2
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PPUSH
50094: LD_VAR 0 7
50098: PPUSH
50099: CALL 3156 0 3
50103: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50104: LD_EXP 55
50108: PUSH
50109: LD_VAR 0 2
50113: ARRAY
50114: NOT
50115: PUSH
50116: LD_EXP 55
50120: PUSH
50121: LD_VAR 0 2
50125: ARRAY
50126: PUSH
50127: LD_INT 1
50129: ARRAY
50130: NOT
50131: OR
50132: IFFALSE 50136
// continue ;
50134: GO 49990
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50136: LD_EXP 55
50140: PUSH
50141: LD_VAR 0 2
50145: ARRAY
50146: PUSH
50147: LD_INT 1
50149: ARRAY
50150: PUSH
50151: LD_INT 1
50153: ARRAY
50154: PPUSH
50155: CALL_OW 313
50159: PUSH
50160: LD_INT 0
50162: EQUAL
50163: IFFALSE 50741
// if not mc_empty_turret_list [ i ] [ 2 ] then
50165: LD_EXP 55
50169: PUSH
50170: LD_VAR 0 2
50174: ARRAY
50175: PUSH
50176: LD_INT 2
50178: ARRAY
50179: NOT
50180: IFFALSE 50439
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50182: LD_ADDR_VAR 0 6
50186: PUSH
50187: LD_EXP 46
50191: PUSH
50192: LD_VAR 0 2
50196: ARRAY
50197: PUSH
50198: LD_EXP 62
50202: PUSH
50203: LD_VAR 0 2
50207: ARRAY
50208: DIFF
50209: PPUSH
50210: LD_INT 25
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 54
50225: PUSH
50226: EMPTY
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PPUSH
50237: CALL_OW 72
50241: ST_TO_ADDR
// if tmp2 then
50242: LD_VAR 0 6
50246: IFFALSE 50288
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50248: LD_ADDR_EXP 55
50252: PUSH
50253: LD_EXP 55
50257: PPUSH
50258: LD_VAR 0 2
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PPUSH
50270: LD_VAR 0 6
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: CALL 3156 0 3
50283: ST_TO_ADDR
// break ;
50284: GO 50743
// end else
50286: GO 50437
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50288: LD_ADDR_VAR 0 5
50292: PUSH
50293: LD_EXP 46
50297: PUSH
50298: LD_VAR 0 2
50302: ARRAY
50303: PPUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 30
50309: PUSH
50310: LD_INT 4
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 30
50319: PUSH
50320: LD_INT 5
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: PPUSH
50332: CALL_OW 72
50336: ST_TO_ADDR
// if not tmp then
50337: LD_VAR 0 5
50341: NOT
50342: IFFALSE 50346
// continue ;
50344: GO 49990
// for j in tmp do
50346: LD_ADDR_VAR 0 3
50350: PUSH
50351: LD_VAR 0 5
50355: PUSH
50356: FOR_IN
50357: IFFALSE 50435
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50359: LD_ADDR_VAR 0 4
50363: PUSH
50364: LD_VAR 0 3
50368: PPUSH
50369: CALL_OW 313
50373: PPUSH
50374: LD_INT 25
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PPUSH
50384: CALL_OW 72
50388: ST_TO_ADDR
// if t then
50389: LD_VAR 0 4
50393: IFFALSE 50433
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50395: LD_ADDR_EXP 55
50399: PUSH
50400: LD_EXP 55
50404: PPUSH
50405: LD_VAR 0 2
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PPUSH
50417: LD_VAR 0 4
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: CALL 3156 0 3
50430: ST_TO_ADDR
// break ;
50431: GO 50435
// end ; end ;
50433: GO 50356
50435: POP
50436: POP
// end ; end else
50437: GO 50741
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50439: LD_EXP 55
50443: PUSH
50444: LD_VAR 0 2
50448: ARRAY
50449: PUSH
50450: LD_INT 2
50452: ARRAY
50453: PUSH
50454: LD_INT 1
50456: ARRAY
50457: PPUSH
50458: CALL_OW 301
50462: IFFALSE 50495
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50464: LD_ADDR_EXP 55
50468: PUSH
50469: LD_EXP 55
50473: PPUSH
50474: LD_VAR 0 2
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PPUSH
50486: EMPTY
50487: PPUSH
50488: CALL 3156 0 3
50492: ST_TO_ADDR
// break ;
50493: GO 50743
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
50495: LD_EXP 55
50499: PUSH
50500: LD_VAR 0 2
50504: ARRAY
50505: PUSH
50506: LD_INT 2
50508: ARRAY
50509: PUSH
50510: LD_INT 1
50512: ARRAY
50513: PPUSH
50514: CALL_OW 314
50518: NOT
50519: PUSH
50520: LD_EXP 55
50524: PUSH
50525: LD_VAR 0 2
50529: ARRAY
50530: PUSH
50531: LD_INT 2
50533: ARRAY
50534: PUSH
50535: LD_INT 1
50537: ARRAY
50538: PUSH
50539: LD_EXP 55
50543: PUSH
50544: LD_VAR 0 2
50548: ARRAY
50549: PUSH
50550: LD_INT 1
50552: ARRAY
50553: PUSH
50554: LD_INT 1
50556: ARRAY
50557: PPUSH
50558: CALL_OW 313
50562: IN
50563: NOT
50564: AND
50565: IFFALSE 50741
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50567: LD_EXP 55
50571: PUSH
50572: LD_VAR 0 2
50576: ARRAY
50577: PUSH
50578: LD_INT 2
50580: ARRAY
50581: PUSH
50582: LD_INT 1
50584: ARRAY
50585: PPUSH
50586: CALL_OW 310
50590: IFFALSE 50615
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50592: LD_EXP 55
50596: PUSH
50597: LD_VAR 0 2
50601: ARRAY
50602: PUSH
50603: LD_INT 2
50605: ARRAY
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PPUSH
50611: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
50615: LD_EXP 55
50619: PUSH
50620: LD_VAR 0 2
50624: ARRAY
50625: PUSH
50626: LD_INT 2
50628: ARRAY
50629: PUSH
50630: LD_INT 1
50632: ARRAY
50633: PPUSH
50634: LD_EXP 55
50638: PUSH
50639: LD_VAR 0 2
50643: ARRAY
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: PUSH
50649: LD_INT 1
50651: ARRAY
50652: PPUSH
50653: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
50657: LD_INT 35
50659: PPUSH
50660: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
50664: LD_EXP 55
50668: PUSH
50669: LD_VAR 0 2
50673: ARRAY
50674: PUSH
50675: LD_INT 2
50677: ARRAY
50678: NOT
50679: IFFALSE 50683
// break ;
50681: GO 50708
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50683: LD_EXP 55
50687: PUSH
50688: LD_VAR 0 2
50692: ARRAY
50693: PUSH
50694: LD_INT 2
50696: ARRAY
50697: PUSH
50698: LD_INT 1
50700: ARRAY
50701: PPUSH
50702: CALL_OW 310
50706: IFFALSE 50657
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50708: LD_ADDR_EXP 55
50712: PUSH
50713: LD_EXP 55
50717: PPUSH
50718: LD_VAR 0 2
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PPUSH
50730: EMPTY
50731: PPUSH
50732: CALL 3156 0 3
50736: ST_TO_ADDR
// exit ;
50737: POP
50738: POP
50739: GO 50745
// end ; end ; end ;
50741: GO 49990
50743: POP
50744: POP
// end ;
50745: LD_VAR 0 1
50749: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
50750: LD_INT 0
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
// if not mc_bases then
50758: LD_EXP 46
50762: NOT
50763: IFFALSE 50767
// exit ;
50765: GO 51553
// for i = 1 to mc_bases do
50767: LD_ADDR_VAR 0 2
50771: PUSH
50772: DOUBLE
50773: LD_INT 1
50775: DEC
50776: ST_TO_ADDR
50777: LD_EXP 46
50781: PUSH
50782: FOR_TO
50783: IFFALSE 51551
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
50785: LD_EXP 56
50789: PUSH
50790: LD_VAR 0 2
50794: ARRAY
50795: NOT
50796: PUSH
50797: LD_EXP 56
50801: PUSH
50802: LD_VAR 0 2
50806: ARRAY
50807: PUSH
50808: LD_EXP 57
50812: PUSH
50813: LD_VAR 0 2
50817: ARRAY
50818: EQUAL
50819: OR
50820: IFFALSE 50824
// continue ;
50822: GO 50782
// if mc_miners [ i ] then
50824: LD_EXP 57
50828: PUSH
50829: LD_VAR 0 2
50833: ARRAY
50834: IFFALSE 51238
// for j = mc_miners [ i ] downto 1 do
50836: LD_ADDR_VAR 0 3
50840: PUSH
50841: DOUBLE
50842: LD_EXP 57
50846: PUSH
50847: LD_VAR 0 2
50851: ARRAY
50852: INC
50853: ST_TO_ADDR
50854: LD_INT 1
50856: PUSH
50857: FOR_DOWNTO
50858: IFFALSE 51236
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
50860: LD_EXP 57
50864: PUSH
50865: LD_VAR 0 2
50869: ARRAY
50870: PUSH
50871: LD_VAR 0 3
50875: ARRAY
50876: PPUSH
50877: CALL_OW 301
50881: IFFALSE 50944
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
50883: LD_ADDR_VAR 0 5
50887: PUSH
50888: LD_EXP 57
50892: PUSH
50893: LD_VAR 0 2
50897: ARRAY
50898: PUSH
50899: LD_EXP 57
50903: PUSH
50904: LD_VAR 0 2
50908: ARRAY
50909: PUSH
50910: LD_VAR 0 3
50914: ARRAY
50915: DIFF
50916: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
50917: LD_ADDR_EXP 57
50921: PUSH
50922: LD_EXP 57
50926: PPUSH
50927: LD_VAR 0 2
50931: PPUSH
50932: LD_VAR 0 5
50936: PPUSH
50937: CALL_OW 1
50941: ST_TO_ADDR
// continue ;
50942: GO 50857
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
50944: LD_EXP 57
50948: PUSH
50949: LD_VAR 0 2
50953: ARRAY
50954: PUSH
50955: LD_VAR 0 3
50959: ARRAY
50960: PPUSH
50961: CALL_OW 257
50965: PUSH
50966: LD_INT 1
50968: EQUAL
50969: PUSH
50970: LD_EXP 57
50974: PUSH
50975: LD_VAR 0 2
50979: ARRAY
50980: PUSH
50981: LD_VAR 0 3
50985: ARRAY
50986: PPUSH
50987: CALL_OW 459
50991: NOT
50992: AND
50993: PUSH
50994: LD_EXP 57
50998: PUSH
50999: LD_VAR 0 2
51003: ARRAY
51004: PUSH
51005: LD_VAR 0 3
51009: ARRAY
51010: PPUSH
51011: CALL_OW 255
51015: PPUSH
51016: LD_EXP 56
51020: PUSH
51021: LD_VAR 0 2
51025: ARRAY
51026: PUSH
51027: LD_VAR 0 3
51031: ARRAY
51032: PUSH
51033: LD_INT 1
51035: ARRAY
51036: PPUSH
51037: LD_EXP 56
51041: PUSH
51042: LD_VAR 0 2
51046: ARRAY
51047: PUSH
51048: LD_VAR 0 3
51052: ARRAY
51053: PUSH
51054: LD_INT 2
51056: ARRAY
51057: PPUSH
51058: LD_INT 12
51060: PPUSH
51061: CALL 3650 0 4
51065: PUSH
51066: LD_INT 4
51068: ARRAY
51069: PUSH
51070: LD_INT 0
51072: EQUAL
51073: AND
51074: IFFALSE 51234
// begin k := rand ( 1 , mc_mines [ i ] ) ;
51076: LD_ADDR_VAR 0 4
51080: PUSH
51081: LD_INT 1
51083: PPUSH
51084: LD_EXP 56
51088: PUSH
51089: LD_VAR 0 2
51093: ARRAY
51094: PPUSH
51095: CALL_OW 12
51099: ST_TO_ADDR
// if IsInUnit ( mc_miners [ i ] [ j ] ) then
51100: LD_EXP 57
51104: PUSH
51105: LD_VAR 0 2
51109: ARRAY
51110: PUSH
51111: LD_VAR 0 3
51115: ARRAY
51116: PPUSH
51117: CALL_OW 310
51121: IFFALSE 51144
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51123: LD_EXP 57
51127: PUSH
51128: LD_VAR 0 2
51132: ARRAY
51133: PUSH
51134: LD_VAR 0 3
51138: ARRAY
51139: PPUSH
51140: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51144: LD_EXP 57
51148: PUSH
51149: LD_VAR 0 2
51153: ARRAY
51154: PUSH
51155: LD_VAR 0 3
51159: ARRAY
51160: PPUSH
51161: CALL_OW 314
51165: NOT
51166: IFFALSE 51234
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51168: LD_EXP 57
51172: PUSH
51173: LD_VAR 0 2
51177: ARRAY
51178: PUSH
51179: LD_VAR 0 3
51183: ARRAY
51184: PPUSH
51185: LD_EXP 56
51189: PUSH
51190: LD_VAR 0 2
51194: ARRAY
51195: PUSH
51196: LD_VAR 0 4
51200: ARRAY
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: PPUSH
51206: LD_EXP 56
51210: PUSH
51211: LD_VAR 0 2
51215: ARRAY
51216: PUSH
51217: LD_VAR 0 4
51221: ARRAY
51222: PUSH
51223: LD_INT 2
51225: ARRAY
51226: PPUSH
51227: LD_INT 0
51229: PPUSH
51230: CALL_OW 193
// end ; end ;
51234: GO 50857
51236: POP
51237: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51238: LD_ADDR_VAR 0 5
51242: PUSH
51243: LD_EXP 46
51247: PUSH
51248: LD_VAR 0 2
51252: ARRAY
51253: PPUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 30
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 30
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 30
51279: PUSH
51280: LD_INT 32
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: PPUSH
51293: CALL_OW 72
51297: ST_TO_ADDR
// if not tmp then
51298: LD_VAR 0 5
51302: NOT
51303: IFFALSE 51307
// continue ;
51305: GO 50782
// list := [ ] ;
51307: LD_ADDR_VAR 0 6
51311: PUSH
51312: EMPTY
51313: ST_TO_ADDR
// for j in tmp do
51314: LD_ADDR_VAR 0 3
51318: PUSH
51319: LD_VAR 0 5
51323: PUSH
51324: FOR_IN
51325: IFFALSE 51394
// begin for k in UnitsInside ( j ) do
51327: LD_ADDR_VAR 0 4
51331: PUSH
51332: LD_VAR 0 3
51336: PPUSH
51337: CALL_OW 313
51341: PUSH
51342: FOR_IN
51343: IFFALSE 51390
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51345: LD_VAR 0 4
51349: PPUSH
51350: CALL_OW 257
51354: PUSH
51355: LD_INT 1
51357: EQUAL
51358: PUSH
51359: LD_VAR 0 4
51363: PPUSH
51364: CALL_OW 459
51368: NOT
51369: AND
51370: IFFALSE 51388
// list := list ^ k ;
51372: LD_ADDR_VAR 0 6
51376: PUSH
51377: LD_VAR 0 6
51381: PUSH
51382: LD_VAR 0 4
51386: ADD
51387: ST_TO_ADDR
51388: GO 51342
51390: POP
51391: POP
// end ;
51392: GO 51324
51394: POP
51395: POP
// list := list diff mc_miners [ i ] ;
51396: LD_ADDR_VAR 0 6
51400: PUSH
51401: LD_VAR 0 6
51405: PUSH
51406: LD_EXP 57
51410: PUSH
51411: LD_VAR 0 2
51415: ARRAY
51416: DIFF
51417: ST_TO_ADDR
// if not list then
51418: LD_VAR 0 6
51422: NOT
51423: IFFALSE 51427
// continue ;
51425: GO 50782
// k := mc_mines [ i ] - mc_miners [ i ] ;
51427: LD_ADDR_VAR 0 4
51431: PUSH
51432: LD_EXP 56
51436: PUSH
51437: LD_VAR 0 2
51441: ARRAY
51442: PUSH
51443: LD_EXP 57
51447: PUSH
51448: LD_VAR 0 2
51452: ARRAY
51453: MINUS
51454: ST_TO_ADDR
// if k > list then
51455: LD_VAR 0 4
51459: PUSH
51460: LD_VAR 0 6
51464: GREATER
51465: IFFALSE 51477
// k := list ;
51467: LD_ADDR_VAR 0 4
51471: PUSH
51472: LD_VAR 0 6
51476: ST_TO_ADDR
// for j = 1 to k do
51477: LD_ADDR_VAR 0 3
51481: PUSH
51482: DOUBLE
51483: LD_INT 1
51485: DEC
51486: ST_TO_ADDR
51487: LD_VAR 0 4
51491: PUSH
51492: FOR_TO
51493: IFFALSE 51547
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51495: LD_ADDR_EXP 57
51499: PUSH
51500: LD_EXP 57
51504: PPUSH
51505: LD_VAR 0 2
51509: PUSH
51510: LD_EXP 57
51514: PUSH
51515: LD_VAR 0 2
51519: ARRAY
51520: PUSH
51521: LD_INT 1
51523: PLUS
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PPUSH
51529: LD_VAR 0 6
51533: PUSH
51534: LD_VAR 0 3
51538: ARRAY
51539: PPUSH
51540: CALL 3156 0 3
51544: ST_TO_ADDR
51545: GO 51492
51547: POP
51548: POP
// end ;
51549: GO 50782
51551: POP
51552: POP
// end ;
51553: LD_VAR 0 1
51557: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
51558: LD_INT 0
51560: PPUSH
51561: PPUSH
51562: PPUSH
51563: PPUSH
51564: PPUSH
// if not mc_bases then
51565: LD_EXP 46
51569: NOT
51570: IFFALSE 51574
// exit ;
51572: GO 52350
// for i = 1 to mc_bases do
51574: LD_ADDR_VAR 0 2
51578: PUSH
51579: DOUBLE
51580: LD_INT 1
51582: DEC
51583: ST_TO_ADDR
51584: LD_EXP 46
51588: PUSH
51589: FOR_TO
51590: IFFALSE 52348
// begin if not mc_bases [ i ] then
51592: LD_EXP 46
51596: PUSH
51597: LD_VAR 0 2
51601: ARRAY
51602: NOT
51603: IFFALSE 51607
// continue ;
51605: GO 51589
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51607: LD_EXP 59
51611: PUSH
51612: LD_VAR 0 2
51616: ARRAY
51617: NOT
51618: PUSH
51619: LD_EXP 60
51623: PUSH
51624: LD_VAR 0 2
51628: ARRAY
51629: AND
51630: IFFALSE 51668
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51632: LD_ADDR_EXP 60
51636: PUSH
51637: LD_EXP 60
51641: PPUSH
51642: LD_VAR 0 2
51646: PPUSH
51647: EMPTY
51648: PPUSH
51649: CALL_OW 1
51653: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51654: LD_VAR 0 2
51658: PPUSH
51659: LD_INT 107
51661: PPUSH
51662: CALL 47244 0 2
// continue ;
51666: GO 51589
// end ; target := [ ] ;
51668: LD_ADDR_VAR 0 5
51672: PUSH
51673: EMPTY
51674: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: DOUBLE
51681: LD_EXP 59
51685: PUSH
51686: LD_VAR 0 2
51690: ARRAY
51691: INC
51692: ST_TO_ADDR
51693: LD_INT 1
51695: PUSH
51696: FOR_DOWNTO
51697: IFFALSE 51957
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51699: LD_EXP 59
51703: PUSH
51704: LD_VAR 0 2
51708: ARRAY
51709: PUSH
51710: LD_VAR 0 3
51714: ARRAY
51715: PUSH
51716: LD_INT 2
51718: ARRAY
51719: PPUSH
51720: LD_EXP 59
51724: PUSH
51725: LD_VAR 0 2
51729: ARRAY
51730: PUSH
51731: LD_VAR 0 3
51735: ARRAY
51736: PUSH
51737: LD_INT 3
51739: ARRAY
51740: PPUSH
51741: CALL_OW 488
51745: PUSH
51746: LD_EXP 59
51750: PUSH
51751: LD_VAR 0 2
51755: ARRAY
51756: PUSH
51757: LD_VAR 0 3
51761: ARRAY
51762: PUSH
51763: LD_INT 2
51765: ARRAY
51766: PPUSH
51767: LD_EXP 59
51771: PUSH
51772: LD_VAR 0 2
51776: ARRAY
51777: PUSH
51778: LD_VAR 0 3
51782: ARRAY
51783: PUSH
51784: LD_INT 3
51786: ARRAY
51787: PPUSH
51788: CALL_OW 284
51792: PUSH
51793: LD_INT 0
51795: EQUAL
51796: AND
51797: IFFALSE 51852
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51799: LD_ADDR_VAR 0 4
51803: PUSH
51804: LD_EXP 59
51808: PUSH
51809: LD_VAR 0 2
51813: ARRAY
51814: PPUSH
51815: LD_VAR 0 3
51819: PPUSH
51820: CALL_OW 3
51824: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
51825: LD_ADDR_EXP 59
51829: PUSH
51830: LD_EXP 59
51834: PPUSH
51835: LD_VAR 0 2
51839: PPUSH
51840: LD_VAR 0 4
51844: PPUSH
51845: CALL_OW 1
51849: ST_TO_ADDR
// continue ;
51850: GO 51696
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
51852: LD_EXP 46
51856: PUSH
51857: LD_VAR 0 2
51861: ARRAY
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PPUSH
51867: CALL_OW 255
51871: PPUSH
51872: LD_EXP 59
51876: PUSH
51877: LD_VAR 0 2
51881: ARRAY
51882: PUSH
51883: LD_VAR 0 3
51887: ARRAY
51888: PUSH
51889: LD_INT 2
51891: ARRAY
51892: PPUSH
51893: LD_EXP 59
51897: PUSH
51898: LD_VAR 0 2
51902: ARRAY
51903: PUSH
51904: LD_VAR 0 3
51908: ARRAY
51909: PUSH
51910: LD_INT 3
51912: ARRAY
51913: PPUSH
51914: LD_INT 20
51916: PPUSH
51917: CALL 3650 0 4
51921: PUSH
51922: LD_INT 4
51924: ARRAY
51925: PUSH
51926: LD_INT 0
51928: EQUAL
51929: IFFALSE 51955
// begin target := mc_crates [ i ] [ j ] ;
51931: LD_ADDR_VAR 0 5
51935: PUSH
51936: LD_EXP 59
51940: PUSH
51941: LD_VAR 0 2
51945: ARRAY
51946: PUSH
51947: LD_VAR 0 3
51951: ARRAY
51952: ST_TO_ADDR
// break ;
51953: GO 51957
// end ; end ;
51955: GO 51696
51957: POP
51958: POP
// if not target then
51959: LD_VAR 0 5
51963: NOT
51964: IFFALSE 51968
// continue ;
51966: GO 51589
// if mc_crates_collector [ i ] < 5 then
51968: LD_EXP 60
51972: PUSH
51973: LD_VAR 0 2
51977: ARRAY
51978: PUSH
51979: LD_INT 5
51981: LESS
51982: IFFALSE 52162
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
51984: LD_ADDR_VAR 0 4
51988: PUSH
51989: LD_EXP 46
51993: PUSH
51994: LD_VAR 0 2
51998: ARRAY
51999: PPUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 25
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 25
52015: PUSH
52016: LD_INT 16
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 24
52030: PUSH
52031: LD_INT 750
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PPUSH
52042: CALL_OW 72
52046: ST_TO_ADDR
// if not tmp then
52047: LD_VAR 0 4
52051: NOT
52052: IFFALSE 52056
// continue ;
52054: GO 51589
// for j in tmp do
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_VAR 0 4
52065: PUSH
52066: FOR_IN
52067: IFFALSE 52160
// if GetTag ( j ) = 0 then
52069: LD_VAR 0 3
52073: PPUSH
52074: CALL_OW 110
52078: PUSH
52079: LD_INT 0
52081: EQUAL
52082: IFFALSE 52158
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52084: LD_ADDR_EXP 60
52088: PUSH
52089: LD_EXP 60
52093: PPUSH
52094: LD_VAR 0 2
52098: PUSH
52099: LD_EXP 60
52103: PUSH
52104: LD_VAR 0 2
52108: ARRAY
52109: PUSH
52110: LD_INT 1
52112: PLUS
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PPUSH
52118: LD_VAR 0 3
52122: PPUSH
52123: CALL 3156 0 3
52127: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52128: LD_VAR 0 3
52132: PPUSH
52133: LD_INT 107
52135: PPUSH
52136: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52140: LD_EXP 60
52144: PUSH
52145: LD_VAR 0 2
52149: ARRAY
52150: PUSH
52151: LD_INT 5
52153: GREATER
52154: IFFALSE 52158
// break ;
52156: GO 52160
// end ;
52158: GO 52066
52160: POP
52161: POP
// end ; if mc_crates_collector [ i ] and target then
52162: LD_EXP 60
52166: PUSH
52167: LD_VAR 0 2
52171: ARRAY
52172: PUSH
52173: LD_VAR 0 5
52177: AND
52178: IFFALSE 52346
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52180: LD_EXP 60
52184: PUSH
52185: LD_VAR 0 2
52189: ARRAY
52190: PUSH
52191: LD_VAR 0 5
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: LESS
52200: IFFALSE 52220
// tmp := mc_crates_collector [ i ] else
52202: LD_ADDR_VAR 0 4
52206: PUSH
52207: LD_EXP 60
52211: PUSH
52212: LD_VAR 0 2
52216: ARRAY
52217: ST_TO_ADDR
52218: GO 52234
// tmp := target [ 1 ] ;
52220: LD_ADDR_VAR 0 4
52224: PUSH
52225: LD_VAR 0 5
52229: PUSH
52230: LD_INT 1
52232: ARRAY
52233: ST_TO_ADDR
// for j = 1 to tmp do
52234: LD_ADDR_VAR 0 3
52238: PUSH
52239: DOUBLE
52240: LD_INT 1
52242: DEC
52243: ST_TO_ADDR
52244: LD_VAR 0 4
52248: PUSH
52249: FOR_TO
52250: IFFALSE 52344
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52252: LD_EXP 60
52256: PUSH
52257: LD_VAR 0 2
52261: ARRAY
52262: PUSH
52263: LD_VAR 0 3
52267: ARRAY
52268: PPUSH
52269: CALL_OW 310
52273: IFFALSE 52296
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52275: LD_EXP 60
52279: PUSH
52280: LD_VAR 0 2
52284: ARRAY
52285: PUSH
52286: LD_VAR 0 3
52290: ARRAY
52291: PPUSH
52292: CALL_OW 122
// wait ( 3 ) ;
52296: LD_INT 3
52298: PPUSH
52299: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
52303: LD_EXP 60
52307: PUSH
52308: LD_VAR 0 2
52312: ARRAY
52313: PUSH
52314: LD_VAR 0 3
52318: ARRAY
52319: PPUSH
52320: LD_VAR 0 5
52324: PUSH
52325: LD_INT 2
52327: ARRAY
52328: PPUSH
52329: LD_VAR 0 5
52333: PUSH
52334: LD_INT 3
52336: ARRAY
52337: PPUSH
52338: CALL_OW 117
// end ;
52342: GO 52249
52344: POP
52345: POP
// end ; end ;
52346: GO 51589
52348: POP
52349: POP
// end ;
52350: LD_VAR 0 1
52354: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
52355: LD_INT 0
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
// if not mc_bases then
52361: LD_EXP 46
52365: NOT
52366: IFFALSE 52370
// exit ;
52368: GO 52519
// for i = 1 to mc_bases do
52370: LD_ADDR_VAR 0 2
52374: PUSH
52375: DOUBLE
52376: LD_INT 1
52378: DEC
52379: ST_TO_ADDR
52380: LD_EXP 46
52384: PUSH
52385: FOR_TO
52386: IFFALSE 52517
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
52388: LD_ADDR_VAR 0 4
52392: PUSH
52393: LD_EXP 61
52397: PUSH
52398: LD_VAR 0 2
52402: ARRAY
52403: PPUSH
52404: LD_INT 33
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PPUSH
52414: CALL_OW 72
52418: ST_TO_ADDR
// if tmp then
52419: LD_VAR 0 4
52423: IFFALSE 52515
// for j in tmp do
52425: LD_ADDR_VAR 0 3
52429: PUSH
52430: LD_VAR 0 4
52434: PUSH
52435: FOR_IN
52436: IFFALSE 52513
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
52438: LD_VAR 0 3
52442: PPUSH
52443: CALL_OW 312
52447: NOT
52448: PUSH
52449: LD_VAR 0 3
52453: PPUSH
52454: CALL_OW 256
52458: PUSH
52459: LD_INT 250
52461: GREATEREQUAL
52462: AND
52463: IFFALSE 52476
// Connect ( j ) else
52465: LD_VAR 0 3
52469: PPUSH
52470: CALL 5638 0 1
52474: GO 52511
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
52476: LD_VAR 0 3
52480: PPUSH
52481: CALL_OW 256
52485: PUSH
52486: LD_INT 250
52488: LESS
52489: PUSH
52490: LD_VAR 0 3
52494: PPUSH
52495: CALL_OW 312
52499: AND
52500: IFFALSE 52511
// ComUnlink ( j ) ;
52502: LD_VAR 0 3
52506: PPUSH
52507: CALL_OW 136
52511: GO 52435
52513: POP
52514: POP
// end ;
52515: GO 52385
52517: POP
52518: POP
// end ;
52519: LD_VAR 0 1
52523: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
52524: LD_INT 0
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
// if not mc_bases then
52531: LD_EXP 46
52535: NOT
52536: IFFALSE 52540
// exit ;
52538: GO 52907
// for i = 1 to mc_bases do
52540: LD_ADDR_VAR 0 2
52544: PUSH
52545: DOUBLE
52546: LD_INT 1
52548: DEC
52549: ST_TO_ADDR
52550: LD_EXP 46
52554: PUSH
52555: FOR_TO
52556: IFFALSE 52905
// begin if not mc_produce [ i ] then
52558: LD_EXP 63
52562: PUSH
52563: LD_VAR 0 2
52567: ARRAY
52568: NOT
52569: IFFALSE 52573
// continue ;
52571: GO 52555
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52573: LD_ADDR_VAR 0 5
52577: PUSH
52578: LD_EXP 46
52582: PUSH
52583: LD_VAR 0 2
52587: ARRAY
52588: PPUSH
52589: LD_INT 30
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PPUSH
52599: CALL_OW 72
52603: ST_TO_ADDR
// if not fac then
52604: LD_VAR 0 5
52608: NOT
52609: IFFALSE 52613
// continue ;
52611: GO 52555
// for j in fac do
52613: LD_ADDR_VAR 0 3
52617: PUSH
52618: LD_VAR 0 5
52622: PUSH
52623: FOR_IN
52624: IFFALSE 52901
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
52626: LD_VAR 0 3
52630: PPUSH
52631: CALL_OW 461
52635: PUSH
52636: LD_INT 2
52638: NONEQUAL
52639: PUSH
52640: LD_VAR 0 3
52644: PPUSH
52645: LD_INT 20
52647: PPUSH
52648: CALL 5329 0 2
52652: PUSH
52653: LD_INT 4
52655: ARRAY
52656: OR
52657: PUSH
52658: LD_VAR 0 3
52662: PPUSH
52663: CALL_OW 313
52667: PUSH
52668: LD_INT 0
52670: EQUAL
52671: OR
52672: IFFALSE 52676
// continue ;
52674: GO 52623
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
52676: LD_VAR 0 3
52680: PPUSH
52681: LD_EXP 63
52685: PUSH
52686: LD_VAR 0 2
52690: ARRAY
52691: PUSH
52692: LD_INT 1
52694: ARRAY
52695: PUSH
52696: LD_INT 1
52698: ARRAY
52699: PPUSH
52700: LD_EXP 63
52704: PUSH
52705: LD_VAR 0 2
52709: ARRAY
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: PPUSH
52719: LD_EXP 63
52723: PUSH
52724: LD_VAR 0 2
52728: ARRAY
52729: PUSH
52730: LD_INT 1
52732: ARRAY
52733: PUSH
52734: LD_INT 3
52736: ARRAY
52737: PPUSH
52738: LD_EXP 63
52742: PUSH
52743: LD_VAR 0 2
52747: ARRAY
52748: PUSH
52749: LD_INT 1
52751: ARRAY
52752: PUSH
52753: LD_INT 4
52755: ARRAY
52756: PPUSH
52757: CALL_OW 448
52761: IFFALSE 52899
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
52763: LD_VAR 0 3
52767: PPUSH
52768: LD_EXP 63
52772: PUSH
52773: LD_VAR 0 2
52777: ARRAY
52778: PUSH
52779: LD_INT 1
52781: ARRAY
52782: PUSH
52783: LD_INT 1
52785: ARRAY
52786: PPUSH
52787: LD_EXP 63
52791: PUSH
52792: LD_VAR 0 2
52796: ARRAY
52797: PUSH
52798: LD_INT 1
52800: ARRAY
52801: PUSH
52802: LD_INT 2
52804: ARRAY
52805: PPUSH
52806: LD_EXP 63
52810: PUSH
52811: LD_VAR 0 2
52815: ARRAY
52816: PUSH
52817: LD_INT 1
52819: ARRAY
52820: PUSH
52821: LD_INT 3
52823: ARRAY
52824: PPUSH
52825: LD_EXP 63
52829: PUSH
52830: LD_VAR 0 2
52834: ARRAY
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PUSH
52840: LD_INT 4
52842: ARRAY
52843: PPUSH
52844: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
52848: LD_ADDR_VAR 0 4
52852: PUSH
52853: LD_EXP 63
52857: PUSH
52858: LD_VAR 0 2
52862: ARRAY
52863: PPUSH
52864: LD_INT 1
52866: PPUSH
52867: CALL_OW 3
52871: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
52872: LD_ADDR_EXP 63
52876: PUSH
52877: LD_EXP 63
52881: PPUSH
52882: LD_VAR 0 2
52886: PPUSH
52887: LD_VAR 0 4
52891: PPUSH
52892: CALL_OW 1
52896: ST_TO_ADDR
// break ;
52897: GO 52901
// end ; end ;
52899: GO 52623
52901: POP
52902: POP
// end ;
52903: GO 52555
52905: POP
52906: POP
// end ;
52907: LD_VAR 0 1
52911: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
52912: LD_INT 0
52914: PPUSH
52915: PPUSH
52916: PPUSH
// if not mc_bases then
52917: LD_EXP 46
52921: NOT
52922: IFFALSE 52926
// exit ;
52924: GO 53015
// for i = 1 to mc_bases do
52926: LD_ADDR_VAR 0 2
52930: PUSH
52931: DOUBLE
52932: LD_INT 1
52934: DEC
52935: ST_TO_ADDR
52936: LD_EXP 46
52940: PUSH
52941: FOR_TO
52942: IFFALSE 53013
// begin if mc_attack [ i ] then
52944: LD_EXP 62
52948: PUSH
52949: LD_VAR 0 2
52953: ARRAY
52954: IFFALSE 53011
// begin tmp := mc_attack [ i ] [ 1 ] ;
52956: LD_ADDR_VAR 0 3
52960: PUSH
52961: LD_EXP 62
52965: PUSH
52966: LD_VAR 0 2
52970: ARRAY
52971: PUSH
52972: LD_INT 1
52974: ARRAY
52975: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52976: LD_ADDR_EXP 62
52980: PUSH
52981: LD_EXP 62
52985: PPUSH
52986: LD_VAR 0 2
52990: PPUSH
52991: EMPTY
52992: PPUSH
52993: CALL_OW 1
52997: ST_TO_ADDR
// Attack ( tmp ) ;
52998: LD_VAR 0 3
53002: PPUSH
53003: CALL 29341 0 1
// exit ;
53007: POP
53008: POP
53009: GO 53015
// end ; end ;
53011: GO 52941
53013: POP
53014: POP
// end ;
53015: LD_VAR 0 1
53019: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53020: LD_INT 0
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
// if not mc_bases then
53029: LD_EXP 46
53033: NOT
53034: IFFALSE 53038
// exit ;
53036: GO 53455
// for i = 1 to mc_bases do
53038: LD_ADDR_VAR 0 2
53042: PUSH
53043: DOUBLE
53044: LD_INT 1
53046: DEC
53047: ST_TO_ADDR
53048: LD_EXP 46
53052: PUSH
53053: FOR_TO
53054: IFFALSE 53453
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53056: LD_ADDR_EXP 65
53060: PUSH
53061: LD_EXP 65
53065: PPUSH
53066: LD_VAR 0 2
53070: PPUSH
53071: LD_EXP 46
53075: PUSH
53076: LD_VAR 0 2
53080: ARRAY
53081: PPUSH
53082: CALL 33125 0 1
53086: PPUSH
53087: CALL_OW 1
53091: ST_TO_ADDR
// if not mc_scan [ i ] then
53092: LD_EXP 65
53096: PUSH
53097: LD_VAR 0 2
53101: ARRAY
53102: NOT
53103: IFFALSE 53214
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53105: LD_ADDR_VAR 0 4
53109: PUSH
53110: LD_EXP 46
53114: PUSH
53115: LD_VAR 0 2
53119: ARRAY
53120: PPUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 25
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 25
53136: PUSH
53137: LD_INT 8
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 25
53146: PUSH
53147: LD_INT 9
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: PPUSH
53160: CALL_OW 72
53164: ST_TO_ADDR
// if not tmp then
53165: LD_VAR 0 4
53169: NOT
53170: IFFALSE 53174
// continue ;
53172: GO 53053
// for j in tmp do
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_VAR 0 4
53183: PUSH
53184: FOR_IN
53185: IFFALSE 53212
// if IsInUnit ( j ) then
53187: LD_VAR 0 3
53191: PPUSH
53192: CALL_OW 310
53196: IFFALSE 53210
// SetClass ( j , 1 ) ;
53198: LD_VAR 0 3
53202: PPUSH
53203: LD_INT 1
53205: PPUSH
53206: CALL_OW 336
53210: GO 53184
53212: POP
53213: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53214: LD_EXP 65
53218: PUSH
53219: LD_VAR 0 2
53223: ARRAY
53224: PUSH
53225: LD_EXP 64
53229: PUSH
53230: LD_VAR 0 2
53234: ARRAY
53235: AND
53236: IFFALSE 53451
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53238: LD_ADDR_VAR 0 7
53242: PUSH
53243: LD_EXP 64
53247: PUSH
53248: LD_INT 1
53250: ARRAY
53251: PPUSH
53252: CALL 33232 0 1
53256: ST_TO_ADDR
// if class then
53257: LD_VAR 0 7
53261: IFFALSE 53384
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53263: LD_ADDR_VAR 0 4
53267: PUSH
53268: LD_EXP 46
53272: PUSH
53273: LD_VAR 0 2
53277: ARRAY
53278: PPUSH
53279: LD_INT 30
53281: PUSH
53282: LD_INT 5
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PPUSH
53289: CALL_OW 72
53293: ST_TO_ADDR
// if tmp then
53294: LD_VAR 0 4
53298: IFFALSE 53384
// begin for j in tmp do
53300: LD_ADDR_VAR 0 3
53304: PUSH
53305: LD_VAR 0 4
53309: PUSH
53310: FOR_IN
53311: IFFALSE 53382
// begin t := UnitsInside ( j ) ;
53313: LD_ADDR_VAR 0 5
53317: PUSH
53318: LD_VAR 0 3
53322: PPUSH
53323: CALL_OW 313
53327: ST_TO_ADDR
// if not t then
53328: LD_VAR 0 5
53332: NOT
53333: IFFALSE 53337
// continue ;
53335: GO 53310
// for x in t do
53337: LD_ADDR_VAR 0 6
53341: PUSH
53342: LD_VAR 0 5
53346: PUSH
53347: FOR_IN
53348: IFFALSE 53378
// if not MineOfUnit ( x ) then
53350: LD_VAR 0 6
53354: PPUSH
53355: CALL_OW 459
53359: NOT
53360: IFFALSE 53376
// SetClass ( x , class ) ;
53362: LD_VAR 0 6
53366: PPUSH
53367: LD_VAR 0 7
53371: PPUSH
53372: CALL_OW 336
53376: GO 53347
53378: POP
53379: POP
// end ;
53380: GO 53310
53382: POP
53383: POP
// end ; end ; tmp := mc_defender [ i ] ;
53384: LD_ADDR_VAR 0 4
53388: PUSH
53389: LD_EXP 64
53393: PUSH
53394: LD_VAR 0 2
53398: ARRAY
53399: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53400: LD_ADDR_EXP 64
53404: PUSH
53405: LD_EXP 64
53409: PPUSH
53410: LD_VAR 0 2
53414: PPUSH
53415: EMPTY
53416: PPUSH
53417: CALL_OW 1
53421: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
53422: LD_VAR 0 2
53426: PPUSH
53427: LD_VAR 0 4
53431: PPUSH
53432: LD_EXP 65
53436: PUSH
53437: LD_VAR 0 2
53441: ARRAY
53442: PPUSH
53443: CALL 32578 0 3
// exit ;
53447: POP
53448: POP
53449: GO 53455
// end ; end ;
53451: GO 53053
53453: POP
53454: POP
// end ;
53455: LD_VAR 0 1
53459: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
53460: LD_INT 0
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
53466: LD_VAR 0 1
53470: NOT
53471: PUSH
53472: LD_VAR 0 2
53476: NOT
53477: OR
53478: PUSH
53479: LD_VAR 0 3
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 4
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: LD_INT 8
53501: PUSH
53502: LD_INT 9
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: IN
53514: NOT
53515: OR
53516: PUSH
53517: LD_VAR 0 2
53521: PUSH
53522: LD_EXP 64
53526: PUSH
53527: LD_VAR 0 5
53531: ARRAY
53532: IN
53533: OR
53534: IFFALSE 53538
// exit ;
53536: GO 53950
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53538: LD_ADDR_VAR 0 1
53542: PUSH
53543: LD_VAR 0 1
53547: PPUSH
53548: LD_INT 21
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 24
53560: PUSH
53561: LD_INT 250
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PPUSH
53572: CALL_OW 72
53576: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
53577: LD_VAR 0 3
53581: PUSH
53582: LD_INT 5
53584: PUSH
53585: LD_INT 8
53587: PUSH
53588: LD_INT 9
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: IN
53596: IFFALSE 53606
// class := 1 ;
53598: LD_ADDR_VAR 0 3
53602: PUSH
53603: LD_INT 1
53605: ST_TO_ADDR
// case class of 1 :
53606: LD_VAR 0 3
53610: PUSH
53611: LD_INT 1
53613: DOUBLE
53614: EQUAL
53615: IFTRUE 53619
53617: GO 53665
53619: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
53620: LD_ADDR_VAR 0 7
53624: PUSH
53625: LD_VAR 0 1
53629: PPUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 30
53635: PUSH
53636: LD_INT 4
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 30
53645: PUSH
53646: LD_INT 5
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: PPUSH
53658: CALL_OW 72
53662: ST_TO_ADDR
53663: GO 53839
53665: LD_INT 2
53667: DOUBLE
53668: EQUAL
53669: IFTRUE 53673
53671: GO 53719
53673: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53674: LD_ADDR_VAR 0 7
53678: PUSH
53679: LD_VAR 0 1
53683: PPUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 30
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 30
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: PPUSH
53712: CALL_OW 72
53716: ST_TO_ADDR
53717: GO 53839
53719: LD_INT 3
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53727
53725: GO 53773
53727: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53728: LD_ADDR_VAR 0 7
53732: PUSH
53733: LD_VAR 0 1
53737: PPUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 30
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 30
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: PPUSH
53766: CALL_OW 72
53770: ST_TO_ADDR
53771: GO 53839
53773: LD_INT 4
53775: DOUBLE
53776: EQUAL
53777: IFTRUE 53781
53779: GO 53838
53781: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
53782: LD_ADDR_VAR 0 7
53786: PUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 30
53797: PUSH
53798: LD_INT 6
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 30
53807: PUSH
53808: LD_INT 7
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 30
53817: PUSH
53818: LD_INT 8
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: PPUSH
53831: CALL_OW 72
53835: ST_TO_ADDR
53836: GO 53839
53838: POP
// if not tmp then
53839: LD_VAR 0 7
53843: NOT
53844: IFFALSE 53848
// exit ;
53846: GO 53950
// for i in tmp do
53848: LD_ADDR_VAR 0 5
53852: PUSH
53853: LD_VAR 0 7
53857: PUSH
53858: FOR_IN
53859: IFFALSE 53928
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
53861: LD_VAR 0 5
53865: PPUSH
53866: CALL_OW 313
53870: PUSH
53871: LD_INT 6
53873: LESS
53874: PUSH
53875: LD_VAR 0 5
53879: PPUSH
53880: CALL_OW 266
53884: PUSH
53885: LD_INT 31
53887: PUSH
53888: LD_INT 32
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: IN
53895: NOT
53896: AND
53897: PUSH
53898: LD_VAR 0 5
53902: PPUSH
53903: CALL_OW 313
53907: PUSH
53908: LD_INT 0
53910: EQUAL
53911: OR
53912: IFFALSE 53926
// begin j := i ;
53914: LD_ADDR_VAR 0 6
53918: PUSH
53919: LD_VAR 0 5
53923: ST_TO_ADDR
// break ;
53924: GO 53928
// end ; end ;
53926: GO 53858
53928: POP
53929: POP
// if j then
53930: LD_VAR 0 6
53934: IFFALSE 53950
// ComEnterUnit ( unit , j ) ;
53936: LD_VAR 0 2
53940: PPUSH
53941: LD_VAR 0 6
53945: PPUSH
53946: CALL_OW 120
// end ;
53950: LD_VAR 0 4
53954: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
53955: LD_INT 0
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
// if not mc_bases then
53961: LD_EXP 46
53965: NOT
53966: IFFALSE 53970
// exit ;
53968: GO 54199
// for i = 1 to mc_bases do
53970: LD_ADDR_VAR 0 2
53974: PUSH
53975: DOUBLE
53976: LD_INT 1
53978: DEC
53979: ST_TO_ADDR
53980: LD_EXP 46
53984: PUSH
53985: FOR_TO
53986: IFFALSE 54197
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
53988: LD_ADDR_VAR 0 4
53992: PUSH
53993: LD_EXP 46
53997: PUSH
53998: LD_VAR 0 2
54002: ARRAY
54003: PPUSH
54004: LD_INT 21
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PPUSH
54014: CALL_OW 72
54018: ST_TO_ADDR
// if not tmp then
54019: LD_VAR 0 4
54023: NOT
54024: IFFALSE 54030
// exit ;
54026: POP
54027: POP
54028: GO 54199
// for j in tmp do
54030: LD_ADDR_VAR 0 3
54034: PUSH
54035: LD_VAR 0 4
54039: PUSH
54040: FOR_IN
54041: IFFALSE 54193
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54043: LD_VAR 0 3
54047: PPUSH
54048: CALL_OW 257
54052: PUSH
54053: LD_INT 3
54055: EQUAL
54056: PUSH
54057: LD_EXP 65
54061: PUSH
54062: LD_VAR 0 2
54066: ARRAY
54067: AND
54068: IFFALSE 54072
// continue ;
54070: GO 54040
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54072: LD_VAR 0 3
54076: PPUSH
54077: CALL_OW 110
54081: NOT
54082: PUSH
54083: LD_VAR 0 3
54087: PPUSH
54088: CALL_OW 314
54092: NOT
54093: AND
54094: PUSH
54095: LD_VAR 0 3
54099: PPUSH
54100: CALL_OW 310
54104: NOT
54105: AND
54106: PUSH
54107: LD_EXP 49
54111: PUSH
54112: LD_VAR 0 2
54116: ARRAY
54117: PUSH
54118: LD_INT 1
54120: ARRAY
54121: NOT
54122: AND
54123: PUSH
54124: LD_EXP 49
54128: PUSH
54129: LD_VAR 0 2
54133: ARRAY
54134: PUSH
54135: LD_INT 2
54137: ARRAY
54138: NOT
54139: AND
54140: PUSH
54141: LD_VAR 0 3
54145: PUSH
54146: LD_EXP 55
54150: PUSH
54151: LD_VAR 0 2
54155: ARRAY
54156: IN
54157: NOT
54158: AND
54159: IFFALSE 54191
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54161: LD_EXP 46
54165: PUSH
54166: LD_VAR 0 2
54170: ARRAY
54171: PPUSH
54172: LD_VAR 0 3
54176: PPUSH
54177: LD_VAR 0 3
54181: PPUSH
54182: CALL_OW 257
54186: PPUSH
54187: CALL 53460 0 3
// end ;
54191: GO 54040
54193: POP
54194: POP
// end ;
54195: GO 53985
54197: POP
54198: POP
// end ;
54199: LD_VAR 0 1
54203: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
54204: LD_INT 0
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
// if not mc_bases [ base ] then
54213: LD_EXP 46
54217: PUSH
54218: LD_VAR 0 1
54222: ARRAY
54223: NOT
54224: IFFALSE 54228
// exit ;
54226: GO 54496
// tmp := [ ] ;
54228: LD_ADDR_VAR 0 7
54232: PUSH
54233: EMPTY
54234: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54235: LD_ADDR_VAR 0 8
54239: PUSH
54240: LD_VAR 0 3
54244: PPUSH
54245: LD_INT 0
54247: PPUSH
54248: CALL_OW 517
54252: ST_TO_ADDR
// if not list then
54253: LD_VAR 0 8
54257: NOT
54258: IFFALSE 54262
// exit ;
54260: GO 54496
// for i = 1 to amount do
54262: LD_ADDR_VAR 0 5
54266: PUSH
54267: DOUBLE
54268: LD_INT 1
54270: DEC
54271: ST_TO_ADDR
54272: LD_VAR 0 2
54276: PUSH
54277: FOR_TO
54278: IFFALSE 54444
// begin c := rand ( 1 , list [ 1 ] - i ) ;
54280: LD_ADDR_VAR 0 6
54284: PUSH
54285: LD_INT 1
54287: PPUSH
54288: LD_VAR 0 8
54292: PUSH
54293: LD_INT 1
54295: ARRAY
54296: PUSH
54297: LD_VAR 0 5
54301: MINUS
54302: PPUSH
54303: CALL_OW 12
54307: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
54308: LD_ADDR_VAR 0 7
54312: PUSH
54313: LD_VAR 0 7
54317: PPUSH
54318: LD_VAR 0 5
54322: PPUSH
54323: LD_VAR 0 8
54327: PUSH
54328: LD_INT 1
54330: ARRAY
54331: PUSH
54332: LD_VAR 0 6
54336: ARRAY
54337: PUSH
54338: LD_VAR 0 8
54342: PUSH
54343: LD_INT 2
54345: ARRAY
54346: PUSH
54347: LD_VAR 0 6
54351: ARRAY
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PPUSH
54357: CALL_OW 1
54361: ST_TO_ADDR
// for j = 1 to 2 do
54362: LD_ADDR_VAR 0 10
54366: PUSH
54367: DOUBLE
54368: LD_INT 1
54370: DEC
54371: ST_TO_ADDR
54372: LD_INT 2
54374: PUSH
54375: FOR_TO
54376: IFFALSE 54431
// begin x := Delete ( list [ j ] , c ) ;
54378: LD_ADDR_VAR 0 9
54382: PUSH
54383: LD_VAR 0 8
54387: PUSH
54388: LD_VAR 0 10
54392: ARRAY
54393: PPUSH
54394: LD_VAR 0 6
54398: PPUSH
54399: CALL_OW 3
54403: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
54404: LD_ADDR_VAR 0 8
54408: PUSH
54409: LD_VAR 0 8
54413: PPUSH
54414: LD_VAR 0 10
54418: PPUSH
54419: LD_VAR 0 9
54423: PPUSH
54424: CALL_OW 1
54428: ST_TO_ADDR
// end ;
54429: GO 54375
54431: POP
54432: POP
// if not list then
54433: LD_VAR 0 8
54437: NOT
54438: IFFALSE 54442
// break ;
54440: GO 54444
// end ;
54442: GO 54277
54444: POP
54445: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54446: LD_ADDR_EXP 56
54450: PUSH
54451: LD_EXP 56
54455: PPUSH
54456: LD_VAR 0 1
54460: PPUSH
54461: LD_VAR 0 7
54465: PPUSH
54466: CALL_OW 1
54470: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
54471: LD_ADDR_EXP 58
54475: PUSH
54476: LD_EXP 58
54480: PPUSH
54481: LD_VAR 0 1
54485: PPUSH
54486: LD_VAR 0 3
54490: PPUSH
54491: CALL_OW 1
54495: ST_TO_ADDR
// end ;
54496: LD_VAR 0 4
54500: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
54501: LD_INT 0
54503: PPUSH
// if not mc_bases [ base ] then
54504: LD_EXP 46
54508: PUSH
54509: LD_VAR 0 1
54513: ARRAY
54514: NOT
54515: IFFALSE 54519
// exit ;
54517: GO 54544
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
54519: LD_ADDR_EXP 63
54523: PUSH
54524: LD_EXP 63
54528: PPUSH
54529: LD_VAR 0 1
54533: PPUSH
54534: LD_VAR 0 2
54538: PPUSH
54539: CALL_OW 1
54543: ST_TO_ADDR
// end ;
54544: LD_VAR 0 3
54548: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
54549: LD_INT 0
54551: PPUSH
// if not mc_bases [ base ] then
54552: LD_EXP 46
54556: PUSH
54557: LD_VAR 0 1
54561: ARRAY
54562: NOT
54563: IFFALSE 54567
// exit ;
54565: GO 54592
// mc_defender := Replace ( mc_defender , base , deflist ) ;
54567: LD_ADDR_EXP 64
54571: PUSH
54572: LD_EXP 64
54576: PPUSH
54577: LD_VAR 0 1
54581: PPUSH
54582: LD_VAR 0 2
54586: PPUSH
54587: CALL_OW 1
54591: ST_TO_ADDR
// end ;
54592: LD_VAR 0 3
54596: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
54597: LD_INT 0
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
// if not mc_bases [ base ] then
54603: LD_EXP 46
54607: PUSH
54608: LD_VAR 0 1
54612: ARRAY
54613: NOT
54614: IFFALSE 54618
// exit ;
54616: GO 54683
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
54618: LD_ADDR_EXP 62
54622: PUSH
54623: LD_EXP 62
54627: PPUSH
54628: LD_VAR 0 1
54632: PUSH
54633: LD_EXP 62
54637: PUSH
54638: LD_VAR 0 1
54642: ARRAY
54643: PUSH
54644: LD_INT 1
54646: PLUS
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PPUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_VAR 0 2
54661: PUSH
54662: LD_VAR 0 3
54666: PUSH
54667: LD_VAR 0 4
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: PPUSH
54678: CALL 3156 0 3
54682: ST_TO_ADDR
// end ;
54683: LD_VAR 0 5
54687: RET
// export function MC_GetMinesField ( base ) ; begin
54688: LD_INT 0
54690: PPUSH
// result := mc_mines [ base ] ;
54691: LD_ADDR_VAR 0 2
54695: PUSH
54696: LD_EXP 56
54700: PUSH
54701: LD_VAR 0 1
54705: ARRAY
54706: ST_TO_ADDR
// end ;
54707: LD_VAR 0 2
54711: RET
// export function MC_GetProduceList ( base ) ; begin
54712: LD_INT 0
54714: PPUSH
// result := mc_produce [ base ] ;
54715: LD_ADDR_VAR 0 2
54719: PUSH
54720: LD_EXP 63
54724: PUSH
54725: LD_VAR 0 1
54729: ARRAY
54730: ST_TO_ADDR
// end ; end_of_file
54731: LD_VAR 0 2
54735: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
54736: LD_VAR 0 1
54740: PPUSH
54741: CALL_OW 255
54745: PUSH
54746: LD_INT 1
54748: EQUAL
54749: IFFALSE 54759
// artifact_get := true ;
54751: LD_ADDR_EXP 12
54755: PUSH
54756: LD_INT 1
54758: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
54759: LD_VAR 0 1
54763: PPUSH
54764: CALL_OW 255
54768: PUSH
54769: LD_INT 2
54771: EQUAL
54772: IFFALSE 54790
// begin artifact_get := false ;
54774: LD_ADDR_EXP 12
54778: PUSH
54779: LD_INT 0
54781: ST_TO_ADDR
// artifact_stolen := true ;
54782: LD_ADDR_EXP 11
54786: PUSH
54787: LD_INT 1
54789: ST_TO_ADDR
// end ; artifact_oncargo := true ;
54790: LD_ADDR_EXP 13
54794: PUSH
54795: LD_INT 1
54797: ST_TO_ADDR
// end ;
54798: PPOPN 2
54800: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
54801: LD_ADDR_EXP 13
54805: PUSH
54806: LD_INT 0
54808: ST_TO_ADDR
// end ;
54809: PPOPN 2
54811: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
54812: LD_INT 0
54814: PPUSH
54815: PPUSH
54816: PPUSH
54817: PPUSH
54818: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
54819: LD_VAR 0 1
54823: PUSH
54824: LD_INT 22
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 21
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 25
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 25
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 25
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 25
54879: PUSH
54880: LD_INT 4
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 25
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 25
54899: PUSH
54900: LD_INT 8
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: PPUSH
54921: CALL_OW 69
54925: IN
54926: IFFALSE 54942
// loses_counter := loses_counter + 1 ;
54928: LD_ADDR_EXP 16
54932: PUSH
54933: LD_EXP 16
54937: PUSH
54938: LD_INT 1
54940: PLUS
54941: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
54942: LD_VAR 0 1
54946: PUSH
54947: LD_INT 21
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PPUSH
54957: CALL_OW 69
54961: IN
54962: IFFALSE 55478
// begin if not mc_bases then
54964: LD_EXP 46
54968: NOT
54969: IFFALSE 54973
// exit ;
54971: GO 55478
// pos := mc_build_list [ i ] + 1 ;
54973: LD_ADDR_VAR 0 5
54977: PUSH
54978: LD_EXP 51
54982: PUSH
54983: LD_VAR 0 2
54987: ARRAY
54988: PUSH
54989: LD_INT 1
54991: PLUS
54992: ST_TO_ADDR
// btype := GetBType ( un ) ;
54993: LD_ADDR_VAR 0 4
54997: PUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 266
55007: ST_TO_ADDR
// if btype = b_warehouse then
55008: LD_VAR 0 4
55012: PUSH
55013: LD_INT 1
55015: EQUAL
55016: IFFALSE 55034
// begin btype := b_depot ;
55018: LD_ADDR_VAR 0 4
55022: PUSH
55023: LD_INT 0
55025: ST_TO_ADDR
// pos := 1 ;
55026: LD_ADDR_VAR 0 5
55030: PUSH
55031: LD_INT 1
55033: ST_TO_ADDR
// end ; if btype = b_factory then
55034: LD_VAR 0 4
55038: PUSH
55039: LD_INT 3
55041: EQUAL
55042: IFFALSE 55060
// begin btype := b_workshop ;
55044: LD_ADDR_VAR 0 4
55048: PUSH
55049: LD_INT 2
55051: ST_TO_ADDR
// pos := 1 ;
55052: LD_ADDR_VAR 0 5
55056: PUSH
55057: LD_INT 1
55059: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55060: LD_VAR 0 4
55064: PUSH
55065: LD_INT 7
55067: PUSH
55068: LD_INT 8
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: IN
55075: IFFALSE 55085
// btype := b_lab ;
55077: LD_ADDR_VAR 0 4
55081: PUSH
55082: LD_INT 6
55084: ST_TO_ADDR
// for i = 1 to mc_bases do
55085: LD_ADDR_VAR 0 2
55089: PUSH
55090: DOUBLE
55091: LD_INT 1
55093: DEC
55094: ST_TO_ADDR
55095: LD_EXP 46
55099: PUSH
55100: FOR_TO
55101: IFFALSE 55476
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55103: LD_VAR 0 1
55107: PUSH
55108: LD_EXP 46
55112: PUSH
55113: LD_VAR 0 2
55117: ARRAY
55118: IN
55119: PUSH
55120: LD_VAR 0 1
55124: PUSH
55125: LD_EXP 53
55129: PUSH
55130: LD_VAR 0 2
55134: ARRAY
55135: IN
55136: OR
55137: IFFALSE 55474
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55139: LD_ADDR_EXP 51
55143: PUSH
55144: LD_EXP 51
55148: PPUSH
55149: LD_VAR 0 2
55153: PUSH
55154: LD_EXP 51
55158: PUSH
55159: LD_VAR 0 2
55163: ARRAY
55164: PUSH
55165: LD_INT 1
55167: PLUS
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PPUSH
55173: LD_VAR 0 4
55177: PUSH
55178: LD_VAR 0 1
55182: PPUSH
55183: CALL_OW 250
55187: PUSH
55188: LD_VAR 0 1
55192: PPUSH
55193: CALL_OW 251
55197: PUSH
55198: LD_VAR 0 1
55202: PPUSH
55203: CALL_OW 254
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: PPUSH
55214: CALL 3156 0 3
55218: ST_TO_ADDR
// if pos = 1 then
55219: LD_VAR 0 5
55223: PUSH
55224: LD_INT 1
55226: EQUAL
55227: IFFALSE 55342
// begin tmp := mc_build_list [ i ] ;
55229: LD_ADDR_VAR 0 6
55233: PUSH
55234: LD_EXP 51
55238: PUSH
55239: LD_VAR 0 2
55243: ARRAY
55244: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55245: LD_VAR 0 6
55249: PPUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 30
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 30
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: LIST
55277: PPUSH
55278: CALL_OW 72
55282: IFFALSE 55292
// pos := 2 ;
55284: LD_ADDR_VAR 0 5
55288: PUSH
55289: LD_INT 2
55291: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55292: LD_ADDR_VAR 0 6
55296: PUSH
55297: LD_VAR 0 6
55301: PPUSH
55302: LD_VAR 0 5
55306: PPUSH
55307: LD_VAR 0 6
55311: PPUSH
55312: CALL 3047 0 3
55316: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55317: LD_ADDR_EXP 51
55321: PUSH
55322: LD_EXP 51
55326: PPUSH
55327: LD_VAR 0 2
55331: PPUSH
55332: LD_VAR 0 6
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55342: LD_VAR 0 1
55346: PUSH
55347: LD_EXP 46
55351: PUSH
55352: LD_VAR 0 2
55356: ARRAY
55357: IN
55358: IFFALSE 55407
// begin tmp := mc_bases [ i ] diff un ;
55360: LD_ADDR_VAR 0 6
55364: PUSH
55365: LD_EXP 46
55369: PUSH
55370: LD_VAR 0 2
55374: ARRAY
55375: PUSH
55376: LD_VAR 0 1
55380: DIFF
55381: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55382: LD_ADDR_EXP 46
55386: PUSH
55387: LD_EXP 46
55391: PPUSH
55392: LD_VAR 0 2
55396: PPUSH
55397: LD_VAR 0 6
55401: PPUSH
55402: CALL_OW 1
55406: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55407: LD_VAR 0 1
55411: PUSH
55412: LD_EXP 53
55416: PUSH
55417: LD_VAR 0 2
55421: ARRAY
55422: IN
55423: IFFALSE 55472
// begin tmp := mc_construct_list [ i ] diff un ;
55425: LD_ADDR_VAR 0 6
55429: PUSH
55430: LD_EXP 53
55434: PUSH
55435: LD_VAR 0 2
55439: ARRAY
55440: PUSH
55441: LD_VAR 0 1
55445: DIFF
55446: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55447: LD_ADDR_EXP 53
55451: PUSH
55452: LD_EXP 53
55456: PPUSH
55457: LD_VAR 0 2
55461: PPUSH
55462: LD_VAR 0 6
55466: PPUSH
55467: CALL_OW 1
55471: ST_TO_ADDR
// end ; break ;
55472: GO 55476
// end ;
55474: GO 55100
55476: POP
55477: POP
// end ; end ;
55478: PPOPN 6
55480: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
55481: LD_INT 0
55483: PPUSH
55484: PPUSH
55485: PPUSH
55486: PPUSH
55487: PPUSH
55488: PPUSH
55489: PPUSH
// begin if not mc_bases then
55490: LD_EXP 46
55494: NOT
55495: IFFALSE 55499
// exit ;
55497: GO 55740
// btype := GetBType ( building ) ;
55499: LD_ADDR_VAR 0 6
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 266
55513: ST_TO_ADDR
// x := GetX ( building ) ;
55514: LD_ADDR_VAR 0 7
55518: PUSH
55519: LD_VAR 0 1
55523: PPUSH
55524: CALL_OW 250
55528: ST_TO_ADDR
// y := GetY ( building ) ;
55529: LD_ADDR_VAR 0 8
55533: PUSH
55534: LD_VAR 0 1
55538: PPUSH
55539: CALL_OW 251
55543: ST_TO_ADDR
// d := GetDir ( building ) ;
55544: LD_ADDR_VAR 0 9
55548: PUSH
55549: LD_VAR 0 1
55553: PPUSH
55554: CALL_OW 254
55558: ST_TO_ADDR
// for i = 1 to mc_bases do
55559: LD_ADDR_VAR 0 3
55563: PUSH
55564: DOUBLE
55565: LD_INT 1
55567: DEC
55568: ST_TO_ADDR
55569: LD_EXP 46
55573: PUSH
55574: FOR_TO
55575: IFFALSE 55738
// begin if not mc_build_list [ i ] then
55577: LD_EXP 51
55581: PUSH
55582: LD_VAR 0 3
55586: ARRAY
55587: NOT
55588: IFFALSE 55592
// continue ;
55590: GO 55574
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55592: LD_VAR 0 6
55596: PUSH
55597: LD_VAR 0 7
55601: PUSH
55602: LD_VAR 0 8
55606: PUSH
55607: LD_VAR 0 9
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: PPUSH
55618: LD_EXP 51
55622: PUSH
55623: LD_VAR 0 3
55627: ARRAY
55628: PUSH
55629: LD_INT 1
55631: ARRAY
55632: PPUSH
55633: CALL 8451 0 2
55637: IFFALSE 55736
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
55639: LD_ADDR_VAR 0 5
55643: PUSH
55644: LD_EXP 51
55648: PUSH
55649: LD_VAR 0 3
55653: ARRAY
55654: PPUSH
55655: LD_INT 1
55657: PPUSH
55658: CALL_OW 3
55662: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55663: LD_ADDR_EXP 51
55667: PUSH
55668: LD_EXP 51
55672: PPUSH
55673: LD_VAR 0 3
55677: PPUSH
55678: LD_VAR 0 5
55682: PPUSH
55683: CALL_OW 1
55687: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55688: LD_ADDR_EXP 53
55692: PUSH
55693: LD_EXP 53
55697: PPUSH
55698: LD_VAR 0 3
55702: PUSH
55703: LD_EXP 53
55707: PUSH
55708: LD_VAR 0 3
55712: ARRAY
55713: PUSH
55714: LD_INT 1
55716: PLUS
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PPUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL 3156 0 3
55731: ST_TO_ADDR
// exit ;
55732: POP
55733: POP
55734: GO 55740
// end ; end ;
55736: GO 55574
55738: POP
55739: POP
// end ;
55740: PPOPN 9
55742: END
// on BuildingComplete ( building ) do var i , j , tmp ;
55743: LD_INT 0
55745: PPUSH
55746: PPUSH
55747: PPUSH
// begin if not mc_bases then
55748: LD_EXP 46
55752: NOT
55753: IFFALSE 55757
// exit ;
55755: GO 55958
// for i = 1 to mc_bases do
55757: LD_ADDR_VAR 0 2
55761: PUSH
55762: DOUBLE
55763: LD_INT 1
55765: DEC
55766: ST_TO_ADDR
55767: LD_EXP 46
55771: PUSH
55772: FOR_TO
55773: IFFALSE 55956
// begin if building in mc_construct_list [ i ] then
55775: LD_VAR 0 1
55779: PUSH
55780: LD_EXP 53
55784: PUSH
55785: LD_VAR 0 2
55789: ARRAY
55790: IN
55791: IFFALSE 55954
// begin tmp := mc_construct_list [ i ] diff building ;
55793: LD_ADDR_VAR 0 4
55797: PUSH
55798: LD_EXP 53
55802: PUSH
55803: LD_VAR 0 2
55807: ARRAY
55808: PUSH
55809: LD_VAR 0 1
55813: DIFF
55814: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55815: LD_ADDR_EXP 53
55819: PUSH
55820: LD_EXP 53
55824: PPUSH
55825: LD_VAR 0 2
55829: PPUSH
55830: LD_VAR 0 4
55834: PPUSH
55835: CALL_OW 1
55839: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55840: LD_ADDR_EXP 46
55844: PUSH
55845: LD_EXP 46
55849: PPUSH
55850: LD_VAR 0 2
55854: PUSH
55855: LD_EXP 46
55859: PUSH
55860: LD_VAR 0 2
55864: ARRAY
55865: PUSH
55866: LD_INT 1
55868: PLUS
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PPUSH
55874: LD_VAR 0 1
55878: PPUSH
55879: CALL 3156 0 3
55883: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
55884: LD_VAR 0 1
55888: PPUSH
55889: CALL_OW 266
55893: PUSH
55894: LD_INT 32
55896: PUSH
55897: LD_INT 33
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: IN
55904: IFFALSE 55950
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55906: LD_ADDR_EXP 54
55910: PUSH
55911: LD_EXP 54
55915: PPUSH
55916: LD_VAR 0 2
55920: PUSH
55921: LD_EXP 54
55925: PUSH
55926: LD_VAR 0 2
55930: ARRAY
55931: PUSH
55932: LD_INT 1
55934: PLUS
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PPUSH
55940: LD_VAR 0 1
55944: PPUSH
55945: CALL 3156 0 3
55949: ST_TO_ADDR
// exit ;
55950: POP
55951: POP
55952: GO 55958
// end ; end ;
55954: GO 55772
55956: POP
55957: POP
// end ;
55958: PPOPN 4
55960: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
55961: LD_INT 0
55963: PPUSH
55964: PPUSH
// begin if not mc_bases then
55965: LD_EXP 46
55969: NOT
55970: IFFALSE 55974
// exit ;
55972: GO 56189
// repeat wait ( 0 0$1 ) ;
55974: LD_INT 35
55976: PPUSH
55977: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
55981: LD_VAR 0 2
55985: PPUSH
55986: LD_VAR 0 3
55990: PPUSH
55991: CALL_OW 284
55995: IFFALSE 55974
// if GetResourceTypeXY ( x , y ) = mat_artefact then
55997: LD_VAR 0 2
56001: PPUSH
56002: LD_VAR 0 3
56006: PPUSH
56007: CALL_OW 283
56011: PUSH
56012: LD_INT 4
56014: EQUAL
56015: IFFALSE 56019
// exit ;
56017: GO 56189
// for i = 1 to mc_bases do
56019: LD_ADDR_VAR 0 6
56023: PUSH
56024: DOUBLE
56025: LD_INT 1
56027: DEC
56028: ST_TO_ADDR
56029: LD_EXP 46
56033: PUSH
56034: FOR_TO
56035: IFFALSE 56187
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56037: LD_ADDR_VAR 0 7
56041: PUSH
56042: LD_EXP 46
56046: PUSH
56047: LD_VAR 0 6
56051: ARRAY
56052: PPUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 30
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 30
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: PPUSH
56081: CALL_OW 72
56085: ST_TO_ADDR
// if not depot then
56086: LD_VAR 0 7
56090: NOT
56091: IFFALSE 56095
// continue ;
56093: GO 56034
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56095: LD_VAR 0 7
56099: PUSH
56100: LD_INT 1
56102: ARRAY
56103: PPUSH
56104: LD_VAR 0 2
56108: PPUSH
56109: LD_VAR 0 3
56113: PPUSH
56114: CALL_OW 297
56118: PUSH
56119: LD_INT 30
56121: LESS
56122: IFFALSE 56185
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56124: LD_ADDR_EXP 59
56128: PUSH
56129: LD_EXP 59
56133: PPUSH
56134: LD_VAR 0 6
56138: PUSH
56139: LD_EXP 59
56143: PUSH
56144: LD_VAR 0 6
56148: ARRAY
56149: PUSH
56150: LD_INT 1
56152: PLUS
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PPUSH
56158: LD_VAR 0 4
56162: PUSH
56163: LD_VAR 0 2
56167: PUSH
56168: LD_VAR 0 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: LIST
56177: PPUSH
56178: CALL 3156 0 3
56182: ST_TO_ADDR
// break ;
56183: GO 56187
// end ; end ;
56185: GO 56034
56187: POP
56188: POP
// end ;
56189: PPOPN 7
56191: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56192: LD_INT 0
56194: PPUSH
56195: PPUSH
// begin if not mc_bases then
56196: LD_EXP 46
56200: NOT
56201: IFFALSE 56205
// exit ;
56203: GO 56293
// for i = 1 to mc_bases do
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: DOUBLE
56211: LD_INT 1
56213: DEC
56214: ST_TO_ADDR
56215: LD_EXP 46
56219: PUSH
56220: FOR_TO
56221: IFFALSE 56291
// begin if factory in mc_bases [ i ] then
56223: LD_VAR 0 2
56227: PUSH
56228: LD_EXP 46
56232: PUSH
56233: LD_VAR 0 3
56237: ARRAY
56238: IN
56239: IFFALSE 56289
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56241: LD_ADDR_EXP 61
56245: PUSH
56246: LD_EXP 61
56250: PPUSH
56251: LD_VAR 0 3
56255: PUSH
56256: LD_EXP 61
56260: PUSH
56261: LD_VAR 0 3
56265: ARRAY
56266: PUSH
56267: LD_INT 1
56269: PLUS
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PPUSH
56275: LD_VAR 0 1
56279: PPUSH
56280: CALL 3156 0 3
56284: ST_TO_ADDR
// exit ;
56285: POP
56286: POP
56287: GO 56293
// end ; end ;
56289: GO 56220
56291: POP
56292: POP
// end ;
56293: PPOPN 4
56295: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56296: LD_VAR 0 1
56300: PPUSH
56301: CALL_OW 247
56305: PUSH
56306: LD_INT 2
56308: EQUAL
56309: IFFALSE 56313
// exit ;
56311: GO 56330
// if not kamikazed then
56313: LD_EXP 10
56317: NOT
56318: IFFALSE 56330
// kamikazed := unit ;
56320: LD_ADDR_EXP 10
56324: PUSH
56325: LD_VAR 0 1
56329: ST_TO_ADDR
// end ; end_of_file
56330: PPOPN 1
56332: END
// every 0 0$1 trigger game do
56333: LD_EXP 2
56337: IFFALSE 56367
56339: GO 56341
56341: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
56342: LD_INT 7
56344: PUSH
56345: LD_INT 6
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: LD_INT 6
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: PPUSH
56360: LD_INT 1750
56362: PPUSH
56363: CALL 56368 0 2
56367: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
56368: LD_INT 0
56370: PPUSH
56371: PPUSH
56372: PPUSH
// if not areas then
56373: LD_VAR 0 1
56377: NOT
56378: IFFALSE 56382
// exit ;
56380: GO 56494
// repeat wait ( time ) ;
56382: LD_VAR 0 2
56386: PPUSH
56387: CALL_OW 67
// p := rand ( 1 , 90 ) ;
56391: LD_ADDR_VAR 0 5
56395: PUSH
56396: LD_INT 1
56398: PPUSH
56399: LD_INT 90
56401: PPUSH
56402: CALL_OW 12
56406: ST_TO_ADDR
// for i in areas do
56407: LD_ADDR_VAR 0 4
56411: PUSH
56412: LD_VAR 0 1
56416: PUSH
56417: FOR_IN
56418: IFFALSE 56471
// begin if Prob ( p ) then
56420: LD_VAR 0 5
56424: PPUSH
56425: CALL_OW 13
56429: IFFALSE 56469
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
56431: LD_INT 1
56433: PPUSH
56434: LD_INT 5
56436: PPUSH
56437: CALL_OW 12
56441: PPUSH
56442: LD_VAR 0 4
56446: PPUSH
56447: LD_INT 1
56449: PPUSH
56450: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
56454: LD_INT 455
56456: PPUSH
56457: LD_INT 595
56459: PPUSH
56460: CALL_OW 12
56464: PPUSH
56465: CALL_OW 67
// end ; end ;
56469: GO 56417
56471: POP
56472: POP
// time := time + 0 0$3 ;
56473: LD_ADDR_VAR 0 2
56477: PUSH
56478: LD_VAR 0 2
56482: PUSH
56483: LD_INT 105
56485: PLUS
56486: ST_TO_ADDR
// until not game ;
56487: LD_EXP 2
56491: NOT
56492: IFFALSE 56382
// end ;
56494: LD_VAR 0 3
56498: RET
