// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 46 0 0
// InitMacro ;
  12: CALL 45301 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28912 0 0
// PrepareArabian ;
  33: CALL 33523 0 0
// RunMacro ;
  37: CALL 45464 0 0
// Debuger ;
  41: CALL 236 0 0
// end ;
  45: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  46: LD_INT 0
  48: PPUSH
// debug := 1 ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 1
  56: ST_TO_ADDR
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// mission_prefix := 11_ ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 11_
  72: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_STRING 10c_
  80: ST_TO_ADDR
// ar_run := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// ar_patrol := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_captured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// us_scout := 0 ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: ST_TO_ADDR
// kamikazed := false ;
 140: LD_ADDR_EXP 10
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// artifact_stolen := false ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// artifact_get := false ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 14
 168: PUSH
 169: LD_INT 189000
 171: PUSH
 172: LD_INT 168000
 174: PUSH
 175: LD_INT 157500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// powell_warn := false ;
 189: LD_ADDR_EXP 15
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// loses_counter := 0 ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// artifact_oncargo := false ;
 205: LD_ADDR_EXP 13
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 213: LD_ADDR_EXP 17
 217: PUSH
 218: LD_STRING 10_GensherEscape_1
 220: PPUSH
 221: LD_EXP 1
 225: PPUSH
 226: CALL_OW 30
 230: ST_TO_ADDR
// end ;
 231: LD_VAR 0 1
 235: RET
// function Debuger ; var i ; begin
 236: LD_INT 0
 238: PPUSH
 239: PPUSH
// if not debug then
 240: LD_EXP 1
 244: NOT
 245: IFFALSE 249
// exit ;
 247: GO 285
// game_speed := 5 ;
 249: LD_ADDR_OWVAR 65
 253: PUSH
 254: LD_INT 5
 256: ST_TO_ADDR
// uc_side := 1 ;
 257: LD_ADDR_OWVAR 20
 261: PUSH
 262: LD_INT 1
 264: ST_TO_ADDR
// uc_nation := 1 ;
 265: LD_ADDR_OWVAR 21
 269: PUSH
 270: LD_INT 1
 272: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 273: LD_EXP 34
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 235
// end ; end_of_file
 285: LD_VAR 0 1
 289: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 290: LD_INT 0
 292: PPUSH
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 4 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 4
 308: ST_TO_ADDR
// uc_nation := 1 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_STRING Powell
 324: PPUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL 1848 0 2
 332: ST_TO_ADDR
// uc_side := 1 ;
 333: LD_ADDR_OWVAR 20
 337: PUSH
 338: LD_INT 1
 340: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 341: LD_ADDR_EXP 18
 345: PUSH
 346: LD_STRING JMM
 348: PPUSH
 349: LD_EXP 1
 353: NOT
 354: PPUSH
 355: CALL 1848 0 2
 359: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 360: LD_ADDR_EXP 19
 364: PUSH
 365: LD_STRING Lisa
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: CALL 1848 0 2
 378: ST_TO_ADDR
// if not Lisa then
 379: LD_EXP 19
 383: NOT
 384: IFFALSE 399
// Lisa := CreateCharacter ( 10_Lisa ) ;
 386: LD_ADDR_EXP 19
 390: PUSH
 391: LD_STRING 10_Lisa
 393: PPUSH
 394: CALL_OW 34
 398: ST_TO_ADDR
// if not Lisa then
 399: LD_EXP 19
 403: NOT
 404: IFFALSE 419
// Lisa := CreateCharacter ( 09_Lisa ) ;
 406: LD_ADDR_EXP 19
 410: PUSH
 411: LD_STRING 09_Lisa
 413: PPUSH
 414: CALL_OW 34
 418: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 419: LD_ADDR_EXP 20
 423: PUSH
 424: LD_STRING Donaldson
 426: PPUSH
 427: LD_EXP 1
 431: NOT
 432: PPUSH
 433: CALL 1848 0 2
 437: ST_TO_ADDR
// if not Donaldson then
 438: LD_EXP 20
 442: NOT
 443: IFFALSE 458
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 445: LD_ADDR_EXP 20
 449: PUSH
 450: LD_STRING 10_Donaldson
 452: PPUSH
 453: CALL_OW 34
 457: ST_TO_ADDR
// if not Donaldson then
 458: LD_EXP 20
 462: NOT
 463: IFFALSE 478
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 465: LD_ADDR_EXP 20
 469: PUSH
 470: LD_STRING 09_Donaldson
 472: PPUSH
 473: CALL_OW 34
 477: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 478: LD_ADDR_EXP 21
 482: PUSH
 483: LD_STRING Bobby
 485: PPUSH
 486: LD_EXP 1
 490: NOT
 491: PPUSH
 492: CALL 1848 0 2
 496: ST_TO_ADDR
// if not Bobby then
 497: LD_EXP 21
 501: NOT
 502: IFFALSE 517
// Bobby := CreateCharacter ( 10_Bobby ) ;
 504: LD_ADDR_EXP 21
 508: PUSH
 509: LD_STRING 10_Bobby
 511: PPUSH
 512: CALL_OW 34
 516: ST_TO_ADDR
// if not Bobby then
 517: LD_EXP 21
 521: NOT
 522: IFFALSE 537
// Bobby := CreateCharacter ( 09_Bobby ) ;
 524: LD_ADDR_EXP 21
 528: PUSH
 529: LD_STRING 09_Bobby
 531: PPUSH
 532: CALL_OW 34
 536: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 537: LD_ADDR_EXP 22
 541: PUSH
 542: LD_STRING Cyrus
 544: PPUSH
 545: LD_EXP 1
 549: NOT
 550: PPUSH
 551: CALL 1848 0 2
 555: ST_TO_ADDR
// if not Cyrus then
 556: LD_EXP 22
 560: NOT
 561: IFFALSE 576
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 563: LD_ADDR_EXP 22
 567: PUSH
 568: LD_STRING 10_Cyrus
 570: PPUSH
 571: CALL_OW 34
 575: ST_TO_ADDR
// if not Cyrus then
 576: LD_EXP 22
 580: NOT
 581: IFFALSE 596
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 583: LD_ADDR_EXP 22
 587: PUSH
 588: LD_STRING 09_Cyrus
 590: PPUSH
 591: CALL_OW 34
 595: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 596: LD_ADDR_EXP 23
 600: PUSH
 601: LD_STRING Denis
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: CALL 1848 0 2
 614: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 615: LD_ADDR_EXP 24
 619: PUSH
 620: LD_STRING Brown
 622: PPUSH
 623: LD_EXP 1
 627: NOT
 628: PPUSH
 629: CALL 1848 0 2
 633: ST_TO_ADDR
// if not Brown then
 634: LD_EXP 24
 638: NOT
 639: IFFALSE 654
// Brown := CreateCharacter ( 10_Brown ) ;
 641: LD_ADDR_EXP 24
 645: PUSH
 646: LD_STRING 10_Brown
 648: PPUSH
 649: CALL_OW 34
 653: ST_TO_ADDR
// if not Brown then
 654: LD_EXP 24
 658: NOT
 659: IFFALSE 674
// Brown := CreateCharacter ( 08_Brown ) ;
 661: LD_ADDR_EXP 24
 665: PUSH
 666: LD_STRING 08_Brown
 668: PPUSH
 669: CALL_OW 34
 673: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 674: LD_ADDR_EXP 25
 678: PUSH
 679: LD_STRING Gladstone
 681: PPUSH
 682: LD_EXP 1
 686: NOT
 687: PPUSH
 688: CALL 1848 0 2
 692: ST_TO_ADDR
// if not Gladstone then
 693: LD_EXP 25
 697: NOT
 698: IFFALSE 713
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 700: LD_ADDR_EXP 25
 704: PUSH
 705: LD_STRING 10_Gladstone
 707: PPUSH
 708: CALL_OW 34
 712: ST_TO_ADDR
// if not Gladstone then
 713: LD_EXP 25
 717: NOT
 718: IFFALSE 733
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 720: LD_ADDR_EXP 25
 724: PUSH
 725: LD_STRING 08_Gladstone
 727: PPUSH
 728: CALL_OW 34
 732: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 733: LD_ADDR_EXP 26
 737: PUSH
 738: LD_STRING Houten
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: CALL 1848 0 2
 751: ST_TO_ADDR
// if not Houten then
 752: LD_EXP 26
 756: NOT
 757: IFFALSE 772
// Houten := CreateCharacter ( 10_Houten ) ;
 759: LD_ADDR_EXP 26
 763: PUSH
 764: LD_STRING 10_Houten
 766: PPUSH
 767: CALL_OW 34
 771: ST_TO_ADDR
// if not Houten then
 772: LD_EXP 26
 776: NOT
 777: IFFALSE 792
// Houten := CreateCharacter ( 09_Houten ) ;
 779: LD_ADDR_EXP 26
 783: PUSH
 784: LD_STRING 09_Houten
 786: PPUSH
 787: CALL_OW 34
 791: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 792: LD_ADDR_EXP 28
 796: PUSH
 797: LD_STRING Cornel
 799: PPUSH
 800: LD_EXP 1
 804: NOT
 805: PPUSH
 806: CALL 1848 0 2
 810: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 811: LD_ADDR_EXP 29
 815: PUSH
 816: LD_STRING Gary
 818: PPUSH
 819: LD_EXP 1
 823: NOT
 824: PPUSH
 825: CALL 1848 0 2
 829: ST_TO_ADDR
// if not Gary then
 830: LD_EXP 29
 834: NOT
 835: IFFALSE 850
// Gary := CreateCharacter ( 10_Gary ) ;
 837: LD_ADDR_EXP 29
 841: PUSH
 842: LD_STRING 10_Gary
 844: PPUSH
 845: CALL_OW 34
 849: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 850: LD_ADDR_EXP 30
 854: PUSH
 855: LD_STRING Frank
 857: PPUSH
 858: LD_EXP 1
 862: NOT
 863: PPUSH
 864: CALL 1848 0 2
 868: ST_TO_ADDR
// if not Frank then
 869: LD_EXP 30
 873: NOT
 874: IFFALSE 889
// Frank := CreateCharacter ( 08_Frank ) ;
 876: LD_ADDR_EXP 30
 880: PUSH
 881: LD_STRING 08_Frank
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 889: LD_ADDR_EXP 31
 893: PUSH
 894: LD_STRING Kikuchi
 896: PPUSH
 897: LD_EXP 1
 901: NOT
 902: PPUSH
 903: CALL 1848 0 2
 907: ST_TO_ADDR
// if not Kikuchi then
 908: LD_EXP 31
 912: NOT
 913: IFFALSE 928
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 915: LD_ADDR_EXP 31
 919: PUSH
 920: LD_STRING 08_Kikuchi
 922: PPUSH
 923: CALL_OW 34
 927: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 928: LD_ADDR_VAR 0 5
 932: PUSH
 933: LD_EXP 19
 937: PUSH
 938: LD_EXP 20
 942: PUSH
 943: LD_EXP 21
 947: PUSH
 948: LD_EXP 22
 952: PUSH
 953: LD_EXP 23
 957: PUSH
 958: LD_EXP 24
 962: PUSH
 963: LD_EXP 25
 967: PUSH
 968: LD_EXP 26
 972: PUSH
 973: LD_EXP 28
 977: PUSH
 978: LD_EXP 29
 982: PUSH
 983: LD_EXP 30
 987: PUSH
 988: LD_EXP 31
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: ST_TO_ADDR
// tmp := tmp diff 0 ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_VAR 0 5
1016: PUSH
1017: LD_INT 0
1019: DIFF
1020: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1021: LD_ADDR_VAR 0 5
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: LD_STRING 10_lock
1033: PPUSH
1034: CALL_OW 31
1038: UNION
1039: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1040: LD_ADDR_VAR 0 5
1044: PUSH
1045: LD_VAR 0 5
1049: PUSH
1050: LD_STRING 10c_lock
1052: PPUSH
1053: CALL_OW 31
1057: UNION
1058: ST_TO_ADDR
// for i in tmp do
1059: LD_ADDR_VAR 0 2
1063: PUSH
1064: LD_VAR 0 5
1068: PUSH
1069: FOR_IN
1070: IFFALSE 1101
// if GetClass ( i ) = class_mortar then
1072: LD_VAR 0 2
1076: PPUSH
1077: CALL_OW 257
1081: PUSH
1082: LD_INT 8
1084: EQUAL
1085: IFFALSE 1099
// SetClass ( i , class_soldier ) ;
1087: LD_VAR 0 2
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
1099: GO 1069
1101: POP
1102: POP
// if tmp < 12 then
1103: LD_VAR 0 5
1107: PUSH
1108: LD_INT 12
1110: LESS
1111: IFFALSE 1209
// begin k := 16 - tmp ;
1113: LD_ADDR_VAR 0 3
1117: PUSH
1118: LD_INT 16
1120: PUSH
1121: LD_VAR 0 5
1125: MINUS
1126: ST_TO_ADDR
// for i = 1 to k do
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: DOUBLE
1133: LD_INT 1
1135: DEC
1136: ST_TO_ADDR
1137: LD_VAR 0 3
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1207
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: LD_INT 4
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 1
1172: PPUSH
1173: LD_INT 5
1175: PPUSH
1176: CALL_OW 12
1180: ARRAY
1181: PPUSH
1182: LD_INT 6
1184: PPUSH
1185: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_VAR 0 5
1198: PUSH
1199: CALL_OW 44
1203: ADD
1204: ST_TO_ADDR
// end ;
1205: GO 1142
1207: POP
1208: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1209: LD_ADDR_VAR 0 6
1213: PUSH
1214: LD_STRING 1
1216: PPUSH
1217: LD_INT 12
1219: PPUSH
1220: LD_INT 12
1222: PPUSH
1223: LD_INT -5
1225: PUSH
1226: LD_EXP 18
1230: PUSH
1231: LD_INT -2
1233: PUSH
1234: LD_INT -3
1236: PUSH
1237: LD_INT -5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_VAR 0 5
1251: ADD
1252: PUSH
1253: LD_INT -6
1255: PUSH
1256: LD_INT -4
1258: PUSH
1259: LD_EXP 27
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: ADD
1269: PPUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 4
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 2
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 3
1292: PUSH
1293: LD_INT 0
1295: PUSH
1296: LD_INT 5
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 3
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 2
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: PPUSH
1339: CALL_OW 42
1343: ST_TO_ADDR
// others := tmp diff selected ;
1344: LD_ADDR_VAR 0 9
1348: PUSH
1349: LD_VAR 0 5
1353: PUSH
1354: LD_VAR 0 6
1358: DIFF
1359: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1360: LD_ADDR_VAR 0 9
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_EXP 19
1374: PUSH
1375: LD_EXP 20
1379: PUSH
1380: LD_EXP 21
1384: PUSH
1385: LD_EXP 22
1389: PUSH
1390: LD_EXP 23
1394: PUSH
1395: LD_EXP 24
1399: PUSH
1400: LD_EXP 25
1404: PUSH
1405: LD_EXP 26
1409: PUSH
1410: LD_EXP 28
1414: PUSH
1415: LD_EXP 29
1419: PUSH
1420: LD_EXP 30
1424: PUSH
1425: LD_EXP 31
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: DIFF
1444: ST_TO_ADDR
// if others then
1445: LD_VAR 0 9
1449: IFFALSE 1463
// SaveCharacters ( others , 11_others ) ;
1451: LD_VAR 0 9
1455: PPUSH
1456: LD_STRING 11_others
1458: PPUSH
1459: CALL_OW 38
// us_team := tmp ;
1463: LD_ADDR_EXP 32
1467: PUSH
1468: LD_VAR 0 5
1472: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1473: LD_ADDR_VAR 0 7
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: LD_INT 1
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 4
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 2
1498: PUSH
1499: LD_INT 2
1501: PUSH
1502: LD_INT 1
1504: PUSH
1505: LD_INT 5
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 4
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: LD_INT 1
1522: PUSH
1523: LD_INT 5
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 1
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 7
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 7
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// for i in JMM ^ selected do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: LD_EXP 18
1584: PUSH
1585: LD_VAR 0 6
1589: ADD
1590: PUSH
1591: FOR_IN
1592: IFFALSE 1781
// begin if GetClass ( i ) = 3 then
1594: LD_VAR 0 2
1598: PPUSH
1599: CALL_OW 257
1603: PUSH
1604: LD_INT 3
1606: EQUAL
1607: IFFALSE 1764
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1609: LD_ADDR_OWVAR 37
1613: PUSH
1614: LD_VAR 0 7
1618: PUSH
1619: LD_INT 1
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1627: LD_ADDR_OWVAR 39
1631: PUSH
1632: LD_VAR 0 7
1636: PUSH
1637: LD_INT 1
1639: ARRAY
1640: PUSH
1641: LD_INT 2
1643: ARRAY
1644: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1645: LD_ADDR_OWVAR 38
1649: PUSH
1650: LD_VAR 0 7
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PUSH
1659: LD_INT 3
1661: ARRAY
1662: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1663: LD_ADDR_OWVAR 40
1667: PUSH
1668: LD_VAR 0 7
1672: PUSH
1673: LD_INT 1
1675: ARRAY
1676: PUSH
1677: LD_INT 4
1679: ARRAY
1680: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1681: LD_ADDR_VAR 0 7
1685: PUSH
1686: LD_VAR 0 7
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: CALL_OW 3
1698: ST_TO_ADDR
// veh := CreateVehicle ;
1699: LD_ADDR_VAR 0 8
1703: PUSH
1704: CALL_OW 45
1708: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1709: LD_VAR 0 8
1713: PPUSH
1714: LD_INT 8
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_VAR 0 8
1733: PPUSH
1734: CALL_OW 52
// if i = JMM then
1738: LD_VAR 0 2
1742: PUSH
1743: LD_EXP 18
1747: EQUAL
1748: IFFALSE 1762
// SetMark ( veh , 1 ) ;
1750: LD_VAR 0 8
1754: PPUSH
1755: LD_INT 1
1757: PPUSH
1758: CALL_OW 242
// end else
1762: GO 1779
// PlaceUnitArea ( i , am_hum_start , false ) ;
1764: LD_VAR 0 2
1768: PPUSH
1769: LD_INT 9
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: GO 1591
1781: POP
1782: POP
// vc_chassis := us_medium_tracked ;
1783: LD_ADDR_OWVAR 37
1787: PUSH
1788: LD_INT 3
1790: ST_TO_ADDR
// vc_engine := engine_solar ;
1791: LD_ADDR_OWVAR 39
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// vc_control := control_computer ;
1799: LD_ADDR_OWVAR 38
1803: PUSH
1804: LD_INT 3
1806: ST_TO_ADDR
// vc_weapon := us_radar ;
1807: LD_ADDR_OWVAR 40
1811: PUSH
1812: LD_INT 11
1814: ST_TO_ADDR
// veh := CreateVehicle ;
1815: LD_ADDR_VAR 0 8
1819: PUSH
1820: CALL_OW 45
1824: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1825: LD_VAR 0 8
1829: PPUSH
1830: LD_INT 87
1832: PPUSH
1833: LD_INT 142
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 48
// end ; end_of_file
1843: LD_VAR 0 1
1847: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1848: LD_INT 0
1850: PPUSH
1851: PPUSH
// if exist_mode then
1852: LD_VAR 0 2
1856: IFFALSE 1881
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1858: LD_ADDR_VAR 0 4
1862: PUSH
1863: LD_EXP 4
1867: PUSH
1868: LD_VAR 0 1
1872: STR
1873: PPUSH
1874: CALL_OW 34
1878: ST_TO_ADDR
1879: GO 1896
// unit := NewCharacter ( ident ) ;
1881: LD_ADDR_VAR 0 4
1885: PUSH
1886: LD_VAR 0 1
1890: PPUSH
1891: CALL_OW 25
1895: ST_TO_ADDR
// result := unit ;
1896: LD_ADDR_VAR 0 3
1900: PUSH
1901: LD_VAR 0 4
1905: ST_TO_ADDR
// end ;
1906: LD_VAR 0 3
1910: RET
// export function _GetHexInfo ( x , y ) ; begin
1911: LD_INT 0
1913: PPUSH
// result := false ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: LD_INT 0
1921: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1922: LD_VAR 0 1
1926: PPUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 488
1936: NOT
1937: PUSH
1938: LD_VAR 0 1
1942: NOT
1943: OR
1944: PUSH
1945: LD_VAR 0 2
1949: NOT
1950: OR
1951: IFFALSE 1955
// exit ;
1953: GO 1975
// result := GetHexInfo ( x , y ) ;
1955: LD_ADDR_VAR 0 3
1959: PUSH
1960: LD_VAR 0 1
1964: PPUSH
1965: LD_VAR 0 2
1969: PPUSH
1970: CALL_OW 546
1974: ST_TO_ADDR
// end ;
1975: LD_VAR 0 3
1979: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1980: LD_INT 0
1982: PPUSH
// vc_chassis := chassis ;
1983: LD_ADDR_OWVAR 37
1987: PUSH
1988: LD_VAR 0 1
1992: ST_TO_ADDR
// vc_engine := engine ;
1993: LD_ADDR_OWVAR 39
1997: PUSH
1998: LD_VAR 0 2
2002: ST_TO_ADDR
// vc_control := control ;
2003: LD_ADDR_OWVAR 38
2007: PUSH
2008: LD_VAR 0 3
2012: ST_TO_ADDR
// vc_weapon := weapon ;
2013: LD_ADDR_OWVAR 40
2017: PUSH
2018: LD_VAR 0 4
2022: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2023: LD_ADDR_OWVAR 41
2027: PUSH
2028: LD_VAR 0 5
2032: ST_TO_ADDR
// end ;
2033: LD_VAR 0 6
2037: RET
// export function CanSayRand ( side ) ; begin
2038: LD_INT 0
2040: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_VAR 0 1
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 2
2060: PUSH
2061: LD_INT 25
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 25
2073: PUSH
2074: LD_INT 2
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 25
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 25
2093: PUSH
2094: LD_INT 4
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: PUSH
2117: LD_EXP 18
2121: PUSH
2122: LD_EXP 30
2126: PUSH
2127: LD_EXP 19
2131: PUSH
2132: LD_EXP 20
2136: PUSH
2137: LD_EXP 21
2141: PUSH
2142: LD_EXP 22
2146: PUSH
2147: LD_EXP 23
2151: PUSH
2152: LD_EXP 24
2156: PUSH
2157: LD_EXP 25
2161: PUSH
2162: LD_EXP 26
2166: PUSH
2167: LD_EXP 27
2171: PUSH
2172: LD_EXP 28
2176: PUSH
2177: LD_EXP 29
2181: PUSH
2182: LD_EXP 31
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: DIFF
2203: ST_TO_ADDR
// end ;
2204: LD_VAR 0 2
2208: RET
// export function SayRand ( sex , dial ) ; begin
2209: LD_INT 0
2211: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2212: LD_ADDR_VAR 0 3
2216: PUSH
2217: LD_INT 22
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 26
2229: PUSH
2230: LD_VAR 0 1
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 2
2241: PUSH
2242: LD_INT 25
2244: PUSH
2245: LD_INT 1
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 25
2254: PUSH
2255: LD_INT 2
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 25
2264: PUSH
2265: LD_INT 3
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 25
2274: PUSH
2275: LD_INT 4
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_EXP 18
2303: PUSH
2304: LD_EXP 30
2308: PUSH
2309: LD_EXP 19
2313: PUSH
2314: LD_EXP 20
2318: PUSH
2319: LD_EXP 21
2323: PUSH
2324: LD_EXP 22
2328: PUSH
2329: LD_EXP 23
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_EXP 25
2343: PUSH
2344: LD_EXP 26
2348: PUSH
2349: LD_EXP 27
2353: PUSH
2354: LD_EXP 28
2358: PUSH
2359: LD_EXP 29
2363: PUSH
2364: LD_EXP 31
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: DIFF
2385: ST_TO_ADDR
// if not result then
2386: LD_VAR 0 3
2390: NOT
2391: IFFALSE 2395
// exit ;
2393: GO 2423
// result := result [ 1 ] ;
2395: LD_ADDR_VAR 0 3
2399: PUSH
2400: LD_VAR 0 3
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: ST_TO_ADDR
// Say ( result , dial ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 88
// end ;
2423: LD_VAR 0 3
2427: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2428: LD_INT 0
2430: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2431: LD_ADDR_VAR 0 4
2435: PUSH
2436: LD_INT 22
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 26
2448: PUSH
2449: LD_VAR 0 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 2
2460: PUSH
2461: LD_INT 25
2463: PUSH
2464: LD_INT 1
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 25
2473: PUSH
2474: LD_INT 2
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 4
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: PPUSH
2513: CALL_OW 69
2517: PUSH
2518: LD_EXP 18
2522: PUSH
2523: LD_EXP 30
2527: PUSH
2528: LD_EXP 19
2532: PUSH
2533: LD_EXP 20
2537: PUSH
2538: LD_EXP 21
2542: PUSH
2543: LD_EXP 22
2547: PUSH
2548: LD_EXP 23
2552: PUSH
2553: LD_EXP 24
2557: PUSH
2558: LD_EXP 25
2562: PUSH
2563: LD_EXP 26
2567: PUSH
2568: LD_EXP 27
2572: PUSH
2573: LD_EXP 28
2577: PUSH
2578: LD_EXP 29
2582: PUSH
2583: LD_EXP 31
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: PUSH
2604: LD_VAR 0 3
2608: ADD
2609: DIFF
2610: ST_TO_ADDR
// if not result then
2611: LD_VAR 0 4
2615: NOT
2616: IFFALSE 2620
// exit ;
2618: GO 2648
// result := result [ 1 ] ;
2620: LD_ADDR_VAR 0 4
2624: PUSH
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: ST_TO_ADDR
// Say ( result , dial ) ;
2634: LD_VAR 0 4
2638: PPUSH
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 88
// end ;
2648: LD_VAR 0 4
2652: RET
// export function WantPlant ( unit ) ; var task ; begin
2653: LD_INT 0
2655: PPUSH
2656: PPUSH
// result := false ;
2657: LD_ADDR_VAR 0 2
2661: PUSH
2662: LD_INT 0
2664: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: LD_VAR 0 1
2674: PPUSH
2675: CALL_OW 437
2679: ST_TO_ADDR
// if task then
2680: LD_VAR 0 3
2684: IFFALSE 2712
// if task [ 1 ] [ 1 ] = p then
2686: LD_VAR 0 3
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PUSH
2699: LD_STRING p
2701: EQUAL
2702: IFFALSE 2712
// result := true ;
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 1
2711: ST_TO_ADDR
// end ;
2712: LD_VAR 0 2
2716: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2717: LD_INT 0
2719: PPUSH
2720: PPUSH
2721: PPUSH
2722: PPUSH
// if pos < 1 then
2723: LD_VAR 0 2
2727: PUSH
2728: LD_INT 1
2730: LESS
2731: IFFALSE 2735
// exit ;
2733: GO 3038
// if pos = 1 then
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: EQUAL
2743: IFFALSE 2776
// result := Replace ( arr , pos [ 1 ] , value ) else
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_VAR 0 1
2754: PPUSH
2755: LD_VAR 0 2
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: PPUSH
2764: LD_VAR 0 3
2768: PPUSH
2769: CALL_OW 1
2773: ST_TO_ADDR
2774: GO 3038
// begin tmp := arr ;
2776: LD_ADDR_VAR 0 6
2780: PUSH
2781: LD_VAR 0 1
2785: ST_TO_ADDR
// s_arr := [ tmp ] ;
2786: LD_ADDR_VAR 0 7
2790: PUSH
2791: LD_VAR 0 6
2795: PUSH
2796: EMPTY
2797: LIST
2798: ST_TO_ADDR
// for i = 1 to pos - 1 do
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: DOUBLE
2805: LD_INT 1
2807: DEC
2808: ST_TO_ADDR
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 1
2816: MINUS
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2864
// begin tmp := tmp [ pos [ i ] ] ;
2821: LD_ADDR_VAR 0 6
2825: PUSH
2826: LD_VAR 0 6
2830: PUSH
2831: LD_VAR 0 2
2835: PUSH
2836: LD_VAR 0 5
2840: ARRAY
2841: ARRAY
2842: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2843: LD_ADDR_VAR 0 7
2847: PUSH
2848: LD_VAR 0 7
2852: PUSH
2853: LD_VAR 0 6
2857: PUSH
2858: EMPTY
2859: LIST
2860: ADD
2861: ST_TO_ADDR
// end ;
2862: GO 2818
2864: POP
2865: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: LD_VAR 0 6
2875: PPUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PPUSH
2887: LD_VAR 0 3
2891: PPUSH
2892: CALL_OW 1
2896: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2897: LD_ADDR_VAR 0 7
2901: PUSH
2902: LD_VAR 0 7
2906: PPUSH
2907: LD_VAR 0 7
2911: PPUSH
2912: LD_VAR 0 6
2916: PPUSH
2917: CALL_OW 1
2921: ST_TO_ADDR
// for i = s_arr downto 2 do
2922: LD_ADDR_VAR 0 5
2926: PUSH
2927: DOUBLE
2928: LD_VAR 0 7
2932: INC
2933: ST_TO_ADDR
2934: LD_INT 2
2936: PUSH
2937: FOR_DOWNTO
2938: IFFALSE 3022
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2940: LD_ADDR_VAR 0 6
2944: PUSH
2945: LD_VAR 0 7
2949: PUSH
2950: LD_VAR 0 5
2954: PUSH
2955: LD_INT 1
2957: MINUS
2958: ARRAY
2959: PPUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_VAR 0 5
2969: PUSH
2970: LD_INT 1
2972: MINUS
2973: ARRAY
2974: PPUSH
2975: LD_VAR 0 7
2979: PUSH
2980: LD_VAR 0 5
2984: ARRAY
2985: PPUSH
2986: CALL_OW 1
2990: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
2991: LD_ADDR_VAR 0 7
2995: PUSH
2996: LD_VAR 0 7
3000: PPUSH
3001: LD_VAR 0 5
3005: PUSH
3006: LD_INT 1
3008: MINUS
3009: PPUSH
3010: LD_VAR 0 6
3014: PPUSH
3015: CALL_OW 1
3019: ST_TO_ADDR
// end ;
3020: GO 2937
3022: POP
3023: POP
// result := s_arr [ 1 ] ;
3024: LD_ADDR_VAR 0 4
3028: PUSH
3029: LD_VAR 0 7
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: ST_TO_ADDR
// end ; end ;
3038: LD_VAR 0 4
3042: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
// if not list then
3047: LD_VAR 0 1
3051: NOT
3052: IFFALSE 3056
// exit ;
3054: GO 3147
// i := list [ pos1 ] ;
3056: LD_ADDR_VAR 0 5
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_VAR 0 2
3070: ARRAY
3071: ST_TO_ADDR
// if not i then
3072: LD_VAR 0 5
3076: NOT
3077: IFFALSE 3081
// exit ;
3079: GO 3147
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3081: LD_ADDR_VAR 0 1
3085: PUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_VAR 0 1
3100: PUSH
3101: LD_VAR 0 3
3105: ARRAY
3106: PPUSH
3107: CALL_OW 1
3111: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3112: LD_ADDR_VAR 0 1
3116: PUSH
3117: LD_VAR 0 1
3121: PPUSH
3122: LD_VAR 0 3
3126: PPUSH
3127: LD_VAR 0 5
3131: PPUSH
3132: CALL_OW 1
3136: ST_TO_ADDR
// result := list ;
3137: LD_ADDR_VAR 0 4
3141: PUSH
3142: LD_VAR 0 1
3146: ST_TO_ADDR
// end ;
3147: LD_VAR 0 4
3151: RET
// export function Add ( list , pos , val ) ; begin
3152: LD_INT 0
3154: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: LD_VAR 0 2
3169: PPUSH
3170: LD_VAR 0 3
3174: PPUSH
3175: CALL 2717 0 3
3179: ST_TO_ADDR
3180: LD_VAR 0 4
3184: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3185: LD_INT 0
3187: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_VAR 0 1
3197: PPUSH
3198: CALL_OW 250
3202: PPUSH
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 251
3212: PPUSH
3213: LD_VAR 0 2
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL 3238 0 5
3232: ST_TO_ADDR
// end ;
3233: LD_VAR 0 5
3237: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3238: LD_INT 0
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
// if not list then
3244: LD_VAR 0 3
3248: NOT
3249: IFFALSE 3253
// exit ;
3251: GO 3641
// result := [ ] ;
3253: LD_ADDR_VAR 0 6
3257: PUSH
3258: EMPTY
3259: ST_TO_ADDR
// for i in list do
3260: LD_ADDR_VAR 0 7
3264: PUSH
3265: LD_VAR 0 3
3269: PUSH
3270: FOR_IN
3271: IFFALSE 3473
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3273: LD_ADDR_VAR 0 9
3277: PUSH
3278: LD_VAR 0 7
3282: PPUSH
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_VAR 0 2
3292: PPUSH
3293: CALL_OW 297
3297: ST_TO_ADDR
// if not result then
3298: LD_VAR 0 6
3302: NOT
3303: IFFALSE 3329
// result := [ [ i , tmp ] ] else
3305: LD_ADDR_VAR 0 6
3309: PUSH
3310: LD_VAR 0 7
3314: PUSH
3315: LD_VAR 0 9
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: ST_TO_ADDR
3327: GO 3471
// begin if result [ result ] [ 2 ] < tmp then
3329: LD_VAR 0 6
3333: PUSH
3334: LD_VAR 0 6
3338: ARRAY
3339: PUSH
3340: LD_INT 2
3342: ARRAY
3343: PUSH
3344: LD_VAR 0 9
3348: LESS
3349: IFFALSE 3391
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3351: LD_ADDR_VAR 0 6
3355: PUSH
3356: LD_VAR 0 6
3360: PPUSH
3361: LD_VAR 0 6
3365: PUSH
3366: LD_INT 1
3368: PLUS
3369: PPUSH
3370: LD_VAR 0 7
3374: PUSH
3375: LD_VAR 0 9
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 2
3388: ST_TO_ADDR
3389: GO 3471
// for j = 1 to result do
3391: LD_ADDR_VAR 0 8
3395: PUSH
3396: DOUBLE
3397: LD_INT 1
3399: DEC
3400: ST_TO_ADDR
3401: LD_VAR 0 6
3405: PUSH
3406: FOR_TO
3407: IFFALSE 3469
// begin if tmp < result [ j ] [ 2 ] then
3409: LD_VAR 0 9
3413: PUSH
3414: LD_VAR 0 6
3418: PUSH
3419: LD_VAR 0 8
3423: ARRAY
3424: PUSH
3425: LD_INT 2
3427: ARRAY
3428: LESS
3429: IFFALSE 3467
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3431: LD_ADDR_VAR 0 6
3435: PUSH
3436: LD_VAR 0 6
3440: PPUSH
3441: LD_VAR 0 8
3445: PPUSH
3446: LD_VAR 0 7
3450: PUSH
3451: LD_VAR 0 9
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL_OW 2
3464: ST_TO_ADDR
// break ;
3465: GO 3469
// end ; end ;
3467: GO 3406
3469: POP
3470: POP
// end ; end ;
3471: GO 3270
3473: POP
3474: POP
// if result and not asc then
3475: LD_VAR 0 6
3479: PUSH
3480: LD_VAR 0 4
3484: NOT
3485: AND
3486: IFFALSE 3561
// begin tmp := result ;
3488: LD_ADDR_VAR 0 9
3492: PUSH
3493: LD_VAR 0 6
3497: ST_TO_ADDR
// for i = tmp downto 1 do
3498: LD_ADDR_VAR 0 7
3502: PUSH
3503: DOUBLE
3504: LD_VAR 0 9
3508: INC
3509: ST_TO_ADDR
3510: LD_INT 1
3512: PUSH
3513: FOR_DOWNTO
3514: IFFALSE 3559
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3516: LD_ADDR_VAR 0 6
3520: PUSH
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 9
3530: PUSH
3531: LD_VAR 0 7
3535: MINUS
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: PPUSH
3541: LD_VAR 0 9
3545: PUSH
3546: LD_VAR 0 7
3550: ARRAY
3551: PPUSH
3552: CALL_OW 1
3556: ST_TO_ADDR
3557: GO 3513
3559: POP
3560: POP
// end ; tmp := [ ] ;
3561: LD_ADDR_VAR 0 9
3565: PUSH
3566: EMPTY
3567: ST_TO_ADDR
// if mode then
3568: LD_VAR 0 5
3572: IFFALSE 3641
// begin for i = 1 to result do
3574: LD_ADDR_VAR 0 7
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_VAR 0 6
3588: PUSH
3589: FOR_TO
3590: IFFALSE 3629
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3592: LD_ADDR_VAR 0 9
3596: PUSH
3597: LD_VAR 0 9
3601: PPUSH
3602: LD_VAR 0 7
3606: PPUSH
3607: LD_VAR 0 6
3611: PUSH
3612: LD_VAR 0 7
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 1
3626: ST_TO_ADDR
3627: GO 3589
3629: POP
3630: POP
// result := tmp ;
3631: LD_ADDR_VAR 0 6
3635: PUSH
3636: LD_VAR 0 9
3640: ST_TO_ADDR
// end ; end ;
3641: LD_VAR 0 6
3645: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3646: LD_INT 0
3648: PPUSH
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
3653: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3654: LD_ADDR_VAR 0 5
3658: PUSH
3659: LD_INT 0
3661: PUSH
3662: LD_INT 0
3664: PUSH
3665: LD_INT 0
3667: PUSH
3668: EMPTY
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// if not x or not y then
3676: LD_VAR 0 2
3680: NOT
3681: PUSH
3682: LD_VAR 0 3
3686: NOT
3687: OR
3688: IFFALSE 3692
// exit ;
3690: GO 5320
// if not range then
3692: LD_VAR 0 4
3696: NOT
3697: IFFALSE 3707
// range := 10 ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 10
3706: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3707: LD_ADDR_VAR 0 8
3711: PUSH
3712: LD_INT 81
3714: PUSH
3715: LD_VAR 0 1
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 92
3726: PUSH
3727: LD_VAR 0 2
3731: PUSH
3732: LD_VAR 0 3
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 69
3756: ST_TO_ADDR
// if not tmp then
3757: LD_VAR 0 8
3761: NOT
3762: IFFALSE 3766
// exit ;
3764: GO 5320
// for i in tmp do
3766: LD_ADDR_VAR 0 6
3770: PUSH
3771: LD_VAR 0 8
3775: PUSH
3776: FOR_IN
3777: IFFALSE 5295
// begin points := [ 0 , 0 , 0 ] ;
3779: LD_ADDR_VAR 0 9
3783: PUSH
3784: LD_INT 0
3786: PUSH
3787: LD_INT 0
3789: PUSH
3790: LD_INT 0
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// bpoints := 1 ;
3798: LD_ADDR_VAR 0 10
3802: PUSH
3803: LD_INT 1
3805: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3806: LD_VAR 0 6
3810: PPUSH
3811: CALL_OW 247
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 4402
3824: POP
// begin if GetClass ( i ) = 1 then
3825: LD_VAR 0 6
3829: PPUSH
3830: CALL_OW 257
3834: PUSH
3835: LD_INT 1
3837: EQUAL
3838: IFFALSE 3859
// points := [ 10 , 5 , 3 ] ;
3840: LD_ADDR_VAR 0 9
3844: PUSH
3845: LD_INT 10
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: LD_INT 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3859: LD_VAR 0 6
3863: PPUSH
3864: CALL_OW 257
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: LD_INT 3
3874: PUSH
3875: LD_INT 4
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: LIST
3882: IN
3883: IFFALSE 3904
// points := [ 3 , 2 , 1 ] ;
3885: LD_ADDR_VAR 0 9
3889: PUSH
3890: LD_INT 3
3892: PUSH
3893: LD_INT 2
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3904: LD_VAR 0 6
3908: PPUSH
3909: CALL_OW 257
3913: PUSH
3914: LD_INT 5
3916: EQUAL
3917: IFFALSE 3938
// points := [ 130 , 5 , 2 ] ;
3919: LD_ADDR_VAR 0 9
3923: PUSH
3924: LD_INT 130
3926: PUSH
3927: LD_INT 5
3929: PUSH
3930: LD_INT 2
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3938: LD_VAR 0 6
3942: PPUSH
3943: CALL_OW 257
3947: PUSH
3948: LD_INT 8
3950: EQUAL
3951: IFFALSE 3972
// points := [ 35 , 35 , 30 ] ;
3953: LD_ADDR_VAR 0 9
3957: PUSH
3958: LD_INT 35
3960: PUSH
3961: LD_INT 35
3963: PUSH
3964: LD_INT 30
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3972: LD_VAR 0 6
3976: PPUSH
3977: CALL_OW 257
3981: PUSH
3982: LD_INT 9
3984: EQUAL
3985: IFFALSE 4006
// points := [ 20 , 55 , 40 ] ;
3987: LD_ADDR_VAR 0 9
3991: PUSH
3992: LD_INT 20
3994: PUSH
3995: LD_INT 55
3997: PUSH
3998: LD_INT 40
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4006: LD_VAR 0 6
4010: PPUSH
4011: CALL_OW 257
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 16
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: IN
4026: IFFALSE 4047
// points := [ 5 , 3 , 2 ] ;
4028: LD_ADDR_VAR 0 9
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4047: LD_VAR 0 6
4051: PPUSH
4052: CALL_OW 257
4056: PUSH
4057: LD_INT 17
4059: EQUAL
4060: IFFALSE 4081
// points := [ 100 , 50 , 75 ] ;
4062: LD_ADDR_VAR 0 9
4066: PUSH
4067: LD_INT 100
4069: PUSH
4070: LD_INT 50
4072: PUSH
4073: LD_INT 75
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: LIST
4080: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4081: LD_VAR 0 6
4085: PPUSH
4086: CALL_OW 257
4090: PUSH
4091: LD_INT 15
4093: EQUAL
4094: IFFALSE 4115
// points := [ 10 , 5 , 3 ] ;
4096: LD_ADDR_VAR 0 9
4100: PUSH
4101: LD_INT 10
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 3
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4115: LD_VAR 0 6
4119: PPUSH
4120: CALL_OW 257
4124: PUSH
4125: LD_INT 14
4127: EQUAL
4128: IFFALSE 4149
// points := [ 10 , 0 , 0 ] ;
4130: LD_ADDR_VAR 0 9
4134: PUSH
4135: LD_INT 10
4137: PUSH
4138: LD_INT 0
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4149: LD_VAR 0 6
4153: PPUSH
4154: CALL_OW 257
4158: PUSH
4159: LD_INT 11
4161: EQUAL
4162: IFFALSE 4183
// points := [ 30 , 10 , 5 ] ;
4164: LD_ADDR_VAR 0 9
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 10
4174: PUSH
4175: LD_INT 5
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4183: LD_VAR 0 1
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL_OW 321
4195: PUSH
4196: LD_INT 2
4198: EQUAL
4199: IFFALSE 4216
// bpoints := bpoints * 1.8 ;
4201: LD_ADDR_VAR 0 10
4205: PUSH
4206: LD_VAR 0 10
4210: PUSH
4211: LD_REAL  1.80000000000000E+0000
4214: MUL
4215: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4216: LD_VAR 0 6
4220: PPUSH
4221: CALL_OW 257
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: LD_INT 2
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: LD_INT 4
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: IN
4244: PUSH
4245: LD_VAR 0 1
4249: PPUSH
4250: LD_INT 51
4252: PPUSH
4253: CALL_OW 321
4257: PUSH
4258: LD_INT 2
4260: EQUAL
4261: AND
4262: IFFALSE 4279
// bpoints := bpoints * 1.2 ;
4264: LD_ADDR_VAR 0 10
4268: PUSH
4269: LD_VAR 0 10
4273: PUSH
4274: LD_REAL  1.20000000000000E+0000
4277: MUL
4278: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4279: LD_VAR 0 6
4283: PPUSH
4284: CALL_OW 257
4288: PUSH
4289: LD_INT 5
4291: PUSH
4292: LD_INT 7
4294: PUSH
4295: LD_INT 9
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: IN
4303: PUSH
4304: LD_VAR 0 1
4308: PPUSH
4309: LD_INT 52
4311: PPUSH
4312: CALL_OW 321
4316: PUSH
4317: LD_INT 2
4319: EQUAL
4320: AND
4321: IFFALSE 4338
// bpoints := bpoints * 1.5 ;
4323: LD_ADDR_VAR 0 10
4327: PUSH
4328: LD_VAR 0 10
4332: PUSH
4333: LD_REAL  1.50000000000000E+0000
4336: MUL
4337: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_INT 66
4345: PPUSH
4346: CALL_OW 321
4350: PUSH
4351: LD_INT 2
4353: EQUAL
4354: IFFALSE 4371
// bpoints := bpoints * 1.1 ;
4356: LD_ADDR_VAR 0 10
4360: PUSH
4361: LD_VAR 0 10
4365: PUSH
4366: LD_REAL  1.10000000000000E+0000
4369: MUL
4370: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4371: LD_ADDR_VAR 0 10
4375: PUSH
4376: LD_VAR 0 10
4380: PUSH
4381: LD_VAR 0 6
4385: PPUSH
4386: LD_INT 1
4388: PPUSH
4389: CALL_OW 259
4393: PUSH
4394: LD_REAL  1.15000000000000E+0000
4397: MUL
4398: MUL
4399: ST_TO_ADDR
// end ; unit_vehicle :
4400: GO 5224
4402: LD_INT 2
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 5212
4410: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4411: LD_VAR 0 6
4415: PPUSH
4416: CALL_OW 264
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: LD_INT 42
4426: PUSH
4427: LD_INT 24
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: IN
4435: IFFALSE 4456
// points := [ 25 , 5 , 3 ] ;
4437: LD_ADDR_VAR 0 9
4441: PUSH
4442: LD_INT 25
4444: PUSH
4445: LD_INT 5
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4456: LD_VAR 0 6
4460: PPUSH
4461: CALL_OW 264
4465: PUSH
4466: LD_INT 4
4468: PUSH
4469: LD_INT 43
4471: PUSH
4472: LD_INT 25
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: IN
4480: IFFALSE 4501
// points := [ 40 , 15 , 5 ] ;
4482: LD_ADDR_VAR 0 9
4486: PUSH
4487: LD_INT 40
4489: PUSH
4490: LD_INT 15
4492: PUSH
4493: LD_INT 5
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4501: LD_VAR 0 6
4505: PPUSH
4506: CALL_OW 264
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 23
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: IN
4521: IFFALSE 4542
// points := [ 7 , 25 , 8 ] ;
4523: LD_ADDR_VAR 0 9
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 25
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4542: LD_VAR 0 6
4546: PPUSH
4547: CALL_OW 264
4551: PUSH
4552: LD_INT 5
4554: PUSH
4555: LD_INT 27
4557: PUSH
4558: LD_INT 44
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: IN
4566: IFFALSE 4587
// points := [ 14 , 50 , 16 ] ;
4568: LD_ADDR_VAR 0 9
4572: PUSH
4573: LD_INT 14
4575: PUSH
4576: LD_INT 50
4578: PUSH
4579: LD_INT 16
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4587: LD_VAR 0 6
4591: PPUSH
4592: CALL_OW 264
4596: PUSH
4597: LD_INT 6
4599: PUSH
4600: LD_INT 46
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: IN
4607: IFFALSE 4628
// points := [ 32 , 120 , 70 ] ;
4609: LD_ADDR_VAR 0 9
4613: PUSH
4614: LD_INT 32
4616: PUSH
4617: LD_INT 120
4619: PUSH
4620: LD_INT 70
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4628: LD_VAR 0 6
4632: PPUSH
4633: CALL_OW 264
4637: PUSH
4638: LD_INT 7
4640: PUSH
4641: LD_INT 28
4643: PUSH
4644: LD_INT 45
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: IN
4652: IFFALSE 4673
// points := [ 35 , 20 , 45 ] ;
4654: LD_ADDR_VAR 0 9
4658: PUSH
4659: LD_INT 35
4661: PUSH
4662: LD_INT 20
4664: PUSH
4665: LD_INT 45
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4673: LD_VAR 0 6
4677: PPUSH
4678: CALL_OW 264
4682: PUSH
4683: LD_INT 47
4685: PUSH
4686: EMPTY
4687: LIST
4688: IN
4689: IFFALSE 4710
// points := [ 67 , 45 , 75 ] ;
4691: LD_ADDR_VAR 0 9
4695: PUSH
4696: LD_INT 67
4698: PUSH
4699: LD_INT 45
4701: PUSH
4702: LD_INT 75
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4710: LD_VAR 0 6
4714: PPUSH
4715: CALL_OW 264
4719: PUSH
4720: LD_INT 26
4722: PUSH
4723: EMPTY
4724: LIST
4725: IN
4726: IFFALSE 4747
// points := [ 120 , 30 , 80 ] ;
4728: LD_ADDR_VAR 0 9
4732: PUSH
4733: LD_INT 120
4735: PUSH
4736: LD_INT 30
4738: PUSH
4739: LD_INT 80
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4747: LD_VAR 0 6
4751: PPUSH
4752: CALL_OW 264
4756: PUSH
4757: LD_INT 22
4759: PUSH
4760: EMPTY
4761: LIST
4762: IN
4763: IFFALSE 4784
// points := [ 40 , 1 , 1 ] ;
4765: LD_ADDR_VAR 0 9
4769: PUSH
4770: LD_INT 40
4772: PUSH
4773: LD_INT 1
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4784: LD_VAR 0 6
4788: PPUSH
4789: CALL_OW 264
4793: PUSH
4794: LD_INT 29
4796: PUSH
4797: EMPTY
4798: LIST
4799: IN
4800: IFFALSE 4821
// points := [ 70 , 200 , 400 ] ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: LD_INT 70
4809: PUSH
4810: LD_INT 200
4812: PUSH
4813: LD_INT 400
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4821: LD_VAR 0 6
4825: PPUSH
4826: CALL_OW 264
4830: PUSH
4831: LD_INT 14
4833: PUSH
4834: LD_INT 53
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: IN
4841: IFFALSE 4862
// points := [ 40 , 10 , 20 ] ;
4843: LD_ADDR_VAR 0 9
4847: PUSH
4848: LD_INT 40
4850: PUSH
4851: LD_INT 10
4853: PUSH
4854: LD_INT 20
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4862: LD_VAR 0 6
4866: PPUSH
4867: CALL_OW 264
4871: PUSH
4872: LD_INT 9
4874: PUSH
4875: EMPTY
4876: LIST
4877: IN
4878: IFFALSE 4899
// points := [ 5 , 70 , 20 ] ;
4880: LD_ADDR_VAR 0 9
4884: PUSH
4885: LD_INT 5
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: LD_INT 20
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4899: LD_VAR 0 6
4903: PPUSH
4904: CALL_OW 264
4908: PUSH
4909: LD_INT 10
4911: PUSH
4912: EMPTY
4913: LIST
4914: IN
4915: IFFALSE 4936
// points := [ 35 , 110 , 70 ] ;
4917: LD_ADDR_VAR 0 9
4921: PUSH
4922: LD_INT 35
4924: PUSH
4925: LD_INT 110
4927: PUSH
4928: LD_INT 70
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL_OW 265
4945: PUSH
4946: LD_INT 25
4948: EQUAL
4949: IFFALSE 4970
// points := [ 80 , 65 , 100 ] ;
4951: LD_ADDR_VAR 0 9
4955: PUSH
4956: LD_INT 80
4958: PUSH
4959: LD_INT 65
4961: PUSH
4962: LD_INT 100
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4970: LD_VAR 0 6
4974: PPUSH
4975: CALL_OW 263
4979: PUSH
4980: LD_INT 1
4982: EQUAL
4983: IFFALSE 5018
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
4985: LD_ADDR_VAR 0 10
4989: PUSH
4990: LD_VAR 0 10
4994: PUSH
4995: LD_VAR 0 6
4999: PPUSH
5000: CALL_OW 311
5004: PPUSH
5005: LD_INT 3
5007: PPUSH
5008: CALL_OW 259
5012: PUSH
5013: LD_INT 4
5015: MUL
5016: MUL
5017: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5018: LD_VAR 0 6
5022: PPUSH
5023: CALL_OW 263
5027: PUSH
5028: LD_INT 2
5030: EQUAL
5031: IFFALSE 5082
// begin j := IsControledBy ( i ) ;
5033: LD_ADDR_VAR 0 7
5037: PUSH
5038: LD_VAR 0 6
5042: PPUSH
5043: CALL_OW 312
5047: ST_TO_ADDR
// if j then
5048: LD_VAR 0 7
5052: IFFALSE 5082
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5054: LD_ADDR_VAR 0 10
5058: PUSH
5059: LD_VAR 0 10
5063: PUSH
5064: LD_VAR 0 7
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL_OW 259
5076: PUSH
5077: LD_INT 3
5079: MUL
5080: MUL
5081: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5082: LD_VAR 0 6
5086: PPUSH
5087: CALL_OW 264
5091: PUSH
5092: LD_INT 5
5094: PUSH
5095: LD_INT 6
5097: PUSH
5098: LD_INT 46
5100: PUSH
5101: LD_INT 44
5103: PUSH
5104: LD_INT 47
5106: PUSH
5107: LD_INT 45
5109: PUSH
5110: LD_INT 28
5112: PUSH
5113: LD_INT 7
5115: PUSH
5116: LD_INT 27
5118: PUSH
5119: LD_INT 29
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: IN
5134: PUSH
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_INT 52
5142: PPUSH
5143: CALL_OW 321
5147: PUSH
5148: LD_INT 2
5150: EQUAL
5151: AND
5152: IFFALSE 5169
// bpoints := bpoints * 1.2 ;
5154: LD_ADDR_VAR 0 10
5158: PUSH
5159: LD_VAR 0 10
5163: PUSH
5164: LD_REAL  1.20000000000000E+0000
5167: MUL
5168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5169: LD_VAR 0 6
5173: PPUSH
5174: CALL_OW 264
5178: PUSH
5179: LD_INT 6
5181: PUSH
5182: LD_INT 46
5184: PUSH
5185: LD_INT 47
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: IN
5193: IFFALSE 5210
// bpoints := bpoints * 1.2 ;
5195: LD_ADDR_VAR 0 10
5199: PUSH
5200: LD_VAR 0 10
5204: PUSH
5205: LD_REAL  1.20000000000000E+0000
5208: MUL
5209: ST_TO_ADDR
// end ; unit_building :
5210: GO 5224
5212: LD_INT 3
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5223
5220: POP
// ; end ;
5221: GO 5224
5223: POP
// for j = 1 to 3 do
5224: LD_ADDR_VAR 0 7
5228: PUSH
5229: DOUBLE
5230: LD_INT 1
5232: DEC
5233: ST_TO_ADDR
5234: LD_INT 3
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5291
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: LD_VAR 0 5
5249: PPUSH
5250: LD_VAR 0 7
5254: PPUSH
5255: LD_VAR 0 5
5259: PUSH
5260: LD_VAR 0 7
5264: ARRAY
5265: PUSH
5266: LD_VAR 0 9
5270: PUSH
5271: LD_VAR 0 7
5275: ARRAY
5276: PUSH
5277: LD_VAR 0 10
5281: MUL
5282: PLUS
5283: PPUSH
5284: CALL_OW 1
5288: ST_TO_ADDR
5289: GO 5237
5291: POP
5292: POP
// end ;
5293: GO 3776
5295: POP
5296: POP
// result := Replace ( result , 4 , tmp ) ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: LD_VAR 0 5
5306: PPUSH
5307: LD_INT 4
5309: PPUSH
5310: LD_VAR 0 8
5314: PPUSH
5315: CALL_OW 1
5319: ST_TO_ADDR
// end ;
5320: LD_VAR 0 5
5324: RET
// export function DangerAtRange ( unit , range ) ; begin
5325: LD_INT 0
5327: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 255
5342: PPUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 250
5352: PPUSH
5353: LD_VAR 0 1
5357: PPUSH
5358: CALL_OW 251
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL 3646 0 4
5372: ST_TO_ADDR
// end ;
5373: LD_VAR 0 3
5377: RET
// export function IsExtension ( b ) ; begin
5378: LD_INT 0
5380: PPUSH
// result := false ;
5381: LD_ADDR_VAR 0 2
5385: PUSH
5386: LD_INT 0
5388: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 266
5398: PUSH
5399: LD_INT 23
5401: PUSH
5402: LD_INT 20
5404: PUSH
5405: LD_INT 22
5407: PUSH
5408: LD_INT 17
5410: PUSH
5411: LD_INT 24
5413: PUSH
5414: LD_INT 21
5416: PUSH
5417: LD_INT 19
5419: PUSH
5420: LD_INT 16
5422: PUSH
5423: LD_INT 25
5425: PUSH
5426: LD_INT 18
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: IN
5441: IFFALSE 5451
// result := true ;
5443: LD_ADDR_VAR 0 2
5447: PUSH
5448: LD_INT 1
5450: ST_TO_ADDR
// end ;
5451: LD_VAR 0 2
5455: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
// result := [ ] ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: EMPTY
5467: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_INT 21
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 69
5487: ST_TO_ADDR
// if not tmp then
5488: LD_VAR 0 3
5492: NOT
5493: IFFALSE 5497
// exit ;
5495: GO 5547
// for i in tmp do
5497: LD_ADDR_VAR 0 4
5501: PUSH
5502: LD_VAR 0 3
5506: PUSH
5507: FOR_IN
5508: IFFALSE 5545
// if GetBase ( i ) = base then
5510: LD_VAR 0 4
5514: PPUSH
5515: CALL_OW 274
5519: PUSH
5520: LD_VAR 0 1
5524: EQUAL
5525: IFFALSE 5543
// result := result ^ i ;
5527: LD_ADDR_VAR 0 2
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_VAR 0 4
5541: ADD
5542: ST_TO_ADDR
5543: GO 5507
5545: POP
5546: POP
// end ;
5547: LD_VAR 0 2
5551: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5552: LD_INT 0
5554: PPUSH
5555: PPUSH
// if BuildingStatus ( b ) = bs_build then
5556: LD_VAR 0 2
5560: PPUSH
5561: CALL_OW 461
5565: PUSH
5566: LD_INT 1
5568: EQUAL
5569: IFFALSE 5629
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5571: LD_VAR 0 1
5575: PPUSH
5576: LD_STRING h
5578: PUSH
5579: LD_VAR 0 2
5583: PPUSH
5584: CALL_OW 250
5588: PUSH
5589: LD_VAR 0 2
5593: PPUSH
5594: CALL_OW 251
5598: PUSH
5599: LD_VAR 0 2
5603: PUSH
5604: LD_INT 0
5606: PUSH
5607: LD_INT 0
5609: PUSH
5610: LD_INT 0
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: PPUSH
5625: CALL_OW 446
// end ;
5629: LD_VAR 0 3
5633: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5634: LD_INT 0
5636: PPUSH
5637: PPUSH
5638: PPUSH
5639: PPUSH
5640: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5641: LD_VAR 0 1
5645: NOT
5646: PUSH
5647: LD_VAR 0 1
5651: PPUSH
5652: CALL_OW 263
5656: PUSH
5657: LD_INT 2
5659: EQUAL
5660: NOT
5661: OR
5662: IFFALSE 5666
// exit ;
5664: GO 5938
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5666: LD_ADDR_VAR 0 6
5670: PUSH
5671: LD_INT 22
5673: PUSH
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 255
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 2
5690: PUSH
5691: LD_INT 30
5693: PUSH
5694: LD_INT 36
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 34
5703: PUSH
5704: LD_INT 31
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: ST_TO_ADDR
// if not tmp then
5725: LD_VAR 0 6
5729: NOT
5730: IFFALSE 5734
// exit ;
5732: GO 5938
// result := [ ] ;
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: EMPTY
5740: ST_TO_ADDR
// for i in tmp do
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_VAR 0 6
5750: PUSH
5751: FOR_IN
5752: IFFALSE 5800
// begin t := UnitsInside ( i ) ;
5754: LD_ADDR_VAR 0 4
5758: PUSH
5759: LD_VAR 0 3
5763: PPUSH
5764: CALL_OW 313
5768: ST_TO_ADDR
// if t then
5769: LD_VAR 0 4
5773: IFFALSE 5798
// result := Insert ( result , 1 , t ) ;
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_VAR 0 4
5792: PPUSH
5793: CALL_OW 2
5797: ST_TO_ADDR
// end ;
5798: GO 5751
5800: POP
5801: POP
// if not result then
5802: LD_VAR 0 2
5806: NOT
5807: IFFALSE 5811
// exit ;
5809: GO 5938
// mech := 0 ;
5811: LD_ADDR_VAR 0 5
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// for i in result do
5819: LD_ADDR_VAR 0 3
5823: PUSH
5824: LD_VAR 0 2
5828: PUSH
5829: FOR_IN
5830: IFFALSE 5912
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: LD_INT 3
5844: PPUSH
5845: CALL_OW 259
5849: PUSH
5850: LD_VAR 0 3
5854: PPUSH
5855: CALL_OW 432
5859: MINUS
5860: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5861: LD_VAR 0 4
5865: PUSH
5866: LD_VAR 0 5
5870: PUSH
5871: LD_INT 1
5873: ARRAY
5874: PPUSH
5875: LD_INT 3
5877: PPUSH
5878: CALL_OW 259
5882: PUSH
5883: LD_VAR 0 5
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: CALL_OW 432
5896: MINUS
5897: GREATEREQUAL
5898: IFFALSE 5910
// mech := i ;
5900: LD_ADDR_VAR 0 5
5904: PUSH
5905: LD_VAR 0 3
5909: ST_TO_ADDR
// end ;
5910: GO 5829
5912: POP
5913: POP
// if mech then
5914: LD_VAR 0 5
5918: IFFALSE 5938
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_VAR 0 5
5929: PUSH
5930: LD_INT 1
5932: ARRAY
5933: PPUSH
5934: CALL_OW 135
// end ;
5938: LD_VAR 0 2
5942: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
5943: LD_INT 0
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
// result := [ ] ;
5957: LD_ADDR_VAR 0 6
5961: PUSH
5962: EMPTY
5963: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5964: LD_VAR 0 1
5968: PPUSH
5969: CALL_OW 266
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 1
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: IN
5984: NOT
5985: IFFALSE 5989
// exit ;
5987: GO 7108
// if name then
5989: LD_VAR 0 2
5993: IFFALSE 6009
// SetBName ( base_dep , name ) ;
5995: LD_VAR 0 1
5999: PPUSH
6000: LD_VAR 0 2
6004: PPUSH
6005: CALL_OW 500
// base := GetBase ( base_dep ) ;
6009: LD_ADDR_VAR 0 14
6013: PUSH
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 274
6023: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6024: LD_ADDR_VAR 0 15
6028: PUSH
6029: LD_VAR 0 1
6033: PPUSH
6034: CALL_OW 255
6038: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6039: LD_ADDR_VAR 0 16
6043: PUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 248
6053: ST_TO_ADDR
// if sources then
6054: LD_VAR 0 4
6058: IFFALSE 6105
// for i = 1 to 3 do
6060: LD_ADDR_VAR 0 7
6064: PUSH
6065: DOUBLE
6066: LD_INT 1
6068: DEC
6069: ST_TO_ADDR
6070: LD_INT 3
6072: PUSH
6073: FOR_TO
6074: IFFALSE 6103
// AddResourceType ( base , i , sources [ i ] ) ;
6076: LD_VAR 0 14
6080: PPUSH
6081: LD_VAR 0 7
6085: PPUSH
6086: LD_VAR 0 4
6090: PUSH
6091: LD_VAR 0 7
6095: ARRAY
6096: PPUSH
6097: CALL_OW 276
6101: GO 6073
6103: POP
6104: POP
// buildings := GetBaseBuildings ( base ) ;
6105: LD_ADDR_VAR 0 17
6109: PUSH
6110: LD_VAR 0 14
6114: PPUSH
6115: CALL 5456 0 1
6119: ST_TO_ADDR
// InitHc ;
6120: CALL_OW 19
// InitUc ;
6124: CALL_OW 18
// uc_side := side ;
6128: LD_ADDR_OWVAR 20
6132: PUSH
6133: LD_VAR 0 15
6137: ST_TO_ADDR
// uc_nation := nation ;
6138: LD_ADDR_OWVAR 21
6142: PUSH
6143: LD_VAR 0 16
6147: ST_TO_ADDR
// if buildings then
6148: LD_VAR 0 17
6152: IFFALSE 6967
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6154: LD_VAR 0 17
6158: PPUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 30
6164: PUSH
6165: LD_INT 32
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 30
6174: PUSH
6175: LD_INT 33
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 72
6191: IFFALSE 6274
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6193: LD_ADDR_VAR 0 7
6197: PUSH
6198: LD_VAR 0 17
6202: PPUSH
6203: LD_INT 2
6205: PUSH
6206: LD_INT 30
6208: PUSH
6209: LD_INT 32
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 30
6218: PUSH
6219: LD_INT 33
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PUSH
6236: FOR_IN
6237: IFFALSE 6272
// begin if not GetBWeapon ( i ) then
6239: LD_VAR 0 7
6243: PPUSH
6244: CALL_OW 269
6248: NOT
6249: IFFALSE 6270
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6251: LD_VAR 0 7
6255: PPUSH
6256: LD_VAR 0 7
6260: PPUSH
6261: CALL 7113 0 1
6265: PPUSH
6266: CALL_OW 431
// end ;
6270: GO 6236
6272: POP
6273: POP
// end ; for i = 1 to personel do
6274: LD_ADDR_VAR 0 7
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_VAR 0 5
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6947
// begin if i > 4 then
6292: LD_VAR 0 7
6296: PUSH
6297: LD_INT 4
6299: GREATER
6300: IFFALSE 6304
// break ;
6302: GO 6947
// case i of 1 :
6304: LD_VAR 0 7
6308: PUSH
6309: LD_INT 1
6311: DOUBLE
6312: EQUAL
6313: IFTRUE 6317
6315: GO 6390
6317: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6318: LD_ADDR_VAR 0 11
6322: PUSH
6323: LD_VAR 0 17
6327: PPUSH
6328: LD_INT 22
6330: PUSH
6331: LD_VAR 0 15
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: LD_INT 30
6345: PUSH
6346: LD_INT 32
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 30
6355: PUSH
6356: LD_INT 4
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 30
6365: PUSH
6366: LD_INT 5
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 72
6387: ST_TO_ADDR
6388: GO 6612
6390: LD_INT 2
6392: DOUBLE
6393: EQUAL
6394: IFTRUE 6398
6396: GO 6460
6398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6399: LD_ADDR_VAR 0 11
6403: PUSH
6404: LD_VAR 0 17
6408: PPUSH
6409: LD_INT 22
6411: PUSH
6412: LD_VAR 0 15
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 30
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 30
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 72
6457: ST_TO_ADDR
6458: GO 6612
6460: LD_INT 3
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6530
6468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6469: LD_ADDR_VAR 0 11
6473: PUSH
6474: LD_VAR 0 17
6478: PPUSH
6479: LD_INT 22
6481: PUSH
6482: LD_VAR 0 15
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 30
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 30
6506: PUSH
6507: LD_INT 3
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 72
6527: ST_TO_ADDR
6528: GO 6612
6530: LD_INT 4
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6611
6538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6539: LD_ADDR_VAR 0 11
6543: PUSH
6544: LD_VAR 0 17
6548: PPUSH
6549: LD_INT 22
6551: PUSH
6552: LD_VAR 0 15
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 30
6566: PUSH
6567: LD_INT 6
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 30
6576: PUSH
6577: LD_INT 7
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 30
6586: PUSH
6587: LD_INT 8
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 72
6608: ST_TO_ADDR
6609: GO 6612
6611: POP
// if not f then
6612: LD_VAR 0 11
6616: NOT
6617: IFFALSE 6621
// continue ;
6619: GO 6289
// x := personel [ i ] ;
6621: LD_ADDR_VAR 0 12
6625: PUSH
6626: LD_VAR 0 5
6630: PUSH
6631: LD_VAR 0 7
6635: ARRAY
6636: ST_TO_ADDR
// if x = - 1 then
6637: LD_VAR 0 12
6641: PUSH
6642: LD_INT 1
6644: NEG
6645: EQUAL
6646: IFFALSE 6768
// begin for j in f do
6648: LD_ADDR_VAR 0 8
6652: PUSH
6653: LD_VAR 0 11
6657: PUSH
6658: FOR_IN
6659: IFFALSE 6764
// repeat PrepareHuman ( false , i , skill ) ;
6661: LD_INT 0
6663: PPUSH
6664: LD_VAR 0 7
6668: PPUSH
6669: LD_VAR 0 3
6673: PPUSH
6674: CALL_OW 380
// un := CreateHuman ;
6678: LD_ADDR_VAR 0 13
6682: PUSH
6683: CALL_OW 44
6687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6688: LD_ADDR_VAR 0 6
6692: PUSH
6693: LD_VAR 0 6
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: LD_VAR 0 13
6705: PPUSH
6706: CALL_OW 2
6710: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6711: LD_VAR 0 13
6715: PPUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6725: LD_VAR 0 8
6729: PPUSH
6730: CALL_OW 313
6734: PUSH
6735: LD_INT 6
6737: EQUAL
6738: PUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: CALL_OW 266
6748: PUSH
6749: LD_INT 32
6751: PUSH
6752: LD_INT 31
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: IN
6759: OR
6760: IFFALSE 6661
6762: GO 6658
6764: POP
6765: POP
// end else
6766: GO 6945
// for j = 1 to x do
6768: LD_ADDR_VAR 0 8
6772: PUSH
6773: DOUBLE
6774: LD_INT 1
6776: DEC
6777: ST_TO_ADDR
6778: LD_VAR 0 12
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6943
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6786: LD_VAR 0 11
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PPUSH
6795: CALL_OW 313
6799: PUSH
6800: LD_VAR 0 11
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PPUSH
6809: CALL_OW 266
6813: PUSH
6814: LD_INT 32
6816: PUSH
6817: LD_INT 31
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: IN
6824: AND
6825: PUSH
6826: LD_VAR 0 11
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: CALL_OW 313
6839: PUSH
6840: LD_INT 6
6842: EQUAL
6843: OR
6844: IFFALSE 6864
// f := Delete ( f , 1 ) ;
6846: LD_ADDR_VAR 0 11
6850: PUSH
6851: LD_VAR 0 11
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: CALL_OW 3
6863: ST_TO_ADDR
// if not f then
6864: LD_VAR 0 11
6868: NOT
6869: IFFALSE 6873
// break ;
6871: GO 6943
// PrepareHuman ( false , i , skill ) ;
6873: LD_INT 0
6875: PPUSH
6876: LD_VAR 0 7
6880: PPUSH
6881: LD_VAR 0 3
6885: PPUSH
6886: CALL_OW 380
// un := CreateHuman ;
6890: LD_ADDR_VAR 0 13
6894: PUSH
6895: CALL_OW 44
6899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6900: LD_ADDR_VAR 0 6
6904: PUSH
6905: LD_VAR 0 6
6909: PPUSH
6910: LD_INT 1
6912: PPUSH
6913: LD_VAR 0 13
6917: PPUSH
6918: CALL_OW 2
6922: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6923: LD_VAR 0 13
6927: PPUSH
6928: LD_VAR 0 11
6932: PUSH
6933: LD_INT 1
6935: ARRAY
6936: PPUSH
6937: CALL_OW 52
// end ;
6941: GO 6783
6943: POP
6944: POP
// end ;
6945: GO 6289
6947: POP
6948: POP
// result := result ^ buildings ;
6949: LD_ADDR_VAR 0 6
6953: PUSH
6954: LD_VAR 0 6
6958: PUSH
6959: LD_VAR 0 17
6963: ADD
6964: ST_TO_ADDR
// end else
6965: GO 7108
// begin for i = 1 to personel do
6967: LD_ADDR_VAR 0 7
6971: PUSH
6972: DOUBLE
6973: LD_INT 1
6975: DEC
6976: ST_TO_ADDR
6977: LD_VAR 0 5
6981: PUSH
6982: FOR_TO
6983: IFFALSE 7106
// begin if i > 4 then
6985: LD_VAR 0 7
6989: PUSH
6990: LD_INT 4
6992: GREATER
6993: IFFALSE 6997
// break ;
6995: GO 7106
// x := personel [ i ] ;
6997: LD_ADDR_VAR 0 12
7001: PUSH
7002: LD_VAR 0 5
7006: PUSH
7007: LD_VAR 0 7
7011: ARRAY
7012: ST_TO_ADDR
// if x = - 1 then
7013: LD_VAR 0 12
7017: PUSH
7018: LD_INT 1
7020: NEG
7021: EQUAL
7022: IFFALSE 7026
// continue ;
7024: GO 6982
// PrepareHuman ( false , i , skill ) ;
7026: LD_INT 0
7028: PPUSH
7029: LD_VAR 0 7
7033: PPUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: CALL_OW 380
// un := CreateHuman ;
7043: LD_ADDR_VAR 0 13
7047: PUSH
7048: CALL_OW 44
7052: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7053: LD_VAR 0 13
7057: PPUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 250
7067: PPUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 251
7077: PPUSH
7078: LD_INT 10
7080: PPUSH
7081: LD_INT 0
7083: PPUSH
7084: CALL_OW 50
// result := result ^ un ;
7088: LD_ADDR_VAR 0 6
7092: PUSH
7093: LD_VAR 0 6
7097: PUSH
7098: LD_VAR 0 13
7102: ADD
7103: ST_TO_ADDR
// end ;
7104: GO 6982
7106: POP
7107: POP
// end ; end ;
7108: LD_VAR 0 6
7112: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
7121: PPUSH
7122: PPUSH
7123: PPUSH
7124: PPUSH
7125: PPUSH
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
// result := false ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: LD_INT 0
7138: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7139: LD_VAR 0 1
7143: NOT
7144: PUSH
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL_OW 266
7154: PUSH
7155: LD_INT 32
7157: PUSH
7158: LD_INT 33
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: IN
7165: NOT
7166: OR
7167: IFFALSE 7171
// exit ;
7169: GO 8404
// nat := GetNation ( tower ) ;
7171: LD_ADDR_VAR 0 11
7175: PUSH
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL_OW 248
7185: ST_TO_ADDR
// side := GetSide ( tower ) ;
7186: LD_ADDR_VAR 0 15
7190: PUSH
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 255
7200: ST_TO_ADDR
// x := GetX ( tower ) ;
7201: LD_ADDR_VAR 0 9
7205: PUSH
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 250
7215: ST_TO_ADDR
// y := GetY ( tower ) ;
7216: LD_ADDR_VAR 0 10
7220: PUSH
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL_OW 251
7230: ST_TO_ADDR
// if not x or not y then
7231: LD_VAR 0 9
7235: NOT
7236: PUSH
7237: LD_VAR 0 10
7241: NOT
7242: OR
7243: IFFALSE 7247
// exit ;
7245: GO 8404
// weapon := 0 ;
7247: LD_ADDR_VAR 0 17
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// fac_list := [ ] ;
7255: LD_ADDR_VAR 0 16
7259: PUSH
7260: EMPTY
7261: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7262: LD_ADDR_VAR 0 5
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 274
7276: PPUSH
7277: CALL 5456 0 1
7281: PPUSH
7282: LD_INT 30
7284: PUSH
7285: LD_INT 3
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 72
7296: ST_TO_ADDR
// if not factories then
7297: LD_VAR 0 5
7301: NOT
7302: IFFALSE 7306
// exit ;
7304: GO 8404
// for i in factories do
7306: LD_ADDR_VAR 0 7
7310: PUSH
7311: LD_VAR 0 5
7315: PUSH
7316: FOR_IN
7317: IFFALSE 7342
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7319: LD_ADDR_VAR 0 16
7323: PUSH
7324: LD_VAR 0 16
7328: PUSH
7329: LD_VAR 0 7
7333: PPUSH
7334: CALL_OW 478
7338: UNION
7339: ST_TO_ADDR
7340: GO 7316
7342: POP
7343: POP
// if not fac_list then
7344: LD_VAR 0 16
7348: NOT
7349: IFFALSE 7353
// exit ;
7351: GO 8404
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7353: LD_ADDR_VAR 0 4
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: LD_INT 5
7363: PUSH
7364: LD_INT 9
7366: PUSH
7367: LD_INT 10
7369: PUSH
7370: LD_INT 6
7372: PUSH
7373: LD_INT 7
7375: PUSH
7376: LD_INT 11
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 27
7390: PUSH
7391: LD_INT 28
7393: PUSH
7394: LD_INT 26
7396: PUSH
7397: LD_INT 30
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 43
7408: PUSH
7409: LD_INT 44
7411: PUSH
7412: LD_INT 46
7414: PUSH
7415: LD_INT 45
7417: PUSH
7418: LD_INT 47
7420: PUSH
7421: LD_INT 49
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_VAR 0 11
7441: ARRAY
7442: ST_TO_ADDR
// for i in list do
7443: LD_ADDR_VAR 0 7
7447: PUSH
7448: LD_VAR 0 4
7452: PUSH
7453: FOR_IN
7454: IFFALSE 7487
// if not i in fac_list then
7456: LD_VAR 0 7
7460: PUSH
7461: LD_VAR 0 16
7465: IN
7466: NOT
7467: IFFALSE 7485
// list := list diff i ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 4
7478: PUSH
7479: LD_VAR 0 7
7483: DIFF
7484: ST_TO_ADDR
7485: GO 7453
7487: POP
7488: POP
// if not list then
7489: LD_VAR 0 4
7493: NOT
7494: IFFALSE 7498
// exit ;
7496: GO 8404
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7498: LD_VAR 0 11
7502: PUSH
7503: LD_INT 3
7505: EQUAL
7506: PUSH
7507: LD_INT 49
7509: PUSH
7510: LD_VAR 0 4
7514: IN
7515: AND
7516: PUSH
7517: LD_INT 31
7519: PPUSH
7520: LD_VAR 0 15
7524: PPUSH
7525: CALL_OW 321
7529: PUSH
7530: LD_INT 2
7532: EQUAL
7533: AND
7534: IFFALSE 7594
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7536: LD_INT 22
7538: PUSH
7539: LD_VAR 0 15
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 35
7550: PUSH
7551: LD_INT 49
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 91
7560: PUSH
7561: LD_VAR 0 1
7565: PUSH
7566: LD_INT 10
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: NOT
7584: IFFALSE 7594
// weapon := ru_time_lapser ;
7586: LD_ADDR_VAR 0 17
7590: PUSH
7591: LD_INT 49
7593: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7594: LD_VAR 0 11
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: IN
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: LD_VAR 0 4
7617: IN
7618: PUSH
7619: LD_INT 30
7621: PUSH
7622: LD_VAR 0 4
7626: IN
7627: OR
7628: AND
7629: PUSH
7630: LD_INT 6
7632: PPUSH
7633: LD_VAR 0 15
7637: PPUSH
7638: CALL_OW 321
7642: PUSH
7643: LD_INT 2
7645: EQUAL
7646: AND
7647: IFFALSE 7812
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7649: LD_INT 22
7651: PUSH
7652: LD_VAR 0 15
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: LD_INT 35
7666: PUSH
7667: LD_INT 11
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 35
7676: PUSH
7677: LD_INT 30
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 91
7691: PUSH
7692: LD_VAR 0 1
7696: PUSH
7697: LD_INT 15
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: NOT
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 15
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 30
7733: PUSH
7734: LD_INT 32
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 30
7743: PUSH
7744: LD_INT 33
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 12
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: PPUSH
7780: CALL_OW 69
7784: PUSH
7785: LD_INT 1
7787: GREATER
7788: AND
7789: IFFALSE 7812
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7791: LD_ADDR_VAR 0 17
7795: PUSH
7796: LD_INT 11
7798: PUSH
7799: LD_INT 30
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_VAR 0 11
7810: ARRAY
7811: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7812: LD_VAR 0 17
7816: NOT
7817: PUSH
7818: LD_INT 40
7820: PPUSH
7821: LD_VAR 0 15
7825: PPUSH
7826: CALL_OW 321
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: AND
7835: PUSH
7836: LD_INT 7
7838: PUSH
7839: LD_VAR 0 4
7843: IN
7844: PUSH
7845: LD_INT 28
7847: PUSH
7848: LD_VAR 0 4
7852: IN
7853: OR
7854: PUSH
7855: LD_INT 45
7857: PUSH
7858: LD_VAR 0 4
7862: IN
7863: OR
7864: AND
7865: IFFALSE 8119
// begin hex := _GetHexInfo ( x , y ) ;
7867: LD_ADDR_VAR 0 3
7871: PUSH
7872: LD_VAR 0 9
7876: PPUSH
7877: LD_VAR 0 10
7881: PPUSH
7882: CALL 1911 0 2
7886: ST_TO_ADDR
// if hex [ 1 ] then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 1
7894: ARRAY
7895: IFFALSE 7899
// exit ;
7897: GO 8404
// height := hex [ 2 ] ;
7899: LD_ADDR_VAR 0 14
7903: PUSH
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 2
7911: ARRAY
7912: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7913: LD_ADDR_VAR 0 13
7917: PUSH
7918: LD_INT 0
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 5
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: ST_TO_ADDR
// for i in tmp do
7936: LD_ADDR_VAR 0 7
7940: PUSH
7941: LD_VAR 0 13
7945: PUSH
7946: FOR_IN
7947: IFFALSE 8117
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7949: LD_ADDR_VAR 0 8
7953: PUSH
7954: LD_VAR 0 9
7958: PPUSH
7959: LD_VAR 0 7
7963: PPUSH
7964: LD_INT 5
7966: PPUSH
7967: CALL_OW 272
7971: PUSH
7972: LD_VAR 0 10
7976: PPUSH
7977: LD_VAR 0 7
7981: PPUSH
7982: LD_INT 5
7984: PPUSH
7985: CALL_OW 273
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
7994: LD_VAR 0 8
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: LD_VAR 0 8
8007: PUSH
8008: LD_INT 2
8010: ARRAY
8011: PPUSH
8012: CALL_OW 488
8016: IFFALSE 8115
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8018: LD_ADDR_VAR 0 3
8022: PUSH
8023: LD_VAR 0 8
8027: PUSH
8028: LD_INT 1
8030: ARRAY
8031: PPUSH
8032: LD_VAR 0 8
8036: PUSH
8037: LD_INT 2
8039: ARRAY
8040: PPUSH
8041: CALL 1911 0 2
8045: ST_TO_ADDR
// if hex [ 1 ] then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 1
8053: ARRAY
8054: IFFALSE 8058
// continue ;
8056: GO 7946
// h := hex [ 2 ] ;
8058: LD_ADDR_VAR 0 12
8062: PUSH
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 2
8070: ARRAY
8071: ST_TO_ADDR
// if h + 7 < height then
8072: LD_VAR 0 12
8076: PUSH
8077: LD_INT 7
8079: PLUS
8080: PUSH
8081: LD_VAR 0 14
8085: LESS
8086: IFFALSE 8115
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8088: LD_ADDR_VAR 0 17
8092: PUSH
8093: LD_INT 7
8095: PUSH
8096: LD_INT 28
8098: PUSH
8099: LD_INT 45
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: LD_VAR 0 11
8111: ARRAY
8112: ST_TO_ADDR
// break ;
8113: GO 8117
// end ; end ; end ;
8115: GO 7946
8117: POP
8118: POP
// end ; if not weapon then
8119: LD_VAR 0 17
8123: NOT
8124: IFFALSE 8286
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8126: LD_ADDR_VAR 0 4
8130: PUSH
8131: LD_VAR 0 4
8135: PUSH
8136: LD_INT 11
8138: PUSH
8139: LD_INT 30
8141: PUSH
8142: LD_INT 49
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: DIFF
8150: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8151: LD_ADDR_VAR 0 17
8155: PUSH
8156: LD_VAR 0 4
8160: PUSH
8161: LD_INT 1
8163: PPUSH
8164: LD_VAR 0 4
8168: PPUSH
8169: CALL_OW 12
8173: ARRAY
8174: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8175: LD_ADDR_VAR 0 13
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_VAR 0 15
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: LD_INT 35
8197: PUSH
8198: LD_INT 0
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 69
8217: ST_TO_ADDR
// for i in tmp do
8218: LD_ADDR_VAR 0 7
8222: PUSH
8223: LD_VAR 0 13
8227: PUSH
8228: FOR_IN
8229: IFFALSE 8254
// list := list diff GetBWeapon ( i ) ;
8231: LD_ADDR_VAR 0 4
8235: PUSH
8236: LD_VAR 0 4
8240: PUSH
8241: LD_VAR 0 7
8245: PPUSH
8246: CALL_OW 269
8250: DIFF
8251: ST_TO_ADDR
8252: GO 8228
8254: POP
8255: POP
// if list then
8256: LD_VAR 0 4
8260: IFFALSE 8286
// weapon := list [ rand ( 1 , list ) ] ;
8262: LD_ADDR_VAR 0 17
8266: PUSH
8267: LD_VAR 0 4
8271: PUSH
8272: LD_INT 1
8274: PPUSH
8275: LD_VAR 0 4
8279: PPUSH
8280: CALL_OW 12
8284: ARRAY
8285: ST_TO_ADDR
// end ; if weapon then
8286: LD_VAR 0 17
8290: IFFALSE 8404
// begin tmp := CostOfWeapon ( weapon ) ;
8292: LD_ADDR_VAR 0 13
8296: PUSH
8297: LD_VAR 0 17
8301: PPUSH
8302: CALL_OW 451
8306: ST_TO_ADDR
// j := GetBase ( tower ) ;
8307: LD_ADDR_VAR 0 8
8311: PUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 274
8321: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8322: LD_VAR 0 8
8326: PPUSH
8327: LD_INT 1
8329: PPUSH
8330: CALL_OW 275
8334: PUSH
8335: LD_VAR 0 13
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: GREATEREQUAL
8344: PUSH
8345: LD_VAR 0 8
8349: PPUSH
8350: LD_INT 2
8352: PPUSH
8353: CALL_OW 275
8357: PUSH
8358: LD_VAR 0 13
8362: PUSH
8363: LD_INT 2
8365: ARRAY
8366: GREATEREQUAL
8367: AND
8368: PUSH
8369: LD_VAR 0 8
8373: PPUSH
8374: LD_INT 3
8376: PPUSH
8377: CALL_OW 275
8381: PUSH
8382: LD_VAR 0 13
8386: PUSH
8387: LD_INT 3
8389: ARRAY
8390: GREATEREQUAL
8391: AND
8392: IFFALSE 8404
// result := weapon ;
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_VAR 0 17
8403: ST_TO_ADDR
// end ; end ;
8404: LD_VAR 0 2
8408: RET
// export function Compare ( val1 , val2 ) ; begin
8409: LD_INT 0
8411: PPUSH
// if val1 = val2 then
8412: LD_VAR 0 1
8416: PUSH
8417: LD_VAR 0 2
8421: EQUAL
8422: IFFALSE 8434
// result := true else
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
8432: GO 8442
// result := false ;
8434: LD_ADDR_VAR 0 3
8438: PUSH
8439: LD_INT 0
8441: ST_TO_ADDR
// end ;
8442: LD_VAR 0 3
8446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
// result := true ;
8451: LD_ADDR_VAR 0 3
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// if array1 = array2 then
8459: LD_VAR 0 1
8463: PUSH
8464: LD_VAR 0 2
8468: EQUAL
8469: IFFALSE 8534
// begin for i = 1 to array1 do
8471: LD_ADDR_VAR 0 4
8475: PUSH
8476: DOUBLE
8477: LD_INT 1
8479: DEC
8480: ST_TO_ADDR
8481: LD_VAR 0 1
8485: PUSH
8486: FOR_TO
8487: IFFALSE 8530
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8489: LD_VAR 0 1
8493: PUSH
8494: LD_VAR 0 4
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_VAR 0 4
8509: ARRAY
8510: PPUSH
8511: CALL 8409 0 2
8515: NOT
8516: IFFALSE 8528
// begin result := false ;
8518: LD_ADDR_VAR 0 3
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// break ;
8526: GO 8530
// end ;
8528: GO 8486
8530: POP
8531: POP
// end else
8532: GO 8542
// result := false ;
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 3
8546: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
// pom := GetBase ( fac ) ;
8552: LD_ADDR_VAR 0 5
8556: PUSH
8557: LD_VAR 0 1
8561: PPUSH
8562: CALL_OW 274
8566: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8567: LD_ADDR_VAR 0 4
8571: PUSH
8572: LD_VAR 0 2
8576: PUSH
8577: LD_INT 1
8579: ARRAY
8580: PPUSH
8581: LD_VAR 0 2
8585: PUSH
8586: LD_INT 2
8588: ARRAY
8589: PPUSH
8590: LD_VAR 0 2
8594: PUSH
8595: LD_INT 3
8597: ARRAY
8598: PPUSH
8599: LD_VAR 0 2
8603: PUSH
8604: LD_INT 4
8606: ARRAY
8607: PPUSH
8608: CALL_OW 449
8612: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_INT 1
8620: PPUSH
8621: CALL_OW 275
8625: PUSH
8626: LD_VAR 0 4
8630: PUSH
8631: LD_INT 1
8633: ARRAY
8634: GREATEREQUAL
8635: PUSH
8636: LD_VAR 0 5
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 275
8648: PUSH
8649: LD_VAR 0 4
8653: PUSH
8654: LD_INT 2
8656: ARRAY
8657: GREATEREQUAL
8658: AND
8659: PUSH
8660: LD_VAR 0 5
8664: PPUSH
8665: LD_INT 3
8667: PPUSH
8668: CALL_OW 275
8672: PUSH
8673: LD_VAR 0 4
8677: PUSH
8678: LD_INT 3
8680: ARRAY
8681: GREATEREQUAL
8682: AND
8683: IFFALSE 8695
// result := true else
8685: LD_ADDR_VAR 0 3
8689: PUSH
8690: LD_INT 1
8692: ST_TO_ADDR
8693: GO 8703
// result := false ;
8695: LD_ADDR_VAR 0 3
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// end ;
8703: LD_VAR 0 3
8707: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8708: LD_INT 0
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
// result := false ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8727: LD_VAR 0 1
8731: NOT
8732: PUSH
8733: LD_VAR 0 2
8737: NOT
8738: OR
8739: PUSH
8740: LD_VAR 0 5
8744: PUSH
8745: LD_INT 0
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: LD_INT 3
8756: PUSH
8757: LD_INT 4
8759: PUSH
8760: LD_INT 5
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: IN
8771: NOT
8772: OR
8773: PUSH
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_VAR 0 4
8783: PPUSH
8784: CALL_OW 488
8788: NOT
8789: OR
8790: IFFALSE 8794
// exit ;
8792: GO 9468
// pom := GetBase ( bdepot ) ;
8794: LD_ADDR_VAR 0 9
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 274
8808: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8809: LD_ADDR_VAR 0 10
8813: PUSH
8814: LD_VAR 0 2
8818: PPUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 248
8828: PPUSH
8829: CALL_OW 450
8833: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8834: LD_VAR 0 9
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: CALL_OW 275
8846: PUSH
8847: LD_VAR 0 10
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: GREATEREQUAL
8856: PUSH
8857: LD_VAR 0 9
8861: PPUSH
8862: LD_INT 2
8864: PPUSH
8865: CALL_OW 275
8869: PUSH
8870: LD_VAR 0 10
8874: PUSH
8875: LD_INT 2
8877: ARRAY
8878: GREATEREQUAL
8879: AND
8880: PUSH
8881: LD_VAR 0 9
8885: PPUSH
8886: LD_INT 3
8888: PPUSH
8889: CALL_OW 275
8893: PUSH
8894: LD_VAR 0 10
8898: PUSH
8899: LD_INT 3
8901: ARRAY
8902: GREATEREQUAL
8903: AND
8904: NOT
8905: IFFALSE 8909
// exit ;
8907: GO 9468
// if GetBType ( bdepot ) = b_depot then
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL_OW 266
8918: PUSH
8919: LD_INT 0
8921: EQUAL
8922: IFFALSE 8934
// dist := 28 else
8924: LD_ADDR_VAR 0 13
8928: PUSH
8929: LD_INT 28
8931: ST_TO_ADDR
8932: GO 8942
// dist := 36 ;
8934: LD_ADDR_VAR 0 13
8938: PUSH
8939: LD_INT 36
8941: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8942: LD_VAR 0 1
8946: PPUSH
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 297
8961: PUSH
8962: LD_VAR 0 13
8966: GREATER
8967: IFFALSE 8971
// exit ;
8969: GO 9468
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8971: LD_ADDR_VAR 0 11
8975: PUSH
8976: LD_VAR 0 2
8980: PPUSH
8981: LD_VAR 0 3
8985: PPUSH
8986: LD_VAR 0 4
8990: PPUSH
8991: LD_VAR 0 5
8995: PPUSH
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 248
9005: PPUSH
9006: LD_INT 0
9008: PPUSH
9009: CALL 9473 0 6
9013: ST_TO_ADDR
// if not hexes then
9014: LD_VAR 0 11
9018: NOT
9019: IFFALSE 9023
// exit ;
9021: GO 9468
// hex := _GetHexInfo ( x , y ) ;
9023: LD_ADDR_VAR 0 14
9027: PUSH
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: CALL 1911 0 2
9042: ST_TO_ADDR
// if hex [ 1 ] then
9043: LD_VAR 0 14
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: IFFALSE 9055
// exit ;
9053: GO 9468
// height := hex [ 2 ] ;
9055: LD_ADDR_VAR 0 12
9059: PUSH
9060: LD_VAR 0 14
9064: PUSH
9065: LD_INT 2
9067: ARRAY
9068: ST_TO_ADDR
// for i = 1 to hexes do
9069: LD_ADDR_VAR 0 7
9073: PUSH
9074: DOUBLE
9075: LD_INT 1
9077: DEC
9078: ST_TO_ADDR
9079: LD_VAR 0 11
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9423
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9087: LD_VAR 0 11
9091: PUSH
9092: LD_VAR 0 7
9096: ARRAY
9097: PUSH
9098: LD_INT 1
9100: ARRAY
9101: PPUSH
9102: LD_VAR 0 11
9106: PUSH
9107: LD_VAR 0 7
9111: ARRAY
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PPUSH
9117: CALL_OW 488
9121: NOT
9122: IFFALSE 9126
// continue ;
9124: GO 9084
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9126: LD_ADDR_VAR 0 8
9130: PUSH
9131: LD_VAR 0 11
9135: PUSH
9136: LD_VAR 0 7
9140: ARRAY
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: LD_VAR 0 11
9150: PUSH
9151: LD_VAR 0 7
9155: ARRAY
9156: PUSH
9157: LD_INT 2
9159: ARRAY
9160: PPUSH
9161: CALL 1911 0 2
9165: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9166: LD_VAR 0 8
9170: PUSH
9171: LD_INT 1
9173: ARRAY
9174: PUSH
9175: LD_VAR 0 8
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PUSH
9184: LD_VAR 0 12
9188: PUSH
9189: LD_INT 2
9191: PLUS
9192: GREATER
9193: OR
9194: PUSH
9195: LD_VAR 0 8
9199: PUSH
9200: LD_INT 2
9202: ARRAY
9203: PUSH
9204: LD_VAR 0 12
9208: PUSH
9209: LD_INT 2
9211: MINUS
9212: LESS
9213: OR
9214: PUSH
9215: LD_VAR 0 8
9219: PUSH
9220: LD_INT 3
9222: ARRAY
9223: PUSH
9224: LD_INT 0
9226: PUSH
9227: LD_INT 8
9229: PUSH
9230: LD_INT 9
9232: PUSH
9233: LD_INT 10
9235: PUSH
9236: LD_INT 11
9238: PUSH
9239: LD_INT 12
9241: PUSH
9242: LD_INT 13
9244: PUSH
9245: LD_INT 16
9247: PUSH
9248: LD_INT 17
9250: PUSH
9251: LD_INT 18
9253: PUSH
9254: LD_INT 19
9256: PUSH
9257: LD_INT 20
9259: PUSH
9260: LD_INT 21
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: IN
9278: NOT
9279: OR
9280: PUSH
9281: LD_VAR 0 8
9285: PUSH
9286: LD_INT 4
9288: ARRAY
9289: OR
9290: PUSH
9291: LD_VAR 0 8
9295: PUSH
9296: LD_INT 5
9298: ARRAY
9299: NOT
9300: OR
9301: PUSH
9302: LD_VAR 0 8
9306: PUSH
9307: LD_INT 6
9309: ARRAY
9310: PUSH
9311: LD_INT 1
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: LD_INT 7
9319: PUSH
9320: LD_INT 9
9322: PUSH
9323: LD_INT 10
9325: PUSH
9326: LD_INT 11
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: IN
9337: NOT
9338: OR
9339: PUSH
9340: LD_VAR 0 11
9344: PUSH
9345: LD_VAR 0 7
9349: ARRAY
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: LD_VAR 0 11
9359: PUSH
9360: LD_VAR 0 7
9364: ARRAY
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 428
9374: PUSH
9375: LD_INT 0
9377: GREATER
9378: OR
9379: PUSH
9380: LD_VAR 0 11
9384: PUSH
9385: LD_VAR 0 7
9389: ARRAY
9390: PUSH
9391: LD_INT 1
9393: ARRAY
9394: PPUSH
9395: LD_VAR 0 11
9399: PUSH
9400: LD_VAR 0 7
9404: ARRAY
9405: PUSH
9406: LD_INT 2
9408: ARRAY
9409: PPUSH
9410: CALL_OW 351
9414: OR
9415: IFFALSE 9421
// exit ;
9417: POP
9418: POP
9419: GO 9468
// end ;
9421: GO 9084
9423: POP
9424: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9425: LD_VAR 0 1
9429: PPUSH
9430: CALL_OW 255
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: LD_VAR 0 4
9444: PPUSH
9445: LD_INT 20
9447: PPUSH
9448: CALL 3646 0 4
9452: PUSH
9453: LD_INT 4
9455: ARRAY
9456: IFFALSE 9460
// exit ;
9458: GO 9468
// result := true ;
9460: LD_ADDR_VAR 0 6
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// end ;
9468: LD_VAR 0 6
9472: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9473: LD_INT 0
9475: PPUSH
9476: PPUSH
9477: PPUSH
9478: PPUSH
9479: PPUSH
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
9484: PPUSH
9485: PPUSH
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
// result = [ ] ;
9533: LD_ADDR_VAR 0 7
9537: PUSH
9538: EMPTY
9539: ST_TO_ADDR
// temp_list = [ ] ;
9540: LD_ADDR_VAR 0 9
9544: PUSH
9545: EMPTY
9546: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9547: LD_VAR 0 4
9551: PUSH
9552: LD_INT 0
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: LD_INT 2
9560: PUSH
9561: LD_INT 3
9563: PUSH
9564: LD_INT 4
9566: PUSH
9567: LD_INT 5
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: IN
9578: NOT
9579: PUSH
9580: LD_VAR 0 1
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: IN
9595: PUSH
9596: LD_VAR 0 5
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: IN
9615: NOT
9616: AND
9617: OR
9618: IFFALSE 9622
// exit ;
9620: GO 28007
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9622: LD_VAR 0 1
9626: PUSH
9627: LD_INT 6
9629: PUSH
9630: LD_INT 7
9632: PUSH
9633: LD_INT 8
9635: PUSH
9636: LD_INT 13
9638: PUSH
9639: LD_INT 12
9641: PUSH
9642: LD_INT 15
9644: PUSH
9645: LD_INT 11
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 10
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: IN
9665: IFFALSE 9675
// btype = b_lab ;
9667: LD_ADDR_VAR 0 1
9671: PUSH
9672: LD_INT 6
9674: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9675: LD_VAR 0 6
9679: PUSH
9680: LD_INT 0
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: LD_INT 2
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: IN
9694: NOT
9695: PUSH
9696: LD_VAR 0 1
9700: PUSH
9701: LD_INT 0
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 36
9718: PUSH
9719: LD_INT 4
9721: PUSH
9722: LD_INT 5
9724: PUSH
9725: LD_INT 31
9727: PUSH
9728: LD_INT 32
9730: PUSH
9731: LD_INT 33
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: IN
9747: NOT
9748: PUSH
9749: LD_VAR 0 6
9753: PUSH
9754: LD_INT 1
9756: EQUAL
9757: AND
9758: OR
9759: PUSH
9760: LD_VAR 0 1
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 3
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: IN
9775: NOT
9776: PUSH
9777: LD_VAR 0 6
9781: PUSH
9782: LD_INT 2
9784: EQUAL
9785: AND
9786: OR
9787: IFFALSE 9797
// mode = 0 ;
9789: LD_ADDR_VAR 0 6
9793: PUSH
9794: LD_INT 0
9796: ST_TO_ADDR
// case mode of 0 :
9797: LD_VAR 0 6
9801: PUSH
9802: LD_INT 0
9804: DOUBLE
9805: EQUAL
9806: IFTRUE 9810
9808: GO 21263
9810: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9811: LD_ADDR_VAR 0 11
9815: PUSH
9816: LD_INT 0
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 0
9828: PUSH
9829: LD_INT 1
9831: NEG
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: LD_INT 0
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 0
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 1
9869: NEG
9870: PUSH
9871: LD_INT 0
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 1
9880: NEG
9881: PUSH
9882: LD_INT 1
9884: NEG
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 1
9892: NEG
9893: PUSH
9894: LD_INT 2
9896: NEG
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 0
9904: PUSH
9905: LD_INT 2
9907: NEG
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 1
9915: PUSH
9916: LD_INT 1
9918: NEG
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 0
9936: PUSH
9937: LD_INT 2
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 1
9946: NEG
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: LD_INT 3
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: LD_INT 3
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 1
9977: NEG
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10004: LD_ADDR_VAR 0 12
10008: PUSH
10009: LD_INT 0
10011: PUSH
10012: LD_INT 0
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 0
10021: PUSH
10022: LD_INT 1
10024: NEG
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 0
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 1
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 0
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 1
10062: NEG
10063: PUSH
10064: LD_INT 0
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 1
10073: NEG
10074: PUSH
10075: LD_INT 1
10077: NEG
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: LD_INT 1
10088: NEG
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: LD_INT 0
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 1
10116: NEG
10117: PUSH
10118: LD_INT 1
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 2
10127: NEG
10128: PUSH
10129: LD_INT 0
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 2
10138: NEG
10139: PUSH
10140: LD_INT 1
10142: NEG
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 2
10150: NEG
10151: PUSH
10152: LD_INT 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: NEG
10162: PUSH
10163: LD_INT 0
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 3
10172: NEG
10173: PUSH
10174: LD_INT 1
10176: NEG
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10200: LD_ADDR_VAR 0 13
10204: PUSH
10205: LD_INT 0
10207: PUSH
10208: LD_INT 0
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 0
10217: PUSH
10218: LD_INT 1
10220: NEG
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 1
10228: PUSH
10229: LD_INT 0
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 0
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 1
10258: NEG
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 1
10269: NEG
10270: PUSH
10271: LD_INT 1
10273: NEG
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 1
10281: NEG
10282: PUSH
10283: LD_INT 2
10285: NEG
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: LD_INT 1
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 2
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 2
10323: NEG
10324: PUSH
10325: LD_INT 1
10327: NEG
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: NEG
10336: PUSH
10337: LD_INT 2
10339: NEG
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 2
10347: NEG
10348: PUSH
10349: LD_INT 3
10351: NEG
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 3
10359: NEG
10360: PUSH
10361: LD_INT 2
10363: NEG
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 3
10371: NEG
10372: PUSH
10373: LD_INT 3
10375: NEG
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10399: LD_ADDR_VAR 0 14
10403: PUSH
10404: LD_INT 0
10406: PUSH
10407: LD_INT 0
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 0
10416: PUSH
10417: LD_INT 1
10419: NEG
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: LD_INT 0
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: LD_INT 1
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 0
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 1
10457: NEG
10458: PUSH
10459: LD_INT 0
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 1
10468: NEG
10469: PUSH
10470: LD_INT 1
10472: NEG
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 1
10480: NEG
10481: PUSH
10482: LD_INT 2
10484: NEG
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 0
10492: PUSH
10493: LD_INT 2
10495: NEG
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: LD_INT 1
10506: NEG
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 1
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 0
10524: PUSH
10525: LD_INT 2
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 1
10534: NEG
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 1
10545: NEG
10546: PUSH
10547: LD_INT 3
10549: NEG
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 0
10557: PUSH
10558: LD_INT 3
10560: NEG
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: LD_INT 2
10571: NEG
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10595: LD_ADDR_VAR 0 15
10599: PUSH
10600: LD_INT 0
10602: PUSH
10603: LD_INT 0
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: LD_INT 1
10615: NEG
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: LD_INT 0
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 0
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 1
10653: NEG
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 1
10664: NEG
10665: PUSH
10666: LD_INT 1
10668: NEG
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: LD_INT 1
10679: NEG
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: LD_INT 1
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 1
10707: NEG
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 2
10718: NEG
10719: PUSH
10720: LD_INT 0
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 2
10729: NEG
10730: PUSH
10731: LD_INT 1
10733: NEG
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 2
10741: PUSH
10742: LD_INT 1
10744: NEG
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 0
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: LD_INT 1
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10788: LD_ADDR_VAR 0 16
10792: PUSH
10793: LD_INT 0
10795: PUSH
10796: LD_INT 0
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 1
10808: NEG
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 0
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 1
10846: NEG
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 1
10857: NEG
10858: PUSH
10859: LD_INT 1
10861: NEG
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 1
10869: NEG
10870: PUSH
10871: LD_INT 2
10873: NEG
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 2
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: LD_INT 2
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: NEG
10912: PUSH
10913: LD_INT 1
10915: NEG
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 2
10923: NEG
10924: PUSH
10925: LD_INT 2
10927: NEG
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 3
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 3
10945: PUSH
10946: LD_INT 3
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: LD_INT 3
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10981: LD_ADDR_VAR 0 17
10985: PUSH
10986: LD_INT 0
10988: PUSH
10989: LD_INT 0
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 0
10998: PUSH
10999: LD_INT 1
11001: NEG
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: LD_INT 0
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 1
11019: PUSH
11020: LD_INT 1
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 0
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 1
11039: NEG
11040: PUSH
11041: LD_INT 0
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 1
11050: NEG
11051: PUSH
11052: LD_INT 1
11054: NEG
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 1
11062: NEG
11063: PUSH
11064: LD_INT 2
11066: NEG
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 0
11074: PUSH
11075: LD_INT 2
11077: NEG
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 1
11085: PUSH
11086: LD_INT 1
11088: NEG
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 0
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: LD_INT 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 0
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 1
11146: NEG
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 2
11157: NEG
11158: PUSH
11159: LD_INT 0
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: NEG
11169: PUSH
11170: LD_INT 1
11172: NEG
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 2
11180: NEG
11181: PUSH
11182: LD_INT 2
11184: NEG
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11211: LD_ADDR_VAR 0 18
11215: PUSH
11216: LD_INT 0
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 0
11228: PUSH
11229: LD_INT 1
11231: NEG
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: LD_INT 0
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 0
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 1
11269: NEG
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 1
11280: NEG
11281: PUSH
11282: LD_INT 1
11284: NEG
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 1
11292: NEG
11293: PUSH
11294: LD_INT 2
11296: NEG
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 0
11304: PUSH
11305: LD_INT 2
11307: NEG
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 1
11315: PUSH
11316: LD_INT 1
11318: NEG
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 2
11326: PUSH
11327: LD_INT 0
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 2
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 0
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 1
11376: NEG
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 2
11387: NEG
11388: PUSH
11389: LD_INT 0
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 2
11398: NEG
11399: PUSH
11400: LD_INT 1
11402: NEG
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 2
11410: NEG
11411: PUSH
11412: LD_INT 2
11414: NEG
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11441: LD_ADDR_VAR 0 19
11445: PUSH
11446: LD_INT 0
11448: PUSH
11449: LD_INT 0
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 0
11458: PUSH
11459: LD_INT 1
11461: NEG
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 1
11499: NEG
11500: PUSH
11501: LD_INT 0
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 1
11510: NEG
11511: PUSH
11512: LD_INT 1
11514: NEG
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 1
11522: NEG
11523: PUSH
11524: LD_INT 2
11526: NEG
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 0
11534: PUSH
11535: LD_INT 2
11537: NEG
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: LD_INT 1
11548: NEG
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 0
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: LD_INT 1
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 0
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 1
11606: NEG
11607: PUSH
11608: LD_INT 1
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 2
11617: NEG
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 2
11628: NEG
11629: PUSH
11630: LD_INT 1
11632: NEG
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 2
11640: NEG
11641: PUSH
11642: LD_INT 2
11644: NEG
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11671: LD_ADDR_VAR 0 20
11675: PUSH
11676: LD_INT 0
11678: PUSH
11679: LD_INT 0
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 0
11688: PUSH
11689: LD_INT 1
11691: NEG
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: LD_INT 0
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: LD_INT 1
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 0
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: NEG
11730: PUSH
11731: LD_INT 0
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 1
11740: NEG
11741: PUSH
11742: LD_INT 1
11744: NEG
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 1
11752: NEG
11753: PUSH
11754: LD_INT 2
11756: NEG
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 0
11764: PUSH
11765: LD_INT 2
11767: NEG
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: LD_INT 1
11778: NEG
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 0
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: LD_INT 1
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 2
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 1
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 0
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 1
11836: NEG
11837: PUSH
11838: LD_INT 1
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 2
11847: NEG
11848: PUSH
11849: LD_INT 0
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 2
11858: NEG
11859: PUSH
11860: LD_INT 1
11862: NEG
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 2
11870: NEG
11871: PUSH
11872: LD_INT 2
11874: NEG
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11901: LD_ADDR_VAR 0 21
11905: PUSH
11906: LD_INT 0
11908: PUSH
11909: LD_INT 0
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 0
11918: PUSH
11919: LD_INT 1
11921: NEG
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 1
11929: PUSH
11930: LD_INT 0
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 0
11949: PUSH
11950: LD_INT 1
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 1
11959: NEG
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 1
11970: NEG
11971: PUSH
11972: LD_INT 1
11974: NEG
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 1
11982: NEG
11983: PUSH
11984: LD_INT 2
11986: NEG
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 0
11994: PUSH
11995: LD_INT 2
11997: NEG
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: LD_INT 1
12008: NEG
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 2
12016: PUSH
12017: LD_INT 0
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 2
12026: PUSH
12027: LD_INT 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: LD_INT 2
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 1
12046: PUSH
12047: LD_INT 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 0
12056: PUSH
12057: LD_INT 2
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 1
12066: NEG
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 2
12077: NEG
12078: PUSH
12079: LD_INT 0
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 2
12088: NEG
12089: PUSH
12090: LD_INT 1
12092: NEG
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: NEG
12101: PUSH
12102: LD_INT 2
12104: NEG
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12131: LD_ADDR_VAR 0 22
12135: PUSH
12136: LD_INT 0
12138: PUSH
12139: LD_INT 0
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 0
12148: PUSH
12149: LD_INT 1
12151: NEG
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: LD_INT 0
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 1
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 0
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 1
12189: NEG
12190: PUSH
12191: LD_INT 0
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 1
12200: NEG
12201: PUSH
12202: LD_INT 1
12204: NEG
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 1
12212: NEG
12213: PUSH
12214: LD_INT 2
12216: NEG
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 0
12224: PUSH
12225: LD_INT 2
12227: NEG
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: LD_INT 1
12238: NEG
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 0
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 0
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 1
12296: NEG
12297: PUSH
12298: LD_INT 1
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 2
12307: NEG
12308: PUSH
12309: LD_INT 0
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 2
12318: NEG
12319: PUSH
12320: LD_INT 1
12322: NEG
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 2
12330: NEG
12331: PUSH
12332: LD_INT 2
12334: NEG
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12361: LD_ADDR_VAR 0 23
12365: PUSH
12366: LD_INT 0
12368: PUSH
12369: LD_INT 0
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 0
12378: PUSH
12379: LD_INT 1
12381: NEG
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 1
12389: PUSH
12390: LD_INT 0
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 1
12399: PUSH
12400: LD_INT 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 0
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 1
12419: NEG
12420: PUSH
12421: LD_INT 0
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 1
12430: NEG
12431: PUSH
12432: LD_INT 1
12434: NEG
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 1
12442: NEG
12443: PUSH
12444: LD_INT 2
12446: NEG
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 0
12454: PUSH
12455: LD_INT 2
12457: NEG
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: LD_INT 1
12468: NEG
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 0
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 0
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 1
12526: NEG
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 2
12537: NEG
12538: PUSH
12539: LD_INT 0
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 2
12548: NEG
12549: PUSH
12550: LD_INT 1
12552: NEG
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 2
12560: NEG
12561: PUSH
12562: LD_INT 2
12564: NEG
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 2
12572: NEG
12573: PUSH
12574: LD_INT 3
12576: NEG
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 1
12584: NEG
12585: PUSH
12586: LD_INT 3
12588: NEG
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: LD_INT 2
12599: NEG
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: LD_INT 1
12610: NEG
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12641: LD_ADDR_VAR 0 24
12645: PUSH
12646: LD_INT 0
12648: PUSH
12649: LD_INT 0
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 0
12658: PUSH
12659: LD_INT 1
12661: NEG
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: LD_INT 0
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: LD_INT 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 0
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 1
12699: NEG
12700: PUSH
12701: LD_INT 0
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 1
12710: NEG
12711: PUSH
12712: LD_INT 1
12714: NEG
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 1
12722: NEG
12723: PUSH
12724: LD_INT 2
12726: NEG
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 0
12734: PUSH
12735: LD_INT 2
12737: NEG
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 1
12745: PUSH
12746: LD_INT 1
12748: NEG
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 0
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 0
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 1
12806: NEG
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 2
12817: NEG
12818: PUSH
12819: LD_INT 0
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 2
12828: NEG
12829: PUSH
12830: LD_INT 1
12832: NEG
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 2
12840: NEG
12841: PUSH
12842: LD_INT 2
12844: NEG
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: LD_INT 2
12855: NEG
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 2
12863: PUSH
12864: LD_INT 1
12866: NEG
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 3
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 3
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12917: LD_ADDR_VAR 0 25
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: LD_INT 0
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 0
12934: PUSH
12935: LD_INT 1
12937: NEG
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 1
12945: PUSH
12946: LD_INT 0
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 0
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 1
12975: NEG
12976: PUSH
12977: LD_INT 0
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 1
12986: NEG
12987: PUSH
12988: LD_INT 1
12990: NEG
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 1
12998: NEG
12999: PUSH
13000: LD_INT 2
13002: NEG
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 0
13010: PUSH
13011: LD_INT 2
13013: NEG
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: LD_INT 1
13024: NEG
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 2
13032: PUSH
13033: LD_INT 0
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 2
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 0
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 1
13082: NEG
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: NEG
13094: PUSH
13095: LD_INT 0
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: NEG
13105: PUSH
13106: LD_INT 1
13108: NEG
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: NEG
13117: PUSH
13118: LD_INT 2
13120: NEG
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 3
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 3
13138: PUSH
13139: LD_INT 2
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 2
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 1
13158: PUSH
13159: LD_INT 3
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13191: LD_ADDR_VAR 0 26
13195: PUSH
13196: LD_INT 0
13198: PUSH
13199: LD_INT 0
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 0
13208: PUSH
13209: LD_INT 1
13211: NEG
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: LD_INT 0
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 0
13239: PUSH
13240: LD_INT 1
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 1
13249: NEG
13250: PUSH
13251: LD_INT 0
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 1
13260: NEG
13261: PUSH
13262: LD_INT 1
13264: NEG
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 1
13272: NEG
13273: PUSH
13274: LD_INT 2
13276: NEG
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 0
13284: PUSH
13285: LD_INT 2
13287: NEG
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 1
13295: PUSH
13296: LD_INT 1
13298: NEG
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 2
13306: PUSH
13307: LD_INT 0
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: LD_INT 1
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 0
13346: PUSH
13347: LD_INT 2
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 1
13356: NEG
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 2
13367: NEG
13368: PUSH
13369: LD_INT 0
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 2
13378: NEG
13379: PUSH
13380: LD_INT 1
13382: NEG
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 2
13390: NEG
13391: PUSH
13392: LD_INT 2
13394: NEG
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 3
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 1
13422: NEG
13423: PUSH
13424: LD_INT 2
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 2
13433: NEG
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13467: LD_ADDR_VAR 0 27
13471: PUSH
13472: LD_INT 0
13474: PUSH
13475: LD_INT 0
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 0
13484: PUSH
13485: LD_INT 1
13487: NEG
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: LD_INT 0
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: LD_INT 1
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 1
13525: NEG
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 1
13536: NEG
13537: PUSH
13538: LD_INT 1
13540: NEG
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 1
13548: NEG
13549: PUSH
13550: LD_INT 2
13552: NEG
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 0
13560: PUSH
13561: LD_INT 2
13563: NEG
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: LD_INT 1
13574: NEG
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 0
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 1
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 0
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 1
13632: NEG
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 2
13643: NEG
13644: PUSH
13645: LD_INT 0
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 2
13654: NEG
13655: PUSH
13656: LD_INT 1
13658: NEG
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: NEG
13667: PUSH
13668: LD_INT 2
13670: NEG
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 1
13678: NEG
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 2
13689: NEG
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 3
13700: NEG
13701: PUSH
13702: LD_INT 1
13704: NEG
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 3
13712: NEG
13713: PUSH
13714: LD_INT 2
13716: NEG
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13747: LD_ADDR_VAR 0 28
13751: PUSH
13752: LD_INT 0
13754: PUSH
13755: LD_INT 0
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 0
13764: PUSH
13765: LD_INT 1
13767: NEG
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: LD_INT 0
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 0
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 1
13805: NEG
13806: PUSH
13807: LD_INT 0
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 1
13816: NEG
13817: PUSH
13818: LD_INT 1
13820: NEG
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 1
13828: NEG
13829: PUSH
13830: LD_INT 2
13832: NEG
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 0
13840: PUSH
13841: LD_INT 2
13843: NEG
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: LD_INT 1
13854: NEG
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: LD_INT 0
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 2
13872: PUSH
13873: LD_INT 1
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 0
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 1
13912: NEG
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 2
13923: NEG
13924: PUSH
13925: LD_INT 0
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 2
13934: NEG
13935: PUSH
13936: LD_INT 1
13938: NEG
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 2
13946: NEG
13947: PUSH
13948: LD_INT 2
13950: NEG
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 2
13958: NEG
13959: PUSH
13960: LD_INT 3
13962: NEG
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: NEG
13971: PUSH
13972: LD_INT 3
13974: NEG
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 3
13982: NEG
13983: PUSH
13984: LD_INT 1
13986: NEG
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 3
13994: NEG
13995: PUSH
13996: LD_INT 2
13998: NEG
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14029: LD_ADDR_VAR 0 29
14033: PUSH
14034: LD_INT 0
14036: PUSH
14037: LD_INT 0
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: LD_INT 1
14049: NEG
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 1
14057: PUSH
14058: LD_INT 0
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 1
14067: PUSH
14068: LD_INT 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 0
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 1
14087: NEG
14088: PUSH
14089: LD_INT 0
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 1
14098: NEG
14099: PUSH
14100: LD_INT 1
14102: NEG
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 1
14110: NEG
14111: PUSH
14112: LD_INT 2
14114: NEG
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 0
14122: PUSH
14123: LD_INT 2
14125: NEG
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 1
14133: PUSH
14134: LD_INT 1
14136: NEG
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 2
14144: PUSH
14145: LD_INT 0
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 2
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: LD_INT 2
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 1
14184: NEG
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 2
14195: NEG
14196: PUSH
14197: LD_INT 1
14199: NEG
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 2
14207: NEG
14208: PUSH
14209: LD_INT 2
14211: NEG
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 2
14219: NEG
14220: PUSH
14221: LD_INT 3
14223: NEG
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 2
14231: PUSH
14232: LD_INT 1
14234: NEG
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 3
14242: PUSH
14243: LD_INT 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 1
14262: NEG
14263: PUSH
14264: LD_INT 2
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 3
14273: NEG
14274: PUSH
14275: LD_INT 2
14277: NEG
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14308: LD_ADDR_VAR 0 30
14312: PUSH
14313: LD_INT 0
14315: PUSH
14316: LD_INT 0
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 0
14325: PUSH
14326: LD_INT 1
14328: NEG
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: LD_INT 0
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 1
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 1
14366: NEG
14367: PUSH
14368: LD_INT 0
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 1
14377: NEG
14378: PUSH
14379: LD_INT 1
14381: NEG
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 1
14389: NEG
14390: PUSH
14391: LD_INT 2
14393: NEG
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: LD_INT 2
14404: NEG
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: PUSH
14413: LD_INT 1
14415: NEG
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 2
14423: PUSH
14424: LD_INT 0
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 1
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 1
14463: NEG
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 2
14474: NEG
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 2
14485: NEG
14486: PUSH
14487: LD_INT 1
14489: NEG
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 1
14497: NEG
14498: PUSH
14499: LD_INT 3
14501: NEG
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: LD_INT 2
14512: NEG
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 3
14520: PUSH
14521: LD_INT 2
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 2
14540: NEG
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 3
14551: NEG
14552: PUSH
14553: LD_INT 1
14555: NEG
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14586: LD_ADDR_VAR 0 31
14590: PUSH
14591: LD_INT 0
14593: PUSH
14594: LD_INT 0
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 0
14603: PUSH
14604: LD_INT 1
14606: NEG
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: LD_INT 0
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 1
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 0
14634: PUSH
14635: LD_INT 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 1
14644: NEG
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 1
14655: NEG
14656: PUSH
14657: LD_INT 1
14659: NEG
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 1
14667: NEG
14668: PUSH
14669: LD_INT 2
14671: NEG
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: LD_INT 1
14682: NEG
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 0
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: LD_INT 1
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 0
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 1
14740: NEG
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 2
14751: NEG
14752: PUSH
14753: LD_INT 1
14755: NEG
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 2
14763: NEG
14764: PUSH
14765: LD_INT 2
14767: NEG
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 2
14775: NEG
14776: PUSH
14777: LD_INT 3
14779: NEG
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 1
14790: NEG
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 3
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 1
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: NEG
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 3
14829: NEG
14830: PUSH
14831: LD_INT 2
14833: NEG
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14864: LD_ADDR_VAR 0 32
14868: PUSH
14869: LD_INT 0
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: LD_INT 1
14884: NEG
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 0
14912: PUSH
14913: LD_INT 1
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 1
14922: NEG
14923: PUSH
14924: LD_INT 0
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 1
14933: NEG
14934: PUSH
14935: LD_INT 1
14937: NEG
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 1
14945: NEG
14946: PUSH
14947: LD_INT 2
14949: NEG
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 0
14957: PUSH
14958: LD_INT 2
14960: NEG
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: LD_INT 1
14971: NEG
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 1
15019: NEG
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 2
15030: NEG
15031: PUSH
15032: LD_INT 0
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 2
15041: NEG
15042: PUSH
15043: LD_INT 1
15045: NEG
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 1
15053: NEG
15054: PUSH
15055: LD_INT 3
15057: NEG
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: LD_INT 2
15068: NEG
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 3
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 2
15096: NEG
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 3
15107: NEG
15108: PUSH
15109: LD_INT 1
15111: NEG
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15142: LD_ADDR_VAR 0 33
15146: PUSH
15147: LD_INT 0
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 0
15159: PUSH
15160: LD_INT 1
15162: NEG
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 0
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 1
15200: NEG
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 1
15211: NEG
15212: PUSH
15213: LD_INT 1
15215: NEG
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 1
15223: NEG
15224: PUSH
15225: LD_INT 2
15227: NEG
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: LD_INT 1
15238: NEG
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 2
15246: PUSH
15247: LD_INT 0
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: NEG
15287: PUSH
15288: LD_INT 1
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 2
15297: NEG
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 2
15308: NEG
15309: PUSH
15310: LD_INT 1
15312: NEG
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 2
15320: NEG
15321: PUSH
15322: LD_INT 2
15324: NEG
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 2
15332: NEG
15333: PUSH
15334: LD_INT 3
15336: NEG
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: LD_INT 1
15347: NEG
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 3
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 1
15375: NEG
15376: PUSH
15377: LD_INT 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 3
15386: NEG
15387: PUSH
15388: LD_INT 2
15390: NEG
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15421: LD_ADDR_VAR 0 34
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: LD_INT 1
15441: NEG
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: LD_INT 0
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 0
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 1
15479: NEG
15480: PUSH
15481: LD_INT 0
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 1
15490: NEG
15491: PUSH
15492: LD_INT 1
15494: NEG
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 1
15502: NEG
15503: PUSH
15504: LD_INT 2
15506: NEG
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 0
15514: PUSH
15515: LD_INT 2
15517: NEG
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: LD_INT 1
15528: NEG
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 2
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 2
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: LD_INT 1
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 2
15577: NEG
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 2
15588: NEG
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: NEG
15601: PUSH
15602: LD_INT 2
15604: NEG
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 1
15612: NEG
15613: PUSH
15614: LD_INT 3
15616: NEG
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: LD_INT 2
15627: NEG
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 3
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: NEG
15656: PUSH
15657: LD_INT 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 3
15666: NEG
15667: PUSH
15668: LD_INT 1
15670: NEG
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15701: LD_ADDR_VAR 0 35
15705: PUSH
15706: LD_INT 0
15708: PUSH
15709: LD_INT 0
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 0
15718: PUSH
15719: LD_INT 1
15721: NEG
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 0
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: LD_INT 1
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 0
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 1
15759: NEG
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 1
15770: NEG
15771: PUSH
15772: LD_INT 1
15774: NEG
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 2
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 2
15792: NEG
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15813: LD_ADDR_VAR 0 36
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: LD_INT 1
15833: NEG
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: LD_INT 0
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 1
15871: NEG
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 1
15882: NEG
15883: PUSH
15884: LD_INT 1
15886: NEG
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: LD_INT 2
15898: NEG
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15925: LD_ADDR_VAR 0 37
15929: PUSH
15930: LD_INT 0
15932: PUSH
15933: LD_INT 0
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 1
15945: NEG
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 1
15983: NEG
15984: PUSH
15985: LD_INT 0
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: LD_INT 1
15998: NEG
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 1
16009: NEG
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16037: LD_ADDR_VAR 0 38
16041: PUSH
16042: LD_INT 0
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 0
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 1
16095: NEG
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 1
16106: NEG
16107: PUSH
16108: LD_INT 1
16110: NEG
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 2
16128: NEG
16129: PUSH
16130: LD_INT 1
16132: NEG
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16149: LD_ADDR_VAR 0 39
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 1
16169: NEG
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 1
16207: NEG
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 1
16218: NEG
16219: PUSH
16220: LD_INT 1
16222: NEG
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: LD_INT 2
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16261: LD_ADDR_VAR 0 40
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: LD_INT 0
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 0
16278: PUSH
16279: LD_INT 1
16281: NEG
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 1
16319: NEG
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 1
16330: NEG
16331: PUSH
16332: LD_INT 1
16334: NEG
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: LD_INT 1
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16373: LD_ADDR_VAR 0 41
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 1
16431: NEG
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 1
16442: NEG
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 2
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 0
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 2
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 2
16528: NEG
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: NEG
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 2
16563: NEG
16564: PUSH
16565: LD_INT 3
16567: NEG
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 1
16578: NEG
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 3
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 3
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: NEG
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 3
16647: NEG
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 3
16658: NEG
16659: PUSH
16660: LD_INT 1
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 3
16670: NEG
16671: PUSH
16672: LD_INT 2
16674: NEG
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 3
16682: NEG
16683: PUSH
16684: LD_INT 3
16686: NEG
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16723: LD_ADDR_VAR 0 42
16727: PUSH
16728: LD_INT 0
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: LD_INT 1
16743: NEG
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 1
16781: NEG
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: LD_INT 1
16796: NEG
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: LD_INT 2
16808: NEG
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: LD_INT 1
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 2
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: LD_INT 2
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 1
16878: NEG
16879: PUSH
16880: LD_INT 1
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 2
16889: NEG
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: LD_INT 2
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 2
16913: NEG
16914: PUSH
16915: LD_INT 3
16917: NEG
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: LD_INT 3
16929: NEG
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 3
16940: NEG
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: LD_INT 2
16951: NEG
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 3
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 3
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 0
16999: PUSH
17000: LD_INT 3
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 1
17009: NEG
17010: PUSH
17011: LD_INT 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 3
17020: NEG
17021: PUSH
17022: LD_INT 2
17024: NEG
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: NEG
17033: PUSH
17034: LD_INT 3
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17073: LD_ADDR_VAR 0 43
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 0
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 1
17142: NEG
17143: PUSH
17144: LD_INT 1
17146: NEG
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: LD_INT 2
17158: NEG
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 2
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 1
17228: NEG
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: NEG
17240: PUSH
17241: LD_INT 0
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: LD_INT 3
17266: NEG
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 3
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: LD_INT 2
17288: NEG
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: LD_INT 1
17299: NEG
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 3
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 2
17358: NEG
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 3
17369: NEG
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 3
17380: NEG
17381: PUSH
17382: LD_INT 1
17384: NEG
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17421: LD_ADDR_VAR 0 44
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 1
17479: NEG
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: NEG
17491: PUSH
17492: LD_INT 1
17494: NEG
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: LD_INT 2
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: LD_INT 1
17517: NEG
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: NEG
17577: PUSH
17578: LD_INT 0
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: NEG
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 2
17599: NEG
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 3
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 1
17626: NEG
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 3
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 3
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 3
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 3
17695: NEG
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 3
17718: NEG
17719: PUSH
17720: LD_INT 2
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 3
17730: NEG
17731: PUSH
17732: LD_INT 3
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17771: LD_ADDR_VAR 0 45
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 2
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: NEG
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: LD_INT 3
17965: NEG
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 3
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 3
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 3
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: LD_INT 3
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 3
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 3
18068: NEG
18069: PUSH
18070: LD_INT 2
18072: NEG
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 3
18080: NEG
18081: PUSH
18082: LD_INT 3
18084: NEG
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18121: LD_ADDR_VAR 0 46
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: NEG
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: NEG
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: LD_INT 2
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: NEG
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: NEG
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: NEG
18311: PUSH
18312: LD_INT 3
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 3
18325: NEG
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 3
18417: NEG
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 3
18428: NEG
18429: PUSH
18430: LD_INT 1
18432: NEG
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18469: LD_ADDR_VAR 0 47
18473: PUSH
18474: LD_INT 0
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 1
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 2
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 1
18576: NEG
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: NEG
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 2
18596: NEG
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18620: LD_ADDR_VAR 0 48
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: LD_INT 0
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 2
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 1
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18767: LD_ADDR_VAR 0 49
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18911: LD_ADDR_VAR 0 50
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 0
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 1
18980: NEG
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19055: LD_ADDR_VAR 0 51
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 2
19167: NEG
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19202: LD_ADDR_VAR 0 52
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 0
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: NEG
19330: PUSH
19331: LD_INT 2
19333: NEG
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19353: LD_ADDR_VAR 0 53
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: LD_INT 0
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: LD_INT 2
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 2
19552: NEG
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19583: LD_ADDR_VAR 0 54
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 1
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: LD_INT 2
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 2
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 2
19759: NEG
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 2
19770: NEG
19771: PUSH
19772: LD_INT 1
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19813: LD_ADDR_VAR 0 55
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 2
19989: NEG
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: NEG
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20043: LD_ADDR_VAR 0 56
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 2
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: NEG
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 2
20230: NEG
20231: PUSH
20232: LD_INT 1
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20273: LD_ADDR_VAR 0 57
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 1
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: LD_INT 2
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: LD_INT 2
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20503: LD_ADDR_VAR 0 58
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: LD_INT 2
20588: NEG
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 2
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: NEG
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 2
20679: NEG
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: NEG
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20733: LD_ADDR_VAR 0 59
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20821: LD_ADDR_VAR 0 60
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20909: LD_ADDR_VAR 0 61
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20997: LD_ADDR_VAR 0 62
21001: PUSH
21002: LD_INT 0
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21085: LD_ADDR_VAR 0 63
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21173: LD_ADDR_VAR 0 64
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 0
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: NEG
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: ST_TO_ADDR
// end ; 1 :
21261: GO 27158
21263: LD_INT 1
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 23894
21271: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21272: LD_ADDR_VAR 0 11
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: LD_INT 3
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 3
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21316: LD_ADDR_VAR 0 12
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 3
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21357: LD_ADDR_VAR 0 13
21361: PUSH
21362: LD_INT 3
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: LD_INT 3
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 3
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21397: LD_ADDR_VAR 0 14
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: NEG
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21438: LD_ADDR_VAR 0 15
21442: PUSH
21443: LD_INT 2
21445: NEG
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 3
21456: NEG
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21482: LD_ADDR_VAR 0 16
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: LD_INT 3
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 3
21501: NEG
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 3
21513: NEG
21514: PUSH
21515: LD_INT 3
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21528: LD_ADDR_VAR 0 17
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: LD_INT 3
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21572: LD_ADDR_VAR 0 18
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 3
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21613: LD_ADDR_VAR 0 19
21617: PUSH
21618: LD_INT 3
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: LD_INT 3
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21653: LD_ADDR_VAR 0 20
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 3
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 3
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: LD_INT 2
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21694: LD_ADDR_VAR 0 21
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 3
21712: NEG
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 3
21723: NEG
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21738: LD_ADDR_VAR 0 22
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: LD_INT 3
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 3
21757: NEG
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: NEG
21770: PUSH
21771: LD_INT 3
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21784: LD_ADDR_VAR 0 23
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 3
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: LD_INT 4
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21828: LD_ADDR_VAR 0 24
21832: PUSH
21833: LD_INT 3
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 3
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21869: LD_ADDR_VAR 0 25
21873: PUSH
21874: LD_INT 3
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 4
21886: PUSH
21887: LD_INT 3
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21909: LD_ADDR_VAR 0 26
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: LD_INT 4
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21950: LD_ADDR_VAR 0 27
21954: PUSH
21955: LD_INT 3
21957: NEG
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 3
21968: NEG
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 4
21979: NEG
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
21994: LD_ADDR_VAR 0 28
21998: PUSH
21999: LD_INT 3
22001: NEG
22002: PUSH
22003: LD_INT 3
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 3
22013: NEG
22014: PUSH
22015: LD_INT 4
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 4
22025: NEG
22026: PUSH
22027: LD_INT 3
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22040: LD_ADDR_VAR 0 29
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: LD_INT 3
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 3
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: LD_INT 4
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 4
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 3
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 5
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: LD_INT 5
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 4
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 6
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 6
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: LD_INT 5
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22195: LD_ADDR_VAR 0 30
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 1
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 4
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 4
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 4
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 5
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 5
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 5
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 6
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 6
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22338: LD_ADDR_VAR 0 31
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 3
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 4
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 4
22385: PUSH
22386: LD_INT 4
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 3
22395: PUSH
22396: LD_INT 4
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 5
22405: PUSH
22406: LD_INT 4
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 5
22415: PUSH
22416: LD_INT 5
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 4
22425: PUSH
22426: LD_INT 5
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 6
22435: PUSH
22436: LD_INT 5
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 6
22445: PUSH
22446: LD_INT 6
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 5
22455: PUSH
22456: LD_INT 6
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22477: LD_ADDR_VAR 0 32
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: LD_INT 3
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 4
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: LD_INT 4
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: LD_INT 5
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: LD_INT 6
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: LD_INT 6
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: LD_INT 5
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22620: LD_ADDR_VAR 0 33
22624: PUSH
22625: LD_INT 2
22627: NEG
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 3
22638: NEG
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 3
22649: NEG
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 4
22672: NEG
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 4
22683: NEG
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 4
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 5
22706: NEG
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 5
22717: NEG
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 5
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 6
22740: NEG
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 6
22751: NEG
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22775: LD_ADDR_VAR 0 34
22779: PUSH
22780: LD_INT 2
22782: NEG
22783: PUSH
22784: LD_INT 3
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: NEG
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: NEG
22807: PUSH
22808: LD_INT 3
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 3
22818: NEG
22819: PUSH
22820: LD_INT 4
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 4
22830: NEG
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 4
22842: NEG
22843: PUSH
22844: LD_INT 4
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 4
22854: NEG
22855: PUSH
22856: LD_INT 5
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 5
22866: NEG
22867: PUSH
22868: LD_INT 4
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 5
22878: NEG
22879: PUSH
22880: LD_INT 5
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 5
22890: NEG
22891: PUSH
22892: LD_INT 6
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 6
22902: NEG
22903: PUSH
22904: LD_INT 5
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 6
22914: NEG
22915: PUSH
22916: LD_INT 6
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22938: LD_ADDR_VAR 0 41
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: LD_INT 3
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
22982: LD_ADDR_VAR 0 42
22986: PUSH
22987: LD_INT 2
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23023: LD_ADDR_VAR 0 43
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 3
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 3
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23063: LD_ADDR_VAR 0 44
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23104: LD_ADDR_VAR 0 45
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 3
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23148: LD_ADDR_VAR 0 46
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: LD_INT 3
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23194: LD_ADDR_VAR 0 47
23198: PUSH
23199: LD_INT 2
23201: NEG
23202: PUSH
23203: LD_INT 3
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: NEG
23214: PUSH
23215: LD_INT 3
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23227: LD_ADDR_VAR 0 48
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 2
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23258: LD_ADDR_VAR 0 49
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23287: LD_ADDR_VAR 0 50
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 3
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23316: LD_ADDR_VAR 0 51
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23347: LD_ADDR_VAR 0 52
23351: PUSH
23352: LD_INT 3
23354: NEG
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 3
23366: NEG
23367: PUSH
23368: LD_INT 2
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23380: LD_ADDR_VAR 0 53
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: LD_INT 3
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: LD_INT 2
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23424: LD_ADDR_VAR 0 54
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 3
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23465: LD_ADDR_VAR 0 55
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 3
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23505: LD_ADDR_VAR 0 56
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23546: LD_ADDR_VAR 0 57
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 3
23564: NEG
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 3
23575: NEG
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23590: LD_ADDR_VAR 0 58
23594: PUSH
23595: LD_INT 2
23597: NEG
23598: PUSH
23599: LD_INT 3
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 3
23609: NEG
23610: PUSH
23611: LD_INT 2
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: LD_INT 3
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23636: LD_ADDR_VAR 0 59
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: LD_INT 2
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 2
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23680: LD_ADDR_VAR 0 60
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23721: LD_ADDR_VAR 0 61
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23761: LD_ADDR_VAR 0 62
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23802: LD_ADDR_VAR 0 63
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23846: LD_ADDR_VAR 0 64
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: ST_TO_ADDR
// end ; 2 :
23892: GO 27158
23894: LD_INT 2
23896: DOUBLE
23897: EQUAL
23898: IFTRUE 23902
23900: GO 27157
23902: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23903: LD_ADDR_VAR 0 29
23907: PUSH
23908: LD_INT 4
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 5
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 5
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 4
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 3
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 3
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 5
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 3
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 3
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 4
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 4
24033: PUSH
24034: LD_INT 4
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 4
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: LD_INT 3
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 4
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 4
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 4
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 5
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 5
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 4
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 3
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 5
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 3
24186: NEG
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 3
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 3
24231: NEG
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 4
24242: NEG
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 4
24253: NEG
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 4
24265: NEG
24266: PUSH
24267: LD_INT 2
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 4
24288: NEG
24289: PUSH
24290: LD_INT 4
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 4
24300: NEG
24301: PUSH
24302: LD_INT 5
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: LD_INT 4
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 3
24324: NEG
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 4
24336: NEG
24337: PUSH
24338: LD_INT 3
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 5
24348: NEG
24349: PUSH
24350: LD_INT 4
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 5
24360: NEG
24361: PUSH
24362: LD_INT 5
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 3
24372: NEG
24373: PUSH
24374: LD_INT 5
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 5
24384: NEG
24385: PUSH
24386: LD_INT 3
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24441: LD_ADDR_VAR 0 30
24445: PUSH
24446: LD_INT 4
24448: PUSH
24449: LD_INT 4
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 4
24458: PUSH
24459: LD_INT 3
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 5
24468: PUSH
24469: LD_INT 4
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 5
24478: PUSH
24479: LD_INT 5
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 4
24488: PUSH
24489: LD_INT 5
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 3
24498: PUSH
24499: LD_INT 4
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: LD_INT 3
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 5
24518: PUSH
24519: LD_INT 3
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 3
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: LD_INT 4
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: LD_INT 4
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 4
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 2
24620: NEG
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 4
24631: NEG
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 4
24642: NEG
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 3
24654: NEG
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 3
24665: NEG
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 4
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 5
24687: NEG
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 5
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 5
24710: NEG
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 3
24722: NEG
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: NEG
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 3
24745: NEG
24746: PUSH
24747: LD_INT 4
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 3
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 3
24781: NEG
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 4
24793: NEG
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 4
24805: NEG
24806: PUSH
24807: LD_INT 4
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 2
24817: NEG
24818: PUSH
24819: LD_INT 4
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 4
24829: NEG
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 4
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 5
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: LD_INT 4
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 3
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 3
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: LD_INT 4
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 5
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 5
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
24988: LD_ADDR_VAR 0 31
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 4
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 4
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 5
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 5
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 4
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 5
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 3
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 3
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 3
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 4
25144: NEG
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 4
25155: NEG
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 4
25167: NEG
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 4
25190: NEG
25191: PUSH
25192: LD_INT 4
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 4
25202: NEG
25203: PUSH
25204: LD_INT 5
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 3
25214: NEG
25215: PUSH
25216: LD_INT 4
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 3
25226: NEG
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 4
25238: NEG
25239: PUSH
25240: LD_INT 3
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 5
25250: NEG
25251: PUSH
25252: LD_INT 4
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 5
25262: NEG
25263: PUSH
25264: LD_INT 5
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 3
25274: NEG
25275: PUSH
25276: LD_INT 5
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 5
25286: NEG
25287: PUSH
25288: LD_INT 3
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 3
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 4
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 3
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: LD_INT 3
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 4
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 4
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 4
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 4
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 5
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 5
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 4
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 3
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 5
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25538: LD_ADDR_VAR 0 32
25542: PUSH
25543: LD_INT 4
25545: NEG
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 4
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 3
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 3
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 4
25590: NEG
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 5
25601: NEG
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 5
25612: NEG
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 5
25624: NEG
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 3
25636: NEG
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 3
25647: NEG
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 3
25659: NEG
25660: PUSH
25661: LD_INT 4
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: LD_INT 3
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 3
25695: NEG
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 4
25707: NEG
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 4
25719: NEG
25720: PUSH
25721: LD_INT 4
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 4
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 4
25743: NEG
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 4
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 5
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 4
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 3
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 3
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 4
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: LD_INT 5
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 3
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 5
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 3
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 4
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 4
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 4
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 4
25950: PUSH
25951: LD_INT 4
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 4
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 5
25980: PUSH
25981: LD_INT 5
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 4
25990: PUSH
25991: LD_INT 5
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: LD_INT 4
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: LD_INT 3
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 5
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 3
26030: PUSH
26031: LD_INT 5
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26085: LD_ADDR_VAR 0 33
26089: PUSH
26090: LD_INT 4
26092: NEG
26093: PUSH
26094: LD_INT 4
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 4
26104: NEG
26105: PUSH
26106: LD_INT 5
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 3
26116: NEG
26117: PUSH
26118: LD_INT 4
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 3
26128: NEG
26129: PUSH
26130: LD_INT 3
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 4
26140: NEG
26141: PUSH
26142: LD_INT 3
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 5
26152: NEG
26153: PUSH
26154: LD_INT 4
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 5
26164: NEG
26165: PUSH
26166: LD_INT 5
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 3
26176: NEG
26177: PUSH
26178: LD_INT 5
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 5
26188: NEG
26189: PUSH
26190: LD_INT 3
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: LD_INT 3
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: LD_INT 4
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: LD_INT 3
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 3
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 4
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 4
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 4
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 4
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 5
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 5
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 4
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 3
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 5
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 3
26395: PUSH
26396: LD_INT 3
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 3
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 4
26415: PUSH
26416: LD_INT 3
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 4
26425: PUSH
26426: LD_INT 4
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: LD_INT 4
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 4
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 4
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 4
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: LD_INT 4
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 5
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: LD_INT 5
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 4
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 3
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 5
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26623: LD_ADDR_VAR 0 34
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 4
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 5
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 4
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 3
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 4
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 5
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 3
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 5
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 4
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 4
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 2
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 4
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 4
26825: PUSH
26826: LD_INT 4
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 4
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 5
26845: PUSH
26846: LD_INT 4
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 5
26855: PUSH
26856: LD_INT 5
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 4
26865: PUSH
26866: LD_INT 5
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 3
26875: PUSH
26876: LD_INT 4
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: LD_INT 3
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 5
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 5
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 4
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: LD_INT 4
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: LD_INT 4
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 4
27008: NEG
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 4
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 3
27031: NEG
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 3
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 4
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 5
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 5
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 5
27087: NEG
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 3
27099: NEG
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: ST_TO_ADDR
// end ; end ;
27155: GO 27158
27157: POP
// case btype of b_depot , b_warehouse :
27158: LD_VAR 0 1
27162: PUSH
27163: LD_INT 0
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27177
27169: LD_INT 1
27171: DOUBLE
27172: EQUAL
27173: IFTRUE 27177
27175: GO 27378
27177: POP
// case nation of nation_american :
27178: LD_VAR 0 5
27182: PUSH
27183: LD_INT 1
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27247
27191: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27192: LD_ADDR_VAR 0 9
27196: PUSH
27197: LD_VAR 0 11
27201: PUSH
27202: LD_VAR 0 12
27206: PUSH
27207: LD_VAR 0 13
27211: PUSH
27212: LD_VAR 0 14
27216: PUSH
27217: LD_VAR 0 15
27221: PUSH
27222: LD_VAR 0 16
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: PUSH
27235: LD_VAR 0 4
27239: PUSH
27240: LD_INT 1
27242: PLUS
27243: ARRAY
27244: ST_TO_ADDR
27245: GO 27376
27247: LD_INT 2
27249: DOUBLE
27250: EQUAL
27251: IFTRUE 27255
27253: GO 27311
27255: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27256: LD_ADDR_VAR 0 9
27260: PUSH
27261: LD_VAR 0 17
27265: PUSH
27266: LD_VAR 0 18
27270: PUSH
27271: LD_VAR 0 19
27275: PUSH
27276: LD_VAR 0 20
27280: PUSH
27281: LD_VAR 0 21
27285: PUSH
27286: LD_VAR 0 22
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: PUSH
27299: LD_VAR 0 4
27303: PUSH
27304: LD_INT 1
27306: PLUS
27307: ARRAY
27308: ST_TO_ADDR
27309: GO 27376
27311: LD_INT 3
27313: DOUBLE
27314: EQUAL
27315: IFTRUE 27319
27317: GO 27375
27319: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27320: LD_ADDR_VAR 0 9
27324: PUSH
27325: LD_VAR 0 23
27329: PUSH
27330: LD_VAR 0 24
27334: PUSH
27335: LD_VAR 0 25
27339: PUSH
27340: LD_VAR 0 26
27344: PUSH
27345: LD_VAR 0 27
27349: PUSH
27350: LD_VAR 0 28
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: PUSH
27363: LD_VAR 0 4
27367: PUSH
27368: LD_INT 1
27370: PLUS
27371: ARRAY
27372: ST_TO_ADDR
27373: GO 27376
27375: POP
27376: GO 27925
27378: LD_INT 2
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27392
27384: LD_INT 3
27386: DOUBLE
27387: EQUAL
27388: IFTRUE 27392
27390: GO 27448
27392: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27393: LD_ADDR_VAR 0 9
27397: PUSH
27398: LD_VAR 0 29
27402: PUSH
27403: LD_VAR 0 30
27407: PUSH
27408: LD_VAR 0 31
27412: PUSH
27413: LD_VAR 0 32
27417: PUSH
27418: LD_VAR 0 33
27422: PUSH
27423: LD_VAR 0 34
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: PUSH
27436: LD_VAR 0 4
27440: PUSH
27441: LD_INT 1
27443: PLUS
27444: ARRAY
27445: ST_TO_ADDR
27446: GO 27925
27448: LD_INT 16
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27504
27454: LD_INT 17
27456: DOUBLE
27457: EQUAL
27458: IFTRUE 27504
27460: LD_INT 18
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27504
27466: LD_INT 19
27468: DOUBLE
27469: EQUAL
27470: IFTRUE 27504
27472: LD_INT 20
27474: DOUBLE
27475: EQUAL
27476: IFTRUE 27504
27478: LD_INT 21
27480: DOUBLE
27481: EQUAL
27482: IFTRUE 27504
27484: LD_INT 23
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27504
27490: LD_INT 24
27492: DOUBLE
27493: EQUAL
27494: IFTRUE 27504
27496: LD_INT 25
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27560
27504: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27505: LD_ADDR_VAR 0 9
27509: PUSH
27510: LD_VAR 0 35
27514: PUSH
27515: LD_VAR 0 36
27519: PUSH
27520: LD_VAR 0 37
27524: PUSH
27525: LD_VAR 0 38
27529: PUSH
27530: LD_VAR 0 39
27534: PUSH
27535: LD_VAR 0 40
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: PUSH
27548: LD_VAR 0 4
27552: PUSH
27553: LD_INT 1
27555: PLUS
27556: ARRAY
27557: ST_TO_ADDR
27558: GO 27925
27560: LD_INT 6
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27616
27566: LD_INT 7
27568: DOUBLE
27569: EQUAL
27570: IFTRUE 27616
27572: LD_INT 8
27574: DOUBLE
27575: EQUAL
27576: IFTRUE 27616
27578: LD_INT 13
27580: DOUBLE
27581: EQUAL
27582: IFTRUE 27616
27584: LD_INT 12
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27616
27590: LD_INT 15
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27616
27596: LD_INT 11
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27616
27602: LD_INT 14
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27616
27608: LD_INT 10
27610: DOUBLE
27611: EQUAL
27612: IFTRUE 27616
27614: GO 27672
27616: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27617: LD_ADDR_VAR 0 9
27621: PUSH
27622: LD_VAR 0 41
27626: PUSH
27627: LD_VAR 0 42
27631: PUSH
27632: LD_VAR 0 43
27636: PUSH
27637: LD_VAR 0 44
27641: PUSH
27642: LD_VAR 0 45
27646: PUSH
27647: LD_VAR 0 46
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_VAR 0 4
27664: PUSH
27665: LD_INT 1
27667: PLUS
27668: ARRAY
27669: ST_TO_ADDR
27670: GO 27925
27672: LD_INT 36
27674: DOUBLE
27675: EQUAL
27676: IFTRUE 27680
27678: GO 27736
27680: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27681: LD_ADDR_VAR 0 9
27685: PUSH
27686: LD_VAR 0 47
27690: PUSH
27691: LD_VAR 0 48
27695: PUSH
27696: LD_VAR 0 49
27700: PUSH
27701: LD_VAR 0 50
27705: PUSH
27706: LD_VAR 0 51
27710: PUSH
27711: LD_VAR 0 52
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: PUSH
27724: LD_VAR 0 4
27728: PUSH
27729: LD_INT 1
27731: PLUS
27732: ARRAY
27733: ST_TO_ADDR
27734: GO 27925
27736: LD_INT 4
27738: DOUBLE
27739: EQUAL
27740: IFTRUE 27762
27742: LD_INT 5
27744: DOUBLE
27745: EQUAL
27746: IFTRUE 27762
27748: LD_INT 34
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27762
27754: LD_INT 37
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27818
27762: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27763: LD_ADDR_VAR 0 9
27767: PUSH
27768: LD_VAR 0 53
27772: PUSH
27773: LD_VAR 0 54
27777: PUSH
27778: LD_VAR 0 55
27782: PUSH
27783: LD_VAR 0 56
27787: PUSH
27788: LD_VAR 0 57
27792: PUSH
27793: LD_VAR 0 58
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: PUSH
27806: LD_VAR 0 4
27810: PUSH
27811: LD_INT 1
27813: PLUS
27814: ARRAY
27815: ST_TO_ADDR
27816: GO 27925
27818: LD_INT 31
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27868
27824: LD_INT 32
27826: DOUBLE
27827: EQUAL
27828: IFTRUE 27868
27830: LD_INT 33
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27868
27836: LD_INT 27
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27868
27842: LD_INT 26
27844: DOUBLE
27845: EQUAL
27846: IFTRUE 27868
27848: LD_INT 28
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27868
27854: LD_INT 29
27856: DOUBLE
27857: EQUAL
27858: IFTRUE 27868
27860: LD_INT 30
27862: DOUBLE
27863: EQUAL
27864: IFTRUE 27868
27866: GO 27924
27868: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27869: LD_ADDR_VAR 0 9
27873: PUSH
27874: LD_VAR 0 59
27878: PUSH
27879: LD_VAR 0 60
27883: PUSH
27884: LD_VAR 0 61
27888: PUSH
27889: LD_VAR 0 62
27893: PUSH
27894: LD_VAR 0 63
27898: PUSH
27899: LD_VAR 0 64
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: LD_VAR 0 4
27916: PUSH
27917: LD_INT 1
27919: PLUS
27920: ARRAY
27921: ST_TO_ADDR
27922: GO 27925
27924: POP
// temp_list2 = [ ] ;
27925: LD_ADDR_VAR 0 10
27929: PUSH
27930: EMPTY
27931: ST_TO_ADDR
// for i in temp_list do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_VAR 0 9
27941: PUSH
27942: FOR_IN
27943: IFFALSE 27995
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27945: LD_ADDR_VAR 0 10
27949: PUSH
27950: LD_VAR 0 10
27954: PUSH
27955: LD_VAR 0 8
27959: PUSH
27960: LD_INT 1
27962: ARRAY
27963: PUSH
27964: LD_VAR 0 2
27968: PLUS
27969: PUSH
27970: LD_VAR 0 8
27974: PUSH
27975: LD_INT 2
27977: ARRAY
27978: PUSH
27979: LD_VAR 0 3
27983: PLUS
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: ADD
27992: ST_TO_ADDR
27993: GO 27942
27995: POP
27996: POP
// result = temp_list2 ;
27997: LD_ADDR_VAR 0 7
28001: PUSH
28002: LD_VAR 0 10
28006: ST_TO_ADDR
// end ;
28007: LD_VAR 0 7
28011: RET
// export function EnemyInRange ( unit , dist ) ; begin
28012: LD_INT 0
28014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 255
28029: PPUSH
28030: LD_VAR 0 1
28034: PPUSH
28035: CALL_OW 250
28039: PPUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 251
28049: PPUSH
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL 3646 0 4
28059: PUSH
28060: LD_INT 4
28062: ARRAY
28063: ST_TO_ADDR
// end ;
28064: LD_VAR 0 3
28068: RET
// export function PlayerSeeMe ( unit ) ; begin
28069: LD_INT 0
28071: PPUSH
// result := See ( your_side , unit ) ;
28072: LD_ADDR_VAR 0 2
28076: PUSH
28077: LD_OWVAR 2
28081: PPUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 292
28091: ST_TO_ADDR
// end ;
28092: LD_VAR 0 2
28096: RET
// export function ReverseDir ( unit ) ; begin
28097: LD_INT 0
28099: PPUSH
// if not unit then
28100: LD_VAR 0 1
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28155
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28109: LD_ADDR_VAR 0 2
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 4
28119: PUSH
28120: LD_INT 5
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: PUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 254
28149: PUSH
28150: LD_INT 1
28152: PLUS
28153: ARRAY
28154: ST_TO_ADDR
// end ;
28155: LD_VAR 0 2
28159: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28160: LD_INT 0
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
// if not hexes then
28167: LD_VAR 0 2
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28324
// dist := 9999 ;
28176: LD_ADDR_VAR 0 5
28180: PUSH
28181: LD_INT 9999
28183: ST_TO_ADDR
// for i = 1 to hexes do
28184: LD_ADDR_VAR 0 4
28188: PUSH
28189: DOUBLE
28190: LD_INT 1
28192: DEC
28193: ST_TO_ADDR
28194: LD_VAR 0 2
28198: PUSH
28199: FOR_TO
28200: IFFALSE 28312
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_VAR 0 2
28211: PUSH
28212: LD_VAR 0 4
28216: ARRAY
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: PPUSH
28222: LD_VAR 0 2
28226: PUSH
28227: LD_VAR 0 4
28231: ARRAY
28232: PUSH
28233: LD_INT 2
28235: ARRAY
28236: PPUSH
28237: CALL_OW 297
28241: PUSH
28242: LD_VAR 0 5
28246: LESS
28247: IFFALSE 28310
// begin hex := hexes [ i ] ;
28249: LD_ADDR_VAR 0 7
28253: PUSH
28254: LD_VAR 0 2
28258: PUSH
28259: LD_VAR 0 4
28263: ARRAY
28264: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28265: LD_ADDR_VAR 0 5
28269: PUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: LD_VAR 0 2
28279: PUSH
28280: LD_VAR 0 4
28284: ARRAY
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: LD_VAR 0 2
28294: PUSH
28295: LD_VAR 0 4
28299: ARRAY
28300: PUSH
28301: LD_INT 2
28303: ARRAY
28304: PPUSH
28305: CALL_OW 297
28309: ST_TO_ADDR
// end ; end ;
28310: GO 28199
28312: POP
28313: POP
// result := hex ;
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_VAR 0 7
28323: ST_TO_ADDR
// end ;
28324: LD_VAR 0 3
28328: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28333: LD_VAR 0 1
28337: NOT
28338: PUSH
28339: LD_VAR 0 1
28343: PUSH
28344: LD_INT 21
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 23
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PPUSH
28368: CALL_OW 69
28372: IN
28373: NOT
28374: OR
28375: IFFALSE 28379
// exit ;
28377: GO 28426
// for i = 1 to 3 do
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: DOUBLE
28385: LD_INT 1
28387: DEC
28388: ST_TO_ADDR
28389: LD_INT 3
28391: PUSH
28392: FOR_TO
28393: IFFALSE 28424
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28395: LD_VAR 0 1
28399: PPUSH
28400: CALL_OW 250
28404: PPUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 251
28414: PPUSH
28415: LD_INT 1
28417: PPUSH
28418: CALL_OW 453
28422: GO 28392
28424: POP
28425: POP
// end ;
28426: LD_VAR 0 2
28430: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28431: LD_INT 0
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28439: LD_VAR 0 1
28443: NOT
28444: PUSH
28445: LD_VAR 0 2
28449: NOT
28450: OR
28451: PUSH
28452: LD_VAR 0 1
28456: PPUSH
28457: CALL_OW 314
28461: OR
28462: IFFALSE 28466
// exit ;
28464: GO 28907
// x := GetX ( enemy_unit ) ;
28466: LD_ADDR_VAR 0 7
28470: PUSH
28471: LD_VAR 0 2
28475: PPUSH
28476: CALL_OW 250
28480: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28481: LD_ADDR_VAR 0 8
28485: PUSH
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 251
28495: ST_TO_ADDR
// if not x or not y then
28496: LD_VAR 0 7
28500: NOT
28501: PUSH
28502: LD_VAR 0 8
28506: NOT
28507: OR
28508: IFFALSE 28512
// exit ;
28510: GO 28907
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28512: LD_ADDR_VAR 0 6
28516: PUSH
28517: LD_VAR 0 7
28521: PPUSH
28522: LD_INT 0
28524: PPUSH
28525: LD_INT 4
28527: PPUSH
28528: CALL_OW 272
28532: PUSH
28533: LD_VAR 0 8
28537: PPUSH
28538: LD_INT 0
28540: PPUSH
28541: LD_INT 4
28543: PPUSH
28544: CALL_OW 273
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_VAR 0 7
28557: PPUSH
28558: LD_INT 1
28560: PPUSH
28561: LD_INT 4
28563: PPUSH
28564: CALL_OW 272
28568: PUSH
28569: LD_VAR 0 8
28573: PPUSH
28574: LD_INT 1
28576: PPUSH
28577: LD_INT 4
28579: PPUSH
28580: CALL_OW 273
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_VAR 0 7
28593: PPUSH
28594: LD_INT 2
28596: PPUSH
28597: LD_INT 4
28599: PPUSH
28600: CALL_OW 272
28604: PUSH
28605: LD_VAR 0 8
28609: PPUSH
28610: LD_INT 2
28612: PPUSH
28613: LD_INT 4
28615: PPUSH
28616: CALL_OW 273
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_VAR 0 7
28629: PPUSH
28630: LD_INT 3
28632: PPUSH
28633: LD_INT 4
28635: PPUSH
28636: CALL_OW 272
28640: PUSH
28641: LD_VAR 0 8
28645: PPUSH
28646: LD_INT 3
28648: PPUSH
28649: LD_INT 4
28651: PPUSH
28652: CALL_OW 273
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_VAR 0 7
28665: PPUSH
28666: LD_INT 4
28668: PPUSH
28669: LD_INT 4
28671: PPUSH
28672: CALL_OW 272
28676: PUSH
28677: LD_VAR 0 8
28681: PPUSH
28682: LD_INT 4
28684: PPUSH
28685: LD_INT 4
28687: PPUSH
28688: CALL_OW 273
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_VAR 0 7
28701: PPUSH
28702: LD_INT 5
28704: PPUSH
28705: LD_INT 4
28707: PPUSH
28708: CALL_OW 272
28712: PUSH
28713: LD_VAR 0 8
28717: PPUSH
28718: LD_INT 5
28720: PPUSH
28721: LD_INT 4
28723: PPUSH
28724: CALL_OW 273
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: ST_TO_ADDR
// for i = tmp downto 1 do
28741: LD_ADDR_VAR 0 4
28745: PUSH
28746: DOUBLE
28747: LD_VAR 0 6
28751: INC
28752: ST_TO_ADDR
28753: LD_INT 1
28755: PUSH
28756: FOR_DOWNTO
28757: IFFALSE 28858
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28759: LD_VAR 0 6
28763: PUSH
28764: LD_VAR 0 4
28768: ARRAY
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: LD_VAR 0 6
28778: PUSH
28779: LD_VAR 0 4
28783: ARRAY
28784: PUSH
28785: LD_INT 2
28787: ARRAY
28788: PPUSH
28789: CALL_OW 488
28793: NOT
28794: PUSH
28795: LD_VAR 0 6
28799: PUSH
28800: LD_VAR 0 4
28804: ARRAY
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: PPUSH
28810: LD_VAR 0 6
28814: PUSH
28815: LD_VAR 0 4
28819: ARRAY
28820: PUSH
28821: LD_INT 2
28823: ARRAY
28824: PPUSH
28825: CALL_OW 428
28829: PUSH
28830: LD_INT 0
28832: NONEQUAL
28833: OR
28834: IFFALSE 28856
// tmp := Delete ( tmp , i ) ;
28836: LD_ADDR_VAR 0 6
28840: PUSH
28841: LD_VAR 0 6
28845: PPUSH
28846: LD_VAR 0 4
28850: PPUSH
28851: CALL_OW 3
28855: ST_TO_ADDR
28856: GO 28756
28858: POP
28859: POP
// j := GetClosestHex ( unit , tmp ) ;
28860: LD_ADDR_VAR 0 5
28864: PUSH
28865: LD_VAR 0 1
28869: PPUSH
28870: LD_VAR 0 6
28874: PPUSH
28875: CALL 28160 0 2
28879: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28880: LD_VAR 0 1
28884: PPUSH
28885: LD_VAR 0 5
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: PPUSH
28894: LD_VAR 0 5
28898: PUSH
28899: LD_INT 2
28901: ARRAY
28902: PPUSH
28903: CALL_OW 111
// end ;
28907: LD_VAR 0 3
28911: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28912: LD_INT 0
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
// uc_side = 0 ;
28918: LD_ADDR_OWVAR 20
28922: PUSH
28923: LD_INT 0
28925: ST_TO_ADDR
// uc_nation = 0 ;
28926: LD_ADDR_OWVAR 21
28930: PUSH
28931: LD_INT 0
28933: ST_TO_ADDR
// nat_area := natureArea ;
28934: LD_ADDR_VAR 0 4
28938: PUSH
28939: LD_INT 18
28941: ST_TO_ADDR
// InitHc ;
28942: CALL_OW 19
// for i = 1 to 4 do
28946: LD_ADDR_VAR 0 2
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_INT 4
28958: PUSH
28959: FOR_TO
28960: IFFALSE 29007
// begin hc_class = 18 ;
28962: LD_ADDR_OWVAR 28
28966: PUSH
28967: LD_INT 18
28969: ST_TO_ADDR
// hc_gallery =  ;
28970: LD_ADDR_OWVAR 33
28974: PUSH
28975: LD_STRING 
28977: ST_TO_ADDR
// animal := CreateHuman ;
28978: LD_ADDR_VAR 0 3
28982: PUSH
28983: CALL_OW 44
28987: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28988: LD_VAR 0 3
28992: PPUSH
28993: LD_VAR 0 4
28997: PPUSH
28998: LD_INT 0
29000: PPUSH
29001: CALL_OW 49
// end ;
29005: GO 28959
29007: POP
29008: POP
// for i = 1 to 3 do
29009: LD_ADDR_VAR 0 2
29013: PUSH
29014: DOUBLE
29015: LD_INT 1
29017: DEC
29018: ST_TO_ADDR
29019: LD_INT 3
29021: PUSH
29022: FOR_TO
29023: IFFALSE 29087
// begin hc_class = class_tiger ;
29025: LD_ADDR_OWVAR 28
29029: PUSH
29030: LD_INT 14
29032: ST_TO_ADDR
// hc_gallery =  ;
29033: LD_ADDR_OWVAR 33
29037: PUSH
29038: LD_STRING 
29040: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29041: LD_ADDR_OWVAR 35
29045: PUSH
29046: LD_INT 5
29048: NEG
29049: PPUSH
29050: LD_INT 5
29052: PPUSH
29053: CALL_OW 12
29057: ST_TO_ADDR
// animal := CreateHuman ;
29058: LD_ADDR_VAR 0 3
29062: PUSH
29063: CALL_OW 44
29067: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29068: LD_VAR 0 3
29072: PPUSH
29073: LD_VAR 0 4
29077: PPUSH
29078: LD_INT 0
29080: PPUSH
29081: CALL_OW 49
// end ;
29085: GO 29022
29087: POP
29088: POP
// for i = 1 to 5 do
29089: LD_ADDR_VAR 0 2
29093: PUSH
29094: DOUBLE
29095: LD_INT 1
29097: DEC
29098: ST_TO_ADDR
29099: LD_INT 5
29101: PUSH
29102: FOR_TO
29103: IFFALSE 29206
// begin hc_class = class_apeman ;
29105: LD_ADDR_OWVAR 28
29109: PUSH
29110: LD_INT 12
29112: ST_TO_ADDR
// hc_gallery =  ;
29113: LD_ADDR_OWVAR 33
29117: PUSH
29118: LD_STRING 
29120: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29121: LD_ADDR_OWVAR 35
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PPUSH
29130: LD_INT 2
29132: PPUSH
29133: CALL_OW 12
29137: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29138: LD_ADDR_OWVAR 31
29142: PUSH
29143: LD_INT 1
29145: PPUSH
29146: LD_INT 3
29148: PPUSH
29149: CALL_OW 12
29153: PUSH
29154: LD_INT 1
29156: PPUSH
29157: LD_INT 3
29159: PPUSH
29160: CALL_OW 12
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// animal := CreateHuman ;
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: CALL_OW 44
29186: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29187: LD_VAR 0 3
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: LD_INT 0
29199: PPUSH
29200: CALL_OW 49
// end ;
29204: GO 29102
29206: POP
29207: POP
// for i = 1 to 3 do
29208: LD_ADDR_VAR 0 2
29212: PUSH
29213: DOUBLE
29214: LD_INT 1
29216: DEC
29217: ST_TO_ADDR
29218: LD_INT 3
29220: PUSH
29221: FOR_TO
29222: IFFALSE 29269
// begin hc_class = 13 ;
29224: LD_ADDR_OWVAR 28
29228: PUSH
29229: LD_INT 13
29231: ST_TO_ADDR
// hc_gallery =  ;
29232: LD_ADDR_OWVAR 33
29236: PUSH
29237: LD_STRING 
29239: ST_TO_ADDR
// animal := CreateHuman ;
29240: LD_ADDR_VAR 0 3
29244: PUSH
29245: CALL_OW 44
29249: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29250: LD_VAR 0 3
29254: PPUSH
29255: LD_VAR 0 4
29259: PPUSH
29260: LD_INT 0
29262: PPUSH
29263: CALL_OW 49
// end ;
29267: GO 29221
29269: POP
29270: POP
// for i = 1 to 7 do
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: DOUBLE
29277: LD_INT 1
29279: DEC
29280: ST_TO_ADDR
29281: LD_INT 7
29283: PUSH
29284: FOR_TO
29285: IFFALSE 29330
// begin hc_class = 20 ;
29287: LD_ADDR_OWVAR 28
29291: PUSH
29292: LD_INT 20
29294: ST_TO_ADDR
// hc_gallery =  ;
29295: LD_ADDR_OWVAR 33
29299: PUSH
29300: LD_STRING 
29302: ST_TO_ADDR
// animal := CreateHuman ;
29303: LD_ADDR_VAR 0 3
29307: PUSH
29308: CALL_OW 44
29312: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29313: LD_VAR 0 3
29317: PPUSH
29318: LD_INT 19
29320: PPUSH
29321: LD_INT 0
29323: PPUSH
29324: CALL_OW 49
// end ;
29328: GO 29284
29330: POP
29331: POP
// end ;
29332: LD_VAR 0 1
29336: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
// if not list then
29367: LD_VAR 0 1
29371: NOT
29372: IFFALSE 29376
// exit ;
29374: GO 32569
// base := list [ 1 ] ;
29376: LD_ADDR_VAR 0 3
29380: PUSH
29381: LD_VAR 0 1
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: ST_TO_ADDR
// group := list [ 2 ] ;
29390: LD_ADDR_VAR 0 4
29394: PUSH
29395: LD_VAR 0 1
29399: PUSH
29400: LD_INT 2
29402: ARRAY
29403: ST_TO_ADDR
// path := list [ 3 ] ;
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: LD_VAR 0 1
29413: PUSH
29414: LD_INT 3
29416: ARRAY
29417: ST_TO_ADDR
// flags := list [ 4 ] ;
29418: LD_ADDR_VAR 0 6
29422: PUSH
29423: LD_VAR 0 1
29427: PUSH
29428: LD_INT 4
29430: ARRAY
29431: ST_TO_ADDR
// mined := [ ] ;
29432: LD_ADDR_VAR 0 27
29436: PUSH
29437: EMPTY
29438: ST_TO_ADDR
// bombed := [ ] ;
29439: LD_ADDR_VAR 0 28
29443: PUSH
29444: EMPTY
29445: ST_TO_ADDR
// if not group or not path then
29446: LD_VAR 0 4
29450: NOT
29451: PUSH
29452: LD_VAR 0 5
29456: NOT
29457: OR
29458: IFFALSE 29462
// exit ;
29460: GO 32569
// if flags then
29462: LD_VAR 0 6
29466: IFFALSE 29610
// begin f_ignore_area := flags [ 1 ] ;
29468: LD_ADDR_VAR 0 17
29472: PUSH
29473: LD_VAR 0 6
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29482: LD_ADDR_VAR 0 18
29486: PUSH
29487: LD_VAR 0 6
29491: PUSH
29492: LD_INT 2
29494: ARRAY
29495: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29496: LD_ADDR_VAR 0 19
29500: PUSH
29501: LD_VAR 0 6
29505: PUSH
29506: LD_INT 3
29508: ARRAY
29509: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29510: LD_ADDR_VAR 0 20
29514: PUSH
29515: LD_VAR 0 6
29519: PUSH
29520: LD_INT 4
29522: ARRAY
29523: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29524: LD_ADDR_VAR 0 21
29528: PUSH
29529: LD_VAR 0 6
29533: PUSH
29534: LD_INT 5
29536: ARRAY
29537: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29538: LD_ADDR_VAR 0 22
29542: PUSH
29543: LD_VAR 0 6
29547: PUSH
29548: LD_INT 6
29550: ARRAY
29551: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29552: LD_ADDR_VAR 0 23
29556: PUSH
29557: LD_VAR 0 6
29561: PUSH
29562: LD_INT 7
29564: ARRAY
29565: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29566: LD_ADDR_VAR 0 24
29570: PUSH
29571: LD_VAR 0 6
29575: PUSH
29576: LD_INT 8
29578: ARRAY
29579: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29580: LD_ADDR_VAR 0 25
29584: PUSH
29585: LD_VAR 0 6
29589: PUSH
29590: LD_INT 9
29592: ARRAY
29593: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29594: LD_ADDR_VAR 0 26
29598: PUSH
29599: LD_VAR 0 6
29603: PUSH
29604: LD_INT 10
29606: ARRAY
29607: ST_TO_ADDR
// end else
29608: GO 29690
// begin f_ignore_area := false ;
29610: LD_ADDR_VAR 0 17
29614: PUSH
29615: LD_INT 0
29617: ST_TO_ADDR
// f_capture := false ;
29618: LD_ADDR_VAR 0 18
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// f_ignore_civ := false ;
29626: LD_ADDR_VAR 0 19
29630: PUSH
29631: LD_INT 0
29633: ST_TO_ADDR
// f_murder := false ;
29634: LD_ADDR_VAR 0 20
29638: PUSH
29639: LD_INT 0
29641: ST_TO_ADDR
// f_mines := false ;
29642: LD_ADDR_VAR 0 21
29646: PUSH
29647: LD_INT 0
29649: ST_TO_ADDR
// f_repair := false ;
29650: LD_ADDR_VAR 0 22
29654: PUSH
29655: LD_INT 0
29657: ST_TO_ADDR
// f_heal := false ;
29658: LD_ADDR_VAR 0 23
29662: PUSH
29663: LD_INT 0
29665: ST_TO_ADDR
// f_spacetime := false ;
29666: LD_ADDR_VAR 0 24
29670: PUSH
29671: LD_INT 0
29673: ST_TO_ADDR
// f_attack_depot := false ;
29674: LD_ADDR_VAR 0 25
29678: PUSH
29679: LD_INT 0
29681: ST_TO_ADDR
// f_crawl := false ;
29682: LD_ADDR_VAR 0 26
29686: PUSH
29687: LD_INT 0
29689: ST_TO_ADDR
// end ; units_path := [ ] ;
29690: LD_ADDR_VAR 0 16
29694: PUSH
29695: EMPTY
29696: ST_TO_ADDR
// for i = 1 to group do
29697: LD_ADDR_VAR 0 7
29701: PUSH
29702: DOUBLE
29703: LD_INT 1
29705: DEC
29706: ST_TO_ADDR
29707: LD_VAR 0 4
29711: PUSH
29712: FOR_TO
29713: IFFALSE 29742
// begin units_path := Replace ( units_path , i , path ) ;
29715: LD_ADDR_VAR 0 16
29719: PUSH
29720: LD_VAR 0 16
29724: PPUSH
29725: LD_VAR 0 7
29729: PPUSH
29730: LD_VAR 0 5
29734: PPUSH
29735: CALL_OW 1
29739: ST_TO_ADDR
// end ;
29740: GO 29712
29742: POP
29743: POP
// repeat for i = group downto 1 do
29744: LD_ADDR_VAR 0 7
29748: PUSH
29749: DOUBLE
29750: LD_VAR 0 4
29754: INC
29755: ST_TO_ADDR
29756: LD_INT 1
29758: PUSH
29759: FOR_DOWNTO
29760: IFFALSE 32551
// begin tmp := [ ] ;
29762: LD_ADDR_VAR 0 14
29766: PUSH
29767: EMPTY
29768: ST_TO_ADDR
// attacking := false ;
29769: LD_ADDR_VAR 0 29
29773: PUSH
29774: LD_INT 0
29776: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29777: LD_VAR 0 4
29781: PUSH
29782: LD_VAR 0 7
29786: ARRAY
29787: PPUSH
29788: CALL_OW 301
29792: PUSH
29793: LD_VAR 0 4
29797: PUSH
29798: LD_VAR 0 7
29802: ARRAY
29803: NOT
29804: OR
29805: IFFALSE 29849
// begin group := Delete ( group , i ) ;
29807: LD_ADDR_VAR 0 4
29811: PUSH
29812: LD_VAR 0 4
29816: PPUSH
29817: LD_VAR 0 7
29821: PPUSH
29822: CALL_OW 3
29826: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29827: LD_ADDR_VAR 0 16
29831: PUSH
29832: LD_VAR 0 16
29836: PPUSH
29837: LD_VAR 0 7
29841: PPUSH
29842: CALL_OW 3
29846: ST_TO_ADDR
// continue ;
29847: GO 29759
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29849: LD_VAR 0 4
29853: PUSH
29854: LD_VAR 0 7
29858: ARRAY
29859: PPUSH
29860: LD_INT 10
29862: PPUSH
29863: CALL 28012 0 2
29867: NOT
29868: PUSH
29869: LD_VAR 0 16
29873: PUSH
29874: LD_VAR 0 7
29878: ARRAY
29879: PUSH
29880: EMPTY
29881: EQUAL
29882: NOT
29883: AND
29884: IFFALSE 30168
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29886: LD_VAR 0 4
29890: PUSH
29891: LD_VAR 0 7
29895: ARRAY
29896: PPUSH
29897: CALL_OW 262
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: IN
29912: IFFALSE 29971
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29914: LD_VAR 0 4
29918: PUSH
29919: LD_VAR 0 7
29923: ARRAY
29924: PPUSH
29925: CALL_OW 261
29929: PUSH
29930: LD_INT 10
29932: LESS
29933: PUSH
29934: LD_VAR 0 4
29938: PUSH
29939: LD_VAR 0 7
29943: ARRAY
29944: PPUSH
29945: CALL 28069 0 1
29949: NOT
29950: AND
29951: IFFALSE 29971
// SetFuel ( group [ i ] , 12 ) ;
29953: LD_VAR 0 4
29957: PUSH
29958: LD_VAR 0 7
29962: ARRAY
29963: PPUSH
29964: LD_INT 12
29966: PPUSH
29967: CALL_OW 240
// if units_path [ i ] then
29971: LD_VAR 0 16
29975: PUSH
29976: LD_VAR 0 7
29980: ARRAY
29981: IFFALSE 30166
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29983: LD_VAR 0 4
29987: PUSH
29988: LD_VAR 0 7
29992: ARRAY
29993: PPUSH
29994: LD_VAR 0 16
29998: PUSH
29999: LD_VAR 0 7
30003: ARRAY
30004: PUSH
30005: LD_INT 1
30007: ARRAY
30008: PUSH
30009: LD_INT 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 16
30017: PUSH
30018: LD_VAR 0 7
30022: ARRAY
30023: PUSH
30024: LD_INT 1
30026: ARRAY
30027: PUSH
30028: LD_INT 2
30030: ARRAY
30031: PPUSH
30032: CALL_OW 297
30036: PUSH
30037: LD_INT 6
30039: GREATER
30040: IFFALSE 30115
// begin if not HasTask ( group [ i ] ) then
30042: LD_VAR 0 4
30046: PUSH
30047: LD_VAR 0 7
30051: ARRAY
30052: PPUSH
30053: CALL_OW 314
30057: NOT
30058: IFFALSE 30113
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30060: LD_VAR 0 4
30064: PUSH
30065: LD_VAR 0 7
30069: ARRAY
30070: PPUSH
30071: LD_VAR 0 16
30075: PUSH
30076: LD_VAR 0 7
30080: ARRAY
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PUSH
30086: LD_INT 1
30088: ARRAY
30089: PPUSH
30090: LD_VAR 0 16
30094: PUSH
30095: LD_VAR 0 7
30099: ARRAY
30100: PUSH
30101: LD_INT 1
30103: ARRAY
30104: PUSH
30105: LD_INT 2
30107: ARRAY
30108: PPUSH
30109: CALL_OW 114
// end else
30113: GO 30166
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30115: LD_ADDR_VAR 0 15
30119: PUSH
30120: LD_VAR 0 16
30124: PUSH
30125: LD_VAR 0 7
30129: ARRAY
30130: PPUSH
30131: LD_INT 1
30133: PPUSH
30134: CALL_OW 3
30138: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30139: LD_ADDR_VAR 0 16
30143: PUSH
30144: LD_VAR 0 16
30148: PPUSH
30149: LD_VAR 0 7
30153: PPUSH
30154: LD_VAR 0 15
30158: PPUSH
30159: CALL_OW 1
30163: ST_TO_ADDR
// continue ;
30164: GO 29759
// end ; end ; end else
30166: GO 32549
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30168: LD_ADDR_VAR 0 14
30172: PUSH
30173: LD_INT 81
30175: PUSH
30176: LD_VAR 0 4
30180: PUSH
30181: LD_VAR 0 7
30185: ARRAY
30186: PPUSH
30187: CALL_OW 255
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 14
30205: NOT
30206: IFFALSE 30210
// continue ;
30208: GO 29759
// if f_ignore_area then
30210: LD_VAR 0 17
30214: IFFALSE 30302
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30216: LD_ADDR_VAR 0 15
30220: PUSH
30221: LD_VAR 0 14
30225: PPUSH
30226: LD_INT 3
30228: PUSH
30229: LD_INT 92
30231: PUSH
30232: LD_VAR 0 17
30236: PUSH
30237: LD_INT 1
30239: ARRAY
30240: PUSH
30241: LD_VAR 0 17
30245: PUSH
30246: LD_INT 2
30248: ARRAY
30249: PUSH
30250: LD_VAR 0 17
30254: PUSH
30255: LD_INT 3
30257: ARRAY
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 72
30273: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30274: LD_VAR 0 14
30278: PUSH
30279: LD_VAR 0 15
30283: DIFF
30284: IFFALSE 30302
// tmp := tmp diff tmp2 ;
30286: LD_ADDR_VAR 0 14
30290: PUSH
30291: LD_VAR 0 14
30295: PUSH
30296: LD_VAR 0 15
30300: DIFF
30301: ST_TO_ADDR
// end ; if not f_murder then
30302: LD_VAR 0 20
30306: NOT
30307: IFFALSE 30365
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30309: LD_ADDR_VAR 0 15
30313: PUSH
30314: LD_VAR 0 14
30318: PPUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 50
30324: PUSH
30325: EMPTY
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PPUSH
30332: CALL_OW 72
30336: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30337: LD_VAR 0 14
30341: PUSH
30342: LD_VAR 0 15
30346: DIFF
30347: IFFALSE 30365
// tmp := tmp diff tmp2 ;
30349: LD_ADDR_VAR 0 14
30353: PUSH
30354: LD_VAR 0 14
30358: PUSH
30359: LD_VAR 0 15
30363: DIFF
30364: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30365: LD_ADDR_VAR 0 14
30369: PUSH
30370: LD_VAR 0 4
30374: PUSH
30375: LD_VAR 0 7
30379: ARRAY
30380: PPUSH
30381: LD_VAR 0 14
30385: PPUSH
30386: LD_INT 1
30388: PPUSH
30389: LD_INT 1
30391: PPUSH
30392: CALL 3185 0 4
30396: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30397: LD_VAR 0 4
30401: PUSH
30402: LD_VAR 0 7
30406: ARRAY
30407: PPUSH
30408: CALL_OW 257
30412: PUSH
30413: LD_INT 1
30415: EQUAL
30416: IFFALSE 30843
// begin if WantPlant ( group [ i ] ) then
30418: LD_VAR 0 4
30422: PUSH
30423: LD_VAR 0 7
30427: ARRAY
30428: PPUSH
30429: CALL 2653 0 1
30433: IFFALSE 30437
// continue ;
30435: GO 29759
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30437: LD_VAR 0 18
30441: PUSH
30442: LD_VAR 0 4
30446: PUSH
30447: LD_VAR 0 7
30451: ARRAY
30452: PPUSH
30453: CALL_OW 310
30457: NOT
30458: AND
30459: PUSH
30460: LD_VAR 0 14
30464: PUSH
30465: LD_INT 1
30467: ARRAY
30468: PUSH
30469: LD_VAR 0 14
30473: PPUSH
30474: LD_INT 21
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 58
30486: PUSH
30487: EMPTY
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PPUSH
30494: CALL_OW 72
30498: IN
30499: AND
30500: IFFALSE 30536
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30502: LD_VAR 0 4
30506: PUSH
30507: LD_VAR 0 7
30511: ARRAY
30512: PPUSH
30513: LD_VAR 0 14
30517: PUSH
30518: LD_INT 1
30520: ARRAY
30521: PPUSH
30522: CALL_OW 120
// attacking := true ;
30526: LD_ADDR_VAR 0 29
30530: PUSH
30531: LD_INT 1
30533: ST_TO_ADDR
// continue ;
30534: GO 29759
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30536: LD_VAR 0 26
30540: PUSH
30541: LD_VAR 0 4
30545: PUSH
30546: LD_VAR 0 7
30550: ARRAY
30551: PPUSH
30552: CALL_OW 256
30556: PUSH
30557: LD_INT 800
30559: LESS
30560: AND
30561: PUSH
30562: LD_VAR 0 4
30566: PUSH
30567: LD_VAR 0 7
30571: ARRAY
30572: PPUSH
30573: CALL_OW 318
30577: NOT
30578: AND
30579: IFFALSE 30596
// ComCrawl ( group [ i ] ) ;
30581: LD_VAR 0 4
30585: PUSH
30586: LD_VAR 0 7
30590: ARRAY
30591: PPUSH
30592: CALL_OW 137
// if f_mines then
30596: LD_VAR 0 21
30600: IFFALSE 30843
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30602: LD_VAR 0 14
30606: PUSH
30607: LD_INT 1
30609: ARRAY
30610: PPUSH
30611: CALL_OW 247
30615: PUSH
30616: LD_INT 3
30618: EQUAL
30619: PUSH
30620: LD_VAR 0 14
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PUSH
30629: LD_VAR 0 27
30633: IN
30634: NOT
30635: AND
30636: IFFALSE 30843
// begin x := GetX ( tmp [ 1 ] ) ;
30638: LD_ADDR_VAR 0 10
30642: PUSH
30643: LD_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PPUSH
30652: CALL_OW 250
30656: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30657: LD_ADDR_VAR 0 11
30661: PUSH
30662: LD_VAR 0 14
30666: PUSH
30667: LD_INT 1
30669: ARRAY
30670: PPUSH
30671: CALL_OW 251
30675: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30676: LD_ADDR_VAR 0 12
30680: PUSH
30681: LD_VAR 0 4
30685: PUSH
30686: LD_VAR 0 7
30690: ARRAY
30691: PPUSH
30692: CALL 28097 0 1
30696: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30697: LD_VAR 0 4
30701: PUSH
30702: LD_VAR 0 7
30706: ARRAY
30707: PPUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: LD_VAR 0 11
30717: PPUSH
30718: LD_VAR 0 14
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: PPUSH
30727: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30731: LD_VAR 0 4
30735: PUSH
30736: LD_VAR 0 7
30740: ARRAY
30741: PPUSH
30742: LD_VAR 0 10
30746: PPUSH
30747: LD_VAR 0 12
30751: PPUSH
30752: LD_INT 7
30754: PPUSH
30755: CALL_OW 272
30759: PPUSH
30760: LD_VAR 0 11
30764: PPUSH
30765: LD_VAR 0 12
30769: PPUSH
30770: LD_INT 7
30772: PPUSH
30773: CALL_OW 273
30777: PPUSH
30778: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
30782: LD_VAR 0 4
30786: PUSH
30787: LD_VAR 0 7
30791: ARRAY
30792: PPUSH
30793: LD_INT 71
30795: PPUSH
30796: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30800: LD_ADDR_VAR 0 27
30804: PUSH
30805: LD_VAR 0 27
30809: PPUSH
30810: LD_VAR 0 27
30814: PUSH
30815: LD_INT 1
30817: PLUS
30818: PPUSH
30819: LD_VAR 0 14
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 1
30832: ST_TO_ADDR
// attacking := true ;
30833: LD_ADDR_VAR 0 29
30837: PUSH
30838: LD_INT 1
30840: ST_TO_ADDR
// continue ;
30841: GO 29759
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30843: LD_VAR 0 4
30847: PUSH
30848: LD_VAR 0 7
30852: ARRAY
30853: PPUSH
30854: CALL_OW 257
30858: PUSH
30859: LD_INT 17
30861: EQUAL
30862: IFFALSE 30990
// begin attacking := false ;
30864: LD_ADDR_VAR 0 29
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// k := 5 ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 5
30879: ST_TO_ADDR
// if tmp < k then
30880: LD_VAR 0 14
30884: PUSH
30885: LD_VAR 0 9
30889: LESS
30890: IFFALSE 30902
// k := tmp ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_VAR 0 14
30901: ST_TO_ADDR
// for j = 1 to k do
30902: LD_ADDR_VAR 0 8
30906: PUSH
30907: DOUBLE
30908: LD_INT 1
30910: DEC
30911: ST_TO_ADDR
30912: LD_VAR 0 9
30916: PUSH
30917: FOR_TO
30918: IFFALSE 30988
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30920: LD_VAR 0 14
30924: PUSH
30925: LD_VAR 0 8
30929: ARRAY
30930: PUSH
30931: LD_VAR 0 14
30935: PPUSH
30936: LD_INT 58
30938: PUSH
30939: EMPTY
30940: LIST
30941: PPUSH
30942: CALL_OW 72
30946: IN
30947: NOT
30948: IFFALSE 30986
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30950: LD_VAR 0 4
30954: PUSH
30955: LD_VAR 0 7
30959: ARRAY
30960: PPUSH
30961: LD_VAR 0 14
30965: PUSH
30966: LD_VAR 0 8
30970: ARRAY
30971: PPUSH
30972: CALL_OW 115
// attacking := true ;
30976: LD_ADDR_VAR 0 29
30980: PUSH
30981: LD_INT 1
30983: ST_TO_ADDR
// continue ;
30984: GO 30917
// end ; end ;
30986: GO 30917
30988: POP
30989: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
30990: LD_VAR 0 4
30994: PUSH
30995: LD_VAR 0 7
30999: ARRAY
31000: PPUSH
31001: CALL_OW 257
31005: PUSH
31006: LD_INT 8
31008: EQUAL
31009: PUSH
31010: LD_VAR 0 4
31014: PUSH
31015: LD_VAR 0 7
31019: ARRAY
31020: PPUSH
31021: CALL_OW 264
31025: PUSH
31026: LD_INT 28
31028: PUSH
31029: LD_INT 45
31031: PUSH
31032: LD_INT 7
31034: PUSH
31035: LD_INT 47
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: IN
31044: OR
31045: IFFALSE 31275
// begin attacking := false ;
31047: LD_ADDR_VAR 0 29
31051: PUSH
31052: LD_INT 0
31054: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31055: LD_VAR 0 14
31059: PUSH
31060: LD_INT 1
31062: ARRAY
31063: PPUSH
31064: CALL_OW 266
31068: PUSH
31069: LD_INT 32
31071: PUSH
31072: LD_INT 31
31074: PUSH
31075: LD_INT 33
31077: PUSH
31078: LD_INT 4
31080: PUSH
31081: LD_INT 5
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: IN
31091: IFFALSE 31275
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31093: LD_ADDR_VAR 0 9
31097: PUSH
31098: LD_VAR 0 14
31102: PUSH
31103: LD_INT 1
31105: ARRAY
31106: PPUSH
31107: CALL_OW 266
31111: PPUSH
31112: LD_VAR 0 14
31116: PUSH
31117: LD_INT 1
31119: ARRAY
31120: PPUSH
31121: CALL_OW 250
31125: PPUSH
31126: LD_VAR 0 14
31130: PUSH
31131: LD_INT 1
31133: ARRAY
31134: PPUSH
31135: CALL_OW 251
31139: PPUSH
31140: LD_VAR 0 14
31144: PUSH
31145: LD_INT 1
31147: ARRAY
31148: PPUSH
31149: CALL_OW 254
31153: PPUSH
31154: LD_VAR 0 14
31158: PUSH
31159: LD_INT 1
31161: ARRAY
31162: PPUSH
31163: CALL_OW 248
31167: PPUSH
31168: LD_INT 0
31170: PPUSH
31171: CALL 9473 0 6
31175: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31176: LD_ADDR_VAR 0 8
31180: PUSH
31181: LD_VAR 0 4
31185: PUSH
31186: LD_VAR 0 7
31190: ARRAY
31191: PPUSH
31192: LD_VAR 0 9
31196: PPUSH
31197: CALL 28160 0 2
31201: ST_TO_ADDR
// if j then
31202: LD_VAR 0 8
31206: IFFALSE 31275
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31208: LD_VAR 0 8
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PPUSH
31217: LD_VAR 0 8
31221: PUSH
31222: LD_INT 2
31224: ARRAY
31225: PPUSH
31226: CALL_OW 488
31230: IFFALSE 31275
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31232: LD_VAR 0 4
31236: PUSH
31237: LD_VAR 0 7
31241: ARRAY
31242: PPUSH
31243: LD_VAR 0 8
31247: PUSH
31248: LD_INT 1
31250: ARRAY
31251: PPUSH
31252: LD_VAR 0 8
31256: PUSH
31257: LD_INT 2
31259: ARRAY
31260: PPUSH
31261: CALL_OW 116
// attacking := true ;
31265: LD_ADDR_VAR 0 29
31269: PUSH
31270: LD_INT 1
31272: ST_TO_ADDR
// continue ;
31273: GO 29759
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31275: LD_VAR 0 4
31279: PUSH
31280: LD_VAR 0 7
31284: ARRAY
31285: PPUSH
31286: CALL_OW 265
31290: PUSH
31291: LD_INT 11
31293: EQUAL
31294: IFFALSE 31572
// begin k := 10 ;
31296: LD_ADDR_VAR 0 9
31300: PUSH
31301: LD_INT 10
31303: ST_TO_ADDR
// x := 0 ;
31304: LD_ADDR_VAR 0 10
31308: PUSH
31309: LD_INT 0
31311: ST_TO_ADDR
// if tmp < k then
31312: LD_VAR 0 14
31316: PUSH
31317: LD_VAR 0 9
31321: LESS
31322: IFFALSE 31334
// k := tmp ;
31324: LD_ADDR_VAR 0 9
31328: PUSH
31329: LD_VAR 0 14
31333: ST_TO_ADDR
// for j = k downto 1 do
31334: LD_ADDR_VAR 0 8
31338: PUSH
31339: DOUBLE
31340: LD_VAR 0 9
31344: INC
31345: ST_TO_ADDR
31346: LD_INT 1
31348: PUSH
31349: FOR_DOWNTO
31350: IFFALSE 31425
// begin if GetType ( tmp [ j ] ) = unit_human then
31352: LD_VAR 0 14
31356: PUSH
31357: LD_VAR 0 8
31361: ARRAY
31362: PPUSH
31363: CALL_OW 247
31367: PUSH
31368: LD_INT 1
31370: EQUAL
31371: IFFALSE 31423
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31373: LD_VAR 0 4
31377: PUSH
31378: LD_VAR 0 7
31382: ARRAY
31383: PPUSH
31384: LD_VAR 0 14
31388: PUSH
31389: LD_VAR 0 8
31393: ARRAY
31394: PPUSH
31395: CALL 28431 0 2
// x := tmp [ j ] ;
31399: LD_ADDR_VAR 0 10
31403: PUSH
31404: LD_VAR 0 14
31408: PUSH
31409: LD_VAR 0 8
31413: ARRAY
31414: ST_TO_ADDR
// attacking := true ;
31415: LD_ADDR_VAR 0 29
31419: PUSH
31420: LD_INT 1
31422: ST_TO_ADDR
// end ; end ;
31423: GO 31349
31425: POP
31426: POP
// if not x then
31427: LD_VAR 0 10
31431: NOT
31432: IFFALSE 31572
// begin attacking := true ;
31434: LD_ADDR_VAR 0 29
31438: PUSH
31439: LD_INT 1
31441: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31442: LD_VAR 0 4
31446: PUSH
31447: LD_VAR 0 7
31451: ARRAY
31452: PPUSH
31453: CALL_OW 250
31457: PPUSH
31458: LD_VAR 0 4
31462: PUSH
31463: LD_VAR 0 7
31467: ARRAY
31468: PPUSH
31469: CALL_OW 251
31473: PPUSH
31474: CALL 1911 0 2
31478: PUSH
31479: LD_INT 2
31481: ARRAY
31482: PUSH
31483: LD_VAR 0 14
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: CALL_OW 250
31496: PPUSH
31497: LD_VAR 0 14
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PPUSH
31506: CALL_OW 251
31510: PPUSH
31511: CALL 1911 0 2
31515: PUSH
31516: LD_INT 2
31518: ARRAY
31519: EQUAL
31520: IFFALSE 31548
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31522: LD_VAR 0 4
31526: PUSH
31527: LD_VAR 0 7
31531: ARRAY
31532: PPUSH
31533: LD_VAR 0 14
31537: PUSH
31538: LD_INT 1
31540: ARRAY
31541: PPUSH
31542: CALL 28431 0 2
31546: GO 31572
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31548: LD_VAR 0 4
31552: PUSH
31553: LD_VAR 0 7
31557: ARRAY
31558: PPUSH
31559: LD_VAR 0 14
31563: PUSH
31564: LD_INT 1
31566: ARRAY
31567: PPUSH
31568: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31572: LD_VAR 0 4
31576: PUSH
31577: LD_VAR 0 7
31581: ARRAY
31582: PPUSH
31583: CALL_OW 264
31587: PUSH
31588: LD_INT 29
31590: EQUAL
31591: IFFALSE 31957
// begin if WantsToAttack ( group [ i ] ) in bombed then
31593: LD_VAR 0 4
31597: PUSH
31598: LD_VAR 0 7
31602: ARRAY
31603: PPUSH
31604: CALL_OW 319
31608: PUSH
31609: LD_VAR 0 28
31613: IN
31614: IFFALSE 31618
// continue ;
31616: GO 29759
// k := 8 ;
31618: LD_ADDR_VAR 0 9
31622: PUSH
31623: LD_INT 8
31625: ST_TO_ADDR
// x := 0 ;
31626: LD_ADDR_VAR 0 10
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// if tmp < k then
31634: LD_VAR 0 14
31638: PUSH
31639: LD_VAR 0 9
31643: LESS
31644: IFFALSE 31656
// k := tmp ;
31646: LD_ADDR_VAR 0 9
31650: PUSH
31651: LD_VAR 0 14
31655: ST_TO_ADDR
// for j = 1 to k do
31656: LD_ADDR_VAR 0 8
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_VAR 0 9
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31804
// begin if GetType ( tmp [ j ] ) = unit_building then
31674: LD_VAR 0 14
31678: PUSH
31679: LD_VAR 0 8
31683: ARRAY
31684: PPUSH
31685: CALL_OW 247
31689: PUSH
31690: LD_INT 3
31692: EQUAL
31693: IFFALSE 31802
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31695: LD_VAR 0 14
31699: PUSH
31700: LD_VAR 0 8
31704: ARRAY
31705: PUSH
31706: LD_VAR 0 28
31710: IN
31711: NOT
31712: PUSH
31713: LD_VAR 0 14
31717: PUSH
31718: LD_VAR 0 8
31722: ARRAY
31723: PPUSH
31724: CALL_OW 313
31728: AND
31729: IFFALSE 31802
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31731: LD_VAR 0 4
31735: PUSH
31736: LD_VAR 0 7
31740: ARRAY
31741: PPUSH
31742: LD_VAR 0 14
31746: PUSH
31747: LD_VAR 0 8
31751: ARRAY
31752: PPUSH
31753: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31757: LD_ADDR_VAR 0 28
31761: PUSH
31762: LD_VAR 0 28
31766: PPUSH
31767: LD_VAR 0 28
31771: PUSH
31772: LD_INT 1
31774: PLUS
31775: PPUSH
31776: LD_VAR 0 14
31780: PUSH
31781: LD_VAR 0 8
31785: ARRAY
31786: PPUSH
31787: CALL_OW 1
31791: ST_TO_ADDR
// attacking := true ;
31792: LD_ADDR_VAR 0 29
31796: PUSH
31797: LD_INT 1
31799: ST_TO_ADDR
// break ;
31800: GO 31804
// end ; end ;
31802: GO 31671
31804: POP
31805: POP
// if not attacking and f_attack_depot then
31806: LD_VAR 0 29
31810: NOT
31811: PUSH
31812: LD_VAR 0 25
31816: AND
31817: IFFALSE 31912
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31819: LD_ADDR_VAR 0 13
31823: PUSH
31824: LD_VAR 0 14
31828: PPUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 30
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 30
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 72
31861: ST_TO_ADDR
// if z then
31862: LD_VAR 0 13
31866: IFFALSE 31912
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31868: LD_VAR 0 4
31872: PUSH
31873: LD_VAR 0 7
31877: ARRAY
31878: PPUSH
31879: LD_VAR 0 13
31883: PPUSH
31884: LD_VAR 0 4
31888: PUSH
31889: LD_VAR 0 7
31893: ARRAY
31894: PPUSH
31895: CALL_OW 74
31899: PPUSH
31900: CALL_OW 115
// attacking := true ;
31904: LD_ADDR_VAR 0 29
31908: PUSH
31909: LD_INT 1
31911: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31912: LD_VAR 0 4
31916: PUSH
31917: LD_VAR 0 7
31921: ARRAY
31922: PPUSH
31923: CALL_OW 256
31927: PUSH
31928: LD_INT 500
31930: LESS
31931: IFFALSE 31957
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31933: LD_VAR 0 4
31937: PUSH
31938: LD_VAR 0 7
31942: ARRAY
31943: PPUSH
31944: LD_VAR 0 14
31948: PUSH
31949: LD_INT 1
31951: ARRAY
31952: PPUSH
31953: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31957: LD_VAR 0 4
31961: PUSH
31962: LD_VAR 0 7
31966: ARRAY
31967: PPUSH
31968: CALL_OW 256
31972: PUSH
31973: LD_INT 250
31975: LESS
31976: PUSH
31977: LD_VAR 0 4
31981: PUSH
31982: LD_VAR 0 7
31986: ARRAY
31987: PUSH
31988: LD_INT 21
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 23
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PPUSH
32012: CALL_OW 69
32016: IN
32017: AND
32018: IFFALSE 32143
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32020: LD_ADDR_VAR 0 9
32024: PUSH
32025: LD_OWVAR 3
32029: PUSH
32030: LD_VAR 0 4
32034: PUSH
32035: LD_VAR 0 7
32039: ARRAY
32040: DIFF
32041: PPUSH
32042: LD_VAR 0 4
32046: PUSH
32047: LD_VAR 0 7
32051: ARRAY
32052: PPUSH
32053: CALL_OW 74
32057: ST_TO_ADDR
// if not k then
32058: LD_VAR 0 9
32062: NOT
32063: IFFALSE 32067
// continue ;
32065: GO 29759
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32067: LD_VAR 0 9
32071: PUSH
32072: LD_INT 81
32074: PUSH
32075: LD_VAR 0 4
32079: PUSH
32080: LD_VAR 0 7
32084: ARRAY
32085: PPUSH
32086: CALL_OW 255
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PPUSH
32095: CALL_OW 69
32099: IN
32100: PUSH
32101: LD_VAR 0 9
32105: PPUSH
32106: LD_VAR 0 4
32110: PUSH
32111: LD_VAR 0 7
32115: ARRAY
32116: PPUSH
32117: CALL_OW 296
32121: PUSH
32122: LD_INT 5
32124: LESS
32125: AND
32126: IFFALSE 32143
// ComAutodestruct ( group [ i ] ) ;
32128: LD_VAR 0 4
32132: PUSH
32133: LD_VAR 0 7
32137: ARRAY
32138: PPUSH
32139: CALL 28329 0 1
// end ; if f_attack_depot then
32143: LD_VAR 0 25
32147: IFFALSE 32259
// begin k := 6 ;
32149: LD_ADDR_VAR 0 9
32153: PUSH
32154: LD_INT 6
32156: ST_TO_ADDR
// if tmp < k then
32157: LD_VAR 0 14
32161: PUSH
32162: LD_VAR 0 9
32166: LESS
32167: IFFALSE 32179
// k := tmp ;
32169: LD_ADDR_VAR 0 9
32173: PUSH
32174: LD_VAR 0 14
32178: ST_TO_ADDR
// for j = 1 to k do
32179: LD_ADDR_VAR 0 8
32183: PUSH
32184: DOUBLE
32185: LD_INT 1
32187: DEC
32188: ST_TO_ADDR
32189: LD_VAR 0 9
32193: PUSH
32194: FOR_TO
32195: IFFALSE 32257
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32197: LD_VAR 0 8
32201: PPUSH
32202: CALL_OW 266
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: IN
32217: IFFALSE 32255
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32219: LD_VAR 0 4
32223: PUSH
32224: LD_VAR 0 7
32228: ARRAY
32229: PPUSH
32230: LD_VAR 0 14
32234: PUSH
32235: LD_VAR 0 8
32239: ARRAY
32240: PPUSH
32241: CALL_OW 115
// attacking := true ;
32245: LD_ADDR_VAR 0 29
32249: PUSH
32250: LD_INT 1
32252: ST_TO_ADDR
// break ;
32253: GO 32257
// end ;
32255: GO 32194
32257: POP
32258: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32259: LD_VAR 0 4
32263: PUSH
32264: LD_VAR 0 7
32268: ARRAY
32269: PPUSH
32270: CALL_OW 302
32274: PUSH
32275: LD_VAR 0 29
32279: NOT
32280: AND
32281: IFFALSE 32549
// begin if GetTag ( group [ i ] ) = 71 then
32283: LD_VAR 0 4
32287: PUSH
32288: LD_VAR 0 7
32292: ARRAY
32293: PPUSH
32294: CALL_OW 110
32298: PUSH
32299: LD_INT 71
32301: EQUAL
32302: IFFALSE 32343
// begin if HasTask ( group [ i ] ) then
32304: LD_VAR 0 4
32308: PUSH
32309: LD_VAR 0 7
32313: ARRAY
32314: PPUSH
32315: CALL_OW 314
32319: IFFALSE 32325
// continue else
32321: GO 29759
32323: GO 32343
// SetTag ( group [ i ] , 0 ) ;
32325: LD_VAR 0 4
32329: PUSH
32330: LD_VAR 0 7
32334: ARRAY
32335: PPUSH
32336: LD_INT 0
32338: PPUSH
32339: CALL_OW 109
// end ; k := 8 ;
32343: LD_ADDR_VAR 0 9
32347: PUSH
32348: LD_INT 8
32350: ST_TO_ADDR
// x := 0 ;
32351: LD_ADDR_VAR 0 10
32355: PUSH
32356: LD_INT 0
32358: ST_TO_ADDR
// if tmp < k then
32359: LD_VAR 0 14
32363: PUSH
32364: LD_VAR 0 9
32368: LESS
32369: IFFALSE 32381
// k := tmp ;
32371: LD_ADDR_VAR 0 9
32375: PUSH
32376: LD_VAR 0 14
32380: ST_TO_ADDR
// for j = 1 to k do
32381: LD_ADDR_VAR 0 8
32385: PUSH
32386: DOUBLE
32387: LD_INT 1
32389: DEC
32390: ST_TO_ADDR
32391: LD_VAR 0 9
32395: PUSH
32396: FOR_TO
32397: IFFALSE 32495
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32399: LD_VAR 0 14
32403: PUSH
32404: LD_VAR 0 8
32408: ARRAY
32409: PPUSH
32410: CALL_OW 247
32414: PUSH
32415: LD_INT 1
32417: EQUAL
32418: PUSH
32419: LD_VAR 0 14
32423: PUSH
32424: LD_VAR 0 8
32428: ARRAY
32429: PPUSH
32430: CALL_OW 256
32434: PUSH
32435: LD_INT 250
32437: LESS
32438: PUSH
32439: LD_VAR 0 20
32443: AND
32444: PUSH
32445: LD_VAR 0 20
32449: NOT
32450: PUSH
32451: LD_VAR 0 14
32455: PUSH
32456: LD_VAR 0 8
32460: ARRAY
32461: PPUSH
32462: CALL_OW 256
32466: PUSH
32467: LD_INT 250
32469: GREATEREQUAL
32470: AND
32471: OR
32472: AND
32473: IFFALSE 32493
// begin x := tmp [ j ] ;
32475: LD_ADDR_VAR 0 10
32479: PUSH
32480: LD_VAR 0 14
32484: PUSH
32485: LD_VAR 0 8
32489: ARRAY
32490: ST_TO_ADDR
// break ;
32491: GO 32495
// end ;
32493: GO 32396
32495: POP
32496: POP
// if x then
32497: LD_VAR 0 10
32501: IFFALSE 32525
// ComAttackUnit ( group [ i ] , x ) else
32503: LD_VAR 0 4
32507: PUSH
32508: LD_VAR 0 7
32512: ARRAY
32513: PPUSH
32514: LD_VAR 0 10
32518: PPUSH
32519: CALL_OW 115
32523: GO 32549
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32525: LD_VAR 0 4
32529: PUSH
32530: LD_VAR 0 7
32534: ARRAY
32535: PPUSH
32536: LD_VAR 0 14
32540: PUSH
32541: LD_INT 1
32543: ARRAY
32544: PPUSH
32545: CALL_OW 115
// end ; end ; end ;
32549: GO 29759
32551: POP
32552: POP
// wait ( 0 0$1 ) ;
32553: LD_INT 35
32555: PPUSH
32556: CALL_OW 67
// until group = [ ] ;
32560: LD_VAR 0 4
32564: PUSH
32565: EMPTY
32566: EQUAL
32567: IFFALSE 29744
// end ;
32569: LD_VAR 0 2
32573: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32574: LD_INT 0
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
// if not defenders then
32583: LD_VAR 0 2
32587: NOT
32588: IFFALSE 32592
// exit ;
32590: GO 33116
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32592: LD_ADDR_VAR 0 9
32596: PUSH
32597: LD_EXP 46
32601: PUSH
32602: LD_VAR 0 1
32606: ARRAY
32607: PPUSH
32608: LD_INT 25
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PPUSH
32618: CALL_OW 72
32622: ST_TO_ADDR
// if mechs then
32623: LD_VAR 0 9
32627: IFFALSE 32726
// for i in defenders do
32629: LD_ADDR_VAR 0 5
32633: PUSH
32634: LD_VAR 0 2
32638: PUSH
32639: FOR_IN
32640: IFFALSE 32724
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32642: LD_VAR 0 5
32646: PPUSH
32647: CALL_OW 263
32651: PUSH
32652: LD_INT 1
32654: EQUAL
32655: PUSH
32656: LD_VAR 0 5
32660: PPUSH
32661: CALL_OW 311
32665: NOT
32666: AND
32667: IFFALSE 32722
// begin un := mechs [ 1 ] ;
32669: LD_ADDR_VAR 0 7
32673: PUSH
32674: LD_VAR 0 9
32678: PUSH
32679: LD_INT 1
32681: ARRAY
32682: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32683: LD_VAR 0 7
32687: PPUSH
32688: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32692: LD_VAR 0 7
32696: PPUSH
32697: LD_VAR 0 5
32701: PPUSH
32702: CALL_OW 180
// mechs := mechs diff un ;
32706: LD_ADDR_VAR 0 9
32710: PUSH
32711: LD_VAR 0 9
32715: PUSH
32716: LD_VAR 0 7
32720: DIFF
32721: ST_TO_ADDR
// end ;
32722: GO 32639
32724: POP
32725: POP
// repeat wait ( 0 0$1 ) ;
32726: LD_INT 35
32728: PPUSH
32729: CALL_OW 67
// enemy := mc_scan [ base ] ;
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_EXP 65
32742: PUSH
32743: LD_VAR 0 1
32747: ARRAY
32748: ST_TO_ADDR
// for i in defenders do
32749: LD_ADDR_VAR 0 5
32753: PUSH
32754: LD_VAR 0 2
32758: PUSH
32759: FOR_IN
32760: IFFALSE 32906
// begin e := NearestUnitToUnit ( enemy , i ) ;
32762: LD_ADDR_VAR 0 10
32766: PUSH
32767: LD_VAR 0 3
32771: PPUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: CALL_OW 74
32781: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32782: LD_VAR 0 5
32786: PPUSH
32787: CALL_OW 319
32791: NOT
32792: PUSH
32793: LD_VAR 0 5
32797: PPUSH
32798: CALL_OW 302
32802: AND
32803: PUSH
32804: LD_VAR 0 5
32808: PPUSH
32809: LD_VAR 0 10
32813: PPUSH
32814: CALL_OW 296
32818: PUSH
32819: LD_INT 30
32821: LESS
32822: AND
32823: IFFALSE 32841
// ComAttackUnit ( i , e ) else
32825: LD_VAR 0 5
32829: PPUSH
32830: LD_VAR 0 10
32834: PPUSH
32835: CALL_OW 115
32839: GO 32904
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32841: LD_VAR 0 5
32845: PPUSH
32846: LD_VAR 0 10
32850: PPUSH
32851: CALL_OW 296
32855: PUSH
32856: LD_INT 30
32858: GREATEREQUAL
32859: PUSH
32860: LD_VAR 0 5
32864: PPUSH
32865: LD_EXP 66
32869: PUSH
32870: LD_VAR 0 1
32874: ARRAY
32875: PPUSH
32876: CALL_OW 308
32880: NOT
32881: AND
32882: IFFALSE 32904
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32884: LD_VAR 0 5
32888: PPUSH
32889: LD_EXP 66
32893: PUSH
32894: LD_VAR 0 1
32898: ARRAY
32899: PPUSH
32900: CALL_OW 113
// end ;
32904: GO 32759
32906: POP
32907: POP
// until not enemy or not defenders ;
32908: LD_VAR 0 3
32912: NOT
32913: PUSH
32914: LD_VAR 0 2
32918: NOT
32919: OR
32920: IFFALSE 32726
// if not enemy and defenders then
32922: LD_VAR 0 3
32926: NOT
32927: PUSH
32928: LD_VAR 0 2
32932: AND
32933: IFFALSE 33091
// repeat wait ( 0 0$1 ) ;
32935: LD_INT 35
32937: PPUSH
32938: CALL_OW 67
// for i in defenders do
32942: LD_ADDR_VAR 0 5
32946: PUSH
32947: LD_VAR 0 2
32951: PUSH
32952: FOR_IN
32953: IFFALSE 33042
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32955: LD_VAR 0 5
32959: PPUSH
32960: LD_EXP 66
32964: PUSH
32965: LD_VAR 0 1
32969: ARRAY
32970: PPUSH
32971: CALL_OW 308
32975: NOT
32976: IFFALSE 33000
// ComMoveToArea ( i , mc_parking [ base ] ) else
32978: LD_VAR 0 5
32982: PPUSH
32983: LD_EXP 66
32987: PUSH
32988: LD_VAR 0 1
32992: ARRAY
32993: PPUSH
32994: CALL_OW 113
32998: GO 33040
// if GetControl ( i ) = control_manual then
33000: LD_VAR 0 5
33004: PPUSH
33005: CALL_OW 263
33009: PUSH
33010: LD_INT 1
33012: EQUAL
33013: IFFALSE 33040
// if IsDrivenBy ( i ) then
33015: LD_VAR 0 5
33019: PPUSH
33020: CALL_OW 311
33024: IFFALSE 33040
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33026: LD_VAR 0 5
33030: PPUSH
33031: CALL_OW 311
33035: PPUSH
33036: CALL_OW 121
// end ;
33040: GO 32952
33042: POP
33043: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33044: LD_VAR 0 2
33048: PPUSH
33049: LD_INT 95
33051: PUSH
33052: LD_EXP 66
33056: PUSH
33057: LD_VAR 0 1
33061: ARRAY
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PPUSH
33067: CALL_OW 72
33071: PUSH
33072: LD_VAR 0 2
33076: EQUAL
33077: PUSH
33078: LD_EXP 65
33082: PUSH
33083: LD_VAR 0 1
33087: ARRAY
33088: OR
33089: IFFALSE 32935
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33091: LD_ADDR_EXP 64
33095: PUSH
33096: LD_EXP 64
33100: PPUSH
33101: LD_VAR 0 1
33105: PPUSH
33106: LD_VAR 0 2
33110: PPUSH
33111: CALL_OW 1
33115: ST_TO_ADDR
// end ;
33116: LD_VAR 0 4
33120: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33121: LD_INT 0
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
// if not base_units then
33127: LD_VAR 0 1
33131: NOT
33132: IFFALSE 33136
// exit ;
33134: GO 33223
// result := false ;
33136: LD_ADDR_VAR 0 2
33140: PUSH
33141: LD_INT 0
33143: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33144: LD_ADDR_VAR 0 5
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: LD_INT 21
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PPUSH
33164: CALL_OW 72
33168: ST_TO_ADDR
// if not tmp then
33169: LD_VAR 0 5
33173: NOT
33174: IFFALSE 33178
// exit ;
33176: GO 33223
// for i in tmp do
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_VAR 0 5
33187: PUSH
33188: FOR_IN
33189: IFFALSE 33221
// begin result := EnemyInRange ( i , 18 ) ;
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: LD_VAR 0 3
33200: PPUSH
33201: LD_INT 18
33203: PPUSH
33204: CALL 28012 0 2
33208: ST_TO_ADDR
// if result then
33209: LD_VAR 0 2
33213: IFFALSE 33219
// exit ;
33215: POP
33216: POP
33217: GO 33223
// end ;
33219: GO 33188
33221: POP
33222: POP
// end ;
33223: LD_VAR 0 2
33227: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
// result := false ;
33234: LD_ADDR_VAR 0 2
33238: PUSH
33239: LD_INT 0
33241: ST_TO_ADDR
// side := GetSide ( unit ) ;
33242: LD_ADDR_VAR 0 3
33246: PUSH
33247: LD_VAR 0 1
33251: PPUSH
33252: CALL_OW 255
33256: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33257: LD_ADDR_VAR 0 4
33261: PUSH
33262: LD_VAR 0 1
33266: PPUSH
33267: CALL_OW 248
33271: ST_TO_ADDR
// case nat of 1 :
33272: LD_VAR 0 4
33276: PUSH
33277: LD_INT 1
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// tech := tech_lassight ; 2 :
33286: LD_ADDR_VAR 0 5
33290: PUSH
33291: LD_INT 12
33293: ST_TO_ADDR
33294: GO 33335
33296: LD_INT 2
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33315
33304: POP
// tech := tech_mortar ; 3 :
33305: LD_ADDR_VAR 0 5
33309: PUSH
33310: LD_INT 41
33312: ST_TO_ADDR
33313: GO 33335
33315: LD_INT 3
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33334
33323: POP
// tech := tech_bazooka ; end ;
33324: LD_ADDR_VAR 0 5
33328: PUSH
33329: LD_INT 44
33331: ST_TO_ADDR
33332: GO 33335
33334: POP
// if Researched ( side , tech ) then
33335: LD_VAR 0 3
33339: PPUSH
33340: LD_VAR 0 5
33344: PPUSH
33345: CALL_OW 325
33349: IFFALSE 33376
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33351: LD_ADDR_VAR 0 2
33355: PUSH
33356: LD_INT 5
33358: PUSH
33359: LD_INT 8
33361: PUSH
33362: LD_INT 9
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: PUSH
33370: LD_VAR 0 4
33374: ARRAY
33375: ST_TO_ADDR
// end ;
33376: LD_VAR 0 2
33380: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33381: LD_INT 0
33383: PPUSH
33384: PPUSH
33385: PPUSH
// if not mines then
33386: LD_VAR 0 2
33390: NOT
33391: IFFALSE 33395
// exit ;
33393: GO 33518
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33395: LD_ADDR_VAR 0 5
33399: PUSH
33400: LD_INT 81
33402: PUSH
33403: LD_VAR 0 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PPUSH
33412: CALL_OW 69
33416: ST_TO_ADDR
// for i in mines do
33417: LD_ADDR_VAR 0 4
33421: PUSH
33422: LD_VAR 0 2
33426: PUSH
33427: FOR_IN
33428: IFFALSE 33516
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33430: LD_VAR 0 4
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: PPUSH
33439: LD_VAR 0 4
33443: PUSH
33444: LD_INT 2
33446: ARRAY
33447: PPUSH
33448: CALL_OW 458
33452: NOT
33453: IFFALSE 33457
// continue ;
33455: GO 33427
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33457: LD_VAR 0 4
33461: PUSH
33462: LD_INT 1
33464: ARRAY
33465: PPUSH
33466: LD_VAR 0 4
33470: PUSH
33471: LD_INT 2
33473: ARRAY
33474: PPUSH
33475: CALL_OW 428
33479: PUSH
33480: LD_VAR 0 5
33484: IN
33485: IFFALSE 33514
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33487: LD_VAR 0 4
33491: PUSH
33492: LD_INT 1
33494: ARRAY
33495: PPUSH
33496: LD_VAR 0 4
33500: PUSH
33501: LD_INT 2
33503: ARRAY
33504: PPUSH
33505: LD_VAR 0 1
33509: PPUSH
33510: CALL_OW 456
// end ;
33514: GO 33427
33516: POP
33517: POP
// end ; end_of_file
33518: LD_VAR 0 3
33522: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33523: LD_INT 0
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33530: LD_ADDR_VAR 0 5
33534: PUSH
33535: LD_INT 6
33537: PUSH
33538: LD_INT 7
33540: PUSH
33541: LD_INT 8
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: LD_OWVAR 67
33553: ARRAY
33554: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33555: LD_INT 69
33557: PUSH
33558: EMPTY
33559: LIST
33560: PPUSH
33561: LD_INT 141
33563: PPUSH
33564: CALL_OW 169
// Wait ( 1 ) ;
33568: LD_INT 1
33570: PPUSH
33571: CALL_OW 67
// uc_side := 2 ;
33575: LD_ADDR_OWVAR 20
33579: PUSH
33580: LD_INT 2
33582: ST_TO_ADDR
// uc_nation := 2 ;
33583: LD_ADDR_OWVAR 21
33587: PUSH
33588: LD_INT 2
33590: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33591: LD_ADDR_OWVAR 37
33595: PUSH
33596: LD_INT 14
33598: ST_TO_ADDR
// vc_engine := engine_siberite ;
33599: LD_ADDR_OWVAR 39
33603: PUSH
33604: LD_INT 3
33606: ST_TO_ADDR
// vc_control := control_manual ;
33607: LD_ADDR_OWVAR 38
33611: PUSH
33612: LD_INT 1
33614: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33615: LD_ADDR_OWVAR 40
33619: PUSH
33620: LD_INT 31
33622: ST_TO_ADDR
// for i = 1 to 3 do
33623: LD_ADDR_VAR 0 2
33627: PUSH
33628: DOUBLE
33629: LD_INT 1
33631: DEC
33632: ST_TO_ADDR
33633: LD_INT 3
33635: PUSH
33636: FOR_TO
33637: IFFALSE 33721
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33639: LD_INT 0
33641: PPUSH
33642: LD_INT 3
33644: PPUSH
33645: LD_VAR 0 5
33649: PPUSH
33650: CALL_OW 380
// un := CreateVehicle ;
33654: LD_ADDR_VAR 0 4
33658: PUSH
33659: CALL_OW 45
33663: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33664: LD_VAR 0 4
33668: PPUSH
33669: LD_INT 0
33671: PPUSH
33672: LD_INT 5
33674: PPUSH
33675: CALL_OW 12
33679: PPUSH
33680: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33684: LD_VAR 0 4
33688: PPUSH
33689: LD_INT 156
33691: PPUSH
33692: LD_INT 15
33694: PPUSH
33695: LD_INT 6
33697: PPUSH
33698: LD_INT 0
33700: PPUSH
33701: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33705: CALL_OW 44
33709: PPUSH
33710: LD_VAR 0 4
33714: PPUSH
33715: CALL_OW 52
// end ;
33719: GO 33636
33721: POP
33722: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33723: LD_ADDR_EXP 35
33727: PUSH
33728: LD_INT 94
33730: PPUSH
33731: LD_STRING dammam
33733: PPUSH
33734: LD_VAR 0 5
33738: PPUSH
33739: LD_INT 10000
33741: PUSH
33742: LD_INT 1000
33744: PUSH
33745: LD_INT 300
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: PPUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: LD_INT 5
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 4
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: PPUSH
33773: CALL 5943 0 5
33777: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33778: LD_ADDR_EXP 35
33782: PUSH
33783: LD_EXP 35
33787: PUSH
33788: LD_INT 122
33790: PPUSH
33791: LD_STRING 
33793: PPUSH
33794: LD_VAR 0 5
33798: PPUSH
33799: LD_INT 100
33801: PUSH
33802: LD_INT 60
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: PPUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: LD_INT 4
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: PPUSH
33832: CALL 5943 0 5
33836: ADD
33837: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33838: LD_ADDR_EXP 33
33842: PUSH
33843: LD_INT 45
33845: PPUSH
33846: LD_STRING jeddah
33848: PPUSH
33849: LD_VAR 0 5
33853: PPUSH
33854: LD_INT 700
33856: PUSH
33857: LD_INT 300
33859: PUSH
33860: LD_INT 10
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: PPUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: LD_INT 5
33874: PUSH
33875: LD_INT 3
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL 5943 0 5
33891: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33892: LD_ADDR_EXP 34
33896: PUSH
33897: LD_INT 7
33899: PPUSH
33900: LD_STRING riyadh
33902: PPUSH
33903: LD_VAR 0 5
33907: PPUSH
33908: LD_INT 500
33910: PUSH
33911: LD_INT 60
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: PPUSH
33922: LD_INT 4
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 3
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: PPUSH
33940: CALL 5943 0 5
33944: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33945: LD_ADDR_EXP 36
33949: PUSH
33950: LD_INT 69
33952: PPUSH
33953: LD_STRING 
33955: PPUSH
33956: LD_VAR 0 5
33960: PPUSH
33961: LD_INT 500
33963: PUSH
33964: LD_INT 50
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: PPUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL 5943 0 5
33998: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
33999: LD_ADDR_EXP 46
34003: PUSH
34004: LD_EXP 35
34008: PUSH
34009: LD_EXP 33
34013: PUSH
34014: LD_EXP 36
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34024: LD_ADDR_VAR 0 2
34028: PUSH
34029: LD_INT 22
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 30
34041: PUSH
34042: LD_INT 31
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 58
34051: PUSH
34052: EMPTY
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: PPUSH
34060: CALL_OW 69
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34191
// begin if GetBase ( i ) then
34068: LD_VAR 0 2
34072: PPUSH
34073: CALL_OW 274
34077: IFFALSE 34081
// continue ;
34079: GO 34065
// d := GetDir ( i ) ;
34081: LD_ADDR_VAR 0 3
34085: PUSH
34086: LD_VAR 0 2
34090: PPUSH
34091: CALL_OW 254
34095: ST_TO_ADDR
// if d < 3 then
34096: LD_VAR 0 3
34100: PUSH
34101: LD_INT 3
34103: LESS
34104: IFFALSE 34122
// d := d + 3 else
34106: LD_ADDR_VAR 0 3
34110: PUSH
34111: LD_VAR 0 3
34115: PUSH
34116: LD_INT 3
34118: PLUS
34119: ST_TO_ADDR
34120: GO 34136
// d := d - 3 ;
34122: LD_ADDR_VAR 0 3
34126: PUSH
34127: LD_VAR 0 3
34131: PUSH
34132: LD_INT 3
34134: MINUS
34135: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34136: LD_INT 0
34138: PPUSH
34139: LD_INT 8
34141: PPUSH
34142: LD_VAR 0 5
34146: PPUSH
34147: CALL_OW 380
// un := CreateHuman ;
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: CALL_OW 44
34160: ST_TO_ADDR
// SetDir ( un , d ) ;
34161: LD_VAR 0 4
34165: PPUSH
34166: LD_VAR 0 3
34170: PPUSH
34171: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34175: LD_VAR 0 4
34179: PPUSH
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL_OW 52
// end ;
34189: GO 34065
34191: POP
34192: POP
// if Difficulty > 1 then
34193: LD_OWVAR 67
34197: PUSH
34198: LD_INT 1
34200: GREATER
34201: IFFALSE 34572
// begin ar_kamikadze := [ ] ;
34203: LD_ADDR_EXP 39
34207: PUSH
34208: EMPTY
34209: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34210: LD_INT 0
34212: PPUSH
34213: LD_INT 1
34215: PPUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: CALL_OW 380
// un := CreateHuman ;
34225: LD_ADDR_VAR 0 4
34229: PUSH
34230: CALL_OW 44
34234: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34235: LD_VAR 0 4
34239: PPUSH
34240: LD_INT 3
34242: PPUSH
34243: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34247: LD_VAR 0 4
34251: PPUSH
34252: LD_INT 23
34254: PPUSH
34255: LD_INT 44
34257: PPUSH
34258: LD_INT 0
34260: PPUSH
34261: CALL_OW 48
// ComCrawl ( un ) ;
34265: LD_VAR 0 4
34269: PPUSH
34270: CALL_OW 137
// un := CreateHuman ;
34274: LD_ADDR_VAR 0 4
34278: PUSH
34279: CALL_OW 44
34283: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34284: LD_VAR 0 4
34288: PPUSH
34289: LD_INT 3
34291: PPUSH
34292: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34296: LD_VAR 0 4
34300: PPUSH
34301: LD_INT 30
34303: PPUSH
34304: LD_INT 39
34306: PPUSH
34307: LD_INT 0
34309: PPUSH
34310: CALL_OW 48
// ComCrawl ( un ) ;
34314: LD_VAR 0 4
34318: PPUSH
34319: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34323: LD_INT 0
34325: PPUSH
34326: LD_INT 17
34328: PPUSH
34329: LD_VAR 0 5
34333: PPUSH
34334: CALL_OW 380
// un := CreateHuman ;
34338: LD_ADDR_VAR 0 4
34342: PUSH
34343: CALL_OW 44
34347: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34348: LD_VAR 0 4
34352: PPUSH
34353: LD_INT 3
34355: PPUSH
34356: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34360: LD_VAR 0 4
34364: PPUSH
34365: LD_INT 45
34367: PPUSH
34368: LD_INT 86
34370: PPUSH
34371: LD_INT 0
34373: PPUSH
34374: CALL_OW 48
// ComHold ( un ) ;
34378: LD_VAR 0 4
34382: PPUSH
34383: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34387: LD_ADDR_EXP 39
34391: PUSH
34392: LD_EXP 39
34396: PPUSH
34397: LD_EXP 39
34401: PUSH
34402: LD_INT 1
34404: PLUS
34405: PPUSH
34406: LD_VAR 0 4
34410: PPUSH
34411: CALL_OW 1
34415: ST_TO_ADDR
// un := CreateHuman ;
34416: LD_ADDR_VAR 0 4
34420: PUSH
34421: CALL_OW 44
34425: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34426: LD_VAR 0 4
34430: PPUSH
34431: LD_INT 3
34433: PPUSH
34434: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34438: LD_VAR 0 4
34442: PPUSH
34443: LD_INT 60
34445: PPUSH
34446: LD_INT 85
34448: PPUSH
34449: LD_INT 0
34451: PPUSH
34452: CALL_OW 48
// ComHold ( un ) ;
34456: LD_VAR 0 4
34460: PPUSH
34461: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34465: LD_ADDR_EXP 39
34469: PUSH
34470: LD_EXP 39
34474: PPUSH
34475: LD_EXP 39
34479: PUSH
34480: LD_INT 1
34482: PLUS
34483: PPUSH
34484: LD_VAR 0 4
34488: PPUSH
34489: CALL_OW 1
34493: ST_TO_ADDR
// un := CreateHuman ;
34494: LD_ADDR_VAR 0 4
34498: PUSH
34499: CALL_OW 44
34503: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34504: LD_VAR 0 4
34508: PPUSH
34509: LD_INT 3
34511: PPUSH
34512: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34516: LD_VAR 0 4
34520: PPUSH
34521: LD_INT 222
34523: PPUSH
34524: LD_INT 166
34526: PPUSH
34527: LD_INT 0
34529: PPUSH
34530: CALL_OW 48
// ComHold ( un ) ;
34534: LD_VAR 0 4
34538: PPUSH
34539: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34543: LD_ADDR_EXP 39
34547: PUSH
34548: LD_EXP 39
34552: PPUSH
34553: LD_EXP 39
34557: PUSH
34558: LD_INT 1
34560: PLUS
34561: PPUSH
34562: LD_VAR 0 4
34566: PPUSH
34567: CALL_OW 1
34571: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34572: LD_ADDR_EXP 37
34576: PUSH
34577: EMPTY
34578: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34579: LD_INT 1
34581: PPUSH
34582: LD_INT 1
34584: PPUSH
34585: LD_VAR 0 5
34589: PPUSH
34590: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34594: LD_ADDR_OWVAR 33
34598: PUSH
34599: LD_STRING SecondCharsGal
34601: ST_TO_ADDR
// hc_face_number := 4 ;
34602: LD_ADDR_OWVAR 34
34606: PUSH
34607: LD_INT 4
34609: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34610: LD_ADDR_EXP 37
34614: PUSH
34615: LD_EXP 37
34619: PPUSH
34620: LD_INT 1
34622: PPUSH
34623: CALL_OW 44
34627: PPUSH
34628: CALL_OW 1
34632: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34633: LD_INT 2
34635: PPUSH
34636: LD_INT 4
34638: PPUSH
34639: LD_VAR 0 5
34643: PPUSH
34644: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34648: LD_ADDR_OWVAR 33
34652: PUSH
34653: LD_STRING SecondCharsGal
34655: ST_TO_ADDR
// hc_face_number := 15 ;
34656: LD_ADDR_OWVAR 34
34660: PUSH
34661: LD_INT 15
34663: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34664: LD_ADDR_EXP 37
34668: PUSH
34669: LD_EXP 37
34673: PPUSH
34674: LD_INT 2
34676: PPUSH
34677: CALL_OW 44
34681: PPUSH
34682: CALL_OW 1
34686: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34687: LD_INT 2
34689: PPUSH
34690: LD_INT 4
34692: PPUSH
34693: LD_VAR 0 5
34697: PPUSH
34698: CALL_OW 380
// hc_gallery :=  ;
34702: LD_ADDR_OWVAR 33
34706: PUSH
34707: LD_STRING 
34709: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34710: LD_ADDR_EXP 37
34714: PUSH
34715: LD_EXP 37
34719: PPUSH
34720: LD_INT 3
34722: PPUSH
34723: CALL_OW 44
34727: PPUSH
34728: CALL_OW 1
34732: ST_TO_ADDR
// hc_sex := sex_male ;
34733: LD_ADDR_OWVAR 27
34737: PUSH
34738: LD_INT 1
34740: ST_TO_ADDR
// hc_class = 11 ;
34741: LD_ADDR_OWVAR 28
34745: PUSH
34746: LD_INT 11
34748: ST_TO_ADDR
// hc_gallery = sandar ;
34749: LD_ADDR_OWVAR 33
34753: PUSH
34754: LD_STRING sandar
34756: ST_TO_ADDR
// hc_face_number = 33 ;
34757: LD_ADDR_OWVAR 34
34761: PUSH
34762: LD_INT 33
34764: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34765: LD_ADDR_OWVAR 26
34769: PUSH
34770: LD_STRING Thabit Muhair Saliba
34772: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34773: LD_ADDR_OWVAR 31
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// Saliba = CreateHuman ;
34796: LD_ADDR_EXP 41
34800: PUSH
34801: CALL_OW 44
34805: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34806: LD_EXP 41
34810: PPUSH
34811: LD_INT 7
34813: PPUSH
34814: CALL_OW 52
// if gensher_active then
34818: LD_EXP 17
34822: IFFALSE 34849
// begin Gensher = NewCharacter ( Gensher ) ;
34824: LD_ADDR_EXP 42
34828: PUSH
34829: LD_STRING Gensher
34831: PPUSH
34832: CALL_OW 25
34836: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
34837: LD_EXP 42
34841: PPUSH
34842: LD_INT 94
34844: PPUSH
34845: CALL_OW 52
// end ; InitHc ;
34849: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
34853: LD_ADDR_EXP 38
34857: PUSH
34858: EMPTY
34859: ST_TO_ADDR
// for i = 1 to 4 do
34860: LD_ADDR_VAR 0 2
34864: PUSH
34865: DOUBLE
34866: LD_INT 1
34868: DEC
34869: ST_TO_ADDR
34870: LD_INT 4
34872: PUSH
34873: FOR_TO
34874: IFFALSE 35046
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34876: LD_INT 13
34878: PUSH
34879: LD_INT 14
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PPUSH
34889: LD_INT 2
34891: PPUSH
34892: CALL_OW 12
34896: ARRAY
34897: PPUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PPUSH
34911: LD_INT 2
34913: PPUSH
34914: CALL_OW 12
34918: ARRAY
34919: PPUSH
34920: LD_INT 1
34922: PPUSH
34923: LD_INT 25
34925: PUSH
34926: LD_INT 27
34928: PUSH
34929: LD_INT 26
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PPUSH
34940: LD_INT 3
34942: PPUSH
34943: CALL_OW 12
34947: ARRAY
34948: PPUSH
34949: LD_INT 60
34951: PPUSH
34952: LD_INT 100
34954: PPUSH
34955: CALL_OW 12
34959: PPUSH
34960: CALL 1980 0 5
// un := CreateVehicle ;
34964: LD_ADDR_VAR 0 4
34968: PUSH
34969: CALL_OW 45
34973: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34974: LD_ADDR_EXP 38
34978: PUSH
34979: LD_EXP 38
34983: PPUSH
34984: LD_EXP 38
34988: PUSH
34989: LD_INT 1
34991: PLUS
34992: PPUSH
34993: LD_VAR 0 4
34997: PPUSH
34998: CALL_OW 1
35002: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35003: LD_VAR 0 4
35007: PPUSH
35008: LD_INT 0
35010: PPUSH
35011: LD_INT 5
35013: PPUSH
35014: CALL_OW 12
35018: PPUSH
35019: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35023: LD_VAR 0 4
35027: PPUSH
35028: LD_INT 124
35030: PPUSH
35031: LD_INT 141
35033: PPUSH
35034: LD_INT 6
35036: PPUSH
35037: LD_INT 0
35039: PPUSH
35040: CALL_OW 50
// end ;
35044: GO 34873
35046: POP
35047: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35048: LD_ADDR_EXP 40
35052: PUSH
35053: EMPTY
35054: PUSH
35055: EMPTY
35056: PUSH
35057: EMPTY
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: DOUBLE
35070: LD_INT 1
35072: DEC
35073: ST_TO_ADDR
35074: LD_INT 3
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: LD_INT 4
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: PUSH
35088: LD_OWVAR 67
35092: ARRAY
35093: PUSH
35094: FOR_TO
35095: IFFALSE 35309
// for i = 1 to 3 do
35097: LD_ADDR_VAR 0 2
35101: PUSH
35102: DOUBLE
35103: LD_INT 1
35105: DEC
35106: ST_TO_ADDR
35107: LD_INT 3
35109: PUSH
35110: FOR_TO
35111: IFFALSE 35305
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35113: LD_INT 14
35115: PPUSH
35116: LD_INT 3
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PPUSH
35129: LD_INT 2
35131: PPUSH
35132: CALL_OW 12
35136: ARRAY
35137: PPUSH
35138: LD_INT 1
35140: PUSH
35141: LD_INT 5
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PPUSH
35151: LD_INT 2
35153: PPUSH
35154: CALL_OW 12
35158: ARRAY
35159: PPUSH
35160: LD_INT 25
35162: PUSH
35163: LD_INT 27
35165: PUSH
35166: LD_INT 26
35168: PUSH
35169: LD_INT 28
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PPUSH
35181: LD_INT 4
35183: PPUSH
35184: CALL_OW 12
35188: ARRAY
35189: PPUSH
35190: LD_INT 100
35192: PPUSH
35193: CALL 1980 0 5
// un := CreateVehicle ;
35197: LD_ADDR_VAR 0 4
35201: PUSH
35202: CALL_OW 45
35206: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35207: LD_ADDR_EXP 40
35211: PUSH
35212: LD_EXP 40
35216: PPUSH
35217: LD_VAR 0 2
35221: PUSH
35222: LD_EXP 40
35226: PUSH
35227: LD_VAR 0 2
35231: ARRAY
35232: PUSH
35233: LD_INT 1
35235: PLUS
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: CALL 3152 0 3
35250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35251: LD_VAR 0 4
35255: PPUSH
35256: LD_INT 0
35258: PPUSH
35259: LD_INT 5
35261: PPUSH
35262: CALL_OW 12
35266: PPUSH
35267: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35271: LD_VAR 0 4
35275: PPUSH
35276: LD_INT 20
35278: PUSH
35279: LD_INT 21
35281: PUSH
35282: LD_INT 22
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PPUSH
35296: LD_INT 0
35298: PPUSH
35299: CALL_OW 49
// end ;
35303: GO 35110
35305: POP
35306: POP
35307: GO 35094
35309: POP
35310: POP
// InitHc ;
35311: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35315: LD_INT 4
35317: PPUSH
35318: LD_INT 5
35320: PPUSH
35321: LD_INT 10
35323: PPUSH
35324: LD_INT 5
35326: PPUSH
35327: LD_INT 0
35329: PPUSH
35330: CALL_OW 58
// end ;
35334: LD_VAR 0 1
35338: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35339: LD_EXP 39
35343: IFFALSE 35417
35345: GO 35347
35347: DISABLE
35348: LD_INT 0
35350: PPUSH
// begin enable ;
35351: ENABLE
// for i in ar_kamikadze do
35352: LD_ADDR_VAR 0 1
35356: PUSH
35357: LD_EXP 39
35361: PUSH
35362: FOR_IN
35363: IFFALSE 35415
// if See ( 1 , i ) then
35365: LD_INT 1
35367: PPUSH
35368: LD_VAR 0 1
35372: PPUSH
35373: CALL_OW 292
35377: IFFALSE 35413
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
35379: LD_VAR 0 1
35383: PPUSH
35384: LD_INT 22
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 69
35398: PPUSH
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 74
35408: PPUSH
35409: CALL_OW 115
35413: GO 35362
35415: POP
35416: POP
// end ;
35417: PPOPN 1
35419: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35420: LD_EXP 12
35424: IFFALSE 35741
35426: GO 35428
35428: DISABLE
35429: LD_INT 0
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35435: LD_INT 35
35437: PPUSH
35438: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35442: LD_INT 1
35444: PPUSH
35445: CALL 54053 0 1
35449: PUSH
35450: LD_INT 0
35452: EQUAL
35453: IFFALSE 35435
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35455: LD_INT 1
35457: PPUSH
35458: LD_INT 14
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: LD_INT 32
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: PUSH
35476: EMPTY
35477: LIST
35478: PPUSH
35479: CALL 53842 0 2
// repeat wait ( 0 0$1 ) ;
35483: LD_INT 35
35485: PPUSH
35486: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35490: LD_EXP 61
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: LD_INT 33
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 34
35511: PUSH
35512: LD_INT 32
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PPUSH
35523: CALL_OW 72
35527: IFFALSE 35483
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35529: LD_ADDR_VAR 0 2
35533: PUSH
35534: LD_EXP 61
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: LD_INT 33
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 34
35555: PUSH
35556: LD_INT 32
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PPUSH
35567: CALL_OW 72
35571: PUSH
35572: LD_INT 1
35574: ARRAY
35575: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35576: LD_ADDR_VAR 0 4
35580: PUSH
35581: LD_INT 5
35583: PPUSH
35584: CALL_OW 469
35588: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35589: LD_INT 35
35591: PPUSH
35592: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35596: LD_ADDR_VAR 0 4
35600: PUSH
35601: LD_INT 5
35603: PPUSH
35604: CALL_OW 469
35608: ST_TO_ADDR
// tmp := 100 ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 100
35616: ST_TO_ADDR
// if pos then
35617: LD_VAR 0 4
35621: IFFALSE 35661
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35623: LD_ADDR_VAR 0 3
35627: PUSH
35628: LD_INT 2
35630: PPUSH
35631: LD_VAR 0 4
35635: PUSH
35636: LD_INT 1
35638: ARRAY
35639: PPUSH
35640: LD_VAR 0 4
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PPUSH
35649: LD_INT 20
35651: PPUSH
35652: CALL 3646 0 4
35656: PUSH
35657: LD_INT 4
35659: ARRAY
35660: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35661: LD_VAR 0 4
35665: PUSH
35666: LD_EXP 13
35670: NOT
35671: AND
35672: PUSH
35673: LD_VAR 0 3
35677: PUSH
35678: LD_INT 10
35680: LESS
35681: AND
35682: IFFALSE 35589
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35684: LD_VAR 0 2
35688: PPUSH
35689: LD_VAR 0 4
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: PPUSH
35698: LD_VAR 0 4
35702: PUSH
35703: LD_INT 2
35705: ARRAY
35706: PPUSH
35707: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_INT 198
35718: PPUSH
35719: LD_INT 113
35721: PPUSH
35722: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35726: LD_VAR 0 2
35730: PPUSH
35731: LD_INT 124
35733: PPUSH
35734: LD_INT 7
35736: PPUSH
35737: CALL_OW 171
// end ;
35741: PPOPN 4
35743: END
// every 12 12$00 do
35744: GO 35746
35746: DISABLE
// begin end ;
35747: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35748: LD_EXP 6
35752: IFFALSE 37937
35754: GO 35756
35756: DISABLE
35757: LD_INT 0
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35767: LD_ADDR_VAR 0 4
35771: PUSH
35772: LD_INT 5
35774: PUSH
35775: LD_INT 6
35777: PUSH
35778: LD_INT 7
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: PUSH
35786: LD_OWVAR 67
35790: ARRAY
35791: ST_TO_ADDR
// coords := [ ] ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: EMPTY
35798: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35799: LD_ADDR_VAR 0 6
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35846: LD_INT 1
35848: PPUSH
35849: LD_INT 14
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 28
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 14
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 25
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 14
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 28
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 14
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 29
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL 53842 0 2
// wait ( [ 9 9$00 , 8 8$00 , 7 7$20 ] [ Difficulty ] ) ;
35931: LD_INT 18900
35933: PUSH
35934: LD_INT 16800
35936: PUSH
35937: LD_INT 15400
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: PUSH
35945: LD_OWVAR 67
35949: ARRAY
35950: PPUSH
35951: CALL_OW 67
// InitHc ;
35955: CALL_OW 19
// InitUc ;
35959: CALL_OW 18
// uc_side := 2 ;
35963: LD_ADDR_OWVAR 20
35967: PUSH
35968: LD_INT 2
35970: ST_TO_ADDR
// uc_nation := 2 ;
35971: LD_ADDR_OWVAR 21
35975: PUSH
35976: LD_INT 2
35978: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
35979: LD_ADDR_VAR 0 3
35983: PUSH
35984: EMPTY
35985: PUSH
35986: EMPTY
35987: PUSH
35988: EMPTY
35989: PUSH
35990: EMPTY
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_VAR 0 3
36007: PPUSH
36008: LD_INT 1
36010: PPUSH
36011: LD_EXP 61
36015: PUSH
36016: LD_INT 1
36018: ARRAY
36019: PUSH
36020: LD_INT 34
36022: PUSH
36023: LD_INT 32
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PPUSH
36030: CALL_OW 69
36034: DIFF
36035: PPUSH
36036: CALL_OW 1
36040: ST_TO_ADDR
// for i = 1 to Difficulty do
36041: LD_ADDR_VAR 0 1
36045: PUSH
36046: DOUBLE
36047: LD_INT 1
36049: DEC
36050: ST_TO_ADDR
36051: LD_OWVAR 67
36055: PUSH
36056: FOR_TO
36057: IFFALSE 36179
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36059: LD_INT 13
36061: PPUSH
36062: LD_INT 3
36064: PPUSH
36065: LD_INT 5
36067: PPUSH
36068: LD_INT 29
36070: PPUSH
36071: LD_INT 100
36073: PPUSH
36074: CALL 1980 0 5
// un := CreateVehicle ;
36078: LD_ADDR_VAR 0 2
36082: PUSH
36083: CALL_OW 45
36087: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36088: LD_ADDR_VAR 0 3
36092: PUSH
36093: LD_VAR 0 3
36097: PPUSH
36098: LD_INT 1
36100: PUSH
36101: LD_VAR 0 3
36105: PUSH
36106: LD_INT 1
36108: ARRAY
36109: PUSH
36110: LD_INT 1
36112: PLUS
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PPUSH
36118: LD_VAR 0 2
36122: PPUSH
36123: CALL 3152 0 3
36127: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36128: LD_VAR 0 2
36132: PPUSH
36133: LD_INT 3
36135: PPUSH
36136: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36140: LD_VAR 0 2
36144: PPUSH
36145: LD_INT 16
36147: PPUSH
36148: LD_INT 0
36150: PPUSH
36151: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36155: LD_VAR 0 2
36159: PPUSH
36160: LD_INT 51
36162: PPUSH
36163: LD_INT 10
36165: PPUSH
36166: CALL_OW 111
// wait ( 0 0$2 ) ;
36170: LD_INT 70
36172: PPUSH
36173: CALL_OW 67
// end ;
36177: GO 36056
36179: POP
36180: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36181: LD_ADDR_VAR 0 5
36185: PUSH
36186: LD_INT 51
36188: PUSH
36189: LD_INT 24
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 75
36198: PUSH
36199: LD_INT 90
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36210: LD_INT 1
36212: PPUSH
36213: LD_VAR 0 3
36217: PUSH
36218: LD_INT 1
36220: ARRAY
36221: PPUSH
36222: LD_VAR 0 5
36226: PPUSH
36227: LD_VAR 0 6
36231: PPUSH
36232: CALL 53938 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36236: LD_ADDR_VAR 0 1
36240: PUSH
36241: DOUBLE
36242: LD_INT 1
36244: DEC
36245: ST_TO_ADDR
36246: LD_INT 2
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: LD_INT 3
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: PUSH
36260: LD_OWVAR 67
36264: ARRAY
36265: PUSH
36266: FOR_TO
36267: IFFALSE 36351
// begin PrepareHuman ( false , 17 , skill ) ;
36269: LD_INT 0
36271: PPUSH
36272: LD_INT 17
36274: PPUSH
36275: LD_VAR 0 4
36279: PPUSH
36280: CALL_OW 380
// un := CreateHuman ;
36284: LD_ADDR_VAR 0 2
36288: PUSH
36289: CALL_OW 44
36293: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36294: LD_ADDR_VAR 0 3
36298: PUSH
36299: LD_VAR 0 3
36303: PPUSH
36304: LD_INT 2
36306: PUSH
36307: LD_VAR 0 3
36311: PUSH
36312: LD_INT 2
36314: ARRAY
36315: PUSH
36316: LD_INT 1
36318: PLUS
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PPUSH
36324: LD_VAR 0 2
36328: PPUSH
36329: CALL 3152 0 3
36333: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36334: LD_VAR 0 2
36338: PPUSH
36339: LD_INT 13
36341: PPUSH
36342: LD_INT 0
36344: PPUSH
36345: CALL_OW 49
// end ;
36349: GO 36266
36351: POP
36352: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36353: LD_ADDR_VAR 0 1
36357: PUSH
36358: DOUBLE
36359: LD_INT 1
36361: DEC
36362: ST_TO_ADDR
36363: LD_INT 3
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: LD_INT 4
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: PUSH
36377: LD_OWVAR 67
36381: ARRAY
36382: PUSH
36383: FOR_TO
36384: IFFALSE 36487
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36386: LD_INT 0
36388: PPUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 8
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PPUSH
36402: LD_INT 2
36404: PPUSH
36405: CALL_OW 12
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 4
36415: PPUSH
36416: CALL_OW 380
// un := CreateHuman ;
36420: LD_ADDR_VAR 0 2
36424: PUSH
36425: CALL_OW 44
36429: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_VAR 0 3
36439: PPUSH
36440: LD_INT 2
36442: PUSH
36443: LD_VAR 0 3
36447: PUSH
36448: LD_INT 2
36450: ARRAY
36451: PUSH
36452: LD_INT 1
36454: PLUS
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PPUSH
36460: LD_VAR 0 2
36464: PPUSH
36465: CALL 3152 0 3
36469: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_INT 13
36477: PPUSH
36478: LD_INT 0
36480: PPUSH
36481: CALL_OW 49
// end ;
36485: GO 36383
36487: POP
36488: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36489: LD_ADDR_VAR 0 5
36493: PUSH
36494: LD_INT 67
36496: PUSH
36497: LD_INT 112
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 85
36506: PUSH
36507: LD_INT 130
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36518: LD_INT 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PUSH
36526: LD_INT 2
36528: ARRAY
36529: PPUSH
36530: LD_VAR 0 5
36534: PPUSH
36535: LD_VAR 0 6
36539: PPUSH
36540: CALL 53938 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36544: LD_ADDR_VAR 0 1
36548: PUSH
36549: DOUBLE
36550: LD_INT 1
36552: DEC
36553: ST_TO_ADDR
36554: LD_INT 1
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: PUSH
36568: LD_OWVAR 67
36572: ARRAY
36573: PUSH
36574: FOR_TO
36575: IFFALSE 36659
// begin PrepareHuman ( false , 17 , skill ) ;
36577: LD_INT 0
36579: PPUSH
36580: LD_INT 17
36582: PPUSH
36583: LD_VAR 0 4
36587: PPUSH
36588: CALL_OW 380
// un := CreateHuman ;
36592: LD_ADDR_VAR 0 2
36596: PUSH
36597: CALL_OW 44
36601: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: LD_INT 3
36614: PUSH
36615: LD_VAR 0 3
36619: PUSH
36620: LD_INT 3
36622: ARRAY
36623: PUSH
36624: LD_INT 1
36626: PLUS
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PPUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL 3152 0 3
36641: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36642: LD_VAR 0 2
36646: PPUSH
36647: LD_INT 14
36649: PPUSH
36650: LD_INT 0
36652: PPUSH
36653: CALL_OW 49
// end ;
36657: GO 36574
36659: POP
36660: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36661: LD_ADDR_VAR 0 5
36665: PUSH
36666: LD_INT 148
36668: PUSH
36669: LD_INT 158
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 148
36678: PUSH
36679: LD_INT 158
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36690: LD_INT 3
36692: PPUSH
36693: LD_VAR 0 3
36697: PUSH
36698: LD_INT 3
36700: ARRAY
36701: PPUSH
36702: LD_VAR 0 5
36706: PPUSH
36707: LD_VAR 0 6
36711: PPUSH
36712: CALL 53938 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36716: LD_ADDR_VAR 0 1
36720: PUSH
36721: DOUBLE
36722: LD_INT 1
36724: DEC
36725: ST_TO_ADDR
36726: LD_INT 3
36728: PUSH
36729: LD_INT 4
36731: PUSH
36732: LD_INT 5
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PUSH
36740: LD_OWVAR 67
36744: ARRAY
36745: PUSH
36746: FOR_TO
36747: IFFALSE 36955
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36749: LD_INT 14
36751: PPUSH
36752: LD_INT 3
36754: PPUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PPUSH
36768: LD_INT 2
36770: PPUSH
36771: CALL_OW 12
36775: ARRAY
36776: PPUSH
36777: LD_INT 27
36779: PUSH
36780: LD_INT 26
36782: PUSH
36783: LD_INT 28
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PPUSH
36794: LD_INT 3
36796: PPUSH
36797: CALL_OW 12
36801: ARRAY
36802: PPUSH
36803: LD_INT 100
36805: PPUSH
36806: CALL 1980 0 5
// un := CreateVehicle ;
36810: LD_ADDR_VAR 0 2
36814: PUSH
36815: CALL_OW 45
36819: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: LD_VAR 0 3
36829: PPUSH
36830: LD_INT 4
36832: PUSH
36833: LD_VAR 0 3
36837: PUSH
36838: LD_INT 4
36840: ARRAY
36841: PUSH
36842: LD_INT 1
36844: PLUS
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PPUSH
36850: LD_VAR 0 2
36854: PPUSH
36855: CALL 3152 0 3
36859: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36860: LD_VAR 0 2
36864: PPUSH
36865: LD_INT 5
36867: PPUSH
36868: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36872: LD_VAR 0 2
36876: PPUSH
36877: LD_INT 15
36879: PPUSH
36880: LD_INT 0
36882: PPUSH
36883: CALL_OW 49
// if GetControl ( un ) = control_manual then
36887: LD_VAR 0 2
36891: PPUSH
36892: CALL_OW 263
36896: PUSH
36897: LD_INT 1
36899: EQUAL
36900: IFFALSE 36931
// begin PrepareHuman ( false , 3 , skill ) ;
36902: LD_INT 0
36904: PPUSH
36905: LD_INT 3
36907: PPUSH
36908: LD_VAR 0 4
36912: PPUSH
36913: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36917: CALL_OW 44
36921: PPUSH
36922: LD_VAR 0 2
36926: PPUSH
36927: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_INT 179
36938: PPUSH
36939: LD_INT 135
36941: PPUSH
36942: CALL_OW 111
// wait ( 0 0$2 ) ;
36946: LD_INT 70
36948: PPUSH
36949: CALL_OW 67
// end ;
36953: GO 36746
36955: POP
36956: POP
// vc_chassis := 15 ;
36957: LD_ADDR_OWVAR 37
36961: PUSH
36962: LD_INT 15
36964: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36965: LD_ADDR_VAR 0 3
36969: PUSH
36970: LD_VAR 0 3
36974: PPUSH
36975: LD_INT 4
36977: PUSH
36978: LD_VAR 0 3
36982: PUSH
36983: LD_INT 4
36985: ARRAY
36986: PUSH
36987: LD_INT 1
36989: PLUS
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PPUSH
36995: CALL_OW 45
36999: PPUSH
37000: CALL 3152 0 3
37004: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37005: LD_VAR 0 3
37009: PUSH
37010: LD_INT 4
37012: ARRAY
37013: PUSH
37014: LD_VAR 0 3
37018: PUSH
37019: LD_INT 4
37021: ARRAY
37022: ARRAY
37023: PPUSH
37024: LD_INT 15
37026: PPUSH
37027: LD_INT 0
37029: PPUSH
37030: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37034: LD_INT 0
37036: PPUSH
37037: LD_INT 11
37039: PPUSH
37040: LD_VAR 0 4
37044: PPUSH
37045: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37049: LD_ADDR_VAR 0 3
37053: PUSH
37054: LD_VAR 0 3
37058: PPUSH
37059: LD_INT 4
37061: PUSH
37062: LD_VAR 0 3
37066: PUSH
37067: LD_INT 4
37069: ARRAY
37070: PUSH
37071: LD_INT 1
37073: PLUS
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 44
37083: PPUSH
37084: CALL 3152 0 3
37088: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37089: LD_VAR 0 3
37093: PUSH
37094: LD_INT 4
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 3
37102: PUSH
37103: LD_INT 4
37105: ARRAY
37106: ARRAY
37107: PPUSH
37108: LD_VAR 0 3
37112: PUSH
37113: LD_INT 4
37115: ARRAY
37116: PUSH
37117: LD_VAR 0 3
37121: PUSH
37122: LD_INT 4
37124: ARRAY
37125: PUSH
37126: LD_INT 1
37128: MINUS
37129: ARRAY
37130: PPUSH
37131: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37135: LD_ADDR_VAR 0 5
37139: PUSH
37140: LD_INT 148
37142: PUSH
37143: LD_INT 140
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37153: LD_INT 1
37155: PPUSH
37156: LD_VAR 0 3
37160: PUSH
37161: LD_INT 4
37163: ARRAY
37164: PPUSH
37165: LD_VAR 0 5
37169: PPUSH
37170: LD_VAR 0 6
37174: PPUSH
37175: CALL 53938 0 4
// Wait ( 10 10$00 ) ;
37179: LD_INT 21000
37181: PPUSH
37182: CALL_OW 67
// tmp := [ ] ;
37186: LD_ADDR_VAR 0 3
37190: PUSH
37191: EMPTY
37192: ST_TO_ADDR
// w := 1 ;
37193: LD_ADDR_VAR 0 7
37197: PUSH
37198: LD_INT 1
37200: ST_TO_ADDR
// repeat tmp := [ ] ;
37201: LD_ADDR_VAR 0 3
37205: PUSH
37206: EMPTY
37207: ST_TO_ADDR
// if w mod 4 = 0 then
37208: LD_VAR 0 7
37212: PUSH
37213: LD_INT 4
37215: MOD
37216: PUSH
37217: LD_INT 0
37219: EQUAL
37220: IFFALSE 37307
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37222: LD_ADDR_VAR 0 8
37226: PUSH
37227: LD_INT 11
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: LD_INT 24
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 11
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 24
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 11
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 24
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 11
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: LD_INT 24
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 37409
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37307: LD_ADDR_VAR 0 8
37311: PUSH
37312: LD_INT 14
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: LD_INT 28
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 14
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 25
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 14
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 28
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 14
37368: PUSH
37369: LD_INT 1
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 29
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 11
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 24
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if w mod 3 = 0 then
37409: LD_VAR 0 7
37413: PUSH
37414: LD_INT 3
37416: MOD
37417: PUSH
37418: LD_INT 0
37420: EQUAL
37421: IFFALSE 37497
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37423: LD_ADDR_VAR 0 8
37427: PUSH
37428: LD_VAR 0 8
37432: PPUSH
37433: LD_INT 1
37435: PUSH
37436: LD_VAR 0 8
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PUSH
37447: LD_INT 1
37449: PLUS
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PPUSH
37455: LD_INT 14
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 25
37466: PUSH
37467: LD_INT 28
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PPUSH
37477: LD_INT 2
37479: PPUSH
37480: CALL_OW 12
37484: ARRAY
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL 3152 0 3
37496: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37497: LD_INT 1
37499: PPUSH
37500: LD_VAR 0 8
37504: PPUSH
37505: CALL 53842 0 2
// if GetSide ( ar_dep_w ) = 2 then
37509: LD_INT 45
37511: PPUSH
37512: CALL_OW 255
37516: PUSH
37517: LD_INT 2
37519: EQUAL
37520: IFFALSE 37605
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
37522: LD_ADDR_VAR 0 8
37526: PUSH
37527: LD_INT 14
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 28
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 14
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: LD_INT 27
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 14
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 27
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
37586: LD_INT 2
37588: PPUSH
37589: LD_VAR 0 8
37593: PPUSH
37594: CALL 53842 0 2
// wait ( 0 0$50 ) ;
37598: LD_INT 1750
37600: PPUSH
37601: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
37605: LD_INT 35
37607: PPUSH
37608: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37612: LD_EXP 61
37616: PUSH
37617: LD_INT 1
37619: ARRAY
37620: PPUSH
37621: LD_INT 3
37623: PUSH
37624: LD_INT 34
37626: PUSH
37627: LD_INT 32
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PPUSH
37638: CALL_OW 72
37642: PUSH
37643: LD_INT 4
37645: GREATEREQUAL
37646: IFFALSE 37605
// wait ( 0 0$10 ) ;
37648: LD_INT 350
37650: PPUSH
37651: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
37655: LD_ADDR_VAR 0 3
37659: PUSH
37660: LD_EXP 61
37664: PUSH
37665: LD_INT 1
37667: ARRAY
37668: PPUSH
37669: LD_INT 3
37671: PUSH
37672: LD_INT 34
37674: PUSH
37675: LD_INT 32
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PPUSH
37686: CALL_OW 72
37690: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
37691: LD_INT 100
37693: PPUSH
37694: CALL_OW 13
37698: PUSH
37699: LD_INT 50
37701: LESS
37702: IFFALSE 37735
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
37704: LD_ADDR_VAR 0 5
37708: PUSH
37709: LD_INT 55
37711: PUSH
37712: LD_INT 7
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 75
37721: PUSH
37722: LD_INT 90
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: ST_TO_ADDR
37733: GO 37764
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
37735: LD_ADDR_VAR 0 5
37739: PUSH
37740: LD_INT 128
37742: PUSH
37743: LD_INT 94
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 180
37752: PUSH
37753: LD_INT 135
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: ST_TO_ADDR
// if w mod 4 = 0 then
37764: LD_VAR 0 7
37768: PUSH
37769: LD_INT 4
37771: MOD
37772: PUSH
37773: LD_INT 0
37775: EQUAL
37776: IFFALSE 37807
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
37778: LD_ADDR_VAR 0 5
37782: PUSH
37783: LD_INT 91
37785: PUSH
37786: LD_INT 58
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 117
37795: PUSH
37796: LD_INT 107
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
37807: LD_INT 1
37809: PPUSH
37810: LD_VAR 0 3
37814: PPUSH
37815: LD_VAR 0 5
37819: PPUSH
37820: LD_VAR 0 6
37824: PPUSH
37825: CALL 53938 0 4
// if mc_vehicles [ 2 ] then
37829: LD_EXP 61
37833: PUSH
37834: LD_INT 2
37836: ARRAY
37837: IFFALSE 37873
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
37839: LD_INT 2
37841: PPUSH
37842: LD_EXP 61
37846: PUSH
37847: LD_INT 2
37849: ARRAY
37850: PPUSH
37851: LD_INT 73
37853: PUSH
37854: LD_INT 115
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: PPUSH
37864: LD_VAR 0 6
37868: PPUSH
37869: CALL 53938 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
37873: LD_INT 19950
37875: PPUSH
37876: LD_INT 26250
37878: PPUSH
37879: CALL_OW 12
37883: PPUSH
37884: CALL_OW 67
// w := w + 1 ;
37888: LD_ADDR_VAR 0 7
37892: PUSH
37893: LD_VAR 0 7
37897: PUSH
37898: LD_INT 1
37900: PLUS
37901: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
37902: LD_INT 94
37904: PPUSH
37905: CALL_OW 301
37909: PUSH
37910: LD_EXP 46
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PPUSH
37919: LD_INT 30
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 72
37933: NOT
37934: OR
37935: IFFALSE 37201
// end ; end_of_file
37937: PPOPN 8
37939: END
// export function Action ; var tmp , p , radar , sols , i ; begin
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
// InGameOn ;
37948: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
37952: LD_EXP 18
37956: PPUSH
37957: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
37961: LD_ADDR_VAR 0 2
37965: PUSH
37966: LD_INT 22
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 25
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PPUSH
37990: CALL_OW 69
37994: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
37995: LD_ADDR_VAR 0 4
37999: PUSH
38000: LD_INT 22
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 34
38012: PUSH
38013: LD_INT 11
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PPUSH
38024: CALL_OW 69
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: ST_TO_ADDR
// for i = 1 to tmp do
38033: LD_ADDR_VAR 0 6
38037: PUSH
38038: DOUBLE
38039: LD_INT 1
38041: DEC
38042: ST_TO_ADDR
38043: LD_VAR 0 2
38047: PUSH
38048: FOR_TO
38049: IFFALSE 38096
// begin if i = 5 then
38051: LD_VAR 0 6
38055: PUSH
38056: LD_INT 5
38058: EQUAL
38059: IFFALSE 38063
// break ;
38061: GO 38096
// sols := Replace ( sols , i , tmp [ i ] ) ;
38063: LD_ADDR_VAR 0 5
38067: PUSH
38068: LD_VAR 0 5
38072: PPUSH
38073: LD_VAR 0 6
38077: PPUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 6
38087: ARRAY
38088: PPUSH
38089: CALL_OW 1
38093: ST_TO_ADDR
// end ;
38094: GO 38048
38096: POP
38097: POP
// tmp := ar_force_tmp ;
38098: LD_ADDR_VAR 0 2
38102: PUSH
38103: LD_EXP 37
38107: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
38108: LD_VAR 0 2
38112: PUSH
38113: LD_INT 1
38115: ARRAY
38116: PPUSH
38117: LD_INT 108
38119: PPUSH
38120: LD_INT 139
38122: PPUSH
38123: LD_INT 0
38125: PPUSH
38126: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PPUSH
38139: LD_EXP 18
38143: PPUSH
38144: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
38148: LD_VAR 0 2
38152: PUSH
38153: LD_INT 2
38155: ARRAY
38156: PPUSH
38157: LD_INT 114
38159: PPUSH
38160: LD_INT 132
38162: PPUSH
38163: LD_INT 0
38165: PPUSH
38166: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
38170: LD_VAR 0 2
38174: PUSH
38175: LD_INT 3
38177: ARRAY
38178: PPUSH
38179: LD_INT 115
38181: PPUSH
38182: LD_INT 132
38184: PPUSH
38185: LD_INT 0
38187: PPUSH
38188: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 2
38199: ARRAY
38200: PUSH
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 3
38208: ARRAY
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PPUSH
38214: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
38218: LD_VAR 0 4
38222: PPUSH
38223: LD_INT 83
38225: PPUSH
38226: LD_INT 123
38228: PPUSH
38229: CALL_OW 111
// Wait ( 0 0$01 ) ;
38233: LD_INT 35
38235: PPUSH
38236: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
38240: LD_INT 90
38242: PPUSH
38243: LD_INT 144
38245: PPUSH
38246: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
38250: LD_VAR 0 5
38254: PPUSH
38255: LD_INT 88
38257: PPUSH
38258: LD_INT 129
38260: PPUSH
38261: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 92
38272: PUSH
38273: LD_INT 131
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 88
38282: PUSH
38283: LD_INT 127
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 91
38292: PUSH
38293: LD_INT 132
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 92
38302: PUSH
38303: LD_INT 134
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: ST_TO_ADDR
// for i = 1 to sols do
38316: LD_ADDR_VAR 0 6
38320: PUSH
38321: DOUBLE
38322: LD_INT 1
38324: DEC
38325: ST_TO_ADDR
38326: LD_VAR 0 5
38330: PUSH
38331: FOR_TO
38332: IFFALSE 38405
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
38334: LD_VAR 0 5
38338: PUSH
38339: LD_VAR 0 6
38343: ARRAY
38344: PPUSH
38345: LD_VAR 0 3
38349: PUSH
38350: LD_VAR 0 6
38354: ARRAY
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 3
38364: PUSH
38365: LD_VAR 0 6
38369: ARRAY
38370: PUSH
38371: LD_INT 2
38373: ARRAY
38374: PPUSH
38375: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
38379: LD_VAR 0 5
38383: PUSH
38384: LD_VAR 0 6
38388: ARRAY
38389: PPUSH
38390: CALL_OW 197
// AddComHold ( sols ) ;
38394: LD_VAR 0 5
38398: PPUSH
38399: CALL_OW 200
// end ;
38403: GO 38331
38405: POP
38406: POP
// repeat wait ( 0 0$1 ) ;
38407: LD_INT 35
38409: PPUSH
38410: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
38414: LD_VAR 0 5
38418: PUSH
38419: LD_INT 1
38421: ARRAY
38422: PPUSH
38423: LD_INT 92
38425: PPUSH
38426: LD_INT 131
38428: PPUSH
38429: CALL_OW 297
38433: PUSH
38434: LD_INT 4
38436: LESS
38437: IFFALSE 38407
// CenterOnXY ( 96 , 139 ) ;
38439: LD_INT 96
38441: PPUSH
38442: LD_INT 139
38444: PPUSH
38445: CALL_OW 84
// wait ( 0 0$3 ) ;
38449: LD_INT 105
38451: PPUSH
38452: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
38456: LD_INT 111
38458: PPUSH
38459: LD_INT 135
38461: PPUSH
38462: LD_INT 1
38464: PPUSH
38465: LD_INT 25
38467: NEG
38468: PPUSH
38469: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
38473: LD_VAR 0 2
38477: PUSH
38478: LD_INT 2
38480: ARRAY
38481: PPUSH
38482: LD_VAR 0 2
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: PPUSH
38491: CALL_OW 250
38495: PUSH
38496: LD_INT 3
38498: PLUS
38499: PPUSH
38500: LD_VAR 0 2
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: CALL_OW 251
38513: PPUSH
38514: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
38518: LD_VAR 0 2
38522: PUSH
38523: LD_INT 3
38525: ARRAY
38526: PPUSH
38527: LD_INT 7
38529: PPUSH
38530: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
38534: LD_VAR 0 2
38538: PUSH
38539: LD_INT 2
38541: ARRAY
38542: PPUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PPUSH
38552: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
38556: LD_INT 35
38558: PPUSH
38559: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
38563: LD_VAR 0 2
38567: PUSH
38568: LD_INT 1
38570: ARRAY
38571: PPUSH
38572: LD_VAR 0 2
38576: PUSH
38577: LD_INT 2
38579: ARRAY
38580: PPUSH
38581: CALL_OW 296
38585: PUSH
38586: LD_INT 5
38588: LESS
38589: IFFALSE 38556
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 1
38598: ARRAY
38599: PPUSH
38600: LD_VAR 0 2
38604: PUSH
38605: LD_INT 2
38607: ARRAY
38608: PPUSH
38609: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 1
38620: ARRAY
38621: PPUSH
38622: LD_STRING D1a-Merc1-1
38624: PPUSH
38625: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
38629: LD_VAR 0 2
38633: PUSH
38634: LD_INT 2
38636: ARRAY
38637: PPUSH
38638: LD_STRING D1a-FMerc2-1
38640: PPUSH
38641: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
38645: LD_VAR 0 2
38649: PUSH
38650: LD_INT 2
38652: ARRAY
38653: PPUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PPUSH
38663: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
38667: LD_VAR 0 2
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: PPUSH
38676: LD_INT 500
38678: PPUSH
38679: CALL_OW 234
// wait ( 0 0$2 ) ;
38683: LD_INT 70
38685: PPUSH
38686: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
38690: LD_VAR 0 2
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: LD_INT 2
38701: PPUSH
38702: CALL_OW 234
// wait ( 0 0$0.3 ) ;
38706: LD_INT 10
38708: PPUSH
38709: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
38713: LD_VAR 0 2
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PPUSH
38722: LD_STRING D1a-Merc1-2
38724: PPUSH
38725: CALL_OW 91
// wait ( 0 0$0.2 ) ;
38729: LD_INT 7
38731: PPUSH
38732: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
38736: LD_VAR 0 2
38740: PUSH
38741: LD_INT 1
38743: ARRAY
38744: PPUSH
38745: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 2
38756: ARRAY
38757: PPUSH
38758: LD_INT 10
38760: PPUSH
38761: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 2
38772: ARRAY
38773: PPUSH
38774: LD_STRING D1a-FMerc2-2
38776: PPUSH
38777: CALL_OW 88
// wait ( 0 0$1 ) ;
38781: LD_INT 35
38783: PPUSH
38784: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
38788: LD_INT 7
38790: PPUSH
38791: CALL_OW 85
// wait ( 0 0$2 ) ;
38795: LD_INT 70
38797: PPUSH
38798: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
38802: LD_EXP 41
38806: PPUSH
38807: LD_STRING D1a-Saliba-1
38809: PPUSH
38810: CALL_OW 91
// KillUnit ( Saliba ) ;
38814: LD_EXP 41
38818: PPUSH
38819: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
38823: LD_VAR 0 2
38827: PUSH
38828: LD_INT 3
38830: ARRAY
38831: PPUSH
38832: CALL_OW 122
// CenterOnUnits ( JMM ) ;
38836: LD_EXP 18
38840: PPUSH
38841: CALL_OW 85
// wait ( 0 0$1 ) ;
38845: LD_INT 35
38847: PPUSH
38848: CALL_OW 67
// InGameOff ;
38852: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
38856: LD_STRING M1
38858: PPUSH
38859: CALL_OW 337
// game_speed := 4 ;
38863: LD_ADDR_OWVAR 65
38867: PUSH
38868: LD_INT 4
38870: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
38871: LD_INT 111
38873: PPUSH
38874: LD_INT 135
38876: PPUSH
38877: LD_INT 1
38879: PPUSH
38880: CALL_OW 331
// SaveForQuickRestart ;
38884: CALL_OW 22
// ar_run := true ;
38888: LD_ADDR_EXP 5
38892: PUSH
38893: LD_INT 1
38895: ST_TO_ADDR
// end ;
38896: LD_VAR 0 1
38900: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
38901: LD_EXP 5
38905: IFFALSE 39247
38907: GO 38909
38909: DISABLE
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
38914: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
38915: LD_ADDR_VAR 0 2
38919: PUSH
38920: LD_EXP 37
38924: PUSH
38925: LD_EXP 34
38929: PPUSH
38930: LD_INT 21
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PPUSH
38940: CALL_OW 72
38944: ADD
38945: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
38946: LD_VAR 0 2
38950: PPUSH
38951: LD_INT 5
38953: PPUSH
38954: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
38958: LD_INT 5
38960: PPUSH
38961: LD_INT 1
38963: PPUSH
38964: CALL_OW 343
// k := 1 ;
38968: LD_ADDR_VAR 0 3
38972: PUSH
38973: LD_INT 1
38975: ST_TO_ADDR
// for i in tmp do
38976: LD_ADDR_VAR 0 1
38980: PUSH
38981: LD_VAR 0 2
38985: PUSH
38986: FOR_IN
38987: IFFALSE 39072
// begin if IsInUnit ( i ) then
38989: LD_VAR 0 1
38993: PPUSH
38994: CALL_OW 310
38998: IFFALSE 39009
// ComExitBuilding ( i ) ;
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 122
// if GetClass ( i ) = 3 then
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 257
39018: PUSH
39019: LD_INT 3
39021: EQUAL
39022: IFFALSE 39058
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
39024: LD_VAR 0 1
39028: PPUSH
39029: LD_EXP 38
39033: PUSH
39034: LD_VAR 0 3
39038: ARRAY
39039: PPUSH
39040: CALL_OW 180
// k := k + 1 ;
39044: LD_ADDR_VAR 0 3
39048: PUSH
39049: LD_VAR 0 3
39053: PUSH
39054: LD_INT 1
39056: PLUS
39057: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
39058: LD_VAR 0 1
39062: PPUSH
39063: LD_INT 10
39065: PPUSH
39066: CALL_OW 173
// end ;
39070: GO 38986
39072: POP
39073: POP
// ar_patrol := true ;
39074: LD_ADDR_EXP 7
39078: PUSH
39079: LD_INT 1
39081: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
39082: LD_INT 10
39084: PPUSH
39085: CALL_OW 67
// for i in tmp do
39089: LD_ADDR_VAR 0 1
39093: PUSH
39094: LD_VAR 0 2
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39128
// if not HasTask ( i ) then
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 314
39111: NOT
39112: IFFALSE 39126
// ComMoveToArea ( i , escape_area ) ;
39114: LD_VAR 0 1
39118: PPUSH
39119: LD_INT 10
39121: PPUSH
39122: CALL_OW 113
39126: GO 39099
39128: POP
39129: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_VAR 0 2
39139: PPUSH
39140: LD_INT 95
39142: PUSH
39143: LD_INT 10
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PPUSH
39150: CALL_OW 72
39154: ST_TO_ADDR
// if k then
39155: LD_VAR 0 3
39159: IFFALSE 39228
// for i in k do
39161: LD_ADDR_VAR 0 1
39165: PUSH
39166: LD_VAR 0 3
39170: PUSH
39171: FOR_IN
39172: IFFALSE 39226
// begin if IsInUnit ( i ) then
39174: LD_VAR 0 1
39178: PPUSH
39179: CALL_OW 310
39183: IFFALSE 39199
// RemoveUnit ( IsInUnit ( i ) ) ;
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 310
39194: PPUSH
39195: CALL_OW 64
// RemoveUnit ( i ) ;
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 64
// tmp := tmp diff i ;
39208: LD_ADDR_VAR 0 2
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_VAR 0 1
39222: DIFF
39223: ST_TO_ADDR
// end ;
39224: GO 39171
39226: POP
39227: POP
// until tmp = [ ] ;
39228: LD_VAR 0 2
39232: PUSH
39233: EMPTY
39234: EQUAL
39235: IFFALSE 39082
// ChangeSideFog ( 5 , 5 ) ;
39237: LD_INT 5
39239: PPUSH
39240: LD_INT 5
39242: PPUSH
39243: CALL_OW 343
// end ;
39247: PPOPN 3
39249: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
39250: LD_EXP 7
39254: IFFALSE 39544
39256: GO 39258
39258: DISABLE
39259: LD_INT 0
39261: PPUSH
39262: PPUSH
39263: PPUSH
// begin uc_side := 2 ;
39264: LD_ADDR_OWVAR 20
39268: PUSH
39269: LD_INT 2
39271: ST_TO_ADDR
// uc_nation := 2 ;
39272: LD_ADDR_OWVAR 21
39276: PUSH
39277: LD_INT 2
39279: ST_TO_ADDR
// InitHc ;
39280: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
39284: LD_INT 1
39286: PPUSH
39287: LD_INT 1
39289: PPUSH
39290: LD_INT 6
39292: PPUSH
39293: CALL_OW 380
// un := CreateHuman ;
39297: LD_ADDR_VAR 0 2
39301: PUSH
39302: CALL_OW 44
39306: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
39307: LD_INT 14
39309: PPUSH
39310: LD_INT 1
39312: PPUSH
39313: LD_INT 1
39315: PPUSH
39316: LD_INT 27
39318: PPUSH
39319: LD_INT 98
39321: PPUSH
39322: CALL 1980 0 5
// veh := CreateVehicle ;
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: CALL_OW 45
39335: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
39336: LD_VAR 0 3
39340: PPUSH
39341: LD_INT 4
39343: PPUSH
39344: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
39348: LD_VAR 0 3
39352: PPUSH
39353: LD_INT 179
39355: PPUSH
39356: LD_INT 135
39358: PPUSH
39359: LD_INT 0
39361: PPUSH
39362: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
39366: LD_VAR 0 2
39370: PPUSH
39371: LD_VAR 0 3
39375: PPUSH
39376: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
39380: LD_VAR 0 2
39384: PPUSH
39385: LD_INT 126
39387: PPUSH
39388: LD_INT 133
39390: PPUSH
39391: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
39395: LD_INT 10
39397: PPUSH
39398: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
39402: LD_INT 1
39404: PPUSH
39405: LD_VAR 0 3
39409: PPUSH
39410: CALL_OW 292
39414: PUSH
39415: LD_VAR 0 3
39419: PPUSH
39420: LD_INT 7
39422: PPUSH
39423: CALL_OW 296
39427: PUSH
39428: LD_INT 9
39430: LESS
39431: OR
39432: IFFALSE 39395
// ComHold ( veh ) ;
39434: LD_VAR 0 3
39438: PPUSH
39439: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
39443: LD_VAR 0 2
39447: PPUSH
39448: LD_STRING D2aa-Ar1-1
39450: PPUSH
39451: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
39455: LD_VAR 0 2
39459: PPUSH
39460: LD_INT 177
39462: PPUSH
39463: LD_INT 96
39465: PPUSH
39466: CALL_OW 111
// AddComExitVehicle ( un ) ;
39470: LD_VAR 0 2
39474: PPUSH
39475: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
39479: LD_INT 35
39481: PPUSH
39482: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
39486: LD_VAR 0 2
39490: PPUSH
39491: LD_INT 69
39493: PPUSH
39494: CALL_OW 296
39498: PUSH
39499: LD_INT 15
39501: LESS
39502: IFFALSE 39479
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
39504: LD_ADDR_EXP 46
39508: PUSH
39509: LD_EXP 46
39513: PPUSH
39514: LD_INT 3
39516: PUSH
39517: LD_EXP 46
39521: PUSH
39522: LD_INT 3
39524: ARRAY
39525: PUSH
39526: LD_INT 1
39528: PLUS
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: CALL 3152 0 3
39543: ST_TO_ADDR
// end ;
39544: PPOPN 3
39546: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
39547: LD_INT 7
39549: PPUSH
39550: CALL_OW 255
39554: PUSH
39555: LD_INT 1
39557: EQUAL
39558: PUSH
39559: LD_INT 7
39561: PPUSH
39562: CALL_OW 301
39566: OR
39567: IFFALSE 41934
39569: GO 39571
39571: DISABLE
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
39576: LD_ADDR_VAR 0 2
39580: PUSH
39581: LD_INT 46
39583: PUSH
39584: LD_INT 41
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 50
39593: PUSH
39594: LD_INT 25
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 57
39603: PUSH
39604: LD_INT 75
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 75
39613: PUSH
39614: LD_INT 89
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 51
39623: PUSH
39624: LD_INT 45
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 95
39633: PUSH
39634: LD_INT 95
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 84
39643: PUSH
39644: LD_INT 77
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 101
39653: PUSH
39654: LD_INT 76
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 118
39663: PUSH
39664: LD_INT 81
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 139
39673: PUSH
39674: LD_INT 97
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 129
39683: PUSH
39684: LD_INT 114
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 154
39693: PUSH
39694: LD_INT 111
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: ST_TO_ADDR
// base_captured := true ;
39715: LD_ADDR_EXP 6
39719: PUSH
39720: LD_INT 1
39722: ST_TO_ADDR
// DialogueOn ;
39723: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39727: LD_EXP 18
39731: PPUSH
39732: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
39736: LD_EXP 18
39740: PPUSH
39741: LD_STRING D2-JMM-1
39743: PPUSH
39744: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
39748: LD_EXP 27
39752: PPUSH
39753: LD_STRING D2-Pow-1
39755: PPUSH
39756: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
39760: LD_EXP 18
39764: PPUSH
39765: LD_STRING D2-JMM-2
39767: PPUSH
39768: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
39772: LD_EXP 27
39776: PPUSH
39777: LD_STRING D2-Pow-2
39779: PPUSH
39780: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
39784: LD_EXP 18
39788: PPUSH
39789: LD_STRING D2-JMM-3
39791: PPUSH
39792: CALL_OW 88
// DialogueOff ;
39796: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
39800: LD_STRING M2
39802: PPUSH
39803: CALL_OW 337
// Wait ( 0 0$2 ) ;
39807: LD_INT 70
39809: PPUSH
39810: CALL_OW 67
// if IsOk ( Gary ) then
39814: LD_EXP 29
39818: PPUSH
39819: CALL_OW 302
39823: IFFALSE 39837
// Say ( Gary , D2a-Gary-1 ) ;
39825: LD_EXP 29
39829: PPUSH
39830: LD_STRING D2a-Gary-1
39832: PPUSH
39833: CALL_OW 88
// if IsOk ( Bobby ) then
39837: LD_EXP 21
39841: PPUSH
39842: CALL_OW 302
39846: IFFALSE 39860
// Say ( Bobby , D2a-Bobby-1 ) ;
39848: LD_EXP 21
39852: PPUSH
39853: LD_STRING D2a-Bobby-1
39855: PPUSH
39856: CALL_OW 88
// if IsOk ( Cyrus ) then
39860: LD_EXP 22
39864: PPUSH
39865: CALL_OW 302
39869: IFFALSE 39883
// Say ( Cyrus , D2a-Cyrus-1 ) ;
39871: LD_EXP 22
39875: PPUSH
39876: LD_STRING D2a-Cyrus-1
39878: PPUSH
39879: CALL_OW 88
// if IsOk ( Lisa ) then
39883: LD_EXP 19
39887: PPUSH
39888: CALL_OW 302
39892: IFFALSE 39906
// Say ( Lisa , D2a-Lisa-1 ) ;
39894: LD_EXP 19
39898: PPUSH
39899: LD_STRING D2a-Lisa-1
39901: PPUSH
39902: CALL_OW 88
// if IsOk ( Frank ) then
39906: LD_EXP 30
39910: PPUSH
39911: CALL_OW 302
39915: IFFALSE 39929
// Say ( Frank , D2a-Frank-1 ) ;
39917: LD_EXP 30
39921: PPUSH
39922: LD_STRING D2a-Frank-1
39924: PPUSH
39925: CALL_OW 88
// if IsOk ( Cornel ) then
39929: LD_EXP 28
39933: PPUSH
39934: CALL_OW 302
39938: IFFALSE 39952
// Say ( Cornel , D2a-Corn-1 ) ;
39940: LD_EXP 28
39944: PPUSH
39945: LD_STRING D2a-Corn-1
39947: PPUSH
39948: CALL_OW 88
// if IsOk ( Donaldson ) then
39952: LD_EXP 20
39956: PPUSH
39957: CALL_OW 302
39961: IFFALSE 39975
// Say ( Donaldson , D2a-Don-1 ) ;
39963: LD_EXP 20
39967: PPUSH
39968: LD_STRING D2a-Don-1
39970: PPUSH
39971: CALL_OW 88
// if IsOk ( Brown ) then
39975: LD_EXP 24
39979: PPUSH
39980: CALL_OW 302
39984: IFFALSE 39998
// Say ( Brown , D2a-Brown-1 ) ;
39986: LD_EXP 24
39990: PPUSH
39991: LD_STRING D2a-Brown-1
39993: PPUSH
39994: CALL_OW 88
// Wait ( 0 0$30 ) ;
39998: LD_INT 1050
40000: PPUSH
40001: CALL_OW 67
// if IsOk ( Frank ) then
40005: LD_EXP 30
40009: PPUSH
40010: CALL_OW 302
40014: IFFALSE 40280
// begin DialogueOn ;
40016: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
40020: LD_EXP 18
40024: PUSH
40025: LD_EXP 30
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PPUSH
40034: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
40038: LD_EXP 30
40042: PPUSH
40043: LD_STRING D3F-Frank-1
40045: PPUSH
40046: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
40050: LD_EXP 18
40054: PPUSH
40055: LD_STRING D3F-JMM-1
40057: PPUSH
40058: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
40062: LD_EXP 30
40066: PPUSH
40067: LD_STRING D3F-Frank-2
40069: PPUSH
40070: CALL_OW 88
// case Query ( QFrank ) of 1 :
40074: LD_STRING QFrank
40076: PPUSH
40077: CALL_OW 97
40081: PUSH
40082: LD_INT 1
40084: DOUBLE
40085: EQUAL
40086: IFTRUE 40090
40088: GO 40113
40090: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
40091: LD_EXP 18
40095: PPUSH
40096: LD_STRING D3Fa-JMM-1
40098: PPUSH
40099: CALL_OW 88
// us_scout := 1 ;
40103: LD_ADDR_EXP 8
40107: PUSH
40108: LD_INT 1
40110: ST_TO_ADDR
// end ; 2 :
40111: GO 40276
40113: LD_INT 2
40115: DOUBLE
40116: EQUAL
40117: IFTRUE 40121
40119: GO 40243
40121: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
40122: LD_EXP 18
40126: PPUSH
40127: LD_STRING D3Fb-JMM-1
40129: PPUSH
40130: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
40134: LD_EXP 30
40138: PPUSH
40139: LD_STRING D3Fb-Frank-1
40141: PPUSH
40142: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
40146: LD_STRING QFrank2
40148: PPUSH
40149: CALL_OW 97
40153: PUSH
40154: LD_INT 1
40156: DOUBLE
40157: EQUAL
40158: IFTRUE 40162
40160: GO 40209
40162: POP
// begin us_scout := 2 ;
40163: LD_ADDR_EXP 8
40167: PUSH
40168: LD_INT 2
40170: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
40171: LD_EXP 18
40175: PPUSH
40176: LD_STRING D3Fba-JMM-1
40178: PPUSH
40179: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
40183: LD_EXP 30
40187: PPUSH
40188: LD_STRING D3Fba-Frank-1
40190: PPUSH
40191: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
40195: LD_EXP 18
40199: PPUSH
40200: LD_STRING D3Fba-JMM-2
40202: PPUSH
40203: CALL_OW 88
// end ; 2 :
40207: GO 40241
40209: LD_INT 2
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40240
40217: POP
// begin us_scout := 0 ;
40218: LD_ADDR_EXP 8
40222: PUSH
40223: LD_INT 0
40225: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
40226: LD_EXP 18
40230: PPUSH
40231: LD_STRING D3Fbb-JMM-1
40233: PPUSH
40234: CALL_OW 88
// end ; end ;
40238: GO 40241
40240: POP
// end ; 3 :
40241: GO 40276
40243: LD_INT 3
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40251
40249: GO 40275
40251: POP
// begin us_scout := - 1 ;
40252: LD_ADDR_EXP 8
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
40261: LD_EXP 18
40265: PPUSH
40266: LD_STRING D3Fc-JMM-1
40268: PPUSH
40269: CALL_OW 88
// end ; end ;
40273: GO 40276
40275: POP
// DialogueOff ;
40276: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
40280: LD_EXP 8
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: IN
40296: IFFALSE 40300
// exit ;
40298: GO 41934
// if us_scout in [ 1 , 2 ] then
40300: LD_EXP 8
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: IN
40315: IFFALSE 41016
// begin if IsInUnit ( Frank ) then
40317: LD_EXP 30
40321: PPUSH
40322: CALL_OW 310
40326: IFFALSE 40337
// ComExitBuilding ( Frank ) ;
40328: LD_EXP 30
40332: PPUSH
40333: CALL_OW 122
// if IsDrivenBy ( Frank ) then
40337: LD_EXP 30
40341: PPUSH
40342: CALL_OW 311
40346: IFFALSE 40357
// ComExitVehicle ( Frank ) ;
40348: LD_EXP 30
40352: PPUSH
40353: CALL_OW 121
// SetSide ( Frank , 4 ) ;
40357: LD_EXP 30
40361: PPUSH
40362: LD_INT 4
40364: PPUSH
40365: CALL_OW 235
// wait ( 0 0$1 ) ;
40369: LD_INT 35
40371: PPUSH
40372: CALL_OW 67
// if us_scout = 2 then
40376: LD_EXP 8
40380: PUSH
40381: LD_INT 2
40383: EQUAL
40384: IFFALSE 40752
// begin ComMoveXY ( Frank , 75 , 63 ) ;
40386: LD_EXP 30
40390: PPUSH
40391: LD_INT 75
40393: PPUSH
40394: LD_INT 63
40396: PPUSH
40397: CALL_OW 111
// AddComHold ( Frank ) ;
40401: LD_EXP 30
40405: PPUSH
40406: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
40410: LD_EXP 30
40414: PPUSH
40415: LD_INT 770
40417: PPUSH
40418: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
40422: LD_EXP 30
40426: PPUSH
40427: LD_INT 100
40429: PPUSH
40430: LD_INT 75
40432: PPUSH
40433: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
40437: LD_EXP 30
40441: PPUSH
40442: LD_INT 123
40444: PPUSH
40445: LD_INT 103
40447: PPUSH
40448: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
40452: LD_EXP 30
40456: PPUSH
40457: LD_INT 138
40459: PPUSH
40460: LD_INT 108
40462: PPUSH
40463: CALL_OW 171
// AddComHold ( Frank ) ;
40467: LD_EXP 30
40471: PPUSH
40472: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
40476: LD_INT 35
40478: PPUSH
40479: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
40483: LD_EXP 30
40487: PPUSH
40488: LD_INT 138
40490: PPUSH
40491: LD_INT 108
40493: PPUSH
40494: CALL_OW 307
40498: IFFALSE 40476
// AddComMoveXY ( Frank , 125 , 132 ) ;
40500: LD_EXP 30
40504: PPUSH
40505: LD_INT 125
40507: PPUSH
40508: LD_INT 132
40510: PPUSH
40511: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40515: LD_INT 35
40517: PPUSH
40518: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
40522: LD_INT 1
40524: PPUSH
40525: LD_EXP 30
40529: PPUSH
40530: CALL_OW 292
40534: PUSH
40535: LD_EXP 30
40539: PPUSH
40540: LD_INT 7
40542: PPUSH
40543: CALL_OW 296
40547: PUSH
40548: LD_INT 7
40550: LESS
40551: OR
40552: IFFALSE 40515
// DialogueOn ;
40554: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
40558: LD_EXP 30
40562: PPUSH
40563: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
40567: LD_INT 10
40569: PPUSH
40570: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
40574: LD_EXP 18
40578: PPUSH
40579: LD_STRING D4Fa-JMM-1
40581: PPUSH
40582: CALL_OW 88
// for i in points do
40586: LD_ADDR_VAR 0 1
40590: PUSH
40591: LD_VAR 0 2
40595: PUSH
40596: FOR_IN
40597: IFFALSE 40655
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
40599: LD_VAR 0 1
40603: PUSH
40604: LD_INT 1
40606: ARRAY
40607: PPUSH
40608: LD_VAR 0 1
40612: PUSH
40613: LD_INT 2
40615: ARRAY
40616: PPUSH
40617: LD_INT 1
40619: PPUSH
40620: LD_INT 20
40622: NEG
40623: PPUSH
40624: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
40628: LD_VAR 0 1
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 1
40641: PUSH
40642: LD_INT 2
40644: ARRAY
40645: PPUSH
40646: LD_INT 1
40648: PPUSH
40649: CALL_OW 331
// end ;
40653: GO 40596
40655: POP
40656: POP
// dwait ( 0 0$0.5 ) ;
40657: LD_INT 18
40659: PPUSH
40660: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
40664: LD_INT 42
40666: PPUSH
40667: LD_INT 27
40669: PPUSH
40670: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
40674: LD_EXP 30
40678: PPUSH
40679: LD_STRING D4Fa-Frank-1
40681: PPUSH
40682: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
40686: LD_INT 18
40688: PPUSH
40689: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
40693: LD_EXP 18
40697: PPUSH
40698: LD_STRING D4Fa-JMM-2
40700: PPUSH
40701: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
40705: LD_INT 118
40707: PPUSH
40708: LD_INT 80
40710: PPUSH
40711: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
40715: LD_EXP 30
40719: PPUSH
40720: LD_STRING D4Fa-Frank-2
40722: PPUSH
40723: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
40727: LD_INT 10
40729: PPUSH
40730: CALL_OW 68
// DialogueOff ;
40734: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40738: LD_EXP 30
40742: PPUSH
40743: LD_INT 1
40745: PPUSH
40746: CALL_OW 235
// end else
40750: GO 41014
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
40752: LD_INT 2
40754: PPUSH
40755: LD_INT 4
40757: PPUSH
40758: LD_INT 2
40760: PPUSH
40761: LD_INT 1
40763: PPUSH
40764: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
40768: LD_EXP 30
40772: PPUSH
40773: LD_INT 75
40775: PPUSH
40776: LD_INT 63
40778: PPUSH
40779: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
40783: LD_EXP 30
40787: PPUSH
40788: LD_INT 175
40790: PPUSH
40791: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
40795: LD_EXP 30
40799: PPUSH
40800: LD_INT 102
40802: PPUSH
40803: LD_INT 76
40805: PPUSH
40806: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
40810: LD_EXP 30
40814: PPUSH
40815: LD_INT 108
40817: PPUSH
40818: LD_INT 70
40820: PPUSH
40821: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40825: LD_INT 35
40827: PPUSH
40828: CALL_OW 67
// until See ( 2 , Frank ) ;
40832: LD_INT 2
40834: PPUSH
40835: LD_EXP 30
40839: PPUSH
40840: CALL_OW 292
40844: IFFALSE 40825
// ComMoveXY ( Frank , 112 , 118 ) ;
40846: LD_EXP 30
40850: PPUSH
40851: LD_INT 112
40853: PPUSH
40854: LD_INT 118
40856: PPUSH
40857: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
40861: LD_EXP 30
40865: PPUSH
40866: CALL_OW 256
40870: PUSH
40871: LD_INT 750
40873: GREATEREQUAL
40874: IFFALSE 40888
// SetLives ( Frank , 700 ) ;
40876: LD_EXP 30
40880: PPUSH
40881: LD_INT 700
40883: PPUSH
40884: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
40888: LD_INT 35
40890: PPUSH
40891: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
40895: LD_INT 1
40897: PPUSH
40898: LD_EXP 30
40902: PPUSH
40903: CALL_OW 292
40907: PUSH
40908: LD_EXP 30
40912: PPUSH
40913: LD_INT 7
40915: PPUSH
40916: CALL_OW 296
40920: PUSH
40921: LD_INT 17
40923: LESS
40924: OR
40925: IFFALSE 40888
// DialogueOn ;
40927: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
40931: LD_EXP 30
40935: PPUSH
40936: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
40940: LD_EXP 30
40944: PPUSH
40945: LD_STRING D4Fb-Frank-1
40947: PPUSH
40948: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
40952: LD_EXP 18
40956: PPUSH
40957: LD_STRING D4Fb-JMM-1
40959: PPUSH
40960: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
40964: LD_INT 2
40966: PPUSH
40967: LD_STRING D4Fb-FSci1-1
40969: PPUSH
40970: CALL 2209 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
40974: LD_EXP 30
40978: PPUSH
40979: LD_STRING D4Fb-Frank-2
40981: PPUSH
40982: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
40986: LD_EXP 18
40990: PPUSH
40991: LD_STRING D4Fb-JMM-2
40993: PPUSH
40994: CALL_OW 88
// DialogueOff ;
40998: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41002: LD_EXP 30
41006: PPUSH
41007: LD_INT 1
41009: PPUSH
41010: CALL_OW 235
// end ; end else
41014: GO 41173
// if IsOk ( Kikuchi ) then
41016: LD_EXP 31
41020: PPUSH
41021: CALL_OW 302
41025: IFFALSE 41173
// begin DialogueOn ;
41027: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
41031: LD_EXP 18
41035: PUSH
41036: LD_EXP 31
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PPUSH
41045: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
41049: LD_EXP 31
41053: PPUSH
41054: LD_STRING D3Y-Yam-1
41056: PPUSH
41057: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
41061: LD_EXP 18
41065: PPUSH
41066: LD_STRING D3Y-JMM-1
41068: PPUSH
41069: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
41073: LD_EXP 31
41077: PPUSH
41078: LD_STRING D3Y-Yam-2
41080: PPUSH
41081: CALL_OW 88
// case Query ( QYamoko ) of 1 :
41085: LD_STRING QYamoko
41087: PPUSH
41088: CALL_OW 97
41092: PUSH
41093: LD_INT 1
41095: DOUBLE
41096: EQUAL
41097: IFTRUE 41101
41099: GO 41136
41101: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
41102: LD_EXP 18
41106: PPUSH
41107: LD_STRING D3Ya-JMM-1
41109: PPUSH
41110: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
41114: LD_EXP 31
41118: PPUSH
41119: LD_STRING D3Ya-Yam-1
41121: PPUSH
41122: CALL_OW 88
// us_scout := 1 ;
41126: LD_ADDR_EXP 8
41130: PUSH
41131: LD_INT 1
41133: ST_TO_ADDR
// end ; 2 :
41134: GO 41169
41136: LD_INT 2
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41144
41142: GO 41168
41144: POP
// begin us_scout := - 1 ;
41145: LD_ADDR_EXP 8
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
41154: LD_EXP 18
41158: PPUSH
41159: LD_STRING D3Yb-JMM-1
41161: PPUSH
41162: CALL_OW 88
// end ; end ;
41166: GO 41169
41168: POP
// DialogueOff ;
41169: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41173: LD_EXP 8
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: IN
41189: IFFALSE 41193
// exit ;
41191: GO 41934
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
41193: LD_ADDR_EXP 8
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: PUSH
41212: LD_OWVAR 67
41216: ARRAY
41217: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
41218: LD_EXP 8
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: IN
41233: IFFALSE 41934
// begin if IsInUnit ( Kikuchi ) then
41235: LD_EXP 31
41239: PPUSH
41240: CALL_OW 310
41244: IFFALSE 41255
// ComExitBuilding ( Kikuchi ) ;
41246: LD_EXP 31
41250: PPUSH
41251: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
41255: LD_EXP 31
41259: PPUSH
41260: CALL_OW 311
41264: IFFALSE 41275
// ComExitVehicle ( Kikuchi ) ;
41266: LD_EXP 31
41270: PPUSH
41271: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
41275: LD_EXP 31
41279: PPUSH
41280: LD_INT 4
41282: PPUSH
41283: CALL_OW 235
// wait ( 0 0$1 ) ;
41287: LD_INT 35
41289: PPUSH
41290: CALL_OW 67
// if us_scout = 2 then
41294: LD_EXP 8
41298: PUSH
41299: LD_INT 2
41301: EQUAL
41302: IFFALSE 41682
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
41304: LD_EXP 31
41308: PPUSH
41309: LD_INT 75
41311: PPUSH
41312: LD_INT 63
41314: PPUSH
41315: CALL_OW 111
// AddComHold ( Kikuchi ) ;
41319: LD_EXP 31
41323: PPUSH
41324: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
41328: LD_EXP 31
41332: PPUSH
41333: LD_INT 770
41335: PPUSH
41336: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
41340: LD_EXP 31
41344: PPUSH
41345: LD_INT 100
41347: PPUSH
41348: LD_INT 75
41350: PPUSH
41351: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
41355: LD_EXP 31
41359: PPUSH
41360: LD_INT 123
41362: PPUSH
41363: LD_INT 103
41365: PPUSH
41366: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
41370: LD_EXP 31
41374: PPUSH
41375: LD_INT 138
41377: PPUSH
41378: LD_INT 108
41380: PPUSH
41381: CALL_OW 171
// AddComHold ( Kikuchi ) ;
41385: LD_EXP 31
41389: PPUSH
41390: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41394: LD_INT 35
41396: PPUSH
41397: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
41401: LD_EXP 31
41405: PPUSH
41406: LD_INT 138
41408: PPUSH
41409: LD_INT 108
41411: PPUSH
41412: CALL_OW 307
41416: IFFALSE 41394
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
41418: LD_EXP 31
41422: PPUSH
41423: LD_INT 125
41425: PPUSH
41426: LD_INT 132
41428: PPUSH
41429: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41433: LD_INT 35
41435: PPUSH
41436: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
41440: LD_INT 1
41442: PPUSH
41443: LD_EXP 31
41447: PPUSH
41448: CALL_OW 292
41452: PUSH
41453: LD_EXP 31
41457: PPUSH
41458: LD_INT 7
41460: PPUSH
41461: CALL_OW 296
41465: PUSH
41466: LD_INT 7
41468: LESS
41469: OR
41470: IFFALSE 41433
// DialogueOn ;
41472: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
41476: LD_EXP 31
41480: PPUSH
41481: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41485: LD_INT 10
41487: PPUSH
41488: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
41492: LD_EXP 31
41496: PPUSH
41497: LD_STRING D4Ya-Yam-1
41499: PPUSH
41500: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
41504: LD_EXP 18
41508: PPUSH
41509: LD_STRING D4Ya-JMM-1
41511: PPUSH
41512: CALL_OW 88
// for i in points do
41516: LD_ADDR_VAR 0 1
41520: PUSH
41521: LD_VAR 0 2
41525: PUSH
41526: FOR_IN
41527: IFFALSE 41585
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41529: LD_VAR 0 1
41533: PUSH
41534: LD_INT 1
41536: ARRAY
41537: PPUSH
41538: LD_VAR 0 1
41542: PUSH
41543: LD_INT 2
41545: ARRAY
41546: PPUSH
41547: LD_INT 1
41549: PPUSH
41550: LD_INT 20
41552: NEG
41553: PPUSH
41554: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41558: LD_VAR 0 1
41562: PUSH
41563: LD_INT 1
41565: ARRAY
41566: PPUSH
41567: LD_VAR 0 1
41571: PUSH
41572: LD_INT 2
41574: ARRAY
41575: PPUSH
41576: LD_INT 1
41578: PPUSH
41579: CALL_OW 331
// end ;
41583: GO 41526
41585: POP
41586: POP
// dwait ( 0 0$0.5 ) ;
41587: LD_INT 18
41589: PPUSH
41590: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41594: LD_INT 42
41596: PPUSH
41597: LD_INT 27
41599: PPUSH
41600: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
41604: LD_EXP 31
41608: PPUSH
41609: LD_STRING D4Ya-Yam-2
41611: PPUSH
41612: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41616: LD_INT 18
41618: PPUSH
41619: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
41623: LD_INT 118
41625: PPUSH
41626: LD_INT 80
41628: PPUSH
41629: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
41633: LD_EXP 18
41637: PPUSH
41638: LD_STRING D4Ya-JMM-2
41640: PPUSH
41641: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
41645: LD_EXP 31
41649: PPUSH
41650: LD_STRING D4Ya-Yam-3
41652: PPUSH
41653: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41657: LD_INT 10
41659: PPUSH
41660: CALL_OW 68
// DialogueOff ;
41664: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41668: LD_EXP 31
41672: PPUSH
41673: LD_INT 1
41675: PPUSH
41676: CALL_OW 235
// end else
41680: GO 41934
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41682: LD_INT 2
41684: PPUSH
41685: LD_INT 4
41687: PPUSH
41688: LD_INT 2
41690: PPUSH
41691: LD_INT 1
41693: PPUSH
41694: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
41698: LD_EXP 31
41702: PPUSH
41703: LD_INT 75
41705: PPUSH
41706: LD_INT 63
41708: PPUSH
41709: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
41713: LD_EXP 31
41717: PPUSH
41718: LD_INT 175
41720: PPUSH
41721: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
41725: LD_EXP 31
41729: PPUSH
41730: LD_INT 102
41732: PPUSH
41733: LD_INT 76
41735: PPUSH
41736: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
41740: LD_EXP 31
41744: PPUSH
41745: LD_INT 108
41747: PPUSH
41748: LD_INT 70
41750: PPUSH
41751: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41755: LD_INT 35
41757: PPUSH
41758: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
41762: LD_INT 2
41764: PPUSH
41765: LD_EXP 31
41769: PPUSH
41770: CALL_OW 292
41774: IFFALSE 41755
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
41776: LD_EXP 31
41780: PPUSH
41781: LD_INT 112
41783: PPUSH
41784: LD_INT 118
41786: PPUSH
41787: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
41791: LD_EXP 31
41795: PPUSH
41796: CALL_OW 256
41800: PUSH
41801: LD_INT 750
41803: GREATEREQUAL
41804: IFFALSE 41818
// SetLives ( Kikuchi , 700 ) ;
41806: LD_EXP 31
41810: PPUSH
41811: LD_INT 700
41813: PPUSH
41814: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41818: LD_INT 35
41820: PPUSH
41821: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
41825: LD_INT 1
41827: PPUSH
41828: LD_EXP 31
41832: PPUSH
41833: CALL_OW 292
41837: PUSH
41838: LD_EXP 31
41842: PPUSH
41843: LD_INT 7
41845: PPUSH
41846: CALL_OW 296
41850: PUSH
41851: LD_INT 17
41853: LESS
41854: OR
41855: IFFALSE 41818
// DialogueOn ;
41857: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
41861: LD_EXP 31
41865: PPUSH
41866: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
41870: LD_EXP 31
41874: PPUSH
41875: LD_STRING D4Yb-Yam-1
41877: PPUSH
41878: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
41882: LD_EXP 18
41886: PPUSH
41887: LD_STRING D4Yb-JMM-1
41889: PPUSH
41890: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
41894: LD_EXP 31
41898: PPUSH
41899: LD_STRING D4Yb-Yam-2
41901: PPUSH
41902: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
41906: LD_EXP 18
41910: PPUSH
41911: LD_STRING D4Yb-JMM-2
41913: PPUSH
41914: CALL_OW 88
// DialogueOff ;
41918: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41922: LD_EXP 31
41926: PPUSH
41927: LD_INT 1
41929: PPUSH
41930: CALL_OW 235
// end ; end ; end ;
41934: PPOPN 2
41936: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
41937: LD_EXP 6
41941: IFFALSE 42966
41943: GO 41945
41945: DISABLE
41946: LD_INT 0
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
// begin enable ;
41952: ENABLE
// if not seen [ 1 ] then
41953: LD_EXP 9
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: NOT
41962: IFFALSE 42142
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
41964: LD_ADDR_VAR 0 2
41968: PUSH
41969: LD_INT 22
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 25
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 33
41994: PUSH
41995: LD_INT 4
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PPUSH
42011: CALL_OW 69
42015: ST_TO_ADDR
// if tmp then
42016: LD_VAR 0 2
42020: IFFALSE 42142
// for i in tmp do
42022: LD_ADDR_VAR 0 1
42026: PUSH
42027: LD_VAR 0 2
42031: PUSH
42032: FOR_IN
42033: IFFALSE 42140
// if See ( 1 , i ) then
42035: LD_INT 1
42037: PPUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: CALL_OW 292
42047: IFFALSE 42138
// begin seen := Replace ( seen , 1 , true ) ;
42049: LD_ADDR_EXP 9
42053: PUSH
42054: LD_EXP 9
42058: PPUSH
42059: LD_INT 1
42061: PPUSH
42062: LD_INT 1
42064: PPUSH
42065: CALL_OW 1
42069: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42070: LD_INT 1
42072: PPUSH
42073: CALL 2038 0 1
42077: IFFALSE 42138
// begin DialogueOn ;
42079: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42083: LD_VAR 0 1
42087: PPUSH
42088: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42092: LD_INT 10
42094: PPUSH
42095: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
42099: LD_ADDR_VAR 0 3
42103: PUSH
42104: LD_INT 1
42106: PPUSH
42107: LD_STRING D5a-Sol2-1
42109: PPUSH
42110: CALL 2209 0 2
42114: ST_TO_ADDR
// if not un then
42115: LD_VAR 0 3
42119: NOT
42120: IFFALSE 42132
// SayRand ( sex_female , D5a-FSol2-1 ) ;
42122: LD_INT 2
42124: PPUSH
42125: LD_STRING D5a-FSol2-1
42127: PPUSH
42128: CALL 2209 0 2
// DialogueOff ;
42132: CALL_OW 7
// break ;
42136: GO 42140
// end ; end ;
42138: GO 42032
42140: POP
42141: POP
// end ; if not seen [ 2 ] then
42142: LD_EXP 9
42146: PUSH
42147: LD_INT 2
42149: ARRAY
42150: NOT
42151: IFFALSE 42368
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
42153: LD_ADDR_VAR 0 2
42157: PUSH
42158: LD_INT 22
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 25
42170: PUSH
42171: LD_INT 17
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PPUSH
42182: CALL_OW 69
42186: ST_TO_ADDR
// if tmp then
42187: LD_VAR 0 2
42191: IFFALSE 42368
// for i in tmp do
42193: LD_ADDR_VAR 0 1
42197: PUSH
42198: LD_VAR 0 2
42202: PUSH
42203: FOR_IN
42204: IFFALSE 42366
// if See ( 1 , i ) then
42206: LD_INT 1
42208: PPUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 292
42218: IFFALSE 42364
// begin seen := Replace ( seen , 2 , true ) ;
42220: LD_ADDR_EXP 9
42224: PUSH
42225: LD_EXP 9
42229: PPUSH
42230: LD_INT 2
42232: PPUSH
42233: LD_INT 1
42235: PPUSH
42236: CALL_OW 1
42240: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42241: LD_INT 1
42243: PPUSH
42244: CALL 2038 0 1
42248: IFFALSE 42364
// begin DialogueOn ;
42250: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42254: LD_VAR 0 1
42258: PPUSH
42259: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42263: LD_INT 10
42265: PPUSH
42266: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 1
42277: PPUSH
42278: LD_STRING D5b-Sol1-1
42280: PPUSH
42281: CALL 2209 0 2
42285: ST_TO_ADDR
// if not un then
42286: LD_VAR 0 3
42290: NOT
42291: IFFALSE 42309
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: LD_INT 2
42300: PPUSH
42301: LD_STRING D5b-FSol1-1
42303: PPUSH
42304: CALL 2209 0 2
42308: ST_TO_ADDR
// if un then
42309: LD_VAR 0 3
42313: IFFALSE 42358
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
42315: LD_ADDR_VAR 0 4
42319: PUSH
42320: LD_INT 1
42322: PPUSH
42323: LD_STRING D5b-Sol2-1
42325: PPUSH
42326: LD_VAR 0 3
42330: PPUSH
42331: CALL 2428 0 3
42335: ST_TO_ADDR
// if not un2 then
42336: LD_VAR 0 4
42340: NOT
42341: IFFALSE 42358
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
42343: LD_INT 2
42345: PPUSH
42346: LD_STRING D5b-FSol2-1
42348: PPUSH
42349: LD_VAR 0 3
42353: PPUSH
42354: CALL 2428 0 3
// end ; DialogueOff ;
42358: CALL_OW 7
// break ;
42362: GO 42366
// end ; end ;
42364: GO 42203
42366: POP
42367: POP
// end ; if not seen [ 3 ] then
42368: LD_EXP 9
42372: PUSH
42373: LD_INT 3
42375: ARRAY
42376: NOT
42377: IFFALSE 42551
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
42379: LD_ADDR_VAR 0 2
42383: PUSH
42384: LD_INT 22
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 33
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PPUSH
42408: CALL_OW 69
42412: ST_TO_ADDR
// if tmp then
42413: LD_VAR 0 2
42417: IFFALSE 42551
// for i in tmp do
42419: LD_ADDR_VAR 0 1
42423: PUSH
42424: LD_VAR 0 2
42428: PUSH
42429: FOR_IN
42430: IFFALSE 42549
// if See ( 1 , i ) then
42432: LD_INT 1
42434: PPUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 292
42444: IFFALSE 42547
// begin seen := Replace ( seen , 3 , true ) ;
42446: LD_ADDR_EXP 9
42450: PUSH
42451: LD_EXP 9
42455: PPUSH
42456: LD_INT 3
42458: PPUSH
42459: LD_INT 1
42461: PPUSH
42462: CALL_OW 1
42466: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42467: LD_INT 1
42469: PPUSH
42470: CALL 2038 0 1
42474: IFFALSE 42547
// begin DialogueOn ;
42476: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42480: LD_VAR 0 1
42484: PPUSH
42485: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42489: LD_INT 10
42491: PPUSH
42492: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
42496: LD_ADDR_VAR 0 3
42500: PUSH
42501: LD_INT 1
42503: PPUSH
42504: LD_STRING D8-Sol1-1
42506: PPUSH
42507: CALL 2209 0 2
42511: ST_TO_ADDR
// if not un then
42512: LD_VAR 0 3
42516: NOT
42517: IFFALSE 42529
// SayRand ( sex_female , D8-FSol1-1 ) ;
42519: LD_INT 2
42521: PPUSH
42522: LD_STRING D8-FSol1-1
42524: PPUSH
42525: CALL 2209 0 2
// Say ( JMM , D8-JMM-1 ) ;
42529: LD_EXP 18
42533: PPUSH
42534: LD_STRING D8-JMM-1
42536: PPUSH
42537: CALL_OW 88
// DialogueOff ;
42541: CALL_OW 7
// break ;
42545: GO 42549
// end ; end ;
42547: GO 42429
42549: POP
42550: POP
// end ; if not seen [ 4 ] then
42551: LD_EXP 9
42555: PUSH
42556: LD_INT 4
42558: ARRAY
42559: NOT
42560: IFFALSE 42722
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
42562: LD_ADDR_VAR 0 2
42566: PUSH
42567: LD_INT 22
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 33
42579: PUSH
42580: LD_INT 5
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PPUSH
42591: CALL_OW 69
42595: ST_TO_ADDR
// if tmp then
42596: LD_VAR 0 2
42600: IFFALSE 42722
// for i in tmp do
42602: LD_ADDR_VAR 0 1
42606: PUSH
42607: LD_VAR 0 2
42611: PUSH
42612: FOR_IN
42613: IFFALSE 42720
// if See ( 1 , i ) then
42615: LD_INT 1
42617: PPUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: CALL_OW 292
42627: IFFALSE 42718
// begin seen := Replace ( seen , 4 , true ) ;
42629: LD_ADDR_EXP 9
42633: PUSH
42634: LD_EXP 9
42638: PPUSH
42639: LD_INT 4
42641: PPUSH
42642: LD_INT 1
42644: PPUSH
42645: CALL_OW 1
42649: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42650: LD_INT 1
42652: PPUSH
42653: CALL 2038 0 1
42657: IFFALSE 42718
// begin DialogueOn ;
42659: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42672: LD_INT 10
42674: PPUSH
42675: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 1
42686: PPUSH
42687: LD_STRING D5a-Sol1-1
42689: PPUSH
42690: CALL 2209 0 2
42694: ST_TO_ADDR
// if not un then
42695: LD_VAR 0 3
42699: NOT
42700: IFFALSE 42712
// SayRand ( sex_female , D5a-FSol1-1 ) ;
42702: LD_INT 2
42704: PPUSH
42705: LD_STRING D5a-FSol1-1
42707: PPUSH
42708: CALL 2209 0 2
// DialogueOff ;
42712: CALL_OW 7
// break ;
42716: GO 42720
// end ; end ;
42718: GO 42612
42720: POP
42721: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
42722: LD_EXP 9
42726: PUSH
42727: LD_INT 5
42729: ARRAY
42730: NOT
42731: PUSH
42732: LD_EXP 9
42736: PUSH
42737: LD_INT 3
42739: ARRAY
42740: AND
42741: IFFALSE 42915
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
42743: LD_ADDR_VAR 0 2
42747: PUSH
42748: LD_INT 22
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 34
42760: PUSH
42761: LD_INT 31
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PPUSH
42772: CALL_OW 69
42776: ST_TO_ADDR
// if tmp then
42777: LD_VAR 0 2
42781: IFFALSE 42915
// for i in tmp do
42783: LD_ADDR_VAR 0 1
42787: PUSH
42788: LD_VAR 0 2
42792: PUSH
42793: FOR_IN
42794: IFFALSE 42913
// if See ( 1 , i ) then
42796: LD_INT 1
42798: PPUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 292
42808: IFFALSE 42911
// begin seen := Replace ( seen , 5 , true ) ;
42810: LD_ADDR_EXP 9
42814: PUSH
42815: LD_EXP 9
42819: PPUSH
42820: LD_INT 5
42822: PPUSH
42823: LD_INT 1
42825: PPUSH
42826: CALL_OW 1
42830: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42831: LD_INT 1
42833: PPUSH
42834: CALL 2038 0 1
42838: IFFALSE 42911
// begin DialogueOn ;
42840: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42844: LD_VAR 0 1
42848: PPUSH
42849: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42853: LD_INT 10
42855: PPUSH
42856: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: LD_INT 1
42867: PPUSH
42868: LD_STRING D8a-Sol2-1
42870: PPUSH
42871: CALL 2209 0 2
42875: ST_TO_ADDR
// if not un then
42876: LD_VAR 0 3
42880: NOT
42881: IFFALSE 42893
// SayRand ( sex_female , D8a-FSol2-1 ) ;
42883: LD_INT 2
42885: PPUSH
42886: LD_STRING D8a-FSol2-1
42888: PPUSH
42889: CALL 2209 0 2
// Say ( JMM , D8a-JMM-1 ) ;
42893: LD_EXP 18
42897: PPUSH
42898: LD_STRING D8a-JMM-1
42900: PPUSH
42901: CALL_OW 88
// DialogueOff ;
42905: CALL_OW 7
// break ;
42909: GO 42913
// end ; end ;
42911: GO 42793
42913: POP
42914: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
42915: LD_EXP 9
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: PUSH
42924: LD_EXP 9
42928: PUSH
42929: LD_INT 2
42931: ARRAY
42932: AND
42933: PUSH
42934: LD_EXP 9
42938: PUSH
42939: LD_INT 3
42941: ARRAY
42942: AND
42943: PUSH
42944: LD_EXP 9
42948: PUSH
42949: LD_INT 4
42951: ARRAY
42952: AND
42953: PUSH
42954: LD_EXP 9
42958: PUSH
42959: LD_INT 5
42961: ARRAY
42962: AND
42963: IFFALSE 42966
// disable ;
42965: DISABLE
// end ;
42966: PPOPN 4
42968: END
// every 0 0$1 trigger kamikazed do var un ;
42969: LD_EXP 10
42973: IFFALSE 43171
42975: GO 42977
42977: DISABLE
42978: LD_INT 0
42980: PPUSH
// begin DialogueOn ;
42981: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
42985: LD_EXP 10
42989: PPUSH
42990: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
42994: LD_ADDR_VAR 0 1
42998: PUSH
42999: LD_INT 1
43001: PPUSH
43002: LD_STRING D5c-Sol1-1
43004: PPUSH
43005: CALL 2209 0 2
43009: ST_TO_ADDR
// if not un then
43010: LD_VAR 0 1
43014: NOT
43015: IFFALSE 43033
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
43017: LD_ADDR_VAR 0 1
43021: PUSH
43022: LD_INT 2
43024: PPUSH
43025: LD_STRING D5c-Sol1-1
43027: PPUSH
43028: CALL 2209 0 2
43032: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
43033: LD_EXP 18
43037: PPUSH
43038: LD_STRING D5c-JMM-1
43040: PPUSH
43041: CALL_OW 88
// if IsOk ( Lisa ) then
43045: LD_EXP 19
43049: PPUSH
43050: CALL_OW 302
43054: IFFALSE 43070
// Say ( Lisa , D5d-Lisa-1 ) else
43056: LD_EXP 19
43060: PPUSH
43061: LD_STRING D5d-Lisa-1
43063: PPUSH
43064: CALL_OW 88
43068: GO 43155
// if IsOk ( Cyrus ) then
43070: LD_EXP 22
43074: PPUSH
43075: CALL_OW 302
43079: IFFALSE 43095
// Say ( Cyrus , D5d-Cyrus-1 ) else
43081: LD_EXP 22
43085: PPUSH
43086: LD_STRING D5d-Cyrus-1
43088: PPUSH
43089: CALL_OW 88
43093: GO 43155
// if IsOk ( Gary ) then
43095: LD_EXP 29
43099: PPUSH
43100: CALL_OW 302
43104: IFFALSE 43120
// Say ( Gary , D5d-Gary-1 ) else
43106: LD_EXP 29
43110: PPUSH
43111: LD_STRING D5d-Gary-1
43113: PPUSH
43114: CALL_OW 88
43118: GO 43155
// if GetSex ( un ) = sex_male then
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 258
43129: PUSH
43130: LD_INT 1
43132: EQUAL
43133: IFFALSE 43149
// Say ( un , D5d-Sol1-1 ) else
43135: LD_VAR 0 1
43139: PPUSH
43140: LD_STRING D5d-Sol1-1
43142: PPUSH
43143: CALL_OW 88
43147: GO 43155
// begin DialogueOff ;
43149: CALL_OW 7
// exit ;
43153: GO 43171
// end ; Say ( JMM , D5d-JMM-1 ) ;
43155: LD_EXP 18
43159: PPUSH
43160: LD_STRING D5d-JMM-1
43162: PPUSH
43163: CALL_OW 88
// DialogueOff ;
43167: CALL_OW 7
// end ;
43171: PPOPN 1
43173: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
43174: LD_INT 1
43176: PPUSH
43177: LD_INT 17
43179: PPUSH
43180: CALL_OW 294
43184: PUSH
43185: LD_INT 2
43187: GREATEREQUAL
43188: IFFALSE 43309
43190: GO 43192
43192: DISABLE
43193: LD_INT 0
43195: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
43196: LD_INT 10
43198: PPUSH
43199: LD_INT 5
43201: PPUSH
43202: LD_INT 1
43204: PPUSH
43205: LD_INT 10
43207: NEG
43208: PPUSH
43209: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
43213: LD_INT 10
43215: PPUSH
43216: LD_INT 5
43218: PPUSH
43219: LD_INT 1
43221: PPUSH
43222: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
43226: LD_INT 10
43228: PPUSH
43229: LD_INT 5
43231: PPUSH
43232: CALL_OW 86
// DialogueOn ;
43236: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
43240: LD_ADDR_VAR 0 1
43244: PUSH
43245: LD_INT 1
43247: PPUSH
43248: LD_STRING D6-Sci1-1
43250: PPUSH
43251: CALL 2209 0 2
43255: ST_TO_ADDR
// if un then
43256: LD_VAR 0 1
43260: IFFALSE 43298
// begin Say ( JMM , D6-JMM-1 ) ;
43262: LD_EXP 18
43266: PPUSH
43267: LD_STRING D6-JMM-1
43269: PPUSH
43270: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
43274: LD_VAR 0 1
43278: PPUSH
43279: LD_STRING D6-Sci1-2
43281: PPUSH
43282: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
43286: LD_EXP 18
43290: PPUSH
43291: LD_STRING D6-JMM-2
43293: PPUSH
43294: CALL_OW 88
// end ; DialogueOff ;
43298: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
43302: LD_STRING M3
43304: PPUSH
43305: CALL_OW 337
// end ;
43309: PPOPN 1
43311: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
43312: LD_OWVAR 1
43316: PUSH
43317: LD_INT 65100
43319: GREATEREQUAL
43320: PUSH
43321: LD_INT 2
43323: PPUSH
43324: LD_INT 169
43326: PPUSH
43327: LD_INT 90
43329: PPUSH
43330: LD_INT 40
43332: PPUSH
43333: CALL 3646 0 4
43337: PUSH
43338: LD_INT 4
43340: ARRAY
43341: PUSH
43342: LD_INT 0
43344: EQUAL
43345: AND
43346: IFFALSE 44380
43348: GO 43350
43350: DISABLE
43351: LD_INT 0
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
// begin uc_side := 5 ;
43357: LD_ADDR_OWVAR 20
43361: PUSH
43362: LD_INT 5
43364: ST_TO_ADDR
// uc_nation := 2 ;
43365: LD_ADDR_OWVAR 21
43369: PUSH
43370: LD_INT 2
43372: ST_TO_ADDR
// InitHc ;
43373: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
43377: LD_INT 1
43379: PPUSH
43380: LD_INT 3
43382: PPUSH
43383: LD_INT 8
43385: PPUSH
43386: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
43390: LD_ADDR_OWVAR 29
43394: PUSH
43395: LD_INT 12
43397: PUSH
43398: LD_INT 12
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
43405: LD_ADDR_OWVAR 33
43409: PUSH
43410: LD_STRING SecondCharsGal
43412: ST_TO_ADDR
// hc_face_number := 7 ;
43413: LD_ADDR_OWVAR 34
43417: PUSH
43418: LD_INT 7
43420: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
43421: LD_ADDR_EXP 43
43425: PUSH
43426: CALL_OW 44
43430: ST_TO_ADDR
// InitHc ;
43431: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
43435: LD_INT 1
43437: PPUSH
43438: LD_INT 16
43440: PPUSH
43441: LD_INT 2
43443: PPUSH
43444: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
43448: LD_ADDR_OWVAR 29
43452: PUSH
43453: LD_INT 12
43455: PUSH
43456: LD_INT 12
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// hc_name := Livid ;
43463: LD_ADDR_OWVAR 26
43467: PUSH
43468: LD_STRING Livid
43470: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
43471: LD_ADDR_EXP 44
43475: PUSH
43476: CALL_OW 44
43480: ST_TO_ADDR
// InitHc ;
43481: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
43485: LD_INT 35
43487: PPUSH
43488: CALL_OW 67
// until not InBattle ( 1 ) ;
43492: LD_INT 1
43494: PPUSH
43495: CALL_OW 463
43499: NOT
43500: IFFALSE 43485
// wait ( 0 0$5 ) ;
43502: LD_INT 175
43504: PPUSH
43505: CALL_OW 67
// DialogueOn ;
43509: CALL_OW 6
// InGameOn ;
43513: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
43517: LD_ADDR_VAR 0 1
43521: PUSH
43522: LD_EXP 32
43526: PUSH
43527: LD_EXP 19
43531: PUSH
43532: LD_EXP 20
43536: PUSH
43537: LD_EXP 21
43541: PUSH
43542: LD_EXP 22
43546: PUSH
43547: LD_EXP 23
43551: PUSH
43552: LD_EXP 24
43556: PUSH
43557: LD_EXP 25
43561: PUSH
43562: LD_EXP 26
43566: PUSH
43567: LD_EXP 28
43571: PUSH
43572: LD_EXP 29
43576: PUSH
43577: LD_EXP 30
43581: PUSH
43582: LD_EXP 31
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: DIFF
43601: PPUSH
43602: LD_INT 26
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PPUSH
43612: CALL_OW 72
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: ST_TO_ADDR
// if not un and Brown then
43621: LD_VAR 0 1
43625: NOT
43626: PUSH
43627: LD_EXP 24
43631: AND
43632: IFFALSE 43644
// un := Brown ;
43634: LD_ADDR_VAR 0 1
43638: PUSH
43639: LD_EXP 24
43643: ST_TO_ADDR
// if un then
43644: LD_VAR 0 1
43648: IFFALSE 43674
// begin Say ( un , D7-Sol1-1 ) ;
43650: LD_VAR 0 1
43654: PPUSH
43655: LD_STRING D7-Sol1-1
43657: PPUSH
43658: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
43662: LD_EXP 18
43666: PPUSH
43667: LD_STRING D7-JMM-1
43669: PPUSH
43670: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
43674: LD_EXP 43
43678: PPUSH
43679: LD_STRING D7-Ar1-1
43681: PPUSH
43682: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
43686: LD_EXP 18
43690: PPUSH
43691: LD_STRING D7-JMM-2
43693: PPUSH
43694: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
43698: LD_EXP 43
43702: PPUSH
43703: LD_STRING D7-Ar1-2
43705: PPUSH
43706: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
43710: LD_EXP 18
43714: PPUSH
43715: LD_STRING D7-JMM-3
43717: PPUSH
43718: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
43722: LD_EXP 43
43726: PPUSH
43727: LD_STRING D7-Ar1-3
43729: PPUSH
43730: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
43734: LD_EXP 18
43738: PPUSH
43739: LD_STRING D7-JMM-4
43741: PPUSH
43742: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
43746: LD_EXP 43
43750: PPUSH
43751: LD_STRING D7-Ar1-4
43753: PPUSH
43754: CALL_OW 94
// InGameOff ;
43758: CALL_OW 9
// DialogueOff ;
43762: CALL_OW 7
// case Query ( QCameras ) of 1 :
43766: LD_STRING QCameras
43768: PPUSH
43769: CALL_OW 97
43773: PUSH
43774: LD_INT 1
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43782
43780: GO 43785
43782: POP
// ; 2 :
43783: GO 43799
43785: LD_INT 2
43787: DOUBLE
43788: EQUAL
43789: IFTRUE 43793
43791: GO 43798
43793: POP
// exit ; end ;
43794: GO 44380
43796: GO 43799
43798: POP
// ChangeMissionObjectives ( MCar ) ;
43799: LD_STRING MCar
43801: PPUSH
43802: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
43806: LD_INT 124
43808: PPUSH
43809: LD_INT 90
43811: PPUSH
43812: LD_INT 1
43814: PPUSH
43815: LD_INT 6
43817: NEG
43818: PPUSH
43819: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
43823: LD_INT 124
43825: PPUSH
43826: LD_INT 90
43828: PPUSH
43829: LD_INT 1
43831: PPUSH
43832: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
43836: LD_INT 12
43838: PPUSH
43839: LD_INT 1
43841: PPUSH
43842: CALL_OW 424
// wait ( 3 ) ;
43846: LD_INT 3
43848: PPUSH
43849: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
43853: LD_INT 124
43855: PPUSH
43856: LD_INT 90
43858: PPUSH
43859: CALL_OW 86
// cargo := false ;
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
43871: LD_INT 35
43873: PPUSH
43874: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
43878: LD_ADDR_VAR 0 3
43882: PUSH
43883: LD_INT 12
43885: PPUSH
43886: LD_INT 32
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 34
43898: PUSH
43899: LD_INT 32
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 58
43908: PUSH
43909: EMPTY
43910: LIST
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: PPUSH
43917: CALL_OW 70
43921: ST_TO_ADDR
// until cargo ;
43922: LD_VAR 0 3
43926: IFFALSE 43871
// cargo := cargo [ 1 ] ;
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_VAR 0 3
43937: PUSH
43938: LD_INT 1
43940: ARRAY
43941: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
43942: LD_VAR 0 3
43946: PPUSH
43947: LD_INT 5
43949: PPUSH
43950: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
43954: LD_INT 12
43956: PPUSH
43957: LD_INT 0
43959: PPUSH
43960: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
43964: LD_EXP 43
43968: PPUSH
43969: LD_INT 11
43971: PPUSH
43972: LD_INT 0
43974: PPUSH
43975: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
43979: LD_EXP 44
43983: PPUSH
43984: LD_INT 11
43986: PPUSH
43987: LD_INT 0
43989: PPUSH
43990: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
43994: LD_EXP 43
43998: PUSH
43999: LD_EXP 44
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PPUSH
44008: LD_INT 12
44010: PPUSH
44011: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
44015: LD_EXP 43
44019: PPUSH
44020: LD_VAR 0 3
44024: PPUSH
44025: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44029: LD_EXP 43
44033: PUSH
44034: LD_EXP 44
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PPUSH
44043: LD_INT 209
44045: PPUSH
44046: LD_INT 178
44048: PPUSH
44049: CALL_OW 171
// while ( true ) do
44053: LD_INT 1
44055: IFFALSE 44209
// begin wait ( 0 0$1 ) ;
44057: LD_INT 35
44059: PPUSH
44060: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
44064: LD_EXP 43
44068: PPUSH
44069: CALL_OW 314
44073: NOT
44074: PUSH
44075: LD_EXP 44
44079: PPUSH
44080: CALL_OW 314
44084: NOT
44085: OR
44086: IFFALSE 44112
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44088: LD_EXP 43
44092: PUSH
44093: LD_EXP 44
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PPUSH
44102: LD_INT 209
44104: PPUSH
44105: LD_INT 178
44107: PPUSH
44108: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
44112: LD_EXP 43
44116: PPUSH
44117: LD_INT 10
44119: PPUSH
44120: CALL_OW 308
44124: IFFALSE 44135
// RemoveUnit ( ar_mechanic ) ;
44126: LD_EXP 43
44130: PPUSH
44131: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
44135: LD_EXP 44
44139: PPUSH
44140: LD_INT 10
44142: PPUSH
44143: CALL_OW 308
44147: IFFALSE 44158
// RemoveUnit ( ar_mechanic_friend ) ;
44149: LD_EXP 44
44153: PPUSH
44154: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
44158: LD_VAR 0 3
44162: PPUSH
44163: LD_INT 10
44165: PPUSH
44166: CALL_OW 308
44170: IFFALSE 44181
// RemoveUnit ( cargo ) ;
44172: LD_VAR 0 3
44176: PPUSH
44177: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
44181: LD_EXP 43
44185: PPUSH
44186: CALL_OW 300
44190: NOT
44191: PUSH
44192: LD_EXP 44
44196: PPUSH
44197: CALL_OW 300
44201: NOT
44202: AND
44203: IFFALSE 44207
// break ;
44205: GO 44209
// end ;
44207: GO 44053
// wait ( 0 0$2 ) ;
44209: LD_INT 70
44211: PPUSH
44212: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
44216: LD_EXP 43
44220: PPUSH
44221: LD_STRING D7a-Ar1-1
44223: PPUSH
44224: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
44228: LD_ADDR_VAR 0 4
44232: PUSH
44233: LD_INT 129
44235: PUSH
44236: LD_INT 10
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 103
44245: PUSH
44246: LD_INT 6
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 148
44255: PUSH
44256: LD_INT 47
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 155
44265: PUSH
44266: LD_INT 16
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// if Difficulty = 1 then
44279: LD_OWVAR 67
44283: PUSH
44284: LD_INT 1
44286: EQUAL
44287: IFFALSE 44324
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
44289: LD_ADDR_VAR 0 4
44293: PUSH
44294: LD_VAR 0 4
44298: PUSH
44299: LD_INT 78
44301: PUSH
44302: LD_INT 7
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 104
44311: PUSH
44312: LD_INT 43
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: ADD
44323: ST_TO_ADDR
// for i in tmp do
44324: LD_ADDR_VAR 0 2
44328: PUSH
44329: LD_VAR 0 4
44333: PUSH
44334: FOR_IN
44335: IFFALSE 44368
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
44337: LD_VAR 0 2
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: PPUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: PPUSH
44355: LD_INT 1
44357: PPUSH
44358: LD_INT 9
44360: NEG
44361: PPUSH
44362: CALL_OW 330
44366: GO 44334
44368: POP
44369: POP
// CenterOnXY ( 129 , 10 ) ;
44370: LD_INT 129
44372: PPUSH
44373: LD_INT 10
44375: PPUSH
44376: CALL_OW 84
// end ;
44380: PPOPN 4
44382: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
44383: LD_EXP 14
44387: PUSH
44388: LD_INT 21000
44390: MINUS
44391: PUSH
44392: LD_OWVAR 1
44396: LESSEQUAL
44397: IFFALSE 44437
44399: GO 44401
44401: DISABLE
// begin powell_warn := true ;
44402: LD_ADDR_EXP 15
44406: PUSH
44407: LD_INT 1
44409: ST_TO_ADDR
// DialogueOn ;
44410: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
44414: LD_EXP 27
44418: PPUSH
44419: LD_STRING D9-Pow-1
44421: PPUSH
44422: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
44426: LD_INT 10
44428: PPUSH
44429: CALL_OW 68
// DialogueOff ;
44433: CALL_OW 7
// end ;
44437: END
// every 0 0$1 trigger game_time <= tick do
44438: LD_EXP 14
44442: PUSH
44443: LD_OWVAR 1
44447: LESSEQUAL
44448: IFFALSE 44487
44450: GO 44452
44452: DISABLE
// begin DialogueOn ;
44453: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
44457: LD_EXP 27
44461: PPUSH
44462: LD_STRING D9a-Pow-1
44464: PPUSH
44465: CALL_OW 94
// dwait ( 0 0$2 ) ;
44469: LD_INT 70
44471: PPUSH
44472: CALL_OW 68
// DialogueOff ;
44476: CALL_OW 7
// YouLost ( Command ) ;
44480: LD_STRING Command
44482: PPUSH
44483: CALL_OW 104
// end ;
44487: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
44488: LD_EXP 18
44492: PPUSH
44493: CALL_OW 301
44497: PUSH
44498: LD_EXP 5
44502: AND
44503: IFFALSE 44515
44505: GO 44507
44507: DISABLE
// YouLost ( JMM ) ;
44508: LD_STRING JMM
44510: PPUSH
44511: CALL_OW 104
44515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
44516: LD_INT 22
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 30
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PPUSH
44540: CALL_OW 69
44544: PUSH
44545: LD_INT 0
44547: EQUAL
44548: PUSH
44549: LD_EXP 18
44553: PPUSH
44554: CALL_OW 302
44558: AND
44559: IFFALSE 45300
44561: GO 44563
44563: DISABLE
// begin DialogueOn ;
44564: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
44568: LD_OWVAR 1
44572: PUSH
44573: LD_INT 126000
44575: PUSH
44576: LD_INT 105000
44578: PUSH
44579: LD_INT 94500
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: PUSH
44587: LD_OWVAR 67
44591: ARRAY
44592: LESS
44593: IFFALSE 44607
// AddMedal ( Time1 , 2 ) else
44595: LD_STRING Time1
44597: PPUSH
44598: LD_INT 2
44600: PPUSH
44601: CALL_OW 101
44605: GO 44637
// if not powell_warn then
44607: LD_EXP 15
44611: NOT
44612: IFFALSE 44626
// AddMedal ( Time1 , 1 ) else
44614: LD_STRING Time1
44616: PPUSH
44617: LD_INT 1
44619: PPUSH
44620: CALL_OW 101
44624: GO 44637
// AddMedal ( Time1 , - 1 ) ;
44626: LD_STRING Time1
44628: PPUSH
44629: LD_INT 1
44631: NEG
44632: PPUSH
44633: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
44637: LD_EXP 16
44641: PUSH
44642: LD_INT 5
44644: PUSH
44645: LD_INT 4
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: PUSH
44656: LD_OWVAR 67
44660: ARRAY
44661: GREATEREQUAL
44662: IFFALSE 44677
// AddMedal ( Destroy , - 2 ) else
44664: LD_STRING Destroy
44666: PPUSH
44667: LD_INT 2
44669: NEG
44670: PPUSH
44671: CALL_OW 101
44675: GO 44794
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
44677: LD_INT 22
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 21
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 50
44699: PUSH
44700: EMPTY
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: PPUSH
44708: CALL_OW 69
44712: PUSH
44713: LD_INT 20
44715: GREATEREQUAL
44716: IFFALSE 44731
// AddMedal ( Destroy , - 1 ) else
44718: LD_STRING Destroy
44720: PPUSH
44721: LD_INT 1
44723: NEG
44724: PPUSH
44725: CALL_OW 101
44729: GO 44794
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
44731: LD_INT 22
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 21
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 50
44753: PUSH
44754: EMPTY
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: PPUSH
44762: CALL_OW 69
44766: PUSH
44767: LD_INT 10
44769: GREATEREQUAL
44770: IFFALSE 44784
// AddMedal ( Destroy , 1 ) else
44772: LD_STRING Destroy
44774: PPUSH
44775: LD_INT 1
44777: PPUSH
44778: CALL_OW 101
44782: GO 44794
// AddMedal ( Destroy , 2 ) ;
44784: LD_STRING Destroy
44786: PPUSH
44787: LD_INT 2
44789: PPUSH
44790: CALL_OW 101
// if artifact_get then
44794: LD_EXP 12
44798: IFFALSE 44812
// AddMedal ( Artefact , 1 ) else
44800: LD_STRING Artefact
44802: PPUSH
44803: LD_INT 1
44805: PPUSH
44806: CALL_OW 101
44810: GO 44823
// AddMedal ( Artefact , - 1 ) ;
44812: LD_STRING Artefact
44814: PPUSH
44815: LD_INT 1
44817: NEG
44818: PPUSH
44819: CALL_OW 101
// GiveMedals ( MAIN ) ;
44823: LD_STRING MAIN
44825: PPUSH
44826: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44830: LD_INT 22
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 25
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 25
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 25
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 25
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PPUSH
44894: CALL_OW 69
44898: PPUSH
44899: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
44903: LD_EXP 32
44907: PUSH
44908: LD_EXP 19
44912: PUSH
44913: LD_EXP 20
44917: PUSH
44918: LD_EXP 21
44922: PUSH
44923: LD_EXP 22
44927: PUSH
44928: LD_EXP 23
44932: PUSH
44933: LD_EXP 24
44937: PUSH
44938: LD_EXP 25
44942: PUSH
44943: LD_EXP 26
44947: PUSH
44948: LD_EXP 28
44952: PUSH
44953: LD_EXP 29
44957: PUSH
44958: LD_EXP 30
44962: PUSH
44963: LD_EXP 31
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: DIFF
44982: PPUSH
44983: LD_STRING 11c_others
44985: PPUSH
44986: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44990: LD_EXP 18
44994: PPUSH
44995: LD_EXP 3
44999: PUSH
45000: LD_STRING JMM
45002: STR
45003: PPUSH
45004: CALL_OW 38
// if Lisa then
45008: LD_EXP 19
45012: IFFALSE 45032
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45014: LD_EXP 19
45018: PPUSH
45019: LD_EXP 3
45023: PUSH
45024: LD_STRING Lisa
45026: STR
45027: PPUSH
45028: CALL_OW 38
// if Donaldson then
45032: LD_EXP 20
45036: IFFALSE 45056
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45038: LD_EXP 20
45042: PPUSH
45043: LD_EXP 3
45047: PUSH
45048: LD_STRING Donaldson
45050: STR
45051: PPUSH
45052: CALL_OW 38
// if Bobby then
45056: LD_EXP 21
45060: IFFALSE 45080
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45062: LD_EXP 21
45066: PPUSH
45067: LD_EXP 3
45071: PUSH
45072: LD_STRING Bobby
45074: STR
45075: PPUSH
45076: CALL_OW 38
// if Cyrus then
45080: LD_EXP 22
45084: IFFALSE 45104
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45086: LD_EXP 22
45090: PPUSH
45091: LD_EXP 3
45095: PUSH
45096: LD_STRING Cyrus
45098: STR
45099: PPUSH
45100: CALL_OW 38
// if Denis then
45104: LD_EXP 23
45108: IFFALSE 45128
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
45110: LD_EXP 23
45114: PPUSH
45115: LD_EXP 3
45119: PUSH
45120: LD_STRING Denis
45122: STR
45123: PPUSH
45124: CALL_OW 38
// if Brown then
45128: LD_EXP 24
45132: IFFALSE 45152
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
45134: LD_EXP 24
45138: PPUSH
45139: LD_EXP 3
45143: PUSH
45144: LD_STRING Brown
45146: STR
45147: PPUSH
45148: CALL_OW 38
// if Gladstone then
45152: LD_EXP 25
45156: IFFALSE 45176
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45158: LD_EXP 25
45162: PPUSH
45163: LD_EXP 3
45167: PUSH
45168: LD_STRING Gladstone
45170: STR
45171: PPUSH
45172: CALL_OW 38
// if Houten then
45176: LD_EXP 26
45180: IFFALSE 45200
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
45182: LD_EXP 26
45186: PPUSH
45187: LD_EXP 3
45191: PUSH
45192: LD_STRING Houten
45194: STR
45195: PPUSH
45196: CALL_OW 38
// if Cornel then
45200: LD_EXP 28
45204: IFFALSE 45224
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
45206: LD_EXP 28
45210: PPUSH
45211: LD_EXP 3
45215: PUSH
45216: LD_STRING Cornel
45218: STR
45219: PPUSH
45220: CALL_OW 38
// if Gary then
45224: LD_EXP 29
45228: IFFALSE 45248
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
45230: LD_EXP 29
45234: PPUSH
45235: LD_EXP 3
45239: PUSH
45240: LD_STRING Gary
45242: STR
45243: PPUSH
45244: CALL_OW 38
// if Frank then
45248: LD_EXP 30
45252: IFFALSE 45272
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
45254: LD_EXP 30
45258: PPUSH
45259: LD_EXP 3
45263: PUSH
45264: LD_STRING Frank
45266: STR
45267: PPUSH
45268: CALL_OW 38
// if Kikuchi then
45272: LD_EXP 31
45276: IFFALSE 45296
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45278: LD_EXP 31
45282: PPUSH
45283: LD_EXP 3
45287: PUSH
45288: LD_STRING Kikuchi
45290: STR
45291: PPUSH
45292: CALL_OW 38
// YouWin ;
45296: CALL_OW 103
// end ; end_of_file
45300: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
45301: LD_INT 0
45303: PPUSH
// skirmish := false ;
45304: LD_ADDR_EXP 45
45308: PUSH
45309: LD_INT 0
45311: ST_TO_ADDR
// mc_bases := [ ] ;
45312: LD_ADDR_EXP 46
45316: PUSH
45317: EMPTY
45318: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
45319: LD_ADDR_EXP 47
45323: PUSH
45324: EMPTY
45325: ST_TO_ADDR
// mc_building_repairs := [ ] ;
45326: LD_ADDR_EXP 48
45330: PUSH
45331: EMPTY
45332: ST_TO_ADDR
// mc_need_heal := [ ] ;
45333: LD_ADDR_EXP 49
45337: PUSH
45338: EMPTY
45339: ST_TO_ADDR
// mc_healers := [ ] ;
45340: LD_ADDR_EXP 50
45344: PUSH
45345: EMPTY
45346: ST_TO_ADDR
// mc_build_list := [ ] ;
45347: LD_ADDR_EXP 51
45351: PUSH
45352: EMPTY
45353: ST_TO_ADDR
// mc_builders := [ ] ;
45354: LD_ADDR_EXP 52
45358: PUSH
45359: EMPTY
45360: ST_TO_ADDR
// mc_construct_list := [ ] ;
45361: LD_ADDR_EXP 53
45365: PUSH
45366: EMPTY
45367: ST_TO_ADDR
// mc_turret_list := [ ] ;
45368: LD_ADDR_EXP 54
45372: PUSH
45373: EMPTY
45374: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
45375: LD_ADDR_EXP 55
45379: PUSH
45380: EMPTY
45381: ST_TO_ADDR
// mc_miners := [ ] ;
45382: LD_ADDR_EXP 57
45386: PUSH
45387: EMPTY
45388: ST_TO_ADDR
// mc_mines := [ ] ;
45389: LD_ADDR_EXP 56
45393: PUSH
45394: EMPTY
45395: ST_TO_ADDR
// mc_minefields := [ ] ;
45396: LD_ADDR_EXP 58
45400: PUSH
45401: EMPTY
45402: ST_TO_ADDR
// mc_crates := [ ] ;
45403: LD_ADDR_EXP 59
45407: PUSH
45408: EMPTY
45409: ST_TO_ADDR
// mc_crates_collector := [ ] ;
45410: LD_ADDR_EXP 60
45414: PUSH
45415: EMPTY
45416: ST_TO_ADDR
// mc_vehicles := [ ] ;
45417: LD_ADDR_EXP 61
45421: PUSH
45422: EMPTY
45423: ST_TO_ADDR
// mc_attack := [ ] ;
45424: LD_ADDR_EXP 62
45428: PUSH
45429: EMPTY
45430: ST_TO_ADDR
// mc_produce := [ ] ;
45431: LD_ADDR_EXP 63
45435: PUSH
45436: EMPTY
45437: ST_TO_ADDR
// mc_defender := [ ] ;
45438: LD_ADDR_EXP 64
45442: PUSH
45443: EMPTY
45444: ST_TO_ADDR
// mc_parking := [ ] ;
45445: LD_ADDR_EXP 66
45449: PUSH
45450: EMPTY
45451: ST_TO_ADDR
// mc_scan := [ ] ;
45452: LD_ADDR_EXP 65
45456: PUSH
45457: EMPTY
45458: ST_TO_ADDR
// end ;
45459: LD_VAR 0 1
45463: RET
// export function RunMacro ; var i ; begin
45464: LD_INT 0
45466: PPUSH
45467: PPUSH
// for i = 1 to mc_bases do
45468: LD_ADDR_VAR 0 2
45472: PUSH
45473: DOUBLE
45474: LD_INT 1
45476: DEC
45477: ST_TO_ADDR
45478: LD_EXP 46
45482: PUSH
45483: FOR_TO
45484: IFFALSE 45972
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
45486: LD_ADDR_EXP 47
45490: PUSH
45491: LD_EXP 47
45495: PPUSH
45496: LD_VAR 0 2
45500: PPUSH
45501: EMPTY
45502: PPUSH
45503: CALL_OW 1
45507: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
45508: LD_ADDR_EXP 48
45512: PUSH
45513: LD_EXP 48
45517: PPUSH
45518: LD_VAR 0 2
45522: PPUSH
45523: EMPTY
45524: PPUSH
45525: CALL_OW 1
45529: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
45530: LD_ADDR_EXP 49
45534: PUSH
45535: LD_EXP 49
45539: PPUSH
45540: LD_VAR 0 2
45544: PPUSH
45545: EMPTY
45546: PPUSH
45547: CALL_OW 1
45551: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
45552: LD_ADDR_EXP 50
45556: PUSH
45557: LD_EXP 50
45561: PPUSH
45562: LD_VAR 0 2
45566: PPUSH
45567: EMPTY
45568: PUSH
45569: EMPTY
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PPUSH
45575: CALL_OW 1
45579: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
45580: LD_ADDR_EXP 51
45584: PUSH
45585: LD_EXP 51
45589: PPUSH
45590: LD_VAR 0 2
45594: PPUSH
45595: EMPTY
45596: PPUSH
45597: CALL_OW 1
45601: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
45602: LD_ADDR_EXP 53
45606: PUSH
45607: LD_EXP 53
45611: PPUSH
45612: LD_VAR 0 2
45616: PPUSH
45617: EMPTY
45618: PPUSH
45619: CALL_OW 1
45623: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
45624: LD_ADDR_EXP 54
45628: PUSH
45629: LD_EXP 54
45633: PPUSH
45634: LD_VAR 0 2
45638: PPUSH
45639: EMPTY
45640: PPUSH
45641: CALL_OW 1
45645: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
45646: LD_ADDR_EXP 55
45650: PUSH
45651: LD_EXP 55
45655: PPUSH
45656: LD_VAR 0 2
45660: PPUSH
45661: EMPTY
45662: PPUSH
45663: CALL_OW 1
45667: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
45668: LD_ADDR_EXP 55
45672: PUSH
45673: LD_EXP 55
45677: PPUSH
45678: LD_VAR 0 2
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PPUSH
45690: EMPTY
45691: PPUSH
45692: CALL 3152 0 3
45696: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
45697: LD_ADDR_EXP 55
45701: PUSH
45702: LD_EXP 55
45706: PPUSH
45707: LD_VAR 0 2
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PPUSH
45719: EMPTY
45720: PPUSH
45721: CALL 3152 0 3
45725: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
45726: LD_ADDR_EXP 57
45730: PUSH
45731: LD_EXP 57
45735: PPUSH
45736: LD_VAR 0 2
45740: PPUSH
45741: EMPTY
45742: PPUSH
45743: CALL_OW 1
45747: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
45748: LD_ADDR_EXP 56
45752: PUSH
45753: LD_EXP 56
45757: PPUSH
45758: LD_VAR 0 2
45762: PPUSH
45763: EMPTY
45764: PPUSH
45765: CALL_OW 1
45769: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
45770: LD_ADDR_EXP 58
45774: PUSH
45775: LD_EXP 58
45779: PPUSH
45780: LD_VAR 0 2
45784: PPUSH
45785: EMPTY
45786: PPUSH
45787: CALL_OW 1
45791: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
45792: LD_ADDR_EXP 59
45796: PUSH
45797: LD_EXP 59
45801: PPUSH
45802: LD_VAR 0 2
45806: PPUSH
45807: EMPTY
45808: PPUSH
45809: CALL_OW 1
45813: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
45814: LD_ADDR_EXP 60
45818: PUSH
45819: LD_EXP 60
45823: PPUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: EMPTY
45830: PPUSH
45831: CALL_OW 1
45835: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
45836: LD_ADDR_EXP 61
45840: PUSH
45841: LD_EXP 61
45845: PPUSH
45846: LD_VAR 0 2
45850: PPUSH
45851: EMPTY
45852: PPUSH
45853: CALL_OW 1
45857: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45858: LD_ADDR_EXP 62
45862: PUSH
45863: LD_EXP 62
45867: PPUSH
45868: LD_VAR 0 2
45872: PPUSH
45873: EMPTY
45874: PPUSH
45875: CALL_OW 1
45879: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
45880: LD_ADDR_EXP 63
45884: PUSH
45885: LD_EXP 63
45889: PPUSH
45890: LD_VAR 0 2
45894: PPUSH
45895: EMPTY
45896: PPUSH
45897: CALL_OW 1
45901: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
45902: LD_ADDR_EXP 64
45906: PUSH
45907: LD_EXP 64
45911: PPUSH
45912: LD_VAR 0 2
45916: PPUSH
45917: EMPTY
45918: PPUSH
45919: CALL_OW 1
45923: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
45924: LD_ADDR_EXP 66
45928: PUSH
45929: LD_EXP 66
45933: PPUSH
45934: LD_VAR 0 2
45938: PPUSH
45939: LD_INT 0
45941: PPUSH
45942: CALL_OW 1
45946: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
45947: LD_ADDR_EXP 65
45951: PUSH
45952: LD_EXP 65
45956: PPUSH
45957: LD_VAR 0 2
45961: PPUSH
45962: LD_INT 0
45964: PPUSH
45965: CALL_OW 1
45969: ST_TO_ADDR
// end ;
45970: GO 45483
45972: POP
45973: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
45974: LD_INT 1
45976: PPUSH
45977: LD_INT 8
45979: PUSH
45980: LD_INT 10
45982: PUSH
45983: LD_INT 12
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: PUSH
45991: LD_OWVAR 67
45995: ARRAY
45996: PPUSH
45997: LD_INT 3
45999: PPUSH
46000: CALL 53545 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
46004: LD_INT 2
46006: PPUSH
46007: LD_INT 6
46009: PUSH
46010: LD_INT 8
46012: PUSH
46013: LD_INT 9
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: PUSH
46021: LD_OWVAR 67
46025: ARRAY
46026: PPUSH
46027: LD_INT 2
46029: PPUSH
46030: CALL 53545 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
46034: LD_INT 3
46036: PPUSH
46037: LD_INT 6
46039: PUSH
46040: LD_INT 7
46042: PUSH
46043: LD_INT 9
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: LD_OWVAR 67
46055: ARRAY
46056: PPUSH
46057: LD_INT 1
46059: PPUSH
46060: CALL 53545 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
46064: LD_ADDR_EXP 66
46068: PUSH
46069: LD_INT 20
46071: PUSH
46072: LD_INT 21
46074: PUSH
46075: LD_INT 22
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
// for i = 1 to mc_bases do
46083: LD_ADDR_VAR 0 2
46087: PUSH
46088: DOUBLE
46089: LD_INT 1
46091: DEC
46092: ST_TO_ADDR
46093: LD_EXP 46
46097: PUSH
46098: FOR_TO
46099: IFFALSE 46123
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
46101: LD_VAR 0 2
46105: PPUSH
46106: LD_EXP 40
46110: PUSH
46111: LD_VAR 0 2
46115: ARRAY
46116: PPUSH
46117: CALL 53890 0 2
46121: GO 46098
46123: POP
46124: POP
// skirmish := true ;
46125: LD_ADDR_EXP 45
46129: PUSH
46130: LD_INT 1
46132: ST_TO_ADDR
// end ;
46133: LD_VAR 0 1
46137: RET
// every 0 0$01 trigger skirmish do
46138: LD_EXP 45
46142: IFFALSE 46226
46144: GO 46146
46146: DISABLE
// begin enable ;
46147: ENABLE
// MC_CheckBuildings ( ) ;
46148: CALL 46587 0 0
// MC_CheckPeopleLife ( ) ;
46152: CALL 46805 0 0
// RaiseSailEvent ( 103 ) ;
46156: LD_INT 103
46158: PPUSH
46159: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
46163: LD_INT 104
46165: PPUSH
46166: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
46170: LD_INT 105
46172: PPUSH
46173: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
46177: LD_INT 106
46179: PPUSH
46180: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
46184: LD_INT 107
46186: PPUSH
46187: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
46191: LD_INT 108
46193: PPUSH
46194: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
46198: LD_INT 109
46200: PPUSH
46201: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
46205: LD_INT 110
46207: PPUSH
46208: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
46212: LD_INT 111
46214: PPUSH
46215: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
46219: LD_INT 200
46221: PPUSH
46222: CALL_OW 427
// end ;
46226: END
// every 10 trigger skirmish do var i ;
46227: LD_EXP 45
46231: IFFALSE 46330
46233: GO 46235
46235: DISABLE
46236: LD_INT 0
46238: PPUSH
// begin enable ;
46239: ENABLE
// if not mc_bases then
46240: LD_EXP 46
46244: NOT
46245: IFFALSE 46249
// exit ;
46247: GO 46330
// for i = 1 to mc_bases do
46249: LD_ADDR_VAR 0 1
46253: PUSH
46254: DOUBLE
46255: LD_INT 1
46257: DEC
46258: ST_TO_ADDR
46259: LD_EXP 46
46263: PUSH
46264: FOR_TO
46265: IFFALSE 46328
// if mc_mines [ i ] and mc_miners [ i ] then
46267: LD_EXP 56
46271: PUSH
46272: LD_VAR 0 1
46276: ARRAY
46277: PUSH
46278: LD_EXP 57
46282: PUSH
46283: LD_VAR 0 1
46287: ARRAY
46288: AND
46289: IFFALSE 46326
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
46291: LD_EXP 57
46295: PUSH
46296: LD_VAR 0 1
46300: ARRAY
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: PPUSH
46306: CALL_OW 255
46310: PPUSH
46311: LD_EXP 56
46315: PUSH
46316: LD_VAR 0 1
46320: ARRAY
46321: PPUSH
46322: CALL 33381 0 2
46326: GO 46264
46328: POP
46329: POP
// end ;
46330: PPOPN 1
46332: END
// on SailEvent ( event ) do begin if event = 101 then
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 101
46340: EQUAL
46341: IFFALSE 46347
// MC_RepairBuildings ( ) ;
46343: CALL 47351 0 0
// if event = 102 then
46347: LD_VAR 0 1
46351: PUSH
46352: LD_INT 102
46354: EQUAL
46355: IFFALSE 46361
// MC_Heal ( ) ;
46357: CALL 47745 0 0
// if event = 103 then
46361: LD_VAR 0 1
46365: PUSH
46366: LD_INT 103
46368: EQUAL
46369: IFFALSE 46375
// MC_Build ( ) ;
46371: CALL 48130 0 0
// if event = 104 then
46375: LD_VAR 0 1
46379: PUSH
46380: LD_INT 104
46382: EQUAL
46383: IFFALSE 46389
// MC_TurretWeapon ( ) ;
46385: CALL 48898 0 0
// if event = 105 then
46389: LD_VAR 0 1
46393: PUSH
46394: LD_INT 105
46396: EQUAL
46397: IFFALSE 46403
// MC_TurretCrew ( ) ;
46399: CALL 49217 0 0
// if event = 106 then
46403: LD_VAR 0 1
46407: PUSH
46408: LD_INT 106
46410: EQUAL
46411: IFFALSE 46417
// MC_PlantMines ( ) ;
46413: CALL 50010 0 0
// if event = 107 then
46417: LD_VAR 0 1
46421: PUSH
46422: LD_INT 107
46424: EQUAL
46425: IFFALSE 46431
// MC_CollectCrates ( ) ;
46427: CALL 50899 0 0
// if event = 108 then
46431: LD_VAR 0 1
46435: PUSH
46436: LD_INT 108
46438: EQUAL
46439: IFFALSE 46445
// MC_LinkRemoteControl ( ) ;
46441: CALL 51696 0 0
// if event = 109 then
46445: LD_VAR 0 1
46449: PUSH
46450: LD_INT 109
46452: EQUAL
46453: IFFALSE 46459
// MC_ProduceVehicle ( ) ;
46455: CALL 51865 0 0
// if event = 110 then
46459: LD_VAR 0 1
46463: PUSH
46464: LD_INT 110
46466: EQUAL
46467: IFFALSE 46473
// MC_SendAttack ( ) ;
46469: CALL 52253 0 0
// if event = 111 then
46473: LD_VAR 0 1
46477: PUSH
46478: LD_INT 111
46480: EQUAL
46481: IFFALSE 46487
// MC_Defend ( ) ;
46483: CALL 52361 0 0
// if event = 200 then
46487: LD_VAR 0 1
46491: PUSH
46492: LD_INT 200
46494: EQUAL
46495: IFFALSE 46501
// MC_Idle ( ) ;
46497: CALL 53296 0 0
// end ;
46501: PPOPN 1
46503: END
// export function MC_Reset ( base , tag ) ; var i ; begin
46504: LD_INT 0
46506: PPUSH
46507: PPUSH
// if not mc_bases [ base ] or not tag then
46508: LD_EXP 46
46512: PUSH
46513: LD_VAR 0 1
46517: ARRAY
46518: NOT
46519: PUSH
46520: LD_VAR 0 2
46524: NOT
46525: OR
46526: IFFALSE 46530
// exit ;
46528: GO 46582
// for i in mc_bases [ base ] do
46530: LD_ADDR_VAR 0 4
46534: PUSH
46535: LD_EXP 46
46539: PUSH
46540: LD_VAR 0 1
46544: ARRAY
46545: PUSH
46546: FOR_IN
46547: IFFALSE 46580
// if GetTag ( i ) = tag then
46549: LD_VAR 0 4
46553: PPUSH
46554: CALL_OW 110
46558: PUSH
46559: LD_VAR 0 2
46563: EQUAL
46564: IFFALSE 46578
// SetTag ( i , 0 ) ;
46566: LD_VAR 0 4
46570: PPUSH
46571: LD_INT 0
46573: PPUSH
46574: CALL_OW 109
46578: GO 46546
46580: POP
46581: POP
// end ;
46582: LD_VAR 0 3
46586: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
46587: LD_INT 0
46589: PPUSH
46590: PPUSH
46591: PPUSH
46592: PPUSH
// if not mc_bases then
46593: LD_EXP 46
46597: NOT
46598: IFFALSE 46602
// exit ;
46600: GO 46800
// for i = 1 to mc_bases do
46602: LD_ADDR_VAR 0 2
46606: PUSH
46607: DOUBLE
46608: LD_INT 1
46610: DEC
46611: ST_TO_ADDR
46612: LD_EXP 46
46616: PUSH
46617: FOR_TO
46618: IFFALSE 46785
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
46620: LD_ADDR_VAR 0 4
46624: PUSH
46625: LD_EXP 46
46629: PUSH
46630: LD_VAR 0 2
46634: ARRAY
46635: PPUSH
46636: LD_INT 21
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 24
46651: PUSH
46652: LD_INT 1000
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PPUSH
46667: CALL_OW 72
46671: ST_TO_ADDR
// if not tmp then
46672: LD_VAR 0 4
46676: NOT
46677: IFFALSE 46703
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46679: LD_ADDR_EXP 47
46683: PUSH
46684: LD_EXP 47
46688: PPUSH
46689: LD_VAR 0 2
46693: PPUSH
46694: EMPTY
46695: PPUSH
46696: CALL_OW 1
46700: ST_TO_ADDR
// continue ;
46701: GO 46617
// end ; for j in tmp do
46703: LD_ADDR_VAR 0 3
46707: PUSH
46708: LD_VAR 0 4
46712: PUSH
46713: FOR_IN
46714: IFFALSE 46781
// if not j in mc_building_need_repair [ i ] then
46716: LD_VAR 0 3
46720: PUSH
46721: LD_EXP 47
46725: PUSH
46726: LD_VAR 0 2
46730: ARRAY
46731: IN
46732: NOT
46733: IFFALSE 46779
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
46735: LD_ADDR_EXP 47
46739: PUSH
46740: LD_EXP 47
46744: PPUSH
46745: LD_VAR 0 2
46749: PUSH
46750: LD_EXP 47
46754: PUSH
46755: LD_VAR 0 2
46759: ARRAY
46760: PUSH
46761: LD_INT 1
46763: PLUS
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PPUSH
46769: LD_VAR 0 3
46773: PPUSH
46774: CALL 3152 0 3
46778: ST_TO_ADDR
46779: GO 46713
46781: POP
46782: POP
// end ;
46783: GO 46617
46785: POP
46786: POP
// if mc_building_need_repair then
46787: LD_EXP 47
46791: IFFALSE 46800
// RaiseSailEvent ( 101 ) ;
46793: LD_INT 101
46795: PPUSH
46796: CALL_OW 427
// end ;
46800: LD_VAR 0 1
46804: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
46805: LD_INT 0
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
// if not mc_bases then
46814: LD_EXP 46
46818: NOT
46819: IFFALSE 46823
// exit ;
46821: GO 47346
// for i = 1 to mc_bases do
46823: LD_ADDR_VAR 0 2
46827: PUSH
46828: DOUBLE
46829: LD_INT 1
46831: DEC
46832: ST_TO_ADDR
46833: LD_EXP 46
46837: PUSH
46838: FOR_TO
46839: IFFALSE 47337
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
46841: LD_ADDR_VAR 0 5
46845: PUSH
46846: LD_EXP 46
46850: PUSH
46851: LD_VAR 0 2
46855: ARRAY
46856: PPUSH
46857: LD_INT 21
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 54
46875: PUSH
46876: EMPTY
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 24
46888: PUSH
46889: LD_INT 700
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PPUSH
46909: CALL_OW 72
46913: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
46914: LD_ADDR_VAR 0 6
46918: PUSH
46919: LD_EXP 46
46923: PUSH
46924: LD_VAR 0 2
46928: ARRAY
46929: PPUSH
46930: LD_INT 21
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: LD_INT 54
46948: PUSH
46949: EMPTY
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 24
46961: PUSH
46962: LD_INT 250
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PPUSH
46982: CALL_OW 72
46986: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
46987: LD_ADDR_VAR 0 7
46991: PUSH
46992: LD_VAR 0 5
46996: PUSH
46997: LD_VAR 0 6
47001: DIFF
47002: ST_TO_ADDR
// if not need_heal_1 then
47003: LD_VAR 0 6
47007: NOT
47008: IFFALSE 47041
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
47010: LD_ADDR_EXP 49
47014: PUSH
47015: LD_EXP 49
47019: PPUSH
47020: LD_VAR 0 2
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PPUSH
47032: EMPTY
47033: PPUSH
47034: CALL 3152 0 3
47038: ST_TO_ADDR
47039: GO 47073
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
47041: LD_ADDR_EXP 49
47045: PUSH
47046: LD_EXP 49
47050: PPUSH
47051: LD_VAR 0 2
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PPUSH
47063: LD_VAR 0 6
47067: PPUSH
47068: CALL 3152 0 3
47072: ST_TO_ADDR
// if not need_heal_2 then
47073: LD_VAR 0 7
47077: NOT
47078: IFFALSE 47111
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
47080: LD_ADDR_EXP 49
47084: PUSH
47085: LD_EXP 49
47089: PPUSH
47090: LD_VAR 0 2
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PPUSH
47102: EMPTY
47103: PPUSH
47104: CALL 3152 0 3
47108: ST_TO_ADDR
47109: GO 47143
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47111: LD_ADDR_EXP 49
47115: PUSH
47116: LD_EXP 49
47120: PPUSH
47121: LD_VAR 0 2
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PPUSH
47133: LD_VAR 0 7
47137: PPUSH
47138: CALL 3152 0 3
47142: ST_TO_ADDR
// if need_heal_2 then
47143: LD_VAR 0 7
47147: IFFALSE 47319
// for j in need_heal_2 do
47149: LD_ADDR_VAR 0 3
47153: PUSH
47154: LD_VAR 0 7
47158: PUSH
47159: FOR_IN
47160: IFFALSE 47317
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
47162: LD_ADDR_VAR 0 5
47166: PUSH
47167: LD_EXP 46
47171: PUSH
47172: LD_VAR 0 2
47176: ARRAY
47177: PPUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 30
47183: PUSH
47184: LD_INT 6
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 30
47193: PUSH
47194: LD_INT 7
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 30
47203: PUSH
47204: LD_INT 8
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 30
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 30
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 25
47233: PUSH
47234: LD_INT 4
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: PPUSH
47250: CALL_OW 72
47254: ST_TO_ADDR
// if tmp then
47255: LD_VAR 0 5
47259: IFFALSE 47315
// begin k := NearestUnitToUnit ( tmp , j ) ;
47261: LD_ADDR_VAR 0 4
47265: PUSH
47266: LD_VAR 0 5
47270: PPUSH
47271: LD_VAR 0 3
47275: PPUSH
47276: CALL_OW 74
47280: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
47281: LD_VAR 0 3
47285: PPUSH
47286: LD_VAR 0 4
47290: PPUSH
47291: CALL_OW 296
47295: PUSH
47296: LD_INT 7
47298: GREATER
47299: IFFALSE 47315
// ComMoveUnit ( j , k ) ;
47301: LD_VAR 0 3
47305: PPUSH
47306: LD_VAR 0 4
47310: PPUSH
47311: CALL_OW 112
// end ; end ;
47315: GO 47159
47317: POP
47318: POP
// if not need_heal_1 and not need_heal_2 then
47319: LD_VAR 0 6
47323: NOT
47324: PUSH
47325: LD_VAR 0 7
47329: NOT
47330: AND
47331: IFFALSE 47335
// continue ;
47333: GO 46838
// end ;
47335: GO 46838
47337: POP
47338: POP
// RaiseSailEvent ( 102 ) ;
47339: LD_INT 102
47341: PPUSH
47342: CALL_OW 427
// end ;
47346: LD_VAR 0 1
47350: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
47351: LD_INT 0
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
// if not mc_bases then
47358: LD_EXP 46
47362: NOT
47363: IFFALSE 47367
// exit ;
47365: GO 47740
// for i = 1 to mc_bases do
47367: LD_ADDR_VAR 0 2
47371: PUSH
47372: DOUBLE
47373: LD_INT 1
47375: DEC
47376: ST_TO_ADDR
47377: LD_EXP 46
47381: PUSH
47382: FOR_TO
47383: IFFALSE 47738
// begin if not mc_building_need_repair [ i ] then
47385: LD_EXP 47
47389: PUSH
47390: LD_VAR 0 2
47394: ARRAY
47395: NOT
47396: IFFALSE 47434
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
47398: LD_ADDR_EXP 48
47402: PUSH
47403: LD_EXP 48
47407: PPUSH
47408: LD_VAR 0 2
47412: PPUSH
47413: EMPTY
47414: PPUSH
47415: CALL_OW 1
47419: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
47420: LD_VAR 0 2
47424: PPUSH
47425: LD_INT 101
47427: PPUSH
47428: CALL 46504 0 2
// continue ;
47432: GO 47382
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
47434: LD_ADDR_EXP 52
47438: PUSH
47439: LD_EXP 52
47443: PPUSH
47444: LD_VAR 0 2
47448: PPUSH
47449: EMPTY
47450: PPUSH
47451: CALL_OW 1
47455: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47456: LD_VAR 0 2
47460: PPUSH
47461: LD_INT 103
47463: PPUSH
47464: CALL 46504 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
47468: LD_ADDR_VAR 0 5
47472: PUSH
47473: LD_EXP 46
47477: PUSH
47478: LD_VAR 0 2
47482: ARRAY
47483: PPUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 25
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 25
47499: PUSH
47500: LD_INT 16
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: PPUSH
47515: CALL_OW 72
47519: ST_TO_ADDR
// if not tmp then
47520: LD_VAR 0 5
47524: NOT
47525: IFFALSE 47529
// continue ;
47527: GO 47382
// for j in tmp do
47529: LD_ADDR_VAR 0 3
47533: PUSH
47534: LD_VAR 0 5
47538: PUSH
47539: FOR_IN
47540: IFFALSE 47734
// begin if mc_need_heal [ i ] then
47542: LD_EXP 49
47546: PUSH
47547: LD_VAR 0 2
47551: ARRAY
47552: IFFALSE 47600
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
47554: LD_VAR 0 3
47558: PUSH
47559: LD_EXP 49
47563: PUSH
47564: LD_VAR 0 2
47568: ARRAY
47569: PUSH
47570: LD_INT 1
47572: ARRAY
47573: IN
47574: PUSH
47575: LD_VAR 0 3
47579: PUSH
47580: LD_EXP 49
47584: PUSH
47585: LD_VAR 0 2
47589: ARRAY
47590: PUSH
47591: LD_INT 2
47593: ARRAY
47594: IN
47595: OR
47596: IFFALSE 47600
// continue ;
47598: GO 47539
// if IsInUnit ( j ) then
47600: LD_VAR 0 3
47604: PPUSH
47605: CALL_OW 310
47609: IFFALSE 47620
// ComExitBuilding ( j ) ;
47611: LD_VAR 0 3
47615: PPUSH
47616: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
47620: LD_VAR 0 3
47624: PUSH
47625: LD_EXP 48
47629: PUSH
47630: LD_VAR 0 2
47634: ARRAY
47635: IN
47636: NOT
47637: IFFALSE 47695
// begin SetTag ( j , 101 ) ;
47639: LD_VAR 0 3
47643: PPUSH
47644: LD_INT 101
47646: PPUSH
47647: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
47651: LD_ADDR_EXP 48
47655: PUSH
47656: LD_EXP 48
47660: PPUSH
47661: LD_VAR 0 2
47665: PUSH
47666: LD_EXP 48
47670: PUSH
47671: LD_VAR 0 2
47675: ARRAY
47676: PUSH
47677: LD_INT 1
47679: PLUS
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PPUSH
47685: LD_VAR 0 3
47689: PPUSH
47690: CALL 3152 0 3
47694: ST_TO_ADDR
// end ; Wait ( 3 ) ;
47695: LD_INT 3
47697: PPUSH
47698: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
47702: LD_VAR 0 3
47706: PPUSH
47707: LD_EXP 47
47711: PUSH
47712: LD_VAR 0 2
47716: ARRAY
47717: PPUSH
47718: LD_VAR 0 3
47722: PPUSH
47723: CALL_OW 74
47727: PPUSH
47728: CALL_OW 130
// end ;
47732: GO 47539
47734: POP
47735: POP
// end ;
47736: GO 47382
47738: POP
47739: POP
// end ;
47740: LD_VAR 0 1
47744: RET
// export function MC_Heal ; var i , j , tmp ; begin
47745: LD_INT 0
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
// if not mc_bases then
47751: LD_EXP 46
47755: NOT
47756: IFFALSE 47760
// exit ;
47758: GO 48125
// for i = 1 to mc_bases do
47760: LD_ADDR_VAR 0 2
47764: PUSH
47765: DOUBLE
47766: LD_INT 1
47768: DEC
47769: ST_TO_ADDR
47770: LD_EXP 46
47774: PUSH
47775: FOR_TO
47776: IFFALSE 48123
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
47778: LD_EXP 49
47782: PUSH
47783: LD_VAR 0 2
47787: ARRAY
47788: PUSH
47789: LD_INT 1
47791: ARRAY
47792: NOT
47793: PUSH
47794: LD_EXP 49
47798: PUSH
47799: LD_VAR 0 2
47803: ARRAY
47804: PUSH
47805: LD_INT 2
47807: ARRAY
47808: NOT
47809: AND
47810: IFFALSE 47848
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
47812: LD_ADDR_EXP 50
47816: PUSH
47817: LD_EXP 50
47821: PPUSH
47822: LD_VAR 0 2
47826: PPUSH
47827: EMPTY
47828: PPUSH
47829: CALL_OW 1
47833: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
47834: LD_VAR 0 2
47838: PPUSH
47839: LD_INT 102
47841: PPUSH
47842: CALL 46504 0 2
// continue ;
47846: GO 47775
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
47848: LD_ADDR_VAR 0 4
47852: PUSH
47853: LD_EXP 46
47857: PUSH
47858: LD_VAR 0 2
47862: ARRAY
47863: PPUSH
47864: LD_INT 25
47866: PUSH
47867: LD_INT 4
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PPUSH
47874: CALL_OW 72
47878: ST_TO_ADDR
// if not tmp then
47879: LD_VAR 0 4
47883: NOT
47884: IFFALSE 47888
// continue ;
47886: GO 47775
// for j in tmp do
47888: LD_ADDR_VAR 0 3
47892: PUSH
47893: LD_VAR 0 4
47897: PUSH
47898: FOR_IN
47899: IFFALSE 48119
// begin if IsInUnit ( j ) then
47901: LD_VAR 0 3
47905: PPUSH
47906: CALL_OW 310
47910: IFFALSE 47921
// ComExitBuilding ( j ) ;
47912: LD_VAR 0 3
47916: PPUSH
47917: CALL_OW 122
// if not j in mc_healers [ i ] then
47921: LD_VAR 0 3
47925: PUSH
47926: LD_EXP 50
47930: PUSH
47931: LD_VAR 0 2
47935: ARRAY
47936: IN
47937: NOT
47938: IFFALSE 47984
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
47940: LD_ADDR_EXP 50
47944: PUSH
47945: LD_EXP 50
47949: PPUSH
47950: LD_VAR 0 2
47954: PUSH
47955: LD_EXP 50
47959: PUSH
47960: LD_VAR 0 2
47964: ARRAY
47965: PUSH
47966: LD_INT 1
47968: PLUS
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PPUSH
47974: LD_VAR 0 3
47978: PPUSH
47979: CALL 3152 0 3
47983: ST_TO_ADDR
// if not GetTag ( j ) then
47984: LD_VAR 0 3
47988: PPUSH
47989: CALL_OW 110
47993: NOT
47994: IFFALSE 48008
// SetTag ( j , 102 ) ;
47996: LD_VAR 0 3
48000: PPUSH
48001: LD_INT 102
48003: PPUSH
48004: CALL_OW 109
// Wait ( 3 ) ;
48008: LD_INT 3
48010: PPUSH
48011: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48015: LD_EXP 49
48019: PUSH
48020: LD_VAR 0 2
48024: ARRAY
48025: PUSH
48026: LD_INT 1
48028: ARRAY
48029: IFFALSE 48061
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48031: LD_VAR 0 3
48035: PPUSH
48036: LD_EXP 49
48040: PUSH
48041: LD_VAR 0 2
48045: ARRAY
48046: PUSH
48047: LD_INT 1
48049: ARRAY
48050: PUSH
48051: LD_INT 1
48053: ARRAY
48054: PPUSH
48055: CALL_OW 128
48059: GO 48117
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48061: LD_VAR 0 3
48065: PPUSH
48066: CALL_OW 314
48070: NOT
48071: PUSH
48072: LD_EXP 49
48076: PUSH
48077: LD_VAR 0 2
48081: ARRAY
48082: PUSH
48083: LD_INT 2
48085: ARRAY
48086: AND
48087: IFFALSE 48117
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48089: LD_VAR 0 3
48093: PPUSH
48094: LD_EXP 49
48098: PUSH
48099: LD_VAR 0 2
48103: ARRAY
48104: PUSH
48105: LD_INT 2
48107: ARRAY
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PPUSH
48113: CALL_OW 128
// end ;
48117: GO 47898
48119: POP
48120: POP
// end ;
48121: GO 47775
48123: POP
48124: POP
// end ;
48125: LD_VAR 0 1
48129: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
48130: LD_INT 0
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
// if not mc_bases then
48136: LD_EXP 46
48140: NOT
48141: IFFALSE 48145
// exit ;
48143: GO 48893
// for i = 1 to mc_bases do
48145: LD_ADDR_VAR 0 2
48149: PUSH
48150: DOUBLE
48151: LD_INT 1
48153: DEC
48154: ST_TO_ADDR
48155: LD_EXP 46
48159: PUSH
48160: FOR_TO
48161: IFFALSE 48891
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
48163: LD_EXP 51
48167: PUSH
48168: LD_VAR 0 2
48172: ARRAY
48173: NOT
48174: PUSH
48175: LD_EXP 53
48179: PUSH
48180: LD_VAR 0 2
48184: ARRAY
48185: NOT
48186: AND
48187: IFFALSE 48225
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
48189: LD_ADDR_EXP 52
48193: PUSH
48194: LD_EXP 52
48198: PPUSH
48199: LD_VAR 0 2
48203: PPUSH
48204: EMPTY
48205: PPUSH
48206: CALL_OW 1
48210: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48211: LD_VAR 0 2
48215: PPUSH
48216: LD_INT 103
48218: PPUSH
48219: CALL 46504 0 2
// continue ;
48223: GO 48160
// end ; if mc_construct_list [ i ] then
48225: LD_EXP 53
48229: PUSH
48230: LD_VAR 0 2
48234: ARRAY
48235: IFFALSE 48440
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48237: LD_ADDR_VAR 0 4
48241: PUSH
48242: LD_EXP 46
48246: PUSH
48247: LD_VAR 0 2
48251: ARRAY
48252: PPUSH
48253: LD_INT 25
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PPUSH
48263: CALL_OW 72
48267: PUSH
48268: LD_EXP 48
48272: PUSH
48273: LD_VAR 0 2
48277: ARRAY
48278: DIFF
48279: ST_TO_ADDR
// if not tmp then
48280: LD_VAR 0 4
48284: NOT
48285: IFFALSE 48289
// continue ;
48287: GO 48160
// for j in tmp do
48289: LD_ADDR_VAR 0 3
48293: PUSH
48294: LD_VAR 0 4
48298: PUSH
48299: FOR_IN
48300: IFFALSE 48436
// begin if not mc_builders [ i ] then
48302: LD_EXP 52
48306: PUSH
48307: LD_VAR 0 2
48311: ARRAY
48312: NOT
48313: IFFALSE 48371
// begin SetTag ( j , 103 ) ;
48315: LD_VAR 0 3
48319: PPUSH
48320: LD_INT 103
48322: PPUSH
48323: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
48327: LD_ADDR_EXP 52
48331: PUSH
48332: LD_EXP 52
48336: PPUSH
48337: LD_VAR 0 2
48341: PUSH
48342: LD_EXP 52
48346: PUSH
48347: LD_VAR 0 2
48351: ARRAY
48352: PUSH
48353: LD_INT 1
48355: PLUS
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PPUSH
48361: LD_VAR 0 3
48365: PPUSH
48366: CALL 3152 0 3
48370: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
48371: LD_VAR 0 3
48375: PPUSH
48376: CALL_OW 310
48380: IFFALSE 48391
// ComExitBuilding ( j ) ;
48382: LD_VAR 0 3
48386: PPUSH
48387: CALL_OW 122
// wait ( 3 ) ;
48391: LD_INT 3
48393: PPUSH
48394: CALL_OW 67
// if not HasTask ( j ) then
48398: LD_VAR 0 3
48402: PPUSH
48403: CALL_OW 314
48407: NOT
48408: IFFALSE 48434
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
48410: LD_VAR 0 3
48414: PPUSH
48415: LD_EXP 53
48419: PUSH
48420: LD_VAR 0 2
48424: ARRAY
48425: PUSH
48426: LD_INT 1
48428: ARRAY
48429: PPUSH
48430: CALL 5552 0 2
// end ;
48434: GO 48299
48436: POP
48437: POP
// end else
48438: GO 48889
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48440: LD_EXP 51
48444: PUSH
48445: LD_VAR 0 2
48449: ARRAY
48450: PUSH
48451: LD_EXP 46
48455: PUSH
48456: LD_VAR 0 2
48460: ARRAY
48461: PPUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 30
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 30
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: PPUSH
48490: CALL_OW 72
48494: AND
48495: IFFALSE 48889
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
48497: LD_EXP 46
48501: PUSH
48502: LD_VAR 0 2
48506: ARRAY
48507: PPUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 30
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 30
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: PPUSH
48536: CALL_OW 72
48540: PUSH
48541: LD_INT 1
48543: ARRAY
48544: PPUSH
48545: LD_EXP 51
48549: PUSH
48550: LD_VAR 0 2
48554: ARRAY
48555: PUSH
48556: LD_INT 1
48558: ARRAY
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: LD_EXP 51
48568: PUSH
48569: LD_VAR 0 2
48573: ARRAY
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PUSH
48579: LD_INT 2
48581: ARRAY
48582: PPUSH
48583: LD_EXP 51
48587: PUSH
48588: LD_VAR 0 2
48592: ARRAY
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PUSH
48598: LD_INT 3
48600: ARRAY
48601: PPUSH
48602: LD_EXP 51
48606: PUSH
48607: LD_VAR 0 2
48611: ARRAY
48612: PUSH
48613: LD_INT 1
48615: ARRAY
48616: PUSH
48617: LD_INT 4
48619: ARRAY
48620: PPUSH
48621: CALL 8708 0 5
48625: IFFALSE 48889
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48627: LD_ADDR_VAR 0 4
48631: PUSH
48632: LD_EXP 46
48636: PUSH
48637: LD_VAR 0 2
48641: ARRAY
48642: PPUSH
48643: LD_INT 25
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PPUSH
48653: CALL_OW 72
48657: PUSH
48658: LD_EXP 48
48662: PUSH
48663: LD_VAR 0 2
48667: ARRAY
48668: DIFF
48669: ST_TO_ADDR
// if not tmp then
48670: LD_VAR 0 4
48674: NOT
48675: IFFALSE 48679
// continue ;
48677: GO 48160
// for j in tmp do
48679: LD_ADDR_VAR 0 3
48683: PUSH
48684: LD_VAR 0 4
48688: PUSH
48689: FOR_IN
48690: IFFALSE 48887
// begin if not mc_builders [ i ] then
48692: LD_EXP 52
48696: PUSH
48697: LD_VAR 0 2
48701: ARRAY
48702: NOT
48703: IFFALSE 48761
// begin SetTag ( j , 103 ) ;
48705: LD_VAR 0 3
48709: PPUSH
48710: LD_INT 103
48712: PPUSH
48713: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
48717: LD_ADDR_EXP 52
48721: PUSH
48722: LD_EXP 52
48726: PPUSH
48727: LD_VAR 0 2
48731: PUSH
48732: LD_EXP 52
48736: PUSH
48737: LD_VAR 0 2
48741: ARRAY
48742: PUSH
48743: LD_INT 1
48745: PLUS
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PPUSH
48751: LD_VAR 0 3
48755: PPUSH
48756: CALL 3152 0 3
48760: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
48761: LD_VAR 0 3
48765: PPUSH
48766: CALL_OW 310
48770: IFFALSE 48781
// ComExitBuilding ( j ) ;
48772: LD_VAR 0 3
48776: PPUSH
48777: CALL_OW 122
// wait ( 3 ) ;
48781: LD_INT 3
48783: PPUSH
48784: CALL_OW 67
// if not HasTask ( j ) then
48788: LD_VAR 0 3
48792: PPUSH
48793: CALL_OW 314
48797: NOT
48798: IFFALSE 48885
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_EXP 51
48809: PUSH
48810: LD_VAR 0 2
48814: ARRAY
48815: PUSH
48816: LD_INT 1
48818: ARRAY
48819: PUSH
48820: LD_INT 1
48822: ARRAY
48823: PPUSH
48824: LD_EXP 51
48828: PUSH
48829: LD_VAR 0 2
48833: ARRAY
48834: PUSH
48835: LD_INT 1
48837: ARRAY
48838: PUSH
48839: LD_INT 2
48841: ARRAY
48842: PPUSH
48843: LD_EXP 51
48847: PUSH
48848: LD_VAR 0 2
48852: ARRAY
48853: PUSH
48854: LD_INT 1
48856: ARRAY
48857: PUSH
48858: LD_INT 3
48860: ARRAY
48861: PPUSH
48862: LD_EXP 51
48866: PUSH
48867: LD_VAR 0 2
48871: ARRAY
48872: PUSH
48873: LD_INT 1
48875: ARRAY
48876: PUSH
48877: LD_INT 4
48879: ARRAY
48880: PPUSH
48881: CALL_OW 145
// end ;
48885: GO 48689
48887: POP
48888: POP
// end ; end ;
48889: GO 48160
48891: POP
48892: POP
// end ;
48893: LD_VAR 0 1
48897: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
48898: LD_INT 0
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
// if not mc_bases then
48907: LD_EXP 46
48911: NOT
48912: IFFALSE 48916
// exit ;
48914: GO 49212
// for i = 1 to mc_bases do
48916: LD_ADDR_VAR 0 2
48920: PUSH
48921: DOUBLE
48922: LD_INT 1
48924: DEC
48925: ST_TO_ADDR
48926: LD_EXP 46
48930: PUSH
48931: FOR_TO
48932: IFFALSE 49210
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
48934: LD_EXP 54
48938: PUSH
48939: LD_VAR 0 2
48943: ARRAY
48944: NOT
48945: PUSH
48946: LD_EXP 46
48950: PUSH
48951: LD_VAR 0 2
48955: ARRAY
48956: PPUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PPUSH
48967: CALL_OW 72
48971: NOT
48972: OR
48973: IFFALSE 48977
// continue ;
48975: GO 48931
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
48977: LD_EXP 54
48981: PUSH
48982: LD_VAR 0 2
48986: ARRAY
48987: PUSH
48988: LD_INT 1
48990: ARRAY
48991: PPUSH
48992: CALL_OW 269
48996: IFFALSE 49062
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
48998: LD_ADDR_VAR 0 4
49002: PUSH
49003: LD_EXP 54
49007: PUSH
49008: LD_VAR 0 2
49012: ARRAY
49013: PPUSH
49014: LD_INT 1
49016: PPUSH
49017: CALL_OW 3
49021: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
49022: LD_ADDR_EXP 54
49026: PUSH
49027: LD_EXP 54
49031: PPUSH
49032: LD_VAR 0 2
49036: PPUSH
49037: LD_VAR 0 4
49041: PPUSH
49042: CALL_OW 1
49046: ST_TO_ADDR
// if not mc_turret_list [ i ] then
49047: LD_EXP 54
49051: PUSH
49052: LD_VAR 0 2
49056: ARRAY
49057: NOT
49058: IFFALSE 49062
// continue ;
49060: GO 48931
// end ; busy := false ;
49062: LD_ADDR_VAR 0 6
49066: PUSH
49067: LD_INT 0
49069: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
49070: LD_ADDR_VAR 0 4
49074: PUSH
49075: LD_EXP 46
49079: PUSH
49080: LD_VAR 0 2
49084: ARRAY
49085: PPUSH
49086: LD_INT 30
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PPUSH
49096: CALL_OW 72
49100: ST_TO_ADDR
// for j in tmp do
49101: LD_ADDR_VAR 0 3
49105: PUSH
49106: LD_VAR 0 4
49110: PUSH
49111: FOR_IN
49112: IFFALSE 49140
// if not BuildingStatus ( j ) = bs_idle then
49114: LD_VAR 0 3
49118: PPUSH
49119: CALL_OW 461
49123: PUSH
49124: LD_INT 2
49126: EQUAL
49127: NOT
49128: IFFALSE 49138
// busy := true ;
49130: LD_ADDR_VAR 0 6
49134: PUSH
49135: LD_INT 1
49137: ST_TO_ADDR
49138: GO 49111
49140: POP
49141: POP
// if busy then
49142: LD_VAR 0 6
49146: IFFALSE 49150
// continue ;
49148: GO 48931
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
49150: LD_ADDR_VAR 0 7
49154: PUSH
49155: LD_EXP 54
49159: PUSH
49160: LD_VAR 0 2
49164: ARRAY
49165: PUSH
49166: LD_INT 1
49168: ARRAY
49169: PPUSH
49170: CALL 7113 0 1
49174: ST_TO_ADDR
// if not weapon then
49175: LD_VAR 0 7
49179: NOT
49180: IFFALSE 49184
// continue ;
49182: GO 48931
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
49184: LD_EXP 54
49188: PUSH
49189: LD_VAR 0 2
49193: ARRAY
49194: PUSH
49195: LD_INT 1
49197: ARRAY
49198: PPUSH
49199: LD_VAR 0 7
49203: PPUSH
49204: CALL_OW 148
// end ;
49208: GO 48931
49210: POP
49211: POP
// end ;
49212: LD_VAR 0 1
49216: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
49217: LD_INT 0
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
// if not mc_bases then
49226: LD_EXP 46
49230: NOT
49231: IFFALSE 49235
// exit ;
49233: GO 50005
// for i = 1 to mc_bases do
49235: LD_ADDR_VAR 0 2
49239: PUSH
49240: DOUBLE
49241: LD_INT 1
49243: DEC
49244: ST_TO_ADDR
49245: LD_EXP 46
49249: PUSH
49250: FOR_TO
49251: IFFALSE 50003
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
49253: LD_ADDR_VAR 0 7
49257: PUSH
49258: LD_EXP 46
49262: PUSH
49263: LD_VAR 0 2
49267: ARRAY
49268: PPUSH
49269: LD_INT 24
49271: PUSH
49272: LD_INT 375
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 30
49284: PUSH
49285: LD_INT 32
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 30
49294: PUSH
49295: LD_INT 31
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 58
49309: PUSH
49310: EMPTY
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: PPUSH
49318: CALL_OW 72
49322: ST_TO_ADDR
// if not x then
49323: LD_VAR 0 7
49327: NOT
49328: IFFALSE 49332
// continue ;
49330: GO 49250
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
49332: LD_ADDR_EXP 55
49336: PUSH
49337: LD_EXP 55
49341: PPUSH
49342: LD_VAR 0 2
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PPUSH
49354: LD_VAR 0 7
49358: PPUSH
49359: CALL 3152 0 3
49363: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
49364: LD_EXP 55
49368: PUSH
49369: LD_VAR 0 2
49373: ARRAY
49374: NOT
49375: PUSH
49376: LD_EXP 55
49380: PUSH
49381: LD_VAR 0 2
49385: ARRAY
49386: PUSH
49387: LD_INT 1
49389: ARRAY
49390: NOT
49391: OR
49392: IFFALSE 49396
// continue ;
49394: GO 49250
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
49396: LD_EXP 55
49400: PUSH
49401: LD_VAR 0 2
49405: ARRAY
49406: PUSH
49407: LD_INT 1
49409: ARRAY
49410: PUSH
49411: LD_INT 1
49413: ARRAY
49414: PPUSH
49415: CALL_OW 313
49419: PUSH
49420: LD_INT 0
49422: EQUAL
49423: IFFALSE 50001
// if not mc_empty_turret_list [ i ] [ 2 ] then
49425: LD_EXP 55
49429: PUSH
49430: LD_VAR 0 2
49434: ARRAY
49435: PUSH
49436: LD_INT 2
49438: ARRAY
49439: NOT
49440: IFFALSE 49699
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
49442: LD_ADDR_VAR 0 6
49446: PUSH
49447: LD_EXP 46
49451: PUSH
49452: LD_VAR 0 2
49456: ARRAY
49457: PUSH
49458: LD_EXP 62
49462: PUSH
49463: LD_VAR 0 2
49467: ARRAY
49468: DIFF
49469: PPUSH
49470: LD_INT 25
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: LD_INT 54
49485: PUSH
49486: EMPTY
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PPUSH
49497: CALL_OW 72
49501: ST_TO_ADDR
// if tmp2 then
49502: LD_VAR 0 6
49506: IFFALSE 49548
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
49508: LD_ADDR_EXP 55
49512: PUSH
49513: LD_EXP 55
49517: PPUSH
49518: LD_VAR 0 2
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PPUSH
49530: LD_VAR 0 6
49534: PUSH
49535: LD_INT 1
49537: ARRAY
49538: PPUSH
49539: CALL 3152 0 3
49543: ST_TO_ADDR
// break ;
49544: GO 50003
// end else
49546: GO 49697
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49548: LD_ADDR_VAR 0 5
49552: PUSH
49553: LD_EXP 46
49557: PUSH
49558: LD_VAR 0 2
49562: ARRAY
49563: PPUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 30
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 30
49579: PUSH
49580: LD_INT 5
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: PPUSH
49592: CALL_OW 72
49596: ST_TO_ADDR
// if not tmp then
49597: LD_VAR 0 5
49601: NOT
49602: IFFALSE 49606
// continue ;
49604: GO 49250
// for j in tmp do
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_VAR 0 5
49615: PUSH
49616: FOR_IN
49617: IFFALSE 49695
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_VAR 0 3
49628: PPUSH
49629: CALL_OW 313
49633: PPUSH
49634: LD_INT 25
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PPUSH
49644: CALL_OW 72
49648: ST_TO_ADDR
// if t then
49649: LD_VAR 0 4
49653: IFFALSE 49693
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
49655: LD_ADDR_EXP 55
49659: PUSH
49660: LD_EXP 55
49664: PPUSH
49665: LD_VAR 0 2
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PPUSH
49677: LD_VAR 0 4
49681: PUSH
49682: LD_INT 1
49684: ARRAY
49685: PPUSH
49686: CALL 3152 0 3
49690: ST_TO_ADDR
// break ;
49691: GO 49695
// end ; end ;
49693: GO 49616
49695: POP
49696: POP
// end ; end else
49697: GO 50001
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
49699: LD_EXP 55
49703: PUSH
49704: LD_VAR 0 2
49708: ARRAY
49709: PUSH
49710: LD_INT 2
49712: ARRAY
49713: PUSH
49714: LD_INT 1
49716: ARRAY
49717: PPUSH
49718: CALL_OW 301
49722: IFFALSE 49755
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49724: LD_ADDR_EXP 55
49728: PUSH
49729: LD_EXP 55
49733: PPUSH
49734: LD_VAR 0 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PPUSH
49746: EMPTY
49747: PPUSH
49748: CALL 3152 0 3
49752: ST_TO_ADDR
// break ;
49753: GO 50003
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
49755: LD_EXP 55
49759: PUSH
49760: LD_VAR 0 2
49764: ARRAY
49765: PUSH
49766: LD_INT 2
49768: ARRAY
49769: PUSH
49770: LD_INT 1
49772: ARRAY
49773: PPUSH
49774: CALL_OW 314
49778: NOT
49779: PUSH
49780: LD_EXP 55
49784: PUSH
49785: LD_VAR 0 2
49789: ARRAY
49790: PUSH
49791: LD_INT 2
49793: ARRAY
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PUSH
49799: LD_EXP 55
49803: PUSH
49804: LD_VAR 0 2
49808: ARRAY
49809: PUSH
49810: LD_INT 1
49812: ARRAY
49813: PUSH
49814: LD_INT 1
49816: ARRAY
49817: PPUSH
49818: CALL_OW 313
49822: IN
49823: NOT
49824: AND
49825: IFFALSE 50001
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
49827: LD_EXP 55
49831: PUSH
49832: LD_VAR 0 2
49836: ARRAY
49837: PUSH
49838: LD_INT 2
49840: ARRAY
49841: PUSH
49842: LD_INT 1
49844: ARRAY
49845: PPUSH
49846: CALL_OW 310
49850: IFFALSE 49875
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49852: LD_EXP 55
49856: PUSH
49857: LD_VAR 0 2
49861: ARRAY
49862: PUSH
49863: LD_INT 2
49865: ARRAY
49866: PUSH
49867: LD_INT 1
49869: ARRAY
49870: PPUSH
49871: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
49875: LD_EXP 55
49879: PUSH
49880: LD_VAR 0 2
49884: ARRAY
49885: PUSH
49886: LD_INT 2
49888: ARRAY
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: PPUSH
49894: LD_EXP 55
49898: PUSH
49899: LD_VAR 0 2
49903: ARRAY
49904: PUSH
49905: LD_INT 1
49907: ARRAY
49908: PUSH
49909: LD_INT 1
49911: ARRAY
49912: PPUSH
49913: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
49917: LD_INT 35
49919: PPUSH
49920: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
49924: LD_EXP 55
49928: PUSH
49929: LD_VAR 0 2
49933: ARRAY
49934: PUSH
49935: LD_INT 2
49937: ARRAY
49938: NOT
49939: IFFALSE 49943
// break ;
49941: GO 49968
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49943: LD_EXP 55
49947: PUSH
49948: LD_VAR 0 2
49952: ARRAY
49953: PUSH
49954: LD_INT 2
49956: ARRAY
49957: PUSH
49958: LD_INT 1
49960: ARRAY
49961: PPUSH
49962: CALL_OW 310
49966: IFFALSE 49917
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49968: LD_ADDR_EXP 55
49972: PUSH
49973: LD_EXP 55
49977: PPUSH
49978: LD_VAR 0 2
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PPUSH
49990: EMPTY
49991: PPUSH
49992: CALL 3152 0 3
49996: ST_TO_ADDR
// exit ;
49997: POP
49998: POP
49999: GO 50005
// end ; end ; end ;
50001: GO 49250
50003: POP
50004: POP
// end ;
50005: LD_VAR 0 1
50009: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
50010: LD_INT 0
50012: PPUSH
50013: PPUSH
50014: PPUSH
50015: PPUSH
50016: PPUSH
50017: PPUSH
// if not mc_bases then
50018: LD_EXP 46
50022: NOT
50023: IFFALSE 50027
// exit ;
50025: GO 50894
// for i = 1 to mc_bases do
50027: LD_ADDR_VAR 0 2
50031: PUSH
50032: DOUBLE
50033: LD_INT 1
50035: DEC
50036: ST_TO_ADDR
50037: LD_EXP 46
50041: PUSH
50042: FOR_TO
50043: IFFALSE 50892
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
50045: LD_EXP 56
50049: PUSH
50050: LD_VAR 0 2
50054: ARRAY
50055: NOT
50056: PUSH
50057: LD_EXP 56
50061: PUSH
50062: LD_VAR 0 2
50066: ARRAY
50067: PUSH
50068: LD_EXP 57
50072: PUSH
50073: LD_VAR 0 2
50077: ARRAY
50078: EQUAL
50079: OR
50080: IFFALSE 50084
// continue ;
50082: GO 50042
// if mc_miners [ i ] then
50084: LD_EXP 57
50088: PUSH
50089: LD_VAR 0 2
50093: ARRAY
50094: IFFALSE 50579
// for j = 1 to mc_miners [ i ] do
50096: LD_ADDR_VAR 0 3
50100: PUSH
50101: DOUBLE
50102: LD_INT 1
50104: DEC
50105: ST_TO_ADDR
50106: LD_EXP 57
50110: PUSH
50111: LD_VAR 0 2
50115: ARRAY
50116: PUSH
50117: FOR_TO
50118: IFFALSE 50577
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
50120: LD_EXP 57
50124: PUSH
50125: LD_VAR 0 2
50129: ARRAY
50130: PUSH
50131: LD_VAR 0 3
50135: ARRAY
50136: PPUSH
50137: CALL_OW 301
50141: IFFALSE 50204
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: LD_EXP 57
50152: PUSH
50153: LD_VAR 0 2
50157: ARRAY
50158: PUSH
50159: LD_EXP 57
50163: PUSH
50164: LD_VAR 0 2
50168: ARRAY
50169: PUSH
50170: LD_VAR 0 3
50174: ARRAY
50175: DIFF
50176: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
50177: LD_ADDR_EXP 57
50181: PUSH
50182: LD_EXP 57
50186: PPUSH
50187: LD_VAR 0 2
50191: PPUSH
50192: LD_VAR 0 5
50196: PPUSH
50197: CALL_OW 1
50201: ST_TO_ADDR
// continue ;
50202: GO 50117
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
50204: LD_EXP 57
50208: PUSH
50209: LD_VAR 0 2
50213: ARRAY
50214: PUSH
50215: LD_VAR 0 3
50219: ARRAY
50220: PPUSH
50221: CALL_OW 257
50225: PUSH
50226: LD_INT 1
50228: EQUAL
50229: PUSH
50230: LD_EXP 57
50234: PUSH
50235: LD_VAR 0 2
50239: ARRAY
50240: PUSH
50241: LD_VAR 0 3
50245: ARRAY
50246: PPUSH
50247: CALL_OW 459
50251: NOT
50252: AND
50253: PUSH
50254: LD_EXP 57
50258: PUSH
50259: LD_VAR 0 2
50263: ARRAY
50264: PUSH
50265: LD_VAR 0 3
50269: ARRAY
50270: PPUSH
50271: CALL_OW 255
50275: PPUSH
50276: LD_EXP 56
50280: PUSH
50281: LD_VAR 0 2
50285: ARRAY
50286: PUSH
50287: LD_VAR 0 3
50291: ARRAY
50292: PUSH
50293: LD_INT 1
50295: ARRAY
50296: PPUSH
50297: LD_EXP 56
50301: PUSH
50302: LD_VAR 0 2
50306: ARRAY
50307: PUSH
50308: LD_VAR 0 3
50312: ARRAY
50313: PUSH
50314: LD_INT 2
50316: ARRAY
50317: PPUSH
50318: LD_INT 12
50320: PPUSH
50321: CALL 3646 0 4
50325: PUSH
50326: LD_INT 4
50328: ARRAY
50329: PUSH
50330: LD_INT 0
50332: EQUAL
50333: AND
50334: IFFALSE 50575
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
50336: LD_EXP 57
50340: PUSH
50341: LD_VAR 0 2
50345: ARRAY
50346: PUSH
50347: LD_VAR 0 3
50351: ARRAY
50352: PPUSH
50353: CALL_OW 310
50357: IFFALSE 50380
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
50359: LD_EXP 57
50363: PUSH
50364: LD_VAR 0 2
50368: ARRAY
50369: PUSH
50370: LD_VAR 0 3
50374: ARRAY
50375: PPUSH
50376: CALL_OW 122
// wait ( 3 ) ;
50380: LD_INT 3
50382: PPUSH
50383: CALL_OW 67
// k := rand ( 1 , mc_mines [ i ] ) ;
50387: LD_ADDR_VAR 0 4
50391: PUSH
50392: LD_INT 1
50394: PPUSH
50395: LD_EXP 56
50399: PUSH
50400: LD_VAR 0 2
50404: ARRAY
50405: PPUSH
50406: CALL_OW 12
50410: ST_TO_ADDR
// while ( MineAtPos ( mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] ) ) do
50411: LD_EXP 56
50415: PUSH
50416: LD_VAR 0 2
50420: ARRAY
50421: PUSH
50422: LD_VAR 0 4
50426: ARRAY
50427: PUSH
50428: LD_INT 1
50430: ARRAY
50431: PPUSH
50432: LD_EXP 56
50436: PUSH
50437: LD_VAR 0 2
50441: ARRAY
50442: PUSH
50443: LD_VAR 0 4
50447: ARRAY
50448: PUSH
50449: LD_INT 2
50451: ARRAY
50452: PPUSH
50453: CALL_OW 458
50457: IFFALSE 50485
// k := rand ( 1 , mc_mines [ i ] ) ;
50459: LD_ADDR_VAR 0 4
50463: PUSH
50464: LD_INT 1
50466: PPUSH
50467: LD_EXP 56
50471: PUSH
50472: LD_VAR 0 2
50476: ARRAY
50477: PPUSH
50478: CALL_OW 12
50482: ST_TO_ADDR
50483: GO 50411
// if not HasTask ( mc_miners [ i ] [ j ] ) then
50485: LD_EXP 57
50489: PUSH
50490: LD_VAR 0 2
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 3
50500: ARRAY
50501: PPUSH
50502: CALL_OW 314
50506: NOT
50507: IFFALSE 50575
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
50509: LD_EXP 57
50513: PUSH
50514: LD_VAR 0 2
50518: ARRAY
50519: PUSH
50520: LD_VAR 0 3
50524: ARRAY
50525: PPUSH
50526: LD_EXP 56
50530: PUSH
50531: LD_VAR 0 2
50535: ARRAY
50536: PUSH
50537: LD_VAR 0 4
50541: ARRAY
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: PPUSH
50547: LD_EXP 56
50551: PUSH
50552: LD_VAR 0 2
50556: ARRAY
50557: PUSH
50558: LD_VAR 0 4
50562: ARRAY
50563: PUSH
50564: LD_INT 2
50566: ARRAY
50567: PPUSH
50568: LD_INT 0
50570: PPUSH
50571: CALL_OW 133
// end ; end ;
50575: GO 50117
50577: POP
50578: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
50579: LD_ADDR_VAR 0 5
50583: PUSH
50584: LD_EXP 46
50588: PUSH
50589: LD_VAR 0 2
50593: ARRAY
50594: PPUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 30
50600: PUSH
50601: LD_INT 4
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 30
50610: PUSH
50611: LD_INT 5
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 30
50620: PUSH
50621: LD_INT 32
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: PPUSH
50634: CALL_OW 72
50638: ST_TO_ADDR
// if not tmp then
50639: LD_VAR 0 5
50643: NOT
50644: IFFALSE 50648
// continue ;
50646: GO 50042
// list := [ ] ;
50648: LD_ADDR_VAR 0 6
50652: PUSH
50653: EMPTY
50654: ST_TO_ADDR
// for j in tmp do
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: LD_VAR 0 5
50664: PUSH
50665: FOR_IN
50666: IFFALSE 50735
// begin for k in UnitsInside ( j ) do
50668: LD_ADDR_VAR 0 4
50672: PUSH
50673: LD_VAR 0 3
50677: PPUSH
50678: CALL_OW 313
50682: PUSH
50683: FOR_IN
50684: IFFALSE 50731
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
50686: LD_VAR 0 4
50690: PPUSH
50691: CALL_OW 257
50695: PUSH
50696: LD_INT 1
50698: EQUAL
50699: PUSH
50700: LD_VAR 0 4
50704: PPUSH
50705: CALL_OW 459
50709: NOT
50710: AND
50711: IFFALSE 50729
// list := list ^ k ;
50713: LD_ADDR_VAR 0 6
50717: PUSH
50718: LD_VAR 0 6
50722: PUSH
50723: LD_VAR 0 4
50727: ADD
50728: ST_TO_ADDR
50729: GO 50683
50731: POP
50732: POP
// end ;
50733: GO 50665
50735: POP
50736: POP
// list := list diff mc_miners [ i ] ;
50737: LD_ADDR_VAR 0 6
50741: PUSH
50742: LD_VAR 0 6
50746: PUSH
50747: LD_EXP 57
50751: PUSH
50752: LD_VAR 0 2
50756: ARRAY
50757: DIFF
50758: ST_TO_ADDR
// if not list then
50759: LD_VAR 0 6
50763: NOT
50764: IFFALSE 50768
// continue ;
50766: GO 50042
// k := mc_mines [ i ] - mc_miners [ i ] ;
50768: LD_ADDR_VAR 0 4
50772: PUSH
50773: LD_EXP 56
50777: PUSH
50778: LD_VAR 0 2
50782: ARRAY
50783: PUSH
50784: LD_EXP 57
50788: PUSH
50789: LD_VAR 0 2
50793: ARRAY
50794: MINUS
50795: ST_TO_ADDR
// if k > list then
50796: LD_VAR 0 4
50800: PUSH
50801: LD_VAR 0 6
50805: GREATER
50806: IFFALSE 50818
// k := list ;
50808: LD_ADDR_VAR 0 4
50812: PUSH
50813: LD_VAR 0 6
50817: ST_TO_ADDR
// for j = 1 to k do
50818: LD_ADDR_VAR 0 3
50822: PUSH
50823: DOUBLE
50824: LD_INT 1
50826: DEC
50827: ST_TO_ADDR
50828: LD_VAR 0 4
50832: PUSH
50833: FOR_TO
50834: IFFALSE 50888
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
50836: LD_ADDR_EXP 57
50840: PUSH
50841: LD_EXP 57
50845: PPUSH
50846: LD_VAR 0 2
50850: PUSH
50851: LD_EXP 57
50855: PUSH
50856: LD_VAR 0 2
50860: ARRAY
50861: PUSH
50862: LD_INT 1
50864: PLUS
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PPUSH
50870: LD_VAR 0 6
50874: PUSH
50875: LD_VAR 0 3
50879: ARRAY
50880: PPUSH
50881: CALL 3152 0 3
50885: ST_TO_ADDR
50886: GO 50833
50888: POP
50889: POP
// end ;
50890: GO 50042
50892: POP
50893: POP
// end ;
50894: LD_VAR 0 1
50898: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
50899: LD_INT 0
50901: PPUSH
50902: PPUSH
50903: PPUSH
50904: PPUSH
50905: PPUSH
// if not mc_bases then
50906: LD_EXP 46
50910: NOT
50911: IFFALSE 50915
// exit ;
50913: GO 51691
// for i = 1 to mc_bases do
50915: LD_ADDR_VAR 0 2
50919: PUSH
50920: DOUBLE
50921: LD_INT 1
50923: DEC
50924: ST_TO_ADDR
50925: LD_EXP 46
50929: PUSH
50930: FOR_TO
50931: IFFALSE 51689
// begin if not mc_bases [ i ] then
50933: LD_EXP 46
50937: PUSH
50938: LD_VAR 0 2
50942: ARRAY
50943: NOT
50944: IFFALSE 50948
// continue ;
50946: GO 50930
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
50948: LD_EXP 59
50952: PUSH
50953: LD_VAR 0 2
50957: ARRAY
50958: NOT
50959: PUSH
50960: LD_EXP 60
50964: PUSH
50965: LD_VAR 0 2
50969: ARRAY
50970: AND
50971: IFFALSE 51009
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50973: LD_ADDR_EXP 60
50977: PUSH
50978: LD_EXP 60
50982: PPUSH
50983: LD_VAR 0 2
50987: PPUSH
50988: EMPTY
50989: PPUSH
50990: CALL_OW 1
50994: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
50995: LD_VAR 0 2
50999: PPUSH
51000: LD_INT 107
51002: PPUSH
51003: CALL 46504 0 2
// continue ;
51007: GO 50930
// end ; target := [ ] ;
51009: LD_ADDR_VAR 0 5
51013: PUSH
51014: EMPTY
51015: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51016: LD_ADDR_VAR 0 3
51020: PUSH
51021: DOUBLE
51022: LD_EXP 59
51026: PUSH
51027: LD_VAR 0 2
51031: ARRAY
51032: INC
51033: ST_TO_ADDR
51034: LD_INT 1
51036: PUSH
51037: FOR_DOWNTO
51038: IFFALSE 51298
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51040: LD_EXP 59
51044: PUSH
51045: LD_VAR 0 2
51049: ARRAY
51050: PUSH
51051: LD_VAR 0 3
51055: ARRAY
51056: PUSH
51057: LD_INT 2
51059: ARRAY
51060: PPUSH
51061: LD_EXP 59
51065: PUSH
51066: LD_VAR 0 2
51070: ARRAY
51071: PUSH
51072: LD_VAR 0 3
51076: ARRAY
51077: PUSH
51078: LD_INT 3
51080: ARRAY
51081: PPUSH
51082: CALL_OW 488
51086: PUSH
51087: LD_EXP 59
51091: PUSH
51092: LD_VAR 0 2
51096: ARRAY
51097: PUSH
51098: LD_VAR 0 3
51102: ARRAY
51103: PUSH
51104: LD_INT 2
51106: ARRAY
51107: PPUSH
51108: LD_EXP 59
51112: PUSH
51113: LD_VAR 0 2
51117: ARRAY
51118: PUSH
51119: LD_VAR 0 3
51123: ARRAY
51124: PUSH
51125: LD_INT 3
51127: ARRAY
51128: PPUSH
51129: CALL_OW 284
51133: PUSH
51134: LD_INT 0
51136: EQUAL
51137: AND
51138: IFFALSE 51193
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51140: LD_ADDR_VAR 0 4
51144: PUSH
51145: LD_EXP 59
51149: PUSH
51150: LD_VAR 0 2
51154: ARRAY
51155: PPUSH
51156: LD_VAR 0 3
51160: PPUSH
51161: CALL_OW 3
51165: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
51166: LD_ADDR_EXP 59
51170: PUSH
51171: LD_EXP 59
51175: PPUSH
51176: LD_VAR 0 2
51180: PPUSH
51181: LD_VAR 0 4
51185: PPUSH
51186: CALL_OW 1
51190: ST_TO_ADDR
// continue ;
51191: GO 51037
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
51193: LD_EXP 46
51197: PUSH
51198: LD_VAR 0 2
51202: ARRAY
51203: PUSH
51204: LD_INT 1
51206: ARRAY
51207: PPUSH
51208: CALL_OW 255
51212: PPUSH
51213: LD_EXP 59
51217: PUSH
51218: LD_VAR 0 2
51222: ARRAY
51223: PUSH
51224: LD_VAR 0 3
51228: ARRAY
51229: PUSH
51230: LD_INT 2
51232: ARRAY
51233: PPUSH
51234: LD_EXP 59
51238: PUSH
51239: LD_VAR 0 2
51243: ARRAY
51244: PUSH
51245: LD_VAR 0 3
51249: ARRAY
51250: PUSH
51251: LD_INT 3
51253: ARRAY
51254: PPUSH
51255: LD_INT 20
51257: PPUSH
51258: CALL 3646 0 4
51262: PUSH
51263: LD_INT 4
51265: ARRAY
51266: PUSH
51267: LD_INT 0
51269: EQUAL
51270: IFFALSE 51296
// begin target := mc_crates [ i ] [ j ] ;
51272: LD_ADDR_VAR 0 5
51276: PUSH
51277: LD_EXP 59
51281: PUSH
51282: LD_VAR 0 2
51286: ARRAY
51287: PUSH
51288: LD_VAR 0 3
51292: ARRAY
51293: ST_TO_ADDR
// break ;
51294: GO 51298
// end ; end ;
51296: GO 51037
51298: POP
51299: POP
// if not target then
51300: LD_VAR 0 5
51304: NOT
51305: IFFALSE 51309
// continue ;
51307: GO 50930
// if mc_crates_collector [ i ] < 5 then
51309: LD_EXP 60
51313: PUSH
51314: LD_VAR 0 2
51318: ARRAY
51319: PUSH
51320: LD_INT 5
51322: LESS
51323: IFFALSE 51503
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
51325: LD_ADDR_VAR 0 4
51329: PUSH
51330: LD_EXP 46
51334: PUSH
51335: LD_VAR 0 2
51339: ARRAY
51340: PPUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 25
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 25
51356: PUSH
51357: LD_INT 16
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 24
51371: PUSH
51372: LD_INT 750
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PPUSH
51383: CALL_OW 72
51387: ST_TO_ADDR
// if not tmp then
51388: LD_VAR 0 4
51392: NOT
51393: IFFALSE 51397
// continue ;
51395: GO 50930
// for j in tmp do
51397: LD_ADDR_VAR 0 3
51401: PUSH
51402: LD_VAR 0 4
51406: PUSH
51407: FOR_IN
51408: IFFALSE 51501
// if GetTag ( j ) = 0 then
51410: LD_VAR 0 3
51414: PPUSH
51415: CALL_OW 110
51419: PUSH
51420: LD_INT 0
51422: EQUAL
51423: IFFALSE 51499
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
51425: LD_ADDR_EXP 60
51429: PUSH
51430: LD_EXP 60
51434: PPUSH
51435: LD_VAR 0 2
51439: PUSH
51440: LD_EXP 60
51444: PUSH
51445: LD_VAR 0 2
51449: ARRAY
51450: PUSH
51451: LD_INT 1
51453: PLUS
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PPUSH
51459: LD_VAR 0 3
51463: PPUSH
51464: CALL 3152 0 3
51468: ST_TO_ADDR
// SetTag ( j , 107 ) ;
51469: LD_VAR 0 3
51473: PPUSH
51474: LD_INT 107
51476: PPUSH
51477: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
51481: LD_EXP 60
51485: PUSH
51486: LD_VAR 0 2
51490: ARRAY
51491: PUSH
51492: LD_INT 5
51494: GREATER
51495: IFFALSE 51499
// break ;
51497: GO 51501
// end ;
51499: GO 51407
51501: POP
51502: POP
// end ; if mc_crates_collector [ i ] and target then
51503: LD_EXP 60
51507: PUSH
51508: LD_VAR 0 2
51512: ARRAY
51513: PUSH
51514: LD_VAR 0 5
51518: AND
51519: IFFALSE 51687
// begin if mc_crates_collector [ i ] < target [ 1 ] then
51521: LD_EXP 60
51525: PUSH
51526: LD_VAR 0 2
51530: ARRAY
51531: PUSH
51532: LD_VAR 0 5
51536: PUSH
51537: LD_INT 1
51539: ARRAY
51540: LESS
51541: IFFALSE 51561
// tmp := mc_crates_collector [ i ] else
51543: LD_ADDR_VAR 0 4
51547: PUSH
51548: LD_EXP 60
51552: PUSH
51553: LD_VAR 0 2
51557: ARRAY
51558: ST_TO_ADDR
51559: GO 51575
// tmp := target [ 1 ] ;
51561: LD_ADDR_VAR 0 4
51565: PUSH
51566: LD_VAR 0 5
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: ST_TO_ADDR
// for j = 1 to tmp do
51575: LD_ADDR_VAR 0 3
51579: PUSH
51580: DOUBLE
51581: LD_INT 1
51583: DEC
51584: ST_TO_ADDR
51585: LD_VAR 0 4
51589: PUSH
51590: FOR_TO
51591: IFFALSE 51685
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
51593: LD_EXP 60
51597: PUSH
51598: LD_VAR 0 2
51602: ARRAY
51603: PUSH
51604: LD_VAR 0 3
51608: ARRAY
51609: PPUSH
51610: CALL_OW 310
51614: IFFALSE 51637
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
51616: LD_EXP 60
51620: PUSH
51621: LD_VAR 0 2
51625: ARRAY
51626: PUSH
51627: LD_VAR 0 3
51631: ARRAY
51632: PPUSH
51633: CALL_OW 122
// wait ( 3 ) ;
51637: LD_INT 3
51639: PPUSH
51640: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
51644: LD_EXP 60
51648: PUSH
51649: LD_VAR 0 2
51653: ARRAY
51654: PUSH
51655: LD_VAR 0 3
51659: ARRAY
51660: PPUSH
51661: LD_VAR 0 5
51665: PUSH
51666: LD_INT 2
51668: ARRAY
51669: PPUSH
51670: LD_VAR 0 5
51674: PUSH
51675: LD_INT 3
51677: ARRAY
51678: PPUSH
51679: CALL_OW 117
// end ;
51683: GO 51590
51685: POP
51686: POP
// end ; end ;
51687: GO 50930
51689: POP
51690: POP
// end ;
51691: LD_VAR 0 1
51695: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
51696: LD_INT 0
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
// if not mc_bases then
51702: LD_EXP 46
51706: NOT
51707: IFFALSE 51711
// exit ;
51709: GO 51860
// for i = 1 to mc_bases do
51711: LD_ADDR_VAR 0 2
51715: PUSH
51716: DOUBLE
51717: LD_INT 1
51719: DEC
51720: ST_TO_ADDR
51721: LD_EXP 46
51725: PUSH
51726: FOR_TO
51727: IFFALSE 51858
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
51729: LD_ADDR_VAR 0 4
51733: PUSH
51734: LD_EXP 61
51738: PUSH
51739: LD_VAR 0 2
51743: ARRAY
51744: PPUSH
51745: LD_INT 33
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PPUSH
51755: CALL_OW 72
51759: ST_TO_ADDR
// if tmp then
51760: LD_VAR 0 4
51764: IFFALSE 51856
// for j in tmp do
51766: LD_ADDR_VAR 0 3
51770: PUSH
51771: LD_VAR 0 4
51775: PUSH
51776: FOR_IN
51777: IFFALSE 51854
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
51779: LD_VAR 0 3
51783: PPUSH
51784: CALL_OW 312
51788: NOT
51789: PUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: CALL_OW 256
51799: PUSH
51800: LD_INT 250
51802: GREATEREQUAL
51803: AND
51804: IFFALSE 51817
// Connect ( j ) else
51806: LD_VAR 0 3
51810: PPUSH
51811: CALL 5634 0 1
51815: GO 51852
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
51817: LD_VAR 0 3
51821: PPUSH
51822: CALL_OW 256
51826: PUSH
51827: LD_INT 250
51829: LESS
51830: PUSH
51831: LD_VAR 0 3
51835: PPUSH
51836: CALL_OW 312
51840: AND
51841: IFFALSE 51852
// ComUnlink ( j ) ;
51843: LD_VAR 0 3
51847: PPUSH
51848: CALL_OW 136
51852: GO 51776
51854: POP
51855: POP
// end ;
51856: GO 51726
51858: POP
51859: POP
// end ;
51860: LD_VAR 0 1
51864: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
51865: LD_INT 0
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
// if not mc_bases then
51872: LD_EXP 46
51876: NOT
51877: IFFALSE 51881
// exit ;
51879: GO 52248
// for i = 1 to mc_bases do
51881: LD_ADDR_VAR 0 2
51885: PUSH
51886: DOUBLE
51887: LD_INT 1
51889: DEC
51890: ST_TO_ADDR
51891: LD_EXP 46
51895: PUSH
51896: FOR_TO
51897: IFFALSE 52246
// begin if not mc_produce [ i ] then
51899: LD_EXP 63
51903: PUSH
51904: LD_VAR 0 2
51908: ARRAY
51909: NOT
51910: IFFALSE 51914
// continue ;
51912: GO 51896
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51914: LD_ADDR_VAR 0 5
51918: PUSH
51919: LD_EXP 46
51923: PUSH
51924: LD_VAR 0 2
51928: ARRAY
51929: PPUSH
51930: LD_INT 30
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PPUSH
51940: CALL_OW 72
51944: ST_TO_ADDR
// if not fac then
51945: LD_VAR 0 5
51949: NOT
51950: IFFALSE 51954
// continue ;
51952: GO 51896
// for j in fac do
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: LD_VAR 0 5
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52242
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
51967: LD_VAR 0 3
51971: PPUSH
51972: CALL_OW 461
51976: PUSH
51977: LD_INT 2
51979: NONEQUAL
51980: PUSH
51981: LD_VAR 0 3
51985: PPUSH
51986: LD_INT 20
51988: PPUSH
51989: CALL 5325 0 2
51993: PUSH
51994: LD_INT 4
51996: ARRAY
51997: OR
51998: PUSH
51999: LD_VAR 0 3
52003: PPUSH
52004: CALL_OW 313
52008: PUSH
52009: LD_INT 0
52011: EQUAL
52012: OR
52013: IFFALSE 52017
// continue ;
52015: GO 51964
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
52017: LD_VAR 0 3
52021: PPUSH
52022: LD_EXP 63
52026: PUSH
52027: LD_VAR 0 2
52031: ARRAY
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PPUSH
52041: LD_EXP 63
52045: PUSH
52046: LD_VAR 0 2
52050: ARRAY
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PUSH
52056: LD_INT 2
52058: ARRAY
52059: PPUSH
52060: LD_EXP 63
52064: PUSH
52065: LD_VAR 0 2
52069: ARRAY
52070: PUSH
52071: LD_INT 1
52073: ARRAY
52074: PUSH
52075: LD_INT 3
52077: ARRAY
52078: PPUSH
52079: LD_EXP 63
52083: PUSH
52084: LD_VAR 0 2
52088: ARRAY
52089: PUSH
52090: LD_INT 1
52092: ARRAY
52093: PUSH
52094: LD_INT 4
52096: ARRAY
52097: PPUSH
52098: CALL_OW 448
52102: IFFALSE 52240
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
52104: LD_VAR 0 3
52108: PPUSH
52109: LD_EXP 63
52113: PUSH
52114: LD_VAR 0 2
52118: ARRAY
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: PUSH
52124: LD_INT 1
52126: ARRAY
52127: PPUSH
52128: LD_EXP 63
52132: PUSH
52133: LD_VAR 0 2
52137: ARRAY
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: PPUSH
52147: LD_EXP 63
52151: PUSH
52152: LD_VAR 0 2
52156: ARRAY
52157: PUSH
52158: LD_INT 1
52160: ARRAY
52161: PUSH
52162: LD_INT 3
52164: ARRAY
52165: PPUSH
52166: LD_EXP 63
52170: PUSH
52171: LD_VAR 0 2
52175: ARRAY
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PUSH
52181: LD_INT 4
52183: ARRAY
52184: PPUSH
52185: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: LD_EXP 63
52198: PUSH
52199: LD_VAR 0 2
52203: ARRAY
52204: PPUSH
52205: LD_INT 1
52207: PPUSH
52208: CALL_OW 3
52212: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
52213: LD_ADDR_EXP 63
52217: PUSH
52218: LD_EXP 63
52222: PPUSH
52223: LD_VAR 0 2
52227: PPUSH
52228: LD_VAR 0 4
52232: PPUSH
52233: CALL_OW 1
52237: ST_TO_ADDR
// break ;
52238: GO 52242
// end ; end ;
52240: GO 51964
52242: POP
52243: POP
// end ;
52244: GO 51896
52246: POP
52247: POP
// end ;
52248: LD_VAR 0 1
52252: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
52253: LD_INT 0
52255: PPUSH
52256: PPUSH
52257: PPUSH
// if not mc_bases then
52258: LD_EXP 46
52262: NOT
52263: IFFALSE 52267
// exit ;
52265: GO 52356
// for i = 1 to mc_bases do
52267: LD_ADDR_VAR 0 2
52271: PUSH
52272: DOUBLE
52273: LD_INT 1
52275: DEC
52276: ST_TO_ADDR
52277: LD_EXP 46
52281: PUSH
52282: FOR_TO
52283: IFFALSE 52354
// begin if mc_attack [ i ] then
52285: LD_EXP 62
52289: PUSH
52290: LD_VAR 0 2
52294: ARRAY
52295: IFFALSE 52352
// begin tmp := mc_attack [ i ] [ 1 ] ;
52297: LD_ADDR_VAR 0 3
52301: PUSH
52302: LD_EXP 62
52306: PUSH
52307: LD_VAR 0 2
52311: ARRAY
52312: PUSH
52313: LD_INT 1
52315: ARRAY
52316: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52317: LD_ADDR_EXP 62
52321: PUSH
52322: LD_EXP 62
52326: PPUSH
52327: LD_VAR 0 2
52331: PPUSH
52332: EMPTY
52333: PPUSH
52334: CALL_OW 1
52338: ST_TO_ADDR
// Attack ( tmp ) ;
52339: LD_VAR 0 3
52343: PPUSH
52344: CALL 29337 0 1
// exit ;
52348: POP
52349: POP
52350: GO 52356
// end ; end ;
52352: GO 52282
52354: POP
52355: POP
// end ;
52356: LD_VAR 0 1
52360: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
52361: LD_INT 0
52363: PPUSH
52364: PPUSH
52365: PPUSH
52366: PPUSH
52367: PPUSH
52368: PPUSH
52369: PPUSH
// if not mc_bases then
52370: LD_EXP 46
52374: NOT
52375: IFFALSE 52379
// exit ;
52377: GO 52796
// for i = 1 to mc_bases do
52379: LD_ADDR_VAR 0 2
52383: PUSH
52384: DOUBLE
52385: LD_INT 1
52387: DEC
52388: ST_TO_ADDR
52389: LD_EXP 46
52393: PUSH
52394: FOR_TO
52395: IFFALSE 52794
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
52397: LD_ADDR_EXP 65
52401: PUSH
52402: LD_EXP 65
52406: PPUSH
52407: LD_VAR 0 2
52411: PPUSH
52412: LD_EXP 46
52416: PUSH
52417: LD_VAR 0 2
52421: ARRAY
52422: PPUSH
52423: CALL 33121 0 1
52427: PPUSH
52428: CALL_OW 1
52432: ST_TO_ADDR
// if not mc_scan [ i ] then
52433: LD_EXP 65
52437: PUSH
52438: LD_VAR 0 2
52442: ARRAY
52443: NOT
52444: IFFALSE 52555
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52446: LD_ADDR_VAR 0 4
52450: PUSH
52451: LD_EXP 46
52455: PUSH
52456: LD_VAR 0 2
52460: ARRAY
52461: PPUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 25
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 25
52477: PUSH
52478: LD_INT 8
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 25
52487: PUSH
52488: LD_INT 9
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: PPUSH
52501: CALL_OW 72
52505: ST_TO_ADDR
// if not tmp then
52506: LD_VAR 0 4
52510: NOT
52511: IFFALSE 52515
// continue ;
52513: GO 52394
// for j in tmp do
52515: LD_ADDR_VAR 0 3
52519: PUSH
52520: LD_VAR 0 4
52524: PUSH
52525: FOR_IN
52526: IFFALSE 52553
// if IsInUnit ( j ) then
52528: LD_VAR 0 3
52532: PPUSH
52533: CALL_OW 310
52537: IFFALSE 52551
// SetClass ( j , 1 ) ;
52539: LD_VAR 0 3
52543: PPUSH
52544: LD_INT 1
52546: PPUSH
52547: CALL_OW 336
52551: GO 52525
52553: POP
52554: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
52555: LD_EXP 65
52559: PUSH
52560: LD_VAR 0 2
52564: ARRAY
52565: PUSH
52566: LD_EXP 64
52570: PUSH
52571: LD_VAR 0 2
52575: ARRAY
52576: AND
52577: IFFALSE 52792
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
52579: LD_ADDR_VAR 0 7
52583: PUSH
52584: LD_EXP 64
52588: PUSH
52589: LD_INT 1
52591: ARRAY
52592: PPUSH
52593: CALL 33228 0 1
52597: ST_TO_ADDR
// if class then
52598: LD_VAR 0 7
52602: IFFALSE 52725
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
52604: LD_ADDR_VAR 0 4
52608: PUSH
52609: LD_EXP 46
52613: PUSH
52614: LD_VAR 0 2
52618: ARRAY
52619: PPUSH
52620: LD_INT 30
52622: PUSH
52623: LD_INT 5
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PPUSH
52630: CALL_OW 72
52634: ST_TO_ADDR
// if tmp then
52635: LD_VAR 0 4
52639: IFFALSE 52725
// begin for j in tmp do
52641: LD_ADDR_VAR 0 3
52645: PUSH
52646: LD_VAR 0 4
52650: PUSH
52651: FOR_IN
52652: IFFALSE 52723
// begin t := UnitsInside ( j ) ;
52654: LD_ADDR_VAR 0 5
52658: PUSH
52659: LD_VAR 0 3
52663: PPUSH
52664: CALL_OW 313
52668: ST_TO_ADDR
// if not t then
52669: LD_VAR 0 5
52673: NOT
52674: IFFALSE 52678
// continue ;
52676: GO 52651
// for x in t do
52678: LD_ADDR_VAR 0 6
52682: PUSH
52683: LD_VAR 0 5
52687: PUSH
52688: FOR_IN
52689: IFFALSE 52719
// if not MineOfUnit ( x ) then
52691: LD_VAR 0 6
52695: PPUSH
52696: CALL_OW 459
52700: NOT
52701: IFFALSE 52717
// SetClass ( x , class ) ;
52703: LD_VAR 0 6
52707: PPUSH
52708: LD_VAR 0 7
52712: PPUSH
52713: CALL_OW 336
52717: GO 52688
52719: POP
52720: POP
// end ;
52721: GO 52651
52723: POP
52724: POP
// end ; end ; tmp := mc_defender [ i ] ;
52725: LD_ADDR_VAR 0 4
52729: PUSH
52730: LD_EXP 64
52734: PUSH
52735: LD_VAR 0 2
52739: ARRAY
52740: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52741: LD_ADDR_EXP 64
52745: PUSH
52746: LD_EXP 64
52750: PPUSH
52751: LD_VAR 0 2
52755: PPUSH
52756: EMPTY
52757: PPUSH
52758: CALL_OW 1
52762: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
52763: LD_VAR 0 2
52767: PPUSH
52768: LD_VAR 0 4
52772: PPUSH
52773: LD_EXP 65
52777: PUSH
52778: LD_VAR 0 2
52782: ARRAY
52783: PPUSH
52784: CALL 32574 0 3
// exit ;
52788: POP
52789: POP
52790: GO 52796
// end ; end ;
52792: GO 52394
52794: POP
52795: POP
// end ;
52796: LD_VAR 0 1
52800: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
52801: LD_INT 0
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
52807: LD_VAR 0 1
52811: NOT
52812: PUSH
52813: LD_VAR 0 2
52817: NOT
52818: OR
52819: PUSH
52820: LD_VAR 0 3
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 4
52836: PUSH
52837: LD_INT 5
52839: PUSH
52840: LD_INT 8
52842: PUSH
52843: LD_INT 9
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: IN
52855: NOT
52856: OR
52857: PUSH
52858: LD_VAR 0 2
52862: PUSH
52863: LD_EXP 64
52867: PUSH
52868: LD_VAR 0 5
52872: ARRAY
52873: IN
52874: OR
52875: IFFALSE 52879
// exit ;
52877: GO 53291
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
52879: LD_ADDR_VAR 0 1
52883: PUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: LD_INT 21
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 24
52901: PUSH
52902: LD_INT 250
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PPUSH
52913: CALL_OW 72
52917: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
52918: LD_VAR 0 3
52922: PUSH
52923: LD_INT 5
52925: PUSH
52926: LD_INT 8
52928: PUSH
52929: LD_INT 9
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: IN
52937: IFFALSE 52947
// class := 1 ;
52939: LD_ADDR_VAR 0 3
52943: PUSH
52944: LD_INT 1
52946: ST_TO_ADDR
// case class of 1 :
52947: LD_VAR 0 3
52951: PUSH
52952: LD_INT 1
52954: DOUBLE
52955: EQUAL
52956: IFTRUE 52960
52958: GO 53006
52960: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
52961: LD_ADDR_VAR 0 7
52965: PUSH
52966: LD_VAR 0 1
52970: PPUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 30
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 30
52986: PUSH
52987: LD_INT 5
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: PPUSH
52999: CALL_OW 72
53003: ST_TO_ADDR
53004: GO 53180
53006: LD_INT 2
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53060
53014: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53015: LD_ADDR_VAR 0 7
53019: PUSH
53020: LD_VAR 0 1
53024: PPUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 30
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 30
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: PPUSH
53053: CALL_OW 72
53057: ST_TO_ADDR
53058: GO 53180
53060: LD_INT 3
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 53114
53068: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53069: LD_ADDR_VAR 0 7
53073: PUSH
53074: LD_VAR 0 1
53078: PPUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 30
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 30
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: PPUSH
53107: CALL_OW 72
53111: ST_TO_ADDR
53112: GO 53180
53114: LD_INT 4
53116: DOUBLE
53117: EQUAL
53118: IFTRUE 53122
53120: GO 53179
53122: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
53123: LD_ADDR_VAR 0 7
53127: PUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 30
53138: PUSH
53139: LD_INT 6
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 30
53148: PUSH
53149: LD_INT 7
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 30
53158: PUSH
53159: LD_INT 8
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: PPUSH
53172: CALL_OW 72
53176: ST_TO_ADDR
53177: GO 53180
53179: POP
// if not tmp then
53180: LD_VAR 0 7
53184: NOT
53185: IFFALSE 53189
// exit ;
53187: GO 53291
// for i in tmp do
53189: LD_ADDR_VAR 0 5
53193: PUSH
53194: LD_VAR 0 7
53198: PUSH
53199: FOR_IN
53200: IFFALSE 53269
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
53202: LD_VAR 0 5
53206: PPUSH
53207: CALL_OW 313
53211: PUSH
53212: LD_INT 6
53214: LESS
53215: PUSH
53216: LD_VAR 0 5
53220: PPUSH
53221: CALL_OW 266
53225: PUSH
53226: LD_INT 31
53228: PUSH
53229: LD_INT 32
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: IN
53236: NOT
53237: AND
53238: PUSH
53239: LD_VAR 0 5
53243: PPUSH
53244: CALL_OW 313
53248: PUSH
53249: LD_INT 0
53251: EQUAL
53252: OR
53253: IFFALSE 53267
// begin j := i ;
53255: LD_ADDR_VAR 0 6
53259: PUSH
53260: LD_VAR 0 5
53264: ST_TO_ADDR
// break ;
53265: GO 53269
// end ; end ;
53267: GO 53199
53269: POP
53270: POP
// if j then
53271: LD_VAR 0 6
53275: IFFALSE 53291
// ComEnterUnit ( unit , j ) ;
53277: LD_VAR 0 2
53281: PPUSH
53282: LD_VAR 0 6
53286: PPUSH
53287: CALL_OW 120
// end ;
53291: LD_VAR 0 4
53295: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
53296: LD_INT 0
53298: PPUSH
53299: PPUSH
53300: PPUSH
53301: PPUSH
// if not mc_bases then
53302: LD_EXP 46
53306: NOT
53307: IFFALSE 53311
// exit ;
53309: GO 53540
// for i = 1 to mc_bases do
53311: LD_ADDR_VAR 0 2
53315: PUSH
53316: DOUBLE
53317: LD_INT 1
53319: DEC
53320: ST_TO_ADDR
53321: LD_EXP 46
53325: PUSH
53326: FOR_TO
53327: IFFALSE 53538
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
53329: LD_ADDR_VAR 0 4
53333: PUSH
53334: LD_EXP 46
53338: PUSH
53339: LD_VAR 0 2
53343: ARRAY
53344: PPUSH
53345: LD_INT 21
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PPUSH
53355: CALL_OW 72
53359: ST_TO_ADDR
// if not tmp then
53360: LD_VAR 0 4
53364: NOT
53365: IFFALSE 53371
// exit ;
53367: POP
53368: POP
53369: GO 53540
// for j in tmp do
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_VAR 0 4
53380: PUSH
53381: FOR_IN
53382: IFFALSE 53534
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
53384: LD_VAR 0 3
53388: PPUSH
53389: CALL_OW 257
53393: PUSH
53394: LD_INT 3
53396: EQUAL
53397: PUSH
53398: LD_EXP 65
53402: PUSH
53403: LD_VAR 0 2
53407: ARRAY
53408: AND
53409: IFFALSE 53413
// continue ;
53411: GO 53381
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
53413: LD_VAR 0 3
53417: PPUSH
53418: CALL_OW 110
53422: NOT
53423: PUSH
53424: LD_VAR 0 3
53428: PPUSH
53429: CALL_OW 314
53433: NOT
53434: AND
53435: PUSH
53436: LD_VAR 0 3
53440: PPUSH
53441: CALL_OW 310
53445: NOT
53446: AND
53447: PUSH
53448: LD_EXP 49
53452: PUSH
53453: LD_VAR 0 2
53457: ARRAY
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: NOT
53463: AND
53464: PUSH
53465: LD_EXP 49
53469: PUSH
53470: LD_VAR 0 2
53474: ARRAY
53475: PUSH
53476: LD_INT 2
53478: ARRAY
53479: NOT
53480: AND
53481: PUSH
53482: LD_VAR 0 3
53486: PUSH
53487: LD_EXP 55
53491: PUSH
53492: LD_VAR 0 2
53496: ARRAY
53497: IN
53498: NOT
53499: AND
53500: IFFALSE 53532
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
53502: LD_EXP 46
53506: PUSH
53507: LD_VAR 0 2
53511: ARRAY
53512: PPUSH
53513: LD_VAR 0 3
53517: PPUSH
53518: LD_VAR 0 3
53522: PPUSH
53523: CALL_OW 257
53527: PPUSH
53528: CALL 52801 0 3
// end ;
53532: GO 53381
53534: POP
53535: POP
// end ;
53536: GO 53326
53538: POP
53539: POP
// end ;
53540: LD_VAR 0 1
53544: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
53545: LD_INT 0
53547: PPUSH
53548: PPUSH
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
// if not mc_bases [ base ] then
53554: LD_EXP 46
53558: PUSH
53559: LD_VAR 0 1
53563: ARRAY
53564: NOT
53565: IFFALSE 53569
// exit ;
53567: GO 53837
// tmp := [ ] ;
53569: LD_ADDR_VAR 0 7
53573: PUSH
53574: EMPTY
53575: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
53576: LD_ADDR_VAR 0 8
53580: PUSH
53581: LD_VAR 0 3
53585: PPUSH
53586: LD_INT 0
53588: PPUSH
53589: CALL_OW 517
53593: ST_TO_ADDR
// if not list then
53594: LD_VAR 0 8
53598: NOT
53599: IFFALSE 53603
// exit ;
53601: GO 53837
// for i = 1 to amount do
53603: LD_ADDR_VAR 0 5
53607: PUSH
53608: DOUBLE
53609: LD_INT 1
53611: DEC
53612: ST_TO_ADDR
53613: LD_VAR 0 2
53617: PUSH
53618: FOR_TO
53619: IFFALSE 53785
// begin c := rand ( 1 , list [ 1 ] - i ) ;
53621: LD_ADDR_VAR 0 6
53625: PUSH
53626: LD_INT 1
53628: PPUSH
53629: LD_VAR 0 8
53633: PUSH
53634: LD_INT 1
53636: ARRAY
53637: PUSH
53638: LD_VAR 0 5
53642: MINUS
53643: PPUSH
53644: CALL_OW 12
53648: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
53649: LD_ADDR_VAR 0 7
53653: PUSH
53654: LD_VAR 0 7
53658: PPUSH
53659: LD_VAR 0 5
53663: PPUSH
53664: LD_VAR 0 8
53668: PUSH
53669: LD_INT 1
53671: ARRAY
53672: PUSH
53673: LD_VAR 0 6
53677: ARRAY
53678: PUSH
53679: LD_VAR 0 8
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: PUSH
53688: LD_VAR 0 6
53692: ARRAY
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PPUSH
53698: CALL_OW 1
53702: ST_TO_ADDR
// for j = 1 to 2 do
53703: LD_ADDR_VAR 0 10
53707: PUSH
53708: DOUBLE
53709: LD_INT 1
53711: DEC
53712: ST_TO_ADDR
53713: LD_INT 2
53715: PUSH
53716: FOR_TO
53717: IFFALSE 53772
// begin x := Delete ( list [ j ] , c ) ;
53719: LD_ADDR_VAR 0 9
53723: PUSH
53724: LD_VAR 0 8
53728: PUSH
53729: LD_VAR 0 10
53733: ARRAY
53734: PPUSH
53735: LD_VAR 0 6
53739: PPUSH
53740: CALL_OW 3
53744: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
53745: LD_ADDR_VAR 0 8
53749: PUSH
53750: LD_VAR 0 8
53754: PPUSH
53755: LD_VAR 0 10
53759: PPUSH
53760: LD_VAR 0 9
53764: PPUSH
53765: CALL_OW 1
53769: ST_TO_ADDR
// end ;
53770: GO 53716
53772: POP
53773: POP
// if not list then
53774: LD_VAR 0 8
53778: NOT
53779: IFFALSE 53783
// break ;
53781: GO 53785
// end ;
53783: GO 53618
53785: POP
53786: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
53787: LD_ADDR_EXP 56
53791: PUSH
53792: LD_EXP 56
53796: PPUSH
53797: LD_VAR 0 1
53801: PPUSH
53802: LD_VAR 0 7
53806: PPUSH
53807: CALL_OW 1
53811: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
53812: LD_ADDR_EXP 58
53816: PUSH
53817: LD_EXP 58
53821: PPUSH
53822: LD_VAR 0 1
53826: PPUSH
53827: LD_VAR 0 3
53831: PPUSH
53832: CALL_OW 1
53836: ST_TO_ADDR
// end ;
53837: LD_VAR 0 4
53841: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
53842: LD_INT 0
53844: PPUSH
// if not mc_bases [ base ] then
53845: LD_EXP 46
53849: PUSH
53850: LD_VAR 0 1
53854: ARRAY
53855: NOT
53856: IFFALSE 53860
// exit ;
53858: GO 53885
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
53860: LD_ADDR_EXP 63
53864: PUSH
53865: LD_EXP 63
53869: PPUSH
53870: LD_VAR 0 1
53874: PPUSH
53875: LD_VAR 0 2
53879: PPUSH
53880: CALL_OW 1
53884: ST_TO_ADDR
// end ;
53885: LD_VAR 0 3
53889: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53890: LD_INT 0
53892: PPUSH
// if not mc_bases [ base ] then
53893: LD_EXP 46
53897: PUSH
53898: LD_VAR 0 1
53902: ARRAY
53903: NOT
53904: IFFALSE 53908
// exit ;
53906: GO 53933
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53908: LD_ADDR_EXP 64
53912: PUSH
53913: LD_EXP 64
53917: PPUSH
53918: LD_VAR 0 1
53922: PPUSH
53923: LD_VAR 0 2
53927: PPUSH
53928: CALL_OW 1
53932: ST_TO_ADDR
// end ;
53933: LD_VAR 0 3
53937: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
53938: LD_INT 0
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
// if not mc_bases [ base ] then
53944: LD_EXP 46
53948: PUSH
53949: LD_VAR 0 1
53953: ARRAY
53954: NOT
53955: IFFALSE 53959
// exit ;
53957: GO 54024
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
53959: LD_ADDR_EXP 62
53963: PUSH
53964: LD_EXP 62
53968: PPUSH
53969: LD_VAR 0 1
53973: PUSH
53974: LD_EXP 62
53978: PUSH
53979: LD_VAR 0 1
53983: ARRAY
53984: PUSH
53985: LD_INT 1
53987: PLUS
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PPUSH
53993: LD_VAR 0 1
53997: PUSH
53998: LD_VAR 0 2
54002: PUSH
54003: LD_VAR 0 3
54007: PUSH
54008: LD_VAR 0 4
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: PPUSH
54019: CALL 3152 0 3
54023: ST_TO_ADDR
// end ;
54024: LD_VAR 0 5
54028: RET
// export function MC_GetMinesField ( base ) ; begin
54029: LD_INT 0
54031: PPUSH
// result := mc_mines [ base ] ;
54032: LD_ADDR_VAR 0 2
54036: PUSH
54037: LD_EXP 56
54041: PUSH
54042: LD_VAR 0 1
54046: ARRAY
54047: ST_TO_ADDR
// end ;
54048: LD_VAR 0 2
54052: RET
// export function MC_GetProduceList ( base ) ; begin
54053: LD_INT 0
54055: PPUSH
// result := mc_produce [ base ] ;
54056: LD_ADDR_VAR 0 2
54060: PUSH
54061: LD_EXP 63
54065: PUSH
54066: LD_VAR 0 1
54070: ARRAY
54071: ST_TO_ADDR
// end ; end_of_file
54072: LD_VAR 0 2
54076: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
54077: LD_VAR 0 1
54081: PPUSH
54082: CALL_OW 255
54086: PUSH
54087: LD_INT 1
54089: EQUAL
54090: IFFALSE 54100
// artifact_get := true ;
54092: LD_ADDR_EXP 12
54096: PUSH
54097: LD_INT 1
54099: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 255
54109: PUSH
54110: LD_INT 2
54112: EQUAL
54113: IFFALSE 54131
// begin artifact_get := false ;
54115: LD_ADDR_EXP 12
54119: PUSH
54120: LD_INT 0
54122: ST_TO_ADDR
// artifact_stolen := true ;
54123: LD_ADDR_EXP 11
54127: PUSH
54128: LD_INT 1
54130: ST_TO_ADDR
// end ; artifact_oncargo := true ;
54131: LD_ADDR_EXP 13
54135: PUSH
54136: LD_INT 1
54138: ST_TO_ADDR
// end ;
54139: PPOPN 2
54141: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
54142: LD_ADDR_EXP 13
54146: PUSH
54147: LD_INT 0
54149: ST_TO_ADDR
// end ;
54150: PPOPN 2
54152: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
54153: LD_INT 0
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
54160: LD_VAR 0 1
54164: PUSH
54165: LD_INT 22
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 21
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 25
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 25
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 25
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 25
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 25
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 25
54240: PUSH
54241: LD_INT 8
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: PPUSH
54262: CALL_OW 69
54266: IN
54267: IFFALSE 54283
// loses_counter := loses_counter + 1 ;
54269: LD_ADDR_EXP 16
54273: PUSH
54274: LD_EXP 16
54278: PUSH
54279: LD_INT 1
54281: PLUS
54282: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
54283: LD_VAR 0 1
54287: PUSH
54288: LD_INT 21
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PPUSH
54298: CALL_OW 69
54302: IN
54303: IFFALSE 54819
// begin if not mc_bases then
54305: LD_EXP 46
54309: NOT
54310: IFFALSE 54314
// exit ;
54312: GO 54819
// pos := mc_build_list [ i ] + 1 ;
54314: LD_ADDR_VAR 0 5
54318: PUSH
54319: LD_EXP 51
54323: PUSH
54324: LD_VAR 0 2
54328: ARRAY
54329: PUSH
54330: LD_INT 1
54332: PLUS
54333: ST_TO_ADDR
// btype := GetBType ( un ) ;
54334: LD_ADDR_VAR 0 4
54338: PUSH
54339: LD_VAR 0 1
54343: PPUSH
54344: CALL_OW 266
54348: ST_TO_ADDR
// if btype = b_warehouse then
54349: LD_VAR 0 4
54353: PUSH
54354: LD_INT 1
54356: EQUAL
54357: IFFALSE 54375
// begin btype := b_depot ;
54359: LD_ADDR_VAR 0 4
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// pos := 1 ;
54367: LD_ADDR_VAR 0 5
54371: PUSH
54372: LD_INT 1
54374: ST_TO_ADDR
// end ; if btype = b_factory then
54375: LD_VAR 0 4
54379: PUSH
54380: LD_INT 3
54382: EQUAL
54383: IFFALSE 54401
// begin btype := b_workshop ;
54385: LD_ADDR_VAR 0 4
54389: PUSH
54390: LD_INT 2
54392: ST_TO_ADDR
// pos := 1 ;
54393: LD_ADDR_VAR 0 5
54397: PUSH
54398: LD_INT 1
54400: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
54401: LD_VAR 0 4
54405: PUSH
54406: LD_INT 7
54408: PUSH
54409: LD_INT 8
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: IN
54416: IFFALSE 54426
// btype := b_lab ;
54418: LD_ADDR_VAR 0 4
54422: PUSH
54423: LD_INT 6
54425: ST_TO_ADDR
// for i = 1 to mc_bases do
54426: LD_ADDR_VAR 0 2
54430: PUSH
54431: DOUBLE
54432: LD_INT 1
54434: DEC
54435: ST_TO_ADDR
54436: LD_EXP 46
54440: PUSH
54441: FOR_TO
54442: IFFALSE 54817
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
54444: LD_VAR 0 1
54448: PUSH
54449: LD_EXP 46
54453: PUSH
54454: LD_VAR 0 2
54458: ARRAY
54459: IN
54460: PUSH
54461: LD_VAR 0 1
54465: PUSH
54466: LD_EXP 53
54470: PUSH
54471: LD_VAR 0 2
54475: ARRAY
54476: IN
54477: OR
54478: IFFALSE 54815
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
54480: LD_ADDR_EXP 51
54484: PUSH
54485: LD_EXP 51
54489: PPUSH
54490: LD_VAR 0 2
54494: PUSH
54495: LD_EXP 51
54499: PUSH
54500: LD_VAR 0 2
54504: ARRAY
54505: PUSH
54506: LD_INT 1
54508: PLUS
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PPUSH
54514: LD_VAR 0 4
54518: PUSH
54519: LD_VAR 0 1
54523: PPUSH
54524: CALL_OW 250
54528: PUSH
54529: LD_VAR 0 1
54533: PPUSH
54534: CALL_OW 251
54538: PUSH
54539: LD_VAR 0 1
54543: PPUSH
54544: CALL_OW 254
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: PPUSH
54555: CALL 3152 0 3
54559: ST_TO_ADDR
// if pos = 1 then
54560: LD_VAR 0 5
54564: PUSH
54565: LD_INT 1
54567: EQUAL
54568: IFFALSE 54683
// begin tmp := mc_build_list [ i ] ;
54570: LD_ADDR_VAR 0 6
54574: PUSH
54575: LD_EXP 51
54579: PUSH
54580: LD_VAR 0 2
54584: ARRAY
54585: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54586: LD_VAR 0 6
54590: PPUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 30
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 30
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: PPUSH
54619: CALL_OW 72
54623: IFFALSE 54633
// pos := 2 ;
54625: LD_ADDR_VAR 0 5
54629: PUSH
54630: LD_INT 2
54632: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
54633: LD_ADDR_VAR 0 6
54637: PUSH
54638: LD_VAR 0 6
54642: PPUSH
54643: LD_VAR 0 5
54647: PPUSH
54648: LD_VAR 0 6
54652: PPUSH
54653: CALL 3043 0 3
54657: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
54658: LD_ADDR_EXP 51
54662: PUSH
54663: LD_EXP 51
54667: PPUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_VAR 0 6
54677: PPUSH
54678: CALL_OW 1
54682: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
54683: LD_VAR 0 1
54687: PUSH
54688: LD_EXP 46
54692: PUSH
54693: LD_VAR 0 2
54697: ARRAY
54698: IN
54699: IFFALSE 54748
// begin tmp := mc_bases [ i ] diff un ;
54701: LD_ADDR_VAR 0 6
54705: PUSH
54706: LD_EXP 46
54710: PUSH
54711: LD_VAR 0 2
54715: ARRAY
54716: PUSH
54717: LD_VAR 0 1
54721: DIFF
54722: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
54723: LD_ADDR_EXP 46
54727: PUSH
54728: LD_EXP 46
54732: PPUSH
54733: LD_VAR 0 2
54737: PPUSH
54738: LD_VAR 0 6
54742: PPUSH
54743: CALL_OW 1
54747: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
54748: LD_VAR 0 1
54752: PUSH
54753: LD_EXP 53
54757: PUSH
54758: LD_VAR 0 2
54762: ARRAY
54763: IN
54764: IFFALSE 54813
// begin tmp := mc_construct_list [ i ] diff un ;
54766: LD_ADDR_VAR 0 6
54770: PUSH
54771: LD_EXP 53
54775: PUSH
54776: LD_VAR 0 2
54780: ARRAY
54781: PUSH
54782: LD_VAR 0 1
54786: DIFF
54787: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
54788: LD_ADDR_EXP 53
54792: PUSH
54793: LD_EXP 53
54797: PPUSH
54798: LD_VAR 0 2
54802: PPUSH
54803: LD_VAR 0 6
54807: PPUSH
54808: CALL_OW 1
54812: ST_TO_ADDR
// end ; break ;
54813: GO 54817
// end ;
54815: GO 54441
54817: POP
54818: POP
// end ; end ;
54819: PPOPN 6
54821: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
54822: LD_INT 0
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
// begin if not mc_bases then
54831: LD_EXP 46
54835: NOT
54836: IFFALSE 54840
// exit ;
54838: GO 55081
// btype := GetBType ( building ) ;
54840: LD_ADDR_VAR 0 6
54844: PUSH
54845: LD_VAR 0 1
54849: PPUSH
54850: CALL_OW 266
54854: ST_TO_ADDR
// x := GetX ( building ) ;
54855: LD_ADDR_VAR 0 7
54859: PUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 250
54869: ST_TO_ADDR
// y := GetY ( building ) ;
54870: LD_ADDR_VAR 0 8
54874: PUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 251
54884: ST_TO_ADDR
// d := GetDir ( building ) ;
54885: LD_ADDR_VAR 0 9
54889: PUSH
54890: LD_VAR 0 1
54894: PPUSH
54895: CALL_OW 254
54899: ST_TO_ADDR
// for i = 1 to mc_bases do
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: DOUBLE
54906: LD_INT 1
54908: DEC
54909: ST_TO_ADDR
54910: LD_EXP 46
54914: PUSH
54915: FOR_TO
54916: IFFALSE 55079
// begin if not mc_build_list [ i ] then
54918: LD_EXP 51
54922: PUSH
54923: LD_VAR 0 3
54927: ARRAY
54928: NOT
54929: IFFALSE 54933
// continue ;
54931: GO 54915
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
54933: LD_VAR 0 6
54937: PUSH
54938: LD_VAR 0 7
54942: PUSH
54943: LD_VAR 0 8
54947: PUSH
54948: LD_VAR 0 9
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: PPUSH
54959: LD_EXP 51
54963: PUSH
54964: LD_VAR 0 3
54968: ARRAY
54969: PUSH
54970: LD_INT 1
54972: ARRAY
54973: PPUSH
54974: CALL 8447 0 2
54978: IFFALSE 55077
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
54980: LD_ADDR_VAR 0 5
54984: PUSH
54985: LD_EXP 51
54989: PUSH
54990: LD_VAR 0 3
54994: ARRAY
54995: PPUSH
54996: LD_INT 1
54998: PPUSH
54999: CALL_OW 3
55003: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55004: LD_ADDR_EXP 51
55008: PUSH
55009: LD_EXP 51
55013: PPUSH
55014: LD_VAR 0 3
55018: PPUSH
55019: LD_VAR 0 5
55023: PPUSH
55024: CALL_OW 1
55028: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55029: LD_ADDR_EXP 53
55033: PUSH
55034: LD_EXP 53
55038: PPUSH
55039: LD_VAR 0 3
55043: PUSH
55044: LD_EXP 53
55048: PUSH
55049: LD_VAR 0 3
55053: ARRAY
55054: PUSH
55055: LD_INT 1
55057: PLUS
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PPUSH
55063: LD_VAR 0 1
55067: PPUSH
55068: CALL 3152 0 3
55072: ST_TO_ADDR
// exit ;
55073: POP
55074: POP
55075: GO 55081
// end ; end ;
55077: GO 54915
55079: POP
55080: POP
// end ;
55081: PPOPN 9
55083: END
// on BuildingComplete ( building ) do var i , j , tmp ;
55084: LD_INT 0
55086: PPUSH
55087: PPUSH
55088: PPUSH
// begin if not mc_bases then
55089: LD_EXP 46
55093: NOT
55094: IFFALSE 55098
// exit ;
55096: GO 55299
// for i = 1 to mc_bases do
55098: LD_ADDR_VAR 0 2
55102: PUSH
55103: DOUBLE
55104: LD_INT 1
55106: DEC
55107: ST_TO_ADDR
55108: LD_EXP 46
55112: PUSH
55113: FOR_TO
55114: IFFALSE 55297
// begin if building in mc_construct_list [ i ] then
55116: LD_VAR 0 1
55120: PUSH
55121: LD_EXP 53
55125: PUSH
55126: LD_VAR 0 2
55130: ARRAY
55131: IN
55132: IFFALSE 55295
// begin tmp := mc_construct_list [ i ] diff building ;
55134: LD_ADDR_VAR 0 4
55138: PUSH
55139: LD_EXP 53
55143: PUSH
55144: LD_VAR 0 2
55148: ARRAY
55149: PUSH
55150: LD_VAR 0 1
55154: DIFF
55155: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55156: LD_ADDR_EXP 53
55160: PUSH
55161: LD_EXP 53
55165: PPUSH
55166: LD_VAR 0 2
55170: PPUSH
55171: LD_VAR 0 4
55175: PPUSH
55176: CALL_OW 1
55180: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55181: LD_ADDR_EXP 46
55185: PUSH
55186: LD_EXP 46
55190: PPUSH
55191: LD_VAR 0 2
55195: PUSH
55196: LD_EXP 46
55200: PUSH
55201: LD_VAR 0 2
55205: ARRAY
55206: PUSH
55207: LD_INT 1
55209: PLUS
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PPUSH
55215: LD_VAR 0 1
55219: PPUSH
55220: CALL 3152 0 3
55224: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
55225: LD_VAR 0 1
55229: PPUSH
55230: CALL_OW 266
55234: PUSH
55235: LD_INT 32
55237: PUSH
55238: LD_INT 33
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: IN
55245: IFFALSE 55291
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55247: LD_ADDR_EXP 54
55251: PUSH
55252: LD_EXP 54
55256: PPUSH
55257: LD_VAR 0 2
55261: PUSH
55262: LD_EXP 54
55266: PUSH
55267: LD_VAR 0 2
55271: ARRAY
55272: PUSH
55273: LD_INT 1
55275: PLUS
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PPUSH
55281: LD_VAR 0 1
55285: PPUSH
55286: CALL 3152 0 3
55290: ST_TO_ADDR
// exit ;
55291: POP
55292: POP
55293: GO 55299
// end ; end ;
55295: GO 55113
55297: POP
55298: POP
// end ;
55299: PPOPN 4
55301: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
55302: LD_INT 0
55304: PPUSH
55305: PPUSH
// begin if not mc_bases then
55306: LD_EXP 46
55310: NOT
55311: IFFALSE 55315
// exit ;
55313: GO 55530
// repeat wait ( 0 0$1 ) ;
55315: LD_INT 35
55317: PPUSH
55318: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
55322: LD_VAR 0 2
55326: PPUSH
55327: LD_VAR 0 3
55331: PPUSH
55332: CALL_OW 284
55336: IFFALSE 55315
// if GetResourceTypeXY ( x , y ) = mat_artefact then
55338: LD_VAR 0 2
55342: PPUSH
55343: LD_VAR 0 3
55347: PPUSH
55348: CALL_OW 283
55352: PUSH
55353: LD_INT 4
55355: EQUAL
55356: IFFALSE 55360
// exit ;
55358: GO 55530
// for i = 1 to mc_bases do
55360: LD_ADDR_VAR 0 6
55364: PUSH
55365: DOUBLE
55366: LD_INT 1
55368: DEC
55369: ST_TO_ADDR
55370: LD_EXP 46
55374: PUSH
55375: FOR_TO
55376: IFFALSE 55528
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55378: LD_ADDR_VAR 0 7
55382: PUSH
55383: LD_EXP 46
55387: PUSH
55388: LD_VAR 0 6
55392: ARRAY
55393: PPUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 30
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 30
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: PPUSH
55422: CALL_OW 72
55426: ST_TO_ADDR
// if not depot then
55427: LD_VAR 0 7
55431: NOT
55432: IFFALSE 55436
// continue ;
55434: GO 55375
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
55436: LD_VAR 0 7
55440: PUSH
55441: LD_INT 1
55443: ARRAY
55444: PPUSH
55445: LD_VAR 0 2
55449: PPUSH
55450: LD_VAR 0 3
55454: PPUSH
55455: CALL_OW 297
55459: PUSH
55460: LD_INT 30
55462: LESS
55463: IFFALSE 55526
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
55465: LD_ADDR_EXP 59
55469: PUSH
55470: LD_EXP 59
55474: PPUSH
55475: LD_VAR 0 6
55479: PUSH
55480: LD_EXP 59
55484: PUSH
55485: LD_VAR 0 6
55489: ARRAY
55490: PUSH
55491: LD_INT 1
55493: PLUS
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PPUSH
55499: LD_VAR 0 4
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: LD_VAR 0 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: PPUSH
55519: CALL 3152 0 3
55523: ST_TO_ADDR
// break ;
55524: GO 55528
// end ; end ;
55526: GO 55375
55528: POP
55529: POP
// end ;
55530: PPOPN 7
55532: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
// begin if not mc_bases then
55537: LD_EXP 46
55541: NOT
55542: IFFALSE 55546
// exit ;
55544: GO 55634
// for i = 1 to mc_bases do
55546: LD_ADDR_VAR 0 3
55550: PUSH
55551: DOUBLE
55552: LD_INT 1
55554: DEC
55555: ST_TO_ADDR
55556: LD_EXP 46
55560: PUSH
55561: FOR_TO
55562: IFFALSE 55632
// begin if factory in mc_bases [ i ] then
55564: LD_VAR 0 2
55568: PUSH
55569: LD_EXP 46
55573: PUSH
55574: LD_VAR 0 3
55578: ARRAY
55579: IN
55580: IFFALSE 55630
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
55582: LD_ADDR_EXP 61
55586: PUSH
55587: LD_EXP 61
55591: PPUSH
55592: LD_VAR 0 3
55596: PUSH
55597: LD_EXP 61
55601: PUSH
55602: LD_VAR 0 3
55606: ARRAY
55607: PUSH
55608: LD_INT 1
55610: PLUS
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PPUSH
55616: LD_VAR 0 1
55620: PPUSH
55621: CALL 3152 0 3
55625: ST_TO_ADDR
// exit ;
55626: POP
55627: POP
55628: GO 55634
// end ; end ;
55630: GO 55561
55632: POP
55633: POP
// end ;
55634: PPOPN 4
55636: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
55637: LD_VAR 0 1
55641: PPUSH
55642: CALL_OW 247
55646: PUSH
55647: LD_INT 2
55649: EQUAL
55650: IFFALSE 55654
// exit ;
55652: GO 55671
// if not kamikazed then
55654: LD_EXP 10
55658: NOT
55659: IFFALSE 55671
// kamikazed := unit ;
55661: LD_ADDR_EXP 10
55665: PUSH
55666: LD_VAR 0 1
55670: ST_TO_ADDR
// end ; end_of_file
55671: PPOPN 1
55673: END
// every 0 0$1 trigger game do
55674: LD_EXP 2
55678: IFFALSE 55708
55680: GO 55682
55682: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
55683: LD_INT 7
55685: PUSH
55686: LD_INT 6
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: LD_INT 6
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: PPUSH
55701: LD_INT 1400
55703: PPUSH
55704: CALL 55709 0 2
55708: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
55709: LD_INT 0
55711: PPUSH
55712: PPUSH
55713: PPUSH
// if not areas then
55714: LD_VAR 0 1
55718: NOT
55719: IFFALSE 55723
// exit ;
55721: GO 55835
// repeat wait ( time ) ;
55723: LD_VAR 0 2
55727: PPUSH
55728: CALL_OW 67
// p := rand ( 1 , 90 ) ;
55732: LD_ADDR_VAR 0 5
55736: PUSH
55737: LD_INT 1
55739: PPUSH
55740: LD_INT 90
55742: PPUSH
55743: CALL_OW 12
55747: ST_TO_ADDR
// for i in areas do
55748: LD_ADDR_VAR 0 4
55752: PUSH
55753: LD_VAR 0 1
55757: PUSH
55758: FOR_IN
55759: IFFALSE 55812
// begin if Prob ( p ) then
55761: LD_VAR 0 5
55765: PPUSH
55766: CALL_OW 13
55770: IFFALSE 55810
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
55772: LD_INT 1
55774: PPUSH
55775: LD_INT 5
55777: PPUSH
55778: CALL_OW 12
55782: PPUSH
55783: LD_VAR 0 4
55787: PPUSH
55788: LD_INT 1
55790: PPUSH
55791: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
55795: LD_INT 455
55797: PPUSH
55798: LD_INT 595
55800: PPUSH
55801: CALL_OW 12
55805: PPUSH
55806: CALL_OW 67
// end ; end ;
55810: GO 55758
55812: POP
55813: POP
// time := time + 0 0$3 ;
55814: LD_ADDR_VAR 0 2
55818: PUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 105
55826: PLUS
55827: ST_TO_ADDR
// until not game ;
55828: LD_EXP 2
55832: NOT
55833: IFFALSE 55723
// end ;
55835: LD_VAR 0 3
55839: RET
