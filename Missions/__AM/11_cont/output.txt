// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16684 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 78993 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2190 0 0
// MC_Start ( ) ;
  78: CALL 17831 0 0
// Action ;
  82: CALL 7665 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 231000
 212: PUSH
 213: LD_INT 210000
 215: PUSH
 216: LD_INT 199500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 73
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 74
 312: PUSH
 313: LD_INT 28
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 6
 332: PUSH
 333: LD_INT 8
 335: PUSH
 336: LD_INT 9
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 38309 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 38309 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 38309 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 49
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 38735 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 35
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 29
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 44570 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 20
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 44570 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 20
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 20
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 21
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 44570 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 21
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 21
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 21
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 21
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 30
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 44570 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 22
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 44570 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 22
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 22
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 22
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 22
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 23
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 44570 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 23
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 23
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 24
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 44570 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 24
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 24
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 25
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 44570 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 26
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 44570 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 26
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 26
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 26
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 26
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 27
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 44570 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 27
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 28
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 44570 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 28
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 28
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 30
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 44570 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 31
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 44570 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 31
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 31
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 44570 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 44570 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 21
1283: PUSH
1284: LD_EXP 22
1288: PUSH
1289: LD_EXP 23
1293: PUSH
1294: LD_EXP 24
1298: PUSH
1299: LD_EXP 25
1303: PUSH
1304: LD_EXP 26
1308: PUSH
1309: LD_EXP 27
1313: PUSH
1314: LD_EXP 28
1318: PUSH
1319: LD_EXP 30
1323: PUSH
1324: LD_EXP 31
1328: PUSH
1329: LD_EXP 32
1333: PUSH
1334: LD_EXP 33
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1468
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: IN
1452: IFFALSE 1466
// SetClass ( i , class_soldier ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: CALL_OW 336
1466: GO 1429
1468: POP
1469: POP
// if tmp < 12 then
1470: LD_VAR 0 5
1474: PUSH
1475: LD_INT 12
1477: LESS
1478: IFFALSE 1572
// begin k := 16 - tmp ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_INT 16
1487: PUSH
1488: LD_VAR 0 5
1492: MINUS
1493: ST_TO_ADDR
// for i = 1 to k do
1494: LD_ADDR_VAR 0 2
1498: PUSH
1499: DOUBLE
1500: LD_INT 1
1502: DEC
1503: ST_TO_ADDR
1504: LD_VAR 0 3
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1570
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1512: LD_INT 0
1514: PPUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 12
1543: ARRAY
1544: PPUSH
1545: LD_INT 6
1547: PPUSH
1548: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1552: LD_ADDR_VAR 0 5
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: CALL_OW 44
1566: ADD
1567: ST_TO_ADDR
// end ;
1568: GO 1509
1570: POP
1571: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1572: LD_ADDR_EXP 19
1576: PUSH
1577: LD_STRING 1
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT 12
1585: PPUSH
1586: LD_INT -5
1588: PUSH
1589: LD_EXP 20
1593: PUSH
1594: LD_INT -2
1596: PUSH
1597: LD_INT -3
1599: PUSH
1600: LD_INT -5
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: PUSH
1610: LD_VAR 0 5
1614: ADD
1615: PUSH
1616: LD_INT -6
1618: PUSH
1619: LD_INT -4
1621: PUSH
1622: LD_EXP 29
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: ADD
1632: PPUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 42
1695: ST_TO_ADDR
// others := tmp diff selected ;
1696: LD_ADDR_VAR 0 8
1700: PUSH
1701: LD_VAR 0 5
1705: PUSH
1706: LD_EXP 19
1710: DIFF
1711: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1712: LD_ADDR_VAR 0 8
1716: PUSH
1717: LD_VAR 0 8
1721: PUSH
1722: LD_EXP 21
1726: PUSH
1727: LD_EXP 22
1731: PUSH
1732: LD_EXP 23
1736: PUSH
1737: LD_EXP 24
1741: PUSH
1742: LD_EXP 25
1746: PUSH
1747: LD_EXP 26
1751: PUSH
1752: LD_EXP 27
1756: PUSH
1757: LD_EXP 28
1761: PUSH
1762: LD_EXP 30
1766: PUSH
1767: LD_EXP 31
1771: PUSH
1772: LD_EXP 32
1776: PUSH
1777: LD_EXP 33
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: DIFF
1796: ST_TO_ADDR
// if others then
1797: LD_VAR 0 8
1801: IFFALSE 1815
// SaveCharacters ( others , 11_others ) ;
1803: LD_VAR 0 8
1807: PPUSH
1808: LD_STRING 11_others
1810: PPUSH
1811: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1815: LD_ADDR_VAR 0 6
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: LD_INT 4
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 2
1840: PUSH
1841: LD_INT 2
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 5
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 4
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 2
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 7
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: ST_TO_ADDR
// for i in JMM ^ selected do
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_EXP 20
1926: PUSH
1927: LD_EXP 19
1931: ADD
1932: PUSH
1933: FOR_IN
1934: IFFALSE 2123
// begin if GetClass ( i ) = 3 then
1936: LD_VAR 0 2
1940: PPUSH
1941: CALL_OW 257
1945: PUSH
1946: LD_INT 3
1948: EQUAL
1949: IFFALSE 2106
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1951: LD_ADDR_OWVAR 37
1955: PUSH
1956: LD_VAR 0 6
1960: PUSH
1961: LD_INT 1
1963: ARRAY
1964: PUSH
1965: LD_INT 1
1967: ARRAY
1968: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1969: LD_ADDR_OWVAR 39
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 2
1985: ARRAY
1986: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1987: LD_ADDR_OWVAR 38
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 3
2003: ARRAY
2004: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2005: LD_ADDR_OWVAR 40
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 4
2021: ARRAY
2022: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2023: LD_ADDR_VAR 0 6
2027: PUSH
2028: LD_VAR 0 6
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 3
2040: ST_TO_ADDR
// veh := CreateVehicle ;
2041: LD_ADDR_VAR 0 7
2045: PUSH
2046: CALL_OW 45
2050: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2051: LD_VAR 0 7
2055: PPUSH
2056: LD_INT 8
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2066: LD_VAR 0 2
2070: PPUSH
2071: LD_VAR 0 7
2075: PPUSH
2076: CALL_OW 52
// if i = JMM then
2080: LD_VAR 0 2
2084: PUSH
2085: LD_EXP 20
2089: EQUAL
2090: IFFALSE 2104
// SetMark ( veh , 1 ) ;
2092: LD_VAR 0 7
2096: PPUSH
2097: LD_INT 1
2099: PPUSH
2100: CALL_OW 242
// end else
2104: GO 2121
// PlaceUnitArea ( i , am_hum_start , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 9
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
// end ;
2121: GO 1933
2123: POP
2124: POP
// vc_chassis := us_medium_tracked ;
2125: LD_ADDR_OWVAR 37
2129: PUSH
2130: LD_INT 3
2132: ST_TO_ADDR
// vc_engine := engine_solar ;
2133: LD_ADDR_OWVAR 39
2137: PUSH
2138: LD_INT 2
2140: ST_TO_ADDR
// vc_control := control_computer ;
2141: LD_ADDR_OWVAR 38
2145: PUSH
2146: LD_INT 3
2148: ST_TO_ADDR
// vc_weapon := us_radar ;
2149: LD_ADDR_OWVAR 40
2153: PUSH
2154: LD_INT 11
2156: ST_TO_ADDR
// veh := CreateVehicle ;
2157: LD_ADDR_VAR 0 7
2161: PUSH
2162: CALL_OW 45
2166: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2167: LD_VAR 0 7
2171: PPUSH
2172: LD_INT 87
2174: PPUSH
2175: LD_INT 142
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 48
// end ; end_of_file
2185: LD_VAR 0 1
2189: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2190: LD_INT 0
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_INT 6
2205: PUSH
2206: LD_INT 7
2208: PUSH
2209: LD_INT 7
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_OWVAR 67
2221: ARRAY
2222: ST_TO_ADDR
// uc_side := 2 ;
2223: LD_ADDR_OWVAR 20
2227: PUSH
2228: LD_INT 2
2230: ST_TO_ADDR
// uc_nation := 2 ;
2231: LD_ADDR_OWVAR 21
2235: PUSH
2236: LD_INT 2
2238: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2239: LD_ADDR_OWVAR 37
2243: PUSH
2244: LD_INT 14
2246: ST_TO_ADDR
// vc_engine := engine_siberite ;
2247: LD_ADDR_OWVAR 39
2251: PUSH
2252: LD_INT 3
2254: ST_TO_ADDR
// vc_control := control_manual ;
2255: LD_ADDR_OWVAR 38
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2263: LD_ADDR_OWVAR 40
2267: PUSH
2268: LD_INT 31
2270: ST_TO_ADDR
// for i = 1 to 3 do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 3
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2369
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2287: LD_INT 0
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: LD_VAR 0 5
2297: PPUSH
2298: CALL_OW 380
// un := CreateVehicle ;
2302: LD_ADDR_VAR 0 4
2306: PUSH
2307: CALL_OW 45
2311: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2312: LD_VAR 0 4
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: CALL_OW 12
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2332: LD_VAR 0 4
2336: PPUSH
2337: LD_INT 156
2339: PPUSH
2340: LD_INT 15
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2353: CALL_OW 44
2357: PPUSH
2358: LD_VAR 0 4
2362: PPUSH
2363: CALL_OW 52
// end ;
2367: GO 2284
2369: POP
2370: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2371: LD_ADDR_EXP 36
2375: PUSH
2376: LD_INT 94
2378: PPUSH
2379: LD_INT 28
2381: PPUSH
2382: LD_STRING dammam
2384: PPUSH
2385: LD_VAR 0 5
2389: PPUSH
2390: LD_INT 10000
2392: PUSH
2393: LD_INT 1000
2395: PUSH
2396: LD_INT 300
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_INT 5
2410: PUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 4
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PPUSH
2424: CALL 54612 0 6
2428: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2429: LD_ADDR_EXP 36
2433: PUSH
2434: LD_EXP 36
2438: PUSH
2439: LD_INT 122
2441: PPUSH
2442: LD_INT 25
2444: PPUSH
2445: LD_STRING 
2447: PPUSH
2448: LD_VAR 0 5
2452: PPUSH
2453: LD_INT 500
2455: PUSH
2456: LD_INT 60
2458: PUSH
2459: LD_INT 0
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: PPUSH
2467: LD_INT 1
2469: NEG
2470: PUSH
2471: LD_INT 4
2473: PUSH
2474: LD_INT 2
2476: PUSH
2477: LD_INT 0
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PPUSH
2486: CALL 54612 0 6
2490: UNION
2491: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2492: LD_ADDR_EXP 34
2496: PUSH
2497: LD_INT 45
2499: PPUSH
2500: LD_INT 24
2502: PPUSH
2503: LD_STRING jeddah
2505: PPUSH
2506: LD_VAR 0 5
2510: PPUSH
2511: LD_INT 700
2513: PUSH
2514: LD_INT 300
2516: PUSH
2517: LD_INT 10
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PPUSH
2525: LD_INT 1
2527: NEG
2528: PUSH
2529: LD_INT 5
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: LD_INT 2
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: PPUSH
2544: CALL 54612 0 6
2548: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2549: LD_ADDR_EXP 35
2553: PUSH
2554: LD_INT 7
2556: PPUSH
2557: LD_INT 27
2559: PPUSH
2560: LD_STRING riyadh
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 500
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: LD_INT 0
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: LD_INT 3
2590: PUSH
2591: LD_INT 1
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL 54612 0 6
2604: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2605: LD_ADDR_EXP 38
2609: PUSH
2610: LD_INT 204
2612: PPUSH
2613: LD_INT 26
2615: PPUSH
2616: LD_STRING 
2618: PPUSH
2619: LD_VAR 0 5
2623: PPUSH
2624: LD_INT 500
2626: PUSH
2627: LD_INT 50
2629: PUSH
2630: LD_INT 0
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PPUSH
2638: LD_INT 1
2640: NEG
2641: PUSH
2642: LD_INT 3
2644: PUSH
2645: LD_INT 3
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL 54612 0 6
2661: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2662: LD_ADDR_EXP 49
2666: PUSH
2667: LD_EXP 36
2671: PUSH
2672: LD_EXP 34
2676: PUSH
2677: LD_EXP 38
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 31
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 58
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: FOR_IN
2729: IFFALSE 2854
// begin if GetBase ( i ) then
2731: LD_VAR 0 2
2735: PPUSH
2736: CALL_OW 274
2740: IFFALSE 2744
// continue ;
2742: GO 2728
// d := GetDir ( i ) ;
2744: LD_ADDR_VAR 0 3
2748: PUSH
2749: LD_VAR 0 2
2753: PPUSH
2754: CALL_OW 254
2758: ST_TO_ADDR
// if d < 3 then
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 3
2766: LESS
2767: IFFALSE 2785
// d := d + 3 else
2769: LD_ADDR_VAR 0 3
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: LD_INT 3
2781: PLUS
2782: ST_TO_ADDR
2783: GO 2799
// d := d - 3 ;
2785: LD_ADDR_VAR 0 3
2789: PUSH
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 3
2797: MINUS
2798: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_INT 8
2804: PPUSH
2805: LD_VAR 0 5
2809: PPUSH
2810: CALL_OW 380
// un := CreateHuman ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: CALL_OW 44
2823: ST_TO_ADDR
// SetDir ( un , d ) ;
2824: LD_VAR 0 4
2828: PPUSH
2829: LD_VAR 0 3
2833: PPUSH
2834: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// end ;
2852: GO 2728
2854: POP
2855: POP
// if Difficulty > 1 then
2856: LD_OWVAR 67
2860: PUSH
2861: LD_INT 1
2863: GREATER
2864: IFFALSE 3235
// begin ar_kamikadze := [ ] ;
2866: LD_ADDR_EXP 41
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_VAR 0 5
2883: PPUSH
2884: CALL_OW 380
// un := CreateHuman ;
2888: LD_ADDR_VAR 0 4
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2898: LD_VAR 0 4
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 23
2917: PPUSH
2918: LD_INT 44
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 48
// ComCrawl ( un ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: CALL_OW 137
// un := CreateHuman ;
2937: LD_ADDR_VAR 0 4
2941: PUSH
2942: CALL_OW 44
2946: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2947: LD_VAR 0 4
2951: PPUSH
2952: LD_INT 3
2954: PPUSH
2955: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 30
2966: PPUSH
2967: LD_INT 39
2969: PPUSH
2970: LD_INT 0
2972: PPUSH
2973: CALL_OW 48
// ComCrawl ( un ) ;
2977: LD_VAR 0 4
2981: PPUSH
2982: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_INT 17
2991: PPUSH
2992: LD_VAR 0 5
2996: PPUSH
2997: CALL_OW 380
// un := CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_INT 3
3018: PPUSH
3019: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3023: LD_VAR 0 4
3027: PPUSH
3028: LD_INT 45
3030: PPUSH
3031: LD_INT 86
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( un ) ;
3041: LD_VAR 0 4
3045: PPUSH
3046: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3050: LD_ADDR_EXP 41
3054: PUSH
3055: LD_EXP 41
3059: PPUSH
3060: LD_EXP 41
3064: PUSH
3065: LD_INT 1
3067: PLUS
3068: PPUSH
3069: LD_VAR 0 4
3073: PPUSH
3074: CALL_OW 1
3078: ST_TO_ADDR
// un := CreateHuman ;
3079: LD_ADDR_VAR 0 4
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3089: LD_VAR 0 4
3093: PPUSH
3094: LD_INT 3
3096: PPUSH
3097: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3101: LD_VAR 0 4
3105: PPUSH
3106: LD_INT 60
3108: PPUSH
3109: LD_INT 85
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 48
// ComHold ( un ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3128: LD_ADDR_EXP 41
3132: PUSH
3133: LD_EXP 41
3137: PPUSH
3138: LD_EXP 41
3142: PUSH
3143: LD_INT 1
3145: PLUS
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: CALL_OW 1
3156: ST_TO_ADDR
// un := CreateHuman ;
3157: LD_ADDR_VAR 0 4
3161: PUSH
3162: CALL_OW 44
3166: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3179: LD_VAR 0 4
3183: PPUSH
3184: LD_INT 222
3186: PPUSH
3187: LD_INT 166
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 48
// ComHold ( un ) ;
3197: LD_VAR 0 4
3201: PPUSH
3202: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3206: LD_ADDR_EXP 41
3210: PUSH
3211: LD_EXP 41
3215: PPUSH
3216: LD_EXP 41
3220: PUSH
3221: LD_INT 1
3223: PLUS
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: CALL_OW 1
3234: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3235: LD_ADDR_EXP 39
3239: PUSH
3240: EMPTY
3241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3242: LD_INT 1
3244: PPUSH
3245: LD_INT 1
3247: PPUSH
3248: LD_VAR 0 5
3252: PPUSH
3253: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3257: LD_ADDR_OWVAR 26
3261: PUSH
3262: LD_STRING Pavel Grigorovic
3264: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3265: LD_ADDR_OWVAR 33
3269: PUSH
3270: LD_STRING SecondCharsGal
3272: ST_TO_ADDR
// hc_face_number := 4 ;
3273: LD_ADDR_OWVAR 34
3277: PUSH
3278: LD_INT 4
3280: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3281: LD_ADDR_EXP 39
3285: PUSH
3286: LD_EXP 39
3290: PPUSH
3291: LD_INT 1
3293: PPUSH
3294: CALL_OW 44
3298: PPUSH
3299: CALL_OW 1
3303: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3304: LD_INT 2
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_VAR 0 5
3314: PPUSH
3315: CALL_OW 380
// hc_name := Lucy Sebel ;
3319: LD_ADDR_OWVAR 26
3323: PUSH
3324: LD_STRING Lucy Sebel
3326: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3327: LD_ADDR_OWVAR 33
3331: PUSH
3332: LD_STRING SecondCharsGal
3334: ST_TO_ADDR
// hc_face_number := 15 ;
3335: LD_ADDR_OWVAR 34
3339: PUSH
3340: LD_INT 15
3342: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3343: LD_ADDR_EXP 39
3347: PUSH
3348: LD_EXP 39
3352: PPUSH
3353: LD_INT 2
3355: PPUSH
3356: CALL_OW 44
3360: PPUSH
3361: CALL_OW 1
3365: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3366: LD_INT 2
3368: PPUSH
3369: LD_INT 4
3371: PPUSH
3372: LD_VAR 0 5
3376: PPUSH
3377: CALL_OW 380
// hc_gallery :=  ;
3381: LD_ADDR_OWVAR 33
3385: PUSH
3386: LD_STRING 
3388: ST_TO_ADDR
// hc_name :=  ;
3389: LD_ADDR_OWVAR 26
3393: PUSH
3394: LD_STRING 
3396: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3397: LD_ADDR_EXP 39
3401: PUSH
3402: LD_EXP 39
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: CALL_OW 44
3414: PPUSH
3415: CALL_OW 1
3419: ST_TO_ADDR
// hc_sex := sex_male ;
3420: LD_ADDR_OWVAR 27
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// hc_class = 11 ;
3428: LD_ADDR_OWVAR 28
3432: PUSH
3433: LD_INT 11
3435: ST_TO_ADDR
// hc_gallery = sandar ;
3436: LD_ADDR_OWVAR 33
3440: PUSH
3441: LD_STRING sandar
3443: ST_TO_ADDR
// hc_face_number = 33 ;
3444: LD_ADDR_OWVAR 34
3448: PUSH
3449: LD_INT 33
3451: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3452: LD_ADDR_OWVAR 26
3456: PUSH
3457: LD_STRING Thabit Muhair Saliba
3459: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3460: LD_ADDR_OWVAR 31
3464: PUSH
3465: LD_INT 0
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 0
3473: PUSH
3474: LD_INT 0
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: ST_TO_ADDR
// Saliba = CreateHuman ;
3483: LD_ADDR_EXP 43
3487: PUSH
3488: CALL_OW 44
3492: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3493: LD_EXP 43
3497: PPUSH
3498: LD_INT 7
3500: PPUSH
3501: CALL_OW 52
// if gensher_active then
3505: LD_EXP 18
3509: IFFALSE 3536
// begin Gensher = NewCharacter ( Dietrich ) ;
3511: LD_ADDR_EXP 44
3515: PUSH
3516: LD_STRING Dietrich
3518: PPUSH
3519: CALL_OW 25
3523: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3524: LD_EXP 44
3528: PPUSH
3529: LD_INT 94
3531: PPUSH
3532: CALL_OW 52
// end ; InitHc ;
3536: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3540: LD_ADDR_EXP 40
3544: PUSH
3545: EMPTY
3546: ST_TO_ADDR
// for i = 1 to 5 do
3547: LD_ADDR_VAR 0 2
3551: PUSH
3552: DOUBLE
3553: LD_INT 1
3555: DEC
3556: ST_TO_ADDR
3557: LD_INT 5
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3733
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3563: LD_INT 13
3565: PUSH
3566: LD_INT 14
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 1
3587: PUSH
3588: LD_INT 2
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 2
3600: PPUSH
3601: CALL_OW 12
3605: ARRAY
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 27
3615: PUSH
3616: LD_INT 26
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 1
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: CALL_OW 12
3634: ARRAY
3635: PPUSH
3636: LD_INT 60
3638: PPUSH
3639: LD_INT 100
3641: PPUSH
3642: CALL_OW 12
3646: PPUSH
3647: CALL 51203 0 5
// un := CreateVehicle ;
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: CALL_OW 45
3660: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3661: LD_ADDR_EXP 40
3665: PUSH
3666: LD_EXP 40
3670: PPUSH
3671: LD_EXP 40
3675: PUSH
3676: LD_INT 1
3678: PLUS
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 1
3689: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3690: LD_VAR 0 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: LD_INT 5
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_INT 124
3717: PPUSH
3718: LD_INT 141
3720: PPUSH
3721: LD_INT 8
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 50
// end ;
3731: GO 3560
3733: POP
3734: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3735: LD_ADDR_EXP 42
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 3
3763: PUSH
3764: LD_INT 3
3766: PUSH
3767: LD_INT 4
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3996
// for i = 1 to 3 do
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: DOUBLE
3790: LD_INT 1
3792: DEC
3793: ST_TO_ADDR
3794: LD_INT 3
3796: PUSH
3797: FOR_TO
3798: IFFALSE 3992
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3800: LD_INT 14
3802: PPUSH
3803: LD_INT 3
3805: PUSH
3806: LD_INT 2
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 2
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: PPUSH
3825: LD_INT 1
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: PPUSH
3847: LD_INT 25
3849: PUSH
3850: LD_INT 27
3852: PUSH
3853: LD_INT 26
3855: PUSH
3856: LD_INT 28
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 1
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: CALL_OW 12
3875: ARRAY
3876: PPUSH
3877: LD_INT 100
3879: PPUSH
3880: CALL 51203 0 5
// un := CreateVehicle ;
3884: LD_ADDR_VAR 0 4
3888: PUSH
3889: CALL_OW 45
3893: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3894: LD_ADDR_EXP 42
3898: PUSH
3899: LD_EXP 42
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_EXP 42
3913: PUSH
3914: LD_VAR 0 2
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: PLUS
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: CALL 51325 0 3
3937: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: LD_INT 5
3948: PPUSH
3949: CALL_OW 12
3953: PPUSH
3954: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_INT 20
3965: PUSH
3966: LD_INT 21
3968: PUSH
3969: LD_INT 22
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 2
3981: ARRAY
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// end ;
3990: GO 3797
3992: POP
3993: POP
3994: GO 3781
3996: POP
3997: POP
// InitHc ;
3998: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: LD_INT 10
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 58
// end ;
4021: LD_VAR 0 1
4025: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4026: LD_EXP 41
4030: IFFALSE 4104
4032: GO 4034
4034: DISABLE
4035: LD_INT 0
4037: PPUSH
// begin enable ;
4038: ENABLE
// for i in ar_kamikadze do
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_EXP 41
4048: PUSH
4049: FOR_IN
4050: IFFALSE 4102
// if See ( 1 , i ) then
4052: LD_INT 1
4054: PPUSH
4055: LD_VAR 0 1
4059: PPUSH
4060: CALL_OW 292
4064: IFFALSE 4100
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4066: LD_VAR 0 1
4070: PPUSH
4071: LD_INT 81
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 69
4085: PPUSH
4086: LD_VAR 0 1
4090: PPUSH
4091: CALL_OW 74
4095: PPUSH
4096: CALL_OW 115
4100: GO 4049
4102: POP
4103: POP
// end ;
4104: PPOPN 1
4106: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4107: LD_EXP 13
4111: IFFALSE 4428
4113: GO 4115
4115: DISABLE
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4122: LD_INT 35
4124: PPUSH
4125: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4129: LD_INT 1
4131: PPUSH
4132: CALL 39081 0 1
4136: PUSH
4137: LD_INT 0
4139: EQUAL
4140: IFFALSE 4122
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 14
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 2
4153: PUSH
4154: LD_INT 32
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: EMPTY
4164: LIST
4165: PPUSH
4166: CALL 38627 0 2
// repeat wait ( 0 0$1 ) ;
4170: LD_INT 35
4172: PPUSH
4173: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4177: LD_EXP 68
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_INT 33
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 34
4198: PUSH
4199: LD_INT 32
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 72
4214: IFFALSE 4170
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4216: LD_ADDR_VAR 0 2
4220: PUSH
4221: LD_EXP 68
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PPUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 34
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4263: LD_ADDR_VAR 0 4
4267: PUSH
4268: LD_INT 5
4270: PPUSH
4271: CALL_OW 469
4275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 5
4290: PPUSH
4291: CALL_OW 469
4295: ST_TO_ADDR
// tmp := 100 ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: LD_INT 100
4303: ST_TO_ADDR
// if pos then
4304: LD_VAR 0 4
4308: IFFALSE 4348
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4310: LD_ADDR_VAR 0 3
4314: PUSH
4315: LD_INT 2
4317: PPUSH
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 1
4325: ARRAY
4326: PPUSH
4327: LD_VAR 0 4
4331: PUSH
4332: LD_INT 2
4334: ARRAY
4335: PPUSH
4336: LD_INT 20
4338: PPUSH
4339: CALL 52221 0 4
4343: PUSH
4344: LD_INT 4
4346: ARRAY
4347: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4348: LD_VAR 0 4
4352: PUSH
4353: LD_EXP 14
4357: NOT
4358: AND
4359: PUSH
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 10
4367: LESS
4368: AND
4369: IFFALSE 4276
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4371: LD_VAR 0 2
4375: PPUSH
4376: LD_VAR 0 4
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: PPUSH
4385: LD_VAR 0 4
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4398: LD_VAR 0 2
4402: PPUSH
4403: LD_INT 198
4405: PPUSH
4406: LD_INT 113
4408: PPUSH
4409: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4413: LD_VAR 0 2
4417: PPUSH
4418: LD_INT 124
4420: PPUSH
4421: LD_INT 7
4423: PPUSH
4424: CALL_OW 171
// end ;
4428: PPOPN 4
4430: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4431: LD_EXP 6
4435: IFFALSE 7092
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
4449: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4450: LD_ADDR_VAR 0 4
4454: PUSH
4455: LD_INT 5
4457: PUSH
4458: LD_INT 6
4460: PUSH
4461: LD_INT 7
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: PUSH
4469: LD_OWVAR 67
4473: ARRAY
4474: ST_TO_ADDR
// coords := [ ] ;
4475: LD_ADDR_VAR 0 5
4479: PUSH
4480: EMPTY
4481: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4482: LD_ADDR_VAR 0 6
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: LD_INT 0
4498: PUSH
4499: LD_INT 1
4501: PUSH
4502: LD_INT 0
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4529: LD_INT 1
4531: PPUSH
4532: LD_INT 14
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: LD_INT 2
4540: PUSH
4541: LD_INT 28
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 14
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: LD_INT 25
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 14
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 28
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 14
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: LD_INT 29
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PPUSH
4610: CALL 38627 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4614: LD_INT 21000
4616: PUSH
4617: LD_INT 19950
4619: PUSH
4620: LD_INT 18900
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_OWVAR 67
4632: ARRAY
4633: PPUSH
4634: CALL_OW 67
// InitHc ;
4638: CALL_OW 19
// InitUc ;
4642: CALL_OW 18
// uc_side := 2 ;
4646: LD_ADDR_OWVAR 20
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// uc_nation := 2 ;
4654: LD_ADDR_OWVAR 21
4658: PUSH
4659: LD_INT 2
4661: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: LD_VAR 0 3
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 68
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PUSH
4706: LD_INT 34
4708: PUSH
4709: LD_INT 32
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: DIFF
4721: PPUSH
4722: CALL_OW 1
4726: ST_TO_ADDR
// for i = 1 to Difficulty do
4727: LD_ADDR_VAR 0 1
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_OWVAR 67
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4881
// begin uc_side := 2 ;
4745: LD_ADDR_OWVAR 20
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// uc_nation := 2 ;
4753: LD_ADDR_OWVAR 21
4757: PUSH
4758: LD_INT 2
4760: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4761: LD_INT 13
4763: PPUSH
4764: LD_INT 3
4766: PPUSH
4767: LD_INT 5
4769: PPUSH
4770: LD_INT 29
4772: PPUSH
4773: LD_INT 100
4775: PPUSH
4776: CALL 51203 0 5
// un := CreateVehicle ;
4780: LD_ADDR_VAR 0 2
4784: PUSH
4785: CALL_OW 45
4789: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_INT 1
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: ARRAY
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PPUSH
4820: LD_VAR 0 2
4824: PPUSH
4825: CALL 51325 0 3
4829: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4830: LD_VAR 0 2
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4842: LD_VAR 0 2
4846: PPUSH
4847: LD_INT 16
4849: PPUSH
4850: LD_INT 0
4852: PPUSH
4853: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 51
4864: PPUSH
4865: LD_INT 10
4867: PPUSH
4868: CALL_OW 111
// wait ( 0 0$2 ) ;
4872: LD_INT 70
4874: PPUSH
4875: CALL_OW 67
// end ;
4879: GO 4742
4881: POP
4882: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4883: LD_ADDR_VAR 0 5
4887: PUSH
4888: LD_INT 51
4890: PUSH
4891: LD_INT 24
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 75
4900: PUSH
4901: LD_INT 90
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_VAR 0 3
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_VAR 0 5
4928: PPUSH
4929: LD_VAR 0 6
4933: PPUSH
4934: CALL 38918 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4938: LD_ADDR_VAR 0 1
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 2
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: PUSH
4962: LD_OWVAR 67
4966: ARRAY
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5069
// begin uc_side := 2 ;
4971: LD_ADDR_OWVAR 20
4975: PUSH
4976: LD_INT 2
4978: ST_TO_ADDR
// uc_nation := 2 ;
4979: LD_ADDR_OWVAR 21
4983: PUSH
4984: LD_INT 2
4986: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4987: LD_INT 0
4989: PPUSH
4990: LD_INT 17
4992: PPUSH
4993: LD_VAR 0 4
4997: PPUSH
4998: CALL_OW 380
// un := CreateHuman ;
5002: LD_ADDR_VAR 0 2
5006: PUSH
5007: CALL_OW 44
5011: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: LD_VAR 0 3
5021: PPUSH
5022: LD_INT 2
5024: PUSH
5025: LD_VAR 0 3
5029: PUSH
5030: LD_INT 2
5032: ARRAY
5033: PUSH
5034: LD_INT 1
5036: PLUS
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PPUSH
5042: LD_VAR 0 2
5046: PPUSH
5047: CALL 51325 0 3
5051: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5052: LD_VAR 0 2
5056: PPUSH
5057: LD_INT 13
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4968
5069: POP
5070: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_INT 2
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: LD_INT 3
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_OWVAR 67
5099: ARRAY
5100: PUSH
5101: FOR_TO
5102: IFFALSE 5221
// begin uc_side := 2 ;
5104: LD_ADDR_OWVAR 20
5108: PUSH
5109: LD_INT 2
5111: ST_TO_ADDR
// uc_nation := 2 ;
5112: LD_ADDR_OWVAR 21
5116: PUSH
5117: LD_INT 2
5119: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5120: LD_INT 0
5122: PPUSH
5123: LD_INT 1
5125: PUSH
5126: LD_INT 8
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 1
5135: PPUSH
5136: LD_INT 2
5138: PPUSH
5139: CALL_OW 12
5143: ARRAY
5144: PPUSH
5145: LD_VAR 0 4
5149: PPUSH
5150: CALL_OW 380
// un := CreateHuman ;
5154: LD_ADDR_VAR 0 2
5158: PUSH
5159: CALL_OW 44
5163: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_VAR 0 3
5173: PPUSH
5174: LD_INT 2
5176: PUSH
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PUSH
5186: LD_INT 1
5188: PLUS
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 51325 0 3
5203: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5204: LD_VAR 0 2
5208: PPUSH
5209: LD_INT 13
5211: PPUSH
5212: LD_INT 0
5214: PPUSH
5215: CALL_OW 49
// end ;
5219: GO 5101
5221: POP
5222: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5223: LD_ADDR_VAR 0 5
5227: PUSH
5228: LD_INT 67
5230: PUSH
5231: LD_INT 112
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 85
5240: PUSH
5241: LD_INT 130
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5252: LD_INT 2
5254: PPUSH
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 2
5262: ARRAY
5263: PPUSH
5264: LD_VAR 0 5
5268: PPUSH
5269: LD_VAR 0 6
5273: PPUSH
5274: CALL 38918 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5278: LD_ADDR_VAR 0 1
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_INT 1
5290: PUSH
5291: LD_INT 2
5293: PUSH
5294: LD_INT 3
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PUSH
5308: FOR_TO
5309: IFFALSE 5409
// begin uc_side := 2 ;
5311: LD_ADDR_OWVAR 20
5315: PUSH
5316: LD_INT 2
5318: ST_TO_ADDR
// uc_nation := 2 ;
5319: LD_ADDR_OWVAR 21
5323: PUSH
5324: LD_INT 2
5326: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5327: LD_INT 0
5329: PPUSH
5330: LD_INT 17
5332: PPUSH
5333: LD_VAR 0 4
5337: PPUSH
5338: CALL_OW 380
// un := CreateHuman ;
5342: LD_ADDR_VAR 0 2
5346: PUSH
5347: CALL_OW 44
5351: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_VAR 0 3
5361: PPUSH
5362: LD_INT 3
5364: PUSH
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 3
5372: ARRAY
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PPUSH
5382: LD_VAR 0 2
5386: PPUSH
5387: CALL 51325 0 3
5391: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_INT 14
5399: PPUSH
5400: LD_INT 0
5402: PPUSH
5403: CALL_OW 49
// end ;
5407: GO 5308
5409: POP
5410: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5411: LD_ADDR_VAR 0 5
5415: PUSH
5416: LD_INT 148
5418: PUSH
5419: LD_INT 158
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 148
5428: PUSH
5429: LD_INT 158
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5440: LD_INT 3
5442: PPUSH
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 3
5450: ARRAY
5451: PPUSH
5452: LD_VAR 0 5
5456: PPUSH
5457: LD_VAR 0 6
5461: PPUSH
5462: CALL 38918 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 3
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: LD_INT 4
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: LD_OWVAR 67
5494: ARRAY
5495: PUSH
5496: FOR_TO
5497: IFFALSE 5721
// begin uc_side := 2 ;
5499: LD_ADDR_OWVAR 20
5503: PUSH
5504: LD_INT 2
5506: ST_TO_ADDR
// uc_nation := 2 ;
5507: LD_ADDR_OWVAR 21
5511: PUSH
5512: LD_INT 2
5514: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5515: LD_INT 14
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: LD_INT 1
5523: PUSH
5524: LD_INT 5
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 1
5533: PPUSH
5534: LD_INT 2
5536: PPUSH
5537: CALL_OW 12
5541: ARRAY
5542: PPUSH
5543: LD_INT 27
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 28
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: CALL_OW 12
5567: ARRAY
5568: PPUSH
5569: LD_INT 100
5571: PPUSH
5572: CALL 51203 0 5
// un := CreateVehicle ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: CALL_OW 45
5585: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: LD_INT 4
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 4
5606: ARRAY
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL 51325 0 3
5625: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_INT 5
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_INT 15
5645: PPUSH
5646: LD_INT 0
5648: PPUSH
5649: CALL_OW 49
// if GetControl ( un ) = control_manual then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 263
5662: PUSH
5663: LD_INT 1
5665: EQUAL
5666: IFFALSE 5697
// begin PrepareHuman ( false , 3 , skill ) ;
5668: LD_INT 0
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: LD_VAR 0 4
5678: PPUSH
5679: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5683: CALL_OW 44
5687: PPUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_INT 179
5704: PPUSH
5705: LD_INT 135
5707: PPUSH
5708: CALL_OW 111
// wait ( 0 0$2 ) ;
5712: LD_INT 70
5714: PPUSH
5715: CALL_OW 67
// end ;
5719: GO 5496
5721: POP
5722: POP
// vc_chassis := 15 ;
5723: LD_ADDR_OWVAR 37
5727: PUSH
5728: LD_INT 15
5730: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5731: LD_ADDR_VAR 0 3
5735: PUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_INT 4
5743: PUSH
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 4
5751: ARRAY
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 45
5765: PPUSH
5766: CALL 51325 0 3
5770: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 4
5778: ARRAY
5779: PUSH
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 4
5787: ARRAY
5788: ARRAY
5789: PPUSH
5790: LD_INT 15
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5800: LD_INT 0
5802: PPUSH
5803: LD_INT 11
5805: PPUSH
5806: LD_VAR 0 4
5810: PPUSH
5811: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_INT 4
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_INT 4
5835: ARRAY
5836: PUSH
5837: LD_INT 1
5839: PLUS
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 44
5849: PPUSH
5850: CALL 51325 0 3
5854: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 4
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_INT 4
5871: ARRAY
5872: ARRAY
5873: PPUSH
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: PUSH
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 4
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: MINUS
5895: ARRAY
5896: PPUSH
5897: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: LD_INT 148
5908: PUSH
5909: LD_INT 140
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5919: LD_INT 1
5921: PPUSH
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 4
5929: ARRAY
5930: PPUSH
5931: LD_VAR 0 5
5935: PPUSH
5936: LD_VAR 0 6
5940: PPUSH
5941: CALL 38918 0 4
// if gensher_active then
5945: LD_EXP 18
5949: IFFALSE 6334
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5951: LD_EXP 44
5955: PPUSH
5956: LD_STRING D10-Diet-1
5958: PPUSH
5959: CALL_OW 94
// for i = 1 to 2 do
5963: LD_ADDR_VAR 0 1
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 2
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6115
// begin uc_side := 2 ;
5979: LD_ADDR_OWVAR 20
5983: PUSH
5984: LD_INT 2
5986: ST_TO_ADDR
// uc_nation := 2 ;
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_INT 2
5994: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5995: LD_INT 13
5997: PPUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 5
6003: PPUSH
6004: LD_INT 29
6006: PPUSH
6007: LD_INT 100
6009: PPUSH
6010: CALL 51203 0 5
// un := CreateVehicle ;
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: CALL_OW 45
6023: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6024: LD_ADDR_VAR 0 3
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 5
6036: PUSH
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 5
6044: ARRAY
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL 51325 0 3
6063: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_INT 23
6083: PPUSH
6084: LD_INT 0
6086: PPUSH
6087: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6091: LD_VAR 0 2
6095: PPUSH
6096: LD_INT 85
6098: PPUSH
6099: LD_INT 152
6101: PPUSH
6102: CALL_OW 111
// wait ( 0 0$2 ) ;
6106: LD_INT 70
6108: PPUSH
6109: CALL_OW 67
// end ;
6113: GO 5976
6115: POP
6116: POP
// for i = 1 to 3 do
6117: LD_ADDR_VAR 0 1
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_INT 3
6129: PUSH
6130: FOR_TO
6131: IFFALSE 6288
// begin uc_side := 2 ;
6133: LD_ADDR_OWVAR 20
6137: PUSH
6138: LD_INT 2
6140: ST_TO_ADDR
// uc_nation := 2 ;
6141: LD_ADDR_OWVAR 21
6145: PUSH
6146: LD_INT 2
6148: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6149: LD_INT 14
6151: PPUSH
6152: LD_INT 3
6154: PPUSH
6155: LD_INT 5
6157: PPUSH
6158: LD_INT 27
6160: PUSH
6161: LD_INT 28
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 1
6170: PPUSH
6171: LD_INT 2
6173: PPUSH
6174: CALL_OW 12
6178: ARRAY
6179: PPUSH
6180: LD_INT 100
6182: PPUSH
6183: CALL 51203 0 5
// un := CreateVehicle ;
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: CALL_OW 45
6196: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_VAR 0 3
6206: PPUSH
6207: LD_INT 5
6209: PUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 5
6217: ARRAY
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PPUSH
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL 51325 0 3
6236: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6237: LD_VAR 0 2
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6249: LD_VAR 0 2
6253: PPUSH
6254: LD_INT 23
6256: PPUSH
6257: LD_INT 0
6259: PPUSH
6260: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6264: LD_VAR 0 2
6268: PPUSH
6269: LD_INT 85
6271: PPUSH
6272: LD_INT 152
6274: PPUSH
6275: CALL_OW 111
// wait ( 0 0$2 ) ;
6279: LD_INT 70
6281: PPUSH
6282: CALL_OW 67
// end ;
6286: GO 6130
6288: POP
6289: POP
// coords := [ [ 97 , 143 ] ] ;
6290: LD_ADDR_VAR 0 5
6294: PUSH
6295: LD_INT 97
6297: PUSH
6298: LD_INT 143
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6308: LD_INT 1
6310: PPUSH
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 5
6318: ARRAY
6319: PPUSH
6320: LD_VAR 0 5
6324: PPUSH
6325: LD_VAR 0 6
6329: PPUSH
6330: CALL 38918 0 4
// end ; Wait ( 13 13$00 ) ;
6334: LD_INT 27300
6336: PPUSH
6337: CALL_OW 67
// tmp := [ ] ;
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: EMPTY
6347: ST_TO_ADDR
// w := 1 ;
6348: LD_ADDR_VAR 0 7
6352: PUSH
6353: LD_INT 1
6355: ST_TO_ADDR
// repeat tmp := [ ] ;
6356: LD_ADDR_VAR 0 3
6360: PUSH
6361: EMPTY
6362: ST_TO_ADDR
// if w mod 4 = 0 then
6363: LD_VAR 0 7
6367: PUSH
6368: LD_INT 4
6370: MOD
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6462
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6377: LD_ADDR_VAR 0 8
6381: PUSH
6382: LD_INT 11
6384: PUSH
6385: LD_INT 1
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 24
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 11
6402: PUSH
6403: LD_INT 1
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: LD_INT 24
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 11
6420: PUSH
6421: LD_INT 1
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 24
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 11
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 24
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 6564
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6462: LD_ADDR_VAR 0 8
6466: PUSH
6467: LD_INT 14
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 28
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 14
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 25
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 14
6505: PUSH
6506: LD_INT 1
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 28
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 14
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: LD_INT 29
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 11
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: LD_INT 24
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: ST_TO_ADDR
// if w mod 3 = 0 then
6564: LD_VAR 0 7
6568: PUSH
6569: LD_INT 3
6571: MOD
6572: PUSH
6573: LD_INT 0
6575: EQUAL
6576: IFFALSE 6652
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6578: LD_ADDR_VAR 0 8
6582: PUSH
6583: LD_VAR 0 8
6587: PPUSH
6588: LD_INT 1
6590: PUSH
6591: LD_VAR 0 8
6595: PUSH
6596: LD_VAR 0 1
6600: ARRAY
6601: PUSH
6602: LD_INT 1
6604: PLUS
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: LD_INT 14
6612: PUSH
6613: LD_INT 1
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 28
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 1
6631: PPUSH
6632: LD_INT 2
6634: PPUSH
6635: CALL_OW 12
6639: ARRAY
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL 51325 0 3
6651: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6652: LD_INT 1
6654: PPUSH
6655: LD_VAR 0 8
6659: PPUSH
6660: CALL 38627 0 2
// if GetSide ( ar_dep_w ) = 2 then
6664: LD_INT 45
6666: PPUSH
6667: CALL_OW 255
6671: PUSH
6672: LD_INT 2
6674: EQUAL
6675: IFFALSE 6760
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6677: LD_ADDR_VAR 0 8
6681: PUSH
6682: LD_INT 14
6684: PUSH
6685: LD_INT 1
6687: PUSH
6688: LD_INT 2
6690: PUSH
6691: LD_INT 28
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 14
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 27
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 27
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6741: LD_INT 2
6743: PPUSH
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL 38627 0 2
// wait ( 0 0$50 ) ;
6753: LD_INT 1750
6755: PPUSH
6756: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6767: LD_EXP 68
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_INT 3
6778: PUSH
6779: LD_INT 34
6781: PUSH
6782: LD_INT 32
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 72
6797: PUSH
6798: LD_INT 4
6800: GREATEREQUAL
6801: IFFALSE 6760
// wait ( 0 0$10 ) ;
6803: LD_INT 350
6805: PPUSH
6806: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6810: LD_ADDR_VAR 0 3
6814: PUSH
6815: LD_EXP 68
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_INT 3
6826: PUSH
6827: LD_INT 34
6829: PUSH
6830: LD_INT 32
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PPUSH
6841: CALL_OW 72
6845: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6846: LD_INT 100
6848: PPUSH
6849: CALL_OW 13
6853: PUSH
6854: LD_INT 50
6856: LESS
6857: IFFALSE 6890
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6859: LD_ADDR_VAR 0 5
6863: PUSH
6864: LD_INT 55
6866: PUSH
6867: LD_INT 7
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 75
6876: PUSH
6877: LD_INT 90
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: ST_TO_ADDR
6888: GO 6919
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6890: LD_ADDR_VAR 0 5
6894: PUSH
6895: LD_INT 128
6897: PUSH
6898: LD_INT 94
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 180
6907: PUSH
6908: LD_INT 135
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: ST_TO_ADDR
// if w mod 4 = 0 then
6919: LD_VAR 0 7
6923: PUSH
6924: LD_INT 4
6926: MOD
6927: PUSH
6928: LD_INT 0
6930: EQUAL
6931: IFFALSE 6962
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6933: LD_ADDR_VAR 0 5
6937: PUSH
6938: LD_INT 91
6940: PUSH
6941: LD_INT 58
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 117
6950: PUSH
6951: LD_INT 107
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6962: LD_INT 1
6964: PPUSH
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_VAR 0 5
6974: PPUSH
6975: LD_VAR 0 6
6979: PPUSH
6980: CALL 38918 0 4
// if mc_vehicles [ 2 ] then
6984: LD_EXP 68
6988: PUSH
6989: LD_INT 2
6991: ARRAY
6992: IFFALSE 7028
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6994: LD_INT 2
6996: PPUSH
6997: LD_EXP 68
7001: PUSH
7002: LD_INT 2
7004: ARRAY
7005: PPUSH
7006: LD_INT 73
7008: PUSH
7009: LD_INT 115
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: PPUSH
7019: LD_VAR 0 6
7023: PPUSH
7024: CALL 38918 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7028: LD_INT 22050
7030: PPUSH
7031: LD_INT 28350
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 67
// w := w + 1 ;
7043: LD_ADDR_VAR 0 7
7047: PUSH
7048: LD_VAR 0 7
7052: PUSH
7053: LD_INT 1
7055: PLUS
7056: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7057: LD_INT 94
7059: PPUSH
7060: CALL_OW 301
7064: PUSH
7065: LD_EXP 49
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: NOT
7089: OR
7090: IFFALSE 6356
// end ;
7092: PPOPN 8
7094: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7095: LD_INT 204
7097: IFFALSE 7571
7099: GO 7101
7101: DISABLE
7102: LD_INT 0
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
// begin enable ;
7108: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7109: LD_INT 35
7111: PPUSH
7112: LD_INT 1190
7114: PPUSH
7115: CALL_OW 12
7119: PPUSH
7120: CALL_OW 67
// tmp := [ ] ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: EMPTY
7130: ST_TO_ADDR
// uc_side := 8 ;
7131: LD_ADDR_OWVAR 20
7135: PUSH
7136: LD_INT 8
7138: ST_TO_ADDR
// uc_nation := 2 ;
7139: LD_ADDR_OWVAR 21
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// InitHc ;
7147: CALL_OW 19
// for i = 1 to 3 do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_INT 3
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7292
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7167: LD_INT 13
7169: PUSH
7170: LD_INT 14
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 1
7179: PPUSH
7180: LD_INT 2
7182: PPUSH
7183: CALL_OW 12
7187: ARRAY
7188: PPUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: LD_INT 27
7197: PUSH
7198: LD_INT 28
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 2
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: PPUSH
7217: LD_INT 100
7219: PPUSH
7220: CALL 51203 0 5
// un := CreateVehicle ;
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: CALL_OW 45
7233: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7234: LD_VAR 0 3
7238: PPUSH
7239: LD_INT 4
7241: PPUSH
7242: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7246: LD_VAR 0 3
7250: PPUSH
7251: LD_INT 15
7253: PPUSH
7254: LD_INT 0
7256: PPUSH
7257: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 2
7275: PUSH
7276: LD_INT 1
7278: PLUS
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 1
7289: ST_TO_ADDR
// end ;
7290: GO 7164
7292: POP
7293: POP
// for i = 1 to 4 do
7294: LD_ADDR_VAR 0 1
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 4
7306: PUSH
7307: FOR_TO
7308: IFFALSE 7387
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7310: LD_INT 0
7312: PPUSH
7313: LD_INT 1
7315: PPUSH
7316: LD_INT 4
7318: PPUSH
7319: CALL_OW 12
7323: PPUSH
7324: LD_INT 6
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7341: LD_VAR 0 3
7345: PPUSH
7346: LD_INT 15
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: LD_VAR 0 2
7365: PPUSH
7366: LD_VAR 0 2
7370: PUSH
7371: LD_INT 1
7373: PLUS
7374: PPUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: CALL_OW 1
7384: ST_TO_ADDR
// end ;
7385: GO 7307
7387: POP
7388: POP
// wait ( 0 0$3 ) ;
7389: LD_INT 105
7391: PPUSH
7392: CALL_OW 67
// for i in tmp do
7396: LD_ADDR_VAR 0 1
7400: PUSH
7401: LD_VAR 0 2
7405: PUSH
7406: FOR_IN
7407: IFFALSE 7475
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 257
7418: PUSH
7419: LD_INT 1
7421: EQUAL
7422: PUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 247
7432: PUSH
7433: LD_INT 2
7435: EQUAL
7436: OR
7437: IFFALSE 7473
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_INT 81
7446: PUSH
7447: LD_INT 8
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 69
7458: PPUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 74
7468: PPUSH
7469: CALL_OW 115
7473: GO 7406
7475: POP
7476: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7477: LD_VAR 0 2
7481: PPUSH
7482: LD_INT 210
7484: PPUSH
7485: LD_INT 178
7487: PPUSH
7488: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7492: LD_ADDR_VAR 0 4
7496: PUSH
7497: LD_INT 10
7499: PPUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 8
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PPUSH
7510: CALL_OW 70
7514: ST_TO_ADDR
// if x then
7515: LD_VAR 0 4
7519: IFFALSE 7547
// for i in x do
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_VAR 0 4
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7545
// RemoveUnit ( i ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 64
7543: GO 7531
7545: POP
7546: POP
// wait ( 0 0$1 ) ;
7547: LD_INT 35
7549: PPUSH
7550: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7554: LD_INT 22
7556: PUSH
7557: LD_INT 8
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 69
7568: NOT
7569: IFFALSE 7477
// end ;
7571: PPOPN 4
7573: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7574: LD_INT 22
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_INT 31
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 24
7599: PUSH
7600: LD_INT 1000
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: IFFALSE 7664
7622: GO 7624
7624: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7625: LD_INT 22
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 34
7637: PUSH
7638: LD_INT 31
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: PPUSH
7654: LD_INT 106
7656: PPUSH
7657: LD_INT 14
7659: PPUSH
7660: CALL_OW 111
// end ; end_of_file
7664: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
// InGameOn ;
7673: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7677: LD_EXP 20
7681: PPUSH
7682: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7686: LD_INT 2
7688: PPUSH
7689: LD_INT 1
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7702: LD_ADDR_VAR 0 2
7706: PUSH
7707: LD_INT 22
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 25
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PPUSH
7731: CALL_OW 69
7735: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7736: LD_ADDR_VAR 0 4
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 11
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: PUSH
7770: LD_INT 1
7772: ARRAY
7773: ST_TO_ADDR
// for i = 1 to tmp do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: DOUBLE
7780: LD_INT 1
7782: DEC
7783: ST_TO_ADDR
7784: LD_VAR 0 2
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7837
// begin if i = 5 then
7792: LD_VAR 0 6
7796: PUSH
7797: LD_INT 5
7799: EQUAL
7800: IFFALSE 7804
// break ;
7802: GO 7837
// sols := Replace ( sols , i , tmp [ i ] ) ;
7804: LD_ADDR_VAR 0 5
7808: PUSH
7809: LD_VAR 0 5
7813: PPUSH
7814: LD_VAR 0 6
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_VAR 0 6
7828: ARRAY
7829: PPUSH
7830: CALL_OW 1
7834: ST_TO_ADDR
// end ;
7835: GO 7789
7837: POP
7838: POP
// tmp := ar_force_tmp ;
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: LD_EXP 39
7848: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7849: LD_VAR 0 2
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_INT 108
7860: PPUSH
7861: LD_INT 139
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: LD_EXP 20
7884: PPUSH
7885: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7889: LD_VAR 0 2
7893: PUSH
7894: LD_INT 2
7896: ARRAY
7897: PPUSH
7898: LD_INT 114
7900: PPUSH
7901: LD_INT 132
7903: PPUSH
7904: LD_INT 0
7906: PPUSH
7907: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7911: LD_VAR 0 2
7915: PUSH
7916: LD_INT 3
7918: ARRAY
7919: PPUSH
7920: LD_INT 115
7922: PPUSH
7923: LD_INT 132
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7933: LD_VAR 0 2
7937: PUSH
7938: LD_INT 2
7940: ARRAY
7941: PUSH
7942: LD_VAR 0 2
7946: PUSH
7947: LD_INT 3
7949: ARRAY
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7959: LD_VAR 0 4
7963: PPUSH
7964: LD_INT 83
7966: PPUSH
7967: LD_INT 123
7969: PPUSH
7970: CALL_OW 111
// Wait ( 0 0$01 ) ;
7974: LD_INT 35
7976: PPUSH
7977: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7981: LD_INT 90
7983: PPUSH
7984: LD_INT 144
7986: PPUSH
7987: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7991: LD_VAR 0 5
7995: PPUSH
7996: LD_INT 88
7998: PPUSH
7999: LD_INT 129
8001: PPUSH
8002: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_INT 92
8013: PUSH
8014: LD_INT 131
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 88
8023: PUSH
8024: LD_INT 127
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 91
8033: PUSH
8034: LD_INT 132
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 92
8043: PUSH
8044: LD_INT 134
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// for i = 1 to sols do
8057: LD_ADDR_VAR 0 6
8061: PUSH
8062: DOUBLE
8063: LD_INT 1
8065: DEC
8066: ST_TO_ADDR
8067: LD_VAR 0 5
8071: PUSH
8072: FOR_TO
8073: IFFALSE 8146
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8075: LD_VAR 0 5
8079: PUSH
8080: LD_VAR 0 6
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 3
8090: PUSH
8091: LD_VAR 0 6
8095: ARRAY
8096: PUSH
8097: LD_INT 1
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 3
8105: PUSH
8106: LD_VAR 0 6
8110: ARRAY
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PPUSH
8116: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8120: LD_VAR 0 5
8124: PUSH
8125: LD_VAR 0 6
8129: ARRAY
8130: PPUSH
8131: CALL_OW 197
// AddComHold ( sols ) ;
8135: LD_VAR 0 5
8139: PPUSH
8140: CALL_OW 200
// end ;
8144: GO 8072
8146: POP
8147: POP
// repeat wait ( 0 0$1 ) ;
8148: LD_INT 35
8150: PPUSH
8151: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8155: LD_VAR 0 5
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: PPUSH
8164: LD_INT 92
8166: PPUSH
8167: LD_INT 131
8169: PPUSH
8170: CALL_OW 297
8174: PUSH
8175: LD_INT 4
8177: LESS
8178: IFFALSE 8148
// CenterOnXY ( 96 , 139 ) ;
8180: LD_INT 96
8182: PPUSH
8183: LD_INT 139
8185: PPUSH
8186: CALL_OW 84
// wait ( 0 0$3 ) ;
8190: LD_INT 105
8192: PPUSH
8193: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8197: LD_INT 111
8199: PPUSH
8200: LD_INT 135
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_INT 25
8208: NEG
8209: PPUSH
8210: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8214: LD_VAR 0 2
8218: PUSH
8219: LD_INT 2
8221: ARRAY
8222: PPUSH
8223: LD_VAR 0 2
8227: PUSH
8228: LD_INT 1
8230: ARRAY
8231: PPUSH
8232: CALL_OW 250
8236: PUSH
8237: LD_INT 3
8239: PLUS
8240: PPUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 251
8254: PPUSH
8255: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8259: LD_VAR 0 2
8263: PUSH
8264: LD_INT 3
8266: ARRAY
8267: PPUSH
8268: LD_INT 7
8270: PPUSH
8271: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PUSH
8280: LD_INT 2
8282: ARRAY
8283: PPUSH
8284: LD_VAR 0 2
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PPUSH
8293: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8297: LD_INT 35
8299: PPUSH
8300: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8304: LD_VAR 0 2
8308: PUSH
8309: LD_INT 1
8311: ARRAY
8312: PPUSH
8313: LD_VAR 0 2
8317: PUSH
8318: LD_INT 2
8320: ARRAY
8321: PPUSH
8322: CALL_OW 296
8326: PUSH
8327: LD_INT 5
8329: LESS
8330: IFFALSE 8297
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8332: LD_VAR 0 2
8336: PUSH
8337: LD_INT 1
8339: ARRAY
8340: PPUSH
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 2
8348: ARRAY
8349: PPUSH
8350: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8354: LD_VAR 0 2
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: LD_STRING D1a-Merc1-1
8365: PPUSH
8366: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 2
8377: ARRAY
8378: PPUSH
8379: LD_STRING D1a-FMerc2-1
8381: PPUSH
8382: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8386: LD_VAR 0 2
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: PPUSH
8395: LD_VAR 0 2
8399: PUSH
8400: LD_INT 1
8402: ARRAY
8403: PPUSH
8404: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8408: LD_VAR 0 2
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: PPUSH
8417: LD_INT 500
8419: PPUSH
8420: CALL_OW 234
// wait ( 0 0$2 ) ;
8424: LD_INT 70
8426: PPUSH
8427: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8431: LD_VAR 0 2
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 2
8442: PPUSH
8443: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8447: LD_INT 10
8449: PPUSH
8450: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8454: LD_VAR 0 2
8458: PUSH
8459: LD_INT 1
8461: ARRAY
8462: PPUSH
8463: LD_STRING D1a-Merc1-2
8465: PPUSH
8466: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8470: LD_INT 7
8472: PPUSH
8473: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8477: LD_VAR 0 2
8481: PUSH
8482: LD_INT 1
8484: ARRAY
8485: PPUSH
8486: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8490: LD_VAR 0 2
8494: PUSH
8495: LD_INT 2
8497: ARRAY
8498: PPUSH
8499: LD_INT 10
8501: PPUSH
8502: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8506: LD_VAR 0 2
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PPUSH
8515: LD_STRING D1a-FMerc2-2
8517: PPUSH
8518: CALL_OW 88
// wait ( 0 0$1 ) ;
8522: LD_INT 35
8524: PPUSH
8525: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8529: LD_INT 7
8531: PPUSH
8532: CALL_OW 85
// wait ( 0 0$2 ) ;
8536: LD_INT 70
8538: PPUSH
8539: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8543: LD_EXP 43
8547: PPUSH
8548: LD_STRING D1a-Saliba-1
8550: PPUSH
8551: CALL_OW 91
// KillUnit ( Saliba ) ;
8555: LD_EXP 43
8559: PPUSH
8560: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8564: LD_VAR 0 2
8568: PUSH
8569: LD_INT 3
8571: ARRAY
8572: PPUSH
8573: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8577: LD_EXP 20
8581: PPUSH
8582: CALL_OW 85
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8593: LD_VAR 0 5
8597: PPUSH
8598: LD_INT 88
8600: PPUSH
8601: LD_INT 141
8603: PPUSH
8604: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8608: LD_VAR 0 5
8612: PPUSH
8613: LD_INT 70
8615: PPUSH
8616: CALL_OW 202
// wait ( 0 0$2 ) ;
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8627: LD_INT 2
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_INT 2
8635: PPUSH
8636: LD_INT 1
8638: PPUSH
8639: CALL_OW 80
// InGameOff ;
8643: CALL_OW 9
// ComWalk ( sols ) ;
8647: LD_VAR 0 5
8651: PPUSH
8652: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8656: LD_STRING M1
8658: PPUSH
8659: CALL_OW 337
// game_speed := 4 ;
8663: LD_ADDR_OWVAR 65
8667: PUSH
8668: LD_INT 4
8670: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8671: LD_INT 111
8673: PPUSH
8674: LD_INT 135
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: CALL_OW 331
// SaveForQuickRestart ;
8684: CALL_OW 22
// ar_run := true ;
8688: LD_ADDR_EXP 5
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8696: LD_INT 35
8698: PPUSH
8699: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8703: LD_INT 22
8705: PUSH
8706: LD_INT 1
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 91
8715: PUSH
8716: LD_INT 7
8718: PUSH
8719: LD_INT 10
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: PUSH
8736: LD_INT 7
8738: PPUSH
8739: CALL_OW 256
8743: PUSH
8744: LD_INT 999
8746: LESS
8747: OR
8748: IFFALSE 8696
// if GetSide ( ar_dep_s ) = 2 then
8750: LD_INT 7
8752: PPUSH
8753: CALL_OW 255
8757: PUSH
8758: LD_INT 2
8760: EQUAL
8761: IFFALSE 8773
// SetSide ( ar_dep_s , 1 ) ;
8763: LD_INT 7
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: CALL_OW 235
// end ;
8773: LD_VAR 0 1
8777: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8778: LD_EXP 5
8782: IFFALSE 9142
8784: GO 8786
8786: DISABLE
8787: LD_INT 0
8789: PPUSH
8790: PPUSH
8791: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8792: LD_ADDR_VAR 0 2
8796: PUSH
8797: LD_EXP 39
8801: PUSH
8802: LD_EXP 35
8806: PPUSH
8807: LD_INT 2
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 21
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8853: LD_INT 5
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL_OW 343
// k := 1 ;
8863: LD_ADDR_VAR 0 3
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// for i in tmp do
8871: LD_ADDR_VAR 0 1
8875: PUSH
8876: LD_VAR 0 2
8880: PUSH
8881: FOR_IN
8882: IFFALSE 8967
// begin if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8904
// ComExitBuilding ( i ) ;
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 122
// if GetClass ( i ) = 3 then
8904: LD_VAR 0 1
8908: PPUSH
8909: CALL_OW 257
8913: PUSH
8914: LD_INT 3
8916: EQUAL
8917: IFFALSE 8953
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_EXP 40
8928: PUSH
8929: LD_VAR 0 3
8933: ARRAY
8934: PPUSH
8935: CALL_OW 180
// k := k + 1 ;
8939: LD_ADDR_VAR 0 3
8943: PUSH
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 1
8951: PLUS
8952: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 173
// end ;
8965: GO 8881
8967: POP
8968: POP
// ar_patrol := true ;
8969: LD_ADDR_EXP 7
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8977: LD_INT 10
8979: PPUSH
8980: CALL_OW 67
// for i in tmp do
8984: LD_ADDR_VAR 0 1
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: FOR_IN
8995: IFFALSE 9023
// if not HasTask ( i ) then
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 314
9006: NOT
9007: IFFALSE 9021
// ComMoveToArea ( i , escape_area ) ;
9009: LD_VAR 0 1
9013: PPUSH
9014: LD_INT 10
9016: PPUSH
9017: CALL_OW 113
9021: GO 8994
9023: POP
9024: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9025: LD_ADDR_VAR 0 3
9029: PUSH
9030: LD_VAR 0 2
9034: PPUSH
9035: LD_INT 95
9037: PUSH
9038: LD_INT 10
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 72
9049: ST_TO_ADDR
// if k then
9050: LD_VAR 0 3
9054: IFFALSE 9123
// for i in k do
9056: LD_ADDR_VAR 0 1
9060: PUSH
9061: LD_VAR 0 3
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9121
// begin if IsInUnit ( i ) then
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 310
9078: IFFALSE 9094
// RemoveUnit ( IsInUnit ( i ) ) ;
9080: LD_VAR 0 1
9084: PPUSH
9085: CALL_OW 310
9089: PPUSH
9090: CALL_OW 64
// RemoveUnit ( i ) ;
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 64
// tmp := tmp diff i ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: LD_VAR 0 1
9117: DIFF
9118: ST_TO_ADDR
// end ;
9119: GO 9066
9121: POP
9122: POP
// until tmp = [ ] ;
9123: LD_VAR 0 2
9127: PUSH
9128: EMPTY
9129: EQUAL
9130: IFFALSE 8977
// ChangeSideFog ( 5 , 5 ) ;
9132: LD_INT 5
9134: PPUSH
9135: LD_INT 5
9137: PPUSH
9138: CALL_OW 343
// end ;
9142: PPOPN 3
9144: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9145: LD_EXP 7
9149: IFFALSE 9439
9151: GO 9153
9153: DISABLE
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
9158: PPUSH
// begin uc_side := 2 ;
9159: LD_ADDR_OWVAR 20
9163: PUSH
9164: LD_INT 2
9166: ST_TO_ADDR
// uc_nation := 2 ;
9167: LD_ADDR_OWVAR 21
9171: PUSH
9172: LD_INT 2
9174: ST_TO_ADDR
// InitHc ;
9175: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9179: LD_INT 1
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_INT 6
9187: PPUSH
9188: CALL_OW 380
// un := CreateHuman ;
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: CALL_OW 44
9201: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9202: LD_INT 14
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 27
9213: PPUSH
9214: LD_INT 98
9216: PPUSH
9217: CALL 51203 0 5
// veh := CreateVehicle ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: CALL_OW 45
9230: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9231: LD_VAR 0 3
9235: PPUSH
9236: LD_INT 4
9238: PPUSH
9239: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9243: LD_VAR 0 3
9247: PPUSH
9248: LD_INT 179
9250: PPUSH
9251: LD_INT 135
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9261: LD_VAR 0 2
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9275: LD_VAR 0 2
9279: PPUSH
9280: LD_INT 126
9282: PPUSH
9283: LD_INT 133
9285: PPUSH
9286: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: CALL_OW 292
9309: PUSH
9310: LD_VAR 0 3
9314: PPUSH
9315: LD_INT 7
9317: PPUSH
9318: CALL_OW 296
9322: PUSH
9323: LD_INT 9
9325: LESS
9326: OR
9327: IFFALSE 9290
// ComHold ( veh ) ;
9329: LD_VAR 0 3
9333: PPUSH
9334: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9338: LD_VAR 0 2
9342: PPUSH
9343: LD_STRING D2aa-Ar1-1
9345: PPUSH
9346: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 177
9357: PPUSH
9358: LD_INT 96
9360: PPUSH
9361: CALL_OW 111
// AddComExitVehicle ( un ) ;
9365: LD_VAR 0 2
9369: PPUSH
9370: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9374: LD_INT 35
9376: PPUSH
9377: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9381: LD_VAR 0 2
9385: PPUSH
9386: LD_INT 204
9388: PPUSH
9389: CALL_OW 296
9393: PUSH
9394: LD_INT 15
9396: LESS
9397: IFFALSE 9374
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9399: LD_ADDR_EXP 49
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 3
9411: PUSH
9412: LD_EXP 49
9416: PUSH
9417: LD_INT 3
9419: ARRAY
9420: PUSH
9421: LD_INT 1
9423: PLUS
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: LD_VAR 0 2
9433: PPUSH
9434: CALL 51325 0 3
9438: ST_TO_ADDR
// end ;
9439: PPOPN 3
9441: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9442: LD_INT 7
9444: PPUSH
9445: CALL_OW 255
9449: PUSH
9450: LD_INT 1
9452: EQUAL
9453: PUSH
9454: LD_INT 7
9456: PPUSH
9457: CALL_OW 301
9461: OR
9462: IFFALSE 11886
9464: GO 9466
9466: DISABLE
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_EXP 35
9480: PPUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 72
9495: PUSH
9496: FOR_IN
9497: IFFALSE 9513
// SetSide ( i , 1 ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 235
9511: GO 9496
9513: POP
9514: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: LD_INT 46
9522: PUSH
9523: LD_INT 41
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 50
9532: PUSH
9533: LD_INT 25
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 57
9542: PUSH
9543: LD_INT 75
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: LD_INT 89
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 45
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 95
9572: PUSH
9573: LD_INT 95
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 84
9582: PUSH
9583: LD_INT 77
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 101
9592: PUSH
9593: LD_INT 76
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 118
9602: PUSH
9603: LD_INT 81
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 139
9612: PUSH
9613: LD_INT 97
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 129
9622: PUSH
9623: LD_INT 114
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 154
9632: PUSH
9633: LD_INT 111
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: ST_TO_ADDR
// base_captured := true ;
9654: LD_ADDR_EXP 6
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// DialogueOn ;
9662: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9666: LD_EXP 20
9670: PPUSH
9671: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9675: LD_EXP 20
9679: PPUSH
9680: LD_STRING D2-JMM-1
9682: PPUSH
9683: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9687: LD_EXP 29
9691: PPUSH
9692: LD_STRING D2-Pow-1
9694: PPUSH
9695: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9699: LD_EXP 20
9703: PPUSH
9704: LD_STRING D2-JMM-2
9706: PPUSH
9707: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9711: LD_EXP 29
9715: PPUSH
9716: LD_STRING D2-Pow-2
9718: PPUSH
9719: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9723: LD_EXP 20
9727: PPUSH
9728: LD_STRING D2-JMM-3
9730: PPUSH
9731: CALL_OW 88
// DialogueOff ;
9735: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9739: LD_STRING M2
9741: PPUSH
9742: CALL_OW 337
// Wait ( 0 0$2 ) ;
9746: LD_INT 70
9748: PPUSH
9749: CALL_OW 67
// if IsOk ( Gary ) then
9753: LD_EXP 31
9757: PPUSH
9758: CALL_OW 302
9762: IFFALSE 9776
// Say ( Gary , D2a-Gary-1 ) ;
9764: LD_EXP 31
9768: PPUSH
9769: LD_STRING D2a-Gary-1
9771: PPUSH
9772: CALL_OW 88
// if IsOk ( Bobby ) then
9776: LD_EXP 23
9780: PPUSH
9781: CALL_OW 302
9785: IFFALSE 9799
// Say ( Bobby , D2a-Bobby-1 ) ;
9787: LD_EXP 23
9791: PPUSH
9792: LD_STRING D2a-Bobby-1
9794: PPUSH
9795: CALL_OW 88
// if IsOk ( Cyrus ) then
9799: LD_EXP 24
9803: PPUSH
9804: CALL_OW 302
9808: IFFALSE 9822
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9810: LD_EXP 24
9814: PPUSH
9815: LD_STRING D2a-Cyrus-1
9817: PPUSH
9818: CALL_OW 88
// if IsOk ( Lisa ) then
9822: LD_EXP 21
9826: PPUSH
9827: CALL_OW 302
9831: IFFALSE 9845
// Say ( Lisa , D2a-Lisa-1 ) ;
9833: LD_EXP 21
9837: PPUSH
9838: LD_STRING D2a-Lisa-1
9840: PPUSH
9841: CALL_OW 88
// if IsOk ( Frank ) then
9845: LD_EXP 32
9849: PPUSH
9850: CALL_OW 302
9854: IFFALSE 9868
// Say ( Frank , D2a-Frank-1 ) ;
9856: LD_EXP 32
9860: PPUSH
9861: LD_STRING D2a-Frank-1
9863: PPUSH
9864: CALL_OW 88
// if IsOk ( Cornel ) then
9868: LD_EXP 30
9872: PPUSH
9873: CALL_OW 302
9877: IFFALSE 9891
// Say ( Cornel , D2a-Corn-1 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING D2a-Corn-1
9886: PPUSH
9887: CALL_OW 88
// if IsOk ( Donaldson ) then
9891: LD_EXP 22
9895: PPUSH
9896: CALL_OW 302
9900: IFFALSE 9914
// Say ( Donaldson , D2a-Don-1 ) ;
9902: LD_EXP 22
9906: PPUSH
9907: LD_STRING D2a-Don-1
9909: PPUSH
9910: CALL_OW 88
// if IsOk ( Brown ) then
9914: LD_EXP 26
9918: PPUSH
9919: CALL_OW 302
9923: IFFALSE 9937
// Say ( Brown , D2a-Brown-1 ) ;
9925: LD_EXP 26
9929: PPUSH
9930: LD_STRING D2a-Brown-1
9932: PPUSH
9933: CALL_OW 88
// Wait ( 0 0$30 ) ;
9937: LD_INT 1050
9939: PPUSH
9940: CALL_OW 67
// if IsOk ( Frank ) then
9944: LD_EXP 32
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 10219
// begin DialogueOn ;
9955: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9959: LD_EXP 20
9963: PUSH
9964: LD_EXP 32
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9977: LD_EXP 32
9981: PPUSH
9982: LD_STRING D3F-Frank-1
9984: PPUSH
9985: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9989: LD_EXP 20
9993: PPUSH
9994: LD_STRING D3F-JMM-1
9996: PPUSH
9997: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10001: LD_EXP 32
10005: PPUSH
10006: LD_STRING D3F-Frank-2
10008: PPUSH
10009: CALL_OW 88
// case Query ( QFrank ) of 1 :
10013: LD_STRING QFrank
10015: PPUSH
10016: CALL_OW 97
10020: PUSH
10021: LD_INT 1
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10052
10029: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10030: LD_EXP 20
10034: PPUSH
10035: LD_STRING D3Fa-JMM-1
10037: PPUSH
10038: CALL_OW 88
// us_scout := 1 ;
10042: LD_ADDR_EXP 8
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// end ; 2 :
10050: GO 10215
10052: LD_INT 2
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10182
10060: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10061: LD_EXP 20
10065: PPUSH
10066: LD_STRING D3Fb-JMM-1
10068: PPUSH
10069: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10073: LD_EXP 32
10077: PPUSH
10078: LD_STRING D3Fb-Frank-1
10080: PPUSH
10081: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10085: LD_STRING QFrank2
10087: PPUSH
10088: CALL_OW 97
10092: PUSH
10093: LD_INT 1
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10148
10101: POP
// begin us_scout := 2 ;
10102: LD_ADDR_EXP 8
10106: PUSH
10107: LD_INT 2
10109: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10110: LD_EXP 20
10114: PPUSH
10115: LD_STRING D3Fba-JMM-1
10117: PPUSH
10118: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10122: LD_EXP 32
10126: PPUSH
10127: LD_STRING D3Fba-Frank-1
10129: PPUSH
10130: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10134: LD_EXP 20
10138: PPUSH
10139: LD_STRING D3Fba-JMM-2
10141: PPUSH
10142: CALL_OW 88
// end ; 2 :
10146: GO 10180
10148: LD_INT 2
10150: DOUBLE
10151: EQUAL
10152: IFTRUE 10156
10154: GO 10179
10156: POP
// begin us_scout := 0 ;
10157: LD_ADDR_EXP 8
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10165: LD_EXP 20
10169: PPUSH
10170: LD_STRING D3Fbb-JMM-1
10172: PPUSH
10173: CALL_OW 88
// end ; end ;
10177: GO 10180
10179: POP
// end ; 3 :
10180: GO 10215
10182: LD_INT 3
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10214
10190: POP
// begin us_scout := - 1 ;
10191: LD_ADDR_EXP 8
10195: PUSH
10196: LD_INT 1
10198: NEG
10199: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10200: LD_EXP 20
10204: PPUSH
10205: LD_STRING D3Fc-JMM-1
10207: PPUSH
10208: CALL_OW 88
// end ; end ;
10212: GO 10215
10214: POP
// DialogueOff ;
10215: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10219: LD_EXP 8
10223: PUSH
10224: LD_INT 1
10226: NEG
10227: PUSH
10228: LD_INT 0
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: IN
10235: IFFALSE 10239
// exit ;
10237: GO 11886
// if us_scout in [ 1 , 2 ] then
10239: LD_EXP 8
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: IN
10254: IFFALSE 10953
// begin if IsInUnit ( Frank ) then
10256: LD_EXP 32
10260: PPUSH
10261: CALL_OW 310
10265: IFFALSE 10276
// ComExitBuilding ( Frank ) ;
10267: LD_EXP 32
10271: PPUSH
10272: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10276: LD_EXP 32
10280: PPUSH
10281: CALL_OW 311
10285: IFFALSE 10296
// ComExitVehicle ( Frank ) ;
10287: LD_EXP 32
10291: PPUSH
10292: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10296: LD_EXP 32
10300: PPUSH
10301: LD_INT 4
10303: PPUSH
10304: CALL_OW 235
// wait ( 0 0$1 ) ;
10308: LD_INT 35
10310: PPUSH
10311: CALL_OW 67
// if us_scout = 2 then
10315: LD_EXP 8
10319: PUSH
10320: LD_INT 2
10322: EQUAL
10323: IFFALSE 10691
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10325: LD_EXP 32
10329: PPUSH
10330: LD_INT 75
10332: PPUSH
10333: LD_INT 63
10335: PPUSH
10336: CALL_OW 111
// AddComHold ( Frank ) ;
10340: LD_EXP 32
10344: PPUSH
10345: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10349: LD_EXP 32
10353: PPUSH
10354: LD_INT 770
10356: PPUSH
10357: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10361: LD_EXP 32
10365: PPUSH
10366: LD_INT 100
10368: PPUSH
10369: LD_INT 75
10371: PPUSH
10372: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10376: LD_EXP 32
10380: PPUSH
10381: LD_INT 123
10383: PPUSH
10384: LD_INT 103
10386: PPUSH
10387: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10391: LD_EXP 32
10395: PPUSH
10396: LD_INT 138
10398: PPUSH
10399: LD_INT 108
10401: PPUSH
10402: CALL_OW 171
// AddComHold ( Frank ) ;
10406: LD_EXP 32
10410: PPUSH
10411: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10415: LD_INT 35
10417: PPUSH
10418: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10422: LD_EXP 32
10426: PPUSH
10427: LD_INT 138
10429: PPUSH
10430: LD_INT 108
10432: PPUSH
10433: CALL_OW 307
10437: IFFALSE 10415
// AddComMoveXY ( Frank , 125 , 132 ) ;
10439: LD_EXP 32
10443: PPUSH
10444: LD_INT 125
10446: PPUSH
10447: LD_INT 132
10449: PPUSH
10450: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10454: LD_INT 35
10456: PPUSH
10457: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10461: LD_INT 1
10463: PPUSH
10464: LD_EXP 32
10468: PPUSH
10469: CALL_OW 292
10473: PUSH
10474: LD_EXP 32
10478: PPUSH
10479: LD_INT 7
10481: PPUSH
10482: CALL_OW 296
10486: PUSH
10487: LD_INT 7
10489: LESS
10490: OR
10491: IFFALSE 10454
// DialogueOn ;
10493: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10497: LD_EXP 32
10501: PPUSH
10502: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10506: LD_INT 10
10508: PPUSH
10509: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10513: LD_EXP 20
10517: PPUSH
10518: LD_STRING D4Fa-JMM-1
10520: PPUSH
10521: CALL_OW 88
// for i in points do
10525: LD_ADDR_VAR 0 1
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10594
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10538: LD_VAR 0 1
10542: PUSH
10543: LD_INT 1
10545: ARRAY
10546: PPUSH
10547: LD_VAR 0 1
10551: PUSH
10552: LD_INT 2
10554: ARRAY
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: LD_INT 20
10561: NEG
10562: PPUSH
10563: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: LD_VAR 0 1
10580: PUSH
10581: LD_INT 2
10583: ARRAY
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 331
// end ;
10592: GO 10535
10594: POP
10595: POP
// dwait ( 0 0$0.5 ) ;
10596: LD_INT 18
10598: PPUSH
10599: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10603: LD_INT 42
10605: PPUSH
10606: LD_INT 27
10608: PPUSH
10609: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10613: LD_EXP 32
10617: PPUSH
10618: LD_STRING D4Fa-Frank-1
10620: PPUSH
10621: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10625: LD_INT 18
10627: PPUSH
10628: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10632: LD_EXP 20
10636: PPUSH
10637: LD_STRING D4Fa-JMM-2
10639: PPUSH
10640: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10644: LD_INT 118
10646: PPUSH
10647: LD_INT 80
10649: PPUSH
10650: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10654: LD_EXP 32
10658: PPUSH
10659: LD_STRING D4Fa-Frank-2
10661: PPUSH
10662: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10666: LD_INT 10
10668: PPUSH
10669: CALL_OW 68
// DialogueOff ;
10673: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10677: LD_EXP 32
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 235
// end else
10689: GO 10953
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10691: LD_INT 2
10693: PPUSH
10694: LD_INT 4
10696: PPUSH
10697: LD_INT 2
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10707: LD_EXP 32
10711: PPUSH
10712: LD_INT 75
10714: PPUSH
10715: LD_INT 63
10717: PPUSH
10718: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10722: LD_EXP 32
10726: PPUSH
10727: LD_INT 175
10729: PPUSH
10730: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10734: LD_EXP 32
10738: PPUSH
10739: LD_INT 102
10741: PPUSH
10742: LD_INT 76
10744: PPUSH
10745: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10749: LD_EXP 32
10753: PPUSH
10754: LD_INT 108
10756: PPUSH
10757: LD_INT 70
10759: PPUSH
10760: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10764: LD_INT 35
10766: PPUSH
10767: CALL_OW 67
// until See ( 2 , Frank ) ;
10771: LD_INT 2
10773: PPUSH
10774: LD_EXP 32
10778: PPUSH
10779: CALL_OW 292
10783: IFFALSE 10764
// ComMoveXY ( Frank , 112 , 118 ) ;
10785: LD_EXP 32
10789: PPUSH
10790: LD_INT 112
10792: PPUSH
10793: LD_INT 118
10795: PPUSH
10796: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10800: LD_EXP 32
10804: PPUSH
10805: CALL_OW 256
10809: PUSH
10810: LD_INT 750
10812: GREATEREQUAL
10813: IFFALSE 10827
// SetLives ( Frank , 700 ) ;
10815: LD_EXP 32
10819: PPUSH
10820: LD_INT 700
10822: PPUSH
10823: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10827: LD_INT 35
10829: PPUSH
10830: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10834: LD_INT 1
10836: PPUSH
10837: LD_EXP 32
10841: PPUSH
10842: CALL_OW 292
10846: PUSH
10847: LD_EXP 32
10851: PPUSH
10852: LD_INT 7
10854: PPUSH
10855: CALL_OW 296
10859: PUSH
10860: LD_INT 17
10862: LESS
10863: OR
10864: IFFALSE 10827
// DialogueOn ;
10866: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10870: LD_EXP 32
10874: PPUSH
10875: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10879: LD_EXP 32
10883: PPUSH
10884: LD_STRING D4Fb-Frank-1
10886: PPUSH
10887: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10891: LD_EXP 20
10895: PPUSH
10896: LD_STRING D4Fb-JMM-1
10898: PPUSH
10899: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10903: LD_INT 2
10905: PPUSH
10906: LD_STRING D4Fb-FSci1-1
10908: PPUSH
10909: CALL 15534 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10913: LD_EXP 32
10917: PPUSH
10918: LD_STRING D4Fb-Frank-2
10920: PPUSH
10921: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10925: LD_EXP 20
10929: PPUSH
10930: LD_STRING D4Fb-JMM-2
10932: PPUSH
10933: CALL_OW 88
// DialogueOff ;
10937: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10941: LD_EXP 32
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10953: LD_EXP 33
10957: PPUSH
10958: CALL_OW 302
10962: PUSH
10963: LD_EXP 32
10967: NOT
10968: AND
10969: IFFALSE 11117
// begin DialogueOn ;
10971: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10975: LD_EXP 20
10979: PUSH
10980: LD_EXP 33
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10993: LD_EXP 33
10997: PPUSH
10998: LD_STRING D3Y-Yam-1
11000: PPUSH
11001: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11005: LD_EXP 20
11009: PPUSH
11010: LD_STRING D3Y-JMM-1
11012: PPUSH
11013: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11017: LD_EXP 33
11021: PPUSH
11022: LD_STRING D3Y-Yam-2
11024: PPUSH
11025: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11029: LD_STRING QYamoko
11031: PPUSH
11032: CALL_OW 97
11036: PUSH
11037: LD_INT 1
11039: DOUBLE
11040: EQUAL
11041: IFTRUE 11045
11043: GO 11080
11045: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11046: LD_EXP 20
11050: PPUSH
11051: LD_STRING D3Ya-JMM-1
11053: PPUSH
11054: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11058: LD_EXP 33
11062: PPUSH
11063: LD_STRING D3Ya-Yam-1
11065: PPUSH
11066: CALL_OW 88
// us_scout := 1 ;
11070: LD_ADDR_EXP 8
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// end ; 2 :
11078: GO 11113
11080: LD_INT 2
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11112
11088: POP
// begin us_scout := - 1 ;
11089: LD_ADDR_EXP 8
11093: PUSH
11094: LD_INT 1
11096: NEG
11097: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11098: LD_EXP 20
11102: PPUSH
11103: LD_STRING D3Yb-JMM-1
11105: PPUSH
11106: CALL_OW 88
// end ; end ;
11110: GO 11113
11112: POP
// DialogueOff ;
11113: CALL_OW 7
// end ; if Frank then
11117: LD_EXP 32
11121: IFFALSE 11125
// exit ;
11123: GO 11886
// if us_scout in [ - 1 , 0 ] then
11125: LD_EXP 8
11129: PUSH
11130: LD_INT 1
11132: NEG
11133: PUSH
11134: LD_INT 0
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: IN
11141: IFFALSE 11145
// exit ;
11143: GO 11886
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11145: LD_ADDR_EXP 8
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 2
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11170: LD_EXP 8
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: IN
11185: IFFALSE 11886
// begin if IsInUnit ( Kikuchi ) then
11187: LD_EXP 33
11191: PPUSH
11192: CALL_OW 310
11196: IFFALSE 11207
// ComExitBuilding ( Kikuchi ) ;
11198: LD_EXP 33
11202: PPUSH
11203: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11207: LD_EXP 33
11211: PPUSH
11212: CALL_OW 311
11216: IFFALSE 11227
// ComExitVehicle ( Kikuchi ) ;
11218: LD_EXP 33
11222: PPUSH
11223: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11227: LD_EXP 33
11231: PPUSH
11232: LD_INT 4
11234: PPUSH
11235: CALL_OW 235
// wait ( 0 0$1 ) ;
11239: LD_INT 35
11241: PPUSH
11242: CALL_OW 67
// if us_scout = 2 then
11246: LD_EXP 8
11250: PUSH
11251: LD_INT 2
11253: EQUAL
11254: IFFALSE 11634
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11256: LD_EXP 33
11260: PPUSH
11261: LD_INT 75
11263: PPUSH
11264: LD_INT 63
11266: PPUSH
11267: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11271: LD_EXP 33
11275: PPUSH
11276: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11280: LD_EXP 33
11284: PPUSH
11285: LD_INT 770
11287: PPUSH
11288: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_INT 100
11299: PPUSH
11300: LD_INT 75
11302: PPUSH
11303: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11307: LD_EXP 33
11311: PPUSH
11312: LD_INT 123
11314: PPUSH
11315: LD_INT 103
11317: PPUSH
11318: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11322: LD_EXP 33
11326: PPUSH
11327: LD_INT 138
11329: PPUSH
11330: LD_INT 108
11332: PPUSH
11333: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11337: LD_EXP 33
11341: PPUSH
11342: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11346: LD_INT 35
11348: PPUSH
11349: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11353: LD_EXP 33
11357: PPUSH
11358: LD_INT 138
11360: PPUSH
11361: LD_INT 108
11363: PPUSH
11364: CALL_OW 307
11368: IFFALSE 11346
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11370: LD_EXP 33
11374: PPUSH
11375: LD_INT 125
11377: PPUSH
11378: LD_INT 132
11380: PPUSH
11381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11385: LD_INT 35
11387: PPUSH
11388: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11392: LD_INT 1
11394: PPUSH
11395: LD_EXP 33
11399: PPUSH
11400: CALL_OW 292
11404: PUSH
11405: LD_EXP 33
11409: PPUSH
11410: LD_INT 7
11412: PPUSH
11413: CALL_OW 296
11417: PUSH
11418: LD_INT 7
11420: LESS
11421: OR
11422: IFFALSE 11385
// DialogueOn ;
11424: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11428: LD_EXP 33
11432: PPUSH
11433: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11437: LD_INT 10
11439: PPUSH
11440: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11444: LD_EXP 33
11448: PPUSH
11449: LD_STRING D4Ya-Yam-1
11451: PPUSH
11452: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11456: LD_EXP 20
11460: PPUSH
11461: LD_STRING D4Ya-JMM-1
11463: PPUSH
11464: CALL_OW 88
// for i in points do
11468: LD_ADDR_VAR 0 1
11472: PUSH
11473: LD_VAR 0 2
11477: PUSH
11478: FOR_IN
11479: IFFALSE 11537
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11481: LD_VAR 0 1
11485: PUSH
11486: LD_INT 1
11488: ARRAY
11489: PPUSH
11490: LD_VAR 0 1
11494: PUSH
11495: LD_INT 2
11497: ARRAY
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: LD_INT 20
11504: NEG
11505: PPUSH
11506: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11510: LD_VAR 0 1
11514: PUSH
11515: LD_INT 1
11517: ARRAY
11518: PPUSH
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 2
11526: ARRAY
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 331
// end ;
11535: GO 11478
11537: POP
11538: POP
// dwait ( 0 0$0.5 ) ;
11539: LD_INT 18
11541: PPUSH
11542: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11546: LD_INT 42
11548: PPUSH
11549: LD_INT 27
11551: PPUSH
11552: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11556: LD_EXP 33
11560: PPUSH
11561: LD_STRING D4Ya-Yam-2
11563: PPUSH
11564: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11568: LD_INT 18
11570: PPUSH
11571: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11575: LD_INT 118
11577: PPUSH
11578: LD_INT 80
11580: PPUSH
11581: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11585: LD_EXP 20
11589: PPUSH
11590: LD_STRING D4Ya-JMM-2
11592: PPUSH
11593: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11597: LD_EXP 33
11601: PPUSH
11602: LD_STRING D4Ya-Yam-3
11604: PPUSH
11605: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11609: LD_INT 10
11611: PPUSH
11612: CALL_OW 68
// DialogueOff ;
11616: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11620: LD_EXP 33
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 235
// end else
11632: GO 11886
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11634: LD_INT 2
11636: PPUSH
11637: LD_INT 4
11639: PPUSH
11640: LD_INT 2
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11650: LD_EXP 33
11654: PPUSH
11655: LD_INT 75
11657: PPUSH
11658: LD_INT 63
11660: PPUSH
11661: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11665: LD_EXP 33
11669: PPUSH
11670: LD_INT 175
11672: PPUSH
11673: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11677: LD_EXP 33
11681: PPUSH
11682: LD_INT 102
11684: PPUSH
11685: LD_INT 76
11687: PPUSH
11688: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11692: LD_EXP 33
11696: PPUSH
11697: LD_INT 108
11699: PPUSH
11700: LD_INT 70
11702: PPUSH
11703: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11707: LD_INT 35
11709: PPUSH
11710: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11714: LD_INT 2
11716: PPUSH
11717: LD_EXP 33
11721: PPUSH
11722: CALL_OW 292
11726: IFFALSE 11707
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11728: LD_EXP 33
11732: PPUSH
11733: LD_INT 112
11735: PPUSH
11736: LD_INT 118
11738: PPUSH
11739: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11743: LD_EXP 33
11747: PPUSH
11748: CALL_OW 256
11752: PUSH
11753: LD_INT 750
11755: GREATEREQUAL
11756: IFFALSE 11770
// SetLives ( Kikuchi , 700 ) ;
11758: LD_EXP 33
11762: PPUSH
11763: LD_INT 700
11765: PPUSH
11766: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11770: LD_INT 35
11772: PPUSH
11773: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11777: LD_INT 1
11779: PPUSH
11780: LD_EXP 33
11784: PPUSH
11785: CALL_OW 292
11789: PUSH
11790: LD_EXP 33
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 296
11802: PUSH
11803: LD_INT 17
11805: LESS
11806: OR
11807: IFFALSE 11770
// DialogueOn ;
11809: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11813: LD_EXP 33
11817: PPUSH
11818: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11822: LD_EXP 33
11826: PPUSH
11827: LD_STRING D4Yb-Yam-1
11829: PPUSH
11830: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11834: LD_EXP 20
11838: PPUSH
11839: LD_STRING D4Yb-JMM-1
11841: PPUSH
11842: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11846: LD_EXP 33
11850: PPUSH
11851: LD_STRING D4Yb-Yam-2
11853: PPUSH
11854: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11858: LD_EXP 20
11862: PPUSH
11863: LD_STRING D4Yb-JMM-2
11865: PPUSH
11866: CALL_OW 88
// DialogueOff ;
11870: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11874: LD_EXP 33
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 235
// end ; end ; end ;
11886: PPOPN 2
11888: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11889: LD_EXP 6
11893: IFFALSE 12926
11895: GO 11897
11897: DISABLE
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin enable ;
11904: ENABLE
// if not seen [ 1 ] then
11905: LD_EXP 9
11909: PUSH
11910: LD_INT 1
11912: ARRAY
11913: NOT
11914: IFFALSE 12094
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 25
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 33
11946: PUSH
11947: LD_INT 4
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PPUSH
11963: CALL_OW 69
11967: ST_TO_ADDR
// if tmp then
11968: LD_VAR 0 2
11972: IFFALSE 12094
// for i in tmp do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_VAR 0 2
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12092
// if See ( 1 , i ) then
11987: LD_INT 1
11989: PPUSH
11990: LD_VAR 0 1
11994: PPUSH
11995: CALL_OW 292
11999: IFFALSE 12090
// begin seen := Replace ( seen , 1 , true ) ;
12001: LD_ADDR_EXP 9
12005: PUSH
12006: LD_EXP 9
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 1
12021: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12022: LD_INT 1
12024: PPUSH
12025: CALL 15356 0 1
12029: IFFALSE 12090
// begin DialogueOn ;
12031: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12035: LD_VAR 0 1
12039: PPUSH
12040: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12044: LD_INT 10
12046: PPUSH
12047: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 1
12058: PPUSH
12059: LD_STRING D5a-Sol2-1
12061: PPUSH
12062: CALL 15534 0 2
12066: ST_TO_ADDR
// if not un then
12067: LD_VAR 0 3
12071: NOT
12072: IFFALSE 12084
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12074: LD_INT 2
12076: PPUSH
12077: LD_STRING D5a-FSol2-1
12079: PPUSH
12080: CALL 15534 0 2
// DialogueOff ;
12084: CALL_OW 7
// break ;
12088: GO 12092
// end ; end ;
12090: GO 11984
12092: POP
12093: POP
// end ; if not seen [ 2 ] then
12094: LD_EXP 9
12098: PUSH
12099: LD_INT 2
12101: ARRAY
12102: NOT
12103: IFFALSE 12328
// begin can_kamikazed := true ;
12105: LD_ADDR_EXP 10
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 17
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if tmp then
12147: LD_VAR 0 2
12151: IFFALSE 12328
// for i in tmp do
12153: LD_ADDR_VAR 0 1
12157: PUSH
12158: LD_VAR 0 2
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12326
// if See ( 1 , i ) then
12166: LD_INT 1
12168: PPUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 292
12178: IFFALSE 12324
// begin seen := Replace ( seen , 2 , true ) ;
12180: LD_ADDR_EXP 9
12184: PUSH
12185: LD_EXP 9
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 1
12200: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12201: LD_INT 1
12203: PPUSH
12204: CALL 15356 0 1
12208: IFFALSE 12324
// begin DialogueOn ;
12210: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12223: LD_INT 10
12225: PPUSH
12226: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12230: LD_ADDR_VAR 0 3
12234: PUSH
12235: LD_INT 1
12237: PPUSH
12238: LD_STRING D5b-Sol1-1
12240: PPUSH
12241: CALL 15534 0 2
12245: ST_TO_ADDR
// if not un then
12246: LD_VAR 0 3
12250: NOT
12251: IFFALSE 12269
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12253: LD_ADDR_VAR 0 3
12257: PUSH
12258: LD_INT 2
12260: PPUSH
12261: LD_STRING D5b-FSol1-1
12263: PPUSH
12264: CALL 15534 0 2
12268: ST_TO_ADDR
// if un then
12269: LD_VAR 0 3
12273: IFFALSE 12318
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_INT 1
12282: PPUSH
12283: LD_STRING D5b-Sol2-1
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: CALL 15760 0 3
12295: ST_TO_ADDR
// if not un2 then
12296: LD_VAR 0 4
12300: NOT
12301: IFFALSE 12318
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12303: LD_INT 2
12305: PPUSH
12306: LD_STRING D5b-FSol2-1
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: CALL 15760 0 3
// end ; DialogueOff ;
12318: CALL_OW 7
// break ;
12322: GO 12326
// end ; end ;
12324: GO 12163
12326: POP
12327: POP
// end ; if not seen [ 3 ] then
12328: LD_EXP 9
12332: PUSH
12333: LD_INT 3
12335: ARRAY
12336: NOT
12337: IFFALSE 12511
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 33
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if tmp then
12373: LD_VAR 0 2
12377: IFFALSE 12511
// for i in tmp do
12379: LD_ADDR_VAR 0 1
12383: PUSH
12384: LD_VAR 0 2
12388: PUSH
12389: FOR_IN
12390: IFFALSE 12509
// if See ( 1 , i ) then
12392: LD_INT 1
12394: PPUSH
12395: LD_VAR 0 1
12399: PPUSH
12400: CALL_OW 292
12404: IFFALSE 12507
// begin seen := Replace ( seen , 3 , true ) ;
12406: LD_ADDR_EXP 9
12410: PUSH
12411: LD_EXP 9
12415: PPUSH
12416: LD_INT 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 1
12426: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12427: LD_INT 1
12429: PPUSH
12430: CALL 15356 0 1
12434: IFFALSE 12507
// begin DialogueOn ;
12436: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12449: LD_INT 10
12451: PPUSH
12452: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_STRING D8-Sol1-1
12466: PPUSH
12467: CALL 15534 0 2
12471: ST_TO_ADDR
// if not un then
12472: LD_VAR 0 3
12476: NOT
12477: IFFALSE 12489
// SayRand ( sex_female , D8-FSol1-1 ) ;
12479: LD_INT 2
12481: PPUSH
12482: LD_STRING D8-FSol1-1
12484: PPUSH
12485: CALL 15534 0 2
// Say ( JMM , D8-JMM-1 ) ;
12489: LD_EXP 20
12493: PPUSH
12494: LD_STRING D8-JMM-1
12496: PPUSH
12497: CALL_OW 88
// DialogueOff ;
12501: CALL_OW 7
// break ;
12505: GO 12509
// end ; end ;
12507: GO 12389
12509: POP
12510: POP
// end ; if not seen [ 4 ] then
12511: LD_EXP 9
12515: PUSH
12516: LD_INT 4
12518: ARRAY
12519: NOT
12520: IFFALSE 12682
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12522: LD_ADDR_VAR 0 2
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 33
12539: PUSH
12540: LD_INT 5
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: ST_TO_ADDR
// if tmp then
12556: LD_VAR 0 2
12560: IFFALSE 12682
// for i in tmp do
12562: LD_ADDR_VAR 0 1
12566: PUSH
12567: LD_VAR 0 2
12571: PUSH
12572: FOR_IN
12573: IFFALSE 12680
// if See ( 1 , i ) then
12575: LD_INT 1
12577: PPUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: CALL_OW 292
12587: IFFALSE 12678
// begin seen := Replace ( seen , 4 , true ) ;
12589: LD_ADDR_EXP 9
12593: PUSH
12594: LD_EXP 9
12598: PPUSH
12599: LD_INT 4
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 1
12609: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12610: LD_INT 1
12612: PPUSH
12613: CALL 15356 0 1
12617: IFFALSE 12678
// begin DialogueOn ;
12619: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12632: LD_INT 10
12634: PPUSH
12635: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12639: LD_ADDR_VAR 0 3
12643: PUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_STRING D5a-Sol1-1
12649: PPUSH
12650: CALL 15534 0 2
12654: ST_TO_ADDR
// if not un then
12655: LD_VAR 0 3
12659: NOT
12660: IFFALSE 12672
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12662: LD_INT 2
12664: PPUSH
12665: LD_STRING D5a-FSol1-1
12667: PPUSH
12668: CALL 15534 0 2
// DialogueOff ;
12672: CALL_OW 7
// break ;
12676: GO 12680
// end ; end ;
12678: GO 12572
12680: POP
12681: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12682: LD_EXP 9
12686: PUSH
12687: LD_INT 5
12689: ARRAY
12690: NOT
12691: PUSH
12692: LD_EXP 9
12696: PUSH
12697: LD_INT 3
12699: ARRAY
12700: AND
12701: IFFALSE 12875
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12703: LD_ADDR_VAR 0 2
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_INT 2
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 34
12720: PUSH
12721: LD_INT 31
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// if tmp then
12737: LD_VAR 0 2
12741: IFFALSE 12875
// for i in tmp do
12743: LD_ADDR_VAR 0 1
12747: PUSH
12748: LD_VAR 0 2
12752: PUSH
12753: FOR_IN
12754: IFFALSE 12873
// if See ( 1 , i ) then
12756: LD_INT 1
12758: PPUSH
12759: LD_VAR 0 1
12763: PPUSH
12764: CALL_OW 292
12768: IFFALSE 12871
// begin seen := Replace ( seen , 5 , true ) ;
12770: LD_ADDR_EXP 9
12774: PUSH
12775: LD_EXP 9
12779: PPUSH
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 1
12790: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12791: LD_INT 1
12793: PPUSH
12794: CALL 15356 0 1
12798: IFFALSE 12871
// begin DialogueOn ;
12800: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12813: LD_INT 10
12815: PPUSH
12816: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 1
12827: PPUSH
12828: LD_STRING D8a-Sol2-1
12830: PPUSH
12831: CALL 15534 0 2
12835: ST_TO_ADDR
// if not un then
12836: LD_VAR 0 3
12840: NOT
12841: IFFALSE 12853
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12843: LD_INT 2
12845: PPUSH
12846: LD_STRING D8a-FSol2-1
12848: PPUSH
12849: CALL 15534 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12853: LD_EXP 20
12857: PPUSH
12858: LD_STRING D8a-JMM-1
12860: PPUSH
12861: CALL_OW 88
// DialogueOff ;
12865: CALL_OW 7
// break ;
12869: GO 12873
// end ; end ;
12871: GO 12753
12873: POP
12874: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12875: LD_EXP 9
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_EXP 9
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: AND
12893: PUSH
12894: LD_EXP 9
12898: PUSH
12899: LD_INT 3
12901: ARRAY
12902: AND
12903: PUSH
12904: LD_EXP 9
12908: PUSH
12909: LD_INT 4
12911: ARRAY
12912: AND
12913: PUSH
12914: LD_EXP 9
12918: PUSH
12919: LD_INT 5
12921: ARRAY
12922: AND
12923: IFFALSE 12926
// disable ;
12925: DISABLE
// end ;
12926: PPOPN 4
12928: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12929: LD_EXP 10
12933: PUSH
12934: LD_EXP 11
12938: AND
12939: IFFALSE 13137
12941: GO 12943
12943: DISABLE
12944: LD_INT 0
12946: PPUSH
// begin DialogueOn ;
12947: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12951: LD_EXP 11
12955: PPUSH
12956: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12960: LD_ADDR_VAR 0 1
12964: PUSH
12965: LD_INT 1
12967: PPUSH
12968: LD_STRING D5c-Sol1-1
12970: PPUSH
12971: CALL 15534 0 2
12975: ST_TO_ADDR
// if not un then
12976: LD_VAR 0 1
12980: NOT
12981: IFFALSE 12999
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12983: LD_ADDR_VAR 0 1
12987: PUSH
12988: LD_INT 2
12990: PPUSH
12991: LD_STRING D5c-FSol1-1
12993: PPUSH
12994: CALL 15534 0 2
12998: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12999: LD_EXP 20
13003: PPUSH
13004: LD_STRING D5c-JMM-1
13006: PPUSH
13007: CALL_OW 88
// if IsOk ( Lisa ) then
13011: LD_EXP 21
13015: PPUSH
13016: CALL_OW 302
13020: IFFALSE 13036
// Say ( Lisa , D5d-Lisa-1 ) else
13022: LD_EXP 21
13026: PPUSH
13027: LD_STRING D5d-Lisa-1
13029: PPUSH
13030: CALL_OW 88
13034: GO 13121
// if IsOk ( Cyrus ) then
13036: LD_EXP 24
13040: PPUSH
13041: CALL_OW 302
13045: IFFALSE 13061
// Say ( Cyrus , D5d-Cyrus-1 ) else
13047: LD_EXP 24
13051: PPUSH
13052: LD_STRING D5d-Cyrus-1
13054: PPUSH
13055: CALL_OW 88
13059: GO 13121
// if IsOk ( Gary ) then
13061: LD_EXP 31
13065: PPUSH
13066: CALL_OW 302
13070: IFFALSE 13086
// Say ( Gary , D5d-Gary-1 ) else
13072: LD_EXP 31
13076: PPUSH
13077: LD_STRING D5d-Gary-1
13079: PPUSH
13080: CALL_OW 88
13084: GO 13121
// if GetSex ( un ) = sex_male then
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 258
13095: PUSH
13096: LD_INT 1
13098: EQUAL
13099: IFFALSE 13115
// Say ( un , D5d-Sol1-1 ) else
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_STRING D5d-Sol1-1
13108: PPUSH
13109: CALL_OW 88
13113: GO 13121
// begin DialogueOff ;
13115: CALL_OW 7
// exit ;
13119: GO 13137
// end ; Say ( JMM , D5d-JMM-1 ) ;
13121: LD_EXP 20
13125: PPUSH
13126: LD_STRING D5d-JMM-1
13128: PPUSH
13129: CALL_OW 88
// DialogueOff ;
13133: CALL_OW 7
// end ;
13137: PPOPN 1
13139: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13140: LD_INT 1
13142: PPUSH
13143: LD_INT 17
13145: PPUSH
13146: CALL_OW 294
13150: PUSH
13151: LD_INT 2
13153: GREATEREQUAL
13154: IFFALSE 13275
13156: GO 13158
13158: DISABLE
13159: LD_INT 0
13161: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13162: LD_INT 10
13164: PPUSH
13165: LD_INT 5
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: LD_INT 10
13173: NEG
13174: PPUSH
13175: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13179: LD_INT 10
13181: PPUSH
13182: LD_INT 5
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13192: LD_INT 10
13194: PPUSH
13195: LD_INT 5
13197: PPUSH
13198: CALL_OW 86
// DialogueOn ;
13202: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13206: LD_ADDR_VAR 0 1
13210: PUSH
13211: LD_INT 1
13213: PPUSH
13214: LD_STRING D6-Sci1-1
13216: PPUSH
13217: CALL 15534 0 2
13221: ST_TO_ADDR
// if un then
13222: LD_VAR 0 1
13226: IFFALSE 13264
// begin Say ( JMM , D6-JMM-1 ) ;
13228: LD_EXP 20
13232: PPUSH
13233: LD_STRING D6-JMM-1
13235: PPUSH
13236: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13240: LD_VAR 0 1
13244: PPUSH
13245: LD_STRING D6-Sci1-2
13247: PPUSH
13248: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13252: LD_EXP 20
13256: PPUSH
13257: LD_STRING D6-JMM-2
13259: PPUSH
13260: CALL_OW 88
// end ; DialogueOff ;
13264: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13268: LD_STRING M3
13270: PPUSH
13271: CALL_OW 337
// end ;
13275: PPOPN 1
13277: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13278: LD_OWVAR 1
13282: PUSH
13283: LD_INT 42000
13285: GREATEREQUAL
13286: PUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 169
13292: PPUSH
13293: LD_INT 90
13295: PPUSH
13296: LD_INT 10
13298: PPUSH
13299: CALL 52221 0 4
13303: PUSH
13304: LD_INT 4
13306: ARRAY
13307: PUSH
13308: LD_INT 0
13310: EQUAL
13311: PUSH
13312: LD_INT 45
13314: PPUSH
13315: CALL_OW 301
13319: OR
13320: PUSH
13321: LD_INT 45
13323: PPUSH
13324: CALL_OW 255
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: OR
13333: AND
13334: PUSH
13335: LD_INT 94
13337: PPUSH
13338: CALL_OW 301
13342: NOT
13343: AND
13344: IFFALSE 14470
13346: GO 13348
13348: DISABLE
13349: LD_INT 0
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
// begin uc_side := 5 ;
13355: LD_ADDR_OWVAR 20
13359: PUSH
13360: LD_INT 5
13362: ST_TO_ADDR
// uc_nation := 2 ;
13363: LD_ADDR_OWVAR 21
13367: PUSH
13368: LD_INT 2
13370: ST_TO_ADDR
// InitHc ;
13371: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13375: LD_INT 1
13377: PPUSH
13378: LD_INT 3
13380: PPUSH
13381: LD_INT 8
13383: PPUSH
13384: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13388: LD_ADDR_OWVAR 29
13392: PUSH
13393: LD_INT 12
13395: PUSH
13396: LD_INT 12
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13403: LD_ADDR_OWVAR 33
13407: PUSH
13408: LD_STRING SecondCharsGal
13410: ST_TO_ADDR
// hc_face_number := 7 ;
13411: LD_ADDR_OWVAR 34
13415: PUSH
13416: LD_INT 7
13418: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13419: LD_ADDR_EXP 45
13423: PUSH
13424: CALL_OW 44
13428: ST_TO_ADDR
// InitHc ;
13429: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 16
13438: PPUSH
13439: LD_INT 2
13441: PPUSH
13442: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13446: LD_ADDR_OWVAR 29
13450: PUSH
13451: LD_INT 12
13453: PUSH
13454: LD_INT 12
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
// hc_name :=  ;
13461: LD_ADDR_OWVAR 26
13465: PUSH
13466: LD_STRING 
13468: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13469: LD_ADDR_EXP 46
13473: PUSH
13474: CALL_OW 44
13478: ST_TO_ADDR
// InitHc ;
13479: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13483: LD_INT 35
13485: PPUSH
13486: CALL_OW 67
// until not InBattle ( 1 ) ;
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 463
13497: NOT
13498: IFFALSE 13483
// wait ( 0 0$5 ) ;
13500: LD_INT 175
13502: PPUSH
13503: CALL_OW 67
// DialogueOn ;
13507: CALL_OW 6
// InGameOn ;
13511: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13515: LD_ADDR_VAR 0 1
13519: PUSH
13520: LD_INT 22
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 2
13532: PUSH
13533: LD_INT 25
13535: PUSH
13536: LD_INT 1
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 25
13545: PUSH
13546: LD_INT 2
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 25
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 4
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 25
13575: PUSH
13576: LD_INT 5
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PPUSH
13606: CALL_OW 69
13610: PUSH
13611: LD_EXP 20
13615: PUSH
13616: LD_EXP 21
13620: PUSH
13621: LD_EXP 22
13625: PUSH
13626: LD_EXP 23
13630: PUSH
13631: LD_EXP 24
13635: PUSH
13636: LD_EXP 25
13640: PUSH
13641: LD_EXP 26
13645: PUSH
13646: LD_EXP 27
13650: PUSH
13651: LD_EXP 28
13655: PUSH
13656: LD_EXP 30
13660: PUSH
13661: LD_EXP 31
13665: PUSH
13666: LD_EXP 32
13670: PUSH
13671: LD_EXP 33
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: DIFF
13691: PPUSH
13692: LD_INT 26
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: ST_TO_ADDR
// if not un and Brown then
13711: LD_VAR 0 1
13715: NOT
13716: PUSH
13717: LD_EXP 26
13721: AND
13722: IFFALSE 13734
// un := Brown ;
13724: LD_ADDR_VAR 0 1
13728: PUSH
13729: LD_EXP 26
13733: ST_TO_ADDR
// if un then
13734: LD_VAR 0 1
13738: IFFALSE 13764
// begin Say ( un , D7-Sol1-1 ) ;
13740: LD_VAR 0 1
13744: PPUSH
13745: LD_STRING D7-Sol1-1
13747: PPUSH
13748: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13752: LD_EXP 20
13756: PPUSH
13757: LD_STRING D7-JMM-1
13759: PPUSH
13760: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13764: LD_EXP 45
13768: PPUSH
13769: LD_STRING D7-Ar1-1
13771: PPUSH
13772: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13776: LD_EXP 20
13780: PPUSH
13781: LD_STRING D7-JMM-2
13783: PPUSH
13784: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13788: LD_EXP 45
13792: PPUSH
13793: LD_STRING D7-Ar1-2
13795: PPUSH
13796: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13800: LD_EXP 20
13804: PPUSH
13805: LD_STRING D7-JMM-3
13807: PPUSH
13808: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13812: LD_EXP 45
13816: PPUSH
13817: LD_STRING D7-Ar1-3
13819: PPUSH
13820: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13824: LD_EXP 20
13828: PPUSH
13829: LD_STRING D7-JMM-4
13831: PPUSH
13832: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13836: LD_EXP 45
13840: PPUSH
13841: LD_STRING D7-Ar1-4
13843: PPUSH
13844: CALL_OW 94
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// case Query ( QCameras ) of 1 :
13856: LD_STRING QCameras
13858: PPUSH
13859: CALL_OW 97
13863: PUSH
13864: LD_INT 1
13866: DOUBLE
13867: EQUAL
13868: IFTRUE 13872
13870: GO 13875
13872: POP
// ; 2 :
13873: GO 13889
13875: LD_INT 2
13877: DOUBLE
13878: EQUAL
13879: IFTRUE 13883
13881: GO 13888
13883: POP
// exit ; end ;
13884: GO 14470
13886: GO 13889
13888: POP
// ChangeMissionObjectives ( MCar ) ;
13889: LD_STRING MCar
13891: PPUSH
13892: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13896: LD_INT 124
13898: PPUSH
13899: LD_INT 90
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 6
13907: NEG
13908: PPUSH
13909: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13913: LD_INT 124
13915: PPUSH
13916: LD_INT 90
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13926: LD_INT 12
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 424
// wait ( 3 ) ;
13936: LD_INT 3
13938: PPUSH
13939: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13943: LD_INT 124
13945: PPUSH
13946: LD_INT 90
13948: PPUSH
13949: CALL_OW 86
// cargo := false ;
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13961: LD_INT 35
13963: PPUSH
13964: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_INT 12
13975: PPUSH
13976: LD_INT 32
13978: PUSH
13979: LD_INT 3
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 34
13988: PUSH
13989: LD_INT 32
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 58
13998: PUSH
13999: EMPTY
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 70
14011: ST_TO_ADDR
// until cargo ;
14012: LD_VAR 0 3
14016: IFFALSE 13961
// cargo := cargo [ 1 ] ;
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_VAR 0 3
14027: PUSH
14028: LD_INT 1
14030: ARRAY
14031: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 5
14039: PPUSH
14040: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14044: LD_INT 12
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14054: LD_EXP 45
14058: PPUSH
14059: LD_INT 11
14061: PPUSH
14062: LD_INT 0
14064: PPUSH
14065: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14069: LD_EXP 46
14073: PPUSH
14074: LD_INT 11
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14084: LD_EXP 45
14088: PUSH
14089: LD_EXP 46
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PPUSH
14098: LD_INT 12
14100: PPUSH
14101: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14105: LD_EXP 45
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14119: LD_EXP 45
14123: PUSH
14124: LD_EXP 46
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PPUSH
14133: LD_INT 209
14135: PPUSH
14136: LD_INT 178
14138: PPUSH
14139: CALL_OW 171
// while ( true ) do
14143: LD_INT 1
14145: IFFALSE 14299
// begin wait ( 0 0$1 ) ;
14147: LD_INT 35
14149: PPUSH
14150: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14154: LD_EXP 45
14158: PPUSH
14159: CALL_OW 314
14163: NOT
14164: PUSH
14165: LD_EXP 46
14169: PPUSH
14170: CALL_OW 314
14174: NOT
14175: OR
14176: IFFALSE 14202
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14178: LD_EXP 45
14182: PUSH
14183: LD_EXP 46
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PPUSH
14192: LD_INT 209
14194: PPUSH
14195: LD_INT 178
14197: PPUSH
14198: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14202: LD_EXP 45
14206: PPUSH
14207: LD_INT 10
14209: PPUSH
14210: CALL_OW 308
14214: IFFALSE 14225
// RemoveUnit ( ar_mechanic ) ;
14216: LD_EXP 45
14220: PPUSH
14221: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14225: LD_EXP 46
14229: PPUSH
14230: LD_INT 10
14232: PPUSH
14233: CALL_OW 308
14237: IFFALSE 14248
// RemoveUnit ( ar_mechanic_friend ) ;
14239: LD_EXP 46
14243: PPUSH
14244: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 10
14255: PPUSH
14256: CALL_OW 308
14260: IFFALSE 14271
// RemoveUnit ( cargo ) ;
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14271: LD_EXP 45
14275: PPUSH
14276: CALL_OW 300
14280: NOT
14281: PUSH
14282: LD_EXP 46
14286: PPUSH
14287: CALL_OW 300
14291: NOT
14292: AND
14293: IFFALSE 14297
// break ;
14295: GO 14299
// end ;
14297: GO 14143
// wait ( 0 0$2 ) ;
14299: LD_INT 70
14301: PPUSH
14302: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14306: LD_EXP 45
14310: PPUSH
14311: LD_STRING D7a-Ar1-1
14313: PPUSH
14314: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14318: LD_ADDR_VAR 0 4
14322: PUSH
14323: LD_INT 129
14325: PUSH
14326: LD_INT 10
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 103
14335: PUSH
14336: LD_INT 6
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 148
14345: PUSH
14346: LD_INT 47
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 155
14355: PUSH
14356: LD_INT 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: ST_TO_ADDR
// if Difficulty = 1 then
14369: LD_OWVAR 67
14373: PUSH
14374: LD_INT 1
14376: EQUAL
14377: IFFALSE 14414
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14379: LD_ADDR_VAR 0 4
14383: PUSH
14384: LD_VAR 0 4
14388: PUSH
14389: LD_INT 78
14391: PUSH
14392: LD_INT 7
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 104
14401: PUSH
14402: LD_INT 43
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: ADD
14413: ST_TO_ADDR
// for i in tmp do
14414: LD_ADDR_VAR 0 2
14418: PUSH
14419: LD_VAR 0 4
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14458
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14427: LD_VAR 0 2
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: PPUSH
14436: LD_VAR 0 2
14440: PUSH
14441: LD_INT 2
14443: ARRAY
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_INT 9
14450: NEG
14451: PPUSH
14452: CALL_OW 330
14456: GO 14424
14458: POP
14459: POP
// CenterOnXY ( 129 , 10 ) ;
14460: LD_INT 129
14462: PPUSH
14463: LD_INT 10
14465: PPUSH
14466: CALL_OW 84
// end ;
14470: PPOPN 4
14472: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14473: LD_EXP 15
14477: PUSH
14478: LD_INT 21000
14480: MINUS
14481: PUSH
14482: LD_OWVAR 1
14486: LESSEQUAL
14487: IFFALSE 14527
14489: GO 14491
14491: DISABLE
// begin powell_warn := true ;
14492: LD_ADDR_EXP 16
14496: PUSH
14497: LD_INT 1
14499: ST_TO_ADDR
// DialogueOn ;
14500: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14504: LD_EXP 29
14508: PPUSH
14509: LD_STRING D9-Pow-1
14511: PPUSH
14512: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14516: LD_INT 10
14518: PPUSH
14519: CALL_OW 68
// DialogueOff ;
14523: CALL_OW 7
// end ;
14527: END
// every 0 0$1 trigger game_time <= tick do
14528: LD_EXP 15
14532: PUSH
14533: LD_OWVAR 1
14537: LESSEQUAL
14538: IFFALSE 14577
14540: GO 14542
14542: DISABLE
// begin DialogueOn ;
14543: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14547: LD_EXP 29
14551: PPUSH
14552: LD_STRING D9a-Pow-1
14554: PPUSH
14555: CALL_OW 94
// dwait ( 0 0$2 ) ;
14559: LD_INT 70
14561: PPUSH
14562: CALL_OW 68
// DialogueOff ;
14566: CALL_OW 7
// YouLost ( Command ) ;
14570: LD_STRING Command
14572: PPUSH
14573: CALL_OW 104
// end ;
14577: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14578: LD_INT 22
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 1
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PPUSH
14602: CALL_OW 69
14606: PUSH
14607: LD_INT 0
14609: EQUAL
14610: PUSH
14611: LD_EXP 20
14615: PPUSH
14616: CALL_OW 302
14620: AND
14621: IFFALSE 15353
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14629: LD_OWVAR 1
14633: PUSH
14634: LD_INT 199500
14636: PUSH
14637: LD_INT 178500
14639: PUSH
14640: LD_INT 168000
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: LD_OWVAR 67
14652: ARRAY
14653: LESS
14654: IFFALSE 14668
// AddMedal ( Time1 , 1 ) else
14656: LD_STRING Time1
14658: PPUSH
14659: LD_INT 1
14661: PPUSH
14662: CALL_OW 101
14666: GO 14699
// if not powell_warn then
14668: LD_EXP 16
14672: NOT
14673: IFFALSE 14688
// AddMedal ( Time1 , - 1 ) else
14675: LD_STRING Time1
14677: PPUSH
14678: LD_INT 1
14680: NEG
14681: PPUSH
14682: CALL_OW 101
14686: GO 14699
// AddMedal ( Time1 , - 2 ) ;
14688: LD_STRING Time1
14690: PPUSH
14691: LD_INT 2
14693: NEG
14694: PPUSH
14695: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14699: LD_EXP 17
14703: PUSH
14704: LD_INT 5
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_OWVAR 67
14722: ARRAY
14723: GREATEREQUAL
14724: IFFALSE 14739
// AddMedal ( Destroy , - 2 ) else
14726: LD_STRING Destroy
14728: PPUSH
14729: LD_INT 2
14731: NEG
14732: PPUSH
14733: CALL_OW 101
14737: GO 14856
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14739: LD_INT 22
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: PUSH
14775: LD_INT 25
14777: GREATEREQUAL
14778: IFFALSE 14793
// AddMedal ( Destroy , - 1 ) else
14780: LD_STRING Destroy
14782: PPUSH
14783: LD_INT 1
14785: NEG
14786: PPUSH
14787: CALL_OW 101
14791: GO 14856
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14793: LD_INT 22
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 3
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 50
14815: PUSH
14816: EMPTY
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: PUSH
14829: LD_INT 15
14831: GREATEREQUAL
14832: IFFALSE 14846
// AddMedal ( Destroy , 1 ) else
14834: LD_STRING Destroy
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 101
14844: GO 14856
// AddMedal ( Destroy , 2 ) ;
14846: LD_STRING Destroy
14848: PPUSH
14849: LD_INT 2
14851: PPUSH
14852: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14856: LD_EXP 13
14860: PPUSH
14861: LD_STRING 11_artifact_captured
14863: PPUSH
14864: CALL_OW 39
// if artifact_get then
14868: LD_EXP 13
14872: IFFALSE 14886
// AddMedal ( Artefact , 1 ) else
14874: LD_STRING Artefact
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 101
14884: GO 14897
// AddMedal ( Artefact , - 1 ) ;
14886: LD_STRING Artefact
14888: PPUSH
14889: LD_INT 1
14891: NEG
14892: PPUSH
14893: CALL_OW 101
// GiveMedals ( MAIN ) ;
14897: LD_STRING MAIN
14899: PPUSH
14900: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14904: LD_ADDR_EXP 19
14908: PUSH
14909: LD_EXP 19
14913: PPUSH
14914: LD_INT 51
14916: PUSH
14917: EMPTY
14918: LIST
14919: PPUSH
14920: CALL_OW 72
14924: ST_TO_ADDR
// tmp := JMM ^ selected ;
14925: LD_ADDR_VAR 0 1
14929: PUSH
14930: LD_EXP 20
14934: PUSH
14935: LD_EXP 19
14939: ADD
14940: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14950: LD_VAR 0 1
14954: PUSH
14955: LD_EXP 20
14959: PUSH
14960: LD_EXP 21
14964: PUSH
14965: LD_EXP 22
14969: PUSH
14970: LD_EXP 23
14974: PUSH
14975: LD_EXP 24
14979: PUSH
14980: LD_EXP 25
14984: PUSH
14985: LD_EXP 26
14989: PUSH
14990: LD_EXP 27
14994: PUSH
14995: LD_EXP 28
14999: PUSH
15000: LD_EXP 30
15004: PUSH
15005: LD_EXP 31
15009: PUSH
15010: LD_EXP 32
15014: PUSH
15015: LD_EXP 33
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: DIFF
15035: PPUSH
15036: LD_STRING 11c_others
15038: PPUSH
15039: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15043: LD_EXP 20
15047: PPUSH
15048: LD_EXP 3
15052: PUSH
15053: LD_STRING JMM
15055: STR
15056: PPUSH
15057: CALL_OW 38
// if Lisa then
15061: LD_EXP 21
15065: IFFALSE 15085
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15067: LD_EXP 21
15071: PPUSH
15072: LD_EXP 3
15076: PUSH
15077: LD_STRING Lisa
15079: STR
15080: PPUSH
15081: CALL_OW 38
// if Donaldson then
15085: LD_EXP 22
15089: IFFALSE 15109
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15091: LD_EXP 22
15095: PPUSH
15096: LD_EXP 3
15100: PUSH
15101: LD_STRING Donaldson
15103: STR
15104: PPUSH
15105: CALL_OW 38
// if Bobby then
15109: LD_EXP 23
15113: IFFALSE 15133
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15115: LD_EXP 23
15119: PPUSH
15120: LD_EXP 3
15124: PUSH
15125: LD_STRING Bobby
15127: STR
15128: PPUSH
15129: CALL_OW 38
// if Cyrus then
15133: LD_EXP 24
15137: IFFALSE 15157
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15139: LD_EXP 24
15143: PPUSH
15144: LD_EXP 3
15148: PUSH
15149: LD_STRING Cyrus
15151: STR
15152: PPUSH
15153: CALL_OW 38
// if Denis then
15157: LD_EXP 25
15161: IFFALSE 15181
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15163: LD_EXP 25
15167: PPUSH
15168: LD_EXP 3
15172: PUSH
15173: LD_STRING Denis
15175: STR
15176: PPUSH
15177: CALL_OW 38
// if Brown then
15181: LD_EXP 26
15185: IFFALSE 15205
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15187: LD_EXP 26
15191: PPUSH
15192: LD_EXP 3
15196: PUSH
15197: LD_STRING Brown
15199: STR
15200: PPUSH
15201: CALL_OW 38
// if Gladstone then
15205: LD_EXP 27
15209: IFFALSE 15229
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15211: LD_EXP 27
15215: PPUSH
15216: LD_EXP 3
15220: PUSH
15221: LD_STRING Gladstone
15223: STR
15224: PPUSH
15225: CALL_OW 38
// if Houten then
15229: LD_EXP 28
15233: IFFALSE 15253
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15235: LD_EXP 28
15239: PPUSH
15240: LD_EXP 3
15244: PUSH
15245: LD_STRING Houten
15247: STR
15248: PPUSH
15249: CALL_OW 38
// if Cornel then
15253: LD_EXP 30
15257: IFFALSE 15277
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
15259: LD_EXP 30
15263: PPUSH
15264: LD_EXP 3
15268: PUSH
15269: LD_STRING Cornel
15271: STR
15272: PPUSH
15273: CALL_OW 38
// if Gary then
15277: LD_EXP 31
15281: IFFALSE 15301
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15283: LD_EXP 31
15287: PPUSH
15288: LD_EXP 3
15292: PUSH
15293: LD_STRING Gary
15295: STR
15296: PPUSH
15297: CALL_OW 38
// if Frank then
15301: LD_EXP 32
15305: IFFALSE 15325
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15307: LD_EXP 32
15311: PPUSH
15312: LD_EXP 3
15316: PUSH
15317: LD_STRING Frank
15319: STR
15320: PPUSH
15321: CALL_OW 38
// if Kikuchi then
15325: LD_EXP 33
15329: IFFALSE 15349
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15331: LD_EXP 33
15335: PPUSH
15336: LD_EXP 3
15340: PUSH
15341: LD_STRING Kikuchi
15343: STR
15344: PPUSH
15345: CALL_OW 38
// YouWin ;
15349: CALL_OW 103
// end ;
15353: PPOPN 1
15355: END
// export function CanSayRand ( side ) ; begin
15356: LD_INT 0
15358: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_INT 52
15366: PUSH
15367: EMPTY
15368: LIST
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_VAR 0 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: LD_INT 25
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 25
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 25
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 25
15417: PUSH
15418: LD_INT 4
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: PUSH
15442: LD_EXP 20
15446: PUSH
15447: LD_EXP 32
15451: PUSH
15452: LD_EXP 21
15456: PUSH
15457: LD_EXP 22
15461: PUSH
15462: LD_EXP 23
15466: PUSH
15467: LD_EXP 24
15471: PUSH
15472: LD_EXP 25
15476: PUSH
15477: LD_EXP 26
15481: PUSH
15482: LD_EXP 27
15486: PUSH
15487: LD_EXP 28
15491: PUSH
15492: LD_EXP 29
15496: PUSH
15497: LD_EXP 30
15501: PUSH
15502: LD_EXP 31
15506: PUSH
15507: LD_EXP 33
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: DIFF
15528: ST_TO_ADDR
// end ;
15529: LD_VAR 0 2
15533: RET
// export function SayRand ( sex , dial ) ; begin
15534: LD_INT 0
15536: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 52
15544: PUSH
15545: EMPTY
15546: LIST
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 26
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 25
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 25
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 4
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_EXP 20
15635: PUSH
15636: LD_EXP 32
15640: PUSH
15641: LD_EXP 21
15645: PUSH
15646: LD_EXP 22
15650: PUSH
15651: LD_EXP 23
15655: PUSH
15656: LD_EXP 24
15660: PUSH
15661: LD_EXP 25
15665: PUSH
15666: LD_EXP 26
15670: PUSH
15671: LD_EXP 27
15675: PUSH
15676: LD_EXP 28
15680: PUSH
15681: LD_EXP 29
15685: PUSH
15686: LD_EXP 30
15690: PUSH
15691: LD_EXP 31
15695: PUSH
15696: LD_EXP 33
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: DIFF
15717: ST_TO_ADDR
// if not result then
15718: LD_VAR 0 3
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15755
// result := result [ 1 ] ;
15727: LD_ADDR_VAR 0 3
15731: PUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: ST_TO_ADDR
// Say ( result , dial ) ;
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 88
// end ;
15755: LD_VAR 0 3
15759: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15760: LD_INT 0
15762: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 26
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: LD_INT 25
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 25
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 25
15815: PUSH
15816: LD_INT 3
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 4
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: LD_EXP 20
15854: PUSH
15855: LD_EXP 32
15859: PUSH
15860: LD_EXP 21
15864: PUSH
15865: LD_EXP 22
15869: PUSH
15870: LD_EXP 23
15874: PUSH
15875: LD_EXP 24
15879: PUSH
15880: LD_EXP 25
15884: PUSH
15885: LD_EXP 26
15889: PUSH
15890: LD_EXP 27
15894: PUSH
15895: LD_EXP 28
15899: PUSH
15900: LD_EXP 29
15904: PUSH
15905: LD_EXP 30
15909: PUSH
15910: LD_EXP 31
15914: PUSH
15915: LD_EXP 33
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: PUSH
15936: LD_VAR 0 3
15940: ADD
15941: DIFF
15942: ST_TO_ADDR
// if not result then
15943: LD_VAR 0 4
15947: NOT
15948: IFFALSE 15952
// exit ;
15950: GO 15980
// result := result [ 1 ] ;
15952: LD_ADDR_VAR 0 4
15956: PUSH
15957: LD_VAR 0 4
15961: PUSH
15962: LD_INT 1
15964: ARRAY
15965: ST_TO_ADDR
// Say ( result , dial ) ;
15966: LD_VAR 0 4
15970: PPUSH
15971: LD_VAR 0 2
15975: PPUSH
15976: CALL_OW 88
// end ; end_of_file
15980: LD_VAR 0 4
15984: RET
// export function CustomEvent ( event ) ; begin
15985: LD_INT 0
15987: PPUSH
// end ;
15988: LD_VAR 0 2
15992: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 255
16002: PUSH
16003: LD_INT 1
16005: EQUAL
16006: IFFALSE 16016
// artifact_get := true ;
16008: LD_ADDR_EXP 13
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 255
16025: PUSH
16026: LD_INT 2
16028: EQUAL
16029: IFFALSE 16047
// begin artifact_get := false ;
16031: LD_ADDR_EXP 13
16035: PUSH
16036: LD_INT 0
16038: ST_TO_ADDR
// artifact_stolen := true ;
16039: LD_ADDR_EXP 12
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16047: LD_ADDR_EXP 14
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// end ;
16055: PPOPN 2
16057: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16058: LD_ADDR_EXP 14
16062: PUSH
16063: LD_INT 0
16065: ST_TO_ADDR
// end ;
16066: PPOPN 2
16068: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16069: LD_VAR 0 1
16073: PUSH
16074: LD_EXP 20
16078: EQUAL
16079: IFFALSE 16090
// begin YouLost ( JMM ) ;
16081: LD_STRING JMM
16083: PPUSH
16084: CALL_OW 104
// exit ;
16088: GO 16222
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16090: LD_VAR 0 1
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_INT 1
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: LD_INT 25
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 25
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 25
16150: PUSH
16151: LD_INT 4
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 25
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 25
16170: PUSH
16171: LD_INT 8
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: IN
16197: IFFALSE 16213
// loses_counter := loses_counter + 1 ;
16199: LD_ADDR_EXP 17
16203: PUSH
16204: LD_EXP 17
16208: PUSH
16209: LD_INT 1
16211: PLUS
16212: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16213: LD_VAR 0 1
16217: PPUSH
16218: CALL 42046 0 1
// end ;
16222: PPOPN 1
16224: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16225: LD_VAR 0 1
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL 43952 0 2
// end ;
16239: PPOPN 2
16241: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL 43261 0 1
// end ;
16251: PPOPN 1
16253: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16254: LD_VAR 0 1
16258: PPUSH
16259: LD_VAR 0 2
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_VAR 0 4
16273: PPUSH
16274: LD_VAR 0 5
16278: PPUSH
16279: CALL 41362 0 5
// end ;
16283: PPOPN 5
16285: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_VAR 0 2
16295: PPUSH
16296: CALL 40952 0 2
// end ;
16300: PPOPN 2
16302: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 247
16312: PUSH
16313: LD_INT 2
16315: EQUAL
16316: IFFALSE 16320
// exit ;
16318: GO 16337
// if not kamikazed then
16320: LD_EXP 11
16324: NOT
16325: IFFALSE 16337
// kamikazed := unit ;
16327: LD_ADDR_EXP 11
16331: PUSH
16332: LD_VAR 0 1
16336: ST_TO_ADDR
// end ;
16337: PPOPN 1
16339: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_VAR 0 2
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_VAR 0 4
16363: PPUSH
16364: CALL 40790 0 4
// end ;
16368: PPOPN 6
16370: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16371: LD_VAR 0 1
16375: PPUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: CALL 40565 0 3
// end ;
16390: PPOPN 3
16392: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: CALL 41742 0 2
// end ;
16407: PPOPN 2
16409: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_VAR 0 2
16419: PPUSH
16420: CALL 40259 0 2
// end ;
16424: PPOPN 2
16426: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 2
16436: PPUSH
16437: CALL 40450 0 2
// end ;
16441: PPOPN 2
16443: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL 43020 0 1
// end ;
16453: PPOPN 1
16455: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL 44213 0 2
// end ;
16470: PPOPN 2
16472: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_VAR 0 2
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_VAR 0 4
16492: PPUSH
16493: CALL 44429 0 4
// end ; end_of_file
16497: PPOPN 4
16499: END
// every 0 0$1 trigger game do
16500: LD_EXP 2
16504: IFFALSE 16534
16506: GO 16508
16508: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16509: LD_INT 7
16511: PUSH
16512: LD_INT 6
16514: PUSH
16515: LD_INT 4
16517: PUSH
16518: LD_INT 6
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PPUSH
16527: LD_INT 1750
16529: PPUSH
16530: CALL 16535 0 2
16534: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
16539: PPUSH
// if not areas then
16540: LD_VAR 0 1
16544: NOT
16545: IFFALSE 16549
// exit ;
16547: GO 16679
// repeat wait ( time ) ;
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16558: LD_ADDR_VAR 0 5
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_INT 90
16568: PPUSH
16569: CALL_OW 12
16573: ST_TO_ADDR
// for i in areas do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_VAR 0 1
16583: PUSH
16584: FOR_IN
16585: IFFALSE 16638
// begin if Prob ( p ) then
16587: LD_VAR 0 5
16591: PPUSH
16592: CALL_OW 13
16596: IFFALSE 16636
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16598: LD_INT 1
16600: PPUSH
16601: LD_INT 5
16603: PPUSH
16604: CALL_OW 12
16608: PPUSH
16609: LD_VAR 0 4
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16621: LD_INT 385
16623: PPUSH
16624: LD_INT 595
16626: PPUSH
16627: CALL_OW 12
16631: PPUSH
16632: CALL_OW 67
// end ; end ;
16636: GO 16584
16638: POP
16639: POP
// time := time + 0 0$3 ;
16640: LD_ADDR_VAR 0 2
16644: PUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 105
16652: PLUS
16653: ST_TO_ADDR
// if time > 7 7$00 then
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 14700
16661: GREATER
16662: IFFALSE 16672
// time := 0 0$40 ;
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: LD_INT 1400
16671: ST_TO_ADDR
// until not game ;
16672: LD_EXP 2
16676: NOT
16677: IFFALSE 16549
// end ; end_of_file
16679: LD_VAR 0 3
16683: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
// skirmish := false ;
16688: LD_ADDR_EXP 47
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// debug_mc := false ;
16696: LD_ADDR_EXP 48
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// mc_bases := [ ] ;
16704: LD_ADDR_EXP 49
16708: PUSH
16709: EMPTY
16710: ST_TO_ADDR
// mc_sides := [ ] ;
16711: LD_ADDR_EXP 75
16715: PUSH
16716: EMPTY
16717: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16718: LD_ADDR_EXP 50
16722: PUSH
16723: EMPTY
16724: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16725: LD_ADDR_EXP 51
16729: PUSH
16730: EMPTY
16731: ST_TO_ADDR
// mc_need_heal := [ ] ;
16732: LD_ADDR_EXP 52
16736: PUSH
16737: EMPTY
16738: ST_TO_ADDR
// mc_healers := [ ] ;
16739: LD_ADDR_EXP 53
16743: PUSH
16744: EMPTY
16745: ST_TO_ADDR
// mc_build_list := [ ] ;
16746: LD_ADDR_EXP 54
16750: PUSH
16751: EMPTY
16752: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16753: LD_ADDR_EXP 81
16757: PUSH
16758: EMPTY
16759: ST_TO_ADDR
// mc_builders := [ ] ;
16760: LD_ADDR_EXP 55
16764: PUSH
16765: EMPTY
16766: ST_TO_ADDR
// mc_construct_list := [ ] ;
16767: LD_ADDR_EXP 56
16771: PUSH
16772: EMPTY
16773: ST_TO_ADDR
// mc_turret_list := [ ] ;
16774: LD_ADDR_EXP 57
16778: PUSH
16779: EMPTY
16780: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16781: LD_ADDR_EXP 58
16785: PUSH
16786: EMPTY
16787: ST_TO_ADDR
// mc_miners := [ ] ;
16788: LD_ADDR_EXP 63
16792: PUSH
16793: EMPTY
16794: ST_TO_ADDR
// mc_mines := [ ] ;
16795: LD_ADDR_EXP 62
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// mc_minefields := [ ] ;
16802: LD_ADDR_EXP 64
16806: PUSH
16807: EMPTY
16808: ST_TO_ADDR
// mc_crates := [ ] ;
16809: LD_ADDR_EXP 65
16813: PUSH
16814: EMPTY
16815: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16816: LD_ADDR_EXP 66
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// mc_crates_area := [ ] ;
16823: LD_ADDR_EXP 67
16827: PUSH
16828: EMPTY
16829: ST_TO_ADDR
// mc_vehicles := [ ] ;
16830: LD_ADDR_EXP 68
16834: PUSH
16835: EMPTY
16836: ST_TO_ADDR
// mc_attack := [ ] ;
16837: LD_ADDR_EXP 69
16841: PUSH
16842: EMPTY
16843: ST_TO_ADDR
// mc_produce := [ ] ;
16844: LD_ADDR_EXP 70
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// mc_defender := [ ] ;
16851: LD_ADDR_EXP 71
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// mc_parking := [ ] ;
16858: LD_ADDR_EXP 73
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16865: LD_ADDR_EXP 59
16869: PUSH
16870: EMPTY
16871: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16872: LD_ADDR_EXP 61
16876: PUSH
16877: EMPTY
16878: ST_TO_ADDR
// mc_scan := [ ] ;
16879: LD_ADDR_EXP 72
16883: PUSH
16884: EMPTY
16885: ST_TO_ADDR
// mc_scan_area := [ ] ;
16886: LD_ADDR_EXP 74
16890: PUSH
16891: EMPTY
16892: ST_TO_ADDR
// mc_tech := [ ] ;
16893: LD_ADDR_EXP 76
16897: PUSH
16898: EMPTY
16899: ST_TO_ADDR
// mc_class := [ ] ;
16900: LD_ADDR_EXP 90
16904: PUSH
16905: EMPTY
16906: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16907: LD_ADDR_EXP 91
16911: PUSH
16912: EMPTY
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 1
16918: RET
// export function MC_Kill ( base ) ; begin
16919: LD_INT 0
16921: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16922: LD_ADDR_EXP 49
16926: PUSH
16927: LD_EXP 49
16931: PPUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: EMPTY
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16944: LD_ADDR_EXP 50
16948: PUSH
16949: LD_EXP 50
16953: PPUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: EMPTY
16960: PPUSH
16961: CALL_OW 1
16965: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16966: LD_ADDR_EXP 51
16970: PUSH
16971: LD_EXP 51
16975: PPUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: EMPTY
16982: PPUSH
16983: CALL_OW 1
16987: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16988: LD_ADDR_EXP 52
16992: PUSH
16993: LD_EXP 52
16997: PPUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: EMPTY
17004: PPUSH
17005: CALL_OW 1
17009: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17010: LD_ADDR_EXP 53
17014: PUSH
17015: LD_EXP 53
17019: PPUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: EMPTY
17026: PPUSH
17027: CALL_OW 1
17031: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17032: LD_ADDR_EXP 54
17036: PUSH
17037: LD_EXP 54
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: EMPTY
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17054: LD_ADDR_EXP 55
17058: PUSH
17059: LD_EXP 55
17063: PPUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: EMPTY
17070: PPUSH
17071: CALL_OW 1
17075: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17076: LD_ADDR_EXP 56
17080: PUSH
17081: LD_EXP 56
17085: PPUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: EMPTY
17092: PPUSH
17093: CALL_OW 1
17097: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17098: LD_ADDR_EXP 57
17102: PUSH
17103: LD_EXP 57
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: EMPTY
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17120: LD_ADDR_EXP 58
17124: PUSH
17125: LD_EXP 58
17129: PPUSH
17130: LD_VAR 0 1
17134: PPUSH
17135: EMPTY
17136: PPUSH
17137: CALL_OW 1
17141: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17142: LD_ADDR_EXP 59
17146: PUSH
17147: LD_EXP 59
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: EMPTY
17158: PPUSH
17159: CALL_OW 1
17163: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17164: LD_ADDR_EXP 60
17168: PUSH
17169: LD_EXP 60
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17187: LD_ADDR_EXP 61
17191: PUSH
17192: LD_EXP 61
17196: PPUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: EMPTY
17203: PPUSH
17204: CALL_OW 1
17208: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17209: LD_ADDR_EXP 62
17213: PUSH
17214: LD_EXP 62
17218: PPUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: EMPTY
17225: PPUSH
17226: CALL_OW 1
17230: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17231: LD_ADDR_EXP 63
17235: PUSH
17236: LD_EXP 63
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: EMPTY
17247: PPUSH
17248: CALL_OW 1
17252: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17253: LD_ADDR_EXP 64
17257: PUSH
17258: LD_EXP 64
17262: PPUSH
17263: LD_VAR 0 1
17267: PPUSH
17268: EMPTY
17269: PPUSH
17270: CALL_OW 1
17274: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17275: LD_ADDR_EXP 65
17279: PUSH
17280: LD_EXP 65
17284: PPUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: EMPTY
17291: PPUSH
17292: CALL_OW 1
17296: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17297: LD_ADDR_EXP 66
17301: PUSH
17302: LD_EXP 66
17306: PPUSH
17307: LD_VAR 0 1
17311: PPUSH
17312: EMPTY
17313: PPUSH
17314: CALL_OW 1
17318: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17319: LD_ADDR_EXP 67
17323: PUSH
17324: LD_EXP 67
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: EMPTY
17335: PPUSH
17336: CALL_OW 1
17340: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17341: LD_ADDR_EXP 68
17345: PUSH
17346: LD_EXP 68
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: EMPTY
17357: PPUSH
17358: CALL_OW 1
17362: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17363: LD_ADDR_EXP 69
17367: PUSH
17368: LD_EXP 69
17372: PPUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: EMPTY
17379: PPUSH
17380: CALL_OW 1
17384: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17385: LD_ADDR_EXP 70
17389: PUSH
17390: LD_EXP 70
17394: PPUSH
17395: LD_VAR 0 1
17399: PPUSH
17400: EMPTY
17401: PPUSH
17402: CALL_OW 1
17406: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17407: LD_ADDR_EXP 71
17411: PUSH
17412: LD_EXP 71
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: EMPTY
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17429: LD_ADDR_EXP 72
17433: PUSH
17434: LD_EXP 72
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: EMPTY
17445: PPUSH
17446: CALL_OW 1
17450: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17451: LD_ADDR_EXP 73
17455: PUSH
17456: LD_EXP 73
17460: PPUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: EMPTY
17467: PPUSH
17468: CALL_OW 1
17472: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17473: LD_ADDR_EXP 74
17477: PUSH
17478: LD_EXP 74
17482: PPUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: EMPTY
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17495: LD_ADDR_EXP 76
17499: PUSH
17500: LD_EXP 76
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: EMPTY
17511: PPUSH
17512: CALL_OW 1
17516: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17517: LD_ADDR_EXP 78
17521: PUSH
17522: LD_EXP 78
17526: PPUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: EMPTY
17533: PPUSH
17534: CALL_OW 1
17538: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17539: LD_ADDR_EXP 79
17543: PUSH
17544: LD_EXP 79
17548: PPUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: EMPTY
17555: PPUSH
17556: CALL_OW 1
17560: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17561: LD_ADDR_EXP 80
17565: PUSH
17566: LD_EXP 80
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: EMPTY
17577: PPUSH
17578: CALL_OW 1
17582: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17583: LD_ADDR_EXP 81
17587: PUSH
17588: LD_EXP 81
17592: PPUSH
17593: LD_VAR 0 1
17597: PPUSH
17598: EMPTY
17599: PPUSH
17600: CALL_OW 1
17604: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17605: LD_ADDR_EXP 82
17609: PUSH
17610: LD_EXP 82
17614: PPUSH
17615: LD_VAR 0 1
17619: PPUSH
17620: EMPTY
17621: PPUSH
17622: CALL_OW 1
17626: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17627: LD_ADDR_EXP 83
17631: PUSH
17632: LD_EXP 83
17636: PPUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: EMPTY
17643: PPUSH
17644: CALL_OW 1
17648: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17649: LD_ADDR_EXP 84
17653: PUSH
17654: LD_EXP 84
17658: PPUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: EMPTY
17665: PPUSH
17666: CALL_OW 1
17670: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17671: LD_ADDR_EXP 85
17675: PUSH
17676: LD_EXP 85
17680: PPUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: EMPTY
17687: PPUSH
17688: CALL_OW 1
17692: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17693: LD_ADDR_EXP 86
17697: PUSH
17698: LD_EXP 86
17702: PPUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: EMPTY
17709: PPUSH
17710: CALL_OW 1
17714: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17715: LD_ADDR_EXP 87
17719: PUSH
17720: LD_EXP 87
17724: PPUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: EMPTY
17731: PPUSH
17732: CALL_OW 1
17736: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17737: LD_ADDR_EXP 88
17741: PUSH
17742: LD_EXP 88
17746: PPUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: EMPTY
17753: PPUSH
17754: CALL_OW 1
17758: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17759: LD_ADDR_EXP 89
17763: PUSH
17764: LD_EXP 89
17768: PPUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: EMPTY
17775: PPUSH
17776: CALL_OW 1
17780: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17781: LD_ADDR_EXP 90
17785: PUSH
17786: LD_EXP 90
17790: PPUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: EMPTY
17797: PPUSH
17798: CALL_OW 1
17802: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17803: LD_ADDR_EXP 91
17807: PUSH
17808: LD_EXP 91
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 0
17820: PPUSH
17821: CALL_OW 1
17825: ST_TO_ADDR
// end ;
17826: LD_VAR 0 2
17830: RET
// export function MC_Start ( ) ; var i ; begin
17831: LD_INT 0
17833: PPUSH
17834: PPUSH
// for i = 1 to mc_bases do
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: DOUBLE
17841: LD_INT 1
17843: DEC
17844: ST_TO_ADDR
17845: LD_EXP 49
17849: PUSH
17850: FOR_TO
17851: IFFALSE 18928
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17853: LD_ADDR_EXP 49
17857: PUSH
17858: LD_EXP 49
17862: PPUSH
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_EXP 49
17872: PUSH
17873: LD_VAR 0 2
17877: ARRAY
17878: PUSH
17879: LD_INT 0
17881: DIFF
17882: PPUSH
17883: CALL_OW 1
17887: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17888: LD_ADDR_EXP 50
17892: PUSH
17893: LD_EXP 50
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: EMPTY
17904: PPUSH
17905: CALL_OW 1
17909: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17910: LD_ADDR_EXP 51
17914: PUSH
17915: LD_EXP 51
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: EMPTY
17926: PPUSH
17927: CALL_OW 1
17931: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17932: LD_ADDR_EXP 52
17936: PUSH
17937: LD_EXP 52
17941: PPUSH
17942: LD_VAR 0 2
17946: PPUSH
17947: EMPTY
17948: PPUSH
17949: CALL_OW 1
17953: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17954: LD_ADDR_EXP 53
17958: PUSH
17959: LD_EXP 53
17963: PPUSH
17964: LD_VAR 0 2
17968: PPUSH
17969: EMPTY
17970: PUSH
17971: EMPTY
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 1
17981: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17982: LD_ADDR_EXP 54
17986: PUSH
17987: LD_EXP 54
17991: PPUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: EMPTY
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18004: LD_ADDR_EXP 81
18008: PUSH
18009: LD_EXP 81
18013: PPUSH
18014: LD_VAR 0 2
18018: PPUSH
18019: EMPTY
18020: PPUSH
18021: CALL_OW 1
18025: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
18026: LD_ADDR_EXP 55
18030: PUSH
18031: LD_EXP 55
18035: PPUSH
18036: LD_VAR 0 2
18040: PPUSH
18041: EMPTY
18042: PPUSH
18043: CALL_OW 1
18047: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
18048: LD_ADDR_EXP 56
18052: PUSH
18053: LD_EXP 56
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: EMPTY
18064: PPUSH
18065: CALL_OW 1
18069: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
18070: LD_ADDR_EXP 57
18074: PUSH
18075: LD_EXP 57
18079: PPUSH
18080: LD_VAR 0 2
18084: PPUSH
18085: LD_EXP 49
18089: PUSH
18090: LD_VAR 0 2
18094: ARRAY
18095: PPUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 30
18101: PUSH
18102: LD_INT 32
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_INT 33
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 72
18128: PPUSH
18129: CALL_OW 1
18133: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
18134: LD_ADDR_EXP 58
18138: PUSH
18139: LD_EXP 58
18143: PPUSH
18144: LD_VAR 0 2
18148: PPUSH
18149: LD_EXP 49
18153: PUSH
18154: LD_VAR 0 2
18158: ARRAY
18159: PPUSH
18160: LD_INT 2
18162: PUSH
18163: LD_INT 30
18165: PUSH
18166: LD_INT 32
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 30
18175: PUSH
18176: LD_INT 31
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 58
18190: PUSH
18191: EMPTY
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 72
18202: PPUSH
18203: CALL_OW 1
18207: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
18208: LD_ADDR_EXP 59
18212: PUSH
18213: LD_EXP 59
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: EMPTY
18224: PPUSH
18225: CALL_OW 1
18229: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
18230: LD_ADDR_EXP 63
18234: PUSH
18235: LD_EXP 63
18239: PPUSH
18240: LD_VAR 0 2
18244: PPUSH
18245: EMPTY
18246: PPUSH
18247: CALL_OW 1
18251: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
18252: LD_ADDR_EXP 62
18256: PUSH
18257: LD_EXP 62
18261: PPUSH
18262: LD_VAR 0 2
18266: PPUSH
18267: EMPTY
18268: PPUSH
18269: CALL_OW 1
18273: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
18274: LD_ADDR_EXP 64
18278: PUSH
18279: LD_EXP 64
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: EMPTY
18290: PPUSH
18291: CALL_OW 1
18295: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
18296: LD_ADDR_EXP 65
18300: PUSH
18301: LD_EXP 65
18305: PPUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: EMPTY
18312: PPUSH
18313: CALL_OW 1
18317: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
18318: LD_ADDR_EXP 66
18322: PUSH
18323: LD_EXP 66
18327: PPUSH
18328: LD_VAR 0 2
18332: PPUSH
18333: EMPTY
18334: PPUSH
18335: CALL_OW 1
18339: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
18340: LD_ADDR_EXP 67
18344: PUSH
18345: LD_EXP 67
18349: PPUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: EMPTY
18356: PPUSH
18357: CALL_OW 1
18361: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
18362: LD_ADDR_EXP 68
18366: PUSH
18367: LD_EXP 68
18371: PPUSH
18372: LD_VAR 0 2
18376: PPUSH
18377: EMPTY
18378: PPUSH
18379: CALL_OW 1
18383: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
18384: LD_ADDR_EXP 69
18388: PUSH
18389: LD_EXP 69
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: EMPTY
18400: PPUSH
18401: CALL_OW 1
18405: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
18406: LD_ADDR_EXP 70
18410: PUSH
18411: LD_EXP 70
18415: PPUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: EMPTY
18422: PPUSH
18423: CALL_OW 1
18427: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
18428: LD_ADDR_EXP 71
18432: PUSH
18433: LD_EXP 71
18437: PPUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: EMPTY
18444: PPUSH
18445: CALL_OW 1
18449: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18450: LD_ADDR_EXP 60
18454: PUSH
18455: LD_EXP 60
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 0
18467: PPUSH
18468: CALL_OW 1
18472: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18473: LD_ADDR_EXP 73
18477: PUSH
18478: LD_EXP 73
18482: PPUSH
18483: LD_VAR 0 2
18487: PPUSH
18488: LD_INT 0
18490: PPUSH
18491: CALL_OW 1
18495: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18496: LD_ADDR_EXP 61
18500: PUSH
18501: LD_EXP 61
18505: PPUSH
18506: LD_VAR 0 2
18510: PPUSH
18511: EMPTY
18512: PPUSH
18513: CALL_OW 1
18517: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18518: LD_ADDR_EXP 72
18522: PUSH
18523: LD_EXP 72
18527: PPUSH
18528: LD_VAR 0 2
18532: PPUSH
18533: LD_INT 0
18535: PPUSH
18536: CALL_OW 1
18540: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18541: LD_ADDR_EXP 74
18545: PUSH
18546: LD_EXP 74
18550: PPUSH
18551: LD_VAR 0 2
18555: PPUSH
18556: EMPTY
18557: PPUSH
18558: CALL_OW 1
18562: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18563: LD_ADDR_EXP 77
18567: PUSH
18568: LD_EXP 77
18572: PPUSH
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_INT 0
18580: PPUSH
18581: CALL_OW 1
18585: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18586: LD_ADDR_EXP 78
18590: PUSH
18591: LD_EXP 78
18595: PPUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: EMPTY
18602: PPUSH
18603: CALL_OW 1
18607: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18608: LD_ADDR_EXP 79
18612: PUSH
18613: LD_EXP 79
18617: PPUSH
18618: LD_VAR 0 2
18622: PPUSH
18623: EMPTY
18624: PPUSH
18625: CALL_OW 1
18629: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18630: LD_ADDR_EXP 80
18634: PUSH
18635: LD_EXP 80
18639: PPUSH
18640: LD_VAR 0 2
18644: PPUSH
18645: EMPTY
18646: PPUSH
18647: CALL_OW 1
18651: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18652: LD_ADDR_EXP 82
18656: PUSH
18657: LD_EXP 82
18661: PPUSH
18662: LD_VAR 0 2
18666: PPUSH
18667: LD_EXP 49
18671: PUSH
18672: LD_VAR 0 2
18676: ARRAY
18677: PPUSH
18678: LD_INT 2
18680: PUSH
18681: LD_INT 30
18683: PUSH
18684: LD_INT 6
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 30
18693: PUSH
18694: LD_INT 7
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 30
18703: PUSH
18704: LD_INT 8
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 72
18721: PPUSH
18722: CALL_OW 1
18726: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18727: LD_ADDR_EXP 83
18731: PUSH
18732: LD_EXP 83
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: EMPTY
18743: PPUSH
18744: CALL_OW 1
18748: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18749: LD_ADDR_EXP 84
18753: PUSH
18754: LD_EXP 84
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: EMPTY
18765: PPUSH
18766: CALL_OW 1
18770: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
18771: LD_ADDR_EXP 85
18775: PUSH
18776: LD_EXP 85
18780: PPUSH
18781: LD_VAR 0 2
18785: PPUSH
18786: EMPTY
18787: PPUSH
18788: CALL_OW 1
18792: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18793: LD_ADDR_EXP 86
18797: PUSH
18798: LD_EXP 86
18802: PPUSH
18803: LD_VAR 0 2
18807: PPUSH
18808: EMPTY
18809: PPUSH
18810: CALL_OW 1
18814: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18815: LD_ADDR_EXP 87
18819: PUSH
18820: LD_EXP 87
18824: PPUSH
18825: LD_VAR 0 2
18829: PPUSH
18830: EMPTY
18831: PPUSH
18832: CALL_OW 1
18836: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18837: LD_ADDR_EXP 88
18841: PUSH
18842: LD_EXP 88
18846: PPUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: EMPTY
18853: PPUSH
18854: CALL_OW 1
18858: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18859: LD_ADDR_EXP 89
18863: PUSH
18864: LD_EXP 89
18868: PPUSH
18869: LD_VAR 0 2
18873: PPUSH
18874: EMPTY
18875: PPUSH
18876: CALL_OW 1
18880: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18881: LD_ADDR_EXP 90
18885: PUSH
18886: LD_EXP 90
18890: PPUSH
18891: LD_VAR 0 2
18895: PPUSH
18896: EMPTY
18897: PPUSH
18898: CALL_OW 1
18902: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
18903: LD_ADDR_EXP 91
18907: PUSH
18908: LD_EXP 91
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: LD_INT 0
18920: PPUSH
18921: CALL_OW 1
18925: ST_TO_ADDR
// end ;
18926: GO 17850
18928: POP
18929: POP
// MC_InitSides ( ) ;
18930: CALL 19216 0 0
// MC_InitResearch ( ) ;
18934: CALL 18955 0 0
// CustomInitMacro ( ) ;
18938: CALL 285 0 0
// skirmish := true ;
18942: LD_ADDR_EXP 47
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// end ;
18950: LD_VAR 0 1
18954: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18955: LD_INT 0
18957: PPUSH
18958: PPUSH
18959: PPUSH
18960: PPUSH
18961: PPUSH
18962: PPUSH
// if not mc_bases then
18963: LD_EXP 49
18967: NOT
18968: IFFALSE 18972
// exit ;
18970: GO 19211
// for i = 1 to 8 do
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: DOUBLE
18978: LD_INT 1
18980: DEC
18981: ST_TO_ADDR
18982: LD_INT 8
18984: PUSH
18985: FOR_TO
18986: IFFALSE 19012
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18988: LD_ADDR_EXP 76
18992: PUSH
18993: LD_EXP 76
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: EMPTY
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
19010: GO 18985
19012: POP
19013: POP
// tmp := [ ] ;
19014: LD_ADDR_VAR 0 5
19018: PUSH
19019: EMPTY
19020: ST_TO_ADDR
// for i = 1 to mc_sides do
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: DOUBLE
19027: LD_INT 1
19029: DEC
19030: ST_TO_ADDR
19031: LD_EXP 75
19035: PUSH
19036: FOR_TO
19037: IFFALSE 19095
// if not mc_sides [ i ] in tmp then
19039: LD_EXP 75
19043: PUSH
19044: LD_VAR 0 2
19048: ARRAY
19049: PUSH
19050: LD_VAR 0 5
19054: IN
19055: NOT
19056: IFFALSE 19093
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
19058: LD_ADDR_VAR 0 5
19062: PUSH
19063: LD_VAR 0 5
19067: PPUSH
19068: LD_VAR 0 5
19072: PUSH
19073: LD_INT 1
19075: PLUS
19076: PPUSH
19077: LD_EXP 75
19081: PUSH
19082: LD_VAR 0 2
19086: ARRAY
19087: PPUSH
19088: CALL_OW 2
19092: ST_TO_ADDR
19093: GO 19036
19095: POP
19096: POP
// if not tmp then
19097: LD_VAR 0 5
19101: NOT
19102: IFFALSE 19106
// exit ;
19104: GO 19211
// for j in tmp do
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: LD_VAR 0 5
19115: PUSH
19116: FOR_IN
19117: IFFALSE 19209
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
19119: LD_ADDR_VAR 0 6
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_VAR 0 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: ST_TO_ADDR
// if not un then
19141: LD_VAR 0 6
19145: NOT
19146: IFFALSE 19150
// continue ;
19148: GO 19116
// nation := GetNation ( un [ 1 ] ) ;
19150: LD_ADDR_VAR 0 4
19154: PUSH
19155: LD_VAR 0 6
19159: PUSH
19160: LD_INT 1
19162: ARRAY
19163: PPUSH
19164: CALL_OW 248
19168: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
19169: LD_ADDR_EXP 76
19173: PUSH
19174: LD_EXP 76
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL 44633 0 3
19201: PPUSH
19202: CALL_OW 1
19206: ST_TO_ADDR
// end ;
19207: GO 19116
19209: POP
19210: POP
// end ;
19211: LD_VAR 0 1
19215: RET
// export function MC_InitSides ( ) ; var i ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
// if not mc_bases then
19220: LD_EXP 49
19224: NOT
19225: IFFALSE 19229
// exit ;
19227: GO 19303
// for i = 1 to mc_bases do
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: DOUBLE
19235: LD_INT 1
19237: DEC
19238: ST_TO_ADDR
19239: LD_EXP 49
19243: PUSH
19244: FOR_TO
19245: IFFALSE 19301
// if mc_bases [ i ] then
19247: LD_EXP 49
19251: PUSH
19252: LD_VAR 0 2
19256: ARRAY
19257: IFFALSE 19299
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
19259: LD_ADDR_EXP 75
19263: PUSH
19264: LD_EXP 75
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: LD_EXP 49
19278: PUSH
19279: LD_VAR 0 2
19283: ARRAY
19284: PUSH
19285: LD_INT 1
19287: ARRAY
19288: PPUSH
19289: CALL_OW 255
19293: PPUSH
19294: CALL_OW 1
19298: ST_TO_ADDR
19299: GO 19244
19301: POP
19302: POP
// end ;
19303: LD_VAR 0 1
19307: RET
// every 0 0$01 trigger skirmish do
19308: LD_EXP 47
19312: IFFALSE 19466
19314: GO 19316
19316: DISABLE
// begin enable ;
19317: ENABLE
// MC_CheckBuildings ( ) ;
19318: CALL 23632 0 0
// MC_CheckPeopleLife ( ) ;
19322: CALL 23757 0 0
// RaiseSailEvent ( 100 ) ;
19326: LD_INT 100
19328: PPUSH
19329: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
19333: LD_INT 103
19335: PPUSH
19336: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
19340: LD_INT 104
19342: PPUSH
19343: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
19347: LD_INT 105
19349: PPUSH
19350: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
19354: LD_INT 106
19356: PPUSH
19357: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
19361: LD_INT 107
19363: PPUSH
19364: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
19368: LD_INT 108
19370: PPUSH
19371: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
19375: LD_INT 109
19377: PPUSH
19378: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
19382: LD_INT 110
19384: PPUSH
19385: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
19389: LD_INT 111
19391: PPUSH
19392: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
19396: LD_INT 112
19398: PPUSH
19399: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
19403: LD_INT 113
19405: PPUSH
19406: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
19410: LD_INT 120
19412: PPUSH
19413: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
19417: LD_INT 121
19419: PPUSH
19420: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
19424: LD_INT 122
19426: PPUSH
19427: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
19431: LD_INT 123
19433: PPUSH
19434: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
19438: LD_INT 124
19440: PPUSH
19441: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
19445: LD_INT 125
19447: PPUSH
19448: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
19452: LD_INT 126
19454: PPUSH
19455: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
19459: LD_INT 200
19461: PPUSH
19462: CALL_OW 427
// end ;
19466: END
// on SailEvent ( event ) do begin if event < 100 then
19467: LD_VAR 0 1
19471: PUSH
19472: LD_INT 100
19474: LESS
19475: IFFALSE 19486
// CustomEvent ( event ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL 15985 0 1
// if event = 100 then
19486: LD_VAR 0 1
19490: PUSH
19491: LD_INT 100
19493: EQUAL
19494: IFFALSE 19500
// MC_ClassManager ( ) ;
19496: CALL 19892 0 0
// if event = 101 then
19500: LD_VAR 0 1
19504: PUSH
19505: LD_INT 101
19507: EQUAL
19508: IFFALSE 19514
// MC_RepairBuildings ( ) ;
19510: CALL 24353 0 0
// if event = 102 then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 102
19521: EQUAL
19522: IFFALSE 19528
// MC_Heal ( ) ;
19524: CALL 24759 0 0
// if event = 103 then
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 103
19535: EQUAL
19536: IFFALSE 19542
// MC_Build ( ) ;
19538: CALL 25181 0 0
// if event = 104 then
19542: LD_VAR 0 1
19546: PUSH
19547: LD_INT 104
19549: EQUAL
19550: IFFALSE 19556
// MC_TurretWeapon ( ) ;
19552: CALL 26794 0 0
// if event = 105 then
19556: LD_VAR 0 1
19560: PUSH
19561: LD_INT 105
19563: EQUAL
19564: IFFALSE 19570
// MC_BuildUpgrade ( ) ;
19566: CALL 26345 0 0
// if event = 106 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 106
19577: EQUAL
19578: IFFALSE 19584
// MC_PlantMines ( ) ;
19580: CALL 27224 0 0
// if event = 107 then
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 107
19591: EQUAL
19592: IFFALSE 19598
// MC_CollectCrates ( ) ;
19594: CALL 28258 0 0
// if event = 108 then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_INT 108
19605: EQUAL
19606: IFFALSE 19612
// MC_LinkRemoteControl ( ) ;
19608: CALL 30015 0 0
// if event = 109 then
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 109
19619: EQUAL
19620: IFFALSE 19626
// MC_ProduceVehicle ( ) ;
19622: CALL 30196 0 0
// if event = 110 then
19626: LD_VAR 0 1
19630: PUSH
19631: LD_INT 110
19633: EQUAL
19634: IFFALSE 19640
// MC_SendAttack ( ) ;
19636: CALL 30677 0 0
// if event = 111 then
19640: LD_VAR 0 1
19644: PUSH
19645: LD_INT 111
19647: EQUAL
19648: IFFALSE 19654
// MC_Defend ( ) ;
19650: CALL 30785 0 0
// if event = 112 then
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 112
19661: EQUAL
19662: IFFALSE 19668
// MC_Research ( ) ;
19664: CALL 31412 0 0
// if event = 113 then
19668: LD_VAR 0 1
19672: PUSH
19673: LD_INT 113
19675: EQUAL
19676: IFFALSE 19682
// MC_MinesTrigger ( ) ;
19678: CALL 32526 0 0
// if event = 120 then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_INT 120
19689: EQUAL
19690: IFFALSE 19696
// MC_RepairVehicle ( ) ;
19692: CALL 32625 0 0
// if event = 121 then
19696: LD_VAR 0 1
19700: PUSH
19701: LD_INT 121
19703: EQUAL
19704: IFFALSE 19710
// MC_TameApe ( ) ;
19706: CALL 33368 0 0
// if event = 122 then
19710: LD_VAR 0 1
19714: PUSH
19715: LD_INT 122
19717: EQUAL
19718: IFFALSE 19724
// MC_ChangeApeClass ( ) ;
19720: CALL 34197 0 0
// if event = 123 then
19724: LD_VAR 0 1
19728: PUSH
19729: LD_INT 123
19731: EQUAL
19732: IFFALSE 19738
// MC_Bazooka ( ) ;
19734: CALL 34847 0 0
// if event = 124 then
19738: LD_VAR 0 1
19742: PUSH
19743: LD_INT 124
19745: EQUAL
19746: IFFALSE 19752
// MC_TeleportExit ( ) ;
19748: CALL 35045 0 0
// if event = 125 then
19752: LD_VAR 0 1
19756: PUSH
19757: LD_INT 125
19759: EQUAL
19760: IFFALSE 19766
// MC_Deposits ( ) ;
19762: CALL 35692 0 0
// if event = 126 then
19766: LD_VAR 0 1
19770: PUSH
19771: LD_INT 126
19773: EQUAL
19774: IFFALSE 19780
// MC_RemoteDriver ( ) ;
19776: CALL 36317 0 0
// if event = 200 then
19780: LD_VAR 0 1
19784: PUSH
19785: LD_INT 200
19787: EQUAL
19788: IFFALSE 19794
// MC_Idle ( ) ;
19790: CALL 38050 0 0
// end ;
19794: PPOPN 1
19796: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19797: LD_INT 0
19799: PPUSH
19800: PPUSH
// if not mc_bases [ base ] or not tag then
19801: LD_EXP 49
19805: PUSH
19806: LD_VAR 0 1
19810: ARRAY
19811: NOT
19812: PUSH
19813: LD_VAR 0 2
19817: NOT
19818: OR
19819: IFFALSE 19823
// exit ;
19821: GO 19887
// for i in mc_bases [ base ] union mc_ape [ base ] do
19823: LD_ADDR_VAR 0 4
19827: PUSH
19828: LD_EXP 49
19832: PUSH
19833: LD_VAR 0 1
19837: ARRAY
19838: PUSH
19839: LD_EXP 78
19843: PUSH
19844: LD_VAR 0 1
19848: ARRAY
19849: UNION
19850: PUSH
19851: FOR_IN
19852: IFFALSE 19885
// if GetTag ( i ) = tag then
19854: LD_VAR 0 4
19858: PPUSH
19859: CALL_OW 110
19863: PUSH
19864: LD_VAR 0 2
19868: EQUAL
19869: IFFALSE 19883
// SetTag ( i , 0 ) ;
19871: LD_VAR 0 4
19875: PPUSH
19876: LD_INT 0
19878: PPUSH
19879: CALL_OW 109
19883: GO 19851
19885: POP
19886: POP
// end ;
19887: LD_VAR 0 3
19891: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
// if not mc_bases then
19902: LD_EXP 49
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 20369
// for i = 1 to mc_bases do
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: DOUBLE
19917: LD_INT 1
19919: DEC
19920: ST_TO_ADDR
19921: LD_EXP 49
19925: PUSH
19926: FOR_TO
19927: IFFALSE 20367
// begin tmp := MC_ClassCheckReq ( i ) ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_VAR 0 2
19938: PPUSH
19939: CALL 20374 0 1
19943: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19944: LD_ADDR_EXP 90
19948: PUSH
19949: LD_EXP 90
19953: PPUSH
19954: LD_VAR 0 2
19958: PPUSH
19959: LD_VAR 0 4
19963: PPUSH
19964: CALL_OW 1
19968: ST_TO_ADDR
// if not tmp then
19969: LD_VAR 0 4
19973: NOT
19974: IFFALSE 19978
// continue ;
19976: GO 19926
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19978: LD_ADDR_VAR 0 6
19982: PUSH
19983: LD_EXP 49
19987: PUSH
19988: LD_VAR 0 2
19992: ARRAY
19993: PPUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 4
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 5
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 72
20026: PUSH
20027: LD_EXP 49
20031: PUSH
20032: LD_VAR 0 2
20036: ARRAY
20037: PPUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 30
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 30
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 72
20070: PUSH
20071: LD_EXP 49
20075: PUSH
20076: LD_VAR 0 2
20080: ARRAY
20081: PPUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PPUSH
20092: CALL_OW 72
20096: PUSH
20097: LD_EXP 49
20101: PUSH
20102: LD_VAR 0 2
20106: ARRAY
20107: PPUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 30
20113: PUSH
20114: LD_INT 6
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 7
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 8
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: PPUSH
20147: CALL_OW 72
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: ST_TO_ADDR
// for j = 1 to 4 do
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: DOUBLE
20164: LD_INT 1
20166: DEC
20167: ST_TO_ADDR
20168: LD_INT 4
20170: PUSH
20171: FOR_TO
20172: IFFALSE 20363
// begin if not tmp [ j ] then
20174: LD_VAR 0 4
20178: PUSH
20179: LD_VAR 0 3
20183: ARRAY
20184: NOT
20185: IFFALSE 20189
// continue ;
20187: GO 20171
// for p in tmp [ j ] do
20189: LD_ADDR_VAR 0 5
20193: PUSH
20194: LD_VAR 0 4
20198: PUSH
20199: LD_VAR 0 3
20203: ARRAY
20204: PUSH
20205: FOR_IN
20206: IFFALSE 20359
// begin if not b [ j ] then
20208: LD_VAR 0 6
20212: PUSH
20213: LD_VAR 0 3
20217: ARRAY
20218: NOT
20219: IFFALSE 20223
// break ;
20221: GO 20359
// e := 0 ;
20223: LD_ADDR_VAR 0 7
20227: PUSH
20228: LD_INT 0
20230: ST_TO_ADDR
// for k in b [ j ] do
20231: LD_ADDR_VAR 0 8
20235: PUSH
20236: LD_VAR 0 6
20240: PUSH
20241: LD_VAR 0 3
20245: ARRAY
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20275
// if IsNotFull ( k ) then
20250: LD_VAR 0 8
20254: PPUSH
20255: CALL 48659 0 1
20259: IFFALSE 20273
// begin e := k ;
20261: LD_ADDR_VAR 0 7
20265: PUSH
20266: LD_VAR 0 8
20270: ST_TO_ADDR
// break ;
20271: GO 20275
// end ;
20273: GO 20247
20275: POP
20276: POP
// if e and not UnitGoingToBuilding ( p , e ) then
20277: LD_VAR 0 7
20281: PUSH
20282: LD_VAR 0 5
20286: PPUSH
20287: LD_VAR 0 7
20291: PPUSH
20292: CALL 85647 0 2
20296: NOT
20297: AND
20298: IFFALSE 20357
// begin if IsInUnit ( p ) then
20300: LD_VAR 0 5
20304: PPUSH
20305: CALL_OW 310
20309: IFFALSE 20320
// ComExitBuilding ( p ) ;
20311: LD_VAR 0 5
20315: PPUSH
20316: CALL_OW 122
// ComEnterUnit ( p , e ) ;
20320: LD_VAR 0 5
20324: PPUSH
20325: LD_VAR 0 7
20329: PPUSH
20330: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
20334: LD_VAR 0 5
20338: PPUSH
20339: LD_VAR 0 3
20343: PPUSH
20344: CALL_OW 183
// AddComExitBuilding ( p ) ;
20348: LD_VAR 0 5
20352: PPUSH
20353: CALL_OW 182
// end ; end ;
20357: GO 20205
20359: POP
20360: POP
// end ;
20361: GO 20171
20363: POP
20364: POP
// end ;
20365: GO 19926
20367: POP
20368: POP
// end ;
20369: LD_VAR 0 1
20373: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
20374: LD_INT 0
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20388: LD_VAR 0 1
20392: NOT
20393: PUSH
20394: LD_EXP 49
20398: PUSH
20399: LD_VAR 0 1
20403: ARRAY
20404: NOT
20405: OR
20406: PUSH
20407: LD_EXP 49
20411: PUSH
20412: LD_VAR 0 1
20416: ARRAY
20417: PPUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 30
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: PPUSH
20446: CALL_OW 72
20450: NOT
20451: OR
20452: IFFALSE 20456
// exit ;
20454: GO 23627
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_EXP 49
20465: PUSH
20466: LD_VAR 0 1
20470: ARRAY
20471: PPUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 25
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 25
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 25
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 25
20517: PUSH
20518: LD_INT 5
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 25
20527: PUSH
20528: LD_INT 8
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 25
20537: PUSH
20538: LD_INT 9
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 72
20559: ST_TO_ADDR
// for i in tmp do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 4
20569: PUSH
20570: FOR_IN
20571: IFFALSE 20602
// if GetTag ( i ) then
20573: LD_VAR 0 3
20577: PPUSH
20578: CALL_OW 110
20582: IFFALSE 20600
// tmp := tmp diff i ;
20584: LD_ADDR_VAR 0 4
20588: PUSH
20589: LD_VAR 0 4
20593: PUSH
20594: LD_VAR 0 3
20598: DIFF
20599: ST_TO_ADDR
20600: GO 20570
20602: POP
20603: POP
// if not tmp then
20604: LD_VAR 0 4
20608: NOT
20609: IFFALSE 20613
// exit ;
20611: GO 23627
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20613: LD_ADDR_VAR 0 5
20617: PUSH
20618: LD_EXP 49
20622: PUSH
20623: LD_VAR 0 1
20627: ARRAY
20628: PPUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 5
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 25
20654: PUSH
20655: LD_INT 8
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 25
20664: PUSH
20665: LD_INT 9
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 72
20683: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20684: LD_ADDR_VAR 0 6
20688: PUSH
20689: LD_EXP 49
20693: PUSH
20694: LD_VAR 0 1
20698: ARRAY
20699: PPUSH
20700: LD_INT 25
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PPUSH
20710: CALL_OW 72
20714: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20715: LD_ADDR_VAR 0 7
20719: PUSH
20720: LD_EXP 49
20724: PUSH
20725: LD_VAR 0 1
20729: ARRAY
20730: PPUSH
20731: LD_INT 25
20733: PUSH
20734: LD_INT 3
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 72
20745: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
20746: LD_ADDR_VAR 0 8
20750: PUSH
20751: LD_EXP 49
20755: PUSH
20756: LD_VAR 0 1
20760: ARRAY
20761: PPUSH
20762: LD_INT 25
20764: PUSH
20765: LD_INT 4
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 24
20774: PUSH
20775: LD_INT 251
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 72
20790: ST_TO_ADDR
// if mc_scan [ base ] then
20791: LD_EXP 72
20795: PUSH
20796: LD_VAR 0 1
20800: ARRAY
20801: IFFALSE 21262
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
20803: LD_ADDR_EXP 91
20807: PUSH
20808: LD_EXP 91
20812: PPUSH
20813: LD_VAR 0 1
20817: PPUSH
20818: LD_INT 4
20820: PPUSH
20821: CALL_OW 1
20825: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20826: LD_ADDR_VAR 0 12
20830: PUSH
20831: LD_EXP 49
20835: PUSH
20836: LD_VAR 0 1
20840: ARRAY
20841: PPUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 30
20847: PUSH
20848: LD_INT 4
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 72
20874: ST_TO_ADDR
// if not b then
20875: LD_VAR 0 12
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 23627
// p := [ ] ;
20884: LD_ADDR_VAR 0 11
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if sci >= 2 then
20891: LD_VAR 0 8
20895: PUSH
20896: LD_INT 2
20898: GREATEREQUAL
20899: IFFALSE 20930
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: LD_VAR 0 8
20910: PUSH
20911: LD_INT 1
20913: ARRAY
20914: PUSH
20915: LD_VAR 0 8
20919: PUSH
20920: LD_INT 2
20922: ARRAY
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: ST_TO_ADDR
20928: GO 20991
// if sci = 1 then
20930: LD_VAR 0 8
20934: PUSH
20935: LD_INT 1
20937: EQUAL
20938: IFFALSE 20959
// sci := [ sci [ 1 ] ] else
20940: LD_ADDR_VAR 0 8
20944: PUSH
20945: LD_VAR 0 8
20949: PUSH
20950: LD_INT 1
20952: ARRAY
20953: PUSH
20954: EMPTY
20955: LIST
20956: ST_TO_ADDR
20957: GO 20991
// if sci = 0 then
20959: LD_VAR 0 8
20963: PUSH
20964: LD_INT 0
20966: EQUAL
20967: IFFALSE 20991
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20969: LD_ADDR_VAR 0 11
20973: PUSH
20974: LD_VAR 0 4
20978: PPUSH
20979: LD_INT 4
20981: PPUSH
20982: CALL 85510 0 2
20986: PUSH
20987: LD_INT 1
20989: ARRAY
20990: ST_TO_ADDR
// if eng > 4 then
20991: LD_VAR 0 6
20995: PUSH
20996: LD_INT 4
20998: GREATER
20999: IFFALSE 21045
// for i = eng downto 4 do
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: DOUBLE
21007: LD_VAR 0 6
21011: INC
21012: ST_TO_ADDR
21013: LD_INT 4
21015: PUSH
21016: FOR_DOWNTO
21017: IFFALSE 21043
// eng := eng diff eng [ i ] ;
21019: LD_ADDR_VAR 0 6
21023: PUSH
21024: LD_VAR 0 6
21028: PUSH
21029: LD_VAR 0 6
21033: PUSH
21034: LD_VAR 0 3
21038: ARRAY
21039: DIFF
21040: ST_TO_ADDR
21041: GO 21016
21043: POP
21044: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
21045: LD_ADDR_VAR 0 4
21049: PUSH
21050: LD_VAR 0 4
21054: PUSH
21055: LD_VAR 0 5
21059: PUSH
21060: LD_VAR 0 6
21064: UNION
21065: PUSH
21066: LD_VAR 0 7
21070: UNION
21071: PUSH
21072: LD_VAR 0 8
21076: UNION
21077: DIFF
21078: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
21079: LD_ADDR_VAR 0 13
21083: PUSH
21084: LD_EXP 49
21088: PUSH
21089: LD_VAR 0 1
21093: ARRAY
21094: PPUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 30
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 30
21110: PUSH
21111: LD_INT 31
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 72
21127: PUSH
21128: LD_EXP 49
21132: PUSH
21133: LD_VAR 0 1
21137: ARRAY
21138: PPUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 4
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 30
21154: PUSH
21155: LD_INT 5
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: PPUSH
21167: CALL_OW 72
21171: PUSH
21172: LD_INT 6
21174: MUL
21175: PLUS
21176: ST_TO_ADDR
// if bcount < tmp then
21177: LD_VAR 0 13
21181: PUSH
21182: LD_VAR 0 4
21186: LESS
21187: IFFALSE 21233
// for i = tmp downto bcount do
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: DOUBLE
21195: LD_VAR 0 4
21199: INC
21200: ST_TO_ADDR
21201: LD_VAR 0 13
21205: PUSH
21206: FOR_DOWNTO
21207: IFFALSE 21231
// tmp := Delete ( tmp , tmp ) ;
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_VAR 0 4
21218: PPUSH
21219: LD_VAR 0 4
21223: PPUSH
21224: CALL_OW 3
21228: ST_TO_ADDR
21229: GO 21206
21231: POP
21232: POP
// result := [ tmp , 0 , 0 , p ] ;
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_VAR 0 4
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_VAR 0 11
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// exit ;
21260: GO 23627
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21262: LD_EXP 49
21266: PUSH
21267: LD_VAR 0 1
21271: ARRAY
21272: PPUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 30
21278: PUSH
21279: LD_INT 6
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 7
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 8
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PPUSH
21312: CALL_OW 72
21316: NOT
21317: PUSH
21318: LD_EXP 49
21322: PUSH
21323: LD_VAR 0 1
21327: ARRAY
21328: PPUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 3
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 72
21343: NOT
21344: AND
21345: IFFALSE 21417
// begin if eng = tmp then
21347: LD_VAR 0 6
21351: PUSH
21352: LD_VAR 0 4
21356: EQUAL
21357: IFFALSE 21361
// exit ;
21359: GO 23627
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
21361: LD_ADDR_EXP 91
21365: PUSH
21366: LD_EXP 91
21370: PPUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 1
21378: PPUSH
21379: CALL_OW 1
21383: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: LD_VAR 0 4
21396: PUSH
21397: LD_VAR 0 6
21401: DIFF
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: ST_TO_ADDR
// exit ;
21415: GO 23627
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21417: LD_EXP 76
21421: PUSH
21422: LD_EXP 75
21426: PUSH
21427: LD_VAR 0 1
21431: ARRAY
21432: ARRAY
21433: PUSH
21434: LD_EXP 49
21438: PUSH
21439: LD_VAR 0 1
21443: ARRAY
21444: PPUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 30
21450: PUSH
21451: LD_INT 6
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_INT 7
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 8
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 72
21488: AND
21489: PUSH
21490: LD_EXP 49
21494: PUSH
21495: LD_VAR 0 1
21499: ARRAY
21500: PPUSH
21501: LD_INT 30
21503: PUSH
21504: LD_INT 3
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PPUSH
21511: CALL_OW 72
21515: NOT
21516: AND
21517: IFFALSE 21731
// begin if sci >= 6 then
21519: LD_VAR 0 8
21523: PUSH
21524: LD_INT 6
21526: GREATEREQUAL
21527: IFFALSE 21531
// exit ;
21529: GO 23627
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
21531: LD_ADDR_EXP 91
21535: PUSH
21536: LD_EXP 91
21540: PPUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: LD_INT 2
21548: PPUSH
21549: CALL_OW 1
21553: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
21554: LD_ADDR_VAR 0 9
21558: PUSH
21559: LD_VAR 0 4
21563: PUSH
21564: LD_VAR 0 8
21568: DIFF
21569: PPUSH
21570: LD_INT 4
21572: PPUSH
21573: CALL 85510 0 2
21577: ST_TO_ADDR
// p := [ ] ;
21578: LD_ADDR_VAR 0 11
21582: PUSH
21583: EMPTY
21584: ST_TO_ADDR
// if sci < 6 and sort > 6 then
21585: LD_VAR 0 8
21589: PUSH
21590: LD_INT 6
21592: LESS
21593: PUSH
21594: LD_VAR 0 9
21598: PUSH
21599: LD_INT 6
21601: GREATER
21602: AND
21603: IFFALSE 21684
// begin for i = 1 to 6 - sci do
21605: LD_ADDR_VAR 0 3
21609: PUSH
21610: DOUBLE
21611: LD_INT 1
21613: DEC
21614: ST_TO_ADDR
21615: LD_INT 6
21617: PUSH
21618: LD_VAR 0 8
21622: MINUS
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21680
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21627: LD_ADDR_VAR 0 11
21631: PUSH
21632: LD_VAR 0 11
21636: PPUSH
21637: LD_VAR 0 11
21641: PUSH
21642: LD_INT 1
21644: PLUS
21645: PPUSH
21646: LD_VAR 0 9
21650: PUSH
21651: LD_INT 1
21653: ARRAY
21654: PPUSH
21655: CALL_OW 2
21659: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21660: LD_ADDR_VAR 0 9
21664: PUSH
21665: LD_VAR 0 9
21669: PPUSH
21670: LD_INT 1
21672: PPUSH
21673: CALL_OW 3
21677: ST_TO_ADDR
// end ;
21678: GO 21624
21680: POP
21681: POP
// end else
21682: GO 21704
// if sort then
21684: LD_VAR 0 9
21688: IFFALSE 21704
// p := sort [ 1 ] ;
21690: LD_ADDR_VAR 0 11
21694: PUSH
21695: LD_VAR 0 9
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21704: LD_ADDR_VAR 0 2
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: LD_VAR 0 11
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: ST_TO_ADDR
// exit ;
21729: GO 23627
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21731: LD_EXP 76
21735: PUSH
21736: LD_EXP 75
21740: PUSH
21741: LD_VAR 0 1
21745: ARRAY
21746: ARRAY
21747: PUSH
21748: LD_EXP 49
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: PPUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 7
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 8
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 72
21802: AND
21803: PUSH
21804: LD_EXP 49
21808: PUSH
21809: LD_VAR 0 1
21813: ARRAY
21814: PPUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PPUSH
21825: CALL_OW 72
21829: AND
21830: IFFALSE 22357
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
21832: LD_ADDR_EXP 91
21836: PUSH
21837: LD_EXP 91
21841: PPUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: LD_INT 3
21849: PPUSH
21850: CALL_OW 1
21854: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: ST_TO_ADDR
// if not eng then
21878: LD_VAR 0 6
21882: NOT
21883: IFFALSE 21946
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21885: LD_ADDR_VAR 0 11
21889: PUSH
21890: LD_VAR 0 4
21894: PPUSH
21895: LD_INT 2
21897: PPUSH
21898: CALL 85510 0 2
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21907: LD_ADDR_VAR 0 2
21911: PUSH
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_INT 2
21919: PPUSH
21920: LD_VAR 0 11
21924: PPUSH
21925: CALL_OW 1
21929: ST_TO_ADDR
// tmp := tmp diff p ;
21930: LD_ADDR_VAR 0 4
21934: PUSH
21935: LD_VAR 0 4
21939: PUSH
21940: LD_VAR 0 11
21944: DIFF
21945: ST_TO_ADDR
// end ; if not eng then
21946: LD_VAR 0 6
21950: NOT
21951: IFFALSE 21977
// tmp := tmp diff ( mech union sci ) else
21953: LD_ADDR_VAR 0 4
21957: PUSH
21958: LD_VAR 0 4
21962: PUSH
21963: LD_VAR 0 7
21967: PUSH
21968: LD_VAR 0 8
21972: UNION
21973: DIFF
21974: ST_TO_ADDR
21975: GO 22009
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
21977: LD_ADDR_VAR 0 4
21981: PUSH
21982: LD_VAR 0 4
21986: PUSH
21987: LD_VAR 0 6
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PUSH
21996: LD_VAR 0 7
22000: UNION
22001: PUSH
22002: LD_VAR 0 8
22006: UNION
22007: DIFF
22008: ST_TO_ADDR
// if tmp and sci < 6 then
22009: LD_VAR 0 4
22013: PUSH
22014: LD_VAR 0 8
22018: PUSH
22019: LD_INT 6
22021: LESS
22022: AND
22023: IFFALSE 22182
// begin sort := SortBySkill ( tmp , 4 ) ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: LD_VAR 0 4
22034: PPUSH
22035: LD_INT 4
22037: PPUSH
22038: CALL 85510 0 2
22042: ST_TO_ADDR
// p := [ ] ;
22043: LD_ADDR_VAR 0 11
22047: PUSH
22048: EMPTY
22049: ST_TO_ADDR
// if sort then
22050: LD_VAR 0 9
22054: IFFALSE 22153
// for i = 1 to 6 - sci do
22056: LD_ADDR_VAR 0 3
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_INT 6
22068: PUSH
22069: LD_VAR 0 8
22073: MINUS
22074: PUSH
22075: FOR_TO
22076: IFFALSE 22151
// begin if i = sort then
22078: LD_VAR 0 3
22082: PUSH
22083: LD_VAR 0 9
22087: EQUAL
22088: IFFALSE 22092
// break ;
22090: GO 22151
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22092: LD_ADDR_VAR 0 11
22096: PUSH
22097: LD_VAR 0 11
22101: PPUSH
22102: LD_VAR 0 11
22106: PUSH
22107: LD_INT 1
22109: PLUS
22110: PPUSH
22111: LD_VAR 0 9
22115: PUSH
22116: LD_VAR 0 3
22120: ARRAY
22121: PPUSH
22122: CALL_OW 2
22126: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22127: LD_ADDR_VAR 0 4
22131: PUSH
22132: LD_VAR 0 4
22136: PUSH
22137: LD_VAR 0 9
22141: PUSH
22142: LD_VAR 0 3
22146: ARRAY
22147: DIFF
22148: ST_TO_ADDR
// end ;
22149: GO 22075
22151: POP
22152: POP
// if p then
22153: LD_VAR 0 11
22157: IFFALSE 22182
// result := Replace ( result , 4 , p ) ;
22159: LD_ADDR_VAR 0 2
22163: PUSH
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_INT 4
22171: PPUSH
22172: LD_VAR 0 11
22176: PPUSH
22177: CALL_OW 1
22181: ST_TO_ADDR
// end ; if tmp and mech < 6 then
22182: LD_VAR 0 4
22186: PUSH
22187: LD_VAR 0 7
22191: PUSH
22192: LD_INT 6
22194: LESS
22195: AND
22196: IFFALSE 22355
// begin sort := SortBySkill ( tmp , 3 ) ;
22198: LD_ADDR_VAR 0 9
22202: PUSH
22203: LD_VAR 0 4
22207: PPUSH
22208: LD_INT 3
22210: PPUSH
22211: CALL 85510 0 2
22215: ST_TO_ADDR
// p := [ ] ;
22216: LD_ADDR_VAR 0 11
22220: PUSH
22221: EMPTY
22222: ST_TO_ADDR
// if sort then
22223: LD_VAR 0 9
22227: IFFALSE 22326
// for i = 1 to 6 - mech do
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: DOUBLE
22235: LD_INT 1
22237: DEC
22238: ST_TO_ADDR
22239: LD_INT 6
22241: PUSH
22242: LD_VAR 0 7
22246: MINUS
22247: PUSH
22248: FOR_TO
22249: IFFALSE 22324
// begin if i = sort then
22251: LD_VAR 0 3
22255: PUSH
22256: LD_VAR 0 9
22260: EQUAL
22261: IFFALSE 22265
// break ;
22263: GO 22324
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22265: LD_ADDR_VAR 0 11
22269: PUSH
22270: LD_VAR 0 11
22274: PPUSH
22275: LD_VAR 0 11
22279: PUSH
22280: LD_INT 1
22282: PLUS
22283: PPUSH
22284: LD_VAR 0 9
22288: PUSH
22289: LD_VAR 0 3
22293: ARRAY
22294: PPUSH
22295: CALL_OW 2
22299: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22300: LD_ADDR_VAR 0 4
22304: PUSH
22305: LD_VAR 0 4
22309: PUSH
22310: LD_VAR 0 9
22314: PUSH
22315: LD_VAR 0 3
22319: ARRAY
22320: DIFF
22321: ST_TO_ADDR
// end ;
22322: GO 22248
22324: POP
22325: POP
// if p then
22326: LD_VAR 0 11
22330: IFFALSE 22355
// result := Replace ( result , 3 , p ) ;
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_VAR 0 2
22341: PPUSH
22342: LD_INT 3
22344: PPUSH
22345: LD_VAR 0 11
22349: PPUSH
22350: CALL_OW 1
22354: ST_TO_ADDR
// end ; exit ;
22355: GO 23627
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
22357: LD_EXP 76
22361: PUSH
22362: LD_EXP 75
22366: PUSH
22367: LD_VAR 0 1
22371: ARRAY
22372: ARRAY
22373: NOT
22374: PUSH
22375: LD_EXP 49
22379: PUSH
22380: LD_VAR 0 1
22384: ARRAY
22385: PPUSH
22386: LD_INT 30
22388: PUSH
22389: LD_INT 3
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PPUSH
22396: CALL_OW 72
22400: AND
22401: PUSH
22402: LD_EXP 54
22406: PUSH
22407: LD_VAR 0 1
22411: ARRAY
22412: AND
22413: IFFALSE 22957
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
22415: LD_ADDR_EXP 91
22419: PUSH
22420: LD_EXP 91
22424: PPUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: LD_INT 5
22432: PPUSH
22433: CALL_OW 1
22437: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: ST_TO_ADDR
// if sci > 1 then
22461: LD_VAR 0 8
22465: PUSH
22466: LD_INT 1
22468: GREATER
22469: IFFALSE 22497
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
22471: LD_ADDR_VAR 0 4
22475: PUSH
22476: LD_VAR 0 4
22480: PUSH
22481: LD_VAR 0 8
22485: PUSH
22486: LD_VAR 0 8
22490: PUSH
22491: LD_INT 1
22493: ARRAY
22494: DIFF
22495: DIFF
22496: ST_TO_ADDR
// if tmp and not sci then
22497: LD_VAR 0 4
22501: PUSH
22502: LD_VAR 0 8
22506: NOT
22507: AND
22508: IFFALSE 22577
// begin sort := SortBySkill ( tmp , 4 ) ;
22510: LD_ADDR_VAR 0 9
22514: PUSH
22515: LD_VAR 0 4
22519: PPUSH
22520: LD_INT 4
22522: PPUSH
22523: CALL 85510 0 2
22527: ST_TO_ADDR
// if sort then
22528: LD_VAR 0 9
22532: IFFALSE 22548
// p := sort [ 1 ] ;
22534: LD_ADDR_VAR 0 11
22538: PUSH
22539: LD_VAR 0 9
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: ST_TO_ADDR
// if p then
22548: LD_VAR 0 11
22552: IFFALSE 22577
// result := Replace ( result , 4 , p ) ;
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_VAR 0 2
22563: PPUSH
22564: LD_INT 4
22566: PPUSH
22567: LD_VAR 0 11
22571: PPUSH
22572: CALL_OW 1
22576: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
22577: LD_ADDR_VAR 0 4
22581: PUSH
22582: LD_VAR 0 4
22586: PUSH
22587: LD_VAR 0 7
22591: DIFF
22592: ST_TO_ADDR
// if tmp and mech < 6 then
22593: LD_VAR 0 4
22597: PUSH
22598: LD_VAR 0 7
22602: PUSH
22603: LD_INT 6
22605: LESS
22606: AND
22607: IFFALSE 22766
// begin sort := SortBySkill ( tmp , 3 ) ;
22609: LD_ADDR_VAR 0 9
22613: PUSH
22614: LD_VAR 0 4
22618: PPUSH
22619: LD_INT 3
22621: PPUSH
22622: CALL 85510 0 2
22626: ST_TO_ADDR
// p := [ ] ;
22627: LD_ADDR_VAR 0 11
22631: PUSH
22632: EMPTY
22633: ST_TO_ADDR
// if sort then
22634: LD_VAR 0 9
22638: IFFALSE 22737
// for i = 1 to 6 - mech do
22640: LD_ADDR_VAR 0 3
22644: PUSH
22645: DOUBLE
22646: LD_INT 1
22648: DEC
22649: ST_TO_ADDR
22650: LD_INT 6
22652: PUSH
22653: LD_VAR 0 7
22657: MINUS
22658: PUSH
22659: FOR_TO
22660: IFFALSE 22735
// begin if i = sort then
22662: LD_VAR 0 3
22666: PUSH
22667: LD_VAR 0 9
22671: EQUAL
22672: IFFALSE 22676
// break ;
22674: GO 22735
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22676: LD_ADDR_VAR 0 11
22680: PUSH
22681: LD_VAR 0 11
22685: PPUSH
22686: LD_VAR 0 11
22690: PUSH
22691: LD_INT 1
22693: PLUS
22694: PPUSH
22695: LD_VAR 0 9
22699: PUSH
22700: LD_VAR 0 3
22704: ARRAY
22705: PPUSH
22706: CALL_OW 2
22710: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22711: LD_ADDR_VAR 0 4
22715: PUSH
22716: LD_VAR 0 4
22720: PUSH
22721: LD_VAR 0 9
22725: PUSH
22726: LD_VAR 0 3
22730: ARRAY
22731: DIFF
22732: ST_TO_ADDR
// end ;
22733: GO 22659
22735: POP
22736: POP
// if p then
22737: LD_VAR 0 11
22741: IFFALSE 22766
// result := Replace ( result , 3 , p ) ;
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_INT 3
22755: PPUSH
22756: LD_VAR 0 11
22760: PPUSH
22761: CALL_OW 1
22765: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
22766: LD_ADDR_VAR 0 4
22770: PUSH
22771: LD_VAR 0 4
22775: PUSH
22776: LD_VAR 0 6
22780: DIFF
22781: ST_TO_ADDR
// if tmp and eng < 6 then
22782: LD_VAR 0 4
22786: PUSH
22787: LD_VAR 0 6
22791: PUSH
22792: LD_INT 6
22794: LESS
22795: AND
22796: IFFALSE 22955
// begin sort := SortBySkill ( tmp , 2 ) ;
22798: LD_ADDR_VAR 0 9
22802: PUSH
22803: LD_VAR 0 4
22807: PPUSH
22808: LD_INT 2
22810: PPUSH
22811: CALL 85510 0 2
22815: ST_TO_ADDR
// p := [ ] ;
22816: LD_ADDR_VAR 0 11
22820: PUSH
22821: EMPTY
22822: ST_TO_ADDR
// if sort then
22823: LD_VAR 0 9
22827: IFFALSE 22926
// for i = 1 to 6 - eng do
22829: LD_ADDR_VAR 0 3
22833: PUSH
22834: DOUBLE
22835: LD_INT 1
22837: DEC
22838: ST_TO_ADDR
22839: LD_INT 6
22841: PUSH
22842: LD_VAR 0 6
22846: MINUS
22847: PUSH
22848: FOR_TO
22849: IFFALSE 22924
// begin if i = sort then
22851: LD_VAR 0 3
22855: PUSH
22856: LD_VAR 0 9
22860: EQUAL
22861: IFFALSE 22865
// break ;
22863: GO 22924
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22865: LD_ADDR_VAR 0 11
22869: PUSH
22870: LD_VAR 0 11
22874: PPUSH
22875: LD_VAR 0 11
22879: PUSH
22880: LD_INT 1
22882: PLUS
22883: PPUSH
22884: LD_VAR 0 9
22888: PUSH
22889: LD_VAR 0 3
22893: ARRAY
22894: PPUSH
22895: CALL_OW 2
22899: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22900: LD_ADDR_VAR 0 4
22904: PUSH
22905: LD_VAR 0 4
22909: PUSH
22910: LD_VAR 0 9
22914: PUSH
22915: LD_VAR 0 3
22919: ARRAY
22920: DIFF
22921: ST_TO_ADDR
// end ;
22922: GO 22848
22924: POP
22925: POP
// if p then
22926: LD_VAR 0 11
22930: IFFALSE 22955
// result := Replace ( result , 2 , p ) ;
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_VAR 0 2
22941: PPUSH
22942: LD_INT 2
22944: PPUSH
22945: LD_VAR 0 11
22949: PPUSH
22950: CALL_OW 1
22954: ST_TO_ADDR
// end ; exit ;
22955: GO 23627
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
22957: LD_EXP 76
22961: PUSH
22962: LD_EXP 75
22966: PUSH
22967: LD_VAR 0 1
22971: ARRAY
22972: ARRAY
22973: NOT
22974: PUSH
22975: LD_EXP 49
22979: PUSH
22980: LD_VAR 0 1
22984: ARRAY
22985: PPUSH
22986: LD_INT 30
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PPUSH
22996: CALL_OW 72
23000: AND
23001: PUSH
23002: LD_EXP 54
23006: PUSH
23007: LD_VAR 0 1
23011: ARRAY
23012: NOT
23013: AND
23014: IFFALSE 23627
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
23016: LD_ADDR_EXP 91
23020: PUSH
23021: LD_EXP 91
23025: PPUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: LD_INT 6
23033: PPUSH
23034: CALL_OW 1
23038: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// if sci >= 1 then
23062: LD_VAR 0 8
23066: PUSH
23067: LD_INT 1
23069: GREATEREQUAL
23070: IFFALSE 23092
// tmp := tmp diff sci [ 1 ] ;
23072: LD_ADDR_VAR 0 4
23076: PUSH
23077: LD_VAR 0 4
23081: PUSH
23082: LD_VAR 0 8
23086: PUSH
23087: LD_INT 1
23089: ARRAY
23090: DIFF
23091: ST_TO_ADDR
// if tmp and not sci then
23092: LD_VAR 0 4
23096: PUSH
23097: LD_VAR 0 8
23101: NOT
23102: AND
23103: IFFALSE 23172
// begin sort := SortBySkill ( tmp , 4 ) ;
23105: LD_ADDR_VAR 0 9
23109: PUSH
23110: LD_VAR 0 4
23114: PPUSH
23115: LD_INT 4
23117: PPUSH
23118: CALL 85510 0 2
23122: ST_TO_ADDR
// if sort then
23123: LD_VAR 0 9
23127: IFFALSE 23143
// p := sort [ 1 ] ;
23129: LD_ADDR_VAR 0 11
23133: PUSH
23134: LD_VAR 0 9
23138: PUSH
23139: LD_INT 1
23141: ARRAY
23142: ST_TO_ADDR
// if p then
23143: LD_VAR 0 11
23147: IFFALSE 23172
// result := Replace ( result , 4 , p ) ;
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_VAR 0 2
23158: PPUSH
23159: LD_INT 4
23161: PPUSH
23162: LD_VAR 0 11
23166: PPUSH
23167: CALL_OW 1
23171: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23172: LD_ADDR_VAR 0 4
23176: PUSH
23177: LD_VAR 0 4
23181: PUSH
23182: LD_VAR 0 7
23186: DIFF
23187: ST_TO_ADDR
// if tmp and mech < 6 then
23188: LD_VAR 0 4
23192: PUSH
23193: LD_VAR 0 7
23197: PUSH
23198: LD_INT 6
23200: LESS
23201: AND
23202: IFFALSE 23361
// begin sort := SortBySkill ( tmp , 3 ) ;
23204: LD_ADDR_VAR 0 9
23208: PUSH
23209: LD_VAR 0 4
23213: PPUSH
23214: LD_INT 3
23216: PPUSH
23217: CALL 85510 0 2
23221: ST_TO_ADDR
// p := [ ] ;
23222: LD_ADDR_VAR 0 11
23226: PUSH
23227: EMPTY
23228: ST_TO_ADDR
// if sort then
23229: LD_VAR 0 9
23233: IFFALSE 23332
// for i = 1 to 6 - mech do
23235: LD_ADDR_VAR 0 3
23239: PUSH
23240: DOUBLE
23241: LD_INT 1
23243: DEC
23244: ST_TO_ADDR
23245: LD_INT 6
23247: PUSH
23248: LD_VAR 0 7
23252: MINUS
23253: PUSH
23254: FOR_TO
23255: IFFALSE 23330
// begin if i = sort then
23257: LD_VAR 0 3
23261: PUSH
23262: LD_VAR 0 9
23266: EQUAL
23267: IFFALSE 23271
// break ;
23269: GO 23330
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23271: LD_ADDR_VAR 0 11
23275: PUSH
23276: LD_VAR 0 11
23280: PPUSH
23281: LD_VAR 0 11
23285: PUSH
23286: LD_INT 1
23288: PLUS
23289: PPUSH
23290: LD_VAR 0 9
23294: PUSH
23295: LD_VAR 0 3
23299: ARRAY
23300: PPUSH
23301: CALL_OW 2
23305: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23306: LD_ADDR_VAR 0 4
23310: PUSH
23311: LD_VAR 0 4
23315: PUSH
23316: LD_VAR 0 9
23320: PUSH
23321: LD_VAR 0 3
23325: ARRAY
23326: DIFF
23327: ST_TO_ADDR
// end ;
23328: GO 23254
23330: POP
23331: POP
// if p then
23332: LD_VAR 0 11
23336: IFFALSE 23361
// result := Replace ( result , 3 , p ) ;
23338: LD_ADDR_VAR 0 2
23342: PUSH
23343: LD_VAR 0 2
23347: PPUSH
23348: LD_INT 3
23350: PPUSH
23351: LD_VAR 0 11
23355: PPUSH
23356: CALL_OW 1
23360: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23361: LD_ADDR_VAR 0 4
23365: PUSH
23366: LD_VAR 0 4
23370: PUSH
23371: LD_VAR 0 6
23375: DIFF
23376: ST_TO_ADDR
// if tmp and eng < 4 then
23377: LD_VAR 0 4
23381: PUSH
23382: LD_VAR 0 6
23386: PUSH
23387: LD_INT 4
23389: LESS
23390: AND
23391: IFFALSE 23552
// begin sort := SortBySkill ( tmp , 2 ) ;
23393: LD_ADDR_VAR 0 9
23397: PUSH
23398: LD_VAR 0 4
23402: PPUSH
23403: LD_INT 2
23405: PPUSH
23406: CALL 85510 0 2
23410: ST_TO_ADDR
// p := [ ] ;
23411: LD_ADDR_VAR 0 11
23415: PUSH
23416: EMPTY
23417: ST_TO_ADDR
// if sort then
23418: LD_VAR 0 9
23422: IFFALSE 23521
// for i = 1 to 4 - eng do
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: DOUBLE
23430: LD_INT 1
23432: DEC
23433: ST_TO_ADDR
23434: LD_INT 4
23436: PUSH
23437: LD_VAR 0 6
23441: MINUS
23442: PUSH
23443: FOR_TO
23444: IFFALSE 23519
// begin if i = sort then
23446: LD_VAR 0 3
23450: PUSH
23451: LD_VAR 0 9
23455: EQUAL
23456: IFFALSE 23460
// break ;
23458: GO 23519
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23460: LD_ADDR_VAR 0 11
23464: PUSH
23465: LD_VAR 0 11
23469: PPUSH
23470: LD_VAR 0 11
23474: PUSH
23475: LD_INT 1
23477: PLUS
23478: PPUSH
23479: LD_VAR 0 9
23483: PUSH
23484: LD_VAR 0 3
23488: ARRAY
23489: PPUSH
23490: CALL_OW 2
23494: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: LD_VAR 0 4
23504: PUSH
23505: LD_VAR 0 9
23509: PUSH
23510: LD_VAR 0 3
23514: ARRAY
23515: DIFF
23516: ST_TO_ADDR
// end ;
23517: GO 23443
23519: POP
23520: POP
// if p then
23521: LD_VAR 0 11
23525: IFFALSE 23550
// result := Replace ( result , 2 , p ) ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_VAR 0 2
23536: PPUSH
23537: LD_INT 2
23539: PPUSH
23540: LD_VAR 0 11
23544: PPUSH
23545: CALL_OW 1
23549: ST_TO_ADDR
// end else
23550: GO 23596
// for i = eng downto 5 do
23552: LD_ADDR_VAR 0 3
23556: PUSH
23557: DOUBLE
23558: LD_VAR 0 6
23562: INC
23563: ST_TO_ADDR
23564: LD_INT 5
23566: PUSH
23567: FOR_DOWNTO
23568: IFFALSE 23594
// tmp := tmp union eng [ i ] ;
23570: LD_ADDR_VAR 0 4
23574: PUSH
23575: LD_VAR 0 4
23579: PUSH
23580: LD_VAR 0 6
23584: PUSH
23585: LD_VAR 0 3
23589: ARRAY
23590: UNION
23591: ST_TO_ADDR
23592: GO 23567
23594: POP
23595: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
23596: LD_ADDR_VAR 0 2
23600: PUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: LD_INT 1
23608: PPUSH
23609: LD_VAR 0 4
23613: PUSH
23614: LD_VAR 0 5
23618: DIFF
23619: PPUSH
23620: CALL_OW 1
23624: ST_TO_ADDR
// exit ;
23625: GO 23627
// end ; end ;
23627: LD_VAR 0 2
23631: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
23632: LD_INT 0
23634: PPUSH
23635: PPUSH
23636: PPUSH
// if not mc_bases then
23637: LD_EXP 49
23641: NOT
23642: IFFALSE 23646
// exit ;
23644: GO 23752
// for i = 1 to mc_bases do
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: DOUBLE
23652: LD_INT 1
23654: DEC
23655: ST_TO_ADDR
23656: LD_EXP 49
23660: PUSH
23661: FOR_TO
23662: IFFALSE 23743
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23664: LD_ADDR_VAR 0 3
23668: PUSH
23669: LD_EXP 49
23673: PUSH
23674: LD_VAR 0 2
23678: ARRAY
23679: PPUSH
23680: LD_INT 21
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 3
23692: PUSH
23693: LD_INT 24
23695: PUSH
23696: LD_INT 1000
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 72
23715: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
23716: LD_ADDR_EXP 50
23720: PUSH
23721: LD_EXP 50
23725: PPUSH
23726: LD_VAR 0 2
23730: PPUSH
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 1
23740: ST_TO_ADDR
// end ;
23741: GO 23661
23743: POP
23744: POP
// RaiseSailEvent ( 101 ) ;
23745: LD_INT 101
23747: PPUSH
23748: CALL_OW 427
// end ;
23752: LD_VAR 0 1
23756: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
// if not mc_bases then
23766: LD_EXP 49
23770: NOT
23771: IFFALSE 23775
// exit ;
23773: GO 24348
// for i = 1 to mc_bases do
23775: LD_ADDR_VAR 0 2
23779: PUSH
23780: DOUBLE
23781: LD_INT 1
23783: DEC
23784: ST_TO_ADDR
23785: LD_EXP 49
23789: PUSH
23790: FOR_TO
23791: IFFALSE 24339
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
23793: LD_ADDR_VAR 0 5
23797: PUSH
23798: LD_EXP 49
23802: PUSH
23803: LD_VAR 0 2
23807: ARRAY
23808: PUSH
23809: LD_EXP 78
23813: PUSH
23814: LD_VAR 0 2
23818: ARRAY
23819: UNION
23820: PPUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 3
23836: PUSH
23837: LD_INT 54
23839: PUSH
23840: EMPTY
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 3
23849: PUSH
23850: LD_INT 24
23852: PUSH
23853: LD_INT 750
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PPUSH
23873: CALL_OW 72
23877: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
23878: LD_ADDR_VAR 0 6
23882: PUSH
23883: LD_EXP 49
23887: PUSH
23888: LD_VAR 0 2
23892: ARRAY
23893: PPUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: LD_INT 54
23912: PUSH
23913: EMPTY
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: LD_INT 24
23925: PUSH
23926: LD_INT 250
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PPUSH
23946: CALL_OW 72
23950: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
23951: LD_ADDR_VAR 0 7
23955: PUSH
23956: LD_VAR 0 5
23960: PUSH
23961: LD_VAR 0 6
23965: DIFF
23966: ST_TO_ADDR
// if not need_heal_1 then
23967: LD_VAR 0 6
23971: NOT
23972: IFFALSE 24005
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
23974: LD_ADDR_EXP 52
23978: PUSH
23979: LD_EXP 52
23983: PPUSH
23984: LD_VAR 0 2
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PPUSH
23996: EMPTY
23997: PPUSH
23998: CALL 51325 0 3
24002: ST_TO_ADDR
24003: GO 24075
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
24005: LD_ADDR_EXP 52
24009: PUSH
24010: LD_EXP 52
24014: PPUSH
24015: LD_VAR 0 2
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: LD_EXP 52
24031: PUSH
24032: LD_VAR 0 2
24036: ARRAY
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PPUSH
24042: LD_INT 3
24044: PUSH
24045: LD_INT 24
24047: PUSH
24048: LD_INT 1000
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 72
24063: PUSH
24064: LD_VAR 0 6
24068: UNION
24069: PPUSH
24070: CALL 51325 0 3
24074: ST_TO_ADDR
// if not need_heal_2 then
24075: LD_VAR 0 7
24079: NOT
24080: IFFALSE 24113
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
24082: LD_ADDR_EXP 52
24086: PUSH
24087: LD_EXP 52
24091: PPUSH
24092: LD_VAR 0 2
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PPUSH
24104: EMPTY
24105: PPUSH
24106: CALL 51325 0 3
24110: ST_TO_ADDR
24111: GO 24145
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
24113: LD_ADDR_EXP 52
24117: PUSH
24118: LD_EXP 52
24122: PPUSH
24123: LD_VAR 0 2
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PPUSH
24135: LD_VAR 0 7
24139: PPUSH
24140: CALL 51325 0 3
24144: ST_TO_ADDR
// if need_heal_2 then
24145: LD_VAR 0 7
24149: IFFALSE 24321
// for j in need_heal_2 do
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: LD_VAR 0 7
24160: PUSH
24161: FOR_IN
24162: IFFALSE 24319
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
24164: LD_ADDR_VAR 0 5
24168: PUSH
24169: LD_EXP 49
24173: PUSH
24174: LD_VAR 0 2
24178: ARRAY
24179: PPUSH
24180: LD_INT 2
24182: PUSH
24183: LD_INT 30
24185: PUSH
24186: LD_INT 6
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 30
24195: PUSH
24196: LD_INT 7
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 30
24205: PUSH
24206: LD_INT 8
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 30
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 25
24235: PUSH
24236: LD_INT 4
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: PPUSH
24252: CALL_OW 72
24256: ST_TO_ADDR
// if tmp then
24257: LD_VAR 0 5
24261: IFFALSE 24317
// begin k := NearestUnitToUnit ( tmp , j ) ;
24263: LD_ADDR_VAR 0 4
24267: PUSH
24268: LD_VAR 0 5
24272: PPUSH
24273: LD_VAR 0 3
24277: PPUSH
24278: CALL_OW 74
24282: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
24283: LD_VAR 0 3
24287: PPUSH
24288: LD_VAR 0 4
24292: PPUSH
24293: CALL_OW 296
24297: PUSH
24298: LD_INT 7
24300: GREATER
24301: IFFALSE 24317
// ComMoveUnit ( j , k ) ;
24303: LD_VAR 0 3
24307: PPUSH
24308: LD_VAR 0 4
24312: PPUSH
24313: CALL_OW 112
// end ; end ;
24317: GO 24161
24319: POP
24320: POP
// if not need_heal_1 and not need_heal_2 then
24321: LD_VAR 0 6
24325: NOT
24326: PUSH
24327: LD_VAR 0 7
24331: NOT
24332: AND
24333: IFFALSE 24337
// continue ;
24335: GO 23790
// end ;
24337: GO 23790
24339: POP
24340: POP
// RaiseSailEvent ( 102 ) ;
24341: LD_INT 102
24343: PPUSH
24344: CALL_OW 427
// end ;
24348: LD_VAR 0 1
24352: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
24353: LD_INT 0
24355: PPUSH
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
// if not mc_bases then
24360: LD_EXP 49
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24754
// for i = 1 to mc_bases do
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: DOUBLE
24375: LD_INT 1
24377: DEC
24378: ST_TO_ADDR
24379: LD_EXP 49
24383: PUSH
24384: FOR_TO
24385: IFFALSE 24752
// begin if not mc_building_need_repair [ i ] then
24387: LD_EXP 50
24391: PUSH
24392: LD_VAR 0 2
24396: ARRAY
24397: NOT
24398: IFFALSE 24436
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24400: LD_ADDR_EXP 51
24404: PUSH
24405: LD_EXP 51
24409: PPUSH
24410: LD_VAR 0 2
24414: PPUSH
24415: EMPTY
24416: PPUSH
24417: CALL_OW 1
24421: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
24422: LD_VAR 0 2
24426: PPUSH
24427: LD_INT 101
24429: PPUSH
24430: CALL 19797 0 2
// continue ;
24434: GO 24384
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
24436: LD_ADDR_EXP 55
24440: PUSH
24441: LD_EXP 55
24445: PPUSH
24446: LD_VAR 0 2
24450: PPUSH
24451: EMPTY
24452: PPUSH
24453: CALL_OW 1
24457: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24458: LD_VAR 0 2
24462: PPUSH
24463: LD_INT 103
24465: PPUSH
24466: CALL 19797 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
24470: LD_ADDR_VAR 0 5
24474: PUSH
24475: LD_EXP 49
24479: PUSH
24480: LD_VAR 0 2
24484: ARRAY
24485: PUSH
24486: LD_EXP 78
24490: PUSH
24491: LD_VAR 0 2
24495: ARRAY
24496: UNION
24497: PPUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 25
24513: PUSH
24514: LD_INT 16
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: PPUSH
24529: CALL_OW 72
24533: ST_TO_ADDR
// if not tmp then
24534: LD_VAR 0 5
24538: NOT
24539: IFFALSE 24543
// continue ;
24541: GO 24384
// for j in tmp do
24543: LD_ADDR_VAR 0 3
24547: PUSH
24548: LD_VAR 0 5
24552: PUSH
24553: FOR_IN
24554: IFFALSE 24748
// begin if mc_need_heal [ i ] then
24556: LD_EXP 52
24560: PUSH
24561: LD_VAR 0 2
24565: ARRAY
24566: IFFALSE 24614
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
24568: LD_VAR 0 3
24572: PUSH
24573: LD_EXP 52
24577: PUSH
24578: LD_VAR 0 2
24582: ARRAY
24583: PUSH
24584: LD_INT 1
24586: ARRAY
24587: IN
24588: PUSH
24589: LD_VAR 0 3
24593: PUSH
24594: LD_EXP 52
24598: PUSH
24599: LD_VAR 0 2
24603: ARRAY
24604: PUSH
24605: LD_INT 2
24607: ARRAY
24608: IN
24609: OR
24610: IFFALSE 24614
// continue ;
24612: GO 24553
// if IsInUnit ( j ) then
24614: LD_VAR 0 3
24618: PPUSH
24619: CALL_OW 310
24623: IFFALSE 24634
// ComExitBuilding ( j ) ;
24625: LD_VAR 0 3
24629: PPUSH
24630: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
24634: LD_VAR 0 3
24638: PUSH
24639: LD_EXP 51
24643: PUSH
24644: LD_VAR 0 2
24648: ARRAY
24649: IN
24650: NOT
24651: IFFALSE 24709
// begin SetTag ( j , 101 ) ;
24653: LD_VAR 0 3
24657: PPUSH
24658: LD_INT 101
24660: PPUSH
24661: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
24665: LD_ADDR_EXP 51
24669: PUSH
24670: LD_EXP 51
24674: PPUSH
24675: LD_VAR 0 2
24679: PUSH
24680: LD_EXP 51
24684: PUSH
24685: LD_VAR 0 2
24689: ARRAY
24690: PUSH
24691: LD_INT 1
24693: PLUS
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: CALL 51325 0 3
24708: ST_TO_ADDR
// end ; wait ( 1 ) ;
24709: LD_INT 1
24711: PPUSH
24712: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
24716: LD_VAR 0 3
24720: PPUSH
24721: LD_EXP 50
24725: PUSH
24726: LD_VAR 0 2
24730: ARRAY
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: CALL_OW 74
24741: PPUSH
24742: CALL_OW 130
// end ;
24746: GO 24553
24748: POP
24749: POP
// end ;
24750: GO 24384
24752: POP
24753: POP
// end ;
24754: LD_VAR 0 1
24758: RET
// export function MC_Heal ; var i , j , tmp ; begin
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
// if not mc_bases then
24765: LD_EXP 49
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 25176
// for i = 1 to mc_bases do
24774: LD_ADDR_VAR 0 2
24778: PUSH
24779: DOUBLE
24780: LD_INT 1
24782: DEC
24783: ST_TO_ADDR
24784: LD_EXP 49
24788: PUSH
24789: FOR_TO
24790: IFFALSE 25174
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
24792: LD_EXP 52
24796: PUSH
24797: LD_VAR 0 2
24801: ARRAY
24802: PUSH
24803: LD_INT 1
24805: ARRAY
24806: NOT
24807: PUSH
24808: LD_EXP 52
24812: PUSH
24813: LD_VAR 0 2
24817: ARRAY
24818: PUSH
24819: LD_INT 2
24821: ARRAY
24822: NOT
24823: AND
24824: IFFALSE 24862
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
24826: LD_ADDR_EXP 53
24830: PUSH
24831: LD_EXP 53
24835: PPUSH
24836: LD_VAR 0 2
24840: PPUSH
24841: EMPTY
24842: PPUSH
24843: CALL_OW 1
24847: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_INT 102
24855: PPUSH
24856: CALL 19797 0 2
// continue ;
24860: GO 24789
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_EXP 49
24871: PUSH
24872: LD_VAR 0 2
24876: ARRAY
24877: PPUSH
24878: LD_INT 25
24880: PUSH
24881: LD_INT 4
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 72
24892: ST_TO_ADDR
// if not tmp then
24893: LD_VAR 0 4
24897: NOT
24898: IFFALSE 24902
// continue ;
24900: GO 24789
// if mc_taming [ i ] then
24902: LD_EXP 80
24906: PUSH
24907: LD_VAR 0 2
24911: ARRAY
24912: IFFALSE 24936
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
24914: LD_ADDR_EXP 80
24918: PUSH
24919: LD_EXP 80
24923: PPUSH
24924: LD_VAR 0 2
24928: PPUSH
24929: EMPTY
24930: PPUSH
24931: CALL_OW 1
24935: ST_TO_ADDR
// for j in tmp do
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_VAR 0 4
24945: PUSH
24946: FOR_IN
24947: IFFALSE 25170
// begin if IsInUnit ( j ) then
24949: LD_VAR 0 3
24953: PPUSH
24954: CALL_OW 310
24958: IFFALSE 24969
// ComExitBuilding ( j ) ;
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 122
// if not j in mc_healers [ i ] then
24969: LD_VAR 0 3
24973: PUSH
24974: LD_EXP 53
24978: PUSH
24979: LD_VAR 0 2
24983: ARRAY
24984: IN
24985: NOT
24986: IFFALSE 25032
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
24988: LD_ADDR_EXP 53
24992: PUSH
24993: LD_EXP 53
24997: PPUSH
24998: LD_VAR 0 2
25002: PUSH
25003: LD_EXP 53
25007: PUSH
25008: LD_VAR 0 2
25012: ARRAY
25013: PUSH
25014: LD_INT 1
25016: PLUS
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PPUSH
25022: LD_VAR 0 3
25026: PPUSH
25027: CALL 51325 0 3
25031: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
25032: LD_VAR 0 3
25036: PPUSH
25037: CALL_OW 110
25041: PUSH
25042: LD_INT 102
25044: NONEQUAL
25045: IFFALSE 25059
// SetTag ( j , 102 ) ;
25047: LD_VAR 0 3
25051: PPUSH
25052: LD_INT 102
25054: PPUSH
25055: CALL_OW 109
// Wait ( 3 ) ;
25059: LD_INT 3
25061: PPUSH
25062: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
25066: LD_EXP 52
25070: PUSH
25071: LD_VAR 0 2
25075: ARRAY
25076: PUSH
25077: LD_INT 1
25079: ARRAY
25080: IFFALSE 25112
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
25082: LD_VAR 0 3
25086: PPUSH
25087: LD_EXP 52
25091: PUSH
25092: LD_VAR 0 2
25096: ARRAY
25097: PUSH
25098: LD_INT 1
25100: ARRAY
25101: PUSH
25102: LD_INT 1
25104: ARRAY
25105: PPUSH
25106: CALL_OW 128
25110: GO 25168
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
25112: LD_VAR 0 3
25116: PPUSH
25117: CALL_OW 314
25121: NOT
25122: PUSH
25123: LD_EXP 52
25127: PUSH
25128: LD_VAR 0 2
25132: ARRAY
25133: PUSH
25134: LD_INT 2
25136: ARRAY
25137: AND
25138: IFFALSE 25168
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_EXP 52
25149: PUSH
25150: LD_VAR 0 2
25154: ARRAY
25155: PUSH
25156: LD_INT 2
25158: ARRAY
25159: PUSH
25160: LD_INT 1
25162: ARRAY
25163: PPUSH
25164: CALL_OW 128
// end ;
25168: GO 24946
25170: POP
25171: POP
// end ;
25172: GO 24789
25174: POP
25175: POP
// end ;
25176: LD_VAR 0 1
25180: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
25181: LD_INT 0
25183: PPUSH
25184: PPUSH
25185: PPUSH
25186: PPUSH
25187: PPUSH
// if not mc_bases then
25188: LD_EXP 49
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 26340
// for i = 1 to mc_bases do
25197: LD_ADDR_VAR 0 2
25201: PUSH
25202: DOUBLE
25203: LD_INT 1
25205: DEC
25206: ST_TO_ADDR
25207: LD_EXP 49
25211: PUSH
25212: FOR_TO
25213: IFFALSE 26338
// begin if mc_scan [ i ] then
25215: LD_EXP 72
25219: PUSH
25220: LD_VAR 0 2
25224: ARRAY
25225: IFFALSE 25229
// continue ;
25227: GO 25212
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
25229: LD_EXP 54
25233: PUSH
25234: LD_VAR 0 2
25238: ARRAY
25239: NOT
25240: PUSH
25241: LD_EXP 56
25245: PUSH
25246: LD_VAR 0 2
25250: ARRAY
25251: NOT
25252: AND
25253: PUSH
25254: LD_EXP 55
25258: PUSH
25259: LD_VAR 0 2
25263: ARRAY
25264: AND
25265: IFFALSE 25303
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
25267: LD_ADDR_EXP 55
25271: PUSH
25272: LD_EXP 55
25276: PPUSH
25277: LD_VAR 0 2
25281: PPUSH
25282: EMPTY
25283: PPUSH
25284: CALL_OW 1
25288: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 103
25296: PPUSH
25297: CALL 19797 0 2
// continue ;
25301: GO 25212
// end ; if mc_construct_list [ i ] then
25303: LD_EXP 56
25307: PUSH
25308: LD_VAR 0 2
25312: ARRAY
25313: IFFALSE 25533
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_EXP 49
25324: PUSH
25325: LD_VAR 0 2
25329: ARRAY
25330: PPUSH
25331: LD_INT 25
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PPUSH
25341: CALL_OW 72
25345: PUSH
25346: LD_EXP 51
25350: PUSH
25351: LD_VAR 0 2
25355: ARRAY
25356: DIFF
25357: ST_TO_ADDR
// if not tmp then
25358: LD_VAR 0 4
25362: NOT
25363: IFFALSE 25367
// continue ;
25365: GO 25212
// for j in tmp do
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_VAR 0 4
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25529
// begin if not mc_builders [ i ] then
25380: LD_EXP 55
25384: PUSH
25385: LD_VAR 0 2
25389: ARRAY
25390: NOT
25391: IFFALSE 25449
// begin SetTag ( j , 103 ) ;
25393: LD_VAR 0 3
25397: PPUSH
25398: LD_INT 103
25400: PPUSH
25401: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25405: LD_ADDR_EXP 55
25409: PUSH
25410: LD_EXP 55
25414: PPUSH
25415: LD_VAR 0 2
25419: PUSH
25420: LD_EXP 55
25424: PUSH
25425: LD_VAR 0 2
25429: ARRAY
25430: PUSH
25431: LD_INT 1
25433: PLUS
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PPUSH
25439: LD_VAR 0 3
25443: PPUSH
25444: CALL 51325 0 3
25448: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25449: LD_VAR 0 3
25453: PPUSH
25454: CALL_OW 310
25458: IFFALSE 25469
// ComExitBuilding ( j ) ;
25460: LD_VAR 0 3
25464: PPUSH
25465: CALL_OW 122
// wait ( 3 ) ;
25469: LD_INT 3
25471: PPUSH
25472: CALL_OW 67
// if not mc_construct_list [ i ] then
25476: LD_EXP 56
25480: PUSH
25481: LD_VAR 0 2
25485: ARRAY
25486: NOT
25487: IFFALSE 25491
// break ;
25489: GO 25529
// if not HasTask ( j ) then
25491: LD_VAR 0 3
25495: PPUSH
25496: CALL_OW 314
25500: NOT
25501: IFFALSE 25527
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
25503: LD_VAR 0 3
25507: PPUSH
25508: LD_EXP 56
25512: PUSH
25513: LD_VAR 0 2
25517: ARRAY
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: PPUSH
25523: CALL 54176 0 2
// end ;
25527: GO 25377
25529: POP
25530: POP
// end else
25531: GO 26336
// if mc_build_list [ i ] then
25533: LD_EXP 54
25537: PUSH
25538: LD_VAR 0 2
25542: ARRAY
25543: IFFALSE 26336
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
25545: LD_ADDR_VAR 0 5
25549: PUSH
25550: LD_EXP 49
25554: PUSH
25555: LD_VAR 0 2
25559: ARRAY
25560: PPUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 30
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 30
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 72
25593: ST_TO_ADDR
// if depot then
25594: LD_VAR 0 5
25598: IFFALSE 25616
// depot := depot [ 1 ] else
25600: LD_ADDR_VAR 0 5
25604: PUSH
25605: LD_VAR 0 5
25609: PUSH
25610: LD_INT 1
25612: ARRAY
25613: ST_TO_ADDR
25614: GO 25624
// depot := 0 ;
25616: LD_ADDR_VAR 0 5
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
25624: LD_EXP 54
25628: PUSH
25629: LD_VAR 0 2
25633: ARRAY
25634: PUSH
25635: LD_INT 1
25637: ARRAY
25638: PUSH
25639: LD_INT 1
25641: ARRAY
25642: PPUSH
25643: CALL 54006 0 1
25647: PUSH
25648: LD_EXP 49
25652: PUSH
25653: LD_VAR 0 2
25657: ARRAY
25658: PPUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 30
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 30
25674: PUSH
25675: LD_INT 3
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL_OW 72
25691: NOT
25692: AND
25693: IFFALSE 25798
// begin for j = 1 to mc_build_list [ i ] do
25695: LD_ADDR_VAR 0 3
25699: PUSH
25700: DOUBLE
25701: LD_INT 1
25703: DEC
25704: ST_TO_ADDR
25705: LD_EXP 54
25709: PUSH
25710: LD_VAR 0 2
25714: ARRAY
25715: PUSH
25716: FOR_TO
25717: IFFALSE 25796
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
25719: LD_EXP 54
25723: PUSH
25724: LD_VAR 0 2
25728: ARRAY
25729: PUSH
25730: LD_VAR 0 3
25734: ARRAY
25735: PUSH
25736: LD_INT 1
25738: ARRAY
25739: PUSH
25740: LD_INT 2
25742: EQUAL
25743: IFFALSE 25794
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
25745: LD_ADDR_EXP 54
25749: PUSH
25750: LD_EXP 54
25754: PPUSH
25755: LD_VAR 0 2
25759: PPUSH
25760: LD_EXP 54
25764: PUSH
25765: LD_VAR 0 2
25769: ARRAY
25770: PPUSH
25771: LD_VAR 0 3
25775: PPUSH
25776: LD_INT 1
25778: PPUSH
25779: LD_INT 0
25781: PPUSH
25782: CALL 50743 0 4
25786: PPUSH
25787: CALL_OW 1
25791: ST_TO_ADDR
// break ;
25792: GO 25796
// end ;
25794: GO 25716
25796: POP
25797: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
25798: LD_EXP 54
25802: PUSH
25803: LD_VAR 0 2
25807: ARRAY
25808: PUSH
25809: LD_INT 1
25811: ARRAY
25812: PUSH
25813: LD_INT 1
25815: ARRAY
25816: PUSH
25817: LD_INT 0
25819: EQUAL
25820: PUSH
25821: LD_VAR 0 5
25825: PUSH
25826: LD_VAR 0 5
25830: PPUSH
25831: LD_EXP 54
25835: PUSH
25836: LD_VAR 0 2
25840: ARRAY
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PUSH
25846: LD_INT 1
25848: ARRAY
25849: PPUSH
25850: LD_EXP 54
25854: PUSH
25855: LD_VAR 0 2
25859: ARRAY
25860: PUSH
25861: LD_INT 1
25863: ARRAY
25864: PUSH
25865: LD_INT 2
25867: ARRAY
25868: PPUSH
25869: LD_EXP 54
25873: PUSH
25874: LD_VAR 0 2
25878: ARRAY
25879: PUSH
25880: LD_INT 1
25882: ARRAY
25883: PUSH
25884: LD_INT 3
25886: ARRAY
25887: PPUSH
25888: LD_EXP 54
25892: PUSH
25893: LD_VAR 0 2
25897: ARRAY
25898: PUSH
25899: LD_INT 1
25901: ARRAY
25902: PUSH
25903: LD_INT 4
25905: ARRAY
25906: PPUSH
25907: CALL 58722 0 5
25911: AND
25912: OR
25913: IFFALSE 26194
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25915: LD_ADDR_VAR 0 4
25919: PUSH
25920: LD_EXP 49
25924: PUSH
25925: LD_VAR 0 2
25929: ARRAY
25930: PPUSH
25931: LD_INT 25
25933: PUSH
25934: LD_INT 2
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 72
25945: PUSH
25946: LD_EXP 51
25950: PUSH
25951: LD_VAR 0 2
25955: ARRAY
25956: DIFF
25957: ST_TO_ADDR
// if not tmp then
25958: LD_VAR 0 4
25962: NOT
25963: IFFALSE 25967
// continue ;
25965: GO 25212
// for j in tmp do
25967: LD_ADDR_VAR 0 3
25971: PUSH
25972: LD_VAR 0 4
25976: PUSH
25977: FOR_IN
25978: IFFALSE 26190
// begin if not mc_builders [ i ] then
25980: LD_EXP 55
25984: PUSH
25985: LD_VAR 0 2
25989: ARRAY
25990: NOT
25991: IFFALSE 26049
// begin SetTag ( j , 103 ) ;
25993: LD_VAR 0 3
25997: PPUSH
25998: LD_INT 103
26000: PPUSH
26001: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
26005: LD_ADDR_EXP 55
26009: PUSH
26010: LD_EXP 55
26014: PPUSH
26015: LD_VAR 0 2
26019: PUSH
26020: LD_EXP 55
26024: PUSH
26025: LD_VAR 0 2
26029: ARRAY
26030: PUSH
26031: LD_INT 1
26033: PLUS
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PPUSH
26039: LD_VAR 0 3
26043: PPUSH
26044: CALL 51325 0 3
26048: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL_OW 310
26058: IFFALSE 26069
// ComExitBuilding ( j ) ;
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 122
// wait ( 3 ) ;
26069: LD_INT 3
26071: PPUSH
26072: CALL_OW 67
// if not mc_build_list [ i ] then
26076: LD_EXP 54
26080: PUSH
26081: LD_VAR 0 2
26085: ARRAY
26086: NOT
26087: IFFALSE 26091
// break ;
26089: GO 26190
// if not HasTask ( j ) then
26091: LD_VAR 0 3
26095: PPUSH
26096: CALL_OW 314
26100: NOT
26101: IFFALSE 26188
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
26103: LD_VAR 0 3
26107: PPUSH
26108: LD_EXP 54
26112: PUSH
26113: LD_VAR 0 2
26117: ARRAY
26118: PUSH
26119: LD_INT 1
26121: ARRAY
26122: PUSH
26123: LD_INT 1
26125: ARRAY
26126: PPUSH
26127: LD_EXP 54
26131: PUSH
26132: LD_VAR 0 2
26136: ARRAY
26137: PUSH
26138: LD_INT 1
26140: ARRAY
26141: PUSH
26142: LD_INT 2
26144: ARRAY
26145: PPUSH
26146: LD_EXP 54
26150: PUSH
26151: LD_VAR 0 2
26155: ARRAY
26156: PUSH
26157: LD_INT 1
26159: ARRAY
26160: PUSH
26161: LD_INT 3
26163: ARRAY
26164: PPUSH
26165: LD_EXP 54
26169: PUSH
26170: LD_VAR 0 2
26174: ARRAY
26175: PUSH
26176: LD_INT 1
26178: ARRAY
26179: PUSH
26180: LD_INT 4
26182: ARRAY
26183: PPUSH
26184: CALL_OW 145
// end ;
26188: GO 25977
26190: POP
26191: POP
// end else
26192: GO 26336
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
26194: LD_EXP 49
26198: PUSH
26199: LD_VAR 0 2
26203: ARRAY
26204: PPUSH
26205: LD_EXP 54
26209: PUSH
26210: LD_VAR 0 2
26214: ARRAY
26215: PUSH
26216: LD_INT 1
26218: ARRAY
26219: PUSH
26220: LD_INT 1
26222: ARRAY
26223: PPUSH
26224: LD_EXP 54
26228: PUSH
26229: LD_VAR 0 2
26233: ARRAY
26234: PUSH
26235: LD_INT 1
26237: ARRAY
26238: PUSH
26239: LD_INT 2
26241: ARRAY
26242: PPUSH
26243: LD_EXP 54
26247: PUSH
26248: LD_VAR 0 2
26252: ARRAY
26253: PUSH
26254: LD_INT 1
26256: ARRAY
26257: PUSH
26258: LD_INT 3
26260: ARRAY
26261: PPUSH
26262: LD_EXP 54
26266: PUSH
26267: LD_VAR 0 2
26271: ARRAY
26272: PUSH
26273: LD_INT 1
26275: ARRAY
26276: PUSH
26277: LD_INT 4
26279: ARRAY
26280: PPUSH
26281: CALL 58076 0 5
26285: NOT
26286: IFFALSE 26336
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
26288: LD_ADDR_EXP 54
26292: PUSH
26293: LD_EXP 54
26297: PPUSH
26298: LD_VAR 0 2
26302: PPUSH
26303: LD_EXP 54
26307: PUSH
26308: LD_VAR 0 2
26312: ARRAY
26313: PPUSH
26314: LD_INT 1
26316: PPUSH
26317: LD_INT 1
26319: NEG
26320: PPUSH
26321: LD_INT 0
26323: PPUSH
26324: CALL 50743 0 4
26328: PPUSH
26329: CALL_OW 1
26333: ST_TO_ADDR
// continue ;
26334: GO 25212
// end ; end ; end ;
26336: GO 25212
26338: POP
26339: POP
// end ;
26340: LD_VAR 0 1
26344: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
26345: LD_INT 0
26347: PPUSH
26348: PPUSH
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
// if not mc_bases then
26353: LD_EXP 49
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26789
// for i = 1 to mc_bases do
26362: LD_ADDR_VAR 0 2
26366: PUSH
26367: DOUBLE
26368: LD_INT 1
26370: DEC
26371: ST_TO_ADDR
26372: LD_EXP 49
26376: PUSH
26377: FOR_TO
26378: IFFALSE 26787
// begin tmp := mc_build_upgrade [ i ] ;
26380: LD_ADDR_VAR 0 4
26384: PUSH
26385: LD_EXP 81
26389: PUSH
26390: LD_VAR 0 2
26394: ARRAY
26395: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
26396: LD_ADDR_VAR 0 6
26400: PUSH
26401: LD_EXP 82
26405: PUSH
26406: LD_VAR 0 2
26410: ARRAY
26411: PPUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 30
26417: PUSH
26418: LD_INT 6
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 30
26427: PUSH
26428: LD_INT 7
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 72
26444: ST_TO_ADDR
// if not tmp and not lab then
26445: LD_VAR 0 4
26449: NOT
26450: PUSH
26451: LD_VAR 0 6
26455: NOT
26456: AND
26457: IFFALSE 26461
// continue ;
26459: GO 26377
// if tmp then
26461: LD_VAR 0 4
26465: IFFALSE 26585
// for j in tmp do
26467: LD_ADDR_VAR 0 3
26471: PUSH
26472: LD_VAR 0 4
26476: PUSH
26477: FOR_IN
26478: IFFALSE 26583
// begin if UpgradeCost ( j ) then
26480: LD_VAR 0 3
26484: PPUSH
26485: CALL 57736 0 1
26489: IFFALSE 26581
// begin ComUpgrade ( j ) ;
26491: LD_VAR 0 3
26495: PPUSH
26496: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
26500: LD_ADDR_EXP 81
26504: PUSH
26505: LD_EXP 81
26509: PPUSH
26510: LD_VAR 0 2
26514: PPUSH
26515: LD_EXP 81
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PUSH
26526: LD_VAR 0 3
26530: DIFF
26531: PPUSH
26532: CALL_OW 1
26536: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26537: LD_ADDR_EXP 56
26541: PUSH
26542: LD_EXP 56
26546: PPUSH
26547: LD_VAR 0 2
26551: PUSH
26552: LD_EXP 56
26556: PUSH
26557: LD_VAR 0 2
26561: ARRAY
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PPUSH
26571: LD_VAR 0 3
26575: PPUSH
26576: CALL 51325 0 3
26580: ST_TO_ADDR
// end ; end ;
26581: GO 26477
26583: POP
26584: POP
// if not lab or not mc_lab_upgrade [ i ] then
26585: LD_VAR 0 6
26589: NOT
26590: PUSH
26591: LD_EXP 83
26595: PUSH
26596: LD_VAR 0 2
26600: ARRAY
26601: NOT
26602: OR
26603: IFFALSE 26607
// continue ;
26605: GO 26377
// for j in lab do
26607: LD_ADDR_VAR 0 3
26611: PUSH
26612: LD_VAR 0 6
26616: PUSH
26617: FOR_IN
26618: IFFALSE 26783
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
26620: LD_VAR 0 3
26624: PPUSH
26625: CALL_OW 266
26629: PUSH
26630: LD_INT 6
26632: PUSH
26633: LD_INT 7
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: IN
26640: PUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 461
26650: PUSH
26651: LD_INT 1
26653: NONEQUAL
26654: AND
26655: IFFALSE 26781
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
26657: LD_VAR 0 3
26661: PPUSH
26662: LD_EXP 83
26666: PUSH
26667: LD_VAR 0 2
26671: ARRAY
26672: PUSH
26673: LD_INT 1
26675: ARRAY
26676: PPUSH
26677: CALL 57941 0 2
26681: IFFALSE 26781
// begin ComCancel ( j ) ;
26683: LD_VAR 0 3
26687: PPUSH
26688: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
26692: LD_VAR 0 3
26696: PPUSH
26697: LD_EXP 83
26701: PUSH
26702: LD_VAR 0 2
26706: ARRAY
26707: PUSH
26708: LD_INT 1
26710: ARRAY
26711: PPUSH
26712: CALL_OW 207
// if not j in mc_construct_list [ i ] then
26716: LD_VAR 0 3
26720: PUSH
26721: LD_EXP 56
26725: PUSH
26726: LD_VAR 0 2
26730: ARRAY
26731: IN
26732: NOT
26733: IFFALSE 26779
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26735: LD_ADDR_EXP 56
26739: PUSH
26740: LD_EXP 56
26744: PPUSH
26745: LD_VAR 0 2
26749: PUSH
26750: LD_EXP 56
26754: PUSH
26755: LD_VAR 0 2
26759: ARRAY
26760: PUSH
26761: LD_INT 1
26763: PLUS
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PPUSH
26769: LD_VAR 0 3
26773: PPUSH
26774: CALL 51325 0 3
26778: ST_TO_ADDR
// break ;
26779: GO 26783
// end ; end ; end ;
26781: GO 26617
26783: POP
26784: POP
// end ;
26785: GO 26377
26787: POP
26788: POP
// end ;
26789: LD_VAR 0 1
26793: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
// if not mc_bases then
26805: LD_EXP 49
26809: NOT
26810: IFFALSE 26814
// exit ;
26812: GO 27219
// for i = 1 to mc_bases do
26814: LD_ADDR_VAR 0 2
26818: PUSH
26819: DOUBLE
26820: LD_INT 1
26822: DEC
26823: ST_TO_ADDR
26824: LD_EXP 49
26828: PUSH
26829: FOR_TO
26830: IFFALSE 27217
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
26832: LD_EXP 57
26836: PUSH
26837: LD_VAR 0 2
26841: ARRAY
26842: NOT
26843: PUSH
26844: LD_EXP 49
26848: PUSH
26849: LD_VAR 0 2
26853: ARRAY
26854: PPUSH
26855: LD_INT 30
26857: PUSH
26858: LD_INT 3
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PPUSH
26865: CALL_OW 72
26869: NOT
26870: OR
26871: IFFALSE 26875
// continue ;
26873: GO 26829
// busy := false ;
26875: LD_ADDR_VAR 0 8
26879: PUSH
26880: LD_INT 0
26882: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26883: LD_ADDR_VAR 0 4
26887: PUSH
26888: LD_EXP 49
26892: PUSH
26893: LD_VAR 0 2
26897: ARRAY
26898: PPUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 72
26913: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
26914: LD_ADDR_VAR 0 6
26918: PUSH
26919: LD_EXP 57
26923: PUSH
26924: LD_VAR 0 2
26928: ARRAY
26929: PPUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 30
26935: PUSH
26936: LD_INT 32
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 30
26945: PUSH
26946: LD_INT 33
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: PPUSH
26958: CALL_OW 72
26962: ST_TO_ADDR
// if not t then
26963: LD_VAR 0 6
26967: NOT
26968: IFFALSE 26972
// continue ;
26970: GO 26829
// for j in tmp do
26972: LD_ADDR_VAR 0 3
26976: PUSH
26977: LD_VAR 0 4
26981: PUSH
26982: FOR_IN
26983: IFFALSE 27013
// if not BuildingStatus ( j ) = bs_idle then
26985: LD_VAR 0 3
26989: PPUSH
26990: CALL_OW 461
26994: PUSH
26995: LD_INT 2
26997: EQUAL
26998: NOT
26999: IFFALSE 27011
// begin busy := true ;
27001: LD_ADDR_VAR 0 8
27005: PUSH
27006: LD_INT 1
27008: ST_TO_ADDR
// break ;
27009: GO 27013
// end ;
27011: GO 26982
27013: POP
27014: POP
// if busy then
27015: LD_VAR 0 8
27019: IFFALSE 27023
// continue ;
27021: GO 26829
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
27023: LD_ADDR_VAR 0 7
27027: PUSH
27028: LD_VAR 0 6
27032: PPUSH
27033: LD_INT 35
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PPUSH
27043: CALL_OW 72
27047: ST_TO_ADDR
// if tw then
27048: LD_VAR 0 7
27052: IFFALSE 27129
// begin tw := tw [ 1 ] ;
27054: LD_ADDR_VAR 0 7
27058: PUSH
27059: LD_VAR 0 7
27063: PUSH
27064: LD_INT 1
27066: ARRAY
27067: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
27068: LD_ADDR_VAR 0 9
27072: PUSH
27073: LD_VAR 0 7
27077: PPUSH
27078: LD_EXP 74
27082: PUSH
27083: LD_VAR 0 2
27087: ARRAY
27088: PPUSH
27089: CALL 56295 0 2
27093: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
27094: LD_EXP 88
27098: PUSH
27099: LD_VAR 0 2
27103: ARRAY
27104: IFFALSE 27127
// if not weapon in mc_allowed_tower_weapons [ i ] then
27106: LD_VAR 0 9
27110: PUSH
27111: LD_EXP 88
27115: PUSH
27116: LD_VAR 0 2
27120: ARRAY
27121: IN
27122: NOT
27123: IFFALSE 27127
// continue ;
27125: GO 26829
// end else
27127: GO 27192
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
27129: LD_ADDR_VAR 0 5
27133: PUSH
27134: LD_EXP 57
27138: PUSH
27139: LD_VAR 0 2
27143: ARRAY
27144: PPUSH
27145: LD_VAR 0 4
27149: PPUSH
27150: CALL 86434 0 2
27154: ST_TO_ADDR
// if not tmp2 then
27155: LD_VAR 0 5
27159: NOT
27160: IFFALSE 27164
// continue ;
27162: GO 26829
// tw := tmp2 [ 1 ] ;
27164: LD_ADDR_VAR 0 7
27168: PUSH
27169: LD_VAR 0 5
27173: PUSH
27174: LD_INT 1
27176: ARRAY
27177: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
27178: LD_ADDR_VAR 0 9
27182: PUSH
27183: LD_VAR 0 5
27187: PUSH
27188: LD_INT 2
27190: ARRAY
27191: ST_TO_ADDR
// end ; if not weapon then
27192: LD_VAR 0 9
27196: NOT
27197: IFFALSE 27201
// continue ;
27199: GO 26829
// ComPlaceWeapon ( tw , weapon ) ;
27201: LD_VAR 0 7
27205: PPUSH
27206: LD_VAR 0 9
27210: PPUSH
27211: CALL_OW 148
// end ;
27215: GO 26829
27217: POP
27218: POP
// end ;
27219: LD_VAR 0 1
27223: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
27224: LD_INT 0
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
// if not mc_bases then
27232: LD_EXP 49
27236: NOT
27237: IFFALSE 27241
// exit ;
27239: GO 28253
// for i = 1 to mc_bases do
27241: LD_ADDR_VAR 0 2
27245: PUSH
27246: DOUBLE
27247: LD_INT 1
27249: DEC
27250: ST_TO_ADDR
27251: LD_EXP 49
27255: PUSH
27256: FOR_TO
27257: IFFALSE 28251
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
27259: LD_EXP 62
27263: PUSH
27264: LD_VAR 0 2
27268: ARRAY
27269: NOT
27270: PUSH
27271: LD_EXP 62
27275: PUSH
27276: LD_VAR 0 2
27280: ARRAY
27281: PUSH
27282: LD_EXP 63
27286: PUSH
27287: LD_VAR 0 2
27291: ARRAY
27292: EQUAL
27293: OR
27294: IFFALSE 27298
// continue ;
27296: GO 27256
// if mc_miners [ i ] then
27298: LD_EXP 63
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: IFFALSE 27938
// begin k := 1 ;
27310: LD_ADDR_VAR 0 4
27314: PUSH
27315: LD_INT 1
27317: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: DOUBLE
27324: LD_EXP 63
27328: PUSH
27329: LD_VAR 0 2
27333: ARRAY
27334: INC
27335: ST_TO_ADDR
27336: LD_INT 1
27338: PUSH
27339: FOR_DOWNTO
27340: IFFALSE 27936
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
27342: LD_EXP 63
27346: PUSH
27347: LD_VAR 0 2
27351: ARRAY
27352: PUSH
27353: LD_VAR 0 3
27357: ARRAY
27358: PPUSH
27359: CALL_OW 301
27363: PUSH
27364: LD_EXP 63
27368: PUSH
27369: LD_VAR 0 2
27373: ARRAY
27374: PUSH
27375: LD_VAR 0 3
27379: ARRAY
27380: PPUSH
27381: CALL_OW 257
27385: PUSH
27386: LD_INT 1
27388: NONEQUAL
27389: OR
27390: IFFALSE 27453
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
27392: LD_ADDR_VAR 0 5
27396: PUSH
27397: LD_EXP 63
27401: PUSH
27402: LD_VAR 0 2
27406: ARRAY
27407: PUSH
27408: LD_EXP 63
27412: PUSH
27413: LD_VAR 0 2
27417: ARRAY
27418: PUSH
27419: LD_VAR 0 3
27423: ARRAY
27424: DIFF
27425: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
27426: LD_ADDR_EXP 63
27430: PUSH
27431: LD_EXP 63
27435: PPUSH
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_VAR 0 5
27445: PPUSH
27446: CALL_OW 1
27450: ST_TO_ADDR
// continue ;
27451: GO 27339
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
27453: LD_EXP 63
27457: PUSH
27458: LD_VAR 0 2
27462: ARRAY
27463: PUSH
27464: LD_VAR 0 3
27468: ARRAY
27469: PPUSH
27470: CALL 51261 0 1
27474: PUSH
27475: LD_EXP 63
27479: PUSH
27480: LD_VAR 0 2
27484: ARRAY
27485: PUSH
27486: LD_VAR 0 3
27490: ARRAY
27491: PPUSH
27492: CALL_OW 255
27496: PPUSH
27497: LD_EXP 62
27501: PUSH
27502: LD_VAR 0 2
27506: ARRAY
27507: PUSH
27508: LD_VAR 0 4
27512: ARRAY
27513: PUSH
27514: LD_INT 1
27516: ARRAY
27517: PPUSH
27518: LD_EXP 62
27522: PUSH
27523: LD_VAR 0 2
27527: ARRAY
27528: PUSH
27529: LD_VAR 0 4
27533: ARRAY
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: LD_INT 15
27541: PPUSH
27542: CALL 52221 0 4
27546: PUSH
27547: LD_INT 4
27549: ARRAY
27550: PUSH
27551: LD_EXP 63
27555: PUSH
27556: LD_VAR 0 2
27560: ARRAY
27561: PUSH
27562: LD_VAR 0 3
27566: ARRAY
27567: PPUSH
27568: LD_INT 10
27570: PPUSH
27571: CALL 53918 0 2
27575: PUSH
27576: LD_INT 4
27578: ARRAY
27579: OR
27580: AND
27581: IFFALSE 27604
// ComStop ( mc_miners [ i ] [ j ] ) ;
27583: LD_EXP 63
27587: PUSH
27588: LD_VAR 0 2
27592: ARRAY
27593: PUSH
27594: LD_VAR 0 3
27598: ARRAY
27599: PPUSH
27600: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
27604: LD_EXP 63
27608: PUSH
27609: LD_VAR 0 2
27613: ARRAY
27614: PUSH
27615: LD_VAR 0 3
27619: ARRAY
27620: PPUSH
27621: CALL_OW 257
27625: PUSH
27626: LD_INT 1
27628: EQUAL
27629: PUSH
27630: LD_EXP 63
27634: PUSH
27635: LD_VAR 0 2
27639: ARRAY
27640: PUSH
27641: LD_VAR 0 3
27645: ARRAY
27646: PPUSH
27647: CALL_OW 459
27651: NOT
27652: AND
27653: PUSH
27654: LD_EXP 63
27658: PUSH
27659: LD_VAR 0 2
27663: ARRAY
27664: PUSH
27665: LD_VAR 0 3
27669: ARRAY
27670: PPUSH
27671: CALL_OW 255
27675: PPUSH
27676: LD_EXP 62
27680: PUSH
27681: LD_VAR 0 2
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 4
27691: ARRAY
27692: PUSH
27693: LD_INT 1
27695: ARRAY
27696: PPUSH
27697: LD_EXP 62
27701: PUSH
27702: LD_VAR 0 2
27706: ARRAY
27707: PUSH
27708: LD_VAR 0 4
27712: ARRAY
27713: PUSH
27714: LD_INT 2
27716: ARRAY
27717: PPUSH
27718: LD_INT 15
27720: PPUSH
27721: CALL 52221 0 4
27725: PUSH
27726: LD_INT 4
27728: ARRAY
27729: PUSH
27730: LD_INT 0
27732: EQUAL
27733: AND
27734: PUSH
27735: LD_EXP 63
27739: PUSH
27740: LD_VAR 0 2
27744: ARRAY
27745: PUSH
27746: LD_VAR 0 3
27750: ARRAY
27751: PPUSH
27752: CALL_OW 314
27756: NOT
27757: AND
27758: IFFALSE 27934
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
27760: LD_EXP 63
27764: PUSH
27765: LD_VAR 0 2
27769: ARRAY
27770: PUSH
27771: LD_VAR 0 3
27775: ARRAY
27776: PPUSH
27777: CALL_OW 310
27781: IFFALSE 27804
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
27783: LD_EXP 63
27787: PUSH
27788: LD_VAR 0 2
27792: ARRAY
27793: PUSH
27794: LD_VAR 0 3
27798: ARRAY
27799: PPUSH
27800: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
27804: LD_EXP 63
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_VAR 0 3
27819: ARRAY
27820: PPUSH
27821: CALL_OW 314
27825: NOT
27826: IFFALSE 27894
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
27828: LD_EXP 63
27832: PUSH
27833: LD_VAR 0 2
27837: ARRAY
27838: PUSH
27839: LD_VAR 0 3
27843: ARRAY
27844: PPUSH
27845: LD_EXP 62
27849: PUSH
27850: LD_VAR 0 2
27854: ARRAY
27855: PUSH
27856: LD_VAR 0 4
27860: ARRAY
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: PPUSH
27866: LD_EXP 62
27870: PUSH
27871: LD_VAR 0 2
27875: ARRAY
27876: PUSH
27877: LD_VAR 0 4
27881: ARRAY
27882: PUSH
27883: LD_INT 2
27885: ARRAY
27886: PPUSH
27887: LD_INT 0
27889: PPUSH
27890: CALL_OW 193
// k := k + 1 ;
27894: LD_ADDR_VAR 0 4
27898: PUSH
27899: LD_VAR 0 4
27903: PUSH
27904: LD_INT 1
27906: PLUS
27907: ST_TO_ADDR
// if k > mc_mines [ i ] then
27908: LD_VAR 0 4
27912: PUSH
27913: LD_EXP 62
27917: PUSH
27918: LD_VAR 0 2
27922: ARRAY
27923: GREATER
27924: IFFALSE 27934
// k := 1 ;
27926: LD_ADDR_VAR 0 4
27930: PUSH
27931: LD_INT 1
27933: ST_TO_ADDR
// end ; end ;
27934: GO 27339
27936: POP
27937: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
27938: LD_ADDR_VAR 0 5
27942: PUSH
27943: LD_EXP 49
27947: PUSH
27948: LD_VAR 0 2
27952: ARRAY
27953: PPUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 30
27959: PUSH
27960: LD_INT 4
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 30
27969: PUSH
27970: LD_INT 5
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 30
27979: PUSH
27980: LD_INT 32
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 72
27997: ST_TO_ADDR
// if not tmp then
27998: LD_VAR 0 5
28002: NOT
28003: IFFALSE 28007
// continue ;
28005: GO 27256
// list := [ ] ;
28007: LD_ADDR_VAR 0 6
28011: PUSH
28012: EMPTY
28013: ST_TO_ADDR
// for j in tmp do
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_VAR 0 5
28023: PUSH
28024: FOR_IN
28025: IFFALSE 28094
// begin for k in UnitsInside ( j ) do
28027: LD_ADDR_VAR 0 4
28031: PUSH
28032: LD_VAR 0 3
28036: PPUSH
28037: CALL_OW 313
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28090
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
28045: LD_VAR 0 4
28049: PPUSH
28050: CALL_OW 257
28054: PUSH
28055: LD_INT 1
28057: EQUAL
28058: PUSH
28059: LD_VAR 0 4
28063: PPUSH
28064: CALL_OW 459
28068: NOT
28069: AND
28070: IFFALSE 28088
// list := list ^ k ;
28072: LD_ADDR_VAR 0 6
28076: PUSH
28077: LD_VAR 0 6
28081: PUSH
28082: LD_VAR 0 4
28086: ADD
28087: ST_TO_ADDR
28088: GO 28042
28090: POP
28091: POP
// end ;
28092: GO 28024
28094: POP
28095: POP
// list := list diff mc_miners [ i ] ;
28096: LD_ADDR_VAR 0 6
28100: PUSH
28101: LD_VAR 0 6
28105: PUSH
28106: LD_EXP 63
28110: PUSH
28111: LD_VAR 0 2
28115: ARRAY
28116: DIFF
28117: ST_TO_ADDR
// if not list then
28118: LD_VAR 0 6
28122: NOT
28123: IFFALSE 28127
// continue ;
28125: GO 27256
// k := mc_mines [ i ] - mc_miners [ i ] ;
28127: LD_ADDR_VAR 0 4
28131: PUSH
28132: LD_EXP 62
28136: PUSH
28137: LD_VAR 0 2
28141: ARRAY
28142: PUSH
28143: LD_EXP 63
28147: PUSH
28148: LD_VAR 0 2
28152: ARRAY
28153: MINUS
28154: ST_TO_ADDR
// if k > list then
28155: LD_VAR 0 4
28159: PUSH
28160: LD_VAR 0 6
28164: GREATER
28165: IFFALSE 28177
// k := list ;
28167: LD_ADDR_VAR 0 4
28171: PUSH
28172: LD_VAR 0 6
28176: ST_TO_ADDR
// for j = 1 to k do
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: DOUBLE
28183: LD_INT 1
28185: DEC
28186: ST_TO_ADDR
28187: LD_VAR 0 4
28191: PUSH
28192: FOR_TO
28193: IFFALSE 28247
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
28195: LD_ADDR_EXP 63
28199: PUSH
28200: LD_EXP 63
28204: PPUSH
28205: LD_VAR 0 2
28209: PUSH
28210: LD_EXP 63
28214: PUSH
28215: LD_VAR 0 2
28219: ARRAY
28220: PUSH
28221: LD_INT 1
28223: PLUS
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PPUSH
28229: LD_VAR 0 6
28233: PUSH
28234: LD_VAR 0 3
28238: ARRAY
28239: PPUSH
28240: CALL 51325 0 3
28244: ST_TO_ADDR
28245: GO 28192
28247: POP
28248: POP
// end ;
28249: GO 27256
28251: POP
28252: POP
// end ;
28253: LD_VAR 0 1
28257: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
28258: LD_INT 0
28260: PPUSH
28261: PPUSH
28262: PPUSH
28263: PPUSH
28264: PPUSH
28265: PPUSH
28266: PPUSH
28267: PPUSH
28268: PPUSH
28269: PPUSH
// if not mc_bases then
28270: LD_EXP 49
28274: NOT
28275: IFFALSE 28279
// exit ;
28277: GO 30010
// for i = 1 to mc_bases do
28279: LD_ADDR_VAR 0 2
28283: PUSH
28284: DOUBLE
28285: LD_INT 1
28287: DEC
28288: ST_TO_ADDR
28289: LD_EXP 49
28293: PUSH
28294: FOR_TO
28295: IFFALSE 30008
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
28297: LD_EXP 49
28301: PUSH
28302: LD_VAR 0 2
28306: ARRAY
28307: NOT
28308: PUSH
28309: LD_EXP 56
28313: PUSH
28314: LD_VAR 0 2
28318: ARRAY
28319: OR
28320: IFFALSE 28324
// continue ;
28322: GO 28294
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
28324: LD_EXP 65
28328: PUSH
28329: LD_VAR 0 2
28333: ARRAY
28334: NOT
28335: PUSH
28336: LD_EXP 66
28340: PUSH
28341: LD_VAR 0 2
28345: ARRAY
28346: AND
28347: IFFALSE 28385
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
28349: LD_ADDR_EXP 66
28353: PUSH
28354: LD_EXP 66
28358: PPUSH
28359: LD_VAR 0 2
28363: PPUSH
28364: EMPTY
28365: PPUSH
28366: CALL_OW 1
28370: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
28371: LD_VAR 0 2
28375: PPUSH
28376: LD_INT 107
28378: PPUSH
28379: CALL 19797 0 2
// continue ;
28383: GO 28294
// end ; target := [ ] ;
28385: LD_ADDR_VAR 0 6
28389: PUSH
28390: EMPTY
28391: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
28392: LD_ADDR_VAR 0 3
28396: PUSH
28397: DOUBLE
28398: LD_EXP 65
28402: PUSH
28403: LD_VAR 0 2
28407: ARRAY
28408: INC
28409: ST_TO_ADDR
28410: LD_INT 1
28412: PUSH
28413: FOR_DOWNTO
28414: IFFALSE 28674
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
28416: LD_EXP 65
28420: PUSH
28421: LD_VAR 0 2
28425: ARRAY
28426: PUSH
28427: LD_VAR 0 3
28431: ARRAY
28432: PUSH
28433: LD_INT 2
28435: ARRAY
28436: PPUSH
28437: LD_EXP 65
28441: PUSH
28442: LD_VAR 0 2
28446: ARRAY
28447: PUSH
28448: LD_VAR 0 3
28452: ARRAY
28453: PUSH
28454: LD_INT 3
28456: ARRAY
28457: PPUSH
28458: CALL_OW 488
28462: PUSH
28463: LD_EXP 65
28467: PUSH
28468: LD_VAR 0 2
28472: ARRAY
28473: PUSH
28474: LD_VAR 0 3
28478: ARRAY
28479: PUSH
28480: LD_INT 2
28482: ARRAY
28483: PPUSH
28484: LD_EXP 65
28488: PUSH
28489: LD_VAR 0 2
28493: ARRAY
28494: PUSH
28495: LD_VAR 0 3
28499: ARRAY
28500: PUSH
28501: LD_INT 3
28503: ARRAY
28504: PPUSH
28505: CALL_OW 284
28509: PUSH
28510: LD_INT 0
28512: EQUAL
28513: AND
28514: IFFALSE 28569
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
28516: LD_ADDR_VAR 0 5
28520: PUSH
28521: LD_EXP 65
28525: PUSH
28526: LD_VAR 0 2
28530: ARRAY
28531: PPUSH
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 3
28541: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
28542: LD_ADDR_EXP 65
28546: PUSH
28547: LD_EXP 65
28551: PPUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_VAR 0 5
28561: PPUSH
28562: CALL_OW 1
28566: ST_TO_ADDR
// continue ;
28567: GO 28413
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
28569: LD_EXP 49
28573: PUSH
28574: LD_VAR 0 2
28578: ARRAY
28579: PUSH
28580: LD_INT 1
28582: ARRAY
28583: PPUSH
28584: CALL_OW 255
28588: PPUSH
28589: LD_EXP 65
28593: PUSH
28594: LD_VAR 0 2
28598: ARRAY
28599: PUSH
28600: LD_VAR 0 3
28604: ARRAY
28605: PUSH
28606: LD_INT 2
28608: ARRAY
28609: PPUSH
28610: LD_EXP 65
28614: PUSH
28615: LD_VAR 0 2
28619: ARRAY
28620: PUSH
28621: LD_VAR 0 3
28625: ARRAY
28626: PUSH
28627: LD_INT 3
28629: ARRAY
28630: PPUSH
28631: LD_INT 30
28633: PPUSH
28634: CALL 52221 0 4
28638: PUSH
28639: LD_INT 4
28641: ARRAY
28642: PUSH
28643: LD_INT 0
28645: EQUAL
28646: IFFALSE 28672
// begin target := mc_crates [ i ] [ j ] ;
28648: LD_ADDR_VAR 0 6
28652: PUSH
28653: LD_EXP 65
28657: PUSH
28658: LD_VAR 0 2
28662: ARRAY
28663: PUSH
28664: LD_VAR 0 3
28668: ARRAY
28669: ST_TO_ADDR
// break ;
28670: GO 28674
// end ; end ;
28672: GO 28413
28674: POP
28675: POP
// if not target then
28676: LD_VAR 0 6
28680: NOT
28681: IFFALSE 28685
// continue ;
28683: GO 28294
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
28685: LD_ADDR_VAR 0 7
28689: PUSH
28690: LD_EXP 68
28694: PUSH
28695: LD_VAR 0 2
28699: ARRAY
28700: PPUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 3
28706: PUSH
28707: LD_INT 58
28709: PUSH
28710: EMPTY
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 61
28719: PUSH
28720: EMPTY
28721: LIST
28722: PUSH
28723: LD_INT 33
28725: PUSH
28726: LD_INT 5
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 33
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 34
28755: PUSH
28756: LD_INT 32
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 34
28765: PUSH
28766: LD_INT 51
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 34
28775: PUSH
28776: LD_INT 12
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: CALL_OW 72
28797: ST_TO_ADDR
// if not cargo then
28798: LD_VAR 0 7
28802: NOT
28803: IFFALSE 29446
// begin if mc_crates_collector [ i ] < 5 then
28805: LD_EXP 66
28809: PUSH
28810: LD_VAR 0 2
28814: ARRAY
28815: PUSH
28816: LD_INT 5
28818: LESS
28819: IFFALSE 29185
// begin if mc_ape [ i ] then
28821: LD_EXP 78
28825: PUSH
28826: LD_VAR 0 2
28830: ARRAY
28831: IFFALSE 28878
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
28833: LD_ADDR_VAR 0 5
28837: PUSH
28838: LD_EXP 78
28842: PUSH
28843: LD_VAR 0 2
28847: ARRAY
28848: PPUSH
28849: LD_INT 25
28851: PUSH
28852: LD_INT 16
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 24
28861: PUSH
28862: LD_INT 750
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PPUSH
28873: CALL_OW 72
28877: ST_TO_ADDR
// if not tmp then
28878: LD_VAR 0 5
28882: NOT
28883: IFFALSE 28930
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
28885: LD_ADDR_VAR 0 5
28889: PUSH
28890: LD_EXP 49
28894: PUSH
28895: LD_VAR 0 2
28899: ARRAY
28900: PPUSH
28901: LD_INT 25
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 24
28913: PUSH
28914: LD_INT 750
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 72
28929: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
28930: LD_EXP 78
28934: PUSH
28935: LD_VAR 0 2
28939: ARRAY
28940: PUSH
28941: LD_EXP 49
28945: PUSH
28946: LD_VAR 0 2
28950: ARRAY
28951: PPUSH
28952: LD_INT 25
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 24
28964: PUSH
28965: LD_INT 750
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 72
28980: AND
28981: PUSH
28982: LD_VAR 0 5
28986: PUSH
28987: LD_INT 5
28989: LESS
28990: AND
28991: IFFALSE 29073
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_EXP 49
29002: PUSH
29003: LD_VAR 0 2
29007: ARRAY
29008: PPUSH
29009: LD_INT 25
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 24
29021: PUSH
29022: LD_INT 750
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL_OW 72
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29071
// begin tmp := tmp union j ;
29041: LD_ADDR_VAR 0 5
29045: PUSH
29046: LD_VAR 0 5
29050: PUSH
29051: LD_VAR 0 3
29055: UNION
29056: ST_TO_ADDR
// if tmp >= 5 then
29057: LD_VAR 0 5
29061: PUSH
29062: LD_INT 5
29064: GREATEREQUAL
29065: IFFALSE 29069
// break ;
29067: GO 29071
// end ;
29069: GO 29038
29071: POP
29072: POP
// end ; if not tmp then
29073: LD_VAR 0 5
29077: NOT
29078: IFFALSE 29082
// continue ;
29080: GO 28294
// for j in tmp do
29082: LD_ADDR_VAR 0 3
29086: PUSH
29087: LD_VAR 0 5
29091: PUSH
29092: FOR_IN
29093: IFFALSE 29183
// if not GetTag ( j ) then
29095: LD_VAR 0 3
29099: PPUSH
29100: CALL_OW 110
29104: NOT
29105: IFFALSE 29181
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
29107: LD_ADDR_EXP 66
29111: PUSH
29112: LD_EXP 66
29116: PPUSH
29117: LD_VAR 0 2
29121: PUSH
29122: LD_EXP 66
29126: PUSH
29127: LD_VAR 0 2
29131: ARRAY
29132: PUSH
29133: LD_INT 1
29135: PLUS
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: LD_VAR 0 3
29145: PPUSH
29146: CALL 51325 0 3
29150: ST_TO_ADDR
// SetTag ( j , 107 ) ;
29151: LD_VAR 0 3
29155: PPUSH
29156: LD_INT 107
29158: PPUSH
29159: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
29163: LD_EXP 66
29167: PUSH
29168: LD_VAR 0 2
29172: ARRAY
29173: PUSH
29174: LD_INT 5
29176: GREATEREQUAL
29177: IFFALSE 29181
// break ;
29179: GO 29183
// end ;
29181: GO 29092
29183: POP
29184: POP
// end ; if mc_crates_collector [ i ] and target then
29185: LD_EXP 66
29189: PUSH
29190: LD_VAR 0 2
29194: ARRAY
29195: PUSH
29196: LD_VAR 0 6
29200: AND
29201: IFFALSE 29444
// begin if mc_crates_collector [ i ] < target [ 1 ] then
29203: LD_EXP 66
29207: PUSH
29208: LD_VAR 0 2
29212: ARRAY
29213: PUSH
29214: LD_VAR 0 6
29218: PUSH
29219: LD_INT 1
29221: ARRAY
29222: LESS
29223: IFFALSE 29243
// tmp := mc_crates_collector [ i ] else
29225: LD_ADDR_VAR 0 5
29229: PUSH
29230: LD_EXP 66
29234: PUSH
29235: LD_VAR 0 2
29239: ARRAY
29240: ST_TO_ADDR
29241: GO 29257
// tmp := target [ 1 ] ;
29243: LD_ADDR_VAR 0 5
29247: PUSH
29248: LD_VAR 0 6
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: ST_TO_ADDR
// k := 0 ;
29257: LD_ADDR_VAR 0 4
29261: PUSH
29262: LD_INT 0
29264: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_EXP 66
29274: PUSH
29275: LD_VAR 0 2
29279: ARRAY
29280: PUSH
29281: FOR_IN
29282: IFFALSE 29442
// begin k := k + 1 ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_VAR 0 4
29293: PUSH
29294: LD_INT 1
29296: PLUS
29297: ST_TO_ADDR
// if k > tmp then
29298: LD_VAR 0 4
29302: PUSH
29303: LD_VAR 0 5
29307: GREATER
29308: IFFALSE 29312
// break ;
29310: GO 29442
// if not GetClass ( j ) in [ 2 , 16 ] then
29312: LD_VAR 0 3
29316: PPUSH
29317: CALL_OW 257
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 16
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: IN
29332: NOT
29333: IFFALSE 29386
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
29335: LD_ADDR_EXP 66
29339: PUSH
29340: LD_EXP 66
29344: PPUSH
29345: LD_VAR 0 2
29349: PPUSH
29350: LD_EXP 66
29354: PUSH
29355: LD_VAR 0 2
29359: ARRAY
29360: PUSH
29361: LD_VAR 0 3
29365: DIFF
29366: PPUSH
29367: CALL_OW 1
29371: ST_TO_ADDR
// SetTag ( j , 0 ) ;
29372: LD_VAR 0 3
29376: PPUSH
29377: LD_INT 0
29379: PPUSH
29380: CALL_OW 109
// continue ;
29384: GO 29281
// end ; if IsInUnit ( j ) then
29386: LD_VAR 0 3
29390: PPUSH
29391: CALL_OW 310
29395: IFFALSE 29406
// ComExitBuilding ( j ) ;
29397: LD_VAR 0 3
29401: PPUSH
29402: CALL_OW 122
// wait ( 3 ) ;
29406: LD_INT 3
29408: PPUSH
29409: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29413: LD_VAR 0 3
29417: PPUSH
29418: LD_VAR 0 6
29422: PUSH
29423: LD_INT 2
29425: ARRAY
29426: PPUSH
29427: LD_VAR 0 6
29431: PUSH
29432: LD_INT 3
29434: ARRAY
29435: PPUSH
29436: CALL_OW 117
// end ;
29440: GO 29281
29442: POP
29443: POP
// end ; end else
29444: GO 30006
// begin for j in cargo do
29446: LD_ADDR_VAR 0 3
29450: PUSH
29451: LD_VAR 0 7
29455: PUSH
29456: FOR_IN
29457: IFFALSE 30004
// begin if GetTag ( j ) <> 0 then
29459: LD_VAR 0 3
29463: PPUSH
29464: CALL_OW 110
29468: PUSH
29469: LD_INT 0
29471: NONEQUAL
29472: IFFALSE 29476
// continue ;
29474: GO 29456
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
29476: LD_VAR 0 3
29480: PPUSH
29481: CALL_OW 256
29485: PUSH
29486: LD_INT 1000
29488: LESS
29489: PUSH
29490: LD_VAR 0 3
29494: PPUSH
29495: LD_EXP 73
29499: PUSH
29500: LD_VAR 0 2
29504: ARRAY
29505: PPUSH
29506: CALL_OW 308
29510: NOT
29511: AND
29512: IFFALSE 29534
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29514: LD_VAR 0 3
29518: PPUSH
29519: LD_EXP 73
29523: PUSH
29524: LD_VAR 0 2
29528: ARRAY
29529: PPUSH
29530: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
29534: LD_VAR 0 3
29538: PPUSH
29539: CALL_OW 256
29543: PUSH
29544: LD_INT 1000
29546: LESS
29547: PUSH
29548: LD_VAR 0 3
29552: PPUSH
29553: LD_EXP 73
29557: PUSH
29558: LD_VAR 0 2
29562: ARRAY
29563: PPUSH
29564: CALL_OW 308
29568: AND
29569: IFFALSE 29573
// continue ;
29571: GO 29456
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
29573: LD_VAR 0 3
29577: PPUSH
29578: CALL_OW 262
29582: PUSH
29583: LD_INT 2
29585: EQUAL
29586: PUSH
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 261
29596: PUSH
29597: LD_INT 15
29599: LESS
29600: AND
29601: IFFALSE 29605
// continue ;
29603: GO 29456
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL_OW 262
29614: PUSH
29615: LD_INT 1
29617: EQUAL
29618: PUSH
29619: LD_VAR 0 3
29623: PPUSH
29624: CALL_OW 261
29628: PUSH
29629: LD_INT 10
29631: LESS
29632: AND
29633: IFFALSE 29943
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29635: LD_ADDR_VAR 0 8
29639: PUSH
29640: LD_EXP 49
29644: PUSH
29645: LD_VAR 0 2
29649: ARRAY
29650: PPUSH
29651: LD_INT 2
29653: PUSH
29654: LD_INT 30
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 30
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 72
29683: ST_TO_ADDR
// if not depot then
29684: LD_VAR 0 8
29688: NOT
29689: IFFALSE 29693
// continue ;
29691: GO 29456
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
29693: LD_VAR 0 3
29697: PPUSH
29698: LD_VAR 0 8
29702: PPUSH
29703: LD_VAR 0 3
29707: PPUSH
29708: CALL_OW 74
29712: PPUSH
29713: CALL_OW 296
29717: PUSH
29718: LD_INT 6
29720: LESS
29721: IFFALSE 29737
// SetFuel ( j , 100 ) else
29723: LD_VAR 0 3
29727: PPUSH
29728: LD_INT 100
29730: PPUSH
29731: CALL_OW 240
29735: GO 29943
// if GetFuel ( j ) = 0 then
29737: LD_VAR 0 3
29741: PPUSH
29742: CALL_OW 261
29746: PUSH
29747: LD_INT 0
29749: EQUAL
29750: IFFALSE 29943
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
29752: LD_ADDR_EXP 68
29756: PUSH
29757: LD_EXP 68
29761: PPUSH
29762: LD_VAR 0 2
29766: PPUSH
29767: LD_EXP 68
29771: PUSH
29772: LD_VAR 0 2
29776: ARRAY
29777: PUSH
29778: LD_VAR 0 3
29782: DIFF
29783: PPUSH
29784: CALL_OW 1
29788: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
29789: LD_VAR 0 3
29793: PPUSH
29794: CALL_OW 263
29798: PUSH
29799: LD_INT 1
29801: EQUAL
29802: IFFALSE 29818
// ComExitVehicle ( IsInUnit ( j ) ) ;
29804: LD_VAR 0 3
29808: PPUSH
29809: CALL_OW 310
29813: PPUSH
29814: CALL_OW 121
// if GetControl ( j ) = control_remote then
29818: LD_VAR 0 3
29822: PPUSH
29823: CALL_OW 263
29827: PUSH
29828: LD_INT 2
29830: EQUAL
29831: IFFALSE 29842
// ComUnlink ( j ) ;
29833: LD_VAR 0 3
29837: PPUSH
29838: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
29842: LD_ADDR_VAR 0 9
29846: PUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: LD_INT 3
29854: PPUSH
29855: CALL 39105 0 2
29859: ST_TO_ADDR
// if fac then
29860: LD_VAR 0 9
29864: IFFALSE 29941
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
29866: LD_ADDR_VAR 0 10
29870: PUSH
29871: LD_VAR 0 9
29875: PPUSH
29876: LD_VAR 0 3
29880: PPUSH
29881: CALL_OW 265
29885: PPUSH
29886: LD_VAR 0 3
29890: PPUSH
29891: CALL_OW 262
29895: PPUSH
29896: LD_VAR 0 3
29900: PPUSH
29901: CALL_OW 263
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 264
29915: PPUSH
29916: CALL 48925 0 5
29920: ST_TO_ADDR
// if components then
29921: LD_VAR 0 10
29925: IFFALSE 29941
// MC_InsertProduceList ( i , components ) ;
29927: LD_VAR 0 2
29931: PPUSH
29932: LD_VAR 0 10
29936: PPUSH
29937: CALL 38675 0 2
// end ; continue ;
29941: GO 29456
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
29943: LD_VAR 0 3
29947: PPUSH
29948: LD_INT 1
29950: PPUSH
29951: CALL_OW 289
29955: PUSH
29956: LD_INT 100
29958: LESS
29959: PUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 314
29969: NOT
29970: AND
29971: IFFALSE 30000
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29973: LD_VAR 0 3
29977: PPUSH
29978: LD_VAR 0 6
29982: PUSH
29983: LD_INT 2
29985: ARRAY
29986: PPUSH
29987: LD_VAR 0 6
29991: PUSH
29992: LD_INT 3
29994: ARRAY
29995: PPUSH
29996: CALL_OW 117
// break ;
30000: GO 30004
// end ;
30002: GO 29456
30004: POP
30005: POP
// end ; end ;
30006: GO 28294
30008: POP
30009: POP
// end ;
30010: LD_VAR 0 1
30014: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
30015: LD_INT 0
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
// if not mc_bases then
30021: LD_EXP 49
30025: NOT
30026: IFFALSE 30030
// exit ;
30028: GO 30191
// for i = 1 to mc_bases do
30030: LD_ADDR_VAR 0 2
30034: PUSH
30035: DOUBLE
30036: LD_INT 1
30038: DEC
30039: ST_TO_ADDR
30040: LD_EXP 49
30044: PUSH
30045: FOR_TO
30046: IFFALSE 30189
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
30048: LD_ADDR_VAR 0 4
30052: PUSH
30053: LD_EXP 68
30057: PUSH
30058: LD_VAR 0 2
30062: ARRAY
30063: PUSH
30064: LD_EXP 71
30068: PUSH
30069: LD_VAR 0 2
30073: ARRAY
30074: UNION
30075: PPUSH
30076: LD_INT 33
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PPUSH
30086: CALL_OW 72
30090: ST_TO_ADDR
// if tmp then
30091: LD_VAR 0 4
30095: IFFALSE 30187
// for j in tmp do
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 4
30106: PUSH
30107: FOR_IN
30108: IFFALSE 30185
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
30110: LD_VAR 0 3
30114: PPUSH
30115: CALL_OW 312
30119: NOT
30120: PUSH
30121: LD_VAR 0 3
30125: PPUSH
30126: CALL_OW 256
30130: PUSH
30131: LD_INT 250
30133: GREATEREQUAL
30134: AND
30135: IFFALSE 30148
// Connect ( j ) else
30137: LD_VAR 0 3
30141: PPUSH
30142: CALL 54258 0 1
30146: GO 30183
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
30148: LD_VAR 0 3
30152: PPUSH
30153: CALL_OW 256
30157: PUSH
30158: LD_INT 250
30160: LESS
30161: PUSH
30162: LD_VAR 0 3
30166: PPUSH
30167: CALL_OW 312
30171: AND
30172: IFFALSE 30183
// ComUnlink ( j ) ;
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 136
30183: GO 30107
30185: POP
30186: POP
// end ;
30187: GO 30045
30189: POP
30190: POP
// end ;
30191: LD_VAR 0 1
30195: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
30202: PPUSH
// if not mc_bases then
30203: LD_EXP 49
30207: NOT
30208: IFFALSE 30212
// exit ;
30210: GO 30672
// for i = 1 to mc_bases do
30212: LD_ADDR_VAR 0 2
30216: PUSH
30217: DOUBLE
30218: LD_INT 1
30220: DEC
30221: ST_TO_ADDR
30222: LD_EXP 49
30226: PUSH
30227: FOR_TO
30228: IFFALSE 30670
// begin if not mc_produce [ i ] then
30230: LD_EXP 70
30234: PUSH
30235: LD_VAR 0 2
30239: ARRAY
30240: NOT
30241: IFFALSE 30245
// continue ;
30243: GO 30227
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_EXP 49
30254: PUSH
30255: LD_VAR 0 2
30259: ARRAY
30260: PPUSH
30261: LD_INT 30
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PPUSH
30271: CALL_OW 72
30275: ST_TO_ADDR
// if not fac then
30276: LD_VAR 0 5
30280: NOT
30281: IFFALSE 30285
// continue ;
30283: GO 30227
// for j in fac do
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_VAR 0 5
30294: PUSH
30295: FOR_IN
30296: IFFALSE 30666
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
30298: LD_VAR 0 3
30302: PPUSH
30303: CALL_OW 461
30307: PUSH
30308: LD_INT 2
30310: NONEQUAL
30311: PUSH
30312: LD_VAR 0 3
30316: PPUSH
30317: LD_INT 15
30319: PPUSH
30320: CALL 53918 0 2
30324: PUSH
30325: LD_INT 4
30327: ARRAY
30328: OR
30329: PUSH
30330: LD_VAR 0 3
30334: PPUSH
30335: CALL_OW 313
30339: PUSH
30340: LD_INT 0
30342: EQUAL
30343: OR
30344: IFFALSE 30348
// continue ;
30346: GO 30295
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
30348: LD_VAR 0 3
30352: PPUSH
30353: LD_EXP 70
30357: PUSH
30358: LD_VAR 0 2
30362: ARRAY
30363: PUSH
30364: LD_INT 1
30366: ARRAY
30367: PUSH
30368: LD_INT 1
30370: ARRAY
30371: PPUSH
30372: LD_EXP 70
30376: PUSH
30377: LD_VAR 0 2
30381: ARRAY
30382: PUSH
30383: LD_INT 1
30385: ARRAY
30386: PUSH
30387: LD_INT 2
30389: ARRAY
30390: PPUSH
30391: LD_EXP 70
30395: PUSH
30396: LD_VAR 0 2
30400: ARRAY
30401: PUSH
30402: LD_INT 1
30404: ARRAY
30405: PUSH
30406: LD_INT 3
30408: ARRAY
30409: PPUSH
30410: LD_EXP 70
30414: PUSH
30415: LD_VAR 0 2
30419: ARRAY
30420: PUSH
30421: LD_INT 1
30423: ARRAY
30424: PUSH
30425: LD_INT 4
30427: ARRAY
30428: PPUSH
30429: CALL_OW 448
30433: PUSH
30434: LD_VAR 0 3
30438: PPUSH
30439: LD_EXP 70
30443: PUSH
30444: LD_VAR 0 2
30448: ARRAY
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PUSH
30458: LD_EXP 70
30462: PUSH
30463: LD_VAR 0 2
30467: ARRAY
30468: PUSH
30469: LD_INT 1
30471: ARRAY
30472: PUSH
30473: LD_INT 2
30475: ARRAY
30476: PUSH
30477: LD_EXP 70
30481: PUSH
30482: LD_VAR 0 2
30486: ARRAY
30487: PUSH
30488: LD_INT 1
30490: ARRAY
30491: PUSH
30492: LD_INT 3
30494: ARRAY
30495: PUSH
30496: LD_EXP 70
30500: PUSH
30501: LD_VAR 0 2
30505: ARRAY
30506: PUSH
30507: LD_INT 1
30509: ARRAY
30510: PUSH
30511: LD_INT 4
30513: ARRAY
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: PPUSH
30521: CALL 57589 0 2
30525: AND
30526: IFFALSE 30664
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
30528: LD_VAR 0 3
30532: PPUSH
30533: LD_EXP 70
30537: PUSH
30538: LD_VAR 0 2
30542: ARRAY
30543: PUSH
30544: LD_INT 1
30546: ARRAY
30547: PUSH
30548: LD_INT 1
30550: ARRAY
30551: PPUSH
30552: LD_EXP 70
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PUSH
30567: LD_INT 2
30569: ARRAY
30570: PPUSH
30571: LD_EXP 70
30575: PUSH
30576: LD_VAR 0 2
30580: ARRAY
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PUSH
30586: LD_INT 3
30588: ARRAY
30589: PPUSH
30590: LD_EXP 70
30594: PUSH
30595: LD_VAR 0 2
30599: ARRAY
30600: PUSH
30601: LD_INT 1
30603: ARRAY
30604: PUSH
30605: LD_INT 4
30607: ARRAY
30608: PPUSH
30609: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
30613: LD_ADDR_VAR 0 4
30617: PUSH
30618: LD_EXP 70
30622: PUSH
30623: LD_VAR 0 2
30627: ARRAY
30628: PPUSH
30629: LD_INT 1
30631: PPUSH
30632: CALL_OW 3
30636: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
30637: LD_ADDR_EXP 70
30641: PUSH
30642: LD_EXP 70
30646: PPUSH
30647: LD_VAR 0 2
30651: PPUSH
30652: LD_VAR 0 4
30656: PPUSH
30657: CALL_OW 1
30661: ST_TO_ADDR
// break ;
30662: GO 30666
// end ; end ;
30664: GO 30295
30666: POP
30667: POP
// end ;
30668: GO 30227
30670: POP
30671: POP
// end ;
30672: LD_VAR 0 1
30676: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
30677: LD_INT 0
30679: PPUSH
30680: PPUSH
30681: PPUSH
// if not mc_bases then
30682: LD_EXP 49
30686: NOT
30687: IFFALSE 30691
// exit ;
30689: GO 30780
// for i = 1 to mc_bases do
30691: LD_ADDR_VAR 0 2
30695: PUSH
30696: DOUBLE
30697: LD_INT 1
30699: DEC
30700: ST_TO_ADDR
30701: LD_EXP 49
30705: PUSH
30706: FOR_TO
30707: IFFALSE 30778
// begin if mc_attack [ i ] then
30709: LD_EXP 69
30713: PUSH
30714: LD_VAR 0 2
30718: ARRAY
30719: IFFALSE 30776
// begin tmp := mc_attack [ i ] [ 1 ] ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_EXP 69
30730: PUSH
30731: LD_VAR 0 2
30735: ARRAY
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
30741: LD_ADDR_EXP 69
30745: PUSH
30746: LD_EXP 69
30750: PPUSH
30751: LD_VAR 0 2
30755: PPUSH
30756: EMPTY
30757: PPUSH
30758: CALL_OW 1
30762: ST_TO_ADDR
// Attack ( tmp ) ;
30763: LD_VAR 0 3
30767: PPUSH
30768: CALL 79778 0 1
// exit ;
30772: POP
30773: POP
30774: GO 30780
// end ; end ;
30776: GO 30706
30778: POP
30779: POP
// end ;
30780: LD_VAR 0 1
30784: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
30785: LD_INT 0
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
// if not mc_bases then
30794: LD_EXP 49
30798: NOT
30799: IFFALSE 30803
// exit ;
30801: GO 31407
// for i = 1 to mc_bases do
30803: LD_ADDR_VAR 0 2
30807: PUSH
30808: DOUBLE
30809: LD_INT 1
30811: DEC
30812: ST_TO_ADDR
30813: LD_EXP 49
30817: PUSH
30818: FOR_TO
30819: IFFALSE 31405
// begin if not mc_bases [ i ] then
30821: LD_EXP 49
30825: PUSH
30826: LD_VAR 0 2
30830: ARRAY
30831: NOT
30832: IFFALSE 30836
// continue ;
30834: GO 30818
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
30836: LD_ADDR_VAR 0 7
30840: PUSH
30841: LD_EXP 49
30845: PUSH
30846: LD_VAR 0 2
30850: ARRAY
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: PPUSH
30856: CALL 48229 0 1
30860: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
30861: LD_ADDR_EXP 72
30865: PUSH
30866: LD_EXP 72
30870: PPUSH
30871: LD_VAR 0 2
30875: PPUSH
30876: LD_EXP 49
30880: PUSH
30881: LD_VAR 0 2
30885: ARRAY
30886: PUSH
30887: LD_INT 1
30889: ARRAY
30890: PPUSH
30891: CALL_OW 255
30895: PPUSH
30896: LD_EXP 74
30900: PUSH
30901: LD_VAR 0 2
30905: ARRAY
30906: PPUSH
30907: CALL 46189 0 2
30911: PPUSH
30912: CALL_OW 1
30916: ST_TO_ADDR
// if not mc_scan [ i ] then
30917: LD_EXP 72
30921: PUSH
30922: LD_VAR 0 2
30926: ARRAY
30927: NOT
30928: IFFALSE 31083
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
30930: LD_ADDR_VAR 0 4
30934: PUSH
30935: LD_EXP 49
30939: PUSH
30940: LD_VAR 0 2
30944: ARRAY
30945: PPUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 25
30951: PUSH
30952: LD_INT 5
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 25
30961: PUSH
30962: LD_INT 8
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 25
30971: PUSH
30972: LD_INT 9
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 72
30989: ST_TO_ADDR
// if not tmp then
30990: LD_VAR 0 4
30994: NOT
30995: IFFALSE 30999
// continue ;
30997: GO 30818
// for j in tmp do
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_VAR 0 4
31008: PUSH
31009: FOR_IN
31010: IFFALSE 31081
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
31012: LD_VAR 0 3
31016: PPUSH
31017: CALL_OW 310
31021: PPUSH
31022: CALL_OW 266
31026: PUSH
31027: LD_INT 5
31029: EQUAL
31030: PUSH
31031: LD_VAR 0 3
31035: PPUSH
31036: CALL_OW 257
31040: PUSH
31041: LD_INT 1
31043: EQUAL
31044: AND
31045: PUSH
31046: LD_VAR 0 3
31050: PPUSH
31051: CALL_OW 459
31055: NOT
31056: AND
31057: PUSH
31058: LD_VAR 0 7
31062: AND
31063: IFFALSE 31079
// ComChangeProfession ( j , class ) ;
31065: LD_VAR 0 3
31069: PPUSH
31070: LD_VAR 0 7
31074: PPUSH
31075: CALL_OW 123
31079: GO 31009
31081: POP
31082: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
31083: LD_EXP 72
31087: PUSH
31088: LD_VAR 0 2
31092: ARRAY
31093: PUSH
31094: LD_EXP 71
31098: PUSH
31099: LD_VAR 0 2
31103: ARRAY
31104: NOT
31105: AND
31106: PUSH
31107: LD_EXP 49
31111: PUSH
31112: LD_VAR 0 2
31116: ARRAY
31117: PPUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 32
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 72
31132: NOT
31133: AND
31134: PUSH
31135: LD_EXP 49
31139: PUSH
31140: LD_VAR 0 2
31144: ARRAY
31145: PPUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: PPUSH
31174: CALL_OW 72
31178: NOT
31179: AND
31180: IFFALSE 31312
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31182: LD_ADDR_VAR 0 4
31186: PUSH
31187: LD_EXP 49
31191: PUSH
31192: LD_VAR 0 2
31196: ARRAY
31197: PPUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 25
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 25
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 25
31223: PUSH
31224: LD_INT 8
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 25
31233: PUSH
31234: LD_INT 9
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: PPUSH
31248: CALL_OW 72
31252: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
31253: LD_ADDR_VAR 0 4
31257: PUSH
31258: LD_VAR 0 4
31262: PUSH
31263: LD_VAR 0 4
31267: PPUSH
31268: LD_INT 18
31270: PPUSH
31271: CALL 84522 0 2
31275: DIFF
31276: ST_TO_ADDR
// if tmp then
31277: LD_VAR 0 4
31281: IFFALSE 31312
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
31283: LD_VAR 0 2
31287: PPUSH
31288: LD_VAR 0 4
31292: PPUSH
31293: LD_EXP 74
31297: PUSH
31298: LD_VAR 0 2
31302: ARRAY
31303: PPUSH
31304: CALL 46224 0 3
// exit ;
31308: POP
31309: POP
31310: GO 31407
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
31312: LD_EXP 72
31316: PUSH
31317: LD_VAR 0 2
31321: ARRAY
31322: PUSH
31323: LD_EXP 71
31327: PUSH
31328: LD_VAR 0 2
31332: ARRAY
31333: AND
31334: IFFALSE 31403
// begin tmp := mc_defender [ i ] ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_EXP 71
31345: PUSH
31346: LD_VAR 0 2
31350: ARRAY
31351: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
31352: LD_ADDR_EXP 71
31356: PUSH
31357: LD_EXP 71
31361: PPUSH
31362: LD_VAR 0 2
31366: PPUSH
31367: EMPTY
31368: PPUSH
31369: CALL_OW 1
31373: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
31374: LD_VAR 0 2
31378: PPUSH
31379: LD_VAR 0 4
31383: PPUSH
31384: LD_EXP 72
31388: PUSH
31389: LD_VAR 0 2
31393: ARRAY
31394: PPUSH
31395: CALL 46722 0 3
// exit ;
31399: POP
31400: POP
31401: GO 31407
// end ; end ;
31403: GO 30818
31405: POP
31406: POP
// end ;
31407: LD_VAR 0 1
31411: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
31412: LD_INT 0
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
31421: PPUSH
31422: PPUSH
31423: PPUSH
31424: PPUSH
// if not mc_bases then
31425: LD_EXP 49
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 32521
// for i = 1 to mc_bases do
31434: LD_ADDR_VAR 0 2
31438: PUSH
31439: DOUBLE
31440: LD_INT 1
31442: DEC
31443: ST_TO_ADDR
31444: LD_EXP 49
31448: PUSH
31449: FOR_TO
31450: IFFALSE 32519
// begin tmp := mc_lab [ i ] ;
31452: LD_ADDR_VAR 0 6
31456: PUSH
31457: LD_EXP 82
31461: PUSH
31462: LD_VAR 0 2
31466: ARRAY
31467: ST_TO_ADDR
// if not tmp then
31468: LD_VAR 0 6
31472: NOT
31473: IFFALSE 31477
// continue ;
31475: GO 31449
// idle_lab := 0 ;
31477: LD_ADDR_VAR 0 11
31481: PUSH
31482: LD_INT 0
31484: ST_TO_ADDR
// for j in tmp do
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_VAR 0 6
31494: PUSH
31495: FOR_IN
31496: IFFALSE 32515
// begin researching := false ;
31498: LD_ADDR_VAR 0 10
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// side := GetSide ( j ) ;
31506: LD_ADDR_VAR 0 4
31510: PUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 255
31520: ST_TO_ADDR
// if not mc_tech [ side ] then
31521: LD_EXP 76
31525: PUSH
31526: LD_VAR 0 4
31530: ARRAY
31531: NOT
31532: IFFALSE 31536
// continue ;
31534: GO 31495
// if BuildingStatus ( j ) = bs_idle then
31536: LD_VAR 0 3
31540: PPUSH
31541: CALL_OW 461
31545: PUSH
31546: LD_INT 2
31548: EQUAL
31549: IFFALSE 31737
// begin if idle_lab and UnitsInside ( j ) < 6 then
31551: LD_VAR 0 11
31555: PUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: CALL_OW 313
31565: PUSH
31566: LD_INT 6
31568: LESS
31569: AND
31570: IFFALSE 31641
// begin tmp2 := UnitsInside ( idle_lab ) ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_VAR 0 11
31581: PPUSH
31582: CALL_OW 313
31586: ST_TO_ADDR
// if tmp2 then
31587: LD_VAR 0 9
31591: IFFALSE 31633
// for x in tmp2 do
31593: LD_ADDR_VAR 0 7
31597: PUSH
31598: LD_VAR 0 9
31602: PUSH
31603: FOR_IN
31604: IFFALSE 31631
// begin ComExitBuilding ( x ) ;
31606: LD_VAR 0 7
31610: PPUSH
31611: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31615: LD_VAR 0 7
31619: PPUSH
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 180
// end ;
31629: GO 31603
31631: POP
31632: POP
// idle_lab := 0 ;
31633: LD_ADDR_VAR 0 11
31637: PUSH
31638: LD_INT 0
31640: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
31641: LD_ADDR_VAR 0 5
31645: PUSH
31646: LD_EXP 76
31650: PUSH
31651: LD_VAR 0 4
31655: ARRAY
31656: PUSH
31657: FOR_IN
31658: IFFALSE 31718
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
31660: LD_VAR 0 3
31664: PPUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: CALL_OW 430
31674: PUSH
31675: LD_VAR 0 4
31679: PPUSH
31680: LD_VAR 0 5
31684: PPUSH
31685: CALL 45294 0 2
31689: AND
31690: IFFALSE 31716
// begin researching := true ;
31692: LD_ADDR_VAR 0 10
31696: PUSH
31697: LD_INT 1
31699: ST_TO_ADDR
// ComResearch ( j , t ) ;
31700: LD_VAR 0 3
31704: PPUSH
31705: LD_VAR 0 5
31709: PPUSH
31710: CALL_OW 124
// break ;
31714: GO 31718
// end ;
31716: GO 31657
31718: POP
31719: POP
// if not researching then
31720: LD_VAR 0 10
31724: NOT
31725: IFFALSE 31737
// idle_lab := j ;
31727: LD_ADDR_VAR 0 11
31731: PUSH
31732: LD_VAR 0 3
31736: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
31737: LD_VAR 0 3
31741: PPUSH
31742: CALL_OW 461
31746: PUSH
31747: LD_INT 10
31749: EQUAL
31750: IFFALSE 32338
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
31752: LD_EXP 78
31756: PUSH
31757: LD_VAR 0 2
31761: ARRAY
31762: NOT
31763: PUSH
31764: LD_EXP 79
31768: PUSH
31769: LD_VAR 0 2
31773: ARRAY
31774: NOT
31775: AND
31776: PUSH
31777: LD_EXP 76
31781: PUSH
31782: LD_VAR 0 4
31786: ARRAY
31787: PUSH
31788: LD_INT 1
31790: GREATER
31791: AND
31792: IFFALSE 31923
// begin ComCancel ( j ) ;
31794: LD_VAR 0 3
31798: PPUSH
31799: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
31803: LD_ADDR_EXP 76
31807: PUSH
31808: LD_EXP 76
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: LD_EXP 76
31822: PUSH
31823: LD_VAR 0 4
31827: ARRAY
31828: PPUSH
31829: LD_EXP 76
31833: PUSH
31834: LD_VAR 0 4
31838: ARRAY
31839: PUSH
31840: LD_INT 1
31842: MINUS
31843: PPUSH
31844: LD_EXP 76
31848: PUSH
31849: LD_VAR 0 4
31853: ARRAY
31854: PPUSH
31855: LD_INT 0
31857: PPUSH
31858: CALL 50743 0 4
31862: PPUSH
31863: CALL_OW 1
31867: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
31868: LD_ADDR_EXP 76
31872: PUSH
31873: LD_EXP 76
31877: PPUSH
31878: LD_VAR 0 4
31882: PPUSH
31883: LD_EXP 76
31887: PUSH
31888: LD_VAR 0 4
31892: ARRAY
31893: PPUSH
31894: LD_EXP 76
31898: PUSH
31899: LD_VAR 0 4
31903: ARRAY
31904: PPUSH
31905: LD_INT 1
31907: PPUSH
31908: LD_INT 0
31910: PPUSH
31911: CALL 50743 0 4
31915: PPUSH
31916: CALL_OW 1
31920: ST_TO_ADDR
// continue ;
31921: GO 31495
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
31923: LD_EXP 78
31927: PUSH
31928: LD_VAR 0 2
31932: ARRAY
31933: PUSH
31934: LD_EXP 79
31938: PUSH
31939: LD_VAR 0 2
31943: ARRAY
31944: NOT
31945: AND
31946: IFFALSE 32073
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
31948: LD_ADDR_EXP 79
31952: PUSH
31953: LD_EXP 79
31957: PPUSH
31958: LD_VAR 0 2
31962: PUSH
31963: LD_EXP 79
31967: PUSH
31968: LD_VAR 0 2
31972: ARRAY
31973: PUSH
31974: LD_INT 1
31976: PLUS
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PPUSH
31982: LD_EXP 78
31986: PUSH
31987: LD_VAR 0 2
31991: ARRAY
31992: PUSH
31993: LD_INT 1
31995: ARRAY
31996: PPUSH
31997: CALL 51325 0 3
32001: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
32002: LD_EXP 78
32006: PUSH
32007: LD_VAR 0 2
32011: ARRAY
32012: PUSH
32013: LD_INT 1
32015: ARRAY
32016: PPUSH
32017: LD_INT 112
32019: PPUSH
32020: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: LD_EXP 78
32033: PUSH
32034: LD_VAR 0 2
32038: ARRAY
32039: PPUSH
32040: LD_INT 1
32042: PPUSH
32043: CALL_OW 3
32047: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
32048: LD_ADDR_EXP 78
32052: PUSH
32053: LD_EXP 78
32057: PPUSH
32058: LD_VAR 0 2
32062: PPUSH
32063: LD_VAR 0 9
32067: PPUSH
32068: CALL_OW 1
32072: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
32073: LD_EXP 78
32077: PUSH
32078: LD_VAR 0 2
32082: ARRAY
32083: PUSH
32084: LD_EXP 79
32088: PUSH
32089: LD_VAR 0 2
32093: ARRAY
32094: AND
32095: PUSH
32096: LD_EXP 79
32100: PUSH
32101: LD_VAR 0 2
32105: ARRAY
32106: PUSH
32107: LD_INT 1
32109: ARRAY
32110: PPUSH
32111: CALL_OW 310
32115: NOT
32116: AND
32117: PUSH
32118: LD_VAR 0 3
32122: PPUSH
32123: CALL_OW 313
32127: PUSH
32128: LD_INT 6
32130: EQUAL
32131: AND
32132: IFFALSE 32188
// begin tmp2 := UnitsInside ( j ) ;
32134: LD_ADDR_VAR 0 9
32138: PUSH
32139: LD_VAR 0 3
32143: PPUSH
32144: CALL_OW 313
32148: ST_TO_ADDR
// if tmp2 = 6 then
32149: LD_VAR 0 9
32153: PUSH
32154: LD_INT 6
32156: EQUAL
32157: IFFALSE 32188
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
32159: LD_VAR 0 9
32163: PUSH
32164: LD_INT 1
32166: ARRAY
32167: PPUSH
32168: LD_INT 112
32170: PPUSH
32171: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
32175: LD_VAR 0 9
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: PPUSH
32184: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
32188: LD_EXP 79
32192: PUSH
32193: LD_VAR 0 2
32197: ARRAY
32198: PUSH
32199: LD_EXP 79
32203: PUSH
32204: LD_VAR 0 2
32208: ARRAY
32209: PUSH
32210: LD_INT 1
32212: ARRAY
32213: PPUSH
32214: CALL_OW 314
32218: NOT
32219: AND
32220: PUSH
32221: LD_EXP 79
32225: PUSH
32226: LD_VAR 0 2
32230: ARRAY
32231: PUSH
32232: LD_INT 1
32234: ARRAY
32235: PPUSH
32236: CALL_OW 310
32240: NOT
32241: AND
32242: IFFALSE 32268
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
32244: LD_EXP 79
32248: PUSH
32249: LD_VAR 0 2
32253: ARRAY
32254: PUSH
32255: LD_INT 1
32257: ARRAY
32258: PPUSH
32259: LD_VAR 0 3
32263: PPUSH
32264: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
32268: LD_EXP 79
32272: PUSH
32273: LD_VAR 0 2
32277: ARRAY
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PPUSH
32283: CALL_OW 310
32287: PUSH
32288: LD_EXP 79
32292: PUSH
32293: LD_VAR 0 2
32297: ARRAY
32298: PUSH
32299: LD_INT 1
32301: ARRAY
32302: PPUSH
32303: CALL_OW 310
32307: PPUSH
32308: CALL_OW 461
32312: PUSH
32313: LD_INT 3
32315: NONEQUAL
32316: AND
32317: IFFALSE 32338
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
32319: LD_EXP 79
32323: PUSH
32324: LD_VAR 0 2
32328: ARRAY
32329: PUSH
32330: LD_INT 1
32332: ARRAY
32333: PPUSH
32334: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
32338: LD_VAR 0 3
32342: PPUSH
32343: CALL_OW 461
32347: PUSH
32348: LD_INT 6
32350: EQUAL
32351: PUSH
32352: LD_VAR 0 6
32356: PUSH
32357: LD_INT 1
32359: GREATER
32360: AND
32361: IFFALSE 32513
// begin sci := [ ] ;
32363: LD_ADDR_VAR 0 8
32367: PUSH
32368: EMPTY
32369: ST_TO_ADDR
// for x in ( tmp diff j ) do
32370: LD_ADDR_VAR 0 7
32374: PUSH
32375: LD_VAR 0 6
32379: PUSH
32380: LD_VAR 0 3
32384: DIFF
32385: PUSH
32386: FOR_IN
32387: IFFALSE 32439
// begin if sci = 6 then
32389: LD_VAR 0 8
32393: PUSH
32394: LD_INT 6
32396: EQUAL
32397: IFFALSE 32401
// break ;
32399: GO 32439
// if BuildingStatus ( x ) = bs_idle then
32401: LD_VAR 0 7
32405: PPUSH
32406: CALL_OW 461
32410: PUSH
32411: LD_INT 2
32413: EQUAL
32414: IFFALSE 32437
// sci := sci ^ UnitsInside ( x ) ;
32416: LD_ADDR_VAR 0 8
32420: PUSH
32421: LD_VAR 0 8
32425: PUSH
32426: LD_VAR 0 7
32430: PPUSH
32431: CALL_OW 313
32435: ADD
32436: ST_TO_ADDR
// end ;
32437: GO 32386
32439: POP
32440: POP
// if not sci then
32441: LD_VAR 0 8
32445: NOT
32446: IFFALSE 32450
// continue ;
32448: GO 31495
// for x in sci do
32450: LD_ADDR_VAR 0 7
32454: PUSH
32455: LD_VAR 0 8
32459: PUSH
32460: FOR_IN
32461: IFFALSE 32511
// if IsInUnit ( x ) and not HasTask ( x ) then
32463: LD_VAR 0 7
32467: PPUSH
32468: CALL_OW 310
32472: PUSH
32473: LD_VAR 0 7
32477: PPUSH
32478: CALL_OW 314
32482: NOT
32483: AND
32484: IFFALSE 32509
// begin ComExitBuilding ( x ) ;
32486: LD_VAR 0 7
32490: PPUSH
32491: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32495: LD_VAR 0 7
32499: PPUSH
32500: LD_VAR 0 3
32504: PPUSH
32505: CALL_OW 180
// end ;
32509: GO 32460
32511: POP
32512: POP
// end ; end ;
32513: GO 31495
32515: POP
32516: POP
// end ;
32517: GO 31449
32519: POP
32520: POP
// end ;
32521: LD_VAR 0 1
32525: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
32526: LD_INT 0
32528: PPUSH
32529: PPUSH
// if not mc_bases then
32530: LD_EXP 49
32534: NOT
32535: IFFALSE 32539
// exit ;
32537: GO 32620
// for i = 1 to mc_bases do
32539: LD_ADDR_VAR 0 2
32543: PUSH
32544: DOUBLE
32545: LD_INT 1
32547: DEC
32548: ST_TO_ADDR
32549: LD_EXP 49
32553: PUSH
32554: FOR_TO
32555: IFFALSE 32618
// if mc_mines [ i ] and mc_miners [ i ] then
32557: LD_EXP 62
32561: PUSH
32562: LD_VAR 0 2
32566: ARRAY
32567: PUSH
32568: LD_EXP 63
32572: PUSH
32573: LD_VAR 0 2
32577: ARRAY
32578: AND
32579: IFFALSE 32616
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
32581: LD_EXP 63
32585: PUSH
32586: LD_VAR 0 2
32590: ARRAY
32591: PUSH
32592: LD_INT 1
32594: ARRAY
32595: PPUSH
32596: CALL_OW 255
32600: PPUSH
32601: LD_EXP 62
32605: PUSH
32606: LD_VAR 0 2
32610: ARRAY
32611: PPUSH
32612: CALL 48382 0 2
32616: GO 32554
32618: POP
32619: POP
// end ;
32620: LD_VAR 0 1
32624: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
32625: LD_INT 0
32627: PPUSH
32628: PPUSH
32629: PPUSH
32630: PPUSH
32631: PPUSH
32632: PPUSH
32633: PPUSH
32634: PPUSH
// if not mc_bases or not mc_parking then
32635: LD_EXP 49
32639: NOT
32640: PUSH
32641: LD_EXP 73
32645: NOT
32646: OR
32647: IFFALSE 32651
// exit ;
32649: GO 33363
// for i = 1 to mc_bases do
32651: LD_ADDR_VAR 0 2
32655: PUSH
32656: DOUBLE
32657: LD_INT 1
32659: DEC
32660: ST_TO_ADDR
32661: LD_EXP 49
32665: PUSH
32666: FOR_TO
32667: IFFALSE 33361
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
32669: LD_EXP 49
32673: PUSH
32674: LD_VAR 0 2
32678: ARRAY
32679: NOT
32680: PUSH
32681: LD_EXP 73
32685: PUSH
32686: LD_VAR 0 2
32690: ARRAY
32691: NOT
32692: OR
32693: IFFALSE 32697
// continue ;
32695: GO 32666
// if mc_scan [ i ] then
32697: LD_EXP 72
32701: PUSH
32702: LD_VAR 0 2
32706: ARRAY
32707: IFFALSE 32733
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32709: LD_ADDR_EXP 61
32713: PUSH
32714: LD_EXP 61
32718: PPUSH
32719: LD_VAR 0 2
32723: PPUSH
32724: EMPTY
32725: PPUSH
32726: CALL_OW 1
32730: ST_TO_ADDR
// continue ;
32731: GO 32666
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_EXP 49
32742: PUSH
32743: LD_VAR 0 2
32747: ARRAY
32748: PUSH
32749: LD_INT 1
32751: ARRAY
32752: PPUSH
32753: CALL_OW 255
32757: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32758: LD_ADDR_VAR 0 6
32762: PUSH
32763: LD_EXP 49
32767: PUSH
32768: LD_VAR 0 2
32772: ARRAY
32773: PPUSH
32774: LD_INT 30
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PPUSH
32784: CALL_OW 72
32788: ST_TO_ADDR
// if not fac then
32789: LD_VAR 0 6
32793: NOT
32794: IFFALSE 32845
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32796: LD_ADDR_VAR 0 6
32800: PUSH
32801: LD_EXP 49
32805: PUSH
32806: LD_VAR 0 2
32810: ARRAY
32811: PPUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 30
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: PPUSH
32840: CALL_OW 72
32844: ST_TO_ADDR
// if not fac then
32845: LD_VAR 0 6
32849: NOT
32850: IFFALSE 32854
// continue ;
32852: GO 32666
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
32854: LD_ADDR_VAR 0 7
32858: PUSH
32859: LD_EXP 73
32863: PUSH
32864: LD_VAR 0 2
32868: ARRAY
32869: PPUSH
32870: LD_INT 22
32872: PUSH
32873: LD_VAR 0 5
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 24
32897: PUSH
32898: LD_INT 1000
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 70
32918: PUSH
32919: LD_INT 22
32921: PUSH
32922: LD_VAR 0 5
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 91
32933: PUSH
32934: LD_VAR 0 6
32938: PUSH
32939: LD_INT 1
32941: ARRAY
32942: PUSH
32943: LD_INT 25
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 21
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: LD_INT 24
32966: PUSH
32967: LD_INT 1000
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: PPUSH
32984: CALL_OW 69
32988: UNION
32989: ST_TO_ADDR
// if not vehs then
32990: LD_VAR 0 7
32994: NOT
32995: IFFALSE 33021
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32997: LD_ADDR_EXP 61
33001: PUSH
33002: LD_EXP 61
33006: PPUSH
33007: LD_VAR 0 2
33011: PPUSH
33012: EMPTY
33013: PPUSH
33014: CALL_OW 1
33018: ST_TO_ADDR
// continue ;
33019: GO 32666
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
33021: LD_ADDR_VAR 0 8
33025: PUSH
33026: LD_EXP 49
33030: PUSH
33031: LD_VAR 0 2
33035: ARRAY
33036: PPUSH
33037: LD_INT 30
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PPUSH
33047: CALL_OW 72
33051: ST_TO_ADDR
// if tmp then
33052: LD_VAR 0 8
33056: IFFALSE 33159
// begin for j in tmp do
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_VAR 0 8
33067: PUSH
33068: FOR_IN
33069: IFFALSE 33157
// for k in UnitsInside ( j ) do
33071: LD_ADDR_VAR 0 4
33075: PUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: CALL_OW 313
33085: PUSH
33086: FOR_IN
33087: IFFALSE 33153
// if k then
33089: LD_VAR 0 4
33093: IFFALSE 33151
// if not k in mc_repair_vehicle [ i ] then
33095: LD_VAR 0 4
33099: PUSH
33100: LD_EXP 61
33104: PUSH
33105: LD_VAR 0 2
33109: ARRAY
33110: IN
33111: NOT
33112: IFFALSE 33151
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
33114: LD_ADDR_EXP 61
33118: PUSH
33119: LD_EXP 61
33123: PPUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: LD_EXP 61
33133: PUSH
33134: LD_VAR 0 2
33138: ARRAY
33139: PUSH
33140: LD_VAR 0 4
33144: UNION
33145: PPUSH
33146: CALL_OW 1
33150: ST_TO_ADDR
33151: GO 33086
33153: POP
33154: POP
33155: GO 33068
33157: POP
33158: POP
// end ; if not mc_repair_vehicle [ i ] then
33159: LD_EXP 61
33163: PUSH
33164: LD_VAR 0 2
33168: ARRAY
33169: NOT
33170: IFFALSE 33174
// continue ;
33172: GO 32666
// for j in mc_repair_vehicle [ i ] do
33174: LD_ADDR_VAR 0 3
33178: PUSH
33179: LD_EXP 61
33183: PUSH
33184: LD_VAR 0 2
33188: ARRAY
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33357
// begin if GetClass ( j ) <> 3 then
33193: LD_VAR 0 3
33197: PPUSH
33198: CALL_OW 257
33202: PUSH
33203: LD_INT 3
33205: NONEQUAL
33206: IFFALSE 33247
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
33208: LD_ADDR_EXP 61
33212: PUSH
33213: LD_EXP 61
33217: PPUSH
33218: LD_VAR 0 2
33222: PPUSH
33223: LD_EXP 61
33227: PUSH
33228: LD_VAR 0 2
33232: ARRAY
33233: PUSH
33234: LD_VAR 0 3
33238: DIFF
33239: PPUSH
33240: CALL_OW 1
33244: ST_TO_ADDR
// continue ;
33245: GO 33190
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33247: LD_VAR 0 3
33251: PPUSH
33252: CALL_OW 311
33256: NOT
33257: PUSH
33258: LD_VAR 0 3
33262: PUSH
33263: LD_EXP 52
33267: PUSH
33268: LD_VAR 0 2
33272: ARRAY
33273: PUSH
33274: LD_INT 1
33276: ARRAY
33277: IN
33278: NOT
33279: AND
33280: PUSH
33281: LD_VAR 0 3
33285: PUSH
33286: LD_EXP 52
33290: PUSH
33291: LD_VAR 0 2
33295: ARRAY
33296: PUSH
33297: LD_INT 2
33299: ARRAY
33300: IN
33301: NOT
33302: AND
33303: IFFALSE 33355
// begin if IsInUnit ( j ) then
33305: LD_VAR 0 3
33309: PPUSH
33310: CALL_OW 310
33314: IFFALSE 33325
// ComExitBuilding ( j ) ;
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL_OW 122
// if not HasTask ( j ) then
33325: LD_VAR 0 3
33329: PPUSH
33330: CALL_OW 314
33334: NOT
33335: IFFALSE 33355
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
33337: LD_VAR 0 3
33341: PPUSH
33342: LD_VAR 0 7
33346: PUSH
33347: LD_INT 1
33349: ARRAY
33350: PPUSH
33351: CALL_OW 189
// end ; end ;
33355: GO 33190
33357: POP
33358: POP
// end ;
33359: GO 32666
33361: POP
33362: POP
// end ;
33363: LD_VAR 0 1
33367: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// if not mc_bases then
33381: LD_EXP 49
33385: NOT
33386: IFFALSE 33390
// exit ;
33388: GO 34192
// for i = 1 to mc_bases do
33390: LD_ADDR_VAR 0 2
33394: PUSH
33395: DOUBLE
33396: LD_INT 1
33398: DEC
33399: ST_TO_ADDR
33400: LD_EXP 49
33404: PUSH
33405: FOR_TO
33406: IFFALSE 34190
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
33408: LD_EXP 77
33412: PUSH
33413: LD_VAR 0 2
33417: ARRAY
33418: NOT
33419: PUSH
33420: LD_EXP 52
33424: PUSH
33425: LD_VAR 0 2
33429: ARRAY
33430: PUSH
33431: LD_INT 1
33433: ARRAY
33434: OR
33435: PUSH
33436: LD_EXP 52
33440: PUSH
33441: LD_VAR 0 2
33445: ARRAY
33446: PUSH
33447: LD_INT 2
33449: ARRAY
33450: OR
33451: PUSH
33452: LD_EXP 75
33456: PUSH
33457: LD_VAR 0 2
33461: ARRAY
33462: PPUSH
33463: LD_INT 1
33465: PPUSH
33466: CALL_OW 325
33470: NOT
33471: OR
33472: PUSH
33473: LD_EXP 72
33477: PUSH
33478: LD_VAR 0 2
33482: ARRAY
33483: OR
33484: IFFALSE 33488
// continue ;
33486: GO 33405
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
33488: LD_ADDR_VAR 0 8
33492: PUSH
33493: LD_EXP 49
33497: PUSH
33498: LD_VAR 0 2
33502: ARRAY
33503: PPUSH
33504: LD_INT 25
33506: PUSH
33507: LD_INT 4
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 50
33516: PUSH
33517: EMPTY
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: LD_INT 60
33525: PUSH
33526: EMPTY
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: PPUSH
33538: CALL_OW 72
33542: PUSH
33543: LD_EXP 53
33547: PUSH
33548: LD_VAR 0 2
33552: ARRAY
33553: DIFF
33554: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33555: LD_ADDR_VAR 0 9
33559: PUSH
33560: LD_EXP 49
33564: PUSH
33565: LD_VAR 0 2
33569: ARRAY
33570: PPUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 30
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 30
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: PPUSH
33599: CALL_OW 72
33603: ST_TO_ADDR
// if not tmp or not dep then
33604: LD_VAR 0 8
33608: NOT
33609: PUSH
33610: LD_VAR 0 9
33614: NOT
33615: OR
33616: IFFALSE 33620
// continue ;
33618: GO 33405
// side := GetSide ( tmp [ 1 ] ) ;
33620: LD_ADDR_VAR 0 11
33624: PUSH
33625: LD_VAR 0 8
33629: PUSH
33630: LD_INT 1
33632: ARRAY
33633: PPUSH
33634: CALL_OW 255
33638: ST_TO_ADDR
// dep := dep [ 1 ] ;
33639: LD_ADDR_VAR 0 9
33643: PUSH
33644: LD_VAR 0 9
33648: PUSH
33649: LD_INT 1
33651: ARRAY
33652: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
33653: LD_ADDR_VAR 0 7
33657: PUSH
33658: LD_EXP 77
33662: PUSH
33663: LD_VAR 0 2
33667: ARRAY
33668: PPUSH
33669: LD_INT 22
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 25
33681: PUSH
33682: LD_INT 12
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PPUSH
33693: CALL_OW 70
33697: PUSH
33698: LD_INT 22
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 25
33710: PUSH
33711: LD_INT 12
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 91
33720: PUSH
33721: LD_VAR 0 9
33725: PUSH
33726: LD_INT 20
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: PPUSH
33739: CALL_OW 69
33743: UNION
33744: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
33745: LD_ADDR_VAR 0 10
33749: PUSH
33750: LD_EXP 77
33754: PUSH
33755: LD_VAR 0 2
33759: ARRAY
33760: PPUSH
33761: LD_INT 81
33763: PUSH
33764: LD_VAR 0 11
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PPUSH
33773: CALL_OW 70
33777: ST_TO_ADDR
// if not apes or danger_at_area then
33778: LD_VAR 0 7
33782: NOT
33783: PUSH
33784: LD_VAR 0 10
33788: OR
33789: IFFALSE 33839
// begin if mc_taming [ i ] then
33791: LD_EXP 80
33795: PUSH
33796: LD_VAR 0 2
33800: ARRAY
33801: IFFALSE 33837
// begin MC_Reset ( i , 121 ) ;
33803: LD_VAR 0 2
33807: PPUSH
33808: LD_INT 121
33810: PPUSH
33811: CALL 19797 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33815: LD_ADDR_EXP 80
33819: PUSH
33820: LD_EXP 80
33824: PPUSH
33825: LD_VAR 0 2
33829: PPUSH
33830: EMPTY
33831: PPUSH
33832: CALL_OW 1
33836: ST_TO_ADDR
// end ; continue ;
33837: GO 33405
// end ; for j in tmp do
33839: LD_ADDR_VAR 0 3
33843: PUSH
33844: LD_VAR 0 8
33848: PUSH
33849: FOR_IN
33850: IFFALSE 34186
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
33852: LD_VAR 0 3
33856: PUSH
33857: LD_EXP 80
33861: PUSH
33862: LD_VAR 0 2
33866: ARRAY
33867: IN
33868: NOT
33869: PUSH
33870: LD_EXP 80
33874: PUSH
33875: LD_VAR 0 2
33879: ARRAY
33880: PUSH
33881: LD_INT 3
33883: LESS
33884: AND
33885: IFFALSE 33943
// begin SetTag ( j , 121 ) ;
33887: LD_VAR 0 3
33891: PPUSH
33892: LD_INT 121
33894: PPUSH
33895: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
33899: LD_ADDR_EXP 80
33903: PUSH
33904: LD_EXP 80
33908: PPUSH
33909: LD_VAR 0 2
33913: PUSH
33914: LD_EXP 80
33918: PUSH
33919: LD_VAR 0 2
33923: ARRAY
33924: PUSH
33925: LD_INT 1
33927: PLUS
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PPUSH
33933: LD_VAR 0 3
33937: PPUSH
33938: CALL 51325 0 3
33942: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
33943: LD_VAR 0 3
33947: PUSH
33948: LD_EXP 80
33952: PUSH
33953: LD_VAR 0 2
33957: ARRAY
33958: IN
33959: IFFALSE 34184
// begin if GetClass ( j ) <> 4 then
33961: LD_VAR 0 3
33965: PPUSH
33966: CALL_OW 257
33970: PUSH
33971: LD_INT 4
33973: NONEQUAL
33974: IFFALSE 34027
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
33976: LD_ADDR_EXP 80
33980: PUSH
33981: LD_EXP 80
33985: PPUSH
33986: LD_VAR 0 2
33990: PPUSH
33991: LD_EXP 80
33995: PUSH
33996: LD_VAR 0 2
34000: ARRAY
34001: PUSH
34002: LD_VAR 0 3
34006: DIFF
34007: PPUSH
34008: CALL_OW 1
34012: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34013: LD_VAR 0 3
34017: PPUSH
34018: LD_INT 0
34020: PPUSH
34021: CALL_OW 109
// continue ;
34025: GO 33849
// end ; if IsInUnit ( j ) then
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 310
34036: IFFALSE 34047
// ComExitBuilding ( j ) ;
34038: LD_VAR 0 3
34042: PPUSH
34043: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
34047: LD_ADDR_VAR 0 6
34051: PUSH
34052: LD_VAR 0 7
34056: PPUSH
34057: LD_VAR 0 3
34061: PPUSH
34062: CALL_OW 74
34066: ST_TO_ADDR
// if not ape then
34067: LD_VAR 0 6
34071: NOT
34072: IFFALSE 34076
// break ;
34074: GO 34186
// x := GetX ( ape ) ;
34076: LD_ADDR_VAR 0 4
34080: PUSH
34081: LD_VAR 0 6
34085: PPUSH
34086: CALL_OW 250
34090: ST_TO_ADDR
// y := GetY ( ape ) ;
34091: LD_ADDR_VAR 0 5
34095: PUSH
34096: LD_VAR 0 6
34100: PPUSH
34101: CALL_OW 251
34105: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34106: LD_VAR 0 4
34110: PPUSH
34111: LD_VAR 0 5
34115: PPUSH
34116: CALL_OW 488
34120: NOT
34121: PUSH
34122: LD_VAR 0 11
34126: PPUSH
34127: LD_VAR 0 4
34131: PPUSH
34132: LD_VAR 0 5
34136: PPUSH
34137: LD_INT 20
34139: PPUSH
34140: CALL 52221 0 4
34144: PUSH
34145: LD_INT 4
34147: ARRAY
34148: OR
34149: IFFALSE 34153
// break ;
34151: GO 34186
// if not HasTask ( j ) then
34153: LD_VAR 0 3
34157: PPUSH
34158: CALL_OW 314
34162: NOT
34163: IFFALSE 34184
// ComTameXY ( j , x , y ) ;
34165: LD_VAR 0 3
34169: PPUSH
34170: LD_VAR 0 4
34174: PPUSH
34175: LD_VAR 0 5
34179: PPUSH
34180: CALL_OW 131
// end ; end ;
34184: GO 33849
34186: POP
34187: POP
// end ;
34188: GO 33405
34190: POP
34191: POP
// end ;
34192: LD_VAR 0 1
34196: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
// if not mc_bases then
34207: LD_EXP 49
34211: NOT
34212: IFFALSE 34216
// exit ;
34214: GO 34842
// for i = 1 to mc_bases do
34216: LD_ADDR_VAR 0 2
34220: PUSH
34221: DOUBLE
34222: LD_INT 1
34224: DEC
34225: ST_TO_ADDR
34226: LD_EXP 49
34230: PUSH
34231: FOR_TO
34232: IFFALSE 34840
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
34234: LD_EXP 78
34238: PUSH
34239: LD_VAR 0 2
34243: ARRAY
34244: NOT
34245: PUSH
34246: LD_EXP 78
34250: PUSH
34251: LD_VAR 0 2
34255: ARRAY
34256: PPUSH
34257: LD_INT 25
34259: PUSH
34260: LD_INT 12
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PPUSH
34267: CALL_OW 72
34271: NOT
34272: OR
34273: IFFALSE 34277
// continue ;
34275: GO 34231
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
34277: LD_ADDR_VAR 0 5
34281: PUSH
34282: LD_EXP 78
34286: PUSH
34287: LD_VAR 0 2
34291: ARRAY
34292: PUSH
34293: LD_INT 1
34295: ARRAY
34296: PPUSH
34297: CALL_OW 255
34301: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
34302: LD_VAR 0 5
34306: PPUSH
34307: LD_INT 2
34309: PPUSH
34310: CALL_OW 325
34314: IFFALSE 34567
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34316: LD_ADDR_VAR 0 4
34320: PUSH
34321: LD_EXP 78
34325: PUSH
34326: LD_VAR 0 2
34330: ARRAY
34331: PPUSH
34332: LD_INT 25
34334: PUSH
34335: LD_INT 16
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PPUSH
34342: CALL_OW 72
34346: ST_TO_ADDR
// if tmp < 6 then
34347: LD_VAR 0 4
34351: PUSH
34352: LD_INT 6
34354: LESS
34355: IFFALSE 34567
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34357: LD_ADDR_VAR 0 6
34361: PUSH
34362: LD_EXP 49
34366: PUSH
34367: LD_VAR 0 2
34371: ARRAY
34372: PPUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 30
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 30
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: PPUSH
34401: CALL_OW 72
34405: ST_TO_ADDR
// if depot then
34406: LD_VAR 0 6
34410: IFFALSE 34567
// begin selected := 0 ;
34412: LD_ADDR_VAR 0 7
34416: PUSH
34417: LD_INT 0
34419: ST_TO_ADDR
// for j in depot do
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_VAR 0 6
34429: PUSH
34430: FOR_IN
34431: IFFALSE 34462
// begin if UnitsInside ( j ) < 6 then
34433: LD_VAR 0 3
34437: PPUSH
34438: CALL_OW 313
34442: PUSH
34443: LD_INT 6
34445: LESS
34446: IFFALSE 34460
// begin selected := j ;
34448: LD_ADDR_VAR 0 7
34452: PUSH
34453: LD_VAR 0 3
34457: ST_TO_ADDR
// break ;
34458: GO 34462
// end ; end ;
34460: GO 34430
34462: POP
34463: POP
// if selected then
34464: LD_VAR 0 7
34468: IFFALSE 34567
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34470: LD_ADDR_VAR 0 3
34474: PUSH
34475: LD_EXP 78
34479: PUSH
34480: LD_VAR 0 2
34484: ARRAY
34485: PPUSH
34486: LD_INT 25
34488: PUSH
34489: LD_INT 12
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 72
34500: PUSH
34501: FOR_IN
34502: IFFALSE 34565
// if not HasTask ( j ) then
34504: LD_VAR 0 3
34508: PPUSH
34509: CALL_OW 314
34513: NOT
34514: IFFALSE 34563
// begin if not IsInUnit ( j ) then
34516: LD_VAR 0 3
34520: PPUSH
34521: CALL_OW 310
34525: NOT
34526: IFFALSE 34542
// ComEnterUnit ( j , selected ) ;
34528: LD_VAR 0 3
34532: PPUSH
34533: LD_VAR 0 7
34537: PPUSH
34538: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
34542: LD_VAR 0 3
34546: PPUSH
34547: LD_INT 16
34549: PPUSH
34550: CALL_OW 183
// AddComExitBuilding ( j ) ;
34554: LD_VAR 0 3
34558: PPUSH
34559: CALL_OW 182
// end ;
34563: GO 34501
34565: POP
34566: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
34567: LD_VAR 0 5
34571: PPUSH
34572: LD_INT 11
34574: PPUSH
34575: CALL_OW 325
34579: IFFALSE 34838
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34581: LD_ADDR_VAR 0 4
34585: PUSH
34586: LD_EXP 78
34590: PUSH
34591: LD_VAR 0 2
34595: ARRAY
34596: PPUSH
34597: LD_INT 25
34599: PUSH
34600: LD_INT 16
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PPUSH
34607: CALL_OW 72
34611: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
34612: LD_VAR 0 4
34616: PUSH
34617: LD_INT 6
34619: GREATEREQUAL
34620: PUSH
34621: LD_VAR 0 5
34625: PPUSH
34626: LD_INT 2
34628: PPUSH
34629: CALL_OW 325
34633: NOT
34634: OR
34635: IFFALSE 34838
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
34637: LD_ADDR_VAR 0 8
34641: PUSH
34642: LD_EXP 49
34646: PUSH
34647: LD_VAR 0 2
34651: ARRAY
34652: PPUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 30
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: PPUSH
34681: CALL_OW 72
34685: ST_TO_ADDR
// if barracks then
34686: LD_VAR 0 8
34690: IFFALSE 34838
// begin selected := 0 ;
34692: LD_ADDR_VAR 0 7
34696: PUSH
34697: LD_INT 0
34699: ST_TO_ADDR
// for j in barracks do
34700: LD_ADDR_VAR 0 3
34704: PUSH
34705: LD_VAR 0 8
34709: PUSH
34710: FOR_IN
34711: IFFALSE 34742
// begin if UnitsInside ( j ) < 6 then
34713: LD_VAR 0 3
34717: PPUSH
34718: CALL_OW 313
34722: PUSH
34723: LD_INT 6
34725: LESS
34726: IFFALSE 34740
// begin selected := j ;
34728: LD_ADDR_VAR 0 7
34732: PUSH
34733: LD_VAR 0 3
34737: ST_TO_ADDR
// break ;
34738: GO 34742
// end ; end ;
34740: GO 34710
34742: POP
34743: POP
// if selected then
34744: LD_VAR 0 7
34748: IFFALSE 34838
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34750: LD_ADDR_VAR 0 3
34754: PUSH
34755: LD_EXP 78
34759: PUSH
34760: LD_VAR 0 2
34764: ARRAY
34765: PPUSH
34766: LD_INT 25
34768: PUSH
34769: LD_INT 12
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PPUSH
34776: CALL_OW 72
34780: PUSH
34781: FOR_IN
34782: IFFALSE 34836
// if not IsInUnit ( j ) and not HasTask ( j ) then
34784: LD_VAR 0 3
34788: PPUSH
34789: CALL_OW 310
34793: NOT
34794: PUSH
34795: LD_VAR 0 3
34799: PPUSH
34800: CALL_OW 314
34804: NOT
34805: AND
34806: IFFALSE 34834
// begin ComEnterUnit ( j , selected ) ;
34808: LD_VAR 0 3
34812: PPUSH
34813: LD_VAR 0 7
34817: PPUSH
34818: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
34822: LD_VAR 0 3
34826: PPUSH
34827: LD_INT 15
34829: PPUSH
34830: CALL_OW 183
// end ;
34834: GO 34781
34836: POP
34837: POP
// end ; end ; end ; end ; end ;
34838: GO 34231
34840: POP
34841: POP
// end ;
34842: LD_VAR 0 1
34846: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
34847: LD_INT 0
34849: PPUSH
34850: PPUSH
34851: PPUSH
34852: PPUSH
// if not mc_bases then
34853: LD_EXP 49
34857: NOT
34858: IFFALSE 34862
// exit ;
34860: GO 35040
// for i = 1 to mc_bases do
34862: LD_ADDR_VAR 0 2
34866: PUSH
34867: DOUBLE
34868: LD_INT 1
34870: DEC
34871: ST_TO_ADDR
34872: LD_EXP 49
34876: PUSH
34877: FOR_TO
34878: IFFALSE 35038
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
34880: LD_ADDR_VAR 0 4
34884: PUSH
34885: LD_EXP 49
34889: PUSH
34890: LD_VAR 0 2
34894: ARRAY
34895: PPUSH
34896: LD_INT 25
34898: PUSH
34899: LD_INT 9
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PPUSH
34906: CALL_OW 72
34910: ST_TO_ADDR
// if not tmp then
34911: LD_VAR 0 4
34915: NOT
34916: IFFALSE 34920
// continue ;
34918: GO 34877
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
34920: LD_EXP 75
34924: PUSH
34925: LD_VAR 0 2
34929: ARRAY
34930: PPUSH
34931: LD_INT 29
34933: PPUSH
34934: CALL_OW 325
34938: NOT
34939: PUSH
34940: LD_EXP 75
34944: PUSH
34945: LD_VAR 0 2
34949: ARRAY
34950: PPUSH
34951: LD_INT 28
34953: PPUSH
34954: CALL_OW 325
34958: NOT
34959: AND
34960: IFFALSE 34964
// continue ;
34962: GO 34877
// for j in tmp do
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_VAR 0 4
34973: PUSH
34974: FOR_IN
34975: IFFALSE 35034
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34977: LD_VAR 0 3
34981: PUSH
34982: LD_EXP 52
34986: PUSH
34987: LD_VAR 0 2
34991: ARRAY
34992: PUSH
34993: LD_INT 1
34995: ARRAY
34996: IN
34997: NOT
34998: PUSH
34999: LD_VAR 0 3
35003: PUSH
35004: LD_EXP 52
35008: PUSH
35009: LD_VAR 0 2
35013: ARRAY
35014: PUSH
35015: LD_INT 2
35017: ARRAY
35018: IN
35019: NOT
35020: AND
35021: IFFALSE 35032
// ComSpaceTimeShoot ( j ) ;
35023: LD_VAR 0 3
35027: PPUSH
35028: CALL 45385 0 1
35032: GO 34974
35034: POP
35035: POP
// end ;
35036: GO 34877
35038: POP
35039: POP
// end ;
35040: LD_VAR 0 1
35044: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
35045: LD_INT 0
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
// if not mc_bases then
35056: LD_EXP 49
35060: NOT
35061: IFFALSE 35065
// exit ;
35063: GO 35687
// for i = 1 to mc_bases do
35065: LD_ADDR_VAR 0 2
35069: PUSH
35070: DOUBLE
35071: LD_INT 1
35073: DEC
35074: ST_TO_ADDR
35075: LD_EXP 49
35079: PUSH
35080: FOR_TO
35081: IFFALSE 35685
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
35083: LD_EXP 84
35087: PUSH
35088: LD_VAR 0 2
35092: ARRAY
35093: NOT
35094: PUSH
35095: LD_INT 38
35097: PPUSH
35098: LD_EXP 75
35102: PUSH
35103: LD_VAR 0 2
35107: ARRAY
35108: PPUSH
35109: CALL_OW 321
35113: PUSH
35114: LD_INT 2
35116: NONEQUAL
35117: OR
35118: IFFALSE 35122
// continue ;
35120: GO 35080
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
35122: LD_ADDR_VAR 0 8
35126: PUSH
35127: LD_EXP 49
35131: PUSH
35132: LD_VAR 0 2
35136: ARRAY
35137: PPUSH
35138: LD_INT 30
35140: PUSH
35141: LD_INT 34
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PPUSH
35148: CALL_OW 72
35152: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_EXP 49
35162: PUSH
35163: LD_VAR 0 2
35167: ARRAY
35168: PPUSH
35169: LD_INT 25
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PPUSH
35179: CALL_OW 72
35183: PPUSH
35184: LD_INT 0
35186: PPUSH
35187: CALL 84522 0 2
35191: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
35192: LD_VAR 0 9
35196: NOT
35197: PUSH
35198: LD_VAR 0 8
35202: NOT
35203: OR
35204: PUSH
35205: LD_EXP 49
35209: PUSH
35210: LD_VAR 0 2
35214: ARRAY
35215: PPUSH
35216: LD_INT 124
35218: PPUSH
35219: CALL 84522 0 2
35223: OR
35224: IFFALSE 35228
// continue ;
35226: GO 35080
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
35228: LD_EXP 85
35232: PUSH
35233: LD_VAR 0 2
35237: ARRAY
35238: PUSH
35239: LD_EXP 84
35243: PUSH
35244: LD_VAR 0 2
35248: ARRAY
35249: LESS
35250: PUSH
35251: LD_EXP 85
35255: PUSH
35256: LD_VAR 0 2
35260: ARRAY
35261: PUSH
35262: LD_VAR 0 8
35266: LESS
35267: AND
35268: IFFALSE 35683
// begin tmp := sci [ 1 ] ;
35270: LD_ADDR_VAR 0 7
35274: PUSH
35275: LD_VAR 0 9
35279: PUSH
35280: LD_INT 1
35282: ARRAY
35283: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
35284: LD_VAR 0 7
35288: PPUSH
35289: LD_INT 124
35291: PPUSH
35292: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: DOUBLE
35302: LD_EXP 84
35306: PUSH
35307: LD_VAR 0 2
35311: ARRAY
35312: INC
35313: ST_TO_ADDR
35314: LD_EXP 84
35318: PUSH
35319: LD_VAR 0 2
35323: ARRAY
35324: PUSH
35325: FOR_DOWNTO
35326: IFFALSE 35669
// begin if IsInUnit ( tmp ) then
35328: LD_VAR 0 7
35332: PPUSH
35333: CALL_OW 310
35337: IFFALSE 35348
// ComExitBuilding ( tmp ) ;
35339: LD_VAR 0 7
35343: PPUSH
35344: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
35348: LD_INT 35
35350: PPUSH
35351: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
35355: LD_VAR 0 7
35359: PPUSH
35360: CALL_OW 310
35364: NOT
35365: PUSH
35366: LD_VAR 0 7
35370: PPUSH
35371: CALL_OW 314
35375: NOT
35376: AND
35377: IFFALSE 35348
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
35379: LD_ADDR_VAR 0 6
35383: PUSH
35384: LD_VAR 0 7
35388: PPUSH
35389: CALL_OW 250
35393: PUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: CALL_OW 251
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35408: LD_INT 35
35410: PPUSH
35411: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
35415: LD_ADDR_VAR 0 4
35419: PUSH
35420: LD_EXP 84
35424: PUSH
35425: LD_VAR 0 2
35429: ARRAY
35430: PUSH
35431: LD_VAR 0 3
35435: ARRAY
35436: PUSH
35437: LD_INT 1
35439: ARRAY
35440: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
35441: LD_ADDR_VAR 0 5
35445: PUSH
35446: LD_EXP 84
35450: PUSH
35451: LD_VAR 0 2
35455: ARRAY
35456: PUSH
35457: LD_VAR 0 3
35461: ARRAY
35462: PUSH
35463: LD_INT 2
35465: ARRAY
35466: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
35467: LD_VAR 0 7
35471: PPUSH
35472: LD_INT 10
35474: PPUSH
35475: CALL 53918 0 2
35479: PUSH
35480: LD_INT 4
35482: ARRAY
35483: IFFALSE 35521
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
35485: LD_VAR 0 7
35489: PPUSH
35490: LD_VAR 0 6
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: LD_VAR 0 6
35503: PUSH
35504: LD_INT 2
35506: ARRAY
35507: PPUSH
35508: CALL_OW 111
// wait ( 0 0$10 ) ;
35512: LD_INT 350
35514: PPUSH
35515: CALL_OW 67
// end else
35519: GO 35547
// begin ComMoveXY ( tmp , x , y ) ;
35521: LD_VAR 0 7
35525: PPUSH
35526: LD_VAR 0 4
35530: PPUSH
35531: LD_VAR 0 5
35535: PPUSH
35536: CALL_OW 111
// wait ( 0 0$3 ) ;
35540: LD_INT 105
35542: PPUSH
35543: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
35547: LD_VAR 0 7
35551: PPUSH
35552: LD_VAR 0 4
35556: PPUSH
35557: LD_VAR 0 5
35561: PPUSH
35562: CALL_OW 307
35566: IFFALSE 35408
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
35568: LD_VAR 0 7
35572: PPUSH
35573: LD_VAR 0 4
35577: PPUSH
35578: LD_VAR 0 5
35582: PPUSH
35583: LD_VAR 0 8
35587: PUSH
35588: LD_VAR 0 3
35592: ARRAY
35593: PPUSH
35594: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
35598: LD_INT 35
35600: PPUSH
35601: CALL_OW 67
// until not HasTask ( tmp ) ;
35605: LD_VAR 0 7
35609: PPUSH
35610: CALL_OW 314
35614: NOT
35615: IFFALSE 35598
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
35617: LD_ADDR_EXP 85
35621: PUSH
35622: LD_EXP 85
35626: PPUSH
35627: LD_VAR 0 2
35631: PUSH
35632: LD_EXP 85
35636: PUSH
35637: LD_VAR 0 2
35641: ARRAY
35642: PUSH
35643: LD_INT 1
35645: PLUS
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PPUSH
35651: LD_VAR 0 8
35655: PUSH
35656: LD_VAR 0 3
35660: ARRAY
35661: PPUSH
35662: CALL 51325 0 3
35666: ST_TO_ADDR
// end ;
35667: GO 35325
35669: POP
35670: POP
// MC_Reset ( i , 124 ) ;
35671: LD_VAR 0 2
35675: PPUSH
35676: LD_INT 124
35678: PPUSH
35679: CALL 19797 0 2
// end ; end ;
35683: GO 35080
35685: POP
35686: POP
// end ;
35687: LD_VAR 0 1
35691: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
35696: PPUSH
// if not mc_bases then
35697: LD_EXP 49
35701: NOT
35702: IFFALSE 35706
// exit ;
35704: GO 36312
// for i = 1 to mc_bases do
35706: LD_ADDR_VAR 0 2
35710: PUSH
35711: DOUBLE
35712: LD_INT 1
35714: DEC
35715: ST_TO_ADDR
35716: LD_EXP 49
35720: PUSH
35721: FOR_TO
35722: IFFALSE 36310
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
35724: LD_ADDR_VAR 0 3
35728: PUSH
35729: LD_EXP 49
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: PPUSH
35740: LD_INT 25
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PPUSH
35750: CALL_OW 72
35754: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35755: LD_VAR 0 3
35759: NOT
35760: PUSH
35761: LD_EXP 86
35765: PUSH
35766: LD_VAR 0 2
35770: ARRAY
35771: NOT
35772: OR
35773: PUSH
35774: LD_EXP 49
35778: PUSH
35779: LD_VAR 0 2
35783: ARRAY
35784: PPUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 72
35817: NOT
35818: OR
35819: IFFALSE 35869
// begin if mc_deposits_finder [ i ] then
35821: LD_EXP 87
35825: PUSH
35826: LD_VAR 0 2
35830: ARRAY
35831: IFFALSE 35867
// begin MC_Reset ( i , 125 ) ;
35833: LD_VAR 0 2
35837: PPUSH
35838: LD_INT 125
35840: PPUSH
35841: CALL 19797 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35845: LD_ADDR_EXP 87
35849: PUSH
35850: LD_EXP 87
35854: PPUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: EMPTY
35861: PPUSH
35862: CALL_OW 1
35866: ST_TO_ADDR
// end ; continue ;
35867: GO 35721
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
35869: LD_EXP 86
35873: PUSH
35874: LD_VAR 0 2
35878: ARRAY
35879: PUSH
35880: LD_INT 1
35882: ARRAY
35883: PUSH
35884: LD_INT 3
35886: ARRAY
35887: PUSH
35888: LD_INT 1
35890: EQUAL
35891: PUSH
35892: LD_INT 20
35894: PPUSH
35895: LD_EXP 75
35899: PUSH
35900: LD_VAR 0 2
35904: ARRAY
35905: PPUSH
35906: CALL_OW 321
35910: PUSH
35911: LD_INT 2
35913: NONEQUAL
35914: AND
35915: IFFALSE 35965
// begin if mc_deposits_finder [ i ] then
35917: LD_EXP 87
35921: PUSH
35922: LD_VAR 0 2
35926: ARRAY
35927: IFFALSE 35963
// begin MC_Reset ( i , 125 ) ;
35929: LD_VAR 0 2
35933: PPUSH
35934: LD_INT 125
35936: PPUSH
35937: CALL 19797 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35941: LD_ADDR_EXP 87
35945: PUSH
35946: LD_EXP 87
35950: PPUSH
35951: LD_VAR 0 2
35955: PPUSH
35956: EMPTY
35957: PPUSH
35958: CALL_OW 1
35962: ST_TO_ADDR
// end ; continue ;
35963: GO 35721
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
35965: LD_EXP 86
35969: PUSH
35970: LD_VAR 0 2
35974: ARRAY
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: PPUSH
35984: LD_EXP 86
35988: PUSH
35989: LD_VAR 0 2
35993: ARRAY
35994: PUSH
35995: LD_INT 1
35997: ARRAY
35998: PUSH
35999: LD_INT 2
36001: ARRAY
36002: PPUSH
36003: LD_EXP 75
36007: PUSH
36008: LD_VAR 0 2
36012: ARRAY
36013: PPUSH
36014: CALL_OW 440
36018: IFFALSE 36061
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
36020: LD_ADDR_EXP 86
36024: PUSH
36025: LD_EXP 86
36029: PPUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_EXP 86
36039: PUSH
36040: LD_VAR 0 2
36044: ARRAY
36045: PPUSH
36046: LD_INT 1
36048: PPUSH
36049: CALL_OW 3
36053: PPUSH
36054: CALL_OW 1
36058: ST_TO_ADDR
36059: GO 36308
// begin if not mc_deposits_finder [ i ] then
36061: LD_EXP 87
36065: PUSH
36066: LD_VAR 0 2
36070: ARRAY
36071: NOT
36072: IFFALSE 36124
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
36074: LD_ADDR_EXP 87
36078: PUSH
36079: LD_EXP 87
36083: PPUSH
36084: LD_VAR 0 2
36088: PPUSH
36089: LD_VAR 0 3
36093: PUSH
36094: LD_INT 1
36096: ARRAY
36097: PUSH
36098: EMPTY
36099: LIST
36100: PPUSH
36101: CALL_OW 1
36105: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
36106: LD_VAR 0 3
36110: PUSH
36111: LD_INT 1
36113: ARRAY
36114: PPUSH
36115: LD_INT 125
36117: PPUSH
36118: CALL_OW 109
// end else
36122: GO 36308
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
36124: LD_EXP 87
36128: PUSH
36129: LD_VAR 0 2
36133: ARRAY
36134: PUSH
36135: LD_INT 1
36137: ARRAY
36138: PPUSH
36139: CALL_OW 310
36143: IFFALSE 36166
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
36145: LD_EXP 87
36149: PUSH
36150: LD_VAR 0 2
36154: ARRAY
36155: PUSH
36156: LD_INT 1
36158: ARRAY
36159: PPUSH
36160: CALL_OW 122
36164: GO 36308
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
36166: LD_EXP 87
36170: PUSH
36171: LD_VAR 0 2
36175: ARRAY
36176: PUSH
36177: LD_INT 1
36179: ARRAY
36180: PPUSH
36181: CALL_OW 314
36185: NOT
36186: PUSH
36187: LD_EXP 87
36191: PUSH
36192: LD_VAR 0 2
36196: ARRAY
36197: PUSH
36198: LD_INT 1
36200: ARRAY
36201: PPUSH
36202: LD_EXP 86
36206: PUSH
36207: LD_VAR 0 2
36211: ARRAY
36212: PUSH
36213: LD_INT 1
36215: ARRAY
36216: PUSH
36217: LD_INT 1
36219: ARRAY
36220: PPUSH
36221: LD_EXP 86
36225: PUSH
36226: LD_VAR 0 2
36230: ARRAY
36231: PUSH
36232: LD_INT 1
36234: ARRAY
36235: PUSH
36236: LD_INT 2
36238: ARRAY
36239: PPUSH
36240: CALL_OW 297
36244: PUSH
36245: LD_INT 6
36247: GREATER
36248: AND
36249: IFFALSE 36308
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
36251: LD_EXP 87
36255: PUSH
36256: LD_VAR 0 2
36260: ARRAY
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: PPUSH
36266: LD_EXP 86
36270: PUSH
36271: LD_VAR 0 2
36275: ARRAY
36276: PUSH
36277: LD_INT 1
36279: ARRAY
36280: PUSH
36281: LD_INT 1
36283: ARRAY
36284: PPUSH
36285: LD_EXP 86
36289: PUSH
36290: LD_VAR 0 2
36294: ARRAY
36295: PUSH
36296: LD_INT 1
36298: ARRAY
36299: PUSH
36300: LD_INT 2
36302: ARRAY
36303: PPUSH
36304: CALL_OW 111
// end ; end ; end ;
36308: GO 35721
36310: POP
36311: POP
// end ;
36312: LD_VAR 0 1
36316: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
// if not mc_bases then
36330: LD_EXP 49
36334: NOT
36335: IFFALSE 36339
// exit ;
36337: GO 37063
// for i = 1 to mc_bases do
36339: LD_ADDR_VAR 0 2
36343: PUSH
36344: DOUBLE
36345: LD_INT 1
36347: DEC
36348: ST_TO_ADDR
36349: LD_EXP 49
36353: PUSH
36354: FOR_TO
36355: IFFALSE 37061
// begin if not mc_bases [ i ] then
36357: LD_EXP 49
36361: PUSH
36362: LD_VAR 0 2
36366: ARRAY
36367: NOT
36368: IFFALSE 36372
// continue ;
36370: GO 36354
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
36372: LD_ADDR_VAR 0 7
36376: PUSH
36377: LD_EXP 49
36381: PUSH
36382: LD_VAR 0 2
36386: ARRAY
36387: PUSH
36388: LD_INT 1
36390: ARRAY
36391: PPUSH
36392: CALL_OW 248
36396: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
36397: LD_VAR 0 7
36401: PUSH
36402: LD_INT 3
36404: EQUAL
36405: PUSH
36406: LD_EXP 68
36410: PUSH
36411: LD_VAR 0 2
36415: ARRAY
36416: PUSH
36417: LD_EXP 71
36421: PUSH
36422: LD_VAR 0 2
36426: ARRAY
36427: UNION
36428: PPUSH
36429: LD_INT 33
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PPUSH
36439: CALL_OW 72
36443: NOT
36444: OR
36445: IFFALSE 36449
// continue ;
36447: GO 36354
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
36449: LD_ADDR_VAR 0 9
36453: PUSH
36454: LD_EXP 49
36458: PUSH
36459: LD_VAR 0 2
36463: ARRAY
36464: PPUSH
36465: LD_INT 30
36467: PUSH
36468: LD_INT 36
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PPUSH
36475: CALL_OW 72
36479: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
36480: LD_ADDR_VAR 0 10
36484: PUSH
36485: LD_EXP 68
36489: PUSH
36490: LD_VAR 0 2
36494: ARRAY
36495: PPUSH
36496: LD_INT 34
36498: PUSH
36499: LD_INT 31
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PPUSH
36506: CALL_OW 72
36510: ST_TO_ADDR
// if not cts and not mcts then
36511: LD_VAR 0 9
36515: NOT
36516: PUSH
36517: LD_VAR 0 10
36521: NOT
36522: AND
36523: IFFALSE 36527
// continue ;
36525: GO 36354
// x := cts ;
36527: LD_ADDR_VAR 0 11
36531: PUSH
36532: LD_VAR 0 9
36536: ST_TO_ADDR
// if not x then
36537: LD_VAR 0 11
36541: NOT
36542: IFFALSE 36554
// x := mcts ;
36544: LD_ADDR_VAR 0 11
36548: PUSH
36549: LD_VAR 0 10
36553: ST_TO_ADDR
// if mc_remote_driver [ i ] then
36554: LD_EXP 89
36558: PUSH
36559: LD_VAR 0 2
36563: ARRAY
36564: IFFALSE 36833
// for j in mc_remote_driver [ i ] do
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_EXP 89
36575: PUSH
36576: LD_VAR 0 2
36580: ARRAY
36581: PUSH
36582: FOR_IN
36583: IFFALSE 36831
// begin if GetClass ( j ) <> 3 then
36585: LD_VAR 0 3
36589: PPUSH
36590: CALL_OW 257
36594: PUSH
36595: LD_INT 3
36597: NONEQUAL
36598: IFFALSE 36651
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
36600: LD_ADDR_EXP 89
36604: PUSH
36605: LD_EXP 89
36609: PPUSH
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_EXP 89
36619: PUSH
36620: LD_VAR 0 2
36624: ARRAY
36625: PUSH
36626: LD_VAR 0 3
36630: DIFF
36631: PPUSH
36632: CALL_OW 1
36636: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36637: LD_VAR 0 3
36641: PPUSH
36642: LD_INT 0
36644: PPUSH
36645: CALL_OW 109
// continue ;
36649: GO 36582
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
36651: LD_VAR 0 3
36655: PPUSH
36656: CALL_OW 310
36660: NOT
36661: PUSH
36662: LD_VAR 0 3
36666: PPUSH
36667: CALL_OW 310
36671: PPUSH
36672: CALL_OW 266
36676: PUSH
36677: LD_INT 36
36679: NONEQUAL
36680: PUSH
36681: LD_VAR 0 3
36685: PPUSH
36686: CALL 84610 0 1
36690: NOT
36691: AND
36692: OR
36693: IFFALSE 36829
// begin if IsInUnit ( j ) then
36695: LD_VAR 0 3
36699: PPUSH
36700: CALL_OW 310
36704: IFFALSE 36715
// ComExitBuilding ( j ) ;
36706: LD_VAR 0 3
36710: PPUSH
36711: CALL_OW 122
// ct := 0 ;
36715: LD_ADDR_VAR 0 8
36719: PUSH
36720: LD_INT 0
36722: ST_TO_ADDR
// for k in x do
36723: LD_ADDR_VAR 0 4
36727: PUSH
36728: LD_VAR 0 11
36732: PUSH
36733: FOR_IN
36734: IFFALSE 36807
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
36736: LD_VAR 0 4
36740: PPUSH
36741: CALL_OW 264
36745: PUSH
36746: LD_INT 31
36748: EQUAL
36749: PUSH
36750: LD_VAR 0 4
36754: PPUSH
36755: CALL_OW 311
36759: NOT
36760: AND
36761: PUSH
36762: LD_VAR 0 4
36766: PPUSH
36767: CALL_OW 266
36771: PUSH
36772: LD_INT 36
36774: EQUAL
36775: PUSH
36776: LD_VAR 0 4
36780: PPUSH
36781: CALL_OW 313
36785: PUSH
36786: LD_INT 3
36788: LESS
36789: AND
36790: OR
36791: IFFALSE 36805
// begin ct := k ;
36793: LD_ADDR_VAR 0 8
36797: PUSH
36798: LD_VAR 0 4
36802: ST_TO_ADDR
// break ;
36803: GO 36807
// end ;
36805: GO 36733
36807: POP
36808: POP
// if ct then
36809: LD_VAR 0 8
36813: IFFALSE 36829
// ComEnterUnit ( j , ct ) ;
36815: LD_VAR 0 3
36819: PPUSH
36820: LD_VAR 0 8
36824: PPUSH
36825: CALL_OW 120
// end ; end ;
36829: GO 36582
36831: POP
36832: POP
// places := 0 ;
36833: LD_ADDR_VAR 0 5
36837: PUSH
36838: LD_INT 0
36840: ST_TO_ADDR
// for j = 1 to x do
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: DOUBLE
36847: LD_INT 1
36849: DEC
36850: ST_TO_ADDR
36851: LD_VAR 0 11
36855: PUSH
36856: FOR_TO
36857: IFFALSE 36912
// if GetWeapon ( x [ j ] ) = ar_control_tower then
36859: LD_VAR 0 11
36863: PUSH
36864: LD_VAR 0 3
36868: ARRAY
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_INT 31
36877: EQUAL
36878: IFFALSE 36896
// places := places + 1 else
36880: LD_ADDR_VAR 0 5
36884: PUSH
36885: LD_VAR 0 5
36889: PUSH
36890: LD_INT 1
36892: PLUS
36893: ST_TO_ADDR
36894: GO 36910
// places := places + 3 ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: LD_VAR 0 5
36905: PUSH
36906: LD_INT 3
36908: PLUS
36909: ST_TO_ADDR
36910: GO 36856
36912: POP
36913: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
36914: LD_ADDR_VAR 0 6
36918: PUSH
36919: LD_EXP 49
36923: PUSH
36924: LD_VAR 0 2
36928: ARRAY
36929: PPUSH
36930: LD_INT 25
36932: PUSH
36933: LD_INT 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PPUSH
36940: CALL_OW 72
36944: PUSH
36945: LD_EXP 89
36949: PUSH
36950: LD_VAR 0 2
36954: ARRAY
36955: DIFF
36956: PPUSH
36957: LD_INT 3
36959: PPUSH
36960: CALL 85510 0 2
36964: ST_TO_ADDR
// if not tmp then
36965: LD_VAR 0 6
36969: NOT
36970: IFFALSE 36974
// continue ;
36972: GO 36354
// places := places - mc_remote_driver [ i ] ;
36974: LD_ADDR_VAR 0 5
36978: PUSH
36979: LD_VAR 0 5
36983: PUSH
36984: LD_EXP 89
36988: PUSH
36989: LD_VAR 0 2
36993: ARRAY
36994: MINUS
36995: ST_TO_ADDR
// if places then
36996: LD_VAR 0 5
37000: IFFALSE 37059
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
37002: LD_ADDR_EXP 89
37006: PUSH
37007: LD_EXP 89
37011: PPUSH
37012: LD_VAR 0 2
37016: PPUSH
37017: LD_EXP 89
37021: PUSH
37022: LD_VAR 0 2
37026: ARRAY
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: UNION
37037: PPUSH
37038: CALL_OW 1
37042: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
37043: LD_VAR 0 6
37047: PUSH
37048: LD_INT 1
37050: ARRAY
37051: PPUSH
37052: LD_INT 126
37054: PPUSH
37055: CALL_OW 109
// end ; end ;
37059: GO 36354
37061: POP
37062: POP
// end ;
37063: LD_VAR 0 1
37067: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
37068: LD_INT 0
37070: PPUSH
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
37076: LD_VAR 0 1
37080: NOT
37081: PUSH
37082: LD_VAR 0 2
37086: NOT
37087: OR
37088: PUSH
37089: LD_VAR 0 3
37093: NOT
37094: OR
37095: PUSH
37096: LD_VAR 0 4
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: LD_INT 4
37112: PUSH
37113: LD_INT 5
37115: PUSH
37116: LD_INT 8
37118: PUSH
37119: LD_INT 9
37121: PUSH
37122: LD_INT 15
37124: PUSH
37125: LD_INT 16
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: IN
37139: NOT
37140: OR
37141: IFFALSE 37145
// exit ;
37143: GO 38045
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
37145: LD_ADDR_VAR 0 2
37149: PUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: LD_INT 21
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 24
37167: PUSH
37168: LD_INT 250
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PPUSH
37179: CALL_OW 72
37183: ST_TO_ADDR
// case class of 1 , 15 :
37184: LD_VAR 0 4
37188: PUSH
37189: LD_INT 1
37191: DOUBLE
37192: EQUAL
37193: IFTRUE 37203
37195: LD_INT 15
37197: DOUBLE
37198: EQUAL
37199: IFTRUE 37203
37201: GO 37288
37203: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
37204: LD_ADDR_VAR 0 8
37208: PUSH
37209: LD_VAR 0 2
37213: PPUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 30
37219: PUSH
37220: LD_INT 32
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 30
37229: PUSH
37230: LD_INT 31
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 72
37246: PUSH
37247: LD_VAR 0 2
37251: PPUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 30
37257: PUSH
37258: LD_INT 4
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 30
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PPUSH
37280: CALL_OW 72
37284: ADD
37285: ST_TO_ADDR
37286: GO 37534
37288: LD_INT 2
37290: DOUBLE
37291: EQUAL
37292: IFTRUE 37302
37294: LD_INT 16
37296: DOUBLE
37297: EQUAL
37298: IFTRUE 37302
37300: GO 37348
37302: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
37303: LD_ADDR_VAR 0 8
37307: PUSH
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 30
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 30
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: PPUSH
37341: CALL_OW 72
37345: ST_TO_ADDR
37346: GO 37534
37348: LD_INT 3
37350: DOUBLE
37351: EQUAL
37352: IFTRUE 37356
37354: GO 37402
37356: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
37357: LD_ADDR_VAR 0 8
37361: PUSH
37362: LD_VAR 0 2
37366: PPUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 30
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 3
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 72
37399: ST_TO_ADDR
37400: GO 37534
37402: LD_INT 4
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37410
37408: GO 37467
37410: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
37411: LD_ADDR_VAR 0 8
37415: PUSH
37416: LD_VAR 0 2
37420: PPUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 30
37426: PUSH
37427: LD_INT 6
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 30
37436: PUSH
37437: LD_INT 7
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 30
37446: PUSH
37447: LD_INT 8
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: PPUSH
37460: CALL_OW 72
37464: ST_TO_ADDR
37465: GO 37534
37467: LD_INT 5
37469: DOUBLE
37470: EQUAL
37471: IFTRUE 37487
37473: LD_INT 8
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37487
37479: LD_INT 9
37481: DOUBLE
37482: EQUAL
37483: IFTRUE 37487
37485: GO 37533
37487: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
37488: LD_ADDR_VAR 0 8
37492: PUSH
37493: LD_VAR 0 2
37497: PPUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 30
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: LD_INT 5
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: PPUSH
37526: CALL_OW 72
37530: ST_TO_ADDR
37531: GO 37534
37533: POP
// if not tmp then
37534: LD_VAR 0 8
37538: NOT
37539: IFFALSE 37543
// exit ;
37541: GO 38045
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
37543: LD_VAR 0 4
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 15
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: IN
37558: PUSH
37559: LD_EXP 58
37563: PUSH
37564: LD_VAR 0 1
37568: ARRAY
37569: AND
37570: IFFALSE 37726
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
37572: LD_ADDR_VAR 0 9
37576: PUSH
37577: LD_EXP 58
37581: PUSH
37582: LD_VAR 0 1
37586: ARRAY
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
37592: LD_VAR 0 9
37596: PUSH
37597: LD_EXP 59
37601: PUSH
37602: LD_VAR 0 1
37606: ARRAY
37607: IN
37608: NOT
37609: IFFALSE 37724
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
37611: LD_ADDR_EXP 59
37615: PUSH
37616: LD_EXP 59
37620: PPUSH
37621: LD_VAR 0 1
37625: PUSH
37626: LD_EXP 59
37630: PUSH
37631: LD_VAR 0 1
37635: ARRAY
37636: PUSH
37637: LD_INT 1
37639: PLUS
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PPUSH
37645: LD_VAR 0 9
37649: PPUSH
37650: CALL 51325 0 3
37654: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
37655: LD_ADDR_EXP 58
37659: PUSH
37660: LD_EXP 58
37664: PPUSH
37665: LD_VAR 0 1
37669: PPUSH
37670: LD_EXP 58
37674: PUSH
37675: LD_VAR 0 1
37679: ARRAY
37680: PUSH
37681: LD_VAR 0 9
37685: DIFF
37686: PPUSH
37687: CALL_OW 1
37691: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
37692: LD_VAR 0 3
37696: PPUSH
37697: LD_EXP 59
37701: PUSH
37702: LD_VAR 0 1
37706: ARRAY
37707: PUSH
37708: LD_EXP 59
37712: PUSH
37713: LD_VAR 0 1
37717: ARRAY
37718: ARRAY
37719: PPUSH
37720: CALL_OW 120
// end ; exit ;
37724: GO 38045
// end ; if tmp > 1 then
37726: LD_VAR 0 8
37730: PUSH
37731: LD_INT 1
37733: GREATER
37734: IFFALSE 37838
// for i = 2 to tmp do
37736: LD_ADDR_VAR 0 6
37740: PUSH
37741: DOUBLE
37742: LD_INT 2
37744: DEC
37745: ST_TO_ADDR
37746: LD_VAR 0 8
37750: PUSH
37751: FOR_TO
37752: IFFALSE 37836
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
37754: LD_VAR 0 8
37758: PUSH
37759: LD_VAR 0 6
37763: ARRAY
37764: PPUSH
37765: CALL_OW 461
37769: PUSH
37770: LD_INT 6
37772: EQUAL
37773: IFFALSE 37834
// begin x := tmp [ i ] ;
37775: LD_ADDR_VAR 0 9
37779: PUSH
37780: LD_VAR 0 8
37784: PUSH
37785: LD_VAR 0 6
37789: ARRAY
37790: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
37791: LD_ADDR_VAR 0 8
37795: PUSH
37796: LD_VAR 0 8
37800: PPUSH
37801: LD_VAR 0 6
37805: PPUSH
37806: CALL_OW 3
37810: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
37811: LD_ADDR_VAR 0 8
37815: PUSH
37816: LD_VAR 0 8
37820: PPUSH
37821: LD_INT 1
37823: PPUSH
37824: LD_VAR 0 9
37828: PPUSH
37829: CALL_OW 2
37833: ST_TO_ADDR
// end ;
37834: GO 37751
37836: POP
37837: POP
// for i in tmp do
37838: LD_ADDR_VAR 0 6
37842: PUSH
37843: LD_VAR 0 8
37847: PUSH
37848: FOR_IN
37849: IFFALSE 37918
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
37851: LD_VAR 0 6
37855: PPUSH
37856: CALL_OW 313
37860: PUSH
37861: LD_INT 6
37863: LESS
37864: PUSH
37865: LD_VAR 0 6
37869: PPUSH
37870: CALL_OW 266
37874: PUSH
37875: LD_INT 31
37877: PUSH
37878: LD_INT 32
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: IN
37885: NOT
37886: AND
37887: PUSH
37888: LD_VAR 0 6
37892: PPUSH
37893: CALL_OW 313
37897: PUSH
37898: LD_INT 0
37900: EQUAL
37901: OR
37902: IFFALSE 37916
// begin j := i ;
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: LD_VAR 0 6
37913: ST_TO_ADDR
// break ;
37914: GO 37918
// end ; end ;
37916: GO 37848
37918: POP
37919: POP
// if j then
37920: LD_VAR 0 7
37924: IFFALSE 37942
// ComEnterUnit ( unit , j ) else
37926: LD_VAR 0 3
37930: PPUSH
37931: LD_VAR 0 7
37935: PPUSH
37936: CALL_OW 120
37940: GO 38045
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37942: LD_ADDR_VAR 0 10
37946: PUSH
37947: LD_VAR 0 2
37951: PPUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 30
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 30
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: PPUSH
37980: CALL_OW 72
37984: ST_TO_ADDR
// if depot then
37985: LD_VAR 0 10
37989: IFFALSE 38045
// begin depot := NearestUnitToUnit ( depot , unit ) ;
37991: LD_ADDR_VAR 0 10
37995: PUSH
37996: LD_VAR 0 10
38000: PPUSH
38001: LD_VAR 0 3
38005: PPUSH
38006: CALL_OW 74
38010: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
38011: LD_VAR 0 3
38015: PPUSH
38016: LD_VAR 0 10
38020: PPUSH
38021: CALL_OW 296
38025: PUSH
38026: LD_INT 10
38028: GREATER
38029: IFFALSE 38045
// ComStandNearbyBuilding ( unit , depot ) ;
38031: LD_VAR 0 3
38035: PPUSH
38036: LD_VAR 0 10
38040: PPUSH
38041: CALL 46002 0 2
// end ; end ; end ;
38045: LD_VAR 0 5
38049: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
38050: LD_INT 0
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
// if not mc_bases then
38056: LD_EXP 49
38060: NOT
38061: IFFALSE 38065
// exit ;
38063: GO 38304
// for i = 1 to mc_bases do
38065: LD_ADDR_VAR 0 2
38069: PUSH
38070: DOUBLE
38071: LD_INT 1
38073: DEC
38074: ST_TO_ADDR
38075: LD_EXP 49
38079: PUSH
38080: FOR_TO
38081: IFFALSE 38302
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
38083: LD_ADDR_VAR 0 4
38087: PUSH
38088: LD_EXP 49
38092: PUSH
38093: LD_VAR 0 2
38097: ARRAY
38098: PPUSH
38099: LD_INT 21
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PPUSH
38109: CALL_OW 72
38113: PUSH
38114: LD_EXP 78
38118: PUSH
38119: LD_VAR 0 2
38123: ARRAY
38124: UNION
38125: ST_TO_ADDR
// if not tmp then
38126: LD_VAR 0 4
38130: NOT
38131: IFFALSE 38135
// continue ;
38133: GO 38080
// for j in tmp do
38135: LD_ADDR_VAR 0 3
38139: PUSH
38140: LD_VAR 0 4
38144: PUSH
38145: FOR_IN
38146: IFFALSE 38298
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
38148: LD_VAR 0 3
38152: PPUSH
38153: CALL_OW 110
38157: NOT
38158: PUSH
38159: LD_VAR 0 3
38163: PPUSH
38164: CALL_OW 314
38168: NOT
38169: AND
38170: PUSH
38171: LD_VAR 0 3
38175: PPUSH
38176: CALL_OW 311
38180: NOT
38181: AND
38182: PUSH
38183: LD_VAR 0 3
38187: PPUSH
38188: CALL_OW 310
38192: NOT
38193: AND
38194: PUSH
38195: LD_VAR 0 3
38199: PUSH
38200: LD_EXP 52
38204: PUSH
38205: LD_VAR 0 2
38209: ARRAY
38210: PUSH
38211: LD_INT 1
38213: ARRAY
38214: IN
38215: NOT
38216: AND
38217: PUSH
38218: LD_VAR 0 3
38222: PUSH
38223: LD_EXP 52
38227: PUSH
38228: LD_VAR 0 2
38232: ARRAY
38233: PUSH
38234: LD_INT 2
38236: ARRAY
38237: IN
38238: NOT
38239: AND
38240: PUSH
38241: LD_VAR 0 3
38245: PUSH
38246: LD_EXP 61
38250: PUSH
38251: LD_VAR 0 2
38255: ARRAY
38256: IN
38257: NOT
38258: AND
38259: IFFALSE 38296
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
38261: LD_VAR 0 2
38265: PPUSH
38266: LD_EXP 49
38270: PUSH
38271: LD_VAR 0 2
38275: ARRAY
38276: PPUSH
38277: LD_VAR 0 3
38281: PPUSH
38282: LD_VAR 0 3
38286: PPUSH
38287: CALL_OW 257
38291: PPUSH
38292: CALL 37068 0 4
// end ;
38296: GO 38145
38298: POP
38299: POP
// end ;
38300: GO 38080
38302: POP
38303: POP
// end ;
38304: LD_VAR 0 1
38308: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
// if not mc_bases [ base ] then
38317: LD_EXP 49
38321: PUSH
38322: LD_VAR 0 1
38326: ARRAY
38327: NOT
38328: IFFALSE 38332
// exit ;
38330: GO 38514
// tmp := [ ] ;
38332: LD_ADDR_VAR 0 6
38336: PUSH
38337: EMPTY
38338: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
38339: LD_ADDR_VAR 0 7
38343: PUSH
38344: LD_VAR 0 3
38348: PPUSH
38349: LD_INT 0
38351: PPUSH
38352: CALL_OW 517
38356: ST_TO_ADDR
// if not list then
38357: LD_VAR 0 7
38361: NOT
38362: IFFALSE 38366
// exit ;
38364: GO 38514
// for i = 1 to amount do
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: DOUBLE
38372: LD_INT 1
38374: DEC
38375: ST_TO_ADDR
38376: LD_VAR 0 2
38380: PUSH
38381: FOR_TO
38382: IFFALSE 38462
// begin x := rand ( 1 , list [ 1 ] ) ;
38384: LD_ADDR_VAR 0 8
38388: PUSH
38389: LD_INT 1
38391: PPUSH
38392: LD_VAR 0 7
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: CALL_OW 12
38405: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
38406: LD_ADDR_VAR 0 6
38410: PUSH
38411: LD_VAR 0 6
38415: PPUSH
38416: LD_VAR 0 5
38420: PPUSH
38421: LD_VAR 0 7
38425: PUSH
38426: LD_INT 1
38428: ARRAY
38429: PUSH
38430: LD_VAR 0 8
38434: ARRAY
38435: PUSH
38436: LD_VAR 0 7
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: PUSH
38445: LD_VAR 0 8
38449: ARRAY
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PPUSH
38455: CALL_OW 1
38459: ST_TO_ADDR
// end ;
38460: GO 38381
38462: POP
38463: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
38464: LD_ADDR_EXP 62
38468: PUSH
38469: LD_EXP 62
38473: PPUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: LD_VAR 0 6
38483: PPUSH
38484: CALL_OW 1
38488: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
38489: LD_ADDR_EXP 64
38493: PUSH
38494: LD_EXP 64
38498: PPUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_VAR 0 3
38508: PPUSH
38509: CALL_OW 1
38513: ST_TO_ADDR
// end ;
38514: LD_VAR 0 4
38518: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
38519: LD_INT 0
38521: PPUSH
// if not mc_bases [ base ] then
38522: LD_EXP 49
38526: PUSH
38527: LD_VAR 0 1
38531: ARRAY
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38562
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
38537: LD_ADDR_EXP 54
38541: PUSH
38542: LD_EXP 54
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 2
38556: PPUSH
38557: CALL_OW 1
38561: ST_TO_ADDR
// end ;
38562: LD_VAR 0 3
38566: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
38567: LD_INT 0
38569: PPUSH
// if not mc_bases [ base ] then
38570: LD_EXP 49
38574: PUSH
38575: LD_VAR 0 1
38579: ARRAY
38580: NOT
38581: IFFALSE 38585
// exit ;
38583: GO 38622
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
38585: LD_ADDR_EXP 54
38589: PUSH
38590: LD_EXP 54
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_EXP 54
38604: PUSH
38605: LD_VAR 0 1
38609: ARRAY
38610: PUSH
38611: LD_VAR 0 2
38615: UNION
38616: PPUSH
38617: CALL_OW 1
38621: ST_TO_ADDR
// end ;
38622: LD_VAR 0 3
38626: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
38627: LD_INT 0
38629: PPUSH
// if not mc_bases [ base ] then
38630: LD_EXP 49
38634: PUSH
38635: LD_VAR 0 1
38639: ARRAY
38640: NOT
38641: IFFALSE 38645
// exit ;
38643: GO 38670
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
38645: LD_ADDR_EXP 70
38649: PUSH
38650: LD_EXP 70
38654: PPUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_VAR 0 2
38664: PPUSH
38665: CALL_OW 1
38669: ST_TO_ADDR
// end ;
38670: LD_VAR 0 3
38674: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
38675: LD_INT 0
38677: PPUSH
// if not mc_bases [ base ] then
38678: LD_EXP 49
38682: PUSH
38683: LD_VAR 0 1
38687: ARRAY
38688: NOT
38689: IFFALSE 38693
// exit ;
38691: GO 38730
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
38693: LD_ADDR_EXP 70
38697: PUSH
38698: LD_EXP 70
38702: PPUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: LD_EXP 70
38712: PUSH
38713: LD_VAR 0 1
38717: ARRAY
38718: PUSH
38719: LD_VAR 0 2
38723: UNION
38724: PPUSH
38725: CALL_OW 1
38729: ST_TO_ADDR
// end ;
38730: LD_VAR 0 3
38734: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
38735: LD_INT 0
38737: PPUSH
// if not mc_bases [ base ] then
38738: LD_EXP 49
38742: PUSH
38743: LD_VAR 0 1
38747: ARRAY
38748: NOT
38749: IFFALSE 38753
// exit ;
38751: GO 38865
// mc_defender := Replace ( mc_defender , base , deflist ) ;
38753: LD_ADDR_EXP 71
38757: PUSH
38758: LD_EXP 71
38762: PPUSH
38763: LD_VAR 0 1
38767: PPUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: CALL_OW 1
38777: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
38778: LD_ADDR_EXP 60
38782: PUSH
38783: LD_EXP 60
38787: PPUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_VAR 0 2
38797: PUSH
38798: LD_INT 0
38800: PLUS
38801: PPUSH
38802: CALL_OW 1
38806: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
38807: LD_ADDR_EXP 68
38811: PUSH
38812: LD_EXP 68
38816: PPUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: LD_EXP 68
38826: PUSH
38827: LD_VAR 0 1
38831: ARRAY
38832: PUSH
38833: LD_EXP 71
38837: PUSH
38838: LD_VAR 0 1
38842: ARRAY
38843: PPUSH
38844: LD_INT 21
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PPUSH
38854: CALL_OW 72
38858: UNION
38859: PPUSH
38860: CALL_OW 1
38864: ST_TO_ADDR
// end ;
38865: LD_VAR 0 3
38869: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
38870: LD_INT 0
38872: PPUSH
// if not mc_bases [ base ] then
38873: LD_EXP 49
38877: PUSH
38878: LD_VAR 0 1
38882: ARRAY
38883: NOT
38884: IFFALSE 38888
// exit ;
38886: GO 38913
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
38888: LD_ADDR_EXP 60
38892: PUSH
38893: LD_EXP 60
38897: PPUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: LD_VAR 0 2
38907: PPUSH
38908: CALL_OW 1
38912: ST_TO_ADDR
// end ;
38913: LD_VAR 0 3
38917: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
38918: LD_INT 0
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
// if not mc_bases [ base ] then
38924: LD_EXP 49
38928: PUSH
38929: LD_VAR 0 1
38933: ARRAY
38934: NOT
38935: IFFALSE 38939
// exit ;
38937: GO 39004
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
38939: LD_ADDR_EXP 69
38943: PUSH
38944: LD_EXP 69
38948: PPUSH
38949: LD_VAR 0 1
38953: PUSH
38954: LD_EXP 69
38958: PUSH
38959: LD_VAR 0 1
38963: ARRAY
38964: PUSH
38965: LD_INT 1
38967: PLUS
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PPUSH
38973: LD_VAR 0 1
38977: PUSH
38978: LD_VAR 0 2
38982: PUSH
38983: LD_VAR 0 3
38987: PUSH
38988: LD_VAR 0 4
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: PPUSH
38999: CALL 51325 0 3
39003: ST_TO_ADDR
// end ;
39004: LD_VAR 0 5
39008: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
39009: LD_INT 0
39011: PPUSH
// if not mc_bases [ base ] then
39012: LD_EXP 49
39016: PUSH
39017: LD_VAR 0 1
39021: ARRAY
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39052
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
39027: LD_ADDR_EXP 86
39031: PUSH
39032: LD_EXP 86
39036: PPUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: LD_VAR 0 2
39046: PPUSH
39047: CALL_OW 1
39051: ST_TO_ADDR
// end ;
39052: LD_VAR 0 3
39056: RET
// export function MC_GetMinesField ( base ) ; begin
39057: LD_INT 0
39059: PPUSH
// result := mc_mines [ base ] ;
39060: LD_ADDR_VAR 0 2
39064: PUSH
39065: LD_EXP 62
39069: PUSH
39070: LD_VAR 0 1
39074: ARRAY
39075: ST_TO_ADDR
// end ;
39076: LD_VAR 0 2
39080: RET
// export function MC_GetProduceList ( base ) ; begin
39081: LD_INT 0
39083: PPUSH
// result := mc_produce [ base ] ;
39084: LD_ADDR_VAR 0 2
39088: PUSH
39089: LD_EXP 70
39093: PUSH
39094: LD_VAR 0 1
39098: ARRAY
39099: ST_TO_ADDR
// end ;
39100: LD_VAR 0 2
39104: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
39105: LD_INT 0
39107: PPUSH
39108: PPUSH
// if not mc_bases then
39109: LD_EXP 49
39113: NOT
39114: IFFALSE 39118
// exit ;
39116: GO 39183
// if mc_bases [ base ] then
39118: LD_EXP 49
39122: PUSH
39123: LD_VAR 0 1
39127: ARRAY
39128: IFFALSE 39183
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_EXP 49
39139: PUSH
39140: LD_VAR 0 1
39144: ARRAY
39145: PPUSH
39146: LD_INT 30
39148: PUSH
39149: LD_VAR 0 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PPUSH
39158: CALL_OW 72
39162: ST_TO_ADDR
// if result then
39163: LD_VAR 0 3
39167: IFFALSE 39183
// result := result [ 1 ] ;
39169: LD_ADDR_VAR 0 3
39173: PUSH
39174: LD_VAR 0 3
39178: PUSH
39179: LD_INT 1
39181: ARRAY
39182: ST_TO_ADDR
// end ; end ;
39183: LD_VAR 0 3
39187: RET
// export function MC_SetTame ( base , area ) ; begin
39188: LD_INT 0
39190: PPUSH
// if not mc_bases or not base then
39191: LD_EXP 49
39195: NOT
39196: PUSH
39197: LD_VAR 0 1
39201: NOT
39202: OR
39203: IFFALSE 39207
// exit ;
39205: GO 39232
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
39207: LD_ADDR_EXP 77
39211: PUSH
39212: LD_EXP 77
39216: PPUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_VAR 0 2
39226: PPUSH
39227: CALL_OW 1
39231: ST_TO_ADDR
// end ;
39232: LD_VAR 0 3
39236: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
39237: LD_INT 0
39239: PPUSH
39240: PPUSH
// if not mc_bases or not base then
39241: LD_EXP 49
39245: NOT
39246: PUSH
39247: LD_VAR 0 1
39251: NOT
39252: OR
39253: IFFALSE 39257
// exit ;
39255: GO 39359
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39257: LD_ADDR_VAR 0 4
39261: PUSH
39262: LD_EXP 49
39266: PUSH
39267: LD_VAR 0 1
39271: ARRAY
39272: PPUSH
39273: LD_INT 30
39275: PUSH
39276: LD_VAR 0 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PPUSH
39285: CALL_OW 72
39289: ST_TO_ADDR
// if not tmp then
39290: LD_VAR 0 4
39294: NOT
39295: IFFALSE 39299
// exit ;
39297: GO 39359
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
39299: LD_ADDR_EXP 81
39303: PUSH
39304: LD_EXP 81
39308: PPUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_EXP 81
39318: PUSH
39319: LD_VAR 0 1
39323: ARRAY
39324: PPUSH
39325: LD_EXP 81
39329: PUSH
39330: LD_VAR 0 1
39334: ARRAY
39335: PUSH
39336: LD_INT 1
39338: PLUS
39339: PPUSH
39340: LD_VAR 0 4
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: PPUSH
39349: CALL_OW 2
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// end ;
39359: LD_VAR 0 3
39363: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
39364: LD_INT 0
39366: PPUSH
39367: PPUSH
// if not mc_bases or not base or not kinds then
39368: LD_EXP 49
39372: NOT
39373: PUSH
39374: LD_VAR 0 1
39378: NOT
39379: OR
39380: PUSH
39381: LD_VAR 0 2
39385: NOT
39386: OR
39387: IFFALSE 39391
// exit ;
39389: GO 39452
// for i in kinds do
39391: LD_ADDR_VAR 0 4
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: FOR_IN
39402: IFFALSE 39450
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
39404: LD_ADDR_EXP 83
39408: PUSH
39409: LD_EXP 83
39413: PPUSH
39414: LD_VAR 0 1
39418: PUSH
39419: LD_EXP 83
39423: PUSH
39424: LD_VAR 0 1
39428: ARRAY
39429: PUSH
39430: LD_INT 1
39432: PLUS
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PPUSH
39438: LD_VAR 0 4
39442: PPUSH
39443: CALL 51325 0 3
39447: ST_TO_ADDR
39448: GO 39401
39450: POP
39451: POP
// end ;
39452: LD_VAR 0 3
39456: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
39457: LD_INT 0
39459: PPUSH
// if not mc_bases or not base or not areas then
39460: LD_EXP 49
39464: NOT
39465: PUSH
39466: LD_VAR 0 1
39470: NOT
39471: OR
39472: PUSH
39473: LD_VAR 0 2
39477: NOT
39478: OR
39479: IFFALSE 39483
// exit ;
39481: GO 39508
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
39483: LD_ADDR_EXP 67
39487: PUSH
39488: LD_EXP 67
39492: PPUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: LD_VAR 0 2
39502: PPUSH
39503: CALL_OW 1
39507: ST_TO_ADDR
// end ;
39508: LD_VAR 0 3
39512: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
39513: LD_INT 0
39515: PPUSH
// if not mc_bases or not base or not teleports_exit then
39516: LD_EXP 49
39520: NOT
39521: PUSH
39522: LD_VAR 0 1
39526: NOT
39527: OR
39528: PUSH
39529: LD_VAR 0 2
39533: NOT
39534: OR
39535: IFFALSE 39539
// exit ;
39537: GO 39564
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
39539: LD_ADDR_EXP 84
39543: PUSH
39544: LD_EXP 84
39548: PPUSH
39549: LD_VAR 0 1
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: CALL_OW 1
39563: ST_TO_ADDR
// end ;
39564: LD_VAR 0 3
39568: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
39569: LD_INT 0
39571: PPUSH
39572: PPUSH
39573: PPUSH
// if not mc_bases or not base or not ext_list then
39574: LD_EXP 49
39578: NOT
39579: PUSH
39580: LD_VAR 0 1
39584: NOT
39585: OR
39586: PUSH
39587: LD_VAR 0 5
39591: NOT
39592: OR
39593: IFFALSE 39597
// exit ;
39595: GO 39770
// tmp := GetFacExtXYD ( x , y , d ) ;
39597: LD_ADDR_VAR 0 8
39601: PUSH
39602: LD_VAR 0 2
39606: PPUSH
39607: LD_VAR 0 3
39611: PPUSH
39612: LD_VAR 0 4
39616: PPUSH
39617: CALL 84640 0 3
39621: ST_TO_ADDR
// if not tmp then
39622: LD_VAR 0 8
39626: NOT
39627: IFFALSE 39631
// exit ;
39629: GO 39770
// for i in tmp do
39631: LD_ADDR_VAR 0 7
39635: PUSH
39636: LD_VAR 0 8
39640: PUSH
39641: FOR_IN
39642: IFFALSE 39768
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
39644: LD_ADDR_EXP 54
39648: PUSH
39649: LD_EXP 54
39653: PPUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: LD_EXP 54
39663: PUSH
39664: LD_VAR 0 1
39668: ARRAY
39669: PPUSH
39670: LD_EXP 54
39674: PUSH
39675: LD_VAR 0 1
39679: ARRAY
39680: PUSH
39681: LD_INT 1
39683: PLUS
39684: PPUSH
39685: LD_VAR 0 5
39689: PUSH
39690: LD_INT 1
39692: ARRAY
39693: PUSH
39694: LD_VAR 0 7
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: PUSH
39703: LD_VAR 0 7
39707: PUSH
39708: LD_INT 2
39710: ARRAY
39711: PUSH
39712: LD_VAR 0 7
39716: PUSH
39717: LD_INT 3
39719: ARRAY
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: PPUSH
39727: CALL_OW 2
39731: PPUSH
39732: CALL_OW 1
39736: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
39737: LD_ADDR_VAR 0 5
39741: PUSH
39742: LD_VAR 0 5
39746: PPUSH
39747: LD_INT 1
39749: PPUSH
39750: CALL_OW 3
39754: ST_TO_ADDR
// if not ext_list then
39755: LD_VAR 0 5
39759: NOT
39760: IFFALSE 39766
// exit ;
39762: POP
39763: POP
39764: GO 39770
// end ;
39766: GO 39641
39768: POP
39769: POP
// end ;
39770: LD_VAR 0 6
39774: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
39775: LD_INT 0
39777: PPUSH
// if not mc_bases or not base or not weapon_list then
39778: LD_EXP 49
39782: NOT
39783: PUSH
39784: LD_VAR 0 1
39788: NOT
39789: OR
39790: PUSH
39791: LD_VAR 0 2
39795: NOT
39796: OR
39797: IFFALSE 39801
// exit ;
39799: GO 39826
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
39801: LD_ADDR_EXP 88
39805: PUSH
39806: LD_EXP 88
39810: PPUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: LD_VAR 0 2
39820: PPUSH
39821: CALL_OW 1
39825: ST_TO_ADDR
// end ;
39826: LD_VAR 0 3
39830: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
39831: LD_INT 0
39833: PPUSH
// if not mc_bases or not base or not tech_list then
39834: LD_EXP 49
39838: NOT
39839: PUSH
39840: LD_VAR 0 1
39844: NOT
39845: OR
39846: PUSH
39847: LD_VAR 0 2
39851: NOT
39852: OR
39853: IFFALSE 39857
// exit ;
39855: GO 39882
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
39857: LD_ADDR_EXP 76
39861: PUSH
39862: LD_EXP 76
39866: PPUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: LD_VAR 0 2
39876: PPUSH
39877: CALL_OW 1
39881: ST_TO_ADDR
// end ;
39882: LD_VAR 0 3
39886: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
39887: LD_INT 0
39889: PPUSH
// if not mc_bases or not parking_area or not base then
39890: LD_EXP 49
39894: NOT
39895: PUSH
39896: LD_VAR 0 2
39900: NOT
39901: OR
39902: PUSH
39903: LD_VAR 0 1
39907: NOT
39908: OR
39909: IFFALSE 39913
// exit ;
39911: GO 39938
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
39913: LD_ADDR_EXP 73
39917: PUSH
39918: LD_EXP 73
39922: PPUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: LD_VAR 0 2
39932: PPUSH
39933: CALL_OW 1
39937: ST_TO_ADDR
// end ;
39938: LD_VAR 0 3
39942: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
39943: LD_INT 0
39945: PPUSH
// if not mc_bases or not base or not scan_area then
39946: LD_EXP 49
39950: NOT
39951: PUSH
39952: LD_VAR 0 1
39956: NOT
39957: OR
39958: PUSH
39959: LD_VAR 0 2
39963: NOT
39964: OR
39965: IFFALSE 39969
// exit ;
39967: GO 39994
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
39969: LD_ADDR_EXP 74
39973: PUSH
39974: LD_EXP 74
39978: PPUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: LD_VAR 0 2
39988: PPUSH
39989: CALL_OW 1
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 3
39998: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
// if not mc_bases or not base then
40003: LD_EXP 49
40007: NOT
40008: PUSH
40009: LD_VAR 0 1
40013: NOT
40014: OR
40015: IFFALSE 40019
// exit ;
40017: GO 40083
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
40019: LD_ADDR_VAR 0 3
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 4
40035: PUSH
40036: LD_INT 11
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
40046: LD_ADDR_EXP 76
40050: PUSH
40051: LD_EXP 76
40055: PPUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: LD_EXP 76
40065: PUSH
40066: LD_VAR 0 1
40070: ARRAY
40071: PUSH
40072: LD_VAR 0 3
40076: DIFF
40077: PPUSH
40078: CALL_OW 1
40082: ST_TO_ADDR
// end ;
40083: LD_VAR 0 2
40087: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
40088: LD_INT 0
40090: PPUSH
// result := mc_vehicles [ base ] ;
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_EXP 68
40100: PUSH
40101: LD_VAR 0 1
40105: ARRAY
40106: ST_TO_ADDR
// if onlyCombat then
40107: LD_VAR 0 2
40111: IFFALSE 40254
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] ] ) ;
40113: LD_ADDR_VAR 0 3
40117: PUSH
40118: LD_VAR 0 3
40122: PUSH
40123: LD_VAR 0 3
40127: PPUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 34
40133: PUSH
40134: LD_INT 12
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 34
40143: PUSH
40144: LD_INT 51
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 34
40153: PUSH
40154: LD_EXP 93
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 34
40165: PUSH
40166: LD_INT 32
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 34
40175: PUSH
40176: LD_INT 13
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 34
40185: PUSH
40186: LD_INT 52
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 34
40195: PUSH
40196: LD_INT 14
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 34
40205: PUSH
40206: LD_INT 53
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 34
40215: PUSH
40216: LD_EXP 92
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 34
40227: PUSH
40228: LD_INT 31
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: PPUSH
40248: CALL_OW 72
40252: DIFF
40253: ST_TO_ADDR
// end ; end_of_file
40254: LD_VAR 0 3
40258: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
40259: LD_INT 0
40261: PPUSH
40262: PPUSH
40263: PPUSH
// if not mc_bases or not skirmish then
40264: LD_EXP 49
40268: NOT
40269: PUSH
40270: LD_EXP 47
40274: NOT
40275: OR
40276: IFFALSE 40280
// exit ;
40278: GO 40445
// for i = 1 to mc_bases do
40280: LD_ADDR_VAR 0 4
40284: PUSH
40285: DOUBLE
40286: LD_INT 1
40288: DEC
40289: ST_TO_ADDR
40290: LD_EXP 49
40294: PUSH
40295: FOR_TO
40296: IFFALSE 40443
// begin if sci in mc_bases [ i ] then
40298: LD_VAR 0 2
40302: PUSH
40303: LD_EXP 49
40307: PUSH
40308: LD_VAR 0 4
40312: ARRAY
40313: IN
40314: IFFALSE 40441
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
40316: LD_ADDR_EXP 78
40320: PUSH
40321: LD_EXP 78
40325: PPUSH
40326: LD_VAR 0 4
40330: PUSH
40331: LD_EXP 78
40335: PUSH
40336: LD_VAR 0 4
40340: ARRAY
40341: PUSH
40342: LD_INT 1
40344: PLUS
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PPUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL 51325 0 3
40359: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
40360: LD_ADDR_VAR 0 5
40364: PUSH
40365: LD_EXP 49
40369: PUSH
40370: LD_VAR 0 4
40374: ARRAY
40375: PPUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 30
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 30
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 72
40408: PPUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 74
40418: ST_TO_ADDR
// if tmp then
40419: LD_VAR 0 5
40423: IFFALSE 40439
// ComStandNearbyBuilding ( ape , tmp ) ;
40425: LD_VAR 0 1
40429: PPUSH
40430: LD_VAR 0 5
40434: PPUSH
40435: CALL 46002 0 2
// break ;
40439: GO 40443
// end ; end ;
40441: GO 40295
40443: POP
40444: POP
// end ;
40445: LD_VAR 0 3
40449: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
40450: LD_INT 0
40452: PPUSH
40453: PPUSH
40454: PPUSH
// if not mc_bases or not skirmish then
40455: LD_EXP 49
40459: NOT
40460: PUSH
40461: LD_EXP 47
40465: NOT
40466: OR
40467: IFFALSE 40471
// exit ;
40469: GO 40560
// for i = 1 to mc_bases do
40471: LD_ADDR_VAR 0 4
40475: PUSH
40476: DOUBLE
40477: LD_INT 1
40479: DEC
40480: ST_TO_ADDR
40481: LD_EXP 49
40485: PUSH
40486: FOR_TO
40487: IFFALSE 40558
// begin if building in mc_busy_turret_list [ i ] then
40489: LD_VAR 0 1
40493: PUSH
40494: LD_EXP 59
40498: PUSH
40499: LD_VAR 0 4
40503: ARRAY
40504: IN
40505: IFFALSE 40556
// begin tmp := mc_busy_turret_list [ i ] diff building ;
40507: LD_ADDR_VAR 0 5
40511: PUSH
40512: LD_EXP 59
40516: PUSH
40517: LD_VAR 0 4
40521: ARRAY
40522: PUSH
40523: LD_VAR 0 1
40527: DIFF
40528: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
40529: LD_ADDR_EXP 59
40533: PUSH
40534: LD_EXP 59
40538: PPUSH
40539: LD_VAR 0 4
40543: PPUSH
40544: LD_VAR 0 5
40548: PPUSH
40549: CALL_OW 1
40553: ST_TO_ADDR
// break ;
40554: GO 40558
// end ; end ;
40556: GO 40486
40558: POP
40559: POP
// end ;
40560: LD_VAR 0 3
40564: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
40565: LD_INT 0
40567: PPUSH
40568: PPUSH
40569: PPUSH
// if not mc_bases or not skirmish then
40570: LD_EXP 49
40574: NOT
40575: PUSH
40576: LD_EXP 47
40580: NOT
40581: OR
40582: IFFALSE 40586
// exit ;
40584: GO 40785
// for i = 1 to mc_bases do
40586: LD_ADDR_VAR 0 5
40590: PUSH
40591: DOUBLE
40592: LD_INT 1
40594: DEC
40595: ST_TO_ADDR
40596: LD_EXP 49
40600: PUSH
40601: FOR_TO
40602: IFFALSE 40783
// if building in mc_bases [ i ] then
40604: LD_VAR 0 1
40608: PUSH
40609: LD_EXP 49
40613: PUSH
40614: LD_VAR 0 5
40618: ARRAY
40619: IN
40620: IFFALSE 40781
// begin tmp := mc_bases [ i ] diff building ;
40622: LD_ADDR_VAR 0 6
40626: PUSH
40627: LD_EXP 49
40631: PUSH
40632: LD_VAR 0 5
40636: ARRAY
40637: PUSH
40638: LD_VAR 0 1
40642: DIFF
40643: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
40644: LD_ADDR_EXP 49
40648: PUSH
40649: LD_EXP 49
40653: PPUSH
40654: LD_VAR 0 5
40658: PPUSH
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 1
40668: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
40669: LD_VAR 0 1
40673: PUSH
40674: LD_EXP 57
40678: PUSH
40679: LD_VAR 0 5
40683: ARRAY
40684: IN
40685: IFFALSE 40724
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
40687: LD_ADDR_EXP 57
40691: PUSH
40692: LD_EXP 57
40696: PPUSH
40697: LD_VAR 0 5
40701: PPUSH
40702: LD_EXP 57
40706: PUSH
40707: LD_VAR 0 5
40711: ARRAY
40712: PUSH
40713: LD_VAR 0 1
40717: DIFF
40718: PPUSH
40719: CALL_OW 1
40723: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
40724: LD_VAR 0 1
40728: PUSH
40729: LD_EXP 58
40733: PUSH
40734: LD_VAR 0 5
40738: ARRAY
40739: IN
40740: IFFALSE 40779
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
40742: LD_ADDR_EXP 58
40746: PUSH
40747: LD_EXP 58
40751: PPUSH
40752: LD_VAR 0 5
40756: PPUSH
40757: LD_EXP 58
40761: PUSH
40762: LD_VAR 0 5
40766: ARRAY
40767: PUSH
40768: LD_VAR 0 1
40772: DIFF
40773: PPUSH
40774: CALL_OW 1
40778: ST_TO_ADDR
// break ;
40779: GO 40783
// end ;
40781: GO 40601
40783: POP
40784: POP
// end ;
40785: LD_VAR 0 4
40789: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
40795: LD_EXP 49
40799: NOT
40800: PUSH
40801: LD_EXP 47
40805: NOT
40806: OR
40807: PUSH
40808: LD_VAR 0 3
40812: PUSH
40813: LD_EXP 75
40817: IN
40818: NOT
40819: OR
40820: IFFALSE 40824
// exit ;
40822: GO 40947
// for i = 1 to mc_vehicles do
40824: LD_ADDR_VAR 0 6
40828: PUSH
40829: DOUBLE
40830: LD_INT 1
40832: DEC
40833: ST_TO_ADDR
40834: LD_EXP 68
40838: PUSH
40839: FOR_TO
40840: IFFALSE 40945
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
40842: LD_VAR 0 2
40846: PUSH
40847: LD_EXP 68
40851: PUSH
40852: LD_VAR 0 6
40856: ARRAY
40857: IN
40858: PUSH
40859: LD_VAR 0 1
40863: PUSH
40864: LD_EXP 68
40868: PUSH
40869: LD_VAR 0 6
40873: ARRAY
40874: IN
40875: OR
40876: IFFALSE 40943
// begin tmp := mc_vehicles [ i ] diff old ;
40878: LD_ADDR_VAR 0 7
40882: PUSH
40883: LD_EXP 68
40887: PUSH
40888: LD_VAR 0 6
40892: ARRAY
40893: PUSH
40894: LD_VAR 0 2
40898: DIFF
40899: ST_TO_ADDR
// tmp := tmp diff new ;
40900: LD_ADDR_VAR 0 7
40904: PUSH
40905: LD_VAR 0 7
40909: PUSH
40910: LD_VAR 0 1
40914: DIFF
40915: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
40916: LD_ADDR_EXP 68
40920: PUSH
40921: LD_EXP 68
40925: PPUSH
40926: LD_VAR 0 6
40930: PPUSH
40931: LD_VAR 0 7
40935: PPUSH
40936: CALL_OW 1
40940: ST_TO_ADDR
// break ;
40941: GO 40945
// end ;
40943: GO 40839
40945: POP
40946: POP
// end ;
40947: LD_VAR 0 5
40951: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
40952: LD_INT 0
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
// if not mc_bases or not skirmish then
40958: LD_EXP 49
40962: NOT
40963: PUSH
40964: LD_EXP 47
40968: NOT
40969: OR
40970: IFFALSE 40974
// exit ;
40972: GO 41357
// side := GetSide ( vehicle ) ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 255
40988: ST_TO_ADDR
// for i = 1 to mc_bases do
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: DOUBLE
40995: LD_INT 1
40997: DEC
40998: ST_TO_ADDR
40999: LD_EXP 49
41003: PUSH
41004: FOR_TO
41005: IFFALSE 41355
// begin if factory in mc_bases [ i ] then
41007: LD_VAR 0 2
41011: PUSH
41012: LD_EXP 49
41016: PUSH
41017: LD_VAR 0 4
41021: ARRAY
41022: IN
41023: IFFALSE 41353
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
41025: LD_EXP 71
41029: PUSH
41030: LD_VAR 0 4
41034: ARRAY
41035: PUSH
41036: LD_EXP 60
41040: PUSH
41041: LD_VAR 0 4
41045: ARRAY
41046: LESS
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 264
41057: PUSH
41058: LD_INT 31
41060: PUSH
41061: LD_INT 32
41063: PUSH
41064: LD_INT 51
41066: PUSH
41067: LD_EXP 93
41071: PUSH
41072: LD_INT 12
41074: PUSH
41075: LD_INT 30
41077: PUSH
41078: LD_EXP 92
41082: PUSH
41083: LD_INT 11
41085: PUSH
41086: LD_INT 53
41088: PUSH
41089: LD_INT 14
41091: PUSH
41092: LD_EXP 96
41096: PUSH
41097: LD_INT 29
41099: PUSH
41100: LD_EXP 94
41104: PUSH
41105: LD_INT 13
41107: PUSH
41108: LD_INT 52
41110: PUSH
41111: LD_INT 48
41113: PUSH
41114: LD_INT 8
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: IN
41136: NOT
41137: AND
41138: IFFALSE 41179
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
41140: LD_ADDR_EXP 71
41144: PUSH
41145: LD_EXP 71
41149: PPUSH
41150: LD_VAR 0 4
41154: PPUSH
41155: LD_EXP 71
41159: PUSH
41160: LD_VAR 0 4
41164: ARRAY
41165: PUSH
41166: LD_VAR 0 1
41170: ADD
41171: PPUSH
41172: CALL_OW 1
41176: ST_TO_ADDR
41177: GO 41223
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
41179: LD_ADDR_EXP 68
41183: PUSH
41184: LD_EXP 68
41188: PPUSH
41189: LD_VAR 0 4
41193: PUSH
41194: LD_EXP 68
41198: PUSH
41199: LD_VAR 0 4
41203: ARRAY
41204: PUSH
41205: LD_INT 1
41207: PLUS
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PPUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL 51325 0 3
41222: ST_TO_ADDR
// if not mc_scan [ i ] then
41223: LD_EXP 72
41227: PUSH
41228: LD_VAR 0 4
41232: ARRAY
41233: NOT
41234: IFFALSE 41353
// begin if GetControl ( vehicle ) = control_remote then
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 263
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: IFFALSE 41269
// repeat wait ( 0 0$1 ) ;
41251: LD_INT 35
41253: PPUSH
41254: CALL_OW 67
// until IsControledBy ( vehicle ) ;
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL_OW 312
41267: IFFALSE 41251
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
41269: LD_VAR 0 1
41273: PPUSH
41274: LD_EXP 73
41278: PUSH
41279: LD_VAR 0 4
41283: ARRAY
41284: PPUSH
41285: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 263
41298: PUSH
41299: LD_INT 1
41301: NONEQUAL
41302: IFFALSE 41306
// break ;
41304: GO 41355
// repeat wait ( 0 0$1 ) ;
41306: LD_INT 35
41308: PPUSH
41309: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
41313: LD_VAR 0 1
41317: PPUSH
41318: LD_EXP 73
41322: PUSH
41323: LD_VAR 0 4
41327: ARRAY
41328: PPUSH
41329: CALL_OW 308
41333: IFFALSE 41306
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 311
41344: PPUSH
41345: CALL_OW 121
// exit ;
41349: POP
41350: POP
41351: GO 41357
// end ; end ; end ;
41353: GO 41004
41355: POP
41356: POP
// end ;
41357: LD_VAR 0 3
41361: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
41362: LD_INT 0
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
// if not mc_bases or not skirmish then
41368: LD_EXP 49
41372: NOT
41373: PUSH
41374: LD_EXP 47
41378: NOT
41379: OR
41380: IFFALSE 41384
// exit ;
41382: GO 41737
// repeat wait ( 0 0$1 ) ;
41384: LD_INT 35
41386: PPUSH
41387: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
41391: LD_VAR 0 2
41395: PPUSH
41396: LD_VAR 0 3
41400: PPUSH
41401: CALL_OW 284
41405: IFFALSE 41384
// if GetResourceTypeXY ( x , y ) = mat_artefact then
41407: LD_VAR 0 2
41411: PPUSH
41412: LD_VAR 0 3
41416: PPUSH
41417: CALL_OW 283
41421: PUSH
41422: LD_INT 4
41424: EQUAL
41425: IFFALSE 41429
// exit ;
41427: GO 41737
// for i = 1 to mc_bases do
41429: LD_ADDR_VAR 0 7
41433: PUSH
41434: DOUBLE
41435: LD_INT 1
41437: DEC
41438: ST_TO_ADDR
41439: LD_EXP 49
41443: PUSH
41444: FOR_TO
41445: IFFALSE 41735
// begin if mc_crates_area [ i ] then
41447: LD_EXP 67
41451: PUSH
41452: LD_VAR 0 7
41456: ARRAY
41457: IFFALSE 41568
// for j in mc_crates_area [ i ] do
41459: LD_ADDR_VAR 0 8
41463: PUSH
41464: LD_EXP 67
41468: PUSH
41469: LD_VAR 0 7
41473: ARRAY
41474: PUSH
41475: FOR_IN
41476: IFFALSE 41566
// if InArea ( x , y , j ) then
41478: LD_VAR 0 2
41482: PPUSH
41483: LD_VAR 0 3
41487: PPUSH
41488: LD_VAR 0 8
41492: PPUSH
41493: CALL_OW 309
41497: IFFALSE 41564
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41499: LD_ADDR_EXP 65
41503: PUSH
41504: LD_EXP 65
41508: PPUSH
41509: LD_VAR 0 7
41513: PUSH
41514: LD_EXP 65
41518: PUSH
41519: LD_VAR 0 7
41523: ARRAY
41524: PUSH
41525: LD_INT 1
41527: PLUS
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PPUSH
41533: LD_VAR 0 4
41537: PUSH
41538: LD_VAR 0 2
41542: PUSH
41543: LD_VAR 0 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: PPUSH
41553: CALL 51325 0 3
41557: ST_TO_ADDR
// exit ;
41558: POP
41559: POP
41560: POP
41561: POP
41562: GO 41737
// end ;
41564: GO 41475
41566: POP
41567: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41568: LD_ADDR_VAR 0 9
41572: PUSH
41573: LD_EXP 49
41577: PUSH
41578: LD_VAR 0 7
41582: ARRAY
41583: PPUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 30
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 30
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: PPUSH
41612: CALL_OW 72
41616: ST_TO_ADDR
// if not depot then
41617: LD_VAR 0 9
41621: NOT
41622: IFFALSE 41626
// continue ;
41624: GO 41444
// for j in depot do
41626: LD_ADDR_VAR 0 8
41630: PUSH
41631: LD_VAR 0 9
41635: PUSH
41636: FOR_IN
41637: IFFALSE 41731
// if GetDistUnitXY ( j , x , y ) < 30 then
41639: LD_VAR 0 8
41643: PPUSH
41644: LD_VAR 0 2
41648: PPUSH
41649: LD_VAR 0 3
41653: PPUSH
41654: CALL_OW 297
41658: PUSH
41659: LD_INT 30
41661: LESS
41662: IFFALSE 41729
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41664: LD_ADDR_EXP 65
41668: PUSH
41669: LD_EXP 65
41673: PPUSH
41674: LD_VAR 0 7
41678: PUSH
41679: LD_EXP 65
41683: PUSH
41684: LD_VAR 0 7
41688: ARRAY
41689: PUSH
41690: LD_INT 1
41692: PLUS
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PPUSH
41698: LD_VAR 0 4
41702: PUSH
41703: LD_VAR 0 2
41707: PUSH
41708: LD_VAR 0 3
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: PPUSH
41718: CALL 51325 0 3
41722: ST_TO_ADDR
// exit ;
41723: POP
41724: POP
41725: POP
41726: POP
41727: GO 41737
// end ;
41729: GO 41636
41731: POP
41732: POP
// end ;
41733: GO 41444
41735: POP
41736: POP
// end ;
41737: LD_VAR 0 6
41741: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
41742: LD_INT 0
41744: PPUSH
41745: PPUSH
41746: PPUSH
41747: PPUSH
// if not mc_bases or not skirmish then
41748: LD_EXP 49
41752: NOT
41753: PUSH
41754: LD_EXP 47
41758: NOT
41759: OR
41760: IFFALSE 41764
// exit ;
41762: GO 42041
// side := GetSide ( lab ) ;
41764: LD_ADDR_VAR 0 4
41768: PUSH
41769: LD_VAR 0 2
41773: PPUSH
41774: CALL_OW 255
41778: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
41779: LD_VAR 0 4
41783: PUSH
41784: LD_EXP 75
41788: IN
41789: NOT
41790: PUSH
41791: LD_EXP 76
41795: NOT
41796: OR
41797: PUSH
41798: LD_EXP 49
41802: NOT
41803: OR
41804: IFFALSE 41808
// exit ;
41806: GO 42041
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
41808: LD_ADDR_EXP 76
41812: PUSH
41813: LD_EXP 76
41817: PPUSH
41818: LD_VAR 0 4
41822: PPUSH
41823: LD_EXP 76
41827: PUSH
41828: LD_VAR 0 4
41832: ARRAY
41833: PUSH
41834: LD_VAR 0 1
41838: DIFF
41839: PPUSH
41840: CALL_OW 1
41844: ST_TO_ADDR
// for i = 1 to mc_bases do
41845: LD_ADDR_VAR 0 5
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_EXP 49
41859: PUSH
41860: FOR_TO
41861: IFFALSE 42039
// begin if lab in mc_bases [ i ] then
41863: LD_VAR 0 2
41867: PUSH
41868: LD_EXP 49
41872: PUSH
41873: LD_VAR 0 5
41877: ARRAY
41878: IN
41879: IFFALSE 42037
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
41881: LD_VAR 0 1
41885: PUSH
41886: LD_INT 11
41888: PUSH
41889: LD_INT 4
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: IN
41904: PUSH
41905: LD_EXP 79
41909: PUSH
41910: LD_VAR 0 5
41914: ARRAY
41915: AND
41916: IFFALSE 42037
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
41918: LD_ADDR_VAR 0 6
41922: PUSH
41923: LD_EXP 79
41927: PUSH
41928: LD_VAR 0 5
41932: ARRAY
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41938: LD_ADDR_EXP 79
41942: PUSH
41943: LD_EXP 79
41947: PPUSH
41948: LD_VAR 0 5
41952: PPUSH
41953: EMPTY
41954: PPUSH
41955: CALL_OW 1
41959: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
41960: LD_VAR 0 6
41964: PPUSH
41965: LD_INT 0
41967: PPUSH
41968: CALL_OW 109
// ComExitBuilding ( tmp ) ;
41972: LD_VAR 0 6
41976: PPUSH
41977: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
41981: LD_ADDR_EXP 78
41985: PUSH
41986: LD_EXP 78
41990: PPUSH
41991: LD_VAR 0 5
41995: PPUSH
41996: LD_EXP 78
42000: PUSH
42001: LD_VAR 0 5
42005: ARRAY
42006: PPUSH
42007: LD_INT 1
42009: PPUSH
42010: LD_VAR 0 6
42014: PPUSH
42015: CALL_OW 2
42019: PPUSH
42020: CALL_OW 1
42024: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
42025: LD_VAR 0 5
42029: PPUSH
42030: LD_INT 112
42032: PPUSH
42033: CALL 19797 0 2
// end ; end ; end ;
42037: GO 41860
42039: POP
42040: POP
// end ;
42041: LD_VAR 0 3
42045: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
42046: LD_INT 0
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
42055: PPUSH
// if not mc_bases or not skirmish then
42056: LD_EXP 49
42060: NOT
42061: PUSH
42062: LD_EXP 47
42066: NOT
42067: OR
42068: IFFALSE 42072
// exit ;
42070: GO 43015
// for i = 1 to mc_bases do
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: DOUBLE
42078: LD_INT 1
42080: DEC
42081: ST_TO_ADDR
42082: LD_EXP 49
42086: PUSH
42087: FOR_TO
42088: IFFALSE 43013
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
42090: LD_VAR 0 1
42094: PUSH
42095: LD_EXP 49
42099: PUSH
42100: LD_VAR 0 3
42104: ARRAY
42105: IN
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_EXP 56
42116: PUSH
42117: LD_VAR 0 3
42121: ARRAY
42122: IN
42123: OR
42124: PUSH
42125: LD_VAR 0 1
42129: PUSH
42130: LD_EXP 68
42134: PUSH
42135: LD_VAR 0 3
42139: ARRAY
42140: IN
42141: OR
42142: PUSH
42143: LD_VAR 0 1
42147: PUSH
42148: LD_EXP 78
42152: PUSH
42153: LD_VAR 0 3
42157: ARRAY
42158: IN
42159: OR
42160: PUSH
42161: LD_VAR 0 1
42165: PUSH
42166: LD_EXP 79
42170: PUSH
42171: LD_VAR 0 3
42175: ARRAY
42176: IN
42177: OR
42178: IFFALSE 43011
// begin if un in mc_ape [ i ] then
42180: LD_VAR 0 1
42184: PUSH
42185: LD_EXP 78
42189: PUSH
42190: LD_VAR 0 3
42194: ARRAY
42195: IN
42196: IFFALSE 42235
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
42198: LD_ADDR_EXP 78
42202: PUSH
42203: LD_EXP 78
42207: PPUSH
42208: LD_VAR 0 3
42212: PPUSH
42213: LD_EXP 78
42217: PUSH
42218: LD_VAR 0 3
42222: ARRAY
42223: PUSH
42224: LD_VAR 0 1
42228: DIFF
42229: PPUSH
42230: CALL_OW 1
42234: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
42235: LD_VAR 0 1
42239: PUSH
42240: LD_EXP 79
42244: PUSH
42245: LD_VAR 0 3
42249: ARRAY
42250: IN
42251: IFFALSE 42275
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42253: LD_ADDR_EXP 79
42257: PUSH
42258: LD_EXP 79
42262: PPUSH
42263: LD_VAR 0 3
42267: PPUSH
42268: EMPTY
42269: PPUSH
42270: CALL_OW 1
42274: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
42275: LD_VAR 0 1
42279: PPUSH
42280: CALL_OW 247
42284: PUSH
42285: LD_INT 2
42287: EQUAL
42288: PUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: CALL_OW 110
42298: PUSH
42299: LD_INT 20
42301: EQUAL
42302: AND
42303: IFFALSE 42406
// begin fac := MC_GetBuilding ( i , b_factory ) ;
42305: LD_ADDR_VAR 0 8
42309: PUSH
42310: LD_VAR 0 3
42314: PPUSH
42315: LD_INT 3
42317: PPUSH
42318: CALL 39105 0 2
42322: ST_TO_ADDR
// if fac then
42323: LD_VAR 0 8
42327: IFFALSE 42406
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
42329: LD_ADDR_VAR 0 9
42333: PUSH
42334: LD_VAR 0 8
42338: PPUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 265
42348: PPUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL_OW 262
42358: PPUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 263
42368: PPUSH
42369: LD_VAR 0 1
42373: PPUSH
42374: CALL_OW 264
42378: PPUSH
42379: CALL 48925 0 5
42383: ST_TO_ADDR
// if components then
42384: LD_VAR 0 9
42388: IFFALSE 42404
// MC_InsertProduceList ( i , components ) ;
42390: LD_VAR 0 3
42394: PPUSH
42395: LD_VAR 0 9
42399: PPUSH
42400: CALL 38675 0 2
// break ;
42404: GO 43013
// end ; end ; if GetType ( un ) = unit_building then
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 247
42415: PUSH
42416: LD_INT 3
42418: EQUAL
42419: IFFALSE 42734
// begin btype := GetBType ( un ) ;
42421: LD_ADDR_VAR 0 5
42425: PUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 266
42435: ST_TO_ADDR
// if btype = b_warehouse then
42436: LD_VAR 0 5
42440: PUSH
42441: LD_INT 1
42443: EQUAL
42444: IFFALSE 42462
// begin btype := b_depot ;
42446: LD_ADDR_VAR 0 5
42450: PUSH
42451: LD_INT 0
42453: ST_TO_ADDR
// pos := 1 ;
42454: LD_ADDR_VAR 0 6
42458: PUSH
42459: LD_INT 1
42461: ST_TO_ADDR
// end ; if btype = b_factory then
42462: LD_VAR 0 5
42466: PUSH
42467: LD_INT 3
42469: EQUAL
42470: IFFALSE 42488
// begin btype := b_workshop ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_INT 2
42479: ST_TO_ADDR
// pos := 1 ;
42480: LD_ADDR_VAR 0 6
42484: PUSH
42485: LD_INT 1
42487: ST_TO_ADDR
// end ; if btype = b_barracks then
42488: LD_VAR 0 5
42492: PUSH
42493: LD_INT 5
42495: EQUAL
42496: IFFALSE 42506
// btype := b_armoury ;
42498: LD_ADDR_VAR 0 5
42502: PUSH
42503: LD_INT 4
42505: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
42506: LD_VAR 0 5
42510: PUSH
42511: LD_INT 7
42513: PUSH
42514: LD_INT 8
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: IN
42521: IFFALSE 42531
// btype := b_lab ;
42523: LD_ADDR_VAR 0 5
42527: PUSH
42528: LD_INT 6
42530: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
42531: LD_ADDR_EXP 54
42535: PUSH
42536: LD_EXP 54
42540: PPUSH
42541: LD_VAR 0 3
42545: PUSH
42546: LD_EXP 54
42550: PUSH
42551: LD_VAR 0 3
42555: ARRAY
42556: PUSH
42557: LD_INT 1
42559: PLUS
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PPUSH
42565: LD_VAR 0 5
42569: PUSH
42570: LD_VAR 0 1
42574: PPUSH
42575: CALL_OW 250
42579: PUSH
42580: LD_VAR 0 1
42584: PPUSH
42585: CALL_OW 251
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 254
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: PPUSH
42606: CALL 51325 0 3
42610: ST_TO_ADDR
// if pos = 1 then
42611: LD_VAR 0 6
42615: PUSH
42616: LD_INT 1
42618: EQUAL
42619: IFFALSE 42734
// begin tmp := mc_build_list [ i ] ;
42621: LD_ADDR_VAR 0 7
42625: PUSH
42626: LD_EXP 54
42630: PUSH
42631: LD_VAR 0 3
42635: ARRAY
42636: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42637: LD_VAR 0 7
42641: PPUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 30
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 30
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: PPUSH
42670: CALL_OW 72
42674: IFFALSE 42684
// pos := 2 ;
42676: LD_ADDR_VAR 0 6
42680: PUSH
42681: LD_INT 2
42683: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
42684: LD_ADDR_VAR 0 7
42688: PUSH
42689: LD_VAR 0 7
42693: PPUSH
42694: LD_VAR 0 6
42698: PPUSH
42699: LD_VAR 0 7
42703: PPUSH
42704: CALL 51651 0 3
42708: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
42709: LD_ADDR_EXP 54
42713: PUSH
42714: LD_EXP 54
42718: PPUSH
42719: LD_VAR 0 3
42723: PPUSH
42724: LD_VAR 0 7
42728: PPUSH
42729: CALL_OW 1
42733: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
42734: LD_VAR 0 1
42738: PUSH
42739: LD_EXP 49
42743: PUSH
42744: LD_VAR 0 3
42748: ARRAY
42749: IN
42750: IFFALSE 42789
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
42752: LD_ADDR_EXP 49
42756: PUSH
42757: LD_EXP 49
42761: PPUSH
42762: LD_VAR 0 3
42766: PPUSH
42767: LD_EXP 49
42771: PUSH
42772: LD_VAR 0 3
42776: ARRAY
42777: PUSH
42778: LD_VAR 0 1
42782: DIFF
42783: PPUSH
42784: CALL_OW 1
42788: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
42789: LD_VAR 0 1
42793: PUSH
42794: LD_EXP 56
42798: PUSH
42799: LD_VAR 0 3
42803: ARRAY
42804: IN
42805: IFFALSE 42844
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
42807: LD_ADDR_EXP 56
42811: PUSH
42812: LD_EXP 56
42816: PPUSH
42817: LD_VAR 0 3
42821: PPUSH
42822: LD_EXP 56
42826: PUSH
42827: LD_VAR 0 3
42831: ARRAY
42832: PUSH
42833: LD_VAR 0 1
42837: DIFF
42838: PPUSH
42839: CALL_OW 1
42843: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
42844: LD_VAR 0 1
42848: PUSH
42849: LD_EXP 68
42853: PUSH
42854: LD_VAR 0 3
42858: ARRAY
42859: IN
42860: IFFALSE 42899
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
42862: LD_ADDR_EXP 68
42866: PUSH
42867: LD_EXP 68
42871: PPUSH
42872: LD_VAR 0 3
42876: PPUSH
42877: LD_EXP 68
42881: PUSH
42882: LD_VAR 0 3
42886: ARRAY
42887: PUSH
42888: LD_VAR 0 1
42892: DIFF
42893: PPUSH
42894: CALL_OW 1
42898: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
42899: LD_VAR 0 1
42903: PUSH
42904: LD_EXP 58
42908: PUSH
42909: LD_VAR 0 3
42913: ARRAY
42914: IN
42915: IFFALSE 42954
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
42917: LD_ADDR_EXP 58
42921: PUSH
42922: LD_EXP 58
42926: PPUSH
42927: LD_VAR 0 3
42931: PPUSH
42932: LD_EXP 58
42936: PUSH
42937: LD_VAR 0 3
42941: ARRAY
42942: PUSH
42943: LD_VAR 0 1
42947: DIFF
42948: PPUSH
42949: CALL_OW 1
42953: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
42954: LD_VAR 0 1
42958: PUSH
42959: LD_EXP 57
42963: PUSH
42964: LD_VAR 0 3
42968: ARRAY
42969: IN
42970: IFFALSE 43009
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
42972: LD_ADDR_EXP 57
42976: PUSH
42977: LD_EXP 57
42981: PPUSH
42982: LD_VAR 0 3
42986: PPUSH
42987: LD_EXP 57
42991: PUSH
42992: LD_VAR 0 3
42996: ARRAY
42997: PUSH
42998: LD_VAR 0 1
43002: DIFF
43003: PPUSH
43004: CALL_OW 1
43008: ST_TO_ADDR
// end ; break ;
43009: GO 43013
// end ;
43011: GO 42087
43013: POP
43014: POP
// end ;
43015: LD_VAR 0 2
43019: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
43020: LD_INT 0
43022: PPUSH
43023: PPUSH
43024: PPUSH
// if not mc_bases or not skirmish then
43025: LD_EXP 49
43029: NOT
43030: PUSH
43031: LD_EXP 47
43035: NOT
43036: OR
43037: IFFALSE 43041
// exit ;
43039: GO 43256
// for i = 1 to mc_bases do
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: DOUBLE
43047: LD_INT 1
43049: DEC
43050: ST_TO_ADDR
43051: LD_EXP 49
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43254
// begin if building in mc_construct_list [ i ] then
43059: LD_VAR 0 1
43063: PUSH
43064: LD_EXP 56
43068: PUSH
43069: LD_VAR 0 3
43073: ARRAY
43074: IN
43075: IFFALSE 43252
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
43077: LD_ADDR_EXP 56
43081: PUSH
43082: LD_EXP 56
43086: PPUSH
43087: LD_VAR 0 3
43091: PPUSH
43092: LD_EXP 56
43096: PUSH
43097: LD_VAR 0 3
43101: ARRAY
43102: PUSH
43103: LD_VAR 0 1
43107: DIFF
43108: PPUSH
43109: CALL_OW 1
43113: ST_TO_ADDR
// if building in mc_lab [ i ] then
43114: LD_VAR 0 1
43118: PUSH
43119: LD_EXP 82
43123: PUSH
43124: LD_VAR 0 3
43128: ARRAY
43129: IN
43130: IFFALSE 43185
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
43132: LD_ADDR_EXP 83
43136: PUSH
43137: LD_EXP 83
43141: PPUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: LD_EXP 83
43151: PUSH
43152: LD_VAR 0 3
43156: ARRAY
43157: PPUSH
43158: LD_INT 1
43160: PPUSH
43161: LD_EXP 83
43165: PUSH
43166: LD_VAR 0 3
43170: ARRAY
43171: PPUSH
43172: LD_INT 0
43174: PPUSH
43175: CALL 50743 0 4
43179: PPUSH
43180: CALL_OW 1
43184: ST_TO_ADDR
// if not building in mc_bases [ i ] then
43185: LD_VAR 0 1
43189: PUSH
43190: LD_EXP 49
43194: PUSH
43195: LD_VAR 0 3
43199: ARRAY
43200: IN
43201: NOT
43202: IFFALSE 43248
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43204: LD_ADDR_EXP 49
43208: PUSH
43209: LD_EXP 49
43213: PPUSH
43214: LD_VAR 0 3
43218: PUSH
43219: LD_EXP 49
43223: PUSH
43224: LD_VAR 0 3
43228: ARRAY
43229: PUSH
43230: LD_INT 1
43232: PLUS
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PPUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL 51325 0 3
43247: ST_TO_ADDR
// exit ;
43248: POP
43249: POP
43250: GO 43256
// end ; end ;
43252: GO 43056
43254: POP
43255: POP
// end ;
43256: LD_VAR 0 2
43260: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
43261: LD_INT 0
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
// if not mc_bases or not skirmish then
43270: LD_EXP 49
43274: NOT
43275: PUSH
43276: LD_EXP 47
43280: NOT
43281: OR
43282: IFFALSE 43286
// exit ;
43284: GO 43947
// for i = 1 to mc_bases do
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: DOUBLE
43292: LD_INT 1
43294: DEC
43295: ST_TO_ADDR
43296: LD_EXP 49
43300: PUSH
43301: FOR_TO
43302: IFFALSE 43945
// begin if building in mc_construct_list [ i ] then
43304: LD_VAR 0 1
43308: PUSH
43309: LD_EXP 56
43313: PUSH
43314: LD_VAR 0 3
43318: ARRAY
43319: IN
43320: IFFALSE 43943
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
43322: LD_ADDR_EXP 56
43326: PUSH
43327: LD_EXP 56
43331: PPUSH
43332: LD_VAR 0 3
43336: PPUSH
43337: LD_EXP 56
43341: PUSH
43342: LD_VAR 0 3
43346: ARRAY
43347: PUSH
43348: LD_VAR 0 1
43352: DIFF
43353: PPUSH
43354: CALL_OW 1
43358: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43359: LD_ADDR_EXP 49
43363: PUSH
43364: LD_EXP 49
43368: PPUSH
43369: LD_VAR 0 3
43373: PUSH
43374: LD_EXP 49
43378: PUSH
43379: LD_VAR 0 3
43383: ARRAY
43384: PUSH
43385: LD_INT 1
43387: PLUS
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PPUSH
43393: LD_VAR 0 1
43397: PPUSH
43398: CALL 51325 0 3
43402: ST_TO_ADDR
// btype := GetBType ( building ) ;
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 266
43417: ST_TO_ADDR
// side := GetSide ( building ) ;
43418: LD_ADDR_VAR 0 8
43422: PUSH
43423: LD_VAR 0 1
43427: PPUSH
43428: CALL_OW 255
43432: ST_TO_ADDR
// if btype = b_lab then
43433: LD_VAR 0 5
43437: PUSH
43438: LD_INT 6
43440: EQUAL
43441: IFFALSE 43491
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
43443: LD_ADDR_EXP 82
43447: PUSH
43448: LD_EXP 82
43452: PPUSH
43453: LD_VAR 0 3
43457: PUSH
43458: LD_EXP 82
43462: PUSH
43463: LD_VAR 0 3
43467: ARRAY
43468: PUSH
43469: LD_INT 1
43471: PLUS
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PPUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL 51325 0 3
43486: ST_TO_ADDR
// exit ;
43487: POP
43488: POP
43489: GO 43947
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
43491: LD_VAR 0 5
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: LD_INT 4
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: IN
43510: IFFALSE 43634
// begin if btype = b_armoury then
43512: LD_VAR 0 5
43516: PUSH
43517: LD_INT 4
43519: EQUAL
43520: IFFALSE 43530
// btype := b_barracks ;
43522: LD_ADDR_VAR 0 5
43526: PUSH
43527: LD_INT 5
43529: ST_TO_ADDR
// if btype = b_depot then
43530: LD_VAR 0 5
43534: PUSH
43535: LD_INT 0
43537: EQUAL
43538: IFFALSE 43548
// btype := b_warehouse ;
43540: LD_ADDR_VAR 0 5
43544: PUSH
43545: LD_INT 1
43547: ST_TO_ADDR
// if btype = b_workshop then
43548: LD_VAR 0 5
43552: PUSH
43553: LD_INT 2
43555: EQUAL
43556: IFFALSE 43566
// btype := b_factory ;
43558: LD_ADDR_VAR 0 5
43562: PUSH
43563: LD_INT 3
43565: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
43566: LD_VAR 0 5
43570: PPUSH
43571: LD_VAR 0 8
43575: PPUSH
43576: CALL_OW 323
43580: PUSH
43581: LD_INT 1
43583: EQUAL
43584: IFFALSE 43630
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
43586: LD_ADDR_EXP 81
43590: PUSH
43591: LD_EXP 81
43595: PPUSH
43596: LD_VAR 0 3
43600: PUSH
43601: LD_EXP 81
43605: PUSH
43606: LD_VAR 0 3
43610: ARRAY
43611: PUSH
43612: LD_INT 1
43614: PLUS
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PPUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL 51325 0 3
43629: ST_TO_ADDR
// exit ;
43630: POP
43631: POP
43632: GO 43947
// end ; if btype in [ b_bunker , b_turret ] then
43634: LD_VAR 0 5
43638: PUSH
43639: LD_INT 32
43641: PUSH
43642: LD_INT 33
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: IN
43649: IFFALSE 43939
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
43651: LD_ADDR_EXP 57
43655: PUSH
43656: LD_EXP 57
43660: PPUSH
43661: LD_VAR 0 3
43665: PUSH
43666: LD_EXP 57
43670: PUSH
43671: LD_VAR 0 3
43675: ARRAY
43676: PUSH
43677: LD_INT 1
43679: PLUS
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PPUSH
43685: LD_VAR 0 1
43689: PPUSH
43690: CALL 51325 0 3
43694: ST_TO_ADDR
// if btype = b_bunker then
43695: LD_VAR 0 5
43699: PUSH
43700: LD_INT 32
43702: EQUAL
43703: IFFALSE 43939
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43705: LD_ADDR_EXP 58
43709: PUSH
43710: LD_EXP 58
43714: PPUSH
43715: LD_VAR 0 3
43719: PUSH
43720: LD_EXP 58
43724: PUSH
43725: LD_VAR 0 3
43729: ARRAY
43730: PUSH
43731: LD_INT 1
43733: PLUS
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PPUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL 51325 0 3
43748: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
43749: LD_ADDR_VAR 0 6
43753: PUSH
43754: LD_EXP 49
43758: PUSH
43759: LD_VAR 0 3
43763: ARRAY
43764: PPUSH
43765: LD_INT 25
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: LD_INT 54
43780: PUSH
43781: EMPTY
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PPUSH
43792: CALL_OW 72
43796: ST_TO_ADDR
// if tmp then
43797: LD_VAR 0 6
43801: IFFALSE 43807
// exit ;
43803: POP
43804: POP
43805: GO 43947
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43807: LD_ADDR_VAR 0 6
43811: PUSH
43812: LD_EXP 49
43816: PUSH
43817: LD_VAR 0 3
43821: ARRAY
43822: PPUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 30
43828: PUSH
43829: LD_INT 4
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 30
43838: PUSH
43839: LD_INT 5
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: PPUSH
43851: CALL_OW 72
43855: ST_TO_ADDR
// if not tmp then
43856: LD_VAR 0 6
43860: NOT
43861: IFFALSE 43867
// exit ;
43863: POP
43864: POP
43865: GO 43947
// for j in tmp do
43867: LD_ADDR_VAR 0 4
43871: PUSH
43872: LD_VAR 0 6
43876: PUSH
43877: FOR_IN
43878: IFFALSE 43937
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
43880: LD_ADDR_VAR 0 7
43884: PUSH
43885: LD_VAR 0 4
43889: PPUSH
43890: CALL_OW 313
43894: PPUSH
43895: LD_INT 25
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PPUSH
43905: CALL_OW 72
43909: ST_TO_ADDR
// if units then
43910: LD_VAR 0 7
43914: IFFALSE 43935
// begin ComExitBuilding ( units [ 1 ] ) ;
43916: LD_VAR 0 7
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: PPUSH
43925: CALL_OW 122
// exit ;
43929: POP
43930: POP
43931: POP
43932: POP
43933: GO 43947
// end ; end ;
43935: GO 43877
43937: POP
43938: POP
// end ; end ; exit ;
43939: POP
43940: POP
43941: GO 43947
// end ; end ;
43943: GO 43301
43945: POP
43946: POP
// end ;
43947: LD_VAR 0 2
43951: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
43952: LD_INT 0
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
// if not mc_bases or not skirmish then
43961: LD_EXP 49
43965: NOT
43966: PUSH
43967: LD_EXP 47
43971: NOT
43972: OR
43973: IFFALSE 43977
// exit ;
43975: GO 44208
// btype := GetBType ( building ) ;
43977: LD_ADDR_VAR 0 6
43981: PUSH
43982: LD_VAR 0 1
43986: PPUSH
43987: CALL_OW 266
43991: ST_TO_ADDR
// x := GetX ( building ) ;
43992: LD_ADDR_VAR 0 7
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 250
44006: ST_TO_ADDR
// y := GetY ( building ) ;
44007: LD_ADDR_VAR 0 8
44011: PUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 251
44021: ST_TO_ADDR
// d := GetDir ( building ) ;
44022: LD_ADDR_VAR 0 9
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: CALL_OW 254
44036: ST_TO_ADDR
// for i = 1 to mc_bases do
44037: LD_ADDR_VAR 0 4
44041: PUSH
44042: DOUBLE
44043: LD_INT 1
44045: DEC
44046: ST_TO_ADDR
44047: LD_EXP 49
44051: PUSH
44052: FOR_TO
44053: IFFALSE 44206
// begin if not mc_build_list [ i ] then
44055: LD_EXP 54
44059: PUSH
44060: LD_VAR 0 4
44064: ARRAY
44065: NOT
44066: IFFALSE 44070
// continue ;
44068: GO 44052
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
44070: LD_VAR 0 6
44074: PUSH
44075: LD_VAR 0 7
44079: PUSH
44080: LD_VAR 0 8
44084: PUSH
44085: LD_VAR 0 9
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: PPUSH
44096: LD_EXP 54
44100: PUSH
44101: LD_VAR 0 4
44105: ARRAY
44106: PUSH
44107: LD_INT 1
44109: ARRAY
44110: PPUSH
44111: CALL 57494 0 2
44115: IFFALSE 44204
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
44117: LD_ADDR_EXP 54
44121: PUSH
44122: LD_EXP 54
44126: PPUSH
44127: LD_VAR 0 4
44131: PPUSH
44132: LD_EXP 54
44136: PUSH
44137: LD_VAR 0 4
44141: ARRAY
44142: PPUSH
44143: LD_INT 1
44145: PPUSH
44146: CALL_OW 3
44150: PPUSH
44151: CALL_OW 1
44155: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
44156: LD_ADDR_EXP 56
44160: PUSH
44161: LD_EXP 56
44165: PPUSH
44166: LD_VAR 0 4
44170: PUSH
44171: LD_EXP 56
44175: PUSH
44176: LD_VAR 0 4
44180: ARRAY
44181: PUSH
44182: LD_INT 1
44184: PLUS
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PPUSH
44190: LD_VAR 0 1
44194: PPUSH
44195: CALL 51325 0 3
44199: ST_TO_ADDR
// exit ;
44200: POP
44201: POP
44202: GO 44208
// end ; end ;
44204: GO 44052
44206: POP
44207: POP
// end ;
44208: LD_VAR 0 3
44212: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
44213: LD_INT 0
44215: PPUSH
44216: PPUSH
44217: PPUSH
// if not mc_bases or not skirmish then
44218: LD_EXP 49
44222: NOT
44223: PUSH
44224: LD_EXP 47
44228: NOT
44229: OR
44230: IFFALSE 44234
// exit ;
44232: GO 44424
// for i = 1 to mc_bases do
44234: LD_ADDR_VAR 0 4
44238: PUSH
44239: DOUBLE
44240: LD_INT 1
44242: DEC
44243: ST_TO_ADDR
44244: LD_EXP 49
44248: PUSH
44249: FOR_TO
44250: IFFALSE 44337
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
44252: LD_VAR 0 1
44256: PUSH
44257: LD_EXP 57
44261: PUSH
44262: LD_VAR 0 4
44266: ARRAY
44267: IN
44268: PUSH
44269: LD_VAR 0 1
44273: PUSH
44274: LD_EXP 58
44278: PUSH
44279: LD_VAR 0 4
44283: ARRAY
44284: IN
44285: NOT
44286: AND
44287: IFFALSE 44335
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
44289: LD_ADDR_EXP 58
44293: PUSH
44294: LD_EXP 58
44298: PPUSH
44299: LD_VAR 0 4
44303: PUSH
44304: LD_EXP 58
44308: PUSH
44309: LD_VAR 0 4
44313: ARRAY
44314: PUSH
44315: LD_INT 1
44317: PLUS
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PPUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL 51325 0 3
44332: ST_TO_ADDR
// break ;
44333: GO 44337
// end ; end ;
44335: GO 44249
44337: POP
44338: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 257
44348: PUSH
44349: LD_EXP 75
44353: IN
44354: PUSH
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 266
44364: PUSH
44365: LD_INT 5
44367: EQUAL
44368: AND
44369: PUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: CALL_OW 110
44379: PUSH
44380: LD_INT 18
44382: NONEQUAL
44383: AND
44384: IFFALSE 44424
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
44386: LD_VAR 0 2
44390: PPUSH
44391: CALL_OW 257
44395: PUSH
44396: LD_INT 5
44398: PUSH
44399: LD_INT 8
44401: PUSH
44402: LD_INT 9
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: IN
44410: IFFALSE 44424
// SetClass ( unit , 1 ) ;
44412: LD_VAR 0 2
44416: PPUSH
44417: LD_INT 1
44419: PPUSH
44420: CALL_OW 336
// end ;
44424: LD_VAR 0 3
44428: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
44429: LD_INT 0
44431: PPUSH
44432: PPUSH
// if not mc_bases or not skirmish then
44433: LD_EXP 49
44437: NOT
44438: PUSH
44439: LD_EXP 47
44443: NOT
44444: OR
44445: IFFALSE 44449
// exit ;
44447: GO 44565
// if GetLives ( abandoned_vehicle ) > 250 then
44449: LD_VAR 0 2
44453: PPUSH
44454: CALL_OW 256
44458: PUSH
44459: LD_INT 250
44461: GREATER
44462: IFFALSE 44466
// exit ;
44464: GO 44565
// for i = 1 to mc_bases do
44466: LD_ADDR_VAR 0 6
44470: PUSH
44471: DOUBLE
44472: LD_INT 1
44474: DEC
44475: ST_TO_ADDR
44476: LD_EXP 49
44480: PUSH
44481: FOR_TO
44482: IFFALSE 44563
// begin if driver in mc_bases [ i ] then
44484: LD_VAR 0 1
44488: PUSH
44489: LD_EXP 49
44493: PUSH
44494: LD_VAR 0 6
44498: ARRAY
44499: IN
44500: IFFALSE 44561
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
44502: LD_VAR 0 1
44506: PPUSH
44507: LD_EXP 49
44511: PUSH
44512: LD_VAR 0 6
44516: ARRAY
44517: PPUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 30
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 30
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: PPUSH
44546: CALL_OW 72
44550: PUSH
44551: LD_INT 1
44553: ARRAY
44554: PPUSH
44555: CALL_OW 112
// break ;
44559: GO 44563
// end ; end ;
44561: GO 44481
44563: POP
44564: POP
// end ; end_of_file
44565: LD_VAR 0 5
44569: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44570: LD_INT 0
44572: PPUSH
44573: PPUSH
// if exist_mode then
44574: LD_VAR 0 2
44578: IFFALSE 44603
// unit := CreateCharacter ( prefix & ident ) else
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: LD_VAR 0 3
44589: PUSH
44590: LD_VAR 0 1
44594: STR
44595: PPUSH
44596: CALL_OW 34
44600: ST_TO_ADDR
44601: GO 44618
// unit := NewCharacter ( ident ) ;
44603: LD_ADDR_VAR 0 5
44607: PUSH
44608: LD_VAR 0 1
44612: PPUSH
44613: CALL_OW 25
44617: ST_TO_ADDR
// result := unit ;
44618: LD_ADDR_VAR 0 4
44622: PUSH
44623: LD_VAR 0 5
44627: ST_TO_ADDR
// end ;
44628: LD_VAR 0 4
44632: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44633: LD_INT 0
44635: PPUSH
44636: PPUSH
// if not side or not nation then
44637: LD_VAR 0 1
44641: NOT
44642: PUSH
44643: LD_VAR 0 2
44647: NOT
44648: OR
44649: IFFALSE 44653
// exit ;
44651: GO 45289
// case nation of nation_american :
44653: LD_VAR 0 2
44657: PUSH
44658: LD_INT 1
44660: DOUBLE
44661: EQUAL
44662: IFTRUE 44666
44664: GO 44836
44666: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
44667: LD_ADDR_VAR 0 4
44671: PUSH
44672: LD_INT 35
44674: PUSH
44675: LD_INT 45
44677: PUSH
44678: LD_INT 46
44680: PUSH
44681: LD_INT 47
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 6
44692: PUSH
44693: LD_INT 15
44695: PUSH
44696: LD_INT 16
44698: PUSH
44699: LD_INT 7
44701: PUSH
44702: LD_INT 12
44704: PUSH
44705: LD_INT 13
44707: PUSH
44708: LD_INT 10
44710: PUSH
44711: LD_INT 14
44713: PUSH
44714: LD_INT 20
44716: PUSH
44717: LD_INT 21
44719: PUSH
44720: LD_INT 22
44722: PUSH
44723: LD_INT 25
44725: PUSH
44726: LD_INT 32
44728: PUSH
44729: LD_INT 27
44731: PUSH
44732: LD_INT 36
44734: PUSH
44735: LD_INT 69
44737: PUSH
44738: LD_INT 39
44740: PUSH
44741: LD_INT 34
44743: PUSH
44744: LD_INT 40
44746: PUSH
44747: LD_INT 48
44749: PUSH
44750: LD_INT 49
44752: PUSH
44753: LD_INT 50
44755: PUSH
44756: LD_INT 51
44758: PUSH
44759: LD_INT 52
44761: PUSH
44762: LD_INT 53
44764: PUSH
44765: LD_INT 54
44767: PUSH
44768: LD_INT 55
44770: PUSH
44771: LD_INT 56
44773: PUSH
44774: LD_INT 57
44776: PUSH
44777: LD_INT 58
44779: PUSH
44780: LD_INT 59
44782: PUSH
44783: LD_INT 60
44785: PUSH
44786: LD_INT 61
44788: PUSH
44789: LD_INT 62
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
44834: GO 45213
44836: LD_INT 2
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44844
44842: GO 45022
44844: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
44845: LD_ADDR_VAR 0 4
44849: PUSH
44850: LD_INT 35
44852: PUSH
44853: LD_INT 45
44855: PUSH
44856: LD_INT 46
44858: PUSH
44859: LD_INT 47
44861: PUSH
44862: LD_INT 70
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 11
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: LD_INT 5
44879: PUSH
44880: LD_INT 6
44882: PUSH
44883: LD_INT 15
44885: PUSH
44886: LD_INT 18
44888: PUSH
44889: LD_INT 7
44891: PUSH
44892: LD_INT 17
44894: PUSH
44895: LD_INT 8
44897: PUSH
44898: LD_INT 20
44900: PUSH
44901: LD_INT 21
44903: PUSH
44904: LD_INT 22
44906: PUSH
44907: LD_INT 72
44909: PUSH
44910: LD_INT 26
44912: PUSH
44913: LD_INT 69
44915: PUSH
44916: LD_INT 39
44918: PUSH
44919: LD_INT 40
44921: PUSH
44922: LD_INT 41
44924: PUSH
44925: LD_INT 42
44927: PUSH
44928: LD_INT 43
44930: PUSH
44931: LD_INT 48
44933: PUSH
44934: LD_INT 49
44936: PUSH
44937: LD_INT 50
44939: PUSH
44940: LD_INT 51
44942: PUSH
44943: LD_INT 52
44945: PUSH
44946: LD_INT 53
44948: PUSH
44949: LD_INT 54
44951: PUSH
44952: LD_INT 55
44954: PUSH
44955: LD_INT 56
44957: PUSH
44958: LD_INT 60
44960: PUSH
44961: LD_INT 61
44963: PUSH
44964: LD_INT 62
44966: PUSH
44967: LD_INT 66
44969: PUSH
44970: LD_INT 67
44972: PUSH
44973: LD_INT 68
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
45020: GO 45213
45022: LD_INT 3
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45030
45028: GO 45212
45030: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
45031: LD_ADDR_VAR 0 4
45035: PUSH
45036: LD_INT 46
45038: PUSH
45039: LD_INT 47
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 11
45050: PUSH
45051: LD_INT 9
45053: PUSH
45054: LD_INT 20
45056: PUSH
45057: LD_INT 19
45059: PUSH
45060: LD_INT 21
45062: PUSH
45063: LD_INT 24
45065: PUSH
45066: LD_INT 22
45068: PUSH
45069: LD_INT 25
45071: PUSH
45072: LD_INT 28
45074: PUSH
45075: LD_INT 29
45077: PUSH
45078: LD_INT 30
45080: PUSH
45081: LD_INT 31
45083: PUSH
45084: LD_INT 37
45086: PUSH
45087: LD_INT 38
45089: PUSH
45090: LD_INT 32
45092: PUSH
45093: LD_INT 27
45095: PUSH
45096: LD_INT 33
45098: PUSH
45099: LD_INT 69
45101: PUSH
45102: LD_INT 39
45104: PUSH
45105: LD_INT 34
45107: PUSH
45108: LD_INT 40
45110: PUSH
45111: LD_INT 71
45113: PUSH
45114: LD_INT 23
45116: PUSH
45117: LD_INT 44
45119: PUSH
45120: LD_INT 48
45122: PUSH
45123: LD_INT 49
45125: PUSH
45126: LD_INT 50
45128: PUSH
45129: LD_INT 51
45131: PUSH
45132: LD_INT 52
45134: PUSH
45135: LD_INT 53
45137: PUSH
45138: LD_INT 54
45140: PUSH
45141: LD_INT 55
45143: PUSH
45144: LD_INT 56
45146: PUSH
45147: LD_INT 57
45149: PUSH
45150: LD_INT 58
45152: PUSH
45153: LD_INT 59
45155: PUSH
45156: LD_INT 63
45158: PUSH
45159: LD_INT 64
45161: PUSH
45162: LD_INT 65
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
45210: GO 45213
45212: POP
// if state > - 1 and state < 3 then
45213: LD_VAR 0 3
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: GREATER
45222: PUSH
45223: LD_VAR 0 3
45227: PUSH
45228: LD_INT 3
45230: LESS
45231: AND
45232: IFFALSE 45289
// for i in result do
45234: LD_ADDR_VAR 0 5
45238: PUSH
45239: LD_VAR 0 4
45243: PUSH
45244: FOR_IN
45245: IFFALSE 45287
// if GetTech ( i , side ) <> state then
45247: LD_VAR 0 5
45251: PPUSH
45252: LD_VAR 0 1
45256: PPUSH
45257: CALL_OW 321
45261: PUSH
45262: LD_VAR 0 3
45266: NONEQUAL
45267: IFFALSE 45285
// result := result diff i ;
45269: LD_ADDR_VAR 0 4
45273: PUSH
45274: LD_VAR 0 4
45278: PUSH
45279: LD_VAR 0 5
45283: DIFF
45284: ST_TO_ADDR
45285: GO 45244
45287: POP
45288: POP
// end ;
45289: LD_VAR 0 4
45293: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
45298: PPUSH
// result := true ;
45299: LD_ADDR_VAR 0 3
45303: PUSH
45304: LD_INT 1
45306: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45307: LD_ADDR_VAR 0 5
45311: PUSH
45312: LD_VAR 0 2
45316: PPUSH
45317: CALL_OW 480
45321: ST_TO_ADDR
// if not tmp then
45322: LD_VAR 0 5
45326: NOT
45327: IFFALSE 45331
// exit ;
45329: GO 45380
// for i in tmp do
45331: LD_ADDR_VAR 0 4
45335: PUSH
45336: LD_VAR 0 5
45340: PUSH
45341: FOR_IN
45342: IFFALSE 45378
// if GetTech ( i , side ) <> state_researched then
45344: LD_VAR 0 4
45348: PPUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: CALL_OW 321
45358: PUSH
45359: LD_INT 2
45361: NONEQUAL
45362: IFFALSE 45376
// begin result := false ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 0
45371: ST_TO_ADDR
// exit ;
45372: POP
45373: POP
45374: GO 45380
// end ;
45376: GO 45341
45378: POP
45379: POP
// end ;
45380: LD_VAR 0 3
45384: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45385: LD_INT 0
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45400: LD_VAR 0 1
45404: NOT
45405: PUSH
45406: LD_VAR 0 1
45410: PPUSH
45411: CALL_OW 257
45415: PUSH
45416: LD_INT 9
45418: NONEQUAL
45419: OR
45420: IFFALSE 45424
// exit ;
45422: GO 45997
// side := GetSide ( unit ) ;
45424: LD_ADDR_VAR 0 9
45428: PUSH
45429: LD_VAR 0 1
45433: PPUSH
45434: CALL_OW 255
45438: ST_TO_ADDR
// tech_space := tech_spacanom ;
45439: LD_ADDR_VAR 0 12
45443: PUSH
45444: LD_INT 29
45446: ST_TO_ADDR
// tech_time := tech_taurad ;
45447: LD_ADDR_VAR 0 13
45451: PUSH
45452: LD_INT 28
45454: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45455: LD_ADDR_VAR 0 11
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: CALL_OW 310
45469: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45470: LD_VAR 0 11
45474: PPUSH
45475: CALL_OW 247
45479: PUSH
45480: LD_INT 2
45482: EQUAL
45483: IFFALSE 45487
// exit ;
45485: GO 45997
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45487: LD_ADDR_VAR 0 8
45491: PUSH
45492: LD_INT 81
45494: PUSH
45495: LD_VAR 0 9
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 21
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PPUSH
45525: CALL_OW 69
45529: ST_TO_ADDR
// if not tmp then
45530: LD_VAR 0 8
45534: NOT
45535: IFFALSE 45539
// exit ;
45537: GO 45997
// if in_unit then
45539: LD_VAR 0 11
45543: IFFALSE 45567
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45545: LD_ADDR_VAR 0 10
45549: PUSH
45550: LD_VAR 0 8
45554: PPUSH
45555: LD_VAR 0 11
45559: PPUSH
45560: CALL_OW 74
45564: ST_TO_ADDR
45565: GO 45587
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45567: LD_ADDR_VAR 0 10
45571: PUSH
45572: LD_VAR 0 8
45576: PPUSH
45577: LD_VAR 0 1
45581: PPUSH
45582: CALL_OW 74
45586: ST_TO_ADDR
// if not enemy then
45587: LD_VAR 0 10
45591: NOT
45592: IFFALSE 45596
// exit ;
45594: GO 45997
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45596: LD_VAR 0 11
45600: PUSH
45601: LD_VAR 0 11
45605: PPUSH
45606: LD_VAR 0 10
45610: PPUSH
45611: CALL_OW 296
45615: PUSH
45616: LD_INT 13
45618: GREATER
45619: AND
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: LD_VAR 0 10
45630: PPUSH
45631: CALL_OW 296
45635: PUSH
45636: LD_INT 12
45638: GREATER
45639: OR
45640: IFFALSE 45644
// exit ;
45642: GO 45997
// missile := [ 1 ] ;
45644: LD_ADDR_VAR 0 14
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45655: LD_VAR 0 9
45659: PPUSH
45660: LD_VAR 0 12
45664: PPUSH
45665: CALL_OW 325
45669: IFFALSE 45698
// missile := Insert ( missile , missile + 1 , 2 ) ;
45671: LD_ADDR_VAR 0 14
45675: PUSH
45676: LD_VAR 0 14
45680: PPUSH
45681: LD_VAR 0 14
45685: PUSH
45686: LD_INT 1
45688: PLUS
45689: PPUSH
45690: LD_INT 2
45692: PPUSH
45693: CALL_OW 2
45697: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45698: LD_VAR 0 9
45702: PPUSH
45703: LD_VAR 0 13
45707: PPUSH
45708: CALL_OW 325
45712: PUSH
45713: LD_VAR 0 10
45717: PPUSH
45718: CALL_OW 255
45722: PPUSH
45723: LD_VAR 0 13
45727: PPUSH
45728: CALL_OW 325
45732: NOT
45733: AND
45734: IFFALSE 45763
// missile := Insert ( missile , missile + 1 , 3 ) ;
45736: LD_ADDR_VAR 0 14
45740: PUSH
45741: LD_VAR 0 14
45745: PPUSH
45746: LD_VAR 0 14
45750: PUSH
45751: LD_INT 1
45753: PLUS
45754: PPUSH
45755: LD_INT 3
45757: PPUSH
45758: CALL_OW 2
45762: ST_TO_ADDR
// if missile < 2 then
45763: LD_VAR 0 14
45767: PUSH
45768: LD_INT 2
45770: LESS
45771: IFFALSE 45775
// exit ;
45773: GO 45997
// x := GetX ( enemy ) ;
45775: LD_ADDR_VAR 0 4
45779: PUSH
45780: LD_VAR 0 10
45784: PPUSH
45785: CALL_OW 250
45789: ST_TO_ADDR
// y := GetY ( enemy ) ;
45790: LD_ADDR_VAR 0 5
45794: PUSH
45795: LD_VAR 0 10
45799: PPUSH
45800: CALL_OW 251
45804: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45805: LD_ADDR_VAR 0 6
45809: PUSH
45810: LD_VAR 0 4
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PPUSH
45819: LD_INT 1
45821: PPUSH
45822: CALL_OW 12
45826: PLUS
45827: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45828: LD_ADDR_VAR 0 7
45832: PUSH
45833: LD_VAR 0 5
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PPUSH
45842: LD_INT 1
45844: PPUSH
45845: CALL_OW 12
45849: PLUS
45850: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45851: LD_VAR 0 6
45855: PPUSH
45856: LD_VAR 0 7
45860: PPUSH
45861: CALL_OW 488
45865: NOT
45866: IFFALSE 45888
// begin _x := x ;
45868: LD_ADDR_VAR 0 6
45872: PUSH
45873: LD_VAR 0 4
45877: ST_TO_ADDR
// _y := y ;
45878: LD_ADDR_VAR 0 7
45882: PUSH
45883: LD_VAR 0 5
45887: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45888: LD_ADDR_VAR 0 3
45892: PUSH
45893: LD_INT 1
45895: PPUSH
45896: LD_VAR 0 14
45900: PPUSH
45901: CALL_OW 12
45905: ST_TO_ADDR
// case i of 1 :
45906: LD_VAR 0 3
45910: PUSH
45911: LD_INT 1
45913: DOUBLE
45914: EQUAL
45915: IFTRUE 45919
45917: GO 45936
45919: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45920: LD_VAR 0 1
45924: PPUSH
45925: LD_VAR 0 10
45929: PPUSH
45930: CALL_OW 115
45934: GO 45997
45936: LD_INT 2
45938: DOUBLE
45939: EQUAL
45940: IFTRUE 45944
45942: GO 45966
45944: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45945: LD_VAR 0 1
45949: PPUSH
45950: LD_VAR 0 6
45954: PPUSH
45955: LD_VAR 0 7
45959: PPUSH
45960: CALL_OW 153
45964: GO 45997
45966: LD_INT 3
45968: DOUBLE
45969: EQUAL
45970: IFTRUE 45974
45972: GO 45996
45974: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45975: LD_VAR 0 1
45979: PPUSH
45980: LD_VAR 0 6
45984: PPUSH
45985: LD_VAR 0 7
45989: PPUSH
45990: CALL_OW 154
45994: GO 45997
45996: POP
// end ;
45997: LD_VAR 0 2
46001: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46002: LD_INT 0
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
// if not unit or not building then
46010: LD_VAR 0 1
46014: NOT
46015: PUSH
46016: LD_VAR 0 2
46020: NOT
46021: OR
46022: IFFALSE 46026
// exit ;
46024: GO 46184
// x := GetX ( building ) ;
46026: LD_ADDR_VAR 0 5
46030: PUSH
46031: LD_VAR 0 2
46035: PPUSH
46036: CALL_OW 250
46040: ST_TO_ADDR
// y := GetY ( building ) ;
46041: LD_ADDR_VAR 0 6
46045: PUSH
46046: LD_VAR 0 2
46050: PPUSH
46051: CALL_OW 251
46055: ST_TO_ADDR
// for i = 0 to 5 do
46056: LD_ADDR_VAR 0 4
46060: PUSH
46061: DOUBLE
46062: LD_INT 0
46064: DEC
46065: ST_TO_ADDR
46066: LD_INT 5
46068: PUSH
46069: FOR_TO
46070: IFFALSE 46182
// begin _x := ShiftX ( x , i , 3 ) ;
46072: LD_ADDR_VAR 0 7
46076: PUSH
46077: LD_VAR 0 5
46081: PPUSH
46082: LD_VAR 0 4
46086: PPUSH
46087: LD_INT 3
46089: PPUSH
46090: CALL_OW 272
46094: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46095: LD_ADDR_VAR 0 8
46099: PUSH
46100: LD_VAR 0 6
46104: PPUSH
46105: LD_VAR 0 4
46109: PPUSH
46110: LD_INT 3
46112: PPUSH
46113: CALL_OW 273
46117: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46118: LD_VAR 0 7
46122: PPUSH
46123: LD_VAR 0 8
46127: PPUSH
46128: CALL_OW 488
46132: NOT
46133: IFFALSE 46137
// continue ;
46135: GO 46069
// if HexInfo ( _x , _y ) = 0 then
46137: LD_VAR 0 7
46141: PPUSH
46142: LD_VAR 0 8
46146: PPUSH
46147: CALL_OW 428
46151: PUSH
46152: LD_INT 0
46154: EQUAL
46155: IFFALSE 46180
// begin ComMoveXY ( unit , _x , _y ) ;
46157: LD_VAR 0 1
46161: PPUSH
46162: LD_VAR 0 7
46166: PPUSH
46167: LD_VAR 0 8
46171: PPUSH
46172: CALL_OW 111
// exit ;
46176: POP
46177: POP
46178: GO 46184
// end ; end ;
46180: GO 46069
46182: POP
46183: POP
// end ;
46184: LD_VAR 0 3
46188: RET
// export function ScanBase ( side , base_area ) ; begin
46189: LD_INT 0
46191: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46192: LD_ADDR_VAR 0 3
46196: PUSH
46197: LD_VAR 0 2
46201: PPUSH
46202: LD_INT 81
46204: PUSH
46205: LD_VAR 0 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PPUSH
46214: CALL_OW 70
46218: ST_TO_ADDR
// end ;
46219: LD_VAR 0 3
46223: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
46224: LD_INT 0
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
46231: LD_VAR 0 1
46235: NOT
46236: PUSH
46237: LD_EXP 49
46241: PUSH
46242: LD_VAR 0 1
46246: ARRAY
46247: NOT
46248: OR
46249: PUSH
46250: LD_VAR 0 2
46254: NOT
46255: OR
46256: PUSH
46257: LD_VAR 0 3
46261: NOT
46262: OR
46263: IFFALSE 46267
// exit ;
46265: GO 46717
// side := mc_sides [ base ] ;
46267: LD_ADDR_VAR 0 6
46271: PUSH
46272: LD_EXP 75
46276: PUSH
46277: LD_VAR 0 1
46281: ARRAY
46282: ST_TO_ADDR
// if not side then
46283: LD_VAR 0 6
46287: NOT
46288: IFFALSE 46292
// exit ;
46290: GO 46717
// for i in solds do
46292: LD_ADDR_VAR 0 7
46296: PUSH
46297: LD_VAR 0 2
46301: PUSH
46302: FOR_IN
46303: IFFALSE 46364
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
46305: LD_VAR 0 7
46309: PPUSH
46310: CALL_OW 310
46314: PPUSH
46315: CALL_OW 266
46319: PUSH
46320: LD_INT 32
46322: PUSH
46323: LD_INT 31
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: IN
46330: IFFALSE 46350
// solds := solds diff i else
46332: LD_ADDR_VAR 0 2
46336: PUSH
46337: LD_VAR 0 2
46341: PUSH
46342: LD_VAR 0 7
46346: DIFF
46347: ST_TO_ADDR
46348: GO 46362
// SetTag ( i , 18 ) ;
46350: LD_VAR 0 7
46354: PPUSH
46355: LD_INT 18
46357: PPUSH
46358: CALL_OW 109
46362: GO 46302
46364: POP
46365: POP
// if not solds then
46366: LD_VAR 0 2
46370: NOT
46371: IFFALSE 46375
// exit ;
46373: GO 46717
// repeat wait ( 0 0$1 ) ;
46375: LD_INT 35
46377: PPUSH
46378: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
46382: LD_ADDR_VAR 0 5
46386: PUSH
46387: LD_VAR 0 6
46391: PPUSH
46392: LD_VAR 0 3
46396: PPUSH
46397: CALL 46189 0 2
46401: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
46402: LD_VAR 0 5
46406: NOT
46407: PUSH
46408: LD_VAR 0 5
46412: PUSH
46413: LD_INT 3
46415: GREATER
46416: OR
46417: PUSH
46418: LD_EXP 71
46422: PUSH
46423: LD_VAR 0 1
46427: ARRAY
46428: OR
46429: IFFALSE 46470
// begin for i in solds do
46431: LD_ADDR_VAR 0 7
46435: PUSH
46436: LD_VAR 0 2
46440: PUSH
46441: FOR_IN
46442: IFFALSE 46466
// if HasTask ( i ) then
46444: LD_VAR 0 7
46448: PPUSH
46449: CALL_OW 314
46453: IFFALSE 46464
// ComStop ( i ) ;
46455: LD_VAR 0 7
46459: PPUSH
46460: CALL_OW 141
46464: GO 46441
46466: POP
46467: POP
// break ;
46468: GO 46705
// end ; for i in solds do
46470: LD_ADDR_VAR 0 7
46474: PUSH
46475: LD_VAR 0 2
46479: PUSH
46480: FOR_IN
46481: IFFALSE 46697
// begin if IsInUnit ( i ) then
46483: LD_VAR 0 7
46487: PPUSH
46488: CALL_OW 310
46492: IFFALSE 46503
// ComExitBuilding ( i ) ;
46494: LD_VAR 0 7
46498: PPUSH
46499: CALL_OW 122
// if GetLives ( i ) > 333 then
46503: LD_VAR 0 7
46507: PPUSH
46508: CALL_OW 256
46512: PUSH
46513: LD_INT 333
46515: GREATER
46516: IFFALSE 46544
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46518: LD_VAR 0 7
46522: PPUSH
46523: LD_VAR 0 5
46527: PPUSH
46528: LD_VAR 0 7
46532: PPUSH
46533: CALL_OW 74
46537: PPUSH
46538: CALL_OW 115
46542: GO 46695
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
46544: LD_ADDR_VAR 0 8
46548: PUSH
46549: LD_EXP 49
46553: PUSH
46554: LD_VAR 0 1
46558: ARRAY
46559: PPUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 30
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 30
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 30
46585: PUSH
46586: LD_INT 6
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: PPUSH
46599: CALL_OW 72
46603: PPUSH
46604: LD_VAR 0 7
46608: PPUSH
46609: CALL_OW 74
46613: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
46614: LD_VAR 0 7
46618: PPUSH
46619: LD_VAR 0 8
46623: PPUSH
46624: CALL_OW 250
46628: PPUSH
46629: LD_INT 3
46631: PPUSH
46632: LD_INT 5
46634: PPUSH
46635: CALL_OW 272
46639: PPUSH
46640: LD_VAR 0 8
46644: PPUSH
46645: CALL_OW 251
46649: PPUSH
46650: LD_INT 3
46652: PPUSH
46653: LD_INT 5
46655: PPUSH
46656: CALL_OW 273
46660: PPUSH
46661: CALL_OW 111
// SetTag ( i , 0 ) ;
46665: LD_VAR 0 7
46669: PPUSH
46670: LD_INT 0
46672: PPUSH
46673: CALL_OW 109
// solds := solds diff i ;
46677: LD_ADDR_VAR 0 2
46681: PUSH
46682: LD_VAR 0 2
46686: PUSH
46687: LD_VAR 0 7
46691: DIFF
46692: ST_TO_ADDR
// continue ;
46693: GO 46480
// end ; end ;
46695: GO 46480
46697: POP
46698: POP
// until solds ;
46699: LD_VAR 0 2
46703: IFFALSE 46375
// MC_Reset ( base , 18 ) ;
46705: LD_VAR 0 1
46709: PPUSH
46710: LD_INT 18
46712: PPUSH
46713: CALL 19797 0 2
// end ;
46717: LD_VAR 0 4
46721: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
46722: LD_INT 0
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
46732: PPUSH
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
46740: LD_ADDR_VAR 0 12
46744: PUSH
46745: LD_EXP 49
46749: PUSH
46750: LD_VAR 0 1
46754: ARRAY
46755: PPUSH
46756: LD_INT 25
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PPUSH
46766: CALL_OW 72
46770: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46771: LD_ADDR_VAR 0 8
46775: PUSH
46776: LD_EXP 49
46780: PUSH
46781: LD_VAR 0 1
46785: ARRAY
46786: PPUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 25
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 25
46802: PUSH
46803: LD_INT 5
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 25
46812: PUSH
46813: LD_INT 8
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 25
46822: PUSH
46823: LD_INT 9
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: PPUSH
46837: CALL_OW 72
46841: ST_TO_ADDR
// if not defenders and not solds then
46842: LD_VAR 0 2
46846: NOT
46847: PUSH
46848: LD_VAR 0 8
46852: NOT
46853: AND
46854: IFFALSE 46858
// exit ;
46856: GO 48224
// depot_under_attack := false ;
46858: LD_ADDR_VAR 0 16
46862: PUSH
46863: LD_INT 0
46865: ST_TO_ADDR
// sold_defenders := [ ] ;
46866: LD_ADDR_VAR 0 17
46870: PUSH
46871: EMPTY
46872: ST_TO_ADDR
// if mechs then
46873: LD_VAR 0 12
46877: IFFALSE 47006
// for i in defenders do
46879: LD_ADDR_VAR 0 5
46883: PUSH
46884: LD_VAR 0 2
46888: PUSH
46889: FOR_IN
46890: IFFALSE 47004
// begin SetTag ( i , 20 ) ;
46892: LD_VAR 0 5
46896: PPUSH
46897: LD_INT 20
46899: PPUSH
46900: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
46904: LD_VAR 0 5
46908: PPUSH
46909: CALL_OW 263
46913: PUSH
46914: LD_INT 1
46916: EQUAL
46917: PUSH
46918: LD_VAR 0 5
46922: PPUSH
46923: CALL_OW 311
46927: NOT
46928: AND
46929: PUSH
46930: LD_VAR 0 12
46934: AND
46935: IFFALSE 47002
// begin un := mechs [ 1 ] ;
46937: LD_ADDR_VAR 0 10
46941: PUSH
46942: LD_VAR 0 12
46946: PUSH
46947: LD_INT 1
46949: ARRAY
46950: ST_TO_ADDR
// ComExitBuilding ( un ) ;
46951: LD_VAR 0 10
46955: PPUSH
46956: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
46960: LD_VAR 0 10
46964: PPUSH
46965: LD_VAR 0 5
46969: PPUSH
46970: CALL_OW 180
// SetTag ( un , 19 ) ;
46974: LD_VAR 0 10
46978: PPUSH
46979: LD_INT 19
46981: PPUSH
46982: CALL_OW 109
// mechs := mechs diff un ;
46986: LD_ADDR_VAR 0 12
46990: PUSH
46991: LD_VAR 0 12
46995: PUSH
46996: LD_VAR 0 10
47000: DIFF
47001: ST_TO_ADDR
// end ; end ;
47002: GO 46889
47004: POP
47005: POP
// if solds then
47006: LD_VAR 0 8
47010: IFFALSE 47069
// for i in solds do
47012: LD_ADDR_VAR 0 5
47016: PUSH
47017: LD_VAR 0 8
47021: PUSH
47022: FOR_IN
47023: IFFALSE 47067
// if not GetTag ( i ) then
47025: LD_VAR 0 5
47029: PPUSH
47030: CALL_OW 110
47034: NOT
47035: IFFALSE 47065
// begin defenders := defenders union i ;
47037: LD_ADDR_VAR 0 2
47041: PUSH
47042: LD_VAR 0 2
47046: PUSH
47047: LD_VAR 0 5
47051: UNION
47052: ST_TO_ADDR
// SetTag ( i , 18 ) ;
47053: LD_VAR 0 5
47057: PPUSH
47058: LD_INT 18
47060: PPUSH
47061: CALL_OW 109
// end ;
47065: GO 47022
47067: POP
47068: POP
// repeat wait ( 0 0$1 ) ;
47069: LD_INT 35
47071: PPUSH
47072: CALL_OW 67
// enemy := mc_scan [ base ] ;
47076: LD_ADDR_VAR 0 3
47080: PUSH
47081: LD_EXP 72
47085: PUSH
47086: LD_VAR 0 1
47090: ARRAY
47091: ST_TO_ADDR
// for i in defenders do
47092: LD_ADDR_VAR 0 5
47096: PUSH
47097: LD_VAR 0 2
47101: PUSH
47102: FOR_IN
47103: IFFALSE 47788
// begin e := NearestUnitToUnit ( enemy , i ) ;
47105: LD_ADDR_VAR 0 13
47109: PUSH
47110: LD_VAR 0 3
47114: PPUSH
47115: LD_VAR 0 5
47119: PPUSH
47120: CALL_OW 74
47124: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
47125: LD_ADDR_VAR 0 16
47129: PUSH
47130: LD_EXP 49
47134: PUSH
47135: LD_VAR 0 1
47139: ARRAY
47140: PPUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 30
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 30
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PPUSH
47169: CALL_OW 72
47173: NOT
47174: PUSH
47175: LD_EXP 49
47179: PUSH
47180: LD_VAR 0 1
47184: ARRAY
47185: PPUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 30
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 30
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: PPUSH
47214: CALL_OW 72
47218: PPUSH
47219: CALL_OW 256
47223: PUSH
47224: LD_INT 600
47226: LESS
47227: OR
47228: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
47229: LD_VAR 0 5
47233: PPUSH
47234: CALL_OW 247
47238: PUSH
47239: LD_INT 2
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 47494
47247: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
47248: LD_VAR 0 5
47252: PPUSH
47253: CALL_OW 256
47257: PUSH
47258: LD_INT 650
47260: GREATER
47261: PUSH
47262: LD_VAR 0 5
47266: PPUSH
47267: LD_VAR 0 13
47271: PPUSH
47272: CALL_OW 296
47276: PUSH
47277: LD_INT 40
47279: LESS
47280: AND
47281: IFFALSE 47299
// ComAttackUnit ( i , e ) else
47283: LD_VAR 0 5
47287: PPUSH
47288: LD_VAR 0 13
47292: PPUSH
47293: CALL_OW 115
47297: GO 47377
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
47299: LD_VAR 0 5
47303: PPUSH
47304: LD_VAR 0 13
47308: PPUSH
47309: CALL_OW 296
47313: PUSH
47314: LD_INT 30
47316: GREATEREQUAL
47317: PUSH
47318: LD_VAR 0 5
47322: PPUSH
47323: CALL_OW 256
47327: PUSH
47328: LD_INT 650
47330: LESSEQUAL
47331: OR
47332: PUSH
47333: LD_VAR 0 5
47337: PPUSH
47338: LD_EXP 73
47342: PUSH
47343: LD_VAR 0 1
47347: ARRAY
47348: PPUSH
47349: CALL_OW 308
47353: NOT
47354: AND
47355: IFFALSE 47377
// ComMoveToArea ( i , mc_parking [ base ] ) ;
47357: LD_VAR 0 5
47361: PPUSH
47362: LD_EXP 73
47366: PUSH
47367: LD_VAR 0 1
47371: ARRAY
47372: PPUSH
47373: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
47377: LD_VAR 0 5
47381: PPUSH
47382: CALL_OW 256
47386: PUSH
47387: LD_INT 998
47389: LESS
47390: PUSH
47391: LD_VAR 0 5
47395: PPUSH
47396: CALL_OW 263
47400: PUSH
47401: LD_INT 1
47403: EQUAL
47404: AND
47405: PUSH
47406: LD_VAR 0 5
47410: PPUSH
47411: CALL_OW 311
47415: AND
47416: PUSH
47417: LD_VAR 0 5
47421: PPUSH
47422: LD_EXP 73
47426: PUSH
47427: LD_VAR 0 1
47431: ARRAY
47432: PPUSH
47433: CALL_OW 308
47437: AND
47438: IFFALSE 47492
// begin mech := IsDrivenBy ( i ) ;
47440: LD_ADDR_VAR 0 9
47444: PUSH
47445: LD_VAR 0 5
47449: PPUSH
47450: CALL_OW 311
47454: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
47455: LD_VAR 0 9
47459: PPUSH
47460: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
47464: LD_VAR 0 9
47468: PPUSH
47469: LD_VAR 0 5
47473: PPUSH
47474: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
47478: LD_VAR 0 9
47482: PPUSH
47483: LD_VAR 0 5
47487: PPUSH
47488: CALL_OW 180
// end ; end ; unit_human :
47492: GO 47759
47494: LD_INT 1
47496: DOUBLE
47497: EQUAL
47498: IFTRUE 47502
47500: GO 47758
47502: POP
// begin b := IsInUnit ( i ) ;
47503: LD_ADDR_VAR 0 18
47507: PUSH
47508: LD_VAR 0 5
47512: PPUSH
47513: CALL_OW 310
47517: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
47518: LD_ADDR_VAR 0 19
47522: PUSH
47523: LD_VAR 0 18
47527: NOT
47528: PUSH
47529: LD_VAR 0 18
47533: PPUSH
47534: CALL_OW 266
47538: PUSH
47539: LD_INT 32
47541: PUSH
47542: LD_INT 31
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: IN
47549: OR
47550: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
47551: LD_VAR 0 16
47555: PUSH
47556: LD_VAR 0 2
47560: PPUSH
47561: LD_INT 21
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PPUSH
47571: CALL_OW 72
47575: PUSH
47576: LD_INT 1
47578: LESSEQUAL
47579: OR
47580: PUSH
47581: LD_VAR 0 19
47585: AND
47586: PUSH
47587: LD_VAR 0 5
47591: PUSH
47592: LD_VAR 0 17
47596: IN
47597: NOT
47598: AND
47599: IFFALSE 47692
// begin if b then
47601: LD_VAR 0 18
47605: IFFALSE 47654
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
47607: LD_VAR 0 18
47611: PPUSH
47612: LD_VAR 0 3
47616: PPUSH
47617: LD_VAR 0 18
47621: PPUSH
47622: CALL_OW 74
47626: PPUSH
47627: CALL_OW 296
47631: PUSH
47632: LD_INT 10
47634: LESS
47635: PUSH
47636: LD_VAR 0 18
47640: PPUSH
47641: CALL_OW 461
47645: PUSH
47646: LD_INT 7
47648: NONEQUAL
47649: AND
47650: IFFALSE 47654
// continue ;
47652: GO 47102
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
47654: LD_ADDR_VAR 0 17
47658: PUSH
47659: LD_VAR 0 17
47663: PPUSH
47664: LD_VAR 0 17
47668: PUSH
47669: LD_INT 1
47671: PLUS
47672: PPUSH
47673: LD_VAR 0 5
47677: PPUSH
47678: CALL_OW 1
47682: ST_TO_ADDR
// ComExitBuilding ( i ) ;
47683: LD_VAR 0 5
47687: PPUSH
47688: CALL_OW 122
// end ; if sold_defenders then
47692: LD_VAR 0 17
47696: IFFALSE 47756
// if i in sold_defenders then
47698: LD_VAR 0 5
47702: PUSH
47703: LD_VAR 0 17
47707: IN
47708: IFFALSE 47756
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
47710: LD_VAR 0 5
47714: PPUSH
47715: CALL_OW 314
47719: NOT
47720: PUSH
47721: LD_VAR 0 5
47725: PPUSH
47726: LD_VAR 0 13
47730: PPUSH
47731: CALL_OW 296
47735: PUSH
47736: LD_INT 30
47738: LESS
47739: AND
47740: IFFALSE 47756
// ComAttackUnit ( i , e ) ;
47742: LD_VAR 0 5
47746: PPUSH
47747: LD_VAR 0 13
47751: PPUSH
47752: CALL_OW 115
// end ; end ; end ;
47756: GO 47759
47758: POP
// if IsDead ( i ) then
47759: LD_VAR 0 5
47763: PPUSH
47764: CALL_OW 301
47768: IFFALSE 47786
// defenders := defenders diff i ;
47770: LD_ADDR_VAR 0 2
47774: PUSH
47775: LD_VAR 0 2
47779: PUSH
47780: LD_VAR 0 5
47784: DIFF
47785: ST_TO_ADDR
// end ;
47786: GO 47102
47788: POP
47789: POP
// until not enemy or not defenders ;
47790: LD_VAR 0 3
47794: NOT
47795: PUSH
47796: LD_VAR 0 2
47800: NOT
47801: OR
47802: IFFALSE 47069
// MC_Reset ( base , 18 ) ;
47804: LD_VAR 0 1
47808: PPUSH
47809: LD_INT 18
47811: PPUSH
47812: CALL 19797 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
47816: LD_ADDR_VAR 0 2
47820: PUSH
47821: LD_VAR 0 2
47825: PUSH
47826: LD_VAR 0 2
47830: PPUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 25
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 25
47846: PUSH
47847: LD_INT 5
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 25
47856: PUSH
47857: LD_INT 8
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 25
47866: PUSH
47867: LD_INT 9
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: PPUSH
47881: CALL_OW 72
47885: DIFF
47886: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
47887: LD_VAR 0 3
47891: NOT
47892: PUSH
47893: LD_VAR 0 2
47897: PPUSH
47898: LD_INT 21
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PPUSH
47908: CALL_OW 72
47912: AND
47913: IFFALSE 48175
// begin tmp := FilterByTag ( defenders , 19 ) ;
47915: LD_ADDR_VAR 0 11
47919: PUSH
47920: LD_VAR 0 2
47924: PPUSH
47925: LD_INT 19
47927: PPUSH
47928: CALL 84522 0 2
47932: ST_TO_ADDR
// if tmp then
47933: LD_VAR 0 11
47937: IFFALSE 48007
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
47939: LD_ADDR_VAR 0 11
47943: PUSH
47944: LD_VAR 0 11
47948: PPUSH
47949: LD_INT 25
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PPUSH
47959: CALL_OW 72
47963: ST_TO_ADDR
// if tmp then
47964: LD_VAR 0 11
47968: IFFALSE 48007
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
47970: LD_ADDR_EXP 61
47974: PUSH
47975: LD_EXP 61
47979: PPUSH
47980: LD_VAR 0 1
47984: PPUSH
47985: LD_EXP 61
47989: PUSH
47990: LD_VAR 0 1
47994: ARRAY
47995: PUSH
47996: LD_VAR 0 11
48000: UNION
48001: PPUSH
48002: CALL_OW 1
48006: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
48007: LD_VAR 0 1
48011: PPUSH
48012: LD_INT 19
48014: PPUSH
48015: CALL 19797 0 2
// repeat wait ( 0 0$1 ) ;
48019: LD_INT 35
48021: PPUSH
48022: CALL_OW 67
// for i in defenders do
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_VAR 0 2
48035: PUSH
48036: FOR_IN
48037: IFFALSE 48126
// begin if not IsInArea ( i , mc_parking [ base ] ) then
48039: LD_VAR 0 5
48043: PPUSH
48044: LD_EXP 73
48048: PUSH
48049: LD_VAR 0 1
48053: ARRAY
48054: PPUSH
48055: CALL_OW 308
48059: NOT
48060: IFFALSE 48084
// ComMoveToArea ( i , mc_parking [ base ] ) else
48062: LD_VAR 0 5
48066: PPUSH
48067: LD_EXP 73
48071: PUSH
48072: LD_VAR 0 1
48076: ARRAY
48077: PPUSH
48078: CALL_OW 113
48082: GO 48124
// if GetControl ( i ) = control_manual then
48084: LD_VAR 0 5
48088: PPUSH
48089: CALL_OW 263
48093: PUSH
48094: LD_INT 1
48096: EQUAL
48097: IFFALSE 48124
// if IsDrivenBy ( i ) then
48099: LD_VAR 0 5
48103: PPUSH
48104: CALL_OW 311
48108: IFFALSE 48124
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
48110: LD_VAR 0 5
48114: PPUSH
48115: CALL_OW 311
48119: PPUSH
48120: CALL_OW 121
// end ;
48124: GO 48036
48126: POP
48127: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
48128: LD_VAR 0 2
48132: PPUSH
48133: LD_INT 95
48135: PUSH
48136: LD_EXP 73
48140: PUSH
48141: LD_VAR 0 1
48145: ARRAY
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PPUSH
48151: CALL_OW 72
48155: PUSH
48156: LD_VAR 0 2
48160: EQUAL
48161: PUSH
48162: LD_EXP 72
48166: PUSH
48167: LD_VAR 0 1
48171: ARRAY
48172: OR
48173: IFFALSE 48019
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
48175: LD_ADDR_EXP 71
48179: PUSH
48180: LD_EXP 71
48184: PPUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: LD_EXP 71
48194: PUSH
48195: LD_VAR 0 1
48199: ARRAY
48200: PUSH
48201: LD_VAR 0 2
48205: UNION
48206: PPUSH
48207: CALL_OW 1
48211: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_INT 20
48219: PPUSH
48220: CALL 19797 0 2
// end ;
48224: LD_VAR 0 4
48228: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48229: LD_INT 0
48231: PPUSH
48232: PPUSH
48233: PPUSH
48234: PPUSH
// result := false ;
48235: LD_ADDR_VAR 0 2
48239: PUSH
48240: LD_INT 0
48242: ST_TO_ADDR
// side := GetSide ( unit ) ;
48243: LD_ADDR_VAR 0 3
48247: PUSH
48248: LD_VAR 0 1
48252: PPUSH
48253: CALL_OW 255
48257: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48258: LD_ADDR_VAR 0 4
48262: PUSH
48263: LD_VAR 0 1
48267: PPUSH
48268: CALL_OW 248
48272: ST_TO_ADDR
// case nat of 1 :
48273: LD_VAR 0 4
48277: PUSH
48278: LD_INT 1
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 48297
48286: POP
// tech := tech_lassight ; 2 :
48287: LD_ADDR_VAR 0 5
48291: PUSH
48292: LD_INT 12
48294: ST_TO_ADDR
48295: GO 48336
48297: LD_INT 2
48299: DOUBLE
48300: EQUAL
48301: IFTRUE 48305
48303: GO 48316
48305: POP
// tech := tech_mortar ; 3 :
48306: LD_ADDR_VAR 0 5
48310: PUSH
48311: LD_INT 41
48313: ST_TO_ADDR
48314: GO 48336
48316: LD_INT 3
48318: DOUBLE
48319: EQUAL
48320: IFTRUE 48324
48322: GO 48335
48324: POP
// tech := tech_bazooka ; end ;
48325: LD_ADDR_VAR 0 5
48329: PUSH
48330: LD_INT 44
48332: ST_TO_ADDR
48333: GO 48336
48335: POP
// if Researched ( side , tech ) then
48336: LD_VAR 0 3
48340: PPUSH
48341: LD_VAR 0 5
48345: PPUSH
48346: CALL_OW 325
48350: IFFALSE 48377
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48352: LD_ADDR_VAR 0 2
48356: PUSH
48357: LD_INT 5
48359: PUSH
48360: LD_INT 8
48362: PUSH
48363: LD_INT 9
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: PUSH
48371: LD_VAR 0 4
48375: ARRAY
48376: ST_TO_ADDR
// end ;
48377: LD_VAR 0 2
48381: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48382: LD_INT 0
48384: PPUSH
48385: PPUSH
48386: PPUSH
// if not mines then
48387: LD_VAR 0 2
48391: NOT
48392: IFFALSE 48396
// exit ;
48394: GO 48540
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48396: LD_ADDR_VAR 0 5
48400: PUSH
48401: LD_INT 81
48403: PUSH
48404: LD_VAR 0 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 21
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PPUSH
48434: CALL_OW 69
48438: ST_TO_ADDR
// for i in mines do
48439: LD_ADDR_VAR 0 4
48443: PUSH
48444: LD_VAR 0 2
48448: PUSH
48449: FOR_IN
48450: IFFALSE 48538
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48452: LD_VAR 0 4
48456: PUSH
48457: LD_INT 1
48459: ARRAY
48460: PPUSH
48461: LD_VAR 0 4
48465: PUSH
48466: LD_INT 2
48468: ARRAY
48469: PPUSH
48470: CALL_OW 458
48474: NOT
48475: IFFALSE 48479
// continue ;
48477: GO 48449
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48479: LD_VAR 0 4
48483: PUSH
48484: LD_INT 1
48486: ARRAY
48487: PPUSH
48488: LD_VAR 0 4
48492: PUSH
48493: LD_INT 2
48495: ARRAY
48496: PPUSH
48497: CALL_OW 428
48501: PUSH
48502: LD_VAR 0 5
48506: IN
48507: IFFALSE 48536
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48509: LD_VAR 0 4
48513: PUSH
48514: LD_INT 1
48516: ARRAY
48517: PPUSH
48518: LD_VAR 0 4
48522: PUSH
48523: LD_INT 2
48525: ARRAY
48526: PPUSH
48527: LD_VAR 0 1
48531: PPUSH
48532: CALL_OW 456
// end ;
48536: GO 48449
48538: POP
48539: POP
// end ;
48540: LD_VAR 0 3
48544: RET
// export function Count ( array ) ; var i ; begin
48545: LD_INT 0
48547: PPUSH
48548: PPUSH
// result := 0 ;
48549: LD_ADDR_VAR 0 2
48553: PUSH
48554: LD_INT 0
48556: ST_TO_ADDR
// for i in array do
48557: LD_ADDR_VAR 0 3
48561: PUSH
48562: LD_VAR 0 1
48566: PUSH
48567: FOR_IN
48568: IFFALSE 48592
// if i then
48570: LD_VAR 0 3
48574: IFFALSE 48590
// result := result + 1 ;
48576: LD_ADDR_VAR 0 2
48580: PUSH
48581: LD_VAR 0 2
48585: PUSH
48586: LD_INT 1
48588: PLUS
48589: ST_TO_ADDR
48590: GO 48567
48592: POP
48593: POP
// end ;
48594: LD_VAR 0 2
48598: RET
// export function IsEmpty ( building ) ; begin
48599: LD_INT 0
48601: PPUSH
// if not building then
48602: LD_VAR 0 1
48606: NOT
48607: IFFALSE 48611
// exit ;
48609: GO 48654
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48611: LD_ADDR_VAR 0 2
48615: PUSH
48616: LD_VAR 0 1
48620: PUSH
48621: LD_INT 22
48623: PUSH
48624: LD_VAR 0 1
48628: PPUSH
48629: CALL_OW 255
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 58
48640: PUSH
48641: EMPTY
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PPUSH
48648: CALL_OW 69
48652: IN
48653: ST_TO_ADDR
// end ;
48654: LD_VAR 0 2
48658: RET
// export function IsNotFull ( building ) ; begin
48659: LD_INT 0
48661: PPUSH
// if not building then
48662: LD_VAR 0 1
48666: NOT
48667: IFFALSE 48671
// exit ;
48669: GO 48690
// result := UnitsInside ( building ) < 6 ;
48671: LD_ADDR_VAR 0 2
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: CALL_OW 313
48685: PUSH
48686: LD_INT 6
48688: LESS
48689: ST_TO_ADDR
// end ;
48690: LD_VAR 0 2
48694: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48695: LD_INT 0
48697: PPUSH
48698: PPUSH
48699: PPUSH
48700: PPUSH
// tmp := [ ] ;
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: EMPTY
48707: ST_TO_ADDR
// list := [ ] ;
48708: LD_ADDR_VAR 0 5
48712: PUSH
48713: EMPTY
48714: ST_TO_ADDR
// for i = 16 to 25 do
48715: LD_ADDR_VAR 0 4
48719: PUSH
48720: DOUBLE
48721: LD_INT 16
48723: DEC
48724: ST_TO_ADDR
48725: LD_INT 25
48727: PUSH
48728: FOR_TO
48729: IFFALSE 48802
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48731: LD_ADDR_VAR 0 3
48735: PUSH
48736: LD_VAR 0 3
48740: PUSH
48741: LD_INT 22
48743: PUSH
48744: LD_VAR 0 1
48748: PPUSH
48749: CALL_OW 255
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 91
48760: PUSH
48761: LD_VAR 0 1
48765: PUSH
48766: LD_INT 6
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 30
48776: PUSH
48777: LD_VAR 0 4
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: PPUSH
48794: CALL_OW 69
48798: ADD
48799: ST_TO_ADDR
48800: GO 48728
48802: POP
48803: POP
// for i = 1 to tmp do
48804: LD_ADDR_VAR 0 4
48808: PUSH
48809: DOUBLE
48810: LD_INT 1
48812: DEC
48813: ST_TO_ADDR
48814: LD_VAR 0 3
48818: PUSH
48819: FOR_TO
48820: IFFALSE 48908
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48822: LD_ADDR_VAR 0 5
48826: PUSH
48827: LD_VAR 0 5
48831: PUSH
48832: LD_VAR 0 3
48836: PUSH
48837: LD_VAR 0 4
48841: ARRAY
48842: PPUSH
48843: CALL_OW 266
48847: PUSH
48848: LD_VAR 0 3
48852: PUSH
48853: LD_VAR 0 4
48857: ARRAY
48858: PPUSH
48859: CALL_OW 250
48863: PUSH
48864: LD_VAR 0 3
48868: PUSH
48869: LD_VAR 0 4
48873: ARRAY
48874: PPUSH
48875: CALL_OW 251
48879: PUSH
48880: LD_VAR 0 3
48884: PUSH
48885: LD_VAR 0 4
48889: ARRAY
48890: PPUSH
48891: CALL_OW 254
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: ADD
48905: ST_TO_ADDR
48906: GO 48819
48908: POP
48909: POP
// result := list ;
48910: LD_ADDR_VAR 0 2
48914: PUSH
48915: LD_VAR 0 5
48919: ST_TO_ADDR
// end ;
48920: LD_VAR 0 2
48924: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48925: LD_INT 0
48927: PPUSH
48928: PPUSH
48929: PPUSH
48930: PPUSH
48931: PPUSH
48932: PPUSH
48933: PPUSH
// if not factory then
48934: LD_VAR 0 1
48938: NOT
48939: IFFALSE 48943
// exit ;
48941: GO 49468
// if control = control_apeman then
48943: LD_VAR 0 4
48947: PUSH
48948: LD_INT 5
48950: EQUAL
48951: IFFALSE 49060
// begin tmp := UnitsInside ( factory ) ;
48953: LD_ADDR_VAR 0 8
48957: PUSH
48958: LD_VAR 0 1
48962: PPUSH
48963: CALL_OW 313
48967: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48968: LD_VAR 0 8
48972: PPUSH
48973: LD_INT 25
48975: PUSH
48976: LD_INT 12
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PPUSH
48983: CALL_OW 72
48987: NOT
48988: IFFALSE 48998
// control := control_manual ;
48990: LD_ADDR_VAR 0 4
48994: PUSH
48995: LD_INT 1
48997: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48998: LD_ADDR_VAR 0 8
49002: PUSH
49003: LD_VAR 0 1
49007: PPUSH
49008: CALL 48695 0 1
49012: ST_TO_ADDR
// if tmp then
49013: LD_VAR 0 8
49017: IFFALSE 49060
// begin for i in tmp do
49019: LD_ADDR_VAR 0 7
49023: PUSH
49024: LD_VAR 0 8
49028: PUSH
49029: FOR_IN
49030: IFFALSE 49058
// if i [ 1 ] = b_ext_radar then
49032: LD_VAR 0 7
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: PUSH
49041: LD_INT 20
49043: EQUAL
49044: IFFALSE 49056
// begin control := control_remote ;
49046: LD_ADDR_VAR 0 4
49050: PUSH
49051: LD_INT 2
49053: ST_TO_ADDR
// break ;
49054: GO 49058
// end ;
49056: GO 49029
49058: POP
49059: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49060: LD_VAR 0 1
49064: PPUSH
49065: LD_VAR 0 2
49069: PPUSH
49070: LD_VAR 0 3
49074: PPUSH
49075: LD_VAR 0 4
49079: PPUSH
49080: LD_VAR 0 5
49084: PPUSH
49085: CALL_OW 448
49089: IFFALSE 49124
// begin result := [ chassis , engine , control , weapon ] ;
49091: LD_ADDR_VAR 0 6
49095: PUSH
49096: LD_VAR 0 2
49100: PUSH
49101: LD_VAR 0 3
49105: PUSH
49106: LD_VAR 0 4
49110: PUSH
49111: LD_VAR 0 5
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// exit ;
49122: GO 49468
// end ; _chassis := AvailableChassisList ( factory ) ;
49124: LD_ADDR_VAR 0 9
49128: PUSH
49129: LD_VAR 0 1
49133: PPUSH
49134: CALL_OW 475
49138: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49139: LD_ADDR_VAR 0 11
49143: PUSH
49144: LD_VAR 0 1
49148: PPUSH
49149: CALL_OW 476
49153: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49154: LD_ADDR_VAR 0 12
49158: PUSH
49159: LD_VAR 0 1
49163: PPUSH
49164: CALL_OW 477
49168: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49169: LD_ADDR_VAR 0 10
49173: PUSH
49174: LD_VAR 0 1
49178: PPUSH
49179: CALL_OW 478
49183: ST_TO_ADDR
// if not chassis in _chassis then
49184: LD_VAR 0 2
49188: PUSH
49189: LD_VAR 0 9
49193: IN
49194: NOT
49195: IFFALSE 49221
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49197: LD_ADDR_VAR 0 2
49201: PUSH
49202: LD_VAR 0 9
49206: PUSH
49207: LD_INT 1
49209: PPUSH
49210: LD_VAR 0 9
49214: PPUSH
49215: CALL_OW 12
49219: ARRAY
49220: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49221: LD_VAR 0 2
49225: PPUSH
49226: LD_VAR 0 3
49230: PPUSH
49231: CALL 49473 0 2
49235: NOT
49236: IFFALSE 49295
// repeat engine := _engine [ 1 ] ;
49238: LD_ADDR_VAR 0 3
49242: PUSH
49243: LD_VAR 0 11
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49252: LD_ADDR_VAR 0 11
49256: PUSH
49257: LD_VAR 0 11
49261: PPUSH
49262: LD_INT 1
49264: PPUSH
49265: CALL_OW 3
49269: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49270: LD_VAR 0 2
49274: PPUSH
49275: LD_VAR 0 3
49279: PPUSH
49280: CALL 49473 0 2
49284: PUSH
49285: LD_VAR 0 11
49289: PUSH
49290: EMPTY
49291: EQUAL
49292: OR
49293: IFFALSE 49238
// if not control in _control then
49295: LD_VAR 0 4
49299: PUSH
49300: LD_VAR 0 12
49304: IN
49305: NOT
49306: IFFALSE 49332
// control := _control [ rand ( 1 , _control ) ] ;
49308: LD_ADDR_VAR 0 4
49312: PUSH
49313: LD_VAR 0 12
49317: PUSH
49318: LD_INT 1
49320: PPUSH
49321: LD_VAR 0 12
49325: PPUSH
49326: CALL_OW 12
49330: ARRAY
49331: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49332: LD_VAR 0 2
49336: PPUSH
49337: LD_VAR 0 5
49341: PPUSH
49342: CALL 49693 0 2
49346: NOT
49347: IFFALSE 49406
// repeat weapon := _weapon [ 1 ] ;
49349: LD_ADDR_VAR 0 5
49353: PUSH
49354: LD_VAR 0 10
49358: PUSH
49359: LD_INT 1
49361: ARRAY
49362: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49363: LD_ADDR_VAR 0 10
49367: PUSH
49368: LD_VAR 0 10
49372: PPUSH
49373: LD_INT 1
49375: PPUSH
49376: CALL_OW 3
49380: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49381: LD_VAR 0 2
49385: PPUSH
49386: LD_VAR 0 5
49390: PPUSH
49391: CALL 49693 0 2
49395: PUSH
49396: LD_VAR 0 10
49400: PUSH
49401: EMPTY
49402: EQUAL
49403: OR
49404: IFFALSE 49349
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49406: LD_VAR 0 1
49410: PPUSH
49411: LD_VAR 0 2
49415: PPUSH
49416: LD_VAR 0 3
49420: PPUSH
49421: LD_VAR 0 4
49425: PPUSH
49426: LD_VAR 0 5
49430: PPUSH
49431: CALL_OW 448
49435: IFFALSE 49468
// result := [ chassis , engine , control , weapon ] ;
49437: LD_ADDR_VAR 0 6
49441: PUSH
49442: LD_VAR 0 2
49446: PUSH
49447: LD_VAR 0 3
49451: PUSH
49452: LD_VAR 0 4
49456: PUSH
49457: LD_VAR 0 5
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// end ;
49468: LD_VAR 0 6
49472: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49473: LD_INT 0
49475: PPUSH
// if not chassis or not engine then
49476: LD_VAR 0 1
49480: NOT
49481: PUSH
49482: LD_VAR 0 2
49486: NOT
49487: OR
49488: IFFALSE 49492
// exit ;
49490: GO 49688
// case engine of engine_solar :
49492: LD_VAR 0 2
49496: PUSH
49497: LD_INT 2
49499: DOUBLE
49500: EQUAL
49501: IFTRUE 49505
49503: GO 49543
49505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49506: LD_ADDR_VAR 0 3
49510: PUSH
49511: LD_INT 11
49513: PUSH
49514: LD_INT 12
49516: PUSH
49517: LD_INT 13
49519: PUSH
49520: LD_INT 14
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
49541: GO 49672
49543: LD_INT 1
49545: DOUBLE
49546: EQUAL
49547: IFTRUE 49551
49549: GO 49613
49551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49552: LD_ADDR_VAR 0 3
49556: PUSH
49557: LD_INT 11
49559: PUSH
49560: LD_INT 12
49562: PUSH
49563: LD_INT 13
49565: PUSH
49566: LD_INT 14
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 4
49580: PUSH
49581: LD_INT 5
49583: PUSH
49584: LD_INT 21
49586: PUSH
49587: LD_INT 23
49589: PUSH
49590: LD_INT 22
49592: PUSH
49593: LD_INT 24
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: ST_TO_ADDR
49611: GO 49672
49613: LD_INT 3
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49621
49619: GO 49671
49621: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49622: LD_ADDR_VAR 0 3
49626: PUSH
49627: LD_INT 13
49629: PUSH
49630: LD_INT 14
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 4
49641: PUSH
49642: LD_INT 5
49644: PUSH
49645: LD_INT 21
49647: PUSH
49648: LD_INT 22
49650: PUSH
49651: LD_INT 23
49653: PUSH
49654: LD_INT 24
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
49669: GO 49672
49671: POP
// result := ( chassis in result ) ;
49672: LD_ADDR_VAR 0 3
49676: PUSH
49677: LD_VAR 0 1
49681: PUSH
49682: LD_VAR 0 3
49686: IN
49687: ST_TO_ADDR
// end ;
49688: LD_VAR 0 3
49692: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49693: LD_INT 0
49695: PPUSH
// if not chassis or not weapon then
49696: LD_VAR 0 1
49700: NOT
49701: PUSH
49702: LD_VAR 0 2
49706: NOT
49707: OR
49708: IFFALSE 49712
// exit ;
49710: GO 50738
// case weapon of us_machine_gun :
49712: LD_VAR 0 2
49716: PUSH
49717: LD_INT 2
49719: DOUBLE
49720: EQUAL
49721: IFTRUE 49725
49723: GO 49755
49725: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49726: LD_ADDR_VAR 0 3
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 4
49742: PUSH
49743: LD_INT 5
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
49753: GO 50722
49755: LD_INT 3
49757: DOUBLE
49758: EQUAL
49759: IFTRUE 49763
49761: GO 49793
49763: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49764: LD_ADDR_VAR 0 3
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 4
49780: PUSH
49781: LD_INT 5
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
49791: GO 50722
49793: LD_INT 11
49795: DOUBLE
49796: EQUAL
49797: IFTRUE 49801
49799: GO 49831
49801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49802: LD_ADDR_VAR 0 3
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: LD_INT 5
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
49829: GO 50722
49831: LD_INT 4
49833: DOUBLE
49834: EQUAL
49835: IFTRUE 49839
49837: GO 49865
49839: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49840: LD_ADDR_VAR 0 3
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 4
49853: PUSH
49854: LD_INT 5
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: ST_TO_ADDR
49863: GO 50722
49865: LD_INT 5
49867: DOUBLE
49868: EQUAL
49869: IFTRUE 49873
49871: GO 49899
49873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49874: LD_ADDR_VAR 0 3
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: LD_INT 5
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
49897: GO 50722
49899: LD_INT 9
49901: DOUBLE
49902: EQUAL
49903: IFTRUE 49907
49905: GO 49933
49907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49908: LD_ADDR_VAR 0 3
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: LD_INT 5
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
49931: GO 50722
49933: LD_INT 7
49935: DOUBLE
49936: EQUAL
49937: IFTRUE 49941
49939: GO 49967
49941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49942: LD_ADDR_VAR 0 3
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 4
49955: PUSH
49956: LD_INT 5
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
49965: GO 50722
49967: LD_INT 12
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49975
49973: GO 50001
49975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49976: LD_ADDR_VAR 0 3
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: LD_INT 4
49989: PUSH
49990: LD_INT 5
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: ST_TO_ADDR
49999: GO 50722
50001: LD_INT 13
50003: DOUBLE
50004: EQUAL
50005: IFTRUE 50009
50007: GO 50035
50009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50010: LD_ADDR_VAR 0 3
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: LD_INT 5
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: ST_TO_ADDR
50033: GO 50722
50035: LD_INT 14
50037: DOUBLE
50038: EQUAL
50039: IFTRUE 50043
50041: GO 50061
50043: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50044: LD_ADDR_VAR 0 3
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: ST_TO_ADDR
50059: GO 50722
50061: LD_INT 6
50063: DOUBLE
50064: EQUAL
50065: IFTRUE 50069
50067: GO 50087
50069: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50070: LD_ADDR_VAR 0 3
50074: PUSH
50075: LD_INT 4
50077: PUSH
50078: LD_INT 5
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: ST_TO_ADDR
50085: GO 50722
50087: LD_INT 10
50089: DOUBLE
50090: EQUAL
50091: IFTRUE 50095
50093: GO 50113
50095: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50096: LD_ADDR_VAR 0 3
50100: PUSH
50101: LD_INT 4
50103: PUSH
50104: LD_INT 5
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: ST_TO_ADDR
50111: GO 50722
50113: LD_INT 22
50115: DOUBLE
50116: EQUAL
50117: IFTRUE 50121
50119: GO 50147
50121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50122: LD_ADDR_VAR 0 3
50126: PUSH
50127: LD_INT 11
50129: PUSH
50130: LD_INT 12
50132: PUSH
50133: LD_INT 13
50135: PUSH
50136: LD_INT 14
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: ST_TO_ADDR
50145: GO 50722
50147: LD_INT 23
50149: DOUBLE
50150: EQUAL
50151: IFTRUE 50155
50153: GO 50181
50155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50156: LD_ADDR_VAR 0 3
50160: PUSH
50161: LD_INT 11
50163: PUSH
50164: LD_INT 12
50166: PUSH
50167: LD_INT 13
50169: PUSH
50170: LD_INT 14
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
50179: GO 50722
50181: LD_INT 24
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50215
50189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50190: LD_ADDR_VAR 0 3
50194: PUSH
50195: LD_INT 11
50197: PUSH
50198: LD_INT 12
50200: PUSH
50201: LD_INT 13
50203: PUSH
50204: LD_INT 14
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
50213: GO 50722
50215: LD_INT 30
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50223
50221: GO 50249
50223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50224: LD_ADDR_VAR 0 3
50228: PUSH
50229: LD_INT 11
50231: PUSH
50232: LD_INT 12
50234: PUSH
50235: LD_INT 13
50237: PUSH
50238: LD_INT 14
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
50247: GO 50722
50249: LD_INT 25
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50257
50255: GO 50275
50257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_INT 13
50265: PUSH
50266: LD_INT 14
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: ST_TO_ADDR
50273: GO 50722
50275: LD_INT 27
50277: DOUBLE
50278: EQUAL
50279: IFTRUE 50283
50281: GO 50301
50283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 13
50291: PUSH
50292: LD_INT 14
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: ST_TO_ADDR
50299: GO 50722
50301: LD_INT 28
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 50327
50309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50310: LD_ADDR_VAR 0 3
50314: PUSH
50315: LD_INT 13
50317: PUSH
50318: LD_INT 14
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: ST_TO_ADDR
50325: GO 50722
50327: LD_INT 29
50329: DOUBLE
50330: EQUAL
50331: IFTRUE 50335
50333: GO 50353
50335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50336: LD_ADDR_VAR 0 3
50340: PUSH
50341: LD_INT 13
50343: PUSH
50344: LD_INT 14
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: ST_TO_ADDR
50351: GO 50722
50353: LD_INT 31
50355: DOUBLE
50356: EQUAL
50357: IFTRUE 50361
50359: GO 50379
50361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50362: LD_ADDR_VAR 0 3
50366: PUSH
50367: LD_INT 13
50369: PUSH
50370: LD_INT 14
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: ST_TO_ADDR
50377: GO 50722
50379: LD_INT 26
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50405
50387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50388: LD_ADDR_VAR 0 3
50392: PUSH
50393: LD_INT 13
50395: PUSH
50396: LD_INT 14
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: ST_TO_ADDR
50403: GO 50722
50405: LD_INT 42
50407: DOUBLE
50408: EQUAL
50409: IFTRUE 50413
50411: GO 50439
50413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50414: LD_ADDR_VAR 0 3
50418: PUSH
50419: LD_INT 21
50421: PUSH
50422: LD_INT 22
50424: PUSH
50425: LD_INT 23
50427: PUSH
50428: LD_INT 24
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: ST_TO_ADDR
50437: GO 50722
50439: LD_INT 43
50441: DOUBLE
50442: EQUAL
50443: IFTRUE 50447
50445: GO 50473
50447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50448: LD_ADDR_VAR 0 3
50452: PUSH
50453: LD_INT 21
50455: PUSH
50456: LD_INT 22
50458: PUSH
50459: LD_INT 23
50461: PUSH
50462: LD_INT 24
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
50471: GO 50722
50473: LD_INT 44
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 50507
50481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50482: LD_ADDR_VAR 0 3
50486: PUSH
50487: LD_INT 21
50489: PUSH
50490: LD_INT 22
50492: PUSH
50493: LD_INT 23
50495: PUSH
50496: LD_INT 24
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
50505: GO 50722
50507: LD_INT 45
50509: DOUBLE
50510: EQUAL
50511: IFTRUE 50515
50513: GO 50541
50515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50516: LD_ADDR_VAR 0 3
50520: PUSH
50521: LD_INT 21
50523: PUSH
50524: LD_INT 22
50526: PUSH
50527: LD_INT 23
50529: PUSH
50530: LD_INT 24
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
50539: GO 50722
50541: LD_INT 49
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50549
50547: GO 50575
50549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50550: LD_ADDR_VAR 0 3
50554: PUSH
50555: LD_INT 21
50557: PUSH
50558: LD_INT 22
50560: PUSH
50561: LD_INT 23
50563: PUSH
50564: LD_INT 24
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
50573: GO 50722
50575: LD_INT 51
50577: DOUBLE
50578: EQUAL
50579: IFTRUE 50583
50581: GO 50609
50583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50584: LD_ADDR_VAR 0 3
50588: PUSH
50589: LD_INT 21
50591: PUSH
50592: LD_INT 22
50594: PUSH
50595: LD_INT 23
50597: PUSH
50598: LD_INT 24
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
50607: GO 50722
50609: LD_INT 52
50611: DOUBLE
50612: EQUAL
50613: IFTRUE 50617
50615: GO 50643
50617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50618: LD_ADDR_VAR 0 3
50622: PUSH
50623: LD_INT 21
50625: PUSH
50626: LD_INT 22
50628: PUSH
50629: LD_INT 23
50631: PUSH
50632: LD_INT 24
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
50641: GO 50722
50643: LD_INT 53
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50669
50651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: LD_INT 23
50659: PUSH
50660: LD_INT 24
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: ST_TO_ADDR
50667: GO 50722
50669: LD_INT 46
50671: DOUBLE
50672: EQUAL
50673: IFTRUE 50677
50675: GO 50695
50677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50678: LD_ADDR_VAR 0 3
50682: PUSH
50683: LD_INT 23
50685: PUSH
50686: LD_INT 24
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: ST_TO_ADDR
50693: GO 50722
50695: LD_INT 47
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 50721
50703: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50704: LD_ADDR_VAR 0 3
50708: PUSH
50709: LD_INT 23
50711: PUSH
50712: LD_INT 24
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: ST_TO_ADDR
50719: GO 50722
50721: POP
// result := ( chassis in result ) ;
50722: LD_ADDR_VAR 0 3
50726: PUSH
50727: LD_VAR 0 1
50731: PUSH
50732: LD_VAR 0 3
50736: IN
50737: ST_TO_ADDR
// end ;
50738: LD_VAR 0 3
50742: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50743: LD_INT 0
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
// result := array ;
50752: LD_ADDR_VAR 0 5
50756: PUSH
50757: LD_VAR 0 1
50761: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50762: LD_VAR 0 1
50766: NOT
50767: PUSH
50768: LD_VAR 0 2
50772: NOT
50773: OR
50774: PUSH
50775: LD_VAR 0 3
50779: NOT
50780: OR
50781: PUSH
50782: LD_VAR 0 2
50786: PUSH
50787: LD_VAR 0 1
50791: GREATER
50792: OR
50793: PUSH
50794: LD_VAR 0 3
50798: PUSH
50799: LD_VAR 0 1
50803: GREATER
50804: OR
50805: IFFALSE 50809
// exit ;
50807: GO 51105
// if direction then
50809: LD_VAR 0 4
50813: IFFALSE 50877
// begin d := 1 ;
50815: LD_ADDR_VAR 0 9
50819: PUSH
50820: LD_INT 1
50822: ST_TO_ADDR
// if i_from > i_to then
50823: LD_VAR 0 2
50827: PUSH
50828: LD_VAR 0 3
50832: GREATER
50833: IFFALSE 50859
// length := ( array - i_from ) + i_to else
50835: LD_ADDR_VAR 0 11
50839: PUSH
50840: LD_VAR 0 1
50844: PUSH
50845: LD_VAR 0 2
50849: MINUS
50850: PUSH
50851: LD_VAR 0 3
50855: PLUS
50856: ST_TO_ADDR
50857: GO 50875
// length := i_to - i_from ;
50859: LD_ADDR_VAR 0 11
50863: PUSH
50864: LD_VAR 0 3
50868: PUSH
50869: LD_VAR 0 2
50873: MINUS
50874: ST_TO_ADDR
// end else
50875: GO 50938
// begin d := - 1 ;
50877: LD_ADDR_VAR 0 9
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: ST_TO_ADDR
// if i_from > i_to then
50886: LD_VAR 0 2
50890: PUSH
50891: LD_VAR 0 3
50895: GREATER
50896: IFFALSE 50916
// length := i_from - i_to else
50898: LD_ADDR_VAR 0 11
50902: PUSH
50903: LD_VAR 0 2
50907: PUSH
50908: LD_VAR 0 3
50912: MINUS
50913: ST_TO_ADDR
50914: GO 50938
// length := ( array - i_to ) + i_from ;
50916: LD_ADDR_VAR 0 11
50920: PUSH
50921: LD_VAR 0 1
50925: PUSH
50926: LD_VAR 0 3
50930: MINUS
50931: PUSH
50932: LD_VAR 0 2
50936: PLUS
50937: ST_TO_ADDR
// end ; if not length then
50938: LD_VAR 0 11
50942: NOT
50943: IFFALSE 50947
// exit ;
50945: GO 51105
// tmp := array ;
50947: LD_ADDR_VAR 0 10
50951: PUSH
50952: LD_VAR 0 1
50956: ST_TO_ADDR
// for i = 1 to length do
50957: LD_ADDR_VAR 0 6
50961: PUSH
50962: DOUBLE
50963: LD_INT 1
50965: DEC
50966: ST_TO_ADDR
50967: LD_VAR 0 11
50971: PUSH
50972: FOR_TO
50973: IFFALSE 51093
// begin for j = 1 to array do
50975: LD_ADDR_VAR 0 7
50979: PUSH
50980: DOUBLE
50981: LD_INT 1
50983: DEC
50984: ST_TO_ADDR
50985: LD_VAR 0 1
50989: PUSH
50990: FOR_TO
50991: IFFALSE 51079
// begin k := j + d ;
50993: LD_ADDR_VAR 0 8
50997: PUSH
50998: LD_VAR 0 7
51002: PUSH
51003: LD_VAR 0 9
51007: PLUS
51008: ST_TO_ADDR
// if k > array then
51009: LD_VAR 0 8
51013: PUSH
51014: LD_VAR 0 1
51018: GREATER
51019: IFFALSE 51029
// k := 1 ;
51021: LD_ADDR_VAR 0 8
51025: PUSH
51026: LD_INT 1
51028: ST_TO_ADDR
// if not k then
51029: LD_VAR 0 8
51033: NOT
51034: IFFALSE 51046
// k := array ;
51036: LD_ADDR_VAR 0 8
51040: PUSH
51041: LD_VAR 0 1
51045: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51046: LD_ADDR_VAR 0 10
51050: PUSH
51051: LD_VAR 0 10
51055: PPUSH
51056: LD_VAR 0 8
51060: PPUSH
51061: LD_VAR 0 1
51065: PUSH
51066: LD_VAR 0 7
51070: ARRAY
51071: PPUSH
51072: CALL_OW 1
51076: ST_TO_ADDR
// end ;
51077: GO 50990
51079: POP
51080: POP
// array := tmp ;
51081: LD_ADDR_VAR 0 1
51085: PUSH
51086: LD_VAR 0 10
51090: ST_TO_ADDR
// end ;
51091: GO 50972
51093: POP
51094: POP
// result := array ;
51095: LD_ADDR_VAR 0 5
51099: PUSH
51100: LD_VAR 0 1
51104: ST_TO_ADDR
// end ;
51105: LD_VAR 0 5
51109: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51110: LD_INT 0
51112: PPUSH
51113: PPUSH
// result := 0 ;
51114: LD_ADDR_VAR 0 3
51118: PUSH
51119: LD_INT 0
51121: ST_TO_ADDR
// if not array or not value in array then
51122: LD_VAR 0 1
51126: NOT
51127: PUSH
51128: LD_VAR 0 2
51132: PUSH
51133: LD_VAR 0 1
51137: IN
51138: NOT
51139: OR
51140: IFFALSE 51144
// exit ;
51142: GO 51198
// for i = 1 to array do
51144: LD_ADDR_VAR 0 4
51148: PUSH
51149: DOUBLE
51150: LD_INT 1
51152: DEC
51153: ST_TO_ADDR
51154: LD_VAR 0 1
51158: PUSH
51159: FOR_TO
51160: IFFALSE 51196
// if value = array [ i ] then
51162: LD_VAR 0 2
51166: PUSH
51167: LD_VAR 0 1
51171: PUSH
51172: LD_VAR 0 4
51176: ARRAY
51177: EQUAL
51178: IFFALSE 51194
// begin result := i ;
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: LD_VAR 0 4
51189: ST_TO_ADDR
// exit ;
51190: POP
51191: POP
51192: GO 51198
// end ;
51194: GO 51159
51196: POP
51197: POP
// end ;
51198: LD_VAR 0 3
51202: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51203: LD_INT 0
51205: PPUSH
// vc_chassis := chassis ;
51206: LD_ADDR_OWVAR 37
51210: PUSH
51211: LD_VAR 0 1
51215: ST_TO_ADDR
// vc_engine := engine ;
51216: LD_ADDR_OWVAR 39
51220: PUSH
51221: LD_VAR 0 2
51225: ST_TO_ADDR
// vc_control := control ;
51226: LD_ADDR_OWVAR 38
51230: PUSH
51231: LD_VAR 0 3
51235: ST_TO_ADDR
// vc_weapon := weapon ;
51236: LD_ADDR_OWVAR 40
51240: PUSH
51241: LD_VAR 0 4
51245: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51246: LD_ADDR_OWVAR 41
51250: PUSH
51251: LD_VAR 0 5
51255: ST_TO_ADDR
// end ;
51256: LD_VAR 0 6
51260: RET
// export function WantPlant ( unit ) ; var task ; begin
51261: LD_INT 0
51263: PPUSH
51264: PPUSH
// result := false ;
51265: LD_ADDR_VAR 0 2
51269: PUSH
51270: LD_INT 0
51272: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51273: LD_ADDR_VAR 0 3
51277: PUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: CALL_OW 437
51287: ST_TO_ADDR
// if task then
51288: LD_VAR 0 3
51292: IFFALSE 51320
// if task [ 1 ] [ 1 ] = p then
51294: LD_VAR 0 3
51298: PUSH
51299: LD_INT 1
51301: ARRAY
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PUSH
51307: LD_STRING p
51309: EQUAL
51310: IFFALSE 51320
// result := true ;
51312: LD_ADDR_VAR 0 2
51316: PUSH
51317: LD_INT 1
51319: ST_TO_ADDR
// end ;
51320: LD_VAR 0 2
51324: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51325: LD_INT 0
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
// if pos < 1 then
51331: LD_VAR 0 2
51335: PUSH
51336: LD_INT 1
51338: LESS
51339: IFFALSE 51343
// exit ;
51341: GO 51646
// if pos = 1 then
51343: LD_VAR 0 2
51347: PUSH
51348: LD_INT 1
51350: EQUAL
51351: IFFALSE 51384
// result := Replace ( arr , pos [ 1 ] , value ) else
51353: LD_ADDR_VAR 0 4
51357: PUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: LD_VAR 0 2
51367: PUSH
51368: LD_INT 1
51370: ARRAY
51371: PPUSH
51372: LD_VAR 0 3
51376: PPUSH
51377: CALL_OW 1
51381: ST_TO_ADDR
51382: GO 51646
// begin tmp := arr ;
51384: LD_ADDR_VAR 0 6
51388: PUSH
51389: LD_VAR 0 1
51393: ST_TO_ADDR
// s_arr := [ tmp ] ;
51394: LD_ADDR_VAR 0 7
51398: PUSH
51399: LD_VAR 0 6
51403: PUSH
51404: EMPTY
51405: LIST
51406: ST_TO_ADDR
// for i = 1 to pos - 1 do
51407: LD_ADDR_VAR 0 5
51411: PUSH
51412: DOUBLE
51413: LD_INT 1
51415: DEC
51416: ST_TO_ADDR
51417: LD_VAR 0 2
51421: PUSH
51422: LD_INT 1
51424: MINUS
51425: PUSH
51426: FOR_TO
51427: IFFALSE 51472
// begin tmp := tmp [ pos [ i ] ] ;
51429: LD_ADDR_VAR 0 6
51433: PUSH
51434: LD_VAR 0 6
51438: PUSH
51439: LD_VAR 0 2
51443: PUSH
51444: LD_VAR 0 5
51448: ARRAY
51449: ARRAY
51450: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51451: LD_ADDR_VAR 0 7
51455: PUSH
51456: LD_VAR 0 7
51460: PUSH
51461: LD_VAR 0 6
51465: PUSH
51466: EMPTY
51467: LIST
51468: ADD
51469: ST_TO_ADDR
// end ;
51470: GO 51426
51472: POP
51473: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51474: LD_ADDR_VAR 0 6
51478: PUSH
51479: LD_VAR 0 6
51483: PPUSH
51484: LD_VAR 0 2
51488: PUSH
51489: LD_VAR 0 2
51493: ARRAY
51494: PPUSH
51495: LD_VAR 0 3
51499: PPUSH
51500: CALL_OW 1
51504: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51505: LD_ADDR_VAR 0 7
51509: PUSH
51510: LD_VAR 0 7
51514: PPUSH
51515: LD_VAR 0 7
51519: PPUSH
51520: LD_VAR 0 6
51524: PPUSH
51525: CALL_OW 1
51529: ST_TO_ADDR
// for i = s_arr downto 2 do
51530: LD_ADDR_VAR 0 5
51534: PUSH
51535: DOUBLE
51536: LD_VAR 0 7
51540: INC
51541: ST_TO_ADDR
51542: LD_INT 2
51544: PUSH
51545: FOR_DOWNTO
51546: IFFALSE 51630
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51548: LD_ADDR_VAR 0 6
51552: PUSH
51553: LD_VAR 0 7
51557: PUSH
51558: LD_VAR 0 5
51562: PUSH
51563: LD_INT 1
51565: MINUS
51566: ARRAY
51567: PPUSH
51568: LD_VAR 0 2
51572: PUSH
51573: LD_VAR 0 5
51577: PUSH
51578: LD_INT 1
51580: MINUS
51581: ARRAY
51582: PPUSH
51583: LD_VAR 0 7
51587: PUSH
51588: LD_VAR 0 5
51592: ARRAY
51593: PPUSH
51594: CALL_OW 1
51598: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51599: LD_ADDR_VAR 0 7
51603: PUSH
51604: LD_VAR 0 7
51608: PPUSH
51609: LD_VAR 0 5
51613: PUSH
51614: LD_INT 1
51616: MINUS
51617: PPUSH
51618: LD_VAR 0 6
51622: PPUSH
51623: CALL_OW 1
51627: ST_TO_ADDR
// end ;
51628: GO 51545
51630: POP
51631: POP
// result := s_arr [ 1 ] ;
51632: LD_ADDR_VAR 0 4
51636: PUSH
51637: LD_VAR 0 7
51641: PUSH
51642: LD_INT 1
51644: ARRAY
51645: ST_TO_ADDR
// end ; end ;
51646: LD_VAR 0 4
51650: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51651: LD_INT 0
51653: PPUSH
51654: PPUSH
// if not list then
51655: LD_VAR 0 1
51659: NOT
51660: IFFALSE 51664
// exit ;
51662: GO 51755
// i := list [ pos1 ] ;
51664: LD_ADDR_VAR 0 5
51668: PUSH
51669: LD_VAR 0 1
51673: PUSH
51674: LD_VAR 0 2
51678: ARRAY
51679: ST_TO_ADDR
// if not i then
51680: LD_VAR 0 5
51684: NOT
51685: IFFALSE 51689
// exit ;
51687: GO 51755
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51689: LD_ADDR_VAR 0 1
51693: PUSH
51694: LD_VAR 0 1
51698: PPUSH
51699: LD_VAR 0 2
51703: PPUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_VAR 0 3
51713: ARRAY
51714: PPUSH
51715: CALL_OW 1
51719: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51720: LD_ADDR_VAR 0 1
51724: PUSH
51725: LD_VAR 0 1
51729: PPUSH
51730: LD_VAR 0 3
51734: PPUSH
51735: LD_VAR 0 5
51739: PPUSH
51740: CALL_OW 1
51744: ST_TO_ADDR
// result := list ;
51745: LD_ADDR_VAR 0 4
51749: PUSH
51750: LD_VAR 0 1
51754: ST_TO_ADDR
// end ;
51755: LD_VAR 0 4
51759: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51760: LD_INT 0
51762: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51763: LD_ADDR_VAR 0 5
51767: PUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: CALL_OW 250
51777: PPUSH
51778: LD_VAR 0 1
51782: PPUSH
51783: CALL_OW 251
51787: PPUSH
51788: LD_VAR 0 2
51792: PPUSH
51793: LD_VAR 0 3
51797: PPUSH
51798: LD_VAR 0 4
51802: PPUSH
51803: CALL 51813 0 5
51807: ST_TO_ADDR
// end ;
51808: LD_VAR 0 5
51812: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51813: LD_INT 0
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
// if not list then
51819: LD_VAR 0 3
51823: NOT
51824: IFFALSE 51828
// exit ;
51826: GO 52216
// result := [ ] ;
51828: LD_ADDR_VAR 0 6
51832: PUSH
51833: EMPTY
51834: ST_TO_ADDR
// for i in list do
51835: LD_ADDR_VAR 0 7
51839: PUSH
51840: LD_VAR 0 3
51844: PUSH
51845: FOR_IN
51846: IFFALSE 52048
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51848: LD_ADDR_VAR 0 9
51852: PUSH
51853: LD_VAR 0 7
51857: PPUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: LD_VAR 0 2
51867: PPUSH
51868: CALL_OW 297
51872: ST_TO_ADDR
// if not result then
51873: LD_VAR 0 6
51877: NOT
51878: IFFALSE 51904
// result := [ [ i , tmp ] ] else
51880: LD_ADDR_VAR 0 6
51884: PUSH
51885: LD_VAR 0 7
51889: PUSH
51890: LD_VAR 0 9
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: EMPTY
51900: LIST
51901: ST_TO_ADDR
51902: GO 52046
// begin if result [ result ] [ 2 ] < tmp then
51904: LD_VAR 0 6
51908: PUSH
51909: LD_VAR 0 6
51913: ARRAY
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PUSH
51919: LD_VAR 0 9
51923: LESS
51924: IFFALSE 51966
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51926: LD_ADDR_VAR 0 6
51930: PUSH
51931: LD_VAR 0 6
51935: PPUSH
51936: LD_VAR 0 6
51940: PUSH
51941: LD_INT 1
51943: PLUS
51944: PPUSH
51945: LD_VAR 0 7
51949: PUSH
51950: LD_VAR 0 9
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PPUSH
51959: CALL_OW 2
51963: ST_TO_ADDR
51964: GO 52046
// for j = 1 to result do
51966: LD_ADDR_VAR 0 8
51970: PUSH
51971: DOUBLE
51972: LD_INT 1
51974: DEC
51975: ST_TO_ADDR
51976: LD_VAR 0 6
51980: PUSH
51981: FOR_TO
51982: IFFALSE 52044
// begin if tmp < result [ j ] [ 2 ] then
51984: LD_VAR 0 9
51988: PUSH
51989: LD_VAR 0 6
51993: PUSH
51994: LD_VAR 0 8
51998: ARRAY
51999: PUSH
52000: LD_INT 2
52002: ARRAY
52003: LESS
52004: IFFALSE 52042
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52006: LD_ADDR_VAR 0 6
52010: PUSH
52011: LD_VAR 0 6
52015: PPUSH
52016: LD_VAR 0 8
52020: PPUSH
52021: LD_VAR 0 7
52025: PUSH
52026: LD_VAR 0 9
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PPUSH
52035: CALL_OW 2
52039: ST_TO_ADDR
// break ;
52040: GO 52044
// end ; end ;
52042: GO 51981
52044: POP
52045: POP
// end ; end ;
52046: GO 51845
52048: POP
52049: POP
// if result and not asc then
52050: LD_VAR 0 6
52054: PUSH
52055: LD_VAR 0 4
52059: NOT
52060: AND
52061: IFFALSE 52136
// begin tmp := result ;
52063: LD_ADDR_VAR 0 9
52067: PUSH
52068: LD_VAR 0 6
52072: ST_TO_ADDR
// for i = tmp downto 1 do
52073: LD_ADDR_VAR 0 7
52077: PUSH
52078: DOUBLE
52079: LD_VAR 0 9
52083: INC
52084: ST_TO_ADDR
52085: LD_INT 1
52087: PUSH
52088: FOR_DOWNTO
52089: IFFALSE 52134
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52091: LD_ADDR_VAR 0 6
52095: PUSH
52096: LD_VAR 0 6
52100: PPUSH
52101: LD_VAR 0 9
52105: PUSH
52106: LD_VAR 0 7
52110: MINUS
52111: PUSH
52112: LD_INT 1
52114: PLUS
52115: PPUSH
52116: LD_VAR 0 9
52120: PUSH
52121: LD_VAR 0 7
52125: ARRAY
52126: PPUSH
52127: CALL_OW 1
52131: ST_TO_ADDR
52132: GO 52088
52134: POP
52135: POP
// end ; tmp := [ ] ;
52136: LD_ADDR_VAR 0 9
52140: PUSH
52141: EMPTY
52142: ST_TO_ADDR
// if mode then
52143: LD_VAR 0 5
52147: IFFALSE 52216
// begin for i = 1 to result do
52149: LD_ADDR_VAR 0 7
52153: PUSH
52154: DOUBLE
52155: LD_INT 1
52157: DEC
52158: ST_TO_ADDR
52159: LD_VAR 0 6
52163: PUSH
52164: FOR_TO
52165: IFFALSE 52204
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52167: LD_ADDR_VAR 0 9
52171: PUSH
52172: LD_VAR 0 9
52176: PPUSH
52177: LD_VAR 0 7
52181: PPUSH
52182: LD_VAR 0 6
52186: PUSH
52187: LD_VAR 0 7
52191: ARRAY
52192: PUSH
52193: LD_INT 1
52195: ARRAY
52196: PPUSH
52197: CALL_OW 1
52201: ST_TO_ADDR
52202: GO 52164
52204: POP
52205: POP
// result := tmp ;
52206: LD_ADDR_VAR 0 6
52210: PUSH
52211: LD_VAR 0 9
52215: ST_TO_ADDR
// end ; end ;
52216: LD_VAR 0 6
52220: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52221: LD_INT 0
52223: PPUSH
52224: PPUSH
52225: PPUSH
52226: PPUSH
52227: PPUSH
52228: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52229: LD_ADDR_VAR 0 5
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// if not x or not y then
52251: LD_VAR 0 2
52255: NOT
52256: PUSH
52257: LD_VAR 0 3
52261: NOT
52262: OR
52263: IFFALSE 52267
// exit ;
52265: GO 53913
// if not range then
52267: LD_VAR 0 4
52271: NOT
52272: IFFALSE 52282
// range := 10 ;
52274: LD_ADDR_VAR 0 4
52278: PUSH
52279: LD_INT 10
52281: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52282: LD_ADDR_VAR 0 8
52286: PUSH
52287: LD_INT 81
52289: PUSH
52290: LD_VAR 0 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 92
52301: PUSH
52302: LD_VAR 0 2
52306: PUSH
52307: LD_VAR 0 3
52311: PUSH
52312: LD_VAR 0 4
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 21
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PPUSH
52345: CALL_OW 69
52349: ST_TO_ADDR
// if not tmp then
52350: LD_VAR 0 8
52354: NOT
52355: IFFALSE 52359
// exit ;
52357: GO 53913
// for i in tmp do
52359: LD_ADDR_VAR 0 6
52363: PUSH
52364: LD_VAR 0 8
52368: PUSH
52369: FOR_IN
52370: IFFALSE 53888
// begin points := [ 0 , 0 , 0 ] ;
52372: LD_ADDR_VAR 0 9
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// bpoints := 1 ;
52391: LD_ADDR_VAR 0 10
52395: PUSH
52396: LD_INT 1
52398: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52399: LD_VAR 0 6
52403: PPUSH
52404: CALL_OW 247
52408: PUSH
52409: LD_INT 1
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52417
52415: GO 52995
52417: POP
// begin if GetClass ( i ) = 1 then
52418: LD_VAR 0 6
52422: PPUSH
52423: CALL_OW 257
52427: PUSH
52428: LD_INT 1
52430: EQUAL
52431: IFFALSE 52452
// points := [ 10 , 5 , 3 ] ;
52433: LD_ADDR_VAR 0 9
52437: PUSH
52438: LD_INT 10
52440: PUSH
52441: LD_INT 5
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52452: LD_VAR 0 6
52456: PPUSH
52457: CALL_OW 257
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: IN
52476: IFFALSE 52497
// points := [ 3 , 2 , 1 ] ;
52478: LD_ADDR_VAR 0 9
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52497: LD_VAR 0 6
52501: PPUSH
52502: CALL_OW 257
52506: PUSH
52507: LD_INT 5
52509: EQUAL
52510: IFFALSE 52531
// points := [ 130 , 5 , 2 ] ;
52512: LD_ADDR_VAR 0 9
52516: PUSH
52517: LD_INT 130
52519: PUSH
52520: LD_INT 5
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52531: LD_VAR 0 6
52535: PPUSH
52536: CALL_OW 257
52540: PUSH
52541: LD_INT 8
52543: EQUAL
52544: IFFALSE 52565
// points := [ 35 , 35 , 30 ] ;
52546: LD_ADDR_VAR 0 9
52550: PUSH
52551: LD_INT 35
52553: PUSH
52554: LD_INT 35
52556: PUSH
52557: LD_INT 30
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52565: LD_VAR 0 6
52569: PPUSH
52570: CALL_OW 257
52574: PUSH
52575: LD_INT 9
52577: EQUAL
52578: IFFALSE 52599
// points := [ 20 , 55 , 40 ] ;
52580: LD_ADDR_VAR 0 9
52584: PUSH
52585: LD_INT 20
52587: PUSH
52588: LD_INT 55
52590: PUSH
52591: LD_INT 40
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52599: LD_VAR 0 6
52603: PPUSH
52604: CALL_OW 257
52608: PUSH
52609: LD_INT 12
52611: PUSH
52612: LD_INT 16
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: IN
52619: IFFALSE 52640
// points := [ 5 , 3 , 2 ] ;
52621: LD_ADDR_VAR 0 9
52625: PUSH
52626: LD_INT 5
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52640: LD_VAR 0 6
52644: PPUSH
52645: CALL_OW 257
52649: PUSH
52650: LD_INT 17
52652: EQUAL
52653: IFFALSE 52674
// points := [ 100 , 50 , 75 ] ;
52655: LD_ADDR_VAR 0 9
52659: PUSH
52660: LD_INT 100
52662: PUSH
52663: LD_INT 50
52665: PUSH
52666: LD_INT 75
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52674: LD_VAR 0 6
52678: PPUSH
52679: CALL_OW 257
52683: PUSH
52684: LD_INT 15
52686: EQUAL
52687: IFFALSE 52708
// points := [ 10 , 5 , 3 ] ;
52689: LD_ADDR_VAR 0 9
52693: PUSH
52694: LD_INT 10
52696: PUSH
52697: LD_INT 5
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52708: LD_VAR 0 6
52712: PPUSH
52713: CALL_OW 257
52717: PUSH
52718: LD_INT 14
52720: EQUAL
52721: IFFALSE 52742
// points := [ 10 , 0 , 0 ] ;
52723: LD_ADDR_VAR 0 9
52727: PUSH
52728: LD_INT 10
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52742: LD_VAR 0 6
52746: PPUSH
52747: CALL_OW 257
52751: PUSH
52752: LD_INT 11
52754: EQUAL
52755: IFFALSE 52776
// points := [ 30 , 10 , 5 ] ;
52757: LD_ADDR_VAR 0 9
52761: PUSH
52762: LD_INT 30
52764: PUSH
52765: LD_INT 10
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52776: LD_VAR 0 1
52780: PPUSH
52781: LD_INT 5
52783: PPUSH
52784: CALL_OW 321
52788: PUSH
52789: LD_INT 2
52791: EQUAL
52792: IFFALSE 52809
// bpoints := bpoints * 1.8 ;
52794: LD_ADDR_VAR 0 10
52798: PUSH
52799: LD_VAR 0 10
52803: PUSH
52804: LD_REAL  1.80000000000000E+0000
52807: MUL
52808: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52809: LD_VAR 0 6
52813: PPUSH
52814: CALL_OW 257
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: LD_INT 4
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: IN
52837: PUSH
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_INT 51
52845: PPUSH
52846: CALL_OW 321
52850: PUSH
52851: LD_INT 2
52853: EQUAL
52854: AND
52855: IFFALSE 52872
// bpoints := bpoints * 1.2 ;
52857: LD_ADDR_VAR 0 10
52861: PUSH
52862: LD_VAR 0 10
52866: PUSH
52867: LD_REAL  1.20000000000000E+0000
52870: MUL
52871: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52872: LD_VAR 0 6
52876: PPUSH
52877: CALL_OW 257
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 7
52887: PUSH
52888: LD_INT 9
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: IN
52896: PUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: LD_INT 52
52904: PPUSH
52905: CALL_OW 321
52909: PUSH
52910: LD_INT 2
52912: EQUAL
52913: AND
52914: IFFALSE 52931
// bpoints := bpoints * 1.5 ;
52916: LD_ADDR_VAR 0 10
52920: PUSH
52921: LD_VAR 0 10
52925: PUSH
52926: LD_REAL  1.50000000000000E+0000
52929: MUL
52930: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52931: LD_VAR 0 1
52935: PPUSH
52936: LD_INT 66
52938: PPUSH
52939: CALL_OW 321
52943: PUSH
52944: LD_INT 2
52946: EQUAL
52947: IFFALSE 52964
// bpoints := bpoints * 1.1 ;
52949: LD_ADDR_VAR 0 10
52953: PUSH
52954: LD_VAR 0 10
52958: PUSH
52959: LD_REAL  1.10000000000000E+0000
52962: MUL
52963: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52964: LD_ADDR_VAR 0 10
52968: PUSH
52969: LD_VAR 0 10
52973: PUSH
52974: LD_VAR 0 6
52978: PPUSH
52979: LD_INT 1
52981: PPUSH
52982: CALL_OW 259
52986: PUSH
52987: LD_REAL  1.15000000000000E+0000
52990: MUL
52991: MUL
52992: ST_TO_ADDR
// end ; unit_vehicle :
52993: GO 53817
52995: LD_INT 2
52997: DOUBLE
52998: EQUAL
52999: IFTRUE 53003
53001: GO 53805
53003: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53004: LD_VAR 0 6
53008: PPUSH
53009: CALL_OW 264
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 42
53019: PUSH
53020: LD_INT 24
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: IN
53028: IFFALSE 53049
// points := [ 25 , 5 , 3 ] ;
53030: LD_ADDR_VAR 0 9
53034: PUSH
53035: LD_INT 25
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53049: LD_VAR 0 6
53053: PPUSH
53054: CALL_OW 264
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: LD_INT 43
53064: PUSH
53065: LD_INT 25
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: IN
53073: IFFALSE 53094
// points := [ 40 , 15 , 5 ] ;
53075: LD_ADDR_VAR 0 9
53079: PUSH
53080: LD_INT 40
53082: PUSH
53083: LD_INT 15
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53094: LD_VAR 0 6
53098: PPUSH
53099: CALL_OW 264
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: LD_INT 23
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: IN
53114: IFFALSE 53135
// points := [ 7 , 25 , 8 ] ;
53116: LD_ADDR_VAR 0 9
53120: PUSH
53121: LD_INT 7
53123: PUSH
53124: LD_INT 25
53126: PUSH
53127: LD_INT 8
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53135: LD_VAR 0 6
53139: PPUSH
53140: CALL_OW 264
53144: PUSH
53145: LD_INT 5
53147: PUSH
53148: LD_INT 27
53150: PUSH
53151: LD_INT 44
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: IN
53159: IFFALSE 53180
// points := [ 14 , 50 , 16 ] ;
53161: LD_ADDR_VAR 0 9
53165: PUSH
53166: LD_INT 14
53168: PUSH
53169: LD_INT 50
53171: PUSH
53172: LD_INT 16
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53180: LD_VAR 0 6
53184: PPUSH
53185: CALL_OW 264
53189: PUSH
53190: LD_INT 6
53192: PUSH
53193: LD_INT 46
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: IN
53200: IFFALSE 53221
// points := [ 32 , 120 , 70 ] ;
53202: LD_ADDR_VAR 0 9
53206: PUSH
53207: LD_INT 32
53209: PUSH
53210: LD_INT 120
53212: PUSH
53213: LD_INT 70
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53221: LD_VAR 0 6
53225: PPUSH
53226: CALL_OW 264
53230: PUSH
53231: LD_INT 7
53233: PUSH
53234: LD_INT 28
53236: PUSH
53237: LD_INT 45
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: LIST
53244: IN
53245: IFFALSE 53266
// points := [ 35 , 20 , 45 ] ;
53247: LD_ADDR_VAR 0 9
53251: PUSH
53252: LD_INT 35
53254: PUSH
53255: LD_INT 20
53257: PUSH
53258: LD_INT 45
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53266: LD_VAR 0 6
53270: PPUSH
53271: CALL_OW 264
53275: PUSH
53276: LD_INT 47
53278: PUSH
53279: EMPTY
53280: LIST
53281: IN
53282: IFFALSE 53303
// points := [ 67 , 45 , 75 ] ;
53284: LD_ADDR_VAR 0 9
53288: PUSH
53289: LD_INT 67
53291: PUSH
53292: LD_INT 45
53294: PUSH
53295: LD_INT 75
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53303: LD_VAR 0 6
53307: PPUSH
53308: CALL_OW 264
53312: PUSH
53313: LD_INT 26
53315: PUSH
53316: EMPTY
53317: LIST
53318: IN
53319: IFFALSE 53340
// points := [ 120 , 30 , 80 ] ;
53321: LD_ADDR_VAR 0 9
53325: PUSH
53326: LD_INT 120
53328: PUSH
53329: LD_INT 30
53331: PUSH
53332: LD_INT 80
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53340: LD_VAR 0 6
53344: PPUSH
53345: CALL_OW 264
53349: PUSH
53350: LD_INT 22
53352: PUSH
53353: EMPTY
53354: LIST
53355: IN
53356: IFFALSE 53377
// points := [ 40 , 1 , 1 ] ;
53358: LD_ADDR_VAR 0 9
53362: PUSH
53363: LD_INT 40
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53377: LD_VAR 0 6
53381: PPUSH
53382: CALL_OW 264
53386: PUSH
53387: LD_INT 29
53389: PUSH
53390: EMPTY
53391: LIST
53392: IN
53393: IFFALSE 53414
// points := [ 70 , 200 , 400 ] ;
53395: LD_ADDR_VAR 0 9
53399: PUSH
53400: LD_INT 70
53402: PUSH
53403: LD_INT 200
53405: PUSH
53406: LD_INT 400
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53414: LD_VAR 0 6
53418: PPUSH
53419: CALL_OW 264
53423: PUSH
53424: LD_INT 14
53426: PUSH
53427: LD_INT 53
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: IN
53434: IFFALSE 53455
// points := [ 40 , 10 , 20 ] ;
53436: LD_ADDR_VAR 0 9
53440: PUSH
53441: LD_INT 40
53443: PUSH
53444: LD_INT 10
53446: PUSH
53447: LD_INT 20
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53455: LD_VAR 0 6
53459: PPUSH
53460: CALL_OW 264
53464: PUSH
53465: LD_INT 9
53467: PUSH
53468: EMPTY
53469: LIST
53470: IN
53471: IFFALSE 53492
// points := [ 5 , 70 , 20 ] ;
53473: LD_ADDR_VAR 0 9
53477: PUSH
53478: LD_INT 5
53480: PUSH
53481: LD_INT 70
53483: PUSH
53484: LD_INT 20
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53492: LD_VAR 0 6
53496: PPUSH
53497: CALL_OW 264
53501: PUSH
53502: LD_INT 10
53504: PUSH
53505: EMPTY
53506: LIST
53507: IN
53508: IFFALSE 53529
// points := [ 35 , 110 , 70 ] ;
53510: LD_ADDR_VAR 0 9
53514: PUSH
53515: LD_INT 35
53517: PUSH
53518: LD_INT 110
53520: PUSH
53521: LD_INT 70
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53529: LD_VAR 0 6
53533: PPUSH
53534: CALL_OW 265
53538: PUSH
53539: LD_INT 25
53541: EQUAL
53542: IFFALSE 53563
// points := [ 80 , 65 , 100 ] ;
53544: LD_ADDR_VAR 0 9
53548: PUSH
53549: LD_INT 80
53551: PUSH
53552: LD_INT 65
53554: PUSH
53555: LD_INT 100
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53563: LD_VAR 0 6
53567: PPUSH
53568: CALL_OW 263
53572: PUSH
53573: LD_INT 1
53575: EQUAL
53576: IFFALSE 53611
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53578: LD_ADDR_VAR 0 10
53582: PUSH
53583: LD_VAR 0 10
53587: PUSH
53588: LD_VAR 0 6
53592: PPUSH
53593: CALL_OW 311
53597: PPUSH
53598: LD_INT 3
53600: PPUSH
53601: CALL_OW 259
53605: PUSH
53606: LD_INT 4
53608: MUL
53609: MUL
53610: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53611: LD_VAR 0 6
53615: PPUSH
53616: CALL_OW 263
53620: PUSH
53621: LD_INT 2
53623: EQUAL
53624: IFFALSE 53675
// begin j := IsControledBy ( i ) ;
53626: LD_ADDR_VAR 0 7
53630: PUSH
53631: LD_VAR 0 6
53635: PPUSH
53636: CALL_OW 312
53640: ST_TO_ADDR
// if j then
53641: LD_VAR 0 7
53645: IFFALSE 53675
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53647: LD_ADDR_VAR 0 10
53651: PUSH
53652: LD_VAR 0 10
53656: PUSH
53657: LD_VAR 0 7
53661: PPUSH
53662: LD_INT 3
53664: PPUSH
53665: CALL_OW 259
53669: PUSH
53670: LD_INT 3
53672: MUL
53673: MUL
53674: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53675: LD_VAR 0 6
53679: PPUSH
53680: CALL_OW 264
53684: PUSH
53685: LD_INT 5
53687: PUSH
53688: LD_INT 6
53690: PUSH
53691: LD_INT 46
53693: PUSH
53694: LD_INT 44
53696: PUSH
53697: LD_INT 47
53699: PUSH
53700: LD_INT 45
53702: PUSH
53703: LD_INT 28
53705: PUSH
53706: LD_INT 7
53708: PUSH
53709: LD_INT 27
53711: PUSH
53712: LD_INT 29
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: IN
53727: PUSH
53728: LD_VAR 0 1
53732: PPUSH
53733: LD_INT 52
53735: PPUSH
53736: CALL_OW 321
53740: PUSH
53741: LD_INT 2
53743: EQUAL
53744: AND
53745: IFFALSE 53762
// bpoints := bpoints * 1.2 ;
53747: LD_ADDR_VAR 0 10
53751: PUSH
53752: LD_VAR 0 10
53756: PUSH
53757: LD_REAL  1.20000000000000E+0000
53760: MUL
53761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53762: LD_VAR 0 6
53766: PPUSH
53767: CALL_OW 264
53771: PUSH
53772: LD_INT 6
53774: PUSH
53775: LD_INT 46
53777: PUSH
53778: LD_INT 47
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: IN
53786: IFFALSE 53803
// bpoints := bpoints * 1.2 ;
53788: LD_ADDR_VAR 0 10
53792: PUSH
53793: LD_VAR 0 10
53797: PUSH
53798: LD_REAL  1.20000000000000E+0000
53801: MUL
53802: ST_TO_ADDR
// end ; unit_building :
53803: GO 53817
53805: LD_INT 3
53807: DOUBLE
53808: EQUAL
53809: IFTRUE 53813
53811: GO 53816
53813: POP
// ; end ;
53814: GO 53817
53816: POP
// for j = 1 to 3 do
53817: LD_ADDR_VAR 0 7
53821: PUSH
53822: DOUBLE
53823: LD_INT 1
53825: DEC
53826: ST_TO_ADDR
53827: LD_INT 3
53829: PUSH
53830: FOR_TO
53831: IFFALSE 53884
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53833: LD_ADDR_VAR 0 5
53837: PUSH
53838: LD_VAR 0 5
53842: PPUSH
53843: LD_VAR 0 7
53847: PPUSH
53848: LD_VAR 0 5
53852: PUSH
53853: LD_VAR 0 7
53857: ARRAY
53858: PUSH
53859: LD_VAR 0 9
53863: PUSH
53864: LD_VAR 0 7
53868: ARRAY
53869: PUSH
53870: LD_VAR 0 10
53874: MUL
53875: PLUS
53876: PPUSH
53877: CALL_OW 1
53881: ST_TO_ADDR
53882: GO 53830
53884: POP
53885: POP
// end ;
53886: GO 52369
53888: POP
53889: POP
// result := Replace ( result , 4 , tmp ) ;
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: LD_VAR 0 5
53899: PPUSH
53900: LD_INT 4
53902: PPUSH
53903: LD_VAR 0 8
53907: PPUSH
53908: CALL_OW 1
53912: ST_TO_ADDR
// end ;
53913: LD_VAR 0 5
53917: RET
// export function DangerAtRange ( unit , range ) ; begin
53918: LD_INT 0
53920: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53921: LD_ADDR_VAR 0 3
53925: PUSH
53926: LD_VAR 0 1
53930: PPUSH
53931: CALL_OW 255
53935: PPUSH
53936: LD_VAR 0 1
53940: PPUSH
53941: CALL_OW 250
53945: PPUSH
53946: LD_VAR 0 1
53950: PPUSH
53951: CALL_OW 251
53955: PPUSH
53956: LD_VAR 0 2
53960: PPUSH
53961: CALL 52221 0 4
53965: ST_TO_ADDR
// end ;
53966: LD_VAR 0 3
53970: RET
// export function DangerInArea ( side , area ) ; begin
53971: LD_INT 0
53973: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53974: LD_ADDR_VAR 0 3
53978: PUSH
53979: LD_VAR 0 2
53983: PPUSH
53984: LD_INT 81
53986: PUSH
53987: LD_VAR 0 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PPUSH
53996: CALL_OW 70
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 3
54005: RET
// export function IsExtension ( b ) ; begin
54006: LD_INT 0
54008: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54009: LD_ADDR_VAR 0 2
54013: PUSH
54014: LD_VAR 0 1
54018: PUSH
54019: LD_INT 23
54021: PUSH
54022: LD_INT 20
54024: PUSH
54025: LD_INT 22
54027: PUSH
54028: LD_INT 17
54030: PUSH
54031: LD_INT 24
54033: PUSH
54034: LD_INT 21
54036: PUSH
54037: LD_INT 19
54039: PUSH
54040: LD_INT 16
54042: PUSH
54043: LD_INT 25
54045: PUSH
54046: LD_INT 18
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: IN
54061: ST_TO_ADDR
// end ;
54062: LD_VAR 0 2
54066: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
54067: LD_INT 0
54069: PPUSH
54070: PPUSH
54071: PPUSH
// result := [ ] ;
54072: LD_ADDR_VAR 0 3
54076: PUSH
54077: EMPTY
54078: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54079: LD_ADDR_VAR 0 4
54083: PUSH
54084: LD_VAR 0 2
54088: PPUSH
54089: LD_INT 21
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PPUSH
54099: CALL_OW 70
54103: ST_TO_ADDR
// if not tmp then
54104: LD_VAR 0 4
54108: NOT
54109: IFFALSE 54113
// exit ;
54111: GO 54171
// for i in tmp do
54113: LD_ADDR_VAR 0 5
54117: PUSH
54118: LD_VAR 0 4
54122: PUSH
54123: FOR_IN
54124: IFFALSE 54159
// if GetBase ( i ) <> base then
54126: LD_VAR 0 5
54130: PPUSH
54131: CALL_OW 274
54135: PUSH
54136: LD_VAR 0 1
54140: NONEQUAL
54141: IFFALSE 54157
// ComLinkToBase ( base , i ) ;
54143: LD_VAR 0 1
54147: PPUSH
54148: LD_VAR 0 5
54152: PPUSH
54153: CALL_OW 169
54157: GO 54123
54159: POP
54160: POP
// result := tmp ;
54161: LD_ADDR_VAR 0 3
54165: PUSH
54166: LD_VAR 0 4
54170: ST_TO_ADDR
// end ;
54171: LD_VAR 0 3
54175: RET
// export function ComComplete ( unit , b ) ; var i ; begin
54176: LD_INT 0
54178: PPUSH
54179: PPUSH
// if BuildingStatus ( b ) = bs_build then
54180: LD_VAR 0 2
54184: PPUSH
54185: CALL_OW 461
54189: PUSH
54190: LD_INT 1
54192: EQUAL
54193: IFFALSE 54253
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54195: LD_VAR 0 1
54199: PPUSH
54200: LD_STRING h
54202: PUSH
54203: LD_VAR 0 2
54207: PPUSH
54208: CALL_OW 250
54212: PUSH
54213: LD_VAR 0 2
54217: PPUSH
54218: CALL_OW 251
54222: PUSH
54223: LD_VAR 0 2
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: PPUSH
54249: CALL_OW 446
// end ;
54253: LD_VAR 0 3
54257: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54258: LD_INT 0
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54266: LD_VAR 0 1
54270: NOT
54271: PUSH
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 263
54281: PUSH
54282: LD_INT 2
54284: EQUAL
54285: NOT
54286: OR
54287: IFFALSE 54291
// exit ;
54289: GO 54607
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54291: LD_ADDR_VAR 0 6
54295: PUSH
54296: LD_INT 22
54298: PUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 255
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 30
54318: PUSH
54319: LD_INT 36
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 34
54328: PUSH
54329: LD_INT 31
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PPUSH
54345: CALL_OW 69
54349: ST_TO_ADDR
// if not tmp then
54350: LD_VAR 0 6
54354: NOT
54355: IFFALSE 54359
// exit ;
54357: GO 54607
// result := [ ] ;
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: EMPTY
54365: ST_TO_ADDR
// for i in tmp do
54366: LD_ADDR_VAR 0 3
54370: PUSH
54371: LD_VAR 0 6
54375: PUSH
54376: FOR_IN
54377: IFFALSE 54448
// begin t := UnitsInside ( i ) ;
54379: LD_ADDR_VAR 0 4
54383: PUSH
54384: LD_VAR 0 3
54388: PPUSH
54389: CALL_OW 313
54393: ST_TO_ADDR
// if t then
54394: LD_VAR 0 4
54398: IFFALSE 54446
// for j in t do
54400: LD_ADDR_VAR 0 7
54404: PUSH
54405: LD_VAR 0 4
54409: PUSH
54410: FOR_IN
54411: IFFALSE 54444
// result := Insert ( result , result + 1 , j ) ;
54413: LD_ADDR_VAR 0 2
54417: PUSH
54418: LD_VAR 0 2
54422: PPUSH
54423: LD_VAR 0 2
54427: PUSH
54428: LD_INT 1
54430: PLUS
54431: PPUSH
54432: LD_VAR 0 7
54436: PPUSH
54437: CALL_OW 2
54441: ST_TO_ADDR
54442: GO 54410
54444: POP
54445: POP
// end ;
54446: GO 54376
54448: POP
54449: POP
// if not result then
54450: LD_VAR 0 2
54454: NOT
54455: IFFALSE 54459
// exit ;
54457: GO 54607
// mech := result [ 1 ] ;
54459: LD_ADDR_VAR 0 5
54463: PUSH
54464: LD_VAR 0 2
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: ST_TO_ADDR
// if result > 1 then
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 1
54480: GREATER
54481: IFFALSE 54593
// for i = 2 to result do
54483: LD_ADDR_VAR 0 3
54487: PUSH
54488: DOUBLE
54489: LD_INT 2
54491: DEC
54492: ST_TO_ADDR
54493: LD_VAR 0 2
54497: PUSH
54498: FOR_TO
54499: IFFALSE 54591
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54501: LD_ADDR_VAR 0 4
54505: PUSH
54506: LD_VAR 0 2
54510: PUSH
54511: LD_VAR 0 3
54515: ARRAY
54516: PPUSH
54517: LD_INT 3
54519: PPUSH
54520: CALL_OW 259
54524: PUSH
54525: LD_VAR 0 2
54529: PUSH
54530: LD_VAR 0 3
54534: ARRAY
54535: PPUSH
54536: CALL_OW 432
54540: MINUS
54541: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54542: LD_VAR 0 4
54546: PUSH
54547: LD_VAR 0 5
54551: PPUSH
54552: LD_INT 3
54554: PPUSH
54555: CALL_OW 259
54559: PUSH
54560: LD_VAR 0 5
54564: PPUSH
54565: CALL_OW 432
54569: MINUS
54570: GREATEREQUAL
54571: IFFALSE 54589
// mech := result [ i ] ;
54573: LD_ADDR_VAR 0 5
54577: PUSH
54578: LD_VAR 0 2
54582: PUSH
54583: LD_VAR 0 3
54587: ARRAY
54588: ST_TO_ADDR
// end ;
54589: GO 54498
54591: POP
54592: POP
// ComLinkTo ( vehicle , mech ) ;
54593: LD_VAR 0 1
54597: PPUSH
54598: LD_VAR 0 5
54602: PPUSH
54603: CALL_OW 135
// end ;
54607: LD_VAR 0 2
54611: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54612: LD_INT 0
54614: PPUSH
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
54626: PPUSH
// result := [ ] ;
54627: LD_ADDR_VAR 0 7
54631: PUSH
54632: EMPTY
54633: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54634: LD_VAR 0 1
54638: PPUSH
54639: CALL_OW 266
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: IN
54654: NOT
54655: IFFALSE 54659
// exit ;
54657: GO 56290
// if name then
54659: LD_VAR 0 3
54663: IFFALSE 54679
// SetBName ( base_dep , name ) ;
54665: LD_VAR 0 1
54669: PPUSH
54670: LD_VAR 0 3
54674: PPUSH
54675: CALL_OW 500
// base := GetBase ( base_dep ) ;
54679: LD_ADDR_VAR 0 15
54683: PUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 274
54693: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54694: LD_ADDR_VAR 0 16
54698: PUSH
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 255
54708: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54709: LD_ADDR_VAR 0 17
54713: PUSH
54714: LD_VAR 0 1
54718: PPUSH
54719: CALL_OW 248
54723: ST_TO_ADDR
// if sources then
54724: LD_VAR 0 5
54728: IFFALSE 54775
// for i = 1 to 3 do
54730: LD_ADDR_VAR 0 8
54734: PUSH
54735: DOUBLE
54736: LD_INT 1
54738: DEC
54739: ST_TO_ADDR
54740: LD_INT 3
54742: PUSH
54743: FOR_TO
54744: IFFALSE 54773
// AddResourceType ( base , i , sources [ i ] ) ;
54746: LD_VAR 0 15
54750: PPUSH
54751: LD_VAR 0 8
54755: PPUSH
54756: LD_VAR 0 5
54760: PUSH
54761: LD_VAR 0 8
54765: ARRAY
54766: PPUSH
54767: CALL_OW 276
54771: GO 54743
54773: POP
54774: POP
// buildings := GetBaseBuildings ( base , area ) ;
54775: LD_ADDR_VAR 0 18
54779: PUSH
54780: LD_VAR 0 15
54784: PPUSH
54785: LD_VAR 0 2
54789: PPUSH
54790: CALL 54067 0 2
54794: ST_TO_ADDR
// InitHc ;
54795: CALL_OW 19
// InitUc ;
54799: CALL_OW 18
// uc_side := side ;
54803: LD_ADDR_OWVAR 20
54807: PUSH
54808: LD_VAR 0 16
54812: ST_TO_ADDR
// uc_nation := nation ;
54813: LD_ADDR_OWVAR 21
54817: PUSH
54818: LD_VAR 0 17
54822: ST_TO_ADDR
// if buildings then
54823: LD_VAR 0 18
54827: IFFALSE 56149
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54829: LD_ADDR_VAR 0 19
54833: PUSH
54834: LD_VAR 0 18
54838: PPUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 30
54844: PUSH
54845: LD_INT 29
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 30
54854: PUSH
54855: LD_INT 30
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: PPUSH
54867: CALL_OW 72
54871: ST_TO_ADDR
// if tmp then
54872: LD_VAR 0 19
54876: IFFALSE 54924
// for i in tmp do
54878: LD_ADDR_VAR 0 8
54882: PUSH
54883: LD_VAR 0 19
54887: PUSH
54888: FOR_IN
54889: IFFALSE 54922
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54891: LD_VAR 0 8
54895: PPUSH
54896: CALL_OW 250
54900: PPUSH
54901: LD_VAR 0 8
54905: PPUSH
54906: CALL_OW 251
54910: PPUSH
54911: LD_VAR 0 16
54915: PPUSH
54916: CALL_OW 441
54920: GO 54888
54922: POP
54923: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54924: LD_VAR 0 18
54928: PPUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 30
54934: PUSH
54935: LD_INT 32
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 30
54944: PUSH
54945: LD_INT 33
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: PPUSH
54957: CALL_OW 72
54961: IFFALSE 55049
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54963: LD_ADDR_VAR 0 8
54967: PUSH
54968: LD_VAR 0 18
54972: PPUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 30
54978: PUSH
54979: LD_INT 32
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 30
54988: PUSH
54989: LD_INT 33
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: PPUSH
55001: CALL_OW 72
55005: PUSH
55006: FOR_IN
55007: IFFALSE 55047
// begin if not GetBWeapon ( i ) then
55009: LD_VAR 0 8
55013: PPUSH
55014: CALL_OW 269
55018: NOT
55019: IFFALSE 55045
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55021: LD_VAR 0 8
55025: PPUSH
55026: LD_VAR 0 8
55030: PPUSH
55031: LD_VAR 0 2
55035: PPUSH
55036: CALL 56295 0 2
55040: PPUSH
55041: CALL_OW 431
// end ;
55045: GO 55006
55047: POP
55048: POP
// end ; for i = 1 to personel do
55049: LD_ADDR_VAR 0 8
55053: PUSH
55054: DOUBLE
55055: LD_INT 1
55057: DEC
55058: ST_TO_ADDR
55059: LD_VAR 0 6
55063: PUSH
55064: FOR_TO
55065: IFFALSE 56129
// begin if i > 4 then
55067: LD_VAR 0 8
55071: PUSH
55072: LD_INT 4
55074: GREATER
55075: IFFALSE 55079
// break ;
55077: GO 56129
// case i of 1 :
55079: LD_VAR 0 8
55083: PUSH
55084: LD_INT 1
55086: DOUBLE
55087: EQUAL
55088: IFTRUE 55092
55090: GO 55172
55092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55093: LD_ADDR_VAR 0 12
55097: PUSH
55098: LD_VAR 0 18
55102: PPUSH
55103: LD_INT 22
55105: PUSH
55106: LD_VAR 0 16
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 58
55117: PUSH
55118: EMPTY
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 30
55126: PUSH
55127: LD_INT 32
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 30
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 30
55146: PUSH
55147: LD_INT 5
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: LIST
55164: PPUSH
55165: CALL_OW 72
55169: ST_TO_ADDR
55170: GO 55394
55172: LD_INT 2
55174: DOUBLE
55175: EQUAL
55176: IFTRUE 55180
55178: GO 55242
55180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55181: LD_ADDR_VAR 0 12
55185: PUSH
55186: LD_VAR 0 18
55190: PPUSH
55191: LD_INT 22
55193: PUSH
55194: LD_VAR 0 16
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 30
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 30
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PPUSH
55235: CALL_OW 72
55239: ST_TO_ADDR
55240: GO 55394
55242: LD_INT 3
55244: DOUBLE
55245: EQUAL
55246: IFTRUE 55250
55248: GO 55312
55250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55251: LD_ADDR_VAR 0 12
55255: PUSH
55256: LD_VAR 0 18
55260: PPUSH
55261: LD_INT 22
55263: PUSH
55264: LD_VAR 0 16
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 30
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 30
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PPUSH
55305: CALL_OW 72
55309: ST_TO_ADDR
55310: GO 55394
55312: LD_INT 4
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55320
55318: GO 55393
55320: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55321: LD_ADDR_VAR 0 12
55325: PUSH
55326: LD_VAR 0 18
55330: PPUSH
55331: LD_INT 22
55333: PUSH
55334: LD_VAR 0 16
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 30
55348: PUSH
55349: LD_INT 6
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 30
55358: PUSH
55359: LD_INT 7
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 30
55368: PUSH
55369: LD_INT 8
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PPUSH
55386: CALL_OW 72
55390: ST_TO_ADDR
55391: GO 55394
55393: POP
// if i = 1 then
55394: LD_VAR 0 8
55398: PUSH
55399: LD_INT 1
55401: EQUAL
55402: IFFALSE 55513
// begin tmp := [ ] ;
55404: LD_ADDR_VAR 0 19
55408: PUSH
55409: EMPTY
55410: ST_TO_ADDR
// for j in f do
55411: LD_ADDR_VAR 0 9
55415: PUSH
55416: LD_VAR 0 12
55420: PUSH
55421: FOR_IN
55422: IFFALSE 55495
// if GetBType ( j ) = b_bunker then
55424: LD_VAR 0 9
55428: PPUSH
55429: CALL_OW 266
55433: PUSH
55434: LD_INT 32
55436: EQUAL
55437: IFFALSE 55464
// tmp := Insert ( tmp , 1 , j ) else
55439: LD_ADDR_VAR 0 19
55443: PUSH
55444: LD_VAR 0 19
55448: PPUSH
55449: LD_INT 1
55451: PPUSH
55452: LD_VAR 0 9
55456: PPUSH
55457: CALL_OW 2
55461: ST_TO_ADDR
55462: GO 55493
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55464: LD_ADDR_VAR 0 19
55468: PUSH
55469: LD_VAR 0 19
55473: PPUSH
55474: LD_VAR 0 19
55478: PUSH
55479: LD_INT 1
55481: PLUS
55482: PPUSH
55483: LD_VAR 0 9
55487: PPUSH
55488: CALL_OW 2
55492: ST_TO_ADDR
55493: GO 55421
55495: POP
55496: POP
// if tmp then
55497: LD_VAR 0 19
55501: IFFALSE 55513
// f := tmp ;
55503: LD_ADDR_VAR 0 12
55507: PUSH
55508: LD_VAR 0 19
55512: ST_TO_ADDR
// end ; x := personel [ i ] ;
55513: LD_ADDR_VAR 0 13
55517: PUSH
55518: LD_VAR 0 6
55522: PUSH
55523: LD_VAR 0 8
55527: ARRAY
55528: ST_TO_ADDR
// if x = - 1 then
55529: LD_VAR 0 13
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: EQUAL
55538: IFFALSE 55747
// begin for j in f do
55540: LD_ADDR_VAR 0 9
55544: PUSH
55545: LD_VAR 0 12
55549: PUSH
55550: FOR_IN
55551: IFFALSE 55743
// repeat InitHc ;
55553: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55557: LD_VAR 0 9
55561: PPUSH
55562: CALL_OW 266
55566: PUSH
55567: LD_INT 5
55569: EQUAL
55570: IFFALSE 55640
// begin if UnitsInside ( j ) < 3 then
55572: LD_VAR 0 9
55576: PPUSH
55577: CALL_OW 313
55581: PUSH
55582: LD_INT 3
55584: LESS
55585: IFFALSE 55621
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55587: LD_INT 0
55589: PPUSH
55590: LD_INT 5
55592: PUSH
55593: LD_INT 8
55595: PUSH
55596: LD_INT 9
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: PUSH
55604: LD_VAR 0 17
55608: ARRAY
55609: PPUSH
55610: LD_VAR 0 4
55614: PPUSH
55615: CALL_OW 380
55619: GO 55638
// PrepareHuman ( false , i , skill ) ;
55621: LD_INT 0
55623: PPUSH
55624: LD_VAR 0 8
55628: PPUSH
55629: LD_VAR 0 4
55633: PPUSH
55634: CALL_OW 380
// end else
55638: GO 55657
// PrepareHuman ( false , i , skill ) ;
55640: LD_INT 0
55642: PPUSH
55643: LD_VAR 0 8
55647: PPUSH
55648: LD_VAR 0 4
55652: PPUSH
55653: CALL_OW 380
// un := CreateHuman ;
55657: LD_ADDR_VAR 0 14
55661: PUSH
55662: CALL_OW 44
55666: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55667: LD_ADDR_VAR 0 7
55671: PUSH
55672: LD_VAR 0 7
55676: PPUSH
55677: LD_INT 1
55679: PPUSH
55680: LD_VAR 0 14
55684: PPUSH
55685: CALL_OW 2
55689: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55690: LD_VAR 0 14
55694: PPUSH
55695: LD_VAR 0 9
55699: PPUSH
55700: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55704: LD_VAR 0 9
55708: PPUSH
55709: CALL_OW 313
55713: PUSH
55714: LD_INT 6
55716: EQUAL
55717: PUSH
55718: LD_VAR 0 9
55722: PPUSH
55723: CALL_OW 266
55727: PUSH
55728: LD_INT 32
55730: PUSH
55731: LD_INT 31
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: IN
55738: OR
55739: IFFALSE 55553
55741: GO 55550
55743: POP
55744: POP
// end else
55745: GO 56127
// for j = 1 to x do
55747: LD_ADDR_VAR 0 9
55751: PUSH
55752: DOUBLE
55753: LD_INT 1
55755: DEC
55756: ST_TO_ADDR
55757: LD_VAR 0 13
55761: PUSH
55762: FOR_TO
55763: IFFALSE 56125
// begin InitHc ;
55765: CALL_OW 19
// if not f then
55769: LD_VAR 0 12
55773: NOT
55774: IFFALSE 55863
// begin PrepareHuman ( false , i , skill ) ;
55776: LD_INT 0
55778: PPUSH
55779: LD_VAR 0 8
55783: PPUSH
55784: LD_VAR 0 4
55788: PPUSH
55789: CALL_OW 380
// un := CreateHuman ;
55793: LD_ADDR_VAR 0 14
55797: PUSH
55798: CALL_OW 44
55802: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55803: LD_ADDR_VAR 0 7
55807: PUSH
55808: LD_VAR 0 7
55812: PPUSH
55813: LD_INT 1
55815: PPUSH
55816: LD_VAR 0 14
55820: PPUSH
55821: CALL_OW 2
55825: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55826: LD_VAR 0 14
55830: PPUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: CALL_OW 250
55840: PPUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 251
55850: PPUSH
55851: LD_INT 10
55853: PPUSH
55854: LD_INT 0
55856: PPUSH
55857: CALL_OW 50
// continue ;
55861: GO 55762
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55863: LD_VAR 0 12
55867: PUSH
55868: LD_INT 1
55870: ARRAY
55871: PPUSH
55872: CALL_OW 313
55876: PUSH
55877: LD_VAR 0 12
55881: PUSH
55882: LD_INT 1
55884: ARRAY
55885: PPUSH
55886: CALL_OW 266
55890: PUSH
55891: LD_INT 32
55893: PUSH
55894: LD_INT 31
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: IN
55901: AND
55902: PUSH
55903: LD_VAR 0 12
55907: PUSH
55908: LD_INT 1
55910: ARRAY
55911: PPUSH
55912: CALL_OW 313
55916: PUSH
55917: LD_INT 6
55919: EQUAL
55920: OR
55921: IFFALSE 55941
// f := Delete ( f , 1 ) ;
55923: LD_ADDR_VAR 0 12
55927: PUSH
55928: LD_VAR 0 12
55932: PPUSH
55933: LD_INT 1
55935: PPUSH
55936: CALL_OW 3
55940: ST_TO_ADDR
// if not f then
55941: LD_VAR 0 12
55945: NOT
55946: IFFALSE 55964
// begin x := x + 2 ;
55948: LD_ADDR_VAR 0 13
55952: PUSH
55953: LD_VAR 0 13
55957: PUSH
55958: LD_INT 2
55960: PLUS
55961: ST_TO_ADDR
// continue ;
55962: GO 55762
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55964: LD_VAR 0 12
55968: PUSH
55969: LD_INT 1
55971: ARRAY
55972: PPUSH
55973: CALL_OW 266
55977: PUSH
55978: LD_INT 5
55980: EQUAL
55981: IFFALSE 56055
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55983: LD_VAR 0 12
55987: PUSH
55988: LD_INT 1
55990: ARRAY
55991: PPUSH
55992: CALL_OW 313
55996: PUSH
55997: LD_INT 3
55999: LESS
56000: IFFALSE 56036
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56002: LD_INT 0
56004: PPUSH
56005: LD_INT 5
56007: PUSH
56008: LD_INT 8
56010: PUSH
56011: LD_INT 9
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: PUSH
56019: LD_VAR 0 17
56023: ARRAY
56024: PPUSH
56025: LD_VAR 0 4
56029: PPUSH
56030: CALL_OW 380
56034: GO 56053
// PrepareHuman ( false , i , skill ) ;
56036: LD_INT 0
56038: PPUSH
56039: LD_VAR 0 8
56043: PPUSH
56044: LD_VAR 0 4
56048: PPUSH
56049: CALL_OW 380
// end else
56053: GO 56072
// PrepareHuman ( false , i , skill ) ;
56055: LD_INT 0
56057: PPUSH
56058: LD_VAR 0 8
56062: PPUSH
56063: LD_VAR 0 4
56067: PPUSH
56068: CALL_OW 380
// un := CreateHuman ;
56072: LD_ADDR_VAR 0 14
56076: PUSH
56077: CALL_OW 44
56081: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56082: LD_ADDR_VAR 0 7
56086: PUSH
56087: LD_VAR 0 7
56091: PPUSH
56092: LD_INT 1
56094: PPUSH
56095: LD_VAR 0 14
56099: PPUSH
56100: CALL_OW 2
56104: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56105: LD_VAR 0 14
56109: PPUSH
56110: LD_VAR 0 12
56114: PUSH
56115: LD_INT 1
56117: ARRAY
56118: PPUSH
56119: CALL_OW 52
// end ;
56123: GO 55762
56125: POP
56126: POP
// end ;
56127: GO 55064
56129: POP
56130: POP
// result := result ^ buildings ;
56131: LD_ADDR_VAR 0 7
56135: PUSH
56136: LD_VAR 0 7
56140: PUSH
56141: LD_VAR 0 18
56145: ADD
56146: ST_TO_ADDR
// end else
56147: GO 56290
// begin for i = 1 to personel do
56149: LD_ADDR_VAR 0 8
56153: PUSH
56154: DOUBLE
56155: LD_INT 1
56157: DEC
56158: ST_TO_ADDR
56159: LD_VAR 0 6
56163: PUSH
56164: FOR_TO
56165: IFFALSE 56288
// begin if i > 4 then
56167: LD_VAR 0 8
56171: PUSH
56172: LD_INT 4
56174: GREATER
56175: IFFALSE 56179
// break ;
56177: GO 56288
// x := personel [ i ] ;
56179: LD_ADDR_VAR 0 13
56183: PUSH
56184: LD_VAR 0 6
56188: PUSH
56189: LD_VAR 0 8
56193: ARRAY
56194: ST_TO_ADDR
// if x = - 1 then
56195: LD_VAR 0 13
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: EQUAL
56204: IFFALSE 56208
// continue ;
56206: GO 56164
// PrepareHuman ( false , i , skill ) ;
56208: LD_INT 0
56210: PPUSH
56211: LD_VAR 0 8
56215: PPUSH
56216: LD_VAR 0 4
56220: PPUSH
56221: CALL_OW 380
// un := CreateHuman ;
56225: LD_ADDR_VAR 0 14
56229: PUSH
56230: CALL_OW 44
56234: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56235: LD_VAR 0 14
56239: PPUSH
56240: LD_VAR 0 1
56244: PPUSH
56245: CALL_OW 250
56249: PPUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: CALL_OW 251
56259: PPUSH
56260: LD_INT 10
56262: PPUSH
56263: LD_INT 0
56265: PPUSH
56266: CALL_OW 50
// result := result ^ un ;
56270: LD_ADDR_VAR 0 7
56274: PUSH
56275: LD_VAR 0 7
56279: PUSH
56280: LD_VAR 0 14
56284: ADD
56285: ST_TO_ADDR
// end ;
56286: GO 56164
56288: POP
56289: POP
// end ; end ;
56290: LD_VAR 0 7
56294: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56295: LD_INT 0
56297: PPUSH
56298: PPUSH
56299: PPUSH
56300: PPUSH
56301: PPUSH
56302: PPUSH
56303: PPUSH
56304: PPUSH
56305: PPUSH
56306: PPUSH
56307: PPUSH
56308: PPUSH
56309: PPUSH
56310: PPUSH
56311: PPUSH
56312: PPUSH
// result := false ;
56313: LD_ADDR_VAR 0 3
56317: PUSH
56318: LD_INT 0
56320: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56321: LD_VAR 0 1
56325: NOT
56326: PUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: CALL_OW 266
56336: PUSH
56337: LD_INT 32
56339: PUSH
56340: LD_INT 33
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: IN
56347: NOT
56348: OR
56349: IFFALSE 56353
// exit ;
56351: GO 57489
// nat := GetNation ( tower ) ;
56353: LD_ADDR_VAR 0 12
56357: PUSH
56358: LD_VAR 0 1
56362: PPUSH
56363: CALL_OW 248
56367: ST_TO_ADDR
// side := GetSide ( tower ) ;
56368: LD_ADDR_VAR 0 16
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: CALL_OW 255
56382: ST_TO_ADDR
// x := GetX ( tower ) ;
56383: LD_ADDR_VAR 0 10
56387: PUSH
56388: LD_VAR 0 1
56392: PPUSH
56393: CALL_OW 250
56397: ST_TO_ADDR
// y := GetY ( tower ) ;
56398: LD_ADDR_VAR 0 11
56402: PUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: CALL_OW 251
56412: ST_TO_ADDR
// if not x or not y then
56413: LD_VAR 0 10
56417: NOT
56418: PUSH
56419: LD_VAR 0 11
56423: NOT
56424: OR
56425: IFFALSE 56429
// exit ;
56427: GO 57489
// weapon := 0 ;
56429: LD_ADDR_VAR 0 18
56433: PUSH
56434: LD_INT 0
56436: ST_TO_ADDR
// fac_list := [ ] ;
56437: LD_ADDR_VAR 0 17
56441: PUSH
56442: EMPTY
56443: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
56444: LD_ADDR_VAR 0 6
56448: PUSH
56449: LD_VAR 0 1
56453: PPUSH
56454: CALL_OW 274
56458: PPUSH
56459: LD_VAR 0 2
56463: PPUSH
56464: CALL 54067 0 2
56468: PPUSH
56469: LD_INT 30
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PPUSH
56479: CALL_OW 72
56483: ST_TO_ADDR
// if not factories then
56484: LD_VAR 0 6
56488: NOT
56489: IFFALSE 56493
// exit ;
56491: GO 57489
// for i in factories do
56493: LD_ADDR_VAR 0 8
56497: PUSH
56498: LD_VAR 0 6
56502: PUSH
56503: FOR_IN
56504: IFFALSE 56529
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56506: LD_ADDR_VAR 0 17
56510: PUSH
56511: LD_VAR 0 17
56515: PUSH
56516: LD_VAR 0 8
56520: PPUSH
56521: CALL_OW 478
56525: UNION
56526: ST_TO_ADDR
56527: GO 56503
56529: POP
56530: POP
// if not fac_list then
56531: LD_VAR 0 17
56535: NOT
56536: IFFALSE 56540
// exit ;
56538: GO 57489
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56540: LD_ADDR_VAR 0 5
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: LD_INT 5
56550: PUSH
56551: LD_INT 9
56553: PUSH
56554: LD_INT 10
56556: PUSH
56557: LD_INT 6
56559: PUSH
56560: LD_INT 7
56562: PUSH
56563: LD_INT 11
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 27
56577: PUSH
56578: LD_INT 28
56580: PUSH
56581: LD_INT 26
56583: PUSH
56584: LD_INT 30
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 43
56595: PUSH
56596: LD_INT 44
56598: PUSH
56599: LD_INT 46
56601: PUSH
56602: LD_INT 45
56604: PUSH
56605: LD_INT 47
56607: PUSH
56608: LD_INT 49
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: PUSH
56624: LD_VAR 0 12
56628: ARRAY
56629: ST_TO_ADDR
// for i in list do
56630: LD_ADDR_VAR 0 8
56634: PUSH
56635: LD_VAR 0 5
56639: PUSH
56640: FOR_IN
56641: IFFALSE 56674
// if not i in fac_list then
56643: LD_VAR 0 8
56647: PUSH
56648: LD_VAR 0 17
56652: IN
56653: NOT
56654: IFFALSE 56672
// list := list diff i ;
56656: LD_ADDR_VAR 0 5
56660: PUSH
56661: LD_VAR 0 5
56665: PUSH
56666: LD_VAR 0 8
56670: DIFF
56671: ST_TO_ADDR
56672: GO 56640
56674: POP
56675: POP
// if not list then
56676: LD_VAR 0 5
56680: NOT
56681: IFFALSE 56685
// exit ;
56683: GO 57489
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56685: LD_VAR 0 12
56689: PUSH
56690: LD_INT 3
56692: EQUAL
56693: PUSH
56694: LD_INT 49
56696: PUSH
56697: LD_VAR 0 5
56701: IN
56702: AND
56703: PUSH
56704: LD_INT 31
56706: PPUSH
56707: LD_VAR 0 16
56711: PPUSH
56712: CALL_OW 321
56716: PUSH
56717: LD_INT 2
56719: EQUAL
56720: AND
56721: IFFALSE 56781
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56723: LD_INT 22
56725: PUSH
56726: LD_VAR 0 16
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 35
56737: PUSH
56738: LD_INT 49
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 91
56747: PUSH
56748: LD_VAR 0 1
56752: PUSH
56753: LD_INT 10
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: PPUSH
56766: CALL_OW 69
56770: NOT
56771: IFFALSE 56781
// weapon := ru_time_lapser ;
56773: LD_ADDR_VAR 0 18
56777: PUSH
56778: LD_INT 49
56780: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56781: LD_VAR 0 12
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: IN
56796: PUSH
56797: LD_INT 11
56799: PUSH
56800: LD_VAR 0 5
56804: IN
56805: PUSH
56806: LD_INT 30
56808: PUSH
56809: LD_VAR 0 5
56813: IN
56814: OR
56815: AND
56816: PUSH
56817: LD_INT 6
56819: PPUSH
56820: LD_VAR 0 16
56824: PPUSH
56825: CALL_OW 321
56829: PUSH
56830: LD_INT 2
56832: EQUAL
56833: AND
56834: IFFALSE 56999
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56836: LD_INT 22
56838: PUSH
56839: LD_VAR 0 16
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 35
56853: PUSH
56854: LD_INT 11
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 35
56863: PUSH
56864: LD_INT 30
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 91
56878: PUSH
56879: LD_VAR 0 1
56883: PUSH
56884: LD_INT 18
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: LIST
56896: PPUSH
56897: CALL_OW 69
56901: NOT
56902: PUSH
56903: LD_INT 22
56905: PUSH
56906: LD_VAR 0 16
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 30
56920: PUSH
56921: LD_INT 32
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 30
56930: PUSH
56931: LD_INT 33
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 91
56945: PUSH
56946: LD_VAR 0 1
56950: PUSH
56951: LD_INT 12
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: PPUSH
56967: CALL_OW 69
56971: PUSH
56972: LD_INT 2
56974: GREATER
56975: AND
56976: IFFALSE 56999
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56978: LD_ADDR_VAR 0 18
56982: PUSH
56983: LD_INT 11
56985: PUSH
56986: LD_INT 30
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_VAR 0 12
56997: ARRAY
56998: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56999: LD_VAR 0 18
57003: NOT
57004: PUSH
57005: LD_INT 40
57007: PPUSH
57008: LD_VAR 0 16
57012: PPUSH
57013: CALL_OW 321
57017: PUSH
57018: LD_INT 2
57020: EQUAL
57021: AND
57022: PUSH
57023: LD_INT 7
57025: PUSH
57026: LD_VAR 0 5
57030: IN
57031: PUSH
57032: LD_INT 28
57034: PUSH
57035: LD_VAR 0 5
57039: IN
57040: OR
57041: PUSH
57042: LD_INT 45
57044: PUSH
57045: LD_VAR 0 5
57049: IN
57050: OR
57051: AND
57052: IFFALSE 57306
// begin hex := GetHexInfo ( x , y ) ;
57054: LD_ADDR_VAR 0 4
57058: PUSH
57059: LD_VAR 0 10
57063: PPUSH
57064: LD_VAR 0 11
57068: PPUSH
57069: CALL_OW 546
57073: ST_TO_ADDR
// if hex [ 1 ] then
57074: LD_VAR 0 4
57078: PUSH
57079: LD_INT 1
57081: ARRAY
57082: IFFALSE 57086
// exit ;
57084: GO 57489
// height := hex [ 2 ] ;
57086: LD_ADDR_VAR 0 15
57090: PUSH
57091: LD_VAR 0 4
57095: PUSH
57096: LD_INT 2
57098: ARRAY
57099: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57100: LD_ADDR_VAR 0 14
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: LD_INT 5
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// for i in tmp do
57123: LD_ADDR_VAR 0 8
57127: PUSH
57128: LD_VAR 0 14
57132: PUSH
57133: FOR_IN
57134: IFFALSE 57304
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57136: LD_ADDR_VAR 0 9
57140: PUSH
57141: LD_VAR 0 10
57145: PPUSH
57146: LD_VAR 0 8
57150: PPUSH
57151: LD_INT 5
57153: PPUSH
57154: CALL_OW 272
57158: PUSH
57159: LD_VAR 0 11
57163: PPUSH
57164: LD_VAR 0 8
57168: PPUSH
57169: LD_INT 5
57171: PPUSH
57172: CALL_OW 273
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57181: LD_VAR 0 9
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PPUSH
57190: LD_VAR 0 9
57194: PUSH
57195: LD_INT 2
57197: ARRAY
57198: PPUSH
57199: CALL_OW 488
57203: IFFALSE 57302
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57205: LD_ADDR_VAR 0 4
57209: PUSH
57210: LD_VAR 0 9
57214: PUSH
57215: LD_INT 1
57217: ARRAY
57218: PPUSH
57219: LD_VAR 0 9
57223: PUSH
57224: LD_INT 2
57226: ARRAY
57227: PPUSH
57228: CALL_OW 546
57232: ST_TO_ADDR
// if hex [ 1 ] then
57233: LD_VAR 0 4
57237: PUSH
57238: LD_INT 1
57240: ARRAY
57241: IFFALSE 57245
// continue ;
57243: GO 57133
// h := hex [ 2 ] ;
57245: LD_ADDR_VAR 0 13
57249: PUSH
57250: LD_VAR 0 4
57254: PUSH
57255: LD_INT 2
57257: ARRAY
57258: ST_TO_ADDR
// if h + 7 < height then
57259: LD_VAR 0 13
57263: PUSH
57264: LD_INT 7
57266: PLUS
57267: PUSH
57268: LD_VAR 0 15
57272: LESS
57273: IFFALSE 57302
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57275: LD_ADDR_VAR 0 18
57279: PUSH
57280: LD_INT 7
57282: PUSH
57283: LD_INT 28
57285: PUSH
57286: LD_INT 45
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: PUSH
57294: LD_VAR 0 12
57298: ARRAY
57299: ST_TO_ADDR
// break ;
57300: GO 57304
// end ; end ; end ;
57302: GO 57133
57304: POP
57305: POP
// end ; if not weapon then
57306: LD_VAR 0 18
57310: NOT
57311: IFFALSE 57371
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57313: LD_ADDR_VAR 0 5
57317: PUSH
57318: LD_VAR 0 5
57322: PUSH
57323: LD_INT 11
57325: PUSH
57326: LD_INT 30
57328: PUSH
57329: LD_INT 49
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: DIFF
57337: ST_TO_ADDR
// if not list then
57338: LD_VAR 0 5
57342: NOT
57343: IFFALSE 57347
// exit ;
57345: GO 57489
// weapon := list [ rand ( 1 , list ) ] ;
57347: LD_ADDR_VAR 0 18
57351: PUSH
57352: LD_VAR 0 5
57356: PUSH
57357: LD_INT 1
57359: PPUSH
57360: LD_VAR 0 5
57364: PPUSH
57365: CALL_OW 12
57369: ARRAY
57370: ST_TO_ADDR
// end ; if weapon then
57371: LD_VAR 0 18
57375: IFFALSE 57489
// begin tmp := CostOfWeapon ( weapon ) ;
57377: LD_ADDR_VAR 0 14
57381: PUSH
57382: LD_VAR 0 18
57386: PPUSH
57387: CALL_OW 451
57391: ST_TO_ADDR
// j := GetBase ( tower ) ;
57392: LD_ADDR_VAR 0 9
57396: PUSH
57397: LD_VAR 0 1
57401: PPUSH
57402: CALL_OW 274
57406: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57407: LD_VAR 0 9
57411: PPUSH
57412: LD_INT 1
57414: PPUSH
57415: CALL_OW 275
57419: PUSH
57420: LD_VAR 0 14
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: GREATEREQUAL
57429: PUSH
57430: LD_VAR 0 9
57434: PPUSH
57435: LD_INT 2
57437: PPUSH
57438: CALL_OW 275
57442: PUSH
57443: LD_VAR 0 14
57447: PUSH
57448: LD_INT 2
57450: ARRAY
57451: GREATEREQUAL
57452: AND
57453: PUSH
57454: LD_VAR 0 9
57458: PPUSH
57459: LD_INT 3
57461: PPUSH
57462: CALL_OW 275
57466: PUSH
57467: LD_VAR 0 14
57471: PUSH
57472: LD_INT 3
57474: ARRAY
57475: GREATEREQUAL
57476: AND
57477: IFFALSE 57489
// result := weapon ;
57479: LD_ADDR_VAR 0 3
57483: PUSH
57484: LD_VAR 0 18
57488: ST_TO_ADDR
// end ; end ;
57489: LD_VAR 0 3
57493: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57494: LD_INT 0
57496: PPUSH
57497: PPUSH
// result := true ;
57498: LD_ADDR_VAR 0 3
57502: PUSH
57503: LD_INT 1
57505: ST_TO_ADDR
// if array1 = array2 then
57506: LD_VAR 0 1
57510: PUSH
57511: LD_VAR 0 2
57515: EQUAL
57516: IFFALSE 57576
// begin for i = 1 to array1 do
57518: LD_ADDR_VAR 0 4
57522: PUSH
57523: DOUBLE
57524: LD_INT 1
57526: DEC
57527: ST_TO_ADDR
57528: LD_VAR 0 1
57532: PUSH
57533: FOR_TO
57534: IFFALSE 57572
// if array1 [ i ] <> array2 [ i ] then
57536: LD_VAR 0 1
57540: PUSH
57541: LD_VAR 0 4
57545: ARRAY
57546: PUSH
57547: LD_VAR 0 2
57551: PUSH
57552: LD_VAR 0 4
57556: ARRAY
57557: NONEQUAL
57558: IFFALSE 57570
// begin result := false ;
57560: LD_ADDR_VAR 0 3
57564: PUSH
57565: LD_INT 0
57567: ST_TO_ADDR
// break ;
57568: GO 57572
// end ;
57570: GO 57533
57572: POP
57573: POP
// end else
57574: GO 57584
// result := false ;
57576: LD_ADDR_VAR 0 3
57580: PUSH
57581: LD_INT 0
57583: ST_TO_ADDR
// end ;
57584: LD_VAR 0 3
57588: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57589: LD_INT 0
57591: PPUSH
57592: PPUSH
57593: PPUSH
// pom := GetBase ( fac ) ;
57594: LD_ADDR_VAR 0 5
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL_OW 274
57608: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57609: LD_ADDR_VAR 0 4
57613: PUSH
57614: LD_VAR 0 2
57618: PUSH
57619: LD_INT 1
57621: ARRAY
57622: PPUSH
57623: LD_VAR 0 2
57627: PUSH
57628: LD_INT 2
57630: ARRAY
57631: PPUSH
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 3
57639: ARRAY
57640: PPUSH
57641: LD_VAR 0 2
57645: PUSH
57646: LD_INT 4
57648: ARRAY
57649: PPUSH
57650: CALL_OW 449
57654: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57655: LD_ADDR_VAR 0 3
57659: PUSH
57660: LD_VAR 0 5
57664: PPUSH
57665: LD_INT 1
57667: PPUSH
57668: CALL_OW 275
57672: PUSH
57673: LD_VAR 0 4
57677: PUSH
57678: LD_INT 1
57680: ARRAY
57681: GREATEREQUAL
57682: PUSH
57683: LD_VAR 0 5
57687: PPUSH
57688: LD_INT 2
57690: PPUSH
57691: CALL_OW 275
57695: PUSH
57696: LD_VAR 0 4
57700: PUSH
57701: LD_INT 2
57703: ARRAY
57704: GREATEREQUAL
57705: AND
57706: PUSH
57707: LD_VAR 0 5
57711: PPUSH
57712: LD_INT 3
57714: PPUSH
57715: CALL_OW 275
57719: PUSH
57720: LD_VAR 0 4
57724: PUSH
57725: LD_INT 3
57727: ARRAY
57728: GREATEREQUAL
57729: AND
57730: ST_TO_ADDR
// end ;
57731: LD_VAR 0 3
57735: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57736: LD_INT 0
57738: PPUSH
57739: PPUSH
57740: PPUSH
57741: PPUSH
// pom := GetBase ( building ) ;
57742: LD_ADDR_VAR 0 3
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: CALL_OW 274
57756: ST_TO_ADDR
// if not pom then
57757: LD_VAR 0 3
57761: NOT
57762: IFFALSE 57766
// exit ;
57764: GO 57936
// btype := GetBType ( building ) ;
57766: LD_ADDR_VAR 0 5
57770: PUSH
57771: LD_VAR 0 1
57775: PPUSH
57776: CALL_OW 266
57780: ST_TO_ADDR
// if btype = b_armoury then
57781: LD_VAR 0 5
57785: PUSH
57786: LD_INT 4
57788: EQUAL
57789: IFFALSE 57799
// btype := b_barracks ;
57791: LD_ADDR_VAR 0 5
57795: PUSH
57796: LD_INT 5
57798: ST_TO_ADDR
// if btype = b_depot then
57799: LD_VAR 0 5
57803: PUSH
57804: LD_INT 0
57806: EQUAL
57807: IFFALSE 57817
// btype := b_warehouse ;
57809: LD_ADDR_VAR 0 5
57813: PUSH
57814: LD_INT 1
57816: ST_TO_ADDR
// if btype = b_workshop then
57817: LD_VAR 0 5
57821: PUSH
57822: LD_INT 2
57824: EQUAL
57825: IFFALSE 57835
// btype := b_factory ;
57827: LD_ADDR_VAR 0 5
57831: PUSH
57832: LD_INT 3
57834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57835: LD_ADDR_VAR 0 4
57839: PUSH
57840: LD_VAR 0 5
57844: PPUSH
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL_OW 248
57854: PPUSH
57855: CALL_OW 450
57859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57860: LD_ADDR_VAR 0 2
57864: PUSH
57865: LD_VAR 0 3
57869: PPUSH
57870: LD_INT 1
57872: PPUSH
57873: CALL_OW 275
57877: PUSH
57878: LD_VAR 0 4
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: GREATEREQUAL
57887: PUSH
57888: LD_VAR 0 3
57892: PPUSH
57893: LD_INT 2
57895: PPUSH
57896: CALL_OW 275
57900: PUSH
57901: LD_VAR 0 4
57905: PUSH
57906: LD_INT 2
57908: ARRAY
57909: GREATEREQUAL
57910: AND
57911: PUSH
57912: LD_VAR 0 3
57916: PPUSH
57917: LD_INT 3
57919: PPUSH
57920: CALL_OW 275
57924: PUSH
57925: LD_VAR 0 4
57929: PUSH
57930: LD_INT 3
57932: ARRAY
57933: GREATEREQUAL
57934: AND
57935: ST_TO_ADDR
// end ;
57936: LD_VAR 0 2
57940: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57941: LD_INT 0
57943: PPUSH
57944: PPUSH
57945: PPUSH
// pom := GetBase ( building ) ;
57946: LD_ADDR_VAR 0 4
57950: PUSH
57951: LD_VAR 0 1
57955: PPUSH
57956: CALL_OW 274
57960: ST_TO_ADDR
// if not pom then
57961: LD_VAR 0 4
57965: NOT
57966: IFFALSE 57970
// exit ;
57968: GO 58071
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57970: LD_ADDR_VAR 0 5
57974: PUSH
57975: LD_VAR 0 2
57979: PPUSH
57980: LD_VAR 0 1
57984: PPUSH
57985: CALL_OW 248
57989: PPUSH
57990: CALL_OW 450
57994: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57995: LD_ADDR_VAR 0 3
57999: PUSH
58000: LD_VAR 0 4
58004: PPUSH
58005: LD_INT 1
58007: PPUSH
58008: CALL_OW 275
58012: PUSH
58013: LD_VAR 0 5
58017: PUSH
58018: LD_INT 1
58020: ARRAY
58021: GREATEREQUAL
58022: PUSH
58023: LD_VAR 0 4
58027: PPUSH
58028: LD_INT 2
58030: PPUSH
58031: CALL_OW 275
58035: PUSH
58036: LD_VAR 0 5
58040: PUSH
58041: LD_INT 2
58043: ARRAY
58044: GREATEREQUAL
58045: AND
58046: PUSH
58047: LD_VAR 0 4
58051: PPUSH
58052: LD_INT 3
58054: PPUSH
58055: CALL_OW 275
58059: PUSH
58060: LD_VAR 0 5
58064: PUSH
58065: LD_INT 3
58067: ARRAY
58068: GREATEREQUAL
58069: AND
58070: ST_TO_ADDR
// end ;
58071: LD_VAR 0 3
58075: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
58076: LD_INT 0
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
58086: PPUSH
58087: PPUSH
// result := false ;
58088: LD_ADDR_VAR 0 6
58092: PUSH
58093: LD_INT 0
58095: ST_TO_ADDR
// if not base or not btype or not x or not y then
58096: LD_VAR 0 1
58100: NOT
58101: PUSH
58102: LD_VAR 0 2
58106: NOT
58107: OR
58108: PUSH
58109: LD_VAR 0 3
58113: NOT
58114: OR
58115: PUSH
58116: LD_VAR 0 4
58120: NOT
58121: OR
58122: IFFALSE 58126
// exit ;
58124: GO 58717
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
58126: LD_ADDR_VAR 0 12
58130: PUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: LD_VAR 0 3
58140: PPUSH
58141: LD_VAR 0 4
58145: PPUSH
58146: LD_VAR 0 5
58150: PPUSH
58151: LD_VAR 0 1
58155: PUSH
58156: LD_INT 1
58158: ARRAY
58159: PPUSH
58160: CALL_OW 248
58164: PPUSH
58165: LD_INT 0
58167: PPUSH
58168: CALL 59554 0 6
58172: ST_TO_ADDR
// if not hexes then
58173: LD_VAR 0 12
58177: NOT
58178: IFFALSE 58182
// exit ;
58180: GO 58717
// for i = 1 to hexes do
58182: LD_ADDR_VAR 0 7
58186: PUSH
58187: DOUBLE
58188: LD_INT 1
58190: DEC
58191: ST_TO_ADDR
58192: LD_VAR 0 12
58196: PUSH
58197: FOR_TO
58198: IFFALSE 58715
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58200: LD_ADDR_VAR 0 11
58204: PUSH
58205: LD_VAR 0 12
58209: PUSH
58210: LD_VAR 0 7
58214: ARRAY
58215: PUSH
58216: LD_INT 1
58218: ARRAY
58219: PPUSH
58220: LD_VAR 0 12
58224: PUSH
58225: LD_VAR 0 7
58229: ARRAY
58230: PUSH
58231: LD_INT 2
58233: ARRAY
58234: PPUSH
58235: CALL_OW 428
58239: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58240: LD_VAR 0 12
58244: PUSH
58245: LD_VAR 0 7
58249: ARRAY
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PPUSH
58255: LD_VAR 0 12
58259: PUSH
58260: LD_VAR 0 7
58264: ARRAY
58265: PUSH
58266: LD_INT 2
58268: ARRAY
58269: PPUSH
58270: CALL_OW 351
58274: PUSH
58275: LD_VAR 0 12
58279: PUSH
58280: LD_VAR 0 7
58284: ARRAY
58285: PUSH
58286: LD_INT 1
58288: ARRAY
58289: PPUSH
58290: LD_VAR 0 12
58294: PUSH
58295: LD_VAR 0 7
58299: ARRAY
58300: PUSH
58301: LD_INT 2
58303: ARRAY
58304: PPUSH
58305: CALL_OW 488
58309: NOT
58310: OR
58311: PUSH
58312: LD_VAR 0 11
58316: PPUSH
58317: CALL_OW 247
58321: PUSH
58322: LD_INT 3
58324: EQUAL
58325: OR
58326: IFFALSE 58332
// exit ;
58328: POP
58329: POP
58330: GO 58717
// if not tmp then
58332: LD_VAR 0 11
58336: NOT
58337: IFFALSE 58341
// continue ;
58339: GO 58197
// result := true ;
58341: LD_ADDR_VAR 0 6
58345: PUSH
58346: LD_INT 1
58348: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58349: LD_ADDR_VAR 0 15
58353: PUSH
58354: LD_INT 22
58356: PUSH
58357: LD_VAR 0 11
58361: PPUSH
58362: CALL_OW 255
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 30
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 30
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PPUSH
58403: CALL_OW 69
58407: ST_TO_ADDR
// if dep then
58408: LD_VAR 0 15
58412: IFFALSE 58548
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58414: LD_ADDR_VAR 0 14
58418: PUSH
58419: LD_VAR 0 15
58423: PUSH
58424: LD_INT 1
58426: ARRAY
58427: PPUSH
58428: CALL_OW 250
58432: PPUSH
58433: LD_VAR 0 15
58437: PUSH
58438: LD_INT 1
58440: ARRAY
58441: PPUSH
58442: CALL_OW 254
58446: PPUSH
58447: LD_INT 5
58449: PPUSH
58450: CALL_OW 272
58454: PUSH
58455: LD_VAR 0 15
58459: PUSH
58460: LD_INT 1
58462: ARRAY
58463: PPUSH
58464: CALL_OW 251
58468: PPUSH
58469: LD_VAR 0 15
58473: PUSH
58474: LD_INT 1
58476: ARRAY
58477: PPUSH
58478: CALL_OW 254
58482: PPUSH
58483: LD_INT 5
58485: PPUSH
58486: CALL_OW 273
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58495: LD_VAR 0 14
58499: PUSH
58500: LD_INT 1
58502: ARRAY
58503: PPUSH
58504: LD_VAR 0 14
58508: PUSH
58509: LD_INT 2
58511: ARRAY
58512: PPUSH
58513: CALL_OW 488
58517: IFFALSE 58548
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58519: LD_VAR 0 11
58523: PPUSH
58524: LD_VAR 0 14
58528: PUSH
58529: LD_INT 1
58531: ARRAY
58532: PPUSH
58533: LD_VAR 0 14
58537: PUSH
58538: LD_INT 2
58540: ARRAY
58541: PPUSH
58542: CALL_OW 111
// continue ;
58546: GO 58197
// end ; end ; r := GetDir ( tmp ) ;
58548: LD_ADDR_VAR 0 13
58552: PUSH
58553: LD_VAR 0 11
58557: PPUSH
58558: CALL_OW 254
58562: ST_TO_ADDR
// if r = 5 then
58563: LD_VAR 0 13
58567: PUSH
58568: LD_INT 5
58570: EQUAL
58571: IFFALSE 58581
// r := 0 ;
58573: LD_ADDR_VAR 0 13
58577: PUSH
58578: LD_INT 0
58580: ST_TO_ADDR
// for j = r to 5 do
58581: LD_ADDR_VAR 0 8
58585: PUSH
58586: DOUBLE
58587: LD_VAR 0 13
58591: DEC
58592: ST_TO_ADDR
58593: LD_INT 5
58595: PUSH
58596: FOR_TO
58597: IFFALSE 58711
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58599: LD_ADDR_VAR 0 9
58603: PUSH
58604: LD_VAR 0 11
58608: PPUSH
58609: CALL_OW 250
58613: PPUSH
58614: LD_VAR 0 8
58618: PPUSH
58619: LD_INT 2
58621: PPUSH
58622: CALL_OW 272
58626: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58627: LD_ADDR_VAR 0 10
58631: PUSH
58632: LD_VAR 0 11
58636: PPUSH
58637: CALL_OW 251
58641: PPUSH
58642: LD_VAR 0 8
58646: PPUSH
58647: LD_INT 2
58649: PPUSH
58650: CALL_OW 273
58654: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58655: LD_VAR 0 9
58659: PPUSH
58660: LD_VAR 0 10
58664: PPUSH
58665: CALL_OW 488
58669: PUSH
58670: LD_VAR 0 9
58674: PPUSH
58675: LD_VAR 0 10
58679: PPUSH
58680: CALL_OW 428
58684: NOT
58685: AND
58686: IFFALSE 58709
// begin ComMoveXY ( tmp , _x , _y ) ;
58688: LD_VAR 0 11
58692: PPUSH
58693: LD_VAR 0 9
58697: PPUSH
58698: LD_VAR 0 10
58702: PPUSH
58703: CALL_OW 111
// break ;
58707: GO 58711
// end ; end ;
58709: GO 58596
58711: POP
58712: POP
// end ;
58713: GO 58197
58715: POP
58716: POP
// end ;
58717: LD_VAR 0 6
58721: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
58722: LD_INT 0
58724: PPUSH
58725: PPUSH
58726: PPUSH
58727: PPUSH
58728: PPUSH
58729: PPUSH
58730: PPUSH
58731: PPUSH
58732: PPUSH
58733: PPUSH
// result := false ;
58734: LD_ADDR_VAR 0 6
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58742: LD_VAR 0 1
58746: NOT
58747: PUSH
58748: LD_VAR 0 1
58752: PPUSH
58753: CALL_OW 266
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: IN
58768: NOT
58769: OR
58770: PUSH
58771: LD_VAR 0 2
58775: NOT
58776: OR
58777: PUSH
58778: LD_VAR 0 5
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: LD_INT 4
58797: PUSH
58798: LD_INT 5
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: IN
58809: NOT
58810: OR
58811: PUSH
58812: LD_VAR 0 3
58816: PPUSH
58817: LD_VAR 0 4
58821: PPUSH
58822: CALL_OW 488
58826: NOT
58827: OR
58828: IFFALSE 58832
// exit ;
58830: GO 59549
// pom := GetBase ( bdepot ) ;
58832: LD_ADDR_VAR 0 10
58836: PUSH
58837: LD_VAR 0 1
58841: PPUSH
58842: CALL_OW 274
58846: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
58847: LD_ADDR_VAR 0 11
58851: PUSH
58852: LD_VAR 0 2
58856: PPUSH
58857: LD_VAR 0 1
58861: PPUSH
58862: CALL_OW 248
58866: PPUSH
58867: CALL_OW 450
58871: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58872: LD_VAR 0 10
58876: PPUSH
58877: LD_INT 1
58879: PPUSH
58880: CALL_OW 275
58884: PUSH
58885: LD_VAR 0 11
58889: PUSH
58890: LD_INT 1
58892: ARRAY
58893: GREATEREQUAL
58894: PUSH
58895: LD_VAR 0 10
58899: PPUSH
58900: LD_INT 2
58902: PPUSH
58903: CALL_OW 275
58907: PUSH
58908: LD_VAR 0 11
58912: PUSH
58913: LD_INT 2
58915: ARRAY
58916: GREATEREQUAL
58917: AND
58918: PUSH
58919: LD_VAR 0 10
58923: PPUSH
58924: LD_INT 3
58926: PPUSH
58927: CALL_OW 275
58931: PUSH
58932: LD_VAR 0 11
58936: PUSH
58937: LD_INT 3
58939: ARRAY
58940: GREATEREQUAL
58941: AND
58942: NOT
58943: IFFALSE 58947
// exit ;
58945: GO 59549
// if GetBType ( bdepot ) = b_depot then
58947: LD_VAR 0 1
58951: PPUSH
58952: CALL_OW 266
58956: PUSH
58957: LD_INT 0
58959: EQUAL
58960: IFFALSE 58972
// dist := 28 else
58962: LD_ADDR_VAR 0 14
58966: PUSH
58967: LD_INT 28
58969: ST_TO_ADDR
58970: GO 58980
// dist := 36 ;
58972: LD_ADDR_VAR 0 14
58976: PUSH
58977: LD_INT 36
58979: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_VAR 0 3
58989: PPUSH
58990: LD_VAR 0 4
58994: PPUSH
58995: CALL_OW 297
58999: PUSH
59000: LD_VAR 0 14
59004: GREATER
59005: IFFALSE 59009
// exit ;
59007: GO 59549
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
59009: LD_ADDR_VAR 0 12
59013: PUSH
59014: LD_VAR 0 2
59018: PPUSH
59019: LD_VAR 0 3
59023: PPUSH
59024: LD_VAR 0 4
59028: PPUSH
59029: LD_VAR 0 5
59033: PPUSH
59034: LD_VAR 0 1
59038: PPUSH
59039: CALL_OW 248
59043: PPUSH
59044: LD_INT 0
59046: PPUSH
59047: CALL 59554 0 6
59051: ST_TO_ADDR
// if not hexes then
59052: LD_VAR 0 12
59056: NOT
59057: IFFALSE 59061
// exit ;
59059: GO 59549
// hex := GetHexInfo ( x , y ) ;
59061: LD_ADDR_VAR 0 15
59065: PUSH
59066: LD_VAR 0 3
59070: PPUSH
59071: LD_VAR 0 4
59075: PPUSH
59076: CALL_OW 546
59080: ST_TO_ADDR
// if hex [ 1 ] then
59081: LD_VAR 0 15
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: IFFALSE 59093
// exit ;
59091: GO 59549
// height := hex [ 2 ] ;
59093: LD_ADDR_VAR 0 13
59097: PUSH
59098: LD_VAR 0 15
59102: PUSH
59103: LD_INT 2
59105: ARRAY
59106: ST_TO_ADDR
// for i = 1 to hexes do
59107: LD_ADDR_VAR 0 7
59111: PUSH
59112: DOUBLE
59113: LD_INT 1
59115: DEC
59116: ST_TO_ADDR
59117: LD_VAR 0 12
59121: PUSH
59122: FOR_TO
59123: IFFALSE 59453
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59125: LD_VAR 0 12
59129: PUSH
59130: LD_VAR 0 7
59134: ARRAY
59135: PUSH
59136: LD_INT 1
59138: ARRAY
59139: PPUSH
59140: LD_VAR 0 12
59144: PUSH
59145: LD_VAR 0 7
59149: ARRAY
59150: PUSH
59151: LD_INT 2
59153: ARRAY
59154: PPUSH
59155: CALL_OW 488
59159: NOT
59160: PUSH
59161: LD_VAR 0 12
59165: PUSH
59166: LD_VAR 0 7
59170: ARRAY
59171: PUSH
59172: LD_INT 1
59174: ARRAY
59175: PPUSH
59176: LD_VAR 0 12
59180: PUSH
59181: LD_VAR 0 7
59185: ARRAY
59186: PUSH
59187: LD_INT 2
59189: ARRAY
59190: PPUSH
59191: CALL_OW 428
59195: PUSH
59196: LD_INT 0
59198: GREATER
59199: OR
59200: PUSH
59201: LD_VAR 0 12
59205: PUSH
59206: LD_VAR 0 7
59210: ARRAY
59211: PUSH
59212: LD_INT 1
59214: ARRAY
59215: PPUSH
59216: LD_VAR 0 12
59220: PUSH
59221: LD_VAR 0 7
59225: ARRAY
59226: PUSH
59227: LD_INT 2
59229: ARRAY
59230: PPUSH
59231: CALL_OW 351
59235: OR
59236: IFFALSE 59242
// exit ;
59238: POP
59239: POP
59240: GO 59549
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59242: LD_ADDR_VAR 0 8
59246: PUSH
59247: LD_VAR 0 12
59251: PUSH
59252: LD_VAR 0 7
59256: ARRAY
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: PPUSH
59262: LD_VAR 0 12
59266: PUSH
59267: LD_VAR 0 7
59271: ARRAY
59272: PUSH
59273: LD_INT 2
59275: ARRAY
59276: PPUSH
59277: CALL_OW 546
59281: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59282: LD_VAR 0 8
59286: PUSH
59287: LD_INT 1
59289: ARRAY
59290: PUSH
59291: LD_VAR 0 8
59295: PUSH
59296: LD_INT 2
59298: ARRAY
59299: PUSH
59300: LD_VAR 0 13
59304: PUSH
59305: LD_INT 2
59307: PLUS
59308: GREATER
59309: OR
59310: PUSH
59311: LD_VAR 0 8
59315: PUSH
59316: LD_INT 2
59318: ARRAY
59319: PUSH
59320: LD_VAR 0 13
59324: PUSH
59325: LD_INT 2
59327: MINUS
59328: LESS
59329: OR
59330: PUSH
59331: LD_VAR 0 8
59335: PUSH
59336: LD_INT 3
59338: ARRAY
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 8
59345: PUSH
59346: LD_INT 9
59348: PUSH
59349: LD_INT 10
59351: PUSH
59352: LD_INT 11
59354: PUSH
59355: LD_INT 12
59357: PUSH
59358: LD_INT 13
59360: PUSH
59361: LD_INT 16
59363: PUSH
59364: LD_INT 17
59366: PUSH
59367: LD_INT 18
59369: PUSH
59370: LD_INT 19
59372: PUSH
59373: LD_INT 20
59375: PUSH
59376: LD_INT 21
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: IN
59394: NOT
59395: OR
59396: PUSH
59397: LD_VAR 0 8
59401: PUSH
59402: LD_INT 5
59404: ARRAY
59405: NOT
59406: OR
59407: PUSH
59408: LD_VAR 0 8
59412: PUSH
59413: LD_INT 6
59415: ARRAY
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 7
59425: PUSH
59426: LD_INT 9
59428: PUSH
59429: LD_INT 10
59431: PUSH
59432: LD_INT 11
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: IN
59443: NOT
59444: OR
59445: IFFALSE 59451
// exit ;
59447: POP
59448: POP
59449: GO 59549
// end ;
59451: GO 59122
59453: POP
59454: POP
// side := GetSide ( bdepot ) ;
59455: LD_ADDR_VAR 0 9
59459: PUSH
59460: LD_VAR 0 1
59464: PPUSH
59465: CALL_OW 255
59469: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59470: LD_VAR 0 9
59474: PPUSH
59475: LD_VAR 0 3
59479: PPUSH
59480: LD_VAR 0 4
59484: PPUSH
59485: LD_INT 20
59487: PPUSH
59488: CALL 52221 0 4
59492: PUSH
59493: LD_INT 4
59495: ARRAY
59496: IFFALSE 59500
// exit ;
59498: GO 59549
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59500: LD_VAR 0 2
59504: PUSH
59505: LD_INT 29
59507: PUSH
59508: LD_INT 30
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: IN
59515: PUSH
59516: LD_VAR 0 3
59520: PPUSH
59521: LD_VAR 0 4
59525: PPUSH
59526: LD_VAR 0 9
59530: PPUSH
59531: CALL_OW 440
59535: NOT
59536: AND
59537: IFFALSE 59541
// exit ;
59539: GO 59549
// result := true ;
59541: LD_ADDR_VAR 0 6
59545: PUSH
59546: LD_INT 1
59548: ST_TO_ADDR
// end ;
59549: LD_VAR 0 6
59553: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
59554: LD_INT 0
59556: PPUSH
59557: PPUSH
59558: PPUSH
59559: PPUSH
59560: PPUSH
59561: PPUSH
59562: PPUSH
59563: PPUSH
59564: PPUSH
59565: PPUSH
59566: PPUSH
59567: PPUSH
59568: PPUSH
59569: PPUSH
59570: PPUSH
59571: PPUSH
59572: PPUSH
59573: PPUSH
59574: PPUSH
59575: PPUSH
59576: PPUSH
59577: PPUSH
59578: PPUSH
59579: PPUSH
59580: PPUSH
59581: PPUSH
59582: PPUSH
59583: PPUSH
59584: PPUSH
59585: PPUSH
59586: PPUSH
59587: PPUSH
59588: PPUSH
59589: PPUSH
59590: PPUSH
59591: PPUSH
59592: PPUSH
59593: PPUSH
59594: PPUSH
59595: PPUSH
59596: PPUSH
59597: PPUSH
59598: PPUSH
59599: PPUSH
59600: PPUSH
59601: PPUSH
59602: PPUSH
59603: PPUSH
59604: PPUSH
59605: PPUSH
59606: PPUSH
59607: PPUSH
59608: PPUSH
59609: PPUSH
59610: PPUSH
59611: PPUSH
59612: PPUSH
59613: PPUSH
// result = [ ] ;
59614: LD_ADDR_VAR 0 7
59618: PUSH
59619: EMPTY
59620: ST_TO_ADDR
// temp_list = [ ] ;
59621: LD_ADDR_VAR 0 9
59625: PUSH
59626: EMPTY
59627: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59628: LD_VAR 0 4
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 4
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: IN
59659: NOT
59660: PUSH
59661: LD_VAR 0 1
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: IN
59676: PUSH
59677: LD_VAR 0 5
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: IN
59696: NOT
59697: AND
59698: OR
59699: IFFALSE 59703
// exit ;
59701: GO 78088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59703: LD_VAR 0 1
59707: PUSH
59708: LD_INT 6
59710: PUSH
59711: LD_INT 7
59713: PUSH
59714: LD_INT 8
59716: PUSH
59717: LD_INT 13
59719: PUSH
59720: LD_INT 12
59722: PUSH
59723: LD_INT 15
59725: PUSH
59726: LD_INT 11
59728: PUSH
59729: LD_INT 14
59731: PUSH
59732: LD_INT 10
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: IN
59746: IFFALSE 59756
// btype = b_lab ;
59748: LD_ADDR_VAR 0 1
59752: PUSH
59753: LD_INT 6
59755: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59756: LD_VAR 0 6
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: IN
59775: NOT
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 6
59796: PUSH
59797: LD_INT 36
59799: PUSH
59800: LD_INT 4
59802: PUSH
59803: LD_INT 5
59805: PUSH
59806: LD_INT 31
59808: PUSH
59809: LD_INT 32
59811: PUSH
59812: LD_INT 33
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: IN
59828: NOT
59829: PUSH
59830: LD_VAR 0 6
59834: PUSH
59835: LD_INT 1
59837: EQUAL
59838: AND
59839: OR
59840: PUSH
59841: LD_VAR 0 1
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: IN
59856: NOT
59857: PUSH
59858: LD_VAR 0 6
59862: PUSH
59863: LD_INT 2
59865: EQUAL
59866: AND
59867: OR
59868: IFFALSE 59878
// mode = 0 ;
59870: LD_ADDR_VAR 0 6
59874: PUSH
59875: LD_INT 0
59877: ST_TO_ADDR
// case mode of 0 :
59878: LD_VAR 0 6
59882: PUSH
59883: LD_INT 0
59885: DOUBLE
59886: EQUAL
59887: IFTRUE 59891
59889: GO 71344
59891: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59892: LD_ADDR_VAR 0 11
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60085: LD_ADDR_VAR 0 12
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60281: LD_ADDR_VAR 0 13
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60480: LD_ADDR_VAR 0 14
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60676: LD_ADDR_VAR 0 15
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60869: LD_ADDR_VAR 0 16
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61062: LD_ADDR_VAR 0 17
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61292: LD_ADDR_VAR 0 18
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61522: LD_ADDR_VAR 0 19
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61752: LD_ADDR_VAR 0 20
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61982: LD_ADDR_VAR 0 21
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62212: LD_ADDR_VAR 0 22
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62442: LD_ADDR_VAR 0 23
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62722: LD_ADDR_VAR 0 24
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62998: LD_ADDR_VAR 0 25
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: LD_INT 3
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63272: LD_ADDR_VAR 0 26
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 3
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 2
63514: NEG
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63548: LD_ADDR_VAR 0 27
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 2
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63828: LD_ADDR_VAR 0 28
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64110: LD_ADDR_VAR 0 29
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: NEG
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64389: LD_ADDR_VAR 0 30
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: LD_INT 3
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 2
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64667: LD_ADDR_VAR 0 31
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 2
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: NEG
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: NEG
64911: PUSH
64912: LD_INT 2
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64945: LD_ADDR_VAR 0 32
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: LD_INT 2
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65223: LD_ADDR_VAR 0 33
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 1
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: NEG
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65502: LD_ADDR_VAR 0 34
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65782: LD_ADDR_VAR 0 35
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 2
65873: NEG
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65894: LD_ADDR_VAR 0 36
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66006: LD_ADDR_VAR 0 37
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66118: LD_ADDR_VAR 0 38
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66230: LD_ADDR_VAR 0 39
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66342: LD_ADDR_VAR 0 40
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66454: LD_ADDR_VAR 0 41
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: NEG
66524: PUSH
66525: LD_INT 1
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: LD_INT 2
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: LD_INT 2
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: NEG
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 3
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 3
66728: NEG
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: NEG
66752: PUSH
66753: LD_INT 2
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: LD_INT 3
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66804: LD_ADDR_VAR 0 42
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 2
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 3
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 2
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67154: LD_ADDR_VAR 0 43
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: LD_INT 2
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 2
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 2
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 3
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 3
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 3
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: LD_INT 3
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: LD_INT 2
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 2
67439: NEG
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67502: LD_ADDR_VAR 0 44
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: LD_INT 2
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 1
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 2
67657: NEG
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 2
67668: NEG
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 2
67680: NEG
67681: PUSH
67682: LD_INT 2
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: NEG
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 1
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: LD_INT 3
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: LD_INT 3
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: NEG
67788: PUSH
67789: LD_INT 1
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 3
67799: NEG
67800: PUSH
67801: LD_INT 2
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67852: LD_ADDR_VAR 0 45
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: LD_INT 0
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: LD_INT 1
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: LD_INT 2
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: LD_INT 1
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: LD_INT 2
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: LD_INT 1
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: LD_INT 2
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 2
68042: NEG
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: NEG
68055: PUSH
68056: LD_INT 3
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: LD_INT 2
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 3
68149: NEG
68150: PUSH
68151: LD_INT 2
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: LD_INT 3
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68202: LD_ADDR_VAR 0 46
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: PUSH
68328: LD_INT 1
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 2
68368: NEG
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 2
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: LD_INT 3
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 3
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: NEG
68477: PUSH
68478: LD_INT 2
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 3
68498: NEG
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 3
68509: NEG
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68550: LD_ADDR_VAR 0 47
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68701: LD_ADDR_VAR 0 48
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: NEG
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: LD_INT 1
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 2
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 2
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68848: LD_ADDR_VAR 0 49
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 1
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 1
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68992: LD_ADDR_VAR 0 50
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 1
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 1
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 2
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: LD_INT 1
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69136: LD_ADDR_VAR 0 51
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: LD_INT 1
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 1
69194: NEG
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: LD_INT 1
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69283: LD_ADDR_VAR 0 52
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: NEG
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 2
69398: NEG
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 2
69410: NEG
69411: PUSH
69412: LD_INT 2
69414: NEG
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69434: LD_ADDR_VAR 0 53
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 1
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: LD_INT 1
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 1
69515: NEG
69516: PUSH
69517: LD_INT 2
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 1
69538: PUSH
69539: LD_INT 1
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 2
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: LD_INT 2
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 1
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 2
69633: NEG
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69664: LD_ADDR_VAR 0 54
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: NEG
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: LD_INT 2
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 2
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 2
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: PUSH
69810: LD_INT 2
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: LD_INT 2
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: NEG
69830: PUSH
69831: LD_INT 1
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 2
69840: NEG
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: LD_INT 1
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: NEG
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69894: LD_ADDR_VAR 0 55
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: LD_INT 2
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: LD_INT 1
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: NEG
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 2
70093: NEG
70094: PUSH
70095: LD_INT 2
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70124: LD_ADDR_VAR 0 56
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 1
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 1
70182: NEG
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: LD_INT 2
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: LD_INT 1
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 2
70249: PUSH
70250: LD_INT 1
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: LD_INT 2
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: LD_INT 1
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 2
70323: NEG
70324: PUSH
70325: LD_INT 2
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70354: LD_ADDR_VAR 0 57
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: NEG
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 2
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 1
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 1
70519: NEG
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 2
70530: NEG
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 2
70541: NEG
70542: PUSH
70543: LD_INT 1
70545: NEG
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: NEG
70554: PUSH
70555: LD_INT 2
70557: NEG
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70584: LD_ADDR_VAR 0 58
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 1
70642: NEG
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 2
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: LD_INT 2
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 2
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 2
70719: PUSH
70720: LD_INT 2
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 1
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: LD_INT 2
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 1
70749: NEG
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 2
70760: NEG
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: NEG
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 2
70783: NEG
70784: PUSH
70785: LD_INT 2
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70814: LD_ADDR_VAR 0 59
70818: PUSH
70819: LD_INT 0
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 1
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 1
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: NEG
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70902: LD_ADDR_VAR 0 60
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: LD_INT 1
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 1
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 1
70940: PUSH
70941: LD_INT 1
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 1
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: LD_INT 0
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: NEG
70972: PUSH
70973: LD_INT 1
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70990: LD_ADDR_VAR 0 61
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: LD_INT 0
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: LD_INT 1
71010: NEG
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 1
71018: PUSH
71019: LD_INT 0
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 1
71028: PUSH
71029: LD_INT 1
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: NEG
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71078: LD_ADDR_VAR 0 62
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 0
71095: PUSH
71096: LD_INT 1
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: LD_INT 1
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: LD_INT 1
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 1
71136: NEG
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 1
71147: NEG
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71166: LD_ADDR_VAR 0 63
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: LD_INT 1
71186: NEG
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 1
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: LD_INT 1
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 1
71224: NEG
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 1
71235: NEG
71236: PUSH
71237: LD_INT 1
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71254: LD_ADDR_VAR 0 64
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: LD_INT 1
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 1
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 1
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: LD_INT 0
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: ST_TO_ADDR
// end ; 1 :
71342: GO 77239
71344: LD_INT 1
71346: DOUBLE
71347: EQUAL
71348: IFTRUE 71352
71350: GO 73975
71352: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71353: LD_ADDR_VAR 0 11
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: LD_INT 3
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_INT 3
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: LD_INT 2
71386: NEG
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71397: LD_ADDR_VAR 0 12
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: LD_INT 1
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 3
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71438: LD_ADDR_VAR 0 13
71442: PUSH
71443: LD_INT 3
71445: PUSH
71446: LD_INT 2
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 3
71455: PUSH
71456: LD_INT 3
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 2
71465: PUSH
71466: LD_INT 3
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71478: LD_ADDR_VAR 0 14
71482: PUSH
71483: LD_INT 1
71485: PUSH
71486: LD_INT 3
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 3
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 1
71505: NEG
71506: PUSH
71507: LD_INT 2
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: LIST
71518: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71519: LD_ADDR_VAR 0 15
71523: PUSH
71524: LD_INT 2
71526: NEG
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 3
71537: NEG
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 3
71548: NEG
71549: PUSH
71550: LD_INT 1
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: LIST
71562: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71563: LD_ADDR_VAR 0 16
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: LD_INT 3
71574: NEG
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: LD_INT 2
71586: NEG
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: LD_INT 3
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71609: LD_ADDR_VAR 0 17
71613: PUSH
71614: LD_INT 1
71616: NEG
71617: PUSH
71618: LD_INT 3
71620: NEG
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: LD_INT 3
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: LD_INT 2
71642: NEG
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71653: LD_ADDR_VAR 0 18
71657: PUSH
71658: LD_INT 2
71660: PUSH
71661: LD_INT 1
71663: NEG
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 3
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 3
71681: PUSH
71682: LD_INT 1
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71694: LD_ADDR_VAR 0 19
71698: PUSH
71699: LD_INT 3
71701: PUSH
71702: LD_INT 2
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 3
71711: PUSH
71712: LD_INT 3
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: LD_INT 3
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71734: LD_ADDR_VAR 0 20
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: LD_INT 3
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: NEG
71762: PUSH
71763: LD_INT 2
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: LIST
71774: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71775: LD_ADDR_VAR 0 21
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 3
71793: NEG
71794: PUSH
71795: LD_INT 0
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 3
71804: NEG
71805: PUSH
71806: LD_INT 1
71808: NEG
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: LIST
71818: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71819: LD_ADDR_VAR 0 22
71823: PUSH
71824: LD_INT 2
71826: NEG
71827: PUSH
71828: LD_INT 3
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 3
71838: NEG
71839: PUSH
71840: LD_INT 2
71842: NEG
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 3
71850: NEG
71851: PUSH
71852: LD_INT 3
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71865: LD_ADDR_VAR 0 23
71869: PUSH
71870: LD_INT 0
71872: PUSH
71873: LD_INT 3
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 1
71883: NEG
71884: PUSH
71885: LD_INT 4
71887: NEG
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 1
71895: PUSH
71896: LD_INT 3
71898: NEG
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71909: LD_ADDR_VAR 0 24
71913: PUSH
71914: LD_INT 3
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 3
71926: PUSH
71927: LD_INT 1
71929: NEG
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 4
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71950: LD_ADDR_VAR 0 25
71954: PUSH
71955: LD_INT 3
71957: PUSH
71958: LD_INT 3
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 3
71977: PUSH
71978: LD_INT 4
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71990: LD_ADDR_VAR 0 26
71994: PUSH
71995: LD_INT 0
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 1
72007: PUSH
72008: LD_INT 4
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: NEG
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: LIST
72030: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72031: LD_ADDR_VAR 0 27
72035: PUSH
72036: LD_INT 3
72038: NEG
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 3
72049: NEG
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 4
72060: NEG
72061: PUSH
72062: LD_INT 1
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: LIST
72074: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72075: LD_ADDR_VAR 0 28
72079: PUSH
72080: LD_INT 3
72082: NEG
72083: PUSH
72084: LD_INT 3
72086: NEG
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 3
72094: NEG
72095: PUSH
72096: LD_INT 4
72098: NEG
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 4
72106: NEG
72107: PUSH
72108: LD_INT 3
72110: NEG
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72121: LD_ADDR_VAR 0 29
72125: PUSH
72126: LD_INT 1
72128: NEG
72129: PUSH
72130: LD_INT 3
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 0
72140: PUSH
72141: LD_INT 3
72143: NEG
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 1
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: LD_INT 4
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 0
72174: PUSH
72175: LD_INT 4
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: LD_INT 3
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 1
72196: NEG
72197: PUSH
72198: LD_INT 5
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: LD_INT 5
72211: NEG
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: LD_INT 4
72222: NEG
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 1
72230: NEG
72231: PUSH
72232: LD_INT 6
72234: NEG
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 6
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: PUSH
72254: LD_INT 5
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72276: LD_ADDR_VAR 0 30
72280: PUSH
72281: LD_INT 2
72283: PUSH
72284: LD_INT 1
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 3
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: LD_INT 1
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 3
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 4
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 4
72335: PUSH
72336: LD_INT 1
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 5
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 5
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 5
72376: PUSH
72377: LD_INT 1
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 6
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 6
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72419: LD_ADDR_VAR 0 31
72423: PUSH
72424: LD_INT 3
72426: PUSH
72427: LD_INT 2
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: LD_INT 3
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 3
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 4
72456: PUSH
72457: LD_INT 3
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 4
72466: PUSH
72467: LD_INT 4
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: LD_INT 4
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 5
72486: PUSH
72487: LD_INT 4
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 5
72496: PUSH
72497: LD_INT 5
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 4
72506: PUSH
72507: LD_INT 5
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 6
72516: PUSH
72517: LD_INT 5
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 6
72526: PUSH
72527: LD_INT 6
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 5
72536: PUSH
72537: LD_INT 6
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72558: LD_ADDR_VAR 0 32
72562: PUSH
72563: LD_INT 1
72565: PUSH
72566: LD_INT 3
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 0
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 1
72585: NEG
72586: PUSH
72587: LD_INT 2
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 1
72596: PUSH
72597: LD_INT 4
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 0
72606: PUSH
72607: LD_INT 4
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 1
72616: NEG
72617: PUSH
72618: LD_INT 3
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 1
72627: PUSH
72628: LD_INT 5
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 0
72637: PUSH
72638: LD_INT 5
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 1
72647: NEG
72648: PUSH
72649: LD_INT 4
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 1
72658: PUSH
72659: LD_INT 6
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 0
72668: PUSH
72669: LD_INT 6
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: LD_INT 5
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72701: LD_ADDR_VAR 0 33
72705: PUSH
72706: LD_INT 2
72708: NEG
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 3
72742: NEG
72743: PUSH
72744: LD_INT 1
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 4
72753: NEG
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: NEG
72765: PUSH
72766: LD_INT 1
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 4
72776: NEG
72777: PUSH
72778: LD_INT 1
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 5
72787: NEG
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 5
72798: NEG
72799: PUSH
72800: LD_INT 1
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 5
72810: NEG
72811: PUSH
72812: LD_INT 1
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 6
72821: NEG
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 6
72832: NEG
72833: PUSH
72834: LD_INT 1
72836: NEG
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72856: LD_ADDR_VAR 0 34
72860: PUSH
72861: LD_INT 2
72863: NEG
72864: PUSH
72865: LD_INT 3
72867: NEG
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 3
72875: NEG
72876: PUSH
72877: LD_INT 2
72879: NEG
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 3
72887: NEG
72888: PUSH
72889: LD_INT 3
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: NEG
72900: PUSH
72901: LD_INT 4
72903: NEG
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 4
72911: NEG
72912: PUSH
72913: LD_INT 3
72915: NEG
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 4
72923: NEG
72924: PUSH
72925: LD_INT 4
72927: NEG
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 4
72935: NEG
72936: PUSH
72937: LD_INT 5
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 5
72947: NEG
72948: PUSH
72949: LD_INT 4
72951: NEG
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 5
72959: NEG
72960: PUSH
72961: LD_INT 5
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 5
72971: NEG
72972: PUSH
72973: LD_INT 6
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 6
72983: NEG
72984: PUSH
72985: LD_INT 5
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 6
72995: NEG
72996: PUSH
72997: LD_INT 6
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73019: LD_ADDR_VAR 0 41
73023: PUSH
73024: LD_INT 0
73026: PUSH
73027: LD_INT 2
73029: NEG
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 1
73037: NEG
73038: PUSH
73039: LD_INT 3
73041: NEG
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 1
73049: PUSH
73050: LD_INT 2
73052: NEG
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: LIST
73062: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73063: LD_ADDR_VAR 0 42
73067: PUSH
73068: LD_INT 2
73070: PUSH
73071: LD_INT 0
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 2
73080: PUSH
73081: LD_INT 1
73083: NEG
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 3
73091: PUSH
73092: LD_INT 1
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: LIST
73103: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73104: LD_ADDR_VAR 0 43
73108: PUSH
73109: LD_INT 2
73111: PUSH
73112: LD_INT 2
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 3
73121: PUSH
73122: LD_INT 2
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 2
73131: PUSH
73132: LD_INT 3
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: LIST
73143: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73144: LD_ADDR_VAR 0 44
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: LD_INT 2
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: PUSH
73162: LD_INT 3
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 1
73171: NEG
73172: PUSH
73173: LD_INT 2
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73185: LD_ADDR_VAR 0 45
73189: PUSH
73190: LD_INT 2
73192: NEG
73193: PUSH
73194: LD_INT 0
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 2
73203: NEG
73204: PUSH
73205: LD_INT 1
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 3
73214: NEG
73215: PUSH
73216: LD_INT 1
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: LIST
73228: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73229: LD_ADDR_VAR 0 46
73233: PUSH
73234: LD_INT 2
73236: NEG
73237: PUSH
73238: LD_INT 2
73240: NEG
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 2
73248: NEG
73249: PUSH
73250: LD_INT 3
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 3
73260: NEG
73261: PUSH
73262: LD_INT 2
73264: NEG
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: LIST
73274: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73275: LD_ADDR_VAR 0 47
73279: PUSH
73280: LD_INT 2
73282: NEG
73283: PUSH
73284: LD_INT 3
73286: NEG
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 1
73294: NEG
73295: PUSH
73296: LD_INT 3
73298: NEG
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73308: LD_ADDR_VAR 0 48
73312: PUSH
73313: LD_INT 1
73315: PUSH
73316: LD_INT 2
73318: NEG
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 2
73326: PUSH
73327: LD_INT 1
73329: NEG
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73339: LD_ADDR_VAR 0 49
73343: PUSH
73344: LD_INT 3
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: LD_INT 2
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73368: LD_ADDR_VAR 0 50
73372: PUSH
73373: LD_INT 2
73375: PUSH
73376: LD_INT 3
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 1
73385: PUSH
73386: LD_INT 3
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73397: LD_ADDR_VAR 0 51
73401: PUSH
73402: LD_INT 1
73404: NEG
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 2
73415: NEG
73416: PUSH
73417: LD_INT 1
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73428: LD_ADDR_VAR 0 52
73432: PUSH
73433: LD_INT 3
73435: NEG
73436: PUSH
73437: LD_INT 1
73439: NEG
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 3
73447: NEG
73448: PUSH
73449: LD_INT 2
73451: NEG
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73461: LD_ADDR_VAR 0 53
73465: PUSH
73466: LD_INT 1
73468: NEG
73469: PUSH
73470: LD_INT 3
73472: NEG
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 0
73480: PUSH
73481: LD_INT 3
73483: NEG
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 1
73491: PUSH
73492: LD_INT 2
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73505: LD_ADDR_VAR 0 54
73509: PUSH
73510: LD_INT 2
73512: PUSH
73513: LD_INT 1
73515: NEG
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 3
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 3
73533: PUSH
73534: LD_INT 1
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: LIST
73545: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73546: LD_ADDR_VAR 0 55
73550: PUSH
73551: LD_INT 3
73553: PUSH
73554: LD_INT 2
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 3
73563: PUSH
73564: LD_INT 3
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: LD_INT 3
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73586: LD_ADDR_VAR 0 56
73590: PUSH
73591: LD_INT 1
73593: PUSH
73594: LD_INT 3
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 0
73603: PUSH
73604: LD_INT 3
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 1
73613: NEG
73614: PUSH
73615: LD_INT 2
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: LIST
73626: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73627: LD_ADDR_VAR 0 57
73631: PUSH
73632: LD_INT 2
73634: NEG
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 3
73645: NEG
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 3
73656: NEG
73657: PUSH
73658: LD_INT 1
73660: NEG
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73671: LD_ADDR_VAR 0 58
73675: PUSH
73676: LD_INT 2
73678: NEG
73679: PUSH
73680: LD_INT 3
73682: NEG
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 3
73690: NEG
73691: PUSH
73692: LD_INT 2
73694: NEG
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 3
73702: NEG
73703: PUSH
73704: LD_INT 3
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: LIST
73716: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73717: LD_ADDR_VAR 0 59
73721: PUSH
73722: LD_INT 1
73724: NEG
73725: PUSH
73726: LD_INT 2
73728: NEG
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: LD_INT 2
73739: NEG
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 1
73747: PUSH
73748: LD_INT 1
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: LIST
73760: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73761: LD_ADDR_VAR 0 60
73765: PUSH
73766: LD_INT 1
73768: PUSH
73769: LD_INT 1
73771: NEG
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: LD_INT 2
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 2
73789: PUSH
73790: LD_INT 1
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: LIST
73801: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73802: LD_ADDR_VAR 0 61
73806: PUSH
73807: LD_INT 2
73809: PUSH
73810: LD_INT 1
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 2
73819: PUSH
73820: LD_INT 2
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 1
73829: PUSH
73830: LD_INT 2
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: LIST
73841: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73842: LD_ADDR_VAR 0 62
73846: PUSH
73847: LD_INT 1
73849: PUSH
73850: LD_INT 2
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 0
73859: PUSH
73860: LD_INT 2
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 1
73869: NEG
73870: PUSH
73871: LD_INT 1
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: LIST
73882: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73883: LD_ADDR_VAR 0 63
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: LD_INT 1
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 2
73901: NEG
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 2
73912: NEG
73913: PUSH
73914: LD_INT 1
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73927: LD_ADDR_VAR 0 64
73931: PUSH
73932: LD_INT 1
73934: NEG
73935: PUSH
73936: LD_INT 2
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 2
73946: NEG
73947: PUSH
73948: LD_INT 1
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 2
73958: NEG
73959: PUSH
73960: LD_INT 2
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: LIST
73972: ST_TO_ADDR
// end ; 2 :
73973: GO 77239
73975: LD_INT 2
73977: DOUBLE
73978: EQUAL
73979: IFTRUE 73983
73981: GO 77238
73983: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73984: LD_ADDR_VAR 0 29
73988: PUSH
73989: LD_INT 4
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 4
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 5
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 5
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 4
74032: PUSH
74033: LD_INT 1
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 3
74042: PUSH
74043: LD_INT 0
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 3
74052: PUSH
74053: LD_INT 1
74055: NEG
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 3
74063: PUSH
74064: LD_INT 2
74066: NEG
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 5
74074: PUSH
74075: LD_INT 2
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 3
74084: PUSH
74085: LD_INT 3
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 3
74094: PUSH
74095: LD_INT 2
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: PUSH
74102: LD_INT 4
74104: PUSH
74105: LD_INT 3
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 4
74114: PUSH
74115: LD_INT 4
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 3
74124: PUSH
74125: LD_INT 4
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PUSH
74132: LD_INT 2
74134: PUSH
74135: LD_INT 3
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: LD_INT 2
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: LD_INT 2
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: LD_INT 4
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 0
74174: PUSH
74175: LD_INT 4
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 0
74184: PUSH
74185: LD_INT 3
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 1
74194: PUSH
74195: LD_INT 4
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: PUSH
74205: LD_INT 5
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 0
74214: PUSH
74215: LD_INT 5
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 1
74224: NEG
74225: PUSH
74226: LD_INT 4
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 1
74235: NEG
74236: PUSH
74237: LD_INT 3
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 2
74246: PUSH
74247: LD_INT 5
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 2
74256: NEG
74257: PUSH
74258: LD_INT 3
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 3
74267: NEG
74268: PUSH
74269: LD_INT 0
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 3
74278: NEG
74279: PUSH
74280: LD_INT 1
74282: NEG
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 2
74290: NEG
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 2
74301: NEG
74302: PUSH
74303: LD_INT 1
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 3
74312: NEG
74313: PUSH
74314: LD_INT 1
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 4
74323: NEG
74324: PUSH
74325: LD_INT 0
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 4
74334: NEG
74335: PUSH
74336: LD_INT 1
74338: NEG
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 4
74346: NEG
74347: PUSH
74348: LD_INT 2
74350: NEG
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 2
74358: NEG
74359: PUSH
74360: LD_INT 2
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 4
74369: NEG
74370: PUSH
74371: LD_INT 4
74373: NEG
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 4
74381: NEG
74382: PUSH
74383: LD_INT 5
74385: NEG
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 3
74393: NEG
74394: PUSH
74395: LD_INT 4
74397: NEG
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 3
74405: NEG
74406: PUSH
74407: LD_INT 3
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 4
74417: NEG
74418: PUSH
74419: LD_INT 3
74421: NEG
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 5
74429: NEG
74430: PUSH
74431: LD_INT 4
74433: NEG
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 5
74441: NEG
74442: PUSH
74443: LD_INT 5
74445: NEG
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 3
74453: NEG
74454: PUSH
74455: LD_INT 5
74457: NEG
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: LD_INT 5
74465: NEG
74466: PUSH
74467: LD_INT 3
74469: NEG
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74522: LD_ADDR_VAR 0 30
74526: PUSH
74527: LD_INT 4
74529: PUSH
74530: LD_INT 4
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 4
74539: PUSH
74540: LD_INT 3
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 5
74549: PUSH
74550: LD_INT 4
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 5
74559: PUSH
74560: LD_INT 5
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 4
74569: PUSH
74570: LD_INT 5
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 3
74579: PUSH
74580: LD_INT 4
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 3
74589: PUSH
74590: LD_INT 3
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 5
74599: PUSH
74600: LD_INT 3
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 3
74609: PUSH
74610: LD_INT 5
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 0
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 0
74629: PUSH
74630: LD_INT 2
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 1
74639: PUSH
74640: LD_INT 3
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 1
74649: PUSH
74650: LD_INT 4
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 0
74659: PUSH
74660: LD_INT 4
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 1
74669: NEG
74670: PUSH
74671: LD_INT 3
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 1
74680: NEG
74681: PUSH
74682: LD_INT 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 2
74691: PUSH
74692: LD_INT 4
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 2
74701: NEG
74702: PUSH
74703: LD_INT 2
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 4
74712: NEG
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 4
74723: NEG
74724: PUSH
74725: LD_INT 1
74727: NEG
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: LD_INT 3
74735: NEG
74736: PUSH
74737: LD_INT 0
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 3
74746: NEG
74747: PUSH
74748: LD_INT 1
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 4
74757: NEG
74758: PUSH
74759: LD_INT 1
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 5
74768: NEG
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 5
74779: NEG
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 5
74791: NEG
74792: PUSH
74793: LD_INT 2
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 3
74803: NEG
74804: PUSH
74805: LD_INT 2
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 3
74814: NEG
74815: PUSH
74816: LD_INT 3
74818: NEG
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 3
74826: NEG
74827: PUSH
74828: LD_INT 4
74830: NEG
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 2
74838: NEG
74839: PUSH
74840: LD_INT 3
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 2
74850: NEG
74851: PUSH
74852: LD_INT 2
74854: NEG
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 3
74862: NEG
74863: PUSH
74864: LD_INT 2
74866: NEG
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 4
74874: NEG
74875: PUSH
74876: LD_INT 3
74878: NEG
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 4
74886: NEG
74887: PUSH
74888: LD_INT 4
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 2
74898: NEG
74899: PUSH
74900: LD_INT 4
74902: NEG
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: LD_INT 4
74910: NEG
74911: PUSH
74912: LD_INT 2
74914: NEG
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 0
74922: PUSH
74923: LD_INT 4
74925: NEG
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 0
74933: PUSH
74934: LD_INT 5
74936: NEG
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 1
74944: PUSH
74945: LD_INT 4
74947: NEG
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 1
74955: PUSH
74956: LD_INT 3
74958: NEG
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 0
74966: PUSH
74967: LD_INT 3
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 1
74977: NEG
74978: PUSH
74979: LD_INT 4
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 1
74989: NEG
74990: PUSH
74991: LD_INT 5
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 2
75001: PUSH
75002: LD_INT 3
75004: NEG
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: LD_INT 2
75012: NEG
75013: PUSH
75014: LD_INT 5
75016: NEG
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75069: LD_ADDR_VAR 0 31
75073: PUSH
75074: LD_INT 0
75076: PUSH
75077: LD_INT 4
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: LD_INT 3
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 1
75096: PUSH
75097: LD_INT 4
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 1
75106: PUSH
75107: LD_INT 5
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 0
75116: PUSH
75117: LD_INT 5
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 1
75126: NEG
75127: PUSH
75128: LD_INT 4
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 1
75137: NEG
75138: PUSH
75139: LD_INT 3
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 2
75148: PUSH
75149: LD_INT 5
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 2
75158: NEG
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 3
75169: NEG
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 3
75180: NEG
75181: PUSH
75182: LD_INT 1
75184: NEG
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 2
75192: NEG
75193: PUSH
75194: LD_INT 0
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 2
75203: NEG
75204: PUSH
75205: LD_INT 1
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 3
75214: NEG
75215: PUSH
75216: LD_INT 1
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 4
75225: NEG
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 4
75236: NEG
75237: PUSH
75238: LD_INT 1
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 4
75248: NEG
75249: PUSH
75250: LD_INT 2
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 2
75260: NEG
75261: PUSH
75262: LD_INT 2
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: LD_INT 4
75271: NEG
75272: PUSH
75273: LD_INT 4
75275: NEG
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 4
75283: NEG
75284: PUSH
75285: LD_INT 5
75287: NEG
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 3
75295: NEG
75296: PUSH
75297: LD_INT 4
75299: NEG
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 3
75307: NEG
75308: PUSH
75309: LD_INT 3
75311: NEG
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 4
75319: NEG
75320: PUSH
75321: LD_INT 3
75323: NEG
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 5
75331: NEG
75332: PUSH
75333: LD_INT 4
75335: NEG
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 5
75343: NEG
75344: PUSH
75345: LD_INT 5
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 3
75355: NEG
75356: PUSH
75357: LD_INT 5
75359: NEG
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: PUSH
75365: LD_INT 5
75367: NEG
75368: PUSH
75369: LD_INT 3
75371: NEG
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: LD_INT 0
75379: PUSH
75380: LD_INT 3
75382: NEG
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: LD_INT 4
75393: NEG
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 1
75401: PUSH
75402: LD_INT 3
75404: NEG
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 1
75412: PUSH
75413: LD_INT 2
75415: NEG
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 0
75423: PUSH
75424: LD_INT 2
75426: NEG
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 1
75434: NEG
75435: PUSH
75436: LD_INT 3
75438: NEG
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 1
75446: NEG
75447: PUSH
75448: LD_INT 4
75450: NEG
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 2
75458: PUSH
75459: LD_INT 2
75461: NEG
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 2
75469: NEG
75470: PUSH
75471: LD_INT 4
75473: NEG
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PUSH
75479: LD_INT 4
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 4
75491: PUSH
75492: LD_INT 1
75494: NEG
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: PUSH
75500: LD_INT 5
75502: PUSH
75503: LD_INT 0
75505: PUSH
75506: EMPTY
75507: LIST
75508: LIST
75509: PUSH
75510: LD_INT 5
75512: PUSH
75513: LD_INT 1
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PUSH
75520: LD_INT 4
75522: PUSH
75523: LD_INT 1
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 3
75532: PUSH
75533: LD_INT 0
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 3
75542: PUSH
75543: LD_INT 1
75545: NEG
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 3
75553: PUSH
75554: LD_INT 2
75556: NEG
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 5
75564: PUSH
75565: LD_INT 2
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75619: LD_ADDR_VAR 0 32
75623: PUSH
75624: LD_INT 4
75626: NEG
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 4
75637: NEG
75638: PUSH
75639: LD_INT 1
75641: NEG
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 3
75649: NEG
75650: PUSH
75651: LD_INT 0
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 3
75660: NEG
75661: PUSH
75662: LD_INT 1
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 4
75671: NEG
75672: PUSH
75673: LD_INT 1
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 5
75682: NEG
75683: PUSH
75684: LD_INT 0
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: LD_INT 5
75693: NEG
75694: PUSH
75695: LD_INT 1
75697: NEG
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 5
75705: NEG
75706: PUSH
75707: LD_INT 2
75709: NEG
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: LD_INT 3
75717: NEG
75718: PUSH
75719: LD_INT 2
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 3
75728: NEG
75729: PUSH
75730: LD_INT 3
75732: NEG
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 3
75740: NEG
75741: PUSH
75742: LD_INT 4
75744: NEG
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 2
75752: NEG
75753: PUSH
75754: LD_INT 3
75756: NEG
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 2
75764: NEG
75765: PUSH
75766: LD_INT 2
75768: NEG
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 3
75776: NEG
75777: PUSH
75778: LD_INT 2
75780: NEG
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 4
75788: NEG
75789: PUSH
75790: LD_INT 3
75792: NEG
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 4
75800: NEG
75801: PUSH
75802: LD_INT 4
75804: NEG
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 2
75812: NEG
75813: PUSH
75814: LD_INT 4
75816: NEG
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: PUSH
75822: LD_INT 4
75824: NEG
75825: PUSH
75826: LD_INT 2
75828: NEG
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: LD_INT 4
75839: NEG
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 0
75847: PUSH
75848: LD_INT 5
75850: NEG
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 1
75858: PUSH
75859: LD_INT 4
75861: NEG
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 1
75869: PUSH
75870: LD_INT 3
75872: NEG
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 0
75880: PUSH
75881: LD_INT 3
75883: NEG
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 1
75891: NEG
75892: PUSH
75893: LD_INT 4
75895: NEG
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 1
75903: NEG
75904: PUSH
75905: LD_INT 5
75907: NEG
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 2
75915: PUSH
75916: LD_INT 3
75918: NEG
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 2
75926: NEG
75927: PUSH
75928: LD_INT 5
75930: NEG
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 3
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: LD_INT 3
75948: PUSH
75949: LD_INT 1
75951: NEG
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 4
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: LD_INT 4
75969: PUSH
75970: LD_INT 1
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 3
75979: PUSH
75980: LD_INT 1
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 2
75989: PUSH
75990: LD_INT 0
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: LD_INT 2
75999: PUSH
76000: LD_INT 1
76002: NEG
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 2
76010: PUSH
76011: LD_INT 2
76013: NEG
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 4
76021: PUSH
76022: LD_INT 2
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: PUSH
76029: LD_INT 4
76031: PUSH
76032: LD_INT 4
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 4
76041: PUSH
76042: LD_INT 3
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 5
76051: PUSH
76052: LD_INT 4
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 5
76061: PUSH
76062: LD_INT 5
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: LD_INT 4
76071: PUSH
76072: LD_INT 5
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 3
76081: PUSH
76082: LD_INT 4
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 3
76091: PUSH
76092: LD_INT 3
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 5
76101: PUSH
76102: LD_INT 3
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 3
76111: PUSH
76112: LD_INT 5
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76166: LD_ADDR_VAR 0 33
76170: PUSH
76171: LD_INT 4
76173: NEG
76174: PUSH
76175: LD_INT 4
76177: NEG
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 4
76185: NEG
76186: PUSH
76187: LD_INT 5
76189: NEG
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 3
76197: NEG
76198: PUSH
76199: LD_INT 4
76201: NEG
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 3
76209: NEG
76210: PUSH
76211: LD_INT 3
76213: NEG
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 4
76221: NEG
76222: PUSH
76223: LD_INT 3
76225: NEG
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 5
76233: NEG
76234: PUSH
76235: LD_INT 4
76237: NEG
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: PUSH
76243: LD_INT 5
76245: NEG
76246: PUSH
76247: LD_INT 5
76249: NEG
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: PUSH
76255: LD_INT 3
76257: NEG
76258: PUSH
76259: LD_INT 5
76261: NEG
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 5
76269: NEG
76270: PUSH
76271: LD_INT 3
76273: NEG
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 0
76281: PUSH
76282: LD_INT 3
76284: NEG
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: LD_INT 0
76292: PUSH
76293: LD_INT 4
76295: NEG
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 1
76303: PUSH
76304: LD_INT 3
76306: NEG
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: LD_INT 1
76314: PUSH
76315: LD_INT 2
76317: NEG
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 0
76325: PUSH
76326: LD_INT 2
76328: NEG
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 1
76336: NEG
76337: PUSH
76338: LD_INT 3
76340: NEG
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 1
76348: NEG
76349: PUSH
76350: LD_INT 4
76352: NEG
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 2
76360: PUSH
76361: LD_INT 2
76363: NEG
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 2
76371: NEG
76372: PUSH
76373: LD_INT 4
76375: NEG
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 4
76383: PUSH
76384: LD_INT 0
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PUSH
76391: LD_INT 4
76393: PUSH
76394: LD_INT 1
76396: NEG
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 5
76404: PUSH
76405: LD_INT 0
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 5
76414: PUSH
76415: LD_INT 1
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: LD_INT 4
76424: PUSH
76425: LD_INT 1
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 3
76434: PUSH
76435: LD_INT 0
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: LD_INT 3
76444: PUSH
76445: LD_INT 1
76447: NEG
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 3
76455: PUSH
76456: LD_INT 2
76458: NEG
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 5
76466: PUSH
76467: LD_INT 2
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 3
76476: PUSH
76477: LD_INT 3
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: PUSH
76484: LD_INT 3
76486: PUSH
76487: LD_INT 2
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 4
76496: PUSH
76497: LD_INT 3
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 4
76506: PUSH
76507: LD_INT 4
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: PUSH
76514: LD_INT 3
76516: PUSH
76517: LD_INT 4
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: PUSH
76524: LD_INT 2
76526: PUSH
76527: LD_INT 3
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 2
76536: PUSH
76537: LD_INT 2
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 4
76546: PUSH
76547: LD_INT 2
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 2
76556: PUSH
76557: LD_INT 4
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: LD_INT 4
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 0
76576: PUSH
76577: LD_INT 3
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 1
76586: PUSH
76587: LD_INT 4
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 1
76596: PUSH
76597: LD_INT 5
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 0
76606: PUSH
76607: LD_INT 5
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 1
76616: NEG
76617: PUSH
76618: LD_INT 4
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 1
76627: NEG
76628: PUSH
76629: LD_INT 3
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 2
76638: PUSH
76639: LD_INT 5
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 2
76648: NEG
76649: PUSH
76650: LD_INT 3
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76704: LD_ADDR_VAR 0 34
76708: PUSH
76709: LD_INT 0
76711: PUSH
76712: LD_INT 4
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: LD_INT 5
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: LD_INT 4
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 1
76744: PUSH
76745: LD_INT 3
76747: NEG
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: LD_INT 3
76758: NEG
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 1
76766: NEG
76767: PUSH
76768: LD_INT 4
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 5
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 2
76790: PUSH
76791: LD_INT 3
76793: NEG
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 2
76801: NEG
76802: PUSH
76803: LD_INT 5
76805: NEG
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 3
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 3
76823: PUSH
76824: LD_INT 1
76826: NEG
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 4
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 4
76844: PUSH
76845: LD_INT 1
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 3
76854: PUSH
76855: LD_INT 1
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: LD_INT 2
76864: PUSH
76865: LD_INT 0
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 2
76874: PUSH
76875: LD_INT 1
76877: NEG
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 2
76885: PUSH
76886: LD_INT 2
76888: NEG
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 4
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 4
76906: PUSH
76907: LD_INT 4
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 4
76916: PUSH
76917: LD_INT 3
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PUSH
76924: LD_INT 5
76926: PUSH
76927: LD_INT 4
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: PUSH
76934: LD_INT 5
76936: PUSH
76937: LD_INT 5
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: PUSH
76944: LD_INT 4
76946: PUSH
76947: LD_INT 5
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: LD_INT 3
76956: PUSH
76957: LD_INT 4
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: PUSH
76964: LD_INT 3
76966: PUSH
76967: LD_INT 3
76969: PUSH
76970: EMPTY
76971: LIST
76972: LIST
76973: PUSH
76974: LD_INT 5
76976: PUSH
76977: LD_INT 3
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: PUSH
76984: LD_INT 3
76986: PUSH
76987: LD_INT 5
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: PUSH
76994: LD_INT 0
76996: PUSH
76997: LD_INT 3
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: PUSH
77004: LD_INT 0
77006: PUSH
77007: LD_INT 2
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PUSH
77014: LD_INT 1
77016: PUSH
77017: LD_INT 3
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: LD_INT 4
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 0
77036: PUSH
77037: LD_INT 4
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 1
77046: NEG
77047: PUSH
77048: LD_INT 3
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: LD_INT 1
77057: NEG
77058: PUSH
77059: LD_INT 2
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 2
77068: PUSH
77069: LD_INT 4
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: LD_INT 2
77078: NEG
77079: PUSH
77080: LD_INT 2
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 4
77089: NEG
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 4
77100: NEG
77101: PUSH
77102: LD_INT 1
77104: NEG
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 3
77112: NEG
77113: PUSH
77114: LD_INT 0
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 3
77123: NEG
77124: PUSH
77125: LD_INT 1
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 4
77134: NEG
77135: PUSH
77136: LD_INT 1
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 5
77145: NEG
77146: PUSH
77147: LD_INT 0
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 5
77156: NEG
77157: PUSH
77158: LD_INT 1
77160: NEG
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 5
77168: NEG
77169: PUSH
77170: LD_INT 2
77172: NEG
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 3
77180: NEG
77181: PUSH
77182: LD_INT 2
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: ST_TO_ADDR
// end ; end ;
77236: GO 77239
77238: POP
// case btype of b_depot , b_warehouse :
77239: LD_VAR 0 1
77243: PUSH
77244: LD_INT 0
77246: DOUBLE
77247: EQUAL
77248: IFTRUE 77258
77250: LD_INT 1
77252: DOUBLE
77253: EQUAL
77254: IFTRUE 77258
77256: GO 77459
77258: POP
// case nation of nation_american :
77259: LD_VAR 0 5
77263: PUSH
77264: LD_INT 1
77266: DOUBLE
77267: EQUAL
77268: IFTRUE 77272
77270: GO 77328
77272: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
77273: LD_ADDR_VAR 0 9
77277: PUSH
77278: LD_VAR 0 11
77282: PUSH
77283: LD_VAR 0 12
77287: PUSH
77288: LD_VAR 0 13
77292: PUSH
77293: LD_VAR 0 14
77297: PUSH
77298: LD_VAR 0 15
77302: PUSH
77303: LD_VAR 0 16
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: PUSH
77316: LD_VAR 0 4
77320: PUSH
77321: LD_INT 1
77323: PLUS
77324: ARRAY
77325: ST_TO_ADDR
77326: GO 77457
77328: LD_INT 2
77330: DOUBLE
77331: EQUAL
77332: IFTRUE 77336
77334: GO 77392
77336: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
77337: LD_ADDR_VAR 0 9
77341: PUSH
77342: LD_VAR 0 17
77346: PUSH
77347: LD_VAR 0 18
77351: PUSH
77352: LD_VAR 0 19
77356: PUSH
77357: LD_VAR 0 20
77361: PUSH
77362: LD_VAR 0 21
77366: PUSH
77367: LD_VAR 0 22
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: PUSH
77380: LD_VAR 0 4
77384: PUSH
77385: LD_INT 1
77387: PLUS
77388: ARRAY
77389: ST_TO_ADDR
77390: GO 77457
77392: LD_INT 3
77394: DOUBLE
77395: EQUAL
77396: IFTRUE 77400
77398: GO 77456
77400: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77401: LD_ADDR_VAR 0 9
77405: PUSH
77406: LD_VAR 0 23
77410: PUSH
77411: LD_VAR 0 24
77415: PUSH
77416: LD_VAR 0 25
77420: PUSH
77421: LD_VAR 0 26
77425: PUSH
77426: LD_VAR 0 27
77430: PUSH
77431: LD_VAR 0 28
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: PUSH
77444: LD_VAR 0 4
77448: PUSH
77449: LD_INT 1
77451: PLUS
77452: ARRAY
77453: ST_TO_ADDR
77454: GO 77457
77456: POP
77457: GO 78006
77459: LD_INT 2
77461: DOUBLE
77462: EQUAL
77463: IFTRUE 77473
77465: LD_INT 3
77467: DOUBLE
77468: EQUAL
77469: IFTRUE 77473
77471: GO 77529
77473: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77474: LD_ADDR_VAR 0 9
77478: PUSH
77479: LD_VAR 0 29
77483: PUSH
77484: LD_VAR 0 30
77488: PUSH
77489: LD_VAR 0 31
77493: PUSH
77494: LD_VAR 0 32
77498: PUSH
77499: LD_VAR 0 33
77503: PUSH
77504: LD_VAR 0 34
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: PUSH
77517: LD_VAR 0 4
77521: PUSH
77522: LD_INT 1
77524: PLUS
77525: ARRAY
77526: ST_TO_ADDR
77527: GO 78006
77529: LD_INT 16
77531: DOUBLE
77532: EQUAL
77533: IFTRUE 77585
77535: LD_INT 17
77537: DOUBLE
77538: EQUAL
77539: IFTRUE 77585
77541: LD_INT 18
77543: DOUBLE
77544: EQUAL
77545: IFTRUE 77585
77547: LD_INT 19
77549: DOUBLE
77550: EQUAL
77551: IFTRUE 77585
77553: LD_INT 20
77555: DOUBLE
77556: EQUAL
77557: IFTRUE 77585
77559: LD_INT 21
77561: DOUBLE
77562: EQUAL
77563: IFTRUE 77585
77565: LD_INT 23
77567: DOUBLE
77568: EQUAL
77569: IFTRUE 77585
77571: LD_INT 24
77573: DOUBLE
77574: EQUAL
77575: IFTRUE 77585
77577: LD_INT 25
77579: DOUBLE
77580: EQUAL
77581: IFTRUE 77585
77583: GO 77641
77585: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77586: LD_ADDR_VAR 0 9
77590: PUSH
77591: LD_VAR 0 35
77595: PUSH
77596: LD_VAR 0 36
77600: PUSH
77601: LD_VAR 0 37
77605: PUSH
77606: LD_VAR 0 38
77610: PUSH
77611: LD_VAR 0 39
77615: PUSH
77616: LD_VAR 0 40
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: PUSH
77629: LD_VAR 0 4
77633: PUSH
77634: LD_INT 1
77636: PLUS
77637: ARRAY
77638: ST_TO_ADDR
77639: GO 78006
77641: LD_INT 6
77643: DOUBLE
77644: EQUAL
77645: IFTRUE 77697
77647: LD_INT 7
77649: DOUBLE
77650: EQUAL
77651: IFTRUE 77697
77653: LD_INT 8
77655: DOUBLE
77656: EQUAL
77657: IFTRUE 77697
77659: LD_INT 13
77661: DOUBLE
77662: EQUAL
77663: IFTRUE 77697
77665: LD_INT 12
77667: DOUBLE
77668: EQUAL
77669: IFTRUE 77697
77671: LD_INT 15
77673: DOUBLE
77674: EQUAL
77675: IFTRUE 77697
77677: LD_INT 11
77679: DOUBLE
77680: EQUAL
77681: IFTRUE 77697
77683: LD_INT 14
77685: DOUBLE
77686: EQUAL
77687: IFTRUE 77697
77689: LD_INT 10
77691: DOUBLE
77692: EQUAL
77693: IFTRUE 77697
77695: GO 77753
77697: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
77698: LD_ADDR_VAR 0 9
77702: PUSH
77703: LD_VAR 0 41
77707: PUSH
77708: LD_VAR 0 42
77712: PUSH
77713: LD_VAR 0 43
77717: PUSH
77718: LD_VAR 0 44
77722: PUSH
77723: LD_VAR 0 45
77727: PUSH
77728: LD_VAR 0 46
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: LIST
77740: PUSH
77741: LD_VAR 0 4
77745: PUSH
77746: LD_INT 1
77748: PLUS
77749: ARRAY
77750: ST_TO_ADDR
77751: GO 78006
77753: LD_INT 36
77755: DOUBLE
77756: EQUAL
77757: IFTRUE 77761
77759: GO 77817
77761: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77762: LD_ADDR_VAR 0 9
77766: PUSH
77767: LD_VAR 0 47
77771: PUSH
77772: LD_VAR 0 48
77776: PUSH
77777: LD_VAR 0 49
77781: PUSH
77782: LD_VAR 0 50
77786: PUSH
77787: LD_VAR 0 51
77791: PUSH
77792: LD_VAR 0 52
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: PUSH
77805: LD_VAR 0 4
77809: PUSH
77810: LD_INT 1
77812: PLUS
77813: ARRAY
77814: ST_TO_ADDR
77815: GO 78006
77817: LD_INT 4
77819: DOUBLE
77820: EQUAL
77821: IFTRUE 77843
77823: LD_INT 5
77825: DOUBLE
77826: EQUAL
77827: IFTRUE 77843
77829: LD_INT 34
77831: DOUBLE
77832: EQUAL
77833: IFTRUE 77843
77835: LD_INT 37
77837: DOUBLE
77838: EQUAL
77839: IFTRUE 77843
77841: GO 77899
77843: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77844: LD_ADDR_VAR 0 9
77848: PUSH
77849: LD_VAR 0 53
77853: PUSH
77854: LD_VAR 0 54
77858: PUSH
77859: LD_VAR 0 55
77863: PUSH
77864: LD_VAR 0 56
77868: PUSH
77869: LD_VAR 0 57
77873: PUSH
77874: LD_VAR 0 58
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: PUSH
77887: LD_VAR 0 4
77891: PUSH
77892: LD_INT 1
77894: PLUS
77895: ARRAY
77896: ST_TO_ADDR
77897: GO 78006
77899: LD_INT 31
77901: DOUBLE
77902: EQUAL
77903: IFTRUE 77949
77905: LD_INT 32
77907: DOUBLE
77908: EQUAL
77909: IFTRUE 77949
77911: LD_INT 33
77913: DOUBLE
77914: EQUAL
77915: IFTRUE 77949
77917: LD_INT 27
77919: DOUBLE
77920: EQUAL
77921: IFTRUE 77949
77923: LD_INT 26
77925: DOUBLE
77926: EQUAL
77927: IFTRUE 77949
77929: LD_INT 28
77931: DOUBLE
77932: EQUAL
77933: IFTRUE 77949
77935: LD_INT 29
77937: DOUBLE
77938: EQUAL
77939: IFTRUE 77949
77941: LD_INT 30
77943: DOUBLE
77944: EQUAL
77945: IFTRUE 77949
77947: GO 78005
77949: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
77950: LD_ADDR_VAR 0 9
77954: PUSH
77955: LD_VAR 0 59
77959: PUSH
77960: LD_VAR 0 60
77964: PUSH
77965: LD_VAR 0 61
77969: PUSH
77970: LD_VAR 0 62
77974: PUSH
77975: LD_VAR 0 63
77979: PUSH
77980: LD_VAR 0 64
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: PUSH
77993: LD_VAR 0 4
77997: PUSH
77998: LD_INT 1
78000: PLUS
78001: ARRAY
78002: ST_TO_ADDR
78003: GO 78006
78005: POP
// temp_list2 = [ ] ;
78006: LD_ADDR_VAR 0 10
78010: PUSH
78011: EMPTY
78012: ST_TO_ADDR
// for i in temp_list do
78013: LD_ADDR_VAR 0 8
78017: PUSH
78018: LD_VAR 0 9
78022: PUSH
78023: FOR_IN
78024: IFFALSE 78076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78026: LD_ADDR_VAR 0 10
78030: PUSH
78031: LD_VAR 0 10
78035: PUSH
78036: LD_VAR 0 8
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PUSH
78045: LD_VAR 0 2
78049: PLUS
78050: PUSH
78051: LD_VAR 0 8
78055: PUSH
78056: LD_INT 2
78058: ARRAY
78059: PUSH
78060: LD_VAR 0 3
78064: PLUS
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: EMPTY
78071: LIST
78072: ADD
78073: ST_TO_ADDR
78074: GO 78023
78076: POP
78077: POP
// result = temp_list2 ;
78078: LD_ADDR_VAR 0 7
78082: PUSH
78083: LD_VAR 0 10
78087: ST_TO_ADDR
// end ;
78088: LD_VAR 0 7
78092: RET
// export function EnemyInRange ( unit , dist ) ; begin
78093: LD_INT 0
78095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78096: LD_ADDR_VAR 0 3
78100: PUSH
78101: LD_VAR 0 1
78105: PPUSH
78106: CALL_OW 255
78110: PPUSH
78111: LD_VAR 0 1
78115: PPUSH
78116: CALL_OW 250
78120: PPUSH
78121: LD_VAR 0 1
78125: PPUSH
78126: CALL_OW 251
78130: PPUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: CALL 52221 0 4
78140: PUSH
78141: LD_INT 4
78143: ARRAY
78144: ST_TO_ADDR
// end ;
78145: LD_VAR 0 3
78149: RET
// export function PlayerSeeMe ( unit ) ; begin
78150: LD_INT 0
78152: PPUSH
// result := See ( your_side , unit ) ;
78153: LD_ADDR_VAR 0 2
78157: PUSH
78158: LD_OWVAR 2
78162: PPUSH
78163: LD_VAR 0 1
78167: PPUSH
78168: CALL_OW 292
78172: ST_TO_ADDR
// end ;
78173: LD_VAR 0 2
78177: RET
// export function ReverseDir ( unit ) ; begin
78178: LD_INT 0
78180: PPUSH
// if not unit then
78181: LD_VAR 0 1
78185: NOT
78186: IFFALSE 78190
// exit ;
78188: GO 78236
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
78190: LD_ADDR_VAR 0 2
78194: PUSH
78195: LD_INT 3
78197: PUSH
78198: LD_INT 4
78200: PUSH
78201: LD_INT 5
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: LD_INT 1
78209: PUSH
78210: LD_INT 2
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: PUSH
78221: LD_VAR 0 1
78225: PPUSH
78226: CALL_OW 254
78230: PUSH
78231: LD_INT 1
78233: PLUS
78234: ARRAY
78235: ST_TO_ADDR
// end ;
78236: LD_VAR 0 2
78240: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78241: LD_INT 0
78243: PPUSH
78244: PPUSH
78245: PPUSH
78246: PPUSH
78247: PPUSH
// if not hexes then
78248: LD_VAR 0 2
78252: NOT
78253: IFFALSE 78257
// exit ;
78255: GO 78405
// dist := 9999 ;
78257: LD_ADDR_VAR 0 5
78261: PUSH
78262: LD_INT 9999
78264: ST_TO_ADDR
// for i = 1 to hexes do
78265: LD_ADDR_VAR 0 4
78269: PUSH
78270: DOUBLE
78271: LD_INT 1
78273: DEC
78274: ST_TO_ADDR
78275: LD_VAR 0 2
78279: PUSH
78280: FOR_TO
78281: IFFALSE 78393
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78283: LD_VAR 0 1
78287: PPUSH
78288: LD_VAR 0 2
78292: PUSH
78293: LD_VAR 0 4
78297: ARRAY
78298: PUSH
78299: LD_INT 1
78301: ARRAY
78302: PPUSH
78303: LD_VAR 0 2
78307: PUSH
78308: LD_VAR 0 4
78312: ARRAY
78313: PUSH
78314: LD_INT 2
78316: ARRAY
78317: PPUSH
78318: CALL_OW 297
78322: PUSH
78323: LD_VAR 0 5
78327: LESS
78328: IFFALSE 78391
// begin hex := hexes [ i ] ;
78330: LD_ADDR_VAR 0 7
78334: PUSH
78335: LD_VAR 0 2
78339: PUSH
78340: LD_VAR 0 4
78344: ARRAY
78345: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78346: LD_ADDR_VAR 0 5
78350: PUSH
78351: LD_VAR 0 1
78355: PPUSH
78356: LD_VAR 0 2
78360: PUSH
78361: LD_VAR 0 4
78365: ARRAY
78366: PUSH
78367: LD_INT 1
78369: ARRAY
78370: PPUSH
78371: LD_VAR 0 2
78375: PUSH
78376: LD_VAR 0 4
78380: ARRAY
78381: PUSH
78382: LD_INT 2
78384: ARRAY
78385: PPUSH
78386: CALL_OW 297
78390: ST_TO_ADDR
// end ; end ;
78391: GO 78280
78393: POP
78394: POP
// result := hex ;
78395: LD_ADDR_VAR 0 3
78399: PUSH
78400: LD_VAR 0 7
78404: ST_TO_ADDR
// end ;
78405: LD_VAR 0 3
78409: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78410: LD_INT 0
78412: PPUSH
78413: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78414: LD_VAR 0 1
78418: NOT
78419: PUSH
78420: LD_VAR 0 1
78424: PUSH
78425: LD_INT 21
78427: PUSH
78428: LD_INT 2
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: LD_INT 23
78437: PUSH
78438: LD_INT 2
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PPUSH
78449: CALL_OW 69
78453: IN
78454: NOT
78455: OR
78456: IFFALSE 78460
// exit ;
78458: GO 78507
// for i = 1 to 3 do
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: DOUBLE
78466: LD_INT 1
78468: DEC
78469: ST_TO_ADDR
78470: LD_INT 3
78472: PUSH
78473: FOR_TO
78474: IFFALSE 78505
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78476: LD_VAR 0 1
78480: PPUSH
78481: CALL_OW 250
78485: PPUSH
78486: LD_VAR 0 1
78490: PPUSH
78491: CALL_OW 251
78495: PPUSH
78496: LD_INT 1
78498: PPUSH
78499: CALL_OW 453
78503: GO 78473
78505: POP
78506: POP
// end ;
78507: LD_VAR 0 2
78511: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78512: LD_INT 0
78514: PPUSH
78515: PPUSH
78516: PPUSH
78517: PPUSH
78518: PPUSH
78519: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
78520: LD_VAR 0 1
78524: NOT
78525: PUSH
78526: LD_VAR 0 2
78530: NOT
78531: OR
78532: PUSH
78533: LD_VAR 0 1
78537: PPUSH
78538: CALL_OW 314
78542: OR
78543: IFFALSE 78547
// exit ;
78545: GO 78988
// x := GetX ( enemy_unit ) ;
78547: LD_ADDR_VAR 0 7
78551: PUSH
78552: LD_VAR 0 2
78556: PPUSH
78557: CALL_OW 250
78561: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78562: LD_ADDR_VAR 0 8
78566: PUSH
78567: LD_VAR 0 2
78571: PPUSH
78572: CALL_OW 251
78576: ST_TO_ADDR
// if not x or not y then
78577: LD_VAR 0 7
78581: NOT
78582: PUSH
78583: LD_VAR 0 8
78587: NOT
78588: OR
78589: IFFALSE 78593
// exit ;
78591: GO 78988
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78593: LD_ADDR_VAR 0 6
78597: PUSH
78598: LD_VAR 0 7
78602: PPUSH
78603: LD_INT 0
78605: PPUSH
78606: LD_INT 4
78608: PPUSH
78609: CALL_OW 272
78613: PUSH
78614: LD_VAR 0 8
78618: PPUSH
78619: LD_INT 0
78621: PPUSH
78622: LD_INT 4
78624: PPUSH
78625: CALL_OW 273
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PUSH
78634: LD_VAR 0 7
78638: PPUSH
78639: LD_INT 1
78641: PPUSH
78642: LD_INT 4
78644: PPUSH
78645: CALL_OW 272
78649: PUSH
78650: LD_VAR 0 8
78654: PPUSH
78655: LD_INT 1
78657: PPUSH
78658: LD_INT 4
78660: PPUSH
78661: CALL_OW 273
78665: PUSH
78666: EMPTY
78667: LIST
78668: LIST
78669: PUSH
78670: LD_VAR 0 7
78674: PPUSH
78675: LD_INT 2
78677: PPUSH
78678: LD_INT 4
78680: PPUSH
78681: CALL_OW 272
78685: PUSH
78686: LD_VAR 0 8
78690: PPUSH
78691: LD_INT 2
78693: PPUSH
78694: LD_INT 4
78696: PPUSH
78697: CALL_OW 273
78701: PUSH
78702: EMPTY
78703: LIST
78704: LIST
78705: PUSH
78706: LD_VAR 0 7
78710: PPUSH
78711: LD_INT 3
78713: PPUSH
78714: LD_INT 4
78716: PPUSH
78717: CALL_OW 272
78721: PUSH
78722: LD_VAR 0 8
78726: PPUSH
78727: LD_INT 3
78729: PPUSH
78730: LD_INT 4
78732: PPUSH
78733: CALL_OW 273
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: PUSH
78742: LD_VAR 0 7
78746: PPUSH
78747: LD_INT 4
78749: PPUSH
78750: LD_INT 4
78752: PPUSH
78753: CALL_OW 272
78757: PUSH
78758: LD_VAR 0 8
78762: PPUSH
78763: LD_INT 4
78765: PPUSH
78766: LD_INT 4
78768: PPUSH
78769: CALL_OW 273
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: PUSH
78778: LD_VAR 0 7
78782: PPUSH
78783: LD_INT 5
78785: PPUSH
78786: LD_INT 4
78788: PPUSH
78789: CALL_OW 272
78793: PUSH
78794: LD_VAR 0 8
78798: PPUSH
78799: LD_INT 5
78801: PPUSH
78802: LD_INT 4
78804: PPUSH
78805: CALL_OW 273
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: LIST
78818: LIST
78819: LIST
78820: LIST
78821: ST_TO_ADDR
// for i = tmp downto 1 do
78822: LD_ADDR_VAR 0 4
78826: PUSH
78827: DOUBLE
78828: LD_VAR 0 6
78832: INC
78833: ST_TO_ADDR
78834: LD_INT 1
78836: PUSH
78837: FOR_DOWNTO
78838: IFFALSE 78939
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78840: LD_VAR 0 6
78844: PUSH
78845: LD_VAR 0 4
78849: ARRAY
78850: PUSH
78851: LD_INT 1
78853: ARRAY
78854: PPUSH
78855: LD_VAR 0 6
78859: PUSH
78860: LD_VAR 0 4
78864: ARRAY
78865: PUSH
78866: LD_INT 2
78868: ARRAY
78869: PPUSH
78870: CALL_OW 488
78874: NOT
78875: PUSH
78876: LD_VAR 0 6
78880: PUSH
78881: LD_VAR 0 4
78885: ARRAY
78886: PUSH
78887: LD_INT 1
78889: ARRAY
78890: PPUSH
78891: LD_VAR 0 6
78895: PUSH
78896: LD_VAR 0 4
78900: ARRAY
78901: PUSH
78902: LD_INT 2
78904: ARRAY
78905: PPUSH
78906: CALL_OW 428
78910: PUSH
78911: LD_INT 0
78913: NONEQUAL
78914: OR
78915: IFFALSE 78937
// tmp := Delete ( tmp , i ) ;
78917: LD_ADDR_VAR 0 6
78921: PUSH
78922: LD_VAR 0 6
78926: PPUSH
78927: LD_VAR 0 4
78931: PPUSH
78932: CALL_OW 3
78936: ST_TO_ADDR
78937: GO 78837
78939: POP
78940: POP
// j := GetClosestHex ( unit , tmp ) ;
78941: LD_ADDR_VAR 0 5
78945: PUSH
78946: LD_VAR 0 1
78950: PPUSH
78951: LD_VAR 0 6
78955: PPUSH
78956: CALL 78241 0 2
78960: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78961: LD_VAR 0 1
78965: PPUSH
78966: LD_VAR 0 5
78970: PUSH
78971: LD_INT 1
78973: ARRAY
78974: PPUSH
78975: LD_VAR 0 5
78979: PUSH
78980: LD_INT 2
78982: ARRAY
78983: PPUSH
78984: CALL_OW 111
// end ;
78988: LD_VAR 0 3
78992: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78993: LD_INT 0
78995: PPUSH
78996: PPUSH
78997: PPUSH
// uc_side = 0 ;
78998: LD_ADDR_OWVAR 20
79002: PUSH
79003: LD_INT 0
79005: ST_TO_ADDR
// uc_nation = 0 ;
79006: LD_ADDR_OWVAR 21
79010: PUSH
79011: LD_INT 0
79013: ST_TO_ADDR
// InitHc ;
79014: CALL_OW 19
// InitVc ;
79018: CALL_OW 20
// if mastodonts then
79022: LD_VAR 0 6
79026: IFFALSE 79093
// for i = 1 to mastodonts do
79028: LD_ADDR_VAR 0 11
79032: PUSH
79033: DOUBLE
79034: LD_INT 1
79036: DEC
79037: ST_TO_ADDR
79038: LD_VAR 0 6
79042: PUSH
79043: FOR_TO
79044: IFFALSE 79091
// begin vc_chassis := 31 ;
79046: LD_ADDR_OWVAR 37
79050: PUSH
79051: LD_INT 31
79053: ST_TO_ADDR
// vc_control := control_rider ;
79054: LD_ADDR_OWVAR 38
79058: PUSH
79059: LD_INT 4
79061: ST_TO_ADDR
// animal := CreateVehicle ;
79062: LD_ADDR_VAR 0 12
79066: PUSH
79067: CALL_OW 45
79071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79072: LD_VAR 0 12
79076: PPUSH
79077: LD_VAR 0 8
79081: PPUSH
79082: LD_INT 0
79084: PPUSH
79085: CALL 85799 0 3
// end ;
79089: GO 79043
79091: POP
79092: POP
// if horses then
79093: LD_VAR 0 5
79097: IFFALSE 79164
// for i = 1 to horses do
79099: LD_ADDR_VAR 0 11
79103: PUSH
79104: DOUBLE
79105: LD_INT 1
79107: DEC
79108: ST_TO_ADDR
79109: LD_VAR 0 5
79113: PUSH
79114: FOR_TO
79115: IFFALSE 79162
// begin hc_class := 21 ;
79117: LD_ADDR_OWVAR 28
79121: PUSH
79122: LD_INT 21
79124: ST_TO_ADDR
// hc_gallery :=  ;
79125: LD_ADDR_OWVAR 33
79129: PUSH
79130: LD_STRING 
79132: ST_TO_ADDR
// animal := CreateHuman ;
79133: LD_ADDR_VAR 0 12
79137: PUSH
79138: CALL_OW 44
79142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79143: LD_VAR 0 12
79147: PPUSH
79148: LD_VAR 0 8
79152: PPUSH
79153: LD_INT 0
79155: PPUSH
79156: CALL 85799 0 3
// end ;
79160: GO 79114
79162: POP
79163: POP
// if birds then
79164: LD_VAR 0 1
79168: IFFALSE 79235
// for i = 1 to birds do
79170: LD_ADDR_VAR 0 11
79174: PUSH
79175: DOUBLE
79176: LD_INT 1
79178: DEC
79179: ST_TO_ADDR
79180: LD_VAR 0 1
79184: PUSH
79185: FOR_TO
79186: IFFALSE 79233
// begin hc_class = 18 ;
79188: LD_ADDR_OWVAR 28
79192: PUSH
79193: LD_INT 18
79195: ST_TO_ADDR
// hc_gallery =  ;
79196: LD_ADDR_OWVAR 33
79200: PUSH
79201: LD_STRING 
79203: ST_TO_ADDR
// animal := CreateHuman ;
79204: LD_ADDR_VAR 0 12
79208: PUSH
79209: CALL_OW 44
79213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79214: LD_VAR 0 12
79218: PPUSH
79219: LD_VAR 0 8
79223: PPUSH
79224: LD_INT 0
79226: PPUSH
79227: CALL 85799 0 3
// end ;
79231: GO 79185
79233: POP
79234: POP
// if tigers then
79235: LD_VAR 0 2
79239: IFFALSE 79323
// for i = 1 to tigers do
79241: LD_ADDR_VAR 0 11
79245: PUSH
79246: DOUBLE
79247: LD_INT 1
79249: DEC
79250: ST_TO_ADDR
79251: LD_VAR 0 2
79255: PUSH
79256: FOR_TO
79257: IFFALSE 79321
// begin hc_class = class_tiger ;
79259: LD_ADDR_OWVAR 28
79263: PUSH
79264: LD_INT 14
79266: ST_TO_ADDR
// hc_gallery =  ;
79267: LD_ADDR_OWVAR 33
79271: PUSH
79272: LD_STRING 
79274: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79275: LD_ADDR_OWVAR 35
79279: PUSH
79280: LD_INT 7
79282: NEG
79283: PPUSH
79284: LD_INT 7
79286: PPUSH
79287: CALL_OW 12
79291: ST_TO_ADDR
// animal := CreateHuman ;
79292: LD_ADDR_VAR 0 12
79296: PUSH
79297: CALL_OW 44
79301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79302: LD_VAR 0 12
79306: PPUSH
79307: LD_VAR 0 8
79311: PPUSH
79312: LD_INT 0
79314: PPUSH
79315: CALL 85799 0 3
// end ;
79319: GO 79256
79321: POP
79322: POP
// if apemans then
79323: LD_VAR 0 3
79327: IFFALSE 79450
// for i = 1 to apemans do
79329: LD_ADDR_VAR 0 11
79333: PUSH
79334: DOUBLE
79335: LD_INT 1
79337: DEC
79338: ST_TO_ADDR
79339: LD_VAR 0 3
79343: PUSH
79344: FOR_TO
79345: IFFALSE 79448
// begin hc_class = class_apeman ;
79347: LD_ADDR_OWVAR 28
79351: PUSH
79352: LD_INT 12
79354: ST_TO_ADDR
// hc_gallery =  ;
79355: LD_ADDR_OWVAR 33
79359: PUSH
79360: LD_STRING 
79362: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79363: LD_ADDR_OWVAR 35
79367: PUSH
79368: LD_INT 5
79370: NEG
79371: PPUSH
79372: LD_INT 5
79374: PPUSH
79375: CALL_OW 12
79379: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79380: LD_ADDR_OWVAR 31
79384: PUSH
79385: LD_INT 1
79387: PPUSH
79388: LD_INT 3
79390: PPUSH
79391: CALL_OW 12
79395: PUSH
79396: LD_INT 1
79398: PPUSH
79399: LD_INT 3
79401: PPUSH
79402: CALL_OW 12
79406: PUSH
79407: LD_INT 0
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: LIST
79417: LIST
79418: ST_TO_ADDR
// animal := CreateHuman ;
79419: LD_ADDR_VAR 0 12
79423: PUSH
79424: CALL_OW 44
79428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79429: LD_VAR 0 12
79433: PPUSH
79434: LD_VAR 0 8
79438: PPUSH
79439: LD_INT 0
79441: PPUSH
79442: CALL 85799 0 3
// end ;
79446: GO 79344
79448: POP
79449: POP
// if enchidnas then
79450: LD_VAR 0 4
79454: IFFALSE 79521
// for i = 1 to enchidnas do
79456: LD_ADDR_VAR 0 11
79460: PUSH
79461: DOUBLE
79462: LD_INT 1
79464: DEC
79465: ST_TO_ADDR
79466: LD_VAR 0 4
79470: PUSH
79471: FOR_TO
79472: IFFALSE 79519
// begin hc_class = 13 ;
79474: LD_ADDR_OWVAR 28
79478: PUSH
79479: LD_INT 13
79481: ST_TO_ADDR
// hc_gallery =  ;
79482: LD_ADDR_OWVAR 33
79486: PUSH
79487: LD_STRING 
79489: ST_TO_ADDR
// animal := CreateHuman ;
79490: LD_ADDR_VAR 0 12
79494: PUSH
79495: CALL_OW 44
79499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79500: LD_VAR 0 12
79504: PPUSH
79505: LD_VAR 0 8
79509: PPUSH
79510: LD_INT 0
79512: PPUSH
79513: CALL 85799 0 3
// end ;
79517: GO 79471
79519: POP
79520: POP
// if fishes then
79521: LD_VAR 0 7
79525: IFFALSE 79592
// for i = 1 to fishes do
79527: LD_ADDR_VAR 0 11
79531: PUSH
79532: DOUBLE
79533: LD_INT 1
79535: DEC
79536: ST_TO_ADDR
79537: LD_VAR 0 7
79541: PUSH
79542: FOR_TO
79543: IFFALSE 79590
// begin hc_class = 20 ;
79545: LD_ADDR_OWVAR 28
79549: PUSH
79550: LD_INT 20
79552: ST_TO_ADDR
// hc_gallery =  ;
79553: LD_ADDR_OWVAR 33
79557: PUSH
79558: LD_STRING 
79560: ST_TO_ADDR
// animal := CreateHuman ;
79561: LD_ADDR_VAR 0 12
79565: PUSH
79566: CALL_OW 44
79570: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
79571: LD_VAR 0 12
79575: PPUSH
79576: LD_VAR 0 9
79580: PPUSH
79581: LD_INT 0
79583: PPUSH
79584: CALL 85799 0 3
// end ;
79588: GO 79542
79590: POP
79591: POP
// end ;
79592: LD_VAR 0 10
79596: RET
// export function WantHeal ( sci , unit ) ; begin
79597: LD_INT 0
79599: PPUSH
// if GetTaskList ( sci ) > 0 then
79600: LD_VAR 0 1
79604: PPUSH
79605: CALL_OW 437
79609: PUSH
79610: LD_INT 0
79612: GREATER
79613: IFFALSE 79683
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79615: LD_VAR 0 1
79619: PPUSH
79620: CALL_OW 437
79624: PUSH
79625: LD_INT 1
79627: ARRAY
79628: PUSH
79629: LD_INT 1
79631: ARRAY
79632: PUSH
79633: LD_STRING l
79635: EQUAL
79636: PUSH
79637: LD_VAR 0 1
79641: PPUSH
79642: CALL_OW 437
79646: PUSH
79647: LD_INT 1
79649: ARRAY
79650: PUSH
79651: LD_INT 4
79653: ARRAY
79654: PUSH
79655: LD_VAR 0 2
79659: EQUAL
79660: AND
79661: IFFALSE 79673
// result := true else
79663: LD_ADDR_VAR 0 3
79667: PUSH
79668: LD_INT 1
79670: ST_TO_ADDR
79671: GO 79681
// result := false ;
79673: LD_ADDR_VAR 0 3
79677: PUSH
79678: LD_INT 0
79680: ST_TO_ADDR
// end else
79681: GO 79691
// result := false ;
79683: LD_ADDR_VAR 0 3
79687: PUSH
79688: LD_INT 0
79690: ST_TO_ADDR
// end ;
79691: LD_VAR 0 3
79695: RET
// export function HealTarget ( sci ) ; begin
79696: LD_INT 0
79698: PPUSH
// if not sci then
79699: LD_VAR 0 1
79703: NOT
79704: IFFALSE 79708
// exit ;
79706: GO 79773
// result := 0 ;
79708: LD_ADDR_VAR 0 2
79712: PUSH
79713: LD_INT 0
79715: ST_TO_ADDR
// if GetTaskList ( sci ) then
79716: LD_VAR 0 1
79720: PPUSH
79721: CALL_OW 437
79725: IFFALSE 79773
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79727: LD_VAR 0 1
79731: PPUSH
79732: CALL_OW 437
79736: PUSH
79737: LD_INT 1
79739: ARRAY
79740: PUSH
79741: LD_INT 1
79743: ARRAY
79744: PUSH
79745: LD_STRING l
79747: EQUAL
79748: IFFALSE 79773
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79750: LD_ADDR_VAR 0 2
79754: PUSH
79755: LD_VAR 0 1
79759: PPUSH
79760: CALL_OW 437
79764: PUSH
79765: LD_INT 1
79767: ARRAY
79768: PUSH
79769: LD_INT 4
79771: ARRAY
79772: ST_TO_ADDR
// end ;
79773: LD_VAR 0 2
79777: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
79778: LD_INT 0
79780: PPUSH
79781: PPUSH
79782: PPUSH
79783: PPUSH
79784: PPUSH
79785: PPUSH
79786: PPUSH
79787: PPUSH
79788: PPUSH
79789: PPUSH
79790: PPUSH
79791: PPUSH
79792: PPUSH
79793: PPUSH
79794: PPUSH
79795: PPUSH
79796: PPUSH
79797: PPUSH
79798: PPUSH
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
79803: PPUSH
79804: PPUSH
79805: PPUSH
79806: PPUSH
79807: PPUSH
79808: PPUSH
79809: PPUSH
79810: PPUSH
79811: PPUSH
79812: PPUSH
// if not list then
79813: LD_VAR 0 1
79817: NOT
79818: IFFALSE 79822
// exit ;
79820: GO 84410
// base := list [ 1 ] ;
79822: LD_ADDR_VAR 0 3
79826: PUSH
79827: LD_VAR 0 1
79831: PUSH
79832: LD_INT 1
79834: ARRAY
79835: ST_TO_ADDR
// group := list [ 2 ] ;
79836: LD_ADDR_VAR 0 4
79840: PUSH
79841: LD_VAR 0 1
79845: PUSH
79846: LD_INT 2
79848: ARRAY
79849: ST_TO_ADDR
// path := list [ 3 ] ;
79850: LD_ADDR_VAR 0 5
79854: PUSH
79855: LD_VAR 0 1
79859: PUSH
79860: LD_INT 3
79862: ARRAY
79863: ST_TO_ADDR
// flags := list [ 4 ] ;
79864: LD_ADDR_VAR 0 6
79868: PUSH
79869: LD_VAR 0 1
79873: PUSH
79874: LD_INT 4
79876: ARRAY
79877: ST_TO_ADDR
// mined := [ ] ;
79878: LD_ADDR_VAR 0 27
79882: PUSH
79883: EMPTY
79884: ST_TO_ADDR
// bombed := [ ] ;
79885: LD_ADDR_VAR 0 28
79889: PUSH
79890: EMPTY
79891: ST_TO_ADDR
// healers := [ ] ;
79892: LD_ADDR_VAR 0 31
79896: PUSH
79897: EMPTY
79898: ST_TO_ADDR
// to_heal := [ ] ;
79899: LD_ADDR_VAR 0 30
79903: PUSH
79904: EMPTY
79905: ST_TO_ADDR
// repairs := [ ] ;
79906: LD_ADDR_VAR 0 33
79910: PUSH
79911: EMPTY
79912: ST_TO_ADDR
// to_repair := [ ] ;
79913: LD_ADDR_VAR 0 32
79917: PUSH
79918: EMPTY
79919: ST_TO_ADDR
// if not group or not path then
79920: LD_VAR 0 4
79924: NOT
79925: PUSH
79926: LD_VAR 0 5
79930: NOT
79931: OR
79932: IFFALSE 79936
// exit ;
79934: GO 84410
// if flags then
79936: LD_VAR 0 6
79940: IFFALSE 80084
// begin f_ignore_area := flags [ 1 ] ;
79942: LD_ADDR_VAR 0 17
79946: PUSH
79947: LD_VAR 0 6
79951: PUSH
79952: LD_INT 1
79954: ARRAY
79955: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
79956: LD_ADDR_VAR 0 18
79960: PUSH
79961: LD_VAR 0 6
79965: PUSH
79966: LD_INT 2
79968: ARRAY
79969: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
79970: LD_ADDR_VAR 0 19
79974: PUSH
79975: LD_VAR 0 6
79979: PUSH
79980: LD_INT 3
79982: ARRAY
79983: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
79984: LD_ADDR_VAR 0 20
79988: PUSH
79989: LD_VAR 0 6
79993: PUSH
79994: LD_INT 4
79996: ARRAY
79997: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
79998: LD_ADDR_VAR 0 21
80002: PUSH
80003: LD_VAR 0 6
80007: PUSH
80008: LD_INT 5
80010: ARRAY
80011: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
80012: LD_ADDR_VAR 0 22
80016: PUSH
80017: LD_VAR 0 6
80021: PUSH
80022: LD_INT 6
80024: ARRAY
80025: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
80026: LD_ADDR_VAR 0 23
80030: PUSH
80031: LD_VAR 0 6
80035: PUSH
80036: LD_INT 7
80038: ARRAY
80039: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
80040: LD_ADDR_VAR 0 24
80044: PUSH
80045: LD_VAR 0 6
80049: PUSH
80050: LD_INT 8
80052: ARRAY
80053: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
80054: LD_ADDR_VAR 0 25
80058: PUSH
80059: LD_VAR 0 6
80063: PUSH
80064: LD_INT 9
80066: ARRAY
80067: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
80068: LD_ADDR_VAR 0 26
80072: PUSH
80073: LD_VAR 0 6
80077: PUSH
80078: LD_INT 10
80080: ARRAY
80081: ST_TO_ADDR
// end else
80082: GO 80164
// begin f_ignore_area := false ;
80084: LD_ADDR_VAR 0 17
80088: PUSH
80089: LD_INT 0
80091: ST_TO_ADDR
// f_capture := false ;
80092: LD_ADDR_VAR 0 18
80096: PUSH
80097: LD_INT 0
80099: ST_TO_ADDR
// f_ignore_civ := false ;
80100: LD_ADDR_VAR 0 19
80104: PUSH
80105: LD_INT 0
80107: ST_TO_ADDR
// f_murder := false ;
80108: LD_ADDR_VAR 0 20
80112: PUSH
80113: LD_INT 0
80115: ST_TO_ADDR
// f_mines := false ;
80116: LD_ADDR_VAR 0 21
80120: PUSH
80121: LD_INT 0
80123: ST_TO_ADDR
// f_repair := false ;
80124: LD_ADDR_VAR 0 22
80128: PUSH
80129: LD_INT 0
80131: ST_TO_ADDR
// f_heal := false ;
80132: LD_ADDR_VAR 0 23
80136: PUSH
80137: LD_INT 0
80139: ST_TO_ADDR
// f_spacetime := false ;
80140: LD_ADDR_VAR 0 24
80144: PUSH
80145: LD_INT 0
80147: ST_TO_ADDR
// f_attack_depot := false ;
80148: LD_ADDR_VAR 0 25
80152: PUSH
80153: LD_INT 0
80155: ST_TO_ADDR
// f_crawl := false ;
80156: LD_ADDR_VAR 0 26
80160: PUSH
80161: LD_INT 0
80163: ST_TO_ADDR
// end ; if f_heal then
80164: LD_VAR 0 23
80168: IFFALSE 80195
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
80170: LD_ADDR_VAR 0 31
80174: PUSH
80175: LD_VAR 0 4
80179: PPUSH
80180: LD_INT 25
80182: PUSH
80183: LD_INT 4
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PPUSH
80190: CALL_OW 72
80194: ST_TO_ADDR
// if f_repair then
80195: LD_VAR 0 22
80199: IFFALSE 80226
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
80201: LD_ADDR_VAR 0 33
80205: PUSH
80206: LD_VAR 0 4
80210: PPUSH
80211: LD_INT 25
80213: PUSH
80214: LD_INT 3
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: PPUSH
80221: CALL_OW 72
80225: ST_TO_ADDR
// units_path := [ ] ;
80226: LD_ADDR_VAR 0 16
80230: PUSH
80231: EMPTY
80232: ST_TO_ADDR
// for i = 1 to group do
80233: LD_ADDR_VAR 0 7
80237: PUSH
80238: DOUBLE
80239: LD_INT 1
80241: DEC
80242: ST_TO_ADDR
80243: LD_VAR 0 4
80247: PUSH
80248: FOR_TO
80249: IFFALSE 80278
// units_path := Replace ( units_path , i , path ) ;
80251: LD_ADDR_VAR 0 16
80255: PUSH
80256: LD_VAR 0 16
80260: PPUSH
80261: LD_VAR 0 7
80265: PPUSH
80266: LD_VAR 0 5
80270: PPUSH
80271: CALL_OW 1
80275: ST_TO_ADDR
80276: GO 80248
80278: POP
80279: POP
// repeat for i = group downto 1 do
80280: LD_ADDR_VAR 0 7
80284: PUSH
80285: DOUBLE
80286: LD_VAR 0 4
80290: INC
80291: ST_TO_ADDR
80292: LD_INT 1
80294: PUSH
80295: FOR_DOWNTO
80296: IFFALSE 84392
// begin wait ( 5 ) ;
80298: LD_INT 5
80300: PPUSH
80301: CALL_OW 67
// tmp := [ ] ;
80305: LD_ADDR_VAR 0 14
80309: PUSH
80310: EMPTY
80311: ST_TO_ADDR
// attacking := false ;
80312: LD_ADDR_VAR 0 29
80316: PUSH
80317: LD_INT 0
80319: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
80320: LD_VAR 0 4
80324: PUSH
80325: LD_VAR 0 7
80329: ARRAY
80330: PPUSH
80331: CALL_OW 301
80335: PUSH
80336: LD_VAR 0 4
80340: PUSH
80341: LD_VAR 0 7
80345: ARRAY
80346: NOT
80347: OR
80348: IFFALSE 80457
// begin if GetType ( group [ i ] ) = unit_human then
80350: LD_VAR 0 4
80354: PUSH
80355: LD_VAR 0 7
80359: ARRAY
80360: PPUSH
80361: CALL_OW 247
80365: PUSH
80366: LD_INT 1
80368: EQUAL
80369: IFFALSE 80415
// begin to_heal := to_heal diff group [ i ] ;
80371: LD_ADDR_VAR 0 30
80375: PUSH
80376: LD_VAR 0 30
80380: PUSH
80381: LD_VAR 0 4
80385: PUSH
80386: LD_VAR 0 7
80390: ARRAY
80391: DIFF
80392: ST_TO_ADDR
// healers := healers diff group [ i ] ;
80393: LD_ADDR_VAR 0 31
80397: PUSH
80398: LD_VAR 0 31
80402: PUSH
80403: LD_VAR 0 4
80407: PUSH
80408: LD_VAR 0 7
80412: ARRAY
80413: DIFF
80414: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
80415: LD_ADDR_VAR 0 4
80419: PUSH
80420: LD_VAR 0 4
80424: PPUSH
80425: LD_VAR 0 7
80429: PPUSH
80430: CALL_OW 3
80434: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
80435: LD_ADDR_VAR 0 16
80439: PUSH
80440: LD_VAR 0 16
80444: PPUSH
80445: LD_VAR 0 7
80449: PPUSH
80450: CALL_OW 3
80454: ST_TO_ADDR
// continue ;
80455: GO 80295
// end ; if f_repair then
80457: LD_VAR 0 22
80461: IFFALSE 80950
// begin if GetType ( group [ i ] ) = unit_vehicle then
80463: LD_VAR 0 4
80467: PUSH
80468: LD_VAR 0 7
80472: ARRAY
80473: PPUSH
80474: CALL_OW 247
80478: PUSH
80479: LD_INT 2
80481: EQUAL
80482: IFFALSE 80672
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
80484: LD_VAR 0 4
80488: PUSH
80489: LD_VAR 0 7
80493: ARRAY
80494: PPUSH
80495: CALL_OW 256
80499: PUSH
80500: LD_INT 700
80502: LESS
80503: PUSH
80504: LD_VAR 0 4
80508: PUSH
80509: LD_VAR 0 7
80513: ARRAY
80514: PUSH
80515: LD_VAR 0 32
80519: IN
80520: NOT
80521: AND
80522: IFFALSE 80546
// to_repair := to_repair union group [ i ] ;
80524: LD_ADDR_VAR 0 32
80528: PUSH
80529: LD_VAR 0 32
80533: PUSH
80534: LD_VAR 0 4
80538: PUSH
80539: LD_VAR 0 7
80543: ARRAY
80544: UNION
80545: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
80546: LD_VAR 0 4
80550: PUSH
80551: LD_VAR 0 7
80555: ARRAY
80556: PPUSH
80557: CALL_OW 256
80561: PUSH
80562: LD_INT 1000
80564: EQUAL
80565: PUSH
80566: LD_VAR 0 4
80570: PUSH
80571: LD_VAR 0 7
80575: ARRAY
80576: PUSH
80577: LD_VAR 0 32
80581: IN
80582: AND
80583: IFFALSE 80607
// to_repair := to_repair diff group [ i ] ;
80585: LD_ADDR_VAR 0 32
80589: PUSH
80590: LD_VAR 0 32
80594: PUSH
80595: LD_VAR 0 4
80599: PUSH
80600: LD_VAR 0 7
80604: ARRAY
80605: DIFF
80606: ST_TO_ADDR
// if group [ i ] in to_repair then
80607: LD_VAR 0 4
80611: PUSH
80612: LD_VAR 0 7
80616: ARRAY
80617: PUSH
80618: LD_VAR 0 32
80622: IN
80623: IFFALSE 80670
// begin if not IsInArea ( group [ i ] , f_repair ) then
80625: LD_VAR 0 4
80629: PUSH
80630: LD_VAR 0 7
80634: ARRAY
80635: PPUSH
80636: LD_VAR 0 22
80640: PPUSH
80641: CALL_OW 308
80645: NOT
80646: IFFALSE 80668
// ComMoveToArea ( group [ i ] , f_repair ) ;
80648: LD_VAR 0 4
80652: PUSH
80653: LD_VAR 0 7
80657: ARRAY
80658: PPUSH
80659: LD_VAR 0 22
80663: PPUSH
80664: CALL_OW 113
// continue ;
80668: GO 80295
// end ; end else
80670: GO 80950
// if group [ i ] in repairs then
80672: LD_VAR 0 4
80676: PUSH
80677: LD_VAR 0 7
80681: ARRAY
80682: PUSH
80683: LD_VAR 0 33
80687: IN
80688: IFFALSE 80950
// begin if IsInUnit ( group [ i ] ) then
80690: LD_VAR 0 4
80694: PUSH
80695: LD_VAR 0 7
80699: ARRAY
80700: PPUSH
80701: CALL_OW 310
80705: IFFALSE 80773
// begin z := IsInUnit ( group [ i ] ) ;
80707: LD_ADDR_VAR 0 13
80711: PUSH
80712: LD_VAR 0 4
80716: PUSH
80717: LD_VAR 0 7
80721: ARRAY
80722: PPUSH
80723: CALL_OW 310
80727: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
80728: LD_VAR 0 13
80732: PUSH
80733: LD_VAR 0 32
80737: IN
80738: PUSH
80739: LD_VAR 0 13
80743: PPUSH
80744: LD_VAR 0 22
80748: PPUSH
80749: CALL_OW 308
80753: AND
80754: IFFALSE 80771
// ComExitVehicle ( group [ i ] ) ;
80756: LD_VAR 0 4
80760: PUSH
80761: LD_VAR 0 7
80765: ARRAY
80766: PPUSH
80767: CALL_OW 121
// end else
80771: GO 80950
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
80773: LD_ADDR_VAR 0 13
80777: PUSH
80778: LD_VAR 0 4
80782: PPUSH
80783: LD_INT 95
80785: PUSH
80786: LD_VAR 0 22
80790: PUSH
80791: EMPTY
80792: LIST
80793: LIST
80794: PUSH
80795: LD_INT 58
80797: PUSH
80798: EMPTY
80799: LIST
80800: PUSH
80801: EMPTY
80802: LIST
80803: LIST
80804: PPUSH
80805: CALL_OW 72
80809: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
80810: LD_VAR 0 4
80814: PUSH
80815: LD_VAR 0 7
80819: ARRAY
80820: PPUSH
80821: CALL_OW 314
80825: NOT
80826: IFFALSE 80948
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
80828: LD_ADDR_VAR 0 10
80832: PUSH
80833: LD_VAR 0 13
80837: PPUSH
80838: LD_VAR 0 4
80842: PUSH
80843: LD_VAR 0 7
80847: ARRAY
80848: PPUSH
80849: CALL_OW 74
80853: ST_TO_ADDR
// if not x then
80854: LD_VAR 0 10
80858: NOT
80859: IFFALSE 80863
// continue ;
80861: GO 80295
// if GetLives ( x ) < 1000 then
80863: LD_VAR 0 10
80867: PPUSH
80868: CALL_OW 256
80872: PUSH
80873: LD_INT 1000
80875: LESS
80876: IFFALSE 80900
// ComRepairVehicle ( group [ i ] , x ) else
80878: LD_VAR 0 4
80882: PUSH
80883: LD_VAR 0 7
80887: ARRAY
80888: PPUSH
80889: LD_VAR 0 10
80893: PPUSH
80894: CALL_OW 129
80898: GO 80948
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
80900: LD_VAR 0 23
80904: PUSH
80905: LD_VAR 0 4
80909: PUSH
80910: LD_VAR 0 7
80914: ARRAY
80915: PPUSH
80916: CALL_OW 256
80920: PUSH
80921: LD_INT 1000
80923: LESS
80924: AND
80925: NOT
80926: IFFALSE 80948
// ComEnterUnit ( group [ i ] , x ) ;
80928: LD_VAR 0 4
80932: PUSH
80933: LD_VAR 0 7
80937: ARRAY
80938: PPUSH
80939: LD_VAR 0 10
80943: PPUSH
80944: CALL_OW 120
// end ; continue ;
80948: GO 80295
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
80950: LD_VAR 0 23
80954: PUSH
80955: LD_VAR 0 4
80959: PUSH
80960: LD_VAR 0 7
80964: ARRAY
80965: PPUSH
80966: CALL_OW 247
80970: PUSH
80971: LD_INT 1
80973: EQUAL
80974: AND
80975: IFFALSE 81453
// begin if group [ i ] in healers then
80977: LD_VAR 0 4
80981: PUSH
80982: LD_VAR 0 7
80986: ARRAY
80987: PUSH
80988: LD_VAR 0 31
80992: IN
80993: IFFALSE 81266
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
80995: LD_VAR 0 4
80999: PUSH
81000: LD_VAR 0 7
81004: ARRAY
81005: PPUSH
81006: LD_VAR 0 23
81010: PPUSH
81011: CALL_OW 308
81015: NOT
81016: PUSH
81017: LD_VAR 0 4
81021: PUSH
81022: LD_VAR 0 7
81026: ARRAY
81027: PPUSH
81028: CALL_OW 314
81032: NOT
81033: AND
81034: IFFALSE 81058
// ComMoveToArea ( group [ i ] , f_heal ) else
81036: LD_VAR 0 4
81040: PUSH
81041: LD_VAR 0 7
81045: ARRAY
81046: PPUSH
81047: LD_VAR 0 23
81051: PPUSH
81052: CALL_OW 113
81056: GO 81264
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
81058: LD_VAR 0 4
81062: PUSH
81063: LD_VAR 0 7
81067: ARRAY
81068: PPUSH
81069: CALL 79696 0 1
81073: PPUSH
81074: CALL_OW 256
81078: PUSH
81079: LD_INT 1000
81081: EQUAL
81082: IFFALSE 81101
// ComStop ( group [ i ] ) else
81084: LD_VAR 0 4
81088: PUSH
81089: LD_VAR 0 7
81093: ARRAY
81094: PPUSH
81095: CALL_OW 141
81099: GO 81264
// if not HasTask ( group [ i ] ) and to_heal then
81101: LD_VAR 0 4
81105: PUSH
81106: LD_VAR 0 7
81110: ARRAY
81111: PPUSH
81112: CALL_OW 314
81116: NOT
81117: PUSH
81118: LD_VAR 0 30
81122: AND
81123: IFFALSE 81264
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
81125: LD_ADDR_VAR 0 13
81129: PUSH
81130: LD_VAR 0 30
81134: PPUSH
81135: LD_INT 3
81137: PUSH
81138: LD_INT 54
81140: PUSH
81141: EMPTY
81142: LIST
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: PPUSH
81148: CALL_OW 72
81152: PPUSH
81153: LD_VAR 0 4
81157: PUSH
81158: LD_VAR 0 7
81162: ARRAY
81163: PPUSH
81164: CALL_OW 74
81168: ST_TO_ADDR
// if z then
81169: LD_VAR 0 13
81173: IFFALSE 81264
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
81175: LD_INT 91
81177: PUSH
81178: LD_VAR 0 13
81182: PUSH
81183: LD_INT 10
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: LIST
81190: PUSH
81191: LD_INT 81
81193: PUSH
81194: LD_VAR 0 13
81198: PPUSH
81199: CALL_OW 255
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PUSH
81208: EMPTY
81209: LIST
81210: LIST
81211: PPUSH
81212: CALL_OW 69
81216: PUSH
81217: LD_INT 0
81219: EQUAL
81220: IFFALSE 81244
// ComHeal ( group [ i ] , z ) else
81222: LD_VAR 0 4
81226: PUSH
81227: LD_VAR 0 7
81231: ARRAY
81232: PPUSH
81233: LD_VAR 0 13
81237: PPUSH
81238: CALL_OW 128
81242: GO 81264
// ComMoveToArea ( group [ i ] , f_heal ) ;
81244: LD_VAR 0 4
81248: PUSH
81249: LD_VAR 0 7
81253: ARRAY
81254: PPUSH
81255: LD_VAR 0 23
81259: PPUSH
81260: CALL_OW 113
// end ; continue ;
81264: GO 80295
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
81266: LD_VAR 0 4
81270: PUSH
81271: LD_VAR 0 7
81275: ARRAY
81276: PPUSH
81277: CALL_OW 256
81281: PUSH
81282: LD_INT 700
81284: LESS
81285: PUSH
81286: LD_VAR 0 4
81290: PUSH
81291: LD_VAR 0 7
81295: ARRAY
81296: PUSH
81297: LD_VAR 0 30
81301: IN
81302: NOT
81303: AND
81304: IFFALSE 81328
// to_heal := to_heal union group [ i ] ;
81306: LD_ADDR_VAR 0 30
81310: PUSH
81311: LD_VAR 0 30
81315: PUSH
81316: LD_VAR 0 4
81320: PUSH
81321: LD_VAR 0 7
81325: ARRAY
81326: UNION
81327: ST_TO_ADDR
// if group [ i ] in to_heal then
81328: LD_VAR 0 4
81332: PUSH
81333: LD_VAR 0 7
81337: ARRAY
81338: PUSH
81339: LD_VAR 0 30
81343: IN
81344: IFFALSE 81453
// begin if GetLives ( group [ i ] ) = 1000 then
81346: LD_VAR 0 4
81350: PUSH
81351: LD_VAR 0 7
81355: ARRAY
81356: PPUSH
81357: CALL_OW 256
81361: PUSH
81362: LD_INT 1000
81364: EQUAL
81365: IFFALSE 81391
// to_heal := to_heal diff group [ i ] else
81367: LD_ADDR_VAR 0 30
81371: PUSH
81372: LD_VAR 0 30
81376: PUSH
81377: LD_VAR 0 4
81381: PUSH
81382: LD_VAR 0 7
81386: ARRAY
81387: DIFF
81388: ST_TO_ADDR
81389: GO 81453
// begin if not IsInArea ( group [ i ] , to_heal ) then
81391: LD_VAR 0 4
81395: PUSH
81396: LD_VAR 0 7
81400: ARRAY
81401: PPUSH
81402: LD_VAR 0 30
81406: PPUSH
81407: CALL_OW 308
81411: NOT
81412: IFFALSE 81436
// ComMoveToArea ( group [ i ] , f_heal ) else
81414: LD_VAR 0 4
81418: PUSH
81419: LD_VAR 0 7
81423: ARRAY
81424: PPUSH
81425: LD_VAR 0 23
81429: PPUSH
81430: CALL_OW 113
81434: GO 81451
// ComHold ( group [ i ] ) ;
81436: LD_VAR 0 4
81440: PUSH
81441: LD_VAR 0 7
81445: ARRAY
81446: PPUSH
81447: CALL_OW 140
// continue ;
81451: GO 80295
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
81453: LD_VAR 0 4
81457: PUSH
81458: LD_VAR 0 7
81462: ARRAY
81463: PPUSH
81464: LD_INT 10
81466: PPUSH
81467: CALL 78093 0 2
81471: NOT
81472: PUSH
81473: LD_VAR 0 16
81477: PUSH
81478: LD_VAR 0 7
81482: ARRAY
81483: PUSH
81484: EMPTY
81485: EQUAL
81486: NOT
81487: AND
81488: IFFALSE 81754
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
81490: LD_VAR 0 4
81494: PUSH
81495: LD_VAR 0 7
81499: ARRAY
81500: PPUSH
81501: CALL_OW 262
81505: PUSH
81506: LD_INT 1
81508: PUSH
81509: LD_INT 2
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: IN
81516: IFFALSE 81557
// if GetFuel ( group [ i ] ) < 10 then
81518: LD_VAR 0 4
81522: PUSH
81523: LD_VAR 0 7
81527: ARRAY
81528: PPUSH
81529: CALL_OW 261
81533: PUSH
81534: LD_INT 10
81536: LESS
81537: IFFALSE 81557
// SetFuel ( group [ i ] , 12 ) ;
81539: LD_VAR 0 4
81543: PUSH
81544: LD_VAR 0 7
81548: ARRAY
81549: PPUSH
81550: LD_INT 12
81552: PPUSH
81553: CALL_OW 240
// if units_path [ i ] then
81557: LD_VAR 0 16
81561: PUSH
81562: LD_VAR 0 7
81566: ARRAY
81567: IFFALSE 81752
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
81569: LD_VAR 0 4
81573: PUSH
81574: LD_VAR 0 7
81578: ARRAY
81579: PPUSH
81580: LD_VAR 0 16
81584: PUSH
81585: LD_VAR 0 7
81589: ARRAY
81590: PUSH
81591: LD_INT 1
81593: ARRAY
81594: PUSH
81595: LD_INT 1
81597: ARRAY
81598: PPUSH
81599: LD_VAR 0 16
81603: PUSH
81604: LD_VAR 0 7
81608: ARRAY
81609: PUSH
81610: LD_INT 1
81612: ARRAY
81613: PUSH
81614: LD_INT 2
81616: ARRAY
81617: PPUSH
81618: CALL_OW 297
81622: PUSH
81623: LD_INT 6
81625: GREATER
81626: IFFALSE 81701
// begin if not HasTask ( group [ i ] ) then
81628: LD_VAR 0 4
81632: PUSH
81633: LD_VAR 0 7
81637: ARRAY
81638: PPUSH
81639: CALL_OW 314
81643: NOT
81644: IFFALSE 81699
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
81646: LD_VAR 0 4
81650: PUSH
81651: LD_VAR 0 7
81655: ARRAY
81656: PPUSH
81657: LD_VAR 0 16
81661: PUSH
81662: LD_VAR 0 7
81666: ARRAY
81667: PUSH
81668: LD_INT 1
81670: ARRAY
81671: PUSH
81672: LD_INT 1
81674: ARRAY
81675: PPUSH
81676: LD_VAR 0 16
81680: PUSH
81681: LD_VAR 0 7
81685: ARRAY
81686: PUSH
81687: LD_INT 1
81689: ARRAY
81690: PUSH
81691: LD_INT 2
81693: ARRAY
81694: PPUSH
81695: CALL_OW 114
// end else
81699: GO 81752
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
81701: LD_ADDR_VAR 0 15
81705: PUSH
81706: LD_VAR 0 16
81710: PUSH
81711: LD_VAR 0 7
81715: ARRAY
81716: PPUSH
81717: LD_INT 1
81719: PPUSH
81720: CALL_OW 3
81724: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
81725: LD_ADDR_VAR 0 16
81729: PUSH
81730: LD_VAR 0 16
81734: PPUSH
81735: LD_VAR 0 7
81739: PPUSH
81740: LD_VAR 0 15
81744: PPUSH
81745: CALL_OW 1
81749: ST_TO_ADDR
// continue ;
81750: GO 80295
// end ; end ; end else
81752: GO 84390
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
81754: LD_ADDR_VAR 0 14
81758: PUSH
81759: LD_INT 81
81761: PUSH
81762: LD_VAR 0 4
81766: PUSH
81767: LD_VAR 0 7
81771: ARRAY
81772: PPUSH
81773: CALL_OW 255
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PPUSH
81782: CALL_OW 69
81786: ST_TO_ADDR
// if not tmp then
81787: LD_VAR 0 14
81791: NOT
81792: IFFALSE 81796
// continue ;
81794: GO 80295
// if f_ignore_area then
81796: LD_VAR 0 17
81800: IFFALSE 81888
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
81802: LD_ADDR_VAR 0 15
81806: PUSH
81807: LD_VAR 0 14
81811: PPUSH
81812: LD_INT 3
81814: PUSH
81815: LD_INT 92
81817: PUSH
81818: LD_VAR 0 17
81822: PUSH
81823: LD_INT 1
81825: ARRAY
81826: PUSH
81827: LD_VAR 0 17
81831: PUSH
81832: LD_INT 2
81834: ARRAY
81835: PUSH
81836: LD_VAR 0 17
81840: PUSH
81841: LD_INT 3
81843: ARRAY
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: PUSH
81851: EMPTY
81852: LIST
81853: LIST
81854: PPUSH
81855: CALL_OW 72
81859: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81860: LD_VAR 0 14
81864: PUSH
81865: LD_VAR 0 15
81869: DIFF
81870: IFFALSE 81888
// tmp := tmp diff tmp2 ;
81872: LD_ADDR_VAR 0 14
81876: PUSH
81877: LD_VAR 0 14
81881: PUSH
81882: LD_VAR 0 15
81886: DIFF
81887: ST_TO_ADDR
// end ; if not f_murder then
81888: LD_VAR 0 20
81892: NOT
81893: IFFALSE 81951
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
81895: LD_ADDR_VAR 0 15
81899: PUSH
81900: LD_VAR 0 14
81904: PPUSH
81905: LD_INT 3
81907: PUSH
81908: LD_INT 50
81910: PUSH
81911: EMPTY
81912: LIST
81913: PUSH
81914: EMPTY
81915: LIST
81916: LIST
81917: PPUSH
81918: CALL_OW 72
81922: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81923: LD_VAR 0 14
81927: PUSH
81928: LD_VAR 0 15
81932: DIFF
81933: IFFALSE 81951
// tmp := tmp diff tmp2 ;
81935: LD_ADDR_VAR 0 14
81939: PUSH
81940: LD_VAR 0 14
81944: PUSH
81945: LD_VAR 0 15
81949: DIFF
81950: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
81951: LD_ADDR_VAR 0 14
81955: PUSH
81956: LD_VAR 0 4
81960: PUSH
81961: LD_VAR 0 7
81965: ARRAY
81966: PPUSH
81967: LD_VAR 0 14
81971: PPUSH
81972: LD_INT 1
81974: PPUSH
81975: LD_INT 1
81977: PPUSH
81978: CALL 51760 0 4
81982: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
81983: LD_VAR 0 4
81987: PUSH
81988: LD_VAR 0 7
81992: ARRAY
81993: PPUSH
81994: CALL_OW 257
81998: PUSH
81999: LD_INT 1
82001: EQUAL
82002: IFFALSE 82450
// begin if WantPlant ( group [ i ] ) then
82004: LD_VAR 0 4
82008: PUSH
82009: LD_VAR 0 7
82013: ARRAY
82014: PPUSH
82015: CALL 51261 0 1
82019: IFFALSE 82023
// continue ;
82021: GO 80295
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
82023: LD_VAR 0 18
82027: PUSH
82028: LD_VAR 0 4
82032: PUSH
82033: LD_VAR 0 7
82037: ARRAY
82038: PPUSH
82039: CALL_OW 310
82043: NOT
82044: AND
82045: PUSH
82046: LD_VAR 0 14
82050: PUSH
82051: LD_INT 1
82053: ARRAY
82054: PUSH
82055: LD_VAR 0 14
82059: PPUSH
82060: LD_INT 21
82062: PUSH
82063: LD_INT 2
82065: PUSH
82066: EMPTY
82067: LIST
82068: LIST
82069: PUSH
82070: LD_INT 58
82072: PUSH
82073: EMPTY
82074: LIST
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: PPUSH
82080: CALL_OW 72
82084: IN
82085: AND
82086: IFFALSE 82122
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
82088: LD_VAR 0 4
82092: PUSH
82093: LD_VAR 0 7
82097: ARRAY
82098: PPUSH
82099: LD_VAR 0 14
82103: PUSH
82104: LD_INT 1
82106: ARRAY
82107: PPUSH
82108: CALL_OW 120
// attacking := true ;
82112: LD_ADDR_VAR 0 29
82116: PUSH
82117: LD_INT 1
82119: ST_TO_ADDR
// continue ;
82120: GO 80295
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
82122: LD_VAR 0 26
82126: PUSH
82127: LD_VAR 0 4
82131: PUSH
82132: LD_VAR 0 7
82136: ARRAY
82137: PPUSH
82138: CALL_OW 257
82142: PUSH
82143: LD_INT 1
82145: EQUAL
82146: AND
82147: PUSH
82148: LD_VAR 0 4
82152: PUSH
82153: LD_VAR 0 7
82157: ARRAY
82158: PPUSH
82159: CALL_OW 256
82163: PUSH
82164: LD_INT 800
82166: LESS
82167: AND
82168: PUSH
82169: LD_VAR 0 4
82173: PUSH
82174: LD_VAR 0 7
82178: ARRAY
82179: PPUSH
82180: CALL_OW 318
82184: NOT
82185: AND
82186: IFFALSE 82203
// ComCrawl ( group [ i ] ) ;
82188: LD_VAR 0 4
82192: PUSH
82193: LD_VAR 0 7
82197: ARRAY
82198: PPUSH
82199: CALL_OW 137
// if f_mines then
82203: LD_VAR 0 21
82207: IFFALSE 82450
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
82209: LD_VAR 0 14
82213: PUSH
82214: LD_INT 1
82216: ARRAY
82217: PPUSH
82218: CALL_OW 247
82222: PUSH
82223: LD_INT 3
82225: EQUAL
82226: PUSH
82227: LD_VAR 0 14
82231: PUSH
82232: LD_INT 1
82234: ARRAY
82235: PUSH
82236: LD_VAR 0 27
82240: IN
82241: NOT
82242: AND
82243: IFFALSE 82450
// begin x := GetX ( tmp [ 1 ] ) ;
82245: LD_ADDR_VAR 0 10
82249: PUSH
82250: LD_VAR 0 14
82254: PUSH
82255: LD_INT 1
82257: ARRAY
82258: PPUSH
82259: CALL_OW 250
82263: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
82264: LD_ADDR_VAR 0 11
82268: PUSH
82269: LD_VAR 0 14
82273: PUSH
82274: LD_INT 1
82276: ARRAY
82277: PPUSH
82278: CALL_OW 251
82282: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
82283: LD_ADDR_VAR 0 12
82287: PUSH
82288: LD_VAR 0 4
82292: PUSH
82293: LD_VAR 0 7
82297: ARRAY
82298: PPUSH
82299: CALL 78178 0 1
82303: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
82304: LD_VAR 0 4
82308: PUSH
82309: LD_VAR 0 7
82313: ARRAY
82314: PPUSH
82315: LD_VAR 0 10
82319: PPUSH
82320: LD_VAR 0 11
82324: PPUSH
82325: LD_VAR 0 14
82329: PUSH
82330: LD_INT 1
82332: ARRAY
82333: PPUSH
82334: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
82338: LD_VAR 0 4
82342: PUSH
82343: LD_VAR 0 7
82347: ARRAY
82348: PPUSH
82349: LD_VAR 0 10
82353: PPUSH
82354: LD_VAR 0 12
82358: PPUSH
82359: LD_INT 7
82361: PPUSH
82362: CALL_OW 272
82366: PPUSH
82367: LD_VAR 0 11
82371: PPUSH
82372: LD_VAR 0 12
82376: PPUSH
82377: LD_INT 7
82379: PPUSH
82380: CALL_OW 273
82384: PPUSH
82385: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
82389: LD_VAR 0 4
82393: PUSH
82394: LD_VAR 0 7
82398: ARRAY
82399: PPUSH
82400: LD_INT 71
82402: PPUSH
82403: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
82407: LD_ADDR_VAR 0 27
82411: PUSH
82412: LD_VAR 0 27
82416: PPUSH
82417: LD_VAR 0 27
82421: PUSH
82422: LD_INT 1
82424: PLUS
82425: PPUSH
82426: LD_VAR 0 14
82430: PUSH
82431: LD_INT 1
82433: ARRAY
82434: PPUSH
82435: CALL_OW 1
82439: ST_TO_ADDR
// attacking := true ;
82440: LD_ADDR_VAR 0 29
82444: PUSH
82445: LD_INT 1
82447: ST_TO_ADDR
// continue ;
82448: GO 80295
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
82450: LD_VAR 0 4
82454: PUSH
82455: LD_VAR 0 7
82459: ARRAY
82460: PPUSH
82461: CALL_OW 257
82465: PUSH
82466: LD_INT 17
82468: EQUAL
82469: PUSH
82470: LD_VAR 0 4
82474: PUSH
82475: LD_VAR 0 7
82479: ARRAY
82480: PPUSH
82481: CALL_OW 110
82485: PUSH
82486: LD_INT 71
82488: EQUAL
82489: NOT
82490: AND
82491: IFFALSE 82637
// begin attacking := false ;
82493: LD_ADDR_VAR 0 29
82497: PUSH
82498: LD_INT 0
82500: ST_TO_ADDR
// k := 5 ;
82501: LD_ADDR_VAR 0 9
82505: PUSH
82506: LD_INT 5
82508: ST_TO_ADDR
// if tmp < k then
82509: LD_VAR 0 14
82513: PUSH
82514: LD_VAR 0 9
82518: LESS
82519: IFFALSE 82531
// k := tmp ;
82521: LD_ADDR_VAR 0 9
82525: PUSH
82526: LD_VAR 0 14
82530: ST_TO_ADDR
// for j = 1 to k do
82531: LD_ADDR_VAR 0 8
82535: PUSH
82536: DOUBLE
82537: LD_INT 1
82539: DEC
82540: ST_TO_ADDR
82541: LD_VAR 0 9
82545: PUSH
82546: FOR_TO
82547: IFFALSE 82635
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
82549: LD_VAR 0 14
82553: PUSH
82554: LD_VAR 0 8
82558: ARRAY
82559: PUSH
82560: LD_VAR 0 14
82564: PPUSH
82565: LD_INT 58
82567: PUSH
82568: EMPTY
82569: LIST
82570: PPUSH
82571: CALL_OW 72
82575: IN
82576: NOT
82577: IFFALSE 82633
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
82579: LD_VAR 0 4
82583: PUSH
82584: LD_VAR 0 7
82588: ARRAY
82589: PPUSH
82590: LD_VAR 0 14
82594: PUSH
82595: LD_VAR 0 8
82599: ARRAY
82600: PPUSH
82601: CALL_OW 115
// attacking := true ;
82605: LD_ADDR_VAR 0 29
82609: PUSH
82610: LD_INT 1
82612: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
82613: LD_VAR 0 4
82617: PUSH
82618: LD_VAR 0 7
82622: ARRAY
82623: PPUSH
82624: LD_INT 71
82626: PPUSH
82627: CALL_OW 109
// continue ;
82631: GO 82546
// end ; end ;
82633: GO 82546
82635: POP
82636: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
82637: LD_VAR 0 4
82641: PUSH
82642: LD_VAR 0 7
82646: ARRAY
82647: PPUSH
82648: CALL_OW 257
82652: PUSH
82653: LD_INT 8
82655: EQUAL
82656: PUSH
82657: LD_VAR 0 4
82661: PUSH
82662: LD_VAR 0 7
82666: ARRAY
82667: PPUSH
82668: CALL_OW 264
82672: PUSH
82673: LD_INT 28
82675: PUSH
82676: LD_INT 45
82678: PUSH
82679: LD_INT 7
82681: PUSH
82682: LD_INT 47
82684: PUSH
82685: EMPTY
82686: LIST
82687: LIST
82688: LIST
82689: LIST
82690: IN
82691: OR
82692: IFFALSE 82922
// begin attacking := false ;
82694: LD_ADDR_VAR 0 29
82698: PUSH
82699: LD_INT 0
82701: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
82702: LD_VAR 0 14
82706: PUSH
82707: LD_INT 1
82709: ARRAY
82710: PPUSH
82711: CALL_OW 266
82715: PUSH
82716: LD_INT 32
82718: PUSH
82719: LD_INT 31
82721: PUSH
82722: LD_INT 33
82724: PUSH
82725: LD_INT 4
82727: PUSH
82728: LD_INT 5
82730: PUSH
82731: EMPTY
82732: LIST
82733: LIST
82734: LIST
82735: LIST
82736: LIST
82737: IN
82738: IFFALSE 82922
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
82740: LD_ADDR_VAR 0 9
82744: PUSH
82745: LD_VAR 0 14
82749: PUSH
82750: LD_INT 1
82752: ARRAY
82753: PPUSH
82754: CALL_OW 266
82758: PPUSH
82759: LD_VAR 0 14
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: PPUSH
82768: CALL_OW 250
82772: PPUSH
82773: LD_VAR 0 14
82777: PUSH
82778: LD_INT 1
82780: ARRAY
82781: PPUSH
82782: CALL_OW 251
82786: PPUSH
82787: LD_VAR 0 14
82791: PUSH
82792: LD_INT 1
82794: ARRAY
82795: PPUSH
82796: CALL_OW 254
82800: PPUSH
82801: LD_VAR 0 14
82805: PUSH
82806: LD_INT 1
82808: ARRAY
82809: PPUSH
82810: CALL_OW 248
82814: PPUSH
82815: LD_INT 0
82817: PPUSH
82818: CALL 59554 0 6
82822: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
82823: LD_ADDR_VAR 0 8
82827: PUSH
82828: LD_VAR 0 4
82832: PUSH
82833: LD_VAR 0 7
82837: ARRAY
82838: PPUSH
82839: LD_VAR 0 9
82843: PPUSH
82844: CALL 78241 0 2
82848: ST_TO_ADDR
// if j then
82849: LD_VAR 0 8
82853: IFFALSE 82922
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
82855: LD_VAR 0 8
82859: PUSH
82860: LD_INT 1
82862: ARRAY
82863: PPUSH
82864: LD_VAR 0 8
82868: PUSH
82869: LD_INT 2
82871: ARRAY
82872: PPUSH
82873: CALL_OW 488
82877: IFFALSE 82922
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
82879: LD_VAR 0 4
82883: PUSH
82884: LD_VAR 0 7
82888: ARRAY
82889: PPUSH
82890: LD_VAR 0 8
82894: PUSH
82895: LD_INT 1
82897: ARRAY
82898: PPUSH
82899: LD_VAR 0 8
82903: PUSH
82904: LD_INT 2
82906: ARRAY
82907: PPUSH
82908: CALL_OW 116
// attacking := true ;
82912: LD_ADDR_VAR 0 29
82916: PUSH
82917: LD_INT 1
82919: ST_TO_ADDR
// continue ;
82920: GO 80295
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
82922: LD_VAR 0 4
82926: PUSH
82927: LD_VAR 0 7
82931: ARRAY
82932: PPUSH
82933: CALL_OW 265
82937: PUSH
82938: LD_INT 11
82940: EQUAL
82941: IFFALSE 83219
// begin k := 10 ;
82943: LD_ADDR_VAR 0 9
82947: PUSH
82948: LD_INT 10
82950: ST_TO_ADDR
// x := 0 ;
82951: LD_ADDR_VAR 0 10
82955: PUSH
82956: LD_INT 0
82958: ST_TO_ADDR
// if tmp < k then
82959: LD_VAR 0 14
82963: PUSH
82964: LD_VAR 0 9
82968: LESS
82969: IFFALSE 82981
// k := tmp ;
82971: LD_ADDR_VAR 0 9
82975: PUSH
82976: LD_VAR 0 14
82980: ST_TO_ADDR
// for j = k downto 1 do
82981: LD_ADDR_VAR 0 8
82985: PUSH
82986: DOUBLE
82987: LD_VAR 0 9
82991: INC
82992: ST_TO_ADDR
82993: LD_INT 1
82995: PUSH
82996: FOR_DOWNTO
82997: IFFALSE 83072
// begin if GetType ( tmp [ j ] ) = unit_human then
82999: LD_VAR 0 14
83003: PUSH
83004: LD_VAR 0 8
83008: ARRAY
83009: PPUSH
83010: CALL_OW 247
83014: PUSH
83015: LD_INT 1
83017: EQUAL
83018: IFFALSE 83070
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
83020: LD_VAR 0 4
83024: PUSH
83025: LD_VAR 0 7
83029: ARRAY
83030: PPUSH
83031: LD_VAR 0 14
83035: PUSH
83036: LD_VAR 0 8
83040: ARRAY
83041: PPUSH
83042: CALL 78512 0 2
// x := tmp [ j ] ;
83046: LD_ADDR_VAR 0 10
83050: PUSH
83051: LD_VAR 0 14
83055: PUSH
83056: LD_VAR 0 8
83060: ARRAY
83061: ST_TO_ADDR
// attacking := true ;
83062: LD_ADDR_VAR 0 29
83066: PUSH
83067: LD_INT 1
83069: ST_TO_ADDR
// end ; end ;
83070: GO 82996
83072: POP
83073: POP
// if not x then
83074: LD_VAR 0 10
83078: NOT
83079: IFFALSE 83219
// begin attacking := true ;
83081: LD_ADDR_VAR 0 29
83085: PUSH
83086: LD_INT 1
83088: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
83089: LD_VAR 0 4
83093: PUSH
83094: LD_VAR 0 7
83098: ARRAY
83099: PPUSH
83100: CALL_OW 250
83104: PPUSH
83105: LD_VAR 0 4
83109: PUSH
83110: LD_VAR 0 7
83114: ARRAY
83115: PPUSH
83116: CALL_OW 251
83120: PPUSH
83121: CALL_OW 546
83125: PUSH
83126: LD_INT 2
83128: ARRAY
83129: PUSH
83130: LD_VAR 0 14
83134: PUSH
83135: LD_INT 1
83137: ARRAY
83138: PPUSH
83139: CALL_OW 250
83143: PPUSH
83144: LD_VAR 0 14
83148: PUSH
83149: LD_INT 1
83151: ARRAY
83152: PPUSH
83153: CALL_OW 251
83157: PPUSH
83158: CALL_OW 546
83162: PUSH
83163: LD_INT 2
83165: ARRAY
83166: EQUAL
83167: IFFALSE 83195
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
83169: LD_VAR 0 4
83173: PUSH
83174: LD_VAR 0 7
83178: ARRAY
83179: PPUSH
83180: LD_VAR 0 14
83184: PUSH
83185: LD_INT 1
83187: ARRAY
83188: PPUSH
83189: CALL 78512 0 2
83193: GO 83219
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83195: LD_VAR 0 4
83199: PUSH
83200: LD_VAR 0 7
83204: ARRAY
83205: PPUSH
83206: LD_VAR 0 14
83210: PUSH
83211: LD_INT 1
83213: ARRAY
83214: PPUSH
83215: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
83219: LD_VAR 0 4
83223: PUSH
83224: LD_VAR 0 7
83228: ARRAY
83229: PPUSH
83230: CALL_OW 264
83234: PUSH
83235: LD_INT 29
83237: EQUAL
83238: IFFALSE 83604
// begin if WantsToAttack ( group [ i ] ) in bombed then
83240: LD_VAR 0 4
83244: PUSH
83245: LD_VAR 0 7
83249: ARRAY
83250: PPUSH
83251: CALL_OW 319
83255: PUSH
83256: LD_VAR 0 28
83260: IN
83261: IFFALSE 83265
// continue ;
83263: GO 80295
// k := 8 ;
83265: LD_ADDR_VAR 0 9
83269: PUSH
83270: LD_INT 8
83272: ST_TO_ADDR
// x := 0 ;
83273: LD_ADDR_VAR 0 10
83277: PUSH
83278: LD_INT 0
83280: ST_TO_ADDR
// if tmp < k then
83281: LD_VAR 0 14
83285: PUSH
83286: LD_VAR 0 9
83290: LESS
83291: IFFALSE 83303
// k := tmp ;
83293: LD_ADDR_VAR 0 9
83297: PUSH
83298: LD_VAR 0 14
83302: ST_TO_ADDR
// for j = 1 to k do
83303: LD_ADDR_VAR 0 8
83307: PUSH
83308: DOUBLE
83309: LD_INT 1
83311: DEC
83312: ST_TO_ADDR
83313: LD_VAR 0 9
83317: PUSH
83318: FOR_TO
83319: IFFALSE 83451
// begin if GetType ( tmp [ j ] ) = unit_building then
83321: LD_VAR 0 14
83325: PUSH
83326: LD_VAR 0 8
83330: ARRAY
83331: PPUSH
83332: CALL_OW 247
83336: PUSH
83337: LD_INT 3
83339: EQUAL
83340: IFFALSE 83449
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
83342: LD_VAR 0 14
83346: PUSH
83347: LD_VAR 0 8
83351: ARRAY
83352: PUSH
83353: LD_VAR 0 28
83357: IN
83358: NOT
83359: PUSH
83360: LD_VAR 0 14
83364: PUSH
83365: LD_VAR 0 8
83369: ARRAY
83370: PPUSH
83371: CALL_OW 313
83375: AND
83376: IFFALSE 83449
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83378: LD_VAR 0 4
83382: PUSH
83383: LD_VAR 0 7
83387: ARRAY
83388: PPUSH
83389: LD_VAR 0 14
83393: PUSH
83394: LD_VAR 0 8
83398: ARRAY
83399: PPUSH
83400: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
83404: LD_ADDR_VAR 0 28
83408: PUSH
83409: LD_VAR 0 28
83413: PPUSH
83414: LD_VAR 0 28
83418: PUSH
83419: LD_INT 1
83421: PLUS
83422: PPUSH
83423: LD_VAR 0 14
83427: PUSH
83428: LD_VAR 0 8
83432: ARRAY
83433: PPUSH
83434: CALL_OW 1
83438: ST_TO_ADDR
// attacking := true ;
83439: LD_ADDR_VAR 0 29
83443: PUSH
83444: LD_INT 1
83446: ST_TO_ADDR
// break ;
83447: GO 83451
// end ; end ;
83449: GO 83318
83451: POP
83452: POP
// if not attacking and f_attack_depot then
83453: LD_VAR 0 29
83457: NOT
83458: PUSH
83459: LD_VAR 0 25
83463: AND
83464: IFFALSE 83559
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83466: LD_ADDR_VAR 0 13
83470: PUSH
83471: LD_VAR 0 14
83475: PPUSH
83476: LD_INT 2
83478: PUSH
83479: LD_INT 30
83481: PUSH
83482: LD_INT 0
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: LD_INT 30
83491: PUSH
83492: LD_INT 1
83494: PUSH
83495: EMPTY
83496: LIST
83497: LIST
83498: PUSH
83499: EMPTY
83500: LIST
83501: LIST
83502: LIST
83503: PPUSH
83504: CALL_OW 72
83508: ST_TO_ADDR
// if z then
83509: LD_VAR 0 13
83513: IFFALSE 83559
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
83515: LD_VAR 0 4
83519: PUSH
83520: LD_VAR 0 7
83524: ARRAY
83525: PPUSH
83526: LD_VAR 0 13
83530: PPUSH
83531: LD_VAR 0 4
83535: PUSH
83536: LD_VAR 0 7
83540: ARRAY
83541: PPUSH
83542: CALL_OW 74
83546: PPUSH
83547: CALL_OW 115
// attacking := true ;
83551: LD_ADDR_VAR 0 29
83555: PUSH
83556: LD_INT 1
83558: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
83559: LD_VAR 0 4
83563: PUSH
83564: LD_VAR 0 7
83568: ARRAY
83569: PPUSH
83570: CALL_OW 256
83574: PUSH
83575: LD_INT 500
83577: LESS
83578: IFFALSE 83604
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83580: LD_VAR 0 4
83584: PUSH
83585: LD_VAR 0 7
83589: ARRAY
83590: PPUSH
83591: LD_VAR 0 14
83595: PUSH
83596: LD_INT 1
83598: ARRAY
83599: PPUSH
83600: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
83604: LD_VAR 0 4
83608: PUSH
83609: LD_VAR 0 7
83613: ARRAY
83614: PPUSH
83615: CALL_OW 264
83619: PUSH
83620: LD_INT 49
83622: EQUAL
83623: IFFALSE 83744
// begin if not HasTask ( group [ i ] ) then
83625: LD_VAR 0 4
83629: PUSH
83630: LD_VAR 0 7
83634: ARRAY
83635: PPUSH
83636: CALL_OW 314
83640: NOT
83641: IFFALSE 83744
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
83643: LD_ADDR_VAR 0 9
83647: PUSH
83648: LD_INT 81
83650: PUSH
83651: LD_VAR 0 4
83655: PUSH
83656: LD_VAR 0 7
83660: ARRAY
83661: PPUSH
83662: CALL_OW 255
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PPUSH
83671: CALL_OW 69
83675: PPUSH
83676: LD_VAR 0 4
83680: PUSH
83681: LD_VAR 0 7
83685: ARRAY
83686: PPUSH
83687: CALL_OW 74
83691: ST_TO_ADDR
// if k then
83692: LD_VAR 0 9
83696: IFFALSE 83744
// if GetDistUnits ( group [ i ] , k ) > 10 then
83698: LD_VAR 0 4
83702: PUSH
83703: LD_VAR 0 7
83707: ARRAY
83708: PPUSH
83709: LD_VAR 0 9
83713: PPUSH
83714: CALL_OW 296
83718: PUSH
83719: LD_INT 10
83721: GREATER
83722: IFFALSE 83744
// ComMoveUnit ( group [ i ] , k ) ;
83724: LD_VAR 0 4
83728: PUSH
83729: LD_VAR 0 7
83733: ARRAY
83734: PPUSH
83735: LD_VAR 0 9
83739: PPUSH
83740: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83744: LD_VAR 0 4
83748: PUSH
83749: LD_VAR 0 7
83753: ARRAY
83754: PPUSH
83755: CALL_OW 256
83759: PUSH
83760: LD_INT 250
83762: LESS
83763: PUSH
83764: LD_VAR 0 4
83768: PUSH
83769: LD_VAR 0 7
83773: ARRAY
83774: PUSH
83775: LD_INT 21
83777: PUSH
83778: LD_INT 2
83780: PUSH
83781: EMPTY
83782: LIST
83783: LIST
83784: PUSH
83785: LD_INT 23
83787: PUSH
83788: LD_INT 2
83790: PUSH
83791: EMPTY
83792: LIST
83793: LIST
83794: PUSH
83795: EMPTY
83796: LIST
83797: LIST
83798: PPUSH
83799: CALL_OW 69
83803: IN
83804: AND
83805: IFFALSE 83930
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
83807: LD_ADDR_VAR 0 9
83811: PUSH
83812: LD_OWVAR 3
83816: PUSH
83817: LD_VAR 0 4
83821: PUSH
83822: LD_VAR 0 7
83826: ARRAY
83827: DIFF
83828: PPUSH
83829: LD_VAR 0 4
83833: PUSH
83834: LD_VAR 0 7
83838: ARRAY
83839: PPUSH
83840: CALL_OW 74
83844: ST_TO_ADDR
// if not k then
83845: LD_VAR 0 9
83849: NOT
83850: IFFALSE 83854
// continue ;
83852: GO 80295
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
83854: LD_VAR 0 9
83858: PUSH
83859: LD_INT 81
83861: PUSH
83862: LD_VAR 0 4
83866: PUSH
83867: LD_VAR 0 7
83871: ARRAY
83872: PPUSH
83873: CALL_OW 255
83877: PUSH
83878: EMPTY
83879: LIST
83880: LIST
83881: PPUSH
83882: CALL_OW 69
83886: IN
83887: PUSH
83888: LD_VAR 0 9
83892: PPUSH
83893: LD_VAR 0 4
83897: PUSH
83898: LD_VAR 0 7
83902: ARRAY
83903: PPUSH
83904: CALL_OW 296
83908: PUSH
83909: LD_INT 5
83911: LESS
83912: AND
83913: IFFALSE 83930
// ComAutodestruct ( group [ i ] ) ;
83915: LD_VAR 0 4
83919: PUSH
83920: LD_VAR 0 7
83924: ARRAY
83925: PPUSH
83926: CALL 78410 0 1
// end ; if f_attack_depot then
83930: LD_VAR 0 25
83934: IFFALSE 84046
// begin k := 6 ;
83936: LD_ADDR_VAR 0 9
83940: PUSH
83941: LD_INT 6
83943: ST_TO_ADDR
// if tmp < k then
83944: LD_VAR 0 14
83948: PUSH
83949: LD_VAR 0 9
83953: LESS
83954: IFFALSE 83966
// k := tmp ;
83956: LD_ADDR_VAR 0 9
83960: PUSH
83961: LD_VAR 0 14
83965: ST_TO_ADDR
// for j = 1 to k do
83966: LD_ADDR_VAR 0 8
83970: PUSH
83971: DOUBLE
83972: LD_INT 1
83974: DEC
83975: ST_TO_ADDR
83976: LD_VAR 0 9
83980: PUSH
83981: FOR_TO
83982: IFFALSE 84044
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
83984: LD_VAR 0 8
83988: PPUSH
83989: CALL_OW 266
83993: PUSH
83994: LD_INT 0
83996: PUSH
83997: LD_INT 1
83999: PUSH
84000: EMPTY
84001: LIST
84002: LIST
84003: IN
84004: IFFALSE 84042
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84006: LD_VAR 0 4
84010: PUSH
84011: LD_VAR 0 7
84015: ARRAY
84016: PPUSH
84017: LD_VAR 0 14
84021: PUSH
84022: LD_VAR 0 8
84026: ARRAY
84027: PPUSH
84028: CALL_OW 115
// attacking := true ;
84032: LD_ADDR_VAR 0 29
84036: PUSH
84037: LD_INT 1
84039: ST_TO_ADDR
// break ;
84040: GO 84044
// end ;
84042: GO 83981
84044: POP
84045: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
84046: LD_VAR 0 4
84050: PUSH
84051: LD_VAR 0 7
84055: ARRAY
84056: PPUSH
84057: CALL_OW 302
84061: PUSH
84062: LD_VAR 0 29
84066: NOT
84067: AND
84068: IFFALSE 84390
// begin if GetTag ( group [ i ] ) = 71 then
84070: LD_VAR 0 4
84074: PUSH
84075: LD_VAR 0 7
84079: ARRAY
84080: PPUSH
84081: CALL_OW 110
84085: PUSH
84086: LD_INT 71
84088: EQUAL
84089: IFFALSE 84130
// begin if HasTask ( group [ i ] ) then
84091: LD_VAR 0 4
84095: PUSH
84096: LD_VAR 0 7
84100: ARRAY
84101: PPUSH
84102: CALL_OW 314
84106: IFFALSE 84112
// continue else
84108: GO 80295
84110: GO 84130
// SetTag ( group [ i ] , 0 ) ;
84112: LD_VAR 0 4
84116: PUSH
84117: LD_VAR 0 7
84121: ARRAY
84122: PPUSH
84123: LD_INT 0
84125: PPUSH
84126: CALL_OW 109
// end ; k := 8 ;
84130: LD_ADDR_VAR 0 9
84134: PUSH
84135: LD_INT 8
84137: ST_TO_ADDR
// x := 0 ;
84138: LD_ADDR_VAR 0 10
84142: PUSH
84143: LD_INT 0
84145: ST_TO_ADDR
// if tmp < k then
84146: LD_VAR 0 14
84150: PUSH
84151: LD_VAR 0 9
84155: LESS
84156: IFFALSE 84168
// k := tmp ;
84158: LD_ADDR_VAR 0 9
84162: PUSH
84163: LD_VAR 0 14
84167: ST_TO_ADDR
// for j = 1 to k do
84168: LD_ADDR_VAR 0 8
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 9
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84282
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
84186: LD_VAR 0 14
84190: PUSH
84191: LD_VAR 0 8
84195: ARRAY
84196: PPUSH
84197: CALL_OW 247
84201: PUSH
84202: LD_INT 1
84204: EQUAL
84205: PUSH
84206: LD_VAR 0 14
84210: PUSH
84211: LD_VAR 0 8
84215: ARRAY
84216: PPUSH
84217: CALL_OW 256
84221: PUSH
84222: LD_INT 250
84224: LESS
84225: PUSH
84226: LD_VAR 0 20
84230: AND
84231: PUSH
84232: LD_VAR 0 20
84236: NOT
84237: PUSH
84238: LD_VAR 0 14
84242: PUSH
84243: LD_VAR 0 8
84247: ARRAY
84248: PPUSH
84249: CALL_OW 256
84253: PUSH
84254: LD_INT 250
84256: GREATEREQUAL
84257: AND
84258: OR
84259: AND
84260: IFFALSE 84280
// begin x := tmp [ j ] ;
84262: LD_ADDR_VAR 0 10
84266: PUSH
84267: LD_VAR 0 14
84271: PUSH
84272: LD_VAR 0 8
84276: ARRAY
84277: ST_TO_ADDR
// break ;
84278: GO 84282
// end ;
84280: GO 84183
84282: POP
84283: POP
// if x then
84284: LD_VAR 0 10
84288: IFFALSE 84312
// ComAttackUnit ( group [ i ] , x ) else
84290: LD_VAR 0 4
84294: PUSH
84295: LD_VAR 0 7
84299: ARRAY
84300: PPUSH
84301: LD_VAR 0 10
84305: PPUSH
84306: CALL_OW 115
84310: GO 84336
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84312: LD_VAR 0 4
84316: PUSH
84317: LD_VAR 0 7
84321: ARRAY
84322: PPUSH
84323: LD_VAR 0 14
84327: PUSH
84328: LD_INT 1
84330: ARRAY
84331: PPUSH
84332: CALL_OW 115
// if not HasTask ( group [ i ] ) then
84336: LD_VAR 0 4
84340: PUSH
84341: LD_VAR 0 7
84345: ARRAY
84346: PPUSH
84347: CALL_OW 314
84351: NOT
84352: IFFALSE 84390
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
84354: LD_VAR 0 4
84358: PUSH
84359: LD_VAR 0 7
84363: ARRAY
84364: PPUSH
84365: LD_VAR 0 14
84369: PPUSH
84370: LD_VAR 0 4
84374: PUSH
84375: LD_VAR 0 7
84379: ARRAY
84380: PPUSH
84381: CALL_OW 74
84385: PPUSH
84386: CALL_OW 115
// end ; end ; end ;
84390: GO 80295
84392: POP
84393: POP
// wait ( 0 0$1 ) ;
84394: LD_INT 35
84396: PPUSH
84397: CALL_OW 67
// until group = [ ] ;
84401: LD_VAR 0 4
84405: PUSH
84406: EMPTY
84407: EQUAL
84408: IFFALSE 80280
// end ;
84410: LD_VAR 0 2
84414: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84415: LD_INT 0
84417: PPUSH
84418: PPUSH
84419: PPUSH
84420: PPUSH
// if not base_units then
84421: LD_VAR 0 1
84425: NOT
84426: IFFALSE 84430
// exit ;
84428: GO 84517
// result := false ;
84430: LD_ADDR_VAR 0 2
84434: PUSH
84435: LD_INT 0
84437: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84438: LD_ADDR_VAR 0 5
84442: PUSH
84443: LD_VAR 0 1
84447: PPUSH
84448: LD_INT 21
84450: PUSH
84451: LD_INT 3
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PPUSH
84458: CALL_OW 72
84462: ST_TO_ADDR
// if not tmp then
84463: LD_VAR 0 5
84467: NOT
84468: IFFALSE 84472
// exit ;
84470: GO 84517
// for i in tmp do
84472: LD_ADDR_VAR 0 3
84476: PUSH
84477: LD_VAR 0 5
84481: PUSH
84482: FOR_IN
84483: IFFALSE 84515
// begin result := EnemyInRange ( i , 22 ) ;
84485: LD_ADDR_VAR 0 2
84489: PUSH
84490: LD_VAR 0 3
84494: PPUSH
84495: LD_INT 22
84497: PPUSH
84498: CALL 78093 0 2
84502: ST_TO_ADDR
// if result then
84503: LD_VAR 0 2
84507: IFFALSE 84513
// exit ;
84509: POP
84510: POP
84511: GO 84517
// end ;
84513: GO 84482
84515: POP
84516: POP
// end ;
84517: LD_VAR 0 2
84521: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84522: LD_INT 0
84524: PPUSH
84525: PPUSH
// if not units then
84526: LD_VAR 0 1
84530: NOT
84531: IFFALSE 84535
// exit ;
84533: GO 84605
// result := [ ] ;
84535: LD_ADDR_VAR 0 3
84539: PUSH
84540: EMPTY
84541: ST_TO_ADDR
// for i in units do
84542: LD_ADDR_VAR 0 4
84546: PUSH
84547: LD_VAR 0 1
84551: PUSH
84552: FOR_IN
84553: IFFALSE 84603
// if GetTag ( i ) = tag then
84555: LD_VAR 0 4
84559: PPUSH
84560: CALL_OW 110
84564: PUSH
84565: LD_VAR 0 2
84569: EQUAL
84570: IFFALSE 84601
// result := Insert ( result , result + 1 , i ) ;
84572: LD_ADDR_VAR 0 3
84576: PUSH
84577: LD_VAR 0 3
84581: PPUSH
84582: LD_VAR 0 3
84586: PUSH
84587: LD_INT 1
84589: PLUS
84590: PPUSH
84591: LD_VAR 0 4
84595: PPUSH
84596: CALL_OW 2
84600: ST_TO_ADDR
84601: GO 84552
84603: POP
84604: POP
// end ;
84605: LD_VAR 0 3
84609: RET
// export function IsDriver ( un ) ; begin
84610: LD_INT 0
84612: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84613: LD_ADDR_VAR 0 2
84617: PUSH
84618: LD_VAR 0 1
84622: PUSH
84623: LD_INT 55
84625: PUSH
84626: EMPTY
84627: LIST
84628: PPUSH
84629: CALL_OW 69
84633: IN
84634: ST_TO_ADDR
// end ;
84635: LD_VAR 0 2
84639: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84640: LD_INT 0
84642: PPUSH
84643: PPUSH
// list := [ ] ;
84644: LD_ADDR_VAR 0 5
84648: PUSH
84649: EMPTY
84650: ST_TO_ADDR
// case d of 0 :
84651: LD_VAR 0 3
84655: PUSH
84656: LD_INT 0
84658: DOUBLE
84659: EQUAL
84660: IFTRUE 84664
84662: GO 84797
84664: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84665: LD_ADDR_VAR 0 5
84669: PUSH
84670: LD_VAR 0 1
84674: PUSH
84675: LD_INT 4
84677: MINUS
84678: PUSH
84679: LD_VAR 0 2
84683: PUSH
84684: LD_INT 4
84686: MINUS
84687: PUSH
84688: LD_INT 2
84690: PUSH
84691: EMPTY
84692: LIST
84693: LIST
84694: LIST
84695: PUSH
84696: LD_VAR 0 1
84700: PUSH
84701: LD_INT 3
84703: MINUS
84704: PUSH
84705: LD_VAR 0 2
84709: PUSH
84710: LD_INT 1
84712: PUSH
84713: EMPTY
84714: LIST
84715: LIST
84716: LIST
84717: PUSH
84718: LD_VAR 0 1
84722: PUSH
84723: LD_INT 4
84725: PLUS
84726: PUSH
84727: LD_VAR 0 2
84731: PUSH
84732: LD_INT 4
84734: PUSH
84735: EMPTY
84736: LIST
84737: LIST
84738: LIST
84739: PUSH
84740: LD_VAR 0 1
84744: PUSH
84745: LD_INT 3
84747: PLUS
84748: PUSH
84749: LD_VAR 0 2
84753: PUSH
84754: LD_INT 3
84756: PLUS
84757: PUSH
84758: LD_INT 5
84760: PUSH
84761: EMPTY
84762: LIST
84763: LIST
84764: LIST
84765: PUSH
84766: LD_VAR 0 1
84770: PUSH
84771: LD_VAR 0 2
84775: PUSH
84776: LD_INT 4
84778: PLUS
84779: PUSH
84780: LD_INT 0
84782: PUSH
84783: EMPTY
84784: LIST
84785: LIST
84786: LIST
84787: PUSH
84788: EMPTY
84789: LIST
84790: LIST
84791: LIST
84792: LIST
84793: LIST
84794: ST_TO_ADDR
// end ; 1 :
84795: GO 85495
84797: LD_INT 1
84799: DOUBLE
84800: EQUAL
84801: IFTRUE 84805
84803: GO 84938
84805: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84806: LD_ADDR_VAR 0 5
84810: PUSH
84811: LD_VAR 0 1
84815: PUSH
84816: LD_VAR 0 2
84820: PUSH
84821: LD_INT 4
84823: MINUS
84824: PUSH
84825: LD_INT 3
84827: PUSH
84828: EMPTY
84829: LIST
84830: LIST
84831: LIST
84832: PUSH
84833: LD_VAR 0 1
84837: PUSH
84838: LD_INT 3
84840: MINUS
84841: PUSH
84842: LD_VAR 0 2
84846: PUSH
84847: LD_INT 3
84849: MINUS
84850: PUSH
84851: LD_INT 2
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: LIST
84858: PUSH
84859: LD_VAR 0 1
84863: PUSH
84864: LD_INT 4
84866: MINUS
84867: PUSH
84868: LD_VAR 0 2
84872: PUSH
84873: LD_INT 1
84875: PUSH
84876: EMPTY
84877: LIST
84878: LIST
84879: LIST
84880: PUSH
84881: LD_VAR 0 1
84885: PUSH
84886: LD_VAR 0 2
84890: PUSH
84891: LD_INT 3
84893: PLUS
84894: PUSH
84895: LD_INT 0
84897: PUSH
84898: EMPTY
84899: LIST
84900: LIST
84901: LIST
84902: PUSH
84903: LD_VAR 0 1
84907: PUSH
84908: LD_INT 4
84910: PLUS
84911: PUSH
84912: LD_VAR 0 2
84916: PUSH
84917: LD_INT 4
84919: PLUS
84920: PUSH
84921: LD_INT 5
84923: PUSH
84924: EMPTY
84925: LIST
84926: LIST
84927: LIST
84928: PUSH
84929: EMPTY
84930: LIST
84931: LIST
84932: LIST
84933: LIST
84934: LIST
84935: ST_TO_ADDR
// end ; 2 :
84936: GO 85495
84938: LD_INT 2
84940: DOUBLE
84941: EQUAL
84942: IFTRUE 84946
84944: GO 85075
84946: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84947: LD_ADDR_VAR 0 5
84951: PUSH
84952: LD_VAR 0 1
84956: PUSH
84957: LD_VAR 0 2
84961: PUSH
84962: LD_INT 3
84964: MINUS
84965: PUSH
84966: LD_INT 3
84968: PUSH
84969: EMPTY
84970: LIST
84971: LIST
84972: LIST
84973: PUSH
84974: LD_VAR 0 1
84978: PUSH
84979: LD_INT 4
84981: PLUS
84982: PUSH
84983: LD_VAR 0 2
84987: PUSH
84988: LD_INT 4
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: LIST
84995: PUSH
84996: LD_VAR 0 1
85000: PUSH
85001: LD_VAR 0 2
85005: PUSH
85006: LD_INT 4
85008: PLUS
85009: PUSH
85010: LD_INT 0
85012: PUSH
85013: EMPTY
85014: LIST
85015: LIST
85016: LIST
85017: PUSH
85018: LD_VAR 0 1
85022: PUSH
85023: LD_INT 3
85025: MINUS
85026: PUSH
85027: LD_VAR 0 2
85031: PUSH
85032: LD_INT 1
85034: PUSH
85035: EMPTY
85036: LIST
85037: LIST
85038: LIST
85039: PUSH
85040: LD_VAR 0 1
85044: PUSH
85045: LD_INT 4
85047: MINUS
85048: PUSH
85049: LD_VAR 0 2
85053: PUSH
85054: LD_INT 4
85056: MINUS
85057: PUSH
85058: LD_INT 2
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: LIST
85065: PUSH
85066: EMPTY
85067: LIST
85068: LIST
85069: LIST
85070: LIST
85071: LIST
85072: ST_TO_ADDR
// end ; 3 :
85073: GO 85495
85075: LD_INT 3
85077: DOUBLE
85078: EQUAL
85079: IFTRUE 85083
85081: GO 85216
85083: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85084: LD_ADDR_VAR 0 5
85088: PUSH
85089: LD_VAR 0 1
85093: PUSH
85094: LD_INT 3
85096: PLUS
85097: PUSH
85098: LD_VAR 0 2
85102: PUSH
85103: LD_INT 4
85105: PUSH
85106: EMPTY
85107: LIST
85108: LIST
85109: LIST
85110: PUSH
85111: LD_VAR 0 1
85115: PUSH
85116: LD_INT 4
85118: PLUS
85119: PUSH
85120: LD_VAR 0 2
85124: PUSH
85125: LD_INT 4
85127: PLUS
85128: PUSH
85129: LD_INT 5
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: LIST
85136: PUSH
85137: LD_VAR 0 1
85141: PUSH
85142: LD_INT 4
85144: MINUS
85145: PUSH
85146: LD_VAR 0 2
85150: PUSH
85151: LD_INT 1
85153: PUSH
85154: EMPTY
85155: LIST
85156: LIST
85157: LIST
85158: PUSH
85159: LD_VAR 0 1
85163: PUSH
85164: LD_VAR 0 2
85168: PUSH
85169: LD_INT 4
85171: MINUS
85172: PUSH
85173: LD_INT 3
85175: PUSH
85176: EMPTY
85177: LIST
85178: LIST
85179: LIST
85180: PUSH
85181: LD_VAR 0 1
85185: PUSH
85186: LD_INT 3
85188: MINUS
85189: PUSH
85190: LD_VAR 0 2
85194: PUSH
85195: LD_INT 3
85197: MINUS
85198: PUSH
85199: LD_INT 2
85201: PUSH
85202: EMPTY
85203: LIST
85204: LIST
85205: LIST
85206: PUSH
85207: EMPTY
85208: LIST
85209: LIST
85210: LIST
85211: LIST
85212: LIST
85213: ST_TO_ADDR
// end ; 4 :
85214: GO 85495
85216: LD_INT 4
85218: DOUBLE
85219: EQUAL
85220: IFTRUE 85224
85222: GO 85357
85224: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85225: LD_ADDR_VAR 0 5
85229: PUSH
85230: LD_VAR 0 1
85234: PUSH
85235: LD_VAR 0 2
85239: PUSH
85240: LD_INT 4
85242: PLUS
85243: PUSH
85244: LD_INT 0
85246: PUSH
85247: EMPTY
85248: LIST
85249: LIST
85250: LIST
85251: PUSH
85252: LD_VAR 0 1
85256: PUSH
85257: LD_INT 3
85259: PLUS
85260: PUSH
85261: LD_VAR 0 2
85265: PUSH
85266: LD_INT 3
85268: PLUS
85269: PUSH
85270: LD_INT 5
85272: PUSH
85273: EMPTY
85274: LIST
85275: LIST
85276: LIST
85277: PUSH
85278: LD_VAR 0 1
85282: PUSH
85283: LD_INT 4
85285: PLUS
85286: PUSH
85287: LD_VAR 0 2
85291: PUSH
85292: LD_INT 4
85294: PUSH
85295: EMPTY
85296: LIST
85297: LIST
85298: LIST
85299: PUSH
85300: LD_VAR 0 1
85304: PUSH
85305: LD_VAR 0 2
85309: PUSH
85310: LD_INT 3
85312: MINUS
85313: PUSH
85314: LD_INT 3
85316: PUSH
85317: EMPTY
85318: LIST
85319: LIST
85320: LIST
85321: PUSH
85322: LD_VAR 0 1
85326: PUSH
85327: LD_INT 4
85329: MINUS
85330: PUSH
85331: LD_VAR 0 2
85335: PUSH
85336: LD_INT 4
85338: MINUS
85339: PUSH
85340: LD_INT 2
85342: PUSH
85343: EMPTY
85344: LIST
85345: LIST
85346: LIST
85347: PUSH
85348: EMPTY
85349: LIST
85350: LIST
85351: LIST
85352: LIST
85353: LIST
85354: ST_TO_ADDR
// end ; 5 :
85355: GO 85495
85357: LD_INT 5
85359: DOUBLE
85360: EQUAL
85361: IFTRUE 85365
85363: GO 85494
85365: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85366: LD_ADDR_VAR 0 5
85370: PUSH
85371: LD_VAR 0 1
85375: PUSH
85376: LD_INT 4
85378: MINUS
85379: PUSH
85380: LD_VAR 0 2
85384: PUSH
85385: LD_INT 1
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: LIST
85392: PUSH
85393: LD_VAR 0 1
85397: PUSH
85398: LD_VAR 0 2
85402: PUSH
85403: LD_INT 4
85405: MINUS
85406: PUSH
85407: LD_INT 3
85409: PUSH
85410: EMPTY
85411: LIST
85412: LIST
85413: LIST
85414: PUSH
85415: LD_VAR 0 1
85419: PUSH
85420: LD_INT 4
85422: PLUS
85423: PUSH
85424: LD_VAR 0 2
85428: PUSH
85429: LD_INT 4
85431: PLUS
85432: PUSH
85433: LD_INT 5
85435: PUSH
85436: EMPTY
85437: LIST
85438: LIST
85439: LIST
85440: PUSH
85441: LD_VAR 0 1
85445: PUSH
85446: LD_INT 3
85448: PLUS
85449: PUSH
85450: LD_VAR 0 2
85454: PUSH
85455: LD_INT 4
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: LIST
85462: PUSH
85463: LD_VAR 0 1
85467: PUSH
85468: LD_VAR 0 2
85472: PUSH
85473: LD_INT 3
85475: PLUS
85476: PUSH
85477: LD_INT 0
85479: PUSH
85480: EMPTY
85481: LIST
85482: LIST
85483: LIST
85484: PUSH
85485: EMPTY
85486: LIST
85487: LIST
85488: LIST
85489: LIST
85490: LIST
85491: ST_TO_ADDR
// end ; end ;
85492: GO 85495
85494: POP
// result := list ;
85495: LD_ADDR_VAR 0 4
85499: PUSH
85500: LD_VAR 0 5
85504: ST_TO_ADDR
// end ;
85505: LD_VAR 0 4
85509: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85510: LD_INT 0
85512: PPUSH
85513: PPUSH
85514: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85515: LD_VAR 0 1
85519: NOT
85520: PUSH
85521: LD_VAR 0 2
85525: PUSH
85526: LD_INT 1
85528: PUSH
85529: LD_INT 2
85531: PUSH
85532: LD_INT 3
85534: PUSH
85535: LD_INT 4
85537: PUSH
85538: EMPTY
85539: LIST
85540: LIST
85541: LIST
85542: LIST
85543: IN
85544: NOT
85545: OR
85546: IFFALSE 85550
// exit ;
85548: GO 85642
// tmp := [ ] ;
85550: LD_ADDR_VAR 0 5
85554: PUSH
85555: EMPTY
85556: ST_TO_ADDR
// for i in units do
85557: LD_ADDR_VAR 0 4
85561: PUSH
85562: LD_VAR 0 1
85566: PUSH
85567: FOR_IN
85568: IFFALSE 85611
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85570: LD_ADDR_VAR 0 5
85574: PUSH
85575: LD_VAR 0 5
85579: PPUSH
85580: LD_VAR 0 5
85584: PUSH
85585: LD_INT 1
85587: PLUS
85588: PPUSH
85589: LD_VAR 0 4
85593: PPUSH
85594: LD_VAR 0 2
85598: PPUSH
85599: CALL_OW 259
85603: PPUSH
85604: CALL_OW 2
85608: ST_TO_ADDR
85609: GO 85567
85611: POP
85612: POP
// if not tmp then
85613: LD_VAR 0 5
85617: NOT
85618: IFFALSE 85622
// exit ;
85620: GO 85642
// result := SortListByListDesc ( units , tmp ) ;
85622: LD_ADDR_VAR 0 3
85626: PUSH
85627: LD_VAR 0 1
85631: PPUSH
85632: LD_VAR 0 5
85636: PPUSH
85637: CALL_OW 77
85641: ST_TO_ADDR
// end ;
85642: LD_VAR 0 3
85646: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85647: LD_INT 0
85649: PPUSH
85650: PPUSH
85651: PPUSH
// x := GetX ( building ) ;
85652: LD_ADDR_VAR 0 4
85656: PUSH
85657: LD_VAR 0 2
85661: PPUSH
85662: CALL_OW 250
85666: ST_TO_ADDR
// y := GetY ( building ) ;
85667: LD_ADDR_VAR 0 5
85671: PUSH
85672: LD_VAR 0 2
85676: PPUSH
85677: CALL_OW 251
85681: ST_TO_ADDR
// if GetTaskList ( unit ) then
85682: LD_VAR 0 1
85686: PPUSH
85687: CALL_OW 437
85691: IFFALSE 85786
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85693: LD_STRING e
85695: PUSH
85696: LD_VAR 0 1
85700: PPUSH
85701: CALL_OW 437
85705: PUSH
85706: LD_INT 1
85708: ARRAY
85709: PUSH
85710: LD_INT 1
85712: ARRAY
85713: EQUAL
85714: PUSH
85715: LD_VAR 0 4
85719: PUSH
85720: LD_VAR 0 1
85724: PPUSH
85725: CALL_OW 437
85729: PUSH
85730: LD_INT 1
85732: ARRAY
85733: PUSH
85734: LD_INT 2
85736: ARRAY
85737: EQUAL
85738: AND
85739: PUSH
85740: LD_VAR 0 5
85744: PUSH
85745: LD_VAR 0 1
85749: PPUSH
85750: CALL_OW 437
85754: PUSH
85755: LD_INT 1
85757: ARRAY
85758: PUSH
85759: LD_INT 3
85761: ARRAY
85762: EQUAL
85763: AND
85764: IFFALSE 85776
// result := true else
85766: LD_ADDR_VAR 0 3
85770: PUSH
85771: LD_INT 1
85773: ST_TO_ADDR
85774: GO 85784
// result := false ;
85776: LD_ADDR_VAR 0 3
85780: PUSH
85781: LD_INT 0
85783: ST_TO_ADDR
// end else
85784: GO 85794
// result := false ;
85786: LD_ADDR_VAR 0 3
85790: PUSH
85791: LD_INT 0
85793: ST_TO_ADDR
// end ;
85794: LD_VAR 0 3
85798: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85799: LD_INT 0
85801: PPUSH
85802: PPUSH
85803: PPUSH
85804: PPUSH
// if not unit or not area then
85805: LD_VAR 0 1
85809: NOT
85810: PUSH
85811: LD_VAR 0 2
85815: NOT
85816: OR
85817: IFFALSE 85821
// exit ;
85819: GO 85986
// tmp := AreaToList ( area , i ) ;
85821: LD_ADDR_VAR 0 6
85825: PUSH
85826: LD_VAR 0 2
85830: PPUSH
85831: LD_VAR 0 5
85835: PPUSH
85836: CALL_OW 517
85840: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85841: LD_ADDR_VAR 0 5
85845: PUSH
85846: DOUBLE
85847: LD_INT 1
85849: DEC
85850: ST_TO_ADDR
85851: LD_VAR 0 6
85855: PUSH
85856: LD_INT 1
85858: ARRAY
85859: PUSH
85860: FOR_TO
85861: IFFALSE 85976
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85863: LD_ADDR_VAR 0 7
85867: PUSH
85868: LD_VAR 0 6
85872: PUSH
85873: LD_INT 1
85875: ARRAY
85876: PUSH
85877: LD_VAR 0 5
85881: ARRAY
85882: PUSH
85883: LD_VAR 0 6
85887: PUSH
85888: LD_INT 2
85890: ARRAY
85891: PUSH
85892: LD_VAR 0 5
85896: ARRAY
85897: PUSH
85898: EMPTY
85899: LIST
85900: LIST
85901: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85902: LD_VAR 0 7
85906: PUSH
85907: LD_INT 1
85909: ARRAY
85910: PPUSH
85911: LD_VAR 0 7
85915: PUSH
85916: LD_INT 2
85918: ARRAY
85919: PPUSH
85920: CALL_OW 428
85924: PUSH
85925: LD_INT 0
85927: EQUAL
85928: IFFALSE 85974
// begin result := true ;
85930: LD_ADDR_VAR 0 4
85934: PUSH
85935: LD_INT 1
85937: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85938: LD_VAR 0 1
85942: PPUSH
85943: LD_VAR 0 7
85947: PUSH
85948: LD_INT 1
85950: ARRAY
85951: PPUSH
85952: LD_VAR 0 7
85956: PUSH
85957: LD_INT 2
85959: ARRAY
85960: PPUSH
85961: LD_VAR 0 3
85965: PPUSH
85966: CALL_OW 48
// exit ;
85970: POP
85971: POP
85972: GO 85986
// end ; end ;
85974: GO 85860
85976: POP
85977: POP
// result := false ;
85978: LD_ADDR_VAR 0 4
85982: PUSH
85983: LD_INT 0
85985: ST_TO_ADDR
// end ;
85986: LD_VAR 0 4
85990: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85991: LD_INT 0
85993: PPUSH
85994: PPUSH
85995: PPUSH
// if not side or side > 8 then
85996: LD_VAR 0 1
86000: NOT
86001: PUSH
86002: LD_VAR 0 1
86006: PUSH
86007: LD_INT 8
86009: GREATER
86010: OR
86011: IFFALSE 86015
// exit ;
86013: GO 86202
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86015: LD_ADDR_VAR 0 4
86019: PUSH
86020: LD_INT 22
86022: PUSH
86023: LD_VAR 0 1
86027: PUSH
86028: EMPTY
86029: LIST
86030: LIST
86031: PUSH
86032: LD_INT 21
86034: PUSH
86035: LD_INT 3
86037: PUSH
86038: EMPTY
86039: LIST
86040: LIST
86041: PUSH
86042: EMPTY
86043: LIST
86044: LIST
86045: PPUSH
86046: CALL_OW 69
86050: ST_TO_ADDR
// if not tmp then
86051: LD_VAR 0 4
86055: NOT
86056: IFFALSE 86060
// exit ;
86058: GO 86202
// enable_addtolog := true ;
86060: LD_ADDR_OWVAR 81
86064: PUSH
86065: LD_INT 1
86067: ST_TO_ADDR
// AddToLog ( [ ) ;
86068: LD_STRING [
86070: PPUSH
86071: CALL_OW 561
// for i in tmp do
86075: LD_ADDR_VAR 0 3
86079: PUSH
86080: LD_VAR 0 4
86084: PUSH
86085: FOR_IN
86086: IFFALSE 86193
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86088: LD_STRING [
86090: PUSH
86091: LD_VAR 0 3
86095: PPUSH
86096: CALL_OW 266
86100: STR
86101: PUSH
86102: LD_STRING , 
86104: STR
86105: PUSH
86106: LD_VAR 0 3
86110: PPUSH
86111: CALL_OW 250
86115: STR
86116: PUSH
86117: LD_STRING , 
86119: STR
86120: PUSH
86121: LD_VAR 0 3
86125: PPUSH
86126: CALL_OW 251
86130: STR
86131: PUSH
86132: LD_STRING , 
86134: STR
86135: PUSH
86136: LD_VAR 0 3
86140: PPUSH
86141: CALL_OW 254
86145: STR
86146: PUSH
86147: LD_STRING , 
86149: STR
86150: PUSH
86151: LD_VAR 0 3
86155: PPUSH
86156: LD_INT 1
86158: PPUSH
86159: CALL_OW 268
86163: STR
86164: PUSH
86165: LD_STRING , 
86167: STR
86168: PUSH
86169: LD_VAR 0 3
86173: PPUSH
86174: LD_INT 2
86176: PPUSH
86177: CALL_OW 268
86181: STR
86182: PUSH
86183: LD_STRING ],
86185: STR
86186: PPUSH
86187: CALL_OW 561
// end ;
86191: GO 86085
86193: POP
86194: POP
// AddToLog ( ]; ) ;
86195: LD_STRING ];
86197: PPUSH
86198: CALL_OW 561
// end ;
86202: LD_VAR 0 2
86206: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86207: LD_INT 0
86209: PPUSH
86210: PPUSH
86211: PPUSH
86212: PPUSH
86213: PPUSH
// if not area or not rate or not max then
86214: LD_VAR 0 1
86218: NOT
86219: PUSH
86220: LD_VAR 0 2
86224: NOT
86225: OR
86226: PUSH
86227: LD_VAR 0 4
86231: NOT
86232: OR
86233: IFFALSE 86237
// exit ;
86235: GO 86429
// while 1 do
86237: LD_INT 1
86239: IFFALSE 86429
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86241: LD_ADDR_VAR 0 9
86245: PUSH
86246: LD_VAR 0 1
86250: PPUSH
86251: LD_INT 1
86253: PPUSH
86254: CALL_OW 287
86258: PUSH
86259: LD_INT 10
86261: MUL
86262: ST_TO_ADDR
// r := rate / 10 ;
86263: LD_ADDR_VAR 0 7
86267: PUSH
86268: LD_VAR 0 2
86272: PUSH
86273: LD_INT 10
86275: DIVREAL
86276: ST_TO_ADDR
// time := 1 1$00 ;
86277: LD_ADDR_VAR 0 8
86281: PUSH
86282: LD_INT 2100
86284: ST_TO_ADDR
// if amount < min then
86285: LD_VAR 0 9
86289: PUSH
86290: LD_VAR 0 3
86294: LESS
86295: IFFALSE 86313
// r := r * 2 else
86297: LD_ADDR_VAR 0 7
86301: PUSH
86302: LD_VAR 0 7
86306: PUSH
86307: LD_INT 2
86309: MUL
86310: ST_TO_ADDR
86311: GO 86339
// if amount > max then
86313: LD_VAR 0 9
86317: PUSH
86318: LD_VAR 0 4
86322: GREATER
86323: IFFALSE 86339
// r := r / 2 ;
86325: LD_ADDR_VAR 0 7
86329: PUSH
86330: LD_VAR 0 7
86334: PUSH
86335: LD_INT 2
86337: DIVREAL
86338: ST_TO_ADDR
// time := time / r ;
86339: LD_ADDR_VAR 0 8
86343: PUSH
86344: LD_VAR 0 8
86348: PUSH
86349: LD_VAR 0 7
86353: DIVREAL
86354: ST_TO_ADDR
// if time < 0 then
86355: LD_VAR 0 8
86359: PUSH
86360: LD_INT 0
86362: LESS
86363: IFFALSE 86380
// time := time * - 1 ;
86365: LD_ADDR_VAR 0 8
86369: PUSH
86370: LD_VAR 0 8
86374: PUSH
86375: LD_INT 1
86377: NEG
86378: MUL
86379: ST_TO_ADDR
// wait ( time ) ;
86380: LD_VAR 0 8
86384: PPUSH
86385: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
86389: LD_INT 35
86391: PPUSH
86392: LD_INT 875
86394: PPUSH
86395: CALL_OW 12
86399: PPUSH
86400: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86404: LD_INT 1
86406: PPUSH
86407: LD_INT 5
86409: PPUSH
86410: CALL_OW 12
86414: PPUSH
86415: LD_VAR 0 1
86419: PPUSH
86420: LD_INT 1
86422: PPUSH
86423: CALL_OW 55
// end ;
86427: GO 86237
// end ;
86429: LD_VAR 0 5
86433: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86434: LD_INT 0
86436: PPUSH
86437: PPUSH
86438: PPUSH
86439: PPUSH
86440: PPUSH
86441: PPUSH
86442: PPUSH
86443: PPUSH
// if not turrets or not factories then
86444: LD_VAR 0 1
86448: NOT
86449: PUSH
86450: LD_VAR 0 2
86454: NOT
86455: OR
86456: IFFALSE 86460
// exit ;
86458: GO 86767
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86460: LD_ADDR_VAR 0 10
86464: PUSH
86465: LD_INT 5
86467: PUSH
86468: LD_INT 6
86470: PUSH
86471: EMPTY
86472: LIST
86473: LIST
86474: PUSH
86475: LD_INT 2
86477: PUSH
86478: LD_INT 4
86480: PUSH
86481: EMPTY
86482: LIST
86483: LIST
86484: PUSH
86485: LD_INT 3
86487: PUSH
86488: LD_INT 5
86490: PUSH
86491: EMPTY
86492: LIST
86493: LIST
86494: PUSH
86495: EMPTY
86496: LIST
86497: LIST
86498: LIST
86499: PUSH
86500: LD_INT 24
86502: PUSH
86503: LD_INT 25
86505: PUSH
86506: EMPTY
86507: LIST
86508: LIST
86509: PUSH
86510: LD_INT 23
86512: PUSH
86513: LD_INT 27
86515: PUSH
86516: EMPTY
86517: LIST
86518: LIST
86519: PUSH
86520: EMPTY
86521: LIST
86522: LIST
86523: PUSH
86524: LD_INT 42
86526: PUSH
86527: LD_INT 43
86529: PUSH
86530: EMPTY
86531: LIST
86532: LIST
86533: PUSH
86534: LD_INT 44
86536: PUSH
86537: LD_INT 46
86539: PUSH
86540: EMPTY
86541: LIST
86542: LIST
86543: PUSH
86544: LD_INT 45
86546: PUSH
86547: LD_INT 47
86549: PUSH
86550: EMPTY
86551: LIST
86552: LIST
86553: PUSH
86554: EMPTY
86555: LIST
86556: LIST
86557: LIST
86558: PUSH
86559: EMPTY
86560: LIST
86561: LIST
86562: LIST
86563: ST_TO_ADDR
// result := [ ] ;
86564: LD_ADDR_VAR 0 3
86568: PUSH
86569: EMPTY
86570: ST_TO_ADDR
// for i in turrets do
86571: LD_ADDR_VAR 0 4
86575: PUSH
86576: LD_VAR 0 1
86580: PUSH
86581: FOR_IN
86582: IFFALSE 86765
// begin nat := GetNation ( i ) ;
86584: LD_ADDR_VAR 0 7
86588: PUSH
86589: LD_VAR 0 4
86593: PPUSH
86594: CALL_OW 248
86598: ST_TO_ADDR
// weapon := 0 ;
86599: LD_ADDR_VAR 0 8
86603: PUSH
86604: LD_INT 0
86606: ST_TO_ADDR
// if not nat then
86607: LD_VAR 0 7
86611: NOT
86612: IFFALSE 86616
// continue ;
86614: GO 86581
// for j in list [ nat ] do
86616: LD_ADDR_VAR 0 5
86620: PUSH
86621: LD_VAR 0 10
86625: PUSH
86626: LD_VAR 0 7
86630: ARRAY
86631: PUSH
86632: FOR_IN
86633: IFFALSE 86674
// if GetBWeapon ( i ) = j [ 1 ] then
86635: LD_VAR 0 4
86639: PPUSH
86640: CALL_OW 269
86644: PUSH
86645: LD_VAR 0 5
86649: PUSH
86650: LD_INT 1
86652: ARRAY
86653: EQUAL
86654: IFFALSE 86672
// begin weapon := j [ 2 ] ;
86656: LD_ADDR_VAR 0 8
86660: PUSH
86661: LD_VAR 0 5
86665: PUSH
86666: LD_INT 2
86668: ARRAY
86669: ST_TO_ADDR
// break ;
86670: GO 86674
// end ;
86672: GO 86632
86674: POP
86675: POP
// if not weapon then
86676: LD_VAR 0 8
86680: NOT
86681: IFFALSE 86685
// continue ;
86683: GO 86581
// for k in factories do
86685: LD_ADDR_VAR 0 6
86689: PUSH
86690: LD_VAR 0 2
86694: PUSH
86695: FOR_IN
86696: IFFALSE 86761
// begin weapons := AvailableWeaponList ( k ) ;
86698: LD_ADDR_VAR 0 9
86702: PUSH
86703: LD_VAR 0 6
86707: PPUSH
86708: CALL_OW 478
86712: ST_TO_ADDR
// if not weapons then
86713: LD_VAR 0 9
86717: NOT
86718: IFFALSE 86722
// continue ;
86720: GO 86695
// if weapon in weapons then
86722: LD_VAR 0 8
86726: PUSH
86727: LD_VAR 0 9
86731: IN
86732: IFFALSE 86759
// begin result := [ i , weapon ] ;
86734: LD_ADDR_VAR 0 3
86738: PUSH
86739: LD_VAR 0 4
86743: PUSH
86744: LD_VAR 0 8
86748: PUSH
86749: EMPTY
86750: LIST
86751: LIST
86752: ST_TO_ADDR
// exit ;
86753: POP
86754: POP
86755: POP
86756: POP
86757: GO 86767
// end ; end ;
86759: GO 86695
86761: POP
86762: POP
// end ;
86763: GO 86581
86765: POP
86766: POP
// end ;
86767: LD_VAR 0 3
86771: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
86772: LD_INT 0
86774: PPUSH
// if not side or side > 8 then
86775: LD_VAR 0 3
86779: NOT
86780: PUSH
86781: LD_VAR 0 3
86785: PUSH
86786: LD_INT 8
86788: GREATER
86789: OR
86790: IFFALSE 86794
// exit ;
86792: GO 86853
// if not range then
86794: LD_VAR 0 4
86798: NOT
86799: IFFALSE 86810
// range := - 12 ;
86801: LD_ADDR_VAR 0 4
86805: PUSH
86806: LD_INT 12
86808: NEG
86809: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
86810: LD_VAR 0 1
86814: PPUSH
86815: LD_VAR 0 2
86819: PPUSH
86820: LD_VAR 0 3
86824: PPUSH
86825: LD_VAR 0 4
86829: PPUSH
86830: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
86834: LD_VAR 0 1
86838: PPUSH
86839: LD_VAR 0 2
86843: PPUSH
86844: LD_VAR 0 3
86848: PPUSH
86849: CALL_OW 331
// end ;
86853: LD_VAR 0 5
86857: RET
// export function Video ( mode ) ; begin
86858: LD_INT 0
86860: PPUSH
// ingame_video = mode ;
86861: LD_ADDR_OWVAR 52
86865: PUSH
86866: LD_VAR 0 1
86870: ST_TO_ADDR
// interface_hidden = mode ;
86871: LD_ADDR_OWVAR 54
86875: PUSH
86876: LD_VAR 0 1
86880: ST_TO_ADDR
// end ;
86881: LD_VAR 0 2
86885: RET
// export function Join ( array , element ) ; begin
86886: LD_INT 0
86888: PPUSH
// result := array ^ element ;
86889: LD_ADDR_VAR 0 3
86893: PUSH
86894: LD_VAR 0 1
86898: PUSH
86899: LD_VAR 0 2
86903: ADD
86904: ST_TO_ADDR
// end ;
86905: LD_VAR 0 3
86909: RET
// export function JoinUnion ( array , element ) ; begin
86910: LD_INT 0
86912: PPUSH
// result := array union element ;
86913: LD_ADDR_VAR 0 3
86917: PUSH
86918: LD_VAR 0 1
86922: PUSH
86923: LD_VAR 0 2
86927: UNION
86928: ST_TO_ADDR
// end ;
86929: LD_VAR 0 3
86933: RET
// export function GetBehemoths ( side ) ; begin
86934: LD_INT 0
86936: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
86937: LD_ADDR_VAR 0 2
86941: PUSH
86942: LD_INT 22
86944: PUSH
86945: LD_VAR 0 1
86949: PUSH
86950: EMPTY
86951: LIST
86952: LIST
86953: PUSH
86954: LD_INT 31
86956: PUSH
86957: LD_INT 25
86959: PUSH
86960: EMPTY
86961: LIST
86962: LIST
86963: PUSH
86964: EMPTY
86965: LIST
86966: LIST
86967: PPUSH
86968: CALL_OW 69
86972: ST_TO_ADDR
// end ;
86973: LD_VAR 0 2
86977: RET
// export function Shuffle ( array ) ; var i , index ; begin
86978: LD_INT 0
86980: PPUSH
86981: PPUSH
86982: PPUSH
// result := [ ] ;
86983: LD_ADDR_VAR 0 2
86987: PUSH
86988: EMPTY
86989: ST_TO_ADDR
// if not array then
86990: LD_VAR 0 1
86994: NOT
86995: IFFALSE 86999
// exit ;
86997: GO 87098
// Randomize ;
86999: CALL_OW 10
// for i = array downto 1 do
87003: LD_ADDR_VAR 0 3
87007: PUSH
87008: DOUBLE
87009: LD_VAR 0 1
87013: INC
87014: ST_TO_ADDR
87015: LD_INT 1
87017: PUSH
87018: FOR_DOWNTO
87019: IFFALSE 87096
// begin index := rand ( 1 , array ) ;
87021: LD_ADDR_VAR 0 4
87025: PUSH
87026: LD_INT 1
87028: PPUSH
87029: LD_VAR 0 1
87033: PPUSH
87034: CALL_OW 12
87038: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87039: LD_ADDR_VAR 0 2
87043: PUSH
87044: LD_VAR 0 2
87048: PPUSH
87049: LD_VAR 0 2
87053: PUSH
87054: LD_INT 1
87056: PLUS
87057: PPUSH
87058: LD_VAR 0 1
87062: PUSH
87063: LD_VAR 0 4
87067: ARRAY
87068: PPUSH
87069: CALL_OW 2
87073: ST_TO_ADDR
// array := Delete ( array , index ) ;
87074: LD_ADDR_VAR 0 1
87078: PUSH
87079: LD_VAR 0 1
87083: PPUSH
87084: LD_VAR 0 4
87088: PPUSH
87089: CALL_OW 3
87093: ST_TO_ADDR
// end ;
87094: GO 87018
87096: POP
87097: POP
// end ; end_of_file
87098: LD_VAR 0 2
87102: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
87103: GO 87105
87105: DISABLE
// begin ru_radar := 98 ;
87106: LD_ADDR_EXP 92
87110: PUSH
87111: LD_INT 98
87113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
87114: LD_ADDR_EXP 93
87118: PUSH
87119: LD_INT 89
87121: ST_TO_ADDR
// us_hack := 99 ;
87122: LD_ADDR_EXP 94
87126: PUSH
87127: LD_INT 99
87129: ST_TO_ADDR
// us_artillery := 97 ;
87130: LD_ADDR_EXP 95
87134: PUSH
87135: LD_INT 97
87137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
87138: LD_ADDR_EXP 96
87142: PUSH
87143: LD_INT 91
87145: ST_TO_ADDR
// end ;
87146: END
