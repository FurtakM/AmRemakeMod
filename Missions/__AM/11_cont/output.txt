// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 44606 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28761 0 0
// PrepareAmerican ;
  33: CALL 349 0 0
// PrepareArabian ;
  37: CALL 33076 0 0
// Action ;
  41: CALL 37268 0 0
// RunMacro ;
  45: CALL 44769 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// function Debuger ; var i ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// if not debug then
 226: LD_EXP 1
 230: NOT
 231: IFFALSE 235
// exit ;
 233: GO 344
// game_speed := 5 ;
 235: LD_ADDR_OWVAR 65
 239: PUSH
 240: LD_INT 5
 242: ST_TO_ADDR
// uc_side := 1 ;
 243: LD_ADDR_OWVAR 20
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// uc_nation := 1 ;
 251: LD_ADDR_OWVAR 21
 255: PUSH
 256: LD_INT 1
 258: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 259: LD_ADDR_OWVAR 37
 263: PUSH
 264: LD_INT 2
 266: ST_TO_ADDR
// vc_control := control_computer ;
 267: LD_ADDR_OWVAR 38
 271: PUSH
 272: LD_INT 3
 274: ST_TO_ADDR
// vc_engine := engine_combustion ;
 275: LD_ADDR_OWVAR 39
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 283: LD_ADDR_OWVAR 40
 287: PUSH
 288: LD_INT 7
 290: ST_TO_ADDR
// for i = 1 to 4 do
 291: LD_ADDR_VAR 0 2
 295: PUSH
 296: DOUBLE
 297: LD_INT 1
 299: DEC
 300: ST_TO_ADDR
 301: LD_INT 4
 303: PUSH
 304: FOR_TO
 305: IFFALSE 330
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 307: CALL_OW 45
 311: PPUSH
 312: LD_INT 137
 314: PPUSH
 315: LD_INT 91
 317: PPUSH
 318: LD_INT 6
 320: PPUSH
 321: LD_INT 0
 323: PPUSH
 324: CALL_OW 50
 328: GO 304
 330: POP
 331: POP
// SetSide ( ar_force_south , 1 ) ;
 332: LD_EXP 33
 336: PPUSH
 337: LD_INT 1
 339: PPUSH
 340: CALL_OW 235
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 349: LD_INT 0
 351: PPUSH
 352: PPUSH
 353: PPUSH
 354: PPUSH
 355: PPUSH
 356: PPUSH
 357: PPUSH
 358: PPUSH
 359: PPUSH
// uc_side := 4 ;
 360: LD_ADDR_OWVAR 20
 364: PUSH
 365: LD_INT 4
 367: ST_TO_ADDR
// uc_nation := 1 ;
 368: LD_ADDR_OWVAR 21
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 376: LD_ADDR_EXP 26
 380: PUSH
 381: LD_STRING Powell
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL 1907 0 2
 391: ST_TO_ADDR
// uc_side := 1 ;
 392: LD_ADDR_OWVAR 20
 396: PUSH
 397: LD_INT 1
 399: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 400: LD_ADDR_EXP 17
 404: PUSH
 405: LD_STRING JMM
 407: PPUSH
 408: LD_EXP 1
 412: NOT
 413: PPUSH
 414: CALL 1907 0 2
 418: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 419: LD_ADDR_EXP 18
 423: PUSH
 424: LD_STRING Lisa
 426: PPUSH
 427: LD_EXP 1
 431: NOT
 432: PPUSH
 433: CALL 1907 0 2
 437: ST_TO_ADDR
// if not Lisa then
 438: LD_EXP 18
 442: NOT
 443: IFFALSE 458
// Lisa := CreateCharacter ( 10_Lisa ) ;
 445: LD_ADDR_EXP 18
 449: PUSH
 450: LD_STRING 10_Lisa
 452: PPUSH
 453: CALL_OW 34
 457: ST_TO_ADDR
// if not Lisa then
 458: LD_EXP 18
 462: NOT
 463: IFFALSE 478
// Lisa := CreateCharacter ( 09_Lisa ) ;
 465: LD_ADDR_EXP 18
 469: PUSH
 470: LD_STRING 09_Lisa
 472: PPUSH
 473: CALL_OW 34
 477: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 478: LD_ADDR_EXP 19
 482: PUSH
 483: LD_STRING Donaldson
 485: PPUSH
 486: LD_EXP 1
 490: NOT
 491: PPUSH
 492: CALL 1907 0 2
 496: ST_TO_ADDR
// if not Donaldson then
 497: LD_EXP 19
 501: NOT
 502: IFFALSE 517
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 504: LD_ADDR_EXP 19
 508: PUSH
 509: LD_STRING 10_Donaldson
 511: PPUSH
 512: CALL_OW 34
 516: ST_TO_ADDR
// if not Donaldson then
 517: LD_EXP 19
 521: NOT
 522: IFFALSE 537
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 524: LD_ADDR_EXP 19
 528: PUSH
 529: LD_STRING 09_Donaldson
 531: PPUSH
 532: CALL_OW 34
 536: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 537: LD_ADDR_EXP 20
 541: PUSH
 542: LD_STRING Bobby
 544: PPUSH
 545: LD_EXP 1
 549: NOT
 550: PPUSH
 551: CALL 1907 0 2
 555: ST_TO_ADDR
// if not Bobby then
 556: LD_EXP 20
 560: NOT
 561: IFFALSE 576
// Bobby := CreateCharacter ( 10_Bobby ) ;
 563: LD_ADDR_EXP 20
 567: PUSH
 568: LD_STRING 10_Bobby
 570: PPUSH
 571: CALL_OW 34
 575: ST_TO_ADDR
// if not Bobby then
 576: LD_EXP 20
 580: NOT
 581: IFFALSE 596
// Bobby := CreateCharacter ( 09_Bobby ) ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_STRING 09_Bobby
 590: PPUSH
 591: CALL_OW 34
 595: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 596: LD_ADDR_EXP 21
 600: PUSH
 601: LD_STRING Cyrus
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: CALL 1907 0 2
 614: ST_TO_ADDR
// if not Cyrus then
 615: LD_EXP 21
 619: NOT
 620: IFFALSE 635
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 622: LD_ADDR_EXP 21
 626: PUSH
 627: LD_STRING 10_Cyrus
 629: PPUSH
 630: CALL_OW 34
 634: ST_TO_ADDR
// if not Cyrus then
 635: LD_EXP 21
 639: NOT
 640: IFFALSE 655
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 642: LD_ADDR_EXP 21
 646: PUSH
 647: LD_STRING 09_Cyrus
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 655: LD_ADDR_EXP 22
 659: PUSH
 660: LD_STRING Denis
 662: PPUSH
 663: LD_EXP 1
 667: NOT
 668: PPUSH
 669: CALL 1907 0 2
 673: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 674: LD_ADDR_EXP 23
 678: PUSH
 679: LD_STRING Brown
 681: PPUSH
 682: LD_EXP 1
 686: NOT
 687: PPUSH
 688: CALL 1907 0 2
 692: ST_TO_ADDR
// if not Brown then
 693: LD_EXP 23
 697: NOT
 698: IFFALSE 713
// Brown := CreateCharacter ( 10_Brown ) ;
 700: LD_ADDR_EXP 23
 704: PUSH
 705: LD_STRING 10_Brown
 707: PPUSH
 708: CALL_OW 34
 712: ST_TO_ADDR
// if not Brown then
 713: LD_EXP 23
 717: NOT
 718: IFFALSE 733
// Brown := CreateCharacter ( 08_Brown ) ;
 720: LD_ADDR_EXP 23
 724: PUSH
 725: LD_STRING 08_Brown
 727: PPUSH
 728: CALL_OW 34
 732: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 733: LD_ADDR_EXP 24
 737: PUSH
 738: LD_STRING Gladstone
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: CALL 1907 0 2
 751: ST_TO_ADDR
// if not Gladstone then
 752: LD_EXP 24
 756: NOT
 757: IFFALSE 772
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 759: LD_ADDR_EXP 24
 763: PUSH
 764: LD_STRING 10_Gladstone
 766: PPUSH
 767: CALL_OW 34
 771: ST_TO_ADDR
// if not Gladstone then
 772: LD_EXP 24
 776: NOT
 777: IFFALSE 792
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 779: LD_ADDR_EXP 24
 783: PUSH
 784: LD_STRING 08_Gladstone
 786: PPUSH
 787: CALL_OW 34
 791: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 792: LD_ADDR_EXP 25
 796: PUSH
 797: LD_STRING Houten
 799: PPUSH
 800: LD_EXP 1
 804: NOT
 805: PPUSH
 806: CALL 1907 0 2
 810: ST_TO_ADDR
// if not Houten then
 811: LD_EXP 25
 815: NOT
 816: IFFALSE 831
// Houten := CreateCharacter ( 10_Houten ) ;
 818: LD_ADDR_EXP 25
 822: PUSH
 823: LD_STRING 10_Houten
 825: PPUSH
 826: CALL_OW 34
 830: ST_TO_ADDR
// if not Houten then
 831: LD_EXP 25
 835: NOT
 836: IFFALSE 851
// Houten := CreateCharacter ( 09_Houten ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING 09_Houten
 845: PPUSH
 846: CALL_OW 34
 850: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 851: LD_ADDR_EXP 27
 855: PUSH
 856: LD_STRING Cornel
 858: PPUSH
 859: LD_EXP 1
 863: NOT
 864: PPUSH
 865: CALL 1907 0 2
 869: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 870: LD_ADDR_EXP 28
 874: PUSH
 875: LD_STRING Gary
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: CALL 1907 0 2
 888: ST_TO_ADDR
// if not Gary then
 889: LD_EXP 28
 893: NOT
 894: IFFALSE 909
// Gary := CreateCharacter ( 10_Gary ) ;
 896: LD_ADDR_EXP 28
 900: PUSH
 901: LD_STRING 10_Gary
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 909: LD_ADDR_EXP 29
 913: PUSH
 914: LD_STRING Frank
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: CALL 1907 0 2
 927: ST_TO_ADDR
// if not Frank then
 928: LD_EXP 29
 932: NOT
 933: IFFALSE 948
// Frank := CreateCharacter ( 08_Frank ) ;
 935: LD_ADDR_EXP 29
 939: PUSH
 940: LD_STRING 08_Frank
 942: PPUSH
 943: CALL_OW 34
 947: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 948: LD_ADDR_EXP 30
 952: PUSH
 953: LD_STRING Kikuchi
 955: PPUSH
 956: LD_EXP 1
 960: NOT
 961: PPUSH
 962: CALL 1907 0 2
 966: ST_TO_ADDR
// if not Kikuchi then
 967: LD_EXP 30
 971: NOT
 972: IFFALSE 987
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 974: LD_ADDR_EXP 30
 978: PUSH
 979: LD_STRING 08_Kikuchi
 981: PPUSH
 982: CALL_OW 34
 986: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 987: LD_ADDR_VAR 0 5
 991: PUSH
 992: LD_EXP 18
 996: PUSH
 997: LD_EXP 19
1001: PUSH
1002: LD_EXP 20
1006: PUSH
1007: LD_EXP 21
1011: PUSH
1012: LD_EXP 22
1016: PUSH
1017: LD_EXP 23
1021: PUSH
1022: LD_EXP 24
1026: PUSH
1027: LD_EXP 25
1031: PUSH
1032: LD_EXP 27
1036: PUSH
1037: LD_EXP 28
1041: PUSH
1042: LD_EXP 29
1046: PUSH
1047: LD_EXP 30
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: ST_TO_ADDR
// tmp := tmp diff 0 ;
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_VAR 0 5
1075: PUSH
1076: LD_INT 0
1078: DIFF
1079: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1080: LD_ADDR_VAR 0 5
1084: PUSH
1085: LD_VAR 0 5
1089: PUSH
1090: LD_STRING 10_lock
1092: PPUSH
1093: CALL_OW 31
1097: UNION
1098: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_VAR 0 5
1108: PUSH
1109: LD_STRING 10c_lock
1111: PPUSH
1112: CALL_OW 31
1116: UNION
1117: ST_TO_ADDR
// for i in tmp do
1118: LD_ADDR_VAR 0 2
1122: PUSH
1123: LD_VAR 0 5
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1160
// if GetClass ( i ) = class_mortar then
1131: LD_VAR 0 2
1135: PPUSH
1136: CALL_OW 257
1140: PUSH
1141: LD_INT 8
1143: EQUAL
1144: IFFALSE 1158
// SetClass ( i , class_soldier ) ;
1146: LD_VAR 0 2
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 336
1158: GO 1128
1160: POP
1161: POP
// if tmp < 12 then
1162: LD_VAR 0 5
1166: PUSH
1167: LD_INT 12
1169: LESS
1170: IFFALSE 1268
// begin k := 16 - tmp ;
1172: LD_ADDR_VAR 0 3
1176: PUSH
1177: LD_INT 16
1179: PUSH
1180: LD_VAR 0 5
1184: MINUS
1185: ST_TO_ADDR
// for i = 1 to k do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: DOUBLE
1192: LD_INT 1
1194: DEC
1195: ST_TO_ADDR
1196: LD_VAR 0 3
1200: PUSH
1201: FOR_TO
1202: IFFALSE 1266
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: LD_INT 3
1218: PUSH
1219: LD_INT 4
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_INT 5
1234: PPUSH
1235: CALL_OW 12
1239: ARRAY
1240: PPUSH
1241: LD_INT 6
1243: PPUSH
1244: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_VAR 0 5
1257: PUSH
1258: CALL_OW 44
1262: ADD
1263: ST_TO_ADDR
// end ;
1264: GO 1201
1266: POP
1267: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1268: LD_ADDR_VAR 0 6
1272: PUSH
1273: LD_STRING 1
1275: PPUSH
1276: LD_INT 12
1278: PPUSH
1279: LD_INT 12
1281: PPUSH
1282: LD_INT -5
1284: PUSH
1285: LD_EXP 17
1289: PUSH
1290: LD_INT -2
1292: PUSH
1293: LD_INT -3
1295: PUSH
1296: LD_INT -5
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_VAR 0 5
1310: ADD
1311: PUSH
1312: LD_INT -6
1314: PUSH
1315: LD_INT -4
1317: PUSH
1318: LD_EXP 26
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: ADD
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 4
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 3
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 5
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 4
1365: PUSH
1366: LD_INT 0
1368: PUSH
1369: LD_INT 3
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 5
1379: PUSH
1380: LD_INT 0
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 42
1402: ST_TO_ADDR
// others := tmp diff selected ;
1403: LD_ADDR_VAR 0 9
1407: PUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_VAR 0 6
1417: DIFF
1418: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1419: LD_ADDR_VAR 0 9
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: LD_EXP 18
1433: PUSH
1434: LD_EXP 19
1438: PUSH
1439: LD_EXP 20
1443: PUSH
1444: LD_EXP 21
1448: PUSH
1449: LD_EXP 22
1453: PUSH
1454: LD_EXP 23
1458: PUSH
1459: LD_EXP 24
1463: PUSH
1464: LD_EXP 25
1468: PUSH
1469: LD_EXP 27
1473: PUSH
1474: LD_EXP 28
1478: PUSH
1479: LD_EXP 29
1483: PUSH
1484: LD_EXP 30
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: DIFF
1503: ST_TO_ADDR
// if others then
1504: LD_VAR 0 9
1508: IFFALSE 1522
// SaveCharacters ( others , 11_others ) ;
1510: LD_VAR 0 9
1514: PPUSH
1515: LD_STRING 11_others
1517: PPUSH
1518: CALL_OW 38
// us_team := tmp ;
1522: LD_ADDR_EXP 31
1526: PUSH
1527: LD_VAR 0 5
1531: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1532: LD_ADDR_VAR 0 7
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 4
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 5
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 5
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 7
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: LD_INT 2
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 7
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: ST_TO_ADDR
// for i in JMM ^ selected do
1634: LD_ADDR_VAR 0 2
1638: PUSH
1639: LD_EXP 17
1643: PUSH
1644: LD_VAR 0 6
1648: ADD
1649: PUSH
1650: FOR_IN
1651: IFFALSE 1840
// begin if GetClass ( i ) = 3 then
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 257
1662: PUSH
1663: LD_INT 3
1665: EQUAL
1666: IFFALSE 1823
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1668: LD_ADDR_OWVAR 37
1672: PUSH
1673: LD_VAR 0 7
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_VAR 0 7
1695: PUSH
1696: LD_INT 1
1698: ARRAY
1699: PUSH
1700: LD_INT 2
1702: ARRAY
1703: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1704: LD_ADDR_OWVAR 38
1708: PUSH
1709: LD_VAR 0 7
1713: PUSH
1714: LD_INT 1
1716: ARRAY
1717: PUSH
1718: LD_INT 3
1720: ARRAY
1721: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1722: LD_ADDR_OWVAR 40
1726: PUSH
1727: LD_VAR 0 7
1731: PUSH
1732: LD_INT 1
1734: ARRAY
1735: PUSH
1736: LD_INT 4
1738: ARRAY
1739: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: LD_VAR 0 7
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 3
1757: ST_TO_ADDR
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 8
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1768: LD_VAR 0 8
1772: PPUSH
1773: LD_INT 8
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1783: LD_VAR 0 2
1787: PPUSH
1788: LD_VAR 0 8
1792: PPUSH
1793: CALL_OW 52
// if i = JMM then
1797: LD_VAR 0 2
1801: PUSH
1802: LD_EXP 17
1806: EQUAL
1807: IFFALSE 1821
// SetMark ( veh , 1 ) ;
1809: LD_VAR 0 8
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: CALL_OW 242
// end else
1821: GO 1838
// PlaceUnitArea ( i , am_hum_start , false ) ;
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_INT 9
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 49
// end ;
1838: GO 1650
1840: POP
1841: POP
// vc_chassis := us_medium_tracked ;
1842: LD_ADDR_OWVAR 37
1846: PUSH
1847: LD_INT 3
1849: ST_TO_ADDR
// vc_engine := engine_solar ;
1850: LD_ADDR_OWVAR 39
1854: PUSH
1855: LD_INT 2
1857: ST_TO_ADDR
// vc_control := control_computer ;
1858: LD_ADDR_OWVAR 38
1862: PUSH
1863: LD_INT 3
1865: ST_TO_ADDR
// vc_weapon := us_radar ;
1866: LD_ADDR_OWVAR 40
1870: PUSH
1871: LD_INT 11
1873: ST_TO_ADDR
// veh := CreateVehicle ;
1874: LD_ADDR_VAR 0 8
1878: PUSH
1879: CALL_OW 45
1883: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1884: LD_VAR 0 8
1888: PPUSH
1889: LD_INT 87
1891: PPUSH
1892: LD_INT 142
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// end ; end_of_file
1902: LD_VAR 0 1
1906: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
// if exist_mode then
1911: LD_VAR 0 2
1915: IFFALSE 1940
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1917: LD_ADDR_VAR 0 4
1921: PUSH
1922: LD_EXP 4
1926: PUSH
1927: LD_VAR 0 1
1931: STR
1932: PPUSH
1933: CALL_OW 34
1937: ST_TO_ADDR
1938: GO 1955
// unit := NewCharacter ( ident ) ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: LD_VAR 0 1
1949: PPUSH
1950: CALL_OW 25
1954: ST_TO_ADDR
// result := unit ;
1955: LD_ADDR_VAR 0 3
1959: PUSH
1960: LD_VAR 0 4
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1970: LD_INT 0
1972: PPUSH
// vc_chassis := chassis ;
1973: LD_ADDR_OWVAR 37
1977: PUSH
1978: LD_VAR 0 1
1982: ST_TO_ADDR
// vc_engine := engine ;
1983: LD_ADDR_OWVAR 39
1987: PUSH
1988: LD_VAR 0 2
1992: ST_TO_ADDR
// vc_control := control ;
1993: LD_ADDR_OWVAR 38
1997: PUSH
1998: LD_VAR 0 3
2002: ST_TO_ADDR
// vc_weapon := weapon ;
2003: LD_ADDR_OWVAR 40
2007: PUSH
2008: LD_VAR 0 4
2012: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2013: LD_ADDR_OWVAR 41
2017: PUSH
2018: LD_VAR 0 5
2022: ST_TO_ADDR
// end ;
2023: LD_VAR 0 6
2027: RET
// export function CanSayRand ( side ) ; begin
2028: LD_INT 0
2030: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2031: LD_ADDR_VAR 0 2
2035: PUSH
2036: LD_INT 22
2038: PUSH
2039: LD_VAR 0 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 2
2050: PUSH
2051: LD_INT 25
2053: PUSH
2054: LD_INT 1
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 25
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 25
2073: PUSH
2074: LD_INT 3
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 25
2083: PUSH
2084: LD_INT 4
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL_OW 69
2106: PUSH
2107: LD_EXP 17
2111: PUSH
2112: LD_EXP 29
2116: PUSH
2117: LD_EXP 18
2121: PUSH
2122: LD_EXP 19
2126: PUSH
2127: LD_EXP 20
2131: PUSH
2132: LD_EXP 21
2136: PUSH
2137: LD_EXP 22
2141: PUSH
2142: LD_EXP 23
2146: PUSH
2147: LD_EXP 24
2151: PUSH
2152: LD_EXP 25
2156: PUSH
2157: LD_EXP 26
2161: PUSH
2162: LD_EXP 27
2166: PUSH
2167: LD_EXP 28
2171: PUSH
2172: LD_EXP 30
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: DIFF
2193: ST_TO_ADDR
// end ;
2194: LD_VAR 0 2
2198: RET
// export function SayRand ( sex , dial ) ; begin
2199: LD_INT 0
2201: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2202: LD_ADDR_VAR 0 3
2206: PUSH
2207: LD_INT 22
2209: PUSH
2210: LD_INT 1
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 26
2219: PUSH
2220: LD_VAR 0 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 2
2231: PUSH
2232: LD_INT 25
2234: PUSH
2235: LD_INT 1
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 25
2244: PUSH
2245: LD_INT 2
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 25
2254: PUSH
2255: LD_INT 3
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 25
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PPUSH
2284: CALL_OW 69
2288: PUSH
2289: LD_EXP 17
2293: PUSH
2294: LD_EXP 29
2298: PUSH
2299: LD_EXP 18
2303: PUSH
2304: LD_EXP 19
2308: PUSH
2309: LD_EXP 20
2313: PUSH
2314: LD_EXP 21
2318: PUSH
2319: LD_EXP 22
2323: PUSH
2324: LD_EXP 23
2328: PUSH
2329: LD_EXP 24
2333: PUSH
2334: LD_EXP 25
2338: PUSH
2339: LD_EXP 26
2343: PUSH
2344: LD_EXP 27
2348: PUSH
2349: LD_EXP 28
2353: PUSH
2354: LD_EXP 30
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: DIFF
2375: ST_TO_ADDR
// if not result then
2376: LD_VAR 0 3
2380: NOT
2381: IFFALSE 2385
// exit ;
2383: GO 2413
// result := result [ 1 ] ;
2385: LD_ADDR_VAR 0 3
2389: PUSH
2390: LD_VAR 0 3
2394: PUSH
2395: LD_INT 1
2397: ARRAY
2398: ST_TO_ADDR
// Say ( result , dial ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_VAR 0 2
2408: PPUSH
2409: CALL_OW 88
// end ;
2413: LD_VAR 0 3
2417: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2418: LD_INT 0
2420: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 26
2438: PUSH
2439: LD_VAR 0 1
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: LD_INT 25
2453: PUSH
2454: LD_INT 1
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 25
2463: PUSH
2464: LD_INT 2
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 25
2473: PUSH
2474: LD_INT 3
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 4
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_EXP 17
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_EXP 18
2522: PUSH
2523: LD_EXP 19
2527: PUSH
2528: LD_EXP 20
2532: PUSH
2533: LD_EXP 21
2537: PUSH
2538: LD_EXP 22
2542: PUSH
2543: LD_EXP 23
2547: PUSH
2548: LD_EXP 24
2552: PUSH
2553: LD_EXP 25
2557: PUSH
2558: LD_EXP 26
2562: PUSH
2563: LD_EXP 27
2567: PUSH
2568: LD_EXP 28
2572: PUSH
2573: LD_EXP 30
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: LD_VAR 0 3
2598: ADD
2599: DIFF
2600: ST_TO_ADDR
// if not result then
2601: LD_VAR 0 4
2605: NOT
2606: IFFALSE 2610
// exit ;
2608: GO 2638
// result := result [ 1 ] ;
2610: LD_ADDR_VAR 0 4
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: ST_TO_ADDR
// Say ( result , dial ) ;
2624: LD_VAR 0 4
2628: PPUSH
2629: LD_VAR 0 2
2633: PPUSH
2634: CALL_OW 88
// end ;
2638: LD_VAR 0 4
2642: RET
// export function WantPlant ( unit ) ; var task ; begin
2643: LD_INT 0
2645: PPUSH
2646: PPUSH
// result := false ;
2647: LD_ADDR_VAR 0 2
2651: PUSH
2652: LD_INT 0
2654: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: CALL_OW 437
2669: ST_TO_ADDR
// if task then
2670: LD_VAR 0 3
2674: IFFALSE 2702
// if task [ 1 ] [ 1 ] = p then
2676: LD_VAR 0 3
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: PUSH
2689: LD_STRING p
2691: EQUAL
2692: IFFALSE 2702
// result := true ;
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 1
2701: ST_TO_ADDR
// end ;
2702: LD_VAR 0 2
2706: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
2712: PPUSH
// if pos < 1 then
2713: LD_VAR 0 2
2717: PUSH
2718: LD_INT 1
2720: LESS
2721: IFFALSE 2725
// exit ;
2723: GO 3028
// if pos = 1 then
2725: LD_VAR 0 2
2729: PUSH
2730: LD_INT 1
2732: EQUAL
2733: IFFALSE 2766
// result := Replace ( arr , pos [ 1 ] , value ) else
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_VAR 0 2
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: PPUSH
2754: LD_VAR 0 3
2758: PPUSH
2759: CALL_OW 1
2763: ST_TO_ADDR
2764: GO 3028
// begin tmp := arr ;
2766: LD_ADDR_VAR 0 6
2770: PUSH
2771: LD_VAR 0 1
2775: ST_TO_ADDR
// s_arr := [ tmp ] ;
2776: LD_ADDR_VAR 0 7
2780: PUSH
2781: LD_VAR 0 6
2785: PUSH
2786: EMPTY
2787: LIST
2788: ST_TO_ADDR
// for i = 1 to pos - 1 do
2789: LD_ADDR_VAR 0 5
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 1
2806: MINUS
2807: PUSH
2808: FOR_TO
2809: IFFALSE 2854
// begin tmp := tmp [ pos [ i ] ] ;
2811: LD_ADDR_VAR 0 6
2815: PUSH
2816: LD_VAR 0 6
2820: PUSH
2821: LD_VAR 0 2
2825: PUSH
2826: LD_VAR 0 5
2830: ARRAY
2831: ARRAY
2832: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2833: LD_ADDR_VAR 0 7
2837: PUSH
2838: LD_VAR 0 7
2842: PUSH
2843: LD_VAR 0 6
2847: PUSH
2848: EMPTY
2849: LIST
2850: ADD
2851: ST_TO_ADDR
// end ;
2852: GO 2808
2854: POP
2855: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2856: LD_ADDR_VAR 0 6
2860: PUSH
2861: LD_VAR 0 6
2865: PPUSH
2866: LD_VAR 0 2
2870: PUSH
2871: LD_VAR 0 2
2875: ARRAY
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2887: LD_ADDR_VAR 0 7
2891: PUSH
2892: LD_VAR 0 7
2896: PPUSH
2897: LD_VAR 0 7
2901: PPUSH
2902: LD_VAR 0 6
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
// for i = s_arr downto 2 do
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: DOUBLE
2918: LD_VAR 0 7
2922: INC
2923: ST_TO_ADDR
2924: LD_INT 2
2926: PUSH
2927: FOR_DOWNTO
2928: IFFALSE 3012
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2930: LD_ADDR_VAR 0 6
2934: PUSH
2935: LD_VAR 0 7
2939: PUSH
2940: LD_VAR 0 5
2944: PUSH
2945: LD_INT 1
2947: MINUS
2948: ARRAY
2949: PPUSH
2950: LD_VAR 0 2
2954: PUSH
2955: LD_VAR 0 5
2959: PUSH
2960: LD_INT 1
2962: MINUS
2963: ARRAY
2964: PPUSH
2965: LD_VAR 0 7
2969: PUSH
2970: LD_VAR 0 5
2974: ARRAY
2975: PPUSH
2976: CALL_OW 1
2980: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
2981: LD_ADDR_VAR 0 7
2985: PUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 1
2998: MINUS
2999: PPUSH
3000: LD_VAR 0 6
3004: PPUSH
3005: CALL_OW 1
3009: ST_TO_ADDR
// end ;
3010: GO 2927
3012: POP
3013: POP
// result := s_arr [ 1 ] ;
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 7
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// end ; end ;
3028: LD_VAR 0 4
3032: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3033: LD_INT 0
3035: PPUSH
3036: PPUSH
// if not list then
3037: LD_VAR 0 1
3041: NOT
3042: IFFALSE 3046
// exit ;
3044: GO 3137
// i := list [ pos1 ] ;
3046: LD_ADDR_VAR 0 5
3050: PUSH
3051: LD_VAR 0 1
3055: PUSH
3056: LD_VAR 0 2
3060: ARRAY
3061: ST_TO_ADDR
// if not i then
3062: LD_VAR 0 5
3066: NOT
3067: IFFALSE 3071
// exit ;
3069: GO 3137
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3071: LD_ADDR_VAR 0 1
3075: PUSH
3076: LD_VAR 0 1
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: LD_VAR 0 1
3090: PUSH
3091: LD_VAR 0 3
3095: ARRAY
3096: PPUSH
3097: CALL_OW 1
3101: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_VAR 0 1
3111: PPUSH
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_VAR 0 5
3121: PPUSH
3122: CALL_OW 1
3126: ST_TO_ADDR
// result := list ;
3127: LD_ADDR_VAR 0 4
3131: PUSH
3132: LD_VAR 0 1
3136: ST_TO_ADDR
// end ;
3137: LD_VAR 0 4
3141: RET
// export function Add ( list , pos , val ) ; begin
3142: LD_INT 0
3144: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3145: LD_ADDR_VAR 0 4
3149: PUSH
3150: LD_VAR 0 1
3154: PPUSH
3155: LD_VAR 0 2
3159: PPUSH
3160: LD_VAR 0 3
3164: PPUSH
3165: CALL 2707 0 3
3169: ST_TO_ADDR
3170: LD_VAR 0 4
3174: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3175: LD_INT 0
3177: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3178: LD_ADDR_VAR 0 5
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 250
3192: PPUSH
3193: LD_VAR 0 1
3197: PPUSH
3198: CALL_OW 251
3202: PPUSH
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_VAR 0 3
3212: PPUSH
3213: LD_VAR 0 4
3217: PPUSH
3218: CALL 3228 0 5
3222: ST_TO_ADDR
// end ;
3223: LD_VAR 0 5
3227: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
// if not list then
3234: LD_VAR 0 3
3238: NOT
3239: IFFALSE 3243
// exit ;
3241: GO 3631
// result := [ ] ;
3243: LD_ADDR_VAR 0 6
3247: PUSH
3248: EMPTY
3249: ST_TO_ADDR
// for i in list do
3250: LD_ADDR_VAR 0 7
3254: PUSH
3255: LD_VAR 0 3
3259: PUSH
3260: FOR_IN
3261: IFFALSE 3463
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 7
3272: PPUSH
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_VAR 0 2
3282: PPUSH
3283: CALL_OW 297
3287: ST_TO_ADDR
// if not result then
3288: LD_VAR 0 6
3292: NOT
3293: IFFALSE 3319
// result := [ [ i , tmp ] ] else
3295: LD_ADDR_VAR 0 6
3299: PUSH
3300: LD_VAR 0 7
3304: PUSH
3305: LD_VAR 0 9
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: ST_TO_ADDR
3317: GO 3461
// begin if result [ result ] [ 2 ] < tmp then
3319: LD_VAR 0 6
3323: PUSH
3324: LD_VAR 0 6
3328: ARRAY
3329: PUSH
3330: LD_INT 2
3332: ARRAY
3333: PUSH
3334: LD_VAR 0 9
3338: LESS
3339: IFFALSE 3381
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3341: LD_ADDR_VAR 0 6
3345: PUSH
3346: LD_VAR 0 6
3350: PPUSH
3351: LD_VAR 0 6
3355: PUSH
3356: LD_INT 1
3358: PLUS
3359: PPUSH
3360: LD_VAR 0 7
3364: PUSH
3365: LD_VAR 0 9
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PPUSH
3374: CALL_OW 2
3378: ST_TO_ADDR
3379: GO 3461
// for j = 1 to result do
3381: LD_ADDR_VAR 0 8
3385: PUSH
3386: DOUBLE
3387: LD_INT 1
3389: DEC
3390: ST_TO_ADDR
3391: LD_VAR 0 6
3395: PUSH
3396: FOR_TO
3397: IFFALSE 3459
// begin if tmp < result [ j ] [ 2 ] then
3399: LD_VAR 0 9
3403: PUSH
3404: LD_VAR 0 6
3408: PUSH
3409: LD_VAR 0 8
3413: ARRAY
3414: PUSH
3415: LD_INT 2
3417: ARRAY
3418: LESS
3419: IFFALSE 3457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3421: LD_ADDR_VAR 0 6
3425: PUSH
3426: LD_VAR 0 6
3430: PPUSH
3431: LD_VAR 0 8
3435: PPUSH
3436: LD_VAR 0 7
3440: PUSH
3441: LD_VAR 0 9
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 2
3454: ST_TO_ADDR
// break ;
3455: GO 3459
// end ; end ;
3457: GO 3396
3459: POP
3460: POP
// end ; end ;
3461: GO 3260
3463: POP
3464: POP
// if result and not asc then
3465: LD_VAR 0 6
3469: PUSH
3470: LD_VAR 0 4
3474: NOT
3475: AND
3476: IFFALSE 3551
// begin tmp := result ;
3478: LD_ADDR_VAR 0 9
3482: PUSH
3483: LD_VAR 0 6
3487: ST_TO_ADDR
// for i = tmp downto 1 do
3488: LD_ADDR_VAR 0 7
3492: PUSH
3493: DOUBLE
3494: LD_VAR 0 9
3498: INC
3499: ST_TO_ADDR
3500: LD_INT 1
3502: PUSH
3503: FOR_DOWNTO
3504: IFFALSE 3549
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3506: LD_ADDR_VAR 0 6
3510: PUSH
3511: LD_VAR 0 6
3515: PPUSH
3516: LD_VAR 0 9
3520: PUSH
3521: LD_VAR 0 7
3525: MINUS
3526: PUSH
3527: LD_INT 1
3529: PLUS
3530: PPUSH
3531: LD_VAR 0 9
3535: PUSH
3536: LD_VAR 0 7
3540: ARRAY
3541: PPUSH
3542: CALL_OW 1
3546: ST_TO_ADDR
3547: GO 3503
3549: POP
3550: POP
// end ; tmp := [ ] ;
3551: LD_ADDR_VAR 0 9
3555: PUSH
3556: EMPTY
3557: ST_TO_ADDR
// if mode then
3558: LD_VAR 0 5
3562: IFFALSE 3631
// begin for i = 1 to result do
3564: LD_ADDR_VAR 0 7
3568: PUSH
3569: DOUBLE
3570: LD_INT 1
3572: DEC
3573: ST_TO_ADDR
3574: LD_VAR 0 6
3578: PUSH
3579: FOR_TO
3580: IFFALSE 3619
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3582: LD_ADDR_VAR 0 9
3586: PUSH
3587: LD_VAR 0 9
3591: PPUSH
3592: LD_VAR 0 7
3596: PPUSH
3597: LD_VAR 0 6
3601: PUSH
3602: LD_VAR 0 7
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
3617: GO 3579
3619: POP
3620: POP
// result := tmp ;
3621: LD_ADDR_VAR 0 6
3625: PUSH
3626: LD_VAR 0 9
3630: ST_TO_ADDR
// end ; end ;
3631: LD_VAR 0 6
3635: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3636: LD_INT 0
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3644: LD_ADDR_VAR 0 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: ST_TO_ADDR
// if not x or not y then
3666: LD_VAR 0 2
3670: NOT
3671: PUSH
3672: LD_VAR 0 3
3676: NOT
3677: OR
3678: IFFALSE 3682
// exit ;
3680: GO 5310
// if not range then
3682: LD_VAR 0 4
3686: NOT
3687: IFFALSE 3697
// range := 10 ;
3689: LD_ADDR_VAR 0 4
3693: PUSH
3694: LD_INT 10
3696: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3697: LD_ADDR_VAR 0 8
3701: PUSH
3702: LD_INT 81
3704: PUSH
3705: LD_VAR 0 1
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 92
3716: PUSH
3717: LD_VAR 0 2
3721: PUSH
3722: LD_VAR 0 3
3726: PUSH
3727: LD_VAR 0 4
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PPUSH
3742: CALL_OW 69
3746: ST_TO_ADDR
// if not tmp then
3747: LD_VAR 0 8
3751: NOT
3752: IFFALSE 3756
// exit ;
3754: GO 5310
// for i in tmp do
3756: LD_ADDR_VAR 0 6
3760: PUSH
3761: LD_VAR 0 8
3765: PUSH
3766: FOR_IN
3767: IFFALSE 5285
// begin points := [ 0 , 0 , 0 ] ;
3769: LD_ADDR_VAR 0 9
3773: PUSH
3774: LD_INT 0
3776: PUSH
3777: LD_INT 0
3779: PUSH
3780: LD_INT 0
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: ST_TO_ADDR
// bpoints := 1 ;
3788: LD_ADDR_VAR 0 10
3792: PUSH
3793: LD_INT 1
3795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3796: LD_VAR 0 6
3800: PPUSH
3801: CALL_OW 247
3805: PUSH
3806: LD_INT 1
3808: DOUBLE
3809: EQUAL
3810: IFTRUE 3814
3812: GO 4392
3814: POP
// begin if GetClass ( i ) = 1 then
3815: LD_VAR 0 6
3819: PPUSH
3820: CALL_OW 257
3824: PUSH
3825: LD_INT 1
3827: EQUAL
3828: IFFALSE 3849
// points := [ 10 , 5 , 3 ] ;
3830: LD_ADDR_VAR 0 9
3834: PUSH
3835: LD_INT 10
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: LD_INT 3
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3849: LD_VAR 0 6
3853: PPUSH
3854: CALL_OW 257
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: IN
3873: IFFALSE 3894
// points := [ 3 , 2 , 1 ] ;
3875: LD_ADDR_VAR 0 9
3879: PUSH
3880: LD_INT 3
3882: PUSH
3883: LD_INT 2
3885: PUSH
3886: LD_INT 1
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3894: LD_VAR 0 6
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: IFFALSE 3928
// points := [ 130 , 5 , 2 ] ;
3909: LD_ADDR_VAR 0 9
3913: PUSH
3914: LD_INT 130
3916: PUSH
3917: LD_INT 5
3919: PUSH
3920: LD_INT 2
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3928: LD_VAR 0 6
3932: PPUSH
3933: CALL_OW 257
3937: PUSH
3938: LD_INT 8
3940: EQUAL
3941: IFFALSE 3962
// points := [ 35 , 35 , 30 ] ;
3943: LD_ADDR_VAR 0 9
3947: PUSH
3948: LD_INT 35
3950: PUSH
3951: LD_INT 35
3953: PUSH
3954: LD_INT 30
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3962: LD_VAR 0 6
3966: PPUSH
3967: CALL_OW 257
3971: PUSH
3972: LD_INT 9
3974: EQUAL
3975: IFFALSE 3996
// points := [ 20 , 55 , 40 ] ;
3977: LD_ADDR_VAR 0 9
3981: PUSH
3982: LD_INT 20
3984: PUSH
3985: LD_INT 55
3987: PUSH
3988: LD_INT 40
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
3996: LD_VAR 0 6
4000: PPUSH
4001: CALL_OW 257
4005: PUSH
4006: LD_INT 12
4008: PUSH
4009: LD_INT 16
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4037
// points := [ 5 , 3 , 2 ] ;
4018: LD_ADDR_VAR 0 9
4022: PUSH
4023: LD_INT 5
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4037: LD_VAR 0 6
4041: PPUSH
4042: CALL_OW 257
4046: PUSH
4047: LD_INT 17
4049: EQUAL
4050: IFFALSE 4071
// points := [ 100 , 50 , 75 ] ;
4052: LD_ADDR_VAR 0 9
4056: PUSH
4057: LD_INT 100
4059: PUSH
4060: LD_INT 50
4062: PUSH
4063: LD_INT 75
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4071: LD_VAR 0 6
4075: PPUSH
4076: CALL_OW 257
4080: PUSH
4081: LD_INT 15
4083: EQUAL
4084: IFFALSE 4105
// points := [ 10 , 5 , 3 ] ;
4086: LD_ADDR_VAR 0 9
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 3
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4105: LD_VAR 0 6
4109: PPUSH
4110: CALL_OW 257
4114: PUSH
4115: LD_INT 14
4117: EQUAL
4118: IFFALSE 4139
// points := [ 10 , 0 , 0 ] ;
4120: LD_ADDR_VAR 0 9
4124: PUSH
4125: LD_INT 10
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4139: LD_VAR 0 6
4143: PPUSH
4144: CALL_OW 257
4148: PUSH
4149: LD_INT 11
4151: EQUAL
4152: IFFALSE 4173
// points := [ 30 , 10 , 5 ] ;
4154: LD_ADDR_VAR 0 9
4158: PUSH
4159: LD_INT 30
4161: PUSH
4162: LD_INT 10
4164: PUSH
4165: LD_INT 5
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4173: LD_VAR 0 1
4177: PPUSH
4178: LD_INT 5
4180: PPUSH
4181: CALL_OW 321
4185: PUSH
4186: LD_INT 2
4188: EQUAL
4189: IFFALSE 4206
// bpoints := bpoints * 1.8 ;
4191: LD_ADDR_VAR 0 10
4195: PUSH
4196: LD_VAR 0 10
4200: PUSH
4201: LD_REAL  1.80000000000000E+0000
4204: MUL
4205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4206: LD_VAR 0 6
4210: PPUSH
4211: CALL_OW 257
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: LD_INT 2
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: IN
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: LD_INT 51
4242: PPUSH
4243: CALL_OW 321
4247: PUSH
4248: LD_INT 2
4250: EQUAL
4251: AND
4252: IFFALSE 4269
// bpoints := bpoints * 1.2 ;
4254: LD_ADDR_VAR 0 10
4258: PUSH
4259: LD_VAR 0 10
4263: PUSH
4264: LD_REAL  1.20000000000000E+0000
4267: MUL
4268: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4269: LD_VAR 0 6
4273: PPUSH
4274: CALL_OW 257
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 7
4284: PUSH
4285: LD_INT 9
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: IN
4293: PUSH
4294: LD_VAR 0 1
4298: PPUSH
4299: LD_INT 52
4301: PPUSH
4302: CALL_OW 321
4306: PUSH
4307: LD_INT 2
4309: EQUAL
4310: AND
4311: IFFALSE 4328
// bpoints := bpoints * 1.5 ;
4313: LD_ADDR_VAR 0 10
4317: PUSH
4318: LD_VAR 0 10
4322: PUSH
4323: LD_REAL  1.50000000000000E+0000
4326: MUL
4327: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4328: LD_VAR 0 1
4332: PPUSH
4333: LD_INT 66
4335: PPUSH
4336: CALL_OW 321
4340: PUSH
4341: LD_INT 2
4343: EQUAL
4344: IFFALSE 4361
// bpoints := bpoints * 1.1 ;
4346: LD_ADDR_VAR 0 10
4350: PUSH
4351: LD_VAR 0 10
4355: PUSH
4356: LD_REAL  1.10000000000000E+0000
4359: MUL
4360: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4361: LD_ADDR_VAR 0 10
4365: PUSH
4366: LD_VAR 0 10
4370: PUSH
4371: LD_VAR 0 6
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 259
4383: PUSH
4384: LD_REAL  1.15000000000000E+0000
4387: MUL
4388: MUL
4389: ST_TO_ADDR
// end ; unit_vehicle :
4390: GO 5214
4392: LD_INT 2
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 5202
4400: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4401: LD_VAR 0 6
4405: PPUSH
4406: CALL_OW 264
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: LD_INT 42
4416: PUSH
4417: LD_INT 24
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: IN
4425: IFFALSE 4446
// points := [ 25 , 5 , 3 ] ;
4427: LD_ADDR_VAR 0 9
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4446: LD_VAR 0 6
4450: PPUSH
4451: CALL_OW 264
4455: PUSH
4456: LD_INT 4
4458: PUSH
4459: LD_INT 43
4461: PUSH
4462: LD_INT 25
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: IN
4470: IFFALSE 4491
// points := [ 40 , 15 , 5 ] ;
4472: LD_ADDR_VAR 0 9
4476: PUSH
4477: LD_INT 40
4479: PUSH
4480: LD_INT 15
4482: PUSH
4483: LD_INT 5
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4491: LD_VAR 0 6
4495: PPUSH
4496: CALL_OW 264
4500: PUSH
4501: LD_INT 3
4503: PUSH
4504: LD_INT 23
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: IN
4511: IFFALSE 4532
// points := [ 7 , 25 , 8 ] ;
4513: LD_ADDR_VAR 0 9
4517: PUSH
4518: LD_INT 7
4520: PUSH
4521: LD_INT 25
4523: PUSH
4524: LD_INT 8
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4532: LD_VAR 0 6
4536: PPUSH
4537: CALL_OW 264
4541: PUSH
4542: LD_INT 5
4544: PUSH
4545: LD_INT 27
4547: PUSH
4548: LD_INT 44
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: IN
4556: IFFALSE 4577
// points := [ 14 , 50 , 16 ] ;
4558: LD_ADDR_VAR 0 9
4562: PUSH
4563: LD_INT 14
4565: PUSH
4566: LD_INT 50
4568: PUSH
4569: LD_INT 16
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4577: LD_VAR 0 6
4581: PPUSH
4582: CALL_OW 264
4586: PUSH
4587: LD_INT 6
4589: PUSH
4590: LD_INT 46
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: IN
4597: IFFALSE 4618
// points := [ 32 , 120 , 70 ] ;
4599: LD_ADDR_VAR 0 9
4603: PUSH
4604: LD_INT 32
4606: PUSH
4607: LD_INT 120
4609: PUSH
4610: LD_INT 70
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4618: LD_VAR 0 6
4622: PPUSH
4623: CALL_OW 264
4627: PUSH
4628: LD_INT 7
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 45
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: IN
4642: IFFALSE 4663
// points := [ 35 , 20 , 45 ] ;
4644: LD_ADDR_VAR 0 9
4648: PUSH
4649: LD_INT 35
4651: PUSH
4652: LD_INT 20
4654: PUSH
4655: LD_INT 45
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4663: LD_VAR 0 6
4667: PPUSH
4668: CALL_OW 264
4672: PUSH
4673: LD_INT 47
4675: PUSH
4676: EMPTY
4677: LIST
4678: IN
4679: IFFALSE 4700
// points := [ 67 , 45 , 75 ] ;
4681: LD_ADDR_VAR 0 9
4685: PUSH
4686: LD_INT 67
4688: PUSH
4689: LD_INT 45
4691: PUSH
4692: LD_INT 75
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4700: LD_VAR 0 6
4704: PPUSH
4705: CALL_OW 264
4709: PUSH
4710: LD_INT 26
4712: PUSH
4713: EMPTY
4714: LIST
4715: IN
4716: IFFALSE 4737
// points := [ 120 , 30 , 80 ] ;
4718: LD_ADDR_VAR 0 9
4722: PUSH
4723: LD_INT 120
4725: PUSH
4726: LD_INT 30
4728: PUSH
4729: LD_INT 80
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4737: LD_VAR 0 6
4741: PPUSH
4742: CALL_OW 264
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: EMPTY
4751: LIST
4752: IN
4753: IFFALSE 4774
// points := [ 40 , 1 , 1 ] ;
4755: LD_ADDR_VAR 0 9
4759: PUSH
4760: LD_INT 40
4762: PUSH
4763: LD_INT 1
4765: PUSH
4766: LD_INT 1
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4774: LD_VAR 0 6
4778: PPUSH
4779: CALL_OW 264
4783: PUSH
4784: LD_INT 29
4786: PUSH
4787: EMPTY
4788: LIST
4789: IN
4790: IFFALSE 4811
// points := [ 70 , 200 , 400 ] ;
4792: LD_ADDR_VAR 0 9
4796: PUSH
4797: LD_INT 70
4799: PUSH
4800: LD_INT 200
4802: PUSH
4803: LD_INT 400
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4811: LD_VAR 0 6
4815: PPUSH
4816: CALL_OW 264
4820: PUSH
4821: LD_INT 14
4823: PUSH
4824: LD_INT 53
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: IN
4831: IFFALSE 4852
// points := [ 40 , 10 , 20 ] ;
4833: LD_ADDR_VAR 0 9
4837: PUSH
4838: LD_INT 40
4840: PUSH
4841: LD_INT 10
4843: PUSH
4844: LD_INT 20
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4852: LD_VAR 0 6
4856: PPUSH
4857: CALL_OW 264
4861: PUSH
4862: LD_INT 9
4864: PUSH
4865: EMPTY
4866: LIST
4867: IN
4868: IFFALSE 4889
// points := [ 5 , 70 , 20 ] ;
4870: LD_ADDR_VAR 0 9
4874: PUSH
4875: LD_INT 5
4877: PUSH
4878: LD_INT 70
4880: PUSH
4881: LD_INT 20
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4889: LD_VAR 0 6
4893: PPUSH
4894: CALL_OW 264
4898: PUSH
4899: LD_INT 10
4901: PUSH
4902: EMPTY
4903: LIST
4904: IN
4905: IFFALSE 4926
// points := [ 35 , 110 , 70 ] ;
4907: LD_ADDR_VAR 0 9
4911: PUSH
4912: LD_INT 35
4914: PUSH
4915: LD_INT 110
4917: PUSH
4918: LD_INT 70
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4926: LD_VAR 0 6
4930: PPUSH
4931: CALL_OW 265
4935: PUSH
4936: LD_INT 25
4938: EQUAL
4939: IFFALSE 4960
// points := [ 80 , 65 , 100 ] ;
4941: LD_ADDR_VAR 0 9
4945: PUSH
4946: LD_INT 80
4948: PUSH
4949: LD_INT 65
4951: PUSH
4952: LD_INT 100
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4960: LD_VAR 0 6
4964: PPUSH
4965: CALL_OW 263
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: IFFALSE 5008
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
4975: LD_ADDR_VAR 0 10
4979: PUSH
4980: LD_VAR 0 10
4984: PUSH
4985: LD_VAR 0 6
4989: PPUSH
4990: CALL_OW 311
4994: PPUSH
4995: LD_INT 3
4997: PPUSH
4998: CALL_OW 259
5002: PUSH
5003: LD_INT 4
5005: MUL
5006: MUL
5007: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5008: LD_VAR 0 6
5012: PPUSH
5013: CALL_OW 263
5017: PUSH
5018: LD_INT 2
5020: EQUAL
5021: IFFALSE 5072
// begin j := IsControledBy ( i ) ;
5023: LD_ADDR_VAR 0 7
5027: PUSH
5028: LD_VAR 0 6
5032: PPUSH
5033: CALL_OW 312
5037: ST_TO_ADDR
// if j then
5038: LD_VAR 0 7
5042: IFFALSE 5072
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5044: LD_ADDR_VAR 0 10
5048: PUSH
5049: LD_VAR 0 10
5053: PUSH
5054: LD_VAR 0 7
5058: PPUSH
5059: LD_INT 3
5061: PPUSH
5062: CALL_OW 259
5066: PUSH
5067: LD_INT 3
5069: MUL
5070: MUL
5071: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5072: LD_VAR 0 6
5076: PPUSH
5077: CALL_OW 264
5081: PUSH
5082: LD_INT 5
5084: PUSH
5085: LD_INT 6
5087: PUSH
5088: LD_INT 46
5090: PUSH
5091: LD_INT 44
5093: PUSH
5094: LD_INT 47
5096: PUSH
5097: LD_INT 45
5099: PUSH
5100: LD_INT 28
5102: PUSH
5103: LD_INT 7
5105: PUSH
5106: LD_INT 27
5108: PUSH
5109: LD_INT 29
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: IN
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_INT 52
5132: PPUSH
5133: CALL_OW 321
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: AND
5142: IFFALSE 5159
// bpoints := bpoints * 1.2 ;
5144: LD_ADDR_VAR 0 10
5148: PUSH
5149: LD_VAR 0 10
5153: PUSH
5154: LD_REAL  1.20000000000000E+0000
5157: MUL
5158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5159: LD_VAR 0 6
5163: PPUSH
5164: CALL_OW 264
5168: PUSH
5169: LD_INT 6
5171: PUSH
5172: LD_INT 46
5174: PUSH
5175: LD_INT 47
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: IN
5183: IFFALSE 5200
// bpoints := bpoints * 1.2 ;
5185: LD_ADDR_VAR 0 10
5189: PUSH
5190: LD_VAR 0 10
5194: PUSH
5195: LD_REAL  1.20000000000000E+0000
5198: MUL
5199: ST_TO_ADDR
// end ; unit_building :
5200: GO 5214
5202: LD_INT 3
5204: DOUBLE
5205: EQUAL
5206: IFTRUE 5210
5208: GO 5213
5210: POP
// ; end ;
5211: GO 5214
5213: POP
// for j = 1 to 3 do
5214: LD_ADDR_VAR 0 7
5218: PUSH
5219: DOUBLE
5220: LD_INT 1
5222: DEC
5223: ST_TO_ADDR
5224: LD_INT 3
5226: PUSH
5227: FOR_TO
5228: IFFALSE 5281
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_VAR 0 5
5239: PPUSH
5240: LD_VAR 0 7
5244: PPUSH
5245: LD_VAR 0 5
5249: PUSH
5250: LD_VAR 0 7
5254: ARRAY
5255: PUSH
5256: LD_VAR 0 9
5260: PUSH
5261: LD_VAR 0 7
5265: ARRAY
5266: PUSH
5267: LD_VAR 0 10
5271: MUL
5272: PLUS
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
5279: GO 5227
5281: POP
5282: POP
// end ;
5283: GO 3766
5285: POP
5286: POP
// result := Replace ( result , 4 , tmp ) ;
5287: LD_ADDR_VAR 0 5
5291: PUSH
5292: LD_VAR 0 5
5296: PPUSH
5297: LD_INT 4
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// end ;
5310: LD_VAR 0 5
5314: RET
// export function DangerAtRange ( unit , range ) ; begin
5315: LD_INT 0
5317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 255
5332: PPUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 250
5342: PPUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 251
5352: PPUSH
5353: LD_VAR 0 2
5357: PPUSH
5358: CALL 3636 0 4
5362: ST_TO_ADDR
// end ;
5363: LD_VAR 0 3
5367: RET
// export function IsExtension ( b ) ; begin
5368: LD_INT 0
5370: PPUSH
// result := false ;
5371: LD_ADDR_VAR 0 2
5375: PUSH
5376: LD_INT 0
5378: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5379: LD_VAR 0 1
5383: PPUSH
5384: CALL_OW 266
5388: PUSH
5389: LD_INT 23
5391: PUSH
5392: LD_INT 20
5394: PUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 17
5400: PUSH
5401: LD_INT 24
5403: PUSH
5404: LD_INT 21
5406: PUSH
5407: LD_INT 19
5409: PUSH
5410: LD_INT 16
5412: PUSH
5413: LD_INT 25
5415: PUSH
5416: LD_INT 18
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: IN
5431: IFFALSE 5441
// result := true ;
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_INT 1
5440: ST_TO_ADDR
// end ;
5441: LD_VAR 0 2
5445: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5446: LD_INT 0
5448: PPUSH
5449: PPUSH
5450: PPUSH
// result := [ ] ;
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: EMPTY
5457: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5458: LD_ADDR_VAR 0 3
5462: PUSH
5463: LD_INT 21
5465: PUSH
5466: LD_INT 3
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL_OW 69
5477: ST_TO_ADDR
// if not tmp then
5478: LD_VAR 0 3
5482: NOT
5483: IFFALSE 5487
// exit ;
5485: GO 5537
// for i in tmp do
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_VAR 0 3
5496: PUSH
5497: FOR_IN
5498: IFFALSE 5535
// if GetBase ( i ) = base then
5500: LD_VAR 0 4
5504: PPUSH
5505: CALL_OW 274
5509: PUSH
5510: LD_VAR 0 1
5514: EQUAL
5515: IFFALSE 5533
// result := result ^ i ;
5517: LD_ADDR_VAR 0 2
5521: PUSH
5522: LD_VAR 0 2
5526: PUSH
5527: LD_VAR 0 4
5531: ADD
5532: ST_TO_ADDR
5533: GO 5497
5535: POP
5536: POP
// end ;
5537: LD_VAR 0 2
5541: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5542: LD_INT 0
5544: PPUSH
5545: PPUSH
// if BuildingStatus ( b ) = bs_build then
5546: LD_VAR 0 2
5550: PPUSH
5551: CALL_OW 461
5555: PUSH
5556: LD_INT 1
5558: EQUAL
5559: IFFALSE 5619
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_STRING h
5568: PUSH
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 250
5578: PUSH
5579: LD_VAR 0 2
5583: PPUSH
5584: CALL_OW 251
5588: PUSH
5589: LD_VAR 0 2
5593: PUSH
5594: LD_INT 0
5596: PUSH
5597: LD_INT 0
5599: PUSH
5600: LD_INT 0
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: PPUSH
5615: CALL_OW 446
// end ;
5619: LD_VAR 0 3
5623: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5624: LD_INT 0
5626: PPUSH
5627: PPUSH
5628: PPUSH
5629: PPUSH
5630: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5631: LD_VAR 0 1
5635: NOT
5636: PUSH
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 263
5646: PUSH
5647: LD_INT 2
5649: EQUAL
5650: NOT
5651: OR
5652: IFFALSE 5656
// exit ;
5654: GO 5928
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5656: LD_ADDR_VAR 0 6
5660: PUSH
5661: LD_INT 22
5663: PUSH
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 255
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PUSH
5678: LD_INT 2
5680: PUSH
5681: LD_INT 30
5683: PUSH
5684: LD_INT 36
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 34
5693: PUSH
5694: LD_INT 31
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PPUSH
5710: CALL_OW 69
5714: ST_TO_ADDR
// if not tmp then
5715: LD_VAR 0 6
5719: NOT
5720: IFFALSE 5724
// exit ;
5722: GO 5928
// result := [ ] ;
5724: LD_ADDR_VAR 0 2
5728: PUSH
5729: EMPTY
5730: ST_TO_ADDR
// for i in tmp do
5731: LD_ADDR_VAR 0 3
5735: PUSH
5736: LD_VAR 0 6
5740: PUSH
5741: FOR_IN
5742: IFFALSE 5790
// begin t := UnitsInside ( i ) ;
5744: LD_ADDR_VAR 0 4
5748: PUSH
5749: LD_VAR 0 3
5753: PPUSH
5754: CALL_OW 313
5758: ST_TO_ADDR
// if t then
5759: LD_VAR 0 4
5763: IFFALSE 5788
// result := Insert ( result , 1 , t ) ;
5765: LD_ADDR_VAR 0 2
5769: PUSH
5770: LD_VAR 0 2
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: LD_VAR 0 4
5782: PPUSH
5783: CALL_OW 2
5787: ST_TO_ADDR
// end ;
5788: GO 5741
5790: POP
5791: POP
// if not result then
5792: LD_VAR 0 2
5796: NOT
5797: IFFALSE 5801
// exit ;
5799: GO 5928
// mech := 0 ;
5801: LD_ADDR_VAR 0 5
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// for i in result do
5809: LD_ADDR_VAR 0 3
5813: PUSH
5814: LD_VAR 0 2
5818: PUSH
5819: FOR_IN
5820: IFFALSE 5902
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5822: LD_ADDR_VAR 0 4
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 3
5834: PPUSH
5835: CALL_OW 259
5839: PUSH
5840: LD_VAR 0 3
5844: PPUSH
5845: CALL_OW 432
5849: MINUS
5850: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5851: LD_VAR 0 4
5855: PUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: LD_INT 3
5867: PPUSH
5868: CALL_OW 259
5872: PUSH
5873: LD_VAR 0 5
5877: PUSH
5878: LD_INT 1
5880: ARRAY
5881: PPUSH
5882: CALL_OW 432
5886: MINUS
5887: GREATEREQUAL
5888: IFFALSE 5900
// mech := i ;
5890: LD_ADDR_VAR 0 5
5894: PUSH
5895: LD_VAR 0 3
5899: ST_TO_ADDR
// end ;
5900: GO 5819
5902: POP
5903: POP
// if mech then
5904: LD_VAR 0 5
5908: IFFALSE 5928
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5910: LD_VAR 0 1
5914: PPUSH
5915: LD_VAR 0 5
5919: PUSH
5920: LD_INT 1
5922: ARRAY
5923: PPUSH
5924: CALL_OW 135
// end ;
5928: LD_VAR 0 2
5932: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , f , x , un , base , side , nation , buildings ; begin
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
5938: PPUSH
5939: PPUSH
5940: PPUSH
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
// result := [ ] ;
5945: LD_ADDR_VAR 0 6
5949: PUSH
5950: EMPTY
5951: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 266
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 1
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: IN
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 7096
// if name then
5977: LD_VAR 0 2
5981: IFFALSE 5997
// SetBName ( base_dep , name ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 500
// base := GetBase ( base_dep ) ;
5997: LD_ADDR_VAR 0 12
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 274
6011: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6012: LD_ADDR_VAR 0 13
6016: PUSH
6017: LD_VAR 0 1
6021: PPUSH
6022: CALL_OW 255
6026: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6027: LD_ADDR_VAR 0 14
6031: PUSH
6032: LD_VAR 0 1
6036: PPUSH
6037: CALL_OW 248
6041: ST_TO_ADDR
// if sources then
6042: LD_VAR 0 4
6046: IFFALSE 6093
// for i = 1 to 3 do
6048: LD_ADDR_VAR 0 7
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_INT 3
6060: PUSH
6061: FOR_TO
6062: IFFALSE 6091
// AddResourceType ( base , i , sources [ i ] ) ;
6064: LD_VAR 0 12
6068: PPUSH
6069: LD_VAR 0 7
6073: PPUSH
6074: LD_VAR 0 4
6078: PUSH
6079: LD_VAR 0 7
6083: ARRAY
6084: PPUSH
6085: CALL_OW 276
6089: GO 6061
6091: POP
6092: POP
// buildings := GetBaseBuildings ( base ) ;
6093: LD_ADDR_VAR 0 15
6097: PUSH
6098: LD_VAR 0 12
6102: PPUSH
6103: CALL 5446 0 1
6107: ST_TO_ADDR
// InitHc ;
6108: CALL_OW 19
// InitUc ;
6112: CALL_OW 18
// uc_side := side ;
6116: LD_ADDR_OWVAR 20
6120: PUSH
6121: LD_VAR 0 13
6125: ST_TO_ADDR
// uc_nation := nation ;
6126: LD_ADDR_OWVAR 21
6130: PUSH
6131: LD_VAR 0 14
6135: ST_TO_ADDR
// if buildings then
6136: LD_VAR 0 15
6140: IFFALSE 6955
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6142: LD_VAR 0 15
6146: PPUSH
6147: LD_INT 2
6149: PUSH
6150: LD_INT 30
6152: PUSH
6153: LD_INT 32
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 30
6162: PUSH
6163: LD_INT 33
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 72
6179: IFFALSE 6262
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6181: LD_ADDR_VAR 0 7
6185: PUSH
6186: LD_VAR 0 15
6190: PPUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 30
6196: PUSH
6197: LD_INT 32
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 30
6206: PUSH
6207: LD_INT 33
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: PPUSH
6219: CALL_OW 72
6223: PUSH
6224: FOR_IN
6225: IFFALSE 6260
// if not GetBWeapon ( i ) then
6227: LD_VAR 0 7
6231: PPUSH
6232: CALL_OW 269
6236: NOT
6237: IFFALSE 6258
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6239: LD_VAR 0 7
6243: PPUSH
6244: LD_VAR 0 7
6248: PPUSH
6249: CALL 7101 0 1
6253: PPUSH
6254: CALL_OW 431
6258: GO 6224
6260: POP
6261: POP
// end ; for i = 1 to personel do
6262: LD_ADDR_VAR 0 7
6266: PUSH
6267: DOUBLE
6268: LD_INT 1
6270: DEC
6271: ST_TO_ADDR
6272: LD_VAR 0 5
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6935
// begin if i > 4 then
6280: LD_VAR 0 7
6284: PUSH
6285: LD_INT 4
6287: GREATER
6288: IFFALSE 6292
// break ;
6290: GO 6935
// case i of 1 :
6292: LD_VAR 0 7
6296: PUSH
6297: LD_INT 1
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6378
6305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6306: LD_ADDR_VAR 0 9
6310: PUSH
6311: LD_VAR 0 15
6315: PPUSH
6316: LD_INT 22
6318: PUSH
6319: LD_VAR 0 13
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 30
6333: PUSH
6334: LD_INT 32
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 30
6343: PUSH
6344: LD_INT 4
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 30
6353: PUSH
6354: LD_INT 5
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 72
6375: ST_TO_ADDR
6376: GO 6600
6378: LD_INT 2
6380: DOUBLE
6381: EQUAL
6382: IFTRUE 6386
6384: GO 6448
6386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6387: LD_ADDR_VAR 0 9
6391: PUSH
6392: LD_VAR 0 15
6396: PPUSH
6397: LD_INT 22
6399: PUSH
6400: LD_VAR 0 13
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 2
6411: PUSH
6412: LD_INT 30
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 1
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL_OW 72
6445: ST_TO_ADDR
6446: GO 6600
6448: LD_INT 3
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6518
6456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6457: LD_ADDR_VAR 0 9
6461: PUSH
6462: LD_VAR 0 15
6466: PPUSH
6467: LD_INT 22
6469: PUSH
6470: LD_VAR 0 13
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 30
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 30
6494: PUSH
6495: LD_INT 3
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PPUSH
6511: CALL_OW 72
6515: ST_TO_ADDR
6516: GO 6600
6518: LD_INT 4
6520: DOUBLE
6521: EQUAL
6522: IFTRUE 6526
6524: GO 6599
6526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6527: LD_ADDR_VAR 0 9
6531: PUSH
6532: LD_VAR 0 15
6536: PPUSH
6537: LD_INT 22
6539: PUSH
6540: LD_VAR 0 13
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 2
6551: PUSH
6552: LD_INT 30
6554: PUSH
6555: LD_INT 6
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 30
6564: PUSH
6565: LD_INT 7
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 30
6574: PUSH
6575: LD_INT 8
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: ST_TO_ADDR
6597: GO 6600
6599: POP
// if not f then
6600: LD_VAR 0 9
6604: NOT
6605: IFFALSE 6609
// continue ;
6607: GO 6277
// x := personel [ i ] ;
6609: LD_ADDR_VAR 0 10
6613: PUSH
6614: LD_VAR 0 5
6618: PUSH
6619: LD_VAR 0 7
6623: ARRAY
6624: ST_TO_ADDR
// if x = - 1 then
6625: LD_VAR 0 10
6629: PUSH
6630: LD_INT 1
6632: NEG
6633: EQUAL
6634: IFFALSE 6756
// begin for j in f do
6636: LD_ADDR_VAR 0 8
6640: PUSH
6641: LD_VAR 0 9
6645: PUSH
6646: FOR_IN
6647: IFFALSE 6752
// repeat PrepareHuman ( false , i , skill ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_VAR 0 7
6656: PPUSH
6657: LD_VAR 0 3
6661: PPUSH
6662: CALL_OW 380
// un := CreateHuman ;
6666: LD_ADDR_VAR 0 11
6670: PUSH
6671: CALL_OW 44
6675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6676: LD_ADDR_VAR 0 6
6680: PUSH
6681: LD_VAR 0 6
6685: PPUSH
6686: LD_INT 1
6688: PPUSH
6689: LD_VAR 0 11
6693: PPUSH
6694: CALL_OW 2
6698: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6699: LD_VAR 0 11
6703: PPUSH
6704: LD_VAR 0 8
6708: PPUSH
6709: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6713: LD_VAR 0 8
6717: PPUSH
6718: CALL_OW 313
6722: PUSH
6723: LD_INT 6
6725: EQUAL
6726: PUSH
6727: LD_VAR 0 8
6731: PPUSH
6732: CALL_OW 266
6736: PUSH
6737: LD_INT 32
6739: PUSH
6740: LD_INT 31
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: IN
6747: OR
6748: IFFALSE 6649
6750: GO 6646
6752: POP
6753: POP
// end else
6754: GO 6933
// for j = 1 to x do
6756: LD_ADDR_VAR 0 8
6760: PUSH
6761: DOUBLE
6762: LD_INT 1
6764: DEC
6765: ST_TO_ADDR
6766: LD_VAR 0 10
6770: PUSH
6771: FOR_TO
6772: IFFALSE 6931
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6774: LD_VAR 0 9
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: CALL_OW 313
6787: PUSH
6788: LD_VAR 0 9
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: CALL_OW 266
6801: PUSH
6802: LD_INT 32
6804: PUSH
6805: LD_INT 31
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: IN
6812: AND
6813: PUSH
6814: LD_VAR 0 9
6818: PUSH
6819: LD_INT 1
6821: ARRAY
6822: PPUSH
6823: CALL_OW 313
6827: PUSH
6828: LD_INT 6
6830: EQUAL
6831: OR
6832: IFFALSE 6852
// f := Delete ( f , 1 ) ;
6834: LD_ADDR_VAR 0 9
6838: PUSH
6839: LD_VAR 0 9
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: CALL_OW 3
6851: ST_TO_ADDR
// if not f then
6852: LD_VAR 0 9
6856: NOT
6857: IFFALSE 6861
// break ;
6859: GO 6931
// PrepareHuman ( false , i , skill ) ;
6861: LD_INT 0
6863: PPUSH
6864: LD_VAR 0 7
6868: PPUSH
6869: LD_VAR 0 3
6873: PPUSH
6874: CALL_OW 380
// un := CreateHuman ;
6878: LD_ADDR_VAR 0 11
6882: PUSH
6883: CALL_OW 44
6887: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6888: LD_ADDR_VAR 0 6
6892: PUSH
6893: LD_VAR 0 6
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: LD_VAR 0 11
6905: PPUSH
6906: CALL_OW 2
6910: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6911: LD_VAR 0 11
6915: PPUSH
6916: LD_VAR 0 9
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6771
6931: POP
6932: POP
// end ;
6933: GO 6277
6935: POP
6936: POP
// result := result ^ buildings ;
6937: LD_ADDR_VAR 0 6
6941: PUSH
6942: LD_VAR 0 6
6946: PUSH
6947: LD_VAR 0 15
6951: ADD
6952: ST_TO_ADDR
// end else
6953: GO 7096
// begin for i = 1 to personel do
6955: LD_ADDR_VAR 0 7
6959: PUSH
6960: DOUBLE
6961: LD_INT 1
6963: DEC
6964: ST_TO_ADDR
6965: LD_VAR 0 5
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7094
// begin if i > 4 then
6973: LD_VAR 0 7
6977: PUSH
6978: LD_INT 4
6980: GREATER
6981: IFFALSE 6985
// break ;
6983: GO 7094
// x := personel [ i ] ;
6985: LD_ADDR_VAR 0 10
6989: PUSH
6990: LD_VAR 0 5
6994: PUSH
6995: LD_VAR 0 7
6999: ARRAY
7000: ST_TO_ADDR
// if x = - 1 then
7001: LD_VAR 0 10
7005: PUSH
7006: LD_INT 1
7008: NEG
7009: EQUAL
7010: IFFALSE 7014
// continue ;
7012: GO 6970
// PrepareHuman ( false , i , skill ) ;
7014: LD_INT 0
7016: PPUSH
7017: LD_VAR 0 7
7021: PPUSH
7022: LD_VAR 0 3
7026: PPUSH
7027: CALL_OW 380
// un := CreateHuman ;
7031: LD_ADDR_VAR 0 11
7035: PUSH
7036: CALL_OW 44
7040: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7041: LD_VAR 0 11
7045: PPUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 250
7055: PPUSH
7056: LD_VAR 0 1
7060: PPUSH
7061: CALL_OW 251
7065: PPUSH
7066: LD_INT 10
7068: PPUSH
7069: LD_INT 0
7071: PPUSH
7072: CALL_OW 50
// result := result ^ un ;
7076: LD_ADDR_VAR 0 6
7080: PUSH
7081: LD_VAR 0 6
7085: PUSH
7086: LD_VAR 0 11
7090: ADD
7091: ST_TO_ADDR
// end ;
7092: GO 6970
7094: POP
7095: POP
// end ; end ;
7096: LD_VAR 0 6
7100: RET
// export function GetTurretWeapon ( tower ) ; var list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
7117: PPUSH
// result := false ;
7118: LD_ADDR_VAR 0 2
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// if not tower then
7126: LD_VAR 0 1
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 8308
// nat := GetNation ( tower ) ;
7135: LD_ADDR_VAR 0 10
7139: PUSH
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 248
7149: ST_TO_ADDR
// side := GetSide ( tower ) ;
7150: LD_ADDR_VAR 0 14
7154: PUSH
7155: LD_VAR 0 1
7159: PPUSH
7160: CALL_OW 255
7164: ST_TO_ADDR
// x := GetX ( tower ) ;
7165: LD_ADDR_VAR 0 8
7169: PUSH
7170: LD_VAR 0 1
7174: PPUSH
7175: CALL_OW 250
7179: ST_TO_ADDR
// y := GetY ( tower ) ;
7180: LD_ADDR_VAR 0 9
7184: PUSH
7185: LD_VAR 0 1
7189: PPUSH
7190: CALL_OW 251
7194: ST_TO_ADDR
// weapon := 0 ;
7195: LD_ADDR_VAR 0 16
7199: PUSH
7200: LD_INT 0
7202: ST_TO_ADDR
// fac_list := [ ] ;
7203: LD_ADDR_VAR 0 15
7207: PUSH
7208: EMPTY
7209: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7210: LD_ADDR_VAR 0 4
7214: PUSH
7215: LD_VAR 0 1
7219: PPUSH
7220: CALL_OW 274
7224: PPUSH
7225: CALL 5446 0 1
7229: PPUSH
7230: LD_INT 30
7232: PUSH
7233: LD_INT 3
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 72
7244: ST_TO_ADDR
// if not factories then
7245: LD_VAR 0 4
7249: NOT
7250: IFFALSE 7254
// exit ;
7252: GO 8308
// for i in factories do
7254: LD_ADDR_VAR 0 6
7258: PUSH
7259: LD_VAR 0 4
7263: PUSH
7264: FOR_IN
7265: IFFALSE 7290
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7267: LD_ADDR_VAR 0 15
7271: PUSH
7272: LD_VAR 0 15
7276: PUSH
7277: LD_VAR 0 6
7281: PPUSH
7282: CALL_OW 478
7286: UNION
7287: ST_TO_ADDR
7288: GO 7264
7290: POP
7291: POP
// if not fac_list then
7292: LD_VAR 0 15
7296: NOT
7297: IFFALSE 7301
// exit ;
7299: GO 8308
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_INT 4
7308: PUSH
7309: LD_INT 5
7311: PUSH
7312: LD_INT 9
7314: PUSH
7315: LD_INT 10
7317: PUSH
7318: LD_INT 6
7320: PUSH
7321: LD_INT 7
7323: PUSH
7324: LD_INT 11
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 27
7338: PUSH
7339: LD_INT 28
7341: PUSH
7342: LD_INT 26
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 43
7356: PUSH
7357: LD_INT 44
7359: PUSH
7360: LD_INT 46
7362: PUSH
7363: LD_INT 45
7365: PUSH
7366: LD_INT 47
7368: PUSH
7369: LD_INT 49
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_VAR 0 10
7389: ARRAY
7390: ST_TO_ADDR
// for i in list do
7391: LD_ADDR_VAR 0 6
7395: PUSH
7396: LD_VAR 0 3
7400: PUSH
7401: FOR_IN
7402: IFFALSE 7435
// if not i in fac_list then
7404: LD_VAR 0 6
7408: PUSH
7409: LD_VAR 0 15
7413: IN
7414: NOT
7415: IFFALSE 7433
// list := list diff i ;
7417: LD_ADDR_VAR 0 3
7421: PUSH
7422: LD_VAR 0 3
7426: PUSH
7427: LD_VAR 0 6
7431: DIFF
7432: ST_TO_ADDR
7433: GO 7401
7435: POP
7436: POP
// if not list then
7437: LD_VAR 0 3
7441: NOT
7442: IFFALSE 7446
// exit ;
7444: GO 8308
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7446: LD_VAR 0 10
7450: PUSH
7451: LD_INT 3
7453: EQUAL
7454: PUSH
7455: LD_INT 49
7457: PUSH
7458: LD_VAR 0 3
7462: IN
7463: AND
7464: PUSH
7465: LD_INT 31
7467: PPUSH
7468: LD_VAR 0 14
7472: PPUSH
7473: CALL_OW 321
7477: PUSH
7478: LD_INT 2
7480: EQUAL
7481: AND
7482: IFFALSE 7542
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7484: LD_INT 22
7486: PUSH
7487: LD_VAR 0 14
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 35
7498: PUSH
7499: LD_INT 49
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 91
7508: PUSH
7509: LD_VAR 0 1
7513: PUSH
7514: LD_INT 10
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 69
7531: NOT
7532: IFFALSE 7542
// weapon := ru_time_lapser ;
7534: LD_ADDR_VAR 0 16
7538: PUSH
7539: LD_INT 49
7541: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7542: LD_VAR 0 10
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: IN
7557: PUSH
7558: LD_INT 11
7560: PUSH
7561: LD_VAR 0 3
7565: IN
7566: PUSH
7567: LD_INT 30
7569: PUSH
7570: LD_VAR 0 3
7574: IN
7575: OR
7576: AND
7577: PUSH
7578: LD_INT 6
7580: PPUSH
7581: LD_VAR 0 14
7585: PPUSH
7586: CALL_OW 321
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: AND
7595: IFFALSE 7760
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7597: LD_INT 22
7599: PUSH
7600: LD_VAR 0 14
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 2
7611: PUSH
7612: LD_INT 35
7614: PUSH
7615: LD_INT 11
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 35
7624: PUSH
7625: LD_INT 30
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 91
7639: PUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_INT 15
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: NOT
7663: PUSH
7664: LD_INT 22
7666: PUSH
7667: LD_VAR 0 14
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: LD_INT 30
7681: PUSH
7682: LD_INT 32
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 33
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 91
7706: PUSH
7707: LD_VAR 0 1
7711: PUSH
7712: LD_INT 12
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: PPUSH
7728: CALL_OW 69
7732: PUSH
7733: LD_INT 1
7735: GREATER
7736: AND
7737: IFFALSE 7760
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7739: LD_ADDR_VAR 0 16
7743: PUSH
7744: LD_INT 11
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_VAR 0 10
7758: ARRAY
7759: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7760: LD_VAR 0 16
7764: NOT
7765: PUSH
7766: LD_INT 40
7768: PPUSH
7769: LD_VAR 0 14
7773: PPUSH
7774: CALL_OW 321
7778: PUSH
7779: LD_INT 2
7781: EQUAL
7782: AND
7783: PUSH
7784: LD_INT 7
7786: PUSH
7787: LD_VAR 0 3
7791: IN
7792: PUSH
7793: LD_INT 28
7795: PUSH
7796: LD_VAR 0 3
7800: IN
7801: OR
7802: PUSH
7803: LD_INT 45
7805: PUSH
7806: LD_VAR 0 3
7810: IN
7811: OR
7812: AND
7813: IFFALSE 8023
// begin height := GetHexInfo ( x , y ) [ 2 ] ;
7815: LD_ADDR_VAR 0 13
7819: PUSH
7820: LD_VAR 0 8
7824: PPUSH
7825: LD_VAR 0 9
7829: PPUSH
7830: CALL_OW 546
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7839: LD_ADDR_VAR 0 12
7843: PUSH
7844: LD_INT 0
7846: PUSH
7847: LD_INT 2
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: LD_INT 5
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: ST_TO_ADDR
// for i in tmp do
7862: LD_ADDR_VAR 0 6
7866: PUSH
7867: LD_VAR 0 12
7871: PUSH
7872: FOR_IN
7873: IFFALSE 8021
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7875: LD_ADDR_VAR 0 7
7879: PUSH
7880: LD_VAR 0 8
7884: PPUSH
7885: LD_VAR 0 6
7889: PPUSH
7890: LD_INT 5
7892: PPUSH
7893: CALL_OW 272
7897: PUSH
7898: LD_VAR 0 9
7902: PPUSH
7903: LD_VAR 0 6
7907: PPUSH
7908: LD_INT 5
7910: PPUSH
7911: CALL_OW 273
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
7920: LD_VAR 0 7
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PPUSH
7929: LD_VAR 0 7
7933: PUSH
7934: LD_INT 2
7936: ARRAY
7937: PPUSH
7938: CALL_OW 488
7942: IFFALSE 8019
// begin h := GetHexInfo ( j [ 1 ] , j [ 2 ] ) [ 2 ] ;
7944: LD_ADDR_VAR 0 11
7948: PUSH
7949: LD_VAR 0 7
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 7
7962: PUSH
7963: LD_INT 2
7965: ARRAY
7966: PPUSH
7967: CALL_OW 546
7971: PUSH
7972: LD_INT 2
7974: ARRAY
7975: ST_TO_ADDR
// if h + 7 < height then
7976: LD_VAR 0 11
7980: PUSH
7981: LD_INT 7
7983: PLUS
7984: PUSH
7985: LD_VAR 0 13
7989: LESS
7990: IFFALSE 8019
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
7992: LD_ADDR_VAR 0 16
7996: PUSH
7997: LD_INT 7
7999: PUSH
8000: LD_INT 28
8002: PUSH
8003: LD_INT 45
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PUSH
8011: LD_VAR 0 10
8015: ARRAY
8016: ST_TO_ADDR
// break ;
8017: GO 8021
// end ; end ; end ;
8019: GO 7872
8021: POP
8022: POP
// end ; if not weapon then
8023: LD_VAR 0 16
8027: NOT
8028: IFFALSE 8190
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8030: LD_ADDR_VAR 0 3
8034: PUSH
8035: LD_VAR 0 3
8039: PUSH
8040: LD_INT 11
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 49
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: DIFF
8054: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8055: LD_ADDR_VAR 0 16
8059: PUSH
8060: LD_VAR 0 3
8064: PUSH
8065: LD_INT 1
8067: PPUSH
8068: LD_VAR 0 3
8072: PPUSH
8073: CALL_OW 12
8077: ARRAY
8078: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8079: LD_ADDR_VAR 0 12
8083: PUSH
8084: LD_INT 22
8086: PUSH
8087: LD_VAR 0 14
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 35
8101: PUSH
8102: LD_INT 0
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PPUSH
8117: CALL_OW 69
8121: ST_TO_ADDR
// for i in tmp do
8122: LD_ADDR_VAR 0 6
8126: PUSH
8127: LD_VAR 0 12
8131: PUSH
8132: FOR_IN
8133: IFFALSE 8158
// list := list diff GetBWeapon ( i ) ;
8135: LD_ADDR_VAR 0 3
8139: PUSH
8140: LD_VAR 0 3
8144: PUSH
8145: LD_VAR 0 6
8149: PPUSH
8150: CALL_OW 269
8154: DIFF
8155: ST_TO_ADDR
8156: GO 8132
8158: POP
8159: POP
// if list then
8160: LD_VAR 0 3
8164: IFFALSE 8190
// weapon := list [ rand ( 1 , list ) ] ;
8166: LD_ADDR_VAR 0 16
8170: PUSH
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 1
8178: PPUSH
8179: LD_VAR 0 3
8183: PPUSH
8184: CALL_OW 12
8188: ARRAY
8189: ST_TO_ADDR
// end ; if weapon then
8190: LD_VAR 0 16
8194: IFFALSE 8308
// begin tmp := CostOfWeapon ( weapon ) ;
8196: LD_ADDR_VAR 0 12
8200: PUSH
8201: LD_VAR 0 16
8205: PPUSH
8206: CALL_OW 451
8210: ST_TO_ADDR
// j := GetBase ( tower ) ;
8211: LD_ADDR_VAR 0 7
8215: PUSH
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 274
8225: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8226: LD_VAR 0 7
8230: PPUSH
8231: LD_INT 1
8233: PPUSH
8234: CALL_OW 275
8238: PUSH
8239: LD_VAR 0 12
8243: PUSH
8244: LD_INT 1
8246: ARRAY
8247: GREATEREQUAL
8248: PUSH
8249: LD_VAR 0 7
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 275
8261: PUSH
8262: LD_VAR 0 12
8266: PUSH
8267: LD_INT 2
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: PUSH
8273: LD_VAR 0 7
8277: PPUSH
8278: LD_INT 3
8280: PPUSH
8281: CALL_OW 275
8285: PUSH
8286: LD_VAR 0 12
8290: PUSH
8291: LD_INT 3
8293: ARRAY
8294: GREATEREQUAL
8295: AND
8296: IFFALSE 8308
// result := weapon ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_VAR 0 16
8307: ST_TO_ADDR
// end ; end ;
8308: LD_VAR 0 2
8312: RET
// export function Compare ( val1 , val2 ) ; begin
8313: LD_INT 0
8315: PPUSH
// if val1 = val2 then
8316: LD_VAR 0 1
8320: PUSH
8321: LD_VAR 0 2
8325: EQUAL
8326: IFFALSE 8338
// result := true else
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
8336: GO 8346
// result := false ;
8338: LD_ADDR_VAR 0 3
8342: PUSH
8343: LD_INT 0
8345: ST_TO_ADDR
// end ;
8346: LD_VAR 0 3
8350: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
// result := true ;
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// if array1 = array2 then
8363: LD_VAR 0 1
8367: PUSH
8368: LD_VAR 0 2
8372: EQUAL
8373: IFFALSE 8438
// begin for i = 1 to array1 do
8375: LD_ADDR_VAR 0 4
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_VAR 0 1
8389: PUSH
8390: FOR_TO
8391: IFFALSE 8434
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8393: LD_VAR 0 1
8397: PUSH
8398: LD_VAR 0 4
8402: ARRAY
8403: PPUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL 8313 0 2
8419: NOT
8420: IFFALSE 8432
// begin result := false ;
8422: LD_ADDR_VAR 0 3
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// break ;
8430: GO 8434
// end ;
8432: GO 8390
8434: POP
8435: POP
// end else
8436: GO 8446
// result := false ;
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_INT 0
8445: ST_TO_ADDR
// end ;
8446: LD_VAR 0 3
8450: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8451: LD_INT 0
8453: PPUSH
8454: PPUSH
8455: PPUSH
// pom := GetBase ( fac ) ;
8456: LD_ADDR_VAR 0 5
8460: PUSH
8461: LD_VAR 0 1
8465: PPUSH
8466: CALL_OW 274
8470: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8471: LD_ADDR_VAR 0 4
8475: PUSH
8476: LD_VAR 0 2
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 2
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: LD_VAR 0 2
8498: PUSH
8499: LD_INT 3
8501: ARRAY
8502: PPUSH
8503: LD_VAR 0 2
8507: PUSH
8508: LD_INT 4
8510: ARRAY
8511: PPUSH
8512: CALL_OW 449
8516: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8517: LD_VAR 0 5
8521: PPUSH
8522: LD_INT 1
8524: PPUSH
8525: CALL_OW 275
8529: PUSH
8530: LD_VAR 0 4
8534: PUSH
8535: LD_INT 1
8537: ARRAY
8538: GREATEREQUAL
8539: PUSH
8540: LD_VAR 0 5
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: CALL_OW 275
8552: PUSH
8553: LD_VAR 0 4
8557: PUSH
8558: LD_INT 2
8560: ARRAY
8561: GREATEREQUAL
8562: AND
8563: PUSH
8564: LD_VAR 0 5
8568: PPUSH
8569: LD_INT 3
8571: PPUSH
8572: CALL_OW 275
8576: PUSH
8577: LD_VAR 0 4
8581: PUSH
8582: LD_INT 3
8584: ARRAY
8585: GREATEREQUAL
8586: AND
8587: IFFALSE 8599
// result := true else
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
8597: GO 8607
// result := false ;
8599: LD_ADDR_VAR 0 3
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// end ;
8607: LD_VAR 0 3
8611: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// result := false ;
8622: LD_ADDR_VAR 0 6
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8630: LD_VAR 0 1
8634: NOT
8635: PUSH
8636: LD_VAR 0 2
8640: NOT
8641: OR
8642: PUSH
8643: LD_VAR 0 5
8647: PUSH
8648: LD_INT 0
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: IN
8674: NOT
8675: OR
8676: PUSH
8677: LD_VAR 0 3
8681: PPUSH
8682: LD_VAR 0 4
8686: PPUSH
8687: CALL_OW 488
8691: NOT
8692: OR
8693: IFFALSE 8697
// exit ;
8695: GO 9380
// pom := GetBase ( bdepot ) ;
8697: LD_ADDR_VAR 0 9
8701: PUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 274
8711: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8712: LD_ADDR_VAR 0 10
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 248
8731: PPUSH
8732: CALL_OW 450
8736: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8737: LD_VAR 0 9
8741: PPUSH
8742: LD_INT 1
8744: PPUSH
8745: CALL_OW 275
8749: PUSH
8750: LD_VAR 0 10
8754: PUSH
8755: LD_INT 1
8757: ARRAY
8758: GREATEREQUAL
8759: PUSH
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_INT 2
8767: PPUSH
8768: CALL_OW 275
8772: PUSH
8773: LD_VAR 0 10
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: GREATEREQUAL
8782: AND
8783: PUSH
8784: LD_VAR 0 9
8788: PPUSH
8789: LD_INT 3
8791: PPUSH
8792: CALL_OW 275
8796: PUSH
8797: LD_VAR 0 10
8801: PUSH
8802: LD_INT 3
8804: ARRAY
8805: GREATEREQUAL
8806: AND
8807: IFFALSE 8819
// result := true else
8809: LD_ADDR_VAR 0 6
8813: PUSH
8814: LD_INT 1
8816: ST_TO_ADDR
8817: GO 8821
// exit ;
8819: GO 9380
// if GetBType ( bdepot ) = b_depot then
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 266
8830: PUSH
8831: LD_INT 0
8833: EQUAL
8834: IFFALSE 8846
// dist := 28 else
8836: LD_ADDR_VAR 0 13
8840: PUSH
8841: LD_INT 28
8843: ST_TO_ADDR
8844: GO 8854
// dist := 36 ;
8846: LD_ADDR_VAR 0 13
8850: PUSH
8851: LD_INT 36
8853: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_VAR 0 3
8863: PPUSH
8864: LD_VAR 0 4
8868: PPUSH
8869: CALL_OW 297
8873: PUSH
8874: LD_VAR 0 13
8878: GREATER
8879: IFFALSE 8891
// begin result := false ;
8881: LD_ADDR_VAR 0 6
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// exit ;
8889: GO 9380
// end ; hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8891: LD_ADDR_VAR 0 11
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: LD_VAR 0 4
8910: PPUSH
8911: LD_VAR 0 5
8915: PPUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 248
8925: PPUSH
8926: LD_INT 0
8928: PPUSH
8929: CALL 9385 0 6
8933: ST_TO_ADDR
// if not hexes then
8934: LD_VAR 0 11
8938: NOT
8939: IFFALSE 8951
// begin result := false ;
8941: LD_ADDR_VAR 0 6
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// exit ;
8949: GO 9380
// end ; height := GetHexInfo ( x , y ) [ 2 ] ;
8951: LD_ADDR_VAR 0 12
8955: PUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_VAR 0 4
8965: PPUSH
8966: CALL_OW 546
8970: PUSH
8971: LD_INT 2
8973: ARRAY
8974: ST_TO_ADDR
// for i = 1 to hexes do
8975: LD_ADDR_VAR 0 7
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_VAR 0 11
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9337
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
8993: LD_VAR 0 11
8997: PUSH
8998: LD_VAR 0 7
9002: ARRAY
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_VAR 0 11
9012: PUSH
9013: LD_VAR 0 7
9017: ARRAY
9018: PUSH
9019: LD_INT 2
9021: ARRAY
9022: PPUSH
9023: CALL_OW 488
9027: NOT
9028: IFFALSE 9032
// continue ;
9030: GO 8990
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9032: LD_ADDR_VAR 0 8
9036: PUSH
9037: LD_VAR 0 11
9041: PUSH
9042: LD_VAR 0 7
9046: ARRAY
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: PPUSH
9052: LD_VAR 0 11
9056: PUSH
9057: LD_VAR 0 7
9061: ARRAY
9062: PUSH
9063: LD_INT 2
9065: ARRAY
9066: PPUSH
9067: CALL_OW 546
9071: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9072: LD_VAR 0 8
9076: PUSH
9077: LD_INT 1
9079: ARRAY
9080: PUSH
9081: LD_VAR 0 8
9085: PUSH
9086: LD_INT 2
9088: ARRAY
9089: PUSH
9090: LD_VAR 0 12
9094: PUSH
9095: LD_INT 2
9097: PLUS
9098: GREATER
9099: OR
9100: PUSH
9101: LD_VAR 0 8
9105: PUSH
9106: LD_INT 2
9108: ARRAY
9109: PUSH
9110: LD_VAR 0 12
9114: PUSH
9115: LD_INT 2
9117: MINUS
9118: LESS
9119: OR
9120: PUSH
9121: LD_VAR 0 8
9125: PUSH
9126: LD_INT 3
9128: ARRAY
9129: PUSH
9130: LD_INT 0
9132: PUSH
9133: LD_INT 8
9135: PUSH
9136: LD_INT 9
9138: PUSH
9139: LD_INT 10
9141: PUSH
9142: LD_INT 11
9144: PUSH
9145: LD_INT 12
9147: PUSH
9148: LD_INT 13
9150: PUSH
9151: LD_INT 16
9153: PUSH
9154: LD_INT 17
9156: PUSH
9157: LD_INT 18
9159: PUSH
9160: LD_INT 19
9162: PUSH
9163: LD_INT 20
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: IN
9184: NOT
9185: OR
9186: PUSH
9187: LD_VAR 0 8
9191: PUSH
9192: LD_INT 4
9194: ARRAY
9195: OR
9196: PUSH
9197: LD_VAR 0 8
9201: PUSH
9202: LD_INT 5
9204: ARRAY
9205: NOT
9206: OR
9207: PUSH
9208: LD_VAR 0 8
9212: PUSH
9213: LD_INT 6
9215: ARRAY
9216: PUSH
9217: LD_INT 1
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 7
9225: PUSH
9226: LD_INT 9
9228: PUSH
9229: LD_INT 10
9231: PUSH
9232: LD_INT 11
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: IN
9243: NOT
9244: OR
9245: PUSH
9246: LD_VAR 0 11
9250: PUSH
9251: LD_VAR 0 7
9255: ARRAY
9256: PUSH
9257: LD_INT 1
9259: ARRAY
9260: PPUSH
9261: LD_VAR 0 11
9265: PUSH
9266: LD_VAR 0 7
9270: ARRAY
9271: PUSH
9272: LD_INT 2
9274: ARRAY
9275: PPUSH
9276: CALL_OW 428
9280: PUSH
9281: LD_INT 0
9283: GREATER
9284: OR
9285: PUSH
9286: LD_VAR 0 11
9290: PUSH
9291: LD_VAR 0 7
9295: ARRAY
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: PPUSH
9301: LD_VAR 0 11
9305: PUSH
9306: LD_VAR 0 7
9310: ARRAY
9311: PUSH
9312: LD_INT 2
9314: ARRAY
9315: PPUSH
9316: CALL_OW 351
9320: OR
9321: IFFALSE 9335
// begin result := false ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// exit ;
9331: POP
9332: POP
9333: GO 9380
// end ; end ;
9335: GO 8990
9337: POP
9338: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 255
9348: PPUSH
9349: LD_VAR 0 3
9353: PPUSH
9354: LD_VAR 0 4
9358: PPUSH
9359: LD_INT 20
9361: PPUSH
9362: CALL 3636 0 4
9366: PUSH
9367: LD_INT 4
9369: ARRAY
9370: IFFALSE 9380
// result := false ;
9372: LD_ADDR_VAR 0 6
9376: PUSH
9377: LD_INT 0
9379: ST_TO_ADDR
// end ;
9380: LD_VAR 0 6
9384: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
9395: PPUSH
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
9415: PPUSH
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
9421: PPUSH
9422: PPUSH
9423: PPUSH
9424: PPUSH
9425: PPUSH
9426: PPUSH
9427: PPUSH
9428: PPUSH
9429: PPUSH
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
9437: PPUSH
9438: PPUSH
9439: PPUSH
9440: PPUSH
9441: PPUSH
9442: PPUSH
9443: PPUSH
9444: PPUSH
// result = [ ] ;
9445: LD_ADDR_VAR 0 7
9449: PUSH
9450: EMPTY
9451: ST_TO_ADDR
// temp_list = [ ] ;
9452: LD_ADDR_VAR 0 9
9456: PUSH
9457: EMPTY
9458: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9459: LD_VAR 0 4
9463: PUSH
9464: LD_INT 0
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: LD_INT 4
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: IN
9490: NOT
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 0
9499: PUSH
9500: LD_INT 1
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: IN
9507: PUSH
9508: LD_VAR 0 5
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: LD_INT 2
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: IN
9527: NOT
9528: AND
9529: OR
9530: IFFALSE 9534
// exit ;
9532: GO 27919
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9534: LD_VAR 0 1
9538: PUSH
9539: LD_INT 6
9541: PUSH
9542: LD_INT 7
9544: PUSH
9545: LD_INT 8
9547: PUSH
9548: LD_INT 13
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 11
9559: PUSH
9560: LD_INT 14
9562: PUSH
9563: LD_INT 10
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: IN
9577: IFFALSE 9587
// btype = b_lab ;
9579: LD_ADDR_VAR 0 1
9583: PUSH
9584: LD_INT 6
9586: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9587: LD_VAR 0 6
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: IN
9606: NOT
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 6
9627: PUSH
9628: LD_INT 36
9630: PUSH
9631: LD_INT 4
9633: PUSH
9634: LD_INT 5
9636: PUSH
9637: LD_INT 31
9639: PUSH
9640: LD_INT 32
9642: PUSH
9643: LD_INT 33
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: IN
9659: NOT
9660: PUSH
9661: LD_VAR 0 6
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: AND
9670: OR
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: LD_INT 2
9679: PUSH
9680: LD_INT 3
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: IN
9687: NOT
9688: PUSH
9689: LD_VAR 0 6
9693: PUSH
9694: LD_INT 2
9696: EQUAL
9697: AND
9698: OR
9699: IFFALSE 9709
// mode = 0 ;
9701: LD_ADDR_VAR 0 6
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// case mode of 0 :
9709: LD_VAR 0 6
9713: PUSH
9714: LD_INT 0
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 21175
9722: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9723: LD_ADDR_VAR 0 11
9727: PUSH
9728: LD_INT 0
9730: PUSH
9731: LD_INT 0
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 0
9740: PUSH
9741: LD_INT 1
9743: NEG
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: LD_INT 0
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 0
9771: PUSH
9772: LD_INT 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 1
9781: NEG
9782: PUSH
9783: LD_INT 0
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 1
9792: NEG
9793: PUSH
9794: LD_INT 1
9796: NEG
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 1
9804: NEG
9805: PUSH
9806: LD_INT 2
9808: NEG
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 0
9816: PUSH
9817: LD_INT 2
9819: NEG
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: LD_INT 1
9827: PUSH
9828: LD_INT 1
9830: NEG
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 0
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 1
9858: NEG
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 1
9869: PUSH
9870: LD_INT 3
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 0
9879: PUSH
9880: LD_INT 3
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 1
9889: NEG
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
9916: LD_ADDR_VAR 0 12
9920: PUSH
9921: LD_INT 0
9923: PUSH
9924: LD_INT 0
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: LD_INT 1
9936: NEG
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: LD_INT 0
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 0
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 1
9974: NEG
9975: PUSH
9976: LD_INT 0
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 1
9985: NEG
9986: PUSH
9987: LD_INT 1
9989: NEG
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: LD_INT 1
10000: NEG
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 0
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 1
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 1
10028: NEG
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: NEG
10040: PUSH
10041: LD_INT 0
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 2
10050: NEG
10051: PUSH
10052: LD_INT 1
10054: NEG
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 2
10062: NEG
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 3
10073: NEG
10074: PUSH
10075: LD_INT 0
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 3
10084: NEG
10085: PUSH
10086: LD_INT 1
10088: NEG
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10112: LD_ADDR_VAR 0 13
10116: PUSH
10117: LD_INT 0
10119: PUSH
10120: LD_INT 0
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 0
10129: PUSH
10130: LD_INT 1
10132: NEG
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: LD_INT 1
10140: PUSH
10141: LD_INT 0
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 0
10160: PUSH
10161: LD_INT 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 1
10170: NEG
10171: PUSH
10172: LD_INT 0
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 1
10181: NEG
10182: PUSH
10183: LD_INT 1
10185: NEG
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 1
10193: NEG
10194: PUSH
10195: LD_INT 2
10197: NEG
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 1
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: LD_INT 2
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 2
10235: NEG
10236: PUSH
10237: LD_INT 1
10239: NEG
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 2
10247: NEG
10248: PUSH
10249: LD_INT 2
10251: NEG
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 2
10259: NEG
10260: PUSH
10261: LD_INT 3
10263: NEG
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 3
10271: NEG
10272: PUSH
10273: LD_INT 2
10275: NEG
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: NEG
10284: PUSH
10285: LD_INT 3
10287: NEG
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10311: LD_ADDR_VAR 0 14
10315: PUSH
10316: LD_INT 0
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 0
10328: PUSH
10329: LD_INT 1
10331: NEG
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: LD_INT 0
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: LD_INT 1
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 0
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 1
10369: NEG
10370: PUSH
10371: LD_INT 0
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 1
10380: NEG
10381: PUSH
10382: LD_INT 1
10384: NEG
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 1
10392: NEG
10393: PUSH
10394: LD_INT 2
10396: NEG
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 0
10404: PUSH
10405: LD_INT 2
10407: NEG
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: LD_INT 1
10418: NEG
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: LD_INT 2
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 1
10446: NEG
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 1
10457: NEG
10458: PUSH
10459: LD_INT 3
10461: NEG
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 0
10469: PUSH
10470: LD_INT 3
10472: NEG
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 1
10480: PUSH
10481: LD_INT 2
10483: NEG
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10507: LD_ADDR_VAR 0 15
10511: PUSH
10512: LD_INT 0
10514: PUSH
10515: LD_INT 0
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 0
10524: PUSH
10525: LD_INT 1
10527: NEG
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 1
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: LD_INT 1
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 0
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 1
10565: NEG
10566: PUSH
10567: LD_INT 0
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 1
10576: NEG
10577: PUSH
10578: LD_INT 1
10580: NEG
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 1
10588: PUSH
10589: LD_INT 1
10591: NEG
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: LD_INT 0
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: LD_INT 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 1
10619: NEG
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 2
10630: NEG
10631: PUSH
10632: LD_INT 0
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 2
10641: NEG
10642: PUSH
10643: LD_INT 1
10645: NEG
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 1
10656: NEG
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 3
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10700: LD_ADDR_VAR 0 16
10704: PUSH
10705: LD_INT 0
10707: PUSH
10708: LD_INT 0
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 1
10720: NEG
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: LD_INT 0
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 1
10758: NEG
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 1
10769: NEG
10770: PUSH
10771: LD_INT 1
10773: NEG
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 1
10781: NEG
10782: PUSH
10783: LD_INT 2
10785: NEG
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 2
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 2
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 2
10823: NEG
10824: PUSH
10825: LD_INT 1
10827: NEG
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: NEG
10836: PUSH
10837: LD_INT 2
10839: NEG
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 2
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: LD_INT 3
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10893: LD_ADDR_VAR 0 17
10897: PUSH
10898: LD_INT 0
10900: PUSH
10901: LD_INT 0
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 0
10910: PUSH
10911: LD_INT 1
10913: NEG
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: LD_INT 0
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: LD_INT 1
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 0
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 1
10951: NEG
10952: PUSH
10953: LD_INT 0
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 1
10962: NEG
10963: PUSH
10964: LD_INT 1
10966: NEG
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 1
10974: NEG
10975: PUSH
10976: LD_INT 2
10978: NEG
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 0
10986: PUSH
10987: LD_INT 2
10989: NEG
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 1
10997: PUSH
10998: LD_INT 1
11000: NEG
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: LD_INT 0
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 2
11028: PUSH
11029: LD_INT 2
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 0
11048: PUSH
11049: LD_INT 2
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 1
11058: NEG
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 2
11069: NEG
11070: PUSH
11071: LD_INT 0
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 2
11080: NEG
11081: PUSH
11082: LD_INT 1
11084: NEG
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 2
11092: NEG
11093: PUSH
11094: LD_INT 2
11096: NEG
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11123: LD_ADDR_VAR 0 18
11127: PUSH
11128: LD_INT 0
11130: PUSH
11131: LD_INT 0
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: NEG
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 1
11151: PUSH
11152: LD_INT 0
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: LD_INT 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 1
11181: NEG
11182: PUSH
11183: LD_INT 0
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: PUSH
11194: LD_INT 1
11196: NEG
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 1
11204: NEG
11205: PUSH
11206: LD_INT 2
11208: NEG
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 0
11216: PUSH
11217: LD_INT 2
11219: NEG
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 1
11227: PUSH
11228: LD_INT 1
11230: NEG
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: LD_INT 0
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 2
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 0
11278: PUSH
11279: LD_INT 2
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 1
11288: NEG
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: NEG
11300: PUSH
11301: LD_INT 0
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 2
11310: NEG
11311: PUSH
11312: LD_INT 1
11314: NEG
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 2
11322: NEG
11323: PUSH
11324: LD_INT 2
11326: NEG
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11353: LD_ADDR_VAR 0 19
11357: PUSH
11358: LD_INT 0
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 0
11370: PUSH
11371: LD_INT 1
11373: NEG
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: LD_INT 0
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: LD_INT 1
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 0
11401: PUSH
11402: LD_INT 1
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 1
11411: NEG
11412: PUSH
11413: LD_INT 0
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 1
11422: NEG
11423: PUSH
11424: LD_INT 1
11426: NEG
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 1
11434: NEG
11435: PUSH
11436: LD_INT 2
11438: NEG
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 0
11446: PUSH
11447: LD_INT 2
11449: NEG
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 1
11457: PUSH
11458: LD_INT 1
11460: NEG
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 0
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 0
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 1
11518: NEG
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 2
11529: NEG
11530: PUSH
11531: LD_INT 0
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 2
11540: NEG
11541: PUSH
11542: LD_INT 1
11544: NEG
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 2
11552: NEG
11553: PUSH
11554: LD_INT 2
11556: NEG
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11583: LD_ADDR_VAR 0 20
11587: PUSH
11588: LD_INT 0
11590: PUSH
11591: LD_INT 0
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 0
11600: PUSH
11601: LD_INT 1
11603: NEG
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: LD_INT 0
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 0
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 1
11641: NEG
11642: PUSH
11643: LD_INT 0
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 1
11652: NEG
11653: PUSH
11654: LD_INT 1
11656: NEG
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 1
11664: NEG
11665: PUSH
11666: LD_INT 2
11668: NEG
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 0
11676: PUSH
11677: LD_INT 2
11679: NEG
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 1
11687: PUSH
11688: LD_INT 1
11690: NEG
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: LD_INT 0
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 2
11718: PUSH
11719: LD_INT 2
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 0
11738: PUSH
11739: LD_INT 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 1
11748: NEG
11749: PUSH
11750: LD_INT 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 2
11759: NEG
11760: PUSH
11761: LD_INT 0
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 2
11770: NEG
11771: PUSH
11772: LD_INT 1
11774: NEG
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 2
11782: NEG
11783: PUSH
11784: LD_INT 2
11786: NEG
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11813: LD_ADDR_VAR 0 21
11817: PUSH
11818: LD_INT 0
11820: PUSH
11821: LD_INT 0
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 0
11830: PUSH
11831: LD_INT 1
11833: NEG
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: LD_INT 1
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 0
11861: PUSH
11862: LD_INT 1
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 1
11871: NEG
11872: PUSH
11873: LD_INT 0
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 1
11882: NEG
11883: PUSH
11884: LD_INT 1
11886: NEG
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 1
11894: NEG
11895: PUSH
11896: LD_INT 2
11898: NEG
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 0
11906: PUSH
11907: LD_INT 2
11909: NEG
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: LD_INT 1
11920: NEG
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: LD_INT 0
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: LD_INT 2
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 0
11968: PUSH
11969: LD_INT 2
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 1
11978: NEG
11979: PUSH
11980: LD_INT 1
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 2
11989: NEG
11990: PUSH
11991: LD_INT 0
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 2
12000: NEG
12001: PUSH
12002: LD_INT 1
12004: NEG
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 2
12012: NEG
12013: PUSH
12014: LD_INT 2
12016: NEG
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12043: LD_ADDR_VAR 0 22
12047: PUSH
12048: LD_INT 0
12050: PUSH
12051: LD_INT 0
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 0
12060: PUSH
12061: LD_INT 1
12063: NEG
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 1
12071: PUSH
12072: LD_INT 0
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: LD_INT 1
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 0
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 1
12101: NEG
12102: PUSH
12103: LD_INT 0
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 1
12112: NEG
12113: PUSH
12114: LD_INT 1
12116: NEG
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 1
12124: NEG
12125: PUSH
12126: LD_INT 2
12128: NEG
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: LD_INT 2
12139: NEG
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: LD_INT 1
12150: NEG
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: LD_INT 0
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 2
12168: PUSH
12169: LD_INT 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 1
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 0
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 1
12208: NEG
12209: PUSH
12210: LD_INT 1
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 2
12219: NEG
12220: PUSH
12221: LD_INT 0
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 2
12230: NEG
12231: PUSH
12232: LD_INT 1
12234: NEG
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 2
12242: NEG
12243: PUSH
12244: LD_INT 2
12246: NEG
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12273: LD_ADDR_VAR 0 23
12277: PUSH
12278: LD_INT 0
12280: PUSH
12281: LD_INT 0
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 0
12290: PUSH
12291: LD_INT 1
12293: NEG
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: LD_INT 0
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 1
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 0
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 1
12331: NEG
12332: PUSH
12333: LD_INT 0
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 1
12342: NEG
12343: PUSH
12344: LD_INT 1
12346: NEG
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 1
12354: NEG
12355: PUSH
12356: LD_INT 2
12358: NEG
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 0
12366: PUSH
12367: LD_INT 2
12369: NEG
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 1
12377: PUSH
12378: LD_INT 1
12380: NEG
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: LD_INT 0
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: LD_INT 1
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: LD_INT 2
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 0
12428: PUSH
12429: LD_INT 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 1
12438: NEG
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 2
12449: NEG
12450: PUSH
12451: LD_INT 0
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 2
12460: NEG
12461: PUSH
12462: LD_INT 1
12464: NEG
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 2
12472: NEG
12473: PUSH
12474: LD_INT 2
12476: NEG
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: NEG
12485: PUSH
12486: LD_INT 3
12488: NEG
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 1
12496: NEG
12497: PUSH
12498: LD_INT 3
12500: NEG
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 1
12508: PUSH
12509: LD_INT 2
12511: NEG
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 1
12522: NEG
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12553: LD_ADDR_VAR 0 24
12557: PUSH
12558: LD_INT 0
12560: PUSH
12561: LD_INT 0
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 0
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: LD_INT 0
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: LD_INT 1
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 0
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 1
12611: NEG
12612: PUSH
12613: LD_INT 0
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 1
12622: NEG
12623: PUSH
12624: LD_INT 1
12626: NEG
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 1
12634: NEG
12635: PUSH
12636: LD_INT 2
12638: NEG
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 0
12646: PUSH
12647: LD_INT 2
12649: NEG
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: LD_INT 1
12660: NEG
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 0
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 2
12678: PUSH
12679: LD_INT 1
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: LD_INT 2
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 0
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 1
12718: NEG
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 2
12729: NEG
12730: PUSH
12731: LD_INT 0
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 2
12740: NEG
12741: PUSH
12742: LD_INT 1
12744: NEG
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 2
12752: NEG
12753: PUSH
12754: LD_INT 2
12756: NEG
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: LD_INT 2
12767: NEG
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 1
12778: NEG
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 3
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12829: LD_ADDR_VAR 0 25
12833: PUSH
12834: LD_INT 0
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 0
12846: PUSH
12847: LD_INT 1
12849: NEG
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 1
12857: PUSH
12858: LD_INT 0
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 0
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 1
12887: NEG
12888: PUSH
12889: LD_INT 0
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 1
12898: NEG
12899: PUSH
12900: LD_INT 1
12902: NEG
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 1
12910: NEG
12911: PUSH
12912: LD_INT 2
12914: NEG
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 0
12922: PUSH
12923: LD_INT 2
12925: NEG
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: LD_INT 1
12936: NEG
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: LD_INT 0
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: LD_INT 2
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 0
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 1
12994: NEG
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 2
13005: NEG
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 2
13016: NEG
13017: PUSH
13018: LD_INT 1
13020: NEG
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 2
13028: NEG
13029: PUSH
13030: LD_INT 2
13032: NEG
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: LD_INT 1
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 3
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13103: LD_ADDR_VAR 0 26
13107: PUSH
13108: LD_INT 0
13110: PUSH
13111: LD_INT 0
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 0
13120: PUSH
13121: LD_INT 1
13123: NEG
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: LD_INT 0
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 1
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 0
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 1
13161: NEG
13162: PUSH
13163: LD_INT 0
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 1
13172: NEG
13173: PUSH
13174: LD_INT 1
13176: NEG
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 1
13184: NEG
13185: PUSH
13186: LD_INT 2
13188: NEG
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 0
13196: PUSH
13197: LD_INT 2
13199: NEG
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: LD_INT 1
13210: NEG
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: LD_INT 0
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 2
13228: PUSH
13229: LD_INT 1
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 2
13238: PUSH
13239: LD_INT 2
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: LD_INT 2
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 0
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 1
13268: NEG
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: NEG
13280: PUSH
13281: LD_INT 0
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 2
13290: NEG
13291: PUSH
13292: LD_INT 1
13294: NEG
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 2
13302: NEG
13303: PUSH
13304: LD_INT 2
13306: NEG
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 2
13314: PUSH
13315: LD_INT 3
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 1
13334: NEG
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 2
13345: NEG
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13379: LD_ADDR_VAR 0 27
13383: PUSH
13384: LD_INT 0
13386: PUSH
13387: LD_INT 0
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 0
13396: PUSH
13397: LD_INT 1
13399: NEG
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 1
13407: PUSH
13408: LD_INT 0
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 0
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 1
13437: NEG
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 1
13448: NEG
13449: PUSH
13450: LD_INT 1
13452: NEG
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 1
13460: NEG
13461: PUSH
13462: LD_INT 2
13464: NEG
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: LD_INT 2
13475: NEG
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: LD_INT 1
13486: NEG
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 0
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 2
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 2
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 0
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 1
13544: NEG
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 2
13555: NEG
13556: PUSH
13557: LD_INT 0
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 2
13566: NEG
13567: PUSH
13568: LD_INT 1
13570: NEG
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 2
13578: NEG
13579: PUSH
13580: LD_INT 2
13582: NEG
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 1
13590: NEG
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 2
13601: NEG
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 3
13612: NEG
13613: PUSH
13614: LD_INT 1
13616: NEG
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 3
13624: NEG
13625: PUSH
13626: LD_INT 2
13628: NEG
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13659: LD_ADDR_VAR 0 28
13663: PUSH
13664: LD_INT 0
13666: PUSH
13667: LD_INT 0
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 0
13676: PUSH
13677: LD_INT 1
13679: NEG
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 0
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: LD_INT 1
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 0
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 1
13717: NEG
13718: PUSH
13719: LD_INT 0
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 1
13728: NEG
13729: PUSH
13730: LD_INT 1
13732: NEG
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 1
13740: NEG
13741: PUSH
13742: LD_INT 2
13744: NEG
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 0
13752: PUSH
13753: LD_INT 2
13755: NEG
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 1
13763: PUSH
13764: LD_INT 1
13766: NEG
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 2
13774: PUSH
13775: LD_INT 0
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 2
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: LD_INT 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 1
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 1
13824: NEG
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 2
13835: NEG
13836: PUSH
13837: LD_INT 0
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 2
13846: NEG
13847: PUSH
13848: LD_INT 1
13850: NEG
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 2
13858: NEG
13859: PUSH
13860: LD_INT 2
13862: NEG
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 2
13870: NEG
13871: PUSH
13872: LD_INT 3
13874: NEG
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 1
13882: NEG
13883: PUSH
13884: LD_INT 3
13886: NEG
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 3
13894: NEG
13895: PUSH
13896: LD_INT 1
13898: NEG
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 3
13906: NEG
13907: PUSH
13908: LD_INT 2
13910: NEG
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13941: LD_ADDR_VAR 0 29
13945: PUSH
13946: LD_INT 0
13948: PUSH
13949: LD_INT 0
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 0
13958: PUSH
13959: LD_INT 1
13961: NEG
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: LD_INT 0
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: LD_INT 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 1
13999: NEG
14000: PUSH
14001: LD_INT 0
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 1
14010: NEG
14011: PUSH
14012: LD_INT 1
14014: NEG
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 1
14022: NEG
14023: PUSH
14024: LD_INT 2
14026: NEG
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 0
14034: PUSH
14035: LD_INT 2
14037: NEG
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: LD_INT 1
14048: NEG
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 1
14096: NEG
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 2
14107: NEG
14108: PUSH
14109: LD_INT 1
14111: NEG
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 2
14119: NEG
14120: PUSH
14121: LD_INT 2
14123: NEG
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 2
14131: NEG
14132: PUSH
14133: LD_INT 3
14135: NEG
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 2
14143: PUSH
14144: LD_INT 1
14146: NEG
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 3
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: LD_INT 3
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 1
14174: NEG
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: NEG
14186: PUSH
14187: LD_INT 2
14189: NEG
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14220: LD_ADDR_VAR 0 30
14224: PUSH
14225: LD_INT 0
14227: PUSH
14228: LD_INT 0
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 0
14237: PUSH
14238: LD_INT 1
14240: NEG
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: LD_INT 0
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 1
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 0
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 1
14278: NEG
14279: PUSH
14280: LD_INT 0
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 1
14289: NEG
14290: PUSH
14291: LD_INT 1
14293: NEG
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 1
14301: NEG
14302: PUSH
14303: LD_INT 2
14305: NEG
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 0
14313: PUSH
14314: LD_INT 2
14316: NEG
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: LD_INT 1
14327: NEG
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 2
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 2
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: NEG
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 2
14386: NEG
14387: PUSH
14388: LD_INT 0
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 2
14397: NEG
14398: PUSH
14399: LD_INT 1
14401: NEG
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 1
14409: NEG
14410: PUSH
14411: LD_INT 3
14413: NEG
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: LD_INT 2
14424: NEG
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 2
14442: PUSH
14443: LD_INT 3
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 2
14452: NEG
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 3
14463: NEG
14464: PUSH
14465: LD_INT 1
14467: NEG
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14498: LD_ADDR_VAR 0 31
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: LD_INT 0
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 0
14515: PUSH
14516: LD_INT 1
14518: NEG
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 0
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 1
14556: NEG
14557: PUSH
14558: LD_INT 0
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 1
14567: NEG
14568: PUSH
14569: LD_INT 1
14571: NEG
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 1
14579: NEG
14580: PUSH
14581: LD_INT 2
14583: NEG
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: LD_INT 1
14594: NEG
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 0
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: LD_INT 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 0
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 1
14652: NEG
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 2
14663: NEG
14664: PUSH
14665: LD_INT 1
14667: NEG
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 2
14675: NEG
14676: PUSH
14677: LD_INT 2
14679: NEG
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: NEG
14688: PUSH
14689: LD_INT 3
14691: NEG
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: LD_INT 1
14702: NEG
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: NEG
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 3
14741: NEG
14742: PUSH
14743: LD_INT 2
14745: NEG
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14776: LD_ADDR_VAR 0 32
14780: PUSH
14781: LD_INT 0
14783: PUSH
14784: LD_INT 0
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: LD_INT 1
14796: NEG
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: LD_INT 0
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 0
14824: PUSH
14825: LD_INT 1
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 1
14834: NEG
14835: PUSH
14836: LD_INT 0
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 1
14845: NEG
14846: PUSH
14847: LD_INT 1
14849: NEG
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 1
14857: NEG
14858: PUSH
14859: LD_INT 2
14861: NEG
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 0
14869: PUSH
14870: LD_INT 2
14872: NEG
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: LD_INT 1
14883: NEG
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 2
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 0
14921: PUSH
14922: LD_INT 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 2
14942: NEG
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 2
14953: NEG
14954: PUSH
14955: LD_INT 1
14957: NEG
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 1
14965: NEG
14966: PUSH
14967: LD_INT 3
14969: NEG
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: LD_INT 2
14980: NEG
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 2
15008: NEG
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 3
15019: NEG
15020: PUSH
15021: LD_INT 1
15023: NEG
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15054: LD_ADDR_VAR 0 33
15058: PUSH
15059: LD_INT 0
15061: PUSH
15062: LD_INT 0
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 0
15071: PUSH
15072: LD_INT 1
15074: NEG
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: LD_INT 0
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 1
15112: NEG
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 1
15123: NEG
15124: PUSH
15125: LD_INT 1
15127: NEG
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 1
15135: NEG
15136: PUSH
15137: LD_INT 2
15139: NEG
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: LD_INT 1
15150: NEG
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: LD_INT 1
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 0
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 1
15198: NEG
15199: PUSH
15200: LD_INT 1
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 2
15209: NEG
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 2
15220: NEG
15221: PUSH
15222: LD_INT 1
15224: NEG
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 2
15232: NEG
15233: PUSH
15234: LD_INT 2
15236: NEG
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 2
15244: NEG
15245: PUSH
15246: LD_INT 3
15248: NEG
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: LD_INT 1
15259: NEG
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: LD_INT 3
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: NEG
15299: PUSH
15300: LD_INT 2
15302: NEG
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15333: LD_ADDR_VAR 0 34
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: LD_INT 1
15353: NEG
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: LD_INT 0
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: LD_INT 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 1
15391: NEG
15392: PUSH
15393: LD_INT 0
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 1
15402: NEG
15403: PUSH
15404: LD_INT 1
15406: NEG
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 1
15414: NEG
15415: PUSH
15416: LD_INT 2
15418: NEG
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 0
15426: PUSH
15427: LD_INT 2
15429: NEG
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: LD_INT 1
15440: NEG
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 2
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: LD_INT 2
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 1
15478: NEG
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: NEG
15490: PUSH
15491: LD_INT 0
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 2
15500: NEG
15501: PUSH
15502: LD_INT 1
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 2
15512: NEG
15513: PUSH
15514: LD_INT 2
15516: NEG
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 1
15524: NEG
15525: PUSH
15526: LD_INT 3
15528: NEG
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: LD_INT 2
15539: NEG
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 3
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 2
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: NEG
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 3
15578: NEG
15579: PUSH
15580: LD_INT 1
15582: NEG
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15613: LD_ADDR_VAR 0 35
15617: PUSH
15618: LD_INT 0
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: LD_INT 0
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 0
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 1
15682: NEG
15683: PUSH
15684: LD_INT 1
15686: NEG
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 2
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 2
15704: NEG
15705: PUSH
15706: LD_INT 1
15708: NEG
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15725: LD_ADDR_VAR 0 36
15729: PUSH
15730: LD_INT 0
15732: PUSH
15733: LD_INT 0
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 0
15742: PUSH
15743: LD_INT 1
15745: NEG
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 1
15783: NEG
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 1
15794: NEG
15795: PUSH
15796: LD_INT 1
15798: NEG
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 1
15806: NEG
15807: PUSH
15808: LD_INT 2
15810: NEG
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15837: LD_ADDR_VAR 0 37
15841: PUSH
15842: LD_INT 0
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 0
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 0
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 0
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 1
15895: NEG
15896: PUSH
15897: LD_INT 0
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: NEG
15907: PUSH
15908: LD_INT 1
15910: NEG
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15949: LD_ADDR_VAR 0 38
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: LD_INT 1
15969: NEG
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 1
16007: NEG
16008: PUSH
16009: LD_INT 0
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 1
16018: NEG
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 2
16040: NEG
16041: PUSH
16042: LD_INT 1
16044: NEG
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16061: LD_ADDR_VAR 0 39
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: LD_INT 1
16081: NEG
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: NEG
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 1
16130: NEG
16131: PUSH
16132: LD_INT 1
16134: NEG
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 2
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16173: LD_ADDR_VAR 0 40
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: LD_INT 1
16193: NEG
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: LD_INT 0
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 0
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 1
16231: NEG
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: NEG
16243: PUSH
16244: LD_INT 1
16246: NEG
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: LD_INT 1
16257: NEG
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: NEG
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16285: LD_ADDR_VAR 0 41
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 1
16305: NEG
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: LD_INT 0
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: NEG
16344: PUSH
16345: LD_INT 0
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 1
16354: NEG
16355: PUSH
16356: LD_INT 1
16358: NEG
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 1
16366: NEG
16367: PUSH
16368: LD_INT 2
16370: NEG
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: NEG
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 2
16451: NEG
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 2
16463: NEG
16464: PUSH
16465: LD_INT 2
16467: NEG
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 2
16475: NEG
16476: PUSH
16477: LD_INT 3
16479: NEG
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 3
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: LD_INT 2
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 3
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: LD_INT 3
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: NEG
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 3
16559: NEG
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 3
16570: NEG
16571: PUSH
16572: LD_INT 1
16574: NEG
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 3
16582: NEG
16583: PUSH
16584: LD_INT 2
16586: NEG
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 3
16594: NEG
16595: PUSH
16596: LD_INT 3
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16635: LD_ADDR_VAR 0 42
16639: PUSH
16640: LD_INT 0
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: LD_INT 0
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: LD_INT 1
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: NEG
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: NEG
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: LD_INT 2
16720: NEG
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 0
16728: PUSH
16729: LD_INT 2
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: LD_INT 1
16742: NEG
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 2
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 2
16801: NEG
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 2
16813: NEG
16814: PUSH
16815: LD_INT 2
16817: NEG
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 2
16825: NEG
16826: PUSH
16827: LD_INT 3
16829: NEG
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: LD_INT 3
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 3
16852: NEG
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: LD_INT 2
16863: NEG
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 3
16881: PUSH
16882: LD_INT 3
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 2
16891: PUSH
16892: LD_INT 3
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: LD_INT 3
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: LD_INT 3
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 1
16921: NEG
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 3
16932: NEG
16933: PUSH
16934: LD_INT 2
16936: NEG
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 3
16944: NEG
16945: PUSH
16946: LD_INT 3
16948: NEG
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16985: LD_ADDR_VAR 0 43
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 1
17005: NEG
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: LD_INT 1
17058: NEG
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: LD_INT 2
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 1
17174: NEG
17175: PUSH
17176: LD_INT 3
17178: NEG
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 0
17186: PUSH
17187: LD_INT 3
17189: NEG
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 3
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: NEG
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 3
17281: NEG
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 3
17292: NEG
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17333: LD_ADDR_VAR 0 44
17337: PUSH
17338: LD_INT 0
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 1
17391: NEG
17392: PUSH
17393: LD_INT 0
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 1
17402: NEG
17403: PUSH
17404: LD_INT 1
17406: NEG
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: LD_INT 1
17429: NEG
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 0
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: NEG
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 2
17499: NEG
17500: PUSH
17501: LD_INT 1
17503: NEG
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: NEG
17512: PUSH
17513: LD_INT 2
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 2
17523: NEG
17524: PUSH
17525: LD_INT 3
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: LD_INT 1
17538: NEG
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 3
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 3
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: NEG
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 3
17607: NEG
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 3
17618: NEG
17619: PUSH
17620: LD_INT 1
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 3
17630: NEG
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 3
17642: NEG
17643: PUSH
17644: LD_INT 3
17646: NEG
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17683: LD_ADDR_VAR 0 45
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: LD_INT 1
17703: NEG
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: NEG
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 1
17764: NEG
17765: PUSH
17766: LD_INT 2
17768: NEG
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 2
17779: NEG
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: LD_INT 1
17790: NEG
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 2
17808: PUSH
17809: LD_INT 2
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 2
17861: NEG
17862: PUSH
17863: LD_INT 2
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: NEG
17874: PUSH
17875: LD_INT 3
17877: NEG
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 3
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 3
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: LD_INT 3
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: LD_INT 3
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 3
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 3
17980: NEG
17981: PUSH
17982: LD_INT 2
17984: NEG
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 3
17992: NEG
17993: PUSH
17994: LD_INT 3
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18033: LD_ADDR_VAR 0 46
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: NEG
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: LD_INT 2
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: NEG
18223: PUSH
18224: LD_INT 3
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: LD_INT 3
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 3
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 2
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 3
18329: NEG
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 3
18340: NEG
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18381: LD_ADDR_VAR 0 47
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 2
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 2
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 1
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: NEG
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: NEG
18509: PUSH
18510: LD_INT 2
18512: NEG
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18532: LD_ADDR_VAR 0 48
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: LD_INT 2
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18679: LD_ADDR_VAR 0 49
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: LD_INT 2
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18823: LD_ADDR_VAR 0 50
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
18967: LD_ADDR_VAR 0 51
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: LD_INT 1
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19114: LD_ADDR_VAR 0 52
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: NEG
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: NEG
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 2
19229: NEG
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: NEG
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19265: LD_ADDR_VAR 0 53
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 1
19338: NEG
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 2
19350: NEG
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 2
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 2
19441: NEG
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: NEG
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: LD_INT 2
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19495: LD_ADDR_VAR 0 54
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: NEG
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: LD_INT 2
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19725: LD_ADDR_VAR 0 55
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19955: LD_ADDR_VAR 0 56
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20185: LD_ADDR_VAR 0 57
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: NEG
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: LD_INT 2
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: LD_INT 2
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: NEG
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20415: LD_ADDR_VAR 0 58
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: NEG
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: LD_INT 2
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: LD_INT 1
20522: NEG
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 2
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: NEG
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: NEG
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20645: LD_ADDR_VAR 0 59
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20733: LD_ADDR_VAR 0 60
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20821: LD_ADDR_VAR 0 61
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20909: LD_ADDR_VAR 0 62
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20997: LD_ADDR_VAR 0 63
21001: PUSH
21002: LD_INT 0
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21085: LD_ADDR_VAR 0 64
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: ST_TO_ADDR
// end ; 1 :
21173: GO 27070
21175: LD_INT 1
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 23806
21183: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21184: LD_ADDR_VAR 0 11
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: LD_INT 3
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 3
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: LIST
21227: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21228: LD_ADDR_VAR 0 12
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 3
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21269: LD_ADDR_VAR 0 13
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21309: LD_ADDR_VAR 0 14
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21350: LD_ADDR_VAR 0 15
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: NEG
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 3
21379: NEG
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21394: LD_ADDR_VAR 0 16
21398: PUSH
21399: LD_INT 2
21401: NEG
21402: PUSH
21403: LD_INT 3
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 3
21413: NEG
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 3
21425: NEG
21426: PUSH
21427: LD_INT 3
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: LIST
21439: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21440: LD_ADDR_VAR 0 17
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 3
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: LD_INT 3
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 2
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21484: LD_ADDR_VAR 0 18
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21525: LD_ADDR_VAR 0 19
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 3
21542: PUSH
21543: LD_INT 3
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 3
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21565: LD_ADDR_VAR 0 20
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21606: LD_ADDR_VAR 0 21
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 3
21624: NEG
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 3
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21650: LD_ADDR_VAR 0 22
21654: PUSH
21655: LD_INT 2
21657: NEG
21658: PUSH
21659: LD_INT 3
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 3
21669: NEG
21670: PUSH
21671: LD_INT 2
21673: NEG
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 3
21681: NEG
21682: PUSH
21683: LD_INT 3
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21696: LD_ADDR_VAR 0 23
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 3
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: LD_INT 4
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 3
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21740: LD_ADDR_VAR 0 24
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: LD_INT 0
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 4
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21781: LD_ADDR_VAR 0 25
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: LD_INT 3
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 4
21798: PUSH
21799: LD_INT 3
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 3
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21821: LD_ADDR_VAR 0 26
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: LD_INT 4
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21862: LD_ADDR_VAR 0 27
21866: PUSH
21867: LD_INT 3
21869: NEG
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 3
21880: NEG
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 4
21891: NEG
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
21906: LD_ADDR_VAR 0 28
21910: PUSH
21911: LD_INT 3
21913: NEG
21914: PUSH
21915: LD_INT 3
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 3
21925: NEG
21926: PUSH
21927: LD_INT 4
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 4
21937: NEG
21938: PUSH
21939: LD_INT 3
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
21952: LD_ADDR_VAR 0 29
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: LD_INT 3
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 3
21974: NEG
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 2
21985: NEG
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 4
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: LD_INT 4
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 3
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 5
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 5
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 4
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: LD_INT 6
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 6
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 5
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22107: LD_ADDR_VAR 0 30
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 3
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 4
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 4
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 5
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 5
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 5
22207: PUSH
22208: LD_INT 1
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 6
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 6
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22250: LD_ADDR_VAR 0 31
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: LD_INT 2
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 3
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 4
22287: PUSH
22288: LD_INT 3
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 4
22297: PUSH
22298: LD_INT 4
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: LD_INT 4
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 5
22317: PUSH
22318: LD_INT 4
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 5
22327: PUSH
22328: LD_INT 5
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 4
22337: PUSH
22338: LD_INT 5
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 6
22347: PUSH
22348: LD_INT 5
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 6
22357: PUSH
22358: LD_INT 6
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 6
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22389: LD_ADDR_VAR 0 32
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: LD_INT 4
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 4
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: NEG
22448: PUSH
22449: LD_INT 3
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 5
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 4
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 6
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 6
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: LD_INT 5
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22532: LD_ADDR_VAR 0 33
22536: PUSH
22537: LD_INT 2
22539: NEG
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 3
22550: NEG
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 4
22584: NEG
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 4
22595: NEG
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 4
22607: NEG
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 5
22618: NEG
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 5
22629: NEG
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 5
22641: NEG
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 6
22652: NEG
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 6
22663: NEG
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22687: LD_ADDR_VAR 0 34
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 3
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 3
22718: NEG
22719: PUSH
22720: LD_INT 3
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 3
22730: NEG
22731: PUSH
22732: LD_INT 4
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 4
22742: NEG
22743: PUSH
22744: LD_INT 3
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 4
22754: NEG
22755: PUSH
22756: LD_INT 4
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 4
22766: NEG
22767: PUSH
22768: LD_INT 5
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 5
22778: NEG
22779: PUSH
22780: LD_INT 4
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 5
22790: NEG
22791: PUSH
22792: LD_INT 5
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 5
22802: NEG
22803: PUSH
22804: LD_INT 6
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 6
22814: NEG
22815: PUSH
22816: LD_INT 5
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 6
22826: NEG
22827: PUSH
22828: LD_INT 6
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22850: LD_ADDR_VAR 0 41
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: LD_INT 3
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
22894: LD_ADDR_VAR 0 42
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 3
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
22935: LD_ADDR_VAR 0 43
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: LD_INT 2
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 3
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
22975: LD_ADDR_VAR 0 44
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23016: LD_ADDR_VAR 0 45
23020: PUSH
23021: LD_INT 2
23023: NEG
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 3
23045: NEG
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23060: LD_ADDR_VAR 0 46
23064: PUSH
23065: LD_INT 2
23067: NEG
23068: PUSH
23069: LD_INT 2
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: LD_INT 3
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 3
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23106: LD_ADDR_VAR 0 47
23110: PUSH
23111: LD_INT 2
23113: NEG
23114: PUSH
23115: LD_INT 3
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 3
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23139: LD_ADDR_VAR 0 48
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23170: LD_ADDR_VAR 0 49
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23199: LD_ADDR_VAR 0 50
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 3
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23228: LD_ADDR_VAR 0 51
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23259: LD_ADDR_VAR 0 52
23263: PUSH
23264: LD_INT 3
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23292: LD_ADDR_VAR 0 53
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: LD_INT 3
23314: NEG
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23336: LD_ADDR_VAR 0 54
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 3
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: LIST
23376: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23377: LD_ADDR_VAR 0 55
23381: PUSH
23382: LD_INT 3
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 3
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23417: LD_ADDR_VAR 0 56
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 3
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 3
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23458: LD_ADDR_VAR 0 57
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 3
23476: NEG
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 3
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23502: LD_ADDR_VAR 0 58
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 3
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 3
23521: NEG
23522: PUSH
23523: LD_INT 2
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 3
23533: NEG
23534: PUSH
23535: LD_INT 3
23537: NEG
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23548: LD_ADDR_VAR 0 59
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23592: LD_ADDR_VAR 0 60
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: LIST
23632: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23633: LD_ADDR_VAR 0 61
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23673: LD_ADDR_VAR 0 62
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23714: LD_ADDR_VAR 0 63
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23758: LD_ADDR_VAR 0 64
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: ST_TO_ADDR
// end ; 2 :
23804: GO 27070
23806: LD_INT 2
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 27069
23814: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23815: LD_ADDR_VAR 0 29
23819: PUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 4
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 5
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 5
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 4
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 3
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 3
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 5
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 3
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 4
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 4
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 3
23955: PUSH
23956: LD_INT 4
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: PUSH
23976: LD_INT 2
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 4
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 4
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: LD_INT 4
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 0
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 4
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 5
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: LD_INT 4
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 3
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 5
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: NEG
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 3
24098: NEG
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 3
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 2
24121: NEG
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 4
24154: NEG
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 4
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 4
24177: NEG
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: NEG
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 4
24200: NEG
24201: PUSH
24202: LD_INT 4
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 4
24212: NEG
24213: PUSH
24214: LD_INT 5
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 3
24224: NEG
24225: PUSH
24226: LD_INT 4
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 3
24236: NEG
24237: PUSH
24238: LD_INT 3
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 4
24248: NEG
24249: PUSH
24250: LD_INT 3
24252: NEG
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 5
24260: NEG
24261: PUSH
24262: LD_INT 4
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 5
24272: NEG
24273: PUSH
24274: LD_INT 5
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 3
24284: NEG
24285: PUSH
24286: LD_INT 5
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 5
24296: NEG
24297: PUSH
24298: LD_INT 3
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24353: LD_ADDR_VAR 0 30
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 4
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 4
24370: PUSH
24371: LD_INT 3
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 5
24380: PUSH
24381: LD_INT 4
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 5
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 4
24400: PUSH
24401: LD_INT 5
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 3
24410: PUSH
24411: LD_INT 4
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 3
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 5
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 3
24440: PUSH
24441: LD_INT 5
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 3
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: LD_INT 4
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 3
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 4
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 4
24543: NEG
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 4
24554: NEG
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 3
24566: NEG
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 3
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 4
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 5
24599: NEG
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 5
24610: NEG
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 5
24622: NEG
24623: PUSH
24624: LD_INT 2
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 3
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: NEG
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 3
24657: NEG
24658: PUSH
24659: LD_INT 4
24661: NEG
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: LD_INT 3
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: NEG
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 4
24705: NEG
24706: PUSH
24707: LD_INT 3
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 4
24717: NEG
24718: PUSH
24719: LD_INT 4
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 2
24729: NEG
24730: PUSH
24731: LD_INT 4
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 4
24741: NEG
24742: PUSH
24743: LD_INT 2
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 4
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 5
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 4
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 3
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 3
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 4
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: LD_INT 5
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: LD_INT 5
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
24900: LD_ADDR_VAR 0 31
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: LD_INT 4
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 3
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 4
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 5
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 5
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 4
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 3
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: LD_INT 5
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: LD_INT 3
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 3
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 3
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 4
25056: NEG
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 4
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 4
25079: NEG
25080: PUSH
25081: LD_INT 2
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 4
25102: NEG
25103: PUSH
25104: LD_INT 4
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 4
25114: NEG
25115: PUSH
25116: LD_INT 5
25118: NEG
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 3
25126: NEG
25127: PUSH
25128: LD_INT 4
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 3
25138: NEG
25139: PUSH
25140: LD_INT 3
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 4
25150: NEG
25151: PUSH
25152: LD_INT 3
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 5
25162: NEG
25163: PUSH
25164: LD_INT 4
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 5
25174: NEG
25175: PUSH
25176: LD_INT 5
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 3
25186: NEG
25187: PUSH
25188: LD_INT 5
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 5
25198: NEG
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 3
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 4
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 3
25235: NEG
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: LD_INT 3
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 4
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: LD_INT 4
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 4
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 4
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 5
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 5
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 4
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 5
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25450: LD_ADDR_VAR 0 32
25454: PUSH
25455: LD_INT 4
25457: NEG
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 4
25468: NEG
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: NEG
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 4
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 5
25513: NEG
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 5
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 5
25536: NEG
25537: PUSH
25538: LD_INT 2
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 3
25548: NEG
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 3
25559: NEG
25560: PUSH
25561: LD_INT 3
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 3
25571: NEG
25572: PUSH
25573: LD_INT 4
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 3
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 3
25607: NEG
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 4
25619: NEG
25620: PUSH
25621: LD_INT 3
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 4
25631: NEG
25632: PUSH
25633: LD_INT 4
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: LD_INT 4
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 4
25655: NEG
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 4
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 5
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 4
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 3
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 4
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 5
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 3
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 5
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 3
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 4
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 4
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 3
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 4
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 4
25862: PUSH
25863: LD_INT 4
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 4
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 5
25882: PUSH
25883: LD_INT 4
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 5
25892: PUSH
25893: LD_INT 5
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 4
25902: PUSH
25903: LD_INT 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: LD_INT 4
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 5
25932: PUSH
25933: LD_INT 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 3
25942: PUSH
25943: LD_INT 5
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
25997: LD_ADDR_VAR 0 33
26001: PUSH
26002: LD_INT 4
26004: NEG
26005: PUSH
26006: LD_INT 4
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 4
26016: NEG
26017: PUSH
26018: LD_INT 5
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 3
26028: NEG
26029: PUSH
26030: LD_INT 4
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 3
26040: NEG
26041: PUSH
26042: LD_INT 3
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 4
26052: NEG
26053: PUSH
26054: LD_INT 3
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 5
26064: NEG
26065: PUSH
26066: LD_INT 4
26068: NEG
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 5
26076: NEG
26077: PUSH
26078: LD_INT 5
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 3
26088: NEG
26089: PUSH
26090: LD_INT 5
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 5
26100: NEG
26101: PUSH
26102: LD_INT 3
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 3
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 4
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: LD_INT 3
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 4
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 2
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 4
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 4
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 5
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 5
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 4
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 5
26297: PUSH
26298: LD_INT 2
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 3
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 4
26327: PUSH
26328: LD_INT 3
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 4
26337: PUSH
26338: LD_INT 4
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: LD_INT 4
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 3
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 4
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: LD_INT 4
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 4
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 4
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 5
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 5
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 4
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: LD_INT 3
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 5
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26535: LD_ADDR_VAR 0 34
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 4
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 5
26556: NEG
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 4
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 3
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: LD_INT 3
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 4
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: LD_INT 5
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: LD_INT 5
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 3
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 3
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 4
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 4
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 4
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 4
26737: PUSH
26738: LD_INT 4
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 4
26747: PUSH
26748: LD_INT 3
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 5
26757: PUSH
26758: LD_INT 4
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 5
26767: PUSH
26768: LD_INT 5
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 4
26777: PUSH
26778: LD_INT 5
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: LD_INT 4
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 5
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: LD_INT 5
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 4
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 4
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 4
26920: NEG
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 4
26931: NEG
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 3
26943: NEG
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 3
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 4
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 5
26976: NEG
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 5
26987: NEG
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 5
26999: NEG
27000: PUSH
27001: LD_INT 2
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 3
27011: NEG
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// end ; end ;
27067: GO 27070
27069: POP
// case btype of b_depot , b_warehouse :
27070: LD_VAR 0 1
27074: PUSH
27075: LD_INT 0
27077: DOUBLE
27078: EQUAL
27079: IFTRUE 27089
27081: LD_INT 1
27083: DOUBLE
27084: EQUAL
27085: IFTRUE 27089
27087: GO 27290
27089: POP
// case nation of nation_american :
27090: LD_VAR 0 5
27094: PUSH
27095: LD_INT 1
27097: DOUBLE
27098: EQUAL
27099: IFTRUE 27103
27101: GO 27159
27103: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27104: LD_ADDR_VAR 0 9
27108: PUSH
27109: LD_VAR 0 11
27113: PUSH
27114: LD_VAR 0 12
27118: PUSH
27119: LD_VAR 0 13
27123: PUSH
27124: LD_VAR 0 14
27128: PUSH
27129: LD_VAR 0 15
27133: PUSH
27134: LD_VAR 0 16
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: LD_VAR 0 4
27151: PUSH
27152: LD_INT 1
27154: PLUS
27155: ARRAY
27156: ST_TO_ADDR
27157: GO 27288
27159: LD_INT 2
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27167
27165: GO 27223
27167: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27168: LD_ADDR_VAR 0 9
27172: PUSH
27173: LD_VAR 0 17
27177: PUSH
27178: LD_VAR 0 18
27182: PUSH
27183: LD_VAR 0 19
27187: PUSH
27188: LD_VAR 0 20
27192: PUSH
27193: LD_VAR 0 21
27197: PUSH
27198: LD_VAR 0 22
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: LD_VAR 0 4
27215: PUSH
27216: LD_INT 1
27218: PLUS
27219: ARRAY
27220: ST_TO_ADDR
27221: GO 27288
27223: LD_INT 3
27225: DOUBLE
27226: EQUAL
27227: IFTRUE 27231
27229: GO 27287
27231: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27232: LD_ADDR_VAR 0 9
27236: PUSH
27237: LD_VAR 0 23
27241: PUSH
27242: LD_VAR 0 24
27246: PUSH
27247: LD_VAR 0 25
27251: PUSH
27252: LD_VAR 0 26
27256: PUSH
27257: LD_VAR 0 27
27261: PUSH
27262: LD_VAR 0 28
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: PUSH
27275: LD_VAR 0 4
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: ARRAY
27284: ST_TO_ADDR
27285: GO 27288
27287: POP
27288: GO 27837
27290: LD_INT 2
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27304
27296: LD_INT 3
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27360
27304: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27305: LD_ADDR_VAR 0 9
27309: PUSH
27310: LD_VAR 0 29
27314: PUSH
27315: LD_VAR 0 30
27319: PUSH
27320: LD_VAR 0 31
27324: PUSH
27325: LD_VAR 0 32
27329: PUSH
27330: LD_VAR 0 33
27334: PUSH
27335: LD_VAR 0 34
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: PUSH
27348: LD_VAR 0 4
27352: PUSH
27353: LD_INT 1
27355: PLUS
27356: ARRAY
27357: ST_TO_ADDR
27358: GO 27837
27360: LD_INT 16
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27416
27366: LD_INT 17
27368: DOUBLE
27369: EQUAL
27370: IFTRUE 27416
27372: LD_INT 18
27374: DOUBLE
27375: EQUAL
27376: IFTRUE 27416
27378: LD_INT 19
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27416
27384: LD_INT 20
27386: DOUBLE
27387: EQUAL
27388: IFTRUE 27416
27390: LD_INT 21
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27416
27396: LD_INT 23
27398: DOUBLE
27399: EQUAL
27400: IFTRUE 27416
27402: LD_INT 24
27404: DOUBLE
27405: EQUAL
27406: IFTRUE 27416
27408: LD_INT 25
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27472
27416: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27417: LD_ADDR_VAR 0 9
27421: PUSH
27422: LD_VAR 0 35
27426: PUSH
27427: LD_VAR 0 36
27431: PUSH
27432: LD_VAR 0 37
27436: PUSH
27437: LD_VAR 0 38
27441: PUSH
27442: LD_VAR 0 39
27446: PUSH
27447: LD_VAR 0 40
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: PUSH
27460: LD_VAR 0 4
27464: PUSH
27465: LD_INT 1
27467: PLUS
27468: ARRAY
27469: ST_TO_ADDR
27470: GO 27837
27472: LD_INT 6
27474: DOUBLE
27475: EQUAL
27476: IFTRUE 27528
27478: LD_INT 7
27480: DOUBLE
27481: EQUAL
27482: IFTRUE 27528
27484: LD_INT 8
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27528
27490: LD_INT 13
27492: DOUBLE
27493: EQUAL
27494: IFTRUE 27528
27496: LD_INT 12
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27528
27502: LD_INT 15
27504: DOUBLE
27505: EQUAL
27506: IFTRUE 27528
27508: LD_INT 11
27510: DOUBLE
27511: EQUAL
27512: IFTRUE 27528
27514: LD_INT 14
27516: DOUBLE
27517: EQUAL
27518: IFTRUE 27528
27520: LD_INT 10
27522: DOUBLE
27523: EQUAL
27524: IFTRUE 27528
27526: GO 27584
27528: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27529: LD_ADDR_VAR 0 9
27533: PUSH
27534: LD_VAR 0 41
27538: PUSH
27539: LD_VAR 0 42
27543: PUSH
27544: LD_VAR 0 43
27548: PUSH
27549: LD_VAR 0 44
27553: PUSH
27554: LD_VAR 0 45
27558: PUSH
27559: LD_VAR 0 46
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: PUSH
27572: LD_VAR 0 4
27576: PUSH
27577: LD_INT 1
27579: PLUS
27580: ARRAY
27581: ST_TO_ADDR
27582: GO 27837
27584: LD_INT 36
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27648
27592: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27593: LD_ADDR_VAR 0 9
27597: PUSH
27598: LD_VAR 0 47
27602: PUSH
27603: LD_VAR 0 48
27607: PUSH
27608: LD_VAR 0 49
27612: PUSH
27613: LD_VAR 0 50
27617: PUSH
27618: LD_VAR 0 51
27622: PUSH
27623: LD_VAR 0 52
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: PUSH
27636: LD_VAR 0 4
27640: PUSH
27641: LD_INT 1
27643: PLUS
27644: ARRAY
27645: ST_TO_ADDR
27646: GO 27837
27648: LD_INT 4
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27674
27654: LD_INT 5
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27674
27660: LD_INT 34
27662: DOUBLE
27663: EQUAL
27664: IFTRUE 27674
27666: LD_INT 37
27668: DOUBLE
27669: EQUAL
27670: IFTRUE 27674
27672: GO 27730
27674: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27675: LD_ADDR_VAR 0 9
27679: PUSH
27680: LD_VAR 0 53
27684: PUSH
27685: LD_VAR 0 54
27689: PUSH
27690: LD_VAR 0 55
27694: PUSH
27695: LD_VAR 0 56
27699: PUSH
27700: LD_VAR 0 57
27704: PUSH
27705: LD_VAR 0 58
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: LD_VAR 0 4
27722: PUSH
27723: LD_INT 1
27725: PLUS
27726: ARRAY
27727: ST_TO_ADDR
27728: GO 27837
27730: LD_INT 31
27732: DOUBLE
27733: EQUAL
27734: IFTRUE 27780
27736: LD_INT 32
27738: DOUBLE
27739: EQUAL
27740: IFTRUE 27780
27742: LD_INT 33
27744: DOUBLE
27745: EQUAL
27746: IFTRUE 27780
27748: LD_INT 27
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27780
27754: LD_INT 26
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27780
27760: LD_INT 28
27762: DOUBLE
27763: EQUAL
27764: IFTRUE 27780
27766: LD_INT 29
27768: DOUBLE
27769: EQUAL
27770: IFTRUE 27780
27772: LD_INT 30
27774: DOUBLE
27775: EQUAL
27776: IFTRUE 27780
27778: GO 27836
27780: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27781: LD_ADDR_VAR 0 9
27785: PUSH
27786: LD_VAR 0 59
27790: PUSH
27791: LD_VAR 0 60
27795: PUSH
27796: LD_VAR 0 61
27800: PUSH
27801: LD_VAR 0 62
27805: PUSH
27806: LD_VAR 0 63
27810: PUSH
27811: LD_VAR 0 64
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: LD_INT 1
27831: PLUS
27832: ARRAY
27833: ST_TO_ADDR
27834: GO 27837
27836: POP
// temp_list2 = [ ] ;
27837: LD_ADDR_VAR 0 10
27841: PUSH
27842: EMPTY
27843: ST_TO_ADDR
// for i in temp_list do
27844: LD_ADDR_VAR 0 8
27848: PUSH
27849: LD_VAR 0 9
27853: PUSH
27854: FOR_IN
27855: IFFALSE 27907
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27857: LD_ADDR_VAR 0 10
27861: PUSH
27862: LD_VAR 0 10
27866: PUSH
27867: LD_VAR 0 8
27871: PUSH
27872: LD_INT 1
27874: ARRAY
27875: PUSH
27876: LD_VAR 0 2
27880: PLUS
27881: PUSH
27882: LD_VAR 0 8
27886: PUSH
27887: LD_INT 2
27889: ARRAY
27890: PUSH
27891: LD_VAR 0 3
27895: PLUS
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: ADD
27904: ST_TO_ADDR
27905: GO 27854
27907: POP
27908: POP
// result = temp_list2 ;
27909: LD_ADDR_VAR 0 7
27913: PUSH
27914: LD_VAR 0 10
27918: ST_TO_ADDR
// end ;
27919: LD_VAR 0 7
27923: RET
// export function EnemyInRange ( unit , dist ) ; begin
27924: LD_INT 0
27926: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
27927: LD_ADDR_VAR 0 3
27931: PUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 255
27941: PPUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 250
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 251
27961: PPUSH
27962: LD_VAR 0 2
27966: PPUSH
27967: CALL 3636 0 4
27971: PUSH
27972: LD_INT 4
27974: ARRAY
27975: ST_TO_ADDR
// end ;
27976: LD_VAR 0 3
27980: RET
// export function PlayerSeeMe ( unit ) ; begin
27981: LD_INT 0
27983: PPUSH
// result := See ( your_side , unit ) ;
27984: LD_ADDR_VAR 0 2
27988: PUSH
27989: LD_OWVAR 2
27993: PPUSH
27994: LD_VAR 0 1
27998: PPUSH
27999: CALL_OW 292
28003: ST_TO_ADDR
// end ;
28004: LD_VAR 0 2
28008: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28009: LD_INT 0
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
// if not hexes then
28016: LD_VAR 0 2
28020: NOT
28021: IFFALSE 28025
// exit ;
28023: GO 28173
// dist := 9999 ;
28025: LD_ADDR_VAR 0 5
28029: PUSH
28030: LD_INT 9999
28032: ST_TO_ADDR
// for i = 1 to hexes do
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: DOUBLE
28039: LD_INT 1
28041: DEC
28042: ST_TO_ADDR
28043: LD_VAR 0 2
28047: PUSH
28048: FOR_TO
28049: IFFALSE 28161
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28051: LD_VAR 0 1
28055: PPUSH
28056: LD_VAR 0 2
28060: PUSH
28061: LD_VAR 0 4
28065: ARRAY
28066: PUSH
28067: LD_INT 1
28069: ARRAY
28070: PPUSH
28071: LD_VAR 0 2
28075: PUSH
28076: LD_VAR 0 4
28080: ARRAY
28081: PUSH
28082: LD_INT 2
28084: ARRAY
28085: PPUSH
28086: CALL_OW 297
28090: PUSH
28091: LD_VAR 0 5
28095: LESS
28096: IFFALSE 28159
// begin hex := hexes [ i ] ;
28098: LD_ADDR_VAR 0 7
28102: PUSH
28103: LD_VAR 0 2
28107: PUSH
28108: LD_VAR 0 4
28112: ARRAY
28113: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28114: LD_ADDR_VAR 0 5
28118: PUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: LD_VAR 0 2
28128: PUSH
28129: LD_VAR 0 4
28133: ARRAY
28134: PUSH
28135: LD_INT 1
28137: ARRAY
28138: PPUSH
28139: LD_VAR 0 2
28143: PUSH
28144: LD_VAR 0 4
28148: ARRAY
28149: PUSH
28150: LD_INT 2
28152: ARRAY
28153: PPUSH
28154: CALL_OW 297
28158: ST_TO_ADDR
// end ; end ;
28159: GO 28048
28161: POP
28162: POP
// result := hex ;
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_VAR 0 7
28172: ST_TO_ADDR
// end ;
28173: LD_VAR 0 3
28177: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28178: LD_INT 0
28180: PPUSH
28181: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28182: LD_VAR 0 1
28186: NOT
28187: PUSH
28188: LD_VAR 0 1
28192: PUSH
28193: LD_INT 21
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 23
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PPUSH
28217: CALL_OW 69
28221: IN
28222: NOT
28223: OR
28224: IFFALSE 28228
// exit ;
28226: GO 28275
// for i = 1 to 3 do
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: DOUBLE
28234: LD_INT 1
28236: DEC
28237: ST_TO_ADDR
28238: LD_INT 3
28240: PUSH
28241: FOR_TO
28242: IFFALSE 28273
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28244: LD_VAR 0 1
28248: PPUSH
28249: CALL_OW 250
28253: PPUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 251
28263: PPUSH
28264: LD_INT 1
28266: PPUSH
28267: CALL_OW 453
28271: GO 28241
28273: POP
28274: POP
// end ;
28275: LD_VAR 0 2
28279: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28280: LD_INT 0
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
28287: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28288: LD_VAR 0 1
28292: NOT
28293: PUSH
28294: LD_VAR 0 2
28298: NOT
28299: OR
28300: PUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 314
28310: OR
28311: IFFALSE 28315
// exit ;
28313: GO 28756
// x := GetX ( enemy_unit ) ;
28315: LD_ADDR_VAR 0 7
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 250
28329: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28330: LD_ADDR_VAR 0 8
28334: PUSH
28335: LD_VAR 0 2
28339: PPUSH
28340: CALL_OW 251
28344: ST_TO_ADDR
// if not x or not y then
28345: LD_VAR 0 7
28349: NOT
28350: PUSH
28351: LD_VAR 0 8
28355: NOT
28356: OR
28357: IFFALSE 28361
// exit ;
28359: GO 28756
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28361: LD_ADDR_VAR 0 6
28365: PUSH
28366: LD_VAR 0 7
28370: PPUSH
28371: LD_INT 0
28373: PPUSH
28374: LD_INT 4
28376: PPUSH
28377: CALL_OW 272
28381: PUSH
28382: LD_VAR 0 8
28386: PPUSH
28387: LD_INT 0
28389: PPUSH
28390: LD_INT 4
28392: PPUSH
28393: CALL_OW 273
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_VAR 0 7
28406: PPUSH
28407: LD_INT 1
28409: PPUSH
28410: LD_INT 4
28412: PPUSH
28413: CALL_OW 272
28417: PUSH
28418: LD_VAR 0 8
28422: PPUSH
28423: LD_INT 1
28425: PPUSH
28426: LD_INT 4
28428: PPUSH
28429: CALL_OW 273
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_VAR 0 7
28442: PPUSH
28443: LD_INT 2
28445: PPUSH
28446: LD_INT 4
28448: PPUSH
28449: CALL_OW 272
28453: PUSH
28454: LD_VAR 0 8
28458: PPUSH
28459: LD_INT 2
28461: PPUSH
28462: LD_INT 4
28464: PPUSH
28465: CALL_OW 273
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_VAR 0 7
28478: PPUSH
28479: LD_INT 3
28481: PPUSH
28482: LD_INT 4
28484: PPUSH
28485: CALL_OW 272
28489: PUSH
28490: LD_VAR 0 8
28494: PPUSH
28495: LD_INT 3
28497: PPUSH
28498: LD_INT 4
28500: PPUSH
28501: CALL_OW 273
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_VAR 0 7
28514: PPUSH
28515: LD_INT 4
28517: PPUSH
28518: LD_INT 4
28520: PPUSH
28521: CALL_OW 272
28525: PUSH
28526: LD_VAR 0 8
28530: PPUSH
28531: LD_INT 4
28533: PPUSH
28534: LD_INT 4
28536: PPUSH
28537: CALL_OW 273
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_VAR 0 7
28550: PPUSH
28551: LD_INT 5
28553: PPUSH
28554: LD_INT 4
28556: PPUSH
28557: CALL_OW 272
28561: PUSH
28562: LD_VAR 0 8
28566: PPUSH
28567: LD_INT 5
28569: PPUSH
28570: LD_INT 4
28572: PPUSH
28573: CALL_OW 273
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
// for i = tmp downto 1 do
28590: LD_ADDR_VAR 0 4
28594: PUSH
28595: DOUBLE
28596: LD_VAR 0 6
28600: INC
28601: ST_TO_ADDR
28602: LD_INT 1
28604: PUSH
28605: FOR_DOWNTO
28606: IFFALSE 28707
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28608: LD_VAR 0 6
28612: PUSH
28613: LD_VAR 0 4
28617: ARRAY
28618: PUSH
28619: LD_INT 1
28621: ARRAY
28622: PPUSH
28623: LD_VAR 0 6
28627: PUSH
28628: LD_VAR 0 4
28632: ARRAY
28633: PUSH
28634: LD_INT 2
28636: ARRAY
28637: PPUSH
28638: CALL_OW 488
28642: NOT
28643: PUSH
28644: LD_VAR 0 6
28648: PUSH
28649: LD_VAR 0 4
28653: ARRAY
28654: PUSH
28655: LD_INT 1
28657: ARRAY
28658: PPUSH
28659: LD_VAR 0 6
28663: PUSH
28664: LD_VAR 0 4
28668: ARRAY
28669: PUSH
28670: LD_INT 2
28672: ARRAY
28673: PPUSH
28674: CALL_OW 428
28678: PUSH
28679: LD_INT 0
28681: NONEQUAL
28682: OR
28683: IFFALSE 28705
// tmp := Delete ( tmp , i ) ;
28685: LD_ADDR_VAR 0 6
28689: PUSH
28690: LD_VAR 0 6
28694: PPUSH
28695: LD_VAR 0 4
28699: PPUSH
28700: CALL_OW 3
28704: ST_TO_ADDR
28705: GO 28605
28707: POP
28708: POP
// j := GetClosestHex ( unit , tmp ) ;
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: LD_VAR 0 1
28718: PPUSH
28719: LD_VAR 0 6
28723: PPUSH
28724: CALL 28009 0 2
28728: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28729: LD_VAR 0 1
28733: PPUSH
28734: LD_VAR 0 5
28738: PUSH
28739: LD_INT 1
28741: ARRAY
28742: PPUSH
28743: LD_VAR 0 5
28747: PUSH
28748: LD_INT 2
28750: ARRAY
28751: PPUSH
28752: CALL_OW 111
// end ;
28756: LD_VAR 0 3
28760: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28761: LD_INT 0
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
// uc_side = 0 ;
28767: LD_ADDR_OWVAR 20
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// uc_nation = 0 ;
28775: LD_ADDR_OWVAR 21
28779: PUSH
28780: LD_INT 0
28782: ST_TO_ADDR
// nat_area := natureArea ;
28783: LD_ADDR_VAR 0 4
28787: PUSH
28788: LD_INT 18
28790: ST_TO_ADDR
// InitHc ;
28791: CALL_OW 19
// for i = 1 to 4 do
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: DOUBLE
28801: LD_INT 1
28803: DEC
28804: ST_TO_ADDR
28805: LD_INT 4
28807: PUSH
28808: FOR_TO
28809: IFFALSE 28856
// begin hc_class = 18 ;
28811: LD_ADDR_OWVAR 28
28815: PUSH
28816: LD_INT 18
28818: ST_TO_ADDR
// hc_gallery =  ;
28819: LD_ADDR_OWVAR 33
28823: PUSH
28824: LD_STRING 
28826: ST_TO_ADDR
// animal := CreateHuman ;
28827: LD_ADDR_VAR 0 3
28831: PUSH
28832: CALL_OW 44
28836: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28837: LD_VAR 0 3
28841: PPUSH
28842: LD_VAR 0 4
28846: PPUSH
28847: LD_INT 0
28849: PPUSH
28850: CALL_OW 49
// end ;
28854: GO 28808
28856: POP
28857: POP
// for i = 1 to 3 do
28858: LD_ADDR_VAR 0 2
28862: PUSH
28863: DOUBLE
28864: LD_INT 1
28866: DEC
28867: ST_TO_ADDR
28868: LD_INT 3
28870: PUSH
28871: FOR_TO
28872: IFFALSE 28936
// begin hc_class = class_tiger ;
28874: LD_ADDR_OWVAR 28
28878: PUSH
28879: LD_INT 14
28881: ST_TO_ADDR
// hc_gallery =  ;
28882: LD_ADDR_OWVAR 33
28886: PUSH
28887: LD_STRING 
28889: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
28890: LD_ADDR_OWVAR 35
28894: PUSH
28895: LD_INT 5
28897: NEG
28898: PPUSH
28899: LD_INT 5
28901: PPUSH
28902: CALL_OW 12
28906: ST_TO_ADDR
// animal := CreateHuman ;
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: CALL_OW 44
28916: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28917: LD_VAR 0 3
28921: PPUSH
28922: LD_VAR 0 4
28926: PPUSH
28927: LD_INT 0
28929: PPUSH
28930: CALL_OW 49
// end ;
28934: GO 28871
28936: POP
28937: POP
// for i = 1 to 5 do
28938: LD_ADDR_VAR 0 2
28942: PUSH
28943: DOUBLE
28944: LD_INT 1
28946: DEC
28947: ST_TO_ADDR
28948: LD_INT 5
28950: PUSH
28951: FOR_TO
28952: IFFALSE 29055
// begin hc_class = class_apeman ;
28954: LD_ADDR_OWVAR 28
28958: PUSH
28959: LD_INT 12
28961: ST_TO_ADDR
// hc_gallery =  ;
28962: LD_ADDR_OWVAR 33
28966: PUSH
28967: LD_STRING 
28969: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
28970: LD_ADDR_OWVAR 35
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PPUSH
28979: LD_INT 2
28981: PPUSH
28982: CALL_OW 12
28986: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
28987: LD_ADDR_OWVAR 31
28991: PUSH
28992: LD_INT 1
28994: PPUSH
28995: LD_INT 3
28997: PPUSH
28998: CALL_OW 12
29002: PUSH
29003: LD_INT 1
29005: PPUSH
29006: LD_INT 3
29008: PPUSH
29009: CALL_OW 12
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// animal := CreateHuman ;
29026: LD_ADDR_VAR 0 3
29030: PUSH
29031: CALL_OW 44
29035: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29036: LD_VAR 0 3
29040: PPUSH
29041: LD_VAR 0 4
29045: PPUSH
29046: LD_INT 0
29048: PPUSH
29049: CALL_OW 49
// end ;
29053: GO 28951
29055: POP
29056: POP
// for i = 1 to 3 do
29057: LD_ADDR_VAR 0 2
29061: PUSH
29062: DOUBLE
29063: LD_INT 1
29065: DEC
29066: ST_TO_ADDR
29067: LD_INT 3
29069: PUSH
29070: FOR_TO
29071: IFFALSE 29118
// begin hc_class = 13 ;
29073: LD_ADDR_OWVAR 28
29077: PUSH
29078: LD_INT 13
29080: ST_TO_ADDR
// hc_gallery =  ;
29081: LD_ADDR_OWVAR 33
29085: PUSH
29086: LD_STRING 
29088: ST_TO_ADDR
// animal := CreateHuman ;
29089: LD_ADDR_VAR 0 3
29093: PUSH
29094: CALL_OW 44
29098: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29099: LD_VAR 0 3
29103: PPUSH
29104: LD_VAR 0 4
29108: PPUSH
29109: LD_INT 0
29111: PPUSH
29112: CALL_OW 49
// end ;
29116: GO 29070
29118: POP
29119: POP
// for i = 1 to 7 do
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: DOUBLE
29126: LD_INT 1
29128: DEC
29129: ST_TO_ADDR
29130: LD_INT 7
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29179
// begin hc_class = 20 ;
29136: LD_ADDR_OWVAR 28
29140: PUSH
29141: LD_INT 20
29143: ST_TO_ADDR
// hc_gallery =  ;
29144: LD_ADDR_OWVAR 33
29148: PUSH
29149: LD_STRING 
29151: ST_TO_ADDR
// animal := CreateHuman ;
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: CALL_OW 44
29161: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29162: LD_VAR 0 3
29166: PPUSH
29167: LD_INT 19
29169: PPUSH
29170: LD_INT 0
29172: PPUSH
29173: CALL_OW 49
// end ;
29177: GO 29133
29179: POP
29180: POP
// end ;
29181: LD_VAR 0 1
29185: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29186: LD_INT 0
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
29199: PPUSH
29200: PPUSH
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
29212: PPUSH
29213: PPUSH
// if not list then
29214: LD_VAR 0 1
29218: NOT
29219: IFFALSE 29223
// exit ;
29221: GO 32264
// base := list [ 1 ] ;
29223: LD_ADDR_VAR 0 3
29227: PUSH
29228: LD_VAR 0 1
29232: PUSH
29233: LD_INT 1
29235: ARRAY
29236: ST_TO_ADDR
// group := list [ 2 ] ;
29237: LD_ADDR_VAR 0 4
29241: PUSH
29242: LD_VAR 0 1
29246: PUSH
29247: LD_INT 2
29249: ARRAY
29250: ST_TO_ADDR
// path := list [ 3 ] ;
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_VAR 0 1
29260: PUSH
29261: LD_INT 3
29263: ARRAY
29264: ST_TO_ADDR
// flags := list [ 4 ] ;
29265: LD_ADDR_VAR 0 6
29269: PUSH
29270: LD_VAR 0 1
29274: PUSH
29275: LD_INT 4
29277: ARRAY
29278: ST_TO_ADDR
// mined := [ ] ;
29279: LD_ADDR_VAR 0 25
29283: PUSH
29284: EMPTY
29285: ST_TO_ADDR
// bombed := [ ] ;
29286: LD_ADDR_VAR 0 26
29290: PUSH
29291: EMPTY
29292: ST_TO_ADDR
// if not group or not path then
29293: LD_VAR 0 4
29297: NOT
29298: PUSH
29299: LD_VAR 0 5
29303: NOT
29304: OR
29305: IFFALSE 29309
// exit ;
29307: GO 32264
// if flags then
29309: LD_VAR 0 6
29313: IFFALSE 29457
// begin f_ignore_area := flags [ 1 ] ;
29315: LD_ADDR_VAR 0 15
29319: PUSH
29320: LD_VAR 0 6
29324: PUSH
29325: LD_INT 1
29327: ARRAY
29328: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29329: LD_ADDR_VAR 0 16
29333: PUSH
29334: LD_VAR 0 6
29338: PUSH
29339: LD_INT 2
29341: ARRAY
29342: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29343: LD_ADDR_VAR 0 17
29347: PUSH
29348: LD_VAR 0 6
29352: PUSH
29353: LD_INT 3
29355: ARRAY
29356: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29357: LD_ADDR_VAR 0 18
29361: PUSH
29362: LD_VAR 0 6
29366: PUSH
29367: LD_INT 4
29369: ARRAY
29370: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29371: LD_ADDR_VAR 0 19
29375: PUSH
29376: LD_VAR 0 6
29380: PUSH
29381: LD_INT 5
29383: ARRAY
29384: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29385: LD_ADDR_VAR 0 20
29389: PUSH
29390: LD_VAR 0 6
29394: PUSH
29395: LD_INT 6
29397: ARRAY
29398: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29399: LD_ADDR_VAR 0 21
29403: PUSH
29404: LD_VAR 0 6
29408: PUSH
29409: LD_INT 7
29411: ARRAY
29412: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29413: LD_ADDR_VAR 0 22
29417: PUSH
29418: LD_VAR 0 6
29422: PUSH
29423: LD_INT 8
29425: ARRAY
29426: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29427: LD_ADDR_VAR 0 23
29431: PUSH
29432: LD_VAR 0 6
29436: PUSH
29437: LD_INT 9
29439: ARRAY
29440: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29441: LD_ADDR_VAR 0 24
29445: PUSH
29446: LD_VAR 0 6
29450: PUSH
29451: LD_INT 10
29453: ARRAY
29454: ST_TO_ADDR
// end else
29455: GO 29537
// begin f_ignore_area := false ;
29457: LD_ADDR_VAR 0 15
29461: PUSH
29462: LD_INT 0
29464: ST_TO_ADDR
// f_capture := false ;
29465: LD_ADDR_VAR 0 16
29469: PUSH
29470: LD_INT 0
29472: ST_TO_ADDR
// f_ignore_civ := false ;
29473: LD_ADDR_VAR 0 17
29477: PUSH
29478: LD_INT 0
29480: ST_TO_ADDR
// f_murder := false ;
29481: LD_ADDR_VAR 0 18
29485: PUSH
29486: LD_INT 0
29488: ST_TO_ADDR
// f_mines := false ;
29489: LD_ADDR_VAR 0 19
29493: PUSH
29494: LD_INT 0
29496: ST_TO_ADDR
// f_repair := false ;
29497: LD_ADDR_VAR 0 20
29501: PUSH
29502: LD_INT 0
29504: ST_TO_ADDR
// f_heal := false ;
29505: LD_ADDR_VAR 0 21
29509: PUSH
29510: LD_INT 0
29512: ST_TO_ADDR
// f_spacetime := false ;
29513: LD_ADDR_VAR 0 22
29517: PUSH
29518: LD_INT 0
29520: ST_TO_ADDR
// f_attack_depot := false ;
29521: LD_ADDR_VAR 0 23
29525: PUSH
29526: LD_INT 0
29528: ST_TO_ADDR
// f_crawl := false ;
29529: LD_ADDR_VAR 0 24
29533: PUSH
29534: LD_INT 0
29536: ST_TO_ADDR
// end ; units_path := [ ] ;
29537: LD_ADDR_VAR 0 14
29541: PUSH
29542: EMPTY
29543: ST_TO_ADDR
// for i = 1 to group do
29544: LD_ADDR_VAR 0 7
29548: PUSH
29549: DOUBLE
29550: LD_INT 1
29552: DEC
29553: ST_TO_ADDR
29554: LD_VAR 0 4
29558: PUSH
29559: FOR_TO
29560: IFFALSE 29589
// begin units_path := Replace ( units_path , i , path ) ;
29562: LD_ADDR_VAR 0 14
29566: PUSH
29567: LD_VAR 0 14
29571: PPUSH
29572: LD_VAR 0 7
29576: PPUSH
29577: LD_VAR 0 5
29581: PPUSH
29582: CALL_OW 1
29586: ST_TO_ADDR
// end ;
29587: GO 29559
29589: POP
29590: POP
// repeat for i = group downto 1 do
29591: LD_ADDR_VAR 0 7
29595: PUSH
29596: DOUBLE
29597: LD_VAR 0 4
29601: INC
29602: ST_TO_ADDR
29603: LD_INT 1
29605: PUSH
29606: FOR_DOWNTO
29607: IFFALSE 32246
// begin tmp := [ ] ;
29609: LD_ADDR_VAR 0 12
29613: PUSH
29614: EMPTY
29615: ST_TO_ADDR
// attacking := false ;
29616: LD_ADDR_VAR 0 27
29620: PUSH
29621: LD_INT 0
29623: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29624: LD_VAR 0 4
29628: PUSH
29629: LD_VAR 0 7
29633: ARRAY
29634: PPUSH
29635: CALL_OW 301
29639: PUSH
29640: LD_VAR 0 4
29644: PUSH
29645: LD_VAR 0 7
29649: ARRAY
29650: NOT
29651: OR
29652: IFFALSE 29696
// begin group := Delete ( group , i ) ;
29654: LD_ADDR_VAR 0 4
29658: PUSH
29659: LD_VAR 0 4
29663: PPUSH
29664: LD_VAR 0 7
29668: PPUSH
29669: CALL_OW 3
29673: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29674: LD_ADDR_VAR 0 14
29678: PUSH
29679: LD_VAR 0 14
29683: PPUSH
29684: LD_VAR 0 7
29688: PPUSH
29689: CALL_OW 3
29693: ST_TO_ADDR
// continue ;
29694: GO 29606
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29696: LD_VAR 0 4
29700: PUSH
29701: LD_VAR 0 7
29705: ARRAY
29706: PPUSH
29707: LD_INT 10
29709: PPUSH
29710: CALL 27924 0 2
29714: NOT
29715: PUSH
29716: LD_VAR 0 14
29720: PUSH
29721: LD_VAR 0 7
29725: ARRAY
29726: PUSH
29727: EMPTY
29728: EQUAL
29729: NOT
29730: AND
29731: IFFALSE 30015
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29733: LD_VAR 0 4
29737: PUSH
29738: LD_VAR 0 7
29742: ARRAY
29743: PPUSH
29744: CALL_OW 262
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: IN
29759: IFFALSE 29818
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29761: LD_VAR 0 4
29765: PUSH
29766: LD_VAR 0 7
29770: ARRAY
29771: PPUSH
29772: CALL_OW 261
29776: PUSH
29777: LD_INT 10
29779: LESS
29780: PUSH
29781: LD_VAR 0 4
29785: PUSH
29786: LD_VAR 0 7
29790: ARRAY
29791: PPUSH
29792: CALL 27981 0 1
29796: NOT
29797: AND
29798: IFFALSE 29818
// SetFuel ( group [ i ] , 12 ) ;
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 7
29809: ARRAY
29810: PPUSH
29811: LD_INT 12
29813: PPUSH
29814: CALL_OW 240
// if units_path [ i ] then
29818: LD_VAR 0 14
29822: PUSH
29823: LD_VAR 0 7
29827: ARRAY
29828: IFFALSE 30013
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29830: LD_VAR 0 4
29834: PUSH
29835: LD_VAR 0 7
29839: ARRAY
29840: PPUSH
29841: LD_VAR 0 14
29845: PUSH
29846: LD_VAR 0 7
29850: ARRAY
29851: PUSH
29852: LD_INT 1
29854: ARRAY
29855: PUSH
29856: LD_INT 1
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 14
29864: PUSH
29865: LD_VAR 0 7
29869: ARRAY
29870: PUSH
29871: LD_INT 1
29873: ARRAY
29874: PUSH
29875: LD_INT 2
29877: ARRAY
29878: PPUSH
29879: CALL_OW 297
29883: PUSH
29884: LD_INT 6
29886: GREATER
29887: IFFALSE 29962
// begin if not HasTask ( group [ i ] ) then
29889: LD_VAR 0 4
29893: PUSH
29894: LD_VAR 0 7
29898: ARRAY
29899: PPUSH
29900: CALL_OW 314
29904: NOT
29905: IFFALSE 29960
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
29907: LD_VAR 0 4
29911: PUSH
29912: LD_VAR 0 7
29916: ARRAY
29917: PPUSH
29918: LD_VAR 0 14
29922: PUSH
29923: LD_VAR 0 7
29927: ARRAY
29928: PUSH
29929: LD_INT 1
29931: ARRAY
29932: PUSH
29933: LD_INT 1
29935: ARRAY
29936: PPUSH
29937: LD_VAR 0 14
29941: PUSH
29942: LD_VAR 0 7
29946: ARRAY
29947: PUSH
29948: LD_INT 1
29950: ARRAY
29951: PUSH
29952: LD_INT 2
29954: ARRAY
29955: PPUSH
29956: CALL_OW 114
// end else
29960: GO 30013
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
29962: LD_ADDR_VAR 0 13
29966: PUSH
29967: LD_VAR 0 14
29971: PUSH
29972: LD_VAR 0 7
29976: ARRAY
29977: PPUSH
29978: LD_INT 1
29980: PPUSH
29981: CALL_OW 3
29985: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
29986: LD_ADDR_VAR 0 14
29990: PUSH
29991: LD_VAR 0 14
29995: PPUSH
29996: LD_VAR 0 7
30000: PPUSH
30001: LD_VAR 0 13
30005: PPUSH
30006: CALL_OW 1
30010: ST_TO_ADDR
// continue ;
30011: GO 29606
// end ; end ; end else
30013: GO 32244
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30015: LD_ADDR_VAR 0 12
30019: PUSH
30020: LD_INT 81
30022: PUSH
30023: LD_VAR 0 4
30027: PUSH
30028: LD_VAR 0 7
30032: ARRAY
30033: PPUSH
30034: CALL_OW 255
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: ST_TO_ADDR
// if not tmp then
30048: LD_VAR 0 12
30052: NOT
30053: IFFALSE 30057
// continue ;
30055: GO 29606
// if f_ignore_area then
30057: LD_VAR 0 15
30061: IFFALSE 30149
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30063: LD_ADDR_VAR 0 13
30067: PUSH
30068: LD_VAR 0 12
30072: PPUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 92
30078: PUSH
30079: LD_VAR 0 15
30083: PUSH
30084: LD_INT 1
30086: ARRAY
30087: PUSH
30088: LD_VAR 0 15
30092: PUSH
30093: LD_INT 2
30095: ARRAY
30096: PUSH
30097: LD_VAR 0 15
30101: PUSH
30102: LD_INT 3
30104: ARRAY
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PPUSH
30116: CALL_OW 72
30120: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30121: LD_VAR 0 12
30125: PUSH
30126: LD_VAR 0 13
30130: DIFF
30131: IFFALSE 30149
// tmp := tmp diff tmp2 ;
30133: LD_ADDR_VAR 0 12
30137: PUSH
30138: LD_VAR 0 12
30142: PUSH
30143: LD_VAR 0 13
30147: DIFF
30148: ST_TO_ADDR
// end ; if not f_murder then
30149: LD_VAR 0 18
30153: NOT
30154: IFFALSE 30212
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30156: LD_ADDR_VAR 0 13
30160: PUSH
30161: LD_VAR 0 12
30165: PPUSH
30166: LD_INT 3
30168: PUSH
30169: LD_INT 50
30171: PUSH
30172: EMPTY
30173: LIST
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 72
30183: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30184: LD_VAR 0 12
30188: PUSH
30189: LD_VAR 0 13
30193: DIFF
30194: IFFALSE 30212
// tmp := tmp diff tmp2 ;
30196: LD_ADDR_VAR 0 12
30200: PUSH
30201: LD_VAR 0 12
30205: PUSH
30206: LD_VAR 0 13
30210: DIFF
30211: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30212: LD_ADDR_VAR 0 12
30216: PUSH
30217: LD_VAR 0 4
30221: PUSH
30222: LD_VAR 0 7
30226: ARRAY
30227: PPUSH
30228: LD_VAR 0 12
30232: PPUSH
30233: LD_INT 1
30235: PPUSH
30236: LD_INT 1
30238: PPUSH
30239: CALL 3175 0 4
30243: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30244: LD_VAR 0 4
30248: PUSH
30249: LD_VAR 0 7
30253: ARRAY
30254: PPUSH
30255: CALL_OW 257
30259: PUSH
30260: LD_INT 1
30262: EQUAL
30263: IFFALSE 30598
// begin if WantPlant ( group [ i ] ) then
30265: LD_VAR 0 4
30269: PUSH
30270: LD_VAR 0 7
30274: ARRAY
30275: PPUSH
30276: CALL 2643 0 1
30280: IFFALSE 30284
// continue ;
30282: GO 29606
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30284: LD_VAR 0 16
30288: PUSH
30289: LD_VAR 0 4
30293: PUSH
30294: LD_VAR 0 7
30298: ARRAY
30299: PPUSH
30300: CALL_OW 310
30304: NOT
30305: AND
30306: PUSH
30307: LD_VAR 0 12
30311: PUSH
30312: LD_INT 1
30314: ARRAY
30315: PUSH
30316: LD_VAR 0 12
30320: PPUSH
30321: LD_INT 21
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 58
30333: PUSH
30334: EMPTY
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 72
30345: IN
30346: AND
30347: IFFALSE 30383
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30349: LD_VAR 0 4
30353: PUSH
30354: LD_VAR 0 7
30358: ARRAY
30359: PPUSH
30360: LD_VAR 0 12
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PPUSH
30369: CALL_OW 120
// attacking := true ;
30373: LD_ADDR_VAR 0 27
30377: PUSH
30378: LD_INT 1
30380: ST_TO_ADDR
// continue ;
30381: GO 29606
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30383: LD_VAR 0 24
30387: PUSH
30388: LD_VAR 0 4
30392: PUSH
30393: LD_VAR 0 7
30397: ARRAY
30398: PPUSH
30399: CALL_OW 256
30403: PUSH
30404: LD_INT 800
30406: LESS
30407: AND
30408: PUSH
30409: LD_VAR 0 4
30413: PUSH
30414: LD_VAR 0 7
30418: ARRAY
30419: PPUSH
30420: CALL_OW 318
30424: NOT
30425: AND
30426: IFFALSE 30443
// ComCrawl ( group [ i ] ) ;
30428: LD_VAR 0 4
30432: PUSH
30433: LD_VAR 0 7
30437: ARRAY
30438: PPUSH
30439: CALL_OW 137
// if f_mines then
30443: LD_VAR 0 19
30447: IFFALSE 30598
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30449: LD_VAR 0 12
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: CALL_OW 247
30462: PUSH
30463: LD_INT 3
30465: EQUAL
30466: PUSH
30467: LD_VAR 0 12
30471: PUSH
30472: LD_INT 1
30474: ARRAY
30475: PUSH
30476: LD_VAR 0 25
30480: IN
30481: NOT
30482: AND
30483: IFFALSE 30598
// begin ComPlaceDelayedCharge ( group [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , tmp [ 1 ] ) ;
30485: LD_VAR 0 4
30489: PUSH
30490: LD_VAR 0 7
30494: ARRAY
30495: PPUSH
30496: LD_VAR 0 12
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: PPUSH
30505: CALL_OW 250
30509: PPUSH
30510: LD_VAR 0 12
30514: PUSH
30515: LD_INT 1
30517: ARRAY
30518: PPUSH
30519: CALL_OW 251
30523: PPUSH
30524: LD_VAR 0 12
30528: PUSH
30529: LD_INT 1
30531: ARRAY
30532: PPUSH
30533: CALL_OW 132
// AddComWait ( group [ i ] , 0 0$2 ) ;
30537: LD_VAR 0 4
30541: PUSH
30542: LD_VAR 0 7
30546: ARRAY
30547: PPUSH
30548: LD_INT 70
30550: PPUSH
30551: CALL_OW 202
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30555: LD_ADDR_VAR 0 25
30559: PUSH
30560: LD_VAR 0 25
30564: PPUSH
30565: LD_VAR 0 25
30569: PUSH
30570: LD_INT 1
30572: PLUS
30573: PPUSH
30574: LD_VAR 0 12
30578: PUSH
30579: LD_INT 1
30581: ARRAY
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
// attacking := true ;
30588: LD_ADDR_VAR 0 27
30592: PUSH
30593: LD_INT 1
30595: ST_TO_ADDR
// continue ;
30596: GO 29606
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30598: LD_VAR 0 4
30602: PUSH
30603: LD_VAR 0 7
30607: ARRAY
30608: PPUSH
30609: CALL_OW 257
30613: PUSH
30614: LD_INT 17
30616: EQUAL
30617: IFFALSE 30745
// begin attacking := false ;
30619: LD_ADDR_VAR 0 27
30623: PUSH
30624: LD_INT 0
30626: ST_TO_ADDR
// k := 5 ;
30627: LD_ADDR_VAR 0 9
30631: PUSH
30632: LD_INT 5
30634: ST_TO_ADDR
// if tmp < k then
30635: LD_VAR 0 12
30639: PUSH
30640: LD_VAR 0 9
30644: LESS
30645: IFFALSE 30657
// k := tmp ;
30647: LD_ADDR_VAR 0 9
30651: PUSH
30652: LD_VAR 0 12
30656: ST_TO_ADDR
// for j = 1 to k do
30657: LD_ADDR_VAR 0 8
30661: PUSH
30662: DOUBLE
30663: LD_INT 1
30665: DEC
30666: ST_TO_ADDR
30667: LD_VAR 0 9
30671: PUSH
30672: FOR_TO
30673: IFFALSE 30743
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30675: LD_VAR 0 12
30679: PUSH
30680: LD_VAR 0 8
30684: ARRAY
30685: PUSH
30686: LD_VAR 0 12
30690: PPUSH
30691: LD_INT 58
30693: PUSH
30694: EMPTY
30695: LIST
30696: PPUSH
30697: CALL_OW 72
30701: IN
30702: NOT
30703: IFFALSE 30741
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30705: LD_VAR 0 4
30709: PUSH
30710: LD_VAR 0 7
30714: ARRAY
30715: PPUSH
30716: LD_VAR 0 12
30720: PUSH
30721: LD_VAR 0 8
30725: ARRAY
30726: PPUSH
30727: CALL_OW 115
// attacking := true ;
30731: LD_ADDR_VAR 0 27
30735: PUSH
30736: LD_INT 1
30738: ST_TO_ADDR
// continue ;
30739: GO 30672
// end ; end ;
30741: GO 30672
30743: POP
30744: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
30745: LD_VAR 0 4
30749: PUSH
30750: LD_VAR 0 7
30754: ARRAY
30755: PPUSH
30756: CALL_OW 257
30760: PUSH
30761: LD_INT 8
30763: EQUAL
30764: PUSH
30765: LD_VAR 0 4
30769: PUSH
30770: LD_VAR 0 7
30774: ARRAY
30775: PPUSH
30776: CALL_OW 264
30780: PUSH
30781: LD_INT 28
30783: PUSH
30784: LD_INT 45
30786: PUSH
30787: LD_INT 7
30789: PUSH
30790: LD_INT 47
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: IN
30799: OR
30800: IFFALSE 31030
// begin attacking := false ;
30802: LD_ADDR_VAR 0 27
30806: PUSH
30807: LD_INT 0
30809: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
30810: LD_VAR 0 12
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: PPUSH
30819: CALL_OW 266
30823: PUSH
30824: LD_INT 32
30826: PUSH
30827: LD_INT 31
30829: PUSH
30830: LD_INT 33
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: LD_INT 5
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: IN
30846: IFFALSE 31030
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: LD_VAR 0 12
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: PPUSH
30862: CALL_OW 266
30866: PPUSH
30867: LD_VAR 0 12
30871: PUSH
30872: LD_INT 1
30874: ARRAY
30875: PPUSH
30876: CALL_OW 250
30880: PPUSH
30881: LD_VAR 0 12
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: PPUSH
30890: CALL_OW 251
30894: PPUSH
30895: LD_VAR 0 12
30899: PUSH
30900: LD_INT 1
30902: ARRAY
30903: PPUSH
30904: CALL_OW 254
30908: PPUSH
30909: LD_VAR 0 12
30913: PUSH
30914: LD_INT 1
30916: ARRAY
30917: PPUSH
30918: CALL_OW 248
30922: PPUSH
30923: LD_INT 0
30925: PPUSH
30926: CALL 9385 0 6
30930: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
30931: LD_ADDR_VAR 0 8
30935: PUSH
30936: LD_VAR 0 4
30940: PUSH
30941: LD_VAR 0 7
30945: ARRAY
30946: PPUSH
30947: LD_VAR 0 9
30951: PPUSH
30952: CALL 28009 0 2
30956: ST_TO_ADDR
// if j then
30957: LD_VAR 0 8
30961: IFFALSE 31030
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30963: LD_VAR 0 8
30967: PUSH
30968: LD_INT 1
30970: ARRAY
30971: PPUSH
30972: LD_VAR 0 8
30976: PUSH
30977: LD_INT 2
30979: ARRAY
30980: PPUSH
30981: CALL_OW 488
30985: IFFALSE 31030
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
30987: LD_VAR 0 4
30991: PUSH
30992: LD_VAR 0 7
30996: ARRAY
30997: PPUSH
30998: LD_VAR 0 8
31002: PUSH
31003: LD_INT 1
31005: ARRAY
31006: PPUSH
31007: LD_VAR 0 8
31011: PUSH
31012: LD_INT 2
31014: ARRAY
31015: PPUSH
31016: CALL_OW 116
// attacking := true ;
31020: LD_ADDR_VAR 0 27
31024: PUSH
31025: LD_INT 1
31027: ST_TO_ADDR
// continue ;
31028: GO 29606
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31030: LD_VAR 0 4
31034: PUSH
31035: LD_VAR 0 7
31039: ARRAY
31040: PPUSH
31041: CALL_OW 265
31045: PUSH
31046: LD_INT 11
31048: EQUAL
31049: IFFALSE 31327
// begin k := 10 ;
31051: LD_ADDR_VAR 0 9
31055: PUSH
31056: LD_INT 10
31058: ST_TO_ADDR
// x := 0 ;
31059: LD_ADDR_VAR 0 10
31063: PUSH
31064: LD_INT 0
31066: ST_TO_ADDR
// if tmp < k then
31067: LD_VAR 0 12
31071: PUSH
31072: LD_VAR 0 9
31076: LESS
31077: IFFALSE 31089
// k := tmp ;
31079: LD_ADDR_VAR 0 9
31083: PUSH
31084: LD_VAR 0 12
31088: ST_TO_ADDR
// for j = k downto 1 do
31089: LD_ADDR_VAR 0 8
31093: PUSH
31094: DOUBLE
31095: LD_VAR 0 9
31099: INC
31100: ST_TO_ADDR
31101: LD_INT 1
31103: PUSH
31104: FOR_DOWNTO
31105: IFFALSE 31180
// begin if GetType ( tmp [ j ] ) = unit_human then
31107: LD_VAR 0 12
31111: PUSH
31112: LD_VAR 0 8
31116: ARRAY
31117: PPUSH
31118: CALL_OW 247
31122: PUSH
31123: LD_INT 1
31125: EQUAL
31126: IFFALSE 31178
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31128: LD_VAR 0 4
31132: PUSH
31133: LD_VAR 0 7
31137: ARRAY
31138: PPUSH
31139: LD_VAR 0 12
31143: PUSH
31144: LD_VAR 0 8
31148: ARRAY
31149: PPUSH
31150: CALL 28280 0 2
// x := tmp [ j ] ;
31154: LD_ADDR_VAR 0 10
31158: PUSH
31159: LD_VAR 0 12
31163: PUSH
31164: LD_VAR 0 8
31168: ARRAY
31169: ST_TO_ADDR
// attacking := true ;
31170: LD_ADDR_VAR 0 27
31174: PUSH
31175: LD_INT 1
31177: ST_TO_ADDR
// end ; end ;
31178: GO 31104
31180: POP
31181: POP
// if not x then
31182: LD_VAR 0 10
31186: NOT
31187: IFFALSE 31327
// begin attacking := true ;
31189: LD_ADDR_VAR 0 27
31193: PUSH
31194: LD_INT 1
31196: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31197: LD_VAR 0 4
31201: PUSH
31202: LD_VAR 0 7
31206: ARRAY
31207: PPUSH
31208: CALL_OW 250
31212: PPUSH
31213: LD_VAR 0 4
31217: PUSH
31218: LD_VAR 0 7
31222: ARRAY
31223: PPUSH
31224: CALL_OW 251
31228: PPUSH
31229: CALL_OW 546
31233: PUSH
31234: LD_INT 2
31236: ARRAY
31237: PUSH
31238: LD_VAR 0 12
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: PPUSH
31247: CALL_OW 250
31251: PPUSH
31252: LD_VAR 0 12
31256: PUSH
31257: LD_INT 1
31259: ARRAY
31260: PPUSH
31261: CALL_OW 251
31265: PPUSH
31266: CALL_OW 546
31270: PUSH
31271: LD_INT 2
31273: ARRAY
31274: EQUAL
31275: IFFALSE 31303
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31277: LD_VAR 0 4
31281: PUSH
31282: LD_VAR 0 7
31286: ARRAY
31287: PPUSH
31288: LD_VAR 0 12
31292: PUSH
31293: LD_INT 1
31295: ARRAY
31296: PPUSH
31297: CALL 28280 0 2
31301: GO 31327
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31303: LD_VAR 0 4
31307: PUSH
31308: LD_VAR 0 7
31312: ARRAY
31313: PPUSH
31314: LD_VAR 0 12
31318: PUSH
31319: LD_INT 1
31321: ARRAY
31322: PPUSH
31323: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31327: LD_VAR 0 4
31331: PUSH
31332: LD_VAR 0 7
31336: ARRAY
31337: PPUSH
31338: CALL_OW 264
31342: PUSH
31343: LD_INT 29
31345: EQUAL
31346: IFFALSE 31712
// begin if WantsToAttack ( group [ i ] ) in bombed then
31348: LD_VAR 0 4
31352: PUSH
31353: LD_VAR 0 7
31357: ARRAY
31358: PPUSH
31359: CALL_OW 319
31363: PUSH
31364: LD_VAR 0 26
31368: IN
31369: IFFALSE 31373
// continue ;
31371: GO 29606
// k := 8 ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 8
31380: ST_TO_ADDR
// x := 0 ;
31381: LD_ADDR_VAR 0 10
31385: PUSH
31386: LD_INT 0
31388: ST_TO_ADDR
// if tmp < k then
31389: LD_VAR 0 12
31393: PUSH
31394: LD_VAR 0 9
31398: LESS
31399: IFFALSE 31411
// k := tmp ;
31401: LD_ADDR_VAR 0 9
31405: PUSH
31406: LD_VAR 0 12
31410: ST_TO_ADDR
// for j = 1 to k do
31411: LD_ADDR_VAR 0 8
31415: PUSH
31416: DOUBLE
31417: LD_INT 1
31419: DEC
31420: ST_TO_ADDR
31421: LD_VAR 0 9
31425: PUSH
31426: FOR_TO
31427: IFFALSE 31559
// begin if GetType ( tmp [ j ] ) = unit_building then
31429: LD_VAR 0 12
31433: PUSH
31434: LD_VAR 0 8
31438: ARRAY
31439: PPUSH
31440: CALL_OW 247
31444: PUSH
31445: LD_INT 3
31447: EQUAL
31448: IFFALSE 31557
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31450: LD_VAR 0 12
31454: PUSH
31455: LD_VAR 0 8
31459: ARRAY
31460: PUSH
31461: LD_VAR 0 26
31465: IN
31466: NOT
31467: PUSH
31468: LD_VAR 0 12
31472: PUSH
31473: LD_VAR 0 8
31477: ARRAY
31478: PPUSH
31479: CALL_OW 313
31483: AND
31484: IFFALSE 31557
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31486: LD_VAR 0 4
31490: PUSH
31491: LD_VAR 0 7
31495: ARRAY
31496: PPUSH
31497: LD_VAR 0 12
31501: PUSH
31502: LD_VAR 0 8
31506: ARRAY
31507: PPUSH
31508: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31512: LD_ADDR_VAR 0 26
31516: PUSH
31517: LD_VAR 0 26
31521: PPUSH
31522: LD_VAR 0 26
31526: PUSH
31527: LD_INT 1
31529: PLUS
31530: PPUSH
31531: LD_VAR 0 12
31535: PUSH
31536: LD_VAR 0 8
31540: ARRAY
31541: PPUSH
31542: CALL_OW 1
31546: ST_TO_ADDR
// attacking := true ;
31547: LD_ADDR_VAR 0 27
31551: PUSH
31552: LD_INT 1
31554: ST_TO_ADDR
// break ;
31555: GO 31559
// end ; end ;
31557: GO 31426
31559: POP
31560: POP
// if not attacking and f_attack_depot then
31561: LD_VAR 0 27
31565: NOT
31566: PUSH
31567: LD_VAR 0 23
31571: AND
31572: IFFALSE 31667
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31574: LD_ADDR_VAR 0 11
31578: PUSH
31579: LD_VAR 0 12
31583: PPUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 30
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 30
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: PPUSH
31612: CALL_OW 72
31616: ST_TO_ADDR
// if z then
31617: LD_VAR 0 11
31621: IFFALSE 31667
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31623: LD_VAR 0 4
31627: PUSH
31628: LD_VAR 0 7
31632: ARRAY
31633: PPUSH
31634: LD_VAR 0 11
31638: PPUSH
31639: LD_VAR 0 4
31643: PUSH
31644: LD_VAR 0 7
31648: ARRAY
31649: PPUSH
31650: CALL_OW 74
31654: PPUSH
31655: CALL_OW 115
// attacking := true ;
31659: LD_ADDR_VAR 0 27
31663: PUSH
31664: LD_INT 1
31666: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31667: LD_VAR 0 4
31671: PUSH
31672: LD_VAR 0 7
31676: ARRAY
31677: PPUSH
31678: CALL_OW 256
31682: PUSH
31683: LD_INT 500
31685: LESS
31686: IFFALSE 31712
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31688: LD_VAR 0 4
31692: PUSH
31693: LD_VAR 0 7
31697: ARRAY
31698: PPUSH
31699: LD_VAR 0 12
31703: PUSH
31704: LD_INT 1
31706: ARRAY
31707: PPUSH
31708: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31712: LD_VAR 0 4
31716: PUSH
31717: LD_VAR 0 7
31721: ARRAY
31722: PPUSH
31723: CALL_OW 256
31727: PUSH
31728: LD_INT 250
31730: LESS
31731: PUSH
31732: LD_VAR 0 4
31736: PUSH
31737: LD_VAR 0 7
31741: ARRAY
31742: PUSH
31743: LD_INT 21
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 23
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: IN
31772: AND
31773: IFFALSE 31898
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
31775: LD_ADDR_VAR 0 9
31779: PUSH
31780: LD_OWVAR 3
31784: PUSH
31785: LD_VAR 0 4
31789: PUSH
31790: LD_VAR 0 7
31794: ARRAY
31795: DIFF
31796: PPUSH
31797: LD_VAR 0 4
31801: PUSH
31802: LD_VAR 0 7
31806: ARRAY
31807: PPUSH
31808: CALL_OW 74
31812: ST_TO_ADDR
// if not k then
31813: LD_VAR 0 9
31817: NOT
31818: IFFALSE 31822
// continue ;
31820: GO 29606
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
31822: LD_VAR 0 9
31826: PUSH
31827: LD_INT 81
31829: PUSH
31830: LD_VAR 0 4
31834: PUSH
31835: LD_VAR 0 7
31839: ARRAY
31840: PPUSH
31841: CALL_OW 255
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 69
31854: IN
31855: PUSH
31856: LD_VAR 0 9
31860: PPUSH
31861: LD_VAR 0 4
31865: PUSH
31866: LD_VAR 0 7
31870: ARRAY
31871: PPUSH
31872: CALL_OW 296
31876: PUSH
31877: LD_INT 5
31879: LESS
31880: AND
31881: IFFALSE 31898
// ComAutodestruct ( group [ i ] ) ;
31883: LD_VAR 0 4
31887: PUSH
31888: LD_VAR 0 7
31892: ARRAY
31893: PPUSH
31894: CALL 28178 0 1
// end ; if f_attack_depot then
31898: LD_VAR 0 23
31902: IFFALSE 32014
// begin k := 6 ;
31904: LD_ADDR_VAR 0 9
31908: PUSH
31909: LD_INT 6
31911: ST_TO_ADDR
// if tmp < k then
31912: LD_VAR 0 12
31916: PUSH
31917: LD_VAR 0 9
31921: LESS
31922: IFFALSE 31934
// k := tmp ;
31924: LD_ADDR_VAR 0 9
31928: PUSH
31929: LD_VAR 0 12
31933: ST_TO_ADDR
// for j = 1 to k do
31934: LD_ADDR_VAR 0 8
31938: PUSH
31939: DOUBLE
31940: LD_INT 1
31942: DEC
31943: ST_TO_ADDR
31944: LD_VAR 0 9
31948: PUSH
31949: FOR_TO
31950: IFFALSE 32012
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
31952: LD_VAR 0 8
31956: PPUSH
31957: CALL_OW 266
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: IN
31972: IFFALSE 32010
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31974: LD_VAR 0 4
31978: PUSH
31979: LD_VAR 0 7
31983: ARRAY
31984: PPUSH
31985: LD_VAR 0 12
31989: PUSH
31990: LD_VAR 0 8
31994: ARRAY
31995: PPUSH
31996: CALL_OW 115
// attacking := true ;
32000: LD_ADDR_VAR 0 27
32004: PUSH
32005: LD_INT 1
32007: ST_TO_ADDR
// break ;
32008: GO 32012
// end ;
32010: GO 31949
32012: POP
32013: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32014: LD_VAR 0 4
32018: PUSH
32019: LD_VAR 0 7
32023: ARRAY
32024: PPUSH
32025: CALL_OW 302
32029: PUSH
32030: LD_VAR 0 27
32034: NOT
32035: AND
32036: IFFALSE 32244
// begin k := 8 ;
32038: LD_ADDR_VAR 0 9
32042: PUSH
32043: LD_INT 8
32045: ST_TO_ADDR
// x := 0 ;
32046: LD_ADDR_VAR 0 10
32050: PUSH
32051: LD_INT 0
32053: ST_TO_ADDR
// if tmp < k then
32054: LD_VAR 0 12
32058: PUSH
32059: LD_VAR 0 9
32063: LESS
32064: IFFALSE 32076
// k := tmp ;
32066: LD_ADDR_VAR 0 9
32070: PUSH
32071: LD_VAR 0 12
32075: ST_TO_ADDR
// for j = 1 to k do
32076: LD_ADDR_VAR 0 8
32080: PUSH
32081: DOUBLE
32082: LD_INT 1
32084: DEC
32085: ST_TO_ADDR
32086: LD_VAR 0 9
32090: PUSH
32091: FOR_TO
32092: IFFALSE 32190
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32094: LD_VAR 0 12
32098: PUSH
32099: LD_VAR 0 8
32103: ARRAY
32104: PPUSH
32105: CALL_OW 247
32109: PUSH
32110: LD_INT 1
32112: EQUAL
32113: PUSH
32114: LD_VAR 0 12
32118: PUSH
32119: LD_VAR 0 8
32123: ARRAY
32124: PPUSH
32125: CALL_OW 256
32129: PUSH
32130: LD_INT 250
32132: LESS
32133: PUSH
32134: LD_VAR 0 18
32138: AND
32139: PUSH
32140: LD_VAR 0 18
32144: NOT
32145: PUSH
32146: LD_VAR 0 12
32150: PUSH
32151: LD_VAR 0 8
32155: ARRAY
32156: PPUSH
32157: CALL_OW 256
32161: PUSH
32162: LD_INT 250
32164: GREATEREQUAL
32165: AND
32166: OR
32167: AND
32168: IFFALSE 32188
// begin x := tmp [ j ] ;
32170: LD_ADDR_VAR 0 10
32174: PUSH
32175: LD_VAR 0 12
32179: PUSH
32180: LD_VAR 0 8
32184: ARRAY
32185: ST_TO_ADDR
// break ;
32186: GO 32190
// end ;
32188: GO 32091
32190: POP
32191: POP
// if x then
32192: LD_VAR 0 10
32196: IFFALSE 32220
// ComAttackUnit ( group [ i ] , x ) else
32198: LD_VAR 0 4
32202: PUSH
32203: LD_VAR 0 7
32207: ARRAY
32208: PPUSH
32209: LD_VAR 0 10
32213: PPUSH
32214: CALL_OW 115
32218: GO 32244
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32220: LD_VAR 0 4
32224: PUSH
32225: LD_VAR 0 7
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 12
32235: PUSH
32236: LD_INT 1
32238: ARRAY
32239: PPUSH
32240: CALL_OW 115
// end ; end ; end ;
32244: GO 29606
32246: POP
32247: POP
// wait ( 0 0$1 ) ;
32248: LD_INT 35
32250: PPUSH
32251: CALL_OW 67
// until group = [ ] ;
32255: LD_VAR 0 4
32259: PUSH
32260: EMPTY
32261: EQUAL
32262: IFFALSE 29591
// end ;
32264: LD_VAR 0 2
32268: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32269: LD_INT 0
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
// if not defenders then
32278: LD_VAR 0 2
32282: NOT
32283: IFFALSE 32287
// exit ;
32285: GO 32811
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32287: LD_ADDR_VAR 0 9
32291: PUSH
32292: LD_EXP 44
32296: PUSH
32297: LD_VAR 0 1
32301: ARRAY
32302: PPUSH
32303: LD_INT 25
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PPUSH
32313: CALL_OW 72
32317: ST_TO_ADDR
// if mechs then
32318: LD_VAR 0 9
32322: IFFALSE 32421
// for i in defenders do
32324: LD_ADDR_VAR 0 5
32328: PUSH
32329: LD_VAR 0 2
32333: PUSH
32334: FOR_IN
32335: IFFALSE 32419
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32337: LD_VAR 0 5
32341: PPUSH
32342: CALL_OW 263
32346: PUSH
32347: LD_INT 1
32349: EQUAL
32350: PUSH
32351: LD_VAR 0 5
32355: PPUSH
32356: CALL_OW 311
32360: NOT
32361: AND
32362: IFFALSE 32417
// begin un := mechs [ 1 ] ;
32364: LD_ADDR_VAR 0 7
32368: PUSH
32369: LD_VAR 0 9
32373: PUSH
32374: LD_INT 1
32376: ARRAY
32377: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32378: LD_VAR 0 7
32382: PPUSH
32383: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32387: LD_VAR 0 7
32391: PPUSH
32392: LD_VAR 0 5
32396: PPUSH
32397: CALL_OW 180
// mechs := mechs diff un ;
32401: LD_ADDR_VAR 0 9
32405: PUSH
32406: LD_VAR 0 9
32410: PUSH
32411: LD_VAR 0 7
32415: DIFF
32416: ST_TO_ADDR
// end ;
32417: GO 32334
32419: POP
32420: POP
// repeat wait ( 0 0$1 ) ;
32421: LD_INT 35
32423: PPUSH
32424: CALL_OW 67
// enemy := mc_scan [ base ] ;
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_EXP 63
32437: PUSH
32438: LD_VAR 0 1
32442: ARRAY
32443: ST_TO_ADDR
// for i in defenders do
32444: LD_ADDR_VAR 0 5
32448: PUSH
32449: LD_VAR 0 2
32453: PUSH
32454: FOR_IN
32455: IFFALSE 32601
// begin e := NearestUnitToUnit ( enemy , i ) ;
32457: LD_ADDR_VAR 0 10
32461: PUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_VAR 0 5
32471: PPUSH
32472: CALL_OW 74
32476: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32477: LD_VAR 0 5
32481: PPUSH
32482: CALL_OW 319
32486: NOT
32487: PUSH
32488: LD_VAR 0 5
32492: PPUSH
32493: CALL_OW 302
32497: AND
32498: PUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: LD_VAR 0 10
32508: PPUSH
32509: CALL_OW 296
32513: PUSH
32514: LD_INT 30
32516: LESS
32517: AND
32518: IFFALSE 32536
// ComAttackUnit ( i , e ) else
32520: LD_VAR 0 5
32524: PPUSH
32525: LD_VAR 0 10
32529: PPUSH
32530: CALL_OW 115
32534: GO 32599
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32536: LD_VAR 0 5
32540: PPUSH
32541: LD_VAR 0 10
32545: PPUSH
32546: CALL_OW 296
32550: PUSH
32551: LD_INT 30
32553: GREATEREQUAL
32554: PUSH
32555: LD_VAR 0 5
32559: PPUSH
32560: LD_EXP 64
32564: PUSH
32565: LD_VAR 0 1
32569: ARRAY
32570: PPUSH
32571: CALL_OW 308
32575: NOT
32576: AND
32577: IFFALSE 32599
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32579: LD_VAR 0 5
32583: PPUSH
32584: LD_EXP 64
32588: PUSH
32589: LD_VAR 0 1
32593: ARRAY
32594: PPUSH
32595: CALL_OW 113
// end ;
32599: GO 32454
32601: POP
32602: POP
// until not enemy or not defenders ;
32603: LD_VAR 0 3
32607: NOT
32608: PUSH
32609: LD_VAR 0 2
32613: NOT
32614: OR
32615: IFFALSE 32421
// if not enemy and defenders then
32617: LD_VAR 0 3
32621: NOT
32622: PUSH
32623: LD_VAR 0 2
32627: AND
32628: IFFALSE 32786
// repeat wait ( 0 0$1 ) ;
32630: LD_INT 35
32632: PPUSH
32633: CALL_OW 67
// for i in defenders do
32637: LD_ADDR_VAR 0 5
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: FOR_IN
32648: IFFALSE 32737
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32650: LD_VAR 0 5
32654: PPUSH
32655: LD_EXP 64
32659: PUSH
32660: LD_VAR 0 1
32664: ARRAY
32665: PPUSH
32666: CALL_OW 308
32670: NOT
32671: IFFALSE 32695
// ComMoveToArea ( i , mc_parking [ base ] ) else
32673: LD_VAR 0 5
32677: PPUSH
32678: LD_EXP 64
32682: PUSH
32683: LD_VAR 0 1
32687: ARRAY
32688: PPUSH
32689: CALL_OW 113
32693: GO 32735
// if GetControl ( i ) = control_manual then
32695: LD_VAR 0 5
32699: PPUSH
32700: CALL_OW 263
32704: PUSH
32705: LD_INT 1
32707: EQUAL
32708: IFFALSE 32735
// if IsDrivenBy ( i ) then
32710: LD_VAR 0 5
32714: PPUSH
32715: CALL_OW 311
32719: IFFALSE 32735
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
32721: LD_VAR 0 5
32725: PPUSH
32726: CALL_OW 311
32730: PPUSH
32731: CALL_OW 121
// end ;
32735: GO 32647
32737: POP
32738: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
32739: LD_VAR 0 2
32743: PPUSH
32744: LD_INT 95
32746: PUSH
32747: LD_EXP 64
32751: PUSH
32752: LD_VAR 0 1
32756: ARRAY
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PPUSH
32762: CALL_OW 72
32766: PUSH
32767: LD_VAR 0 2
32771: EQUAL
32772: PUSH
32773: LD_EXP 63
32777: PUSH
32778: LD_VAR 0 1
32782: ARRAY
32783: OR
32784: IFFALSE 32630
// mc_defender := Replace ( mc_defender , base , defenders ) ;
32786: LD_ADDR_EXP 62
32790: PUSH
32791: LD_EXP 62
32795: PPUSH
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_VAR 0 2
32805: PPUSH
32806: CALL_OW 1
32810: ST_TO_ADDR
// end ;
32811: LD_VAR 0 4
32815: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
// if not base_units then
32822: LD_VAR 0 1
32826: NOT
32827: IFFALSE 32831
// exit ;
32829: GO 32918
// result := false ;
32831: LD_ADDR_VAR 0 2
32835: PUSH
32836: LD_INT 0
32838: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
32839: LD_ADDR_VAR 0 5
32843: PUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: LD_INT 21
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PPUSH
32859: CALL_OW 72
32863: ST_TO_ADDR
// if not tmp then
32864: LD_VAR 0 5
32868: NOT
32869: IFFALSE 32873
// exit ;
32871: GO 32918
// for i in tmp do
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: LD_VAR 0 5
32882: PUSH
32883: FOR_IN
32884: IFFALSE 32916
// begin result := EnemyInRange ( i , 18 ) ;
32886: LD_ADDR_VAR 0 2
32890: PUSH
32891: LD_VAR 0 3
32895: PPUSH
32896: LD_INT 18
32898: PPUSH
32899: CALL 27924 0 2
32903: ST_TO_ADDR
// if result then
32904: LD_VAR 0 2
32908: IFFALSE 32914
// exit ;
32910: POP
32911: POP
32912: GO 32918
// end ;
32914: GO 32883
32916: POP
32917: POP
// end ;
32918: LD_VAR 0 2
32922: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32923: LD_INT 0
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
// result := false ;
32929: LD_ADDR_VAR 0 2
32933: PUSH
32934: LD_INT 0
32936: ST_TO_ADDR
// side := GetSide ( unit ) ;
32937: LD_ADDR_VAR 0 3
32941: PUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 255
32951: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 248
32966: ST_TO_ADDR
// case nat of 1 :
32967: LD_VAR 0 4
32971: PUSH
32972: LD_INT 1
32974: DOUBLE
32975: EQUAL
32976: IFTRUE 32980
32978: GO 32991
32980: POP
// tech := tech_lassight ; 2 :
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_INT 12
32988: ST_TO_ADDR
32989: GO 33030
32991: LD_INT 2
32993: DOUBLE
32994: EQUAL
32995: IFTRUE 32999
32997: GO 33010
32999: POP
// tech := tech_mortar ; 3 :
33000: LD_ADDR_VAR 0 5
33004: PUSH
33005: LD_INT 41
33007: ST_TO_ADDR
33008: GO 33030
33010: LD_INT 3
33012: DOUBLE
33013: EQUAL
33014: IFTRUE 33018
33016: GO 33029
33018: POP
// tech := tech_bazooka ; end ;
33019: LD_ADDR_VAR 0 5
33023: PUSH
33024: LD_INT 44
33026: ST_TO_ADDR
33027: GO 33030
33029: POP
// if Researched ( side , tech ) then
33030: LD_VAR 0 3
33034: PPUSH
33035: LD_VAR 0 5
33039: PPUSH
33040: CALL_OW 325
33044: IFFALSE 33071
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33046: LD_ADDR_VAR 0 2
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: LD_INT 8
33056: PUSH
33057: LD_INT 9
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: PUSH
33065: LD_VAR 0 4
33069: ARRAY
33070: ST_TO_ADDR
// end ; end_of_file
33071: LD_VAR 0 2
33075: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba ; export function PrepareArabian ; var i , d , un , skill ; begin
33076: LD_INT 0
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_INT 6
33090: PUSH
33091: LD_INT 7
33093: PUSH
33094: LD_INT 8
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: PUSH
33102: LD_OWVAR 67
33106: ARRAY
33107: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33108: LD_INT 69
33110: PUSH
33111: EMPTY
33112: LIST
33113: PPUSH
33114: LD_INT 141
33116: PPUSH
33117: CALL_OW 169
// Wait ( 1 ) ;
33121: LD_INT 1
33123: PPUSH
33124: CALL_OW 67
// uc_side := 2 ;
33128: LD_ADDR_OWVAR 20
33132: PUSH
33133: LD_INT 2
33135: ST_TO_ADDR
// uc_nation := 2 ;
33136: LD_ADDR_OWVAR 21
33140: PUSH
33141: LD_INT 2
33143: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33144: LD_ADDR_OWVAR 37
33148: PUSH
33149: LD_INT 14
33151: ST_TO_ADDR
// vc_engine := engine_siberite ;
33152: LD_ADDR_OWVAR 39
33156: PUSH
33157: LD_INT 3
33159: ST_TO_ADDR
// vc_control := control_manual ;
33160: LD_ADDR_OWVAR 38
33164: PUSH
33165: LD_INT 1
33167: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33168: LD_ADDR_OWVAR 40
33172: PUSH
33173: LD_INT 31
33175: ST_TO_ADDR
// for i = 1 to 3 do
33176: LD_ADDR_VAR 0 2
33180: PUSH
33181: DOUBLE
33182: LD_INT 1
33184: DEC
33185: ST_TO_ADDR
33186: LD_INT 3
33188: PUSH
33189: FOR_TO
33190: IFFALSE 33274
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33192: LD_INT 0
33194: PPUSH
33195: LD_INT 3
33197: PPUSH
33198: LD_VAR 0 5
33202: PPUSH
33203: CALL_OW 380
// un := CreateVehicle ;
33207: LD_ADDR_VAR 0 4
33211: PUSH
33212: CALL_OW 45
33216: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33217: LD_VAR 0 4
33221: PPUSH
33222: LD_INT 0
33224: PPUSH
33225: LD_INT 5
33227: PPUSH
33228: CALL_OW 12
33232: PPUSH
33233: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33237: LD_VAR 0 4
33241: PPUSH
33242: LD_INT 156
33244: PPUSH
33245: LD_INT 15
33247: PPUSH
33248: LD_INT 6
33250: PPUSH
33251: LD_INT 0
33253: PPUSH
33254: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33258: CALL_OW 44
33262: PPUSH
33263: LD_VAR 0 4
33267: PPUSH
33268: CALL_OW 52
// end ;
33272: GO 33189
33274: POP
33275: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
33276: LD_ADDR_EXP 34
33280: PUSH
33281: LD_INT 94
33283: PPUSH
33284: LD_STRING dammam
33286: PPUSH
33287: LD_VAR 0 5
33291: PPUSH
33292: LD_INT 10000
33294: PUSH
33295: LD_INT 1000
33297: PUSH
33298: LD_INT 300
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: PPUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: LD_INT 4
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: PPUSH
33327: CALL 5933 0 5
33331: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33332: LD_ADDR_EXP 34
33336: PUSH
33337: LD_EXP 34
33341: PUSH
33342: LD_INT 122
33344: PPUSH
33345: LD_STRING 
33347: PPUSH
33348: LD_VAR 0 5
33352: PPUSH
33353: LD_INT 100
33355: PUSH
33356: LD_INT 60
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: PPUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: PPUSH
33386: CALL 5933 0 5
33390: ADD
33391: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33392: LD_ADDR_EXP 32
33396: PUSH
33397: LD_INT 45
33399: PPUSH
33400: LD_STRING jeddah
33402: PPUSH
33403: LD_VAR 0 5
33407: PPUSH
33408: LD_INT 700
33410: PUSH
33411: LD_INT 300
33413: PUSH
33414: LD_INT 10
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: PPUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL 5933 0 5
33445: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33446: LD_ADDR_EXP 33
33450: PUSH
33451: LD_INT 7
33453: PPUSH
33454: LD_STRING riyadh
33456: PPUSH
33457: LD_VAR 0 5
33461: PPUSH
33462: LD_INT 500
33464: PUSH
33465: LD_INT 60
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: PPUSH
33476: LD_INT 4
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: PPUSH
33494: CALL 5933 0 5
33498: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33499: LD_ADDR_EXP 35
33503: PUSH
33504: LD_INT 69
33506: PPUSH
33507: LD_STRING 
33509: PPUSH
33510: LD_VAR 0 5
33514: PPUSH
33515: LD_INT 500
33517: PUSH
33518: LD_INT 50
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: PPUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: PPUSH
33548: CALL 5933 0 5
33552: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
33553: LD_ADDR_EXP 44
33557: PUSH
33558: LD_EXP 34
33562: PUSH
33563: LD_EXP 32
33567: PUSH
33568: LD_EXP 35
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
33578: LD_ADDR_VAR 0 2
33582: PUSH
33583: LD_INT 22
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_INT 31
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 58
33605: PUSH
33606: EMPTY
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 69
33618: PUSH
33619: FOR_IN
33620: IFFALSE 33745
// begin if GetBase ( i ) then
33622: LD_VAR 0 2
33626: PPUSH
33627: CALL_OW 274
33631: IFFALSE 33635
// continue ;
33633: GO 33619
// d := GetDir ( i ) ;
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_VAR 0 2
33644: PPUSH
33645: CALL_OW 254
33649: ST_TO_ADDR
// if d < 3 then
33650: LD_VAR 0 3
33654: PUSH
33655: LD_INT 3
33657: LESS
33658: IFFALSE 33676
// d := d + 3 else
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_VAR 0 3
33669: PUSH
33670: LD_INT 3
33672: PLUS
33673: ST_TO_ADDR
33674: GO 33690
// d := d - 3 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_INT 3
33688: MINUS
33689: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
33690: LD_INT 0
33692: PPUSH
33693: LD_INT 8
33695: PPUSH
33696: LD_VAR 0 5
33700: PPUSH
33701: CALL_OW 380
// un := CreateHuman ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: CALL_OW 44
33714: ST_TO_ADDR
// SetDir ( un , d ) ;
33715: LD_VAR 0 4
33719: PPUSH
33720: LD_VAR 0 3
33724: PPUSH
33725: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
33729: LD_VAR 0 4
33733: PPUSH
33734: LD_VAR 0 2
33738: PPUSH
33739: CALL_OW 52
// end ;
33743: GO 33619
33745: POP
33746: POP
// if Difficulty > 1 then
33747: LD_OWVAR 67
33751: PUSH
33752: LD_INT 1
33754: GREATER
33755: IFFALSE 34126
// begin ar_kamikadze := [ ] ;
33757: LD_ADDR_EXP 38
33761: PUSH
33762: EMPTY
33763: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
33764: LD_INT 0
33766: PPUSH
33767: LD_INT 1
33769: PPUSH
33770: LD_VAR 0 5
33774: PPUSH
33775: CALL_OW 380
// un := CreateHuman ;
33779: LD_ADDR_VAR 0 4
33783: PUSH
33784: CALL_OW 44
33788: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33789: LD_VAR 0 4
33793: PPUSH
33794: LD_INT 3
33796: PPUSH
33797: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
33801: LD_VAR 0 4
33805: PPUSH
33806: LD_INT 23
33808: PPUSH
33809: LD_INT 44
33811: PPUSH
33812: LD_INT 0
33814: PPUSH
33815: CALL_OW 48
// ComCrawl ( un ) ;
33819: LD_VAR 0 4
33823: PPUSH
33824: CALL_OW 137
// un := CreateHuman ;
33828: LD_ADDR_VAR 0 4
33832: PUSH
33833: CALL_OW 44
33837: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33838: LD_VAR 0 4
33842: PPUSH
33843: LD_INT 3
33845: PPUSH
33846: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
33850: LD_VAR 0 4
33854: PPUSH
33855: LD_INT 30
33857: PPUSH
33858: LD_INT 39
33860: PPUSH
33861: LD_INT 0
33863: PPUSH
33864: CALL_OW 48
// ComCrawl ( un ) ;
33868: LD_VAR 0 4
33872: PPUSH
33873: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
33877: LD_INT 0
33879: PPUSH
33880: LD_INT 17
33882: PPUSH
33883: LD_VAR 0 5
33887: PPUSH
33888: CALL_OW 380
// un := CreateHuman ;
33892: LD_ADDR_VAR 0 4
33896: PUSH
33897: CALL_OW 44
33901: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33902: LD_VAR 0 4
33906: PPUSH
33907: LD_INT 3
33909: PPUSH
33910: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
33914: LD_VAR 0 4
33918: PPUSH
33919: LD_INT 45
33921: PPUSH
33922: LD_INT 86
33924: PPUSH
33925: LD_INT 0
33927: PPUSH
33928: CALL_OW 48
// ComHold ( un ) ;
33932: LD_VAR 0 4
33936: PPUSH
33937: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
33941: LD_ADDR_EXP 38
33945: PUSH
33946: LD_EXP 38
33950: PPUSH
33951: LD_EXP 38
33955: PUSH
33956: LD_INT 1
33958: PLUS
33959: PPUSH
33960: LD_VAR 0 4
33964: PPUSH
33965: CALL_OW 1
33969: ST_TO_ADDR
// un := CreateHuman ;
33970: LD_ADDR_VAR 0 4
33974: PUSH
33975: CALL_OW 44
33979: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33980: LD_VAR 0 4
33984: PPUSH
33985: LD_INT 3
33987: PPUSH
33988: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
33992: LD_VAR 0 4
33996: PPUSH
33997: LD_INT 60
33999: PPUSH
34000: LD_INT 85
34002: PPUSH
34003: LD_INT 0
34005: PPUSH
34006: CALL_OW 48
// ComHold ( un ) ;
34010: LD_VAR 0 4
34014: PPUSH
34015: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34019: LD_ADDR_EXP 38
34023: PUSH
34024: LD_EXP 38
34028: PPUSH
34029: LD_EXP 38
34033: PUSH
34034: LD_INT 1
34036: PLUS
34037: PPUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: CALL_OW 1
34047: ST_TO_ADDR
// un := CreateHuman ;
34048: LD_ADDR_VAR 0 4
34052: PUSH
34053: CALL_OW 44
34057: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34058: LD_VAR 0 4
34062: PPUSH
34063: LD_INT 3
34065: PPUSH
34066: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34070: LD_VAR 0 4
34074: PPUSH
34075: LD_INT 222
34077: PPUSH
34078: LD_INT 166
34080: PPUSH
34081: LD_INT 0
34083: PPUSH
34084: CALL_OW 48
// ComHold ( un ) ;
34088: LD_VAR 0 4
34092: PPUSH
34093: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34097: LD_ADDR_EXP 38
34101: PUSH
34102: LD_EXP 38
34106: PPUSH
34107: LD_EXP 38
34111: PUSH
34112: LD_INT 1
34114: PLUS
34115: PPUSH
34116: LD_VAR 0 4
34120: PPUSH
34121: CALL_OW 1
34125: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34126: LD_ADDR_EXP 36
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34133: LD_INT 1
34135: PPUSH
34136: LD_INT 1
34138: PPUSH
34139: LD_VAR 0 5
34143: PPUSH
34144: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34148: LD_ADDR_OWVAR 33
34152: PUSH
34153: LD_STRING SecondCharsGal
34155: ST_TO_ADDR
// hc_face_number := 4 ;
34156: LD_ADDR_OWVAR 34
34160: PUSH
34161: LD_INT 4
34163: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34164: LD_ADDR_EXP 36
34168: PUSH
34169: LD_EXP 36
34173: PPUSH
34174: LD_INT 1
34176: PPUSH
34177: CALL_OW 44
34181: PPUSH
34182: CALL_OW 1
34186: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34187: LD_INT 2
34189: PPUSH
34190: LD_INT 4
34192: PPUSH
34193: LD_VAR 0 5
34197: PPUSH
34198: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34202: LD_ADDR_OWVAR 33
34206: PUSH
34207: LD_STRING SecondCharsGal
34209: ST_TO_ADDR
// hc_face_number := 15 ;
34210: LD_ADDR_OWVAR 34
34214: PUSH
34215: LD_INT 15
34217: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34218: LD_ADDR_EXP 36
34222: PUSH
34223: LD_EXP 36
34227: PPUSH
34228: LD_INT 2
34230: PPUSH
34231: CALL_OW 44
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34241: LD_INT 2
34243: PPUSH
34244: LD_INT 4
34246: PPUSH
34247: LD_VAR 0 5
34251: PPUSH
34252: CALL_OW 380
// hc_gallery :=  ;
34256: LD_ADDR_OWVAR 33
34260: PUSH
34261: LD_STRING 
34263: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34264: LD_ADDR_EXP 36
34268: PUSH
34269: LD_EXP 36
34273: PPUSH
34274: LD_INT 3
34276: PPUSH
34277: CALL_OW 44
34281: PPUSH
34282: CALL_OW 1
34286: ST_TO_ADDR
// hc_sex := sex_male ;
34287: LD_ADDR_OWVAR 27
34291: PUSH
34292: LD_INT 1
34294: ST_TO_ADDR
// hc_class = 11 ;
34295: LD_ADDR_OWVAR 28
34299: PUSH
34300: LD_INT 11
34302: ST_TO_ADDR
// hc_gallery = sandar ;
34303: LD_ADDR_OWVAR 33
34307: PUSH
34308: LD_STRING sandar
34310: ST_TO_ADDR
// hc_face_number = 33 ;
34311: LD_ADDR_OWVAR 34
34315: PUSH
34316: LD_INT 33
34318: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34319: LD_ADDR_OWVAR 26
34323: PUSH
34324: LD_STRING Thabit Muhair Saliba
34326: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34327: LD_ADDR_OWVAR 31
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
// Saliba = CreateHuman ;
34350: LD_ADDR_EXP 40
34354: PUSH
34355: CALL_OW 44
34359: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34360: LD_EXP 40
34364: PPUSH
34365: LD_INT 7
34367: PPUSH
34368: CALL_OW 52
// ar_vehicles_tmp := [ ] ;
34372: LD_ADDR_EXP 37
34376: PUSH
34377: EMPTY
34378: ST_TO_ADDR
// for i = 1 to 4 do
34379: LD_ADDR_VAR 0 2
34383: PUSH
34384: DOUBLE
34385: LD_INT 1
34387: DEC
34388: ST_TO_ADDR
34389: LD_INT 4
34391: PUSH
34392: FOR_TO
34393: IFFALSE 34565
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34395: LD_INT 13
34397: PUSH
34398: LD_INT 14
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PPUSH
34408: LD_INT 2
34410: PPUSH
34411: CALL_OW 12
34415: ARRAY
34416: PPUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PPUSH
34430: LD_INT 2
34432: PPUSH
34433: CALL_OW 12
34437: ARRAY
34438: PPUSH
34439: LD_INT 1
34441: PPUSH
34442: LD_INT 25
34444: PUSH
34445: LD_INT 27
34447: PUSH
34448: LD_INT 26
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PPUSH
34459: LD_INT 3
34461: PPUSH
34462: CALL_OW 12
34466: ARRAY
34467: PPUSH
34468: LD_INT 60
34470: PPUSH
34471: LD_INT 100
34473: PPUSH
34474: CALL_OW 12
34478: PPUSH
34479: CALL 1970 0 5
// un := CreateVehicle ;
34483: LD_ADDR_VAR 0 4
34487: PUSH
34488: CALL_OW 45
34492: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34493: LD_ADDR_EXP 37
34497: PUSH
34498: LD_EXP 37
34502: PPUSH
34503: LD_EXP 37
34507: PUSH
34508: LD_INT 1
34510: PLUS
34511: PPUSH
34512: LD_VAR 0 4
34516: PPUSH
34517: CALL_OW 1
34521: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34522: LD_VAR 0 4
34526: PPUSH
34527: LD_INT 0
34529: PPUSH
34530: LD_INT 5
34532: PPUSH
34533: CALL_OW 12
34537: PPUSH
34538: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
34542: LD_VAR 0 4
34546: PPUSH
34547: LD_INT 124
34549: PPUSH
34550: LD_INT 141
34552: PPUSH
34553: LD_INT 6
34555: PPUSH
34556: LD_INT 0
34558: PPUSH
34559: CALL_OW 50
// end ;
34563: GO 34392
34565: POP
34566: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
34567: LD_ADDR_EXP 39
34571: PUSH
34572: EMPTY
34573: PUSH
34574: EMPTY
34575: PUSH
34576: EMPTY
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: DOUBLE
34589: LD_INT 1
34591: DEC
34592: ST_TO_ADDR
34593: LD_INT 3
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: PUSH
34607: LD_OWVAR 67
34611: ARRAY
34612: PUSH
34613: FOR_TO
34614: IFFALSE 34828
// for i = 1 to 3 do
34616: LD_ADDR_VAR 0 2
34620: PUSH
34621: DOUBLE
34622: LD_INT 1
34624: DEC
34625: ST_TO_ADDR
34626: LD_INT 3
34628: PUSH
34629: FOR_TO
34630: IFFALSE 34824
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
34632: LD_INT 14
34634: PPUSH
34635: LD_INT 3
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: PPUSH
34648: LD_INT 2
34650: PPUSH
34651: CALL_OW 12
34655: ARRAY
34656: PPUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 5
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PPUSH
34670: LD_INT 2
34672: PPUSH
34673: CALL_OW 12
34677: ARRAY
34678: PPUSH
34679: LD_INT 25
34681: PUSH
34682: LD_INT 27
34684: PUSH
34685: LD_INT 26
34687: PUSH
34688: LD_INT 28
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PPUSH
34700: LD_INT 4
34702: PPUSH
34703: CALL_OW 12
34707: ARRAY
34708: PPUSH
34709: LD_INT 100
34711: PPUSH
34712: CALL 1970 0 5
// un := CreateVehicle ;
34716: LD_ADDR_VAR 0 4
34720: PUSH
34721: CALL_OW 45
34725: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
34726: LD_ADDR_EXP 39
34730: PUSH
34731: LD_EXP 39
34735: PPUSH
34736: LD_VAR 0 2
34740: PUSH
34741: LD_EXP 39
34745: PUSH
34746: LD_VAR 0 2
34750: ARRAY
34751: PUSH
34752: LD_INT 1
34754: PLUS
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PPUSH
34760: LD_VAR 0 4
34764: PPUSH
34765: CALL 3142 0 3
34769: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34770: LD_VAR 0 4
34774: PPUSH
34775: LD_INT 0
34777: PPUSH
34778: LD_INT 5
34780: PPUSH
34781: CALL_OW 12
34785: PPUSH
34786: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
34790: LD_VAR 0 4
34794: PPUSH
34795: LD_INT 20
34797: PUSH
34798: LD_INT 21
34800: PUSH
34801: LD_INT 22
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: LIST
34808: PUSH
34809: LD_VAR 0 2
34813: ARRAY
34814: PPUSH
34815: LD_INT 0
34817: PPUSH
34818: CALL_OW 49
// end ;
34822: GO 34629
34824: POP
34825: POP
34826: GO 34613
34828: POP
34829: POP
// InitHc ;
34830: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
34834: LD_INT 4
34836: PPUSH
34837: LD_INT 5
34839: PPUSH
34840: LD_INT 10
34842: PPUSH
34843: LD_INT 5
34845: PPUSH
34846: LD_INT 0
34848: PPUSH
34849: CALL_OW 58
// end ;
34853: LD_VAR 0 1
34857: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
34858: LD_EXP 38
34862: IFFALSE 34936
34864: GO 34866
34866: DISABLE
34867: LD_INT 0
34869: PPUSH
// begin enable ;
34870: ENABLE
// for i in ar_kamikadze do
34871: LD_ADDR_VAR 0 1
34875: PUSH
34876: LD_EXP 38
34880: PUSH
34881: FOR_IN
34882: IFFALSE 34934
// if See ( 1 , i ) then
34884: LD_INT 1
34886: PPUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 292
34896: IFFALSE 34932
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
34898: LD_VAR 0 1
34902: PPUSH
34903: LD_INT 22
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PPUSH
34913: CALL_OW 69
34917: PPUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 74
34927: PPUSH
34928: CALL_OW 115
34932: GO 34881
34934: POP
34935: POP
// end ;
34936: PPOPN 1
34938: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
34939: LD_EXP 12
34943: IFFALSE 35260
34945: GO 34947
34947: DISABLE
34948: LD_INT 0
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
// begin repeat wait ( 0 0$1 ) ;
34954: LD_INT 35
34956: PPUSH
34957: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
34961: LD_INT 1
34963: PPUSH
34964: CALL 53192 0 1
34968: PUSH
34969: LD_INT 0
34971: EQUAL
34972: IFFALSE 34954
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
34974: LD_INT 1
34976: PPUSH
34977: LD_INT 14
34979: PUSH
34980: LD_INT 3
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 32
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: PPUSH
34998: CALL 52981 0 2
// repeat wait ( 0 0$1 ) ;
35002: LD_INT 35
35004: PPUSH
35005: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35009: LD_EXP 59
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PPUSH
35018: LD_INT 33
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 34
35030: PUSH
35031: LD_INT 32
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PPUSH
35042: CALL_OW 72
35046: IFFALSE 35002
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35048: LD_ADDR_VAR 0 2
35052: PUSH
35053: LD_EXP 59
35057: PUSH
35058: LD_INT 1
35060: ARRAY
35061: PPUSH
35062: LD_INT 33
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 34
35074: PUSH
35075: LD_INT 32
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PPUSH
35086: CALL_OW 72
35090: PUSH
35091: LD_INT 1
35093: ARRAY
35094: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35095: LD_ADDR_VAR 0 4
35099: PUSH
35100: LD_INT 5
35102: PPUSH
35103: CALL_OW 469
35107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35108: LD_INT 35
35110: PPUSH
35111: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35115: LD_ADDR_VAR 0 4
35119: PUSH
35120: LD_INT 5
35122: PPUSH
35123: CALL_OW 469
35127: ST_TO_ADDR
// tmp := 100 ;
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_INT 100
35135: ST_TO_ADDR
// if pos then
35136: LD_VAR 0 4
35140: IFFALSE 35180
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 2
35149: PPUSH
35150: LD_VAR 0 4
35154: PUSH
35155: LD_INT 1
35157: ARRAY
35158: PPUSH
35159: LD_VAR 0 4
35163: PUSH
35164: LD_INT 2
35166: ARRAY
35167: PPUSH
35168: LD_INT 20
35170: PPUSH
35171: CALL 3636 0 4
35175: PUSH
35176: LD_INT 4
35178: ARRAY
35179: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35180: LD_VAR 0 4
35184: PUSH
35185: LD_EXP 13
35189: NOT
35190: AND
35191: PUSH
35192: LD_VAR 0 3
35196: PUSH
35197: LD_INT 10
35199: LESS
35200: AND
35201: IFFALSE 35108
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35203: LD_VAR 0 2
35207: PPUSH
35208: LD_VAR 0 4
35212: PUSH
35213: LD_INT 1
35215: ARRAY
35216: PPUSH
35217: LD_VAR 0 4
35221: PUSH
35222: LD_INT 2
35224: ARRAY
35225: PPUSH
35226: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35230: LD_VAR 0 2
35234: PPUSH
35235: LD_INT 198
35237: PPUSH
35238: LD_INT 113
35240: PPUSH
35241: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35245: LD_VAR 0 2
35249: PPUSH
35250: LD_INT 124
35252: PPUSH
35253: LD_INT 7
35255: PPUSH
35256: CALL_OW 171
// end ;
35260: PPOPN 4
35262: END
// every 12 12$00 do
35263: GO 35265
35265: DISABLE
// begin end ;
35266: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35267: LD_EXP 6
35271: IFFALSE 37265
35273: GO 35275
35275: DISABLE
35276: LD_INT 0
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: LD_INT 5
35293: PUSH
35294: LD_INT 6
35296: PUSH
35297: LD_INT 7
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: PUSH
35305: LD_OWVAR 67
35309: ARRAY
35310: ST_TO_ADDR
// coords := [ ] ;
35311: LD_ADDR_VAR 0 5
35315: PUSH
35316: EMPTY
35317: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35318: LD_ADDR_VAR 0 6
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35365: LD_INT 1
35367: PPUSH
35368: LD_INT 14
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: LD_INT 28
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 14
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 25
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 14
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 28
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 14
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 29
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: PPUSH
35446: CALL 52981 0 2
// wait ( [ 9 9$00 , 8 8$00 , 7 7$20 ] [ Difficulty ] ) ;
35450: LD_INT 18900
35452: PUSH
35453: LD_INT 16800
35455: PUSH
35456: LD_INT 15400
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: PUSH
35464: LD_OWVAR 67
35468: ARRAY
35469: PPUSH
35470: CALL_OW 67
// InitHc ;
35474: CALL_OW 19
// InitUc ;
35478: CALL_OW 18
// uc_side := 2 ;
35482: LD_ADDR_OWVAR 20
35486: PUSH
35487: LD_INT 2
35489: ST_TO_ADDR
// uc_nation := 2 ;
35490: LD_ADDR_OWVAR 21
35494: PUSH
35495: LD_INT 2
35497: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
35498: LD_ADDR_VAR 0 3
35502: PUSH
35503: EMPTY
35504: PUSH
35505: EMPTY
35506: PUSH
35507: EMPTY
35508: PUSH
35509: EMPTY
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_VAR 0 3
35526: PPUSH
35527: LD_INT 1
35529: PPUSH
35530: LD_EXP 59
35534: PUSH
35535: LD_INT 1
35537: ARRAY
35538: PUSH
35539: LD_INT 34
35541: PUSH
35542: LD_INT 32
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PPUSH
35549: CALL_OW 69
35553: DIFF
35554: PPUSH
35555: CALL_OW 1
35559: ST_TO_ADDR
// for i = 1 to Difficulty do
35560: LD_ADDR_VAR 0 1
35564: PUSH
35565: DOUBLE
35566: LD_INT 1
35568: DEC
35569: ST_TO_ADDR
35570: LD_OWVAR 67
35574: PUSH
35575: FOR_TO
35576: IFFALSE 35698
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
35578: LD_INT 13
35580: PPUSH
35581: LD_INT 3
35583: PPUSH
35584: LD_INT 5
35586: PPUSH
35587: LD_INT 29
35589: PPUSH
35590: LD_INT 100
35592: PPUSH
35593: CALL 1970 0 5
// un := CreateVehicle ;
35597: LD_ADDR_VAR 0 2
35601: PUSH
35602: CALL_OW 45
35606: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
35607: LD_ADDR_VAR 0 3
35611: PUSH
35612: LD_VAR 0 3
35616: PPUSH
35617: LD_INT 1
35619: PUSH
35620: LD_VAR 0 3
35624: PUSH
35625: LD_INT 1
35627: ARRAY
35628: PUSH
35629: LD_INT 1
35631: PLUS
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PPUSH
35637: LD_VAR 0 2
35641: PPUSH
35642: CALL 3142 0 3
35646: ST_TO_ADDR
// SetDir ( un , 3 ) ;
35647: LD_VAR 0 2
35651: PPUSH
35652: LD_INT 3
35654: PPUSH
35655: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
35659: LD_VAR 0 2
35663: PPUSH
35664: LD_INT 16
35666: PPUSH
35667: LD_INT 0
35669: PPUSH
35670: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
35674: LD_VAR 0 2
35678: PPUSH
35679: LD_INT 51
35681: PPUSH
35682: LD_INT 10
35684: PPUSH
35685: CALL_OW 111
// wait ( 0 0$2 ) ;
35689: LD_INT 70
35691: PPUSH
35692: CALL_OW 67
// end ;
35696: GO 35575
35698: POP
35699: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
35700: LD_ADDR_VAR 0 5
35704: PUSH
35705: LD_INT 51
35707: PUSH
35708: LD_INT 24
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 75
35717: PUSH
35718: LD_INT 90
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
35729: LD_INT 1
35731: PPUSH
35732: LD_VAR 0 3
35736: PUSH
35737: LD_INT 1
35739: ARRAY
35740: PPUSH
35741: LD_VAR 0 5
35745: PPUSH
35746: LD_VAR 0 6
35750: PPUSH
35751: CALL 53077 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
35755: LD_ADDR_VAR 0 1
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_INT 2
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: LD_OWVAR 67
35783: ARRAY
35784: PUSH
35785: FOR_TO
35786: IFFALSE 35870
// begin PrepareHuman ( false , 17 , skill ) ;
35788: LD_INT 0
35790: PPUSH
35791: LD_INT 17
35793: PPUSH
35794: LD_VAR 0 4
35798: PPUSH
35799: CALL_OW 380
// un := CreateHuman ;
35803: LD_ADDR_VAR 0 2
35807: PUSH
35808: CALL_OW 44
35812: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
35813: LD_ADDR_VAR 0 3
35817: PUSH
35818: LD_VAR 0 3
35822: PPUSH
35823: LD_INT 2
35825: PUSH
35826: LD_VAR 0 3
35830: PUSH
35831: LD_INT 2
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: PLUS
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PPUSH
35843: LD_VAR 0 2
35847: PPUSH
35848: CALL 3142 0 3
35852: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
35853: LD_VAR 0 2
35857: PPUSH
35858: LD_INT 13
35860: PPUSH
35861: LD_INT 0
35863: PPUSH
35864: CALL_OW 49
// end ;
35868: GO 35785
35870: POP
35871: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
35872: LD_ADDR_VAR 0 1
35876: PUSH
35877: DOUBLE
35878: LD_INT 1
35880: DEC
35881: ST_TO_ADDR
35882: LD_INT 3
35884: PUSH
35885: LD_INT 4
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: LD_OWVAR 67
35900: ARRAY
35901: PUSH
35902: FOR_TO
35903: IFFALSE 36006
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
35905: LD_INT 0
35907: PPUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 8
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PPUSH
35921: LD_INT 2
35923: PPUSH
35924: CALL_OW 12
35928: ARRAY
35929: PPUSH
35930: LD_VAR 0 4
35934: PPUSH
35935: CALL_OW 380
// un := CreateHuman ;
35939: LD_ADDR_VAR 0 2
35943: PUSH
35944: CALL_OW 44
35948: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
35949: LD_ADDR_VAR 0 3
35953: PUSH
35954: LD_VAR 0 3
35958: PPUSH
35959: LD_INT 2
35961: PUSH
35962: LD_VAR 0 3
35966: PUSH
35967: LD_INT 2
35969: ARRAY
35970: PUSH
35971: LD_INT 1
35973: PLUS
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PPUSH
35979: LD_VAR 0 2
35983: PPUSH
35984: CALL 3142 0 3
35988: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_INT 13
35996: PPUSH
35997: LD_INT 0
35999: PPUSH
36000: CALL_OW 49
// end ;
36004: GO 35902
36006: POP
36007: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36008: LD_ADDR_VAR 0 5
36012: PUSH
36013: LD_INT 67
36015: PUSH
36016: LD_INT 112
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 85
36025: PUSH
36026: LD_INT 130
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36037: LD_INT 2
36039: PPUSH
36040: LD_VAR 0 3
36044: PUSH
36045: LD_INT 2
36047: ARRAY
36048: PPUSH
36049: LD_VAR 0 5
36053: PPUSH
36054: LD_VAR 0 6
36058: PPUSH
36059: CALL 53077 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36063: LD_ADDR_VAR 0 1
36067: PUSH
36068: DOUBLE
36069: LD_INT 1
36071: DEC
36072: ST_TO_ADDR
36073: LD_INT 1
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: PUSH
36087: LD_OWVAR 67
36091: ARRAY
36092: PUSH
36093: FOR_TO
36094: IFFALSE 36178
// begin PrepareHuman ( false , 17 , skill ) ;
36096: LD_INT 0
36098: PPUSH
36099: LD_INT 17
36101: PPUSH
36102: LD_VAR 0 4
36106: PPUSH
36107: CALL_OW 380
// un := CreateHuman ;
36111: LD_ADDR_VAR 0 2
36115: PUSH
36116: CALL_OW 44
36120: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36121: LD_ADDR_VAR 0 3
36125: PUSH
36126: LD_VAR 0 3
36130: PPUSH
36131: LD_INT 3
36133: PUSH
36134: LD_VAR 0 3
36138: PUSH
36139: LD_INT 3
36141: ARRAY
36142: PUSH
36143: LD_INT 1
36145: PLUS
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PPUSH
36151: LD_VAR 0 2
36155: PPUSH
36156: CALL 3142 0 3
36160: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_INT 14
36168: PPUSH
36169: LD_INT 0
36171: PPUSH
36172: CALL_OW 49
// end ;
36176: GO 36093
36178: POP
36179: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: LD_INT 148
36187: PUSH
36188: LD_INT 158
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 148
36197: PUSH
36198: LD_INT 158
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36209: LD_INT 3
36211: PPUSH
36212: LD_VAR 0 3
36216: PUSH
36217: LD_INT 3
36219: ARRAY
36220: PPUSH
36221: LD_VAR 0 5
36225: PPUSH
36226: LD_VAR 0 6
36230: PPUSH
36231: CALL 53077 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36235: LD_ADDR_VAR 0 1
36239: PUSH
36240: DOUBLE
36241: LD_INT 1
36243: DEC
36244: ST_TO_ADDR
36245: LD_INT 3
36247: PUSH
36248: LD_INT 4
36250: PUSH
36251: LD_INT 5
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: PUSH
36259: LD_OWVAR 67
36263: ARRAY
36264: PUSH
36265: FOR_TO
36266: IFFALSE 36474
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36268: LD_INT 14
36270: PPUSH
36271: LD_INT 3
36273: PPUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 5
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PPUSH
36287: LD_INT 2
36289: PPUSH
36290: CALL_OW 12
36294: ARRAY
36295: PPUSH
36296: LD_INT 27
36298: PUSH
36299: LD_INT 26
36301: PUSH
36302: LD_INT 28
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PPUSH
36313: LD_INT 3
36315: PPUSH
36316: CALL_OW 12
36320: ARRAY
36321: PPUSH
36322: LD_INT 100
36324: PPUSH
36325: CALL 1970 0 5
// un := CreateVehicle ;
36329: LD_ADDR_VAR 0 2
36333: PUSH
36334: CALL_OW 45
36338: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36339: LD_ADDR_VAR 0 3
36343: PUSH
36344: LD_VAR 0 3
36348: PPUSH
36349: LD_INT 4
36351: PUSH
36352: LD_VAR 0 3
36356: PUSH
36357: LD_INT 4
36359: ARRAY
36360: PUSH
36361: LD_INT 1
36363: PLUS
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PPUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: CALL 3142 0 3
36378: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36379: LD_VAR 0 2
36383: PPUSH
36384: LD_INT 5
36386: PPUSH
36387: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36391: LD_VAR 0 2
36395: PPUSH
36396: LD_INT 15
36398: PPUSH
36399: LD_INT 0
36401: PPUSH
36402: CALL_OW 49
// if GetControl ( un ) = control_manual then
36406: LD_VAR 0 2
36410: PPUSH
36411: CALL_OW 263
36415: PUSH
36416: LD_INT 1
36418: EQUAL
36419: IFFALSE 36450
// begin PrepareHuman ( false , 3 , skill ) ;
36421: LD_INT 0
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: LD_VAR 0 4
36431: PPUSH
36432: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36436: CALL_OW 44
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36450: LD_VAR 0 2
36454: PPUSH
36455: LD_INT 179
36457: PPUSH
36458: LD_INT 135
36460: PPUSH
36461: CALL_OW 111
// wait ( 0 0$2 ) ;
36465: LD_INT 70
36467: PPUSH
36468: CALL_OW 67
// end ;
36472: GO 36265
36474: POP
36475: POP
// vc_chassis := 15 ;
36476: LD_ADDR_OWVAR 37
36480: PUSH
36481: LD_INT 15
36483: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_VAR 0 3
36493: PPUSH
36494: LD_INT 4
36496: PUSH
36497: LD_VAR 0 3
36501: PUSH
36502: LD_INT 4
36504: ARRAY
36505: PUSH
36506: LD_INT 1
36508: PLUS
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PPUSH
36514: CALL_OW 45
36518: PPUSH
36519: CALL 3142 0 3
36523: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ 1 ] , east_attack_spawn , false ) ;
36524: LD_VAR 0 3
36528: PUSH
36529: LD_INT 4
36531: ARRAY
36532: PUSH
36533: LD_INT 1
36535: ARRAY
36536: PPUSH
36537: LD_INT 15
36539: PPUSH
36540: LD_INT 0
36542: PPUSH
36543: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
36547: LD_INT 0
36549: PPUSH
36550: LD_INT 11
36552: PPUSH
36553: LD_VAR 0 4
36557: PPUSH
36558: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_VAR 0 3
36571: PPUSH
36572: LD_INT 4
36574: PUSH
36575: LD_VAR 0 3
36579: PUSH
36580: LD_INT 4
36582: ARRAY
36583: PUSH
36584: LD_INT 1
36586: PLUS
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PPUSH
36592: CALL_OW 44
36596: PPUSH
36597: CALL 3142 0 3
36601: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
36602: LD_VAR 0 3
36606: PUSH
36607: LD_INT 4
36609: ARRAY
36610: PUSH
36611: LD_VAR 0 3
36615: PUSH
36616: LD_INT 4
36618: ARRAY
36619: ARRAY
36620: PPUSH
36621: LD_VAR 0 3
36625: PUSH
36626: LD_INT 4
36628: ARRAY
36629: PUSH
36630: LD_VAR 0 3
36634: PUSH
36635: LD_INT 4
36637: ARRAY
36638: PUSH
36639: LD_INT 1
36641: MINUS
36642: ARRAY
36643: PPUSH
36644: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
36648: LD_ADDR_VAR 0 5
36652: PUSH
36653: LD_INT 148
36655: PUSH
36656: LD_INT 140
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
36666: LD_INT 1
36668: PPUSH
36669: LD_VAR 0 3
36673: PUSH
36674: LD_INT 4
36676: ARRAY
36677: PPUSH
36678: LD_VAR 0 5
36682: PPUSH
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL 53077 0 4
// Wait ( 10 10$00 ) ;
36692: LD_INT 21000
36694: PPUSH
36695: CALL_OW 67
// tmp := [ ] ;
36699: LD_ADDR_VAR 0 3
36703: PUSH
36704: EMPTY
36705: ST_TO_ADDR
// w := 1 ;
36706: LD_ADDR_VAR 0 7
36710: PUSH
36711: LD_INT 1
36713: ST_TO_ADDR
// repeat tmp := [ ] ;
36714: LD_ADDR_VAR 0 3
36718: PUSH
36719: EMPTY
36720: ST_TO_ADDR
// if w mod 4 = 0 then
36721: LD_VAR 0 7
36725: PUSH
36726: LD_INT 4
36728: MOD
36729: PUSH
36730: LD_INT 0
36732: EQUAL
36733: IFFALSE 36820
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] ] else
36735: LD_ADDR_VAR 0 8
36739: PUSH
36740: LD_INT 11
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 27
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 11
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 27
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 11
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 27
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 11
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 27
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
36818: GO 36903
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
36820: LD_ADDR_VAR 0 8
36824: PUSH
36825: LD_INT 14
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: LD_INT 28
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 14
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 25
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 14
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 28
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 14
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 29
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// if w mod 3 = 0 then
36903: LD_VAR 0 7
36907: PUSH
36908: LD_INT 3
36910: MOD
36911: PUSH
36912: LD_INT 0
36914: EQUAL
36915: IFFALSE 36991
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
36917: LD_ADDR_VAR 0 8
36921: PUSH
36922: LD_VAR 0 8
36926: PPUSH
36927: LD_INT 1
36929: PUSH
36930: LD_VAR 0 8
36934: PUSH
36935: LD_VAR 0 1
36939: ARRAY
36940: PUSH
36941: LD_INT 1
36943: PLUS
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PPUSH
36949: LD_INT 14
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 25
36960: PUSH
36961: LD_INT 28
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: PPUSH
36971: LD_INT 2
36973: PPUSH
36974: CALL_OW 12
36978: ARRAY
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: PPUSH
36986: CALL 3142 0 3
36990: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
36991: LD_INT 1
36993: PPUSH
36994: LD_VAR 0 8
36998: PPUSH
36999: CALL 52981 0 2
// repeat wait ( 0 0$1 ) ;
37003: LD_INT 35
37005: PPUSH
37006: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37010: LD_EXP 59
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 34
37024: PUSH
37025: LD_INT 32
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PPUSH
37036: CALL_OW 72
37040: PUSH
37041: LD_INT 4
37043: GREATEREQUAL
37044: IFFALSE 37003
// wait ( 0 0$10 ) ;
37046: LD_INT 350
37048: PPUSH
37049: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
37053: LD_ADDR_VAR 0 3
37057: PUSH
37058: LD_EXP 59
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PPUSH
37067: LD_INT 3
37069: PUSH
37070: LD_INT 34
37072: PUSH
37073: LD_INT 32
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PPUSH
37084: CALL_OW 72
37088: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
37089: LD_INT 100
37091: PPUSH
37092: CALL_OW 13
37096: PUSH
37097: LD_INT 50
37099: LESS
37100: IFFALSE 37133
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] else
37102: LD_ADDR_VAR 0 5
37106: PUSH
37107: LD_INT 51
37109: PUSH
37110: LD_INT 24
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 75
37119: PUSH
37120: LD_INT 90
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: ST_TO_ADDR
37131: GO 37162
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
37133: LD_ADDR_VAR 0 5
37137: PUSH
37138: LD_INT 128
37140: PUSH
37141: LD_INT 94
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 180
37150: PUSH
37151: LD_INT 135
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: ST_TO_ADDR
// if w mod 4 = 0 then
37162: LD_VAR 0 7
37166: PUSH
37167: LD_INT 4
37169: MOD
37170: PUSH
37171: LD_INT 0
37173: EQUAL
37174: IFFALSE 37205
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
37176: LD_ADDR_VAR 0 5
37180: PUSH
37181: LD_INT 91
37183: PUSH
37184: LD_INT 58
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 117
37193: PUSH
37194: LD_INT 107
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
37205: LD_INT 1
37207: PPUSH
37208: LD_VAR 0 3
37212: PPUSH
37213: LD_VAR 0 5
37217: PPUSH
37218: LD_VAR 0 6
37222: PPUSH
37223: CALL 53077 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
37227: LD_INT 19950
37229: PPUSH
37230: LD_INT 26250
37232: PPUSH
37233: CALL_OW 12
37237: PPUSH
37238: CALL_OW 67
// w := w + 1 ;
37242: LD_ADDR_VAR 0 7
37246: PUSH
37247: LD_VAR 0 7
37251: PUSH
37252: LD_INT 1
37254: PLUS
37255: ST_TO_ADDR
// until IsDead ( ar_dep_n ) ;
37256: LD_INT 94
37258: PPUSH
37259: CALL_OW 301
37263: IFFALSE 36714
// end ; end_of_file
37265: PPOPN 8
37267: END
// export function Action ; var tmp , p , radar , sols , i ; begin
37268: LD_INT 0
37270: PPUSH
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
// InGameOn ;
37276: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
37280: LD_EXP 17
37284: PPUSH
37285: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
37289: LD_ADDR_VAR 0 2
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 25
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PPUSH
37318: CALL_OW 69
37322: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_INT 22
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 34
37340: PUSH
37341: LD_INT 11
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PPUSH
37352: CALL_OW 69
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: ST_TO_ADDR
// for i = 1 to tmp do
37361: LD_ADDR_VAR 0 6
37365: PUSH
37366: DOUBLE
37367: LD_INT 1
37369: DEC
37370: ST_TO_ADDR
37371: LD_VAR 0 2
37375: PUSH
37376: FOR_TO
37377: IFFALSE 37424
// begin if i = 5 then
37379: LD_VAR 0 6
37383: PUSH
37384: LD_INT 5
37386: EQUAL
37387: IFFALSE 37391
// break ;
37389: GO 37424
// sols := Replace ( sols , i , tmp [ i ] ) ;
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: LD_VAR 0 5
37400: PPUSH
37401: LD_VAR 0 6
37405: PPUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_VAR 0 6
37415: ARRAY
37416: PPUSH
37417: CALL_OW 1
37421: ST_TO_ADDR
// end ;
37422: GO 37376
37424: POP
37425: POP
// tmp := ar_force_tmp ;
37426: LD_ADDR_VAR 0 2
37430: PUSH
37431: LD_EXP 36
37435: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
37436: LD_VAR 0 2
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PPUSH
37445: LD_INT 108
37447: PPUSH
37448: LD_INT 139
37450: PPUSH
37451: LD_INT 0
37453: PPUSH
37454: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
37458: LD_VAR 0 2
37462: PUSH
37463: LD_INT 1
37465: ARRAY
37466: PPUSH
37467: LD_EXP 17
37471: PPUSH
37472: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
37476: LD_VAR 0 2
37480: PUSH
37481: LD_INT 2
37483: ARRAY
37484: PPUSH
37485: LD_INT 114
37487: PPUSH
37488: LD_INT 132
37490: PPUSH
37491: LD_INT 0
37493: PPUSH
37494: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
37498: LD_VAR 0 2
37502: PUSH
37503: LD_INT 3
37505: ARRAY
37506: PPUSH
37507: LD_INT 115
37509: PPUSH
37510: LD_INT 132
37512: PPUSH
37513: LD_INT 0
37515: PPUSH
37516: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
37520: LD_VAR 0 2
37524: PUSH
37525: LD_INT 2
37527: ARRAY
37528: PUSH
37529: LD_VAR 0 2
37533: PUSH
37534: LD_INT 3
37536: ARRAY
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PPUSH
37542: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
37546: LD_VAR 0 4
37550: PPUSH
37551: LD_INT 83
37553: PPUSH
37554: LD_INT 123
37556: PPUSH
37557: CALL_OW 111
// Wait ( 0 0$01 ) ;
37561: LD_INT 35
37563: PPUSH
37564: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
37568: LD_INT 90
37570: PPUSH
37571: LD_INT 144
37573: PPUSH
37574: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
37578: LD_VAR 0 5
37582: PPUSH
37583: LD_INT 88
37585: PPUSH
37586: LD_INT 129
37588: PPUSH
37589: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 92
37600: PUSH
37601: LD_INT 131
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 88
37610: PUSH
37611: LD_INT 127
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 91
37620: PUSH
37621: LD_INT 132
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 92
37630: PUSH
37631: LD_INT 134
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: ST_TO_ADDR
// for i = 1 to sols do
37644: LD_ADDR_VAR 0 6
37648: PUSH
37649: DOUBLE
37650: LD_INT 1
37652: DEC
37653: ST_TO_ADDR
37654: LD_VAR 0 5
37658: PUSH
37659: FOR_TO
37660: IFFALSE 37733
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
37662: LD_VAR 0 5
37666: PUSH
37667: LD_VAR 0 6
37671: ARRAY
37672: PPUSH
37673: LD_VAR 0 3
37677: PUSH
37678: LD_VAR 0 6
37682: ARRAY
37683: PUSH
37684: LD_INT 1
37686: ARRAY
37687: PPUSH
37688: LD_VAR 0 3
37692: PUSH
37693: LD_VAR 0 6
37697: ARRAY
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
37707: LD_VAR 0 5
37711: PUSH
37712: LD_VAR 0 6
37716: ARRAY
37717: PPUSH
37718: CALL_OW 197
// AddComHold ( sols ) ;
37722: LD_VAR 0 5
37726: PPUSH
37727: CALL_OW 200
// end ;
37731: GO 37659
37733: POP
37734: POP
// repeat wait ( 0 0$1 ) ;
37735: LD_INT 35
37737: PPUSH
37738: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
37742: LD_VAR 0 5
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PPUSH
37751: LD_INT 92
37753: PPUSH
37754: LD_INT 131
37756: PPUSH
37757: CALL_OW 297
37761: PUSH
37762: LD_INT 4
37764: LESS
37765: IFFALSE 37735
// CenterOnXY ( 96 , 139 ) ;
37767: LD_INT 96
37769: PPUSH
37770: LD_INT 139
37772: PPUSH
37773: CALL_OW 84
// wait ( 0 0$3 ) ;
37777: LD_INT 105
37779: PPUSH
37780: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
37784: LD_INT 111
37786: PPUSH
37787: LD_INT 135
37789: PPUSH
37790: LD_INT 1
37792: PPUSH
37793: LD_INT 25
37795: NEG
37796: PPUSH
37797: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
37801: LD_VAR 0 2
37805: PUSH
37806: LD_INT 2
37808: ARRAY
37809: PPUSH
37810: LD_VAR 0 2
37814: PUSH
37815: LD_INT 1
37817: ARRAY
37818: PPUSH
37819: CALL_OW 250
37823: PUSH
37824: LD_INT 3
37826: PLUS
37827: PPUSH
37828: LD_VAR 0 2
37832: PUSH
37833: LD_INT 1
37835: ARRAY
37836: PPUSH
37837: CALL_OW 251
37841: PPUSH
37842: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
37846: LD_VAR 0 2
37850: PUSH
37851: LD_INT 3
37853: ARRAY
37854: PPUSH
37855: LD_INT 7
37857: PPUSH
37858: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
37862: LD_VAR 0 2
37866: PUSH
37867: LD_INT 2
37869: ARRAY
37870: PPUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
37884: LD_INT 35
37886: PPUSH
37887: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
37891: LD_VAR 0 2
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: PPUSH
37900: LD_VAR 0 2
37904: PUSH
37905: LD_INT 2
37907: ARRAY
37908: PPUSH
37909: CALL_OW 296
37913: PUSH
37914: LD_INT 5
37916: LESS
37917: IFFALSE 37884
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
37919: LD_VAR 0 2
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PPUSH
37928: LD_VAR 0 2
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: PPUSH
37937: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
37941: LD_VAR 0 2
37945: PUSH
37946: LD_INT 1
37948: ARRAY
37949: PPUSH
37950: LD_STRING D1a-Merc1-1
37952: PPUSH
37953: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
37957: LD_VAR 0 2
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: PPUSH
37966: LD_STRING D1a-FMerc2-1
37968: PPUSH
37969: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
37973: LD_VAR 0 2
37977: PUSH
37978: LD_INT 2
37980: ARRAY
37981: PPUSH
37982: LD_VAR 0 2
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PPUSH
37991: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
37995: LD_VAR 0 2
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: LD_INT 500
38006: PPUSH
38007: CALL_OW 234
// wait ( 0 0$2 ) ;
38011: LD_INT 70
38013: PPUSH
38014: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
38018: LD_VAR 0 2
38022: PUSH
38023: LD_INT 1
38025: ARRAY
38026: PPUSH
38027: LD_INT 2
38029: PPUSH
38030: CALL_OW 234
// wait ( 0 0$0.3 ) ;
38034: LD_INT 10
38036: PPUSH
38037: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
38041: LD_VAR 0 2
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: LD_STRING D1a-Merc1-2
38052: PPUSH
38053: CALL_OW 91
// wait ( 0 0$0.2 ) ;
38057: LD_INT 7
38059: PPUSH
38060: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
38064: LD_VAR 0 2
38068: PUSH
38069: LD_INT 1
38071: ARRAY
38072: PPUSH
38073: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
38077: LD_VAR 0 2
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: PPUSH
38086: LD_INT 10
38088: PPUSH
38089: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
38093: LD_VAR 0 2
38097: PUSH
38098: LD_INT 2
38100: ARRAY
38101: PPUSH
38102: LD_STRING D1a-FMerc2-2
38104: PPUSH
38105: CALL_OW 88
// wait ( 0 0$1 ) ;
38109: LD_INT 35
38111: PPUSH
38112: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
38116: LD_INT 7
38118: PPUSH
38119: CALL_OW 85
// wait ( 0 0$2 ) ;
38123: LD_INT 70
38125: PPUSH
38126: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
38130: LD_EXP 40
38134: PPUSH
38135: LD_STRING D1a-Saliba-1
38137: PPUSH
38138: CALL_OW 91
// KillUnit ( Saliba ) ;
38142: LD_EXP 40
38146: PPUSH
38147: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
38151: LD_VAR 0 2
38155: PUSH
38156: LD_INT 3
38158: ARRAY
38159: PPUSH
38160: CALL_OW 122
// CenterOnUnits ( JMM ) ;
38164: LD_EXP 17
38168: PPUSH
38169: CALL_OW 85
// wait ( 0 0$1 ) ;
38173: LD_INT 35
38175: PPUSH
38176: CALL_OW 67
// InGameOff ;
38180: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
38184: LD_STRING M1
38186: PPUSH
38187: CALL_OW 337
// game_speed := 4 ;
38191: LD_ADDR_OWVAR 65
38195: PUSH
38196: LD_INT 4
38198: ST_TO_ADDR
// SaveForQuickRestart ;
38199: CALL_OW 22
// ar_run := true ;
38203: LD_ADDR_EXP 5
38207: PUSH
38208: LD_INT 1
38210: ST_TO_ADDR
// end ;
38211: LD_VAR 0 1
38215: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
38216: LD_EXP 5
38220: IFFALSE 38552
38222: GO 38224
38224: DISABLE
38225: LD_INT 0
38227: PPUSH
38228: PPUSH
38229: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
38230: LD_ADDR_VAR 0 2
38234: PUSH
38235: LD_EXP 36
38239: PUSH
38240: LD_EXP 33
38244: PPUSH
38245: LD_INT 21
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PPUSH
38255: CALL_OW 72
38259: ADD
38260: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
38261: LD_VAR 0 2
38265: PPUSH
38266: LD_INT 5
38268: PPUSH
38269: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
38273: LD_INT 5
38275: PPUSH
38276: LD_INT 1
38278: PPUSH
38279: CALL_OW 343
// k := 1 ;
38283: LD_ADDR_VAR 0 3
38287: PUSH
38288: LD_INT 1
38290: ST_TO_ADDR
// for i in tmp do
38291: LD_ADDR_VAR 0 1
38295: PUSH
38296: LD_VAR 0 2
38300: PUSH
38301: FOR_IN
38302: IFFALSE 38387
// begin if IsInUnit ( i ) then
38304: LD_VAR 0 1
38308: PPUSH
38309: CALL_OW 310
38313: IFFALSE 38324
// ComExitBuilding ( i ) ;
38315: LD_VAR 0 1
38319: PPUSH
38320: CALL_OW 122
// if GetClass ( i ) = 3 then
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 257
38333: PUSH
38334: LD_INT 3
38336: EQUAL
38337: IFFALSE 38373
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
38339: LD_VAR 0 1
38343: PPUSH
38344: LD_EXP 37
38348: PUSH
38349: LD_VAR 0 3
38353: ARRAY
38354: PPUSH
38355: CALL_OW 180
// k := k + 1 ;
38359: LD_ADDR_VAR 0 3
38363: PUSH
38364: LD_VAR 0 3
38368: PUSH
38369: LD_INT 1
38371: PLUS
38372: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
38373: LD_VAR 0 1
38377: PPUSH
38378: LD_INT 10
38380: PPUSH
38381: CALL_OW 173
// end ;
38385: GO 38301
38387: POP
38388: POP
// ar_patrol := true ;
38389: LD_ADDR_EXP 7
38393: PUSH
38394: LD_INT 1
38396: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
38397: LD_INT 10
38399: PPUSH
38400: CALL_OW 67
// for i in tmp do
38404: LD_ADDR_VAR 0 1
38408: PUSH
38409: LD_VAR 0 2
38413: PUSH
38414: FOR_IN
38415: IFFALSE 38443
// if not HasTask ( i ) then
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 314
38426: NOT
38427: IFFALSE 38441
// ComMoveToArea ( i , escape_area ) ;
38429: LD_VAR 0 1
38433: PPUSH
38434: LD_INT 10
38436: PPUSH
38437: CALL_OW 113
38441: GO 38414
38443: POP
38444: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_VAR 0 2
38454: PPUSH
38455: LD_INT 95
38457: PUSH
38458: LD_INT 10
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PPUSH
38465: CALL_OW 72
38469: ST_TO_ADDR
// if k then
38470: LD_VAR 0 3
38474: IFFALSE 38543
// for i in k do
38476: LD_ADDR_VAR 0 1
38480: PUSH
38481: LD_VAR 0 3
38485: PUSH
38486: FOR_IN
38487: IFFALSE 38541
// begin if IsInUnit ( i ) then
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 310
38498: IFFALSE 38514
// RemoveUnit ( IsInUnit ( i ) ) ;
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 310
38509: PPUSH
38510: CALL_OW 64
// RemoveUnit ( i ) ;
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 64
// tmp := tmp diff i ;
38523: LD_ADDR_VAR 0 2
38527: PUSH
38528: LD_VAR 0 2
38532: PUSH
38533: LD_VAR 0 1
38537: DIFF
38538: ST_TO_ADDR
// end ;
38539: GO 38486
38541: POP
38542: POP
// until tmp = [ ] ;
38543: LD_VAR 0 2
38547: PUSH
38548: EMPTY
38549: EQUAL
38550: IFFALSE 38397
// end ;
38552: PPOPN 3
38554: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
38555: LD_EXP 7
38559: IFFALSE 38849
38561: GO 38563
38563: DISABLE
38564: LD_INT 0
38566: PPUSH
38567: PPUSH
38568: PPUSH
// begin uc_side := 2 ;
38569: LD_ADDR_OWVAR 20
38573: PUSH
38574: LD_INT 2
38576: ST_TO_ADDR
// uc_nation := 2 ;
38577: LD_ADDR_OWVAR 21
38581: PUSH
38582: LD_INT 2
38584: ST_TO_ADDR
// InitHc ;
38585: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
38589: LD_INT 1
38591: PPUSH
38592: LD_INT 1
38594: PPUSH
38595: LD_INT 6
38597: PPUSH
38598: CALL_OW 380
// un := CreateHuman ;
38602: LD_ADDR_VAR 0 2
38606: PUSH
38607: CALL_OW 44
38611: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
38612: LD_INT 14
38614: PPUSH
38615: LD_INT 1
38617: PPUSH
38618: LD_INT 1
38620: PPUSH
38621: LD_INT 27
38623: PPUSH
38624: LD_INT 98
38626: PPUSH
38627: CALL 1970 0 5
// veh := CreateVehicle ;
38631: LD_ADDR_VAR 0 3
38635: PUSH
38636: CALL_OW 45
38640: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
38641: LD_VAR 0 3
38645: PPUSH
38646: LD_INT 4
38648: PPUSH
38649: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
38653: LD_VAR 0 3
38657: PPUSH
38658: LD_INT 179
38660: PPUSH
38661: LD_INT 135
38663: PPUSH
38664: LD_INT 0
38666: PPUSH
38667: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
38671: LD_VAR 0 2
38675: PPUSH
38676: LD_VAR 0 3
38680: PPUSH
38681: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
38685: LD_VAR 0 2
38689: PPUSH
38690: LD_INT 126
38692: PPUSH
38693: LD_INT 133
38695: PPUSH
38696: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
38700: LD_INT 10
38702: PPUSH
38703: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
38707: LD_INT 1
38709: PPUSH
38710: LD_VAR 0 3
38714: PPUSH
38715: CALL_OW 292
38719: PUSH
38720: LD_VAR 0 3
38724: PPUSH
38725: LD_INT 7
38727: PPUSH
38728: CALL_OW 296
38732: PUSH
38733: LD_INT 9
38735: LESS
38736: OR
38737: IFFALSE 38700
// ComHold ( veh ) ;
38739: LD_VAR 0 3
38743: PPUSH
38744: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
38748: LD_VAR 0 2
38752: PPUSH
38753: LD_STRING D2aa-Ar1-1
38755: PPUSH
38756: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
38760: LD_VAR 0 2
38764: PPUSH
38765: LD_INT 177
38767: PPUSH
38768: LD_INT 96
38770: PPUSH
38771: CALL_OW 111
// AddComExitVehicle ( un ) ;
38775: LD_VAR 0 2
38779: PPUSH
38780: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
38784: LD_INT 35
38786: PPUSH
38787: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
38791: LD_VAR 0 2
38795: PPUSH
38796: LD_INT 69
38798: PPUSH
38799: CALL_OW 296
38803: PUSH
38804: LD_INT 15
38806: LESS
38807: IFFALSE 38784
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
38809: LD_ADDR_EXP 44
38813: PUSH
38814: LD_EXP 44
38818: PPUSH
38819: LD_INT 3
38821: PUSH
38822: LD_EXP 44
38826: PUSH
38827: LD_INT 3
38829: ARRAY
38830: PUSH
38831: LD_INT 1
38833: PLUS
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PPUSH
38839: LD_VAR 0 2
38843: PPUSH
38844: CALL 3142 0 3
38848: ST_TO_ADDR
// end ;
38849: PPOPN 3
38851: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
38852: LD_INT 7
38854: PPUSH
38855: CALL_OW 255
38859: PUSH
38860: LD_INT 1
38862: EQUAL
38863: PUSH
38864: LD_INT 7
38866: PPUSH
38867: CALL_OW 301
38871: OR
38872: IFFALSE 41239
38874: GO 38876
38876: DISABLE
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
38881: LD_ADDR_VAR 0 2
38885: PUSH
38886: LD_INT 46
38888: PUSH
38889: LD_INT 41
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 50
38898: PUSH
38899: LD_INT 25
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 57
38908: PUSH
38909: LD_INT 75
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 75
38918: PUSH
38919: LD_INT 89
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 51
38928: PUSH
38929: LD_INT 45
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 95
38938: PUSH
38939: LD_INT 95
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 84
38948: PUSH
38949: LD_INT 77
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 101
38958: PUSH
38959: LD_INT 76
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 118
38968: PUSH
38969: LD_INT 81
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 139
38978: PUSH
38979: LD_INT 97
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 129
38988: PUSH
38989: LD_INT 114
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 154
38998: PUSH
38999: LD_INT 111
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: ST_TO_ADDR
// base_captured := true ;
39020: LD_ADDR_EXP 6
39024: PUSH
39025: LD_INT 1
39027: ST_TO_ADDR
// DialogueOn ;
39028: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39032: LD_EXP 17
39036: PPUSH
39037: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
39041: LD_EXP 17
39045: PPUSH
39046: LD_STRING D2-JMM-1
39048: PPUSH
39049: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
39053: LD_EXP 26
39057: PPUSH
39058: LD_STRING D2-Pow-1
39060: PPUSH
39061: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
39065: LD_EXP 17
39069: PPUSH
39070: LD_STRING D2-JMM-2
39072: PPUSH
39073: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
39077: LD_EXP 26
39081: PPUSH
39082: LD_STRING D2-Pow-2
39084: PPUSH
39085: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
39089: LD_EXP 17
39093: PPUSH
39094: LD_STRING D2-JMM-3
39096: PPUSH
39097: CALL_OW 88
// DialogueOff ;
39101: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
39105: LD_STRING M2
39107: PPUSH
39108: CALL_OW 337
// Wait ( 0 0$2 ) ;
39112: LD_INT 70
39114: PPUSH
39115: CALL_OW 67
// if IsOk ( Gary ) then
39119: LD_EXP 28
39123: PPUSH
39124: CALL_OW 302
39128: IFFALSE 39142
// Say ( Gary , D2a-Gary-1 ) ;
39130: LD_EXP 28
39134: PPUSH
39135: LD_STRING D2a-Gary-1
39137: PPUSH
39138: CALL_OW 88
// if IsOk ( Bobby ) then
39142: LD_EXP 20
39146: PPUSH
39147: CALL_OW 302
39151: IFFALSE 39165
// Say ( Bobby , D2a-Bobby-1 ) ;
39153: LD_EXP 20
39157: PPUSH
39158: LD_STRING D2a-Bobby-1
39160: PPUSH
39161: CALL_OW 88
// if IsOk ( Cyrus ) then
39165: LD_EXP 21
39169: PPUSH
39170: CALL_OW 302
39174: IFFALSE 39188
// Say ( Cyrus , D2a-Cyrus-1 ) ;
39176: LD_EXP 21
39180: PPUSH
39181: LD_STRING D2a-Cyrus-1
39183: PPUSH
39184: CALL_OW 88
// if IsOk ( Lisa ) then
39188: LD_EXP 18
39192: PPUSH
39193: CALL_OW 302
39197: IFFALSE 39211
// Say ( Lisa , D2a-Lisa-1 ) ;
39199: LD_EXP 18
39203: PPUSH
39204: LD_STRING D2a-Lisa-1
39206: PPUSH
39207: CALL_OW 88
// if IsOk ( Frank ) then
39211: LD_EXP 29
39215: PPUSH
39216: CALL_OW 302
39220: IFFALSE 39234
// Say ( Frank , D2a-Frank-1 ) ;
39222: LD_EXP 29
39226: PPUSH
39227: LD_STRING D2a-Frank-1
39229: PPUSH
39230: CALL_OW 88
// if IsOk ( Cornel ) then
39234: LD_EXP 27
39238: PPUSH
39239: CALL_OW 302
39243: IFFALSE 39257
// Say ( Cornel , D2a-Corn-1 ) ;
39245: LD_EXP 27
39249: PPUSH
39250: LD_STRING D2a-Corn-1
39252: PPUSH
39253: CALL_OW 88
// if IsOk ( Donaldson ) then
39257: LD_EXP 19
39261: PPUSH
39262: CALL_OW 302
39266: IFFALSE 39280
// Say ( Donaldson , D2a-Don-1 ) ;
39268: LD_EXP 19
39272: PPUSH
39273: LD_STRING D2a-Don-1
39275: PPUSH
39276: CALL_OW 88
// if IsOk ( Brown ) then
39280: LD_EXP 23
39284: PPUSH
39285: CALL_OW 302
39289: IFFALSE 39303
// Say ( Brown , D2a-Brown-1 ) ;
39291: LD_EXP 23
39295: PPUSH
39296: LD_STRING D2a-Brown-1
39298: PPUSH
39299: CALL_OW 88
// Wait ( 0 0$30 ) ;
39303: LD_INT 1050
39305: PPUSH
39306: CALL_OW 67
// if IsOk ( Frank ) then
39310: LD_EXP 29
39314: PPUSH
39315: CALL_OW 302
39319: IFFALSE 39585
// begin DialogueOn ;
39321: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
39325: LD_EXP 17
39329: PUSH
39330: LD_EXP 29
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PPUSH
39339: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
39343: LD_EXP 29
39347: PPUSH
39348: LD_STRING D3F-Frank-1
39350: PPUSH
39351: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
39355: LD_EXP 17
39359: PPUSH
39360: LD_STRING D3F-JMM-1
39362: PPUSH
39363: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
39367: LD_EXP 29
39371: PPUSH
39372: LD_STRING D3F-Frank-2
39374: PPUSH
39375: CALL_OW 88
// case Query ( QFrank ) of 1 :
39379: LD_STRING QFrank
39381: PPUSH
39382: CALL_OW 97
39386: PUSH
39387: LD_INT 1
39389: DOUBLE
39390: EQUAL
39391: IFTRUE 39395
39393: GO 39418
39395: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
39396: LD_EXP 17
39400: PPUSH
39401: LD_STRING D3Fa-JMM-1
39403: PPUSH
39404: CALL_OW 88
// us_scout := 1 ;
39408: LD_ADDR_EXP 8
39412: PUSH
39413: LD_INT 1
39415: ST_TO_ADDR
// end ; 2 :
39416: GO 39581
39418: LD_INT 2
39420: DOUBLE
39421: EQUAL
39422: IFTRUE 39426
39424: GO 39548
39426: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
39427: LD_EXP 17
39431: PPUSH
39432: LD_STRING D3Fb-JMM-1
39434: PPUSH
39435: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
39439: LD_EXP 29
39443: PPUSH
39444: LD_STRING D3Fb-Frank-1
39446: PPUSH
39447: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
39451: LD_STRING QFrank2
39453: PPUSH
39454: CALL_OW 97
39458: PUSH
39459: LD_INT 1
39461: DOUBLE
39462: EQUAL
39463: IFTRUE 39467
39465: GO 39514
39467: POP
// begin us_scout := 2 ;
39468: LD_ADDR_EXP 8
39472: PUSH
39473: LD_INT 2
39475: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
39476: LD_EXP 17
39480: PPUSH
39481: LD_STRING D3Fba-JMM-1
39483: PPUSH
39484: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
39488: LD_EXP 29
39492: PPUSH
39493: LD_STRING D3Fba-Frank-1
39495: PPUSH
39496: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
39500: LD_EXP 17
39504: PPUSH
39505: LD_STRING D3Fba-JMM-2
39507: PPUSH
39508: CALL_OW 88
// end ; 2 :
39512: GO 39546
39514: LD_INT 2
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39545
39522: POP
// begin us_scout := 0 ;
39523: LD_ADDR_EXP 8
39527: PUSH
39528: LD_INT 0
39530: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
39531: LD_EXP 17
39535: PPUSH
39536: LD_STRING D3Fbb-JMM-1
39538: PPUSH
39539: CALL_OW 88
// end ; end ;
39543: GO 39546
39545: POP
// end ; 3 :
39546: GO 39581
39548: LD_INT 3
39550: DOUBLE
39551: EQUAL
39552: IFTRUE 39556
39554: GO 39580
39556: POP
// begin us_scout := - 1 ;
39557: LD_ADDR_EXP 8
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
39566: LD_EXP 17
39570: PPUSH
39571: LD_STRING D3Fc-JMM-1
39573: PPUSH
39574: CALL_OW 88
// end ; end ;
39578: GO 39581
39580: POP
// DialogueOff ;
39581: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
39585: LD_EXP 8
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: IN
39601: IFFALSE 39605
// exit ;
39603: GO 41239
// if us_scout in [ 1 , 2 ] then
39605: LD_EXP 8
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: IN
39620: IFFALSE 40321
// begin if IsInUnit ( Frank ) then
39622: LD_EXP 29
39626: PPUSH
39627: CALL_OW 310
39631: IFFALSE 39642
// ComExitBuilding ( Frank ) ;
39633: LD_EXP 29
39637: PPUSH
39638: CALL_OW 122
// if IsDrivenBy ( Frank ) then
39642: LD_EXP 29
39646: PPUSH
39647: CALL_OW 311
39651: IFFALSE 39662
// ComExitVehicle ( Frank ) ;
39653: LD_EXP 29
39657: PPUSH
39658: CALL_OW 121
// SetSide ( Frank , 4 ) ;
39662: LD_EXP 29
39666: PPUSH
39667: LD_INT 4
39669: PPUSH
39670: CALL_OW 235
// wait ( 0 0$1 ) ;
39674: LD_INT 35
39676: PPUSH
39677: CALL_OW 67
// if us_scout = 2 then
39681: LD_EXP 8
39685: PUSH
39686: LD_INT 2
39688: EQUAL
39689: IFFALSE 40057
// begin ComMoveXY ( Frank , 75 , 63 ) ;
39691: LD_EXP 29
39695: PPUSH
39696: LD_INT 75
39698: PPUSH
39699: LD_INT 63
39701: PPUSH
39702: CALL_OW 111
// AddComHold ( Frank ) ;
39706: LD_EXP 29
39710: PPUSH
39711: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
39715: LD_EXP 29
39719: PPUSH
39720: LD_INT 770
39722: PPUSH
39723: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
39727: LD_EXP 29
39731: PPUSH
39732: LD_INT 100
39734: PPUSH
39735: LD_INT 75
39737: PPUSH
39738: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
39742: LD_EXP 29
39746: PPUSH
39747: LD_INT 123
39749: PPUSH
39750: LD_INT 103
39752: PPUSH
39753: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
39757: LD_EXP 29
39761: PPUSH
39762: LD_INT 138
39764: PPUSH
39765: LD_INT 108
39767: PPUSH
39768: CALL_OW 171
// AddComHold ( Frank ) ;
39772: LD_EXP 29
39776: PPUSH
39777: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
39781: LD_INT 35
39783: PPUSH
39784: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
39788: LD_EXP 29
39792: PPUSH
39793: LD_INT 138
39795: PPUSH
39796: LD_INT 108
39798: PPUSH
39799: CALL_OW 307
39803: IFFALSE 39781
// AddComMoveXY ( Frank , 125 , 132 ) ;
39805: LD_EXP 29
39809: PPUSH
39810: LD_INT 125
39812: PPUSH
39813: LD_INT 132
39815: PPUSH
39816: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
39820: LD_INT 35
39822: PPUSH
39823: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
39827: LD_INT 1
39829: PPUSH
39830: LD_EXP 29
39834: PPUSH
39835: CALL_OW 292
39839: PUSH
39840: LD_EXP 29
39844: PPUSH
39845: LD_INT 7
39847: PPUSH
39848: CALL_OW 296
39852: PUSH
39853: LD_INT 7
39855: LESS
39856: OR
39857: IFFALSE 39820
// DialogueOn ;
39859: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
39863: LD_EXP 29
39867: PPUSH
39868: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39872: LD_INT 10
39874: PPUSH
39875: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
39879: LD_EXP 17
39883: PPUSH
39884: LD_STRING D4Fa-JMM-1
39886: PPUSH
39887: CALL_OW 88
// for i in points do
39891: LD_ADDR_VAR 0 1
39895: PUSH
39896: LD_VAR 0 2
39900: PUSH
39901: FOR_IN
39902: IFFALSE 39960
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
39904: LD_VAR 0 1
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: PPUSH
39913: LD_VAR 0 1
39917: PUSH
39918: LD_INT 2
39920: ARRAY
39921: PPUSH
39922: LD_INT 1
39924: PPUSH
39925: LD_INT 20
39927: NEG
39928: PPUSH
39929: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
39933: LD_VAR 0 1
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PPUSH
39942: LD_VAR 0 1
39946: PUSH
39947: LD_INT 2
39949: ARRAY
39950: PPUSH
39951: LD_INT 1
39953: PPUSH
39954: CALL_OW 331
// end ;
39958: GO 39901
39960: POP
39961: POP
// dwait ( 0 0$0.5 ) ;
39962: LD_INT 18
39964: PPUSH
39965: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
39969: LD_INT 42
39971: PPUSH
39972: LD_INT 27
39974: PPUSH
39975: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
39979: LD_EXP 29
39983: PPUSH
39984: LD_STRING D4Fa-Frank-1
39986: PPUSH
39987: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
39991: LD_INT 18
39993: PPUSH
39994: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
39998: LD_EXP 17
40002: PPUSH
40003: LD_STRING D4Fa-JMM-2
40005: PPUSH
40006: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
40010: LD_INT 118
40012: PPUSH
40013: LD_INT 80
40015: PPUSH
40016: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
40020: LD_EXP 29
40024: PPUSH
40025: LD_STRING D4Fa-Frank-2
40027: PPUSH
40028: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
40032: LD_INT 10
40034: PPUSH
40035: CALL_OW 68
// DialogueOff ;
40039: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40043: LD_EXP 29
40047: PPUSH
40048: LD_INT 1
40050: PPUSH
40051: CALL_OW 235
// end else
40055: GO 40319
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
40057: LD_INT 2
40059: PPUSH
40060: LD_INT 4
40062: PPUSH
40063: LD_INT 2
40065: PPUSH
40066: LD_INT 1
40068: PPUSH
40069: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
40073: LD_EXP 29
40077: PPUSH
40078: LD_INT 75
40080: PPUSH
40081: LD_INT 63
40083: PPUSH
40084: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
40088: LD_EXP 29
40092: PPUSH
40093: LD_INT 175
40095: PPUSH
40096: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
40100: LD_EXP 29
40104: PPUSH
40105: LD_INT 102
40107: PPUSH
40108: LD_INT 76
40110: PPUSH
40111: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
40115: LD_EXP 29
40119: PPUSH
40120: LD_INT 108
40122: PPUSH
40123: LD_INT 70
40125: PPUSH
40126: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40130: LD_INT 35
40132: PPUSH
40133: CALL_OW 67
// until See ( 2 , Frank ) ;
40137: LD_INT 2
40139: PPUSH
40140: LD_EXP 29
40144: PPUSH
40145: CALL_OW 292
40149: IFFALSE 40130
// ComMoveXY ( Frank , 112 , 118 ) ;
40151: LD_EXP 29
40155: PPUSH
40156: LD_INT 112
40158: PPUSH
40159: LD_INT 118
40161: PPUSH
40162: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
40166: LD_EXP 29
40170: PPUSH
40171: CALL_OW 256
40175: PUSH
40176: LD_INT 750
40178: GREATEREQUAL
40179: IFFALSE 40193
// SetLives ( Frank , 700 ) ;
40181: LD_EXP 29
40185: PPUSH
40186: LD_INT 700
40188: PPUSH
40189: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
40193: LD_INT 35
40195: PPUSH
40196: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
40200: LD_INT 1
40202: PPUSH
40203: LD_EXP 29
40207: PPUSH
40208: CALL_OW 292
40212: PUSH
40213: LD_EXP 29
40217: PPUSH
40218: LD_INT 7
40220: PPUSH
40221: CALL_OW 296
40225: PUSH
40226: LD_INT 17
40228: LESS
40229: OR
40230: IFFALSE 40193
// DialogueOn ;
40232: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
40236: LD_EXP 29
40240: PPUSH
40241: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
40245: LD_EXP 29
40249: PPUSH
40250: LD_STRING D4Fb-Frank-1
40252: PPUSH
40253: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
40257: LD_EXP 17
40261: PPUSH
40262: LD_STRING D4Fb-JMM-1
40264: PPUSH
40265: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
40269: LD_INT 2
40271: PPUSH
40272: LD_STRING D4Fb-FSci1-1
40274: PPUSH
40275: CALL 2199 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
40279: LD_EXP 29
40283: PPUSH
40284: LD_STRING D4Fb-Frank-2
40286: PPUSH
40287: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
40291: LD_EXP 17
40295: PPUSH
40296: LD_STRING D4Fb-JMM-2
40298: PPUSH
40299: CALL_OW 88
// DialogueOff ;
40303: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40307: LD_EXP 29
40311: PPUSH
40312: LD_INT 1
40314: PPUSH
40315: CALL_OW 235
// end ; end else
40319: GO 40478
// if IsOk ( Kikuchi ) then
40321: LD_EXP 30
40325: PPUSH
40326: CALL_OW 302
40330: IFFALSE 40478
// begin DialogueOn ;
40332: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
40336: LD_EXP 17
40340: PUSH
40341: LD_EXP 30
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PPUSH
40350: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
40354: LD_EXP 30
40358: PPUSH
40359: LD_STRING D3Y-Yam-1
40361: PPUSH
40362: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
40366: LD_EXP 17
40370: PPUSH
40371: LD_STRING D3Y-JMM-1
40373: PPUSH
40374: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
40378: LD_EXP 30
40382: PPUSH
40383: LD_STRING D3Y-Yam-2
40385: PPUSH
40386: CALL_OW 88
// case Query ( QYamoko ) of 1 :
40390: LD_STRING QYamoko
40392: PPUSH
40393: CALL_OW 97
40397: PUSH
40398: LD_INT 1
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40441
40406: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
40407: LD_EXP 17
40411: PPUSH
40412: LD_STRING D3Ya-JMM-1
40414: PPUSH
40415: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
40419: LD_EXP 30
40423: PPUSH
40424: LD_STRING D3Ya-Yam-1
40426: PPUSH
40427: CALL_OW 88
// us_scout := 1 ;
40431: LD_ADDR_EXP 8
40435: PUSH
40436: LD_INT 1
40438: ST_TO_ADDR
// end ; 2 :
40439: GO 40474
40441: LD_INT 2
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40473
40449: POP
// begin us_scout := - 1 ;
40450: LD_ADDR_EXP 8
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
40459: LD_EXP 17
40463: PPUSH
40464: LD_STRING D3Yb-JMM-1
40466: PPUSH
40467: CALL_OW 88
// end ; end ;
40471: GO 40474
40473: POP
// DialogueOff ;
40474: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
40478: LD_EXP 8
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: IN
40494: IFFALSE 40498
// exit ;
40496: GO 41239
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
40498: LD_ADDR_EXP 8
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: PUSH
40517: LD_OWVAR 67
40521: ARRAY
40522: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
40523: LD_EXP 8
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: IN
40538: IFFALSE 41239
// begin if IsInUnit ( Kikuchi ) then
40540: LD_EXP 30
40544: PPUSH
40545: CALL_OW 310
40549: IFFALSE 40560
// ComExitBuilding ( Kikuchi ) ;
40551: LD_EXP 30
40555: PPUSH
40556: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
40560: LD_EXP 30
40564: PPUSH
40565: CALL_OW 311
40569: IFFALSE 40580
// ComExitVehicle ( Kikuchi ) ;
40571: LD_EXP 30
40575: PPUSH
40576: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
40580: LD_EXP 30
40584: PPUSH
40585: LD_INT 4
40587: PPUSH
40588: CALL_OW 235
// wait ( 0 0$1 ) ;
40592: LD_INT 35
40594: PPUSH
40595: CALL_OW 67
// if us_scout = 2 then
40599: LD_EXP 8
40603: PUSH
40604: LD_INT 2
40606: EQUAL
40607: IFFALSE 40987
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
40609: LD_EXP 30
40613: PPUSH
40614: LD_INT 75
40616: PPUSH
40617: LD_INT 63
40619: PPUSH
40620: CALL_OW 111
// AddComHold ( Kikuchi ) ;
40624: LD_EXP 30
40628: PPUSH
40629: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
40633: LD_EXP 30
40637: PPUSH
40638: LD_INT 770
40640: PPUSH
40641: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
40645: LD_EXP 30
40649: PPUSH
40650: LD_INT 100
40652: PPUSH
40653: LD_INT 75
40655: PPUSH
40656: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
40660: LD_EXP 30
40664: PPUSH
40665: LD_INT 123
40667: PPUSH
40668: LD_INT 103
40670: PPUSH
40671: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
40675: LD_EXP 30
40679: PPUSH
40680: LD_INT 138
40682: PPUSH
40683: LD_INT 108
40685: PPUSH
40686: CALL_OW 171
// AddComHold ( Kikuchi ) ;
40690: LD_EXP 30
40694: PPUSH
40695: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
40699: LD_INT 35
40701: PPUSH
40702: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
40706: LD_EXP 30
40710: PPUSH
40711: LD_INT 138
40713: PPUSH
40714: LD_INT 108
40716: PPUSH
40717: CALL_OW 307
40721: IFFALSE 40699
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
40723: LD_EXP 30
40727: PPUSH
40728: LD_INT 125
40730: PPUSH
40731: LD_INT 132
40733: PPUSH
40734: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40738: LD_INT 35
40740: PPUSH
40741: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
40745: LD_INT 1
40747: PPUSH
40748: LD_EXP 30
40752: PPUSH
40753: CALL_OW 292
40757: PUSH
40758: LD_EXP 30
40762: PPUSH
40763: LD_INT 7
40765: PPUSH
40766: CALL_OW 296
40770: PUSH
40771: LD_INT 7
40773: LESS
40774: OR
40775: IFFALSE 40738
// DialogueOn ;
40777: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
40781: LD_EXP 30
40785: PPUSH
40786: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
40790: LD_INT 10
40792: PPUSH
40793: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
40797: LD_EXP 30
40801: PPUSH
40802: LD_STRING D4Ya-Yam-1
40804: PPUSH
40805: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
40809: LD_EXP 17
40813: PPUSH
40814: LD_STRING D4Ya-JMM-1
40816: PPUSH
40817: CALL_OW 88
// for i in points do
40821: LD_ADDR_VAR 0 1
40825: PUSH
40826: LD_VAR 0 2
40830: PUSH
40831: FOR_IN
40832: IFFALSE 40890
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
40834: LD_VAR 0 1
40838: PUSH
40839: LD_INT 1
40841: ARRAY
40842: PPUSH
40843: LD_VAR 0 1
40847: PUSH
40848: LD_INT 2
40850: ARRAY
40851: PPUSH
40852: LD_INT 1
40854: PPUSH
40855: LD_INT 20
40857: NEG
40858: PPUSH
40859: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
40863: LD_VAR 0 1
40867: PUSH
40868: LD_INT 1
40870: ARRAY
40871: PPUSH
40872: LD_VAR 0 1
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: PPUSH
40881: LD_INT 1
40883: PPUSH
40884: CALL_OW 331
// end ;
40888: GO 40831
40890: POP
40891: POP
// dwait ( 0 0$0.5 ) ;
40892: LD_INT 18
40894: PPUSH
40895: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
40899: LD_INT 42
40901: PPUSH
40902: LD_INT 27
40904: PPUSH
40905: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
40909: LD_EXP 30
40913: PPUSH
40914: LD_STRING D4Ya-Yam-2
40916: PPUSH
40917: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
40921: LD_INT 18
40923: PPUSH
40924: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
40928: LD_INT 118
40930: PPUSH
40931: LD_INT 80
40933: PPUSH
40934: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
40938: LD_EXP 17
40942: PPUSH
40943: LD_STRING D4Ya-JMM-2
40945: PPUSH
40946: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
40950: LD_EXP 30
40954: PPUSH
40955: LD_STRING D4Ya-Yam-3
40957: PPUSH
40958: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
40962: LD_INT 10
40964: PPUSH
40965: CALL_OW 68
// DialogueOff ;
40969: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
40973: LD_EXP 30
40977: PPUSH
40978: LD_INT 1
40980: PPUSH
40981: CALL_OW 235
// end else
40985: GO 41239
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
40987: LD_INT 2
40989: PPUSH
40990: LD_INT 4
40992: PPUSH
40993: LD_INT 2
40995: PPUSH
40996: LD_INT 1
40998: PPUSH
40999: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
41003: LD_EXP 30
41007: PPUSH
41008: LD_INT 75
41010: PPUSH
41011: LD_INT 63
41013: PPUSH
41014: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
41018: LD_EXP 30
41022: PPUSH
41023: LD_INT 175
41025: PPUSH
41026: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
41030: LD_EXP 30
41034: PPUSH
41035: LD_INT 102
41037: PPUSH
41038: LD_INT 76
41040: PPUSH
41041: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
41045: LD_EXP 30
41049: PPUSH
41050: LD_INT 108
41052: PPUSH
41053: LD_INT 70
41055: PPUSH
41056: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41060: LD_INT 35
41062: PPUSH
41063: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
41067: LD_INT 2
41069: PPUSH
41070: LD_EXP 30
41074: PPUSH
41075: CALL_OW 292
41079: IFFALSE 41060
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
41081: LD_EXP 30
41085: PPUSH
41086: LD_INT 112
41088: PPUSH
41089: LD_INT 118
41091: PPUSH
41092: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
41096: LD_EXP 30
41100: PPUSH
41101: CALL_OW 256
41105: PUSH
41106: LD_INT 750
41108: GREATEREQUAL
41109: IFFALSE 41123
// SetLives ( Kikuchi , 700 ) ;
41111: LD_EXP 30
41115: PPUSH
41116: LD_INT 700
41118: PPUSH
41119: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41123: LD_INT 35
41125: PPUSH
41126: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
41130: LD_INT 1
41132: PPUSH
41133: LD_EXP 30
41137: PPUSH
41138: CALL_OW 292
41142: PUSH
41143: LD_EXP 30
41147: PPUSH
41148: LD_INT 7
41150: PPUSH
41151: CALL_OW 296
41155: PUSH
41156: LD_INT 17
41158: LESS
41159: OR
41160: IFFALSE 41123
// DialogueOn ;
41162: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
41166: LD_EXP 30
41170: PPUSH
41171: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
41175: LD_EXP 30
41179: PPUSH
41180: LD_STRING D4Yb-Yam-1
41182: PPUSH
41183: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
41187: LD_EXP 17
41191: PPUSH
41192: LD_STRING D4Yb-JMM-1
41194: PPUSH
41195: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
41199: LD_EXP 30
41203: PPUSH
41204: LD_STRING D4Yb-Yam-2
41206: PPUSH
41207: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
41211: LD_EXP 17
41215: PPUSH
41216: LD_STRING D4Yb-JMM-2
41218: PPUSH
41219: CALL_OW 88
// DialogueOff ;
41223: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41227: LD_EXP 30
41231: PPUSH
41232: LD_INT 1
41234: PPUSH
41235: CALL_OW 235
// end ; end ; end ;
41239: PPOPN 2
41241: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
41242: LD_EXP 6
41246: IFFALSE 42271
41248: GO 41250
41250: DISABLE
41251: LD_INT 0
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
// begin enable ;
41257: ENABLE
// if not seen [ 1 ] then
41258: LD_EXP 9
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: NOT
41267: IFFALSE 41447
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
41269: LD_ADDR_VAR 0 2
41273: PUSH
41274: LD_INT 22
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 25
41289: PUSH
41290: LD_INT 11
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 33
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 69
41320: ST_TO_ADDR
// if tmp then
41321: LD_VAR 0 2
41325: IFFALSE 41447
// for i in tmp do
41327: LD_ADDR_VAR 0 1
41331: PUSH
41332: LD_VAR 0 2
41336: PUSH
41337: FOR_IN
41338: IFFALSE 41445
// if See ( 1 , i ) then
41340: LD_INT 1
41342: PPUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 292
41352: IFFALSE 41443
// begin seen := Replace ( seen , 1 , true ) ;
41354: LD_ADDR_EXP 9
41358: PUSH
41359: LD_EXP 9
41363: PPUSH
41364: LD_INT 1
41366: PPUSH
41367: LD_INT 1
41369: PPUSH
41370: CALL_OW 1
41374: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41375: LD_INT 1
41377: PPUSH
41378: CALL 2028 0 1
41382: IFFALSE 41443
// begin DialogueOn ;
41384: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41397: LD_INT 10
41399: PPUSH
41400: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 1
41411: PPUSH
41412: LD_STRING D5a-Sol2-1
41414: PPUSH
41415: CALL 2199 0 2
41419: ST_TO_ADDR
// if not un then
41420: LD_VAR 0 3
41424: NOT
41425: IFFALSE 41437
// SayRand ( sex_female , D5a-FSol2-1 ) ;
41427: LD_INT 2
41429: PPUSH
41430: LD_STRING D5a-FSol2-1
41432: PPUSH
41433: CALL 2199 0 2
// DialogueOff ;
41437: CALL_OW 7
// break ;
41441: GO 41445
// end ; end ;
41443: GO 41337
41445: POP
41446: POP
// end ; if not seen [ 2 ] then
41447: LD_EXP 9
41451: PUSH
41452: LD_INT 2
41454: ARRAY
41455: NOT
41456: IFFALSE 41673
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
41458: LD_ADDR_VAR 0 2
41462: PUSH
41463: LD_INT 22
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 25
41475: PUSH
41476: LD_INT 17
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PPUSH
41487: CALL_OW 69
41491: ST_TO_ADDR
// if tmp then
41492: LD_VAR 0 2
41496: IFFALSE 41673
// for i in tmp do
41498: LD_ADDR_VAR 0 1
41502: PUSH
41503: LD_VAR 0 2
41507: PUSH
41508: FOR_IN
41509: IFFALSE 41671
// if See ( 1 , i ) then
41511: LD_INT 1
41513: PPUSH
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 292
41523: IFFALSE 41669
// begin seen := Replace ( seen , 2 , true ) ;
41525: LD_ADDR_EXP 9
41529: PUSH
41530: LD_EXP 9
41534: PPUSH
41535: LD_INT 2
41537: PPUSH
41538: LD_INT 1
41540: PPUSH
41541: CALL_OW 1
41545: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41546: LD_INT 1
41548: PPUSH
41549: CALL 2028 0 1
41553: IFFALSE 41669
// begin DialogueOn ;
41555: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41568: LD_INT 10
41570: PPUSH
41571: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_INT 1
41582: PPUSH
41583: LD_STRING D5b-Sol1-1
41585: PPUSH
41586: CALL 2199 0 2
41590: ST_TO_ADDR
// if not un then
41591: LD_VAR 0 3
41595: NOT
41596: IFFALSE 41614
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_INT 2
41605: PPUSH
41606: LD_STRING D5b-FSol1-1
41608: PPUSH
41609: CALL 2199 0 2
41613: ST_TO_ADDR
// if un then
41614: LD_VAR 0 3
41618: IFFALSE 41663
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
41620: LD_ADDR_VAR 0 4
41624: PUSH
41625: LD_INT 1
41627: PPUSH
41628: LD_STRING D5b-Sol2-1
41630: PPUSH
41631: LD_VAR 0 3
41635: PPUSH
41636: CALL 2418 0 3
41640: ST_TO_ADDR
// if not un2 then
41641: LD_VAR 0 4
41645: NOT
41646: IFFALSE 41663
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
41648: LD_INT 2
41650: PPUSH
41651: LD_STRING D5b-FSol2-1
41653: PPUSH
41654: LD_VAR 0 3
41658: PPUSH
41659: CALL 2418 0 3
// end ; DialogueOff ;
41663: CALL_OW 7
// break ;
41667: GO 41671
// end ; end ;
41669: GO 41508
41671: POP
41672: POP
// end ; if not seen [ 3 ] then
41673: LD_EXP 9
41677: PUSH
41678: LD_INT 3
41680: ARRAY
41681: NOT
41682: IFFALSE 41856
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: LD_INT 22
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 33
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 69
41717: ST_TO_ADDR
// if tmp then
41718: LD_VAR 0 2
41722: IFFALSE 41856
// for i in tmp do
41724: LD_ADDR_VAR 0 1
41728: PUSH
41729: LD_VAR 0 2
41733: PUSH
41734: FOR_IN
41735: IFFALSE 41854
// if See ( 1 , i ) then
41737: LD_INT 1
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 292
41749: IFFALSE 41852
// begin seen := Replace ( seen , 3 , true ) ;
41751: LD_ADDR_EXP 9
41755: PUSH
41756: LD_EXP 9
41760: PPUSH
41761: LD_INT 3
41763: PPUSH
41764: LD_INT 1
41766: PPUSH
41767: CALL_OW 1
41771: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41772: LD_INT 1
41774: PPUSH
41775: CALL 2028 0 1
41779: IFFALSE 41852
// begin DialogueOn ;
41781: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41794: LD_INT 10
41796: PPUSH
41797: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
41801: LD_ADDR_VAR 0 3
41805: PUSH
41806: LD_INT 1
41808: PPUSH
41809: LD_STRING D8-Sol1-1
41811: PPUSH
41812: CALL 2199 0 2
41816: ST_TO_ADDR
// if not un then
41817: LD_VAR 0 3
41821: NOT
41822: IFFALSE 41834
// SayRand ( sex_female , D8-FSol1-1 ) ;
41824: LD_INT 2
41826: PPUSH
41827: LD_STRING D8-FSol1-1
41829: PPUSH
41830: CALL 2199 0 2
// Say ( JMM , D8-JMM-1 ) ;
41834: LD_EXP 17
41838: PPUSH
41839: LD_STRING D8-JMM-1
41841: PPUSH
41842: CALL_OW 88
// DialogueOff ;
41846: CALL_OW 7
// break ;
41850: GO 41854
// end ; end ;
41852: GO 41734
41854: POP
41855: POP
// end ; if not seen [ 4 ] then
41856: LD_EXP 9
41860: PUSH
41861: LD_INT 4
41863: ARRAY
41864: NOT
41865: IFFALSE 42027
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
41867: LD_ADDR_VAR 0 2
41871: PUSH
41872: LD_INT 22
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 33
41884: PUSH
41885: LD_INT 5
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PPUSH
41896: CALL_OW 69
41900: ST_TO_ADDR
// if tmp then
41901: LD_VAR 0 2
41905: IFFALSE 42027
// for i in tmp do
41907: LD_ADDR_VAR 0 1
41911: PUSH
41912: LD_VAR 0 2
41916: PUSH
41917: FOR_IN
41918: IFFALSE 42025
// if See ( 1 , i ) then
41920: LD_INT 1
41922: PPUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 292
41932: IFFALSE 42023
// begin seen := Replace ( seen , 4 , true ) ;
41934: LD_ADDR_EXP 9
41938: PUSH
41939: LD_EXP 9
41943: PPUSH
41944: LD_INT 4
41946: PPUSH
41947: LD_INT 1
41949: PPUSH
41950: CALL_OW 1
41954: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41955: LD_INT 1
41957: PPUSH
41958: CALL 2028 0 1
41962: IFFALSE 42023
// begin DialogueOn ;
41964: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41977: LD_INT 10
41979: PPUSH
41980: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
41984: LD_ADDR_VAR 0 3
41988: PUSH
41989: LD_INT 1
41991: PPUSH
41992: LD_STRING D5a-Sol1-1
41994: PPUSH
41995: CALL 2199 0 2
41999: ST_TO_ADDR
// if not un then
42000: LD_VAR 0 3
42004: NOT
42005: IFFALSE 42017
// SayRand ( sex_female , D5a-FSol1-1 ) ;
42007: LD_INT 2
42009: PPUSH
42010: LD_STRING D5a-FSol1-1
42012: PPUSH
42013: CALL 2199 0 2
// DialogueOff ;
42017: CALL_OW 7
// break ;
42021: GO 42025
// end ; end ;
42023: GO 41917
42025: POP
42026: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
42027: LD_EXP 9
42031: PUSH
42032: LD_INT 5
42034: ARRAY
42035: NOT
42036: PUSH
42037: LD_EXP 9
42041: PUSH
42042: LD_INT 3
42044: ARRAY
42045: AND
42046: IFFALSE 42220
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
42048: LD_ADDR_VAR 0 2
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 34
42065: PUSH
42066: LD_INT 31
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PPUSH
42077: CALL_OW 69
42081: ST_TO_ADDR
// if tmp then
42082: LD_VAR 0 2
42086: IFFALSE 42220
// for i in tmp do
42088: LD_ADDR_VAR 0 1
42092: PUSH
42093: LD_VAR 0 2
42097: PUSH
42098: FOR_IN
42099: IFFALSE 42218
// if See ( 1 , i ) then
42101: LD_INT 1
42103: PPUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: CALL_OW 292
42113: IFFALSE 42216
// begin seen := Replace ( seen , 5 , true ) ;
42115: LD_ADDR_EXP 9
42119: PUSH
42120: LD_EXP 9
42124: PPUSH
42125: LD_INT 5
42127: PPUSH
42128: LD_INT 1
42130: PPUSH
42131: CALL_OW 1
42135: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42136: LD_INT 1
42138: PPUSH
42139: CALL 2028 0 1
42143: IFFALSE 42216
// begin DialogueOn ;
42145: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42149: LD_VAR 0 1
42153: PPUSH
42154: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42158: LD_INT 10
42160: PPUSH
42161: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 1
42172: PPUSH
42173: LD_STRING D8a-Sol2-1
42175: PPUSH
42176: CALL 2199 0 2
42180: ST_TO_ADDR
// if not un then
42181: LD_VAR 0 3
42185: NOT
42186: IFFALSE 42198
// SayRand ( sex_female , D8a-FSol2-1 ) ;
42188: LD_INT 2
42190: PPUSH
42191: LD_STRING D8a-FSol2-1
42193: PPUSH
42194: CALL 2199 0 2
// Say ( JMM , D8a-JMM-1 ) ;
42198: LD_EXP 17
42202: PPUSH
42203: LD_STRING D8a-JMM-1
42205: PPUSH
42206: CALL_OW 88
// DialogueOff ;
42210: CALL_OW 7
// break ;
42214: GO 42218
// end ; end ;
42216: GO 42098
42218: POP
42219: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
42220: LD_EXP 9
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: PUSH
42229: LD_EXP 9
42233: PUSH
42234: LD_INT 2
42236: ARRAY
42237: AND
42238: PUSH
42239: LD_EXP 9
42243: PUSH
42244: LD_INT 3
42246: ARRAY
42247: AND
42248: PUSH
42249: LD_EXP 9
42253: PUSH
42254: LD_INT 4
42256: ARRAY
42257: AND
42258: PUSH
42259: LD_EXP 9
42263: PUSH
42264: LD_INT 5
42266: ARRAY
42267: AND
42268: IFFALSE 42271
// disable ;
42270: DISABLE
// end ;
42271: PPOPN 4
42273: END
// every 0 0$1 trigger kamikazed do var un ;
42274: LD_EXP 10
42278: IFFALSE 42476
42280: GO 42282
42282: DISABLE
42283: LD_INT 0
42285: PPUSH
// begin DialogueOn ;
42286: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
42290: LD_EXP 10
42294: PPUSH
42295: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
42299: LD_ADDR_VAR 0 1
42303: PUSH
42304: LD_INT 1
42306: PPUSH
42307: LD_STRING D5c-Sol1-1
42309: PPUSH
42310: CALL 2199 0 2
42314: ST_TO_ADDR
// if not un then
42315: LD_VAR 0 1
42319: NOT
42320: IFFALSE 42338
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
42322: LD_ADDR_VAR 0 1
42326: PUSH
42327: LD_INT 2
42329: PPUSH
42330: LD_STRING D5c-Sol1-1
42332: PPUSH
42333: CALL 2199 0 2
42337: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
42338: LD_EXP 17
42342: PPUSH
42343: LD_STRING D5c-JMM-1
42345: PPUSH
42346: CALL_OW 88
// if IsOk ( Lisa ) then
42350: LD_EXP 18
42354: PPUSH
42355: CALL_OW 302
42359: IFFALSE 42375
// Say ( Lisa , D5d-Lisa-1 ) else
42361: LD_EXP 18
42365: PPUSH
42366: LD_STRING D5d-Lisa-1
42368: PPUSH
42369: CALL_OW 88
42373: GO 42460
// if IsOk ( Cyrus ) then
42375: LD_EXP 21
42379: PPUSH
42380: CALL_OW 302
42384: IFFALSE 42400
// Say ( Cyrus , D5d-Cyrus-1 ) else
42386: LD_EXP 21
42390: PPUSH
42391: LD_STRING D5d-Cyrus-1
42393: PPUSH
42394: CALL_OW 88
42398: GO 42460
// if IsOk ( Gary ) then
42400: LD_EXP 28
42404: PPUSH
42405: CALL_OW 302
42409: IFFALSE 42425
// Say ( Gary , D5d-Gary-1 ) else
42411: LD_EXP 28
42415: PPUSH
42416: LD_STRING D5d-Gary-1
42418: PPUSH
42419: CALL_OW 88
42423: GO 42460
// if GetSex ( un ) = sex_male then
42425: LD_VAR 0 1
42429: PPUSH
42430: CALL_OW 258
42434: PUSH
42435: LD_INT 1
42437: EQUAL
42438: IFFALSE 42454
// Say ( un , D5d-Sol1-1 ) else
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_STRING D5d-Sol1-1
42447: PPUSH
42448: CALL_OW 88
42452: GO 42460
// begin DialogueOff ;
42454: CALL_OW 7
// exit ;
42458: GO 42476
// end ; Say ( JMM , D5d-JMM-1 ) ;
42460: LD_EXP 17
42464: PPUSH
42465: LD_STRING D5d-JMM-1
42467: PPUSH
42468: CALL_OW 88
// DialogueOff ;
42472: CALL_OW 7
// end ;
42476: PPOPN 1
42478: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
42479: LD_INT 1
42481: PPUSH
42482: LD_INT 17
42484: PPUSH
42485: CALL_OW 294
42489: PUSH
42490: LD_INT 2
42492: GREATEREQUAL
42493: IFFALSE 42614
42495: GO 42497
42497: DISABLE
42498: LD_INT 0
42500: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
42501: LD_INT 10
42503: PPUSH
42504: LD_INT 5
42506: PPUSH
42507: LD_INT 1
42509: PPUSH
42510: LD_INT 10
42512: NEG
42513: PPUSH
42514: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
42518: LD_INT 10
42520: PPUSH
42521: LD_INT 5
42523: PPUSH
42524: LD_INT 1
42526: PPUSH
42527: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
42531: LD_INT 10
42533: PPUSH
42534: LD_INT 5
42536: PPUSH
42537: CALL_OW 86
// DialogueOn ;
42541: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
42545: LD_ADDR_VAR 0 1
42549: PUSH
42550: LD_INT 1
42552: PPUSH
42553: LD_STRING D6-Sci1-1
42555: PPUSH
42556: CALL 2199 0 2
42560: ST_TO_ADDR
// if un then
42561: LD_VAR 0 1
42565: IFFALSE 42603
// begin Say ( JMM , D6-JMM-1 ) ;
42567: LD_EXP 17
42571: PPUSH
42572: LD_STRING D6-JMM-1
42574: PPUSH
42575: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
42579: LD_VAR 0 1
42583: PPUSH
42584: LD_STRING D6-Sci1-2
42586: PPUSH
42587: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
42591: LD_EXP 17
42595: PPUSH
42596: LD_STRING D6-JMM-2
42598: PPUSH
42599: CALL_OW 88
// end ; DialogueOff ;
42603: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
42607: LD_STRING M3
42609: PPUSH
42610: CALL_OW 337
// end ;
42614: PPOPN 1
42616: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
42617: LD_OWVAR 1
42621: PUSH
42622: LD_INT 65100
42624: GREATEREQUAL
42625: PUSH
42626: LD_INT 2
42628: PPUSH
42629: LD_INT 169
42631: PPUSH
42632: LD_INT 90
42634: PPUSH
42635: LD_INT 40
42637: PPUSH
42638: CALL 3636 0 4
42642: PUSH
42643: LD_INT 4
42645: ARRAY
42646: PUSH
42647: LD_INT 0
42649: EQUAL
42650: AND
42651: IFFALSE 43685
42653: GO 42655
42655: DISABLE
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
// begin uc_side := 5 ;
42662: LD_ADDR_OWVAR 20
42666: PUSH
42667: LD_INT 5
42669: ST_TO_ADDR
// uc_nation := 2 ;
42670: LD_ADDR_OWVAR 21
42674: PUSH
42675: LD_INT 2
42677: ST_TO_ADDR
// InitHc ;
42678: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
42682: LD_INT 1
42684: PPUSH
42685: LD_INT 3
42687: PPUSH
42688: LD_INT 8
42690: PPUSH
42691: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42695: LD_ADDR_OWVAR 29
42699: PUSH
42700: LD_INT 12
42702: PUSH
42703: LD_INT 12
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
42710: LD_ADDR_OWVAR 33
42714: PUSH
42715: LD_STRING SecondCharsGal
42717: ST_TO_ADDR
// hc_face_number := 7 ;
42718: LD_ADDR_OWVAR 34
42722: PUSH
42723: LD_INT 7
42725: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
42726: LD_ADDR_EXP 41
42730: PUSH
42731: CALL_OW 44
42735: ST_TO_ADDR
// InitHc ;
42736: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
42740: LD_INT 1
42742: PPUSH
42743: LD_INT 16
42745: PPUSH
42746: LD_INT 2
42748: PPUSH
42749: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42753: LD_ADDR_OWVAR 29
42757: PUSH
42758: LD_INT 12
42760: PUSH
42761: LD_INT 12
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// hc_name := Livid ;
42768: LD_ADDR_OWVAR 26
42772: PUSH
42773: LD_STRING Livid
42775: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
42776: LD_ADDR_EXP 42
42780: PUSH
42781: CALL_OW 44
42785: ST_TO_ADDR
// InitHc ;
42786: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
42790: LD_INT 35
42792: PPUSH
42793: CALL_OW 67
// until not InBattle ( 1 ) ;
42797: LD_INT 1
42799: PPUSH
42800: CALL_OW 463
42804: NOT
42805: IFFALSE 42790
// wait ( 0 0$5 ) ;
42807: LD_INT 175
42809: PPUSH
42810: CALL_OW 67
// DialogueOn ;
42814: CALL_OW 6
// InGameOn ;
42818: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
42822: LD_ADDR_VAR 0 1
42826: PUSH
42827: LD_EXP 31
42831: PUSH
42832: LD_EXP 18
42836: PUSH
42837: LD_EXP 19
42841: PUSH
42842: LD_EXP 20
42846: PUSH
42847: LD_EXP 21
42851: PUSH
42852: LD_EXP 22
42856: PUSH
42857: LD_EXP 23
42861: PUSH
42862: LD_EXP 24
42866: PUSH
42867: LD_EXP 25
42871: PUSH
42872: LD_EXP 27
42876: PUSH
42877: LD_EXP 28
42881: PUSH
42882: LD_EXP 29
42886: PUSH
42887: LD_EXP 30
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: DIFF
42906: PPUSH
42907: LD_INT 26
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 72
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: ST_TO_ADDR
// if not un and Brown then
42926: LD_VAR 0 1
42930: NOT
42931: PUSH
42932: LD_EXP 23
42936: AND
42937: IFFALSE 42949
// un := Brown ;
42939: LD_ADDR_VAR 0 1
42943: PUSH
42944: LD_EXP 23
42948: ST_TO_ADDR
// if un then
42949: LD_VAR 0 1
42953: IFFALSE 42979
// begin Say ( un , D7-Sol1-1 ) ;
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_STRING D7-Sol1-1
42962: PPUSH
42963: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
42967: LD_EXP 17
42971: PPUSH
42972: LD_STRING D7-JMM-1
42974: PPUSH
42975: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
42979: LD_EXP 41
42983: PPUSH
42984: LD_STRING D7-Ar1-1
42986: PPUSH
42987: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
42991: LD_EXP 17
42995: PPUSH
42996: LD_STRING D7-JMM-2
42998: PPUSH
42999: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
43003: LD_EXP 41
43007: PPUSH
43008: LD_STRING D7-Ar1-2
43010: PPUSH
43011: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
43015: LD_EXP 17
43019: PPUSH
43020: LD_STRING D7-JMM-3
43022: PPUSH
43023: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
43027: LD_EXP 41
43031: PPUSH
43032: LD_STRING D7-Ar1-3
43034: PPUSH
43035: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
43039: LD_EXP 17
43043: PPUSH
43044: LD_STRING D7-JMM-4
43046: PPUSH
43047: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
43051: LD_EXP 41
43055: PPUSH
43056: LD_STRING D7-Ar1-4
43058: PPUSH
43059: CALL_OW 94
// InGameOff ;
43063: CALL_OW 9
// DialogueOff ;
43067: CALL_OW 7
// case Query ( QCameras ) of 1 :
43071: LD_STRING QCameras
43073: PPUSH
43074: CALL_OW 97
43078: PUSH
43079: LD_INT 1
43081: DOUBLE
43082: EQUAL
43083: IFTRUE 43087
43085: GO 43090
43087: POP
// ; 2 :
43088: GO 43104
43090: LD_INT 2
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43103
43098: POP
// exit ; end ;
43099: GO 43685
43101: GO 43104
43103: POP
// ChangeMissionObjectives ( MCar ) ;
43104: LD_STRING MCar
43106: PPUSH
43107: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
43111: LD_INT 124
43113: PPUSH
43114: LD_INT 90
43116: PPUSH
43117: LD_INT 1
43119: PPUSH
43120: LD_INT 6
43122: NEG
43123: PPUSH
43124: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
43128: LD_INT 124
43130: PPUSH
43131: LD_INT 90
43133: PPUSH
43134: LD_INT 1
43136: PPUSH
43137: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
43141: LD_INT 12
43143: PPUSH
43144: LD_INT 1
43146: PPUSH
43147: CALL_OW 424
// wait ( 3 ) ;
43151: LD_INT 3
43153: PPUSH
43154: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
43158: LD_INT 124
43160: PPUSH
43161: LD_INT 90
43163: PPUSH
43164: CALL_OW 86
// cargo := false ;
43168: LD_ADDR_VAR 0 3
43172: PUSH
43173: LD_INT 0
43175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
43176: LD_INT 35
43178: PPUSH
43179: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_INT 12
43190: PPUSH
43191: LD_INT 32
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 34
43203: PUSH
43204: LD_INT 32
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 58
43213: PUSH
43214: EMPTY
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: PPUSH
43222: CALL_OW 70
43226: ST_TO_ADDR
// until cargo ;
43227: LD_VAR 0 3
43231: IFFALSE 43176
// cargo := cargo [ 1 ] ;
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_VAR 0 3
43242: PUSH
43243: LD_INT 1
43245: ARRAY
43246: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
43247: LD_VAR 0 3
43251: PPUSH
43252: LD_INT 5
43254: PPUSH
43255: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
43259: LD_INT 12
43261: PPUSH
43262: LD_INT 0
43264: PPUSH
43265: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
43269: LD_EXP 41
43273: PPUSH
43274: LD_INT 11
43276: PPUSH
43277: LD_INT 0
43279: PPUSH
43280: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
43284: LD_EXP 42
43288: PPUSH
43289: LD_INT 11
43291: PPUSH
43292: LD_INT 0
43294: PPUSH
43295: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
43299: LD_EXP 41
43303: PUSH
43304: LD_EXP 42
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PPUSH
43313: LD_INT 12
43315: PPUSH
43316: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
43320: LD_EXP 41
43324: PPUSH
43325: LD_VAR 0 3
43329: PPUSH
43330: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43334: LD_EXP 41
43338: PUSH
43339: LD_EXP 42
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PPUSH
43348: LD_INT 209
43350: PPUSH
43351: LD_INT 178
43353: PPUSH
43354: CALL_OW 171
// while ( true ) do
43358: LD_INT 1
43360: IFFALSE 43514
// begin wait ( 0 0$1 ) ;
43362: LD_INT 35
43364: PPUSH
43365: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
43369: LD_EXP 41
43373: PPUSH
43374: CALL_OW 314
43378: NOT
43379: PUSH
43380: LD_EXP 42
43384: PPUSH
43385: CALL_OW 314
43389: NOT
43390: OR
43391: IFFALSE 43417
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43393: LD_EXP 41
43397: PUSH
43398: LD_EXP 42
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PPUSH
43407: LD_INT 209
43409: PPUSH
43410: LD_INT 178
43412: PPUSH
43413: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
43417: LD_EXP 41
43421: PPUSH
43422: LD_INT 10
43424: PPUSH
43425: CALL_OW 308
43429: IFFALSE 43440
// RemoveUnit ( ar_mechanic ) ;
43431: LD_EXP 41
43435: PPUSH
43436: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
43440: LD_EXP 42
43444: PPUSH
43445: LD_INT 10
43447: PPUSH
43448: CALL_OW 308
43452: IFFALSE 43463
// RemoveUnit ( ar_mechanic_friend ) ;
43454: LD_EXP 42
43458: PPUSH
43459: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
43463: LD_VAR 0 3
43467: PPUSH
43468: LD_INT 10
43470: PPUSH
43471: CALL_OW 308
43475: IFFALSE 43486
// RemoveUnit ( cargo ) ;
43477: LD_VAR 0 3
43481: PPUSH
43482: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
43486: LD_EXP 41
43490: PPUSH
43491: CALL_OW 300
43495: NOT
43496: PUSH
43497: LD_EXP 42
43501: PPUSH
43502: CALL_OW 300
43506: NOT
43507: AND
43508: IFFALSE 43512
// break ;
43510: GO 43514
// end ;
43512: GO 43358
// wait ( 0 0$2 ) ;
43514: LD_INT 70
43516: PPUSH
43517: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
43521: LD_EXP 41
43525: PPUSH
43526: LD_STRING D7a-Ar1-1
43528: PPUSH
43529: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
43533: LD_ADDR_VAR 0 4
43537: PUSH
43538: LD_INT 129
43540: PUSH
43541: LD_INT 10
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 103
43550: PUSH
43551: LD_INT 6
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 148
43560: PUSH
43561: LD_INT 47
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 155
43570: PUSH
43571: LD_INT 16
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// if Difficulty = 1 then
43584: LD_OWVAR 67
43588: PUSH
43589: LD_INT 1
43591: EQUAL
43592: IFFALSE 43629
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
43594: LD_ADDR_VAR 0 4
43598: PUSH
43599: LD_VAR 0 4
43603: PUSH
43604: LD_INT 78
43606: PUSH
43607: LD_INT 7
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 104
43616: PUSH
43617: LD_INT 43
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: ADD
43628: ST_TO_ADDR
// for i in tmp do
43629: LD_ADDR_VAR 0 2
43633: PUSH
43634: LD_VAR 0 4
43638: PUSH
43639: FOR_IN
43640: IFFALSE 43673
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
43642: LD_VAR 0 2
43646: PUSH
43647: LD_INT 1
43649: ARRAY
43650: PPUSH
43651: LD_VAR 0 2
43655: PUSH
43656: LD_INT 2
43658: ARRAY
43659: PPUSH
43660: LD_INT 1
43662: PPUSH
43663: LD_INT 9
43665: NEG
43666: PPUSH
43667: CALL_OW 330
43671: GO 43639
43673: POP
43674: POP
// CenterOnXY ( 129 , 10 ) ;
43675: LD_INT 129
43677: PPUSH
43678: LD_INT 10
43680: PPUSH
43681: CALL_OW 84
// end ;
43685: PPOPN 4
43687: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
43688: LD_EXP 14
43692: PUSH
43693: LD_INT 21000
43695: MINUS
43696: PUSH
43697: LD_OWVAR 1
43701: LESSEQUAL
43702: IFFALSE 43742
43704: GO 43706
43706: DISABLE
// begin powell_warn := true ;
43707: LD_ADDR_EXP 15
43711: PUSH
43712: LD_INT 1
43714: ST_TO_ADDR
// DialogueOn ;
43715: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
43719: LD_EXP 26
43723: PPUSH
43724: LD_STRING D9-Pow-1
43726: PPUSH
43727: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
43731: LD_INT 10
43733: PPUSH
43734: CALL_OW 68
// DialogueOff ;
43738: CALL_OW 7
// end ;
43742: END
// every 0 0$1 trigger game_time <= tick do
43743: LD_EXP 14
43747: PUSH
43748: LD_OWVAR 1
43752: LESSEQUAL
43753: IFFALSE 43792
43755: GO 43757
43757: DISABLE
// begin DialogueOn ;
43758: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
43762: LD_EXP 26
43766: PPUSH
43767: LD_STRING D9a-Pow-1
43769: PPUSH
43770: CALL_OW 94
// dwait ( 0 0$2 ) ;
43774: LD_INT 70
43776: PPUSH
43777: CALL_OW 68
// DialogueOff ;
43781: CALL_OW 7
// YouLost ( Command ) ;
43785: LD_STRING Command
43787: PPUSH
43788: CALL_OW 104
// end ;
43792: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
43793: LD_EXP 17
43797: PPUSH
43798: CALL_OW 301
43802: PUSH
43803: LD_EXP 5
43807: AND
43808: IFFALSE 43820
43810: GO 43812
43812: DISABLE
// YouLost ( JMM ) ;
43813: LD_STRING JMM
43815: PPUSH
43816: CALL_OW 104
43820: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
43821: LD_INT 22
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 30
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PPUSH
43845: CALL_OW 69
43849: PUSH
43850: LD_INT 0
43852: EQUAL
43853: PUSH
43854: LD_EXP 17
43858: PPUSH
43859: CALL_OW 302
43863: AND
43864: IFFALSE 44605
43866: GO 43868
43868: DISABLE
// begin DialogueOn ;
43869: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
43873: LD_OWVAR 1
43877: PUSH
43878: LD_INT 126000
43880: PUSH
43881: LD_INT 105000
43883: PUSH
43884: LD_INT 94500
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: PUSH
43892: LD_OWVAR 67
43896: ARRAY
43897: LESS
43898: IFFALSE 43912
// AddMedal ( Time1 , 2 ) else
43900: LD_STRING Time1
43902: PPUSH
43903: LD_INT 2
43905: PPUSH
43906: CALL_OW 101
43910: GO 43942
// if not powell_warn then
43912: LD_EXP 15
43916: NOT
43917: IFFALSE 43931
// AddMedal ( Time1 , 1 ) else
43919: LD_STRING Time1
43921: PPUSH
43922: LD_INT 1
43924: PPUSH
43925: CALL_OW 101
43929: GO 43942
// AddMedal ( Time1 , - 1 ) ;
43931: LD_STRING Time1
43933: PPUSH
43934: LD_INT 1
43936: NEG
43937: PPUSH
43938: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
43942: LD_EXP 16
43946: PUSH
43947: LD_INT 5
43949: PUSH
43950: LD_INT 4
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: PUSH
43961: LD_OWVAR 67
43965: ARRAY
43966: GREATEREQUAL
43967: IFFALSE 43982
// AddMedal ( Destroy , - 2 ) else
43969: LD_STRING Destroy
43971: PPUSH
43972: LD_INT 2
43974: NEG
43975: PPUSH
43976: CALL_OW 101
43980: GO 44099
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
43982: LD_INT 22
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 21
43994: PUSH
43995: LD_INT 3
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 50
44004: PUSH
44005: EMPTY
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: PPUSH
44013: CALL_OW 69
44017: PUSH
44018: LD_INT 20
44020: GREATEREQUAL
44021: IFFALSE 44036
// AddMedal ( Destroy , - 1 ) else
44023: LD_STRING Destroy
44025: PPUSH
44026: LD_INT 1
44028: NEG
44029: PPUSH
44030: CALL_OW 101
44034: GO 44099
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
44036: LD_INT 22
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 21
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 50
44058: PUSH
44059: EMPTY
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: PPUSH
44067: CALL_OW 69
44071: PUSH
44072: LD_INT 10
44074: GREATEREQUAL
44075: IFFALSE 44089
// AddMedal ( Destroy , 1 ) else
44077: LD_STRING Destroy
44079: PPUSH
44080: LD_INT 1
44082: PPUSH
44083: CALL_OW 101
44087: GO 44099
// AddMedal ( Destroy , 2 ) ;
44089: LD_STRING Destroy
44091: PPUSH
44092: LD_INT 2
44094: PPUSH
44095: CALL_OW 101
// if artifact_get then
44099: LD_EXP 12
44103: IFFALSE 44117
// AddMedal ( Artefact , 1 ) else
44105: LD_STRING Artefact
44107: PPUSH
44108: LD_INT 1
44110: PPUSH
44111: CALL_OW 101
44115: GO 44128
// AddMedal ( Artefact , - 1 ) ;
44117: LD_STRING Artefact
44119: PPUSH
44120: LD_INT 1
44122: NEG
44123: PPUSH
44124: CALL_OW 101
// GiveMedals ( MAIN ) ;
44128: LD_STRING MAIN
44130: PPUSH
44131: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44135: LD_INT 22
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 25
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 25
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 25
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 25
44180: PUSH
44181: LD_INT 4
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PPUSH
44199: CALL_OW 69
44203: PPUSH
44204: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
44208: LD_EXP 31
44212: PUSH
44213: LD_EXP 18
44217: PUSH
44218: LD_EXP 19
44222: PUSH
44223: LD_EXP 20
44227: PUSH
44228: LD_EXP 21
44232: PUSH
44233: LD_EXP 22
44237: PUSH
44238: LD_EXP 23
44242: PUSH
44243: LD_EXP 24
44247: PUSH
44248: LD_EXP 25
44252: PUSH
44253: LD_EXP 27
44257: PUSH
44258: LD_EXP 28
44262: PUSH
44263: LD_EXP 29
44267: PUSH
44268: LD_EXP 30
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: DIFF
44287: PPUSH
44288: LD_STRING 11c_others
44290: PPUSH
44291: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44295: LD_EXP 17
44299: PPUSH
44300: LD_EXP 3
44304: PUSH
44305: LD_STRING JMM
44307: STR
44308: PPUSH
44309: CALL_OW 38
// if Lisa then
44313: LD_EXP 18
44317: IFFALSE 44337
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44319: LD_EXP 18
44323: PPUSH
44324: LD_EXP 3
44328: PUSH
44329: LD_STRING Lisa
44331: STR
44332: PPUSH
44333: CALL_OW 38
// if Donaldson then
44337: LD_EXP 19
44341: IFFALSE 44361
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44343: LD_EXP 19
44347: PPUSH
44348: LD_EXP 3
44352: PUSH
44353: LD_STRING Donaldson
44355: STR
44356: PPUSH
44357: CALL_OW 38
// if Bobby then
44361: LD_EXP 20
44365: IFFALSE 44385
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44367: LD_EXP 20
44371: PPUSH
44372: LD_EXP 3
44376: PUSH
44377: LD_STRING Bobby
44379: STR
44380: PPUSH
44381: CALL_OW 38
// if Cyrus then
44385: LD_EXP 21
44389: IFFALSE 44409
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44391: LD_EXP 21
44395: PPUSH
44396: LD_EXP 3
44400: PUSH
44401: LD_STRING Cyrus
44403: STR
44404: PPUSH
44405: CALL_OW 38
// if Denis then
44409: LD_EXP 22
44413: IFFALSE 44433
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
44415: LD_EXP 22
44419: PPUSH
44420: LD_EXP 3
44424: PUSH
44425: LD_STRING Denis
44427: STR
44428: PPUSH
44429: CALL_OW 38
// if Brown then
44433: LD_EXP 23
44437: IFFALSE 44457
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
44439: LD_EXP 23
44443: PPUSH
44444: LD_EXP 3
44448: PUSH
44449: LD_STRING Brown
44451: STR
44452: PPUSH
44453: CALL_OW 38
// if Gladstone then
44457: LD_EXP 24
44461: IFFALSE 44481
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44463: LD_EXP 24
44467: PPUSH
44468: LD_EXP 3
44472: PUSH
44473: LD_STRING Gladstone
44475: STR
44476: PPUSH
44477: CALL_OW 38
// if Houten then
44481: LD_EXP 25
44485: IFFALSE 44505
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
44487: LD_EXP 25
44491: PPUSH
44492: LD_EXP 3
44496: PUSH
44497: LD_STRING Houten
44499: STR
44500: PPUSH
44501: CALL_OW 38
// if Cornel then
44505: LD_EXP 27
44509: IFFALSE 44529
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
44511: LD_EXP 27
44515: PPUSH
44516: LD_EXP 3
44520: PUSH
44521: LD_STRING Cornel
44523: STR
44524: PPUSH
44525: CALL_OW 38
// if Gary then
44529: LD_EXP 28
44533: IFFALSE 44553
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
44535: LD_EXP 28
44539: PPUSH
44540: LD_EXP 3
44544: PUSH
44545: LD_STRING Gary
44547: STR
44548: PPUSH
44549: CALL_OW 38
// if Frank then
44553: LD_EXP 29
44557: IFFALSE 44577
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
44559: LD_EXP 29
44563: PPUSH
44564: LD_EXP 3
44568: PUSH
44569: LD_STRING Frank
44571: STR
44572: PPUSH
44573: CALL_OW 38
// if Kikuchi then
44577: LD_EXP 30
44581: IFFALSE 44601
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44583: LD_EXP 30
44587: PPUSH
44588: LD_EXP 3
44592: PUSH
44593: LD_STRING Kikuchi
44595: STR
44596: PPUSH
44597: CALL_OW 38
// YouWin ;
44601: CALL_OW 103
// end ; end_of_file
44605: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
44606: LD_INT 0
44608: PPUSH
// skirmish := false ;
44609: LD_ADDR_EXP 43
44613: PUSH
44614: LD_INT 0
44616: ST_TO_ADDR
// mc_bases := [ ] ;
44617: LD_ADDR_EXP 44
44621: PUSH
44622: EMPTY
44623: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
44624: LD_ADDR_EXP 45
44628: PUSH
44629: EMPTY
44630: ST_TO_ADDR
// mc_building_repairs := [ ] ;
44631: LD_ADDR_EXP 46
44635: PUSH
44636: EMPTY
44637: ST_TO_ADDR
// mc_need_heal := [ ] ;
44638: LD_ADDR_EXP 47
44642: PUSH
44643: EMPTY
44644: ST_TO_ADDR
// mc_healers := [ ] ;
44645: LD_ADDR_EXP 48
44649: PUSH
44650: EMPTY
44651: ST_TO_ADDR
// mc_build_list := [ ] ;
44652: LD_ADDR_EXP 49
44656: PUSH
44657: EMPTY
44658: ST_TO_ADDR
// mc_builders := [ ] ;
44659: LD_ADDR_EXP 50
44663: PUSH
44664: EMPTY
44665: ST_TO_ADDR
// mc_construct_list := [ ] ;
44666: LD_ADDR_EXP 51
44670: PUSH
44671: EMPTY
44672: ST_TO_ADDR
// mc_turret_list := [ ] ;
44673: LD_ADDR_EXP 52
44677: PUSH
44678: EMPTY
44679: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
44680: LD_ADDR_EXP 53
44684: PUSH
44685: EMPTY
44686: ST_TO_ADDR
// mc_miners := [ ] ;
44687: LD_ADDR_EXP 55
44691: PUSH
44692: EMPTY
44693: ST_TO_ADDR
// mc_mines := [ ] ;
44694: LD_ADDR_EXP 54
44698: PUSH
44699: EMPTY
44700: ST_TO_ADDR
// mc_minefields := [ ] ;
44701: LD_ADDR_EXP 56
44705: PUSH
44706: EMPTY
44707: ST_TO_ADDR
// mc_crates := [ ] ;
44708: LD_ADDR_EXP 57
44712: PUSH
44713: EMPTY
44714: ST_TO_ADDR
// mc_crates_collector := [ ] ;
44715: LD_ADDR_EXP 58
44719: PUSH
44720: EMPTY
44721: ST_TO_ADDR
// mc_vehicles := [ ] ;
44722: LD_ADDR_EXP 59
44726: PUSH
44727: EMPTY
44728: ST_TO_ADDR
// mc_attack := [ ] ;
44729: LD_ADDR_EXP 60
44733: PUSH
44734: EMPTY
44735: ST_TO_ADDR
// mc_produce := [ ] ;
44736: LD_ADDR_EXP 61
44740: PUSH
44741: EMPTY
44742: ST_TO_ADDR
// mc_defender := [ ] ;
44743: LD_ADDR_EXP 62
44747: PUSH
44748: EMPTY
44749: ST_TO_ADDR
// mc_parking := [ ] ;
44750: LD_ADDR_EXP 64
44754: PUSH
44755: EMPTY
44756: ST_TO_ADDR
// mc_scan := [ ] ;
44757: LD_ADDR_EXP 63
44761: PUSH
44762: EMPTY
44763: ST_TO_ADDR
// end ;
44764: LD_VAR 0 1
44768: RET
// export function RunMacro ; var i ; begin
44769: LD_INT 0
44771: PPUSH
44772: PPUSH
// for i = 1 to mc_bases do
44773: LD_ADDR_VAR 0 2
44777: PUSH
44778: DOUBLE
44779: LD_INT 1
44781: DEC
44782: ST_TO_ADDR
44783: LD_EXP 44
44787: PUSH
44788: FOR_TO
44789: IFFALSE 45277
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
44791: LD_ADDR_EXP 45
44795: PUSH
44796: LD_EXP 45
44800: PPUSH
44801: LD_VAR 0 2
44805: PPUSH
44806: EMPTY
44807: PPUSH
44808: CALL_OW 1
44812: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
44813: LD_ADDR_EXP 46
44817: PUSH
44818: LD_EXP 46
44822: PPUSH
44823: LD_VAR 0 2
44827: PPUSH
44828: EMPTY
44829: PPUSH
44830: CALL_OW 1
44834: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
44835: LD_ADDR_EXP 47
44839: PUSH
44840: LD_EXP 47
44844: PPUSH
44845: LD_VAR 0 2
44849: PPUSH
44850: EMPTY
44851: PPUSH
44852: CALL_OW 1
44856: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
44857: LD_ADDR_EXP 48
44861: PUSH
44862: LD_EXP 48
44866: PPUSH
44867: LD_VAR 0 2
44871: PPUSH
44872: EMPTY
44873: PUSH
44874: EMPTY
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PPUSH
44880: CALL_OW 1
44884: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
44885: LD_ADDR_EXP 49
44889: PUSH
44890: LD_EXP 49
44894: PPUSH
44895: LD_VAR 0 2
44899: PPUSH
44900: EMPTY
44901: PPUSH
44902: CALL_OW 1
44906: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
44907: LD_ADDR_EXP 51
44911: PUSH
44912: LD_EXP 51
44916: PPUSH
44917: LD_VAR 0 2
44921: PPUSH
44922: EMPTY
44923: PPUSH
44924: CALL_OW 1
44928: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
44929: LD_ADDR_EXP 52
44933: PUSH
44934: LD_EXP 52
44938: PPUSH
44939: LD_VAR 0 2
44943: PPUSH
44944: EMPTY
44945: PPUSH
44946: CALL_OW 1
44950: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
44951: LD_ADDR_EXP 53
44955: PUSH
44956: LD_EXP 53
44960: PPUSH
44961: LD_VAR 0 2
44965: PPUSH
44966: EMPTY
44967: PPUSH
44968: CALL_OW 1
44972: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
44973: LD_ADDR_EXP 53
44977: PUSH
44978: LD_EXP 53
44982: PPUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PPUSH
44995: EMPTY
44996: PPUSH
44997: CALL 3142 0 3
45001: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
45002: LD_ADDR_EXP 53
45006: PUSH
45007: LD_EXP 53
45011: PPUSH
45012: LD_VAR 0 2
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PPUSH
45024: EMPTY
45025: PPUSH
45026: CALL 3142 0 3
45030: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
45031: LD_ADDR_EXP 55
45035: PUSH
45036: LD_EXP 55
45040: PPUSH
45041: LD_VAR 0 2
45045: PPUSH
45046: EMPTY
45047: PPUSH
45048: CALL_OW 1
45052: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
45053: LD_ADDR_EXP 54
45057: PUSH
45058: LD_EXP 54
45062: PPUSH
45063: LD_VAR 0 2
45067: PPUSH
45068: EMPTY
45069: PPUSH
45070: CALL_OW 1
45074: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
45075: LD_ADDR_EXP 56
45079: PUSH
45080: LD_EXP 56
45084: PPUSH
45085: LD_VAR 0 2
45089: PPUSH
45090: EMPTY
45091: PPUSH
45092: CALL_OW 1
45096: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
45097: LD_ADDR_EXP 57
45101: PUSH
45102: LD_EXP 57
45106: PPUSH
45107: LD_VAR 0 2
45111: PPUSH
45112: EMPTY
45113: PPUSH
45114: CALL_OW 1
45118: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
45119: LD_ADDR_EXP 58
45123: PUSH
45124: LD_EXP 58
45128: PPUSH
45129: LD_VAR 0 2
45133: PPUSH
45134: EMPTY
45135: PPUSH
45136: CALL_OW 1
45140: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
45141: LD_ADDR_EXP 59
45145: PUSH
45146: LD_EXP 59
45150: PPUSH
45151: LD_VAR 0 2
45155: PPUSH
45156: EMPTY
45157: PPUSH
45158: CALL_OW 1
45162: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45163: LD_ADDR_EXP 60
45167: PUSH
45168: LD_EXP 60
45172: PPUSH
45173: LD_VAR 0 2
45177: PPUSH
45178: EMPTY
45179: PPUSH
45180: CALL_OW 1
45184: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
45185: LD_ADDR_EXP 61
45189: PUSH
45190: LD_EXP 61
45194: PPUSH
45195: LD_VAR 0 2
45199: PPUSH
45200: EMPTY
45201: PPUSH
45202: CALL_OW 1
45206: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
45207: LD_ADDR_EXP 62
45211: PUSH
45212: LD_EXP 62
45216: PPUSH
45217: LD_VAR 0 2
45221: PPUSH
45222: EMPTY
45223: PPUSH
45224: CALL_OW 1
45228: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
45229: LD_ADDR_EXP 64
45233: PUSH
45234: LD_EXP 64
45238: PPUSH
45239: LD_VAR 0 2
45243: PPUSH
45244: LD_INT 0
45246: PPUSH
45247: CALL_OW 1
45251: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
45252: LD_ADDR_EXP 63
45256: PUSH
45257: LD_EXP 63
45261: PPUSH
45262: LD_VAR 0 2
45266: PPUSH
45267: LD_INT 0
45269: PPUSH
45270: CALL_OW 1
45274: ST_TO_ADDR
// end ;
45275: GO 44788
45277: POP
45278: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
45279: LD_INT 1
45281: PPUSH
45282: LD_INT 8
45284: PUSH
45285: LD_INT 10
45287: PUSH
45288: LD_INT 12
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: PUSH
45296: LD_OWVAR 67
45300: ARRAY
45301: PPUSH
45302: LD_INT 3
45304: PPUSH
45305: CALL 52684 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
45309: LD_INT 2
45311: PPUSH
45312: LD_INT 6
45314: PUSH
45315: LD_INT 8
45317: PUSH
45318: LD_INT 9
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: LD_OWVAR 67
45330: ARRAY
45331: PPUSH
45332: LD_INT 2
45334: PPUSH
45335: CALL 52684 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
45339: LD_INT 3
45341: PPUSH
45342: LD_INT 6
45344: PUSH
45345: LD_INT 7
45347: PUSH
45348: LD_INT 9
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: PUSH
45356: LD_OWVAR 67
45360: ARRAY
45361: PPUSH
45362: LD_INT 1
45364: PPUSH
45365: CALL 52684 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
45369: LD_ADDR_EXP 64
45373: PUSH
45374: LD_INT 20
45376: PUSH
45377: LD_INT 21
45379: PUSH
45380: LD_INT 22
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: ST_TO_ADDR
// for i = 1 to mc_bases do
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: DOUBLE
45394: LD_INT 1
45396: DEC
45397: ST_TO_ADDR
45398: LD_EXP 44
45402: PUSH
45403: FOR_TO
45404: IFFALSE 45428
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
45406: LD_VAR 0 2
45410: PPUSH
45411: LD_EXP 39
45415: PUSH
45416: LD_VAR 0 2
45420: ARRAY
45421: PPUSH
45422: CALL 53029 0 2
45426: GO 45403
45428: POP
45429: POP
// skirmish := true ;
45430: LD_ADDR_EXP 43
45434: PUSH
45435: LD_INT 1
45437: ST_TO_ADDR
// end ;
45438: LD_VAR 0 1
45442: RET
// every 0 0$01 trigger skirmish do
45443: LD_EXP 43
45447: IFFALSE 45531
45449: GO 45451
45451: DISABLE
// begin enable ;
45452: ENABLE
// MC_CheckBuildings ( ) ;
45453: CALL 45786 0 0
// MC_CheckPeopleLife ( ) ;
45457: CALL 46004 0 0
// RaiseSailEvent ( 103 ) ;
45461: LD_INT 103
45463: PPUSH
45464: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
45468: LD_INT 104
45470: PPUSH
45471: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
45475: LD_INT 105
45477: PPUSH
45478: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
45482: LD_INT 106
45484: PPUSH
45485: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
45489: LD_INT 107
45491: PPUSH
45492: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
45496: LD_INT 108
45498: PPUSH
45499: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
45503: LD_INT 109
45505: PPUSH
45506: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
45510: LD_INT 110
45512: PPUSH
45513: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
45517: LD_INT 111
45519: PPUSH
45520: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
45524: LD_INT 200
45526: PPUSH
45527: CALL_OW 427
// end ;
45531: END
// on SailEvent ( event ) do begin if event = 101 then
45532: LD_VAR 0 1
45536: PUSH
45537: LD_INT 101
45539: EQUAL
45540: IFFALSE 45546
// MC_RepairBuildings ( ) ;
45542: CALL 46550 0 0
// if event = 102 then
45546: LD_VAR 0 1
45550: PUSH
45551: LD_INT 102
45553: EQUAL
45554: IFFALSE 45560
// MC_Heal ( ) ;
45556: CALL 46944 0 0
// if event = 103 then
45560: LD_VAR 0 1
45564: PUSH
45565: LD_INT 103
45567: EQUAL
45568: IFFALSE 45574
// MC_Build ( ) ;
45570: CALL 47329 0 0
// if event = 104 then
45574: LD_VAR 0 1
45578: PUSH
45579: LD_INT 104
45581: EQUAL
45582: IFFALSE 45588
// MC_TurretWeapon ( ) ;
45584: CALL 48097 0 0
// if event = 105 then
45588: LD_VAR 0 1
45592: PUSH
45593: LD_INT 105
45595: EQUAL
45596: IFFALSE 45602
// MC_TurretCrew ( ) ;
45598: CALL 48416 0 0
// if event = 106 then
45602: LD_VAR 0 1
45606: PUSH
45607: LD_INT 106
45609: EQUAL
45610: IFFALSE 45616
// MC_PlantMines ( ) ;
45612: CALL 49230 0 0
// if event = 107 then
45616: LD_VAR 0 1
45620: PUSH
45621: LD_INT 107
45623: EQUAL
45624: IFFALSE 45630
// MC_CollectCrates ( ) ;
45626: CALL 50160 0 0
// if event = 108 then
45630: LD_VAR 0 1
45634: PUSH
45635: LD_INT 108
45637: EQUAL
45638: IFFALSE 45644
// MC_LinkRemoteControl ( ) ;
45640: CALL 50957 0 0
// if event = 109 then
45644: LD_VAR 0 1
45648: PUSH
45649: LD_INT 109
45651: EQUAL
45652: IFFALSE 45658
// MC_ProduceVehicle ( ) ;
45654: CALL 51126 0 0
// if event = 110 then
45658: LD_VAR 0 1
45662: PUSH
45663: LD_INT 110
45665: EQUAL
45666: IFFALSE 45672
// MC_SendAttack ( ) ;
45668: CALL 51514 0 0
// if event = 111 then
45672: LD_VAR 0 1
45676: PUSH
45677: LD_INT 111
45679: EQUAL
45680: IFFALSE 45686
// MC_Defend ( ) ;
45682: CALL 51622 0 0
// if event = 200 then
45686: LD_VAR 0 1
45690: PUSH
45691: LD_INT 200
45693: EQUAL
45694: IFFALSE 45700
// MC_Idle ( ) ;
45696: CALL 52435 0 0
// end ;
45700: PPOPN 1
45702: END
// export function MC_Reset ( base , tag ) ; var i ; begin
45703: LD_INT 0
45705: PPUSH
45706: PPUSH
// if not mc_bases [ base ] or not tag then
45707: LD_EXP 44
45711: PUSH
45712: LD_VAR 0 1
45716: ARRAY
45717: NOT
45718: PUSH
45719: LD_VAR 0 2
45723: NOT
45724: OR
45725: IFFALSE 45729
// exit ;
45727: GO 45781
// for i in mc_bases [ base ] do
45729: LD_ADDR_VAR 0 4
45733: PUSH
45734: LD_EXP 44
45738: PUSH
45739: LD_VAR 0 1
45743: ARRAY
45744: PUSH
45745: FOR_IN
45746: IFFALSE 45779
// if GetTag ( i ) = tag then
45748: LD_VAR 0 4
45752: PPUSH
45753: CALL_OW 110
45757: PUSH
45758: LD_VAR 0 2
45762: EQUAL
45763: IFFALSE 45777
// SetTag ( i , 0 ) ;
45765: LD_VAR 0 4
45769: PPUSH
45770: LD_INT 0
45772: PPUSH
45773: CALL_OW 109
45777: GO 45745
45779: POP
45780: POP
// end ;
45781: LD_VAR 0 3
45785: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
45786: LD_INT 0
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
// if not mc_bases then
45792: LD_EXP 44
45796: NOT
45797: IFFALSE 45801
// exit ;
45799: GO 45999
// for i = 1 to mc_bases do
45801: LD_ADDR_VAR 0 2
45805: PUSH
45806: DOUBLE
45807: LD_INT 1
45809: DEC
45810: ST_TO_ADDR
45811: LD_EXP 44
45815: PUSH
45816: FOR_TO
45817: IFFALSE 45984
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
45819: LD_ADDR_VAR 0 4
45823: PUSH
45824: LD_EXP 44
45828: PUSH
45829: LD_VAR 0 2
45833: ARRAY
45834: PPUSH
45835: LD_INT 21
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 24
45850: PUSH
45851: LD_INT 1000
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PPUSH
45866: CALL_OW 72
45870: ST_TO_ADDR
// if not tmp then
45871: LD_VAR 0 4
45875: NOT
45876: IFFALSE 45902
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
45878: LD_ADDR_EXP 45
45882: PUSH
45883: LD_EXP 45
45887: PPUSH
45888: LD_VAR 0 2
45892: PPUSH
45893: EMPTY
45894: PPUSH
45895: CALL_OW 1
45899: ST_TO_ADDR
// continue ;
45900: GO 45816
// end ; for j in tmp do
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: LD_VAR 0 4
45911: PUSH
45912: FOR_IN
45913: IFFALSE 45980
// if not j in mc_building_need_repair [ i ] then
45915: LD_VAR 0 3
45919: PUSH
45920: LD_EXP 45
45924: PUSH
45925: LD_VAR 0 2
45929: ARRAY
45930: IN
45931: NOT
45932: IFFALSE 45978
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
45934: LD_ADDR_EXP 45
45938: PUSH
45939: LD_EXP 45
45943: PPUSH
45944: LD_VAR 0 2
45948: PUSH
45949: LD_EXP 45
45953: PUSH
45954: LD_VAR 0 2
45958: ARRAY
45959: PUSH
45960: LD_INT 1
45962: PLUS
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: LD_VAR 0 3
45972: PPUSH
45973: CALL 3142 0 3
45977: ST_TO_ADDR
45978: GO 45912
45980: POP
45981: POP
// end ;
45982: GO 45816
45984: POP
45985: POP
// if mc_building_need_repair then
45986: LD_EXP 45
45990: IFFALSE 45999
// RaiseSailEvent ( 101 ) ;
45992: LD_INT 101
45994: PPUSH
45995: CALL_OW 427
// end ;
45999: LD_VAR 0 1
46003: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
46004: LD_INT 0
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
// if not mc_bases then
46013: LD_EXP 44
46017: NOT
46018: IFFALSE 46022
// exit ;
46020: GO 46545
// for i = 1 to mc_bases do
46022: LD_ADDR_VAR 0 2
46026: PUSH
46027: DOUBLE
46028: LD_INT 1
46030: DEC
46031: ST_TO_ADDR
46032: LD_EXP 44
46036: PUSH
46037: FOR_TO
46038: IFFALSE 46536
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
46040: LD_ADDR_VAR 0 5
46044: PUSH
46045: LD_EXP 44
46049: PUSH
46050: LD_VAR 0 2
46054: ARRAY
46055: PPUSH
46056: LD_INT 21
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 54
46074: PUSH
46075: EMPTY
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: LD_INT 24
46087: PUSH
46088: LD_INT 700
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PPUSH
46108: CALL_OW 72
46112: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
46113: LD_ADDR_VAR 0 6
46117: PUSH
46118: LD_EXP 44
46122: PUSH
46123: LD_VAR 0 2
46127: ARRAY
46128: PPUSH
46129: LD_INT 21
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 54
46147: PUSH
46148: EMPTY
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: LD_INT 24
46160: PUSH
46161: LD_INT 250
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PPUSH
46181: CALL_OW 72
46185: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
46186: LD_ADDR_VAR 0 7
46190: PUSH
46191: LD_VAR 0 5
46195: PUSH
46196: LD_VAR 0 6
46200: DIFF
46201: ST_TO_ADDR
// if not need_heal_1 then
46202: LD_VAR 0 6
46206: NOT
46207: IFFALSE 46240
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
46209: LD_ADDR_EXP 47
46213: PUSH
46214: LD_EXP 47
46218: PPUSH
46219: LD_VAR 0 2
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PPUSH
46231: EMPTY
46232: PPUSH
46233: CALL 3142 0 3
46237: ST_TO_ADDR
46238: GO 46272
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
46240: LD_ADDR_EXP 47
46244: PUSH
46245: LD_EXP 47
46249: PPUSH
46250: LD_VAR 0 2
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PPUSH
46262: LD_VAR 0 6
46266: PPUSH
46267: CALL 3142 0 3
46271: ST_TO_ADDR
// if not need_heal_2 then
46272: LD_VAR 0 7
46276: NOT
46277: IFFALSE 46310
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
46279: LD_ADDR_EXP 47
46283: PUSH
46284: LD_EXP 47
46288: PPUSH
46289: LD_VAR 0 2
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PPUSH
46301: EMPTY
46302: PPUSH
46303: CALL 3142 0 3
46307: ST_TO_ADDR
46308: GO 46342
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
46310: LD_ADDR_EXP 47
46314: PUSH
46315: LD_EXP 47
46319: PPUSH
46320: LD_VAR 0 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PPUSH
46332: LD_VAR 0 7
46336: PPUSH
46337: CALL 3142 0 3
46341: ST_TO_ADDR
// if need_heal_2 then
46342: LD_VAR 0 7
46346: IFFALSE 46518
// for j in need_heal_2 do
46348: LD_ADDR_VAR 0 3
46352: PUSH
46353: LD_VAR 0 7
46357: PUSH
46358: FOR_IN
46359: IFFALSE 46516
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
46361: LD_ADDR_VAR 0 5
46365: PUSH
46366: LD_EXP 44
46370: PUSH
46371: LD_VAR 0 2
46375: ARRAY
46376: PPUSH
46377: LD_INT 2
46379: PUSH
46380: LD_INT 30
46382: PUSH
46383: LD_INT 6
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 30
46392: PUSH
46393: LD_INT 7
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 30
46402: PUSH
46403: LD_INT 8
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 30
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 30
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 25
46432: PUSH
46433: LD_INT 4
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: PPUSH
46449: CALL_OW 72
46453: ST_TO_ADDR
// if tmp then
46454: LD_VAR 0 5
46458: IFFALSE 46514
// begin k := NearestUnitToUnit ( tmp , j ) ;
46460: LD_ADDR_VAR 0 4
46464: PUSH
46465: LD_VAR 0 5
46469: PPUSH
46470: LD_VAR 0 3
46474: PPUSH
46475: CALL_OW 74
46479: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
46480: LD_VAR 0 3
46484: PPUSH
46485: LD_VAR 0 4
46489: PPUSH
46490: CALL_OW 296
46494: PUSH
46495: LD_INT 7
46497: GREATER
46498: IFFALSE 46514
// ComMoveUnit ( j , k ) ;
46500: LD_VAR 0 3
46504: PPUSH
46505: LD_VAR 0 4
46509: PPUSH
46510: CALL_OW 112
// end ; end ;
46514: GO 46358
46516: POP
46517: POP
// if not need_heal_1 and not need_heal_2 then
46518: LD_VAR 0 6
46522: NOT
46523: PUSH
46524: LD_VAR 0 7
46528: NOT
46529: AND
46530: IFFALSE 46534
// continue ;
46532: GO 46037
// end ;
46534: GO 46037
46536: POP
46537: POP
// RaiseSailEvent ( 102 ) ;
46538: LD_INT 102
46540: PPUSH
46541: CALL_OW 427
// end ;
46545: LD_VAR 0 1
46549: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
46550: LD_INT 0
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
// if not mc_bases then
46557: LD_EXP 44
46561: NOT
46562: IFFALSE 46566
// exit ;
46564: GO 46939
// for i = 1 to mc_bases do
46566: LD_ADDR_VAR 0 2
46570: PUSH
46571: DOUBLE
46572: LD_INT 1
46574: DEC
46575: ST_TO_ADDR
46576: LD_EXP 44
46580: PUSH
46581: FOR_TO
46582: IFFALSE 46937
// begin if not mc_building_need_repair [ i ] then
46584: LD_EXP 45
46588: PUSH
46589: LD_VAR 0 2
46593: ARRAY
46594: NOT
46595: IFFALSE 46633
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46597: LD_ADDR_EXP 46
46601: PUSH
46602: LD_EXP 46
46606: PPUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: EMPTY
46613: PPUSH
46614: CALL_OW 1
46618: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
46619: LD_VAR 0 2
46623: PPUSH
46624: LD_INT 101
46626: PPUSH
46627: CALL 45703 0 2
// continue ;
46631: GO 46581
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
46633: LD_ADDR_EXP 50
46637: PUSH
46638: LD_EXP 50
46642: PPUSH
46643: LD_VAR 0 2
46647: PPUSH
46648: EMPTY
46649: PPUSH
46650: CALL_OW 1
46654: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
46655: LD_VAR 0 2
46659: PPUSH
46660: LD_INT 103
46662: PPUSH
46663: CALL 45703 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
46667: LD_ADDR_VAR 0 5
46671: PUSH
46672: LD_EXP 44
46676: PUSH
46677: LD_VAR 0 2
46681: ARRAY
46682: PPUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 25
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 25
46698: PUSH
46699: LD_INT 16
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: PPUSH
46714: CALL_OW 72
46718: ST_TO_ADDR
// if not tmp then
46719: LD_VAR 0 5
46723: NOT
46724: IFFALSE 46728
// continue ;
46726: GO 46581
// for j in tmp do
46728: LD_ADDR_VAR 0 3
46732: PUSH
46733: LD_VAR 0 5
46737: PUSH
46738: FOR_IN
46739: IFFALSE 46933
// begin if mc_need_heal [ i ] then
46741: LD_EXP 47
46745: PUSH
46746: LD_VAR 0 2
46750: ARRAY
46751: IFFALSE 46799
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
46753: LD_VAR 0 3
46757: PUSH
46758: LD_EXP 47
46762: PUSH
46763: LD_VAR 0 2
46767: ARRAY
46768: PUSH
46769: LD_INT 1
46771: ARRAY
46772: IN
46773: PUSH
46774: LD_VAR 0 3
46778: PUSH
46779: LD_EXP 47
46783: PUSH
46784: LD_VAR 0 2
46788: ARRAY
46789: PUSH
46790: LD_INT 2
46792: ARRAY
46793: IN
46794: OR
46795: IFFALSE 46799
// continue ;
46797: GO 46738
// if IsInUnit ( j ) then
46799: LD_VAR 0 3
46803: PPUSH
46804: CALL_OW 310
46808: IFFALSE 46819
// ComExitBuilding ( j ) ;
46810: LD_VAR 0 3
46814: PPUSH
46815: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
46819: LD_VAR 0 3
46823: PUSH
46824: LD_EXP 46
46828: PUSH
46829: LD_VAR 0 2
46833: ARRAY
46834: IN
46835: NOT
46836: IFFALSE 46894
// begin SetTag ( j , 101 ) ;
46838: LD_VAR 0 3
46842: PPUSH
46843: LD_INT 101
46845: PPUSH
46846: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
46850: LD_ADDR_EXP 46
46854: PUSH
46855: LD_EXP 46
46859: PPUSH
46860: LD_VAR 0 2
46864: PUSH
46865: LD_EXP 46
46869: PUSH
46870: LD_VAR 0 2
46874: ARRAY
46875: PUSH
46876: LD_INT 1
46878: PLUS
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PPUSH
46884: LD_VAR 0 3
46888: PPUSH
46889: CALL 3142 0 3
46893: ST_TO_ADDR
// end ; Wait ( 3 ) ;
46894: LD_INT 3
46896: PPUSH
46897: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
46901: LD_VAR 0 3
46905: PPUSH
46906: LD_EXP 45
46910: PUSH
46911: LD_VAR 0 2
46915: ARRAY
46916: PPUSH
46917: LD_VAR 0 3
46921: PPUSH
46922: CALL_OW 74
46926: PPUSH
46927: CALL_OW 130
// end ;
46931: GO 46738
46933: POP
46934: POP
// end ;
46935: GO 46581
46937: POP
46938: POP
// end ;
46939: LD_VAR 0 1
46943: RET
// export function MC_Heal ; var i , j , tmp ; begin
46944: LD_INT 0
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
// if not mc_bases then
46950: LD_EXP 44
46954: NOT
46955: IFFALSE 46959
// exit ;
46957: GO 47324
// for i = 1 to mc_bases do
46959: LD_ADDR_VAR 0 2
46963: PUSH
46964: DOUBLE
46965: LD_INT 1
46967: DEC
46968: ST_TO_ADDR
46969: LD_EXP 44
46973: PUSH
46974: FOR_TO
46975: IFFALSE 47322
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
46977: LD_EXP 47
46981: PUSH
46982: LD_VAR 0 2
46986: ARRAY
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: NOT
46992: PUSH
46993: LD_EXP 47
46997: PUSH
46998: LD_VAR 0 2
47002: ARRAY
47003: PUSH
47004: LD_INT 2
47006: ARRAY
47007: NOT
47008: AND
47009: IFFALSE 47047
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
47011: LD_ADDR_EXP 48
47015: PUSH
47016: LD_EXP 48
47020: PPUSH
47021: LD_VAR 0 2
47025: PPUSH
47026: EMPTY
47027: PPUSH
47028: CALL_OW 1
47032: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
47033: LD_VAR 0 2
47037: PPUSH
47038: LD_INT 102
47040: PPUSH
47041: CALL 45703 0 2
// continue ;
47045: GO 46974
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
47047: LD_ADDR_VAR 0 4
47051: PUSH
47052: LD_EXP 44
47056: PUSH
47057: LD_VAR 0 2
47061: ARRAY
47062: PPUSH
47063: LD_INT 25
47065: PUSH
47066: LD_INT 4
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PPUSH
47073: CALL_OW 72
47077: ST_TO_ADDR
// if not tmp then
47078: LD_VAR 0 4
47082: NOT
47083: IFFALSE 47087
// continue ;
47085: GO 46974
// for j in tmp do
47087: LD_ADDR_VAR 0 3
47091: PUSH
47092: LD_VAR 0 4
47096: PUSH
47097: FOR_IN
47098: IFFALSE 47318
// begin if IsInUnit ( j ) then
47100: LD_VAR 0 3
47104: PPUSH
47105: CALL_OW 310
47109: IFFALSE 47120
// ComExitBuilding ( j ) ;
47111: LD_VAR 0 3
47115: PPUSH
47116: CALL_OW 122
// if not j in mc_healers [ i ] then
47120: LD_VAR 0 3
47124: PUSH
47125: LD_EXP 48
47129: PUSH
47130: LD_VAR 0 2
47134: ARRAY
47135: IN
47136: NOT
47137: IFFALSE 47183
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
47139: LD_ADDR_EXP 48
47143: PUSH
47144: LD_EXP 48
47148: PPUSH
47149: LD_VAR 0 2
47153: PUSH
47154: LD_EXP 48
47158: PUSH
47159: LD_VAR 0 2
47163: ARRAY
47164: PUSH
47165: LD_INT 1
47167: PLUS
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PPUSH
47173: LD_VAR 0 3
47177: PPUSH
47178: CALL 3142 0 3
47182: ST_TO_ADDR
// if not GetTag ( j ) then
47183: LD_VAR 0 3
47187: PPUSH
47188: CALL_OW 110
47192: NOT
47193: IFFALSE 47207
// SetTag ( j , 102 ) ;
47195: LD_VAR 0 3
47199: PPUSH
47200: LD_INT 102
47202: PPUSH
47203: CALL_OW 109
// Wait ( 3 ) ;
47207: LD_INT 3
47209: PPUSH
47210: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
47214: LD_EXP 47
47218: PUSH
47219: LD_VAR 0 2
47223: ARRAY
47224: PUSH
47225: LD_INT 1
47227: ARRAY
47228: IFFALSE 47260
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
47230: LD_VAR 0 3
47234: PPUSH
47235: LD_EXP 47
47239: PUSH
47240: LD_VAR 0 2
47244: ARRAY
47245: PUSH
47246: LD_INT 1
47248: ARRAY
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: CALL_OW 128
47258: GO 47316
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
47260: LD_VAR 0 3
47264: PPUSH
47265: CALL_OW 314
47269: NOT
47270: PUSH
47271: LD_EXP 47
47275: PUSH
47276: LD_VAR 0 2
47280: ARRAY
47281: PUSH
47282: LD_INT 2
47284: ARRAY
47285: AND
47286: IFFALSE 47316
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
47288: LD_VAR 0 3
47292: PPUSH
47293: LD_EXP 47
47297: PUSH
47298: LD_VAR 0 2
47302: ARRAY
47303: PUSH
47304: LD_INT 2
47306: ARRAY
47307: PUSH
47308: LD_INT 1
47310: ARRAY
47311: PPUSH
47312: CALL_OW 128
// end ;
47316: GO 47097
47318: POP
47319: POP
// end ;
47320: GO 46974
47322: POP
47323: POP
// end ;
47324: LD_VAR 0 1
47328: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
47329: LD_INT 0
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
// if not mc_bases then
47335: LD_EXP 44
47339: NOT
47340: IFFALSE 47344
// exit ;
47342: GO 48092
// for i = 1 to mc_bases do
47344: LD_ADDR_VAR 0 2
47348: PUSH
47349: DOUBLE
47350: LD_INT 1
47352: DEC
47353: ST_TO_ADDR
47354: LD_EXP 44
47358: PUSH
47359: FOR_TO
47360: IFFALSE 48090
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
47362: LD_EXP 49
47366: PUSH
47367: LD_VAR 0 2
47371: ARRAY
47372: NOT
47373: PUSH
47374: LD_EXP 51
47378: PUSH
47379: LD_VAR 0 2
47383: ARRAY
47384: NOT
47385: AND
47386: IFFALSE 47424
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
47388: LD_ADDR_EXP 50
47392: PUSH
47393: LD_EXP 50
47397: PPUSH
47398: LD_VAR 0 2
47402: PPUSH
47403: EMPTY
47404: PPUSH
47405: CALL_OW 1
47409: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47410: LD_VAR 0 2
47414: PPUSH
47415: LD_INT 103
47417: PPUSH
47418: CALL 45703 0 2
// continue ;
47422: GO 47359
// end ; if mc_construct_list [ i ] then
47424: LD_EXP 51
47428: PUSH
47429: LD_VAR 0 2
47433: ARRAY
47434: IFFALSE 47639
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47436: LD_ADDR_VAR 0 4
47440: PUSH
47441: LD_EXP 44
47445: PUSH
47446: LD_VAR 0 2
47450: ARRAY
47451: PPUSH
47452: LD_INT 25
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PPUSH
47462: CALL_OW 72
47466: PUSH
47467: LD_EXP 46
47471: PUSH
47472: LD_VAR 0 2
47476: ARRAY
47477: DIFF
47478: ST_TO_ADDR
// if not tmp then
47479: LD_VAR 0 4
47483: NOT
47484: IFFALSE 47488
// continue ;
47486: GO 47359
// for j in tmp do
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: LD_VAR 0 4
47497: PUSH
47498: FOR_IN
47499: IFFALSE 47635
// begin if not mc_builders [ i ] then
47501: LD_EXP 50
47505: PUSH
47506: LD_VAR 0 2
47510: ARRAY
47511: NOT
47512: IFFALSE 47570
// begin SetTag ( j , 103 ) ;
47514: LD_VAR 0 3
47518: PPUSH
47519: LD_INT 103
47521: PPUSH
47522: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47526: LD_ADDR_EXP 50
47530: PUSH
47531: LD_EXP 50
47535: PPUSH
47536: LD_VAR 0 2
47540: PUSH
47541: LD_EXP 50
47545: PUSH
47546: LD_VAR 0 2
47550: ARRAY
47551: PUSH
47552: LD_INT 1
47554: PLUS
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PPUSH
47560: LD_VAR 0 3
47564: PPUSH
47565: CALL 3142 0 3
47569: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47570: LD_VAR 0 3
47574: PPUSH
47575: CALL_OW 310
47579: IFFALSE 47590
// ComExitBuilding ( j ) ;
47581: LD_VAR 0 3
47585: PPUSH
47586: CALL_OW 122
// wait ( 3 ) ;
47590: LD_INT 3
47592: PPUSH
47593: CALL_OW 67
// if not HasTask ( j ) then
47597: LD_VAR 0 3
47601: PPUSH
47602: CALL_OW 314
47606: NOT
47607: IFFALSE 47633
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
47609: LD_VAR 0 3
47613: PPUSH
47614: LD_EXP 51
47618: PUSH
47619: LD_VAR 0 2
47623: ARRAY
47624: PUSH
47625: LD_INT 1
47627: ARRAY
47628: PPUSH
47629: CALL 5542 0 2
// end ;
47633: GO 47498
47635: POP
47636: POP
// end else
47637: GO 48088
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
47639: LD_EXP 49
47643: PUSH
47644: LD_VAR 0 2
47648: ARRAY
47649: PUSH
47650: LD_EXP 44
47654: PUSH
47655: LD_VAR 0 2
47659: ARRAY
47660: PPUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 30
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PPUSH
47689: CALL_OW 72
47693: AND
47694: IFFALSE 48088
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
47696: LD_EXP 44
47700: PUSH
47701: LD_VAR 0 2
47705: ARRAY
47706: PPUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 30
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 30
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: PPUSH
47735: CALL_OW 72
47739: PUSH
47740: LD_INT 1
47742: ARRAY
47743: PPUSH
47744: LD_EXP 49
47748: PUSH
47749: LD_VAR 0 2
47753: ARRAY
47754: PUSH
47755: LD_INT 1
47757: ARRAY
47758: PUSH
47759: LD_INT 1
47761: ARRAY
47762: PPUSH
47763: LD_EXP 49
47767: PUSH
47768: LD_VAR 0 2
47772: ARRAY
47773: PUSH
47774: LD_INT 1
47776: ARRAY
47777: PUSH
47778: LD_INT 2
47780: ARRAY
47781: PPUSH
47782: LD_EXP 49
47786: PUSH
47787: LD_VAR 0 2
47791: ARRAY
47792: PUSH
47793: LD_INT 1
47795: ARRAY
47796: PUSH
47797: LD_INT 3
47799: ARRAY
47800: PPUSH
47801: LD_EXP 49
47805: PUSH
47806: LD_VAR 0 2
47810: ARRAY
47811: PUSH
47812: LD_INT 1
47814: ARRAY
47815: PUSH
47816: LD_INT 4
47818: ARRAY
47819: PPUSH
47820: CALL 8612 0 5
47824: IFFALSE 48088
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47826: LD_ADDR_VAR 0 4
47830: PUSH
47831: LD_EXP 44
47835: PUSH
47836: LD_VAR 0 2
47840: ARRAY
47841: PPUSH
47842: LD_INT 25
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PPUSH
47852: CALL_OW 72
47856: PUSH
47857: LD_EXP 46
47861: PUSH
47862: LD_VAR 0 2
47866: ARRAY
47867: DIFF
47868: ST_TO_ADDR
// if not tmp then
47869: LD_VAR 0 4
47873: NOT
47874: IFFALSE 47878
// continue ;
47876: GO 47359
// for j in tmp do
47878: LD_ADDR_VAR 0 3
47882: PUSH
47883: LD_VAR 0 4
47887: PUSH
47888: FOR_IN
47889: IFFALSE 48086
// begin if not mc_builders [ i ] then
47891: LD_EXP 50
47895: PUSH
47896: LD_VAR 0 2
47900: ARRAY
47901: NOT
47902: IFFALSE 47960
// begin SetTag ( j , 103 ) ;
47904: LD_VAR 0 3
47908: PPUSH
47909: LD_INT 103
47911: PPUSH
47912: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47916: LD_ADDR_EXP 50
47920: PUSH
47921: LD_EXP 50
47925: PPUSH
47926: LD_VAR 0 2
47930: PUSH
47931: LD_EXP 50
47935: PUSH
47936: LD_VAR 0 2
47940: ARRAY
47941: PUSH
47942: LD_INT 1
47944: PLUS
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PPUSH
47950: LD_VAR 0 3
47954: PPUSH
47955: CALL 3142 0 3
47959: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47960: LD_VAR 0 3
47964: PPUSH
47965: CALL_OW 310
47969: IFFALSE 47980
// ComExitBuilding ( j ) ;
47971: LD_VAR 0 3
47975: PPUSH
47976: CALL_OW 122
// wait ( 3 ) ;
47980: LD_INT 3
47982: PPUSH
47983: CALL_OW 67
// if not HasTask ( j ) then
47987: LD_VAR 0 3
47991: PPUSH
47992: CALL_OW 314
47996: NOT
47997: IFFALSE 48084
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
47999: LD_VAR 0 3
48003: PPUSH
48004: LD_EXP 49
48008: PUSH
48009: LD_VAR 0 2
48013: ARRAY
48014: PUSH
48015: LD_INT 1
48017: ARRAY
48018: PUSH
48019: LD_INT 1
48021: ARRAY
48022: PPUSH
48023: LD_EXP 49
48027: PUSH
48028: LD_VAR 0 2
48032: ARRAY
48033: PUSH
48034: LD_INT 1
48036: ARRAY
48037: PUSH
48038: LD_INT 2
48040: ARRAY
48041: PPUSH
48042: LD_EXP 49
48046: PUSH
48047: LD_VAR 0 2
48051: ARRAY
48052: PUSH
48053: LD_INT 1
48055: ARRAY
48056: PUSH
48057: LD_INT 3
48059: ARRAY
48060: PPUSH
48061: LD_EXP 49
48065: PUSH
48066: LD_VAR 0 2
48070: ARRAY
48071: PUSH
48072: LD_INT 1
48074: ARRAY
48075: PUSH
48076: LD_INT 4
48078: ARRAY
48079: PPUSH
48080: CALL_OW 145
// end ;
48084: GO 47888
48086: POP
48087: POP
// end ; end ;
48088: GO 47359
48090: POP
48091: POP
// end ;
48092: LD_VAR 0 1
48096: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
48097: LD_INT 0
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
// if not mc_bases then
48106: LD_EXP 44
48110: NOT
48111: IFFALSE 48115
// exit ;
48113: GO 48411
// for i = 1 to mc_bases do
48115: LD_ADDR_VAR 0 2
48119: PUSH
48120: DOUBLE
48121: LD_INT 1
48123: DEC
48124: ST_TO_ADDR
48125: LD_EXP 44
48129: PUSH
48130: FOR_TO
48131: IFFALSE 48409
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
48133: LD_EXP 52
48137: PUSH
48138: LD_VAR 0 2
48142: ARRAY
48143: NOT
48144: PUSH
48145: LD_EXP 44
48149: PUSH
48150: LD_VAR 0 2
48154: ARRAY
48155: PPUSH
48156: LD_INT 30
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PPUSH
48166: CALL_OW 72
48170: NOT
48171: OR
48172: IFFALSE 48176
// continue ;
48174: GO 48130
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
48176: LD_EXP 52
48180: PUSH
48181: LD_VAR 0 2
48185: ARRAY
48186: PUSH
48187: LD_INT 1
48189: ARRAY
48190: PPUSH
48191: CALL_OW 269
48195: IFFALSE 48261
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
48197: LD_ADDR_VAR 0 4
48201: PUSH
48202: LD_EXP 52
48206: PUSH
48207: LD_VAR 0 2
48211: ARRAY
48212: PPUSH
48213: LD_INT 1
48215: PPUSH
48216: CALL_OW 3
48220: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
48221: LD_ADDR_EXP 52
48225: PUSH
48226: LD_EXP 52
48230: PPUSH
48231: LD_VAR 0 2
48235: PPUSH
48236: LD_VAR 0 4
48240: PPUSH
48241: CALL_OW 1
48245: ST_TO_ADDR
// if not mc_turret_list [ i ] then
48246: LD_EXP 52
48250: PUSH
48251: LD_VAR 0 2
48255: ARRAY
48256: NOT
48257: IFFALSE 48261
// continue ;
48259: GO 48130
// end ; busy := false ;
48261: LD_ADDR_VAR 0 6
48265: PUSH
48266: LD_INT 0
48268: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48269: LD_ADDR_VAR 0 4
48273: PUSH
48274: LD_EXP 44
48278: PUSH
48279: LD_VAR 0 2
48283: ARRAY
48284: PPUSH
48285: LD_INT 30
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PPUSH
48295: CALL_OW 72
48299: ST_TO_ADDR
// for j in tmp do
48300: LD_ADDR_VAR 0 3
48304: PUSH
48305: LD_VAR 0 4
48309: PUSH
48310: FOR_IN
48311: IFFALSE 48339
// if not BuildingStatus ( j ) = bs_idle then
48313: LD_VAR 0 3
48317: PPUSH
48318: CALL_OW 461
48322: PUSH
48323: LD_INT 2
48325: EQUAL
48326: NOT
48327: IFFALSE 48337
// busy := true ;
48329: LD_ADDR_VAR 0 6
48333: PUSH
48334: LD_INT 1
48336: ST_TO_ADDR
48337: GO 48310
48339: POP
48340: POP
// if busy then
48341: LD_VAR 0 6
48345: IFFALSE 48349
// continue ;
48347: GO 48130
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
48349: LD_ADDR_VAR 0 7
48353: PUSH
48354: LD_EXP 52
48358: PUSH
48359: LD_VAR 0 2
48363: ARRAY
48364: PUSH
48365: LD_INT 1
48367: ARRAY
48368: PPUSH
48369: CALL 7101 0 1
48373: ST_TO_ADDR
// if not weapon then
48374: LD_VAR 0 7
48378: NOT
48379: IFFALSE 48383
// continue ;
48381: GO 48130
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
48383: LD_EXP 52
48387: PUSH
48388: LD_VAR 0 2
48392: ARRAY
48393: PUSH
48394: LD_INT 1
48396: ARRAY
48397: PPUSH
48398: LD_VAR 0 7
48402: PPUSH
48403: CALL_OW 148
// end ;
48407: GO 48130
48409: POP
48410: POP
// end ;
48411: LD_VAR 0 1
48415: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
48416: LD_INT 0
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
// if not mc_bases then
48425: LD_EXP 44
48429: NOT
48430: IFFALSE 48434
// exit ;
48432: GO 49225
// for i = 1 to mc_bases do
48434: LD_ADDR_VAR 0 2
48438: PUSH
48439: DOUBLE
48440: LD_INT 1
48442: DEC
48443: ST_TO_ADDR
48444: LD_EXP 44
48448: PUSH
48449: FOR_TO
48450: IFFALSE 49223
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
48452: LD_ADDR_VAR 0 7
48456: PUSH
48457: LD_EXP 44
48461: PUSH
48462: LD_VAR 0 2
48466: ARRAY
48467: PPUSH
48468: LD_INT 24
48470: PUSH
48471: LD_INT 375
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 30
48483: PUSH
48484: LD_INT 32
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 30
48493: PUSH
48494: LD_INT 31
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 58
48508: PUSH
48509: EMPTY
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: PPUSH
48517: CALL_OW 72
48521: ST_TO_ADDR
// if not x then
48522: LD_VAR 0 7
48526: NOT
48527: IFFALSE 48531
// continue ;
48529: GO 48449
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
48531: LD_ADDR_EXP 53
48535: PUSH
48536: LD_EXP 53
48540: PPUSH
48541: LD_VAR 0 2
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PPUSH
48553: LD_VAR 0 7
48557: PPUSH
48558: CALL 3142 0 3
48562: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
48563: LD_EXP 53
48567: PUSH
48568: LD_VAR 0 2
48572: ARRAY
48573: NOT
48574: PUSH
48575: LD_EXP 53
48579: PUSH
48580: LD_VAR 0 2
48584: ARRAY
48585: PUSH
48586: LD_INT 1
48588: ARRAY
48589: NOT
48590: OR
48591: PUSH
48592: LD_EXP 53
48596: PUSH
48597: LD_VAR 0 2
48601: ARRAY
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PUSH
48607: LD_INT 1
48609: ARRAY
48610: NOT
48611: OR
48612: IFFALSE 48616
// continue ;
48614: GO 48449
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
48616: LD_EXP 53
48620: PUSH
48621: LD_VAR 0 2
48625: ARRAY
48626: PUSH
48627: LD_INT 1
48629: ARRAY
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: CALL_OW 313
48639: PUSH
48640: LD_INT 0
48642: EQUAL
48643: IFFALSE 49221
// if not mc_empty_turret_list [ i ] [ 2 ] then
48645: LD_EXP 53
48649: PUSH
48650: LD_VAR 0 2
48654: ARRAY
48655: PUSH
48656: LD_INT 2
48658: ARRAY
48659: NOT
48660: IFFALSE 48919
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
48662: LD_ADDR_VAR 0 6
48666: PUSH
48667: LD_EXP 44
48671: PUSH
48672: LD_VAR 0 2
48676: ARRAY
48677: PUSH
48678: LD_EXP 60
48682: PUSH
48683: LD_VAR 0 2
48687: ARRAY
48688: DIFF
48689: PPUSH
48690: LD_INT 25
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 54
48705: PUSH
48706: EMPTY
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PPUSH
48717: CALL_OW 72
48721: ST_TO_ADDR
// if tmp2 then
48722: LD_VAR 0 6
48726: IFFALSE 48768
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
48728: LD_ADDR_EXP 53
48732: PUSH
48733: LD_EXP 53
48737: PPUSH
48738: LD_VAR 0 2
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PPUSH
48750: LD_VAR 0 6
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: PPUSH
48759: CALL 3142 0 3
48763: ST_TO_ADDR
// break ;
48764: GO 49223
// end else
48766: GO 48917
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
48768: LD_ADDR_VAR 0 5
48772: PUSH
48773: LD_EXP 44
48777: PUSH
48778: LD_VAR 0 2
48782: ARRAY
48783: PPUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 30
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 30
48799: PUSH
48800: LD_INT 5
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: PPUSH
48812: CALL_OW 72
48816: ST_TO_ADDR
// if not tmp then
48817: LD_VAR 0 5
48821: NOT
48822: IFFALSE 48826
// continue ;
48824: GO 48449
// for j in tmp do
48826: LD_ADDR_VAR 0 3
48830: PUSH
48831: LD_VAR 0 5
48835: PUSH
48836: FOR_IN
48837: IFFALSE 48915
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
48839: LD_ADDR_VAR 0 4
48843: PUSH
48844: LD_VAR 0 3
48848: PPUSH
48849: CALL_OW 313
48853: PPUSH
48854: LD_INT 25
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PPUSH
48864: CALL_OW 72
48868: ST_TO_ADDR
// if t then
48869: LD_VAR 0 4
48873: IFFALSE 48913
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
48875: LD_ADDR_EXP 53
48879: PUSH
48880: LD_EXP 53
48884: PPUSH
48885: LD_VAR 0 2
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PPUSH
48897: LD_VAR 0 4
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: PPUSH
48906: CALL 3142 0 3
48910: ST_TO_ADDR
// break ;
48911: GO 48915
// end ; end ;
48913: GO 48836
48915: POP
48916: POP
// end ; end else
48917: GO 49221
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
48919: LD_EXP 53
48923: PUSH
48924: LD_VAR 0 2
48928: ARRAY
48929: PUSH
48930: LD_INT 2
48932: ARRAY
48933: PUSH
48934: LD_INT 1
48936: ARRAY
48937: PPUSH
48938: CALL_OW 301
48942: IFFALSE 48975
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
48944: LD_ADDR_EXP 53
48948: PUSH
48949: LD_EXP 53
48953: PPUSH
48954: LD_VAR 0 2
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PPUSH
48966: EMPTY
48967: PPUSH
48968: CALL 3142 0 3
48972: ST_TO_ADDR
// break ;
48973: GO 49223
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
48975: LD_EXP 53
48979: PUSH
48980: LD_VAR 0 2
48984: ARRAY
48985: PUSH
48986: LD_INT 2
48988: ARRAY
48989: PUSH
48990: LD_INT 1
48992: ARRAY
48993: PPUSH
48994: CALL_OW 314
48998: NOT
48999: PUSH
49000: LD_EXP 53
49004: PUSH
49005: LD_VAR 0 2
49009: ARRAY
49010: PUSH
49011: LD_INT 2
49013: ARRAY
49014: PUSH
49015: LD_INT 1
49017: ARRAY
49018: PUSH
49019: LD_EXP 53
49023: PUSH
49024: LD_VAR 0 2
49028: ARRAY
49029: PUSH
49030: LD_INT 1
49032: ARRAY
49033: PUSH
49034: LD_INT 1
49036: ARRAY
49037: PPUSH
49038: CALL_OW 313
49042: IN
49043: NOT
49044: AND
49045: IFFALSE 49221
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
49047: LD_EXP 53
49051: PUSH
49052: LD_VAR 0 2
49056: ARRAY
49057: PUSH
49058: LD_INT 2
49060: ARRAY
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: CALL_OW 310
49070: IFFALSE 49095
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49072: LD_EXP 53
49076: PUSH
49077: LD_VAR 0 2
49081: ARRAY
49082: PUSH
49083: LD_INT 2
49085: ARRAY
49086: PUSH
49087: LD_INT 1
49089: ARRAY
49090: PPUSH
49091: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
49095: LD_EXP 53
49099: PUSH
49100: LD_VAR 0 2
49104: ARRAY
49105: PUSH
49106: LD_INT 2
49108: ARRAY
49109: PUSH
49110: LD_INT 1
49112: ARRAY
49113: PPUSH
49114: LD_EXP 53
49118: PUSH
49119: LD_VAR 0 2
49123: ARRAY
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: PPUSH
49133: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
49137: LD_INT 35
49139: PPUSH
49140: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
49144: LD_EXP 53
49148: PUSH
49149: LD_VAR 0 2
49153: ARRAY
49154: PUSH
49155: LD_INT 2
49157: ARRAY
49158: NOT
49159: IFFALSE 49163
// break ;
49161: GO 49188
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49163: LD_EXP 53
49167: PUSH
49168: LD_VAR 0 2
49172: ARRAY
49173: PUSH
49174: LD_INT 2
49176: ARRAY
49177: PUSH
49178: LD_INT 1
49180: ARRAY
49181: PPUSH
49182: CALL_OW 310
49186: IFFALSE 49137
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49188: LD_ADDR_EXP 53
49192: PUSH
49193: LD_EXP 53
49197: PPUSH
49198: LD_VAR 0 2
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PPUSH
49210: EMPTY
49211: PPUSH
49212: CALL 3142 0 3
49216: ST_TO_ADDR
// exit ;
49217: POP
49218: POP
49219: GO 49225
// end ; end ; end ;
49221: GO 48449
49223: POP
49224: POP
// end ;
49225: LD_VAR 0 1
49229: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
49230: LD_INT 0
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
// if not mc_bases then
49238: LD_EXP 44
49242: NOT
49243: IFFALSE 49247
// exit ;
49245: GO 50155
// for i = 1 to mc_bases do
49247: LD_ADDR_VAR 0 2
49251: PUSH
49252: DOUBLE
49253: LD_INT 1
49255: DEC
49256: ST_TO_ADDR
49257: LD_EXP 44
49261: PUSH
49262: FOR_TO
49263: IFFALSE 50153
// begin if mc_minefields [ i ] and mc_miners [ i ] then
49265: LD_EXP 56
49269: PUSH
49270: LD_VAR 0 2
49274: ARRAY
49275: PUSH
49276: LD_EXP 55
49280: PUSH
49281: LD_VAR 0 2
49285: ARRAY
49286: AND
49287: IFFALSE 49363
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
49289: LD_EXP 56
49293: PUSH
49294: LD_VAR 0 2
49298: ARRAY
49299: PPUSH
49300: LD_INT 81
49302: PUSH
49303: LD_EXP 55
49307: PUSH
49308: LD_VAR 0 2
49312: ARRAY
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: PPUSH
49318: CALL_OW 255
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 21
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 21
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PPUSH
49359: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
49363: LD_EXP 54
49367: PUSH
49368: LD_VAR 0 2
49372: ARRAY
49373: NOT
49374: PUSH
49375: LD_EXP 54
49379: PUSH
49380: LD_VAR 0 2
49384: ARRAY
49385: PUSH
49386: LD_EXP 55
49390: PUSH
49391: LD_VAR 0 2
49395: ARRAY
49396: EQUAL
49397: OR
49398: IFFALSE 49402
// continue ;
49400: GO 49262
// if mc_miners [ i ] then
49402: LD_EXP 55
49406: PUSH
49407: LD_VAR 0 2
49411: ARRAY
49412: IFFALSE 49840
// for j = 1 to mc_miners [ i ] do
49414: LD_ADDR_VAR 0 3
49418: PUSH
49419: DOUBLE
49420: LD_INT 1
49422: DEC
49423: ST_TO_ADDR
49424: LD_EXP 55
49428: PUSH
49429: LD_VAR 0 2
49433: ARRAY
49434: PUSH
49435: FOR_TO
49436: IFFALSE 49838
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
49438: LD_EXP 55
49442: PUSH
49443: LD_VAR 0 2
49447: ARRAY
49448: PUSH
49449: LD_VAR 0 3
49453: ARRAY
49454: PPUSH
49455: CALL_OW 301
49459: IFFALSE 49541
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
49461: LD_ADDR_VAR 0 5
49465: PUSH
49466: LD_EXP 55
49470: PUSH
49471: LD_VAR 0 2
49475: ARRAY
49476: PUSH
49477: LD_EXP 55
49481: PUSH
49482: LD_VAR 0 2
49486: ARRAY
49487: PUSH
49488: LD_VAR 0 3
49492: ARRAY
49493: DIFF
49494: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
49495: LD_ADDR_EXP 55
49499: PUSH
49500: LD_EXP 55
49504: PPUSH
49505: LD_VAR 0 2
49509: PUSH
49510: LD_EXP 55
49514: PUSH
49515: LD_VAR 0 2
49519: ARRAY
49520: PUSH
49521: LD_INT 1
49523: PLUS
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PPUSH
49529: LD_VAR 0 5
49533: PPUSH
49534: CALL_OW 1
49538: ST_TO_ADDR
// continue ;
49539: GO 49435
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
49541: LD_EXP 55
49545: PUSH
49546: LD_VAR 0 2
49550: ARRAY
49551: PUSH
49552: LD_VAR 0 3
49556: ARRAY
49557: PPUSH
49558: CALL_OW 459
49562: NOT
49563: PUSH
49564: LD_EXP 55
49568: PUSH
49569: LD_VAR 0 2
49573: ARRAY
49574: PUSH
49575: LD_VAR 0 3
49579: ARRAY
49580: PPUSH
49581: CALL_OW 255
49585: PPUSH
49586: LD_EXP 54
49590: PUSH
49591: LD_VAR 0 2
49595: ARRAY
49596: PUSH
49597: LD_VAR 0 3
49601: ARRAY
49602: PUSH
49603: LD_INT 1
49605: ARRAY
49606: PPUSH
49607: LD_EXP 54
49611: PUSH
49612: LD_VAR 0 2
49616: ARRAY
49617: PUSH
49618: LD_VAR 0 3
49622: ARRAY
49623: PUSH
49624: LD_INT 2
49626: ARRAY
49627: PPUSH
49628: LD_INT 12
49630: PPUSH
49631: CALL 3636 0 4
49635: PUSH
49636: LD_INT 4
49638: ARRAY
49639: PUSH
49640: LD_INT 0
49642: EQUAL
49643: AND
49644: IFFALSE 49836
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
49646: LD_EXP 55
49650: PUSH
49651: LD_VAR 0 2
49655: ARRAY
49656: PUSH
49657: LD_VAR 0 3
49661: ARRAY
49662: PPUSH
49663: CALL_OW 310
49667: IFFALSE 49690
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
49669: LD_EXP 55
49673: PUSH
49674: LD_VAR 0 2
49678: ARRAY
49679: PUSH
49680: LD_VAR 0 3
49684: ARRAY
49685: PPUSH
49686: CALL_OW 122
// wait ( 3 ) ;
49690: LD_INT 3
49692: PPUSH
49693: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
49697: LD_EXP 54
49701: PUSH
49702: LD_VAR 0 2
49706: ARRAY
49707: PUSH
49708: LD_VAR 0 3
49712: ARRAY
49713: PUSH
49714: LD_INT 1
49716: ARRAY
49717: PPUSH
49718: LD_EXP 54
49722: PUSH
49723: LD_VAR 0 2
49727: ARRAY
49728: PUSH
49729: LD_VAR 0 3
49733: ARRAY
49734: PUSH
49735: LD_INT 2
49737: ARRAY
49738: PPUSH
49739: CALL_OW 458
49743: NOT
49744: PUSH
49745: LD_EXP 55
49749: PUSH
49750: LD_VAR 0 2
49754: ARRAY
49755: PUSH
49756: LD_VAR 0 3
49760: ARRAY
49761: PPUSH
49762: CALL_OW 314
49766: NOT
49767: AND
49768: IFFALSE 49836
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
49770: LD_EXP 55
49774: PUSH
49775: LD_VAR 0 2
49779: ARRAY
49780: PUSH
49781: LD_VAR 0 3
49785: ARRAY
49786: PPUSH
49787: LD_EXP 54
49791: PUSH
49792: LD_VAR 0 2
49796: ARRAY
49797: PUSH
49798: LD_VAR 0 3
49802: ARRAY
49803: PUSH
49804: LD_INT 1
49806: ARRAY
49807: PPUSH
49808: LD_EXP 54
49812: PUSH
49813: LD_VAR 0 2
49817: ARRAY
49818: PUSH
49819: LD_VAR 0 3
49823: ARRAY
49824: PUSH
49825: LD_INT 2
49827: ARRAY
49828: PPUSH
49829: LD_INT 0
49831: PPUSH
49832: CALL_OW 133
// end ; end ;
49836: GO 49435
49838: POP
49839: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
49840: LD_ADDR_VAR 0 5
49844: PUSH
49845: LD_EXP 44
49849: PUSH
49850: LD_VAR 0 2
49854: ARRAY
49855: PPUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 30
49861: PUSH
49862: LD_INT 4
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 30
49871: PUSH
49872: LD_INT 5
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: LD_INT 32
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: PPUSH
49895: CALL_OW 72
49899: ST_TO_ADDR
// if not tmp then
49900: LD_VAR 0 5
49904: NOT
49905: IFFALSE 49909
// continue ;
49907: GO 49262
// list := [ ] ;
49909: LD_ADDR_VAR 0 6
49913: PUSH
49914: EMPTY
49915: ST_TO_ADDR
// for j in tmp do
49916: LD_ADDR_VAR 0 3
49920: PUSH
49921: LD_VAR 0 5
49925: PUSH
49926: FOR_IN
49927: IFFALSE 49996
// begin for k in UnitsInside ( j ) do
49929: LD_ADDR_VAR 0 4
49933: PUSH
49934: LD_VAR 0 3
49938: PPUSH
49939: CALL_OW 313
49943: PUSH
49944: FOR_IN
49945: IFFALSE 49992
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
49947: LD_VAR 0 4
49951: PPUSH
49952: CALL_OW 257
49956: PUSH
49957: LD_INT 1
49959: EQUAL
49960: PUSH
49961: LD_VAR 0 4
49965: PPUSH
49966: CALL_OW 459
49970: NOT
49971: AND
49972: IFFALSE 49990
// list := list ^ k ;
49974: LD_ADDR_VAR 0 6
49978: PUSH
49979: LD_VAR 0 6
49983: PUSH
49984: LD_VAR 0 4
49988: ADD
49989: ST_TO_ADDR
49990: GO 49944
49992: POP
49993: POP
// end ;
49994: GO 49926
49996: POP
49997: POP
// list := list diff mc_miners [ i ] ;
49998: LD_ADDR_VAR 0 6
50002: PUSH
50003: LD_VAR 0 6
50007: PUSH
50008: LD_EXP 55
50012: PUSH
50013: LD_VAR 0 2
50017: ARRAY
50018: DIFF
50019: ST_TO_ADDR
// if not list then
50020: LD_VAR 0 6
50024: NOT
50025: IFFALSE 50029
// continue ;
50027: GO 49262
// k := mc_mines [ i ] - mc_miners [ i ] ;
50029: LD_ADDR_VAR 0 4
50033: PUSH
50034: LD_EXP 54
50038: PUSH
50039: LD_VAR 0 2
50043: ARRAY
50044: PUSH
50045: LD_EXP 55
50049: PUSH
50050: LD_VAR 0 2
50054: ARRAY
50055: MINUS
50056: ST_TO_ADDR
// if k > list then
50057: LD_VAR 0 4
50061: PUSH
50062: LD_VAR 0 6
50066: GREATER
50067: IFFALSE 50079
// k := list ;
50069: LD_ADDR_VAR 0 4
50073: PUSH
50074: LD_VAR 0 6
50078: ST_TO_ADDR
// for j = 1 to k do
50079: LD_ADDR_VAR 0 3
50083: PUSH
50084: DOUBLE
50085: LD_INT 1
50087: DEC
50088: ST_TO_ADDR
50089: LD_VAR 0 4
50093: PUSH
50094: FOR_TO
50095: IFFALSE 50149
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
50097: LD_ADDR_EXP 55
50101: PUSH
50102: LD_EXP 55
50106: PPUSH
50107: LD_VAR 0 2
50111: PUSH
50112: LD_EXP 55
50116: PUSH
50117: LD_VAR 0 2
50121: ARRAY
50122: PUSH
50123: LD_INT 1
50125: PLUS
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PPUSH
50131: LD_VAR 0 6
50135: PUSH
50136: LD_VAR 0 3
50140: ARRAY
50141: PPUSH
50142: CALL 3142 0 3
50146: ST_TO_ADDR
50147: GO 50094
50149: POP
50150: POP
// end ;
50151: GO 49262
50153: POP
50154: POP
// end ;
50155: LD_VAR 0 1
50159: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
50160: LD_INT 0
50162: PPUSH
50163: PPUSH
50164: PPUSH
50165: PPUSH
50166: PPUSH
// if not mc_bases then
50167: LD_EXP 44
50171: NOT
50172: IFFALSE 50176
// exit ;
50174: GO 50952
// for i = 1 to mc_bases do
50176: LD_ADDR_VAR 0 2
50180: PUSH
50181: DOUBLE
50182: LD_INT 1
50184: DEC
50185: ST_TO_ADDR
50186: LD_EXP 44
50190: PUSH
50191: FOR_TO
50192: IFFALSE 50950
// begin if not mc_bases [ i ] then
50194: LD_EXP 44
50198: PUSH
50199: LD_VAR 0 2
50203: ARRAY
50204: NOT
50205: IFFALSE 50209
// continue ;
50207: GO 50191
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
50209: LD_EXP 57
50213: PUSH
50214: LD_VAR 0 2
50218: ARRAY
50219: NOT
50220: PUSH
50221: LD_EXP 58
50225: PUSH
50226: LD_VAR 0 2
50230: ARRAY
50231: AND
50232: IFFALSE 50270
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50234: LD_ADDR_EXP 58
50238: PUSH
50239: LD_EXP 58
50243: PPUSH
50244: LD_VAR 0 2
50248: PPUSH
50249: EMPTY
50250: PPUSH
50251: CALL_OW 1
50255: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
50256: LD_VAR 0 2
50260: PPUSH
50261: LD_INT 107
50263: PPUSH
50264: CALL 45703 0 2
// continue ;
50268: GO 50191
// end ; target := [ ] ;
50270: LD_ADDR_VAR 0 5
50274: PUSH
50275: EMPTY
50276: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
50277: LD_ADDR_VAR 0 3
50281: PUSH
50282: DOUBLE
50283: LD_EXP 57
50287: PUSH
50288: LD_VAR 0 2
50292: ARRAY
50293: INC
50294: ST_TO_ADDR
50295: LD_INT 1
50297: PUSH
50298: FOR_DOWNTO
50299: IFFALSE 50559
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
50301: LD_EXP 57
50305: PUSH
50306: LD_VAR 0 2
50310: ARRAY
50311: PUSH
50312: LD_VAR 0 3
50316: ARRAY
50317: PUSH
50318: LD_INT 2
50320: ARRAY
50321: PPUSH
50322: LD_EXP 57
50326: PUSH
50327: LD_VAR 0 2
50331: ARRAY
50332: PUSH
50333: LD_VAR 0 3
50337: ARRAY
50338: PUSH
50339: LD_INT 3
50341: ARRAY
50342: PPUSH
50343: CALL_OW 488
50347: PUSH
50348: LD_EXP 57
50352: PUSH
50353: LD_VAR 0 2
50357: ARRAY
50358: PUSH
50359: LD_VAR 0 3
50363: ARRAY
50364: PUSH
50365: LD_INT 2
50367: ARRAY
50368: PPUSH
50369: LD_EXP 57
50373: PUSH
50374: LD_VAR 0 2
50378: ARRAY
50379: PUSH
50380: LD_VAR 0 3
50384: ARRAY
50385: PUSH
50386: LD_INT 3
50388: ARRAY
50389: PPUSH
50390: CALL_OW 284
50394: PUSH
50395: LD_INT 0
50397: EQUAL
50398: AND
50399: IFFALSE 50454
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
50401: LD_ADDR_VAR 0 4
50405: PUSH
50406: LD_EXP 57
50410: PUSH
50411: LD_VAR 0 2
50415: ARRAY
50416: PPUSH
50417: LD_VAR 0 3
50421: PPUSH
50422: CALL_OW 3
50426: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
50427: LD_ADDR_EXP 57
50431: PUSH
50432: LD_EXP 57
50436: PPUSH
50437: LD_VAR 0 2
50441: PPUSH
50442: LD_VAR 0 4
50446: PPUSH
50447: CALL_OW 1
50451: ST_TO_ADDR
// continue ;
50452: GO 50298
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
50454: LD_EXP 44
50458: PUSH
50459: LD_VAR 0 2
50463: ARRAY
50464: PUSH
50465: LD_INT 1
50467: ARRAY
50468: PPUSH
50469: CALL_OW 255
50473: PPUSH
50474: LD_EXP 57
50478: PUSH
50479: LD_VAR 0 2
50483: ARRAY
50484: PUSH
50485: LD_VAR 0 3
50489: ARRAY
50490: PUSH
50491: LD_INT 2
50493: ARRAY
50494: PPUSH
50495: LD_EXP 57
50499: PUSH
50500: LD_VAR 0 2
50504: ARRAY
50505: PUSH
50506: LD_VAR 0 3
50510: ARRAY
50511: PUSH
50512: LD_INT 3
50514: ARRAY
50515: PPUSH
50516: LD_INT 20
50518: PPUSH
50519: CALL 3636 0 4
50523: PUSH
50524: LD_INT 4
50526: ARRAY
50527: PUSH
50528: LD_INT 0
50530: EQUAL
50531: IFFALSE 50557
// begin target := mc_crates [ i ] [ j ] ;
50533: LD_ADDR_VAR 0 5
50537: PUSH
50538: LD_EXP 57
50542: PUSH
50543: LD_VAR 0 2
50547: ARRAY
50548: PUSH
50549: LD_VAR 0 3
50553: ARRAY
50554: ST_TO_ADDR
// break ;
50555: GO 50559
// end ; end ;
50557: GO 50298
50559: POP
50560: POP
// if not target then
50561: LD_VAR 0 5
50565: NOT
50566: IFFALSE 50570
// continue ;
50568: GO 50191
// if mc_crates_collector [ i ] < 5 then
50570: LD_EXP 58
50574: PUSH
50575: LD_VAR 0 2
50579: ARRAY
50580: PUSH
50581: LD_INT 5
50583: LESS
50584: IFFALSE 50764
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
50586: LD_ADDR_VAR 0 4
50590: PUSH
50591: LD_EXP 44
50595: PUSH
50596: LD_VAR 0 2
50600: ARRAY
50601: PPUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 25
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 25
50617: PUSH
50618: LD_INT 16
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 24
50632: PUSH
50633: LD_INT 750
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PPUSH
50644: CALL_OW 72
50648: ST_TO_ADDR
// if not tmp then
50649: LD_VAR 0 4
50653: NOT
50654: IFFALSE 50658
// continue ;
50656: GO 50191
// for j in tmp do
50658: LD_ADDR_VAR 0 3
50662: PUSH
50663: LD_VAR 0 4
50667: PUSH
50668: FOR_IN
50669: IFFALSE 50762
// if GetTag ( j ) = 0 then
50671: LD_VAR 0 3
50675: PPUSH
50676: CALL_OW 110
50680: PUSH
50681: LD_INT 0
50683: EQUAL
50684: IFFALSE 50760
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
50686: LD_ADDR_EXP 58
50690: PUSH
50691: LD_EXP 58
50695: PPUSH
50696: LD_VAR 0 2
50700: PUSH
50701: LD_EXP 58
50705: PUSH
50706: LD_VAR 0 2
50710: ARRAY
50711: PUSH
50712: LD_INT 1
50714: PLUS
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PPUSH
50720: LD_VAR 0 3
50724: PPUSH
50725: CALL 3142 0 3
50729: ST_TO_ADDR
// SetTag ( j , 107 ) ;
50730: LD_VAR 0 3
50734: PPUSH
50735: LD_INT 107
50737: PPUSH
50738: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
50742: LD_EXP 58
50746: PUSH
50747: LD_VAR 0 2
50751: ARRAY
50752: PUSH
50753: LD_INT 5
50755: GREATER
50756: IFFALSE 50760
// break ;
50758: GO 50762
// end ;
50760: GO 50668
50762: POP
50763: POP
// end ; if mc_crates_collector [ i ] and target then
50764: LD_EXP 58
50768: PUSH
50769: LD_VAR 0 2
50773: ARRAY
50774: PUSH
50775: LD_VAR 0 5
50779: AND
50780: IFFALSE 50948
// begin if mc_crates_collector [ i ] < target [ 1 ] then
50782: LD_EXP 58
50786: PUSH
50787: LD_VAR 0 2
50791: ARRAY
50792: PUSH
50793: LD_VAR 0 5
50797: PUSH
50798: LD_INT 1
50800: ARRAY
50801: LESS
50802: IFFALSE 50822
// tmp := mc_crates_collector [ i ] else
50804: LD_ADDR_VAR 0 4
50808: PUSH
50809: LD_EXP 58
50813: PUSH
50814: LD_VAR 0 2
50818: ARRAY
50819: ST_TO_ADDR
50820: GO 50836
// tmp := target [ 1 ] ;
50822: LD_ADDR_VAR 0 4
50826: PUSH
50827: LD_VAR 0 5
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: ST_TO_ADDR
// for j = 1 to tmp do
50836: LD_ADDR_VAR 0 3
50840: PUSH
50841: DOUBLE
50842: LD_INT 1
50844: DEC
50845: ST_TO_ADDR
50846: LD_VAR 0 4
50850: PUSH
50851: FOR_TO
50852: IFFALSE 50946
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
50854: LD_EXP 58
50858: PUSH
50859: LD_VAR 0 2
50863: ARRAY
50864: PUSH
50865: LD_VAR 0 3
50869: ARRAY
50870: PPUSH
50871: CALL_OW 310
50875: IFFALSE 50898
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
50877: LD_EXP 58
50881: PUSH
50882: LD_VAR 0 2
50886: ARRAY
50887: PUSH
50888: LD_VAR 0 3
50892: ARRAY
50893: PPUSH
50894: CALL_OW 122
// wait ( 3 ) ;
50898: LD_INT 3
50900: PPUSH
50901: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
50905: LD_EXP 58
50909: PUSH
50910: LD_VAR 0 2
50914: ARRAY
50915: PUSH
50916: LD_VAR 0 3
50920: ARRAY
50921: PPUSH
50922: LD_VAR 0 5
50926: PUSH
50927: LD_INT 2
50929: ARRAY
50930: PPUSH
50931: LD_VAR 0 5
50935: PUSH
50936: LD_INT 3
50938: ARRAY
50939: PPUSH
50940: CALL_OW 117
// end ;
50944: GO 50851
50946: POP
50947: POP
// end ; end ;
50948: GO 50191
50950: POP
50951: POP
// end ;
50952: LD_VAR 0 1
50956: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
50957: LD_INT 0
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
// if not mc_bases then
50963: LD_EXP 44
50967: NOT
50968: IFFALSE 50972
// exit ;
50970: GO 51121
// for i = 1 to mc_bases do
50972: LD_ADDR_VAR 0 2
50976: PUSH
50977: DOUBLE
50978: LD_INT 1
50980: DEC
50981: ST_TO_ADDR
50982: LD_EXP 44
50986: PUSH
50987: FOR_TO
50988: IFFALSE 51119
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
50990: LD_ADDR_VAR 0 4
50994: PUSH
50995: LD_EXP 59
50999: PUSH
51000: LD_VAR 0 2
51004: ARRAY
51005: PPUSH
51006: LD_INT 33
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PPUSH
51016: CALL_OW 72
51020: ST_TO_ADDR
// if tmp then
51021: LD_VAR 0 4
51025: IFFALSE 51117
// for j in tmp do
51027: LD_ADDR_VAR 0 3
51031: PUSH
51032: LD_VAR 0 4
51036: PUSH
51037: FOR_IN
51038: IFFALSE 51115
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
51040: LD_VAR 0 3
51044: PPUSH
51045: CALL_OW 312
51049: NOT
51050: PUSH
51051: LD_VAR 0 3
51055: PPUSH
51056: CALL_OW 256
51060: PUSH
51061: LD_INT 250
51063: GREATEREQUAL
51064: AND
51065: IFFALSE 51078
// Connect ( j ) else
51067: LD_VAR 0 3
51071: PPUSH
51072: CALL 5624 0 1
51076: GO 51113
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
51078: LD_VAR 0 3
51082: PPUSH
51083: CALL_OW 256
51087: PUSH
51088: LD_INT 250
51090: LESS
51091: PUSH
51092: LD_VAR 0 3
51096: PPUSH
51097: CALL_OW 312
51101: AND
51102: IFFALSE 51113
// ComUnlink ( j ) ;
51104: LD_VAR 0 3
51108: PPUSH
51109: CALL_OW 136
51113: GO 51037
51115: POP
51116: POP
// end ;
51117: GO 50987
51119: POP
51120: POP
// end ;
51121: LD_VAR 0 1
51125: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
51126: LD_INT 0
51128: PPUSH
51129: PPUSH
51130: PPUSH
51131: PPUSH
51132: PPUSH
// if not mc_bases then
51133: LD_EXP 44
51137: NOT
51138: IFFALSE 51142
// exit ;
51140: GO 51509
// for i = 1 to mc_bases do
51142: LD_ADDR_VAR 0 2
51146: PUSH
51147: DOUBLE
51148: LD_INT 1
51150: DEC
51151: ST_TO_ADDR
51152: LD_EXP 44
51156: PUSH
51157: FOR_TO
51158: IFFALSE 51507
// begin if not mc_produce [ i ] then
51160: LD_EXP 61
51164: PUSH
51165: LD_VAR 0 2
51169: ARRAY
51170: NOT
51171: IFFALSE 51175
// continue ;
51173: GO 51157
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51175: LD_ADDR_VAR 0 5
51179: PUSH
51180: LD_EXP 44
51184: PUSH
51185: LD_VAR 0 2
51189: ARRAY
51190: PPUSH
51191: LD_INT 30
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PPUSH
51201: CALL_OW 72
51205: ST_TO_ADDR
// if not fac then
51206: LD_VAR 0 5
51210: NOT
51211: IFFALSE 51215
// continue ;
51213: GO 51157
// for j in fac do
51215: LD_ADDR_VAR 0 3
51219: PUSH
51220: LD_VAR 0 5
51224: PUSH
51225: FOR_IN
51226: IFFALSE 51503
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
51228: LD_VAR 0 3
51232: PPUSH
51233: CALL_OW 461
51237: PUSH
51238: LD_INT 2
51240: NONEQUAL
51241: PUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: LD_INT 20
51249: PPUSH
51250: CALL 5315 0 2
51254: PUSH
51255: LD_INT 4
51257: ARRAY
51258: OR
51259: PUSH
51260: LD_VAR 0 3
51264: PPUSH
51265: CALL_OW 313
51269: PUSH
51270: LD_INT 0
51272: EQUAL
51273: OR
51274: IFFALSE 51278
// continue ;
51276: GO 51225
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
51278: LD_VAR 0 3
51282: PPUSH
51283: LD_EXP 61
51287: PUSH
51288: LD_VAR 0 2
51292: ARRAY
51293: PUSH
51294: LD_INT 1
51296: ARRAY
51297: PUSH
51298: LD_INT 1
51300: ARRAY
51301: PPUSH
51302: LD_EXP 61
51306: PUSH
51307: LD_VAR 0 2
51311: ARRAY
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: PUSH
51317: LD_INT 2
51319: ARRAY
51320: PPUSH
51321: LD_EXP 61
51325: PUSH
51326: LD_VAR 0 2
51330: ARRAY
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: PUSH
51336: LD_INT 3
51338: ARRAY
51339: PPUSH
51340: LD_EXP 61
51344: PUSH
51345: LD_VAR 0 2
51349: ARRAY
51350: PUSH
51351: LD_INT 1
51353: ARRAY
51354: PUSH
51355: LD_INT 4
51357: ARRAY
51358: PPUSH
51359: CALL_OW 448
51363: IFFALSE 51501
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
51365: LD_VAR 0 3
51369: PPUSH
51370: LD_EXP 61
51374: PUSH
51375: LD_VAR 0 2
51379: ARRAY
51380: PUSH
51381: LD_INT 1
51383: ARRAY
51384: PUSH
51385: LD_INT 1
51387: ARRAY
51388: PPUSH
51389: LD_EXP 61
51393: PUSH
51394: LD_VAR 0 2
51398: ARRAY
51399: PUSH
51400: LD_INT 1
51402: ARRAY
51403: PUSH
51404: LD_INT 2
51406: ARRAY
51407: PPUSH
51408: LD_EXP 61
51412: PUSH
51413: LD_VAR 0 2
51417: ARRAY
51418: PUSH
51419: LD_INT 1
51421: ARRAY
51422: PUSH
51423: LD_INT 3
51425: ARRAY
51426: PPUSH
51427: LD_EXP 61
51431: PUSH
51432: LD_VAR 0 2
51436: ARRAY
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PUSH
51442: LD_INT 4
51444: ARRAY
51445: PPUSH
51446: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
51450: LD_ADDR_VAR 0 4
51454: PUSH
51455: LD_EXP 61
51459: PUSH
51460: LD_VAR 0 2
51464: ARRAY
51465: PPUSH
51466: LD_INT 1
51468: PPUSH
51469: CALL_OW 3
51473: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
51474: LD_ADDR_EXP 61
51478: PUSH
51479: LD_EXP 61
51483: PPUSH
51484: LD_VAR 0 2
51488: PPUSH
51489: LD_VAR 0 4
51493: PPUSH
51494: CALL_OW 1
51498: ST_TO_ADDR
// break ;
51499: GO 51503
// end ; end ;
51501: GO 51225
51503: POP
51504: POP
// end ;
51505: GO 51157
51507: POP
51508: POP
// end ;
51509: LD_VAR 0 1
51513: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
51514: LD_INT 0
51516: PPUSH
51517: PPUSH
51518: PPUSH
// if not mc_bases then
51519: LD_EXP 44
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 51617
// for i = 1 to mc_bases do
51528: LD_ADDR_VAR 0 2
51532: PUSH
51533: DOUBLE
51534: LD_INT 1
51536: DEC
51537: ST_TO_ADDR
51538: LD_EXP 44
51542: PUSH
51543: FOR_TO
51544: IFFALSE 51615
// begin if mc_attack [ i ] then
51546: LD_EXP 60
51550: PUSH
51551: LD_VAR 0 2
51555: ARRAY
51556: IFFALSE 51613
// begin tmp := mc_attack [ i ] [ 1 ] ;
51558: LD_ADDR_VAR 0 3
51562: PUSH
51563: LD_EXP 60
51567: PUSH
51568: LD_VAR 0 2
51572: ARRAY
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
51578: LD_ADDR_EXP 60
51582: PUSH
51583: LD_EXP 60
51587: PPUSH
51588: LD_VAR 0 2
51592: PPUSH
51593: EMPTY
51594: PPUSH
51595: CALL_OW 1
51599: ST_TO_ADDR
// Attack ( tmp ) ;
51600: LD_VAR 0 3
51604: PPUSH
51605: CALL 29186 0 1
// exit ;
51609: POP
51610: POP
51611: GO 51617
// end ; end ;
51613: GO 51543
51615: POP
51616: POP
// end ;
51617: LD_VAR 0 1
51621: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
51622: LD_INT 0
51624: PPUSH
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
51630: PPUSH
// if not mc_bases then
51631: LD_EXP 44
51635: NOT
51636: IFFALSE 51640
// exit ;
51638: GO 51935
// for i = 1 to mc_bases do
51640: LD_ADDR_VAR 0 2
51644: PUSH
51645: DOUBLE
51646: LD_INT 1
51648: DEC
51649: ST_TO_ADDR
51650: LD_EXP 44
51654: PUSH
51655: FOR_TO
51656: IFFALSE 51933
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
51658: LD_ADDR_EXP 63
51662: PUSH
51663: LD_EXP 63
51667: PPUSH
51668: LD_VAR 0 2
51672: PPUSH
51673: LD_EXP 44
51677: PUSH
51678: LD_VAR 0 2
51682: ARRAY
51683: PPUSH
51684: CALL 32816 0 1
51688: PPUSH
51689: CALL_OW 1
51693: ST_TO_ADDR
// if mc_scan [ i ] and mc_defender [ i ] then
51694: LD_EXP 63
51698: PUSH
51699: LD_VAR 0 2
51703: ARRAY
51704: PUSH
51705: LD_EXP 62
51709: PUSH
51710: LD_VAR 0 2
51714: ARRAY
51715: AND
51716: IFFALSE 51931
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
51718: LD_ADDR_VAR 0 7
51722: PUSH
51723: LD_EXP 62
51727: PUSH
51728: LD_INT 1
51730: ARRAY
51731: PPUSH
51732: CALL 32923 0 1
51736: ST_TO_ADDR
// if class then
51737: LD_VAR 0 7
51741: IFFALSE 51864
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
51743: LD_ADDR_VAR 0 4
51747: PUSH
51748: LD_EXP 44
51752: PUSH
51753: LD_VAR 0 2
51757: ARRAY
51758: PPUSH
51759: LD_INT 30
51761: PUSH
51762: LD_INT 5
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PPUSH
51769: CALL_OW 72
51773: ST_TO_ADDR
// if tmp then
51774: LD_VAR 0 4
51778: IFFALSE 51864
// begin for j in tmp do
51780: LD_ADDR_VAR 0 3
51784: PUSH
51785: LD_VAR 0 4
51789: PUSH
51790: FOR_IN
51791: IFFALSE 51862
// begin t := UnitsInside ( j ) ;
51793: LD_ADDR_VAR 0 5
51797: PUSH
51798: LD_VAR 0 3
51802: PPUSH
51803: CALL_OW 313
51807: ST_TO_ADDR
// if not t then
51808: LD_VAR 0 5
51812: NOT
51813: IFFALSE 51817
// continue ;
51815: GO 51790
// for x in t do
51817: LD_ADDR_VAR 0 6
51821: PUSH
51822: LD_VAR 0 5
51826: PUSH
51827: FOR_IN
51828: IFFALSE 51858
// if not MineOfUnit ( x ) then
51830: LD_VAR 0 6
51834: PPUSH
51835: CALL_OW 459
51839: NOT
51840: IFFALSE 51856
// SetClass ( x , class ) ;
51842: LD_VAR 0 6
51846: PPUSH
51847: LD_VAR 0 7
51851: PPUSH
51852: CALL_OW 336
51856: GO 51827
51858: POP
51859: POP
// end ;
51860: GO 51790
51862: POP
51863: POP
// end ; end ; tmp := mc_defender [ i ] ;
51864: LD_ADDR_VAR 0 4
51868: PUSH
51869: LD_EXP 62
51873: PUSH
51874: LD_VAR 0 2
51878: ARRAY
51879: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51880: LD_ADDR_EXP 62
51884: PUSH
51885: LD_EXP 62
51889: PPUSH
51890: LD_VAR 0 2
51894: PPUSH
51895: EMPTY
51896: PPUSH
51897: CALL_OW 1
51901: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
51902: LD_VAR 0 2
51906: PPUSH
51907: LD_VAR 0 4
51911: PPUSH
51912: LD_EXP 63
51916: PUSH
51917: LD_VAR 0 2
51921: ARRAY
51922: PPUSH
51923: CALL 32269 0 3
// exit ;
51927: POP
51928: POP
51929: GO 51935
// end ; end ;
51931: GO 51655
51933: POP
51934: POP
// end ;
51935: LD_VAR 0 1
51939: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
51940: LD_INT 0
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
51946: LD_VAR 0 1
51950: NOT
51951: PUSH
51952: LD_VAR 0 2
51956: NOT
51957: OR
51958: PUSH
51959: LD_VAR 0 3
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: LD_INT 4
51975: PUSH
51976: LD_INT 5
51978: PUSH
51979: LD_INT 8
51981: PUSH
51982: LD_INT 9
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: IN
51994: NOT
51995: OR
51996: PUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_EXP 62
52006: PUSH
52007: LD_VAR 0 5
52011: ARRAY
52012: IN
52013: OR
52014: IFFALSE 52018
// exit ;
52016: GO 52430
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
52018: LD_ADDR_VAR 0 1
52022: PUSH
52023: LD_VAR 0 1
52027: PPUSH
52028: LD_INT 21
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 24
52040: PUSH
52041: LD_INT 250
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PPUSH
52052: CALL_OW 72
52056: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
52057: LD_VAR 0 3
52061: PUSH
52062: LD_INT 5
52064: PUSH
52065: LD_INT 8
52067: PUSH
52068: LD_INT 9
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: IN
52076: IFFALSE 52086
// class := 1 ;
52078: LD_ADDR_VAR 0 3
52082: PUSH
52083: LD_INT 1
52085: ST_TO_ADDR
// case class of 1 :
52086: LD_VAR 0 3
52090: PUSH
52091: LD_INT 1
52093: DOUBLE
52094: EQUAL
52095: IFTRUE 52099
52097: GO 52145
52099: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
52100: LD_ADDR_VAR 0 7
52104: PUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 30
52115: PUSH
52116: LD_INT 4
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 30
52125: PUSH
52126: LD_INT 5
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: PPUSH
52138: CALL_OW 72
52142: ST_TO_ADDR
52143: GO 52319
52145: LD_INT 2
52147: DOUBLE
52148: EQUAL
52149: IFTRUE 52153
52151: GO 52199
52153: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
52154: LD_ADDR_VAR 0 7
52158: PUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 30
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 30
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: PPUSH
52192: CALL_OW 72
52196: ST_TO_ADDR
52197: GO 52319
52199: LD_INT 3
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52253
52207: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52208: LD_ADDR_VAR 0 7
52212: PUSH
52213: LD_VAR 0 1
52217: PPUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 30
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 30
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: PPUSH
52246: CALL_OW 72
52250: ST_TO_ADDR
52251: GO 52319
52253: LD_INT 4
52255: DOUBLE
52256: EQUAL
52257: IFTRUE 52261
52259: GO 52318
52261: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
52262: LD_ADDR_VAR 0 7
52266: PUSH
52267: LD_VAR 0 1
52271: PPUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 30
52277: PUSH
52278: LD_INT 6
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 30
52287: PUSH
52288: LD_INT 7
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 30
52297: PUSH
52298: LD_INT 8
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: PPUSH
52311: CALL_OW 72
52315: ST_TO_ADDR
52316: GO 52319
52318: POP
// if not tmp then
52319: LD_VAR 0 7
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 52430
// for i in tmp do
52328: LD_ADDR_VAR 0 5
52332: PUSH
52333: LD_VAR 0 7
52337: PUSH
52338: FOR_IN
52339: IFFALSE 52408
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
52341: LD_VAR 0 5
52345: PPUSH
52346: CALL_OW 313
52350: PUSH
52351: LD_INT 6
52353: LESS
52354: PUSH
52355: LD_VAR 0 5
52359: PPUSH
52360: CALL_OW 266
52364: PUSH
52365: LD_INT 31
52367: PUSH
52368: LD_INT 32
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: IN
52375: NOT
52376: AND
52377: PUSH
52378: LD_VAR 0 5
52382: PPUSH
52383: CALL_OW 313
52387: PUSH
52388: LD_INT 0
52390: EQUAL
52391: OR
52392: IFFALSE 52406
// begin j := i ;
52394: LD_ADDR_VAR 0 6
52398: PUSH
52399: LD_VAR 0 5
52403: ST_TO_ADDR
// break ;
52404: GO 52408
// end ; end ;
52406: GO 52338
52408: POP
52409: POP
// if j then
52410: LD_VAR 0 6
52414: IFFALSE 52430
// ComEnterUnit ( unit , j ) ;
52416: LD_VAR 0 2
52420: PPUSH
52421: LD_VAR 0 6
52425: PPUSH
52426: CALL_OW 120
// end ;
52430: LD_VAR 0 4
52434: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
52435: LD_INT 0
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
// if not mc_bases then
52441: LD_EXP 44
52445: NOT
52446: IFFALSE 52450
// exit ;
52448: GO 52679
// for i = 1 to mc_bases do
52450: LD_ADDR_VAR 0 2
52454: PUSH
52455: DOUBLE
52456: LD_INT 1
52458: DEC
52459: ST_TO_ADDR
52460: LD_EXP 44
52464: PUSH
52465: FOR_TO
52466: IFFALSE 52677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
52468: LD_ADDR_VAR 0 4
52472: PUSH
52473: LD_EXP 44
52477: PUSH
52478: LD_VAR 0 2
52482: ARRAY
52483: PPUSH
52484: LD_INT 21
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PPUSH
52494: CALL_OW 72
52498: ST_TO_ADDR
// if not tmp then
52499: LD_VAR 0 4
52503: NOT
52504: IFFALSE 52510
// exit ;
52506: POP
52507: POP
52508: GO 52679
// for j in tmp do
52510: LD_ADDR_VAR 0 3
52514: PUSH
52515: LD_VAR 0 4
52519: PUSH
52520: FOR_IN
52521: IFFALSE 52673
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
52523: LD_VAR 0 3
52527: PPUSH
52528: CALL_OW 257
52532: PUSH
52533: LD_INT 3
52535: EQUAL
52536: PUSH
52537: LD_EXP 63
52541: PUSH
52542: LD_VAR 0 2
52546: ARRAY
52547: AND
52548: IFFALSE 52552
// continue ;
52550: GO 52520
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
52552: LD_VAR 0 3
52556: PPUSH
52557: CALL_OW 110
52561: NOT
52562: PUSH
52563: LD_VAR 0 3
52567: PPUSH
52568: CALL_OW 314
52572: NOT
52573: AND
52574: PUSH
52575: LD_VAR 0 3
52579: PPUSH
52580: CALL_OW 310
52584: NOT
52585: AND
52586: PUSH
52587: LD_EXP 47
52591: PUSH
52592: LD_VAR 0 2
52596: ARRAY
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: NOT
52602: AND
52603: PUSH
52604: LD_EXP 47
52608: PUSH
52609: LD_VAR 0 2
52613: ARRAY
52614: PUSH
52615: LD_INT 2
52617: ARRAY
52618: NOT
52619: AND
52620: PUSH
52621: LD_VAR 0 3
52625: PUSH
52626: LD_EXP 53
52630: PUSH
52631: LD_VAR 0 2
52635: ARRAY
52636: IN
52637: NOT
52638: AND
52639: IFFALSE 52671
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
52641: LD_EXP 44
52645: PUSH
52646: LD_VAR 0 2
52650: ARRAY
52651: PPUSH
52652: LD_VAR 0 3
52656: PPUSH
52657: LD_VAR 0 3
52661: PPUSH
52662: CALL_OW 257
52666: PPUSH
52667: CALL 51940 0 3
// end ;
52671: GO 52520
52673: POP
52674: POP
// end ;
52675: GO 52465
52677: POP
52678: POP
// end ;
52679: LD_VAR 0 1
52683: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
52684: LD_INT 0
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
// if not mc_bases [ base ] then
52693: LD_EXP 44
52697: PUSH
52698: LD_VAR 0 1
52702: ARRAY
52703: NOT
52704: IFFALSE 52708
// exit ;
52706: GO 52976
// tmp := [ ] ;
52708: LD_ADDR_VAR 0 7
52712: PUSH
52713: EMPTY
52714: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
52715: LD_ADDR_VAR 0 8
52719: PUSH
52720: LD_VAR 0 3
52724: PPUSH
52725: LD_INT 0
52727: PPUSH
52728: CALL_OW 517
52732: ST_TO_ADDR
// if not list then
52733: LD_VAR 0 8
52737: NOT
52738: IFFALSE 52742
// exit ;
52740: GO 52976
// for i = 1 to amount do
52742: LD_ADDR_VAR 0 5
52746: PUSH
52747: DOUBLE
52748: LD_INT 1
52750: DEC
52751: ST_TO_ADDR
52752: LD_VAR 0 2
52756: PUSH
52757: FOR_TO
52758: IFFALSE 52924
// begin c := rand ( 1 , list [ 1 ] - i ) ;
52760: LD_ADDR_VAR 0 6
52764: PUSH
52765: LD_INT 1
52767: PPUSH
52768: LD_VAR 0 8
52772: PUSH
52773: LD_INT 1
52775: ARRAY
52776: PUSH
52777: LD_VAR 0 5
52781: MINUS
52782: PPUSH
52783: CALL_OW 12
52787: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
52788: LD_ADDR_VAR 0 7
52792: PUSH
52793: LD_VAR 0 7
52797: PPUSH
52798: LD_VAR 0 5
52802: PPUSH
52803: LD_VAR 0 8
52807: PUSH
52808: LD_INT 1
52810: ARRAY
52811: PUSH
52812: LD_VAR 0 6
52816: ARRAY
52817: PUSH
52818: LD_VAR 0 8
52822: PUSH
52823: LD_INT 2
52825: ARRAY
52826: PUSH
52827: LD_VAR 0 6
52831: ARRAY
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PPUSH
52837: CALL_OW 1
52841: ST_TO_ADDR
// for j = 1 to 2 do
52842: LD_ADDR_VAR 0 10
52846: PUSH
52847: DOUBLE
52848: LD_INT 1
52850: DEC
52851: ST_TO_ADDR
52852: LD_INT 2
52854: PUSH
52855: FOR_TO
52856: IFFALSE 52911
// begin x := Delete ( list [ j ] , c ) ;
52858: LD_ADDR_VAR 0 9
52862: PUSH
52863: LD_VAR 0 8
52867: PUSH
52868: LD_VAR 0 10
52872: ARRAY
52873: PPUSH
52874: LD_VAR 0 6
52878: PPUSH
52879: CALL_OW 3
52883: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
52884: LD_ADDR_VAR 0 8
52888: PUSH
52889: LD_VAR 0 8
52893: PPUSH
52894: LD_VAR 0 10
52898: PPUSH
52899: LD_VAR 0 9
52903: PPUSH
52904: CALL_OW 1
52908: ST_TO_ADDR
// end ;
52909: GO 52855
52911: POP
52912: POP
// if not list then
52913: LD_VAR 0 8
52917: NOT
52918: IFFALSE 52922
// break ;
52920: GO 52924
// end ;
52922: GO 52757
52924: POP
52925: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
52926: LD_ADDR_EXP 54
52930: PUSH
52931: LD_EXP 54
52935: PPUSH
52936: LD_VAR 0 1
52940: PPUSH
52941: LD_VAR 0 7
52945: PPUSH
52946: CALL_OW 1
52950: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
52951: LD_ADDR_EXP 56
52955: PUSH
52956: LD_EXP 56
52960: PPUSH
52961: LD_VAR 0 1
52965: PPUSH
52966: LD_VAR 0 3
52970: PPUSH
52971: CALL_OW 1
52975: ST_TO_ADDR
// end ;
52976: LD_VAR 0 4
52980: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
52981: LD_INT 0
52983: PPUSH
// if not mc_bases [ base ] then
52984: LD_EXP 44
52988: PUSH
52989: LD_VAR 0 1
52993: ARRAY
52994: NOT
52995: IFFALSE 52999
// exit ;
52997: GO 53024
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
52999: LD_ADDR_EXP 61
53003: PUSH
53004: LD_EXP 61
53008: PPUSH
53009: LD_VAR 0 1
53013: PPUSH
53014: LD_VAR 0 2
53018: PPUSH
53019: CALL_OW 1
53023: ST_TO_ADDR
// end ;
53024: LD_VAR 0 3
53028: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53029: LD_INT 0
53031: PPUSH
// if not mc_bases [ base ] then
53032: LD_EXP 44
53036: PUSH
53037: LD_VAR 0 1
53041: ARRAY
53042: NOT
53043: IFFALSE 53047
// exit ;
53045: GO 53072
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53047: LD_ADDR_EXP 62
53051: PUSH
53052: LD_EXP 62
53056: PPUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: LD_VAR 0 2
53066: PPUSH
53067: CALL_OW 1
53071: ST_TO_ADDR
// end ;
53072: LD_VAR 0 3
53076: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
53077: LD_INT 0
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
// if not mc_bases [ base ] then
53083: LD_EXP 44
53087: PUSH
53088: LD_VAR 0 1
53092: ARRAY
53093: NOT
53094: IFFALSE 53098
// exit ;
53096: GO 53163
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
53098: LD_ADDR_EXP 60
53102: PUSH
53103: LD_EXP 60
53107: PPUSH
53108: LD_VAR 0 1
53112: PUSH
53113: LD_EXP 60
53117: PUSH
53118: LD_VAR 0 1
53122: ARRAY
53123: PUSH
53124: LD_INT 1
53126: PLUS
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PPUSH
53132: LD_VAR 0 1
53136: PUSH
53137: LD_VAR 0 2
53141: PUSH
53142: LD_VAR 0 3
53146: PUSH
53147: LD_VAR 0 4
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: PPUSH
53158: CALL 3142 0 3
53162: ST_TO_ADDR
// end ;
53163: LD_VAR 0 5
53167: RET
// export function MC_GetMinesField ( base ) ; begin
53168: LD_INT 0
53170: PPUSH
// result := mc_mines [ base ] ;
53171: LD_ADDR_VAR 0 2
53175: PUSH
53176: LD_EXP 54
53180: PUSH
53181: LD_VAR 0 1
53185: ARRAY
53186: ST_TO_ADDR
// end ;
53187: LD_VAR 0 2
53191: RET
// export function MC_GetProduceList ( base ) ; begin
53192: LD_INT 0
53194: PPUSH
// result := mc_produce [ base ] ;
53195: LD_ADDR_VAR 0 2
53199: PUSH
53200: LD_EXP 61
53204: PUSH
53205: LD_VAR 0 1
53209: ARRAY
53210: ST_TO_ADDR
// end ; end_of_file
53211: LD_VAR 0 2
53215: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL_OW 255
53225: PUSH
53226: LD_INT 1
53228: EQUAL
53229: IFFALSE 53239
// artifact_get := true ;
53231: LD_ADDR_EXP 12
53235: PUSH
53236: LD_INT 1
53238: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 255
53248: PUSH
53249: LD_INT 2
53251: EQUAL
53252: IFFALSE 53270
// begin artifact_get := false ;
53254: LD_ADDR_EXP 12
53258: PUSH
53259: LD_INT 0
53261: ST_TO_ADDR
// artifact_stolen := true ;
53262: LD_ADDR_EXP 11
53266: PUSH
53267: LD_INT 1
53269: ST_TO_ADDR
// end ; artifact_oncargo := true ;
53270: LD_ADDR_EXP 13
53274: PUSH
53275: LD_INT 1
53277: ST_TO_ADDR
// end ;
53278: PPOPN 2
53280: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
53281: LD_ADDR_EXP 13
53285: PUSH
53286: LD_INT 0
53288: ST_TO_ADDR
// end ;
53289: PPOPN 2
53291: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
53292: LD_INT 0
53294: PPUSH
53295: PPUSH
53296: PPUSH
53297: PPUSH
53298: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
53299: LD_VAR 0 1
53303: PUSH
53304: LD_INT 22
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 21
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 25
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 25
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 25
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 25
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 25
53369: PUSH
53370: LD_INT 5
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 25
53379: PUSH
53380: LD_INT 8
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: PPUSH
53401: CALL_OW 69
53405: IN
53406: IFFALSE 53422
// loses_counter := loses_counter + 1 ;
53408: LD_ADDR_EXP 16
53412: PUSH
53413: LD_EXP 16
53417: PUSH
53418: LD_INT 1
53420: PLUS
53421: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 21
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PPUSH
53437: CALL_OW 69
53441: IN
53442: IFFALSE 53958
// begin if not mc_bases then
53444: LD_EXP 44
53448: NOT
53449: IFFALSE 53453
// exit ;
53451: GO 53958
// pos := mc_build_list [ i ] + 1 ;
53453: LD_ADDR_VAR 0 5
53457: PUSH
53458: LD_EXP 49
53462: PUSH
53463: LD_VAR 0 2
53467: ARRAY
53468: PUSH
53469: LD_INT 1
53471: PLUS
53472: ST_TO_ADDR
// btype := GetBType ( un ) ;
53473: LD_ADDR_VAR 0 4
53477: PUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: CALL_OW 266
53487: ST_TO_ADDR
// if btype = b_warehouse then
53488: LD_VAR 0 4
53492: PUSH
53493: LD_INT 1
53495: EQUAL
53496: IFFALSE 53514
// begin btype := b_depot ;
53498: LD_ADDR_VAR 0 4
53502: PUSH
53503: LD_INT 0
53505: ST_TO_ADDR
// pos := 1 ;
53506: LD_ADDR_VAR 0 5
53510: PUSH
53511: LD_INT 1
53513: ST_TO_ADDR
// end ; if btype = b_factory then
53514: LD_VAR 0 4
53518: PUSH
53519: LD_INT 3
53521: EQUAL
53522: IFFALSE 53540
// begin btype := b_workshop ;
53524: LD_ADDR_VAR 0 4
53528: PUSH
53529: LD_INT 2
53531: ST_TO_ADDR
// pos := 1 ;
53532: LD_ADDR_VAR 0 5
53536: PUSH
53537: LD_INT 1
53539: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
53540: LD_VAR 0 4
53544: PUSH
53545: LD_INT 7
53547: PUSH
53548: LD_INT 8
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: IN
53555: IFFALSE 53565
// btype := b_lab ;
53557: LD_ADDR_VAR 0 4
53561: PUSH
53562: LD_INT 6
53564: ST_TO_ADDR
// for i = 1 to mc_bases do
53565: LD_ADDR_VAR 0 2
53569: PUSH
53570: DOUBLE
53571: LD_INT 1
53573: DEC
53574: ST_TO_ADDR
53575: LD_EXP 44
53579: PUSH
53580: FOR_TO
53581: IFFALSE 53956
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
53583: LD_VAR 0 1
53587: PUSH
53588: LD_EXP 44
53592: PUSH
53593: LD_VAR 0 2
53597: ARRAY
53598: IN
53599: PUSH
53600: LD_VAR 0 1
53604: PUSH
53605: LD_EXP 51
53609: PUSH
53610: LD_VAR 0 2
53614: ARRAY
53615: IN
53616: OR
53617: IFFALSE 53954
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
53619: LD_ADDR_EXP 49
53623: PUSH
53624: LD_EXP 49
53628: PPUSH
53629: LD_VAR 0 2
53633: PUSH
53634: LD_EXP 49
53638: PUSH
53639: LD_VAR 0 2
53643: ARRAY
53644: PUSH
53645: LD_INT 1
53647: PLUS
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PPUSH
53653: LD_VAR 0 4
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 250
53667: PUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: CALL_OW 251
53677: PUSH
53678: LD_VAR 0 1
53682: PPUSH
53683: CALL_OW 254
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: PPUSH
53694: CALL 3142 0 3
53698: ST_TO_ADDR
// if pos = 1 then
53699: LD_VAR 0 5
53703: PUSH
53704: LD_INT 1
53706: EQUAL
53707: IFFALSE 53822
// begin tmp := mc_build_list [ i ] ;
53709: LD_ADDR_VAR 0 6
53713: PUSH
53714: LD_EXP 49
53718: PUSH
53719: LD_VAR 0 2
53723: ARRAY
53724: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53725: LD_VAR 0 6
53729: PPUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 30
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 30
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: PPUSH
53758: CALL_OW 72
53762: IFFALSE 53772
// pos := 2 ;
53764: LD_ADDR_VAR 0 5
53768: PUSH
53769: LD_INT 2
53771: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
53772: LD_ADDR_VAR 0 6
53776: PUSH
53777: LD_VAR 0 6
53781: PPUSH
53782: LD_VAR 0 5
53786: PPUSH
53787: LD_VAR 0 6
53791: PPUSH
53792: CALL 3033 0 3
53796: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
53797: LD_ADDR_EXP 49
53801: PUSH
53802: LD_EXP 49
53806: PPUSH
53807: LD_VAR 0 2
53811: PPUSH
53812: LD_VAR 0 6
53816: PPUSH
53817: CALL_OW 1
53821: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
53822: LD_VAR 0 1
53826: PUSH
53827: LD_EXP 44
53831: PUSH
53832: LD_VAR 0 2
53836: ARRAY
53837: IN
53838: IFFALSE 53887
// begin tmp := mc_bases [ i ] diff un ;
53840: LD_ADDR_VAR 0 6
53844: PUSH
53845: LD_EXP 44
53849: PUSH
53850: LD_VAR 0 2
53854: ARRAY
53855: PUSH
53856: LD_VAR 0 1
53860: DIFF
53861: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
53862: LD_ADDR_EXP 44
53866: PUSH
53867: LD_EXP 44
53871: PPUSH
53872: LD_VAR 0 2
53876: PPUSH
53877: LD_VAR 0 6
53881: PPUSH
53882: CALL_OW 1
53886: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
53887: LD_VAR 0 1
53891: PUSH
53892: LD_EXP 51
53896: PUSH
53897: LD_VAR 0 2
53901: ARRAY
53902: IN
53903: IFFALSE 53952
// begin tmp := mc_construct_list [ i ] diff un ;
53905: LD_ADDR_VAR 0 6
53909: PUSH
53910: LD_EXP 51
53914: PUSH
53915: LD_VAR 0 2
53919: ARRAY
53920: PUSH
53921: LD_VAR 0 1
53925: DIFF
53926: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
53927: LD_ADDR_EXP 51
53931: PUSH
53932: LD_EXP 51
53936: PPUSH
53937: LD_VAR 0 2
53941: PPUSH
53942: LD_VAR 0 6
53946: PPUSH
53947: CALL_OW 1
53951: ST_TO_ADDR
// end ; break ;
53952: GO 53956
// end ;
53954: GO 53580
53956: POP
53957: POP
// end ; end ;
53958: PPOPN 6
53960: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
53961: LD_INT 0
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
53968: PPUSH
53969: PPUSH
// begin if not mc_bases then
53970: LD_EXP 44
53974: NOT
53975: IFFALSE 53979
// exit ;
53977: GO 54220
// btype := GetBType ( building ) ;
53979: LD_ADDR_VAR 0 6
53983: PUSH
53984: LD_VAR 0 1
53988: PPUSH
53989: CALL_OW 266
53993: ST_TO_ADDR
// x := GetX ( building ) ;
53994: LD_ADDR_VAR 0 7
53998: PUSH
53999: LD_VAR 0 1
54003: PPUSH
54004: CALL_OW 250
54008: ST_TO_ADDR
// y := GetY ( building ) ;
54009: LD_ADDR_VAR 0 8
54013: PUSH
54014: LD_VAR 0 1
54018: PPUSH
54019: CALL_OW 251
54023: ST_TO_ADDR
// d := GetDir ( building ) ;
54024: LD_ADDR_VAR 0 9
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 254
54038: ST_TO_ADDR
// for i = 1 to mc_bases do
54039: LD_ADDR_VAR 0 3
54043: PUSH
54044: DOUBLE
54045: LD_INT 1
54047: DEC
54048: ST_TO_ADDR
54049: LD_EXP 44
54053: PUSH
54054: FOR_TO
54055: IFFALSE 54218
// begin if not mc_build_list [ i ] then
54057: LD_EXP 49
54061: PUSH
54062: LD_VAR 0 3
54066: ARRAY
54067: NOT
54068: IFFALSE 54072
// continue ;
54070: GO 54054
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
54072: LD_VAR 0 6
54076: PUSH
54077: LD_VAR 0 7
54081: PUSH
54082: LD_VAR 0 8
54086: PUSH
54087: LD_VAR 0 9
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: PPUSH
54098: LD_EXP 49
54102: PUSH
54103: LD_VAR 0 3
54107: ARRAY
54108: PUSH
54109: LD_INT 1
54111: ARRAY
54112: PPUSH
54113: CALL 8351 0 2
54117: IFFALSE 54216
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
54119: LD_ADDR_VAR 0 5
54123: PUSH
54124: LD_EXP 49
54128: PUSH
54129: LD_VAR 0 3
54133: ARRAY
54134: PPUSH
54135: LD_INT 1
54137: PPUSH
54138: CALL_OW 3
54142: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
54143: LD_ADDR_EXP 49
54147: PUSH
54148: LD_EXP 49
54152: PPUSH
54153: LD_VAR 0 3
54157: PPUSH
54158: LD_VAR 0 5
54162: PPUSH
54163: CALL_OW 1
54167: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
54168: LD_ADDR_EXP 51
54172: PUSH
54173: LD_EXP 51
54177: PPUSH
54178: LD_VAR 0 3
54182: PUSH
54183: LD_EXP 51
54187: PUSH
54188: LD_VAR 0 3
54192: ARRAY
54193: PUSH
54194: LD_INT 1
54196: PLUS
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PPUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL 3142 0 3
54211: ST_TO_ADDR
// exit ;
54212: POP
54213: POP
54214: GO 54220
// end ; end ;
54216: GO 54054
54218: POP
54219: POP
// end ;
54220: PPOPN 9
54222: END
// on BuildingComplete ( building ) do var i , j , tmp ;
54223: LD_INT 0
54225: PPUSH
54226: PPUSH
54227: PPUSH
// begin if not mc_bases then
54228: LD_EXP 44
54232: NOT
54233: IFFALSE 54237
// exit ;
54235: GO 54438
// for i = 1 to mc_bases do
54237: LD_ADDR_VAR 0 2
54241: PUSH
54242: DOUBLE
54243: LD_INT 1
54245: DEC
54246: ST_TO_ADDR
54247: LD_EXP 44
54251: PUSH
54252: FOR_TO
54253: IFFALSE 54436
// begin if building in mc_construct_list [ i ] then
54255: LD_VAR 0 1
54259: PUSH
54260: LD_EXP 51
54264: PUSH
54265: LD_VAR 0 2
54269: ARRAY
54270: IN
54271: IFFALSE 54434
// begin tmp := mc_construct_list [ i ] diff building ;
54273: LD_ADDR_VAR 0 4
54277: PUSH
54278: LD_EXP 51
54282: PUSH
54283: LD_VAR 0 2
54287: ARRAY
54288: PUSH
54289: LD_VAR 0 1
54293: DIFF
54294: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
54295: LD_ADDR_EXP 51
54299: PUSH
54300: LD_EXP 51
54304: PPUSH
54305: LD_VAR 0 2
54309: PPUSH
54310: LD_VAR 0 4
54314: PPUSH
54315: CALL_OW 1
54319: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
54320: LD_ADDR_EXP 44
54324: PUSH
54325: LD_EXP 44
54329: PPUSH
54330: LD_VAR 0 2
54334: PUSH
54335: LD_EXP 44
54339: PUSH
54340: LD_VAR 0 2
54344: ARRAY
54345: PUSH
54346: LD_INT 1
54348: PLUS
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PPUSH
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL 3142 0 3
54363: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 266
54373: PUSH
54374: LD_INT 32
54376: PUSH
54377: LD_INT 33
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: IN
54384: IFFALSE 54430
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
54386: LD_ADDR_EXP 52
54390: PUSH
54391: LD_EXP 52
54395: PPUSH
54396: LD_VAR 0 2
54400: PUSH
54401: LD_EXP 52
54405: PUSH
54406: LD_VAR 0 2
54410: ARRAY
54411: PUSH
54412: LD_INT 1
54414: PLUS
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PPUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: CALL 3142 0 3
54429: ST_TO_ADDR
// exit ;
54430: POP
54431: POP
54432: GO 54438
// end ; end ;
54434: GO 54252
54436: POP
54437: POP
// end ;
54438: PPOPN 4
54440: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
54441: LD_INT 0
54443: PPUSH
54444: PPUSH
// begin if not mc_bases then
54445: LD_EXP 44
54449: NOT
54450: IFFALSE 54454
// exit ;
54452: GO 54669
// repeat wait ( 0 0$1 ) ;
54454: LD_INT 35
54456: PPUSH
54457: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
54461: LD_VAR 0 2
54465: PPUSH
54466: LD_VAR 0 3
54470: PPUSH
54471: CALL_OW 284
54475: IFFALSE 54454
// if GetResourceTypeXY ( x , y ) = mat_artefact then
54477: LD_VAR 0 2
54481: PPUSH
54482: LD_VAR 0 3
54486: PPUSH
54487: CALL_OW 283
54491: PUSH
54492: LD_INT 4
54494: EQUAL
54495: IFFALSE 54499
// exit ;
54497: GO 54669
// for i = 1 to mc_bases do
54499: LD_ADDR_VAR 0 6
54503: PUSH
54504: DOUBLE
54505: LD_INT 1
54507: DEC
54508: ST_TO_ADDR
54509: LD_EXP 44
54513: PUSH
54514: FOR_TO
54515: IFFALSE 54667
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54517: LD_ADDR_VAR 0 7
54521: PUSH
54522: LD_EXP 44
54526: PUSH
54527: LD_VAR 0 6
54531: ARRAY
54532: PPUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 30
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 30
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: PPUSH
54561: CALL_OW 72
54565: ST_TO_ADDR
// if not depot then
54566: LD_VAR 0 7
54570: NOT
54571: IFFALSE 54575
// continue ;
54573: GO 54514
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
54575: LD_VAR 0 7
54579: PUSH
54580: LD_INT 1
54582: ARRAY
54583: PPUSH
54584: LD_VAR 0 2
54588: PPUSH
54589: LD_VAR 0 3
54593: PPUSH
54594: CALL_OW 297
54598: PUSH
54599: LD_INT 30
54601: LESS
54602: IFFALSE 54665
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
54604: LD_ADDR_EXP 57
54608: PUSH
54609: LD_EXP 57
54613: PPUSH
54614: LD_VAR 0 6
54618: PUSH
54619: LD_EXP 57
54623: PUSH
54624: LD_VAR 0 6
54628: ARRAY
54629: PUSH
54630: LD_INT 1
54632: PLUS
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PPUSH
54638: LD_VAR 0 4
54642: PUSH
54643: LD_VAR 0 2
54647: PUSH
54648: LD_VAR 0 3
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: PPUSH
54658: CALL 3142 0 3
54662: ST_TO_ADDR
// break ;
54663: GO 54667
// end ; end ;
54665: GO 54514
54667: POP
54668: POP
// end ;
54669: PPOPN 7
54671: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
54672: LD_INT 0
54674: PPUSH
54675: PPUSH
// begin if not mc_bases then
54676: LD_EXP 44
54680: NOT
54681: IFFALSE 54685
// exit ;
54683: GO 54773
// for i = 1 to mc_bases do
54685: LD_ADDR_VAR 0 3
54689: PUSH
54690: DOUBLE
54691: LD_INT 1
54693: DEC
54694: ST_TO_ADDR
54695: LD_EXP 44
54699: PUSH
54700: FOR_TO
54701: IFFALSE 54771
// begin if factory in mc_bases [ i ] then
54703: LD_VAR 0 2
54707: PUSH
54708: LD_EXP 44
54712: PUSH
54713: LD_VAR 0 3
54717: ARRAY
54718: IN
54719: IFFALSE 54769
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
54721: LD_ADDR_EXP 59
54725: PUSH
54726: LD_EXP 59
54730: PPUSH
54731: LD_VAR 0 3
54735: PUSH
54736: LD_EXP 59
54740: PUSH
54741: LD_VAR 0 3
54745: ARRAY
54746: PUSH
54747: LD_INT 1
54749: PLUS
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PPUSH
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL 3142 0 3
54764: ST_TO_ADDR
// exit ;
54765: POP
54766: POP
54767: GO 54773
// end ; end ;
54769: GO 54700
54771: POP
54772: POP
// end ;
54773: PPOPN 4
54775: END
// on UnitKamikazed ( unit ) do begin if not kamikazed then
54776: LD_EXP 10
54780: NOT
54781: IFFALSE 54793
// kamikazed := unit ;
54783: LD_ADDR_EXP 10
54787: PUSH
54788: LD_VAR 0 1
54792: ST_TO_ADDR
// end ; end_of_file
54793: PPOPN 1
54795: END
// every 0 0$1 trigger game do
54796: LD_EXP 2
54800: IFFALSE 54830
54802: GO 54804
54804: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
54805: LD_INT 7
54807: PUSH
54808: LD_INT 6
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 6
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: PPUSH
54823: LD_INT 1400
54825: PPUSH
54826: CALL 54831 0 2
54830: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
54831: LD_INT 0
54833: PPUSH
54834: PPUSH
54835: PPUSH
// if not areas then
54836: LD_VAR 0 1
54840: NOT
54841: IFFALSE 54845
// exit ;
54843: GO 54957
// repeat wait ( time ) ;
54845: LD_VAR 0 2
54849: PPUSH
54850: CALL_OW 67
// p := rand ( 1 , 90 ) ;
54854: LD_ADDR_VAR 0 5
54858: PUSH
54859: LD_INT 1
54861: PPUSH
54862: LD_INT 90
54864: PPUSH
54865: CALL_OW 12
54869: ST_TO_ADDR
// for i in areas do
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_VAR 0 1
54879: PUSH
54880: FOR_IN
54881: IFFALSE 54934
// begin if Prob ( p ) then
54883: LD_VAR 0 5
54887: PPUSH
54888: CALL_OW 13
54892: IFFALSE 54932
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
54894: LD_INT 1
54896: PPUSH
54897: LD_INT 5
54899: PPUSH
54900: CALL_OW 12
54904: PPUSH
54905: LD_VAR 0 4
54909: PPUSH
54910: LD_INT 1
54912: PPUSH
54913: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
54917: LD_INT 455
54919: PPUSH
54920: LD_INT 595
54922: PPUSH
54923: CALL_OW 12
54927: PPUSH
54928: CALL_OW 67
// end ; end ;
54932: GO 54880
54934: POP
54935: POP
// time := time + 0 0$3 ;
54936: LD_ADDR_VAR 0 2
54940: PUSH
54941: LD_VAR 0 2
54945: PUSH
54946: LD_INT 105
54948: PLUS
54949: ST_TO_ADDR
// until not game ;
54950: LD_EXP 2
54954: NOT
54955: IFFALSE 54845
// end ;
54957: LD_VAR 0 3
54961: RET
