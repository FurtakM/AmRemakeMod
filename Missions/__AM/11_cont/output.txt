// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46566 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 29180 0 0
// PrepareAmerican ;
  33: CALL 302 0 0
// PrepareArabian ;
  37: CALL 33791 0 0
// Action ;
  41: CALL 38944 0 0
// RunMacro ;
  45: CALL 46729 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 11
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 12
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 13
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 15
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 14
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// can_kamikazed := false ;
 235: LD_ADDR_EXP 10
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// function Debuger ; var i ; begin
 248: LD_INT 0
 250: PPUSH
 251: PPUSH
// if not debug then
 252: LD_EXP 1
 256: NOT
 257: IFFALSE 261
// exit ;
 259: GO 297
// game_speed := 5 ;
 261: LD_ADDR_OWVAR 65
 265: PUSH
 266: LD_INT 5
 268: ST_TO_ADDR
// uc_side := 1 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 285: LD_EXP 34
 289: PPUSH
 290: LD_INT 1
 292: PPUSH
 293: CALL_OW 235
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 302: LD_INT 0
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
 309: PPUSH
 310: PPUSH
 311: PPUSH
 312: PPUSH
// uc_side := 4 ;
 313: LD_ADDR_OWVAR 20
 317: PUSH
 318: LD_INT 4
 320: ST_TO_ADDR
// uc_nation := 1 ;
 321: LD_ADDR_OWVAR 21
 325: PUSH
 326: LD_INT 1
 328: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 329: LD_ADDR_EXP 28
 333: PUSH
 334: LD_STRING Powell
 336: PPUSH
 337: LD_INT 0
 339: PPUSH
 340: CALL 1910 0 2
 344: ST_TO_ADDR
// uc_side := 1 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 1
 352: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 353: LD_ADDR_EXP 19
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: CALL 1910 0 2
 371: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 372: LD_EXP 19
 376: PPUSH
 377: CALL_OW 257
 381: PUSH
 382: LD_INT 4
 384: GREATER
 385: IFFALSE 399
// SetClass ( JMM , 1 ) ;
 387: LD_EXP 19
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 399: LD_ADDR_EXP 20
 403: PUSH
 404: LD_STRING Lisa
 406: PPUSH
 407: LD_EXP 1
 411: NOT
 412: PPUSH
 413: CALL 1910 0 2
 417: ST_TO_ADDR
// if not Lisa then
 418: LD_EXP 20
 422: NOT
 423: IFFALSE 438
// Lisa := CreateCharacter ( 10_Lisa ) ;
 425: LD_ADDR_EXP 20
 429: PUSH
 430: LD_STRING 10_Lisa
 432: PPUSH
 433: CALL_OW 34
 437: ST_TO_ADDR
// if not Lisa then
 438: LD_EXP 20
 442: NOT
 443: IFFALSE 458
// Lisa := CreateCharacter ( 09_Lisa ) ;
 445: LD_ADDR_EXP 20
 449: PUSH
 450: LD_STRING 09_Lisa
 452: PPUSH
 453: CALL_OW 34
 457: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 458: LD_ADDR_EXP 29
 462: PUSH
 463: LD_STRING Cornel
 465: PPUSH
 466: LD_EXP 1
 470: NOT
 471: PPUSH
 472: CALL 1910 0 2
 476: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 477: LD_ADDR_EXP 21
 481: PUSH
 482: LD_STRING Donaldson
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: CALL 1910 0 2
 495: ST_TO_ADDR
// if not Donaldson then
 496: LD_EXP 21
 500: NOT
 501: IFFALSE 516
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 503: LD_ADDR_EXP 21
 507: PUSH
 508: LD_STRING 10_Donaldson
 510: PPUSH
 511: CALL_OW 34
 515: ST_TO_ADDR
// if not Donaldson then
 516: LD_EXP 21
 520: NOT
 521: IFFALSE 536
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 523: LD_ADDR_EXP 21
 527: PUSH
 528: LD_STRING 09_Donaldson
 530: PPUSH
 531: CALL_OW 34
 535: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 536: LD_ADDR_EXP 22
 540: PUSH
 541: LD_STRING Bobby
 543: PPUSH
 544: LD_EXP 1
 548: NOT
 549: PPUSH
 550: CALL 1910 0 2
 554: ST_TO_ADDR
// if not Bobby then
 555: LD_EXP 22
 559: NOT
 560: IFFALSE 575
// Bobby := CreateCharacter ( 10_Bobby ) ;
 562: LD_ADDR_EXP 22
 566: PUSH
 567: LD_STRING 10_Bobby
 569: PPUSH
 570: CALL_OW 34
 574: ST_TO_ADDR
// if not Bobby then
 575: LD_EXP 22
 579: NOT
 580: IFFALSE 595
// Bobby := CreateCharacter ( 09_Bobby ) ;
 582: LD_ADDR_EXP 22
 586: PUSH
 587: LD_STRING 09_Bobby
 589: PPUSH
 590: CALL_OW 34
 594: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 595: LD_ADDR_EXP 23
 599: PUSH
 600: LD_STRING Cyrus
 602: PPUSH
 603: LD_EXP 1
 607: NOT
 608: PPUSH
 609: CALL 1910 0 2
 613: ST_TO_ADDR
// if not Cyrus then
 614: LD_EXP 23
 618: NOT
 619: IFFALSE 634
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 621: LD_ADDR_EXP 23
 625: PUSH
 626: LD_STRING 10_Cyrus
 628: PPUSH
 629: CALL_OW 34
 633: ST_TO_ADDR
// if not Cyrus then
 634: LD_EXP 23
 638: NOT
 639: IFFALSE 654
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 641: LD_ADDR_EXP 23
 645: PUSH
 646: LD_STRING 09_Cyrus
 648: PPUSH
 649: CALL_OW 34
 653: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 654: LD_ADDR_EXP 24
 658: PUSH
 659: LD_STRING Denis
 661: PPUSH
 662: LD_EXP 1
 666: NOT
 667: PPUSH
 668: CALL 1910 0 2
 672: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 673: LD_ADDR_EXP 25
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: CALL 1910 0 2
 691: ST_TO_ADDR
// if not Brown then
 692: LD_EXP 25
 696: NOT
 697: IFFALSE 712
// Brown := CreateCharacter ( 10_Brown ) ;
 699: LD_ADDR_EXP 25
 703: PUSH
 704: LD_STRING 10_Brown
 706: PPUSH
 707: CALL_OW 34
 711: ST_TO_ADDR
// if not Brown then
 712: LD_EXP 25
 716: NOT
 717: IFFALSE 732
// Brown := CreateCharacter ( 08_Brown ) ;
 719: LD_ADDR_EXP 25
 723: PUSH
 724: LD_STRING 08_Brown
 726: PPUSH
 727: CALL_OW 34
 731: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 732: LD_ADDR_EXP 26
 736: PUSH
 737: LD_STRING Gladstone
 739: PPUSH
 740: LD_EXP 1
 744: NOT
 745: PPUSH
 746: CALL 1910 0 2
 750: ST_TO_ADDR
// if not Gladstone then
 751: LD_EXP 26
 755: NOT
 756: IFFALSE 771
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 758: LD_ADDR_EXP 26
 762: PUSH
 763: LD_STRING 10_Gladstone
 765: PPUSH
 766: CALL_OW 34
 770: ST_TO_ADDR
// if not Gladstone then
 771: LD_EXP 26
 775: NOT
 776: IFFALSE 791
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 778: LD_ADDR_EXP 26
 782: PUSH
 783: LD_STRING 08_Gladstone
 785: PPUSH
 786: CALL_OW 34
 790: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 791: LD_ADDR_EXP 27
 795: PUSH
 796: LD_STRING Houten
 798: PPUSH
 799: LD_EXP 1
 803: NOT
 804: PPUSH
 805: CALL 1910 0 2
 809: ST_TO_ADDR
// if not Houten then
 810: LD_EXP 27
 814: NOT
 815: IFFALSE 830
// Houten := CreateCharacter ( 10_Houten ) ;
 817: LD_ADDR_EXP 27
 821: PUSH
 822: LD_STRING 10_Houten
 824: PPUSH
 825: CALL_OW 34
 829: ST_TO_ADDR
// if not Houten then
 830: LD_EXP 27
 834: NOT
 835: IFFALSE 850
// Houten := CreateCharacter ( 09_Houten ) ;
 837: LD_ADDR_EXP 27
 841: PUSH
 842: LD_STRING 09_Houten
 844: PPUSH
 845: CALL_OW 34
 849: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 850: LD_ADDR_EXP 29
 854: PUSH
 855: LD_STRING Cornel
 857: PPUSH
 858: LD_EXP 1
 862: NOT
 863: PPUSH
 864: CALL 1910 0 2
 868: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 869: LD_ADDR_EXP 30
 873: PUSH
 874: LD_STRING Gary
 876: PPUSH
 877: LD_EXP 1
 881: NOT
 882: PPUSH
 883: CALL 1910 0 2
 887: ST_TO_ADDR
// if not Gary then
 888: LD_EXP 30
 892: NOT
 893: IFFALSE 908
// Gary := CreateCharacter ( 10_Gary ) ;
 895: LD_ADDR_EXP 30
 899: PUSH
 900: LD_STRING 10_Gary
 902: PPUSH
 903: CALL_OW 34
 907: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 908: LD_ADDR_EXP 31
 912: PUSH
 913: LD_STRING Frank
 915: PPUSH
 916: LD_EXP 1
 920: NOT
 921: PPUSH
 922: CALL 1910 0 2
 926: ST_TO_ADDR
// if not Frank then
 927: LD_EXP 31
 931: NOT
 932: IFFALSE 947
// Frank := CreateCharacter ( 08_Frank ) ;
 934: LD_ADDR_EXP 31
 938: PUSH
 939: LD_STRING 08_Frank
 941: PPUSH
 942: CALL_OW 34
 946: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 947: LD_ADDR_EXP 32
 951: PUSH
 952: LD_STRING Kikuchi
 954: PPUSH
 955: LD_EXP 1
 959: NOT
 960: PPUSH
 961: CALL 1910 0 2
 965: ST_TO_ADDR
// if not Kikuchi then
 966: LD_EXP 32
 970: NOT
 971: IFFALSE 986
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 973: LD_ADDR_EXP 32
 977: PUSH
 978: LD_STRING 08_Kikuchi
 980: PPUSH
 981: CALL_OW 34
 985: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 986: LD_ADDR_VAR 0 5
 990: PUSH
 991: LD_EXP 20
 995: PUSH
 996: LD_EXP 21
1000: PUSH
1001: LD_EXP 22
1005: PUSH
1006: LD_EXP 23
1010: PUSH
1011: LD_EXP 24
1015: PUSH
1016: LD_EXP 25
1020: PUSH
1021: LD_EXP 26
1025: PUSH
1026: LD_EXP 27
1030: PUSH
1031: LD_EXP 29
1035: PUSH
1036: LD_EXP 30
1040: PUSH
1041: LD_EXP 31
1045: PUSH
1046: LD_EXP 32
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: ST_TO_ADDR
// tmp := tmp diff 0 ;
1065: LD_ADDR_VAR 0 5
1069: PUSH
1070: LD_VAR 0 5
1074: PUSH
1075: LD_INT 0
1077: DIFF
1078: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1079: LD_ADDR_VAR 0 5
1083: PUSH
1084: LD_VAR 0 5
1088: PUSH
1089: LD_STRING 10_lock
1091: PPUSH
1092: CALL_OW 31
1096: UNION
1097: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: LD_VAR 0 5
1107: PUSH
1108: LD_STRING 10c_lock
1110: PPUSH
1111: CALL_OW 31
1115: UNION
1116: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1117: LD_STRING 10_lock
1119: PPUSH
1120: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1124: LD_STRING 10c_lock
1126: PPUSH
1127: CALL_OW 40
// for i in tmp do
1131: LD_ADDR_VAR 0 2
1135: PUSH
1136: LD_VAR 0 5
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1173
// if GetClass ( i ) = class_mortar then
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 257
1153: PUSH
1154: LD_INT 8
1156: EQUAL
1157: IFFALSE 1171
// SetClass ( i , class_soldier ) ;
1159: LD_VAR 0 2
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL_OW 336
1171: GO 1141
1173: POP
1174: POP
// if tmp < 12 then
1175: LD_VAR 0 5
1179: PUSH
1180: LD_INT 12
1182: LESS
1183: IFFALSE 1281
// begin k := 16 - tmp ;
1185: LD_ADDR_VAR 0 3
1189: PUSH
1190: LD_INT 16
1192: PUSH
1193: LD_VAR 0 5
1197: MINUS
1198: ST_TO_ADDR
// for i = 1 to k do
1199: LD_ADDR_VAR 0 2
1203: PUSH
1204: DOUBLE
1205: LD_INT 1
1207: DEC
1208: ST_TO_ADDR
1209: LD_VAR 0 3
1213: PUSH
1214: FOR_TO
1215: IFFALSE 1279
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1217: LD_INT 0
1219: PPUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 1
1225: PUSH
1226: LD_INT 2
1228: PUSH
1229: LD_INT 3
1231: PUSH
1232: LD_INT 4
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 1
1244: PPUSH
1245: LD_INT 5
1247: PPUSH
1248: CALL_OW 12
1252: ARRAY
1253: PPUSH
1254: LD_INT 6
1256: PPUSH
1257: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: LD_VAR 0 5
1270: PUSH
1271: CALL_OW 44
1275: ADD
1276: ST_TO_ADDR
// end ;
1277: GO 1214
1279: POP
1280: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1281: LD_ADDR_VAR 0 6
1285: PUSH
1286: LD_STRING 1
1288: PPUSH
1289: LD_INT 12
1291: PPUSH
1292: LD_INT 12
1294: PPUSH
1295: LD_INT -5
1297: PUSH
1298: LD_EXP 19
1302: PUSH
1303: LD_INT -2
1305: PUSH
1306: LD_INT -3
1308: PUSH
1309: LD_INT -5
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: PUSH
1319: LD_VAR 0 5
1323: ADD
1324: PUSH
1325: LD_INT -6
1327: PUSH
1328: LD_INT -4
1330: PUSH
1331: LD_EXP 28
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: ADD
1341: PPUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 4
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 2
1354: PUSH
1355: LD_INT 1
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 0
1367: PUSH
1368: LD_INT 5
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 3
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 5
1392: PUSH
1393: LD_INT 0
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 42
1415: ST_TO_ADDR
// others := tmp diff selected ;
1416: LD_ADDR_VAR 0 9
1420: PUSH
1421: LD_VAR 0 5
1425: PUSH
1426: LD_VAR 0 6
1430: DIFF
1431: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_VAR 0 5
1441: PUSH
1442: LD_EXP 20
1446: PUSH
1447: LD_EXP 21
1451: PUSH
1452: LD_EXP 22
1456: PUSH
1457: LD_EXP 23
1461: PUSH
1462: LD_EXP 24
1466: PUSH
1467: LD_EXP 25
1471: PUSH
1472: LD_EXP 26
1476: PUSH
1477: LD_EXP 27
1481: PUSH
1482: LD_EXP 29
1486: PUSH
1487: LD_EXP 30
1491: PUSH
1492: LD_EXP 31
1496: PUSH
1497: LD_EXP 32
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: DIFF
1516: ST_TO_ADDR
// if others then
1517: LD_VAR 0 9
1521: IFFALSE 1535
// SaveCharacters ( others , 11_others ) ;
1523: LD_VAR 0 9
1527: PPUSH
1528: LD_STRING 11_others
1530: PPUSH
1531: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1535: LD_ADDR_VAR 0 7
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 4
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: LD_INT 5
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 2
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 3
1614: PUSH
1615: LD_INT 2
1617: PUSH
1618: LD_INT 1
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: ST_TO_ADDR
// for i in JMM ^ selected do
1637: LD_ADDR_VAR 0 2
1641: PUSH
1642: LD_EXP 19
1646: PUSH
1647: LD_VAR 0 6
1651: ADD
1652: PUSH
1653: FOR_IN
1654: IFFALSE 1843
// begin if GetClass ( i ) = 3 then
1656: LD_VAR 0 2
1660: PPUSH
1661: CALL_OW 257
1665: PUSH
1666: LD_INT 3
1668: EQUAL
1669: IFFALSE 1826
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1671: LD_ADDR_OWVAR 37
1675: PUSH
1676: LD_VAR 0 7
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PUSH
1685: LD_INT 1
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 7
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1707: LD_ADDR_OWVAR 38
1711: PUSH
1712: LD_VAR 0 7
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PUSH
1721: LD_INT 3
1723: ARRAY
1724: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_VAR 0 7
1734: PUSH
1735: LD_INT 1
1737: ARRAY
1738: PUSH
1739: LD_INT 4
1741: ARRAY
1742: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1743: LD_ADDR_VAR 0 7
1747: PUSH
1748: LD_VAR 0 7
1752: PPUSH
1753: LD_INT 1
1755: PPUSH
1756: CALL_OW 3
1760: ST_TO_ADDR
// veh := CreateVehicle ;
1761: LD_ADDR_VAR 0 8
1765: PUSH
1766: CALL_OW 45
1770: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1771: LD_VAR 0 8
1775: PPUSH
1776: LD_INT 8
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1786: LD_VAR 0 2
1790: PPUSH
1791: LD_VAR 0 8
1795: PPUSH
1796: CALL_OW 52
// if i = JMM then
1800: LD_VAR 0 2
1804: PUSH
1805: LD_EXP 19
1809: EQUAL
1810: IFFALSE 1824
// SetMark ( veh , 1 ) ;
1812: LD_VAR 0 8
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 242
// end else
1824: GO 1841
// PlaceUnitArea ( i , am_hum_start , false ) ;
1826: LD_VAR 0 2
1830: PPUSH
1831: LD_INT 9
1833: PPUSH
1834: LD_INT 0
1836: PPUSH
1837: CALL_OW 49
// end ;
1841: GO 1653
1843: POP
1844: POP
// vc_chassis := us_medium_tracked ;
1845: LD_ADDR_OWVAR 37
1849: PUSH
1850: LD_INT 3
1852: ST_TO_ADDR
// vc_engine := engine_solar ;
1853: LD_ADDR_OWVAR 39
1857: PUSH
1858: LD_INT 2
1860: ST_TO_ADDR
// vc_control := control_computer ;
1861: LD_ADDR_OWVAR 38
1865: PUSH
1866: LD_INT 3
1868: ST_TO_ADDR
// vc_weapon := us_radar ;
1869: LD_ADDR_OWVAR 40
1873: PUSH
1874: LD_INT 11
1876: ST_TO_ADDR
// veh := CreateVehicle ;
1877: LD_ADDR_VAR 0 8
1881: PUSH
1882: CALL_OW 45
1886: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1887: LD_VAR 0 8
1891: PPUSH
1892: LD_INT 87
1894: PPUSH
1895: LD_INT 142
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 48
// end ; end_of_file
1905: LD_VAR 0 1
1909: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// if exist_mode then
1914: LD_VAR 0 2
1918: IFFALSE 1943
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_EXP 4
1929: PUSH
1930: LD_VAR 0 1
1934: STR
1935: PPUSH
1936: CALL_OW 34
1940: ST_TO_ADDR
1941: GO 1958
// unit := NewCharacter ( ident ) ;
1943: LD_ADDR_VAR 0 4
1947: PUSH
1948: LD_VAR 0 1
1952: PPUSH
1953: CALL_OW 25
1957: ST_TO_ADDR
// result := unit ;
1958: LD_ADDR_VAR 0 3
1962: PUSH
1963: LD_VAR 0 4
1967: ST_TO_ADDR
// end ;
1968: LD_VAR 0 3
1972: RET
// export function _GetHexInfo ( x , y ) ; begin
1973: LD_INT 0
1975: PPUSH
// result := false ;
1976: LD_ADDR_VAR 0 3
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1984: LD_VAR 0 1
1988: PPUSH
1989: LD_VAR 0 2
1993: PPUSH
1994: CALL_OW 488
1998: NOT
1999: PUSH
2000: LD_VAR 0 1
2004: NOT
2005: OR
2006: PUSH
2007: LD_VAR 0 2
2011: NOT
2012: OR
2013: IFFALSE 2017
// exit ;
2015: GO 2037
// result := GetHexInfo ( x , y ) ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: LD_VAR 0 1
2026: PPUSH
2027: LD_VAR 0 2
2031: PPUSH
2032: CALL_OW 546
2036: ST_TO_ADDR
// end ;
2037: LD_VAR 0 3
2041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2042: LD_INT 0
2044: PPUSH
// vc_chassis := chassis ;
2045: LD_ADDR_OWVAR 37
2049: PUSH
2050: LD_VAR 0 1
2054: ST_TO_ADDR
// vc_engine := engine ;
2055: LD_ADDR_OWVAR 39
2059: PUSH
2060: LD_VAR 0 2
2064: ST_TO_ADDR
// vc_control := control ;
2065: LD_ADDR_OWVAR 38
2069: PUSH
2070: LD_VAR 0 3
2074: ST_TO_ADDR
// vc_weapon := weapon ;
2075: LD_ADDR_OWVAR 40
2079: PUSH
2080: LD_VAR 0 4
2084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2085: LD_ADDR_OWVAR 41
2089: PUSH
2090: LD_VAR 0 5
2094: ST_TO_ADDR
// end ;
2095: LD_VAR 0 6
2099: RET
// export function CanSayRand ( side ) ; begin
2100: LD_INT 0
2102: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2103: LD_ADDR_VAR 0 2
2107: PUSH
2108: LD_INT 52
2110: PUSH
2111: EMPTY
2112: LIST
2113: PUSH
2114: LD_INT 22
2116: PUSH
2117: LD_VAR 0 1
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 25
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 25
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 25
2151: PUSH
2152: LD_INT 3
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 25
2161: PUSH
2162: LD_INT 4
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PPUSH
2181: CALL_OW 69
2185: PUSH
2186: LD_EXP 19
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_EXP 20
2200: PUSH
2201: LD_EXP 21
2205: PUSH
2206: LD_EXP 22
2210: PUSH
2211: LD_EXP 23
2215: PUSH
2216: LD_EXP 24
2220: PUSH
2221: LD_EXP 25
2225: PUSH
2226: LD_EXP 26
2230: PUSH
2231: LD_EXP 27
2235: PUSH
2236: LD_EXP 28
2240: PUSH
2241: LD_EXP 29
2245: PUSH
2246: LD_EXP 30
2250: PUSH
2251: LD_EXP 32
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: DIFF
2272: ST_TO_ADDR
// end ;
2273: LD_VAR 0 2
2277: RET
// export function SayRand ( sex , dial ) ; begin
2278: LD_INT 0
2280: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2281: LD_ADDR_VAR 0 3
2285: PUSH
2286: LD_INT 52
2288: PUSH
2289: EMPTY
2290: LIST
2291: PUSH
2292: LD_INT 22
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: LD_INT 26
2304: PUSH
2305: LD_VAR 0 1
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 2
2316: PUSH
2317: LD_INT 25
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 25
2329: PUSH
2330: LD_INT 2
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 25
2339: PUSH
2340: LD_INT 3
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 25
2349: PUSH
2350: LD_INT 4
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: PPUSH
2370: CALL_OW 69
2374: PUSH
2375: LD_EXP 19
2379: PUSH
2380: LD_EXP 31
2384: PUSH
2385: LD_EXP 20
2389: PUSH
2390: LD_EXP 21
2394: PUSH
2395: LD_EXP 22
2399: PUSH
2400: LD_EXP 23
2404: PUSH
2405: LD_EXP 24
2409: PUSH
2410: LD_EXP 25
2414: PUSH
2415: LD_EXP 26
2419: PUSH
2420: LD_EXP 27
2424: PUSH
2425: LD_EXP 28
2429: PUSH
2430: LD_EXP 29
2434: PUSH
2435: LD_EXP 30
2439: PUSH
2440: LD_EXP 32
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: DIFF
2461: ST_TO_ADDR
// if not result then
2462: LD_VAR 0 3
2466: NOT
2467: IFFALSE 2471
// exit ;
2469: GO 2499
// result := result [ 1 ] ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 1
2483: ARRAY
2484: ST_TO_ADDR
// Say ( result , dial ) ;
2485: LD_VAR 0 3
2489: PPUSH
2490: LD_VAR 0 2
2494: PPUSH
2495: CALL_OW 88
// end ;
2499: LD_VAR 0 3
2503: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2504: LD_INT 0
2506: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2507: LD_ADDR_VAR 0 4
2511: PUSH
2512: LD_INT 22
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 26
2524: PUSH
2525: LD_VAR 0 1
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 2
2536: PUSH
2537: LD_INT 25
2539: PUSH
2540: LD_INT 1
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PUSH
2547: LD_INT 25
2549: PUSH
2550: LD_INT 2
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 25
2569: PUSH
2570: LD_INT 4
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_EXP 19
2598: PUSH
2599: LD_EXP 31
2603: PUSH
2604: LD_EXP 20
2608: PUSH
2609: LD_EXP 21
2613: PUSH
2614: LD_EXP 22
2618: PUSH
2619: LD_EXP 23
2623: PUSH
2624: LD_EXP 24
2628: PUSH
2629: LD_EXP 25
2633: PUSH
2634: LD_EXP 26
2638: PUSH
2639: LD_EXP 27
2643: PUSH
2644: LD_EXP 28
2648: PUSH
2649: LD_EXP 29
2653: PUSH
2654: LD_EXP 30
2658: PUSH
2659: LD_EXP 32
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: LD_VAR 0 3
2684: ADD
2685: DIFF
2686: ST_TO_ADDR
// if not result then
2687: LD_VAR 0 4
2691: NOT
2692: IFFALSE 2696
// exit ;
2694: GO 2724
// result := result [ 1 ] ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: LD_VAR 0 4
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: ST_TO_ADDR
// Say ( result , dial ) ;
2710: LD_VAR 0 4
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL_OW 88
// end ;
2724: LD_VAR 0 4
2728: RET
// export function WantPlant ( unit ) ; var task ; begin
2729: LD_INT 0
2731: PPUSH
2732: PPUSH
// result := false ;
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: LD_INT 0
2740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: LD_VAR 0 1
2750: PPUSH
2751: CALL_OW 437
2755: ST_TO_ADDR
// if task then
2756: LD_VAR 0 3
2760: IFFALSE 2788
// if task [ 1 ] [ 1 ] = p then
2762: LD_VAR 0 3
2766: PUSH
2767: LD_INT 1
2769: ARRAY
2770: PUSH
2771: LD_INT 1
2773: ARRAY
2774: PUSH
2775: LD_STRING p
2777: EQUAL
2778: IFFALSE 2788
// result := true ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: LD_INT 1
2787: ST_TO_ADDR
// end ;
2788: LD_VAR 0 2
2792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2793: LD_INT 0
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
// if pos < 1 then
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 1
2806: LESS
2807: IFFALSE 2811
// exit ;
2809: GO 3114
// if pos = 1 then
2811: LD_VAR 0 2
2815: PUSH
2816: LD_INT 1
2818: EQUAL
2819: IFFALSE 2852
// result := Replace ( arr , pos [ 1 ] , value ) else
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_VAR 0 2
2835: PUSH
2836: LD_INT 1
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 1
2849: ST_TO_ADDR
2850: GO 3114
// begin tmp := arr ;
2852: LD_ADDR_VAR 0 6
2856: PUSH
2857: LD_VAR 0 1
2861: ST_TO_ADDR
// s_arr := [ tmp ] ;
2862: LD_ADDR_VAR 0 7
2866: PUSH
2867: LD_VAR 0 6
2871: PUSH
2872: EMPTY
2873: LIST
2874: ST_TO_ADDR
// for i = 1 to pos - 1 do
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_VAR 0 2
2889: PUSH
2890: LD_INT 1
2892: MINUS
2893: PUSH
2894: FOR_TO
2895: IFFALSE 2940
// begin tmp := tmp [ pos [ i ] ] ;
2897: LD_ADDR_VAR 0 6
2901: PUSH
2902: LD_VAR 0 6
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_VAR 0 5
2916: ARRAY
2917: ARRAY
2918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2919: LD_ADDR_VAR 0 7
2923: PUSH
2924: LD_VAR 0 7
2928: PUSH
2929: LD_VAR 0 6
2933: PUSH
2934: EMPTY
2935: LIST
2936: ADD
2937: ST_TO_ADDR
// end ;
2938: GO 2894
2940: POP
2941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2942: LD_ADDR_VAR 0 6
2946: PUSH
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_VAR 0 2
2956: PUSH
2957: LD_VAR 0 2
2961: ARRAY
2962: PPUSH
2963: LD_VAR 0 3
2967: PPUSH
2968: CALL_OW 1
2972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2973: LD_ADDR_VAR 0 7
2977: PUSH
2978: LD_VAR 0 7
2982: PPUSH
2983: LD_VAR 0 7
2987: PPUSH
2988: LD_VAR 0 6
2992: PPUSH
2993: CALL_OW 1
2997: ST_TO_ADDR
// for i = s_arr downto 2 do
2998: LD_ADDR_VAR 0 5
3002: PUSH
3003: DOUBLE
3004: LD_VAR 0 7
3008: INC
3009: ST_TO_ADDR
3010: LD_INT 2
3012: PUSH
3013: FOR_DOWNTO
3014: IFFALSE 3098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
3016: LD_ADDR_VAR 0 6
3020: PUSH
3021: LD_VAR 0 7
3025: PUSH
3026: LD_VAR 0 5
3030: PUSH
3031: LD_INT 1
3033: MINUS
3034: ARRAY
3035: PPUSH
3036: LD_VAR 0 2
3040: PUSH
3041: LD_VAR 0 5
3045: PUSH
3046: LD_INT 1
3048: MINUS
3049: ARRAY
3050: PPUSH
3051: LD_VAR 0 7
3055: PUSH
3056: LD_VAR 0 5
3060: ARRAY
3061: PPUSH
3062: CALL_OW 1
3066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3067: LD_ADDR_VAR 0 7
3071: PUSH
3072: LD_VAR 0 7
3076: PPUSH
3077: LD_VAR 0 5
3081: PUSH
3082: LD_INT 1
3084: MINUS
3085: PPUSH
3086: LD_VAR 0 6
3090: PPUSH
3091: CALL_OW 1
3095: ST_TO_ADDR
// end ;
3096: GO 3013
3098: POP
3099: POP
// result := s_arr [ 1 ] ;
3100: LD_ADDR_VAR 0 4
3104: PUSH
3105: LD_VAR 0 7
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: ST_TO_ADDR
// end ; end ;
3114: LD_VAR 0 4
3118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3119: LD_INT 0
3121: PPUSH
3122: PPUSH
// if not list then
3123: LD_VAR 0 1
3127: NOT
3128: IFFALSE 3132
// exit ;
3130: GO 3223
// i := list [ pos1 ] ;
3132: LD_ADDR_VAR 0 5
3136: PUSH
3137: LD_VAR 0 1
3141: PUSH
3142: LD_VAR 0 2
3146: ARRAY
3147: ST_TO_ADDR
// if not i then
3148: LD_VAR 0 5
3152: NOT
3153: IFFALSE 3157
// exit ;
3155: GO 3223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3157: LD_ADDR_VAR 0 1
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: LD_VAR 0 2
3171: PPUSH
3172: LD_VAR 0 1
3176: PUSH
3177: LD_VAR 0 3
3181: ARRAY
3182: PPUSH
3183: CALL_OW 1
3187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3188: LD_ADDR_VAR 0 1
3192: PUSH
3193: LD_VAR 0 1
3197: PPUSH
3198: LD_VAR 0 3
3202: PPUSH
3203: LD_VAR 0 5
3207: PPUSH
3208: CALL_OW 1
3212: ST_TO_ADDR
// result := list ;
3213: LD_ADDR_VAR 0 4
3217: PUSH
3218: LD_VAR 0 1
3222: ST_TO_ADDR
// end ;
3223: LD_VAR 0 4
3227: RET
// export function Add ( list , pos , val ) ; begin
3228: LD_INT 0
3230: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 2
3245: PPUSH
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL 2793 0 3
3255: ST_TO_ADDR
3256: LD_VAR 0 4
3260: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3261: LD_INT 0
3263: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 1
3273: PPUSH
3274: CALL_OW 250
3278: PPUSH
3279: LD_VAR 0 1
3283: PPUSH
3284: CALL_OW 251
3288: PPUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_VAR 0 4
3303: PPUSH
3304: CALL 3314 0 5
3308: ST_TO_ADDR
// end ;
3309: LD_VAR 0 5
3313: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
// if not list then
3320: LD_VAR 0 3
3324: NOT
3325: IFFALSE 3329
// exit ;
3327: GO 3717
// result := [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// for i in list do
3336: LD_ADDR_VAR 0 7
3340: PUSH
3341: LD_VAR 0 3
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3549
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3349: LD_ADDR_VAR 0 9
3353: PUSH
3354: LD_VAR 0 7
3358: PPUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 297
3373: ST_TO_ADDR
// if not result then
3374: LD_VAR 0 6
3378: NOT
3379: IFFALSE 3405
// result := [ [ i , tmp ] ] else
3381: LD_ADDR_VAR 0 6
3385: PUSH
3386: LD_VAR 0 7
3390: PUSH
3391: LD_VAR 0 9
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: ST_TO_ADDR
3403: GO 3547
// begin if result [ result ] [ 2 ] < tmp then
3405: LD_VAR 0 6
3409: PUSH
3410: LD_VAR 0 6
3414: ARRAY
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: PUSH
3420: LD_VAR 0 9
3424: LESS
3425: IFFALSE 3467
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3427: LD_ADDR_VAR 0 6
3431: PUSH
3432: LD_VAR 0 6
3436: PPUSH
3437: LD_VAR 0 6
3441: PUSH
3442: LD_INT 1
3444: PLUS
3445: PPUSH
3446: LD_VAR 0 7
3450: PUSH
3451: LD_VAR 0 9
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL_OW 2
3464: ST_TO_ADDR
3465: GO 3547
// for j = 1 to result do
3467: LD_ADDR_VAR 0 8
3471: PUSH
3472: DOUBLE
3473: LD_INT 1
3475: DEC
3476: ST_TO_ADDR
3477: LD_VAR 0 6
3481: PUSH
3482: FOR_TO
3483: IFFALSE 3545
// begin if tmp < result [ j ] [ 2 ] then
3485: LD_VAR 0 9
3489: PUSH
3490: LD_VAR 0 6
3494: PUSH
3495: LD_VAR 0 8
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: LESS
3505: IFFALSE 3543
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3507: LD_ADDR_VAR 0 6
3511: PUSH
3512: LD_VAR 0 6
3516: PPUSH
3517: LD_VAR 0 8
3521: PPUSH
3522: LD_VAR 0 7
3526: PUSH
3527: LD_VAR 0 9
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PPUSH
3536: CALL_OW 2
3540: ST_TO_ADDR
// break ;
3541: GO 3545
// end ; end ;
3543: GO 3482
3545: POP
3546: POP
// end ; end ;
3547: GO 3346
3549: POP
3550: POP
// if result and not asc then
3551: LD_VAR 0 6
3555: PUSH
3556: LD_VAR 0 4
3560: NOT
3561: AND
3562: IFFALSE 3637
// begin tmp := result ;
3564: LD_ADDR_VAR 0 9
3568: PUSH
3569: LD_VAR 0 6
3573: ST_TO_ADDR
// for i = tmp downto 1 do
3574: LD_ADDR_VAR 0 7
3578: PUSH
3579: DOUBLE
3580: LD_VAR 0 9
3584: INC
3585: ST_TO_ADDR
3586: LD_INT 1
3588: PUSH
3589: FOR_DOWNTO
3590: IFFALSE 3635
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3592: LD_ADDR_VAR 0 6
3596: PUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: LD_VAR 0 9
3606: PUSH
3607: LD_VAR 0 7
3611: MINUS
3612: PUSH
3613: LD_INT 1
3615: PLUS
3616: PPUSH
3617: LD_VAR 0 9
3621: PUSH
3622: LD_VAR 0 7
3626: ARRAY
3627: PPUSH
3628: CALL_OW 1
3632: ST_TO_ADDR
3633: GO 3589
3635: POP
3636: POP
// end ; tmp := [ ] ;
3637: LD_ADDR_VAR 0 9
3641: PUSH
3642: EMPTY
3643: ST_TO_ADDR
// if mode then
3644: LD_VAR 0 5
3648: IFFALSE 3717
// begin for i = 1 to result do
3650: LD_ADDR_VAR 0 7
3654: PUSH
3655: DOUBLE
3656: LD_INT 1
3658: DEC
3659: ST_TO_ADDR
3660: LD_VAR 0 6
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3705
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3668: LD_ADDR_VAR 0 9
3672: PUSH
3673: LD_VAR 0 9
3677: PPUSH
3678: LD_VAR 0 7
3682: PPUSH
3683: LD_VAR 0 6
3687: PUSH
3688: LD_VAR 0 7
3692: ARRAY
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
3703: GO 3665
3705: POP
3706: POP
// result := tmp ;
3707: LD_ADDR_VAR 0 6
3711: PUSH
3712: LD_VAR 0 9
3716: ST_TO_ADDR
// end ; end ;
3717: LD_VAR 0 6
3721: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3730: LD_ADDR_VAR 0 5
3734: PUSH
3735: LD_INT 0
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: LD_INT 0
3743: PUSH
3744: EMPTY
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: ST_TO_ADDR
// if not x or not y then
3752: LD_VAR 0 2
3756: NOT
3757: PUSH
3758: LD_VAR 0 3
3762: NOT
3763: OR
3764: IFFALSE 3768
// exit ;
3766: GO 5414
// if not range then
3768: LD_VAR 0 4
3772: NOT
3773: IFFALSE 3783
// range := 10 ;
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_INT 10
3782: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3783: LD_ADDR_VAR 0 8
3787: PUSH
3788: LD_INT 81
3790: PUSH
3791: LD_VAR 0 1
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 92
3802: PUSH
3803: LD_VAR 0 2
3807: PUSH
3808: LD_VAR 0 3
3812: PUSH
3813: LD_VAR 0 4
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 3
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: ST_TO_ADDR
// if not tmp then
3851: LD_VAR 0 8
3855: NOT
3856: IFFALSE 3860
// exit ;
3858: GO 5414
// for i in tmp do
3860: LD_ADDR_VAR 0 6
3864: PUSH
3865: LD_VAR 0 8
3869: PUSH
3870: FOR_IN
3871: IFFALSE 5389
// begin points := [ 0 , 0 , 0 ] ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 0
3880: PUSH
3881: LD_INT 0
3883: PUSH
3884: LD_INT 0
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: ST_TO_ADDR
// bpoints := 1 ;
3892: LD_ADDR_VAR 0 10
3896: PUSH
3897: LD_INT 1
3899: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3900: LD_VAR 0 6
3904: PPUSH
3905: CALL_OW 247
3909: PUSH
3910: LD_INT 1
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 4496
3918: POP
// begin if GetClass ( i ) = 1 then
3919: LD_VAR 0 6
3923: PPUSH
3924: CALL_OW 257
3928: PUSH
3929: LD_INT 1
3931: EQUAL
3932: IFFALSE 3953
// points := [ 10 , 5 , 3 ] ;
3934: LD_ADDR_VAR 0 9
3938: PUSH
3939: LD_INT 10
3941: PUSH
3942: LD_INT 5
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3953: LD_VAR 0 6
3957: PPUSH
3958: CALL_OW 257
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: LD_INT 4
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: IN
3977: IFFALSE 3998
// points := [ 3 , 2 , 1 ] ;
3979: LD_ADDR_VAR 0 9
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 2
3989: PUSH
3990: LD_INT 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: LIST
3997: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3998: LD_VAR 0 6
4002: PPUSH
4003: CALL_OW 257
4007: PUSH
4008: LD_INT 5
4010: EQUAL
4011: IFFALSE 4032
// points := [ 130 , 5 , 2 ] ;
4013: LD_ADDR_VAR 0 9
4017: PUSH
4018: LD_INT 130
4020: PUSH
4021: LD_INT 5
4023: PUSH
4024: LD_INT 2
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: ST_TO_ADDR
// if GetClass ( i ) = 8 then
4032: LD_VAR 0 6
4036: PPUSH
4037: CALL_OW 257
4041: PUSH
4042: LD_INT 8
4044: EQUAL
4045: IFFALSE 4066
// points := [ 35 , 35 , 30 ] ;
4047: LD_ADDR_VAR 0 9
4051: PUSH
4052: LD_INT 35
4054: PUSH
4055: LD_INT 35
4057: PUSH
4058: LD_INT 30
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4066: LD_VAR 0 6
4070: PPUSH
4071: CALL_OW 257
4075: PUSH
4076: LD_INT 9
4078: EQUAL
4079: IFFALSE 4100
// points := [ 20 , 55 , 40 ] ;
4081: LD_ADDR_VAR 0 9
4085: PUSH
4086: LD_INT 20
4088: PUSH
4089: LD_INT 55
4091: PUSH
4092: LD_INT 40
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4100: LD_VAR 0 6
4104: PPUSH
4105: CALL_OW 257
4109: PUSH
4110: LD_INT 12
4112: PUSH
4113: LD_INT 16
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: IN
4120: IFFALSE 4141
// points := [ 5 , 3 , 2 ] ;
4122: LD_ADDR_VAR 0 9
4126: PUSH
4127: LD_INT 5
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 2
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4141: LD_VAR 0 6
4145: PPUSH
4146: CALL_OW 257
4150: PUSH
4151: LD_INT 17
4153: EQUAL
4154: IFFALSE 4175
// points := [ 100 , 50 , 75 ] ;
4156: LD_ADDR_VAR 0 9
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: LD_INT 50
4166: PUSH
4167: LD_INT 75
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4175: LD_VAR 0 6
4179: PPUSH
4180: CALL_OW 257
4184: PUSH
4185: LD_INT 15
4187: EQUAL
4188: IFFALSE 4209
// points := [ 10 , 5 , 3 ] ;
4190: LD_ADDR_VAR 0 9
4194: PUSH
4195: LD_INT 10
4197: PUSH
4198: LD_INT 5
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4209: LD_VAR 0 6
4213: PPUSH
4214: CALL_OW 257
4218: PUSH
4219: LD_INT 14
4221: EQUAL
4222: IFFALSE 4243
// points := [ 10 , 0 , 0 ] ;
4224: LD_ADDR_VAR 0 9
4228: PUSH
4229: LD_INT 10
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: LD_INT 0
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4243: LD_VAR 0 6
4247: PPUSH
4248: CALL_OW 257
4252: PUSH
4253: LD_INT 11
4255: EQUAL
4256: IFFALSE 4277
// points := [ 30 , 10 , 5 ] ;
4258: LD_ADDR_VAR 0 9
4262: PUSH
4263: LD_INT 30
4265: PUSH
4266: LD_INT 10
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_INT 5
4284: PPUSH
4285: CALL_OW 321
4289: PUSH
4290: LD_INT 2
4292: EQUAL
4293: IFFALSE 4310
// bpoints := bpoints * 1.8 ;
4295: LD_ADDR_VAR 0 10
4299: PUSH
4300: LD_VAR 0 10
4304: PUSH
4305: LD_REAL  1.80000000000000E+0000
4308: MUL
4309: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4310: LD_VAR 0 6
4314: PPUSH
4315: CALL_OW 257
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: LD_INT 2
4325: PUSH
4326: LD_INT 3
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: IN
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: LD_INT 51
4346: PPUSH
4347: CALL_OW 321
4351: PUSH
4352: LD_INT 2
4354: EQUAL
4355: AND
4356: IFFALSE 4373
// bpoints := bpoints * 1.2 ;
4358: LD_ADDR_VAR 0 10
4362: PUSH
4363: LD_VAR 0 10
4367: PUSH
4368: LD_REAL  1.20000000000000E+0000
4371: MUL
4372: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4373: LD_VAR 0 6
4377: PPUSH
4378: CALL_OW 257
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 7
4388: PUSH
4389: LD_INT 9
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: IN
4397: PUSH
4398: LD_VAR 0 1
4402: PPUSH
4403: LD_INT 52
4405: PPUSH
4406: CALL_OW 321
4410: PUSH
4411: LD_INT 2
4413: EQUAL
4414: AND
4415: IFFALSE 4432
// bpoints := bpoints * 1.5 ;
4417: LD_ADDR_VAR 0 10
4421: PUSH
4422: LD_VAR 0 10
4426: PUSH
4427: LD_REAL  1.50000000000000E+0000
4430: MUL
4431: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4432: LD_VAR 0 1
4436: PPUSH
4437: LD_INT 66
4439: PPUSH
4440: CALL_OW 321
4444: PUSH
4445: LD_INT 2
4447: EQUAL
4448: IFFALSE 4465
// bpoints := bpoints * 1.1 ;
4450: LD_ADDR_VAR 0 10
4454: PUSH
4455: LD_VAR 0 10
4459: PUSH
4460: LD_REAL  1.10000000000000E+0000
4463: MUL
4464: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4465: LD_ADDR_VAR 0 10
4469: PUSH
4470: LD_VAR 0 10
4474: PUSH
4475: LD_VAR 0 6
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: CALL_OW 259
4487: PUSH
4488: LD_REAL  1.15000000000000E+0000
4491: MUL
4492: MUL
4493: ST_TO_ADDR
// end ; unit_vehicle :
4494: GO 5318
4496: LD_INT 2
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 5306
4504: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4505: LD_VAR 0 6
4509: PPUSH
4510: CALL_OW 264
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 42
4520: PUSH
4521: LD_INT 24
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: IN
4529: IFFALSE 4550
// points := [ 25 , 5 , 3 ] ;
4531: LD_ADDR_VAR 0 9
4535: PUSH
4536: LD_INT 25
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4550: LD_VAR 0 6
4554: PPUSH
4555: CALL_OW 264
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 43
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: IN
4574: IFFALSE 4595
// points := [ 40 , 15 , 5 ] ;
4576: LD_ADDR_VAR 0 9
4580: PUSH
4581: LD_INT 40
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4595: LD_VAR 0 6
4599: PPUSH
4600: CALL_OW 264
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 23
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: IN
4615: IFFALSE 4636
// points := [ 7 , 25 , 8 ] ;
4617: LD_ADDR_VAR 0 9
4621: PUSH
4622: LD_INT 7
4624: PUSH
4625: LD_INT 25
4627: PUSH
4628: LD_INT 8
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4636: LD_VAR 0 6
4640: PPUSH
4641: CALL_OW 264
4645: PUSH
4646: LD_INT 5
4648: PUSH
4649: LD_INT 27
4651: PUSH
4652: LD_INT 44
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: IN
4660: IFFALSE 4681
// points := [ 14 , 50 , 16 ] ;
4662: LD_ADDR_VAR 0 9
4666: PUSH
4667: LD_INT 14
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: LD_INT 16
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4681: LD_VAR 0 6
4685: PPUSH
4686: CALL_OW 264
4690: PUSH
4691: LD_INT 6
4693: PUSH
4694: LD_INT 46
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: IN
4701: IFFALSE 4722
// points := [ 32 , 120 , 70 ] ;
4703: LD_ADDR_VAR 0 9
4707: PUSH
4708: LD_INT 32
4710: PUSH
4711: LD_INT 120
4713: PUSH
4714: LD_INT 70
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4722: LD_VAR 0 6
4726: PPUSH
4727: CALL_OW 264
4731: PUSH
4732: LD_INT 7
4734: PUSH
4735: LD_INT 28
4737: PUSH
4738: LD_INT 45
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: IN
4746: IFFALSE 4767
// points := [ 35 , 20 , 45 ] ;
4748: LD_ADDR_VAR 0 9
4752: PUSH
4753: LD_INT 35
4755: PUSH
4756: LD_INT 20
4758: PUSH
4759: LD_INT 45
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4767: LD_VAR 0 6
4771: PPUSH
4772: CALL_OW 264
4776: PUSH
4777: LD_INT 47
4779: PUSH
4780: EMPTY
4781: LIST
4782: IN
4783: IFFALSE 4804
// points := [ 67 , 45 , 75 ] ;
4785: LD_ADDR_VAR 0 9
4789: PUSH
4790: LD_INT 67
4792: PUSH
4793: LD_INT 45
4795: PUSH
4796: LD_INT 75
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: LIST
4803: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4804: LD_VAR 0 6
4808: PPUSH
4809: CALL_OW 264
4813: PUSH
4814: LD_INT 26
4816: PUSH
4817: EMPTY
4818: LIST
4819: IN
4820: IFFALSE 4841
// points := [ 120 , 30 , 80 ] ;
4822: LD_ADDR_VAR 0 9
4826: PUSH
4827: LD_INT 120
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 80
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4841: LD_VAR 0 6
4845: PPUSH
4846: CALL_OW 264
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: EMPTY
4855: LIST
4856: IN
4857: IFFALSE 4878
// points := [ 40 , 1 , 1 ] ;
4859: LD_ADDR_VAR 0 9
4863: PUSH
4864: LD_INT 40
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4878: LD_VAR 0 6
4882: PPUSH
4883: CALL_OW 264
4887: PUSH
4888: LD_INT 29
4890: PUSH
4891: EMPTY
4892: LIST
4893: IN
4894: IFFALSE 4915
// points := [ 70 , 200 , 400 ] ;
4896: LD_ADDR_VAR 0 9
4900: PUSH
4901: LD_INT 70
4903: PUSH
4904: LD_INT 200
4906: PUSH
4907: LD_INT 400
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4915: LD_VAR 0 6
4919: PPUSH
4920: CALL_OW 264
4924: PUSH
4925: LD_INT 14
4927: PUSH
4928: LD_INT 53
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: IN
4935: IFFALSE 4956
// points := [ 40 , 10 , 20 ] ;
4937: LD_ADDR_VAR 0 9
4941: PUSH
4942: LD_INT 40
4944: PUSH
4945: LD_INT 10
4947: PUSH
4948: LD_INT 20
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4956: LD_VAR 0 6
4960: PPUSH
4961: CALL_OW 264
4965: PUSH
4966: LD_INT 9
4968: PUSH
4969: EMPTY
4970: LIST
4971: IN
4972: IFFALSE 4993
// points := [ 5 , 70 , 20 ] ;
4974: LD_ADDR_VAR 0 9
4978: PUSH
4979: LD_INT 5
4981: PUSH
4982: LD_INT 70
4984: PUSH
4985: LD_INT 20
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 264
5002: PUSH
5003: LD_INT 10
5005: PUSH
5006: EMPTY
5007: LIST
5008: IN
5009: IFFALSE 5030
// points := [ 35 , 110 , 70 ] ;
5011: LD_ADDR_VAR 0 9
5015: PUSH
5016: LD_INT 35
5018: PUSH
5019: LD_INT 110
5021: PUSH
5022: LD_INT 70
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
5030: LD_VAR 0 6
5034: PPUSH
5035: CALL_OW 265
5039: PUSH
5040: LD_INT 25
5042: EQUAL
5043: IFFALSE 5064
// points := [ 80 , 65 , 100 ] ;
5045: LD_ADDR_VAR 0 9
5049: PUSH
5050: LD_INT 80
5052: PUSH
5053: LD_INT 65
5055: PUSH
5056: LD_INT 100
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5064: LD_VAR 0 6
5068: PPUSH
5069: CALL_OW 263
5073: PUSH
5074: LD_INT 1
5076: EQUAL
5077: IFFALSE 5112
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5079: LD_ADDR_VAR 0 10
5083: PUSH
5084: LD_VAR 0 10
5088: PUSH
5089: LD_VAR 0 6
5093: PPUSH
5094: CALL_OW 311
5098: PPUSH
5099: LD_INT 3
5101: PPUSH
5102: CALL_OW 259
5106: PUSH
5107: LD_INT 4
5109: MUL
5110: MUL
5111: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5112: LD_VAR 0 6
5116: PPUSH
5117: CALL_OW 263
5121: PUSH
5122: LD_INT 2
5124: EQUAL
5125: IFFALSE 5176
// begin j := IsControledBy ( i ) ;
5127: LD_ADDR_VAR 0 7
5131: PUSH
5132: LD_VAR 0 6
5136: PPUSH
5137: CALL_OW 312
5141: ST_TO_ADDR
// if j then
5142: LD_VAR 0 7
5146: IFFALSE 5176
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5148: LD_ADDR_VAR 0 10
5152: PUSH
5153: LD_VAR 0 10
5157: PUSH
5158: LD_VAR 0 7
5162: PPUSH
5163: LD_INT 3
5165: PPUSH
5166: CALL_OW 259
5170: PUSH
5171: LD_INT 3
5173: MUL
5174: MUL
5175: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5176: LD_VAR 0 6
5180: PPUSH
5181: CALL_OW 264
5185: PUSH
5186: LD_INT 5
5188: PUSH
5189: LD_INT 6
5191: PUSH
5192: LD_INT 46
5194: PUSH
5195: LD_INT 44
5197: PUSH
5198: LD_INT 47
5200: PUSH
5201: LD_INT 45
5203: PUSH
5204: LD_INT 28
5206: PUSH
5207: LD_INT 7
5209: PUSH
5210: LD_INT 27
5212: PUSH
5213: LD_INT 29
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: IN
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 52
5236: PPUSH
5237: CALL_OW 321
5241: PUSH
5242: LD_INT 2
5244: EQUAL
5245: AND
5246: IFFALSE 5263
// bpoints := bpoints * 1.2 ;
5248: LD_ADDR_VAR 0 10
5252: PUSH
5253: LD_VAR 0 10
5257: PUSH
5258: LD_REAL  1.20000000000000E+0000
5261: MUL
5262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5263: LD_VAR 0 6
5267: PPUSH
5268: CALL_OW 264
5272: PUSH
5273: LD_INT 6
5275: PUSH
5276: LD_INT 46
5278: PUSH
5279: LD_INT 47
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: IN
5287: IFFALSE 5304
// bpoints := bpoints * 1.2 ;
5289: LD_ADDR_VAR 0 10
5293: PUSH
5294: LD_VAR 0 10
5298: PUSH
5299: LD_REAL  1.20000000000000E+0000
5302: MUL
5303: ST_TO_ADDR
// end ; unit_building :
5304: GO 5318
5306: LD_INT 3
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5317
5314: POP
// ; end ;
5315: GO 5318
5317: POP
// for j = 1 to 3 do
5318: LD_ADDR_VAR 0 7
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_INT 3
5330: PUSH
5331: FOR_TO
5332: IFFALSE 5385
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5334: LD_ADDR_VAR 0 5
5338: PUSH
5339: LD_VAR 0 5
5343: PPUSH
5344: LD_VAR 0 7
5348: PPUSH
5349: LD_VAR 0 5
5353: PUSH
5354: LD_VAR 0 7
5358: ARRAY
5359: PUSH
5360: LD_VAR 0 9
5364: PUSH
5365: LD_VAR 0 7
5369: ARRAY
5370: PUSH
5371: LD_VAR 0 10
5375: MUL
5376: PLUS
5377: PPUSH
5378: CALL_OW 1
5382: ST_TO_ADDR
5383: GO 5331
5385: POP
5386: POP
// end ;
5387: GO 3870
5389: POP
5390: POP
// result := Replace ( result , 4 , tmp ) ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_VAR 0 5
5400: PPUSH
5401: LD_INT 4
5403: PPUSH
5404: LD_VAR 0 8
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// end ;
5414: LD_VAR 0 5
5418: RET
// export function DangerAtRange ( unit , range ) ; begin
5419: LD_INT 0
5421: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 255
5436: PPUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 250
5446: PPUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 251
5456: PPUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL 3722 0 4
5466: ST_TO_ADDR
// end ;
5467: LD_VAR 0 3
5471: RET
// export function IsExtension ( b ) ; begin
5472: LD_INT 0
5474: PPUSH
// result := false ;
5475: LD_ADDR_VAR 0 2
5479: PUSH
5480: LD_INT 0
5482: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 266
5492: PUSH
5493: LD_INT 23
5495: PUSH
5496: LD_INT 20
5498: PUSH
5499: LD_INT 22
5501: PUSH
5502: LD_INT 17
5504: PUSH
5505: LD_INT 24
5507: PUSH
5508: LD_INT 21
5510: PUSH
5511: LD_INT 19
5513: PUSH
5514: LD_INT 16
5516: PUSH
5517: LD_INT 25
5519: PUSH
5520: LD_INT 18
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: IN
5535: IFFALSE 5545
// result := true ;
5537: LD_ADDR_VAR 0 2
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// end ;
5545: LD_VAR 0 2
5549: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5550: LD_INT 0
5552: PPUSH
5553: PPUSH
5554: PPUSH
// result := [ ] ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: EMPTY
5561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 21
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 69
5581: ST_TO_ADDR
// if not tmp then
5582: LD_VAR 0 3
5586: NOT
5587: IFFALSE 5591
// exit ;
5589: GO 5641
// for i in tmp do
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: LD_VAR 0 3
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5639
// if GetBase ( i ) = base then
5604: LD_VAR 0 4
5608: PPUSH
5609: CALL_OW 274
5613: PUSH
5614: LD_VAR 0 1
5618: EQUAL
5619: IFFALSE 5637
// result := result ^ i ;
5621: LD_ADDR_VAR 0 2
5625: PUSH
5626: LD_VAR 0 2
5630: PUSH
5631: LD_VAR 0 4
5635: ADD
5636: ST_TO_ADDR
5637: GO 5601
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 2
5645: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// if BuildingStatus ( b ) = bs_build then
5650: LD_VAR 0 2
5654: PPUSH
5655: CALL_OW 461
5659: PUSH
5660: LD_INT 1
5662: EQUAL
5663: IFFALSE 5723
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5665: LD_VAR 0 1
5669: PPUSH
5670: LD_STRING h
5672: PUSH
5673: LD_VAR 0 2
5677: PPUSH
5678: CALL_OW 250
5682: PUSH
5683: LD_VAR 0 2
5687: PPUSH
5688: CALL_OW 251
5692: PUSH
5693: LD_VAR 0 2
5697: PUSH
5698: LD_INT 0
5700: PUSH
5701: LD_INT 0
5703: PUSH
5704: LD_INT 0
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: EMPTY
5717: LIST
5718: PPUSH
5719: CALL_OW 446
// end ;
5723: LD_VAR 0 3
5727: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5728: LD_INT 0
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5735: LD_VAR 0 1
5739: NOT
5740: PUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 263
5750: PUSH
5751: LD_INT 2
5753: EQUAL
5754: NOT
5755: OR
5756: IFFALSE 5760
// exit ;
5758: GO 6032
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5760: LD_ADDR_VAR 0 6
5764: PUSH
5765: LD_INT 22
5767: PUSH
5768: LD_VAR 0 1
5772: PPUSH
5773: CALL_OW 255
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 2
5784: PUSH
5785: LD_INT 30
5787: PUSH
5788: LD_INT 36
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 34
5797: PUSH
5798: LD_INT 31
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: ST_TO_ADDR
// if not tmp then
5819: LD_VAR 0 6
5823: NOT
5824: IFFALSE 5828
// exit ;
5826: GO 6032
// result := [ ] ;
5828: LD_ADDR_VAR 0 2
5832: PUSH
5833: EMPTY
5834: ST_TO_ADDR
// for i in tmp do
5835: LD_ADDR_VAR 0 3
5839: PUSH
5840: LD_VAR 0 6
5844: PUSH
5845: FOR_IN
5846: IFFALSE 5894
// begin t := UnitsInside ( i ) ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_VAR 0 3
5857: PPUSH
5858: CALL_OW 313
5862: ST_TO_ADDR
// if t then
5863: LD_VAR 0 4
5867: IFFALSE 5892
// result := Insert ( result , 1 , t ) ;
5869: LD_ADDR_VAR 0 2
5873: PUSH
5874: LD_VAR 0 2
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: LD_VAR 0 4
5886: PPUSH
5887: CALL_OW 2
5891: ST_TO_ADDR
// end ;
5892: GO 5845
5894: POP
5895: POP
// if not result then
5896: LD_VAR 0 2
5900: NOT
5901: IFFALSE 5905
// exit ;
5903: GO 6032
// mech := 0 ;
5905: LD_ADDR_VAR 0 5
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// for i in result do
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: LD_VAR 0 2
5922: PUSH
5923: FOR_IN
5924: IFFALSE 6006
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5926: LD_ADDR_VAR 0 4
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: CALL_OW 259
5943: PUSH
5944: LD_VAR 0 3
5948: PPUSH
5949: CALL_OW 432
5953: MINUS
5954: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5955: LD_VAR 0 4
5959: PUSH
5960: LD_VAR 0 5
5964: PUSH
5965: LD_INT 1
5967: ARRAY
5968: PPUSH
5969: LD_INT 3
5971: PPUSH
5972: CALL_OW 259
5976: PUSH
5977: LD_VAR 0 5
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: CALL_OW 432
5990: MINUS
5991: GREATEREQUAL
5992: IFFALSE 6004
// mech := i ;
5994: LD_ADDR_VAR 0 5
5998: PUSH
5999: LD_VAR 0 3
6003: ST_TO_ADDR
// end ;
6004: GO 5923
6006: POP
6007: POP
// if mech then
6008: LD_VAR 0 5
6012: IFFALSE 6032
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
6014: LD_VAR 0 1
6018: PPUSH
6019: LD_VAR 0 5
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: CALL_OW 135
// end ;
6032: LD_VAR 0 2
6036: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
6045: PPUSH
6046: PPUSH
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
// result := [ ] ;
6051: LD_ADDR_VAR 0 6
6055: PUSH
6056: EMPTY
6057: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 266
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 1
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: IN
6078: NOT
6079: IFFALSE 6083
// exit ;
6081: GO 7376
// if name then
6083: LD_VAR 0 2
6087: IFFALSE 6103
// SetBName ( base_dep , name ) ;
6089: LD_VAR 0 1
6093: PPUSH
6094: LD_VAR 0 2
6098: PPUSH
6099: CALL_OW 500
// base := GetBase ( base_dep ) ;
6103: LD_ADDR_VAR 0 14
6107: PUSH
6108: LD_VAR 0 1
6112: PPUSH
6113: CALL_OW 274
6117: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6118: LD_ADDR_VAR 0 15
6122: PUSH
6123: LD_VAR 0 1
6127: PPUSH
6128: CALL_OW 255
6132: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6133: LD_ADDR_VAR 0 16
6137: PUSH
6138: LD_VAR 0 1
6142: PPUSH
6143: CALL_OW 248
6147: ST_TO_ADDR
// if sources then
6148: LD_VAR 0 4
6152: IFFALSE 6199
// for i = 1 to 3 do
6154: LD_ADDR_VAR 0 7
6158: PUSH
6159: DOUBLE
6160: LD_INT 1
6162: DEC
6163: ST_TO_ADDR
6164: LD_INT 3
6166: PUSH
6167: FOR_TO
6168: IFFALSE 6197
// AddResourceType ( base , i , sources [ i ] ) ;
6170: LD_VAR 0 14
6174: PPUSH
6175: LD_VAR 0 7
6179: PPUSH
6180: LD_VAR 0 4
6184: PUSH
6185: LD_VAR 0 7
6189: ARRAY
6190: PPUSH
6191: CALL_OW 276
6195: GO 6167
6197: POP
6198: POP
// buildings := GetBaseBuildings ( base ) ;
6199: LD_ADDR_VAR 0 17
6203: PUSH
6204: LD_VAR 0 14
6208: PPUSH
6209: CALL 5550 0 1
6213: ST_TO_ADDR
// InitHc ;
6214: CALL_OW 19
// InitUc ;
6218: CALL_OW 18
// uc_side := side ;
6222: LD_ADDR_OWVAR 20
6226: PUSH
6227: LD_VAR 0 15
6231: ST_TO_ADDR
// uc_nation := nation ;
6232: LD_ADDR_OWVAR 21
6236: PUSH
6237: LD_VAR 0 16
6241: ST_TO_ADDR
// if buildings then
6242: LD_VAR 0 17
6246: IFFALSE 7235
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6248: LD_VAR 0 17
6252: PPUSH
6253: LD_INT 2
6255: PUSH
6256: LD_INT 30
6258: PUSH
6259: LD_INT 32
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 30
6268: PUSH
6269: LD_INT 33
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 72
6285: IFFALSE 6368
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6287: LD_ADDR_VAR 0 7
6291: PUSH
6292: LD_VAR 0 17
6296: PPUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 32
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: LD_INT 30
6312: PUSH
6313: LD_INT 33
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 72
6329: PUSH
6330: FOR_IN
6331: IFFALSE 6366
// begin if not GetBWeapon ( i ) then
6333: LD_VAR 0 7
6337: PPUSH
6338: CALL_OW 269
6342: NOT
6343: IFFALSE 6364
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6345: LD_VAR 0 7
6349: PPUSH
6350: LD_VAR 0 7
6354: PPUSH
6355: CALL 7381 0 1
6359: PPUSH
6360: CALL_OW 431
// end ;
6364: GO 6330
6366: POP
6367: POP
// end ; for i = 1 to personel do
6368: LD_ADDR_VAR 0 7
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 5
6382: PUSH
6383: FOR_TO
6384: IFFALSE 7215
// begin if i > 4 then
6386: LD_VAR 0 7
6390: PUSH
6391: LD_INT 4
6393: GREATER
6394: IFFALSE 6398
// break ;
6396: GO 7215
// case i of 1 :
6398: LD_VAR 0 7
6402: PUSH
6403: LD_INT 1
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6484
6411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6412: LD_ADDR_VAR 0 11
6416: PUSH
6417: LD_VAR 0 17
6421: PPUSH
6422: LD_INT 22
6424: PUSH
6425: LD_VAR 0 15
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 30
6439: PUSH
6440: LD_INT 32
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 30
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 30
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 72
6481: ST_TO_ADDR
6482: GO 6706
6484: LD_INT 2
6486: DOUBLE
6487: EQUAL
6488: IFTRUE 6492
6490: GO 6554
6492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6493: LD_ADDR_VAR 0 11
6497: PUSH
6498: LD_VAR 0 17
6502: PPUSH
6503: LD_INT 22
6505: PUSH
6506: LD_VAR 0 15
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 30
6520: PUSH
6521: LD_INT 0
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 30
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL_OW 72
6551: ST_TO_ADDR
6552: GO 6706
6554: LD_INT 3
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6624
6562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6563: LD_ADDR_VAR 0 11
6567: PUSH
6568: LD_VAR 0 17
6572: PPUSH
6573: LD_INT 22
6575: PUSH
6576: LD_VAR 0 15
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 30
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 72
6621: ST_TO_ADDR
6622: GO 6706
6624: LD_INT 4
6626: DOUBLE
6627: EQUAL
6628: IFTRUE 6632
6630: GO 6705
6632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6633: LD_ADDR_VAR 0 11
6637: PUSH
6638: LD_VAR 0 17
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_VAR 0 15
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 6
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 30
6670: PUSH
6671: LD_INT 7
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 30
6680: PUSH
6681: LD_INT 8
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PPUSH
6698: CALL_OW 72
6702: ST_TO_ADDR
6703: GO 6706
6705: POP
// if not f then
6706: LD_VAR 0 11
6710: NOT
6711: IFFALSE 6715
// continue ;
6713: GO 6383
// x := personel [ i ] ;
6715: LD_ADDR_VAR 0 12
6719: PUSH
6720: LD_VAR 0 5
6724: PUSH
6725: LD_VAR 0 7
6729: ARRAY
6730: ST_TO_ADDR
// if x = - 1 then
6731: LD_VAR 0 12
6735: PUSH
6736: LD_INT 1
6738: NEG
6739: EQUAL
6740: IFFALSE 6945
// begin for j in f do
6742: LD_ADDR_VAR 0 8
6746: PUSH
6747: LD_VAR 0 11
6751: PUSH
6752: FOR_IN
6753: IFFALSE 6941
// repeat if GetBType ( j ) = b_barracks then
6755: LD_VAR 0 8
6759: PPUSH
6760: CALL_OW 266
6764: PUSH
6765: LD_INT 5
6767: EQUAL
6768: IFFALSE 6838
// begin if UnitsInside ( j ) < 3 then
6770: LD_VAR 0 8
6774: PPUSH
6775: CALL_OW 313
6779: PUSH
6780: LD_INT 3
6782: LESS
6783: IFFALSE 6819
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 5
6790: PUSH
6791: LD_INT 8
6793: PUSH
6794: LD_INT 9
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_VAR 0 16
6806: ARRAY
6807: PPUSH
6808: LD_VAR 0 3
6812: PPUSH
6813: CALL_OW 380
6817: GO 6836
// PrepareHuman ( false , i , skill ) ;
6819: LD_INT 0
6821: PPUSH
6822: LD_VAR 0 7
6826: PPUSH
6827: LD_VAR 0 3
6831: PPUSH
6832: CALL_OW 380
// end else
6836: GO 6855
// PrepareHuman ( false , i , skill ) ;
6838: LD_INT 0
6840: PPUSH
6841: LD_VAR 0 7
6845: PPUSH
6846: LD_VAR 0 3
6850: PPUSH
6851: CALL_OW 380
// un := CreateHuman ;
6855: LD_ADDR_VAR 0 13
6859: PUSH
6860: CALL_OW 44
6864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6865: LD_ADDR_VAR 0 6
6869: PUSH
6870: LD_VAR 0 6
6874: PPUSH
6875: LD_INT 1
6877: PPUSH
6878: LD_VAR 0 13
6882: PPUSH
6883: CALL_OW 2
6887: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6888: LD_VAR 0 13
6892: PPUSH
6893: LD_VAR 0 8
6897: PPUSH
6898: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6902: LD_VAR 0 8
6906: PPUSH
6907: CALL_OW 313
6911: PUSH
6912: LD_INT 6
6914: EQUAL
6915: PUSH
6916: LD_VAR 0 8
6920: PPUSH
6921: CALL_OW 266
6925: PUSH
6926: LD_INT 32
6928: PUSH
6929: LD_INT 31
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: IN
6936: OR
6937: IFFALSE 6755
6939: GO 6752
6941: POP
6942: POP
// end else
6943: GO 7213
// for j = 1 to x do
6945: LD_ADDR_VAR 0 8
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 12
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7211
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6963: LD_VAR 0 11
6967: PUSH
6968: LD_INT 1
6970: ARRAY
6971: PPUSH
6972: CALL_OW 313
6976: PUSH
6977: LD_VAR 0 11
6981: PUSH
6982: LD_INT 1
6984: ARRAY
6985: PPUSH
6986: CALL_OW 266
6990: PUSH
6991: LD_INT 32
6993: PUSH
6994: LD_INT 31
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: IN
7001: AND
7002: PUSH
7003: LD_VAR 0 11
7007: PUSH
7008: LD_INT 1
7010: ARRAY
7011: PPUSH
7012: CALL_OW 313
7016: PUSH
7017: LD_INT 6
7019: EQUAL
7020: OR
7021: IFFALSE 7041
// f := Delete ( f , 1 ) ;
7023: LD_ADDR_VAR 0 11
7027: PUSH
7028: LD_VAR 0 11
7032: PPUSH
7033: LD_INT 1
7035: PPUSH
7036: CALL_OW 3
7040: ST_TO_ADDR
// if not f then
7041: LD_VAR 0 11
7045: NOT
7046: IFFALSE 7050
// break ;
7048: GO 7211
// if GetBType ( f [ 1 ] ) = b_barracks then
7050: LD_VAR 0 11
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 266
7063: PUSH
7064: LD_INT 5
7066: EQUAL
7067: IFFALSE 7141
// begin if UnitsInside ( f [ 1 ] ) < 3 then
7069: LD_VAR 0 11
7073: PUSH
7074: LD_INT 1
7076: ARRAY
7077: PPUSH
7078: CALL_OW 313
7082: PUSH
7083: LD_INT 3
7085: LESS
7086: IFFALSE 7122
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
7088: LD_INT 0
7090: PPUSH
7091: LD_INT 5
7093: PUSH
7094: LD_INT 8
7096: PUSH
7097: LD_INT 9
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_VAR 0 16
7109: ARRAY
7110: PPUSH
7111: LD_VAR 0 3
7115: PPUSH
7116: CALL_OW 380
7120: GO 7139
// PrepareHuman ( false , i , skill ) ;
7122: LD_INT 0
7124: PPUSH
7125: LD_VAR 0 7
7129: PPUSH
7130: LD_VAR 0 3
7134: PPUSH
7135: CALL_OW 380
// end else
7139: GO 7158
// PrepareHuman ( false , i , skill ) ;
7141: LD_INT 0
7143: PPUSH
7144: LD_VAR 0 7
7148: PPUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: CALL_OW 380
// un := CreateHuman ;
7158: LD_ADDR_VAR 0 13
7162: PUSH
7163: CALL_OW 44
7167: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
7168: LD_ADDR_VAR 0 6
7172: PUSH
7173: LD_VAR 0 6
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: LD_VAR 0 13
7185: PPUSH
7186: CALL_OW 2
7190: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
7191: LD_VAR 0 13
7195: PPUSH
7196: LD_VAR 0 11
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: PPUSH
7205: CALL_OW 52
// end ;
7209: GO 6960
7211: POP
7212: POP
// end ;
7213: GO 6383
7215: POP
7216: POP
// result := result ^ buildings ;
7217: LD_ADDR_VAR 0 6
7221: PUSH
7222: LD_VAR 0 6
7226: PUSH
7227: LD_VAR 0 17
7231: ADD
7232: ST_TO_ADDR
// end else
7233: GO 7376
// begin for i = 1 to personel do
7235: LD_ADDR_VAR 0 7
7239: PUSH
7240: DOUBLE
7241: LD_INT 1
7243: DEC
7244: ST_TO_ADDR
7245: LD_VAR 0 5
7249: PUSH
7250: FOR_TO
7251: IFFALSE 7374
// begin if i > 4 then
7253: LD_VAR 0 7
7257: PUSH
7258: LD_INT 4
7260: GREATER
7261: IFFALSE 7265
// break ;
7263: GO 7374
// x := personel [ i ] ;
7265: LD_ADDR_VAR 0 12
7269: PUSH
7270: LD_VAR 0 5
7274: PUSH
7275: LD_VAR 0 7
7279: ARRAY
7280: ST_TO_ADDR
// if x = - 1 then
7281: LD_VAR 0 12
7285: PUSH
7286: LD_INT 1
7288: NEG
7289: EQUAL
7290: IFFALSE 7294
// continue ;
7292: GO 7250
// PrepareHuman ( false , i , skill ) ;
7294: LD_INT 0
7296: PPUSH
7297: LD_VAR 0 7
7301: PPUSH
7302: LD_VAR 0 3
7306: PPUSH
7307: CALL_OW 380
// un := CreateHuman ;
7311: LD_ADDR_VAR 0 13
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7321: LD_VAR 0 13
7325: PPUSH
7326: LD_VAR 0 1
7330: PPUSH
7331: CALL_OW 250
7335: PPUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 251
7345: PPUSH
7346: LD_INT 10
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 50
// result := result ^ un ;
7356: LD_ADDR_VAR 0 6
7360: PUSH
7361: LD_VAR 0 6
7365: PUSH
7366: LD_VAR 0 13
7370: ADD
7371: ST_TO_ADDR
// end ;
7372: GO 7250
7374: POP
7375: POP
// end ; end ;
7376: LD_VAR 0 6
7380: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7381: LD_INT 0
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
// result := false ;
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7407: LD_VAR 0 1
7411: NOT
7412: PUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 266
7422: PUSH
7423: LD_INT 32
7425: PUSH
7426: LD_INT 33
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: IN
7433: NOT
7434: OR
7435: IFFALSE 7439
// exit ;
7437: GO 8672
// nat := GetNation ( tower ) ;
7439: LD_ADDR_VAR 0 11
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 248
7453: ST_TO_ADDR
// side := GetSide ( tower ) ;
7454: LD_ADDR_VAR 0 15
7458: PUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 255
7468: ST_TO_ADDR
// x := GetX ( tower ) ;
7469: LD_ADDR_VAR 0 9
7473: PUSH
7474: LD_VAR 0 1
7478: PPUSH
7479: CALL_OW 250
7483: ST_TO_ADDR
// y := GetY ( tower ) ;
7484: LD_ADDR_VAR 0 10
7488: PUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 251
7498: ST_TO_ADDR
// if not x or not y then
7499: LD_VAR 0 9
7503: NOT
7504: PUSH
7505: LD_VAR 0 10
7509: NOT
7510: OR
7511: IFFALSE 7515
// exit ;
7513: GO 8672
// weapon := 0 ;
7515: LD_ADDR_VAR 0 17
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// fac_list := [ ] ;
7523: LD_ADDR_VAR 0 16
7527: PUSH
7528: EMPTY
7529: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7530: LD_ADDR_VAR 0 5
7534: PUSH
7535: LD_VAR 0 1
7539: PPUSH
7540: CALL_OW 274
7544: PPUSH
7545: CALL 5550 0 1
7549: PPUSH
7550: LD_INT 30
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 72
7564: ST_TO_ADDR
// if not factories then
7565: LD_VAR 0 5
7569: NOT
7570: IFFALSE 7574
// exit ;
7572: GO 8672
// for i in factories do
7574: LD_ADDR_VAR 0 7
7578: PUSH
7579: LD_VAR 0 5
7583: PUSH
7584: FOR_IN
7585: IFFALSE 7610
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7587: LD_ADDR_VAR 0 16
7591: PUSH
7592: LD_VAR 0 16
7596: PUSH
7597: LD_VAR 0 7
7601: PPUSH
7602: CALL_OW 478
7606: UNION
7607: ST_TO_ADDR
7608: GO 7584
7610: POP
7611: POP
// if not fac_list then
7612: LD_VAR 0 16
7616: NOT
7617: IFFALSE 7621
// exit ;
7619: GO 8672
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7621: LD_ADDR_VAR 0 4
7625: PUSH
7626: LD_INT 4
7628: PUSH
7629: LD_INT 5
7631: PUSH
7632: LD_INT 9
7634: PUSH
7635: LD_INT 10
7637: PUSH
7638: LD_INT 6
7640: PUSH
7641: LD_INT 7
7643: PUSH
7644: LD_INT 11
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 27
7658: PUSH
7659: LD_INT 28
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 30
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 43
7676: PUSH
7677: LD_INT 44
7679: PUSH
7680: LD_INT 46
7682: PUSH
7683: LD_INT 45
7685: PUSH
7686: LD_INT 47
7688: PUSH
7689: LD_INT 49
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: LD_VAR 0 11
7709: ARRAY
7710: ST_TO_ADDR
// for i in list do
7711: LD_ADDR_VAR 0 7
7715: PUSH
7716: LD_VAR 0 4
7720: PUSH
7721: FOR_IN
7722: IFFALSE 7755
// if not i in fac_list then
7724: LD_VAR 0 7
7728: PUSH
7729: LD_VAR 0 16
7733: IN
7734: NOT
7735: IFFALSE 7753
// list := list diff i ;
7737: LD_ADDR_VAR 0 4
7741: PUSH
7742: LD_VAR 0 4
7746: PUSH
7747: LD_VAR 0 7
7751: DIFF
7752: ST_TO_ADDR
7753: GO 7721
7755: POP
7756: POP
// if not list then
7757: LD_VAR 0 4
7761: NOT
7762: IFFALSE 7766
// exit ;
7764: GO 8672
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7766: LD_VAR 0 11
7770: PUSH
7771: LD_INT 3
7773: EQUAL
7774: PUSH
7775: LD_INT 49
7777: PUSH
7778: LD_VAR 0 4
7782: IN
7783: AND
7784: PUSH
7785: LD_INT 31
7787: PPUSH
7788: LD_VAR 0 15
7792: PPUSH
7793: CALL_OW 321
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: AND
7802: IFFALSE 7862
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7804: LD_INT 22
7806: PUSH
7807: LD_VAR 0 15
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 35
7818: PUSH
7819: LD_INT 49
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 91
7828: PUSH
7829: LD_VAR 0 1
7833: PUSH
7834: LD_INT 10
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: PPUSH
7847: CALL_OW 69
7851: NOT
7852: IFFALSE 7862
// weapon := ru_time_lapser ;
7854: LD_ADDR_VAR 0 17
7858: PUSH
7859: LD_INT 49
7861: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7862: LD_VAR 0 11
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: LD_INT 2
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: IN
7877: PUSH
7878: LD_INT 11
7880: PUSH
7881: LD_VAR 0 4
7885: IN
7886: PUSH
7887: LD_INT 30
7889: PUSH
7890: LD_VAR 0 4
7894: IN
7895: OR
7896: AND
7897: PUSH
7898: LD_INT 6
7900: PPUSH
7901: LD_VAR 0 15
7905: PPUSH
7906: CALL_OW 321
7910: PUSH
7911: LD_INT 2
7913: EQUAL
7914: AND
7915: IFFALSE 8080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7917: LD_INT 22
7919: PUSH
7920: LD_VAR 0 15
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 35
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 35
7944: PUSH
7945: LD_INT 30
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 91
7959: PUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_INT 18
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 69
7982: NOT
7983: PUSH
7984: LD_INT 22
7986: PUSH
7987: LD_VAR 0 15
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 2
7998: PUSH
7999: LD_INT 30
8001: PUSH
8002: LD_INT 32
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 30
8011: PUSH
8012: LD_INT 33
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 91
8026: PUSH
8027: LD_VAR 0 1
8031: PUSH
8032: LD_INT 12
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: PPUSH
8048: CALL_OW 69
8052: PUSH
8053: LD_INT 2
8055: GREATER
8056: AND
8057: IFFALSE 8080
// weapon := [ us_radar , ar_radar ] [ nat ] ;
8059: LD_ADDR_VAR 0 17
8063: PUSH
8064: LD_INT 11
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_VAR 0 11
8078: ARRAY
8079: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
8080: LD_VAR 0 17
8084: NOT
8085: PUSH
8086: LD_INT 40
8088: PPUSH
8089: LD_VAR 0 15
8093: PPUSH
8094: CALL_OW 321
8098: PUSH
8099: LD_INT 2
8101: EQUAL
8102: AND
8103: PUSH
8104: LD_INT 7
8106: PUSH
8107: LD_VAR 0 4
8111: IN
8112: PUSH
8113: LD_INT 28
8115: PUSH
8116: LD_VAR 0 4
8120: IN
8121: OR
8122: PUSH
8123: LD_INT 45
8125: PUSH
8126: LD_VAR 0 4
8130: IN
8131: OR
8132: AND
8133: IFFALSE 8387
// begin hex := _GetHexInfo ( x , y ) ;
8135: LD_ADDR_VAR 0 3
8139: PUSH
8140: LD_VAR 0 9
8144: PPUSH
8145: LD_VAR 0 10
8149: PPUSH
8150: CALL 1973 0 2
8154: ST_TO_ADDR
// if hex [ 1 ] then
8155: LD_VAR 0 3
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: IFFALSE 8167
// exit ;
8165: GO 8672
// height := hex [ 2 ] ;
8167: LD_ADDR_VAR 0 14
8171: PUSH
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
8181: LD_ADDR_VAR 0 13
8185: PUSH
8186: LD_INT 0
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: LD_INT 5
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: ST_TO_ADDR
// for i in tmp do
8204: LD_ADDR_VAR 0 7
8208: PUSH
8209: LD_VAR 0 13
8213: PUSH
8214: FOR_IN
8215: IFFALSE 8385
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
8217: LD_ADDR_VAR 0 8
8221: PUSH
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 5
8234: PPUSH
8235: CALL_OW 272
8239: PUSH
8240: LD_VAR 0 10
8244: PPUSH
8245: LD_VAR 0 7
8249: PPUSH
8250: LD_INT 5
8252: PPUSH
8253: CALL_OW 273
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8262: LD_VAR 0 8
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_VAR 0 8
8275: PUSH
8276: LD_INT 2
8278: ARRAY
8279: PPUSH
8280: CALL_OW 488
8284: IFFALSE 8383
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8286: LD_ADDR_VAR 0 3
8290: PUSH
8291: LD_VAR 0 8
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: LD_VAR 0 8
8304: PUSH
8305: LD_INT 2
8307: ARRAY
8308: PPUSH
8309: CALL 1973 0 2
8313: ST_TO_ADDR
// if hex [ 1 ] then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: IFFALSE 8326
// continue ;
8324: GO 8214
// h := hex [ 2 ] ;
8326: LD_ADDR_VAR 0 12
8330: PUSH
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 2
8338: ARRAY
8339: ST_TO_ADDR
// if h + 7 < height then
8340: LD_VAR 0 12
8344: PUSH
8345: LD_INT 7
8347: PLUS
8348: PUSH
8349: LD_VAR 0 14
8353: LESS
8354: IFFALSE 8383
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8356: LD_ADDR_VAR 0 17
8360: PUSH
8361: LD_INT 7
8363: PUSH
8364: LD_INT 28
8366: PUSH
8367: LD_INT 45
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: LD_VAR 0 11
8379: ARRAY
8380: ST_TO_ADDR
// break ;
8381: GO 8385
// end ; end ; end ;
8383: GO 8214
8385: POP
8386: POP
// end ; if not weapon then
8387: LD_VAR 0 17
8391: NOT
8392: IFFALSE 8554
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8394: LD_ADDR_VAR 0 4
8398: PUSH
8399: LD_VAR 0 4
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 30
8409: PUSH
8410: LD_INT 49
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: DIFF
8418: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8419: LD_ADDR_VAR 0 17
8423: PUSH
8424: LD_VAR 0 4
8428: PUSH
8429: LD_INT 1
8431: PPUSH
8432: LD_VAR 0 4
8436: PPUSH
8437: CALL_OW 12
8441: ARRAY
8442: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8443: LD_ADDR_VAR 0 13
8447: PUSH
8448: LD_INT 22
8450: PUSH
8451: LD_VAR 0 15
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: LD_INT 35
8465: PUSH
8466: LD_INT 0
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PPUSH
8481: CALL_OW 69
8485: ST_TO_ADDR
// for i in tmp do
8486: LD_ADDR_VAR 0 7
8490: PUSH
8491: LD_VAR 0 13
8495: PUSH
8496: FOR_IN
8497: IFFALSE 8522
// list := list diff GetBWeapon ( i ) ;
8499: LD_ADDR_VAR 0 4
8503: PUSH
8504: LD_VAR 0 4
8508: PUSH
8509: LD_VAR 0 7
8513: PPUSH
8514: CALL_OW 269
8518: DIFF
8519: ST_TO_ADDR
8520: GO 8496
8522: POP
8523: POP
// if list then
8524: LD_VAR 0 4
8528: IFFALSE 8554
// weapon := list [ rand ( 1 , list ) ] ;
8530: LD_ADDR_VAR 0 17
8534: PUSH
8535: LD_VAR 0 4
8539: PUSH
8540: LD_INT 1
8542: PPUSH
8543: LD_VAR 0 4
8547: PPUSH
8548: CALL_OW 12
8552: ARRAY
8553: ST_TO_ADDR
// end ; if weapon then
8554: LD_VAR 0 17
8558: IFFALSE 8672
// begin tmp := CostOfWeapon ( weapon ) ;
8560: LD_ADDR_VAR 0 13
8564: PUSH
8565: LD_VAR 0 17
8569: PPUSH
8570: CALL_OW 451
8574: ST_TO_ADDR
// j := GetBase ( tower ) ;
8575: LD_ADDR_VAR 0 8
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 274
8589: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8590: LD_VAR 0 8
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: CALL_OW 275
8602: PUSH
8603: LD_VAR 0 13
8607: PUSH
8608: LD_INT 1
8610: ARRAY
8611: GREATEREQUAL
8612: PUSH
8613: LD_VAR 0 8
8617: PPUSH
8618: LD_INT 2
8620: PPUSH
8621: CALL_OW 275
8625: PUSH
8626: LD_VAR 0 13
8630: PUSH
8631: LD_INT 2
8633: ARRAY
8634: GREATEREQUAL
8635: AND
8636: PUSH
8637: LD_VAR 0 8
8641: PPUSH
8642: LD_INT 3
8644: PPUSH
8645: CALL_OW 275
8649: PUSH
8650: LD_VAR 0 13
8654: PUSH
8655: LD_INT 3
8657: ARRAY
8658: GREATEREQUAL
8659: AND
8660: IFFALSE 8672
// result := weapon ;
8662: LD_ADDR_VAR 0 2
8666: PUSH
8667: LD_VAR 0 17
8671: ST_TO_ADDR
// end ; end ;
8672: LD_VAR 0 2
8676: RET
// export function Compare ( val1 , val2 ) ; begin
8677: LD_INT 0
8679: PPUSH
// if val1 = val2 then
8680: LD_VAR 0 1
8684: PUSH
8685: LD_VAR 0 2
8689: EQUAL
8690: IFFALSE 8702
// result := true else
8692: LD_ADDR_VAR 0 3
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
8700: GO 8710
// result := false ;
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// end ;
8710: LD_VAR 0 3
8714: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8715: LD_INT 0
8717: PPUSH
8718: PPUSH
// result := true ;
8719: LD_ADDR_VAR 0 3
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// if array1 = array2 then
8727: LD_VAR 0 1
8731: PUSH
8732: LD_VAR 0 2
8736: EQUAL
8737: IFFALSE 8802
// begin for i = 1 to array1 do
8739: LD_ADDR_VAR 0 4
8743: PUSH
8744: DOUBLE
8745: LD_INT 1
8747: DEC
8748: ST_TO_ADDR
8749: LD_VAR 0 1
8753: PUSH
8754: FOR_TO
8755: IFFALSE 8798
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8757: LD_VAR 0 1
8761: PUSH
8762: LD_VAR 0 4
8766: ARRAY
8767: PPUSH
8768: LD_VAR 0 2
8772: PUSH
8773: LD_VAR 0 4
8777: ARRAY
8778: PPUSH
8779: CALL 8677 0 2
8783: NOT
8784: IFFALSE 8796
// begin result := false ;
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// break ;
8794: GO 8798
// end ;
8796: GO 8754
8798: POP
8799: POP
// end else
8800: GO 8810
// result := false ;
8802: LD_ADDR_VAR 0 3
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// end ;
8810: LD_VAR 0 3
8814: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// pom := GetBase ( fac ) ;
8820: LD_ADDR_VAR 0 5
8824: PUSH
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 274
8834: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8835: LD_ADDR_VAR 0 4
8839: PUSH
8840: LD_VAR 0 2
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: LD_VAR 0 2
8853: PUSH
8854: LD_INT 2
8856: ARRAY
8857: PPUSH
8858: LD_VAR 0 2
8862: PUSH
8863: LD_INT 3
8865: ARRAY
8866: PPUSH
8867: LD_VAR 0 2
8871: PUSH
8872: LD_INT 4
8874: ARRAY
8875: PPUSH
8876: CALL_OW 449
8880: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8881: LD_VAR 0 5
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 275
8893: PUSH
8894: LD_VAR 0 4
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: GREATEREQUAL
8903: PUSH
8904: LD_VAR 0 5
8908: PPUSH
8909: LD_INT 2
8911: PPUSH
8912: CALL_OW 275
8916: PUSH
8917: LD_VAR 0 4
8921: PUSH
8922: LD_INT 2
8924: ARRAY
8925: GREATEREQUAL
8926: AND
8927: PUSH
8928: LD_VAR 0 5
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 275
8940: PUSH
8941: LD_VAR 0 4
8945: PUSH
8946: LD_INT 3
8948: ARRAY
8949: GREATEREQUAL
8950: AND
8951: IFFALSE 8963
// result := true else
8953: LD_ADDR_VAR 0 3
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
8961: GO 8971
// result := false ;
8963: LD_ADDR_VAR 0 3
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// end ;
8971: LD_VAR 0 3
8975: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
// result := false ;
8987: LD_ADDR_VAR 0 6
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8995: LD_VAR 0 1
8999: NOT
9000: PUSH
9001: LD_VAR 0 2
9005: NOT
9006: OR
9007: PUSH
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 0
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: LD_INT 3
9024: PUSH
9025: LD_INT 4
9027: PUSH
9028: LD_INT 5
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: IN
9039: NOT
9040: OR
9041: PUSH
9042: LD_VAR 0 3
9046: PPUSH
9047: LD_VAR 0 4
9051: PPUSH
9052: CALL_OW 488
9056: NOT
9057: OR
9058: IFFALSE 9062
// exit ;
9060: GO 9736
// pom := GetBase ( bdepot ) ;
9062: LD_ADDR_VAR 0 9
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 274
9076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
9077: LD_ADDR_VAR 0 10
9081: PUSH
9082: LD_VAR 0 2
9086: PPUSH
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 248
9096: PPUSH
9097: CALL_OW 450
9101: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
9102: LD_VAR 0 9
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 275
9114: PUSH
9115: LD_VAR 0 10
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: GREATEREQUAL
9124: PUSH
9125: LD_VAR 0 9
9129: PPUSH
9130: LD_INT 2
9132: PPUSH
9133: CALL_OW 275
9137: PUSH
9138: LD_VAR 0 10
9142: PUSH
9143: LD_INT 2
9145: ARRAY
9146: GREATEREQUAL
9147: AND
9148: PUSH
9149: LD_VAR 0 9
9153: PPUSH
9154: LD_INT 3
9156: PPUSH
9157: CALL_OW 275
9161: PUSH
9162: LD_VAR 0 10
9166: PUSH
9167: LD_INT 3
9169: ARRAY
9170: GREATEREQUAL
9171: AND
9172: NOT
9173: IFFALSE 9177
// exit ;
9175: GO 9736
// if GetBType ( bdepot ) = b_depot then
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 266
9186: PUSH
9187: LD_INT 0
9189: EQUAL
9190: IFFALSE 9202
// dist := 28 else
9192: LD_ADDR_VAR 0 13
9196: PUSH
9197: LD_INT 28
9199: ST_TO_ADDR
9200: GO 9210
// dist := 36 ;
9202: LD_ADDR_VAR 0 13
9206: PUSH
9207: LD_INT 36
9209: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
9210: LD_VAR 0 1
9214: PPUSH
9215: LD_VAR 0 3
9219: PPUSH
9220: LD_VAR 0 4
9224: PPUSH
9225: CALL_OW 297
9229: PUSH
9230: LD_VAR 0 13
9234: GREATER
9235: IFFALSE 9239
// exit ;
9237: GO 9736
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
9239: LD_ADDR_VAR 0 11
9243: PUSH
9244: LD_VAR 0 2
9248: PPUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_VAR 0 4
9258: PPUSH
9259: LD_VAR 0 5
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 248
9273: PPUSH
9274: LD_INT 0
9276: PPUSH
9277: CALL 9741 0 6
9281: ST_TO_ADDR
// if not hexes then
9282: LD_VAR 0 11
9286: NOT
9287: IFFALSE 9291
// exit ;
9289: GO 9736
// hex := _GetHexInfo ( x , y ) ;
9291: LD_ADDR_VAR 0 14
9295: PUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_VAR 0 4
9305: PPUSH
9306: CALL 1973 0 2
9310: ST_TO_ADDR
// if hex [ 1 ] then
9311: LD_VAR 0 14
9315: PUSH
9316: LD_INT 1
9318: ARRAY
9319: IFFALSE 9323
// exit ;
9321: GO 9736
// height := hex [ 2 ] ;
9323: LD_ADDR_VAR 0 12
9327: PUSH
9328: LD_VAR 0 14
9332: PUSH
9333: LD_INT 2
9335: ARRAY
9336: ST_TO_ADDR
// for i = 1 to hexes do
9337: LD_ADDR_VAR 0 7
9341: PUSH
9342: DOUBLE
9343: LD_INT 1
9345: DEC
9346: ST_TO_ADDR
9347: LD_VAR 0 11
9351: PUSH
9352: FOR_TO
9353: IFFALSE 9691
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9355: LD_VAR 0 11
9359: PUSH
9360: LD_VAR 0 7
9364: ARRAY
9365: PUSH
9366: LD_INT 1
9368: ARRAY
9369: PPUSH
9370: LD_VAR 0 11
9374: PUSH
9375: LD_VAR 0 7
9379: ARRAY
9380: PUSH
9381: LD_INT 2
9383: ARRAY
9384: PPUSH
9385: CALL_OW 488
9389: NOT
9390: IFFALSE 9394
// continue ;
9392: GO 9352
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9394: LD_ADDR_VAR 0 8
9398: PUSH
9399: LD_VAR 0 11
9403: PUSH
9404: LD_VAR 0 7
9408: ARRAY
9409: PUSH
9410: LD_INT 1
9412: ARRAY
9413: PPUSH
9414: LD_VAR 0 11
9418: PUSH
9419: LD_VAR 0 7
9423: ARRAY
9424: PUSH
9425: LD_INT 2
9427: ARRAY
9428: PPUSH
9429: CALL 1973 0 2
9433: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9434: LD_VAR 0 8
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PUSH
9443: LD_VAR 0 8
9447: PUSH
9448: LD_INT 2
9450: ARRAY
9451: PUSH
9452: LD_VAR 0 12
9456: PUSH
9457: LD_INT 2
9459: PLUS
9460: GREATER
9461: OR
9462: PUSH
9463: LD_VAR 0 8
9467: PUSH
9468: LD_INT 2
9470: ARRAY
9471: PUSH
9472: LD_VAR 0 12
9476: PUSH
9477: LD_INT 2
9479: MINUS
9480: LESS
9481: OR
9482: PUSH
9483: LD_VAR 0 8
9487: PUSH
9488: LD_INT 3
9490: ARRAY
9491: PUSH
9492: LD_INT 0
9494: PUSH
9495: LD_INT 8
9497: PUSH
9498: LD_INT 9
9500: PUSH
9501: LD_INT 10
9503: PUSH
9504: LD_INT 11
9506: PUSH
9507: LD_INT 12
9509: PUSH
9510: LD_INT 13
9512: PUSH
9513: LD_INT 16
9515: PUSH
9516: LD_INT 17
9518: PUSH
9519: LD_INT 18
9521: PUSH
9522: LD_INT 19
9524: PUSH
9525: LD_INT 20
9527: PUSH
9528: LD_INT 21
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: IN
9546: NOT
9547: OR
9548: PUSH
9549: LD_VAR 0 8
9553: PUSH
9554: LD_INT 4
9556: ARRAY
9557: OR
9558: PUSH
9559: LD_VAR 0 8
9563: PUSH
9564: LD_INT 5
9566: ARRAY
9567: NOT
9568: OR
9569: PUSH
9570: LD_VAR 0 8
9574: PUSH
9575: LD_INT 6
9577: ARRAY
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 7
9587: PUSH
9588: LD_INT 9
9590: PUSH
9591: LD_INT 10
9593: PUSH
9594: LD_INT 11
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: IN
9605: NOT
9606: OR
9607: PUSH
9608: LD_VAR 0 11
9612: PUSH
9613: LD_VAR 0 7
9617: ARRAY
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: LD_VAR 0 11
9627: PUSH
9628: LD_VAR 0 7
9632: ARRAY
9633: PUSH
9634: LD_INT 2
9636: ARRAY
9637: PPUSH
9638: CALL_OW 428
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: OR
9647: PUSH
9648: LD_VAR 0 11
9652: PUSH
9653: LD_VAR 0 7
9657: ARRAY
9658: PUSH
9659: LD_INT 1
9661: ARRAY
9662: PPUSH
9663: LD_VAR 0 11
9667: PUSH
9668: LD_VAR 0 7
9672: ARRAY
9673: PUSH
9674: LD_INT 2
9676: ARRAY
9677: PPUSH
9678: CALL_OW 351
9682: OR
9683: IFFALSE 9689
// exit ;
9685: POP
9686: POP
9687: GO 9736
// end ;
9689: GO 9352
9691: POP
9692: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 255
9702: PPUSH
9703: LD_VAR 0 3
9707: PPUSH
9708: LD_VAR 0 4
9712: PPUSH
9713: LD_INT 20
9715: PPUSH
9716: CALL 3722 0 4
9720: PUSH
9721: LD_INT 4
9723: ARRAY
9724: IFFALSE 9728
// exit ;
9726: GO 9736
// result := true ;
9728: LD_ADDR_VAR 0 6
9732: PUSH
9733: LD_INT 1
9735: ST_TO_ADDR
// end ;
9736: LD_VAR 0 6
9740: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9741: LD_INT 0
9743: PPUSH
9744: PPUSH
9745: PPUSH
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
9792: PPUSH
9793: PPUSH
9794: PPUSH
9795: PPUSH
9796: PPUSH
9797: PPUSH
9798: PPUSH
9799: PPUSH
9800: PPUSH
// result = [ ] ;
9801: LD_ADDR_VAR 0 7
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// temp_list = [ ] ;
9808: LD_ADDR_VAR 0 9
9812: PUSH
9813: EMPTY
9814: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9815: LD_VAR 0 4
9819: PUSH
9820: LD_INT 0
9822: PUSH
9823: LD_INT 1
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: LD_INT 3
9831: PUSH
9832: LD_INT 4
9834: PUSH
9835: LD_INT 5
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: IN
9846: NOT
9847: PUSH
9848: LD_VAR 0 1
9852: PUSH
9853: LD_INT 0
9855: PUSH
9856: LD_INT 1
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: IN
9863: PUSH
9864: LD_VAR 0 5
9868: PUSH
9869: LD_INT 1
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: IN
9883: NOT
9884: AND
9885: OR
9886: IFFALSE 9890
// exit ;
9888: GO 28275
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9890: LD_VAR 0 1
9894: PUSH
9895: LD_INT 6
9897: PUSH
9898: LD_INT 7
9900: PUSH
9901: LD_INT 8
9903: PUSH
9904: LD_INT 13
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: LD_INT 15
9912: PUSH
9913: LD_INT 11
9915: PUSH
9916: LD_INT 14
9918: PUSH
9919: LD_INT 10
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: IN
9933: IFFALSE 9943
// btype = b_lab ;
9935: LD_ADDR_VAR 0 1
9939: PUSH
9940: LD_INT 6
9942: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9943: LD_VAR 0 6
9947: PUSH
9948: LD_INT 0
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: IN
9962: NOT
9963: PUSH
9964: LD_VAR 0 1
9968: PUSH
9969: LD_INT 0
9971: PUSH
9972: LD_INT 1
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 6
9983: PUSH
9984: LD_INT 36
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 31
9995: PUSH
9996: LD_INT 32
9998: PUSH
9999: LD_INT 33
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: IN
10015: NOT
10016: PUSH
10017: LD_VAR 0 6
10021: PUSH
10022: LD_INT 1
10024: EQUAL
10025: AND
10026: OR
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 3
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: IN
10043: NOT
10044: PUSH
10045: LD_VAR 0 6
10049: PUSH
10050: LD_INT 2
10052: EQUAL
10053: AND
10054: OR
10055: IFFALSE 10065
// mode = 0 ;
10057: LD_ADDR_VAR 0 6
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// case mode of 0 :
10065: LD_VAR 0 6
10069: PUSH
10070: LD_INT 0
10072: DOUBLE
10073: EQUAL
10074: IFTRUE 10078
10076: GO 21531
10078: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
10079: LD_ADDR_VAR 0 11
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 0
10096: PUSH
10097: LD_INT 1
10099: NEG
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: LD_INT 0
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 1
10117: PUSH
10118: LD_INT 1
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 0
10127: PUSH
10128: LD_INT 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 1
10137: NEG
10138: PUSH
10139: LD_INT 0
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 1
10148: NEG
10149: PUSH
10150: LD_INT 1
10152: NEG
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 1
10160: NEG
10161: PUSH
10162: LD_INT 2
10164: NEG
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 0
10172: PUSH
10173: LD_INT 2
10175: NEG
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 1
10183: PUSH
10184: LD_INT 1
10186: NEG
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: LD_INT 2
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 0
10204: PUSH
10205: LD_INT 2
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 1
10214: NEG
10215: PUSH
10216: LD_INT 1
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: LD_INT 3
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 0
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 1
10245: NEG
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10272: LD_ADDR_VAR 0 12
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: LD_INT 1
10292: NEG
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 1
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 1
10330: NEG
10331: PUSH
10332: LD_INT 0
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 1
10341: NEG
10342: PUSH
10343: LD_INT 1
10345: NEG
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: LD_INT 1
10356: NEG
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 0
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 1
10384: NEG
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 2
10395: NEG
10396: PUSH
10397: LD_INT 0
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 2
10406: NEG
10407: PUSH
10408: LD_INT 1
10410: NEG
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 2
10418: NEG
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 3
10429: NEG
10430: PUSH
10431: LD_INT 0
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 3
10440: NEG
10441: PUSH
10442: LD_INT 1
10444: NEG
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10468: LD_ADDR_VAR 0 13
10472: PUSH
10473: LD_INT 0
10475: PUSH
10476: LD_INT 0
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: LD_INT 1
10488: NEG
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 1
10496: PUSH
10497: LD_INT 0
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 1
10506: PUSH
10507: LD_INT 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 0
10516: PUSH
10517: LD_INT 1
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 1
10526: NEG
10527: PUSH
10528: LD_INT 0
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 1
10537: NEG
10538: PUSH
10539: LD_INT 1
10541: NEG
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 1
10549: NEG
10550: PUSH
10551: LD_INT 2
10553: NEG
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 2
10591: NEG
10592: PUSH
10593: LD_INT 1
10595: NEG
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 2
10603: NEG
10604: PUSH
10605: LD_INT 2
10607: NEG
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: LD_INT 2
10615: NEG
10616: PUSH
10617: LD_INT 3
10619: NEG
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 3
10627: NEG
10628: PUSH
10629: LD_INT 2
10631: NEG
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 3
10639: NEG
10640: PUSH
10641: LD_INT 3
10643: NEG
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10667: LD_ADDR_VAR 0 14
10671: PUSH
10672: LD_INT 0
10674: PUSH
10675: LD_INT 0
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 1
10687: NEG
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: LD_INT 0
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 0
10715: PUSH
10716: LD_INT 1
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 1
10725: NEG
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 1
10736: NEG
10737: PUSH
10738: LD_INT 1
10740: NEG
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 1
10748: NEG
10749: PUSH
10750: LD_INT 2
10752: NEG
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 2
10763: NEG
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: NEG
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 0
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 1
10802: NEG
10803: PUSH
10804: LD_INT 1
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 1
10813: NEG
10814: PUSH
10815: LD_INT 3
10817: NEG
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 0
10825: PUSH
10826: LD_INT 3
10828: NEG
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 1
10836: PUSH
10837: LD_INT 2
10839: NEG
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10863: LD_ADDR_VAR 0 15
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: LD_INT 0
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 0
10880: PUSH
10881: LD_INT 1
10883: NEG
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 0
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 1
10921: NEG
10922: PUSH
10923: LD_INT 0
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 1
10932: NEG
10933: PUSH
10934: LD_INT 1
10936: NEG
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: LD_INT 1
10947: NEG
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: LD_INT 0
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 1
10975: NEG
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 2
10986: NEG
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 2
10997: NEG
10998: PUSH
10999: LD_INT 1
11001: NEG
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: LD_INT 1
11012: NEG
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 3
11020: PUSH
11021: LD_INT 0
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 3
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
11056: LD_ADDR_VAR 0 16
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: LD_INT 0
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 0
11073: PUSH
11074: LD_INT 1
11076: NEG
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: LD_INT 0
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: LD_INT 1
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 0
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 1
11114: NEG
11115: PUSH
11116: LD_INT 0
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 1
11125: NEG
11126: PUSH
11127: LD_INT 1
11129: NEG
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 1
11137: NEG
11138: PUSH
11139: LD_INT 2
11141: NEG
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 2
11149: PUSH
11150: LD_INT 1
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 2
11179: NEG
11180: PUSH
11181: LD_INT 1
11183: NEG
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 2
11191: NEG
11192: PUSH
11193: LD_INT 2
11195: NEG
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11249: LD_ADDR_VAR 0 17
11253: PUSH
11254: LD_INT 0
11256: PUSH
11257: LD_INT 0
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 0
11266: PUSH
11267: LD_INT 1
11269: NEG
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: LD_INT 0
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 0
11297: PUSH
11298: LD_INT 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 1
11307: NEG
11308: PUSH
11309: LD_INT 0
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 1
11318: NEG
11319: PUSH
11320: LD_INT 1
11322: NEG
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 1
11330: NEG
11331: PUSH
11332: LD_INT 2
11334: NEG
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 0
11342: PUSH
11343: LD_INT 2
11345: NEG
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: LD_INT 1
11356: NEG
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 0
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 1
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 0
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 1
11414: NEG
11415: PUSH
11416: LD_INT 1
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 2
11425: NEG
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 2
11436: NEG
11437: PUSH
11438: LD_INT 1
11440: NEG
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 2
11448: NEG
11449: PUSH
11450: LD_INT 2
11452: NEG
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11479: LD_ADDR_VAR 0 18
11483: PUSH
11484: LD_INT 0
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 0
11496: PUSH
11497: LD_INT 1
11499: NEG
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: LD_INT 0
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 0
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 1
11537: NEG
11538: PUSH
11539: LD_INT 0
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 1
11548: NEG
11549: PUSH
11550: LD_INT 1
11552: NEG
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 1
11560: NEG
11561: PUSH
11562: LD_INT 2
11564: NEG
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 0
11572: PUSH
11573: LD_INT 2
11575: NEG
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 1
11583: PUSH
11584: LD_INT 1
11586: NEG
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: LD_INT 0
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 2
11614: PUSH
11615: LD_INT 2
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 0
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 1
11644: NEG
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 2
11655: NEG
11656: PUSH
11657: LD_INT 0
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 2
11666: NEG
11667: PUSH
11668: LD_INT 1
11670: NEG
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 2
11678: NEG
11679: PUSH
11680: LD_INT 2
11682: NEG
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11709: LD_ADDR_VAR 0 19
11713: PUSH
11714: LD_INT 0
11716: PUSH
11717: LD_INT 0
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 0
11726: PUSH
11727: LD_INT 1
11729: NEG
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 0
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: LD_INT 1
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 0
11757: PUSH
11758: LD_INT 1
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 1
11767: NEG
11768: PUSH
11769: LD_INT 0
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 1
11778: NEG
11779: PUSH
11780: LD_INT 1
11782: NEG
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 1
11790: NEG
11791: PUSH
11792: LD_INT 2
11794: NEG
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 0
11802: PUSH
11803: LD_INT 2
11805: NEG
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 1
11813: PUSH
11814: LD_INT 1
11816: NEG
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 2
11824: PUSH
11825: LD_INT 0
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 2
11834: PUSH
11835: LD_INT 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 2
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 1
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 0
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 1
11874: NEG
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 2
11885: NEG
11886: PUSH
11887: LD_INT 0
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 2
11896: NEG
11897: PUSH
11898: LD_INT 1
11900: NEG
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 2
11908: NEG
11909: PUSH
11910: LD_INT 2
11912: NEG
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11939: LD_ADDR_VAR 0 20
11943: PUSH
11944: LD_INT 0
11946: PUSH
11947: LD_INT 0
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 0
11956: PUSH
11957: LD_INT 1
11959: NEG
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: LD_INT 0
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 1
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 0
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 1
11997: NEG
11998: PUSH
11999: LD_INT 0
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 1
12008: NEG
12009: PUSH
12010: LD_INT 1
12012: NEG
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 1
12020: NEG
12021: PUSH
12022: LD_INT 2
12024: NEG
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 0
12032: PUSH
12033: LD_INT 2
12035: NEG
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: LD_INT 1
12046: NEG
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: LD_INT 0
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: LD_INT 1
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 2
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 1
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 0
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 1
12104: NEG
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 2
12115: NEG
12116: PUSH
12117: LD_INT 0
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 2
12126: NEG
12127: PUSH
12128: LD_INT 1
12130: NEG
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 2
12138: NEG
12139: PUSH
12140: LD_INT 2
12142: NEG
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12169: LD_ADDR_VAR 0 21
12173: PUSH
12174: LD_INT 0
12176: PUSH
12177: LD_INT 0
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 0
12186: PUSH
12187: LD_INT 1
12189: NEG
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: LD_INT 0
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: LD_INT 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 0
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 1
12227: NEG
12228: PUSH
12229: LD_INT 0
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 1
12238: NEG
12239: PUSH
12240: LD_INT 1
12242: NEG
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 1
12250: NEG
12251: PUSH
12252: LD_INT 2
12254: NEG
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 0
12262: PUSH
12263: LD_INT 2
12265: NEG
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: LD_INT 1
12276: NEG
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 0
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: LD_INT 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 2
12304: PUSH
12305: LD_INT 2
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 0
12324: PUSH
12325: LD_INT 2
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 1
12334: NEG
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 2
12345: NEG
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 2
12356: NEG
12357: PUSH
12358: LD_INT 1
12360: NEG
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 2
12368: NEG
12369: PUSH
12370: LD_INT 2
12372: NEG
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12399: LD_ADDR_VAR 0 22
12403: PUSH
12404: LD_INT 0
12406: PUSH
12407: LD_INT 0
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 0
12416: PUSH
12417: LD_INT 1
12419: NEG
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 1
12427: PUSH
12428: LD_INT 0
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 1
12437: PUSH
12438: LD_INT 1
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 0
12447: PUSH
12448: LD_INT 1
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 1
12457: NEG
12458: PUSH
12459: LD_INT 0
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 1
12468: NEG
12469: PUSH
12470: LD_INT 1
12472: NEG
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 1
12480: NEG
12481: PUSH
12482: LD_INT 2
12484: NEG
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 0
12492: PUSH
12493: LD_INT 2
12495: NEG
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 1
12503: PUSH
12504: LD_INT 1
12506: NEG
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 0
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 1
12544: PUSH
12545: LD_INT 2
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 0
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 1
12564: NEG
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: NEG
12576: PUSH
12577: LD_INT 0
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 2
12586: NEG
12587: PUSH
12588: LD_INT 1
12590: NEG
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 2
12598: NEG
12599: PUSH
12600: LD_INT 2
12602: NEG
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12629: LD_ADDR_VAR 0 23
12633: PUSH
12634: LD_INT 0
12636: PUSH
12637: LD_INT 0
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 0
12646: PUSH
12647: LD_INT 1
12649: NEG
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: LD_INT 0
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 0
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 1
12687: NEG
12688: PUSH
12689: LD_INT 0
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 1
12698: NEG
12699: PUSH
12700: LD_INT 1
12702: NEG
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 1
12710: NEG
12711: PUSH
12712: LD_INT 2
12714: NEG
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 0
12722: PUSH
12723: LD_INT 2
12725: NEG
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 1
12733: PUSH
12734: LD_INT 1
12736: NEG
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 0
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 2
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 0
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 1
12794: NEG
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 2
12805: NEG
12806: PUSH
12807: LD_INT 0
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 2
12816: NEG
12817: PUSH
12818: LD_INT 1
12820: NEG
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 2
12828: NEG
12829: PUSH
12830: LD_INT 2
12832: NEG
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 2
12840: NEG
12841: PUSH
12842: LD_INT 3
12844: NEG
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 1
12852: NEG
12853: PUSH
12854: LD_INT 3
12856: NEG
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: LD_INT 2
12867: NEG
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 2
12875: PUSH
12876: LD_INT 1
12878: NEG
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12909: LD_ADDR_VAR 0 24
12913: PUSH
12914: LD_INT 0
12916: PUSH
12917: LD_INT 0
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 0
12926: PUSH
12927: LD_INT 1
12929: NEG
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: LD_INT 0
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 0
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 1
12967: NEG
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 1
12978: NEG
12979: PUSH
12980: LD_INT 1
12982: NEG
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 1
12990: NEG
12991: PUSH
12992: LD_INT 2
12994: NEG
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 0
13002: PUSH
13003: LD_INT 2
13005: NEG
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 1
13013: PUSH
13014: LD_INT 1
13016: NEG
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 2
13024: PUSH
13025: LD_INT 0
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 1
13054: PUSH
13055: LD_INT 2
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 0
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 1
13074: NEG
13075: PUSH
13076: LD_INT 1
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 2
13085: NEG
13086: PUSH
13087: LD_INT 0
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 2
13096: NEG
13097: PUSH
13098: LD_INT 1
13100: NEG
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 2
13108: NEG
13109: PUSH
13110: LD_INT 2
13112: NEG
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: LD_INT 2
13123: NEG
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 2
13131: PUSH
13132: LD_INT 1
13134: NEG
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 1
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
13185: LD_ADDR_VAR 0 25
13189: PUSH
13190: LD_INT 0
13192: PUSH
13193: LD_INT 0
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 0
13202: PUSH
13203: LD_INT 1
13205: NEG
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 1
13213: PUSH
13214: LD_INT 0
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 0
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: NEG
13244: PUSH
13245: LD_INT 0
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 1
13254: NEG
13255: PUSH
13256: LD_INT 1
13258: NEG
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 1
13266: NEG
13267: PUSH
13268: LD_INT 2
13270: NEG
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 0
13278: PUSH
13279: LD_INT 2
13281: NEG
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: LD_INT 1
13292: NEG
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: LD_INT 0
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 1
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 0
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 1
13350: NEG
13351: PUSH
13352: LD_INT 1
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: NEG
13362: PUSH
13363: LD_INT 0
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 2
13372: NEG
13373: PUSH
13374: LD_INT 1
13376: NEG
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 2
13384: NEG
13385: PUSH
13386: LD_INT 2
13388: NEG
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: LD_INT 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 3
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: LD_INT 3
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13459: LD_ADDR_VAR 0 26
13463: PUSH
13464: LD_INT 0
13466: PUSH
13467: LD_INT 0
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 0
13476: PUSH
13477: LD_INT 1
13479: NEG
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 1
13487: PUSH
13488: LD_INT 0
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 0
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 1
13517: NEG
13518: PUSH
13519: LD_INT 0
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 1
13528: NEG
13529: PUSH
13530: LD_INT 1
13532: NEG
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 1
13540: NEG
13541: PUSH
13542: LD_INT 2
13544: NEG
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 0
13552: PUSH
13553: LD_INT 2
13555: NEG
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: LD_INT 1
13566: NEG
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 2
13574: PUSH
13575: LD_INT 0
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 0
13614: PUSH
13615: LD_INT 2
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 1
13624: NEG
13625: PUSH
13626: LD_INT 1
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 2
13635: NEG
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 2
13646: NEG
13647: PUSH
13648: LD_INT 1
13650: NEG
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 2
13658: NEG
13659: PUSH
13660: LD_INT 2
13662: NEG
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 3
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 1
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 1
13690: NEG
13691: PUSH
13692: LD_INT 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 2
13701: NEG
13702: PUSH
13703: LD_INT 1
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13735: LD_ADDR_VAR 0 27
13739: PUSH
13740: LD_INT 0
13742: PUSH
13743: LD_INT 0
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 0
13752: PUSH
13753: LD_INT 1
13755: NEG
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 1
13763: PUSH
13764: LD_INT 0
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 0
13783: PUSH
13784: LD_INT 1
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 1
13793: NEG
13794: PUSH
13795: LD_INT 0
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 1
13804: NEG
13805: PUSH
13806: LD_INT 1
13808: NEG
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 1
13816: NEG
13817: PUSH
13818: LD_INT 2
13820: NEG
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 0
13828: PUSH
13829: LD_INT 2
13831: NEG
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: LD_INT 1
13842: NEG
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 0
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 2
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 1
13880: PUSH
13881: LD_INT 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 0
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 1
13900: NEG
13901: PUSH
13902: LD_INT 1
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 2
13911: NEG
13912: PUSH
13913: LD_INT 0
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 2
13922: NEG
13923: PUSH
13924: LD_INT 1
13926: NEG
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 2
13934: NEG
13935: PUSH
13936: LD_INT 2
13938: NEG
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 1
13946: NEG
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 2
13957: NEG
13958: PUSH
13959: LD_INT 1
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 3
13968: NEG
13969: PUSH
13970: LD_INT 1
13972: NEG
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 3
13980: NEG
13981: PUSH
13982: LD_INT 2
13984: NEG
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
14015: LD_ADDR_VAR 0 28
14019: PUSH
14020: LD_INT 0
14022: PUSH
14023: LD_INT 0
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 0
14032: PUSH
14033: LD_INT 1
14035: NEG
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 1
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 0
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 1
14073: NEG
14074: PUSH
14075: LD_INT 0
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 1
14084: NEG
14085: PUSH
14086: LD_INT 1
14088: NEG
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 1
14096: NEG
14097: PUSH
14098: LD_INT 2
14100: NEG
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 0
14108: PUSH
14109: LD_INT 2
14111: NEG
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: LD_INT 1
14122: NEG
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 0
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 2
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 1
14160: PUSH
14161: LD_INT 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: LD_INT 2
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 1
14180: NEG
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 2
14191: NEG
14192: PUSH
14193: LD_INT 0
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 2
14202: NEG
14203: PUSH
14204: LD_INT 1
14206: NEG
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 2
14214: NEG
14215: PUSH
14216: LD_INT 2
14218: NEG
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 2
14226: NEG
14227: PUSH
14228: LD_INT 3
14230: NEG
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 1
14238: NEG
14239: PUSH
14240: LD_INT 3
14242: NEG
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 3
14250: NEG
14251: PUSH
14252: LD_INT 1
14254: NEG
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 3
14262: NEG
14263: PUSH
14264: LD_INT 2
14266: NEG
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14297: LD_ADDR_VAR 0 29
14301: PUSH
14302: LD_INT 0
14304: PUSH
14305: LD_INT 0
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 0
14314: PUSH
14315: LD_INT 1
14317: NEG
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: LD_INT 0
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 0
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 1
14355: NEG
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 1
14366: NEG
14367: PUSH
14368: LD_INT 1
14370: NEG
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 1
14378: NEG
14379: PUSH
14380: LD_INT 2
14382: NEG
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 0
14390: PUSH
14391: LD_INT 2
14393: NEG
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 0
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 0
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 1
14452: NEG
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: NEG
14464: PUSH
14465: LD_INT 1
14467: NEG
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 2
14475: NEG
14476: PUSH
14477: LD_INT 2
14479: NEG
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 2
14487: NEG
14488: PUSH
14489: LD_INT 3
14491: NEG
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 1
14502: NEG
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 3
14510: PUSH
14511: LD_INT 1
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: LD_INT 3
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 1
14530: NEG
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 3
14541: NEG
14542: PUSH
14543: LD_INT 2
14545: NEG
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14576: LD_ADDR_VAR 0 30
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 0
14593: PUSH
14594: LD_INT 1
14596: NEG
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 0
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 1
14634: NEG
14635: PUSH
14636: LD_INT 0
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 1
14645: NEG
14646: PUSH
14647: LD_INT 1
14649: NEG
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 1
14657: NEG
14658: PUSH
14659: LD_INT 2
14661: NEG
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 0
14669: PUSH
14670: LD_INT 2
14672: NEG
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 1
14680: PUSH
14681: LD_INT 1
14683: NEG
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: LD_INT 1
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: LD_INT 2
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 1
14731: NEG
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 2
14742: NEG
14743: PUSH
14744: LD_INT 0
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 2
14753: NEG
14754: PUSH
14755: LD_INT 1
14757: NEG
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 1
14765: NEG
14766: PUSH
14767: LD_INT 3
14769: NEG
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: LD_INT 2
14780: NEG
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 3
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: LD_INT 3
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 2
14808: NEG
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 3
14819: NEG
14820: PUSH
14821: LD_INT 1
14823: NEG
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14854: LD_ADDR_VAR 0 31
14858: PUSH
14859: LD_INT 0
14861: PUSH
14862: LD_INT 0
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 0
14871: PUSH
14872: LD_INT 1
14874: NEG
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: LD_INT 0
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 0
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 1
14912: NEG
14913: PUSH
14914: LD_INT 0
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 1
14923: NEG
14924: PUSH
14925: LD_INT 1
14927: NEG
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 1
14935: NEG
14936: PUSH
14937: LD_INT 2
14939: NEG
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: LD_INT 1
14950: NEG
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 0
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 2
14968: PUSH
14969: LD_INT 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 0
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 1
15008: NEG
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 2
15019: NEG
15020: PUSH
15021: LD_INT 1
15023: NEG
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 2
15031: NEG
15032: PUSH
15033: LD_INT 2
15035: NEG
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 2
15043: NEG
15044: PUSH
15045: LD_INT 3
15047: NEG
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 2
15055: PUSH
15056: LD_INT 1
15058: NEG
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 3
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: LD_INT 3
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 1
15086: NEG
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 3
15097: NEG
15098: PUSH
15099: LD_INT 2
15101: NEG
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15132: LD_ADDR_VAR 0 32
15136: PUSH
15137: LD_INT 0
15139: PUSH
15140: LD_INT 0
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 0
15149: PUSH
15150: LD_INT 1
15152: NEG
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: LD_INT 1
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 0
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 1
15190: NEG
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 1
15201: NEG
15202: PUSH
15203: LD_INT 1
15205: NEG
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 1
15213: NEG
15214: PUSH
15215: LD_INT 2
15217: NEG
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 0
15225: PUSH
15226: LD_INT 2
15228: NEG
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 1
15239: NEG
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 2
15247: PUSH
15248: LD_INT 1
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: LD_INT 2
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 1
15267: PUSH
15268: LD_INT 2
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 2
15298: NEG
15299: PUSH
15300: LD_INT 0
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 2
15309: NEG
15310: PUSH
15311: LD_INT 1
15313: NEG
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: NEG
15322: PUSH
15323: LD_INT 3
15325: NEG
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: LD_INT 2
15336: NEG
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 3
15344: PUSH
15345: LD_INT 2
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 3
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 2
15364: NEG
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 3
15375: NEG
15376: PUSH
15377: LD_INT 1
15379: NEG
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15410: LD_ADDR_VAR 0 33
15414: PUSH
15415: LD_INT 0
15417: PUSH
15418: LD_INT 0
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: LD_INT 1
15430: NEG
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 1
15468: NEG
15469: PUSH
15470: LD_INT 0
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 1
15479: NEG
15480: PUSH
15481: LD_INT 1
15483: NEG
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: NEG
15492: PUSH
15493: LD_INT 2
15495: NEG
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 2
15514: PUSH
15515: LD_INT 0
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: LD_INT 2
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 0
15544: PUSH
15545: LD_INT 2
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: NEG
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 2
15565: NEG
15566: PUSH
15567: LD_INT 0
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: NEG
15577: PUSH
15578: LD_INT 1
15580: NEG
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 2
15588: NEG
15589: PUSH
15590: LD_INT 2
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: NEG
15601: PUSH
15602: LD_INT 3
15604: NEG
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 1
15615: NEG
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 1
15643: NEG
15644: PUSH
15645: LD_INT 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 3
15654: NEG
15655: PUSH
15656: LD_INT 2
15658: NEG
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15689: LD_ADDR_VAR 0 34
15693: PUSH
15694: LD_INT 0
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: LD_INT 1
15709: NEG
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 1
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 0
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 1
15747: NEG
15748: PUSH
15749: LD_INT 0
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 1
15758: NEG
15759: PUSH
15760: LD_INT 1
15762: NEG
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 1
15770: NEG
15771: PUSH
15772: LD_INT 2
15774: NEG
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 2
15785: NEG
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 2
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 2
15845: NEG
15846: PUSH
15847: LD_INT 0
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 2
15856: NEG
15857: PUSH
15858: LD_INT 1
15860: NEG
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 2
15868: NEG
15869: PUSH
15870: LD_INT 2
15872: NEG
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PUSH
15882: LD_INT 3
15884: NEG
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: LD_INT 2
15895: NEG
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: LD_INT 3
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 2
15923: NEG
15924: PUSH
15925: LD_INT 1
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 3
15934: NEG
15935: PUSH
15936: LD_INT 1
15938: NEG
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15969: LD_ADDR_VAR 0 35
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 0
15986: PUSH
15987: LD_INT 1
15989: NEG
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 0
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 1
16027: NEG
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 1
16038: NEG
16039: PUSH
16040: LD_INT 1
16042: NEG
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 2
16060: NEG
16061: PUSH
16062: LD_INT 1
16064: NEG
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16081: LD_ADDR_VAR 0 36
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: LD_INT 1
16101: NEG
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: LD_INT 0
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 0
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 1
16139: NEG
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: NEG
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 1
16162: NEG
16163: PUSH
16164: LD_INT 2
16166: NEG
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16193: LD_ADDR_VAR 0 37
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: LD_INT 1
16213: NEG
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 1
16251: NEG
16252: PUSH
16253: LD_INT 0
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: NEG
16263: PUSH
16264: LD_INT 1
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: LD_INT 1
16277: NEG
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 1
16285: NEG
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16305: LD_ADDR_VAR 0 38
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 1
16325: NEG
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 1
16363: NEG
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 1
16374: NEG
16375: PUSH
16376: LD_INT 1
16378: NEG
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 2
16396: NEG
16397: PUSH
16398: LD_INT 1
16400: NEG
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16417: LD_ADDR_VAR 0 39
16421: PUSH
16422: LD_INT 0
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 0
16434: PUSH
16435: LD_INT 1
16437: NEG
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 0
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: NEG
16499: PUSH
16500: LD_INT 2
16502: NEG
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 1
16510: PUSH
16511: LD_INT 2
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16529: LD_ADDR_VAR 0 40
16533: PUSH
16534: LD_INT 0
16536: PUSH
16537: LD_INT 0
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 1
16549: NEG
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: LD_INT 0
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: LD_INT 1
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 1
16587: NEG
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 1
16613: NEG
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 1
16621: NEG
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16641: LD_ADDR_VAR 0 41
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 0
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 0
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 1
16699: NEG
16700: PUSH
16701: LD_INT 0
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 1
16710: NEG
16711: PUSH
16712: LD_INT 1
16714: NEG
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: NEG
16723: PUSH
16724: LD_INT 2
16726: NEG
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: LD_INT 1
16737: NEG
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 2
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: PUSH
16766: LD_INT 2
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 2
16796: NEG
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 2
16807: NEG
16808: PUSH
16809: LD_INT 1
16811: NEG
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: LD_INT 2
16823: NEG
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: LD_INT 3
16835: NEG
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 3
16854: PUSH
16855: LD_INT 0
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 3
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 3
16874: PUSH
16875: LD_INT 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 3
16884: PUSH
16885: LD_INT 3
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 3
16915: NEG
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 3
16926: NEG
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 3
16938: NEG
16939: PUSH
16940: LD_INT 2
16942: NEG
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 3
16950: NEG
16951: PUSH
16952: LD_INT 3
16954: NEG
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16991: LD_ADDR_VAR 0 42
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 0
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: NEG
17061: PUSH
17062: LD_INT 1
17064: NEG
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PUSH
17074: LD_INT 2
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: LD_INT 2
17087: NEG
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: LD_INT 1
17098: NEG
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: NEG
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: NEG
17158: PUSH
17159: LD_INT 1
17161: NEG
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 2
17169: NEG
17170: PUSH
17171: LD_INT 2
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 2
17181: NEG
17182: PUSH
17183: LD_INT 3
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: LD_INT 3
17197: NEG
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 0
17205: PUSH
17206: LD_INT 3
17208: NEG
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: LD_INT 2
17219: NEG
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: LD_INT 3
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 3
17288: NEG
17289: PUSH
17290: LD_INT 2
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 3
17300: NEG
17301: PUSH
17302: LD_INT 3
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17341: LD_ADDR_VAR 0 43
17345: PUSH
17346: LD_INT 0
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: NEG
17400: PUSH
17401: LD_INT 0
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: NEG
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 1
17422: NEG
17423: PUSH
17424: LD_INT 2
17426: NEG
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 2
17437: NEG
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: LD_INT 1
17448: NEG
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: NEG
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 2
17507: NEG
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: NEG
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 3
17534: NEG
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 3
17545: NEG
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: LD_INT 2
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 3
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 2
17626: NEG
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 3
17637: NEG
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 3
17648: NEG
17649: PUSH
17650: LD_INT 1
17652: NEG
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17689: LD_ADDR_VAR 0 44
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: LD_INT 1
17762: NEG
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 2
17844: NEG
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: NEG
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: LD_INT 2
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: LD_INT 3
17883: NEG
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 1
17894: NEG
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 3
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 3
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 3
17932: PUSH
17933: LD_INT 3
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 3
17963: NEG
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 3
17974: NEG
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 3
17986: NEG
17987: PUSH
17988: LD_INT 2
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 3
17998: NEG
17999: PUSH
18000: LD_INT 3
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18039: LD_ADDR_VAR 0 45
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 1
18059: NEG
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: LD_INT 2
18135: NEG
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: NEG
18206: PUSH
18207: LD_INT 1
18209: NEG
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 2
18217: NEG
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: LD_INT 3
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 3
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 3
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 2
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 3
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 3
18336: NEG
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: NEG
18349: PUSH
18350: LD_INT 3
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18389: LD_ADDR_VAR 0 46
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: NEG
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 2
18555: NEG
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: LD_INT 3
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 3
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 3
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 3
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: LD_INT 3
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 2
18674: NEG
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 3
18685: NEG
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 3
18696: NEG
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18737: LD_ADDR_VAR 0 47
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 1
18757: NEG
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: LD_INT 2
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 2
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18888: LD_ADDR_VAR 0 48
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 2
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
19035: LD_ADDR_VAR 0 49
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
19179: LD_ADDR_VAR 0 50
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 1
19300: NEG
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19323: LD_ADDR_VAR 0 51
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: NEG
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: NEG
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19470: LD_ADDR_VAR 0 52
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 2
19574: NEG
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19621: LD_ADDR_VAR 0 53
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: LD_INT 2
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19851: LD_ADDR_VAR 0 54
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20081: LD_ADDR_VAR 0 55
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: NEG
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20311: LD_ADDR_VAR 0 56
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20541: LD_ADDR_VAR 0 57
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20771: LD_ADDR_VAR 0 58
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: NEG
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: NEG
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 2
20958: NEG
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: NEG
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21001: LD_ADDR_VAR 0 59
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21089: LD_ADDR_VAR 0 60
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21177: LD_ADDR_VAR 0 61
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21265: LD_ADDR_VAR 0 62
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21353: LD_ADDR_VAR 0 63
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21441: LD_ADDR_VAR 0 64
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: LD_INT 1
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// end ; 1 :
21529: GO 27426
21531: LD_INT 1
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 24162
21539: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21540: LD_ADDR_VAR 0 11
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: LD_INT 3
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: LD_INT 3
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21584: LD_ADDR_VAR 0 12
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 3
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21625: LD_ADDR_VAR 0 13
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 3
21642: PUSH
21643: LD_INT 3
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 3
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21665: LD_ADDR_VAR 0 14
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 3
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 3
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21706: LD_ADDR_VAR 0 15
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: NEG
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 3
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21750: LD_ADDR_VAR 0 16
21754: PUSH
21755: LD_INT 2
21757: NEG
21758: PUSH
21759: LD_INT 3
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: NEG
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 3
21781: NEG
21782: PUSH
21783: LD_INT 3
21785: NEG
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21796: LD_ADDR_VAR 0 17
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 3
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21840: LD_ADDR_VAR 0 18
21844: PUSH
21845: LD_INT 2
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 3
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 3
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21881: LD_ADDR_VAR 0 19
21885: PUSH
21886: LD_INT 3
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: LD_INT 3
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21921: LD_ADDR_VAR 0 20
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21962: LD_ADDR_VAR 0 21
21966: PUSH
21967: LD_INT 2
21969: NEG
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 3
21980: NEG
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 3
21991: NEG
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22006: LD_ADDR_VAR 0 22
22010: PUSH
22011: LD_INT 2
22013: NEG
22014: PUSH
22015: LD_INT 3
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 3
22025: NEG
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 3
22037: NEG
22038: PUSH
22039: LD_INT 3
22041: NEG
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
22052: LD_ADDR_VAR 0 23
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 3
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 4
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 3
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
22096: LD_ADDR_VAR 0 24
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
22137: LD_ADDR_VAR 0 25
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: LD_INT 3
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: LD_INT 4
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
22177: LD_ADDR_VAR 0 26
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
22218: LD_ADDR_VAR 0 27
22222: PUSH
22223: LD_INT 3
22225: NEG
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 3
22236: NEG
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 4
22247: NEG
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22262: LD_ADDR_VAR 0 28
22266: PUSH
22267: LD_INT 3
22269: NEG
22270: PUSH
22271: LD_INT 3
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: NEG
22282: PUSH
22283: LD_INT 4
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 4
22293: NEG
22294: PUSH
22295: LD_INT 3
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22308: LD_ADDR_VAR 0 29
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: LD_INT 3
22319: NEG
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 3
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 4
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 4
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: LD_INT 3
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: LD_INT 5
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 5
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: LD_INT 4
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 6
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 6
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 5
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22463: LD_ADDR_VAR 0 30
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 3
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 4
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 5
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 5
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 5
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 6
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 6
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22606: LD_ADDR_VAR 0 31
22610: PUSH
22611: LD_INT 3
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 3
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 4
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 4
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: LD_INT 4
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 5
22673: PUSH
22674: LD_INT 4
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 5
22683: PUSH
22684: LD_INT 5
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 4
22693: PUSH
22694: LD_INT 5
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 6
22703: PUSH
22704: LD_INT 5
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 6
22713: PUSH
22714: LD_INT 6
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 5
22723: PUSH
22724: LD_INT 6
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22745: LD_ADDR_VAR 0 32
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 4
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: LD_INT 4
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 3
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: LD_INT 5
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 4
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 6
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 6
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: LD_INT 5
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22888: LD_ADDR_VAR 0 33
22892: PUSH
22893: LD_INT 2
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 3
22906: NEG
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: LD_INT 1
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 4
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 4
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 4
22963: NEG
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 5
22974: NEG
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 5
22985: NEG
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 5
22997: NEG
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 6
23008: NEG
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 6
23019: NEG
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
23043: LD_ADDR_VAR 0 34
23047: PUSH
23048: LD_INT 2
23050: NEG
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 3
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 3
23074: NEG
23075: PUSH
23076: LD_INT 3
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: NEG
23087: PUSH
23088: LD_INT 4
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 4
23098: NEG
23099: PUSH
23100: LD_INT 3
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 4
23110: NEG
23111: PUSH
23112: LD_INT 4
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 4
23122: NEG
23123: PUSH
23124: LD_INT 5
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 5
23134: NEG
23135: PUSH
23136: LD_INT 4
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 5
23146: NEG
23147: PUSH
23148: LD_INT 5
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 5
23158: NEG
23159: PUSH
23160: LD_INT 6
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 6
23170: NEG
23171: PUSH
23172: LD_INT 5
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 6
23182: NEG
23183: PUSH
23184: LD_INT 6
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
23206: LD_ADDR_VAR 0 41
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23250: LD_ADDR_VAR 0 42
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23291: LD_ADDR_VAR 0 43
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 3
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: LD_INT 3
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23331: LD_ADDR_VAR 0 44
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23372: LD_ADDR_VAR 0 45
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 3
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23416: LD_ADDR_VAR 0 46
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 3
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 3
23447: NEG
23448: PUSH
23449: LD_INT 2
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23462: LD_ADDR_VAR 0 47
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 3
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23495: LD_ADDR_VAR 0 48
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 1
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23526: LD_ADDR_VAR 0 49
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23555: LD_ADDR_VAR 0 50
23559: PUSH
23560: LD_INT 2
23562: PUSH
23563: LD_INT 3
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23584: LD_ADDR_VAR 0 51
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23615: LD_ADDR_VAR 0 52
23619: PUSH
23620: LD_INT 3
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 3
23634: NEG
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23648: LD_ADDR_VAR 0 53
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: LD_INT 3
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 2
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23692: LD_ADDR_VAR 0 54
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 3
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23733: LD_ADDR_VAR 0 55
23737: PUSH
23738: LD_INT 3
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: LD_INT 3
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23773: LD_ADDR_VAR 0 56
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23814: LD_ADDR_VAR 0 57
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 3
23832: NEG
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23858: LD_ADDR_VAR 0 58
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: LD_INT 3
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 3
23877: NEG
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 3
23889: NEG
23890: PUSH
23891: LD_INT 3
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23904: LD_ADDR_VAR 0 59
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: LD_INT 2
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23948: LD_ADDR_VAR 0 60
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23989: LD_ADDR_VAR 0 61
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24029: LD_ADDR_VAR 0 62
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24070: LD_ADDR_VAR 0 63
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24114: LD_ADDR_VAR 0 64
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: NEG
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// end ; 2 :
24160: GO 27426
24162: LD_INT 2
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24170
24168: GO 27425
24170: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
24171: LD_ADDR_VAR 0 29
24175: PUSH
24176: LD_INT 4
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 4
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 5
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 5
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 4
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 5
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 3
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 4
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 4
24301: PUSH
24302: LD_INT 4
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 4
24341: PUSH
24342: LD_INT 2
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 4
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 4
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 4
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 5
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 5
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: LD_INT 4
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: LD_INT 3
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 5
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: NEG
24444: PUSH
24445: LD_INT 3
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 3
24454: NEG
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 3
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 3
24499: NEG
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 4
24510: NEG
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 4
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 4
24533: NEG
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 2
24545: NEG
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 4
24556: NEG
24557: PUSH
24558: LD_INT 4
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 4
24568: NEG
24569: PUSH
24570: LD_INT 5
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 3
24580: NEG
24581: PUSH
24582: LD_INT 4
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 3
24592: NEG
24593: PUSH
24594: LD_INT 3
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 4
24604: NEG
24605: PUSH
24606: LD_INT 3
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 5
24616: NEG
24617: PUSH
24618: LD_INT 4
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 5
24628: NEG
24629: PUSH
24630: LD_INT 5
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 3
24640: NEG
24641: PUSH
24642: LD_INT 5
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 5
24652: NEG
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24709: LD_ADDR_VAR 0 30
24713: PUSH
24714: LD_INT 4
24716: PUSH
24717: LD_INT 4
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 4
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 5
24736: PUSH
24737: LD_INT 4
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 5
24746: PUSH
24747: LD_INT 5
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 4
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: LD_INT 3
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 5
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: LD_INT 5
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 4
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: LD_INT 4
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 4
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 4
24899: NEG
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 4
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 3
24922: NEG
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 4
24944: NEG
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 5
24955: NEG
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 5
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 5
24978: NEG
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 3
24990: NEG
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 3
25001: NEG
25002: PUSH
25003: LD_INT 3
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 3
25013: NEG
25014: PUSH
25015: LD_INT 4
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 2
25025: NEG
25026: PUSH
25027: LD_INT 3
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 3
25049: NEG
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 4
25061: NEG
25062: PUSH
25063: LD_INT 3
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 4
25073: NEG
25074: PUSH
25075: LD_INT 4
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: LD_INT 4
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 4
25097: NEG
25098: PUSH
25099: LD_INT 2
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 4
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 5
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 4
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 3
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 3
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 4
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 5
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 3
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: LD_INT 5
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25256: LD_ADDR_VAR 0 31
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 4
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 3
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 4
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 5
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 5
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 3
25356: NEG
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 3
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 3
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 4
25412: NEG
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 4
25423: NEG
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 4
25435: NEG
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: NEG
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 4
25458: NEG
25459: PUSH
25460: LD_INT 4
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 4
25470: NEG
25471: PUSH
25472: LD_INT 5
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 3
25482: NEG
25483: PUSH
25484: LD_INT 4
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 3
25494: NEG
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 4
25506: NEG
25507: PUSH
25508: LD_INT 3
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 5
25518: NEG
25519: PUSH
25520: LD_INT 4
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 5
25530: NEG
25531: PUSH
25532: LD_INT 5
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 3
25542: NEG
25543: PUSH
25544: LD_INT 5
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 5
25554: NEG
25555: PUSH
25556: LD_INT 3
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: LD_INT 3
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 4
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 3
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 2
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: LD_INT 4
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 2
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: LD_INT 4
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 4
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 4
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 5
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 5
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 4
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 3
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 5
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25806: LD_ADDR_VAR 0 32
25810: PUSH
25811: LD_INT 4
25813: NEG
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 4
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 3
25836: NEG
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 4
25858: NEG
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 5
25869: NEG
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 5
25880: NEG
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 5
25892: NEG
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 3
25904: NEG
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 3
25915: NEG
25916: PUSH
25917: LD_INT 3
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: NEG
25928: PUSH
25929: LD_INT 4
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: LD_INT 3
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 3
25963: NEG
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 4
25975: NEG
25976: PUSH
25977: LD_INT 3
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 4
25987: NEG
25988: PUSH
25989: LD_INT 4
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: LD_INT 4
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 4
26011: NEG
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 4
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 5
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 4
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 3
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 3
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 4
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 5
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: LD_INT 5
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 4
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 4
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 4
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 4
26218: PUSH
26219: LD_INT 4
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 4
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 5
26238: PUSH
26239: LD_INT 4
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 5
26248: PUSH
26249: LD_INT 5
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 4
26258: PUSH
26259: LD_INT 5
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 3
26268: PUSH
26269: LD_INT 4
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 3
26278: PUSH
26279: LD_INT 3
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 5
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: LD_INT 5
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26353: LD_ADDR_VAR 0 33
26357: PUSH
26358: LD_INT 4
26360: NEG
26361: PUSH
26362: LD_INT 4
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 4
26372: NEG
26373: PUSH
26374: LD_INT 5
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: NEG
26385: PUSH
26386: LD_INT 4
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 3
26396: NEG
26397: PUSH
26398: LD_INT 3
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 4
26408: NEG
26409: PUSH
26410: LD_INT 3
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 5
26420: NEG
26421: PUSH
26422: LD_INT 4
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 5
26432: NEG
26433: PUSH
26434: LD_INT 5
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 3
26444: NEG
26445: PUSH
26446: LD_INT 5
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 5
26456: NEG
26457: PUSH
26458: LD_INT 3
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 4
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 3
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 3
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 4
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: LD_INT 4
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 4
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 5
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 5
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 4
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 3
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 3
26642: PUSH
26643: LD_INT 2
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 5
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 3
26663: PUSH
26664: LD_INT 3
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 4
26683: PUSH
26684: LD_INT 3
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 4
26693: PUSH
26694: LD_INT 4
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 3
26703: PUSH
26704: LD_INT 4
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 3
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 4
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: LD_INT 4
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 4
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 4
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 5
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 5
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 4
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 3
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: LD_INT 5
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26891: LD_ADDR_VAR 0 34
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 4
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 5
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 4
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 3
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 4
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 5
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: LD_INT 3
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 2
26988: NEG
26989: PUSH
26990: LD_INT 5
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 4
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 4
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 3
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 4
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 4
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 4
27103: PUSH
27104: LD_INT 3
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 5
27113: PUSH
27114: LD_INT 4
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 5
27123: PUSH
27124: LD_INT 5
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 3
27143: PUSH
27144: LD_INT 4
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: LD_INT 3
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 5
27163: PUSH
27164: LD_INT 3
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 3
27173: PUSH
27174: LD_INT 5
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 4
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 4
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 4
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 4
27276: NEG
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 4
27287: NEG
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 3
27299: NEG
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 3
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 4
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 5
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 5
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 5
27355: NEG
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 3
27367: NEG
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
// end ; end ;
27423: GO 27426
27425: POP
// case btype of b_depot , b_warehouse :
27426: LD_VAR 0 1
27430: PUSH
27431: LD_INT 0
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27445
27437: LD_INT 1
27439: DOUBLE
27440: EQUAL
27441: IFTRUE 27445
27443: GO 27646
27445: POP
// case nation of nation_american :
27446: LD_VAR 0 5
27450: PUSH
27451: LD_INT 1
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27515
27459: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27460: LD_ADDR_VAR 0 9
27464: PUSH
27465: LD_VAR 0 11
27469: PUSH
27470: LD_VAR 0 12
27474: PUSH
27475: LD_VAR 0 13
27479: PUSH
27480: LD_VAR 0 14
27484: PUSH
27485: LD_VAR 0 15
27489: PUSH
27490: LD_VAR 0 16
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: PUSH
27503: LD_VAR 0 4
27507: PUSH
27508: LD_INT 1
27510: PLUS
27511: ARRAY
27512: ST_TO_ADDR
27513: GO 27644
27515: LD_INT 2
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27579
27523: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27524: LD_ADDR_VAR 0 9
27528: PUSH
27529: LD_VAR 0 17
27533: PUSH
27534: LD_VAR 0 18
27538: PUSH
27539: LD_VAR 0 19
27543: PUSH
27544: LD_VAR 0 20
27548: PUSH
27549: LD_VAR 0 21
27553: PUSH
27554: LD_VAR 0 22
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: PUSH
27567: LD_VAR 0 4
27571: PUSH
27572: LD_INT 1
27574: PLUS
27575: ARRAY
27576: ST_TO_ADDR
27577: GO 27644
27579: LD_INT 3
27581: DOUBLE
27582: EQUAL
27583: IFTRUE 27587
27585: GO 27643
27587: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27588: LD_ADDR_VAR 0 9
27592: PUSH
27593: LD_VAR 0 23
27597: PUSH
27598: LD_VAR 0 24
27602: PUSH
27603: LD_VAR 0 25
27607: PUSH
27608: LD_VAR 0 26
27612: PUSH
27613: LD_VAR 0 27
27617: PUSH
27618: LD_VAR 0 28
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: PUSH
27631: LD_VAR 0 4
27635: PUSH
27636: LD_INT 1
27638: PLUS
27639: ARRAY
27640: ST_TO_ADDR
27641: GO 27644
27643: POP
27644: GO 28193
27646: LD_INT 2
27648: DOUBLE
27649: EQUAL
27650: IFTRUE 27660
27652: LD_INT 3
27654: DOUBLE
27655: EQUAL
27656: IFTRUE 27660
27658: GO 27716
27660: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27661: LD_ADDR_VAR 0 9
27665: PUSH
27666: LD_VAR 0 29
27670: PUSH
27671: LD_VAR 0 30
27675: PUSH
27676: LD_VAR 0 31
27680: PUSH
27681: LD_VAR 0 32
27685: PUSH
27686: LD_VAR 0 33
27690: PUSH
27691: LD_VAR 0 34
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: PUSH
27704: LD_VAR 0 4
27708: PUSH
27709: LD_INT 1
27711: PLUS
27712: ARRAY
27713: ST_TO_ADDR
27714: GO 28193
27716: LD_INT 16
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27772
27722: LD_INT 17
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27772
27728: LD_INT 18
27730: DOUBLE
27731: EQUAL
27732: IFTRUE 27772
27734: LD_INT 19
27736: DOUBLE
27737: EQUAL
27738: IFTRUE 27772
27740: LD_INT 20
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27772
27746: LD_INT 21
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27772
27752: LD_INT 23
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27772
27758: LD_INT 24
27760: DOUBLE
27761: EQUAL
27762: IFTRUE 27772
27764: LD_INT 25
27766: DOUBLE
27767: EQUAL
27768: IFTRUE 27772
27770: GO 27828
27772: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27773: LD_ADDR_VAR 0 9
27777: PUSH
27778: LD_VAR 0 35
27782: PUSH
27783: LD_VAR 0 36
27787: PUSH
27788: LD_VAR 0 37
27792: PUSH
27793: LD_VAR 0 38
27797: PUSH
27798: LD_VAR 0 39
27802: PUSH
27803: LD_VAR 0 40
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: PUSH
27816: LD_VAR 0 4
27820: PUSH
27821: LD_INT 1
27823: PLUS
27824: ARRAY
27825: ST_TO_ADDR
27826: GO 28193
27828: LD_INT 6
27830: DOUBLE
27831: EQUAL
27832: IFTRUE 27884
27834: LD_INT 7
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27884
27840: LD_INT 8
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27884
27846: LD_INT 13
27848: DOUBLE
27849: EQUAL
27850: IFTRUE 27884
27852: LD_INT 12
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27884
27858: LD_INT 15
27860: DOUBLE
27861: EQUAL
27862: IFTRUE 27884
27864: LD_INT 11
27866: DOUBLE
27867: EQUAL
27868: IFTRUE 27884
27870: LD_INT 14
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27884
27876: LD_INT 10
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27940
27884: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27885: LD_ADDR_VAR 0 9
27889: PUSH
27890: LD_VAR 0 41
27894: PUSH
27895: LD_VAR 0 42
27899: PUSH
27900: LD_VAR 0 43
27904: PUSH
27905: LD_VAR 0 44
27909: PUSH
27910: LD_VAR 0 45
27914: PUSH
27915: LD_VAR 0 46
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: PUSH
27928: LD_VAR 0 4
27932: PUSH
27933: LD_INT 1
27935: PLUS
27936: ARRAY
27937: ST_TO_ADDR
27938: GO 28193
27940: LD_INT 36
27942: DOUBLE
27943: EQUAL
27944: IFTRUE 27948
27946: GO 28004
27948: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27949: LD_ADDR_VAR 0 9
27953: PUSH
27954: LD_VAR 0 47
27958: PUSH
27959: LD_VAR 0 48
27963: PUSH
27964: LD_VAR 0 49
27968: PUSH
27969: LD_VAR 0 50
27973: PUSH
27974: LD_VAR 0 51
27978: PUSH
27979: LD_VAR 0 52
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: PUSH
27992: LD_VAR 0 4
27996: PUSH
27997: LD_INT 1
27999: PLUS
28000: ARRAY
28001: ST_TO_ADDR
28002: GO 28193
28004: LD_INT 4
28006: DOUBLE
28007: EQUAL
28008: IFTRUE 28030
28010: LD_INT 5
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28030
28016: LD_INT 34
28018: DOUBLE
28019: EQUAL
28020: IFTRUE 28030
28022: LD_INT 37
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28086
28030: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
28031: LD_ADDR_VAR 0 9
28035: PUSH
28036: LD_VAR 0 53
28040: PUSH
28041: LD_VAR 0 54
28045: PUSH
28046: LD_VAR 0 55
28050: PUSH
28051: LD_VAR 0 56
28055: PUSH
28056: LD_VAR 0 57
28060: PUSH
28061: LD_VAR 0 58
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: PUSH
28074: LD_VAR 0 4
28078: PUSH
28079: LD_INT 1
28081: PLUS
28082: ARRAY
28083: ST_TO_ADDR
28084: GO 28193
28086: LD_INT 31
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28136
28092: LD_INT 32
28094: DOUBLE
28095: EQUAL
28096: IFTRUE 28136
28098: LD_INT 33
28100: DOUBLE
28101: EQUAL
28102: IFTRUE 28136
28104: LD_INT 27
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28136
28110: LD_INT 26
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28136
28116: LD_INT 28
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28136
28122: LD_INT 29
28124: DOUBLE
28125: EQUAL
28126: IFTRUE 28136
28128: LD_INT 30
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28192
28136: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
28137: LD_ADDR_VAR 0 9
28141: PUSH
28142: LD_VAR 0 59
28146: PUSH
28147: LD_VAR 0 60
28151: PUSH
28152: LD_VAR 0 61
28156: PUSH
28157: LD_VAR 0 62
28161: PUSH
28162: LD_VAR 0 63
28166: PUSH
28167: LD_VAR 0 64
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: LD_VAR 0 4
28184: PUSH
28185: LD_INT 1
28187: PLUS
28188: ARRAY
28189: ST_TO_ADDR
28190: GO 28193
28192: POP
// temp_list2 = [ ] ;
28193: LD_ADDR_VAR 0 10
28197: PUSH
28198: EMPTY
28199: ST_TO_ADDR
// for i in temp_list do
28200: LD_ADDR_VAR 0 8
28204: PUSH
28205: LD_VAR 0 9
28209: PUSH
28210: FOR_IN
28211: IFFALSE 28263
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
28213: LD_ADDR_VAR 0 10
28217: PUSH
28218: LD_VAR 0 10
28222: PUSH
28223: LD_VAR 0 8
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PUSH
28232: LD_VAR 0 2
28236: PLUS
28237: PUSH
28238: LD_VAR 0 8
28242: PUSH
28243: LD_INT 2
28245: ARRAY
28246: PUSH
28247: LD_VAR 0 3
28251: PLUS
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: ADD
28260: ST_TO_ADDR
28261: GO 28210
28263: POP
28264: POP
// result = temp_list2 ;
28265: LD_ADDR_VAR 0 7
28269: PUSH
28270: LD_VAR 0 10
28274: ST_TO_ADDR
// end ;
28275: LD_VAR 0 7
28279: RET
// export function EnemyInRange ( unit , dist ) ; begin
28280: LD_INT 0
28282: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 255
28297: PPUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 250
28307: PPUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 251
28317: PPUSH
28318: LD_VAR 0 2
28322: PPUSH
28323: CALL 3722 0 4
28327: PUSH
28328: LD_INT 4
28330: ARRAY
28331: ST_TO_ADDR
// end ;
28332: LD_VAR 0 3
28336: RET
// export function PlayerSeeMe ( unit ) ; begin
28337: LD_INT 0
28339: PPUSH
// result := See ( your_side , unit ) ;
28340: LD_ADDR_VAR 0 2
28344: PUSH
28345: LD_OWVAR 2
28349: PPUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 292
28359: ST_TO_ADDR
// end ;
28360: LD_VAR 0 2
28364: RET
// export function ReverseDir ( unit ) ; begin
28365: LD_INT 0
28367: PPUSH
// if not unit then
28368: LD_VAR 0 1
28372: NOT
28373: IFFALSE 28377
// exit ;
28375: GO 28423
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28377: LD_ADDR_VAR 0 2
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: LD_INT 4
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: PUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL_OW 254
28417: PUSH
28418: LD_INT 1
28420: PLUS
28421: ARRAY
28422: ST_TO_ADDR
// end ;
28423: LD_VAR 0 2
28427: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28428: LD_INT 0
28430: PPUSH
28431: PPUSH
28432: PPUSH
28433: PPUSH
28434: PPUSH
// if not hexes then
28435: LD_VAR 0 2
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28592
// dist := 9999 ;
28444: LD_ADDR_VAR 0 5
28448: PUSH
28449: LD_INT 9999
28451: ST_TO_ADDR
// for i = 1 to hexes do
28452: LD_ADDR_VAR 0 4
28456: PUSH
28457: DOUBLE
28458: LD_INT 1
28460: DEC
28461: ST_TO_ADDR
28462: LD_VAR 0 2
28466: PUSH
28467: FOR_TO
28468: IFFALSE 28580
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 2
28479: PUSH
28480: LD_VAR 0 4
28484: ARRAY
28485: PUSH
28486: LD_INT 1
28488: ARRAY
28489: PPUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_VAR 0 4
28499: ARRAY
28500: PUSH
28501: LD_INT 2
28503: ARRAY
28504: PPUSH
28505: CALL_OW 297
28509: PUSH
28510: LD_VAR 0 5
28514: LESS
28515: IFFALSE 28578
// begin hex := hexes [ i ] ;
28517: LD_ADDR_VAR 0 7
28521: PUSH
28522: LD_VAR 0 2
28526: PUSH
28527: LD_VAR 0 4
28531: ARRAY
28532: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28533: LD_ADDR_VAR 0 5
28537: PUSH
28538: LD_VAR 0 1
28542: PPUSH
28543: LD_VAR 0 2
28547: PUSH
28548: LD_VAR 0 4
28552: ARRAY
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PPUSH
28558: LD_VAR 0 2
28562: PUSH
28563: LD_VAR 0 4
28567: ARRAY
28568: PUSH
28569: LD_INT 2
28571: ARRAY
28572: PPUSH
28573: CALL_OW 297
28577: ST_TO_ADDR
// end ; end ;
28578: GO 28467
28580: POP
28581: POP
// result := hex ;
28582: LD_ADDR_VAR 0 3
28586: PUSH
28587: LD_VAR 0 7
28591: ST_TO_ADDR
// end ;
28592: LD_VAR 0 3
28596: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28597: LD_INT 0
28599: PPUSH
28600: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28601: LD_VAR 0 1
28605: NOT
28606: PUSH
28607: LD_VAR 0 1
28611: PUSH
28612: LD_INT 21
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 23
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PPUSH
28636: CALL_OW 69
28640: IN
28641: NOT
28642: OR
28643: IFFALSE 28647
// exit ;
28645: GO 28694
// for i = 1 to 3 do
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: DOUBLE
28653: LD_INT 1
28655: DEC
28656: ST_TO_ADDR
28657: LD_INT 3
28659: PUSH
28660: FOR_TO
28661: IFFALSE 28692
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 250
28672: PPUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 251
28682: PPUSH
28683: LD_INT 1
28685: PPUSH
28686: CALL_OW 453
28690: GO 28660
28692: POP
28693: POP
// end ;
28694: LD_VAR 0 2
28698: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
28706: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28707: LD_VAR 0 1
28711: NOT
28712: PUSH
28713: LD_VAR 0 2
28717: NOT
28718: OR
28719: PUSH
28720: LD_VAR 0 1
28724: PPUSH
28725: CALL_OW 314
28729: OR
28730: IFFALSE 28734
// exit ;
28732: GO 29175
// x := GetX ( enemy_unit ) ;
28734: LD_ADDR_VAR 0 7
28738: PUSH
28739: LD_VAR 0 2
28743: PPUSH
28744: CALL_OW 250
28748: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28749: LD_ADDR_VAR 0 8
28753: PUSH
28754: LD_VAR 0 2
28758: PPUSH
28759: CALL_OW 251
28763: ST_TO_ADDR
// if not x or not y then
28764: LD_VAR 0 7
28768: NOT
28769: PUSH
28770: LD_VAR 0 8
28774: NOT
28775: OR
28776: IFFALSE 28780
// exit ;
28778: GO 29175
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28780: LD_ADDR_VAR 0 6
28784: PUSH
28785: LD_VAR 0 7
28789: PPUSH
28790: LD_INT 0
28792: PPUSH
28793: LD_INT 4
28795: PPUSH
28796: CALL_OW 272
28800: PUSH
28801: LD_VAR 0 8
28805: PPUSH
28806: LD_INT 0
28808: PPUSH
28809: LD_INT 4
28811: PPUSH
28812: CALL_OW 273
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_VAR 0 7
28825: PPUSH
28826: LD_INT 1
28828: PPUSH
28829: LD_INT 4
28831: PPUSH
28832: CALL_OW 272
28836: PUSH
28837: LD_VAR 0 8
28841: PPUSH
28842: LD_INT 1
28844: PPUSH
28845: LD_INT 4
28847: PPUSH
28848: CALL_OW 273
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_VAR 0 7
28861: PPUSH
28862: LD_INT 2
28864: PPUSH
28865: LD_INT 4
28867: PPUSH
28868: CALL_OW 272
28872: PUSH
28873: LD_VAR 0 8
28877: PPUSH
28878: LD_INT 2
28880: PPUSH
28881: LD_INT 4
28883: PPUSH
28884: CALL_OW 273
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_VAR 0 7
28897: PPUSH
28898: LD_INT 3
28900: PPUSH
28901: LD_INT 4
28903: PPUSH
28904: CALL_OW 272
28908: PUSH
28909: LD_VAR 0 8
28913: PPUSH
28914: LD_INT 3
28916: PPUSH
28917: LD_INT 4
28919: PPUSH
28920: CALL_OW 273
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_VAR 0 7
28933: PPUSH
28934: LD_INT 4
28936: PPUSH
28937: LD_INT 4
28939: PPUSH
28940: CALL_OW 272
28944: PUSH
28945: LD_VAR 0 8
28949: PPUSH
28950: LD_INT 4
28952: PPUSH
28953: LD_INT 4
28955: PPUSH
28956: CALL_OW 273
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_VAR 0 7
28969: PPUSH
28970: LD_INT 5
28972: PPUSH
28973: LD_INT 4
28975: PPUSH
28976: CALL_OW 272
28980: PUSH
28981: LD_VAR 0 8
28985: PPUSH
28986: LD_INT 5
28988: PPUSH
28989: LD_INT 4
28991: PPUSH
28992: CALL_OW 273
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: ST_TO_ADDR
// for i = tmp downto 1 do
29009: LD_ADDR_VAR 0 4
29013: PUSH
29014: DOUBLE
29015: LD_VAR 0 6
29019: INC
29020: ST_TO_ADDR
29021: LD_INT 1
29023: PUSH
29024: FOR_DOWNTO
29025: IFFALSE 29126
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
29027: LD_VAR 0 6
29031: PUSH
29032: LD_VAR 0 4
29036: ARRAY
29037: PUSH
29038: LD_INT 1
29040: ARRAY
29041: PPUSH
29042: LD_VAR 0 6
29046: PUSH
29047: LD_VAR 0 4
29051: ARRAY
29052: PUSH
29053: LD_INT 2
29055: ARRAY
29056: PPUSH
29057: CALL_OW 488
29061: NOT
29062: PUSH
29063: LD_VAR 0 6
29067: PUSH
29068: LD_VAR 0 4
29072: ARRAY
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PPUSH
29078: LD_VAR 0 6
29082: PUSH
29083: LD_VAR 0 4
29087: ARRAY
29088: PUSH
29089: LD_INT 2
29091: ARRAY
29092: PPUSH
29093: CALL_OW 428
29097: PUSH
29098: LD_INT 0
29100: NONEQUAL
29101: OR
29102: IFFALSE 29124
// tmp := Delete ( tmp , i ) ;
29104: LD_ADDR_VAR 0 6
29108: PUSH
29109: LD_VAR 0 6
29113: PPUSH
29114: LD_VAR 0 4
29118: PPUSH
29119: CALL_OW 3
29123: ST_TO_ADDR
29124: GO 29024
29126: POP
29127: POP
// j := GetClosestHex ( unit , tmp ) ;
29128: LD_ADDR_VAR 0 5
29132: PUSH
29133: LD_VAR 0 1
29137: PPUSH
29138: LD_VAR 0 6
29142: PPUSH
29143: CALL 28428 0 2
29147: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_VAR 0 5
29157: PUSH
29158: LD_INT 1
29160: ARRAY
29161: PPUSH
29162: LD_VAR 0 5
29166: PUSH
29167: LD_INT 2
29169: ARRAY
29170: PPUSH
29171: CALL_OW 111
// end ;
29175: LD_VAR 0 3
29179: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
29180: LD_INT 0
29182: PPUSH
29183: PPUSH
29184: PPUSH
29185: PPUSH
// uc_side = 0 ;
29186: LD_ADDR_OWVAR 20
29190: PUSH
29191: LD_INT 0
29193: ST_TO_ADDR
// uc_nation = 0 ;
29194: LD_ADDR_OWVAR 21
29198: PUSH
29199: LD_INT 0
29201: ST_TO_ADDR
// nat_area := natureArea ;
29202: LD_ADDR_VAR 0 4
29206: PUSH
29207: LD_INT 18
29209: ST_TO_ADDR
// InitHc ;
29210: CALL_OW 19
// for i = 1 to 4 do
29214: LD_ADDR_VAR 0 2
29218: PUSH
29219: DOUBLE
29220: LD_INT 1
29222: DEC
29223: ST_TO_ADDR
29224: LD_INT 4
29226: PUSH
29227: FOR_TO
29228: IFFALSE 29275
// begin hc_class = 18 ;
29230: LD_ADDR_OWVAR 28
29234: PUSH
29235: LD_INT 18
29237: ST_TO_ADDR
// hc_gallery =  ;
29238: LD_ADDR_OWVAR 33
29242: PUSH
29243: LD_STRING 
29245: ST_TO_ADDR
// animal := CreateHuman ;
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: CALL_OW 44
29255: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29256: LD_VAR 0 3
29260: PPUSH
29261: LD_VAR 0 4
29265: PPUSH
29266: LD_INT 0
29268: PPUSH
29269: CALL_OW 49
// end ;
29273: GO 29227
29275: POP
29276: POP
// for i = 1 to 3 do
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: DOUBLE
29283: LD_INT 1
29285: DEC
29286: ST_TO_ADDR
29287: LD_INT 3
29289: PUSH
29290: FOR_TO
29291: IFFALSE 29355
// begin hc_class = class_tiger ;
29293: LD_ADDR_OWVAR 28
29297: PUSH
29298: LD_INT 14
29300: ST_TO_ADDR
// hc_gallery =  ;
29301: LD_ADDR_OWVAR 33
29305: PUSH
29306: LD_STRING 
29308: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29309: LD_ADDR_OWVAR 35
29313: PUSH
29314: LD_INT 5
29316: NEG
29317: PPUSH
29318: LD_INT 5
29320: PPUSH
29321: CALL_OW 12
29325: ST_TO_ADDR
// animal := CreateHuman ;
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: CALL_OW 44
29335: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29336: LD_VAR 0 3
29340: PPUSH
29341: LD_VAR 0 4
29345: PPUSH
29346: LD_INT 0
29348: PPUSH
29349: CALL_OW 49
// end ;
29353: GO 29290
29355: POP
29356: POP
// for i = 1 to 5 do
29357: LD_ADDR_VAR 0 2
29361: PUSH
29362: DOUBLE
29363: LD_INT 1
29365: DEC
29366: ST_TO_ADDR
29367: LD_INT 5
29369: PUSH
29370: FOR_TO
29371: IFFALSE 29474
// begin hc_class = class_apeman ;
29373: LD_ADDR_OWVAR 28
29377: PUSH
29378: LD_INT 12
29380: ST_TO_ADDR
// hc_gallery =  ;
29381: LD_ADDR_OWVAR 33
29385: PUSH
29386: LD_STRING 
29388: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29389: LD_ADDR_OWVAR 35
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PPUSH
29398: LD_INT 2
29400: PPUSH
29401: CALL_OW 12
29405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29406: LD_ADDR_OWVAR 31
29410: PUSH
29411: LD_INT 1
29413: PPUSH
29414: LD_INT 3
29416: PPUSH
29417: CALL_OW 12
29421: PUSH
29422: LD_INT 1
29424: PPUSH
29425: LD_INT 3
29427: PPUSH
29428: CALL_OW 12
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// animal := CreateHuman ;
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: CALL_OW 44
29454: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29455: LD_VAR 0 3
29459: PPUSH
29460: LD_VAR 0 4
29464: PPUSH
29465: LD_INT 0
29467: PPUSH
29468: CALL_OW 49
// end ;
29472: GO 29370
29474: POP
29475: POP
// for i = 1 to 3 do
29476: LD_ADDR_VAR 0 2
29480: PUSH
29481: DOUBLE
29482: LD_INT 1
29484: DEC
29485: ST_TO_ADDR
29486: LD_INT 3
29488: PUSH
29489: FOR_TO
29490: IFFALSE 29537
// begin hc_class = 13 ;
29492: LD_ADDR_OWVAR 28
29496: PUSH
29497: LD_INT 13
29499: ST_TO_ADDR
// hc_gallery =  ;
29500: LD_ADDR_OWVAR 33
29504: PUSH
29505: LD_STRING 
29507: ST_TO_ADDR
// animal := CreateHuman ;
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: CALL_OW 44
29517: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29518: LD_VAR 0 3
29522: PPUSH
29523: LD_VAR 0 4
29527: PPUSH
29528: LD_INT 0
29530: PPUSH
29531: CALL_OW 49
// end ;
29535: GO 29489
29537: POP
29538: POP
// for i = 1 to 7 do
29539: LD_ADDR_VAR 0 2
29543: PUSH
29544: DOUBLE
29545: LD_INT 1
29547: DEC
29548: ST_TO_ADDR
29549: LD_INT 7
29551: PUSH
29552: FOR_TO
29553: IFFALSE 29598
// begin hc_class = 20 ;
29555: LD_ADDR_OWVAR 28
29559: PUSH
29560: LD_INT 20
29562: ST_TO_ADDR
// hc_gallery =  ;
29563: LD_ADDR_OWVAR 33
29567: PUSH
29568: LD_STRING 
29570: ST_TO_ADDR
// animal := CreateHuman ;
29571: LD_ADDR_VAR 0 3
29575: PUSH
29576: CALL_OW 44
29580: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29581: LD_VAR 0 3
29585: PPUSH
29586: LD_INT 19
29588: PPUSH
29589: LD_INT 0
29591: PPUSH
29592: CALL_OW 49
// end ;
29596: GO 29552
29598: POP
29599: POP
// end ;
29600: LD_VAR 0 1
29604: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29605: LD_INT 0
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
// if not list then
29635: LD_VAR 0 1
29639: NOT
29640: IFFALSE 29644
// exit ;
29642: GO 32837
// base := list [ 1 ] ;
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_VAR 0 1
29653: PUSH
29654: LD_INT 1
29656: ARRAY
29657: ST_TO_ADDR
// group := list [ 2 ] ;
29658: LD_ADDR_VAR 0 4
29662: PUSH
29663: LD_VAR 0 1
29667: PUSH
29668: LD_INT 2
29670: ARRAY
29671: ST_TO_ADDR
// path := list [ 3 ] ;
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_VAR 0 1
29681: PUSH
29682: LD_INT 3
29684: ARRAY
29685: ST_TO_ADDR
// flags := list [ 4 ] ;
29686: LD_ADDR_VAR 0 6
29690: PUSH
29691: LD_VAR 0 1
29695: PUSH
29696: LD_INT 4
29698: ARRAY
29699: ST_TO_ADDR
// mined := [ ] ;
29700: LD_ADDR_VAR 0 27
29704: PUSH
29705: EMPTY
29706: ST_TO_ADDR
// bombed := [ ] ;
29707: LD_ADDR_VAR 0 28
29711: PUSH
29712: EMPTY
29713: ST_TO_ADDR
// if not group or not path then
29714: LD_VAR 0 4
29718: NOT
29719: PUSH
29720: LD_VAR 0 5
29724: NOT
29725: OR
29726: IFFALSE 29730
// exit ;
29728: GO 32837
// if flags then
29730: LD_VAR 0 6
29734: IFFALSE 29878
// begin f_ignore_area := flags [ 1 ] ;
29736: LD_ADDR_VAR 0 17
29740: PUSH
29741: LD_VAR 0 6
29745: PUSH
29746: LD_INT 1
29748: ARRAY
29749: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29750: LD_ADDR_VAR 0 18
29754: PUSH
29755: LD_VAR 0 6
29759: PUSH
29760: LD_INT 2
29762: ARRAY
29763: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29764: LD_ADDR_VAR 0 19
29768: PUSH
29769: LD_VAR 0 6
29773: PUSH
29774: LD_INT 3
29776: ARRAY
29777: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29778: LD_ADDR_VAR 0 20
29782: PUSH
29783: LD_VAR 0 6
29787: PUSH
29788: LD_INT 4
29790: ARRAY
29791: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29792: LD_ADDR_VAR 0 21
29796: PUSH
29797: LD_VAR 0 6
29801: PUSH
29802: LD_INT 5
29804: ARRAY
29805: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29806: LD_ADDR_VAR 0 22
29810: PUSH
29811: LD_VAR 0 6
29815: PUSH
29816: LD_INT 6
29818: ARRAY
29819: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29820: LD_ADDR_VAR 0 23
29824: PUSH
29825: LD_VAR 0 6
29829: PUSH
29830: LD_INT 7
29832: ARRAY
29833: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29834: LD_ADDR_VAR 0 24
29838: PUSH
29839: LD_VAR 0 6
29843: PUSH
29844: LD_INT 8
29846: ARRAY
29847: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29848: LD_ADDR_VAR 0 25
29852: PUSH
29853: LD_VAR 0 6
29857: PUSH
29858: LD_INT 9
29860: ARRAY
29861: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29862: LD_ADDR_VAR 0 26
29866: PUSH
29867: LD_VAR 0 6
29871: PUSH
29872: LD_INT 10
29874: ARRAY
29875: ST_TO_ADDR
// end else
29876: GO 29958
// begin f_ignore_area := false ;
29878: LD_ADDR_VAR 0 17
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
// f_capture := false ;
29886: LD_ADDR_VAR 0 18
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
// f_ignore_civ := false ;
29894: LD_ADDR_VAR 0 19
29898: PUSH
29899: LD_INT 0
29901: ST_TO_ADDR
// f_murder := false ;
29902: LD_ADDR_VAR 0 20
29906: PUSH
29907: LD_INT 0
29909: ST_TO_ADDR
// f_mines := false ;
29910: LD_ADDR_VAR 0 21
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// f_repair := false ;
29918: LD_ADDR_VAR 0 22
29922: PUSH
29923: LD_INT 0
29925: ST_TO_ADDR
// f_heal := false ;
29926: LD_ADDR_VAR 0 23
29930: PUSH
29931: LD_INT 0
29933: ST_TO_ADDR
// f_spacetime := false ;
29934: LD_ADDR_VAR 0 24
29938: PUSH
29939: LD_INT 0
29941: ST_TO_ADDR
// f_attack_depot := false ;
29942: LD_ADDR_VAR 0 25
29946: PUSH
29947: LD_INT 0
29949: ST_TO_ADDR
// f_crawl := false ;
29950: LD_ADDR_VAR 0 26
29954: PUSH
29955: LD_INT 0
29957: ST_TO_ADDR
// end ; units_path := [ ] ;
29958: LD_ADDR_VAR 0 16
29962: PUSH
29963: EMPTY
29964: ST_TO_ADDR
// for i = 1 to group do
29965: LD_ADDR_VAR 0 7
29969: PUSH
29970: DOUBLE
29971: LD_INT 1
29973: DEC
29974: ST_TO_ADDR
29975: LD_VAR 0 4
29979: PUSH
29980: FOR_TO
29981: IFFALSE 30010
// begin units_path := Replace ( units_path , i , path ) ;
29983: LD_ADDR_VAR 0 16
29987: PUSH
29988: LD_VAR 0 16
29992: PPUSH
29993: LD_VAR 0 7
29997: PPUSH
29998: LD_VAR 0 5
30002: PPUSH
30003: CALL_OW 1
30007: ST_TO_ADDR
// end ;
30008: GO 29980
30010: POP
30011: POP
// repeat for i = group downto 1 do
30012: LD_ADDR_VAR 0 7
30016: PUSH
30017: DOUBLE
30018: LD_VAR 0 4
30022: INC
30023: ST_TO_ADDR
30024: LD_INT 1
30026: PUSH
30027: FOR_DOWNTO
30028: IFFALSE 32819
// begin tmp := [ ] ;
30030: LD_ADDR_VAR 0 14
30034: PUSH
30035: EMPTY
30036: ST_TO_ADDR
// attacking := false ;
30037: LD_ADDR_VAR 0 29
30041: PUSH
30042: LD_INT 0
30044: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
30045: LD_VAR 0 4
30049: PUSH
30050: LD_VAR 0 7
30054: ARRAY
30055: PPUSH
30056: CALL_OW 301
30060: PUSH
30061: LD_VAR 0 4
30065: PUSH
30066: LD_VAR 0 7
30070: ARRAY
30071: NOT
30072: OR
30073: IFFALSE 30117
// begin group := Delete ( group , i ) ;
30075: LD_ADDR_VAR 0 4
30079: PUSH
30080: LD_VAR 0 4
30084: PPUSH
30085: LD_VAR 0 7
30089: PPUSH
30090: CALL_OW 3
30094: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
30095: LD_ADDR_VAR 0 16
30099: PUSH
30100: LD_VAR 0 16
30104: PPUSH
30105: LD_VAR 0 7
30109: PPUSH
30110: CALL_OW 3
30114: ST_TO_ADDR
// continue ;
30115: GO 30027
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
30117: LD_VAR 0 4
30121: PUSH
30122: LD_VAR 0 7
30126: ARRAY
30127: PPUSH
30128: LD_INT 10
30130: PPUSH
30131: CALL 28280 0 2
30135: NOT
30136: PUSH
30137: LD_VAR 0 16
30141: PUSH
30142: LD_VAR 0 7
30146: ARRAY
30147: PUSH
30148: EMPTY
30149: EQUAL
30150: NOT
30151: AND
30152: IFFALSE 30436
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
30154: LD_VAR 0 4
30158: PUSH
30159: LD_VAR 0 7
30163: ARRAY
30164: PPUSH
30165: CALL_OW 262
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: IN
30180: IFFALSE 30239
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
30182: LD_VAR 0 4
30186: PUSH
30187: LD_VAR 0 7
30191: ARRAY
30192: PPUSH
30193: CALL_OW 261
30197: PUSH
30198: LD_INT 10
30200: LESS
30201: PUSH
30202: LD_VAR 0 4
30206: PUSH
30207: LD_VAR 0 7
30211: ARRAY
30212: PPUSH
30213: CALL 28337 0 1
30217: NOT
30218: AND
30219: IFFALSE 30239
// SetFuel ( group [ i ] , 12 ) ;
30221: LD_VAR 0 4
30225: PUSH
30226: LD_VAR 0 7
30230: ARRAY
30231: PPUSH
30232: LD_INT 12
30234: PPUSH
30235: CALL_OW 240
// if units_path [ i ] then
30239: LD_VAR 0 16
30243: PUSH
30244: LD_VAR 0 7
30248: ARRAY
30249: IFFALSE 30434
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30251: LD_VAR 0 4
30255: PUSH
30256: LD_VAR 0 7
30260: ARRAY
30261: PPUSH
30262: LD_VAR 0 16
30266: PUSH
30267: LD_VAR 0 7
30271: ARRAY
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: PUSH
30277: LD_INT 1
30279: ARRAY
30280: PPUSH
30281: LD_VAR 0 16
30285: PUSH
30286: LD_VAR 0 7
30290: ARRAY
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: PUSH
30296: LD_INT 2
30298: ARRAY
30299: PPUSH
30300: CALL_OW 297
30304: PUSH
30305: LD_INT 6
30307: GREATER
30308: IFFALSE 30383
// begin if not HasTask ( group [ i ] ) then
30310: LD_VAR 0 4
30314: PUSH
30315: LD_VAR 0 7
30319: ARRAY
30320: PPUSH
30321: CALL_OW 314
30325: NOT
30326: IFFALSE 30381
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30328: LD_VAR 0 4
30332: PUSH
30333: LD_VAR 0 7
30337: ARRAY
30338: PPUSH
30339: LD_VAR 0 16
30343: PUSH
30344: LD_VAR 0 7
30348: ARRAY
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PPUSH
30358: LD_VAR 0 16
30362: PUSH
30363: LD_VAR 0 7
30367: ARRAY
30368: PUSH
30369: LD_INT 1
30371: ARRAY
30372: PUSH
30373: LD_INT 2
30375: ARRAY
30376: PPUSH
30377: CALL_OW 114
// end else
30381: GO 30434
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30383: LD_ADDR_VAR 0 15
30387: PUSH
30388: LD_VAR 0 16
30392: PUSH
30393: LD_VAR 0 7
30397: ARRAY
30398: PPUSH
30399: LD_INT 1
30401: PPUSH
30402: CALL_OW 3
30406: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30407: LD_ADDR_VAR 0 16
30411: PUSH
30412: LD_VAR 0 16
30416: PPUSH
30417: LD_VAR 0 7
30421: PPUSH
30422: LD_VAR 0 15
30426: PPUSH
30427: CALL_OW 1
30431: ST_TO_ADDR
// continue ;
30432: GO 30027
// end ; end ; end else
30434: GO 32817
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30436: LD_ADDR_VAR 0 14
30440: PUSH
30441: LD_INT 81
30443: PUSH
30444: LD_VAR 0 4
30448: PUSH
30449: LD_VAR 0 7
30453: ARRAY
30454: PPUSH
30455: CALL_OW 255
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ST_TO_ADDR
// if not tmp then
30469: LD_VAR 0 14
30473: NOT
30474: IFFALSE 30478
// continue ;
30476: GO 30027
// if f_ignore_area then
30478: LD_VAR 0 17
30482: IFFALSE 30570
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30484: LD_ADDR_VAR 0 15
30488: PUSH
30489: LD_VAR 0 14
30493: PPUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 92
30499: PUSH
30500: LD_VAR 0 17
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PUSH
30509: LD_VAR 0 17
30513: PUSH
30514: LD_INT 2
30516: ARRAY
30517: PUSH
30518: LD_VAR 0 17
30522: PUSH
30523: LD_INT 3
30525: ARRAY
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL_OW 72
30541: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30542: LD_VAR 0 14
30546: PUSH
30547: LD_VAR 0 15
30551: DIFF
30552: IFFALSE 30570
// tmp := tmp diff tmp2 ;
30554: LD_ADDR_VAR 0 14
30558: PUSH
30559: LD_VAR 0 14
30563: PUSH
30564: LD_VAR 0 15
30568: DIFF
30569: ST_TO_ADDR
// end ; if not f_murder then
30570: LD_VAR 0 20
30574: NOT
30575: IFFALSE 30633
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30577: LD_ADDR_VAR 0 15
30581: PUSH
30582: LD_VAR 0 14
30586: PPUSH
30587: LD_INT 3
30589: PUSH
30590: LD_INT 50
30592: PUSH
30593: EMPTY
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PPUSH
30600: CALL_OW 72
30604: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30605: LD_VAR 0 14
30609: PUSH
30610: LD_VAR 0 15
30614: DIFF
30615: IFFALSE 30633
// tmp := tmp diff tmp2 ;
30617: LD_ADDR_VAR 0 14
30621: PUSH
30622: LD_VAR 0 14
30626: PUSH
30627: LD_VAR 0 15
30631: DIFF
30632: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30633: LD_ADDR_VAR 0 14
30637: PUSH
30638: LD_VAR 0 4
30642: PUSH
30643: LD_VAR 0 7
30647: ARRAY
30648: PPUSH
30649: LD_VAR 0 14
30653: PPUSH
30654: LD_INT 1
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL 3261 0 4
30664: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30665: LD_VAR 0 4
30669: PUSH
30670: LD_VAR 0 7
30674: ARRAY
30675: PPUSH
30676: CALL_OW 257
30680: PUSH
30681: LD_INT 1
30683: EQUAL
30684: IFFALSE 31111
// begin if WantPlant ( group [ i ] ) then
30686: LD_VAR 0 4
30690: PUSH
30691: LD_VAR 0 7
30695: ARRAY
30696: PPUSH
30697: CALL 2729 0 1
30701: IFFALSE 30705
// continue ;
30703: GO 30027
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30705: LD_VAR 0 18
30709: PUSH
30710: LD_VAR 0 4
30714: PUSH
30715: LD_VAR 0 7
30719: ARRAY
30720: PPUSH
30721: CALL_OW 310
30725: NOT
30726: AND
30727: PUSH
30728: LD_VAR 0 14
30732: PUSH
30733: LD_INT 1
30735: ARRAY
30736: PUSH
30737: LD_VAR 0 14
30741: PPUSH
30742: LD_INT 21
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 58
30754: PUSH
30755: EMPTY
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PPUSH
30762: CALL_OW 72
30766: IN
30767: AND
30768: IFFALSE 30804
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30770: LD_VAR 0 4
30774: PUSH
30775: LD_VAR 0 7
30779: ARRAY
30780: PPUSH
30781: LD_VAR 0 14
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: CALL_OW 120
// attacking := true ;
30794: LD_ADDR_VAR 0 29
30798: PUSH
30799: LD_INT 1
30801: ST_TO_ADDR
// continue ;
30802: GO 30027
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30804: LD_VAR 0 26
30808: PUSH
30809: LD_VAR 0 4
30813: PUSH
30814: LD_VAR 0 7
30818: ARRAY
30819: PPUSH
30820: CALL_OW 256
30824: PUSH
30825: LD_INT 800
30827: LESS
30828: AND
30829: PUSH
30830: LD_VAR 0 4
30834: PUSH
30835: LD_VAR 0 7
30839: ARRAY
30840: PPUSH
30841: CALL_OW 318
30845: NOT
30846: AND
30847: IFFALSE 30864
// ComCrawl ( group [ i ] ) ;
30849: LD_VAR 0 4
30853: PUSH
30854: LD_VAR 0 7
30858: ARRAY
30859: PPUSH
30860: CALL_OW 137
// if f_mines then
30864: LD_VAR 0 21
30868: IFFALSE 31111
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30870: LD_VAR 0 14
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: CALL_OW 247
30883: PUSH
30884: LD_INT 3
30886: EQUAL
30887: PUSH
30888: LD_VAR 0 14
30892: PUSH
30893: LD_INT 1
30895: ARRAY
30896: PUSH
30897: LD_VAR 0 27
30901: IN
30902: NOT
30903: AND
30904: IFFALSE 31111
// begin x := GetX ( tmp [ 1 ] ) ;
30906: LD_ADDR_VAR 0 10
30910: PUSH
30911: LD_VAR 0 14
30915: PUSH
30916: LD_INT 1
30918: ARRAY
30919: PPUSH
30920: CALL_OW 250
30924: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30925: LD_ADDR_VAR 0 11
30929: PUSH
30930: LD_VAR 0 14
30934: PUSH
30935: LD_INT 1
30937: ARRAY
30938: PPUSH
30939: CALL_OW 251
30943: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30944: LD_ADDR_VAR 0 12
30948: PUSH
30949: LD_VAR 0 4
30953: PUSH
30954: LD_VAR 0 7
30958: ARRAY
30959: PPUSH
30960: CALL 28365 0 1
30964: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30965: LD_VAR 0 4
30969: PUSH
30970: LD_VAR 0 7
30974: ARRAY
30975: PPUSH
30976: LD_VAR 0 10
30980: PPUSH
30981: LD_VAR 0 11
30985: PPUSH
30986: LD_VAR 0 14
30990: PUSH
30991: LD_INT 1
30993: ARRAY
30994: PPUSH
30995: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30999: LD_VAR 0 4
31003: PUSH
31004: LD_VAR 0 7
31008: ARRAY
31009: PPUSH
31010: LD_VAR 0 10
31014: PPUSH
31015: LD_VAR 0 12
31019: PPUSH
31020: LD_INT 7
31022: PPUSH
31023: CALL_OW 272
31027: PPUSH
31028: LD_VAR 0 11
31032: PPUSH
31033: LD_VAR 0 12
31037: PPUSH
31038: LD_INT 7
31040: PPUSH
31041: CALL_OW 273
31045: PPUSH
31046: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
31050: LD_VAR 0 4
31054: PUSH
31055: LD_VAR 0 7
31059: ARRAY
31060: PPUSH
31061: LD_INT 71
31063: PPUSH
31064: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
31068: LD_ADDR_VAR 0 27
31072: PUSH
31073: LD_VAR 0 27
31077: PPUSH
31078: LD_VAR 0 27
31082: PUSH
31083: LD_INT 1
31085: PLUS
31086: PPUSH
31087: LD_VAR 0 14
31091: PUSH
31092: LD_INT 1
31094: ARRAY
31095: PPUSH
31096: CALL_OW 1
31100: ST_TO_ADDR
// attacking := true ;
31101: LD_ADDR_VAR 0 29
31105: PUSH
31106: LD_INT 1
31108: ST_TO_ADDR
// continue ;
31109: GO 30027
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
31111: LD_VAR 0 4
31115: PUSH
31116: LD_VAR 0 7
31120: ARRAY
31121: PPUSH
31122: CALL_OW 257
31126: PUSH
31127: LD_INT 17
31129: EQUAL
31130: IFFALSE 31258
// begin attacking := false ;
31132: LD_ADDR_VAR 0 29
31136: PUSH
31137: LD_INT 0
31139: ST_TO_ADDR
// k := 5 ;
31140: LD_ADDR_VAR 0 9
31144: PUSH
31145: LD_INT 5
31147: ST_TO_ADDR
// if tmp < k then
31148: LD_VAR 0 14
31152: PUSH
31153: LD_VAR 0 9
31157: LESS
31158: IFFALSE 31170
// k := tmp ;
31160: LD_ADDR_VAR 0 9
31164: PUSH
31165: LD_VAR 0 14
31169: ST_TO_ADDR
// for j = 1 to k do
31170: LD_ADDR_VAR 0 8
31174: PUSH
31175: DOUBLE
31176: LD_INT 1
31178: DEC
31179: ST_TO_ADDR
31180: LD_VAR 0 9
31184: PUSH
31185: FOR_TO
31186: IFFALSE 31256
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
31188: LD_VAR 0 14
31192: PUSH
31193: LD_VAR 0 8
31197: ARRAY
31198: PUSH
31199: LD_VAR 0 14
31203: PPUSH
31204: LD_INT 58
31206: PUSH
31207: EMPTY
31208: LIST
31209: PPUSH
31210: CALL_OW 72
31214: IN
31215: NOT
31216: IFFALSE 31254
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31218: LD_VAR 0 4
31222: PUSH
31223: LD_VAR 0 7
31227: ARRAY
31228: PPUSH
31229: LD_VAR 0 14
31233: PUSH
31234: LD_VAR 0 8
31238: ARRAY
31239: PPUSH
31240: CALL_OW 115
// attacking := true ;
31244: LD_ADDR_VAR 0 29
31248: PUSH
31249: LD_INT 1
31251: ST_TO_ADDR
// continue ;
31252: GO 31185
// end ; end ;
31254: GO 31185
31256: POP
31257: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31258: LD_VAR 0 4
31262: PUSH
31263: LD_VAR 0 7
31267: ARRAY
31268: PPUSH
31269: CALL_OW 257
31273: PUSH
31274: LD_INT 8
31276: EQUAL
31277: PUSH
31278: LD_VAR 0 4
31282: PUSH
31283: LD_VAR 0 7
31287: ARRAY
31288: PPUSH
31289: CALL_OW 264
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: LD_INT 45
31299: PUSH
31300: LD_INT 7
31302: PUSH
31303: LD_INT 47
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: IN
31312: OR
31313: IFFALSE 31543
// begin attacking := false ;
31315: LD_ADDR_VAR 0 29
31319: PUSH
31320: LD_INT 0
31322: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31323: LD_VAR 0 14
31327: PUSH
31328: LD_INT 1
31330: ARRAY
31331: PPUSH
31332: CALL_OW 266
31336: PUSH
31337: LD_INT 32
31339: PUSH
31340: LD_INT 31
31342: PUSH
31343: LD_INT 33
31345: PUSH
31346: LD_INT 4
31348: PUSH
31349: LD_INT 5
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: IN
31359: IFFALSE 31543
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31361: LD_ADDR_VAR 0 9
31365: PUSH
31366: LD_VAR 0 14
31370: PUSH
31371: LD_INT 1
31373: ARRAY
31374: PPUSH
31375: CALL_OW 266
31379: PPUSH
31380: LD_VAR 0 14
31384: PUSH
31385: LD_INT 1
31387: ARRAY
31388: PPUSH
31389: CALL_OW 250
31393: PPUSH
31394: LD_VAR 0 14
31398: PUSH
31399: LD_INT 1
31401: ARRAY
31402: PPUSH
31403: CALL_OW 251
31407: PPUSH
31408: LD_VAR 0 14
31412: PUSH
31413: LD_INT 1
31415: ARRAY
31416: PPUSH
31417: CALL_OW 254
31421: PPUSH
31422: LD_VAR 0 14
31426: PUSH
31427: LD_INT 1
31429: ARRAY
31430: PPUSH
31431: CALL_OW 248
31435: PPUSH
31436: LD_INT 0
31438: PPUSH
31439: CALL 9741 0 6
31443: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31444: LD_ADDR_VAR 0 8
31448: PUSH
31449: LD_VAR 0 4
31453: PUSH
31454: LD_VAR 0 7
31458: ARRAY
31459: PPUSH
31460: LD_VAR 0 9
31464: PPUSH
31465: CALL 28428 0 2
31469: ST_TO_ADDR
// if j then
31470: LD_VAR 0 8
31474: IFFALSE 31543
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31476: LD_VAR 0 8
31480: PUSH
31481: LD_INT 1
31483: ARRAY
31484: PPUSH
31485: LD_VAR 0 8
31489: PUSH
31490: LD_INT 2
31492: ARRAY
31493: PPUSH
31494: CALL_OW 488
31498: IFFALSE 31543
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31500: LD_VAR 0 4
31504: PUSH
31505: LD_VAR 0 7
31509: ARRAY
31510: PPUSH
31511: LD_VAR 0 8
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 8
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 116
// attacking := true ;
31533: LD_ADDR_VAR 0 29
31537: PUSH
31538: LD_INT 1
31540: ST_TO_ADDR
// continue ;
31541: GO 30027
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31543: LD_VAR 0 4
31547: PUSH
31548: LD_VAR 0 7
31552: ARRAY
31553: PPUSH
31554: CALL_OW 265
31558: PUSH
31559: LD_INT 11
31561: EQUAL
31562: IFFALSE 31840
// begin k := 10 ;
31564: LD_ADDR_VAR 0 9
31568: PUSH
31569: LD_INT 10
31571: ST_TO_ADDR
// x := 0 ;
31572: LD_ADDR_VAR 0 10
31576: PUSH
31577: LD_INT 0
31579: ST_TO_ADDR
// if tmp < k then
31580: LD_VAR 0 14
31584: PUSH
31585: LD_VAR 0 9
31589: LESS
31590: IFFALSE 31602
// k := tmp ;
31592: LD_ADDR_VAR 0 9
31596: PUSH
31597: LD_VAR 0 14
31601: ST_TO_ADDR
// for j = k downto 1 do
31602: LD_ADDR_VAR 0 8
31606: PUSH
31607: DOUBLE
31608: LD_VAR 0 9
31612: INC
31613: ST_TO_ADDR
31614: LD_INT 1
31616: PUSH
31617: FOR_DOWNTO
31618: IFFALSE 31693
// begin if GetType ( tmp [ j ] ) = unit_human then
31620: LD_VAR 0 14
31624: PUSH
31625: LD_VAR 0 8
31629: ARRAY
31630: PPUSH
31631: CALL_OW 247
31635: PUSH
31636: LD_INT 1
31638: EQUAL
31639: IFFALSE 31691
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31641: LD_VAR 0 4
31645: PUSH
31646: LD_VAR 0 7
31650: ARRAY
31651: PPUSH
31652: LD_VAR 0 14
31656: PUSH
31657: LD_VAR 0 8
31661: ARRAY
31662: PPUSH
31663: CALL 28699 0 2
// x := tmp [ j ] ;
31667: LD_ADDR_VAR 0 10
31671: PUSH
31672: LD_VAR 0 14
31676: PUSH
31677: LD_VAR 0 8
31681: ARRAY
31682: ST_TO_ADDR
// attacking := true ;
31683: LD_ADDR_VAR 0 29
31687: PUSH
31688: LD_INT 1
31690: ST_TO_ADDR
// end ; end ;
31691: GO 31617
31693: POP
31694: POP
// if not x then
31695: LD_VAR 0 10
31699: NOT
31700: IFFALSE 31840
// begin attacking := true ;
31702: LD_ADDR_VAR 0 29
31706: PUSH
31707: LD_INT 1
31709: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31710: LD_VAR 0 4
31714: PUSH
31715: LD_VAR 0 7
31719: ARRAY
31720: PPUSH
31721: CALL_OW 250
31725: PPUSH
31726: LD_VAR 0 4
31730: PUSH
31731: LD_VAR 0 7
31735: ARRAY
31736: PPUSH
31737: CALL_OW 251
31741: PPUSH
31742: CALL 1973 0 2
31746: PUSH
31747: LD_INT 2
31749: ARRAY
31750: PUSH
31751: LD_VAR 0 14
31755: PUSH
31756: LD_INT 1
31758: ARRAY
31759: PPUSH
31760: CALL_OW 250
31764: PPUSH
31765: LD_VAR 0 14
31769: PUSH
31770: LD_INT 1
31772: ARRAY
31773: PPUSH
31774: CALL_OW 251
31778: PPUSH
31779: CALL 1973 0 2
31783: PUSH
31784: LD_INT 2
31786: ARRAY
31787: EQUAL
31788: IFFALSE 31816
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31790: LD_VAR 0 4
31794: PUSH
31795: LD_VAR 0 7
31799: ARRAY
31800: PPUSH
31801: LD_VAR 0 14
31805: PUSH
31806: LD_INT 1
31808: ARRAY
31809: PPUSH
31810: CALL 28699 0 2
31814: GO 31840
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31816: LD_VAR 0 4
31820: PUSH
31821: LD_VAR 0 7
31825: ARRAY
31826: PPUSH
31827: LD_VAR 0 14
31831: PUSH
31832: LD_INT 1
31834: ARRAY
31835: PPUSH
31836: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31840: LD_VAR 0 4
31844: PUSH
31845: LD_VAR 0 7
31849: ARRAY
31850: PPUSH
31851: CALL_OW 264
31855: PUSH
31856: LD_INT 29
31858: EQUAL
31859: IFFALSE 32225
// begin if WantsToAttack ( group [ i ] ) in bombed then
31861: LD_VAR 0 4
31865: PUSH
31866: LD_VAR 0 7
31870: ARRAY
31871: PPUSH
31872: CALL_OW 319
31876: PUSH
31877: LD_VAR 0 28
31881: IN
31882: IFFALSE 31886
// continue ;
31884: GO 30027
// k := 8 ;
31886: LD_ADDR_VAR 0 9
31890: PUSH
31891: LD_INT 8
31893: ST_TO_ADDR
// x := 0 ;
31894: LD_ADDR_VAR 0 10
31898: PUSH
31899: LD_INT 0
31901: ST_TO_ADDR
// if tmp < k then
31902: LD_VAR 0 14
31906: PUSH
31907: LD_VAR 0 9
31911: LESS
31912: IFFALSE 31924
// k := tmp ;
31914: LD_ADDR_VAR 0 9
31918: PUSH
31919: LD_VAR 0 14
31923: ST_TO_ADDR
// for j = 1 to k do
31924: LD_ADDR_VAR 0 8
31928: PUSH
31929: DOUBLE
31930: LD_INT 1
31932: DEC
31933: ST_TO_ADDR
31934: LD_VAR 0 9
31938: PUSH
31939: FOR_TO
31940: IFFALSE 32072
// begin if GetType ( tmp [ j ] ) = unit_building then
31942: LD_VAR 0 14
31946: PUSH
31947: LD_VAR 0 8
31951: ARRAY
31952: PPUSH
31953: CALL_OW 247
31957: PUSH
31958: LD_INT 3
31960: EQUAL
31961: IFFALSE 32070
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31963: LD_VAR 0 14
31967: PUSH
31968: LD_VAR 0 8
31972: ARRAY
31973: PUSH
31974: LD_VAR 0 28
31978: IN
31979: NOT
31980: PUSH
31981: LD_VAR 0 14
31985: PUSH
31986: LD_VAR 0 8
31990: ARRAY
31991: PPUSH
31992: CALL_OW 313
31996: AND
31997: IFFALSE 32070
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31999: LD_VAR 0 4
32003: PUSH
32004: LD_VAR 0 7
32008: ARRAY
32009: PPUSH
32010: LD_VAR 0 14
32014: PUSH
32015: LD_VAR 0 8
32019: ARRAY
32020: PPUSH
32021: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
32025: LD_ADDR_VAR 0 28
32029: PUSH
32030: LD_VAR 0 28
32034: PPUSH
32035: LD_VAR 0 28
32039: PUSH
32040: LD_INT 1
32042: PLUS
32043: PPUSH
32044: LD_VAR 0 14
32048: PUSH
32049: LD_VAR 0 8
32053: ARRAY
32054: PPUSH
32055: CALL_OW 1
32059: ST_TO_ADDR
// attacking := true ;
32060: LD_ADDR_VAR 0 29
32064: PUSH
32065: LD_INT 1
32067: ST_TO_ADDR
// break ;
32068: GO 32072
// end ; end ;
32070: GO 31939
32072: POP
32073: POP
// if not attacking and f_attack_depot then
32074: LD_VAR 0 29
32078: NOT
32079: PUSH
32080: LD_VAR 0 25
32084: AND
32085: IFFALSE 32180
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32087: LD_ADDR_VAR 0 13
32091: PUSH
32092: LD_VAR 0 14
32096: PPUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 30
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 30
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: PPUSH
32125: CALL_OW 72
32129: ST_TO_ADDR
// if z then
32130: LD_VAR 0 13
32134: IFFALSE 32180
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
32136: LD_VAR 0 4
32140: PUSH
32141: LD_VAR 0 7
32145: ARRAY
32146: PPUSH
32147: LD_VAR 0 13
32151: PPUSH
32152: LD_VAR 0 4
32156: PUSH
32157: LD_VAR 0 7
32161: ARRAY
32162: PPUSH
32163: CALL_OW 74
32167: PPUSH
32168: CALL_OW 115
// attacking := true ;
32172: LD_ADDR_VAR 0 29
32176: PUSH
32177: LD_INT 1
32179: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
32180: LD_VAR 0 4
32184: PUSH
32185: LD_VAR 0 7
32189: ARRAY
32190: PPUSH
32191: CALL_OW 256
32195: PUSH
32196: LD_INT 500
32198: LESS
32199: IFFALSE 32225
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32201: LD_VAR 0 4
32205: PUSH
32206: LD_VAR 0 7
32210: ARRAY
32211: PPUSH
32212: LD_VAR 0 14
32216: PUSH
32217: LD_INT 1
32219: ARRAY
32220: PPUSH
32221: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32225: LD_VAR 0 4
32229: PUSH
32230: LD_VAR 0 7
32234: ARRAY
32235: PPUSH
32236: CALL_OW 256
32240: PUSH
32241: LD_INT 250
32243: LESS
32244: PUSH
32245: LD_VAR 0 4
32249: PUSH
32250: LD_VAR 0 7
32254: ARRAY
32255: PUSH
32256: LD_INT 21
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 23
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PPUSH
32280: CALL_OW 69
32284: IN
32285: AND
32286: IFFALSE 32411
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32288: LD_ADDR_VAR 0 9
32292: PUSH
32293: LD_OWVAR 3
32297: PUSH
32298: LD_VAR 0 4
32302: PUSH
32303: LD_VAR 0 7
32307: ARRAY
32308: DIFF
32309: PPUSH
32310: LD_VAR 0 4
32314: PUSH
32315: LD_VAR 0 7
32319: ARRAY
32320: PPUSH
32321: CALL_OW 74
32325: ST_TO_ADDR
// if not k then
32326: LD_VAR 0 9
32330: NOT
32331: IFFALSE 32335
// continue ;
32333: GO 30027
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32335: LD_VAR 0 9
32339: PUSH
32340: LD_INT 81
32342: PUSH
32343: LD_VAR 0 4
32347: PUSH
32348: LD_VAR 0 7
32352: ARRAY
32353: PPUSH
32354: CALL_OW 255
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL_OW 69
32367: IN
32368: PUSH
32369: LD_VAR 0 9
32373: PPUSH
32374: LD_VAR 0 4
32378: PUSH
32379: LD_VAR 0 7
32383: ARRAY
32384: PPUSH
32385: CALL_OW 296
32389: PUSH
32390: LD_INT 5
32392: LESS
32393: AND
32394: IFFALSE 32411
// ComAutodestruct ( group [ i ] ) ;
32396: LD_VAR 0 4
32400: PUSH
32401: LD_VAR 0 7
32405: ARRAY
32406: PPUSH
32407: CALL 28597 0 1
// end ; if f_attack_depot then
32411: LD_VAR 0 25
32415: IFFALSE 32527
// begin k := 6 ;
32417: LD_ADDR_VAR 0 9
32421: PUSH
32422: LD_INT 6
32424: ST_TO_ADDR
// if tmp < k then
32425: LD_VAR 0 14
32429: PUSH
32430: LD_VAR 0 9
32434: LESS
32435: IFFALSE 32447
// k := tmp ;
32437: LD_ADDR_VAR 0 9
32441: PUSH
32442: LD_VAR 0 14
32446: ST_TO_ADDR
// for j = 1 to k do
32447: LD_ADDR_VAR 0 8
32451: PUSH
32452: DOUBLE
32453: LD_INT 1
32455: DEC
32456: ST_TO_ADDR
32457: LD_VAR 0 9
32461: PUSH
32462: FOR_TO
32463: IFFALSE 32525
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32465: LD_VAR 0 8
32469: PPUSH
32470: CALL_OW 266
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: IN
32485: IFFALSE 32523
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32487: LD_VAR 0 4
32491: PUSH
32492: LD_VAR 0 7
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 14
32502: PUSH
32503: LD_VAR 0 8
32507: ARRAY
32508: PPUSH
32509: CALL_OW 115
// attacking := true ;
32513: LD_ADDR_VAR 0 29
32517: PUSH
32518: LD_INT 1
32520: ST_TO_ADDR
// break ;
32521: GO 32525
// end ;
32523: GO 32462
32525: POP
32526: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32527: LD_VAR 0 4
32531: PUSH
32532: LD_VAR 0 7
32536: ARRAY
32537: PPUSH
32538: CALL_OW 302
32542: PUSH
32543: LD_VAR 0 29
32547: NOT
32548: AND
32549: IFFALSE 32817
// begin if GetTag ( group [ i ] ) = 71 then
32551: LD_VAR 0 4
32555: PUSH
32556: LD_VAR 0 7
32560: ARRAY
32561: PPUSH
32562: CALL_OW 110
32566: PUSH
32567: LD_INT 71
32569: EQUAL
32570: IFFALSE 32611
// begin if HasTask ( group [ i ] ) then
32572: LD_VAR 0 4
32576: PUSH
32577: LD_VAR 0 7
32581: ARRAY
32582: PPUSH
32583: CALL_OW 314
32587: IFFALSE 32593
// continue else
32589: GO 30027
32591: GO 32611
// SetTag ( group [ i ] , 0 ) ;
32593: LD_VAR 0 4
32597: PUSH
32598: LD_VAR 0 7
32602: ARRAY
32603: PPUSH
32604: LD_INT 0
32606: PPUSH
32607: CALL_OW 109
// end ; k := 8 ;
32611: LD_ADDR_VAR 0 9
32615: PUSH
32616: LD_INT 8
32618: ST_TO_ADDR
// x := 0 ;
32619: LD_ADDR_VAR 0 10
32623: PUSH
32624: LD_INT 0
32626: ST_TO_ADDR
// if tmp < k then
32627: LD_VAR 0 14
32631: PUSH
32632: LD_VAR 0 9
32636: LESS
32637: IFFALSE 32649
// k := tmp ;
32639: LD_ADDR_VAR 0 9
32643: PUSH
32644: LD_VAR 0 14
32648: ST_TO_ADDR
// for j = 1 to k do
32649: LD_ADDR_VAR 0 8
32653: PUSH
32654: DOUBLE
32655: LD_INT 1
32657: DEC
32658: ST_TO_ADDR
32659: LD_VAR 0 9
32663: PUSH
32664: FOR_TO
32665: IFFALSE 32763
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32667: LD_VAR 0 14
32671: PUSH
32672: LD_VAR 0 8
32676: ARRAY
32677: PPUSH
32678: CALL_OW 247
32682: PUSH
32683: LD_INT 1
32685: EQUAL
32686: PUSH
32687: LD_VAR 0 14
32691: PUSH
32692: LD_VAR 0 8
32696: ARRAY
32697: PPUSH
32698: CALL_OW 256
32702: PUSH
32703: LD_INT 250
32705: LESS
32706: PUSH
32707: LD_VAR 0 20
32711: AND
32712: PUSH
32713: LD_VAR 0 20
32717: NOT
32718: PUSH
32719: LD_VAR 0 14
32723: PUSH
32724: LD_VAR 0 8
32728: ARRAY
32729: PPUSH
32730: CALL_OW 256
32734: PUSH
32735: LD_INT 250
32737: GREATEREQUAL
32738: AND
32739: OR
32740: AND
32741: IFFALSE 32761
// begin x := tmp [ j ] ;
32743: LD_ADDR_VAR 0 10
32747: PUSH
32748: LD_VAR 0 14
32752: PUSH
32753: LD_VAR 0 8
32757: ARRAY
32758: ST_TO_ADDR
// break ;
32759: GO 32763
// end ;
32761: GO 32664
32763: POP
32764: POP
// if x then
32765: LD_VAR 0 10
32769: IFFALSE 32793
// ComAttackUnit ( group [ i ] , x ) else
32771: LD_VAR 0 4
32775: PUSH
32776: LD_VAR 0 7
32780: ARRAY
32781: PPUSH
32782: LD_VAR 0 10
32786: PPUSH
32787: CALL_OW 115
32791: GO 32817
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32793: LD_VAR 0 4
32797: PUSH
32798: LD_VAR 0 7
32802: ARRAY
32803: PPUSH
32804: LD_VAR 0 14
32808: PUSH
32809: LD_INT 1
32811: ARRAY
32812: PPUSH
32813: CALL_OW 115
// end ; end ; end ;
32817: GO 30027
32819: POP
32820: POP
// wait ( 0 0$1 ) ;
32821: LD_INT 35
32823: PPUSH
32824: CALL_OW 67
// until group = [ ] ;
32828: LD_VAR 0 4
32832: PUSH
32833: EMPTY
32834: EQUAL
32835: IFFALSE 30012
// end ;
32837: LD_VAR 0 2
32841: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
// if not defenders then
32851: LD_VAR 0 2
32855: NOT
32856: IFFALSE 32860
// exit ;
32858: GO 33384
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32860: LD_ADDR_VAR 0 9
32864: PUSH
32865: LD_EXP 46
32869: PUSH
32870: LD_VAR 0 1
32874: ARRAY
32875: PPUSH
32876: LD_INT 25
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PPUSH
32886: CALL_OW 72
32890: ST_TO_ADDR
// if mechs then
32891: LD_VAR 0 9
32895: IFFALSE 32994
// for i in defenders do
32897: LD_ADDR_VAR 0 5
32901: PUSH
32902: LD_VAR 0 2
32906: PUSH
32907: FOR_IN
32908: IFFALSE 32992
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32910: LD_VAR 0 5
32914: PPUSH
32915: CALL_OW 263
32919: PUSH
32920: LD_INT 1
32922: EQUAL
32923: PUSH
32924: LD_VAR 0 5
32928: PPUSH
32929: CALL_OW 311
32933: NOT
32934: AND
32935: IFFALSE 32990
// begin un := mechs [ 1 ] ;
32937: LD_ADDR_VAR 0 7
32941: PUSH
32942: LD_VAR 0 9
32946: PUSH
32947: LD_INT 1
32949: ARRAY
32950: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32951: LD_VAR 0 7
32955: PPUSH
32956: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32960: LD_VAR 0 7
32964: PPUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: CALL_OW 180
// mechs := mechs diff un ;
32974: LD_ADDR_VAR 0 9
32978: PUSH
32979: LD_VAR 0 9
32983: PUSH
32984: LD_VAR 0 7
32988: DIFF
32989: ST_TO_ADDR
// end ;
32990: GO 32907
32992: POP
32993: POP
// repeat wait ( 0 0$1 ) ;
32994: LD_INT 35
32996: PPUSH
32997: CALL_OW 67
// enemy := mc_scan [ base ] ;
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_EXP 65
33010: PUSH
33011: LD_VAR 0 1
33015: ARRAY
33016: ST_TO_ADDR
// for i in defenders do
33017: LD_ADDR_VAR 0 5
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: FOR_IN
33028: IFFALSE 33174
// begin e := NearestUnitToUnit ( enemy , i ) ;
33030: LD_ADDR_VAR 0 10
33034: PUSH
33035: LD_VAR 0 3
33039: PPUSH
33040: LD_VAR 0 5
33044: PPUSH
33045: CALL_OW 74
33049: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
33050: LD_VAR 0 5
33054: PPUSH
33055: CALL_OW 319
33059: NOT
33060: PUSH
33061: LD_VAR 0 5
33065: PPUSH
33066: CALL_OW 302
33070: AND
33071: PUSH
33072: LD_VAR 0 5
33076: PPUSH
33077: LD_VAR 0 10
33081: PPUSH
33082: CALL_OW 296
33086: PUSH
33087: LD_INT 30
33089: LESS
33090: AND
33091: IFFALSE 33109
// ComAttackUnit ( i , e ) else
33093: LD_VAR 0 5
33097: PPUSH
33098: LD_VAR 0 10
33102: PPUSH
33103: CALL_OW 115
33107: GO 33172
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
33109: LD_VAR 0 5
33113: PPUSH
33114: LD_VAR 0 10
33118: PPUSH
33119: CALL_OW 296
33123: PUSH
33124: LD_INT 30
33126: GREATEREQUAL
33127: PUSH
33128: LD_VAR 0 5
33132: PPUSH
33133: LD_EXP 66
33137: PUSH
33138: LD_VAR 0 1
33142: ARRAY
33143: PPUSH
33144: CALL_OW 308
33148: NOT
33149: AND
33150: IFFALSE 33172
// ComMoveToArea ( i , mc_parking [ base ] ) ;
33152: LD_VAR 0 5
33156: PPUSH
33157: LD_EXP 66
33161: PUSH
33162: LD_VAR 0 1
33166: ARRAY
33167: PPUSH
33168: CALL_OW 113
// end ;
33172: GO 33027
33174: POP
33175: POP
// until not enemy or not defenders ;
33176: LD_VAR 0 3
33180: NOT
33181: PUSH
33182: LD_VAR 0 2
33186: NOT
33187: OR
33188: IFFALSE 32994
// if not enemy and defenders then
33190: LD_VAR 0 3
33194: NOT
33195: PUSH
33196: LD_VAR 0 2
33200: AND
33201: IFFALSE 33359
// repeat wait ( 0 0$1 ) ;
33203: LD_INT 35
33205: PPUSH
33206: CALL_OW 67
// for i in defenders do
33210: LD_ADDR_VAR 0 5
33214: PUSH
33215: LD_VAR 0 2
33219: PUSH
33220: FOR_IN
33221: IFFALSE 33310
// begin if not IsInArea ( i , mc_parking [ base ] ) then
33223: LD_VAR 0 5
33227: PPUSH
33228: LD_EXP 66
33232: PUSH
33233: LD_VAR 0 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 308
33243: NOT
33244: IFFALSE 33268
// ComMoveToArea ( i , mc_parking [ base ] ) else
33246: LD_VAR 0 5
33250: PPUSH
33251: LD_EXP 66
33255: PUSH
33256: LD_VAR 0 1
33260: ARRAY
33261: PPUSH
33262: CALL_OW 113
33266: GO 33308
// if GetControl ( i ) = control_manual then
33268: LD_VAR 0 5
33272: PPUSH
33273: CALL_OW 263
33277: PUSH
33278: LD_INT 1
33280: EQUAL
33281: IFFALSE 33308
// if IsDrivenBy ( i ) then
33283: LD_VAR 0 5
33287: PPUSH
33288: CALL_OW 311
33292: IFFALSE 33308
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 311
33303: PPUSH
33304: CALL_OW 121
// end ;
33308: GO 33220
33310: POP
33311: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33312: LD_VAR 0 2
33316: PPUSH
33317: LD_INT 95
33319: PUSH
33320: LD_EXP 66
33324: PUSH
33325: LD_VAR 0 1
33329: ARRAY
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PPUSH
33335: CALL_OW 72
33339: PUSH
33340: LD_VAR 0 2
33344: EQUAL
33345: PUSH
33346: LD_EXP 65
33350: PUSH
33351: LD_VAR 0 1
33355: ARRAY
33356: OR
33357: IFFALSE 33203
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33359: LD_ADDR_EXP 64
33363: PUSH
33364: LD_EXP 64
33368: PPUSH
33369: LD_VAR 0 1
33373: PPUSH
33374: LD_VAR 0 2
33378: PPUSH
33379: CALL_OW 1
33383: ST_TO_ADDR
// end ;
33384: LD_VAR 0 4
33388: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33389: LD_INT 0
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
// if not base_units then
33395: LD_VAR 0 1
33399: NOT
33400: IFFALSE 33404
// exit ;
33402: GO 33491
// result := false ;
33404: LD_ADDR_VAR 0 2
33408: PUSH
33409: LD_INT 0
33411: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33412: LD_ADDR_VAR 0 5
33416: PUSH
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_INT 21
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 72
33436: ST_TO_ADDR
// if not tmp then
33437: LD_VAR 0 5
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33491
// for i in tmp do
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_VAR 0 5
33455: PUSH
33456: FOR_IN
33457: IFFALSE 33489
// begin result := EnemyInRange ( i , 18 ) ;
33459: LD_ADDR_VAR 0 2
33463: PUSH
33464: LD_VAR 0 3
33468: PPUSH
33469: LD_INT 18
33471: PPUSH
33472: CALL 28280 0 2
33476: ST_TO_ADDR
// if result then
33477: LD_VAR 0 2
33481: IFFALSE 33487
// exit ;
33483: POP
33484: POP
33485: GO 33491
// end ;
33487: GO 33456
33489: POP
33490: POP
// end ;
33491: LD_VAR 0 2
33495: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
// result := false ;
33502: LD_ADDR_VAR 0 2
33506: PUSH
33507: LD_INT 0
33509: ST_TO_ADDR
// side := GetSide ( unit ) ;
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL_OW 255
33524: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33525: LD_ADDR_VAR 0 4
33529: PUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 248
33539: ST_TO_ADDR
// case nat of 1 :
33540: LD_VAR 0 4
33544: PUSH
33545: LD_INT 1
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33564
33553: POP
// tech := tech_lassight ; 2 :
33554: LD_ADDR_VAR 0 5
33558: PUSH
33559: LD_INT 12
33561: ST_TO_ADDR
33562: GO 33603
33564: LD_INT 2
33566: DOUBLE
33567: EQUAL
33568: IFTRUE 33572
33570: GO 33583
33572: POP
// tech := tech_mortar ; 3 :
33573: LD_ADDR_VAR 0 5
33577: PUSH
33578: LD_INT 41
33580: ST_TO_ADDR
33581: GO 33603
33583: LD_INT 3
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33602
33591: POP
// tech := tech_bazooka ; end ;
33592: LD_ADDR_VAR 0 5
33596: PUSH
33597: LD_INT 44
33599: ST_TO_ADDR
33600: GO 33603
33602: POP
// if Researched ( side , tech ) then
33603: LD_VAR 0 3
33607: PPUSH
33608: LD_VAR 0 5
33612: PPUSH
33613: CALL_OW 325
33617: IFFALSE 33644
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33619: LD_ADDR_VAR 0 2
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: LD_INT 8
33629: PUSH
33630: LD_INT 9
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: LD_VAR 0 4
33642: ARRAY
33643: ST_TO_ADDR
// end ;
33644: LD_VAR 0 2
33648: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
33653: PPUSH
// if not mines then
33654: LD_VAR 0 2
33658: NOT
33659: IFFALSE 33663
// exit ;
33661: GO 33786
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33663: LD_ADDR_VAR 0 5
33667: PUSH
33668: LD_INT 81
33670: PUSH
33671: LD_VAR 0 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: ST_TO_ADDR
// for i in mines do
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: LD_VAR 0 2
33694: PUSH
33695: FOR_IN
33696: IFFALSE 33784
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33698: LD_VAR 0 4
33702: PUSH
33703: LD_INT 1
33705: ARRAY
33706: PPUSH
33707: LD_VAR 0 4
33711: PUSH
33712: LD_INT 2
33714: ARRAY
33715: PPUSH
33716: CALL_OW 458
33720: NOT
33721: IFFALSE 33725
// continue ;
33723: GO 33695
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33725: LD_VAR 0 4
33729: PUSH
33730: LD_INT 1
33732: ARRAY
33733: PPUSH
33734: LD_VAR 0 4
33738: PUSH
33739: LD_INT 2
33741: ARRAY
33742: PPUSH
33743: CALL_OW 428
33747: PUSH
33748: LD_VAR 0 5
33752: IN
33753: IFFALSE 33782
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33755: LD_VAR 0 4
33759: PUSH
33760: LD_INT 1
33762: ARRAY
33763: PPUSH
33764: LD_VAR 0 4
33768: PUSH
33769: LD_INT 2
33771: ARRAY
33772: PPUSH
33773: LD_VAR 0 1
33777: PPUSH
33778: CALL_OW 456
// end ;
33782: GO 33695
33784: POP
33785: POP
// end ; end_of_file
33786: LD_VAR 0 3
33790: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33791: LD_INT 0
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33798: LD_ADDR_VAR 0 5
33802: PUSH
33803: LD_INT 6
33805: PUSH
33806: LD_INT 7
33808: PUSH
33809: LD_INT 8
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: PUSH
33817: LD_OWVAR 67
33821: ARRAY
33822: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33823: LD_INT 69
33825: PUSH
33826: EMPTY
33827: LIST
33828: PPUSH
33829: LD_INT 141
33831: PPUSH
33832: CALL_OW 169
// Wait ( 1 ) ;
33836: LD_INT 1
33838: PPUSH
33839: CALL_OW 67
// uc_side := 2 ;
33843: LD_ADDR_OWVAR 20
33847: PUSH
33848: LD_INT 2
33850: ST_TO_ADDR
// uc_nation := 2 ;
33851: LD_ADDR_OWVAR 21
33855: PUSH
33856: LD_INT 2
33858: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33859: LD_ADDR_OWVAR 37
33863: PUSH
33864: LD_INT 14
33866: ST_TO_ADDR
// vc_engine := engine_siberite ;
33867: LD_ADDR_OWVAR 39
33871: PUSH
33872: LD_INT 3
33874: ST_TO_ADDR
// vc_control := control_manual ;
33875: LD_ADDR_OWVAR 38
33879: PUSH
33880: LD_INT 1
33882: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33883: LD_ADDR_OWVAR 40
33887: PUSH
33888: LD_INT 31
33890: ST_TO_ADDR
// for i = 1 to 3 do
33891: LD_ADDR_VAR 0 2
33895: PUSH
33896: DOUBLE
33897: LD_INT 1
33899: DEC
33900: ST_TO_ADDR
33901: LD_INT 3
33903: PUSH
33904: FOR_TO
33905: IFFALSE 33989
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33907: LD_INT 0
33909: PPUSH
33910: LD_INT 3
33912: PPUSH
33913: LD_VAR 0 5
33917: PPUSH
33918: CALL_OW 380
// un := CreateVehicle ;
33922: LD_ADDR_VAR 0 4
33926: PUSH
33927: CALL_OW 45
33931: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33932: LD_VAR 0 4
33936: PPUSH
33937: LD_INT 0
33939: PPUSH
33940: LD_INT 5
33942: PPUSH
33943: CALL_OW 12
33947: PPUSH
33948: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33952: LD_VAR 0 4
33956: PPUSH
33957: LD_INT 156
33959: PPUSH
33960: LD_INT 15
33962: PPUSH
33963: LD_INT 6
33965: PPUSH
33966: LD_INT 0
33968: PPUSH
33969: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33973: CALL_OW 44
33977: PPUSH
33978: LD_VAR 0 4
33982: PPUSH
33983: CALL_OW 52
// end ;
33987: GO 33904
33989: POP
33990: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33991: LD_ADDR_EXP 35
33995: PUSH
33996: LD_INT 94
33998: PPUSH
33999: LD_STRING dammam
34001: PPUSH
34002: LD_VAR 0 5
34006: PPUSH
34007: LD_INT 10000
34009: PUSH
34010: LD_INT 1000
34012: PUSH
34013: LD_INT 300
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: PPUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 5
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: PPUSH
34041: CALL 6037 0 5
34045: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
34046: LD_ADDR_EXP 35
34050: PUSH
34051: LD_EXP 35
34055: PUSH
34056: LD_INT 122
34058: PPUSH
34059: LD_STRING 
34061: PPUSH
34062: LD_VAR 0 5
34066: PPUSH
34067: LD_INT 100
34069: PUSH
34070: LD_INT 60
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: PPUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 4
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: PPUSH
34100: CALL 6037 0 5
34104: ADD
34105: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
34106: LD_ADDR_EXP 33
34110: PUSH
34111: LD_INT 45
34113: PPUSH
34114: LD_STRING jeddah
34116: PPUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: LD_INT 700
34124: PUSH
34125: LD_INT 300
34127: PUSH
34128: LD_INT 10
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: PPUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 5
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: PPUSH
34155: CALL 6037 0 5
34159: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
34160: LD_ADDR_EXP 34
34164: PUSH
34165: LD_INT 7
34167: PPUSH
34168: LD_STRING riyadh
34170: PPUSH
34171: LD_VAR 0 5
34175: PPUSH
34176: LD_INT 500
34178: PUSH
34179: LD_INT 60
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: PPUSH
34190: LD_INT 4
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: PPUSH
34208: CALL 6037 0 5
34212: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
34213: LD_ADDR_EXP 36
34217: PUSH
34218: LD_INT 69
34220: PPUSH
34221: LD_STRING 
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: LD_INT 500
34231: PUSH
34232: LD_INT 50
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: PPUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 3
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: PPUSH
34262: CALL 6037 0 5
34266: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34267: LD_ADDR_EXP 46
34271: PUSH
34272: LD_EXP 35
34276: PUSH
34277: LD_EXP 33
34281: PUSH
34282: LD_EXP 36
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34292: LD_ADDR_VAR 0 2
34296: PUSH
34297: LD_INT 22
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 30
34309: PUSH
34310: LD_INT 31
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 58
34319: PUSH
34320: EMPTY
34321: LIST
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: PPUSH
34328: CALL_OW 69
34332: PUSH
34333: FOR_IN
34334: IFFALSE 34459
// begin if GetBase ( i ) then
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 274
34345: IFFALSE 34349
// continue ;
34347: GO 34333
// d := GetDir ( i ) ;
34349: LD_ADDR_VAR 0 3
34353: PUSH
34354: LD_VAR 0 2
34358: PPUSH
34359: CALL_OW 254
34363: ST_TO_ADDR
// if d < 3 then
34364: LD_VAR 0 3
34368: PUSH
34369: LD_INT 3
34371: LESS
34372: IFFALSE 34390
// d := d + 3 else
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_VAR 0 3
34383: PUSH
34384: LD_INT 3
34386: PLUS
34387: ST_TO_ADDR
34388: GO 34404
// d := d - 3 ;
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 3
34402: MINUS
34403: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34404: LD_INT 0
34406: PPUSH
34407: LD_INT 8
34409: PPUSH
34410: LD_VAR 0 5
34414: PPUSH
34415: CALL_OW 380
// un := CreateHuman ;
34419: LD_ADDR_VAR 0 4
34423: PUSH
34424: CALL_OW 44
34428: ST_TO_ADDR
// SetDir ( un , d ) ;
34429: LD_VAR 0 4
34433: PPUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34443: LD_VAR 0 4
34447: PPUSH
34448: LD_VAR 0 2
34452: PPUSH
34453: CALL_OW 52
// end ;
34457: GO 34333
34459: POP
34460: POP
// if Difficulty > 1 then
34461: LD_OWVAR 67
34465: PUSH
34466: LD_INT 1
34468: GREATER
34469: IFFALSE 34840
// begin ar_kamikadze := [ ] ;
34471: LD_ADDR_EXP 39
34475: PUSH
34476: EMPTY
34477: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34478: LD_INT 0
34480: PPUSH
34481: LD_INT 1
34483: PPUSH
34484: LD_VAR 0 5
34488: PPUSH
34489: CALL_OW 380
// un := CreateHuman ;
34493: LD_ADDR_VAR 0 4
34497: PUSH
34498: CALL_OW 44
34502: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34503: LD_VAR 0 4
34507: PPUSH
34508: LD_INT 3
34510: PPUSH
34511: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34515: LD_VAR 0 4
34519: PPUSH
34520: LD_INT 23
34522: PPUSH
34523: LD_INT 44
34525: PPUSH
34526: LD_INT 0
34528: PPUSH
34529: CALL_OW 48
// ComCrawl ( un ) ;
34533: LD_VAR 0 4
34537: PPUSH
34538: CALL_OW 137
// un := CreateHuman ;
34542: LD_ADDR_VAR 0 4
34546: PUSH
34547: CALL_OW 44
34551: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34552: LD_VAR 0 4
34556: PPUSH
34557: LD_INT 3
34559: PPUSH
34560: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34564: LD_VAR 0 4
34568: PPUSH
34569: LD_INT 30
34571: PPUSH
34572: LD_INT 39
34574: PPUSH
34575: LD_INT 0
34577: PPUSH
34578: CALL_OW 48
// ComCrawl ( un ) ;
34582: LD_VAR 0 4
34586: PPUSH
34587: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34591: LD_INT 0
34593: PPUSH
34594: LD_INT 17
34596: PPUSH
34597: LD_VAR 0 5
34601: PPUSH
34602: CALL_OW 380
// un := CreateHuman ;
34606: LD_ADDR_VAR 0 4
34610: PUSH
34611: CALL_OW 44
34615: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34616: LD_VAR 0 4
34620: PPUSH
34621: LD_INT 3
34623: PPUSH
34624: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34628: LD_VAR 0 4
34632: PPUSH
34633: LD_INT 45
34635: PPUSH
34636: LD_INT 86
34638: PPUSH
34639: LD_INT 0
34641: PPUSH
34642: CALL_OW 48
// ComHold ( un ) ;
34646: LD_VAR 0 4
34650: PPUSH
34651: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34655: LD_ADDR_EXP 39
34659: PUSH
34660: LD_EXP 39
34664: PPUSH
34665: LD_EXP 39
34669: PUSH
34670: LD_INT 1
34672: PLUS
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// un := CreateHuman ;
34684: LD_ADDR_VAR 0 4
34688: PUSH
34689: CALL_OW 44
34693: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34694: LD_VAR 0 4
34698: PPUSH
34699: LD_INT 3
34701: PPUSH
34702: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34706: LD_VAR 0 4
34710: PPUSH
34711: LD_INT 60
34713: PPUSH
34714: LD_INT 85
34716: PPUSH
34717: LD_INT 0
34719: PPUSH
34720: CALL_OW 48
// ComHold ( un ) ;
34724: LD_VAR 0 4
34728: PPUSH
34729: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34733: LD_ADDR_EXP 39
34737: PUSH
34738: LD_EXP 39
34742: PPUSH
34743: LD_EXP 39
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: PPUSH
34752: LD_VAR 0 4
34756: PPUSH
34757: CALL_OW 1
34761: ST_TO_ADDR
// un := CreateHuman ;
34762: LD_ADDR_VAR 0 4
34766: PUSH
34767: CALL_OW 44
34771: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34772: LD_VAR 0 4
34776: PPUSH
34777: LD_INT 3
34779: PPUSH
34780: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34784: LD_VAR 0 4
34788: PPUSH
34789: LD_INT 222
34791: PPUSH
34792: LD_INT 166
34794: PPUSH
34795: LD_INT 0
34797: PPUSH
34798: CALL_OW 48
// ComHold ( un ) ;
34802: LD_VAR 0 4
34806: PPUSH
34807: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34811: LD_ADDR_EXP 39
34815: PUSH
34816: LD_EXP 39
34820: PPUSH
34821: LD_EXP 39
34825: PUSH
34826: LD_INT 1
34828: PLUS
34829: PPUSH
34830: LD_VAR 0 4
34834: PPUSH
34835: CALL_OW 1
34839: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34840: LD_ADDR_EXP 37
34844: PUSH
34845: EMPTY
34846: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34847: LD_INT 1
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: LD_VAR 0 5
34857: PPUSH
34858: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34862: LD_ADDR_OWVAR 33
34866: PUSH
34867: LD_STRING SecondCharsGal
34869: ST_TO_ADDR
// hc_face_number := 4 ;
34870: LD_ADDR_OWVAR 34
34874: PUSH
34875: LD_INT 4
34877: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34878: LD_ADDR_EXP 37
34882: PUSH
34883: LD_EXP 37
34887: PPUSH
34888: LD_INT 1
34890: PPUSH
34891: CALL_OW 44
34895: PPUSH
34896: CALL_OW 1
34900: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34901: LD_INT 2
34903: PPUSH
34904: LD_INT 4
34906: PPUSH
34907: LD_VAR 0 5
34911: PPUSH
34912: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34916: LD_ADDR_OWVAR 33
34920: PUSH
34921: LD_STRING SecondCharsGal
34923: ST_TO_ADDR
// hc_face_number := 15 ;
34924: LD_ADDR_OWVAR 34
34928: PUSH
34929: LD_INT 15
34931: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34932: LD_ADDR_EXP 37
34936: PUSH
34937: LD_EXP 37
34941: PPUSH
34942: LD_INT 2
34944: PPUSH
34945: CALL_OW 44
34949: PPUSH
34950: CALL_OW 1
34954: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34955: LD_INT 2
34957: PPUSH
34958: LD_INT 4
34960: PPUSH
34961: LD_VAR 0 5
34965: PPUSH
34966: CALL_OW 380
// hc_gallery :=  ;
34970: LD_ADDR_OWVAR 33
34974: PUSH
34975: LD_STRING 
34977: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34978: LD_ADDR_EXP 37
34982: PUSH
34983: LD_EXP 37
34987: PPUSH
34988: LD_INT 3
34990: PPUSH
34991: CALL_OW 44
34995: PPUSH
34996: CALL_OW 1
35000: ST_TO_ADDR
// hc_sex := sex_male ;
35001: LD_ADDR_OWVAR 27
35005: PUSH
35006: LD_INT 1
35008: ST_TO_ADDR
// hc_class = 11 ;
35009: LD_ADDR_OWVAR 28
35013: PUSH
35014: LD_INT 11
35016: ST_TO_ADDR
// hc_gallery = sandar ;
35017: LD_ADDR_OWVAR 33
35021: PUSH
35022: LD_STRING sandar
35024: ST_TO_ADDR
// hc_face_number = 33 ;
35025: LD_ADDR_OWVAR 34
35029: PUSH
35030: LD_INT 33
35032: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
35033: LD_ADDR_OWVAR 26
35037: PUSH
35038: LD_STRING Thabit Muhair Saliba
35040: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
35041: LD_ADDR_OWVAR 31
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: ST_TO_ADDR
// Saliba = CreateHuman ;
35064: LD_ADDR_EXP 41
35068: PUSH
35069: CALL_OW 44
35073: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
35074: LD_EXP 41
35078: PPUSH
35079: LD_INT 7
35081: PPUSH
35082: CALL_OW 52
// if gensher_active then
35086: LD_EXP 18
35090: IFFALSE 35117
// begin Gensher = NewCharacter ( Dietrich ) ;
35092: LD_ADDR_EXP 42
35096: PUSH
35097: LD_STRING Dietrich
35099: PPUSH
35100: CALL_OW 25
35104: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
35105: LD_EXP 42
35109: PPUSH
35110: LD_INT 94
35112: PPUSH
35113: CALL_OW 52
// end ; InitHc ;
35117: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
35121: LD_ADDR_EXP 38
35125: PUSH
35126: EMPTY
35127: ST_TO_ADDR
// for i = 1 to 4 do
35128: LD_ADDR_VAR 0 2
35132: PUSH
35133: DOUBLE
35134: LD_INT 1
35136: DEC
35137: ST_TO_ADDR
35138: LD_INT 4
35140: PUSH
35141: FOR_TO
35142: IFFALSE 35314
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
35144: LD_INT 13
35146: PUSH
35147: LD_INT 14
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PPUSH
35157: LD_INT 2
35159: PPUSH
35160: CALL_OW 12
35164: ARRAY
35165: PPUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PPUSH
35179: LD_INT 2
35181: PPUSH
35182: CALL_OW 12
35186: ARRAY
35187: PPUSH
35188: LD_INT 1
35190: PPUSH
35191: LD_INT 25
35193: PUSH
35194: LD_INT 27
35196: PUSH
35197: LD_INT 26
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PPUSH
35208: LD_INT 3
35210: PPUSH
35211: CALL_OW 12
35215: ARRAY
35216: PPUSH
35217: LD_INT 60
35219: PPUSH
35220: LD_INT 100
35222: PPUSH
35223: CALL_OW 12
35227: PPUSH
35228: CALL 2042 0 5
// un := CreateVehicle ;
35232: LD_ADDR_VAR 0 4
35236: PUSH
35237: CALL_OW 45
35241: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
35242: LD_ADDR_EXP 38
35246: PUSH
35247: LD_EXP 38
35251: PPUSH
35252: LD_EXP 38
35256: PUSH
35257: LD_INT 1
35259: PLUS
35260: PPUSH
35261: LD_VAR 0 4
35265: PPUSH
35266: CALL_OW 1
35270: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35271: LD_VAR 0 4
35275: PPUSH
35276: LD_INT 0
35278: PPUSH
35279: LD_INT 5
35281: PPUSH
35282: CALL_OW 12
35286: PPUSH
35287: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35291: LD_VAR 0 4
35295: PPUSH
35296: LD_INT 124
35298: PPUSH
35299: LD_INT 141
35301: PPUSH
35302: LD_INT 6
35304: PPUSH
35305: LD_INT 0
35307: PPUSH
35308: CALL_OW 50
// end ;
35312: GO 35141
35314: POP
35315: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35316: LD_ADDR_EXP 40
35320: PUSH
35321: EMPTY
35322: PUSH
35323: EMPTY
35324: PUSH
35325: EMPTY
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: DOUBLE
35338: LD_INT 1
35340: DEC
35341: ST_TO_ADDR
35342: LD_INT 3
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: PUSH
35356: LD_OWVAR 67
35360: ARRAY
35361: PUSH
35362: FOR_TO
35363: IFFALSE 35577
// for i = 1 to 3 do
35365: LD_ADDR_VAR 0 2
35369: PUSH
35370: DOUBLE
35371: LD_INT 1
35373: DEC
35374: ST_TO_ADDR
35375: LD_INT 3
35377: PUSH
35378: FOR_TO
35379: IFFALSE 35573
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35381: LD_INT 14
35383: PPUSH
35384: LD_INT 3
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PPUSH
35397: LD_INT 2
35399: PPUSH
35400: CALL_OW 12
35404: ARRAY
35405: PPUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 5
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PPUSH
35419: LD_INT 2
35421: PPUSH
35422: CALL_OW 12
35426: ARRAY
35427: PPUSH
35428: LD_INT 25
35430: PUSH
35431: LD_INT 27
35433: PUSH
35434: LD_INT 26
35436: PUSH
35437: LD_INT 28
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PPUSH
35449: LD_INT 4
35451: PPUSH
35452: CALL_OW 12
35456: ARRAY
35457: PPUSH
35458: LD_INT 100
35460: PPUSH
35461: CALL 2042 0 5
// un := CreateVehicle ;
35465: LD_ADDR_VAR 0 4
35469: PUSH
35470: CALL_OW 45
35474: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35475: LD_ADDR_EXP 40
35479: PUSH
35480: LD_EXP 40
35484: PPUSH
35485: LD_VAR 0 2
35489: PUSH
35490: LD_EXP 40
35494: PUSH
35495: LD_VAR 0 2
35499: ARRAY
35500: PUSH
35501: LD_INT 1
35503: PLUS
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PPUSH
35509: LD_VAR 0 4
35513: PPUSH
35514: CALL 3228 0 3
35518: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35519: LD_VAR 0 4
35523: PPUSH
35524: LD_INT 0
35526: PPUSH
35527: LD_INT 5
35529: PPUSH
35530: CALL_OW 12
35534: PPUSH
35535: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35539: LD_VAR 0 4
35543: PPUSH
35544: LD_INT 20
35546: PUSH
35547: LD_INT 21
35549: PUSH
35550: LD_INT 22
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: PUSH
35558: LD_VAR 0 2
35562: ARRAY
35563: PPUSH
35564: LD_INT 0
35566: PPUSH
35567: CALL_OW 49
// end ;
35571: GO 35378
35573: POP
35574: POP
35575: GO 35362
35577: POP
35578: POP
// InitHc ;
35579: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35583: LD_INT 4
35585: PPUSH
35586: LD_INT 5
35588: PPUSH
35589: LD_INT 10
35591: PPUSH
35592: LD_INT 5
35594: PPUSH
35595: LD_INT 0
35597: PPUSH
35598: CALL_OW 58
// end ;
35602: LD_VAR 0 1
35606: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35607: LD_EXP 39
35611: IFFALSE 35685
35613: GO 35615
35615: DISABLE
35616: LD_INT 0
35618: PPUSH
// begin enable ;
35619: ENABLE
// for i in ar_kamikadze do
35620: LD_ADDR_VAR 0 1
35624: PUSH
35625: LD_EXP 39
35629: PUSH
35630: FOR_IN
35631: IFFALSE 35683
// if See ( 1 , i ) then
35633: LD_INT 1
35635: PPUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 292
35645: IFFALSE 35681
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35647: LD_VAR 0 1
35651: PPUSH
35652: LD_INT 81
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PPUSH
35662: CALL_OW 69
35666: PPUSH
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL_OW 74
35676: PPUSH
35677: CALL_OW 115
35681: GO 35630
35683: POP
35684: POP
// end ;
35685: PPOPN 1
35687: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35688: LD_EXP 13
35692: IFFALSE 36009
35694: GO 35696
35696: DISABLE
35697: LD_INT 0
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35703: LD_INT 35
35705: PPUSH
35706: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35710: LD_INT 1
35712: PPUSH
35713: CALL 55325 0 1
35717: PUSH
35718: LD_INT 0
35720: EQUAL
35721: IFFALSE 35703
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35723: LD_INT 1
35725: PPUSH
35726: LD_INT 14
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 32
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: PPUSH
35747: CALL 55114 0 2
// repeat wait ( 0 0$1 ) ;
35751: LD_INT 35
35753: PPUSH
35754: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35758: LD_EXP 61
35762: PUSH
35763: LD_INT 1
35765: ARRAY
35766: PPUSH
35767: LD_INT 33
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 34
35779: PUSH
35780: LD_INT 32
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 72
35795: IFFALSE 35751
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35797: LD_ADDR_VAR 0 2
35801: PUSH
35802: LD_EXP 61
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PPUSH
35811: LD_INT 33
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 34
35823: PUSH
35824: LD_INT 32
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PPUSH
35835: CALL_OW 72
35839: PUSH
35840: LD_INT 1
35842: ARRAY
35843: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35844: LD_ADDR_VAR 0 4
35848: PUSH
35849: LD_INT 5
35851: PPUSH
35852: CALL_OW 469
35856: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35857: LD_INT 35
35859: PPUSH
35860: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35864: LD_ADDR_VAR 0 4
35868: PUSH
35869: LD_INT 5
35871: PPUSH
35872: CALL_OW 469
35876: ST_TO_ADDR
// tmp := 100 ;
35877: LD_ADDR_VAR 0 3
35881: PUSH
35882: LD_INT 100
35884: ST_TO_ADDR
// if pos then
35885: LD_VAR 0 4
35889: IFFALSE 35929
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_INT 2
35898: PPUSH
35899: LD_VAR 0 4
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: LD_VAR 0 4
35912: PUSH
35913: LD_INT 2
35915: ARRAY
35916: PPUSH
35917: LD_INT 20
35919: PPUSH
35920: CALL 3722 0 4
35924: PUSH
35925: LD_INT 4
35927: ARRAY
35928: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35929: LD_VAR 0 4
35933: PUSH
35934: LD_EXP 14
35938: NOT
35939: AND
35940: PUSH
35941: LD_VAR 0 3
35945: PUSH
35946: LD_INT 10
35948: LESS
35949: AND
35950: IFFALSE 35857
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35952: LD_VAR 0 2
35956: PPUSH
35957: LD_VAR 0 4
35961: PUSH
35962: LD_INT 1
35964: ARRAY
35965: PPUSH
35966: LD_VAR 0 4
35970: PUSH
35971: LD_INT 2
35973: ARRAY
35974: PPUSH
35975: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_INT 198
35986: PPUSH
35987: LD_INT 113
35989: PPUSH
35990: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_INT 124
36001: PPUSH
36002: LD_INT 7
36004: PPUSH
36005: CALL_OW 171
// end ;
36009: PPOPN 4
36011: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
36012: LD_EXP 6
36016: IFFALSE 38561
36018: GO 36020
36020: DISABLE
36021: LD_INT 0
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
36031: LD_ADDR_VAR 0 4
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: LD_INT 6
36041: PUSH
36042: LD_INT 7
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: PUSH
36050: LD_OWVAR 67
36054: ARRAY
36055: ST_TO_ADDR
// coords := [ ] ;
36056: LD_ADDR_VAR 0 5
36060: PUSH
36061: EMPTY
36062: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
36063: LD_ADDR_VAR 0 6
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
36110: LD_INT 1
36112: PPUSH
36113: LD_INT 14
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 28
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 14
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 25
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 14
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 28
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 14
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 29
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: PPUSH
36191: CALL 55114 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
36195: LD_INT 21000
36197: PUSH
36198: LD_INT 19600
36200: PUSH
36201: LD_INT 18900
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: LD_OWVAR 67
36213: ARRAY
36214: PPUSH
36215: CALL_OW 67
// InitHc ;
36219: CALL_OW 19
// InitUc ;
36223: CALL_OW 18
// uc_side := 2 ;
36227: LD_ADDR_OWVAR 20
36231: PUSH
36232: LD_INT 2
36234: ST_TO_ADDR
// uc_nation := 2 ;
36235: LD_ADDR_OWVAR 21
36239: PUSH
36240: LD_INT 2
36242: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
36243: LD_ADDR_VAR 0 3
36247: PUSH
36248: EMPTY
36249: PUSH
36250: EMPTY
36251: PUSH
36252: EMPTY
36253: PUSH
36254: EMPTY
36255: PUSH
36256: EMPTY
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: LD_INT 1
36277: PPUSH
36278: LD_EXP 61
36282: PUSH
36283: LD_INT 1
36285: ARRAY
36286: PUSH
36287: LD_INT 34
36289: PUSH
36290: LD_INT 32
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PPUSH
36297: CALL_OW 69
36301: DIFF
36302: PPUSH
36303: CALL_OW 1
36307: ST_TO_ADDR
// for i = 1 to Difficulty do
36308: LD_ADDR_VAR 0 1
36312: PUSH
36313: DOUBLE
36314: LD_INT 1
36316: DEC
36317: ST_TO_ADDR
36318: LD_OWVAR 67
36322: PUSH
36323: FOR_TO
36324: IFFALSE 36446
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36326: LD_INT 13
36328: PPUSH
36329: LD_INT 3
36331: PPUSH
36332: LD_INT 5
36334: PPUSH
36335: LD_INT 29
36337: PPUSH
36338: LD_INT 100
36340: PPUSH
36341: CALL 2042 0 5
// un := CreateVehicle ;
36345: LD_ADDR_VAR 0 2
36349: PUSH
36350: CALL_OW 45
36354: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36355: LD_ADDR_VAR 0 3
36359: PUSH
36360: LD_VAR 0 3
36364: PPUSH
36365: LD_INT 1
36367: PUSH
36368: LD_VAR 0 3
36372: PUSH
36373: LD_INT 1
36375: ARRAY
36376: PUSH
36377: LD_INT 1
36379: PLUS
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PPUSH
36385: LD_VAR 0 2
36389: PPUSH
36390: CALL 3228 0 3
36394: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36395: LD_VAR 0 2
36399: PPUSH
36400: LD_INT 3
36402: PPUSH
36403: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36407: LD_VAR 0 2
36411: PPUSH
36412: LD_INT 16
36414: PPUSH
36415: LD_INT 0
36417: PPUSH
36418: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36422: LD_VAR 0 2
36426: PPUSH
36427: LD_INT 51
36429: PPUSH
36430: LD_INT 10
36432: PPUSH
36433: CALL_OW 111
// wait ( 0 0$2 ) ;
36437: LD_INT 70
36439: PPUSH
36440: CALL_OW 67
// end ;
36444: GO 36323
36446: POP
36447: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36448: LD_ADDR_VAR 0 5
36452: PUSH
36453: LD_INT 51
36455: PUSH
36456: LD_INT 24
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 75
36465: PUSH
36466: LD_INT 90
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36477: LD_INT 1
36479: PPUSH
36480: LD_VAR 0 3
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PPUSH
36489: LD_VAR 0 5
36493: PPUSH
36494: LD_VAR 0 6
36498: PPUSH
36499: CALL 55210 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36503: LD_ADDR_VAR 0 1
36507: PUSH
36508: DOUBLE
36509: LD_INT 1
36511: DEC
36512: ST_TO_ADDR
36513: LD_INT 2
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: PUSH
36527: LD_OWVAR 67
36531: ARRAY
36532: PUSH
36533: FOR_TO
36534: IFFALSE 36618
// begin PrepareHuman ( false , 17 , skill ) ;
36536: LD_INT 0
36538: PPUSH
36539: LD_INT 17
36541: PPUSH
36542: LD_VAR 0 4
36546: PPUSH
36547: CALL_OW 380
// un := CreateHuman ;
36551: LD_ADDR_VAR 0 2
36555: PUSH
36556: CALL_OW 44
36560: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_VAR 0 3
36570: PPUSH
36571: LD_INT 2
36573: PUSH
36574: LD_VAR 0 3
36578: PUSH
36579: LD_INT 2
36581: ARRAY
36582: PUSH
36583: LD_INT 1
36585: PLUS
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PPUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: CALL 3228 0 3
36600: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36601: LD_VAR 0 2
36605: PPUSH
36606: LD_INT 13
36608: PPUSH
36609: LD_INT 0
36611: PPUSH
36612: CALL_OW 49
// end ;
36616: GO 36533
36618: POP
36619: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36620: LD_ADDR_VAR 0 1
36624: PUSH
36625: DOUBLE
36626: LD_INT 1
36628: DEC
36629: ST_TO_ADDR
36630: LD_INT 2
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: PUSH
36644: LD_OWVAR 67
36648: ARRAY
36649: PUSH
36650: FOR_TO
36651: IFFALSE 36754
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36653: LD_INT 0
36655: PPUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 8
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PPUSH
36669: LD_INT 2
36671: PPUSH
36672: CALL_OW 12
36676: ARRAY
36677: PPUSH
36678: LD_VAR 0 4
36682: PPUSH
36683: CALL_OW 380
// un := CreateHuman ;
36687: LD_ADDR_VAR 0 2
36691: PUSH
36692: CALL_OW 44
36696: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_VAR 0 3
36706: PPUSH
36707: LD_INT 2
36709: PUSH
36710: LD_VAR 0 3
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: PUSH
36719: LD_INT 1
36721: PLUS
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PPUSH
36727: LD_VAR 0 2
36731: PPUSH
36732: CALL 3228 0 3
36736: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36737: LD_VAR 0 2
36741: PPUSH
36742: LD_INT 13
36744: PPUSH
36745: LD_INT 0
36747: PPUSH
36748: CALL_OW 49
// end ;
36752: GO 36650
36754: POP
36755: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: LD_INT 67
36763: PUSH
36764: LD_INT 112
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 85
36773: PUSH
36774: LD_INT 130
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36785: LD_INT 2
36787: PPUSH
36788: LD_VAR 0 3
36792: PUSH
36793: LD_INT 2
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 5
36801: PPUSH
36802: LD_VAR 0 6
36806: PPUSH
36807: CALL 55210 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36811: LD_ADDR_VAR 0 1
36815: PUSH
36816: DOUBLE
36817: LD_INT 1
36819: DEC
36820: ST_TO_ADDR
36821: LD_INT 1
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: PUSH
36835: LD_OWVAR 67
36839: ARRAY
36840: PUSH
36841: FOR_TO
36842: IFFALSE 36926
// begin PrepareHuman ( false , 17 , skill ) ;
36844: LD_INT 0
36846: PPUSH
36847: LD_INT 17
36849: PPUSH
36850: LD_VAR 0 4
36854: PPUSH
36855: CALL_OW 380
// un := CreateHuman ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: CALL_OW 44
36868: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36869: LD_ADDR_VAR 0 3
36873: PUSH
36874: LD_VAR 0 3
36878: PPUSH
36879: LD_INT 3
36881: PUSH
36882: LD_VAR 0 3
36886: PUSH
36887: LD_INT 3
36889: ARRAY
36890: PUSH
36891: LD_INT 1
36893: PLUS
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PPUSH
36899: LD_VAR 0 2
36903: PPUSH
36904: CALL 3228 0 3
36908: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36909: LD_VAR 0 2
36913: PPUSH
36914: LD_INT 14
36916: PPUSH
36917: LD_INT 0
36919: PPUSH
36920: CALL_OW 49
// end ;
36924: GO 36841
36926: POP
36927: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36928: LD_ADDR_VAR 0 5
36932: PUSH
36933: LD_INT 148
36935: PUSH
36936: LD_INT 158
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 148
36945: PUSH
36946: LD_INT 158
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36957: LD_INT 3
36959: PPUSH
36960: LD_VAR 0 3
36964: PUSH
36965: LD_INT 3
36967: ARRAY
36968: PPUSH
36969: LD_VAR 0 5
36973: PPUSH
36974: LD_VAR 0 6
36978: PPUSH
36979: CALL 55210 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36983: LD_ADDR_VAR 0 1
36987: PUSH
36988: DOUBLE
36989: LD_INT 1
36991: DEC
36992: ST_TO_ADDR
36993: LD_INT 3
36995: PUSH
36996: LD_INT 4
36998: PUSH
36999: LD_INT 4
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_OWVAR 67
37011: ARRAY
37012: PUSH
37013: FOR_TO
37014: IFFALSE 37222
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
37016: LD_INT 14
37018: PPUSH
37019: LD_INT 3
37021: PPUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PPUSH
37035: LD_INT 2
37037: PPUSH
37038: CALL_OW 12
37042: ARRAY
37043: PPUSH
37044: LD_INT 27
37046: PUSH
37047: LD_INT 26
37049: PUSH
37050: LD_INT 28
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: PPUSH
37061: LD_INT 3
37063: PPUSH
37064: CALL_OW 12
37068: ARRAY
37069: PPUSH
37070: LD_INT 100
37072: PPUSH
37073: CALL 2042 0 5
// un := CreateVehicle ;
37077: LD_ADDR_VAR 0 2
37081: PUSH
37082: CALL_OW 45
37086: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
37087: LD_ADDR_VAR 0 3
37091: PUSH
37092: LD_VAR 0 3
37096: PPUSH
37097: LD_INT 4
37099: PUSH
37100: LD_VAR 0 3
37104: PUSH
37105: LD_INT 4
37107: ARRAY
37108: PUSH
37109: LD_INT 1
37111: PLUS
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PPUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL 3228 0 3
37126: ST_TO_ADDR
// SetDir ( un , 5 ) ;
37127: LD_VAR 0 2
37131: PPUSH
37132: LD_INT 5
37134: PPUSH
37135: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_INT 15
37146: PPUSH
37147: LD_INT 0
37149: PPUSH
37150: CALL_OW 49
// if GetControl ( un ) = control_manual then
37154: LD_VAR 0 2
37158: PPUSH
37159: CALL_OW 263
37163: PUSH
37164: LD_INT 1
37166: EQUAL
37167: IFFALSE 37198
// begin PrepareHuman ( false , 3 , skill ) ;
37169: LD_INT 0
37171: PPUSH
37172: LD_INT 3
37174: PPUSH
37175: LD_VAR 0 4
37179: PPUSH
37180: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
37184: CALL_OW 44
37188: PPUSH
37189: LD_VAR 0 2
37193: PPUSH
37194: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
37198: LD_VAR 0 2
37202: PPUSH
37203: LD_INT 179
37205: PPUSH
37206: LD_INT 135
37208: PPUSH
37209: CALL_OW 111
// wait ( 0 0$2 ) ;
37213: LD_INT 70
37215: PPUSH
37216: CALL_OW 67
// end ;
37220: GO 37013
37222: POP
37223: POP
// vc_chassis := 15 ;
37224: LD_ADDR_OWVAR 37
37228: PUSH
37229: LD_INT 15
37231: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_VAR 0 3
37241: PPUSH
37242: LD_INT 4
37244: PUSH
37245: LD_VAR 0 3
37249: PUSH
37250: LD_INT 4
37252: ARRAY
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: CALL_OW 45
37266: PPUSH
37267: CALL 3228 0 3
37271: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37272: LD_VAR 0 3
37276: PUSH
37277: LD_INT 4
37279: ARRAY
37280: PUSH
37281: LD_VAR 0 3
37285: PUSH
37286: LD_INT 4
37288: ARRAY
37289: ARRAY
37290: PPUSH
37291: LD_INT 15
37293: PPUSH
37294: LD_INT 0
37296: PPUSH
37297: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37301: LD_INT 0
37303: PPUSH
37304: LD_INT 11
37306: PPUSH
37307: LD_VAR 0 4
37311: PPUSH
37312: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_VAR 0 3
37325: PPUSH
37326: LD_INT 4
37328: PUSH
37329: LD_VAR 0 3
37333: PUSH
37334: LD_INT 4
37336: ARRAY
37337: PUSH
37338: LD_INT 1
37340: PLUS
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PPUSH
37346: CALL_OW 44
37350: PPUSH
37351: CALL 3228 0 3
37355: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37356: LD_VAR 0 3
37360: PUSH
37361: LD_INT 4
37363: ARRAY
37364: PUSH
37365: LD_VAR 0 3
37369: PUSH
37370: LD_INT 4
37372: ARRAY
37373: ARRAY
37374: PPUSH
37375: LD_VAR 0 3
37379: PUSH
37380: LD_INT 4
37382: ARRAY
37383: PUSH
37384: LD_VAR 0 3
37388: PUSH
37389: LD_INT 4
37391: ARRAY
37392: PUSH
37393: LD_INT 1
37395: MINUS
37396: ARRAY
37397: PPUSH
37398: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37402: LD_ADDR_VAR 0 5
37406: PUSH
37407: LD_INT 148
37409: PUSH
37410: LD_INT 140
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37420: LD_INT 1
37422: PPUSH
37423: LD_VAR 0 3
37427: PUSH
37428: LD_INT 4
37430: ARRAY
37431: PPUSH
37432: LD_VAR 0 5
37436: PPUSH
37437: LD_VAR 0 6
37441: PPUSH
37442: CALL 55210 0 4
// if gensher_active then
37446: LD_EXP 18
37450: IFFALSE 37803
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37452: LD_EXP 42
37456: PPUSH
37457: LD_STRING D10-Diet-1
37459: PPUSH
37460: CALL_OW 94
// for i = 1 to 2 do
37464: LD_ADDR_VAR 0 1
37468: PUSH
37469: DOUBLE
37470: LD_INT 1
37472: DEC
37473: ST_TO_ADDR
37474: LD_INT 2
37476: PUSH
37477: FOR_TO
37478: IFFALSE 37600
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37480: LD_INT 13
37482: PPUSH
37483: LD_INT 3
37485: PPUSH
37486: LD_INT 5
37488: PPUSH
37489: LD_INT 29
37491: PPUSH
37492: LD_INT 100
37494: PPUSH
37495: CALL 2042 0 5
// un := CreateVehicle ;
37499: LD_ADDR_VAR 0 2
37503: PUSH
37504: CALL_OW 45
37508: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37509: LD_ADDR_VAR 0 3
37513: PUSH
37514: LD_VAR 0 3
37518: PPUSH
37519: LD_INT 5
37521: PUSH
37522: LD_VAR 0 3
37526: PUSH
37527: LD_INT 5
37529: ARRAY
37530: PUSH
37531: LD_INT 1
37533: PLUS
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: LD_VAR 0 2
37543: PPUSH
37544: CALL 3228 0 3
37548: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37549: LD_VAR 0 2
37553: PPUSH
37554: LD_INT 0
37556: PPUSH
37557: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37561: LD_VAR 0 2
37565: PPUSH
37566: LD_INT 23
37568: PPUSH
37569: LD_INT 0
37571: PPUSH
37572: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37576: LD_VAR 0 2
37580: PPUSH
37581: LD_INT 85
37583: PPUSH
37584: LD_INT 152
37586: PPUSH
37587: CALL_OW 111
// wait ( 0 0$2 ) ;
37591: LD_INT 70
37593: PPUSH
37594: CALL_OW 67
// end ;
37598: GO 37477
37600: POP
37601: POP
// for i = 1 to 3 do
37602: LD_ADDR_VAR 0 1
37606: PUSH
37607: DOUBLE
37608: LD_INT 1
37610: DEC
37611: ST_TO_ADDR
37612: LD_INT 3
37614: PUSH
37615: FOR_TO
37616: IFFALSE 37757
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37618: LD_INT 14
37620: PPUSH
37621: LD_INT 3
37623: PPUSH
37624: LD_INT 5
37626: PPUSH
37627: LD_INT 27
37629: PUSH
37630: LD_INT 28
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PPUSH
37640: LD_INT 2
37642: PPUSH
37643: CALL_OW 12
37647: ARRAY
37648: PPUSH
37649: LD_INT 100
37651: PPUSH
37652: CALL 2042 0 5
// un := CreateVehicle ;
37656: LD_ADDR_VAR 0 2
37660: PUSH
37661: CALL_OW 45
37665: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_VAR 0 3
37675: PPUSH
37676: LD_INT 5
37678: PUSH
37679: LD_VAR 0 3
37683: PUSH
37684: LD_INT 5
37686: ARRAY
37687: PUSH
37688: LD_INT 1
37690: PLUS
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PPUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: CALL 3228 0 3
37705: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37706: LD_VAR 0 2
37710: PPUSH
37711: LD_INT 0
37713: PPUSH
37714: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37718: LD_VAR 0 2
37722: PPUSH
37723: LD_INT 23
37725: PPUSH
37726: LD_INT 0
37728: PPUSH
37729: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37733: LD_VAR 0 2
37737: PPUSH
37738: LD_INT 85
37740: PPUSH
37741: LD_INT 152
37743: PPUSH
37744: CALL_OW 111
// wait ( 0 0$2 ) ;
37748: LD_INT 70
37750: PPUSH
37751: CALL_OW 67
// end ;
37755: GO 37615
37757: POP
37758: POP
// coords := [ [ 97 , 143 ] ] ;
37759: LD_ADDR_VAR 0 5
37763: PUSH
37764: LD_INT 97
37766: PUSH
37767: LD_INT 143
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: EMPTY
37775: LIST
37776: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37777: LD_INT 1
37779: PPUSH
37780: LD_VAR 0 3
37784: PUSH
37785: LD_INT 5
37787: ARRAY
37788: PPUSH
37789: LD_VAR 0 5
37793: PPUSH
37794: LD_VAR 0 6
37798: PPUSH
37799: CALL 55210 0 4
// end ; Wait ( 10 10$00 ) ;
37803: LD_INT 21000
37805: PPUSH
37806: CALL_OW 67
// tmp := [ ] ;
37810: LD_ADDR_VAR 0 3
37814: PUSH
37815: EMPTY
37816: ST_TO_ADDR
// w := 1 ;
37817: LD_ADDR_VAR 0 7
37821: PUSH
37822: LD_INT 1
37824: ST_TO_ADDR
// repeat tmp := [ ] ;
37825: LD_ADDR_VAR 0 3
37829: PUSH
37830: EMPTY
37831: ST_TO_ADDR
// if w mod 4 = 0 then
37832: LD_VAR 0 7
37836: PUSH
37837: LD_INT 4
37839: MOD
37840: PUSH
37841: LD_INT 0
37843: EQUAL
37844: IFFALSE 37931
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37846: LD_ADDR_VAR 0 8
37850: PUSH
37851: LD_INT 11
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 24
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 11
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 24
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 11
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 24
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 11
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: LD_INT 24
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: ST_TO_ADDR
37929: GO 38033
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37931: LD_ADDR_VAR 0 8
37935: PUSH
37936: LD_INT 14
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: LD_INT 28
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 14
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 25
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 14
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 28
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 14
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: LD_INT 29
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 11
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 24
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// if w mod 3 = 0 then
38033: LD_VAR 0 7
38037: PUSH
38038: LD_INT 3
38040: MOD
38041: PUSH
38042: LD_INT 0
38044: EQUAL
38045: IFFALSE 38121
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
38047: LD_ADDR_VAR 0 8
38051: PUSH
38052: LD_VAR 0 8
38056: PPUSH
38057: LD_INT 1
38059: PUSH
38060: LD_VAR 0 8
38064: PUSH
38065: LD_VAR 0 1
38069: ARRAY
38070: PUSH
38071: LD_INT 1
38073: PLUS
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PPUSH
38079: LD_INT 14
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 25
38090: PUSH
38091: LD_INT 28
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PPUSH
38101: LD_INT 2
38103: PPUSH
38104: CALL_OW 12
38108: ARRAY
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: PPUSH
38116: CALL 3228 0 3
38120: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
38121: LD_INT 1
38123: PPUSH
38124: LD_VAR 0 8
38128: PPUSH
38129: CALL 55114 0 2
// if GetSide ( ar_dep_w ) = 2 then
38133: LD_INT 45
38135: PPUSH
38136: CALL_OW 255
38140: PUSH
38141: LD_INT 2
38143: EQUAL
38144: IFFALSE 38229
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
38146: LD_ADDR_VAR 0 8
38150: PUSH
38151: LD_INT 14
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 28
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 14
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 27
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 14
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: LD_INT 27
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
38210: LD_INT 2
38212: PPUSH
38213: LD_VAR 0 8
38217: PPUSH
38218: CALL 55114 0 2
// wait ( 0 0$50 ) ;
38222: LD_INT 1750
38224: PPUSH
38225: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
38229: LD_INT 35
38231: PPUSH
38232: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
38236: LD_EXP 61
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PPUSH
38245: LD_INT 3
38247: PUSH
38248: LD_INT 34
38250: PUSH
38251: LD_INT 32
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PPUSH
38262: CALL_OW 72
38266: PUSH
38267: LD_INT 4
38269: GREATEREQUAL
38270: IFFALSE 38229
// wait ( 0 0$10 ) ;
38272: LD_INT 350
38274: PPUSH
38275: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38279: LD_ADDR_VAR 0 3
38283: PUSH
38284: LD_EXP 61
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: PPUSH
38293: LD_INT 3
38295: PUSH
38296: LD_INT 34
38298: PUSH
38299: LD_INT 32
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PPUSH
38310: CALL_OW 72
38314: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38315: LD_INT 100
38317: PPUSH
38318: CALL_OW 13
38322: PUSH
38323: LD_INT 50
38325: LESS
38326: IFFALSE 38359
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38328: LD_ADDR_VAR 0 5
38332: PUSH
38333: LD_INT 55
38335: PUSH
38336: LD_INT 7
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 75
38345: PUSH
38346: LD_INT 90
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: ST_TO_ADDR
38357: GO 38388
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38359: LD_ADDR_VAR 0 5
38363: PUSH
38364: LD_INT 128
38366: PUSH
38367: LD_INT 94
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 180
38376: PUSH
38377: LD_INT 135
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: ST_TO_ADDR
// if w mod 4 = 0 then
38388: LD_VAR 0 7
38392: PUSH
38393: LD_INT 4
38395: MOD
38396: PUSH
38397: LD_INT 0
38399: EQUAL
38400: IFFALSE 38431
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_INT 91
38409: PUSH
38410: LD_INT 58
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 117
38419: PUSH
38420: LD_INT 107
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38431: LD_INT 1
38433: PPUSH
38434: LD_VAR 0 3
38438: PPUSH
38439: LD_VAR 0 5
38443: PPUSH
38444: LD_VAR 0 6
38448: PPUSH
38449: CALL 55210 0 4
// if mc_vehicles [ 2 ] then
38453: LD_EXP 61
38457: PUSH
38458: LD_INT 2
38460: ARRAY
38461: IFFALSE 38497
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38463: LD_INT 2
38465: PPUSH
38466: LD_EXP 61
38470: PUSH
38471: LD_INT 2
38473: ARRAY
38474: PPUSH
38475: LD_INT 73
38477: PUSH
38478: LD_INT 115
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: PPUSH
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL 55210 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38497: LD_INT 19950
38499: PPUSH
38500: LD_INT 26250
38502: PPUSH
38503: CALL_OW 12
38507: PPUSH
38508: CALL_OW 67
// w := w + 1 ;
38512: LD_ADDR_VAR 0 7
38516: PUSH
38517: LD_VAR 0 7
38521: PUSH
38522: LD_INT 1
38524: PLUS
38525: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38526: LD_INT 94
38528: PPUSH
38529: CALL_OW 301
38533: PUSH
38534: LD_EXP 46
38538: PUSH
38539: LD_INT 1
38541: ARRAY
38542: PPUSH
38543: LD_INT 30
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PPUSH
38553: CALL_OW 72
38557: NOT
38558: OR
38559: IFFALSE 37825
// end ;
38561: PPOPN 8
38563: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38564: LD_INT 69
38566: IFFALSE 38941
38568: GO 38570
38570: DISABLE
38571: LD_INT 0
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
// begin enable ;
38577: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38578: LD_INT 35
38580: PPUSH
38581: LD_INT 1190
38583: PPUSH
38584: CALL_OW 12
38588: PPUSH
38589: CALL_OW 67
// tmp := [ ] ;
38593: LD_ADDR_VAR 0 2
38597: PUSH
38598: EMPTY
38599: ST_TO_ADDR
// uc_side := 8 ;
38600: LD_ADDR_OWVAR 20
38604: PUSH
38605: LD_INT 8
38607: ST_TO_ADDR
// uc_nation := 2 ;
38608: LD_ADDR_OWVAR 21
38612: PUSH
38613: LD_INT 2
38615: ST_TO_ADDR
// InitHc ;
38616: CALL_OW 19
// for i = 1 to 3 do
38620: LD_ADDR_VAR 0 1
38624: PUSH
38625: DOUBLE
38626: LD_INT 1
38628: DEC
38629: ST_TO_ADDR
38630: LD_INT 3
38632: PUSH
38633: FOR_TO
38634: IFFALSE 38761
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38636: LD_INT 13
38638: PUSH
38639: LD_INT 14
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PPUSH
38649: LD_INT 2
38651: PPUSH
38652: CALL_OW 12
38656: ARRAY
38657: PPUSH
38658: LD_INT 3
38660: PPUSH
38661: LD_INT 5
38663: PPUSH
38664: LD_INT 27
38666: PUSH
38667: LD_INT 28
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PPUSH
38677: LD_INT 2
38679: PPUSH
38680: CALL_OW 12
38684: ARRAY
38685: PPUSH
38686: LD_INT 100
38688: PPUSH
38689: CALL 2042 0 5
// un := CreateVehicle ;
38693: LD_ADDR_VAR 0 3
38697: PUSH
38698: CALL_OW 45
38702: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38703: LD_VAR 0 3
38707: PPUSH
38708: LD_INT 4
38710: PPUSH
38711: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38715: LD_VAR 0 3
38719: PPUSH
38720: LD_INT 15
38722: PPUSH
38723: LD_INT 0
38725: PPUSH
38726: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38730: LD_ADDR_VAR 0 2
38734: PUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 1
38747: PLUS
38748: PPUSH
38749: LD_VAR 0 3
38753: PPUSH
38754: CALL_OW 1
38758: ST_TO_ADDR
// end ;
38759: GO 38633
38761: POP
38762: POP
// for i = 1 to 4 do
38763: LD_ADDR_VAR 0 1
38767: PUSH
38768: DOUBLE
38769: LD_INT 1
38771: DEC
38772: ST_TO_ADDR
38773: LD_INT 4
38775: PUSH
38776: FOR_TO
38777: IFFALSE 38856
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38779: LD_INT 0
38781: PPUSH
38782: LD_INT 1
38784: PPUSH
38785: LD_INT 4
38787: PPUSH
38788: CALL_OW 12
38792: PPUSH
38793: LD_INT 6
38795: PPUSH
38796: CALL_OW 380
// un := CreateHuman ;
38800: LD_ADDR_VAR 0 3
38804: PUSH
38805: CALL_OW 44
38809: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38810: LD_VAR 0 3
38814: PPUSH
38815: LD_INT 15
38817: PPUSH
38818: LD_INT 0
38820: PPUSH
38821: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38825: LD_ADDR_VAR 0 2
38829: PUSH
38830: LD_VAR 0 2
38834: PPUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 1
38842: PLUS
38843: PPUSH
38844: LD_VAR 0 3
38848: PPUSH
38849: CALL_OW 1
38853: ST_TO_ADDR
// end ;
38854: GO 38776
38856: POP
38857: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_INT 210
38865: PPUSH
38866: LD_INT 177
38868: PPUSH
38869: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38873: LD_ADDR_VAR 0 4
38877: PUSH
38878: LD_INT 10
38880: PPUSH
38881: LD_INT 22
38883: PUSH
38884: LD_INT 8
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PPUSH
38891: CALL_OW 70
38895: ST_TO_ADDR
// if x then
38896: LD_VAR 0 4
38900: IFFALSE 38928
// for i in x do
38902: LD_ADDR_VAR 0 1
38906: PUSH
38907: LD_VAR 0 4
38911: PUSH
38912: FOR_IN
38913: IFFALSE 38926
// RemoveUnit ( i ) ;
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 64
38924: GO 38912
38926: POP
38927: POP
// wait ( 0 0$3 ) ;
38928: LD_INT 105
38930: PPUSH
38931: CALL_OW 67
// until tmp ;
38935: LD_VAR 0 2
38939: IFFALSE 38858
// end ; end_of_file
38941: PPOPN 4
38943: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38944: LD_INT 0
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// InGameOn ;
38952: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38956: LD_EXP 19
38960: PPUSH
38961: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38965: LD_ADDR_VAR 0 2
38969: PUSH
38970: LD_INT 22
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 25
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PPUSH
38994: CALL_OW 69
38998: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
38999: LD_ADDR_VAR 0 4
39003: PUSH
39004: LD_INT 22
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 34
39016: PUSH
39017: LD_INT 11
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PPUSH
39028: CALL_OW 69
39032: PUSH
39033: LD_INT 1
39035: ARRAY
39036: ST_TO_ADDR
// for i = 1 to tmp do
39037: LD_ADDR_VAR 0 6
39041: PUSH
39042: DOUBLE
39043: LD_INT 1
39045: DEC
39046: ST_TO_ADDR
39047: LD_VAR 0 2
39051: PUSH
39052: FOR_TO
39053: IFFALSE 39100
// begin if i = 5 then
39055: LD_VAR 0 6
39059: PUSH
39060: LD_INT 5
39062: EQUAL
39063: IFFALSE 39067
// break ;
39065: GO 39100
// sols := Replace ( sols , i , tmp [ i ] ) ;
39067: LD_ADDR_VAR 0 5
39071: PUSH
39072: LD_VAR 0 5
39076: PPUSH
39077: LD_VAR 0 6
39081: PPUSH
39082: LD_VAR 0 2
39086: PUSH
39087: LD_VAR 0 6
39091: ARRAY
39092: PPUSH
39093: CALL_OW 1
39097: ST_TO_ADDR
// end ;
39098: GO 39052
39100: POP
39101: POP
// tmp := ar_force_tmp ;
39102: LD_ADDR_VAR 0 2
39106: PUSH
39107: LD_EXP 37
39111: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
39112: LD_VAR 0 2
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PPUSH
39121: LD_INT 108
39123: PPUSH
39124: LD_INT 139
39126: PPUSH
39127: LD_INT 0
39129: PPUSH
39130: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
39134: LD_VAR 0 2
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: LD_EXP 19
39147: PPUSH
39148: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 2
39159: ARRAY
39160: PPUSH
39161: LD_INT 114
39163: PPUSH
39164: LD_INT 132
39166: PPUSH
39167: LD_INT 0
39169: PPUSH
39170: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 3
39181: ARRAY
39182: PPUSH
39183: LD_INT 115
39185: PPUSH
39186: LD_INT 132
39188: PPUSH
39189: LD_INT 0
39191: PPUSH
39192: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 2
39203: ARRAY
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: LD_INT 3
39212: ARRAY
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PPUSH
39218: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
39222: LD_VAR 0 4
39226: PPUSH
39227: LD_INT 83
39229: PPUSH
39230: LD_INT 123
39232: PPUSH
39233: CALL_OW 111
// Wait ( 0 0$01 ) ;
39237: LD_INT 35
39239: PPUSH
39240: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
39244: LD_INT 90
39246: PPUSH
39247: LD_INT 144
39249: PPUSH
39250: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39254: LD_VAR 0 5
39258: PPUSH
39259: LD_INT 88
39261: PPUSH
39262: LD_INT 129
39264: PPUSH
39265: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 92
39276: PUSH
39277: LD_INT 131
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 88
39286: PUSH
39287: LD_INT 127
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 91
39296: PUSH
39297: LD_INT 132
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 92
39306: PUSH
39307: LD_INT 134
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// for i = 1 to sols do
39320: LD_ADDR_VAR 0 6
39324: PUSH
39325: DOUBLE
39326: LD_INT 1
39328: DEC
39329: ST_TO_ADDR
39330: LD_VAR 0 5
39334: PUSH
39335: FOR_TO
39336: IFFALSE 39409
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39338: LD_VAR 0 5
39342: PUSH
39343: LD_VAR 0 6
39347: ARRAY
39348: PPUSH
39349: LD_VAR 0 3
39353: PUSH
39354: LD_VAR 0 6
39358: ARRAY
39359: PUSH
39360: LD_INT 1
39362: ARRAY
39363: PPUSH
39364: LD_VAR 0 3
39368: PUSH
39369: LD_VAR 0 6
39373: ARRAY
39374: PUSH
39375: LD_INT 2
39377: ARRAY
39378: PPUSH
39379: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39383: LD_VAR 0 5
39387: PUSH
39388: LD_VAR 0 6
39392: ARRAY
39393: PPUSH
39394: CALL_OW 197
// AddComHold ( sols ) ;
39398: LD_VAR 0 5
39402: PPUSH
39403: CALL_OW 200
// end ;
39407: GO 39335
39409: POP
39410: POP
// repeat wait ( 0 0$1 ) ;
39411: LD_INT 35
39413: PPUSH
39414: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39418: LD_VAR 0 5
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PPUSH
39427: LD_INT 92
39429: PPUSH
39430: LD_INT 131
39432: PPUSH
39433: CALL_OW 297
39437: PUSH
39438: LD_INT 4
39440: LESS
39441: IFFALSE 39411
// CenterOnXY ( 96 , 139 ) ;
39443: LD_INT 96
39445: PPUSH
39446: LD_INT 139
39448: PPUSH
39449: CALL_OW 84
// wait ( 0 0$3 ) ;
39453: LD_INT 105
39455: PPUSH
39456: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39460: LD_INT 111
39462: PPUSH
39463: LD_INT 135
39465: PPUSH
39466: LD_INT 1
39468: PPUSH
39469: LD_INT 25
39471: NEG
39472: PPUSH
39473: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39477: LD_VAR 0 2
39481: PUSH
39482: LD_INT 2
39484: ARRAY
39485: PPUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: PPUSH
39495: CALL_OW 250
39499: PUSH
39500: LD_INT 3
39502: PLUS
39503: PPUSH
39504: LD_VAR 0 2
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PPUSH
39513: CALL_OW 251
39517: PPUSH
39518: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39522: LD_VAR 0 2
39526: PUSH
39527: LD_INT 3
39529: ARRAY
39530: PPUSH
39531: LD_INT 7
39533: PPUSH
39534: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39538: LD_VAR 0 2
39542: PUSH
39543: LD_INT 2
39545: ARRAY
39546: PPUSH
39547: LD_VAR 0 2
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PPUSH
39556: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39560: LD_INT 35
39562: PPUSH
39563: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39567: LD_VAR 0 2
39571: PUSH
39572: LD_INT 1
39574: ARRAY
39575: PPUSH
39576: LD_VAR 0 2
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: PPUSH
39585: CALL_OW 296
39589: PUSH
39590: LD_INT 5
39592: LESS
39593: IFFALSE 39560
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39595: LD_VAR 0 2
39599: PUSH
39600: LD_INT 1
39602: ARRAY
39603: PPUSH
39604: LD_VAR 0 2
39608: PUSH
39609: LD_INT 2
39611: ARRAY
39612: PPUSH
39613: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39617: LD_VAR 0 2
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PPUSH
39626: LD_STRING D1a-Merc1-1
39628: PPUSH
39629: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39633: LD_VAR 0 2
39637: PUSH
39638: LD_INT 2
39640: ARRAY
39641: PPUSH
39642: LD_STRING D1a-FMerc2-1
39644: PPUSH
39645: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39649: LD_VAR 0 2
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 1
39665: ARRAY
39666: PPUSH
39667: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39671: LD_VAR 0 2
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: PPUSH
39680: LD_INT 500
39682: PPUSH
39683: CALL_OW 234
// wait ( 0 0$2 ) ;
39687: LD_INT 70
39689: PPUSH
39690: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39694: LD_VAR 0 2
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: PPUSH
39703: LD_INT 2
39705: PPUSH
39706: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39710: LD_INT 10
39712: PPUSH
39713: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39717: LD_VAR 0 2
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PPUSH
39726: LD_STRING D1a-Merc1-2
39728: PPUSH
39729: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39733: LD_INT 7
39735: PPUSH
39736: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39740: LD_VAR 0 2
39744: PUSH
39745: LD_INT 1
39747: ARRAY
39748: PPUSH
39749: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39753: LD_VAR 0 2
39757: PUSH
39758: LD_INT 2
39760: ARRAY
39761: PPUSH
39762: LD_INT 10
39764: PPUSH
39765: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39769: LD_VAR 0 2
39773: PUSH
39774: LD_INT 2
39776: ARRAY
39777: PPUSH
39778: LD_STRING D1a-FMerc2-2
39780: PPUSH
39781: CALL_OW 88
// wait ( 0 0$1 ) ;
39785: LD_INT 35
39787: PPUSH
39788: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39792: LD_INT 7
39794: PPUSH
39795: CALL_OW 85
// wait ( 0 0$2 ) ;
39799: LD_INT 70
39801: PPUSH
39802: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39806: LD_EXP 41
39810: PPUSH
39811: LD_STRING D1a-Saliba-1
39813: PPUSH
39814: CALL_OW 91
// KillUnit ( Saliba ) ;
39818: LD_EXP 41
39822: PPUSH
39823: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39827: LD_VAR 0 2
39831: PUSH
39832: LD_INT 3
39834: ARRAY
39835: PPUSH
39836: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39840: LD_EXP 19
39844: PPUSH
39845: CALL_OW 85
// wait ( 0 0$1 ) ;
39849: LD_INT 35
39851: PPUSH
39852: CALL_OW 67
// InGameOff ;
39856: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39860: LD_STRING M1
39862: PPUSH
39863: CALL_OW 337
// game_speed := 4 ;
39867: LD_ADDR_OWVAR 65
39871: PUSH
39872: LD_INT 4
39874: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39875: LD_INT 111
39877: PPUSH
39878: LD_INT 135
39880: PPUSH
39881: LD_INT 1
39883: PPUSH
39884: CALL_OW 331
// SaveForQuickRestart ;
39888: CALL_OW 22
// ar_run := true ;
39892: LD_ADDR_EXP 5
39896: PUSH
39897: LD_INT 1
39899: ST_TO_ADDR
// wait ( 0 0$45 ) ;
39900: LD_INT 1575
39902: PPUSH
39903: CALL_OW 67
// if GetSide ( ar_dep_s ) = 2 then
39907: LD_INT 7
39909: PPUSH
39910: CALL_OW 255
39914: PUSH
39915: LD_INT 2
39917: EQUAL
39918: IFFALSE 39930
// SetSide ( ar_dep_s , 1 ) ;
39920: LD_INT 7
39922: PPUSH
39923: LD_INT 1
39925: PPUSH
39926: CALL_OW 235
// end ;
39930: LD_VAR 0 1
39934: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39935: LD_EXP 5
39939: IFFALSE 40299
39941: GO 39943
39943: DISABLE
39944: LD_INT 0
39946: PPUSH
39947: PPUSH
39948: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
39949: LD_ADDR_VAR 0 2
39953: PUSH
39954: LD_EXP 37
39958: PUSH
39959: LD_EXP 34
39963: PPUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 21
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 21
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: PPUSH
39992: CALL_OW 72
39996: ADD
39997: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
39998: LD_VAR 0 2
40002: PPUSH
40003: LD_INT 5
40005: PPUSH
40006: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
40010: LD_INT 5
40012: PPUSH
40013: LD_INT 1
40015: PPUSH
40016: CALL_OW 343
// k := 1 ;
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// for i in tmp do
40028: LD_ADDR_VAR 0 1
40032: PUSH
40033: LD_VAR 0 2
40037: PUSH
40038: FOR_IN
40039: IFFALSE 40124
// begin if IsInUnit ( i ) then
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 310
40050: IFFALSE 40061
// ComExitBuilding ( i ) ;
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 122
// if GetClass ( i ) = 3 then
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 257
40070: PUSH
40071: LD_INT 3
40073: EQUAL
40074: IFFALSE 40110
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
40076: LD_VAR 0 1
40080: PPUSH
40081: LD_EXP 38
40085: PUSH
40086: LD_VAR 0 3
40090: ARRAY
40091: PPUSH
40092: CALL_OW 180
// k := k + 1 ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 3
40105: PUSH
40106: LD_INT 1
40108: PLUS
40109: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
40110: LD_VAR 0 1
40114: PPUSH
40115: LD_INT 10
40117: PPUSH
40118: CALL_OW 173
// end ;
40122: GO 40038
40124: POP
40125: POP
// ar_patrol := true ;
40126: LD_ADDR_EXP 7
40130: PUSH
40131: LD_INT 1
40133: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
40134: LD_INT 10
40136: PPUSH
40137: CALL_OW 67
// for i in tmp do
40141: LD_ADDR_VAR 0 1
40145: PUSH
40146: LD_VAR 0 2
40150: PUSH
40151: FOR_IN
40152: IFFALSE 40180
// if not HasTask ( i ) then
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 314
40163: NOT
40164: IFFALSE 40178
// ComMoveToArea ( i , escape_area ) ;
40166: LD_VAR 0 1
40170: PPUSH
40171: LD_INT 10
40173: PPUSH
40174: CALL_OW 113
40178: GO 40151
40180: POP
40181: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_VAR 0 2
40191: PPUSH
40192: LD_INT 95
40194: PUSH
40195: LD_INT 10
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PPUSH
40202: CALL_OW 72
40206: ST_TO_ADDR
// if k then
40207: LD_VAR 0 3
40211: IFFALSE 40280
// for i in k do
40213: LD_ADDR_VAR 0 1
40217: PUSH
40218: LD_VAR 0 3
40222: PUSH
40223: FOR_IN
40224: IFFALSE 40278
// begin if IsInUnit ( i ) then
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 310
40235: IFFALSE 40251
// RemoveUnit ( IsInUnit ( i ) ) ;
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 310
40246: PPUSH
40247: CALL_OW 64
// RemoveUnit ( i ) ;
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 64
// tmp := tmp diff i ;
40260: LD_ADDR_VAR 0 2
40264: PUSH
40265: LD_VAR 0 2
40269: PUSH
40270: LD_VAR 0 1
40274: DIFF
40275: ST_TO_ADDR
// end ;
40276: GO 40223
40278: POP
40279: POP
// until tmp = [ ] ;
40280: LD_VAR 0 2
40284: PUSH
40285: EMPTY
40286: EQUAL
40287: IFFALSE 40134
// ChangeSideFog ( 5 , 5 ) ;
40289: LD_INT 5
40291: PPUSH
40292: LD_INT 5
40294: PPUSH
40295: CALL_OW 343
// end ;
40299: PPOPN 3
40301: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40302: LD_EXP 7
40306: IFFALSE 40596
40308: GO 40310
40310: DISABLE
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
40315: PPUSH
// begin uc_side := 2 ;
40316: LD_ADDR_OWVAR 20
40320: PUSH
40321: LD_INT 2
40323: ST_TO_ADDR
// uc_nation := 2 ;
40324: LD_ADDR_OWVAR 21
40328: PUSH
40329: LD_INT 2
40331: ST_TO_ADDR
// InitHc ;
40332: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40336: LD_INT 1
40338: PPUSH
40339: LD_INT 1
40341: PPUSH
40342: LD_INT 6
40344: PPUSH
40345: CALL_OW 380
// un := CreateHuman ;
40349: LD_ADDR_VAR 0 2
40353: PUSH
40354: CALL_OW 44
40358: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40359: LD_INT 14
40361: PPUSH
40362: LD_INT 1
40364: PPUSH
40365: LD_INT 1
40367: PPUSH
40368: LD_INT 27
40370: PPUSH
40371: LD_INT 98
40373: PPUSH
40374: CALL 2042 0 5
// veh := CreateVehicle ;
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: CALL_OW 45
40387: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40388: LD_VAR 0 3
40392: PPUSH
40393: LD_INT 4
40395: PPUSH
40396: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40400: LD_VAR 0 3
40404: PPUSH
40405: LD_INT 179
40407: PPUSH
40408: LD_INT 135
40410: PPUSH
40411: LD_INT 0
40413: PPUSH
40414: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40418: LD_VAR 0 2
40422: PPUSH
40423: LD_VAR 0 3
40427: PPUSH
40428: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40432: LD_VAR 0 2
40436: PPUSH
40437: LD_INT 126
40439: PPUSH
40440: LD_INT 133
40442: PPUSH
40443: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40447: LD_INT 10
40449: PPUSH
40450: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40454: LD_INT 1
40456: PPUSH
40457: LD_VAR 0 3
40461: PPUSH
40462: CALL_OW 292
40466: PUSH
40467: LD_VAR 0 3
40471: PPUSH
40472: LD_INT 7
40474: PPUSH
40475: CALL_OW 296
40479: PUSH
40480: LD_INT 9
40482: LESS
40483: OR
40484: IFFALSE 40447
// ComHold ( veh ) ;
40486: LD_VAR 0 3
40490: PPUSH
40491: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40495: LD_VAR 0 2
40499: PPUSH
40500: LD_STRING D2aa-Ar1-1
40502: PPUSH
40503: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40507: LD_VAR 0 2
40511: PPUSH
40512: LD_INT 177
40514: PPUSH
40515: LD_INT 96
40517: PPUSH
40518: CALL_OW 111
// AddComExitVehicle ( un ) ;
40522: LD_VAR 0 2
40526: PPUSH
40527: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40531: LD_INT 35
40533: PPUSH
40534: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40538: LD_VAR 0 2
40542: PPUSH
40543: LD_INT 69
40545: PPUSH
40546: CALL_OW 296
40550: PUSH
40551: LD_INT 15
40553: LESS
40554: IFFALSE 40531
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40556: LD_ADDR_EXP 46
40560: PUSH
40561: LD_EXP 46
40565: PPUSH
40566: LD_INT 3
40568: PUSH
40569: LD_EXP 46
40573: PUSH
40574: LD_INT 3
40576: ARRAY
40577: PUSH
40578: LD_INT 1
40580: PLUS
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PPUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: CALL 3228 0 3
40595: ST_TO_ADDR
// end ;
40596: PPOPN 3
40598: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40599: LD_INT 7
40601: PPUSH
40602: CALL_OW 255
40606: PUSH
40607: LD_INT 1
40609: EQUAL
40610: PUSH
40611: LD_INT 7
40613: PPUSH
40614: CALL_OW 301
40618: OR
40619: IFFALSE 43043
40621: GO 40623
40623: DISABLE
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
40628: LD_ADDR_VAR 0 1
40632: PUSH
40633: LD_EXP 34
40637: PPUSH
40638: LD_INT 21
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PPUSH
40648: CALL_OW 72
40652: PUSH
40653: FOR_IN
40654: IFFALSE 40670
// SetSide ( i , 1 ) ;
40656: LD_VAR 0 1
40660: PPUSH
40661: LD_INT 1
40663: PPUSH
40664: CALL_OW 235
40668: GO 40653
40670: POP
40671: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40672: LD_ADDR_VAR 0 2
40676: PUSH
40677: LD_INT 46
40679: PUSH
40680: LD_INT 41
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 50
40689: PUSH
40690: LD_INT 25
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 57
40699: PUSH
40700: LD_INT 75
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 75
40709: PUSH
40710: LD_INT 89
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 51
40719: PUSH
40720: LD_INT 45
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 95
40729: PUSH
40730: LD_INT 95
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 84
40739: PUSH
40740: LD_INT 77
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 101
40749: PUSH
40750: LD_INT 76
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 118
40759: PUSH
40760: LD_INT 81
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 139
40769: PUSH
40770: LD_INT 97
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 129
40779: PUSH
40780: LD_INT 114
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 154
40789: PUSH
40790: LD_INT 111
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: ST_TO_ADDR
// base_captured := true ;
40811: LD_ADDR_EXP 6
40815: PUSH
40816: LD_INT 1
40818: ST_TO_ADDR
// DialogueOn ;
40819: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40823: LD_EXP 19
40827: PPUSH
40828: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40832: LD_EXP 19
40836: PPUSH
40837: LD_STRING D2-JMM-1
40839: PPUSH
40840: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40844: LD_EXP 28
40848: PPUSH
40849: LD_STRING D2-Pow-1
40851: PPUSH
40852: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40856: LD_EXP 19
40860: PPUSH
40861: LD_STRING D2-JMM-2
40863: PPUSH
40864: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40868: LD_EXP 28
40872: PPUSH
40873: LD_STRING D2-Pow-2
40875: PPUSH
40876: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40880: LD_EXP 19
40884: PPUSH
40885: LD_STRING D2-JMM-3
40887: PPUSH
40888: CALL_OW 88
// DialogueOff ;
40892: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40896: LD_STRING M2
40898: PPUSH
40899: CALL_OW 337
// Wait ( 0 0$2 ) ;
40903: LD_INT 70
40905: PPUSH
40906: CALL_OW 67
// if IsOk ( Gary ) then
40910: LD_EXP 30
40914: PPUSH
40915: CALL_OW 302
40919: IFFALSE 40933
// Say ( Gary , D2a-Gary-1 ) ;
40921: LD_EXP 30
40925: PPUSH
40926: LD_STRING D2a-Gary-1
40928: PPUSH
40929: CALL_OW 88
// if IsOk ( Bobby ) then
40933: LD_EXP 22
40937: PPUSH
40938: CALL_OW 302
40942: IFFALSE 40956
// Say ( Bobby , D2a-Bobby-1 ) ;
40944: LD_EXP 22
40948: PPUSH
40949: LD_STRING D2a-Bobby-1
40951: PPUSH
40952: CALL_OW 88
// if IsOk ( Cyrus ) then
40956: LD_EXP 23
40960: PPUSH
40961: CALL_OW 302
40965: IFFALSE 40979
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40967: LD_EXP 23
40971: PPUSH
40972: LD_STRING D2a-Cyrus-1
40974: PPUSH
40975: CALL_OW 88
// if IsOk ( Lisa ) then
40979: LD_EXP 20
40983: PPUSH
40984: CALL_OW 302
40988: IFFALSE 41002
// Say ( Lisa , D2a-Lisa-1 ) ;
40990: LD_EXP 20
40994: PPUSH
40995: LD_STRING D2a-Lisa-1
40997: PPUSH
40998: CALL_OW 88
// if IsOk ( Frank ) then
41002: LD_EXP 31
41006: PPUSH
41007: CALL_OW 302
41011: IFFALSE 41025
// Say ( Frank , D2a-Frank-1 ) ;
41013: LD_EXP 31
41017: PPUSH
41018: LD_STRING D2a-Frank-1
41020: PPUSH
41021: CALL_OW 88
// if IsOk ( Cornel ) then
41025: LD_EXP 29
41029: PPUSH
41030: CALL_OW 302
41034: IFFALSE 41048
// Say ( Cornel , D2a-Corn-1 ) ;
41036: LD_EXP 29
41040: PPUSH
41041: LD_STRING D2a-Corn-1
41043: PPUSH
41044: CALL_OW 88
// if IsOk ( Donaldson ) then
41048: LD_EXP 21
41052: PPUSH
41053: CALL_OW 302
41057: IFFALSE 41071
// Say ( Donaldson , D2a-Don-1 ) ;
41059: LD_EXP 21
41063: PPUSH
41064: LD_STRING D2a-Don-1
41066: PPUSH
41067: CALL_OW 88
// if IsOk ( Brown ) then
41071: LD_EXP 25
41075: PPUSH
41076: CALL_OW 302
41080: IFFALSE 41094
// Say ( Brown , D2a-Brown-1 ) ;
41082: LD_EXP 25
41086: PPUSH
41087: LD_STRING D2a-Brown-1
41089: PPUSH
41090: CALL_OW 88
// Wait ( 0 0$30 ) ;
41094: LD_INT 1050
41096: PPUSH
41097: CALL_OW 67
// if IsOk ( Frank ) then
41101: LD_EXP 31
41105: PPUSH
41106: CALL_OW 302
41110: IFFALSE 41376
// begin DialogueOn ;
41112: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
41116: LD_EXP 19
41120: PUSH
41121: LD_EXP 31
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PPUSH
41130: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
41134: LD_EXP 31
41138: PPUSH
41139: LD_STRING D3F-Frank-1
41141: PPUSH
41142: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
41146: LD_EXP 19
41150: PPUSH
41151: LD_STRING D3F-JMM-1
41153: PPUSH
41154: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
41158: LD_EXP 31
41162: PPUSH
41163: LD_STRING D3F-Frank-2
41165: PPUSH
41166: CALL_OW 88
// case Query ( QFrank ) of 1 :
41170: LD_STRING QFrank
41172: PPUSH
41173: CALL_OW 97
41177: PUSH
41178: LD_INT 1
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41186
41184: GO 41209
41186: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
41187: LD_EXP 19
41191: PPUSH
41192: LD_STRING D3Fa-JMM-1
41194: PPUSH
41195: CALL_OW 88
// us_scout := 1 ;
41199: LD_ADDR_EXP 8
41203: PUSH
41204: LD_INT 1
41206: ST_TO_ADDR
// end ; 2 :
41207: GO 41372
41209: LD_INT 2
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41217
41215: GO 41339
41217: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
41218: LD_EXP 19
41222: PPUSH
41223: LD_STRING D3Fb-JMM-1
41225: PPUSH
41226: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
41230: LD_EXP 31
41234: PPUSH
41235: LD_STRING D3Fb-Frank-1
41237: PPUSH
41238: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
41242: LD_STRING QFrank2
41244: PPUSH
41245: CALL_OW 97
41249: PUSH
41250: LD_INT 1
41252: DOUBLE
41253: EQUAL
41254: IFTRUE 41258
41256: GO 41305
41258: POP
// begin us_scout := 2 ;
41259: LD_ADDR_EXP 8
41263: PUSH
41264: LD_INT 2
41266: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
41267: LD_EXP 19
41271: PPUSH
41272: LD_STRING D3Fba-JMM-1
41274: PPUSH
41275: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
41279: LD_EXP 31
41283: PPUSH
41284: LD_STRING D3Fba-Frank-1
41286: PPUSH
41287: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
41291: LD_EXP 19
41295: PPUSH
41296: LD_STRING D3Fba-JMM-2
41298: PPUSH
41299: CALL_OW 88
// end ; 2 :
41303: GO 41337
41305: LD_INT 2
41307: DOUBLE
41308: EQUAL
41309: IFTRUE 41313
41311: GO 41336
41313: POP
// begin us_scout := 0 ;
41314: LD_ADDR_EXP 8
41318: PUSH
41319: LD_INT 0
41321: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
41322: LD_EXP 19
41326: PPUSH
41327: LD_STRING D3Fbb-JMM-1
41329: PPUSH
41330: CALL_OW 88
// end ; end ;
41334: GO 41337
41336: POP
// end ; 3 :
41337: GO 41372
41339: LD_INT 3
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41347
41345: GO 41371
41347: POP
// begin us_scout := - 1 ;
41348: LD_ADDR_EXP 8
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41357: LD_EXP 19
41361: PPUSH
41362: LD_STRING D3Fc-JMM-1
41364: PPUSH
41365: CALL_OW 88
// end ; end ;
41369: GO 41372
41371: POP
// DialogueOff ;
41372: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41376: LD_EXP 8
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: IN
41392: IFFALSE 41396
// exit ;
41394: GO 43043
// if us_scout in [ 1 , 2 ] then
41396: LD_EXP 8
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: IN
41411: IFFALSE 42110
// begin if IsInUnit ( Frank ) then
41413: LD_EXP 31
41417: PPUSH
41418: CALL_OW 310
41422: IFFALSE 41433
// ComExitBuilding ( Frank ) ;
41424: LD_EXP 31
41428: PPUSH
41429: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41433: LD_EXP 31
41437: PPUSH
41438: CALL_OW 311
41442: IFFALSE 41453
// ComExitVehicle ( Frank ) ;
41444: LD_EXP 31
41448: PPUSH
41449: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41453: LD_EXP 31
41457: PPUSH
41458: LD_INT 4
41460: PPUSH
41461: CALL_OW 235
// wait ( 0 0$1 ) ;
41465: LD_INT 35
41467: PPUSH
41468: CALL_OW 67
// if us_scout = 2 then
41472: LD_EXP 8
41476: PUSH
41477: LD_INT 2
41479: EQUAL
41480: IFFALSE 41848
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41482: LD_EXP 31
41486: PPUSH
41487: LD_INT 75
41489: PPUSH
41490: LD_INT 63
41492: PPUSH
41493: CALL_OW 111
// AddComHold ( Frank ) ;
41497: LD_EXP 31
41501: PPUSH
41502: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41506: LD_EXP 31
41510: PPUSH
41511: LD_INT 770
41513: PPUSH
41514: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41518: LD_EXP 31
41522: PPUSH
41523: LD_INT 100
41525: PPUSH
41526: LD_INT 75
41528: PPUSH
41529: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41533: LD_EXP 31
41537: PPUSH
41538: LD_INT 123
41540: PPUSH
41541: LD_INT 103
41543: PPUSH
41544: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41548: LD_EXP 31
41552: PPUSH
41553: LD_INT 138
41555: PPUSH
41556: LD_INT 108
41558: PPUSH
41559: CALL_OW 171
// AddComHold ( Frank ) ;
41563: LD_EXP 31
41567: PPUSH
41568: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41572: LD_INT 35
41574: PPUSH
41575: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41579: LD_EXP 31
41583: PPUSH
41584: LD_INT 138
41586: PPUSH
41587: LD_INT 108
41589: PPUSH
41590: CALL_OW 307
41594: IFFALSE 41572
// AddComMoveXY ( Frank , 125 , 132 ) ;
41596: LD_EXP 31
41600: PPUSH
41601: LD_INT 125
41603: PPUSH
41604: LD_INT 132
41606: PPUSH
41607: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41611: LD_INT 35
41613: PPUSH
41614: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41618: LD_INT 1
41620: PPUSH
41621: LD_EXP 31
41625: PPUSH
41626: CALL_OW 292
41630: PUSH
41631: LD_EXP 31
41635: PPUSH
41636: LD_INT 7
41638: PPUSH
41639: CALL_OW 296
41643: PUSH
41644: LD_INT 7
41646: LESS
41647: OR
41648: IFFALSE 41611
// DialogueOn ;
41650: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41654: LD_EXP 31
41658: PPUSH
41659: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41663: LD_INT 10
41665: PPUSH
41666: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41670: LD_EXP 19
41674: PPUSH
41675: LD_STRING D4Fa-JMM-1
41677: PPUSH
41678: CALL_OW 88
// for i in points do
41682: LD_ADDR_VAR 0 1
41686: PUSH
41687: LD_VAR 0 2
41691: PUSH
41692: FOR_IN
41693: IFFALSE 41751
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41695: LD_VAR 0 1
41699: PUSH
41700: LD_INT 1
41702: ARRAY
41703: PPUSH
41704: LD_VAR 0 1
41708: PUSH
41709: LD_INT 2
41711: ARRAY
41712: PPUSH
41713: LD_INT 1
41715: PPUSH
41716: LD_INT 20
41718: NEG
41719: PPUSH
41720: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41724: LD_VAR 0 1
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: PPUSH
41733: LD_VAR 0 1
41737: PUSH
41738: LD_INT 2
41740: ARRAY
41741: PPUSH
41742: LD_INT 1
41744: PPUSH
41745: CALL_OW 331
// end ;
41749: GO 41692
41751: POP
41752: POP
// dwait ( 0 0$0.5 ) ;
41753: LD_INT 18
41755: PPUSH
41756: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41760: LD_INT 42
41762: PPUSH
41763: LD_INT 27
41765: PPUSH
41766: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41770: LD_EXP 31
41774: PPUSH
41775: LD_STRING D4Fa-Frank-1
41777: PPUSH
41778: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41782: LD_INT 18
41784: PPUSH
41785: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41789: LD_EXP 19
41793: PPUSH
41794: LD_STRING D4Fa-JMM-2
41796: PPUSH
41797: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41801: LD_INT 118
41803: PPUSH
41804: LD_INT 80
41806: PPUSH
41807: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41811: LD_EXP 31
41815: PPUSH
41816: LD_STRING D4Fa-Frank-2
41818: PPUSH
41819: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41823: LD_INT 10
41825: PPUSH
41826: CALL_OW 68
// DialogueOff ;
41830: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41834: LD_EXP 31
41838: PPUSH
41839: LD_INT 1
41841: PPUSH
41842: CALL_OW 235
// end else
41846: GO 42110
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41848: LD_INT 2
41850: PPUSH
41851: LD_INT 4
41853: PPUSH
41854: LD_INT 2
41856: PPUSH
41857: LD_INT 1
41859: PPUSH
41860: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41864: LD_EXP 31
41868: PPUSH
41869: LD_INT 75
41871: PPUSH
41872: LD_INT 63
41874: PPUSH
41875: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41879: LD_EXP 31
41883: PPUSH
41884: LD_INT 175
41886: PPUSH
41887: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41891: LD_EXP 31
41895: PPUSH
41896: LD_INT 102
41898: PPUSH
41899: LD_INT 76
41901: PPUSH
41902: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41906: LD_EXP 31
41910: PPUSH
41911: LD_INT 108
41913: PPUSH
41914: LD_INT 70
41916: PPUSH
41917: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41921: LD_INT 35
41923: PPUSH
41924: CALL_OW 67
// until See ( 2 , Frank ) ;
41928: LD_INT 2
41930: PPUSH
41931: LD_EXP 31
41935: PPUSH
41936: CALL_OW 292
41940: IFFALSE 41921
// ComMoveXY ( Frank , 112 , 118 ) ;
41942: LD_EXP 31
41946: PPUSH
41947: LD_INT 112
41949: PPUSH
41950: LD_INT 118
41952: PPUSH
41953: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41957: LD_EXP 31
41961: PPUSH
41962: CALL_OW 256
41966: PUSH
41967: LD_INT 750
41969: GREATEREQUAL
41970: IFFALSE 41984
// SetLives ( Frank , 700 ) ;
41972: LD_EXP 31
41976: PPUSH
41977: LD_INT 700
41979: PPUSH
41980: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41984: LD_INT 35
41986: PPUSH
41987: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
41991: LD_INT 1
41993: PPUSH
41994: LD_EXP 31
41998: PPUSH
41999: CALL_OW 292
42003: PUSH
42004: LD_EXP 31
42008: PPUSH
42009: LD_INT 7
42011: PPUSH
42012: CALL_OW 296
42016: PUSH
42017: LD_INT 17
42019: LESS
42020: OR
42021: IFFALSE 41984
// DialogueOn ;
42023: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
42027: LD_EXP 31
42031: PPUSH
42032: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
42036: LD_EXP 31
42040: PPUSH
42041: LD_STRING D4Fb-Frank-1
42043: PPUSH
42044: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
42048: LD_EXP 19
42052: PPUSH
42053: LD_STRING D4Fb-JMM-1
42055: PPUSH
42056: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
42060: LD_INT 2
42062: PPUSH
42063: LD_STRING D4Fb-FSci1-1
42065: PPUSH
42066: CALL 2278 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
42070: LD_EXP 31
42074: PPUSH
42075: LD_STRING D4Fb-Frank-2
42077: PPUSH
42078: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
42082: LD_EXP 19
42086: PPUSH
42087: LD_STRING D4Fb-JMM-2
42089: PPUSH
42090: CALL_OW 88
// DialogueOff ;
42094: CALL_OW 7
// SetSide ( Frank , 1 ) ;
42098: LD_EXP 31
42102: PPUSH
42103: LD_INT 1
42105: PPUSH
42106: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
42110: LD_EXP 32
42114: PPUSH
42115: CALL_OW 302
42119: PUSH
42120: LD_EXP 31
42124: NOT
42125: AND
42126: IFFALSE 42274
// begin DialogueOn ;
42128: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
42132: LD_EXP 19
42136: PUSH
42137: LD_EXP 32
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PPUSH
42146: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
42150: LD_EXP 32
42154: PPUSH
42155: LD_STRING D3Y-Yam-1
42157: PPUSH
42158: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
42162: LD_EXP 19
42166: PPUSH
42167: LD_STRING D3Y-JMM-1
42169: PPUSH
42170: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
42174: LD_EXP 32
42178: PPUSH
42179: LD_STRING D3Y-Yam-2
42181: PPUSH
42182: CALL_OW 88
// case Query ( QYamoko ) of 1 :
42186: LD_STRING QYamoko
42188: PPUSH
42189: CALL_OW 97
42193: PUSH
42194: LD_INT 1
42196: DOUBLE
42197: EQUAL
42198: IFTRUE 42202
42200: GO 42237
42202: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
42203: LD_EXP 19
42207: PPUSH
42208: LD_STRING D3Ya-JMM-1
42210: PPUSH
42211: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
42215: LD_EXP 32
42219: PPUSH
42220: LD_STRING D3Ya-Yam-1
42222: PPUSH
42223: CALL_OW 88
// us_scout := 1 ;
42227: LD_ADDR_EXP 8
42231: PUSH
42232: LD_INT 1
42234: ST_TO_ADDR
// end ; 2 :
42235: GO 42270
42237: LD_INT 2
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42269
42245: POP
// begin us_scout := - 1 ;
42246: LD_ADDR_EXP 8
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
42255: LD_EXP 19
42259: PPUSH
42260: LD_STRING D3Yb-JMM-1
42262: PPUSH
42263: CALL_OW 88
// end ; end ;
42267: GO 42270
42269: POP
// DialogueOff ;
42270: CALL_OW 7
// end ; if Frank then
42274: LD_EXP 31
42278: IFFALSE 42282
// exit ;
42280: GO 43043
// if us_scout in [ - 1 , 0 ] then
42282: LD_EXP 8
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: IN
42298: IFFALSE 42302
// exit ;
42300: GO 43043
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
42302: LD_ADDR_EXP 8
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: PUSH
42321: LD_OWVAR 67
42325: ARRAY
42326: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
42327: LD_EXP 8
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: IN
42342: IFFALSE 43043
// begin if IsInUnit ( Kikuchi ) then
42344: LD_EXP 32
42348: PPUSH
42349: CALL_OW 310
42353: IFFALSE 42364
// ComExitBuilding ( Kikuchi ) ;
42355: LD_EXP 32
42359: PPUSH
42360: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42364: LD_EXP 32
42368: PPUSH
42369: CALL_OW 311
42373: IFFALSE 42384
// ComExitVehicle ( Kikuchi ) ;
42375: LD_EXP 32
42379: PPUSH
42380: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42384: LD_EXP 32
42388: PPUSH
42389: LD_INT 4
42391: PPUSH
42392: CALL_OW 235
// wait ( 0 0$1 ) ;
42396: LD_INT 35
42398: PPUSH
42399: CALL_OW 67
// if us_scout = 2 then
42403: LD_EXP 8
42407: PUSH
42408: LD_INT 2
42410: EQUAL
42411: IFFALSE 42791
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42413: LD_EXP 32
42417: PPUSH
42418: LD_INT 75
42420: PPUSH
42421: LD_INT 63
42423: PPUSH
42424: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42428: LD_EXP 32
42432: PPUSH
42433: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42437: LD_EXP 32
42441: PPUSH
42442: LD_INT 770
42444: PPUSH
42445: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42449: LD_EXP 32
42453: PPUSH
42454: LD_INT 100
42456: PPUSH
42457: LD_INT 75
42459: PPUSH
42460: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42464: LD_EXP 32
42468: PPUSH
42469: LD_INT 123
42471: PPUSH
42472: LD_INT 103
42474: PPUSH
42475: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42479: LD_EXP 32
42483: PPUSH
42484: LD_INT 138
42486: PPUSH
42487: LD_INT 108
42489: PPUSH
42490: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42494: LD_EXP 32
42498: PPUSH
42499: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42503: LD_INT 35
42505: PPUSH
42506: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42510: LD_EXP 32
42514: PPUSH
42515: LD_INT 138
42517: PPUSH
42518: LD_INT 108
42520: PPUSH
42521: CALL_OW 307
42525: IFFALSE 42503
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42527: LD_EXP 32
42531: PPUSH
42532: LD_INT 125
42534: PPUSH
42535: LD_INT 132
42537: PPUSH
42538: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42542: LD_INT 35
42544: PPUSH
42545: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42549: LD_INT 1
42551: PPUSH
42552: LD_EXP 32
42556: PPUSH
42557: CALL_OW 292
42561: PUSH
42562: LD_EXP 32
42566: PPUSH
42567: LD_INT 7
42569: PPUSH
42570: CALL_OW 296
42574: PUSH
42575: LD_INT 7
42577: LESS
42578: OR
42579: IFFALSE 42542
// DialogueOn ;
42581: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42585: LD_EXP 32
42589: PPUSH
42590: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42594: LD_INT 10
42596: PPUSH
42597: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42601: LD_EXP 32
42605: PPUSH
42606: LD_STRING D4Ya-Yam-1
42608: PPUSH
42609: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42613: LD_EXP 19
42617: PPUSH
42618: LD_STRING D4Ya-JMM-1
42620: PPUSH
42621: CALL_OW 88
// for i in points do
42625: LD_ADDR_VAR 0 1
42629: PUSH
42630: LD_VAR 0 2
42634: PUSH
42635: FOR_IN
42636: IFFALSE 42694
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42638: LD_VAR 0 1
42642: PUSH
42643: LD_INT 1
42645: ARRAY
42646: PPUSH
42647: LD_VAR 0 1
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: PPUSH
42656: LD_INT 1
42658: PPUSH
42659: LD_INT 20
42661: NEG
42662: PPUSH
42663: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42667: LD_VAR 0 1
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: PPUSH
42676: LD_VAR 0 1
42680: PUSH
42681: LD_INT 2
42683: ARRAY
42684: PPUSH
42685: LD_INT 1
42687: PPUSH
42688: CALL_OW 331
// end ;
42692: GO 42635
42694: POP
42695: POP
// dwait ( 0 0$0.5 ) ;
42696: LD_INT 18
42698: PPUSH
42699: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42703: LD_INT 42
42705: PPUSH
42706: LD_INT 27
42708: PPUSH
42709: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42713: LD_EXP 32
42717: PPUSH
42718: LD_STRING D4Ya-Yam-2
42720: PPUSH
42721: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42725: LD_INT 18
42727: PPUSH
42728: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42732: LD_INT 118
42734: PPUSH
42735: LD_INT 80
42737: PPUSH
42738: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42742: LD_EXP 19
42746: PPUSH
42747: LD_STRING D4Ya-JMM-2
42749: PPUSH
42750: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42754: LD_EXP 32
42758: PPUSH
42759: LD_STRING D4Ya-Yam-3
42761: PPUSH
42762: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42766: LD_INT 10
42768: PPUSH
42769: CALL_OW 68
// DialogueOff ;
42773: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42777: LD_EXP 32
42781: PPUSH
42782: LD_INT 1
42784: PPUSH
42785: CALL_OW 235
// end else
42789: GO 43043
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42791: LD_INT 2
42793: PPUSH
42794: LD_INT 4
42796: PPUSH
42797: LD_INT 2
42799: PPUSH
42800: LD_INT 1
42802: PPUSH
42803: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42807: LD_EXP 32
42811: PPUSH
42812: LD_INT 75
42814: PPUSH
42815: LD_INT 63
42817: PPUSH
42818: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42822: LD_EXP 32
42826: PPUSH
42827: LD_INT 175
42829: PPUSH
42830: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42834: LD_EXP 32
42838: PPUSH
42839: LD_INT 102
42841: PPUSH
42842: LD_INT 76
42844: PPUSH
42845: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42849: LD_EXP 32
42853: PPUSH
42854: LD_INT 108
42856: PPUSH
42857: LD_INT 70
42859: PPUSH
42860: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42864: LD_INT 35
42866: PPUSH
42867: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42871: LD_INT 2
42873: PPUSH
42874: LD_EXP 32
42878: PPUSH
42879: CALL_OW 292
42883: IFFALSE 42864
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42885: LD_EXP 32
42889: PPUSH
42890: LD_INT 112
42892: PPUSH
42893: LD_INT 118
42895: PPUSH
42896: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42900: LD_EXP 32
42904: PPUSH
42905: CALL_OW 256
42909: PUSH
42910: LD_INT 750
42912: GREATEREQUAL
42913: IFFALSE 42927
// SetLives ( Kikuchi , 700 ) ;
42915: LD_EXP 32
42919: PPUSH
42920: LD_INT 700
42922: PPUSH
42923: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42927: LD_INT 35
42929: PPUSH
42930: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42934: LD_INT 1
42936: PPUSH
42937: LD_EXP 32
42941: PPUSH
42942: CALL_OW 292
42946: PUSH
42947: LD_EXP 32
42951: PPUSH
42952: LD_INT 7
42954: PPUSH
42955: CALL_OW 296
42959: PUSH
42960: LD_INT 17
42962: LESS
42963: OR
42964: IFFALSE 42927
// DialogueOn ;
42966: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42970: LD_EXP 32
42974: PPUSH
42975: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42979: LD_EXP 32
42983: PPUSH
42984: LD_STRING D4Yb-Yam-1
42986: PPUSH
42987: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
42991: LD_EXP 19
42995: PPUSH
42996: LD_STRING D4Yb-JMM-1
42998: PPUSH
42999: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
43003: LD_EXP 32
43007: PPUSH
43008: LD_STRING D4Yb-Yam-2
43010: PPUSH
43011: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
43015: LD_EXP 19
43019: PPUSH
43020: LD_STRING D4Yb-JMM-2
43022: PPUSH
43023: CALL_OW 88
// DialogueOff ;
43027: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
43031: LD_EXP 32
43035: PPUSH
43036: LD_INT 1
43038: PPUSH
43039: CALL_OW 235
// end ; end ; end ;
43043: PPOPN 2
43045: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
43046: LD_EXP 6
43050: IFFALSE 44083
43052: GO 43054
43054: DISABLE
43055: LD_INT 0
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
// begin enable ;
43061: ENABLE
// if not seen [ 1 ] then
43062: LD_EXP 9
43066: PUSH
43067: LD_INT 1
43069: ARRAY
43070: NOT
43071: IFFALSE 43251
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
43073: LD_ADDR_VAR 0 2
43077: PUSH
43078: LD_INT 22
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 25
43093: PUSH
43094: LD_INT 11
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 33
43103: PUSH
43104: LD_INT 4
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PPUSH
43120: CALL_OW 69
43124: ST_TO_ADDR
// if tmp then
43125: LD_VAR 0 2
43129: IFFALSE 43251
// for i in tmp do
43131: LD_ADDR_VAR 0 1
43135: PUSH
43136: LD_VAR 0 2
43140: PUSH
43141: FOR_IN
43142: IFFALSE 43249
// if See ( 1 , i ) then
43144: LD_INT 1
43146: PPUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL_OW 292
43156: IFFALSE 43247
// begin seen := Replace ( seen , 1 , true ) ;
43158: LD_ADDR_EXP 9
43162: PUSH
43163: LD_EXP 9
43167: PPUSH
43168: LD_INT 1
43170: PPUSH
43171: LD_INT 1
43173: PPUSH
43174: CALL_OW 1
43178: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43179: LD_INT 1
43181: PPUSH
43182: CALL 2100 0 1
43186: IFFALSE 43247
// begin DialogueOn ;
43188: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43201: LD_INT 10
43203: PPUSH
43204: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
43208: LD_ADDR_VAR 0 3
43212: PUSH
43213: LD_INT 1
43215: PPUSH
43216: LD_STRING D5a-Sol2-1
43218: PPUSH
43219: CALL 2278 0 2
43223: ST_TO_ADDR
// if not un then
43224: LD_VAR 0 3
43228: NOT
43229: IFFALSE 43241
// SayRand ( sex_female , D5a-FSol2-1 ) ;
43231: LD_INT 2
43233: PPUSH
43234: LD_STRING D5a-FSol2-1
43236: PPUSH
43237: CALL 2278 0 2
// DialogueOff ;
43241: CALL_OW 7
// break ;
43245: GO 43249
// end ; end ;
43247: GO 43141
43249: POP
43250: POP
// end ; if not seen [ 2 ] then
43251: LD_EXP 9
43255: PUSH
43256: LD_INT 2
43258: ARRAY
43259: NOT
43260: IFFALSE 43485
// begin can_kamikazed := true ;
43262: LD_ADDR_EXP 10
43266: PUSH
43267: LD_INT 1
43269: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
43270: LD_ADDR_VAR 0 2
43274: PUSH
43275: LD_INT 22
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 25
43287: PUSH
43288: LD_INT 17
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 69
43303: ST_TO_ADDR
// if tmp then
43304: LD_VAR 0 2
43308: IFFALSE 43485
// for i in tmp do
43310: LD_ADDR_VAR 0 1
43314: PUSH
43315: LD_VAR 0 2
43319: PUSH
43320: FOR_IN
43321: IFFALSE 43483
// if See ( 1 , i ) then
43323: LD_INT 1
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 292
43335: IFFALSE 43481
// begin seen := Replace ( seen , 2 , true ) ;
43337: LD_ADDR_EXP 9
43341: PUSH
43342: LD_EXP 9
43346: PPUSH
43347: LD_INT 2
43349: PPUSH
43350: LD_INT 1
43352: PPUSH
43353: CALL_OW 1
43357: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43358: LD_INT 1
43360: PPUSH
43361: CALL 2100 0 1
43365: IFFALSE 43481
// begin DialogueOn ;
43367: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43380: LD_INT 10
43382: PPUSH
43383: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43387: LD_ADDR_VAR 0 3
43391: PUSH
43392: LD_INT 1
43394: PPUSH
43395: LD_STRING D5b-Sol1-1
43397: PPUSH
43398: CALL 2278 0 2
43402: ST_TO_ADDR
// if not un then
43403: LD_VAR 0 3
43407: NOT
43408: IFFALSE 43426
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 2
43417: PPUSH
43418: LD_STRING D5b-FSol1-1
43420: PPUSH
43421: CALL 2278 0 2
43425: ST_TO_ADDR
// if un then
43426: LD_VAR 0 3
43430: IFFALSE 43475
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43432: LD_ADDR_VAR 0 4
43436: PUSH
43437: LD_INT 1
43439: PPUSH
43440: LD_STRING D5b-Sol2-1
43442: PPUSH
43443: LD_VAR 0 3
43447: PPUSH
43448: CALL 2504 0 3
43452: ST_TO_ADDR
// if not un2 then
43453: LD_VAR 0 4
43457: NOT
43458: IFFALSE 43475
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43460: LD_INT 2
43462: PPUSH
43463: LD_STRING D5b-FSol2-1
43465: PPUSH
43466: LD_VAR 0 3
43470: PPUSH
43471: CALL 2504 0 3
// end ; DialogueOff ;
43475: CALL_OW 7
// break ;
43479: GO 43483
// end ; end ;
43481: GO 43320
43483: POP
43484: POP
// end ; if not seen [ 3 ] then
43485: LD_EXP 9
43489: PUSH
43490: LD_INT 3
43492: ARRAY
43493: NOT
43494: IFFALSE 43668
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43496: LD_ADDR_VAR 0 2
43500: PUSH
43501: LD_INT 22
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 33
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PPUSH
43525: CALL_OW 69
43529: ST_TO_ADDR
// if tmp then
43530: LD_VAR 0 2
43534: IFFALSE 43668
// for i in tmp do
43536: LD_ADDR_VAR 0 1
43540: PUSH
43541: LD_VAR 0 2
43545: PUSH
43546: FOR_IN
43547: IFFALSE 43666
// if See ( 1 , i ) then
43549: LD_INT 1
43551: PPUSH
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 292
43561: IFFALSE 43664
// begin seen := Replace ( seen , 3 , true ) ;
43563: LD_ADDR_EXP 9
43567: PUSH
43568: LD_EXP 9
43572: PPUSH
43573: LD_INT 3
43575: PPUSH
43576: LD_INT 1
43578: PPUSH
43579: CALL_OW 1
43583: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43584: LD_INT 1
43586: PPUSH
43587: CALL 2100 0 1
43591: IFFALSE 43664
// begin DialogueOn ;
43593: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43597: LD_VAR 0 1
43601: PPUSH
43602: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43606: LD_INT 10
43608: PPUSH
43609: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_INT 1
43620: PPUSH
43621: LD_STRING D8-Sol1-1
43623: PPUSH
43624: CALL 2278 0 2
43628: ST_TO_ADDR
// if not un then
43629: LD_VAR 0 3
43633: NOT
43634: IFFALSE 43646
// SayRand ( sex_female , D8-FSol1-1 ) ;
43636: LD_INT 2
43638: PPUSH
43639: LD_STRING D8-FSol1-1
43641: PPUSH
43642: CALL 2278 0 2
// Say ( JMM , D8-JMM-1 ) ;
43646: LD_EXP 19
43650: PPUSH
43651: LD_STRING D8-JMM-1
43653: PPUSH
43654: CALL_OW 88
// DialogueOff ;
43658: CALL_OW 7
// break ;
43662: GO 43666
// end ; end ;
43664: GO 43546
43666: POP
43667: POP
// end ; if not seen [ 4 ] then
43668: LD_EXP 9
43672: PUSH
43673: LD_INT 4
43675: ARRAY
43676: NOT
43677: IFFALSE 43839
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43679: LD_ADDR_VAR 0 2
43683: PUSH
43684: LD_INT 22
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 33
43696: PUSH
43697: LD_INT 5
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PPUSH
43708: CALL_OW 69
43712: ST_TO_ADDR
// if tmp then
43713: LD_VAR 0 2
43717: IFFALSE 43839
// for i in tmp do
43719: LD_ADDR_VAR 0 1
43723: PUSH
43724: LD_VAR 0 2
43728: PUSH
43729: FOR_IN
43730: IFFALSE 43837
// if See ( 1 , i ) then
43732: LD_INT 1
43734: PPUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: CALL_OW 292
43744: IFFALSE 43835
// begin seen := Replace ( seen , 4 , true ) ;
43746: LD_ADDR_EXP 9
43750: PUSH
43751: LD_EXP 9
43755: PPUSH
43756: LD_INT 4
43758: PPUSH
43759: LD_INT 1
43761: PPUSH
43762: CALL_OW 1
43766: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43767: LD_INT 1
43769: PPUSH
43770: CALL 2100 0 1
43774: IFFALSE 43835
// begin DialogueOn ;
43776: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43780: LD_VAR 0 1
43784: PPUSH
43785: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43789: LD_INT 10
43791: PPUSH
43792: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43796: LD_ADDR_VAR 0 3
43800: PUSH
43801: LD_INT 1
43803: PPUSH
43804: LD_STRING D5a-Sol1-1
43806: PPUSH
43807: CALL 2278 0 2
43811: ST_TO_ADDR
// if not un then
43812: LD_VAR 0 3
43816: NOT
43817: IFFALSE 43829
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43819: LD_INT 2
43821: PPUSH
43822: LD_STRING D5a-FSol1-1
43824: PPUSH
43825: CALL 2278 0 2
// DialogueOff ;
43829: CALL_OW 7
// break ;
43833: GO 43837
// end ; end ;
43835: GO 43729
43837: POP
43838: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43839: LD_EXP 9
43843: PUSH
43844: LD_INT 5
43846: ARRAY
43847: NOT
43848: PUSH
43849: LD_EXP 9
43853: PUSH
43854: LD_INT 3
43856: ARRAY
43857: AND
43858: IFFALSE 44032
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43860: LD_ADDR_VAR 0 2
43864: PUSH
43865: LD_INT 22
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 34
43877: PUSH
43878: LD_INT 31
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PPUSH
43889: CALL_OW 69
43893: ST_TO_ADDR
// if tmp then
43894: LD_VAR 0 2
43898: IFFALSE 44032
// for i in tmp do
43900: LD_ADDR_VAR 0 1
43904: PUSH
43905: LD_VAR 0 2
43909: PUSH
43910: FOR_IN
43911: IFFALSE 44030
// if See ( 1 , i ) then
43913: LD_INT 1
43915: PPUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: CALL_OW 292
43925: IFFALSE 44028
// begin seen := Replace ( seen , 5 , true ) ;
43927: LD_ADDR_EXP 9
43931: PUSH
43932: LD_EXP 9
43936: PPUSH
43937: LD_INT 5
43939: PPUSH
43940: LD_INT 1
43942: PPUSH
43943: CALL_OW 1
43947: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43948: LD_INT 1
43950: PPUSH
43951: CALL 2100 0 1
43955: IFFALSE 44028
// begin DialogueOn ;
43957: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43970: LD_INT 10
43972: PPUSH
43973: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43977: LD_ADDR_VAR 0 3
43981: PUSH
43982: LD_INT 1
43984: PPUSH
43985: LD_STRING D8a-Sol2-1
43987: PPUSH
43988: CALL 2278 0 2
43992: ST_TO_ADDR
// if not un then
43993: LD_VAR 0 3
43997: NOT
43998: IFFALSE 44010
// SayRand ( sex_female , D8a-FSol2-1 ) ;
44000: LD_INT 2
44002: PPUSH
44003: LD_STRING D8a-FSol2-1
44005: PPUSH
44006: CALL 2278 0 2
// Say ( JMM , D8a-JMM-1 ) ;
44010: LD_EXP 19
44014: PPUSH
44015: LD_STRING D8a-JMM-1
44017: PPUSH
44018: CALL_OW 88
// DialogueOff ;
44022: CALL_OW 7
// break ;
44026: GO 44030
// end ; end ;
44028: GO 43910
44030: POP
44031: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
44032: LD_EXP 9
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: PUSH
44041: LD_EXP 9
44045: PUSH
44046: LD_INT 2
44048: ARRAY
44049: AND
44050: PUSH
44051: LD_EXP 9
44055: PUSH
44056: LD_INT 3
44058: ARRAY
44059: AND
44060: PUSH
44061: LD_EXP 9
44065: PUSH
44066: LD_INT 4
44068: ARRAY
44069: AND
44070: PUSH
44071: LD_EXP 9
44075: PUSH
44076: LD_INT 5
44078: ARRAY
44079: AND
44080: IFFALSE 44083
// disable ;
44082: DISABLE
// end ;
44083: PPOPN 4
44085: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
44086: LD_EXP 10
44090: PUSH
44091: LD_EXP 11
44095: AND
44096: IFFALSE 44294
44098: GO 44100
44100: DISABLE
44101: LD_INT 0
44103: PPUSH
// begin DialogueOn ;
44104: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
44108: LD_EXP 11
44112: PPUSH
44113: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
44117: LD_ADDR_VAR 0 1
44121: PUSH
44122: LD_INT 1
44124: PPUSH
44125: LD_STRING D5c-Sol1-1
44127: PPUSH
44128: CALL 2278 0 2
44132: ST_TO_ADDR
// if not un then
44133: LD_VAR 0 1
44137: NOT
44138: IFFALSE 44156
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
44140: LD_ADDR_VAR 0 1
44144: PUSH
44145: LD_INT 2
44147: PPUSH
44148: LD_STRING D5c-Sol1-1
44150: PPUSH
44151: CALL 2278 0 2
44155: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
44156: LD_EXP 19
44160: PPUSH
44161: LD_STRING D5c-JMM-1
44163: PPUSH
44164: CALL_OW 88
// if IsOk ( Lisa ) then
44168: LD_EXP 20
44172: PPUSH
44173: CALL_OW 302
44177: IFFALSE 44193
// Say ( Lisa , D5d-Lisa-1 ) else
44179: LD_EXP 20
44183: PPUSH
44184: LD_STRING D5d-Lisa-1
44186: PPUSH
44187: CALL_OW 88
44191: GO 44278
// if IsOk ( Cyrus ) then
44193: LD_EXP 23
44197: PPUSH
44198: CALL_OW 302
44202: IFFALSE 44218
// Say ( Cyrus , D5d-Cyrus-1 ) else
44204: LD_EXP 23
44208: PPUSH
44209: LD_STRING D5d-Cyrus-1
44211: PPUSH
44212: CALL_OW 88
44216: GO 44278
// if IsOk ( Gary ) then
44218: LD_EXP 30
44222: PPUSH
44223: CALL_OW 302
44227: IFFALSE 44243
// Say ( Gary , D5d-Gary-1 ) else
44229: LD_EXP 30
44233: PPUSH
44234: LD_STRING D5d-Gary-1
44236: PPUSH
44237: CALL_OW 88
44241: GO 44278
// if GetSex ( un ) = sex_male then
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 258
44252: PUSH
44253: LD_INT 1
44255: EQUAL
44256: IFFALSE 44272
// Say ( un , D5d-Sol1-1 ) else
44258: LD_VAR 0 1
44262: PPUSH
44263: LD_STRING D5d-Sol1-1
44265: PPUSH
44266: CALL_OW 88
44270: GO 44278
// begin DialogueOff ;
44272: CALL_OW 7
// exit ;
44276: GO 44294
// end ; Say ( JMM , D5d-JMM-1 ) ;
44278: LD_EXP 19
44282: PPUSH
44283: LD_STRING D5d-JMM-1
44285: PPUSH
44286: CALL_OW 88
// DialogueOff ;
44290: CALL_OW 7
// end ;
44294: PPOPN 1
44296: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
44297: LD_INT 1
44299: PPUSH
44300: LD_INT 17
44302: PPUSH
44303: CALL_OW 294
44307: PUSH
44308: LD_INT 2
44310: GREATEREQUAL
44311: IFFALSE 44432
44313: GO 44315
44315: DISABLE
44316: LD_INT 0
44318: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
44319: LD_INT 10
44321: PPUSH
44322: LD_INT 5
44324: PPUSH
44325: LD_INT 1
44327: PPUSH
44328: LD_INT 10
44330: NEG
44331: PPUSH
44332: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
44336: LD_INT 10
44338: PPUSH
44339: LD_INT 5
44341: PPUSH
44342: LD_INT 1
44344: PPUSH
44345: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
44349: LD_INT 10
44351: PPUSH
44352: LD_INT 5
44354: PPUSH
44355: CALL_OW 86
// DialogueOn ;
44359: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
44363: LD_ADDR_VAR 0 1
44367: PUSH
44368: LD_INT 1
44370: PPUSH
44371: LD_STRING D6-Sci1-1
44373: PPUSH
44374: CALL 2278 0 2
44378: ST_TO_ADDR
// if un then
44379: LD_VAR 0 1
44383: IFFALSE 44421
// begin Say ( JMM , D6-JMM-1 ) ;
44385: LD_EXP 19
44389: PPUSH
44390: LD_STRING D6-JMM-1
44392: PPUSH
44393: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44397: LD_VAR 0 1
44401: PPUSH
44402: LD_STRING D6-Sci1-2
44404: PPUSH
44405: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44409: LD_EXP 19
44413: PPUSH
44414: LD_STRING D6-JMM-2
44416: PPUSH
44417: CALL_OW 88
// end ; DialogueOff ;
44421: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44425: LD_STRING M3
44427: PPUSH
44428: CALL_OW 337
// end ;
44432: PPOPN 1
44434: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44435: LD_OWVAR 1
44439: PUSH
44440: LD_INT 65100
44442: GREATEREQUAL
44443: PUSH
44444: LD_INT 2
44446: PPUSH
44447: LD_INT 169
44449: PPUSH
44450: LD_INT 90
44452: PPUSH
44453: LD_INT 40
44455: PPUSH
44456: CALL 3722 0 4
44460: PUSH
44461: LD_INT 4
44463: ARRAY
44464: PUSH
44465: LD_INT 0
44467: EQUAL
44468: AND
44469: IFFALSE 45595
44471: GO 44473
44473: DISABLE
44474: LD_INT 0
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
// begin uc_side := 5 ;
44480: LD_ADDR_OWVAR 20
44484: PUSH
44485: LD_INT 5
44487: ST_TO_ADDR
// uc_nation := 2 ;
44488: LD_ADDR_OWVAR 21
44492: PUSH
44493: LD_INT 2
44495: ST_TO_ADDR
// InitHc ;
44496: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44500: LD_INT 1
44502: PPUSH
44503: LD_INT 3
44505: PPUSH
44506: LD_INT 8
44508: PPUSH
44509: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44513: LD_ADDR_OWVAR 29
44517: PUSH
44518: LD_INT 12
44520: PUSH
44521: LD_INT 12
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44528: LD_ADDR_OWVAR 33
44532: PUSH
44533: LD_STRING SecondCharsGal
44535: ST_TO_ADDR
// hc_face_number := 7 ;
44536: LD_ADDR_OWVAR 34
44540: PUSH
44541: LD_INT 7
44543: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44544: LD_ADDR_EXP 43
44548: PUSH
44549: CALL_OW 44
44553: ST_TO_ADDR
// InitHc ;
44554: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44558: LD_INT 1
44560: PPUSH
44561: LD_INT 16
44563: PPUSH
44564: LD_INT 2
44566: PPUSH
44567: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44571: LD_ADDR_OWVAR 29
44575: PUSH
44576: LD_INT 12
44578: PUSH
44579: LD_INT 12
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// hc_name :=  ;
44586: LD_ADDR_OWVAR 26
44590: PUSH
44591: LD_STRING 
44593: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44594: LD_ADDR_EXP 44
44598: PUSH
44599: CALL_OW 44
44603: ST_TO_ADDR
// InitHc ;
44604: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44608: LD_INT 35
44610: PPUSH
44611: CALL_OW 67
// until not InBattle ( 1 ) ;
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 463
44622: NOT
44623: IFFALSE 44608
// wait ( 0 0$5 ) ;
44625: LD_INT 175
44627: PPUSH
44628: CALL_OW 67
// DialogueOn ;
44632: CALL_OW 6
// InGameOn ;
44636: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44640: LD_ADDR_VAR 0 1
44644: PUSH
44645: LD_INT 22
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 25
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 25
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 25
44680: PUSH
44681: LD_INT 3
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 25
44690: PUSH
44691: LD_INT 4
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 25
44700: PUSH
44701: LD_INT 5
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 25
44710: PUSH
44711: LD_INT 8
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PPUSH
44731: CALL_OW 69
44735: PUSH
44736: LD_EXP 19
44740: PUSH
44741: LD_EXP 20
44745: PUSH
44746: LD_EXP 21
44750: PUSH
44751: LD_EXP 22
44755: PUSH
44756: LD_EXP 23
44760: PUSH
44761: LD_EXP 24
44765: PUSH
44766: LD_EXP 25
44770: PUSH
44771: LD_EXP 26
44775: PUSH
44776: LD_EXP 27
44780: PUSH
44781: LD_EXP 29
44785: PUSH
44786: LD_EXP 30
44790: PUSH
44791: LD_EXP 31
44795: PUSH
44796: LD_EXP 32
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: DIFF
44816: PPUSH
44817: LD_INT 26
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PPUSH
44827: CALL_OW 72
44831: PUSH
44832: LD_INT 1
44834: ARRAY
44835: ST_TO_ADDR
// if not un and Brown then
44836: LD_VAR 0 1
44840: NOT
44841: PUSH
44842: LD_EXP 25
44846: AND
44847: IFFALSE 44859
// un := Brown ;
44849: LD_ADDR_VAR 0 1
44853: PUSH
44854: LD_EXP 25
44858: ST_TO_ADDR
// if un then
44859: LD_VAR 0 1
44863: IFFALSE 44889
// begin Say ( un , D7-Sol1-1 ) ;
44865: LD_VAR 0 1
44869: PPUSH
44870: LD_STRING D7-Sol1-1
44872: PPUSH
44873: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44877: LD_EXP 19
44881: PPUSH
44882: LD_STRING D7-JMM-1
44884: PPUSH
44885: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44889: LD_EXP 43
44893: PPUSH
44894: LD_STRING D7-Ar1-1
44896: PPUSH
44897: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44901: LD_EXP 19
44905: PPUSH
44906: LD_STRING D7-JMM-2
44908: PPUSH
44909: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44913: LD_EXP 43
44917: PPUSH
44918: LD_STRING D7-Ar1-2
44920: PPUSH
44921: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44925: LD_EXP 19
44929: PPUSH
44930: LD_STRING D7-JMM-3
44932: PPUSH
44933: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44937: LD_EXP 43
44941: PPUSH
44942: LD_STRING D7-Ar1-3
44944: PPUSH
44945: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44949: LD_EXP 19
44953: PPUSH
44954: LD_STRING D7-JMM-4
44956: PPUSH
44957: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44961: LD_EXP 43
44965: PPUSH
44966: LD_STRING D7-Ar1-4
44968: PPUSH
44969: CALL_OW 94
// InGameOff ;
44973: CALL_OW 9
// DialogueOff ;
44977: CALL_OW 7
// case Query ( QCameras ) of 1 :
44981: LD_STRING QCameras
44983: PPUSH
44984: CALL_OW 97
44988: PUSH
44989: LD_INT 1
44991: DOUBLE
44992: EQUAL
44993: IFTRUE 44997
44995: GO 45000
44997: POP
// ; 2 :
44998: GO 45014
45000: LD_INT 2
45002: DOUBLE
45003: EQUAL
45004: IFTRUE 45008
45006: GO 45013
45008: POP
// exit ; end ;
45009: GO 45595
45011: GO 45014
45013: POP
// ChangeMissionObjectives ( MCar ) ;
45014: LD_STRING MCar
45016: PPUSH
45017: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
45021: LD_INT 124
45023: PPUSH
45024: LD_INT 90
45026: PPUSH
45027: LD_INT 1
45029: PPUSH
45030: LD_INT 6
45032: NEG
45033: PPUSH
45034: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
45038: LD_INT 124
45040: PPUSH
45041: LD_INT 90
45043: PPUSH
45044: LD_INT 1
45046: PPUSH
45047: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
45051: LD_INT 12
45053: PPUSH
45054: LD_INT 1
45056: PPUSH
45057: CALL_OW 424
// wait ( 3 ) ;
45061: LD_INT 3
45063: PPUSH
45064: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
45068: LD_INT 124
45070: PPUSH
45071: LD_INT 90
45073: PPUSH
45074: CALL_OW 86
// cargo := false ;
45078: LD_ADDR_VAR 0 3
45082: PUSH
45083: LD_INT 0
45085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45086: LD_INT 35
45088: PPUSH
45089: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
45093: LD_ADDR_VAR 0 3
45097: PUSH
45098: LD_INT 12
45100: PPUSH
45101: LD_INT 32
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 34
45113: PUSH
45114: LD_INT 32
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 58
45123: PUSH
45124: EMPTY
45125: LIST
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: PPUSH
45132: CALL_OW 70
45136: ST_TO_ADDR
// until cargo ;
45137: LD_VAR 0 3
45141: IFFALSE 45086
// cargo := cargo [ 1 ] ;
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_VAR 0 3
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
45157: LD_VAR 0 3
45161: PPUSH
45162: LD_INT 5
45164: PPUSH
45165: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
45169: LD_INT 12
45171: PPUSH
45172: LD_INT 0
45174: PPUSH
45175: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
45179: LD_EXP 43
45183: PPUSH
45184: LD_INT 11
45186: PPUSH
45187: LD_INT 0
45189: PPUSH
45190: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
45194: LD_EXP 44
45198: PPUSH
45199: LD_INT 11
45201: PPUSH
45202: LD_INT 0
45204: PPUSH
45205: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
45209: LD_EXP 43
45213: PUSH
45214: LD_EXP 44
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PPUSH
45223: LD_INT 12
45225: PPUSH
45226: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
45230: LD_EXP 43
45234: PPUSH
45235: LD_VAR 0 3
45239: PPUSH
45240: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45244: LD_EXP 43
45248: PUSH
45249: LD_EXP 44
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PPUSH
45258: LD_INT 209
45260: PPUSH
45261: LD_INT 178
45263: PPUSH
45264: CALL_OW 171
// while ( true ) do
45268: LD_INT 1
45270: IFFALSE 45424
// begin wait ( 0 0$1 ) ;
45272: LD_INT 35
45274: PPUSH
45275: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
45279: LD_EXP 43
45283: PPUSH
45284: CALL_OW 314
45288: NOT
45289: PUSH
45290: LD_EXP 44
45294: PPUSH
45295: CALL_OW 314
45299: NOT
45300: OR
45301: IFFALSE 45327
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45303: LD_EXP 43
45307: PUSH
45308: LD_EXP 44
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PPUSH
45317: LD_INT 209
45319: PPUSH
45320: LD_INT 178
45322: PPUSH
45323: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
45327: LD_EXP 43
45331: PPUSH
45332: LD_INT 10
45334: PPUSH
45335: CALL_OW 308
45339: IFFALSE 45350
// RemoveUnit ( ar_mechanic ) ;
45341: LD_EXP 43
45345: PPUSH
45346: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
45350: LD_EXP 44
45354: PPUSH
45355: LD_INT 10
45357: PPUSH
45358: CALL_OW 308
45362: IFFALSE 45373
// RemoveUnit ( ar_mechanic_friend ) ;
45364: LD_EXP 44
45368: PPUSH
45369: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
45373: LD_VAR 0 3
45377: PPUSH
45378: LD_INT 10
45380: PPUSH
45381: CALL_OW 308
45385: IFFALSE 45396
// RemoveUnit ( cargo ) ;
45387: LD_VAR 0 3
45391: PPUSH
45392: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
45396: LD_EXP 43
45400: PPUSH
45401: CALL_OW 300
45405: NOT
45406: PUSH
45407: LD_EXP 44
45411: PPUSH
45412: CALL_OW 300
45416: NOT
45417: AND
45418: IFFALSE 45422
// break ;
45420: GO 45424
// end ;
45422: GO 45268
// wait ( 0 0$2 ) ;
45424: LD_INT 70
45426: PPUSH
45427: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
45431: LD_EXP 43
45435: PPUSH
45436: LD_STRING D7a-Ar1-1
45438: PPUSH
45439: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
45443: LD_ADDR_VAR 0 4
45447: PUSH
45448: LD_INT 129
45450: PUSH
45451: LD_INT 10
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 103
45460: PUSH
45461: LD_INT 6
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 148
45470: PUSH
45471: LD_INT 47
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 155
45480: PUSH
45481: LD_INT 16
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// if Difficulty = 1 then
45494: LD_OWVAR 67
45498: PUSH
45499: LD_INT 1
45501: EQUAL
45502: IFFALSE 45539
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45504: LD_ADDR_VAR 0 4
45508: PUSH
45509: LD_VAR 0 4
45513: PUSH
45514: LD_INT 78
45516: PUSH
45517: LD_INT 7
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 104
45526: PUSH
45527: LD_INT 43
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: ADD
45538: ST_TO_ADDR
// for i in tmp do
45539: LD_ADDR_VAR 0 2
45543: PUSH
45544: LD_VAR 0 4
45548: PUSH
45549: FOR_IN
45550: IFFALSE 45583
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45552: LD_VAR 0 2
45556: PUSH
45557: LD_INT 1
45559: ARRAY
45560: PPUSH
45561: LD_VAR 0 2
45565: PUSH
45566: LD_INT 2
45568: ARRAY
45569: PPUSH
45570: LD_INT 1
45572: PPUSH
45573: LD_INT 9
45575: NEG
45576: PPUSH
45577: CALL_OW 330
45581: GO 45549
45583: POP
45584: POP
// CenterOnXY ( 129 , 10 ) ;
45585: LD_INT 129
45587: PPUSH
45588: LD_INT 10
45590: PPUSH
45591: CALL_OW 84
// end ;
45595: PPOPN 4
45597: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45598: LD_EXP 15
45602: PUSH
45603: LD_INT 21000
45605: MINUS
45606: PUSH
45607: LD_OWVAR 1
45611: LESSEQUAL
45612: IFFALSE 45652
45614: GO 45616
45616: DISABLE
// begin powell_warn := true ;
45617: LD_ADDR_EXP 16
45621: PUSH
45622: LD_INT 1
45624: ST_TO_ADDR
// DialogueOn ;
45625: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45629: LD_EXP 28
45633: PPUSH
45634: LD_STRING D9-Pow-1
45636: PPUSH
45637: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45641: LD_INT 10
45643: PPUSH
45644: CALL_OW 68
// DialogueOff ;
45648: CALL_OW 7
// end ;
45652: END
// every 0 0$1 trigger game_time <= tick do
45653: LD_EXP 15
45657: PUSH
45658: LD_OWVAR 1
45662: LESSEQUAL
45663: IFFALSE 45702
45665: GO 45667
45667: DISABLE
// begin DialogueOn ;
45668: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45672: LD_EXP 28
45676: PPUSH
45677: LD_STRING D9a-Pow-1
45679: PPUSH
45680: CALL_OW 94
// dwait ( 0 0$2 ) ;
45684: LD_INT 70
45686: PPUSH
45687: CALL_OW 68
// DialogueOff ;
45691: CALL_OW 7
// YouLost ( Command ) ;
45695: LD_STRING Command
45697: PPUSH
45698: CALL_OW 104
// end ;
45702: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45703: LD_EXP 19
45707: PPUSH
45708: CALL_OW 301
45712: PUSH
45713: LD_EXP 5
45717: AND
45718: IFFALSE 45730
45720: GO 45722
45722: DISABLE
// YouLost ( JMM ) ;
45723: LD_STRING JMM
45725: PPUSH
45726: CALL_OW 104
45730: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
45731: LD_INT 22
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 30
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PPUSH
45755: CALL_OW 69
45759: PUSH
45760: LD_INT 0
45762: EQUAL
45763: PUSH
45764: LD_EXP 19
45768: PPUSH
45769: CALL_OW 302
45773: AND
45774: IFFALSE 46563
45776: GO 45778
45778: DISABLE
45779: LD_INT 0
45781: PPUSH
// begin DialogueOn ;
45782: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45786: LD_OWVAR 1
45790: PUSH
45791: LD_INT 126000
45793: PUSH
45794: LD_INT 105000
45796: PUSH
45797: LD_INT 94500
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: PUSH
45805: LD_OWVAR 67
45809: ARRAY
45810: LESS
45811: IFFALSE 45825
// AddMedal ( Time1 , 2 ) else
45813: LD_STRING Time1
45815: PPUSH
45816: LD_INT 2
45818: PPUSH
45819: CALL_OW 101
45823: GO 45855
// if not powell_warn then
45825: LD_EXP 16
45829: NOT
45830: IFFALSE 45844
// AddMedal ( Time1 , 1 ) else
45832: LD_STRING Time1
45834: PPUSH
45835: LD_INT 1
45837: PPUSH
45838: CALL_OW 101
45842: GO 45855
// AddMedal ( Time1 , - 1 ) ;
45844: LD_STRING Time1
45846: PPUSH
45847: LD_INT 1
45849: NEG
45850: PPUSH
45851: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45855: LD_EXP 17
45859: PUSH
45860: LD_INT 5
45862: PUSH
45863: LD_INT 4
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: PUSH
45874: LD_OWVAR 67
45878: ARRAY
45879: GREATEREQUAL
45880: IFFALSE 45895
// AddMedal ( Destroy , - 2 ) else
45882: LD_STRING Destroy
45884: PPUSH
45885: LD_INT 2
45887: NEG
45888: PPUSH
45889: CALL_OW 101
45893: GO 46012
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45895: LD_INT 22
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 21
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 50
45917: PUSH
45918: EMPTY
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: PPUSH
45926: CALL_OW 69
45930: PUSH
45931: LD_INT 20
45933: GREATEREQUAL
45934: IFFALSE 45949
// AddMedal ( Destroy , - 1 ) else
45936: LD_STRING Destroy
45938: PPUSH
45939: LD_INT 1
45941: NEG
45942: PPUSH
45943: CALL_OW 101
45947: GO 46012
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45949: LD_INT 22
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 21
45961: PUSH
45962: LD_INT 3
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 50
45971: PUSH
45972: EMPTY
45973: LIST
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: PPUSH
45980: CALL_OW 69
45984: PUSH
45985: LD_INT 10
45987: GREATEREQUAL
45988: IFFALSE 46002
// AddMedal ( Destroy , 1 ) else
45990: LD_STRING Destroy
45992: PPUSH
45993: LD_INT 1
45995: PPUSH
45996: CALL_OW 101
46000: GO 46012
// AddMedal ( Destroy , 2 ) ;
46002: LD_STRING Destroy
46004: PPUSH
46005: LD_INT 2
46007: PPUSH
46008: CALL_OW 101
// if artifact_get then
46012: LD_EXP 13
46016: IFFALSE 46030
// AddMedal ( Artefact , 1 ) else
46018: LD_STRING Artefact
46020: PPUSH
46021: LD_INT 1
46023: PPUSH
46024: CALL_OW 101
46028: GO 46041
// AddMedal ( Artefact , - 1 ) ;
46030: LD_STRING Artefact
46032: PPUSH
46033: LD_INT 1
46035: NEG
46036: PPUSH
46037: CALL_OW 101
// GiveMedals ( MAIN ) ;
46041: LD_STRING MAIN
46043: PPUSH
46044: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
46048: LD_ADDR_VAR 0 1
46052: PUSH
46053: LD_INT 52
46055: PUSH
46056: EMPTY
46057: LIST
46058: PUSH
46059: LD_INT 22
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 25
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 25
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 25
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 25
46104: PUSH
46105: LD_INT 4
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 25
46114: PUSH
46115: LD_INT 5
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 25
46124: PUSH
46125: LD_INT 8
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: PPUSH
46146: CALL_OW 69
46150: ST_TO_ADDR
// RewardPeople ( tmp ) ;
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
46160: LD_VAR 0 1
46164: PUSH
46165: LD_EXP 19
46169: PUSH
46170: LD_EXP 20
46174: PUSH
46175: LD_EXP 21
46179: PUSH
46180: LD_EXP 22
46184: PUSH
46185: LD_EXP 23
46189: PUSH
46190: LD_EXP 24
46194: PUSH
46195: LD_EXP 25
46199: PUSH
46200: LD_EXP 26
46204: PUSH
46205: LD_EXP 27
46209: PUSH
46210: LD_EXP 29
46214: PUSH
46215: LD_EXP 30
46219: PUSH
46220: LD_EXP 31
46224: PUSH
46225: LD_EXP 32
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: DIFF
46245: PPUSH
46246: LD_STRING 11c_others
46248: PPUSH
46249: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
46253: LD_EXP 19
46257: PPUSH
46258: LD_EXP 3
46262: PUSH
46263: LD_STRING JMM
46265: STR
46266: PPUSH
46267: CALL_OW 38
// if Lisa then
46271: LD_EXP 20
46275: IFFALSE 46295
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
46277: LD_EXP 20
46281: PPUSH
46282: LD_EXP 3
46286: PUSH
46287: LD_STRING Lisa
46289: STR
46290: PPUSH
46291: CALL_OW 38
// if Donaldson then
46295: LD_EXP 21
46299: IFFALSE 46319
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
46301: LD_EXP 21
46305: PPUSH
46306: LD_EXP 3
46310: PUSH
46311: LD_STRING Donaldson
46313: STR
46314: PPUSH
46315: CALL_OW 38
// if Bobby then
46319: LD_EXP 22
46323: IFFALSE 46343
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
46325: LD_EXP 22
46329: PPUSH
46330: LD_EXP 3
46334: PUSH
46335: LD_STRING Bobby
46337: STR
46338: PPUSH
46339: CALL_OW 38
// if Cyrus then
46343: LD_EXP 23
46347: IFFALSE 46367
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
46349: LD_EXP 23
46353: PPUSH
46354: LD_EXP 3
46358: PUSH
46359: LD_STRING Cyrus
46361: STR
46362: PPUSH
46363: CALL_OW 38
// if Denis then
46367: LD_EXP 24
46371: IFFALSE 46391
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
46373: LD_EXP 24
46377: PPUSH
46378: LD_EXP 3
46382: PUSH
46383: LD_STRING Denis
46385: STR
46386: PPUSH
46387: CALL_OW 38
// if Brown then
46391: LD_EXP 25
46395: IFFALSE 46415
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
46397: LD_EXP 25
46401: PPUSH
46402: LD_EXP 3
46406: PUSH
46407: LD_STRING Brown
46409: STR
46410: PPUSH
46411: CALL_OW 38
// if Gladstone then
46415: LD_EXP 26
46419: IFFALSE 46439
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
46421: LD_EXP 26
46425: PPUSH
46426: LD_EXP 3
46430: PUSH
46431: LD_STRING Gladstone
46433: STR
46434: PPUSH
46435: CALL_OW 38
// if Houten then
46439: LD_EXP 27
46443: IFFALSE 46463
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
46445: LD_EXP 27
46449: PPUSH
46450: LD_EXP 3
46454: PUSH
46455: LD_STRING Houten
46457: STR
46458: PPUSH
46459: CALL_OW 38
// if Cornel then
46463: LD_EXP 29
46467: IFFALSE 46487
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
46469: LD_EXP 29
46473: PPUSH
46474: LD_EXP 3
46478: PUSH
46479: LD_STRING Cornel
46481: STR
46482: PPUSH
46483: CALL_OW 38
// if Gary then
46487: LD_EXP 30
46491: IFFALSE 46511
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
46493: LD_EXP 30
46497: PPUSH
46498: LD_EXP 3
46502: PUSH
46503: LD_STRING Gary
46505: STR
46506: PPUSH
46507: CALL_OW 38
// if Frank then
46511: LD_EXP 31
46515: IFFALSE 46535
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46517: LD_EXP 31
46521: PPUSH
46522: LD_EXP 3
46526: PUSH
46527: LD_STRING Frank
46529: STR
46530: PPUSH
46531: CALL_OW 38
// if Kikuchi then
46535: LD_EXP 32
46539: IFFALSE 46559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46541: LD_EXP 32
46545: PPUSH
46546: LD_EXP 3
46550: PUSH
46551: LD_STRING Kikuchi
46553: STR
46554: PPUSH
46555: CALL_OW 38
// YouWin ;
46559: CALL_OW 103
// end ; end_of_file
46563: PPOPN 1
46565: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46566: LD_INT 0
46568: PPUSH
// skirmish := false ;
46569: LD_ADDR_EXP 45
46573: PUSH
46574: LD_INT 0
46576: ST_TO_ADDR
// mc_bases := [ ] ;
46577: LD_ADDR_EXP 46
46581: PUSH
46582: EMPTY
46583: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46584: LD_ADDR_EXP 47
46588: PUSH
46589: EMPTY
46590: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46591: LD_ADDR_EXP 48
46595: PUSH
46596: EMPTY
46597: ST_TO_ADDR
// mc_need_heal := [ ] ;
46598: LD_ADDR_EXP 49
46602: PUSH
46603: EMPTY
46604: ST_TO_ADDR
// mc_healers := [ ] ;
46605: LD_ADDR_EXP 50
46609: PUSH
46610: EMPTY
46611: ST_TO_ADDR
// mc_build_list := [ ] ;
46612: LD_ADDR_EXP 51
46616: PUSH
46617: EMPTY
46618: ST_TO_ADDR
// mc_builders := [ ] ;
46619: LD_ADDR_EXP 52
46623: PUSH
46624: EMPTY
46625: ST_TO_ADDR
// mc_construct_list := [ ] ;
46626: LD_ADDR_EXP 53
46630: PUSH
46631: EMPTY
46632: ST_TO_ADDR
// mc_turret_list := [ ] ;
46633: LD_ADDR_EXP 54
46637: PUSH
46638: EMPTY
46639: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46640: LD_ADDR_EXP 55
46644: PUSH
46645: EMPTY
46646: ST_TO_ADDR
// mc_miners := [ ] ;
46647: LD_ADDR_EXP 57
46651: PUSH
46652: EMPTY
46653: ST_TO_ADDR
// mc_mines := [ ] ;
46654: LD_ADDR_EXP 56
46658: PUSH
46659: EMPTY
46660: ST_TO_ADDR
// mc_minefields := [ ] ;
46661: LD_ADDR_EXP 58
46665: PUSH
46666: EMPTY
46667: ST_TO_ADDR
// mc_crates := [ ] ;
46668: LD_ADDR_EXP 59
46672: PUSH
46673: EMPTY
46674: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46675: LD_ADDR_EXP 60
46679: PUSH
46680: EMPTY
46681: ST_TO_ADDR
// mc_vehicles := [ ] ;
46682: LD_ADDR_EXP 61
46686: PUSH
46687: EMPTY
46688: ST_TO_ADDR
// mc_attack := [ ] ;
46689: LD_ADDR_EXP 62
46693: PUSH
46694: EMPTY
46695: ST_TO_ADDR
// mc_produce := [ ] ;
46696: LD_ADDR_EXP 63
46700: PUSH
46701: EMPTY
46702: ST_TO_ADDR
// mc_defender := [ ] ;
46703: LD_ADDR_EXP 64
46707: PUSH
46708: EMPTY
46709: ST_TO_ADDR
// mc_parking := [ ] ;
46710: LD_ADDR_EXP 66
46714: PUSH
46715: EMPTY
46716: ST_TO_ADDR
// mc_scan := [ ] ;
46717: LD_ADDR_EXP 65
46721: PUSH
46722: EMPTY
46723: ST_TO_ADDR
// end ;
46724: LD_VAR 0 1
46728: RET
// export function RunMacro ; var i ; begin
46729: LD_INT 0
46731: PPUSH
46732: PPUSH
// for i = 1 to mc_bases do
46733: LD_ADDR_VAR 0 2
46737: PUSH
46738: DOUBLE
46739: LD_INT 1
46741: DEC
46742: ST_TO_ADDR
46743: LD_EXP 46
46747: PUSH
46748: FOR_TO
46749: IFFALSE 47237
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46751: LD_ADDR_EXP 47
46755: PUSH
46756: LD_EXP 47
46760: PPUSH
46761: LD_VAR 0 2
46765: PPUSH
46766: EMPTY
46767: PPUSH
46768: CALL_OW 1
46772: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46773: LD_ADDR_EXP 48
46777: PUSH
46778: LD_EXP 48
46782: PPUSH
46783: LD_VAR 0 2
46787: PPUSH
46788: EMPTY
46789: PPUSH
46790: CALL_OW 1
46794: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46795: LD_ADDR_EXP 49
46799: PUSH
46800: LD_EXP 49
46804: PPUSH
46805: LD_VAR 0 2
46809: PPUSH
46810: EMPTY
46811: PPUSH
46812: CALL_OW 1
46816: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46817: LD_ADDR_EXP 50
46821: PUSH
46822: LD_EXP 50
46826: PPUSH
46827: LD_VAR 0 2
46831: PPUSH
46832: EMPTY
46833: PUSH
46834: EMPTY
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46845: LD_ADDR_EXP 51
46849: PUSH
46850: LD_EXP 51
46854: PPUSH
46855: LD_VAR 0 2
46859: PPUSH
46860: EMPTY
46861: PPUSH
46862: CALL_OW 1
46866: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46867: LD_ADDR_EXP 53
46871: PUSH
46872: LD_EXP 53
46876: PPUSH
46877: LD_VAR 0 2
46881: PPUSH
46882: EMPTY
46883: PPUSH
46884: CALL_OW 1
46888: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46889: LD_ADDR_EXP 54
46893: PUSH
46894: LD_EXP 54
46898: PPUSH
46899: LD_VAR 0 2
46903: PPUSH
46904: EMPTY
46905: PPUSH
46906: CALL_OW 1
46910: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46911: LD_ADDR_EXP 55
46915: PUSH
46916: LD_EXP 55
46920: PPUSH
46921: LD_VAR 0 2
46925: PPUSH
46926: EMPTY
46927: PPUSH
46928: CALL_OW 1
46932: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46933: LD_ADDR_EXP 55
46937: PUSH
46938: LD_EXP 55
46942: PPUSH
46943: LD_VAR 0 2
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PPUSH
46955: EMPTY
46956: PPUSH
46957: CALL 3228 0 3
46961: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46962: LD_ADDR_EXP 55
46966: PUSH
46967: LD_EXP 55
46971: PPUSH
46972: LD_VAR 0 2
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PPUSH
46984: EMPTY
46985: PPUSH
46986: CALL 3228 0 3
46990: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46991: LD_ADDR_EXP 57
46995: PUSH
46996: LD_EXP 57
47000: PPUSH
47001: LD_VAR 0 2
47005: PPUSH
47006: EMPTY
47007: PPUSH
47008: CALL_OW 1
47012: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
47013: LD_ADDR_EXP 56
47017: PUSH
47018: LD_EXP 56
47022: PPUSH
47023: LD_VAR 0 2
47027: PPUSH
47028: EMPTY
47029: PPUSH
47030: CALL_OW 1
47034: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
47035: LD_ADDR_EXP 58
47039: PUSH
47040: LD_EXP 58
47044: PPUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: EMPTY
47051: PPUSH
47052: CALL_OW 1
47056: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
47057: LD_ADDR_EXP 59
47061: PUSH
47062: LD_EXP 59
47066: PPUSH
47067: LD_VAR 0 2
47071: PPUSH
47072: EMPTY
47073: PPUSH
47074: CALL_OW 1
47078: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47079: LD_ADDR_EXP 60
47083: PUSH
47084: LD_EXP 60
47088: PPUSH
47089: LD_VAR 0 2
47093: PPUSH
47094: EMPTY
47095: PPUSH
47096: CALL_OW 1
47100: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
47101: LD_ADDR_EXP 61
47105: PUSH
47106: LD_EXP 61
47110: PPUSH
47111: LD_VAR 0 2
47115: PPUSH
47116: EMPTY
47117: PPUSH
47118: CALL_OW 1
47122: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
47123: LD_ADDR_EXP 62
47127: PUSH
47128: LD_EXP 62
47132: PPUSH
47133: LD_VAR 0 2
47137: PPUSH
47138: EMPTY
47139: PPUSH
47140: CALL_OW 1
47144: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
47145: LD_ADDR_EXP 63
47149: PUSH
47150: LD_EXP 63
47154: PPUSH
47155: LD_VAR 0 2
47159: PPUSH
47160: EMPTY
47161: PPUSH
47162: CALL_OW 1
47166: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
47167: LD_ADDR_EXP 64
47171: PUSH
47172: LD_EXP 64
47176: PPUSH
47177: LD_VAR 0 2
47181: PPUSH
47182: EMPTY
47183: PPUSH
47184: CALL_OW 1
47188: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
47189: LD_ADDR_EXP 66
47193: PUSH
47194: LD_EXP 66
47198: PPUSH
47199: LD_VAR 0 2
47203: PPUSH
47204: LD_INT 0
47206: PPUSH
47207: CALL_OW 1
47211: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
47212: LD_ADDR_EXP 65
47216: PUSH
47217: LD_EXP 65
47221: PPUSH
47222: LD_VAR 0 2
47226: PPUSH
47227: LD_INT 0
47229: PPUSH
47230: CALL_OW 1
47234: ST_TO_ADDR
// end ;
47235: GO 46748
47237: POP
47238: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
47239: LD_INT 1
47241: PPUSH
47242: LD_INT 8
47244: PUSH
47245: LD_INT 10
47247: PUSH
47248: LD_INT 12
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_OWVAR 67
47260: ARRAY
47261: PPUSH
47262: LD_INT 3
47264: PPUSH
47265: CALL 54904 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
47269: LD_INT 2
47271: PPUSH
47272: LD_INT 6
47274: PUSH
47275: LD_INT 8
47277: PUSH
47278: LD_INT 9
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: LD_OWVAR 67
47290: ARRAY
47291: PPUSH
47292: LD_INT 2
47294: PPUSH
47295: CALL 54904 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
47299: LD_INT 3
47301: PPUSH
47302: LD_INT 6
47304: PUSH
47305: LD_INT 7
47307: PUSH
47308: LD_INT 9
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: PUSH
47316: LD_OWVAR 67
47320: ARRAY
47321: PPUSH
47322: LD_INT 1
47324: PPUSH
47325: CALL 54904 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
47329: LD_ADDR_EXP 66
47333: PUSH
47334: LD_INT 20
47336: PUSH
47337: LD_INT 21
47339: PUSH
47340: LD_INT 22
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// for i = 1 to mc_bases do
47348: LD_ADDR_VAR 0 2
47352: PUSH
47353: DOUBLE
47354: LD_INT 1
47356: DEC
47357: ST_TO_ADDR
47358: LD_EXP 46
47362: PUSH
47363: FOR_TO
47364: IFFALSE 47388
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
47366: LD_VAR 0 2
47370: PPUSH
47371: LD_EXP 40
47375: PUSH
47376: LD_VAR 0 2
47380: ARRAY
47381: PPUSH
47382: CALL 55162 0 2
47386: GO 47363
47388: POP
47389: POP
// skirmish := true ;
47390: LD_ADDR_EXP 45
47394: PUSH
47395: LD_INT 1
47397: ST_TO_ADDR
// end ;
47398: LD_VAR 0 1
47402: RET
// every 0 0$01 trigger skirmish do
47403: LD_EXP 45
47407: IFFALSE 47491
47409: GO 47411
47411: DISABLE
// begin enable ;
47412: ENABLE
// MC_CheckBuildings ( ) ;
47413: CALL 47852 0 0
// MC_CheckPeopleLife ( ) ;
47417: CALL 48070 0 0
// RaiseSailEvent ( 103 ) ;
47421: LD_INT 103
47423: PPUSH
47424: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47428: LD_INT 104
47430: PPUSH
47431: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47435: LD_INT 105
47437: PPUSH
47438: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47442: LD_INT 106
47444: PPUSH
47445: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47449: LD_INT 107
47451: PPUSH
47452: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47456: LD_INT 108
47458: PPUSH
47459: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47463: LD_INT 109
47465: PPUSH
47466: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47470: LD_INT 110
47472: PPUSH
47473: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47477: LD_INT 111
47479: PPUSH
47480: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47484: LD_INT 200
47486: PPUSH
47487: CALL_OW 427
// end ;
47491: END
// every 10 trigger skirmish do var i ;
47492: LD_EXP 45
47496: IFFALSE 47595
47498: GO 47500
47500: DISABLE
47501: LD_INT 0
47503: PPUSH
// begin enable ;
47504: ENABLE
// if not mc_bases then
47505: LD_EXP 46
47509: NOT
47510: IFFALSE 47514
// exit ;
47512: GO 47595
// for i = 1 to mc_bases do
47514: LD_ADDR_VAR 0 1
47518: PUSH
47519: DOUBLE
47520: LD_INT 1
47522: DEC
47523: ST_TO_ADDR
47524: LD_EXP 46
47528: PUSH
47529: FOR_TO
47530: IFFALSE 47593
// if mc_mines [ i ] and mc_miners [ i ] then
47532: LD_EXP 56
47536: PUSH
47537: LD_VAR 0 1
47541: ARRAY
47542: PUSH
47543: LD_EXP 57
47547: PUSH
47548: LD_VAR 0 1
47552: ARRAY
47553: AND
47554: IFFALSE 47591
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47556: LD_EXP 57
47560: PUSH
47561: LD_VAR 0 1
47565: ARRAY
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: CALL_OW 255
47575: PPUSH
47576: LD_EXP 56
47580: PUSH
47581: LD_VAR 0 1
47585: ARRAY
47586: PPUSH
47587: CALL 33649 0 2
47591: GO 47529
47593: POP
47594: POP
// end ;
47595: PPOPN 1
47597: END
// on SailEvent ( event ) do begin if event = 101 then
47598: LD_VAR 0 1
47602: PUSH
47603: LD_INT 101
47605: EQUAL
47606: IFFALSE 47612
// MC_RepairBuildings ( ) ;
47608: CALL 48616 0 0
// if event = 102 then
47612: LD_VAR 0 1
47616: PUSH
47617: LD_INT 102
47619: EQUAL
47620: IFFALSE 47626
// MC_Heal ( ) ;
47622: CALL 49010 0 0
// if event = 103 then
47626: LD_VAR 0 1
47630: PUSH
47631: LD_INT 103
47633: EQUAL
47634: IFFALSE 47640
// MC_Build ( ) ;
47636: CALL 49395 0 0
// if event = 104 then
47640: LD_VAR 0 1
47644: PUSH
47645: LD_INT 104
47647: EQUAL
47648: IFFALSE 47654
// MC_TurretWeapon ( ) ;
47650: CALL 50163 0 0
// if event = 105 then
47654: LD_VAR 0 1
47658: PUSH
47659: LD_INT 105
47661: EQUAL
47662: IFFALSE 47668
// MC_TurretCrew ( ) ;
47664: CALL 50482 0 0
// if event = 106 then
47668: LD_VAR 0 1
47672: PUSH
47673: LD_INT 106
47675: EQUAL
47676: IFFALSE 47682
// MC_PlantMines ( ) ;
47678: CALL 51275 0 0
// if event = 107 then
47682: LD_VAR 0 1
47686: PUSH
47687: LD_INT 107
47689: EQUAL
47690: IFFALSE 47696
// MC_CollectCrates ( ) ;
47692: CALL 52258 0 0
// if event = 108 then
47696: LD_VAR 0 1
47700: PUSH
47701: LD_INT 108
47703: EQUAL
47704: IFFALSE 47710
// MC_LinkRemoteControl ( ) ;
47706: CALL 53055 0 0
// if event = 109 then
47710: LD_VAR 0 1
47714: PUSH
47715: LD_INT 109
47717: EQUAL
47718: IFFALSE 47724
// MC_ProduceVehicle ( ) ;
47720: CALL 53224 0 0
// if event = 110 then
47724: LD_VAR 0 1
47728: PUSH
47729: LD_INT 110
47731: EQUAL
47732: IFFALSE 47738
// MC_SendAttack ( ) ;
47734: CALL 53612 0 0
// if event = 111 then
47738: LD_VAR 0 1
47742: PUSH
47743: LD_INT 111
47745: EQUAL
47746: IFFALSE 47752
// MC_Defend ( ) ;
47748: CALL 53720 0 0
// if event = 200 then
47752: LD_VAR 0 1
47756: PUSH
47757: LD_INT 200
47759: EQUAL
47760: IFFALSE 47766
// MC_Idle ( ) ;
47762: CALL 54655 0 0
// end ;
47766: PPOPN 1
47768: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47769: LD_INT 0
47771: PPUSH
47772: PPUSH
// if not mc_bases [ base ] or not tag then
47773: LD_EXP 46
47777: PUSH
47778: LD_VAR 0 1
47782: ARRAY
47783: NOT
47784: PUSH
47785: LD_VAR 0 2
47789: NOT
47790: OR
47791: IFFALSE 47795
// exit ;
47793: GO 47847
// for i in mc_bases [ base ] do
47795: LD_ADDR_VAR 0 4
47799: PUSH
47800: LD_EXP 46
47804: PUSH
47805: LD_VAR 0 1
47809: ARRAY
47810: PUSH
47811: FOR_IN
47812: IFFALSE 47845
// if GetTag ( i ) = tag then
47814: LD_VAR 0 4
47818: PPUSH
47819: CALL_OW 110
47823: PUSH
47824: LD_VAR 0 2
47828: EQUAL
47829: IFFALSE 47843
// SetTag ( i , 0 ) ;
47831: LD_VAR 0 4
47835: PPUSH
47836: LD_INT 0
47838: PPUSH
47839: CALL_OW 109
47843: GO 47811
47845: POP
47846: POP
// end ;
47847: LD_VAR 0 3
47851: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47852: LD_INT 0
47854: PPUSH
47855: PPUSH
47856: PPUSH
47857: PPUSH
// if not mc_bases then
47858: LD_EXP 46
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 48065
// for i = 1 to mc_bases do
47867: LD_ADDR_VAR 0 2
47871: PUSH
47872: DOUBLE
47873: LD_INT 1
47875: DEC
47876: ST_TO_ADDR
47877: LD_EXP 46
47881: PUSH
47882: FOR_TO
47883: IFFALSE 48050
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47885: LD_ADDR_VAR 0 4
47889: PUSH
47890: LD_EXP 46
47894: PUSH
47895: LD_VAR 0 2
47899: ARRAY
47900: PPUSH
47901: LD_INT 21
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 24
47916: PUSH
47917: LD_INT 1000
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PPUSH
47932: CALL_OW 72
47936: ST_TO_ADDR
// if not tmp then
47937: LD_VAR 0 4
47941: NOT
47942: IFFALSE 47968
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47944: LD_ADDR_EXP 47
47948: PUSH
47949: LD_EXP 47
47953: PPUSH
47954: LD_VAR 0 2
47958: PPUSH
47959: EMPTY
47960: PPUSH
47961: CALL_OW 1
47965: ST_TO_ADDR
// continue ;
47966: GO 47882
// end ; for j in tmp do
47968: LD_ADDR_VAR 0 3
47972: PUSH
47973: LD_VAR 0 4
47977: PUSH
47978: FOR_IN
47979: IFFALSE 48046
// if not j in mc_building_need_repair [ i ] then
47981: LD_VAR 0 3
47985: PUSH
47986: LD_EXP 47
47990: PUSH
47991: LD_VAR 0 2
47995: ARRAY
47996: IN
47997: NOT
47998: IFFALSE 48044
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
48000: LD_ADDR_EXP 47
48004: PUSH
48005: LD_EXP 47
48009: PPUSH
48010: LD_VAR 0 2
48014: PUSH
48015: LD_EXP 47
48019: PUSH
48020: LD_VAR 0 2
48024: ARRAY
48025: PUSH
48026: LD_INT 1
48028: PLUS
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PPUSH
48034: LD_VAR 0 3
48038: PPUSH
48039: CALL 3228 0 3
48043: ST_TO_ADDR
48044: GO 47978
48046: POP
48047: POP
// end ;
48048: GO 47882
48050: POP
48051: POP
// if mc_building_need_repair then
48052: LD_EXP 47
48056: IFFALSE 48065
// RaiseSailEvent ( 101 ) ;
48058: LD_INT 101
48060: PPUSH
48061: CALL_OW 427
// end ;
48065: LD_VAR 0 1
48069: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
48070: LD_INT 0
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
// if not mc_bases then
48079: LD_EXP 46
48083: NOT
48084: IFFALSE 48088
// exit ;
48086: GO 48611
// for i = 1 to mc_bases do
48088: LD_ADDR_VAR 0 2
48092: PUSH
48093: DOUBLE
48094: LD_INT 1
48096: DEC
48097: ST_TO_ADDR
48098: LD_EXP 46
48102: PUSH
48103: FOR_TO
48104: IFFALSE 48602
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
48106: LD_ADDR_VAR 0 5
48110: PUSH
48111: LD_EXP 46
48115: PUSH
48116: LD_VAR 0 2
48120: ARRAY
48121: PPUSH
48122: LD_INT 21
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 54
48140: PUSH
48141: EMPTY
48142: LIST
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: LD_INT 24
48153: PUSH
48154: LD_INT 700
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PPUSH
48174: CALL_OW 72
48178: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
48179: LD_ADDR_VAR 0 6
48183: PUSH
48184: LD_EXP 46
48188: PUSH
48189: LD_VAR 0 2
48193: ARRAY
48194: PPUSH
48195: LD_INT 21
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 54
48213: PUSH
48214: EMPTY
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 24
48226: PUSH
48227: LD_INT 250
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PPUSH
48247: CALL_OW 72
48251: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
48252: LD_ADDR_VAR 0 7
48256: PUSH
48257: LD_VAR 0 5
48261: PUSH
48262: LD_VAR 0 6
48266: DIFF
48267: ST_TO_ADDR
// if not need_heal_1 then
48268: LD_VAR 0 6
48272: NOT
48273: IFFALSE 48306
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
48275: LD_ADDR_EXP 49
48279: PUSH
48280: LD_EXP 49
48284: PPUSH
48285: LD_VAR 0 2
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PPUSH
48297: EMPTY
48298: PPUSH
48299: CALL 3228 0 3
48303: ST_TO_ADDR
48304: GO 48338
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
48306: LD_ADDR_EXP 49
48310: PUSH
48311: LD_EXP 49
48315: PPUSH
48316: LD_VAR 0 2
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PPUSH
48328: LD_VAR 0 6
48332: PPUSH
48333: CALL 3228 0 3
48337: ST_TO_ADDR
// if not need_heal_2 then
48338: LD_VAR 0 7
48342: NOT
48343: IFFALSE 48376
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
48345: LD_ADDR_EXP 49
48349: PUSH
48350: LD_EXP 49
48354: PPUSH
48355: LD_VAR 0 2
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PPUSH
48367: EMPTY
48368: PPUSH
48369: CALL 3228 0 3
48373: ST_TO_ADDR
48374: GO 48408
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48376: LD_ADDR_EXP 49
48380: PUSH
48381: LD_EXP 49
48385: PPUSH
48386: LD_VAR 0 2
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PPUSH
48398: LD_VAR 0 7
48402: PPUSH
48403: CALL 3228 0 3
48407: ST_TO_ADDR
// if need_heal_2 then
48408: LD_VAR 0 7
48412: IFFALSE 48584
// for j in need_heal_2 do
48414: LD_ADDR_VAR 0 3
48418: PUSH
48419: LD_VAR 0 7
48423: PUSH
48424: FOR_IN
48425: IFFALSE 48582
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48427: LD_ADDR_VAR 0 5
48431: PUSH
48432: LD_EXP 46
48436: PUSH
48437: LD_VAR 0 2
48441: ARRAY
48442: PPUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 30
48448: PUSH
48449: LD_INT 6
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 30
48458: PUSH
48459: LD_INT 7
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 30
48468: PUSH
48469: LD_INT 8
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 30
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 30
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 25
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: PPUSH
48515: CALL_OW 72
48519: ST_TO_ADDR
// if tmp then
48520: LD_VAR 0 5
48524: IFFALSE 48580
// begin k := NearestUnitToUnit ( tmp , j ) ;
48526: LD_ADDR_VAR 0 4
48530: PUSH
48531: LD_VAR 0 5
48535: PPUSH
48536: LD_VAR 0 3
48540: PPUSH
48541: CALL_OW 74
48545: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48546: LD_VAR 0 3
48550: PPUSH
48551: LD_VAR 0 4
48555: PPUSH
48556: CALL_OW 296
48560: PUSH
48561: LD_INT 7
48563: GREATER
48564: IFFALSE 48580
// ComMoveUnit ( j , k ) ;
48566: LD_VAR 0 3
48570: PPUSH
48571: LD_VAR 0 4
48575: PPUSH
48576: CALL_OW 112
// end ; end ;
48580: GO 48424
48582: POP
48583: POP
// if not need_heal_1 and not need_heal_2 then
48584: LD_VAR 0 6
48588: NOT
48589: PUSH
48590: LD_VAR 0 7
48594: NOT
48595: AND
48596: IFFALSE 48600
// continue ;
48598: GO 48103
// end ;
48600: GO 48103
48602: POP
48603: POP
// RaiseSailEvent ( 102 ) ;
48604: LD_INT 102
48606: PPUSH
48607: CALL_OW 427
// end ;
48611: LD_VAR 0 1
48615: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48616: LD_INT 0
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
// if not mc_bases then
48623: LD_EXP 46
48627: NOT
48628: IFFALSE 48632
// exit ;
48630: GO 49005
// for i = 1 to mc_bases do
48632: LD_ADDR_VAR 0 2
48636: PUSH
48637: DOUBLE
48638: LD_INT 1
48640: DEC
48641: ST_TO_ADDR
48642: LD_EXP 46
48646: PUSH
48647: FOR_TO
48648: IFFALSE 49003
// begin if not mc_building_need_repair [ i ] then
48650: LD_EXP 47
48654: PUSH
48655: LD_VAR 0 2
48659: ARRAY
48660: NOT
48661: IFFALSE 48699
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48663: LD_ADDR_EXP 48
48667: PUSH
48668: LD_EXP 48
48672: PPUSH
48673: LD_VAR 0 2
48677: PPUSH
48678: EMPTY
48679: PPUSH
48680: CALL_OW 1
48684: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48685: LD_VAR 0 2
48689: PPUSH
48690: LD_INT 101
48692: PPUSH
48693: CALL 47769 0 2
// continue ;
48697: GO 48647
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48699: LD_ADDR_EXP 52
48703: PUSH
48704: LD_EXP 52
48708: PPUSH
48709: LD_VAR 0 2
48713: PPUSH
48714: EMPTY
48715: PPUSH
48716: CALL_OW 1
48720: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48721: LD_VAR 0 2
48725: PPUSH
48726: LD_INT 103
48728: PPUSH
48729: CALL 47769 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48733: LD_ADDR_VAR 0 5
48737: PUSH
48738: LD_EXP 46
48742: PUSH
48743: LD_VAR 0 2
48747: ARRAY
48748: PPUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 25
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 25
48764: PUSH
48765: LD_INT 16
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: PPUSH
48780: CALL_OW 72
48784: ST_TO_ADDR
// if not tmp then
48785: LD_VAR 0 5
48789: NOT
48790: IFFALSE 48794
// continue ;
48792: GO 48647
// for j in tmp do
48794: LD_ADDR_VAR 0 3
48798: PUSH
48799: LD_VAR 0 5
48803: PUSH
48804: FOR_IN
48805: IFFALSE 48999
// begin if mc_need_heal [ i ] then
48807: LD_EXP 49
48811: PUSH
48812: LD_VAR 0 2
48816: ARRAY
48817: IFFALSE 48865
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48819: LD_VAR 0 3
48823: PUSH
48824: LD_EXP 49
48828: PUSH
48829: LD_VAR 0 2
48833: ARRAY
48834: PUSH
48835: LD_INT 1
48837: ARRAY
48838: IN
48839: PUSH
48840: LD_VAR 0 3
48844: PUSH
48845: LD_EXP 49
48849: PUSH
48850: LD_VAR 0 2
48854: ARRAY
48855: PUSH
48856: LD_INT 2
48858: ARRAY
48859: IN
48860: OR
48861: IFFALSE 48865
// continue ;
48863: GO 48804
// if IsInUnit ( j ) then
48865: LD_VAR 0 3
48869: PPUSH
48870: CALL_OW 310
48874: IFFALSE 48885
// ComExitBuilding ( j ) ;
48876: LD_VAR 0 3
48880: PPUSH
48881: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48885: LD_VAR 0 3
48889: PUSH
48890: LD_EXP 48
48894: PUSH
48895: LD_VAR 0 2
48899: ARRAY
48900: IN
48901: NOT
48902: IFFALSE 48960
// begin SetTag ( j , 101 ) ;
48904: LD_VAR 0 3
48908: PPUSH
48909: LD_INT 101
48911: PPUSH
48912: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48916: LD_ADDR_EXP 48
48920: PUSH
48921: LD_EXP 48
48925: PPUSH
48926: LD_VAR 0 2
48930: PUSH
48931: LD_EXP 48
48935: PUSH
48936: LD_VAR 0 2
48940: ARRAY
48941: PUSH
48942: LD_INT 1
48944: PLUS
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PPUSH
48950: LD_VAR 0 3
48954: PPUSH
48955: CALL 3228 0 3
48959: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48960: LD_INT 3
48962: PPUSH
48963: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48967: LD_VAR 0 3
48971: PPUSH
48972: LD_EXP 47
48976: PUSH
48977: LD_VAR 0 2
48981: ARRAY
48982: PPUSH
48983: LD_VAR 0 3
48987: PPUSH
48988: CALL_OW 74
48992: PPUSH
48993: CALL_OW 130
// end ;
48997: GO 48804
48999: POP
49000: POP
// end ;
49001: GO 48647
49003: POP
49004: POP
// end ;
49005: LD_VAR 0 1
49009: RET
// export function MC_Heal ; var i , j , tmp ; begin
49010: LD_INT 0
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
// if not mc_bases then
49016: LD_EXP 46
49020: NOT
49021: IFFALSE 49025
// exit ;
49023: GO 49390
// for i = 1 to mc_bases do
49025: LD_ADDR_VAR 0 2
49029: PUSH
49030: DOUBLE
49031: LD_INT 1
49033: DEC
49034: ST_TO_ADDR
49035: LD_EXP 46
49039: PUSH
49040: FOR_TO
49041: IFFALSE 49388
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
49043: LD_EXP 49
49047: PUSH
49048: LD_VAR 0 2
49052: ARRAY
49053: PUSH
49054: LD_INT 1
49056: ARRAY
49057: NOT
49058: PUSH
49059: LD_EXP 49
49063: PUSH
49064: LD_VAR 0 2
49068: ARRAY
49069: PUSH
49070: LD_INT 2
49072: ARRAY
49073: NOT
49074: AND
49075: IFFALSE 49113
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
49077: LD_ADDR_EXP 50
49081: PUSH
49082: LD_EXP 50
49086: PPUSH
49087: LD_VAR 0 2
49091: PPUSH
49092: EMPTY
49093: PPUSH
49094: CALL_OW 1
49098: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
49099: LD_VAR 0 2
49103: PPUSH
49104: LD_INT 102
49106: PPUSH
49107: CALL 47769 0 2
// continue ;
49111: GO 49040
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
49113: LD_ADDR_VAR 0 4
49117: PUSH
49118: LD_EXP 46
49122: PUSH
49123: LD_VAR 0 2
49127: ARRAY
49128: PPUSH
49129: LD_INT 25
49131: PUSH
49132: LD_INT 4
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PPUSH
49139: CALL_OW 72
49143: ST_TO_ADDR
// if not tmp then
49144: LD_VAR 0 4
49148: NOT
49149: IFFALSE 49153
// continue ;
49151: GO 49040
// for j in tmp do
49153: LD_ADDR_VAR 0 3
49157: PUSH
49158: LD_VAR 0 4
49162: PUSH
49163: FOR_IN
49164: IFFALSE 49384
// begin if IsInUnit ( j ) then
49166: LD_VAR 0 3
49170: PPUSH
49171: CALL_OW 310
49175: IFFALSE 49186
// ComExitBuilding ( j ) ;
49177: LD_VAR 0 3
49181: PPUSH
49182: CALL_OW 122
// if not j in mc_healers [ i ] then
49186: LD_VAR 0 3
49190: PUSH
49191: LD_EXP 50
49195: PUSH
49196: LD_VAR 0 2
49200: ARRAY
49201: IN
49202: NOT
49203: IFFALSE 49249
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
49205: LD_ADDR_EXP 50
49209: PUSH
49210: LD_EXP 50
49214: PPUSH
49215: LD_VAR 0 2
49219: PUSH
49220: LD_EXP 50
49224: PUSH
49225: LD_VAR 0 2
49229: ARRAY
49230: PUSH
49231: LD_INT 1
49233: PLUS
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PPUSH
49239: LD_VAR 0 3
49243: PPUSH
49244: CALL 3228 0 3
49248: ST_TO_ADDR
// if not GetTag ( j ) then
49249: LD_VAR 0 3
49253: PPUSH
49254: CALL_OW 110
49258: NOT
49259: IFFALSE 49273
// SetTag ( j , 102 ) ;
49261: LD_VAR 0 3
49265: PPUSH
49266: LD_INT 102
49268: PPUSH
49269: CALL_OW 109
// Wait ( 3 ) ;
49273: LD_INT 3
49275: PPUSH
49276: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
49280: LD_EXP 49
49284: PUSH
49285: LD_VAR 0 2
49289: ARRAY
49290: PUSH
49291: LD_INT 1
49293: ARRAY
49294: IFFALSE 49326
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
49296: LD_VAR 0 3
49300: PPUSH
49301: LD_EXP 49
49305: PUSH
49306: LD_VAR 0 2
49310: ARRAY
49311: PUSH
49312: LD_INT 1
49314: ARRAY
49315: PUSH
49316: LD_INT 1
49318: ARRAY
49319: PPUSH
49320: CALL_OW 128
49324: GO 49382
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49326: LD_VAR 0 3
49330: PPUSH
49331: CALL_OW 314
49335: NOT
49336: PUSH
49337: LD_EXP 49
49341: PUSH
49342: LD_VAR 0 2
49346: ARRAY
49347: PUSH
49348: LD_INT 2
49350: ARRAY
49351: AND
49352: IFFALSE 49382
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49354: LD_VAR 0 3
49358: PPUSH
49359: LD_EXP 49
49363: PUSH
49364: LD_VAR 0 2
49368: ARRAY
49369: PUSH
49370: LD_INT 2
49372: ARRAY
49373: PUSH
49374: LD_INT 1
49376: ARRAY
49377: PPUSH
49378: CALL_OW 128
// end ;
49382: GO 49163
49384: POP
49385: POP
// end ;
49386: GO 49040
49388: POP
49389: POP
// end ;
49390: LD_VAR 0 1
49394: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
// if not mc_bases then
49401: LD_EXP 46
49405: NOT
49406: IFFALSE 49410
// exit ;
49408: GO 50158
// for i = 1 to mc_bases do
49410: LD_ADDR_VAR 0 2
49414: PUSH
49415: DOUBLE
49416: LD_INT 1
49418: DEC
49419: ST_TO_ADDR
49420: LD_EXP 46
49424: PUSH
49425: FOR_TO
49426: IFFALSE 50156
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
49428: LD_EXP 51
49432: PUSH
49433: LD_VAR 0 2
49437: ARRAY
49438: NOT
49439: PUSH
49440: LD_EXP 53
49444: PUSH
49445: LD_VAR 0 2
49449: ARRAY
49450: NOT
49451: AND
49452: IFFALSE 49490
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49454: LD_ADDR_EXP 52
49458: PUSH
49459: LD_EXP 52
49463: PPUSH
49464: LD_VAR 0 2
49468: PPUSH
49469: EMPTY
49470: PPUSH
49471: CALL_OW 1
49475: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49476: LD_VAR 0 2
49480: PPUSH
49481: LD_INT 103
49483: PPUSH
49484: CALL 47769 0 2
// continue ;
49488: GO 49425
// end ; if mc_construct_list [ i ] then
49490: LD_EXP 53
49494: PUSH
49495: LD_VAR 0 2
49499: ARRAY
49500: IFFALSE 49705
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49502: LD_ADDR_VAR 0 4
49506: PUSH
49507: LD_EXP 46
49511: PUSH
49512: LD_VAR 0 2
49516: ARRAY
49517: PPUSH
49518: LD_INT 25
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PPUSH
49528: CALL_OW 72
49532: PUSH
49533: LD_EXP 48
49537: PUSH
49538: LD_VAR 0 2
49542: ARRAY
49543: DIFF
49544: ST_TO_ADDR
// if not tmp then
49545: LD_VAR 0 4
49549: NOT
49550: IFFALSE 49554
// continue ;
49552: GO 49425
// for j in tmp do
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: LD_VAR 0 4
49563: PUSH
49564: FOR_IN
49565: IFFALSE 49701
// begin if not mc_builders [ i ] then
49567: LD_EXP 52
49571: PUSH
49572: LD_VAR 0 2
49576: ARRAY
49577: NOT
49578: IFFALSE 49636
// begin SetTag ( j , 103 ) ;
49580: LD_VAR 0 3
49584: PPUSH
49585: LD_INT 103
49587: PPUSH
49588: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49592: LD_ADDR_EXP 52
49596: PUSH
49597: LD_EXP 52
49601: PPUSH
49602: LD_VAR 0 2
49606: PUSH
49607: LD_EXP 52
49611: PUSH
49612: LD_VAR 0 2
49616: ARRAY
49617: PUSH
49618: LD_INT 1
49620: PLUS
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PPUSH
49626: LD_VAR 0 3
49630: PPUSH
49631: CALL 3228 0 3
49635: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49636: LD_VAR 0 3
49640: PPUSH
49641: CALL_OW 310
49645: IFFALSE 49656
// ComExitBuilding ( j ) ;
49647: LD_VAR 0 3
49651: PPUSH
49652: CALL_OW 122
// wait ( 3 ) ;
49656: LD_INT 3
49658: PPUSH
49659: CALL_OW 67
// if not HasTask ( j ) then
49663: LD_VAR 0 3
49667: PPUSH
49668: CALL_OW 314
49672: NOT
49673: IFFALSE 49699
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49675: LD_VAR 0 3
49679: PPUSH
49680: LD_EXP 53
49684: PUSH
49685: LD_VAR 0 2
49689: ARRAY
49690: PUSH
49691: LD_INT 1
49693: ARRAY
49694: PPUSH
49695: CALL 5646 0 2
// end ;
49699: GO 49564
49701: POP
49702: POP
// end else
49703: GO 50154
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49705: LD_EXP 51
49709: PUSH
49710: LD_VAR 0 2
49714: ARRAY
49715: PUSH
49716: LD_EXP 46
49720: PUSH
49721: LD_VAR 0 2
49725: ARRAY
49726: PPUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 30
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 30
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: PPUSH
49755: CALL_OW 72
49759: AND
49760: IFFALSE 50154
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49762: LD_EXP 46
49766: PUSH
49767: LD_VAR 0 2
49771: ARRAY
49772: PPUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 30
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 30
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: PPUSH
49801: CALL_OW 72
49805: PUSH
49806: LD_INT 1
49808: ARRAY
49809: PPUSH
49810: LD_EXP 51
49814: PUSH
49815: LD_VAR 0 2
49819: ARRAY
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: PUSH
49825: LD_INT 1
49827: ARRAY
49828: PPUSH
49829: LD_EXP 51
49833: PUSH
49834: LD_VAR 0 2
49838: ARRAY
49839: PUSH
49840: LD_INT 1
49842: ARRAY
49843: PUSH
49844: LD_INT 2
49846: ARRAY
49847: PPUSH
49848: LD_EXP 51
49852: PUSH
49853: LD_VAR 0 2
49857: ARRAY
49858: PUSH
49859: LD_INT 1
49861: ARRAY
49862: PUSH
49863: LD_INT 3
49865: ARRAY
49866: PPUSH
49867: LD_EXP 51
49871: PUSH
49872: LD_VAR 0 2
49876: ARRAY
49877: PUSH
49878: LD_INT 1
49880: ARRAY
49881: PUSH
49882: LD_INT 4
49884: ARRAY
49885: PPUSH
49886: CALL 8976 0 5
49890: IFFALSE 50154
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49892: LD_ADDR_VAR 0 4
49896: PUSH
49897: LD_EXP 46
49901: PUSH
49902: LD_VAR 0 2
49906: ARRAY
49907: PPUSH
49908: LD_INT 25
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PPUSH
49918: CALL_OW 72
49922: PUSH
49923: LD_EXP 48
49927: PUSH
49928: LD_VAR 0 2
49932: ARRAY
49933: DIFF
49934: ST_TO_ADDR
// if not tmp then
49935: LD_VAR 0 4
49939: NOT
49940: IFFALSE 49944
// continue ;
49942: GO 49425
// for j in tmp do
49944: LD_ADDR_VAR 0 3
49948: PUSH
49949: LD_VAR 0 4
49953: PUSH
49954: FOR_IN
49955: IFFALSE 50152
// begin if not mc_builders [ i ] then
49957: LD_EXP 52
49961: PUSH
49962: LD_VAR 0 2
49966: ARRAY
49967: NOT
49968: IFFALSE 50026
// begin SetTag ( j , 103 ) ;
49970: LD_VAR 0 3
49974: PPUSH
49975: LD_INT 103
49977: PPUSH
49978: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49982: LD_ADDR_EXP 52
49986: PUSH
49987: LD_EXP 52
49991: PPUSH
49992: LD_VAR 0 2
49996: PUSH
49997: LD_EXP 52
50001: PUSH
50002: LD_VAR 0 2
50006: ARRAY
50007: PUSH
50008: LD_INT 1
50010: PLUS
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PPUSH
50016: LD_VAR 0 3
50020: PPUSH
50021: CALL 3228 0 3
50025: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50026: LD_VAR 0 3
50030: PPUSH
50031: CALL_OW 310
50035: IFFALSE 50046
// ComExitBuilding ( j ) ;
50037: LD_VAR 0 3
50041: PPUSH
50042: CALL_OW 122
// wait ( 3 ) ;
50046: LD_INT 3
50048: PPUSH
50049: CALL_OW 67
// if not HasTask ( j ) then
50053: LD_VAR 0 3
50057: PPUSH
50058: CALL_OW 314
50062: NOT
50063: IFFALSE 50150
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
50065: LD_VAR 0 3
50069: PPUSH
50070: LD_EXP 51
50074: PUSH
50075: LD_VAR 0 2
50079: ARRAY
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PPUSH
50089: LD_EXP 51
50093: PUSH
50094: LD_VAR 0 2
50098: ARRAY
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: PUSH
50104: LD_INT 2
50106: ARRAY
50107: PPUSH
50108: LD_EXP 51
50112: PUSH
50113: LD_VAR 0 2
50117: ARRAY
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: PUSH
50123: LD_INT 3
50125: ARRAY
50126: PPUSH
50127: LD_EXP 51
50131: PUSH
50132: LD_VAR 0 2
50136: ARRAY
50137: PUSH
50138: LD_INT 1
50140: ARRAY
50141: PUSH
50142: LD_INT 4
50144: ARRAY
50145: PPUSH
50146: CALL_OW 145
// end ;
50150: GO 49954
50152: POP
50153: POP
// end ; end ;
50154: GO 49425
50156: POP
50157: POP
// end ;
50158: LD_VAR 0 1
50162: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
50163: LD_INT 0
50165: PPUSH
50166: PPUSH
50167: PPUSH
50168: PPUSH
50169: PPUSH
50170: PPUSH
50171: PPUSH
// if not mc_bases then
50172: LD_EXP 46
50176: NOT
50177: IFFALSE 50181
// exit ;
50179: GO 50477
// for i = 1 to mc_bases do
50181: LD_ADDR_VAR 0 2
50185: PUSH
50186: DOUBLE
50187: LD_INT 1
50189: DEC
50190: ST_TO_ADDR
50191: LD_EXP 46
50195: PUSH
50196: FOR_TO
50197: IFFALSE 50475
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
50199: LD_EXP 54
50203: PUSH
50204: LD_VAR 0 2
50208: ARRAY
50209: NOT
50210: PUSH
50211: LD_EXP 46
50215: PUSH
50216: LD_VAR 0 2
50220: ARRAY
50221: PPUSH
50222: LD_INT 30
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PPUSH
50232: CALL_OW 72
50236: NOT
50237: OR
50238: IFFALSE 50242
// continue ;
50240: GO 50196
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
50242: LD_EXP 54
50246: PUSH
50247: LD_VAR 0 2
50251: ARRAY
50252: PUSH
50253: LD_INT 1
50255: ARRAY
50256: PPUSH
50257: CALL_OW 269
50261: IFFALSE 50327
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
50263: LD_ADDR_VAR 0 4
50267: PUSH
50268: LD_EXP 54
50272: PUSH
50273: LD_VAR 0 2
50277: ARRAY
50278: PPUSH
50279: LD_INT 1
50281: PPUSH
50282: CALL_OW 3
50286: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
50287: LD_ADDR_EXP 54
50291: PUSH
50292: LD_EXP 54
50296: PPUSH
50297: LD_VAR 0 2
50301: PPUSH
50302: LD_VAR 0 4
50306: PPUSH
50307: CALL_OW 1
50311: ST_TO_ADDR
// if not mc_turret_list [ i ] then
50312: LD_EXP 54
50316: PUSH
50317: LD_VAR 0 2
50321: ARRAY
50322: NOT
50323: IFFALSE 50327
// continue ;
50325: GO 50196
// end ; busy := false ;
50327: LD_ADDR_VAR 0 6
50331: PUSH
50332: LD_INT 0
50334: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50335: LD_ADDR_VAR 0 4
50339: PUSH
50340: LD_EXP 46
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: PPUSH
50351: LD_INT 30
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PPUSH
50361: CALL_OW 72
50365: ST_TO_ADDR
// for j in tmp do
50366: LD_ADDR_VAR 0 3
50370: PUSH
50371: LD_VAR 0 4
50375: PUSH
50376: FOR_IN
50377: IFFALSE 50405
// if not BuildingStatus ( j ) = bs_idle then
50379: LD_VAR 0 3
50383: PPUSH
50384: CALL_OW 461
50388: PUSH
50389: LD_INT 2
50391: EQUAL
50392: NOT
50393: IFFALSE 50403
// busy := true ;
50395: LD_ADDR_VAR 0 6
50399: PUSH
50400: LD_INT 1
50402: ST_TO_ADDR
50403: GO 50376
50405: POP
50406: POP
// if busy then
50407: LD_VAR 0 6
50411: IFFALSE 50415
// continue ;
50413: GO 50196
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
50415: LD_ADDR_VAR 0 7
50419: PUSH
50420: LD_EXP 54
50424: PUSH
50425: LD_VAR 0 2
50429: ARRAY
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: PPUSH
50435: CALL 7381 0 1
50439: ST_TO_ADDR
// if not weapon then
50440: LD_VAR 0 7
50444: NOT
50445: IFFALSE 50449
// continue ;
50447: GO 50196
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
50449: LD_EXP 54
50453: PUSH
50454: LD_VAR 0 2
50458: ARRAY
50459: PUSH
50460: LD_INT 1
50462: ARRAY
50463: PPUSH
50464: LD_VAR 0 7
50468: PPUSH
50469: CALL_OW 148
// end ;
50473: GO 50196
50475: POP
50476: POP
// end ;
50477: LD_VAR 0 1
50481: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
50482: LD_INT 0
50484: PPUSH
50485: PPUSH
50486: PPUSH
50487: PPUSH
50488: PPUSH
50489: PPUSH
50490: PPUSH
// if not mc_bases then
50491: LD_EXP 46
50495: NOT
50496: IFFALSE 50500
// exit ;
50498: GO 51270
// for i = 1 to mc_bases do
50500: LD_ADDR_VAR 0 2
50504: PUSH
50505: DOUBLE
50506: LD_INT 1
50508: DEC
50509: ST_TO_ADDR
50510: LD_EXP 46
50514: PUSH
50515: FOR_TO
50516: IFFALSE 51268
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50518: LD_ADDR_VAR 0 7
50522: PUSH
50523: LD_EXP 46
50527: PUSH
50528: LD_VAR 0 2
50532: ARRAY
50533: PPUSH
50534: LD_INT 24
50536: PUSH
50537: LD_INT 375
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 30
50549: PUSH
50550: LD_INT 32
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 30
50559: PUSH
50560: LD_INT 31
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 58
50574: PUSH
50575: EMPTY
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: PPUSH
50583: CALL_OW 72
50587: ST_TO_ADDR
// if not x then
50588: LD_VAR 0 7
50592: NOT
50593: IFFALSE 50597
// continue ;
50595: GO 50515
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50597: LD_ADDR_EXP 55
50601: PUSH
50602: LD_EXP 55
50606: PPUSH
50607: LD_VAR 0 2
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PPUSH
50619: LD_VAR 0 7
50623: PPUSH
50624: CALL 3228 0 3
50628: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50629: LD_EXP 55
50633: PUSH
50634: LD_VAR 0 2
50638: ARRAY
50639: NOT
50640: PUSH
50641: LD_EXP 55
50645: PUSH
50646: LD_VAR 0 2
50650: ARRAY
50651: PUSH
50652: LD_INT 1
50654: ARRAY
50655: NOT
50656: OR
50657: IFFALSE 50661
// continue ;
50659: GO 50515
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50661: LD_EXP 55
50665: PUSH
50666: LD_VAR 0 2
50670: ARRAY
50671: PUSH
50672: LD_INT 1
50674: ARRAY
50675: PUSH
50676: LD_INT 1
50678: ARRAY
50679: PPUSH
50680: CALL_OW 313
50684: PUSH
50685: LD_INT 0
50687: EQUAL
50688: IFFALSE 51266
// if not mc_empty_turret_list [ i ] [ 2 ] then
50690: LD_EXP 55
50694: PUSH
50695: LD_VAR 0 2
50699: ARRAY
50700: PUSH
50701: LD_INT 2
50703: ARRAY
50704: NOT
50705: IFFALSE 50964
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50707: LD_ADDR_VAR 0 6
50711: PUSH
50712: LD_EXP 46
50716: PUSH
50717: LD_VAR 0 2
50721: ARRAY
50722: PUSH
50723: LD_EXP 62
50727: PUSH
50728: LD_VAR 0 2
50732: ARRAY
50733: DIFF
50734: PPUSH
50735: LD_INT 25
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 54
50750: PUSH
50751: EMPTY
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PPUSH
50762: CALL_OW 72
50766: ST_TO_ADDR
// if tmp2 then
50767: LD_VAR 0 6
50771: IFFALSE 50813
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50773: LD_ADDR_EXP 55
50777: PUSH
50778: LD_EXP 55
50782: PPUSH
50783: LD_VAR 0 2
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PPUSH
50795: LD_VAR 0 6
50799: PUSH
50800: LD_INT 1
50802: ARRAY
50803: PPUSH
50804: CALL 3228 0 3
50808: ST_TO_ADDR
// break ;
50809: GO 51268
// end else
50811: GO 50962
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50813: LD_ADDR_VAR 0 5
50817: PUSH
50818: LD_EXP 46
50822: PUSH
50823: LD_VAR 0 2
50827: ARRAY
50828: PPUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 30
50834: PUSH
50835: LD_INT 4
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 30
50844: PUSH
50845: LD_INT 5
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: PPUSH
50857: CALL_OW 72
50861: ST_TO_ADDR
// if not tmp then
50862: LD_VAR 0 5
50866: NOT
50867: IFFALSE 50871
// continue ;
50869: GO 50515
// for j in tmp do
50871: LD_ADDR_VAR 0 3
50875: PUSH
50876: LD_VAR 0 5
50880: PUSH
50881: FOR_IN
50882: IFFALSE 50960
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50884: LD_ADDR_VAR 0 4
50888: PUSH
50889: LD_VAR 0 3
50893: PPUSH
50894: CALL_OW 313
50898: PPUSH
50899: LD_INT 25
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PPUSH
50909: CALL_OW 72
50913: ST_TO_ADDR
// if t then
50914: LD_VAR 0 4
50918: IFFALSE 50958
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50920: LD_ADDR_EXP 55
50924: PUSH
50925: LD_EXP 55
50929: PPUSH
50930: LD_VAR 0 2
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PPUSH
50942: LD_VAR 0 4
50946: PUSH
50947: LD_INT 1
50949: ARRAY
50950: PPUSH
50951: CALL 3228 0 3
50955: ST_TO_ADDR
// break ;
50956: GO 50960
// end ; end ;
50958: GO 50881
50960: POP
50961: POP
// end ; end else
50962: GO 51266
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50964: LD_EXP 55
50968: PUSH
50969: LD_VAR 0 2
50973: ARRAY
50974: PUSH
50975: LD_INT 2
50977: ARRAY
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: PPUSH
50983: CALL_OW 301
50987: IFFALSE 51020
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50989: LD_ADDR_EXP 55
50993: PUSH
50994: LD_EXP 55
50998: PPUSH
50999: LD_VAR 0 2
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PPUSH
51011: EMPTY
51012: PPUSH
51013: CALL 3228 0 3
51017: ST_TO_ADDR
// break ;
51018: GO 51268
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
51020: LD_EXP 55
51024: PUSH
51025: LD_VAR 0 2
51029: ARRAY
51030: PUSH
51031: LD_INT 2
51033: ARRAY
51034: PUSH
51035: LD_INT 1
51037: ARRAY
51038: PPUSH
51039: CALL_OW 314
51043: NOT
51044: PUSH
51045: LD_EXP 55
51049: PUSH
51050: LD_VAR 0 2
51054: ARRAY
51055: PUSH
51056: LD_INT 2
51058: ARRAY
51059: PUSH
51060: LD_INT 1
51062: ARRAY
51063: PUSH
51064: LD_EXP 55
51068: PUSH
51069: LD_VAR 0 2
51073: ARRAY
51074: PUSH
51075: LD_INT 1
51077: ARRAY
51078: PUSH
51079: LD_INT 1
51081: ARRAY
51082: PPUSH
51083: CALL_OW 313
51087: IN
51088: NOT
51089: AND
51090: IFFALSE 51266
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
51092: LD_EXP 55
51096: PUSH
51097: LD_VAR 0 2
51101: ARRAY
51102: PUSH
51103: LD_INT 2
51105: ARRAY
51106: PUSH
51107: LD_INT 1
51109: ARRAY
51110: PPUSH
51111: CALL_OW 310
51115: IFFALSE 51140
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51117: LD_EXP 55
51121: PUSH
51122: LD_VAR 0 2
51126: ARRAY
51127: PUSH
51128: LD_INT 2
51130: ARRAY
51131: PUSH
51132: LD_INT 1
51134: ARRAY
51135: PPUSH
51136: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
51140: LD_EXP 55
51144: PUSH
51145: LD_VAR 0 2
51149: ARRAY
51150: PUSH
51151: LD_INT 2
51153: ARRAY
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: PPUSH
51159: LD_EXP 55
51163: PUSH
51164: LD_VAR 0 2
51168: ARRAY
51169: PUSH
51170: LD_INT 1
51172: ARRAY
51173: PUSH
51174: LD_INT 1
51176: ARRAY
51177: PPUSH
51178: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
51182: LD_INT 35
51184: PPUSH
51185: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
51189: LD_EXP 55
51193: PUSH
51194: LD_VAR 0 2
51198: ARRAY
51199: PUSH
51200: LD_INT 2
51202: ARRAY
51203: NOT
51204: IFFALSE 51208
// break ;
51206: GO 51233
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51208: LD_EXP 55
51212: PUSH
51213: LD_VAR 0 2
51217: ARRAY
51218: PUSH
51219: LD_INT 2
51221: ARRAY
51222: PUSH
51223: LD_INT 1
51225: ARRAY
51226: PPUSH
51227: CALL_OW 310
51231: IFFALSE 51182
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
51233: LD_ADDR_EXP 55
51237: PUSH
51238: LD_EXP 55
51242: PPUSH
51243: LD_VAR 0 2
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PPUSH
51255: EMPTY
51256: PPUSH
51257: CALL 3228 0 3
51261: ST_TO_ADDR
// exit ;
51262: POP
51263: POP
51264: GO 51270
// end ; end ; end ;
51266: GO 50515
51268: POP
51269: POP
// end ;
51270: LD_VAR 0 1
51274: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
51275: LD_INT 0
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
// if not mc_bases then
51283: LD_EXP 46
51287: NOT
51288: IFFALSE 51292
// exit ;
51290: GO 52253
// for i = 1 to mc_bases do
51292: LD_ADDR_VAR 0 2
51296: PUSH
51297: DOUBLE
51298: LD_INT 1
51300: DEC
51301: ST_TO_ADDR
51302: LD_EXP 46
51306: PUSH
51307: FOR_TO
51308: IFFALSE 52251
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
51310: LD_EXP 56
51314: PUSH
51315: LD_VAR 0 2
51319: ARRAY
51320: NOT
51321: PUSH
51322: LD_EXP 56
51326: PUSH
51327: LD_VAR 0 2
51331: ARRAY
51332: PUSH
51333: LD_EXP 57
51337: PUSH
51338: LD_VAR 0 2
51342: ARRAY
51343: EQUAL
51344: OR
51345: IFFALSE 51349
// continue ;
51347: GO 51307
// if mc_miners [ i ] then
51349: LD_EXP 57
51353: PUSH
51354: LD_VAR 0 2
51358: ARRAY
51359: IFFALSE 51938
// begin k := 1 ;
51361: LD_ADDR_VAR 0 4
51365: PUSH
51366: LD_INT 1
51368: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
51369: LD_ADDR_VAR 0 3
51373: PUSH
51374: DOUBLE
51375: LD_EXP 57
51379: PUSH
51380: LD_VAR 0 2
51384: ARRAY
51385: INC
51386: ST_TO_ADDR
51387: LD_INT 1
51389: PUSH
51390: FOR_DOWNTO
51391: IFFALSE 51936
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51393: LD_EXP 57
51397: PUSH
51398: LD_VAR 0 2
51402: ARRAY
51403: PUSH
51404: LD_VAR 0 3
51408: ARRAY
51409: PPUSH
51410: CALL_OW 301
51414: IFFALSE 51477
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51416: LD_ADDR_VAR 0 5
51420: PUSH
51421: LD_EXP 57
51425: PUSH
51426: LD_VAR 0 2
51430: ARRAY
51431: PUSH
51432: LD_EXP 57
51436: PUSH
51437: LD_VAR 0 2
51441: ARRAY
51442: PUSH
51443: LD_VAR 0 3
51447: ARRAY
51448: DIFF
51449: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51450: LD_ADDR_EXP 57
51454: PUSH
51455: LD_EXP 57
51459: PPUSH
51460: LD_VAR 0 2
51464: PPUSH
51465: LD_VAR 0 5
51469: PPUSH
51470: CALL_OW 1
51474: ST_TO_ADDR
// continue ;
51475: GO 51390
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
51477: LD_EXP 57
51481: PUSH
51482: LD_VAR 0 2
51486: ARRAY
51487: PUSH
51488: LD_VAR 0 3
51492: ARRAY
51493: PPUSH
51494: CALL 2729 0 1
51498: PUSH
51499: LD_EXP 57
51503: PUSH
51504: LD_VAR 0 2
51508: ARRAY
51509: PUSH
51510: LD_VAR 0 3
51514: ARRAY
51515: PPUSH
51516: CALL_OW 255
51520: PPUSH
51521: LD_EXP 56
51525: PUSH
51526: LD_VAR 0 2
51530: ARRAY
51531: PUSH
51532: LD_VAR 0 4
51536: ARRAY
51537: PUSH
51538: LD_INT 1
51540: ARRAY
51541: PPUSH
51542: LD_EXP 56
51546: PUSH
51547: LD_VAR 0 2
51551: ARRAY
51552: PUSH
51553: LD_VAR 0 4
51557: ARRAY
51558: PUSH
51559: LD_INT 2
51561: ARRAY
51562: PPUSH
51563: LD_INT 15
51565: PPUSH
51566: CALL 3722 0 4
51570: PUSH
51571: LD_INT 4
51573: ARRAY
51574: PUSH
51575: LD_EXP 57
51579: PUSH
51580: LD_VAR 0 2
51584: ARRAY
51585: PUSH
51586: LD_VAR 0 3
51590: ARRAY
51591: PPUSH
51592: LD_INT 10
51594: PPUSH
51595: CALL 5419 0 2
51599: PUSH
51600: LD_INT 4
51602: ARRAY
51603: OR
51604: AND
51605: IFFALSE 51628
// ComStop ( mc_miners [ i ] [ j ] ) ;
51607: LD_EXP 57
51611: PUSH
51612: LD_VAR 0 2
51616: ARRAY
51617: PUSH
51618: LD_VAR 0 3
51622: ARRAY
51623: PPUSH
51624: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 then
51628: LD_EXP 57
51632: PUSH
51633: LD_VAR 0 2
51637: ARRAY
51638: PUSH
51639: LD_VAR 0 3
51643: ARRAY
51644: PPUSH
51645: CALL_OW 257
51649: PUSH
51650: LD_INT 1
51652: EQUAL
51653: PUSH
51654: LD_EXP 57
51658: PUSH
51659: LD_VAR 0 2
51663: ARRAY
51664: PUSH
51665: LD_VAR 0 3
51669: ARRAY
51670: PPUSH
51671: CALL_OW 459
51675: NOT
51676: AND
51677: PUSH
51678: LD_EXP 57
51682: PUSH
51683: LD_VAR 0 2
51687: ARRAY
51688: PUSH
51689: LD_VAR 0 3
51693: ARRAY
51694: PPUSH
51695: CALL_OW 255
51699: PPUSH
51700: LD_EXP 56
51704: PUSH
51705: LD_VAR 0 2
51709: ARRAY
51710: PUSH
51711: LD_VAR 0 4
51715: ARRAY
51716: PUSH
51717: LD_INT 1
51719: ARRAY
51720: PPUSH
51721: LD_EXP 56
51725: PUSH
51726: LD_VAR 0 2
51730: ARRAY
51731: PUSH
51732: LD_VAR 0 4
51736: ARRAY
51737: PUSH
51738: LD_INT 2
51740: ARRAY
51741: PPUSH
51742: LD_INT 15
51744: PPUSH
51745: CALL 3722 0 4
51749: PUSH
51750: LD_INT 4
51752: ARRAY
51753: PUSH
51754: LD_INT 0
51756: EQUAL
51757: AND
51758: IFFALSE 51934
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51760: LD_EXP 57
51764: PUSH
51765: LD_VAR 0 2
51769: ARRAY
51770: PUSH
51771: LD_VAR 0 3
51775: ARRAY
51776: PPUSH
51777: CALL_OW 310
51781: IFFALSE 51804
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51783: LD_EXP 57
51787: PUSH
51788: LD_VAR 0 2
51792: ARRAY
51793: PUSH
51794: LD_VAR 0 3
51798: ARRAY
51799: PPUSH
51800: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51804: LD_EXP 57
51808: PUSH
51809: LD_VAR 0 2
51813: ARRAY
51814: PUSH
51815: LD_VAR 0 3
51819: ARRAY
51820: PPUSH
51821: CALL_OW 314
51825: NOT
51826: IFFALSE 51894
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51828: LD_EXP 57
51832: PUSH
51833: LD_VAR 0 2
51837: ARRAY
51838: PUSH
51839: LD_VAR 0 3
51843: ARRAY
51844: PPUSH
51845: LD_EXP 56
51849: PUSH
51850: LD_VAR 0 2
51854: ARRAY
51855: PUSH
51856: LD_VAR 0 4
51860: ARRAY
51861: PUSH
51862: LD_INT 1
51864: ARRAY
51865: PPUSH
51866: LD_EXP 56
51870: PUSH
51871: LD_VAR 0 2
51875: ARRAY
51876: PUSH
51877: LD_VAR 0 4
51881: ARRAY
51882: PUSH
51883: LD_INT 2
51885: ARRAY
51886: PPUSH
51887: LD_INT 0
51889: PPUSH
51890: CALL_OW 193
// k := k + 1 ;
51894: LD_ADDR_VAR 0 4
51898: PUSH
51899: LD_VAR 0 4
51903: PUSH
51904: LD_INT 1
51906: PLUS
51907: ST_TO_ADDR
// if k > mc_mines [ i ] then
51908: LD_VAR 0 4
51912: PUSH
51913: LD_EXP 56
51917: PUSH
51918: LD_VAR 0 2
51922: ARRAY
51923: GREATER
51924: IFFALSE 51934
// k := 1 ;
51926: LD_ADDR_VAR 0 4
51930: PUSH
51931: LD_INT 1
51933: ST_TO_ADDR
// end ; end ;
51934: GO 51390
51936: POP
51937: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51938: LD_ADDR_VAR 0 5
51942: PUSH
51943: LD_EXP 46
51947: PUSH
51948: LD_VAR 0 2
51952: ARRAY
51953: PPUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 30
51959: PUSH
51960: LD_INT 4
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 30
51969: PUSH
51970: LD_INT 5
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 30
51979: PUSH
51980: LD_INT 32
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: PPUSH
51993: CALL_OW 72
51997: ST_TO_ADDR
// if not tmp then
51998: LD_VAR 0 5
52002: NOT
52003: IFFALSE 52007
// continue ;
52005: GO 51307
// list := [ ] ;
52007: LD_ADDR_VAR 0 6
52011: PUSH
52012: EMPTY
52013: ST_TO_ADDR
// for j in tmp do
52014: LD_ADDR_VAR 0 3
52018: PUSH
52019: LD_VAR 0 5
52023: PUSH
52024: FOR_IN
52025: IFFALSE 52094
// begin for k in UnitsInside ( j ) do
52027: LD_ADDR_VAR 0 4
52031: PUSH
52032: LD_VAR 0 3
52036: PPUSH
52037: CALL_OW 313
52041: PUSH
52042: FOR_IN
52043: IFFALSE 52090
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
52045: LD_VAR 0 4
52049: PPUSH
52050: CALL_OW 257
52054: PUSH
52055: LD_INT 1
52057: EQUAL
52058: PUSH
52059: LD_VAR 0 4
52063: PPUSH
52064: CALL_OW 459
52068: NOT
52069: AND
52070: IFFALSE 52088
// list := list ^ k ;
52072: LD_ADDR_VAR 0 6
52076: PUSH
52077: LD_VAR 0 6
52081: PUSH
52082: LD_VAR 0 4
52086: ADD
52087: ST_TO_ADDR
52088: GO 52042
52090: POP
52091: POP
// end ;
52092: GO 52024
52094: POP
52095: POP
// list := list diff mc_miners [ i ] ;
52096: LD_ADDR_VAR 0 6
52100: PUSH
52101: LD_VAR 0 6
52105: PUSH
52106: LD_EXP 57
52110: PUSH
52111: LD_VAR 0 2
52115: ARRAY
52116: DIFF
52117: ST_TO_ADDR
// if not list then
52118: LD_VAR 0 6
52122: NOT
52123: IFFALSE 52127
// continue ;
52125: GO 51307
// k := mc_mines [ i ] - mc_miners [ i ] ;
52127: LD_ADDR_VAR 0 4
52131: PUSH
52132: LD_EXP 56
52136: PUSH
52137: LD_VAR 0 2
52141: ARRAY
52142: PUSH
52143: LD_EXP 57
52147: PUSH
52148: LD_VAR 0 2
52152: ARRAY
52153: MINUS
52154: ST_TO_ADDR
// if k > list then
52155: LD_VAR 0 4
52159: PUSH
52160: LD_VAR 0 6
52164: GREATER
52165: IFFALSE 52177
// k := list ;
52167: LD_ADDR_VAR 0 4
52171: PUSH
52172: LD_VAR 0 6
52176: ST_TO_ADDR
// for j = 1 to k do
52177: LD_ADDR_VAR 0 3
52181: PUSH
52182: DOUBLE
52183: LD_INT 1
52185: DEC
52186: ST_TO_ADDR
52187: LD_VAR 0 4
52191: PUSH
52192: FOR_TO
52193: IFFALSE 52247
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
52195: LD_ADDR_EXP 57
52199: PUSH
52200: LD_EXP 57
52204: PPUSH
52205: LD_VAR 0 2
52209: PUSH
52210: LD_EXP 57
52214: PUSH
52215: LD_VAR 0 2
52219: ARRAY
52220: PUSH
52221: LD_INT 1
52223: PLUS
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PPUSH
52229: LD_VAR 0 6
52233: PUSH
52234: LD_VAR 0 3
52238: ARRAY
52239: PPUSH
52240: CALL 3228 0 3
52244: ST_TO_ADDR
52245: GO 52192
52247: POP
52248: POP
// end ;
52249: GO 51307
52251: POP
52252: POP
// end ;
52253: LD_VAR 0 1
52257: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
52258: LD_INT 0
52260: PPUSH
52261: PPUSH
52262: PPUSH
52263: PPUSH
52264: PPUSH
// if not mc_bases then
52265: LD_EXP 46
52269: NOT
52270: IFFALSE 52274
// exit ;
52272: GO 53050
// for i = 1 to mc_bases do
52274: LD_ADDR_VAR 0 2
52278: PUSH
52279: DOUBLE
52280: LD_INT 1
52282: DEC
52283: ST_TO_ADDR
52284: LD_EXP 46
52288: PUSH
52289: FOR_TO
52290: IFFALSE 53048
// begin if not mc_bases [ i ] then
52292: LD_EXP 46
52296: PUSH
52297: LD_VAR 0 2
52301: ARRAY
52302: NOT
52303: IFFALSE 52307
// continue ;
52305: GO 52289
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
52307: LD_EXP 59
52311: PUSH
52312: LD_VAR 0 2
52316: ARRAY
52317: NOT
52318: PUSH
52319: LD_EXP 60
52323: PUSH
52324: LD_VAR 0 2
52328: ARRAY
52329: AND
52330: IFFALSE 52368
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52332: LD_ADDR_EXP 60
52336: PUSH
52337: LD_EXP 60
52341: PPUSH
52342: LD_VAR 0 2
52346: PPUSH
52347: EMPTY
52348: PPUSH
52349: CALL_OW 1
52353: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
52354: LD_VAR 0 2
52358: PPUSH
52359: LD_INT 107
52361: PPUSH
52362: CALL 47769 0 2
// continue ;
52366: GO 52289
// end ; target := [ ] ;
52368: LD_ADDR_VAR 0 5
52372: PUSH
52373: EMPTY
52374: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: DOUBLE
52381: LD_EXP 59
52385: PUSH
52386: LD_VAR 0 2
52390: ARRAY
52391: INC
52392: ST_TO_ADDR
52393: LD_INT 1
52395: PUSH
52396: FOR_DOWNTO
52397: IFFALSE 52657
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
52399: LD_EXP 59
52403: PUSH
52404: LD_VAR 0 2
52408: ARRAY
52409: PUSH
52410: LD_VAR 0 3
52414: ARRAY
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: PPUSH
52420: LD_EXP 59
52424: PUSH
52425: LD_VAR 0 2
52429: ARRAY
52430: PUSH
52431: LD_VAR 0 3
52435: ARRAY
52436: PUSH
52437: LD_INT 3
52439: ARRAY
52440: PPUSH
52441: CALL_OW 488
52445: PUSH
52446: LD_EXP 59
52450: PUSH
52451: LD_VAR 0 2
52455: ARRAY
52456: PUSH
52457: LD_VAR 0 3
52461: ARRAY
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PPUSH
52467: LD_EXP 59
52471: PUSH
52472: LD_VAR 0 2
52476: ARRAY
52477: PUSH
52478: LD_VAR 0 3
52482: ARRAY
52483: PUSH
52484: LD_INT 3
52486: ARRAY
52487: PPUSH
52488: CALL_OW 284
52492: PUSH
52493: LD_INT 0
52495: EQUAL
52496: AND
52497: IFFALSE 52552
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52499: LD_ADDR_VAR 0 4
52503: PUSH
52504: LD_EXP 59
52508: PUSH
52509: LD_VAR 0 2
52513: ARRAY
52514: PPUSH
52515: LD_VAR 0 3
52519: PPUSH
52520: CALL_OW 3
52524: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52525: LD_ADDR_EXP 59
52529: PUSH
52530: LD_EXP 59
52534: PPUSH
52535: LD_VAR 0 2
52539: PPUSH
52540: LD_VAR 0 4
52544: PPUSH
52545: CALL_OW 1
52549: ST_TO_ADDR
// continue ;
52550: GO 52396
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52552: LD_EXP 46
52556: PUSH
52557: LD_VAR 0 2
52561: ARRAY
52562: PUSH
52563: LD_INT 1
52565: ARRAY
52566: PPUSH
52567: CALL_OW 255
52571: PPUSH
52572: LD_EXP 59
52576: PUSH
52577: LD_VAR 0 2
52581: ARRAY
52582: PUSH
52583: LD_VAR 0 3
52587: ARRAY
52588: PUSH
52589: LD_INT 2
52591: ARRAY
52592: PPUSH
52593: LD_EXP 59
52597: PUSH
52598: LD_VAR 0 2
52602: ARRAY
52603: PUSH
52604: LD_VAR 0 3
52608: ARRAY
52609: PUSH
52610: LD_INT 3
52612: ARRAY
52613: PPUSH
52614: LD_INT 20
52616: PPUSH
52617: CALL 3722 0 4
52621: PUSH
52622: LD_INT 4
52624: ARRAY
52625: PUSH
52626: LD_INT 0
52628: EQUAL
52629: IFFALSE 52655
// begin target := mc_crates [ i ] [ j ] ;
52631: LD_ADDR_VAR 0 5
52635: PUSH
52636: LD_EXP 59
52640: PUSH
52641: LD_VAR 0 2
52645: ARRAY
52646: PUSH
52647: LD_VAR 0 3
52651: ARRAY
52652: ST_TO_ADDR
// break ;
52653: GO 52657
// end ; end ;
52655: GO 52396
52657: POP
52658: POP
// if not target then
52659: LD_VAR 0 5
52663: NOT
52664: IFFALSE 52668
// continue ;
52666: GO 52289
// if mc_crates_collector [ i ] < 5 then
52668: LD_EXP 60
52672: PUSH
52673: LD_VAR 0 2
52677: ARRAY
52678: PUSH
52679: LD_INT 5
52681: LESS
52682: IFFALSE 52862
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52684: LD_ADDR_VAR 0 4
52688: PUSH
52689: LD_EXP 46
52693: PUSH
52694: LD_VAR 0 2
52698: ARRAY
52699: PPUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 25
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 25
52715: PUSH
52716: LD_INT 16
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 24
52730: PUSH
52731: LD_INT 750
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PPUSH
52742: CALL_OW 72
52746: ST_TO_ADDR
// if not tmp then
52747: LD_VAR 0 4
52751: NOT
52752: IFFALSE 52756
// continue ;
52754: GO 52289
// for j in tmp do
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_VAR 0 4
52765: PUSH
52766: FOR_IN
52767: IFFALSE 52860
// if GetTag ( j ) = 0 then
52769: LD_VAR 0 3
52773: PPUSH
52774: CALL_OW 110
52778: PUSH
52779: LD_INT 0
52781: EQUAL
52782: IFFALSE 52858
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52784: LD_ADDR_EXP 60
52788: PUSH
52789: LD_EXP 60
52793: PPUSH
52794: LD_VAR 0 2
52798: PUSH
52799: LD_EXP 60
52803: PUSH
52804: LD_VAR 0 2
52808: ARRAY
52809: PUSH
52810: LD_INT 1
52812: PLUS
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PPUSH
52818: LD_VAR 0 3
52822: PPUSH
52823: CALL 3228 0 3
52827: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52828: LD_VAR 0 3
52832: PPUSH
52833: LD_INT 107
52835: PPUSH
52836: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52840: LD_EXP 60
52844: PUSH
52845: LD_VAR 0 2
52849: ARRAY
52850: PUSH
52851: LD_INT 5
52853: GREATER
52854: IFFALSE 52858
// break ;
52856: GO 52860
// end ;
52858: GO 52766
52860: POP
52861: POP
// end ; if mc_crates_collector [ i ] and target then
52862: LD_EXP 60
52866: PUSH
52867: LD_VAR 0 2
52871: ARRAY
52872: PUSH
52873: LD_VAR 0 5
52877: AND
52878: IFFALSE 53046
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52880: LD_EXP 60
52884: PUSH
52885: LD_VAR 0 2
52889: ARRAY
52890: PUSH
52891: LD_VAR 0 5
52895: PUSH
52896: LD_INT 1
52898: ARRAY
52899: LESS
52900: IFFALSE 52920
// tmp := mc_crates_collector [ i ] else
52902: LD_ADDR_VAR 0 4
52906: PUSH
52907: LD_EXP 60
52911: PUSH
52912: LD_VAR 0 2
52916: ARRAY
52917: ST_TO_ADDR
52918: GO 52934
// tmp := target [ 1 ] ;
52920: LD_ADDR_VAR 0 4
52924: PUSH
52925: LD_VAR 0 5
52929: PUSH
52930: LD_INT 1
52932: ARRAY
52933: ST_TO_ADDR
// for j = 1 to tmp do
52934: LD_ADDR_VAR 0 3
52938: PUSH
52939: DOUBLE
52940: LD_INT 1
52942: DEC
52943: ST_TO_ADDR
52944: LD_VAR 0 4
52948: PUSH
52949: FOR_TO
52950: IFFALSE 53044
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52952: LD_EXP 60
52956: PUSH
52957: LD_VAR 0 2
52961: ARRAY
52962: PUSH
52963: LD_VAR 0 3
52967: ARRAY
52968: PPUSH
52969: CALL_OW 310
52973: IFFALSE 52996
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52975: LD_EXP 60
52979: PUSH
52980: LD_VAR 0 2
52984: ARRAY
52985: PUSH
52986: LD_VAR 0 3
52990: ARRAY
52991: PPUSH
52992: CALL_OW 122
// wait ( 3 ) ;
52996: LD_INT 3
52998: PPUSH
52999: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
53003: LD_EXP 60
53007: PUSH
53008: LD_VAR 0 2
53012: ARRAY
53013: PUSH
53014: LD_VAR 0 3
53018: ARRAY
53019: PPUSH
53020: LD_VAR 0 5
53024: PUSH
53025: LD_INT 2
53027: ARRAY
53028: PPUSH
53029: LD_VAR 0 5
53033: PUSH
53034: LD_INT 3
53036: ARRAY
53037: PPUSH
53038: CALL_OW 117
// end ;
53042: GO 52949
53044: POP
53045: POP
// end ; end ;
53046: GO 52289
53048: POP
53049: POP
// end ;
53050: LD_VAR 0 1
53054: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
53055: LD_INT 0
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
// if not mc_bases then
53061: LD_EXP 46
53065: NOT
53066: IFFALSE 53070
// exit ;
53068: GO 53219
// for i = 1 to mc_bases do
53070: LD_ADDR_VAR 0 2
53074: PUSH
53075: DOUBLE
53076: LD_INT 1
53078: DEC
53079: ST_TO_ADDR
53080: LD_EXP 46
53084: PUSH
53085: FOR_TO
53086: IFFALSE 53217
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
53088: LD_ADDR_VAR 0 4
53092: PUSH
53093: LD_EXP 61
53097: PUSH
53098: LD_VAR 0 2
53102: ARRAY
53103: PPUSH
53104: LD_INT 33
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PPUSH
53114: CALL_OW 72
53118: ST_TO_ADDR
// if tmp then
53119: LD_VAR 0 4
53123: IFFALSE 53215
// for j in tmp do
53125: LD_ADDR_VAR 0 3
53129: PUSH
53130: LD_VAR 0 4
53134: PUSH
53135: FOR_IN
53136: IFFALSE 53213
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
53138: LD_VAR 0 3
53142: PPUSH
53143: CALL_OW 312
53147: NOT
53148: PUSH
53149: LD_VAR 0 3
53153: PPUSH
53154: CALL_OW 256
53158: PUSH
53159: LD_INT 250
53161: GREATEREQUAL
53162: AND
53163: IFFALSE 53176
// Connect ( j ) else
53165: LD_VAR 0 3
53169: PPUSH
53170: CALL 5728 0 1
53174: GO 53211
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
53176: LD_VAR 0 3
53180: PPUSH
53181: CALL_OW 256
53185: PUSH
53186: LD_INT 250
53188: LESS
53189: PUSH
53190: LD_VAR 0 3
53194: PPUSH
53195: CALL_OW 312
53199: AND
53200: IFFALSE 53211
// ComUnlink ( j ) ;
53202: LD_VAR 0 3
53206: PPUSH
53207: CALL_OW 136
53211: GO 53135
53213: POP
53214: POP
// end ;
53215: GO 53085
53217: POP
53218: POP
// end ;
53219: LD_VAR 0 1
53223: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
53224: LD_INT 0
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
// if not mc_bases then
53231: LD_EXP 46
53235: NOT
53236: IFFALSE 53240
// exit ;
53238: GO 53607
// for i = 1 to mc_bases do
53240: LD_ADDR_VAR 0 2
53244: PUSH
53245: DOUBLE
53246: LD_INT 1
53248: DEC
53249: ST_TO_ADDR
53250: LD_EXP 46
53254: PUSH
53255: FOR_TO
53256: IFFALSE 53605
// begin if not mc_produce [ i ] then
53258: LD_EXP 63
53262: PUSH
53263: LD_VAR 0 2
53267: ARRAY
53268: NOT
53269: IFFALSE 53273
// continue ;
53271: GO 53255
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53273: LD_ADDR_VAR 0 5
53277: PUSH
53278: LD_EXP 46
53282: PUSH
53283: LD_VAR 0 2
53287: ARRAY
53288: PPUSH
53289: LD_INT 30
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PPUSH
53299: CALL_OW 72
53303: ST_TO_ADDR
// if not fac then
53304: LD_VAR 0 5
53308: NOT
53309: IFFALSE 53313
// continue ;
53311: GO 53255
// for j in fac do
53313: LD_ADDR_VAR 0 3
53317: PUSH
53318: LD_VAR 0 5
53322: PUSH
53323: FOR_IN
53324: IFFALSE 53601
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
53326: LD_VAR 0 3
53330: PPUSH
53331: CALL_OW 461
53335: PUSH
53336: LD_INT 2
53338: NONEQUAL
53339: PUSH
53340: LD_VAR 0 3
53344: PPUSH
53345: LD_INT 20
53347: PPUSH
53348: CALL 5419 0 2
53352: PUSH
53353: LD_INT 4
53355: ARRAY
53356: OR
53357: PUSH
53358: LD_VAR 0 3
53362: PPUSH
53363: CALL_OW 313
53367: PUSH
53368: LD_INT 0
53370: EQUAL
53371: OR
53372: IFFALSE 53376
// continue ;
53374: GO 53323
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
53376: LD_VAR 0 3
53380: PPUSH
53381: LD_EXP 63
53385: PUSH
53386: LD_VAR 0 2
53390: ARRAY
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: PUSH
53396: LD_INT 1
53398: ARRAY
53399: PPUSH
53400: LD_EXP 63
53404: PUSH
53405: LD_VAR 0 2
53409: ARRAY
53410: PUSH
53411: LD_INT 1
53413: ARRAY
53414: PUSH
53415: LD_INT 2
53417: ARRAY
53418: PPUSH
53419: LD_EXP 63
53423: PUSH
53424: LD_VAR 0 2
53428: ARRAY
53429: PUSH
53430: LD_INT 1
53432: ARRAY
53433: PUSH
53434: LD_INT 3
53436: ARRAY
53437: PPUSH
53438: LD_EXP 63
53442: PUSH
53443: LD_VAR 0 2
53447: ARRAY
53448: PUSH
53449: LD_INT 1
53451: ARRAY
53452: PUSH
53453: LD_INT 4
53455: ARRAY
53456: PPUSH
53457: CALL_OW 448
53461: IFFALSE 53599
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
53463: LD_VAR 0 3
53467: PPUSH
53468: LD_EXP 63
53472: PUSH
53473: LD_VAR 0 2
53477: ARRAY
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PUSH
53483: LD_INT 1
53485: ARRAY
53486: PPUSH
53487: LD_EXP 63
53491: PUSH
53492: LD_VAR 0 2
53496: ARRAY
53497: PUSH
53498: LD_INT 1
53500: ARRAY
53501: PUSH
53502: LD_INT 2
53504: ARRAY
53505: PPUSH
53506: LD_EXP 63
53510: PUSH
53511: LD_VAR 0 2
53515: ARRAY
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: PUSH
53521: LD_INT 3
53523: ARRAY
53524: PPUSH
53525: LD_EXP 63
53529: PUSH
53530: LD_VAR 0 2
53534: ARRAY
53535: PUSH
53536: LD_INT 1
53538: ARRAY
53539: PUSH
53540: LD_INT 4
53542: ARRAY
53543: PPUSH
53544: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
53548: LD_ADDR_VAR 0 4
53552: PUSH
53553: LD_EXP 63
53557: PUSH
53558: LD_VAR 0 2
53562: ARRAY
53563: PPUSH
53564: LD_INT 1
53566: PPUSH
53567: CALL_OW 3
53571: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
53572: LD_ADDR_EXP 63
53576: PUSH
53577: LD_EXP 63
53581: PPUSH
53582: LD_VAR 0 2
53586: PPUSH
53587: LD_VAR 0 4
53591: PPUSH
53592: CALL_OW 1
53596: ST_TO_ADDR
// break ;
53597: GO 53601
// end ; end ;
53599: GO 53323
53601: POP
53602: POP
// end ;
53603: GO 53255
53605: POP
53606: POP
// end ;
53607: LD_VAR 0 1
53611: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
53612: LD_INT 0
53614: PPUSH
53615: PPUSH
53616: PPUSH
// if not mc_bases then
53617: LD_EXP 46
53621: NOT
53622: IFFALSE 53626
// exit ;
53624: GO 53715
// for i = 1 to mc_bases do
53626: LD_ADDR_VAR 0 2
53630: PUSH
53631: DOUBLE
53632: LD_INT 1
53634: DEC
53635: ST_TO_ADDR
53636: LD_EXP 46
53640: PUSH
53641: FOR_TO
53642: IFFALSE 53713
// begin if mc_attack [ i ] then
53644: LD_EXP 62
53648: PUSH
53649: LD_VAR 0 2
53653: ARRAY
53654: IFFALSE 53711
// begin tmp := mc_attack [ i ] [ 1 ] ;
53656: LD_ADDR_VAR 0 3
53660: PUSH
53661: LD_EXP 62
53665: PUSH
53666: LD_VAR 0 2
53670: ARRAY
53671: PUSH
53672: LD_INT 1
53674: ARRAY
53675: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53676: LD_ADDR_EXP 62
53680: PUSH
53681: LD_EXP 62
53685: PPUSH
53686: LD_VAR 0 2
53690: PPUSH
53691: EMPTY
53692: PPUSH
53693: CALL_OW 1
53697: ST_TO_ADDR
// Attack ( tmp ) ;
53698: LD_VAR 0 3
53702: PPUSH
53703: CALL 29605 0 1
// exit ;
53707: POP
53708: POP
53709: GO 53715
// end ; end ;
53711: GO 53641
53713: POP
53714: POP
// end ;
53715: LD_VAR 0 1
53719: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53720: LD_INT 0
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
// if not mc_bases then
53729: LD_EXP 46
53733: NOT
53734: IFFALSE 53738
// exit ;
53736: GO 54155
// for i = 1 to mc_bases do
53738: LD_ADDR_VAR 0 2
53742: PUSH
53743: DOUBLE
53744: LD_INT 1
53746: DEC
53747: ST_TO_ADDR
53748: LD_EXP 46
53752: PUSH
53753: FOR_TO
53754: IFFALSE 54153
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53756: LD_ADDR_EXP 65
53760: PUSH
53761: LD_EXP 65
53765: PPUSH
53766: LD_VAR 0 2
53770: PPUSH
53771: LD_EXP 46
53775: PUSH
53776: LD_VAR 0 2
53780: ARRAY
53781: PPUSH
53782: CALL 33389 0 1
53786: PPUSH
53787: CALL_OW 1
53791: ST_TO_ADDR
// if not mc_scan [ i ] then
53792: LD_EXP 65
53796: PUSH
53797: LD_VAR 0 2
53801: ARRAY
53802: NOT
53803: IFFALSE 53914
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53805: LD_ADDR_VAR 0 4
53809: PUSH
53810: LD_EXP 46
53814: PUSH
53815: LD_VAR 0 2
53819: ARRAY
53820: PPUSH
53821: LD_INT 2
53823: PUSH
53824: LD_INT 25
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 25
53836: PUSH
53837: LD_INT 8
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 25
53846: PUSH
53847: LD_INT 9
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: PPUSH
53860: CALL_OW 72
53864: ST_TO_ADDR
// if not tmp then
53865: LD_VAR 0 4
53869: NOT
53870: IFFALSE 53874
// continue ;
53872: GO 53753
// for j in tmp do
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_VAR 0 4
53883: PUSH
53884: FOR_IN
53885: IFFALSE 53912
// if IsInUnit ( j ) then
53887: LD_VAR 0 3
53891: PPUSH
53892: CALL_OW 310
53896: IFFALSE 53910
// SetClass ( j , 1 ) ;
53898: LD_VAR 0 3
53902: PPUSH
53903: LD_INT 1
53905: PPUSH
53906: CALL_OW 336
53910: GO 53884
53912: POP
53913: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53914: LD_EXP 65
53918: PUSH
53919: LD_VAR 0 2
53923: ARRAY
53924: PUSH
53925: LD_EXP 64
53929: PUSH
53930: LD_VAR 0 2
53934: ARRAY
53935: AND
53936: IFFALSE 54151
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53938: LD_ADDR_VAR 0 7
53942: PUSH
53943: LD_EXP 64
53947: PUSH
53948: LD_INT 1
53950: ARRAY
53951: PPUSH
53952: CALL 33496 0 1
53956: ST_TO_ADDR
// if class then
53957: LD_VAR 0 7
53961: IFFALSE 54084
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53963: LD_ADDR_VAR 0 4
53967: PUSH
53968: LD_EXP 46
53972: PUSH
53973: LD_VAR 0 2
53977: ARRAY
53978: PPUSH
53979: LD_INT 30
53981: PUSH
53982: LD_INT 5
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PPUSH
53989: CALL_OW 72
53993: ST_TO_ADDR
// if tmp then
53994: LD_VAR 0 4
53998: IFFALSE 54084
// begin for j in tmp do
54000: LD_ADDR_VAR 0 3
54004: PUSH
54005: LD_VAR 0 4
54009: PUSH
54010: FOR_IN
54011: IFFALSE 54082
// begin t := UnitsInside ( j ) ;
54013: LD_ADDR_VAR 0 5
54017: PUSH
54018: LD_VAR 0 3
54022: PPUSH
54023: CALL_OW 313
54027: ST_TO_ADDR
// if not t then
54028: LD_VAR 0 5
54032: NOT
54033: IFFALSE 54037
// continue ;
54035: GO 54010
// for x in t do
54037: LD_ADDR_VAR 0 6
54041: PUSH
54042: LD_VAR 0 5
54046: PUSH
54047: FOR_IN
54048: IFFALSE 54078
// if not MineOfUnit ( x ) then
54050: LD_VAR 0 6
54054: PPUSH
54055: CALL_OW 459
54059: NOT
54060: IFFALSE 54076
// SetClass ( x , class ) ;
54062: LD_VAR 0 6
54066: PPUSH
54067: LD_VAR 0 7
54071: PPUSH
54072: CALL_OW 336
54076: GO 54047
54078: POP
54079: POP
// end ;
54080: GO 54010
54082: POP
54083: POP
// end ; end ; tmp := mc_defender [ i ] ;
54084: LD_ADDR_VAR 0 4
54088: PUSH
54089: LD_EXP 64
54093: PUSH
54094: LD_VAR 0 2
54098: ARRAY
54099: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
54100: LD_ADDR_EXP 64
54104: PUSH
54105: LD_EXP 64
54109: PPUSH
54110: LD_VAR 0 2
54114: PPUSH
54115: EMPTY
54116: PPUSH
54117: CALL_OW 1
54121: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
54122: LD_VAR 0 2
54126: PPUSH
54127: LD_VAR 0 4
54131: PPUSH
54132: LD_EXP 65
54136: PUSH
54137: LD_VAR 0 2
54141: ARRAY
54142: PPUSH
54143: CALL 32842 0 3
// exit ;
54147: POP
54148: POP
54149: GO 54155
// end ; end ;
54151: GO 53753
54153: POP
54154: POP
// end ;
54155: LD_VAR 0 1
54159: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
54160: LD_INT 0
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
54166: LD_VAR 0 1
54170: NOT
54171: PUSH
54172: LD_VAR 0 2
54176: NOT
54177: OR
54178: PUSH
54179: LD_VAR 0 3
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 4
54195: PUSH
54196: LD_INT 5
54198: PUSH
54199: LD_INT 8
54201: PUSH
54202: LD_INT 9
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: IN
54214: NOT
54215: OR
54216: PUSH
54217: LD_VAR 0 2
54221: PUSH
54222: LD_EXP 64
54226: PUSH
54227: LD_VAR 0 5
54231: ARRAY
54232: IN
54233: OR
54234: IFFALSE 54238
// exit ;
54236: GO 54650
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
54238: LD_ADDR_VAR 0 1
54242: PUSH
54243: LD_VAR 0 1
54247: PPUSH
54248: LD_INT 21
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 24
54260: PUSH
54261: LD_INT 250
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PPUSH
54272: CALL_OW 72
54276: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
54277: LD_VAR 0 3
54281: PUSH
54282: LD_INT 5
54284: PUSH
54285: LD_INT 8
54287: PUSH
54288: LD_INT 9
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: IN
54296: IFFALSE 54306
// class := 1 ;
54298: LD_ADDR_VAR 0 3
54302: PUSH
54303: LD_INT 1
54305: ST_TO_ADDR
// case class of 1 :
54306: LD_VAR 0 3
54310: PUSH
54311: LD_INT 1
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54319
54317: GO 54365
54319: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
54320: LD_ADDR_VAR 0 7
54324: PUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 30
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 30
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PPUSH
54358: CALL_OW 72
54362: ST_TO_ADDR
54363: GO 54539
54365: LD_INT 2
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54373
54371: GO 54419
54373: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
54374: LD_ADDR_VAR 0 7
54378: PUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 30
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 30
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: PPUSH
54412: CALL_OW 72
54416: ST_TO_ADDR
54417: GO 54539
54419: LD_INT 3
54421: DOUBLE
54422: EQUAL
54423: IFTRUE 54427
54425: GO 54473
54427: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
54428: LD_ADDR_VAR 0 7
54432: PUSH
54433: LD_VAR 0 1
54437: PPUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 30
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 30
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: PPUSH
54466: CALL_OW 72
54470: ST_TO_ADDR
54471: GO 54539
54473: LD_INT 4
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54481
54479: GO 54538
54481: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
54482: LD_ADDR_VAR 0 7
54486: PUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 30
54497: PUSH
54498: LD_INT 6
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 30
54507: PUSH
54508: LD_INT 7
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 30
54517: PUSH
54518: LD_INT 8
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: PPUSH
54531: CALL_OW 72
54535: ST_TO_ADDR
54536: GO 54539
54538: POP
// if not tmp then
54539: LD_VAR 0 7
54543: NOT
54544: IFFALSE 54548
// exit ;
54546: GO 54650
// for i in tmp do
54548: LD_ADDR_VAR 0 5
54552: PUSH
54553: LD_VAR 0 7
54557: PUSH
54558: FOR_IN
54559: IFFALSE 54628
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54561: LD_VAR 0 5
54565: PPUSH
54566: CALL_OW 313
54570: PUSH
54571: LD_INT 6
54573: LESS
54574: PUSH
54575: LD_VAR 0 5
54579: PPUSH
54580: CALL_OW 266
54584: PUSH
54585: LD_INT 31
54587: PUSH
54588: LD_INT 32
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: IN
54595: NOT
54596: AND
54597: PUSH
54598: LD_VAR 0 5
54602: PPUSH
54603: CALL_OW 313
54607: PUSH
54608: LD_INT 0
54610: EQUAL
54611: OR
54612: IFFALSE 54626
// begin j := i ;
54614: LD_ADDR_VAR 0 6
54618: PUSH
54619: LD_VAR 0 5
54623: ST_TO_ADDR
// break ;
54624: GO 54628
// end ; end ;
54626: GO 54558
54628: POP
54629: POP
// if j then
54630: LD_VAR 0 6
54634: IFFALSE 54650
// ComEnterUnit ( unit , j ) ;
54636: LD_VAR 0 2
54640: PPUSH
54641: LD_VAR 0 6
54645: PPUSH
54646: CALL_OW 120
// end ;
54650: LD_VAR 0 4
54654: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54655: LD_INT 0
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
// if not mc_bases then
54661: LD_EXP 46
54665: NOT
54666: IFFALSE 54670
// exit ;
54668: GO 54899
// for i = 1 to mc_bases do
54670: LD_ADDR_VAR 0 2
54674: PUSH
54675: DOUBLE
54676: LD_INT 1
54678: DEC
54679: ST_TO_ADDR
54680: LD_EXP 46
54684: PUSH
54685: FOR_TO
54686: IFFALSE 54897
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54688: LD_ADDR_VAR 0 4
54692: PUSH
54693: LD_EXP 46
54697: PUSH
54698: LD_VAR 0 2
54702: ARRAY
54703: PPUSH
54704: LD_INT 21
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PPUSH
54714: CALL_OW 72
54718: ST_TO_ADDR
// if not tmp then
54719: LD_VAR 0 4
54723: NOT
54724: IFFALSE 54730
// exit ;
54726: POP
54727: POP
54728: GO 54899
// for j in tmp do
54730: LD_ADDR_VAR 0 3
54734: PUSH
54735: LD_VAR 0 4
54739: PUSH
54740: FOR_IN
54741: IFFALSE 54893
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54743: LD_VAR 0 3
54747: PPUSH
54748: CALL_OW 257
54752: PUSH
54753: LD_INT 3
54755: EQUAL
54756: PUSH
54757: LD_EXP 65
54761: PUSH
54762: LD_VAR 0 2
54766: ARRAY
54767: AND
54768: IFFALSE 54772
// continue ;
54770: GO 54740
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54772: LD_VAR 0 3
54776: PPUSH
54777: CALL_OW 110
54781: NOT
54782: PUSH
54783: LD_VAR 0 3
54787: PPUSH
54788: CALL_OW 314
54792: NOT
54793: AND
54794: PUSH
54795: LD_VAR 0 3
54799: PPUSH
54800: CALL_OW 310
54804: NOT
54805: AND
54806: PUSH
54807: LD_EXP 49
54811: PUSH
54812: LD_VAR 0 2
54816: ARRAY
54817: PUSH
54818: LD_INT 1
54820: ARRAY
54821: NOT
54822: AND
54823: PUSH
54824: LD_EXP 49
54828: PUSH
54829: LD_VAR 0 2
54833: ARRAY
54834: PUSH
54835: LD_INT 2
54837: ARRAY
54838: NOT
54839: AND
54840: PUSH
54841: LD_VAR 0 3
54845: PUSH
54846: LD_EXP 55
54850: PUSH
54851: LD_VAR 0 2
54855: ARRAY
54856: IN
54857: NOT
54858: AND
54859: IFFALSE 54891
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54861: LD_EXP 46
54865: PUSH
54866: LD_VAR 0 2
54870: ARRAY
54871: PPUSH
54872: LD_VAR 0 3
54876: PPUSH
54877: LD_VAR 0 3
54881: PPUSH
54882: CALL_OW 257
54886: PPUSH
54887: CALL 54160 0 3
// end ;
54891: GO 54740
54893: POP
54894: POP
// end ;
54895: GO 54685
54897: POP
54898: POP
// end ;
54899: LD_VAR 0 1
54903: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54904: LD_INT 0
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
// if not mc_bases [ base ] then
54912: LD_EXP 46
54916: PUSH
54917: LD_VAR 0 1
54921: ARRAY
54922: NOT
54923: IFFALSE 54927
// exit ;
54925: GO 55109
// tmp := [ ] ;
54927: LD_ADDR_VAR 0 6
54931: PUSH
54932: EMPTY
54933: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54934: LD_ADDR_VAR 0 7
54938: PUSH
54939: LD_VAR 0 3
54943: PPUSH
54944: LD_INT 0
54946: PPUSH
54947: CALL_OW 517
54951: ST_TO_ADDR
// if not list then
54952: LD_VAR 0 7
54956: NOT
54957: IFFALSE 54961
// exit ;
54959: GO 55109
// for i = 1 to amount do
54961: LD_ADDR_VAR 0 5
54965: PUSH
54966: DOUBLE
54967: LD_INT 1
54969: DEC
54970: ST_TO_ADDR
54971: LD_VAR 0 2
54975: PUSH
54976: FOR_TO
54977: IFFALSE 55057
// begin x := rand ( 1 , list [ 1 ] ) ;
54979: LD_ADDR_VAR 0 8
54983: PUSH
54984: LD_INT 1
54986: PPUSH
54987: LD_VAR 0 7
54991: PUSH
54992: LD_INT 1
54994: ARRAY
54995: PPUSH
54996: CALL_OW 12
55000: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
55001: LD_ADDR_VAR 0 6
55005: PUSH
55006: LD_VAR 0 6
55010: PPUSH
55011: LD_VAR 0 5
55015: PPUSH
55016: LD_VAR 0 7
55020: PUSH
55021: LD_INT 1
55023: ARRAY
55024: PUSH
55025: LD_VAR 0 8
55029: ARRAY
55030: PUSH
55031: LD_VAR 0 7
55035: PUSH
55036: LD_INT 2
55038: ARRAY
55039: PUSH
55040: LD_VAR 0 8
55044: ARRAY
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PPUSH
55050: CALL_OW 1
55054: ST_TO_ADDR
// end ;
55055: GO 54976
55057: POP
55058: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
55059: LD_ADDR_EXP 56
55063: PUSH
55064: LD_EXP 56
55068: PPUSH
55069: LD_VAR 0 1
55073: PPUSH
55074: LD_VAR 0 6
55078: PPUSH
55079: CALL_OW 1
55083: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
55084: LD_ADDR_EXP 58
55088: PUSH
55089: LD_EXP 58
55093: PPUSH
55094: LD_VAR 0 1
55098: PPUSH
55099: LD_VAR 0 3
55103: PPUSH
55104: CALL_OW 1
55108: ST_TO_ADDR
// end ;
55109: LD_VAR 0 4
55113: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55114: LD_INT 0
55116: PPUSH
// if not mc_bases [ base ] then
55117: LD_EXP 46
55121: PUSH
55122: LD_VAR 0 1
55126: ARRAY
55127: NOT
55128: IFFALSE 55132
// exit ;
55130: GO 55157
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
55132: LD_ADDR_EXP 63
55136: PUSH
55137: LD_EXP 63
55141: PPUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_VAR 0 2
55151: PPUSH
55152: CALL_OW 1
55156: ST_TO_ADDR
// end ;
55157: LD_VAR 0 3
55161: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
55162: LD_INT 0
55164: PPUSH
// if not mc_bases [ base ] then
55165: LD_EXP 46
55169: PUSH
55170: LD_VAR 0 1
55174: ARRAY
55175: NOT
55176: IFFALSE 55180
// exit ;
55178: GO 55205
// mc_defender := Replace ( mc_defender , base , deflist ) ;
55180: LD_ADDR_EXP 64
55184: PUSH
55185: LD_EXP 64
55189: PPUSH
55190: LD_VAR 0 1
55194: PPUSH
55195: LD_VAR 0 2
55199: PPUSH
55200: CALL_OW 1
55204: ST_TO_ADDR
// end ;
55205: LD_VAR 0 3
55209: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
55210: LD_INT 0
55212: PPUSH
55213: PPUSH
55214: PPUSH
55215: PPUSH
// if not mc_bases [ base ] then
55216: LD_EXP 46
55220: PUSH
55221: LD_VAR 0 1
55225: ARRAY
55226: NOT
55227: IFFALSE 55231
// exit ;
55229: GO 55296
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
55231: LD_ADDR_EXP 62
55235: PUSH
55236: LD_EXP 62
55240: PPUSH
55241: LD_VAR 0 1
55245: PUSH
55246: LD_EXP 62
55250: PUSH
55251: LD_VAR 0 1
55255: ARRAY
55256: PUSH
55257: LD_INT 1
55259: PLUS
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PPUSH
55265: LD_VAR 0 1
55269: PUSH
55270: LD_VAR 0 2
55274: PUSH
55275: LD_VAR 0 3
55279: PUSH
55280: LD_VAR 0 4
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: PPUSH
55291: CALL 3228 0 3
55295: ST_TO_ADDR
// end ;
55296: LD_VAR 0 5
55300: RET
// export function MC_GetMinesField ( base ) ; begin
55301: LD_INT 0
55303: PPUSH
// result := mc_mines [ base ] ;
55304: LD_ADDR_VAR 0 2
55308: PUSH
55309: LD_EXP 56
55313: PUSH
55314: LD_VAR 0 1
55318: ARRAY
55319: ST_TO_ADDR
// end ;
55320: LD_VAR 0 2
55324: RET
// export function MC_GetProduceList ( base ) ; begin
55325: LD_INT 0
55327: PPUSH
// result := mc_produce [ base ] ;
55328: LD_ADDR_VAR 0 2
55332: PUSH
55333: LD_EXP 63
55337: PUSH
55338: LD_VAR 0 1
55342: ARRAY
55343: ST_TO_ADDR
// end ; end_of_file
55344: LD_VAR 0 2
55348: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 255
55358: PUSH
55359: LD_INT 1
55361: EQUAL
55362: IFFALSE 55372
// artifact_get := true ;
55364: LD_ADDR_EXP 13
55368: PUSH
55369: LD_INT 1
55371: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 255
55381: PUSH
55382: LD_INT 2
55384: EQUAL
55385: IFFALSE 55403
// begin artifact_get := false ;
55387: LD_ADDR_EXP 13
55391: PUSH
55392: LD_INT 0
55394: ST_TO_ADDR
// artifact_stolen := true ;
55395: LD_ADDR_EXP 12
55399: PUSH
55400: LD_INT 1
55402: ST_TO_ADDR
// end ; artifact_oncargo := true ;
55403: LD_ADDR_EXP 14
55407: PUSH
55408: LD_INT 1
55410: ST_TO_ADDR
// end ;
55411: PPOPN 2
55413: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
55414: LD_ADDR_EXP 14
55418: PUSH
55419: LD_INT 0
55421: ST_TO_ADDR
// end ;
55422: PPOPN 2
55424: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
55425: LD_INT 0
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
55432: LD_VAR 0 1
55436: PUSH
55437: LD_INT 22
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 21
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 25
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 25
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 25
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 25
55492: PUSH
55493: LD_INT 4
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 25
55502: PUSH
55503: LD_INT 5
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 25
55512: PUSH
55513: LD_INT 8
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: PPUSH
55534: CALL_OW 69
55538: IN
55539: IFFALSE 55555
// loses_counter := loses_counter + 1 ;
55541: LD_ADDR_EXP 17
55545: PUSH
55546: LD_EXP 17
55550: PUSH
55551: LD_INT 1
55553: PLUS
55554: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
55555: LD_VAR 0 1
55559: PUSH
55560: LD_INT 21
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PPUSH
55570: CALL_OW 69
55574: IN
55575: IFFALSE 56091
// begin if not mc_bases then
55577: LD_EXP 46
55581: NOT
55582: IFFALSE 55586
// exit ;
55584: GO 56091
// pos := mc_build_list [ i ] + 1 ;
55586: LD_ADDR_VAR 0 5
55590: PUSH
55591: LD_EXP 51
55595: PUSH
55596: LD_VAR 0 2
55600: ARRAY
55601: PUSH
55602: LD_INT 1
55604: PLUS
55605: ST_TO_ADDR
// btype := GetBType ( un ) ;
55606: LD_ADDR_VAR 0 4
55610: PUSH
55611: LD_VAR 0 1
55615: PPUSH
55616: CALL_OW 266
55620: ST_TO_ADDR
// if btype = b_warehouse then
55621: LD_VAR 0 4
55625: PUSH
55626: LD_INT 1
55628: EQUAL
55629: IFFALSE 55647
// begin btype := b_depot ;
55631: LD_ADDR_VAR 0 4
55635: PUSH
55636: LD_INT 0
55638: ST_TO_ADDR
// pos := 1 ;
55639: LD_ADDR_VAR 0 5
55643: PUSH
55644: LD_INT 1
55646: ST_TO_ADDR
// end ; if btype = b_factory then
55647: LD_VAR 0 4
55651: PUSH
55652: LD_INT 3
55654: EQUAL
55655: IFFALSE 55673
// begin btype := b_workshop ;
55657: LD_ADDR_VAR 0 4
55661: PUSH
55662: LD_INT 2
55664: ST_TO_ADDR
// pos := 1 ;
55665: LD_ADDR_VAR 0 5
55669: PUSH
55670: LD_INT 1
55672: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55673: LD_VAR 0 4
55677: PUSH
55678: LD_INT 7
55680: PUSH
55681: LD_INT 8
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: IN
55688: IFFALSE 55698
// btype := b_lab ;
55690: LD_ADDR_VAR 0 4
55694: PUSH
55695: LD_INT 6
55697: ST_TO_ADDR
// for i = 1 to mc_bases do
55698: LD_ADDR_VAR 0 2
55702: PUSH
55703: DOUBLE
55704: LD_INT 1
55706: DEC
55707: ST_TO_ADDR
55708: LD_EXP 46
55712: PUSH
55713: FOR_TO
55714: IFFALSE 56089
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55716: LD_VAR 0 1
55720: PUSH
55721: LD_EXP 46
55725: PUSH
55726: LD_VAR 0 2
55730: ARRAY
55731: IN
55732: PUSH
55733: LD_VAR 0 1
55737: PUSH
55738: LD_EXP 53
55742: PUSH
55743: LD_VAR 0 2
55747: ARRAY
55748: IN
55749: OR
55750: IFFALSE 56087
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55752: LD_ADDR_EXP 51
55756: PUSH
55757: LD_EXP 51
55761: PPUSH
55762: LD_VAR 0 2
55766: PUSH
55767: LD_EXP 51
55771: PUSH
55772: LD_VAR 0 2
55776: ARRAY
55777: PUSH
55778: LD_INT 1
55780: PLUS
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PPUSH
55786: LD_VAR 0 4
55790: PUSH
55791: LD_VAR 0 1
55795: PPUSH
55796: CALL_OW 250
55800: PUSH
55801: LD_VAR 0 1
55805: PPUSH
55806: CALL_OW 251
55810: PUSH
55811: LD_VAR 0 1
55815: PPUSH
55816: CALL_OW 254
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: PPUSH
55827: CALL 3228 0 3
55831: ST_TO_ADDR
// if pos = 1 then
55832: LD_VAR 0 5
55836: PUSH
55837: LD_INT 1
55839: EQUAL
55840: IFFALSE 55955
// begin tmp := mc_build_list [ i ] ;
55842: LD_ADDR_VAR 0 6
55846: PUSH
55847: LD_EXP 51
55851: PUSH
55852: LD_VAR 0 2
55856: ARRAY
55857: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55858: LD_VAR 0 6
55862: PPUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 30
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 30
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: PPUSH
55891: CALL_OW 72
55895: IFFALSE 55905
// pos := 2 ;
55897: LD_ADDR_VAR 0 5
55901: PUSH
55902: LD_INT 2
55904: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55905: LD_ADDR_VAR 0 6
55909: PUSH
55910: LD_VAR 0 6
55914: PPUSH
55915: LD_VAR 0 5
55919: PPUSH
55920: LD_VAR 0 6
55924: PPUSH
55925: CALL 3119 0 3
55929: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55930: LD_ADDR_EXP 51
55934: PUSH
55935: LD_EXP 51
55939: PPUSH
55940: LD_VAR 0 2
55944: PPUSH
55945: LD_VAR 0 6
55949: PPUSH
55950: CALL_OW 1
55954: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55955: LD_VAR 0 1
55959: PUSH
55960: LD_EXP 46
55964: PUSH
55965: LD_VAR 0 2
55969: ARRAY
55970: IN
55971: IFFALSE 56020
// begin tmp := mc_bases [ i ] diff un ;
55973: LD_ADDR_VAR 0 6
55977: PUSH
55978: LD_EXP 46
55982: PUSH
55983: LD_VAR 0 2
55987: ARRAY
55988: PUSH
55989: LD_VAR 0 1
55993: DIFF
55994: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55995: LD_ADDR_EXP 46
55999: PUSH
56000: LD_EXP 46
56004: PPUSH
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_VAR 0 6
56014: PPUSH
56015: CALL_OW 1
56019: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
56020: LD_VAR 0 1
56024: PUSH
56025: LD_EXP 53
56029: PUSH
56030: LD_VAR 0 2
56034: ARRAY
56035: IN
56036: IFFALSE 56085
// begin tmp := mc_construct_list [ i ] diff un ;
56038: LD_ADDR_VAR 0 6
56042: PUSH
56043: LD_EXP 53
56047: PUSH
56048: LD_VAR 0 2
56052: ARRAY
56053: PUSH
56054: LD_VAR 0 1
56058: DIFF
56059: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
56060: LD_ADDR_EXP 53
56064: PUSH
56065: LD_EXP 53
56069: PPUSH
56070: LD_VAR 0 2
56074: PPUSH
56075: LD_VAR 0 6
56079: PPUSH
56080: CALL_OW 1
56084: ST_TO_ADDR
// end ; break ;
56085: GO 56089
// end ;
56087: GO 55713
56089: POP
56090: POP
// end ; end ;
56091: PPOPN 6
56093: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
56094: LD_INT 0
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
// begin if not mc_bases then
56103: LD_EXP 46
56107: NOT
56108: IFFALSE 56112
// exit ;
56110: GO 56353
// btype := GetBType ( building ) ;
56112: LD_ADDR_VAR 0 6
56116: PUSH
56117: LD_VAR 0 1
56121: PPUSH
56122: CALL_OW 266
56126: ST_TO_ADDR
// x := GetX ( building ) ;
56127: LD_ADDR_VAR 0 7
56131: PUSH
56132: LD_VAR 0 1
56136: PPUSH
56137: CALL_OW 250
56141: ST_TO_ADDR
// y := GetY ( building ) ;
56142: LD_ADDR_VAR 0 8
56146: PUSH
56147: LD_VAR 0 1
56151: PPUSH
56152: CALL_OW 251
56156: ST_TO_ADDR
// d := GetDir ( building ) ;
56157: LD_ADDR_VAR 0 9
56161: PUSH
56162: LD_VAR 0 1
56166: PPUSH
56167: CALL_OW 254
56171: ST_TO_ADDR
// for i = 1 to mc_bases do
56172: LD_ADDR_VAR 0 3
56176: PUSH
56177: DOUBLE
56178: LD_INT 1
56180: DEC
56181: ST_TO_ADDR
56182: LD_EXP 46
56186: PUSH
56187: FOR_TO
56188: IFFALSE 56351
// begin if not mc_build_list [ i ] then
56190: LD_EXP 51
56194: PUSH
56195: LD_VAR 0 3
56199: ARRAY
56200: NOT
56201: IFFALSE 56205
// continue ;
56203: GO 56187
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
56205: LD_VAR 0 6
56209: PUSH
56210: LD_VAR 0 7
56214: PUSH
56215: LD_VAR 0 8
56219: PUSH
56220: LD_VAR 0 9
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: PPUSH
56231: LD_EXP 51
56235: PUSH
56236: LD_VAR 0 3
56240: ARRAY
56241: PUSH
56242: LD_INT 1
56244: ARRAY
56245: PPUSH
56246: CALL 8715 0 2
56250: IFFALSE 56349
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
56252: LD_ADDR_VAR 0 5
56256: PUSH
56257: LD_EXP 51
56261: PUSH
56262: LD_VAR 0 3
56266: ARRAY
56267: PPUSH
56268: LD_INT 1
56270: PPUSH
56271: CALL_OW 3
56275: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
56276: LD_ADDR_EXP 51
56280: PUSH
56281: LD_EXP 51
56285: PPUSH
56286: LD_VAR 0 3
56290: PPUSH
56291: LD_VAR 0 5
56295: PPUSH
56296: CALL_OW 1
56300: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
56301: LD_ADDR_EXP 53
56305: PUSH
56306: LD_EXP 53
56310: PPUSH
56311: LD_VAR 0 3
56315: PUSH
56316: LD_EXP 53
56320: PUSH
56321: LD_VAR 0 3
56325: ARRAY
56326: PUSH
56327: LD_INT 1
56329: PLUS
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PPUSH
56335: LD_VAR 0 1
56339: PPUSH
56340: CALL 3228 0 3
56344: ST_TO_ADDR
// exit ;
56345: POP
56346: POP
56347: GO 56353
// end ; end ;
56349: GO 56187
56351: POP
56352: POP
// end ;
56353: PPOPN 9
56355: END
// on BuildingComplete ( building ) do var i , j , tmp ;
56356: LD_INT 0
56358: PPUSH
56359: PPUSH
56360: PPUSH
// begin if not mc_bases then
56361: LD_EXP 46
56365: NOT
56366: IFFALSE 56370
// exit ;
56368: GO 56571
// for i = 1 to mc_bases do
56370: LD_ADDR_VAR 0 2
56374: PUSH
56375: DOUBLE
56376: LD_INT 1
56378: DEC
56379: ST_TO_ADDR
56380: LD_EXP 46
56384: PUSH
56385: FOR_TO
56386: IFFALSE 56569
// begin if building in mc_construct_list [ i ] then
56388: LD_VAR 0 1
56392: PUSH
56393: LD_EXP 53
56397: PUSH
56398: LD_VAR 0 2
56402: ARRAY
56403: IN
56404: IFFALSE 56567
// begin tmp := mc_construct_list [ i ] diff building ;
56406: LD_ADDR_VAR 0 4
56410: PUSH
56411: LD_EXP 53
56415: PUSH
56416: LD_VAR 0 2
56420: ARRAY
56421: PUSH
56422: LD_VAR 0 1
56426: DIFF
56427: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
56428: LD_ADDR_EXP 53
56432: PUSH
56433: LD_EXP 53
56437: PPUSH
56438: LD_VAR 0 2
56442: PPUSH
56443: LD_VAR 0 4
56447: PPUSH
56448: CALL_OW 1
56452: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
56453: LD_ADDR_EXP 46
56457: PUSH
56458: LD_EXP 46
56462: PPUSH
56463: LD_VAR 0 2
56467: PUSH
56468: LD_EXP 46
56472: PUSH
56473: LD_VAR 0 2
56477: ARRAY
56478: PUSH
56479: LD_INT 1
56481: PLUS
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PPUSH
56487: LD_VAR 0 1
56491: PPUSH
56492: CALL 3228 0 3
56496: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
56497: LD_VAR 0 1
56501: PPUSH
56502: CALL_OW 266
56506: PUSH
56507: LD_INT 32
56509: PUSH
56510: LD_INT 33
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: IN
56517: IFFALSE 56563
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
56519: LD_ADDR_EXP 54
56523: PUSH
56524: LD_EXP 54
56528: PPUSH
56529: LD_VAR 0 2
56533: PUSH
56534: LD_EXP 54
56538: PUSH
56539: LD_VAR 0 2
56543: ARRAY
56544: PUSH
56545: LD_INT 1
56547: PLUS
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PPUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: CALL 3228 0 3
56562: ST_TO_ADDR
// exit ;
56563: POP
56564: POP
56565: GO 56571
// end ; end ;
56567: GO 56385
56569: POP
56570: POP
// end ;
56571: PPOPN 4
56573: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56574: LD_INT 0
56576: PPUSH
56577: PPUSH
// begin if not mc_bases then
56578: LD_EXP 46
56582: NOT
56583: IFFALSE 56587
// exit ;
56585: GO 56802
// repeat wait ( 0 0$1 ) ;
56587: LD_INT 35
56589: PPUSH
56590: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56594: LD_VAR 0 2
56598: PPUSH
56599: LD_VAR 0 3
56603: PPUSH
56604: CALL_OW 284
56608: IFFALSE 56587
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56610: LD_VAR 0 2
56614: PPUSH
56615: LD_VAR 0 3
56619: PPUSH
56620: CALL_OW 283
56624: PUSH
56625: LD_INT 4
56627: EQUAL
56628: IFFALSE 56632
// exit ;
56630: GO 56802
// for i = 1 to mc_bases do
56632: LD_ADDR_VAR 0 6
56636: PUSH
56637: DOUBLE
56638: LD_INT 1
56640: DEC
56641: ST_TO_ADDR
56642: LD_EXP 46
56646: PUSH
56647: FOR_TO
56648: IFFALSE 56800
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56650: LD_ADDR_VAR 0 7
56654: PUSH
56655: LD_EXP 46
56659: PUSH
56660: LD_VAR 0 6
56664: ARRAY
56665: PPUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 30
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 30
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: PPUSH
56694: CALL_OW 72
56698: ST_TO_ADDR
// if not depot then
56699: LD_VAR 0 7
56703: NOT
56704: IFFALSE 56708
// continue ;
56706: GO 56647
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56708: LD_VAR 0 7
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: PPUSH
56717: LD_VAR 0 2
56721: PPUSH
56722: LD_VAR 0 3
56726: PPUSH
56727: CALL_OW 297
56731: PUSH
56732: LD_INT 30
56734: LESS
56735: IFFALSE 56798
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56737: LD_ADDR_EXP 59
56741: PUSH
56742: LD_EXP 59
56746: PPUSH
56747: LD_VAR 0 6
56751: PUSH
56752: LD_EXP 59
56756: PUSH
56757: LD_VAR 0 6
56761: ARRAY
56762: PUSH
56763: LD_INT 1
56765: PLUS
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PPUSH
56771: LD_VAR 0 4
56775: PUSH
56776: LD_VAR 0 2
56780: PUSH
56781: LD_VAR 0 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: PPUSH
56791: CALL 3228 0 3
56795: ST_TO_ADDR
// break ;
56796: GO 56800
// end ; end ;
56798: GO 56647
56800: POP
56801: POP
// end ;
56802: PPOPN 7
56804: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56805: LD_INT 0
56807: PPUSH
56808: PPUSH
// begin if not mc_bases then
56809: LD_EXP 46
56813: NOT
56814: IFFALSE 56818
// exit ;
56816: GO 56906
// for i = 1 to mc_bases do
56818: LD_ADDR_VAR 0 3
56822: PUSH
56823: DOUBLE
56824: LD_INT 1
56826: DEC
56827: ST_TO_ADDR
56828: LD_EXP 46
56832: PUSH
56833: FOR_TO
56834: IFFALSE 56904
// begin if factory in mc_bases [ i ] then
56836: LD_VAR 0 2
56840: PUSH
56841: LD_EXP 46
56845: PUSH
56846: LD_VAR 0 3
56850: ARRAY
56851: IN
56852: IFFALSE 56902
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56854: LD_ADDR_EXP 61
56858: PUSH
56859: LD_EXP 61
56863: PPUSH
56864: LD_VAR 0 3
56868: PUSH
56869: LD_EXP 61
56873: PUSH
56874: LD_VAR 0 3
56878: ARRAY
56879: PUSH
56880: LD_INT 1
56882: PLUS
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PPUSH
56888: LD_VAR 0 1
56892: PPUSH
56893: CALL 3228 0 3
56897: ST_TO_ADDR
// exit ;
56898: POP
56899: POP
56900: GO 56906
// end ; end ;
56902: GO 56833
56904: POP
56905: POP
// end ;
56906: PPOPN 4
56908: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 247
56918: PUSH
56919: LD_INT 2
56921: EQUAL
56922: IFFALSE 56926
// exit ;
56924: GO 56943
// if not kamikazed then
56926: LD_EXP 11
56930: NOT
56931: IFFALSE 56943
// kamikazed := unit ;
56933: LD_ADDR_EXP 11
56937: PUSH
56938: LD_VAR 0 1
56942: ST_TO_ADDR
// end ;
56943: PPOPN 1
56945: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
56946: LD_INT 0
56948: PPUSH
56949: PPUSH
// begin if side <> 2 then
56950: LD_VAR 0 3
56954: PUSH
56955: LD_INT 2
56957: NONEQUAL
56958: IFFALSE 56962
// exit ;
56960: GO 57085
// for i = 1 to mc_vehicles do
56962: LD_ADDR_VAR 0 5
56966: PUSH
56967: DOUBLE
56968: LD_INT 1
56970: DEC
56971: ST_TO_ADDR
56972: LD_EXP 61
56976: PUSH
56977: FOR_TO
56978: IFFALSE 57083
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
56980: LD_VAR 0 2
56984: PUSH
56985: LD_EXP 61
56989: PUSH
56990: LD_VAR 0 5
56994: ARRAY
56995: IN
56996: PUSH
56997: LD_VAR 0 1
57001: PUSH
57002: LD_EXP 61
57006: PUSH
57007: LD_VAR 0 5
57011: ARRAY
57012: IN
57013: OR
57014: IFFALSE 57081
// begin tmp := mc_vehicles [ i ] diff old ;
57016: LD_ADDR_VAR 0 6
57020: PUSH
57021: LD_EXP 61
57025: PUSH
57026: LD_VAR 0 5
57030: ARRAY
57031: PUSH
57032: LD_VAR 0 2
57036: DIFF
57037: ST_TO_ADDR
// tmp := tmp diff new ;
57038: LD_ADDR_VAR 0 6
57042: PUSH
57043: LD_VAR 0 6
57047: PUSH
57048: LD_VAR 0 1
57052: DIFF
57053: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
57054: LD_ADDR_EXP 61
57058: PUSH
57059: LD_EXP 61
57063: PPUSH
57064: LD_VAR 0 5
57068: PPUSH
57069: LD_VAR 0 6
57073: PPUSH
57074: CALL_OW 1
57078: ST_TO_ADDR
// break ;
57079: GO 57083
// end ;
57081: GO 56977
57083: POP
57084: POP
// end ;
57085: PPOPN 6
57087: END
// on BuildingCaptured ( building , side , capturning_unit ) do var i , tmp ;
57088: LD_INT 0
57090: PPUSH
57091: PPUSH
// begin if side <> 2 then
57092: LD_VAR 0 2
57096: PUSH
57097: LD_INT 2
57099: NONEQUAL
57100: IFFALSE 57104
// exit ;
57102: GO 57193
// for i = 1 to mc_bases do
57104: LD_ADDR_VAR 0 4
57108: PUSH
57109: DOUBLE
57110: LD_INT 1
57112: DEC
57113: ST_TO_ADDR
57114: LD_EXP 46
57118: PUSH
57119: FOR_TO
57120: IFFALSE 57191
// if building in mc_bases [ i ] then
57122: LD_VAR 0 1
57126: PUSH
57127: LD_EXP 46
57131: PUSH
57132: LD_VAR 0 4
57136: ARRAY
57137: IN
57138: IFFALSE 57189
// begin tmp := mc_bases [ i ] diff building ;
57140: LD_ADDR_VAR 0 5
57144: PUSH
57145: LD_EXP 46
57149: PUSH
57150: LD_VAR 0 4
57154: ARRAY
57155: PUSH
57156: LD_VAR 0 1
57160: DIFF
57161: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
57162: LD_ADDR_EXP 46
57166: PUSH
57167: LD_EXP 46
57171: PPUSH
57172: LD_VAR 0 4
57176: PPUSH
57177: LD_VAR 0 5
57181: PPUSH
57182: CALL_OW 1
57186: ST_TO_ADDR
// break ;
57187: GO 57191
// end ;
57189: GO 57119
57191: POP
57192: POP
// end ; end_of_file
57193: PPOPN 5
57195: END
// every 0 0$1 trigger game do
57196: LD_EXP 2
57200: IFFALSE 57230
57202: GO 57204
57204: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
57205: LD_INT 7
57207: PUSH
57208: LD_INT 6
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: LD_INT 6
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: PPUSH
57223: LD_INT 1750
57225: PPUSH
57226: CALL 57231 0 2
57230: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
57231: LD_INT 0
57233: PPUSH
57234: PPUSH
57235: PPUSH
// if not areas then
57236: LD_VAR 0 1
57240: NOT
57241: IFFALSE 57245
// exit ;
57243: GO 57357
// repeat wait ( time ) ;
57245: LD_VAR 0 2
57249: PPUSH
57250: CALL_OW 67
// p := rand ( 1 , 90 ) ;
57254: LD_ADDR_VAR 0 5
57258: PUSH
57259: LD_INT 1
57261: PPUSH
57262: LD_INT 90
57264: PPUSH
57265: CALL_OW 12
57269: ST_TO_ADDR
// for i in areas do
57270: LD_ADDR_VAR 0 4
57274: PUSH
57275: LD_VAR 0 1
57279: PUSH
57280: FOR_IN
57281: IFFALSE 57334
// begin if Prob ( p ) then
57283: LD_VAR 0 5
57287: PPUSH
57288: CALL_OW 13
57292: IFFALSE 57332
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
57294: LD_INT 1
57296: PPUSH
57297: LD_INT 5
57299: PPUSH
57300: CALL_OW 12
57304: PPUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: LD_INT 1
57312: PPUSH
57313: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
57317: LD_INT 455
57319: PPUSH
57320: LD_INT 595
57322: PPUSH
57323: CALL_OW 12
57327: PPUSH
57328: CALL_OW 67
// end ; end ;
57332: GO 57280
57334: POP
57335: POP
// time := time + 0 0$3 ;
57336: LD_ADDR_VAR 0 2
57340: PUSH
57341: LD_VAR 0 2
57345: PUSH
57346: LD_INT 105
57348: PLUS
57349: ST_TO_ADDR
// until not game ;
57350: LD_EXP 2
57354: NOT
57355: IFFALSE 57245
// end ;
57357: LD_VAR 0 3
57361: RET
