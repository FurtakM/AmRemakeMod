// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 38 0 0
// InitMacro ;
  12: CALL 44741 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28896 0 0
// PrepareArabian ;
  33: CALL 33211 0 0
// end ;
  37: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter ; function InitVariables ; begin
  38: LD_INT 0
  40: PPUSH
// debug := 1 ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// game := true ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_INT 1
  56: ST_TO_ADDR
// mission_prefix := 11_ ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_STRING 11_
  64: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_STRING 10c_
  72: ST_TO_ADDR
// ar_run := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// ar_patrol := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// base_captured := false ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// us_scout := 0 ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: PUSH
 113: LD_INT 0
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 0
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: ST_TO_ADDR
// kamikazed := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// artifact_stolen := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// artifact_get := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 189000
 163: PUSH
 164: LD_INT 168000
 166: PUSH
 167: LD_INT 157500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: PUSH
 175: LD_OWVAR 67
 179: ARRAY
 180: ST_TO_ADDR
// powell_warn := false ;
 181: LD_ADDR_EXP 15
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// loses_counter := 0 ;
 189: LD_ADDR_EXP 16
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_oncargo := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// end ;
 205: LD_VAR 0 1
 209: RET
// function Debuger ; var i ; begin
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
// if not debug then
 214: LD_EXP 1
 218: NOT
 219: IFFALSE 223
// exit ;
 221: GO 332
// game_speed := 5 ;
 223: LD_ADDR_OWVAR 65
 227: PUSH
 228: LD_INT 5
 230: ST_TO_ADDR
// uc_side := 1 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 1
 238: ST_TO_ADDR
// uc_nation := 1 ;
 239: LD_ADDR_OWVAR 21
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 247: LD_ADDR_OWVAR 37
 251: PUSH
 252: LD_INT 2
 254: ST_TO_ADDR
// vc_control := control_computer ;
 255: LD_ADDR_OWVAR 38
 259: PUSH
 260: LD_INT 3
 262: ST_TO_ADDR
// vc_engine := engine_combustion ;
 263: LD_ADDR_OWVAR 39
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 271: LD_ADDR_OWVAR 40
 275: PUSH
 276: LD_INT 7
 278: ST_TO_ADDR
// for i = 1 to 4 do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 4
 291: PUSH
 292: FOR_TO
 293: IFFALSE 318
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 295: CALL_OW 45
 299: PPUSH
 300: LD_INT 137
 302: PPUSH
 303: LD_INT 91
 305: PPUSH
 306: LD_INT 6
 308: PPUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 50
 316: GO 292
 318: POP
 319: POP
// SetSide ( ar_force_south , 1 ) ;
 320: LD_EXP 33
 324: PPUSH
 325: LD_INT 1
 327: PPUSH
 328: CALL_OW 235
// end ; end_of_file
 332: LD_VAR 0 1
 336: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
 345: PPUSH
 346: PPUSH
 347: PPUSH
// uc_side := 4 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 4
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 364: LD_ADDR_EXP 26
 368: PUSH
 369: LD_STRING Powell
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: CALL 1895 0 2
 379: ST_TO_ADDR
// uc_side := 1 ;
 380: LD_ADDR_OWVAR 20
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 388: LD_ADDR_EXP 17
 392: PUSH
 393: LD_STRING JMM
 395: PPUSH
 396: LD_EXP 1
 400: NOT
 401: PPUSH
 402: CALL 1895 0 2
 406: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 407: LD_ADDR_EXP 18
 411: PUSH
 412: LD_STRING Lisa
 414: PPUSH
 415: LD_EXP 1
 419: NOT
 420: PPUSH
 421: CALL 1895 0 2
 425: ST_TO_ADDR
// if not Lisa then
 426: LD_EXP 18
 430: NOT
 431: IFFALSE 446
// Lisa := CreateCharacter ( 10_Lisa ) ;
 433: LD_ADDR_EXP 18
 437: PUSH
 438: LD_STRING 10_Lisa
 440: PPUSH
 441: CALL_OW 34
 445: ST_TO_ADDR
// if not Lisa then
 446: LD_EXP 18
 450: NOT
 451: IFFALSE 466
// Lisa := CreateCharacter ( 09_Lisa ) ;
 453: LD_ADDR_EXP 18
 457: PUSH
 458: LD_STRING 09_Lisa
 460: PPUSH
 461: CALL_OW 34
 465: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 466: LD_ADDR_EXP 19
 470: PUSH
 471: LD_STRING Donaldson
 473: PPUSH
 474: LD_EXP 1
 478: NOT
 479: PPUSH
 480: CALL 1895 0 2
 484: ST_TO_ADDR
// if not Donaldson then
 485: LD_EXP 19
 489: NOT
 490: IFFALSE 505
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 492: LD_ADDR_EXP 19
 496: PUSH
 497: LD_STRING 10_Donaldson
 499: PPUSH
 500: CALL_OW 34
 504: ST_TO_ADDR
// if not Donaldson then
 505: LD_EXP 19
 509: NOT
 510: IFFALSE 525
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 512: LD_ADDR_EXP 19
 516: PUSH
 517: LD_STRING 09_Donaldson
 519: PPUSH
 520: CALL_OW 34
 524: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 525: LD_ADDR_EXP 20
 529: PUSH
 530: LD_STRING Bobby
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: CALL 1895 0 2
 543: ST_TO_ADDR
// if not Bobby then
 544: LD_EXP 20
 548: NOT
 549: IFFALSE 564
// Bobby := CreateCharacter ( 10_Bobby ) ;
 551: LD_ADDR_EXP 20
 555: PUSH
 556: LD_STRING 10_Bobby
 558: PPUSH
 559: CALL_OW 34
 563: ST_TO_ADDR
// if not Bobby then
 564: LD_EXP 20
 568: NOT
 569: IFFALSE 584
// Bobby := CreateCharacter ( 09_Bobby ) ;
 571: LD_ADDR_EXP 20
 575: PUSH
 576: LD_STRING 09_Bobby
 578: PPUSH
 579: CALL_OW 34
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 584: LD_ADDR_EXP 21
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 1
 596: NOT
 597: PPUSH
 598: CALL 1895 0 2
 602: ST_TO_ADDR
// if not Cyrus then
 603: LD_EXP 21
 607: NOT
 608: IFFALSE 623
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 610: LD_ADDR_EXP 21
 614: PUSH
 615: LD_STRING 10_Cyrus
 617: PPUSH
 618: CALL_OW 34
 622: ST_TO_ADDR
// if not Cyrus then
 623: LD_EXP 21
 627: NOT
 628: IFFALSE 643
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 630: LD_ADDR_EXP 21
 634: PUSH
 635: LD_STRING 09_Cyrus
 637: PPUSH
 638: CALL_OW 34
 642: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 643: LD_ADDR_EXP 22
 647: PUSH
 648: LD_STRING Denis
 650: PPUSH
 651: LD_EXP 1
 655: NOT
 656: PPUSH
 657: CALL 1895 0 2
 661: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 662: LD_ADDR_EXP 23
 666: PUSH
 667: LD_STRING Brown
 669: PPUSH
 670: LD_EXP 1
 674: NOT
 675: PPUSH
 676: CALL 1895 0 2
 680: ST_TO_ADDR
// if not Brown then
 681: LD_EXP 23
 685: NOT
 686: IFFALSE 701
// Brown := CreateCharacter ( 10_Brown ) ;
 688: LD_ADDR_EXP 23
 692: PUSH
 693: LD_STRING 10_Brown
 695: PPUSH
 696: CALL_OW 34
 700: ST_TO_ADDR
// if not Brown then
 701: LD_EXP 23
 705: NOT
 706: IFFALSE 721
// Brown := CreateCharacter ( 08_Brown ) ;
 708: LD_ADDR_EXP 23
 712: PUSH
 713: LD_STRING 08_Brown
 715: PPUSH
 716: CALL_OW 34
 720: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 721: LD_ADDR_EXP 24
 725: PUSH
 726: LD_STRING Gladstone
 728: PPUSH
 729: LD_EXP 1
 733: NOT
 734: PPUSH
 735: CALL 1895 0 2
 739: ST_TO_ADDR
// if not Gladstone then
 740: LD_EXP 24
 744: NOT
 745: IFFALSE 760
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 747: LD_ADDR_EXP 24
 751: PUSH
 752: LD_STRING 10_Gladstone
 754: PPUSH
 755: CALL_OW 34
 759: ST_TO_ADDR
// if not Gladstone then
 760: LD_EXP 24
 764: NOT
 765: IFFALSE 780
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 767: LD_ADDR_EXP 24
 771: PUSH
 772: LD_STRING 08_Gladstone
 774: PPUSH
 775: CALL_OW 34
 779: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 780: LD_ADDR_EXP 25
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_EXP 1
 792: NOT
 793: PPUSH
 794: CALL 1895 0 2
 798: ST_TO_ADDR
// if not Houten then
 799: LD_EXP 25
 803: NOT
 804: IFFALSE 819
// Houten := CreateCharacter ( 10_Houten ) ;
 806: LD_ADDR_EXP 25
 810: PUSH
 811: LD_STRING 10_Houten
 813: PPUSH
 814: CALL_OW 34
 818: ST_TO_ADDR
// if not Houten then
 819: LD_EXP 25
 823: NOT
 824: IFFALSE 839
// Houten := CreateCharacter ( 09_Houten ) ;
 826: LD_ADDR_EXP 25
 830: PUSH
 831: LD_STRING 09_Houten
 833: PPUSH
 834: CALL_OW 34
 838: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 839: LD_ADDR_EXP 27
 843: PUSH
 844: LD_STRING Cornel
 846: PPUSH
 847: LD_EXP 1
 851: NOT
 852: PPUSH
 853: CALL 1895 0 2
 857: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 858: LD_ADDR_EXP 28
 862: PUSH
 863: LD_STRING Gary
 865: PPUSH
 866: LD_EXP 1
 870: NOT
 871: PPUSH
 872: CALL 1895 0 2
 876: ST_TO_ADDR
// if not Gary then
 877: LD_EXP 28
 881: NOT
 882: IFFALSE 897
// Gary := CreateCharacter ( 10_Gary ) ;
 884: LD_ADDR_EXP 28
 888: PUSH
 889: LD_STRING 10_Gary
 891: PPUSH
 892: CALL_OW 34
 896: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 897: LD_ADDR_EXP 29
 901: PUSH
 902: LD_STRING Frank
 904: PPUSH
 905: LD_EXP 1
 909: NOT
 910: PPUSH
 911: CALL 1895 0 2
 915: ST_TO_ADDR
// if not Frank then
 916: LD_EXP 29
 920: NOT
 921: IFFALSE 936
// Frank := CreateCharacter ( 08_Frank ) ;
 923: LD_ADDR_EXP 29
 927: PUSH
 928: LD_STRING 08_Frank
 930: PPUSH
 931: CALL_OW 34
 935: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 936: LD_ADDR_EXP 30
 940: PUSH
 941: LD_STRING Kikuchi
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: CALL 1895 0 2
 954: ST_TO_ADDR
// if not Kikuchi then
 955: LD_EXP 30
 959: NOT
 960: IFFALSE 975
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 962: LD_ADDR_EXP 30
 966: PUSH
 967: LD_STRING 08_Kikuchi
 969: PPUSH
 970: CALL_OW 34
 974: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 975: LD_ADDR_VAR 0 5
 979: PUSH
 980: LD_EXP 18
 984: PUSH
 985: LD_EXP 19
 989: PUSH
 990: LD_EXP 20
 994: PUSH
 995: LD_EXP 21
 999: PUSH
1000: LD_EXP 22
1004: PUSH
1005: LD_EXP 23
1009: PUSH
1010: LD_EXP 24
1014: PUSH
1015: LD_EXP 25
1019: PUSH
1020: LD_EXP 27
1024: PUSH
1025: LD_EXP 28
1029: PUSH
1030: LD_EXP 29
1034: PUSH
1035: LD_EXP 30
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: ST_TO_ADDR
// tmp := tmp diff 0 ;
1054: LD_ADDR_VAR 0 5
1058: PUSH
1059: LD_VAR 0 5
1063: PUSH
1064: LD_INT 0
1066: DIFF
1067: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1068: LD_ADDR_VAR 0 5
1072: PUSH
1073: LD_VAR 0 5
1077: PUSH
1078: LD_STRING 10_lock
1080: PPUSH
1081: CALL_OW 31
1085: UNION
1086: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1087: LD_ADDR_VAR 0 5
1091: PUSH
1092: LD_VAR 0 5
1096: PUSH
1097: LD_STRING 10c_lock
1099: PPUSH
1100: CALL_OW 31
1104: UNION
1105: ST_TO_ADDR
// for i in tmp do
1106: LD_ADDR_VAR 0 2
1110: PUSH
1111: LD_VAR 0 5
1115: PUSH
1116: FOR_IN
1117: IFFALSE 1148
// if GetClass ( i ) = class_mortar then
1119: LD_VAR 0 2
1123: PPUSH
1124: CALL_OW 257
1128: PUSH
1129: LD_INT 8
1131: EQUAL
1132: IFFALSE 1146
// SetClass ( i , class_soldier ) ;
1134: LD_VAR 0 2
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: CALL_OW 336
1146: GO 1116
1148: POP
1149: POP
// if tmp < 12 then
1150: LD_VAR 0 5
1154: PUSH
1155: LD_INT 12
1157: LESS
1158: IFFALSE 1256
// begin k := 16 - tmp ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 16
1167: PUSH
1168: LD_VAR 0 5
1172: MINUS
1173: ST_TO_ADDR
// for i = 1 to k do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: DOUBLE
1180: LD_INT 1
1182: DEC
1183: ST_TO_ADDR
1184: LD_VAR 0 3
1188: PUSH
1189: FOR_TO
1190: IFFALSE 1254
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 3
1206: PUSH
1207: LD_INT 4
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 1
1219: PPUSH
1220: LD_INT 5
1222: PPUSH
1223: CALL_OW 12
1227: ARRAY
1228: PPUSH
1229: LD_INT 6
1231: PPUSH
1232: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1236: LD_ADDR_VAR 0 5
1240: PUSH
1241: LD_VAR 0 5
1245: PUSH
1246: CALL_OW 44
1250: ADD
1251: ST_TO_ADDR
// end ;
1252: GO 1189
1254: POP
1255: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1256: LD_ADDR_VAR 0 6
1260: PUSH
1261: LD_STRING 1
1263: PPUSH
1264: LD_INT 12
1266: PPUSH
1267: LD_INT 12
1269: PPUSH
1270: LD_INT -5
1272: PUSH
1273: LD_EXP 17
1277: PUSH
1278: LD_INT -2
1280: PUSH
1281: LD_INT -3
1283: PUSH
1284: LD_INT -5
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_VAR 0 5
1298: ADD
1299: PUSH
1300: LD_INT -6
1302: PUSH
1303: LD_INT -4
1305: PUSH
1306: LD_EXP 26
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: ADD
1316: PPUSH
1317: LD_INT 1
1319: PUSH
1320: LD_INT 4
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_INT 4
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: LD_INT 3
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: PUSH
1365: LD_INT 5
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 2
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: PPUSH
1386: CALL_OW 42
1390: ST_TO_ADDR
// others := tmp diff selected ;
1391: LD_ADDR_VAR 0 9
1395: PUSH
1396: LD_VAR 0 5
1400: PUSH
1401: LD_VAR 0 6
1405: DIFF
1406: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1407: LD_ADDR_VAR 0 9
1411: PUSH
1412: LD_VAR 0 5
1416: PUSH
1417: LD_EXP 18
1421: PUSH
1422: LD_EXP 19
1426: PUSH
1427: LD_EXP 20
1431: PUSH
1432: LD_EXP 21
1436: PUSH
1437: LD_EXP 22
1441: PUSH
1442: LD_EXP 23
1446: PUSH
1447: LD_EXP 24
1451: PUSH
1452: LD_EXP 25
1456: PUSH
1457: LD_EXP 27
1461: PUSH
1462: LD_EXP 28
1466: PUSH
1467: LD_EXP 29
1471: PUSH
1472: LD_EXP 30
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: DIFF
1491: ST_TO_ADDR
// if others then
1492: LD_VAR 0 9
1496: IFFALSE 1510
// SaveCharacters ( others , 11_others ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: LD_STRING 11_others
1505: PPUSH
1506: CALL_OW 38
// us_team := tmp ;
1510: LD_ADDR_EXP 31
1514: PUSH
1515: LD_VAR 0 5
1519: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1520: LD_ADDR_VAR 0 7
1524: PUSH
1525: LD_INT 3
1527: PUSH
1528: LD_INT 1
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 4
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 4
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 5
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 2
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 7
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 7
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: ST_TO_ADDR
// for i in JMM ^ selected do
1622: LD_ADDR_VAR 0 2
1626: PUSH
1627: LD_EXP 17
1631: PUSH
1632: LD_VAR 0 6
1636: ADD
1637: PUSH
1638: FOR_IN
1639: IFFALSE 1828
// begin if GetClass ( i ) = 3 then
1641: LD_VAR 0 2
1645: PPUSH
1646: CALL_OW 257
1650: PUSH
1651: LD_INT 3
1653: EQUAL
1654: IFFALSE 1811
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1656: LD_ADDR_OWVAR 37
1660: PUSH
1661: LD_VAR 0 7
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PUSH
1670: LD_INT 1
1672: ARRAY
1673: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1674: LD_ADDR_OWVAR 39
1678: PUSH
1679: LD_VAR 0 7
1683: PUSH
1684: LD_INT 1
1686: ARRAY
1687: PUSH
1688: LD_INT 2
1690: ARRAY
1691: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1692: LD_ADDR_OWVAR 38
1696: PUSH
1697: LD_VAR 0 7
1701: PUSH
1702: LD_INT 1
1704: ARRAY
1705: PUSH
1706: LD_INT 3
1708: ARRAY
1709: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1710: LD_ADDR_OWVAR 40
1714: PUSH
1715: LD_VAR 0 7
1719: PUSH
1720: LD_INT 1
1722: ARRAY
1723: PUSH
1724: LD_INT 4
1726: ARRAY
1727: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1728: LD_ADDR_VAR 0 7
1732: PUSH
1733: LD_VAR 0 7
1737: PPUSH
1738: LD_INT 1
1740: PPUSH
1741: CALL_OW 3
1745: ST_TO_ADDR
// veh := CreateVehicle ;
1746: LD_ADDR_VAR 0 8
1750: PUSH
1751: CALL_OW 45
1755: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1756: LD_VAR 0 8
1760: PPUSH
1761: LD_INT 8
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1771: LD_VAR 0 2
1775: PPUSH
1776: LD_VAR 0 8
1780: PPUSH
1781: CALL_OW 52
// if i = JMM then
1785: LD_VAR 0 2
1789: PUSH
1790: LD_EXP 17
1794: EQUAL
1795: IFFALSE 1809
// SetMark ( veh , 1 ) ;
1797: LD_VAR 0 8
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 242
// end else
1809: GO 1826
// PlaceUnitArea ( i , am_hum_start , false ) ;
1811: LD_VAR 0 2
1815: PPUSH
1816: LD_INT 9
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// end ;
1826: GO 1638
1828: POP
1829: POP
// vc_chassis := us_medium_tracked ;
1830: LD_ADDR_OWVAR 37
1834: PUSH
1835: LD_INT 3
1837: ST_TO_ADDR
// vc_engine := engine_solar ;
1838: LD_ADDR_OWVAR 39
1842: PUSH
1843: LD_INT 2
1845: ST_TO_ADDR
// vc_control := control_computer ;
1846: LD_ADDR_OWVAR 38
1850: PUSH
1851: LD_INT 3
1853: ST_TO_ADDR
// vc_weapon := us_radar ;
1854: LD_ADDR_OWVAR 40
1858: PUSH
1859: LD_INT 11
1861: ST_TO_ADDR
// veh := CreateVehicle ;
1862: LD_ADDR_VAR 0 8
1866: PUSH
1867: CALL_OW 45
1871: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1872: LD_VAR 0 8
1876: PPUSH
1877: LD_INT 87
1879: PPUSH
1880: LD_INT 142
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: CALL_OW 48
// end ; end_of_file
1890: LD_VAR 0 1
1894: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1895: LD_INT 0
1897: PPUSH
1898: PPUSH
// if exist_mode then
1899: LD_VAR 0 2
1903: IFFALSE 1928
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1905: LD_ADDR_VAR 0 4
1909: PUSH
1910: LD_EXP 4
1914: PUSH
1915: LD_VAR 0 1
1919: STR
1920: PPUSH
1921: CALL_OW 34
1925: ST_TO_ADDR
1926: GO 1943
// unit := NewCharacter ( ident ) ;
1928: LD_ADDR_VAR 0 4
1932: PUSH
1933: LD_VAR 0 1
1937: PPUSH
1938: CALL_OW 25
1942: ST_TO_ADDR
// result := unit ;
1943: LD_ADDR_VAR 0 3
1947: PUSH
1948: LD_VAR 0 4
1952: ST_TO_ADDR
// end ;
1953: LD_VAR 0 3
1957: RET
// export function _GetHexInfo ( x , y ) ; begin
1958: LD_INT 0
1960: PPUSH
// result := false ;
1961: LD_ADDR_VAR 0 3
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1969: LD_VAR 0 1
1973: PPUSH
1974: LD_VAR 0 2
1978: PPUSH
1979: CALL_OW 488
1983: NOT
1984: PUSH
1985: LD_VAR 0 1
1989: NOT
1990: OR
1991: PUSH
1992: LD_VAR 0 2
1996: NOT
1997: OR
1998: IFFALSE 2002
// exit ;
2000: GO 2022
// result := GetHexInfo ( x , y ) ;
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 1
2011: PPUSH
2012: LD_VAR 0 2
2016: PPUSH
2017: CALL_OW 546
2021: ST_TO_ADDR
// end ;
2022: LD_VAR 0 3
2026: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2027: LD_INT 0
2029: PPUSH
// vc_chassis := chassis ;
2030: LD_ADDR_OWVAR 37
2034: PUSH
2035: LD_VAR 0 1
2039: ST_TO_ADDR
// vc_engine := engine ;
2040: LD_ADDR_OWVAR 39
2044: PUSH
2045: LD_VAR 0 2
2049: ST_TO_ADDR
// vc_control := control ;
2050: LD_ADDR_OWVAR 38
2054: PUSH
2055: LD_VAR 0 3
2059: ST_TO_ADDR
// vc_weapon := weapon ;
2060: LD_ADDR_OWVAR 40
2064: PUSH
2065: LD_VAR 0 4
2069: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2070: LD_ADDR_OWVAR 41
2074: PUSH
2075: LD_VAR 0 5
2079: ST_TO_ADDR
// end ;
2080: LD_VAR 0 6
2084: RET
// export function CanSayRand ( side ) ; begin
2085: LD_INT 0
2087: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2088: LD_ADDR_VAR 0 2
2092: PUSH
2093: LD_INT 22
2095: PUSH
2096: LD_VAR 0 1
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 25
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 25
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 25
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 25
2140: PUSH
2141: LD_INT 4
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PPUSH
2159: CALL_OW 69
2163: PUSH
2164: LD_EXP 17
2168: PUSH
2169: LD_EXP 29
2173: PUSH
2174: LD_EXP 18
2178: PUSH
2179: LD_EXP 19
2183: PUSH
2184: LD_EXP 20
2188: PUSH
2189: LD_EXP 21
2193: PUSH
2194: LD_EXP 22
2198: PUSH
2199: LD_EXP 23
2203: PUSH
2204: LD_EXP 24
2208: PUSH
2209: LD_EXP 25
2213: PUSH
2214: LD_EXP 26
2218: PUSH
2219: LD_EXP 27
2223: PUSH
2224: LD_EXP 28
2228: PUSH
2229: LD_EXP 30
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: DIFF
2250: ST_TO_ADDR
// end ;
2251: LD_VAR 0 2
2255: RET
// export function SayRand ( sex , dial ) ; begin
2256: LD_INT 0
2258: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2259: LD_ADDR_VAR 0 3
2263: PUSH
2264: LD_INT 22
2266: PUSH
2267: LD_INT 1
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: LD_INT 26
2276: PUSH
2277: LD_VAR 0 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 2
2288: PUSH
2289: LD_INT 25
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 2
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 25
2311: PUSH
2312: LD_INT 3
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_EXP 17
2350: PUSH
2351: LD_EXP 29
2355: PUSH
2356: LD_EXP 18
2360: PUSH
2361: LD_EXP 19
2365: PUSH
2366: LD_EXP 20
2370: PUSH
2371: LD_EXP 21
2375: PUSH
2376: LD_EXP 22
2380: PUSH
2381: LD_EXP 23
2385: PUSH
2386: LD_EXP 24
2390: PUSH
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 26
2400: PUSH
2401: LD_EXP 27
2405: PUSH
2406: LD_EXP 28
2410: PUSH
2411: LD_EXP 30
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: DIFF
2432: ST_TO_ADDR
// if not result then
2433: LD_VAR 0 3
2437: NOT
2438: IFFALSE 2442
// exit ;
2440: GO 2470
// result := result [ 1 ] ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// Say ( result , dial ) ;
2456: LD_VAR 0 3
2460: PPUSH
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 88
// end ;
2470: LD_VAR 0 3
2474: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2475: LD_INT 0
2477: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_INT 22
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 26
2495: PUSH
2496: LD_VAR 0 1
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: LD_INT 25
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 25
2520: PUSH
2521: LD_INT 2
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 25
2530: PUSH
2531: LD_INT 3
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 25
2540: PUSH
2541: LD_INT 4
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: LD_EXP 17
2569: PUSH
2570: LD_EXP 29
2574: PUSH
2575: LD_EXP 18
2579: PUSH
2580: LD_EXP 19
2584: PUSH
2585: LD_EXP 20
2589: PUSH
2590: LD_EXP 21
2594: PUSH
2595: LD_EXP 22
2599: PUSH
2600: LD_EXP 23
2604: PUSH
2605: LD_EXP 24
2609: PUSH
2610: LD_EXP 25
2614: PUSH
2615: LD_EXP 26
2619: PUSH
2620: LD_EXP 27
2624: PUSH
2625: LD_EXP 28
2629: PUSH
2630: LD_EXP 30
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_VAR 0 3
2655: ADD
2656: DIFF
2657: ST_TO_ADDR
// if not result then
2658: LD_VAR 0 4
2662: NOT
2663: IFFALSE 2667
// exit ;
2665: GO 2695
// result := result [ 1 ] ;
2667: LD_ADDR_VAR 0 4
2671: PUSH
2672: LD_VAR 0 4
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: ST_TO_ADDR
// Say ( result , dial ) ;
2681: LD_VAR 0 4
2685: PPUSH
2686: LD_VAR 0 2
2690: PPUSH
2691: CALL_OW 88
// end ;
2695: LD_VAR 0 4
2699: RET
// export function WantPlant ( unit ) ; var task ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// result := false ;
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_VAR 0 1
2721: PPUSH
2722: CALL_OW 437
2726: ST_TO_ADDR
// if task then
2727: LD_VAR 0 3
2731: IFFALSE 2759
// if task [ 1 ] [ 1 ] = p then
2733: LD_VAR 0 3
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: PUSH
2746: LD_STRING p
2748: EQUAL
2749: IFFALSE 2759
// result := true ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// end ;
2759: LD_VAR 0 2
2763: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
2769: PPUSH
// if pos < 1 then
2770: LD_VAR 0 2
2774: PUSH
2775: LD_INT 1
2777: LESS
2778: IFFALSE 2782
// exit ;
2780: GO 3085
// if pos = 1 then
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: EQUAL
2790: IFFALSE 2823
// result := Replace ( arr , pos [ 1 ] , value ) else
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_VAR 0 2
2806: PUSH
2807: LD_INT 1
2809: ARRAY
2810: PPUSH
2811: LD_VAR 0 3
2815: PPUSH
2816: CALL_OW 1
2820: ST_TO_ADDR
2821: GO 3085
// begin tmp := arr ;
2823: LD_ADDR_VAR 0 6
2827: PUSH
2828: LD_VAR 0 1
2832: ST_TO_ADDR
// s_arr := [ tmp ] ;
2833: LD_ADDR_VAR 0 7
2837: PUSH
2838: LD_VAR 0 6
2842: PUSH
2843: EMPTY
2844: LIST
2845: ST_TO_ADDR
// for i = 1 to pos - 1 do
2846: LD_ADDR_VAR 0 5
2850: PUSH
2851: DOUBLE
2852: LD_INT 1
2854: DEC
2855: ST_TO_ADDR
2856: LD_VAR 0 2
2860: PUSH
2861: LD_INT 1
2863: MINUS
2864: PUSH
2865: FOR_TO
2866: IFFALSE 2911
// begin tmp := tmp [ pos [ i ] ] ;
2868: LD_ADDR_VAR 0 6
2872: PUSH
2873: LD_VAR 0 6
2877: PUSH
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 5
2887: ARRAY
2888: ARRAY
2889: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: LD_VAR 0 7
2899: PUSH
2900: LD_VAR 0 6
2904: PUSH
2905: EMPTY
2906: LIST
2907: ADD
2908: ST_TO_ADDR
// end ;
2909: GO 2865
2911: POP
2912: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2913: LD_ADDR_VAR 0 6
2917: PUSH
2918: LD_VAR 0 6
2922: PPUSH
2923: LD_VAR 0 2
2927: PUSH
2928: LD_VAR 0 2
2932: ARRAY
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: CALL_OW 1
2943: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2944: LD_ADDR_VAR 0 7
2948: PUSH
2949: LD_VAR 0 7
2953: PPUSH
2954: LD_VAR 0 7
2958: PPUSH
2959: LD_VAR 0 6
2963: PPUSH
2964: CALL_OW 1
2968: ST_TO_ADDR
// for i = s_arr downto 2 do
2969: LD_ADDR_VAR 0 5
2973: PUSH
2974: DOUBLE
2975: LD_VAR 0 7
2979: INC
2980: ST_TO_ADDR
2981: LD_INT 2
2983: PUSH
2984: FOR_DOWNTO
2985: IFFALSE 3069
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2987: LD_ADDR_VAR 0 6
2991: PUSH
2992: LD_VAR 0 7
2996: PUSH
2997: LD_VAR 0 5
3001: PUSH
3002: LD_INT 1
3004: MINUS
3005: ARRAY
3006: PPUSH
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 5
3016: PUSH
3017: LD_INT 1
3019: MINUS
3020: ARRAY
3021: PPUSH
3022: LD_VAR 0 7
3026: PUSH
3027: LD_VAR 0 5
3031: ARRAY
3032: PPUSH
3033: CALL_OW 1
3037: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3038: LD_ADDR_VAR 0 7
3042: PUSH
3043: LD_VAR 0 7
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: MINUS
3056: PPUSH
3057: LD_VAR 0 6
3061: PPUSH
3062: CALL_OW 1
3066: ST_TO_ADDR
// end ;
3067: GO 2984
3069: POP
3070: POP
// result := s_arr [ 1 ] ;
3071: LD_ADDR_VAR 0 4
3075: PUSH
3076: LD_VAR 0 7
3080: PUSH
3081: LD_INT 1
3083: ARRAY
3084: ST_TO_ADDR
// end ; end ;
3085: LD_VAR 0 4
3089: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3090: LD_INT 0
3092: PPUSH
3093: PPUSH
// if not list then
3094: LD_VAR 0 1
3098: NOT
3099: IFFALSE 3103
// exit ;
3101: GO 3194
// i := list [ pos1 ] ;
3103: LD_ADDR_VAR 0 5
3107: PUSH
3108: LD_VAR 0 1
3112: PUSH
3113: LD_VAR 0 2
3117: ARRAY
3118: ST_TO_ADDR
// if not i then
3119: LD_VAR 0 5
3123: NOT
3124: IFFALSE 3128
// exit ;
3126: GO 3194
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3128: LD_ADDR_VAR 0 1
3132: PUSH
3133: LD_VAR 0 1
3137: PPUSH
3138: LD_VAR 0 2
3142: PPUSH
3143: LD_VAR 0 1
3147: PUSH
3148: LD_VAR 0 3
3152: ARRAY
3153: PPUSH
3154: CALL_OW 1
3158: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 3
3173: PPUSH
3174: LD_VAR 0 5
3178: PPUSH
3179: CALL_OW 1
3183: ST_TO_ADDR
// result := list ;
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_VAR 0 1
3193: ST_TO_ADDR
// end ;
3194: LD_VAR 0 4
3198: RET
// export function Add ( list , pos , val ) ; begin
3199: LD_INT 0
3201: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3202: LD_ADDR_VAR 0 4
3206: PUSH
3207: LD_VAR 0 1
3211: PPUSH
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_VAR 0 3
3221: PPUSH
3222: CALL 2764 0 3
3226: ST_TO_ADDR
3227: LD_VAR 0 4
3231: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3232: LD_INT 0
3234: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3235: LD_ADDR_VAR 0 5
3239: PUSH
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 250
3249: PPUSH
3250: LD_VAR 0 1
3254: PPUSH
3255: CALL_OW 251
3259: PPUSH
3260: LD_VAR 0 2
3264: PPUSH
3265: LD_VAR 0 3
3269: PPUSH
3270: LD_VAR 0 4
3274: PPUSH
3275: CALL 3285 0 5
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 5
3284: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// if not list then
3291: LD_VAR 0 3
3295: NOT
3296: IFFALSE 3300
// exit ;
3298: GO 3688
// result := [ ] ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: EMPTY
3306: ST_TO_ADDR
// for i in list do
3307: LD_ADDR_VAR 0 7
3311: PUSH
3312: LD_VAR 0 3
3316: PUSH
3317: FOR_IN
3318: IFFALSE 3520
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_VAR 0 7
3329: PPUSH
3330: LD_VAR 0 1
3334: PPUSH
3335: LD_VAR 0 2
3339: PPUSH
3340: CALL_OW 297
3344: ST_TO_ADDR
// if not result then
3345: LD_VAR 0 6
3349: NOT
3350: IFFALSE 3376
// result := [ [ i , tmp ] ] else
3352: LD_ADDR_VAR 0 6
3356: PUSH
3357: LD_VAR 0 7
3361: PUSH
3362: LD_VAR 0 9
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: ST_TO_ADDR
3374: GO 3518
// begin if result [ result ] [ 2 ] < tmp then
3376: LD_VAR 0 6
3380: PUSH
3381: LD_VAR 0 6
3385: ARRAY
3386: PUSH
3387: LD_INT 2
3389: ARRAY
3390: PUSH
3391: LD_VAR 0 9
3395: LESS
3396: IFFALSE 3438
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3398: LD_ADDR_VAR 0 6
3402: PUSH
3403: LD_VAR 0 6
3407: PPUSH
3408: LD_VAR 0 6
3412: PUSH
3413: LD_INT 1
3415: PLUS
3416: PPUSH
3417: LD_VAR 0 7
3421: PUSH
3422: LD_VAR 0 9
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PPUSH
3431: CALL_OW 2
3435: ST_TO_ADDR
3436: GO 3518
// for j = 1 to result do
3438: LD_ADDR_VAR 0 8
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_VAR 0 6
3452: PUSH
3453: FOR_TO
3454: IFFALSE 3516
// begin if tmp < result [ j ] [ 2 ] then
3456: LD_VAR 0 9
3460: PUSH
3461: LD_VAR 0 6
3465: PUSH
3466: LD_VAR 0 8
3470: ARRAY
3471: PUSH
3472: LD_INT 2
3474: ARRAY
3475: LESS
3476: IFFALSE 3514
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3478: LD_ADDR_VAR 0 6
3482: PUSH
3483: LD_VAR 0 6
3487: PPUSH
3488: LD_VAR 0 8
3492: PPUSH
3493: LD_VAR 0 7
3497: PUSH
3498: LD_VAR 0 9
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 2
3511: ST_TO_ADDR
// break ;
3512: GO 3516
// end ; end ;
3514: GO 3453
3516: POP
3517: POP
// end ; end ;
3518: GO 3317
3520: POP
3521: POP
// if result and not asc then
3522: LD_VAR 0 6
3526: PUSH
3527: LD_VAR 0 4
3531: NOT
3532: AND
3533: IFFALSE 3608
// begin tmp := result ;
3535: LD_ADDR_VAR 0 9
3539: PUSH
3540: LD_VAR 0 6
3544: ST_TO_ADDR
// for i = tmp downto 1 do
3545: LD_ADDR_VAR 0 7
3549: PUSH
3550: DOUBLE
3551: LD_VAR 0 9
3555: INC
3556: ST_TO_ADDR
3557: LD_INT 1
3559: PUSH
3560: FOR_DOWNTO
3561: IFFALSE 3606
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3563: LD_ADDR_VAR 0 6
3567: PUSH
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_VAR 0 9
3577: PUSH
3578: LD_VAR 0 7
3582: MINUS
3583: PUSH
3584: LD_INT 1
3586: PLUS
3587: PPUSH
3588: LD_VAR 0 9
3592: PUSH
3593: LD_VAR 0 7
3597: ARRAY
3598: PPUSH
3599: CALL_OW 1
3603: ST_TO_ADDR
3604: GO 3560
3606: POP
3607: POP
// end ; tmp := [ ] ;
3608: LD_ADDR_VAR 0 9
3612: PUSH
3613: EMPTY
3614: ST_TO_ADDR
// if mode then
3615: LD_VAR 0 5
3619: IFFALSE 3688
// begin for i = 1 to result do
3621: LD_ADDR_VAR 0 7
3625: PUSH
3626: DOUBLE
3627: LD_INT 1
3629: DEC
3630: ST_TO_ADDR
3631: LD_VAR 0 6
3635: PUSH
3636: FOR_TO
3637: IFFALSE 3676
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3639: LD_ADDR_VAR 0 9
3643: PUSH
3644: LD_VAR 0 9
3648: PPUSH
3649: LD_VAR 0 7
3653: PPUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 7
3663: ARRAY
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: CALL_OW 1
3673: ST_TO_ADDR
3674: GO 3636
3676: POP
3677: POP
// result := tmp ;
3678: LD_ADDR_VAR 0 6
3682: PUSH
3683: LD_VAR 0 9
3687: ST_TO_ADDR
// end ; end ;
3688: LD_VAR 0 6
3692: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3693: LD_INT 0
3695: PPUSH
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: LD_INT 0
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: ST_TO_ADDR
// if not x or not y then
3723: LD_VAR 0 2
3727: NOT
3728: PUSH
3729: LD_VAR 0 3
3733: NOT
3734: OR
3735: IFFALSE 3739
// exit ;
3737: GO 5367
// if not range then
3739: LD_VAR 0 4
3743: NOT
3744: IFFALSE 3754
// range := 10 ;
3746: LD_ADDR_VAR 0 4
3750: PUSH
3751: LD_INT 10
3753: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3754: LD_ADDR_VAR 0 8
3758: PUSH
3759: LD_INT 81
3761: PUSH
3762: LD_VAR 0 1
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 92
3773: PUSH
3774: LD_VAR 0 2
3778: PUSH
3779: LD_VAR 0 3
3783: PUSH
3784: LD_VAR 0 4
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 69
3803: ST_TO_ADDR
// if not tmp then
3804: LD_VAR 0 8
3808: NOT
3809: IFFALSE 3813
// exit ;
3811: GO 5367
// for i in tmp do
3813: LD_ADDR_VAR 0 6
3817: PUSH
3818: LD_VAR 0 8
3822: PUSH
3823: FOR_IN
3824: IFFALSE 5342
// begin points := [ 0 , 0 , 0 ] ;
3826: LD_ADDR_VAR 0 9
3830: PUSH
3831: LD_INT 0
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: ST_TO_ADDR
// bpoints := 1 ;
3845: LD_ADDR_VAR 0 10
3849: PUSH
3850: LD_INT 1
3852: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3853: LD_VAR 0 6
3857: PPUSH
3858: CALL_OW 247
3862: PUSH
3863: LD_INT 1
3865: DOUBLE
3866: EQUAL
3867: IFTRUE 3871
3869: GO 4449
3871: POP
// begin if GetClass ( i ) = 1 then
3872: LD_VAR 0 6
3876: PPUSH
3877: CALL_OW 257
3881: PUSH
3882: LD_INT 1
3884: EQUAL
3885: IFFALSE 3906
// points := [ 10 , 5 , 3 ] ;
3887: LD_ADDR_VAR 0 9
3891: PUSH
3892: LD_INT 10
3894: PUSH
3895: LD_INT 5
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: LIST
3905: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 257
3915: PUSH
3916: LD_INT 2
3918: PUSH
3919: LD_INT 3
3921: PUSH
3922: LD_INT 4
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: IN
3930: IFFALSE 3951
// points := [ 3 , 2 , 1 ] ;
3932: LD_ADDR_VAR 0 9
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: LD_INT 2
3942: PUSH
3943: LD_INT 1
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3951: LD_VAR 0 6
3955: PPUSH
3956: CALL_OW 257
3960: PUSH
3961: LD_INT 5
3963: EQUAL
3964: IFFALSE 3985
// points := [ 130 , 5 , 2 ] ;
3966: LD_ADDR_VAR 0 9
3970: PUSH
3971: LD_INT 130
3973: PUSH
3974: LD_INT 5
3976: PUSH
3977: LD_INT 2
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: LIST
3984: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 257
3994: PUSH
3995: LD_INT 8
3997: EQUAL
3998: IFFALSE 4019
// points := [ 35 , 35 , 30 ] ;
4000: LD_ADDR_VAR 0 9
4004: PUSH
4005: LD_INT 35
4007: PUSH
4008: LD_INT 35
4010: PUSH
4011: LD_INT 30
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4019: LD_VAR 0 6
4023: PPUSH
4024: CALL_OW 257
4028: PUSH
4029: LD_INT 9
4031: EQUAL
4032: IFFALSE 4053
// points := [ 20 , 55 , 40 ] ;
4034: LD_ADDR_VAR 0 9
4038: PUSH
4039: LD_INT 20
4041: PUSH
4042: LD_INT 55
4044: PUSH
4045: LD_INT 40
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4053: LD_VAR 0 6
4057: PPUSH
4058: CALL_OW 257
4062: PUSH
4063: LD_INT 12
4065: PUSH
4066: LD_INT 16
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: IN
4073: IFFALSE 4094
// points := [ 5 , 3 , 2 ] ;
4075: LD_ADDR_VAR 0 9
4079: PUSH
4080: LD_INT 5
4082: PUSH
4083: LD_INT 3
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4094: LD_VAR 0 6
4098: PPUSH
4099: CALL_OW 257
4103: PUSH
4104: LD_INT 17
4106: EQUAL
4107: IFFALSE 4128
// points := [ 100 , 50 , 75 ] ;
4109: LD_ADDR_VAR 0 9
4113: PUSH
4114: LD_INT 100
4116: PUSH
4117: LD_INT 50
4119: PUSH
4120: LD_INT 75
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4128: LD_VAR 0 6
4132: PPUSH
4133: CALL_OW 257
4137: PUSH
4138: LD_INT 15
4140: EQUAL
4141: IFFALSE 4162
// points := [ 10 , 5 , 3 ] ;
4143: LD_ADDR_VAR 0 9
4147: PUSH
4148: LD_INT 10
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4162: LD_VAR 0 6
4166: PPUSH
4167: CALL_OW 257
4171: PUSH
4172: LD_INT 14
4174: EQUAL
4175: IFFALSE 4196
// points := [ 10 , 0 , 0 ] ;
4177: LD_ADDR_VAR 0 9
4181: PUSH
4182: LD_INT 10
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4196: LD_VAR 0 6
4200: PPUSH
4201: CALL_OW 257
4205: PUSH
4206: LD_INT 11
4208: EQUAL
4209: IFFALSE 4230
// points := [ 30 , 10 , 5 ] ;
4211: LD_ADDR_VAR 0 9
4215: PUSH
4216: LD_INT 30
4218: PUSH
4219: LD_INT 10
4221: PUSH
4222: LD_INT 5
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4230: LD_VAR 0 1
4234: PPUSH
4235: LD_INT 5
4237: PPUSH
4238: CALL_OW 321
4242: PUSH
4243: LD_INT 2
4245: EQUAL
4246: IFFALSE 4263
// bpoints := bpoints * 1.8 ;
4248: LD_ADDR_VAR 0 10
4252: PUSH
4253: LD_VAR 0 10
4257: PUSH
4258: LD_REAL  1.80000000000000E+0000
4261: MUL
4262: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4263: LD_VAR 0 6
4267: PPUSH
4268: CALL_OW 257
4272: PUSH
4273: LD_INT 1
4275: PUSH
4276: LD_INT 2
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: IN
4291: PUSH
4292: LD_VAR 0 1
4296: PPUSH
4297: LD_INT 51
4299: PPUSH
4300: CALL_OW 321
4304: PUSH
4305: LD_INT 2
4307: EQUAL
4308: AND
4309: IFFALSE 4326
// bpoints := bpoints * 1.2 ;
4311: LD_ADDR_VAR 0 10
4315: PUSH
4316: LD_VAR 0 10
4320: PUSH
4321: LD_REAL  1.20000000000000E+0000
4324: MUL
4325: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4326: LD_VAR 0 6
4330: PPUSH
4331: CALL_OW 257
4335: PUSH
4336: LD_INT 5
4338: PUSH
4339: LD_INT 7
4341: PUSH
4342: LD_INT 9
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: IN
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 52
4358: PPUSH
4359: CALL_OW 321
4363: PUSH
4364: LD_INT 2
4366: EQUAL
4367: AND
4368: IFFALSE 4385
// bpoints := bpoints * 1.5 ;
4370: LD_ADDR_VAR 0 10
4374: PUSH
4375: LD_VAR 0 10
4379: PUSH
4380: LD_REAL  1.50000000000000E+0000
4383: MUL
4384: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 66
4392: PPUSH
4393: CALL_OW 321
4397: PUSH
4398: LD_INT 2
4400: EQUAL
4401: IFFALSE 4418
// bpoints := bpoints * 1.1 ;
4403: LD_ADDR_VAR 0 10
4407: PUSH
4408: LD_VAR 0 10
4412: PUSH
4413: LD_REAL  1.10000000000000E+0000
4416: MUL
4417: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4418: LD_ADDR_VAR 0 10
4422: PUSH
4423: LD_VAR 0 10
4427: PUSH
4428: LD_VAR 0 6
4432: PPUSH
4433: LD_INT 1
4435: PPUSH
4436: CALL_OW 259
4440: PUSH
4441: LD_REAL  1.15000000000000E+0000
4444: MUL
4445: MUL
4446: ST_TO_ADDR
// end ; unit_vehicle :
4447: GO 5271
4449: LD_INT 2
4451: DOUBLE
4452: EQUAL
4453: IFTRUE 4457
4455: GO 5259
4457: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4458: LD_VAR 0 6
4462: PPUSH
4463: CALL_OW 264
4467: PUSH
4468: LD_INT 2
4470: PUSH
4471: LD_INT 42
4473: PUSH
4474: LD_INT 24
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: IN
4482: IFFALSE 4503
// points := [ 25 , 5 , 3 ] ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_INT 25
4491: PUSH
4492: LD_INT 5
4494: PUSH
4495: LD_INT 3
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4503: LD_VAR 0 6
4507: PPUSH
4508: CALL_OW 264
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 43
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: IN
4527: IFFALSE 4548
// points := [ 40 , 15 , 5 ] ;
4529: LD_ADDR_VAR 0 9
4533: PUSH
4534: LD_INT 40
4536: PUSH
4537: LD_INT 15
4539: PUSH
4540: LD_INT 5
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4548: LD_VAR 0 6
4552: PPUSH
4553: CALL_OW 264
4557: PUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 23
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: IN
4568: IFFALSE 4589
// points := [ 7 , 25 , 8 ] ;
4570: LD_ADDR_VAR 0 9
4574: PUSH
4575: LD_INT 7
4577: PUSH
4578: LD_INT 25
4580: PUSH
4581: LD_INT 8
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4589: LD_VAR 0 6
4593: PPUSH
4594: CALL_OW 264
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: LD_INT 27
4604: PUSH
4605: LD_INT 44
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: IN
4613: IFFALSE 4634
// points := [ 14 , 50 , 16 ] ;
4615: LD_ADDR_VAR 0 9
4619: PUSH
4620: LD_INT 14
4622: PUSH
4623: LD_INT 50
4625: PUSH
4626: LD_INT 16
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4634: LD_VAR 0 6
4638: PPUSH
4639: CALL_OW 264
4643: PUSH
4644: LD_INT 6
4646: PUSH
4647: LD_INT 46
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: IN
4654: IFFALSE 4675
// points := [ 32 , 120 , 70 ] ;
4656: LD_ADDR_VAR 0 9
4660: PUSH
4661: LD_INT 32
4663: PUSH
4664: LD_INT 120
4666: PUSH
4667: LD_INT 70
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4675: LD_VAR 0 6
4679: PPUSH
4680: CALL_OW 264
4684: PUSH
4685: LD_INT 7
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 45
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: IN
4699: IFFALSE 4720
// points := [ 35 , 20 , 45 ] ;
4701: LD_ADDR_VAR 0 9
4705: PUSH
4706: LD_INT 35
4708: PUSH
4709: LD_INT 20
4711: PUSH
4712: LD_INT 45
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4720: LD_VAR 0 6
4724: PPUSH
4725: CALL_OW 264
4729: PUSH
4730: LD_INT 47
4732: PUSH
4733: EMPTY
4734: LIST
4735: IN
4736: IFFALSE 4757
// points := [ 67 , 45 , 75 ] ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 67
4745: PUSH
4746: LD_INT 45
4748: PUSH
4749: LD_INT 75
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4757: LD_VAR 0 6
4761: PPUSH
4762: CALL_OW 264
4766: PUSH
4767: LD_INT 26
4769: PUSH
4770: EMPTY
4771: LIST
4772: IN
4773: IFFALSE 4794
// points := [ 120 , 30 , 80 ] ;
4775: LD_ADDR_VAR 0 9
4779: PUSH
4780: LD_INT 120
4782: PUSH
4783: LD_INT 30
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4794: LD_VAR 0 6
4798: PPUSH
4799: CALL_OW 264
4803: PUSH
4804: LD_INT 22
4806: PUSH
4807: EMPTY
4808: LIST
4809: IN
4810: IFFALSE 4831
// points := [ 40 , 1 , 1 ] ;
4812: LD_ADDR_VAR 0 9
4816: PUSH
4817: LD_INT 40
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: LD_INT 1
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4831: LD_VAR 0 6
4835: PPUSH
4836: CALL_OW 264
4840: PUSH
4841: LD_INT 29
4843: PUSH
4844: EMPTY
4845: LIST
4846: IN
4847: IFFALSE 4868
// points := [ 70 , 200 , 400 ] ;
4849: LD_ADDR_VAR 0 9
4853: PUSH
4854: LD_INT 70
4856: PUSH
4857: LD_INT 200
4859: PUSH
4860: LD_INT 400
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4868: LD_VAR 0 6
4872: PPUSH
4873: CALL_OW 264
4877: PUSH
4878: LD_INT 14
4880: PUSH
4881: LD_INT 53
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: IN
4888: IFFALSE 4909
// points := [ 40 , 10 , 20 ] ;
4890: LD_ADDR_VAR 0 9
4894: PUSH
4895: LD_INT 40
4897: PUSH
4898: LD_INT 10
4900: PUSH
4901: LD_INT 20
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4909: LD_VAR 0 6
4913: PPUSH
4914: CALL_OW 264
4918: PUSH
4919: LD_INT 9
4921: PUSH
4922: EMPTY
4923: LIST
4924: IN
4925: IFFALSE 4946
// points := [ 5 , 70 , 20 ] ;
4927: LD_ADDR_VAR 0 9
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: LD_INT 70
4937: PUSH
4938: LD_INT 20
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4946: LD_VAR 0 6
4950: PPUSH
4951: CALL_OW 264
4955: PUSH
4956: LD_INT 10
4958: PUSH
4959: EMPTY
4960: LIST
4961: IN
4962: IFFALSE 4983
// points := [ 35 , 110 , 70 ] ;
4964: LD_ADDR_VAR 0 9
4968: PUSH
4969: LD_INT 35
4971: PUSH
4972: LD_INT 110
4974: PUSH
4975: LD_INT 70
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: LIST
4982: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4983: LD_VAR 0 6
4987: PPUSH
4988: CALL_OW 265
4992: PUSH
4993: LD_INT 25
4995: EQUAL
4996: IFFALSE 5017
// points := [ 80 , 65 , 100 ] ;
4998: LD_ADDR_VAR 0 9
5002: PUSH
5003: LD_INT 80
5005: PUSH
5006: LD_INT 65
5008: PUSH
5009: LD_INT 100
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5017: LD_VAR 0 6
5021: PPUSH
5022: CALL_OW 263
5026: PUSH
5027: LD_INT 1
5029: EQUAL
5030: IFFALSE 5065
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5032: LD_ADDR_VAR 0 10
5036: PUSH
5037: LD_VAR 0 10
5041: PUSH
5042: LD_VAR 0 6
5046: PPUSH
5047: CALL_OW 311
5051: PPUSH
5052: LD_INT 3
5054: PPUSH
5055: CALL_OW 259
5059: PUSH
5060: LD_INT 4
5062: MUL
5063: MUL
5064: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5065: LD_VAR 0 6
5069: PPUSH
5070: CALL_OW 263
5074: PUSH
5075: LD_INT 2
5077: EQUAL
5078: IFFALSE 5129
// begin j := IsControledBy ( i ) ;
5080: LD_ADDR_VAR 0 7
5084: PUSH
5085: LD_VAR 0 6
5089: PPUSH
5090: CALL_OW 312
5094: ST_TO_ADDR
// if j then
5095: LD_VAR 0 7
5099: IFFALSE 5129
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5101: LD_ADDR_VAR 0 10
5105: PUSH
5106: LD_VAR 0 10
5110: PUSH
5111: LD_VAR 0 7
5115: PPUSH
5116: LD_INT 3
5118: PPUSH
5119: CALL_OW 259
5123: PUSH
5124: LD_INT 3
5126: MUL
5127: MUL
5128: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5129: LD_VAR 0 6
5133: PPUSH
5134: CALL_OW 264
5138: PUSH
5139: LD_INT 5
5141: PUSH
5142: LD_INT 6
5144: PUSH
5145: LD_INT 46
5147: PUSH
5148: LD_INT 44
5150: PUSH
5151: LD_INT 47
5153: PUSH
5154: LD_INT 45
5156: PUSH
5157: LD_INT 28
5159: PUSH
5160: LD_INT 7
5162: PUSH
5163: LD_INT 27
5165: PUSH
5166: LD_INT 29
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: IN
5181: PUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_INT 52
5189: PPUSH
5190: CALL_OW 321
5194: PUSH
5195: LD_INT 2
5197: EQUAL
5198: AND
5199: IFFALSE 5216
// bpoints := bpoints * 1.2 ;
5201: LD_ADDR_VAR 0 10
5205: PUSH
5206: LD_VAR 0 10
5210: PUSH
5211: LD_REAL  1.20000000000000E+0000
5214: MUL
5215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5216: LD_VAR 0 6
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 6
5228: PUSH
5229: LD_INT 46
5231: PUSH
5232: LD_INT 47
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: IN
5240: IFFALSE 5257
// bpoints := bpoints * 1.2 ;
5242: LD_ADDR_VAR 0 10
5246: PUSH
5247: LD_VAR 0 10
5251: PUSH
5252: LD_REAL  1.20000000000000E+0000
5255: MUL
5256: ST_TO_ADDR
// end ; unit_building :
5257: GO 5271
5259: LD_INT 3
5261: DOUBLE
5262: EQUAL
5263: IFTRUE 5267
5265: GO 5270
5267: POP
// ; end ;
5268: GO 5271
5270: POP
// for j = 1 to 3 do
5271: LD_ADDR_VAR 0 7
5275: PUSH
5276: DOUBLE
5277: LD_INT 1
5279: DEC
5280: ST_TO_ADDR
5281: LD_INT 3
5283: PUSH
5284: FOR_TO
5285: IFFALSE 5338
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5287: LD_ADDR_VAR 0 5
5291: PUSH
5292: LD_VAR 0 5
5296: PPUSH
5297: LD_VAR 0 7
5301: PPUSH
5302: LD_VAR 0 5
5306: PUSH
5307: LD_VAR 0 7
5311: ARRAY
5312: PUSH
5313: LD_VAR 0 9
5317: PUSH
5318: LD_VAR 0 7
5322: ARRAY
5323: PUSH
5324: LD_VAR 0 10
5328: MUL
5329: PLUS
5330: PPUSH
5331: CALL_OW 1
5335: ST_TO_ADDR
5336: GO 5284
5338: POP
5339: POP
// end ;
5340: GO 3823
5342: POP
5343: POP
// result := Replace ( result , 4 , tmp ) ;
5344: LD_ADDR_VAR 0 5
5348: PUSH
5349: LD_VAR 0 5
5353: PPUSH
5354: LD_INT 4
5356: PPUSH
5357: LD_VAR 0 8
5361: PPUSH
5362: CALL_OW 1
5366: ST_TO_ADDR
// end ;
5367: LD_VAR 0 5
5371: RET
// export function DangerAtRange ( unit , range ) ; begin
5372: LD_INT 0
5374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 255
5389: PPUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: LD_VAR 0 2
5414: PPUSH
5415: CALL 3693 0 4
5419: ST_TO_ADDR
// end ;
5420: LD_VAR 0 3
5424: RET
// export function IsExtension ( b ) ; begin
5425: LD_INT 0
5427: PPUSH
// result := false ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 266
5445: PUSH
5446: LD_INT 23
5448: PUSH
5449: LD_INT 20
5451: PUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 17
5457: PUSH
5458: LD_INT 24
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 19
5466: PUSH
5467: LD_INT 16
5469: PUSH
5470: LD_INT 25
5472: PUSH
5473: LD_INT 18
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: IN
5488: IFFALSE 5498
// result := true ;
5490: LD_ADDR_VAR 0 2
5494: PUSH
5495: LD_INT 1
5497: ST_TO_ADDR
// end ;
5498: LD_VAR 0 2
5502: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5503: LD_INT 0
5505: PPUSH
5506: PPUSH
5507: PPUSH
// result := [ ] ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: EMPTY
5514: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5515: LD_ADDR_VAR 0 3
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL_OW 69
5534: ST_TO_ADDR
// if not tmp then
5535: LD_VAR 0 3
5539: NOT
5540: IFFALSE 5544
// exit ;
5542: GO 5594
// for i in tmp do
5544: LD_ADDR_VAR 0 4
5548: PUSH
5549: LD_VAR 0 3
5553: PUSH
5554: FOR_IN
5555: IFFALSE 5592
// if GetBase ( i ) = base then
5557: LD_VAR 0 4
5561: PPUSH
5562: CALL_OW 274
5566: PUSH
5567: LD_VAR 0 1
5571: EQUAL
5572: IFFALSE 5590
// result := result ^ i ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_VAR 0 2
5583: PUSH
5584: LD_VAR 0 4
5588: ADD
5589: ST_TO_ADDR
5590: GO 5554
5592: POP
5593: POP
// end ;
5594: LD_VAR 0 2
5598: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5599: LD_INT 0
5601: PPUSH
5602: PPUSH
// if BuildingStatus ( b ) = bs_build then
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 461
5612: PUSH
5613: LD_INT 1
5615: EQUAL
5616: IFFALSE 5676
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_STRING h
5625: PUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 250
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: CALL_OW 251
5645: PUSH
5646: LD_VAR 0 2
5650: PUSH
5651: LD_INT 0
5653: PUSH
5654: LD_INT 0
5656: PUSH
5657: LD_INT 0
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: PUSH
5669: EMPTY
5670: LIST
5671: PPUSH
5672: CALL_OW 446
// end ;
5676: LD_VAR 0 3
5680: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5688: LD_VAR 0 1
5692: NOT
5693: PUSH
5694: LD_VAR 0 1
5698: PPUSH
5699: CALL_OW 263
5703: PUSH
5704: LD_INT 2
5706: EQUAL
5707: NOT
5708: OR
5709: IFFALSE 5713
// exit ;
5711: GO 5985
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5713: LD_ADDR_VAR 0 6
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_VAR 0 1
5725: PPUSH
5726: CALL_OW 255
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 36
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 34
5750: PUSH
5751: LD_INT 31
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: ST_TO_ADDR
// if not tmp then
5772: LD_VAR 0 6
5776: NOT
5777: IFFALSE 5781
// exit ;
5779: GO 5985
// result := [ ] ;
5781: LD_ADDR_VAR 0 2
5785: PUSH
5786: EMPTY
5787: ST_TO_ADDR
// for i in tmp do
5788: LD_ADDR_VAR 0 3
5792: PUSH
5793: LD_VAR 0 6
5797: PUSH
5798: FOR_IN
5799: IFFALSE 5847
// begin t := UnitsInside ( i ) ;
5801: LD_ADDR_VAR 0 4
5805: PUSH
5806: LD_VAR 0 3
5810: PPUSH
5811: CALL_OW 313
5815: ST_TO_ADDR
// if t then
5816: LD_VAR 0 4
5820: IFFALSE 5845
// result := Insert ( result , 1 , t ) ;
5822: LD_ADDR_VAR 0 2
5826: PUSH
5827: LD_VAR 0 2
5831: PPUSH
5832: LD_INT 1
5834: PPUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: CALL_OW 2
5844: ST_TO_ADDR
// end ;
5845: GO 5798
5847: POP
5848: POP
// if not result then
5849: LD_VAR 0 2
5853: NOT
5854: IFFALSE 5858
// exit ;
5856: GO 5985
// mech := 0 ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// for i in result do
5866: LD_ADDR_VAR 0 3
5870: PUSH
5871: LD_VAR 0 2
5875: PUSH
5876: FOR_IN
5877: IFFALSE 5959
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: LD_VAR 0 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: CALL_OW 259
5896: PUSH
5897: LD_VAR 0 3
5901: PPUSH
5902: CALL_OW 432
5906: MINUS
5907: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 5
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PPUSH
5922: LD_INT 3
5924: PPUSH
5925: CALL_OW 259
5929: PUSH
5930: LD_VAR 0 5
5934: PUSH
5935: LD_INT 1
5937: ARRAY
5938: PPUSH
5939: CALL_OW 432
5943: MINUS
5944: GREATEREQUAL
5945: IFFALSE 5957
// mech := i ;
5947: LD_ADDR_VAR 0 5
5951: PUSH
5952: LD_VAR 0 3
5956: ST_TO_ADDR
// end ;
5957: GO 5876
5959: POP
5960: POP
// if mech then
5961: LD_VAR 0 5
5965: IFFALSE 5985
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5967: LD_VAR 0 1
5971: PPUSH
5972: LD_VAR 0 5
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: CALL_OW 135
// end ;
5985: LD_VAR 0 2
5989: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
5990: LD_INT 0
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
6000: PPUSH
6001: PPUSH
6002: PPUSH
6003: PPUSH
// result := [ ] ;
6004: LD_ADDR_VAR 0 6
6008: PUSH
6009: EMPTY
6010: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 266
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: IN
6031: NOT
6032: IFFALSE 6036
// exit ;
6034: GO 7155
// if name then
6036: LD_VAR 0 2
6040: IFFALSE 6056
// SetBName ( base_dep , name ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: CALL_OW 500
// base := GetBase ( base_dep ) ;
6056: LD_ADDR_VAR 0 14
6060: PUSH
6061: LD_VAR 0 1
6065: PPUSH
6066: CALL_OW 274
6070: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6071: LD_ADDR_VAR 0 15
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 255
6085: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6086: LD_ADDR_VAR 0 16
6090: PUSH
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 248
6100: ST_TO_ADDR
// if sources then
6101: LD_VAR 0 4
6105: IFFALSE 6152
// for i = 1 to 3 do
6107: LD_ADDR_VAR 0 7
6111: PUSH
6112: DOUBLE
6113: LD_INT 1
6115: DEC
6116: ST_TO_ADDR
6117: LD_INT 3
6119: PUSH
6120: FOR_TO
6121: IFFALSE 6150
// AddResourceType ( base , i , sources [ i ] ) ;
6123: LD_VAR 0 14
6127: PPUSH
6128: LD_VAR 0 7
6132: PPUSH
6133: LD_VAR 0 4
6137: PUSH
6138: LD_VAR 0 7
6142: ARRAY
6143: PPUSH
6144: CALL_OW 276
6148: GO 6120
6150: POP
6151: POP
// buildings := GetBaseBuildings ( base ) ;
6152: LD_ADDR_VAR 0 17
6156: PUSH
6157: LD_VAR 0 14
6161: PPUSH
6162: CALL 5503 0 1
6166: ST_TO_ADDR
// InitHc ;
6167: CALL_OW 19
// InitUc ;
6171: CALL_OW 18
// uc_side := side ;
6175: LD_ADDR_OWVAR 20
6179: PUSH
6180: LD_VAR 0 15
6184: ST_TO_ADDR
// uc_nation := nation ;
6185: LD_ADDR_OWVAR 21
6189: PUSH
6190: LD_VAR 0 16
6194: ST_TO_ADDR
// if buildings then
6195: LD_VAR 0 17
6199: IFFALSE 7014
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6201: LD_VAR 0 17
6205: PPUSH
6206: LD_INT 2
6208: PUSH
6209: LD_INT 30
6211: PUSH
6212: LD_INT 32
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 30
6221: PUSH
6222: LD_INT 33
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 72
6238: IFFALSE 6321
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6240: LD_ADDR_VAR 0 7
6244: PUSH
6245: LD_VAR 0 17
6249: PPUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 32
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 30
6265: PUSH
6266: LD_INT 33
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 72
6282: PUSH
6283: FOR_IN
6284: IFFALSE 6319
// begin if not GetBWeapon ( i ) then
6286: LD_VAR 0 7
6290: PPUSH
6291: CALL_OW 269
6295: NOT
6296: IFFALSE 6317
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6298: LD_VAR 0 7
6302: PPUSH
6303: LD_VAR 0 7
6307: PPUSH
6308: CALL 7160 0 1
6312: PPUSH
6313: CALL_OW 431
// end ;
6317: GO 6283
6319: POP
6320: POP
// end ; for i = 1 to personel do
6321: LD_ADDR_VAR 0 7
6325: PUSH
6326: DOUBLE
6327: LD_INT 1
6329: DEC
6330: ST_TO_ADDR
6331: LD_VAR 0 5
6335: PUSH
6336: FOR_TO
6337: IFFALSE 6994
// begin if i > 4 then
6339: LD_VAR 0 7
6343: PUSH
6344: LD_INT 4
6346: GREATER
6347: IFFALSE 6351
// break ;
6349: GO 6994
// case i of 1 :
6351: LD_VAR 0 7
6355: PUSH
6356: LD_INT 1
6358: DOUBLE
6359: EQUAL
6360: IFTRUE 6364
6362: GO 6437
6364: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6365: LD_ADDR_VAR 0 11
6369: PUSH
6370: LD_VAR 0 17
6374: PPUSH
6375: LD_INT 22
6377: PUSH
6378: LD_VAR 0 15
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 32
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 30
6402: PUSH
6403: LD_INT 4
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 30
6412: PUSH
6413: LD_INT 5
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PPUSH
6430: CALL_OW 72
6434: ST_TO_ADDR
6435: GO 6659
6437: LD_INT 2
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6507
6445: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6446: LD_ADDR_VAR 0 11
6450: PUSH
6451: LD_VAR 0 17
6455: PPUSH
6456: LD_INT 22
6458: PUSH
6459: LD_VAR 0 15
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 30
6473: PUSH
6474: LD_INT 0
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 30
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PPUSH
6500: CALL_OW 72
6504: ST_TO_ADDR
6505: GO 6659
6507: LD_INT 3
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6577
6515: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6516: LD_ADDR_VAR 0 11
6520: PUSH
6521: LD_VAR 0 17
6525: PPUSH
6526: LD_INT 22
6528: PUSH
6529: LD_VAR 0 15
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 30
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 3
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 72
6574: ST_TO_ADDR
6575: GO 6659
6577: LD_INT 4
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6658
6585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6586: LD_ADDR_VAR 0 11
6590: PUSH
6591: LD_VAR 0 17
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_VAR 0 15
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 2
6610: PUSH
6611: LD_INT 30
6613: PUSH
6614: LD_INT 6
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 30
6623: PUSH
6624: LD_INT 7
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 30
6633: PUSH
6634: LD_INT 8
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 72
6655: ST_TO_ADDR
6656: GO 6659
6658: POP
// if not f then
6659: LD_VAR 0 11
6663: NOT
6664: IFFALSE 6668
// continue ;
6666: GO 6336
// x := personel [ i ] ;
6668: LD_ADDR_VAR 0 12
6672: PUSH
6673: LD_VAR 0 5
6677: PUSH
6678: LD_VAR 0 7
6682: ARRAY
6683: ST_TO_ADDR
// if x = - 1 then
6684: LD_VAR 0 12
6688: PUSH
6689: LD_INT 1
6691: NEG
6692: EQUAL
6693: IFFALSE 6815
// begin for j in f do
6695: LD_ADDR_VAR 0 8
6699: PUSH
6700: LD_VAR 0 11
6704: PUSH
6705: FOR_IN
6706: IFFALSE 6811
// repeat PrepareHuman ( false , i , skill ) ;
6708: LD_INT 0
6710: PPUSH
6711: LD_VAR 0 7
6715: PPUSH
6716: LD_VAR 0 3
6720: PPUSH
6721: CALL_OW 380
// un := CreateHuman ;
6725: LD_ADDR_VAR 0 13
6729: PUSH
6730: CALL_OW 44
6734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6735: LD_ADDR_VAR 0 6
6739: PUSH
6740: LD_VAR 0 6
6744: PPUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_VAR 0 13
6752: PPUSH
6753: CALL_OW 2
6757: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6758: LD_VAR 0 13
6762: PPUSH
6763: LD_VAR 0 8
6767: PPUSH
6768: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 313
6781: PUSH
6782: LD_INT 6
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 266
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: LD_INT 31
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: IN
6806: OR
6807: IFFALSE 6708
6809: GO 6705
6811: POP
6812: POP
// end else
6813: GO 6992
// for j = 1 to x do
6815: LD_ADDR_VAR 0 8
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_VAR 0 12
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6990
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6833: LD_VAR 0 11
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: PPUSH
6842: CALL_OW 313
6846: PUSH
6847: LD_VAR 0 11
6851: PUSH
6852: LD_INT 1
6854: ARRAY
6855: PPUSH
6856: CALL_OW 266
6860: PUSH
6861: LD_INT 32
6863: PUSH
6864: LD_INT 31
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: IN
6871: AND
6872: PUSH
6873: LD_VAR 0 11
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: CALL_OW 313
6886: PUSH
6887: LD_INT 6
6889: EQUAL
6890: OR
6891: IFFALSE 6911
// f := Delete ( f , 1 ) ;
6893: LD_ADDR_VAR 0 11
6897: PUSH
6898: LD_VAR 0 11
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 3
6910: ST_TO_ADDR
// if not f then
6911: LD_VAR 0 11
6915: NOT
6916: IFFALSE 6920
// break ;
6918: GO 6990
// PrepareHuman ( false , i , skill ) ;
6920: LD_INT 0
6922: PPUSH
6923: LD_VAR 0 7
6927: PPUSH
6928: LD_VAR 0 3
6932: PPUSH
6933: CALL_OW 380
// un := CreateHuman ;
6937: LD_ADDR_VAR 0 13
6941: PUSH
6942: CALL_OW 44
6946: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6947: LD_ADDR_VAR 0 6
6951: PUSH
6952: LD_VAR 0 6
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_VAR 0 13
6964: PPUSH
6965: CALL_OW 2
6969: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6970: LD_VAR 0 13
6974: PPUSH
6975: LD_VAR 0 11
6979: PUSH
6980: LD_INT 1
6982: ARRAY
6983: PPUSH
6984: CALL_OW 52
// end ;
6988: GO 6830
6990: POP
6991: POP
// end ;
6992: GO 6336
6994: POP
6995: POP
// result := result ^ buildings ;
6996: LD_ADDR_VAR 0 6
7000: PUSH
7001: LD_VAR 0 6
7005: PUSH
7006: LD_VAR 0 17
7010: ADD
7011: ST_TO_ADDR
// end else
7012: GO 7155
// begin for i = 1 to personel do
7014: LD_ADDR_VAR 0 7
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 5
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7153
// begin if i > 4 then
7032: LD_VAR 0 7
7036: PUSH
7037: LD_INT 4
7039: GREATER
7040: IFFALSE 7044
// break ;
7042: GO 7153
// x := personel [ i ] ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 5
7053: PUSH
7054: LD_VAR 0 7
7058: ARRAY
7059: ST_TO_ADDR
// if x = - 1 then
7060: LD_VAR 0 12
7064: PUSH
7065: LD_INT 1
7067: NEG
7068: EQUAL
7069: IFFALSE 7073
// continue ;
7071: GO 7029
// PrepareHuman ( false , i , skill ) ;
7073: LD_INT 0
7075: PPUSH
7076: LD_VAR 0 7
7080: PPUSH
7081: LD_VAR 0 3
7085: PPUSH
7086: CALL_OW 380
// un := CreateHuman ;
7090: LD_ADDR_VAR 0 13
7094: PUSH
7095: CALL_OW 44
7099: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7100: LD_VAR 0 13
7104: PPUSH
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 250
7114: PPUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 251
7124: PPUSH
7125: LD_INT 10
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: CALL_OW 50
// result := result ^ un ;
7135: LD_ADDR_VAR 0 6
7139: PUSH
7140: LD_VAR 0 6
7144: PUSH
7145: LD_VAR 0 13
7149: ADD
7150: ST_TO_ADDR
// end ;
7151: GO 7029
7153: POP
7154: POP
// end ; end ;
7155: LD_VAR 0 6
7159: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7160: LD_INT 0
7162: PPUSH
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
7170: PPUSH
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// result := false ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7186: LD_VAR 0 1
7190: NOT
7191: PUSH
7192: LD_VAR 0 1
7196: PPUSH
7197: CALL_OW 266
7201: PUSH
7202: LD_INT 32
7204: PUSH
7205: LD_INT 33
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: IN
7212: NOT
7213: OR
7214: IFFALSE 7218
// exit ;
7216: GO 8451
// nat := GetNation ( tower ) ;
7218: LD_ADDR_VAR 0 11
7222: PUSH
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 248
7232: ST_TO_ADDR
// side := GetSide ( tower ) ;
7233: LD_ADDR_VAR 0 15
7237: PUSH
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 255
7247: ST_TO_ADDR
// x := GetX ( tower ) ;
7248: LD_ADDR_VAR 0 9
7252: PUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 250
7262: ST_TO_ADDR
// y := GetY ( tower ) ;
7263: LD_ADDR_VAR 0 10
7267: PUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 251
7277: ST_TO_ADDR
// if not x or not y then
7278: LD_VAR 0 9
7282: NOT
7283: PUSH
7284: LD_VAR 0 10
7288: NOT
7289: OR
7290: IFFALSE 7294
// exit ;
7292: GO 8451
// weapon := 0 ;
7294: LD_ADDR_VAR 0 17
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// fac_list := [ ] ;
7302: LD_ADDR_VAR 0 16
7306: PUSH
7307: EMPTY
7308: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 274
7323: PPUSH
7324: CALL 5503 0 1
7328: PPUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PPUSH
7339: CALL_OW 72
7343: ST_TO_ADDR
// if not factories then
7344: LD_VAR 0 5
7348: NOT
7349: IFFALSE 7353
// exit ;
7351: GO 8451
// for i in factories do
7353: LD_ADDR_VAR 0 7
7357: PUSH
7358: LD_VAR 0 5
7362: PUSH
7363: FOR_IN
7364: IFFALSE 7389
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7366: LD_ADDR_VAR 0 16
7370: PUSH
7371: LD_VAR 0 16
7375: PUSH
7376: LD_VAR 0 7
7380: PPUSH
7381: CALL_OW 478
7385: UNION
7386: ST_TO_ADDR
7387: GO 7363
7389: POP
7390: POP
// if not fac_list then
7391: LD_VAR 0 16
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 8451
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_INT 4
7407: PUSH
7408: LD_INT 5
7410: PUSH
7411: LD_INT 9
7413: PUSH
7414: LD_INT 10
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 11
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 27
7437: PUSH
7438: LD_INT 28
7440: PUSH
7441: LD_INT 26
7443: PUSH
7444: LD_INT 30
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 43
7455: PUSH
7456: LD_INT 44
7458: PUSH
7459: LD_INT 46
7461: PUSH
7462: LD_INT 45
7464: PUSH
7465: LD_INT 47
7467: PUSH
7468: LD_INT 49
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: PUSH
7484: LD_VAR 0 11
7488: ARRAY
7489: ST_TO_ADDR
// for i in list do
7490: LD_ADDR_VAR 0 7
7494: PUSH
7495: LD_VAR 0 4
7499: PUSH
7500: FOR_IN
7501: IFFALSE 7534
// if not i in fac_list then
7503: LD_VAR 0 7
7507: PUSH
7508: LD_VAR 0 16
7512: IN
7513: NOT
7514: IFFALSE 7532
// list := list diff i ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: LD_VAR 0 4
7525: PUSH
7526: LD_VAR 0 7
7530: DIFF
7531: ST_TO_ADDR
7532: GO 7500
7534: POP
7535: POP
// if not list then
7536: LD_VAR 0 4
7540: NOT
7541: IFFALSE 7545
// exit ;
7543: GO 8451
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7545: LD_VAR 0 11
7549: PUSH
7550: LD_INT 3
7552: EQUAL
7553: PUSH
7554: LD_INT 49
7556: PUSH
7557: LD_VAR 0 4
7561: IN
7562: AND
7563: PUSH
7564: LD_INT 31
7566: PPUSH
7567: LD_VAR 0 15
7571: PPUSH
7572: CALL_OW 321
7576: PUSH
7577: LD_INT 2
7579: EQUAL
7580: AND
7581: IFFALSE 7641
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7583: LD_INT 22
7585: PUSH
7586: LD_VAR 0 15
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 35
7597: PUSH
7598: LD_INT 49
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 91
7607: PUSH
7608: LD_VAR 0 1
7612: PUSH
7613: LD_INT 10
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: NOT
7631: IFFALSE 7641
// weapon := ru_time_lapser ;
7633: LD_ADDR_VAR 0 17
7637: PUSH
7638: LD_INT 49
7640: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7641: LD_VAR 0 11
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: LD_INT 2
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: IN
7656: PUSH
7657: LD_INT 11
7659: PUSH
7660: LD_VAR 0 4
7664: IN
7665: PUSH
7666: LD_INT 30
7668: PUSH
7669: LD_VAR 0 4
7673: IN
7674: OR
7675: AND
7676: PUSH
7677: LD_INT 6
7679: PPUSH
7680: LD_VAR 0 15
7684: PPUSH
7685: CALL_OW 321
7689: PUSH
7690: LD_INT 2
7692: EQUAL
7693: AND
7694: IFFALSE 7859
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7696: LD_INT 22
7698: PUSH
7699: LD_VAR 0 15
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 2
7710: PUSH
7711: LD_INT 35
7713: PUSH
7714: LD_INT 11
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 35
7723: PUSH
7724: LD_INT 30
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 91
7738: PUSH
7739: LD_VAR 0 1
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: NOT
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_VAR 0 15
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 30
7780: PUSH
7781: LD_INT 32
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 30
7790: PUSH
7791: LD_INT 33
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 91
7805: PUSH
7806: LD_VAR 0 1
7810: PUSH
7811: LD_INT 12
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: PPUSH
7827: CALL_OW 69
7831: PUSH
7832: LD_INT 1
7834: GREATER
7835: AND
7836: IFFALSE 7859
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7838: LD_ADDR_VAR 0 17
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 30
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_VAR 0 11
7857: ARRAY
7858: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7859: LD_VAR 0 17
7863: NOT
7864: PUSH
7865: LD_INT 40
7867: PPUSH
7868: LD_VAR 0 15
7872: PPUSH
7873: CALL_OW 321
7877: PUSH
7878: LD_INT 2
7880: EQUAL
7881: AND
7882: PUSH
7883: LD_INT 7
7885: PUSH
7886: LD_VAR 0 4
7890: IN
7891: PUSH
7892: LD_INT 28
7894: PUSH
7895: LD_VAR 0 4
7899: IN
7900: OR
7901: PUSH
7902: LD_INT 45
7904: PUSH
7905: LD_VAR 0 4
7909: IN
7910: OR
7911: AND
7912: IFFALSE 8166
// begin hex := _GetHexInfo ( x , y ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 9
7923: PPUSH
7924: LD_VAR 0 10
7928: PPUSH
7929: CALL 1958 0 2
7933: ST_TO_ADDR
// if hex [ 1 ] then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: IFFALSE 7946
// exit ;
7944: GO 8451
// height := hex [ 2 ] ;
7946: LD_ADDR_VAR 0 14
7950: PUSH
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 2
7958: ARRAY
7959: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7960: LD_ADDR_VAR 0 13
7964: PUSH
7965: LD_INT 0
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: ST_TO_ADDR
// for i in tmp do
7983: LD_ADDR_VAR 0 7
7987: PUSH
7988: LD_VAR 0 13
7992: PUSH
7993: FOR_IN
7994: IFFALSE 8164
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7996: LD_ADDR_VAR 0 8
8000: PUSH
8001: LD_VAR 0 9
8005: PPUSH
8006: LD_VAR 0 7
8010: PPUSH
8011: LD_INT 5
8013: PPUSH
8014: CALL_OW 272
8018: PUSH
8019: LD_VAR 0 10
8023: PPUSH
8024: LD_VAR 0 7
8028: PPUSH
8029: LD_INT 5
8031: PPUSH
8032: CALL_OW 273
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8041: LD_VAR 0 8
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PPUSH
8050: LD_VAR 0 8
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PPUSH
8059: CALL_OW 488
8063: IFFALSE 8162
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_VAR 0 8
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PPUSH
8088: CALL 1958 0 2
8092: ST_TO_ADDR
// if hex [ 1 ] then
8093: LD_VAR 0 3
8097: PUSH
8098: LD_INT 1
8100: ARRAY
8101: IFFALSE 8105
// continue ;
8103: GO 7993
// h := hex [ 2 ] ;
8105: LD_ADDR_VAR 0 12
8109: PUSH
8110: LD_VAR 0 3
8114: PUSH
8115: LD_INT 2
8117: ARRAY
8118: ST_TO_ADDR
// if h + 7 < height then
8119: LD_VAR 0 12
8123: PUSH
8124: LD_INT 7
8126: PLUS
8127: PUSH
8128: LD_VAR 0 14
8132: LESS
8133: IFFALSE 8162
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8135: LD_ADDR_VAR 0 17
8139: PUSH
8140: LD_INT 7
8142: PUSH
8143: LD_INT 28
8145: PUSH
8146: LD_INT 45
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: PUSH
8154: LD_VAR 0 11
8158: ARRAY
8159: ST_TO_ADDR
// break ;
8160: GO 8164
// end ; end ; end ;
8162: GO 7993
8164: POP
8165: POP
// end ; if not weapon then
8166: LD_VAR 0 17
8170: NOT
8171: IFFALSE 8333
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8173: LD_ADDR_VAR 0 4
8177: PUSH
8178: LD_VAR 0 4
8182: PUSH
8183: LD_INT 11
8185: PUSH
8186: LD_INT 30
8188: PUSH
8189: LD_INT 49
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: DIFF
8197: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8198: LD_ADDR_VAR 0 17
8202: PUSH
8203: LD_VAR 0 4
8207: PUSH
8208: LD_INT 1
8210: PPUSH
8211: LD_VAR 0 4
8215: PPUSH
8216: CALL_OW 12
8220: ARRAY
8221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8222: LD_ADDR_VAR 0 13
8226: PUSH
8227: LD_INT 22
8229: PUSH
8230: LD_VAR 0 15
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 3
8241: PUSH
8242: LD_INT 35
8244: PUSH
8245: LD_INT 0
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PPUSH
8260: CALL_OW 69
8264: ST_TO_ADDR
// for i in tmp do
8265: LD_ADDR_VAR 0 7
8269: PUSH
8270: LD_VAR 0 13
8274: PUSH
8275: FOR_IN
8276: IFFALSE 8301
// list := list diff GetBWeapon ( i ) ;
8278: LD_ADDR_VAR 0 4
8282: PUSH
8283: LD_VAR 0 4
8287: PUSH
8288: LD_VAR 0 7
8292: PPUSH
8293: CALL_OW 269
8297: DIFF
8298: ST_TO_ADDR
8299: GO 8275
8301: POP
8302: POP
// if list then
8303: LD_VAR 0 4
8307: IFFALSE 8333
// weapon := list [ rand ( 1 , list ) ] ;
8309: LD_ADDR_VAR 0 17
8313: PUSH
8314: LD_VAR 0 4
8318: PUSH
8319: LD_INT 1
8321: PPUSH
8322: LD_VAR 0 4
8326: PPUSH
8327: CALL_OW 12
8331: ARRAY
8332: ST_TO_ADDR
// end ; if weapon then
8333: LD_VAR 0 17
8337: IFFALSE 8451
// begin tmp := CostOfWeapon ( weapon ) ;
8339: LD_ADDR_VAR 0 13
8343: PUSH
8344: LD_VAR 0 17
8348: PPUSH
8349: CALL_OW 451
8353: ST_TO_ADDR
// j := GetBase ( tower ) ;
8354: LD_ADDR_VAR 0 8
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 274
8368: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8369: LD_VAR 0 8
8373: PPUSH
8374: LD_INT 1
8376: PPUSH
8377: CALL_OW 275
8381: PUSH
8382: LD_VAR 0 13
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: GREATEREQUAL
8391: PUSH
8392: LD_VAR 0 8
8396: PPUSH
8397: LD_INT 2
8399: PPUSH
8400: CALL_OW 275
8404: PUSH
8405: LD_VAR 0 13
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: GREATEREQUAL
8414: AND
8415: PUSH
8416: LD_VAR 0 8
8420: PPUSH
8421: LD_INT 3
8423: PPUSH
8424: CALL_OW 275
8428: PUSH
8429: LD_VAR 0 13
8433: PUSH
8434: LD_INT 3
8436: ARRAY
8437: GREATEREQUAL
8438: AND
8439: IFFALSE 8451
// result := weapon ;
8441: LD_ADDR_VAR 0 2
8445: PUSH
8446: LD_VAR 0 17
8450: ST_TO_ADDR
// end ; end ;
8451: LD_VAR 0 2
8455: RET
// export function Compare ( val1 , val2 ) ; begin
8456: LD_INT 0
8458: PPUSH
// if val1 = val2 then
8459: LD_VAR 0 1
8463: PUSH
8464: LD_VAR 0 2
8468: EQUAL
8469: IFFALSE 8481
// result := true else
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
8479: GO 8489
// result := false ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// end ;
8489: LD_VAR 0 3
8493: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8494: LD_INT 0
8496: PPUSH
8497: PPUSH
// result := true ;
8498: LD_ADDR_VAR 0 3
8502: PUSH
8503: LD_INT 1
8505: ST_TO_ADDR
// if array1 = array2 then
8506: LD_VAR 0 1
8510: PUSH
8511: LD_VAR 0 2
8515: EQUAL
8516: IFFALSE 8581
// begin for i = 1 to array1 do
8518: LD_ADDR_VAR 0 4
8522: PUSH
8523: DOUBLE
8524: LD_INT 1
8526: DEC
8527: ST_TO_ADDR
8528: LD_VAR 0 1
8532: PUSH
8533: FOR_TO
8534: IFFALSE 8577
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8536: LD_VAR 0 1
8540: PUSH
8541: LD_VAR 0 4
8545: ARRAY
8546: PPUSH
8547: LD_VAR 0 2
8551: PUSH
8552: LD_VAR 0 4
8556: ARRAY
8557: PPUSH
8558: CALL 8456 0 2
8562: NOT
8563: IFFALSE 8575
// begin result := false ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// break ;
8573: GO 8577
// end ;
8575: GO 8533
8577: POP
8578: POP
// end else
8579: GO 8589
// result := false ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// end ;
8589: LD_VAR 0 3
8593: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8594: LD_INT 0
8596: PPUSH
8597: PPUSH
8598: PPUSH
// pom := GetBase ( fac ) ;
8599: LD_ADDR_VAR 0 5
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 274
8613: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8614: LD_ADDR_VAR 0 4
8618: PUSH
8619: LD_VAR 0 2
8623: PUSH
8624: LD_INT 1
8626: ARRAY
8627: PPUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_INT 2
8635: ARRAY
8636: PPUSH
8637: LD_VAR 0 2
8641: PUSH
8642: LD_INT 3
8644: ARRAY
8645: PPUSH
8646: LD_VAR 0 2
8650: PUSH
8651: LD_INT 4
8653: ARRAY
8654: PPUSH
8655: CALL_OW 449
8659: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8660: LD_VAR 0 5
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 275
8672: PUSH
8673: LD_VAR 0 4
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: GREATEREQUAL
8682: PUSH
8683: LD_VAR 0 5
8687: PPUSH
8688: LD_INT 2
8690: PPUSH
8691: CALL_OW 275
8695: PUSH
8696: LD_VAR 0 4
8700: PUSH
8701: LD_INT 2
8703: ARRAY
8704: GREATEREQUAL
8705: AND
8706: PUSH
8707: LD_VAR 0 5
8711: PPUSH
8712: LD_INT 3
8714: PPUSH
8715: CALL_OW 275
8719: PUSH
8720: LD_VAR 0 4
8724: PUSH
8725: LD_INT 3
8727: ARRAY
8728: GREATEREQUAL
8729: AND
8730: IFFALSE 8742
// result := true else
8732: LD_ADDR_VAR 0 3
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
8740: GO 8750
// result := false ;
8742: LD_ADDR_VAR 0 3
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// end ;
8750: LD_VAR 0 3
8754: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8755: LD_INT 0
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// result := false ;
8766: LD_ADDR_VAR 0 6
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8774: LD_VAR 0 1
8778: NOT
8779: PUSH
8780: LD_VAR 0 2
8784: NOT
8785: OR
8786: PUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 0
8794: PUSH
8795: LD_INT 1
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: LD_INT 3
8803: PUSH
8804: LD_INT 4
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: IN
8818: NOT
8819: OR
8820: PUSH
8821: LD_VAR 0 3
8825: PPUSH
8826: LD_VAR 0 4
8830: PPUSH
8831: CALL_OW 488
8835: NOT
8836: OR
8837: IFFALSE 8841
// exit ;
8839: GO 9515
// pom := GetBase ( bdepot ) ;
8841: LD_ADDR_VAR 0 9
8845: PUSH
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 274
8855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8856: LD_ADDR_VAR 0 10
8860: PUSH
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 248
8875: PPUSH
8876: CALL_OW 450
8880: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8881: LD_VAR 0 9
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 275
8893: PUSH
8894: LD_VAR 0 10
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: GREATEREQUAL
8903: PUSH
8904: LD_VAR 0 9
8908: PPUSH
8909: LD_INT 2
8911: PPUSH
8912: CALL_OW 275
8916: PUSH
8917: LD_VAR 0 10
8921: PUSH
8922: LD_INT 2
8924: ARRAY
8925: GREATEREQUAL
8926: AND
8927: PUSH
8928: LD_VAR 0 9
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 275
8940: PUSH
8941: LD_VAR 0 10
8945: PUSH
8946: LD_INT 3
8948: ARRAY
8949: GREATEREQUAL
8950: AND
8951: NOT
8952: IFFALSE 8956
// exit ;
8954: GO 9515
// if GetBType ( bdepot ) = b_depot then
8956: LD_VAR 0 1
8960: PPUSH
8961: CALL_OW 266
8965: PUSH
8966: LD_INT 0
8968: EQUAL
8969: IFFALSE 8981
// dist := 28 else
8971: LD_ADDR_VAR 0 13
8975: PUSH
8976: LD_INT 28
8978: ST_TO_ADDR
8979: GO 8989
// dist := 36 ;
8981: LD_ADDR_VAR 0 13
8985: PUSH
8986: LD_INT 36
8988: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8989: LD_VAR 0 1
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_VAR 0 4
9003: PPUSH
9004: CALL_OW 297
9008: PUSH
9009: LD_VAR 0 13
9013: GREATER
9014: IFFALSE 9018
// exit ;
9016: GO 9515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
9018: LD_ADDR_VAR 0 11
9022: PUSH
9023: LD_VAR 0 2
9027: PPUSH
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_VAR 0 5
9042: PPUSH
9043: LD_VAR 0 1
9047: PPUSH
9048: CALL_OW 248
9052: PPUSH
9053: LD_INT 0
9055: PPUSH
9056: CALL 9520 0 6
9060: ST_TO_ADDR
// if not hexes then
9061: LD_VAR 0 11
9065: NOT
9066: IFFALSE 9070
// exit ;
9068: GO 9515
// hex := _GetHexInfo ( x , y ) ;
9070: LD_ADDR_VAR 0 14
9074: PUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: LD_VAR 0 4
9084: PPUSH
9085: CALL 1958 0 2
9089: ST_TO_ADDR
// if hex [ 1 ] then
9090: LD_VAR 0 14
9094: PUSH
9095: LD_INT 1
9097: ARRAY
9098: IFFALSE 9102
// exit ;
9100: GO 9515
// height := hex [ 2 ] ;
9102: LD_ADDR_VAR 0 12
9106: PUSH
9107: LD_VAR 0 14
9111: PUSH
9112: LD_INT 2
9114: ARRAY
9115: ST_TO_ADDR
// for i = 1 to hexes do
9116: LD_ADDR_VAR 0 7
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_VAR 0 11
9130: PUSH
9131: FOR_TO
9132: IFFALSE 9470
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9134: LD_VAR 0 11
9138: PUSH
9139: LD_VAR 0 7
9143: ARRAY
9144: PUSH
9145: LD_INT 1
9147: ARRAY
9148: PPUSH
9149: LD_VAR 0 11
9153: PUSH
9154: LD_VAR 0 7
9158: ARRAY
9159: PUSH
9160: LD_INT 2
9162: ARRAY
9163: PPUSH
9164: CALL_OW 488
9168: NOT
9169: IFFALSE 9173
// continue ;
9171: GO 9131
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9173: LD_ADDR_VAR 0 8
9177: PUSH
9178: LD_VAR 0 11
9182: PUSH
9183: LD_VAR 0 7
9187: ARRAY
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: LD_VAR 0 11
9197: PUSH
9198: LD_VAR 0 7
9202: ARRAY
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PPUSH
9208: CALL 1958 0 2
9212: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9213: LD_VAR 0 8
9217: PUSH
9218: LD_INT 1
9220: ARRAY
9221: PUSH
9222: LD_VAR 0 8
9226: PUSH
9227: LD_INT 2
9229: ARRAY
9230: PUSH
9231: LD_VAR 0 12
9235: PUSH
9236: LD_INT 2
9238: PLUS
9239: GREATER
9240: OR
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 2
9249: ARRAY
9250: PUSH
9251: LD_VAR 0 12
9255: PUSH
9256: LD_INT 2
9258: MINUS
9259: LESS
9260: OR
9261: PUSH
9262: LD_VAR 0 8
9266: PUSH
9267: LD_INT 3
9269: ARRAY
9270: PUSH
9271: LD_INT 0
9273: PUSH
9274: LD_INT 8
9276: PUSH
9277: LD_INT 9
9279: PUSH
9280: LD_INT 10
9282: PUSH
9283: LD_INT 11
9285: PUSH
9286: LD_INT 12
9288: PUSH
9289: LD_INT 13
9291: PUSH
9292: LD_INT 16
9294: PUSH
9295: LD_INT 17
9297: PUSH
9298: LD_INT 18
9300: PUSH
9301: LD_INT 19
9303: PUSH
9304: LD_INT 20
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: IN
9325: NOT
9326: OR
9327: PUSH
9328: LD_VAR 0 8
9332: PUSH
9333: LD_INT 4
9335: ARRAY
9336: OR
9337: PUSH
9338: LD_VAR 0 8
9342: PUSH
9343: LD_INT 5
9345: ARRAY
9346: NOT
9347: OR
9348: PUSH
9349: LD_VAR 0 8
9353: PUSH
9354: LD_INT 6
9356: ARRAY
9357: PUSH
9358: LD_INT 1
9360: PUSH
9361: LD_INT 2
9363: PUSH
9364: LD_INT 7
9366: PUSH
9367: LD_INT 9
9369: PUSH
9370: LD_INT 10
9372: PUSH
9373: LD_INT 11
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: IN
9384: NOT
9385: OR
9386: PUSH
9387: LD_VAR 0 11
9391: PUSH
9392: LD_VAR 0 7
9396: ARRAY
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_VAR 0 11
9406: PUSH
9407: LD_VAR 0 7
9411: ARRAY
9412: PUSH
9413: LD_INT 2
9415: ARRAY
9416: PPUSH
9417: CALL_OW 428
9421: PUSH
9422: LD_INT 0
9424: GREATER
9425: OR
9426: PUSH
9427: LD_VAR 0 11
9431: PUSH
9432: LD_VAR 0 7
9436: ARRAY
9437: PUSH
9438: LD_INT 1
9440: ARRAY
9441: PPUSH
9442: LD_VAR 0 11
9446: PUSH
9447: LD_VAR 0 7
9451: ARRAY
9452: PUSH
9453: LD_INT 2
9455: ARRAY
9456: PPUSH
9457: CALL_OW 351
9461: OR
9462: IFFALSE 9468
// exit ;
9464: POP
9465: POP
9466: GO 9515
// end ;
9468: GO 9131
9470: POP
9471: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9472: LD_VAR 0 1
9476: PPUSH
9477: CALL_OW 255
9481: PPUSH
9482: LD_VAR 0 3
9486: PPUSH
9487: LD_VAR 0 4
9491: PPUSH
9492: LD_INT 20
9494: PPUSH
9495: CALL 3693 0 4
9499: PUSH
9500: LD_INT 4
9502: ARRAY
9503: IFFALSE 9507
// exit ;
9505: GO 9515
// result := true ;
9507: LD_ADDR_VAR 0 6
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// end ;
9515: LD_VAR 0 6
9519: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9520: LD_INT 0
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
// result = [ ] ;
9580: LD_ADDR_VAR 0 7
9584: PUSH
9585: EMPTY
9586: ST_TO_ADDR
// temp_list = [ ] ;
9587: LD_ADDR_VAR 0 9
9591: PUSH
9592: EMPTY
9593: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9594: LD_VAR 0 4
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: LD_INT 5
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: IN
9625: NOT
9626: PUSH
9627: LD_VAR 0 1
9631: PUSH
9632: LD_INT 0
9634: PUSH
9635: LD_INT 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: IN
9642: PUSH
9643: LD_VAR 0 5
9647: PUSH
9648: LD_INT 1
9650: PUSH
9651: LD_INT 2
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: IN
9662: NOT
9663: AND
9664: OR
9665: IFFALSE 9669
// exit ;
9667: GO 28054
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9669: LD_VAR 0 1
9673: PUSH
9674: LD_INT 6
9676: PUSH
9677: LD_INT 7
9679: PUSH
9680: LD_INT 8
9682: PUSH
9683: LD_INT 13
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 15
9691: PUSH
9692: LD_INT 11
9694: PUSH
9695: LD_INT 14
9697: PUSH
9698: LD_INT 10
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: IN
9712: IFFALSE 9722
// btype = b_lab ;
9714: LD_ADDR_VAR 0 1
9718: PUSH
9719: LD_INT 6
9721: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9722: LD_VAR 0 6
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: LD_INT 1
9732: PUSH
9733: LD_INT 2
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: IN
9741: NOT
9742: PUSH
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: LD_INT 2
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 6
9762: PUSH
9763: LD_INT 36
9765: PUSH
9766: LD_INT 4
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: LD_INT 31
9774: PUSH
9775: LD_INT 32
9777: PUSH
9778: LD_INT 33
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: IN
9794: NOT
9795: PUSH
9796: LD_VAR 0 6
9800: PUSH
9801: LD_INT 1
9803: EQUAL
9804: AND
9805: OR
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: LD_INT 2
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: IN
9822: NOT
9823: PUSH
9824: LD_VAR 0 6
9828: PUSH
9829: LD_INT 2
9831: EQUAL
9832: AND
9833: OR
9834: IFFALSE 9844
// mode = 0 ;
9836: LD_ADDR_VAR 0 6
9840: PUSH
9841: LD_INT 0
9843: ST_TO_ADDR
// case mode of 0 :
9844: LD_VAR 0 6
9848: PUSH
9849: LD_INT 0
9851: DOUBLE
9852: EQUAL
9853: IFTRUE 9857
9855: GO 21310
9857: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9858: LD_ADDR_VAR 0 11
9862: PUSH
9863: LD_INT 0
9865: PUSH
9866: LD_INT 0
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 0
9875: PUSH
9876: LD_INT 1
9878: NEG
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 1
9886: PUSH
9887: LD_INT 0
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 1
9896: PUSH
9897: LD_INT 1
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 0
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 1
9916: NEG
9917: PUSH
9918: LD_INT 0
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 1
9927: NEG
9928: PUSH
9929: LD_INT 1
9931: NEG
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 1
9939: NEG
9940: PUSH
9941: LD_INT 2
9943: NEG
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: LD_INT 2
9954: NEG
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 1
9962: PUSH
9963: LD_INT 1
9965: NEG
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 0
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 1
9993: NEG
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 1
10004: PUSH
10005: LD_INT 3
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 0
10014: PUSH
10015: LD_INT 3
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 1
10024: NEG
10025: PUSH
10026: LD_INT 2
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10051: LD_ADDR_VAR 0 12
10055: PUSH
10056: LD_INT 0
10058: PUSH
10059: LD_INT 0
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 0
10068: PUSH
10069: LD_INT 1
10071: NEG
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 1
10079: PUSH
10080: LD_INT 0
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 1
10089: PUSH
10090: LD_INT 1
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 0
10099: PUSH
10100: LD_INT 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 1
10109: NEG
10110: PUSH
10111: LD_INT 0
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 1
10120: NEG
10121: PUSH
10122: LD_INT 1
10124: NEG
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 1
10132: PUSH
10133: LD_INT 1
10135: NEG
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 0
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 1
10163: NEG
10164: PUSH
10165: LD_INT 1
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 2
10174: NEG
10175: PUSH
10176: LD_INT 0
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 2
10185: NEG
10186: PUSH
10187: LD_INT 1
10189: NEG
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 2
10197: NEG
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: NEG
10209: PUSH
10210: LD_INT 0
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 3
10219: NEG
10220: PUSH
10221: LD_INT 1
10223: NEG
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10247: LD_ADDR_VAR 0 13
10251: PUSH
10252: LD_INT 0
10254: PUSH
10255: LD_INT 0
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 0
10264: PUSH
10265: LD_INT 1
10267: NEG
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: LD_INT 0
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 1
10305: NEG
10306: PUSH
10307: LD_INT 0
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 1
10316: NEG
10317: PUSH
10318: LD_INT 1
10320: NEG
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 1
10328: NEG
10329: PUSH
10330: LD_INT 2
10332: NEG
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 2
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 2
10370: NEG
10371: PUSH
10372: LD_INT 1
10374: NEG
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 2
10382: NEG
10383: PUSH
10384: LD_INT 2
10386: NEG
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 2
10394: NEG
10395: PUSH
10396: LD_INT 3
10398: NEG
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 3
10406: NEG
10407: PUSH
10408: LD_INT 2
10410: NEG
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: NEG
10419: PUSH
10420: LD_INT 3
10422: NEG
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10446: LD_ADDR_VAR 0 14
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 0
10463: PUSH
10464: LD_INT 1
10466: NEG
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: LD_INT 0
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 1
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: LD_INT 1
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 1
10504: NEG
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 1
10515: NEG
10516: PUSH
10517: LD_INT 1
10519: NEG
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 1
10527: NEG
10528: PUSH
10529: LD_INT 2
10531: NEG
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 0
10539: PUSH
10540: LD_INT 2
10542: NEG
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 1
10550: PUSH
10551: LD_INT 1
10553: NEG
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 0
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 1
10581: NEG
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 1
10592: NEG
10593: PUSH
10594: LD_INT 3
10596: NEG
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: LD_INT 3
10607: NEG
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: LD_INT 2
10618: NEG
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10642: LD_ADDR_VAR 0 15
10646: PUSH
10647: LD_INT 0
10649: PUSH
10650: LD_INT 0
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 0
10659: PUSH
10660: LD_INT 1
10662: NEG
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 1
10670: PUSH
10671: LD_INT 0
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 1
10700: NEG
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 1
10711: NEG
10712: PUSH
10713: LD_INT 1
10715: NEG
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 2
10734: PUSH
10735: LD_INT 0
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 2
10744: PUSH
10745: LD_INT 1
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 1
10754: NEG
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 2
10765: NEG
10766: PUSH
10767: LD_INT 0
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 2
10776: NEG
10777: PUSH
10778: LD_INT 1
10780: NEG
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: LD_INT 1
10791: NEG
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 3
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10835: LD_ADDR_VAR 0 16
10839: PUSH
10840: LD_INT 0
10842: PUSH
10843: LD_INT 0
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: LD_INT 1
10855: NEG
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 1
10863: PUSH
10864: LD_INT 0
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 1
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 0
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 1
10893: NEG
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 1
10904: NEG
10905: PUSH
10906: LD_INT 1
10908: NEG
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 1
10916: NEG
10917: PUSH
10918: LD_INT 2
10920: NEG
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_INT 2
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: NEG
10959: PUSH
10960: LD_INT 1
10962: NEG
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 2
10970: NEG
10971: PUSH
10972: LD_INT 2
10974: NEG
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: LD_INT 3
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: LD_INT 3
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11028: LD_ADDR_VAR 0 17
11032: PUSH
11033: LD_INT 0
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: LD_INT 1
11048: NEG
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: LD_INT 0
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 1
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 0
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 1
11086: NEG
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 1
11097: NEG
11098: PUSH
11099: LD_INT 1
11101: NEG
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 1
11109: NEG
11110: PUSH
11111: LD_INT 2
11113: NEG
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 0
11121: PUSH
11122: LD_INT 2
11124: NEG
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: LD_INT 1
11135: NEG
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: LD_INT 2
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 0
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 1
11193: NEG
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 2
11204: NEG
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 2
11215: NEG
11216: PUSH
11217: LD_INT 1
11219: NEG
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 2
11227: NEG
11228: PUSH
11229: LD_INT 2
11231: NEG
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11258: LD_ADDR_VAR 0 18
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: LD_INT 0
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 0
11275: PUSH
11276: LD_INT 1
11278: NEG
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 0
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 1
11316: NEG
11317: PUSH
11318: LD_INT 0
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 1
11327: NEG
11328: PUSH
11329: LD_INT 1
11331: NEG
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: LD_INT 1
11339: NEG
11340: PUSH
11341: LD_INT 2
11343: NEG
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 0
11351: PUSH
11352: LD_INT 2
11354: NEG
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: LD_INT 1
11365: NEG
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 0
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 1
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 0
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 1
11423: NEG
11424: PUSH
11425: LD_INT 1
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 2
11434: NEG
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 2
11445: NEG
11446: PUSH
11447: LD_INT 1
11449: NEG
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 2
11457: NEG
11458: PUSH
11459: LD_INT 2
11461: NEG
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11488: LD_ADDR_VAR 0 19
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: LD_INT 1
11508: NEG
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 1
11516: PUSH
11517: LD_INT 0
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 1
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 0
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 1
11546: NEG
11547: PUSH
11548: LD_INT 0
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 1
11557: NEG
11558: PUSH
11559: LD_INT 1
11561: NEG
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 1
11569: NEG
11570: PUSH
11571: LD_INT 2
11573: NEG
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 0
11581: PUSH
11582: LD_INT 2
11584: NEG
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: LD_INT 1
11595: NEG
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 2
11603: PUSH
11604: LD_INT 0
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 0
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 1
11653: NEG
11654: PUSH
11655: LD_INT 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 2
11664: NEG
11665: PUSH
11666: LD_INT 0
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 2
11675: NEG
11676: PUSH
11677: LD_INT 1
11679: NEG
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 2
11687: NEG
11688: PUSH
11689: LD_INT 2
11691: NEG
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11718: LD_ADDR_VAR 0 20
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: LD_INT 0
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 0
11735: PUSH
11736: LD_INT 1
11738: NEG
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 1
11746: PUSH
11747: LD_INT 0
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 0
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 1
11776: NEG
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 1
11787: NEG
11788: PUSH
11789: LD_INT 1
11791: NEG
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 1
11799: NEG
11800: PUSH
11801: LD_INT 2
11803: NEG
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 0
11811: PUSH
11812: LD_INT 2
11814: NEG
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: LD_INT 1
11825: NEG
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 0
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 1
11883: NEG
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 2
11894: NEG
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: NEG
11906: PUSH
11907: LD_INT 1
11909: NEG
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 2
11917: NEG
11918: PUSH
11919: LD_INT 2
11921: NEG
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11948: LD_ADDR_VAR 0 21
11952: PUSH
11953: LD_INT 0
11955: PUSH
11956: LD_INT 0
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 0
11965: PUSH
11966: LD_INT 1
11968: NEG
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 0
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 0
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 1
12006: NEG
12007: PUSH
12008: LD_INT 0
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 1
12017: NEG
12018: PUSH
12019: LD_INT 1
12021: NEG
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 1
12029: NEG
12030: PUSH
12031: LD_INT 2
12033: NEG
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 0
12041: PUSH
12042: LD_INT 2
12044: NEG
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: LD_INT 1
12055: NEG
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 0
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 1
12113: NEG
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 2
12124: NEG
12125: PUSH
12126: LD_INT 0
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: NEG
12136: PUSH
12137: LD_INT 1
12139: NEG
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: NEG
12148: PUSH
12149: LD_INT 2
12151: NEG
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12178: LD_ADDR_VAR 0 22
12182: PUSH
12183: LD_INT 0
12185: PUSH
12186: LD_INT 0
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: LD_INT 1
12198: NEG
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: LD_INT 0
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 1
12236: NEG
12237: PUSH
12238: LD_INT 0
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 1
12247: NEG
12248: PUSH
12249: LD_INT 1
12251: NEG
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 1
12259: NEG
12260: PUSH
12261: LD_INT 2
12263: NEG
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 0
12271: PUSH
12272: LD_INT 2
12274: NEG
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: LD_INT 1
12285: NEG
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 0
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 1
12343: NEG
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 2
12354: NEG
12355: PUSH
12356: LD_INT 0
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 2
12365: NEG
12366: PUSH
12367: LD_INT 1
12369: NEG
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 2
12377: NEG
12378: PUSH
12379: LD_INT 2
12381: NEG
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12408: LD_ADDR_VAR 0 23
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: LD_INT 0
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 0
12425: PUSH
12426: LD_INT 1
12428: NEG
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 1
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 0
12456: PUSH
12457: LD_INT 1
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 1
12466: NEG
12467: PUSH
12468: LD_INT 0
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 1
12477: NEG
12478: PUSH
12479: LD_INT 1
12481: NEG
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 1
12489: NEG
12490: PUSH
12491: LD_INT 2
12493: NEG
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 0
12501: PUSH
12502: LD_INT 2
12504: NEG
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: LD_INT 1
12515: NEG
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 1
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 0
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 2
12584: NEG
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: NEG
12596: PUSH
12597: LD_INT 1
12599: NEG
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 2
12607: NEG
12608: PUSH
12609: LD_INT 2
12611: NEG
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: NEG
12620: PUSH
12621: LD_INT 3
12623: NEG
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 1
12631: NEG
12632: PUSH
12633: LD_INT 3
12635: NEG
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 1
12643: PUSH
12644: LD_INT 2
12646: NEG
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 1
12657: NEG
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12688: LD_ADDR_VAR 0 24
12692: PUSH
12693: LD_INT 0
12695: PUSH
12696: LD_INT 0
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 0
12705: PUSH
12706: LD_INT 1
12708: NEG
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 1
12726: PUSH
12727: LD_INT 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 0
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 1
12746: NEG
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 1
12757: NEG
12758: PUSH
12759: LD_INT 1
12761: NEG
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 1
12769: NEG
12770: PUSH
12771: LD_INT 2
12773: NEG
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 0
12781: PUSH
12782: LD_INT 2
12784: NEG
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: LD_INT 1
12795: NEG
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 0
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: LD_INT 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: LD_INT 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: LD_INT 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 0
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 1
12853: NEG
12854: PUSH
12855: LD_INT 1
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 2
12864: NEG
12865: PUSH
12866: LD_INT 0
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 2
12875: NEG
12876: PUSH
12877: LD_INT 1
12879: NEG
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 2
12887: NEG
12888: PUSH
12889: LD_INT 2
12891: NEG
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: LD_INT 2
12902: NEG
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: LD_INT 1
12913: NEG
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 3
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12964: LD_ADDR_VAR 0 25
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 0
12981: PUSH
12982: LD_INT 1
12984: NEG
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: LD_INT 0
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 0
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 1
13022: NEG
13023: PUSH
13024: LD_INT 0
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 1
13033: NEG
13034: PUSH
13035: LD_INT 1
13037: NEG
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 1
13045: NEG
13046: PUSH
13047: LD_INT 2
13049: NEG
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 0
13057: PUSH
13058: LD_INT 2
13060: NEG
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 1
13068: PUSH
13069: LD_INT 1
13071: NEG
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 0
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 2
13089: PUSH
13090: LD_INT 1
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 2
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: LD_INT 2
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 0
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 1
13129: NEG
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 2
13140: NEG
13141: PUSH
13142: LD_INT 0
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 2
13151: NEG
13152: PUSH
13153: LD_INT 1
13155: NEG
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 2
13163: NEG
13164: PUSH
13165: LD_INT 2
13167: NEG
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 3
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 3
13185: PUSH
13186: LD_INT 2
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: LD_INT 3
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13238: LD_ADDR_VAR 0 26
13242: PUSH
13243: LD_INT 0
13245: PUSH
13246: LD_INT 0
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 0
13255: PUSH
13256: LD_INT 1
13258: NEG
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 1
13266: PUSH
13267: LD_INT 0
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 1
13276: PUSH
13277: LD_INT 1
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 0
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 1
13296: NEG
13297: PUSH
13298: LD_INT 0
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 1
13307: NEG
13308: PUSH
13309: LD_INT 1
13311: NEG
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 1
13319: NEG
13320: PUSH
13321: LD_INT 2
13323: NEG
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 0
13331: PUSH
13332: LD_INT 2
13334: NEG
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: LD_INT 1
13345: NEG
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: LD_INT 0
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: LD_INT 1
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 0
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 1
13403: NEG
13404: PUSH
13405: LD_INT 1
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: NEG
13415: PUSH
13416: LD_INT 0
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 2
13425: NEG
13426: PUSH
13427: LD_INT 1
13429: NEG
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 2
13437: NEG
13438: PUSH
13439: LD_INT 2
13441: NEG
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 1
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 1
13469: NEG
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 2
13480: NEG
13481: PUSH
13482: LD_INT 1
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13514: LD_ADDR_VAR 0 27
13518: PUSH
13519: LD_INT 0
13521: PUSH
13522: LD_INT 0
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 0
13531: PUSH
13532: LD_INT 1
13534: NEG
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: LD_INT 0
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 0
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 1
13572: NEG
13573: PUSH
13574: LD_INT 0
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 1
13583: NEG
13584: PUSH
13585: LD_INT 1
13587: NEG
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 1
13595: NEG
13596: PUSH
13597: LD_INT 2
13599: NEG
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 0
13607: PUSH
13608: LD_INT 2
13610: NEG
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 1
13618: PUSH
13619: LD_INT 1
13621: NEG
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 0
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 2
13639: PUSH
13640: LD_INT 1
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 0
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 1
13679: NEG
13680: PUSH
13681: LD_INT 1
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 2
13690: NEG
13691: PUSH
13692: LD_INT 0
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 2
13701: NEG
13702: PUSH
13703: LD_INT 1
13705: NEG
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 2
13713: NEG
13714: PUSH
13715: LD_INT 2
13717: NEG
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 1
13725: NEG
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 2
13736: NEG
13737: PUSH
13738: LD_INT 1
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 3
13747: NEG
13748: PUSH
13749: LD_INT 1
13751: NEG
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 3
13759: NEG
13760: PUSH
13761: LD_INT 2
13763: NEG
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13794: LD_ADDR_VAR 0 28
13798: PUSH
13799: LD_INT 0
13801: PUSH
13802: LD_INT 0
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 0
13811: PUSH
13812: LD_INT 1
13814: NEG
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 0
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: LD_INT 1
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 0
13842: PUSH
13843: LD_INT 1
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 1
13852: NEG
13853: PUSH
13854: LD_INT 0
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 1
13863: NEG
13864: PUSH
13865: LD_INT 1
13867: NEG
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 1
13875: NEG
13876: PUSH
13877: LD_INT 2
13879: NEG
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 0
13887: PUSH
13888: LD_INT 2
13890: NEG
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: LD_INT 1
13901: NEG
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 0
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 2
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 0
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 1
13959: NEG
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 2
13970: NEG
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 2
13981: NEG
13982: PUSH
13983: LD_INT 1
13985: NEG
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 2
13993: NEG
13994: PUSH
13995: LD_INT 2
13997: NEG
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 2
14005: NEG
14006: PUSH
14007: LD_INT 3
14009: NEG
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 1
14017: NEG
14018: PUSH
14019: LD_INT 3
14021: NEG
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 3
14029: NEG
14030: PUSH
14031: LD_INT 1
14033: NEG
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 3
14041: NEG
14042: PUSH
14043: LD_INT 2
14045: NEG
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14076: LD_ADDR_VAR 0 29
14080: PUSH
14081: LD_INT 0
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: LD_INT 1
14096: NEG
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: LD_INT 0
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 1
14114: PUSH
14115: LD_INT 1
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 1
14134: NEG
14135: PUSH
14136: LD_INT 0
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 1
14145: NEG
14146: PUSH
14147: LD_INT 1
14149: NEG
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 1
14157: NEG
14158: PUSH
14159: LD_INT 2
14161: NEG
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 0
14169: PUSH
14170: LD_INT 2
14172: NEG
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: LD_INT 1
14183: NEG
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 0
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: LD_INT 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 1
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 0
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 1
14231: NEG
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 2
14242: NEG
14243: PUSH
14244: LD_INT 1
14246: NEG
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 2
14254: NEG
14255: PUSH
14256: LD_INT 2
14258: NEG
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 2
14266: NEG
14267: PUSH
14268: LD_INT 3
14270: NEG
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: LD_INT 1
14281: NEG
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 3
14289: PUSH
14290: LD_INT 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 1
14309: NEG
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 3
14320: NEG
14321: PUSH
14322: LD_INT 2
14324: NEG
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14355: LD_ADDR_VAR 0 30
14359: PUSH
14360: LD_INT 0
14362: PUSH
14363: LD_INT 0
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: LD_INT 1
14375: NEG
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: LD_INT 0
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: LD_INT 1
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 1
14413: NEG
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 1
14424: NEG
14425: PUSH
14426: LD_INT 1
14428: NEG
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 1
14436: NEG
14437: PUSH
14438: LD_INT 2
14440: NEG
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 0
14448: PUSH
14449: LD_INT 2
14451: NEG
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: LD_INT 1
14462: NEG
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 0
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: LD_INT 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 1
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 1
14510: NEG
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 2
14521: NEG
14522: PUSH
14523: LD_INT 0
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 2
14532: NEG
14533: PUSH
14534: LD_INT 1
14536: NEG
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 1
14544: NEG
14545: PUSH
14546: LD_INT 3
14548: NEG
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: LD_INT 2
14559: NEG
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 3
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 2
14587: NEG
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 3
14598: NEG
14599: PUSH
14600: LD_INT 1
14602: NEG
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14633: LD_ADDR_VAR 0 31
14637: PUSH
14638: LD_INT 0
14640: PUSH
14641: LD_INT 0
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 0
14650: PUSH
14651: LD_INT 1
14653: NEG
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 1
14661: PUSH
14662: LD_INT 0
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 0
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 1
14691: NEG
14692: PUSH
14693: LD_INT 0
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 1
14702: NEG
14703: PUSH
14704: LD_INT 1
14706: NEG
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 1
14714: NEG
14715: PUSH
14716: LD_INT 2
14718: NEG
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: LD_INT 1
14729: NEG
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: LD_INT 0
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: LD_INT 2
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 0
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 1
14787: NEG
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 2
14798: NEG
14799: PUSH
14800: LD_INT 1
14802: NEG
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 2
14810: NEG
14811: PUSH
14812: LD_INT 2
14814: NEG
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 2
14822: NEG
14823: PUSH
14824: LD_INT 3
14826: NEG
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: LD_INT 1
14837: NEG
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 1
14855: PUSH
14856: LD_INT 3
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 1
14865: NEG
14866: PUSH
14867: LD_INT 2
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 3
14876: NEG
14877: PUSH
14878: LD_INT 2
14880: NEG
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14911: LD_ADDR_VAR 0 32
14915: PUSH
14916: LD_INT 0
14918: PUSH
14919: LD_INT 0
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 1
14969: NEG
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: NEG
14981: PUSH
14982: LD_INT 1
14984: NEG
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 1
14992: NEG
14993: PUSH
14994: LD_INT 2
14996: NEG
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 0
15004: PUSH
15005: LD_INT 2
15007: NEG
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 1
15015: PUSH
15016: LD_INT 1
15018: NEG
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: LD_INT 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 1
15066: NEG
15067: PUSH
15068: LD_INT 1
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 2
15077: NEG
15078: PUSH
15079: LD_INT 0
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 2
15088: NEG
15089: PUSH
15090: LD_INT 1
15092: NEG
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 1
15100: NEG
15101: PUSH
15102: LD_INT 3
15104: NEG
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: LD_INT 2
15115: NEG
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 3
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 2
15143: NEG
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 3
15154: NEG
15155: PUSH
15156: LD_INT 1
15158: NEG
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15189: LD_ADDR_VAR 0 33
15193: PUSH
15194: LD_INT 0
15196: PUSH
15197: LD_INT 0
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 0
15206: PUSH
15207: LD_INT 1
15209: NEG
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 1
15227: PUSH
15228: LD_INT 1
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 0
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 1
15247: NEG
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 1
15258: NEG
15259: PUSH
15260: LD_INT 1
15262: NEG
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 1
15270: NEG
15271: PUSH
15272: LD_INT 2
15274: NEG
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: LD_INT 1
15285: NEG
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 2
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 0
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 1
15333: NEG
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 2
15344: NEG
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 2
15355: NEG
15356: PUSH
15357: LD_INT 1
15359: NEG
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 2
15367: NEG
15368: PUSH
15369: LD_INT 2
15371: NEG
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 2
15379: NEG
15380: PUSH
15381: LD_INT 3
15383: NEG
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 1
15394: NEG
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 1
15422: NEG
15423: PUSH
15424: LD_INT 2
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 3
15433: NEG
15434: PUSH
15435: LD_INT 2
15437: NEG
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15468: LD_ADDR_VAR 0 34
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: LD_INT 0
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 0
15485: PUSH
15486: LD_INT 1
15488: NEG
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: LD_INT 0
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: LD_INT 1
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 1
15526: NEG
15527: PUSH
15528: LD_INT 0
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 1
15537: NEG
15538: PUSH
15539: LD_INT 1
15541: NEG
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 1
15549: NEG
15550: PUSH
15551: LD_INT 2
15553: NEG
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: LD_INT 2
15564: NEG
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: LD_INT 1
15575: NEG
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: LD_INT 1
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: LD_INT 2
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 1
15613: NEG
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 2
15624: NEG
15625: PUSH
15626: LD_INT 0
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 2
15635: NEG
15636: PUSH
15637: LD_INT 1
15639: NEG
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 2
15647: NEG
15648: PUSH
15649: LD_INT 2
15651: NEG
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 1
15659: NEG
15660: PUSH
15661: LD_INT 3
15663: NEG
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 1
15671: PUSH
15672: LD_INT 2
15674: NEG
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 3
15682: PUSH
15683: LD_INT 2
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: LD_INT 3
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 2
15702: NEG
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: NEG
15714: PUSH
15715: LD_INT 1
15717: NEG
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15748: LD_ADDR_VAR 0 35
15752: PUSH
15753: LD_INT 0
15755: PUSH
15756: LD_INT 0
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 0
15765: PUSH
15766: LD_INT 1
15768: NEG
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: LD_INT 0
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 1
15806: NEG
15807: PUSH
15808: LD_INT 0
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 1
15817: NEG
15818: PUSH
15819: LD_INT 1
15821: NEG
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 2
15839: NEG
15840: PUSH
15841: LD_INT 1
15843: NEG
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15860: LD_ADDR_VAR 0 36
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 0
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 1
15918: NEG
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: LD_INT 1
15933: NEG
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 1
15941: NEG
15942: PUSH
15943: LD_INT 2
15945: NEG
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15972: LD_ADDR_VAR 0 37
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: LD_INT 0
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: LD_INT 1
15992: NEG
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 0
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 1
16030: NEG
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 1
16041: NEG
16042: PUSH
16043: LD_INT 1
16045: NEG
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: LD_INT 1
16056: NEG
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: NEG
16065: PUSH
16066: LD_INT 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16084: LD_ADDR_VAR 0 38
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: LD_INT 0
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: LD_INT 0
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 1
16153: NEG
16154: PUSH
16155: LD_INT 1
16157: NEG
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 1
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 2
16175: NEG
16176: PUSH
16177: LD_INT 1
16179: NEG
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16196: LD_ADDR_VAR 0 39
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 0
16213: PUSH
16214: LD_INT 1
16216: NEG
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: NEG
16266: PUSH
16267: LD_INT 1
16269: NEG
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 1
16277: NEG
16278: PUSH
16279: LD_INT 2
16281: NEG
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16308: LD_ADDR_VAR 0 40
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: LD_INT 0
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 0
16325: PUSH
16326: LD_INT 1
16328: NEG
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 0
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 1
16366: NEG
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 1
16377: NEG
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 1
16392: NEG
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 1
16400: NEG
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16420: LD_ADDR_VAR 0 41
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 1
16440: NEG
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: PUSH
16449: LD_INT 0
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: NEG
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: NEG
16490: PUSH
16491: LD_INT 1
16493: NEG
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: LD_INT 2
16505: NEG
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: LD_INT 1
16516: NEG
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 2
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 1
16554: PUSH
16555: LD_INT 2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: NEG
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 2
16586: NEG
16587: PUSH
16588: LD_INT 1
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 2
16598: NEG
16599: PUSH
16600: LD_INT 2
16602: NEG
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 2
16610: NEG
16611: PUSH
16612: LD_INT 3
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: LD_INT 1
16625: NEG
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 3
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 3
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 3
16653: PUSH
16654: LD_INT 2
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: LD_INT 3
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 2
16673: PUSH
16674: LD_INT 3
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 3
16694: NEG
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 3
16705: NEG
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 3
16717: NEG
16718: PUSH
16719: LD_INT 2
16721: NEG
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 3
16729: NEG
16730: PUSH
16731: LD_INT 3
16733: NEG
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16770: LD_ADDR_VAR 0 42
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: LD_INT 1
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: NEG
16852: PUSH
16853: LD_INT 2
16855: NEG
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: LD_INT 2
16866: NEG
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: LD_INT 1
16877: NEG
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 2
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 0
16915: PUSH
16916: LD_INT 2
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: NEG
16937: PUSH
16938: LD_INT 1
16940: NEG
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 2
16948: NEG
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 2
16960: NEG
16961: PUSH
16962: LD_INT 3
16964: NEG
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 1
16972: NEG
16973: PUSH
16974: LD_INT 3
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: LD_INT 3
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 2
16998: NEG
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 3
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 1
17056: NEG
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 3
17067: NEG
17068: PUSH
17069: LD_INT 2
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 3
17079: NEG
17080: PUSH
17081: LD_INT 3
17083: NEG
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17120: LD_ADDR_VAR 0 43
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: LD_INT 0
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 1
17158: PUSH
17159: LD_INT 1
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 1
17189: NEG
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: NEG
17202: PUSH
17203: LD_INT 2
17205: NEG
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: LD_INT 2
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: LD_INT 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 2
17286: NEG
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: NEG
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: NEG
17310: PUSH
17311: LD_INT 3
17313: NEG
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: LD_INT 3
17324: NEG
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: LD_INT 2
17335: NEG
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 0
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: LD_INT 3
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: LD_INT 3
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: NEG
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 2
17405: NEG
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 3
17416: NEG
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 3
17427: NEG
17428: PUSH
17429: LD_INT 1
17431: NEG
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17468: LD_ADDR_VAR 0 44
17472: PUSH
17473: LD_INT 0
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 1
17526: NEG
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 1
17537: NEG
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: NEG
17550: PUSH
17551: LD_INT 2
17553: NEG
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 2
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: LD_INT 1
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 2
17646: NEG
17647: PUSH
17648: LD_INT 2
17650: NEG
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: LD_INT 3
17662: NEG
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 3
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 3
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: NEG
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 3
17742: NEG
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 3
17753: NEG
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 3
17765: NEG
17766: PUSH
17767: LD_INT 2
17769: NEG
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 3
17777: NEG
17778: PUSH
17779: LD_INT 3
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17818: LD_ADDR_VAR 0 45
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: NEG
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: NEG
17888: PUSH
17889: LD_INT 1
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: LD_INT 2
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 2
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 1
17925: NEG
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: NEG
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 2
17996: NEG
17997: PUSH
17998: LD_INT 2
18000: NEG
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 2
18008: NEG
18009: PUSH
18010: LD_INT 3
18012: NEG
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: PUSH
18022: LD_INT 3
18024: NEG
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 3
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 3
18054: PUSH
18055: LD_INT 2
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 3
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 2
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 3
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 3
18127: NEG
18128: PUSH
18129: LD_INT 3
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18168: LD_ADDR_VAR 0 46
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 0
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: LD_INT 2
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 2
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: LD_INT 1
18275: NEG
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: NEG
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 3
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: LD_INT 3
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 3
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 3
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 3
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 2
18453: NEG
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 3
18464: NEG
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 3
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18516: LD_ADDR_VAR 0 47
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 2
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: NEG
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18667: LD_ADDR_VAR 0 48
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 1
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 2
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: LD_INT 2
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18814: LD_ADDR_VAR 0 49
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: NEG
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: LD_INT 2
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18958: LD_ADDR_VAR 0 50
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 1
19031: NEG
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19102: LD_ADDR_VAR 0 51
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: LD_INT 1
19122: NEG
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: NEG
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19249: LD_ADDR_VAR 0 52
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 0
19266: PUSH
19267: LD_INT 1
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 1
19307: NEG
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: LD_INT 2
19334: NEG
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 2
19376: NEG
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19400: LD_ADDR_VAR 0 53
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 0
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: NEG
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: NEG
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: LD_INT 2
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19630: LD_ADDR_VAR 0 54
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19860: LD_ADDR_VAR 0 55
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: NEG
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 2
20036: NEG
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20090: LD_ADDR_VAR 0 56
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 2
20266: NEG
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20320: LD_ADDR_VAR 0 57
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20550: LD_ADDR_VAR 0 58
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20780: LD_ADDR_VAR 0 59
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20868: LD_ADDR_VAR 0 60
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 0
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20956: LD_ADDR_VAR 0 61
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 0
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21044: LD_ADDR_VAR 0 62
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: LD_INT 0
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: NEG
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21132: LD_ADDR_VAR 0 63
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21220: LD_ADDR_VAR 0 64
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// end ; 1 :
21308: GO 27205
21310: LD_INT 1
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 23941
21318: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21319: LD_ADDR_VAR 0 11
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: LD_INT 3
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: LD_INT 3
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21363: LD_ADDR_VAR 0 12
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 3
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 3
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21404: LD_ADDR_VAR 0 13
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 3
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 3
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21444: LD_ADDR_VAR 0 14
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 3
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21485: LD_ADDR_VAR 0 15
21489: PUSH
21490: LD_INT 2
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 3
21503: NEG
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 3
21514: NEG
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21529: LD_ADDR_VAR 0 16
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 3
21548: NEG
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 3
21560: NEG
21561: PUSH
21562: LD_INT 3
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21575: LD_ADDR_VAR 0 17
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: LD_INT 3
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 3
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21619: LD_ADDR_VAR 0 18
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 3
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21660: LD_ADDR_VAR 0 19
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 3
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21700: LD_ADDR_VAR 0 20
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: LD_INT 3
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21741: LD_ADDR_VAR 0 21
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 3
21759: NEG
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 3
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21785: LD_ADDR_VAR 0 22
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: LD_INT 3
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 3
21804: NEG
21805: PUSH
21806: LD_INT 2
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 3
21816: NEG
21817: PUSH
21818: LD_INT 3
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21831: LD_ADDR_VAR 0 23
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 4
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 3
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21875: LD_ADDR_VAR 0 24
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 3
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 4
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21916: LD_ADDR_VAR 0 25
21920: PUSH
21921: LD_INT 3
21923: PUSH
21924: LD_INT 3
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 4
21933: PUSH
21934: LD_INT 3
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: LD_INT 4
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21956: LD_ADDR_VAR 0 26
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 4
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 3
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21997: LD_ADDR_VAR 0 27
22001: PUSH
22002: LD_INT 3
22004: NEG
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: NEG
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 4
22026: NEG
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22041: LD_ADDR_VAR 0 28
22045: PUSH
22046: LD_INT 3
22048: NEG
22049: PUSH
22050: LD_INT 3
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 3
22060: NEG
22061: PUSH
22062: LD_INT 4
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 4
22072: NEG
22073: PUSH
22074: LD_INT 3
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: LIST
22086: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22087: LD_ADDR_VAR 0 29
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 3
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: LD_INT 3
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 4
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: LD_INT 4
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 3
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: NEG
22163: PUSH
22164: LD_INT 5
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 5
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 4
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: LD_INT 6
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: LD_INT 6
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 5
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22242: LD_ADDR_VAR 0 30
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 4
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 5
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 5
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 5
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 6
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 6
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22385: LD_ADDR_VAR 0 31
22389: PUSH
22390: LD_INT 3
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: LD_INT 3
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 4
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 4
22432: PUSH
22433: LD_INT 4
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: PUSH
22443: LD_INT 4
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 5
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 5
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 4
22472: PUSH
22473: LD_INT 5
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 6
22482: PUSH
22483: LD_INT 5
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 6
22492: PUSH
22493: LD_INT 6
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 5
22502: PUSH
22503: LD_INT 6
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22524: LD_ADDR_VAR 0 32
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 4
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 5
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: LD_INT 5
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 6
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 6
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: LD_INT 5
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22667: LD_ADDR_VAR 0 33
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 3
22685: NEG
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 3
22696: NEG
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 3
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 4
22719: NEG
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 4
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 4
22742: NEG
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 5
22753: NEG
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 5
22764: NEG
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 5
22776: NEG
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 6
22787: NEG
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 6
22798: NEG
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22822: LD_ADDR_VAR 0 34
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 3
22841: NEG
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: NEG
22854: PUSH
22855: LD_INT 3
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 3
22865: NEG
22866: PUSH
22867: LD_INT 4
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 4
22877: NEG
22878: PUSH
22879: LD_INT 3
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 4
22889: NEG
22890: PUSH
22891: LD_INT 4
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 4
22901: NEG
22902: PUSH
22903: LD_INT 5
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 5
22913: NEG
22914: PUSH
22915: LD_INT 4
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 5
22925: NEG
22926: PUSH
22927: LD_INT 5
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 5
22937: NEG
22938: PUSH
22939: LD_INT 6
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 6
22949: NEG
22950: PUSH
22951: LD_INT 5
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 6
22961: NEG
22962: PUSH
22963: LD_INT 6
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22985: LD_ADDR_VAR 0 41
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 2
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23029: LD_ADDR_VAR 0 42
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23070: LD_ADDR_VAR 0 43
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: LD_INT 3
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23110: LD_ADDR_VAR 0 44
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 3
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23151: LD_ADDR_VAR 0 45
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 3
23180: NEG
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23195: LD_ADDR_VAR 0 46
23199: PUSH
23200: LD_INT 2
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 3
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 3
23226: NEG
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23241: LD_ADDR_VAR 0 47
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23274: LD_ADDR_VAR 0 48
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: LD_INT 2
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23305: LD_ADDR_VAR 0 49
23309: PUSH
23310: LD_INT 3
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23334: LD_ADDR_VAR 0 50
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 3
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23363: LD_ADDR_VAR 0 51
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 2
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23394: LD_ADDR_VAR 0 52
23398: PUSH
23399: LD_INT 3
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 3
23413: NEG
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23427: LD_ADDR_VAR 0 53
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 3
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 3
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23471: LD_ADDR_VAR 0 54
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23512: LD_ADDR_VAR 0 55
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: LD_INT 3
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23552: LD_ADDR_VAR 0 56
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 3
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23593: LD_ADDR_VAR 0 57
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 3
23611: NEG
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 3
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23637: LD_ADDR_VAR 0 58
23641: PUSH
23642: LD_INT 2
23644: NEG
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 3
23656: NEG
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 3
23668: NEG
23669: PUSH
23670: LD_INT 3
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23683: LD_ADDR_VAR 0 59
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 0
23702: PUSH
23703: LD_INT 2
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23727: LD_ADDR_VAR 0 60
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23768: LD_ADDR_VAR 0 61
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23808: LD_ADDR_VAR 0 62
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23849: LD_ADDR_VAR 0 63
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 2
23878: NEG
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23893: LD_ADDR_VAR 0 64
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: ST_TO_ADDR
// end ; 2 :
23939: GO 27205
23941: LD_INT 2
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 27204
23949: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23950: LD_ADDR_VAR 0 29
23954: PUSH
23955: LD_INT 4
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 4
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 5
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 5
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 4
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 3
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 5
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 3
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 3
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 4
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 4
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: LD_INT 3
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 4
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 4
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: LD_INT 5
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: LD_INT 4
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: LD_INT 5
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 2
24222: NEG
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 3
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 3
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 3
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 4
24289: NEG
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 4
24300: NEG
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 4
24312: NEG
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 4
24335: NEG
24336: PUSH
24337: LD_INT 4
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 4
24347: NEG
24348: PUSH
24349: LD_INT 5
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 3
24359: NEG
24360: PUSH
24361: LD_INT 4
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 3
24371: NEG
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 4
24383: NEG
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 5
24395: NEG
24396: PUSH
24397: LD_INT 4
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 5
24407: NEG
24408: PUSH
24409: LD_INT 5
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: LD_INT 5
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 5
24431: NEG
24432: PUSH
24433: LD_INT 3
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24488: LD_ADDR_VAR 0 30
24492: PUSH
24493: LD_INT 4
24495: PUSH
24496: LD_INT 4
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 4
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 5
24515: PUSH
24516: LD_INT 4
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 5
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 4
24535: PUSH
24536: LD_INT 5
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 3
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 3
24555: PUSH
24556: LD_INT 3
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 5
24565: PUSH
24566: LD_INT 3
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 5
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 3
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: LD_INT 4
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: LD_INT 3
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 4
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 4
24678: NEG
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 4
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 3
24712: NEG
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 4
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 5
24734: NEG
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 5
24745: NEG
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 5
24757: NEG
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 3
24780: NEG
24781: PUSH
24782: LD_INT 3
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 3
24792: NEG
24793: PUSH
24794: LD_INT 4
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: NEG
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: LD_INT 2
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 4
24840: NEG
24841: PUSH
24842: LD_INT 3
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 4
24852: NEG
24853: PUSH
24854: LD_INT 4
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 2
24864: NEG
24865: PUSH
24866: LD_INT 4
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 4
24876: NEG
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 4
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 5
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 4
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 3
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: LD_INT 3
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 4
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 5
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 3
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: NEG
24979: PUSH
24980: LD_INT 5
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25035: LD_ADDR_VAR 0 31
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 4
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 4
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 5
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 5
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 4
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: LD_INT 5
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 3
25135: NEG
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 3
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 3
25180: NEG
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 4
25191: NEG
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 4
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 4
25214: NEG
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 4
25237: NEG
25238: PUSH
25239: LD_INT 4
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 4
25249: NEG
25250: PUSH
25251: LD_INT 5
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 3
25261: NEG
25262: PUSH
25263: LD_INT 4
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: NEG
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 4
25285: NEG
25286: PUSH
25287: LD_INT 3
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 5
25297: NEG
25298: PUSH
25299: LD_INT 4
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 5
25309: NEG
25310: PUSH
25311: LD_INT 5
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 3
25321: NEG
25322: PUSH
25323: LD_INT 5
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 5
25333: NEG
25334: PUSH
25335: LD_INT 3
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 3
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 4
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 3
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 3
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 4
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: NEG
25436: PUSH
25437: LD_INT 4
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 4
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 4
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 5
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 5
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 4
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 3
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 3
25519: PUSH
25520: LD_INT 2
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 5
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25585: LD_ADDR_VAR 0 32
25589: PUSH
25590: LD_INT 4
25592: NEG
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 4
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 3
25615: NEG
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 3
25626: NEG
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 4
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 5
25648: NEG
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 5
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 5
25671: NEG
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 3
25683: NEG
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 3
25694: NEG
25695: PUSH
25696: LD_INT 3
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 3
25706: NEG
25707: PUSH
25708: LD_INT 4
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: NEG
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 4
25754: NEG
25755: PUSH
25756: LD_INT 3
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 4
25766: NEG
25767: PUSH
25768: LD_INT 4
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: NEG
25779: PUSH
25780: LD_INT 4
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 4
25790: NEG
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: LD_INT 4
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 5
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 4
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 3
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: LD_INT 3
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 4
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 5
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 3
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: LD_INT 5
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 4
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 4
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 4
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 4
25997: PUSH
25998: LD_INT 4
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 4
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 5
26017: PUSH
26018: LD_INT 4
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 5
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: LD_INT 5
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 3
26047: PUSH
26048: LD_INT 4
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 5
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 3
26077: PUSH
26078: LD_INT 5
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26132: LD_ADDR_VAR 0 33
26136: PUSH
26137: LD_INT 4
26139: NEG
26140: PUSH
26141: LD_INT 4
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 4
26151: NEG
26152: PUSH
26153: LD_INT 5
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 3
26163: NEG
26164: PUSH
26165: LD_INT 4
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 3
26175: NEG
26176: PUSH
26177: LD_INT 3
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 4
26187: NEG
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 5
26199: NEG
26200: PUSH
26201: LD_INT 4
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 5
26211: NEG
26212: PUSH
26213: LD_INT 5
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: NEG
26224: PUSH
26225: LD_INT 5
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 5
26235: NEG
26236: PUSH
26237: LD_INT 3
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 4
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 3
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 4
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: NEG
26338: PUSH
26339: LD_INT 4
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 4
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 4
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 5
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 5
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 4
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: PUSH
26422: LD_INT 2
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 5
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 4
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 4
26472: PUSH
26473: LD_INT 4
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 4
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 4
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 4
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 4
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 3
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 4
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 5
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 5
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 4
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 5
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: NEG
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26670: LD_ADDR_VAR 0 34
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 4
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 5
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 4
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 3
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 3
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 4
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 5
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 3
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 5
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 4
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 4
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 4
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 4
26872: PUSH
26873: LD_INT 4
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 4
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 5
26892: PUSH
26893: LD_INT 4
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 5
26902: PUSH
26903: LD_INT 5
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 4
26912: PUSH
26913: LD_INT 5
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 3
26922: PUSH
26923: LD_INT 4
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 3
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 5
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: LD_INT 5
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: LD_INT 3
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 4
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 4
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 3
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 4
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 4
27055: NEG
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 4
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 3
27078: NEG
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 3
27089: NEG
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 4
27100: NEG
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 5
27111: NEG
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 5
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 5
27134: NEG
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 3
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// end ; end ;
27202: GO 27205
27204: POP
// case btype of b_depot , b_warehouse :
27205: LD_VAR 0 1
27209: PUSH
27210: LD_INT 0
27212: DOUBLE
27213: EQUAL
27214: IFTRUE 27224
27216: LD_INT 1
27218: DOUBLE
27219: EQUAL
27220: IFTRUE 27224
27222: GO 27425
27224: POP
// case nation of nation_american :
27225: LD_VAR 0 5
27229: PUSH
27230: LD_INT 1
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27294
27238: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27239: LD_ADDR_VAR 0 9
27243: PUSH
27244: LD_VAR 0 11
27248: PUSH
27249: LD_VAR 0 12
27253: PUSH
27254: LD_VAR 0 13
27258: PUSH
27259: LD_VAR 0 14
27263: PUSH
27264: LD_VAR 0 15
27268: PUSH
27269: LD_VAR 0 16
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: PUSH
27282: LD_VAR 0 4
27286: PUSH
27287: LD_INT 1
27289: PLUS
27290: ARRAY
27291: ST_TO_ADDR
27292: GO 27423
27294: LD_INT 2
27296: DOUBLE
27297: EQUAL
27298: IFTRUE 27302
27300: GO 27358
27302: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27303: LD_ADDR_VAR 0 9
27307: PUSH
27308: LD_VAR 0 17
27312: PUSH
27313: LD_VAR 0 18
27317: PUSH
27318: LD_VAR 0 19
27322: PUSH
27323: LD_VAR 0 20
27327: PUSH
27328: LD_VAR 0 21
27332: PUSH
27333: LD_VAR 0 22
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: PUSH
27346: LD_VAR 0 4
27350: PUSH
27351: LD_INT 1
27353: PLUS
27354: ARRAY
27355: ST_TO_ADDR
27356: GO 27423
27358: LD_INT 3
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27422
27366: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27367: LD_ADDR_VAR 0 9
27371: PUSH
27372: LD_VAR 0 23
27376: PUSH
27377: LD_VAR 0 24
27381: PUSH
27382: LD_VAR 0 25
27386: PUSH
27387: LD_VAR 0 26
27391: PUSH
27392: LD_VAR 0 27
27396: PUSH
27397: LD_VAR 0 28
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: PUSH
27410: LD_VAR 0 4
27414: PUSH
27415: LD_INT 1
27417: PLUS
27418: ARRAY
27419: ST_TO_ADDR
27420: GO 27423
27422: POP
27423: GO 27972
27425: LD_INT 2
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27439
27431: LD_INT 3
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27495
27439: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27440: LD_ADDR_VAR 0 9
27444: PUSH
27445: LD_VAR 0 29
27449: PUSH
27450: LD_VAR 0 30
27454: PUSH
27455: LD_VAR 0 31
27459: PUSH
27460: LD_VAR 0 32
27464: PUSH
27465: LD_VAR 0 33
27469: PUSH
27470: LD_VAR 0 34
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: PUSH
27483: LD_VAR 0 4
27487: PUSH
27488: LD_INT 1
27490: PLUS
27491: ARRAY
27492: ST_TO_ADDR
27493: GO 27972
27495: LD_INT 16
27497: DOUBLE
27498: EQUAL
27499: IFTRUE 27551
27501: LD_INT 17
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27551
27507: LD_INT 18
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27551
27513: LD_INT 19
27515: DOUBLE
27516: EQUAL
27517: IFTRUE 27551
27519: LD_INT 20
27521: DOUBLE
27522: EQUAL
27523: IFTRUE 27551
27525: LD_INT 21
27527: DOUBLE
27528: EQUAL
27529: IFTRUE 27551
27531: LD_INT 23
27533: DOUBLE
27534: EQUAL
27535: IFTRUE 27551
27537: LD_INT 24
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27551
27543: LD_INT 25
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27607
27551: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27552: LD_ADDR_VAR 0 9
27556: PUSH
27557: LD_VAR 0 35
27561: PUSH
27562: LD_VAR 0 36
27566: PUSH
27567: LD_VAR 0 37
27571: PUSH
27572: LD_VAR 0 38
27576: PUSH
27577: LD_VAR 0 39
27581: PUSH
27582: LD_VAR 0 40
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: PUSH
27595: LD_VAR 0 4
27599: PUSH
27600: LD_INT 1
27602: PLUS
27603: ARRAY
27604: ST_TO_ADDR
27605: GO 27972
27607: LD_INT 6
27609: DOUBLE
27610: EQUAL
27611: IFTRUE 27663
27613: LD_INT 7
27615: DOUBLE
27616: EQUAL
27617: IFTRUE 27663
27619: LD_INT 8
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27663
27625: LD_INT 13
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27663
27631: LD_INT 12
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27663
27637: LD_INT 15
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27663
27643: LD_INT 11
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27663
27649: LD_INT 14
27651: DOUBLE
27652: EQUAL
27653: IFTRUE 27663
27655: LD_INT 10
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27663
27661: GO 27719
27663: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27664: LD_ADDR_VAR 0 9
27668: PUSH
27669: LD_VAR 0 41
27673: PUSH
27674: LD_VAR 0 42
27678: PUSH
27679: LD_VAR 0 43
27683: PUSH
27684: LD_VAR 0 44
27688: PUSH
27689: LD_VAR 0 45
27693: PUSH
27694: LD_VAR 0 46
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PUSH
27707: LD_VAR 0 4
27711: PUSH
27712: LD_INT 1
27714: PLUS
27715: ARRAY
27716: ST_TO_ADDR
27717: GO 27972
27719: LD_INT 36
27721: DOUBLE
27722: EQUAL
27723: IFTRUE 27727
27725: GO 27783
27727: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27728: LD_ADDR_VAR 0 9
27732: PUSH
27733: LD_VAR 0 47
27737: PUSH
27738: LD_VAR 0 48
27742: PUSH
27743: LD_VAR 0 49
27747: PUSH
27748: LD_VAR 0 50
27752: PUSH
27753: LD_VAR 0 51
27757: PUSH
27758: LD_VAR 0 52
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: PUSH
27771: LD_VAR 0 4
27775: PUSH
27776: LD_INT 1
27778: PLUS
27779: ARRAY
27780: ST_TO_ADDR
27781: GO 27972
27783: LD_INT 4
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27809
27789: LD_INT 5
27791: DOUBLE
27792: EQUAL
27793: IFTRUE 27809
27795: LD_INT 34
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27809
27801: LD_INT 37
27803: DOUBLE
27804: EQUAL
27805: IFTRUE 27809
27807: GO 27865
27809: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27810: LD_ADDR_VAR 0 9
27814: PUSH
27815: LD_VAR 0 53
27819: PUSH
27820: LD_VAR 0 54
27824: PUSH
27825: LD_VAR 0 55
27829: PUSH
27830: LD_VAR 0 56
27834: PUSH
27835: LD_VAR 0 57
27839: PUSH
27840: LD_VAR 0 58
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: PUSH
27853: LD_VAR 0 4
27857: PUSH
27858: LD_INT 1
27860: PLUS
27861: ARRAY
27862: ST_TO_ADDR
27863: GO 27972
27865: LD_INT 31
27867: DOUBLE
27868: EQUAL
27869: IFTRUE 27915
27871: LD_INT 32
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27915
27877: LD_INT 33
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27915
27883: LD_INT 27
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27915
27889: LD_INT 26
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27915
27895: LD_INT 28
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27915
27901: LD_INT 29
27903: DOUBLE
27904: EQUAL
27905: IFTRUE 27915
27907: LD_INT 30
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27915
27913: GO 27971
27915: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27916: LD_ADDR_VAR 0 9
27920: PUSH
27921: LD_VAR 0 59
27925: PUSH
27926: LD_VAR 0 60
27930: PUSH
27931: LD_VAR 0 61
27935: PUSH
27936: LD_VAR 0 62
27940: PUSH
27941: LD_VAR 0 63
27945: PUSH
27946: LD_VAR 0 64
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: PUSH
27959: LD_VAR 0 4
27963: PUSH
27964: LD_INT 1
27966: PLUS
27967: ARRAY
27968: ST_TO_ADDR
27969: GO 27972
27971: POP
// temp_list2 = [ ] ;
27972: LD_ADDR_VAR 0 10
27976: PUSH
27977: EMPTY
27978: ST_TO_ADDR
// for i in temp_list do
27979: LD_ADDR_VAR 0 8
27983: PUSH
27984: LD_VAR 0 9
27988: PUSH
27989: FOR_IN
27990: IFFALSE 28042
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27992: LD_ADDR_VAR 0 10
27996: PUSH
27997: LD_VAR 0 10
28001: PUSH
28002: LD_VAR 0 8
28006: PUSH
28007: LD_INT 1
28009: ARRAY
28010: PUSH
28011: LD_VAR 0 2
28015: PLUS
28016: PUSH
28017: LD_VAR 0 8
28021: PUSH
28022: LD_INT 2
28024: ARRAY
28025: PUSH
28026: LD_VAR 0 3
28030: PLUS
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: ADD
28039: ST_TO_ADDR
28040: GO 27989
28042: POP
28043: POP
// result = temp_list2 ;
28044: LD_ADDR_VAR 0 7
28048: PUSH
28049: LD_VAR 0 10
28053: ST_TO_ADDR
// end ;
28054: LD_VAR 0 7
28058: RET
// export function EnemyInRange ( unit , dist ) ; begin
28059: LD_INT 0
28061: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28062: LD_ADDR_VAR 0 3
28066: PUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 255
28076: PPUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 250
28086: PPUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 251
28096: PPUSH
28097: LD_VAR 0 2
28101: PPUSH
28102: CALL 3693 0 4
28106: PUSH
28107: LD_INT 4
28109: ARRAY
28110: ST_TO_ADDR
// end ;
28111: LD_VAR 0 3
28115: RET
// export function PlayerSeeMe ( unit ) ; begin
28116: LD_INT 0
28118: PPUSH
// result := See ( your_side , unit ) ;
28119: LD_ADDR_VAR 0 2
28123: PUSH
28124: LD_OWVAR 2
28128: PPUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 292
28138: ST_TO_ADDR
// end ;
28139: LD_VAR 0 2
28143: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28144: LD_INT 0
28146: PPUSH
28147: PPUSH
28148: PPUSH
28149: PPUSH
28150: PPUSH
// if not hexes then
28151: LD_VAR 0 2
28155: NOT
28156: IFFALSE 28160
// exit ;
28158: GO 28308
// dist := 9999 ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: LD_INT 9999
28167: ST_TO_ADDR
// for i = 1 to hexes do
28168: LD_ADDR_VAR 0 4
28172: PUSH
28173: DOUBLE
28174: LD_INT 1
28176: DEC
28177: ST_TO_ADDR
28178: LD_VAR 0 2
28182: PUSH
28183: FOR_TO
28184: IFFALSE 28296
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28186: LD_VAR 0 1
28190: PPUSH
28191: LD_VAR 0 2
28195: PUSH
28196: LD_VAR 0 4
28200: ARRAY
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: LD_VAR 0 2
28210: PUSH
28211: LD_VAR 0 4
28215: ARRAY
28216: PUSH
28217: LD_INT 2
28219: ARRAY
28220: PPUSH
28221: CALL_OW 297
28225: PUSH
28226: LD_VAR 0 5
28230: LESS
28231: IFFALSE 28294
// begin hex := hexes [ i ] ;
28233: LD_ADDR_VAR 0 7
28237: PUSH
28238: LD_VAR 0 2
28242: PUSH
28243: LD_VAR 0 4
28247: ARRAY
28248: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28249: LD_ADDR_VAR 0 5
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_VAR 0 2
28263: PUSH
28264: LD_VAR 0 4
28268: ARRAY
28269: PUSH
28270: LD_INT 1
28272: ARRAY
28273: PPUSH
28274: LD_VAR 0 2
28278: PUSH
28279: LD_VAR 0 4
28283: ARRAY
28284: PUSH
28285: LD_INT 2
28287: ARRAY
28288: PPUSH
28289: CALL_OW 297
28293: ST_TO_ADDR
// end ; end ;
28294: GO 28183
28296: POP
28297: POP
// result := hex ;
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_VAR 0 7
28307: ST_TO_ADDR
// end ;
28308: LD_VAR 0 3
28312: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28317: LD_VAR 0 1
28321: NOT
28322: PUSH
28323: LD_VAR 0 1
28327: PUSH
28328: LD_INT 21
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 23
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PPUSH
28352: CALL_OW 69
28356: IN
28357: NOT
28358: OR
28359: IFFALSE 28363
// exit ;
28361: GO 28410
// for i = 1 to 3 do
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: DOUBLE
28369: LD_INT 1
28371: DEC
28372: ST_TO_ADDR
28373: LD_INT 3
28375: PUSH
28376: FOR_TO
28377: IFFALSE 28408
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 250
28388: PPUSH
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL_OW 251
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: CALL_OW 453
28406: GO 28376
28408: POP
28409: POP
// end ;
28410: LD_VAR 0 2
28414: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28415: LD_INT 0
28417: PPUSH
28418: PPUSH
28419: PPUSH
28420: PPUSH
28421: PPUSH
28422: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28423: LD_VAR 0 1
28427: NOT
28428: PUSH
28429: LD_VAR 0 2
28433: NOT
28434: OR
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 314
28445: OR
28446: IFFALSE 28450
// exit ;
28448: GO 28891
// x := GetX ( enemy_unit ) ;
28450: LD_ADDR_VAR 0 7
28454: PUSH
28455: LD_VAR 0 2
28459: PPUSH
28460: CALL_OW 250
28464: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: CALL_OW 251
28479: ST_TO_ADDR
// if not x or not y then
28480: LD_VAR 0 7
28484: NOT
28485: PUSH
28486: LD_VAR 0 8
28490: NOT
28491: OR
28492: IFFALSE 28496
// exit ;
28494: GO 28891
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28496: LD_ADDR_VAR 0 6
28500: PUSH
28501: LD_VAR 0 7
28505: PPUSH
28506: LD_INT 0
28508: PPUSH
28509: LD_INT 4
28511: PPUSH
28512: CALL_OW 272
28516: PUSH
28517: LD_VAR 0 8
28521: PPUSH
28522: LD_INT 0
28524: PPUSH
28525: LD_INT 4
28527: PPUSH
28528: CALL_OW 273
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_VAR 0 7
28541: PPUSH
28542: LD_INT 1
28544: PPUSH
28545: LD_INT 4
28547: PPUSH
28548: CALL_OW 272
28552: PUSH
28553: LD_VAR 0 8
28557: PPUSH
28558: LD_INT 1
28560: PPUSH
28561: LD_INT 4
28563: PPUSH
28564: CALL_OW 273
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_VAR 0 7
28577: PPUSH
28578: LD_INT 2
28580: PPUSH
28581: LD_INT 4
28583: PPUSH
28584: CALL_OW 272
28588: PUSH
28589: LD_VAR 0 8
28593: PPUSH
28594: LD_INT 2
28596: PPUSH
28597: LD_INT 4
28599: PPUSH
28600: CALL_OW 273
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_VAR 0 7
28613: PPUSH
28614: LD_INT 3
28616: PPUSH
28617: LD_INT 4
28619: PPUSH
28620: CALL_OW 272
28624: PUSH
28625: LD_VAR 0 8
28629: PPUSH
28630: LD_INT 3
28632: PPUSH
28633: LD_INT 4
28635: PPUSH
28636: CALL_OW 273
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_VAR 0 7
28649: PPUSH
28650: LD_INT 4
28652: PPUSH
28653: LD_INT 4
28655: PPUSH
28656: CALL_OW 272
28660: PUSH
28661: LD_VAR 0 8
28665: PPUSH
28666: LD_INT 4
28668: PPUSH
28669: LD_INT 4
28671: PPUSH
28672: CALL_OW 273
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_VAR 0 7
28685: PPUSH
28686: LD_INT 5
28688: PPUSH
28689: LD_INT 4
28691: PPUSH
28692: CALL_OW 272
28696: PUSH
28697: LD_VAR 0 8
28701: PPUSH
28702: LD_INT 5
28704: PPUSH
28705: LD_INT 4
28707: PPUSH
28708: CALL_OW 273
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// for i = tmp downto 1 do
28725: LD_ADDR_VAR 0 4
28729: PUSH
28730: DOUBLE
28731: LD_VAR 0 6
28735: INC
28736: ST_TO_ADDR
28737: LD_INT 1
28739: PUSH
28740: FOR_DOWNTO
28741: IFFALSE 28842
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28743: LD_VAR 0 6
28747: PUSH
28748: LD_VAR 0 4
28752: ARRAY
28753: PUSH
28754: LD_INT 1
28756: ARRAY
28757: PPUSH
28758: LD_VAR 0 6
28762: PUSH
28763: LD_VAR 0 4
28767: ARRAY
28768: PUSH
28769: LD_INT 2
28771: ARRAY
28772: PPUSH
28773: CALL_OW 488
28777: NOT
28778: PUSH
28779: LD_VAR 0 6
28783: PUSH
28784: LD_VAR 0 4
28788: ARRAY
28789: PUSH
28790: LD_INT 1
28792: ARRAY
28793: PPUSH
28794: LD_VAR 0 6
28798: PUSH
28799: LD_VAR 0 4
28803: ARRAY
28804: PUSH
28805: LD_INT 2
28807: ARRAY
28808: PPUSH
28809: CALL_OW 428
28813: PUSH
28814: LD_INT 0
28816: NONEQUAL
28817: OR
28818: IFFALSE 28840
// tmp := Delete ( tmp , i ) ;
28820: LD_ADDR_VAR 0 6
28824: PUSH
28825: LD_VAR 0 6
28829: PPUSH
28830: LD_VAR 0 4
28834: PPUSH
28835: CALL_OW 3
28839: ST_TO_ADDR
28840: GO 28740
28842: POP
28843: POP
// j := GetClosestHex ( unit , tmp ) ;
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_VAR 0 6
28858: PPUSH
28859: CALL 28144 0 2
28863: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28864: LD_VAR 0 1
28868: PPUSH
28869: LD_VAR 0 5
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: PPUSH
28878: LD_VAR 0 5
28882: PUSH
28883: LD_INT 2
28885: ARRAY
28886: PPUSH
28887: CALL_OW 111
// end ;
28891: LD_VAR 0 3
28895: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28896: LD_INT 0
28898: PPUSH
28899: PPUSH
28900: PPUSH
28901: PPUSH
// uc_side = 0 ;
28902: LD_ADDR_OWVAR 20
28906: PUSH
28907: LD_INT 0
28909: ST_TO_ADDR
// uc_nation = 0 ;
28910: LD_ADDR_OWVAR 21
28914: PUSH
28915: LD_INT 0
28917: ST_TO_ADDR
// nat_area := natureArea ;
28918: LD_ADDR_VAR 0 4
28922: PUSH
28923: LD_INT 18
28925: ST_TO_ADDR
// InitHc ;
28926: CALL_OW 19
// for i = 1 to 4 do
28930: LD_ADDR_VAR 0 2
28934: PUSH
28935: DOUBLE
28936: LD_INT 1
28938: DEC
28939: ST_TO_ADDR
28940: LD_INT 4
28942: PUSH
28943: FOR_TO
28944: IFFALSE 28991
// begin hc_class = 18 ;
28946: LD_ADDR_OWVAR 28
28950: PUSH
28951: LD_INT 18
28953: ST_TO_ADDR
// hc_gallery =  ;
28954: LD_ADDR_OWVAR 33
28958: PUSH
28959: LD_STRING 
28961: ST_TO_ADDR
// animal := CreateHuman ;
28962: LD_ADDR_VAR 0 3
28966: PUSH
28967: CALL_OW 44
28971: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28972: LD_VAR 0 3
28976: PPUSH
28977: LD_VAR 0 4
28981: PPUSH
28982: LD_INT 0
28984: PPUSH
28985: CALL_OW 49
// end ;
28989: GO 28943
28991: POP
28992: POP
// for i = 1 to 3 do
28993: LD_ADDR_VAR 0 2
28997: PUSH
28998: DOUBLE
28999: LD_INT 1
29001: DEC
29002: ST_TO_ADDR
29003: LD_INT 3
29005: PUSH
29006: FOR_TO
29007: IFFALSE 29071
// begin hc_class = class_tiger ;
29009: LD_ADDR_OWVAR 28
29013: PUSH
29014: LD_INT 14
29016: ST_TO_ADDR
// hc_gallery =  ;
29017: LD_ADDR_OWVAR 33
29021: PUSH
29022: LD_STRING 
29024: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29025: LD_ADDR_OWVAR 35
29029: PUSH
29030: LD_INT 5
29032: NEG
29033: PPUSH
29034: LD_INT 5
29036: PPUSH
29037: CALL_OW 12
29041: ST_TO_ADDR
// animal := CreateHuman ;
29042: LD_ADDR_VAR 0 3
29046: PUSH
29047: CALL_OW 44
29051: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29052: LD_VAR 0 3
29056: PPUSH
29057: LD_VAR 0 4
29061: PPUSH
29062: LD_INT 0
29064: PPUSH
29065: CALL_OW 49
// end ;
29069: GO 29006
29071: POP
29072: POP
// for i = 1 to 5 do
29073: LD_ADDR_VAR 0 2
29077: PUSH
29078: DOUBLE
29079: LD_INT 1
29081: DEC
29082: ST_TO_ADDR
29083: LD_INT 5
29085: PUSH
29086: FOR_TO
29087: IFFALSE 29190
// begin hc_class = class_apeman ;
29089: LD_ADDR_OWVAR 28
29093: PUSH
29094: LD_INT 12
29096: ST_TO_ADDR
// hc_gallery =  ;
29097: LD_ADDR_OWVAR 33
29101: PUSH
29102: LD_STRING 
29104: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29105: LD_ADDR_OWVAR 35
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PPUSH
29114: LD_INT 2
29116: PPUSH
29117: CALL_OW 12
29121: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29122: LD_ADDR_OWVAR 31
29126: PUSH
29127: LD_INT 1
29129: PPUSH
29130: LD_INT 3
29132: PPUSH
29133: CALL_OW 12
29137: PUSH
29138: LD_INT 1
29140: PPUSH
29141: LD_INT 3
29143: PPUSH
29144: CALL_OW 12
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// animal := CreateHuman ;
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: CALL_OW 44
29170: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29171: LD_VAR 0 3
29175: PPUSH
29176: LD_VAR 0 4
29180: PPUSH
29181: LD_INT 0
29183: PPUSH
29184: CALL_OW 49
// end ;
29188: GO 29086
29190: POP
29191: POP
// for i = 1 to 3 do
29192: LD_ADDR_VAR 0 2
29196: PUSH
29197: DOUBLE
29198: LD_INT 1
29200: DEC
29201: ST_TO_ADDR
29202: LD_INT 3
29204: PUSH
29205: FOR_TO
29206: IFFALSE 29253
// begin hc_class = 13 ;
29208: LD_ADDR_OWVAR 28
29212: PUSH
29213: LD_INT 13
29215: ST_TO_ADDR
// hc_gallery =  ;
29216: LD_ADDR_OWVAR 33
29220: PUSH
29221: LD_STRING 
29223: ST_TO_ADDR
// animal := CreateHuman ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: CALL_OW 44
29233: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29234: LD_VAR 0 3
29238: PPUSH
29239: LD_VAR 0 4
29243: PPUSH
29244: LD_INT 0
29246: PPUSH
29247: CALL_OW 49
// end ;
29251: GO 29205
29253: POP
29254: POP
// for i = 1 to 7 do
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: DOUBLE
29261: LD_INT 1
29263: DEC
29264: ST_TO_ADDR
29265: LD_INT 7
29267: PUSH
29268: FOR_TO
29269: IFFALSE 29314
// begin hc_class = 20 ;
29271: LD_ADDR_OWVAR 28
29275: PUSH
29276: LD_INT 20
29278: ST_TO_ADDR
// hc_gallery =  ;
29279: LD_ADDR_OWVAR 33
29283: PUSH
29284: LD_STRING 
29286: ST_TO_ADDR
// animal := CreateHuman ;
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: CALL_OW 44
29296: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29297: LD_VAR 0 3
29301: PPUSH
29302: LD_INT 19
29304: PPUSH
29305: LD_INT 0
29307: PPUSH
29308: CALL_OW 49
// end ;
29312: GO 29268
29314: POP
29315: POP
// end ;
29316: LD_VAR 0 1
29320: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not list then
29349: LD_VAR 0 1
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 32399
// base := list [ 1 ] ;
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_VAR 0 1
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: ST_TO_ADDR
// group := list [ 2 ] ;
29372: LD_ADDR_VAR 0 4
29376: PUSH
29377: LD_VAR 0 1
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: ST_TO_ADDR
// path := list [ 3 ] ;
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: LD_VAR 0 1
29395: PUSH
29396: LD_INT 3
29398: ARRAY
29399: ST_TO_ADDR
// flags := list [ 4 ] ;
29400: LD_ADDR_VAR 0 6
29404: PUSH
29405: LD_VAR 0 1
29409: PUSH
29410: LD_INT 4
29412: ARRAY
29413: ST_TO_ADDR
// mined := [ ] ;
29414: LD_ADDR_VAR 0 25
29418: PUSH
29419: EMPTY
29420: ST_TO_ADDR
// bombed := [ ] ;
29421: LD_ADDR_VAR 0 26
29425: PUSH
29426: EMPTY
29427: ST_TO_ADDR
// if not group or not path then
29428: LD_VAR 0 4
29432: NOT
29433: PUSH
29434: LD_VAR 0 5
29438: NOT
29439: OR
29440: IFFALSE 29444
// exit ;
29442: GO 32399
// if flags then
29444: LD_VAR 0 6
29448: IFFALSE 29592
// begin f_ignore_area := flags [ 1 ] ;
29450: LD_ADDR_VAR 0 15
29454: PUSH
29455: LD_VAR 0 6
29459: PUSH
29460: LD_INT 1
29462: ARRAY
29463: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29464: LD_ADDR_VAR 0 16
29468: PUSH
29469: LD_VAR 0 6
29473: PUSH
29474: LD_INT 2
29476: ARRAY
29477: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29478: LD_ADDR_VAR 0 17
29482: PUSH
29483: LD_VAR 0 6
29487: PUSH
29488: LD_INT 3
29490: ARRAY
29491: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29492: LD_ADDR_VAR 0 18
29496: PUSH
29497: LD_VAR 0 6
29501: PUSH
29502: LD_INT 4
29504: ARRAY
29505: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29506: LD_ADDR_VAR 0 19
29510: PUSH
29511: LD_VAR 0 6
29515: PUSH
29516: LD_INT 5
29518: ARRAY
29519: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29520: LD_ADDR_VAR 0 20
29524: PUSH
29525: LD_VAR 0 6
29529: PUSH
29530: LD_INT 6
29532: ARRAY
29533: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29534: LD_ADDR_VAR 0 21
29538: PUSH
29539: LD_VAR 0 6
29543: PUSH
29544: LD_INT 7
29546: ARRAY
29547: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29548: LD_ADDR_VAR 0 22
29552: PUSH
29553: LD_VAR 0 6
29557: PUSH
29558: LD_INT 8
29560: ARRAY
29561: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29562: LD_ADDR_VAR 0 23
29566: PUSH
29567: LD_VAR 0 6
29571: PUSH
29572: LD_INT 9
29574: ARRAY
29575: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29576: LD_ADDR_VAR 0 24
29580: PUSH
29581: LD_VAR 0 6
29585: PUSH
29586: LD_INT 10
29588: ARRAY
29589: ST_TO_ADDR
// end else
29590: GO 29672
// begin f_ignore_area := false ;
29592: LD_ADDR_VAR 0 15
29596: PUSH
29597: LD_INT 0
29599: ST_TO_ADDR
// f_capture := false ;
29600: LD_ADDR_VAR 0 16
29604: PUSH
29605: LD_INT 0
29607: ST_TO_ADDR
// f_ignore_civ := false ;
29608: LD_ADDR_VAR 0 17
29612: PUSH
29613: LD_INT 0
29615: ST_TO_ADDR
// f_murder := false ;
29616: LD_ADDR_VAR 0 18
29620: PUSH
29621: LD_INT 0
29623: ST_TO_ADDR
// f_mines := false ;
29624: LD_ADDR_VAR 0 19
29628: PUSH
29629: LD_INT 0
29631: ST_TO_ADDR
// f_repair := false ;
29632: LD_ADDR_VAR 0 20
29636: PUSH
29637: LD_INT 0
29639: ST_TO_ADDR
// f_heal := false ;
29640: LD_ADDR_VAR 0 21
29644: PUSH
29645: LD_INT 0
29647: ST_TO_ADDR
// f_spacetime := false ;
29648: LD_ADDR_VAR 0 22
29652: PUSH
29653: LD_INT 0
29655: ST_TO_ADDR
// f_attack_depot := false ;
29656: LD_ADDR_VAR 0 23
29660: PUSH
29661: LD_INT 0
29663: ST_TO_ADDR
// f_crawl := false ;
29664: LD_ADDR_VAR 0 24
29668: PUSH
29669: LD_INT 0
29671: ST_TO_ADDR
// end ; units_path := [ ] ;
29672: LD_ADDR_VAR 0 14
29676: PUSH
29677: EMPTY
29678: ST_TO_ADDR
// for i = 1 to group do
29679: LD_ADDR_VAR 0 7
29683: PUSH
29684: DOUBLE
29685: LD_INT 1
29687: DEC
29688: ST_TO_ADDR
29689: LD_VAR 0 4
29693: PUSH
29694: FOR_TO
29695: IFFALSE 29724
// begin units_path := Replace ( units_path , i , path ) ;
29697: LD_ADDR_VAR 0 14
29701: PUSH
29702: LD_VAR 0 14
29706: PPUSH
29707: LD_VAR 0 7
29711: PPUSH
29712: LD_VAR 0 5
29716: PPUSH
29717: CALL_OW 1
29721: ST_TO_ADDR
// end ;
29722: GO 29694
29724: POP
29725: POP
// repeat for i = group downto 1 do
29726: LD_ADDR_VAR 0 7
29730: PUSH
29731: DOUBLE
29732: LD_VAR 0 4
29736: INC
29737: ST_TO_ADDR
29738: LD_INT 1
29740: PUSH
29741: FOR_DOWNTO
29742: IFFALSE 32381
// begin tmp := [ ] ;
29744: LD_ADDR_VAR 0 12
29748: PUSH
29749: EMPTY
29750: ST_TO_ADDR
// attacking := false ;
29751: LD_ADDR_VAR 0 27
29755: PUSH
29756: LD_INT 0
29758: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29759: LD_VAR 0 4
29763: PUSH
29764: LD_VAR 0 7
29768: ARRAY
29769: PPUSH
29770: CALL_OW 301
29774: PUSH
29775: LD_VAR 0 4
29779: PUSH
29780: LD_VAR 0 7
29784: ARRAY
29785: NOT
29786: OR
29787: IFFALSE 29831
// begin group := Delete ( group , i ) ;
29789: LD_ADDR_VAR 0 4
29793: PUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: LD_VAR 0 7
29803: PPUSH
29804: CALL_OW 3
29808: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29809: LD_ADDR_VAR 0 14
29813: PUSH
29814: LD_VAR 0 14
29818: PPUSH
29819: LD_VAR 0 7
29823: PPUSH
29824: CALL_OW 3
29828: ST_TO_ADDR
// continue ;
29829: GO 29741
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29831: LD_VAR 0 4
29835: PUSH
29836: LD_VAR 0 7
29840: ARRAY
29841: PPUSH
29842: LD_INT 10
29844: PPUSH
29845: CALL 28059 0 2
29849: NOT
29850: PUSH
29851: LD_VAR 0 14
29855: PUSH
29856: LD_VAR 0 7
29860: ARRAY
29861: PUSH
29862: EMPTY
29863: EQUAL
29864: NOT
29865: AND
29866: IFFALSE 30150
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29868: LD_VAR 0 4
29872: PUSH
29873: LD_VAR 0 7
29877: ARRAY
29878: PPUSH
29879: CALL_OW 262
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: IN
29894: IFFALSE 29953
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29896: LD_VAR 0 4
29900: PUSH
29901: LD_VAR 0 7
29905: ARRAY
29906: PPUSH
29907: CALL_OW 261
29911: PUSH
29912: LD_INT 10
29914: LESS
29915: PUSH
29916: LD_VAR 0 4
29920: PUSH
29921: LD_VAR 0 7
29925: ARRAY
29926: PPUSH
29927: CALL 28116 0 1
29931: NOT
29932: AND
29933: IFFALSE 29953
// SetFuel ( group [ i ] , 12 ) ;
29935: LD_VAR 0 4
29939: PUSH
29940: LD_VAR 0 7
29944: ARRAY
29945: PPUSH
29946: LD_INT 12
29948: PPUSH
29949: CALL_OW 240
// if units_path [ i ] then
29953: LD_VAR 0 14
29957: PUSH
29958: LD_VAR 0 7
29962: ARRAY
29963: IFFALSE 30148
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29965: LD_VAR 0 4
29969: PUSH
29970: LD_VAR 0 7
29974: ARRAY
29975: PPUSH
29976: LD_VAR 0 14
29980: PUSH
29981: LD_VAR 0 7
29985: ARRAY
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: PUSH
29991: LD_INT 1
29993: ARRAY
29994: PPUSH
29995: LD_VAR 0 14
29999: PUSH
30000: LD_VAR 0 7
30004: ARRAY
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PUSH
30010: LD_INT 2
30012: ARRAY
30013: PPUSH
30014: CALL_OW 297
30018: PUSH
30019: LD_INT 6
30021: GREATER
30022: IFFALSE 30097
// begin if not HasTask ( group [ i ] ) then
30024: LD_VAR 0 4
30028: PUSH
30029: LD_VAR 0 7
30033: ARRAY
30034: PPUSH
30035: CALL_OW 314
30039: NOT
30040: IFFALSE 30095
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30042: LD_VAR 0 4
30046: PUSH
30047: LD_VAR 0 7
30051: ARRAY
30052: PPUSH
30053: LD_VAR 0 14
30057: PUSH
30058: LD_VAR 0 7
30062: ARRAY
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 14
30076: PUSH
30077: LD_VAR 0 7
30081: ARRAY
30082: PUSH
30083: LD_INT 1
30085: ARRAY
30086: PUSH
30087: LD_INT 2
30089: ARRAY
30090: PPUSH
30091: CALL_OW 114
// end else
30095: GO 30148
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30097: LD_ADDR_VAR 0 13
30101: PUSH
30102: LD_VAR 0 14
30106: PUSH
30107: LD_VAR 0 7
30111: ARRAY
30112: PPUSH
30113: LD_INT 1
30115: PPUSH
30116: CALL_OW 3
30120: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30121: LD_ADDR_VAR 0 14
30125: PUSH
30126: LD_VAR 0 14
30130: PPUSH
30131: LD_VAR 0 7
30135: PPUSH
30136: LD_VAR 0 13
30140: PPUSH
30141: CALL_OW 1
30145: ST_TO_ADDR
// continue ;
30146: GO 29741
// end ; end ; end else
30148: GO 32379
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30150: LD_ADDR_VAR 0 12
30154: PUSH
30155: LD_INT 81
30157: PUSH
30158: LD_VAR 0 4
30162: PUSH
30163: LD_VAR 0 7
30167: ARRAY
30168: PPUSH
30169: CALL_OW 255
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 69
30182: ST_TO_ADDR
// if not tmp then
30183: LD_VAR 0 12
30187: NOT
30188: IFFALSE 30192
// continue ;
30190: GO 29741
// if f_ignore_area then
30192: LD_VAR 0 15
30196: IFFALSE 30284
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30198: LD_ADDR_VAR 0 13
30202: PUSH
30203: LD_VAR 0 12
30207: PPUSH
30208: LD_INT 3
30210: PUSH
30211: LD_INT 92
30213: PUSH
30214: LD_VAR 0 15
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PUSH
30223: LD_VAR 0 15
30227: PUSH
30228: LD_INT 2
30230: ARRAY
30231: PUSH
30232: LD_VAR 0 15
30236: PUSH
30237: LD_INT 3
30239: ARRAY
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 72
30255: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30256: LD_VAR 0 12
30260: PUSH
30261: LD_VAR 0 13
30265: DIFF
30266: IFFALSE 30284
// tmp := tmp diff tmp2 ;
30268: LD_ADDR_VAR 0 12
30272: PUSH
30273: LD_VAR 0 12
30277: PUSH
30278: LD_VAR 0 13
30282: DIFF
30283: ST_TO_ADDR
// end ; if not f_murder then
30284: LD_VAR 0 18
30288: NOT
30289: IFFALSE 30347
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30291: LD_ADDR_VAR 0 13
30295: PUSH
30296: LD_VAR 0 12
30300: PPUSH
30301: LD_INT 3
30303: PUSH
30304: LD_INT 50
30306: PUSH
30307: EMPTY
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PPUSH
30314: CALL_OW 72
30318: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30319: LD_VAR 0 12
30323: PUSH
30324: LD_VAR 0 13
30328: DIFF
30329: IFFALSE 30347
// tmp := tmp diff tmp2 ;
30331: LD_ADDR_VAR 0 12
30335: PUSH
30336: LD_VAR 0 12
30340: PUSH
30341: LD_VAR 0 13
30345: DIFF
30346: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30347: LD_ADDR_VAR 0 12
30351: PUSH
30352: LD_VAR 0 4
30356: PUSH
30357: LD_VAR 0 7
30361: ARRAY
30362: PPUSH
30363: LD_VAR 0 12
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: LD_INT 1
30373: PPUSH
30374: CALL 3232 0 4
30378: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30379: LD_VAR 0 4
30383: PUSH
30384: LD_VAR 0 7
30388: ARRAY
30389: PPUSH
30390: CALL_OW 257
30394: PUSH
30395: LD_INT 1
30397: EQUAL
30398: IFFALSE 30733
// begin if WantPlant ( group [ i ] ) then
30400: LD_VAR 0 4
30404: PUSH
30405: LD_VAR 0 7
30409: ARRAY
30410: PPUSH
30411: CALL 2700 0 1
30415: IFFALSE 30419
// continue ;
30417: GO 29741
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30419: LD_VAR 0 16
30423: PUSH
30424: LD_VAR 0 4
30428: PUSH
30429: LD_VAR 0 7
30433: ARRAY
30434: PPUSH
30435: CALL_OW 310
30439: NOT
30440: AND
30441: PUSH
30442: LD_VAR 0 12
30446: PUSH
30447: LD_INT 1
30449: ARRAY
30450: PUSH
30451: LD_VAR 0 12
30455: PPUSH
30456: LD_INT 21
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 58
30468: PUSH
30469: EMPTY
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: CALL_OW 72
30480: IN
30481: AND
30482: IFFALSE 30518
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30484: LD_VAR 0 4
30488: PUSH
30489: LD_VAR 0 7
30493: ARRAY
30494: PPUSH
30495: LD_VAR 0 12
30499: PUSH
30500: LD_INT 1
30502: ARRAY
30503: PPUSH
30504: CALL_OW 120
// attacking := true ;
30508: LD_ADDR_VAR 0 27
30512: PUSH
30513: LD_INT 1
30515: ST_TO_ADDR
// continue ;
30516: GO 29741
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30518: LD_VAR 0 24
30522: PUSH
30523: LD_VAR 0 4
30527: PUSH
30528: LD_VAR 0 7
30532: ARRAY
30533: PPUSH
30534: CALL_OW 256
30538: PUSH
30539: LD_INT 800
30541: LESS
30542: AND
30543: PUSH
30544: LD_VAR 0 4
30548: PUSH
30549: LD_VAR 0 7
30553: ARRAY
30554: PPUSH
30555: CALL_OW 318
30559: NOT
30560: AND
30561: IFFALSE 30578
// ComCrawl ( group [ i ] ) ;
30563: LD_VAR 0 4
30567: PUSH
30568: LD_VAR 0 7
30572: ARRAY
30573: PPUSH
30574: CALL_OW 137
// if f_mines then
30578: LD_VAR 0 19
30582: IFFALSE 30733
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30584: LD_VAR 0 12
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: PPUSH
30593: CALL_OW 247
30597: PUSH
30598: LD_INT 3
30600: EQUAL
30601: PUSH
30602: LD_VAR 0 12
30606: PUSH
30607: LD_INT 1
30609: ARRAY
30610: PUSH
30611: LD_VAR 0 25
30615: IN
30616: NOT
30617: AND
30618: IFFALSE 30733
// begin ComPlaceDelayedCharge ( group [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , tmp [ 1 ] ) ;
30620: LD_VAR 0 4
30624: PUSH
30625: LD_VAR 0 7
30629: ARRAY
30630: PPUSH
30631: LD_VAR 0 12
30635: PUSH
30636: LD_INT 1
30638: ARRAY
30639: PPUSH
30640: CALL_OW 250
30644: PPUSH
30645: LD_VAR 0 12
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: PPUSH
30654: CALL_OW 251
30658: PPUSH
30659: LD_VAR 0 12
30663: PUSH
30664: LD_INT 1
30666: ARRAY
30667: PPUSH
30668: CALL_OW 132
// AddComWait ( group [ i ] , 0 0$2 ) ;
30672: LD_VAR 0 4
30676: PUSH
30677: LD_VAR 0 7
30681: ARRAY
30682: PPUSH
30683: LD_INT 70
30685: PPUSH
30686: CALL_OW 202
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30690: LD_ADDR_VAR 0 25
30694: PUSH
30695: LD_VAR 0 25
30699: PPUSH
30700: LD_VAR 0 25
30704: PUSH
30705: LD_INT 1
30707: PLUS
30708: PPUSH
30709: LD_VAR 0 12
30713: PUSH
30714: LD_INT 1
30716: ARRAY
30717: PPUSH
30718: CALL_OW 1
30722: ST_TO_ADDR
// attacking := true ;
30723: LD_ADDR_VAR 0 27
30727: PUSH
30728: LD_INT 1
30730: ST_TO_ADDR
// continue ;
30731: GO 29741
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30733: LD_VAR 0 4
30737: PUSH
30738: LD_VAR 0 7
30742: ARRAY
30743: PPUSH
30744: CALL_OW 257
30748: PUSH
30749: LD_INT 17
30751: EQUAL
30752: IFFALSE 30880
// begin attacking := false ;
30754: LD_ADDR_VAR 0 27
30758: PUSH
30759: LD_INT 0
30761: ST_TO_ADDR
// k := 5 ;
30762: LD_ADDR_VAR 0 9
30766: PUSH
30767: LD_INT 5
30769: ST_TO_ADDR
// if tmp < k then
30770: LD_VAR 0 12
30774: PUSH
30775: LD_VAR 0 9
30779: LESS
30780: IFFALSE 30792
// k := tmp ;
30782: LD_ADDR_VAR 0 9
30786: PUSH
30787: LD_VAR 0 12
30791: ST_TO_ADDR
// for j = 1 to k do
30792: LD_ADDR_VAR 0 8
30796: PUSH
30797: DOUBLE
30798: LD_INT 1
30800: DEC
30801: ST_TO_ADDR
30802: LD_VAR 0 9
30806: PUSH
30807: FOR_TO
30808: IFFALSE 30878
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30810: LD_VAR 0 12
30814: PUSH
30815: LD_VAR 0 8
30819: ARRAY
30820: PUSH
30821: LD_VAR 0 12
30825: PPUSH
30826: LD_INT 58
30828: PUSH
30829: EMPTY
30830: LIST
30831: PPUSH
30832: CALL_OW 72
30836: IN
30837: NOT
30838: IFFALSE 30876
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30840: LD_VAR 0 4
30844: PUSH
30845: LD_VAR 0 7
30849: ARRAY
30850: PPUSH
30851: LD_VAR 0 12
30855: PUSH
30856: LD_VAR 0 8
30860: ARRAY
30861: PPUSH
30862: CALL_OW 115
// attacking := true ;
30866: LD_ADDR_VAR 0 27
30870: PUSH
30871: LD_INT 1
30873: ST_TO_ADDR
// continue ;
30874: GO 30807
// end ; end ;
30876: GO 30807
30878: POP
30879: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
30880: LD_VAR 0 4
30884: PUSH
30885: LD_VAR 0 7
30889: ARRAY
30890: PPUSH
30891: CALL_OW 257
30895: PUSH
30896: LD_INT 8
30898: EQUAL
30899: PUSH
30900: LD_VAR 0 4
30904: PUSH
30905: LD_VAR 0 7
30909: ARRAY
30910: PPUSH
30911: CALL_OW 264
30915: PUSH
30916: LD_INT 28
30918: PUSH
30919: LD_INT 45
30921: PUSH
30922: LD_INT 7
30924: PUSH
30925: LD_INT 47
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: IN
30934: OR
30935: IFFALSE 31165
// begin attacking := false ;
30937: LD_ADDR_VAR 0 27
30941: PUSH
30942: LD_INT 0
30944: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
30945: LD_VAR 0 12
30949: PUSH
30950: LD_INT 1
30952: ARRAY
30953: PPUSH
30954: CALL_OW 266
30958: PUSH
30959: LD_INT 32
30961: PUSH
30962: LD_INT 31
30964: PUSH
30965: LD_INT 33
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: LD_INT 5
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: IN
30981: IFFALSE 31165
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
30983: LD_ADDR_VAR 0 9
30987: PUSH
30988: LD_VAR 0 12
30992: PUSH
30993: LD_INT 1
30995: ARRAY
30996: PPUSH
30997: CALL_OW 266
31001: PPUSH
31002: LD_VAR 0 12
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: PPUSH
31011: CALL_OW 250
31015: PPUSH
31016: LD_VAR 0 12
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: CALL_OW 251
31029: PPUSH
31030: LD_VAR 0 12
31034: PUSH
31035: LD_INT 1
31037: ARRAY
31038: PPUSH
31039: CALL_OW 254
31043: PPUSH
31044: LD_VAR 0 12
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: PPUSH
31053: CALL_OW 248
31057: PPUSH
31058: LD_INT 0
31060: PPUSH
31061: CALL 9520 0 6
31065: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31066: LD_ADDR_VAR 0 8
31070: PUSH
31071: LD_VAR 0 4
31075: PUSH
31076: LD_VAR 0 7
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 9
31086: PPUSH
31087: CALL 28144 0 2
31091: ST_TO_ADDR
// if j then
31092: LD_VAR 0 8
31096: IFFALSE 31165
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31098: LD_VAR 0 8
31102: PUSH
31103: LD_INT 1
31105: ARRAY
31106: PPUSH
31107: LD_VAR 0 8
31111: PUSH
31112: LD_INT 2
31114: ARRAY
31115: PPUSH
31116: CALL_OW 488
31120: IFFALSE 31165
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31122: LD_VAR 0 4
31126: PUSH
31127: LD_VAR 0 7
31131: ARRAY
31132: PPUSH
31133: LD_VAR 0 8
31137: PUSH
31138: LD_INT 1
31140: ARRAY
31141: PPUSH
31142: LD_VAR 0 8
31146: PUSH
31147: LD_INT 2
31149: ARRAY
31150: PPUSH
31151: CALL_OW 116
// attacking := true ;
31155: LD_ADDR_VAR 0 27
31159: PUSH
31160: LD_INT 1
31162: ST_TO_ADDR
// continue ;
31163: GO 29741
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31165: LD_VAR 0 4
31169: PUSH
31170: LD_VAR 0 7
31174: ARRAY
31175: PPUSH
31176: CALL_OW 265
31180: PUSH
31181: LD_INT 11
31183: EQUAL
31184: IFFALSE 31462
// begin k := 10 ;
31186: LD_ADDR_VAR 0 9
31190: PUSH
31191: LD_INT 10
31193: ST_TO_ADDR
// x := 0 ;
31194: LD_ADDR_VAR 0 10
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// if tmp < k then
31202: LD_VAR 0 12
31206: PUSH
31207: LD_VAR 0 9
31211: LESS
31212: IFFALSE 31224
// k := tmp ;
31214: LD_ADDR_VAR 0 9
31218: PUSH
31219: LD_VAR 0 12
31223: ST_TO_ADDR
// for j = k downto 1 do
31224: LD_ADDR_VAR 0 8
31228: PUSH
31229: DOUBLE
31230: LD_VAR 0 9
31234: INC
31235: ST_TO_ADDR
31236: LD_INT 1
31238: PUSH
31239: FOR_DOWNTO
31240: IFFALSE 31315
// begin if GetType ( tmp [ j ] ) = unit_human then
31242: LD_VAR 0 12
31246: PUSH
31247: LD_VAR 0 8
31251: ARRAY
31252: PPUSH
31253: CALL_OW 247
31257: PUSH
31258: LD_INT 1
31260: EQUAL
31261: IFFALSE 31313
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31263: LD_VAR 0 4
31267: PUSH
31268: LD_VAR 0 7
31272: ARRAY
31273: PPUSH
31274: LD_VAR 0 12
31278: PUSH
31279: LD_VAR 0 8
31283: ARRAY
31284: PPUSH
31285: CALL 28415 0 2
// x := tmp [ j ] ;
31289: LD_ADDR_VAR 0 10
31293: PUSH
31294: LD_VAR 0 12
31298: PUSH
31299: LD_VAR 0 8
31303: ARRAY
31304: ST_TO_ADDR
// attacking := true ;
31305: LD_ADDR_VAR 0 27
31309: PUSH
31310: LD_INT 1
31312: ST_TO_ADDR
// end ; end ;
31313: GO 31239
31315: POP
31316: POP
// if not x then
31317: LD_VAR 0 10
31321: NOT
31322: IFFALSE 31462
// begin attacking := true ;
31324: LD_ADDR_VAR 0 27
31328: PUSH
31329: LD_INT 1
31331: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31332: LD_VAR 0 4
31336: PUSH
31337: LD_VAR 0 7
31341: ARRAY
31342: PPUSH
31343: CALL_OW 250
31347: PPUSH
31348: LD_VAR 0 4
31352: PUSH
31353: LD_VAR 0 7
31357: ARRAY
31358: PPUSH
31359: CALL_OW 251
31363: PPUSH
31364: CALL 1958 0 2
31368: PUSH
31369: LD_INT 2
31371: ARRAY
31372: PUSH
31373: LD_VAR 0 12
31377: PUSH
31378: LD_INT 1
31380: ARRAY
31381: PPUSH
31382: CALL_OW 250
31386: PPUSH
31387: LD_VAR 0 12
31391: PUSH
31392: LD_INT 1
31394: ARRAY
31395: PPUSH
31396: CALL_OW 251
31400: PPUSH
31401: CALL 1958 0 2
31405: PUSH
31406: LD_INT 2
31408: ARRAY
31409: EQUAL
31410: IFFALSE 31438
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31412: LD_VAR 0 4
31416: PUSH
31417: LD_VAR 0 7
31421: ARRAY
31422: PPUSH
31423: LD_VAR 0 12
31427: PUSH
31428: LD_INT 1
31430: ARRAY
31431: PPUSH
31432: CALL 28415 0 2
31436: GO 31462
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31438: LD_VAR 0 4
31442: PUSH
31443: LD_VAR 0 7
31447: ARRAY
31448: PPUSH
31449: LD_VAR 0 12
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: PPUSH
31458: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31462: LD_VAR 0 4
31466: PUSH
31467: LD_VAR 0 7
31471: ARRAY
31472: PPUSH
31473: CALL_OW 264
31477: PUSH
31478: LD_INT 29
31480: EQUAL
31481: IFFALSE 31847
// begin if WantsToAttack ( group [ i ] ) in bombed then
31483: LD_VAR 0 4
31487: PUSH
31488: LD_VAR 0 7
31492: ARRAY
31493: PPUSH
31494: CALL_OW 319
31498: PUSH
31499: LD_VAR 0 26
31503: IN
31504: IFFALSE 31508
// continue ;
31506: GO 29741
// k := 8 ;
31508: LD_ADDR_VAR 0 9
31512: PUSH
31513: LD_INT 8
31515: ST_TO_ADDR
// x := 0 ;
31516: LD_ADDR_VAR 0 10
31520: PUSH
31521: LD_INT 0
31523: ST_TO_ADDR
// if tmp < k then
31524: LD_VAR 0 12
31528: PUSH
31529: LD_VAR 0 9
31533: LESS
31534: IFFALSE 31546
// k := tmp ;
31536: LD_ADDR_VAR 0 9
31540: PUSH
31541: LD_VAR 0 12
31545: ST_TO_ADDR
// for j = 1 to k do
31546: LD_ADDR_VAR 0 8
31550: PUSH
31551: DOUBLE
31552: LD_INT 1
31554: DEC
31555: ST_TO_ADDR
31556: LD_VAR 0 9
31560: PUSH
31561: FOR_TO
31562: IFFALSE 31694
// begin if GetType ( tmp [ j ] ) = unit_building then
31564: LD_VAR 0 12
31568: PUSH
31569: LD_VAR 0 8
31573: ARRAY
31574: PPUSH
31575: CALL_OW 247
31579: PUSH
31580: LD_INT 3
31582: EQUAL
31583: IFFALSE 31692
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31585: LD_VAR 0 12
31589: PUSH
31590: LD_VAR 0 8
31594: ARRAY
31595: PUSH
31596: LD_VAR 0 26
31600: IN
31601: NOT
31602: PUSH
31603: LD_VAR 0 12
31607: PUSH
31608: LD_VAR 0 8
31612: ARRAY
31613: PPUSH
31614: CALL_OW 313
31618: AND
31619: IFFALSE 31692
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31621: LD_VAR 0 4
31625: PUSH
31626: LD_VAR 0 7
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 12
31636: PUSH
31637: LD_VAR 0 8
31641: ARRAY
31642: PPUSH
31643: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31647: LD_ADDR_VAR 0 26
31651: PUSH
31652: LD_VAR 0 26
31656: PPUSH
31657: LD_VAR 0 26
31661: PUSH
31662: LD_INT 1
31664: PLUS
31665: PPUSH
31666: LD_VAR 0 12
31670: PUSH
31671: LD_VAR 0 8
31675: ARRAY
31676: PPUSH
31677: CALL_OW 1
31681: ST_TO_ADDR
// attacking := true ;
31682: LD_ADDR_VAR 0 27
31686: PUSH
31687: LD_INT 1
31689: ST_TO_ADDR
// break ;
31690: GO 31694
// end ; end ;
31692: GO 31561
31694: POP
31695: POP
// if not attacking and f_attack_depot then
31696: LD_VAR 0 27
31700: NOT
31701: PUSH
31702: LD_VAR 0 23
31706: AND
31707: IFFALSE 31802
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31709: LD_ADDR_VAR 0 11
31713: PUSH
31714: LD_VAR 0 12
31718: PPUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 30
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 30
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: PPUSH
31747: CALL_OW 72
31751: ST_TO_ADDR
// if z then
31752: LD_VAR 0 11
31756: IFFALSE 31802
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31758: LD_VAR 0 4
31762: PUSH
31763: LD_VAR 0 7
31767: ARRAY
31768: PPUSH
31769: LD_VAR 0 11
31773: PPUSH
31774: LD_VAR 0 4
31778: PUSH
31779: LD_VAR 0 7
31783: ARRAY
31784: PPUSH
31785: CALL_OW 74
31789: PPUSH
31790: CALL_OW 115
// attacking := true ;
31794: LD_ADDR_VAR 0 27
31798: PUSH
31799: LD_INT 1
31801: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31802: LD_VAR 0 4
31806: PUSH
31807: LD_VAR 0 7
31811: ARRAY
31812: PPUSH
31813: CALL_OW 256
31817: PUSH
31818: LD_INT 500
31820: LESS
31821: IFFALSE 31847
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31823: LD_VAR 0 4
31827: PUSH
31828: LD_VAR 0 7
31832: ARRAY
31833: PPUSH
31834: LD_VAR 0 12
31838: PUSH
31839: LD_INT 1
31841: ARRAY
31842: PPUSH
31843: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31847: LD_VAR 0 4
31851: PUSH
31852: LD_VAR 0 7
31856: ARRAY
31857: PPUSH
31858: CALL_OW 256
31862: PUSH
31863: LD_INT 250
31865: LESS
31866: PUSH
31867: LD_VAR 0 4
31871: PUSH
31872: LD_VAR 0 7
31876: ARRAY
31877: PUSH
31878: LD_INT 21
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 23
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PPUSH
31902: CALL_OW 69
31906: IN
31907: AND
31908: IFFALSE 32033
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
31910: LD_ADDR_VAR 0 9
31914: PUSH
31915: LD_OWVAR 3
31919: PUSH
31920: LD_VAR 0 4
31924: PUSH
31925: LD_VAR 0 7
31929: ARRAY
31930: DIFF
31931: PPUSH
31932: LD_VAR 0 4
31936: PUSH
31937: LD_VAR 0 7
31941: ARRAY
31942: PPUSH
31943: CALL_OW 74
31947: ST_TO_ADDR
// if not k then
31948: LD_VAR 0 9
31952: NOT
31953: IFFALSE 31957
// continue ;
31955: GO 29741
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
31957: LD_VAR 0 9
31961: PUSH
31962: LD_INT 81
31964: PUSH
31965: LD_VAR 0 4
31969: PUSH
31970: LD_VAR 0 7
31974: ARRAY
31975: PPUSH
31976: CALL_OW 255
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PPUSH
31985: CALL_OW 69
31989: IN
31990: PUSH
31991: LD_VAR 0 9
31995: PPUSH
31996: LD_VAR 0 4
32000: PUSH
32001: LD_VAR 0 7
32005: ARRAY
32006: PPUSH
32007: CALL_OW 296
32011: PUSH
32012: LD_INT 5
32014: LESS
32015: AND
32016: IFFALSE 32033
// ComAutodestruct ( group [ i ] ) ;
32018: LD_VAR 0 4
32022: PUSH
32023: LD_VAR 0 7
32027: ARRAY
32028: PPUSH
32029: CALL 28313 0 1
// end ; if f_attack_depot then
32033: LD_VAR 0 23
32037: IFFALSE 32149
// begin k := 6 ;
32039: LD_ADDR_VAR 0 9
32043: PUSH
32044: LD_INT 6
32046: ST_TO_ADDR
// if tmp < k then
32047: LD_VAR 0 12
32051: PUSH
32052: LD_VAR 0 9
32056: LESS
32057: IFFALSE 32069
// k := tmp ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_VAR 0 12
32068: ST_TO_ADDR
// for j = 1 to k do
32069: LD_ADDR_VAR 0 8
32073: PUSH
32074: DOUBLE
32075: LD_INT 1
32077: DEC
32078: ST_TO_ADDR
32079: LD_VAR 0 9
32083: PUSH
32084: FOR_TO
32085: IFFALSE 32147
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32087: LD_VAR 0 8
32091: PPUSH
32092: CALL_OW 266
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: IN
32107: IFFALSE 32145
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32109: LD_VAR 0 4
32113: PUSH
32114: LD_VAR 0 7
32118: ARRAY
32119: PPUSH
32120: LD_VAR 0 12
32124: PUSH
32125: LD_VAR 0 8
32129: ARRAY
32130: PPUSH
32131: CALL_OW 115
// attacking := true ;
32135: LD_ADDR_VAR 0 27
32139: PUSH
32140: LD_INT 1
32142: ST_TO_ADDR
// break ;
32143: GO 32147
// end ;
32145: GO 32084
32147: POP
32148: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32149: LD_VAR 0 4
32153: PUSH
32154: LD_VAR 0 7
32158: ARRAY
32159: PPUSH
32160: CALL_OW 302
32164: PUSH
32165: LD_VAR 0 27
32169: NOT
32170: AND
32171: IFFALSE 32379
// begin k := 8 ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_INT 8
32180: ST_TO_ADDR
// x := 0 ;
32181: LD_ADDR_VAR 0 10
32185: PUSH
32186: LD_INT 0
32188: ST_TO_ADDR
// if tmp < k then
32189: LD_VAR 0 12
32193: PUSH
32194: LD_VAR 0 9
32198: LESS
32199: IFFALSE 32211
// k := tmp ;
32201: LD_ADDR_VAR 0 9
32205: PUSH
32206: LD_VAR 0 12
32210: ST_TO_ADDR
// for j = 1 to k do
32211: LD_ADDR_VAR 0 8
32215: PUSH
32216: DOUBLE
32217: LD_INT 1
32219: DEC
32220: ST_TO_ADDR
32221: LD_VAR 0 9
32225: PUSH
32226: FOR_TO
32227: IFFALSE 32325
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32229: LD_VAR 0 12
32233: PUSH
32234: LD_VAR 0 8
32238: ARRAY
32239: PPUSH
32240: CALL_OW 247
32244: PUSH
32245: LD_INT 1
32247: EQUAL
32248: PUSH
32249: LD_VAR 0 12
32253: PUSH
32254: LD_VAR 0 8
32258: ARRAY
32259: PPUSH
32260: CALL_OW 256
32264: PUSH
32265: LD_INT 250
32267: LESS
32268: PUSH
32269: LD_VAR 0 18
32273: AND
32274: PUSH
32275: LD_VAR 0 18
32279: NOT
32280: PUSH
32281: LD_VAR 0 12
32285: PUSH
32286: LD_VAR 0 8
32290: ARRAY
32291: PPUSH
32292: CALL_OW 256
32296: PUSH
32297: LD_INT 250
32299: GREATEREQUAL
32300: AND
32301: OR
32302: AND
32303: IFFALSE 32323
// begin x := tmp [ j ] ;
32305: LD_ADDR_VAR 0 10
32309: PUSH
32310: LD_VAR 0 12
32314: PUSH
32315: LD_VAR 0 8
32319: ARRAY
32320: ST_TO_ADDR
// break ;
32321: GO 32325
// end ;
32323: GO 32226
32325: POP
32326: POP
// if x then
32327: LD_VAR 0 10
32331: IFFALSE 32355
// ComAttackUnit ( group [ i ] , x ) else
32333: LD_VAR 0 4
32337: PUSH
32338: LD_VAR 0 7
32342: ARRAY
32343: PPUSH
32344: LD_VAR 0 10
32348: PPUSH
32349: CALL_OW 115
32353: GO 32379
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32355: LD_VAR 0 4
32359: PUSH
32360: LD_VAR 0 7
32364: ARRAY
32365: PPUSH
32366: LD_VAR 0 12
32370: PUSH
32371: LD_INT 1
32373: ARRAY
32374: PPUSH
32375: CALL_OW 115
// end ; end ; end ;
32379: GO 29741
32381: POP
32382: POP
// wait ( 0 0$1 ) ;
32383: LD_INT 35
32385: PPUSH
32386: CALL_OW 67
// until group = [ ] ;
32390: LD_VAR 0 4
32394: PUSH
32395: EMPTY
32396: EQUAL
32397: IFFALSE 29726
// end ;
32399: LD_VAR 0 2
32403: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32404: LD_INT 0
32406: PPUSH
32407: PPUSH
32408: PPUSH
32409: PPUSH
32410: PPUSH
32411: PPUSH
32412: PPUSH
// if not defenders then
32413: LD_VAR 0 2
32417: NOT
32418: IFFALSE 32422
// exit ;
32420: GO 32946
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32422: LD_ADDR_VAR 0 9
32426: PUSH
32427: LD_EXP 44
32431: PUSH
32432: LD_VAR 0 1
32436: ARRAY
32437: PPUSH
32438: LD_INT 25
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PPUSH
32448: CALL_OW 72
32452: ST_TO_ADDR
// if mechs then
32453: LD_VAR 0 9
32457: IFFALSE 32556
// for i in defenders do
32459: LD_ADDR_VAR 0 5
32463: PUSH
32464: LD_VAR 0 2
32468: PUSH
32469: FOR_IN
32470: IFFALSE 32554
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL_OW 263
32481: PUSH
32482: LD_INT 1
32484: EQUAL
32485: PUSH
32486: LD_VAR 0 5
32490: PPUSH
32491: CALL_OW 311
32495: NOT
32496: AND
32497: IFFALSE 32552
// begin un := mechs [ 1 ] ;
32499: LD_ADDR_VAR 0 7
32503: PUSH
32504: LD_VAR 0 9
32508: PUSH
32509: LD_INT 1
32511: ARRAY
32512: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32513: LD_VAR 0 7
32517: PPUSH
32518: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32522: LD_VAR 0 7
32526: PPUSH
32527: LD_VAR 0 5
32531: PPUSH
32532: CALL_OW 180
// mechs := mechs diff un ;
32536: LD_ADDR_VAR 0 9
32540: PUSH
32541: LD_VAR 0 9
32545: PUSH
32546: LD_VAR 0 7
32550: DIFF
32551: ST_TO_ADDR
// end ;
32552: GO 32469
32554: POP
32555: POP
// repeat wait ( 0 0$1 ) ;
32556: LD_INT 35
32558: PPUSH
32559: CALL_OW 67
// enemy := mc_scan [ base ] ;
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_EXP 63
32572: PUSH
32573: LD_VAR 0 1
32577: ARRAY
32578: ST_TO_ADDR
// for i in defenders do
32579: LD_ADDR_VAR 0 5
32583: PUSH
32584: LD_VAR 0 2
32588: PUSH
32589: FOR_IN
32590: IFFALSE 32736
// begin e := NearestUnitToUnit ( enemy , i ) ;
32592: LD_ADDR_VAR 0 10
32596: PUSH
32597: LD_VAR 0 3
32601: PPUSH
32602: LD_VAR 0 5
32606: PPUSH
32607: CALL_OW 74
32611: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32612: LD_VAR 0 5
32616: PPUSH
32617: CALL_OW 319
32621: NOT
32622: PUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: CALL_OW 302
32632: AND
32633: PUSH
32634: LD_VAR 0 5
32638: PPUSH
32639: LD_VAR 0 10
32643: PPUSH
32644: CALL_OW 296
32648: PUSH
32649: LD_INT 30
32651: LESS
32652: AND
32653: IFFALSE 32671
// ComAttackUnit ( i , e ) else
32655: LD_VAR 0 5
32659: PPUSH
32660: LD_VAR 0 10
32664: PPUSH
32665: CALL_OW 115
32669: GO 32734
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32671: LD_VAR 0 5
32675: PPUSH
32676: LD_VAR 0 10
32680: PPUSH
32681: CALL_OW 296
32685: PUSH
32686: LD_INT 30
32688: GREATEREQUAL
32689: PUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: LD_EXP 64
32699: PUSH
32700: LD_VAR 0 1
32704: ARRAY
32705: PPUSH
32706: CALL_OW 308
32710: NOT
32711: AND
32712: IFFALSE 32734
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32714: LD_VAR 0 5
32718: PPUSH
32719: LD_EXP 64
32723: PUSH
32724: LD_VAR 0 1
32728: ARRAY
32729: PPUSH
32730: CALL_OW 113
// end ;
32734: GO 32589
32736: POP
32737: POP
// until not enemy or not defenders ;
32738: LD_VAR 0 3
32742: NOT
32743: PUSH
32744: LD_VAR 0 2
32748: NOT
32749: OR
32750: IFFALSE 32556
// if not enemy and defenders then
32752: LD_VAR 0 3
32756: NOT
32757: PUSH
32758: LD_VAR 0 2
32762: AND
32763: IFFALSE 32921
// repeat wait ( 0 0$1 ) ;
32765: LD_INT 35
32767: PPUSH
32768: CALL_OW 67
// for i in defenders do
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_VAR 0 2
32781: PUSH
32782: FOR_IN
32783: IFFALSE 32872
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32785: LD_VAR 0 5
32789: PPUSH
32790: LD_EXP 64
32794: PUSH
32795: LD_VAR 0 1
32799: ARRAY
32800: PPUSH
32801: CALL_OW 308
32805: NOT
32806: IFFALSE 32830
// ComMoveToArea ( i , mc_parking [ base ] ) else
32808: LD_VAR 0 5
32812: PPUSH
32813: LD_EXP 64
32817: PUSH
32818: LD_VAR 0 1
32822: ARRAY
32823: PPUSH
32824: CALL_OW 113
32828: GO 32870
// if GetControl ( i ) = control_manual then
32830: LD_VAR 0 5
32834: PPUSH
32835: CALL_OW 263
32839: PUSH
32840: LD_INT 1
32842: EQUAL
32843: IFFALSE 32870
// if IsDrivenBy ( i ) then
32845: LD_VAR 0 5
32849: PPUSH
32850: CALL_OW 311
32854: IFFALSE 32870
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
32856: LD_VAR 0 5
32860: PPUSH
32861: CALL_OW 311
32865: PPUSH
32866: CALL_OW 121
// end ;
32870: GO 32782
32872: POP
32873: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
32874: LD_VAR 0 2
32878: PPUSH
32879: LD_INT 95
32881: PUSH
32882: LD_EXP 64
32886: PUSH
32887: LD_VAR 0 1
32891: ARRAY
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PPUSH
32897: CALL_OW 72
32901: PUSH
32902: LD_VAR 0 2
32906: EQUAL
32907: PUSH
32908: LD_EXP 63
32912: PUSH
32913: LD_VAR 0 1
32917: ARRAY
32918: OR
32919: IFFALSE 32765
// mc_defender := Replace ( mc_defender , base , defenders ) ;
32921: LD_ADDR_EXP 62
32925: PUSH
32926: LD_EXP 62
32930: PPUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: LD_VAR 0 2
32940: PPUSH
32941: CALL_OW 1
32945: ST_TO_ADDR
// end ;
32946: LD_VAR 0 4
32950: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
// if not base_units then
32957: LD_VAR 0 1
32961: NOT
32962: IFFALSE 32966
// exit ;
32964: GO 33053
// result := false ;
32966: LD_ADDR_VAR 0 2
32970: PUSH
32971: LD_INT 0
32973: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_VAR 0 1
32983: PPUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PPUSH
32994: CALL_OW 72
32998: ST_TO_ADDR
// if not tmp then
32999: LD_VAR 0 5
33003: NOT
33004: IFFALSE 33008
// exit ;
33006: GO 33053
// for i in tmp do
33008: LD_ADDR_VAR 0 3
33012: PUSH
33013: LD_VAR 0 5
33017: PUSH
33018: FOR_IN
33019: IFFALSE 33051
// begin result := EnemyInRange ( i , 18 ) ;
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_VAR 0 3
33030: PPUSH
33031: LD_INT 18
33033: PPUSH
33034: CALL 28059 0 2
33038: ST_TO_ADDR
// if result then
33039: LD_VAR 0 2
33043: IFFALSE 33049
// exit ;
33045: POP
33046: POP
33047: GO 33053
// end ;
33049: GO 33018
33051: POP
33052: POP
// end ;
33053: LD_VAR 0 2
33057: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33058: LD_INT 0
33060: PPUSH
33061: PPUSH
33062: PPUSH
33063: PPUSH
// result := false ;
33064: LD_ADDR_VAR 0 2
33068: PUSH
33069: LD_INT 0
33071: ST_TO_ADDR
// side := GetSide ( unit ) ;
33072: LD_ADDR_VAR 0 3
33076: PUSH
33077: LD_VAR 0 1
33081: PPUSH
33082: CALL_OW 255
33086: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33087: LD_ADDR_VAR 0 4
33091: PUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 248
33101: ST_TO_ADDR
// case nat of 1 :
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 1
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// tech := tech_lassight ; 2 :
33116: LD_ADDR_VAR 0 5
33120: PUSH
33121: LD_INT 12
33123: ST_TO_ADDR
33124: GO 33165
33126: LD_INT 2
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33145
33134: POP
// tech := tech_mortar ; 3 :
33135: LD_ADDR_VAR 0 5
33139: PUSH
33140: LD_INT 41
33142: ST_TO_ADDR
33143: GO 33165
33145: LD_INT 3
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33164
33153: POP
// tech := tech_bazooka ; end ;
33154: LD_ADDR_VAR 0 5
33158: PUSH
33159: LD_INT 44
33161: ST_TO_ADDR
33162: GO 33165
33164: POP
// if Researched ( side , tech ) then
33165: LD_VAR 0 3
33169: PPUSH
33170: LD_VAR 0 5
33174: PPUSH
33175: CALL_OW 325
33179: IFFALSE 33206
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33181: LD_ADDR_VAR 0 2
33185: PUSH
33186: LD_INT 5
33188: PUSH
33189: LD_INT 8
33191: PUSH
33192: LD_INT 9
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: PUSH
33200: LD_VAR 0 4
33204: ARRAY
33205: ST_TO_ADDR
// end ; end_of_file
33206: LD_VAR 0 2
33210: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba ; export function PrepareArabian ; var i , d , un , skill ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
33217: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33218: LD_ADDR_VAR 0 5
33222: PUSH
33223: LD_INT 6
33225: PUSH
33226: LD_INT 7
33228: PUSH
33229: LD_INT 8
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: PUSH
33237: LD_OWVAR 67
33241: ARRAY
33242: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33243: LD_INT 69
33245: PUSH
33246: EMPTY
33247: LIST
33248: PPUSH
33249: LD_INT 141
33251: PPUSH
33252: CALL_OW 169
// Wait ( 1 ) ;
33256: LD_INT 1
33258: PPUSH
33259: CALL_OW 67
// uc_side := 2 ;
33263: LD_ADDR_OWVAR 20
33267: PUSH
33268: LD_INT 2
33270: ST_TO_ADDR
// uc_nation := 2 ;
33271: LD_ADDR_OWVAR 21
33275: PUSH
33276: LD_INT 2
33278: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33279: LD_ADDR_OWVAR 37
33283: PUSH
33284: LD_INT 14
33286: ST_TO_ADDR
// vc_engine := engine_siberite ;
33287: LD_ADDR_OWVAR 39
33291: PUSH
33292: LD_INT 3
33294: ST_TO_ADDR
// vc_control := control_manual ;
33295: LD_ADDR_OWVAR 38
33299: PUSH
33300: LD_INT 1
33302: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33303: LD_ADDR_OWVAR 40
33307: PUSH
33308: LD_INT 31
33310: ST_TO_ADDR
// for i = 1 to 3 do
33311: LD_ADDR_VAR 0 2
33315: PUSH
33316: DOUBLE
33317: LD_INT 1
33319: DEC
33320: ST_TO_ADDR
33321: LD_INT 3
33323: PUSH
33324: FOR_TO
33325: IFFALSE 33409
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33327: LD_INT 0
33329: PPUSH
33330: LD_INT 3
33332: PPUSH
33333: LD_VAR 0 5
33337: PPUSH
33338: CALL_OW 380
// un := CreateVehicle ;
33342: LD_ADDR_VAR 0 4
33346: PUSH
33347: CALL_OW 45
33351: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33352: LD_VAR 0 4
33356: PPUSH
33357: LD_INT 0
33359: PPUSH
33360: LD_INT 5
33362: PPUSH
33363: CALL_OW 12
33367: PPUSH
33368: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33372: LD_VAR 0 4
33376: PPUSH
33377: LD_INT 156
33379: PPUSH
33380: LD_INT 15
33382: PPUSH
33383: LD_INT 6
33385: PPUSH
33386: LD_INT 0
33388: PPUSH
33389: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33393: CALL_OW 44
33397: PPUSH
33398: LD_VAR 0 4
33402: PPUSH
33403: CALL_OW 52
// end ;
33407: GO 33324
33409: POP
33410: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
33411: LD_ADDR_EXP 34
33415: PUSH
33416: LD_INT 94
33418: PPUSH
33419: LD_STRING dammam
33421: PPUSH
33422: LD_VAR 0 5
33426: PPUSH
33427: LD_INT 10000
33429: PUSH
33430: LD_INT 1000
33432: PUSH
33433: LD_INT 300
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: PPUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: PPUSH
33462: CALL 5990 0 5
33466: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33467: LD_ADDR_EXP 34
33471: PUSH
33472: LD_EXP 34
33476: PUSH
33477: LD_INT 122
33479: PPUSH
33480: LD_STRING 
33482: PPUSH
33483: LD_VAR 0 5
33487: PPUSH
33488: LD_INT 100
33490: PUSH
33491: LD_INT 60
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: PPUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 4
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: PPUSH
33521: CALL 5990 0 5
33525: ADD
33526: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33527: LD_ADDR_EXP 32
33531: PUSH
33532: LD_INT 45
33534: PPUSH
33535: LD_STRING jeddah
33537: PPUSH
33538: LD_VAR 0 5
33542: PPUSH
33543: LD_INT 700
33545: PUSH
33546: LD_INT 300
33548: PUSH
33549: LD_INT 10
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: PPUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 5
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL 5990 0 5
33580: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33581: LD_ADDR_EXP 33
33585: PUSH
33586: LD_INT 7
33588: PPUSH
33589: LD_STRING riyadh
33591: PPUSH
33592: LD_VAR 0 5
33596: PPUSH
33597: LD_INT 500
33599: PUSH
33600: LD_INT 60
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: PPUSH
33611: LD_INT 4
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: PPUSH
33629: CALL 5990 0 5
33633: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33634: LD_ADDR_EXP 35
33638: PUSH
33639: LD_INT 69
33641: PPUSH
33642: LD_STRING 
33644: PPUSH
33645: LD_VAR 0 5
33649: PPUSH
33650: LD_INT 500
33652: PUSH
33653: LD_INT 50
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: PPUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: PPUSH
33683: CALL 5990 0 5
33687: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
33688: LD_ADDR_EXP 44
33692: PUSH
33693: LD_EXP 34
33697: PUSH
33698: LD_EXP 32
33702: PUSH
33703: LD_EXP 35
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: LD_INT 22
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 30
33730: PUSH
33731: LD_INT 31
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 58
33740: PUSH
33741: EMPTY
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: PPUSH
33749: CALL_OW 69
33753: PUSH
33754: FOR_IN
33755: IFFALSE 33880
// begin if GetBase ( i ) then
33757: LD_VAR 0 2
33761: PPUSH
33762: CALL_OW 274
33766: IFFALSE 33770
// continue ;
33768: GO 33754
// d := GetDir ( i ) ;
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_VAR 0 2
33779: PPUSH
33780: CALL_OW 254
33784: ST_TO_ADDR
// if d < 3 then
33785: LD_VAR 0 3
33789: PUSH
33790: LD_INT 3
33792: LESS
33793: IFFALSE 33811
// d := d + 3 else
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_VAR 0 3
33804: PUSH
33805: LD_INT 3
33807: PLUS
33808: ST_TO_ADDR
33809: GO 33825
// d := d - 3 ;
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_VAR 0 3
33820: PUSH
33821: LD_INT 3
33823: MINUS
33824: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
33825: LD_INT 0
33827: PPUSH
33828: LD_INT 8
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: CALL_OW 380
// un := CreateHuman ;
33840: LD_ADDR_VAR 0 4
33844: PUSH
33845: CALL_OW 44
33849: ST_TO_ADDR
// SetDir ( un , d ) ;
33850: LD_VAR 0 4
33854: PPUSH
33855: LD_VAR 0 3
33859: PPUSH
33860: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
33864: LD_VAR 0 4
33868: PPUSH
33869: LD_VAR 0 2
33873: PPUSH
33874: CALL_OW 52
// end ;
33878: GO 33754
33880: POP
33881: POP
// if Difficulty > 1 then
33882: LD_OWVAR 67
33886: PUSH
33887: LD_INT 1
33889: GREATER
33890: IFFALSE 34261
// begin ar_kamikadze := [ ] ;
33892: LD_ADDR_EXP 38
33896: PUSH
33897: EMPTY
33898: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
33899: LD_INT 0
33901: PPUSH
33902: LD_INT 1
33904: PPUSH
33905: LD_VAR 0 5
33909: PPUSH
33910: CALL_OW 380
// un := CreateHuman ;
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: CALL_OW 44
33923: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33924: LD_VAR 0 4
33928: PPUSH
33929: LD_INT 3
33931: PPUSH
33932: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
33936: LD_VAR 0 4
33940: PPUSH
33941: LD_INT 23
33943: PPUSH
33944: LD_INT 44
33946: PPUSH
33947: LD_INT 0
33949: PPUSH
33950: CALL_OW 48
// ComCrawl ( un ) ;
33954: LD_VAR 0 4
33958: PPUSH
33959: CALL_OW 137
// un := CreateHuman ;
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: CALL_OW 44
33972: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33973: LD_VAR 0 4
33977: PPUSH
33978: LD_INT 3
33980: PPUSH
33981: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
33985: LD_VAR 0 4
33989: PPUSH
33990: LD_INT 30
33992: PPUSH
33993: LD_INT 39
33995: PPUSH
33996: LD_INT 0
33998: PPUSH
33999: CALL_OW 48
// ComCrawl ( un ) ;
34003: LD_VAR 0 4
34007: PPUSH
34008: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34012: LD_INT 0
34014: PPUSH
34015: LD_INT 17
34017: PPUSH
34018: LD_VAR 0 5
34022: PPUSH
34023: CALL_OW 380
// un := CreateHuman ;
34027: LD_ADDR_VAR 0 4
34031: PUSH
34032: CALL_OW 44
34036: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34037: LD_VAR 0 4
34041: PPUSH
34042: LD_INT 3
34044: PPUSH
34045: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34049: LD_VAR 0 4
34053: PPUSH
34054: LD_INT 45
34056: PPUSH
34057: LD_INT 86
34059: PPUSH
34060: LD_INT 0
34062: PPUSH
34063: CALL_OW 48
// ComHold ( un ) ;
34067: LD_VAR 0 4
34071: PPUSH
34072: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34076: LD_ADDR_EXP 38
34080: PUSH
34081: LD_EXP 38
34085: PPUSH
34086: LD_EXP 38
34090: PUSH
34091: LD_INT 1
34093: PLUS
34094: PPUSH
34095: LD_VAR 0 4
34099: PPUSH
34100: CALL_OW 1
34104: ST_TO_ADDR
// un := CreateHuman ;
34105: LD_ADDR_VAR 0 4
34109: PUSH
34110: CALL_OW 44
34114: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34115: LD_VAR 0 4
34119: PPUSH
34120: LD_INT 3
34122: PPUSH
34123: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34127: LD_VAR 0 4
34131: PPUSH
34132: LD_INT 60
34134: PPUSH
34135: LD_INT 85
34137: PPUSH
34138: LD_INT 0
34140: PPUSH
34141: CALL_OW 48
// ComHold ( un ) ;
34145: LD_VAR 0 4
34149: PPUSH
34150: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34154: LD_ADDR_EXP 38
34158: PUSH
34159: LD_EXP 38
34163: PPUSH
34164: LD_EXP 38
34168: PUSH
34169: LD_INT 1
34171: PLUS
34172: PPUSH
34173: LD_VAR 0 4
34177: PPUSH
34178: CALL_OW 1
34182: ST_TO_ADDR
// un := CreateHuman ;
34183: LD_ADDR_VAR 0 4
34187: PUSH
34188: CALL_OW 44
34192: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34193: LD_VAR 0 4
34197: PPUSH
34198: LD_INT 3
34200: PPUSH
34201: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34205: LD_VAR 0 4
34209: PPUSH
34210: LD_INT 222
34212: PPUSH
34213: LD_INT 166
34215: PPUSH
34216: LD_INT 0
34218: PPUSH
34219: CALL_OW 48
// ComHold ( un ) ;
34223: LD_VAR 0 4
34227: PPUSH
34228: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34232: LD_ADDR_EXP 38
34236: PUSH
34237: LD_EXP 38
34241: PPUSH
34242: LD_EXP 38
34246: PUSH
34247: LD_INT 1
34249: PLUS
34250: PPUSH
34251: LD_VAR 0 4
34255: PPUSH
34256: CALL_OW 1
34260: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34261: LD_ADDR_EXP 36
34265: PUSH
34266: EMPTY
34267: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34268: LD_INT 1
34270: PPUSH
34271: LD_INT 1
34273: PPUSH
34274: LD_VAR 0 5
34278: PPUSH
34279: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34283: LD_ADDR_OWVAR 33
34287: PUSH
34288: LD_STRING SecondCharsGal
34290: ST_TO_ADDR
// hc_face_number := 4 ;
34291: LD_ADDR_OWVAR 34
34295: PUSH
34296: LD_INT 4
34298: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34299: LD_ADDR_EXP 36
34303: PUSH
34304: LD_EXP 36
34308: PPUSH
34309: LD_INT 1
34311: PPUSH
34312: CALL_OW 44
34316: PPUSH
34317: CALL_OW 1
34321: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34322: LD_INT 2
34324: PPUSH
34325: LD_INT 4
34327: PPUSH
34328: LD_VAR 0 5
34332: PPUSH
34333: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34337: LD_ADDR_OWVAR 33
34341: PUSH
34342: LD_STRING SecondCharsGal
34344: ST_TO_ADDR
// hc_face_number := 15 ;
34345: LD_ADDR_OWVAR 34
34349: PUSH
34350: LD_INT 15
34352: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34353: LD_ADDR_EXP 36
34357: PUSH
34358: LD_EXP 36
34362: PPUSH
34363: LD_INT 2
34365: PPUSH
34366: CALL_OW 44
34370: PPUSH
34371: CALL_OW 1
34375: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34376: LD_INT 2
34378: PPUSH
34379: LD_INT 4
34381: PPUSH
34382: LD_VAR 0 5
34386: PPUSH
34387: CALL_OW 380
// hc_gallery :=  ;
34391: LD_ADDR_OWVAR 33
34395: PUSH
34396: LD_STRING 
34398: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34399: LD_ADDR_EXP 36
34403: PUSH
34404: LD_EXP 36
34408: PPUSH
34409: LD_INT 3
34411: PPUSH
34412: CALL_OW 44
34416: PPUSH
34417: CALL_OW 1
34421: ST_TO_ADDR
// hc_sex := sex_male ;
34422: LD_ADDR_OWVAR 27
34426: PUSH
34427: LD_INT 1
34429: ST_TO_ADDR
// hc_class = 11 ;
34430: LD_ADDR_OWVAR 28
34434: PUSH
34435: LD_INT 11
34437: ST_TO_ADDR
// hc_gallery = sandar ;
34438: LD_ADDR_OWVAR 33
34442: PUSH
34443: LD_STRING sandar
34445: ST_TO_ADDR
// hc_face_number = 33 ;
34446: LD_ADDR_OWVAR 34
34450: PUSH
34451: LD_INT 33
34453: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34454: LD_ADDR_OWVAR 26
34458: PUSH
34459: LD_STRING Thabit Muhair Saliba
34461: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34462: LD_ADDR_OWVAR 31
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// Saliba = CreateHuman ;
34485: LD_ADDR_EXP 40
34489: PUSH
34490: CALL_OW 44
34494: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34495: LD_EXP 40
34499: PPUSH
34500: LD_INT 7
34502: PPUSH
34503: CALL_OW 52
// ar_vehicles_tmp := [ ] ;
34507: LD_ADDR_EXP 37
34511: PUSH
34512: EMPTY
34513: ST_TO_ADDR
// for i = 1 to 4 do
34514: LD_ADDR_VAR 0 2
34518: PUSH
34519: DOUBLE
34520: LD_INT 1
34522: DEC
34523: ST_TO_ADDR
34524: LD_INT 4
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34700
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34530: LD_INT 13
34532: PUSH
34533: LD_INT 14
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PPUSH
34543: LD_INT 2
34545: PPUSH
34546: CALL_OW 12
34550: ARRAY
34551: PPUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PPUSH
34565: LD_INT 2
34567: PPUSH
34568: CALL_OW 12
34572: ARRAY
34573: PPUSH
34574: LD_INT 1
34576: PPUSH
34577: LD_INT 25
34579: PUSH
34580: LD_INT 27
34582: PUSH
34583: LD_INT 26
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PPUSH
34594: LD_INT 3
34596: PPUSH
34597: CALL_OW 12
34601: ARRAY
34602: PPUSH
34603: LD_INT 60
34605: PPUSH
34606: LD_INT 100
34608: PPUSH
34609: CALL_OW 12
34613: PPUSH
34614: CALL 2027 0 5
// un := CreateVehicle ;
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: CALL_OW 45
34627: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34628: LD_ADDR_EXP 37
34632: PUSH
34633: LD_EXP 37
34637: PPUSH
34638: LD_EXP 37
34642: PUSH
34643: LD_INT 1
34645: PLUS
34646: PPUSH
34647: LD_VAR 0 4
34651: PPUSH
34652: CALL_OW 1
34656: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34657: LD_VAR 0 4
34661: PPUSH
34662: LD_INT 0
34664: PPUSH
34665: LD_INT 5
34667: PPUSH
34668: CALL_OW 12
34672: PPUSH
34673: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
34677: LD_VAR 0 4
34681: PPUSH
34682: LD_INT 124
34684: PPUSH
34685: LD_INT 141
34687: PPUSH
34688: LD_INT 6
34690: PPUSH
34691: LD_INT 0
34693: PPUSH
34694: CALL_OW 50
// end ;
34698: GO 34527
34700: POP
34701: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
34702: LD_ADDR_EXP 39
34706: PUSH
34707: EMPTY
34708: PUSH
34709: EMPTY
34710: PUSH
34711: EMPTY
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: DOUBLE
34724: LD_INT 1
34726: DEC
34727: ST_TO_ADDR
34728: LD_INT 3
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: LD_INT 4
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: PUSH
34742: LD_OWVAR 67
34746: ARRAY
34747: PUSH
34748: FOR_TO
34749: IFFALSE 34963
// for i = 1 to 3 do
34751: LD_ADDR_VAR 0 2
34755: PUSH
34756: DOUBLE
34757: LD_INT 1
34759: DEC
34760: ST_TO_ADDR
34761: LD_INT 3
34763: PUSH
34764: FOR_TO
34765: IFFALSE 34959
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
34767: LD_INT 14
34769: PPUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PPUSH
34783: LD_INT 2
34785: PPUSH
34786: CALL_OW 12
34790: ARRAY
34791: PPUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 5
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: PPUSH
34805: LD_INT 2
34807: PPUSH
34808: CALL_OW 12
34812: ARRAY
34813: PPUSH
34814: LD_INT 25
34816: PUSH
34817: LD_INT 27
34819: PUSH
34820: LD_INT 26
34822: PUSH
34823: LD_INT 28
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PPUSH
34835: LD_INT 4
34837: PPUSH
34838: CALL_OW 12
34842: ARRAY
34843: PPUSH
34844: LD_INT 100
34846: PPUSH
34847: CALL 2027 0 5
// un := CreateVehicle ;
34851: LD_ADDR_VAR 0 4
34855: PUSH
34856: CALL_OW 45
34860: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
34861: LD_ADDR_EXP 39
34865: PUSH
34866: LD_EXP 39
34870: PPUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_EXP 39
34880: PUSH
34881: LD_VAR 0 2
34885: ARRAY
34886: PUSH
34887: LD_INT 1
34889: PLUS
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: LD_VAR 0 4
34899: PPUSH
34900: CALL 3199 0 3
34904: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34905: LD_VAR 0 4
34909: PPUSH
34910: LD_INT 0
34912: PPUSH
34913: LD_INT 5
34915: PPUSH
34916: CALL_OW 12
34920: PPUSH
34921: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
34925: LD_VAR 0 4
34929: PPUSH
34930: LD_INT 20
34932: PUSH
34933: LD_INT 21
34935: PUSH
34936: LD_INT 22
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: PUSH
34944: LD_VAR 0 2
34948: ARRAY
34949: PPUSH
34950: LD_INT 0
34952: PPUSH
34953: CALL_OW 49
// end ;
34957: GO 34764
34959: POP
34960: POP
34961: GO 34748
34963: POP
34964: POP
// InitHc ;
34965: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
34969: LD_INT 4
34971: PPUSH
34972: LD_INT 5
34974: PPUSH
34975: LD_INT 10
34977: PPUSH
34978: LD_INT 5
34980: PPUSH
34981: LD_INT 0
34983: PPUSH
34984: CALL_OW 58
// end ;
34988: LD_VAR 0 1
34992: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
34993: LD_EXP 38
34997: IFFALSE 35071
34999: GO 35001
35001: DISABLE
35002: LD_INT 0
35004: PPUSH
// begin enable ;
35005: ENABLE
// for i in ar_kamikadze do
35006: LD_ADDR_VAR 0 1
35010: PUSH
35011: LD_EXP 38
35015: PUSH
35016: FOR_IN
35017: IFFALSE 35069
// if See ( 1 , i ) then
35019: LD_INT 1
35021: PPUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 292
35031: IFFALSE 35067
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
35033: LD_VAR 0 1
35037: PPUSH
35038: LD_INT 22
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PPUSH
35048: CALL_OW 69
35052: PPUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 74
35062: PPUSH
35063: CALL_OW 115
35067: GO 35016
35069: POP
35070: POP
// end ;
35071: PPOPN 1
35073: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35074: LD_EXP 12
35078: IFFALSE 35395
35080: GO 35082
35082: DISABLE
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35089: LD_INT 35
35091: PPUSH
35092: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35096: LD_INT 1
35098: PPUSH
35099: CALL 53327 0 1
35103: PUSH
35104: LD_INT 0
35106: EQUAL
35107: IFFALSE 35089
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35109: LD_INT 1
35111: PPUSH
35112: LD_INT 14
35114: PUSH
35115: LD_INT 3
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: LD_INT 32
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: PUSH
35130: EMPTY
35131: LIST
35132: PPUSH
35133: CALL 53116 0 2
// repeat wait ( 0 0$1 ) ;
35137: LD_INT 35
35139: PPUSH
35140: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35144: LD_EXP 59
35148: PUSH
35149: LD_INT 1
35151: ARRAY
35152: PPUSH
35153: LD_INT 33
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 34
35165: PUSH
35166: LD_INT 32
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PPUSH
35177: CALL_OW 72
35181: IFFALSE 35137
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35183: LD_ADDR_VAR 0 2
35187: PUSH
35188: LD_EXP 59
35192: PUSH
35193: LD_INT 1
35195: ARRAY
35196: PPUSH
35197: LD_INT 33
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 34
35209: PUSH
35210: LD_INT 32
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PPUSH
35221: CALL_OW 72
35225: PUSH
35226: LD_INT 1
35228: ARRAY
35229: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35230: LD_ADDR_VAR 0 4
35234: PUSH
35235: LD_INT 5
35237: PPUSH
35238: CALL_OW 469
35242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35243: LD_INT 35
35245: PPUSH
35246: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: LD_INT 5
35257: PPUSH
35258: CALL_OW 469
35262: ST_TO_ADDR
// tmp := 100 ;
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_INT 100
35270: ST_TO_ADDR
// if pos then
35271: LD_VAR 0 4
35275: IFFALSE 35315
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 2
35284: PPUSH
35285: LD_VAR 0 4
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: PPUSH
35294: LD_VAR 0 4
35298: PUSH
35299: LD_INT 2
35301: ARRAY
35302: PPUSH
35303: LD_INT 20
35305: PPUSH
35306: CALL 3693 0 4
35310: PUSH
35311: LD_INT 4
35313: ARRAY
35314: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35315: LD_VAR 0 4
35319: PUSH
35320: LD_EXP 13
35324: NOT
35325: AND
35326: PUSH
35327: LD_VAR 0 3
35331: PUSH
35332: LD_INT 10
35334: LESS
35335: AND
35336: IFFALSE 35243
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35338: LD_VAR 0 2
35342: PPUSH
35343: LD_VAR 0 4
35347: PUSH
35348: LD_INT 1
35350: ARRAY
35351: PPUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: PPUSH
35361: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_INT 198
35372: PPUSH
35373: LD_INT 113
35375: PPUSH
35376: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35380: LD_VAR 0 2
35384: PPUSH
35385: LD_INT 124
35387: PPUSH
35388: LD_INT 7
35390: PPUSH
35391: CALL_OW 171
// end ;
35395: PPOPN 4
35397: END
// every 12 12$00 do
35398: GO 35400
35400: DISABLE
// begin end ;
35401: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35402: LD_EXP 6
35406: IFFALSE 37400
35408: GO 35410
35410: DISABLE
35411: LD_INT 0
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35421: LD_ADDR_VAR 0 4
35425: PUSH
35426: LD_INT 5
35428: PUSH
35429: LD_INT 6
35431: PUSH
35432: LD_INT 7
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: LD_OWVAR 67
35444: ARRAY
35445: ST_TO_ADDR
// coords := [ ] ;
35446: LD_ADDR_VAR 0 5
35450: PUSH
35451: EMPTY
35452: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35453: LD_ADDR_VAR 0 6
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35500: LD_INT 1
35502: PPUSH
35503: LD_INT 14
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 28
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 14
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 25
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 14
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 28
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 14
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 29
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL 53116 0 2
// wait ( [ 9 9$00 , 8 8$00 , 7 7$20 ] [ Difficulty ] ) ;
35585: LD_INT 18900
35587: PUSH
35588: LD_INT 16800
35590: PUSH
35591: LD_INT 15400
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_OWVAR 67
35603: ARRAY
35604: PPUSH
35605: CALL_OW 67
// InitHc ;
35609: CALL_OW 19
// InitUc ;
35613: CALL_OW 18
// uc_side := 2 ;
35617: LD_ADDR_OWVAR 20
35621: PUSH
35622: LD_INT 2
35624: ST_TO_ADDR
// uc_nation := 2 ;
35625: LD_ADDR_OWVAR 21
35629: PUSH
35630: LD_INT 2
35632: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
35633: LD_ADDR_VAR 0 3
35637: PUSH
35638: EMPTY
35639: PUSH
35640: EMPTY
35641: PUSH
35642: EMPTY
35643: PUSH
35644: EMPTY
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
35652: LD_ADDR_VAR 0 3
35656: PUSH
35657: LD_VAR 0 3
35661: PPUSH
35662: LD_INT 1
35664: PPUSH
35665: LD_EXP 59
35669: PUSH
35670: LD_INT 1
35672: ARRAY
35673: PUSH
35674: LD_INT 34
35676: PUSH
35677: LD_INT 32
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PPUSH
35684: CALL_OW 69
35688: DIFF
35689: PPUSH
35690: CALL_OW 1
35694: ST_TO_ADDR
// for i = 1 to Difficulty do
35695: LD_ADDR_VAR 0 1
35699: PUSH
35700: DOUBLE
35701: LD_INT 1
35703: DEC
35704: ST_TO_ADDR
35705: LD_OWVAR 67
35709: PUSH
35710: FOR_TO
35711: IFFALSE 35833
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
35713: LD_INT 13
35715: PPUSH
35716: LD_INT 3
35718: PPUSH
35719: LD_INT 5
35721: PPUSH
35722: LD_INT 29
35724: PPUSH
35725: LD_INT 100
35727: PPUSH
35728: CALL 2027 0 5
// un := CreateVehicle ;
35732: LD_ADDR_VAR 0 2
35736: PUSH
35737: CALL_OW 45
35741: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_VAR 0 3
35751: PPUSH
35752: LD_INT 1
35754: PUSH
35755: LD_VAR 0 3
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PUSH
35764: LD_INT 1
35766: PLUS
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PPUSH
35772: LD_VAR 0 2
35776: PPUSH
35777: CALL 3199 0 3
35781: ST_TO_ADDR
// SetDir ( un , 3 ) ;
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_INT 3
35789: PPUSH
35790: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_INT 16
35801: PPUSH
35802: LD_INT 0
35804: PPUSH
35805: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
35809: LD_VAR 0 2
35813: PPUSH
35814: LD_INT 51
35816: PPUSH
35817: LD_INT 10
35819: PPUSH
35820: CALL_OW 111
// wait ( 0 0$2 ) ;
35824: LD_INT 70
35826: PPUSH
35827: CALL_OW 67
// end ;
35831: GO 35710
35833: POP
35834: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
35835: LD_ADDR_VAR 0 5
35839: PUSH
35840: LD_INT 51
35842: PUSH
35843: LD_INT 24
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 75
35852: PUSH
35853: LD_INT 90
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
35864: LD_INT 1
35866: PPUSH
35867: LD_VAR 0 3
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: PPUSH
35876: LD_VAR 0 5
35880: PPUSH
35881: LD_VAR 0 6
35885: PPUSH
35886: CALL 53212 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
35890: LD_ADDR_VAR 0 1
35894: PUSH
35895: DOUBLE
35896: LD_INT 1
35898: DEC
35899: ST_TO_ADDR
35900: LD_INT 2
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: PUSH
35914: LD_OWVAR 67
35918: ARRAY
35919: PUSH
35920: FOR_TO
35921: IFFALSE 36005
// begin PrepareHuman ( false , 17 , skill ) ;
35923: LD_INT 0
35925: PPUSH
35926: LD_INT 17
35928: PPUSH
35929: LD_VAR 0 4
35933: PPUSH
35934: CALL_OW 380
// un := CreateHuman ;
35938: LD_ADDR_VAR 0 2
35942: PUSH
35943: CALL_OW 44
35947: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
35948: LD_ADDR_VAR 0 3
35952: PUSH
35953: LD_VAR 0 3
35957: PPUSH
35958: LD_INT 2
35960: PUSH
35961: LD_VAR 0 3
35965: PUSH
35966: LD_INT 2
35968: ARRAY
35969: PUSH
35970: LD_INT 1
35972: PLUS
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PPUSH
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL 3199 0 3
35987: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
35988: LD_VAR 0 2
35992: PPUSH
35993: LD_INT 13
35995: PPUSH
35996: LD_INT 0
35998: PPUSH
35999: CALL_OW 49
// end ;
36003: GO 35920
36005: POP
36006: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36007: LD_ADDR_VAR 0 1
36011: PUSH
36012: DOUBLE
36013: LD_INT 1
36015: DEC
36016: ST_TO_ADDR
36017: LD_INT 3
36019: PUSH
36020: LD_INT 4
36022: PUSH
36023: LD_INT 4
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: LD_OWVAR 67
36035: ARRAY
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36141
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36040: LD_INT 0
36042: PPUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 8
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PPUSH
36056: LD_INT 2
36058: PPUSH
36059: CALL_OW 12
36063: ARRAY
36064: PPUSH
36065: LD_VAR 0 4
36069: PPUSH
36070: CALL_OW 380
// un := CreateHuman ;
36074: LD_ADDR_VAR 0 2
36078: PUSH
36079: CALL_OW 44
36083: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36084: LD_ADDR_VAR 0 3
36088: PUSH
36089: LD_VAR 0 3
36093: PPUSH
36094: LD_INT 2
36096: PUSH
36097: LD_VAR 0 3
36101: PUSH
36102: LD_INT 2
36104: ARRAY
36105: PUSH
36106: LD_INT 1
36108: PLUS
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PPUSH
36114: LD_VAR 0 2
36118: PPUSH
36119: CALL 3199 0 3
36123: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36124: LD_VAR 0 2
36128: PPUSH
36129: LD_INT 13
36131: PPUSH
36132: LD_INT 0
36134: PPUSH
36135: CALL_OW 49
// end ;
36139: GO 36037
36141: POP
36142: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36143: LD_ADDR_VAR 0 5
36147: PUSH
36148: LD_INT 67
36150: PUSH
36151: LD_INT 112
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 85
36160: PUSH
36161: LD_INT 130
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36172: LD_INT 2
36174: PPUSH
36175: LD_VAR 0 3
36179: PUSH
36180: LD_INT 2
36182: ARRAY
36183: PPUSH
36184: LD_VAR 0 5
36188: PPUSH
36189: LD_VAR 0 6
36193: PPUSH
36194: CALL 53212 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36198: LD_ADDR_VAR 0 1
36202: PUSH
36203: DOUBLE
36204: LD_INT 1
36206: DEC
36207: ST_TO_ADDR
36208: LD_INT 1
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: PUSH
36222: LD_OWVAR 67
36226: ARRAY
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36313
// begin PrepareHuman ( false , 17 , skill ) ;
36231: LD_INT 0
36233: PPUSH
36234: LD_INT 17
36236: PPUSH
36237: LD_VAR 0 4
36241: PPUSH
36242: CALL_OW 380
// un := CreateHuman ;
36246: LD_ADDR_VAR 0 2
36250: PUSH
36251: CALL_OW 44
36255: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36256: LD_ADDR_VAR 0 3
36260: PUSH
36261: LD_VAR 0 3
36265: PPUSH
36266: LD_INT 3
36268: PUSH
36269: LD_VAR 0 3
36273: PUSH
36274: LD_INT 3
36276: ARRAY
36277: PUSH
36278: LD_INT 1
36280: PLUS
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PPUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: CALL 3199 0 3
36295: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36296: LD_VAR 0 2
36300: PPUSH
36301: LD_INT 14
36303: PPUSH
36304: LD_INT 0
36306: PPUSH
36307: CALL_OW 49
// end ;
36311: GO 36228
36313: POP
36314: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36315: LD_ADDR_VAR 0 5
36319: PUSH
36320: LD_INT 148
36322: PUSH
36323: LD_INT 158
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 148
36332: PUSH
36333: LD_INT 158
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36344: LD_INT 3
36346: PPUSH
36347: LD_VAR 0 3
36351: PUSH
36352: LD_INT 3
36354: ARRAY
36355: PPUSH
36356: LD_VAR 0 5
36360: PPUSH
36361: LD_VAR 0 6
36365: PPUSH
36366: CALL 53212 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36370: LD_ADDR_VAR 0 1
36374: PUSH
36375: DOUBLE
36376: LD_INT 1
36378: DEC
36379: ST_TO_ADDR
36380: LD_INT 3
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: LD_OWVAR 67
36398: ARRAY
36399: PUSH
36400: FOR_TO
36401: IFFALSE 36609
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36403: LD_INT 14
36405: PPUSH
36406: LD_INT 3
36408: PPUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: PPUSH
36422: LD_INT 2
36424: PPUSH
36425: CALL_OW 12
36429: ARRAY
36430: PPUSH
36431: LD_INT 27
36433: PUSH
36434: LD_INT 26
36436: PUSH
36437: LD_INT 28
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PPUSH
36448: LD_INT 3
36450: PPUSH
36451: CALL_OW 12
36455: ARRAY
36456: PPUSH
36457: LD_INT 100
36459: PPUSH
36460: CALL 2027 0 5
// un := CreateVehicle ;
36464: LD_ADDR_VAR 0 2
36468: PUSH
36469: CALL_OW 45
36473: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_VAR 0 3
36483: PPUSH
36484: LD_INT 4
36486: PUSH
36487: LD_VAR 0 3
36491: PUSH
36492: LD_INT 4
36494: ARRAY
36495: PUSH
36496: LD_INT 1
36498: PLUS
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PPUSH
36504: LD_VAR 0 2
36508: PPUSH
36509: CALL 3199 0 3
36513: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36514: LD_VAR 0 2
36518: PPUSH
36519: LD_INT 5
36521: PPUSH
36522: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36526: LD_VAR 0 2
36530: PPUSH
36531: LD_INT 15
36533: PPUSH
36534: LD_INT 0
36536: PPUSH
36537: CALL_OW 49
// if GetControl ( un ) = control_manual then
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL_OW 263
36550: PUSH
36551: LD_INT 1
36553: EQUAL
36554: IFFALSE 36585
// begin PrepareHuman ( false , 3 , skill ) ;
36556: LD_INT 0
36558: PPUSH
36559: LD_INT 3
36561: PPUSH
36562: LD_VAR 0 4
36566: PPUSH
36567: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36571: CALL_OW 44
36575: PPUSH
36576: LD_VAR 0 2
36580: PPUSH
36581: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36585: LD_VAR 0 2
36589: PPUSH
36590: LD_INT 179
36592: PPUSH
36593: LD_INT 135
36595: PPUSH
36596: CALL_OW 111
// wait ( 0 0$2 ) ;
36600: LD_INT 70
36602: PPUSH
36603: CALL_OW 67
// end ;
36607: GO 36400
36609: POP
36610: POP
// vc_chassis := 15 ;
36611: LD_ADDR_OWVAR 37
36615: PUSH
36616: LD_INT 15
36618: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_VAR 0 3
36628: PPUSH
36629: LD_INT 4
36631: PUSH
36632: LD_VAR 0 3
36636: PUSH
36637: LD_INT 4
36639: ARRAY
36640: PUSH
36641: LD_INT 1
36643: PLUS
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PPUSH
36649: CALL_OW 45
36653: PPUSH
36654: CALL 3199 0 3
36658: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ 1 ] , east_attack_spawn , false ) ;
36659: LD_VAR 0 3
36663: PUSH
36664: LD_INT 4
36666: ARRAY
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: PPUSH
36672: LD_INT 15
36674: PPUSH
36675: LD_INT 0
36677: PPUSH
36678: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
36682: LD_INT 0
36684: PPUSH
36685: LD_INT 11
36687: PPUSH
36688: LD_VAR 0 4
36692: PPUSH
36693: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_VAR 0 3
36706: PPUSH
36707: LD_INT 4
36709: PUSH
36710: LD_VAR 0 3
36714: PUSH
36715: LD_INT 4
36717: ARRAY
36718: PUSH
36719: LD_INT 1
36721: PLUS
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PPUSH
36727: CALL_OW 44
36731: PPUSH
36732: CALL 3199 0 3
36736: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
36737: LD_VAR 0 3
36741: PUSH
36742: LD_INT 4
36744: ARRAY
36745: PUSH
36746: LD_VAR 0 3
36750: PUSH
36751: LD_INT 4
36753: ARRAY
36754: ARRAY
36755: PPUSH
36756: LD_VAR 0 3
36760: PUSH
36761: LD_INT 4
36763: ARRAY
36764: PUSH
36765: LD_VAR 0 3
36769: PUSH
36770: LD_INT 4
36772: ARRAY
36773: PUSH
36774: LD_INT 1
36776: MINUS
36777: ARRAY
36778: PPUSH
36779: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_INT 148
36790: PUSH
36791: LD_INT 140
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: EMPTY
36799: LIST
36800: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
36801: LD_INT 1
36803: PPUSH
36804: LD_VAR 0 3
36808: PUSH
36809: LD_INT 4
36811: ARRAY
36812: PPUSH
36813: LD_VAR 0 5
36817: PPUSH
36818: LD_VAR 0 6
36822: PPUSH
36823: CALL 53212 0 4
// Wait ( 10 10$00 ) ;
36827: LD_INT 21000
36829: PPUSH
36830: CALL_OW 67
// tmp := [ ] ;
36834: LD_ADDR_VAR 0 3
36838: PUSH
36839: EMPTY
36840: ST_TO_ADDR
// w := 1 ;
36841: LD_ADDR_VAR 0 7
36845: PUSH
36846: LD_INT 1
36848: ST_TO_ADDR
// repeat tmp := [ ] ;
36849: LD_ADDR_VAR 0 3
36853: PUSH
36854: EMPTY
36855: ST_TO_ADDR
// if w mod 4 = 0 then
36856: LD_VAR 0 7
36860: PUSH
36861: LD_INT 4
36863: MOD
36864: PUSH
36865: LD_INT 0
36867: EQUAL
36868: IFFALSE 36955
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
36870: LD_ADDR_VAR 0 8
36874: PUSH
36875: LD_INT 11
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 24
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 11
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 24
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 11
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 24
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 11
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 24
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
36953: GO 37038
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
36955: LD_ADDR_VAR 0 8
36959: PUSH
36960: LD_INT 14
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 28
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 14
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: LD_INT 25
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 14
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 28
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 14
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 29
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// if w mod 3 = 0 then
37038: LD_VAR 0 7
37042: PUSH
37043: LD_INT 3
37045: MOD
37046: PUSH
37047: LD_INT 0
37049: EQUAL
37050: IFFALSE 37126
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37052: LD_ADDR_VAR 0 8
37056: PUSH
37057: LD_VAR 0 8
37061: PPUSH
37062: LD_INT 1
37064: PUSH
37065: LD_VAR 0 8
37069: PUSH
37070: LD_VAR 0 1
37074: ARRAY
37075: PUSH
37076: LD_INT 1
37078: PLUS
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PPUSH
37084: LD_INT 14
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: LD_INT 25
37095: PUSH
37096: LD_INT 28
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PPUSH
37106: LD_INT 2
37108: PPUSH
37109: CALL_OW 12
37113: ARRAY
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: PPUSH
37121: CALL 3199 0 3
37125: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37126: LD_INT 1
37128: PPUSH
37129: LD_VAR 0 8
37133: PPUSH
37134: CALL 53116 0 2
// repeat wait ( 0 0$1 ) ;
37138: LD_INT 35
37140: PPUSH
37141: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37145: LD_EXP 59
37149: PUSH
37150: LD_INT 1
37152: ARRAY
37153: PPUSH
37154: LD_INT 3
37156: PUSH
37157: LD_INT 34
37159: PUSH
37160: LD_INT 32
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PPUSH
37171: CALL_OW 72
37175: PUSH
37176: LD_INT 4
37178: GREATEREQUAL
37179: IFFALSE 37138
// wait ( 0 0$10 ) ;
37181: LD_INT 350
37183: PPUSH
37184: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_EXP 59
37197: PUSH
37198: LD_INT 1
37200: ARRAY
37201: PPUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 34
37207: PUSH
37208: LD_INT 32
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 72
37223: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
37224: LD_INT 100
37226: PPUSH
37227: CALL_OW 13
37231: PUSH
37232: LD_INT 50
37234: LESS
37235: IFFALSE 37268
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] else
37237: LD_ADDR_VAR 0 5
37241: PUSH
37242: LD_INT 51
37244: PUSH
37245: LD_INT 24
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 75
37254: PUSH
37255: LD_INT 90
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: ST_TO_ADDR
37266: GO 37297
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
37268: LD_ADDR_VAR 0 5
37272: PUSH
37273: LD_INT 128
37275: PUSH
37276: LD_INT 94
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 180
37285: PUSH
37286: LD_INT 135
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// if w mod 4 = 0 then
37297: LD_VAR 0 7
37301: PUSH
37302: LD_INT 4
37304: MOD
37305: PUSH
37306: LD_INT 0
37308: EQUAL
37309: IFFALSE 37340
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
37311: LD_ADDR_VAR 0 5
37315: PUSH
37316: LD_INT 91
37318: PUSH
37319: LD_INT 58
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 117
37328: PUSH
37329: LD_INT 107
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
37340: LD_INT 1
37342: PPUSH
37343: LD_VAR 0 3
37347: PPUSH
37348: LD_VAR 0 5
37352: PPUSH
37353: LD_VAR 0 6
37357: PPUSH
37358: CALL 53212 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
37362: LD_INT 19950
37364: PPUSH
37365: LD_INT 26250
37367: PPUSH
37368: CALL_OW 12
37372: PPUSH
37373: CALL_OW 67
// w := w + 1 ;
37377: LD_ADDR_VAR 0 7
37381: PUSH
37382: LD_VAR 0 7
37386: PUSH
37387: LD_INT 1
37389: PLUS
37390: ST_TO_ADDR
// until IsDead ( ar_dep_n ) ;
37391: LD_INT 94
37393: PPUSH
37394: CALL_OW 301
37398: IFFALSE 36849
// end ; end_of_file
37400: PPOPN 8
37402: END
// export function Action ; var tmp , p , radar , sols , i ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
// InGameOn ;
37411: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
37415: LD_EXP 17
37419: PPUSH
37420: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
37424: LD_ADDR_VAR 0 2
37428: PUSH
37429: LD_INT 22
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 25
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PPUSH
37453: CALL_OW 69
37457: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
37458: LD_ADDR_VAR 0 4
37462: PUSH
37463: LD_INT 22
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 34
37475: PUSH
37476: LD_INT 11
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 69
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: ST_TO_ADDR
// for i = 1 to tmp do
37496: LD_ADDR_VAR 0 6
37500: PUSH
37501: DOUBLE
37502: LD_INT 1
37504: DEC
37505: ST_TO_ADDR
37506: LD_VAR 0 2
37510: PUSH
37511: FOR_TO
37512: IFFALSE 37559
// begin if i = 5 then
37514: LD_VAR 0 6
37518: PUSH
37519: LD_INT 5
37521: EQUAL
37522: IFFALSE 37526
// break ;
37524: GO 37559
// sols := Replace ( sols , i , tmp [ i ] ) ;
37526: LD_ADDR_VAR 0 5
37530: PUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: LD_VAR 0 6
37540: PPUSH
37541: LD_VAR 0 2
37545: PUSH
37546: LD_VAR 0 6
37550: ARRAY
37551: PPUSH
37552: CALL_OW 1
37556: ST_TO_ADDR
// end ;
37557: GO 37511
37559: POP
37560: POP
// tmp := ar_force_tmp ;
37561: LD_ADDR_VAR 0 2
37565: PUSH
37566: LD_EXP 36
37570: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PPUSH
37580: LD_INT 108
37582: PPUSH
37583: LD_INT 139
37585: PPUSH
37586: LD_INT 0
37588: PPUSH
37589: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
37593: LD_VAR 0 2
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PPUSH
37602: LD_EXP 17
37606: PPUSH
37607: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
37611: LD_VAR 0 2
37615: PUSH
37616: LD_INT 2
37618: ARRAY
37619: PPUSH
37620: LD_INT 114
37622: PPUSH
37623: LD_INT 132
37625: PPUSH
37626: LD_INT 0
37628: PPUSH
37629: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
37633: LD_VAR 0 2
37637: PUSH
37638: LD_INT 3
37640: ARRAY
37641: PPUSH
37642: LD_INT 115
37644: PPUSH
37645: LD_INT 132
37647: PPUSH
37648: LD_INT 0
37650: PPUSH
37651: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
37655: LD_VAR 0 2
37659: PUSH
37660: LD_INT 2
37662: ARRAY
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_INT 3
37671: ARRAY
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PPUSH
37677: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
37681: LD_VAR 0 4
37685: PPUSH
37686: LD_INT 83
37688: PPUSH
37689: LD_INT 123
37691: PPUSH
37692: CALL_OW 111
// Wait ( 0 0$01 ) ;
37696: LD_INT 35
37698: PPUSH
37699: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
37703: LD_INT 90
37705: PPUSH
37706: LD_INT 144
37708: PPUSH
37709: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
37713: LD_VAR 0 5
37717: PPUSH
37718: LD_INT 88
37720: PPUSH
37721: LD_INT 129
37723: PPUSH
37724: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_INT 92
37735: PUSH
37736: LD_INT 131
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 88
37745: PUSH
37746: LD_INT 127
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 91
37755: PUSH
37756: LD_INT 132
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 92
37765: PUSH
37766: LD_INT 134
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// for i = 1 to sols do
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: DOUBLE
37785: LD_INT 1
37787: DEC
37788: ST_TO_ADDR
37789: LD_VAR 0 5
37793: PUSH
37794: FOR_TO
37795: IFFALSE 37868
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
37797: LD_VAR 0 5
37801: PUSH
37802: LD_VAR 0 6
37806: ARRAY
37807: PPUSH
37808: LD_VAR 0 3
37812: PUSH
37813: LD_VAR 0 6
37817: ARRAY
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: LD_VAR 0 3
37827: PUSH
37828: LD_VAR 0 6
37832: ARRAY
37833: PUSH
37834: LD_INT 2
37836: ARRAY
37837: PPUSH
37838: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
37842: LD_VAR 0 5
37846: PUSH
37847: LD_VAR 0 6
37851: ARRAY
37852: PPUSH
37853: CALL_OW 197
// AddComHold ( sols ) ;
37857: LD_VAR 0 5
37861: PPUSH
37862: CALL_OW 200
// end ;
37866: GO 37794
37868: POP
37869: POP
// repeat wait ( 0 0$1 ) ;
37870: LD_INT 35
37872: PPUSH
37873: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
37877: LD_VAR 0 5
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PPUSH
37886: LD_INT 92
37888: PPUSH
37889: LD_INT 131
37891: PPUSH
37892: CALL_OW 297
37896: PUSH
37897: LD_INT 4
37899: LESS
37900: IFFALSE 37870
// CenterOnXY ( 96 , 139 ) ;
37902: LD_INT 96
37904: PPUSH
37905: LD_INT 139
37907: PPUSH
37908: CALL_OW 84
// wait ( 0 0$3 ) ;
37912: LD_INT 105
37914: PPUSH
37915: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
37919: LD_INT 111
37921: PPUSH
37922: LD_INT 135
37924: PPUSH
37925: LD_INT 1
37927: PPUSH
37928: LD_INT 25
37930: NEG
37931: PPUSH
37932: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 2
37943: ARRAY
37944: PPUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PPUSH
37954: CALL_OW 250
37958: PUSH
37959: LD_INT 3
37961: PLUS
37962: PPUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PPUSH
37972: CALL_OW 251
37976: PPUSH
37977: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
37981: LD_VAR 0 2
37985: PUSH
37986: LD_INT 3
37988: ARRAY
37989: PPUSH
37990: LD_INT 7
37992: PPUSH
37993: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
37997: LD_VAR 0 2
38001: PUSH
38002: LD_INT 2
38004: ARRAY
38005: PPUSH
38006: LD_VAR 0 2
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: PPUSH
38015: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
38019: LD_INT 35
38021: PPUSH
38022: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
38026: LD_VAR 0 2
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: PPUSH
38035: LD_VAR 0 2
38039: PUSH
38040: LD_INT 2
38042: ARRAY
38043: PPUSH
38044: CALL_OW 296
38048: PUSH
38049: LD_INT 5
38051: LESS
38052: IFFALSE 38019
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
38054: LD_VAR 0 2
38058: PUSH
38059: LD_INT 1
38061: ARRAY
38062: PPUSH
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PPUSH
38072: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
38076: LD_VAR 0 2
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: PPUSH
38085: LD_STRING D1a-Merc1-1
38087: PPUSH
38088: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
38092: LD_VAR 0 2
38096: PUSH
38097: LD_INT 2
38099: ARRAY
38100: PPUSH
38101: LD_STRING D1a-FMerc2-1
38103: PPUSH
38104: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
38108: LD_VAR 0 2
38112: PUSH
38113: LD_INT 2
38115: ARRAY
38116: PPUSH
38117: LD_VAR 0 2
38121: PUSH
38122: LD_INT 1
38124: ARRAY
38125: PPUSH
38126: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PPUSH
38139: LD_INT 500
38141: PPUSH
38142: CALL_OW 234
// wait ( 0 0$2 ) ;
38146: LD_INT 70
38148: PPUSH
38149: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PPUSH
38162: LD_INT 2
38164: PPUSH
38165: CALL_OW 234
// wait ( 0 0$0.3 ) ;
38169: LD_INT 10
38171: PPUSH
38172: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
38176: LD_VAR 0 2
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PPUSH
38185: LD_STRING D1a-Merc1-2
38187: PPUSH
38188: CALL_OW 91
// wait ( 0 0$0.2 ) ;
38192: LD_INT 7
38194: PPUSH
38195: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
38199: LD_VAR 0 2
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
38212: LD_VAR 0 2
38216: PUSH
38217: LD_INT 2
38219: ARRAY
38220: PPUSH
38221: LD_INT 10
38223: PPUSH
38224: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
38228: LD_VAR 0 2
38232: PUSH
38233: LD_INT 2
38235: ARRAY
38236: PPUSH
38237: LD_STRING D1a-FMerc2-2
38239: PPUSH
38240: CALL_OW 88
// wait ( 0 0$1 ) ;
38244: LD_INT 35
38246: PPUSH
38247: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
38251: LD_INT 7
38253: PPUSH
38254: CALL_OW 85
// wait ( 0 0$2 ) ;
38258: LD_INT 70
38260: PPUSH
38261: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
38265: LD_EXP 40
38269: PPUSH
38270: LD_STRING D1a-Saliba-1
38272: PPUSH
38273: CALL_OW 91
// KillUnit ( Saliba ) ;
38277: LD_EXP 40
38281: PPUSH
38282: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
38286: LD_VAR 0 2
38290: PUSH
38291: LD_INT 3
38293: ARRAY
38294: PPUSH
38295: CALL_OW 122
// CenterOnUnits ( JMM ) ;
38299: LD_EXP 17
38303: PPUSH
38304: CALL_OW 85
// wait ( 0 0$1 ) ;
38308: LD_INT 35
38310: PPUSH
38311: CALL_OW 67
// InGameOff ;
38315: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
38319: LD_STRING M1
38321: PPUSH
38322: CALL_OW 337
// game_speed := 4 ;
38326: LD_ADDR_OWVAR 65
38330: PUSH
38331: LD_INT 4
38333: ST_TO_ADDR
// SaveForQuickRestart ;
38334: CALL_OW 22
// ar_run := true ;
38338: LD_ADDR_EXP 5
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 1
38350: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
38351: LD_EXP 5
38355: IFFALSE 38687
38357: GO 38359
38359: DISABLE
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
38364: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
38365: LD_ADDR_VAR 0 2
38369: PUSH
38370: LD_EXP 36
38374: PUSH
38375: LD_EXP 33
38379: PPUSH
38380: LD_INT 21
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PPUSH
38390: CALL_OW 72
38394: ADD
38395: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
38396: LD_VAR 0 2
38400: PPUSH
38401: LD_INT 5
38403: PPUSH
38404: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
38408: LD_INT 5
38410: PPUSH
38411: LD_INT 1
38413: PPUSH
38414: CALL_OW 343
// k := 1 ;
38418: LD_ADDR_VAR 0 3
38422: PUSH
38423: LD_INT 1
38425: ST_TO_ADDR
// for i in tmp do
38426: LD_ADDR_VAR 0 1
38430: PUSH
38431: LD_VAR 0 2
38435: PUSH
38436: FOR_IN
38437: IFFALSE 38522
// begin if IsInUnit ( i ) then
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 310
38448: IFFALSE 38459
// ComExitBuilding ( i ) ;
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 122
// if GetClass ( i ) = 3 then
38459: LD_VAR 0 1
38463: PPUSH
38464: CALL_OW 257
38468: PUSH
38469: LD_INT 3
38471: EQUAL
38472: IFFALSE 38508
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
38474: LD_VAR 0 1
38478: PPUSH
38479: LD_EXP 37
38483: PUSH
38484: LD_VAR 0 3
38488: ARRAY
38489: PPUSH
38490: CALL_OW 180
// k := k + 1 ;
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_VAR 0 3
38503: PUSH
38504: LD_INT 1
38506: PLUS
38507: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
38508: LD_VAR 0 1
38512: PPUSH
38513: LD_INT 10
38515: PPUSH
38516: CALL_OW 173
// end ;
38520: GO 38436
38522: POP
38523: POP
// ar_patrol := true ;
38524: LD_ADDR_EXP 7
38528: PUSH
38529: LD_INT 1
38531: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
38532: LD_INT 10
38534: PPUSH
38535: CALL_OW 67
// for i in tmp do
38539: LD_ADDR_VAR 0 1
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: FOR_IN
38550: IFFALSE 38578
// if not HasTask ( i ) then
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 314
38561: NOT
38562: IFFALSE 38576
// ComMoveToArea ( i , escape_area ) ;
38564: LD_VAR 0 1
38568: PPUSH
38569: LD_INT 10
38571: PPUSH
38572: CALL_OW 113
38576: GO 38549
38578: POP
38579: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_VAR 0 2
38589: PPUSH
38590: LD_INT 95
38592: PUSH
38593: LD_INT 10
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PPUSH
38600: CALL_OW 72
38604: ST_TO_ADDR
// if k then
38605: LD_VAR 0 3
38609: IFFALSE 38678
// for i in k do
38611: LD_ADDR_VAR 0 1
38615: PUSH
38616: LD_VAR 0 3
38620: PUSH
38621: FOR_IN
38622: IFFALSE 38676
// begin if IsInUnit ( i ) then
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 310
38633: IFFALSE 38649
// RemoveUnit ( IsInUnit ( i ) ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 310
38644: PPUSH
38645: CALL_OW 64
// RemoveUnit ( i ) ;
38649: LD_VAR 0 1
38653: PPUSH
38654: CALL_OW 64
// tmp := tmp diff i ;
38658: LD_ADDR_VAR 0 2
38662: PUSH
38663: LD_VAR 0 2
38667: PUSH
38668: LD_VAR 0 1
38672: DIFF
38673: ST_TO_ADDR
// end ;
38674: GO 38621
38676: POP
38677: POP
// until tmp = [ ] ;
38678: LD_VAR 0 2
38682: PUSH
38683: EMPTY
38684: EQUAL
38685: IFFALSE 38532
// end ;
38687: PPOPN 3
38689: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
38690: LD_EXP 7
38694: IFFALSE 38984
38696: GO 38698
38698: DISABLE
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
38703: PPUSH
// begin uc_side := 2 ;
38704: LD_ADDR_OWVAR 20
38708: PUSH
38709: LD_INT 2
38711: ST_TO_ADDR
// uc_nation := 2 ;
38712: LD_ADDR_OWVAR 21
38716: PUSH
38717: LD_INT 2
38719: ST_TO_ADDR
// InitHc ;
38720: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
38724: LD_INT 1
38726: PPUSH
38727: LD_INT 1
38729: PPUSH
38730: LD_INT 6
38732: PPUSH
38733: CALL_OW 380
// un := CreateHuman ;
38737: LD_ADDR_VAR 0 2
38741: PUSH
38742: CALL_OW 44
38746: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
38747: LD_INT 14
38749: PPUSH
38750: LD_INT 1
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: LD_INT 27
38758: PPUSH
38759: LD_INT 98
38761: PPUSH
38762: CALL 2027 0 5
// veh := CreateVehicle ;
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: CALL_OW 45
38775: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
38776: LD_VAR 0 3
38780: PPUSH
38781: LD_INT 4
38783: PPUSH
38784: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
38788: LD_VAR 0 3
38792: PPUSH
38793: LD_INT 179
38795: PPUSH
38796: LD_INT 135
38798: PPUSH
38799: LD_INT 0
38801: PPUSH
38802: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
38806: LD_VAR 0 2
38810: PPUSH
38811: LD_VAR 0 3
38815: PPUSH
38816: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
38820: LD_VAR 0 2
38824: PPUSH
38825: LD_INT 126
38827: PPUSH
38828: LD_INT 133
38830: PPUSH
38831: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
38835: LD_INT 10
38837: PPUSH
38838: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
38842: LD_INT 1
38844: PPUSH
38845: LD_VAR 0 3
38849: PPUSH
38850: CALL_OW 292
38854: PUSH
38855: LD_VAR 0 3
38859: PPUSH
38860: LD_INT 7
38862: PPUSH
38863: CALL_OW 296
38867: PUSH
38868: LD_INT 9
38870: LESS
38871: OR
38872: IFFALSE 38835
// ComHold ( veh ) ;
38874: LD_VAR 0 3
38878: PPUSH
38879: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
38883: LD_VAR 0 2
38887: PPUSH
38888: LD_STRING D2aa-Ar1-1
38890: PPUSH
38891: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
38895: LD_VAR 0 2
38899: PPUSH
38900: LD_INT 177
38902: PPUSH
38903: LD_INT 96
38905: PPUSH
38906: CALL_OW 111
// AddComExitVehicle ( un ) ;
38910: LD_VAR 0 2
38914: PPUSH
38915: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
38919: LD_INT 35
38921: PPUSH
38922: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
38926: LD_VAR 0 2
38930: PPUSH
38931: LD_INT 69
38933: PPUSH
38934: CALL_OW 296
38938: PUSH
38939: LD_INT 15
38941: LESS
38942: IFFALSE 38919
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
38944: LD_ADDR_EXP 44
38948: PUSH
38949: LD_EXP 44
38953: PPUSH
38954: LD_INT 3
38956: PUSH
38957: LD_EXP 44
38961: PUSH
38962: LD_INT 3
38964: ARRAY
38965: PUSH
38966: LD_INT 1
38968: PLUS
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PPUSH
38974: LD_VAR 0 2
38978: PPUSH
38979: CALL 3199 0 3
38983: ST_TO_ADDR
// end ;
38984: PPOPN 3
38986: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
38987: LD_INT 7
38989: PPUSH
38990: CALL_OW 255
38994: PUSH
38995: LD_INT 1
38997: EQUAL
38998: PUSH
38999: LD_INT 7
39001: PPUSH
39002: CALL_OW 301
39006: OR
39007: IFFALSE 41374
39009: GO 39011
39011: DISABLE
39012: LD_INT 0
39014: PPUSH
39015: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
39016: LD_ADDR_VAR 0 2
39020: PUSH
39021: LD_INT 46
39023: PUSH
39024: LD_INT 41
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 50
39033: PUSH
39034: LD_INT 25
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 57
39043: PUSH
39044: LD_INT 75
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 75
39053: PUSH
39054: LD_INT 89
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 51
39063: PUSH
39064: LD_INT 45
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 95
39073: PUSH
39074: LD_INT 95
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 84
39083: PUSH
39084: LD_INT 77
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 101
39093: PUSH
39094: LD_INT 76
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 118
39103: PUSH
39104: LD_INT 81
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 139
39113: PUSH
39114: LD_INT 97
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 129
39123: PUSH
39124: LD_INT 114
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 154
39133: PUSH
39134: LD_INT 111
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// base_captured := true ;
39155: LD_ADDR_EXP 6
39159: PUSH
39160: LD_INT 1
39162: ST_TO_ADDR
// DialogueOn ;
39163: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39167: LD_EXP 17
39171: PPUSH
39172: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
39176: LD_EXP 17
39180: PPUSH
39181: LD_STRING D2-JMM-1
39183: PPUSH
39184: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
39188: LD_EXP 26
39192: PPUSH
39193: LD_STRING D2-Pow-1
39195: PPUSH
39196: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
39200: LD_EXP 17
39204: PPUSH
39205: LD_STRING D2-JMM-2
39207: PPUSH
39208: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
39212: LD_EXP 26
39216: PPUSH
39217: LD_STRING D2-Pow-2
39219: PPUSH
39220: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
39224: LD_EXP 17
39228: PPUSH
39229: LD_STRING D2-JMM-3
39231: PPUSH
39232: CALL_OW 88
// DialogueOff ;
39236: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
39240: LD_STRING M2
39242: PPUSH
39243: CALL_OW 337
// Wait ( 0 0$2 ) ;
39247: LD_INT 70
39249: PPUSH
39250: CALL_OW 67
// if IsOk ( Gary ) then
39254: LD_EXP 28
39258: PPUSH
39259: CALL_OW 302
39263: IFFALSE 39277
// Say ( Gary , D2a-Gary-1 ) ;
39265: LD_EXP 28
39269: PPUSH
39270: LD_STRING D2a-Gary-1
39272: PPUSH
39273: CALL_OW 88
// if IsOk ( Bobby ) then
39277: LD_EXP 20
39281: PPUSH
39282: CALL_OW 302
39286: IFFALSE 39300
// Say ( Bobby , D2a-Bobby-1 ) ;
39288: LD_EXP 20
39292: PPUSH
39293: LD_STRING D2a-Bobby-1
39295: PPUSH
39296: CALL_OW 88
// if IsOk ( Cyrus ) then
39300: LD_EXP 21
39304: PPUSH
39305: CALL_OW 302
39309: IFFALSE 39323
// Say ( Cyrus , D2a-Cyrus-1 ) ;
39311: LD_EXP 21
39315: PPUSH
39316: LD_STRING D2a-Cyrus-1
39318: PPUSH
39319: CALL_OW 88
// if IsOk ( Lisa ) then
39323: LD_EXP 18
39327: PPUSH
39328: CALL_OW 302
39332: IFFALSE 39346
// Say ( Lisa , D2a-Lisa-1 ) ;
39334: LD_EXP 18
39338: PPUSH
39339: LD_STRING D2a-Lisa-1
39341: PPUSH
39342: CALL_OW 88
// if IsOk ( Frank ) then
39346: LD_EXP 29
39350: PPUSH
39351: CALL_OW 302
39355: IFFALSE 39369
// Say ( Frank , D2a-Frank-1 ) ;
39357: LD_EXP 29
39361: PPUSH
39362: LD_STRING D2a-Frank-1
39364: PPUSH
39365: CALL_OW 88
// if IsOk ( Cornel ) then
39369: LD_EXP 27
39373: PPUSH
39374: CALL_OW 302
39378: IFFALSE 39392
// Say ( Cornel , D2a-Corn-1 ) ;
39380: LD_EXP 27
39384: PPUSH
39385: LD_STRING D2a-Corn-1
39387: PPUSH
39388: CALL_OW 88
// if IsOk ( Donaldson ) then
39392: LD_EXP 19
39396: PPUSH
39397: CALL_OW 302
39401: IFFALSE 39415
// Say ( Donaldson , D2a-Don-1 ) ;
39403: LD_EXP 19
39407: PPUSH
39408: LD_STRING D2a-Don-1
39410: PPUSH
39411: CALL_OW 88
// if IsOk ( Brown ) then
39415: LD_EXP 23
39419: PPUSH
39420: CALL_OW 302
39424: IFFALSE 39438
// Say ( Brown , D2a-Brown-1 ) ;
39426: LD_EXP 23
39430: PPUSH
39431: LD_STRING D2a-Brown-1
39433: PPUSH
39434: CALL_OW 88
// Wait ( 0 0$30 ) ;
39438: LD_INT 1050
39440: PPUSH
39441: CALL_OW 67
// if IsOk ( Frank ) then
39445: LD_EXP 29
39449: PPUSH
39450: CALL_OW 302
39454: IFFALSE 39720
// begin DialogueOn ;
39456: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
39460: LD_EXP 17
39464: PUSH
39465: LD_EXP 29
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PPUSH
39474: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
39478: LD_EXP 29
39482: PPUSH
39483: LD_STRING D3F-Frank-1
39485: PPUSH
39486: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
39490: LD_EXP 17
39494: PPUSH
39495: LD_STRING D3F-JMM-1
39497: PPUSH
39498: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
39502: LD_EXP 29
39506: PPUSH
39507: LD_STRING D3F-Frank-2
39509: PPUSH
39510: CALL_OW 88
// case Query ( QFrank ) of 1 :
39514: LD_STRING QFrank
39516: PPUSH
39517: CALL_OW 97
39521: PUSH
39522: LD_INT 1
39524: DOUBLE
39525: EQUAL
39526: IFTRUE 39530
39528: GO 39553
39530: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
39531: LD_EXP 17
39535: PPUSH
39536: LD_STRING D3Fa-JMM-1
39538: PPUSH
39539: CALL_OW 88
// us_scout := 1 ;
39543: LD_ADDR_EXP 8
39547: PUSH
39548: LD_INT 1
39550: ST_TO_ADDR
// end ; 2 :
39551: GO 39716
39553: LD_INT 2
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39561
39559: GO 39683
39561: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
39562: LD_EXP 17
39566: PPUSH
39567: LD_STRING D3Fb-JMM-1
39569: PPUSH
39570: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
39574: LD_EXP 29
39578: PPUSH
39579: LD_STRING D3Fb-Frank-1
39581: PPUSH
39582: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
39586: LD_STRING QFrank2
39588: PPUSH
39589: CALL_OW 97
39593: PUSH
39594: LD_INT 1
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39649
39602: POP
// begin us_scout := 2 ;
39603: LD_ADDR_EXP 8
39607: PUSH
39608: LD_INT 2
39610: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
39611: LD_EXP 17
39615: PPUSH
39616: LD_STRING D3Fba-JMM-1
39618: PPUSH
39619: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
39623: LD_EXP 29
39627: PPUSH
39628: LD_STRING D3Fba-Frank-1
39630: PPUSH
39631: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
39635: LD_EXP 17
39639: PPUSH
39640: LD_STRING D3Fba-JMM-2
39642: PPUSH
39643: CALL_OW 88
// end ; 2 :
39647: GO 39681
39649: LD_INT 2
39651: DOUBLE
39652: EQUAL
39653: IFTRUE 39657
39655: GO 39680
39657: POP
// begin us_scout := 0 ;
39658: LD_ADDR_EXP 8
39662: PUSH
39663: LD_INT 0
39665: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
39666: LD_EXP 17
39670: PPUSH
39671: LD_STRING D3Fbb-JMM-1
39673: PPUSH
39674: CALL_OW 88
// end ; end ;
39678: GO 39681
39680: POP
// end ; 3 :
39681: GO 39716
39683: LD_INT 3
39685: DOUBLE
39686: EQUAL
39687: IFTRUE 39691
39689: GO 39715
39691: POP
// begin us_scout := - 1 ;
39692: LD_ADDR_EXP 8
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
39701: LD_EXP 17
39705: PPUSH
39706: LD_STRING D3Fc-JMM-1
39708: PPUSH
39709: CALL_OW 88
// end ; end ;
39713: GO 39716
39715: POP
// DialogueOff ;
39716: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
39720: LD_EXP 8
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: IN
39736: IFFALSE 39740
// exit ;
39738: GO 41374
// if us_scout in [ 1 , 2 ] then
39740: LD_EXP 8
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: IN
39755: IFFALSE 40456
// begin if IsInUnit ( Frank ) then
39757: LD_EXP 29
39761: PPUSH
39762: CALL_OW 310
39766: IFFALSE 39777
// ComExitBuilding ( Frank ) ;
39768: LD_EXP 29
39772: PPUSH
39773: CALL_OW 122
// if IsDrivenBy ( Frank ) then
39777: LD_EXP 29
39781: PPUSH
39782: CALL_OW 311
39786: IFFALSE 39797
// ComExitVehicle ( Frank ) ;
39788: LD_EXP 29
39792: PPUSH
39793: CALL_OW 121
// SetSide ( Frank , 4 ) ;
39797: LD_EXP 29
39801: PPUSH
39802: LD_INT 4
39804: PPUSH
39805: CALL_OW 235
// wait ( 0 0$1 ) ;
39809: LD_INT 35
39811: PPUSH
39812: CALL_OW 67
// if us_scout = 2 then
39816: LD_EXP 8
39820: PUSH
39821: LD_INT 2
39823: EQUAL
39824: IFFALSE 40192
// begin ComMoveXY ( Frank , 75 , 63 ) ;
39826: LD_EXP 29
39830: PPUSH
39831: LD_INT 75
39833: PPUSH
39834: LD_INT 63
39836: PPUSH
39837: CALL_OW 111
// AddComHold ( Frank ) ;
39841: LD_EXP 29
39845: PPUSH
39846: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
39850: LD_EXP 29
39854: PPUSH
39855: LD_INT 770
39857: PPUSH
39858: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
39862: LD_EXP 29
39866: PPUSH
39867: LD_INT 100
39869: PPUSH
39870: LD_INT 75
39872: PPUSH
39873: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
39877: LD_EXP 29
39881: PPUSH
39882: LD_INT 123
39884: PPUSH
39885: LD_INT 103
39887: PPUSH
39888: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
39892: LD_EXP 29
39896: PPUSH
39897: LD_INT 138
39899: PPUSH
39900: LD_INT 108
39902: PPUSH
39903: CALL_OW 171
// AddComHold ( Frank ) ;
39907: LD_EXP 29
39911: PPUSH
39912: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
39916: LD_INT 35
39918: PPUSH
39919: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
39923: LD_EXP 29
39927: PPUSH
39928: LD_INT 138
39930: PPUSH
39931: LD_INT 108
39933: PPUSH
39934: CALL_OW 307
39938: IFFALSE 39916
// AddComMoveXY ( Frank , 125 , 132 ) ;
39940: LD_EXP 29
39944: PPUSH
39945: LD_INT 125
39947: PPUSH
39948: LD_INT 132
39950: PPUSH
39951: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
39955: LD_INT 35
39957: PPUSH
39958: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
39962: LD_INT 1
39964: PPUSH
39965: LD_EXP 29
39969: PPUSH
39970: CALL_OW 292
39974: PUSH
39975: LD_EXP 29
39979: PPUSH
39980: LD_INT 7
39982: PPUSH
39983: CALL_OW 296
39987: PUSH
39988: LD_INT 7
39990: LESS
39991: OR
39992: IFFALSE 39955
// DialogueOn ;
39994: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
39998: LD_EXP 29
40002: PPUSH
40003: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
40007: LD_INT 10
40009: PPUSH
40010: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
40014: LD_EXP 17
40018: PPUSH
40019: LD_STRING D4Fa-JMM-1
40021: PPUSH
40022: CALL_OW 88
// for i in points do
40026: LD_ADDR_VAR 0 1
40030: PUSH
40031: LD_VAR 0 2
40035: PUSH
40036: FOR_IN
40037: IFFALSE 40095
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
40039: LD_VAR 0 1
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PPUSH
40048: LD_VAR 0 1
40052: PUSH
40053: LD_INT 2
40055: ARRAY
40056: PPUSH
40057: LD_INT 1
40059: PPUSH
40060: LD_INT 20
40062: NEG
40063: PPUSH
40064: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
40068: LD_VAR 0 1
40072: PUSH
40073: LD_INT 1
40075: ARRAY
40076: PPUSH
40077: LD_VAR 0 1
40081: PUSH
40082: LD_INT 2
40084: ARRAY
40085: PPUSH
40086: LD_INT 1
40088: PPUSH
40089: CALL_OW 331
// end ;
40093: GO 40036
40095: POP
40096: POP
// dwait ( 0 0$0.5 ) ;
40097: LD_INT 18
40099: PPUSH
40100: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
40104: LD_INT 42
40106: PPUSH
40107: LD_INT 27
40109: PPUSH
40110: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
40114: LD_EXP 29
40118: PPUSH
40119: LD_STRING D4Fa-Frank-1
40121: PPUSH
40122: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
40126: LD_INT 18
40128: PPUSH
40129: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
40133: LD_EXP 17
40137: PPUSH
40138: LD_STRING D4Fa-JMM-2
40140: PPUSH
40141: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
40145: LD_INT 118
40147: PPUSH
40148: LD_INT 80
40150: PPUSH
40151: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
40155: LD_EXP 29
40159: PPUSH
40160: LD_STRING D4Fa-Frank-2
40162: PPUSH
40163: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
40167: LD_INT 10
40169: PPUSH
40170: CALL_OW 68
// DialogueOff ;
40174: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40178: LD_EXP 29
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL_OW 235
// end else
40190: GO 40454
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
40192: LD_INT 2
40194: PPUSH
40195: LD_INT 4
40197: PPUSH
40198: LD_INT 2
40200: PPUSH
40201: LD_INT 1
40203: PPUSH
40204: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
40208: LD_EXP 29
40212: PPUSH
40213: LD_INT 75
40215: PPUSH
40216: LD_INT 63
40218: PPUSH
40219: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
40223: LD_EXP 29
40227: PPUSH
40228: LD_INT 175
40230: PPUSH
40231: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
40235: LD_EXP 29
40239: PPUSH
40240: LD_INT 102
40242: PPUSH
40243: LD_INT 76
40245: PPUSH
40246: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
40250: LD_EXP 29
40254: PPUSH
40255: LD_INT 108
40257: PPUSH
40258: LD_INT 70
40260: PPUSH
40261: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40265: LD_INT 35
40267: PPUSH
40268: CALL_OW 67
// until See ( 2 , Frank ) ;
40272: LD_INT 2
40274: PPUSH
40275: LD_EXP 29
40279: PPUSH
40280: CALL_OW 292
40284: IFFALSE 40265
// ComMoveXY ( Frank , 112 , 118 ) ;
40286: LD_EXP 29
40290: PPUSH
40291: LD_INT 112
40293: PPUSH
40294: LD_INT 118
40296: PPUSH
40297: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
40301: LD_EXP 29
40305: PPUSH
40306: CALL_OW 256
40310: PUSH
40311: LD_INT 750
40313: GREATEREQUAL
40314: IFFALSE 40328
// SetLives ( Frank , 700 ) ;
40316: LD_EXP 29
40320: PPUSH
40321: LD_INT 700
40323: PPUSH
40324: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
40328: LD_INT 35
40330: PPUSH
40331: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
40335: LD_INT 1
40337: PPUSH
40338: LD_EXP 29
40342: PPUSH
40343: CALL_OW 292
40347: PUSH
40348: LD_EXP 29
40352: PPUSH
40353: LD_INT 7
40355: PPUSH
40356: CALL_OW 296
40360: PUSH
40361: LD_INT 17
40363: LESS
40364: OR
40365: IFFALSE 40328
// DialogueOn ;
40367: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
40371: LD_EXP 29
40375: PPUSH
40376: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
40380: LD_EXP 29
40384: PPUSH
40385: LD_STRING D4Fb-Frank-1
40387: PPUSH
40388: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
40392: LD_EXP 17
40396: PPUSH
40397: LD_STRING D4Fb-JMM-1
40399: PPUSH
40400: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
40404: LD_INT 2
40406: PPUSH
40407: LD_STRING D4Fb-FSci1-1
40409: PPUSH
40410: CALL 2256 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
40414: LD_EXP 29
40418: PPUSH
40419: LD_STRING D4Fb-Frank-2
40421: PPUSH
40422: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
40426: LD_EXP 17
40430: PPUSH
40431: LD_STRING D4Fb-JMM-2
40433: PPUSH
40434: CALL_OW 88
// DialogueOff ;
40438: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40442: LD_EXP 29
40446: PPUSH
40447: LD_INT 1
40449: PPUSH
40450: CALL_OW 235
// end ; end else
40454: GO 40613
// if IsOk ( Kikuchi ) then
40456: LD_EXP 30
40460: PPUSH
40461: CALL_OW 302
40465: IFFALSE 40613
// begin DialogueOn ;
40467: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
40471: LD_EXP 17
40475: PUSH
40476: LD_EXP 30
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PPUSH
40485: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
40489: LD_EXP 30
40493: PPUSH
40494: LD_STRING D3Y-Yam-1
40496: PPUSH
40497: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
40501: LD_EXP 17
40505: PPUSH
40506: LD_STRING D3Y-JMM-1
40508: PPUSH
40509: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
40513: LD_EXP 30
40517: PPUSH
40518: LD_STRING D3Y-Yam-2
40520: PPUSH
40521: CALL_OW 88
// case Query ( QYamoko ) of 1 :
40525: LD_STRING QYamoko
40527: PPUSH
40528: CALL_OW 97
40532: PUSH
40533: LD_INT 1
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40576
40541: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
40542: LD_EXP 17
40546: PPUSH
40547: LD_STRING D3Ya-JMM-1
40549: PPUSH
40550: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
40554: LD_EXP 30
40558: PPUSH
40559: LD_STRING D3Ya-Yam-1
40561: PPUSH
40562: CALL_OW 88
// us_scout := 1 ;
40566: LD_ADDR_EXP 8
40570: PUSH
40571: LD_INT 1
40573: ST_TO_ADDR
// end ; 2 :
40574: GO 40609
40576: LD_INT 2
40578: DOUBLE
40579: EQUAL
40580: IFTRUE 40584
40582: GO 40608
40584: POP
// begin us_scout := - 1 ;
40585: LD_ADDR_EXP 8
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
40594: LD_EXP 17
40598: PPUSH
40599: LD_STRING D3Yb-JMM-1
40601: PPUSH
40602: CALL_OW 88
// end ; end ;
40606: GO 40609
40608: POP
// DialogueOff ;
40609: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
40613: LD_EXP 8
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: IN
40629: IFFALSE 40633
// exit ;
40631: GO 41374
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
40633: LD_ADDR_EXP 8
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: PUSH
40652: LD_OWVAR 67
40656: ARRAY
40657: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
40658: LD_EXP 8
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: IN
40673: IFFALSE 41374
// begin if IsInUnit ( Kikuchi ) then
40675: LD_EXP 30
40679: PPUSH
40680: CALL_OW 310
40684: IFFALSE 40695
// ComExitBuilding ( Kikuchi ) ;
40686: LD_EXP 30
40690: PPUSH
40691: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
40695: LD_EXP 30
40699: PPUSH
40700: CALL_OW 311
40704: IFFALSE 40715
// ComExitVehicle ( Kikuchi ) ;
40706: LD_EXP 30
40710: PPUSH
40711: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
40715: LD_EXP 30
40719: PPUSH
40720: LD_INT 4
40722: PPUSH
40723: CALL_OW 235
// wait ( 0 0$1 ) ;
40727: LD_INT 35
40729: PPUSH
40730: CALL_OW 67
// if us_scout = 2 then
40734: LD_EXP 8
40738: PUSH
40739: LD_INT 2
40741: EQUAL
40742: IFFALSE 41122
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
40744: LD_EXP 30
40748: PPUSH
40749: LD_INT 75
40751: PPUSH
40752: LD_INT 63
40754: PPUSH
40755: CALL_OW 111
// AddComHold ( Kikuchi ) ;
40759: LD_EXP 30
40763: PPUSH
40764: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
40768: LD_EXP 30
40772: PPUSH
40773: LD_INT 770
40775: PPUSH
40776: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
40780: LD_EXP 30
40784: PPUSH
40785: LD_INT 100
40787: PPUSH
40788: LD_INT 75
40790: PPUSH
40791: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
40795: LD_EXP 30
40799: PPUSH
40800: LD_INT 123
40802: PPUSH
40803: LD_INT 103
40805: PPUSH
40806: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
40810: LD_EXP 30
40814: PPUSH
40815: LD_INT 138
40817: PPUSH
40818: LD_INT 108
40820: PPUSH
40821: CALL_OW 171
// AddComHold ( Kikuchi ) ;
40825: LD_EXP 30
40829: PPUSH
40830: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
40834: LD_INT 35
40836: PPUSH
40837: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
40841: LD_EXP 30
40845: PPUSH
40846: LD_INT 138
40848: PPUSH
40849: LD_INT 108
40851: PPUSH
40852: CALL_OW 307
40856: IFFALSE 40834
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
40858: LD_EXP 30
40862: PPUSH
40863: LD_INT 125
40865: PPUSH
40866: LD_INT 132
40868: PPUSH
40869: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40873: LD_INT 35
40875: PPUSH
40876: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
40880: LD_INT 1
40882: PPUSH
40883: LD_EXP 30
40887: PPUSH
40888: CALL_OW 292
40892: PUSH
40893: LD_EXP 30
40897: PPUSH
40898: LD_INT 7
40900: PPUSH
40901: CALL_OW 296
40905: PUSH
40906: LD_INT 7
40908: LESS
40909: OR
40910: IFFALSE 40873
// DialogueOn ;
40912: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
40916: LD_EXP 30
40920: PPUSH
40921: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
40925: LD_INT 10
40927: PPUSH
40928: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
40932: LD_EXP 30
40936: PPUSH
40937: LD_STRING D4Ya-Yam-1
40939: PPUSH
40940: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
40944: LD_EXP 17
40948: PPUSH
40949: LD_STRING D4Ya-JMM-1
40951: PPUSH
40952: CALL_OW 88
// for i in points do
40956: LD_ADDR_VAR 0 1
40960: PUSH
40961: LD_VAR 0 2
40965: PUSH
40966: FOR_IN
40967: IFFALSE 41025
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
40969: LD_VAR 0 1
40973: PUSH
40974: LD_INT 1
40976: ARRAY
40977: PPUSH
40978: LD_VAR 0 1
40982: PUSH
40983: LD_INT 2
40985: ARRAY
40986: PPUSH
40987: LD_INT 1
40989: PPUSH
40990: LD_INT 20
40992: NEG
40993: PPUSH
40994: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
40998: LD_VAR 0 1
41002: PUSH
41003: LD_INT 1
41005: ARRAY
41006: PPUSH
41007: LD_VAR 0 1
41011: PUSH
41012: LD_INT 2
41014: ARRAY
41015: PPUSH
41016: LD_INT 1
41018: PPUSH
41019: CALL_OW 331
// end ;
41023: GO 40966
41025: POP
41026: POP
// dwait ( 0 0$0.5 ) ;
41027: LD_INT 18
41029: PPUSH
41030: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41034: LD_INT 42
41036: PPUSH
41037: LD_INT 27
41039: PPUSH
41040: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
41044: LD_EXP 30
41048: PPUSH
41049: LD_STRING D4Ya-Yam-2
41051: PPUSH
41052: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41056: LD_INT 18
41058: PPUSH
41059: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
41063: LD_INT 118
41065: PPUSH
41066: LD_INT 80
41068: PPUSH
41069: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
41073: LD_EXP 17
41077: PPUSH
41078: LD_STRING D4Ya-JMM-2
41080: PPUSH
41081: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
41085: LD_EXP 30
41089: PPUSH
41090: LD_STRING D4Ya-Yam-3
41092: PPUSH
41093: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41097: LD_INT 10
41099: PPUSH
41100: CALL_OW 68
// DialogueOff ;
41104: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41108: LD_EXP 30
41112: PPUSH
41113: LD_INT 1
41115: PPUSH
41116: CALL_OW 235
// end else
41120: GO 41374
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41122: LD_INT 2
41124: PPUSH
41125: LD_INT 4
41127: PPUSH
41128: LD_INT 2
41130: PPUSH
41131: LD_INT 1
41133: PPUSH
41134: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
41138: LD_EXP 30
41142: PPUSH
41143: LD_INT 75
41145: PPUSH
41146: LD_INT 63
41148: PPUSH
41149: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
41153: LD_EXP 30
41157: PPUSH
41158: LD_INT 175
41160: PPUSH
41161: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
41165: LD_EXP 30
41169: PPUSH
41170: LD_INT 102
41172: PPUSH
41173: LD_INT 76
41175: PPUSH
41176: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
41180: LD_EXP 30
41184: PPUSH
41185: LD_INT 108
41187: PPUSH
41188: LD_INT 70
41190: PPUSH
41191: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41195: LD_INT 35
41197: PPUSH
41198: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
41202: LD_INT 2
41204: PPUSH
41205: LD_EXP 30
41209: PPUSH
41210: CALL_OW 292
41214: IFFALSE 41195
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
41216: LD_EXP 30
41220: PPUSH
41221: LD_INT 112
41223: PPUSH
41224: LD_INT 118
41226: PPUSH
41227: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
41231: LD_EXP 30
41235: PPUSH
41236: CALL_OW 256
41240: PUSH
41241: LD_INT 750
41243: GREATEREQUAL
41244: IFFALSE 41258
// SetLives ( Kikuchi , 700 ) ;
41246: LD_EXP 30
41250: PPUSH
41251: LD_INT 700
41253: PPUSH
41254: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41258: LD_INT 35
41260: PPUSH
41261: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
41265: LD_INT 1
41267: PPUSH
41268: LD_EXP 30
41272: PPUSH
41273: CALL_OW 292
41277: PUSH
41278: LD_EXP 30
41282: PPUSH
41283: LD_INT 7
41285: PPUSH
41286: CALL_OW 296
41290: PUSH
41291: LD_INT 17
41293: LESS
41294: OR
41295: IFFALSE 41258
// DialogueOn ;
41297: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
41301: LD_EXP 30
41305: PPUSH
41306: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
41310: LD_EXP 30
41314: PPUSH
41315: LD_STRING D4Yb-Yam-1
41317: PPUSH
41318: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
41322: LD_EXP 17
41326: PPUSH
41327: LD_STRING D4Yb-JMM-1
41329: PPUSH
41330: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
41334: LD_EXP 30
41338: PPUSH
41339: LD_STRING D4Yb-Yam-2
41341: PPUSH
41342: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
41346: LD_EXP 17
41350: PPUSH
41351: LD_STRING D4Yb-JMM-2
41353: PPUSH
41354: CALL_OW 88
// DialogueOff ;
41358: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41362: LD_EXP 30
41366: PPUSH
41367: LD_INT 1
41369: PPUSH
41370: CALL_OW 235
// end ; end ; end ;
41374: PPOPN 2
41376: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
41377: LD_EXP 6
41381: IFFALSE 42406
41383: GO 41385
41385: DISABLE
41386: LD_INT 0
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
// begin enable ;
41392: ENABLE
// if not seen [ 1 ] then
41393: LD_EXP 9
41397: PUSH
41398: LD_INT 1
41400: ARRAY
41401: NOT
41402: IFFALSE 41582
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
41404: LD_ADDR_VAR 0 2
41408: PUSH
41409: LD_INT 22
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 25
41424: PUSH
41425: LD_INT 11
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 33
41434: PUSH
41435: LD_INT 4
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PPUSH
41451: CALL_OW 69
41455: ST_TO_ADDR
// if tmp then
41456: LD_VAR 0 2
41460: IFFALSE 41582
// for i in tmp do
41462: LD_ADDR_VAR 0 1
41466: PUSH
41467: LD_VAR 0 2
41471: PUSH
41472: FOR_IN
41473: IFFALSE 41580
// if See ( 1 , i ) then
41475: LD_INT 1
41477: PPUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 292
41487: IFFALSE 41578
// begin seen := Replace ( seen , 1 , true ) ;
41489: LD_ADDR_EXP 9
41493: PUSH
41494: LD_EXP 9
41498: PPUSH
41499: LD_INT 1
41501: PPUSH
41502: LD_INT 1
41504: PPUSH
41505: CALL_OW 1
41509: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41510: LD_INT 1
41512: PPUSH
41513: CALL 2085 0 1
41517: IFFALSE 41578
// begin DialogueOn ;
41519: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41523: LD_VAR 0 1
41527: PPUSH
41528: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41532: LD_INT 10
41534: PPUSH
41535: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_INT 1
41546: PPUSH
41547: LD_STRING D5a-Sol2-1
41549: PPUSH
41550: CALL 2256 0 2
41554: ST_TO_ADDR
// if not un then
41555: LD_VAR 0 3
41559: NOT
41560: IFFALSE 41572
// SayRand ( sex_female , D5a-FSol2-1 ) ;
41562: LD_INT 2
41564: PPUSH
41565: LD_STRING D5a-FSol2-1
41567: PPUSH
41568: CALL 2256 0 2
// DialogueOff ;
41572: CALL_OW 7
// break ;
41576: GO 41580
// end ; end ;
41578: GO 41472
41580: POP
41581: POP
// end ; if not seen [ 2 ] then
41582: LD_EXP 9
41586: PUSH
41587: LD_INT 2
41589: ARRAY
41590: NOT
41591: IFFALSE 41808
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
41593: LD_ADDR_VAR 0 2
41597: PUSH
41598: LD_INT 22
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 25
41610: PUSH
41611: LD_INT 17
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PPUSH
41622: CALL_OW 69
41626: ST_TO_ADDR
// if tmp then
41627: LD_VAR 0 2
41631: IFFALSE 41808
// for i in tmp do
41633: LD_ADDR_VAR 0 1
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: FOR_IN
41644: IFFALSE 41806
// if See ( 1 , i ) then
41646: LD_INT 1
41648: PPUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: CALL_OW 292
41658: IFFALSE 41804
// begin seen := Replace ( seen , 2 , true ) ;
41660: LD_ADDR_EXP 9
41664: PUSH
41665: LD_EXP 9
41669: PPUSH
41670: LD_INT 2
41672: PPUSH
41673: LD_INT 1
41675: PPUSH
41676: CALL_OW 1
41680: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41681: LD_INT 1
41683: PPUSH
41684: CALL 2085 0 1
41688: IFFALSE 41804
// begin DialogueOn ;
41690: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41694: LD_VAR 0 1
41698: PPUSH
41699: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41703: LD_INT 10
41705: PPUSH
41706: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 1
41717: PPUSH
41718: LD_STRING D5b-Sol1-1
41720: PPUSH
41721: CALL 2256 0 2
41725: ST_TO_ADDR
// if not un then
41726: LD_VAR 0 3
41730: NOT
41731: IFFALSE 41749
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
41733: LD_ADDR_VAR 0 3
41737: PUSH
41738: LD_INT 2
41740: PPUSH
41741: LD_STRING D5b-FSol1-1
41743: PPUSH
41744: CALL 2256 0 2
41748: ST_TO_ADDR
// if un then
41749: LD_VAR 0 3
41753: IFFALSE 41798
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: LD_INT 1
41762: PPUSH
41763: LD_STRING D5b-Sol2-1
41765: PPUSH
41766: LD_VAR 0 3
41770: PPUSH
41771: CALL 2475 0 3
41775: ST_TO_ADDR
// if not un2 then
41776: LD_VAR 0 4
41780: NOT
41781: IFFALSE 41798
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
41783: LD_INT 2
41785: PPUSH
41786: LD_STRING D5b-FSol2-1
41788: PPUSH
41789: LD_VAR 0 3
41793: PPUSH
41794: CALL 2475 0 3
// end ; DialogueOff ;
41798: CALL_OW 7
// break ;
41802: GO 41806
// end ; end ;
41804: GO 41643
41806: POP
41807: POP
// end ; if not seen [ 3 ] then
41808: LD_EXP 9
41812: PUSH
41813: LD_INT 3
41815: ARRAY
41816: NOT
41817: IFFALSE 41991
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
41819: LD_ADDR_VAR 0 2
41823: PUSH
41824: LD_INT 22
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 33
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PPUSH
41848: CALL_OW 69
41852: ST_TO_ADDR
// if tmp then
41853: LD_VAR 0 2
41857: IFFALSE 41991
// for i in tmp do
41859: LD_ADDR_VAR 0 1
41863: PUSH
41864: LD_VAR 0 2
41868: PUSH
41869: FOR_IN
41870: IFFALSE 41989
// if See ( 1 , i ) then
41872: LD_INT 1
41874: PPUSH
41875: LD_VAR 0 1
41879: PPUSH
41880: CALL_OW 292
41884: IFFALSE 41987
// begin seen := Replace ( seen , 3 , true ) ;
41886: LD_ADDR_EXP 9
41890: PUSH
41891: LD_EXP 9
41895: PPUSH
41896: LD_INT 3
41898: PPUSH
41899: LD_INT 1
41901: PPUSH
41902: CALL_OW 1
41906: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41907: LD_INT 1
41909: PPUSH
41910: CALL 2085 0 1
41914: IFFALSE 41987
// begin DialogueOn ;
41916: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41920: LD_VAR 0 1
41924: PPUSH
41925: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41929: LD_INT 10
41931: PPUSH
41932: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_INT 1
41943: PPUSH
41944: LD_STRING D8-Sol1-1
41946: PPUSH
41947: CALL 2256 0 2
41951: ST_TO_ADDR
// if not un then
41952: LD_VAR 0 3
41956: NOT
41957: IFFALSE 41969
// SayRand ( sex_female , D8-FSol1-1 ) ;
41959: LD_INT 2
41961: PPUSH
41962: LD_STRING D8-FSol1-1
41964: PPUSH
41965: CALL 2256 0 2
// Say ( JMM , D8-JMM-1 ) ;
41969: LD_EXP 17
41973: PPUSH
41974: LD_STRING D8-JMM-1
41976: PPUSH
41977: CALL_OW 88
// DialogueOff ;
41981: CALL_OW 7
// break ;
41985: GO 41989
// end ; end ;
41987: GO 41869
41989: POP
41990: POP
// end ; if not seen [ 4 ] then
41991: LD_EXP 9
41995: PUSH
41996: LD_INT 4
41998: ARRAY
41999: NOT
42000: IFFALSE 42162
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
42002: LD_ADDR_VAR 0 2
42006: PUSH
42007: LD_INT 22
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 33
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PPUSH
42031: CALL_OW 69
42035: ST_TO_ADDR
// if tmp then
42036: LD_VAR 0 2
42040: IFFALSE 42162
// for i in tmp do
42042: LD_ADDR_VAR 0 1
42046: PUSH
42047: LD_VAR 0 2
42051: PUSH
42052: FOR_IN
42053: IFFALSE 42160
// if See ( 1 , i ) then
42055: LD_INT 1
42057: PPUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: CALL_OW 292
42067: IFFALSE 42158
// begin seen := Replace ( seen , 4 , true ) ;
42069: LD_ADDR_EXP 9
42073: PUSH
42074: LD_EXP 9
42078: PPUSH
42079: LD_INT 4
42081: PPUSH
42082: LD_INT 1
42084: PPUSH
42085: CALL_OW 1
42089: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42090: LD_INT 1
42092: PPUSH
42093: CALL 2085 0 1
42097: IFFALSE 42158
// begin DialogueOn ;
42099: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42112: LD_INT 10
42114: PPUSH
42115: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: LD_INT 1
42126: PPUSH
42127: LD_STRING D5a-Sol1-1
42129: PPUSH
42130: CALL 2256 0 2
42134: ST_TO_ADDR
// if not un then
42135: LD_VAR 0 3
42139: NOT
42140: IFFALSE 42152
// SayRand ( sex_female , D5a-FSol1-1 ) ;
42142: LD_INT 2
42144: PPUSH
42145: LD_STRING D5a-FSol1-1
42147: PPUSH
42148: CALL 2256 0 2
// DialogueOff ;
42152: CALL_OW 7
// break ;
42156: GO 42160
// end ; end ;
42158: GO 42052
42160: POP
42161: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
42162: LD_EXP 9
42166: PUSH
42167: LD_INT 5
42169: ARRAY
42170: NOT
42171: PUSH
42172: LD_EXP 9
42176: PUSH
42177: LD_INT 3
42179: ARRAY
42180: AND
42181: IFFALSE 42355
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
42183: LD_ADDR_VAR 0 2
42187: PUSH
42188: LD_INT 22
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 34
42200: PUSH
42201: LD_INT 31
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PPUSH
42212: CALL_OW 69
42216: ST_TO_ADDR
// if tmp then
42217: LD_VAR 0 2
42221: IFFALSE 42355
// for i in tmp do
42223: LD_ADDR_VAR 0 1
42227: PUSH
42228: LD_VAR 0 2
42232: PUSH
42233: FOR_IN
42234: IFFALSE 42353
// if See ( 1 , i ) then
42236: LD_INT 1
42238: PPUSH
42239: LD_VAR 0 1
42243: PPUSH
42244: CALL_OW 292
42248: IFFALSE 42351
// begin seen := Replace ( seen , 5 , true ) ;
42250: LD_ADDR_EXP 9
42254: PUSH
42255: LD_EXP 9
42259: PPUSH
42260: LD_INT 5
42262: PPUSH
42263: LD_INT 1
42265: PPUSH
42266: CALL_OW 1
42270: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42271: LD_INT 1
42273: PPUSH
42274: CALL 2085 0 1
42278: IFFALSE 42351
// begin DialogueOn ;
42280: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42284: LD_VAR 0 1
42288: PPUSH
42289: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42293: LD_INT 10
42295: PPUSH
42296: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_INT 1
42307: PPUSH
42308: LD_STRING D8a-Sol2-1
42310: PPUSH
42311: CALL 2256 0 2
42315: ST_TO_ADDR
// if not un then
42316: LD_VAR 0 3
42320: NOT
42321: IFFALSE 42333
// SayRand ( sex_female , D8a-FSol2-1 ) ;
42323: LD_INT 2
42325: PPUSH
42326: LD_STRING D8a-FSol2-1
42328: PPUSH
42329: CALL 2256 0 2
// Say ( JMM , D8a-JMM-1 ) ;
42333: LD_EXP 17
42337: PPUSH
42338: LD_STRING D8a-JMM-1
42340: PPUSH
42341: CALL_OW 88
// DialogueOff ;
42345: CALL_OW 7
// break ;
42349: GO 42353
// end ; end ;
42351: GO 42233
42353: POP
42354: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
42355: LD_EXP 9
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: PUSH
42364: LD_EXP 9
42368: PUSH
42369: LD_INT 2
42371: ARRAY
42372: AND
42373: PUSH
42374: LD_EXP 9
42378: PUSH
42379: LD_INT 3
42381: ARRAY
42382: AND
42383: PUSH
42384: LD_EXP 9
42388: PUSH
42389: LD_INT 4
42391: ARRAY
42392: AND
42393: PUSH
42394: LD_EXP 9
42398: PUSH
42399: LD_INT 5
42401: ARRAY
42402: AND
42403: IFFALSE 42406
// disable ;
42405: DISABLE
// end ;
42406: PPOPN 4
42408: END
// every 0 0$1 trigger kamikazed do var un ;
42409: LD_EXP 10
42413: IFFALSE 42611
42415: GO 42417
42417: DISABLE
42418: LD_INT 0
42420: PPUSH
// begin DialogueOn ;
42421: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
42425: LD_EXP 10
42429: PPUSH
42430: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
42434: LD_ADDR_VAR 0 1
42438: PUSH
42439: LD_INT 1
42441: PPUSH
42442: LD_STRING D5c-Sol1-1
42444: PPUSH
42445: CALL 2256 0 2
42449: ST_TO_ADDR
// if not un then
42450: LD_VAR 0 1
42454: NOT
42455: IFFALSE 42473
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
42457: LD_ADDR_VAR 0 1
42461: PUSH
42462: LD_INT 2
42464: PPUSH
42465: LD_STRING D5c-Sol1-1
42467: PPUSH
42468: CALL 2256 0 2
42472: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
42473: LD_EXP 17
42477: PPUSH
42478: LD_STRING D5c-JMM-1
42480: PPUSH
42481: CALL_OW 88
// if IsOk ( Lisa ) then
42485: LD_EXP 18
42489: PPUSH
42490: CALL_OW 302
42494: IFFALSE 42510
// Say ( Lisa , D5d-Lisa-1 ) else
42496: LD_EXP 18
42500: PPUSH
42501: LD_STRING D5d-Lisa-1
42503: PPUSH
42504: CALL_OW 88
42508: GO 42595
// if IsOk ( Cyrus ) then
42510: LD_EXP 21
42514: PPUSH
42515: CALL_OW 302
42519: IFFALSE 42535
// Say ( Cyrus , D5d-Cyrus-1 ) else
42521: LD_EXP 21
42525: PPUSH
42526: LD_STRING D5d-Cyrus-1
42528: PPUSH
42529: CALL_OW 88
42533: GO 42595
// if IsOk ( Gary ) then
42535: LD_EXP 28
42539: PPUSH
42540: CALL_OW 302
42544: IFFALSE 42560
// Say ( Gary , D5d-Gary-1 ) else
42546: LD_EXP 28
42550: PPUSH
42551: LD_STRING D5d-Gary-1
42553: PPUSH
42554: CALL_OW 88
42558: GO 42595
// if GetSex ( un ) = sex_male then
42560: LD_VAR 0 1
42564: PPUSH
42565: CALL_OW 258
42569: PUSH
42570: LD_INT 1
42572: EQUAL
42573: IFFALSE 42589
// Say ( un , D5d-Sol1-1 ) else
42575: LD_VAR 0 1
42579: PPUSH
42580: LD_STRING D5d-Sol1-1
42582: PPUSH
42583: CALL_OW 88
42587: GO 42595
// begin DialogueOff ;
42589: CALL_OW 7
// exit ;
42593: GO 42611
// end ; Say ( JMM , D5d-JMM-1 ) ;
42595: LD_EXP 17
42599: PPUSH
42600: LD_STRING D5d-JMM-1
42602: PPUSH
42603: CALL_OW 88
// DialogueOff ;
42607: CALL_OW 7
// end ;
42611: PPOPN 1
42613: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
42614: LD_INT 1
42616: PPUSH
42617: LD_INT 17
42619: PPUSH
42620: CALL_OW 294
42624: PUSH
42625: LD_INT 2
42627: GREATEREQUAL
42628: IFFALSE 42749
42630: GO 42632
42632: DISABLE
42633: LD_INT 0
42635: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
42636: LD_INT 10
42638: PPUSH
42639: LD_INT 5
42641: PPUSH
42642: LD_INT 1
42644: PPUSH
42645: LD_INT 10
42647: NEG
42648: PPUSH
42649: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
42653: LD_INT 10
42655: PPUSH
42656: LD_INT 5
42658: PPUSH
42659: LD_INT 1
42661: PPUSH
42662: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
42666: LD_INT 10
42668: PPUSH
42669: LD_INT 5
42671: PPUSH
42672: CALL_OW 86
// DialogueOn ;
42676: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
42680: LD_ADDR_VAR 0 1
42684: PUSH
42685: LD_INT 1
42687: PPUSH
42688: LD_STRING D6-Sci1-1
42690: PPUSH
42691: CALL 2256 0 2
42695: ST_TO_ADDR
// if un then
42696: LD_VAR 0 1
42700: IFFALSE 42738
// begin Say ( JMM , D6-JMM-1 ) ;
42702: LD_EXP 17
42706: PPUSH
42707: LD_STRING D6-JMM-1
42709: PPUSH
42710: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
42714: LD_VAR 0 1
42718: PPUSH
42719: LD_STRING D6-Sci1-2
42721: PPUSH
42722: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
42726: LD_EXP 17
42730: PPUSH
42731: LD_STRING D6-JMM-2
42733: PPUSH
42734: CALL_OW 88
// end ; DialogueOff ;
42738: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
42742: LD_STRING M3
42744: PPUSH
42745: CALL_OW 337
// end ;
42749: PPOPN 1
42751: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
42752: LD_OWVAR 1
42756: PUSH
42757: LD_INT 65100
42759: GREATEREQUAL
42760: PUSH
42761: LD_INT 2
42763: PPUSH
42764: LD_INT 169
42766: PPUSH
42767: LD_INT 90
42769: PPUSH
42770: LD_INT 40
42772: PPUSH
42773: CALL 3693 0 4
42777: PUSH
42778: LD_INT 4
42780: ARRAY
42781: PUSH
42782: LD_INT 0
42784: EQUAL
42785: AND
42786: IFFALSE 43820
42788: GO 42790
42790: DISABLE
42791: LD_INT 0
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
// begin uc_side := 5 ;
42797: LD_ADDR_OWVAR 20
42801: PUSH
42802: LD_INT 5
42804: ST_TO_ADDR
// uc_nation := 2 ;
42805: LD_ADDR_OWVAR 21
42809: PUSH
42810: LD_INT 2
42812: ST_TO_ADDR
// InitHc ;
42813: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
42817: LD_INT 1
42819: PPUSH
42820: LD_INT 3
42822: PPUSH
42823: LD_INT 8
42825: PPUSH
42826: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42830: LD_ADDR_OWVAR 29
42834: PUSH
42835: LD_INT 12
42837: PUSH
42838: LD_INT 12
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
42845: LD_ADDR_OWVAR 33
42849: PUSH
42850: LD_STRING SecondCharsGal
42852: ST_TO_ADDR
// hc_face_number := 7 ;
42853: LD_ADDR_OWVAR 34
42857: PUSH
42858: LD_INT 7
42860: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
42861: LD_ADDR_EXP 41
42865: PUSH
42866: CALL_OW 44
42870: ST_TO_ADDR
// InitHc ;
42871: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
42875: LD_INT 1
42877: PPUSH
42878: LD_INT 16
42880: PPUSH
42881: LD_INT 2
42883: PPUSH
42884: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42888: LD_ADDR_OWVAR 29
42892: PUSH
42893: LD_INT 12
42895: PUSH
42896: LD_INT 12
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// hc_name := Livid ;
42903: LD_ADDR_OWVAR 26
42907: PUSH
42908: LD_STRING Livid
42910: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
42911: LD_ADDR_EXP 42
42915: PUSH
42916: CALL_OW 44
42920: ST_TO_ADDR
// InitHc ;
42921: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
42925: LD_INT 35
42927: PPUSH
42928: CALL_OW 67
// until not InBattle ( 1 ) ;
42932: LD_INT 1
42934: PPUSH
42935: CALL_OW 463
42939: NOT
42940: IFFALSE 42925
// wait ( 0 0$5 ) ;
42942: LD_INT 175
42944: PPUSH
42945: CALL_OW 67
// DialogueOn ;
42949: CALL_OW 6
// InGameOn ;
42953: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
42957: LD_ADDR_VAR 0 1
42961: PUSH
42962: LD_EXP 31
42966: PUSH
42967: LD_EXP 18
42971: PUSH
42972: LD_EXP 19
42976: PUSH
42977: LD_EXP 20
42981: PUSH
42982: LD_EXP 21
42986: PUSH
42987: LD_EXP 22
42991: PUSH
42992: LD_EXP 23
42996: PUSH
42997: LD_EXP 24
43001: PUSH
43002: LD_EXP 25
43006: PUSH
43007: LD_EXP 27
43011: PUSH
43012: LD_EXP 28
43016: PUSH
43017: LD_EXP 29
43021: PUSH
43022: LD_EXP 30
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: DIFF
43041: PPUSH
43042: LD_INT 26
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PPUSH
43052: CALL_OW 72
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: ST_TO_ADDR
// if not un and Brown then
43061: LD_VAR 0 1
43065: NOT
43066: PUSH
43067: LD_EXP 23
43071: AND
43072: IFFALSE 43084
// un := Brown ;
43074: LD_ADDR_VAR 0 1
43078: PUSH
43079: LD_EXP 23
43083: ST_TO_ADDR
// if un then
43084: LD_VAR 0 1
43088: IFFALSE 43114
// begin Say ( un , D7-Sol1-1 ) ;
43090: LD_VAR 0 1
43094: PPUSH
43095: LD_STRING D7-Sol1-1
43097: PPUSH
43098: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
43102: LD_EXP 17
43106: PPUSH
43107: LD_STRING D7-JMM-1
43109: PPUSH
43110: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
43114: LD_EXP 41
43118: PPUSH
43119: LD_STRING D7-Ar1-1
43121: PPUSH
43122: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
43126: LD_EXP 17
43130: PPUSH
43131: LD_STRING D7-JMM-2
43133: PPUSH
43134: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
43138: LD_EXP 41
43142: PPUSH
43143: LD_STRING D7-Ar1-2
43145: PPUSH
43146: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
43150: LD_EXP 17
43154: PPUSH
43155: LD_STRING D7-JMM-3
43157: PPUSH
43158: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
43162: LD_EXP 41
43166: PPUSH
43167: LD_STRING D7-Ar1-3
43169: PPUSH
43170: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
43174: LD_EXP 17
43178: PPUSH
43179: LD_STRING D7-JMM-4
43181: PPUSH
43182: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
43186: LD_EXP 41
43190: PPUSH
43191: LD_STRING D7-Ar1-4
43193: PPUSH
43194: CALL_OW 94
// InGameOff ;
43198: CALL_OW 9
// DialogueOff ;
43202: CALL_OW 7
// case Query ( QCameras ) of 1 :
43206: LD_STRING QCameras
43208: PPUSH
43209: CALL_OW 97
43213: PUSH
43214: LD_INT 1
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43225
43222: POP
// ; 2 :
43223: GO 43239
43225: LD_INT 2
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 43238
43233: POP
// exit ; end ;
43234: GO 43820
43236: GO 43239
43238: POP
// ChangeMissionObjectives ( MCar ) ;
43239: LD_STRING MCar
43241: PPUSH
43242: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
43246: LD_INT 124
43248: PPUSH
43249: LD_INT 90
43251: PPUSH
43252: LD_INT 1
43254: PPUSH
43255: LD_INT 6
43257: NEG
43258: PPUSH
43259: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
43263: LD_INT 124
43265: PPUSH
43266: LD_INT 90
43268: PPUSH
43269: LD_INT 1
43271: PPUSH
43272: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
43276: LD_INT 12
43278: PPUSH
43279: LD_INT 1
43281: PPUSH
43282: CALL_OW 424
// wait ( 3 ) ;
43286: LD_INT 3
43288: PPUSH
43289: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
43293: LD_INT 124
43295: PPUSH
43296: LD_INT 90
43298: PPUSH
43299: CALL_OW 86
// cargo := false ;
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
43311: LD_INT 35
43313: PPUSH
43314: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
43318: LD_ADDR_VAR 0 3
43322: PUSH
43323: LD_INT 12
43325: PPUSH
43326: LD_INT 32
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 34
43338: PUSH
43339: LD_INT 32
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 58
43348: PUSH
43349: EMPTY
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: PPUSH
43357: CALL_OW 70
43361: ST_TO_ADDR
// until cargo ;
43362: LD_VAR 0 3
43366: IFFALSE 43311
// cargo := cargo [ 1 ] ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_VAR 0 3
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
43382: LD_VAR 0 3
43386: PPUSH
43387: LD_INT 5
43389: PPUSH
43390: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
43394: LD_INT 12
43396: PPUSH
43397: LD_INT 0
43399: PPUSH
43400: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
43404: LD_EXP 41
43408: PPUSH
43409: LD_INT 11
43411: PPUSH
43412: LD_INT 0
43414: PPUSH
43415: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
43419: LD_EXP 42
43423: PPUSH
43424: LD_INT 11
43426: PPUSH
43427: LD_INT 0
43429: PPUSH
43430: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
43434: LD_EXP 41
43438: PUSH
43439: LD_EXP 42
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PPUSH
43448: LD_INT 12
43450: PPUSH
43451: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
43455: LD_EXP 41
43459: PPUSH
43460: LD_VAR 0 3
43464: PPUSH
43465: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43469: LD_EXP 41
43473: PUSH
43474: LD_EXP 42
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PPUSH
43483: LD_INT 209
43485: PPUSH
43486: LD_INT 178
43488: PPUSH
43489: CALL_OW 171
// while ( true ) do
43493: LD_INT 1
43495: IFFALSE 43649
// begin wait ( 0 0$1 ) ;
43497: LD_INT 35
43499: PPUSH
43500: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
43504: LD_EXP 41
43508: PPUSH
43509: CALL_OW 314
43513: NOT
43514: PUSH
43515: LD_EXP 42
43519: PPUSH
43520: CALL_OW 314
43524: NOT
43525: OR
43526: IFFALSE 43552
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43528: LD_EXP 41
43532: PUSH
43533: LD_EXP 42
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PPUSH
43542: LD_INT 209
43544: PPUSH
43545: LD_INT 178
43547: PPUSH
43548: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
43552: LD_EXP 41
43556: PPUSH
43557: LD_INT 10
43559: PPUSH
43560: CALL_OW 308
43564: IFFALSE 43575
// RemoveUnit ( ar_mechanic ) ;
43566: LD_EXP 41
43570: PPUSH
43571: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
43575: LD_EXP 42
43579: PPUSH
43580: LD_INT 10
43582: PPUSH
43583: CALL_OW 308
43587: IFFALSE 43598
// RemoveUnit ( ar_mechanic_friend ) ;
43589: LD_EXP 42
43593: PPUSH
43594: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
43598: LD_VAR 0 3
43602: PPUSH
43603: LD_INT 10
43605: PPUSH
43606: CALL_OW 308
43610: IFFALSE 43621
// RemoveUnit ( cargo ) ;
43612: LD_VAR 0 3
43616: PPUSH
43617: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
43621: LD_EXP 41
43625: PPUSH
43626: CALL_OW 300
43630: NOT
43631: PUSH
43632: LD_EXP 42
43636: PPUSH
43637: CALL_OW 300
43641: NOT
43642: AND
43643: IFFALSE 43647
// break ;
43645: GO 43649
// end ;
43647: GO 43493
// wait ( 0 0$2 ) ;
43649: LD_INT 70
43651: PPUSH
43652: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
43656: LD_EXP 41
43660: PPUSH
43661: LD_STRING D7a-Ar1-1
43663: PPUSH
43664: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
43668: LD_ADDR_VAR 0 4
43672: PUSH
43673: LD_INT 129
43675: PUSH
43676: LD_INT 10
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 103
43685: PUSH
43686: LD_INT 6
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 148
43695: PUSH
43696: LD_INT 47
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 155
43705: PUSH
43706: LD_INT 16
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// if Difficulty = 1 then
43719: LD_OWVAR 67
43723: PUSH
43724: LD_INT 1
43726: EQUAL
43727: IFFALSE 43764
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
43729: LD_ADDR_VAR 0 4
43733: PUSH
43734: LD_VAR 0 4
43738: PUSH
43739: LD_INT 78
43741: PUSH
43742: LD_INT 7
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 104
43751: PUSH
43752: LD_INT 43
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: ADD
43763: ST_TO_ADDR
// for i in tmp do
43764: LD_ADDR_VAR 0 2
43768: PUSH
43769: LD_VAR 0 4
43773: PUSH
43774: FOR_IN
43775: IFFALSE 43808
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
43777: LD_VAR 0 2
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: LD_VAR 0 2
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: PPUSH
43795: LD_INT 1
43797: PPUSH
43798: LD_INT 9
43800: NEG
43801: PPUSH
43802: CALL_OW 330
43806: GO 43774
43808: POP
43809: POP
// CenterOnXY ( 129 , 10 ) ;
43810: LD_INT 129
43812: PPUSH
43813: LD_INT 10
43815: PPUSH
43816: CALL_OW 84
// end ;
43820: PPOPN 4
43822: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
43823: LD_EXP 14
43827: PUSH
43828: LD_INT 21000
43830: MINUS
43831: PUSH
43832: LD_OWVAR 1
43836: LESSEQUAL
43837: IFFALSE 43877
43839: GO 43841
43841: DISABLE
// begin powell_warn := true ;
43842: LD_ADDR_EXP 15
43846: PUSH
43847: LD_INT 1
43849: ST_TO_ADDR
// DialogueOn ;
43850: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
43854: LD_EXP 26
43858: PPUSH
43859: LD_STRING D9-Pow-1
43861: PPUSH
43862: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
43866: LD_INT 10
43868: PPUSH
43869: CALL_OW 68
// DialogueOff ;
43873: CALL_OW 7
// end ;
43877: END
// every 0 0$1 trigger game_time <= tick do
43878: LD_EXP 14
43882: PUSH
43883: LD_OWVAR 1
43887: LESSEQUAL
43888: IFFALSE 43927
43890: GO 43892
43892: DISABLE
// begin DialogueOn ;
43893: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
43897: LD_EXP 26
43901: PPUSH
43902: LD_STRING D9a-Pow-1
43904: PPUSH
43905: CALL_OW 94
// dwait ( 0 0$2 ) ;
43909: LD_INT 70
43911: PPUSH
43912: CALL_OW 68
// DialogueOff ;
43916: CALL_OW 7
// YouLost ( Command ) ;
43920: LD_STRING Command
43922: PPUSH
43923: CALL_OW 104
// end ;
43927: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
43928: LD_EXP 17
43932: PPUSH
43933: CALL_OW 301
43937: PUSH
43938: LD_EXP 5
43942: AND
43943: IFFALSE 43955
43945: GO 43947
43947: DISABLE
// YouLost ( JMM ) ;
43948: LD_STRING JMM
43950: PPUSH
43951: CALL_OW 104
43955: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
43956: LD_INT 22
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 30
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PPUSH
43980: CALL_OW 69
43984: PUSH
43985: LD_INT 0
43987: EQUAL
43988: PUSH
43989: LD_EXP 17
43993: PPUSH
43994: CALL_OW 302
43998: AND
43999: IFFALSE 44740
44001: GO 44003
44003: DISABLE
// begin DialogueOn ;
44004: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
44008: LD_OWVAR 1
44012: PUSH
44013: LD_INT 126000
44015: PUSH
44016: LD_INT 105000
44018: PUSH
44019: LD_INT 94500
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: PUSH
44027: LD_OWVAR 67
44031: ARRAY
44032: LESS
44033: IFFALSE 44047
// AddMedal ( Time1 , 2 ) else
44035: LD_STRING Time1
44037: PPUSH
44038: LD_INT 2
44040: PPUSH
44041: CALL_OW 101
44045: GO 44077
// if not powell_warn then
44047: LD_EXP 15
44051: NOT
44052: IFFALSE 44066
// AddMedal ( Time1 , 1 ) else
44054: LD_STRING Time1
44056: PPUSH
44057: LD_INT 1
44059: PPUSH
44060: CALL_OW 101
44064: GO 44077
// AddMedal ( Time1 , - 1 ) ;
44066: LD_STRING Time1
44068: PPUSH
44069: LD_INT 1
44071: NEG
44072: PPUSH
44073: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
44077: LD_EXP 16
44081: PUSH
44082: LD_INT 5
44084: PUSH
44085: LD_INT 4
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: PUSH
44096: LD_OWVAR 67
44100: ARRAY
44101: GREATEREQUAL
44102: IFFALSE 44117
// AddMedal ( Destroy , - 2 ) else
44104: LD_STRING Destroy
44106: PPUSH
44107: LD_INT 2
44109: NEG
44110: PPUSH
44111: CALL_OW 101
44115: GO 44234
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
44117: LD_INT 22
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 21
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 50
44139: PUSH
44140: EMPTY
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: PPUSH
44148: CALL_OW 69
44152: PUSH
44153: LD_INT 20
44155: GREATEREQUAL
44156: IFFALSE 44171
// AddMedal ( Destroy , - 1 ) else
44158: LD_STRING Destroy
44160: PPUSH
44161: LD_INT 1
44163: NEG
44164: PPUSH
44165: CALL_OW 101
44169: GO 44234
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
44171: LD_INT 22
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 21
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 50
44193: PUSH
44194: EMPTY
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: PPUSH
44202: CALL_OW 69
44206: PUSH
44207: LD_INT 10
44209: GREATEREQUAL
44210: IFFALSE 44224
// AddMedal ( Destroy , 1 ) else
44212: LD_STRING Destroy
44214: PPUSH
44215: LD_INT 1
44217: PPUSH
44218: CALL_OW 101
44222: GO 44234
// AddMedal ( Destroy , 2 ) ;
44224: LD_STRING Destroy
44226: PPUSH
44227: LD_INT 2
44229: PPUSH
44230: CALL_OW 101
// if artifact_get then
44234: LD_EXP 12
44238: IFFALSE 44252
// AddMedal ( Artefact , 1 ) else
44240: LD_STRING Artefact
44242: PPUSH
44243: LD_INT 1
44245: PPUSH
44246: CALL_OW 101
44250: GO 44263
// AddMedal ( Artefact , - 1 ) ;
44252: LD_STRING Artefact
44254: PPUSH
44255: LD_INT 1
44257: NEG
44258: PPUSH
44259: CALL_OW 101
// GiveMedals ( MAIN ) ;
44263: LD_STRING MAIN
44265: PPUSH
44266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44270: LD_INT 22
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 25
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 25
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 25
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 25
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PPUSH
44334: CALL_OW 69
44338: PPUSH
44339: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
44343: LD_EXP 31
44347: PUSH
44348: LD_EXP 18
44352: PUSH
44353: LD_EXP 19
44357: PUSH
44358: LD_EXP 20
44362: PUSH
44363: LD_EXP 21
44367: PUSH
44368: LD_EXP 22
44372: PUSH
44373: LD_EXP 23
44377: PUSH
44378: LD_EXP 24
44382: PUSH
44383: LD_EXP 25
44387: PUSH
44388: LD_EXP 27
44392: PUSH
44393: LD_EXP 28
44397: PUSH
44398: LD_EXP 29
44402: PUSH
44403: LD_EXP 30
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: DIFF
44422: PPUSH
44423: LD_STRING 11c_others
44425: PPUSH
44426: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44430: LD_EXP 17
44434: PPUSH
44435: LD_EXP 3
44439: PUSH
44440: LD_STRING JMM
44442: STR
44443: PPUSH
44444: CALL_OW 38
// if Lisa then
44448: LD_EXP 18
44452: IFFALSE 44472
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44454: LD_EXP 18
44458: PPUSH
44459: LD_EXP 3
44463: PUSH
44464: LD_STRING Lisa
44466: STR
44467: PPUSH
44468: CALL_OW 38
// if Donaldson then
44472: LD_EXP 19
44476: IFFALSE 44496
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44478: LD_EXP 19
44482: PPUSH
44483: LD_EXP 3
44487: PUSH
44488: LD_STRING Donaldson
44490: STR
44491: PPUSH
44492: CALL_OW 38
// if Bobby then
44496: LD_EXP 20
44500: IFFALSE 44520
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44502: LD_EXP 20
44506: PPUSH
44507: LD_EXP 3
44511: PUSH
44512: LD_STRING Bobby
44514: STR
44515: PPUSH
44516: CALL_OW 38
// if Cyrus then
44520: LD_EXP 21
44524: IFFALSE 44544
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44526: LD_EXP 21
44530: PPUSH
44531: LD_EXP 3
44535: PUSH
44536: LD_STRING Cyrus
44538: STR
44539: PPUSH
44540: CALL_OW 38
// if Denis then
44544: LD_EXP 22
44548: IFFALSE 44568
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
44550: LD_EXP 22
44554: PPUSH
44555: LD_EXP 3
44559: PUSH
44560: LD_STRING Denis
44562: STR
44563: PPUSH
44564: CALL_OW 38
// if Brown then
44568: LD_EXP 23
44572: IFFALSE 44592
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
44574: LD_EXP 23
44578: PPUSH
44579: LD_EXP 3
44583: PUSH
44584: LD_STRING Brown
44586: STR
44587: PPUSH
44588: CALL_OW 38
// if Gladstone then
44592: LD_EXP 24
44596: IFFALSE 44616
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44598: LD_EXP 24
44602: PPUSH
44603: LD_EXP 3
44607: PUSH
44608: LD_STRING Gladstone
44610: STR
44611: PPUSH
44612: CALL_OW 38
// if Houten then
44616: LD_EXP 25
44620: IFFALSE 44640
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
44622: LD_EXP 25
44626: PPUSH
44627: LD_EXP 3
44631: PUSH
44632: LD_STRING Houten
44634: STR
44635: PPUSH
44636: CALL_OW 38
// if Cornel then
44640: LD_EXP 27
44644: IFFALSE 44664
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
44646: LD_EXP 27
44650: PPUSH
44651: LD_EXP 3
44655: PUSH
44656: LD_STRING Cornel
44658: STR
44659: PPUSH
44660: CALL_OW 38
// if Gary then
44664: LD_EXP 28
44668: IFFALSE 44688
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
44670: LD_EXP 28
44674: PPUSH
44675: LD_EXP 3
44679: PUSH
44680: LD_STRING Gary
44682: STR
44683: PPUSH
44684: CALL_OW 38
// if Frank then
44688: LD_EXP 29
44692: IFFALSE 44712
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
44694: LD_EXP 29
44698: PPUSH
44699: LD_EXP 3
44703: PUSH
44704: LD_STRING Frank
44706: STR
44707: PPUSH
44708: CALL_OW 38
// if Kikuchi then
44712: LD_EXP 30
44716: IFFALSE 44736
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44718: LD_EXP 30
44722: PPUSH
44723: LD_EXP 3
44727: PUSH
44728: LD_STRING Kikuchi
44730: STR
44731: PPUSH
44732: CALL_OW 38
// YouWin ;
44736: CALL_OW 103
// end ; end_of_file
44740: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
44741: LD_INT 0
44743: PPUSH
// skirmish := false ;
44744: LD_ADDR_EXP 43
44748: PUSH
44749: LD_INT 0
44751: ST_TO_ADDR
// mc_bases := [ ] ;
44752: LD_ADDR_EXP 44
44756: PUSH
44757: EMPTY
44758: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
44759: LD_ADDR_EXP 45
44763: PUSH
44764: EMPTY
44765: ST_TO_ADDR
// mc_building_repairs := [ ] ;
44766: LD_ADDR_EXP 46
44770: PUSH
44771: EMPTY
44772: ST_TO_ADDR
// mc_need_heal := [ ] ;
44773: LD_ADDR_EXP 47
44777: PUSH
44778: EMPTY
44779: ST_TO_ADDR
// mc_healers := [ ] ;
44780: LD_ADDR_EXP 48
44784: PUSH
44785: EMPTY
44786: ST_TO_ADDR
// mc_build_list := [ ] ;
44787: LD_ADDR_EXP 49
44791: PUSH
44792: EMPTY
44793: ST_TO_ADDR
// mc_builders := [ ] ;
44794: LD_ADDR_EXP 50
44798: PUSH
44799: EMPTY
44800: ST_TO_ADDR
// mc_construct_list := [ ] ;
44801: LD_ADDR_EXP 51
44805: PUSH
44806: EMPTY
44807: ST_TO_ADDR
// mc_turret_list := [ ] ;
44808: LD_ADDR_EXP 52
44812: PUSH
44813: EMPTY
44814: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
44815: LD_ADDR_EXP 53
44819: PUSH
44820: EMPTY
44821: ST_TO_ADDR
// mc_miners := [ ] ;
44822: LD_ADDR_EXP 55
44826: PUSH
44827: EMPTY
44828: ST_TO_ADDR
// mc_mines := [ ] ;
44829: LD_ADDR_EXP 54
44833: PUSH
44834: EMPTY
44835: ST_TO_ADDR
// mc_minefields := [ ] ;
44836: LD_ADDR_EXP 56
44840: PUSH
44841: EMPTY
44842: ST_TO_ADDR
// mc_crates := [ ] ;
44843: LD_ADDR_EXP 57
44847: PUSH
44848: EMPTY
44849: ST_TO_ADDR
// mc_crates_collector := [ ] ;
44850: LD_ADDR_EXP 58
44854: PUSH
44855: EMPTY
44856: ST_TO_ADDR
// mc_vehicles := [ ] ;
44857: LD_ADDR_EXP 59
44861: PUSH
44862: EMPTY
44863: ST_TO_ADDR
// mc_attack := [ ] ;
44864: LD_ADDR_EXP 60
44868: PUSH
44869: EMPTY
44870: ST_TO_ADDR
// mc_produce := [ ] ;
44871: LD_ADDR_EXP 61
44875: PUSH
44876: EMPTY
44877: ST_TO_ADDR
// mc_defender := [ ] ;
44878: LD_ADDR_EXP 62
44882: PUSH
44883: EMPTY
44884: ST_TO_ADDR
// mc_parking := [ ] ;
44885: LD_ADDR_EXP 64
44889: PUSH
44890: EMPTY
44891: ST_TO_ADDR
// mc_scan := [ ] ;
44892: LD_ADDR_EXP 63
44896: PUSH
44897: EMPTY
44898: ST_TO_ADDR
// end ;
44899: LD_VAR 0 1
44903: RET
// export function RunMacro ; var i ; begin
44904: LD_INT 0
44906: PPUSH
44907: PPUSH
// for i = 1 to mc_bases do
44908: LD_ADDR_VAR 0 2
44912: PUSH
44913: DOUBLE
44914: LD_INT 1
44916: DEC
44917: ST_TO_ADDR
44918: LD_EXP 44
44922: PUSH
44923: FOR_TO
44924: IFFALSE 45412
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
44926: LD_ADDR_EXP 45
44930: PUSH
44931: LD_EXP 45
44935: PPUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: EMPTY
44942: PPUSH
44943: CALL_OW 1
44947: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
44948: LD_ADDR_EXP 46
44952: PUSH
44953: LD_EXP 46
44957: PPUSH
44958: LD_VAR 0 2
44962: PPUSH
44963: EMPTY
44964: PPUSH
44965: CALL_OW 1
44969: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
44970: LD_ADDR_EXP 47
44974: PUSH
44975: LD_EXP 47
44979: PPUSH
44980: LD_VAR 0 2
44984: PPUSH
44985: EMPTY
44986: PPUSH
44987: CALL_OW 1
44991: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
44992: LD_ADDR_EXP 48
44996: PUSH
44997: LD_EXP 48
45001: PPUSH
45002: LD_VAR 0 2
45006: PPUSH
45007: EMPTY
45008: PUSH
45009: EMPTY
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PPUSH
45015: CALL_OW 1
45019: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
45020: LD_ADDR_EXP 49
45024: PUSH
45025: LD_EXP 49
45029: PPUSH
45030: LD_VAR 0 2
45034: PPUSH
45035: EMPTY
45036: PPUSH
45037: CALL_OW 1
45041: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
45042: LD_ADDR_EXP 51
45046: PUSH
45047: LD_EXP 51
45051: PPUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: EMPTY
45058: PPUSH
45059: CALL_OW 1
45063: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
45064: LD_ADDR_EXP 52
45068: PUSH
45069: LD_EXP 52
45073: PPUSH
45074: LD_VAR 0 2
45078: PPUSH
45079: EMPTY
45080: PPUSH
45081: CALL_OW 1
45085: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
45086: LD_ADDR_EXP 53
45090: PUSH
45091: LD_EXP 53
45095: PPUSH
45096: LD_VAR 0 2
45100: PPUSH
45101: EMPTY
45102: PPUSH
45103: CALL_OW 1
45107: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
45108: LD_ADDR_EXP 53
45112: PUSH
45113: LD_EXP 53
45117: PPUSH
45118: LD_VAR 0 2
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PPUSH
45130: EMPTY
45131: PPUSH
45132: CALL 3199 0 3
45136: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
45137: LD_ADDR_EXP 53
45141: PUSH
45142: LD_EXP 53
45146: PPUSH
45147: LD_VAR 0 2
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PPUSH
45159: EMPTY
45160: PPUSH
45161: CALL 3199 0 3
45165: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
45166: LD_ADDR_EXP 55
45170: PUSH
45171: LD_EXP 55
45175: PPUSH
45176: LD_VAR 0 2
45180: PPUSH
45181: EMPTY
45182: PPUSH
45183: CALL_OW 1
45187: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
45188: LD_ADDR_EXP 54
45192: PUSH
45193: LD_EXP 54
45197: PPUSH
45198: LD_VAR 0 2
45202: PPUSH
45203: EMPTY
45204: PPUSH
45205: CALL_OW 1
45209: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
45210: LD_ADDR_EXP 56
45214: PUSH
45215: LD_EXP 56
45219: PPUSH
45220: LD_VAR 0 2
45224: PPUSH
45225: EMPTY
45226: PPUSH
45227: CALL_OW 1
45231: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
45232: LD_ADDR_EXP 57
45236: PUSH
45237: LD_EXP 57
45241: PPUSH
45242: LD_VAR 0 2
45246: PPUSH
45247: EMPTY
45248: PPUSH
45249: CALL_OW 1
45253: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
45254: LD_ADDR_EXP 58
45258: PUSH
45259: LD_EXP 58
45263: PPUSH
45264: LD_VAR 0 2
45268: PPUSH
45269: EMPTY
45270: PPUSH
45271: CALL_OW 1
45275: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
45276: LD_ADDR_EXP 59
45280: PUSH
45281: LD_EXP 59
45285: PPUSH
45286: LD_VAR 0 2
45290: PPUSH
45291: EMPTY
45292: PPUSH
45293: CALL_OW 1
45297: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45298: LD_ADDR_EXP 60
45302: PUSH
45303: LD_EXP 60
45307: PPUSH
45308: LD_VAR 0 2
45312: PPUSH
45313: EMPTY
45314: PPUSH
45315: CALL_OW 1
45319: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
45320: LD_ADDR_EXP 61
45324: PUSH
45325: LD_EXP 61
45329: PPUSH
45330: LD_VAR 0 2
45334: PPUSH
45335: EMPTY
45336: PPUSH
45337: CALL_OW 1
45341: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
45342: LD_ADDR_EXP 62
45346: PUSH
45347: LD_EXP 62
45351: PPUSH
45352: LD_VAR 0 2
45356: PPUSH
45357: EMPTY
45358: PPUSH
45359: CALL_OW 1
45363: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
45364: LD_ADDR_EXP 64
45368: PUSH
45369: LD_EXP 64
45373: PPUSH
45374: LD_VAR 0 2
45378: PPUSH
45379: LD_INT 0
45381: PPUSH
45382: CALL_OW 1
45386: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
45387: LD_ADDR_EXP 63
45391: PUSH
45392: LD_EXP 63
45396: PPUSH
45397: LD_VAR 0 2
45401: PPUSH
45402: LD_INT 0
45404: PPUSH
45405: CALL_OW 1
45409: ST_TO_ADDR
// end ;
45410: GO 44923
45412: POP
45413: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
45414: LD_INT 1
45416: PPUSH
45417: LD_INT 8
45419: PUSH
45420: LD_INT 10
45422: PUSH
45423: LD_INT 12
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: PUSH
45431: LD_OWVAR 67
45435: ARRAY
45436: PPUSH
45437: LD_INT 3
45439: PPUSH
45440: CALL 52819 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
45444: LD_INT 2
45446: PPUSH
45447: LD_INT 6
45449: PUSH
45450: LD_INT 8
45452: PUSH
45453: LD_INT 9
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: PUSH
45461: LD_OWVAR 67
45465: ARRAY
45466: PPUSH
45467: LD_INT 2
45469: PPUSH
45470: CALL 52819 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
45474: LD_INT 3
45476: PPUSH
45477: LD_INT 6
45479: PUSH
45480: LD_INT 7
45482: PUSH
45483: LD_INT 9
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: PUSH
45491: LD_OWVAR 67
45495: ARRAY
45496: PPUSH
45497: LD_INT 1
45499: PPUSH
45500: CALL 52819 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
45504: LD_ADDR_EXP 64
45508: PUSH
45509: LD_INT 20
45511: PUSH
45512: LD_INT 21
45514: PUSH
45515: LD_INT 22
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// for i = 1 to mc_bases do
45523: LD_ADDR_VAR 0 2
45527: PUSH
45528: DOUBLE
45529: LD_INT 1
45531: DEC
45532: ST_TO_ADDR
45533: LD_EXP 44
45537: PUSH
45538: FOR_TO
45539: IFFALSE 45563
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
45541: LD_VAR 0 2
45545: PPUSH
45546: LD_EXP 39
45550: PUSH
45551: LD_VAR 0 2
45555: ARRAY
45556: PPUSH
45557: CALL 53164 0 2
45561: GO 45538
45563: POP
45564: POP
// skirmish := true ;
45565: LD_ADDR_EXP 43
45569: PUSH
45570: LD_INT 1
45572: ST_TO_ADDR
// end ;
45573: LD_VAR 0 1
45577: RET
// every 0 0$01 trigger skirmish do
45578: LD_EXP 43
45582: IFFALSE 45666
45584: GO 45586
45586: DISABLE
// begin enable ;
45587: ENABLE
// MC_CheckBuildings ( ) ;
45588: CALL 45921 0 0
// MC_CheckPeopleLife ( ) ;
45592: CALL 46139 0 0
// RaiseSailEvent ( 103 ) ;
45596: LD_INT 103
45598: PPUSH
45599: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
45603: LD_INT 104
45605: PPUSH
45606: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
45610: LD_INT 105
45612: PPUSH
45613: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
45617: LD_INT 106
45619: PPUSH
45620: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
45624: LD_INT 107
45626: PPUSH
45627: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
45631: LD_INT 108
45633: PPUSH
45634: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
45638: LD_INT 109
45640: PPUSH
45641: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
45645: LD_INT 110
45647: PPUSH
45648: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
45652: LD_INT 111
45654: PPUSH
45655: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
45659: LD_INT 200
45661: PPUSH
45662: CALL_OW 427
// end ;
45666: END
// on SailEvent ( event ) do begin if event = 101 then
45667: LD_VAR 0 1
45671: PUSH
45672: LD_INT 101
45674: EQUAL
45675: IFFALSE 45681
// MC_RepairBuildings ( ) ;
45677: CALL 46685 0 0
// if event = 102 then
45681: LD_VAR 0 1
45685: PUSH
45686: LD_INT 102
45688: EQUAL
45689: IFFALSE 45695
// MC_Heal ( ) ;
45691: CALL 47079 0 0
// if event = 103 then
45695: LD_VAR 0 1
45699: PUSH
45700: LD_INT 103
45702: EQUAL
45703: IFFALSE 45709
// MC_Build ( ) ;
45705: CALL 47464 0 0
// if event = 104 then
45709: LD_VAR 0 1
45713: PUSH
45714: LD_INT 104
45716: EQUAL
45717: IFFALSE 45723
// MC_TurretWeapon ( ) ;
45719: CALL 48232 0 0
// if event = 105 then
45723: LD_VAR 0 1
45727: PUSH
45728: LD_INT 105
45730: EQUAL
45731: IFFALSE 45737
// MC_TurretCrew ( ) ;
45733: CALL 48551 0 0
// if event = 106 then
45737: LD_VAR 0 1
45741: PUSH
45742: LD_INT 106
45744: EQUAL
45745: IFFALSE 45751
// MC_PlantMines ( ) ;
45747: CALL 49365 0 0
// if event = 107 then
45751: LD_VAR 0 1
45755: PUSH
45756: LD_INT 107
45758: EQUAL
45759: IFFALSE 45765
// MC_CollectCrates ( ) ;
45761: CALL 50295 0 0
// if event = 108 then
45765: LD_VAR 0 1
45769: PUSH
45770: LD_INT 108
45772: EQUAL
45773: IFFALSE 45779
// MC_LinkRemoteControl ( ) ;
45775: CALL 51092 0 0
// if event = 109 then
45779: LD_VAR 0 1
45783: PUSH
45784: LD_INT 109
45786: EQUAL
45787: IFFALSE 45793
// MC_ProduceVehicle ( ) ;
45789: CALL 51261 0 0
// if event = 110 then
45793: LD_VAR 0 1
45797: PUSH
45798: LD_INT 110
45800: EQUAL
45801: IFFALSE 45807
// MC_SendAttack ( ) ;
45803: CALL 51649 0 0
// if event = 111 then
45807: LD_VAR 0 1
45811: PUSH
45812: LD_INT 111
45814: EQUAL
45815: IFFALSE 45821
// MC_Defend ( ) ;
45817: CALL 51757 0 0
// if event = 200 then
45821: LD_VAR 0 1
45825: PUSH
45826: LD_INT 200
45828: EQUAL
45829: IFFALSE 45835
// MC_Idle ( ) ;
45831: CALL 52570 0 0
// end ;
45835: PPOPN 1
45837: END
// export function MC_Reset ( base , tag ) ; var i ; begin
45838: LD_INT 0
45840: PPUSH
45841: PPUSH
// if not mc_bases [ base ] or not tag then
45842: LD_EXP 44
45846: PUSH
45847: LD_VAR 0 1
45851: ARRAY
45852: NOT
45853: PUSH
45854: LD_VAR 0 2
45858: NOT
45859: OR
45860: IFFALSE 45864
// exit ;
45862: GO 45916
// for i in mc_bases [ base ] do
45864: LD_ADDR_VAR 0 4
45868: PUSH
45869: LD_EXP 44
45873: PUSH
45874: LD_VAR 0 1
45878: ARRAY
45879: PUSH
45880: FOR_IN
45881: IFFALSE 45914
// if GetTag ( i ) = tag then
45883: LD_VAR 0 4
45887: PPUSH
45888: CALL_OW 110
45892: PUSH
45893: LD_VAR 0 2
45897: EQUAL
45898: IFFALSE 45912
// SetTag ( i , 0 ) ;
45900: LD_VAR 0 4
45904: PPUSH
45905: LD_INT 0
45907: PPUSH
45908: CALL_OW 109
45912: GO 45880
45914: POP
45915: POP
// end ;
45916: LD_VAR 0 3
45920: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
45921: LD_INT 0
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
// if not mc_bases then
45927: LD_EXP 44
45931: NOT
45932: IFFALSE 45936
// exit ;
45934: GO 46134
// for i = 1 to mc_bases do
45936: LD_ADDR_VAR 0 2
45940: PUSH
45941: DOUBLE
45942: LD_INT 1
45944: DEC
45945: ST_TO_ADDR
45946: LD_EXP 44
45950: PUSH
45951: FOR_TO
45952: IFFALSE 46119
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
45954: LD_ADDR_VAR 0 4
45958: PUSH
45959: LD_EXP 44
45963: PUSH
45964: LD_VAR 0 2
45968: ARRAY
45969: PPUSH
45970: LD_INT 21
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: LD_INT 24
45985: PUSH
45986: LD_INT 1000
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PPUSH
46001: CALL_OW 72
46005: ST_TO_ADDR
// if not tmp then
46006: LD_VAR 0 4
46010: NOT
46011: IFFALSE 46037
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46013: LD_ADDR_EXP 45
46017: PUSH
46018: LD_EXP 45
46022: PPUSH
46023: LD_VAR 0 2
46027: PPUSH
46028: EMPTY
46029: PPUSH
46030: CALL_OW 1
46034: ST_TO_ADDR
// continue ;
46035: GO 45951
// end ; for j in tmp do
46037: LD_ADDR_VAR 0 3
46041: PUSH
46042: LD_VAR 0 4
46046: PUSH
46047: FOR_IN
46048: IFFALSE 46115
// if not j in mc_building_need_repair [ i ] then
46050: LD_VAR 0 3
46054: PUSH
46055: LD_EXP 45
46059: PUSH
46060: LD_VAR 0 2
46064: ARRAY
46065: IN
46066: NOT
46067: IFFALSE 46113
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
46069: LD_ADDR_EXP 45
46073: PUSH
46074: LD_EXP 45
46078: PPUSH
46079: LD_VAR 0 2
46083: PUSH
46084: LD_EXP 45
46088: PUSH
46089: LD_VAR 0 2
46093: ARRAY
46094: PUSH
46095: LD_INT 1
46097: PLUS
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PPUSH
46103: LD_VAR 0 3
46107: PPUSH
46108: CALL 3199 0 3
46112: ST_TO_ADDR
46113: GO 46047
46115: POP
46116: POP
// end ;
46117: GO 45951
46119: POP
46120: POP
// if mc_building_need_repair then
46121: LD_EXP 45
46125: IFFALSE 46134
// RaiseSailEvent ( 101 ) ;
46127: LD_INT 101
46129: PPUSH
46130: CALL_OW 427
// end ;
46134: LD_VAR 0 1
46138: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
46139: LD_INT 0
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
46145: PPUSH
46146: PPUSH
46147: PPUSH
// if not mc_bases then
46148: LD_EXP 44
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 46680
// for i = 1 to mc_bases do
46157: LD_ADDR_VAR 0 2
46161: PUSH
46162: DOUBLE
46163: LD_INT 1
46165: DEC
46166: ST_TO_ADDR
46167: LD_EXP 44
46171: PUSH
46172: FOR_TO
46173: IFFALSE 46671
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
46175: LD_ADDR_VAR 0 5
46179: PUSH
46180: LD_EXP 44
46184: PUSH
46185: LD_VAR 0 2
46189: ARRAY
46190: PPUSH
46191: LD_INT 21
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 54
46209: PUSH
46210: EMPTY
46211: LIST
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: LD_INT 24
46222: PUSH
46223: LD_INT 700
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PPUSH
46243: CALL_OW 72
46247: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
46248: LD_ADDR_VAR 0 6
46252: PUSH
46253: LD_EXP 44
46257: PUSH
46258: LD_VAR 0 2
46262: ARRAY
46263: PPUSH
46264: LD_INT 21
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 54
46282: PUSH
46283: EMPTY
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 24
46295: PUSH
46296: LD_INT 250
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PPUSH
46316: CALL_OW 72
46320: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
46321: LD_ADDR_VAR 0 7
46325: PUSH
46326: LD_VAR 0 5
46330: PUSH
46331: LD_VAR 0 6
46335: DIFF
46336: ST_TO_ADDR
// if not need_heal_1 then
46337: LD_VAR 0 6
46341: NOT
46342: IFFALSE 46375
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
46344: LD_ADDR_EXP 47
46348: PUSH
46349: LD_EXP 47
46353: PPUSH
46354: LD_VAR 0 2
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PPUSH
46366: EMPTY
46367: PPUSH
46368: CALL 3199 0 3
46372: ST_TO_ADDR
46373: GO 46407
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
46375: LD_ADDR_EXP 47
46379: PUSH
46380: LD_EXP 47
46384: PPUSH
46385: LD_VAR 0 2
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PPUSH
46397: LD_VAR 0 6
46401: PPUSH
46402: CALL 3199 0 3
46406: ST_TO_ADDR
// if not need_heal_2 then
46407: LD_VAR 0 7
46411: NOT
46412: IFFALSE 46445
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
46414: LD_ADDR_EXP 47
46418: PUSH
46419: LD_EXP 47
46423: PPUSH
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PPUSH
46436: EMPTY
46437: PPUSH
46438: CALL 3199 0 3
46442: ST_TO_ADDR
46443: GO 46477
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
46445: LD_ADDR_EXP 47
46449: PUSH
46450: LD_EXP 47
46454: PPUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PPUSH
46467: LD_VAR 0 7
46471: PPUSH
46472: CALL 3199 0 3
46476: ST_TO_ADDR
// if need_heal_2 then
46477: LD_VAR 0 7
46481: IFFALSE 46653
// for j in need_heal_2 do
46483: LD_ADDR_VAR 0 3
46487: PUSH
46488: LD_VAR 0 7
46492: PUSH
46493: FOR_IN
46494: IFFALSE 46651
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
46496: LD_ADDR_VAR 0 5
46500: PUSH
46501: LD_EXP 44
46505: PUSH
46506: LD_VAR 0 2
46510: ARRAY
46511: PPUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 30
46517: PUSH
46518: LD_INT 6
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 30
46527: PUSH
46528: LD_INT 7
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: LD_INT 8
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 30
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 25
46567: PUSH
46568: LD_INT 4
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: PPUSH
46584: CALL_OW 72
46588: ST_TO_ADDR
// if tmp then
46589: LD_VAR 0 5
46593: IFFALSE 46649
// begin k := NearestUnitToUnit ( tmp , j ) ;
46595: LD_ADDR_VAR 0 4
46599: PUSH
46600: LD_VAR 0 5
46604: PPUSH
46605: LD_VAR 0 3
46609: PPUSH
46610: CALL_OW 74
46614: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
46615: LD_VAR 0 3
46619: PPUSH
46620: LD_VAR 0 4
46624: PPUSH
46625: CALL_OW 296
46629: PUSH
46630: LD_INT 7
46632: GREATER
46633: IFFALSE 46649
// ComMoveUnit ( j , k ) ;
46635: LD_VAR 0 3
46639: PPUSH
46640: LD_VAR 0 4
46644: PPUSH
46645: CALL_OW 112
// end ; end ;
46649: GO 46493
46651: POP
46652: POP
// if not need_heal_1 and not need_heal_2 then
46653: LD_VAR 0 6
46657: NOT
46658: PUSH
46659: LD_VAR 0 7
46663: NOT
46664: AND
46665: IFFALSE 46669
// continue ;
46667: GO 46172
// end ;
46669: GO 46172
46671: POP
46672: POP
// RaiseSailEvent ( 102 ) ;
46673: LD_INT 102
46675: PPUSH
46676: CALL_OW 427
// end ;
46680: LD_VAR 0 1
46684: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
46685: LD_INT 0
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
// if not mc_bases then
46692: LD_EXP 44
46696: NOT
46697: IFFALSE 46701
// exit ;
46699: GO 47074
// for i = 1 to mc_bases do
46701: LD_ADDR_VAR 0 2
46705: PUSH
46706: DOUBLE
46707: LD_INT 1
46709: DEC
46710: ST_TO_ADDR
46711: LD_EXP 44
46715: PUSH
46716: FOR_TO
46717: IFFALSE 47072
// begin if not mc_building_need_repair [ i ] then
46719: LD_EXP 45
46723: PUSH
46724: LD_VAR 0 2
46728: ARRAY
46729: NOT
46730: IFFALSE 46768
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46732: LD_ADDR_EXP 46
46736: PUSH
46737: LD_EXP 46
46741: PPUSH
46742: LD_VAR 0 2
46746: PPUSH
46747: EMPTY
46748: PPUSH
46749: CALL_OW 1
46753: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
46754: LD_VAR 0 2
46758: PPUSH
46759: LD_INT 101
46761: PPUSH
46762: CALL 45838 0 2
// continue ;
46766: GO 46716
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
46768: LD_ADDR_EXP 50
46772: PUSH
46773: LD_EXP 50
46777: PPUSH
46778: LD_VAR 0 2
46782: PPUSH
46783: EMPTY
46784: PPUSH
46785: CALL_OW 1
46789: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
46790: LD_VAR 0 2
46794: PPUSH
46795: LD_INT 103
46797: PPUSH
46798: CALL 45838 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
46802: LD_ADDR_VAR 0 5
46806: PUSH
46807: LD_EXP 44
46811: PUSH
46812: LD_VAR 0 2
46816: ARRAY
46817: PPUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 25
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 25
46833: PUSH
46834: LD_INT 16
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: PPUSH
46849: CALL_OW 72
46853: ST_TO_ADDR
// if not tmp then
46854: LD_VAR 0 5
46858: NOT
46859: IFFALSE 46863
// continue ;
46861: GO 46716
// for j in tmp do
46863: LD_ADDR_VAR 0 3
46867: PUSH
46868: LD_VAR 0 5
46872: PUSH
46873: FOR_IN
46874: IFFALSE 47068
// begin if mc_need_heal [ i ] then
46876: LD_EXP 47
46880: PUSH
46881: LD_VAR 0 2
46885: ARRAY
46886: IFFALSE 46934
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
46888: LD_VAR 0 3
46892: PUSH
46893: LD_EXP 47
46897: PUSH
46898: LD_VAR 0 2
46902: ARRAY
46903: PUSH
46904: LD_INT 1
46906: ARRAY
46907: IN
46908: PUSH
46909: LD_VAR 0 3
46913: PUSH
46914: LD_EXP 47
46918: PUSH
46919: LD_VAR 0 2
46923: ARRAY
46924: PUSH
46925: LD_INT 2
46927: ARRAY
46928: IN
46929: OR
46930: IFFALSE 46934
// continue ;
46932: GO 46873
// if IsInUnit ( j ) then
46934: LD_VAR 0 3
46938: PPUSH
46939: CALL_OW 310
46943: IFFALSE 46954
// ComExitBuilding ( j ) ;
46945: LD_VAR 0 3
46949: PPUSH
46950: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
46954: LD_VAR 0 3
46958: PUSH
46959: LD_EXP 46
46963: PUSH
46964: LD_VAR 0 2
46968: ARRAY
46969: IN
46970: NOT
46971: IFFALSE 47029
// begin SetTag ( j , 101 ) ;
46973: LD_VAR 0 3
46977: PPUSH
46978: LD_INT 101
46980: PPUSH
46981: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
46985: LD_ADDR_EXP 46
46989: PUSH
46990: LD_EXP 46
46994: PPUSH
46995: LD_VAR 0 2
46999: PUSH
47000: LD_EXP 46
47004: PUSH
47005: LD_VAR 0 2
47009: ARRAY
47010: PUSH
47011: LD_INT 1
47013: PLUS
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PPUSH
47019: LD_VAR 0 3
47023: PPUSH
47024: CALL 3199 0 3
47028: ST_TO_ADDR
// end ; Wait ( 3 ) ;
47029: LD_INT 3
47031: PPUSH
47032: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
47036: LD_VAR 0 3
47040: PPUSH
47041: LD_EXP 45
47045: PUSH
47046: LD_VAR 0 2
47050: ARRAY
47051: PPUSH
47052: LD_VAR 0 3
47056: PPUSH
47057: CALL_OW 74
47061: PPUSH
47062: CALL_OW 130
// end ;
47066: GO 46873
47068: POP
47069: POP
// end ;
47070: GO 46716
47072: POP
47073: POP
// end ;
47074: LD_VAR 0 1
47078: RET
// export function MC_Heal ; var i , j , tmp ; begin
47079: LD_INT 0
47081: PPUSH
47082: PPUSH
47083: PPUSH
47084: PPUSH
// if not mc_bases then
47085: LD_EXP 44
47089: NOT
47090: IFFALSE 47094
// exit ;
47092: GO 47459
// for i = 1 to mc_bases do
47094: LD_ADDR_VAR 0 2
47098: PUSH
47099: DOUBLE
47100: LD_INT 1
47102: DEC
47103: ST_TO_ADDR
47104: LD_EXP 44
47108: PUSH
47109: FOR_TO
47110: IFFALSE 47457
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
47112: LD_EXP 47
47116: PUSH
47117: LD_VAR 0 2
47121: ARRAY
47122: PUSH
47123: LD_INT 1
47125: ARRAY
47126: NOT
47127: PUSH
47128: LD_EXP 47
47132: PUSH
47133: LD_VAR 0 2
47137: ARRAY
47138: PUSH
47139: LD_INT 2
47141: ARRAY
47142: NOT
47143: AND
47144: IFFALSE 47182
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
47146: LD_ADDR_EXP 48
47150: PUSH
47151: LD_EXP 48
47155: PPUSH
47156: LD_VAR 0 2
47160: PPUSH
47161: EMPTY
47162: PPUSH
47163: CALL_OW 1
47167: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
47168: LD_VAR 0 2
47172: PPUSH
47173: LD_INT 102
47175: PPUSH
47176: CALL 45838 0 2
// continue ;
47180: GO 47109
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
47182: LD_ADDR_VAR 0 4
47186: PUSH
47187: LD_EXP 44
47191: PUSH
47192: LD_VAR 0 2
47196: ARRAY
47197: PPUSH
47198: LD_INT 25
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PPUSH
47208: CALL_OW 72
47212: ST_TO_ADDR
// if not tmp then
47213: LD_VAR 0 4
47217: NOT
47218: IFFALSE 47222
// continue ;
47220: GO 47109
// for j in tmp do
47222: LD_ADDR_VAR 0 3
47226: PUSH
47227: LD_VAR 0 4
47231: PUSH
47232: FOR_IN
47233: IFFALSE 47453
// begin if IsInUnit ( j ) then
47235: LD_VAR 0 3
47239: PPUSH
47240: CALL_OW 310
47244: IFFALSE 47255
// ComExitBuilding ( j ) ;
47246: LD_VAR 0 3
47250: PPUSH
47251: CALL_OW 122
// if not j in mc_healers [ i ] then
47255: LD_VAR 0 3
47259: PUSH
47260: LD_EXP 48
47264: PUSH
47265: LD_VAR 0 2
47269: ARRAY
47270: IN
47271: NOT
47272: IFFALSE 47318
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
47274: LD_ADDR_EXP 48
47278: PUSH
47279: LD_EXP 48
47283: PPUSH
47284: LD_VAR 0 2
47288: PUSH
47289: LD_EXP 48
47293: PUSH
47294: LD_VAR 0 2
47298: ARRAY
47299: PUSH
47300: LD_INT 1
47302: PLUS
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PPUSH
47308: LD_VAR 0 3
47312: PPUSH
47313: CALL 3199 0 3
47317: ST_TO_ADDR
// if not GetTag ( j ) then
47318: LD_VAR 0 3
47322: PPUSH
47323: CALL_OW 110
47327: NOT
47328: IFFALSE 47342
// SetTag ( j , 102 ) ;
47330: LD_VAR 0 3
47334: PPUSH
47335: LD_INT 102
47337: PPUSH
47338: CALL_OW 109
// Wait ( 3 ) ;
47342: LD_INT 3
47344: PPUSH
47345: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
47349: LD_EXP 47
47353: PUSH
47354: LD_VAR 0 2
47358: ARRAY
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: IFFALSE 47395
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
47365: LD_VAR 0 3
47369: PPUSH
47370: LD_EXP 47
47374: PUSH
47375: LD_VAR 0 2
47379: ARRAY
47380: PUSH
47381: LD_INT 1
47383: ARRAY
47384: PUSH
47385: LD_INT 1
47387: ARRAY
47388: PPUSH
47389: CALL_OW 128
47393: GO 47451
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
47395: LD_VAR 0 3
47399: PPUSH
47400: CALL_OW 314
47404: NOT
47405: PUSH
47406: LD_EXP 47
47410: PUSH
47411: LD_VAR 0 2
47415: ARRAY
47416: PUSH
47417: LD_INT 2
47419: ARRAY
47420: AND
47421: IFFALSE 47451
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
47423: LD_VAR 0 3
47427: PPUSH
47428: LD_EXP 47
47432: PUSH
47433: LD_VAR 0 2
47437: ARRAY
47438: PUSH
47439: LD_INT 2
47441: ARRAY
47442: PUSH
47443: LD_INT 1
47445: ARRAY
47446: PPUSH
47447: CALL_OW 128
// end ;
47451: GO 47232
47453: POP
47454: POP
// end ;
47455: GO 47109
47457: POP
47458: POP
// end ;
47459: LD_VAR 0 1
47463: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
47464: LD_INT 0
47466: PPUSH
47467: PPUSH
47468: PPUSH
47469: PPUSH
// if not mc_bases then
47470: LD_EXP 44
47474: NOT
47475: IFFALSE 47479
// exit ;
47477: GO 48227
// for i = 1 to mc_bases do
47479: LD_ADDR_VAR 0 2
47483: PUSH
47484: DOUBLE
47485: LD_INT 1
47487: DEC
47488: ST_TO_ADDR
47489: LD_EXP 44
47493: PUSH
47494: FOR_TO
47495: IFFALSE 48225
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
47497: LD_EXP 49
47501: PUSH
47502: LD_VAR 0 2
47506: ARRAY
47507: NOT
47508: PUSH
47509: LD_EXP 51
47513: PUSH
47514: LD_VAR 0 2
47518: ARRAY
47519: NOT
47520: AND
47521: IFFALSE 47559
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
47523: LD_ADDR_EXP 50
47527: PUSH
47528: LD_EXP 50
47532: PPUSH
47533: LD_VAR 0 2
47537: PPUSH
47538: EMPTY
47539: PPUSH
47540: CALL_OW 1
47544: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47545: LD_VAR 0 2
47549: PPUSH
47550: LD_INT 103
47552: PPUSH
47553: CALL 45838 0 2
// continue ;
47557: GO 47494
// end ; if mc_construct_list [ i ] then
47559: LD_EXP 51
47563: PUSH
47564: LD_VAR 0 2
47568: ARRAY
47569: IFFALSE 47774
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47571: LD_ADDR_VAR 0 4
47575: PUSH
47576: LD_EXP 44
47580: PUSH
47581: LD_VAR 0 2
47585: ARRAY
47586: PPUSH
47587: LD_INT 25
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PPUSH
47597: CALL_OW 72
47601: PUSH
47602: LD_EXP 46
47606: PUSH
47607: LD_VAR 0 2
47611: ARRAY
47612: DIFF
47613: ST_TO_ADDR
// if not tmp then
47614: LD_VAR 0 4
47618: NOT
47619: IFFALSE 47623
// continue ;
47621: GO 47494
// for j in tmp do
47623: LD_ADDR_VAR 0 3
47627: PUSH
47628: LD_VAR 0 4
47632: PUSH
47633: FOR_IN
47634: IFFALSE 47770
// begin if not mc_builders [ i ] then
47636: LD_EXP 50
47640: PUSH
47641: LD_VAR 0 2
47645: ARRAY
47646: NOT
47647: IFFALSE 47705
// begin SetTag ( j , 103 ) ;
47649: LD_VAR 0 3
47653: PPUSH
47654: LD_INT 103
47656: PPUSH
47657: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47661: LD_ADDR_EXP 50
47665: PUSH
47666: LD_EXP 50
47670: PPUSH
47671: LD_VAR 0 2
47675: PUSH
47676: LD_EXP 50
47680: PUSH
47681: LD_VAR 0 2
47685: ARRAY
47686: PUSH
47687: LD_INT 1
47689: PLUS
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PPUSH
47695: LD_VAR 0 3
47699: PPUSH
47700: CALL 3199 0 3
47704: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47705: LD_VAR 0 3
47709: PPUSH
47710: CALL_OW 310
47714: IFFALSE 47725
// ComExitBuilding ( j ) ;
47716: LD_VAR 0 3
47720: PPUSH
47721: CALL_OW 122
// wait ( 3 ) ;
47725: LD_INT 3
47727: PPUSH
47728: CALL_OW 67
// if not HasTask ( j ) then
47732: LD_VAR 0 3
47736: PPUSH
47737: CALL_OW 314
47741: NOT
47742: IFFALSE 47768
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
47744: LD_VAR 0 3
47748: PPUSH
47749: LD_EXP 51
47753: PUSH
47754: LD_VAR 0 2
47758: ARRAY
47759: PUSH
47760: LD_INT 1
47762: ARRAY
47763: PPUSH
47764: CALL 5599 0 2
// end ;
47768: GO 47633
47770: POP
47771: POP
// end else
47772: GO 48223
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
47774: LD_EXP 49
47778: PUSH
47779: LD_VAR 0 2
47783: ARRAY
47784: PUSH
47785: LD_EXP 44
47789: PUSH
47790: LD_VAR 0 2
47794: ARRAY
47795: PPUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 30
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 30
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: PPUSH
47824: CALL_OW 72
47828: AND
47829: IFFALSE 48223
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
47831: LD_EXP 44
47835: PUSH
47836: LD_VAR 0 2
47840: ARRAY
47841: PPUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 30
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 30
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: PPUSH
47870: CALL_OW 72
47874: PUSH
47875: LD_INT 1
47877: ARRAY
47878: PPUSH
47879: LD_EXP 49
47883: PUSH
47884: LD_VAR 0 2
47888: ARRAY
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: PUSH
47894: LD_INT 1
47896: ARRAY
47897: PPUSH
47898: LD_EXP 49
47902: PUSH
47903: LD_VAR 0 2
47907: ARRAY
47908: PUSH
47909: LD_INT 1
47911: ARRAY
47912: PUSH
47913: LD_INT 2
47915: ARRAY
47916: PPUSH
47917: LD_EXP 49
47921: PUSH
47922: LD_VAR 0 2
47926: ARRAY
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: PUSH
47932: LD_INT 3
47934: ARRAY
47935: PPUSH
47936: LD_EXP 49
47940: PUSH
47941: LD_VAR 0 2
47945: ARRAY
47946: PUSH
47947: LD_INT 1
47949: ARRAY
47950: PUSH
47951: LD_INT 4
47953: ARRAY
47954: PPUSH
47955: CALL 8755 0 5
47959: IFFALSE 48223
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47961: LD_ADDR_VAR 0 4
47965: PUSH
47966: LD_EXP 44
47970: PUSH
47971: LD_VAR 0 2
47975: ARRAY
47976: PPUSH
47977: LD_INT 25
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PPUSH
47987: CALL_OW 72
47991: PUSH
47992: LD_EXP 46
47996: PUSH
47997: LD_VAR 0 2
48001: ARRAY
48002: DIFF
48003: ST_TO_ADDR
// if not tmp then
48004: LD_VAR 0 4
48008: NOT
48009: IFFALSE 48013
// continue ;
48011: GO 47494
// for j in tmp do
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_VAR 0 4
48022: PUSH
48023: FOR_IN
48024: IFFALSE 48221
// begin if not mc_builders [ i ] then
48026: LD_EXP 50
48030: PUSH
48031: LD_VAR 0 2
48035: ARRAY
48036: NOT
48037: IFFALSE 48095
// begin SetTag ( j , 103 ) ;
48039: LD_VAR 0 3
48043: PPUSH
48044: LD_INT 103
48046: PPUSH
48047: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
48051: LD_ADDR_EXP 50
48055: PUSH
48056: LD_EXP 50
48060: PPUSH
48061: LD_VAR 0 2
48065: PUSH
48066: LD_EXP 50
48070: PUSH
48071: LD_VAR 0 2
48075: ARRAY
48076: PUSH
48077: LD_INT 1
48079: PLUS
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PPUSH
48085: LD_VAR 0 3
48089: PPUSH
48090: CALL 3199 0 3
48094: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
48095: LD_VAR 0 3
48099: PPUSH
48100: CALL_OW 310
48104: IFFALSE 48115
// ComExitBuilding ( j ) ;
48106: LD_VAR 0 3
48110: PPUSH
48111: CALL_OW 122
// wait ( 3 ) ;
48115: LD_INT 3
48117: PPUSH
48118: CALL_OW 67
// if not HasTask ( j ) then
48122: LD_VAR 0 3
48126: PPUSH
48127: CALL_OW 314
48131: NOT
48132: IFFALSE 48219
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
48134: LD_VAR 0 3
48138: PPUSH
48139: LD_EXP 49
48143: PUSH
48144: LD_VAR 0 2
48148: ARRAY
48149: PUSH
48150: LD_INT 1
48152: ARRAY
48153: PUSH
48154: LD_INT 1
48156: ARRAY
48157: PPUSH
48158: LD_EXP 49
48162: PUSH
48163: LD_VAR 0 2
48167: ARRAY
48168: PUSH
48169: LD_INT 1
48171: ARRAY
48172: PUSH
48173: LD_INT 2
48175: ARRAY
48176: PPUSH
48177: LD_EXP 49
48181: PUSH
48182: LD_VAR 0 2
48186: ARRAY
48187: PUSH
48188: LD_INT 1
48190: ARRAY
48191: PUSH
48192: LD_INT 3
48194: ARRAY
48195: PPUSH
48196: LD_EXP 49
48200: PUSH
48201: LD_VAR 0 2
48205: ARRAY
48206: PUSH
48207: LD_INT 1
48209: ARRAY
48210: PUSH
48211: LD_INT 4
48213: ARRAY
48214: PPUSH
48215: CALL_OW 145
// end ;
48219: GO 48023
48221: POP
48222: POP
// end ; end ;
48223: GO 47494
48225: POP
48226: POP
// end ;
48227: LD_VAR 0 1
48231: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
48232: LD_INT 0
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
// if not mc_bases then
48241: LD_EXP 44
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48546
// for i = 1 to mc_bases do
48250: LD_ADDR_VAR 0 2
48254: PUSH
48255: DOUBLE
48256: LD_INT 1
48258: DEC
48259: ST_TO_ADDR
48260: LD_EXP 44
48264: PUSH
48265: FOR_TO
48266: IFFALSE 48544
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
48268: LD_EXP 52
48272: PUSH
48273: LD_VAR 0 2
48277: ARRAY
48278: NOT
48279: PUSH
48280: LD_EXP 44
48284: PUSH
48285: LD_VAR 0 2
48289: ARRAY
48290: PPUSH
48291: LD_INT 30
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PPUSH
48301: CALL_OW 72
48305: NOT
48306: OR
48307: IFFALSE 48311
// continue ;
48309: GO 48265
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
48311: LD_EXP 52
48315: PUSH
48316: LD_VAR 0 2
48320: ARRAY
48321: PUSH
48322: LD_INT 1
48324: ARRAY
48325: PPUSH
48326: CALL_OW 269
48330: IFFALSE 48396
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
48332: LD_ADDR_VAR 0 4
48336: PUSH
48337: LD_EXP 52
48341: PUSH
48342: LD_VAR 0 2
48346: ARRAY
48347: PPUSH
48348: LD_INT 1
48350: PPUSH
48351: CALL_OW 3
48355: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
48356: LD_ADDR_EXP 52
48360: PUSH
48361: LD_EXP 52
48365: PPUSH
48366: LD_VAR 0 2
48370: PPUSH
48371: LD_VAR 0 4
48375: PPUSH
48376: CALL_OW 1
48380: ST_TO_ADDR
// if not mc_turret_list [ i ] then
48381: LD_EXP 52
48385: PUSH
48386: LD_VAR 0 2
48390: ARRAY
48391: NOT
48392: IFFALSE 48396
// continue ;
48394: GO 48265
// end ; busy := false ;
48396: LD_ADDR_VAR 0 6
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48404: LD_ADDR_VAR 0 4
48408: PUSH
48409: LD_EXP 44
48413: PUSH
48414: LD_VAR 0 2
48418: ARRAY
48419: PPUSH
48420: LD_INT 30
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PPUSH
48430: CALL_OW 72
48434: ST_TO_ADDR
// for j in tmp do
48435: LD_ADDR_VAR 0 3
48439: PUSH
48440: LD_VAR 0 4
48444: PUSH
48445: FOR_IN
48446: IFFALSE 48474
// if not BuildingStatus ( j ) = bs_idle then
48448: LD_VAR 0 3
48452: PPUSH
48453: CALL_OW 461
48457: PUSH
48458: LD_INT 2
48460: EQUAL
48461: NOT
48462: IFFALSE 48472
// busy := true ;
48464: LD_ADDR_VAR 0 6
48468: PUSH
48469: LD_INT 1
48471: ST_TO_ADDR
48472: GO 48445
48474: POP
48475: POP
// if busy then
48476: LD_VAR 0 6
48480: IFFALSE 48484
// continue ;
48482: GO 48265
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
48484: LD_ADDR_VAR 0 7
48488: PUSH
48489: LD_EXP 52
48493: PUSH
48494: LD_VAR 0 2
48498: ARRAY
48499: PUSH
48500: LD_INT 1
48502: ARRAY
48503: PPUSH
48504: CALL 7160 0 1
48508: ST_TO_ADDR
// if not weapon then
48509: LD_VAR 0 7
48513: NOT
48514: IFFALSE 48518
// continue ;
48516: GO 48265
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
48518: LD_EXP 52
48522: PUSH
48523: LD_VAR 0 2
48527: ARRAY
48528: PUSH
48529: LD_INT 1
48531: ARRAY
48532: PPUSH
48533: LD_VAR 0 7
48537: PPUSH
48538: CALL_OW 148
// end ;
48542: GO 48265
48544: POP
48545: POP
// end ;
48546: LD_VAR 0 1
48550: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
48551: LD_INT 0
48553: PPUSH
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
// if not mc_bases then
48560: LD_EXP 44
48564: NOT
48565: IFFALSE 48569
// exit ;
48567: GO 49360
// for i = 1 to mc_bases do
48569: LD_ADDR_VAR 0 2
48573: PUSH
48574: DOUBLE
48575: LD_INT 1
48577: DEC
48578: ST_TO_ADDR
48579: LD_EXP 44
48583: PUSH
48584: FOR_TO
48585: IFFALSE 49358
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
48587: LD_ADDR_VAR 0 7
48591: PUSH
48592: LD_EXP 44
48596: PUSH
48597: LD_VAR 0 2
48601: ARRAY
48602: PPUSH
48603: LD_INT 24
48605: PUSH
48606: LD_INT 375
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 30
48618: PUSH
48619: LD_INT 32
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 30
48628: PUSH
48629: LD_INT 31
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 58
48643: PUSH
48644: EMPTY
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: PPUSH
48652: CALL_OW 72
48656: ST_TO_ADDR
// if not x then
48657: LD_VAR 0 7
48661: NOT
48662: IFFALSE 48666
// continue ;
48664: GO 48584
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
48666: LD_ADDR_EXP 53
48670: PUSH
48671: LD_EXP 53
48675: PPUSH
48676: LD_VAR 0 2
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PPUSH
48688: LD_VAR 0 7
48692: PPUSH
48693: CALL 3199 0 3
48697: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
48698: LD_EXP 53
48702: PUSH
48703: LD_VAR 0 2
48707: ARRAY
48708: NOT
48709: PUSH
48710: LD_EXP 53
48714: PUSH
48715: LD_VAR 0 2
48719: ARRAY
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: NOT
48725: OR
48726: PUSH
48727: LD_EXP 53
48731: PUSH
48732: LD_VAR 0 2
48736: ARRAY
48737: PUSH
48738: LD_INT 1
48740: ARRAY
48741: PUSH
48742: LD_INT 1
48744: ARRAY
48745: NOT
48746: OR
48747: IFFALSE 48751
// continue ;
48749: GO 48584
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
48751: LD_EXP 53
48755: PUSH
48756: LD_VAR 0 2
48760: ARRAY
48761: PUSH
48762: LD_INT 1
48764: ARRAY
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: PPUSH
48770: CALL_OW 313
48774: PUSH
48775: LD_INT 0
48777: EQUAL
48778: IFFALSE 49356
// if not mc_empty_turret_list [ i ] [ 2 ] then
48780: LD_EXP 53
48784: PUSH
48785: LD_VAR 0 2
48789: ARRAY
48790: PUSH
48791: LD_INT 2
48793: ARRAY
48794: NOT
48795: IFFALSE 49054
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
48797: LD_ADDR_VAR 0 6
48801: PUSH
48802: LD_EXP 44
48806: PUSH
48807: LD_VAR 0 2
48811: ARRAY
48812: PUSH
48813: LD_EXP 60
48817: PUSH
48818: LD_VAR 0 2
48822: ARRAY
48823: DIFF
48824: PPUSH
48825: LD_INT 25
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: LD_INT 54
48840: PUSH
48841: EMPTY
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PPUSH
48852: CALL_OW 72
48856: ST_TO_ADDR
// if tmp2 then
48857: LD_VAR 0 6
48861: IFFALSE 48903
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
48863: LD_ADDR_EXP 53
48867: PUSH
48868: LD_EXP 53
48872: PPUSH
48873: LD_VAR 0 2
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PPUSH
48885: LD_VAR 0 6
48889: PUSH
48890: LD_INT 1
48892: ARRAY
48893: PPUSH
48894: CALL 3199 0 3
48898: ST_TO_ADDR
// break ;
48899: GO 49358
// end else
48901: GO 49052
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
48903: LD_ADDR_VAR 0 5
48907: PUSH
48908: LD_EXP 44
48912: PUSH
48913: LD_VAR 0 2
48917: ARRAY
48918: PPUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 30
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 30
48934: PUSH
48935: LD_INT 5
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: PPUSH
48947: CALL_OW 72
48951: ST_TO_ADDR
// if not tmp then
48952: LD_VAR 0 5
48956: NOT
48957: IFFALSE 48961
// continue ;
48959: GO 48584
// for j in tmp do
48961: LD_ADDR_VAR 0 3
48965: PUSH
48966: LD_VAR 0 5
48970: PUSH
48971: FOR_IN
48972: IFFALSE 49050
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
48974: LD_ADDR_VAR 0 4
48978: PUSH
48979: LD_VAR 0 3
48983: PPUSH
48984: CALL_OW 313
48988: PPUSH
48989: LD_INT 25
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PPUSH
48999: CALL_OW 72
49003: ST_TO_ADDR
// if t then
49004: LD_VAR 0 4
49008: IFFALSE 49048
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
49010: LD_ADDR_EXP 53
49014: PUSH
49015: LD_EXP 53
49019: PPUSH
49020: LD_VAR 0 2
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PPUSH
49032: LD_VAR 0 4
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: PPUSH
49041: CALL 3199 0 3
49045: ST_TO_ADDR
// break ;
49046: GO 49050
// end ; end ;
49048: GO 48971
49050: POP
49051: POP
// end ; end else
49052: GO 49356
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
49054: LD_EXP 53
49058: PUSH
49059: LD_VAR 0 2
49063: ARRAY
49064: PUSH
49065: LD_INT 2
49067: ARRAY
49068: PUSH
49069: LD_INT 1
49071: ARRAY
49072: PPUSH
49073: CALL_OW 301
49077: IFFALSE 49110
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49079: LD_ADDR_EXP 53
49083: PUSH
49084: LD_EXP 53
49088: PPUSH
49089: LD_VAR 0 2
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PPUSH
49101: EMPTY
49102: PPUSH
49103: CALL 3199 0 3
49107: ST_TO_ADDR
// break ;
49108: GO 49358
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
49110: LD_EXP 53
49114: PUSH
49115: LD_VAR 0 2
49119: ARRAY
49120: PUSH
49121: LD_INT 2
49123: ARRAY
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PPUSH
49129: CALL_OW 314
49133: NOT
49134: PUSH
49135: LD_EXP 53
49139: PUSH
49140: LD_VAR 0 2
49144: ARRAY
49145: PUSH
49146: LD_INT 2
49148: ARRAY
49149: PUSH
49150: LD_INT 1
49152: ARRAY
49153: PUSH
49154: LD_EXP 53
49158: PUSH
49159: LD_VAR 0 2
49163: ARRAY
49164: PUSH
49165: LD_INT 1
49167: ARRAY
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: PPUSH
49173: CALL_OW 313
49177: IN
49178: NOT
49179: AND
49180: IFFALSE 49356
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
49182: LD_EXP 53
49186: PUSH
49187: LD_VAR 0 2
49191: ARRAY
49192: PUSH
49193: LD_INT 2
49195: ARRAY
49196: PUSH
49197: LD_INT 1
49199: ARRAY
49200: PPUSH
49201: CALL_OW 310
49205: IFFALSE 49230
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49207: LD_EXP 53
49211: PUSH
49212: LD_VAR 0 2
49216: ARRAY
49217: PUSH
49218: LD_INT 2
49220: ARRAY
49221: PUSH
49222: LD_INT 1
49224: ARRAY
49225: PPUSH
49226: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
49230: LD_EXP 53
49234: PUSH
49235: LD_VAR 0 2
49239: ARRAY
49240: PUSH
49241: LD_INT 2
49243: ARRAY
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: PPUSH
49249: LD_EXP 53
49253: PUSH
49254: LD_VAR 0 2
49258: ARRAY
49259: PUSH
49260: LD_INT 1
49262: ARRAY
49263: PUSH
49264: LD_INT 1
49266: ARRAY
49267: PPUSH
49268: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
49272: LD_INT 35
49274: PPUSH
49275: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
49279: LD_EXP 53
49283: PUSH
49284: LD_VAR 0 2
49288: ARRAY
49289: PUSH
49290: LD_INT 2
49292: ARRAY
49293: NOT
49294: IFFALSE 49298
// break ;
49296: GO 49323
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49298: LD_EXP 53
49302: PUSH
49303: LD_VAR 0 2
49307: ARRAY
49308: PUSH
49309: LD_INT 2
49311: ARRAY
49312: PUSH
49313: LD_INT 1
49315: ARRAY
49316: PPUSH
49317: CALL_OW 310
49321: IFFALSE 49272
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49323: LD_ADDR_EXP 53
49327: PUSH
49328: LD_EXP 53
49332: PPUSH
49333: LD_VAR 0 2
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PPUSH
49345: EMPTY
49346: PPUSH
49347: CALL 3199 0 3
49351: ST_TO_ADDR
// exit ;
49352: POP
49353: POP
49354: GO 49360
// end ; end ; end ;
49356: GO 48584
49358: POP
49359: POP
// end ;
49360: LD_VAR 0 1
49364: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
49365: LD_INT 0
49367: PPUSH
49368: PPUSH
49369: PPUSH
49370: PPUSH
49371: PPUSH
49372: PPUSH
// if not mc_bases then
49373: LD_EXP 44
49377: NOT
49378: IFFALSE 49382
// exit ;
49380: GO 50290
// for i = 1 to mc_bases do
49382: LD_ADDR_VAR 0 2
49386: PUSH
49387: DOUBLE
49388: LD_INT 1
49390: DEC
49391: ST_TO_ADDR
49392: LD_EXP 44
49396: PUSH
49397: FOR_TO
49398: IFFALSE 50288
// begin if mc_minefields [ i ] and mc_miners [ i ] then
49400: LD_EXP 56
49404: PUSH
49405: LD_VAR 0 2
49409: ARRAY
49410: PUSH
49411: LD_EXP 55
49415: PUSH
49416: LD_VAR 0 2
49420: ARRAY
49421: AND
49422: IFFALSE 49498
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
49424: LD_EXP 56
49428: PUSH
49429: LD_VAR 0 2
49433: ARRAY
49434: PPUSH
49435: LD_INT 81
49437: PUSH
49438: LD_EXP 55
49442: PUSH
49443: LD_VAR 0 2
49447: ARRAY
49448: PUSH
49449: LD_INT 1
49451: ARRAY
49452: PPUSH
49453: CALL_OW 255
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 21
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 21
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PPUSH
49494: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
49498: LD_EXP 54
49502: PUSH
49503: LD_VAR 0 2
49507: ARRAY
49508: NOT
49509: PUSH
49510: LD_EXP 54
49514: PUSH
49515: LD_VAR 0 2
49519: ARRAY
49520: PUSH
49521: LD_EXP 55
49525: PUSH
49526: LD_VAR 0 2
49530: ARRAY
49531: EQUAL
49532: OR
49533: IFFALSE 49537
// continue ;
49535: GO 49397
// if mc_miners [ i ] then
49537: LD_EXP 55
49541: PUSH
49542: LD_VAR 0 2
49546: ARRAY
49547: IFFALSE 49975
// for j = 1 to mc_miners [ i ] do
49549: LD_ADDR_VAR 0 3
49553: PUSH
49554: DOUBLE
49555: LD_INT 1
49557: DEC
49558: ST_TO_ADDR
49559: LD_EXP 55
49563: PUSH
49564: LD_VAR 0 2
49568: ARRAY
49569: PUSH
49570: FOR_TO
49571: IFFALSE 49973
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
49573: LD_EXP 55
49577: PUSH
49578: LD_VAR 0 2
49582: ARRAY
49583: PUSH
49584: LD_VAR 0 3
49588: ARRAY
49589: PPUSH
49590: CALL_OW 301
49594: IFFALSE 49676
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
49596: LD_ADDR_VAR 0 5
49600: PUSH
49601: LD_EXP 55
49605: PUSH
49606: LD_VAR 0 2
49610: ARRAY
49611: PUSH
49612: LD_EXP 55
49616: PUSH
49617: LD_VAR 0 2
49621: ARRAY
49622: PUSH
49623: LD_VAR 0 3
49627: ARRAY
49628: DIFF
49629: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
49630: LD_ADDR_EXP 55
49634: PUSH
49635: LD_EXP 55
49639: PPUSH
49640: LD_VAR 0 2
49644: PUSH
49645: LD_EXP 55
49649: PUSH
49650: LD_VAR 0 2
49654: ARRAY
49655: PUSH
49656: LD_INT 1
49658: PLUS
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PPUSH
49664: LD_VAR 0 5
49668: PPUSH
49669: CALL_OW 1
49673: ST_TO_ADDR
// continue ;
49674: GO 49570
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
49676: LD_EXP 55
49680: PUSH
49681: LD_VAR 0 2
49685: ARRAY
49686: PUSH
49687: LD_VAR 0 3
49691: ARRAY
49692: PPUSH
49693: CALL_OW 459
49697: NOT
49698: PUSH
49699: LD_EXP 55
49703: PUSH
49704: LD_VAR 0 2
49708: ARRAY
49709: PUSH
49710: LD_VAR 0 3
49714: ARRAY
49715: PPUSH
49716: CALL_OW 255
49720: PPUSH
49721: LD_EXP 54
49725: PUSH
49726: LD_VAR 0 2
49730: ARRAY
49731: PUSH
49732: LD_VAR 0 3
49736: ARRAY
49737: PUSH
49738: LD_INT 1
49740: ARRAY
49741: PPUSH
49742: LD_EXP 54
49746: PUSH
49747: LD_VAR 0 2
49751: ARRAY
49752: PUSH
49753: LD_VAR 0 3
49757: ARRAY
49758: PUSH
49759: LD_INT 2
49761: ARRAY
49762: PPUSH
49763: LD_INT 12
49765: PPUSH
49766: CALL 3693 0 4
49770: PUSH
49771: LD_INT 4
49773: ARRAY
49774: PUSH
49775: LD_INT 0
49777: EQUAL
49778: AND
49779: IFFALSE 49971
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
49781: LD_EXP 55
49785: PUSH
49786: LD_VAR 0 2
49790: ARRAY
49791: PUSH
49792: LD_VAR 0 3
49796: ARRAY
49797: PPUSH
49798: CALL_OW 310
49802: IFFALSE 49825
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
49804: LD_EXP 55
49808: PUSH
49809: LD_VAR 0 2
49813: ARRAY
49814: PUSH
49815: LD_VAR 0 3
49819: ARRAY
49820: PPUSH
49821: CALL_OW 122
// wait ( 3 ) ;
49825: LD_INT 3
49827: PPUSH
49828: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
49832: LD_EXP 54
49836: PUSH
49837: LD_VAR 0 2
49841: ARRAY
49842: PUSH
49843: LD_VAR 0 3
49847: ARRAY
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: PPUSH
49853: LD_EXP 54
49857: PUSH
49858: LD_VAR 0 2
49862: ARRAY
49863: PUSH
49864: LD_VAR 0 3
49868: ARRAY
49869: PUSH
49870: LD_INT 2
49872: ARRAY
49873: PPUSH
49874: CALL_OW 458
49878: NOT
49879: PUSH
49880: LD_EXP 55
49884: PUSH
49885: LD_VAR 0 2
49889: ARRAY
49890: PUSH
49891: LD_VAR 0 3
49895: ARRAY
49896: PPUSH
49897: CALL_OW 314
49901: NOT
49902: AND
49903: IFFALSE 49971
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
49905: LD_EXP 55
49909: PUSH
49910: LD_VAR 0 2
49914: ARRAY
49915: PUSH
49916: LD_VAR 0 3
49920: ARRAY
49921: PPUSH
49922: LD_EXP 54
49926: PUSH
49927: LD_VAR 0 2
49931: ARRAY
49932: PUSH
49933: LD_VAR 0 3
49937: ARRAY
49938: PUSH
49939: LD_INT 1
49941: ARRAY
49942: PPUSH
49943: LD_EXP 54
49947: PUSH
49948: LD_VAR 0 2
49952: ARRAY
49953: PUSH
49954: LD_VAR 0 3
49958: ARRAY
49959: PUSH
49960: LD_INT 2
49962: ARRAY
49963: PPUSH
49964: LD_INT 0
49966: PPUSH
49967: CALL_OW 133
// end ; end ;
49971: GO 49570
49973: POP
49974: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
49975: LD_ADDR_VAR 0 5
49979: PUSH
49980: LD_EXP 44
49984: PUSH
49985: LD_VAR 0 2
49989: ARRAY
49990: PPUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 30
49996: PUSH
49997: LD_INT 4
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 30
50006: PUSH
50007: LD_INT 5
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 30
50016: PUSH
50017: LD_INT 32
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: PPUSH
50030: CALL_OW 72
50034: ST_TO_ADDR
// if not tmp then
50035: LD_VAR 0 5
50039: NOT
50040: IFFALSE 50044
// continue ;
50042: GO 49397
// list := [ ] ;
50044: LD_ADDR_VAR 0 6
50048: PUSH
50049: EMPTY
50050: ST_TO_ADDR
// for j in tmp do
50051: LD_ADDR_VAR 0 3
50055: PUSH
50056: LD_VAR 0 5
50060: PUSH
50061: FOR_IN
50062: IFFALSE 50131
// begin for k in UnitsInside ( j ) do
50064: LD_ADDR_VAR 0 4
50068: PUSH
50069: LD_VAR 0 3
50073: PPUSH
50074: CALL_OW 313
50078: PUSH
50079: FOR_IN
50080: IFFALSE 50127
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
50082: LD_VAR 0 4
50086: PPUSH
50087: CALL_OW 257
50091: PUSH
50092: LD_INT 1
50094: EQUAL
50095: PUSH
50096: LD_VAR 0 4
50100: PPUSH
50101: CALL_OW 459
50105: NOT
50106: AND
50107: IFFALSE 50125
// list := list ^ k ;
50109: LD_ADDR_VAR 0 6
50113: PUSH
50114: LD_VAR 0 6
50118: PUSH
50119: LD_VAR 0 4
50123: ADD
50124: ST_TO_ADDR
50125: GO 50079
50127: POP
50128: POP
// end ;
50129: GO 50061
50131: POP
50132: POP
// list := list diff mc_miners [ i ] ;
50133: LD_ADDR_VAR 0 6
50137: PUSH
50138: LD_VAR 0 6
50142: PUSH
50143: LD_EXP 55
50147: PUSH
50148: LD_VAR 0 2
50152: ARRAY
50153: DIFF
50154: ST_TO_ADDR
// if not list then
50155: LD_VAR 0 6
50159: NOT
50160: IFFALSE 50164
// continue ;
50162: GO 49397
// k := mc_mines [ i ] - mc_miners [ i ] ;
50164: LD_ADDR_VAR 0 4
50168: PUSH
50169: LD_EXP 54
50173: PUSH
50174: LD_VAR 0 2
50178: ARRAY
50179: PUSH
50180: LD_EXP 55
50184: PUSH
50185: LD_VAR 0 2
50189: ARRAY
50190: MINUS
50191: ST_TO_ADDR
// if k > list then
50192: LD_VAR 0 4
50196: PUSH
50197: LD_VAR 0 6
50201: GREATER
50202: IFFALSE 50214
// k := list ;
50204: LD_ADDR_VAR 0 4
50208: PUSH
50209: LD_VAR 0 6
50213: ST_TO_ADDR
// for j = 1 to k do
50214: LD_ADDR_VAR 0 3
50218: PUSH
50219: DOUBLE
50220: LD_INT 1
50222: DEC
50223: ST_TO_ADDR
50224: LD_VAR 0 4
50228: PUSH
50229: FOR_TO
50230: IFFALSE 50284
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
50232: LD_ADDR_EXP 55
50236: PUSH
50237: LD_EXP 55
50241: PPUSH
50242: LD_VAR 0 2
50246: PUSH
50247: LD_EXP 55
50251: PUSH
50252: LD_VAR 0 2
50256: ARRAY
50257: PUSH
50258: LD_INT 1
50260: PLUS
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PPUSH
50266: LD_VAR 0 6
50270: PUSH
50271: LD_VAR 0 3
50275: ARRAY
50276: PPUSH
50277: CALL 3199 0 3
50281: ST_TO_ADDR
50282: GO 50229
50284: POP
50285: POP
// end ;
50286: GO 49397
50288: POP
50289: POP
// end ;
50290: LD_VAR 0 1
50294: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
50295: LD_INT 0
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
50301: PPUSH
// if not mc_bases then
50302: LD_EXP 44
50306: NOT
50307: IFFALSE 50311
// exit ;
50309: GO 51087
// for i = 1 to mc_bases do
50311: LD_ADDR_VAR 0 2
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_EXP 44
50325: PUSH
50326: FOR_TO
50327: IFFALSE 51085
// begin if not mc_bases [ i ] then
50329: LD_EXP 44
50333: PUSH
50334: LD_VAR 0 2
50338: ARRAY
50339: NOT
50340: IFFALSE 50344
// continue ;
50342: GO 50326
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
50344: LD_EXP 57
50348: PUSH
50349: LD_VAR 0 2
50353: ARRAY
50354: NOT
50355: PUSH
50356: LD_EXP 58
50360: PUSH
50361: LD_VAR 0 2
50365: ARRAY
50366: AND
50367: IFFALSE 50405
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50369: LD_ADDR_EXP 58
50373: PUSH
50374: LD_EXP 58
50378: PPUSH
50379: LD_VAR 0 2
50383: PPUSH
50384: EMPTY
50385: PPUSH
50386: CALL_OW 1
50390: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
50391: LD_VAR 0 2
50395: PPUSH
50396: LD_INT 107
50398: PPUSH
50399: CALL 45838 0 2
// continue ;
50403: GO 50326
// end ; target := [ ] ;
50405: LD_ADDR_VAR 0 5
50409: PUSH
50410: EMPTY
50411: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
50412: LD_ADDR_VAR 0 3
50416: PUSH
50417: DOUBLE
50418: LD_EXP 57
50422: PUSH
50423: LD_VAR 0 2
50427: ARRAY
50428: INC
50429: ST_TO_ADDR
50430: LD_INT 1
50432: PUSH
50433: FOR_DOWNTO
50434: IFFALSE 50694
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
50436: LD_EXP 57
50440: PUSH
50441: LD_VAR 0 2
50445: ARRAY
50446: PUSH
50447: LD_VAR 0 3
50451: ARRAY
50452: PUSH
50453: LD_INT 2
50455: ARRAY
50456: PPUSH
50457: LD_EXP 57
50461: PUSH
50462: LD_VAR 0 2
50466: ARRAY
50467: PUSH
50468: LD_VAR 0 3
50472: ARRAY
50473: PUSH
50474: LD_INT 3
50476: ARRAY
50477: PPUSH
50478: CALL_OW 488
50482: PUSH
50483: LD_EXP 57
50487: PUSH
50488: LD_VAR 0 2
50492: ARRAY
50493: PUSH
50494: LD_VAR 0 3
50498: ARRAY
50499: PUSH
50500: LD_INT 2
50502: ARRAY
50503: PPUSH
50504: LD_EXP 57
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: PUSH
50515: LD_VAR 0 3
50519: ARRAY
50520: PUSH
50521: LD_INT 3
50523: ARRAY
50524: PPUSH
50525: CALL_OW 284
50529: PUSH
50530: LD_INT 0
50532: EQUAL
50533: AND
50534: IFFALSE 50589
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
50536: LD_ADDR_VAR 0 4
50540: PUSH
50541: LD_EXP 57
50545: PUSH
50546: LD_VAR 0 2
50550: ARRAY
50551: PPUSH
50552: LD_VAR 0 3
50556: PPUSH
50557: CALL_OW 3
50561: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
50562: LD_ADDR_EXP 57
50566: PUSH
50567: LD_EXP 57
50571: PPUSH
50572: LD_VAR 0 2
50576: PPUSH
50577: LD_VAR 0 4
50581: PPUSH
50582: CALL_OW 1
50586: ST_TO_ADDR
// continue ;
50587: GO 50433
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
50589: LD_EXP 44
50593: PUSH
50594: LD_VAR 0 2
50598: ARRAY
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: PPUSH
50604: CALL_OW 255
50608: PPUSH
50609: LD_EXP 57
50613: PUSH
50614: LD_VAR 0 2
50618: ARRAY
50619: PUSH
50620: LD_VAR 0 3
50624: ARRAY
50625: PUSH
50626: LD_INT 2
50628: ARRAY
50629: PPUSH
50630: LD_EXP 57
50634: PUSH
50635: LD_VAR 0 2
50639: ARRAY
50640: PUSH
50641: LD_VAR 0 3
50645: ARRAY
50646: PUSH
50647: LD_INT 3
50649: ARRAY
50650: PPUSH
50651: LD_INT 20
50653: PPUSH
50654: CALL 3693 0 4
50658: PUSH
50659: LD_INT 4
50661: ARRAY
50662: PUSH
50663: LD_INT 0
50665: EQUAL
50666: IFFALSE 50692
// begin target := mc_crates [ i ] [ j ] ;
50668: LD_ADDR_VAR 0 5
50672: PUSH
50673: LD_EXP 57
50677: PUSH
50678: LD_VAR 0 2
50682: ARRAY
50683: PUSH
50684: LD_VAR 0 3
50688: ARRAY
50689: ST_TO_ADDR
// break ;
50690: GO 50694
// end ; end ;
50692: GO 50433
50694: POP
50695: POP
// if not target then
50696: LD_VAR 0 5
50700: NOT
50701: IFFALSE 50705
// continue ;
50703: GO 50326
// if mc_crates_collector [ i ] < 5 then
50705: LD_EXP 58
50709: PUSH
50710: LD_VAR 0 2
50714: ARRAY
50715: PUSH
50716: LD_INT 5
50718: LESS
50719: IFFALSE 50899
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
50721: LD_ADDR_VAR 0 4
50725: PUSH
50726: LD_EXP 44
50730: PUSH
50731: LD_VAR 0 2
50735: ARRAY
50736: PPUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 25
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 25
50752: PUSH
50753: LD_INT 16
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 24
50767: PUSH
50768: LD_INT 750
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PPUSH
50779: CALL_OW 72
50783: ST_TO_ADDR
// if not tmp then
50784: LD_VAR 0 4
50788: NOT
50789: IFFALSE 50793
// continue ;
50791: GO 50326
// for j in tmp do
50793: LD_ADDR_VAR 0 3
50797: PUSH
50798: LD_VAR 0 4
50802: PUSH
50803: FOR_IN
50804: IFFALSE 50897
// if GetTag ( j ) = 0 then
50806: LD_VAR 0 3
50810: PPUSH
50811: CALL_OW 110
50815: PUSH
50816: LD_INT 0
50818: EQUAL
50819: IFFALSE 50895
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
50821: LD_ADDR_EXP 58
50825: PUSH
50826: LD_EXP 58
50830: PPUSH
50831: LD_VAR 0 2
50835: PUSH
50836: LD_EXP 58
50840: PUSH
50841: LD_VAR 0 2
50845: ARRAY
50846: PUSH
50847: LD_INT 1
50849: PLUS
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PPUSH
50855: LD_VAR 0 3
50859: PPUSH
50860: CALL 3199 0 3
50864: ST_TO_ADDR
// SetTag ( j , 107 ) ;
50865: LD_VAR 0 3
50869: PPUSH
50870: LD_INT 107
50872: PPUSH
50873: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
50877: LD_EXP 58
50881: PUSH
50882: LD_VAR 0 2
50886: ARRAY
50887: PUSH
50888: LD_INT 5
50890: GREATER
50891: IFFALSE 50895
// break ;
50893: GO 50897
// end ;
50895: GO 50803
50897: POP
50898: POP
// end ; if mc_crates_collector [ i ] and target then
50899: LD_EXP 58
50903: PUSH
50904: LD_VAR 0 2
50908: ARRAY
50909: PUSH
50910: LD_VAR 0 5
50914: AND
50915: IFFALSE 51083
// begin if mc_crates_collector [ i ] < target [ 1 ] then
50917: LD_EXP 58
50921: PUSH
50922: LD_VAR 0 2
50926: ARRAY
50927: PUSH
50928: LD_VAR 0 5
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: LESS
50937: IFFALSE 50957
// tmp := mc_crates_collector [ i ] else
50939: LD_ADDR_VAR 0 4
50943: PUSH
50944: LD_EXP 58
50948: PUSH
50949: LD_VAR 0 2
50953: ARRAY
50954: ST_TO_ADDR
50955: GO 50971
// tmp := target [ 1 ] ;
50957: LD_ADDR_VAR 0 4
50961: PUSH
50962: LD_VAR 0 5
50966: PUSH
50967: LD_INT 1
50969: ARRAY
50970: ST_TO_ADDR
// for j = 1 to tmp do
50971: LD_ADDR_VAR 0 3
50975: PUSH
50976: DOUBLE
50977: LD_INT 1
50979: DEC
50980: ST_TO_ADDR
50981: LD_VAR 0 4
50985: PUSH
50986: FOR_TO
50987: IFFALSE 51081
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
50989: LD_EXP 58
50993: PUSH
50994: LD_VAR 0 2
50998: ARRAY
50999: PUSH
51000: LD_VAR 0 3
51004: ARRAY
51005: PPUSH
51006: CALL_OW 310
51010: IFFALSE 51033
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
51012: LD_EXP 58
51016: PUSH
51017: LD_VAR 0 2
51021: ARRAY
51022: PUSH
51023: LD_VAR 0 3
51027: ARRAY
51028: PPUSH
51029: CALL_OW 122
// wait ( 3 ) ;
51033: LD_INT 3
51035: PPUSH
51036: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
51040: LD_EXP 58
51044: PUSH
51045: LD_VAR 0 2
51049: ARRAY
51050: PUSH
51051: LD_VAR 0 3
51055: ARRAY
51056: PPUSH
51057: LD_VAR 0 5
51061: PUSH
51062: LD_INT 2
51064: ARRAY
51065: PPUSH
51066: LD_VAR 0 5
51070: PUSH
51071: LD_INT 3
51073: ARRAY
51074: PPUSH
51075: CALL_OW 117
// end ;
51079: GO 50986
51081: POP
51082: POP
// end ; end ;
51083: GO 50326
51085: POP
51086: POP
// end ;
51087: LD_VAR 0 1
51091: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
51092: LD_INT 0
51094: PPUSH
51095: PPUSH
51096: PPUSH
51097: PPUSH
// if not mc_bases then
51098: LD_EXP 44
51102: NOT
51103: IFFALSE 51107
// exit ;
51105: GO 51256
// for i = 1 to mc_bases do
51107: LD_ADDR_VAR 0 2
51111: PUSH
51112: DOUBLE
51113: LD_INT 1
51115: DEC
51116: ST_TO_ADDR
51117: LD_EXP 44
51121: PUSH
51122: FOR_TO
51123: IFFALSE 51254
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
51125: LD_ADDR_VAR 0 4
51129: PUSH
51130: LD_EXP 59
51134: PUSH
51135: LD_VAR 0 2
51139: ARRAY
51140: PPUSH
51141: LD_INT 33
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PPUSH
51151: CALL_OW 72
51155: ST_TO_ADDR
// if tmp then
51156: LD_VAR 0 4
51160: IFFALSE 51252
// for j in tmp do
51162: LD_ADDR_VAR 0 3
51166: PUSH
51167: LD_VAR 0 4
51171: PUSH
51172: FOR_IN
51173: IFFALSE 51250
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
51175: LD_VAR 0 3
51179: PPUSH
51180: CALL_OW 312
51184: NOT
51185: PUSH
51186: LD_VAR 0 3
51190: PPUSH
51191: CALL_OW 256
51195: PUSH
51196: LD_INT 250
51198: GREATEREQUAL
51199: AND
51200: IFFALSE 51213
// Connect ( j ) else
51202: LD_VAR 0 3
51206: PPUSH
51207: CALL 5681 0 1
51211: GO 51248
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
51213: LD_VAR 0 3
51217: PPUSH
51218: CALL_OW 256
51222: PUSH
51223: LD_INT 250
51225: LESS
51226: PUSH
51227: LD_VAR 0 3
51231: PPUSH
51232: CALL_OW 312
51236: AND
51237: IFFALSE 51248
// ComUnlink ( j ) ;
51239: LD_VAR 0 3
51243: PPUSH
51244: CALL_OW 136
51248: GO 51172
51250: POP
51251: POP
// end ;
51252: GO 51122
51254: POP
51255: POP
// end ;
51256: LD_VAR 0 1
51260: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
51261: LD_INT 0
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
// if not mc_bases then
51268: LD_EXP 44
51272: NOT
51273: IFFALSE 51277
// exit ;
51275: GO 51644
// for i = 1 to mc_bases do
51277: LD_ADDR_VAR 0 2
51281: PUSH
51282: DOUBLE
51283: LD_INT 1
51285: DEC
51286: ST_TO_ADDR
51287: LD_EXP 44
51291: PUSH
51292: FOR_TO
51293: IFFALSE 51642
// begin if not mc_produce [ i ] then
51295: LD_EXP 61
51299: PUSH
51300: LD_VAR 0 2
51304: ARRAY
51305: NOT
51306: IFFALSE 51310
// continue ;
51308: GO 51292
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51310: LD_ADDR_VAR 0 5
51314: PUSH
51315: LD_EXP 44
51319: PUSH
51320: LD_VAR 0 2
51324: ARRAY
51325: PPUSH
51326: LD_INT 30
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PPUSH
51336: CALL_OW 72
51340: ST_TO_ADDR
// if not fac then
51341: LD_VAR 0 5
51345: NOT
51346: IFFALSE 51350
// continue ;
51348: GO 51292
// for j in fac do
51350: LD_ADDR_VAR 0 3
51354: PUSH
51355: LD_VAR 0 5
51359: PUSH
51360: FOR_IN
51361: IFFALSE 51638
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
51363: LD_VAR 0 3
51367: PPUSH
51368: CALL_OW 461
51372: PUSH
51373: LD_INT 2
51375: NONEQUAL
51376: PUSH
51377: LD_VAR 0 3
51381: PPUSH
51382: LD_INT 20
51384: PPUSH
51385: CALL 5372 0 2
51389: PUSH
51390: LD_INT 4
51392: ARRAY
51393: OR
51394: PUSH
51395: LD_VAR 0 3
51399: PPUSH
51400: CALL_OW 313
51404: PUSH
51405: LD_INT 0
51407: EQUAL
51408: OR
51409: IFFALSE 51413
// continue ;
51411: GO 51360
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
51413: LD_VAR 0 3
51417: PPUSH
51418: LD_EXP 61
51422: PUSH
51423: LD_VAR 0 2
51427: ARRAY
51428: PUSH
51429: LD_INT 1
51431: ARRAY
51432: PUSH
51433: LD_INT 1
51435: ARRAY
51436: PPUSH
51437: LD_EXP 61
51441: PUSH
51442: LD_VAR 0 2
51446: ARRAY
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PUSH
51452: LD_INT 2
51454: ARRAY
51455: PPUSH
51456: LD_EXP 61
51460: PUSH
51461: LD_VAR 0 2
51465: ARRAY
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PUSH
51471: LD_INT 3
51473: ARRAY
51474: PPUSH
51475: LD_EXP 61
51479: PUSH
51480: LD_VAR 0 2
51484: ARRAY
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: PUSH
51490: LD_INT 4
51492: ARRAY
51493: PPUSH
51494: CALL_OW 448
51498: IFFALSE 51636
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
51500: LD_VAR 0 3
51504: PPUSH
51505: LD_EXP 61
51509: PUSH
51510: LD_VAR 0 2
51514: ARRAY
51515: PUSH
51516: LD_INT 1
51518: ARRAY
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: PPUSH
51524: LD_EXP 61
51528: PUSH
51529: LD_VAR 0 2
51533: ARRAY
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PUSH
51539: LD_INT 2
51541: ARRAY
51542: PPUSH
51543: LD_EXP 61
51547: PUSH
51548: LD_VAR 0 2
51552: ARRAY
51553: PUSH
51554: LD_INT 1
51556: ARRAY
51557: PUSH
51558: LD_INT 3
51560: ARRAY
51561: PPUSH
51562: LD_EXP 61
51566: PUSH
51567: LD_VAR 0 2
51571: ARRAY
51572: PUSH
51573: LD_INT 1
51575: ARRAY
51576: PUSH
51577: LD_INT 4
51579: ARRAY
51580: PPUSH
51581: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
51585: LD_ADDR_VAR 0 4
51589: PUSH
51590: LD_EXP 61
51594: PUSH
51595: LD_VAR 0 2
51599: ARRAY
51600: PPUSH
51601: LD_INT 1
51603: PPUSH
51604: CALL_OW 3
51608: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
51609: LD_ADDR_EXP 61
51613: PUSH
51614: LD_EXP 61
51618: PPUSH
51619: LD_VAR 0 2
51623: PPUSH
51624: LD_VAR 0 4
51628: PPUSH
51629: CALL_OW 1
51633: ST_TO_ADDR
// break ;
51634: GO 51638
// end ; end ;
51636: GO 51360
51638: POP
51639: POP
// end ;
51640: GO 51292
51642: POP
51643: POP
// end ;
51644: LD_VAR 0 1
51648: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
51649: LD_INT 0
51651: PPUSH
51652: PPUSH
51653: PPUSH
// if not mc_bases then
51654: LD_EXP 44
51658: NOT
51659: IFFALSE 51663
// exit ;
51661: GO 51752
// for i = 1 to mc_bases do
51663: LD_ADDR_VAR 0 2
51667: PUSH
51668: DOUBLE
51669: LD_INT 1
51671: DEC
51672: ST_TO_ADDR
51673: LD_EXP 44
51677: PUSH
51678: FOR_TO
51679: IFFALSE 51750
// begin if mc_attack [ i ] then
51681: LD_EXP 60
51685: PUSH
51686: LD_VAR 0 2
51690: ARRAY
51691: IFFALSE 51748
// begin tmp := mc_attack [ i ] [ 1 ] ;
51693: LD_ADDR_VAR 0 3
51697: PUSH
51698: LD_EXP 60
51702: PUSH
51703: LD_VAR 0 2
51707: ARRAY
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
51713: LD_ADDR_EXP 60
51717: PUSH
51718: LD_EXP 60
51722: PPUSH
51723: LD_VAR 0 2
51727: PPUSH
51728: EMPTY
51729: PPUSH
51730: CALL_OW 1
51734: ST_TO_ADDR
// Attack ( tmp ) ;
51735: LD_VAR 0 3
51739: PPUSH
51740: CALL 29321 0 1
// exit ;
51744: POP
51745: POP
51746: GO 51752
// end ; end ;
51748: GO 51678
51750: POP
51751: POP
// end ;
51752: LD_VAR 0 1
51756: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
51757: LD_INT 0
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
// if not mc_bases then
51766: LD_EXP 44
51770: NOT
51771: IFFALSE 51775
// exit ;
51773: GO 52070
// for i = 1 to mc_bases do
51775: LD_ADDR_VAR 0 2
51779: PUSH
51780: DOUBLE
51781: LD_INT 1
51783: DEC
51784: ST_TO_ADDR
51785: LD_EXP 44
51789: PUSH
51790: FOR_TO
51791: IFFALSE 52068
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
51793: LD_ADDR_EXP 63
51797: PUSH
51798: LD_EXP 63
51802: PPUSH
51803: LD_VAR 0 2
51807: PPUSH
51808: LD_EXP 44
51812: PUSH
51813: LD_VAR 0 2
51817: ARRAY
51818: PPUSH
51819: CALL 32951 0 1
51823: PPUSH
51824: CALL_OW 1
51828: ST_TO_ADDR
// if mc_scan [ i ] and mc_defender [ i ] then
51829: LD_EXP 63
51833: PUSH
51834: LD_VAR 0 2
51838: ARRAY
51839: PUSH
51840: LD_EXP 62
51844: PUSH
51845: LD_VAR 0 2
51849: ARRAY
51850: AND
51851: IFFALSE 52066
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
51853: LD_ADDR_VAR 0 7
51857: PUSH
51858: LD_EXP 62
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PPUSH
51867: CALL 33058 0 1
51871: ST_TO_ADDR
// if class then
51872: LD_VAR 0 7
51876: IFFALSE 51999
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
51878: LD_ADDR_VAR 0 4
51882: PUSH
51883: LD_EXP 44
51887: PUSH
51888: LD_VAR 0 2
51892: ARRAY
51893: PPUSH
51894: LD_INT 30
51896: PUSH
51897: LD_INT 5
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PPUSH
51904: CALL_OW 72
51908: ST_TO_ADDR
// if tmp then
51909: LD_VAR 0 4
51913: IFFALSE 51999
// begin for j in tmp do
51915: LD_ADDR_VAR 0 3
51919: PUSH
51920: LD_VAR 0 4
51924: PUSH
51925: FOR_IN
51926: IFFALSE 51997
// begin t := UnitsInside ( j ) ;
51928: LD_ADDR_VAR 0 5
51932: PUSH
51933: LD_VAR 0 3
51937: PPUSH
51938: CALL_OW 313
51942: ST_TO_ADDR
// if not t then
51943: LD_VAR 0 5
51947: NOT
51948: IFFALSE 51952
// continue ;
51950: GO 51925
// for x in t do
51952: LD_ADDR_VAR 0 6
51956: PUSH
51957: LD_VAR 0 5
51961: PUSH
51962: FOR_IN
51963: IFFALSE 51993
// if not MineOfUnit ( x ) then
51965: LD_VAR 0 6
51969: PPUSH
51970: CALL_OW 459
51974: NOT
51975: IFFALSE 51991
// SetClass ( x , class ) ;
51977: LD_VAR 0 6
51981: PPUSH
51982: LD_VAR 0 7
51986: PPUSH
51987: CALL_OW 336
51991: GO 51962
51993: POP
51994: POP
// end ;
51995: GO 51925
51997: POP
51998: POP
// end ; end ; tmp := mc_defender [ i ] ;
51999: LD_ADDR_VAR 0 4
52003: PUSH
52004: LD_EXP 62
52008: PUSH
52009: LD_VAR 0 2
52013: ARRAY
52014: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52015: LD_ADDR_EXP 62
52019: PUSH
52020: LD_EXP 62
52024: PPUSH
52025: LD_VAR 0 2
52029: PPUSH
52030: EMPTY
52031: PPUSH
52032: CALL_OW 1
52036: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
52037: LD_VAR 0 2
52041: PPUSH
52042: LD_VAR 0 4
52046: PPUSH
52047: LD_EXP 63
52051: PUSH
52052: LD_VAR 0 2
52056: ARRAY
52057: PPUSH
52058: CALL 32404 0 3
// exit ;
52062: POP
52063: POP
52064: GO 52070
// end ; end ;
52066: GO 51790
52068: POP
52069: POP
// end ;
52070: LD_VAR 0 1
52074: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
52075: LD_INT 0
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
52081: LD_VAR 0 1
52085: NOT
52086: PUSH
52087: LD_VAR 0 2
52091: NOT
52092: OR
52093: PUSH
52094: LD_VAR 0 3
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 5
52113: PUSH
52114: LD_INT 8
52116: PUSH
52117: LD_INT 9
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: IN
52129: NOT
52130: OR
52131: PUSH
52132: LD_VAR 0 2
52136: PUSH
52137: LD_EXP 62
52141: PUSH
52142: LD_VAR 0 5
52146: ARRAY
52147: IN
52148: OR
52149: IFFALSE 52153
// exit ;
52151: GO 52565
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
52153: LD_ADDR_VAR 0 1
52157: PUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: LD_INT 21
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 24
52175: PUSH
52176: LD_INT 250
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PPUSH
52187: CALL_OW 72
52191: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
52192: LD_VAR 0 3
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: LD_INT 8
52202: PUSH
52203: LD_INT 9
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: IN
52211: IFFALSE 52221
// class := 1 ;
52213: LD_ADDR_VAR 0 3
52217: PUSH
52218: LD_INT 1
52220: ST_TO_ADDR
// case class of 1 :
52221: LD_VAR 0 3
52225: PUSH
52226: LD_INT 1
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52234
52232: GO 52280
52234: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
52235: LD_ADDR_VAR 0 7
52239: PUSH
52240: LD_VAR 0 1
52244: PPUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 30
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 30
52260: PUSH
52261: LD_INT 5
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: PPUSH
52273: CALL_OW 72
52277: ST_TO_ADDR
52278: GO 52454
52280: LD_INT 2
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52288
52286: GO 52334
52288: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
52289: LD_ADDR_VAR 0 7
52293: PUSH
52294: LD_VAR 0 1
52298: PPUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 30
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 30
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PPUSH
52327: CALL_OW 72
52331: ST_TO_ADDR
52332: GO 52454
52334: LD_INT 3
52336: DOUBLE
52337: EQUAL
52338: IFTRUE 52342
52340: GO 52388
52342: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52343: LD_ADDR_VAR 0 7
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 30
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 30
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: PPUSH
52381: CALL_OW 72
52385: ST_TO_ADDR
52386: GO 52454
52388: LD_INT 4
52390: DOUBLE
52391: EQUAL
52392: IFTRUE 52396
52394: GO 52453
52396: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
52397: LD_ADDR_VAR 0 7
52401: PUSH
52402: LD_VAR 0 1
52406: PPUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 30
52412: PUSH
52413: LD_INT 6
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 30
52422: PUSH
52423: LD_INT 7
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 30
52432: PUSH
52433: LD_INT 8
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: PPUSH
52446: CALL_OW 72
52450: ST_TO_ADDR
52451: GO 52454
52453: POP
// if not tmp then
52454: LD_VAR 0 7
52458: NOT
52459: IFFALSE 52463
// exit ;
52461: GO 52565
// for i in tmp do
52463: LD_ADDR_VAR 0 5
52467: PUSH
52468: LD_VAR 0 7
52472: PUSH
52473: FOR_IN
52474: IFFALSE 52543
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
52476: LD_VAR 0 5
52480: PPUSH
52481: CALL_OW 313
52485: PUSH
52486: LD_INT 6
52488: LESS
52489: PUSH
52490: LD_VAR 0 5
52494: PPUSH
52495: CALL_OW 266
52499: PUSH
52500: LD_INT 31
52502: PUSH
52503: LD_INT 32
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: IN
52510: NOT
52511: AND
52512: PUSH
52513: LD_VAR 0 5
52517: PPUSH
52518: CALL_OW 313
52522: PUSH
52523: LD_INT 0
52525: EQUAL
52526: OR
52527: IFFALSE 52541
// begin j := i ;
52529: LD_ADDR_VAR 0 6
52533: PUSH
52534: LD_VAR 0 5
52538: ST_TO_ADDR
// break ;
52539: GO 52543
// end ; end ;
52541: GO 52473
52543: POP
52544: POP
// if j then
52545: LD_VAR 0 6
52549: IFFALSE 52565
// ComEnterUnit ( unit , j ) ;
52551: LD_VAR 0 2
52555: PPUSH
52556: LD_VAR 0 6
52560: PPUSH
52561: CALL_OW 120
// end ;
52565: LD_VAR 0 4
52569: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
52570: LD_INT 0
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
// if not mc_bases then
52576: LD_EXP 44
52580: NOT
52581: IFFALSE 52585
// exit ;
52583: GO 52814
// for i = 1 to mc_bases do
52585: LD_ADDR_VAR 0 2
52589: PUSH
52590: DOUBLE
52591: LD_INT 1
52593: DEC
52594: ST_TO_ADDR
52595: LD_EXP 44
52599: PUSH
52600: FOR_TO
52601: IFFALSE 52812
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
52603: LD_ADDR_VAR 0 4
52607: PUSH
52608: LD_EXP 44
52612: PUSH
52613: LD_VAR 0 2
52617: ARRAY
52618: PPUSH
52619: LD_INT 21
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PPUSH
52629: CALL_OW 72
52633: ST_TO_ADDR
// if not tmp then
52634: LD_VAR 0 4
52638: NOT
52639: IFFALSE 52645
// exit ;
52641: POP
52642: POP
52643: GO 52814
// for j in tmp do
52645: LD_ADDR_VAR 0 3
52649: PUSH
52650: LD_VAR 0 4
52654: PUSH
52655: FOR_IN
52656: IFFALSE 52808
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
52658: LD_VAR 0 3
52662: PPUSH
52663: CALL_OW 257
52667: PUSH
52668: LD_INT 3
52670: EQUAL
52671: PUSH
52672: LD_EXP 63
52676: PUSH
52677: LD_VAR 0 2
52681: ARRAY
52682: AND
52683: IFFALSE 52687
// continue ;
52685: GO 52655
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
52687: LD_VAR 0 3
52691: PPUSH
52692: CALL_OW 110
52696: NOT
52697: PUSH
52698: LD_VAR 0 3
52702: PPUSH
52703: CALL_OW 314
52707: NOT
52708: AND
52709: PUSH
52710: LD_VAR 0 3
52714: PPUSH
52715: CALL_OW 310
52719: NOT
52720: AND
52721: PUSH
52722: LD_EXP 47
52726: PUSH
52727: LD_VAR 0 2
52731: ARRAY
52732: PUSH
52733: LD_INT 1
52735: ARRAY
52736: NOT
52737: AND
52738: PUSH
52739: LD_EXP 47
52743: PUSH
52744: LD_VAR 0 2
52748: ARRAY
52749: PUSH
52750: LD_INT 2
52752: ARRAY
52753: NOT
52754: AND
52755: PUSH
52756: LD_VAR 0 3
52760: PUSH
52761: LD_EXP 53
52765: PUSH
52766: LD_VAR 0 2
52770: ARRAY
52771: IN
52772: NOT
52773: AND
52774: IFFALSE 52806
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
52776: LD_EXP 44
52780: PUSH
52781: LD_VAR 0 2
52785: ARRAY
52786: PPUSH
52787: LD_VAR 0 3
52791: PPUSH
52792: LD_VAR 0 3
52796: PPUSH
52797: CALL_OW 257
52801: PPUSH
52802: CALL 52075 0 3
// end ;
52806: GO 52655
52808: POP
52809: POP
// end ;
52810: GO 52600
52812: POP
52813: POP
// end ;
52814: LD_VAR 0 1
52818: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
52819: LD_INT 0
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
// if not mc_bases [ base ] then
52828: LD_EXP 44
52832: PUSH
52833: LD_VAR 0 1
52837: ARRAY
52838: NOT
52839: IFFALSE 52843
// exit ;
52841: GO 53111
// tmp := [ ] ;
52843: LD_ADDR_VAR 0 7
52847: PUSH
52848: EMPTY
52849: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
52850: LD_ADDR_VAR 0 8
52854: PUSH
52855: LD_VAR 0 3
52859: PPUSH
52860: LD_INT 0
52862: PPUSH
52863: CALL_OW 517
52867: ST_TO_ADDR
// if not list then
52868: LD_VAR 0 8
52872: NOT
52873: IFFALSE 52877
// exit ;
52875: GO 53111
// for i = 1 to amount do
52877: LD_ADDR_VAR 0 5
52881: PUSH
52882: DOUBLE
52883: LD_INT 1
52885: DEC
52886: ST_TO_ADDR
52887: LD_VAR 0 2
52891: PUSH
52892: FOR_TO
52893: IFFALSE 53059
// begin c := rand ( 1 , list [ 1 ] - i ) ;
52895: LD_ADDR_VAR 0 6
52899: PUSH
52900: LD_INT 1
52902: PPUSH
52903: LD_VAR 0 8
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: PUSH
52912: LD_VAR 0 5
52916: MINUS
52917: PPUSH
52918: CALL_OW 12
52922: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
52923: LD_ADDR_VAR 0 7
52927: PUSH
52928: LD_VAR 0 7
52932: PPUSH
52933: LD_VAR 0 5
52937: PPUSH
52938: LD_VAR 0 8
52942: PUSH
52943: LD_INT 1
52945: ARRAY
52946: PUSH
52947: LD_VAR 0 6
52951: ARRAY
52952: PUSH
52953: LD_VAR 0 8
52957: PUSH
52958: LD_INT 2
52960: ARRAY
52961: PUSH
52962: LD_VAR 0 6
52966: ARRAY
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PPUSH
52972: CALL_OW 1
52976: ST_TO_ADDR
// for j = 1 to 2 do
52977: LD_ADDR_VAR 0 10
52981: PUSH
52982: DOUBLE
52983: LD_INT 1
52985: DEC
52986: ST_TO_ADDR
52987: LD_INT 2
52989: PUSH
52990: FOR_TO
52991: IFFALSE 53046
// begin x := Delete ( list [ j ] , c ) ;
52993: LD_ADDR_VAR 0 9
52997: PUSH
52998: LD_VAR 0 8
53002: PUSH
53003: LD_VAR 0 10
53007: ARRAY
53008: PPUSH
53009: LD_VAR 0 6
53013: PPUSH
53014: CALL_OW 3
53018: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
53019: LD_ADDR_VAR 0 8
53023: PUSH
53024: LD_VAR 0 8
53028: PPUSH
53029: LD_VAR 0 10
53033: PPUSH
53034: LD_VAR 0 9
53038: PPUSH
53039: CALL_OW 1
53043: ST_TO_ADDR
// end ;
53044: GO 52990
53046: POP
53047: POP
// if not list then
53048: LD_VAR 0 8
53052: NOT
53053: IFFALSE 53057
// break ;
53055: GO 53059
// end ;
53057: GO 52892
53059: POP
53060: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
53061: LD_ADDR_EXP 54
53065: PUSH
53066: LD_EXP 54
53070: PPUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: LD_VAR 0 7
53080: PPUSH
53081: CALL_OW 1
53085: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
53086: LD_ADDR_EXP 56
53090: PUSH
53091: LD_EXP 56
53095: PPUSH
53096: LD_VAR 0 1
53100: PPUSH
53101: LD_VAR 0 3
53105: PPUSH
53106: CALL_OW 1
53110: ST_TO_ADDR
// end ;
53111: LD_VAR 0 4
53115: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
53116: LD_INT 0
53118: PPUSH
// if not mc_bases [ base ] then
53119: LD_EXP 44
53123: PUSH
53124: LD_VAR 0 1
53128: ARRAY
53129: NOT
53130: IFFALSE 53134
// exit ;
53132: GO 53159
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
53134: LD_ADDR_EXP 61
53138: PUSH
53139: LD_EXP 61
53143: PPUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: LD_VAR 0 2
53153: PPUSH
53154: CALL_OW 1
53158: ST_TO_ADDR
// end ;
53159: LD_VAR 0 3
53163: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53164: LD_INT 0
53166: PPUSH
// if not mc_bases [ base ] then
53167: LD_EXP 44
53171: PUSH
53172: LD_VAR 0 1
53176: ARRAY
53177: NOT
53178: IFFALSE 53182
// exit ;
53180: GO 53207
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53182: LD_ADDR_EXP 62
53186: PUSH
53187: LD_EXP 62
53191: PPUSH
53192: LD_VAR 0 1
53196: PPUSH
53197: LD_VAR 0 2
53201: PPUSH
53202: CALL_OW 1
53206: ST_TO_ADDR
// end ;
53207: LD_VAR 0 3
53211: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
53212: LD_INT 0
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
// if not mc_bases [ base ] then
53218: LD_EXP 44
53222: PUSH
53223: LD_VAR 0 1
53227: ARRAY
53228: NOT
53229: IFFALSE 53233
// exit ;
53231: GO 53298
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
53233: LD_ADDR_EXP 60
53237: PUSH
53238: LD_EXP 60
53242: PPUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_EXP 60
53252: PUSH
53253: LD_VAR 0 1
53257: ARRAY
53258: PUSH
53259: LD_INT 1
53261: PLUS
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PPUSH
53267: LD_VAR 0 1
53271: PUSH
53272: LD_VAR 0 2
53276: PUSH
53277: LD_VAR 0 3
53281: PUSH
53282: LD_VAR 0 4
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: PPUSH
53293: CALL 3199 0 3
53297: ST_TO_ADDR
// end ;
53298: LD_VAR 0 5
53302: RET
// export function MC_GetMinesField ( base ) ; begin
53303: LD_INT 0
53305: PPUSH
// result := mc_mines [ base ] ;
53306: LD_ADDR_VAR 0 2
53310: PUSH
53311: LD_EXP 54
53315: PUSH
53316: LD_VAR 0 1
53320: ARRAY
53321: ST_TO_ADDR
// end ;
53322: LD_VAR 0 2
53326: RET
// export function MC_GetProduceList ( base ) ; begin
53327: LD_INT 0
53329: PPUSH
// result := mc_produce [ base ] ;
53330: LD_ADDR_VAR 0 2
53334: PUSH
53335: LD_EXP 61
53339: PUSH
53340: LD_VAR 0 1
53344: ARRAY
53345: ST_TO_ADDR
// end ; end_of_file
53346: LD_VAR 0 2
53350: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 255
53360: PUSH
53361: LD_INT 1
53363: EQUAL
53364: IFFALSE 53374
// artifact_get := true ;
53366: LD_ADDR_EXP 12
53370: PUSH
53371: LD_INT 1
53373: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
53374: LD_VAR 0 1
53378: PPUSH
53379: CALL_OW 255
53383: PUSH
53384: LD_INT 2
53386: EQUAL
53387: IFFALSE 53405
// begin artifact_get := false ;
53389: LD_ADDR_EXP 12
53393: PUSH
53394: LD_INT 0
53396: ST_TO_ADDR
// artifact_stolen := true ;
53397: LD_ADDR_EXP 11
53401: PUSH
53402: LD_INT 1
53404: ST_TO_ADDR
// end ; artifact_oncargo := true ;
53405: LD_ADDR_EXP 13
53409: PUSH
53410: LD_INT 1
53412: ST_TO_ADDR
// end ;
53413: PPOPN 2
53415: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
53416: LD_ADDR_EXP 13
53420: PUSH
53421: LD_INT 0
53423: ST_TO_ADDR
// end ;
53424: PPOPN 2
53426: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
53434: LD_VAR 0 1
53438: PUSH
53439: LD_INT 22
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 21
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 25
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 25
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 25
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 25
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 25
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 25
53514: PUSH
53515: LD_INT 8
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: PPUSH
53536: CALL_OW 69
53540: IN
53541: IFFALSE 53557
// loses_counter := loses_counter + 1 ;
53543: LD_ADDR_EXP 16
53547: PUSH
53548: LD_EXP 16
53552: PUSH
53553: LD_INT 1
53555: PLUS
53556: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
53557: LD_VAR 0 1
53561: PUSH
53562: LD_INT 21
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PPUSH
53572: CALL_OW 69
53576: IN
53577: IFFALSE 54093
// begin if not mc_bases then
53579: LD_EXP 44
53583: NOT
53584: IFFALSE 53588
// exit ;
53586: GO 54093
// pos := mc_build_list [ i ] + 1 ;
53588: LD_ADDR_VAR 0 5
53592: PUSH
53593: LD_EXP 49
53597: PUSH
53598: LD_VAR 0 2
53602: ARRAY
53603: PUSH
53604: LD_INT 1
53606: PLUS
53607: ST_TO_ADDR
// btype := GetBType ( un ) ;
53608: LD_ADDR_VAR 0 4
53612: PUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 266
53622: ST_TO_ADDR
// if btype = b_warehouse then
53623: LD_VAR 0 4
53627: PUSH
53628: LD_INT 1
53630: EQUAL
53631: IFFALSE 53649
// begin btype := b_depot ;
53633: LD_ADDR_VAR 0 4
53637: PUSH
53638: LD_INT 0
53640: ST_TO_ADDR
// pos := 1 ;
53641: LD_ADDR_VAR 0 5
53645: PUSH
53646: LD_INT 1
53648: ST_TO_ADDR
// end ; if btype = b_factory then
53649: LD_VAR 0 4
53653: PUSH
53654: LD_INT 3
53656: EQUAL
53657: IFFALSE 53675
// begin btype := b_workshop ;
53659: LD_ADDR_VAR 0 4
53663: PUSH
53664: LD_INT 2
53666: ST_TO_ADDR
// pos := 1 ;
53667: LD_ADDR_VAR 0 5
53671: PUSH
53672: LD_INT 1
53674: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
53675: LD_VAR 0 4
53679: PUSH
53680: LD_INT 7
53682: PUSH
53683: LD_INT 8
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: IN
53690: IFFALSE 53700
// btype := b_lab ;
53692: LD_ADDR_VAR 0 4
53696: PUSH
53697: LD_INT 6
53699: ST_TO_ADDR
// for i = 1 to mc_bases do
53700: LD_ADDR_VAR 0 2
53704: PUSH
53705: DOUBLE
53706: LD_INT 1
53708: DEC
53709: ST_TO_ADDR
53710: LD_EXP 44
53714: PUSH
53715: FOR_TO
53716: IFFALSE 54091
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
53718: LD_VAR 0 1
53722: PUSH
53723: LD_EXP 44
53727: PUSH
53728: LD_VAR 0 2
53732: ARRAY
53733: IN
53734: PUSH
53735: LD_VAR 0 1
53739: PUSH
53740: LD_EXP 51
53744: PUSH
53745: LD_VAR 0 2
53749: ARRAY
53750: IN
53751: OR
53752: IFFALSE 54089
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
53754: LD_ADDR_EXP 49
53758: PUSH
53759: LD_EXP 49
53763: PPUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_EXP 49
53773: PUSH
53774: LD_VAR 0 2
53778: ARRAY
53779: PUSH
53780: LD_INT 1
53782: PLUS
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PPUSH
53788: LD_VAR 0 4
53792: PUSH
53793: LD_VAR 0 1
53797: PPUSH
53798: CALL_OW 250
53802: PUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: CALL_OW 251
53812: PUSH
53813: LD_VAR 0 1
53817: PPUSH
53818: CALL_OW 254
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: PPUSH
53829: CALL 3199 0 3
53833: ST_TO_ADDR
// if pos = 1 then
53834: LD_VAR 0 5
53838: PUSH
53839: LD_INT 1
53841: EQUAL
53842: IFFALSE 53957
// begin tmp := mc_build_list [ i ] ;
53844: LD_ADDR_VAR 0 6
53848: PUSH
53849: LD_EXP 49
53853: PUSH
53854: LD_VAR 0 2
53858: ARRAY
53859: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53860: LD_VAR 0 6
53864: PPUSH
53865: LD_INT 2
53867: PUSH
53868: LD_INT 30
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 30
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: PPUSH
53893: CALL_OW 72
53897: IFFALSE 53907
// pos := 2 ;
53899: LD_ADDR_VAR 0 5
53903: PUSH
53904: LD_INT 2
53906: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
53907: LD_ADDR_VAR 0 6
53911: PUSH
53912: LD_VAR 0 6
53916: PPUSH
53917: LD_VAR 0 5
53921: PPUSH
53922: LD_VAR 0 6
53926: PPUSH
53927: CALL 3090 0 3
53931: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
53932: LD_ADDR_EXP 49
53936: PUSH
53937: LD_EXP 49
53941: PPUSH
53942: LD_VAR 0 2
53946: PPUSH
53947: LD_VAR 0 6
53951: PPUSH
53952: CALL_OW 1
53956: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
53957: LD_VAR 0 1
53961: PUSH
53962: LD_EXP 44
53966: PUSH
53967: LD_VAR 0 2
53971: ARRAY
53972: IN
53973: IFFALSE 54022
// begin tmp := mc_bases [ i ] diff un ;
53975: LD_ADDR_VAR 0 6
53979: PUSH
53980: LD_EXP 44
53984: PUSH
53985: LD_VAR 0 2
53989: ARRAY
53990: PUSH
53991: LD_VAR 0 1
53995: DIFF
53996: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
53997: LD_ADDR_EXP 44
54001: PUSH
54002: LD_EXP 44
54006: PPUSH
54007: LD_VAR 0 2
54011: PPUSH
54012: LD_VAR 0 6
54016: PPUSH
54017: CALL_OW 1
54021: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
54022: LD_VAR 0 1
54026: PUSH
54027: LD_EXP 51
54031: PUSH
54032: LD_VAR 0 2
54036: ARRAY
54037: IN
54038: IFFALSE 54087
// begin tmp := mc_construct_list [ i ] diff un ;
54040: LD_ADDR_VAR 0 6
54044: PUSH
54045: LD_EXP 51
54049: PUSH
54050: LD_VAR 0 2
54054: ARRAY
54055: PUSH
54056: LD_VAR 0 1
54060: DIFF
54061: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
54062: LD_ADDR_EXP 51
54066: PUSH
54067: LD_EXP 51
54071: PPUSH
54072: LD_VAR 0 2
54076: PPUSH
54077: LD_VAR 0 6
54081: PPUSH
54082: CALL_OW 1
54086: ST_TO_ADDR
// end ; break ;
54087: GO 54091
// end ;
54089: GO 53715
54091: POP
54092: POP
// end ; end ;
54093: PPOPN 6
54095: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
54096: LD_INT 0
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
// begin if not mc_bases then
54105: LD_EXP 44
54109: NOT
54110: IFFALSE 54114
// exit ;
54112: GO 54355
// btype := GetBType ( building ) ;
54114: LD_ADDR_VAR 0 6
54118: PUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: CALL_OW 266
54128: ST_TO_ADDR
// x := GetX ( building ) ;
54129: LD_ADDR_VAR 0 7
54133: PUSH
54134: LD_VAR 0 1
54138: PPUSH
54139: CALL_OW 250
54143: ST_TO_ADDR
// y := GetY ( building ) ;
54144: LD_ADDR_VAR 0 8
54148: PUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: CALL_OW 251
54158: ST_TO_ADDR
// d := GetDir ( building ) ;
54159: LD_ADDR_VAR 0 9
54163: PUSH
54164: LD_VAR 0 1
54168: PPUSH
54169: CALL_OW 254
54173: ST_TO_ADDR
// for i = 1 to mc_bases do
54174: LD_ADDR_VAR 0 3
54178: PUSH
54179: DOUBLE
54180: LD_INT 1
54182: DEC
54183: ST_TO_ADDR
54184: LD_EXP 44
54188: PUSH
54189: FOR_TO
54190: IFFALSE 54353
// begin if not mc_build_list [ i ] then
54192: LD_EXP 49
54196: PUSH
54197: LD_VAR 0 3
54201: ARRAY
54202: NOT
54203: IFFALSE 54207
// continue ;
54205: GO 54189
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
54207: LD_VAR 0 6
54211: PUSH
54212: LD_VAR 0 7
54216: PUSH
54217: LD_VAR 0 8
54221: PUSH
54222: LD_VAR 0 9
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: PPUSH
54233: LD_EXP 49
54237: PUSH
54238: LD_VAR 0 3
54242: ARRAY
54243: PUSH
54244: LD_INT 1
54246: ARRAY
54247: PPUSH
54248: CALL 8494 0 2
54252: IFFALSE 54351
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
54254: LD_ADDR_VAR 0 5
54258: PUSH
54259: LD_EXP 49
54263: PUSH
54264: LD_VAR 0 3
54268: ARRAY
54269: PPUSH
54270: LD_INT 1
54272: PPUSH
54273: CALL_OW 3
54277: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
54278: LD_ADDR_EXP 49
54282: PUSH
54283: LD_EXP 49
54287: PPUSH
54288: LD_VAR 0 3
54292: PPUSH
54293: LD_VAR 0 5
54297: PPUSH
54298: CALL_OW 1
54302: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
54303: LD_ADDR_EXP 51
54307: PUSH
54308: LD_EXP 51
54312: PPUSH
54313: LD_VAR 0 3
54317: PUSH
54318: LD_EXP 51
54322: PUSH
54323: LD_VAR 0 3
54327: ARRAY
54328: PUSH
54329: LD_INT 1
54331: PLUS
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PPUSH
54337: LD_VAR 0 1
54341: PPUSH
54342: CALL 3199 0 3
54346: ST_TO_ADDR
// exit ;
54347: POP
54348: POP
54349: GO 54355
// end ; end ;
54351: GO 54189
54353: POP
54354: POP
// end ;
54355: PPOPN 9
54357: END
// on BuildingComplete ( building ) do var i , j , tmp ;
54358: LD_INT 0
54360: PPUSH
54361: PPUSH
54362: PPUSH
// begin if not mc_bases then
54363: LD_EXP 44
54367: NOT
54368: IFFALSE 54372
// exit ;
54370: GO 54573
// for i = 1 to mc_bases do
54372: LD_ADDR_VAR 0 2
54376: PUSH
54377: DOUBLE
54378: LD_INT 1
54380: DEC
54381: ST_TO_ADDR
54382: LD_EXP 44
54386: PUSH
54387: FOR_TO
54388: IFFALSE 54571
// begin if building in mc_construct_list [ i ] then
54390: LD_VAR 0 1
54394: PUSH
54395: LD_EXP 51
54399: PUSH
54400: LD_VAR 0 2
54404: ARRAY
54405: IN
54406: IFFALSE 54569
// begin tmp := mc_construct_list [ i ] diff building ;
54408: LD_ADDR_VAR 0 4
54412: PUSH
54413: LD_EXP 51
54417: PUSH
54418: LD_VAR 0 2
54422: ARRAY
54423: PUSH
54424: LD_VAR 0 1
54428: DIFF
54429: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
54430: LD_ADDR_EXP 51
54434: PUSH
54435: LD_EXP 51
54439: PPUSH
54440: LD_VAR 0 2
54444: PPUSH
54445: LD_VAR 0 4
54449: PPUSH
54450: CALL_OW 1
54454: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
54455: LD_ADDR_EXP 44
54459: PUSH
54460: LD_EXP 44
54464: PPUSH
54465: LD_VAR 0 2
54469: PUSH
54470: LD_EXP 44
54474: PUSH
54475: LD_VAR 0 2
54479: ARRAY
54480: PUSH
54481: LD_INT 1
54483: PLUS
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PPUSH
54489: LD_VAR 0 1
54493: PPUSH
54494: CALL 3199 0 3
54498: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
54499: LD_VAR 0 1
54503: PPUSH
54504: CALL_OW 266
54508: PUSH
54509: LD_INT 32
54511: PUSH
54512: LD_INT 33
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: IN
54519: IFFALSE 54565
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
54521: LD_ADDR_EXP 52
54525: PUSH
54526: LD_EXP 52
54530: PPUSH
54531: LD_VAR 0 2
54535: PUSH
54536: LD_EXP 52
54540: PUSH
54541: LD_VAR 0 2
54545: ARRAY
54546: PUSH
54547: LD_INT 1
54549: PLUS
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PPUSH
54555: LD_VAR 0 1
54559: PPUSH
54560: CALL 3199 0 3
54564: ST_TO_ADDR
// exit ;
54565: POP
54566: POP
54567: GO 54573
// end ; end ;
54569: GO 54387
54571: POP
54572: POP
// end ;
54573: PPOPN 4
54575: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
54576: LD_INT 0
54578: PPUSH
54579: PPUSH
// begin if not mc_bases then
54580: LD_EXP 44
54584: NOT
54585: IFFALSE 54589
// exit ;
54587: GO 54804
// repeat wait ( 0 0$1 ) ;
54589: LD_INT 35
54591: PPUSH
54592: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
54596: LD_VAR 0 2
54600: PPUSH
54601: LD_VAR 0 3
54605: PPUSH
54606: CALL_OW 284
54610: IFFALSE 54589
// if GetResourceTypeXY ( x , y ) = mat_artefact then
54612: LD_VAR 0 2
54616: PPUSH
54617: LD_VAR 0 3
54621: PPUSH
54622: CALL_OW 283
54626: PUSH
54627: LD_INT 4
54629: EQUAL
54630: IFFALSE 54634
// exit ;
54632: GO 54804
// for i = 1 to mc_bases do
54634: LD_ADDR_VAR 0 6
54638: PUSH
54639: DOUBLE
54640: LD_INT 1
54642: DEC
54643: ST_TO_ADDR
54644: LD_EXP 44
54648: PUSH
54649: FOR_TO
54650: IFFALSE 54802
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54652: LD_ADDR_VAR 0 7
54656: PUSH
54657: LD_EXP 44
54661: PUSH
54662: LD_VAR 0 6
54666: ARRAY
54667: PPUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 30
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 30
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: PPUSH
54696: CALL_OW 72
54700: ST_TO_ADDR
// if not depot then
54701: LD_VAR 0 7
54705: NOT
54706: IFFALSE 54710
// continue ;
54708: GO 54649
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
54710: LD_VAR 0 7
54714: PUSH
54715: LD_INT 1
54717: ARRAY
54718: PPUSH
54719: LD_VAR 0 2
54723: PPUSH
54724: LD_VAR 0 3
54728: PPUSH
54729: CALL_OW 297
54733: PUSH
54734: LD_INT 30
54736: LESS
54737: IFFALSE 54800
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
54739: LD_ADDR_EXP 57
54743: PUSH
54744: LD_EXP 57
54748: PPUSH
54749: LD_VAR 0 6
54753: PUSH
54754: LD_EXP 57
54758: PUSH
54759: LD_VAR 0 6
54763: ARRAY
54764: PUSH
54765: LD_INT 1
54767: PLUS
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PPUSH
54773: LD_VAR 0 4
54777: PUSH
54778: LD_VAR 0 2
54782: PUSH
54783: LD_VAR 0 3
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: PPUSH
54793: CALL 3199 0 3
54797: ST_TO_ADDR
// break ;
54798: GO 54802
// end ; end ;
54800: GO 54649
54802: POP
54803: POP
// end ;
54804: PPOPN 7
54806: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
54807: LD_INT 0
54809: PPUSH
54810: PPUSH
// begin if not mc_bases then
54811: LD_EXP 44
54815: NOT
54816: IFFALSE 54820
// exit ;
54818: GO 54908
// for i = 1 to mc_bases do
54820: LD_ADDR_VAR 0 3
54824: PUSH
54825: DOUBLE
54826: LD_INT 1
54828: DEC
54829: ST_TO_ADDR
54830: LD_EXP 44
54834: PUSH
54835: FOR_TO
54836: IFFALSE 54906
// begin if factory in mc_bases [ i ] then
54838: LD_VAR 0 2
54842: PUSH
54843: LD_EXP 44
54847: PUSH
54848: LD_VAR 0 3
54852: ARRAY
54853: IN
54854: IFFALSE 54904
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
54856: LD_ADDR_EXP 59
54860: PUSH
54861: LD_EXP 59
54865: PPUSH
54866: LD_VAR 0 3
54870: PUSH
54871: LD_EXP 59
54875: PUSH
54876: LD_VAR 0 3
54880: ARRAY
54881: PUSH
54882: LD_INT 1
54884: PLUS
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PPUSH
54890: LD_VAR 0 1
54894: PPUSH
54895: CALL 3199 0 3
54899: ST_TO_ADDR
// exit ;
54900: POP
54901: POP
54902: GO 54908
// end ; end ;
54904: GO 54835
54906: POP
54907: POP
// end ;
54908: PPOPN 4
54910: END
// on UnitKamikazed ( unit ) do begin if not kamikazed then
54911: LD_EXP 10
54915: NOT
54916: IFFALSE 54928
// kamikazed := unit ;
54918: LD_ADDR_EXP 10
54922: PUSH
54923: LD_VAR 0 1
54927: ST_TO_ADDR
// end ; end_of_file
54928: PPOPN 1
54930: END
// every 0 0$1 trigger game do
54931: LD_EXP 2
54935: IFFALSE 54965
54937: GO 54939
54939: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
54940: LD_INT 7
54942: PUSH
54943: LD_INT 6
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: LD_INT 6
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: PPUSH
54958: LD_INT 1400
54960: PPUSH
54961: CALL 54966 0 2
54965: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
54966: LD_INT 0
54968: PPUSH
54969: PPUSH
54970: PPUSH
// if not areas then
54971: LD_VAR 0 1
54975: NOT
54976: IFFALSE 54980
// exit ;
54978: GO 55092
// repeat wait ( time ) ;
54980: LD_VAR 0 2
54984: PPUSH
54985: CALL_OW 67
// p := rand ( 1 , 90 ) ;
54989: LD_ADDR_VAR 0 5
54993: PUSH
54994: LD_INT 1
54996: PPUSH
54997: LD_INT 90
54999: PPUSH
55000: CALL_OW 12
55004: ST_TO_ADDR
// for i in areas do
55005: LD_ADDR_VAR 0 4
55009: PUSH
55010: LD_VAR 0 1
55014: PUSH
55015: FOR_IN
55016: IFFALSE 55069
// begin if Prob ( p ) then
55018: LD_VAR 0 5
55022: PPUSH
55023: CALL_OW 13
55027: IFFALSE 55067
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
55029: LD_INT 1
55031: PPUSH
55032: LD_INT 5
55034: PPUSH
55035: CALL_OW 12
55039: PPUSH
55040: LD_VAR 0 4
55044: PPUSH
55045: LD_INT 1
55047: PPUSH
55048: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
55052: LD_INT 455
55054: PPUSH
55055: LD_INT 595
55057: PPUSH
55058: CALL_OW 12
55062: PPUSH
55063: CALL_OW 67
// end ; end ;
55067: GO 55015
55069: POP
55070: POP
// time := time + 0 0$3 ;
55071: LD_ADDR_VAR 0 2
55075: PUSH
55076: LD_VAR 0 2
55080: PUSH
55081: LD_INT 105
55083: PLUS
55084: ST_TO_ADDR
// until not game ;
55085: LD_EXP 2
55089: NOT
55090: IFFALSE 54980
// end ;
55092: LD_VAR 0 3
55096: RET
