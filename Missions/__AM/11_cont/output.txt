// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46244 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28984 0 0
// PrepareAmerican ;
  33: CALL 294 0 0
// PrepareArabian ;
  37: CALL 33595 0 0
// Action ;
  41: CALL 38748 0 0
// RunMacro ;
  45: CALL 46407 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// end ;
 235: LD_VAR 0 1
 239: RET
// function Debuger ; var i ; begin
 240: LD_INT 0
 242: PPUSH
 243: PPUSH
// if not debug then
 244: LD_EXP 1
 248: NOT
 249: IFFALSE 253
// exit ;
 251: GO 289
// game_speed := 5 ;
 253: LD_ADDR_OWVAR 65
 257: PUSH
 258: LD_INT 5
 260: ST_TO_ADDR
// uc_side := 1 ;
 261: LD_ADDR_OWVAR 20
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// uc_nation := 1 ;
 269: LD_ADDR_OWVAR 21
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 277: LD_EXP 33
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 235
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
// uc_side := 4 ;
 305: LD_ADDR_OWVAR 20
 309: PUSH
 310: LD_INT 4
 312: ST_TO_ADDR
// uc_nation := 1 ;
 313: LD_ADDR_OWVAR 21
 317: PUSH
 318: LD_INT 1
 320: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 321: LD_ADDR_EXP 27
 325: PUSH
 326: LD_STRING Powell
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL 1902 0 2
 336: ST_TO_ADDR
// uc_side := 1 ;
 337: LD_ADDR_OWVAR 20
 341: PUSH
 342: LD_INT 1
 344: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 345: LD_ADDR_EXP 18
 349: PUSH
 350: LD_STRING JMM
 352: PPUSH
 353: LD_EXP 1
 357: NOT
 358: PPUSH
 359: CALL 1902 0 2
 363: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 364: LD_EXP 18
 368: PPUSH
 369: CALL_OW 257
 373: PUSH
 374: LD_INT 4
 376: GREATER
 377: IFFALSE 391
// SetClass ( JMM , 1 ) ;
 379: LD_EXP 18
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 391: LD_ADDR_EXP 19
 395: PUSH
 396: LD_STRING Lisa
 398: PPUSH
 399: LD_EXP 1
 403: NOT
 404: PPUSH
 405: CALL 1902 0 2
 409: ST_TO_ADDR
// if not Lisa then
 410: LD_EXP 19
 414: NOT
 415: IFFALSE 430
// Lisa := CreateCharacter ( 10_Lisa ) ;
 417: LD_ADDR_EXP 19
 421: PUSH
 422: LD_STRING 10_Lisa
 424: PPUSH
 425: CALL_OW 34
 429: ST_TO_ADDR
// if not Lisa then
 430: LD_EXP 19
 434: NOT
 435: IFFALSE 450
// Lisa := CreateCharacter ( 09_Lisa ) ;
 437: LD_ADDR_EXP 19
 441: PUSH
 442: LD_STRING 09_Lisa
 444: PPUSH
 445: CALL_OW 34
 449: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 450: LD_ADDR_EXP 28
 454: PUSH
 455: LD_STRING Cornel
 457: PPUSH
 458: LD_EXP 1
 462: NOT
 463: PPUSH
 464: CALL 1902 0 2
 468: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 469: LD_ADDR_EXP 20
 473: PUSH
 474: LD_STRING Donaldson
 476: PPUSH
 477: LD_EXP 1
 481: NOT
 482: PPUSH
 483: CALL 1902 0 2
 487: ST_TO_ADDR
// if not Donaldson then
 488: LD_EXP 20
 492: NOT
 493: IFFALSE 508
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 495: LD_ADDR_EXP 20
 499: PUSH
 500: LD_STRING 10_Donaldson
 502: PPUSH
 503: CALL_OW 34
 507: ST_TO_ADDR
// if not Donaldson then
 508: LD_EXP 20
 512: NOT
 513: IFFALSE 528
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 515: LD_ADDR_EXP 20
 519: PUSH
 520: LD_STRING 09_Donaldson
 522: PPUSH
 523: CALL_OW 34
 527: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 528: LD_ADDR_EXP 21
 532: PUSH
 533: LD_STRING Bobby
 535: PPUSH
 536: LD_EXP 1
 540: NOT
 541: PPUSH
 542: CALL 1902 0 2
 546: ST_TO_ADDR
// if not Bobby then
 547: LD_EXP 21
 551: NOT
 552: IFFALSE 567
// Bobby := CreateCharacter ( 10_Bobby ) ;
 554: LD_ADDR_EXP 21
 558: PUSH
 559: LD_STRING 10_Bobby
 561: PPUSH
 562: CALL_OW 34
 566: ST_TO_ADDR
// if not Bobby then
 567: LD_EXP 21
 571: NOT
 572: IFFALSE 587
// Bobby := CreateCharacter ( 09_Bobby ) ;
 574: LD_ADDR_EXP 21
 578: PUSH
 579: LD_STRING 09_Bobby
 581: PPUSH
 582: CALL_OW 34
 586: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 587: LD_ADDR_EXP 22
 591: PUSH
 592: LD_STRING Cyrus
 594: PPUSH
 595: LD_EXP 1
 599: NOT
 600: PPUSH
 601: CALL 1902 0 2
 605: ST_TO_ADDR
// if not Cyrus then
 606: LD_EXP 22
 610: NOT
 611: IFFALSE 626
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 613: LD_ADDR_EXP 22
 617: PUSH
 618: LD_STRING 10_Cyrus
 620: PPUSH
 621: CALL_OW 34
 625: ST_TO_ADDR
// if not Cyrus then
 626: LD_EXP 22
 630: NOT
 631: IFFALSE 646
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 633: LD_ADDR_EXP 22
 637: PUSH
 638: LD_STRING 09_Cyrus
 640: PPUSH
 641: CALL_OW 34
 645: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 646: LD_ADDR_EXP 23
 650: PUSH
 651: LD_STRING Denis
 653: PPUSH
 654: LD_EXP 1
 658: NOT
 659: PPUSH
 660: CALL 1902 0 2
 664: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 665: LD_ADDR_EXP 24
 669: PUSH
 670: LD_STRING Brown
 672: PPUSH
 673: LD_EXP 1
 677: NOT
 678: PPUSH
 679: CALL 1902 0 2
 683: ST_TO_ADDR
// if not Brown then
 684: LD_EXP 24
 688: NOT
 689: IFFALSE 704
// Brown := CreateCharacter ( 10_Brown ) ;
 691: LD_ADDR_EXP 24
 695: PUSH
 696: LD_STRING 10_Brown
 698: PPUSH
 699: CALL_OW 34
 703: ST_TO_ADDR
// if not Brown then
 704: LD_EXP 24
 708: NOT
 709: IFFALSE 724
// Brown := CreateCharacter ( 08_Brown ) ;
 711: LD_ADDR_EXP 24
 715: PUSH
 716: LD_STRING 08_Brown
 718: PPUSH
 719: CALL_OW 34
 723: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 724: LD_ADDR_EXP 25
 728: PUSH
 729: LD_STRING Gladstone
 731: PPUSH
 732: LD_EXP 1
 736: NOT
 737: PPUSH
 738: CALL 1902 0 2
 742: ST_TO_ADDR
// if not Gladstone then
 743: LD_EXP 25
 747: NOT
 748: IFFALSE 763
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 750: LD_ADDR_EXP 25
 754: PUSH
 755: LD_STRING 10_Gladstone
 757: PPUSH
 758: CALL_OW 34
 762: ST_TO_ADDR
// if not Gladstone then
 763: LD_EXP 25
 767: NOT
 768: IFFALSE 783
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 770: LD_ADDR_EXP 25
 774: PUSH
 775: LD_STRING 08_Gladstone
 777: PPUSH
 778: CALL_OW 34
 782: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 783: LD_ADDR_EXP 26
 787: PUSH
 788: LD_STRING Houten
 790: PPUSH
 791: LD_EXP 1
 795: NOT
 796: PPUSH
 797: CALL 1902 0 2
 801: ST_TO_ADDR
// if not Houten then
 802: LD_EXP 26
 806: NOT
 807: IFFALSE 822
// Houten := CreateCharacter ( 10_Houten ) ;
 809: LD_ADDR_EXP 26
 813: PUSH
 814: LD_STRING 10_Houten
 816: PPUSH
 817: CALL_OW 34
 821: ST_TO_ADDR
// if not Houten then
 822: LD_EXP 26
 826: NOT
 827: IFFALSE 842
// Houten := CreateCharacter ( 09_Houten ) ;
 829: LD_ADDR_EXP 26
 833: PUSH
 834: LD_STRING 09_Houten
 836: PPUSH
 837: CALL_OW 34
 841: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 842: LD_ADDR_EXP 28
 846: PUSH
 847: LD_STRING Cornel
 849: PPUSH
 850: LD_EXP 1
 854: NOT
 855: PPUSH
 856: CALL 1902 0 2
 860: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 861: LD_ADDR_EXP 29
 865: PUSH
 866: LD_STRING Gary
 868: PPUSH
 869: LD_EXP 1
 873: NOT
 874: PPUSH
 875: CALL 1902 0 2
 879: ST_TO_ADDR
// if not Gary then
 880: LD_EXP 29
 884: NOT
 885: IFFALSE 900
// Gary := CreateCharacter ( 10_Gary ) ;
 887: LD_ADDR_EXP 29
 891: PUSH
 892: LD_STRING 10_Gary
 894: PPUSH
 895: CALL_OW 34
 899: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 900: LD_ADDR_EXP 30
 904: PUSH
 905: LD_STRING Frank
 907: PPUSH
 908: LD_EXP 1
 912: NOT
 913: PPUSH
 914: CALL 1902 0 2
 918: ST_TO_ADDR
// if not Frank then
 919: LD_EXP 30
 923: NOT
 924: IFFALSE 939
// Frank := CreateCharacter ( 08_Frank ) ;
 926: LD_ADDR_EXP 30
 930: PUSH
 931: LD_STRING 08_Frank
 933: PPUSH
 934: CALL_OW 34
 938: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 939: LD_ADDR_EXP 31
 943: PUSH
 944: LD_STRING Kikuchi
 946: PPUSH
 947: LD_EXP 1
 951: NOT
 952: PPUSH
 953: CALL 1902 0 2
 957: ST_TO_ADDR
// if not Kikuchi then
 958: LD_EXP 31
 962: NOT
 963: IFFALSE 978
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 965: LD_ADDR_EXP 31
 969: PUSH
 970: LD_STRING 08_Kikuchi
 972: PPUSH
 973: CALL_OW 34
 977: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 978: LD_ADDR_VAR 0 5
 982: PUSH
 983: LD_EXP 19
 987: PUSH
 988: LD_EXP 20
 992: PUSH
 993: LD_EXP 21
 997: PUSH
 998: LD_EXP 22
1002: PUSH
1003: LD_EXP 23
1007: PUSH
1008: LD_EXP 24
1012: PUSH
1013: LD_EXP 25
1017: PUSH
1018: LD_EXP 26
1022: PUSH
1023: LD_EXP 28
1027: PUSH
1028: LD_EXP 29
1032: PUSH
1033: LD_EXP 30
1037: PUSH
1038: LD_EXP 31
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: ST_TO_ADDR
// tmp := tmp diff 0 ;
1057: LD_ADDR_VAR 0 5
1061: PUSH
1062: LD_VAR 0 5
1066: PUSH
1067: LD_INT 0
1069: DIFF
1070: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1071: LD_ADDR_VAR 0 5
1075: PUSH
1076: LD_VAR 0 5
1080: PUSH
1081: LD_STRING 10_lock
1083: PPUSH
1084: CALL_OW 31
1088: UNION
1089: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1090: LD_ADDR_VAR 0 5
1094: PUSH
1095: LD_VAR 0 5
1099: PUSH
1100: LD_STRING 10c_lock
1102: PPUSH
1103: CALL_OW 31
1107: UNION
1108: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1109: LD_STRING 10_lock
1111: PPUSH
1112: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1116: LD_STRING 10c_lock
1118: PPUSH
1119: CALL_OW 40
// for i in tmp do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_VAR 0 5
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1165
// if GetClass ( i ) = class_mortar then
1136: LD_VAR 0 2
1140: PPUSH
1141: CALL_OW 257
1145: PUSH
1146: LD_INT 8
1148: EQUAL
1149: IFFALSE 1163
// SetClass ( i , class_soldier ) ;
1151: LD_VAR 0 2
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 336
1163: GO 1133
1165: POP
1166: POP
// if tmp < 12 then
1167: LD_VAR 0 5
1171: PUSH
1172: LD_INT 12
1174: LESS
1175: IFFALSE 1273
// begin k := 16 - tmp ;
1177: LD_ADDR_VAR 0 3
1181: PUSH
1182: LD_INT 16
1184: PUSH
1185: LD_VAR 0 5
1189: MINUS
1190: ST_TO_ADDR
// for i = 1 to k do
1191: LD_ADDR_VAR 0 2
1195: PUSH
1196: DOUBLE
1197: LD_INT 1
1199: DEC
1200: ST_TO_ADDR
1201: LD_VAR 0 3
1205: PUSH
1206: FOR_TO
1207: IFFALSE 1271
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1209: LD_INT 0
1211: PPUSH
1212: LD_INT 1
1214: PUSH
1215: LD_INT 1
1217: PUSH
1218: LD_INT 2
1220: PUSH
1221: LD_INT 3
1223: PUSH
1224: LD_INT 4
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 5
1239: PPUSH
1240: CALL_OW 12
1244: ARRAY
1245: PPUSH
1246: LD_INT 6
1248: PPUSH
1249: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: CALL_OW 44
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1206
1271: POP
1272: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_STRING 1
1280: PPUSH
1281: LD_INT 12
1283: PPUSH
1284: LD_INT 12
1286: PPUSH
1287: LD_INT -5
1289: PUSH
1290: LD_EXP 18
1294: PUSH
1295: LD_INT -2
1297: PUSH
1298: LD_INT -3
1300: PUSH
1301: LD_INT -5
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: PUSH
1311: LD_VAR 0 5
1315: ADD
1316: PUSH
1317: LD_INT -6
1319: PUSH
1320: LD_INT -4
1322: PUSH
1323: LD_EXP 27
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: LIST
1332: ADD
1333: PPUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 4
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 3
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: LD_INT 5
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: LIST
1367: PUSH
1368: LD_INT 4
1370: PUSH
1371: LD_INT 0
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 5
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 42
1407: ST_TO_ADDR
// others := tmp diff selected ;
1408: LD_ADDR_VAR 0 9
1412: PUSH
1413: LD_VAR 0 5
1417: PUSH
1418: LD_VAR 0 6
1422: DIFF
1423: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1424: LD_ADDR_VAR 0 9
1428: PUSH
1429: LD_VAR 0 5
1433: PUSH
1434: LD_EXP 19
1438: PUSH
1439: LD_EXP 20
1443: PUSH
1444: LD_EXP 21
1448: PUSH
1449: LD_EXP 22
1453: PUSH
1454: LD_EXP 23
1458: PUSH
1459: LD_EXP 24
1463: PUSH
1464: LD_EXP 25
1468: PUSH
1469: LD_EXP 26
1473: PUSH
1474: LD_EXP 28
1478: PUSH
1479: LD_EXP 29
1483: PUSH
1484: LD_EXP 30
1488: PUSH
1489: LD_EXP 31
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: DIFF
1508: ST_TO_ADDR
// if others then
1509: LD_VAR 0 9
1513: IFFALSE 1527
// SaveCharacters ( others , 11_others ) ;
1515: LD_VAR 0 9
1519: PPUSH
1520: LD_STRING 11_others
1522: PPUSH
1523: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1527: LD_ADDR_VAR 0 7
1531: PUSH
1532: LD_INT 3
1534: PUSH
1535: LD_INT 1
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 4
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 2
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 5
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 2
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 1
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: ST_TO_ADDR
// for i in JMM ^ selected do
1629: LD_ADDR_VAR 0 2
1633: PUSH
1634: LD_EXP 18
1638: PUSH
1639: LD_VAR 0 6
1643: ADD
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1835
// begin if GetClass ( i ) = 3 then
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 257
1657: PUSH
1658: LD_INT 3
1660: EQUAL
1661: IFFALSE 1818
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1663: LD_ADDR_OWVAR 37
1667: PUSH
1668: LD_VAR 0 7
1672: PUSH
1673: LD_INT 1
1675: ARRAY
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1681: LD_ADDR_OWVAR 39
1685: PUSH
1686: LD_VAR 0 7
1690: PUSH
1691: LD_INT 1
1693: ARRAY
1694: PUSH
1695: LD_INT 2
1697: ARRAY
1698: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1699: LD_ADDR_OWVAR 38
1703: PUSH
1704: LD_VAR 0 7
1708: PUSH
1709: LD_INT 1
1711: ARRAY
1712: PUSH
1713: LD_INT 3
1715: ARRAY
1716: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1717: LD_ADDR_OWVAR 40
1721: PUSH
1722: LD_VAR 0 7
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PUSH
1731: LD_INT 4
1733: ARRAY
1734: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1735: LD_ADDR_VAR 0 7
1739: PUSH
1740: LD_VAR 0 7
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: CALL_OW 3
1752: ST_TO_ADDR
// veh := CreateVehicle ;
1753: LD_ADDR_VAR 0 8
1757: PUSH
1758: CALL_OW 45
1762: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1763: LD_VAR 0 8
1767: PPUSH
1768: LD_INT 8
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: LD_VAR 0 8
1787: PPUSH
1788: CALL_OW 52
// if i = JMM then
1792: LD_VAR 0 2
1796: PUSH
1797: LD_EXP 18
1801: EQUAL
1802: IFFALSE 1816
// SetMark ( veh , 1 ) ;
1804: LD_VAR 0 8
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 242
// end else
1816: GO 1833
// PlaceUnitArea ( i , am_hum_start , false ) ;
1818: LD_VAR 0 2
1822: PPUSH
1823: LD_INT 9
1825: PPUSH
1826: LD_INT 0
1828: PPUSH
1829: CALL_OW 49
// end ;
1833: GO 1645
1835: POP
1836: POP
// vc_chassis := us_medium_tracked ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// vc_engine := engine_solar ;
1845: LD_ADDR_OWVAR 39
1849: PUSH
1850: LD_INT 2
1852: ST_TO_ADDR
// vc_control := control_computer ;
1853: LD_ADDR_OWVAR 38
1857: PUSH
1858: LD_INT 3
1860: ST_TO_ADDR
// vc_weapon := us_radar ;
1861: LD_ADDR_OWVAR 40
1865: PUSH
1866: LD_INT 11
1868: ST_TO_ADDR
// veh := CreateVehicle ;
1869: LD_ADDR_VAR 0 8
1873: PUSH
1874: CALL_OW 45
1878: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1879: LD_VAR 0 8
1883: PPUSH
1884: LD_INT 87
1886: PPUSH
1887: LD_INT 142
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 48
// end ; end_of_file
1897: LD_VAR 0 1
1901: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1902: LD_INT 0
1904: PPUSH
1905: PPUSH
// if exist_mode then
1906: LD_VAR 0 2
1910: IFFALSE 1935
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1912: LD_ADDR_VAR 0 4
1916: PUSH
1917: LD_EXP 4
1921: PUSH
1922: LD_VAR 0 1
1926: STR
1927: PPUSH
1928: CALL_OW 34
1932: ST_TO_ADDR
1933: GO 1950
// unit := NewCharacter ( ident ) ;
1935: LD_ADDR_VAR 0 4
1939: PUSH
1940: LD_VAR 0 1
1944: PPUSH
1945: CALL_OW 25
1949: ST_TO_ADDR
// result := unit ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: LD_VAR 0 4
1959: ST_TO_ADDR
// end ;
1960: LD_VAR 0 3
1964: RET
// export function _GetHexInfo ( x , y ) ; begin
1965: LD_INT 0
1967: PPUSH
// result := false ;
1968: LD_ADDR_VAR 0 3
1972: PUSH
1973: LD_INT 0
1975: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1976: LD_VAR 0 1
1980: PPUSH
1981: LD_VAR 0 2
1985: PPUSH
1986: CALL_OW 488
1990: NOT
1991: PUSH
1992: LD_VAR 0 1
1996: NOT
1997: OR
1998: PUSH
1999: LD_VAR 0 2
2003: NOT
2004: OR
2005: IFFALSE 2009
// exit ;
2007: GO 2029
// result := GetHexInfo ( x , y ) ;
2009: LD_ADDR_VAR 0 3
2013: PUSH
2014: LD_VAR 0 1
2018: PPUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: CALL_OW 546
2028: ST_TO_ADDR
// end ;
2029: LD_VAR 0 3
2033: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2034: LD_INT 0
2036: PPUSH
// vc_chassis := chassis ;
2037: LD_ADDR_OWVAR 37
2041: PUSH
2042: LD_VAR 0 1
2046: ST_TO_ADDR
// vc_engine := engine ;
2047: LD_ADDR_OWVAR 39
2051: PUSH
2052: LD_VAR 0 2
2056: ST_TO_ADDR
// vc_control := control ;
2057: LD_ADDR_OWVAR 38
2061: PUSH
2062: LD_VAR 0 3
2066: ST_TO_ADDR
// vc_weapon := weapon ;
2067: LD_ADDR_OWVAR 40
2071: PUSH
2072: LD_VAR 0 4
2076: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2077: LD_ADDR_OWVAR 41
2081: PUSH
2082: LD_VAR 0 5
2086: ST_TO_ADDR
// end ;
2087: LD_VAR 0 6
2091: RET
// export function CanSayRand ( side ) ; begin
2092: LD_INT 0
2094: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_VAR 0 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 2
2114: PUSH
2115: LD_INT 25
2117: PUSH
2118: LD_INT 1
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 25
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 25
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 25
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 69
2170: PUSH
2171: LD_EXP 18
2175: PUSH
2176: LD_EXP 30
2180: PUSH
2181: LD_EXP 19
2185: PUSH
2186: LD_EXP 20
2190: PUSH
2191: LD_EXP 21
2195: PUSH
2196: LD_EXP 22
2200: PUSH
2201: LD_EXP 23
2205: PUSH
2206: LD_EXP 24
2210: PUSH
2211: LD_EXP 25
2215: PUSH
2216: LD_EXP 26
2220: PUSH
2221: LD_EXP 27
2225: PUSH
2226: LD_EXP 28
2230: PUSH
2231: LD_EXP 29
2235: PUSH
2236: LD_EXP 31
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: DIFF
2257: ST_TO_ADDR
// end ;
2258: LD_VAR 0 2
2262: RET
// export function SayRand ( sex , dial ) ; begin
2263: LD_INT 0
2265: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 22
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 26
2283: PUSH
2284: LD_VAR 0 1
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 2
2295: PUSH
2296: LD_INT 25
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 25
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 25
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 25
2328: PUSH
2329: LD_INT 4
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: LIST
2347: PPUSH
2348: CALL_OW 69
2352: PUSH
2353: LD_EXP 18
2357: PUSH
2358: LD_EXP 30
2362: PUSH
2363: LD_EXP 19
2367: PUSH
2368: LD_EXP 20
2372: PUSH
2373: LD_EXP 21
2377: PUSH
2378: LD_EXP 22
2382: PUSH
2383: LD_EXP 23
2387: PUSH
2388: LD_EXP 24
2392: PUSH
2393: LD_EXP 25
2397: PUSH
2398: LD_EXP 26
2402: PUSH
2403: LD_EXP 27
2407: PUSH
2408: LD_EXP 28
2412: PUSH
2413: LD_EXP 29
2417: PUSH
2418: LD_EXP 31
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: DIFF
2439: ST_TO_ADDR
// if not result then
2440: LD_VAR 0 3
2444: NOT
2445: IFFALSE 2449
// exit ;
2447: GO 2477
// result := result [ 1 ] ;
2449: LD_ADDR_VAR 0 3
2453: PUSH
2454: LD_VAR 0 3
2458: PUSH
2459: LD_INT 1
2461: ARRAY
2462: ST_TO_ADDR
// Say ( result , dial ) ;
2463: LD_VAR 0 3
2467: PPUSH
2468: LD_VAR 0 2
2472: PPUSH
2473: CALL_OW 88
// end ;
2477: LD_VAR 0 3
2481: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2482: LD_INT 0
2484: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2485: LD_ADDR_VAR 0 4
2489: PUSH
2490: LD_INT 22
2492: PUSH
2493: LD_INT 1
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PUSH
2500: LD_INT 26
2502: PUSH
2503: LD_VAR 0 1
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 2
2514: PUSH
2515: LD_INT 25
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 2
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 25
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: LD_INT 25
2547: PUSH
2548: LD_INT 4
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: LIST
2566: PPUSH
2567: CALL_OW 69
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: LD_EXP 30
2581: PUSH
2582: LD_EXP 19
2586: PUSH
2587: LD_EXP 20
2591: PUSH
2592: LD_EXP 21
2596: PUSH
2597: LD_EXP 22
2601: PUSH
2602: LD_EXP 23
2606: PUSH
2607: LD_EXP 24
2611: PUSH
2612: LD_EXP 25
2616: PUSH
2617: LD_EXP 26
2621: PUSH
2622: LD_EXP 27
2626: PUSH
2627: LD_EXP 28
2631: PUSH
2632: LD_EXP 29
2636: PUSH
2637: LD_EXP 31
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_VAR 0 3
2662: ADD
2663: DIFF
2664: ST_TO_ADDR
// if not result then
2665: LD_VAR 0 4
2669: NOT
2670: IFFALSE 2674
// exit ;
2672: GO 2702
// result := result [ 1 ] ;
2674: LD_ADDR_VAR 0 4
2678: PUSH
2679: LD_VAR 0 4
2683: PUSH
2684: LD_INT 1
2686: ARRAY
2687: ST_TO_ADDR
// Say ( result , dial ) ;
2688: LD_VAR 0 4
2692: PPUSH
2693: LD_VAR 0 2
2697: PPUSH
2698: CALL_OW 88
// end ;
2702: LD_VAR 0 4
2706: RET
// export function WantPlant ( unit ) ; var task ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
// result := false ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL_OW 437
2733: ST_TO_ADDR
// if task then
2734: LD_VAR 0 3
2738: IFFALSE 2766
// if task [ 1 ] [ 1 ] = p then
2740: LD_VAR 0 3
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: PUSH
2753: LD_STRING p
2755: EQUAL
2756: IFFALSE 2766
// result := true ;
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// end ;
2766: LD_VAR 0 2
2770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2771: LD_INT 0
2773: PPUSH
2774: PPUSH
2775: PPUSH
2776: PPUSH
// if pos < 1 then
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: LESS
2785: IFFALSE 2789
// exit ;
2787: GO 3092
// if pos = 1 then
2789: LD_VAR 0 2
2793: PUSH
2794: LD_INT 1
2796: EQUAL
2797: IFFALSE 2830
// result := Replace ( arr , pos [ 1 ] , value ) else
2799: LD_ADDR_VAR 0 4
2803: PUSH
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 1
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
2828: GO 3092
// begin tmp := arr ;
2830: LD_ADDR_VAR 0 6
2834: PUSH
2835: LD_VAR 0 1
2839: ST_TO_ADDR
// s_arr := [ tmp ] ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 6
2849: PUSH
2850: EMPTY
2851: LIST
2852: ST_TO_ADDR
// for i = 1 to pos - 1 do
2853: LD_ADDR_VAR 0 5
2857: PUSH
2858: DOUBLE
2859: LD_INT 1
2861: DEC
2862: ST_TO_ADDR
2863: LD_VAR 0 2
2867: PUSH
2868: LD_INT 1
2870: MINUS
2871: PUSH
2872: FOR_TO
2873: IFFALSE 2918
// begin tmp := tmp [ pos [ i ] ] ;
2875: LD_ADDR_VAR 0 6
2879: PUSH
2880: LD_VAR 0 6
2884: PUSH
2885: LD_VAR 0 2
2889: PUSH
2890: LD_VAR 0 5
2894: ARRAY
2895: ARRAY
2896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2897: LD_ADDR_VAR 0 7
2901: PUSH
2902: LD_VAR 0 7
2906: PUSH
2907: LD_VAR 0 6
2911: PUSH
2912: EMPTY
2913: LIST
2914: ADD
2915: ST_TO_ADDR
// end ;
2916: GO 2872
2918: POP
2919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_VAR 0 6
2929: PPUSH
2930: LD_VAR 0 2
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2951: LD_ADDR_VAR 0 7
2955: PUSH
2956: LD_VAR 0 7
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
// for i = s_arr downto 2 do
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: DOUBLE
2982: LD_VAR 0 7
2986: INC
2987: ST_TO_ADDR
2988: LD_INT 2
2990: PUSH
2991: FOR_DOWNTO
2992: IFFALSE 3076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2994: LD_ADDR_VAR 0 6
2998: PUSH
2999: LD_VAR 0 7
3003: PUSH
3004: LD_VAR 0 5
3008: PUSH
3009: LD_INT 1
3011: MINUS
3012: ARRAY
3013: PPUSH
3014: LD_VAR 0 2
3018: PUSH
3019: LD_VAR 0 5
3023: PUSH
3024: LD_INT 1
3026: MINUS
3027: ARRAY
3028: PPUSH
3029: LD_VAR 0 7
3033: PUSH
3034: LD_VAR 0 5
3038: ARRAY
3039: PPUSH
3040: CALL_OW 1
3044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3045: LD_ADDR_VAR 0 7
3049: PUSH
3050: LD_VAR 0 7
3054: PPUSH
3055: LD_VAR 0 5
3059: PUSH
3060: LD_INT 1
3062: MINUS
3063: PPUSH
3064: LD_VAR 0 6
3068: PPUSH
3069: CALL_OW 1
3073: ST_TO_ADDR
// end ;
3074: GO 2991
3076: POP
3077: POP
// result := s_arr [ 1 ] ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_VAR 0 7
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: ST_TO_ADDR
// end ; end ;
3092: LD_VAR 0 4
3096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// if not list then
3101: LD_VAR 0 1
3105: NOT
3106: IFFALSE 3110
// exit ;
3108: GO 3201
// i := list [ pos1 ] ;
3110: LD_ADDR_VAR 0 5
3114: PUSH
3115: LD_VAR 0 1
3119: PUSH
3120: LD_VAR 0 2
3124: ARRAY
3125: ST_TO_ADDR
// if not i then
3126: LD_VAR 0 5
3130: NOT
3131: IFFALSE 3135
// exit ;
3133: GO 3201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_VAR 0 2
3149: PPUSH
3150: LD_VAR 0 1
3154: PUSH
3155: LD_VAR 0 3
3159: ARRAY
3160: PPUSH
3161: CALL_OW 1
3165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3166: LD_ADDR_VAR 0 1
3170: PUSH
3171: LD_VAR 0 1
3175: PPUSH
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_VAR 0 5
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// result := list ;
3191: LD_ADDR_VAR 0 4
3195: PUSH
3196: LD_VAR 0 1
3200: ST_TO_ADDR
// end ;
3201: LD_VAR 0 4
3205: RET
// export function Add ( list , pos , val ) ; begin
3206: LD_INT 0
3208: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3209: LD_ADDR_VAR 0 4
3213: PUSH
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_VAR 0 2
3223: PPUSH
3224: LD_VAR 0 3
3228: PPUSH
3229: CALL 2771 0 3
3233: ST_TO_ADDR
3234: LD_VAR 0 4
3238: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3239: LD_INT 0
3241: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3242: LD_ADDR_VAR 0 5
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 250
3256: PPUSH
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 251
3266: PPUSH
3267: LD_VAR 0 2
3271: PPUSH
3272: LD_VAR 0 3
3276: PPUSH
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL 3292 0 5
3286: ST_TO_ADDR
// end ;
3287: LD_VAR 0 5
3291: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3292: LD_INT 0
3294: PPUSH
3295: PPUSH
3296: PPUSH
3297: PPUSH
// if not list then
3298: LD_VAR 0 3
3302: NOT
3303: IFFALSE 3307
// exit ;
3305: GO 3695
// result := [ ] ;
3307: LD_ADDR_VAR 0 6
3311: PUSH
3312: EMPTY
3313: ST_TO_ADDR
// for i in list do
3314: LD_ADDR_VAR 0 7
3318: PUSH
3319: LD_VAR 0 3
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3527
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3327: LD_ADDR_VAR 0 9
3331: PUSH
3332: LD_VAR 0 7
3336: PPUSH
3337: LD_VAR 0 1
3341: PPUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: CALL_OW 297
3351: ST_TO_ADDR
// if not result then
3352: LD_VAR 0 6
3356: NOT
3357: IFFALSE 3383
// result := [ [ i , tmp ] ] else
3359: LD_ADDR_VAR 0 6
3363: PUSH
3364: LD_VAR 0 7
3368: PUSH
3369: LD_VAR 0 9
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PUSH
3378: EMPTY
3379: LIST
3380: ST_TO_ADDR
3381: GO 3525
// begin if result [ result ] [ 2 ] < tmp then
3383: LD_VAR 0 6
3387: PUSH
3388: LD_VAR 0 6
3392: ARRAY
3393: PUSH
3394: LD_INT 2
3396: ARRAY
3397: PUSH
3398: LD_VAR 0 9
3402: LESS
3403: IFFALSE 3445
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3405: LD_ADDR_VAR 0 6
3409: PUSH
3410: LD_VAR 0 6
3414: PPUSH
3415: LD_VAR 0 6
3419: PUSH
3420: LD_INT 1
3422: PLUS
3423: PPUSH
3424: LD_VAR 0 7
3428: PUSH
3429: LD_VAR 0 9
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 2
3442: ST_TO_ADDR
3443: GO 3525
// for j = 1 to result do
3445: LD_ADDR_VAR 0 8
3449: PUSH
3450: DOUBLE
3451: LD_INT 1
3453: DEC
3454: ST_TO_ADDR
3455: LD_VAR 0 6
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3523
// begin if tmp < result [ j ] [ 2 ] then
3463: LD_VAR 0 9
3467: PUSH
3468: LD_VAR 0 6
3472: PUSH
3473: LD_VAR 0 8
3477: ARRAY
3478: PUSH
3479: LD_INT 2
3481: ARRAY
3482: LESS
3483: IFFALSE 3521
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3485: LD_ADDR_VAR 0 6
3489: PUSH
3490: LD_VAR 0 6
3494: PPUSH
3495: LD_VAR 0 8
3499: PPUSH
3500: LD_VAR 0 7
3504: PUSH
3505: LD_VAR 0 9
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 2
3518: ST_TO_ADDR
// break ;
3519: GO 3523
// end ; end ;
3521: GO 3460
3523: POP
3524: POP
// end ; end ;
3525: GO 3324
3527: POP
3528: POP
// if result and not asc then
3529: LD_VAR 0 6
3533: PUSH
3534: LD_VAR 0 4
3538: NOT
3539: AND
3540: IFFALSE 3615
// begin tmp := result ;
3542: LD_ADDR_VAR 0 9
3546: PUSH
3547: LD_VAR 0 6
3551: ST_TO_ADDR
// for i = tmp downto 1 do
3552: LD_ADDR_VAR 0 7
3556: PUSH
3557: DOUBLE
3558: LD_VAR 0 9
3562: INC
3563: ST_TO_ADDR
3564: LD_INT 1
3566: PUSH
3567: FOR_DOWNTO
3568: IFFALSE 3613
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_VAR 0 6
3579: PPUSH
3580: LD_VAR 0 9
3584: PUSH
3585: LD_VAR 0 7
3589: MINUS
3590: PUSH
3591: LD_INT 1
3593: PLUS
3594: PPUSH
3595: LD_VAR 0 9
3599: PUSH
3600: LD_VAR 0 7
3604: ARRAY
3605: PPUSH
3606: CALL_OW 1
3610: ST_TO_ADDR
3611: GO 3567
3613: POP
3614: POP
// end ; tmp := [ ] ;
3615: LD_ADDR_VAR 0 9
3619: PUSH
3620: EMPTY
3621: ST_TO_ADDR
// if mode then
3622: LD_VAR 0 5
3626: IFFALSE 3695
// begin for i = 1 to result do
3628: LD_ADDR_VAR 0 7
3632: PUSH
3633: DOUBLE
3634: LD_INT 1
3636: DEC
3637: ST_TO_ADDR
3638: LD_VAR 0 6
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3683
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3646: LD_ADDR_VAR 0 9
3650: PUSH
3651: LD_VAR 0 9
3655: PPUSH
3656: LD_VAR 0 7
3660: PPUSH
3661: LD_VAR 0 6
3665: PUSH
3666: LD_VAR 0 7
3670: ARRAY
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: CALL_OW 1
3680: ST_TO_ADDR
3681: GO 3643
3683: POP
3684: POP
// result := tmp ;
3685: LD_ADDR_VAR 0 6
3689: PUSH
3690: LD_VAR 0 9
3694: ST_TO_ADDR
// end ; end ;
3695: LD_VAR 0 6
3699: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3708: LD_ADDR_VAR 0 5
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: LD_INT 0
3718: PUSH
3719: LD_INT 0
3721: PUSH
3722: EMPTY
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: ST_TO_ADDR
// if not x or not y then
3730: LD_VAR 0 2
3734: NOT
3735: PUSH
3736: LD_VAR 0 3
3740: NOT
3741: OR
3742: IFFALSE 3746
// exit ;
3744: GO 5392
// if not range then
3746: LD_VAR 0 4
3750: NOT
3751: IFFALSE 3761
// range := 10 ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_INT 10
3760: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3761: LD_ADDR_VAR 0 8
3765: PUSH
3766: LD_INT 81
3768: PUSH
3769: LD_VAR 0 1
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 92
3780: PUSH
3781: LD_VAR 0 2
3785: PUSH
3786: LD_VAR 0 3
3790: PUSH
3791: LD_VAR 0 4
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 21
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: ST_TO_ADDR
// if not tmp then
3829: LD_VAR 0 8
3833: NOT
3834: IFFALSE 3838
// exit ;
3836: GO 5392
// for i in tmp do
3838: LD_ADDR_VAR 0 6
3842: PUSH
3843: LD_VAR 0 8
3847: PUSH
3848: FOR_IN
3849: IFFALSE 5367
// begin points := [ 0 , 0 , 0 ] ;
3851: LD_ADDR_VAR 0 9
3855: PUSH
3856: LD_INT 0
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: LD_INT 0
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: ST_TO_ADDR
// bpoints := 1 ;
3870: LD_ADDR_VAR 0 10
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3878: LD_VAR 0 6
3882: PPUSH
3883: CALL_OW 247
3887: PUSH
3888: LD_INT 1
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4474
3896: POP
// begin if GetClass ( i ) = 1 then
3897: LD_VAR 0 6
3901: PPUSH
3902: CALL_OW 257
3906: PUSH
3907: LD_INT 1
3909: EQUAL
3910: IFFALSE 3931
// points := [ 10 , 5 , 3 ] ;
3912: LD_ADDR_VAR 0 9
3916: PUSH
3917: LD_INT 10
3919: PUSH
3920: LD_INT 5
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3931: LD_VAR 0 6
3935: PPUSH
3936: CALL_OW 257
3940: PUSH
3941: LD_INT 2
3943: PUSH
3944: LD_INT 3
3946: PUSH
3947: LD_INT 4
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: IN
3955: IFFALSE 3976
// points := [ 3 , 2 , 1 ] ;
3957: LD_ADDR_VAR 0 9
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: LD_INT 2
3967: PUSH
3968: LD_INT 1
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3976: LD_VAR 0 6
3980: PPUSH
3981: CALL_OW 257
3985: PUSH
3986: LD_INT 5
3988: EQUAL
3989: IFFALSE 4010
// points := [ 130 , 5 , 2 ] ;
3991: LD_ADDR_VAR 0 9
3995: PUSH
3996: LD_INT 130
3998: PUSH
3999: LD_INT 5
4001: PUSH
4002: LD_INT 2
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: ST_TO_ADDR
// if GetClass ( i ) = 8 then
4010: LD_VAR 0 6
4014: PPUSH
4015: CALL_OW 257
4019: PUSH
4020: LD_INT 8
4022: EQUAL
4023: IFFALSE 4044
// points := [ 35 , 35 , 30 ] ;
4025: LD_ADDR_VAR 0 9
4029: PUSH
4030: LD_INT 35
4032: PUSH
4033: LD_INT 35
4035: PUSH
4036: LD_INT 30
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4044: LD_VAR 0 6
4048: PPUSH
4049: CALL_OW 257
4053: PUSH
4054: LD_INT 9
4056: EQUAL
4057: IFFALSE 4078
// points := [ 20 , 55 , 40 ] ;
4059: LD_ADDR_VAR 0 9
4063: PUSH
4064: LD_INT 20
4066: PUSH
4067: LD_INT 55
4069: PUSH
4070: LD_INT 40
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4078: LD_VAR 0 6
4082: PPUSH
4083: CALL_OW 257
4087: PUSH
4088: LD_INT 12
4090: PUSH
4091: LD_INT 16
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: IN
4098: IFFALSE 4119
// points := [ 5 , 3 , 2 ] ;
4100: LD_ADDR_VAR 0 9
4104: PUSH
4105: LD_INT 5
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4119: LD_VAR 0 6
4123: PPUSH
4124: CALL_OW 257
4128: PUSH
4129: LD_INT 17
4131: EQUAL
4132: IFFALSE 4153
// points := [ 100 , 50 , 75 ] ;
4134: LD_ADDR_VAR 0 9
4138: PUSH
4139: LD_INT 100
4141: PUSH
4142: LD_INT 50
4144: PUSH
4145: LD_INT 75
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4153: LD_VAR 0 6
4157: PPUSH
4158: CALL_OW 257
4162: PUSH
4163: LD_INT 15
4165: EQUAL
4166: IFFALSE 4187
// points := [ 10 , 5 , 3 ] ;
4168: LD_ADDR_VAR 0 9
4172: PUSH
4173: LD_INT 10
4175: PUSH
4176: LD_INT 5
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4187: LD_VAR 0 6
4191: PPUSH
4192: CALL_OW 257
4196: PUSH
4197: LD_INT 14
4199: EQUAL
4200: IFFALSE 4221
// points := [ 10 , 0 , 0 ] ;
4202: LD_ADDR_VAR 0 9
4206: PUSH
4207: LD_INT 10
4209: PUSH
4210: LD_INT 0
4212: PUSH
4213: LD_INT 0
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4221: LD_VAR 0 6
4225: PPUSH
4226: CALL_OW 257
4230: PUSH
4231: LD_INT 11
4233: EQUAL
4234: IFFALSE 4255
// points := [ 30 , 10 , 5 ] ;
4236: LD_ADDR_VAR 0 9
4240: PUSH
4241: LD_INT 30
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_INT 5
4262: PPUSH
4263: CALL_OW 321
4267: PUSH
4268: LD_INT 2
4270: EQUAL
4271: IFFALSE 4288
// bpoints := bpoints * 1.8 ;
4273: LD_ADDR_VAR 0 10
4277: PUSH
4278: LD_VAR 0 10
4282: PUSH
4283: LD_REAL  1.80000000000000E+0000
4286: MUL
4287: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4288: LD_VAR 0 6
4292: PPUSH
4293: CALL_OW 257
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 3
4306: PUSH
4307: LD_INT 4
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: IN
4316: PUSH
4317: LD_VAR 0 1
4321: PPUSH
4322: LD_INT 51
4324: PPUSH
4325: CALL_OW 321
4329: PUSH
4330: LD_INT 2
4332: EQUAL
4333: AND
4334: IFFALSE 4351
// bpoints := bpoints * 1.2 ;
4336: LD_ADDR_VAR 0 10
4340: PUSH
4341: LD_VAR 0 10
4345: PUSH
4346: LD_REAL  1.20000000000000E+0000
4349: MUL
4350: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4351: LD_VAR 0 6
4355: PPUSH
4356: CALL_OW 257
4360: PUSH
4361: LD_INT 5
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 9
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: IN
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: LD_INT 52
4383: PPUSH
4384: CALL_OW 321
4388: PUSH
4389: LD_INT 2
4391: EQUAL
4392: AND
4393: IFFALSE 4410
// bpoints := bpoints * 1.5 ;
4395: LD_ADDR_VAR 0 10
4399: PUSH
4400: LD_VAR 0 10
4404: PUSH
4405: LD_REAL  1.50000000000000E+0000
4408: MUL
4409: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4410: LD_VAR 0 1
4414: PPUSH
4415: LD_INT 66
4417: PPUSH
4418: CALL_OW 321
4422: PUSH
4423: LD_INT 2
4425: EQUAL
4426: IFFALSE 4443
// bpoints := bpoints * 1.1 ;
4428: LD_ADDR_VAR 0 10
4432: PUSH
4433: LD_VAR 0 10
4437: PUSH
4438: LD_REAL  1.10000000000000E+0000
4441: MUL
4442: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4443: LD_ADDR_VAR 0 10
4447: PUSH
4448: LD_VAR 0 10
4452: PUSH
4453: LD_VAR 0 6
4457: PPUSH
4458: LD_INT 1
4460: PPUSH
4461: CALL_OW 259
4465: PUSH
4466: LD_REAL  1.15000000000000E+0000
4469: MUL
4470: MUL
4471: ST_TO_ADDR
// end ; unit_vehicle :
4472: GO 5296
4474: LD_INT 2
4476: DOUBLE
4477: EQUAL
4478: IFTRUE 4482
4480: GO 5284
4482: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4483: LD_VAR 0 6
4487: PPUSH
4488: CALL_OW 264
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 42
4498: PUSH
4499: LD_INT 24
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: IN
4507: IFFALSE 4528
// points := [ 25 , 5 , 3 ] ;
4509: LD_ADDR_VAR 0 9
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 5
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4528: LD_VAR 0 6
4532: PPUSH
4533: CALL_OW 264
4537: PUSH
4538: LD_INT 4
4540: PUSH
4541: LD_INT 43
4543: PUSH
4544: LD_INT 25
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: IN
4552: IFFALSE 4573
// points := [ 40 , 15 , 5 ] ;
4554: LD_ADDR_VAR 0 9
4558: PUSH
4559: LD_INT 40
4561: PUSH
4562: LD_INT 15
4564: PUSH
4565: LD_INT 5
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4573: LD_VAR 0 6
4577: PPUSH
4578: CALL_OW 264
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 23
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: IN
4593: IFFALSE 4614
// points := [ 7 , 25 , 8 ] ;
4595: LD_ADDR_VAR 0 9
4599: PUSH
4600: LD_INT 7
4602: PUSH
4603: LD_INT 25
4605: PUSH
4606: LD_INT 8
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4614: LD_VAR 0 6
4618: PPUSH
4619: CALL_OW 264
4623: PUSH
4624: LD_INT 5
4626: PUSH
4627: LD_INT 27
4629: PUSH
4630: LD_INT 44
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: IN
4638: IFFALSE 4659
// points := [ 14 , 50 , 16 ] ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: LD_INT 14
4647: PUSH
4648: LD_INT 50
4650: PUSH
4651: LD_INT 16
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4659: LD_VAR 0 6
4663: PPUSH
4664: CALL_OW 264
4668: PUSH
4669: LD_INT 6
4671: PUSH
4672: LD_INT 46
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: IN
4679: IFFALSE 4700
// points := [ 32 , 120 , 70 ] ;
4681: LD_ADDR_VAR 0 9
4685: PUSH
4686: LD_INT 32
4688: PUSH
4689: LD_INT 120
4691: PUSH
4692: LD_INT 70
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4700: LD_VAR 0 6
4704: PPUSH
4705: CALL_OW 264
4709: PUSH
4710: LD_INT 7
4712: PUSH
4713: LD_INT 28
4715: PUSH
4716: LD_INT 45
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: IN
4724: IFFALSE 4745
// points := [ 35 , 20 , 45 ] ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_INT 35
4733: PUSH
4734: LD_INT 20
4736: PUSH
4737: LD_INT 45
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4745: LD_VAR 0 6
4749: PPUSH
4750: CALL_OW 264
4754: PUSH
4755: LD_INT 47
4757: PUSH
4758: EMPTY
4759: LIST
4760: IN
4761: IFFALSE 4782
// points := [ 67 , 45 , 75 ] ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 67
4770: PUSH
4771: LD_INT 45
4773: PUSH
4774: LD_INT 75
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4782: LD_VAR 0 6
4786: PPUSH
4787: CALL_OW 264
4791: PUSH
4792: LD_INT 26
4794: PUSH
4795: EMPTY
4796: LIST
4797: IN
4798: IFFALSE 4819
// points := [ 120 , 30 , 80 ] ;
4800: LD_ADDR_VAR 0 9
4804: PUSH
4805: LD_INT 120
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 80
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4819: LD_VAR 0 6
4823: PPUSH
4824: CALL_OW 264
4828: PUSH
4829: LD_INT 22
4831: PUSH
4832: EMPTY
4833: LIST
4834: IN
4835: IFFALSE 4856
// points := [ 40 , 1 , 1 ] ;
4837: LD_ADDR_VAR 0 9
4841: PUSH
4842: LD_INT 40
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4856: LD_VAR 0 6
4860: PPUSH
4861: CALL_OW 264
4865: PUSH
4866: LD_INT 29
4868: PUSH
4869: EMPTY
4870: LIST
4871: IN
4872: IFFALSE 4893
// points := [ 70 , 200 , 400 ] ;
4874: LD_ADDR_VAR 0 9
4878: PUSH
4879: LD_INT 70
4881: PUSH
4882: LD_INT 200
4884: PUSH
4885: LD_INT 400
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4893: LD_VAR 0 6
4897: PPUSH
4898: CALL_OW 264
4902: PUSH
4903: LD_INT 14
4905: PUSH
4906: LD_INT 53
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: IN
4913: IFFALSE 4934
// points := [ 40 , 10 , 20 ] ;
4915: LD_ADDR_VAR 0 9
4919: PUSH
4920: LD_INT 40
4922: PUSH
4923: LD_INT 10
4925: PUSH
4926: LD_INT 20
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4934: LD_VAR 0 6
4938: PPUSH
4939: CALL_OW 264
4943: PUSH
4944: LD_INT 9
4946: PUSH
4947: EMPTY
4948: LIST
4949: IN
4950: IFFALSE 4971
// points := [ 5 , 70 , 20 ] ;
4952: LD_ADDR_VAR 0 9
4956: PUSH
4957: LD_INT 5
4959: PUSH
4960: LD_INT 70
4962: PUSH
4963: LD_INT 20
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4971: LD_VAR 0 6
4975: PPUSH
4976: CALL_OW 264
4980: PUSH
4981: LD_INT 10
4983: PUSH
4984: EMPTY
4985: LIST
4986: IN
4987: IFFALSE 5008
// points := [ 35 , 110 , 70 ] ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 35
4996: PUSH
4997: LD_INT 110
4999: PUSH
5000: LD_INT 70
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
5008: LD_VAR 0 6
5012: PPUSH
5013: CALL_OW 265
5017: PUSH
5018: LD_INT 25
5020: EQUAL
5021: IFFALSE 5042
// points := [ 80 , 65 , 100 ] ;
5023: LD_ADDR_VAR 0 9
5027: PUSH
5028: LD_INT 80
5030: PUSH
5031: LD_INT 65
5033: PUSH
5034: LD_INT 100
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5042: LD_VAR 0 6
5046: PPUSH
5047: CALL_OW 263
5051: PUSH
5052: LD_INT 1
5054: EQUAL
5055: IFFALSE 5090
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5057: LD_ADDR_VAR 0 10
5061: PUSH
5062: LD_VAR 0 10
5066: PUSH
5067: LD_VAR 0 6
5071: PPUSH
5072: CALL_OW 311
5076: PPUSH
5077: LD_INT 3
5079: PPUSH
5080: CALL_OW 259
5084: PUSH
5085: LD_INT 4
5087: MUL
5088: MUL
5089: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5090: LD_VAR 0 6
5094: PPUSH
5095: CALL_OW 263
5099: PUSH
5100: LD_INT 2
5102: EQUAL
5103: IFFALSE 5154
// begin j := IsControledBy ( i ) ;
5105: LD_ADDR_VAR 0 7
5109: PUSH
5110: LD_VAR 0 6
5114: PPUSH
5115: CALL_OW 312
5119: ST_TO_ADDR
// if j then
5120: LD_VAR 0 7
5124: IFFALSE 5154
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5126: LD_ADDR_VAR 0 10
5130: PUSH
5131: LD_VAR 0 10
5135: PUSH
5136: LD_VAR 0 7
5140: PPUSH
5141: LD_INT 3
5143: PPUSH
5144: CALL_OW 259
5148: PUSH
5149: LD_INT 3
5151: MUL
5152: MUL
5153: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5154: LD_VAR 0 6
5158: PPUSH
5159: CALL_OW 264
5163: PUSH
5164: LD_INT 5
5166: PUSH
5167: LD_INT 6
5169: PUSH
5170: LD_INT 46
5172: PUSH
5173: LD_INT 44
5175: PUSH
5176: LD_INT 47
5178: PUSH
5179: LD_INT 45
5181: PUSH
5182: LD_INT 28
5184: PUSH
5185: LD_INT 7
5187: PUSH
5188: LD_INT 27
5190: PUSH
5191: LD_INT 29
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: IN
5206: PUSH
5207: LD_VAR 0 1
5211: PPUSH
5212: LD_INT 52
5214: PPUSH
5215: CALL_OW 321
5219: PUSH
5220: LD_INT 2
5222: EQUAL
5223: AND
5224: IFFALSE 5241
// bpoints := bpoints * 1.2 ;
5226: LD_ADDR_VAR 0 10
5230: PUSH
5231: LD_VAR 0 10
5235: PUSH
5236: LD_REAL  1.20000000000000E+0000
5239: MUL
5240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5241: LD_VAR 0 6
5245: PPUSH
5246: CALL_OW 264
5250: PUSH
5251: LD_INT 6
5253: PUSH
5254: LD_INT 46
5256: PUSH
5257: LD_INT 47
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: IN
5265: IFFALSE 5282
// bpoints := bpoints * 1.2 ;
5267: LD_ADDR_VAR 0 10
5271: PUSH
5272: LD_VAR 0 10
5276: PUSH
5277: LD_REAL  1.20000000000000E+0000
5280: MUL
5281: ST_TO_ADDR
// end ; unit_building :
5282: GO 5296
5284: LD_INT 3
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5292
5290: GO 5295
5292: POP
// ; end ;
5293: GO 5296
5295: POP
// for j = 1 to 3 do
5296: LD_ADDR_VAR 0 7
5300: PUSH
5301: DOUBLE
5302: LD_INT 1
5304: DEC
5305: ST_TO_ADDR
5306: LD_INT 3
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5363
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5312: LD_ADDR_VAR 0 5
5316: PUSH
5317: LD_VAR 0 5
5321: PPUSH
5322: LD_VAR 0 7
5326: PPUSH
5327: LD_VAR 0 5
5331: PUSH
5332: LD_VAR 0 7
5336: ARRAY
5337: PUSH
5338: LD_VAR 0 9
5342: PUSH
5343: LD_VAR 0 7
5347: ARRAY
5348: PUSH
5349: LD_VAR 0 10
5353: MUL
5354: PLUS
5355: PPUSH
5356: CALL_OW 1
5360: ST_TO_ADDR
5361: GO 5309
5363: POP
5364: POP
// end ;
5365: GO 3848
5367: POP
5368: POP
// result := Replace ( result , 4 , tmp ) ;
5369: LD_ADDR_VAR 0 5
5373: PUSH
5374: LD_VAR 0 5
5378: PPUSH
5379: LD_INT 4
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// end ;
5392: LD_VAR 0 5
5396: RET
// export function DangerAtRange ( unit , range ) ; begin
5397: LD_INT 0
5399: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 255
5414: PPUSH
5415: LD_VAR 0 1
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 3700 0 4
5444: ST_TO_ADDR
// end ;
5445: LD_VAR 0 3
5449: RET
// export function IsExtension ( b ) ; begin
5450: LD_INT 0
5452: PPUSH
// result := false ;
5453: LD_ADDR_VAR 0 2
5457: PUSH
5458: LD_INT 0
5460: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 266
5470: PUSH
5471: LD_INT 23
5473: PUSH
5474: LD_INT 20
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 17
5482: PUSH
5483: LD_INT 24
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 19
5491: PUSH
5492: LD_INT 16
5494: PUSH
5495: LD_INT 25
5497: PUSH
5498: LD_INT 18
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: IN
5513: IFFALSE 5523
// result := true ;
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// end ;
5523: LD_VAR 0 2
5527: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
5532: PPUSH
// result := [ ] ;
5533: LD_ADDR_VAR 0 2
5537: PUSH
5538: EMPTY
5539: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5540: LD_ADDR_VAR 0 3
5544: PUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PPUSH
5555: CALL_OW 69
5559: ST_TO_ADDR
// if not tmp then
5560: LD_VAR 0 3
5564: NOT
5565: IFFALSE 5569
// exit ;
5567: GO 5619
// for i in tmp do
5569: LD_ADDR_VAR 0 4
5573: PUSH
5574: LD_VAR 0 3
5578: PUSH
5579: FOR_IN
5580: IFFALSE 5617
// if GetBase ( i ) = base then
5582: LD_VAR 0 4
5586: PPUSH
5587: CALL_OW 274
5591: PUSH
5592: LD_VAR 0 1
5596: EQUAL
5597: IFFALSE 5615
// result := result ^ i ;
5599: LD_ADDR_VAR 0 2
5603: PUSH
5604: LD_VAR 0 2
5608: PUSH
5609: LD_VAR 0 4
5613: ADD
5614: ST_TO_ADDR
5615: GO 5579
5617: POP
5618: POP
// end ;
5619: LD_VAR 0 2
5623: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5624: LD_INT 0
5626: PPUSH
5627: PPUSH
// if BuildingStatus ( b ) = bs_build then
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 461
5637: PUSH
5638: LD_INT 1
5640: EQUAL
5641: IFFALSE 5701
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_STRING h
5650: PUSH
5651: LD_VAR 0 2
5655: PPUSH
5656: CALL_OW 250
5660: PUSH
5661: LD_VAR 0 2
5665: PPUSH
5666: CALL_OW 251
5670: PUSH
5671: LD_VAR 0 2
5675: PUSH
5676: LD_INT 0
5678: PUSH
5679: LD_INT 0
5681: PUSH
5682: LD_INT 0
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: PPUSH
5697: CALL_OW 446
// end ;
5701: LD_VAR 0 3
5705: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5706: LD_INT 0
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5713: LD_VAR 0 1
5717: NOT
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 263
5728: PUSH
5729: LD_INT 2
5731: EQUAL
5732: NOT
5733: OR
5734: IFFALSE 5738
// exit ;
5736: GO 6010
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5738: LD_ADDR_VAR 0 6
5742: PUSH
5743: LD_INT 22
5745: PUSH
5746: LD_VAR 0 1
5750: PPUSH
5751: CALL_OW 255
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 30
5765: PUSH
5766: LD_INT 36
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 34
5775: PUSH
5776: LD_INT 31
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: ST_TO_ADDR
// if not tmp then
5797: LD_VAR 0 6
5801: NOT
5802: IFFALSE 5806
// exit ;
5804: GO 6010
// result := [ ] ;
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: EMPTY
5812: ST_TO_ADDR
// for i in tmp do
5813: LD_ADDR_VAR 0 3
5817: PUSH
5818: LD_VAR 0 6
5822: PUSH
5823: FOR_IN
5824: IFFALSE 5872
// begin t := UnitsInside ( i ) ;
5826: LD_ADDR_VAR 0 4
5830: PUSH
5831: LD_VAR 0 3
5835: PPUSH
5836: CALL_OW 313
5840: ST_TO_ADDR
// if t then
5841: LD_VAR 0 4
5845: IFFALSE 5870
// result := Insert ( result , 1 , t ) ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 1
5859: PPUSH
5860: LD_VAR 0 4
5864: PPUSH
5865: CALL_OW 2
5869: ST_TO_ADDR
// end ;
5870: GO 5823
5872: POP
5873: POP
// if not result then
5874: LD_VAR 0 2
5878: NOT
5879: IFFALSE 5883
// exit ;
5881: GO 6010
// mech := 0 ;
5883: LD_ADDR_VAR 0 5
5887: PUSH
5888: LD_INT 0
5890: ST_TO_ADDR
// for i in result do
5891: LD_ADDR_VAR 0 3
5895: PUSH
5896: LD_VAR 0 2
5900: PUSH
5901: FOR_IN
5902: IFFALSE 5984
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5904: LD_ADDR_VAR 0 4
5908: PUSH
5909: LD_VAR 0 3
5913: PPUSH
5914: LD_INT 3
5916: PPUSH
5917: CALL_OW 259
5921: PUSH
5922: LD_VAR 0 3
5926: PPUSH
5927: CALL_OW 432
5931: MINUS
5932: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5933: LD_VAR 0 4
5937: PUSH
5938: LD_VAR 0 5
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_INT 3
5949: PPUSH
5950: CALL_OW 259
5954: PUSH
5955: LD_VAR 0 5
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: CALL_OW 432
5968: MINUS
5969: GREATEREQUAL
5970: IFFALSE 5982
// mech := i ;
5972: LD_ADDR_VAR 0 5
5976: PUSH
5977: LD_VAR 0 3
5981: ST_TO_ADDR
// end ;
5982: GO 5901
5984: POP
5985: POP
// if mech then
5986: LD_VAR 0 5
5990: IFFALSE 6010
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_VAR 0 5
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: CALL_OW 135
// end ;
6010: LD_VAR 0 2
6014: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// result := [ ] ;
6029: LD_ADDR_VAR 0 6
6033: PUSH
6034: EMPTY
6035: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 266
6045: PUSH
6046: LD_INT 0
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: IN
6056: NOT
6057: IFFALSE 6061
// exit ;
6059: GO 7180
// if name then
6061: LD_VAR 0 2
6065: IFFALSE 6081
// SetBName ( base_dep , name ) ;
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_VAR 0 2
6076: PPUSH
6077: CALL_OW 500
// base := GetBase ( base_dep ) ;
6081: LD_ADDR_VAR 0 14
6085: PUSH
6086: LD_VAR 0 1
6090: PPUSH
6091: CALL_OW 274
6095: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6096: LD_ADDR_VAR 0 15
6100: PUSH
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 255
6110: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6111: LD_ADDR_VAR 0 16
6115: PUSH
6116: LD_VAR 0 1
6120: PPUSH
6121: CALL_OW 248
6125: ST_TO_ADDR
// if sources then
6126: LD_VAR 0 4
6130: IFFALSE 6177
// for i = 1 to 3 do
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_INT 3
6144: PUSH
6145: FOR_TO
6146: IFFALSE 6175
// AddResourceType ( base , i , sources [ i ] ) ;
6148: LD_VAR 0 14
6152: PPUSH
6153: LD_VAR 0 7
6157: PPUSH
6158: LD_VAR 0 4
6162: PUSH
6163: LD_VAR 0 7
6167: ARRAY
6168: PPUSH
6169: CALL_OW 276
6173: GO 6145
6175: POP
6176: POP
// buildings := GetBaseBuildings ( base ) ;
6177: LD_ADDR_VAR 0 17
6181: PUSH
6182: LD_VAR 0 14
6186: PPUSH
6187: CALL 5528 0 1
6191: ST_TO_ADDR
// InitHc ;
6192: CALL_OW 19
// InitUc ;
6196: CALL_OW 18
// uc_side := side ;
6200: LD_ADDR_OWVAR 20
6204: PUSH
6205: LD_VAR 0 15
6209: ST_TO_ADDR
// uc_nation := nation ;
6210: LD_ADDR_OWVAR 21
6214: PUSH
6215: LD_VAR 0 16
6219: ST_TO_ADDR
// if buildings then
6220: LD_VAR 0 17
6224: IFFALSE 7039
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6226: LD_VAR 0 17
6230: PPUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 30
6236: PUSH
6237: LD_INT 32
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 30
6246: PUSH
6247: LD_INT 33
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 72
6263: IFFALSE 6346
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6265: LD_ADDR_VAR 0 7
6269: PUSH
6270: LD_VAR 0 17
6274: PPUSH
6275: LD_INT 2
6277: PUSH
6278: LD_INT 30
6280: PUSH
6281: LD_INT 32
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 30
6290: PUSH
6291: LD_INT 33
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: PUSH
6308: FOR_IN
6309: IFFALSE 6344
// begin if not GetBWeapon ( i ) then
6311: LD_VAR 0 7
6315: PPUSH
6316: CALL_OW 269
6320: NOT
6321: IFFALSE 6342
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6323: LD_VAR 0 7
6327: PPUSH
6328: LD_VAR 0 7
6332: PPUSH
6333: CALL 7185 0 1
6337: PPUSH
6338: CALL_OW 431
// end ;
6342: GO 6308
6344: POP
6345: POP
// end ; for i = 1 to personel do
6346: LD_ADDR_VAR 0 7
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_VAR 0 5
6360: PUSH
6361: FOR_TO
6362: IFFALSE 7019
// begin if i > 4 then
6364: LD_VAR 0 7
6368: PUSH
6369: LD_INT 4
6371: GREATER
6372: IFFALSE 6376
// break ;
6374: GO 7019
// case i of 1 :
6376: LD_VAR 0 7
6380: PUSH
6381: LD_INT 1
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6462
6389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6390: LD_ADDR_VAR 0 11
6394: PUSH
6395: LD_VAR 0 17
6399: PPUSH
6400: LD_INT 22
6402: PUSH
6403: LD_VAR 0 15
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: LD_INT 30
6417: PUSH
6418: LD_INT 32
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 30
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 30
6437: PUSH
6438: LD_INT 5
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 72
6459: ST_TO_ADDR
6460: GO 6684
6462: LD_INT 2
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6532
6470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6471: LD_ADDR_VAR 0 11
6475: PUSH
6476: LD_VAR 0 17
6480: PPUSH
6481: LD_INT 22
6483: PUSH
6484: LD_VAR 0 15
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 30
6498: PUSH
6499: LD_INT 0
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 30
6508: PUSH
6509: LD_INT 1
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: ST_TO_ADDR
6530: GO 6684
6532: LD_INT 3
6534: DOUBLE
6535: EQUAL
6536: IFTRUE 6540
6538: GO 6602
6540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6541: LD_ADDR_VAR 0 11
6545: PUSH
6546: LD_VAR 0 17
6550: PPUSH
6551: LD_INT 22
6553: PUSH
6554: LD_VAR 0 15
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 30
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 30
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PPUSH
6595: CALL_OW 72
6599: ST_TO_ADDR
6600: GO 6684
6602: LD_INT 4
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6683
6610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6611: LD_ADDR_VAR 0 11
6615: PUSH
6616: LD_VAR 0 17
6620: PPUSH
6621: LD_INT 22
6623: PUSH
6624: LD_VAR 0 15
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 30
6638: PUSH
6639: LD_INT 6
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 30
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 30
6658: PUSH
6659: LD_INT 8
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 72
6680: ST_TO_ADDR
6681: GO 6684
6683: POP
// if not f then
6684: LD_VAR 0 11
6688: NOT
6689: IFFALSE 6693
// continue ;
6691: GO 6361
// x := personel [ i ] ;
6693: LD_ADDR_VAR 0 12
6697: PUSH
6698: LD_VAR 0 5
6702: PUSH
6703: LD_VAR 0 7
6707: ARRAY
6708: ST_TO_ADDR
// if x = - 1 then
6709: LD_VAR 0 12
6713: PUSH
6714: LD_INT 1
6716: NEG
6717: EQUAL
6718: IFFALSE 6840
// begin for j in f do
6720: LD_ADDR_VAR 0 8
6724: PUSH
6725: LD_VAR 0 11
6729: PUSH
6730: FOR_IN
6731: IFFALSE 6836
// repeat PrepareHuman ( false , i , skill ) ;
6733: LD_INT 0
6735: PPUSH
6736: LD_VAR 0 7
6740: PPUSH
6741: LD_VAR 0 3
6745: PPUSH
6746: CALL_OW 380
// un := CreateHuman ;
6750: LD_ADDR_VAR 0 13
6754: PUSH
6755: CALL_OW 44
6759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6760: LD_ADDR_VAR 0 6
6764: PUSH
6765: LD_VAR 0 6
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_VAR 0 13
6777: PPUSH
6778: CALL_OW 2
6782: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6783: LD_VAR 0 13
6787: PPUSH
6788: LD_VAR 0 8
6792: PPUSH
6793: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 313
6806: PUSH
6807: LD_INT 6
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 266
6820: PUSH
6821: LD_INT 32
6823: PUSH
6824: LD_INT 31
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: IN
6831: OR
6832: IFFALSE 6733
6834: GO 6730
6836: POP
6837: POP
// end else
6838: GO 7017
// for j = 1 to x do
6840: LD_ADDR_VAR 0 8
6844: PUSH
6845: DOUBLE
6846: LD_INT 1
6848: DEC
6849: ST_TO_ADDR
6850: LD_VAR 0 12
6854: PUSH
6855: FOR_TO
6856: IFFALSE 7015
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6858: LD_VAR 0 11
6862: PUSH
6863: LD_INT 1
6865: ARRAY
6866: PPUSH
6867: CALL_OW 313
6871: PUSH
6872: LD_VAR 0 11
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PPUSH
6881: CALL_OW 266
6885: PUSH
6886: LD_INT 32
6888: PUSH
6889: LD_INT 31
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: IN
6896: AND
6897: PUSH
6898: LD_VAR 0 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: CALL_OW 313
6911: PUSH
6912: LD_INT 6
6914: EQUAL
6915: OR
6916: IFFALSE 6936
// f := Delete ( f , 1 ) ;
6918: LD_ADDR_VAR 0 11
6922: PUSH
6923: LD_VAR 0 11
6927: PPUSH
6928: LD_INT 1
6930: PPUSH
6931: CALL_OW 3
6935: ST_TO_ADDR
// if not f then
6936: LD_VAR 0 11
6940: NOT
6941: IFFALSE 6945
// break ;
6943: GO 7015
// PrepareHuman ( false , i , skill ) ;
6945: LD_INT 0
6947: PPUSH
6948: LD_VAR 0 7
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 380
// un := CreateHuman ;
6962: LD_ADDR_VAR 0 13
6966: PUSH
6967: CALL_OW 44
6971: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6972: LD_ADDR_VAR 0 6
6976: PUSH
6977: LD_VAR 0 6
6981: PPUSH
6982: LD_INT 1
6984: PPUSH
6985: LD_VAR 0 13
6989: PPUSH
6990: CALL_OW 2
6994: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6995: LD_VAR 0 13
6999: PPUSH
7000: LD_VAR 0 11
7004: PUSH
7005: LD_INT 1
7007: ARRAY
7008: PPUSH
7009: CALL_OW 52
// end ;
7013: GO 6855
7015: POP
7016: POP
// end ;
7017: GO 6361
7019: POP
7020: POP
// result := result ^ buildings ;
7021: LD_ADDR_VAR 0 6
7025: PUSH
7026: LD_VAR 0 6
7030: PUSH
7031: LD_VAR 0 17
7035: ADD
7036: ST_TO_ADDR
// end else
7037: GO 7180
// begin for i = 1 to personel do
7039: LD_ADDR_VAR 0 7
7043: PUSH
7044: DOUBLE
7045: LD_INT 1
7047: DEC
7048: ST_TO_ADDR
7049: LD_VAR 0 5
7053: PUSH
7054: FOR_TO
7055: IFFALSE 7178
// begin if i > 4 then
7057: LD_VAR 0 7
7061: PUSH
7062: LD_INT 4
7064: GREATER
7065: IFFALSE 7069
// break ;
7067: GO 7178
// x := personel [ i ] ;
7069: LD_ADDR_VAR 0 12
7073: PUSH
7074: LD_VAR 0 5
7078: PUSH
7079: LD_VAR 0 7
7083: ARRAY
7084: ST_TO_ADDR
// if x = - 1 then
7085: LD_VAR 0 12
7089: PUSH
7090: LD_INT 1
7092: NEG
7093: EQUAL
7094: IFFALSE 7098
// continue ;
7096: GO 7054
// PrepareHuman ( false , i , skill ) ;
7098: LD_INT 0
7100: PPUSH
7101: LD_VAR 0 7
7105: PPUSH
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL_OW 380
// un := CreateHuman ;
7115: LD_ADDR_VAR 0 13
7119: PUSH
7120: CALL_OW 44
7124: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7125: LD_VAR 0 13
7129: PPUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 250
7139: PPUSH
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 251
7149: PPUSH
7150: LD_INT 10
7152: PPUSH
7153: LD_INT 0
7155: PPUSH
7156: CALL_OW 50
// result := result ^ un ;
7160: LD_ADDR_VAR 0 6
7164: PUSH
7165: LD_VAR 0 6
7169: PUSH
7170: LD_VAR 0 13
7174: ADD
7175: ST_TO_ADDR
// end ;
7176: GO 7054
7178: POP
7179: POP
// end ; end ;
7180: LD_VAR 0 6
7184: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7185: LD_INT 0
7187: PPUSH
7188: PPUSH
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
7198: PPUSH
7199: PPUSH
7200: PPUSH
7201: PPUSH
7202: PPUSH
// result := false ;
7203: LD_ADDR_VAR 0 2
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7211: LD_VAR 0 1
7215: NOT
7216: PUSH
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 266
7226: PUSH
7227: LD_INT 32
7229: PUSH
7230: LD_INT 33
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: IN
7237: NOT
7238: OR
7239: IFFALSE 7243
// exit ;
7241: GO 8476
// nat := GetNation ( tower ) ;
7243: LD_ADDR_VAR 0 11
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 248
7257: ST_TO_ADDR
// side := GetSide ( tower ) ;
7258: LD_ADDR_VAR 0 15
7262: PUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 255
7272: ST_TO_ADDR
// x := GetX ( tower ) ;
7273: LD_ADDR_VAR 0 9
7277: PUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 250
7287: ST_TO_ADDR
// y := GetY ( tower ) ;
7288: LD_ADDR_VAR 0 10
7292: PUSH
7293: LD_VAR 0 1
7297: PPUSH
7298: CALL_OW 251
7302: ST_TO_ADDR
// if not x or not y then
7303: LD_VAR 0 9
7307: NOT
7308: PUSH
7309: LD_VAR 0 10
7313: NOT
7314: OR
7315: IFFALSE 7319
// exit ;
7317: GO 8476
// weapon := 0 ;
7319: LD_ADDR_VAR 0 17
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// fac_list := [ ] ;
7327: LD_ADDR_VAR 0 16
7331: PUSH
7332: EMPTY
7333: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_VAR 0 1
7343: PPUSH
7344: CALL_OW 274
7348: PPUSH
7349: CALL 5528 0 1
7353: PPUSH
7354: LD_INT 30
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 72
7368: ST_TO_ADDR
// if not factories then
7369: LD_VAR 0 5
7373: NOT
7374: IFFALSE 7378
// exit ;
7376: GO 8476
// for i in factories do
7378: LD_ADDR_VAR 0 7
7382: PUSH
7383: LD_VAR 0 5
7387: PUSH
7388: FOR_IN
7389: IFFALSE 7414
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7391: LD_ADDR_VAR 0 16
7395: PUSH
7396: LD_VAR 0 16
7400: PUSH
7401: LD_VAR 0 7
7405: PPUSH
7406: CALL_OW 478
7410: UNION
7411: ST_TO_ADDR
7412: GO 7388
7414: POP
7415: POP
// if not fac_list then
7416: LD_VAR 0 16
7420: NOT
7421: IFFALSE 7425
// exit ;
7423: GO 8476
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7425: LD_ADDR_VAR 0 4
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: LD_INT 9
7438: PUSH
7439: LD_INT 10
7441: PUSH
7442: LD_INT 6
7444: PUSH
7445: LD_INT 7
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 27
7462: PUSH
7463: LD_INT 28
7465: PUSH
7466: LD_INT 26
7468: PUSH
7469: LD_INT 30
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 43
7480: PUSH
7481: LD_INT 44
7483: PUSH
7484: LD_INT 46
7486: PUSH
7487: LD_INT 45
7489: PUSH
7490: LD_INT 47
7492: PUSH
7493: LD_INT 49
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: LD_VAR 0 11
7513: ARRAY
7514: ST_TO_ADDR
// for i in list do
7515: LD_ADDR_VAR 0 7
7519: PUSH
7520: LD_VAR 0 4
7524: PUSH
7525: FOR_IN
7526: IFFALSE 7559
// if not i in fac_list then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 16
7537: IN
7538: NOT
7539: IFFALSE 7557
// list := list diff i ;
7541: LD_ADDR_VAR 0 4
7545: PUSH
7546: LD_VAR 0 4
7550: PUSH
7551: LD_VAR 0 7
7555: DIFF
7556: ST_TO_ADDR
7557: GO 7525
7559: POP
7560: POP
// if not list then
7561: LD_VAR 0 4
7565: NOT
7566: IFFALSE 7570
// exit ;
7568: GO 8476
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7570: LD_VAR 0 11
7574: PUSH
7575: LD_INT 3
7577: EQUAL
7578: PUSH
7579: LD_INT 49
7581: PUSH
7582: LD_VAR 0 4
7586: IN
7587: AND
7588: PUSH
7589: LD_INT 31
7591: PPUSH
7592: LD_VAR 0 15
7596: PPUSH
7597: CALL_OW 321
7601: PUSH
7602: LD_INT 2
7604: EQUAL
7605: AND
7606: IFFALSE 7666
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7608: LD_INT 22
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 35
7622: PUSH
7623: LD_INT 49
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 91
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 10
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PPUSH
7651: CALL_OW 69
7655: NOT
7656: IFFALSE 7666
// weapon := ru_time_lapser ;
7658: LD_ADDR_VAR 0 17
7662: PUSH
7663: LD_INT 49
7665: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7666: LD_VAR 0 11
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: IN
7681: PUSH
7682: LD_INT 11
7684: PUSH
7685: LD_VAR 0 4
7689: IN
7690: PUSH
7691: LD_INT 30
7693: PUSH
7694: LD_VAR 0 4
7698: IN
7699: OR
7700: AND
7701: PUSH
7702: LD_INT 6
7704: PPUSH
7705: LD_VAR 0 15
7709: PPUSH
7710: CALL_OW 321
7714: PUSH
7715: LD_INT 2
7717: EQUAL
7718: AND
7719: IFFALSE 7884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7721: LD_INT 22
7723: PUSH
7724: LD_VAR 0 15
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 2
7735: PUSH
7736: LD_INT 35
7738: PUSH
7739: LD_INT 11
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 35
7748: PUSH
7749: LD_INT 30
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 91
7763: PUSH
7764: LD_VAR 0 1
7768: PUSH
7769: LD_INT 18
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: NOT
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_VAR 0 15
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: LD_INT 32
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 30
7815: PUSH
7816: LD_INT 33
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 91
7830: PUSH
7831: LD_VAR 0 1
7835: PUSH
7836: LD_INT 12
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: PUSH
7857: LD_INT 2
7859: GREATER
7860: AND
7861: IFFALSE 7884
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7863: LD_ADDR_VAR 0 17
7867: PUSH
7868: LD_INT 11
7870: PUSH
7871: LD_INT 30
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_VAR 0 11
7882: ARRAY
7883: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7884: LD_VAR 0 17
7888: NOT
7889: PUSH
7890: LD_INT 40
7892: PPUSH
7893: LD_VAR 0 15
7897: PPUSH
7898: CALL_OW 321
7902: PUSH
7903: LD_INT 2
7905: EQUAL
7906: AND
7907: PUSH
7908: LD_INT 7
7910: PUSH
7911: LD_VAR 0 4
7915: IN
7916: PUSH
7917: LD_INT 28
7919: PUSH
7920: LD_VAR 0 4
7924: IN
7925: OR
7926: PUSH
7927: LD_INT 45
7929: PUSH
7930: LD_VAR 0 4
7934: IN
7935: OR
7936: AND
7937: IFFALSE 8191
// begin hex := _GetHexInfo ( x , y ) ;
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_VAR 0 9
7948: PPUSH
7949: LD_VAR 0 10
7953: PPUSH
7954: CALL 1965 0 2
7958: ST_TO_ADDR
// if hex [ 1 ] then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: IFFALSE 7971
// exit ;
7969: GO 8476
// height := hex [ 2 ] ;
7971: LD_ADDR_VAR 0 14
7975: PUSH
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 2
7983: ARRAY
7984: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7985: LD_ADDR_VAR 0 13
7989: PUSH
7990: LD_INT 0
7992: PUSH
7993: LD_INT 2
7995: PUSH
7996: LD_INT 3
7998: PUSH
7999: LD_INT 5
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// for i in tmp do
8008: LD_ADDR_VAR 0 7
8012: PUSH
8013: LD_VAR 0 13
8017: PUSH
8018: FOR_IN
8019: IFFALSE 8189
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
8021: LD_ADDR_VAR 0 8
8025: PUSH
8026: LD_VAR 0 9
8030: PPUSH
8031: LD_VAR 0 7
8035: PPUSH
8036: LD_INT 5
8038: PPUSH
8039: CALL_OW 272
8043: PUSH
8044: LD_VAR 0 10
8048: PPUSH
8049: LD_VAR 0 7
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: CALL_OW 273
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8066: LD_VAR 0 8
8070: PUSH
8071: LD_INT 1
8073: ARRAY
8074: PPUSH
8075: LD_VAR 0 8
8079: PUSH
8080: LD_INT 2
8082: ARRAY
8083: PPUSH
8084: CALL_OW 488
8088: IFFALSE 8187
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8090: LD_ADDR_VAR 0 3
8094: PUSH
8095: LD_VAR 0 8
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: LD_VAR 0 8
8108: PUSH
8109: LD_INT 2
8111: ARRAY
8112: PPUSH
8113: CALL 1965 0 2
8117: ST_TO_ADDR
// if hex [ 1 ] then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: IFFALSE 8130
// continue ;
8128: GO 8018
// h := hex [ 2 ] ;
8130: LD_ADDR_VAR 0 12
8134: PUSH
8135: LD_VAR 0 3
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: ST_TO_ADDR
// if h + 7 < height then
8144: LD_VAR 0 12
8148: PUSH
8149: LD_INT 7
8151: PLUS
8152: PUSH
8153: LD_VAR 0 14
8157: LESS
8158: IFFALSE 8187
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8160: LD_ADDR_VAR 0 17
8164: PUSH
8165: LD_INT 7
8167: PUSH
8168: LD_INT 28
8170: PUSH
8171: LD_INT 45
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: PUSH
8179: LD_VAR 0 11
8183: ARRAY
8184: ST_TO_ADDR
// break ;
8185: GO 8189
// end ; end ; end ;
8187: GO 8018
8189: POP
8190: POP
// end ; if not weapon then
8191: LD_VAR 0 17
8195: NOT
8196: IFFALSE 8358
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8198: LD_ADDR_VAR 0 4
8202: PUSH
8203: LD_VAR 0 4
8207: PUSH
8208: LD_INT 11
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 49
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: DIFF
8222: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8223: LD_ADDR_VAR 0 17
8227: PUSH
8228: LD_VAR 0 4
8232: PUSH
8233: LD_INT 1
8235: PPUSH
8236: LD_VAR 0 4
8240: PPUSH
8241: CALL_OW 12
8245: ARRAY
8246: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8247: LD_ADDR_VAR 0 13
8251: PUSH
8252: LD_INT 22
8254: PUSH
8255: LD_VAR 0 15
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: LD_INT 35
8269: PUSH
8270: LD_INT 0
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PPUSH
8285: CALL_OW 69
8289: ST_TO_ADDR
// for i in tmp do
8290: LD_ADDR_VAR 0 7
8294: PUSH
8295: LD_VAR 0 13
8299: PUSH
8300: FOR_IN
8301: IFFALSE 8326
// list := list diff GetBWeapon ( i ) ;
8303: LD_ADDR_VAR 0 4
8307: PUSH
8308: LD_VAR 0 4
8312: PUSH
8313: LD_VAR 0 7
8317: PPUSH
8318: CALL_OW 269
8322: DIFF
8323: ST_TO_ADDR
8324: GO 8300
8326: POP
8327: POP
// if list then
8328: LD_VAR 0 4
8332: IFFALSE 8358
// weapon := list [ rand ( 1 , list ) ] ;
8334: LD_ADDR_VAR 0 17
8338: PUSH
8339: LD_VAR 0 4
8343: PUSH
8344: LD_INT 1
8346: PPUSH
8347: LD_VAR 0 4
8351: PPUSH
8352: CALL_OW 12
8356: ARRAY
8357: ST_TO_ADDR
// end ; if weapon then
8358: LD_VAR 0 17
8362: IFFALSE 8476
// begin tmp := CostOfWeapon ( weapon ) ;
8364: LD_ADDR_VAR 0 13
8368: PUSH
8369: LD_VAR 0 17
8373: PPUSH
8374: CALL_OW 451
8378: ST_TO_ADDR
// j := GetBase ( tower ) ;
8379: LD_ADDR_VAR 0 8
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 274
8393: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8394: LD_VAR 0 8
8398: PPUSH
8399: LD_INT 1
8401: PPUSH
8402: CALL_OW 275
8406: PUSH
8407: LD_VAR 0 13
8411: PUSH
8412: LD_INT 1
8414: ARRAY
8415: GREATEREQUAL
8416: PUSH
8417: LD_VAR 0 8
8421: PPUSH
8422: LD_INT 2
8424: PPUSH
8425: CALL_OW 275
8429: PUSH
8430: LD_VAR 0 13
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: GREATEREQUAL
8439: AND
8440: PUSH
8441: LD_VAR 0 8
8445: PPUSH
8446: LD_INT 3
8448: PPUSH
8449: CALL_OW 275
8453: PUSH
8454: LD_VAR 0 13
8458: PUSH
8459: LD_INT 3
8461: ARRAY
8462: GREATEREQUAL
8463: AND
8464: IFFALSE 8476
// result := weapon ;
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 17
8475: ST_TO_ADDR
// end ; end ;
8476: LD_VAR 0 2
8480: RET
// export function Compare ( val1 , val2 ) ; begin
8481: LD_INT 0
8483: PPUSH
// if val1 = val2 then
8484: LD_VAR 0 1
8488: PUSH
8489: LD_VAR 0 2
8493: EQUAL
8494: IFFALSE 8506
// result := true else
8496: LD_ADDR_VAR 0 3
8500: PUSH
8501: LD_INT 1
8503: ST_TO_ADDR
8504: GO 8514
// result := false ;
8506: LD_ADDR_VAR 0 3
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// end ;
8514: LD_VAR 0 3
8518: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8519: LD_INT 0
8521: PPUSH
8522: PPUSH
// result := true ;
8523: LD_ADDR_VAR 0 3
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// if array1 = array2 then
8531: LD_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: EQUAL
8541: IFFALSE 8606
// begin for i = 1 to array1 do
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: DOUBLE
8549: LD_INT 1
8551: DEC
8552: ST_TO_ADDR
8553: LD_VAR 0 1
8557: PUSH
8558: FOR_TO
8559: IFFALSE 8602
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8561: LD_VAR 0 1
8565: PUSH
8566: LD_VAR 0 4
8570: ARRAY
8571: PPUSH
8572: LD_VAR 0 2
8576: PUSH
8577: LD_VAR 0 4
8581: ARRAY
8582: PPUSH
8583: CALL 8481 0 2
8587: NOT
8588: IFFALSE 8600
// begin result := false ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// break ;
8598: GO 8602
// end ;
8600: GO 8558
8602: POP
8603: POP
// end else
8604: GO 8614
// result := false ;
8606: LD_ADDR_VAR 0 3
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// end ;
8614: LD_VAR 0 3
8618: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
// pom := GetBase ( fac ) ;
8624: LD_ADDR_VAR 0 5
8628: PUSH
8629: LD_VAR 0 1
8633: PPUSH
8634: CALL_OW 274
8638: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8639: LD_ADDR_VAR 0 4
8643: PUSH
8644: LD_VAR 0 2
8648: PUSH
8649: LD_INT 1
8651: ARRAY
8652: PPUSH
8653: LD_VAR 0 2
8657: PUSH
8658: LD_INT 2
8660: ARRAY
8661: PPUSH
8662: LD_VAR 0 2
8666: PUSH
8667: LD_INT 3
8669: ARRAY
8670: PPUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 4
8678: ARRAY
8679: PPUSH
8680: CALL_OW 449
8684: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8685: LD_VAR 0 5
8689: PPUSH
8690: LD_INT 1
8692: PPUSH
8693: CALL_OW 275
8697: PUSH
8698: LD_VAR 0 4
8702: PUSH
8703: LD_INT 1
8705: ARRAY
8706: GREATEREQUAL
8707: PUSH
8708: LD_VAR 0 5
8712: PPUSH
8713: LD_INT 2
8715: PPUSH
8716: CALL_OW 275
8720: PUSH
8721: LD_VAR 0 4
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: GREATEREQUAL
8730: AND
8731: PUSH
8732: LD_VAR 0 5
8736: PPUSH
8737: LD_INT 3
8739: PPUSH
8740: CALL_OW 275
8744: PUSH
8745: LD_VAR 0 4
8749: PUSH
8750: LD_INT 3
8752: ARRAY
8753: GREATEREQUAL
8754: AND
8755: IFFALSE 8767
// result := true else
8757: LD_ADDR_VAR 0 3
8761: PUSH
8762: LD_INT 1
8764: ST_TO_ADDR
8765: GO 8775
// result := false ;
8767: LD_ADDR_VAR 0 3
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// end ;
8775: LD_VAR 0 3
8779: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8780: LD_INT 0
8782: PPUSH
8783: PPUSH
8784: PPUSH
8785: PPUSH
8786: PPUSH
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// result := false ;
8791: LD_ADDR_VAR 0 6
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8799: LD_VAR 0 1
8803: NOT
8804: PUSH
8805: LD_VAR 0 2
8809: NOT
8810: OR
8811: PUSH
8812: LD_VAR 0 5
8816: PUSH
8817: LD_INT 0
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: LD_INT 2
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: LD_INT 4
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: IN
8843: NOT
8844: OR
8845: PUSH
8846: LD_VAR 0 3
8850: PPUSH
8851: LD_VAR 0 4
8855: PPUSH
8856: CALL_OW 488
8860: NOT
8861: OR
8862: IFFALSE 8866
// exit ;
8864: GO 9540
// pom := GetBase ( bdepot ) ;
8866: LD_ADDR_VAR 0 9
8870: PUSH
8871: LD_VAR 0 1
8875: PPUSH
8876: CALL_OW 274
8880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8881: LD_ADDR_VAR 0 10
8885: PUSH
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 248
8900: PPUSH
8901: CALL_OW 450
8905: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8906: LD_VAR 0 9
8910: PPUSH
8911: LD_INT 1
8913: PPUSH
8914: CALL_OW 275
8918: PUSH
8919: LD_VAR 0 10
8923: PUSH
8924: LD_INT 1
8926: ARRAY
8927: GREATEREQUAL
8928: PUSH
8929: LD_VAR 0 9
8933: PPUSH
8934: LD_INT 2
8936: PPUSH
8937: CALL_OW 275
8941: PUSH
8942: LD_VAR 0 10
8946: PUSH
8947: LD_INT 2
8949: ARRAY
8950: GREATEREQUAL
8951: AND
8952: PUSH
8953: LD_VAR 0 9
8957: PPUSH
8958: LD_INT 3
8960: PPUSH
8961: CALL_OW 275
8965: PUSH
8966: LD_VAR 0 10
8970: PUSH
8971: LD_INT 3
8973: ARRAY
8974: GREATEREQUAL
8975: AND
8976: NOT
8977: IFFALSE 8981
// exit ;
8979: GO 9540
// if GetBType ( bdepot ) = b_depot then
8981: LD_VAR 0 1
8985: PPUSH
8986: CALL_OW 266
8990: PUSH
8991: LD_INT 0
8993: EQUAL
8994: IFFALSE 9006
// dist := 28 else
8996: LD_ADDR_VAR 0 13
9000: PUSH
9001: LD_INT 28
9003: ST_TO_ADDR
9004: GO 9014
// dist := 36 ;
9006: LD_ADDR_VAR 0 13
9010: PUSH
9011: LD_INT 36
9013: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
9014: LD_VAR 0 1
9018: PPUSH
9019: LD_VAR 0 3
9023: PPUSH
9024: LD_VAR 0 4
9028: PPUSH
9029: CALL_OW 297
9033: PUSH
9034: LD_VAR 0 13
9038: GREATER
9039: IFFALSE 9043
// exit ;
9041: GO 9540
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
9043: LD_ADDR_VAR 0 11
9047: PUSH
9048: LD_VAR 0 2
9052: PPUSH
9053: LD_VAR 0 3
9057: PPUSH
9058: LD_VAR 0 4
9062: PPUSH
9063: LD_VAR 0 5
9067: PPUSH
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 248
9077: PPUSH
9078: LD_INT 0
9080: PPUSH
9081: CALL 9545 0 6
9085: ST_TO_ADDR
// if not hexes then
9086: LD_VAR 0 11
9090: NOT
9091: IFFALSE 9095
// exit ;
9093: GO 9540
// hex := _GetHexInfo ( x , y ) ;
9095: LD_ADDR_VAR 0 14
9099: PUSH
9100: LD_VAR 0 3
9104: PPUSH
9105: LD_VAR 0 4
9109: PPUSH
9110: CALL 1965 0 2
9114: ST_TO_ADDR
// if hex [ 1 ] then
9115: LD_VAR 0 14
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: IFFALSE 9127
// exit ;
9125: GO 9540
// height := hex [ 2 ] ;
9127: LD_ADDR_VAR 0 12
9131: PUSH
9132: LD_VAR 0 14
9136: PUSH
9137: LD_INT 2
9139: ARRAY
9140: ST_TO_ADDR
// for i = 1 to hexes do
9141: LD_ADDR_VAR 0 7
9145: PUSH
9146: DOUBLE
9147: LD_INT 1
9149: DEC
9150: ST_TO_ADDR
9151: LD_VAR 0 11
9155: PUSH
9156: FOR_TO
9157: IFFALSE 9495
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9159: LD_VAR 0 11
9163: PUSH
9164: LD_VAR 0 7
9168: ARRAY
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_VAR 0 11
9178: PUSH
9179: LD_VAR 0 7
9183: ARRAY
9184: PUSH
9185: LD_INT 2
9187: ARRAY
9188: PPUSH
9189: CALL_OW 488
9193: NOT
9194: IFFALSE 9198
// continue ;
9196: GO 9156
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9198: LD_ADDR_VAR 0 8
9202: PUSH
9203: LD_VAR 0 11
9207: PUSH
9208: LD_VAR 0 7
9212: ARRAY
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: LD_VAR 0 11
9222: PUSH
9223: LD_VAR 0 7
9227: ARRAY
9228: PUSH
9229: LD_INT 2
9231: ARRAY
9232: PPUSH
9233: CALL 1965 0 2
9237: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9238: LD_VAR 0 8
9242: PUSH
9243: LD_INT 1
9245: ARRAY
9246: PUSH
9247: LD_VAR 0 8
9251: PUSH
9252: LD_INT 2
9254: ARRAY
9255: PUSH
9256: LD_VAR 0 12
9260: PUSH
9261: LD_INT 2
9263: PLUS
9264: GREATER
9265: OR
9266: PUSH
9267: LD_VAR 0 8
9271: PUSH
9272: LD_INT 2
9274: ARRAY
9275: PUSH
9276: LD_VAR 0 12
9280: PUSH
9281: LD_INT 2
9283: MINUS
9284: LESS
9285: OR
9286: PUSH
9287: LD_VAR 0 8
9291: PUSH
9292: LD_INT 3
9294: ARRAY
9295: PUSH
9296: LD_INT 0
9298: PUSH
9299: LD_INT 8
9301: PUSH
9302: LD_INT 9
9304: PUSH
9305: LD_INT 10
9307: PUSH
9308: LD_INT 11
9310: PUSH
9311: LD_INT 12
9313: PUSH
9314: LD_INT 13
9316: PUSH
9317: LD_INT 16
9319: PUSH
9320: LD_INT 17
9322: PUSH
9323: LD_INT 18
9325: PUSH
9326: LD_INT 19
9328: PUSH
9329: LD_INT 20
9331: PUSH
9332: LD_INT 21
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: IN
9350: NOT
9351: OR
9352: PUSH
9353: LD_VAR 0 8
9357: PUSH
9358: LD_INT 4
9360: ARRAY
9361: OR
9362: PUSH
9363: LD_VAR 0 8
9367: PUSH
9368: LD_INT 5
9370: ARRAY
9371: NOT
9372: OR
9373: PUSH
9374: LD_VAR 0 8
9378: PUSH
9379: LD_INT 6
9381: ARRAY
9382: PUSH
9383: LD_INT 1
9385: PUSH
9386: LD_INT 2
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: LD_INT 9
9394: PUSH
9395: LD_INT 10
9397: PUSH
9398: LD_INT 11
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: IN
9409: NOT
9410: OR
9411: PUSH
9412: LD_VAR 0 11
9416: PUSH
9417: LD_VAR 0 7
9421: ARRAY
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: PPUSH
9427: LD_VAR 0 11
9431: PUSH
9432: LD_VAR 0 7
9436: ARRAY
9437: PUSH
9438: LD_INT 2
9440: ARRAY
9441: PPUSH
9442: CALL_OW 428
9446: PUSH
9447: LD_INT 0
9449: GREATER
9450: OR
9451: PUSH
9452: LD_VAR 0 11
9456: PUSH
9457: LD_VAR 0 7
9461: ARRAY
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: PPUSH
9467: LD_VAR 0 11
9471: PUSH
9472: LD_VAR 0 7
9476: ARRAY
9477: PUSH
9478: LD_INT 2
9480: ARRAY
9481: PPUSH
9482: CALL_OW 351
9486: OR
9487: IFFALSE 9493
// exit ;
9489: POP
9490: POP
9491: GO 9540
// end ;
9493: GO 9156
9495: POP
9496: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9497: LD_VAR 0 1
9501: PPUSH
9502: CALL_OW 255
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_VAR 0 4
9516: PPUSH
9517: LD_INT 20
9519: PPUSH
9520: CALL 3700 0 4
9524: PUSH
9525: LD_INT 4
9527: ARRAY
9528: IFFALSE 9532
// exit ;
9530: GO 9540
// result := true ;
9532: LD_ADDR_VAR 0 6
9536: PUSH
9537: LD_INT 1
9539: ST_TO_ADDR
// end ;
9540: LD_VAR 0 6
9544: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9545: LD_INT 0
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
// result = [ ] ;
9605: LD_ADDR_VAR 0 7
9609: PUSH
9610: EMPTY
9611: ST_TO_ADDR
// temp_list = [ ] ;
9612: LD_ADDR_VAR 0 9
9616: PUSH
9617: EMPTY
9618: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9619: LD_VAR 0 4
9623: PUSH
9624: LD_INT 0
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: LD_INT 2
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: LD_INT 5
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: IN
9650: NOT
9651: PUSH
9652: LD_VAR 0 1
9656: PUSH
9657: LD_INT 0
9659: PUSH
9660: LD_INT 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: IN
9667: PUSH
9668: LD_VAR 0 5
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 3
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: IN
9687: NOT
9688: AND
9689: OR
9690: IFFALSE 9694
// exit ;
9692: GO 28079
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9694: LD_VAR 0 1
9698: PUSH
9699: LD_INT 6
9701: PUSH
9702: LD_INT 7
9704: PUSH
9705: LD_INT 8
9707: PUSH
9708: LD_INT 13
9710: PUSH
9711: LD_INT 12
9713: PUSH
9714: LD_INT 15
9716: PUSH
9717: LD_INT 11
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: LD_INT 10
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: IN
9737: IFFALSE 9747
// btype = b_lab ;
9739: LD_ADDR_VAR 0 1
9743: PUSH
9744: LD_INT 6
9746: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9747: LD_VAR 0 6
9751: PUSH
9752: LD_INT 0
9754: PUSH
9755: LD_INT 1
9757: PUSH
9758: LD_INT 2
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: IN
9766: NOT
9767: PUSH
9768: LD_VAR 0 1
9772: PUSH
9773: LD_INT 0
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: LD_INT 6
9787: PUSH
9788: LD_INT 36
9790: PUSH
9791: LD_INT 4
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: LD_INT 31
9799: PUSH
9800: LD_INT 32
9802: PUSH
9803: LD_INT 33
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: IN
9819: NOT
9820: PUSH
9821: LD_VAR 0 6
9825: PUSH
9826: LD_INT 1
9828: EQUAL
9829: AND
9830: OR
9831: PUSH
9832: LD_VAR 0 1
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: IN
9847: NOT
9848: PUSH
9849: LD_VAR 0 6
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: AND
9858: OR
9859: IFFALSE 9869
// mode = 0 ;
9861: LD_ADDR_VAR 0 6
9865: PUSH
9866: LD_INT 0
9868: ST_TO_ADDR
// case mode of 0 :
9869: LD_VAR 0 6
9873: PUSH
9874: LD_INT 0
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 21335
9882: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9883: LD_ADDR_VAR 0 11
9887: PUSH
9888: LD_INT 0
9890: PUSH
9891: LD_INT 0
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: LD_INT 1
9903: NEG
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: LD_INT 0
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: LD_INT 1
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 0
9931: PUSH
9932: LD_INT 1
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 1
9941: NEG
9942: PUSH
9943: LD_INT 0
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 1
9952: NEG
9953: PUSH
9954: LD_INT 1
9956: NEG
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 1
9964: NEG
9965: PUSH
9966: LD_INT 2
9968: NEG
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 0
9976: PUSH
9977: LD_INT 2
9979: NEG
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: LD_INT 1
9990: NEG
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 1
9998: PUSH
9999: LD_INT 2
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 0
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 1
10018: NEG
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 0
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 1
10049: NEG
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10076: LD_ADDR_VAR 0 12
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 0
10093: PUSH
10094: LD_INT 1
10096: NEG
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: LD_INT 0
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: LD_INT 1
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 0
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 1
10134: NEG
10135: PUSH
10136: LD_INT 0
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 1
10145: NEG
10146: PUSH
10147: LD_INT 1
10149: NEG
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: LD_INT 1
10160: NEG
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 2
10178: PUSH
10179: LD_INT 1
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 1
10188: NEG
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 2
10199: NEG
10200: PUSH
10201: LD_INT 0
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 2
10210: NEG
10211: PUSH
10212: LD_INT 1
10214: NEG
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 2
10222: NEG
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 3
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 3
10244: NEG
10245: PUSH
10246: LD_INT 1
10248: NEG
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10272: LD_ADDR_VAR 0 13
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: LD_INT 1
10292: NEG
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 1
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 1
10330: NEG
10331: PUSH
10332: LD_INT 0
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 1
10341: NEG
10342: PUSH
10343: LD_INT 1
10345: NEG
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 1
10353: NEG
10354: PUSH
10355: LD_INT 2
10357: NEG
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 2
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: LD_INT 2
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 1
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 2
10395: NEG
10396: PUSH
10397: LD_INT 1
10399: NEG
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 2
10407: NEG
10408: PUSH
10409: LD_INT 2
10411: NEG
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 2
10419: NEG
10420: PUSH
10421: LD_INT 3
10423: NEG
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 3
10431: NEG
10432: PUSH
10433: LD_INT 2
10435: NEG
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 3
10443: NEG
10444: PUSH
10445: LD_INT 3
10447: NEG
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10471: LD_ADDR_VAR 0 14
10475: PUSH
10476: LD_INT 0
10478: PUSH
10479: LD_INT 0
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 1
10491: NEG
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 1
10509: PUSH
10510: LD_INT 1
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: LD_INT 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 1
10529: NEG
10530: PUSH
10531: LD_INT 0
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 1
10540: NEG
10541: PUSH
10542: LD_INT 1
10544: NEG
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 1
10552: NEG
10553: PUSH
10554: LD_INT 2
10556: NEG
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 0
10564: PUSH
10565: LD_INT 2
10567: NEG
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 1
10575: PUSH
10576: LD_INT 1
10578: NEG
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 1
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 0
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 1
10606: NEG
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 1
10617: NEG
10618: PUSH
10619: LD_INT 3
10621: NEG
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 0
10629: PUSH
10630: LD_INT 3
10632: NEG
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: LD_INT 2
10643: NEG
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10667: LD_ADDR_VAR 0 15
10671: PUSH
10672: LD_INT 0
10674: PUSH
10675: LD_INT 0
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 1
10687: NEG
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: LD_INT 0
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 0
10715: PUSH
10716: LD_INT 1
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 1
10725: NEG
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 1
10736: NEG
10737: PUSH
10738: LD_INT 1
10740: NEG
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: LD_INT 1
10751: NEG
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 1
10779: NEG
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 2
10790: NEG
10791: PUSH
10792: LD_INT 0
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: NEG
10802: PUSH
10803: LD_INT 1
10805: NEG
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: LD_INT 1
10816: NEG
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: LD_INT 0
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10860: LD_ADDR_VAR 0 16
10864: PUSH
10865: LD_INT 0
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 0
10877: PUSH
10878: LD_INT 1
10880: NEG
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 0
10908: PUSH
10909: LD_INT 1
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 1
10918: NEG
10919: PUSH
10920: LD_INT 0
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 1
10929: NEG
10930: PUSH
10931: LD_INT 1
10933: NEG
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 1
10941: NEG
10942: PUSH
10943: LD_INT 2
10945: NEG
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 2
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 2
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 2
10983: NEG
10984: PUSH
10985: LD_INT 1
10987: NEG
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 2
10995: NEG
10996: PUSH
10997: LD_INT 2
10999: NEG
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 3
11007: PUSH
11008: LD_INT 2
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: LD_INT 3
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 2
11027: PUSH
11028: LD_INT 3
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11053: LD_ADDR_VAR 0 17
11057: PUSH
11058: LD_INT 0
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 0
11070: PUSH
11071: LD_INT 1
11073: NEG
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 0
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 1
11111: NEG
11112: PUSH
11113: LD_INT 0
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 1
11122: NEG
11123: PUSH
11124: LD_INT 1
11126: NEG
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 1
11134: NEG
11135: PUSH
11136: LD_INT 2
11138: NEG
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: LD_INT 2
11149: NEG
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: LD_INT 1
11160: NEG
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: LD_INT 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 1
11218: NEG
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 2
11229: NEG
11230: PUSH
11231: LD_INT 0
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 2
11240: NEG
11241: PUSH
11242: LD_INT 1
11244: NEG
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 2
11252: NEG
11253: PUSH
11254: LD_INT 2
11256: NEG
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11283: LD_ADDR_VAR 0 18
11287: PUSH
11288: LD_INT 0
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: LD_INT 1
11303: NEG
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 1
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: LD_INT 1
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 1
11341: NEG
11342: PUSH
11343: LD_INT 0
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 1
11352: NEG
11353: PUSH
11354: LD_INT 1
11356: NEG
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 1
11364: NEG
11365: PUSH
11366: LD_INT 2
11368: NEG
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 0
11376: PUSH
11377: LD_INT 2
11379: NEG
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: LD_INT 1
11390: NEG
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 2
11398: PUSH
11399: LD_INT 0
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 2
11408: PUSH
11409: LD_INT 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 1
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 1
11448: NEG
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 2
11459: NEG
11460: PUSH
11461: LD_INT 0
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 2
11470: NEG
11471: PUSH
11472: LD_INT 1
11474: NEG
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: NEG
11483: PUSH
11484: LD_INT 2
11486: NEG
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11513: LD_ADDR_VAR 0 19
11517: PUSH
11518: LD_INT 0
11520: PUSH
11521: LD_INT 0
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 0
11530: PUSH
11531: LD_INT 1
11533: NEG
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: LD_INT 0
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 1
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 0
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 1
11571: NEG
11572: PUSH
11573: LD_INT 0
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 1
11582: NEG
11583: PUSH
11584: LD_INT 1
11586: NEG
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 1
11594: NEG
11595: PUSH
11596: LD_INT 2
11598: NEG
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 0
11606: PUSH
11607: LD_INT 2
11609: NEG
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: LD_INT 1
11620: NEG
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 2
11628: PUSH
11629: LD_INT 0
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 2
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: LD_INT 2
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 0
11668: PUSH
11669: LD_INT 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 1
11678: NEG
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 2
11689: NEG
11690: PUSH
11691: LD_INT 0
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 2
11700: NEG
11701: PUSH
11702: LD_INT 1
11704: NEG
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: NEG
11713: PUSH
11714: LD_INT 2
11716: NEG
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11743: LD_ADDR_VAR 0 20
11747: PUSH
11748: LD_INT 0
11750: PUSH
11751: LD_INT 0
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 0
11760: PUSH
11761: LD_INT 1
11763: NEG
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 1
11771: PUSH
11772: LD_INT 0
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 1
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 0
11791: PUSH
11792: LD_INT 1
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 1
11801: NEG
11802: PUSH
11803: LD_INT 0
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: LD_INT 1
11812: NEG
11813: PUSH
11814: LD_INT 1
11816: NEG
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 1
11824: NEG
11825: PUSH
11826: LD_INT 2
11828: NEG
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: LD_INT 2
11839: NEG
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 1
11847: PUSH
11848: LD_INT 1
11850: NEG
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 0
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 1
11888: PUSH
11889: LD_INT 2
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 1
11908: NEG
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 2
11919: NEG
11920: PUSH
11921: LD_INT 0
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 2
11930: NEG
11931: PUSH
11932: LD_INT 1
11934: NEG
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: NEG
11943: PUSH
11944: LD_INT 2
11946: NEG
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11973: LD_ADDR_VAR 0 21
11977: PUSH
11978: LD_INT 0
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 0
11990: PUSH
11991: LD_INT 1
11993: NEG
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: LD_INT 0
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 1
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 0
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 1
12031: NEG
12032: PUSH
12033: LD_INT 0
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 1
12042: NEG
12043: PUSH
12044: LD_INT 1
12046: NEG
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 1
12054: NEG
12055: PUSH
12056: LD_INT 2
12058: NEG
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: LD_INT 2
12069: NEG
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: LD_INT 1
12080: NEG
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: LD_INT 0
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 0
12128: PUSH
12129: LD_INT 2
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 1
12138: NEG
12139: PUSH
12140: LD_INT 1
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 2
12149: NEG
12150: PUSH
12151: LD_INT 0
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 2
12160: NEG
12161: PUSH
12162: LD_INT 1
12164: NEG
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 2
12172: NEG
12173: PUSH
12174: LD_INT 2
12176: NEG
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12203: LD_ADDR_VAR 0 22
12207: PUSH
12208: LD_INT 0
12210: PUSH
12211: LD_INT 0
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 0
12220: PUSH
12221: LD_INT 1
12223: NEG
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: LD_INT 0
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: LD_INT 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 1
12261: NEG
12262: PUSH
12263: LD_INT 0
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 1
12272: NEG
12273: PUSH
12274: LD_INT 1
12276: NEG
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 1
12284: NEG
12285: PUSH
12286: LD_INT 2
12288: NEG
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: LD_INT 2
12299: NEG
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: LD_INT 1
12310: NEG
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: LD_INT 0
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 0
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 1
12368: NEG
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 2
12379: NEG
12380: PUSH
12381: LD_INT 0
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 2
12390: NEG
12391: PUSH
12392: LD_INT 1
12394: NEG
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 2
12402: NEG
12403: PUSH
12404: LD_INT 2
12406: NEG
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12433: LD_ADDR_VAR 0 23
12437: PUSH
12438: LD_INT 0
12440: PUSH
12441: LD_INT 0
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 0
12450: PUSH
12451: LD_INT 1
12453: NEG
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: LD_INT 0
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: LD_INT 1
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 0
12481: PUSH
12482: LD_INT 1
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 1
12491: NEG
12492: PUSH
12493: LD_INT 0
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 1
12502: NEG
12503: PUSH
12504: LD_INT 1
12506: NEG
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 1
12514: NEG
12515: PUSH
12516: LD_INT 2
12518: NEG
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: LD_INT 2
12529: NEG
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: LD_INT 1
12540: NEG
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: LD_INT 0
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 2
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 1
12598: NEG
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 2
12609: NEG
12610: PUSH
12611: LD_INT 0
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: NEG
12621: PUSH
12622: LD_INT 1
12624: NEG
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 2
12632: NEG
12633: PUSH
12634: LD_INT 2
12636: NEG
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 2
12644: NEG
12645: PUSH
12646: LD_INT 3
12648: NEG
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 1
12656: NEG
12657: PUSH
12658: LD_INT 3
12660: NEG
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: LD_INT 2
12671: NEG
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 1
12682: NEG
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12713: LD_ADDR_VAR 0 24
12717: PUSH
12718: LD_INT 0
12720: PUSH
12721: LD_INT 0
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 0
12730: PUSH
12731: LD_INT 1
12733: NEG
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: LD_INT 1
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 0
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 1
12771: NEG
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 1
12782: NEG
12783: PUSH
12784: LD_INT 1
12786: NEG
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 1
12794: NEG
12795: PUSH
12796: LD_INT 2
12798: NEG
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 0
12806: PUSH
12807: LD_INT 2
12809: NEG
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: LD_INT 1
12820: NEG
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: LD_INT 0
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 2
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 2
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 1
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 0
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 1
12878: NEG
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 2
12889: NEG
12890: PUSH
12891: LD_INT 0
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 2
12900: NEG
12901: PUSH
12902: LD_INT 1
12904: NEG
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: NEG
12913: PUSH
12914: LD_INT 2
12916: NEG
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: LD_INT 2
12927: NEG
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: LD_INT 1
12938: NEG
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 3
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12989: LD_ADDR_VAR 0 25
12993: PUSH
12994: LD_INT 0
12996: PUSH
12997: LD_INT 0
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 0
13006: PUSH
13007: LD_INT 1
13009: NEG
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: LD_INT 0
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 0
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 1
13047: NEG
13048: PUSH
13049: LD_INT 0
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 1
13058: NEG
13059: PUSH
13060: LD_INT 1
13062: NEG
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 1
13070: NEG
13071: PUSH
13072: LD_INT 2
13074: NEG
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 0
13082: PUSH
13083: LD_INT 2
13085: NEG
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 1
13093: PUSH
13094: LD_INT 1
13096: NEG
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: LD_INT 0
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 2
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 0
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 1
13154: NEG
13155: PUSH
13156: LD_INT 1
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 2
13165: NEG
13166: PUSH
13167: LD_INT 0
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 2
13176: NEG
13177: PUSH
13178: LD_INT 1
13180: NEG
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 2
13188: NEG
13189: PUSH
13190: LD_INT 2
13192: NEG
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 3
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 3
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: LD_INT 3
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13263: LD_ADDR_VAR 0 26
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 0
13280: PUSH
13281: LD_INT 1
13283: NEG
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: LD_INT 0
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: LD_INT 1
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 0
13311: PUSH
13312: LD_INT 1
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 1
13321: NEG
13322: PUSH
13323: LD_INT 0
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 1
13332: NEG
13333: PUSH
13334: LD_INT 1
13336: NEG
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 1
13344: NEG
13345: PUSH
13346: LD_INT 2
13348: NEG
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 0
13356: PUSH
13357: LD_INT 2
13359: NEG
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: LD_INT 1
13370: NEG
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 0
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 2
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 0
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 1
13428: NEG
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 2
13439: NEG
13440: PUSH
13441: LD_INT 0
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: NEG
13451: PUSH
13452: LD_INT 1
13454: NEG
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 2
13462: NEG
13463: PUSH
13464: LD_INT 2
13466: NEG
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 1
13484: PUSH
13485: LD_INT 3
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 1
13494: NEG
13495: PUSH
13496: LD_INT 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 2
13505: NEG
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13539: LD_ADDR_VAR 0 27
13543: PUSH
13544: LD_INT 0
13546: PUSH
13547: LD_INT 0
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: LD_INT 1
13559: NEG
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 1
13567: PUSH
13568: LD_INT 0
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: LD_INT 1
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 1
13597: NEG
13598: PUSH
13599: LD_INT 0
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 1
13608: NEG
13609: PUSH
13610: LD_INT 1
13612: NEG
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 1
13620: NEG
13621: PUSH
13622: LD_INT 2
13624: NEG
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 0
13632: PUSH
13633: LD_INT 2
13635: NEG
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: LD_INT 1
13646: NEG
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 0
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 1
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 1
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 0
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 1
13704: NEG
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 2
13715: NEG
13716: PUSH
13717: LD_INT 0
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 2
13726: NEG
13727: PUSH
13728: LD_INT 1
13730: NEG
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 2
13738: NEG
13739: PUSH
13740: LD_INT 2
13742: NEG
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 1
13750: NEG
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 2
13761: NEG
13762: PUSH
13763: LD_INT 1
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 3
13772: NEG
13773: PUSH
13774: LD_INT 1
13776: NEG
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 3
13784: NEG
13785: PUSH
13786: LD_INT 2
13788: NEG
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13819: LD_ADDR_VAR 0 28
13823: PUSH
13824: LD_INT 0
13826: PUSH
13827: LD_INT 0
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 0
13836: PUSH
13837: LD_INT 1
13839: NEG
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: LD_INT 0
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 1
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 1
13877: NEG
13878: PUSH
13879: LD_INT 0
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 1
13888: NEG
13889: PUSH
13890: LD_INT 1
13892: NEG
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 1
13900: NEG
13901: PUSH
13902: LD_INT 2
13904: NEG
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 0
13912: PUSH
13913: LD_INT 2
13915: NEG
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 1
13923: PUSH
13924: LD_INT 1
13926: NEG
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 2
13934: PUSH
13935: LD_INT 0
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 2
13944: PUSH
13945: LD_INT 1
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 2
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 1
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 1
13984: NEG
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 2
13995: NEG
13996: PUSH
13997: LD_INT 0
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 2
14006: NEG
14007: PUSH
14008: LD_INT 1
14010: NEG
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 2
14018: NEG
14019: PUSH
14020: LD_INT 2
14022: NEG
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 2
14030: NEG
14031: PUSH
14032: LD_INT 3
14034: NEG
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 1
14042: NEG
14043: PUSH
14044: LD_INT 3
14046: NEG
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 3
14054: NEG
14055: PUSH
14056: LD_INT 1
14058: NEG
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 3
14066: NEG
14067: PUSH
14068: LD_INT 2
14070: NEG
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14101: LD_ADDR_VAR 0 29
14105: PUSH
14106: LD_INT 0
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: LD_INT 0
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 1
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 0
14149: PUSH
14150: LD_INT 1
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 1
14159: NEG
14160: PUSH
14161: LD_INT 0
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 1
14170: NEG
14171: PUSH
14172: LD_INT 1
14174: NEG
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 1
14182: NEG
14183: PUSH
14184: LD_INT 2
14186: NEG
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 0
14194: PUSH
14195: LD_INT 2
14197: NEG
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 1
14205: PUSH
14206: LD_INT 1
14208: NEG
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 0
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 2
14226: PUSH
14227: LD_INT 1
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 1
14256: NEG
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 2
14267: NEG
14268: PUSH
14269: LD_INT 1
14271: NEG
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 2
14279: NEG
14280: PUSH
14281: LD_INT 2
14283: NEG
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 2
14291: NEG
14292: PUSH
14293: LD_INT 3
14295: NEG
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: LD_INT 1
14306: NEG
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 3
14314: PUSH
14315: LD_INT 1
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 1
14334: NEG
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 3
14345: NEG
14346: PUSH
14347: LD_INT 2
14349: NEG
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14380: LD_ADDR_VAR 0 30
14384: PUSH
14385: LD_INT 0
14387: PUSH
14388: LD_INT 0
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 0
14397: PUSH
14398: LD_INT 1
14400: NEG
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: LD_INT 0
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 1
14438: NEG
14439: PUSH
14440: LD_INT 0
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 1
14449: NEG
14450: PUSH
14451: LD_INT 1
14453: NEG
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 1
14461: NEG
14462: PUSH
14463: LD_INT 2
14465: NEG
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 0
14473: PUSH
14474: LD_INT 2
14476: NEG
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 1
14484: PUSH
14485: LD_INT 1
14487: NEG
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 2
14495: PUSH
14496: LD_INT 0
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 2
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 1
14535: NEG
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 2
14546: NEG
14547: PUSH
14548: LD_INT 0
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 2
14557: NEG
14558: PUSH
14559: LD_INT 1
14561: NEG
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 1
14569: NEG
14570: PUSH
14571: LD_INT 3
14573: NEG
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: LD_INT 2
14584: NEG
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 3
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 2
14612: NEG
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 3
14623: NEG
14624: PUSH
14625: LD_INT 1
14627: NEG
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14658: LD_ADDR_VAR 0 31
14662: PUSH
14663: LD_INT 0
14665: PUSH
14666: LD_INT 0
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 0
14675: PUSH
14676: LD_INT 1
14678: NEG
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 0
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 1
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: LD_INT 1
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 1
14716: NEG
14717: PUSH
14718: LD_INT 0
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 1
14727: NEG
14728: PUSH
14729: LD_INT 1
14731: NEG
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 1
14739: NEG
14740: PUSH
14741: LD_INT 2
14743: NEG
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: LD_INT 1
14754: NEG
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 2
14762: PUSH
14763: LD_INT 0
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: LD_INT 1
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 0
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 1
14812: NEG
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 2
14823: NEG
14824: PUSH
14825: LD_INT 1
14827: NEG
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: NEG
14836: PUSH
14837: LD_INT 2
14839: NEG
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: NEG
14848: PUSH
14849: LD_INT 3
14851: NEG
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 1
14862: NEG
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: NEG
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 3
14901: NEG
14902: PUSH
14903: LD_INT 2
14905: NEG
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14936: LD_ADDR_VAR 0 32
14940: PUSH
14941: LD_INT 0
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 1
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 1
14994: NEG
14995: PUSH
14996: LD_INT 0
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 1
15005: NEG
15006: PUSH
15007: LD_INT 1
15009: NEG
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 2
15021: NEG
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 2
15032: NEG
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: LD_INT 1
15043: NEG
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 2
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 0
15081: PUSH
15082: LD_INT 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 1
15091: NEG
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 2
15102: NEG
15103: PUSH
15104: LD_INT 0
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 2
15113: NEG
15114: PUSH
15115: LD_INT 1
15117: NEG
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: NEG
15126: PUSH
15127: LD_INT 3
15129: NEG
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: LD_INT 2
15140: NEG
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 3
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 3
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 2
15168: NEG
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 3
15179: NEG
15180: PUSH
15181: LD_INT 1
15183: NEG
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15214: LD_ADDR_VAR 0 33
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 0
15231: PUSH
15232: LD_INT 1
15234: NEG
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: LD_INT 0
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 1
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 0
15262: PUSH
15263: LD_INT 1
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 1
15272: NEG
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 1
15283: NEG
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 1
15295: NEG
15296: PUSH
15297: LD_INT 2
15299: NEG
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: LD_INT 1
15310: NEG
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 0
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 1
15358: NEG
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 2
15369: NEG
15370: PUSH
15371: LD_INT 0
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 2
15380: NEG
15381: PUSH
15382: LD_INT 1
15384: NEG
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 2
15392: NEG
15393: PUSH
15394: LD_INT 2
15396: NEG
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 2
15404: NEG
15405: PUSH
15406: LD_INT 3
15408: NEG
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 1
15419: NEG
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 1
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 1
15447: NEG
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 3
15458: NEG
15459: PUSH
15460: LD_INT 2
15462: NEG
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15493: LD_ADDR_VAR 0 34
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 0
15510: PUSH
15511: LD_INT 1
15513: NEG
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 0
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 1
15551: NEG
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 1
15562: NEG
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: NEG
15575: PUSH
15576: LD_INT 2
15578: NEG
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 0
15586: PUSH
15587: LD_INT 2
15589: NEG
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 1
15600: NEG
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 1
15638: NEG
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 2
15649: NEG
15650: PUSH
15651: LD_INT 0
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 2
15660: NEG
15661: PUSH
15662: LD_INT 1
15664: NEG
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 2
15672: NEG
15673: PUSH
15674: LD_INT 2
15676: NEG
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 1
15684: NEG
15685: PUSH
15686: LD_INT 3
15688: NEG
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: LD_INT 2
15699: NEG
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 3
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 2
15727: NEG
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 3
15738: NEG
15739: PUSH
15740: LD_INT 1
15742: NEG
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15773: LD_ADDR_VAR 0 35
15777: PUSH
15778: LD_INT 0
15780: PUSH
15781: LD_INT 0
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: LD_INT 1
15793: NEG
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 0
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: LD_INT 1
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 0
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 1
15831: NEG
15832: PUSH
15833: LD_INT 0
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 1
15842: NEG
15843: PUSH
15844: LD_INT 1
15846: NEG
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 2
15864: NEG
15865: PUSH
15866: LD_INT 1
15868: NEG
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15885: LD_ADDR_VAR 0 36
15889: PUSH
15890: LD_INT 0
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 0
15902: PUSH
15903: LD_INT 1
15905: NEG
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: LD_INT 1
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: NEG
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 1
15954: NEG
15955: PUSH
15956: LD_INT 1
15958: NEG
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: LD_INT 2
15970: NEG
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15997: LD_ADDR_VAR 0 37
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 0
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 1
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 1
16055: NEG
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: NEG
16067: PUSH
16068: LD_INT 1
16070: NEG
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: LD_INT 1
16081: NEG
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: NEG
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16109: LD_ADDR_VAR 0 38
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: LD_INT 0
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: LD_INT 1
16129: NEG
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 0
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: NEG
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 1
16178: NEG
16179: PUSH
16180: LD_INT 1
16182: NEG
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 2
16200: NEG
16201: PUSH
16202: LD_INT 1
16204: NEG
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16221: LD_ADDR_VAR 0 39
16225: PUSH
16226: LD_INT 0
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: LD_INT 0
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 1
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 0
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 1
16279: NEG
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: NEG
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: LD_INT 2
16306: NEG
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: LD_INT 2
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16333: LD_ADDR_VAR 0 40
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16445: LD_ADDR_VAR 0 41
16449: PUSH
16450: LD_INT 0
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: LD_INT 1
16465: NEG
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: NEG
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 1
16526: NEG
16527: PUSH
16528: LD_INT 2
16530: NEG
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: LD_INT 1
16541: NEG
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: NEG
16612: PUSH
16613: LD_INT 1
16615: NEG
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 2
16623: NEG
16624: PUSH
16625: LD_INT 2
16627: NEG
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: NEG
16636: PUSH
16637: LD_INT 3
16639: NEG
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 1
16650: NEG
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 3
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 2
16708: NEG
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 3
16719: NEG
16720: PUSH
16721: LD_INT 0
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 3
16730: NEG
16731: PUSH
16732: LD_INT 1
16734: NEG
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 3
16742: NEG
16743: PUSH
16744: LD_INT 2
16746: NEG
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 3
16754: NEG
16755: PUSH
16756: LD_INT 3
16758: NEG
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16795: LD_ADDR_VAR 0 42
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 0
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: LD_INT 0
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: NEG
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: LD_INT 2
16880: NEG
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 0
16888: PUSH
16889: LD_INT 2
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: NEG
16951: PUSH
16952: LD_INT 1
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: LD_INT 1
16965: NEG
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 2
16973: NEG
16974: PUSH
16975: LD_INT 2
16977: NEG
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 2
16985: NEG
16986: PUSH
16987: LD_INT 3
16989: NEG
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 1
16997: NEG
16998: PUSH
16999: LD_INT 3
17001: NEG
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: LD_INT 3
17012: NEG
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 1
17020: PUSH
17021: LD_INT 2
17023: NEG
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 3
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 3
17041: PUSH
17042: LD_INT 3
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 3
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: LD_INT 3
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: LD_INT 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 3
17092: NEG
17093: PUSH
17094: LD_INT 2
17096: NEG
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 3
17104: NEG
17105: PUSH
17106: LD_INT 3
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17145: LD_ADDR_VAR 0 43
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: LD_INT 0
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: LD_INT 1
17218: NEG
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: LD_INT 2
17230: NEG
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: LD_INT 2
17241: NEG
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 2
17311: NEG
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 2
17322: NEG
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: NEG
17335: PUSH
17336: LD_INT 3
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 3
17349: NEG
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: NEG
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 1
17371: NEG
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 3
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: LD_INT 2
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 3
17441: NEG
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 3
17452: NEG
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17493: LD_ADDR_VAR 0 44
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 1
17513: NEG
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: LD_INT 1
17566: NEG
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: NEG
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 2
17648: NEG
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 2
17659: NEG
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: LD_INT 3
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 1
17698: NEG
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 3
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 2
17756: NEG
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 3
17767: NEG
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 3
17778: NEG
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 3
17790: NEG
17791: PUSH
17792: LD_INT 2
17794: NEG
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 3
17802: NEG
17803: PUSH
17804: LD_INT 3
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17843: LD_ADDR_VAR 0 45
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 0
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 2
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 2
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 2
18021: NEG
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 2
18033: NEG
18034: PUSH
18035: LD_INT 3
18037: NEG
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: LD_INT 3
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 3
18060: NEG
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 3
18079: PUSH
18080: LD_INT 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 3
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 3
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: LD_INT 3
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: LD_INT 3
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 3
18140: NEG
18141: PUSH
18142: LD_INT 2
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 3
18152: NEG
18153: PUSH
18154: LD_INT 3
18156: NEG
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18193: LD_ADDR_VAR 0 46
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 2
18278: NEG
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: LD_INT 2
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 2
18370: NEG
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: LD_INT 3
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 3
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 2
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 3
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 3
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: NEG
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 3
18500: NEG
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18541: LD_ADDR_VAR 0 47
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 2
18637: NEG
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 2
18668: NEG
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18692: LD_ADDR_VAR 0 48
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: NEG
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18839: LD_ADDR_VAR 0 49
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18983: LD_ADDR_VAR 0 50
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: LD_INT 0
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19127: LD_ADDR_VAR 0 51
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 2
19239: NEG
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: LD_INT 1
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19274: LD_ADDR_VAR 0 52
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19425: LD_ADDR_VAR 0 53
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: LD_INT 2
19510: NEG
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: LD_INT 2
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19655: LD_ADDR_VAR 0 54
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 2
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: NEG
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19885: LD_ADDR_VAR 0 55
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: NEG
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 2
19970: NEG
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: LD_INT 2
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: LD_INT 1
19992: NEG
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: NEG
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20115: LD_ADDR_VAR 0 56
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: LD_INT 2
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20345: LD_ADDR_VAR 0 57
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: NEG
20427: PUSH
20428: LD_INT 2
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: LD_INT 1
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 2
20544: NEG
20545: PUSH
20546: LD_INT 2
20548: NEG
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20575: LD_ADDR_VAR 0 58
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 2
20774: NEG
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20805: LD_ADDR_VAR 0 59
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20893: LD_ADDR_VAR 0 60
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: LD_INT 0
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20981: LD_ADDR_VAR 0 61
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 0
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21069: LD_ADDR_VAR 0 62
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21157: LD_ADDR_VAR 0 63
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21245: LD_ADDR_VAR 0 64
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: NEG
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: ST_TO_ADDR
// end ; 1 :
21333: GO 27230
21335: LD_INT 1
21337: DOUBLE
21338: EQUAL
21339: IFTRUE 21343
21341: GO 23966
21343: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21344: LD_ADDR_VAR 0 11
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: LD_INT 3
21355: NEG
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 3
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 2
21377: NEG
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21388: LD_ADDR_VAR 0 12
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 3
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 3
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21429: LD_ADDR_VAR 0 13
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 3
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21469: LD_ADDR_VAR 0 14
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 3
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21510: LD_ADDR_VAR 0 15
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21554: LD_ADDR_VAR 0 16
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: LD_INT 3
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 3
21573: NEG
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 3
21585: NEG
21586: PUSH
21587: LD_INT 3
21589: NEG
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21600: LD_ADDR_VAR 0 17
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: LD_INT 3
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 3
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21644: LD_ADDR_VAR 0 18
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 3
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21685: LD_ADDR_VAR 0 19
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: LD_INT 3
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 2
21712: PUSH
21713: LD_INT 3
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21725: LD_ADDR_VAR 0 20
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: LD_INT 3
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 3
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21766: LD_ADDR_VAR 0 21
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 3
21784: NEG
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21810: LD_ADDR_VAR 0 22
21814: PUSH
21815: LD_INT 2
21817: NEG
21818: PUSH
21819: LD_INT 3
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: NEG
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: LD_INT 3
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21856: LD_ADDR_VAR 0 23
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: LD_INT 3
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 1
21874: NEG
21875: PUSH
21876: LD_INT 4
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: LD_INT 3
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21900: LD_ADDR_VAR 0 24
21904: PUSH
21905: LD_INT 3
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 4
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21941: LD_ADDR_VAR 0 25
21945: PUSH
21946: LD_INT 3
21948: PUSH
21949: LD_INT 3
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 4
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 4
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21981: LD_ADDR_VAR 0 26
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 4
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
22022: LD_ADDR_VAR 0 27
22026: PUSH
22027: LD_INT 3
22029: NEG
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 4
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22066: LD_ADDR_VAR 0 28
22070: PUSH
22071: LD_INT 3
22073: NEG
22074: PUSH
22075: LD_INT 3
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 3
22085: NEG
22086: PUSH
22087: LD_INT 4
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 4
22097: NEG
22098: PUSH
22099: LD_INT 3
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22112: LD_ADDR_VAR 0 29
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 3
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 3
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 2
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 4
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 4
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 3
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: LD_INT 5
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 5
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 4
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: LD_INT 6
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 6
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 5
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22267: LD_ADDR_VAR 0 30
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 3
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 3
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 4
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 4
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 4
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 5
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 6
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 6
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22410: LD_ADDR_VAR 0 31
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 4
22447: PUSH
22448: LD_INT 3
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 4
22457: PUSH
22458: LD_INT 4
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 3
22467: PUSH
22468: LD_INT 4
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 5
22477: PUSH
22478: LD_INT 4
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 5
22487: PUSH
22488: LD_INT 5
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 6
22507: PUSH
22508: LD_INT 5
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 6
22517: PUSH
22518: LD_INT 6
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 5
22527: PUSH
22528: LD_INT 6
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22549: LD_ADDR_VAR 0 32
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: LD_INT 3
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 4
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: LD_INT 4
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 5
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 0
22628: PUSH
22629: LD_INT 5
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: LD_INT 4
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: LD_INT 6
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: LD_INT 6
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 5
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22692: LD_ADDR_VAR 0 33
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 3
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 3
22733: NEG
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 4
22744: NEG
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 4
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 4
22767: NEG
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 5
22778: NEG
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 5
22789: NEG
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 5
22801: NEG
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 6
22812: NEG
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 6
22823: NEG
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22847: LD_ADDR_VAR 0 34
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: LD_INT 3
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 3
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 3
22878: NEG
22879: PUSH
22880: LD_INT 3
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 3
22890: NEG
22891: PUSH
22892: LD_INT 4
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 4
22902: NEG
22903: PUSH
22904: LD_INT 3
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 4
22914: NEG
22915: PUSH
22916: LD_INT 4
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 4
22926: NEG
22927: PUSH
22928: LD_INT 5
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 5
22938: NEG
22939: PUSH
22940: LD_INT 4
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 5
22950: NEG
22951: PUSH
22952: LD_INT 5
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 5
22962: NEG
22963: PUSH
22964: LD_INT 6
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 6
22974: NEG
22975: PUSH
22976: LD_INT 5
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 6
22986: NEG
22987: PUSH
22988: LD_INT 6
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
23010: LD_ADDR_VAR 0 41
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 3
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23054: LD_ADDR_VAR 0 42
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 3
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23095: LD_ADDR_VAR 0 43
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 3
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 3
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23135: LD_ADDR_VAR 0 44
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 3
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23176: LD_ADDR_VAR 0 45
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: NEG
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23220: LD_ADDR_VAR 0 46
23224: PUSH
23225: LD_INT 2
23227: NEG
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 3
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: NEG
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23266: LD_ADDR_VAR 0 47
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 3
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: LD_INT 3
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23299: LD_ADDR_VAR 0 48
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23330: LD_ADDR_VAR 0 49
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23359: LD_ADDR_VAR 0 50
23363: PUSH
23364: LD_INT 2
23366: PUSH
23367: LD_INT 3
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: LD_INT 3
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23388: LD_ADDR_VAR 0 51
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 2
23406: NEG
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23419: LD_ADDR_VAR 0 52
23423: PUSH
23424: LD_INT 3
23426: NEG
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 3
23438: NEG
23439: PUSH
23440: LD_INT 2
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23452: LD_ADDR_VAR 0 53
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: LD_INT 3
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 3
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 2
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23496: LD_ADDR_VAR 0 54
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23537: LD_ADDR_VAR 0 55
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 3
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23577: LD_ADDR_VAR 0 56
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: LD_INT 3
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23618: LD_ADDR_VAR 0 57
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 3
23647: NEG
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23662: LD_ADDR_VAR 0 58
23666: PUSH
23667: LD_INT 2
23669: NEG
23670: PUSH
23671: LD_INT 3
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: NEG
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 3
23693: NEG
23694: PUSH
23695: LD_INT 3
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23708: LD_ADDR_VAR 0 59
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23752: LD_ADDR_VAR 0 60
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23793: LD_ADDR_VAR 0 61
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 2
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23833: LD_ADDR_VAR 0 62
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23874: LD_ADDR_VAR 0 63
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23918: LD_ADDR_VAR 0 64
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: LD_INT 2
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: NEG
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
// end ; 2 :
23964: GO 27230
23966: LD_INT 2
23968: DOUBLE
23969: EQUAL
23970: IFTRUE 23974
23972: GO 27229
23974: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23975: LD_ADDR_VAR 0 29
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 4
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 5
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 5
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 4
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 3
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 3
24054: PUSH
24055: LD_INT 2
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 5
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 3
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 3
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 4
24095: PUSH
24096: LD_INT 3
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 4
24105: PUSH
24106: LD_INT 4
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 3
24115: PUSH
24116: LD_INT 4
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 4
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 2
24155: PUSH
24156: LD_INT 4
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: LD_INT 4
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: LD_INT 3
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 4
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 5
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 5
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 4
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: LD_INT 3
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: LD_INT 5
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: NEG
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 3
24269: NEG
24270: PUSH
24271: LD_INT 1
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 3
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 4
24314: NEG
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 4
24325: NEG
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 4
24337: NEG
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 4
24360: NEG
24361: PUSH
24362: LD_INT 4
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 4
24372: NEG
24373: PUSH
24374: LD_INT 5
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 3
24384: NEG
24385: PUSH
24386: LD_INT 4
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 3
24396: NEG
24397: PUSH
24398: LD_INT 3
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 4
24408: NEG
24409: PUSH
24410: LD_INT 3
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 5
24420: NEG
24421: PUSH
24422: LD_INT 4
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 5
24432: NEG
24433: PUSH
24434: LD_INT 5
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 3
24444: NEG
24445: PUSH
24446: LD_INT 5
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 5
24456: NEG
24457: PUSH
24458: LD_INT 3
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24513: LD_ADDR_VAR 0 30
24517: PUSH
24518: LD_INT 4
24520: PUSH
24521: LD_INT 4
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 3
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 5
24540: PUSH
24541: LD_INT 4
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 5
24550: PUSH
24551: LD_INT 5
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 4
24560: PUSH
24561: LD_INT 5
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: LD_INT 4
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 3
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 5
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 3
24600: PUSH
24601: LD_INT 5
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 3
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: LD_INT 4
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: LD_INT 4
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 4
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 4
24703: NEG
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 4
24714: NEG
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 3
24726: NEG
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 4
24748: NEG
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 5
24759: NEG
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 5
24770: NEG
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 5
24782: NEG
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 3
24794: NEG
24795: PUSH
24796: LD_INT 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 3
24805: NEG
24806: PUSH
24807: LD_INT 3
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: LD_INT 4
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: LD_INT 3
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 3
24853: NEG
24854: PUSH
24855: LD_INT 2
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 4
24865: NEG
24866: PUSH
24867: LD_INT 3
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 4
24877: NEG
24878: PUSH
24879: LD_INT 4
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: LD_INT 4
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 4
24901: NEG
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 4
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 5
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 4
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 3
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 3
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 4
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 5
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 2
24992: PUSH
24993: LD_INT 3
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 5
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25060: LD_ADDR_VAR 0 31
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 4
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 4
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 5
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 5
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: LD_INT 4
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 3
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 5
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 3
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 3
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 3
25205: NEG
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 4
25216: NEG
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 4
25227: NEG
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 4
25239: NEG
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: NEG
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 4
25262: NEG
25263: PUSH
25264: LD_INT 4
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 4
25274: NEG
25275: PUSH
25276: LD_INT 5
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 3
25286: NEG
25287: PUSH
25288: LD_INT 4
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 3
25298: NEG
25299: PUSH
25300: LD_INT 3
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 4
25310: NEG
25311: PUSH
25312: LD_INT 3
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 5
25322: NEG
25323: PUSH
25324: LD_INT 4
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 5
25334: NEG
25335: PUSH
25336: LD_INT 5
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 3
25346: NEG
25347: PUSH
25348: LD_INT 5
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 5
25358: NEG
25359: PUSH
25360: LD_INT 3
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 4
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: LD_INT 3
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 2
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 2
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 3
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: LD_INT 4
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 2
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: LD_INT 4
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 4
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 4
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 5
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 5
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 4
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 3
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: LD_INT 2
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 5
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25610: LD_ADDR_VAR 0 32
25614: PUSH
25615: LD_INT 4
25617: NEG
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 4
25628: NEG
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 4
25662: NEG
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 5
25673: NEG
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 5
25684: NEG
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 5
25696: NEG
25697: PUSH
25698: LD_INT 2
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 3
25708: NEG
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 3
25719: NEG
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 3
25731: NEG
25732: PUSH
25733: LD_INT 4
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: NEG
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 3
25767: NEG
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 4
25779: NEG
25780: PUSH
25781: LD_INT 3
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 4
25791: NEG
25792: PUSH
25793: LD_INT 4
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: NEG
25804: PUSH
25805: LD_INT 4
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 4
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: LD_INT 4
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 5
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 4
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 3
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 3
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 4
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 5
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 3
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: LD_INT 5
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 3
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 3
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 4
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 4
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 4
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 4
26022: PUSH
26023: LD_INT 4
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 4
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 5
26042: PUSH
26043: LD_INT 4
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 5
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 4
26062: PUSH
26063: LD_INT 5
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 4
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 5
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 5
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26157: LD_ADDR_VAR 0 33
26161: PUSH
26162: LD_INT 4
26164: NEG
26165: PUSH
26166: LD_INT 4
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 4
26176: NEG
26177: PUSH
26178: LD_INT 5
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 3
26188: NEG
26189: PUSH
26190: LD_INT 4
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 3
26200: NEG
26201: PUSH
26202: LD_INT 3
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 4
26212: NEG
26213: PUSH
26214: LD_INT 3
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 5
26224: NEG
26225: PUSH
26226: LD_INT 4
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 5
26236: NEG
26237: PUSH
26238: LD_INT 5
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 3
26248: NEG
26249: PUSH
26250: LD_INT 5
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 5
26260: NEG
26261: PUSH
26262: LD_INT 3
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 3
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 4
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 3
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 3
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 4
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: LD_INT 4
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 4
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 4
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 5
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 5
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 4
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 5
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 3
26467: PUSH
26468: LD_INT 3
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 4
26487: PUSH
26488: LD_INT 3
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 4
26497: PUSH
26498: LD_INT 4
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 3
26507: PUSH
26508: LD_INT 4
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 3
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 4
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 4
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 4
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: LD_INT 3
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 5
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 5
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 4
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 2
26629: PUSH
26630: LD_INT 5
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26695: LD_ADDR_VAR 0 34
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 4
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 5
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 4
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 3
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 3
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 4
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: LD_INT 5
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 3
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: LD_INT 5
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 3
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 4
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 4
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 4
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 4
26897: PUSH
26898: LD_INT 4
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 4
26907: PUSH
26908: LD_INT 3
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 5
26917: PUSH
26918: LD_INT 4
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 5
26927: PUSH
26928: LD_INT 5
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 4
26937: PUSH
26938: LD_INT 5
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 3
26947: PUSH
26948: LD_INT 4
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 3
26957: PUSH
26958: LD_INT 3
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 5
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: LD_INT 5
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 3
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 4
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 3
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 4
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 4
27080: NEG
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 4
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 3
27103: NEG
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 3
27114: NEG
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 4
27125: NEG
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 5
27136: NEG
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 5
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 5
27159: NEG
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 3
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
// end ; end ;
27227: GO 27230
27229: POP
// case btype of b_depot , b_warehouse :
27230: LD_VAR 0 1
27234: PUSH
27235: LD_INT 0
27237: DOUBLE
27238: EQUAL
27239: IFTRUE 27249
27241: LD_INT 1
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27450
27249: POP
// case nation of nation_american :
27250: LD_VAR 0 5
27254: PUSH
27255: LD_INT 1
27257: DOUBLE
27258: EQUAL
27259: IFTRUE 27263
27261: GO 27319
27263: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27264: LD_ADDR_VAR 0 9
27268: PUSH
27269: LD_VAR 0 11
27273: PUSH
27274: LD_VAR 0 12
27278: PUSH
27279: LD_VAR 0 13
27283: PUSH
27284: LD_VAR 0 14
27288: PUSH
27289: LD_VAR 0 15
27293: PUSH
27294: LD_VAR 0 16
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: LD_VAR 0 4
27311: PUSH
27312: LD_INT 1
27314: PLUS
27315: ARRAY
27316: ST_TO_ADDR
27317: GO 27448
27319: LD_INT 2
27321: DOUBLE
27322: EQUAL
27323: IFTRUE 27327
27325: GO 27383
27327: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27328: LD_ADDR_VAR 0 9
27332: PUSH
27333: LD_VAR 0 17
27337: PUSH
27338: LD_VAR 0 18
27342: PUSH
27343: LD_VAR 0 19
27347: PUSH
27348: LD_VAR 0 20
27352: PUSH
27353: LD_VAR 0 21
27357: PUSH
27358: LD_VAR 0 22
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: PUSH
27371: LD_VAR 0 4
27375: PUSH
27376: LD_INT 1
27378: PLUS
27379: ARRAY
27380: ST_TO_ADDR
27381: GO 27448
27383: LD_INT 3
27385: DOUBLE
27386: EQUAL
27387: IFTRUE 27391
27389: GO 27447
27391: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27392: LD_ADDR_VAR 0 9
27396: PUSH
27397: LD_VAR 0 23
27401: PUSH
27402: LD_VAR 0 24
27406: PUSH
27407: LD_VAR 0 25
27411: PUSH
27412: LD_VAR 0 26
27416: PUSH
27417: LD_VAR 0 27
27421: PUSH
27422: LD_VAR 0 28
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: PUSH
27435: LD_VAR 0 4
27439: PUSH
27440: LD_INT 1
27442: PLUS
27443: ARRAY
27444: ST_TO_ADDR
27445: GO 27448
27447: POP
27448: GO 27997
27450: LD_INT 2
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27464
27456: LD_INT 3
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27520
27464: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27465: LD_ADDR_VAR 0 9
27469: PUSH
27470: LD_VAR 0 29
27474: PUSH
27475: LD_VAR 0 30
27479: PUSH
27480: LD_VAR 0 31
27484: PUSH
27485: LD_VAR 0 32
27489: PUSH
27490: LD_VAR 0 33
27494: PUSH
27495: LD_VAR 0 34
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: PUSH
27508: LD_VAR 0 4
27512: PUSH
27513: LD_INT 1
27515: PLUS
27516: ARRAY
27517: ST_TO_ADDR
27518: GO 27997
27520: LD_INT 16
27522: DOUBLE
27523: EQUAL
27524: IFTRUE 27576
27526: LD_INT 17
27528: DOUBLE
27529: EQUAL
27530: IFTRUE 27576
27532: LD_INT 18
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27576
27538: LD_INT 19
27540: DOUBLE
27541: EQUAL
27542: IFTRUE 27576
27544: LD_INT 20
27546: DOUBLE
27547: EQUAL
27548: IFTRUE 27576
27550: LD_INT 21
27552: DOUBLE
27553: EQUAL
27554: IFTRUE 27576
27556: LD_INT 23
27558: DOUBLE
27559: EQUAL
27560: IFTRUE 27576
27562: LD_INT 24
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27576
27568: LD_INT 25
27570: DOUBLE
27571: EQUAL
27572: IFTRUE 27576
27574: GO 27632
27576: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27577: LD_ADDR_VAR 0 9
27581: PUSH
27582: LD_VAR 0 35
27586: PUSH
27587: LD_VAR 0 36
27591: PUSH
27592: LD_VAR 0 37
27596: PUSH
27597: LD_VAR 0 38
27601: PUSH
27602: LD_VAR 0 39
27606: PUSH
27607: LD_VAR 0 40
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: PUSH
27620: LD_VAR 0 4
27624: PUSH
27625: LD_INT 1
27627: PLUS
27628: ARRAY
27629: ST_TO_ADDR
27630: GO 27997
27632: LD_INT 6
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27688
27638: LD_INT 7
27640: DOUBLE
27641: EQUAL
27642: IFTRUE 27688
27644: LD_INT 8
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27688
27650: LD_INT 13
27652: DOUBLE
27653: EQUAL
27654: IFTRUE 27688
27656: LD_INT 12
27658: DOUBLE
27659: EQUAL
27660: IFTRUE 27688
27662: LD_INT 15
27664: DOUBLE
27665: EQUAL
27666: IFTRUE 27688
27668: LD_INT 11
27670: DOUBLE
27671: EQUAL
27672: IFTRUE 27688
27674: LD_INT 14
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27688
27680: LD_INT 10
27682: DOUBLE
27683: EQUAL
27684: IFTRUE 27688
27686: GO 27744
27688: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27689: LD_ADDR_VAR 0 9
27693: PUSH
27694: LD_VAR 0 41
27698: PUSH
27699: LD_VAR 0 42
27703: PUSH
27704: LD_VAR 0 43
27708: PUSH
27709: LD_VAR 0 44
27713: PUSH
27714: LD_VAR 0 45
27718: PUSH
27719: LD_VAR 0 46
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: PUSH
27732: LD_VAR 0 4
27736: PUSH
27737: LD_INT 1
27739: PLUS
27740: ARRAY
27741: ST_TO_ADDR
27742: GO 27997
27744: LD_INT 36
27746: DOUBLE
27747: EQUAL
27748: IFTRUE 27752
27750: GO 27808
27752: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27753: LD_ADDR_VAR 0 9
27757: PUSH
27758: LD_VAR 0 47
27762: PUSH
27763: LD_VAR 0 48
27767: PUSH
27768: LD_VAR 0 49
27772: PUSH
27773: LD_VAR 0 50
27777: PUSH
27778: LD_VAR 0 51
27782: PUSH
27783: LD_VAR 0 52
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: PUSH
27796: LD_VAR 0 4
27800: PUSH
27801: LD_INT 1
27803: PLUS
27804: ARRAY
27805: ST_TO_ADDR
27806: GO 27997
27808: LD_INT 4
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27834
27814: LD_INT 5
27816: DOUBLE
27817: EQUAL
27818: IFTRUE 27834
27820: LD_INT 34
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27834
27826: LD_INT 37
27828: DOUBLE
27829: EQUAL
27830: IFTRUE 27834
27832: GO 27890
27834: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27835: LD_ADDR_VAR 0 9
27839: PUSH
27840: LD_VAR 0 53
27844: PUSH
27845: LD_VAR 0 54
27849: PUSH
27850: LD_VAR 0 55
27854: PUSH
27855: LD_VAR 0 56
27859: PUSH
27860: LD_VAR 0 57
27864: PUSH
27865: LD_VAR 0 58
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: PUSH
27878: LD_VAR 0 4
27882: PUSH
27883: LD_INT 1
27885: PLUS
27886: ARRAY
27887: ST_TO_ADDR
27888: GO 27997
27890: LD_INT 31
27892: DOUBLE
27893: EQUAL
27894: IFTRUE 27940
27896: LD_INT 32
27898: DOUBLE
27899: EQUAL
27900: IFTRUE 27940
27902: LD_INT 33
27904: DOUBLE
27905: EQUAL
27906: IFTRUE 27940
27908: LD_INT 27
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27940
27914: LD_INT 26
27916: DOUBLE
27917: EQUAL
27918: IFTRUE 27940
27920: LD_INT 28
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27940
27926: LD_INT 29
27928: DOUBLE
27929: EQUAL
27930: IFTRUE 27940
27932: LD_INT 30
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 27996
27940: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27941: LD_ADDR_VAR 0 9
27945: PUSH
27946: LD_VAR 0 59
27950: PUSH
27951: LD_VAR 0 60
27955: PUSH
27956: LD_VAR 0 61
27960: PUSH
27961: LD_VAR 0 62
27965: PUSH
27966: LD_VAR 0 63
27970: PUSH
27971: LD_VAR 0 64
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: PUSH
27984: LD_VAR 0 4
27988: PUSH
27989: LD_INT 1
27991: PLUS
27992: ARRAY
27993: ST_TO_ADDR
27994: GO 27997
27996: POP
// temp_list2 = [ ] ;
27997: LD_ADDR_VAR 0 10
28001: PUSH
28002: EMPTY
28003: ST_TO_ADDR
// for i in temp_list do
28004: LD_ADDR_VAR 0 8
28008: PUSH
28009: LD_VAR 0 9
28013: PUSH
28014: FOR_IN
28015: IFFALSE 28067
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
28017: LD_ADDR_VAR 0 10
28021: PUSH
28022: LD_VAR 0 10
28026: PUSH
28027: LD_VAR 0 8
28031: PUSH
28032: LD_INT 1
28034: ARRAY
28035: PUSH
28036: LD_VAR 0 2
28040: PLUS
28041: PUSH
28042: LD_VAR 0 8
28046: PUSH
28047: LD_INT 2
28049: ARRAY
28050: PUSH
28051: LD_VAR 0 3
28055: PLUS
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: ADD
28064: ST_TO_ADDR
28065: GO 28014
28067: POP
28068: POP
// result = temp_list2 ;
28069: LD_ADDR_VAR 0 7
28073: PUSH
28074: LD_VAR 0 10
28078: ST_TO_ADDR
// end ;
28079: LD_VAR 0 7
28083: RET
// export function EnemyInRange ( unit , dist ) ; begin
28084: LD_INT 0
28086: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_VAR 0 1
28096: PPUSH
28097: CALL_OW 255
28101: PPUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 250
28111: PPUSH
28112: LD_VAR 0 1
28116: PPUSH
28117: CALL_OW 251
28121: PPUSH
28122: LD_VAR 0 2
28126: PPUSH
28127: CALL 3700 0 4
28131: PUSH
28132: LD_INT 4
28134: ARRAY
28135: ST_TO_ADDR
// end ;
28136: LD_VAR 0 3
28140: RET
// export function PlayerSeeMe ( unit ) ; begin
28141: LD_INT 0
28143: PPUSH
// result := See ( your_side , unit ) ;
28144: LD_ADDR_VAR 0 2
28148: PUSH
28149: LD_OWVAR 2
28153: PPUSH
28154: LD_VAR 0 1
28158: PPUSH
28159: CALL_OW 292
28163: ST_TO_ADDR
// end ;
28164: LD_VAR 0 2
28168: RET
// export function ReverseDir ( unit ) ; begin
28169: LD_INT 0
28171: PPUSH
// if not unit then
28172: LD_VAR 0 1
28176: NOT
28177: IFFALSE 28181
// exit ;
28179: GO 28227
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28181: LD_ADDR_VAR 0 2
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 4
28191: PUSH
28192: LD_INT 5
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 254
28221: PUSH
28222: LD_INT 1
28224: PLUS
28225: ARRAY
28226: ST_TO_ADDR
// end ;
28227: LD_VAR 0 2
28231: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
28236: PPUSH
28237: PPUSH
28238: PPUSH
// if not hexes then
28239: LD_VAR 0 2
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28396
// dist := 9999 ;
28248: LD_ADDR_VAR 0 5
28252: PUSH
28253: LD_INT 9999
28255: ST_TO_ADDR
// for i = 1 to hexes do
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: DOUBLE
28262: LD_INT 1
28264: DEC
28265: ST_TO_ADDR
28266: LD_VAR 0 2
28270: PUSH
28271: FOR_TO
28272: IFFALSE 28384
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28274: LD_VAR 0 1
28278: PPUSH
28279: LD_VAR 0 2
28283: PUSH
28284: LD_VAR 0 4
28288: ARRAY
28289: PUSH
28290: LD_INT 1
28292: ARRAY
28293: PPUSH
28294: LD_VAR 0 2
28298: PUSH
28299: LD_VAR 0 4
28303: ARRAY
28304: PUSH
28305: LD_INT 2
28307: ARRAY
28308: PPUSH
28309: CALL_OW 297
28313: PUSH
28314: LD_VAR 0 5
28318: LESS
28319: IFFALSE 28382
// begin hex := hexes [ i ] ;
28321: LD_ADDR_VAR 0 7
28325: PUSH
28326: LD_VAR 0 2
28330: PUSH
28331: LD_VAR 0 4
28335: ARRAY
28336: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28337: LD_ADDR_VAR 0 5
28341: PUSH
28342: LD_VAR 0 1
28346: PPUSH
28347: LD_VAR 0 2
28351: PUSH
28352: LD_VAR 0 4
28356: ARRAY
28357: PUSH
28358: LD_INT 1
28360: ARRAY
28361: PPUSH
28362: LD_VAR 0 2
28366: PUSH
28367: LD_VAR 0 4
28371: ARRAY
28372: PUSH
28373: LD_INT 2
28375: ARRAY
28376: PPUSH
28377: CALL_OW 297
28381: ST_TO_ADDR
// end ; end ;
28382: GO 28271
28384: POP
28385: POP
// result := hex ;
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_VAR 0 7
28395: ST_TO_ADDR
// end ;
28396: LD_VAR 0 3
28400: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28401: LD_INT 0
28403: PPUSH
28404: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28405: LD_VAR 0 1
28409: NOT
28410: PUSH
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 21
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 23
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 69
28444: IN
28445: NOT
28446: OR
28447: IFFALSE 28451
// exit ;
28449: GO 28498
// for i = 1 to 3 do
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: DOUBLE
28457: LD_INT 1
28459: DEC
28460: ST_TO_ADDR
28461: LD_INT 3
28463: PUSH
28464: FOR_TO
28465: IFFALSE 28496
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 250
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 251
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: CALL_OW 453
28494: GO 28464
28496: POP
28497: POP
// end ;
28498: LD_VAR 0 2
28502: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28503: LD_INT 0
28505: PPUSH
28506: PPUSH
28507: PPUSH
28508: PPUSH
28509: PPUSH
28510: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28511: LD_VAR 0 1
28515: NOT
28516: PUSH
28517: LD_VAR 0 2
28521: NOT
28522: OR
28523: PUSH
28524: LD_VAR 0 1
28528: PPUSH
28529: CALL_OW 314
28533: OR
28534: IFFALSE 28538
// exit ;
28536: GO 28979
// x := GetX ( enemy_unit ) ;
28538: LD_ADDR_VAR 0 7
28542: PUSH
28543: LD_VAR 0 2
28547: PPUSH
28548: CALL_OW 250
28552: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28553: LD_ADDR_VAR 0 8
28557: PUSH
28558: LD_VAR 0 2
28562: PPUSH
28563: CALL_OW 251
28567: ST_TO_ADDR
// if not x or not y then
28568: LD_VAR 0 7
28572: NOT
28573: PUSH
28574: LD_VAR 0 8
28578: NOT
28579: OR
28580: IFFALSE 28584
// exit ;
28582: GO 28979
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28584: LD_ADDR_VAR 0 6
28588: PUSH
28589: LD_VAR 0 7
28593: PPUSH
28594: LD_INT 0
28596: PPUSH
28597: LD_INT 4
28599: PPUSH
28600: CALL_OW 272
28604: PUSH
28605: LD_VAR 0 8
28609: PPUSH
28610: LD_INT 0
28612: PPUSH
28613: LD_INT 4
28615: PPUSH
28616: CALL_OW 273
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_VAR 0 7
28629: PPUSH
28630: LD_INT 1
28632: PPUSH
28633: LD_INT 4
28635: PPUSH
28636: CALL_OW 272
28640: PUSH
28641: LD_VAR 0 8
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: LD_INT 4
28651: PPUSH
28652: CALL_OW 273
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_VAR 0 7
28665: PPUSH
28666: LD_INT 2
28668: PPUSH
28669: LD_INT 4
28671: PPUSH
28672: CALL_OW 272
28676: PUSH
28677: LD_VAR 0 8
28681: PPUSH
28682: LD_INT 2
28684: PPUSH
28685: LD_INT 4
28687: PPUSH
28688: CALL_OW 273
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_VAR 0 7
28701: PPUSH
28702: LD_INT 3
28704: PPUSH
28705: LD_INT 4
28707: PPUSH
28708: CALL_OW 272
28712: PUSH
28713: LD_VAR 0 8
28717: PPUSH
28718: LD_INT 3
28720: PPUSH
28721: LD_INT 4
28723: PPUSH
28724: CALL_OW 273
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_VAR 0 7
28737: PPUSH
28738: LD_INT 4
28740: PPUSH
28741: LD_INT 4
28743: PPUSH
28744: CALL_OW 272
28748: PUSH
28749: LD_VAR 0 8
28753: PPUSH
28754: LD_INT 4
28756: PPUSH
28757: LD_INT 4
28759: PPUSH
28760: CALL_OW 273
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_VAR 0 7
28773: PPUSH
28774: LD_INT 5
28776: PPUSH
28777: LD_INT 4
28779: PPUSH
28780: CALL_OW 272
28784: PUSH
28785: LD_VAR 0 8
28789: PPUSH
28790: LD_INT 5
28792: PPUSH
28793: LD_INT 4
28795: PPUSH
28796: CALL_OW 273
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: ST_TO_ADDR
// for i = tmp downto 1 do
28813: LD_ADDR_VAR 0 4
28817: PUSH
28818: DOUBLE
28819: LD_VAR 0 6
28823: INC
28824: ST_TO_ADDR
28825: LD_INT 1
28827: PUSH
28828: FOR_DOWNTO
28829: IFFALSE 28930
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28831: LD_VAR 0 6
28835: PUSH
28836: LD_VAR 0 4
28840: ARRAY
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: LD_VAR 0 6
28850: PUSH
28851: LD_VAR 0 4
28855: ARRAY
28856: PUSH
28857: LD_INT 2
28859: ARRAY
28860: PPUSH
28861: CALL_OW 488
28865: NOT
28866: PUSH
28867: LD_VAR 0 6
28871: PUSH
28872: LD_VAR 0 4
28876: ARRAY
28877: PUSH
28878: LD_INT 1
28880: ARRAY
28881: PPUSH
28882: LD_VAR 0 6
28886: PUSH
28887: LD_VAR 0 4
28891: ARRAY
28892: PUSH
28893: LD_INT 2
28895: ARRAY
28896: PPUSH
28897: CALL_OW 428
28901: PUSH
28902: LD_INT 0
28904: NONEQUAL
28905: OR
28906: IFFALSE 28928
// tmp := Delete ( tmp , i ) ;
28908: LD_ADDR_VAR 0 6
28912: PUSH
28913: LD_VAR 0 6
28917: PPUSH
28918: LD_VAR 0 4
28922: PPUSH
28923: CALL_OW 3
28927: ST_TO_ADDR
28928: GO 28828
28930: POP
28931: POP
// j := GetClosestHex ( unit , tmp ) ;
28932: LD_ADDR_VAR 0 5
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: LD_VAR 0 6
28946: PPUSH
28947: CALL 28232 0 2
28951: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28952: LD_VAR 0 1
28956: PPUSH
28957: LD_VAR 0 5
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: PPUSH
28966: LD_VAR 0 5
28970: PUSH
28971: LD_INT 2
28973: ARRAY
28974: PPUSH
28975: CALL_OW 111
// end ;
28979: LD_VAR 0 3
28983: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28984: LD_INT 0
28986: PPUSH
28987: PPUSH
28988: PPUSH
28989: PPUSH
// uc_side = 0 ;
28990: LD_ADDR_OWVAR 20
28994: PUSH
28995: LD_INT 0
28997: ST_TO_ADDR
// uc_nation = 0 ;
28998: LD_ADDR_OWVAR 21
29002: PUSH
29003: LD_INT 0
29005: ST_TO_ADDR
// nat_area := natureArea ;
29006: LD_ADDR_VAR 0 4
29010: PUSH
29011: LD_INT 18
29013: ST_TO_ADDR
// InitHc ;
29014: CALL_OW 19
// for i = 1 to 4 do
29018: LD_ADDR_VAR 0 2
29022: PUSH
29023: DOUBLE
29024: LD_INT 1
29026: DEC
29027: ST_TO_ADDR
29028: LD_INT 4
29030: PUSH
29031: FOR_TO
29032: IFFALSE 29079
// begin hc_class = 18 ;
29034: LD_ADDR_OWVAR 28
29038: PUSH
29039: LD_INT 18
29041: ST_TO_ADDR
// hc_gallery =  ;
29042: LD_ADDR_OWVAR 33
29046: PUSH
29047: LD_STRING 
29049: ST_TO_ADDR
// animal := CreateHuman ;
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: CALL_OW 44
29059: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29060: LD_VAR 0 3
29064: PPUSH
29065: LD_VAR 0 4
29069: PPUSH
29070: LD_INT 0
29072: PPUSH
29073: CALL_OW 49
// end ;
29077: GO 29031
29079: POP
29080: POP
// for i = 1 to 3 do
29081: LD_ADDR_VAR 0 2
29085: PUSH
29086: DOUBLE
29087: LD_INT 1
29089: DEC
29090: ST_TO_ADDR
29091: LD_INT 3
29093: PUSH
29094: FOR_TO
29095: IFFALSE 29159
// begin hc_class = class_tiger ;
29097: LD_ADDR_OWVAR 28
29101: PUSH
29102: LD_INT 14
29104: ST_TO_ADDR
// hc_gallery =  ;
29105: LD_ADDR_OWVAR 33
29109: PUSH
29110: LD_STRING 
29112: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29113: LD_ADDR_OWVAR 35
29117: PUSH
29118: LD_INT 5
29120: NEG
29121: PPUSH
29122: LD_INT 5
29124: PPUSH
29125: CALL_OW 12
29129: ST_TO_ADDR
// animal := CreateHuman ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: CALL_OW 44
29139: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29140: LD_VAR 0 3
29144: PPUSH
29145: LD_VAR 0 4
29149: PPUSH
29150: LD_INT 0
29152: PPUSH
29153: CALL_OW 49
// end ;
29157: GO 29094
29159: POP
29160: POP
// for i = 1 to 5 do
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: DOUBLE
29167: LD_INT 1
29169: DEC
29170: ST_TO_ADDR
29171: LD_INT 5
29173: PUSH
29174: FOR_TO
29175: IFFALSE 29278
// begin hc_class = class_apeman ;
29177: LD_ADDR_OWVAR 28
29181: PUSH
29182: LD_INT 12
29184: ST_TO_ADDR
// hc_gallery =  ;
29185: LD_ADDR_OWVAR 33
29189: PUSH
29190: LD_STRING 
29192: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29193: LD_ADDR_OWVAR 35
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PPUSH
29202: LD_INT 2
29204: PPUSH
29205: CALL_OW 12
29209: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29210: LD_ADDR_OWVAR 31
29214: PUSH
29215: LD_INT 1
29217: PPUSH
29218: LD_INT 3
29220: PPUSH
29221: CALL_OW 12
29225: PUSH
29226: LD_INT 1
29228: PPUSH
29229: LD_INT 3
29231: PPUSH
29232: CALL_OW 12
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
// animal := CreateHuman ;
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: CALL_OW 44
29258: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29259: LD_VAR 0 3
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_INT 0
29271: PPUSH
29272: CALL_OW 49
// end ;
29276: GO 29174
29278: POP
29279: POP
// for i = 1 to 3 do
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: DOUBLE
29286: LD_INT 1
29288: DEC
29289: ST_TO_ADDR
29290: LD_INT 3
29292: PUSH
29293: FOR_TO
29294: IFFALSE 29341
// begin hc_class = 13 ;
29296: LD_ADDR_OWVAR 28
29300: PUSH
29301: LD_INT 13
29303: ST_TO_ADDR
// hc_gallery =  ;
29304: LD_ADDR_OWVAR 33
29308: PUSH
29309: LD_STRING 
29311: ST_TO_ADDR
// animal := CreateHuman ;
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: CALL_OW 44
29321: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29322: LD_VAR 0 3
29326: PPUSH
29327: LD_VAR 0 4
29331: PPUSH
29332: LD_INT 0
29334: PPUSH
29335: CALL_OW 49
// end ;
29339: GO 29293
29341: POP
29342: POP
// for i = 1 to 7 do
29343: LD_ADDR_VAR 0 2
29347: PUSH
29348: DOUBLE
29349: LD_INT 1
29351: DEC
29352: ST_TO_ADDR
29353: LD_INT 7
29355: PUSH
29356: FOR_TO
29357: IFFALSE 29402
// begin hc_class = 20 ;
29359: LD_ADDR_OWVAR 28
29363: PUSH
29364: LD_INT 20
29366: ST_TO_ADDR
// hc_gallery =  ;
29367: LD_ADDR_OWVAR 33
29371: PUSH
29372: LD_STRING 
29374: ST_TO_ADDR
// animal := CreateHuman ;
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: CALL_OW 44
29384: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29385: LD_VAR 0 3
29389: PPUSH
29390: LD_INT 19
29392: PPUSH
29393: LD_INT 0
29395: PPUSH
29396: CALL_OW 49
// end ;
29400: GO 29356
29402: POP
29403: POP
// end ;
29404: LD_VAR 0 1
29408: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29409: LD_INT 0
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
// if not list then
29439: LD_VAR 0 1
29443: NOT
29444: IFFALSE 29448
// exit ;
29446: GO 32641
// base := list [ 1 ] ;
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: ST_TO_ADDR
// group := list [ 2 ] ;
29462: LD_ADDR_VAR 0 4
29466: PUSH
29467: LD_VAR 0 1
29471: PUSH
29472: LD_INT 2
29474: ARRAY
29475: ST_TO_ADDR
// path := list [ 3 ] ;
29476: LD_ADDR_VAR 0 5
29480: PUSH
29481: LD_VAR 0 1
29485: PUSH
29486: LD_INT 3
29488: ARRAY
29489: ST_TO_ADDR
// flags := list [ 4 ] ;
29490: LD_ADDR_VAR 0 6
29494: PUSH
29495: LD_VAR 0 1
29499: PUSH
29500: LD_INT 4
29502: ARRAY
29503: ST_TO_ADDR
// mined := [ ] ;
29504: LD_ADDR_VAR 0 27
29508: PUSH
29509: EMPTY
29510: ST_TO_ADDR
// bombed := [ ] ;
29511: LD_ADDR_VAR 0 28
29515: PUSH
29516: EMPTY
29517: ST_TO_ADDR
// if not group or not path then
29518: LD_VAR 0 4
29522: NOT
29523: PUSH
29524: LD_VAR 0 5
29528: NOT
29529: OR
29530: IFFALSE 29534
// exit ;
29532: GO 32641
// if flags then
29534: LD_VAR 0 6
29538: IFFALSE 29682
// begin f_ignore_area := flags [ 1 ] ;
29540: LD_ADDR_VAR 0 17
29544: PUSH
29545: LD_VAR 0 6
29549: PUSH
29550: LD_INT 1
29552: ARRAY
29553: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29554: LD_ADDR_VAR 0 18
29558: PUSH
29559: LD_VAR 0 6
29563: PUSH
29564: LD_INT 2
29566: ARRAY
29567: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29568: LD_ADDR_VAR 0 19
29572: PUSH
29573: LD_VAR 0 6
29577: PUSH
29578: LD_INT 3
29580: ARRAY
29581: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29582: LD_ADDR_VAR 0 20
29586: PUSH
29587: LD_VAR 0 6
29591: PUSH
29592: LD_INT 4
29594: ARRAY
29595: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29596: LD_ADDR_VAR 0 21
29600: PUSH
29601: LD_VAR 0 6
29605: PUSH
29606: LD_INT 5
29608: ARRAY
29609: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29610: LD_ADDR_VAR 0 22
29614: PUSH
29615: LD_VAR 0 6
29619: PUSH
29620: LD_INT 6
29622: ARRAY
29623: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29624: LD_ADDR_VAR 0 23
29628: PUSH
29629: LD_VAR 0 6
29633: PUSH
29634: LD_INT 7
29636: ARRAY
29637: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29638: LD_ADDR_VAR 0 24
29642: PUSH
29643: LD_VAR 0 6
29647: PUSH
29648: LD_INT 8
29650: ARRAY
29651: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29652: LD_ADDR_VAR 0 25
29656: PUSH
29657: LD_VAR 0 6
29661: PUSH
29662: LD_INT 9
29664: ARRAY
29665: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29666: LD_ADDR_VAR 0 26
29670: PUSH
29671: LD_VAR 0 6
29675: PUSH
29676: LD_INT 10
29678: ARRAY
29679: ST_TO_ADDR
// end else
29680: GO 29762
// begin f_ignore_area := false ;
29682: LD_ADDR_VAR 0 17
29686: PUSH
29687: LD_INT 0
29689: ST_TO_ADDR
// f_capture := false ;
29690: LD_ADDR_VAR 0 18
29694: PUSH
29695: LD_INT 0
29697: ST_TO_ADDR
// f_ignore_civ := false ;
29698: LD_ADDR_VAR 0 19
29702: PUSH
29703: LD_INT 0
29705: ST_TO_ADDR
// f_murder := false ;
29706: LD_ADDR_VAR 0 20
29710: PUSH
29711: LD_INT 0
29713: ST_TO_ADDR
// f_mines := false ;
29714: LD_ADDR_VAR 0 21
29718: PUSH
29719: LD_INT 0
29721: ST_TO_ADDR
// f_repair := false ;
29722: LD_ADDR_VAR 0 22
29726: PUSH
29727: LD_INT 0
29729: ST_TO_ADDR
// f_heal := false ;
29730: LD_ADDR_VAR 0 23
29734: PUSH
29735: LD_INT 0
29737: ST_TO_ADDR
// f_spacetime := false ;
29738: LD_ADDR_VAR 0 24
29742: PUSH
29743: LD_INT 0
29745: ST_TO_ADDR
// f_attack_depot := false ;
29746: LD_ADDR_VAR 0 25
29750: PUSH
29751: LD_INT 0
29753: ST_TO_ADDR
// f_crawl := false ;
29754: LD_ADDR_VAR 0 26
29758: PUSH
29759: LD_INT 0
29761: ST_TO_ADDR
// end ; units_path := [ ] ;
29762: LD_ADDR_VAR 0 16
29766: PUSH
29767: EMPTY
29768: ST_TO_ADDR
// for i = 1 to group do
29769: LD_ADDR_VAR 0 7
29773: PUSH
29774: DOUBLE
29775: LD_INT 1
29777: DEC
29778: ST_TO_ADDR
29779: LD_VAR 0 4
29783: PUSH
29784: FOR_TO
29785: IFFALSE 29814
// begin units_path := Replace ( units_path , i , path ) ;
29787: LD_ADDR_VAR 0 16
29791: PUSH
29792: LD_VAR 0 16
29796: PPUSH
29797: LD_VAR 0 7
29801: PPUSH
29802: LD_VAR 0 5
29806: PPUSH
29807: CALL_OW 1
29811: ST_TO_ADDR
// end ;
29812: GO 29784
29814: POP
29815: POP
// repeat for i = group downto 1 do
29816: LD_ADDR_VAR 0 7
29820: PUSH
29821: DOUBLE
29822: LD_VAR 0 4
29826: INC
29827: ST_TO_ADDR
29828: LD_INT 1
29830: PUSH
29831: FOR_DOWNTO
29832: IFFALSE 32623
// begin tmp := [ ] ;
29834: LD_ADDR_VAR 0 14
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// attacking := false ;
29841: LD_ADDR_VAR 0 29
29845: PUSH
29846: LD_INT 0
29848: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29849: LD_VAR 0 4
29853: PUSH
29854: LD_VAR 0 7
29858: ARRAY
29859: PPUSH
29860: CALL_OW 301
29864: PUSH
29865: LD_VAR 0 4
29869: PUSH
29870: LD_VAR 0 7
29874: ARRAY
29875: NOT
29876: OR
29877: IFFALSE 29921
// begin group := Delete ( group , i ) ;
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: LD_VAR 0 7
29893: PPUSH
29894: CALL_OW 3
29898: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29899: LD_ADDR_VAR 0 16
29903: PUSH
29904: LD_VAR 0 16
29908: PPUSH
29909: LD_VAR 0 7
29913: PPUSH
29914: CALL_OW 3
29918: ST_TO_ADDR
// continue ;
29919: GO 29831
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29921: LD_VAR 0 4
29925: PUSH
29926: LD_VAR 0 7
29930: ARRAY
29931: PPUSH
29932: LD_INT 10
29934: PPUSH
29935: CALL 28084 0 2
29939: NOT
29940: PUSH
29941: LD_VAR 0 16
29945: PUSH
29946: LD_VAR 0 7
29950: ARRAY
29951: PUSH
29952: EMPTY
29953: EQUAL
29954: NOT
29955: AND
29956: IFFALSE 30240
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29958: LD_VAR 0 4
29962: PUSH
29963: LD_VAR 0 7
29967: ARRAY
29968: PPUSH
29969: CALL_OW 262
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: IN
29984: IFFALSE 30043
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29986: LD_VAR 0 4
29990: PUSH
29991: LD_VAR 0 7
29995: ARRAY
29996: PPUSH
29997: CALL_OW 261
30001: PUSH
30002: LD_INT 10
30004: LESS
30005: PUSH
30006: LD_VAR 0 4
30010: PUSH
30011: LD_VAR 0 7
30015: ARRAY
30016: PPUSH
30017: CALL 28141 0 1
30021: NOT
30022: AND
30023: IFFALSE 30043
// SetFuel ( group [ i ] , 12 ) ;
30025: LD_VAR 0 4
30029: PUSH
30030: LD_VAR 0 7
30034: ARRAY
30035: PPUSH
30036: LD_INT 12
30038: PPUSH
30039: CALL_OW 240
// if units_path [ i ] then
30043: LD_VAR 0 16
30047: PUSH
30048: LD_VAR 0 7
30052: ARRAY
30053: IFFALSE 30238
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30055: LD_VAR 0 4
30059: PUSH
30060: LD_VAR 0 7
30064: ARRAY
30065: PPUSH
30066: LD_VAR 0 16
30070: PUSH
30071: LD_VAR 0 7
30075: ARRAY
30076: PUSH
30077: LD_INT 1
30079: ARRAY
30080: PUSH
30081: LD_INT 1
30083: ARRAY
30084: PPUSH
30085: LD_VAR 0 16
30089: PUSH
30090: LD_VAR 0 7
30094: ARRAY
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PUSH
30100: LD_INT 2
30102: ARRAY
30103: PPUSH
30104: CALL_OW 297
30108: PUSH
30109: LD_INT 6
30111: GREATER
30112: IFFALSE 30187
// begin if not HasTask ( group [ i ] ) then
30114: LD_VAR 0 4
30118: PUSH
30119: LD_VAR 0 7
30123: ARRAY
30124: PPUSH
30125: CALL_OW 314
30129: NOT
30130: IFFALSE 30185
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30132: LD_VAR 0 4
30136: PUSH
30137: LD_VAR 0 7
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 16
30147: PUSH
30148: LD_VAR 0 7
30152: ARRAY
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: PPUSH
30162: LD_VAR 0 16
30166: PUSH
30167: LD_VAR 0 7
30171: ARRAY
30172: PUSH
30173: LD_INT 1
30175: ARRAY
30176: PUSH
30177: LD_INT 2
30179: ARRAY
30180: PPUSH
30181: CALL_OW 114
// end else
30185: GO 30238
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30187: LD_ADDR_VAR 0 15
30191: PUSH
30192: LD_VAR 0 16
30196: PUSH
30197: LD_VAR 0 7
30201: ARRAY
30202: PPUSH
30203: LD_INT 1
30205: PPUSH
30206: CALL_OW 3
30210: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30211: LD_ADDR_VAR 0 16
30215: PUSH
30216: LD_VAR 0 16
30220: PPUSH
30221: LD_VAR 0 7
30225: PPUSH
30226: LD_VAR 0 15
30230: PPUSH
30231: CALL_OW 1
30235: ST_TO_ADDR
// continue ;
30236: GO 29831
// end ; end ; end else
30238: GO 32621
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30240: LD_ADDR_VAR 0 14
30244: PUSH
30245: LD_INT 81
30247: PUSH
30248: LD_VAR 0 4
30252: PUSH
30253: LD_VAR 0 7
30257: ARRAY
30258: PPUSH
30259: CALL_OW 255
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PPUSH
30268: CALL_OW 69
30272: ST_TO_ADDR
// if not tmp then
30273: LD_VAR 0 14
30277: NOT
30278: IFFALSE 30282
// continue ;
30280: GO 29831
// if f_ignore_area then
30282: LD_VAR 0 17
30286: IFFALSE 30374
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30288: LD_ADDR_VAR 0 15
30292: PUSH
30293: LD_VAR 0 14
30297: PPUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 92
30303: PUSH
30304: LD_VAR 0 17
30308: PUSH
30309: LD_INT 1
30311: ARRAY
30312: PUSH
30313: LD_VAR 0 17
30317: PUSH
30318: LD_INT 2
30320: ARRAY
30321: PUSH
30322: LD_VAR 0 17
30326: PUSH
30327: LD_INT 3
30329: ARRAY
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 72
30345: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30346: LD_VAR 0 14
30350: PUSH
30351: LD_VAR 0 15
30355: DIFF
30356: IFFALSE 30374
// tmp := tmp diff tmp2 ;
30358: LD_ADDR_VAR 0 14
30362: PUSH
30363: LD_VAR 0 14
30367: PUSH
30368: LD_VAR 0 15
30372: DIFF
30373: ST_TO_ADDR
// end ; if not f_murder then
30374: LD_VAR 0 20
30378: NOT
30379: IFFALSE 30437
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30381: LD_ADDR_VAR 0 15
30385: PUSH
30386: LD_VAR 0 14
30390: PPUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 50
30396: PUSH
30397: EMPTY
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 72
30408: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30409: LD_VAR 0 14
30413: PUSH
30414: LD_VAR 0 15
30418: DIFF
30419: IFFALSE 30437
// tmp := tmp diff tmp2 ;
30421: LD_ADDR_VAR 0 14
30425: PUSH
30426: LD_VAR 0 14
30430: PUSH
30431: LD_VAR 0 15
30435: DIFF
30436: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30437: LD_ADDR_VAR 0 14
30441: PUSH
30442: LD_VAR 0 4
30446: PUSH
30447: LD_VAR 0 7
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 14
30457: PPUSH
30458: LD_INT 1
30460: PPUSH
30461: LD_INT 1
30463: PPUSH
30464: CALL 3239 0 4
30468: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30469: LD_VAR 0 4
30473: PUSH
30474: LD_VAR 0 7
30478: ARRAY
30479: PPUSH
30480: CALL_OW 257
30484: PUSH
30485: LD_INT 1
30487: EQUAL
30488: IFFALSE 30915
// begin if WantPlant ( group [ i ] ) then
30490: LD_VAR 0 4
30494: PUSH
30495: LD_VAR 0 7
30499: ARRAY
30500: PPUSH
30501: CALL 2707 0 1
30505: IFFALSE 30509
// continue ;
30507: GO 29831
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30509: LD_VAR 0 18
30513: PUSH
30514: LD_VAR 0 4
30518: PUSH
30519: LD_VAR 0 7
30523: ARRAY
30524: PPUSH
30525: CALL_OW 310
30529: NOT
30530: AND
30531: PUSH
30532: LD_VAR 0 14
30536: PUSH
30537: LD_INT 1
30539: ARRAY
30540: PUSH
30541: LD_VAR 0 14
30545: PPUSH
30546: LD_INT 21
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 58
30558: PUSH
30559: EMPTY
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PPUSH
30566: CALL_OW 72
30570: IN
30571: AND
30572: IFFALSE 30608
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30574: LD_VAR 0 4
30578: PUSH
30579: LD_VAR 0 7
30583: ARRAY
30584: PPUSH
30585: LD_VAR 0 14
30589: PUSH
30590: LD_INT 1
30592: ARRAY
30593: PPUSH
30594: CALL_OW 120
// attacking := true ;
30598: LD_ADDR_VAR 0 29
30602: PUSH
30603: LD_INT 1
30605: ST_TO_ADDR
// continue ;
30606: GO 29831
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30608: LD_VAR 0 26
30612: PUSH
30613: LD_VAR 0 4
30617: PUSH
30618: LD_VAR 0 7
30622: ARRAY
30623: PPUSH
30624: CALL_OW 256
30628: PUSH
30629: LD_INT 800
30631: LESS
30632: AND
30633: PUSH
30634: LD_VAR 0 4
30638: PUSH
30639: LD_VAR 0 7
30643: ARRAY
30644: PPUSH
30645: CALL_OW 318
30649: NOT
30650: AND
30651: IFFALSE 30668
// ComCrawl ( group [ i ] ) ;
30653: LD_VAR 0 4
30657: PUSH
30658: LD_VAR 0 7
30662: ARRAY
30663: PPUSH
30664: CALL_OW 137
// if f_mines then
30668: LD_VAR 0 21
30672: IFFALSE 30915
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30674: LD_VAR 0 14
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 247
30687: PUSH
30688: LD_INT 3
30690: EQUAL
30691: PUSH
30692: LD_VAR 0 14
30696: PUSH
30697: LD_INT 1
30699: ARRAY
30700: PUSH
30701: LD_VAR 0 27
30705: IN
30706: NOT
30707: AND
30708: IFFALSE 30915
// begin x := GetX ( tmp [ 1 ] ) ;
30710: LD_ADDR_VAR 0 10
30714: PUSH
30715: LD_VAR 0 14
30719: PUSH
30720: LD_INT 1
30722: ARRAY
30723: PPUSH
30724: CALL_OW 250
30728: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30729: LD_ADDR_VAR 0 11
30733: PUSH
30734: LD_VAR 0 14
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: CALL_OW 251
30747: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30748: LD_ADDR_VAR 0 12
30752: PUSH
30753: LD_VAR 0 4
30757: PUSH
30758: LD_VAR 0 7
30762: ARRAY
30763: PPUSH
30764: CALL 28169 0 1
30768: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30769: LD_VAR 0 4
30773: PUSH
30774: LD_VAR 0 7
30778: ARRAY
30779: PPUSH
30780: LD_VAR 0 10
30784: PPUSH
30785: LD_VAR 0 11
30789: PPUSH
30790: LD_VAR 0 14
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30803: LD_VAR 0 4
30807: PUSH
30808: LD_VAR 0 7
30812: ARRAY
30813: PPUSH
30814: LD_VAR 0 10
30818: PPUSH
30819: LD_VAR 0 12
30823: PPUSH
30824: LD_INT 7
30826: PPUSH
30827: CALL_OW 272
30831: PPUSH
30832: LD_VAR 0 11
30836: PPUSH
30837: LD_VAR 0 12
30841: PPUSH
30842: LD_INT 7
30844: PPUSH
30845: CALL_OW 273
30849: PPUSH
30850: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
30854: LD_VAR 0 4
30858: PUSH
30859: LD_VAR 0 7
30863: ARRAY
30864: PPUSH
30865: LD_INT 71
30867: PPUSH
30868: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30872: LD_ADDR_VAR 0 27
30876: PUSH
30877: LD_VAR 0 27
30881: PPUSH
30882: LD_VAR 0 27
30886: PUSH
30887: LD_INT 1
30889: PLUS
30890: PPUSH
30891: LD_VAR 0 14
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: PPUSH
30900: CALL_OW 1
30904: ST_TO_ADDR
// attacking := true ;
30905: LD_ADDR_VAR 0 29
30909: PUSH
30910: LD_INT 1
30912: ST_TO_ADDR
// continue ;
30913: GO 29831
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30915: LD_VAR 0 4
30919: PUSH
30920: LD_VAR 0 7
30924: ARRAY
30925: PPUSH
30926: CALL_OW 257
30930: PUSH
30931: LD_INT 17
30933: EQUAL
30934: IFFALSE 31062
// begin attacking := false ;
30936: LD_ADDR_VAR 0 29
30940: PUSH
30941: LD_INT 0
30943: ST_TO_ADDR
// k := 5 ;
30944: LD_ADDR_VAR 0 9
30948: PUSH
30949: LD_INT 5
30951: ST_TO_ADDR
// if tmp < k then
30952: LD_VAR 0 14
30956: PUSH
30957: LD_VAR 0 9
30961: LESS
30962: IFFALSE 30974
// k := tmp ;
30964: LD_ADDR_VAR 0 9
30968: PUSH
30969: LD_VAR 0 14
30973: ST_TO_ADDR
// for j = 1 to k do
30974: LD_ADDR_VAR 0 8
30978: PUSH
30979: DOUBLE
30980: LD_INT 1
30982: DEC
30983: ST_TO_ADDR
30984: LD_VAR 0 9
30988: PUSH
30989: FOR_TO
30990: IFFALSE 31060
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30992: LD_VAR 0 14
30996: PUSH
30997: LD_VAR 0 8
31001: ARRAY
31002: PUSH
31003: LD_VAR 0 14
31007: PPUSH
31008: LD_INT 58
31010: PUSH
31011: EMPTY
31012: LIST
31013: PPUSH
31014: CALL_OW 72
31018: IN
31019: NOT
31020: IFFALSE 31058
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31022: LD_VAR 0 4
31026: PUSH
31027: LD_VAR 0 7
31031: ARRAY
31032: PPUSH
31033: LD_VAR 0 14
31037: PUSH
31038: LD_VAR 0 8
31042: ARRAY
31043: PPUSH
31044: CALL_OW 115
// attacking := true ;
31048: LD_ADDR_VAR 0 29
31052: PUSH
31053: LD_INT 1
31055: ST_TO_ADDR
// continue ;
31056: GO 30989
// end ; end ;
31058: GO 30989
31060: POP
31061: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31062: LD_VAR 0 4
31066: PUSH
31067: LD_VAR 0 7
31071: ARRAY
31072: PPUSH
31073: CALL_OW 257
31077: PUSH
31078: LD_INT 8
31080: EQUAL
31081: PUSH
31082: LD_VAR 0 4
31086: PUSH
31087: LD_VAR 0 7
31091: ARRAY
31092: PPUSH
31093: CALL_OW 264
31097: PUSH
31098: LD_INT 28
31100: PUSH
31101: LD_INT 45
31103: PUSH
31104: LD_INT 7
31106: PUSH
31107: LD_INT 47
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: IN
31116: OR
31117: IFFALSE 31347
// begin attacking := false ;
31119: LD_ADDR_VAR 0 29
31123: PUSH
31124: LD_INT 0
31126: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31127: LD_VAR 0 14
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 266
31140: PUSH
31141: LD_INT 32
31143: PUSH
31144: LD_INT 31
31146: PUSH
31147: LD_INT 33
31149: PUSH
31150: LD_INT 4
31152: PUSH
31153: LD_INT 5
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: IN
31163: IFFALSE 31347
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31165: LD_ADDR_VAR 0 9
31169: PUSH
31170: LD_VAR 0 14
31174: PUSH
31175: LD_INT 1
31177: ARRAY
31178: PPUSH
31179: CALL_OW 266
31183: PPUSH
31184: LD_VAR 0 14
31188: PUSH
31189: LD_INT 1
31191: ARRAY
31192: PPUSH
31193: CALL_OW 250
31197: PPUSH
31198: LD_VAR 0 14
31202: PUSH
31203: LD_INT 1
31205: ARRAY
31206: PPUSH
31207: CALL_OW 251
31211: PPUSH
31212: LD_VAR 0 14
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: CALL_OW 254
31225: PPUSH
31226: LD_VAR 0 14
31230: PUSH
31231: LD_INT 1
31233: ARRAY
31234: PPUSH
31235: CALL_OW 248
31239: PPUSH
31240: LD_INT 0
31242: PPUSH
31243: CALL 9545 0 6
31247: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31248: LD_ADDR_VAR 0 8
31252: PUSH
31253: LD_VAR 0 4
31257: PUSH
31258: LD_VAR 0 7
31262: ARRAY
31263: PPUSH
31264: LD_VAR 0 9
31268: PPUSH
31269: CALL 28232 0 2
31273: ST_TO_ADDR
// if j then
31274: LD_VAR 0 8
31278: IFFALSE 31347
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31280: LD_VAR 0 8
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: LD_VAR 0 8
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: PPUSH
31298: CALL_OW 488
31302: IFFALSE 31347
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31304: LD_VAR 0 4
31308: PUSH
31309: LD_VAR 0 7
31313: ARRAY
31314: PPUSH
31315: LD_VAR 0 8
31319: PUSH
31320: LD_INT 1
31322: ARRAY
31323: PPUSH
31324: LD_VAR 0 8
31328: PUSH
31329: LD_INT 2
31331: ARRAY
31332: PPUSH
31333: CALL_OW 116
// attacking := true ;
31337: LD_ADDR_VAR 0 29
31341: PUSH
31342: LD_INT 1
31344: ST_TO_ADDR
// continue ;
31345: GO 29831
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31347: LD_VAR 0 4
31351: PUSH
31352: LD_VAR 0 7
31356: ARRAY
31357: PPUSH
31358: CALL_OW 265
31362: PUSH
31363: LD_INT 11
31365: EQUAL
31366: IFFALSE 31644
// begin k := 10 ;
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: LD_INT 10
31375: ST_TO_ADDR
// x := 0 ;
31376: LD_ADDR_VAR 0 10
31380: PUSH
31381: LD_INT 0
31383: ST_TO_ADDR
// if tmp < k then
31384: LD_VAR 0 14
31388: PUSH
31389: LD_VAR 0 9
31393: LESS
31394: IFFALSE 31406
// k := tmp ;
31396: LD_ADDR_VAR 0 9
31400: PUSH
31401: LD_VAR 0 14
31405: ST_TO_ADDR
// for j = k downto 1 do
31406: LD_ADDR_VAR 0 8
31410: PUSH
31411: DOUBLE
31412: LD_VAR 0 9
31416: INC
31417: ST_TO_ADDR
31418: LD_INT 1
31420: PUSH
31421: FOR_DOWNTO
31422: IFFALSE 31497
// begin if GetType ( tmp [ j ] ) = unit_human then
31424: LD_VAR 0 14
31428: PUSH
31429: LD_VAR 0 8
31433: ARRAY
31434: PPUSH
31435: CALL_OW 247
31439: PUSH
31440: LD_INT 1
31442: EQUAL
31443: IFFALSE 31495
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31445: LD_VAR 0 4
31449: PUSH
31450: LD_VAR 0 7
31454: ARRAY
31455: PPUSH
31456: LD_VAR 0 14
31460: PUSH
31461: LD_VAR 0 8
31465: ARRAY
31466: PPUSH
31467: CALL 28503 0 2
// x := tmp [ j ] ;
31471: LD_ADDR_VAR 0 10
31475: PUSH
31476: LD_VAR 0 14
31480: PUSH
31481: LD_VAR 0 8
31485: ARRAY
31486: ST_TO_ADDR
// attacking := true ;
31487: LD_ADDR_VAR 0 29
31491: PUSH
31492: LD_INT 1
31494: ST_TO_ADDR
// end ; end ;
31495: GO 31421
31497: POP
31498: POP
// if not x then
31499: LD_VAR 0 10
31503: NOT
31504: IFFALSE 31644
// begin attacking := true ;
31506: LD_ADDR_VAR 0 29
31510: PUSH
31511: LD_INT 1
31513: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31514: LD_VAR 0 4
31518: PUSH
31519: LD_VAR 0 7
31523: ARRAY
31524: PPUSH
31525: CALL_OW 250
31529: PPUSH
31530: LD_VAR 0 4
31534: PUSH
31535: LD_VAR 0 7
31539: ARRAY
31540: PPUSH
31541: CALL_OW 251
31545: PPUSH
31546: CALL 1965 0 2
31550: PUSH
31551: LD_INT 2
31553: ARRAY
31554: PUSH
31555: LD_VAR 0 14
31559: PUSH
31560: LD_INT 1
31562: ARRAY
31563: PPUSH
31564: CALL_OW 250
31568: PPUSH
31569: LD_VAR 0 14
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PPUSH
31578: CALL_OW 251
31582: PPUSH
31583: CALL 1965 0 2
31587: PUSH
31588: LD_INT 2
31590: ARRAY
31591: EQUAL
31592: IFFALSE 31620
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31594: LD_VAR 0 4
31598: PUSH
31599: LD_VAR 0 7
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 14
31609: PUSH
31610: LD_INT 1
31612: ARRAY
31613: PPUSH
31614: CALL 28503 0 2
31618: GO 31644
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31620: LD_VAR 0 4
31624: PUSH
31625: LD_VAR 0 7
31629: ARRAY
31630: PPUSH
31631: LD_VAR 0 14
31635: PUSH
31636: LD_INT 1
31638: ARRAY
31639: PPUSH
31640: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31644: LD_VAR 0 4
31648: PUSH
31649: LD_VAR 0 7
31653: ARRAY
31654: PPUSH
31655: CALL_OW 264
31659: PUSH
31660: LD_INT 29
31662: EQUAL
31663: IFFALSE 32029
// begin if WantsToAttack ( group [ i ] ) in bombed then
31665: LD_VAR 0 4
31669: PUSH
31670: LD_VAR 0 7
31674: ARRAY
31675: PPUSH
31676: CALL_OW 319
31680: PUSH
31681: LD_VAR 0 28
31685: IN
31686: IFFALSE 31690
// continue ;
31688: GO 29831
// k := 8 ;
31690: LD_ADDR_VAR 0 9
31694: PUSH
31695: LD_INT 8
31697: ST_TO_ADDR
// x := 0 ;
31698: LD_ADDR_VAR 0 10
31702: PUSH
31703: LD_INT 0
31705: ST_TO_ADDR
// if tmp < k then
31706: LD_VAR 0 14
31710: PUSH
31711: LD_VAR 0 9
31715: LESS
31716: IFFALSE 31728
// k := tmp ;
31718: LD_ADDR_VAR 0 9
31722: PUSH
31723: LD_VAR 0 14
31727: ST_TO_ADDR
// for j = 1 to k do
31728: LD_ADDR_VAR 0 8
31732: PUSH
31733: DOUBLE
31734: LD_INT 1
31736: DEC
31737: ST_TO_ADDR
31738: LD_VAR 0 9
31742: PUSH
31743: FOR_TO
31744: IFFALSE 31876
// begin if GetType ( tmp [ j ] ) = unit_building then
31746: LD_VAR 0 14
31750: PUSH
31751: LD_VAR 0 8
31755: ARRAY
31756: PPUSH
31757: CALL_OW 247
31761: PUSH
31762: LD_INT 3
31764: EQUAL
31765: IFFALSE 31874
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31767: LD_VAR 0 14
31771: PUSH
31772: LD_VAR 0 8
31776: ARRAY
31777: PUSH
31778: LD_VAR 0 28
31782: IN
31783: NOT
31784: PUSH
31785: LD_VAR 0 14
31789: PUSH
31790: LD_VAR 0 8
31794: ARRAY
31795: PPUSH
31796: CALL_OW 313
31800: AND
31801: IFFALSE 31874
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31803: LD_VAR 0 4
31807: PUSH
31808: LD_VAR 0 7
31812: ARRAY
31813: PPUSH
31814: LD_VAR 0 14
31818: PUSH
31819: LD_VAR 0 8
31823: ARRAY
31824: PPUSH
31825: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31829: LD_ADDR_VAR 0 28
31833: PUSH
31834: LD_VAR 0 28
31838: PPUSH
31839: LD_VAR 0 28
31843: PUSH
31844: LD_INT 1
31846: PLUS
31847: PPUSH
31848: LD_VAR 0 14
31852: PUSH
31853: LD_VAR 0 8
31857: ARRAY
31858: PPUSH
31859: CALL_OW 1
31863: ST_TO_ADDR
// attacking := true ;
31864: LD_ADDR_VAR 0 29
31868: PUSH
31869: LD_INT 1
31871: ST_TO_ADDR
// break ;
31872: GO 31876
// end ; end ;
31874: GO 31743
31876: POP
31877: POP
// if not attacking and f_attack_depot then
31878: LD_VAR 0 29
31882: NOT
31883: PUSH
31884: LD_VAR 0 25
31888: AND
31889: IFFALSE 31984
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31891: LD_ADDR_VAR 0 13
31895: PUSH
31896: LD_VAR 0 14
31900: PPUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 30
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 30
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: PPUSH
31929: CALL_OW 72
31933: ST_TO_ADDR
// if z then
31934: LD_VAR 0 13
31938: IFFALSE 31984
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31940: LD_VAR 0 4
31944: PUSH
31945: LD_VAR 0 7
31949: ARRAY
31950: PPUSH
31951: LD_VAR 0 13
31955: PPUSH
31956: LD_VAR 0 4
31960: PUSH
31961: LD_VAR 0 7
31965: ARRAY
31966: PPUSH
31967: CALL_OW 74
31971: PPUSH
31972: CALL_OW 115
// attacking := true ;
31976: LD_ADDR_VAR 0 29
31980: PUSH
31981: LD_INT 1
31983: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31984: LD_VAR 0 4
31988: PUSH
31989: LD_VAR 0 7
31993: ARRAY
31994: PPUSH
31995: CALL_OW 256
31999: PUSH
32000: LD_INT 500
32002: LESS
32003: IFFALSE 32029
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32005: LD_VAR 0 4
32009: PUSH
32010: LD_VAR 0 7
32014: ARRAY
32015: PPUSH
32016: LD_VAR 0 14
32020: PUSH
32021: LD_INT 1
32023: ARRAY
32024: PPUSH
32025: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32029: LD_VAR 0 4
32033: PUSH
32034: LD_VAR 0 7
32038: ARRAY
32039: PPUSH
32040: CALL_OW 256
32044: PUSH
32045: LD_INT 250
32047: LESS
32048: PUSH
32049: LD_VAR 0 4
32053: PUSH
32054: LD_VAR 0 7
32058: ARRAY
32059: PUSH
32060: LD_INT 21
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 23
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 69
32088: IN
32089: AND
32090: IFFALSE 32215
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32092: LD_ADDR_VAR 0 9
32096: PUSH
32097: LD_OWVAR 3
32101: PUSH
32102: LD_VAR 0 4
32106: PUSH
32107: LD_VAR 0 7
32111: ARRAY
32112: DIFF
32113: PPUSH
32114: LD_VAR 0 4
32118: PUSH
32119: LD_VAR 0 7
32123: ARRAY
32124: PPUSH
32125: CALL_OW 74
32129: ST_TO_ADDR
// if not k then
32130: LD_VAR 0 9
32134: NOT
32135: IFFALSE 32139
// continue ;
32137: GO 29831
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32139: LD_VAR 0 9
32143: PUSH
32144: LD_INT 81
32146: PUSH
32147: LD_VAR 0 4
32151: PUSH
32152: LD_VAR 0 7
32156: ARRAY
32157: PPUSH
32158: CALL_OW 255
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: IN
32172: PUSH
32173: LD_VAR 0 9
32177: PPUSH
32178: LD_VAR 0 4
32182: PUSH
32183: LD_VAR 0 7
32187: ARRAY
32188: PPUSH
32189: CALL_OW 296
32193: PUSH
32194: LD_INT 5
32196: LESS
32197: AND
32198: IFFALSE 32215
// ComAutodestruct ( group [ i ] ) ;
32200: LD_VAR 0 4
32204: PUSH
32205: LD_VAR 0 7
32209: ARRAY
32210: PPUSH
32211: CALL 28401 0 1
// end ; if f_attack_depot then
32215: LD_VAR 0 25
32219: IFFALSE 32331
// begin k := 6 ;
32221: LD_ADDR_VAR 0 9
32225: PUSH
32226: LD_INT 6
32228: ST_TO_ADDR
// if tmp < k then
32229: LD_VAR 0 14
32233: PUSH
32234: LD_VAR 0 9
32238: LESS
32239: IFFALSE 32251
// k := tmp ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_VAR 0 14
32250: ST_TO_ADDR
// for j = 1 to k do
32251: LD_ADDR_VAR 0 8
32255: PUSH
32256: DOUBLE
32257: LD_INT 1
32259: DEC
32260: ST_TO_ADDR
32261: LD_VAR 0 9
32265: PUSH
32266: FOR_TO
32267: IFFALSE 32329
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32269: LD_VAR 0 8
32273: PPUSH
32274: CALL_OW 266
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: IN
32289: IFFALSE 32327
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32291: LD_VAR 0 4
32295: PUSH
32296: LD_VAR 0 7
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 14
32306: PUSH
32307: LD_VAR 0 8
32311: ARRAY
32312: PPUSH
32313: CALL_OW 115
// attacking := true ;
32317: LD_ADDR_VAR 0 29
32321: PUSH
32322: LD_INT 1
32324: ST_TO_ADDR
// break ;
32325: GO 32329
// end ;
32327: GO 32266
32329: POP
32330: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32331: LD_VAR 0 4
32335: PUSH
32336: LD_VAR 0 7
32340: ARRAY
32341: PPUSH
32342: CALL_OW 302
32346: PUSH
32347: LD_VAR 0 29
32351: NOT
32352: AND
32353: IFFALSE 32621
// begin if GetTag ( group [ i ] ) = 71 then
32355: LD_VAR 0 4
32359: PUSH
32360: LD_VAR 0 7
32364: ARRAY
32365: PPUSH
32366: CALL_OW 110
32370: PUSH
32371: LD_INT 71
32373: EQUAL
32374: IFFALSE 32415
// begin if HasTask ( group [ i ] ) then
32376: LD_VAR 0 4
32380: PUSH
32381: LD_VAR 0 7
32385: ARRAY
32386: PPUSH
32387: CALL_OW 314
32391: IFFALSE 32397
// continue else
32393: GO 29831
32395: GO 32415
// SetTag ( group [ i ] , 0 ) ;
32397: LD_VAR 0 4
32401: PUSH
32402: LD_VAR 0 7
32406: ARRAY
32407: PPUSH
32408: LD_INT 0
32410: PPUSH
32411: CALL_OW 109
// end ; k := 8 ;
32415: LD_ADDR_VAR 0 9
32419: PUSH
32420: LD_INT 8
32422: ST_TO_ADDR
// x := 0 ;
32423: LD_ADDR_VAR 0 10
32427: PUSH
32428: LD_INT 0
32430: ST_TO_ADDR
// if tmp < k then
32431: LD_VAR 0 14
32435: PUSH
32436: LD_VAR 0 9
32440: LESS
32441: IFFALSE 32453
// k := tmp ;
32443: LD_ADDR_VAR 0 9
32447: PUSH
32448: LD_VAR 0 14
32452: ST_TO_ADDR
// for j = 1 to k do
32453: LD_ADDR_VAR 0 8
32457: PUSH
32458: DOUBLE
32459: LD_INT 1
32461: DEC
32462: ST_TO_ADDR
32463: LD_VAR 0 9
32467: PUSH
32468: FOR_TO
32469: IFFALSE 32567
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32471: LD_VAR 0 14
32475: PUSH
32476: LD_VAR 0 8
32480: ARRAY
32481: PPUSH
32482: CALL_OW 247
32486: PUSH
32487: LD_INT 1
32489: EQUAL
32490: PUSH
32491: LD_VAR 0 14
32495: PUSH
32496: LD_VAR 0 8
32500: ARRAY
32501: PPUSH
32502: CALL_OW 256
32506: PUSH
32507: LD_INT 250
32509: LESS
32510: PUSH
32511: LD_VAR 0 20
32515: AND
32516: PUSH
32517: LD_VAR 0 20
32521: NOT
32522: PUSH
32523: LD_VAR 0 14
32527: PUSH
32528: LD_VAR 0 8
32532: ARRAY
32533: PPUSH
32534: CALL_OW 256
32538: PUSH
32539: LD_INT 250
32541: GREATEREQUAL
32542: AND
32543: OR
32544: AND
32545: IFFALSE 32565
// begin x := tmp [ j ] ;
32547: LD_ADDR_VAR 0 10
32551: PUSH
32552: LD_VAR 0 14
32556: PUSH
32557: LD_VAR 0 8
32561: ARRAY
32562: ST_TO_ADDR
// break ;
32563: GO 32567
// end ;
32565: GO 32468
32567: POP
32568: POP
// if x then
32569: LD_VAR 0 10
32573: IFFALSE 32597
// ComAttackUnit ( group [ i ] , x ) else
32575: LD_VAR 0 4
32579: PUSH
32580: LD_VAR 0 7
32584: ARRAY
32585: PPUSH
32586: LD_VAR 0 10
32590: PPUSH
32591: CALL_OW 115
32595: GO 32621
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32597: LD_VAR 0 4
32601: PUSH
32602: LD_VAR 0 7
32606: ARRAY
32607: PPUSH
32608: LD_VAR 0 14
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PPUSH
32617: CALL_OW 115
// end ; end ; end ;
32621: GO 29831
32623: POP
32624: POP
// wait ( 0 0$1 ) ;
32625: LD_INT 35
32627: PPUSH
32628: CALL_OW 67
// until group = [ ] ;
32632: LD_VAR 0 4
32636: PUSH
32637: EMPTY
32638: EQUAL
32639: IFFALSE 29816
// end ;
32641: LD_VAR 0 2
32645: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
32652: PPUSH
32653: PPUSH
32654: PPUSH
// if not defenders then
32655: LD_VAR 0 2
32659: NOT
32660: IFFALSE 32664
// exit ;
32662: GO 33188
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32664: LD_ADDR_VAR 0 9
32668: PUSH
32669: LD_EXP 45
32673: PUSH
32674: LD_VAR 0 1
32678: ARRAY
32679: PPUSH
32680: LD_INT 25
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PPUSH
32690: CALL_OW 72
32694: ST_TO_ADDR
// if mechs then
32695: LD_VAR 0 9
32699: IFFALSE 32798
// for i in defenders do
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: LD_VAR 0 2
32710: PUSH
32711: FOR_IN
32712: IFFALSE 32796
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32714: LD_VAR 0 5
32718: PPUSH
32719: CALL_OW 263
32723: PUSH
32724: LD_INT 1
32726: EQUAL
32727: PUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: CALL_OW 311
32737: NOT
32738: AND
32739: IFFALSE 32794
// begin un := mechs [ 1 ] ;
32741: LD_ADDR_VAR 0 7
32745: PUSH
32746: LD_VAR 0 9
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32755: LD_VAR 0 7
32759: PPUSH
32760: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32764: LD_VAR 0 7
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: CALL_OW 180
// mechs := mechs diff un ;
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_VAR 0 9
32787: PUSH
32788: LD_VAR 0 7
32792: DIFF
32793: ST_TO_ADDR
// end ;
32794: GO 32711
32796: POP
32797: POP
// repeat wait ( 0 0$1 ) ;
32798: LD_INT 35
32800: PPUSH
32801: CALL_OW 67
// enemy := mc_scan [ base ] ;
32805: LD_ADDR_VAR 0 3
32809: PUSH
32810: LD_EXP 64
32814: PUSH
32815: LD_VAR 0 1
32819: ARRAY
32820: ST_TO_ADDR
// for i in defenders do
32821: LD_ADDR_VAR 0 5
32825: PUSH
32826: LD_VAR 0 2
32830: PUSH
32831: FOR_IN
32832: IFFALSE 32978
// begin e := NearestUnitToUnit ( enemy , i ) ;
32834: LD_ADDR_VAR 0 10
32838: PUSH
32839: LD_VAR 0 3
32843: PPUSH
32844: LD_VAR 0 5
32848: PPUSH
32849: CALL_OW 74
32853: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32854: LD_VAR 0 5
32858: PPUSH
32859: CALL_OW 319
32863: NOT
32864: PUSH
32865: LD_VAR 0 5
32869: PPUSH
32870: CALL_OW 302
32874: AND
32875: PUSH
32876: LD_VAR 0 5
32880: PPUSH
32881: LD_VAR 0 10
32885: PPUSH
32886: CALL_OW 296
32890: PUSH
32891: LD_INT 30
32893: LESS
32894: AND
32895: IFFALSE 32913
// ComAttackUnit ( i , e ) else
32897: LD_VAR 0 5
32901: PPUSH
32902: LD_VAR 0 10
32906: PPUSH
32907: CALL_OW 115
32911: GO 32976
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32913: LD_VAR 0 5
32917: PPUSH
32918: LD_VAR 0 10
32922: PPUSH
32923: CALL_OW 296
32927: PUSH
32928: LD_INT 30
32930: GREATEREQUAL
32931: PUSH
32932: LD_VAR 0 5
32936: PPUSH
32937: LD_EXP 65
32941: PUSH
32942: LD_VAR 0 1
32946: ARRAY
32947: PPUSH
32948: CALL_OW 308
32952: NOT
32953: AND
32954: IFFALSE 32976
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32956: LD_VAR 0 5
32960: PPUSH
32961: LD_EXP 65
32965: PUSH
32966: LD_VAR 0 1
32970: ARRAY
32971: PPUSH
32972: CALL_OW 113
// end ;
32976: GO 32831
32978: POP
32979: POP
// until not enemy or not defenders ;
32980: LD_VAR 0 3
32984: NOT
32985: PUSH
32986: LD_VAR 0 2
32990: NOT
32991: OR
32992: IFFALSE 32798
// if not enemy and defenders then
32994: LD_VAR 0 3
32998: NOT
32999: PUSH
33000: LD_VAR 0 2
33004: AND
33005: IFFALSE 33163
// repeat wait ( 0 0$1 ) ;
33007: LD_INT 35
33009: PPUSH
33010: CALL_OW 67
// for i in defenders do
33014: LD_ADDR_VAR 0 5
33018: PUSH
33019: LD_VAR 0 2
33023: PUSH
33024: FOR_IN
33025: IFFALSE 33114
// begin if not IsInArea ( i , mc_parking [ base ] ) then
33027: LD_VAR 0 5
33031: PPUSH
33032: LD_EXP 65
33036: PUSH
33037: LD_VAR 0 1
33041: ARRAY
33042: PPUSH
33043: CALL_OW 308
33047: NOT
33048: IFFALSE 33072
// ComMoveToArea ( i , mc_parking [ base ] ) else
33050: LD_VAR 0 5
33054: PPUSH
33055: LD_EXP 65
33059: PUSH
33060: LD_VAR 0 1
33064: ARRAY
33065: PPUSH
33066: CALL_OW 113
33070: GO 33112
// if GetControl ( i ) = control_manual then
33072: LD_VAR 0 5
33076: PPUSH
33077: CALL_OW 263
33081: PUSH
33082: LD_INT 1
33084: EQUAL
33085: IFFALSE 33112
// if IsDrivenBy ( i ) then
33087: LD_VAR 0 5
33091: PPUSH
33092: CALL_OW 311
33096: IFFALSE 33112
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33098: LD_VAR 0 5
33102: PPUSH
33103: CALL_OW 311
33107: PPUSH
33108: CALL_OW 121
// end ;
33112: GO 33024
33114: POP
33115: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_INT 95
33123: PUSH
33124: LD_EXP 65
33128: PUSH
33129: LD_VAR 0 1
33133: ARRAY
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PPUSH
33139: CALL_OW 72
33143: PUSH
33144: LD_VAR 0 2
33148: EQUAL
33149: PUSH
33150: LD_EXP 64
33154: PUSH
33155: LD_VAR 0 1
33159: ARRAY
33160: OR
33161: IFFALSE 33007
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33163: LD_ADDR_EXP 63
33167: PUSH
33168: LD_EXP 63
33172: PPUSH
33173: LD_VAR 0 1
33177: PPUSH
33178: LD_VAR 0 2
33182: PPUSH
33183: CALL_OW 1
33187: ST_TO_ADDR
// end ;
33188: LD_VAR 0 4
33192: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33193: LD_INT 0
33195: PPUSH
33196: PPUSH
33197: PPUSH
33198: PPUSH
// if not base_units then
33199: LD_VAR 0 1
33203: NOT
33204: IFFALSE 33208
// exit ;
33206: GO 33295
// result := false ;
33208: LD_ADDR_VAR 0 2
33212: PUSH
33213: LD_INT 0
33215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33216: LD_ADDR_VAR 0 5
33220: PUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: LD_INT 21
33228: PUSH
33229: LD_INT 3
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 72
33240: ST_TO_ADDR
// if not tmp then
33241: LD_VAR 0 5
33245: NOT
33246: IFFALSE 33250
// exit ;
33248: GO 33295
// for i in tmp do
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_VAR 0 5
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33293
// begin result := EnemyInRange ( i , 18 ) ;
33263: LD_ADDR_VAR 0 2
33267: PUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: LD_INT 18
33275: PPUSH
33276: CALL 28084 0 2
33280: ST_TO_ADDR
// if result then
33281: LD_VAR 0 2
33285: IFFALSE 33291
// exit ;
33287: POP
33288: POP
33289: GO 33295
// end ;
33291: GO 33260
33293: POP
33294: POP
// end ;
33295: LD_VAR 0 2
33299: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
// result := false ;
33306: LD_ADDR_VAR 0 2
33310: PUSH
33311: LD_INT 0
33313: ST_TO_ADDR
// side := GetSide ( unit ) ;
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 255
33328: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33329: LD_ADDR_VAR 0 4
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 248
33343: ST_TO_ADDR
// case nat of 1 :
33344: LD_VAR 0 4
33348: PUSH
33349: LD_INT 1
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33368
33357: POP
// tech := tech_lassight ; 2 :
33358: LD_ADDR_VAR 0 5
33362: PUSH
33363: LD_INT 12
33365: ST_TO_ADDR
33366: GO 33407
33368: LD_INT 2
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33376
33374: GO 33387
33376: POP
// tech := tech_mortar ; 3 :
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_INT 41
33384: ST_TO_ADDR
33385: GO 33407
33387: LD_INT 3
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33395
33393: GO 33406
33395: POP
// tech := tech_bazooka ; end ;
33396: LD_ADDR_VAR 0 5
33400: PUSH
33401: LD_INT 44
33403: ST_TO_ADDR
33404: GO 33407
33406: POP
// if Researched ( side , tech ) then
33407: LD_VAR 0 3
33411: PPUSH
33412: LD_VAR 0 5
33416: PPUSH
33417: CALL_OW 325
33421: IFFALSE 33448
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33423: LD_ADDR_VAR 0 2
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: LD_INT 8
33433: PUSH
33434: LD_INT 9
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: PUSH
33442: LD_VAR 0 4
33446: ARRAY
33447: ST_TO_ADDR
// end ;
33448: LD_VAR 0 2
33452: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
// if not mines then
33458: LD_VAR 0 2
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 33590
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: LD_INT 81
33474: PUSH
33475: LD_VAR 0 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PPUSH
33484: CALL_OW 69
33488: ST_TO_ADDR
// for i in mines do
33489: LD_ADDR_VAR 0 4
33493: PUSH
33494: LD_VAR 0 2
33498: PUSH
33499: FOR_IN
33500: IFFALSE 33588
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33502: LD_VAR 0 4
33506: PUSH
33507: LD_INT 1
33509: ARRAY
33510: PPUSH
33511: LD_VAR 0 4
33515: PUSH
33516: LD_INT 2
33518: ARRAY
33519: PPUSH
33520: CALL_OW 458
33524: NOT
33525: IFFALSE 33529
// continue ;
33527: GO 33499
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33529: LD_VAR 0 4
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: LD_VAR 0 4
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: PPUSH
33547: CALL_OW 428
33551: PUSH
33552: LD_VAR 0 5
33556: IN
33557: IFFALSE 33586
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33559: LD_VAR 0 4
33563: PUSH
33564: LD_INT 1
33566: ARRAY
33567: PPUSH
33568: LD_VAR 0 4
33572: PUSH
33573: LD_INT 2
33575: ARRAY
33576: PPUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 456
// end ;
33586: GO 33499
33588: POP
33589: POP
// end ; end_of_file
33590: LD_VAR 0 3
33594: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33595: LD_INT 0
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33602: LD_ADDR_VAR 0 5
33606: PUSH
33607: LD_INT 6
33609: PUSH
33610: LD_INT 7
33612: PUSH
33613: LD_INT 8
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: PUSH
33621: LD_OWVAR 67
33625: ARRAY
33626: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33627: LD_INT 69
33629: PUSH
33630: EMPTY
33631: LIST
33632: PPUSH
33633: LD_INT 141
33635: PPUSH
33636: CALL_OW 169
// Wait ( 1 ) ;
33640: LD_INT 1
33642: PPUSH
33643: CALL_OW 67
// uc_side := 2 ;
33647: LD_ADDR_OWVAR 20
33651: PUSH
33652: LD_INT 2
33654: ST_TO_ADDR
// uc_nation := 2 ;
33655: LD_ADDR_OWVAR 21
33659: PUSH
33660: LD_INT 2
33662: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33663: LD_ADDR_OWVAR 37
33667: PUSH
33668: LD_INT 14
33670: ST_TO_ADDR
// vc_engine := engine_siberite ;
33671: LD_ADDR_OWVAR 39
33675: PUSH
33676: LD_INT 3
33678: ST_TO_ADDR
// vc_control := control_manual ;
33679: LD_ADDR_OWVAR 38
33683: PUSH
33684: LD_INT 1
33686: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33687: LD_ADDR_OWVAR 40
33691: PUSH
33692: LD_INT 31
33694: ST_TO_ADDR
// for i = 1 to 3 do
33695: LD_ADDR_VAR 0 2
33699: PUSH
33700: DOUBLE
33701: LD_INT 1
33703: DEC
33704: ST_TO_ADDR
33705: LD_INT 3
33707: PUSH
33708: FOR_TO
33709: IFFALSE 33793
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33711: LD_INT 0
33713: PPUSH
33714: LD_INT 3
33716: PPUSH
33717: LD_VAR 0 5
33721: PPUSH
33722: CALL_OW 380
// un := CreateVehicle ;
33726: LD_ADDR_VAR 0 4
33730: PUSH
33731: CALL_OW 45
33735: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33736: LD_VAR 0 4
33740: PPUSH
33741: LD_INT 0
33743: PPUSH
33744: LD_INT 5
33746: PPUSH
33747: CALL_OW 12
33751: PPUSH
33752: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33756: LD_VAR 0 4
33760: PPUSH
33761: LD_INT 156
33763: PPUSH
33764: LD_INT 15
33766: PPUSH
33767: LD_INT 6
33769: PPUSH
33770: LD_INT 0
33772: PPUSH
33773: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33777: CALL_OW 44
33781: PPUSH
33782: LD_VAR 0 4
33786: PPUSH
33787: CALL_OW 52
// end ;
33791: GO 33708
33793: POP
33794: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33795: LD_ADDR_EXP 34
33799: PUSH
33800: LD_INT 94
33802: PPUSH
33803: LD_STRING dammam
33805: PPUSH
33806: LD_VAR 0 5
33810: PPUSH
33811: LD_INT 10000
33813: PUSH
33814: LD_INT 1000
33816: PUSH
33817: LD_INT 300
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: PPUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: LD_INT 5
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 4
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: PPUSH
33845: CALL 6015 0 5
33849: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33850: LD_ADDR_EXP 34
33854: PUSH
33855: LD_EXP 34
33859: PUSH
33860: LD_INT 122
33862: PPUSH
33863: LD_STRING 
33865: PPUSH
33866: LD_VAR 0 5
33870: PPUSH
33871: LD_INT 100
33873: PUSH
33874: LD_INT 60
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: PPUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 4
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL 6015 0 5
33908: ADD
33909: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33910: LD_ADDR_EXP 32
33914: PUSH
33915: LD_INT 45
33917: PPUSH
33918: LD_STRING jeddah
33920: PPUSH
33921: LD_VAR 0 5
33925: PPUSH
33926: LD_INT 700
33928: PUSH
33929: LD_INT 300
33931: PUSH
33932: LD_INT 10
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: PPUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: PPUSH
33959: CALL 6015 0 5
33963: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33964: LD_ADDR_EXP 33
33968: PUSH
33969: LD_INT 7
33971: PPUSH
33972: LD_STRING riyadh
33974: PPUSH
33975: LD_VAR 0 5
33979: PPUSH
33980: LD_INT 500
33982: PUSH
33983: LD_INT 60
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: PPUSH
33994: LD_INT 4
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: PPUSH
34012: CALL 6015 0 5
34016: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
34017: LD_ADDR_EXP 35
34021: PUSH
34022: LD_INT 69
34024: PPUSH
34025: LD_STRING 
34027: PPUSH
34028: LD_VAR 0 5
34032: PPUSH
34033: LD_INT 500
34035: PUSH
34036: LD_INT 50
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: PPUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: PPUSH
34066: CALL 6015 0 5
34070: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34071: LD_ADDR_EXP 45
34075: PUSH
34076: LD_EXP 34
34080: PUSH
34081: LD_EXP 32
34085: PUSH
34086: LD_EXP 35
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34096: LD_ADDR_VAR 0 2
34100: PUSH
34101: LD_INT 22
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 30
34113: PUSH
34114: LD_INT 31
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 58
34123: PUSH
34124: EMPTY
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: PPUSH
34132: CALL_OW 69
34136: PUSH
34137: FOR_IN
34138: IFFALSE 34263
// begin if GetBase ( i ) then
34140: LD_VAR 0 2
34144: PPUSH
34145: CALL_OW 274
34149: IFFALSE 34153
// continue ;
34151: GO 34137
// d := GetDir ( i ) ;
34153: LD_ADDR_VAR 0 3
34157: PUSH
34158: LD_VAR 0 2
34162: PPUSH
34163: CALL_OW 254
34167: ST_TO_ADDR
// if d < 3 then
34168: LD_VAR 0 3
34172: PUSH
34173: LD_INT 3
34175: LESS
34176: IFFALSE 34194
// d := d + 3 else
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_VAR 0 3
34187: PUSH
34188: LD_INT 3
34190: PLUS
34191: ST_TO_ADDR
34192: GO 34208
// d := d - 3 ;
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_VAR 0 3
34203: PUSH
34204: LD_INT 3
34206: MINUS
34207: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34208: LD_INT 0
34210: PPUSH
34211: LD_INT 8
34213: PPUSH
34214: LD_VAR 0 5
34218: PPUSH
34219: CALL_OW 380
// un := CreateHuman ;
34223: LD_ADDR_VAR 0 4
34227: PUSH
34228: CALL_OW 44
34232: ST_TO_ADDR
// SetDir ( un , d ) ;
34233: LD_VAR 0 4
34237: PPUSH
34238: LD_VAR 0 3
34242: PPUSH
34243: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34247: LD_VAR 0 4
34251: PPUSH
34252: LD_VAR 0 2
34256: PPUSH
34257: CALL_OW 52
// end ;
34261: GO 34137
34263: POP
34264: POP
// if Difficulty > 1 then
34265: LD_OWVAR 67
34269: PUSH
34270: LD_INT 1
34272: GREATER
34273: IFFALSE 34644
// begin ar_kamikadze := [ ] ;
34275: LD_ADDR_EXP 38
34279: PUSH
34280: EMPTY
34281: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34282: LD_INT 0
34284: PPUSH
34285: LD_INT 1
34287: PPUSH
34288: LD_VAR 0 5
34292: PPUSH
34293: CALL_OW 380
// un := CreateHuman ;
34297: LD_ADDR_VAR 0 4
34301: PUSH
34302: CALL_OW 44
34306: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34307: LD_VAR 0 4
34311: PPUSH
34312: LD_INT 3
34314: PPUSH
34315: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34319: LD_VAR 0 4
34323: PPUSH
34324: LD_INT 23
34326: PPUSH
34327: LD_INT 44
34329: PPUSH
34330: LD_INT 0
34332: PPUSH
34333: CALL_OW 48
// ComCrawl ( un ) ;
34337: LD_VAR 0 4
34341: PPUSH
34342: CALL_OW 137
// un := CreateHuman ;
34346: LD_ADDR_VAR 0 4
34350: PUSH
34351: CALL_OW 44
34355: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_INT 3
34363: PPUSH
34364: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34368: LD_VAR 0 4
34372: PPUSH
34373: LD_INT 30
34375: PPUSH
34376: LD_INT 39
34378: PPUSH
34379: LD_INT 0
34381: PPUSH
34382: CALL_OW 48
// ComCrawl ( un ) ;
34386: LD_VAR 0 4
34390: PPUSH
34391: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34395: LD_INT 0
34397: PPUSH
34398: LD_INT 17
34400: PPUSH
34401: LD_VAR 0 5
34405: PPUSH
34406: CALL_OW 380
// un := CreateHuman ;
34410: LD_ADDR_VAR 0 4
34414: PUSH
34415: CALL_OW 44
34419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34420: LD_VAR 0 4
34424: PPUSH
34425: LD_INT 3
34427: PPUSH
34428: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34432: LD_VAR 0 4
34436: PPUSH
34437: LD_INT 45
34439: PPUSH
34440: LD_INT 86
34442: PPUSH
34443: LD_INT 0
34445: PPUSH
34446: CALL_OW 48
// ComHold ( un ) ;
34450: LD_VAR 0 4
34454: PPUSH
34455: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34459: LD_ADDR_EXP 38
34463: PUSH
34464: LD_EXP 38
34468: PPUSH
34469: LD_EXP 38
34473: PUSH
34474: LD_INT 1
34476: PLUS
34477: PPUSH
34478: LD_VAR 0 4
34482: PPUSH
34483: CALL_OW 1
34487: ST_TO_ADDR
// un := CreateHuman ;
34488: LD_ADDR_VAR 0 4
34492: PUSH
34493: CALL_OW 44
34497: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34498: LD_VAR 0 4
34502: PPUSH
34503: LD_INT 3
34505: PPUSH
34506: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34510: LD_VAR 0 4
34514: PPUSH
34515: LD_INT 60
34517: PPUSH
34518: LD_INT 85
34520: PPUSH
34521: LD_INT 0
34523: PPUSH
34524: CALL_OW 48
// ComHold ( un ) ;
34528: LD_VAR 0 4
34532: PPUSH
34533: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34537: LD_ADDR_EXP 38
34541: PUSH
34542: LD_EXP 38
34546: PPUSH
34547: LD_EXP 38
34551: PUSH
34552: LD_INT 1
34554: PLUS
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: CALL_OW 1
34565: ST_TO_ADDR
// un := CreateHuman ;
34566: LD_ADDR_VAR 0 4
34570: PUSH
34571: CALL_OW 44
34575: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34576: LD_VAR 0 4
34580: PPUSH
34581: LD_INT 3
34583: PPUSH
34584: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34588: LD_VAR 0 4
34592: PPUSH
34593: LD_INT 222
34595: PPUSH
34596: LD_INT 166
34598: PPUSH
34599: LD_INT 0
34601: PPUSH
34602: CALL_OW 48
// ComHold ( un ) ;
34606: LD_VAR 0 4
34610: PPUSH
34611: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34615: LD_ADDR_EXP 38
34619: PUSH
34620: LD_EXP 38
34624: PPUSH
34625: LD_EXP 38
34629: PUSH
34630: LD_INT 1
34632: PLUS
34633: PPUSH
34634: LD_VAR 0 4
34638: PPUSH
34639: CALL_OW 1
34643: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34644: LD_ADDR_EXP 36
34648: PUSH
34649: EMPTY
34650: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34651: LD_INT 1
34653: PPUSH
34654: LD_INT 1
34656: PPUSH
34657: LD_VAR 0 5
34661: PPUSH
34662: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34666: LD_ADDR_OWVAR 33
34670: PUSH
34671: LD_STRING SecondCharsGal
34673: ST_TO_ADDR
// hc_face_number := 4 ;
34674: LD_ADDR_OWVAR 34
34678: PUSH
34679: LD_INT 4
34681: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34682: LD_ADDR_EXP 36
34686: PUSH
34687: LD_EXP 36
34691: PPUSH
34692: LD_INT 1
34694: PPUSH
34695: CALL_OW 44
34699: PPUSH
34700: CALL_OW 1
34704: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34705: LD_INT 2
34707: PPUSH
34708: LD_INT 4
34710: PPUSH
34711: LD_VAR 0 5
34715: PPUSH
34716: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34720: LD_ADDR_OWVAR 33
34724: PUSH
34725: LD_STRING SecondCharsGal
34727: ST_TO_ADDR
// hc_face_number := 15 ;
34728: LD_ADDR_OWVAR 34
34732: PUSH
34733: LD_INT 15
34735: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34736: LD_ADDR_EXP 36
34740: PUSH
34741: LD_EXP 36
34745: PPUSH
34746: LD_INT 2
34748: PPUSH
34749: CALL_OW 44
34753: PPUSH
34754: CALL_OW 1
34758: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34759: LD_INT 2
34761: PPUSH
34762: LD_INT 4
34764: PPUSH
34765: LD_VAR 0 5
34769: PPUSH
34770: CALL_OW 380
// hc_gallery :=  ;
34774: LD_ADDR_OWVAR 33
34778: PUSH
34779: LD_STRING 
34781: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34782: LD_ADDR_EXP 36
34786: PUSH
34787: LD_EXP 36
34791: PPUSH
34792: LD_INT 3
34794: PPUSH
34795: CALL_OW 44
34799: PPUSH
34800: CALL_OW 1
34804: ST_TO_ADDR
// hc_sex := sex_male ;
34805: LD_ADDR_OWVAR 27
34809: PUSH
34810: LD_INT 1
34812: ST_TO_ADDR
// hc_class = 11 ;
34813: LD_ADDR_OWVAR 28
34817: PUSH
34818: LD_INT 11
34820: ST_TO_ADDR
// hc_gallery = sandar ;
34821: LD_ADDR_OWVAR 33
34825: PUSH
34826: LD_STRING sandar
34828: ST_TO_ADDR
// hc_face_number = 33 ;
34829: LD_ADDR_OWVAR 34
34833: PUSH
34834: LD_INT 33
34836: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34837: LD_ADDR_OWVAR 26
34841: PUSH
34842: LD_STRING Thabit Muhair Saliba
34844: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34845: LD_ADDR_OWVAR 31
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: ST_TO_ADDR
// Saliba = CreateHuman ;
34868: LD_ADDR_EXP 40
34872: PUSH
34873: CALL_OW 44
34877: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34878: LD_EXP 40
34882: PPUSH
34883: LD_INT 7
34885: PPUSH
34886: CALL_OW 52
// if gensher_active then
34890: LD_EXP 17
34894: IFFALSE 34921
// begin Gensher = NewCharacter ( Dietrich ) ;
34896: LD_ADDR_EXP 41
34900: PUSH
34901: LD_STRING Dietrich
34903: PPUSH
34904: CALL_OW 25
34908: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
34909: LD_EXP 41
34913: PPUSH
34914: LD_INT 94
34916: PPUSH
34917: CALL_OW 52
// end ; InitHc ;
34921: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
34925: LD_ADDR_EXP 37
34929: PUSH
34930: EMPTY
34931: ST_TO_ADDR
// for i = 1 to 4 do
34932: LD_ADDR_VAR 0 2
34936: PUSH
34937: DOUBLE
34938: LD_INT 1
34940: DEC
34941: ST_TO_ADDR
34942: LD_INT 4
34944: PUSH
34945: FOR_TO
34946: IFFALSE 35118
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34948: LD_INT 13
34950: PUSH
34951: LD_INT 14
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PPUSH
34961: LD_INT 2
34963: PPUSH
34964: CALL_OW 12
34968: ARRAY
34969: PPUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PPUSH
34983: LD_INT 2
34985: PPUSH
34986: CALL_OW 12
34990: ARRAY
34991: PPUSH
34992: LD_INT 1
34994: PPUSH
34995: LD_INT 25
34997: PUSH
34998: LD_INT 27
35000: PUSH
35001: LD_INT 26
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PPUSH
35012: LD_INT 3
35014: PPUSH
35015: CALL_OW 12
35019: ARRAY
35020: PPUSH
35021: LD_INT 60
35023: PPUSH
35024: LD_INT 100
35026: PPUSH
35027: CALL_OW 12
35031: PPUSH
35032: CALL 2034 0 5
// un := CreateVehicle ;
35036: LD_ADDR_VAR 0 4
35040: PUSH
35041: CALL_OW 45
35045: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
35046: LD_ADDR_EXP 37
35050: PUSH
35051: LD_EXP 37
35055: PPUSH
35056: LD_EXP 37
35060: PUSH
35061: LD_INT 1
35063: PLUS
35064: PPUSH
35065: LD_VAR 0 4
35069: PPUSH
35070: CALL_OW 1
35074: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35075: LD_VAR 0 4
35079: PPUSH
35080: LD_INT 0
35082: PPUSH
35083: LD_INT 5
35085: PPUSH
35086: CALL_OW 12
35090: PPUSH
35091: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35095: LD_VAR 0 4
35099: PPUSH
35100: LD_INT 124
35102: PPUSH
35103: LD_INT 141
35105: PPUSH
35106: LD_INT 6
35108: PPUSH
35109: LD_INT 0
35111: PPUSH
35112: CALL_OW 50
// end ;
35116: GO 34945
35118: POP
35119: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35120: LD_ADDR_EXP 39
35124: PUSH
35125: EMPTY
35126: PUSH
35127: EMPTY
35128: PUSH
35129: EMPTY
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: DOUBLE
35142: LD_INT 1
35144: DEC
35145: ST_TO_ADDR
35146: LD_INT 3
35148: PUSH
35149: LD_INT 3
35151: PUSH
35152: LD_INT 4
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: PUSH
35160: LD_OWVAR 67
35164: ARRAY
35165: PUSH
35166: FOR_TO
35167: IFFALSE 35381
// for i = 1 to 3 do
35169: LD_ADDR_VAR 0 2
35173: PUSH
35174: DOUBLE
35175: LD_INT 1
35177: DEC
35178: ST_TO_ADDR
35179: LD_INT 3
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35377
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35185: LD_INT 14
35187: PPUSH
35188: LD_INT 3
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PPUSH
35201: LD_INT 2
35203: PPUSH
35204: CALL_OW 12
35208: ARRAY
35209: PPUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 5
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: PPUSH
35223: LD_INT 2
35225: PPUSH
35226: CALL_OW 12
35230: ARRAY
35231: PPUSH
35232: LD_INT 25
35234: PUSH
35235: LD_INT 27
35237: PUSH
35238: LD_INT 26
35240: PUSH
35241: LD_INT 28
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PPUSH
35253: LD_INT 4
35255: PPUSH
35256: CALL_OW 12
35260: ARRAY
35261: PPUSH
35262: LD_INT 100
35264: PPUSH
35265: CALL 2034 0 5
// un := CreateVehicle ;
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: CALL_OW 45
35278: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35279: LD_ADDR_EXP 39
35283: PUSH
35284: LD_EXP 39
35288: PPUSH
35289: LD_VAR 0 2
35293: PUSH
35294: LD_EXP 39
35298: PUSH
35299: LD_VAR 0 2
35303: ARRAY
35304: PUSH
35305: LD_INT 1
35307: PLUS
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PPUSH
35313: LD_VAR 0 4
35317: PPUSH
35318: CALL 3206 0 3
35322: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35323: LD_VAR 0 4
35327: PPUSH
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 5
35333: PPUSH
35334: CALL_OW 12
35338: PPUSH
35339: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35343: LD_VAR 0 4
35347: PPUSH
35348: LD_INT 20
35350: PUSH
35351: LD_INT 21
35353: PUSH
35354: LD_INT 22
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: PUSH
35362: LD_VAR 0 2
35366: ARRAY
35367: PPUSH
35368: LD_INT 0
35370: PPUSH
35371: CALL_OW 49
// end ;
35375: GO 35182
35377: POP
35378: POP
35379: GO 35166
35381: POP
35382: POP
// InitHc ;
35383: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35387: LD_INT 4
35389: PPUSH
35390: LD_INT 5
35392: PPUSH
35393: LD_INT 10
35395: PPUSH
35396: LD_INT 5
35398: PPUSH
35399: LD_INT 0
35401: PPUSH
35402: CALL_OW 58
// end ;
35406: LD_VAR 0 1
35410: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35411: LD_EXP 38
35415: IFFALSE 35489
35417: GO 35419
35419: DISABLE
35420: LD_INT 0
35422: PPUSH
// begin enable ;
35423: ENABLE
// for i in ar_kamikadze do
35424: LD_ADDR_VAR 0 1
35428: PUSH
35429: LD_EXP 38
35433: PUSH
35434: FOR_IN
35435: IFFALSE 35487
// if See ( 1 , i ) then
35437: LD_INT 1
35439: PPUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 292
35449: IFFALSE 35485
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35451: LD_VAR 0 1
35455: PPUSH
35456: LD_INT 81
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PPUSH
35466: CALL_OW 69
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 74
35480: PPUSH
35481: CALL_OW 115
35485: GO 35434
35487: POP
35488: POP
// end ;
35489: PPOPN 1
35491: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35492: LD_EXP 12
35496: IFFALSE 35813
35498: GO 35500
35500: DISABLE
35501: LD_INT 0
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35507: LD_INT 35
35509: PPUSH
35510: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35514: LD_INT 1
35516: PPUSH
35517: CALL 54830 0 1
35521: PUSH
35522: LD_INT 0
35524: EQUAL
35525: IFFALSE 35507
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35527: LD_INT 1
35529: PPUSH
35530: LD_INT 14
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 32
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: PPUSH
35551: CALL 54619 0 2
// repeat wait ( 0 0$1 ) ;
35555: LD_INT 35
35557: PPUSH
35558: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35562: LD_EXP 60
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PPUSH
35571: LD_INT 33
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 34
35583: PUSH
35584: LD_INT 32
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PPUSH
35595: CALL_OW 72
35599: IFFALSE 35555
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35601: LD_ADDR_VAR 0 2
35605: PUSH
35606: LD_EXP 60
35610: PUSH
35611: LD_INT 1
35613: ARRAY
35614: PPUSH
35615: LD_INT 33
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 34
35627: PUSH
35628: LD_INT 32
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PPUSH
35639: CALL_OW 72
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35648: LD_ADDR_VAR 0 4
35652: PUSH
35653: LD_INT 5
35655: PPUSH
35656: CALL_OW 469
35660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35661: LD_INT 35
35663: PPUSH
35664: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35668: LD_ADDR_VAR 0 4
35672: PUSH
35673: LD_INT 5
35675: PPUSH
35676: CALL_OW 469
35680: ST_TO_ADDR
// tmp := 100 ;
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 100
35688: ST_TO_ADDR
// if pos then
35689: LD_VAR 0 4
35693: IFFALSE 35733
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35695: LD_ADDR_VAR 0 3
35699: PUSH
35700: LD_INT 2
35702: PPUSH
35703: LD_VAR 0 4
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PPUSH
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 2
35719: ARRAY
35720: PPUSH
35721: LD_INT 20
35723: PPUSH
35724: CALL 3700 0 4
35728: PUSH
35729: LD_INT 4
35731: ARRAY
35732: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35733: LD_VAR 0 4
35737: PUSH
35738: LD_EXP 13
35742: NOT
35743: AND
35744: PUSH
35745: LD_VAR 0 3
35749: PUSH
35750: LD_INT 10
35752: LESS
35753: AND
35754: IFFALSE 35661
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35756: LD_VAR 0 2
35760: PPUSH
35761: LD_VAR 0 4
35765: PUSH
35766: LD_INT 1
35768: ARRAY
35769: PPUSH
35770: LD_VAR 0 4
35774: PUSH
35775: LD_INT 2
35777: ARRAY
35778: PPUSH
35779: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35783: LD_VAR 0 2
35787: PPUSH
35788: LD_INT 198
35790: PPUSH
35791: LD_INT 113
35793: PPUSH
35794: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35798: LD_VAR 0 2
35802: PPUSH
35803: LD_INT 124
35805: PPUSH
35806: LD_INT 7
35808: PPUSH
35809: CALL_OW 171
// end ;
35813: PPOPN 4
35815: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35816: LD_EXP 6
35820: IFFALSE 38365
35822: GO 35824
35824: DISABLE
35825: LD_INT 0
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
35833: PPUSH
35834: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35835: LD_ADDR_VAR 0 4
35839: PUSH
35840: LD_INT 5
35842: PUSH
35843: LD_INT 6
35845: PUSH
35846: LD_INT 7
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: PUSH
35854: LD_OWVAR 67
35858: ARRAY
35859: ST_TO_ADDR
// coords := [ ] ;
35860: LD_ADDR_VAR 0 5
35864: PUSH
35865: EMPTY
35866: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35867: LD_ADDR_VAR 0 6
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35914: LD_INT 1
35916: PPUSH
35917: LD_INT 14
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 28
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 14
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 25
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 14
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 28
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 14
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 29
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL 54619 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
35999: LD_INT 21000
36001: PUSH
36002: LD_INT 19600
36004: PUSH
36005: LD_INT 18900
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: PUSH
36013: LD_OWVAR 67
36017: ARRAY
36018: PPUSH
36019: CALL_OW 67
// InitHc ;
36023: CALL_OW 19
// InitUc ;
36027: CALL_OW 18
// uc_side := 2 ;
36031: LD_ADDR_OWVAR 20
36035: PUSH
36036: LD_INT 2
36038: ST_TO_ADDR
// uc_nation := 2 ;
36039: LD_ADDR_OWVAR 21
36043: PUSH
36044: LD_INT 2
36046: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: EMPTY
36053: PUSH
36054: EMPTY
36055: PUSH
36056: EMPTY
36057: PUSH
36058: EMPTY
36059: PUSH
36060: EMPTY
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36069: LD_ADDR_VAR 0 3
36073: PUSH
36074: LD_VAR 0 3
36078: PPUSH
36079: LD_INT 1
36081: PPUSH
36082: LD_EXP 60
36086: PUSH
36087: LD_INT 1
36089: ARRAY
36090: PUSH
36091: LD_INT 34
36093: PUSH
36094: LD_INT 32
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PPUSH
36101: CALL_OW 69
36105: DIFF
36106: PPUSH
36107: CALL_OW 1
36111: ST_TO_ADDR
// for i = 1 to Difficulty do
36112: LD_ADDR_VAR 0 1
36116: PUSH
36117: DOUBLE
36118: LD_INT 1
36120: DEC
36121: ST_TO_ADDR
36122: LD_OWVAR 67
36126: PUSH
36127: FOR_TO
36128: IFFALSE 36250
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36130: LD_INT 13
36132: PPUSH
36133: LD_INT 3
36135: PPUSH
36136: LD_INT 5
36138: PPUSH
36139: LD_INT 29
36141: PPUSH
36142: LD_INT 100
36144: PPUSH
36145: CALL 2034 0 5
// un := CreateVehicle ;
36149: LD_ADDR_VAR 0 2
36153: PUSH
36154: CALL_OW 45
36158: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36159: LD_ADDR_VAR 0 3
36163: PUSH
36164: LD_VAR 0 3
36168: PPUSH
36169: LD_INT 1
36171: PUSH
36172: LD_VAR 0 3
36176: PUSH
36177: LD_INT 1
36179: ARRAY
36180: PUSH
36181: LD_INT 1
36183: PLUS
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PPUSH
36189: LD_VAR 0 2
36193: PPUSH
36194: CALL 3206 0 3
36198: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36199: LD_VAR 0 2
36203: PPUSH
36204: LD_INT 3
36206: PPUSH
36207: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_INT 16
36218: PPUSH
36219: LD_INT 0
36221: PPUSH
36222: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36226: LD_VAR 0 2
36230: PPUSH
36231: LD_INT 51
36233: PPUSH
36234: LD_INT 10
36236: PPUSH
36237: CALL_OW 111
// wait ( 0 0$2 ) ;
36241: LD_INT 70
36243: PPUSH
36244: CALL_OW 67
// end ;
36248: GO 36127
36250: POP
36251: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36252: LD_ADDR_VAR 0 5
36256: PUSH
36257: LD_INT 51
36259: PUSH
36260: LD_INT 24
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 75
36269: PUSH
36270: LD_INT 90
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36281: LD_INT 1
36283: PPUSH
36284: LD_VAR 0 3
36288: PUSH
36289: LD_INT 1
36291: ARRAY
36292: PPUSH
36293: LD_VAR 0 5
36297: PPUSH
36298: LD_VAR 0 6
36302: PPUSH
36303: CALL 54715 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36307: LD_ADDR_VAR 0 1
36311: PUSH
36312: DOUBLE
36313: LD_INT 1
36315: DEC
36316: ST_TO_ADDR
36317: LD_INT 2
36319: PUSH
36320: LD_INT 3
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: PUSH
36331: LD_OWVAR 67
36335: ARRAY
36336: PUSH
36337: FOR_TO
36338: IFFALSE 36422
// begin PrepareHuman ( false , 17 , skill ) ;
36340: LD_INT 0
36342: PPUSH
36343: LD_INT 17
36345: PPUSH
36346: LD_VAR 0 4
36350: PPUSH
36351: CALL_OW 380
// un := CreateHuman ;
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: CALL_OW 44
36364: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_VAR 0 3
36374: PPUSH
36375: LD_INT 2
36377: PUSH
36378: LD_VAR 0 3
36382: PUSH
36383: LD_INT 2
36385: ARRAY
36386: PUSH
36387: LD_INT 1
36389: PLUS
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PPUSH
36395: LD_VAR 0 2
36399: PPUSH
36400: CALL 3206 0 3
36404: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36405: LD_VAR 0 2
36409: PPUSH
36410: LD_INT 13
36412: PPUSH
36413: LD_INT 0
36415: PPUSH
36416: CALL_OW 49
// end ;
36420: GO 36337
36422: POP
36423: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36424: LD_ADDR_VAR 0 1
36428: PUSH
36429: DOUBLE
36430: LD_INT 1
36432: DEC
36433: ST_TO_ADDR
36434: LD_INT 2
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: LD_INT 3
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: PUSH
36448: LD_OWVAR 67
36452: ARRAY
36453: PUSH
36454: FOR_TO
36455: IFFALSE 36558
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36457: LD_INT 0
36459: PPUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 8
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PPUSH
36473: LD_INT 2
36475: PPUSH
36476: CALL_OW 12
36480: ARRAY
36481: PPUSH
36482: LD_VAR 0 4
36486: PPUSH
36487: CALL_OW 380
// un := CreateHuman ;
36491: LD_ADDR_VAR 0 2
36495: PUSH
36496: CALL_OW 44
36500: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_VAR 0 3
36510: PPUSH
36511: LD_INT 2
36513: PUSH
36514: LD_VAR 0 3
36518: PUSH
36519: LD_INT 2
36521: ARRAY
36522: PUSH
36523: LD_INT 1
36525: PLUS
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PPUSH
36531: LD_VAR 0 2
36535: PPUSH
36536: CALL 3206 0 3
36540: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36541: LD_VAR 0 2
36545: PPUSH
36546: LD_INT 13
36548: PPUSH
36549: LD_INT 0
36551: PPUSH
36552: CALL_OW 49
// end ;
36556: GO 36454
36558: POP
36559: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36560: LD_ADDR_VAR 0 5
36564: PUSH
36565: LD_INT 67
36567: PUSH
36568: LD_INT 112
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 85
36577: PUSH
36578: LD_INT 130
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36589: LD_INT 2
36591: PPUSH
36592: LD_VAR 0 3
36596: PUSH
36597: LD_INT 2
36599: ARRAY
36600: PPUSH
36601: LD_VAR 0 5
36605: PPUSH
36606: LD_VAR 0 6
36610: PPUSH
36611: CALL 54715 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36615: LD_ADDR_VAR 0 1
36619: PUSH
36620: DOUBLE
36621: LD_INT 1
36623: DEC
36624: ST_TO_ADDR
36625: LD_INT 1
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 3
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_OWVAR 67
36643: ARRAY
36644: PUSH
36645: FOR_TO
36646: IFFALSE 36730
// begin PrepareHuman ( false , 17 , skill ) ;
36648: LD_INT 0
36650: PPUSH
36651: LD_INT 17
36653: PPUSH
36654: LD_VAR 0 4
36658: PPUSH
36659: CALL_OW 380
// un := CreateHuman ;
36663: LD_ADDR_VAR 0 2
36667: PUSH
36668: CALL_OW 44
36672: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36673: LD_ADDR_VAR 0 3
36677: PUSH
36678: LD_VAR 0 3
36682: PPUSH
36683: LD_INT 3
36685: PUSH
36686: LD_VAR 0 3
36690: PUSH
36691: LD_INT 3
36693: ARRAY
36694: PUSH
36695: LD_INT 1
36697: PLUS
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PPUSH
36703: LD_VAR 0 2
36707: PPUSH
36708: CALL 3206 0 3
36712: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36713: LD_VAR 0 2
36717: PPUSH
36718: LD_INT 14
36720: PPUSH
36721: LD_INT 0
36723: PPUSH
36724: CALL_OW 49
// end ;
36728: GO 36645
36730: POP
36731: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36732: LD_ADDR_VAR 0 5
36736: PUSH
36737: LD_INT 148
36739: PUSH
36740: LD_INT 158
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 148
36749: PUSH
36750: LD_INT 158
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36761: LD_INT 3
36763: PPUSH
36764: LD_VAR 0 3
36768: PUSH
36769: LD_INT 3
36771: ARRAY
36772: PPUSH
36773: LD_VAR 0 5
36777: PPUSH
36778: LD_VAR 0 6
36782: PPUSH
36783: CALL 54715 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36787: LD_ADDR_VAR 0 1
36791: PUSH
36792: DOUBLE
36793: LD_INT 1
36795: DEC
36796: ST_TO_ADDR
36797: LD_INT 3
36799: PUSH
36800: LD_INT 4
36802: PUSH
36803: LD_INT 4
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: PUSH
36811: LD_OWVAR 67
36815: ARRAY
36816: PUSH
36817: FOR_TO
36818: IFFALSE 37026
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36820: LD_INT 14
36822: PPUSH
36823: LD_INT 3
36825: PPUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 5
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PPUSH
36839: LD_INT 2
36841: PPUSH
36842: CALL_OW 12
36846: ARRAY
36847: PPUSH
36848: LD_INT 27
36850: PUSH
36851: LD_INT 26
36853: PUSH
36854: LD_INT 28
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PPUSH
36865: LD_INT 3
36867: PPUSH
36868: CALL_OW 12
36872: ARRAY
36873: PPUSH
36874: LD_INT 100
36876: PPUSH
36877: CALL 2034 0 5
// un := CreateVehicle ;
36881: LD_ADDR_VAR 0 2
36885: PUSH
36886: CALL_OW 45
36890: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36891: LD_ADDR_VAR 0 3
36895: PUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: LD_INT 4
36903: PUSH
36904: LD_VAR 0 3
36908: PUSH
36909: LD_INT 4
36911: ARRAY
36912: PUSH
36913: LD_INT 1
36915: PLUS
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PPUSH
36921: LD_VAR 0 2
36925: PPUSH
36926: CALL 3206 0 3
36930: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_INT 5
36938: PPUSH
36939: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36943: LD_VAR 0 2
36947: PPUSH
36948: LD_INT 15
36950: PPUSH
36951: LD_INT 0
36953: PPUSH
36954: CALL_OW 49
// if GetControl ( un ) = control_manual then
36958: LD_VAR 0 2
36962: PPUSH
36963: CALL_OW 263
36967: PUSH
36968: LD_INT 1
36970: EQUAL
36971: IFFALSE 37002
// begin PrepareHuman ( false , 3 , skill ) ;
36973: LD_INT 0
36975: PPUSH
36976: LD_INT 3
36978: PPUSH
36979: LD_VAR 0 4
36983: PPUSH
36984: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36988: CALL_OW 44
36992: PPUSH
36993: LD_VAR 0 2
36997: PPUSH
36998: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
37002: LD_VAR 0 2
37006: PPUSH
37007: LD_INT 179
37009: PPUSH
37010: LD_INT 135
37012: PPUSH
37013: CALL_OW 111
// wait ( 0 0$2 ) ;
37017: LD_INT 70
37019: PPUSH
37020: CALL_OW 67
// end ;
37024: GO 36817
37026: POP
37027: POP
// vc_chassis := 15 ;
37028: LD_ADDR_OWVAR 37
37032: PUSH
37033: LD_INT 15
37035: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
37036: LD_ADDR_VAR 0 3
37040: PUSH
37041: LD_VAR 0 3
37045: PPUSH
37046: LD_INT 4
37048: PUSH
37049: LD_VAR 0 3
37053: PUSH
37054: LD_INT 4
37056: ARRAY
37057: PUSH
37058: LD_INT 1
37060: PLUS
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PPUSH
37066: CALL_OW 45
37070: PPUSH
37071: CALL 3206 0 3
37075: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37076: LD_VAR 0 3
37080: PUSH
37081: LD_INT 4
37083: ARRAY
37084: PUSH
37085: LD_VAR 0 3
37089: PUSH
37090: LD_INT 4
37092: ARRAY
37093: ARRAY
37094: PPUSH
37095: LD_INT 15
37097: PPUSH
37098: LD_INT 0
37100: PPUSH
37101: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37105: LD_INT 0
37107: PPUSH
37108: LD_INT 11
37110: PPUSH
37111: LD_VAR 0 4
37115: PPUSH
37116: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: LD_INT 4
37132: PUSH
37133: LD_VAR 0 3
37137: PUSH
37138: LD_INT 4
37140: ARRAY
37141: PUSH
37142: LD_INT 1
37144: PLUS
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PPUSH
37150: CALL_OW 44
37154: PPUSH
37155: CALL 3206 0 3
37159: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37160: LD_VAR 0 3
37164: PUSH
37165: LD_INT 4
37167: ARRAY
37168: PUSH
37169: LD_VAR 0 3
37173: PUSH
37174: LD_INT 4
37176: ARRAY
37177: ARRAY
37178: PPUSH
37179: LD_VAR 0 3
37183: PUSH
37184: LD_INT 4
37186: ARRAY
37187: PUSH
37188: LD_VAR 0 3
37192: PUSH
37193: LD_INT 4
37195: ARRAY
37196: PUSH
37197: LD_INT 1
37199: MINUS
37200: ARRAY
37201: PPUSH
37202: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_INT 148
37213: PUSH
37214: LD_INT 140
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37224: LD_INT 1
37226: PPUSH
37227: LD_VAR 0 3
37231: PUSH
37232: LD_INT 4
37234: ARRAY
37235: PPUSH
37236: LD_VAR 0 5
37240: PPUSH
37241: LD_VAR 0 6
37245: PPUSH
37246: CALL 54715 0 4
// if gensher_active then
37250: LD_EXP 17
37254: IFFALSE 37607
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37256: LD_EXP 41
37260: PPUSH
37261: LD_STRING D10-Diet-1
37263: PPUSH
37264: CALL_OW 94
// for i = 1 to 2 do
37268: LD_ADDR_VAR 0 1
37272: PUSH
37273: DOUBLE
37274: LD_INT 1
37276: DEC
37277: ST_TO_ADDR
37278: LD_INT 2
37280: PUSH
37281: FOR_TO
37282: IFFALSE 37404
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37284: LD_INT 13
37286: PPUSH
37287: LD_INT 3
37289: PPUSH
37290: LD_INT 5
37292: PPUSH
37293: LD_INT 29
37295: PPUSH
37296: LD_INT 100
37298: PPUSH
37299: CALL 2034 0 5
// un := CreateVehicle ;
37303: LD_ADDR_VAR 0 2
37307: PUSH
37308: CALL_OW 45
37312: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37313: LD_ADDR_VAR 0 3
37317: PUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: LD_INT 5
37325: PUSH
37326: LD_VAR 0 3
37330: PUSH
37331: LD_INT 5
37333: ARRAY
37334: PUSH
37335: LD_INT 1
37337: PLUS
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PPUSH
37343: LD_VAR 0 2
37347: PPUSH
37348: CALL 3206 0 3
37352: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37353: LD_VAR 0 2
37357: PPUSH
37358: LD_INT 0
37360: PPUSH
37361: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37365: LD_VAR 0 2
37369: PPUSH
37370: LD_INT 23
37372: PPUSH
37373: LD_INT 0
37375: PPUSH
37376: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37380: LD_VAR 0 2
37384: PPUSH
37385: LD_INT 85
37387: PPUSH
37388: LD_INT 152
37390: PPUSH
37391: CALL_OW 111
// wait ( 0 0$2 ) ;
37395: LD_INT 70
37397: PPUSH
37398: CALL_OW 67
// end ;
37402: GO 37281
37404: POP
37405: POP
// for i = 1 to 3 do
37406: LD_ADDR_VAR 0 1
37410: PUSH
37411: DOUBLE
37412: LD_INT 1
37414: DEC
37415: ST_TO_ADDR
37416: LD_INT 3
37418: PUSH
37419: FOR_TO
37420: IFFALSE 37561
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37422: LD_INT 14
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: LD_INT 5
37430: PPUSH
37431: LD_INT 27
37433: PUSH
37434: LD_INT 28
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PPUSH
37444: LD_INT 2
37446: PPUSH
37447: CALL_OW 12
37451: ARRAY
37452: PPUSH
37453: LD_INT 100
37455: PPUSH
37456: CALL 2034 0 5
// un := CreateVehicle ;
37460: LD_ADDR_VAR 0 2
37464: PUSH
37465: CALL_OW 45
37469: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_VAR 0 3
37479: PPUSH
37480: LD_INT 5
37482: PUSH
37483: LD_VAR 0 3
37487: PUSH
37488: LD_INT 5
37490: ARRAY
37491: PUSH
37492: LD_INT 1
37494: PLUS
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PPUSH
37500: LD_VAR 0 2
37504: PPUSH
37505: CALL 3206 0 3
37509: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37510: LD_VAR 0 2
37514: PPUSH
37515: LD_INT 0
37517: PPUSH
37518: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37522: LD_VAR 0 2
37526: PPUSH
37527: LD_INT 23
37529: PPUSH
37530: LD_INT 0
37532: PPUSH
37533: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_INT 85
37544: PPUSH
37545: LD_INT 152
37547: PPUSH
37548: CALL_OW 111
// wait ( 0 0$2 ) ;
37552: LD_INT 70
37554: PPUSH
37555: CALL_OW 67
// end ;
37559: GO 37419
37561: POP
37562: POP
// coords := [ [ 97 , 143 ] ] ;
37563: LD_ADDR_VAR 0 5
37567: PUSH
37568: LD_INT 97
37570: PUSH
37571: LD_INT 143
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37581: LD_INT 1
37583: PPUSH
37584: LD_VAR 0 3
37588: PUSH
37589: LD_INT 5
37591: ARRAY
37592: PPUSH
37593: LD_VAR 0 5
37597: PPUSH
37598: LD_VAR 0 6
37602: PPUSH
37603: CALL 54715 0 4
// end ; Wait ( 10 10$00 ) ;
37607: LD_INT 21000
37609: PPUSH
37610: CALL_OW 67
// tmp := [ ] ;
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: EMPTY
37620: ST_TO_ADDR
// w := 1 ;
37621: LD_ADDR_VAR 0 7
37625: PUSH
37626: LD_INT 1
37628: ST_TO_ADDR
// repeat tmp := [ ] ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: EMPTY
37635: ST_TO_ADDR
// if w mod 4 = 0 then
37636: LD_VAR 0 7
37640: PUSH
37641: LD_INT 4
37643: MOD
37644: PUSH
37645: LD_INT 0
37647: EQUAL
37648: IFFALSE 37735
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37650: LD_ADDR_VAR 0 8
37654: PUSH
37655: LD_INT 11
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: LD_INT 24
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 11
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 24
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 11
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 24
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 11
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 24
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
37733: GO 37837
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37735: LD_ADDR_VAR 0 8
37739: PUSH
37740: LD_INT 14
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 28
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 14
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 25
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 14
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 28
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 14
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 29
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 11
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 24
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// if w mod 3 = 0 then
37837: LD_VAR 0 7
37841: PUSH
37842: LD_INT 3
37844: MOD
37845: PUSH
37846: LD_INT 0
37848: EQUAL
37849: IFFALSE 37925
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37851: LD_ADDR_VAR 0 8
37855: PUSH
37856: LD_VAR 0 8
37860: PPUSH
37861: LD_INT 1
37863: PUSH
37864: LD_VAR 0 8
37868: PUSH
37869: LD_VAR 0 1
37873: ARRAY
37874: PUSH
37875: LD_INT 1
37877: PLUS
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PPUSH
37883: LD_INT 14
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 25
37894: PUSH
37895: LD_INT 28
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PPUSH
37905: LD_INT 2
37907: PPUSH
37908: CALL_OW 12
37912: ARRAY
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: PPUSH
37920: CALL 3206 0 3
37924: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37925: LD_INT 1
37927: PPUSH
37928: LD_VAR 0 8
37932: PPUSH
37933: CALL 54619 0 2
// if GetSide ( ar_dep_w ) = 2 then
37937: LD_INT 45
37939: PPUSH
37940: CALL_OW 255
37944: PUSH
37945: LD_INT 2
37947: EQUAL
37948: IFFALSE 38033
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
37950: LD_ADDR_VAR 0 8
37954: PUSH
37955: LD_INT 14
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 28
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 14
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 27
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 14
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 27
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
38014: LD_INT 2
38016: PPUSH
38017: LD_VAR 0 8
38021: PPUSH
38022: CALL 54619 0 2
// wait ( 0 0$50 ) ;
38026: LD_INT 1750
38028: PPUSH
38029: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
38033: LD_INT 35
38035: PPUSH
38036: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
38040: LD_EXP 60
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PPUSH
38049: LD_INT 3
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 32
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PPUSH
38066: CALL_OW 72
38070: PUSH
38071: LD_INT 4
38073: GREATEREQUAL
38074: IFFALSE 38033
// wait ( 0 0$10 ) ;
38076: LD_INT 350
38078: PPUSH
38079: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38083: LD_ADDR_VAR 0 3
38087: PUSH
38088: LD_EXP 60
38092: PUSH
38093: LD_INT 1
38095: ARRAY
38096: PPUSH
38097: LD_INT 3
38099: PUSH
38100: LD_INT 34
38102: PUSH
38103: LD_INT 32
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PPUSH
38114: CALL_OW 72
38118: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38119: LD_INT 100
38121: PPUSH
38122: CALL_OW 13
38126: PUSH
38127: LD_INT 50
38129: LESS
38130: IFFALSE 38163
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38132: LD_ADDR_VAR 0 5
38136: PUSH
38137: LD_INT 55
38139: PUSH
38140: LD_INT 7
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 75
38149: PUSH
38150: LD_INT 90
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: ST_TO_ADDR
38161: GO 38192
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38163: LD_ADDR_VAR 0 5
38167: PUSH
38168: LD_INT 128
38170: PUSH
38171: LD_INT 94
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 180
38180: PUSH
38181: LD_INT 135
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// if w mod 4 = 0 then
38192: LD_VAR 0 7
38196: PUSH
38197: LD_INT 4
38199: MOD
38200: PUSH
38201: LD_INT 0
38203: EQUAL
38204: IFFALSE 38235
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_INT 91
38213: PUSH
38214: LD_INT 58
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 117
38223: PUSH
38224: LD_INT 107
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38235: LD_INT 1
38237: PPUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: LD_VAR 0 5
38247: PPUSH
38248: LD_VAR 0 6
38252: PPUSH
38253: CALL 54715 0 4
// if mc_vehicles [ 2 ] then
38257: LD_EXP 60
38261: PUSH
38262: LD_INT 2
38264: ARRAY
38265: IFFALSE 38301
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38267: LD_INT 2
38269: PPUSH
38270: LD_EXP 60
38274: PUSH
38275: LD_INT 2
38277: ARRAY
38278: PPUSH
38279: LD_INT 73
38281: PUSH
38282: LD_INT 115
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: PPUSH
38292: LD_VAR 0 6
38296: PPUSH
38297: CALL 54715 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38301: LD_INT 19950
38303: PPUSH
38304: LD_INT 26250
38306: PPUSH
38307: CALL_OW 12
38311: PPUSH
38312: CALL_OW 67
// w := w + 1 ;
38316: LD_ADDR_VAR 0 7
38320: PUSH
38321: LD_VAR 0 7
38325: PUSH
38326: LD_INT 1
38328: PLUS
38329: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38330: LD_INT 94
38332: PPUSH
38333: CALL_OW 301
38337: PUSH
38338: LD_EXP 45
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PPUSH
38347: LD_INT 30
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 72
38361: NOT
38362: OR
38363: IFFALSE 37629
// end ;
38365: PPOPN 8
38367: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38368: LD_INT 69
38370: IFFALSE 38745
38372: GO 38374
38374: DISABLE
38375: LD_INT 0
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
// begin enable ;
38381: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38382: LD_INT 35
38384: PPUSH
38385: LD_INT 1190
38387: PPUSH
38388: CALL_OW 12
38392: PPUSH
38393: CALL_OW 67
// tmp := [ ] ;
38397: LD_ADDR_VAR 0 2
38401: PUSH
38402: EMPTY
38403: ST_TO_ADDR
// uc_side := 8 ;
38404: LD_ADDR_OWVAR 20
38408: PUSH
38409: LD_INT 8
38411: ST_TO_ADDR
// uc_nation := 2 ;
38412: LD_ADDR_OWVAR 21
38416: PUSH
38417: LD_INT 2
38419: ST_TO_ADDR
// InitHc ;
38420: CALL_OW 19
// for i = 1 to 3 do
38424: LD_ADDR_VAR 0 1
38428: PUSH
38429: DOUBLE
38430: LD_INT 1
38432: DEC
38433: ST_TO_ADDR
38434: LD_INT 3
38436: PUSH
38437: FOR_TO
38438: IFFALSE 38565
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38440: LD_INT 13
38442: PUSH
38443: LD_INT 14
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PPUSH
38453: LD_INT 2
38455: PPUSH
38456: CALL_OW 12
38460: ARRAY
38461: PPUSH
38462: LD_INT 3
38464: PPUSH
38465: LD_INT 5
38467: PPUSH
38468: LD_INT 27
38470: PUSH
38471: LD_INT 28
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PPUSH
38481: LD_INT 2
38483: PPUSH
38484: CALL_OW 12
38488: ARRAY
38489: PPUSH
38490: LD_INT 100
38492: PPUSH
38493: CALL 2034 0 5
// un := CreateVehicle ;
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: CALL_OW 45
38506: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38507: LD_VAR 0 3
38511: PPUSH
38512: LD_INT 4
38514: PPUSH
38515: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38519: LD_VAR 0 3
38523: PPUSH
38524: LD_INT 15
38526: PPUSH
38527: LD_INT 0
38529: PPUSH
38530: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38534: LD_ADDR_VAR 0 2
38538: PUSH
38539: LD_VAR 0 2
38543: PPUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_INT 1
38551: PLUS
38552: PPUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: CALL_OW 1
38562: ST_TO_ADDR
// end ;
38563: GO 38437
38565: POP
38566: POP
// for i = 1 to 4 do
38567: LD_ADDR_VAR 0 1
38571: PUSH
38572: DOUBLE
38573: LD_INT 1
38575: DEC
38576: ST_TO_ADDR
38577: LD_INT 4
38579: PUSH
38580: FOR_TO
38581: IFFALSE 38660
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38583: LD_INT 0
38585: PPUSH
38586: LD_INT 1
38588: PPUSH
38589: LD_INT 4
38591: PPUSH
38592: CALL_OW 12
38596: PPUSH
38597: LD_INT 6
38599: PPUSH
38600: CALL_OW 380
// un := CreateHuman ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: CALL_OW 44
38613: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38614: LD_VAR 0 3
38618: PPUSH
38619: LD_INT 15
38621: PPUSH
38622: LD_INT 0
38624: PPUSH
38625: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38629: LD_ADDR_VAR 0 2
38633: PUSH
38634: LD_VAR 0 2
38638: PPUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 1
38646: PLUS
38647: PPUSH
38648: LD_VAR 0 3
38652: PPUSH
38653: CALL_OW 1
38657: ST_TO_ADDR
// end ;
38658: GO 38580
38660: POP
38661: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38662: LD_VAR 0 2
38666: PPUSH
38667: LD_INT 210
38669: PPUSH
38670: LD_INT 177
38672: PPUSH
38673: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38677: LD_ADDR_VAR 0 4
38681: PUSH
38682: LD_INT 10
38684: PPUSH
38685: LD_INT 22
38687: PUSH
38688: LD_INT 8
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PPUSH
38695: CALL_OW 70
38699: ST_TO_ADDR
// if x then
38700: LD_VAR 0 4
38704: IFFALSE 38732
// for i in x do
38706: LD_ADDR_VAR 0 1
38710: PUSH
38711: LD_VAR 0 4
38715: PUSH
38716: FOR_IN
38717: IFFALSE 38730
// RemoveUnit ( i ) ;
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 64
38728: GO 38716
38730: POP
38731: POP
// wait ( 0 0$3 ) ;
38732: LD_INT 105
38734: PPUSH
38735: CALL_OW 67
// until tmp ;
38739: LD_VAR 0 2
38743: IFFALSE 38662
// end ; end_of_file
38745: PPOPN 4
38747: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38748: LD_INT 0
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
// InGameOn ;
38756: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38760: LD_EXP 18
38764: PPUSH
38765: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38769: LD_ADDR_VAR 0 2
38773: PUSH
38774: LD_INT 22
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 25
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PPUSH
38798: CALL_OW 69
38802: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
38803: LD_ADDR_VAR 0 4
38807: PUSH
38808: LD_INT 22
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 34
38820: PUSH
38821: LD_INT 11
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PPUSH
38832: CALL_OW 69
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: ST_TO_ADDR
// for i = 1 to tmp do
38841: LD_ADDR_VAR 0 6
38845: PUSH
38846: DOUBLE
38847: LD_INT 1
38849: DEC
38850: ST_TO_ADDR
38851: LD_VAR 0 2
38855: PUSH
38856: FOR_TO
38857: IFFALSE 38904
// begin if i = 5 then
38859: LD_VAR 0 6
38863: PUSH
38864: LD_INT 5
38866: EQUAL
38867: IFFALSE 38871
// break ;
38869: GO 38904
// sols := Replace ( sols , i , tmp [ i ] ) ;
38871: LD_ADDR_VAR 0 5
38875: PUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: LD_VAR 0 6
38885: PPUSH
38886: LD_VAR 0 2
38890: PUSH
38891: LD_VAR 0 6
38895: ARRAY
38896: PPUSH
38897: CALL_OW 1
38901: ST_TO_ADDR
// end ;
38902: GO 38856
38904: POP
38905: POP
// tmp := ar_force_tmp ;
38906: LD_ADDR_VAR 0 2
38910: PUSH
38911: LD_EXP 36
38915: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 1
38923: ARRAY
38924: PPUSH
38925: LD_INT 108
38927: PPUSH
38928: LD_INT 139
38930: PPUSH
38931: LD_INT 0
38933: PPUSH
38934: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
38938: LD_VAR 0 2
38942: PUSH
38943: LD_INT 1
38945: ARRAY
38946: PPUSH
38947: LD_EXP 18
38951: PPUSH
38952: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: PPUSH
38965: LD_INT 114
38967: PPUSH
38968: LD_INT 132
38970: PPUSH
38971: LD_INT 0
38973: PPUSH
38974: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
38978: LD_VAR 0 2
38982: PUSH
38983: LD_INT 3
38985: ARRAY
38986: PPUSH
38987: LD_INT 115
38989: PPUSH
38990: LD_INT 132
38992: PPUSH
38993: LD_INT 0
38995: PPUSH
38996: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
39000: LD_VAR 0 2
39004: PUSH
39005: LD_INT 2
39007: ARRAY
39008: PUSH
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 3
39016: ARRAY
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PPUSH
39022: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
39026: LD_VAR 0 4
39030: PPUSH
39031: LD_INT 83
39033: PPUSH
39034: LD_INT 123
39036: PPUSH
39037: CALL_OW 111
// Wait ( 0 0$01 ) ;
39041: LD_INT 35
39043: PPUSH
39044: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
39048: LD_INT 90
39050: PPUSH
39051: LD_INT 144
39053: PPUSH
39054: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39058: LD_VAR 0 5
39062: PPUSH
39063: LD_INT 88
39065: PPUSH
39066: LD_INT 129
39068: PPUSH
39069: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39073: LD_ADDR_VAR 0 3
39077: PUSH
39078: LD_INT 92
39080: PUSH
39081: LD_INT 131
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 88
39090: PUSH
39091: LD_INT 127
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 91
39100: PUSH
39101: LD_INT 132
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 92
39110: PUSH
39111: LD_INT 134
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// for i = 1 to sols do
39124: LD_ADDR_VAR 0 6
39128: PUSH
39129: DOUBLE
39130: LD_INT 1
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 5
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39213
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39142: LD_VAR 0 5
39146: PUSH
39147: LD_VAR 0 6
39151: ARRAY
39152: PPUSH
39153: LD_VAR 0 3
39157: PUSH
39158: LD_VAR 0 6
39162: ARRAY
39163: PUSH
39164: LD_INT 1
39166: ARRAY
39167: PPUSH
39168: LD_VAR 0 3
39172: PUSH
39173: LD_VAR 0 6
39177: ARRAY
39178: PUSH
39179: LD_INT 2
39181: ARRAY
39182: PPUSH
39183: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39187: LD_VAR 0 5
39191: PUSH
39192: LD_VAR 0 6
39196: ARRAY
39197: PPUSH
39198: CALL_OW 197
// AddComHold ( sols ) ;
39202: LD_VAR 0 5
39206: PPUSH
39207: CALL_OW 200
// end ;
39211: GO 39139
39213: POP
39214: POP
// repeat wait ( 0 0$1 ) ;
39215: LD_INT 35
39217: PPUSH
39218: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39222: LD_VAR 0 5
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PPUSH
39231: LD_INT 92
39233: PPUSH
39234: LD_INT 131
39236: PPUSH
39237: CALL_OW 297
39241: PUSH
39242: LD_INT 4
39244: LESS
39245: IFFALSE 39215
// CenterOnXY ( 96 , 139 ) ;
39247: LD_INT 96
39249: PPUSH
39250: LD_INT 139
39252: PPUSH
39253: CALL_OW 84
// wait ( 0 0$3 ) ;
39257: LD_INT 105
39259: PPUSH
39260: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39264: LD_INT 111
39266: PPUSH
39267: LD_INT 135
39269: PPUSH
39270: LD_INT 1
39272: PPUSH
39273: LD_INT 25
39275: NEG
39276: PPUSH
39277: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39281: LD_VAR 0 2
39285: PUSH
39286: LD_INT 2
39288: ARRAY
39289: PPUSH
39290: LD_VAR 0 2
39294: PUSH
39295: LD_INT 1
39297: ARRAY
39298: PPUSH
39299: CALL_OW 250
39303: PUSH
39304: LD_INT 3
39306: PLUS
39307: PPUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 251
39321: PPUSH
39322: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 3
39333: ARRAY
39334: PPUSH
39335: LD_INT 7
39337: PPUSH
39338: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 2
39349: ARRAY
39350: PPUSH
39351: LD_VAR 0 2
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PPUSH
39360: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39364: LD_INT 35
39366: PPUSH
39367: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39371: LD_VAR 0 2
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PPUSH
39380: LD_VAR 0 2
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: PPUSH
39389: CALL_OW 296
39393: PUSH
39394: LD_INT 5
39396: LESS
39397: IFFALSE 39364
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39399: LD_VAR 0 2
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: PPUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: PPUSH
39417: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39421: LD_VAR 0 2
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PPUSH
39430: LD_STRING D1a-Merc1-1
39432: PPUSH
39433: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39437: LD_VAR 0 2
39441: PUSH
39442: LD_INT 2
39444: ARRAY
39445: PPUSH
39446: LD_STRING D1a-FMerc2-1
39448: PPUSH
39449: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 2
39460: ARRAY
39461: PPUSH
39462: LD_VAR 0 2
39466: PUSH
39467: LD_INT 1
39469: ARRAY
39470: PPUSH
39471: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39475: LD_VAR 0 2
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PPUSH
39484: LD_INT 500
39486: PPUSH
39487: CALL_OW 234
// wait ( 0 0$2 ) ;
39491: LD_INT 70
39493: PPUSH
39494: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39498: LD_VAR 0 2
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: PPUSH
39507: LD_INT 2
39509: PPUSH
39510: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39514: LD_INT 10
39516: PPUSH
39517: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39521: LD_VAR 0 2
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PPUSH
39530: LD_STRING D1a-Merc1-2
39532: PPUSH
39533: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39537: LD_INT 7
39539: PPUSH
39540: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39544: LD_VAR 0 2
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39557: LD_VAR 0 2
39561: PUSH
39562: LD_INT 2
39564: ARRAY
39565: PPUSH
39566: LD_INT 10
39568: PPUSH
39569: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39573: LD_VAR 0 2
39577: PUSH
39578: LD_INT 2
39580: ARRAY
39581: PPUSH
39582: LD_STRING D1a-FMerc2-2
39584: PPUSH
39585: CALL_OW 88
// wait ( 0 0$1 ) ;
39589: LD_INT 35
39591: PPUSH
39592: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39596: LD_INT 7
39598: PPUSH
39599: CALL_OW 85
// wait ( 0 0$2 ) ;
39603: LD_INT 70
39605: PPUSH
39606: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39610: LD_EXP 40
39614: PPUSH
39615: LD_STRING D1a-Saliba-1
39617: PPUSH
39618: CALL_OW 91
// KillUnit ( Saliba ) ;
39622: LD_EXP 40
39626: PPUSH
39627: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39631: LD_VAR 0 2
39635: PUSH
39636: LD_INT 3
39638: ARRAY
39639: PPUSH
39640: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39644: LD_EXP 18
39648: PPUSH
39649: CALL_OW 85
// wait ( 0 0$1 ) ;
39653: LD_INT 35
39655: PPUSH
39656: CALL_OW 67
// InGameOff ;
39660: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39664: LD_STRING M1
39666: PPUSH
39667: CALL_OW 337
// game_speed := 4 ;
39671: LD_ADDR_OWVAR 65
39675: PUSH
39676: LD_INT 4
39678: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39679: LD_INT 111
39681: PPUSH
39682: LD_INT 135
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL_OW 331
// SaveForQuickRestart ;
39692: CALL_OW 22
// ar_run := true ;
39696: LD_ADDR_EXP 5
39700: PUSH
39701: LD_INT 1
39703: ST_TO_ADDR
// end ;
39704: LD_VAR 0 1
39708: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39709: LD_EXP 5
39713: IFFALSE 40055
39715: GO 39717
39717: DISABLE
39718: LD_INT 0
39720: PPUSH
39721: PPUSH
39722: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
39723: LD_ADDR_VAR 0 2
39727: PUSH
39728: LD_EXP 36
39732: PUSH
39733: LD_EXP 33
39737: PPUSH
39738: LD_INT 21
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PPUSH
39748: CALL_OW 72
39752: ADD
39753: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
39754: LD_VAR 0 2
39758: PPUSH
39759: LD_INT 5
39761: PPUSH
39762: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
39766: LD_INT 5
39768: PPUSH
39769: LD_INT 1
39771: PPUSH
39772: CALL_OW 343
// k := 1 ;
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_INT 1
39783: ST_TO_ADDR
// for i in tmp do
39784: LD_ADDR_VAR 0 1
39788: PUSH
39789: LD_VAR 0 2
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39880
// begin if IsInUnit ( i ) then
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 310
39806: IFFALSE 39817
// ComExitBuilding ( i ) ;
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 122
// if GetClass ( i ) = 3 then
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 257
39826: PUSH
39827: LD_INT 3
39829: EQUAL
39830: IFFALSE 39866
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
39832: LD_VAR 0 1
39836: PPUSH
39837: LD_EXP 37
39841: PUSH
39842: LD_VAR 0 3
39846: ARRAY
39847: PPUSH
39848: CALL_OW 180
// k := k + 1 ;
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_VAR 0 3
39861: PUSH
39862: LD_INT 1
39864: PLUS
39865: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_INT 10
39873: PPUSH
39874: CALL_OW 173
// end ;
39878: GO 39794
39880: POP
39881: POP
// ar_patrol := true ;
39882: LD_ADDR_EXP 7
39886: PUSH
39887: LD_INT 1
39889: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
39890: LD_INT 10
39892: PPUSH
39893: CALL_OW 67
// for i in tmp do
39897: LD_ADDR_VAR 0 1
39901: PUSH
39902: LD_VAR 0 2
39906: PUSH
39907: FOR_IN
39908: IFFALSE 39936
// if not HasTask ( i ) then
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 314
39919: NOT
39920: IFFALSE 39934
// ComMoveToArea ( i , escape_area ) ;
39922: LD_VAR 0 1
39926: PPUSH
39927: LD_INT 10
39929: PPUSH
39930: CALL_OW 113
39934: GO 39907
39936: POP
39937: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
39938: LD_ADDR_VAR 0 3
39942: PUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: LD_INT 95
39950: PUSH
39951: LD_INT 10
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PPUSH
39958: CALL_OW 72
39962: ST_TO_ADDR
// if k then
39963: LD_VAR 0 3
39967: IFFALSE 40036
// for i in k do
39969: LD_ADDR_VAR 0 1
39973: PUSH
39974: LD_VAR 0 3
39978: PUSH
39979: FOR_IN
39980: IFFALSE 40034
// begin if IsInUnit ( i ) then
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 310
39991: IFFALSE 40007
// RemoveUnit ( IsInUnit ( i ) ) ;
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 310
40002: PPUSH
40003: CALL_OW 64
// RemoveUnit ( i ) ;
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 64
// tmp := tmp diff i ;
40016: LD_ADDR_VAR 0 2
40020: PUSH
40021: LD_VAR 0 2
40025: PUSH
40026: LD_VAR 0 1
40030: DIFF
40031: ST_TO_ADDR
// end ;
40032: GO 39979
40034: POP
40035: POP
// until tmp = [ ] ;
40036: LD_VAR 0 2
40040: PUSH
40041: EMPTY
40042: EQUAL
40043: IFFALSE 39890
// ChangeSideFog ( 5 , 5 ) ;
40045: LD_INT 5
40047: PPUSH
40048: LD_INT 5
40050: PPUSH
40051: CALL_OW 343
// end ;
40055: PPOPN 3
40057: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40058: LD_EXP 7
40062: IFFALSE 40352
40064: GO 40066
40066: DISABLE
40067: LD_INT 0
40069: PPUSH
40070: PPUSH
40071: PPUSH
// begin uc_side := 2 ;
40072: LD_ADDR_OWVAR 20
40076: PUSH
40077: LD_INT 2
40079: ST_TO_ADDR
// uc_nation := 2 ;
40080: LD_ADDR_OWVAR 21
40084: PUSH
40085: LD_INT 2
40087: ST_TO_ADDR
// InitHc ;
40088: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40092: LD_INT 1
40094: PPUSH
40095: LD_INT 1
40097: PPUSH
40098: LD_INT 6
40100: PPUSH
40101: CALL_OW 380
// un := CreateHuman ;
40105: LD_ADDR_VAR 0 2
40109: PUSH
40110: CALL_OW 44
40114: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40115: LD_INT 14
40117: PPUSH
40118: LD_INT 1
40120: PPUSH
40121: LD_INT 1
40123: PPUSH
40124: LD_INT 27
40126: PPUSH
40127: LD_INT 98
40129: PPUSH
40130: CALL 2034 0 5
// veh := CreateVehicle ;
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: CALL_OW 45
40143: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40144: LD_VAR 0 3
40148: PPUSH
40149: LD_INT 4
40151: PPUSH
40152: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40156: LD_VAR 0 3
40160: PPUSH
40161: LD_INT 179
40163: PPUSH
40164: LD_INT 135
40166: PPUSH
40167: LD_INT 0
40169: PPUSH
40170: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40174: LD_VAR 0 2
40178: PPUSH
40179: LD_VAR 0 3
40183: PPUSH
40184: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40188: LD_VAR 0 2
40192: PPUSH
40193: LD_INT 126
40195: PPUSH
40196: LD_INT 133
40198: PPUSH
40199: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40203: LD_INT 10
40205: PPUSH
40206: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40210: LD_INT 1
40212: PPUSH
40213: LD_VAR 0 3
40217: PPUSH
40218: CALL_OW 292
40222: PUSH
40223: LD_VAR 0 3
40227: PPUSH
40228: LD_INT 7
40230: PPUSH
40231: CALL_OW 296
40235: PUSH
40236: LD_INT 9
40238: LESS
40239: OR
40240: IFFALSE 40203
// ComHold ( veh ) ;
40242: LD_VAR 0 3
40246: PPUSH
40247: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40251: LD_VAR 0 2
40255: PPUSH
40256: LD_STRING D2aa-Ar1-1
40258: PPUSH
40259: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40263: LD_VAR 0 2
40267: PPUSH
40268: LD_INT 177
40270: PPUSH
40271: LD_INT 96
40273: PPUSH
40274: CALL_OW 111
// AddComExitVehicle ( un ) ;
40278: LD_VAR 0 2
40282: PPUSH
40283: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40287: LD_INT 35
40289: PPUSH
40290: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40294: LD_VAR 0 2
40298: PPUSH
40299: LD_INT 69
40301: PPUSH
40302: CALL_OW 296
40306: PUSH
40307: LD_INT 15
40309: LESS
40310: IFFALSE 40287
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40312: LD_ADDR_EXP 45
40316: PUSH
40317: LD_EXP 45
40321: PPUSH
40322: LD_INT 3
40324: PUSH
40325: LD_EXP 45
40329: PUSH
40330: LD_INT 3
40332: ARRAY
40333: PUSH
40334: LD_INT 1
40336: PLUS
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PPUSH
40342: LD_VAR 0 2
40346: PPUSH
40347: CALL 3206 0 3
40351: ST_TO_ADDR
// end ;
40352: PPOPN 3
40354: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40355: LD_INT 7
40357: PPUSH
40358: CALL_OW 255
40362: PUSH
40363: LD_INT 1
40365: EQUAL
40366: PUSH
40367: LD_INT 7
40369: PPUSH
40370: CALL_OW 301
40374: OR
40375: IFFALSE 42742
40377: GO 40379
40379: DISABLE
40380: LD_INT 0
40382: PPUSH
40383: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40384: LD_ADDR_VAR 0 2
40388: PUSH
40389: LD_INT 46
40391: PUSH
40392: LD_INT 41
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 50
40401: PUSH
40402: LD_INT 25
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 57
40411: PUSH
40412: LD_INT 75
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 75
40421: PUSH
40422: LD_INT 89
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 51
40431: PUSH
40432: LD_INT 45
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 95
40441: PUSH
40442: LD_INT 95
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 84
40451: PUSH
40452: LD_INT 77
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 101
40461: PUSH
40462: LD_INT 76
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 118
40471: PUSH
40472: LD_INT 81
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 139
40481: PUSH
40482: LD_INT 97
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 129
40491: PUSH
40492: LD_INT 114
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 154
40501: PUSH
40502: LD_INT 111
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// base_captured := true ;
40523: LD_ADDR_EXP 6
40527: PUSH
40528: LD_INT 1
40530: ST_TO_ADDR
// DialogueOn ;
40531: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40535: LD_EXP 18
40539: PPUSH
40540: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40544: LD_EXP 18
40548: PPUSH
40549: LD_STRING D2-JMM-1
40551: PPUSH
40552: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40556: LD_EXP 27
40560: PPUSH
40561: LD_STRING D2-Pow-1
40563: PPUSH
40564: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40568: LD_EXP 18
40572: PPUSH
40573: LD_STRING D2-JMM-2
40575: PPUSH
40576: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40580: LD_EXP 27
40584: PPUSH
40585: LD_STRING D2-Pow-2
40587: PPUSH
40588: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40592: LD_EXP 18
40596: PPUSH
40597: LD_STRING D2-JMM-3
40599: PPUSH
40600: CALL_OW 88
// DialogueOff ;
40604: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40608: LD_STRING M2
40610: PPUSH
40611: CALL_OW 337
// Wait ( 0 0$2 ) ;
40615: LD_INT 70
40617: PPUSH
40618: CALL_OW 67
// if IsOk ( Gary ) then
40622: LD_EXP 29
40626: PPUSH
40627: CALL_OW 302
40631: IFFALSE 40645
// Say ( Gary , D2a-Gary-1 ) ;
40633: LD_EXP 29
40637: PPUSH
40638: LD_STRING D2a-Gary-1
40640: PPUSH
40641: CALL_OW 88
// if IsOk ( Bobby ) then
40645: LD_EXP 21
40649: PPUSH
40650: CALL_OW 302
40654: IFFALSE 40668
// Say ( Bobby , D2a-Bobby-1 ) ;
40656: LD_EXP 21
40660: PPUSH
40661: LD_STRING D2a-Bobby-1
40663: PPUSH
40664: CALL_OW 88
// if IsOk ( Cyrus ) then
40668: LD_EXP 22
40672: PPUSH
40673: CALL_OW 302
40677: IFFALSE 40691
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40679: LD_EXP 22
40683: PPUSH
40684: LD_STRING D2a-Cyrus-1
40686: PPUSH
40687: CALL_OW 88
// if IsOk ( Lisa ) then
40691: LD_EXP 19
40695: PPUSH
40696: CALL_OW 302
40700: IFFALSE 40714
// Say ( Lisa , D2a-Lisa-1 ) ;
40702: LD_EXP 19
40706: PPUSH
40707: LD_STRING D2a-Lisa-1
40709: PPUSH
40710: CALL_OW 88
// if IsOk ( Frank ) then
40714: LD_EXP 30
40718: PPUSH
40719: CALL_OW 302
40723: IFFALSE 40737
// Say ( Frank , D2a-Frank-1 ) ;
40725: LD_EXP 30
40729: PPUSH
40730: LD_STRING D2a-Frank-1
40732: PPUSH
40733: CALL_OW 88
// if IsOk ( Cornel ) then
40737: LD_EXP 28
40741: PPUSH
40742: CALL_OW 302
40746: IFFALSE 40760
// Say ( Cornel , D2a-Corn-1 ) ;
40748: LD_EXP 28
40752: PPUSH
40753: LD_STRING D2a-Corn-1
40755: PPUSH
40756: CALL_OW 88
// if IsOk ( Donaldson ) then
40760: LD_EXP 20
40764: PPUSH
40765: CALL_OW 302
40769: IFFALSE 40783
// Say ( Donaldson , D2a-Don-1 ) ;
40771: LD_EXP 20
40775: PPUSH
40776: LD_STRING D2a-Don-1
40778: PPUSH
40779: CALL_OW 88
// if IsOk ( Brown ) then
40783: LD_EXP 24
40787: PPUSH
40788: CALL_OW 302
40792: IFFALSE 40806
// Say ( Brown , D2a-Brown-1 ) ;
40794: LD_EXP 24
40798: PPUSH
40799: LD_STRING D2a-Brown-1
40801: PPUSH
40802: CALL_OW 88
// Wait ( 0 0$30 ) ;
40806: LD_INT 1050
40808: PPUSH
40809: CALL_OW 67
// if IsOk ( Frank ) then
40813: LD_EXP 30
40817: PPUSH
40818: CALL_OW 302
40822: IFFALSE 41088
// begin DialogueOn ;
40824: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
40828: LD_EXP 18
40832: PUSH
40833: LD_EXP 30
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PPUSH
40842: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
40846: LD_EXP 30
40850: PPUSH
40851: LD_STRING D3F-Frank-1
40853: PPUSH
40854: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
40858: LD_EXP 18
40862: PPUSH
40863: LD_STRING D3F-JMM-1
40865: PPUSH
40866: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
40870: LD_EXP 30
40874: PPUSH
40875: LD_STRING D3F-Frank-2
40877: PPUSH
40878: CALL_OW 88
// case Query ( QFrank ) of 1 :
40882: LD_STRING QFrank
40884: PPUSH
40885: CALL_OW 97
40889: PUSH
40890: LD_INT 1
40892: DOUBLE
40893: EQUAL
40894: IFTRUE 40898
40896: GO 40921
40898: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
40899: LD_EXP 18
40903: PPUSH
40904: LD_STRING D3Fa-JMM-1
40906: PPUSH
40907: CALL_OW 88
// us_scout := 1 ;
40911: LD_ADDR_EXP 8
40915: PUSH
40916: LD_INT 1
40918: ST_TO_ADDR
// end ; 2 :
40919: GO 41084
40921: LD_INT 2
40923: DOUBLE
40924: EQUAL
40925: IFTRUE 40929
40927: GO 41051
40929: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
40930: LD_EXP 18
40934: PPUSH
40935: LD_STRING D3Fb-JMM-1
40937: PPUSH
40938: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
40942: LD_EXP 30
40946: PPUSH
40947: LD_STRING D3Fb-Frank-1
40949: PPUSH
40950: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
40954: LD_STRING QFrank2
40956: PPUSH
40957: CALL_OW 97
40961: PUSH
40962: LD_INT 1
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 41017
40970: POP
// begin us_scout := 2 ;
40971: LD_ADDR_EXP 8
40975: PUSH
40976: LD_INT 2
40978: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
40979: LD_EXP 18
40983: PPUSH
40984: LD_STRING D3Fba-JMM-1
40986: PPUSH
40987: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
40991: LD_EXP 30
40995: PPUSH
40996: LD_STRING D3Fba-Frank-1
40998: PPUSH
40999: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
41003: LD_EXP 18
41007: PPUSH
41008: LD_STRING D3Fba-JMM-2
41010: PPUSH
41011: CALL_OW 88
// end ; 2 :
41015: GO 41049
41017: LD_INT 2
41019: DOUBLE
41020: EQUAL
41021: IFTRUE 41025
41023: GO 41048
41025: POP
// begin us_scout := 0 ;
41026: LD_ADDR_EXP 8
41030: PUSH
41031: LD_INT 0
41033: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
41034: LD_EXP 18
41038: PPUSH
41039: LD_STRING D3Fbb-JMM-1
41041: PPUSH
41042: CALL_OW 88
// end ; end ;
41046: GO 41049
41048: POP
// end ; 3 :
41049: GO 41084
41051: LD_INT 3
41053: DOUBLE
41054: EQUAL
41055: IFTRUE 41059
41057: GO 41083
41059: POP
// begin us_scout := - 1 ;
41060: LD_ADDR_EXP 8
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41069: LD_EXP 18
41073: PPUSH
41074: LD_STRING D3Fc-JMM-1
41076: PPUSH
41077: CALL_OW 88
// end ; end ;
41081: GO 41084
41083: POP
// DialogueOff ;
41084: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41088: LD_EXP 8
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: IN
41104: IFFALSE 41108
// exit ;
41106: GO 42742
// if us_scout in [ 1 , 2 ] then
41108: LD_EXP 8
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: IN
41123: IFFALSE 41824
// begin if IsInUnit ( Frank ) then
41125: LD_EXP 30
41129: PPUSH
41130: CALL_OW 310
41134: IFFALSE 41145
// ComExitBuilding ( Frank ) ;
41136: LD_EXP 30
41140: PPUSH
41141: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41145: LD_EXP 30
41149: PPUSH
41150: CALL_OW 311
41154: IFFALSE 41165
// ComExitVehicle ( Frank ) ;
41156: LD_EXP 30
41160: PPUSH
41161: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41165: LD_EXP 30
41169: PPUSH
41170: LD_INT 4
41172: PPUSH
41173: CALL_OW 235
// wait ( 0 0$1 ) ;
41177: LD_INT 35
41179: PPUSH
41180: CALL_OW 67
// if us_scout = 2 then
41184: LD_EXP 8
41188: PUSH
41189: LD_INT 2
41191: EQUAL
41192: IFFALSE 41560
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41194: LD_EXP 30
41198: PPUSH
41199: LD_INT 75
41201: PPUSH
41202: LD_INT 63
41204: PPUSH
41205: CALL_OW 111
// AddComHold ( Frank ) ;
41209: LD_EXP 30
41213: PPUSH
41214: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41218: LD_EXP 30
41222: PPUSH
41223: LD_INT 770
41225: PPUSH
41226: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41230: LD_EXP 30
41234: PPUSH
41235: LD_INT 100
41237: PPUSH
41238: LD_INT 75
41240: PPUSH
41241: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41245: LD_EXP 30
41249: PPUSH
41250: LD_INT 123
41252: PPUSH
41253: LD_INT 103
41255: PPUSH
41256: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41260: LD_EXP 30
41264: PPUSH
41265: LD_INT 138
41267: PPUSH
41268: LD_INT 108
41270: PPUSH
41271: CALL_OW 171
// AddComHold ( Frank ) ;
41275: LD_EXP 30
41279: PPUSH
41280: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41284: LD_INT 35
41286: PPUSH
41287: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41291: LD_EXP 30
41295: PPUSH
41296: LD_INT 138
41298: PPUSH
41299: LD_INT 108
41301: PPUSH
41302: CALL_OW 307
41306: IFFALSE 41284
// AddComMoveXY ( Frank , 125 , 132 ) ;
41308: LD_EXP 30
41312: PPUSH
41313: LD_INT 125
41315: PPUSH
41316: LD_INT 132
41318: PPUSH
41319: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41323: LD_INT 35
41325: PPUSH
41326: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41330: LD_INT 1
41332: PPUSH
41333: LD_EXP 30
41337: PPUSH
41338: CALL_OW 292
41342: PUSH
41343: LD_EXP 30
41347: PPUSH
41348: LD_INT 7
41350: PPUSH
41351: CALL_OW 296
41355: PUSH
41356: LD_INT 7
41358: LESS
41359: OR
41360: IFFALSE 41323
// DialogueOn ;
41362: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41366: LD_EXP 30
41370: PPUSH
41371: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41375: LD_INT 10
41377: PPUSH
41378: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41382: LD_EXP 18
41386: PPUSH
41387: LD_STRING D4Fa-JMM-1
41389: PPUSH
41390: CALL_OW 88
// for i in points do
41394: LD_ADDR_VAR 0 1
41398: PUSH
41399: LD_VAR 0 2
41403: PUSH
41404: FOR_IN
41405: IFFALSE 41463
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41407: LD_VAR 0 1
41411: PUSH
41412: LD_INT 1
41414: ARRAY
41415: PPUSH
41416: LD_VAR 0 1
41420: PUSH
41421: LD_INT 2
41423: ARRAY
41424: PPUSH
41425: LD_INT 1
41427: PPUSH
41428: LD_INT 20
41430: NEG
41431: PPUSH
41432: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41436: LD_VAR 0 1
41440: PUSH
41441: LD_INT 1
41443: ARRAY
41444: PPUSH
41445: LD_VAR 0 1
41449: PUSH
41450: LD_INT 2
41452: ARRAY
41453: PPUSH
41454: LD_INT 1
41456: PPUSH
41457: CALL_OW 331
// end ;
41461: GO 41404
41463: POP
41464: POP
// dwait ( 0 0$0.5 ) ;
41465: LD_INT 18
41467: PPUSH
41468: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41472: LD_INT 42
41474: PPUSH
41475: LD_INT 27
41477: PPUSH
41478: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41482: LD_EXP 30
41486: PPUSH
41487: LD_STRING D4Fa-Frank-1
41489: PPUSH
41490: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41494: LD_INT 18
41496: PPUSH
41497: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41501: LD_EXP 18
41505: PPUSH
41506: LD_STRING D4Fa-JMM-2
41508: PPUSH
41509: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41513: LD_INT 118
41515: PPUSH
41516: LD_INT 80
41518: PPUSH
41519: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41523: LD_EXP 30
41527: PPUSH
41528: LD_STRING D4Fa-Frank-2
41530: PPUSH
41531: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41535: LD_INT 10
41537: PPUSH
41538: CALL_OW 68
// DialogueOff ;
41542: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41546: LD_EXP 30
41550: PPUSH
41551: LD_INT 1
41553: PPUSH
41554: CALL_OW 235
// end else
41558: GO 41822
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41560: LD_INT 2
41562: PPUSH
41563: LD_INT 4
41565: PPUSH
41566: LD_INT 2
41568: PPUSH
41569: LD_INT 1
41571: PPUSH
41572: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41576: LD_EXP 30
41580: PPUSH
41581: LD_INT 75
41583: PPUSH
41584: LD_INT 63
41586: PPUSH
41587: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41591: LD_EXP 30
41595: PPUSH
41596: LD_INT 175
41598: PPUSH
41599: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41603: LD_EXP 30
41607: PPUSH
41608: LD_INT 102
41610: PPUSH
41611: LD_INT 76
41613: PPUSH
41614: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41618: LD_EXP 30
41622: PPUSH
41623: LD_INT 108
41625: PPUSH
41626: LD_INT 70
41628: PPUSH
41629: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41633: LD_INT 35
41635: PPUSH
41636: CALL_OW 67
// until See ( 2 , Frank ) ;
41640: LD_INT 2
41642: PPUSH
41643: LD_EXP 30
41647: PPUSH
41648: CALL_OW 292
41652: IFFALSE 41633
// ComMoveXY ( Frank , 112 , 118 ) ;
41654: LD_EXP 30
41658: PPUSH
41659: LD_INT 112
41661: PPUSH
41662: LD_INT 118
41664: PPUSH
41665: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41669: LD_EXP 30
41673: PPUSH
41674: CALL_OW 256
41678: PUSH
41679: LD_INT 750
41681: GREATEREQUAL
41682: IFFALSE 41696
// SetLives ( Frank , 700 ) ;
41684: LD_EXP 30
41688: PPUSH
41689: LD_INT 700
41691: PPUSH
41692: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41696: LD_INT 35
41698: PPUSH
41699: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
41703: LD_INT 1
41705: PPUSH
41706: LD_EXP 30
41710: PPUSH
41711: CALL_OW 292
41715: PUSH
41716: LD_EXP 30
41720: PPUSH
41721: LD_INT 7
41723: PPUSH
41724: CALL_OW 296
41728: PUSH
41729: LD_INT 17
41731: LESS
41732: OR
41733: IFFALSE 41696
// DialogueOn ;
41735: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41739: LD_EXP 30
41743: PPUSH
41744: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
41748: LD_EXP 30
41752: PPUSH
41753: LD_STRING D4Fb-Frank-1
41755: PPUSH
41756: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
41760: LD_EXP 18
41764: PPUSH
41765: LD_STRING D4Fb-JMM-1
41767: PPUSH
41768: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
41772: LD_INT 2
41774: PPUSH
41775: LD_STRING D4Fb-FSci1-1
41777: PPUSH
41778: CALL 2263 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
41782: LD_EXP 30
41786: PPUSH
41787: LD_STRING D4Fb-Frank-2
41789: PPUSH
41790: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
41794: LD_EXP 18
41798: PPUSH
41799: LD_STRING D4Fb-JMM-2
41801: PPUSH
41802: CALL_OW 88
// DialogueOff ;
41806: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41810: LD_EXP 30
41814: PPUSH
41815: LD_INT 1
41817: PPUSH
41818: CALL_OW 235
// end ; end else
41822: GO 41981
// if IsOk ( Kikuchi ) then
41824: LD_EXP 31
41828: PPUSH
41829: CALL_OW 302
41833: IFFALSE 41981
// begin DialogueOn ;
41835: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
41839: LD_EXP 18
41843: PUSH
41844: LD_EXP 31
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PPUSH
41853: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
41857: LD_EXP 31
41861: PPUSH
41862: LD_STRING D3Y-Yam-1
41864: PPUSH
41865: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
41869: LD_EXP 18
41873: PPUSH
41874: LD_STRING D3Y-JMM-1
41876: PPUSH
41877: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
41881: LD_EXP 31
41885: PPUSH
41886: LD_STRING D3Y-Yam-2
41888: PPUSH
41889: CALL_OW 88
// case Query ( QYamoko ) of 1 :
41893: LD_STRING QYamoko
41895: PPUSH
41896: CALL_OW 97
41900: PUSH
41901: LD_INT 1
41903: DOUBLE
41904: EQUAL
41905: IFTRUE 41909
41907: GO 41944
41909: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
41910: LD_EXP 18
41914: PPUSH
41915: LD_STRING D3Ya-JMM-1
41917: PPUSH
41918: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
41922: LD_EXP 31
41926: PPUSH
41927: LD_STRING D3Ya-Yam-1
41929: PPUSH
41930: CALL_OW 88
// us_scout := 1 ;
41934: LD_ADDR_EXP 8
41938: PUSH
41939: LD_INT 1
41941: ST_TO_ADDR
// end ; 2 :
41942: GO 41977
41944: LD_INT 2
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 41976
41952: POP
// begin us_scout := - 1 ;
41953: LD_ADDR_EXP 8
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
41962: LD_EXP 18
41966: PPUSH
41967: LD_STRING D3Yb-JMM-1
41969: PPUSH
41970: CALL_OW 88
// end ; end ;
41974: GO 41977
41976: POP
// DialogueOff ;
41977: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41981: LD_EXP 8
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: IN
41997: IFFALSE 42001
// exit ;
41999: GO 42742
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
42001: LD_ADDR_EXP 8
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: LD_OWVAR 67
42024: ARRAY
42025: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
42026: LD_EXP 8
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: IN
42041: IFFALSE 42742
// begin if IsInUnit ( Kikuchi ) then
42043: LD_EXP 31
42047: PPUSH
42048: CALL_OW 310
42052: IFFALSE 42063
// ComExitBuilding ( Kikuchi ) ;
42054: LD_EXP 31
42058: PPUSH
42059: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42063: LD_EXP 31
42067: PPUSH
42068: CALL_OW 311
42072: IFFALSE 42083
// ComExitVehicle ( Kikuchi ) ;
42074: LD_EXP 31
42078: PPUSH
42079: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42083: LD_EXP 31
42087: PPUSH
42088: LD_INT 4
42090: PPUSH
42091: CALL_OW 235
// wait ( 0 0$1 ) ;
42095: LD_INT 35
42097: PPUSH
42098: CALL_OW 67
// if us_scout = 2 then
42102: LD_EXP 8
42106: PUSH
42107: LD_INT 2
42109: EQUAL
42110: IFFALSE 42490
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42112: LD_EXP 31
42116: PPUSH
42117: LD_INT 75
42119: PPUSH
42120: LD_INT 63
42122: PPUSH
42123: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42127: LD_EXP 31
42131: PPUSH
42132: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42136: LD_EXP 31
42140: PPUSH
42141: LD_INT 770
42143: PPUSH
42144: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42148: LD_EXP 31
42152: PPUSH
42153: LD_INT 100
42155: PPUSH
42156: LD_INT 75
42158: PPUSH
42159: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42163: LD_EXP 31
42167: PPUSH
42168: LD_INT 123
42170: PPUSH
42171: LD_INT 103
42173: PPUSH
42174: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42178: LD_EXP 31
42182: PPUSH
42183: LD_INT 138
42185: PPUSH
42186: LD_INT 108
42188: PPUSH
42189: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42193: LD_EXP 31
42197: PPUSH
42198: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42202: LD_INT 35
42204: PPUSH
42205: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42209: LD_EXP 31
42213: PPUSH
42214: LD_INT 138
42216: PPUSH
42217: LD_INT 108
42219: PPUSH
42220: CALL_OW 307
42224: IFFALSE 42202
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42226: LD_EXP 31
42230: PPUSH
42231: LD_INT 125
42233: PPUSH
42234: LD_INT 132
42236: PPUSH
42237: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42241: LD_INT 35
42243: PPUSH
42244: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42248: LD_INT 1
42250: PPUSH
42251: LD_EXP 31
42255: PPUSH
42256: CALL_OW 292
42260: PUSH
42261: LD_EXP 31
42265: PPUSH
42266: LD_INT 7
42268: PPUSH
42269: CALL_OW 296
42273: PUSH
42274: LD_INT 7
42276: LESS
42277: OR
42278: IFFALSE 42241
// DialogueOn ;
42280: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42284: LD_EXP 31
42288: PPUSH
42289: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42293: LD_INT 10
42295: PPUSH
42296: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42300: LD_EXP 31
42304: PPUSH
42305: LD_STRING D4Ya-Yam-1
42307: PPUSH
42308: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42312: LD_EXP 18
42316: PPUSH
42317: LD_STRING D4Ya-JMM-1
42319: PPUSH
42320: CALL_OW 88
// for i in points do
42324: LD_ADDR_VAR 0 1
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: FOR_IN
42335: IFFALSE 42393
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42337: LD_VAR 0 1
42341: PUSH
42342: LD_INT 1
42344: ARRAY
42345: PPUSH
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 2
42353: ARRAY
42354: PPUSH
42355: LD_INT 1
42357: PPUSH
42358: LD_INT 20
42360: NEG
42361: PPUSH
42362: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42366: LD_VAR 0 1
42370: PUSH
42371: LD_INT 1
42373: ARRAY
42374: PPUSH
42375: LD_VAR 0 1
42379: PUSH
42380: LD_INT 2
42382: ARRAY
42383: PPUSH
42384: LD_INT 1
42386: PPUSH
42387: CALL_OW 331
// end ;
42391: GO 42334
42393: POP
42394: POP
// dwait ( 0 0$0.5 ) ;
42395: LD_INT 18
42397: PPUSH
42398: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42402: LD_INT 42
42404: PPUSH
42405: LD_INT 27
42407: PPUSH
42408: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42412: LD_EXP 31
42416: PPUSH
42417: LD_STRING D4Ya-Yam-2
42419: PPUSH
42420: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42424: LD_INT 18
42426: PPUSH
42427: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42431: LD_INT 118
42433: PPUSH
42434: LD_INT 80
42436: PPUSH
42437: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42441: LD_EXP 18
42445: PPUSH
42446: LD_STRING D4Ya-JMM-2
42448: PPUSH
42449: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42453: LD_EXP 31
42457: PPUSH
42458: LD_STRING D4Ya-Yam-3
42460: PPUSH
42461: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42465: LD_INT 10
42467: PPUSH
42468: CALL_OW 68
// DialogueOff ;
42472: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42476: LD_EXP 31
42480: PPUSH
42481: LD_INT 1
42483: PPUSH
42484: CALL_OW 235
// end else
42488: GO 42742
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42490: LD_INT 2
42492: PPUSH
42493: LD_INT 4
42495: PPUSH
42496: LD_INT 2
42498: PPUSH
42499: LD_INT 1
42501: PPUSH
42502: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42506: LD_EXP 31
42510: PPUSH
42511: LD_INT 75
42513: PPUSH
42514: LD_INT 63
42516: PPUSH
42517: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42521: LD_EXP 31
42525: PPUSH
42526: LD_INT 175
42528: PPUSH
42529: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42533: LD_EXP 31
42537: PPUSH
42538: LD_INT 102
42540: PPUSH
42541: LD_INT 76
42543: PPUSH
42544: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42548: LD_EXP 31
42552: PPUSH
42553: LD_INT 108
42555: PPUSH
42556: LD_INT 70
42558: PPUSH
42559: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42563: LD_INT 35
42565: PPUSH
42566: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42570: LD_INT 2
42572: PPUSH
42573: LD_EXP 31
42577: PPUSH
42578: CALL_OW 292
42582: IFFALSE 42563
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42584: LD_EXP 31
42588: PPUSH
42589: LD_INT 112
42591: PPUSH
42592: LD_INT 118
42594: PPUSH
42595: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42599: LD_EXP 31
42603: PPUSH
42604: CALL_OW 256
42608: PUSH
42609: LD_INT 750
42611: GREATEREQUAL
42612: IFFALSE 42626
// SetLives ( Kikuchi , 700 ) ;
42614: LD_EXP 31
42618: PPUSH
42619: LD_INT 700
42621: PPUSH
42622: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42626: LD_INT 35
42628: PPUSH
42629: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42633: LD_INT 1
42635: PPUSH
42636: LD_EXP 31
42640: PPUSH
42641: CALL_OW 292
42645: PUSH
42646: LD_EXP 31
42650: PPUSH
42651: LD_INT 7
42653: PPUSH
42654: CALL_OW 296
42658: PUSH
42659: LD_INT 17
42661: LESS
42662: OR
42663: IFFALSE 42626
// DialogueOn ;
42665: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42669: LD_EXP 31
42673: PPUSH
42674: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42678: LD_EXP 31
42682: PPUSH
42683: LD_STRING D4Yb-Yam-1
42685: PPUSH
42686: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
42690: LD_EXP 18
42694: PPUSH
42695: LD_STRING D4Yb-JMM-1
42697: PPUSH
42698: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
42702: LD_EXP 31
42706: PPUSH
42707: LD_STRING D4Yb-Yam-2
42709: PPUSH
42710: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
42714: LD_EXP 18
42718: PPUSH
42719: LD_STRING D4Yb-JMM-2
42721: PPUSH
42722: CALL_OW 88
// DialogueOff ;
42726: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42730: LD_EXP 31
42734: PPUSH
42735: LD_INT 1
42737: PPUSH
42738: CALL_OW 235
// end ; end ; end ;
42742: PPOPN 2
42744: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
42745: LD_EXP 6
42749: IFFALSE 43774
42751: GO 42753
42753: DISABLE
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
// begin enable ;
42760: ENABLE
// if not seen [ 1 ] then
42761: LD_EXP 9
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: NOT
42770: IFFALSE 42950
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
42772: LD_ADDR_VAR 0 2
42776: PUSH
42777: LD_INT 22
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 25
42792: PUSH
42793: LD_INT 11
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 33
42802: PUSH
42803: LD_INT 4
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PPUSH
42819: CALL_OW 69
42823: ST_TO_ADDR
// if tmp then
42824: LD_VAR 0 2
42828: IFFALSE 42950
// for i in tmp do
42830: LD_ADDR_VAR 0 1
42834: PUSH
42835: LD_VAR 0 2
42839: PUSH
42840: FOR_IN
42841: IFFALSE 42948
// if See ( 1 , i ) then
42843: LD_INT 1
42845: PPUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 292
42855: IFFALSE 42946
// begin seen := Replace ( seen , 1 , true ) ;
42857: LD_ADDR_EXP 9
42861: PUSH
42862: LD_EXP 9
42866: PPUSH
42867: LD_INT 1
42869: PPUSH
42870: LD_INT 1
42872: PPUSH
42873: CALL_OW 1
42877: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42878: LD_INT 1
42880: PPUSH
42881: CALL 2092 0 1
42885: IFFALSE 42946
// begin DialogueOn ;
42887: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42900: LD_INT 10
42902: PPUSH
42903: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_INT 1
42914: PPUSH
42915: LD_STRING D5a-Sol2-1
42917: PPUSH
42918: CALL 2263 0 2
42922: ST_TO_ADDR
// if not un then
42923: LD_VAR 0 3
42927: NOT
42928: IFFALSE 42940
// SayRand ( sex_female , D5a-FSol2-1 ) ;
42930: LD_INT 2
42932: PPUSH
42933: LD_STRING D5a-FSol2-1
42935: PPUSH
42936: CALL 2263 0 2
// DialogueOff ;
42940: CALL_OW 7
// break ;
42944: GO 42948
// end ; end ;
42946: GO 42840
42948: POP
42949: POP
// end ; if not seen [ 2 ] then
42950: LD_EXP 9
42954: PUSH
42955: LD_INT 2
42957: ARRAY
42958: NOT
42959: IFFALSE 43176
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
42961: LD_ADDR_VAR 0 2
42965: PUSH
42966: LD_INT 22
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 25
42978: PUSH
42979: LD_INT 17
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PPUSH
42990: CALL_OW 69
42994: ST_TO_ADDR
// if tmp then
42995: LD_VAR 0 2
42999: IFFALSE 43176
// for i in tmp do
43001: LD_ADDR_VAR 0 1
43005: PUSH
43006: LD_VAR 0 2
43010: PUSH
43011: FOR_IN
43012: IFFALSE 43174
// if See ( 1 , i ) then
43014: LD_INT 1
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 292
43026: IFFALSE 43172
// begin seen := Replace ( seen , 2 , true ) ;
43028: LD_ADDR_EXP 9
43032: PUSH
43033: LD_EXP 9
43037: PPUSH
43038: LD_INT 2
43040: PPUSH
43041: LD_INT 1
43043: PPUSH
43044: CALL_OW 1
43048: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43049: LD_INT 1
43051: PPUSH
43052: CALL 2092 0 1
43056: IFFALSE 43172
// begin DialogueOn ;
43058: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43062: LD_VAR 0 1
43066: PPUSH
43067: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43071: LD_INT 10
43073: PPUSH
43074: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43078: LD_ADDR_VAR 0 3
43082: PUSH
43083: LD_INT 1
43085: PPUSH
43086: LD_STRING D5b-Sol1-1
43088: PPUSH
43089: CALL 2263 0 2
43093: ST_TO_ADDR
// if not un then
43094: LD_VAR 0 3
43098: NOT
43099: IFFALSE 43117
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_INT 2
43108: PPUSH
43109: LD_STRING D5b-FSol1-1
43111: PPUSH
43112: CALL 2263 0 2
43116: ST_TO_ADDR
// if un then
43117: LD_VAR 0 3
43121: IFFALSE 43166
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: LD_INT 1
43130: PPUSH
43131: LD_STRING D5b-Sol2-1
43133: PPUSH
43134: LD_VAR 0 3
43138: PPUSH
43139: CALL 2482 0 3
43143: ST_TO_ADDR
// if not un2 then
43144: LD_VAR 0 4
43148: NOT
43149: IFFALSE 43166
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43151: LD_INT 2
43153: PPUSH
43154: LD_STRING D5b-FSol2-1
43156: PPUSH
43157: LD_VAR 0 3
43161: PPUSH
43162: CALL 2482 0 3
// end ; DialogueOff ;
43166: CALL_OW 7
// break ;
43170: GO 43174
// end ; end ;
43172: GO 43011
43174: POP
43175: POP
// end ; if not seen [ 3 ] then
43176: LD_EXP 9
43180: PUSH
43181: LD_INT 3
43183: ARRAY
43184: NOT
43185: IFFALSE 43359
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43187: LD_ADDR_VAR 0 2
43191: PUSH
43192: LD_INT 22
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 33
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PPUSH
43216: CALL_OW 69
43220: ST_TO_ADDR
// if tmp then
43221: LD_VAR 0 2
43225: IFFALSE 43359
// for i in tmp do
43227: LD_ADDR_VAR 0 1
43231: PUSH
43232: LD_VAR 0 2
43236: PUSH
43237: FOR_IN
43238: IFFALSE 43357
// if See ( 1 , i ) then
43240: LD_INT 1
43242: PPUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 292
43252: IFFALSE 43355
// begin seen := Replace ( seen , 3 , true ) ;
43254: LD_ADDR_EXP 9
43258: PUSH
43259: LD_EXP 9
43263: PPUSH
43264: LD_INT 3
43266: PPUSH
43267: LD_INT 1
43269: PPUSH
43270: CALL_OW 1
43274: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43275: LD_INT 1
43277: PPUSH
43278: CALL 2092 0 1
43282: IFFALSE 43355
// begin DialogueOn ;
43284: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43297: LD_INT 10
43299: PPUSH
43300: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43304: LD_ADDR_VAR 0 3
43308: PUSH
43309: LD_INT 1
43311: PPUSH
43312: LD_STRING D8-Sol1-1
43314: PPUSH
43315: CALL 2263 0 2
43319: ST_TO_ADDR
// if not un then
43320: LD_VAR 0 3
43324: NOT
43325: IFFALSE 43337
// SayRand ( sex_female , D8-FSol1-1 ) ;
43327: LD_INT 2
43329: PPUSH
43330: LD_STRING D8-FSol1-1
43332: PPUSH
43333: CALL 2263 0 2
// Say ( JMM , D8-JMM-1 ) ;
43337: LD_EXP 18
43341: PPUSH
43342: LD_STRING D8-JMM-1
43344: PPUSH
43345: CALL_OW 88
// DialogueOff ;
43349: CALL_OW 7
// break ;
43353: GO 43357
// end ; end ;
43355: GO 43237
43357: POP
43358: POP
// end ; if not seen [ 4 ] then
43359: LD_EXP 9
43363: PUSH
43364: LD_INT 4
43366: ARRAY
43367: NOT
43368: IFFALSE 43530
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43370: LD_ADDR_VAR 0 2
43374: PUSH
43375: LD_INT 22
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 33
43387: PUSH
43388: LD_INT 5
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PPUSH
43399: CALL_OW 69
43403: ST_TO_ADDR
// if tmp then
43404: LD_VAR 0 2
43408: IFFALSE 43530
// for i in tmp do
43410: LD_ADDR_VAR 0 1
43414: PUSH
43415: LD_VAR 0 2
43419: PUSH
43420: FOR_IN
43421: IFFALSE 43528
// if See ( 1 , i ) then
43423: LD_INT 1
43425: PPUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 292
43435: IFFALSE 43526
// begin seen := Replace ( seen , 4 , true ) ;
43437: LD_ADDR_EXP 9
43441: PUSH
43442: LD_EXP 9
43446: PPUSH
43447: LD_INT 4
43449: PPUSH
43450: LD_INT 1
43452: PPUSH
43453: CALL_OW 1
43457: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43458: LD_INT 1
43460: PPUSH
43461: CALL 2092 0 1
43465: IFFALSE 43526
// begin DialogueOn ;
43467: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43480: LD_INT 10
43482: PPUSH
43483: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_INT 1
43494: PPUSH
43495: LD_STRING D5a-Sol1-1
43497: PPUSH
43498: CALL 2263 0 2
43502: ST_TO_ADDR
// if not un then
43503: LD_VAR 0 3
43507: NOT
43508: IFFALSE 43520
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43510: LD_INT 2
43512: PPUSH
43513: LD_STRING D5a-FSol1-1
43515: PPUSH
43516: CALL 2263 0 2
// DialogueOff ;
43520: CALL_OW 7
// break ;
43524: GO 43528
// end ; end ;
43526: GO 43420
43528: POP
43529: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43530: LD_EXP 9
43534: PUSH
43535: LD_INT 5
43537: ARRAY
43538: NOT
43539: PUSH
43540: LD_EXP 9
43544: PUSH
43545: LD_INT 3
43547: ARRAY
43548: AND
43549: IFFALSE 43723
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43551: LD_ADDR_VAR 0 2
43555: PUSH
43556: LD_INT 22
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 34
43568: PUSH
43569: LD_INT 31
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PPUSH
43580: CALL_OW 69
43584: ST_TO_ADDR
// if tmp then
43585: LD_VAR 0 2
43589: IFFALSE 43723
// for i in tmp do
43591: LD_ADDR_VAR 0 1
43595: PUSH
43596: LD_VAR 0 2
43600: PUSH
43601: FOR_IN
43602: IFFALSE 43721
// if See ( 1 , i ) then
43604: LD_INT 1
43606: PPUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 292
43616: IFFALSE 43719
// begin seen := Replace ( seen , 5 , true ) ;
43618: LD_ADDR_EXP 9
43622: PUSH
43623: LD_EXP 9
43627: PPUSH
43628: LD_INT 5
43630: PPUSH
43631: LD_INT 1
43633: PPUSH
43634: CALL_OW 1
43638: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43639: LD_INT 1
43641: PPUSH
43642: CALL 2092 0 1
43646: IFFALSE 43719
// begin DialogueOn ;
43648: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43652: LD_VAR 0 1
43656: PPUSH
43657: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43661: LD_INT 10
43663: PPUSH
43664: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: LD_INT 1
43675: PPUSH
43676: LD_STRING D8a-Sol2-1
43678: PPUSH
43679: CALL 2263 0 2
43683: ST_TO_ADDR
// if not un then
43684: LD_VAR 0 3
43688: NOT
43689: IFFALSE 43701
// SayRand ( sex_female , D8a-FSol2-1 ) ;
43691: LD_INT 2
43693: PPUSH
43694: LD_STRING D8a-FSol2-1
43696: PPUSH
43697: CALL 2263 0 2
// Say ( JMM , D8a-JMM-1 ) ;
43701: LD_EXP 18
43705: PPUSH
43706: LD_STRING D8a-JMM-1
43708: PPUSH
43709: CALL_OW 88
// DialogueOff ;
43713: CALL_OW 7
// break ;
43717: GO 43721
// end ; end ;
43719: GO 43601
43721: POP
43722: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
43723: LD_EXP 9
43727: PUSH
43728: LD_INT 1
43730: ARRAY
43731: PUSH
43732: LD_EXP 9
43736: PUSH
43737: LD_INT 2
43739: ARRAY
43740: AND
43741: PUSH
43742: LD_EXP 9
43746: PUSH
43747: LD_INT 3
43749: ARRAY
43750: AND
43751: PUSH
43752: LD_EXP 9
43756: PUSH
43757: LD_INT 4
43759: ARRAY
43760: AND
43761: PUSH
43762: LD_EXP 9
43766: PUSH
43767: LD_INT 5
43769: ARRAY
43770: AND
43771: IFFALSE 43774
// disable ;
43773: DISABLE
// end ;
43774: PPOPN 4
43776: END
// every 0 0$1 trigger kamikazed do var un ;
43777: LD_EXP 10
43781: IFFALSE 43979
43783: GO 43785
43785: DISABLE
43786: LD_INT 0
43788: PPUSH
// begin DialogueOn ;
43789: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
43793: LD_EXP 10
43797: PPUSH
43798: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
43802: LD_ADDR_VAR 0 1
43806: PUSH
43807: LD_INT 1
43809: PPUSH
43810: LD_STRING D5c-Sol1-1
43812: PPUSH
43813: CALL 2263 0 2
43817: ST_TO_ADDR
// if not un then
43818: LD_VAR 0 1
43822: NOT
43823: IFFALSE 43841
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
43825: LD_ADDR_VAR 0 1
43829: PUSH
43830: LD_INT 2
43832: PPUSH
43833: LD_STRING D5c-Sol1-1
43835: PPUSH
43836: CALL 2263 0 2
43840: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
43841: LD_EXP 18
43845: PPUSH
43846: LD_STRING D5c-JMM-1
43848: PPUSH
43849: CALL_OW 88
// if IsOk ( Lisa ) then
43853: LD_EXP 19
43857: PPUSH
43858: CALL_OW 302
43862: IFFALSE 43878
// Say ( Lisa , D5d-Lisa-1 ) else
43864: LD_EXP 19
43868: PPUSH
43869: LD_STRING D5d-Lisa-1
43871: PPUSH
43872: CALL_OW 88
43876: GO 43963
// if IsOk ( Cyrus ) then
43878: LD_EXP 22
43882: PPUSH
43883: CALL_OW 302
43887: IFFALSE 43903
// Say ( Cyrus , D5d-Cyrus-1 ) else
43889: LD_EXP 22
43893: PPUSH
43894: LD_STRING D5d-Cyrus-1
43896: PPUSH
43897: CALL_OW 88
43901: GO 43963
// if IsOk ( Gary ) then
43903: LD_EXP 29
43907: PPUSH
43908: CALL_OW 302
43912: IFFALSE 43928
// Say ( Gary , D5d-Gary-1 ) else
43914: LD_EXP 29
43918: PPUSH
43919: LD_STRING D5d-Gary-1
43921: PPUSH
43922: CALL_OW 88
43926: GO 43963
// if GetSex ( un ) = sex_male then
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 258
43937: PUSH
43938: LD_INT 1
43940: EQUAL
43941: IFFALSE 43957
// Say ( un , D5d-Sol1-1 ) else
43943: LD_VAR 0 1
43947: PPUSH
43948: LD_STRING D5d-Sol1-1
43950: PPUSH
43951: CALL_OW 88
43955: GO 43963
// begin DialogueOff ;
43957: CALL_OW 7
// exit ;
43961: GO 43979
// end ; Say ( JMM , D5d-JMM-1 ) ;
43963: LD_EXP 18
43967: PPUSH
43968: LD_STRING D5d-JMM-1
43970: PPUSH
43971: CALL_OW 88
// DialogueOff ;
43975: CALL_OW 7
// end ;
43979: PPOPN 1
43981: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
43982: LD_INT 1
43984: PPUSH
43985: LD_INT 17
43987: PPUSH
43988: CALL_OW 294
43992: PUSH
43993: LD_INT 2
43995: GREATEREQUAL
43996: IFFALSE 44117
43998: GO 44000
44000: DISABLE
44001: LD_INT 0
44003: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
44004: LD_INT 10
44006: PPUSH
44007: LD_INT 5
44009: PPUSH
44010: LD_INT 1
44012: PPUSH
44013: LD_INT 10
44015: NEG
44016: PPUSH
44017: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
44021: LD_INT 10
44023: PPUSH
44024: LD_INT 5
44026: PPUSH
44027: LD_INT 1
44029: PPUSH
44030: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
44034: LD_INT 10
44036: PPUSH
44037: LD_INT 5
44039: PPUSH
44040: CALL_OW 86
// DialogueOn ;
44044: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
44048: LD_ADDR_VAR 0 1
44052: PUSH
44053: LD_INT 1
44055: PPUSH
44056: LD_STRING D6-Sci1-1
44058: PPUSH
44059: CALL 2263 0 2
44063: ST_TO_ADDR
// if un then
44064: LD_VAR 0 1
44068: IFFALSE 44106
// begin Say ( JMM , D6-JMM-1 ) ;
44070: LD_EXP 18
44074: PPUSH
44075: LD_STRING D6-JMM-1
44077: PPUSH
44078: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44082: LD_VAR 0 1
44086: PPUSH
44087: LD_STRING D6-Sci1-2
44089: PPUSH
44090: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44094: LD_EXP 18
44098: PPUSH
44099: LD_STRING D6-JMM-2
44101: PPUSH
44102: CALL_OW 88
// end ; DialogueOff ;
44106: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44110: LD_STRING M3
44112: PPUSH
44113: CALL_OW 337
// end ;
44117: PPOPN 1
44119: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44120: LD_OWVAR 1
44124: PUSH
44125: LD_INT 65100
44127: GREATEREQUAL
44128: PUSH
44129: LD_INT 2
44131: PPUSH
44132: LD_INT 169
44134: PPUSH
44135: LD_INT 90
44137: PPUSH
44138: LD_INT 40
44140: PPUSH
44141: CALL 3700 0 4
44145: PUSH
44146: LD_INT 4
44148: ARRAY
44149: PUSH
44150: LD_INT 0
44152: EQUAL
44153: AND
44154: IFFALSE 45280
44156: GO 44158
44158: DISABLE
44159: LD_INT 0
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
// begin uc_side := 5 ;
44165: LD_ADDR_OWVAR 20
44169: PUSH
44170: LD_INT 5
44172: ST_TO_ADDR
// uc_nation := 2 ;
44173: LD_ADDR_OWVAR 21
44177: PUSH
44178: LD_INT 2
44180: ST_TO_ADDR
// InitHc ;
44181: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44185: LD_INT 1
44187: PPUSH
44188: LD_INT 3
44190: PPUSH
44191: LD_INT 8
44193: PPUSH
44194: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44198: LD_ADDR_OWVAR 29
44202: PUSH
44203: LD_INT 12
44205: PUSH
44206: LD_INT 12
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44213: LD_ADDR_OWVAR 33
44217: PUSH
44218: LD_STRING SecondCharsGal
44220: ST_TO_ADDR
// hc_face_number := 7 ;
44221: LD_ADDR_OWVAR 34
44225: PUSH
44226: LD_INT 7
44228: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44229: LD_ADDR_EXP 42
44233: PUSH
44234: CALL_OW 44
44238: ST_TO_ADDR
// InitHc ;
44239: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44243: LD_INT 1
44245: PPUSH
44246: LD_INT 16
44248: PPUSH
44249: LD_INT 2
44251: PPUSH
44252: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44256: LD_ADDR_OWVAR 29
44260: PUSH
44261: LD_INT 12
44263: PUSH
44264: LD_INT 12
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// hc_name :=  ;
44271: LD_ADDR_OWVAR 26
44275: PUSH
44276: LD_STRING 
44278: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44279: LD_ADDR_EXP 43
44283: PUSH
44284: CALL_OW 44
44288: ST_TO_ADDR
// InitHc ;
44289: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44293: LD_INT 35
44295: PPUSH
44296: CALL_OW 67
// until not InBattle ( 1 ) ;
44300: LD_INT 1
44302: PPUSH
44303: CALL_OW 463
44307: NOT
44308: IFFALSE 44293
// wait ( 0 0$5 ) ;
44310: LD_INT 175
44312: PPUSH
44313: CALL_OW 67
// DialogueOn ;
44317: CALL_OW 6
// InGameOn ;
44321: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44325: LD_ADDR_VAR 0 1
44329: PUSH
44330: LD_INT 22
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 25
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 25
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 25
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 25
44375: PUSH
44376: LD_INT 4
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 25
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 25
44395: PUSH
44396: LD_INT 8
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PPUSH
44416: CALL_OW 69
44420: PUSH
44421: LD_EXP 18
44425: PUSH
44426: LD_EXP 19
44430: PUSH
44431: LD_EXP 20
44435: PUSH
44436: LD_EXP 21
44440: PUSH
44441: LD_EXP 22
44445: PUSH
44446: LD_EXP 23
44450: PUSH
44451: LD_EXP 24
44455: PUSH
44456: LD_EXP 25
44460: PUSH
44461: LD_EXP 26
44465: PUSH
44466: LD_EXP 28
44470: PUSH
44471: LD_EXP 29
44475: PUSH
44476: LD_EXP 30
44480: PUSH
44481: LD_EXP 31
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: DIFF
44501: PPUSH
44502: LD_INT 26
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PPUSH
44512: CALL_OW 72
44516: PUSH
44517: LD_INT 1
44519: ARRAY
44520: ST_TO_ADDR
// if not un and Brown then
44521: LD_VAR 0 1
44525: NOT
44526: PUSH
44527: LD_EXP 24
44531: AND
44532: IFFALSE 44544
// un := Brown ;
44534: LD_ADDR_VAR 0 1
44538: PUSH
44539: LD_EXP 24
44543: ST_TO_ADDR
// if un then
44544: LD_VAR 0 1
44548: IFFALSE 44574
// begin Say ( un , D7-Sol1-1 ) ;
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_STRING D7-Sol1-1
44557: PPUSH
44558: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44562: LD_EXP 18
44566: PPUSH
44567: LD_STRING D7-JMM-1
44569: PPUSH
44570: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44574: LD_EXP 42
44578: PPUSH
44579: LD_STRING D7-Ar1-1
44581: PPUSH
44582: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44586: LD_EXP 18
44590: PPUSH
44591: LD_STRING D7-JMM-2
44593: PPUSH
44594: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44598: LD_EXP 42
44602: PPUSH
44603: LD_STRING D7-Ar1-2
44605: PPUSH
44606: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44610: LD_EXP 18
44614: PPUSH
44615: LD_STRING D7-JMM-3
44617: PPUSH
44618: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44622: LD_EXP 42
44626: PPUSH
44627: LD_STRING D7-Ar1-3
44629: PPUSH
44630: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44634: LD_EXP 18
44638: PPUSH
44639: LD_STRING D7-JMM-4
44641: PPUSH
44642: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44646: LD_EXP 42
44650: PPUSH
44651: LD_STRING D7-Ar1-4
44653: PPUSH
44654: CALL_OW 94
// InGameOff ;
44658: CALL_OW 9
// DialogueOff ;
44662: CALL_OW 7
// case Query ( QCameras ) of 1 :
44666: LD_STRING QCameras
44668: PPUSH
44669: CALL_OW 97
44673: PUSH
44674: LD_INT 1
44676: DOUBLE
44677: EQUAL
44678: IFTRUE 44682
44680: GO 44685
44682: POP
// ; 2 :
44683: GO 44699
44685: LD_INT 2
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 44698
44693: POP
// exit ; end ;
44694: GO 45280
44696: GO 44699
44698: POP
// ChangeMissionObjectives ( MCar ) ;
44699: LD_STRING MCar
44701: PPUSH
44702: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
44706: LD_INT 124
44708: PPUSH
44709: LD_INT 90
44711: PPUSH
44712: LD_INT 1
44714: PPUSH
44715: LD_INT 6
44717: NEG
44718: PPUSH
44719: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
44723: LD_INT 124
44725: PPUSH
44726: LD_INT 90
44728: PPUSH
44729: LD_INT 1
44731: PPUSH
44732: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
44736: LD_INT 12
44738: PPUSH
44739: LD_INT 1
44741: PPUSH
44742: CALL_OW 424
// wait ( 3 ) ;
44746: LD_INT 3
44748: PPUSH
44749: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
44753: LD_INT 124
44755: PPUSH
44756: LD_INT 90
44758: PPUSH
44759: CALL_OW 86
// cargo := false ;
44763: LD_ADDR_VAR 0 3
44767: PUSH
44768: LD_INT 0
44770: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44771: LD_INT 35
44773: PPUSH
44774: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
44778: LD_ADDR_VAR 0 3
44782: PUSH
44783: LD_INT 12
44785: PPUSH
44786: LD_INT 32
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 34
44798: PUSH
44799: LD_INT 32
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 58
44808: PUSH
44809: EMPTY
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 70
44821: ST_TO_ADDR
// until cargo ;
44822: LD_VAR 0 3
44826: IFFALSE 44771
// cargo := cargo [ 1 ] ;
44828: LD_ADDR_VAR 0 3
44832: PUSH
44833: LD_VAR 0 3
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
44842: LD_VAR 0 3
44846: PPUSH
44847: LD_INT 5
44849: PPUSH
44850: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
44854: LD_INT 12
44856: PPUSH
44857: LD_INT 0
44859: PPUSH
44860: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
44864: LD_EXP 42
44868: PPUSH
44869: LD_INT 11
44871: PPUSH
44872: LD_INT 0
44874: PPUSH
44875: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
44879: LD_EXP 43
44883: PPUSH
44884: LD_INT 11
44886: PPUSH
44887: LD_INT 0
44889: PPUSH
44890: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
44894: LD_EXP 42
44898: PUSH
44899: LD_EXP 43
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PPUSH
44908: LD_INT 12
44910: PPUSH
44911: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
44915: LD_EXP 42
44919: PPUSH
44920: LD_VAR 0 3
44924: PPUSH
44925: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44929: LD_EXP 42
44933: PUSH
44934: LD_EXP 43
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PPUSH
44943: LD_INT 209
44945: PPUSH
44946: LD_INT 178
44948: PPUSH
44949: CALL_OW 171
// while ( true ) do
44953: LD_INT 1
44955: IFFALSE 45109
// begin wait ( 0 0$1 ) ;
44957: LD_INT 35
44959: PPUSH
44960: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
44964: LD_EXP 42
44968: PPUSH
44969: CALL_OW 314
44973: NOT
44974: PUSH
44975: LD_EXP 43
44979: PPUSH
44980: CALL_OW 314
44984: NOT
44985: OR
44986: IFFALSE 45012
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44988: LD_EXP 42
44992: PUSH
44993: LD_EXP 43
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PPUSH
45002: LD_INT 209
45004: PPUSH
45005: LD_INT 178
45007: PPUSH
45008: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
45012: LD_EXP 42
45016: PPUSH
45017: LD_INT 10
45019: PPUSH
45020: CALL_OW 308
45024: IFFALSE 45035
// RemoveUnit ( ar_mechanic ) ;
45026: LD_EXP 42
45030: PPUSH
45031: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
45035: LD_EXP 43
45039: PPUSH
45040: LD_INT 10
45042: PPUSH
45043: CALL_OW 308
45047: IFFALSE 45058
// RemoveUnit ( ar_mechanic_friend ) ;
45049: LD_EXP 43
45053: PPUSH
45054: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
45058: LD_VAR 0 3
45062: PPUSH
45063: LD_INT 10
45065: PPUSH
45066: CALL_OW 308
45070: IFFALSE 45081
// RemoveUnit ( cargo ) ;
45072: LD_VAR 0 3
45076: PPUSH
45077: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
45081: LD_EXP 42
45085: PPUSH
45086: CALL_OW 300
45090: NOT
45091: PUSH
45092: LD_EXP 43
45096: PPUSH
45097: CALL_OW 300
45101: NOT
45102: AND
45103: IFFALSE 45107
// break ;
45105: GO 45109
// end ;
45107: GO 44953
// wait ( 0 0$2 ) ;
45109: LD_INT 70
45111: PPUSH
45112: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
45116: LD_EXP 42
45120: PPUSH
45121: LD_STRING D7a-Ar1-1
45123: PPUSH
45124: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
45128: LD_ADDR_VAR 0 4
45132: PUSH
45133: LD_INT 129
45135: PUSH
45136: LD_INT 10
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 103
45145: PUSH
45146: LD_INT 6
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 148
45155: PUSH
45156: LD_INT 47
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 155
45165: PUSH
45166: LD_INT 16
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// if Difficulty = 1 then
45179: LD_OWVAR 67
45183: PUSH
45184: LD_INT 1
45186: EQUAL
45187: IFFALSE 45224
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45189: LD_ADDR_VAR 0 4
45193: PUSH
45194: LD_VAR 0 4
45198: PUSH
45199: LD_INT 78
45201: PUSH
45202: LD_INT 7
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 104
45211: PUSH
45212: LD_INT 43
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: ADD
45223: ST_TO_ADDR
// for i in tmp do
45224: LD_ADDR_VAR 0 2
45228: PUSH
45229: LD_VAR 0 4
45233: PUSH
45234: FOR_IN
45235: IFFALSE 45268
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45237: LD_VAR 0 2
45241: PUSH
45242: LD_INT 1
45244: ARRAY
45245: PPUSH
45246: LD_VAR 0 2
45250: PUSH
45251: LD_INT 2
45253: ARRAY
45254: PPUSH
45255: LD_INT 1
45257: PPUSH
45258: LD_INT 9
45260: NEG
45261: PPUSH
45262: CALL_OW 330
45266: GO 45234
45268: POP
45269: POP
// CenterOnXY ( 129 , 10 ) ;
45270: LD_INT 129
45272: PPUSH
45273: LD_INT 10
45275: PPUSH
45276: CALL_OW 84
// end ;
45280: PPOPN 4
45282: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45283: LD_EXP 14
45287: PUSH
45288: LD_INT 21000
45290: MINUS
45291: PUSH
45292: LD_OWVAR 1
45296: LESSEQUAL
45297: IFFALSE 45337
45299: GO 45301
45301: DISABLE
// begin powell_warn := true ;
45302: LD_ADDR_EXP 15
45306: PUSH
45307: LD_INT 1
45309: ST_TO_ADDR
// DialogueOn ;
45310: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45314: LD_EXP 27
45318: PPUSH
45319: LD_STRING D9-Pow-1
45321: PPUSH
45322: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45326: LD_INT 10
45328: PPUSH
45329: CALL_OW 68
// DialogueOff ;
45333: CALL_OW 7
// end ;
45337: END
// every 0 0$1 trigger game_time <= tick do
45338: LD_EXP 14
45342: PUSH
45343: LD_OWVAR 1
45347: LESSEQUAL
45348: IFFALSE 45387
45350: GO 45352
45352: DISABLE
// begin DialogueOn ;
45353: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45357: LD_EXP 27
45361: PPUSH
45362: LD_STRING D9a-Pow-1
45364: PPUSH
45365: CALL_OW 94
// dwait ( 0 0$2 ) ;
45369: LD_INT 70
45371: PPUSH
45372: CALL_OW 68
// DialogueOff ;
45376: CALL_OW 7
// YouLost ( Command ) ;
45380: LD_STRING Command
45382: PPUSH
45383: CALL_OW 104
// end ;
45387: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45388: LD_EXP 18
45392: PPUSH
45393: CALL_OW 301
45397: PUSH
45398: LD_EXP 5
45402: AND
45403: IFFALSE 45415
45405: GO 45407
45407: DISABLE
// YouLost ( JMM ) ;
45408: LD_STRING JMM
45410: PPUSH
45411: CALL_OW 104
45415: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
45416: LD_INT 22
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 30
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PPUSH
45440: CALL_OW 69
45444: PUSH
45445: LD_INT 0
45447: EQUAL
45448: PUSH
45449: LD_EXP 18
45453: PPUSH
45454: CALL_OW 302
45458: AND
45459: IFFALSE 46241
45461: GO 45463
45463: DISABLE
45464: LD_INT 0
45466: PPUSH
// begin DialogueOn ;
45467: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45471: LD_OWVAR 1
45475: PUSH
45476: LD_INT 126000
45478: PUSH
45479: LD_INT 105000
45481: PUSH
45482: LD_INT 94500
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: LIST
45489: PUSH
45490: LD_OWVAR 67
45494: ARRAY
45495: LESS
45496: IFFALSE 45510
// AddMedal ( Time1 , 2 ) else
45498: LD_STRING Time1
45500: PPUSH
45501: LD_INT 2
45503: PPUSH
45504: CALL_OW 101
45508: GO 45540
// if not powell_warn then
45510: LD_EXP 15
45514: NOT
45515: IFFALSE 45529
// AddMedal ( Time1 , 1 ) else
45517: LD_STRING Time1
45519: PPUSH
45520: LD_INT 1
45522: PPUSH
45523: CALL_OW 101
45527: GO 45540
// AddMedal ( Time1 , - 1 ) ;
45529: LD_STRING Time1
45531: PPUSH
45532: LD_INT 1
45534: NEG
45535: PPUSH
45536: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45540: LD_EXP 16
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: LD_INT 4
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: PUSH
45559: LD_OWVAR 67
45563: ARRAY
45564: GREATEREQUAL
45565: IFFALSE 45580
// AddMedal ( Destroy , - 2 ) else
45567: LD_STRING Destroy
45569: PPUSH
45570: LD_INT 2
45572: NEG
45573: PPUSH
45574: CALL_OW 101
45578: GO 45697
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45580: LD_INT 22
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 21
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 50
45602: PUSH
45603: EMPTY
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: PPUSH
45611: CALL_OW 69
45615: PUSH
45616: LD_INT 20
45618: GREATEREQUAL
45619: IFFALSE 45634
// AddMedal ( Destroy , - 1 ) else
45621: LD_STRING Destroy
45623: PPUSH
45624: LD_INT 1
45626: NEG
45627: PPUSH
45628: CALL_OW 101
45632: GO 45697
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45634: LD_INT 22
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 21
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 50
45656: PUSH
45657: EMPTY
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: PPUSH
45665: CALL_OW 69
45669: PUSH
45670: LD_INT 10
45672: GREATEREQUAL
45673: IFFALSE 45687
// AddMedal ( Destroy , 1 ) else
45675: LD_STRING Destroy
45677: PPUSH
45678: LD_INT 1
45680: PPUSH
45681: CALL_OW 101
45685: GO 45697
// AddMedal ( Destroy , 2 ) ;
45687: LD_STRING Destroy
45689: PPUSH
45690: LD_INT 2
45692: PPUSH
45693: CALL_OW 101
// if artifact_get then
45697: LD_EXP 12
45701: IFFALSE 45715
// AddMedal ( Artefact , 1 ) else
45703: LD_STRING Artefact
45705: PPUSH
45706: LD_INT 1
45708: PPUSH
45709: CALL_OW 101
45713: GO 45726
// AddMedal ( Artefact , - 1 ) ;
45715: LD_STRING Artefact
45717: PPUSH
45718: LD_INT 1
45720: NEG
45721: PPUSH
45722: CALL_OW 101
// GiveMedals ( MAIN ) ;
45726: LD_STRING MAIN
45728: PPUSH
45729: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
45733: LD_ADDR_VAR 0 1
45737: PUSH
45738: LD_INT 22
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 25
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 25
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 25
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 25
45783: PUSH
45784: LD_INT 4
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 25
45793: PUSH
45794: LD_INT 5
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 25
45803: PUSH
45804: LD_INT 8
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PPUSH
45824: CALL_OW 69
45828: ST_TO_ADDR
// RewardPeople ( tmp ) ;
45829: LD_VAR 0 1
45833: PPUSH
45834: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
45838: LD_VAR 0 1
45842: PUSH
45843: LD_EXP 18
45847: PUSH
45848: LD_EXP 19
45852: PUSH
45853: LD_EXP 20
45857: PUSH
45858: LD_EXP 21
45862: PUSH
45863: LD_EXP 22
45867: PUSH
45868: LD_EXP 23
45872: PUSH
45873: LD_EXP 24
45877: PUSH
45878: LD_EXP 25
45882: PUSH
45883: LD_EXP 26
45887: PUSH
45888: LD_EXP 28
45892: PUSH
45893: LD_EXP 29
45897: PUSH
45898: LD_EXP 30
45902: PUSH
45903: LD_EXP 31
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: DIFF
45923: PPUSH
45924: LD_STRING 11c_others
45926: PPUSH
45927: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45931: LD_EXP 18
45935: PPUSH
45936: LD_EXP 3
45940: PUSH
45941: LD_STRING JMM
45943: STR
45944: PPUSH
45945: CALL_OW 38
// if Lisa then
45949: LD_EXP 19
45953: IFFALSE 45973
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45955: LD_EXP 19
45959: PPUSH
45960: LD_EXP 3
45964: PUSH
45965: LD_STRING Lisa
45967: STR
45968: PPUSH
45969: CALL_OW 38
// if Donaldson then
45973: LD_EXP 20
45977: IFFALSE 45997
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45979: LD_EXP 20
45983: PPUSH
45984: LD_EXP 3
45988: PUSH
45989: LD_STRING Donaldson
45991: STR
45992: PPUSH
45993: CALL_OW 38
// if Bobby then
45997: LD_EXP 21
46001: IFFALSE 46021
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
46003: LD_EXP 21
46007: PPUSH
46008: LD_EXP 3
46012: PUSH
46013: LD_STRING Bobby
46015: STR
46016: PPUSH
46017: CALL_OW 38
// if Cyrus then
46021: LD_EXP 22
46025: IFFALSE 46045
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
46027: LD_EXP 22
46031: PPUSH
46032: LD_EXP 3
46036: PUSH
46037: LD_STRING Cyrus
46039: STR
46040: PPUSH
46041: CALL_OW 38
// if Denis then
46045: LD_EXP 23
46049: IFFALSE 46069
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
46051: LD_EXP 23
46055: PPUSH
46056: LD_EXP 3
46060: PUSH
46061: LD_STRING Denis
46063: STR
46064: PPUSH
46065: CALL_OW 38
// if Brown then
46069: LD_EXP 24
46073: IFFALSE 46093
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
46075: LD_EXP 24
46079: PPUSH
46080: LD_EXP 3
46084: PUSH
46085: LD_STRING Brown
46087: STR
46088: PPUSH
46089: CALL_OW 38
// if Gladstone then
46093: LD_EXP 25
46097: IFFALSE 46117
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
46099: LD_EXP 25
46103: PPUSH
46104: LD_EXP 3
46108: PUSH
46109: LD_STRING Gladstone
46111: STR
46112: PPUSH
46113: CALL_OW 38
// if Houten then
46117: LD_EXP 26
46121: IFFALSE 46141
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
46123: LD_EXP 26
46127: PPUSH
46128: LD_EXP 3
46132: PUSH
46133: LD_STRING Houten
46135: STR
46136: PPUSH
46137: CALL_OW 38
// if Cornel then
46141: LD_EXP 28
46145: IFFALSE 46165
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
46147: LD_EXP 28
46151: PPUSH
46152: LD_EXP 3
46156: PUSH
46157: LD_STRING Cornel
46159: STR
46160: PPUSH
46161: CALL_OW 38
// if Gary then
46165: LD_EXP 29
46169: IFFALSE 46189
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
46171: LD_EXP 29
46175: PPUSH
46176: LD_EXP 3
46180: PUSH
46181: LD_STRING Gary
46183: STR
46184: PPUSH
46185: CALL_OW 38
// if Frank then
46189: LD_EXP 30
46193: IFFALSE 46213
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46195: LD_EXP 30
46199: PPUSH
46200: LD_EXP 3
46204: PUSH
46205: LD_STRING Frank
46207: STR
46208: PPUSH
46209: CALL_OW 38
// if Kikuchi then
46213: LD_EXP 31
46217: IFFALSE 46237
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46219: LD_EXP 31
46223: PPUSH
46224: LD_EXP 3
46228: PUSH
46229: LD_STRING Kikuchi
46231: STR
46232: PPUSH
46233: CALL_OW 38
// YouWin ;
46237: CALL_OW 103
// end ; end_of_file
46241: PPOPN 1
46243: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46244: LD_INT 0
46246: PPUSH
// skirmish := false ;
46247: LD_ADDR_EXP 44
46251: PUSH
46252: LD_INT 0
46254: ST_TO_ADDR
// mc_bases := [ ] ;
46255: LD_ADDR_EXP 45
46259: PUSH
46260: EMPTY
46261: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46262: LD_ADDR_EXP 46
46266: PUSH
46267: EMPTY
46268: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46269: LD_ADDR_EXP 47
46273: PUSH
46274: EMPTY
46275: ST_TO_ADDR
// mc_need_heal := [ ] ;
46276: LD_ADDR_EXP 48
46280: PUSH
46281: EMPTY
46282: ST_TO_ADDR
// mc_healers := [ ] ;
46283: LD_ADDR_EXP 49
46287: PUSH
46288: EMPTY
46289: ST_TO_ADDR
// mc_build_list := [ ] ;
46290: LD_ADDR_EXP 50
46294: PUSH
46295: EMPTY
46296: ST_TO_ADDR
// mc_builders := [ ] ;
46297: LD_ADDR_EXP 51
46301: PUSH
46302: EMPTY
46303: ST_TO_ADDR
// mc_construct_list := [ ] ;
46304: LD_ADDR_EXP 52
46308: PUSH
46309: EMPTY
46310: ST_TO_ADDR
// mc_turret_list := [ ] ;
46311: LD_ADDR_EXP 53
46315: PUSH
46316: EMPTY
46317: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46318: LD_ADDR_EXP 54
46322: PUSH
46323: EMPTY
46324: ST_TO_ADDR
// mc_miners := [ ] ;
46325: LD_ADDR_EXP 56
46329: PUSH
46330: EMPTY
46331: ST_TO_ADDR
// mc_mines := [ ] ;
46332: LD_ADDR_EXP 55
46336: PUSH
46337: EMPTY
46338: ST_TO_ADDR
// mc_minefields := [ ] ;
46339: LD_ADDR_EXP 57
46343: PUSH
46344: EMPTY
46345: ST_TO_ADDR
// mc_crates := [ ] ;
46346: LD_ADDR_EXP 58
46350: PUSH
46351: EMPTY
46352: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46353: LD_ADDR_EXP 59
46357: PUSH
46358: EMPTY
46359: ST_TO_ADDR
// mc_vehicles := [ ] ;
46360: LD_ADDR_EXP 60
46364: PUSH
46365: EMPTY
46366: ST_TO_ADDR
// mc_attack := [ ] ;
46367: LD_ADDR_EXP 61
46371: PUSH
46372: EMPTY
46373: ST_TO_ADDR
// mc_produce := [ ] ;
46374: LD_ADDR_EXP 62
46378: PUSH
46379: EMPTY
46380: ST_TO_ADDR
// mc_defender := [ ] ;
46381: LD_ADDR_EXP 63
46385: PUSH
46386: EMPTY
46387: ST_TO_ADDR
// mc_parking := [ ] ;
46388: LD_ADDR_EXP 65
46392: PUSH
46393: EMPTY
46394: ST_TO_ADDR
// mc_scan := [ ] ;
46395: LD_ADDR_EXP 64
46399: PUSH
46400: EMPTY
46401: ST_TO_ADDR
// end ;
46402: LD_VAR 0 1
46406: RET
// export function RunMacro ; var i ; begin
46407: LD_INT 0
46409: PPUSH
46410: PPUSH
// for i = 1 to mc_bases do
46411: LD_ADDR_VAR 0 2
46415: PUSH
46416: DOUBLE
46417: LD_INT 1
46419: DEC
46420: ST_TO_ADDR
46421: LD_EXP 45
46425: PUSH
46426: FOR_TO
46427: IFFALSE 46915
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46429: LD_ADDR_EXP 46
46433: PUSH
46434: LD_EXP 46
46438: PPUSH
46439: LD_VAR 0 2
46443: PPUSH
46444: EMPTY
46445: PPUSH
46446: CALL_OW 1
46450: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46451: LD_ADDR_EXP 47
46455: PUSH
46456: LD_EXP 47
46460: PPUSH
46461: LD_VAR 0 2
46465: PPUSH
46466: EMPTY
46467: PPUSH
46468: CALL_OW 1
46472: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46473: LD_ADDR_EXP 48
46477: PUSH
46478: LD_EXP 48
46482: PPUSH
46483: LD_VAR 0 2
46487: PPUSH
46488: EMPTY
46489: PPUSH
46490: CALL_OW 1
46494: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46495: LD_ADDR_EXP 49
46499: PUSH
46500: LD_EXP 49
46504: PPUSH
46505: LD_VAR 0 2
46509: PPUSH
46510: EMPTY
46511: PUSH
46512: EMPTY
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PPUSH
46518: CALL_OW 1
46522: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46523: LD_ADDR_EXP 50
46527: PUSH
46528: LD_EXP 50
46532: PPUSH
46533: LD_VAR 0 2
46537: PPUSH
46538: EMPTY
46539: PPUSH
46540: CALL_OW 1
46544: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46545: LD_ADDR_EXP 52
46549: PUSH
46550: LD_EXP 52
46554: PPUSH
46555: LD_VAR 0 2
46559: PPUSH
46560: EMPTY
46561: PPUSH
46562: CALL_OW 1
46566: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46567: LD_ADDR_EXP 53
46571: PUSH
46572: LD_EXP 53
46576: PPUSH
46577: LD_VAR 0 2
46581: PPUSH
46582: EMPTY
46583: PPUSH
46584: CALL_OW 1
46588: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46589: LD_ADDR_EXP 54
46593: PUSH
46594: LD_EXP 54
46598: PPUSH
46599: LD_VAR 0 2
46603: PPUSH
46604: EMPTY
46605: PPUSH
46606: CALL_OW 1
46610: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46611: LD_ADDR_EXP 54
46615: PUSH
46616: LD_EXP 54
46620: PPUSH
46621: LD_VAR 0 2
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PPUSH
46633: EMPTY
46634: PPUSH
46635: CALL 3206 0 3
46639: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46640: LD_ADDR_EXP 54
46644: PUSH
46645: LD_EXP 54
46649: PPUSH
46650: LD_VAR 0 2
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PPUSH
46662: EMPTY
46663: PPUSH
46664: CALL 3206 0 3
46668: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46669: LD_ADDR_EXP 56
46673: PUSH
46674: LD_EXP 56
46678: PPUSH
46679: LD_VAR 0 2
46683: PPUSH
46684: EMPTY
46685: PPUSH
46686: CALL_OW 1
46690: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
46691: LD_ADDR_EXP 55
46695: PUSH
46696: LD_EXP 55
46700: PPUSH
46701: LD_VAR 0 2
46705: PPUSH
46706: EMPTY
46707: PPUSH
46708: CALL_OW 1
46712: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
46713: LD_ADDR_EXP 57
46717: PUSH
46718: LD_EXP 57
46722: PPUSH
46723: LD_VAR 0 2
46727: PPUSH
46728: EMPTY
46729: PPUSH
46730: CALL_OW 1
46734: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
46735: LD_ADDR_EXP 58
46739: PUSH
46740: LD_EXP 58
46744: PPUSH
46745: LD_VAR 0 2
46749: PPUSH
46750: EMPTY
46751: PPUSH
46752: CALL_OW 1
46756: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46757: LD_ADDR_EXP 59
46761: PUSH
46762: LD_EXP 59
46766: PPUSH
46767: LD_VAR 0 2
46771: PPUSH
46772: EMPTY
46773: PPUSH
46774: CALL_OW 1
46778: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
46779: LD_ADDR_EXP 60
46783: PUSH
46784: LD_EXP 60
46788: PPUSH
46789: LD_VAR 0 2
46793: PPUSH
46794: EMPTY
46795: PPUSH
46796: CALL_OW 1
46800: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
46801: LD_ADDR_EXP 61
46805: PUSH
46806: LD_EXP 61
46810: PPUSH
46811: LD_VAR 0 2
46815: PPUSH
46816: EMPTY
46817: PPUSH
46818: CALL_OW 1
46822: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
46823: LD_ADDR_EXP 62
46827: PUSH
46828: LD_EXP 62
46832: PPUSH
46833: LD_VAR 0 2
46837: PPUSH
46838: EMPTY
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46845: LD_ADDR_EXP 63
46849: PUSH
46850: LD_EXP 63
46854: PPUSH
46855: LD_VAR 0 2
46859: PPUSH
46860: EMPTY
46861: PPUSH
46862: CALL_OW 1
46866: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
46867: LD_ADDR_EXP 65
46871: PUSH
46872: LD_EXP 65
46876: PPUSH
46877: LD_VAR 0 2
46881: PPUSH
46882: LD_INT 0
46884: PPUSH
46885: CALL_OW 1
46889: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
46890: LD_ADDR_EXP 64
46894: PUSH
46895: LD_EXP 64
46899: PPUSH
46900: LD_VAR 0 2
46904: PPUSH
46905: LD_INT 0
46907: PPUSH
46908: CALL_OW 1
46912: ST_TO_ADDR
// end ;
46913: GO 46426
46915: POP
46916: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
46917: LD_INT 1
46919: PPUSH
46920: LD_INT 8
46922: PUSH
46923: LD_INT 10
46925: PUSH
46926: LD_INT 12
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: PUSH
46934: LD_OWVAR 67
46938: ARRAY
46939: PPUSH
46940: LD_INT 3
46942: PPUSH
46943: CALL 54431 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
46947: LD_INT 2
46949: PPUSH
46950: LD_INT 6
46952: PUSH
46953: LD_INT 8
46955: PUSH
46956: LD_INT 9
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: PUSH
46964: LD_OWVAR 67
46968: ARRAY
46969: PPUSH
46970: LD_INT 2
46972: PPUSH
46973: CALL 54431 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
46977: LD_INT 3
46979: PPUSH
46980: LD_INT 6
46982: PUSH
46983: LD_INT 7
46985: PUSH
46986: LD_INT 9
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: PUSH
46994: LD_OWVAR 67
46998: ARRAY
46999: PPUSH
47000: LD_INT 1
47002: PPUSH
47003: CALL 54431 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
47007: LD_ADDR_EXP 65
47011: PUSH
47012: LD_INT 20
47014: PUSH
47015: LD_INT 21
47017: PUSH
47018: LD_INT 22
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// for i = 1 to mc_bases do
47026: LD_ADDR_VAR 0 2
47030: PUSH
47031: DOUBLE
47032: LD_INT 1
47034: DEC
47035: ST_TO_ADDR
47036: LD_EXP 45
47040: PUSH
47041: FOR_TO
47042: IFFALSE 47066
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
47044: LD_VAR 0 2
47048: PPUSH
47049: LD_EXP 39
47053: PUSH
47054: LD_VAR 0 2
47058: ARRAY
47059: PPUSH
47060: CALL 54667 0 2
47064: GO 47041
47066: POP
47067: POP
// skirmish := true ;
47068: LD_ADDR_EXP 44
47072: PUSH
47073: LD_INT 1
47075: ST_TO_ADDR
// end ;
47076: LD_VAR 0 1
47080: RET
// every 0 0$01 trigger skirmish do
47081: LD_EXP 44
47085: IFFALSE 47169
47087: GO 47089
47089: DISABLE
// begin enable ;
47090: ENABLE
// MC_CheckBuildings ( ) ;
47091: CALL 47530 0 0
// MC_CheckPeopleLife ( ) ;
47095: CALL 47748 0 0
// RaiseSailEvent ( 103 ) ;
47099: LD_INT 103
47101: PPUSH
47102: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47106: LD_INT 104
47108: PPUSH
47109: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47113: LD_INT 105
47115: PPUSH
47116: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47120: LD_INT 106
47122: PPUSH
47123: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47127: LD_INT 107
47129: PPUSH
47130: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47134: LD_INT 108
47136: PPUSH
47137: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47141: LD_INT 109
47143: PPUSH
47144: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47148: LD_INT 110
47150: PPUSH
47151: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47155: LD_INT 111
47157: PPUSH
47158: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47162: LD_INT 200
47164: PPUSH
47165: CALL_OW 427
// end ;
47169: END
// every 10 trigger skirmish do var i ;
47170: LD_EXP 44
47174: IFFALSE 47273
47176: GO 47178
47178: DISABLE
47179: LD_INT 0
47181: PPUSH
// begin enable ;
47182: ENABLE
// if not mc_bases then
47183: LD_EXP 45
47187: NOT
47188: IFFALSE 47192
// exit ;
47190: GO 47273
// for i = 1 to mc_bases do
47192: LD_ADDR_VAR 0 1
47196: PUSH
47197: DOUBLE
47198: LD_INT 1
47200: DEC
47201: ST_TO_ADDR
47202: LD_EXP 45
47206: PUSH
47207: FOR_TO
47208: IFFALSE 47271
// if mc_mines [ i ] and mc_miners [ i ] then
47210: LD_EXP 55
47214: PUSH
47215: LD_VAR 0 1
47219: ARRAY
47220: PUSH
47221: LD_EXP 56
47225: PUSH
47226: LD_VAR 0 1
47230: ARRAY
47231: AND
47232: IFFALSE 47269
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47234: LD_EXP 56
47238: PUSH
47239: LD_VAR 0 1
47243: ARRAY
47244: PUSH
47245: LD_INT 1
47247: ARRAY
47248: PPUSH
47249: CALL_OW 255
47253: PPUSH
47254: LD_EXP 55
47258: PUSH
47259: LD_VAR 0 1
47263: ARRAY
47264: PPUSH
47265: CALL 33453 0 2
47269: GO 47207
47271: POP
47272: POP
// end ;
47273: PPOPN 1
47275: END
// on SailEvent ( event ) do begin if event = 101 then
47276: LD_VAR 0 1
47280: PUSH
47281: LD_INT 101
47283: EQUAL
47284: IFFALSE 47290
// MC_RepairBuildings ( ) ;
47286: CALL 48294 0 0
// if event = 102 then
47290: LD_VAR 0 1
47294: PUSH
47295: LD_INT 102
47297: EQUAL
47298: IFFALSE 47304
// MC_Heal ( ) ;
47300: CALL 48688 0 0
// if event = 103 then
47304: LD_VAR 0 1
47308: PUSH
47309: LD_INT 103
47311: EQUAL
47312: IFFALSE 47318
// MC_Build ( ) ;
47314: CALL 49073 0 0
// if event = 104 then
47318: LD_VAR 0 1
47322: PUSH
47323: LD_INT 104
47325: EQUAL
47326: IFFALSE 47332
// MC_TurretWeapon ( ) ;
47328: CALL 49841 0 0
// if event = 105 then
47332: LD_VAR 0 1
47336: PUSH
47337: LD_INT 105
47339: EQUAL
47340: IFFALSE 47346
// MC_TurretCrew ( ) ;
47342: CALL 50160 0 0
// if event = 106 then
47346: LD_VAR 0 1
47350: PUSH
47351: LD_INT 106
47353: EQUAL
47354: IFFALSE 47360
// MC_PlantMines ( ) ;
47356: CALL 50953 0 0
// if event = 107 then
47360: LD_VAR 0 1
47364: PUSH
47365: LD_INT 107
47367: EQUAL
47368: IFFALSE 47374
// MC_CollectCrates ( ) ;
47370: CALL 51785 0 0
// if event = 108 then
47374: LD_VAR 0 1
47378: PUSH
47379: LD_INT 108
47381: EQUAL
47382: IFFALSE 47388
// MC_LinkRemoteControl ( ) ;
47384: CALL 52582 0 0
// if event = 109 then
47388: LD_VAR 0 1
47392: PUSH
47393: LD_INT 109
47395: EQUAL
47396: IFFALSE 47402
// MC_ProduceVehicle ( ) ;
47398: CALL 52751 0 0
// if event = 110 then
47402: LD_VAR 0 1
47406: PUSH
47407: LD_INT 110
47409: EQUAL
47410: IFFALSE 47416
// MC_SendAttack ( ) ;
47412: CALL 53139 0 0
// if event = 111 then
47416: LD_VAR 0 1
47420: PUSH
47421: LD_INT 111
47423: EQUAL
47424: IFFALSE 47430
// MC_Defend ( ) ;
47426: CALL 53247 0 0
// if event = 200 then
47430: LD_VAR 0 1
47434: PUSH
47435: LD_INT 200
47437: EQUAL
47438: IFFALSE 47444
// MC_Idle ( ) ;
47440: CALL 54182 0 0
// end ;
47444: PPOPN 1
47446: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47447: LD_INT 0
47449: PPUSH
47450: PPUSH
// if not mc_bases [ base ] or not tag then
47451: LD_EXP 45
47455: PUSH
47456: LD_VAR 0 1
47460: ARRAY
47461: NOT
47462: PUSH
47463: LD_VAR 0 2
47467: NOT
47468: OR
47469: IFFALSE 47473
// exit ;
47471: GO 47525
// for i in mc_bases [ base ] do
47473: LD_ADDR_VAR 0 4
47477: PUSH
47478: LD_EXP 45
47482: PUSH
47483: LD_VAR 0 1
47487: ARRAY
47488: PUSH
47489: FOR_IN
47490: IFFALSE 47523
// if GetTag ( i ) = tag then
47492: LD_VAR 0 4
47496: PPUSH
47497: CALL_OW 110
47501: PUSH
47502: LD_VAR 0 2
47506: EQUAL
47507: IFFALSE 47521
// SetTag ( i , 0 ) ;
47509: LD_VAR 0 4
47513: PPUSH
47514: LD_INT 0
47516: PPUSH
47517: CALL_OW 109
47521: GO 47489
47523: POP
47524: POP
// end ;
47525: LD_VAR 0 3
47529: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47530: LD_INT 0
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
// if not mc_bases then
47536: LD_EXP 45
47540: NOT
47541: IFFALSE 47545
// exit ;
47543: GO 47743
// for i = 1 to mc_bases do
47545: LD_ADDR_VAR 0 2
47549: PUSH
47550: DOUBLE
47551: LD_INT 1
47553: DEC
47554: ST_TO_ADDR
47555: LD_EXP 45
47559: PUSH
47560: FOR_TO
47561: IFFALSE 47728
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47563: LD_ADDR_VAR 0 4
47567: PUSH
47568: LD_EXP 45
47572: PUSH
47573: LD_VAR 0 2
47577: ARRAY
47578: PPUSH
47579: LD_INT 21
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: LD_INT 24
47594: PUSH
47595: LD_INT 1000
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PPUSH
47610: CALL_OW 72
47614: ST_TO_ADDR
// if not tmp then
47615: LD_VAR 0 4
47619: NOT
47620: IFFALSE 47646
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47622: LD_ADDR_EXP 46
47626: PUSH
47627: LD_EXP 46
47631: PPUSH
47632: LD_VAR 0 2
47636: PPUSH
47637: EMPTY
47638: PPUSH
47639: CALL_OW 1
47643: ST_TO_ADDR
// continue ;
47644: GO 47560
// end ; for j in tmp do
47646: LD_ADDR_VAR 0 3
47650: PUSH
47651: LD_VAR 0 4
47655: PUSH
47656: FOR_IN
47657: IFFALSE 47724
// if not j in mc_building_need_repair [ i ] then
47659: LD_VAR 0 3
47663: PUSH
47664: LD_EXP 46
47668: PUSH
47669: LD_VAR 0 2
47673: ARRAY
47674: IN
47675: NOT
47676: IFFALSE 47722
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
47678: LD_ADDR_EXP 46
47682: PUSH
47683: LD_EXP 46
47687: PPUSH
47688: LD_VAR 0 2
47692: PUSH
47693: LD_EXP 46
47697: PUSH
47698: LD_VAR 0 2
47702: ARRAY
47703: PUSH
47704: LD_INT 1
47706: PLUS
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PPUSH
47712: LD_VAR 0 3
47716: PPUSH
47717: CALL 3206 0 3
47721: ST_TO_ADDR
47722: GO 47656
47724: POP
47725: POP
// end ;
47726: GO 47560
47728: POP
47729: POP
// if mc_building_need_repair then
47730: LD_EXP 46
47734: IFFALSE 47743
// RaiseSailEvent ( 101 ) ;
47736: LD_INT 101
47738: PPUSH
47739: CALL_OW 427
// end ;
47743: LD_VAR 0 1
47747: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47748: LD_INT 0
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
// if not mc_bases then
47757: LD_EXP 45
47761: NOT
47762: IFFALSE 47766
// exit ;
47764: GO 48289
// for i = 1 to mc_bases do
47766: LD_ADDR_VAR 0 2
47770: PUSH
47771: DOUBLE
47772: LD_INT 1
47774: DEC
47775: ST_TO_ADDR
47776: LD_EXP 45
47780: PUSH
47781: FOR_TO
47782: IFFALSE 48280
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
47784: LD_ADDR_VAR 0 5
47788: PUSH
47789: LD_EXP 45
47793: PUSH
47794: LD_VAR 0 2
47798: ARRAY
47799: PPUSH
47800: LD_INT 21
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: LD_INT 54
47818: PUSH
47819: EMPTY
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 24
47831: PUSH
47832: LD_INT 700
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PPUSH
47852: CALL_OW 72
47856: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
47857: LD_ADDR_VAR 0 6
47861: PUSH
47862: LD_EXP 45
47866: PUSH
47867: LD_VAR 0 2
47871: ARRAY
47872: PPUSH
47873: LD_INT 21
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 54
47891: PUSH
47892: EMPTY
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 24
47904: PUSH
47905: LD_INT 250
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PPUSH
47925: CALL_OW 72
47929: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47930: LD_ADDR_VAR 0 7
47934: PUSH
47935: LD_VAR 0 5
47939: PUSH
47940: LD_VAR 0 6
47944: DIFF
47945: ST_TO_ADDR
// if not need_heal_1 then
47946: LD_VAR 0 6
47950: NOT
47951: IFFALSE 47984
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
47953: LD_ADDR_EXP 48
47957: PUSH
47958: LD_EXP 48
47962: PPUSH
47963: LD_VAR 0 2
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PPUSH
47975: EMPTY
47976: PPUSH
47977: CALL 3206 0 3
47981: ST_TO_ADDR
47982: GO 48016
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
47984: LD_ADDR_EXP 48
47988: PUSH
47989: LD_EXP 48
47993: PPUSH
47994: LD_VAR 0 2
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PPUSH
48006: LD_VAR 0 6
48010: PPUSH
48011: CALL 3206 0 3
48015: ST_TO_ADDR
// if not need_heal_2 then
48016: LD_VAR 0 7
48020: NOT
48021: IFFALSE 48054
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
48023: LD_ADDR_EXP 48
48027: PUSH
48028: LD_EXP 48
48032: PPUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PPUSH
48045: EMPTY
48046: PPUSH
48047: CALL 3206 0 3
48051: ST_TO_ADDR
48052: GO 48086
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48054: LD_ADDR_EXP 48
48058: PUSH
48059: LD_EXP 48
48063: PPUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PPUSH
48076: LD_VAR 0 7
48080: PPUSH
48081: CALL 3206 0 3
48085: ST_TO_ADDR
// if need_heal_2 then
48086: LD_VAR 0 7
48090: IFFALSE 48262
// for j in need_heal_2 do
48092: LD_ADDR_VAR 0 3
48096: PUSH
48097: LD_VAR 0 7
48101: PUSH
48102: FOR_IN
48103: IFFALSE 48260
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48105: LD_ADDR_VAR 0 5
48109: PUSH
48110: LD_EXP 45
48114: PUSH
48115: LD_VAR 0 2
48119: ARRAY
48120: PPUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 30
48126: PUSH
48127: LD_INT 6
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 30
48136: PUSH
48137: LD_INT 7
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 30
48146: PUSH
48147: LD_INT 8
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 30
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 30
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 25
48176: PUSH
48177: LD_INT 4
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: PPUSH
48193: CALL_OW 72
48197: ST_TO_ADDR
// if tmp then
48198: LD_VAR 0 5
48202: IFFALSE 48258
// begin k := NearestUnitToUnit ( tmp , j ) ;
48204: LD_ADDR_VAR 0 4
48208: PUSH
48209: LD_VAR 0 5
48213: PPUSH
48214: LD_VAR 0 3
48218: PPUSH
48219: CALL_OW 74
48223: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48224: LD_VAR 0 3
48228: PPUSH
48229: LD_VAR 0 4
48233: PPUSH
48234: CALL_OW 296
48238: PUSH
48239: LD_INT 7
48241: GREATER
48242: IFFALSE 48258
// ComMoveUnit ( j , k ) ;
48244: LD_VAR 0 3
48248: PPUSH
48249: LD_VAR 0 4
48253: PPUSH
48254: CALL_OW 112
// end ; end ;
48258: GO 48102
48260: POP
48261: POP
// if not need_heal_1 and not need_heal_2 then
48262: LD_VAR 0 6
48266: NOT
48267: PUSH
48268: LD_VAR 0 7
48272: NOT
48273: AND
48274: IFFALSE 48278
// continue ;
48276: GO 47781
// end ;
48278: GO 47781
48280: POP
48281: POP
// RaiseSailEvent ( 102 ) ;
48282: LD_INT 102
48284: PPUSH
48285: CALL_OW 427
// end ;
48289: LD_VAR 0 1
48293: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48294: LD_INT 0
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
// if not mc_bases then
48301: LD_EXP 45
48305: NOT
48306: IFFALSE 48310
// exit ;
48308: GO 48683
// for i = 1 to mc_bases do
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: DOUBLE
48316: LD_INT 1
48318: DEC
48319: ST_TO_ADDR
48320: LD_EXP 45
48324: PUSH
48325: FOR_TO
48326: IFFALSE 48681
// begin if not mc_building_need_repair [ i ] then
48328: LD_EXP 46
48332: PUSH
48333: LD_VAR 0 2
48337: ARRAY
48338: NOT
48339: IFFALSE 48377
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48341: LD_ADDR_EXP 47
48345: PUSH
48346: LD_EXP 47
48350: PPUSH
48351: LD_VAR 0 2
48355: PPUSH
48356: EMPTY
48357: PPUSH
48358: CALL_OW 1
48362: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48363: LD_VAR 0 2
48367: PPUSH
48368: LD_INT 101
48370: PPUSH
48371: CALL 47447 0 2
// continue ;
48375: GO 48325
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48377: LD_ADDR_EXP 51
48381: PUSH
48382: LD_EXP 51
48386: PPUSH
48387: LD_VAR 0 2
48391: PPUSH
48392: EMPTY
48393: PPUSH
48394: CALL_OW 1
48398: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48399: LD_VAR 0 2
48403: PPUSH
48404: LD_INT 103
48406: PPUSH
48407: CALL 47447 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48411: LD_ADDR_VAR 0 5
48415: PUSH
48416: LD_EXP 45
48420: PUSH
48421: LD_VAR 0 2
48425: ARRAY
48426: PPUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 25
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 25
48442: PUSH
48443: LD_INT 16
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: PPUSH
48458: CALL_OW 72
48462: ST_TO_ADDR
// if not tmp then
48463: LD_VAR 0 5
48467: NOT
48468: IFFALSE 48472
// continue ;
48470: GO 48325
// for j in tmp do
48472: LD_ADDR_VAR 0 3
48476: PUSH
48477: LD_VAR 0 5
48481: PUSH
48482: FOR_IN
48483: IFFALSE 48677
// begin if mc_need_heal [ i ] then
48485: LD_EXP 48
48489: PUSH
48490: LD_VAR 0 2
48494: ARRAY
48495: IFFALSE 48543
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48497: LD_VAR 0 3
48501: PUSH
48502: LD_EXP 48
48506: PUSH
48507: LD_VAR 0 2
48511: ARRAY
48512: PUSH
48513: LD_INT 1
48515: ARRAY
48516: IN
48517: PUSH
48518: LD_VAR 0 3
48522: PUSH
48523: LD_EXP 48
48527: PUSH
48528: LD_VAR 0 2
48532: ARRAY
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: IN
48538: OR
48539: IFFALSE 48543
// continue ;
48541: GO 48482
// if IsInUnit ( j ) then
48543: LD_VAR 0 3
48547: PPUSH
48548: CALL_OW 310
48552: IFFALSE 48563
// ComExitBuilding ( j ) ;
48554: LD_VAR 0 3
48558: PPUSH
48559: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48563: LD_VAR 0 3
48567: PUSH
48568: LD_EXP 47
48572: PUSH
48573: LD_VAR 0 2
48577: ARRAY
48578: IN
48579: NOT
48580: IFFALSE 48638
// begin SetTag ( j , 101 ) ;
48582: LD_VAR 0 3
48586: PPUSH
48587: LD_INT 101
48589: PPUSH
48590: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48594: LD_ADDR_EXP 47
48598: PUSH
48599: LD_EXP 47
48603: PPUSH
48604: LD_VAR 0 2
48608: PUSH
48609: LD_EXP 47
48613: PUSH
48614: LD_VAR 0 2
48618: ARRAY
48619: PUSH
48620: LD_INT 1
48622: PLUS
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PPUSH
48628: LD_VAR 0 3
48632: PPUSH
48633: CALL 3206 0 3
48637: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48638: LD_INT 3
48640: PPUSH
48641: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48645: LD_VAR 0 3
48649: PPUSH
48650: LD_EXP 46
48654: PUSH
48655: LD_VAR 0 2
48659: ARRAY
48660: PPUSH
48661: LD_VAR 0 3
48665: PPUSH
48666: CALL_OW 74
48670: PPUSH
48671: CALL_OW 130
// end ;
48675: GO 48482
48677: POP
48678: POP
// end ;
48679: GO 48325
48681: POP
48682: POP
// end ;
48683: LD_VAR 0 1
48687: RET
// export function MC_Heal ; var i , j , tmp ; begin
48688: LD_INT 0
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
// if not mc_bases then
48694: LD_EXP 45
48698: NOT
48699: IFFALSE 48703
// exit ;
48701: GO 49068
// for i = 1 to mc_bases do
48703: LD_ADDR_VAR 0 2
48707: PUSH
48708: DOUBLE
48709: LD_INT 1
48711: DEC
48712: ST_TO_ADDR
48713: LD_EXP 45
48717: PUSH
48718: FOR_TO
48719: IFFALSE 49066
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48721: LD_EXP 48
48725: PUSH
48726: LD_VAR 0 2
48730: ARRAY
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: NOT
48736: PUSH
48737: LD_EXP 48
48741: PUSH
48742: LD_VAR 0 2
48746: ARRAY
48747: PUSH
48748: LD_INT 2
48750: ARRAY
48751: NOT
48752: AND
48753: IFFALSE 48791
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48755: LD_ADDR_EXP 49
48759: PUSH
48760: LD_EXP 49
48764: PPUSH
48765: LD_VAR 0 2
48769: PPUSH
48770: EMPTY
48771: PPUSH
48772: CALL_OW 1
48776: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48777: LD_VAR 0 2
48781: PPUSH
48782: LD_INT 102
48784: PPUSH
48785: CALL 47447 0 2
// continue ;
48789: GO 48718
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48791: LD_ADDR_VAR 0 4
48795: PUSH
48796: LD_EXP 45
48800: PUSH
48801: LD_VAR 0 2
48805: ARRAY
48806: PPUSH
48807: LD_INT 25
48809: PUSH
48810: LD_INT 4
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PPUSH
48817: CALL_OW 72
48821: ST_TO_ADDR
// if not tmp then
48822: LD_VAR 0 4
48826: NOT
48827: IFFALSE 48831
// continue ;
48829: GO 48718
// for j in tmp do
48831: LD_ADDR_VAR 0 3
48835: PUSH
48836: LD_VAR 0 4
48840: PUSH
48841: FOR_IN
48842: IFFALSE 49062
// begin if IsInUnit ( j ) then
48844: LD_VAR 0 3
48848: PPUSH
48849: CALL_OW 310
48853: IFFALSE 48864
// ComExitBuilding ( j ) ;
48855: LD_VAR 0 3
48859: PPUSH
48860: CALL_OW 122
// if not j in mc_healers [ i ] then
48864: LD_VAR 0 3
48868: PUSH
48869: LD_EXP 49
48873: PUSH
48874: LD_VAR 0 2
48878: ARRAY
48879: IN
48880: NOT
48881: IFFALSE 48927
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48883: LD_ADDR_EXP 49
48887: PUSH
48888: LD_EXP 49
48892: PPUSH
48893: LD_VAR 0 2
48897: PUSH
48898: LD_EXP 49
48902: PUSH
48903: LD_VAR 0 2
48907: ARRAY
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PPUSH
48917: LD_VAR 0 3
48921: PPUSH
48922: CALL 3206 0 3
48926: ST_TO_ADDR
// if not GetTag ( j ) then
48927: LD_VAR 0 3
48931: PPUSH
48932: CALL_OW 110
48936: NOT
48937: IFFALSE 48951
// SetTag ( j , 102 ) ;
48939: LD_VAR 0 3
48943: PPUSH
48944: LD_INT 102
48946: PPUSH
48947: CALL_OW 109
// Wait ( 3 ) ;
48951: LD_INT 3
48953: PPUSH
48954: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48958: LD_EXP 48
48962: PUSH
48963: LD_VAR 0 2
48967: ARRAY
48968: PUSH
48969: LD_INT 1
48971: ARRAY
48972: IFFALSE 49004
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48974: LD_VAR 0 3
48978: PPUSH
48979: LD_EXP 48
48983: PUSH
48984: LD_VAR 0 2
48988: ARRAY
48989: PUSH
48990: LD_INT 1
48992: ARRAY
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: PPUSH
48998: CALL_OW 128
49002: GO 49060
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49004: LD_VAR 0 3
49008: PPUSH
49009: CALL_OW 314
49013: NOT
49014: PUSH
49015: LD_EXP 48
49019: PUSH
49020: LD_VAR 0 2
49024: ARRAY
49025: PUSH
49026: LD_INT 2
49028: ARRAY
49029: AND
49030: IFFALSE 49060
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49032: LD_VAR 0 3
49036: PPUSH
49037: LD_EXP 48
49041: PUSH
49042: LD_VAR 0 2
49046: ARRAY
49047: PUSH
49048: LD_INT 2
49050: ARRAY
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: PPUSH
49056: CALL_OW 128
// end ;
49060: GO 48841
49062: POP
49063: POP
// end ;
49064: GO 48718
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 1
49072: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
// if not mc_bases then
49079: LD_EXP 45
49083: NOT
49084: IFFALSE 49088
// exit ;
49086: GO 49836
// for i = 1 to mc_bases do
49088: LD_ADDR_VAR 0 2
49092: PUSH
49093: DOUBLE
49094: LD_INT 1
49096: DEC
49097: ST_TO_ADDR
49098: LD_EXP 45
49102: PUSH
49103: FOR_TO
49104: IFFALSE 49834
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
49106: LD_EXP 50
49110: PUSH
49111: LD_VAR 0 2
49115: ARRAY
49116: NOT
49117: PUSH
49118: LD_EXP 52
49122: PUSH
49123: LD_VAR 0 2
49127: ARRAY
49128: NOT
49129: AND
49130: IFFALSE 49168
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49132: LD_ADDR_EXP 51
49136: PUSH
49137: LD_EXP 51
49141: PPUSH
49142: LD_VAR 0 2
49146: PPUSH
49147: EMPTY
49148: PPUSH
49149: CALL_OW 1
49153: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49154: LD_VAR 0 2
49158: PPUSH
49159: LD_INT 103
49161: PPUSH
49162: CALL 47447 0 2
// continue ;
49166: GO 49103
// end ; if mc_construct_list [ i ] then
49168: LD_EXP 52
49172: PUSH
49173: LD_VAR 0 2
49177: ARRAY
49178: IFFALSE 49383
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49180: LD_ADDR_VAR 0 4
49184: PUSH
49185: LD_EXP 45
49189: PUSH
49190: LD_VAR 0 2
49194: ARRAY
49195: PPUSH
49196: LD_INT 25
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PPUSH
49206: CALL_OW 72
49210: PUSH
49211: LD_EXP 47
49215: PUSH
49216: LD_VAR 0 2
49220: ARRAY
49221: DIFF
49222: ST_TO_ADDR
// if not tmp then
49223: LD_VAR 0 4
49227: NOT
49228: IFFALSE 49232
// continue ;
49230: GO 49103
// for j in tmp do
49232: LD_ADDR_VAR 0 3
49236: PUSH
49237: LD_VAR 0 4
49241: PUSH
49242: FOR_IN
49243: IFFALSE 49379
// begin if not mc_builders [ i ] then
49245: LD_EXP 51
49249: PUSH
49250: LD_VAR 0 2
49254: ARRAY
49255: NOT
49256: IFFALSE 49314
// begin SetTag ( j , 103 ) ;
49258: LD_VAR 0 3
49262: PPUSH
49263: LD_INT 103
49265: PPUSH
49266: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49270: LD_ADDR_EXP 51
49274: PUSH
49275: LD_EXP 51
49279: PPUSH
49280: LD_VAR 0 2
49284: PUSH
49285: LD_EXP 51
49289: PUSH
49290: LD_VAR 0 2
49294: ARRAY
49295: PUSH
49296: LD_INT 1
49298: PLUS
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PPUSH
49304: LD_VAR 0 3
49308: PPUSH
49309: CALL 3206 0 3
49313: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49314: LD_VAR 0 3
49318: PPUSH
49319: CALL_OW 310
49323: IFFALSE 49334
// ComExitBuilding ( j ) ;
49325: LD_VAR 0 3
49329: PPUSH
49330: CALL_OW 122
// wait ( 3 ) ;
49334: LD_INT 3
49336: PPUSH
49337: CALL_OW 67
// if not HasTask ( j ) then
49341: LD_VAR 0 3
49345: PPUSH
49346: CALL_OW 314
49350: NOT
49351: IFFALSE 49377
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49353: LD_VAR 0 3
49357: PPUSH
49358: LD_EXP 52
49362: PUSH
49363: LD_VAR 0 2
49367: ARRAY
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: PPUSH
49373: CALL 5624 0 2
// end ;
49377: GO 49242
49379: POP
49380: POP
// end else
49381: GO 49832
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49383: LD_EXP 50
49387: PUSH
49388: LD_VAR 0 2
49392: ARRAY
49393: PUSH
49394: LD_EXP 45
49398: PUSH
49399: LD_VAR 0 2
49403: ARRAY
49404: PPUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 30
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 30
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: PPUSH
49433: CALL_OW 72
49437: AND
49438: IFFALSE 49832
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49440: LD_EXP 45
49444: PUSH
49445: LD_VAR 0 2
49449: ARRAY
49450: PPUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 30
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 30
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: PPUSH
49479: CALL_OW 72
49483: PUSH
49484: LD_INT 1
49486: ARRAY
49487: PPUSH
49488: LD_EXP 50
49492: PUSH
49493: LD_VAR 0 2
49497: ARRAY
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PUSH
49503: LD_INT 1
49505: ARRAY
49506: PPUSH
49507: LD_EXP 50
49511: PUSH
49512: LD_VAR 0 2
49516: ARRAY
49517: PUSH
49518: LD_INT 1
49520: ARRAY
49521: PUSH
49522: LD_INT 2
49524: ARRAY
49525: PPUSH
49526: LD_EXP 50
49530: PUSH
49531: LD_VAR 0 2
49535: ARRAY
49536: PUSH
49537: LD_INT 1
49539: ARRAY
49540: PUSH
49541: LD_INT 3
49543: ARRAY
49544: PPUSH
49545: LD_EXP 50
49549: PUSH
49550: LD_VAR 0 2
49554: ARRAY
49555: PUSH
49556: LD_INT 1
49558: ARRAY
49559: PUSH
49560: LD_INT 4
49562: ARRAY
49563: PPUSH
49564: CALL 8780 0 5
49568: IFFALSE 49832
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49570: LD_ADDR_VAR 0 4
49574: PUSH
49575: LD_EXP 45
49579: PUSH
49580: LD_VAR 0 2
49584: ARRAY
49585: PPUSH
49586: LD_INT 25
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 72
49600: PUSH
49601: LD_EXP 47
49605: PUSH
49606: LD_VAR 0 2
49610: ARRAY
49611: DIFF
49612: ST_TO_ADDR
// if not tmp then
49613: LD_VAR 0 4
49617: NOT
49618: IFFALSE 49622
// continue ;
49620: GO 49103
// for j in tmp do
49622: LD_ADDR_VAR 0 3
49626: PUSH
49627: LD_VAR 0 4
49631: PUSH
49632: FOR_IN
49633: IFFALSE 49830
// begin if not mc_builders [ i ] then
49635: LD_EXP 51
49639: PUSH
49640: LD_VAR 0 2
49644: ARRAY
49645: NOT
49646: IFFALSE 49704
// begin SetTag ( j , 103 ) ;
49648: LD_VAR 0 3
49652: PPUSH
49653: LD_INT 103
49655: PPUSH
49656: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49660: LD_ADDR_EXP 51
49664: PUSH
49665: LD_EXP 51
49669: PPUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_EXP 51
49679: PUSH
49680: LD_VAR 0 2
49684: ARRAY
49685: PUSH
49686: LD_INT 1
49688: PLUS
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PPUSH
49694: LD_VAR 0 3
49698: PPUSH
49699: CALL 3206 0 3
49703: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49704: LD_VAR 0 3
49708: PPUSH
49709: CALL_OW 310
49713: IFFALSE 49724
// ComExitBuilding ( j ) ;
49715: LD_VAR 0 3
49719: PPUSH
49720: CALL_OW 122
// wait ( 3 ) ;
49724: LD_INT 3
49726: PPUSH
49727: CALL_OW 67
// if not HasTask ( j ) then
49731: LD_VAR 0 3
49735: PPUSH
49736: CALL_OW 314
49740: NOT
49741: IFFALSE 49828
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49743: LD_VAR 0 3
49747: PPUSH
49748: LD_EXP 50
49752: PUSH
49753: LD_VAR 0 2
49757: ARRAY
49758: PUSH
49759: LD_INT 1
49761: ARRAY
49762: PUSH
49763: LD_INT 1
49765: ARRAY
49766: PPUSH
49767: LD_EXP 50
49771: PUSH
49772: LD_VAR 0 2
49776: ARRAY
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: PUSH
49782: LD_INT 2
49784: ARRAY
49785: PPUSH
49786: LD_EXP 50
49790: PUSH
49791: LD_VAR 0 2
49795: ARRAY
49796: PUSH
49797: LD_INT 1
49799: ARRAY
49800: PUSH
49801: LD_INT 3
49803: ARRAY
49804: PPUSH
49805: LD_EXP 50
49809: PUSH
49810: LD_VAR 0 2
49814: ARRAY
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PUSH
49820: LD_INT 4
49822: ARRAY
49823: PPUSH
49824: CALL_OW 145
// end ;
49828: GO 49632
49830: POP
49831: POP
// end ; end ;
49832: GO 49103
49834: POP
49835: POP
// end ;
49836: LD_VAR 0 1
49840: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
49841: LD_INT 0
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
// if not mc_bases then
49850: LD_EXP 45
49854: NOT
49855: IFFALSE 49859
// exit ;
49857: GO 50155
// for i = 1 to mc_bases do
49859: LD_ADDR_VAR 0 2
49863: PUSH
49864: DOUBLE
49865: LD_INT 1
49867: DEC
49868: ST_TO_ADDR
49869: LD_EXP 45
49873: PUSH
49874: FOR_TO
49875: IFFALSE 50153
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
49877: LD_EXP 53
49881: PUSH
49882: LD_VAR 0 2
49886: ARRAY
49887: NOT
49888: PUSH
49889: LD_EXP 45
49893: PUSH
49894: LD_VAR 0 2
49898: ARRAY
49899: PPUSH
49900: LD_INT 30
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PPUSH
49910: CALL_OW 72
49914: NOT
49915: OR
49916: IFFALSE 49920
// continue ;
49918: GO 49874
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
49920: LD_EXP 53
49924: PUSH
49925: LD_VAR 0 2
49929: ARRAY
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PPUSH
49935: CALL_OW 269
49939: IFFALSE 50005
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
49941: LD_ADDR_VAR 0 4
49945: PUSH
49946: LD_EXP 53
49950: PUSH
49951: LD_VAR 0 2
49955: ARRAY
49956: PPUSH
49957: LD_INT 1
49959: PPUSH
49960: CALL_OW 3
49964: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
49965: LD_ADDR_EXP 53
49969: PUSH
49970: LD_EXP 53
49974: PPUSH
49975: LD_VAR 0 2
49979: PPUSH
49980: LD_VAR 0 4
49984: PPUSH
49985: CALL_OW 1
49989: ST_TO_ADDR
// if not mc_turret_list [ i ] then
49990: LD_EXP 53
49994: PUSH
49995: LD_VAR 0 2
49999: ARRAY
50000: NOT
50001: IFFALSE 50005
// continue ;
50003: GO 49874
// end ; busy := false ;
50005: LD_ADDR_VAR 0 6
50009: PUSH
50010: LD_INT 0
50012: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50013: LD_ADDR_VAR 0 4
50017: PUSH
50018: LD_EXP 45
50022: PUSH
50023: LD_VAR 0 2
50027: ARRAY
50028: PPUSH
50029: LD_INT 30
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PPUSH
50039: CALL_OW 72
50043: ST_TO_ADDR
// for j in tmp do
50044: LD_ADDR_VAR 0 3
50048: PUSH
50049: LD_VAR 0 4
50053: PUSH
50054: FOR_IN
50055: IFFALSE 50083
// if not BuildingStatus ( j ) = bs_idle then
50057: LD_VAR 0 3
50061: PPUSH
50062: CALL_OW 461
50066: PUSH
50067: LD_INT 2
50069: EQUAL
50070: NOT
50071: IFFALSE 50081
// busy := true ;
50073: LD_ADDR_VAR 0 6
50077: PUSH
50078: LD_INT 1
50080: ST_TO_ADDR
50081: GO 50054
50083: POP
50084: POP
// if busy then
50085: LD_VAR 0 6
50089: IFFALSE 50093
// continue ;
50091: GO 49874
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
50093: LD_ADDR_VAR 0 7
50097: PUSH
50098: LD_EXP 53
50102: PUSH
50103: LD_VAR 0 2
50107: ARRAY
50108: PUSH
50109: LD_INT 1
50111: ARRAY
50112: PPUSH
50113: CALL 7185 0 1
50117: ST_TO_ADDR
// if not weapon then
50118: LD_VAR 0 7
50122: NOT
50123: IFFALSE 50127
// continue ;
50125: GO 49874
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
50127: LD_EXP 53
50131: PUSH
50132: LD_VAR 0 2
50136: ARRAY
50137: PUSH
50138: LD_INT 1
50140: ARRAY
50141: PPUSH
50142: LD_VAR 0 7
50146: PPUSH
50147: CALL_OW 148
// end ;
50151: GO 49874
50153: POP
50154: POP
// end ;
50155: LD_VAR 0 1
50159: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
50160: LD_INT 0
50162: PPUSH
50163: PPUSH
50164: PPUSH
50165: PPUSH
50166: PPUSH
50167: PPUSH
50168: PPUSH
// if not mc_bases then
50169: LD_EXP 45
50173: NOT
50174: IFFALSE 50178
// exit ;
50176: GO 50948
// for i = 1 to mc_bases do
50178: LD_ADDR_VAR 0 2
50182: PUSH
50183: DOUBLE
50184: LD_INT 1
50186: DEC
50187: ST_TO_ADDR
50188: LD_EXP 45
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50946
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50196: LD_ADDR_VAR 0 7
50200: PUSH
50201: LD_EXP 45
50205: PUSH
50206: LD_VAR 0 2
50210: ARRAY
50211: PPUSH
50212: LD_INT 24
50214: PUSH
50215: LD_INT 375
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 30
50227: PUSH
50228: LD_INT 32
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 30
50237: PUSH
50238: LD_INT 31
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 58
50252: PUSH
50253: EMPTY
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: PPUSH
50261: CALL_OW 72
50265: ST_TO_ADDR
// if not x then
50266: LD_VAR 0 7
50270: NOT
50271: IFFALSE 50275
// continue ;
50273: GO 50193
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50275: LD_ADDR_EXP 54
50279: PUSH
50280: LD_EXP 54
50284: PPUSH
50285: LD_VAR 0 2
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PPUSH
50297: LD_VAR 0 7
50301: PPUSH
50302: CALL 3206 0 3
50306: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50307: LD_EXP 54
50311: PUSH
50312: LD_VAR 0 2
50316: ARRAY
50317: NOT
50318: PUSH
50319: LD_EXP 54
50323: PUSH
50324: LD_VAR 0 2
50328: ARRAY
50329: PUSH
50330: LD_INT 1
50332: ARRAY
50333: NOT
50334: OR
50335: IFFALSE 50339
// continue ;
50337: GO 50193
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50339: LD_EXP 54
50343: PUSH
50344: LD_VAR 0 2
50348: ARRAY
50349: PUSH
50350: LD_INT 1
50352: ARRAY
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PPUSH
50358: CALL_OW 313
50362: PUSH
50363: LD_INT 0
50365: EQUAL
50366: IFFALSE 50944
// if not mc_empty_turret_list [ i ] [ 2 ] then
50368: LD_EXP 54
50372: PUSH
50373: LD_VAR 0 2
50377: ARRAY
50378: PUSH
50379: LD_INT 2
50381: ARRAY
50382: NOT
50383: IFFALSE 50642
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50385: LD_ADDR_VAR 0 6
50389: PUSH
50390: LD_EXP 45
50394: PUSH
50395: LD_VAR 0 2
50399: ARRAY
50400: PUSH
50401: LD_EXP 61
50405: PUSH
50406: LD_VAR 0 2
50410: ARRAY
50411: DIFF
50412: PPUSH
50413: LD_INT 25
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: LD_INT 54
50428: PUSH
50429: EMPTY
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PPUSH
50440: CALL_OW 72
50444: ST_TO_ADDR
// if tmp2 then
50445: LD_VAR 0 6
50449: IFFALSE 50491
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50451: LD_ADDR_EXP 54
50455: PUSH
50456: LD_EXP 54
50460: PPUSH
50461: LD_VAR 0 2
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PPUSH
50473: LD_VAR 0 6
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: PPUSH
50482: CALL 3206 0 3
50486: ST_TO_ADDR
// break ;
50487: GO 50946
// end else
50489: GO 50640
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50491: LD_ADDR_VAR 0 5
50495: PUSH
50496: LD_EXP 45
50500: PUSH
50501: LD_VAR 0 2
50505: ARRAY
50506: PPUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 30
50512: PUSH
50513: LD_INT 4
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 30
50522: PUSH
50523: LD_INT 5
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: PPUSH
50535: CALL_OW 72
50539: ST_TO_ADDR
// if not tmp then
50540: LD_VAR 0 5
50544: NOT
50545: IFFALSE 50549
// continue ;
50547: GO 50193
// for j in tmp do
50549: LD_ADDR_VAR 0 3
50553: PUSH
50554: LD_VAR 0 5
50558: PUSH
50559: FOR_IN
50560: IFFALSE 50638
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50562: LD_ADDR_VAR 0 4
50566: PUSH
50567: LD_VAR 0 3
50571: PPUSH
50572: CALL_OW 313
50576: PPUSH
50577: LD_INT 25
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PPUSH
50587: CALL_OW 72
50591: ST_TO_ADDR
// if t then
50592: LD_VAR 0 4
50596: IFFALSE 50636
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50598: LD_ADDR_EXP 54
50602: PUSH
50603: LD_EXP 54
50607: PPUSH
50608: LD_VAR 0 2
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PPUSH
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 1
50627: ARRAY
50628: PPUSH
50629: CALL 3206 0 3
50633: ST_TO_ADDR
// break ;
50634: GO 50638
// end ; end ;
50636: GO 50559
50638: POP
50639: POP
// end ; end else
50640: GO 50944
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50642: LD_EXP 54
50646: PUSH
50647: LD_VAR 0 2
50651: ARRAY
50652: PUSH
50653: LD_INT 2
50655: ARRAY
50656: PUSH
50657: LD_INT 1
50659: ARRAY
50660: PPUSH
50661: CALL_OW 301
50665: IFFALSE 50698
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50667: LD_ADDR_EXP 54
50671: PUSH
50672: LD_EXP 54
50676: PPUSH
50677: LD_VAR 0 2
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PPUSH
50689: EMPTY
50690: PPUSH
50691: CALL 3206 0 3
50695: ST_TO_ADDR
// break ;
50696: GO 50946
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
50698: LD_EXP 54
50702: PUSH
50703: LD_VAR 0 2
50707: ARRAY
50708: PUSH
50709: LD_INT 2
50711: ARRAY
50712: PUSH
50713: LD_INT 1
50715: ARRAY
50716: PPUSH
50717: CALL_OW 314
50721: NOT
50722: PUSH
50723: LD_EXP 54
50727: PUSH
50728: LD_VAR 0 2
50732: ARRAY
50733: PUSH
50734: LD_INT 2
50736: ARRAY
50737: PUSH
50738: LD_INT 1
50740: ARRAY
50741: PUSH
50742: LD_EXP 54
50746: PUSH
50747: LD_VAR 0 2
50751: ARRAY
50752: PUSH
50753: LD_INT 1
50755: ARRAY
50756: PUSH
50757: LD_INT 1
50759: ARRAY
50760: PPUSH
50761: CALL_OW 313
50765: IN
50766: NOT
50767: AND
50768: IFFALSE 50944
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50770: LD_EXP 54
50774: PUSH
50775: LD_VAR 0 2
50779: ARRAY
50780: PUSH
50781: LD_INT 2
50783: ARRAY
50784: PUSH
50785: LD_INT 1
50787: ARRAY
50788: PPUSH
50789: CALL_OW 310
50793: IFFALSE 50818
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50795: LD_EXP 54
50799: PUSH
50800: LD_VAR 0 2
50804: ARRAY
50805: PUSH
50806: LD_INT 2
50808: ARRAY
50809: PUSH
50810: LD_INT 1
50812: ARRAY
50813: PPUSH
50814: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
50818: LD_EXP 54
50822: PUSH
50823: LD_VAR 0 2
50827: ARRAY
50828: PUSH
50829: LD_INT 2
50831: ARRAY
50832: PUSH
50833: LD_INT 1
50835: ARRAY
50836: PPUSH
50837: LD_EXP 54
50841: PUSH
50842: LD_VAR 0 2
50846: ARRAY
50847: PUSH
50848: LD_INT 1
50850: ARRAY
50851: PUSH
50852: LD_INT 1
50854: ARRAY
50855: PPUSH
50856: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
50860: LD_INT 35
50862: PPUSH
50863: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
50867: LD_EXP 54
50871: PUSH
50872: LD_VAR 0 2
50876: ARRAY
50877: PUSH
50878: LD_INT 2
50880: ARRAY
50881: NOT
50882: IFFALSE 50886
// break ;
50884: GO 50911
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50886: LD_EXP 54
50890: PUSH
50891: LD_VAR 0 2
50895: ARRAY
50896: PUSH
50897: LD_INT 2
50899: ARRAY
50900: PUSH
50901: LD_INT 1
50903: ARRAY
50904: PPUSH
50905: CALL_OW 310
50909: IFFALSE 50860
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50911: LD_ADDR_EXP 54
50915: PUSH
50916: LD_EXP 54
50920: PPUSH
50921: LD_VAR 0 2
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PPUSH
50933: EMPTY
50934: PPUSH
50935: CALL 3206 0 3
50939: ST_TO_ADDR
// exit ;
50940: POP
50941: POP
50942: GO 50948
// end ; end ; end ;
50944: GO 50193
50946: POP
50947: POP
// end ;
50948: LD_VAR 0 1
50952: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
50953: LD_INT 0
50955: PPUSH
50956: PPUSH
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
// if not mc_bases then
50961: LD_EXP 45
50965: NOT
50966: IFFALSE 50970
// exit ;
50968: GO 51780
// for i = 1 to mc_bases do
50970: LD_ADDR_VAR 0 2
50974: PUSH
50975: DOUBLE
50976: LD_INT 1
50978: DEC
50979: ST_TO_ADDR
50980: LD_EXP 45
50984: PUSH
50985: FOR_TO
50986: IFFALSE 51778
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
50988: LD_EXP 55
50992: PUSH
50993: LD_VAR 0 2
50997: ARRAY
50998: NOT
50999: PUSH
51000: LD_EXP 55
51004: PUSH
51005: LD_VAR 0 2
51009: ARRAY
51010: PUSH
51011: LD_EXP 56
51015: PUSH
51016: LD_VAR 0 2
51020: ARRAY
51021: EQUAL
51022: OR
51023: IFFALSE 51027
// continue ;
51025: GO 50985
// if mc_miners [ i ] then
51027: LD_EXP 56
51031: PUSH
51032: LD_VAR 0 2
51036: ARRAY
51037: IFFALSE 51465
// begin k := 1 ;
51039: LD_ADDR_VAR 0 4
51043: PUSH
51044: LD_INT 1
51046: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
51047: LD_ADDR_VAR 0 3
51051: PUSH
51052: DOUBLE
51053: LD_EXP 56
51057: PUSH
51058: LD_VAR 0 2
51062: ARRAY
51063: INC
51064: ST_TO_ADDR
51065: LD_INT 1
51067: PUSH
51068: FOR_DOWNTO
51069: IFFALSE 51463
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51071: LD_EXP 56
51075: PUSH
51076: LD_VAR 0 2
51080: ARRAY
51081: PUSH
51082: LD_VAR 0 3
51086: ARRAY
51087: PPUSH
51088: CALL_OW 301
51092: IFFALSE 51155
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51094: LD_ADDR_VAR 0 5
51098: PUSH
51099: LD_EXP 56
51103: PUSH
51104: LD_VAR 0 2
51108: ARRAY
51109: PUSH
51110: LD_EXP 56
51114: PUSH
51115: LD_VAR 0 2
51119: ARRAY
51120: PUSH
51121: LD_VAR 0 3
51125: ARRAY
51126: DIFF
51127: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51128: LD_ADDR_EXP 56
51132: PUSH
51133: LD_EXP 56
51137: PPUSH
51138: LD_VAR 0 2
51142: PPUSH
51143: LD_VAR 0 5
51147: PPUSH
51148: CALL_OW 1
51152: ST_TO_ADDR
// continue ;
51153: GO 51068
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
51155: LD_EXP 56
51159: PUSH
51160: LD_VAR 0 2
51164: ARRAY
51165: PUSH
51166: LD_VAR 0 3
51170: ARRAY
51171: PPUSH
51172: CALL_OW 257
51176: PUSH
51177: LD_INT 1
51179: EQUAL
51180: PUSH
51181: LD_EXP 56
51185: PUSH
51186: LD_VAR 0 2
51190: ARRAY
51191: PUSH
51192: LD_VAR 0 3
51196: ARRAY
51197: PPUSH
51198: CALL_OW 459
51202: NOT
51203: AND
51204: PUSH
51205: LD_EXP 56
51209: PUSH
51210: LD_VAR 0 2
51214: ARRAY
51215: PUSH
51216: LD_VAR 0 3
51220: ARRAY
51221: PPUSH
51222: CALL_OW 255
51226: PPUSH
51227: LD_EXP 55
51231: PUSH
51232: LD_VAR 0 2
51236: ARRAY
51237: PUSH
51238: LD_VAR 0 3
51242: ARRAY
51243: PUSH
51244: LD_INT 1
51246: ARRAY
51247: PPUSH
51248: LD_EXP 55
51252: PUSH
51253: LD_VAR 0 2
51257: ARRAY
51258: PUSH
51259: LD_VAR 0 3
51263: ARRAY
51264: PUSH
51265: LD_INT 2
51267: ARRAY
51268: PPUSH
51269: LD_INT 12
51271: PPUSH
51272: CALL 3700 0 4
51276: PUSH
51277: LD_INT 4
51279: ARRAY
51280: PUSH
51281: LD_INT 0
51283: EQUAL
51284: AND
51285: IFFALSE 51461
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51287: LD_EXP 56
51291: PUSH
51292: LD_VAR 0 2
51296: ARRAY
51297: PUSH
51298: LD_VAR 0 3
51302: ARRAY
51303: PPUSH
51304: CALL_OW 310
51308: IFFALSE 51331
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51310: LD_EXP 56
51314: PUSH
51315: LD_VAR 0 2
51319: ARRAY
51320: PUSH
51321: LD_VAR 0 3
51325: ARRAY
51326: PPUSH
51327: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51331: LD_EXP 56
51335: PUSH
51336: LD_VAR 0 2
51340: ARRAY
51341: PUSH
51342: LD_VAR 0 3
51346: ARRAY
51347: PPUSH
51348: CALL_OW 314
51352: NOT
51353: IFFALSE 51421
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51355: LD_EXP 56
51359: PUSH
51360: LD_VAR 0 2
51364: ARRAY
51365: PUSH
51366: LD_VAR 0 3
51370: ARRAY
51371: PPUSH
51372: LD_EXP 55
51376: PUSH
51377: LD_VAR 0 2
51381: ARRAY
51382: PUSH
51383: LD_VAR 0 4
51387: ARRAY
51388: PUSH
51389: LD_INT 1
51391: ARRAY
51392: PPUSH
51393: LD_EXP 55
51397: PUSH
51398: LD_VAR 0 2
51402: ARRAY
51403: PUSH
51404: LD_VAR 0 4
51408: ARRAY
51409: PUSH
51410: LD_INT 2
51412: ARRAY
51413: PPUSH
51414: LD_INT 0
51416: PPUSH
51417: CALL_OW 193
// k := k + 1 ;
51421: LD_ADDR_VAR 0 4
51425: PUSH
51426: LD_VAR 0 4
51430: PUSH
51431: LD_INT 1
51433: PLUS
51434: ST_TO_ADDR
// if k > mc_mines [ i ] then
51435: LD_VAR 0 4
51439: PUSH
51440: LD_EXP 55
51444: PUSH
51445: LD_VAR 0 2
51449: ARRAY
51450: GREATER
51451: IFFALSE 51461
// k := 1 ;
51453: LD_ADDR_VAR 0 4
51457: PUSH
51458: LD_INT 1
51460: ST_TO_ADDR
// end ; end ;
51461: GO 51068
51463: POP
51464: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51465: LD_ADDR_VAR 0 5
51469: PUSH
51470: LD_EXP 45
51474: PUSH
51475: LD_VAR 0 2
51479: ARRAY
51480: PPUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 30
51486: PUSH
51487: LD_INT 4
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 30
51496: PUSH
51497: LD_INT 5
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 30
51506: PUSH
51507: LD_INT 32
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: PPUSH
51520: CALL_OW 72
51524: ST_TO_ADDR
// if not tmp then
51525: LD_VAR 0 5
51529: NOT
51530: IFFALSE 51534
// continue ;
51532: GO 50985
// list := [ ] ;
51534: LD_ADDR_VAR 0 6
51538: PUSH
51539: EMPTY
51540: ST_TO_ADDR
// for j in tmp do
51541: LD_ADDR_VAR 0 3
51545: PUSH
51546: LD_VAR 0 5
51550: PUSH
51551: FOR_IN
51552: IFFALSE 51621
// begin for k in UnitsInside ( j ) do
51554: LD_ADDR_VAR 0 4
51558: PUSH
51559: LD_VAR 0 3
51563: PPUSH
51564: CALL_OW 313
51568: PUSH
51569: FOR_IN
51570: IFFALSE 51617
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51572: LD_VAR 0 4
51576: PPUSH
51577: CALL_OW 257
51581: PUSH
51582: LD_INT 1
51584: EQUAL
51585: PUSH
51586: LD_VAR 0 4
51590: PPUSH
51591: CALL_OW 459
51595: NOT
51596: AND
51597: IFFALSE 51615
// list := list ^ k ;
51599: LD_ADDR_VAR 0 6
51603: PUSH
51604: LD_VAR 0 6
51608: PUSH
51609: LD_VAR 0 4
51613: ADD
51614: ST_TO_ADDR
51615: GO 51569
51617: POP
51618: POP
// end ;
51619: GO 51551
51621: POP
51622: POP
// list := list diff mc_miners [ i ] ;
51623: LD_ADDR_VAR 0 6
51627: PUSH
51628: LD_VAR 0 6
51632: PUSH
51633: LD_EXP 56
51637: PUSH
51638: LD_VAR 0 2
51642: ARRAY
51643: DIFF
51644: ST_TO_ADDR
// if not list then
51645: LD_VAR 0 6
51649: NOT
51650: IFFALSE 51654
// continue ;
51652: GO 50985
// k := mc_mines [ i ] - mc_miners [ i ] ;
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_EXP 55
51663: PUSH
51664: LD_VAR 0 2
51668: ARRAY
51669: PUSH
51670: LD_EXP 56
51674: PUSH
51675: LD_VAR 0 2
51679: ARRAY
51680: MINUS
51681: ST_TO_ADDR
// if k > list then
51682: LD_VAR 0 4
51686: PUSH
51687: LD_VAR 0 6
51691: GREATER
51692: IFFALSE 51704
// k := list ;
51694: LD_ADDR_VAR 0 4
51698: PUSH
51699: LD_VAR 0 6
51703: ST_TO_ADDR
// for j = 1 to k do
51704: LD_ADDR_VAR 0 3
51708: PUSH
51709: DOUBLE
51710: LD_INT 1
51712: DEC
51713: ST_TO_ADDR
51714: LD_VAR 0 4
51718: PUSH
51719: FOR_TO
51720: IFFALSE 51774
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51722: LD_ADDR_EXP 56
51726: PUSH
51727: LD_EXP 56
51731: PPUSH
51732: LD_VAR 0 2
51736: PUSH
51737: LD_EXP 56
51741: PUSH
51742: LD_VAR 0 2
51746: ARRAY
51747: PUSH
51748: LD_INT 1
51750: PLUS
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PPUSH
51756: LD_VAR 0 6
51760: PUSH
51761: LD_VAR 0 3
51765: ARRAY
51766: PPUSH
51767: CALL 3206 0 3
51771: ST_TO_ADDR
51772: GO 51719
51774: POP
51775: POP
// end ;
51776: GO 50985
51778: POP
51779: POP
// end ;
51780: LD_VAR 0 1
51784: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
51785: LD_INT 0
51787: PPUSH
51788: PPUSH
51789: PPUSH
51790: PPUSH
51791: PPUSH
// if not mc_bases then
51792: LD_EXP 45
51796: NOT
51797: IFFALSE 51801
// exit ;
51799: GO 52577
// for i = 1 to mc_bases do
51801: LD_ADDR_VAR 0 2
51805: PUSH
51806: DOUBLE
51807: LD_INT 1
51809: DEC
51810: ST_TO_ADDR
51811: LD_EXP 45
51815: PUSH
51816: FOR_TO
51817: IFFALSE 52575
// begin if not mc_bases [ i ] then
51819: LD_EXP 45
51823: PUSH
51824: LD_VAR 0 2
51828: ARRAY
51829: NOT
51830: IFFALSE 51834
// continue ;
51832: GO 51816
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51834: LD_EXP 58
51838: PUSH
51839: LD_VAR 0 2
51843: ARRAY
51844: NOT
51845: PUSH
51846: LD_EXP 59
51850: PUSH
51851: LD_VAR 0 2
51855: ARRAY
51856: AND
51857: IFFALSE 51895
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51859: LD_ADDR_EXP 59
51863: PUSH
51864: LD_EXP 59
51868: PPUSH
51869: LD_VAR 0 2
51873: PPUSH
51874: EMPTY
51875: PPUSH
51876: CALL_OW 1
51880: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51881: LD_VAR 0 2
51885: PPUSH
51886: LD_INT 107
51888: PPUSH
51889: CALL 47447 0 2
// continue ;
51893: GO 51816
// end ; target := [ ] ;
51895: LD_ADDR_VAR 0 5
51899: PUSH
51900: EMPTY
51901: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51902: LD_ADDR_VAR 0 3
51906: PUSH
51907: DOUBLE
51908: LD_EXP 58
51912: PUSH
51913: LD_VAR 0 2
51917: ARRAY
51918: INC
51919: ST_TO_ADDR
51920: LD_INT 1
51922: PUSH
51923: FOR_DOWNTO
51924: IFFALSE 52184
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51926: LD_EXP 58
51930: PUSH
51931: LD_VAR 0 2
51935: ARRAY
51936: PUSH
51937: LD_VAR 0 3
51941: ARRAY
51942: PUSH
51943: LD_INT 2
51945: ARRAY
51946: PPUSH
51947: LD_EXP 58
51951: PUSH
51952: LD_VAR 0 2
51956: ARRAY
51957: PUSH
51958: LD_VAR 0 3
51962: ARRAY
51963: PUSH
51964: LD_INT 3
51966: ARRAY
51967: PPUSH
51968: CALL_OW 488
51972: PUSH
51973: LD_EXP 58
51977: PUSH
51978: LD_VAR 0 2
51982: ARRAY
51983: PUSH
51984: LD_VAR 0 3
51988: ARRAY
51989: PUSH
51990: LD_INT 2
51992: ARRAY
51993: PPUSH
51994: LD_EXP 58
51998: PUSH
51999: LD_VAR 0 2
52003: ARRAY
52004: PUSH
52005: LD_VAR 0 3
52009: ARRAY
52010: PUSH
52011: LD_INT 3
52013: ARRAY
52014: PPUSH
52015: CALL_OW 284
52019: PUSH
52020: LD_INT 0
52022: EQUAL
52023: AND
52024: IFFALSE 52079
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52026: LD_ADDR_VAR 0 4
52030: PUSH
52031: LD_EXP 58
52035: PUSH
52036: LD_VAR 0 2
52040: ARRAY
52041: PPUSH
52042: LD_VAR 0 3
52046: PPUSH
52047: CALL_OW 3
52051: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52052: LD_ADDR_EXP 58
52056: PUSH
52057: LD_EXP 58
52061: PPUSH
52062: LD_VAR 0 2
52066: PPUSH
52067: LD_VAR 0 4
52071: PPUSH
52072: CALL_OW 1
52076: ST_TO_ADDR
// continue ;
52077: GO 51923
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52079: LD_EXP 45
52083: PUSH
52084: LD_VAR 0 2
52088: ARRAY
52089: PUSH
52090: LD_INT 1
52092: ARRAY
52093: PPUSH
52094: CALL_OW 255
52098: PPUSH
52099: LD_EXP 58
52103: PUSH
52104: LD_VAR 0 2
52108: ARRAY
52109: PUSH
52110: LD_VAR 0 3
52114: ARRAY
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: PPUSH
52120: LD_EXP 58
52124: PUSH
52125: LD_VAR 0 2
52129: ARRAY
52130: PUSH
52131: LD_VAR 0 3
52135: ARRAY
52136: PUSH
52137: LD_INT 3
52139: ARRAY
52140: PPUSH
52141: LD_INT 20
52143: PPUSH
52144: CALL 3700 0 4
52148: PUSH
52149: LD_INT 4
52151: ARRAY
52152: PUSH
52153: LD_INT 0
52155: EQUAL
52156: IFFALSE 52182
// begin target := mc_crates [ i ] [ j ] ;
52158: LD_ADDR_VAR 0 5
52162: PUSH
52163: LD_EXP 58
52167: PUSH
52168: LD_VAR 0 2
52172: ARRAY
52173: PUSH
52174: LD_VAR 0 3
52178: ARRAY
52179: ST_TO_ADDR
// break ;
52180: GO 52184
// end ; end ;
52182: GO 51923
52184: POP
52185: POP
// if not target then
52186: LD_VAR 0 5
52190: NOT
52191: IFFALSE 52195
// continue ;
52193: GO 51816
// if mc_crates_collector [ i ] < 5 then
52195: LD_EXP 59
52199: PUSH
52200: LD_VAR 0 2
52204: ARRAY
52205: PUSH
52206: LD_INT 5
52208: LESS
52209: IFFALSE 52389
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52211: LD_ADDR_VAR 0 4
52215: PUSH
52216: LD_EXP 45
52220: PUSH
52221: LD_VAR 0 2
52225: ARRAY
52226: PPUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 25
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 25
52242: PUSH
52243: LD_INT 16
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 24
52257: PUSH
52258: LD_INT 750
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PPUSH
52269: CALL_OW 72
52273: ST_TO_ADDR
// if not tmp then
52274: LD_VAR 0 4
52278: NOT
52279: IFFALSE 52283
// continue ;
52281: GO 51816
// for j in tmp do
52283: LD_ADDR_VAR 0 3
52287: PUSH
52288: LD_VAR 0 4
52292: PUSH
52293: FOR_IN
52294: IFFALSE 52387
// if GetTag ( j ) = 0 then
52296: LD_VAR 0 3
52300: PPUSH
52301: CALL_OW 110
52305: PUSH
52306: LD_INT 0
52308: EQUAL
52309: IFFALSE 52385
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52311: LD_ADDR_EXP 59
52315: PUSH
52316: LD_EXP 59
52320: PPUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_EXP 59
52330: PUSH
52331: LD_VAR 0 2
52335: ARRAY
52336: PUSH
52337: LD_INT 1
52339: PLUS
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PPUSH
52345: LD_VAR 0 3
52349: PPUSH
52350: CALL 3206 0 3
52354: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52355: LD_VAR 0 3
52359: PPUSH
52360: LD_INT 107
52362: PPUSH
52363: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52367: LD_EXP 59
52371: PUSH
52372: LD_VAR 0 2
52376: ARRAY
52377: PUSH
52378: LD_INT 5
52380: GREATER
52381: IFFALSE 52385
// break ;
52383: GO 52387
// end ;
52385: GO 52293
52387: POP
52388: POP
// end ; if mc_crates_collector [ i ] and target then
52389: LD_EXP 59
52393: PUSH
52394: LD_VAR 0 2
52398: ARRAY
52399: PUSH
52400: LD_VAR 0 5
52404: AND
52405: IFFALSE 52573
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52407: LD_EXP 59
52411: PUSH
52412: LD_VAR 0 2
52416: ARRAY
52417: PUSH
52418: LD_VAR 0 5
52422: PUSH
52423: LD_INT 1
52425: ARRAY
52426: LESS
52427: IFFALSE 52447
// tmp := mc_crates_collector [ i ] else
52429: LD_ADDR_VAR 0 4
52433: PUSH
52434: LD_EXP 59
52438: PUSH
52439: LD_VAR 0 2
52443: ARRAY
52444: ST_TO_ADDR
52445: GO 52461
// tmp := target [ 1 ] ;
52447: LD_ADDR_VAR 0 4
52451: PUSH
52452: LD_VAR 0 5
52456: PUSH
52457: LD_INT 1
52459: ARRAY
52460: ST_TO_ADDR
// for j = 1 to tmp do
52461: LD_ADDR_VAR 0 3
52465: PUSH
52466: DOUBLE
52467: LD_INT 1
52469: DEC
52470: ST_TO_ADDR
52471: LD_VAR 0 4
52475: PUSH
52476: FOR_TO
52477: IFFALSE 52571
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52479: LD_EXP 59
52483: PUSH
52484: LD_VAR 0 2
52488: ARRAY
52489: PUSH
52490: LD_VAR 0 3
52494: ARRAY
52495: PPUSH
52496: CALL_OW 310
52500: IFFALSE 52523
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52502: LD_EXP 59
52506: PUSH
52507: LD_VAR 0 2
52511: ARRAY
52512: PUSH
52513: LD_VAR 0 3
52517: ARRAY
52518: PPUSH
52519: CALL_OW 122
// wait ( 3 ) ;
52523: LD_INT 3
52525: PPUSH
52526: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
52530: LD_EXP 59
52534: PUSH
52535: LD_VAR 0 2
52539: ARRAY
52540: PUSH
52541: LD_VAR 0 3
52545: ARRAY
52546: PPUSH
52547: LD_VAR 0 5
52551: PUSH
52552: LD_INT 2
52554: ARRAY
52555: PPUSH
52556: LD_VAR 0 5
52560: PUSH
52561: LD_INT 3
52563: ARRAY
52564: PPUSH
52565: CALL_OW 117
// end ;
52569: GO 52476
52571: POP
52572: POP
// end ; end ;
52573: GO 51816
52575: POP
52576: POP
// end ;
52577: LD_VAR 0 1
52581: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
52582: LD_INT 0
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
// if not mc_bases then
52588: LD_EXP 45
52592: NOT
52593: IFFALSE 52597
// exit ;
52595: GO 52746
// for i = 1 to mc_bases do
52597: LD_ADDR_VAR 0 2
52601: PUSH
52602: DOUBLE
52603: LD_INT 1
52605: DEC
52606: ST_TO_ADDR
52607: LD_EXP 45
52611: PUSH
52612: FOR_TO
52613: IFFALSE 52744
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
52615: LD_ADDR_VAR 0 4
52619: PUSH
52620: LD_EXP 60
52624: PUSH
52625: LD_VAR 0 2
52629: ARRAY
52630: PPUSH
52631: LD_INT 33
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PPUSH
52641: CALL_OW 72
52645: ST_TO_ADDR
// if tmp then
52646: LD_VAR 0 4
52650: IFFALSE 52742
// for j in tmp do
52652: LD_ADDR_VAR 0 3
52656: PUSH
52657: LD_VAR 0 4
52661: PUSH
52662: FOR_IN
52663: IFFALSE 52740
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
52665: LD_VAR 0 3
52669: PPUSH
52670: CALL_OW 312
52674: NOT
52675: PUSH
52676: LD_VAR 0 3
52680: PPUSH
52681: CALL_OW 256
52685: PUSH
52686: LD_INT 250
52688: GREATEREQUAL
52689: AND
52690: IFFALSE 52703
// Connect ( j ) else
52692: LD_VAR 0 3
52696: PPUSH
52697: CALL 5706 0 1
52701: GO 52738
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
52703: LD_VAR 0 3
52707: PPUSH
52708: CALL_OW 256
52712: PUSH
52713: LD_INT 250
52715: LESS
52716: PUSH
52717: LD_VAR 0 3
52721: PPUSH
52722: CALL_OW 312
52726: AND
52727: IFFALSE 52738
// ComUnlink ( j ) ;
52729: LD_VAR 0 3
52733: PPUSH
52734: CALL_OW 136
52738: GO 52662
52740: POP
52741: POP
// end ;
52742: GO 52612
52744: POP
52745: POP
// end ;
52746: LD_VAR 0 1
52750: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
52751: LD_INT 0
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
// if not mc_bases then
52758: LD_EXP 45
52762: NOT
52763: IFFALSE 52767
// exit ;
52765: GO 53134
// for i = 1 to mc_bases do
52767: LD_ADDR_VAR 0 2
52771: PUSH
52772: DOUBLE
52773: LD_INT 1
52775: DEC
52776: ST_TO_ADDR
52777: LD_EXP 45
52781: PUSH
52782: FOR_TO
52783: IFFALSE 53132
// begin if not mc_produce [ i ] then
52785: LD_EXP 62
52789: PUSH
52790: LD_VAR 0 2
52794: ARRAY
52795: NOT
52796: IFFALSE 52800
// continue ;
52798: GO 52782
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52800: LD_ADDR_VAR 0 5
52804: PUSH
52805: LD_EXP 45
52809: PUSH
52810: LD_VAR 0 2
52814: ARRAY
52815: PPUSH
52816: LD_INT 30
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PPUSH
52826: CALL_OW 72
52830: ST_TO_ADDR
// if not fac then
52831: LD_VAR 0 5
52835: NOT
52836: IFFALSE 52840
// continue ;
52838: GO 52782
// for j in fac do
52840: LD_ADDR_VAR 0 3
52844: PUSH
52845: LD_VAR 0 5
52849: PUSH
52850: FOR_IN
52851: IFFALSE 53128
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
52853: LD_VAR 0 3
52857: PPUSH
52858: CALL_OW 461
52862: PUSH
52863: LD_INT 2
52865: NONEQUAL
52866: PUSH
52867: LD_VAR 0 3
52871: PPUSH
52872: LD_INT 20
52874: PPUSH
52875: CALL 5397 0 2
52879: PUSH
52880: LD_INT 4
52882: ARRAY
52883: OR
52884: PUSH
52885: LD_VAR 0 3
52889: PPUSH
52890: CALL_OW 313
52894: PUSH
52895: LD_INT 0
52897: EQUAL
52898: OR
52899: IFFALSE 52903
// continue ;
52901: GO 52850
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
52903: LD_VAR 0 3
52907: PPUSH
52908: LD_EXP 62
52912: PUSH
52913: LD_VAR 0 2
52917: ARRAY
52918: PUSH
52919: LD_INT 1
52921: ARRAY
52922: PUSH
52923: LD_INT 1
52925: ARRAY
52926: PPUSH
52927: LD_EXP 62
52931: PUSH
52932: LD_VAR 0 2
52936: ARRAY
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PUSH
52942: LD_INT 2
52944: ARRAY
52945: PPUSH
52946: LD_EXP 62
52950: PUSH
52951: LD_VAR 0 2
52955: ARRAY
52956: PUSH
52957: LD_INT 1
52959: ARRAY
52960: PUSH
52961: LD_INT 3
52963: ARRAY
52964: PPUSH
52965: LD_EXP 62
52969: PUSH
52970: LD_VAR 0 2
52974: ARRAY
52975: PUSH
52976: LD_INT 1
52978: ARRAY
52979: PUSH
52980: LD_INT 4
52982: ARRAY
52983: PPUSH
52984: CALL_OW 448
52988: IFFALSE 53126
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
52990: LD_VAR 0 3
52994: PPUSH
52995: LD_EXP 62
52999: PUSH
53000: LD_VAR 0 2
53004: ARRAY
53005: PUSH
53006: LD_INT 1
53008: ARRAY
53009: PUSH
53010: LD_INT 1
53012: ARRAY
53013: PPUSH
53014: LD_EXP 62
53018: PUSH
53019: LD_VAR 0 2
53023: ARRAY
53024: PUSH
53025: LD_INT 1
53027: ARRAY
53028: PUSH
53029: LD_INT 2
53031: ARRAY
53032: PPUSH
53033: LD_EXP 62
53037: PUSH
53038: LD_VAR 0 2
53042: ARRAY
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PUSH
53048: LD_INT 3
53050: ARRAY
53051: PPUSH
53052: LD_EXP 62
53056: PUSH
53057: LD_VAR 0 2
53061: ARRAY
53062: PUSH
53063: LD_INT 1
53065: ARRAY
53066: PUSH
53067: LD_INT 4
53069: ARRAY
53070: PPUSH
53071: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
53075: LD_ADDR_VAR 0 4
53079: PUSH
53080: LD_EXP 62
53084: PUSH
53085: LD_VAR 0 2
53089: ARRAY
53090: PPUSH
53091: LD_INT 1
53093: PPUSH
53094: CALL_OW 3
53098: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
53099: LD_ADDR_EXP 62
53103: PUSH
53104: LD_EXP 62
53108: PPUSH
53109: LD_VAR 0 2
53113: PPUSH
53114: LD_VAR 0 4
53118: PPUSH
53119: CALL_OW 1
53123: ST_TO_ADDR
// break ;
53124: GO 53128
// end ; end ;
53126: GO 52850
53128: POP
53129: POP
// end ;
53130: GO 52782
53132: POP
53133: POP
// end ;
53134: LD_VAR 0 1
53138: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
53139: LD_INT 0
53141: PPUSH
53142: PPUSH
53143: PPUSH
// if not mc_bases then
53144: LD_EXP 45
53148: NOT
53149: IFFALSE 53153
// exit ;
53151: GO 53242
// for i = 1 to mc_bases do
53153: LD_ADDR_VAR 0 2
53157: PUSH
53158: DOUBLE
53159: LD_INT 1
53161: DEC
53162: ST_TO_ADDR
53163: LD_EXP 45
53167: PUSH
53168: FOR_TO
53169: IFFALSE 53240
// begin if mc_attack [ i ] then
53171: LD_EXP 61
53175: PUSH
53176: LD_VAR 0 2
53180: ARRAY
53181: IFFALSE 53238
// begin tmp := mc_attack [ i ] [ 1 ] ;
53183: LD_ADDR_VAR 0 3
53187: PUSH
53188: LD_EXP 61
53192: PUSH
53193: LD_VAR 0 2
53197: ARRAY
53198: PUSH
53199: LD_INT 1
53201: ARRAY
53202: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53203: LD_ADDR_EXP 61
53207: PUSH
53208: LD_EXP 61
53212: PPUSH
53213: LD_VAR 0 2
53217: PPUSH
53218: EMPTY
53219: PPUSH
53220: CALL_OW 1
53224: ST_TO_ADDR
// Attack ( tmp ) ;
53225: LD_VAR 0 3
53229: PPUSH
53230: CALL 29409 0 1
// exit ;
53234: POP
53235: POP
53236: GO 53242
// end ; end ;
53238: GO 53168
53240: POP
53241: POP
// end ;
53242: LD_VAR 0 1
53246: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53247: LD_INT 0
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
// if not mc_bases then
53256: LD_EXP 45
53260: NOT
53261: IFFALSE 53265
// exit ;
53263: GO 53682
// for i = 1 to mc_bases do
53265: LD_ADDR_VAR 0 2
53269: PUSH
53270: DOUBLE
53271: LD_INT 1
53273: DEC
53274: ST_TO_ADDR
53275: LD_EXP 45
53279: PUSH
53280: FOR_TO
53281: IFFALSE 53680
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53283: LD_ADDR_EXP 64
53287: PUSH
53288: LD_EXP 64
53292: PPUSH
53293: LD_VAR 0 2
53297: PPUSH
53298: LD_EXP 45
53302: PUSH
53303: LD_VAR 0 2
53307: ARRAY
53308: PPUSH
53309: CALL 33193 0 1
53313: PPUSH
53314: CALL_OW 1
53318: ST_TO_ADDR
// if not mc_scan [ i ] then
53319: LD_EXP 64
53323: PUSH
53324: LD_VAR 0 2
53328: ARRAY
53329: NOT
53330: IFFALSE 53441
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53332: LD_ADDR_VAR 0 4
53336: PUSH
53337: LD_EXP 45
53341: PUSH
53342: LD_VAR 0 2
53346: ARRAY
53347: PPUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 25
53353: PUSH
53354: LD_INT 5
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 25
53363: PUSH
53364: LD_INT 8
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 25
53373: PUSH
53374: LD_INT 9
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: PPUSH
53387: CALL_OW 72
53391: ST_TO_ADDR
// if not tmp then
53392: LD_VAR 0 4
53396: NOT
53397: IFFALSE 53401
// continue ;
53399: GO 53280
// for j in tmp do
53401: LD_ADDR_VAR 0 3
53405: PUSH
53406: LD_VAR 0 4
53410: PUSH
53411: FOR_IN
53412: IFFALSE 53439
// if IsInUnit ( j ) then
53414: LD_VAR 0 3
53418: PPUSH
53419: CALL_OW 310
53423: IFFALSE 53437
// SetClass ( j , 1 ) ;
53425: LD_VAR 0 3
53429: PPUSH
53430: LD_INT 1
53432: PPUSH
53433: CALL_OW 336
53437: GO 53411
53439: POP
53440: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53441: LD_EXP 64
53445: PUSH
53446: LD_VAR 0 2
53450: ARRAY
53451: PUSH
53452: LD_EXP 63
53456: PUSH
53457: LD_VAR 0 2
53461: ARRAY
53462: AND
53463: IFFALSE 53678
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53465: LD_ADDR_VAR 0 7
53469: PUSH
53470: LD_EXP 63
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PPUSH
53479: CALL 33300 0 1
53483: ST_TO_ADDR
// if class then
53484: LD_VAR 0 7
53488: IFFALSE 53611
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53490: LD_ADDR_VAR 0 4
53494: PUSH
53495: LD_EXP 45
53499: PUSH
53500: LD_VAR 0 2
53504: ARRAY
53505: PPUSH
53506: LD_INT 30
53508: PUSH
53509: LD_INT 5
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PPUSH
53516: CALL_OW 72
53520: ST_TO_ADDR
// if tmp then
53521: LD_VAR 0 4
53525: IFFALSE 53611
// begin for j in tmp do
53527: LD_ADDR_VAR 0 3
53531: PUSH
53532: LD_VAR 0 4
53536: PUSH
53537: FOR_IN
53538: IFFALSE 53609
// begin t := UnitsInside ( j ) ;
53540: LD_ADDR_VAR 0 5
53544: PUSH
53545: LD_VAR 0 3
53549: PPUSH
53550: CALL_OW 313
53554: ST_TO_ADDR
// if not t then
53555: LD_VAR 0 5
53559: NOT
53560: IFFALSE 53564
// continue ;
53562: GO 53537
// for x in t do
53564: LD_ADDR_VAR 0 6
53568: PUSH
53569: LD_VAR 0 5
53573: PUSH
53574: FOR_IN
53575: IFFALSE 53605
// if not MineOfUnit ( x ) then
53577: LD_VAR 0 6
53581: PPUSH
53582: CALL_OW 459
53586: NOT
53587: IFFALSE 53603
// SetClass ( x , class ) ;
53589: LD_VAR 0 6
53593: PPUSH
53594: LD_VAR 0 7
53598: PPUSH
53599: CALL_OW 336
53603: GO 53574
53605: POP
53606: POP
// end ;
53607: GO 53537
53609: POP
53610: POP
// end ; end ; tmp := mc_defender [ i ] ;
53611: LD_ADDR_VAR 0 4
53615: PUSH
53616: LD_EXP 63
53620: PUSH
53621: LD_VAR 0 2
53625: ARRAY
53626: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53627: LD_ADDR_EXP 63
53631: PUSH
53632: LD_EXP 63
53636: PPUSH
53637: LD_VAR 0 2
53641: PPUSH
53642: EMPTY
53643: PPUSH
53644: CALL_OW 1
53648: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
53649: LD_VAR 0 2
53653: PPUSH
53654: LD_VAR 0 4
53658: PPUSH
53659: LD_EXP 64
53663: PUSH
53664: LD_VAR 0 2
53668: ARRAY
53669: PPUSH
53670: CALL 32646 0 3
// exit ;
53674: POP
53675: POP
53676: GO 53682
// end ; end ;
53678: GO 53280
53680: POP
53681: POP
// end ;
53682: LD_VAR 0 1
53686: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
53687: LD_INT 0
53689: PPUSH
53690: PPUSH
53691: PPUSH
53692: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
53693: LD_VAR 0 1
53697: NOT
53698: PUSH
53699: LD_VAR 0 2
53703: NOT
53704: OR
53705: PUSH
53706: LD_VAR 0 3
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: LD_INT 4
53722: PUSH
53723: LD_INT 5
53725: PUSH
53726: LD_INT 8
53728: PUSH
53729: LD_INT 9
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: IN
53741: NOT
53742: OR
53743: PUSH
53744: LD_VAR 0 2
53748: PUSH
53749: LD_EXP 63
53753: PUSH
53754: LD_VAR 0 5
53758: ARRAY
53759: IN
53760: OR
53761: IFFALSE 53765
// exit ;
53763: GO 54177
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53765: LD_ADDR_VAR 0 1
53769: PUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: LD_INT 21
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 24
53787: PUSH
53788: LD_INT 250
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PPUSH
53799: CALL_OW 72
53803: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
53804: LD_VAR 0 3
53808: PUSH
53809: LD_INT 5
53811: PUSH
53812: LD_INT 8
53814: PUSH
53815: LD_INT 9
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: IN
53823: IFFALSE 53833
// class := 1 ;
53825: LD_ADDR_VAR 0 3
53829: PUSH
53830: LD_INT 1
53832: ST_TO_ADDR
// case class of 1 :
53833: LD_VAR 0 3
53837: PUSH
53838: LD_INT 1
53840: DOUBLE
53841: EQUAL
53842: IFTRUE 53846
53844: GO 53892
53846: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
53847: LD_ADDR_VAR 0 7
53851: PUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 30
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 30
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: PPUSH
53885: CALL_OW 72
53889: ST_TO_ADDR
53890: GO 54066
53892: LD_INT 2
53894: DOUBLE
53895: EQUAL
53896: IFTRUE 53900
53898: GO 53946
53900: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53901: LD_ADDR_VAR 0 7
53905: PUSH
53906: LD_VAR 0 1
53910: PPUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 30
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 30
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: PPUSH
53939: CALL_OW 72
53943: ST_TO_ADDR
53944: GO 54066
53946: LD_INT 3
53948: DOUBLE
53949: EQUAL
53950: IFTRUE 53954
53952: GO 54000
53954: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53955: LD_ADDR_VAR 0 7
53959: PUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 30
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 30
53980: PUSH
53981: LD_INT 3
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: PPUSH
53993: CALL_OW 72
53997: ST_TO_ADDR
53998: GO 54066
54000: LD_INT 4
54002: DOUBLE
54003: EQUAL
54004: IFTRUE 54008
54006: GO 54065
54008: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
54009: LD_ADDR_VAR 0 7
54013: PUSH
54014: LD_VAR 0 1
54018: PPUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 30
54024: PUSH
54025: LD_INT 6
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 30
54034: PUSH
54035: LD_INT 7
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 30
54044: PUSH
54045: LD_INT 8
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: PPUSH
54058: CALL_OW 72
54062: ST_TO_ADDR
54063: GO 54066
54065: POP
// if not tmp then
54066: LD_VAR 0 7
54070: NOT
54071: IFFALSE 54075
// exit ;
54073: GO 54177
// for i in tmp do
54075: LD_ADDR_VAR 0 5
54079: PUSH
54080: LD_VAR 0 7
54084: PUSH
54085: FOR_IN
54086: IFFALSE 54155
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54088: LD_VAR 0 5
54092: PPUSH
54093: CALL_OW 313
54097: PUSH
54098: LD_INT 6
54100: LESS
54101: PUSH
54102: LD_VAR 0 5
54106: PPUSH
54107: CALL_OW 266
54111: PUSH
54112: LD_INT 31
54114: PUSH
54115: LD_INT 32
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: IN
54122: NOT
54123: AND
54124: PUSH
54125: LD_VAR 0 5
54129: PPUSH
54130: CALL_OW 313
54134: PUSH
54135: LD_INT 0
54137: EQUAL
54138: OR
54139: IFFALSE 54153
// begin j := i ;
54141: LD_ADDR_VAR 0 6
54145: PUSH
54146: LD_VAR 0 5
54150: ST_TO_ADDR
// break ;
54151: GO 54155
// end ; end ;
54153: GO 54085
54155: POP
54156: POP
// if j then
54157: LD_VAR 0 6
54161: IFFALSE 54177
// ComEnterUnit ( unit , j ) ;
54163: LD_VAR 0 2
54167: PPUSH
54168: LD_VAR 0 6
54172: PPUSH
54173: CALL_OW 120
// end ;
54177: LD_VAR 0 4
54181: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54182: LD_INT 0
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
// if not mc_bases then
54188: LD_EXP 45
54192: NOT
54193: IFFALSE 54197
// exit ;
54195: GO 54426
// for i = 1 to mc_bases do
54197: LD_ADDR_VAR 0 2
54201: PUSH
54202: DOUBLE
54203: LD_INT 1
54205: DEC
54206: ST_TO_ADDR
54207: LD_EXP 45
54211: PUSH
54212: FOR_TO
54213: IFFALSE 54424
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54215: LD_ADDR_VAR 0 4
54219: PUSH
54220: LD_EXP 45
54224: PUSH
54225: LD_VAR 0 2
54229: ARRAY
54230: PPUSH
54231: LD_INT 21
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PPUSH
54241: CALL_OW 72
54245: ST_TO_ADDR
// if not tmp then
54246: LD_VAR 0 4
54250: NOT
54251: IFFALSE 54257
// exit ;
54253: POP
54254: POP
54255: GO 54426
// for j in tmp do
54257: LD_ADDR_VAR 0 3
54261: PUSH
54262: LD_VAR 0 4
54266: PUSH
54267: FOR_IN
54268: IFFALSE 54420
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54270: LD_VAR 0 3
54274: PPUSH
54275: CALL_OW 257
54279: PUSH
54280: LD_INT 3
54282: EQUAL
54283: PUSH
54284: LD_EXP 64
54288: PUSH
54289: LD_VAR 0 2
54293: ARRAY
54294: AND
54295: IFFALSE 54299
// continue ;
54297: GO 54267
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54299: LD_VAR 0 3
54303: PPUSH
54304: CALL_OW 110
54308: NOT
54309: PUSH
54310: LD_VAR 0 3
54314: PPUSH
54315: CALL_OW 314
54319: NOT
54320: AND
54321: PUSH
54322: LD_VAR 0 3
54326: PPUSH
54327: CALL_OW 310
54331: NOT
54332: AND
54333: PUSH
54334: LD_EXP 48
54338: PUSH
54339: LD_VAR 0 2
54343: ARRAY
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: NOT
54349: AND
54350: PUSH
54351: LD_EXP 48
54355: PUSH
54356: LD_VAR 0 2
54360: ARRAY
54361: PUSH
54362: LD_INT 2
54364: ARRAY
54365: NOT
54366: AND
54367: PUSH
54368: LD_VAR 0 3
54372: PUSH
54373: LD_EXP 54
54377: PUSH
54378: LD_VAR 0 2
54382: ARRAY
54383: IN
54384: NOT
54385: AND
54386: IFFALSE 54418
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54388: LD_EXP 45
54392: PUSH
54393: LD_VAR 0 2
54397: ARRAY
54398: PPUSH
54399: LD_VAR 0 3
54403: PPUSH
54404: LD_VAR 0 3
54408: PPUSH
54409: CALL_OW 257
54413: PPUSH
54414: CALL 53687 0 3
// end ;
54418: GO 54267
54420: POP
54421: POP
// end ;
54422: GO 54212
54424: POP
54425: POP
// end ;
54426: LD_VAR 0 1
54430: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54431: LD_INT 0
54433: PPUSH
54434: PPUSH
54435: PPUSH
54436: PPUSH
54437: PPUSH
54438: PPUSH
// if not mc_bases [ base ] then
54439: LD_EXP 45
54443: PUSH
54444: LD_VAR 0 1
54448: ARRAY
54449: NOT
54450: IFFALSE 54454
// exit ;
54452: GO 54614
// tmp := [ ] ;
54454: LD_ADDR_VAR 0 6
54458: PUSH
54459: EMPTY
54460: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54461: LD_ADDR_VAR 0 7
54465: PUSH
54466: LD_VAR 0 3
54470: PPUSH
54471: LD_INT 0
54473: PPUSH
54474: CALL_OW 517
54478: ST_TO_ADDR
// if not list then
54479: LD_VAR 0 7
54483: NOT
54484: IFFALSE 54488
// exit ;
54486: GO 54614
// for i = 1 to amount do
54488: LD_ADDR_VAR 0 5
54492: PUSH
54493: DOUBLE
54494: LD_INT 1
54496: DEC
54497: ST_TO_ADDR
54498: LD_VAR 0 2
54502: PUSH
54503: FOR_TO
54504: IFFALSE 54562
// tmp := Replace ( tmp , i , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54506: LD_ADDR_VAR 0 6
54510: PUSH
54511: LD_VAR 0 6
54515: PPUSH
54516: LD_VAR 0 5
54520: PPUSH
54521: LD_VAR 0 7
54525: PUSH
54526: LD_INT 1
54528: ARRAY
54529: PUSH
54530: LD_VAR 0 5
54534: ARRAY
54535: PUSH
54536: LD_VAR 0 7
54540: PUSH
54541: LD_INT 2
54543: ARRAY
54544: PUSH
54545: LD_VAR 0 5
54549: ARRAY
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PPUSH
54555: CALL_OW 1
54559: ST_TO_ADDR
54560: GO 54503
54562: POP
54563: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54564: LD_ADDR_EXP 55
54568: PUSH
54569: LD_EXP 55
54573: PPUSH
54574: LD_VAR 0 1
54578: PPUSH
54579: LD_VAR 0 6
54583: PPUSH
54584: CALL_OW 1
54588: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
54589: LD_ADDR_EXP 57
54593: PUSH
54594: LD_EXP 57
54598: PPUSH
54599: LD_VAR 0 1
54603: PPUSH
54604: LD_VAR 0 3
54608: PPUSH
54609: CALL_OW 1
54613: ST_TO_ADDR
// end ;
54614: LD_VAR 0 4
54618: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
54619: LD_INT 0
54621: PPUSH
// if not mc_bases [ base ] then
54622: LD_EXP 45
54626: PUSH
54627: LD_VAR 0 1
54631: ARRAY
54632: NOT
54633: IFFALSE 54637
// exit ;
54635: GO 54662
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
54637: LD_ADDR_EXP 62
54641: PUSH
54642: LD_EXP 62
54646: PPUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_VAR 0 2
54656: PPUSH
54657: CALL_OW 1
54661: ST_TO_ADDR
// end ;
54662: LD_VAR 0 3
54666: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
54667: LD_INT 0
54669: PPUSH
// if not mc_bases [ base ] then
54670: LD_EXP 45
54674: PUSH
54675: LD_VAR 0 1
54679: ARRAY
54680: NOT
54681: IFFALSE 54685
// exit ;
54683: GO 54710
// mc_defender := Replace ( mc_defender , base , deflist ) ;
54685: LD_ADDR_EXP 63
54689: PUSH
54690: LD_EXP 63
54694: PPUSH
54695: LD_VAR 0 1
54699: PPUSH
54700: LD_VAR 0 2
54704: PPUSH
54705: CALL_OW 1
54709: ST_TO_ADDR
// end ;
54710: LD_VAR 0 3
54714: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
54715: LD_INT 0
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
// if not mc_bases [ base ] then
54721: LD_EXP 45
54725: PUSH
54726: LD_VAR 0 1
54730: ARRAY
54731: NOT
54732: IFFALSE 54736
// exit ;
54734: GO 54801
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
54736: LD_ADDR_EXP 61
54740: PUSH
54741: LD_EXP 61
54745: PPUSH
54746: LD_VAR 0 1
54750: PUSH
54751: LD_EXP 61
54755: PUSH
54756: LD_VAR 0 1
54760: ARRAY
54761: PUSH
54762: LD_INT 1
54764: PLUS
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PPUSH
54770: LD_VAR 0 1
54774: PUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_VAR 0 3
54784: PUSH
54785: LD_VAR 0 4
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: PPUSH
54796: CALL 3206 0 3
54800: ST_TO_ADDR
// end ;
54801: LD_VAR 0 5
54805: RET
// export function MC_GetMinesField ( base ) ; begin
54806: LD_INT 0
54808: PPUSH
// result := mc_mines [ base ] ;
54809: LD_ADDR_VAR 0 2
54813: PUSH
54814: LD_EXP 55
54818: PUSH
54819: LD_VAR 0 1
54823: ARRAY
54824: ST_TO_ADDR
// end ;
54825: LD_VAR 0 2
54829: RET
// export function MC_GetProduceList ( base ) ; begin
54830: LD_INT 0
54832: PPUSH
// result := mc_produce [ base ] ;
54833: LD_ADDR_VAR 0 2
54837: PUSH
54838: LD_EXP 62
54842: PUSH
54843: LD_VAR 0 1
54847: ARRAY
54848: ST_TO_ADDR
// end ; end_of_file
54849: LD_VAR 0 2
54853: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 255
54863: PUSH
54864: LD_INT 1
54866: EQUAL
54867: IFFALSE 54877
// artifact_get := true ;
54869: LD_ADDR_EXP 12
54873: PUSH
54874: LD_INT 1
54876: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
54877: LD_VAR 0 1
54881: PPUSH
54882: CALL_OW 255
54886: PUSH
54887: LD_INT 2
54889: EQUAL
54890: IFFALSE 54908
// begin artifact_get := false ;
54892: LD_ADDR_EXP 12
54896: PUSH
54897: LD_INT 0
54899: ST_TO_ADDR
// artifact_stolen := true ;
54900: LD_ADDR_EXP 11
54904: PUSH
54905: LD_INT 1
54907: ST_TO_ADDR
// end ; artifact_oncargo := true ;
54908: LD_ADDR_EXP 13
54912: PUSH
54913: LD_INT 1
54915: ST_TO_ADDR
// end ;
54916: PPOPN 2
54918: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
54919: LD_ADDR_EXP 13
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// end ;
54927: PPOPN 2
54929: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
54930: LD_INT 0
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
54937: LD_VAR 0 1
54941: PUSH
54942: LD_INT 22
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 21
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 25
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 25
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 25
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 25
54997: PUSH
54998: LD_INT 4
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 25
55007: PUSH
55008: LD_INT 5
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 25
55017: PUSH
55018: LD_INT 8
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: PPUSH
55039: CALL_OW 69
55043: IN
55044: IFFALSE 55060
// loses_counter := loses_counter + 1 ;
55046: LD_ADDR_EXP 16
55050: PUSH
55051: LD_EXP 16
55055: PUSH
55056: LD_INT 1
55058: PLUS
55059: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
55060: LD_VAR 0 1
55064: PUSH
55065: LD_INT 21
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PPUSH
55075: CALL_OW 69
55079: IN
55080: IFFALSE 55596
// begin if not mc_bases then
55082: LD_EXP 45
55086: NOT
55087: IFFALSE 55091
// exit ;
55089: GO 55596
// pos := mc_build_list [ i ] + 1 ;
55091: LD_ADDR_VAR 0 5
55095: PUSH
55096: LD_EXP 50
55100: PUSH
55101: LD_VAR 0 2
55105: ARRAY
55106: PUSH
55107: LD_INT 1
55109: PLUS
55110: ST_TO_ADDR
// btype := GetBType ( un ) ;
55111: LD_ADDR_VAR 0 4
55115: PUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 266
55125: ST_TO_ADDR
// if btype = b_warehouse then
55126: LD_VAR 0 4
55130: PUSH
55131: LD_INT 1
55133: EQUAL
55134: IFFALSE 55152
// begin btype := b_depot ;
55136: LD_ADDR_VAR 0 4
55140: PUSH
55141: LD_INT 0
55143: ST_TO_ADDR
// pos := 1 ;
55144: LD_ADDR_VAR 0 5
55148: PUSH
55149: LD_INT 1
55151: ST_TO_ADDR
// end ; if btype = b_factory then
55152: LD_VAR 0 4
55156: PUSH
55157: LD_INT 3
55159: EQUAL
55160: IFFALSE 55178
// begin btype := b_workshop ;
55162: LD_ADDR_VAR 0 4
55166: PUSH
55167: LD_INT 2
55169: ST_TO_ADDR
// pos := 1 ;
55170: LD_ADDR_VAR 0 5
55174: PUSH
55175: LD_INT 1
55177: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55178: LD_VAR 0 4
55182: PUSH
55183: LD_INT 7
55185: PUSH
55186: LD_INT 8
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: IN
55193: IFFALSE 55203
// btype := b_lab ;
55195: LD_ADDR_VAR 0 4
55199: PUSH
55200: LD_INT 6
55202: ST_TO_ADDR
// for i = 1 to mc_bases do
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: DOUBLE
55209: LD_INT 1
55211: DEC
55212: ST_TO_ADDR
55213: LD_EXP 45
55217: PUSH
55218: FOR_TO
55219: IFFALSE 55594
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55221: LD_VAR 0 1
55225: PUSH
55226: LD_EXP 45
55230: PUSH
55231: LD_VAR 0 2
55235: ARRAY
55236: IN
55237: PUSH
55238: LD_VAR 0 1
55242: PUSH
55243: LD_EXP 52
55247: PUSH
55248: LD_VAR 0 2
55252: ARRAY
55253: IN
55254: OR
55255: IFFALSE 55592
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55257: LD_ADDR_EXP 50
55261: PUSH
55262: LD_EXP 50
55266: PPUSH
55267: LD_VAR 0 2
55271: PUSH
55272: LD_EXP 50
55276: PUSH
55277: LD_VAR 0 2
55281: ARRAY
55282: PUSH
55283: LD_INT 1
55285: PLUS
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PPUSH
55291: LD_VAR 0 4
55295: PUSH
55296: LD_VAR 0 1
55300: PPUSH
55301: CALL_OW 250
55305: PUSH
55306: LD_VAR 0 1
55310: PPUSH
55311: CALL_OW 251
55315: PUSH
55316: LD_VAR 0 1
55320: PPUSH
55321: CALL_OW 254
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: PPUSH
55332: CALL 3206 0 3
55336: ST_TO_ADDR
// if pos = 1 then
55337: LD_VAR 0 5
55341: PUSH
55342: LD_INT 1
55344: EQUAL
55345: IFFALSE 55460
// begin tmp := mc_build_list [ i ] ;
55347: LD_ADDR_VAR 0 6
55351: PUSH
55352: LD_EXP 50
55356: PUSH
55357: LD_VAR 0 2
55361: ARRAY
55362: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55363: LD_VAR 0 6
55367: PPUSH
55368: LD_INT 2
55370: PUSH
55371: LD_INT 30
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 30
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: PPUSH
55396: CALL_OW 72
55400: IFFALSE 55410
// pos := 2 ;
55402: LD_ADDR_VAR 0 5
55406: PUSH
55407: LD_INT 2
55409: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55410: LD_ADDR_VAR 0 6
55414: PUSH
55415: LD_VAR 0 6
55419: PPUSH
55420: LD_VAR 0 5
55424: PPUSH
55425: LD_VAR 0 6
55429: PPUSH
55430: CALL 3097 0 3
55434: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55435: LD_ADDR_EXP 50
55439: PUSH
55440: LD_EXP 50
55444: PPUSH
55445: LD_VAR 0 2
55449: PPUSH
55450: LD_VAR 0 6
55454: PPUSH
55455: CALL_OW 1
55459: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55460: LD_VAR 0 1
55464: PUSH
55465: LD_EXP 45
55469: PUSH
55470: LD_VAR 0 2
55474: ARRAY
55475: IN
55476: IFFALSE 55525
// begin tmp := mc_bases [ i ] diff un ;
55478: LD_ADDR_VAR 0 6
55482: PUSH
55483: LD_EXP 45
55487: PUSH
55488: LD_VAR 0 2
55492: ARRAY
55493: PUSH
55494: LD_VAR 0 1
55498: DIFF
55499: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55500: LD_ADDR_EXP 45
55504: PUSH
55505: LD_EXP 45
55509: PPUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: LD_VAR 0 6
55519: PPUSH
55520: CALL_OW 1
55524: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55525: LD_VAR 0 1
55529: PUSH
55530: LD_EXP 52
55534: PUSH
55535: LD_VAR 0 2
55539: ARRAY
55540: IN
55541: IFFALSE 55590
// begin tmp := mc_construct_list [ i ] diff un ;
55543: LD_ADDR_VAR 0 6
55547: PUSH
55548: LD_EXP 52
55552: PUSH
55553: LD_VAR 0 2
55557: ARRAY
55558: PUSH
55559: LD_VAR 0 1
55563: DIFF
55564: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55565: LD_ADDR_EXP 52
55569: PUSH
55570: LD_EXP 52
55574: PPUSH
55575: LD_VAR 0 2
55579: PPUSH
55580: LD_VAR 0 6
55584: PPUSH
55585: CALL_OW 1
55589: ST_TO_ADDR
// end ; break ;
55590: GO 55594
// end ;
55592: GO 55218
55594: POP
55595: POP
// end ; end ;
55596: PPOPN 6
55598: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
55599: LD_INT 0
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
// begin if not mc_bases then
55608: LD_EXP 45
55612: NOT
55613: IFFALSE 55617
// exit ;
55615: GO 55858
// btype := GetBType ( building ) ;
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: LD_VAR 0 1
55626: PPUSH
55627: CALL_OW 266
55631: ST_TO_ADDR
// x := GetX ( building ) ;
55632: LD_ADDR_VAR 0 7
55636: PUSH
55637: LD_VAR 0 1
55641: PPUSH
55642: CALL_OW 250
55646: ST_TO_ADDR
// y := GetY ( building ) ;
55647: LD_ADDR_VAR 0 8
55651: PUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 251
55661: ST_TO_ADDR
// d := GetDir ( building ) ;
55662: LD_ADDR_VAR 0 9
55666: PUSH
55667: LD_VAR 0 1
55671: PPUSH
55672: CALL_OW 254
55676: ST_TO_ADDR
// for i = 1 to mc_bases do
55677: LD_ADDR_VAR 0 3
55681: PUSH
55682: DOUBLE
55683: LD_INT 1
55685: DEC
55686: ST_TO_ADDR
55687: LD_EXP 45
55691: PUSH
55692: FOR_TO
55693: IFFALSE 55856
// begin if not mc_build_list [ i ] then
55695: LD_EXP 50
55699: PUSH
55700: LD_VAR 0 3
55704: ARRAY
55705: NOT
55706: IFFALSE 55710
// continue ;
55708: GO 55692
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55710: LD_VAR 0 6
55714: PUSH
55715: LD_VAR 0 7
55719: PUSH
55720: LD_VAR 0 8
55724: PUSH
55725: LD_VAR 0 9
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: PPUSH
55736: LD_EXP 50
55740: PUSH
55741: LD_VAR 0 3
55745: ARRAY
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: PPUSH
55751: CALL 8519 0 2
55755: IFFALSE 55854
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
55757: LD_ADDR_VAR 0 5
55761: PUSH
55762: LD_EXP 50
55766: PUSH
55767: LD_VAR 0 3
55771: ARRAY
55772: PPUSH
55773: LD_INT 1
55775: PPUSH
55776: CALL_OW 3
55780: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55781: LD_ADDR_EXP 50
55785: PUSH
55786: LD_EXP 50
55790: PPUSH
55791: LD_VAR 0 3
55795: PPUSH
55796: LD_VAR 0 5
55800: PPUSH
55801: CALL_OW 1
55805: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55806: LD_ADDR_EXP 52
55810: PUSH
55811: LD_EXP 52
55815: PPUSH
55816: LD_VAR 0 3
55820: PUSH
55821: LD_EXP 52
55825: PUSH
55826: LD_VAR 0 3
55830: ARRAY
55831: PUSH
55832: LD_INT 1
55834: PLUS
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PPUSH
55840: LD_VAR 0 1
55844: PPUSH
55845: CALL 3206 0 3
55849: ST_TO_ADDR
// exit ;
55850: POP
55851: POP
55852: GO 55858
// end ; end ;
55854: GO 55692
55856: POP
55857: POP
// end ;
55858: PPOPN 9
55860: END
// on BuildingComplete ( building ) do var i , j , tmp ;
55861: LD_INT 0
55863: PPUSH
55864: PPUSH
55865: PPUSH
// begin if not mc_bases then
55866: LD_EXP 45
55870: NOT
55871: IFFALSE 55875
// exit ;
55873: GO 56076
// for i = 1 to mc_bases do
55875: LD_ADDR_VAR 0 2
55879: PUSH
55880: DOUBLE
55881: LD_INT 1
55883: DEC
55884: ST_TO_ADDR
55885: LD_EXP 45
55889: PUSH
55890: FOR_TO
55891: IFFALSE 56074
// begin if building in mc_construct_list [ i ] then
55893: LD_VAR 0 1
55897: PUSH
55898: LD_EXP 52
55902: PUSH
55903: LD_VAR 0 2
55907: ARRAY
55908: IN
55909: IFFALSE 56072
// begin tmp := mc_construct_list [ i ] diff building ;
55911: LD_ADDR_VAR 0 4
55915: PUSH
55916: LD_EXP 52
55920: PUSH
55921: LD_VAR 0 2
55925: ARRAY
55926: PUSH
55927: LD_VAR 0 1
55931: DIFF
55932: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55933: LD_ADDR_EXP 52
55937: PUSH
55938: LD_EXP 52
55942: PPUSH
55943: LD_VAR 0 2
55947: PPUSH
55948: LD_VAR 0 4
55952: PPUSH
55953: CALL_OW 1
55957: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55958: LD_ADDR_EXP 45
55962: PUSH
55963: LD_EXP 45
55967: PPUSH
55968: LD_VAR 0 2
55972: PUSH
55973: LD_EXP 45
55977: PUSH
55978: LD_VAR 0 2
55982: ARRAY
55983: PUSH
55984: LD_INT 1
55986: PLUS
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PPUSH
55992: LD_VAR 0 1
55996: PPUSH
55997: CALL 3206 0 3
56001: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
56002: LD_VAR 0 1
56006: PPUSH
56007: CALL_OW 266
56011: PUSH
56012: LD_INT 32
56014: PUSH
56015: LD_INT 33
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: IN
56022: IFFALSE 56068
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
56024: LD_ADDR_EXP 53
56028: PUSH
56029: LD_EXP 53
56033: PPUSH
56034: LD_VAR 0 2
56038: PUSH
56039: LD_EXP 53
56043: PUSH
56044: LD_VAR 0 2
56048: ARRAY
56049: PUSH
56050: LD_INT 1
56052: PLUS
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PPUSH
56058: LD_VAR 0 1
56062: PPUSH
56063: CALL 3206 0 3
56067: ST_TO_ADDR
// exit ;
56068: POP
56069: POP
56070: GO 56076
// end ; end ;
56072: GO 55890
56074: POP
56075: POP
// end ;
56076: PPOPN 4
56078: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56079: LD_INT 0
56081: PPUSH
56082: PPUSH
// begin if not mc_bases then
56083: LD_EXP 45
56087: NOT
56088: IFFALSE 56092
// exit ;
56090: GO 56307
// repeat wait ( 0 0$1 ) ;
56092: LD_INT 35
56094: PPUSH
56095: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56099: LD_VAR 0 2
56103: PPUSH
56104: LD_VAR 0 3
56108: PPUSH
56109: CALL_OW 284
56113: IFFALSE 56092
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56115: LD_VAR 0 2
56119: PPUSH
56120: LD_VAR 0 3
56124: PPUSH
56125: CALL_OW 283
56129: PUSH
56130: LD_INT 4
56132: EQUAL
56133: IFFALSE 56137
// exit ;
56135: GO 56307
// for i = 1 to mc_bases do
56137: LD_ADDR_VAR 0 6
56141: PUSH
56142: DOUBLE
56143: LD_INT 1
56145: DEC
56146: ST_TO_ADDR
56147: LD_EXP 45
56151: PUSH
56152: FOR_TO
56153: IFFALSE 56305
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56155: LD_ADDR_VAR 0 7
56159: PUSH
56160: LD_EXP 45
56164: PUSH
56165: LD_VAR 0 6
56169: ARRAY
56170: PPUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 30
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 30
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 72
56203: ST_TO_ADDR
// if not depot then
56204: LD_VAR 0 7
56208: NOT
56209: IFFALSE 56213
// continue ;
56211: GO 56152
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56213: LD_VAR 0 7
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PPUSH
56222: LD_VAR 0 2
56226: PPUSH
56227: LD_VAR 0 3
56231: PPUSH
56232: CALL_OW 297
56236: PUSH
56237: LD_INT 30
56239: LESS
56240: IFFALSE 56303
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56242: LD_ADDR_EXP 58
56246: PUSH
56247: LD_EXP 58
56251: PPUSH
56252: LD_VAR 0 6
56256: PUSH
56257: LD_EXP 58
56261: PUSH
56262: LD_VAR 0 6
56266: ARRAY
56267: PUSH
56268: LD_INT 1
56270: PLUS
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PPUSH
56276: LD_VAR 0 4
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_VAR 0 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: PPUSH
56296: CALL 3206 0 3
56300: ST_TO_ADDR
// break ;
56301: GO 56305
// end ; end ;
56303: GO 56152
56305: POP
56306: POP
// end ;
56307: PPOPN 7
56309: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56310: LD_INT 0
56312: PPUSH
56313: PPUSH
// begin if not mc_bases then
56314: LD_EXP 45
56318: NOT
56319: IFFALSE 56323
// exit ;
56321: GO 56411
// for i = 1 to mc_bases do
56323: LD_ADDR_VAR 0 3
56327: PUSH
56328: DOUBLE
56329: LD_INT 1
56331: DEC
56332: ST_TO_ADDR
56333: LD_EXP 45
56337: PUSH
56338: FOR_TO
56339: IFFALSE 56409
// begin if factory in mc_bases [ i ] then
56341: LD_VAR 0 2
56345: PUSH
56346: LD_EXP 45
56350: PUSH
56351: LD_VAR 0 3
56355: ARRAY
56356: IN
56357: IFFALSE 56407
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56359: LD_ADDR_EXP 60
56363: PUSH
56364: LD_EXP 60
56368: PPUSH
56369: LD_VAR 0 3
56373: PUSH
56374: LD_EXP 60
56378: PUSH
56379: LD_VAR 0 3
56383: ARRAY
56384: PUSH
56385: LD_INT 1
56387: PLUS
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PPUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: CALL 3206 0 3
56402: ST_TO_ADDR
// exit ;
56403: POP
56404: POP
56405: GO 56411
// end ; end ;
56407: GO 56338
56409: POP
56410: POP
// end ;
56411: PPOPN 4
56413: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 247
56423: PUSH
56424: LD_INT 2
56426: EQUAL
56427: IFFALSE 56431
// exit ;
56429: GO 56448
// if not kamikazed then
56431: LD_EXP 10
56435: NOT
56436: IFFALSE 56448
// kamikazed := unit ;
56438: LD_ADDR_EXP 10
56442: PUSH
56443: LD_VAR 0 1
56447: ST_TO_ADDR
// end ; end_of_file
56448: PPOPN 1
56450: END
// every 0 0$1 trigger game do
56451: LD_EXP 2
56455: IFFALSE 56485
56457: GO 56459
56459: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
56460: LD_INT 7
56462: PUSH
56463: LD_INT 6
56465: PUSH
56466: LD_INT 4
56468: PUSH
56469: LD_INT 6
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: PPUSH
56478: LD_INT 1750
56480: PPUSH
56481: CALL 56486 0 2
56485: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
56486: LD_INT 0
56488: PPUSH
56489: PPUSH
56490: PPUSH
// if not areas then
56491: LD_VAR 0 1
56495: NOT
56496: IFFALSE 56500
// exit ;
56498: GO 56612
// repeat wait ( time ) ;
56500: LD_VAR 0 2
56504: PPUSH
56505: CALL_OW 67
// p := rand ( 1 , 90 ) ;
56509: LD_ADDR_VAR 0 5
56513: PUSH
56514: LD_INT 1
56516: PPUSH
56517: LD_INT 90
56519: PPUSH
56520: CALL_OW 12
56524: ST_TO_ADDR
// for i in areas do
56525: LD_ADDR_VAR 0 4
56529: PUSH
56530: LD_VAR 0 1
56534: PUSH
56535: FOR_IN
56536: IFFALSE 56589
// begin if Prob ( p ) then
56538: LD_VAR 0 5
56542: PPUSH
56543: CALL_OW 13
56547: IFFALSE 56587
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
56549: LD_INT 1
56551: PPUSH
56552: LD_INT 5
56554: PPUSH
56555: CALL_OW 12
56559: PPUSH
56560: LD_VAR 0 4
56564: PPUSH
56565: LD_INT 1
56567: PPUSH
56568: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
56572: LD_INT 455
56574: PPUSH
56575: LD_INT 595
56577: PPUSH
56578: CALL_OW 12
56582: PPUSH
56583: CALL_OW 67
// end ; end ;
56587: GO 56535
56589: POP
56590: POP
// time := time + 0 0$3 ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 2
56600: PUSH
56601: LD_INT 105
56603: PLUS
56604: ST_TO_ADDR
// until not game ;
56605: LD_EXP 2
56609: NOT
56610: IFFALSE 56500
// end ;
56612: LD_VAR 0 3
56616: RET
