// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46187 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28939 0 0
// PrepareAmerican ;
  33: CALL 294 0 0
// PrepareArabian ;
  37: CALL 33550 0 0
// Action ;
  41: CALL 38703 0 0
// RunMacro ;
  45: CALL 46350 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// end ;
 235: LD_VAR 0 1
 239: RET
// function Debuger ; var i ; begin
 240: LD_INT 0
 242: PPUSH
 243: PPUSH
// if not debug then
 244: LD_EXP 1
 248: NOT
 249: IFFALSE 253
// exit ;
 251: GO 289
// game_speed := 5 ;
 253: LD_ADDR_OWVAR 65
 257: PUSH
 258: LD_INT 5
 260: ST_TO_ADDR
// uc_side := 1 ;
 261: LD_ADDR_OWVAR 20
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// uc_nation := 1 ;
 269: LD_ADDR_OWVAR 21
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 277: LD_EXP 33
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 235
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
// uc_side := 4 ;
 305: LD_ADDR_OWVAR 20
 309: PUSH
 310: LD_INT 4
 312: ST_TO_ADDR
// uc_nation := 1 ;
 313: LD_ADDR_OWVAR 21
 317: PUSH
 318: LD_INT 1
 320: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 321: LD_ADDR_EXP 27
 325: PUSH
 326: LD_STRING Powell
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL 1875 0 2
 336: ST_TO_ADDR
// uc_side := 1 ;
 337: LD_ADDR_OWVAR 20
 341: PUSH
 342: LD_INT 1
 344: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 345: LD_ADDR_EXP 18
 349: PUSH
 350: LD_STRING JMM
 352: PPUSH
 353: LD_EXP 1
 357: NOT
 358: PPUSH
 359: CALL 1875 0 2
 363: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 364: LD_ADDR_EXP 19
 368: PUSH
 369: LD_STRING Lisa
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: CALL 1875 0 2
 382: ST_TO_ADDR
// if not Lisa then
 383: LD_EXP 19
 387: NOT
 388: IFFALSE 403
// Lisa := CreateCharacter ( 10_Lisa ) ;
 390: LD_ADDR_EXP 19
 394: PUSH
 395: LD_STRING 10_Lisa
 397: PPUSH
 398: CALL_OW 34
 402: ST_TO_ADDR
// if not Lisa then
 403: LD_EXP 19
 407: NOT
 408: IFFALSE 423
// Lisa := CreateCharacter ( 09_Lisa ) ;
 410: LD_ADDR_EXP 19
 414: PUSH
 415: LD_STRING 09_Lisa
 417: PPUSH
 418: CALL_OW 34
 422: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 423: LD_ADDR_EXP 28
 427: PUSH
 428: LD_STRING Cornel
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: CALL 1875 0 2
 441: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 442: LD_ADDR_EXP 20
 446: PUSH
 447: LD_STRING Donaldson
 449: PPUSH
 450: LD_EXP 1
 454: NOT
 455: PPUSH
 456: CALL 1875 0 2
 460: ST_TO_ADDR
// if not Donaldson then
 461: LD_EXP 20
 465: NOT
 466: IFFALSE 481
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 468: LD_ADDR_EXP 20
 472: PUSH
 473: LD_STRING 10_Donaldson
 475: PPUSH
 476: CALL_OW 34
 480: ST_TO_ADDR
// if not Donaldson then
 481: LD_EXP 20
 485: NOT
 486: IFFALSE 501
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 488: LD_ADDR_EXP 20
 492: PUSH
 493: LD_STRING 09_Donaldson
 495: PPUSH
 496: CALL_OW 34
 500: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 501: LD_ADDR_EXP 21
 505: PUSH
 506: LD_STRING Bobby
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: CALL 1875 0 2
 519: ST_TO_ADDR
// if not Bobby then
 520: LD_EXP 21
 524: NOT
 525: IFFALSE 540
// Bobby := CreateCharacter ( 10_Bobby ) ;
 527: LD_ADDR_EXP 21
 531: PUSH
 532: LD_STRING 10_Bobby
 534: PPUSH
 535: CALL_OW 34
 539: ST_TO_ADDR
// if not Bobby then
 540: LD_EXP 21
 544: NOT
 545: IFFALSE 560
// Bobby := CreateCharacter ( 09_Bobby ) ;
 547: LD_ADDR_EXP 21
 551: PUSH
 552: LD_STRING 09_Bobby
 554: PPUSH
 555: CALL_OW 34
 559: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 560: LD_ADDR_EXP 22
 564: PUSH
 565: LD_STRING Cyrus
 567: PPUSH
 568: LD_EXP 1
 572: NOT
 573: PPUSH
 574: CALL 1875 0 2
 578: ST_TO_ADDR
// if not Cyrus then
 579: LD_EXP 22
 583: NOT
 584: IFFALSE 599
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 586: LD_ADDR_EXP 22
 590: PUSH
 591: LD_STRING 10_Cyrus
 593: PPUSH
 594: CALL_OW 34
 598: ST_TO_ADDR
// if not Cyrus then
 599: LD_EXP 22
 603: NOT
 604: IFFALSE 619
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 606: LD_ADDR_EXP 22
 610: PUSH
 611: LD_STRING 09_Cyrus
 613: PPUSH
 614: CALL_OW 34
 618: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 619: LD_ADDR_EXP 23
 623: PUSH
 624: LD_STRING Denis
 626: PPUSH
 627: LD_EXP 1
 631: NOT
 632: PPUSH
 633: CALL 1875 0 2
 637: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 638: LD_ADDR_EXP 24
 642: PUSH
 643: LD_STRING Brown
 645: PPUSH
 646: LD_EXP 1
 650: NOT
 651: PPUSH
 652: CALL 1875 0 2
 656: ST_TO_ADDR
// if not Brown then
 657: LD_EXP 24
 661: NOT
 662: IFFALSE 677
// Brown := CreateCharacter ( 10_Brown ) ;
 664: LD_ADDR_EXP 24
 668: PUSH
 669: LD_STRING 10_Brown
 671: PPUSH
 672: CALL_OW 34
 676: ST_TO_ADDR
// if not Brown then
 677: LD_EXP 24
 681: NOT
 682: IFFALSE 697
// Brown := CreateCharacter ( 08_Brown ) ;
 684: LD_ADDR_EXP 24
 688: PUSH
 689: LD_STRING 08_Brown
 691: PPUSH
 692: CALL_OW 34
 696: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 697: LD_ADDR_EXP 25
 701: PUSH
 702: LD_STRING Gladstone
 704: PPUSH
 705: LD_EXP 1
 709: NOT
 710: PPUSH
 711: CALL 1875 0 2
 715: ST_TO_ADDR
// if not Gladstone then
 716: LD_EXP 25
 720: NOT
 721: IFFALSE 736
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 723: LD_ADDR_EXP 25
 727: PUSH
 728: LD_STRING 10_Gladstone
 730: PPUSH
 731: CALL_OW 34
 735: ST_TO_ADDR
// if not Gladstone then
 736: LD_EXP 25
 740: NOT
 741: IFFALSE 756
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 743: LD_ADDR_EXP 25
 747: PUSH
 748: LD_STRING 08_Gladstone
 750: PPUSH
 751: CALL_OW 34
 755: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 756: LD_ADDR_EXP 26
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_EXP 1
 768: NOT
 769: PPUSH
 770: CALL 1875 0 2
 774: ST_TO_ADDR
// if not Houten then
 775: LD_EXP 26
 779: NOT
 780: IFFALSE 795
// Houten := CreateCharacter ( 10_Houten ) ;
 782: LD_ADDR_EXP 26
 786: PUSH
 787: LD_STRING 10_Houten
 789: PPUSH
 790: CALL_OW 34
 794: ST_TO_ADDR
// if not Houten then
 795: LD_EXP 26
 799: NOT
 800: IFFALSE 815
// Houten := CreateCharacter ( 09_Houten ) ;
 802: LD_ADDR_EXP 26
 806: PUSH
 807: LD_STRING 09_Houten
 809: PPUSH
 810: CALL_OW 34
 814: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 815: LD_ADDR_EXP 28
 819: PUSH
 820: LD_STRING Cornel
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: CALL 1875 0 2
 833: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 834: LD_ADDR_EXP 29
 838: PUSH
 839: LD_STRING Gary
 841: PPUSH
 842: LD_EXP 1
 846: NOT
 847: PPUSH
 848: CALL 1875 0 2
 852: ST_TO_ADDR
// if not Gary then
 853: LD_EXP 29
 857: NOT
 858: IFFALSE 873
// Gary := CreateCharacter ( 10_Gary ) ;
 860: LD_ADDR_EXP 29
 864: PUSH
 865: LD_STRING 10_Gary
 867: PPUSH
 868: CALL_OW 34
 872: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 873: LD_ADDR_EXP 30
 877: PUSH
 878: LD_STRING Frank
 880: PPUSH
 881: LD_EXP 1
 885: NOT
 886: PPUSH
 887: CALL 1875 0 2
 891: ST_TO_ADDR
// if not Frank then
 892: LD_EXP 30
 896: NOT
 897: IFFALSE 912
// Frank := CreateCharacter ( 08_Frank ) ;
 899: LD_ADDR_EXP 30
 903: PUSH
 904: LD_STRING 08_Frank
 906: PPUSH
 907: CALL_OW 34
 911: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 912: LD_ADDR_EXP 31
 916: PUSH
 917: LD_STRING Kikuchi
 919: PPUSH
 920: LD_EXP 1
 924: NOT
 925: PPUSH
 926: CALL 1875 0 2
 930: ST_TO_ADDR
// if not Kikuchi then
 931: LD_EXP 31
 935: NOT
 936: IFFALSE 951
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 938: LD_ADDR_EXP 31
 942: PUSH
 943: LD_STRING 08_Kikuchi
 945: PPUSH
 946: CALL_OW 34
 950: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 951: LD_ADDR_VAR 0 5
 955: PUSH
 956: LD_EXP 19
 960: PUSH
 961: LD_EXP 20
 965: PUSH
 966: LD_EXP 21
 970: PUSH
 971: LD_EXP 22
 975: PUSH
 976: LD_EXP 23
 980: PUSH
 981: LD_EXP 24
 985: PUSH
 986: LD_EXP 25
 990: PUSH
 991: LD_EXP 26
 995: PUSH
 996: LD_EXP 28
1000: PUSH
1001: LD_EXP 29
1005: PUSH
1006: LD_EXP 30
1010: PUSH
1011: LD_EXP 31
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: ST_TO_ADDR
// tmp := tmp diff 0 ;
1030: LD_ADDR_VAR 0 5
1034: PUSH
1035: LD_VAR 0 5
1039: PUSH
1040: LD_INT 0
1042: DIFF
1043: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1044: LD_ADDR_VAR 0 5
1048: PUSH
1049: LD_VAR 0 5
1053: PUSH
1054: LD_STRING 10_lock
1056: PPUSH
1057: CALL_OW 31
1061: UNION
1062: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1063: LD_ADDR_VAR 0 5
1067: PUSH
1068: LD_VAR 0 5
1072: PUSH
1073: LD_STRING 10c_lock
1075: PPUSH
1076: CALL_OW 31
1080: UNION
1081: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1082: LD_STRING 10_lock
1084: PPUSH
1085: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1089: LD_STRING 10c_lock
1091: PPUSH
1092: CALL_OW 40
// for i in tmp do
1096: LD_ADDR_VAR 0 2
1100: PUSH
1101: LD_VAR 0 5
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1138
// if GetClass ( i ) = class_mortar then
1109: LD_VAR 0 2
1113: PPUSH
1114: CALL_OW 257
1118: PUSH
1119: LD_INT 8
1121: EQUAL
1122: IFFALSE 1136
// SetClass ( i , class_soldier ) ;
1124: LD_VAR 0 2
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL_OW 336
1136: GO 1106
1138: POP
1139: POP
// if tmp < 12 then
1140: LD_VAR 0 5
1144: PUSH
1145: LD_INT 12
1147: LESS
1148: IFFALSE 1246
// begin k := 16 - tmp ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 16
1157: PUSH
1158: LD_VAR 0 5
1162: MINUS
1163: ST_TO_ADDR
// for i = 1 to k do
1164: LD_ADDR_VAR 0 2
1168: PUSH
1169: DOUBLE
1170: LD_INT 1
1172: DEC
1173: ST_TO_ADDR
1174: LD_VAR 0 3
1178: PUSH
1179: FOR_TO
1180: IFFALSE 1244
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1182: LD_INT 0
1184: PPUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: LD_INT 2
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 5
1212: PPUSH
1213: CALL_OW 12
1217: ARRAY
1218: PPUSH
1219: LD_INT 6
1221: PPUSH
1222: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_VAR 0 5
1235: PUSH
1236: CALL_OW 44
1240: ADD
1241: ST_TO_ADDR
// end ;
1242: GO 1179
1244: POP
1245: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1246: LD_ADDR_VAR 0 6
1250: PUSH
1251: LD_STRING 1
1253: PPUSH
1254: LD_INT 12
1256: PPUSH
1257: LD_INT 12
1259: PPUSH
1260: LD_INT -5
1262: PUSH
1263: LD_EXP 18
1267: PUSH
1268: LD_INT -2
1270: PUSH
1271: LD_INT -3
1273: PUSH
1274: LD_INT -5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_VAR 0 5
1288: ADD
1289: PUSH
1290: LD_INT -6
1292: PUSH
1293: LD_INT -4
1295: PUSH
1296: LD_EXP 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: ADD
1306: PPUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 4
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 2
1319: PUSH
1320: LD_INT 1
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 4
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 5
1357: PUSH
1358: LD_INT 0
1360: PUSH
1361: LD_INT 2
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: PPUSH
1376: CALL_OW 42
1380: ST_TO_ADDR
// others := tmp diff selected ;
1381: LD_ADDR_VAR 0 9
1385: PUSH
1386: LD_VAR 0 5
1390: PUSH
1391: LD_VAR 0 6
1395: DIFF
1396: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1397: LD_ADDR_VAR 0 9
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_EXP 19
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: LD_EXP 21
1421: PUSH
1422: LD_EXP 22
1426: PUSH
1427: LD_EXP 23
1431: PUSH
1432: LD_EXP 24
1436: PUSH
1437: LD_EXP 25
1441: PUSH
1442: LD_EXP 26
1446: PUSH
1447: LD_EXP 28
1451: PUSH
1452: LD_EXP 29
1456: PUSH
1457: LD_EXP 30
1461: PUSH
1462: LD_EXP 31
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: DIFF
1481: ST_TO_ADDR
// if others then
1482: LD_VAR 0 9
1486: IFFALSE 1500
// SaveCharacters ( others , 11_others ) ;
1488: LD_VAR 0 9
1492: PPUSH
1493: LD_STRING 11_others
1495: PPUSH
1496: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1500: LD_ADDR_VAR 0 7
1504: PUSH
1505: LD_INT 3
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 1
1513: PUSH
1514: LD_INT 4
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 2
1525: PUSH
1526: LD_INT 2
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: LD_INT 5
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: PUSH
1541: LD_INT 4
1543: PUSH
1544: LD_INT 1
1546: PUSH
1547: LD_INT 1
1549: PUSH
1550: LD_INT 5
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: LD_INT 7
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 1
1585: PUSH
1586: LD_INT 7
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: ST_TO_ADDR
// for i in JMM ^ selected do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 18
1611: PUSH
1612: LD_VAR 0 6
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1808
// begin if GetClass ( i ) = 3 then
1621: LD_VAR 0 2
1625: PPUSH
1626: CALL_OW 257
1630: PUSH
1631: LD_INT 3
1633: EQUAL
1634: IFFALSE 1791
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1636: LD_ADDR_OWVAR 37
1640: PUSH
1641: LD_VAR 0 7
1645: PUSH
1646: LD_INT 1
1648: ARRAY
1649: PUSH
1650: LD_INT 1
1652: ARRAY
1653: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1654: LD_ADDR_OWVAR 39
1658: PUSH
1659: LD_VAR 0 7
1663: PUSH
1664: LD_INT 1
1666: ARRAY
1667: PUSH
1668: LD_INT 2
1670: ARRAY
1671: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1672: LD_ADDR_OWVAR 38
1676: PUSH
1677: LD_VAR 0 7
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PUSH
1686: LD_INT 3
1688: ARRAY
1689: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1690: LD_ADDR_OWVAR 40
1694: PUSH
1695: LD_VAR 0 7
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PUSH
1704: LD_INT 4
1706: ARRAY
1707: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1708: LD_ADDR_VAR 0 7
1712: PUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: CALL_OW 3
1725: ST_TO_ADDR
// veh := CreateVehicle ;
1726: LD_ADDR_VAR 0 8
1730: PUSH
1731: CALL_OW 45
1735: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1736: LD_VAR 0 8
1740: PPUSH
1741: LD_INT 8
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1751: LD_VAR 0 2
1755: PPUSH
1756: LD_VAR 0 8
1760: PPUSH
1761: CALL_OW 52
// if i = JMM then
1765: LD_VAR 0 2
1769: PUSH
1770: LD_EXP 18
1774: EQUAL
1775: IFFALSE 1789
// SetMark ( veh , 1 ) ;
1777: LD_VAR 0 8
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: CALL_OW 242
// end else
1789: GO 1806
// PlaceUnitArea ( i , am_hum_start , false ) ;
1791: LD_VAR 0 2
1795: PPUSH
1796: LD_INT 9
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 49
// end ;
1806: GO 1618
1808: POP
1809: POP
// vc_chassis := us_medium_tracked ;
1810: LD_ADDR_OWVAR 37
1814: PUSH
1815: LD_INT 3
1817: ST_TO_ADDR
// vc_engine := engine_solar ;
1818: LD_ADDR_OWVAR 39
1822: PUSH
1823: LD_INT 2
1825: ST_TO_ADDR
// vc_control := control_computer ;
1826: LD_ADDR_OWVAR 38
1830: PUSH
1831: LD_INT 3
1833: ST_TO_ADDR
// vc_weapon := us_radar ;
1834: LD_ADDR_OWVAR 40
1838: PUSH
1839: LD_INT 11
1841: ST_TO_ADDR
// veh := CreateVehicle ;
1842: LD_ADDR_VAR 0 8
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1852: LD_VAR 0 8
1856: PPUSH
1857: LD_INT 87
1859: PPUSH
1860: LD_INT 142
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 48
// end ; end_of_file
1870: LD_VAR 0 1
1874: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
// if exist_mode then
1879: LD_VAR 0 2
1883: IFFALSE 1908
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1885: LD_ADDR_VAR 0 4
1889: PUSH
1890: LD_EXP 4
1894: PUSH
1895: LD_VAR 0 1
1899: STR
1900: PPUSH
1901: CALL_OW 34
1905: ST_TO_ADDR
1906: GO 1923
// unit := NewCharacter ( ident ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 1
1917: PPUSH
1918: CALL_OW 25
1922: ST_TO_ADDR
// result := unit ;
1923: LD_ADDR_VAR 0 3
1927: PUSH
1928: LD_VAR 0 4
1932: ST_TO_ADDR
// end ;
1933: LD_VAR 0 3
1937: RET
// export function _GetHexInfo ( x , y ) ; begin
1938: LD_INT 0
1940: PPUSH
// result := false ;
1941: LD_ADDR_VAR 0 3
1945: PUSH
1946: LD_INT 0
1948: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1949: LD_VAR 0 1
1953: PPUSH
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 488
1963: NOT
1964: PUSH
1965: LD_VAR 0 1
1969: NOT
1970: OR
1971: PUSH
1972: LD_VAR 0 2
1976: NOT
1977: OR
1978: IFFALSE 1982
// exit ;
1980: GO 2002
// result := GetHexInfo ( x , y ) ;
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: LD_VAR 0 1
1991: PPUSH
1992: LD_VAR 0 2
1996: PPUSH
1997: CALL_OW 546
2001: ST_TO_ADDR
// end ;
2002: LD_VAR 0 3
2006: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2007: LD_INT 0
2009: PPUSH
// vc_chassis := chassis ;
2010: LD_ADDR_OWVAR 37
2014: PUSH
2015: LD_VAR 0 1
2019: ST_TO_ADDR
// vc_engine := engine ;
2020: LD_ADDR_OWVAR 39
2024: PUSH
2025: LD_VAR 0 2
2029: ST_TO_ADDR
// vc_control := control ;
2030: LD_ADDR_OWVAR 38
2034: PUSH
2035: LD_VAR 0 3
2039: ST_TO_ADDR
// vc_weapon := weapon ;
2040: LD_ADDR_OWVAR 40
2044: PUSH
2045: LD_VAR 0 4
2049: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2050: LD_ADDR_OWVAR 41
2054: PUSH
2055: LD_VAR 0 5
2059: ST_TO_ADDR
// end ;
2060: LD_VAR 0 6
2064: RET
// export function CanSayRand ( side ) ; begin
2065: LD_INT 0
2067: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_INT 22
2075: PUSH
2076: LD_VAR 0 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: LD_INT 25
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 25
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 25
2110: PUSH
2111: LD_INT 3
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 25
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_EXP 18
2148: PUSH
2149: LD_EXP 30
2153: PUSH
2154: LD_EXP 19
2158: PUSH
2159: LD_EXP 20
2163: PUSH
2164: LD_EXP 21
2168: PUSH
2169: LD_EXP 22
2173: PUSH
2174: LD_EXP 23
2178: PUSH
2179: LD_EXP 24
2183: PUSH
2184: LD_EXP 25
2188: PUSH
2189: LD_EXP 26
2193: PUSH
2194: LD_EXP 27
2198: PUSH
2199: LD_EXP 28
2203: PUSH
2204: LD_EXP 29
2208: PUSH
2209: LD_EXP 31
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: DIFF
2230: ST_TO_ADDR
// end ;
2231: LD_VAR 0 2
2235: RET
// export function SayRand ( sex , dial ) ; begin
2236: LD_INT 0
2238: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_INT 22
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 26
2256: PUSH
2257: LD_VAR 0 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: LD_INT 25
2271: PUSH
2272: LD_INT 1
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 25
2281: PUSH
2282: LD_INT 2
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 25
2291: PUSH
2292: LD_INT 3
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 4
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: PPUSH
2321: CALL_OW 69
2325: PUSH
2326: LD_EXP 18
2330: PUSH
2331: LD_EXP 30
2335: PUSH
2336: LD_EXP 19
2340: PUSH
2341: LD_EXP 20
2345: PUSH
2346: LD_EXP 21
2350: PUSH
2351: LD_EXP 22
2355: PUSH
2356: LD_EXP 23
2360: PUSH
2361: LD_EXP 24
2365: PUSH
2366: LD_EXP 25
2370: PUSH
2371: LD_EXP 26
2375: PUSH
2376: LD_EXP 27
2380: PUSH
2381: LD_EXP 28
2385: PUSH
2386: LD_EXP 29
2390: PUSH
2391: LD_EXP 31
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: DIFF
2412: ST_TO_ADDR
// if not result then
2413: LD_VAR 0 3
2417: NOT
2418: IFFALSE 2422
// exit ;
2420: GO 2450
// result := result [ 1 ] ;
2422: LD_ADDR_VAR 0 3
2426: PUSH
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// Say ( result , dial ) ;
2436: LD_VAR 0 3
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL_OW 88
// end ;
2450: LD_VAR 0 3
2454: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2455: LD_INT 0
2457: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2458: LD_ADDR_VAR 0 4
2462: PUSH
2463: LD_INT 22
2465: PUSH
2466: LD_INT 1
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 26
2475: PUSH
2476: LD_VAR 0 1
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: LD_INT 25
2490: PUSH
2491: LD_INT 1
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_INT 25
2500: PUSH
2501: LD_INT 2
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 25
2510: PUSH
2511: LD_INT 3
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 25
2520: PUSH
2521: LD_INT 4
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: LD_EXP 18
2549: PUSH
2550: LD_EXP 30
2554: PUSH
2555: LD_EXP 19
2559: PUSH
2560: LD_EXP 20
2564: PUSH
2565: LD_EXP 21
2569: PUSH
2570: LD_EXP 22
2574: PUSH
2575: LD_EXP 23
2579: PUSH
2580: LD_EXP 24
2584: PUSH
2585: LD_EXP 25
2589: PUSH
2590: LD_EXP 26
2594: PUSH
2595: LD_EXP 27
2599: PUSH
2600: LD_EXP 28
2604: PUSH
2605: LD_EXP 29
2609: PUSH
2610: LD_EXP 31
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_VAR 0 3
2635: ADD
2636: DIFF
2637: ST_TO_ADDR
// if not result then
2638: LD_VAR 0 4
2642: NOT
2643: IFFALSE 2647
// exit ;
2645: GO 2675
// result := result [ 1 ] ;
2647: LD_ADDR_VAR 0 4
2651: PUSH
2652: LD_VAR 0 4
2656: PUSH
2657: LD_INT 1
2659: ARRAY
2660: ST_TO_ADDR
// Say ( result , dial ) ;
2661: LD_VAR 0 4
2665: PPUSH
2666: LD_VAR 0 2
2670: PPUSH
2671: CALL_OW 88
// end ;
2675: LD_VAR 0 4
2679: RET
// export function WantPlant ( unit ) ; var task ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
// result := false ;
2684: LD_ADDR_VAR 0 2
2688: PUSH
2689: LD_INT 0
2691: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2692: LD_ADDR_VAR 0 3
2696: PUSH
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL_OW 437
2706: ST_TO_ADDR
// if task then
2707: LD_VAR 0 3
2711: IFFALSE 2739
// if task [ 1 ] [ 1 ] = p then
2713: LD_VAR 0 3
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_STRING p
2728: EQUAL
2729: IFFALSE 2739
// result := true ;
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// end ;
2739: LD_VAR 0 2
2743: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
// if pos < 1 then
2750: LD_VAR 0 2
2754: PUSH
2755: LD_INT 1
2757: LESS
2758: IFFALSE 2762
// exit ;
2760: GO 3065
// if pos = 1 then
2762: LD_VAR 0 2
2766: PUSH
2767: LD_INT 1
2769: EQUAL
2770: IFFALSE 2803
// result := Replace ( arr , pos [ 1 ] , value ) else
2772: LD_ADDR_VAR 0 4
2776: PUSH
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 3
2795: PPUSH
2796: CALL_OW 1
2800: ST_TO_ADDR
2801: GO 3065
// begin tmp := arr ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_VAR 0 1
2812: ST_TO_ADDR
// s_arr := [ tmp ] ;
2813: LD_ADDR_VAR 0 7
2817: PUSH
2818: LD_VAR 0 6
2822: PUSH
2823: EMPTY
2824: LIST
2825: ST_TO_ADDR
// for i = 1 to pos - 1 do
2826: LD_ADDR_VAR 0 5
2830: PUSH
2831: DOUBLE
2832: LD_INT 1
2834: DEC
2835: ST_TO_ADDR
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 1
2843: MINUS
2844: PUSH
2845: FOR_TO
2846: IFFALSE 2891
// begin tmp := tmp [ pos [ i ] ] ;
2848: LD_ADDR_VAR 0 6
2852: PUSH
2853: LD_VAR 0 6
2857: PUSH
2858: LD_VAR 0 2
2862: PUSH
2863: LD_VAR 0 5
2867: ARRAY
2868: ARRAY
2869: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2870: LD_ADDR_VAR 0 7
2874: PUSH
2875: LD_VAR 0 7
2879: PUSH
2880: LD_VAR 0 6
2884: PUSH
2885: EMPTY
2886: LIST
2887: ADD
2888: ST_TO_ADDR
// end ;
2889: GO 2845
2891: POP
2892: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: LD_VAR 0 6
2902: PPUSH
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 2
2912: ARRAY
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL_OW 1
2923: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: LD_VAR 0 7
2933: PPUSH
2934: LD_VAR 0 7
2938: PPUSH
2939: LD_VAR 0 6
2943: PPUSH
2944: CALL_OW 1
2948: ST_TO_ADDR
// for i = s_arr downto 2 do
2949: LD_ADDR_VAR 0 5
2953: PUSH
2954: DOUBLE
2955: LD_VAR 0 7
2959: INC
2960: ST_TO_ADDR
2961: LD_INT 2
2963: PUSH
2964: FOR_DOWNTO
2965: IFFALSE 3049
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2967: LD_ADDR_VAR 0 6
2971: PUSH
2972: LD_VAR 0 7
2976: PUSH
2977: LD_VAR 0 5
2981: PUSH
2982: LD_INT 1
2984: MINUS
2985: ARRAY
2986: PPUSH
2987: LD_VAR 0 2
2991: PUSH
2992: LD_VAR 0 5
2996: PUSH
2997: LD_INT 1
2999: MINUS
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 7
3006: PUSH
3007: LD_VAR 0 5
3011: ARRAY
3012: PPUSH
3013: CALL_OW 1
3017: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3018: LD_ADDR_VAR 0 7
3022: PUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_VAR 0 5
3032: PUSH
3033: LD_INT 1
3035: MINUS
3036: PPUSH
3037: LD_VAR 0 6
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// end ;
3047: GO 2964
3049: POP
3050: POP
// result := s_arr [ 1 ] ;
3051: LD_ADDR_VAR 0 4
3055: PUSH
3056: LD_VAR 0 7
3060: PUSH
3061: LD_INT 1
3063: ARRAY
3064: ST_TO_ADDR
// end ; end ;
3065: LD_VAR 0 4
3069: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3070: LD_INT 0
3072: PPUSH
3073: PPUSH
// if not list then
3074: LD_VAR 0 1
3078: NOT
3079: IFFALSE 3083
// exit ;
3081: GO 3174
// i := list [ pos1 ] ;
3083: LD_ADDR_VAR 0 5
3087: PUSH
3088: LD_VAR 0 1
3092: PUSH
3093: LD_VAR 0 2
3097: ARRAY
3098: ST_TO_ADDR
// if not i then
3099: LD_VAR 0 5
3103: NOT
3104: IFFALSE 3108
// exit ;
3106: GO 3174
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3108: LD_ADDR_VAR 0 1
3112: PUSH
3113: LD_VAR 0 1
3117: PPUSH
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_VAR 0 1
3127: PUSH
3128: LD_VAR 0 3
3132: ARRAY
3133: PPUSH
3134: CALL_OW 1
3138: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3139: LD_ADDR_VAR 0 1
3143: PUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_VAR 0 3
3153: PPUSH
3154: LD_VAR 0 5
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// result := list ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: LD_VAR 0 1
3173: ST_TO_ADDR
// end ;
3174: LD_VAR 0 4
3178: RET
// export function Add ( list , pos , val ) ; begin
3179: LD_INT 0
3181: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3182: LD_ADDR_VAR 0 4
3186: PUSH
3187: LD_VAR 0 1
3191: PPUSH
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_VAR 0 3
3201: PPUSH
3202: CALL 2744 0 3
3206: ST_TO_ADDR
3207: LD_VAR 0 4
3211: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3212: LD_INT 0
3214: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3215: LD_ADDR_VAR 0 5
3219: PUSH
3220: LD_VAR 0 1
3224: PPUSH
3225: CALL_OW 250
3229: PPUSH
3230: LD_VAR 0 1
3234: PPUSH
3235: CALL_OW 251
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_VAR 0 4
3254: PPUSH
3255: CALL 3265 0 5
3259: ST_TO_ADDR
// end ;
3260: LD_VAR 0 5
3264: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3265: LD_INT 0
3267: PPUSH
3268: PPUSH
3269: PPUSH
3270: PPUSH
// if not list then
3271: LD_VAR 0 3
3275: NOT
3276: IFFALSE 3280
// exit ;
3278: GO 3668
// result := [ ] ;
3280: LD_ADDR_VAR 0 6
3284: PUSH
3285: EMPTY
3286: ST_TO_ADDR
// for i in list do
3287: LD_ADDR_VAR 0 7
3291: PUSH
3292: LD_VAR 0 3
3296: PUSH
3297: FOR_IN
3298: IFFALSE 3500
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3300: LD_ADDR_VAR 0 9
3304: PUSH
3305: LD_VAR 0 7
3309: PPUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: LD_VAR 0 2
3319: PPUSH
3320: CALL_OW 297
3324: ST_TO_ADDR
// if not result then
3325: LD_VAR 0 6
3329: NOT
3330: IFFALSE 3356
// result := [ [ i , tmp ] ] else
3332: LD_ADDR_VAR 0 6
3336: PUSH
3337: LD_VAR 0 7
3341: PUSH
3342: LD_VAR 0 9
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: ST_TO_ADDR
3354: GO 3498
// begin if result [ result ] [ 2 ] < tmp then
3356: LD_VAR 0 6
3360: PUSH
3361: LD_VAR 0 6
3365: ARRAY
3366: PUSH
3367: LD_INT 2
3369: ARRAY
3370: PUSH
3371: LD_VAR 0 9
3375: LESS
3376: IFFALSE 3418
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3378: LD_ADDR_VAR 0 6
3382: PUSH
3383: LD_VAR 0 6
3387: PPUSH
3388: LD_VAR 0 6
3392: PUSH
3393: LD_INT 1
3395: PLUS
3396: PPUSH
3397: LD_VAR 0 7
3401: PUSH
3402: LD_VAR 0 9
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 2
3415: ST_TO_ADDR
3416: GO 3498
// for j = 1 to result do
3418: LD_ADDR_VAR 0 8
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_VAR 0 6
3432: PUSH
3433: FOR_TO
3434: IFFALSE 3496
// begin if tmp < result [ j ] [ 2 ] then
3436: LD_VAR 0 9
3440: PUSH
3441: LD_VAR 0 6
3445: PUSH
3446: LD_VAR 0 8
3450: ARRAY
3451: PUSH
3452: LD_INT 2
3454: ARRAY
3455: LESS
3456: IFFALSE 3494
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3458: LD_ADDR_VAR 0 6
3462: PUSH
3463: LD_VAR 0 6
3467: PPUSH
3468: LD_VAR 0 8
3472: PPUSH
3473: LD_VAR 0 7
3477: PUSH
3478: LD_VAR 0 9
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 2
3491: ST_TO_ADDR
// break ;
3492: GO 3496
// end ; end ;
3494: GO 3433
3496: POP
3497: POP
// end ; end ;
3498: GO 3297
3500: POP
3501: POP
// if result and not asc then
3502: LD_VAR 0 6
3506: PUSH
3507: LD_VAR 0 4
3511: NOT
3512: AND
3513: IFFALSE 3588
// begin tmp := result ;
3515: LD_ADDR_VAR 0 9
3519: PUSH
3520: LD_VAR 0 6
3524: ST_TO_ADDR
// for i = tmp downto 1 do
3525: LD_ADDR_VAR 0 7
3529: PUSH
3530: DOUBLE
3531: LD_VAR 0 9
3535: INC
3536: ST_TO_ADDR
3537: LD_INT 1
3539: PUSH
3540: FOR_DOWNTO
3541: IFFALSE 3586
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3543: LD_ADDR_VAR 0 6
3547: PUSH
3548: LD_VAR 0 6
3552: PPUSH
3553: LD_VAR 0 9
3557: PUSH
3558: LD_VAR 0 7
3562: MINUS
3563: PUSH
3564: LD_INT 1
3566: PLUS
3567: PPUSH
3568: LD_VAR 0 9
3572: PUSH
3573: LD_VAR 0 7
3577: ARRAY
3578: PPUSH
3579: CALL_OW 1
3583: ST_TO_ADDR
3584: GO 3540
3586: POP
3587: POP
// end ; tmp := [ ] ;
3588: LD_ADDR_VAR 0 9
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// if mode then
3595: LD_VAR 0 5
3599: IFFALSE 3668
// begin for i = 1 to result do
3601: LD_ADDR_VAR 0 7
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 6
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3656
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3619: LD_ADDR_VAR 0 9
3623: PUSH
3624: LD_VAR 0 9
3628: PPUSH
3629: LD_VAR 0 7
3633: PPUSH
3634: LD_VAR 0 6
3638: PUSH
3639: LD_VAR 0 7
3643: ARRAY
3644: PUSH
3645: LD_INT 1
3647: ARRAY
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
3654: GO 3616
3656: POP
3657: POP
// result := tmp ;
3658: LD_ADDR_VAR 0 6
3662: PUSH
3663: LD_VAR 0 9
3667: ST_TO_ADDR
// end ; end ;
3668: LD_VAR 0 6
3672: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3673: LD_INT 0
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
3679: PPUSH
3680: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3681: LD_ADDR_VAR 0 5
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: LD_INT 0
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: ST_TO_ADDR
// if not x or not y then
3703: LD_VAR 0 2
3707: NOT
3708: PUSH
3709: LD_VAR 0 3
3713: NOT
3714: OR
3715: IFFALSE 3719
// exit ;
3717: GO 5347
// if not range then
3719: LD_VAR 0 4
3723: NOT
3724: IFFALSE 3734
// range := 10 ;
3726: LD_ADDR_VAR 0 4
3730: PUSH
3731: LD_INT 10
3733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3734: LD_ADDR_VAR 0 8
3738: PUSH
3739: LD_INT 81
3741: PUSH
3742: LD_VAR 0 1
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 92
3753: PUSH
3754: LD_VAR 0 2
3758: PUSH
3759: LD_VAR 0 3
3763: PUSH
3764: LD_VAR 0 4
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PPUSH
3779: CALL_OW 69
3783: ST_TO_ADDR
// if not tmp then
3784: LD_VAR 0 8
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 5347
// for i in tmp do
3793: LD_ADDR_VAR 0 6
3797: PUSH
3798: LD_VAR 0 8
3802: PUSH
3803: FOR_IN
3804: IFFALSE 5322
// begin points := [ 0 , 0 , 0 ] ;
3806: LD_ADDR_VAR 0 9
3810: PUSH
3811: LD_INT 0
3813: PUSH
3814: LD_INT 0
3816: PUSH
3817: LD_INT 0
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: ST_TO_ADDR
// bpoints := 1 ;
3825: LD_ADDR_VAR 0 10
3829: PUSH
3830: LD_INT 1
3832: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3833: LD_VAR 0 6
3837: PPUSH
3838: CALL_OW 247
3842: PUSH
3843: LD_INT 1
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 4429
3851: POP
// begin if GetClass ( i ) = 1 then
3852: LD_VAR 0 6
3856: PPUSH
3857: CALL_OW 257
3861: PUSH
3862: LD_INT 1
3864: EQUAL
3865: IFFALSE 3886
// points := [ 10 , 5 , 3 ] ;
3867: LD_ADDR_VAR 0 9
3871: PUSH
3872: LD_INT 10
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: LD_INT 3
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3886: LD_VAR 0 6
3890: PPUSH
3891: CALL_OW 257
3895: PUSH
3896: LD_INT 2
3898: PUSH
3899: LD_INT 3
3901: PUSH
3902: LD_INT 4
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: IN
3910: IFFALSE 3931
// points := [ 3 , 2 , 1 ] ;
3912: LD_ADDR_VAR 0 9
3916: PUSH
3917: LD_INT 3
3919: PUSH
3920: LD_INT 2
3922: PUSH
3923: LD_INT 1
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3931: LD_VAR 0 6
3935: PPUSH
3936: CALL_OW 257
3940: PUSH
3941: LD_INT 5
3943: EQUAL
3944: IFFALSE 3965
// points := [ 130 , 5 , 2 ] ;
3946: LD_ADDR_VAR 0 9
3950: PUSH
3951: LD_INT 130
3953: PUSH
3954: LD_INT 5
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3965: LD_VAR 0 6
3969: PPUSH
3970: CALL_OW 257
3974: PUSH
3975: LD_INT 8
3977: EQUAL
3978: IFFALSE 3999
// points := [ 35 , 35 , 30 ] ;
3980: LD_ADDR_VAR 0 9
3984: PUSH
3985: LD_INT 35
3987: PUSH
3988: LD_INT 35
3990: PUSH
3991: LD_INT 30
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3999: LD_VAR 0 6
4003: PPUSH
4004: CALL_OW 257
4008: PUSH
4009: LD_INT 9
4011: EQUAL
4012: IFFALSE 4033
// points := [ 20 , 55 , 40 ] ;
4014: LD_ADDR_VAR 0 9
4018: PUSH
4019: LD_INT 20
4021: PUSH
4022: LD_INT 55
4024: PUSH
4025: LD_INT 40
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4033: LD_VAR 0 6
4037: PPUSH
4038: CALL_OW 257
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: LD_INT 16
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: IN
4053: IFFALSE 4074
// points := [ 5 , 3 , 2 ] ;
4055: LD_ADDR_VAR 0 9
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: LD_INT 3
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4074: LD_VAR 0 6
4078: PPUSH
4079: CALL_OW 257
4083: PUSH
4084: LD_INT 17
4086: EQUAL
4087: IFFALSE 4108
// points := [ 100 , 50 , 75 ] ;
4089: LD_ADDR_VAR 0 9
4093: PUSH
4094: LD_INT 100
4096: PUSH
4097: LD_INT 50
4099: PUSH
4100: LD_INT 75
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4108: LD_VAR 0 6
4112: PPUSH
4113: CALL_OW 257
4117: PUSH
4118: LD_INT 15
4120: EQUAL
4121: IFFALSE 4142
// points := [ 10 , 5 , 3 ] ;
4123: LD_ADDR_VAR 0 9
4127: PUSH
4128: LD_INT 10
4130: PUSH
4131: LD_INT 5
4133: PUSH
4134: LD_INT 3
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4142: LD_VAR 0 6
4146: PPUSH
4147: CALL_OW 257
4151: PUSH
4152: LD_INT 14
4154: EQUAL
4155: IFFALSE 4176
// points := [ 10 , 0 , 0 ] ;
4157: LD_ADDR_VAR 0 9
4161: PUSH
4162: LD_INT 10
4164: PUSH
4165: LD_INT 0
4167: PUSH
4168: LD_INT 0
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4176: LD_VAR 0 6
4180: PPUSH
4181: CALL_OW 257
4185: PUSH
4186: LD_INT 11
4188: EQUAL
4189: IFFALSE 4210
// points := [ 30 , 10 , 5 ] ;
4191: LD_ADDR_VAR 0 9
4195: PUSH
4196: LD_INT 30
4198: PUSH
4199: LD_INT 10
4201: PUSH
4202: LD_INT 5
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4210: LD_VAR 0 1
4214: PPUSH
4215: LD_INT 5
4217: PPUSH
4218: CALL_OW 321
4222: PUSH
4223: LD_INT 2
4225: EQUAL
4226: IFFALSE 4243
// bpoints := bpoints * 1.8 ;
4228: LD_ADDR_VAR 0 10
4232: PUSH
4233: LD_VAR 0 10
4237: PUSH
4238: LD_REAL  1.80000000000000E+0000
4241: MUL
4242: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4243: LD_VAR 0 6
4247: PPUSH
4248: CALL_OW 257
4252: PUSH
4253: LD_INT 1
4255: PUSH
4256: LD_INT 2
4258: PUSH
4259: LD_INT 3
4261: PUSH
4262: LD_INT 4
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: IN
4271: PUSH
4272: LD_VAR 0 1
4276: PPUSH
4277: LD_INT 51
4279: PPUSH
4280: CALL_OW 321
4284: PUSH
4285: LD_INT 2
4287: EQUAL
4288: AND
4289: IFFALSE 4306
// bpoints := bpoints * 1.2 ;
4291: LD_ADDR_VAR 0 10
4295: PUSH
4296: LD_VAR 0 10
4300: PUSH
4301: LD_REAL  1.20000000000000E+0000
4304: MUL
4305: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4306: LD_VAR 0 6
4310: PPUSH
4311: CALL_OW 257
4315: PUSH
4316: LD_INT 5
4318: PUSH
4319: LD_INT 7
4321: PUSH
4322: LD_INT 9
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: IN
4330: PUSH
4331: LD_VAR 0 1
4335: PPUSH
4336: LD_INT 52
4338: PPUSH
4339: CALL_OW 321
4343: PUSH
4344: LD_INT 2
4346: EQUAL
4347: AND
4348: IFFALSE 4365
// bpoints := bpoints * 1.5 ;
4350: LD_ADDR_VAR 0 10
4354: PUSH
4355: LD_VAR 0 10
4359: PUSH
4360: LD_REAL  1.50000000000000E+0000
4363: MUL
4364: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 66
4372: PPUSH
4373: CALL_OW 321
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4398
// bpoints := bpoints * 1.1 ;
4383: LD_ADDR_VAR 0 10
4387: PUSH
4388: LD_VAR 0 10
4392: PUSH
4393: LD_REAL  1.10000000000000E+0000
4396: MUL
4397: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4398: LD_ADDR_VAR 0 10
4402: PUSH
4403: LD_VAR 0 10
4407: PUSH
4408: LD_VAR 0 6
4412: PPUSH
4413: LD_INT 1
4415: PPUSH
4416: CALL_OW 259
4420: PUSH
4421: LD_REAL  1.15000000000000E+0000
4424: MUL
4425: MUL
4426: ST_TO_ADDR
// end ; unit_vehicle :
4427: GO 5251
4429: LD_INT 2
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 5239
4437: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4438: LD_VAR 0 6
4442: PPUSH
4443: CALL_OW 264
4447: PUSH
4448: LD_INT 2
4450: PUSH
4451: LD_INT 42
4453: PUSH
4454: LD_INT 24
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: IN
4462: IFFALSE 4483
// points := [ 25 , 5 , 3 ] ;
4464: LD_ADDR_VAR 0 9
4468: PUSH
4469: LD_INT 25
4471: PUSH
4472: LD_INT 5
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4483: LD_VAR 0 6
4487: PPUSH
4488: CALL_OW 264
4492: PUSH
4493: LD_INT 4
4495: PUSH
4496: LD_INT 43
4498: PUSH
4499: LD_INT 25
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: IN
4507: IFFALSE 4528
// points := [ 40 , 15 , 5 ] ;
4509: LD_ADDR_VAR 0 9
4513: PUSH
4514: LD_INT 40
4516: PUSH
4517: LD_INT 15
4519: PUSH
4520: LD_INT 5
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4528: LD_VAR 0 6
4532: PPUSH
4533: CALL_OW 264
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: LD_INT 23
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: IN
4548: IFFALSE 4569
// points := [ 7 , 25 , 8 ] ;
4550: LD_ADDR_VAR 0 9
4554: PUSH
4555: LD_INT 7
4557: PUSH
4558: LD_INT 25
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4569: LD_VAR 0 6
4573: PPUSH
4574: CALL_OW 264
4578: PUSH
4579: LD_INT 5
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 44
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: IN
4593: IFFALSE 4614
// points := [ 14 , 50 , 16 ] ;
4595: LD_ADDR_VAR 0 9
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: LD_INT 50
4605: PUSH
4606: LD_INT 16
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4614: LD_VAR 0 6
4618: PPUSH
4619: CALL_OW 264
4623: PUSH
4624: LD_INT 6
4626: PUSH
4627: LD_INT 46
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: IN
4634: IFFALSE 4655
// points := [ 32 , 120 , 70 ] ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_INT 32
4643: PUSH
4644: LD_INT 120
4646: PUSH
4647: LD_INT 70
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4655: LD_VAR 0 6
4659: PPUSH
4660: CALL_OW 264
4664: PUSH
4665: LD_INT 7
4667: PUSH
4668: LD_INT 28
4670: PUSH
4671: LD_INT 45
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: IN
4679: IFFALSE 4700
// points := [ 35 , 20 , 45 ] ;
4681: LD_ADDR_VAR 0 9
4685: PUSH
4686: LD_INT 35
4688: PUSH
4689: LD_INT 20
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4700: LD_VAR 0 6
4704: PPUSH
4705: CALL_OW 264
4709: PUSH
4710: LD_INT 47
4712: PUSH
4713: EMPTY
4714: LIST
4715: IN
4716: IFFALSE 4737
// points := [ 67 , 45 , 75 ] ;
4718: LD_ADDR_VAR 0 9
4722: PUSH
4723: LD_INT 67
4725: PUSH
4726: LD_INT 45
4728: PUSH
4729: LD_INT 75
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4737: LD_VAR 0 6
4741: PPUSH
4742: CALL_OW 264
4746: PUSH
4747: LD_INT 26
4749: PUSH
4750: EMPTY
4751: LIST
4752: IN
4753: IFFALSE 4774
// points := [ 120 , 30 , 80 ] ;
4755: LD_ADDR_VAR 0 9
4759: PUSH
4760: LD_INT 120
4762: PUSH
4763: LD_INT 30
4765: PUSH
4766: LD_INT 80
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4774: LD_VAR 0 6
4778: PPUSH
4779: CALL_OW 264
4783: PUSH
4784: LD_INT 22
4786: PUSH
4787: EMPTY
4788: LIST
4789: IN
4790: IFFALSE 4811
// points := [ 40 , 1 , 1 ] ;
4792: LD_ADDR_VAR 0 9
4796: PUSH
4797: LD_INT 40
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4811: LD_VAR 0 6
4815: PPUSH
4816: CALL_OW 264
4820: PUSH
4821: LD_INT 29
4823: PUSH
4824: EMPTY
4825: LIST
4826: IN
4827: IFFALSE 4848
// points := [ 70 , 200 , 400 ] ;
4829: LD_ADDR_VAR 0 9
4833: PUSH
4834: LD_INT 70
4836: PUSH
4837: LD_INT 200
4839: PUSH
4840: LD_INT 400
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4848: LD_VAR 0 6
4852: PPUSH
4853: CALL_OW 264
4857: PUSH
4858: LD_INT 14
4860: PUSH
4861: LD_INT 53
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: IN
4868: IFFALSE 4889
// points := [ 40 , 10 , 20 ] ;
4870: LD_ADDR_VAR 0 9
4874: PUSH
4875: LD_INT 40
4877: PUSH
4878: LD_INT 10
4880: PUSH
4881: LD_INT 20
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4889: LD_VAR 0 6
4893: PPUSH
4894: CALL_OW 264
4898: PUSH
4899: LD_INT 9
4901: PUSH
4902: EMPTY
4903: LIST
4904: IN
4905: IFFALSE 4926
// points := [ 5 , 70 , 20 ] ;
4907: LD_ADDR_VAR 0 9
4911: PUSH
4912: LD_INT 5
4914: PUSH
4915: LD_INT 70
4917: PUSH
4918: LD_INT 20
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4926: LD_VAR 0 6
4930: PPUSH
4931: CALL_OW 264
4935: PUSH
4936: LD_INT 10
4938: PUSH
4939: EMPTY
4940: LIST
4941: IN
4942: IFFALSE 4963
// points := [ 35 , 110 , 70 ] ;
4944: LD_ADDR_VAR 0 9
4948: PUSH
4949: LD_INT 35
4951: PUSH
4952: LD_INT 110
4954: PUSH
4955: LD_INT 70
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4963: LD_VAR 0 6
4967: PPUSH
4968: CALL_OW 265
4972: PUSH
4973: LD_INT 25
4975: EQUAL
4976: IFFALSE 4997
// points := [ 80 , 65 , 100 ] ;
4978: LD_ADDR_VAR 0 9
4982: PUSH
4983: LD_INT 80
4985: PUSH
4986: LD_INT 65
4988: PUSH
4989: LD_INT 100
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4997: LD_VAR 0 6
5001: PPUSH
5002: CALL_OW 263
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5045
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5012: LD_ADDR_VAR 0 10
5016: PUSH
5017: LD_VAR 0 10
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: CALL_OW 311
5031: PPUSH
5032: LD_INT 3
5034: PPUSH
5035: CALL_OW 259
5039: PUSH
5040: LD_INT 4
5042: MUL
5043: MUL
5044: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5045: LD_VAR 0 6
5049: PPUSH
5050: CALL_OW 263
5054: PUSH
5055: LD_INT 2
5057: EQUAL
5058: IFFALSE 5109
// begin j := IsControledBy ( i ) ;
5060: LD_ADDR_VAR 0 7
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: CALL_OW 312
5074: ST_TO_ADDR
// if j then
5075: LD_VAR 0 7
5079: IFFALSE 5109
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5081: LD_ADDR_VAR 0 10
5085: PUSH
5086: LD_VAR 0 10
5090: PUSH
5091: LD_VAR 0 7
5095: PPUSH
5096: LD_INT 3
5098: PPUSH
5099: CALL_OW 259
5103: PUSH
5104: LD_INT 3
5106: MUL
5107: MUL
5108: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5109: LD_VAR 0 6
5113: PPUSH
5114: CALL_OW 264
5118: PUSH
5119: LD_INT 5
5121: PUSH
5122: LD_INT 6
5124: PUSH
5125: LD_INT 46
5127: PUSH
5128: LD_INT 44
5130: PUSH
5131: LD_INT 47
5133: PUSH
5134: LD_INT 45
5136: PUSH
5137: LD_INT 28
5139: PUSH
5140: LD_INT 7
5142: PUSH
5143: LD_INT 27
5145: PUSH
5146: LD_INT 29
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: IN
5161: PUSH
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_INT 52
5169: PPUSH
5170: CALL_OW 321
5174: PUSH
5175: LD_INT 2
5177: EQUAL
5178: AND
5179: IFFALSE 5196
// bpoints := bpoints * 1.2 ;
5181: LD_ADDR_VAR 0 10
5185: PUSH
5186: LD_VAR 0 10
5190: PUSH
5191: LD_REAL  1.20000000000000E+0000
5194: MUL
5195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5196: LD_VAR 0 6
5200: PPUSH
5201: CALL_OW 264
5205: PUSH
5206: LD_INT 6
5208: PUSH
5209: LD_INT 46
5211: PUSH
5212: LD_INT 47
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5237
// bpoints := bpoints * 1.2 ;
5222: LD_ADDR_VAR 0 10
5226: PUSH
5227: LD_VAR 0 10
5231: PUSH
5232: LD_REAL  1.20000000000000E+0000
5235: MUL
5236: ST_TO_ADDR
// end ; unit_building :
5237: GO 5251
5239: LD_INT 3
5241: DOUBLE
5242: EQUAL
5243: IFTRUE 5247
5245: GO 5250
5247: POP
// ; end ;
5248: GO 5251
5250: POP
// for j = 1 to 3 do
5251: LD_ADDR_VAR 0 7
5255: PUSH
5256: DOUBLE
5257: LD_INT 1
5259: DEC
5260: ST_TO_ADDR
5261: LD_INT 3
5263: PUSH
5264: FOR_TO
5265: IFFALSE 5318
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5267: LD_ADDR_VAR 0 5
5271: PUSH
5272: LD_VAR 0 5
5276: PPUSH
5277: LD_VAR 0 7
5281: PPUSH
5282: LD_VAR 0 5
5286: PUSH
5287: LD_VAR 0 7
5291: ARRAY
5292: PUSH
5293: LD_VAR 0 9
5297: PUSH
5298: LD_VAR 0 7
5302: ARRAY
5303: PUSH
5304: LD_VAR 0 10
5308: MUL
5309: PLUS
5310: PPUSH
5311: CALL_OW 1
5315: ST_TO_ADDR
5316: GO 5264
5318: POP
5319: POP
// end ;
5320: GO 3803
5322: POP
5323: POP
// result := Replace ( result , 4 , tmp ) ;
5324: LD_ADDR_VAR 0 5
5328: PUSH
5329: LD_VAR 0 5
5333: PPUSH
5334: LD_INT 4
5336: PPUSH
5337: LD_VAR 0 8
5341: PPUSH
5342: CALL_OW 1
5346: ST_TO_ADDR
// end ;
5347: LD_VAR 0 5
5351: RET
// export function DangerAtRange ( unit , range ) ; begin
5352: LD_INT 0
5354: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: LD_VAR 0 1
5364: PPUSH
5365: CALL_OW 255
5369: PPUSH
5370: LD_VAR 0 1
5374: PPUSH
5375: CALL_OW 250
5379: PPUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 251
5389: PPUSH
5390: LD_VAR 0 2
5394: PPUSH
5395: CALL 3673 0 4
5399: ST_TO_ADDR
// end ;
5400: LD_VAR 0 3
5404: RET
// export function IsExtension ( b ) ; begin
5405: LD_INT 0
5407: PPUSH
// result := false ;
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: LD_INT 0
5415: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5416: LD_VAR 0 1
5420: PPUSH
5421: CALL_OW 266
5425: PUSH
5426: LD_INT 23
5428: PUSH
5429: LD_INT 20
5431: PUSH
5432: LD_INT 22
5434: PUSH
5435: LD_INT 17
5437: PUSH
5438: LD_INT 24
5440: PUSH
5441: LD_INT 21
5443: PUSH
5444: LD_INT 19
5446: PUSH
5447: LD_INT 16
5449: PUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 18
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: IN
5468: IFFALSE 5478
// result := true ;
5470: LD_ADDR_VAR 0 2
5474: PUSH
5475: LD_INT 1
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 2
5482: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
// result := [ ] ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: EMPTY
5494: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: LD_INT 21
5502: PUSH
5503: LD_INT 3
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 69
5514: ST_TO_ADDR
// if not tmp then
5515: LD_VAR 0 3
5519: NOT
5520: IFFALSE 5524
// exit ;
5522: GO 5574
// for i in tmp do
5524: LD_ADDR_VAR 0 4
5528: PUSH
5529: LD_VAR 0 3
5533: PUSH
5534: FOR_IN
5535: IFFALSE 5572
// if GetBase ( i ) = base then
5537: LD_VAR 0 4
5541: PPUSH
5542: CALL_OW 274
5546: PUSH
5547: LD_VAR 0 1
5551: EQUAL
5552: IFFALSE 5570
// result := result ^ i ;
5554: LD_ADDR_VAR 0 2
5558: PUSH
5559: LD_VAR 0 2
5563: PUSH
5564: LD_VAR 0 4
5568: ADD
5569: ST_TO_ADDR
5570: GO 5534
5572: POP
5573: POP
// end ;
5574: LD_VAR 0 2
5578: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5579: LD_INT 0
5581: PPUSH
5582: PPUSH
// if BuildingStatus ( b ) = bs_build then
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 461
5592: PUSH
5593: LD_INT 1
5595: EQUAL
5596: IFFALSE 5656
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5598: LD_VAR 0 1
5602: PPUSH
5603: LD_STRING h
5605: PUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 250
5615: PUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL_OW 251
5625: PUSH
5626: LD_VAR 0 2
5630: PUSH
5631: LD_INT 0
5633: PUSH
5634: LD_INT 0
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: PPUSH
5652: CALL_OW 446
// end ;
5656: LD_VAR 0 3
5660: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5661: LD_INT 0
5663: PPUSH
5664: PPUSH
5665: PPUSH
5666: PPUSH
5667: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5668: LD_VAR 0 1
5672: NOT
5673: PUSH
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 263
5683: PUSH
5684: LD_INT 2
5686: EQUAL
5687: NOT
5688: OR
5689: IFFALSE 5693
// exit ;
5691: GO 5965
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5693: LD_ADDR_VAR 0 6
5697: PUSH
5698: LD_INT 22
5700: PUSH
5701: LD_VAR 0 1
5705: PPUSH
5706: CALL_OW 255
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 2
5717: PUSH
5718: LD_INT 30
5720: PUSH
5721: LD_INT 36
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 34
5730: PUSH
5731: LD_INT 31
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 69
5751: ST_TO_ADDR
// if not tmp then
5752: LD_VAR 0 6
5756: NOT
5757: IFFALSE 5761
// exit ;
5759: GO 5965
// result := [ ] ;
5761: LD_ADDR_VAR 0 2
5765: PUSH
5766: EMPTY
5767: ST_TO_ADDR
// for i in tmp do
5768: LD_ADDR_VAR 0 3
5772: PUSH
5773: LD_VAR 0 6
5777: PUSH
5778: FOR_IN
5779: IFFALSE 5827
// begin t := UnitsInside ( i ) ;
5781: LD_ADDR_VAR 0 4
5785: PUSH
5786: LD_VAR 0 3
5790: PPUSH
5791: CALL_OW 313
5795: ST_TO_ADDR
// if t then
5796: LD_VAR 0 4
5800: IFFALSE 5825
// result := Insert ( result , 1 , t ) ;
5802: LD_ADDR_VAR 0 2
5806: PUSH
5807: LD_VAR 0 2
5811: PPUSH
5812: LD_INT 1
5814: PPUSH
5815: LD_VAR 0 4
5819: PPUSH
5820: CALL_OW 2
5824: ST_TO_ADDR
// end ;
5825: GO 5778
5827: POP
5828: POP
// if not result then
5829: LD_VAR 0 2
5833: NOT
5834: IFFALSE 5838
// exit ;
5836: GO 5965
// mech := 0 ;
5838: LD_ADDR_VAR 0 5
5842: PUSH
5843: LD_INT 0
5845: ST_TO_ADDR
// for i in result do
5846: LD_ADDR_VAR 0 3
5850: PUSH
5851: LD_VAR 0 2
5855: PUSH
5856: FOR_IN
5857: IFFALSE 5939
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5859: LD_ADDR_VAR 0 4
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 259
5876: PUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 432
5886: MINUS
5887: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5888: LD_VAR 0 4
5892: PUSH
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: LD_INT 3
5904: PPUSH
5905: CALL_OW 259
5909: PUSH
5910: LD_VAR 0 5
5914: PUSH
5915: LD_INT 1
5917: ARRAY
5918: PPUSH
5919: CALL_OW 432
5923: MINUS
5924: GREATEREQUAL
5925: IFFALSE 5937
// mech := i ;
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: LD_VAR 0 3
5936: ST_TO_ADDR
// end ;
5937: GO 5856
5939: POP
5940: POP
// if mech then
5941: LD_VAR 0 5
5945: IFFALSE 5965
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5947: LD_VAR 0 1
5951: PPUSH
5952: LD_VAR 0 5
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PPUSH
5961: CALL_OW 135
// end ;
5965: LD_VAR 0 2
5969: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
5983: PPUSH
// result := [ ] ;
5984: LD_ADDR_VAR 0 6
5988: PUSH
5989: EMPTY
5990: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5991: LD_VAR 0 1
5995: PPUSH
5996: CALL_OW 266
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: IN
6011: NOT
6012: IFFALSE 6016
// exit ;
6014: GO 7135
// if name then
6016: LD_VAR 0 2
6020: IFFALSE 6036
// SetBName ( base_dep , name ) ;
6022: LD_VAR 0 1
6026: PPUSH
6027: LD_VAR 0 2
6031: PPUSH
6032: CALL_OW 500
// base := GetBase ( base_dep ) ;
6036: LD_ADDR_VAR 0 14
6040: PUSH
6041: LD_VAR 0 1
6045: PPUSH
6046: CALL_OW 274
6050: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6051: LD_ADDR_VAR 0 15
6055: PUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 255
6065: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6066: LD_ADDR_VAR 0 16
6070: PUSH
6071: LD_VAR 0 1
6075: PPUSH
6076: CALL_OW 248
6080: ST_TO_ADDR
// if sources then
6081: LD_VAR 0 4
6085: IFFALSE 6132
// for i = 1 to 3 do
6087: LD_ADDR_VAR 0 7
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_INT 3
6099: PUSH
6100: FOR_TO
6101: IFFALSE 6130
// AddResourceType ( base , i , sources [ i ] ) ;
6103: LD_VAR 0 14
6107: PPUSH
6108: LD_VAR 0 7
6112: PPUSH
6113: LD_VAR 0 4
6117: PUSH
6118: LD_VAR 0 7
6122: ARRAY
6123: PPUSH
6124: CALL_OW 276
6128: GO 6100
6130: POP
6131: POP
// buildings := GetBaseBuildings ( base ) ;
6132: LD_ADDR_VAR 0 17
6136: PUSH
6137: LD_VAR 0 14
6141: PPUSH
6142: CALL 5483 0 1
6146: ST_TO_ADDR
// InitHc ;
6147: CALL_OW 19
// InitUc ;
6151: CALL_OW 18
// uc_side := side ;
6155: LD_ADDR_OWVAR 20
6159: PUSH
6160: LD_VAR 0 15
6164: ST_TO_ADDR
// uc_nation := nation ;
6165: LD_ADDR_OWVAR 21
6169: PUSH
6170: LD_VAR 0 16
6174: ST_TO_ADDR
// if buildings then
6175: LD_VAR 0 17
6179: IFFALSE 6994
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6181: LD_VAR 0 17
6185: PPUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 30
6191: PUSH
6192: LD_INT 32
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 30
6201: PUSH
6202: LD_INT 33
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 72
6218: IFFALSE 6301
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_VAR 0 17
6229: PPUSH
6230: LD_INT 2
6232: PUSH
6233: LD_INT 30
6235: PUSH
6236: LD_INT 32
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 30
6245: PUSH
6246: LD_INT 33
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: PPUSH
6258: CALL_OW 72
6262: PUSH
6263: FOR_IN
6264: IFFALSE 6299
// begin if not GetBWeapon ( i ) then
6266: LD_VAR 0 7
6270: PPUSH
6271: CALL_OW 269
6275: NOT
6276: IFFALSE 6297
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6278: LD_VAR 0 7
6282: PPUSH
6283: LD_VAR 0 7
6287: PPUSH
6288: CALL 7140 0 1
6292: PPUSH
6293: CALL_OW 431
// end ;
6297: GO 6263
6299: POP
6300: POP
// end ; for i = 1 to personel do
6301: LD_ADDR_VAR 0 7
6305: PUSH
6306: DOUBLE
6307: LD_INT 1
6309: DEC
6310: ST_TO_ADDR
6311: LD_VAR 0 5
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6974
// begin if i > 4 then
6319: LD_VAR 0 7
6323: PUSH
6324: LD_INT 4
6326: GREATER
6327: IFFALSE 6331
// break ;
6329: GO 6974
// case i of 1 :
6331: LD_VAR 0 7
6335: PUSH
6336: LD_INT 1
6338: DOUBLE
6339: EQUAL
6340: IFTRUE 6344
6342: GO 6417
6344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 17
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_VAR 0 15
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 2
6369: PUSH
6370: LD_INT 30
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 30
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 5
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PPUSH
6410: CALL_OW 72
6414: ST_TO_ADDR
6415: GO 6639
6417: LD_INT 2
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6487
6425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6426: LD_ADDR_VAR 0 11
6430: PUSH
6431: LD_VAR 0 17
6435: PPUSH
6436: LD_INT 22
6438: PUSH
6439: LD_VAR 0 15
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 30
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 30
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 72
6484: ST_TO_ADDR
6485: GO 6639
6487: LD_INT 3
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6557
6495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6496: LD_ADDR_VAR 0 11
6500: PUSH
6501: LD_VAR 0 17
6505: PPUSH
6506: LD_INT 22
6508: PUSH
6509: LD_VAR 0 15
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 2
6520: PUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 30
6533: PUSH
6534: LD_INT 3
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PPUSH
6550: CALL_OW 72
6554: ST_TO_ADDR
6555: GO 6639
6557: LD_INT 4
6559: DOUBLE
6560: EQUAL
6561: IFTRUE 6565
6563: GO 6638
6565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6566: LD_ADDR_VAR 0 11
6570: PUSH
6571: LD_VAR 0 17
6575: PPUSH
6576: LD_INT 22
6578: PUSH
6579: LD_VAR 0 15
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 2
6590: PUSH
6591: LD_INT 30
6593: PUSH
6594: LD_INT 6
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 30
6603: PUSH
6604: LD_INT 7
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 30
6613: PUSH
6614: LD_INT 8
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PPUSH
6631: CALL_OW 72
6635: ST_TO_ADDR
6636: GO 6639
6638: POP
// if not f then
6639: LD_VAR 0 11
6643: NOT
6644: IFFALSE 6648
// continue ;
6646: GO 6316
// x := personel [ i ] ;
6648: LD_ADDR_VAR 0 12
6652: PUSH
6653: LD_VAR 0 5
6657: PUSH
6658: LD_VAR 0 7
6662: ARRAY
6663: ST_TO_ADDR
// if x = - 1 then
6664: LD_VAR 0 12
6668: PUSH
6669: LD_INT 1
6671: NEG
6672: EQUAL
6673: IFFALSE 6795
// begin for j in f do
6675: LD_ADDR_VAR 0 8
6679: PUSH
6680: LD_VAR 0 11
6684: PUSH
6685: FOR_IN
6686: IFFALSE 6791
// repeat PrepareHuman ( false , i , skill ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_VAR 0 7
6695: PPUSH
6696: LD_VAR 0 3
6700: PPUSH
6701: CALL_OW 380
// un := CreateHuman ;
6705: LD_ADDR_VAR 0 13
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6715: LD_ADDR_VAR 0 6
6719: PUSH
6720: LD_VAR 0 6
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_VAR 0 13
6732: PPUSH
6733: CALL_OW 2
6737: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6738: LD_VAR 0 13
6742: PPUSH
6743: LD_VAR 0 8
6747: PPUSH
6748: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6752: LD_VAR 0 8
6756: PPUSH
6757: CALL_OW 313
6761: PUSH
6762: LD_INT 6
6764: EQUAL
6765: PUSH
6766: LD_VAR 0 8
6770: PPUSH
6771: CALL_OW 266
6775: PUSH
6776: LD_INT 32
6778: PUSH
6779: LD_INT 31
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: IN
6786: OR
6787: IFFALSE 6688
6789: GO 6685
6791: POP
6792: POP
// end else
6793: GO 6972
// for j = 1 to x do
6795: LD_ADDR_VAR 0 8
6799: PUSH
6800: DOUBLE
6801: LD_INT 1
6803: DEC
6804: ST_TO_ADDR
6805: LD_VAR 0 12
6809: PUSH
6810: FOR_TO
6811: IFFALSE 6970
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6813: LD_VAR 0 11
6817: PUSH
6818: LD_INT 1
6820: ARRAY
6821: PPUSH
6822: CALL_OW 313
6826: PUSH
6827: LD_VAR 0 11
6831: PUSH
6832: LD_INT 1
6834: ARRAY
6835: PPUSH
6836: CALL_OW 266
6840: PUSH
6841: LD_INT 32
6843: PUSH
6844: LD_INT 31
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: IN
6851: AND
6852: PUSH
6853: LD_VAR 0 11
6857: PUSH
6858: LD_INT 1
6860: ARRAY
6861: PPUSH
6862: CALL_OW 313
6866: PUSH
6867: LD_INT 6
6869: EQUAL
6870: OR
6871: IFFALSE 6891
// f := Delete ( f , 1 ) ;
6873: LD_ADDR_VAR 0 11
6877: PUSH
6878: LD_VAR 0 11
6882: PPUSH
6883: LD_INT 1
6885: PPUSH
6886: CALL_OW 3
6890: ST_TO_ADDR
// if not f then
6891: LD_VAR 0 11
6895: NOT
6896: IFFALSE 6900
// break ;
6898: GO 6970
// PrepareHuman ( false , i , skill ) ;
6900: LD_INT 0
6902: PPUSH
6903: LD_VAR 0 7
6907: PPUSH
6908: LD_VAR 0 3
6912: PPUSH
6913: CALL_OW 380
// un := CreateHuman ;
6917: LD_ADDR_VAR 0 13
6921: PUSH
6922: CALL_OW 44
6926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6927: LD_ADDR_VAR 0 6
6931: PUSH
6932: LD_VAR 0 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: LD_VAR 0 13
6944: PPUSH
6945: CALL_OW 2
6949: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6950: LD_VAR 0 13
6954: PPUSH
6955: LD_VAR 0 11
6959: PUSH
6960: LD_INT 1
6962: ARRAY
6963: PPUSH
6964: CALL_OW 52
// end ;
6968: GO 6810
6970: POP
6971: POP
// end ;
6972: GO 6316
6974: POP
6975: POP
// result := result ^ buildings ;
6976: LD_ADDR_VAR 0 6
6980: PUSH
6981: LD_VAR 0 6
6985: PUSH
6986: LD_VAR 0 17
6990: ADD
6991: ST_TO_ADDR
// end else
6992: GO 7135
// begin for i = 1 to personel do
6994: LD_ADDR_VAR 0 7
6998: PUSH
6999: DOUBLE
7000: LD_INT 1
7002: DEC
7003: ST_TO_ADDR
7004: LD_VAR 0 5
7008: PUSH
7009: FOR_TO
7010: IFFALSE 7133
// begin if i > 4 then
7012: LD_VAR 0 7
7016: PUSH
7017: LD_INT 4
7019: GREATER
7020: IFFALSE 7024
// break ;
7022: GO 7133
// x := personel [ i ] ;
7024: LD_ADDR_VAR 0 12
7028: PUSH
7029: LD_VAR 0 5
7033: PUSH
7034: LD_VAR 0 7
7038: ARRAY
7039: ST_TO_ADDR
// if x = - 1 then
7040: LD_VAR 0 12
7044: PUSH
7045: LD_INT 1
7047: NEG
7048: EQUAL
7049: IFFALSE 7053
// continue ;
7051: GO 7009
// PrepareHuman ( false , i , skill ) ;
7053: LD_INT 0
7055: PPUSH
7056: LD_VAR 0 7
7060: PPUSH
7061: LD_VAR 0 3
7065: PPUSH
7066: CALL_OW 380
// un := CreateHuman ;
7070: LD_ADDR_VAR 0 13
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7080: LD_VAR 0 13
7084: PPUSH
7085: LD_VAR 0 1
7089: PPUSH
7090: CALL_OW 250
7094: PPUSH
7095: LD_VAR 0 1
7099: PPUSH
7100: CALL_OW 251
7104: PPUSH
7105: LD_INT 10
7107: PPUSH
7108: LD_INT 0
7110: PPUSH
7111: CALL_OW 50
// result := result ^ un ;
7115: LD_ADDR_VAR 0 6
7119: PUSH
7120: LD_VAR 0 6
7124: PUSH
7125: LD_VAR 0 13
7129: ADD
7130: ST_TO_ADDR
// end ;
7131: GO 7009
7133: POP
7134: POP
// end ; end ;
7135: LD_VAR 0 6
7139: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7140: LD_INT 0
7142: PPUSH
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
// result := false ;
7158: LD_ADDR_VAR 0 2
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7166: LD_VAR 0 1
7170: NOT
7171: PUSH
7172: LD_VAR 0 1
7176: PPUSH
7177: CALL_OW 266
7181: PUSH
7182: LD_INT 32
7184: PUSH
7185: LD_INT 33
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: IN
7192: NOT
7193: OR
7194: IFFALSE 7198
// exit ;
7196: GO 8431
// nat := GetNation ( tower ) ;
7198: LD_ADDR_VAR 0 11
7202: PUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 248
7212: ST_TO_ADDR
// side := GetSide ( tower ) ;
7213: LD_ADDR_VAR 0 15
7217: PUSH
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 255
7227: ST_TO_ADDR
// x := GetX ( tower ) ;
7228: LD_ADDR_VAR 0 9
7232: PUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 250
7242: ST_TO_ADDR
// y := GetY ( tower ) ;
7243: LD_ADDR_VAR 0 10
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 251
7257: ST_TO_ADDR
// if not x or not y then
7258: LD_VAR 0 9
7262: NOT
7263: PUSH
7264: LD_VAR 0 10
7268: NOT
7269: OR
7270: IFFALSE 7274
// exit ;
7272: GO 8431
// weapon := 0 ;
7274: LD_ADDR_VAR 0 17
7278: PUSH
7279: LD_INT 0
7281: ST_TO_ADDR
// fac_list := [ ] ;
7282: LD_ADDR_VAR 0 16
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7289: LD_ADDR_VAR 0 5
7293: PUSH
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 274
7303: PPUSH
7304: CALL 5483 0 1
7308: PPUSH
7309: LD_INT 30
7311: PUSH
7312: LD_INT 3
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PPUSH
7319: CALL_OW 72
7323: ST_TO_ADDR
// if not factories then
7324: LD_VAR 0 5
7328: NOT
7329: IFFALSE 7333
// exit ;
7331: GO 8431
// for i in factories do
7333: LD_ADDR_VAR 0 7
7337: PUSH
7338: LD_VAR 0 5
7342: PUSH
7343: FOR_IN
7344: IFFALSE 7369
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7346: LD_ADDR_VAR 0 16
7350: PUSH
7351: LD_VAR 0 16
7355: PUSH
7356: LD_VAR 0 7
7360: PPUSH
7361: CALL_OW 478
7365: UNION
7366: ST_TO_ADDR
7367: GO 7343
7369: POP
7370: POP
// if not fac_list then
7371: LD_VAR 0 16
7375: NOT
7376: IFFALSE 7380
// exit ;
7378: GO 8431
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7380: LD_ADDR_VAR 0 4
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 9
7393: PUSH
7394: LD_INT 10
7396: PUSH
7397: LD_INT 6
7399: PUSH
7400: LD_INT 7
7402: PUSH
7403: LD_INT 11
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 27
7417: PUSH
7418: LD_INT 28
7420: PUSH
7421: LD_INT 26
7423: PUSH
7424: LD_INT 30
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 43
7435: PUSH
7436: LD_INT 44
7438: PUSH
7439: LD_INT 46
7441: PUSH
7442: LD_INT 45
7444: PUSH
7445: LD_INT 47
7447: PUSH
7448: LD_INT 49
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: PUSH
7464: LD_VAR 0 11
7468: ARRAY
7469: ST_TO_ADDR
// for i in list do
7470: LD_ADDR_VAR 0 7
7474: PUSH
7475: LD_VAR 0 4
7479: PUSH
7480: FOR_IN
7481: IFFALSE 7514
// if not i in fac_list then
7483: LD_VAR 0 7
7487: PUSH
7488: LD_VAR 0 16
7492: IN
7493: NOT
7494: IFFALSE 7512
// list := list diff i ;
7496: LD_ADDR_VAR 0 4
7500: PUSH
7501: LD_VAR 0 4
7505: PUSH
7506: LD_VAR 0 7
7510: DIFF
7511: ST_TO_ADDR
7512: GO 7480
7514: POP
7515: POP
// if not list then
7516: LD_VAR 0 4
7520: NOT
7521: IFFALSE 7525
// exit ;
7523: GO 8431
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7525: LD_VAR 0 11
7529: PUSH
7530: LD_INT 3
7532: EQUAL
7533: PUSH
7534: LD_INT 49
7536: PUSH
7537: LD_VAR 0 4
7541: IN
7542: AND
7543: PUSH
7544: LD_INT 31
7546: PPUSH
7547: LD_VAR 0 15
7551: PPUSH
7552: CALL_OW 321
7556: PUSH
7557: LD_INT 2
7559: EQUAL
7560: AND
7561: IFFALSE 7621
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7563: LD_INT 22
7565: PUSH
7566: LD_VAR 0 15
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 35
7577: PUSH
7578: LD_INT 49
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 91
7587: PUSH
7588: LD_VAR 0 1
7592: PUSH
7593: LD_INT 10
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: NOT
7611: IFFALSE 7621
// weapon := ru_time_lapser ;
7613: LD_ADDR_VAR 0 17
7617: PUSH
7618: LD_INT 49
7620: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7621: LD_VAR 0 11
7625: PUSH
7626: LD_INT 1
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: IN
7636: PUSH
7637: LD_INT 11
7639: PUSH
7640: LD_VAR 0 4
7644: IN
7645: PUSH
7646: LD_INT 30
7648: PUSH
7649: LD_VAR 0 4
7653: IN
7654: OR
7655: AND
7656: PUSH
7657: LD_INT 6
7659: PPUSH
7660: LD_VAR 0 15
7664: PPUSH
7665: CALL_OW 321
7669: PUSH
7670: LD_INT 2
7672: EQUAL
7673: AND
7674: IFFALSE 7839
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7676: LD_INT 22
7678: PUSH
7679: LD_VAR 0 15
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 35
7693: PUSH
7694: LD_INT 11
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 35
7703: PUSH
7704: LD_INT 30
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 91
7718: PUSH
7719: LD_VAR 0 1
7723: PUSH
7724: LD_INT 18
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: NOT
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_VAR 0 15
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: LD_INT 30
7760: PUSH
7761: LD_INT 32
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 30
7770: PUSH
7771: LD_INT 33
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 91
7785: PUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 12
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: PUSH
7812: LD_INT 2
7814: GREATER
7815: AND
7816: IFFALSE 7839
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7818: LD_ADDR_VAR 0 17
7822: PUSH
7823: LD_INT 11
7825: PUSH
7826: LD_INT 30
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_VAR 0 11
7837: ARRAY
7838: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7839: LD_VAR 0 17
7843: NOT
7844: PUSH
7845: LD_INT 40
7847: PPUSH
7848: LD_VAR 0 15
7852: PPUSH
7853: CALL_OW 321
7857: PUSH
7858: LD_INT 2
7860: EQUAL
7861: AND
7862: PUSH
7863: LD_INT 7
7865: PUSH
7866: LD_VAR 0 4
7870: IN
7871: PUSH
7872: LD_INT 28
7874: PUSH
7875: LD_VAR 0 4
7879: IN
7880: OR
7881: PUSH
7882: LD_INT 45
7884: PUSH
7885: LD_VAR 0 4
7889: IN
7890: OR
7891: AND
7892: IFFALSE 8146
// begin hex := _GetHexInfo ( x , y ) ;
7894: LD_ADDR_VAR 0 3
7898: PUSH
7899: LD_VAR 0 9
7903: PPUSH
7904: LD_VAR 0 10
7908: PPUSH
7909: CALL 1938 0 2
7913: ST_TO_ADDR
// if hex [ 1 ] then
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: IFFALSE 7926
// exit ;
7924: GO 8431
// height := hex [ 2 ] ;
7926: LD_ADDR_VAR 0 14
7930: PUSH
7931: LD_VAR 0 3
7935: PUSH
7936: LD_INT 2
7938: ARRAY
7939: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7940: LD_ADDR_VAR 0 13
7944: PUSH
7945: LD_INT 0
7947: PUSH
7948: LD_INT 2
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 5
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: ST_TO_ADDR
// for i in tmp do
7963: LD_ADDR_VAR 0 7
7967: PUSH
7968: LD_VAR 0 13
7972: PUSH
7973: FOR_IN
7974: IFFALSE 8144
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7976: LD_ADDR_VAR 0 8
7980: PUSH
7981: LD_VAR 0 9
7985: PPUSH
7986: LD_VAR 0 7
7990: PPUSH
7991: LD_INT 5
7993: PPUSH
7994: CALL_OW 272
7998: PUSH
7999: LD_VAR 0 10
8003: PPUSH
8004: LD_VAR 0 7
8008: PPUSH
8009: LD_INT 5
8011: PPUSH
8012: CALL_OW 273
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8021: LD_VAR 0 8
8025: PUSH
8026: LD_INT 1
8028: ARRAY
8029: PPUSH
8030: LD_VAR 0 8
8034: PUSH
8035: LD_INT 2
8037: ARRAY
8038: PPUSH
8039: CALL_OW 488
8043: IFFALSE 8142
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_VAR 0 8
8054: PUSH
8055: LD_INT 1
8057: ARRAY
8058: PPUSH
8059: LD_VAR 0 8
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PPUSH
8068: CALL 1938 0 2
8072: ST_TO_ADDR
// if hex [ 1 ] then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 1
8080: ARRAY
8081: IFFALSE 8085
// continue ;
8083: GO 7973
// h := hex [ 2 ] ;
8085: LD_ADDR_VAR 0 12
8089: PUSH
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: ST_TO_ADDR
// if h + 7 < height then
8099: LD_VAR 0 12
8103: PUSH
8104: LD_INT 7
8106: PLUS
8107: PUSH
8108: LD_VAR 0 14
8112: LESS
8113: IFFALSE 8142
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8115: LD_ADDR_VAR 0 17
8119: PUSH
8120: LD_INT 7
8122: PUSH
8123: LD_INT 28
8125: PUSH
8126: LD_INT 45
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: LD_VAR 0 11
8138: ARRAY
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ; end ; end ;
8142: GO 7973
8144: POP
8145: POP
// end ; if not weapon then
8146: LD_VAR 0 17
8150: NOT
8151: IFFALSE 8313
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8153: LD_ADDR_VAR 0 4
8157: PUSH
8158: LD_VAR 0 4
8162: PUSH
8163: LD_INT 11
8165: PUSH
8166: LD_INT 30
8168: PUSH
8169: LD_INT 49
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: DIFF
8177: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8178: LD_ADDR_VAR 0 17
8182: PUSH
8183: LD_VAR 0 4
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_VAR 0 4
8195: PPUSH
8196: CALL_OW 12
8200: ARRAY
8201: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8202: LD_ADDR_VAR 0 13
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_VAR 0 15
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 3
8221: PUSH
8222: LD_INT 35
8224: PUSH
8225: LD_INT 0
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// for i in tmp do
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 13
8254: PUSH
8255: FOR_IN
8256: IFFALSE 8281
// list := list diff GetBWeapon ( i ) ;
8258: LD_ADDR_VAR 0 4
8262: PUSH
8263: LD_VAR 0 4
8267: PUSH
8268: LD_VAR 0 7
8272: PPUSH
8273: CALL_OW 269
8277: DIFF
8278: ST_TO_ADDR
8279: GO 8255
8281: POP
8282: POP
// if list then
8283: LD_VAR 0 4
8287: IFFALSE 8313
// weapon := list [ rand ( 1 , list ) ] ;
8289: LD_ADDR_VAR 0 17
8293: PUSH
8294: LD_VAR 0 4
8298: PUSH
8299: LD_INT 1
8301: PPUSH
8302: LD_VAR 0 4
8306: PPUSH
8307: CALL_OW 12
8311: ARRAY
8312: ST_TO_ADDR
// end ; if weapon then
8313: LD_VAR 0 17
8317: IFFALSE 8431
// begin tmp := CostOfWeapon ( weapon ) ;
8319: LD_ADDR_VAR 0 13
8323: PUSH
8324: LD_VAR 0 17
8328: PPUSH
8329: CALL_OW 451
8333: ST_TO_ADDR
// j := GetBase ( tower ) ;
8334: LD_ADDR_VAR 0 8
8338: PUSH
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 274
8348: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8349: LD_VAR 0 8
8353: PPUSH
8354: LD_INT 1
8356: PPUSH
8357: CALL_OW 275
8361: PUSH
8362: LD_VAR 0 13
8366: PUSH
8367: LD_INT 1
8369: ARRAY
8370: GREATEREQUAL
8371: PUSH
8372: LD_VAR 0 8
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 275
8384: PUSH
8385: LD_VAR 0 13
8389: PUSH
8390: LD_INT 2
8392: ARRAY
8393: GREATEREQUAL
8394: AND
8395: PUSH
8396: LD_VAR 0 8
8400: PPUSH
8401: LD_INT 3
8403: PPUSH
8404: CALL_OW 275
8408: PUSH
8409: LD_VAR 0 13
8413: PUSH
8414: LD_INT 3
8416: ARRAY
8417: GREATEREQUAL
8418: AND
8419: IFFALSE 8431
// result := weapon ;
8421: LD_ADDR_VAR 0 2
8425: PUSH
8426: LD_VAR 0 17
8430: ST_TO_ADDR
// end ; end ;
8431: LD_VAR 0 2
8435: RET
// export function Compare ( val1 , val2 ) ; begin
8436: LD_INT 0
8438: PPUSH
// if val1 = val2 then
8439: LD_VAR 0 1
8443: PUSH
8444: LD_VAR 0 2
8448: EQUAL
8449: IFFALSE 8461
// result := true else
8451: LD_ADDR_VAR 0 3
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
8459: GO 8469
// result := false ;
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: LD_INT 0
8468: ST_TO_ADDR
// end ;
8469: LD_VAR 0 3
8473: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8474: LD_INT 0
8476: PPUSH
8477: PPUSH
// result := true ;
8478: LD_ADDR_VAR 0 3
8482: PUSH
8483: LD_INT 1
8485: ST_TO_ADDR
// if array1 = array2 then
8486: LD_VAR 0 1
8490: PUSH
8491: LD_VAR 0 2
8495: EQUAL
8496: IFFALSE 8561
// begin for i = 1 to array1 do
8498: LD_ADDR_VAR 0 4
8502: PUSH
8503: DOUBLE
8504: LD_INT 1
8506: DEC
8507: ST_TO_ADDR
8508: LD_VAR 0 1
8512: PUSH
8513: FOR_TO
8514: IFFALSE 8557
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8516: LD_VAR 0 1
8520: PUSH
8521: LD_VAR 0 4
8525: ARRAY
8526: PPUSH
8527: LD_VAR 0 2
8531: PUSH
8532: LD_VAR 0 4
8536: ARRAY
8537: PPUSH
8538: CALL 8436 0 2
8542: NOT
8543: IFFALSE 8555
// begin result := false ;
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// break ;
8553: GO 8557
// end ;
8555: GO 8513
8557: POP
8558: POP
// end else
8559: GO 8569
// result := false ;
8561: LD_ADDR_VAR 0 3
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// end ;
8569: LD_VAR 0 3
8573: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8574: LD_INT 0
8576: PPUSH
8577: PPUSH
8578: PPUSH
// pom := GetBase ( fac ) ;
8579: LD_ADDR_VAR 0 5
8583: PUSH
8584: LD_VAR 0 1
8588: PPUSH
8589: CALL_OW 274
8593: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8594: LD_ADDR_VAR 0 4
8598: PUSH
8599: LD_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ARRAY
8607: PPUSH
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 2
8615: ARRAY
8616: PPUSH
8617: LD_VAR 0 2
8621: PUSH
8622: LD_INT 3
8624: ARRAY
8625: PPUSH
8626: LD_VAR 0 2
8630: PUSH
8631: LD_INT 4
8633: ARRAY
8634: PPUSH
8635: CALL_OW 449
8639: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8640: LD_VAR 0 5
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 275
8652: PUSH
8653: LD_VAR 0 4
8657: PUSH
8658: LD_INT 1
8660: ARRAY
8661: GREATEREQUAL
8662: PUSH
8663: LD_VAR 0 5
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: CALL_OW 275
8675: PUSH
8676: LD_VAR 0 4
8680: PUSH
8681: LD_INT 2
8683: ARRAY
8684: GREATEREQUAL
8685: AND
8686: PUSH
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 3
8694: PPUSH
8695: CALL_OW 275
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 3
8707: ARRAY
8708: GREATEREQUAL
8709: AND
8710: IFFALSE 8722
// result := true else
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_INT 1
8719: ST_TO_ADDR
8720: GO 8730
// result := false ;
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// end ;
8730: LD_VAR 0 3
8734: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8735: LD_INT 0
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
8743: PPUSH
8744: PPUSH
8745: PPUSH
// result := false ;
8746: LD_ADDR_VAR 0 6
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8754: LD_VAR 0 1
8758: NOT
8759: PUSH
8760: LD_VAR 0 2
8764: NOT
8765: OR
8766: PUSH
8767: LD_VAR 0 5
8771: PUSH
8772: LD_INT 0
8774: PUSH
8775: LD_INT 1
8777: PUSH
8778: LD_INT 2
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 4
8786: PUSH
8787: LD_INT 5
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: IN
8798: NOT
8799: OR
8800: PUSH
8801: LD_VAR 0 3
8805: PPUSH
8806: LD_VAR 0 4
8810: PPUSH
8811: CALL_OW 488
8815: NOT
8816: OR
8817: IFFALSE 8821
// exit ;
8819: GO 9495
// pom := GetBase ( bdepot ) ;
8821: LD_ADDR_VAR 0 9
8825: PUSH
8826: LD_VAR 0 1
8830: PPUSH
8831: CALL_OW 274
8835: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8836: LD_ADDR_VAR 0 10
8840: PUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 248
8855: PPUSH
8856: CALL_OW 450
8860: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8861: LD_VAR 0 9
8865: PPUSH
8866: LD_INT 1
8868: PPUSH
8869: CALL_OW 275
8873: PUSH
8874: LD_VAR 0 10
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: GREATEREQUAL
8883: PUSH
8884: LD_VAR 0 9
8888: PPUSH
8889: LD_INT 2
8891: PPUSH
8892: CALL_OW 275
8896: PUSH
8897: LD_VAR 0 10
8901: PUSH
8902: LD_INT 2
8904: ARRAY
8905: GREATEREQUAL
8906: AND
8907: PUSH
8908: LD_VAR 0 9
8912: PPUSH
8913: LD_INT 3
8915: PPUSH
8916: CALL_OW 275
8920: PUSH
8921: LD_VAR 0 10
8925: PUSH
8926: LD_INT 3
8928: ARRAY
8929: GREATEREQUAL
8930: AND
8931: NOT
8932: IFFALSE 8936
// exit ;
8934: GO 9495
// if GetBType ( bdepot ) = b_depot then
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 266
8945: PUSH
8946: LD_INT 0
8948: EQUAL
8949: IFFALSE 8961
// dist := 28 else
8951: LD_ADDR_VAR 0 13
8955: PUSH
8956: LD_INT 28
8958: ST_TO_ADDR
8959: GO 8969
// dist := 36 ;
8961: LD_ADDR_VAR 0 13
8965: PUSH
8966: LD_INT 36
8968: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8969: LD_VAR 0 1
8973: PPUSH
8974: LD_VAR 0 3
8978: PPUSH
8979: LD_VAR 0 4
8983: PPUSH
8984: CALL_OW 297
8988: PUSH
8989: LD_VAR 0 13
8993: GREATER
8994: IFFALSE 8998
// exit ;
8996: GO 9495
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8998: LD_ADDR_VAR 0 11
9002: PUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_VAR 0 3
9012: PPUSH
9013: LD_VAR 0 4
9017: PPUSH
9018: LD_VAR 0 5
9022: PPUSH
9023: LD_VAR 0 1
9027: PPUSH
9028: CALL_OW 248
9032: PPUSH
9033: LD_INT 0
9035: PPUSH
9036: CALL 9500 0 6
9040: ST_TO_ADDR
// if not hexes then
9041: LD_VAR 0 11
9045: NOT
9046: IFFALSE 9050
// exit ;
9048: GO 9495
// hex := _GetHexInfo ( x , y ) ;
9050: LD_ADDR_VAR 0 14
9054: PUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_VAR 0 4
9064: PPUSH
9065: CALL 1938 0 2
9069: ST_TO_ADDR
// if hex [ 1 ] then
9070: LD_VAR 0 14
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: IFFALSE 9082
// exit ;
9080: GO 9495
// height := hex [ 2 ] ;
9082: LD_ADDR_VAR 0 12
9086: PUSH
9087: LD_VAR 0 14
9091: PUSH
9092: LD_INT 2
9094: ARRAY
9095: ST_TO_ADDR
// for i = 1 to hexes do
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_VAR 0 11
9110: PUSH
9111: FOR_TO
9112: IFFALSE 9450
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9114: LD_VAR 0 11
9118: PUSH
9119: LD_VAR 0 7
9123: ARRAY
9124: PUSH
9125: LD_INT 1
9127: ARRAY
9128: PPUSH
9129: LD_VAR 0 11
9133: PUSH
9134: LD_VAR 0 7
9138: ARRAY
9139: PUSH
9140: LD_INT 2
9142: ARRAY
9143: PPUSH
9144: CALL_OW 488
9148: NOT
9149: IFFALSE 9153
// continue ;
9151: GO 9111
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9153: LD_ADDR_VAR 0 8
9157: PUSH
9158: LD_VAR 0 11
9162: PUSH
9163: LD_VAR 0 7
9167: ARRAY
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_VAR 0 11
9177: PUSH
9178: LD_VAR 0 7
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: CALL 1938 0 2
9192: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9193: LD_VAR 0 8
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PUSH
9202: LD_VAR 0 8
9206: PUSH
9207: LD_INT 2
9209: ARRAY
9210: PUSH
9211: LD_VAR 0 12
9215: PUSH
9216: LD_INT 2
9218: PLUS
9219: GREATER
9220: OR
9221: PUSH
9222: LD_VAR 0 8
9226: PUSH
9227: LD_INT 2
9229: ARRAY
9230: PUSH
9231: LD_VAR 0 12
9235: PUSH
9236: LD_INT 2
9238: MINUS
9239: LESS
9240: OR
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 3
9249: ARRAY
9250: PUSH
9251: LD_INT 0
9253: PUSH
9254: LD_INT 8
9256: PUSH
9257: LD_INT 9
9259: PUSH
9260: LD_INT 10
9262: PUSH
9263: LD_INT 11
9265: PUSH
9266: LD_INT 12
9268: PUSH
9269: LD_INT 13
9271: PUSH
9272: LD_INT 16
9274: PUSH
9275: LD_INT 17
9277: PUSH
9278: LD_INT 18
9280: PUSH
9281: LD_INT 19
9283: PUSH
9284: LD_INT 20
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: IN
9305: NOT
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_INT 4
9315: ARRAY
9316: OR
9317: PUSH
9318: LD_VAR 0 8
9322: PUSH
9323: LD_INT 5
9325: ARRAY
9326: NOT
9327: OR
9328: PUSH
9329: LD_VAR 0 8
9333: PUSH
9334: LD_INT 6
9336: ARRAY
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: LD_INT 2
9343: PUSH
9344: LD_INT 7
9346: PUSH
9347: LD_INT 9
9349: PUSH
9350: LD_INT 10
9352: PUSH
9353: LD_INT 11
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: IN
9364: NOT
9365: OR
9366: PUSH
9367: LD_VAR 0 11
9371: PUSH
9372: LD_VAR 0 7
9376: ARRAY
9377: PUSH
9378: LD_INT 1
9380: ARRAY
9381: PPUSH
9382: LD_VAR 0 11
9386: PUSH
9387: LD_VAR 0 7
9391: ARRAY
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: PPUSH
9397: CALL_OW 428
9401: PUSH
9402: LD_INT 0
9404: GREATER
9405: OR
9406: PUSH
9407: LD_VAR 0 11
9411: PUSH
9412: LD_VAR 0 7
9416: ARRAY
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_VAR 0 11
9426: PUSH
9427: LD_VAR 0 7
9431: ARRAY
9432: PUSH
9433: LD_INT 2
9435: ARRAY
9436: PPUSH
9437: CALL_OW 351
9441: OR
9442: IFFALSE 9448
// exit ;
9444: POP
9445: POP
9446: GO 9495
// end ;
9448: GO 9111
9450: POP
9451: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL_OW 255
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_VAR 0 4
9471: PPUSH
9472: LD_INT 20
9474: PPUSH
9475: CALL 3673 0 4
9479: PUSH
9480: LD_INT 4
9482: ARRAY
9483: IFFALSE 9487
// exit ;
9485: GO 9495
// result := true ;
9487: LD_ADDR_VAR 0 6
9491: PUSH
9492: LD_INT 1
9494: ST_TO_ADDR
// end ;
9495: LD_VAR 0 6
9499: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
// result = [ ] ;
9560: LD_ADDR_VAR 0 7
9564: PUSH
9565: EMPTY
9566: ST_TO_ADDR
// temp_list = [ ] ;
9567: LD_ADDR_VAR 0 9
9571: PUSH
9572: EMPTY
9573: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9574: LD_VAR 0 4
9578: PUSH
9579: LD_INT 0
9581: PUSH
9582: LD_INT 1
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 4
9593: PUSH
9594: LD_INT 5
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: IN
9605: NOT
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: LD_INT 0
9614: PUSH
9615: LD_INT 1
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: IN
9622: PUSH
9623: LD_VAR 0 5
9627: PUSH
9628: LD_INT 1
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: LD_INT 3
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: IN
9642: NOT
9643: AND
9644: OR
9645: IFFALSE 9649
// exit ;
9647: GO 28034
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9649: LD_VAR 0 1
9653: PUSH
9654: LD_INT 6
9656: PUSH
9657: LD_INT 7
9659: PUSH
9660: LD_INT 8
9662: PUSH
9663: LD_INT 13
9665: PUSH
9666: LD_INT 12
9668: PUSH
9669: LD_INT 15
9671: PUSH
9672: LD_INT 11
9674: PUSH
9675: LD_INT 14
9677: PUSH
9678: LD_INT 10
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: IN
9692: IFFALSE 9702
// btype = b_lab ;
9694: LD_ADDR_VAR 0 1
9698: PUSH
9699: LD_INT 6
9701: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9702: LD_VAR 0 6
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: LD_INT 1
9712: PUSH
9713: LD_INT 2
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: IN
9721: NOT
9722: PUSH
9723: LD_VAR 0 1
9727: PUSH
9728: LD_INT 0
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: LD_INT 6
9742: PUSH
9743: LD_INT 36
9745: PUSH
9746: LD_INT 4
9748: PUSH
9749: LD_INT 5
9751: PUSH
9752: LD_INT 31
9754: PUSH
9755: LD_INT 32
9757: PUSH
9758: LD_INT 33
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: IN
9774: NOT
9775: PUSH
9776: LD_VAR 0 6
9780: PUSH
9781: LD_INT 1
9783: EQUAL
9784: AND
9785: OR
9786: PUSH
9787: LD_VAR 0 1
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: IN
9802: NOT
9803: PUSH
9804: LD_VAR 0 6
9808: PUSH
9809: LD_INT 2
9811: EQUAL
9812: AND
9813: OR
9814: IFFALSE 9824
// mode = 0 ;
9816: LD_ADDR_VAR 0 6
9820: PUSH
9821: LD_INT 0
9823: ST_TO_ADDR
// case mode of 0 :
9824: LD_VAR 0 6
9828: PUSH
9829: LD_INT 0
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 21290
9837: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9838: LD_ADDR_VAR 0 11
9842: PUSH
9843: LD_INT 0
9845: PUSH
9846: LD_INT 0
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 0
9855: PUSH
9856: LD_INT 1
9858: NEG
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 1
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 0
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 1
9896: NEG
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 1
9907: NEG
9908: PUSH
9909: LD_INT 1
9911: NEG
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 1
9919: NEG
9920: PUSH
9921: LD_INT 2
9923: NEG
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 0
9931: PUSH
9932: LD_INT 2
9934: NEG
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 1
9942: PUSH
9943: LD_INT 1
9945: NEG
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 0
9963: PUSH
9964: LD_INT 2
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 1
9973: NEG
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 1
9984: PUSH
9985: LD_INT 3
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 0
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 1
10004: NEG
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10031: LD_ADDR_VAR 0 12
10035: PUSH
10036: LD_INT 0
10038: PUSH
10039: LD_INT 0
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 0
10048: PUSH
10049: LD_INT 1
10051: NEG
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: LD_INT 1
10059: PUSH
10060: LD_INT 0
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 1
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 0
10079: PUSH
10080: LD_INT 1
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 1
10089: NEG
10090: PUSH
10091: LD_INT 0
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 1
10100: NEG
10101: PUSH
10102: LD_INT 1
10104: NEG
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: LD_INT 1
10115: NEG
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 0
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 1
10143: NEG
10144: PUSH
10145: LD_INT 1
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 2
10154: NEG
10155: PUSH
10156: LD_INT 0
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 2
10165: NEG
10166: PUSH
10167: LD_INT 1
10169: NEG
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 2
10177: NEG
10178: PUSH
10179: LD_INT 1
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 3
10188: NEG
10189: PUSH
10190: LD_INT 0
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 3
10199: NEG
10200: PUSH
10201: LD_INT 1
10203: NEG
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10227: LD_ADDR_VAR 0 13
10231: PUSH
10232: LD_INT 0
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: LD_INT 1
10247: NEG
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: LD_INT 0
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: LD_INT 1
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 1
10285: NEG
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 1
10296: NEG
10297: PUSH
10298: LD_INT 1
10300: NEG
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: NEG
10309: PUSH
10310: LD_INT 2
10312: NEG
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: LD_INT 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 2
10350: NEG
10351: PUSH
10352: LD_INT 1
10354: NEG
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: NEG
10363: PUSH
10364: LD_INT 2
10366: NEG
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 2
10374: NEG
10375: PUSH
10376: LD_INT 3
10378: NEG
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 3
10386: NEG
10387: PUSH
10388: LD_INT 2
10390: NEG
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 3
10398: NEG
10399: PUSH
10400: LD_INT 3
10402: NEG
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10426: LD_ADDR_VAR 0 14
10430: PUSH
10431: LD_INT 0
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 0
10443: PUSH
10444: LD_INT 1
10446: NEG
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: LD_INT 0
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 0
10474: PUSH
10475: LD_INT 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 1
10484: NEG
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 1
10495: NEG
10496: PUSH
10497: LD_INT 1
10499: NEG
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 1
10507: NEG
10508: PUSH
10509: LD_INT 2
10511: NEG
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: LD_INT 2
10522: NEG
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: LD_INT 1
10533: NEG
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 0
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 1
10561: NEG
10562: PUSH
10563: LD_INT 1
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 1
10572: NEG
10573: PUSH
10574: LD_INT 3
10576: NEG
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 0
10584: PUSH
10585: LD_INT 3
10587: NEG
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: LD_INT 2
10598: NEG
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10622: LD_ADDR_VAR 0 15
10626: PUSH
10627: LD_INT 0
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 0
10639: PUSH
10640: LD_INT 1
10642: NEG
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 1
10650: PUSH
10651: LD_INT 0
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 1
10680: NEG
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 1
10691: NEG
10692: PUSH
10693: LD_INT 1
10695: NEG
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 1
10703: PUSH
10704: LD_INT 1
10706: NEG
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 1
10734: NEG
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 2
10745: NEG
10746: PUSH
10747: LD_INT 0
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 2
10756: NEG
10757: PUSH
10758: LD_INT 1
10760: NEG
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 1
10771: NEG
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 3
10779: PUSH
10780: LD_INT 0
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10815: LD_ADDR_VAR 0 16
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 0
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 1
10835: NEG
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 0
10863: PUSH
10864: LD_INT 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 1
10873: NEG
10874: PUSH
10875: LD_INT 0
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 1
10884: NEG
10885: PUSH
10886: LD_INT 1
10888: NEG
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 1
10896: NEG
10897: PUSH
10898: LD_INT 2
10900: NEG
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 1
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 2
10918: PUSH
10919: LD_INT 2
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 1
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 2
10938: NEG
10939: PUSH
10940: LD_INT 1
10942: NEG
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: NEG
10951: PUSH
10952: LD_INT 2
10954: NEG
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 3
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 3
10972: PUSH
10973: LD_INT 3
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: LD_INT 3
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11008: LD_ADDR_VAR 0 17
11012: PUSH
11013: LD_INT 0
11015: PUSH
11016: LD_INT 0
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 0
11025: PUSH
11026: LD_INT 1
11028: NEG
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: LD_INT 0
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 0
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 1
11066: NEG
11067: PUSH
11068: LD_INT 0
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: PUSH
11079: LD_INT 1
11081: NEG
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 1
11089: NEG
11090: PUSH
11091: LD_INT 2
11093: NEG
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 0
11101: PUSH
11102: LD_INT 2
11104: NEG
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: LD_INT 1
11115: NEG
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 2
11123: PUSH
11124: LD_INT 0
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 2
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 0
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 1
11173: NEG
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 2
11184: NEG
11185: PUSH
11186: LD_INT 0
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 2
11195: NEG
11196: PUSH
11197: LD_INT 1
11199: NEG
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 2
11207: NEG
11208: PUSH
11209: LD_INT 2
11211: NEG
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11238: LD_ADDR_VAR 0 18
11242: PUSH
11243: LD_INT 0
11245: PUSH
11246: LD_INT 0
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 0
11255: PUSH
11256: LD_INT 1
11258: NEG
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: LD_INT 0
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 1
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 1
11296: NEG
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 1
11307: NEG
11308: PUSH
11309: LD_INT 1
11311: NEG
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 1
11319: NEG
11320: PUSH
11321: LD_INT 2
11323: NEG
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: LD_INT 2
11334: NEG
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 1
11342: PUSH
11343: LD_INT 1
11345: NEG
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 0
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 1
11403: NEG
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: NEG
11415: PUSH
11416: LD_INT 0
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 2
11425: NEG
11426: PUSH
11427: LD_INT 1
11429: NEG
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 2
11437: NEG
11438: PUSH
11439: LD_INT 2
11441: NEG
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11468: LD_ADDR_VAR 0 19
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: LD_INT 0
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 0
11485: PUSH
11486: LD_INT 1
11488: NEG
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 0
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: NEG
11527: PUSH
11528: LD_INT 0
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 1
11537: NEG
11538: PUSH
11539: LD_INT 1
11541: NEG
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 1
11549: NEG
11550: PUSH
11551: LD_INT 2
11553: NEG
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 0
11561: PUSH
11562: LD_INT 2
11564: NEG
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: LD_INT 1
11575: NEG
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: LD_INT 0
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 2
11603: PUSH
11604: LD_INT 2
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 0
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 1
11633: NEG
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 2
11644: NEG
11645: PUSH
11646: LD_INT 0
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 2
11655: NEG
11656: PUSH
11657: LD_INT 1
11659: NEG
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 2
11667: NEG
11668: PUSH
11669: LD_INT 2
11671: NEG
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11698: LD_ADDR_VAR 0 20
11702: PUSH
11703: LD_INT 0
11705: PUSH
11706: LD_INT 0
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 0
11715: PUSH
11716: LD_INT 1
11718: NEG
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: LD_INT 0
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: LD_INT 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 0
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 1
11756: NEG
11757: PUSH
11758: LD_INT 0
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 1
11767: NEG
11768: PUSH
11769: LD_INT 1
11771: NEG
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 1
11779: NEG
11780: PUSH
11781: LD_INT 2
11783: NEG
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 0
11791: PUSH
11792: LD_INT 2
11794: NEG
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 1
11802: PUSH
11803: LD_INT 1
11805: NEG
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 2
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 2
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 1
11863: NEG
11864: PUSH
11865: LD_INT 1
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 2
11874: NEG
11875: PUSH
11876: LD_INT 0
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 2
11885: NEG
11886: PUSH
11887: LD_INT 1
11889: NEG
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 2
11897: NEG
11898: PUSH
11899: LD_INT 2
11901: NEG
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11928: LD_ADDR_VAR 0 21
11932: PUSH
11933: LD_INT 0
11935: PUSH
11936: LD_INT 0
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 0
11945: PUSH
11946: LD_INT 1
11948: NEG
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: LD_INT 0
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 1
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 0
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 1
11986: NEG
11987: PUSH
11988: LD_INT 0
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 1
11997: NEG
11998: PUSH
11999: LD_INT 1
12001: NEG
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 1
12009: NEG
12010: PUSH
12011: LD_INT 2
12013: NEG
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 0
12021: PUSH
12022: LD_INT 2
12024: NEG
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: LD_INT 1
12035: NEG
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 2
12043: PUSH
12044: LD_INT 0
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: LD_INT 1
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: LD_INT 2
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 0
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 1
12093: NEG
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 2
12104: NEG
12105: PUSH
12106: LD_INT 0
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 2
12115: NEG
12116: PUSH
12117: LD_INT 1
12119: NEG
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 2
12127: NEG
12128: PUSH
12129: LD_INT 2
12131: NEG
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12158: LD_ADDR_VAR 0 22
12162: PUSH
12163: LD_INT 0
12165: PUSH
12166: LD_INT 0
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 0
12175: PUSH
12176: LD_INT 1
12178: NEG
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: LD_INT 0
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 1
12216: NEG
12217: PUSH
12218: LD_INT 0
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 1
12227: NEG
12228: PUSH
12229: LD_INT 1
12231: NEG
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 1
12239: NEG
12240: PUSH
12241: LD_INT 2
12243: NEG
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: LD_INT 2
12254: NEG
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: LD_INT 1
12265: NEG
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 0
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 0
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 1
12323: NEG
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 2
12334: NEG
12335: PUSH
12336: LD_INT 0
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 2
12345: NEG
12346: PUSH
12347: LD_INT 1
12349: NEG
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 2
12357: NEG
12358: PUSH
12359: LD_INT 2
12361: NEG
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12388: LD_ADDR_VAR 0 23
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: LD_INT 0
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 0
12405: PUSH
12406: LD_INT 1
12408: NEG
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: LD_INT 0
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: LD_INT 1
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 0
12436: PUSH
12437: LD_INT 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: NEG
12447: PUSH
12448: LD_INT 0
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 1
12457: NEG
12458: PUSH
12459: LD_INT 1
12461: NEG
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 1
12469: NEG
12470: PUSH
12471: LD_INT 2
12473: NEG
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 0
12481: PUSH
12482: LD_INT 2
12484: NEG
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 1
12492: PUSH
12493: LD_INT 1
12495: NEG
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 0
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 2
12513: PUSH
12514: LD_INT 1
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 1
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 0
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 1
12553: NEG
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 2
12564: NEG
12565: PUSH
12566: LD_INT 0
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: NEG
12576: PUSH
12577: LD_INT 1
12579: NEG
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 2
12587: NEG
12588: PUSH
12589: LD_INT 2
12591: NEG
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: NEG
12600: PUSH
12601: LD_INT 3
12603: NEG
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 1
12611: NEG
12612: PUSH
12613: LD_INT 3
12615: NEG
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: LD_INT 2
12626: NEG
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: LD_INT 1
12637: NEG
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12668: LD_ADDR_VAR 0 24
12672: PUSH
12673: LD_INT 0
12675: PUSH
12676: LD_INT 0
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 0
12685: PUSH
12686: LD_INT 1
12688: NEG
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: LD_INT 0
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 0
12716: PUSH
12717: LD_INT 1
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 1
12726: NEG
12727: PUSH
12728: LD_INT 0
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 1
12737: NEG
12738: PUSH
12739: LD_INT 1
12741: NEG
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 1
12749: NEG
12750: PUSH
12751: LD_INT 2
12753: NEG
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 0
12761: PUSH
12762: LD_INT 2
12764: NEG
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: LD_INT 1
12775: NEG
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 0
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 2
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 1
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 0
12823: PUSH
12824: LD_INT 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 1
12833: NEG
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 2
12844: NEG
12845: PUSH
12846: LD_INT 0
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 2
12855: NEG
12856: PUSH
12857: LD_INT 1
12859: NEG
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 2
12867: NEG
12868: PUSH
12869: LD_INT 2
12871: NEG
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 1
12879: PUSH
12880: LD_INT 2
12882: NEG
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 1
12893: NEG
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 3
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12944: LD_ADDR_VAR 0 25
12948: PUSH
12949: LD_INT 0
12951: PUSH
12952: LD_INT 0
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 0
12961: PUSH
12962: LD_INT 1
12964: NEG
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: LD_INT 0
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 0
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 1
13002: NEG
13003: PUSH
13004: LD_INT 0
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 1
13013: NEG
13014: PUSH
13015: LD_INT 1
13017: NEG
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 1
13025: NEG
13026: PUSH
13027: LD_INT 2
13029: NEG
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 0
13037: PUSH
13038: LD_INT 2
13040: NEG
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: LD_INT 1
13051: NEG
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 2
13059: PUSH
13060: LD_INT 0
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 2
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: LD_INT 2
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 0
13099: PUSH
13100: LD_INT 2
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 1
13109: NEG
13110: PUSH
13111: LD_INT 1
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 2
13120: NEG
13121: PUSH
13122: LD_INT 0
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 2
13131: NEG
13132: PUSH
13133: LD_INT 1
13135: NEG
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 2
13143: NEG
13144: PUSH
13145: LD_INT 2
13147: NEG
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 1
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 3
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: LD_INT 3
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13218: LD_ADDR_VAR 0 26
13222: PUSH
13223: LD_INT 0
13225: PUSH
13226: LD_INT 0
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 0
13235: PUSH
13236: LD_INT 1
13238: NEG
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: LD_INT 0
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: LD_INT 1
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 1
13276: NEG
13277: PUSH
13278: LD_INT 0
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 1
13287: NEG
13288: PUSH
13289: LD_INT 1
13291: NEG
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 1
13299: NEG
13300: PUSH
13301: LD_INT 2
13303: NEG
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 0
13311: PUSH
13312: LD_INT 2
13314: NEG
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 1
13322: PUSH
13323: LD_INT 1
13325: NEG
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 0
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: LD_INT 1
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 0
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 1
13383: NEG
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 2
13394: NEG
13395: PUSH
13396: LD_INT 0
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: NEG
13406: PUSH
13407: LD_INT 1
13409: NEG
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 2
13417: NEG
13418: PUSH
13419: LD_INT 2
13421: NEG
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 1
13449: NEG
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 2
13460: NEG
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13494: LD_ADDR_VAR 0 27
13498: PUSH
13499: LD_INT 0
13501: PUSH
13502: LD_INT 0
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 0
13511: PUSH
13512: LD_INT 1
13514: NEG
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 0
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 0
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 1
13552: NEG
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 1
13563: NEG
13564: PUSH
13565: LD_INT 1
13567: NEG
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 1
13575: NEG
13576: PUSH
13577: LD_INT 2
13579: NEG
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: LD_INT 2
13590: NEG
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: LD_INT 1
13601: NEG
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 0
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 1
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 0
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 1
13659: NEG
13660: PUSH
13661: LD_INT 1
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: NEG
13671: PUSH
13672: LD_INT 0
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 2
13681: NEG
13682: PUSH
13683: LD_INT 1
13685: NEG
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 2
13693: NEG
13694: PUSH
13695: LD_INT 2
13697: NEG
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 1
13705: NEG
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 2
13716: NEG
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 3
13727: NEG
13728: PUSH
13729: LD_INT 1
13731: NEG
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 3
13739: NEG
13740: PUSH
13741: LD_INT 2
13743: NEG
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13774: LD_ADDR_VAR 0 28
13778: PUSH
13779: LD_INT 0
13781: PUSH
13782: LD_INT 0
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 0
13791: PUSH
13792: LD_INT 1
13794: NEG
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: LD_INT 0
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: LD_INT 1
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 0
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 1
13832: NEG
13833: PUSH
13834: LD_INT 0
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 1
13843: NEG
13844: PUSH
13845: LD_INT 1
13847: NEG
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 1
13855: NEG
13856: PUSH
13857: LD_INT 2
13859: NEG
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: LD_INT 2
13870: NEG
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: LD_INT 1
13881: NEG
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 0
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 1
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 0
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 1
13939: NEG
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 2
13950: NEG
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 2
13961: NEG
13962: PUSH
13963: LD_INT 1
13965: NEG
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 2
13973: NEG
13974: PUSH
13975: LD_INT 2
13977: NEG
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 2
13985: NEG
13986: PUSH
13987: LD_INT 3
13989: NEG
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 1
13997: NEG
13998: PUSH
13999: LD_INT 3
14001: NEG
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 3
14009: NEG
14010: PUSH
14011: LD_INT 1
14013: NEG
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 3
14021: NEG
14022: PUSH
14023: LD_INT 2
14025: NEG
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14056: LD_ADDR_VAR 0 29
14060: PUSH
14061: LD_INT 0
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: LD_INT 1
14076: NEG
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: LD_INT 0
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 1
14094: PUSH
14095: LD_INT 1
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 0
14104: PUSH
14105: LD_INT 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 1
14114: NEG
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 1
14125: NEG
14126: PUSH
14127: LD_INT 1
14129: NEG
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 1
14137: NEG
14138: PUSH
14139: LD_INT 2
14141: NEG
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 0
14149: PUSH
14150: LD_INT 2
14152: NEG
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 1
14160: PUSH
14161: LD_INT 1
14163: NEG
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 0
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 1
14211: NEG
14212: PUSH
14213: LD_INT 1
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 2
14222: NEG
14223: PUSH
14224: LD_INT 1
14226: NEG
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 2
14234: NEG
14235: PUSH
14236: LD_INT 2
14238: NEG
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 2
14246: NEG
14247: PUSH
14248: LD_INT 3
14250: NEG
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 1
14261: NEG
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 3
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 1
14289: NEG
14290: PUSH
14291: LD_INT 2
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 3
14300: NEG
14301: PUSH
14302: LD_INT 2
14304: NEG
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14335: LD_ADDR_VAR 0 30
14339: PUSH
14340: LD_INT 0
14342: PUSH
14343: LD_INT 0
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 0
14352: PUSH
14353: LD_INT 1
14355: NEG
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: LD_INT 0
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: LD_INT 1
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 0
14383: PUSH
14384: LD_INT 1
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 1
14393: NEG
14394: PUSH
14395: LD_INT 0
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: PUSH
14406: LD_INT 1
14408: NEG
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 1
14416: NEG
14417: PUSH
14418: LD_INT 2
14420: NEG
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: LD_INT 2
14431: NEG
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: LD_INT 1
14442: NEG
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 0
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 2
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 1
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 1
14490: NEG
14491: PUSH
14492: LD_INT 1
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 2
14501: NEG
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 2
14512: NEG
14513: PUSH
14514: LD_INT 1
14516: NEG
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: NEG
14525: PUSH
14526: LD_INT 3
14528: NEG
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: LD_INT 2
14539: NEG
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 3
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 3
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 2
14567: NEG
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 3
14578: NEG
14579: PUSH
14580: LD_INT 1
14582: NEG
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14613: LD_ADDR_VAR 0 31
14617: PUSH
14618: LD_INT 0
14620: PUSH
14621: LD_INT 0
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: LD_INT 1
14633: NEG
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: LD_INT 0
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 1
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 0
14661: PUSH
14662: LD_INT 1
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 1
14671: NEG
14672: PUSH
14673: LD_INT 0
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 1
14682: NEG
14683: PUSH
14684: LD_INT 1
14686: NEG
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 1
14694: NEG
14695: PUSH
14696: LD_INT 2
14698: NEG
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: LD_INT 0
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: LD_INT 2
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 0
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 1
14767: NEG
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 2
14778: NEG
14779: PUSH
14780: LD_INT 1
14782: NEG
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 2
14790: NEG
14791: PUSH
14792: LD_INT 2
14794: NEG
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: NEG
14803: PUSH
14804: LD_INT 3
14806: NEG
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 2
14814: PUSH
14815: LD_INT 1
14817: NEG
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 1
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 1
14845: NEG
14846: PUSH
14847: LD_INT 2
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 3
14856: NEG
14857: PUSH
14858: LD_INT 2
14860: NEG
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14891: LD_ADDR_VAR 0 32
14895: PUSH
14896: LD_INT 0
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 0
14908: PUSH
14909: LD_INT 1
14911: NEG
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: LD_INT 0
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: LD_INT 1
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: NEG
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 1
14960: NEG
14961: PUSH
14962: LD_INT 1
14964: NEG
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 1
14972: NEG
14973: PUSH
14974: LD_INT 2
14976: NEG
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: LD_INT 2
14987: NEG
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: LD_INT 1
14998: NEG
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 2
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: LD_INT 2
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 0
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 1
15046: NEG
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 2
15057: NEG
15058: PUSH
15059: LD_INT 0
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 2
15068: NEG
15069: PUSH
15070: LD_INT 1
15072: NEG
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 1
15080: NEG
15081: PUSH
15082: LD_INT 3
15084: NEG
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: LD_INT 2
15095: NEG
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 3
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 2
15123: NEG
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 3
15134: NEG
15135: PUSH
15136: LD_INT 1
15138: NEG
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15169: LD_ADDR_VAR 0 33
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 0
15186: PUSH
15187: LD_INT 1
15189: NEG
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 1
15227: NEG
15228: PUSH
15229: LD_INT 0
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 1
15238: NEG
15239: PUSH
15240: LD_INT 1
15242: NEG
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 1
15250: NEG
15251: PUSH
15252: LD_INT 2
15254: NEG
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 1
15262: PUSH
15263: LD_INT 1
15265: NEG
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 2
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: LD_INT 2
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 1
15313: NEG
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: NEG
15325: PUSH
15326: LD_INT 0
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 2
15335: NEG
15336: PUSH
15337: LD_INT 1
15339: NEG
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 2
15347: NEG
15348: PUSH
15349: LD_INT 2
15351: NEG
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 2
15359: NEG
15360: PUSH
15361: LD_INT 3
15363: NEG
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: LD_INT 1
15374: NEG
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 3
15382: PUSH
15383: LD_INT 1
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 1
15402: NEG
15403: PUSH
15404: LD_INT 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 3
15413: NEG
15414: PUSH
15415: LD_INT 2
15417: NEG
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15448: LD_ADDR_VAR 0 34
15452: PUSH
15453: LD_INT 0
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 0
15465: PUSH
15466: LD_INT 1
15468: NEG
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: LD_INT 0
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: LD_INT 0
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 1
15517: NEG
15518: PUSH
15519: LD_INT 1
15521: NEG
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 1
15529: NEG
15530: PUSH
15531: LD_INT 2
15533: NEG
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 0
15541: PUSH
15542: LD_INT 2
15544: NEG
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: LD_INT 1
15555: NEG
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 1
15593: NEG
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 2
15604: NEG
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 2
15615: NEG
15616: PUSH
15617: LD_INT 1
15619: NEG
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 2
15627: NEG
15628: PUSH
15629: LD_INT 2
15631: NEG
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: NEG
15640: PUSH
15641: LD_INT 3
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 2
15654: NEG
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 3
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 2
15682: NEG
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 3
15693: NEG
15694: PUSH
15695: LD_INT 1
15697: NEG
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15728: LD_ADDR_VAR 0 35
15732: PUSH
15733: LD_INT 0
15735: PUSH
15736: LD_INT 0
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 0
15745: PUSH
15746: LD_INT 1
15748: NEG
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: LD_INT 0
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: LD_INT 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 1
15786: NEG
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 1
15797: NEG
15798: PUSH
15799: LD_INT 1
15801: NEG
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 2
15819: NEG
15820: PUSH
15821: LD_INT 1
15823: NEG
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15840: LD_ADDR_VAR 0 36
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: LD_INT 0
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 1
15860: NEG
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 0
15888: PUSH
15889: LD_INT 1
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: LD_INT 0
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 1
15909: NEG
15910: PUSH
15911: LD_INT 1
15913: NEG
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: LD_INT 2
15925: NEG
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15952: LD_ADDR_VAR 0 37
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: LD_INT 0
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: LD_INT 1
15972: NEG
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: NEG
16011: PUSH
16012: LD_INT 0
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 1
16021: NEG
16022: PUSH
16023: LD_INT 1
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: LD_INT 1
16036: NEG
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 1
16044: NEG
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16064: LD_ADDR_VAR 0 38
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 0
16081: PUSH
16082: LD_INT 1
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 0
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 1
16122: NEG
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 1
16133: NEG
16134: PUSH
16135: LD_INT 1
16137: NEG
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 2
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 2
16155: NEG
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16176: LD_ADDR_VAR 0 39
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 0
16193: PUSH
16194: LD_INT 1
16196: NEG
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: LD_INT 0
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 1
16234: NEG
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 1
16245: NEG
16246: PUSH
16247: LD_INT 1
16249: NEG
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 1
16257: NEG
16258: PUSH
16259: LD_INT 2
16261: NEG
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: LD_INT 2
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16288: LD_ADDR_VAR 0 40
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 1
16346: NEG
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: LD_INT 1
16361: NEG
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 1
16369: PUSH
16370: LD_INT 1
16372: NEG
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16400: LD_ADDR_VAR 0 41
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: LD_INT 1
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: LD_INT 2
16485: NEG
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 1
16496: NEG
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 2
16566: NEG
16567: PUSH
16568: LD_INT 1
16570: NEG
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 2
16578: NEG
16579: PUSH
16580: LD_INT 2
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 2
16590: NEG
16591: PUSH
16592: LD_INT 3
16594: NEG
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: LD_INT 1
16605: NEG
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 3
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 3
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 3
16643: PUSH
16644: LD_INT 3
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 2
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: NEG
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 3
16674: NEG
16675: PUSH
16676: LD_INT 0
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 3
16685: NEG
16686: PUSH
16687: LD_INT 1
16689: NEG
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 3
16697: NEG
16698: PUSH
16699: LD_INT 2
16701: NEG
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 3
16709: NEG
16710: PUSH
16711: LD_INT 3
16713: NEG
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16750: LD_ADDR_VAR 0 42
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 0
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: LD_INT 1
16770: NEG
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: LD_INT 0
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 1
16819: NEG
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 1
16831: NEG
16832: PUSH
16833: LD_INT 2
16835: NEG
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: LD_INT 2
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 2
16875: PUSH
16876: LD_INT 2
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: NEG
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 2
16928: NEG
16929: PUSH
16930: LD_INT 2
16932: NEG
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: LD_INT 3
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 1
16952: NEG
16953: PUSH
16954: LD_INT 3
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: LD_INT 3
16967: NEG
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: LD_INT 2
16978: NEG
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 3
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 3
16996: PUSH
16997: LD_INT 3
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 3
17047: NEG
17048: PUSH
17049: LD_INT 2
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: NEG
17060: PUSH
17061: LD_INT 3
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17100: LD_ADDR_VAR 0 43
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: LD_INT 1
17120: NEG
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: LD_INT 1
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 1
17158: NEG
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: NEG
17182: PUSH
17183: LD_INT 2
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 2
17196: NEG
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 2
17266: NEG
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 2
17277: NEG
17278: PUSH
17279: LD_INT 1
17281: NEG
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: PUSH
17291: LD_INT 3
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 0
17301: PUSH
17302: LD_INT 3
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: LD_INT 2
17315: NEG
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 1
17374: NEG
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: NEG
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 3
17396: NEG
17397: PUSH
17398: LD_INT 0
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 3
17407: NEG
17408: PUSH
17409: LD_INT 1
17411: NEG
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17448: LD_ADDR_VAR 0 44
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: LD_INT 0
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: LD_INT 1
17468: NEG
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: LD_INT 0
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: LD_INT 1
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: NEG
17518: PUSH
17519: LD_INT 1
17521: NEG
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 1
17529: NEG
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: NEG
17593: PUSH
17594: LD_INT 1
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 2
17614: NEG
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 2
17626: NEG
17627: PUSH
17628: LD_INT 2
17630: NEG
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 2
17638: NEG
17639: PUSH
17640: LD_INT 3
17642: NEG
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 3
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 3
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 3
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 3
17722: NEG
17723: PUSH
17724: LD_INT 0
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 3
17733: NEG
17734: PUSH
17735: LD_INT 1
17737: NEG
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 3
17745: NEG
17746: PUSH
17747: LD_INT 2
17749: NEG
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 3
17757: NEG
17758: PUSH
17759: LD_INT 3
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17798: LD_ADDR_VAR 0 45
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 0
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: LD_INT 1
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: LD_INT 2
17883: NEG
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 2
17894: NEG
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 1
17905: NEG
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 2
17964: NEG
17965: PUSH
17966: LD_INT 1
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 2
17976: NEG
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: NEG
17989: PUSH
17990: LD_INT 3
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: NEG
18001: PUSH
18002: LD_INT 3
18004: NEG
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: LD_INT 3
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 3
18044: PUSH
18045: LD_INT 3
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: LD_INT 3
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 3
18095: NEG
18096: PUSH
18097: LD_INT 2
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 3
18107: NEG
18108: PUSH
18109: LD_INT 3
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18148: LD_ADDR_VAR 0 46
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: LD_INT 1
18168: NEG
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 1
18303: NEG
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: NEG
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 3
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: LD_INT 3
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 2
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 3
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 3
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 2
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 3
18444: NEG
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 3
18455: NEG
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18496: LD_ADDR_VAR 0 47
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 1
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: NEG
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 2
18611: NEG
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18647: LD_ADDR_VAR 0 48
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: LD_INT 1
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 2
18732: NEG
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: LD_INT 2
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18794: LD_ADDR_VAR 0 49
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 1
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 2
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18938: LD_ADDR_VAR 0 50
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 0
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19082: LD_ADDR_VAR 0 51
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: LD_INT 1
19155: NEG
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19229: LD_ADDR_VAR 0 52
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: NEG
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19380: LD_ADDR_VAR 0 53
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19610: LD_ADDR_VAR 0 54
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: LD_INT 2
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: LD_INT 2
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19840: LD_ADDR_VAR 0 55
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20070: LD_ADDR_VAR 0 56
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: NEG
20258: PUSH
20259: LD_INT 1
20261: NEG
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: LD_INT 2
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20300: LD_ADDR_VAR 0 57
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20530: LD_ADDR_VAR 0 58
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: LD_INT 1
20550: NEG
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20760: LD_ADDR_VAR 0 59
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20848: LD_ADDR_VAR 0 60
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20936: LD_ADDR_VAR 0 61
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 0
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 1
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21024: LD_ADDR_VAR 0 62
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 1
21082: NEG
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21112: LD_ADDR_VAR 0 63
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: LD_INT 1
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21200: LD_ADDR_VAR 0 64
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: LD_INT 1
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: ST_TO_ADDR
// end ; 1 :
21288: GO 27185
21290: LD_INT 1
21292: DOUBLE
21293: EQUAL
21294: IFTRUE 21298
21296: GO 23921
21298: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21299: LD_ADDR_VAR 0 11
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: LD_INT 3
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: LD_INT 3
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: LD_INT 2
21332: NEG
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21343: LD_ADDR_VAR 0 12
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 3
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 3
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21384: LD_ADDR_VAR 0 13
21388: PUSH
21389: LD_INT 3
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 3
21401: PUSH
21402: LD_INT 3
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 3
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21424: LD_ADDR_VAR 0 14
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: LD_INT 3
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21465: LD_ADDR_VAR 0 15
21469: PUSH
21470: LD_INT 2
21472: NEG
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 3
21483: NEG
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 3
21494: NEG
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21509: LD_ADDR_VAR 0 16
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: LD_INT 3
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: LD_INT 2
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: LD_INT 3
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21555: LD_ADDR_VAR 0 17
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 3
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 3
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21599: LD_ADDR_VAR 0 18
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21640: LD_ADDR_VAR 0 19
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: LD_INT 3
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 3
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21680: LD_ADDR_VAR 0 20
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21721: LD_ADDR_VAR 0 21
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 3
21739: NEG
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 3
21750: NEG
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21765: LD_ADDR_VAR 0 22
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: LD_INT 3
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 3
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 3
21796: NEG
21797: PUSH
21798: LD_INT 3
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21811: LD_ADDR_VAR 0 23
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: LD_INT 3
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: LD_INT 4
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 3
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21855: LD_ADDR_VAR 0 24
21859: PUSH
21860: LD_INT 3
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 4
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21896: LD_ADDR_VAR 0 25
21900: PUSH
21901: LD_INT 3
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 4
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 3
21923: PUSH
21924: LD_INT 4
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21936: LD_ADDR_VAR 0 26
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 4
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21977: LD_ADDR_VAR 0 27
21981: PUSH
21982: LD_INT 3
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 3
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 4
22006: NEG
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22021: LD_ADDR_VAR 0 28
22025: PUSH
22026: LD_INT 3
22028: NEG
22029: PUSH
22030: LD_INT 3
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: LD_INT 4
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 4
22052: NEG
22053: PUSH
22054: LD_INT 3
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22067: LD_ADDR_VAR 0 29
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: PUSH
22076: LD_INT 3
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 3
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 2
22100: NEG
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 4
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 4
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 3
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: LD_INT 5
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: LD_INT 5
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 4
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 6
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: LD_INT 6
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 5
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22222: LD_ADDR_VAR 0 30
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 1
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 4
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 5
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 5
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 5
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 6
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 6
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22365: LD_ADDR_VAR 0 31
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: LD_INT 3
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 4
22412: PUSH
22413: LD_INT 4
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: LD_INT 4
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 5
22432: PUSH
22433: LD_INT 4
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 5
22442: PUSH
22443: LD_INT 5
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 4
22452: PUSH
22453: LD_INT 5
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 6
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 6
22472: PUSH
22473: LD_INT 6
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 6
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22504: LD_ADDR_VAR 0 32
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 4
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 4
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 3
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 5
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 4
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 6
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 6
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 5
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22647: LD_ADDR_VAR 0 33
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 3
22665: NEG
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 3
22676: NEG
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 3
22688: NEG
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 4
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 4
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 4
22722: NEG
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 5
22733: NEG
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 5
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 5
22756: NEG
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 6
22767: NEG
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 6
22778: NEG
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22802: LD_ADDR_VAR 0 34
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 3
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 3
22821: NEG
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: LD_INT 3
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: LD_INT 4
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 4
22857: NEG
22858: PUSH
22859: LD_INT 3
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 4
22869: NEG
22870: PUSH
22871: LD_INT 4
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 4
22881: NEG
22882: PUSH
22883: LD_INT 5
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 5
22893: NEG
22894: PUSH
22895: LD_INT 4
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 5
22905: NEG
22906: PUSH
22907: LD_INT 5
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 5
22917: NEG
22918: PUSH
22919: LD_INT 6
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 6
22929: NEG
22930: PUSH
22931: LD_INT 5
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 6
22941: NEG
22942: PUSH
22943: LD_INT 6
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22965: LD_ADDR_VAR 0 41
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23009: LD_ADDR_VAR 0 42
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23050: LD_ADDR_VAR 0 43
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 2
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23090: LD_ADDR_VAR 0 44
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23131: LD_ADDR_VAR 0 45
23135: PUSH
23136: LD_INT 2
23138: NEG
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 3
23160: NEG
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23175: LD_ADDR_VAR 0 46
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 2
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 3
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 3
23206: NEG
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23221: LD_ADDR_VAR 0 47
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 3
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 3
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23254: LD_ADDR_VAR 0 48
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23285: LD_ADDR_VAR 0 49
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23314: LD_ADDR_VAR 0 50
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 3
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23343: LD_ADDR_VAR 0 51
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23374: LD_ADDR_VAR 0 52
23378: PUSH
23379: LD_INT 3
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 3
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23407: LD_ADDR_VAR 0 53
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 3
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 3
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 2
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23451: LD_ADDR_VAR 0 54
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 1
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 3
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23492: LD_ADDR_VAR 0 55
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23532: LD_ADDR_VAR 0 56
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23573: LD_ADDR_VAR 0 57
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: NEG
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 3
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23617: LD_ADDR_VAR 0 58
23621: PUSH
23622: LD_INT 2
23624: NEG
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 2
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: LD_INT 3
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23663: LD_ADDR_VAR 0 59
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: LD_INT 2
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23707: LD_ADDR_VAR 0 60
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23748: LD_ADDR_VAR 0 61
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23788: LD_ADDR_VAR 0 62
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23829: LD_ADDR_VAR 0 63
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23873: LD_ADDR_VAR 0 64
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: LD_INT 2
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
// end ; 2 :
23919: GO 27185
23921: LD_INT 2
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 27184
23929: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23930: LD_ADDR_VAR 0 29
23934: PUSH
23935: LD_INT 4
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 4
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 5
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 5
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 3
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 3
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 3
24009: PUSH
24010: LD_INT 2
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 5
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: LD_INT 3
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 4
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: LD_INT 4
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 3
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 4
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 4
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: LD_INT 4
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 5
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 5
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: LD_INT 4
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: LD_INT 5
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 2
24202: NEG
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 3
24213: NEG
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 3
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 4
24269: NEG
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 4
24280: NEG
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 4
24292: NEG
24293: PUSH
24294: LD_INT 2
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: NEG
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 4
24315: NEG
24316: PUSH
24317: LD_INT 4
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 4
24327: NEG
24328: PUSH
24329: LD_INT 5
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: LD_INT 4
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: LD_INT 3
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 4
24363: NEG
24364: PUSH
24365: LD_INT 3
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 5
24375: NEG
24376: PUSH
24377: LD_INT 4
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 5
24387: NEG
24388: PUSH
24389: LD_INT 5
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: NEG
24400: PUSH
24401: LD_INT 5
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 5
24411: NEG
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24468: LD_ADDR_VAR 0 30
24472: PUSH
24473: LD_INT 4
24475: PUSH
24476: LD_INT 4
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 4
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 5
24495: PUSH
24496: LD_INT 4
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 5
24505: PUSH
24506: LD_INT 5
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 4
24515: PUSH
24516: LD_INT 5
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: LD_INT 3
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 5
24545: PUSH
24546: LD_INT 3
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 3
24555: PUSH
24556: LD_INT 5
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 3
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: LD_INT 3
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 4
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 4
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: LD_INT 3
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: LD_INT 4
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 4
24658: NEG
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 4
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 3
24681: NEG
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: NEG
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 4
24703: NEG
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 5
24714: NEG
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 5
24725: NEG
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 5
24737: NEG
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: NEG
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 3
24760: NEG
24761: PUSH
24762: LD_INT 3
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 3
24772: NEG
24773: PUSH
24774: LD_INT 4
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: LD_INT 3
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 4
24820: NEG
24821: PUSH
24822: LD_INT 3
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 4
24832: NEG
24833: PUSH
24834: LD_INT 4
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: LD_INT 4
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 4
24856: NEG
24857: PUSH
24858: LD_INT 2
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: LD_INT 4
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 5
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 4
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 3
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 3
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: LD_INT 4
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 5
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 2
24958: NEG
24959: PUSH
24960: LD_INT 5
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25015: LD_ADDR_VAR 0 31
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 4
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 4
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: LD_INT 5
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: LD_INT 5
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: NEG
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 5
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: NEG
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 3
25126: NEG
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 3
25160: NEG
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 4
25171: NEG
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 4
25182: NEG
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 4
25194: NEG
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 4
25217: NEG
25218: PUSH
25219: LD_INT 4
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 4
25229: NEG
25230: PUSH
25231: LD_INT 5
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 3
25241: NEG
25242: PUSH
25243: LD_INT 4
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 3
25253: NEG
25254: PUSH
25255: LD_INT 3
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 4
25265: NEG
25266: PUSH
25267: LD_INT 3
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 5
25277: NEG
25278: PUSH
25279: LD_INT 4
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 5
25289: NEG
25290: PUSH
25291: LD_INT 5
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: NEG
25302: PUSH
25303: LD_INT 5
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 5
25313: NEG
25314: PUSH
25315: LD_INT 3
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 3
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 4
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 3
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 3
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 4
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: LD_INT 4
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 4
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 4
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 5
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 4
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 3
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 3
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 5
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25565: LD_ADDR_VAR 0 32
25569: PUSH
25570: LD_INT 4
25572: NEG
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 4
25583: NEG
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 3
25595: NEG
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 3
25606: NEG
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 4
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 5
25628: NEG
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 5
25639: NEG
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 5
25651: NEG
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: LD_INT 3
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: NEG
25687: PUSH
25688: LD_INT 4
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 3
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 4
25734: NEG
25735: PUSH
25736: LD_INT 3
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 4
25746: NEG
25747: PUSH
25748: LD_INT 4
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: LD_INT 4
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 4
25770: NEG
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 4
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: LD_INT 5
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 4
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 3
25818: NEG
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 4
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 5
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 2
25861: PUSH
25862: LD_INT 3
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: NEG
25873: PUSH
25874: LD_INT 5
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 4
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 4
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 2
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 4
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 4
25977: PUSH
25978: LD_INT 4
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 4
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: LD_INT 4
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 5
26007: PUSH
26008: LD_INT 5
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 4
26017: PUSH
26018: LD_INT 5
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: LD_INT 4
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 3
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 5
26047: PUSH
26048: LD_INT 3
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 5
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26112: LD_ADDR_VAR 0 33
26116: PUSH
26117: LD_INT 4
26119: NEG
26120: PUSH
26121: LD_INT 4
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 4
26131: NEG
26132: PUSH
26133: LD_INT 5
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 3
26143: NEG
26144: PUSH
26145: LD_INT 4
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 3
26155: NEG
26156: PUSH
26157: LD_INT 3
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 4
26167: NEG
26168: PUSH
26169: LD_INT 3
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 5
26179: NEG
26180: PUSH
26181: LD_INT 4
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 5
26191: NEG
26192: PUSH
26193: LD_INT 5
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: NEG
26204: PUSH
26205: LD_INT 5
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 5
26215: NEG
26216: PUSH
26217: LD_INT 3
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 3
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: LD_INT 4
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 3
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: LD_INT 3
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 4
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: LD_INT 4
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 4
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 4
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 5
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 5
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 4
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 3
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 3
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 5
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 3
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 3
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 4
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 4
26452: PUSH
26453: LD_INT 4
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 3
26462: PUSH
26463: LD_INT 4
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 4
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 4
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 4
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 4
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 5
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 5
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 4
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: PUSH
26585: LD_INT 5
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26650: LD_ADDR_VAR 0 34
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 4
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 5
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 4
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 3
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 3
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: LD_INT 4
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: LD_INT 5
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 3
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: LD_INT 5
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 3
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 4
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 4
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 4
26842: PUSH
26843: LD_INT 2
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 4
26852: PUSH
26853: LD_INT 4
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 4
26862: PUSH
26863: LD_INT 3
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 5
26872: PUSH
26873: LD_INT 4
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 5
26882: PUSH
26883: LD_INT 5
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 4
26892: PUSH
26893: LD_INT 5
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: LD_INT 4
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 3
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 5
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 3
26932: PUSH
26933: LD_INT 5
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: LD_INT 4
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 4
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 3
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 4
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 4
27035: NEG
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 4
27046: NEG
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 3
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 3
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 4
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 5
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 5
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 5
27114: NEG
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 3
27126: NEG
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
// end ; end ;
27182: GO 27185
27184: POP
// case btype of b_depot , b_warehouse :
27185: LD_VAR 0 1
27189: PUSH
27190: LD_INT 0
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27204
27196: LD_INT 1
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27405
27204: POP
// case nation of nation_american :
27205: LD_VAR 0 5
27209: PUSH
27210: LD_INT 1
27212: DOUBLE
27213: EQUAL
27214: IFTRUE 27218
27216: GO 27274
27218: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27219: LD_ADDR_VAR 0 9
27223: PUSH
27224: LD_VAR 0 11
27228: PUSH
27229: LD_VAR 0 12
27233: PUSH
27234: LD_VAR 0 13
27238: PUSH
27239: LD_VAR 0 14
27243: PUSH
27244: LD_VAR 0 15
27248: PUSH
27249: LD_VAR 0 16
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: PUSH
27262: LD_VAR 0 4
27266: PUSH
27267: LD_INT 1
27269: PLUS
27270: ARRAY
27271: ST_TO_ADDR
27272: GO 27403
27274: LD_INT 2
27276: DOUBLE
27277: EQUAL
27278: IFTRUE 27282
27280: GO 27338
27282: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27283: LD_ADDR_VAR 0 9
27287: PUSH
27288: LD_VAR 0 17
27292: PUSH
27293: LD_VAR 0 18
27297: PUSH
27298: LD_VAR 0 19
27302: PUSH
27303: LD_VAR 0 20
27307: PUSH
27308: LD_VAR 0 21
27312: PUSH
27313: LD_VAR 0 22
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: PUSH
27326: LD_VAR 0 4
27330: PUSH
27331: LD_INT 1
27333: PLUS
27334: ARRAY
27335: ST_TO_ADDR
27336: GO 27403
27338: LD_INT 3
27340: DOUBLE
27341: EQUAL
27342: IFTRUE 27346
27344: GO 27402
27346: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27347: LD_ADDR_VAR 0 9
27351: PUSH
27352: LD_VAR 0 23
27356: PUSH
27357: LD_VAR 0 24
27361: PUSH
27362: LD_VAR 0 25
27366: PUSH
27367: LD_VAR 0 26
27371: PUSH
27372: LD_VAR 0 27
27376: PUSH
27377: LD_VAR 0 28
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: PUSH
27390: LD_VAR 0 4
27394: PUSH
27395: LD_INT 1
27397: PLUS
27398: ARRAY
27399: ST_TO_ADDR
27400: GO 27403
27402: POP
27403: GO 27952
27405: LD_INT 2
27407: DOUBLE
27408: EQUAL
27409: IFTRUE 27419
27411: LD_INT 3
27413: DOUBLE
27414: EQUAL
27415: IFTRUE 27419
27417: GO 27475
27419: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27420: LD_ADDR_VAR 0 9
27424: PUSH
27425: LD_VAR 0 29
27429: PUSH
27430: LD_VAR 0 30
27434: PUSH
27435: LD_VAR 0 31
27439: PUSH
27440: LD_VAR 0 32
27444: PUSH
27445: LD_VAR 0 33
27449: PUSH
27450: LD_VAR 0 34
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: PUSH
27463: LD_VAR 0 4
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: ARRAY
27472: ST_TO_ADDR
27473: GO 27952
27475: LD_INT 16
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27531
27481: LD_INT 17
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27531
27487: LD_INT 18
27489: DOUBLE
27490: EQUAL
27491: IFTRUE 27531
27493: LD_INT 19
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27531
27499: LD_INT 20
27501: DOUBLE
27502: EQUAL
27503: IFTRUE 27531
27505: LD_INT 21
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27531
27511: LD_INT 23
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27531
27517: LD_INT 24
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27531
27523: LD_INT 25
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27587
27531: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_VAR 0 35
27541: PUSH
27542: LD_VAR 0 36
27546: PUSH
27547: LD_VAR 0 37
27551: PUSH
27552: LD_VAR 0 38
27556: PUSH
27557: LD_VAR 0 39
27561: PUSH
27562: LD_VAR 0 40
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: PUSH
27575: LD_VAR 0 4
27579: PUSH
27580: LD_INT 1
27582: PLUS
27583: ARRAY
27584: ST_TO_ADDR
27585: GO 27952
27587: LD_INT 6
27589: DOUBLE
27590: EQUAL
27591: IFTRUE 27643
27593: LD_INT 7
27595: DOUBLE
27596: EQUAL
27597: IFTRUE 27643
27599: LD_INT 8
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27643
27605: LD_INT 13
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27643
27611: LD_INT 12
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27643
27617: LD_INT 15
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27643
27623: LD_INT 11
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27643
27629: LD_INT 14
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27643
27635: LD_INT 10
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27699
27643: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27644: LD_ADDR_VAR 0 9
27648: PUSH
27649: LD_VAR 0 41
27653: PUSH
27654: LD_VAR 0 42
27658: PUSH
27659: LD_VAR 0 43
27663: PUSH
27664: LD_VAR 0 44
27668: PUSH
27669: LD_VAR 0 45
27673: PUSH
27674: LD_VAR 0 46
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: LD_VAR 0 4
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: ARRAY
27696: ST_TO_ADDR
27697: GO 27952
27699: LD_INT 36
27701: DOUBLE
27702: EQUAL
27703: IFTRUE 27707
27705: GO 27763
27707: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27708: LD_ADDR_VAR 0 9
27712: PUSH
27713: LD_VAR 0 47
27717: PUSH
27718: LD_VAR 0 48
27722: PUSH
27723: LD_VAR 0 49
27727: PUSH
27728: LD_VAR 0 50
27732: PUSH
27733: LD_VAR 0 51
27737: PUSH
27738: LD_VAR 0 52
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: PUSH
27751: LD_VAR 0 4
27755: PUSH
27756: LD_INT 1
27758: PLUS
27759: ARRAY
27760: ST_TO_ADDR
27761: GO 27952
27763: LD_INT 4
27765: DOUBLE
27766: EQUAL
27767: IFTRUE 27789
27769: LD_INT 5
27771: DOUBLE
27772: EQUAL
27773: IFTRUE 27789
27775: LD_INT 34
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27789
27781: LD_INT 37
27783: DOUBLE
27784: EQUAL
27785: IFTRUE 27789
27787: GO 27845
27789: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27790: LD_ADDR_VAR 0 9
27794: PUSH
27795: LD_VAR 0 53
27799: PUSH
27800: LD_VAR 0 54
27804: PUSH
27805: LD_VAR 0 55
27809: PUSH
27810: LD_VAR 0 56
27814: PUSH
27815: LD_VAR 0 57
27819: PUSH
27820: LD_VAR 0 58
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: LD_VAR 0 4
27837: PUSH
27838: LD_INT 1
27840: PLUS
27841: ARRAY
27842: ST_TO_ADDR
27843: GO 27952
27845: LD_INT 31
27847: DOUBLE
27848: EQUAL
27849: IFTRUE 27895
27851: LD_INT 32
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27895
27857: LD_INT 33
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27895
27863: LD_INT 27
27865: DOUBLE
27866: EQUAL
27867: IFTRUE 27895
27869: LD_INT 26
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27895
27875: LD_INT 28
27877: DOUBLE
27878: EQUAL
27879: IFTRUE 27895
27881: LD_INT 29
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27895
27887: LD_INT 30
27889: DOUBLE
27890: EQUAL
27891: IFTRUE 27895
27893: GO 27951
27895: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27896: LD_ADDR_VAR 0 9
27900: PUSH
27901: LD_VAR 0 59
27905: PUSH
27906: LD_VAR 0 60
27910: PUSH
27911: LD_VAR 0 61
27915: PUSH
27916: LD_VAR 0 62
27920: PUSH
27921: LD_VAR 0 63
27925: PUSH
27926: LD_VAR 0 64
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: PUSH
27939: LD_VAR 0 4
27943: PUSH
27944: LD_INT 1
27946: PLUS
27947: ARRAY
27948: ST_TO_ADDR
27949: GO 27952
27951: POP
// temp_list2 = [ ] ;
27952: LD_ADDR_VAR 0 10
27956: PUSH
27957: EMPTY
27958: ST_TO_ADDR
// for i in temp_list do
27959: LD_ADDR_VAR 0 8
27963: PUSH
27964: LD_VAR 0 9
27968: PUSH
27969: FOR_IN
27970: IFFALSE 28022
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27972: LD_ADDR_VAR 0 10
27976: PUSH
27977: LD_VAR 0 10
27981: PUSH
27982: LD_VAR 0 8
27986: PUSH
27987: LD_INT 1
27989: ARRAY
27990: PUSH
27991: LD_VAR 0 2
27995: PLUS
27996: PUSH
27997: LD_VAR 0 8
28001: PUSH
28002: LD_INT 2
28004: ARRAY
28005: PUSH
28006: LD_VAR 0 3
28010: PLUS
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: EMPTY
28017: LIST
28018: ADD
28019: ST_TO_ADDR
28020: GO 27969
28022: POP
28023: POP
// result = temp_list2 ;
28024: LD_ADDR_VAR 0 7
28028: PUSH
28029: LD_VAR 0 10
28033: ST_TO_ADDR
// end ;
28034: LD_VAR 0 7
28038: RET
// export function EnemyInRange ( unit , dist ) ; begin
28039: LD_INT 0
28041: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 255
28056: PPUSH
28057: LD_VAR 0 1
28061: PPUSH
28062: CALL_OW 250
28066: PPUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 251
28076: PPUSH
28077: LD_VAR 0 2
28081: PPUSH
28082: CALL 3673 0 4
28086: PUSH
28087: LD_INT 4
28089: ARRAY
28090: ST_TO_ADDR
// end ;
28091: LD_VAR 0 3
28095: RET
// export function PlayerSeeMe ( unit ) ; begin
28096: LD_INT 0
28098: PPUSH
// result := See ( your_side , unit ) ;
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: LD_OWVAR 2
28108: PPUSH
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL_OW 292
28118: ST_TO_ADDR
// end ;
28119: LD_VAR 0 2
28123: RET
// export function ReverseDir ( unit ) ; begin
28124: LD_INT 0
28126: PPUSH
// if not unit then
28127: LD_VAR 0 1
28131: NOT
28132: IFFALSE 28136
// exit ;
28134: GO 28182
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28136: LD_ADDR_VAR 0 2
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: LD_INT 4
28146: PUSH
28147: LD_INT 5
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 254
28176: PUSH
28177: LD_INT 1
28179: PLUS
28180: ARRAY
28181: ST_TO_ADDR
// end ;
28182: LD_VAR 0 2
28186: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28187: LD_INT 0
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
// if not hexes then
28194: LD_VAR 0 2
28198: NOT
28199: IFFALSE 28203
// exit ;
28201: GO 28351
// dist := 9999 ;
28203: LD_ADDR_VAR 0 5
28207: PUSH
28208: LD_INT 9999
28210: ST_TO_ADDR
// for i = 1 to hexes do
28211: LD_ADDR_VAR 0 4
28215: PUSH
28216: DOUBLE
28217: LD_INT 1
28219: DEC
28220: ST_TO_ADDR
28221: LD_VAR 0 2
28225: PUSH
28226: FOR_TO
28227: IFFALSE 28339
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_VAR 0 2
28238: PUSH
28239: LD_VAR 0 4
28243: ARRAY
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: LD_VAR 0 2
28253: PUSH
28254: LD_VAR 0 4
28258: ARRAY
28259: PUSH
28260: LD_INT 2
28262: ARRAY
28263: PPUSH
28264: CALL_OW 297
28268: PUSH
28269: LD_VAR 0 5
28273: LESS
28274: IFFALSE 28337
// begin hex := hexes [ i ] ;
28276: LD_ADDR_VAR 0 7
28280: PUSH
28281: LD_VAR 0 2
28285: PUSH
28286: LD_VAR 0 4
28290: ARRAY
28291: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28292: LD_ADDR_VAR 0 5
28296: PUSH
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_VAR 0 2
28306: PUSH
28307: LD_VAR 0 4
28311: ARRAY
28312: PUSH
28313: LD_INT 1
28315: ARRAY
28316: PPUSH
28317: LD_VAR 0 2
28321: PUSH
28322: LD_VAR 0 4
28326: ARRAY
28327: PUSH
28328: LD_INT 2
28330: ARRAY
28331: PPUSH
28332: CALL_OW 297
28336: ST_TO_ADDR
// end ; end ;
28337: GO 28226
28339: POP
28340: POP
// result := hex ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_VAR 0 7
28350: ST_TO_ADDR
// end ;
28351: LD_VAR 0 3
28355: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28356: LD_INT 0
28358: PPUSH
28359: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28360: LD_VAR 0 1
28364: NOT
28365: PUSH
28366: LD_VAR 0 1
28370: PUSH
28371: LD_INT 21
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 23
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 69
28399: IN
28400: NOT
28401: OR
28402: IFFALSE 28406
// exit ;
28404: GO 28453
// for i = 1 to 3 do
28406: LD_ADDR_VAR 0 3
28410: PUSH
28411: DOUBLE
28412: LD_INT 1
28414: DEC
28415: ST_TO_ADDR
28416: LD_INT 3
28418: PUSH
28419: FOR_TO
28420: IFFALSE 28451
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28422: LD_VAR 0 1
28426: PPUSH
28427: CALL_OW 250
28431: PPUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 251
28441: PPUSH
28442: LD_INT 1
28444: PPUSH
28445: CALL_OW 453
28449: GO 28419
28451: POP
28452: POP
// end ;
28453: LD_VAR 0 2
28457: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28466: LD_VAR 0 1
28470: NOT
28471: PUSH
28472: LD_VAR 0 2
28476: NOT
28477: OR
28478: PUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: CALL_OW 314
28488: OR
28489: IFFALSE 28493
// exit ;
28491: GO 28934
// x := GetX ( enemy_unit ) ;
28493: LD_ADDR_VAR 0 7
28497: PUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: CALL_OW 250
28507: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28508: LD_ADDR_VAR 0 8
28512: PUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: CALL_OW 251
28522: ST_TO_ADDR
// if not x or not y then
28523: LD_VAR 0 7
28527: NOT
28528: PUSH
28529: LD_VAR 0 8
28533: NOT
28534: OR
28535: IFFALSE 28539
// exit ;
28537: GO 28934
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28539: LD_ADDR_VAR 0 6
28543: PUSH
28544: LD_VAR 0 7
28548: PPUSH
28549: LD_INT 0
28551: PPUSH
28552: LD_INT 4
28554: PPUSH
28555: CALL_OW 272
28559: PUSH
28560: LD_VAR 0 8
28564: PPUSH
28565: LD_INT 0
28567: PPUSH
28568: LD_INT 4
28570: PPUSH
28571: CALL_OW 273
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_VAR 0 7
28584: PPUSH
28585: LD_INT 1
28587: PPUSH
28588: LD_INT 4
28590: PPUSH
28591: CALL_OW 272
28595: PUSH
28596: LD_VAR 0 8
28600: PPUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_INT 4
28606: PPUSH
28607: CALL_OW 273
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_VAR 0 7
28620: PPUSH
28621: LD_INT 2
28623: PPUSH
28624: LD_INT 4
28626: PPUSH
28627: CALL_OW 272
28631: PUSH
28632: LD_VAR 0 8
28636: PPUSH
28637: LD_INT 2
28639: PPUSH
28640: LD_INT 4
28642: PPUSH
28643: CALL_OW 273
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_VAR 0 7
28656: PPUSH
28657: LD_INT 3
28659: PPUSH
28660: LD_INT 4
28662: PPUSH
28663: CALL_OW 272
28667: PUSH
28668: LD_VAR 0 8
28672: PPUSH
28673: LD_INT 3
28675: PPUSH
28676: LD_INT 4
28678: PPUSH
28679: CALL_OW 273
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_VAR 0 7
28692: PPUSH
28693: LD_INT 4
28695: PPUSH
28696: LD_INT 4
28698: PPUSH
28699: CALL_OW 272
28703: PUSH
28704: LD_VAR 0 8
28708: PPUSH
28709: LD_INT 4
28711: PPUSH
28712: LD_INT 4
28714: PPUSH
28715: CALL_OW 273
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_VAR 0 7
28728: PPUSH
28729: LD_INT 5
28731: PPUSH
28732: LD_INT 4
28734: PPUSH
28735: CALL_OW 272
28739: PUSH
28740: LD_VAR 0 8
28744: PPUSH
28745: LD_INT 5
28747: PPUSH
28748: LD_INT 4
28750: PPUSH
28751: CALL_OW 273
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// for i = tmp downto 1 do
28768: LD_ADDR_VAR 0 4
28772: PUSH
28773: DOUBLE
28774: LD_VAR 0 6
28778: INC
28779: ST_TO_ADDR
28780: LD_INT 1
28782: PUSH
28783: FOR_DOWNTO
28784: IFFALSE 28885
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28786: LD_VAR 0 6
28790: PUSH
28791: LD_VAR 0 4
28795: ARRAY
28796: PUSH
28797: LD_INT 1
28799: ARRAY
28800: PPUSH
28801: LD_VAR 0 6
28805: PUSH
28806: LD_VAR 0 4
28810: ARRAY
28811: PUSH
28812: LD_INT 2
28814: ARRAY
28815: PPUSH
28816: CALL_OW 488
28820: NOT
28821: PUSH
28822: LD_VAR 0 6
28826: PUSH
28827: LD_VAR 0 4
28831: ARRAY
28832: PUSH
28833: LD_INT 1
28835: ARRAY
28836: PPUSH
28837: LD_VAR 0 6
28841: PUSH
28842: LD_VAR 0 4
28846: ARRAY
28847: PUSH
28848: LD_INT 2
28850: ARRAY
28851: PPUSH
28852: CALL_OW 428
28856: PUSH
28857: LD_INT 0
28859: NONEQUAL
28860: OR
28861: IFFALSE 28883
// tmp := Delete ( tmp , i ) ;
28863: LD_ADDR_VAR 0 6
28867: PUSH
28868: LD_VAR 0 6
28872: PPUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: CALL_OW 3
28882: ST_TO_ADDR
28883: GO 28783
28885: POP
28886: POP
// j := GetClosestHex ( unit , tmp ) ;
28887: LD_ADDR_VAR 0 5
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: LD_VAR 0 6
28901: PPUSH
28902: CALL 28187 0 2
28906: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28907: LD_VAR 0 1
28911: PPUSH
28912: LD_VAR 0 5
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: LD_VAR 0 5
28925: PUSH
28926: LD_INT 2
28928: ARRAY
28929: PPUSH
28930: CALL_OW 111
// end ;
28934: LD_VAR 0 3
28938: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
// uc_side = 0 ;
28945: LD_ADDR_OWVAR 20
28949: PUSH
28950: LD_INT 0
28952: ST_TO_ADDR
// uc_nation = 0 ;
28953: LD_ADDR_OWVAR 21
28957: PUSH
28958: LD_INT 0
28960: ST_TO_ADDR
// nat_area := natureArea ;
28961: LD_ADDR_VAR 0 4
28965: PUSH
28966: LD_INT 18
28968: ST_TO_ADDR
// InitHc ;
28969: CALL_OW 19
// for i = 1 to 4 do
28973: LD_ADDR_VAR 0 2
28977: PUSH
28978: DOUBLE
28979: LD_INT 1
28981: DEC
28982: ST_TO_ADDR
28983: LD_INT 4
28985: PUSH
28986: FOR_TO
28987: IFFALSE 29034
// begin hc_class = 18 ;
28989: LD_ADDR_OWVAR 28
28993: PUSH
28994: LD_INT 18
28996: ST_TO_ADDR
// hc_gallery =  ;
28997: LD_ADDR_OWVAR 33
29001: PUSH
29002: LD_STRING 
29004: ST_TO_ADDR
// animal := CreateHuman ;
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: CALL_OW 44
29014: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29015: LD_VAR 0 3
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: LD_INT 0
29027: PPUSH
29028: CALL_OW 49
// end ;
29032: GO 28986
29034: POP
29035: POP
// for i = 1 to 3 do
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: DOUBLE
29042: LD_INT 1
29044: DEC
29045: ST_TO_ADDR
29046: LD_INT 3
29048: PUSH
29049: FOR_TO
29050: IFFALSE 29114
// begin hc_class = class_tiger ;
29052: LD_ADDR_OWVAR 28
29056: PUSH
29057: LD_INT 14
29059: ST_TO_ADDR
// hc_gallery =  ;
29060: LD_ADDR_OWVAR 33
29064: PUSH
29065: LD_STRING 
29067: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29068: LD_ADDR_OWVAR 35
29072: PUSH
29073: LD_INT 5
29075: NEG
29076: PPUSH
29077: LD_INT 5
29079: PPUSH
29080: CALL_OW 12
29084: ST_TO_ADDR
// animal := CreateHuman ;
29085: LD_ADDR_VAR 0 3
29089: PUSH
29090: CALL_OW 44
29094: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29095: LD_VAR 0 3
29099: PPUSH
29100: LD_VAR 0 4
29104: PPUSH
29105: LD_INT 0
29107: PPUSH
29108: CALL_OW 49
// end ;
29112: GO 29049
29114: POP
29115: POP
// for i = 1 to 5 do
29116: LD_ADDR_VAR 0 2
29120: PUSH
29121: DOUBLE
29122: LD_INT 1
29124: DEC
29125: ST_TO_ADDR
29126: LD_INT 5
29128: PUSH
29129: FOR_TO
29130: IFFALSE 29233
// begin hc_class = class_apeman ;
29132: LD_ADDR_OWVAR 28
29136: PUSH
29137: LD_INT 12
29139: ST_TO_ADDR
// hc_gallery =  ;
29140: LD_ADDR_OWVAR 33
29144: PUSH
29145: LD_STRING 
29147: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29148: LD_ADDR_OWVAR 35
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PPUSH
29157: LD_INT 2
29159: PPUSH
29160: CALL_OW 12
29164: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29165: LD_ADDR_OWVAR 31
29169: PUSH
29170: LD_INT 1
29172: PPUSH
29173: LD_INT 3
29175: PPUSH
29176: CALL_OW 12
29180: PUSH
29181: LD_INT 1
29183: PPUSH
29184: LD_INT 3
29186: PPUSH
29187: CALL_OW 12
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: ST_TO_ADDR
// animal := CreateHuman ;
29204: LD_ADDR_VAR 0 3
29208: PUSH
29209: CALL_OW 44
29213: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29214: LD_VAR 0 3
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_INT 0
29226: PPUSH
29227: CALL_OW 49
// end ;
29231: GO 29129
29233: POP
29234: POP
// for i = 1 to 3 do
29235: LD_ADDR_VAR 0 2
29239: PUSH
29240: DOUBLE
29241: LD_INT 1
29243: DEC
29244: ST_TO_ADDR
29245: LD_INT 3
29247: PUSH
29248: FOR_TO
29249: IFFALSE 29296
// begin hc_class = 13 ;
29251: LD_ADDR_OWVAR 28
29255: PUSH
29256: LD_INT 13
29258: ST_TO_ADDR
// hc_gallery =  ;
29259: LD_ADDR_OWVAR 33
29263: PUSH
29264: LD_STRING 
29266: ST_TO_ADDR
// animal := CreateHuman ;
29267: LD_ADDR_VAR 0 3
29271: PUSH
29272: CALL_OW 44
29276: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29277: LD_VAR 0 3
29281: PPUSH
29282: LD_VAR 0 4
29286: PPUSH
29287: LD_INT 0
29289: PPUSH
29290: CALL_OW 49
// end ;
29294: GO 29248
29296: POP
29297: POP
// for i = 1 to 7 do
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: DOUBLE
29304: LD_INT 1
29306: DEC
29307: ST_TO_ADDR
29308: LD_INT 7
29310: PUSH
29311: FOR_TO
29312: IFFALSE 29357
// begin hc_class = 20 ;
29314: LD_ADDR_OWVAR 28
29318: PUSH
29319: LD_INT 20
29321: ST_TO_ADDR
// hc_gallery =  ;
29322: LD_ADDR_OWVAR 33
29326: PUSH
29327: LD_STRING 
29329: ST_TO_ADDR
// animal := CreateHuman ;
29330: LD_ADDR_VAR 0 3
29334: PUSH
29335: CALL_OW 44
29339: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29340: LD_VAR 0 3
29344: PPUSH
29345: LD_INT 19
29347: PPUSH
29348: LD_INT 0
29350: PPUSH
29351: CALL_OW 49
// end ;
29355: GO 29311
29357: POP
29358: POP
// end ;
29359: LD_VAR 0 1
29363: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29364: LD_INT 0
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
29391: PPUSH
29392: PPUSH
29393: PPUSH
// if not list then
29394: LD_VAR 0 1
29398: NOT
29399: IFFALSE 29403
// exit ;
29401: GO 32596
// base := list [ 1 ] ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_VAR 0 1
29412: PUSH
29413: LD_INT 1
29415: ARRAY
29416: ST_TO_ADDR
// group := list [ 2 ] ;
29417: LD_ADDR_VAR 0 4
29421: PUSH
29422: LD_VAR 0 1
29426: PUSH
29427: LD_INT 2
29429: ARRAY
29430: ST_TO_ADDR
// path := list [ 3 ] ;
29431: LD_ADDR_VAR 0 5
29435: PUSH
29436: LD_VAR 0 1
29440: PUSH
29441: LD_INT 3
29443: ARRAY
29444: ST_TO_ADDR
// flags := list [ 4 ] ;
29445: LD_ADDR_VAR 0 6
29449: PUSH
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 4
29457: ARRAY
29458: ST_TO_ADDR
// mined := [ ] ;
29459: LD_ADDR_VAR 0 27
29463: PUSH
29464: EMPTY
29465: ST_TO_ADDR
// bombed := [ ] ;
29466: LD_ADDR_VAR 0 28
29470: PUSH
29471: EMPTY
29472: ST_TO_ADDR
// if not group or not path then
29473: LD_VAR 0 4
29477: NOT
29478: PUSH
29479: LD_VAR 0 5
29483: NOT
29484: OR
29485: IFFALSE 29489
// exit ;
29487: GO 32596
// if flags then
29489: LD_VAR 0 6
29493: IFFALSE 29637
// begin f_ignore_area := flags [ 1 ] ;
29495: LD_ADDR_VAR 0 17
29499: PUSH
29500: LD_VAR 0 6
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29509: LD_ADDR_VAR 0 18
29513: PUSH
29514: LD_VAR 0 6
29518: PUSH
29519: LD_INT 2
29521: ARRAY
29522: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29523: LD_ADDR_VAR 0 19
29527: PUSH
29528: LD_VAR 0 6
29532: PUSH
29533: LD_INT 3
29535: ARRAY
29536: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29537: LD_ADDR_VAR 0 20
29541: PUSH
29542: LD_VAR 0 6
29546: PUSH
29547: LD_INT 4
29549: ARRAY
29550: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29551: LD_ADDR_VAR 0 21
29555: PUSH
29556: LD_VAR 0 6
29560: PUSH
29561: LD_INT 5
29563: ARRAY
29564: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29565: LD_ADDR_VAR 0 22
29569: PUSH
29570: LD_VAR 0 6
29574: PUSH
29575: LD_INT 6
29577: ARRAY
29578: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29579: LD_ADDR_VAR 0 23
29583: PUSH
29584: LD_VAR 0 6
29588: PUSH
29589: LD_INT 7
29591: ARRAY
29592: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29593: LD_ADDR_VAR 0 24
29597: PUSH
29598: LD_VAR 0 6
29602: PUSH
29603: LD_INT 8
29605: ARRAY
29606: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29607: LD_ADDR_VAR 0 25
29611: PUSH
29612: LD_VAR 0 6
29616: PUSH
29617: LD_INT 9
29619: ARRAY
29620: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29621: LD_ADDR_VAR 0 26
29625: PUSH
29626: LD_VAR 0 6
29630: PUSH
29631: LD_INT 10
29633: ARRAY
29634: ST_TO_ADDR
// end else
29635: GO 29717
// begin f_ignore_area := false ;
29637: LD_ADDR_VAR 0 17
29641: PUSH
29642: LD_INT 0
29644: ST_TO_ADDR
// f_capture := false ;
29645: LD_ADDR_VAR 0 18
29649: PUSH
29650: LD_INT 0
29652: ST_TO_ADDR
// f_ignore_civ := false ;
29653: LD_ADDR_VAR 0 19
29657: PUSH
29658: LD_INT 0
29660: ST_TO_ADDR
// f_murder := false ;
29661: LD_ADDR_VAR 0 20
29665: PUSH
29666: LD_INT 0
29668: ST_TO_ADDR
// f_mines := false ;
29669: LD_ADDR_VAR 0 21
29673: PUSH
29674: LD_INT 0
29676: ST_TO_ADDR
// f_repair := false ;
29677: LD_ADDR_VAR 0 22
29681: PUSH
29682: LD_INT 0
29684: ST_TO_ADDR
// f_heal := false ;
29685: LD_ADDR_VAR 0 23
29689: PUSH
29690: LD_INT 0
29692: ST_TO_ADDR
// f_spacetime := false ;
29693: LD_ADDR_VAR 0 24
29697: PUSH
29698: LD_INT 0
29700: ST_TO_ADDR
// f_attack_depot := false ;
29701: LD_ADDR_VAR 0 25
29705: PUSH
29706: LD_INT 0
29708: ST_TO_ADDR
// f_crawl := false ;
29709: LD_ADDR_VAR 0 26
29713: PUSH
29714: LD_INT 0
29716: ST_TO_ADDR
// end ; units_path := [ ] ;
29717: LD_ADDR_VAR 0 16
29721: PUSH
29722: EMPTY
29723: ST_TO_ADDR
// for i = 1 to group do
29724: LD_ADDR_VAR 0 7
29728: PUSH
29729: DOUBLE
29730: LD_INT 1
29732: DEC
29733: ST_TO_ADDR
29734: LD_VAR 0 4
29738: PUSH
29739: FOR_TO
29740: IFFALSE 29769
// begin units_path := Replace ( units_path , i , path ) ;
29742: LD_ADDR_VAR 0 16
29746: PUSH
29747: LD_VAR 0 16
29751: PPUSH
29752: LD_VAR 0 7
29756: PPUSH
29757: LD_VAR 0 5
29761: PPUSH
29762: CALL_OW 1
29766: ST_TO_ADDR
// end ;
29767: GO 29739
29769: POP
29770: POP
// repeat for i = group downto 1 do
29771: LD_ADDR_VAR 0 7
29775: PUSH
29776: DOUBLE
29777: LD_VAR 0 4
29781: INC
29782: ST_TO_ADDR
29783: LD_INT 1
29785: PUSH
29786: FOR_DOWNTO
29787: IFFALSE 32578
// begin tmp := [ ] ;
29789: LD_ADDR_VAR 0 14
29793: PUSH
29794: EMPTY
29795: ST_TO_ADDR
// attacking := false ;
29796: LD_ADDR_VAR 0 29
29800: PUSH
29801: LD_INT 0
29803: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29804: LD_VAR 0 4
29808: PUSH
29809: LD_VAR 0 7
29813: ARRAY
29814: PPUSH
29815: CALL_OW 301
29819: PUSH
29820: LD_VAR 0 4
29824: PUSH
29825: LD_VAR 0 7
29829: ARRAY
29830: NOT
29831: OR
29832: IFFALSE 29876
// begin group := Delete ( group , i ) ;
29834: LD_ADDR_VAR 0 4
29838: PUSH
29839: LD_VAR 0 4
29843: PPUSH
29844: LD_VAR 0 7
29848: PPUSH
29849: CALL_OW 3
29853: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29854: LD_ADDR_VAR 0 16
29858: PUSH
29859: LD_VAR 0 16
29863: PPUSH
29864: LD_VAR 0 7
29868: PPUSH
29869: CALL_OW 3
29873: ST_TO_ADDR
// continue ;
29874: GO 29786
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29876: LD_VAR 0 4
29880: PUSH
29881: LD_VAR 0 7
29885: ARRAY
29886: PPUSH
29887: LD_INT 10
29889: PPUSH
29890: CALL 28039 0 2
29894: NOT
29895: PUSH
29896: LD_VAR 0 16
29900: PUSH
29901: LD_VAR 0 7
29905: ARRAY
29906: PUSH
29907: EMPTY
29908: EQUAL
29909: NOT
29910: AND
29911: IFFALSE 30195
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29913: LD_VAR 0 4
29917: PUSH
29918: LD_VAR 0 7
29922: ARRAY
29923: PPUSH
29924: CALL_OW 262
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: IN
29939: IFFALSE 29998
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29941: LD_VAR 0 4
29945: PUSH
29946: LD_VAR 0 7
29950: ARRAY
29951: PPUSH
29952: CALL_OW 261
29956: PUSH
29957: LD_INT 10
29959: LESS
29960: PUSH
29961: LD_VAR 0 4
29965: PUSH
29966: LD_VAR 0 7
29970: ARRAY
29971: PPUSH
29972: CALL 28096 0 1
29976: NOT
29977: AND
29978: IFFALSE 29998
// SetFuel ( group [ i ] , 12 ) ;
29980: LD_VAR 0 4
29984: PUSH
29985: LD_VAR 0 7
29989: ARRAY
29990: PPUSH
29991: LD_INT 12
29993: PPUSH
29994: CALL_OW 240
// if units_path [ i ] then
29998: LD_VAR 0 16
30002: PUSH
30003: LD_VAR 0 7
30007: ARRAY
30008: IFFALSE 30193
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30010: LD_VAR 0 4
30014: PUSH
30015: LD_VAR 0 7
30019: ARRAY
30020: PPUSH
30021: LD_VAR 0 16
30025: PUSH
30026: LD_VAR 0 7
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 16
30044: PUSH
30045: LD_VAR 0 7
30049: ARRAY
30050: PUSH
30051: LD_INT 1
30053: ARRAY
30054: PUSH
30055: LD_INT 2
30057: ARRAY
30058: PPUSH
30059: CALL_OW 297
30063: PUSH
30064: LD_INT 6
30066: GREATER
30067: IFFALSE 30142
// begin if not HasTask ( group [ i ] ) then
30069: LD_VAR 0 4
30073: PUSH
30074: LD_VAR 0 7
30078: ARRAY
30079: PPUSH
30080: CALL_OW 314
30084: NOT
30085: IFFALSE 30140
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30087: LD_VAR 0 4
30091: PUSH
30092: LD_VAR 0 7
30096: ARRAY
30097: PPUSH
30098: LD_VAR 0 16
30102: PUSH
30103: LD_VAR 0 7
30107: ARRAY
30108: PUSH
30109: LD_INT 1
30111: ARRAY
30112: PUSH
30113: LD_INT 1
30115: ARRAY
30116: PPUSH
30117: LD_VAR 0 16
30121: PUSH
30122: LD_VAR 0 7
30126: ARRAY
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PUSH
30132: LD_INT 2
30134: ARRAY
30135: PPUSH
30136: CALL_OW 114
// end else
30140: GO 30193
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30142: LD_ADDR_VAR 0 15
30146: PUSH
30147: LD_VAR 0 16
30151: PUSH
30152: LD_VAR 0 7
30156: ARRAY
30157: PPUSH
30158: LD_INT 1
30160: PPUSH
30161: CALL_OW 3
30165: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30166: LD_ADDR_VAR 0 16
30170: PUSH
30171: LD_VAR 0 16
30175: PPUSH
30176: LD_VAR 0 7
30180: PPUSH
30181: LD_VAR 0 15
30185: PPUSH
30186: CALL_OW 1
30190: ST_TO_ADDR
// continue ;
30191: GO 29786
// end ; end ; end else
30193: GO 32576
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30195: LD_ADDR_VAR 0 14
30199: PUSH
30200: LD_INT 81
30202: PUSH
30203: LD_VAR 0 4
30207: PUSH
30208: LD_VAR 0 7
30212: ARRAY
30213: PPUSH
30214: CALL_OW 255
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PPUSH
30223: CALL_OW 69
30227: ST_TO_ADDR
// if not tmp then
30228: LD_VAR 0 14
30232: NOT
30233: IFFALSE 30237
// continue ;
30235: GO 29786
// if f_ignore_area then
30237: LD_VAR 0 17
30241: IFFALSE 30329
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30243: LD_ADDR_VAR 0 15
30247: PUSH
30248: LD_VAR 0 14
30252: PPUSH
30253: LD_INT 3
30255: PUSH
30256: LD_INT 92
30258: PUSH
30259: LD_VAR 0 17
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PUSH
30268: LD_VAR 0 17
30272: PUSH
30273: LD_INT 2
30275: ARRAY
30276: PUSH
30277: LD_VAR 0 17
30281: PUSH
30282: LD_INT 3
30284: ARRAY
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL_OW 72
30300: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30301: LD_VAR 0 14
30305: PUSH
30306: LD_VAR 0 15
30310: DIFF
30311: IFFALSE 30329
// tmp := tmp diff tmp2 ;
30313: LD_ADDR_VAR 0 14
30317: PUSH
30318: LD_VAR 0 14
30322: PUSH
30323: LD_VAR 0 15
30327: DIFF
30328: ST_TO_ADDR
// end ; if not f_murder then
30329: LD_VAR 0 20
30333: NOT
30334: IFFALSE 30392
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30336: LD_ADDR_VAR 0 15
30340: PUSH
30341: LD_VAR 0 14
30345: PPUSH
30346: LD_INT 3
30348: PUSH
30349: LD_INT 50
30351: PUSH
30352: EMPTY
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PPUSH
30359: CALL_OW 72
30363: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30364: LD_VAR 0 14
30368: PUSH
30369: LD_VAR 0 15
30373: DIFF
30374: IFFALSE 30392
// tmp := tmp diff tmp2 ;
30376: LD_ADDR_VAR 0 14
30380: PUSH
30381: LD_VAR 0 14
30385: PUSH
30386: LD_VAR 0 15
30390: DIFF
30391: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30392: LD_ADDR_VAR 0 14
30396: PUSH
30397: LD_VAR 0 4
30401: PUSH
30402: LD_VAR 0 7
30406: ARRAY
30407: PPUSH
30408: LD_VAR 0 14
30412: PPUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_INT 1
30418: PPUSH
30419: CALL 3212 0 4
30423: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30424: LD_VAR 0 4
30428: PUSH
30429: LD_VAR 0 7
30433: ARRAY
30434: PPUSH
30435: CALL_OW 257
30439: PUSH
30440: LD_INT 1
30442: EQUAL
30443: IFFALSE 30870
// begin if WantPlant ( group [ i ] ) then
30445: LD_VAR 0 4
30449: PUSH
30450: LD_VAR 0 7
30454: ARRAY
30455: PPUSH
30456: CALL 2680 0 1
30460: IFFALSE 30464
// continue ;
30462: GO 29786
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30464: LD_VAR 0 18
30468: PUSH
30469: LD_VAR 0 4
30473: PUSH
30474: LD_VAR 0 7
30478: ARRAY
30479: PPUSH
30480: CALL_OW 310
30484: NOT
30485: AND
30486: PUSH
30487: LD_VAR 0 14
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PUSH
30496: LD_VAR 0 14
30500: PPUSH
30501: LD_INT 21
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 58
30513: PUSH
30514: EMPTY
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PPUSH
30521: CALL_OW 72
30525: IN
30526: AND
30527: IFFALSE 30563
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30529: LD_VAR 0 4
30533: PUSH
30534: LD_VAR 0 7
30538: ARRAY
30539: PPUSH
30540: LD_VAR 0 14
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 120
// attacking := true ;
30553: LD_ADDR_VAR 0 29
30557: PUSH
30558: LD_INT 1
30560: ST_TO_ADDR
// continue ;
30561: GO 29786
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30563: LD_VAR 0 26
30567: PUSH
30568: LD_VAR 0 4
30572: PUSH
30573: LD_VAR 0 7
30577: ARRAY
30578: PPUSH
30579: CALL_OW 256
30583: PUSH
30584: LD_INT 800
30586: LESS
30587: AND
30588: PUSH
30589: LD_VAR 0 4
30593: PUSH
30594: LD_VAR 0 7
30598: ARRAY
30599: PPUSH
30600: CALL_OW 318
30604: NOT
30605: AND
30606: IFFALSE 30623
// ComCrawl ( group [ i ] ) ;
30608: LD_VAR 0 4
30612: PUSH
30613: LD_VAR 0 7
30617: ARRAY
30618: PPUSH
30619: CALL_OW 137
// if f_mines then
30623: LD_VAR 0 21
30627: IFFALSE 30870
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30629: LD_VAR 0 14
30633: PUSH
30634: LD_INT 1
30636: ARRAY
30637: PPUSH
30638: CALL_OW 247
30642: PUSH
30643: LD_INT 3
30645: EQUAL
30646: PUSH
30647: LD_VAR 0 14
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PUSH
30656: LD_VAR 0 27
30660: IN
30661: NOT
30662: AND
30663: IFFALSE 30870
// begin x := GetX ( tmp [ 1 ] ) ;
30665: LD_ADDR_VAR 0 10
30669: PUSH
30670: LD_VAR 0 14
30674: PUSH
30675: LD_INT 1
30677: ARRAY
30678: PPUSH
30679: CALL_OW 250
30683: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30684: LD_ADDR_VAR 0 11
30688: PUSH
30689: LD_VAR 0 14
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: CALL_OW 251
30702: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30703: LD_ADDR_VAR 0 12
30707: PUSH
30708: LD_VAR 0 4
30712: PUSH
30713: LD_VAR 0 7
30717: ARRAY
30718: PPUSH
30719: CALL 28124 0 1
30723: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30724: LD_VAR 0 4
30728: PUSH
30729: LD_VAR 0 7
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 10
30739: PPUSH
30740: LD_VAR 0 11
30744: PPUSH
30745: LD_VAR 0 14
30749: PUSH
30750: LD_INT 1
30752: ARRAY
30753: PPUSH
30754: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30758: LD_VAR 0 4
30762: PUSH
30763: LD_VAR 0 7
30767: ARRAY
30768: PPUSH
30769: LD_VAR 0 10
30773: PPUSH
30774: LD_VAR 0 12
30778: PPUSH
30779: LD_INT 7
30781: PPUSH
30782: CALL_OW 272
30786: PPUSH
30787: LD_VAR 0 11
30791: PPUSH
30792: LD_VAR 0 12
30796: PPUSH
30797: LD_INT 7
30799: PPUSH
30800: CALL_OW 273
30804: PPUSH
30805: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
30809: LD_VAR 0 4
30813: PUSH
30814: LD_VAR 0 7
30818: ARRAY
30819: PPUSH
30820: LD_INT 71
30822: PPUSH
30823: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30827: LD_ADDR_VAR 0 27
30831: PUSH
30832: LD_VAR 0 27
30836: PPUSH
30837: LD_VAR 0 27
30841: PUSH
30842: LD_INT 1
30844: PLUS
30845: PPUSH
30846: LD_VAR 0 14
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PPUSH
30855: CALL_OW 1
30859: ST_TO_ADDR
// attacking := true ;
30860: LD_ADDR_VAR 0 29
30864: PUSH
30865: LD_INT 1
30867: ST_TO_ADDR
// continue ;
30868: GO 29786
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30870: LD_VAR 0 4
30874: PUSH
30875: LD_VAR 0 7
30879: ARRAY
30880: PPUSH
30881: CALL_OW 257
30885: PUSH
30886: LD_INT 17
30888: EQUAL
30889: IFFALSE 31017
// begin attacking := false ;
30891: LD_ADDR_VAR 0 29
30895: PUSH
30896: LD_INT 0
30898: ST_TO_ADDR
// k := 5 ;
30899: LD_ADDR_VAR 0 9
30903: PUSH
30904: LD_INT 5
30906: ST_TO_ADDR
// if tmp < k then
30907: LD_VAR 0 14
30911: PUSH
30912: LD_VAR 0 9
30916: LESS
30917: IFFALSE 30929
// k := tmp ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_VAR 0 14
30928: ST_TO_ADDR
// for j = 1 to k do
30929: LD_ADDR_VAR 0 8
30933: PUSH
30934: DOUBLE
30935: LD_INT 1
30937: DEC
30938: ST_TO_ADDR
30939: LD_VAR 0 9
30943: PUSH
30944: FOR_TO
30945: IFFALSE 31015
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30947: LD_VAR 0 14
30951: PUSH
30952: LD_VAR 0 8
30956: ARRAY
30957: PUSH
30958: LD_VAR 0 14
30962: PPUSH
30963: LD_INT 58
30965: PUSH
30966: EMPTY
30967: LIST
30968: PPUSH
30969: CALL_OW 72
30973: IN
30974: NOT
30975: IFFALSE 31013
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30977: LD_VAR 0 4
30981: PUSH
30982: LD_VAR 0 7
30986: ARRAY
30987: PPUSH
30988: LD_VAR 0 14
30992: PUSH
30993: LD_VAR 0 8
30997: ARRAY
30998: PPUSH
30999: CALL_OW 115
// attacking := true ;
31003: LD_ADDR_VAR 0 29
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
// continue ;
31011: GO 30944
// end ; end ;
31013: GO 30944
31015: POP
31016: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31017: LD_VAR 0 4
31021: PUSH
31022: LD_VAR 0 7
31026: ARRAY
31027: PPUSH
31028: CALL_OW 257
31032: PUSH
31033: LD_INT 8
31035: EQUAL
31036: PUSH
31037: LD_VAR 0 4
31041: PUSH
31042: LD_VAR 0 7
31046: ARRAY
31047: PPUSH
31048: CALL_OW 264
31052: PUSH
31053: LD_INT 28
31055: PUSH
31056: LD_INT 45
31058: PUSH
31059: LD_INT 7
31061: PUSH
31062: LD_INT 47
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: IN
31071: OR
31072: IFFALSE 31302
// begin attacking := false ;
31074: LD_ADDR_VAR 0 29
31078: PUSH
31079: LD_INT 0
31081: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31082: LD_VAR 0 14
31086: PUSH
31087: LD_INT 1
31089: ARRAY
31090: PPUSH
31091: CALL_OW 266
31095: PUSH
31096: LD_INT 32
31098: PUSH
31099: LD_INT 31
31101: PUSH
31102: LD_INT 33
31104: PUSH
31105: LD_INT 4
31107: PUSH
31108: LD_INT 5
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: IN
31118: IFFALSE 31302
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31120: LD_ADDR_VAR 0 9
31124: PUSH
31125: LD_VAR 0 14
31129: PUSH
31130: LD_INT 1
31132: ARRAY
31133: PPUSH
31134: CALL_OW 266
31138: PPUSH
31139: LD_VAR 0 14
31143: PUSH
31144: LD_INT 1
31146: ARRAY
31147: PPUSH
31148: CALL_OW 250
31152: PPUSH
31153: LD_VAR 0 14
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: PPUSH
31162: CALL_OW 251
31166: PPUSH
31167: LD_VAR 0 14
31171: PUSH
31172: LD_INT 1
31174: ARRAY
31175: PPUSH
31176: CALL_OW 254
31180: PPUSH
31181: LD_VAR 0 14
31185: PUSH
31186: LD_INT 1
31188: ARRAY
31189: PPUSH
31190: CALL_OW 248
31194: PPUSH
31195: LD_INT 0
31197: PPUSH
31198: CALL 9500 0 6
31202: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31203: LD_ADDR_VAR 0 8
31207: PUSH
31208: LD_VAR 0 4
31212: PUSH
31213: LD_VAR 0 7
31217: ARRAY
31218: PPUSH
31219: LD_VAR 0 9
31223: PPUSH
31224: CALL 28187 0 2
31228: ST_TO_ADDR
// if j then
31229: LD_VAR 0 8
31233: IFFALSE 31302
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31235: LD_VAR 0 8
31239: PUSH
31240: LD_INT 1
31242: ARRAY
31243: PPUSH
31244: LD_VAR 0 8
31248: PUSH
31249: LD_INT 2
31251: ARRAY
31252: PPUSH
31253: CALL_OW 488
31257: IFFALSE 31302
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31259: LD_VAR 0 4
31263: PUSH
31264: LD_VAR 0 7
31268: ARRAY
31269: PPUSH
31270: LD_VAR 0 8
31274: PUSH
31275: LD_INT 1
31277: ARRAY
31278: PPUSH
31279: LD_VAR 0 8
31283: PUSH
31284: LD_INT 2
31286: ARRAY
31287: PPUSH
31288: CALL_OW 116
// attacking := true ;
31292: LD_ADDR_VAR 0 29
31296: PUSH
31297: LD_INT 1
31299: ST_TO_ADDR
// continue ;
31300: GO 29786
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31302: LD_VAR 0 4
31306: PUSH
31307: LD_VAR 0 7
31311: ARRAY
31312: PPUSH
31313: CALL_OW 265
31317: PUSH
31318: LD_INT 11
31320: EQUAL
31321: IFFALSE 31599
// begin k := 10 ;
31323: LD_ADDR_VAR 0 9
31327: PUSH
31328: LD_INT 10
31330: ST_TO_ADDR
// x := 0 ;
31331: LD_ADDR_VAR 0 10
31335: PUSH
31336: LD_INT 0
31338: ST_TO_ADDR
// if tmp < k then
31339: LD_VAR 0 14
31343: PUSH
31344: LD_VAR 0 9
31348: LESS
31349: IFFALSE 31361
// k := tmp ;
31351: LD_ADDR_VAR 0 9
31355: PUSH
31356: LD_VAR 0 14
31360: ST_TO_ADDR
// for j = k downto 1 do
31361: LD_ADDR_VAR 0 8
31365: PUSH
31366: DOUBLE
31367: LD_VAR 0 9
31371: INC
31372: ST_TO_ADDR
31373: LD_INT 1
31375: PUSH
31376: FOR_DOWNTO
31377: IFFALSE 31452
// begin if GetType ( tmp [ j ] ) = unit_human then
31379: LD_VAR 0 14
31383: PUSH
31384: LD_VAR 0 8
31388: ARRAY
31389: PPUSH
31390: CALL_OW 247
31394: PUSH
31395: LD_INT 1
31397: EQUAL
31398: IFFALSE 31450
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31400: LD_VAR 0 4
31404: PUSH
31405: LD_VAR 0 7
31409: ARRAY
31410: PPUSH
31411: LD_VAR 0 14
31415: PUSH
31416: LD_VAR 0 8
31420: ARRAY
31421: PPUSH
31422: CALL 28458 0 2
// x := tmp [ j ] ;
31426: LD_ADDR_VAR 0 10
31430: PUSH
31431: LD_VAR 0 14
31435: PUSH
31436: LD_VAR 0 8
31440: ARRAY
31441: ST_TO_ADDR
// attacking := true ;
31442: LD_ADDR_VAR 0 29
31446: PUSH
31447: LD_INT 1
31449: ST_TO_ADDR
// end ; end ;
31450: GO 31376
31452: POP
31453: POP
// if not x then
31454: LD_VAR 0 10
31458: NOT
31459: IFFALSE 31599
// begin attacking := true ;
31461: LD_ADDR_VAR 0 29
31465: PUSH
31466: LD_INT 1
31468: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31469: LD_VAR 0 4
31473: PUSH
31474: LD_VAR 0 7
31478: ARRAY
31479: PPUSH
31480: CALL_OW 250
31484: PPUSH
31485: LD_VAR 0 4
31489: PUSH
31490: LD_VAR 0 7
31494: ARRAY
31495: PPUSH
31496: CALL_OW 251
31500: PPUSH
31501: CALL 1938 0 2
31505: PUSH
31506: LD_INT 2
31508: ARRAY
31509: PUSH
31510: LD_VAR 0 14
31514: PUSH
31515: LD_INT 1
31517: ARRAY
31518: PPUSH
31519: CALL_OW 250
31523: PPUSH
31524: LD_VAR 0 14
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PPUSH
31533: CALL_OW 251
31537: PPUSH
31538: CALL 1938 0 2
31542: PUSH
31543: LD_INT 2
31545: ARRAY
31546: EQUAL
31547: IFFALSE 31575
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31549: LD_VAR 0 4
31553: PUSH
31554: LD_VAR 0 7
31558: ARRAY
31559: PPUSH
31560: LD_VAR 0 14
31564: PUSH
31565: LD_INT 1
31567: ARRAY
31568: PPUSH
31569: CALL 28458 0 2
31573: GO 31599
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31575: LD_VAR 0 4
31579: PUSH
31580: LD_VAR 0 7
31584: ARRAY
31585: PPUSH
31586: LD_VAR 0 14
31590: PUSH
31591: LD_INT 1
31593: ARRAY
31594: PPUSH
31595: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31599: LD_VAR 0 4
31603: PUSH
31604: LD_VAR 0 7
31608: ARRAY
31609: PPUSH
31610: CALL_OW 264
31614: PUSH
31615: LD_INT 29
31617: EQUAL
31618: IFFALSE 31984
// begin if WantsToAttack ( group [ i ] ) in bombed then
31620: LD_VAR 0 4
31624: PUSH
31625: LD_VAR 0 7
31629: ARRAY
31630: PPUSH
31631: CALL_OW 319
31635: PUSH
31636: LD_VAR 0 28
31640: IN
31641: IFFALSE 31645
// continue ;
31643: GO 29786
// k := 8 ;
31645: LD_ADDR_VAR 0 9
31649: PUSH
31650: LD_INT 8
31652: ST_TO_ADDR
// x := 0 ;
31653: LD_ADDR_VAR 0 10
31657: PUSH
31658: LD_INT 0
31660: ST_TO_ADDR
// if tmp < k then
31661: LD_VAR 0 14
31665: PUSH
31666: LD_VAR 0 9
31670: LESS
31671: IFFALSE 31683
// k := tmp ;
31673: LD_ADDR_VAR 0 9
31677: PUSH
31678: LD_VAR 0 14
31682: ST_TO_ADDR
// for j = 1 to k do
31683: LD_ADDR_VAR 0 8
31687: PUSH
31688: DOUBLE
31689: LD_INT 1
31691: DEC
31692: ST_TO_ADDR
31693: LD_VAR 0 9
31697: PUSH
31698: FOR_TO
31699: IFFALSE 31831
// begin if GetType ( tmp [ j ] ) = unit_building then
31701: LD_VAR 0 14
31705: PUSH
31706: LD_VAR 0 8
31710: ARRAY
31711: PPUSH
31712: CALL_OW 247
31716: PUSH
31717: LD_INT 3
31719: EQUAL
31720: IFFALSE 31829
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31722: LD_VAR 0 14
31726: PUSH
31727: LD_VAR 0 8
31731: ARRAY
31732: PUSH
31733: LD_VAR 0 28
31737: IN
31738: NOT
31739: PUSH
31740: LD_VAR 0 14
31744: PUSH
31745: LD_VAR 0 8
31749: ARRAY
31750: PPUSH
31751: CALL_OW 313
31755: AND
31756: IFFALSE 31829
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31758: LD_VAR 0 4
31762: PUSH
31763: LD_VAR 0 7
31767: ARRAY
31768: PPUSH
31769: LD_VAR 0 14
31773: PUSH
31774: LD_VAR 0 8
31778: ARRAY
31779: PPUSH
31780: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31784: LD_ADDR_VAR 0 28
31788: PUSH
31789: LD_VAR 0 28
31793: PPUSH
31794: LD_VAR 0 28
31798: PUSH
31799: LD_INT 1
31801: PLUS
31802: PPUSH
31803: LD_VAR 0 14
31807: PUSH
31808: LD_VAR 0 8
31812: ARRAY
31813: PPUSH
31814: CALL_OW 1
31818: ST_TO_ADDR
// attacking := true ;
31819: LD_ADDR_VAR 0 29
31823: PUSH
31824: LD_INT 1
31826: ST_TO_ADDR
// break ;
31827: GO 31831
// end ; end ;
31829: GO 31698
31831: POP
31832: POP
// if not attacking and f_attack_depot then
31833: LD_VAR 0 29
31837: NOT
31838: PUSH
31839: LD_VAR 0 25
31843: AND
31844: IFFALSE 31939
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31846: LD_ADDR_VAR 0 13
31850: PUSH
31851: LD_VAR 0 14
31855: PPUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 30
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 72
31888: ST_TO_ADDR
// if z then
31889: LD_VAR 0 13
31893: IFFALSE 31939
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31895: LD_VAR 0 4
31899: PUSH
31900: LD_VAR 0 7
31904: ARRAY
31905: PPUSH
31906: LD_VAR 0 13
31910: PPUSH
31911: LD_VAR 0 4
31915: PUSH
31916: LD_VAR 0 7
31920: ARRAY
31921: PPUSH
31922: CALL_OW 74
31926: PPUSH
31927: CALL_OW 115
// attacking := true ;
31931: LD_ADDR_VAR 0 29
31935: PUSH
31936: LD_INT 1
31938: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31939: LD_VAR 0 4
31943: PUSH
31944: LD_VAR 0 7
31948: ARRAY
31949: PPUSH
31950: CALL_OW 256
31954: PUSH
31955: LD_INT 500
31957: LESS
31958: IFFALSE 31984
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31960: LD_VAR 0 4
31964: PUSH
31965: LD_VAR 0 7
31969: ARRAY
31970: PPUSH
31971: LD_VAR 0 14
31975: PUSH
31976: LD_INT 1
31978: ARRAY
31979: PPUSH
31980: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31984: LD_VAR 0 4
31988: PUSH
31989: LD_VAR 0 7
31993: ARRAY
31994: PPUSH
31995: CALL_OW 256
31999: PUSH
32000: LD_INT 250
32002: LESS
32003: PUSH
32004: LD_VAR 0 4
32008: PUSH
32009: LD_VAR 0 7
32013: ARRAY
32014: PUSH
32015: LD_INT 21
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 23
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 69
32043: IN
32044: AND
32045: IFFALSE 32170
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32047: LD_ADDR_VAR 0 9
32051: PUSH
32052: LD_OWVAR 3
32056: PUSH
32057: LD_VAR 0 4
32061: PUSH
32062: LD_VAR 0 7
32066: ARRAY
32067: DIFF
32068: PPUSH
32069: LD_VAR 0 4
32073: PUSH
32074: LD_VAR 0 7
32078: ARRAY
32079: PPUSH
32080: CALL_OW 74
32084: ST_TO_ADDR
// if not k then
32085: LD_VAR 0 9
32089: NOT
32090: IFFALSE 32094
// continue ;
32092: GO 29786
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32094: LD_VAR 0 9
32098: PUSH
32099: LD_INT 81
32101: PUSH
32102: LD_VAR 0 4
32106: PUSH
32107: LD_VAR 0 7
32111: ARRAY
32112: PPUSH
32113: CALL_OW 255
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PPUSH
32122: CALL_OW 69
32126: IN
32127: PUSH
32128: LD_VAR 0 9
32132: PPUSH
32133: LD_VAR 0 4
32137: PUSH
32138: LD_VAR 0 7
32142: ARRAY
32143: PPUSH
32144: CALL_OW 296
32148: PUSH
32149: LD_INT 5
32151: LESS
32152: AND
32153: IFFALSE 32170
// ComAutodestruct ( group [ i ] ) ;
32155: LD_VAR 0 4
32159: PUSH
32160: LD_VAR 0 7
32164: ARRAY
32165: PPUSH
32166: CALL 28356 0 1
// end ; if f_attack_depot then
32170: LD_VAR 0 25
32174: IFFALSE 32286
// begin k := 6 ;
32176: LD_ADDR_VAR 0 9
32180: PUSH
32181: LD_INT 6
32183: ST_TO_ADDR
// if tmp < k then
32184: LD_VAR 0 14
32188: PUSH
32189: LD_VAR 0 9
32193: LESS
32194: IFFALSE 32206
// k := tmp ;
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_VAR 0 14
32205: ST_TO_ADDR
// for j = 1 to k do
32206: LD_ADDR_VAR 0 8
32210: PUSH
32211: DOUBLE
32212: LD_INT 1
32214: DEC
32215: ST_TO_ADDR
32216: LD_VAR 0 9
32220: PUSH
32221: FOR_TO
32222: IFFALSE 32284
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32224: LD_VAR 0 8
32228: PPUSH
32229: CALL_OW 266
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: IN
32244: IFFALSE 32282
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32246: LD_VAR 0 4
32250: PUSH
32251: LD_VAR 0 7
32255: ARRAY
32256: PPUSH
32257: LD_VAR 0 14
32261: PUSH
32262: LD_VAR 0 8
32266: ARRAY
32267: PPUSH
32268: CALL_OW 115
// attacking := true ;
32272: LD_ADDR_VAR 0 29
32276: PUSH
32277: LD_INT 1
32279: ST_TO_ADDR
// break ;
32280: GO 32284
// end ;
32282: GO 32221
32284: POP
32285: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32286: LD_VAR 0 4
32290: PUSH
32291: LD_VAR 0 7
32295: ARRAY
32296: PPUSH
32297: CALL_OW 302
32301: PUSH
32302: LD_VAR 0 29
32306: NOT
32307: AND
32308: IFFALSE 32576
// begin if GetTag ( group [ i ] ) = 71 then
32310: LD_VAR 0 4
32314: PUSH
32315: LD_VAR 0 7
32319: ARRAY
32320: PPUSH
32321: CALL_OW 110
32325: PUSH
32326: LD_INT 71
32328: EQUAL
32329: IFFALSE 32370
// begin if HasTask ( group [ i ] ) then
32331: LD_VAR 0 4
32335: PUSH
32336: LD_VAR 0 7
32340: ARRAY
32341: PPUSH
32342: CALL_OW 314
32346: IFFALSE 32352
// continue else
32348: GO 29786
32350: GO 32370
// SetTag ( group [ i ] , 0 ) ;
32352: LD_VAR 0 4
32356: PUSH
32357: LD_VAR 0 7
32361: ARRAY
32362: PPUSH
32363: LD_INT 0
32365: PPUSH
32366: CALL_OW 109
// end ; k := 8 ;
32370: LD_ADDR_VAR 0 9
32374: PUSH
32375: LD_INT 8
32377: ST_TO_ADDR
// x := 0 ;
32378: LD_ADDR_VAR 0 10
32382: PUSH
32383: LD_INT 0
32385: ST_TO_ADDR
// if tmp < k then
32386: LD_VAR 0 14
32390: PUSH
32391: LD_VAR 0 9
32395: LESS
32396: IFFALSE 32408
// k := tmp ;
32398: LD_ADDR_VAR 0 9
32402: PUSH
32403: LD_VAR 0 14
32407: ST_TO_ADDR
// for j = 1 to k do
32408: LD_ADDR_VAR 0 8
32412: PUSH
32413: DOUBLE
32414: LD_INT 1
32416: DEC
32417: ST_TO_ADDR
32418: LD_VAR 0 9
32422: PUSH
32423: FOR_TO
32424: IFFALSE 32522
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32426: LD_VAR 0 14
32430: PUSH
32431: LD_VAR 0 8
32435: ARRAY
32436: PPUSH
32437: CALL_OW 247
32441: PUSH
32442: LD_INT 1
32444: EQUAL
32445: PUSH
32446: LD_VAR 0 14
32450: PUSH
32451: LD_VAR 0 8
32455: ARRAY
32456: PPUSH
32457: CALL_OW 256
32461: PUSH
32462: LD_INT 250
32464: LESS
32465: PUSH
32466: LD_VAR 0 20
32470: AND
32471: PUSH
32472: LD_VAR 0 20
32476: NOT
32477: PUSH
32478: LD_VAR 0 14
32482: PUSH
32483: LD_VAR 0 8
32487: ARRAY
32488: PPUSH
32489: CALL_OW 256
32493: PUSH
32494: LD_INT 250
32496: GREATEREQUAL
32497: AND
32498: OR
32499: AND
32500: IFFALSE 32520
// begin x := tmp [ j ] ;
32502: LD_ADDR_VAR 0 10
32506: PUSH
32507: LD_VAR 0 14
32511: PUSH
32512: LD_VAR 0 8
32516: ARRAY
32517: ST_TO_ADDR
// break ;
32518: GO 32522
// end ;
32520: GO 32423
32522: POP
32523: POP
// if x then
32524: LD_VAR 0 10
32528: IFFALSE 32552
// ComAttackUnit ( group [ i ] , x ) else
32530: LD_VAR 0 4
32534: PUSH
32535: LD_VAR 0 7
32539: ARRAY
32540: PPUSH
32541: LD_VAR 0 10
32545: PPUSH
32546: CALL_OW 115
32550: GO 32576
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32552: LD_VAR 0 4
32556: PUSH
32557: LD_VAR 0 7
32561: ARRAY
32562: PPUSH
32563: LD_VAR 0 14
32567: PUSH
32568: LD_INT 1
32570: ARRAY
32571: PPUSH
32572: CALL_OW 115
// end ; end ; end ;
32576: GO 29786
32578: POP
32579: POP
// wait ( 0 0$1 ) ;
32580: LD_INT 35
32582: PPUSH
32583: CALL_OW 67
// until group = [ ] ;
32587: LD_VAR 0 4
32591: PUSH
32592: EMPTY
32593: EQUAL
32594: IFFALSE 29771
// end ;
32596: LD_VAR 0 2
32600: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
// if not defenders then
32610: LD_VAR 0 2
32614: NOT
32615: IFFALSE 32619
// exit ;
32617: GO 33143
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32619: LD_ADDR_VAR 0 9
32623: PUSH
32624: LD_EXP 45
32628: PUSH
32629: LD_VAR 0 1
32633: ARRAY
32634: PPUSH
32635: LD_INT 25
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PPUSH
32645: CALL_OW 72
32649: ST_TO_ADDR
// if mechs then
32650: LD_VAR 0 9
32654: IFFALSE 32753
// for i in defenders do
32656: LD_ADDR_VAR 0 5
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: FOR_IN
32667: IFFALSE 32751
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32669: LD_VAR 0 5
32673: PPUSH
32674: CALL_OW 263
32678: PUSH
32679: LD_INT 1
32681: EQUAL
32682: PUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: CALL_OW 311
32692: NOT
32693: AND
32694: IFFALSE 32749
// begin un := mechs [ 1 ] ;
32696: LD_ADDR_VAR 0 7
32700: PUSH
32701: LD_VAR 0 9
32705: PUSH
32706: LD_INT 1
32708: ARRAY
32709: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32710: LD_VAR 0 7
32714: PPUSH
32715: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32719: LD_VAR 0 7
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL_OW 180
// mechs := mechs diff un ;
32733: LD_ADDR_VAR 0 9
32737: PUSH
32738: LD_VAR 0 9
32742: PUSH
32743: LD_VAR 0 7
32747: DIFF
32748: ST_TO_ADDR
// end ;
32749: GO 32666
32751: POP
32752: POP
// repeat wait ( 0 0$1 ) ;
32753: LD_INT 35
32755: PPUSH
32756: CALL_OW 67
// enemy := mc_scan [ base ] ;
32760: LD_ADDR_VAR 0 3
32764: PUSH
32765: LD_EXP 64
32769: PUSH
32770: LD_VAR 0 1
32774: ARRAY
32775: ST_TO_ADDR
// for i in defenders do
32776: LD_ADDR_VAR 0 5
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: FOR_IN
32787: IFFALSE 32933
// begin e := NearestUnitToUnit ( enemy , i ) ;
32789: LD_ADDR_VAR 0 10
32793: PUSH
32794: LD_VAR 0 3
32798: PPUSH
32799: LD_VAR 0 5
32803: PPUSH
32804: CALL_OW 74
32808: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32809: LD_VAR 0 5
32813: PPUSH
32814: CALL_OW 319
32818: NOT
32819: PUSH
32820: LD_VAR 0 5
32824: PPUSH
32825: CALL_OW 302
32829: AND
32830: PUSH
32831: LD_VAR 0 5
32835: PPUSH
32836: LD_VAR 0 10
32840: PPUSH
32841: CALL_OW 296
32845: PUSH
32846: LD_INT 30
32848: LESS
32849: AND
32850: IFFALSE 32868
// ComAttackUnit ( i , e ) else
32852: LD_VAR 0 5
32856: PPUSH
32857: LD_VAR 0 10
32861: PPUSH
32862: CALL_OW 115
32866: GO 32931
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32868: LD_VAR 0 5
32872: PPUSH
32873: LD_VAR 0 10
32877: PPUSH
32878: CALL_OW 296
32882: PUSH
32883: LD_INT 30
32885: GREATEREQUAL
32886: PUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: LD_EXP 65
32896: PUSH
32897: LD_VAR 0 1
32901: ARRAY
32902: PPUSH
32903: CALL_OW 308
32907: NOT
32908: AND
32909: IFFALSE 32931
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32911: LD_VAR 0 5
32915: PPUSH
32916: LD_EXP 65
32920: PUSH
32921: LD_VAR 0 1
32925: ARRAY
32926: PPUSH
32927: CALL_OW 113
// end ;
32931: GO 32786
32933: POP
32934: POP
// until not enemy or not defenders ;
32935: LD_VAR 0 3
32939: NOT
32940: PUSH
32941: LD_VAR 0 2
32945: NOT
32946: OR
32947: IFFALSE 32753
// if not enemy and defenders then
32949: LD_VAR 0 3
32953: NOT
32954: PUSH
32955: LD_VAR 0 2
32959: AND
32960: IFFALSE 33118
// repeat wait ( 0 0$1 ) ;
32962: LD_INT 35
32964: PPUSH
32965: CALL_OW 67
// for i in defenders do
32969: LD_ADDR_VAR 0 5
32973: PUSH
32974: LD_VAR 0 2
32978: PUSH
32979: FOR_IN
32980: IFFALSE 33069
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32982: LD_VAR 0 5
32986: PPUSH
32987: LD_EXP 65
32991: PUSH
32992: LD_VAR 0 1
32996: ARRAY
32997: PPUSH
32998: CALL_OW 308
33002: NOT
33003: IFFALSE 33027
// ComMoveToArea ( i , mc_parking [ base ] ) else
33005: LD_VAR 0 5
33009: PPUSH
33010: LD_EXP 65
33014: PUSH
33015: LD_VAR 0 1
33019: ARRAY
33020: PPUSH
33021: CALL_OW 113
33025: GO 33067
// if GetControl ( i ) = control_manual then
33027: LD_VAR 0 5
33031: PPUSH
33032: CALL_OW 263
33036: PUSH
33037: LD_INT 1
33039: EQUAL
33040: IFFALSE 33067
// if IsDrivenBy ( i ) then
33042: LD_VAR 0 5
33046: PPUSH
33047: CALL_OW 311
33051: IFFALSE 33067
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33053: LD_VAR 0 5
33057: PPUSH
33058: CALL_OW 311
33062: PPUSH
33063: CALL_OW 121
// end ;
33067: GO 32979
33069: POP
33070: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33071: LD_VAR 0 2
33075: PPUSH
33076: LD_INT 95
33078: PUSH
33079: LD_EXP 65
33083: PUSH
33084: LD_VAR 0 1
33088: ARRAY
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PPUSH
33094: CALL_OW 72
33098: PUSH
33099: LD_VAR 0 2
33103: EQUAL
33104: PUSH
33105: LD_EXP 64
33109: PUSH
33110: LD_VAR 0 1
33114: ARRAY
33115: OR
33116: IFFALSE 32962
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33118: LD_ADDR_EXP 63
33122: PUSH
33123: LD_EXP 63
33127: PPUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: LD_VAR 0 2
33137: PPUSH
33138: CALL_OW 1
33142: ST_TO_ADDR
// end ;
33143: LD_VAR 0 4
33147: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33148: LD_INT 0
33150: PPUSH
33151: PPUSH
33152: PPUSH
33153: PPUSH
// if not base_units then
33154: LD_VAR 0 1
33158: NOT
33159: IFFALSE 33163
// exit ;
33161: GO 33250
// result := false ;
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 0
33170: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33171: LD_ADDR_VAR 0 5
33175: PUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 72
33195: ST_TO_ADDR
// if not tmp then
33196: LD_VAR 0 5
33200: NOT
33201: IFFALSE 33205
// exit ;
33203: GO 33250
// for i in tmp do
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: LD_VAR 0 5
33214: PUSH
33215: FOR_IN
33216: IFFALSE 33248
// begin result := EnemyInRange ( i , 18 ) ;
33218: LD_ADDR_VAR 0 2
33222: PUSH
33223: LD_VAR 0 3
33227: PPUSH
33228: LD_INT 18
33230: PPUSH
33231: CALL 28039 0 2
33235: ST_TO_ADDR
// if result then
33236: LD_VAR 0 2
33240: IFFALSE 33246
// exit ;
33242: POP
33243: POP
33244: GO 33250
// end ;
33246: GO 33215
33248: POP
33249: POP
// end ;
33250: LD_VAR 0 2
33254: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33255: LD_INT 0
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
// result := false ;
33261: LD_ADDR_VAR 0 2
33265: PUSH
33266: LD_INT 0
33268: ST_TO_ADDR
// side := GetSide ( unit ) ;
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_VAR 0 1
33278: PPUSH
33279: CALL_OW 255
33283: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 248
33298: ST_TO_ADDR
// case nat of 1 :
33299: LD_VAR 0 4
33303: PUSH
33304: LD_INT 1
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33312
33310: GO 33323
33312: POP
// tech := tech_lassight ; 2 :
33313: LD_ADDR_VAR 0 5
33317: PUSH
33318: LD_INT 12
33320: ST_TO_ADDR
33321: GO 33362
33323: LD_INT 2
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33342
33331: POP
// tech := tech_mortar ; 3 :
33332: LD_ADDR_VAR 0 5
33336: PUSH
33337: LD_INT 41
33339: ST_TO_ADDR
33340: GO 33362
33342: LD_INT 3
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33361
33350: POP
// tech := tech_bazooka ; end ;
33351: LD_ADDR_VAR 0 5
33355: PUSH
33356: LD_INT 44
33358: ST_TO_ADDR
33359: GO 33362
33361: POP
// if Researched ( side , tech ) then
33362: LD_VAR 0 3
33366: PPUSH
33367: LD_VAR 0 5
33371: PPUSH
33372: CALL_OW 325
33376: IFFALSE 33403
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33378: LD_ADDR_VAR 0 2
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: LD_INT 8
33388: PUSH
33389: LD_INT 9
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: PUSH
33397: LD_VAR 0 4
33401: ARRAY
33402: ST_TO_ADDR
// end ;
33403: LD_VAR 0 2
33407: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33408: LD_INT 0
33410: PPUSH
33411: PPUSH
33412: PPUSH
// if not mines then
33413: LD_VAR 0 2
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33545
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33422: LD_ADDR_VAR 0 5
33426: PUSH
33427: LD_INT 81
33429: PUSH
33430: LD_VAR 0 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: ST_TO_ADDR
// for i in mines do
33444: LD_ADDR_VAR 0 4
33448: PUSH
33449: LD_VAR 0 2
33453: PUSH
33454: FOR_IN
33455: IFFALSE 33543
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33457: LD_VAR 0 4
33461: PUSH
33462: LD_INT 1
33464: ARRAY
33465: PPUSH
33466: LD_VAR 0 4
33470: PUSH
33471: LD_INT 2
33473: ARRAY
33474: PPUSH
33475: CALL_OW 458
33479: NOT
33480: IFFALSE 33484
// continue ;
33482: GO 33454
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33484: LD_VAR 0 4
33488: PUSH
33489: LD_INT 1
33491: ARRAY
33492: PPUSH
33493: LD_VAR 0 4
33497: PUSH
33498: LD_INT 2
33500: ARRAY
33501: PPUSH
33502: CALL_OW 428
33506: PUSH
33507: LD_VAR 0 5
33511: IN
33512: IFFALSE 33541
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33514: LD_VAR 0 4
33518: PUSH
33519: LD_INT 1
33521: ARRAY
33522: PPUSH
33523: LD_VAR 0 4
33527: PUSH
33528: LD_INT 2
33530: ARRAY
33531: PPUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 456
// end ;
33541: GO 33454
33543: POP
33544: POP
// end ; end_of_file
33545: LD_VAR 0 3
33549: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33550: LD_INT 0
33552: PPUSH
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33557: LD_ADDR_VAR 0 5
33561: PUSH
33562: LD_INT 6
33564: PUSH
33565: LD_INT 7
33567: PUSH
33568: LD_INT 8
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: PUSH
33576: LD_OWVAR 67
33580: ARRAY
33581: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33582: LD_INT 69
33584: PUSH
33585: EMPTY
33586: LIST
33587: PPUSH
33588: LD_INT 141
33590: PPUSH
33591: CALL_OW 169
// Wait ( 1 ) ;
33595: LD_INT 1
33597: PPUSH
33598: CALL_OW 67
// uc_side := 2 ;
33602: LD_ADDR_OWVAR 20
33606: PUSH
33607: LD_INT 2
33609: ST_TO_ADDR
// uc_nation := 2 ;
33610: LD_ADDR_OWVAR 21
33614: PUSH
33615: LD_INT 2
33617: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33618: LD_ADDR_OWVAR 37
33622: PUSH
33623: LD_INT 14
33625: ST_TO_ADDR
// vc_engine := engine_siberite ;
33626: LD_ADDR_OWVAR 39
33630: PUSH
33631: LD_INT 3
33633: ST_TO_ADDR
// vc_control := control_manual ;
33634: LD_ADDR_OWVAR 38
33638: PUSH
33639: LD_INT 1
33641: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33642: LD_ADDR_OWVAR 40
33646: PUSH
33647: LD_INT 31
33649: ST_TO_ADDR
// for i = 1 to 3 do
33650: LD_ADDR_VAR 0 2
33654: PUSH
33655: DOUBLE
33656: LD_INT 1
33658: DEC
33659: ST_TO_ADDR
33660: LD_INT 3
33662: PUSH
33663: FOR_TO
33664: IFFALSE 33748
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33666: LD_INT 0
33668: PPUSH
33669: LD_INT 3
33671: PPUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: CALL_OW 380
// un := CreateVehicle ;
33681: LD_ADDR_VAR 0 4
33685: PUSH
33686: CALL_OW 45
33690: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33691: LD_VAR 0 4
33695: PPUSH
33696: LD_INT 0
33698: PPUSH
33699: LD_INT 5
33701: PPUSH
33702: CALL_OW 12
33706: PPUSH
33707: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33711: LD_VAR 0 4
33715: PPUSH
33716: LD_INT 156
33718: PPUSH
33719: LD_INT 15
33721: PPUSH
33722: LD_INT 6
33724: PPUSH
33725: LD_INT 0
33727: PPUSH
33728: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33732: CALL_OW 44
33736: PPUSH
33737: LD_VAR 0 4
33741: PPUSH
33742: CALL_OW 52
// end ;
33746: GO 33663
33748: POP
33749: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33750: LD_ADDR_EXP 34
33754: PUSH
33755: LD_INT 94
33757: PPUSH
33758: LD_STRING dammam
33760: PPUSH
33761: LD_VAR 0 5
33765: PPUSH
33766: LD_INT 10000
33768: PUSH
33769: LD_INT 1000
33771: PUSH
33772: LD_INT 300
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: PPUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 5
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 4
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: PPUSH
33800: CALL 5970 0 5
33804: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33805: LD_ADDR_EXP 34
33809: PUSH
33810: LD_EXP 34
33814: PUSH
33815: LD_INT 122
33817: PPUSH
33818: LD_STRING 
33820: PPUSH
33821: LD_VAR 0 5
33825: PPUSH
33826: LD_INT 100
33828: PUSH
33829: LD_INT 60
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: PPUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 4
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: PPUSH
33859: CALL 5970 0 5
33863: ADD
33864: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33865: LD_ADDR_EXP 32
33869: PUSH
33870: LD_INT 45
33872: PPUSH
33873: LD_STRING jeddah
33875: PPUSH
33876: LD_VAR 0 5
33880: PPUSH
33881: LD_INT 700
33883: PUSH
33884: LD_INT 300
33886: PUSH
33887: LD_INT 10
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: PPUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL 5970 0 5
33918: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33919: LD_ADDR_EXP 33
33923: PUSH
33924: LD_INT 7
33926: PPUSH
33927: LD_STRING riyadh
33929: PPUSH
33930: LD_VAR 0 5
33934: PPUSH
33935: LD_INT 500
33937: PUSH
33938: LD_INT 60
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: PPUSH
33949: LD_INT 4
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: PPUSH
33967: CALL 5970 0 5
33971: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33972: LD_ADDR_EXP 35
33976: PUSH
33977: LD_INT 69
33979: PPUSH
33980: LD_STRING 
33982: PPUSH
33983: LD_VAR 0 5
33987: PPUSH
33988: LD_INT 500
33990: PUSH
33991: LD_INT 50
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: PPUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: PPUSH
34021: CALL 5970 0 5
34025: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34026: LD_ADDR_EXP 45
34030: PUSH
34031: LD_EXP 34
34035: PUSH
34036: LD_EXP 32
34040: PUSH
34041: LD_EXP 35
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34051: LD_ADDR_VAR 0 2
34055: PUSH
34056: LD_INT 22
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 30
34068: PUSH
34069: LD_INT 31
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 58
34078: PUSH
34079: EMPTY
34080: LIST
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PPUSH
34087: CALL_OW 69
34091: PUSH
34092: FOR_IN
34093: IFFALSE 34218
// begin if GetBase ( i ) then
34095: LD_VAR 0 2
34099: PPUSH
34100: CALL_OW 274
34104: IFFALSE 34108
// continue ;
34106: GO 34092
// d := GetDir ( i ) ;
34108: LD_ADDR_VAR 0 3
34112: PUSH
34113: LD_VAR 0 2
34117: PPUSH
34118: CALL_OW 254
34122: ST_TO_ADDR
// if d < 3 then
34123: LD_VAR 0 3
34127: PUSH
34128: LD_INT 3
34130: LESS
34131: IFFALSE 34149
// d := d + 3 else
34133: LD_ADDR_VAR 0 3
34137: PUSH
34138: LD_VAR 0 3
34142: PUSH
34143: LD_INT 3
34145: PLUS
34146: ST_TO_ADDR
34147: GO 34163
// d := d - 3 ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_VAR 0 3
34158: PUSH
34159: LD_INT 3
34161: MINUS
34162: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34163: LD_INT 0
34165: PPUSH
34166: LD_INT 8
34168: PPUSH
34169: LD_VAR 0 5
34173: PPUSH
34174: CALL_OW 380
// un := CreateHuman ;
34178: LD_ADDR_VAR 0 4
34182: PUSH
34183: CALL_OW 44
34187: ST_TO_ADDR
// SetDir ( un , d ) ;
34188: LD_VAR 0 4
34192: PPUSH
34193: LD_VAR 0 3
34197: PPUSH
34198: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34202: LD_VAR 0 4
34206: PPUSH
34207: LD_VAR 0 2
34211: PPUSH
34212: CALL_OW 52
// end ;
34216: GO 34092
34218: POP
34219: POP
// if Difficulty > 1 then
34220: LD_OWVAR 67
34224: PUSH
34225: LD_INT 1
34227: GREATER
34228: IFFALSE 34599
// begin ar_kamikadze := [ ] ;
34230: LD_ADDR_EXP 38
34234: PUSH
34235: EMPTY
34236: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34237: LD_INT 0
34239: PPUSH
34240: LD_INT 1
34242: PPUSH
34243: LD_VAR 0 5
34247: PPUSH
34248: CALL_OW 380
// un := CreateHuman ;
34252: LD_ADDR_VAR 0 4
34256: PUSH
34257: CALL_OW 44
34261: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34262: LD_VAR 0 4
34266: PPUSH
34267: LD_INT 3
34269: PPUSH
34270: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34274: LD_VAR 0 4
34278: PPUSH
34279: LD_INT 23
34281: PPUSH
34282: LD_INT 44
34284: PPUSH
34285: LD_INT 0
34287: PPUSH
34288: CALL_OW 48
// ComCrawl ( un ) ;
34292: LD_VAR 0 4
34296: PPUSH
34297: CALL_OW 137
// un := CreateHuman ;
34301: LD_ADDR_VAR 0 4
34305: PUSH
34306: CALL_OW 44
34310: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34311: LD_VAR 0 4
34315: PPUSH
34316: LD_INT 3
34318: PPUSH
34319: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34323: LD_VAR 0 4
34327: PPUSH
34328: LD_INT 30
34330: PPUSH
34331: LD_INT 39
34333: PPUSH
34334: LD_INT 0
34336: PPUSH
34337: CALL_OW 48
// ComCrawl ( un ) ;
34341: LD_VAR 0 4
34345: PPUSH
34346: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34350: LD_INT 0
34352: PPUSH
34353: LD_INT 17
34355: PPUSH
34356: LD_VAR 0 5
34360: PPUSH
34361: CALL_OW 380
// un := CreateHuman ;
34365: LD_ADDR_VAR 0 4
34369: PUSH
34370: CALL_OW 44
34374: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34375: LD_VAR 0 4
34379: PPUSH
34380: LD_INT 3
34382: PPUSH
34383: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34387: LD_VAR 0 4
34391: PPUSH
34392: LD_INT 45
34394: PPUSH
34395: LD_INT 86
34397: PPUSH
34398: LD_INT 0
34400: PPUSH
34401: CALL_OW 48
// ComHold ( un ) ;
34405: LD_VAR 0 4
34409: PPUSH
34410: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34414: LD_ADDR_EXP 38
34418: PUSH
34419: LD_EXP 38
34423: PPUSH
34424: LD_EXP 38
34428: PUSH
34429: LD_INT 1
34431: PLUS
34432: PPUSH
34433: LD_VAR 0 4
34437: PPUSH
34438: CALL_OW 1
34442: ST_TO_ADDR
// un := CreateHuman ;
34443: LD_ADDR_VAR 0 4
34447: PUSH
34448: CALL_OW 44
34452: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34453: LD_VAR 0 4
34457: PPUSH
34458: LD_INT 3
34460: PPUSH
34461: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34465: LD_VAR 0 4
34469: PPUSH
34470: LD_INT 60
34472: PPUSH
34473: LD_INT 85
34475: PPUSH
34476: LD_INT 0
34478: PPUSH
34479: CALL_OW 48
// ComHold ( un ) ;
34483: LD_VAR 0 4
34487: PPUSH
34488: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34492: LD_ADDR_EXP 38
34496: PUSH
34497: LD_EXP 38
34501: PPUSH
34502: LD_EXP 38
34506: PUSH
34507: LD_INT 1
34509: PLUS
34510: PPUSH
34511: LD_VAR 0 4
34515: PPUSH
34516: CALL_OW 1
34520: ST_TO_ADDR
// un := CreateHuman ;
34521: LD_ADDR_VAR 0 4
34525: PUSH
34526: CALL_OW 44
34530: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34531: LD_VAR 0 4
34535: PPUSH
34536: LD_INT 3
34538: PPUSH
34539: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34543: LD_VAR 0 4
34547: PPUSH
34548: LD_INT 222
34550: PPUSH
34551: LD_INT 166
34553: PPUSH
34554: LD_INT 0
34556: PPUSH
34557: CALL_OW 48
// ComHold ( un ) ;
34561: LD_VAR 0 4
34565: PPUSH
34566: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34570: LD_ADDR_EXP 38
34574: PUSH
34575: LD_EXP 38
34579: PPUSH
34580: LD_EXP 38
34584: PUSH
34585: LD_INT 1
34587: PLUS
34588: PPUSH
34589: LD_VAR 0 4
34593: PPUSH
34594: CALL_OW 1
34598: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34599: LD_ADDR_EXP 36
34603: PUSH
34604: EMPTY
34605: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34606: LD_INT 1
34608: PPUSH
34609: LD_INT 1
34611: PPUSH
34612: LD_VAR 0 5
34616: PPUSH
34617: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34621: LD_ADDR_OWVAR 33
34625: PUSH
34626: LD_STRING SecondCharsGal
34628: ST_TO_ADDR
// hc_face_number := 4 ;
34629: LD_ADDR_OWVAR 34
34633: PUSH
34634: LD_INT 4
34636: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34637: LD_ADDR_EXP 36
34641: PUSH
34642: LD_EXP 36
34646: PPUSH
34647: LD_INT 1
34649: PPUSH
34650: CALL_OW 44
34654: PPUSH
34655: CALL_OW 1
34659: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34660: LD_INT 2
34662: PPUSH
34663: LD_INT 4
34665: PPUSH
34666: LD_VAR 0 5
34670: PPUSH
34671: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34675: LD_ADDR_OWVAR 33
34679: PUSH
34680: LD_STRING SecondCharsGal
34682: ST_TO_ADDR
// hc_face_number := 15 ;
34683: LD_ADDR_OWVAR 34
34687: PUSH
34688: LD_INT 15
34690: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34691: LD_ADDR_EXP 36
34695: PUSH
34696: LD_EXP 36
34700: PPUSH
34701: LD_INT 2
34703: PPUSH
34704: CALL_OW 44
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34714: LD_INT 2
34716: PPUSH
34717: LD_INT 4
34719: PPUSH
34720: LD_VAR 0 5
34724: PPUSH
34725: CALL_OW 380
// hc_gallery :=  ;
34729: LD_ADDR_OWVAR 33
34733: PUSH
34734: LD_STRING 
34736: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34737: LD_ADDR_EXP 36
34741: PUSH
34742: LD_EXP 36
34746: PPUSH
34747: LD_INT 3
34749: PPUSH
34750: CALL_OW 44
34754: PPUSH
34755: CALL_OW 1
34759: ST_TO_ADDR
// hc_sex := sex_male ;
34760: LD_ADDR_OWVAR 27
34764: PUSH
34765: LD_INT 1
34767: ST_TO_ADDR
// hc_class = 11 ;
34768: LD_ADDR_OWVAR 28
34772: PUSH
34773: LD_INT 11
34775: ST_TO_ADDR
// hc_gallery = sandar ;
34776: LD_ADDR_OWVAR 33
34780: PUSH
34781: LD_STRING sandar
34783: ST_TO_ADDR
// hc_face_number = 33 ;
34784: LD_ADDR_OWVAR 34
34788: PUSH
34789: LD_INT 33
34791: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34792: LD_ADDR_OWVAR 26
34796: PUSH
34797: LD_STRING Thabit Muhair Saliba
34799: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34800: LD_ADDR_OWVAR 31
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: ST_TO_ADDR
// Saliba = CreateHuman ;
34823: LD_ADDR_EXP 40
34827: PUSH
34828: CALL_OW 44
34832: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34833: LD_EXP 40
34837: PPUSH
34838: LD_INT 7
34840: PPUSH
34841: CALL_OW 52
// if gensher_active then
34845: LD_EXP 17
34849: IFFALSE 34876
// begin Gensher = NewCharacter ( Gensher ) ;
34851: LD_ADDR_EXP 41
34855: PUSH
34856: LD_STRING Gensher
34858: PPUSH
34859: CALL_OW 25
34863: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
34864: LD_EXP 41
34868: PPUSH
34869: LD_INT 94
34871: PPUSH
34872: CALL_OW 52
// end ; InitHc ;
34876: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
34880: LD_ADDR_EXP 37
34884: PUSH
34885: EMPTY
34886: ST_TO_ADDR
// for i = 1 to 4 do
34887: LD_ADDR_VAR 0 2
34891: PUSH
34892: DOUBLE
34893: LD_INT 1
34895: DEC
34896: ST_TO_ADDR
34897: LD_INT 4
34899: PUSH
34900: FOR_TO
34901: IFFALSE 35073
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34903: LD_INT 13
34905: PUSH
34906: LD_INT 14
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PPUSH
34916: LD_INT 2
34918: PPUSH
34919: CALL_OW 12
34923: ARRAY
34924: PPUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PPUSH
34938: LD_INT 2
34940: PPUSH
34941: CALL_OW 12
34945: ARRAY
34946: PPUSH
34947: LD_INT 1
34949: PPUSH
34950: LD_INT 25
34952: PUSH
34953: LD_INT 27
34955: PUSH
34956: LD_INT 26
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PPUSH
34967: LD_INT 3
34969: PPUSH
34970: CALL_OW 12
34974: ARRAY
34975: PPUSH
34976: LD_INT 60
34978: PPUSH
34979: LD_INT 100
34981: PPUSH
34982: CALL_OW 12
34986: PPUSH
34987: CALL 2007 0 5
// un := CreateVehicle ;
34991: LD_ADDR_VAR 0 4
34995: PUSH
34996: CALL_OW 45
35000: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
35001: LD_ADDR_EXP 37
35005: PUSH
35006: LD_EXP 37
35010: PPUSH
35011: LD_EXP 37
35015: PUSH
35016: LD_INT 1
35018: PLUS
35019: PPUSH
35020: LD_VAR 0 4
35024: PPUSH
35025: CALL_OW 1
35029: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35030: LD_VAR 0 4
35034: PPUSH
35035: LD_INT 0
35037: PPUSH
35038: LD_INT 5
35040: PPUSH
35041: CALL_OW 12
35045: PPUSH
35046: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35050: LD_VAR 0 4
35054: PPUSH
35055: LD_INT 124
35057: PPUSH
35058: LD_INT 141
35060: PPUSH
35061: LD_INT 6
35063: PPUSH
35064: LD_INT 0
35066: PPUSH
35067: CALL_OW 50
// end ;
35071: GO 34900
35073: POP
35074: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35075: LD_ADDR_EXP 39
35079: PUSH
35080: EMPTY
35081: PUSH
35082: EMPTY
35083: PUSH
35084: EMPTY
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: DOUBLE
35097: LD_INT 1
35099: DEC
35100: ST_TO_ADDR
35101: LD_INT 3
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 4
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: PUSH
35115: LD_OWVAR 67
35119: ARRAY
35120: PUSH
35121: FOR_TO
35122: IFFALSE 35336
// for i = 1 to 3 do
35124: LD_ADDR_VAR 0 2
35128: PUSH
35129: DOUBLE
35130: LD_INT 1
35132: DEC
35133: ST_TO_ADDR
35134: LD_INT 3
35136: PUSH
35137: FOR_TO
35138: IFFALSE 35332
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35140: LD_INT 14
35142: PPUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PPUSH
35156: LD_INT 2
35158: PPUSH
35159: CALL_OW 12
35163: ARRAY
35164: PPUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 5
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PPUSH
35178: LD_INT 2
35180: PPUSH
35181: CALL_OW 12
35185: ARRAY
35186: PPUSH
35187: LD_INT 25
35189: PUSH
35190: LD_INT 27
35192: PUSH
35193: LD_INT 26
35195: PUSH
35196: LD_INT 28
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PPUSH
35208: LD_INT 4
35210: PPUSH
35211: CALL_OW 12
35215: ARRAY
35216: PPUSH
35217: LD_INT 100
35219: PPUSH
35220: CALL 2007 0 5
// un := CreateVehicle ;
35224: LD_ADDR_VAR 0 4
35228: PUSH
35229: CALL_OW 45
35233: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35234: LD_ADDR_EXP 39
35238: PUSH
35239: LD_EXP 39
35243: PPUSH
35244: LD_VAR 0 2
35248: PUSH
35249: LD_EXP 39
35253: PUSH
35254: LD_VAR 0 2
35258: ARRAY
35259: PUSH
35260: LD_INT 1
35262: PLUS
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PPUSH
35268: LD_VAR 0 4
35272: PPUSH
35273: CALL 3179 0 3
35277: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35278: LD_VAR 0 4
35282: PPUSH
35283: LD_INT 0
35285: PPUSH
35286: LD_INT 5
35288: PPUSH
35289: CALL_OW 12
35293: PPUSH
35294: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35298: LD_VAR 0 4
35302: PPUSH
35303: LD_INT 20
35305: PUSH
35306: LD_INT 21
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: PUSH
35317: LD_VAR 0 2
35321: ARRAY
35322: PPUSH
35323: LD_INT 0
35325: PPUSH
35326: CALL_OW 49
// end ;
35330: GO 35137
35332: POP
35333: POP
35334: GO 35121
35336: POP
35337: POP
// InitHc ;
35338: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35342: LD_INT 4
35344: PPUSH
35345: LD_INT 5
35347: PPUSH
35348: LD_INT 10
35350: PPUSH
35351: LD_INT 5
35353: PPUSH
35354: LD_INT 0
35356: PPUSH
35357: CALL_OW 58
// end ;
35361: LD_VAR 0 1
35365: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35366: LD_EXP 38
35370: IFFALSE 35444
35372: GO 35374
35374: DISABLE
35375: LD_INT 0
35377: PPUSH
// begin enable ;
35378: ENABLE
// for i in ar_kamikadze do
35379: LD_ADDR_VAR 0 1
35383: PUSH
35384: LD_EXP 38
35388: PUSH
35389: FOR_IN
35390: IFFALSE 35442
// if See ( 1 , i ) then
35392: LD_INT 1
35394: PPUSH
35395: LD_VAR 0 1
35399: PPUSH
35400: CALL_OW 292
35404: IFFALSE 35440
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35406: LD_VAR 0 1
35410: PPUSH
35411: LD_INT 81
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PPUSH
35421: CALL_OW 69
35425: PPUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 74
35435: PPUSH
35436: CALL_OW 115
35440: GO 35389
35442: POP
35443: POP
// end ;
35444: PPOPN 1
35446: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35447: LD_EXP 12
35451: IFFALSE 35768
35453: GO 35455
35455: DISABLE
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35462: LD_INT 35
35464: PPUSH
35465: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35469: LD_INT 1
35471: PPUSH
35472: CALL 54773 0 1
35476: PUSH
35477: LD_INT 0
35479: EQUAL
35480: IFFALSE 35462
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35482: LD_INT 1
35484: PPUSH
35485: LD_INT 14
35487: PUSH
35488: LD_INT 3
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 32
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: PPUSH
35506: CALL 54562 0 2
// repeat wait ( 0 0$1 ) ;
35510: LD_INT 35
35512: PPUSH
35513: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35517: LD_EXP 60
35521: PUSH
35522: LD_INT 1
35524: ARRAY
35525: PPUSH
35526: LD_INT 33
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 34
35538: PUSH
35539: LD_INT 32
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PPUSH
35550: CALL_OW 72
35554: IFFALSE 35510
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35556: LD_ADDR_VAR 0 2
35560: PUSH
35561: LD_EXP 60
35565: PUSH
35566: LD_INT 1
35568: ARRAY
35569: PPUSH
35570: LD_INT 33
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 34
35582: PUSH
35583: LD_INT 32
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PPUSH
35594: CALL_OW 72
35598: PUSH
35599: LD_INT 1
35601: ARRAY
35602: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35603: LD_ADDR_VAR 0 4
35607: PUSH
35608: LD_INT 5
35610: PPUSH
35611: CALL_OW 469
35615: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35616: LD_INT 35
35618: PPUSH
35619: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35623: LD_ADDR_VAR 0 4
35627: PUSH
35628: LD_INT 5
35630: PPUSH
35631: CALL_OW 469
35635: ST_TO_ADDR
// tmp := 100 ;
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 100
35643: ST_TO_ADDR
// if pos then
35644: LD_VAR 0 4
35648: IFFALSE 35688
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 2
35657: PPUSH
35658: LD_VAR 0 4
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: PPUSH
35667: LD_VAR 0 4
35671: PUSH
35672: LD_INT 2
35674: ARRAY
35675: PPUSH
35676: LD_INT 20
35678: PPUSH
35679: CALL 3673 0 4
35683: PUSH
35684: LD_INT 4
35686: ARRAY
35687: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35688: LD_VAR 0 4
35692: PUSH
35693: LD_EXP 13
35697: NOT
35698: AND
35699: PUSH
35700: LD_VAR 0 3
35704: PUSH
35705: LD_INT 10
35707: LESS
35708: AND
35709: IFFALSE 35616
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_VAR 0 4
35720: PUSH
35721: LD_INT 1
35723: ARRAY
35724: PPUSH
35725: LD_VAR 0 4
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35738: LD_VAR 0 2
35742: PPUSH
35743: LD_INT 198
35745: PPUSH
35746: LD_INT 113
35748: PPUSH
35749: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35753: LD_VAR 0 2
35757: PPUSH
35758: LD_INT 124
35760: PPUSH
35761: LD_INT 7
35763: PPUSH
35764: CALL_OW 171
// end ;
35768: PPOPN 4
35770: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35771: LD_EXP 6
35775: IFFALSE 38320
35777: GO 35779
35779: DISABLE
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35790: LD_ADDR_VAR 0 4
35794: PUSH
35795: LD_INT 5
35797: PUSH
35798: LD_INT 6
35800: PUSH
35801: LD_INT 7
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: PUSH
35809: LD_OWVAR 67
35813: ARRAY
35814: ST_TO_ADDR
// coords := [ ] ;
35815: LD_ADDR_VAR 0 5
35819: PUSH
35820: EMPTY
35821: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35822: LD_ADDR_VAR 0 6
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35869: LD_INT 1
35871: PPUSH
35872: LD_INT 14
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 28
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 14
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 25
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 14
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 28
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 14
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: LD_INT 29
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL 54562 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
35954: LD_INT 21000
35956: PUSH
35957: LD_INT 19600
35959: PUSH
35960: LD_INT 18900
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: PUSH
35968: LD_OWVAR 67
35972: ARRAY
35973: PPUSH
35974: CALL_OW 67
// InitHc ;
35978: CALL_OW 19
// InitUc ;
35982: CALL_OW 18
// uc_side := 2 ;
35986: LD_ADDR_OWVAR 20
35990: PUSH
35991: LD_INT 2
35993: ST_TO_ADDR
// uc_nation := 2 ;
35994: LD_ADDR_OWVAR 21
35998: PUSH
35999: LD_INT 2
36001: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: EMPTY
36008: PUSH
36009: EMPTY
36010: PUSH
36011: EMPTY
36012: PUSH
36013: EMPTY
36014: PUSH
36015: EMPTY
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: LD_VAR 0 3
36033: PPUSH
36034: LD_INT 1
36036: PPUSH
36037: LD_EXP 60
36041: PUSH
36042: LD_INT 1
36044: ARRAY
36045: PUSH
36046: LD_INT 34
36048: PUSH
36049: LD_INT 32
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: DIFF
36061: PPUSH
36062: CALL_OW 1
36066: ST_TO_ADDR
// for i = 1 to Difficulty do
36067: LD_ADDR_VAR 0 1
36071: PUSH
36072: DOUBLE
36073: LD_INT 1
36075: DEC
36076: ST_TO_ADDR
36077: LD_OWVAR 67
36081: PUSH
36082: FOR_TO
36083: IFFALSE 36205
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36085: LD_INT 13
36087: PPUSH
36088: LD_INT 3
36090: PPUSH
36091: LD_INT 5
36093: PPUSH
36094: LD_INT 29
36096: PPUSH
36097: LD_INT 100
36099: PPUSH
36100: CALL 2007 0 5
// un := CreateVehicle ;
36104: LD_ADDR_VAR 0 2
36108: PUSH
36109: CALL_OW 45
36113: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: LD_INT 1
36126: PUSH
36127: LD_VAR 0 3
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PUSH
36136: LD_INT 1
36138: PLUS
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PPUSH
36144: LD_VAR 0 2
36148: PPUSH
36149: CALL 3179 0 3
36153: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36154: LD_VAR 0 2
36158: PPUSH
36159: LD_INT 3
36161: PPUSH
36162: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36166: LD_VAR 0 2
36170: PPUSH
36171: LD_INT 16
36173: PPUSH
36174: LD_INT 0
36176: PPUSH
36177: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36181: LD_VAR 0 2
36185: PPUSH
36186: LD_INT 51
36188: PPUSH
36189: LD_INT 10
36191: PPUSH
36192: CALL_OW 111
// wait ( 0 0$2 ) ;
36196: LD_INT 70
36198: PPUSH
36199: CALL_OW 67
// end ;
36203: GO 36082
36205: POP
36206: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36207: LD_ADDR_VAR 0 5
36211: PUSH
36212: LD_INT 51
36214: PUSH
36215: LD_INT 24
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 75
36224: PUSH
36225: LD_INT 90
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36236: LD_INT 1
36238: PPUSH
36239: LD_VAR 0 3
36243: PUSH
36244: LD_INT 1
36246: ARRAY
36247: PPUSH
36248: LD_VAR 0 5
36252: PPUSH
36253: LD_VAR 0 6
36257: PPUSH
36258: CALL 54658 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36262: LD_ADDR_VAR 0 1
36266: PUSH
36267: DOUBLE
36268: LD_INT 1
36270: DEC
36271: ST_TO_ADDR
36272: LD_INT 2
36274: PUSH
36275: LD_INT 3
36277: PUSH
36278: LD_INT 3
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: LD_OWVAR 67
36290: ARRAY
36291: PUSH
36292: FOR_TO
36293: IFFALSE 36377
// begin PrepareHuman ( false , 17 , skill ) ;
36295: LD_INT 0
36297: PPUSH
36298: LD_INT 17
36300: PPUSH
36301: LD_VAR 0 4
36305: PPUSH
36306: CALL_OW 380
// un := CreateHuman ;
36310: LD_ADDR_VAR 0 2
36314: PUSH
36315: CALL_OW 44
36319: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_VAR 0 3
36329: PPUSH
36330: LD_INT 2
36332: PUSH
36333: LD_VAR 0 3
36337: PUSH
36338: LD_INT 2
36340: ARRAY
36341: PUSH
36342: LD_INT 1
36344: PLUS
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PPUSH
36350: LD_VAR 0 2
36354: PPUSH
36355: CALL 3179 0 3
36359: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36360: LD_VAR 0 2
36364: PPUSH
36365: LD_INT 13
36367: PPUSH
36368: LD_INT 0
36370: PPUSH
36371: CALL_OW 49
// end ;
36375: GO 36292
36377: POP
36378: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36379: LD_ADDR_VAR 0 1
36383: PUSH
36384: DOUBLE
36385: LD_INT 1
36387: DEC
36388: ST_TO_ADDR
36389: LD_INT 2
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: LD_INT 3
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_OWVAR 67
36407: ARRAY
36408: PUSH
36409: FOR_TO
36410: IFFALSE 36513
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36412: LD_INT 0
36414: PPUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 8
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 1
36427: PPUSH
36428: LD_INT 2
36430: PPUSH
36431: CALL_OW 12
36435: ARRAY
36436: PPUSH
36437: LD_VAR 0 4
36441: PPUSH
36442: CALL_OW 380
// un := CreateHuman ;
36446: LD_ADDR_VAR 0 2
36450: PUSH
36451: CALL_OW 44
36455: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_VAR 0 3
36465: PPUSH
36466: LD_INT 2
36468: PUSH
36469: LD_VAR 0 3
36473: PUSH
36474: LD_INT 2
36476: ARRAY
36477: PUSH
36478: LD_INT 1
36480: PLUS
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PPUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: CALL 3179 0 3
36495: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36496: LD_VAR 0 2
36500: PPUSH
36501: LD_INT 13
36503: PPUSH
36504: LD_INT 0
36506: PPUSH
36507: CALL_OW 49
// end ;
36511: GO 36409
36513: POP
36514: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36515: LD_ADDR_VAR 0 5
36519: PUSH
36520: LD_INT 67
36522: PUSH
36523: LD_INT 112
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 85
36532: PUSH
36533: LD_INT 130
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36544: LD_INT 2
36546: PPUSH
36547: LD_VAR 0 3
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: LD_VAR 0 6
36565: PPUSH
36566: CALL 54658 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36570: LD_ADDR_VAR 0 1
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_INT 1
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: PUSH
36594: LD_OWVAR 67
36598: ARRAY
36599: PUSH
36600: FOR_TO
36601: IFFALSE 36685
// begin PrepareHuman ( false , 17 , skill ) ;
36603: LD_INT 0
36605: PPUSH
36606: LD_INT 17
36608: PPUSH
36609: LD_VAR 0 4
36613: PPUSH
36614: CALL_OW 380
// un := CreateHuman ;
36618: LD_ADDR_VAR 0 2
36622: PUSH
36623: CALL_OW 44
36627: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_VAR 0 3
36637: PPUSH
36638: LD_INT 3
36640: PUSH
36641: LD_VAR 0 3
36645: PUSH
36646: LD_INT 3
36648: ARRAY
36649: PUSH
36650: LD_INT 1
36652: PLUS
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PPUSH
36658: LD_VAR 0 2
36662: PPUSH
36663: CALL 3179 0 3
36667: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36668: LD_VAR 0 2
36672: PPUSH
36673: LD_INT 14
36675: PPUSH
36676: LD_INT 0
36678: PPUSH
36679: CALL_OW 49
// end ;
36683: GO 36600
36685: POP
36686: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_INT 148
36694: PUSH
36695: LD_INT 158
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 148
36704: PUSH
36705: LD_INT 158
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36716: LD_INT 3
36718: PPUSH
36719: LD_VAR 0 3
36723: PUSH
36724: LD_INT 3
36726: ARRAY
36727: PPUSH
36728: LD_VAR 0 5
36732: PPUSH
36733: LD_VAR 0 6
36737: PPUSH
36738: CALL 54658 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36742: LD_ADDR_VAR 0 1
36746: PUSH
36747: DOUBLE
36748: LD_INT 1
36750: DEC
36751: ST_TO_ADDR
36752: LD_INT 3
36754: PUSH
36755: LD_INT 4
36757: PUSH
36758: LD_INT 4
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: PUSH
36766: LD_OWVAR 67
36770: ARRAY
36771: PUSH
36772: FOR_TO
36773: IFFALSE 36981
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36775: LD_INT 14
36777: PPUSH
36778: LD_INT 3
36780: PPUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 5
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PPUSH
36794: LD_INT 2
36796: PPUSH
36797: CALL_OW 12
36801: ARRAY
36802: PPUSH
36803: LD_INT 27
36805: PUSH
36806: LD_INT 26
36808: PUSH
36809: LD_INT 28
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PPUSH
36820: LD_INT 3
36822: PPUSH
36823: CALL_OW 12
36827: ARRAY
36828: PPUSH
36829: LD_INT 100
36831: PPUSH
36832: CALL 2007 0 5
// un := CreateVehicle ;
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: CALL_OW 45
36845: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36846: LD_ADDR_VAR 0 3
36850: PUSH
36851: LD_VAR 0 3
36855: PPUSH
36856: LD_INT 4
36858: PUSH
36859: LD_VAR 0 3
36863: PUSH
36864: LD_INT 4
36866: ARRAY
36867: PUSH
36868: LD_INT 1
36870: PLUS
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PPUSH
36876: LD_VAR 0 2
36880: PPUSH
36881: CALL 3179 0 3
36885: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36886: LD_VAR 0 2
36890: PPUSH
36891: LD_INT 5
36893: PPUSH
36894: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36898: LD_VAR 0 2
36902: PPUSH
36903: LD_INT 15
36905: PPUSH
36906: LD_INT 0
36908: PPUSH
36909: CALL_OW 49
// if GetControl ( un ) = control_manual then
36913: LD_VAR 0 2
36917: PPUSH
36918: CALL_OW 263
36922: PUSH
36923: LD_INT 1
36925: EQUAL
36926: IFFALSE 36957
// begin PrepareHuman ( false , 3 , skill ) ;
36928: LD_INT 0
36930: PPUSH
36931: LD_INT 3
36933: PPUSH
36934: LD_VAR 0 4
36938: PPUSH
36939: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36943: CALL_OW 44
36947: PPUSH
36948: LD_VAR 0 2
36952: PPUSH
36953: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_INT 179
36964: PPUSH
36965: LD_INT 135
36967: PPUSH
36968: CALL_OW 111
// wait ( 0 0$2 ) ;
36972: LD_INT 70
36974: PPUSH
36975: CALL_OW 67
// end ;
36979: GO 36772
36981: POP
36982: POP
// vc_chassis := 15 ;
36983: LD_ADDR_OWVAR 37
36987: PUSH
36988: LD_INT 15
36990: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36991: LD_ADDR_VAR 0 3
36995: PUSH
36996: LD_VAR 0 3
37000: PPUSH
37001: LD_INT 4
37003: PUSH
37004: LD_VAR 0 3
37008: PUSH
37009: LD_INT 4
37011: ARRAY
37012: PUSH
37013: LD_INT 1
37015: PLUS
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PPUSH
37021: CALL_OW 45
37025: PPUSH
37026: CALL 3179 0 3
37030: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37031: LD_VAR 0 3
37035: PUSH
37036: LD_INT 4
37038: ARRAY
37039: PUSH
37040: LD_VAR 0 3
37044: PUSH
37045: LD_INT 4
37047: ARRAY
37048: ARRAY
37049: PPUSH
37050: LD_INT 15
37052: PPUSH
37053: LD_INT 0
37055: PPUSH
37056: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37060: LD_INT 0
37062: PPUSH
37063: LD_INT 11
37065: PPUSH
37066: LD_VAR 0 4
37070: PPUSH
37071: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_VAR 0 3
37084: PPUSH
37085: LD_INT 4
37087: PUSH
37088: LD_VAR 0 3
37092: PUSH
37093: LD_INT 4
37095: ARRAY
37096: PUSH
37097: LD_INT 1
37099: PLUS
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PPUSH
37105: CALL_OW 44
37109: PPUSH
37110: CALL 3179 0 3
37114: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37115: LD_VAR 0 3
37119: PUSH
37120: LD_INT 4
37122: ARRAY
37123: PUSH
37124: LD_VAR 0 3
37128: PUSH
37129: LD_INT 4
37131: ARRAY
37132: ARRAY
37133: PPUSH
37134: LD_VAR 0 3
37138: PUSH
37139: LD_INT 4
37141: ARRAY
37142: PUSH
37143: LD_VAR 0 3
37147: PUSH
37148: LD_INT 4
37150: ARRAY
37151: PUSH
37152: LD_INT 1
37154: MINUS
37155: ARRAY
37156: PPUSH
37157: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_INT 148
37168: PUSH
37169: LD_INT 140
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: EMPTY
37177: LIST
37178: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37179: LD_INT 1
37181: PPUSH
37182: LD_VAR 0 3
37186: PUSH
37187: LD_INT 4
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 5
37195: PPUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: CALL 54658 0 4
// if gensher_active then
37205: LD_EXP 17
37209: IFFALSE 37562
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37211: LD_EXP 41
37215: PPUSH
37216: LD_STRING D10-Diet-1
37218: PPUSH
37219: CALL_OW 94
// for i = 1 to 2 do
37223: LD_ADDR_VAR 0 1
37227: PUSH
37228: DOUBLE
37229: LD_INT 1
37231: DEC
37232: ST_TO_ADDR
37233: LD_INT 2
37235: PUSH
37236: FOR_TO
37237: IFFALSE 37359
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37239: LD_INT 13
37241: PPUSH
37242: LD_INT 3
37244: PPUSH
37245: LD_INT 5
37247: PPUSH
37248: LD_INT 29
37250: PPUSH
37251: LD_INT 100
37253: PPUSH
37254: CALL 2007 0 5
// un := CreateVehicle ;
37258: LD_ADDR_VAR 0 2
37262: PUSH
37263: CALL_OW 45
37267: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_VAR 0 3
37277: PPUSH
37278: LD_INT 5
37280: PUSH
37281: LD_VAR 0 3
37285: PUSH
37286: LD_INT 5
37288: ARRAY
37289: PUSH
37290: LD_INT 1
37292: PLUS
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PPUSH
37298: LD_VAR 0 2
37302: PPUSH
37303: CALL 3179 0 3
37307: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_INT 0
37315: PPUSH
37316: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37320: LD_VAR 0 2
37324: PPUSH
37325: LD_INT 23
37327: PPUSH
37328: LD_INT 0
37330: PPUSH
37331: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37335: LD_VAR 0 2
37339: PPUSH
37340: LD_INT 85
37342: PPUSH
37343: LD_INT 152
37345: PPUSH
37346: CALL_OW 111
// wait ( 0 0$2 ) ;
37350: LD_INT 70
37352: PPUSH
37353: CALL_OW 67
// end ;
37357: GO 37236
37359: POP
37360: POP
// for i = 1 to 3 do
37361: LD_ADDR_VAR 0 1
37365: PUSH
37366: DOUBLE
37367: LD_INT 1
37369: DEC
37370: ST_TO_ADDR
37371: LD_INT 3
37373: PUSH
37374: FOR_TO
37375: IFFALSE 37516
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37377: LD_INT 14
37379: PPUSH
37380: LD_INT 3
37382: PPUSH
37383: LD_INT 5
37385: PPUSH
37386: LD_INT 27
37388: PUSH
37389: LD_INT 28
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PPUSH
37399: LD_INT 2
37401: PPUSH
37402: CALL_OW 12
37406: ARRAY
37407: PPUSH
37408: LD_INT 100
37410: PPUSH
37411: CALL 2007 0 5
// un := CreateVehicle ;
37415: LD_ADDR_VAR 0 2
37419: PUSH
37420: CALL_OW 45
37424: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_VAR 0 3
37434: PPUSH
37435: LD_INT 5
37437: PUSH
37438: LD_VAR 0 3
37442: PUSH
37443: LD_INT 5
37445: ARRAY
37446: PUSH
37447: LD_INT 1
37449: PLUS
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PPUSH
37455: LD_VAR 0 2
37459: PPUSH
37460: CALL 3179 0 3
37464: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37465: LD_VAR 0 2
37469: PPUSH
37470: LD_INT 0
37472: PPUSH
37473: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37477: LD_VAR 0 2
37481: PPUSH
37482: LD_INT 23
37484: PPUSH
37485: LD_INT 0
37487: PPUSH
37488: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37492: LD_VAR 0 2
37496: PPUSH
37497: LD_INT 85
37499: PPUSH
37500: LD_INT 152
37502: PPUSH
37503: CALL_OW 111
// wait ( 0 0$2 ) ;
37507: LD_INT 70
37509: PPUSH
37510: CALL_OW 67
// end ;
37514: GO 37374
37516: POP
37517: POP
// coords := [ [ 97 , 143 ] ] ;
37518: LD_ADDR_VAR 0 5
37522: PUSH
37523: LD_INT 97
37525: PUSH
37526: LD_INT 143
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37536: LD_INT 1
37538: PPUSH
37539: LD_VAR 0 3
37543: PUSH
37544: LD_INT 5
37546: ARRAY
37547: PPUSH
37548: LD_VAR 0 5
37552: PPUSH
37553: LD_VAR 0 6
37557: PPUSH
37558: CALL 54658 0 4
// end ; Wait ( 10 10$00 ) ;
37562: LD_INT 21000
37564: PPUSH
37565: CALL_OW 67
// tmp := [ ] ;
37569: LD_ADDR_VAR 0 3
37573: PUSH
37574: EMPTY
37575: ST_TO_ADDR
// w := 1 ;
37576: LD_ADDR_VAR 0 7
37580: PUSH
37581: LD_INT 1
37583: ST_TO_ADDR
// repeat tmp := [ ] ;
37584: LD_ADDR_VAR 0 3
37588: PUSH
37589: EMPTY
37590: ST_TO_ADDR
// if w mod 4 = 0 then
37591: LD_VAR 0 7
37595: PUSH
37596: LD_INT 4
37598: MOD
37599: PUSH
37600: LD_INT 0
37602: EQUAL
37603: IFFALSE 37690
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37605: LD_ADDR_VAR 0 8
37609: PUSH
37610: LD_INT 11
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: LD_INT 24
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 11
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 24
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 11
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: LD_INT 24
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 11
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 24
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
37688: GO 37792
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37690: LD_ADDR_VAR 0 8
37694: PUSH
37695: LD_INT 14
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 28
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 14
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 25
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 14
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: LD_INT 28
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 14
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: LD_INT 29
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 11
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 24
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: ST_TO_ADDR
// if w mod 3 = 0 then
37792: LD_VAR 0 7
37796: PUSH
37797: LD_INT 3
37799: MOD
37800: PUSH
37801: LD_INT 0
37803: EQUAL
37804: IFFALSE 37880
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37806: LD_ADDR_VAR 0 8
37810: PUSH
37811: LD_VAR 0 8
37815: PPUSH
37816: LD_INT 1
37818: PUSH
37819: LD_VAR 0 8
37823: PUSH
37824: LD_VAR 0 1
37828: ARRAY
37829: PUSH
37830: LD_INT 1
37832: PLUS
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PPUSH
37838: LD_INT 14
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 25
37849: PUSH
37850: LD_INT 28
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PPUSH
37860: LD_INT 2
37862: PPUSH
37863: CALL_OW 12
37867: ARRAY
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL 3179 0 3
37879: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37880: LD_INT 1
37882: PPUSH
37883: LD_VAR 0 8
37887: PPUSH
37888: CALL 54562 0 2
// if GetSide ( ar_dep_w ) = 2 then
37892: LD_INT 45
37894: PPUSH
37895: CALL_OW 255
37899: PUSH
37900: LD_INT 2
37902: EQUAL
37903: IFFALSE 37988
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
37905: LD_ADDR_VAR 0 8
37909: PUSH
37910: LD_INT 14
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: LD_INT 28
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 14
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 27
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 14
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 27
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
37969: LD_INT 2
37971: PPUSH
37972: LD_VAR 0 8
37976: PPUSH
37977: CALL 54562 0 2
// wait ( 0 0$50 ) ;
37981: LD_INT 1750
37983: PPUSH
37984: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
37988: LD_INT 35
37990: PPUSH
37991: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37995: LD_EXP 60
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: LD_INT 3
38006: PUSH
38007: LD_INT 34
38009: PUSH
38010: LD_INT 32
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 72
38025: PUSH
38026: LD_INT 4
38028: GREATEREQUAL
38029: IFFALSE 37988
// wait ( 0 0$10 ) ;
38031: LD_INT 350
38033: PPUSH
38034: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_EXP 60
38047: PUSH
38048: LD_INT 1
38050: ARRAY
38051: PPUSH
38052: LD_INT 3
38054: PUSH
38055: LD_INT 34
38057: PUSH
38058: LD_INT 32
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PPUSH
38069: CALL_OW 72
38073: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38074: LD_INT 100
38076: PPUSH
38077: CALL_OW 13
38081: PUSH
38082: LD_INT 50
38084: LESS
38085: IFFALSE 38118
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_INT 55
38094: PUSH
38095: LD_INT 7
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 75
38104: PUSH
38105: LD_INT 90
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: ST_TO_ADDR
38116: GO 38147
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38118: LD_ADDR_VAR 0 5
38122: PUSH
38123: LD_INT 128
38125: PUSH
38126: LD_INT 94
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 180
38135: PUSH
38136: LD_INT 135
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// if w mod 4 = 0 then
38147: LD_VAR 0 7
38151: PUSH
38152: LD_INT 4
38154: MOD
38155: PUSH
38156: LD_INT 0
38158: EQUAL
38159: IFFALSE 38190
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38161: LD_ADDR_VAR 0 5
38165: PUSH
38166: LD_INT 91
38168: PUSH
38169: LD_INT 58
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 117
38178: PUSH
38179: LD_INT 107
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38190: LD_INT 1
38192: PPUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: LD_VAR 0 5
38202: PPUSH
38203: LD_VAR 0 6
38207: PPUSH
38208: CALL 54658 0 4
// if mc_vehicles [ 2 ] then
38212: LD_EXP 60
38216: PUSH
38217: LD_INT 2
38219: ARRAY
38220: IFFALSE 38256
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38222: LD_INT 2
38224: PPUSH
38225: LD_EXP 60
38229: PUSH
38230: LD_INT 2
38232: ARRAY
38233: PPUSH
38234: LD_INT 73
38236: PUSH
38237: LD_INT 115
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: PPUSH
38247: LD_VAR 0 6
38251: PPUSH
38252: CALL 54658 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38256: LD_INT 19950
38258: PPUSH
38259: LD_INT 26250
38261: PPUSH
38262: CALL_OW 12
38266: PPUSH
38267: CALL_OW 67
// w := w + 1 ;
38271: LD_ADDR_VAR 0 7
38275: PUSH
38276: LD_VAR 0 7
38280: PUSH
38281: LD_INT 1
38283: PLUS
38284: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38285: LD_INT 94
38287: PPUSH
38288: CALL_OW 301
38292: PUSH
38293: LD_EXP 45
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: LD_INT 30
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PPUSH
38312: CALL_OW 72
38316: NOT
38317: OR
38318: IFFALSE 37584
// end ;
38320: PPOPN 8
38322: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38323: LD_INT 69
38325: IFFALSE 38700
38327: GO 38329
38329: DISABLE
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// begin enable ;
38336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38337: LD_INT 35
38339: PPUSH
38340: LD_INT 1190
38342: PPUSH
38343: CALL_OW 12
38347: PPUSH
38348: CALL_OW 67
// tmp := [ ] ;
38352: LD_ADDR_VAR 0 2
38356: PUSH
38357: EMPTY
38358: ST_TO_ADDR
// uc_side := 8 ;
38359: LD_ADDR_OWVAR 20
38363: PUSH
38364: LD_INT 8
38366: ST_TO_ADDR
// uc_nation := 2 ;
38367: LD_ADDR_OWVAR 21
38371: PUSH
38372: LD_INT 2
38374: ST_TO_ADDR
// InitHc ;
38375: CALL_OW 19
// for i = 1 to 3 do
38379: LD_ADDR_VAR 0 1
38383: PUSH
38384: DOUBLE
38385: LD_INT 1
38387: DEC
38388: ST_TO_ADDR
38389: LD_INT 3
38391: PUSH
38392: FOR_TO
38393: IFFALSE 38520
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38395: LD_INT 13
38397: PUSH
38398: LD_INT 14
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PPUSH
38408: LD_INT 2
38410: PPUSH
38411: CALL_OW 12
38415: ARRAY
38416: PPUSH
38417: LD_INT 3
38419: PPUSH
38420: LD_INT 5
38422: PPUSH
38423: LD_INT 27
38425: PUSH
38426: LD_INT 28
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: PPUSH
38436: LD_INT 2
38438: PPUSH
38439: CALL_OW 12
38443: ARRAY
38444: PPUSH
38445: LD_INT 100
38447: PPUSH
38448: CALL 2007 0 5
// un := CreateVehicle ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: CALL_OW 45
38461: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38462: LD_VAR 0 3
38466: PPUSH
38467: LD_INT 4
38469: PPUSH
38470: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38474: LD_VAR 0 3
38478: PPUSH
38479: LD_INT 15
38481: PPUSH
38482: LD_INT 0
38484: PPUSH
38485: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38489: LD_ADDR_VAR 0 2
38493: PUSH
38494: LD_VAR 0 2
38498: PPUSH
38499: LD_VAR 0 2
38503: PUSH
38504: LD_INT 1
38506: PLUS
38507: PPUSH
38508: LD_VAR 0 3
38512: PPUSH
38513: CALL_OW 1
38517: ST_TO_ADDR
// end ;
38518: GO 38392
38520: POP
38521: POP
// for i = 1 to 4 do
38522: LD_ADDR_VAR 0 1
38526: PUSH
38527: DOUBLE
38528: LD_INT 1
38530: DEC
38531: ST_TO_ADDR
38532: LD_INT 4
38534: PUSH
38535: FOR_TO
38536: IFFALSE 38615
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38538: LD_INT 0
38540: PPUSH
38541: LD_INT 1
38543: PPUSH
38544: LD_INT 4
38546: PPUSH
38547: CALL_OW 12
38551: PPUSH
38552: LD_INT 6
38554: PPUSH
38555: CALL_OW 380
// un := CreateHuman ;
38559: LD_ADDR_VAR 0 3
38563: PUSH
38564: CALL_OW 44
38568: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38569: LD_VAR 0 3
38573: PPUSH
38574: LD_INT 15
38576: PPUSH
38577: LD_INT 0
38579: PPUSH
38580: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38584: LD_ADDR_VAR 0 2
38588: PUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 1
38601: PLUS
38602: PPUSH
38603: LD_VAR 0 3
38607: PPUSH
38608: CALL_OW 1
38612: ST_TO_ADDR
// end ;
38613: GO 38535
38615: POP
38616: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38617: LD_VAR 0 2
38621: PPUSH
38622: LD_INT 210
38624: PPUSH
38625: LD_INT 177
38627: PPUSH
38628: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38632: LD_ADDR_VAR 0 4
38636: PUSH
38637: LD_INT 10
38639: PPUSH
38640: LD_INT 22
38642: PUSH
38643: LD_INT 8
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PPUSH
38650: CALL_OW 70
38654: ST_TO_ADDR
// if x then
38655: LD_VAR 0 4
38659: IFFALSE 38687
// for i in x do
38661: LD_ADDR_VAR 0 1
38665: PUSH
38666: LD_VAR 0 4
38670: PUSH
38671: FOR_IN
38672: IFFALSE 38685
// RemoveUnit ( i ) ;
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 64
38683: GO 38671
38685: POP
38686: POP
// wait ( 0 0$3 ) ;
38687: LD_INT 105
38689: PPUSH
38690: CALL_OW 67
// until tmp ;
38694: LD_VAR 0 2
38698: IFFALSE 38617
// end ; end_of_file
38700: PPOPN 4
38702: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
// InGameOn ;
38711: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38715: LD_EXP 18
38719: PPUSH
38720: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38724: LD_ADDR_VAR 0 2
38728: PUSH
38729: LD_INT 22
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 25
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PPUSH
38753: CALL_OW 69
38757: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
38758: LD_ADDR_VAR 0 4
38762: PUSH
38763: LD_INT 22
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 34
38775: PUSH
38776: LD_INT 11
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PPUSH
38787: CALL_OW 69
38791: PUSH
38792: LD_INT 1
38794: ARRAY
38795: ST_TO_ADDR
// for i = 1 to tmp do
38796: LD_ADDR_VAR 0 6
38800: PUSH
38801: DOUBLE
38802: LD_INT 1
38804: DEC
38805: ST_TO_ADDR
38806: LD_VAR 0 2
38810: PUSH
38811: FOR_TO
38812: IFFALSE 38859
// begin if i = 5 then
38814: LD_VAR 0 6
38818: PUSH
38819: LD_INT 5
38821: EQUAL
38822: IFFALSE 38826
// break ;
38824: GO 38859
// sols := Replace ( sols , i , tmp [ i ] ) ;
38826: LD_ADDR_VAR 0 5
38830: PUSH
38831: LD_VAR 0 5
38835: PPUSH
38836: LD_VAR 0 6
38840: PPUSH
38841: LD_VAR 0 2
38845: PUSH
38846: LD_VAR 0 6
38850: ARRAY
38851: PPUSH
38852: CALL_OW 1
38856: ST_TO_ADDR
// end ;
38857: GO 38811
38859: POP
38860: POP
// tmp := ar_force_tmp ;
38861: LD_ADDR_VAR 0 2
38865: PUSH
38866: LD_EXP 36
38870: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
38871: LD_VAR 0 2
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: LD_INT 108
38882: PPUSH
38883: LD_INT 139
38885: PPUSH
38886: LD_INT 0
38888: PPUSH
38889: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
38893: LD_VAR 0 2
38897: PUSH
38898: LD_INT 1
38900: ARRAY
38901: PPUSH
38902: LD_EXP 18
38906: PPUSH
38907: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 2
38918: ARRAY
38919: PPUSH
38920: LD_INT 114
38922: PPUSH
38923: LD_INT 132
38925: PPUSH
38926: LD_INT 0
38928: PPUSH
38929: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
38933: LD_VAR 0 2
38937: PUSH
38938: LD_INT 3
38940: ARRAY
38941: PPUSH
38942: LD_INT 115
38944: PPUSH
38945: LD_INT 132
38947: PPUSH
38948: LD_INT 0
38950: PPUSH
38951: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
38955: LD_VAR 0 2
38959: PUSH
38960: LD_INT 2
38962: ARRAY
38963: PUSH
38964: LD_VAR 0 2
38968: PUSH
38969: LD_INT 3
38971: ARRAY
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PPUSH
38977: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
38981: LD_VAR 0 4
38985: PPUSH
38986: LD_INT 83
38988: PPUSH
38989: LD_INT 123
38991: PPUSH
38992: CALL_OW 111
// Wait ( 0 0$01 ) ;
38996: LD_INT 35
38998: PPUSH
38999: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
39003: LD_INT 90
39005: PPUSH
39006: LD_INT 144
39008: PPUSH
39009: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39013: LD_VAR 0 5
39017: PPUSH
39018: LD_INT 88
39020: PPUSH
39021: LD_INT 129
39023: PPUSH
39024: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39028: LD_ADDR_VAR 0 3
39032: PUSH
39033: LD_INT 92
39035: PUSH
39036: LD_INT 131
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 88
39045: PUSH
39046: LD_INT 127
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 91
39055: PUSH
39056: LD_INT 132
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 92
39065: PUSH
39066: LD_INT 134
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// for i = 1 to sols do
39079: LD_ADDR_VAR 0 6
39083: PUSH
39084: DOUBLE
39085: LD_INT 1
39087: DEC
39088: ST_TO_ADDR
39089: LD_VAR 0 5
39093: PUSH
39094: FOR_TO
39095: IFFALSE 39168
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39097: LD_VAR 0 5
39101: PUSH
39102: LD_VAR 0 6
39106: ARRAY
39107: PPUSH
39108: LD_VAR 0 3
39112: PUSH
39113: LD_VAR 0 6
39117: ARRAY
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: PPUSH
39123: LD_VAR 0 3
39127: PUSH
39128: LD_VAR 0 6
39132: ARRAY
39133: PUSH
39134: LD_INT 2
39136: ARRAY
39137: PPUSH
39138: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39142: LD_VAR 0 5
39146: PUSH
39147: LD_VAR 0 6
39151: ARRAY
39152: PPUSH
39153: CALL_OW 197
// AddComHold ( sols ) ;
39157: LD_VAR 0 5
39161: PPUSH
39162: CALL_OW 200
// end ;
39166: GO 39094
39168: POP
39169: POP
// repeat wait ( 0 0$1 ) ;
39170: LD_INT 35
39172: PPUSH
39173: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39177: LD_VAR 0 5
39181: PUSH
39182: LD_INT 1
39184: ARRAY
39185: PPUSH
39186: LD_INT 92
39188: PPUSH
39189: LD_INT 131
39191: PPUSH
39192: CALL_OW 297
39196: PUSH
39197: LD_INT 4
39199: LESS
39200: IFFALSE 39170
// CenterOnXY ( 96 , 139 ) ;
39202: LD_INT 96
39204: PPUSH
39205: LD_INT 139
39207: PPUSH
39208: CALL_OW 84
// wait ( 0 0$3 ) ;
39212: LD_INT 105
39214: PPUSH
39215: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39219: LD_INT 111
39221: PPUSH
39222: LD_INT 135
39224: PPUSH
39225: LD_INT 1
39227: PPUSH
39228: LD_INT 25
39230: NEG
39231: PPUSH
39232: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39236: LD_VAR 0 2
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: PPUSH
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PPUSH
39254: CALL_OW 250
39258: PUSH
39259: LD_INT 3
39261: PLUS
39262: PPUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: CALL_OW 251
39276: PPUSH
39277: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39281: LD_VAR 0 2
39285: PUSH
39286: LD_INT 3
39288: ARRAY
39289: PPUSH
39290: LD_INT 7
39292: PPUSH
39293: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39297: LD_VAR 0 2
39301: PUSH
39302: LD_INT 2
39304: ARRAY
39305: PPUSH
39306: LD_VAR 0 2
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PPUSH
39315: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39319: LD_INT 35
39321: PPUSH
39322: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: PPUSH
39335: LD_VAR 0 2
39339: PUSH
39340: LD_INT 2
39342: ARRAY
39343: PPUSH
39344: CALL_OW 296
39348: PUSH
39349: LD_INT 5
39351: LESS
39352: IFFALSE 39319
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39354: LD_VAR 0 2
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: PPUSH
39363: LD_VAR 0 2
39367: PUSH
39368: LD_INT 2
39370: ARRAY
39371: PPUSH
39372: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39376: LD_VAR 0 2
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: PPUSH
39385: LD_STRING D1a-Merc1-1
39387: PPUSH
39388: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39392: LD_VAR 0 2
39396: PUSH
39397: LD_INT 2
39399: ARRAY
39400: PPUSH
39401: LD_STRING D1a-FMerc2-1
39403: PPUSH
39404: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: PPUSH
39417: LD_VAR 0 2
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: PPUSH
39426: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: PPUSH
39439: LD_INT 500
39441: PPUSH
39442: CALL_OW 234
// wait ( 0 0$2 ) ;
39446: LD_INT 70
39448: PPUSH
39449: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: LD_INT 2
39464: PPUSH
39465: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39469: LD_INT 10
39471: PPUSH
39472: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PPUSH
39485: LD_STRING D1a-Merc1-2
39487: PPUSH
39488: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39492: LD_INT 7
39494: PPUSH
39495: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39512: LD_VAR 0 2
39516: PUSH
39517: LD_INT 2
39519: ARRAY
39520: PPUSH
39521: LD_INT 10
39523: PPUSH
39524: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39528: LD_VAR 0 2
39532: PUSH
39533: LD_INT 2
39535: ARRAY
39536: PPUSH
39537: LD_STRING D1a-FMerc2-2
39539: PPUSH
39540: CALL_OW 88
// wait ( 0 0$1 ) ;
39544: LD_INT 35
39546: PPUSH
39547: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39551: LD_INT 7
39553: PPUSH
39554: CALL_OW 85
// wait ( 0 0$2 ) ;
39558: LD_INT 70
39560: PPUSH
39561: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39565: LD_EXP 40
39569: PPUSH
39570: LD_STRING D1a-Saliba-1
39572: PPUSH
39573: CALL_OW 91
// KillUnit ( Saliba ) ;
39577: LD_EXP 40
39581: PPUSH
39582: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39586: LD_VAR 0 2
39590: PUSH
39591: LD_INT 3
39593: ARRAY
39594: PPUSH
39595: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39599: LD_EXP 18
39603: PPUSH
39604: CALL_OW 85
// wait ( 0 0$1 ) ;
39608: LD_INT 35
39610: PPUSH
39611: CALL_OW 67
// InGameOff ;
39615: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39619: LD_STRING M1
39621: PPUSH
39622: CALL_OW 337
// game_speed := 4 ;
39626: LD_ADDR_OWVAR 65
39630: PUSH
39631: LD_INT 4
39633: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39634: LD_INT 111
39636: PPUSH
39637: LD_INT 135
39639: PPUSH
39640: LD_INT 1
39642: PPUSH
39643: CALL_OW 331
// SaveForQuickRestart ;
39647: CALL_OW 22
// ar_run := true ;
39651: LD_ADDR_EXP 5
39655: PUSH
39656: LD_INT 1
39658: ST_TO_ADDR
// end ;
39659: LD_VAR 0 1
39663: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39664: LD_EXP 5
39668: IFFALSE 40010
39670: GO 39672
39672: DISABLE
39673: LD_INT 0
39675: PPUSH
39676: PPUSH
39677: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
39678: LD_ADDR_VAR 0 2
39682: PUSH
39683: LD_EXP 36
39687: PUSH
39688: LD_EXP 33
39692: PPUSH
39693: LD_INT 21
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: CALL_OW 72
39707: ADD
39708: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
39709: LD_VAR 0 2
39713: PPUSH
39714: LD_INT 5
39716: PPUSH
39717: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
39721: LD_INT 5
39723: PPUSH
39724: LD_INT 1
39726: PPUSH
39727: CALL_OW 343
// k := 1 ;
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_INT 1
39738: ST_TO_ADDR
// for i in tmp do
39739: LD_ADDR_VAR 0 1
39743: PUSH
39744: LD_VAR 0 2
39748: PUSH
39749: FOR_IN
39750: IFFALSE 39835
// begin if IsInUnit ( i ) then
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 310
39761: IFFALSE 39772
// ComExitBuilding ( i ) ;
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 122
// if GetClass ( i ) = 3 then
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 257
39781: PUSH
39782: LD_INT 3
39784: EQUAL
39785: IFFALSE 39821
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
39787: LD_VAR 0 1
39791: PPUSH
39792: LD_EXP 37
39796: PUSH
39797: LD_VAR 0 3
39801: ARRAY
39802: PPUSH
39803: CALL_OW 180
// k := k + 1 ;
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_VAR 0 3
39816: PUSH
39817: LD_INT 1
39819: PLUS
39820: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
39821: LD_VAR 0 1
39825: PPUSH
39826: LD_INT 10
39828: PPUSH
39829: CALL_OW 173
// end ;
39833: GO 39749
39835: POP
39836: POP
// ar_patrol := true ;
39837: LD_ADDR_EXP 7
39841: PUSH
39842: LD_INT 1
39844: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
39845: LD_INT 10
39847: PPUSH
39848: CALL_OW 67
// for i in tmp do
39852: LD_ADDR_VAR 0 1
39856: PUSH
39857: LD_VAR 0 2
39861: PUSH
39862: FOR_IN
39863: IFFALSE 39891
// if not HasTask ( i ) then
39865: LD_VAR 0 1
39869: PPUSH
39870: CALL_OW 314
39874: NOT
39875: IFFALSE 39889
// ComMoveToArea ( i , escape_area ) ;
39877: LD_VAR 0 1
39881: PPUSH
39882: LD_INT 10
39884: PPUSH
39885: CALL_OW 113
39889: GO 39862
39891: POP
39892: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
39893: LD_ADDR_VAR 0 3
39897: PUSH
39898: LD_VAR 0 2
39902: PPUSH
39903: LD_INT 95
39905: PUSH
39906: LD_INT 10
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 72
39917: ST_TO_ADDR
// if k then
39918: LD_VAR 0 3
39922: IFFALSE 39991
// for i in k do
39924: LD_ADDR_VAR 0 1
39928: PUSH
39929: LD_VAR 0 3
39933: PUSH
39934: FOR_IN
39935: IFFALSE 39989
// begin if IsInUnit ( i ) then
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 310
39946: IFFALSE 39962
// RemoveUnit ( IsInUnit ( i ) ) ;
39948: LD_VAR 0 1
39952: PPUSH
39953: CALL_OW 310
39957: PPUSH
39958: CALL_OW 64
// RemoveUnit ( i ) ;
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 64
// tmp := tmp diff i ;
39971: LD_ADDR_VAR 0 2
39975: PUSH
39976: LD_VAR 0 2
39980: PUSH
39981: LD_VAR 0 1
39985: DIFF
39986: ST_TO_ADDR
// end ;
39987: GO 39934
39989: POP
39990: POP
// until tmp = [ ] ;
39991: LD_VAR 0 2
39995: PUSH
39996: EMPTY
39997: EQUAL
39998: IFFALSE 39845
// ChangeSideFog ( 5 , 5 ) ;
40000: LD_INT 5
40002: PPUSH
40003: LD_INT 5
40005: PPUSH
40006: CALL_OW 343
// end ;
40010: PPOPN 3
40012: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40013: LD_EXP 7
40017: IFFALSE 40307
40019: GO 40021
40021: DISABLE
40022: LD_INT 0
40024: PPUSH
40025: PPUSH
40026: PPUSH
// begin uc_side := 2 ;
40027: LD_ADDR_OWVAR 20
40031: PUSH
40032: LD_INT 2
40034: ST_TO_ADDR
// uc_nation := 2 ;
40035: LD_ADDR_OWVAR 21
40039: PUSH
40040: LD_INT 2
40042: ST_TO_ADDR
// InitHc ;
40043: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40047: LD_INT 1
40049: PPUSH
40050: LD_INT 1
40052: PPUSH
40053: LD_INT 6
40055: PPUSH
40056: CALL_OW 380
// un := CreateHuman ;
40060: LD_ADDR_VAR 0 2
40064: PUSH
40065: CALL_OW 44
40069: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40070: LD_INT 14
40072: PPUSH
40073: LD_INT 1
40075: PPUSH
40076: LD_INT 1
40078: PPUSH
40079: LD_INT 27
40081: PPUSH
40082: LD_INT 98
40084: PPUSH
40085: CALL 2007 0 5
// veh := CreateVehicle ;
40089: LD_ADDR_VAR 0 3
40093: PUSH
40094: CALL_OW 45
40098: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40099: LD_VAR 0 3
40103: PPUSH
40104: LD_INT 4
40106: PPUSH
40107: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40111: LD_VAR 0 3
40115: PPUSH
40116: LD_INT 179
40118: PPUSH
40119: LD_INT 135
40121: PPUSH
40122: LD_INT 0
40124: PPUSH
40125: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40129: LD_VAR 0 2
40133: PPUSH
40134: LD_VAR 0 3
40138: PPUSH
40139: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40143: LD_VAR 0 2
40147: PPUSH
40148: LD_INT 126
40150: PPUSH
40151: LD_INT 133
40153: PPUSH
40154: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40158: LD_INT 10
40160: PPUSH
40161: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40165: LD_INT 1
40167: PPUSH
40168: LD_VAR 0 3
40172: PPUSH
40173: CALL_OW 292
40177: PUSH
40178: LD_VAR 0 3
40182: PPUSH
40183: LD_INT 7
40185: PPUSH
40186: CALL_OW 296
40190: PUSH
40191: LD_INT 9
40193: LESS
40194: OR
40195: IFFALSE 40158
// ComHold ( veh ) ;
40197: LD_VAR 0 3
40201: PPUSH
40202: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40206: LD_VAR 0 2
40210: PPUSH
40211: LD_STRING D2aa-Ar1-1
40213: PPUSH
40214: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40218: LD_VAR 0 2
40222: PPUSH
40223: LD_INT 177
40225: PPUSH
40226: LD_INT 96
40228: PPUSH
40229: CALL_OW 111
// AddComExitVehicle ( un ) ;
40233: LD_VAR 0 2
40237: PPUSH
40238: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40242: LD_INT 35
40244: PPUSH
40245: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40249: LD_VAR 0 2
40253: PPUSH
40254: LD_INT 69
40256: PPUSH
40257: CALL_OW 296
40261: PUSH
40262: LD_INT 15
40264: LESS
40265: IFFALSE 40242
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40267: LD_ADDR_EXP 45
40271: PUSH
40272: LD_EXP 45
40276: PPUSH
40277: LD_INT 3
40279: PUSH
40280: LD_EXP 45
40284: PUSH
40285: LD_INT 3
40287: ARRAY
40288: PUSH
40289: LD_INT 1
40291: PLUS
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PPUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: CALL 3179 0 3
40306: ST_TO_ADDR
// end ;
40307: PPOPN 3
40309: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40310: LD_INT 7
40312: PPUSH
40313: CALL_OW 255
40317: PUSH
40318: LD_INT 1
40320: EQUAL
40321: PUSH
40322: LD_INT 7
40324: PPUSH
40325: CALL_OW 301
40329: OR
40330: IFFALSE 42697
40332: GO 40334
40334: DISABLE
40335: LD_INT 0
40337: PPUSH
40338: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40339: LD_ADDR_VAR 0 2
40343: PUSH
40344: LD_INT 46
40346: PUSH
40347: LD_INT 41
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 50
40356: PUSH
40357: LD_INT 25
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 57
40366: PUSH
40367: LD_INT 75
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 75
40376: PUSH
40377: LD_INT 89
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 51
40386: PUSH
40387: LD_INT 45
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 95
40396: PUSH
40397: LD_INT 95
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 84
40406: PUSH
40407: LD_INT 77
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 101
40416: PUSH
40417: LD_INT 76
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 118
40426: PUSH
40427: LD_INT 81
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 139
40436: PUSH
40437: LD_INT 97
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 129
40446: PUSH
40447: LD_INT 114
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 154
40456: PUSH
40457: LD_INT 111
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// base_captured := true ;
40478: LD_ADDR_EXP 6
40482: PUSH
40483: LD_INT 1
40485: ST_TO_ADDR
// DialogueOn ;
40486: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40490: LD_EXP 18
40494: PPUSH
40495: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40499: LD_EXP 18
40503: PPUSH
40504: LD_STRING D2-JMM-1
40506: PPUSH
40507: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40511: LD_EXP 27
40515: PPUSH
40516: LD_STRING D2-Pow-1
40518: PPUSH
40519: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40523: LD_EXP 18
40527: PPUSH
40528: LD_STRING D2-JMM-2
40530: PPUSH
40531: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40535: LD_EXP 27
40539: PPUSH
40540: LD_STRING D2-Pow-2
40542: PPUSH
40543: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40547: LD_EXP 18
40551: PPUSH
40552: LD_STRING D2-JMM-3
40554: PPUSH
40555: CALL_OW 88
// DialogueOff ;
40559: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40563: LD_STRING M2
40565: PPUSH
40566: CALL_OW 337
// Wait ( 0 0$2 ) ;
40570: LD_INT 70
40572: PPUSH
40573: CALL_OW 67
// if IsOk ( Gary ) then
40577: LD_EXP 29
40581: PPUSH
40582: CALL_OW 302
40586: IFFALSE 40600
// Say ( Gary , D2a-Gary-1 ) ;
40588: LD_EXP 29
40592: PPUSH
40593: LD_STRING D2a-Gary-1
40595: PPUSH
40596: CALL_OW 88
// if IsOk ( Bobby ) then
40600: LD_EXP 21
40604: PPUSH
40605: CALL_OW 302
40609: IFFALSE 40623
// Say ( Bobby , D2a-Bobby-1 ) ;
40611: LD_EXP 21
40615: PPUSH
40616: LD_STRING D2a-Bobby-1
40618: PPUSH
40619: CALL_OW 88
// if IsOk ( Cyrus ) then
40623: LD_EXP 22
40627: PPUSH
40628: CALL_OW 302
40632: IFFALSE 40646
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40634: LD_EXP 22
40638: PPUSH
40639: LD_STRING D2a-Cyrus-1
40641: PPUSH
40642: CALL_OW 88
// if IsOk ( Lisa ) then
40646: LD_EXP 19
40650: PPUSH
40651: CALL_OW 302
40655: IFFALSE 40669
// Say ( Lisa , D2a-Lisa-1 ) ;
40657: LD_EXP 19
40661: PPUSH
40662: LD_STRING D2a-Lisa-1
40664: PPUSH
40665: CALL_OW 88
// if IsOk ( Frank ) then
40669: LD_EXP 30
40673: PPUSH
40674: CALL_OW 302
40678: IFFALSE 40692
// Say ( Frank , D2a-Frank-1 ) ;
40680: LD_EXP 30
40684: PPUSH
40685: LD_STRING D2a-Frank-1
40687: PPUSH
40688: CALL_OW 88
// if IsOk ( Cornel ) then
40692: LD_EXP 28
40696: PPUSH
40697: CALL_OW 302
40701: IFFALSE 40715
// Say ( Cornel , D2a-Corn-1 ) ;
40703: LD_EXP 28
40707: PPUSH
40708: LD_STRING D2a-Corn-1
40710: PPUSH
40711: CALL_OW 88
// if IsOk ( Donaldson ) then
40715: LD_EXP 20
40719: PPUSH
40720: CALL_OW 302
40724: IFFALSE 40738
// Say ( Donaldson , D2a-Don-1 ) ;
40726: LD_EXP 20
40730: PPUSH
40731: LD_STRING D2a-Don-1
40733: PPUSH
40734: CALL_OW 88
// if IsOk ( Brown ) then
40738: LD_EXP 24
40742: PPUSH
40743: CALL_OW 302
40747: IFFALSE 40761
// Say ( Brown , D2a-Brown-1 ) ;
40749: LD_EXP 24
40753: PPUSH
40754: LD_STRING D2a-Brown-1
40756: PPUSH
40757: CALL_OW 88
// Wait ( 0 0$30 ) ;
40761: LD_INT 1050
40763: PPUSH
40764: CALL_OW 67
// if IsOk ( Frank ) then
40768: LD_EXP 30
40772: PPUSH
40773: CALL_OW 302
40777: IFFALSE 41043
// begin DialogueOn ;
40779: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
40783: LD_EXP 18
40787: PUSH
40788: LD_EXP 30
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PPUSH
40797: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
40801: LD_EXP 30
40805: PPUSH
40806: LD_STRING D3F-Frank-1
40808: PPUSH
40809: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
40813: LD_EXP 18
40817: PPUSH
40818: LD_STRING D3F-JMM-1
40820: PPUSH
40821: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
40825: LD_EXP 30
40829: PPUSH
40830: LD_STRING D3F-Frank-2
40832: PPUSH
40833: CALL_OW 88
// case Query ( QFrank ) of 1 :
40837: LD_STRING QFrank
40839: PPUSH
40840: CALL_OW 97
40844: PUSH
40845: LD_INT 1
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40876
40853: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
40854: LD_EXP 18
40858: PPUSH
40859: LD_STRING D3Fa-JMM-1
40861: PPUSH
40862: CALL_OW 88
// us_scout := 1 ;
40866: LD_ADDR_EXP 8
40870: PUSH
40871: LD_INT 1
40873: ST_TO_ADDR
// end ; 2 :
40874: GO 41039
40876: LD_INT 2
40878: DOUBLE
40879: EQUAL
40880: IFTRUE 40884
40882: GO 41006
40884: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
40885: LD_EXP 18
40889: PPUSH
40890: LD_STRING D3Fb-JMM-1
40892: PPUSH
40893: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
40897: LD_EXP 30
40901: PPUSH
40902: LD_STRING D3Fb-Frank-1
40904: PPUSH
40905: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
40909: LD_STRING QFrank2
40911: PPUSH
40912: CALL_OW 97
40916: PUSH
40917: LD_INT 1
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40925
40923: GO 40972
40925: POP
// begin us_scout := 2 ;
40926: LD_ADDR_EXP 8
40930: PUSH
40931: LD_INT 2
40933: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
40934: LD_EXP 18
40938: PPUSH
40939: LD_STRING D3Fba-JMM-1
40941: PPUSH
40942: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
40946: LD_EXP 30
40950: PPUSH
40951: LD_STRING D3Fba-Frank-1
40953: PPUSH
40954: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
40958: LD_EXP 18
40962: PPUSH
40963: LD_STRING D3Fba-JMM-2
40965: PPUSH
40966: CALL_OW 88
// end ; 2 :
40970: GO 41004
40972: LD_INT 2
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 41003
40980: POP
// begin us_scout := 0 ;
40981: LD_ADDR_EXP 8
40985: PUSH
40986: LD_INT 0
40988: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
40989: LD_EXP 18
40993: PPUSH
40994: LD_STRING D3Fbb-JMM-1
40996: PPUSH
40997: CALL_OW 88
// end ; end ;
41001: GO 41004
41003: POP
// end ; 3 :
41004: GO 41039
41006: LD_INT 3
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41014
41012: GO 41038
41014: POP
// begin us_scout := - 1 ;
41015: LD_ADDR_EXP 8
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41024: LD_EXP 18
41028: PPUSH
41029: LD_STRING D3Fc-JMM-1
41031: PPUSH
41032: CALL_OW 88
// end ; end ;
41036: GO 41039
41038: POP
// DialogueOff ;
41039: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41043: LD_EXP 8
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: IN
41059: IFFALSE 41063
// exit ;
41061: GO 42697
// if us_scout in [ 1 , 2 ] then
41063: LD_EXP 8
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: IN
41078: IFFALSE 41779
// begin if IsInUnit ( Frank ) then
41080: LD_EXP 30
41084: PPUSH
41085: CALL_OW 310
41089: IFFALSE 41100
// ComExitBuilding ( Frank ) ;
41091: LD_EXP 30
41095: PPUSH
41096: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41100: LD_EXP 30
41104: PPUSH
41105: CALL_OW 311
41109: IFFALSE 41120
// ComExitVehicle ( Frank ) ;
41111: LD_EXP 30
41115: PPUSH
41116: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41120: LD_EXP 30
41124: PPUSH
41125: LD_INT 4
41127: PPUSH
41128: CALL_OW 235
// wait ( 0 0$1 ) ;
41132: LD_INT 35
41134: PPUSH
41135: CALL_OW 67
// if us_scout = 2 then
41139: LD_EXP 8
41143: PUSH
41144: LD_INT 2
41146: EQUAL
41147: IFFALSE 41515
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41149: LD_EXP 30
41153: PPUSH
41154: LD_INT 75
41156: PPUSH
41157: LD_INT 63
41159: PPUSH
41160: CALL_OW 111
// AddComHold ( Frank ) ;
41164: LD_EXP 30
41168: PPUSH
41169: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41173: LD_EXP 30
41177: PPUSH
41178: LD_INT 770
41180: PPUSH
41181: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41185: LD_EXP 30
41189: PPUSH
41190: LD_INT 100
41192: PPUSH
41193: LD_INT 75
41195: PPUSH
41196: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41200: LD_EXP 30
41204: PPUSH
41205: LD_INT 123
41207: PPUSH
41208: LD_INT 103
41210: PPUSH
41211: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41215: LD_EXP 30
41219: PPUSH
41220: LD_INT 138
41222: PPUSH
41223: LD_INT 108
41225: PPUSH
41226: CALL_OW 171
// AddComHold ( Frank ) ;
41230: LD_EXP 30
41234: PPUSH
41235: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41239: LD_INT 35
41241: PPUSH
41242: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41246: LD_EXP 30
41250: PPUSH
41251: LD_INT 138
41253: PPUSH
41254: LD_INT 108
41256: PPUSH
41257: CALL_OW 307
41261: IFFALSE 41239
// AddComMoveXY ( Frank , 125 , 132 ) ;
41263: LD_EXP 30
41267: PPUSH
41268: LD_INT 125
41270: PPUSH
41271: LD_INT 132
41273: PPUSH
41274: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41278: LD_INT 35
41280: PPUSH
41281: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41285: LD_INT 1
41287: PPUSH
41288: LD_EXP 30
41292: PPUSH
41293: CALL_OW 292
41297: PUSH
41298: LD_EXP 30
41302: PPUSH
41303: LD_INT 7
41305: PPUSH
41306: CALL_OW 296
41310: PUSH
41311: LD_INT 7
41313: LESS
41314: OR
41315: IFFALSE 41278
// DialogueOn ;
41317: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41321: LD_EXP 30
41325: PPUSH
41326: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41330: LD_INT 10
41332: PPUSH
41333: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41337: LD_EXP 18
41341: PPUSH
41342: LD_STRING D4Fa-JMM-1
41344: PPUSH
41345: CALL_OW 88
// for i in points do
41349: LD_ADDR_VAR 0 1
41353: PUSH
41354: LD_VAR 0 2
41358: PUSH
41359: FOR_IN
41360: IFFALSE 41418
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41362: LD_VAR 0 1
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: PPUSH
41371: LD_VAR 0 1
41375: PUSH
41376: LD_INT 2
41378: ARRAY
41379: PPUSH
41380: LD_INT 1
41382: PPUSH
41383: LD_INT 20
41385: NEG
41386: PPUSH
41387: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41391: LD_VAR 0 1
41395: PUSH
41396: LD_INT 1
41398: ARRAY
41399: PPUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_INT 2
41407: ARRAY
41408: PPUSH
41409: LD_INT 1
41411: PPUSH
41412: CALL_OW 331
// end ;
41416: GO 41359
41418: POP
41419: POP
// dwait ( 0 0$0.5 ) ;
41420: LD_INT 18
41422: PPUSH
41423: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41427: LD_INT 42
41429: PPUSH
41430: LD_INT 27
41432: PPUSH
41433: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41437: LD_EXP 30
41441: PPUSH
41442: LD_STRING D4Fa-Frank-1
41444: PPUSH
41445: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41449: LD_INT 18
41451: PPUSH
41452: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41456: LD_EXP 18
41460: PPUSH
41461: LD_STRING D4Fa-JMM-2
41463: PPUSH
41464: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41468: LD_INT 118
41470: PPUSH
41471: LD_INT 80
41473: PPUSH
41474: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41478: LD_EXP 30
41482: PPUSH
41483: LD_STRING D4Fa-Frank-2
41485: PPUSH
41486: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41490: LD_INT 10
41492: PPUSH
41493: CALL_OW 68
// DialogueOff ;
41497: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41501: LD_EXP 30
41505: PPUSH
41506: LD_INT 1
41508: PPUSH
41509: CALL_OW 235
// end else
41513: GO 41777
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41515: LD_INT 2
41517: PPUSH
41518: LD_INT 4
41520: PPUSH
41521: LD_INT 2
41523: PPUSH
41524: LD_INT 1
41526: PPUSH
41527: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41531: LD_EXP 30
41535: PPUSH
41536: LD_INT 75
41538: PPUSH
41539: LD_INT 63
41541: PPUSH
41542: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41546: LD_EXP 30
41550: PPUSH
41551: LD_INT 175
41553: PPUSH
41554: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41558: LD_EXP 30
41562: PPUSH
41563: LD_INT 102
41565: PPUSH
41566: LD_INT 76
41568: PPUSH
41569: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41573: LD_EXP 30
41577: PPUSH
41578: LD_INT 108
41580: PPUSH
41581: LD_INT 70
41583: PPUSH
41584: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41588: LD_INT 35
41590: PPUSH
41591: CALL_OW 67
// until See ( 2 , Frank ) ;
41595: LD_INT 2
41597: PPUSH
41598: LD_EXP 30
41602: PPUSH
41603: CALL_OW 292
41607: IFFALSE 41588
// ComMoveXY ( Frank , 112 , 118 ) ;
41609: LD_EXP 30
41613: PPUSH
41614: LD_INT 112
41616: PPUSH
41617: LD_INT 118
41619: PPUSH
41620: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41624: LD_EXP 30
41628: PPUSH
41629: CALL_OW 256
41633: PUSH
41634: LD_INT 750
41636: GREATEREQUAL
41637: IFFALSE 41651
// SetLives ( Frank , 700 ) ;
41639: LD_EXP 30
41643: PPUSH
41644: LD_INT 700
41646: PPUSH
41647: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41651: LD_INT 35
41653: PPUSH
41654: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
41658: LD_INT 1
41660: PPUSH
41661: LD_EXP 30
41665: PPUSH
41666: CALL_OW 292
41670: PUSH
41671: LD_EXP 30
41675: PPUSH
41676: LD_INT 7
41678: PPUSH
41679: CALL_OW 296
41683: PUSH
41684: LD_INT 17
41686: LESS
41687: OR
41688: IFFALSE 41651
// DialogueOn ;
41690: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41694: LD_EXP 30
41698: PPUSH
41699: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
41703: LD_EXP 30
41707: PPUSH
41708: LD_STRING D4Fb-Frank-1
41710: PPUSH
41711: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
41715: LD_EXP 18
41719: PPUSH
41720: LD_STRING D4Fb-JMM-1
41722: PPUSH
41723: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
41727: LD_INT 2
41729: PPUSH
41730: LD_STRING D4Fb-FSci1-1
41732: PPUSH
41733: CALL 2236 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
41737: LD_EXP 30
41741: PPUSH
41742: LD_STRING D4Fb-Frank-2
41744: PPUSH
41745: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
41749: LD_EXP 18
41753: PPUSH
41754: LD_STRING D4Fb-JMM-2
41756: PPUSH
41757: CALL_OW 88
// DialogueOff ;
41761: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41765: LD_EXP 30
41769: PPUSH
41770: LD_INT 1
41772: PPUSH
41773: CALL_OW 235
// end ; end else
41777: GO 41936
// if IsOk ( Kikuchi ) then
41779: LD_EXP 31
41783: PPUSH
41784: CALL_OW 302
41788: IFFALSE 41936
// begin DialogueOn ;
41790: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
41794: LD_EXP 18
41798: PUSH
41799: LD_EXP 31
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PPUSH
41808: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
41812: LD_EXP 31
41816: PPUSH
41817: LD_STRING D3Y-Yam-1
41819: PPUSH
41820: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
41824: LD_EXP 18
41828: PPUSH
41829: LD_STRING D3Y-JMM-1
41831: PPUSH
41832: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
41836: LD_EXP 31
41840: PPUSH
41841: LD_STRING D3Y-Yam-2
41843: PPUSH
41844: CALL_OW 88
// case Query ( QYamoko ) of 1 :
41848: LD_STRING QYamoko
41850: PPUSH
41851: CALL_OW 97
41855: PUSH
41856: LD_INT 1
41858: DOUBLE
41859: EQUAL
41860: IFTRUE 41864
41862: GO 41899
41864: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
41865: LD_EXP 18
41869: PPUSH
41870: LD_STRING D3Ya-JMM-1
41872: PPUSH
41873: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
41877: LD_EXP 31
41881: PPUSH
41882: LD_STRING D3Ya-Yam-1
41884: PPUSH
41885: CALL_OW 88
// us_scout := 1 ;
41889: LD_ADDR_EXP 8
41893: PUSH
41894: LD_INT 1
41896: ST_TO_ADDR
// end ; 2 :
41897: GO 41932
41899: LD_INT 2
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41931
41907: POP
// begin us_scout := - 1 ;
41908: LD_ADDR_EXP 8
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
41917: LD_EXP 18
41921: PPUSH
41922: LD_STRING D3Yb-JMM-1
41924: PPUSH
41925: CALL_OW 88
// end ; end ;
41929: GO 41932
41931: POP
// DialogueOff ;
41932: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41936: LD_EXP 8
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: IN
41952: IFFALSE 41956
// exit ;
41954: GO 42697
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
41956: LD_ADDR_EXP 8
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: LIST
41974: PUSH
41975: LD_OWVAR 67
41979: ARRAY
41980: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
41981: LD_EXP 8
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: IN
41996: IFFALSE 42697
// begin if IsInUnit ( Kikuchi ) then
41998: LD_EXP 31
42002: PPUSH
42003: CALL_OW 310
42007: IFFALSE 42018
// ComExitBuilding ( Kikuchi ) ;
42009: LD_EXP 31
42013: PPUSH
42014: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42018: LD_EXP 31
42022: PPUSH
42023: CALL_OW 311
42027: IFFALSE 42038
// ComExitVehicle ( Kikuchi ) ;
42029: LD_EXP 31
42033: PPUSH
42034: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42038: LD_EXP 31
42042: PPUSH
42043: LD_INT 4
42045: PPUSH
42046: CALL_OW 235
// wait ( 0 0$1 ) ;
42050: LD_INT 35
42052: PPUSH
42053: CALL_OW 67
// if us_scout = 2 then
42057: LD_EXP 8
42061: PUSH
42062: LD_INT 2
42064: EQUAL
42065: IFFALSE 42445
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42067: LD_EXP 31
42071: PPUSH
42072: LD_INT 75
42074: PPUSH
42075: LD_INT 63
42077: PPUSH
42078: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42082: LD_EXP 31
42086: PPUSH
42087: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42091: LD_EXP 31
42095: PPUSH
42096: LD_INT 770
42098: PPUSH
42099: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42103: LD_EXP 31
42107: PPUSH
42108: LD_INT 100
42110: PPUSH
42111: LD_INT 75
42113: PPUSH
42114: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42118: LD_EXP 31
42122: PPUSH
42123: LD_INT 123
42125: PPUSH
42126: LD_INT 103
42128: PPUSH
42129: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42133: LD_EXP 31
42137: PPUSH
42138: LD_INT 138
42140: PPUSH
42141: LD_INT 108
42143: PPUSH
42144: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42148: LD_EXP 31
42152: PPUSH
42153: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42157: LD_INT 35
42159: PPUSH
42160: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42164: LD_EXP 31
42168: PPUSH
42169: LD_INT 138
42171: PPUSH
42172: LD_INT 108
42174: PPUSH
42175: CALL_OW 307
42179: IFFALSE 42157
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42181: LD_EXP 31
42185: PPUSH
42186: LD_INT 125
42188: PPUSH
42189: LD_INT 132
42191: PPUSH
42192: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42196: LD_INT 35
42198: PPUSH
42199: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42203: LD_INT 1
42205: PPUSH
42206: LD_EXP 31
42210: PPUSH
42211: CALL_OW 292
42215: PUSH
42216: LD_EXP 31
42220: PPUSH
42221: LD_INT 7
42223: PPUSH
42224: CALL_OW 296
42228: PUSH
42229: LD_INT 7
42231: LESS
42232: OR
42233: IFFALSE 42196
// DialogueOn ;
42235: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42239: LD_EXP 31
42243: PPUSH
42244: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42248: LD_INT 10
42250: PPUSH
42251: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42255: LD_EXP 31
42259: PPUSH
42260: LD_STRING D4Ya-Yam-1
42262: PPUSH
42263: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42267: LD_EXP 18
42271: PPUSH
42272: LD_STRING D4Ya-JMM-1
42274: PPUSH
42275: CALL_OW 88
// for i in points do
42279: LD_ADDR_VAR 0 1
42283: PUSH
42284: LD_VAR 0 2
42288: PUSH
42289: FOR_IN
42290: IFFALSE 42348
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 1
42299: ARRAY
42300: PPUSH
42301: LD_VAR 0 1
42305: PUSH
42306: LD_INT 2
42308: ARRAY
42309: PPUSH
42310: LD_INT 1
42312: PPUSH
42313: LD_INT 20
42315: NEG
42316: PPUSH
42317: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42321: LD_VAR 0 1
42325: PUSH
42326: LD_INT 1
42328: ARRAY
42329: PPUSH
42330: LD_VAR 0 1
42334: PUSH
42335: LD_INT 2
42337: ARRAY
42338: PPUSH
42339: LD_INT 1
42341: PPUSH
42342: CALL_OW 331
// end ;
42346: GO 42289
42348: POP
42349: POP
// dwait ( 0 0$0.5 ) ;
42350: LD_INT 18
42352: PPUSH
42353: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42357: LD_INT 42
42359: PPUSH
42360: LD_INT 27
42362: PPUSH
42363: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42367: LD_EXP 31
42371: PPUSH
42372: LD_STRING D4Ya-Yam-2
42374: PPUSH
42375: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42379: LD_INT 18
42381: PPUSH
42382: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42386: LD_INT 118
42388: PPUSH
42389: LD_INT 80
42391: PPUSH
42392: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42396: LD_EXP 18
42400: PPUSH
42401: LD_STRING D4Ya-JMM-2
42403: PPUSH
42404: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42408: LD_EXP 31
42412: PPUSH
42413: LD_STRING D4Ya-Yam-3
42415: PPUSH
42416: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42420: LD_INT 10
42422: PPUSH
42423: CALL_OW 68
// DialogueOff ;
42427: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42431: LD_EXP 31
42435: PPUSH
42436: LD_INT 1
42438: PPUSH
42439: CALL_OW 235
// end else
42443: GO 42697
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42445: LD_INT 2
42447: PPUSH
42448: LD_INT 4
42450: PPUSH
42451: LD_INT 2
42453: PPUSH
42454: LD_INT 1
42456: PPUSH
42457: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42461: LD_EXP 31
42465: PPUSH
42466: LD_INT 75
42468: PPUSH
42469: LD_INT 63
42471: PPUSH
42472: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42476: LD_EXP 31
42480: PPUSH
42481: LD_INT 175
42483: PPUSH
42484: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42488: LD_EXP 31
42492: PPUSH
42493: LD_INT 102
42495: PPUSH
42496: LD_INT 76
42498: PPUSH
42499: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42503: LD_EXP 31
42507: PPUSH
42508: LD_INT 108
42510: PPUSH
42511: LD_INT 70
42513: PPUSH
42514: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42518: LD_INT 35
42520: PPUSH
42521: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42525: LD_INT 2
42527: PPUSH
42528: LD_EXP 31
42532: PPUSH
42533: CALL_OW 292
42537: IFFALSE 42518
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42539: LD_EXP 31
42543: PPUSH
42544: LD_INT 112
42546: PPUSH
42547: LD_INT 118
42549: PPUSH
42550: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42554: LD_EXP 31
42558: PPUSH
42559: CALL_OW 256
42563: PUSH
42564: LD_INT 750
42566: GREATEREQUAL
42567: IFFALSE 42581
// SetLives ( Kikuchi , 700 ) ;
42569: LD_EXP 31
42573: PPUSH
42574: LD_INT 700
42576: PPUSH
42577: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42581: LD_INT 35
42583: PPUSH
42584: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42588: LD_INT 1
42590: PPUSH
42591: LD_EXP 31
42595: PPUSH
42596: CALL_OW 292
42600: PUSH
42601: LD_EXP 31
42605: PPUSH
42606: LD_INT 7
42608: PPUSH
42609: CALL_OW 296
42613: PUSH
42614: LD_INT 17
42616: LESS
42617: OR
42618: IFFALSE 42581
// DialogueOn ;
42620: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42624: LD_EXP 31
42628: PPUSH
42629: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42633: LD_EXP 31
42637: PPUSH
42638: LD_STRING D4Yb-Yam-1
42640: PPUSH
42641: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
42645: LD_EXP 18
42649: PPUSH
42650: LD_STRING D4Yb-JMM-1
42652: PPUSH
42653: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
42657: LD_EXP 31
42661: PPUSH
42662: LD_STRING D4Yb-Yam-2
42664: PPUSH
42665: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
42669: LD_EXP 18
42673: PPUSH
42674: LD_STRING D4Yb-JMM-2
42676: PPUSH
42677: CALL_OW 88
// DialogueOff ;
42681: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42685: LD_EXP 31
42689: PPUSH
42690: LD_INT 1
42692: PPUSH
42693: CALL_OW 235
// end ; end ; end ;
42697: PPOPN 2
42699: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
42700: LD_EXP 6
42704: IFFALSE 43729
42706: GO 42708
42708: DISABLE
42709: LD_INT 0
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
// begin enable ;
42715: ENABLE
// if not seen [ 1 ] then
42716: LD_EXP 9
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: NOT
42725: IFFALSE 42905
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
42727: LD_ADDR_VAR 0 2
42731: PUSH
42732: LD_INT 22
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 25
42747: PUSH
42748: LD_INT 11
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 33
42757: PUSH
42758: LD_INT 4
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PPUSH
42774: CALL_OW 69
42778: ST_TO_ADDR
// if tmp then
42779: LD_VAR 0 2
42783: IFFALSE 42905
// for i in tmp do
42785: LD_ADDR_VAR 0 1
42789: PUSH
42790: LD_VAR 0 2
42794: PUSH
42795: FOR_IN
42796: IFFALSE 42903
// if See ( 1 , i ) then
42798: LD_INT 1
42800: PPUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 292
42810: IFFALSE 42901
// begin seen := Replace ( seen , 1 , true ) ;
42812: LD_ADDR_EXP 9
42816: PUSH
42817: LD_EXP 9
42821: PPUSH
42822: LD_INT 1
42824: PPUSH
42825: LD_INT 1
42827: PPUSH
42828: CALL_OW 1
42832: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42833: LD_INT 1
42835: PPUSH
42836: CALL 2065 0 1
42840: IFFALSE 42901
// begin DialogueOn ;
42842: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42855: LD_INT 10
42857: PPUSH
42858: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_INT 1
42869: PPUSH
42870: LD_STRING D5a-Sol2-1
42872: PPUSH
42873: CALL 2236 0 2
42877: ST_TO_ADDR
// if not un then
42878: LD_VAR 0 3
42882: NOT
42883: IFFALSE 42895
// SayRand ( sex_female , D5a-FSol2-1 ) ;
42885: LD_INT 2
42887: PPUSH
42888: LD_STRING D5a-FSol2-1
42890: PPUSH
42891: CALL 2236 0 2
// DialogueOff ;
42895: CALL_OW 7
// break ;
42899: GO 42903
// end ; end ;
42901: GO 42795
42903: POP
42904: POP
// end ; if not seen [ 2 ] then
42905: LD_EXP 9
42909: PUSH
42910: LD_INT 2
42912: ARRAY
42913: NOT
42914: IFFALSE 43131
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
42916: LD_ADDR_VAR 0 2
42920: PUSH
42921: LD_INT 22
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 25
42933: PUSH
42934: LD_INT 17
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PPUSH
42945: CALL_OW 69
42949: ST_TO_ADDR
// if tmp then
42950: LD_VAR 0 2
42954: IFFALSE 43131
// for i in tmp do
42956: LD_ADDR_VAR 0 1
42960: PUSH
42961: LD_VAR 0 2
42965: PUSH
42966: FOR_IN
42967: IFFALSE 43129
// if See ( 1 , i ) then
42969: LD_INT 1
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 292
42981: IFFALSE 43127
// begin seen := Replace ( seen , 2 , true ) ;
42983: LD_ADDR_EXP 9
42987: PUSH
42988: LD_EXP 9
42992: PPUSH
42993: LD_INT 2
42995: PPUSH
42996: LD_INT 1
42998: PPUSH
42999: CALL_OW 1
43003: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43004: LD_INT 1
43006: PPUSH
43007: CALL 2065 0 1
43011: IFFALSE 43127
// begin DialogueOn ;
43013: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43026: LD_INT 10
43028: PPUSH
43029: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_INT 1
43040: PPUSH
43041: LD_STRING D5b-Sol1-1
43043: PPUSH
43044: CALL 2236 0 2
43048: ST_TO_ADDR
// if not un then
43049: LD_VAR 0 3
43053: NOT
43054: IFFALSE 43072
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43056: LD_ADDR_VAR 0 3
43060: PUSH
43061: LD_INT 2
43063: PPUSH
43064: LD_STRING D5b-FSol1-1
43066: PPUSH
43067: CALL 2236 0 2
43071: ST_TO_ADDR
// if un then
43072: LD_VAR 0 3
43076: IFFALSE 43121
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43078: LD_ADDR_VAR 0 4
43082: PUSH
43083: LD_INT 1
43085: PPUSH
43086: LD_STRING D5b-Sol2-1
43088: PPUSH
43089: LD_VAR 0 3
43093: PPUSH
43094: CALL 2455 0 3
43098: ST_TO_ADDR
// if not un2 then
43099: LD_VAR 0 4
43103: NOT
43104: IFFALSE 43121
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43106: LD_INT 2
43108: PPUSH
43109: LD_STRING D5b-FSol2-1
43111: PPUSH
43112: LD_VAR 0 3
43116: PPUSH
43117: CALL 2455 0 3
// end ; DialogueOff ;
43121: CALL_OW 7
// break ;
43125: GO 43129
// end ; end ;
43127: GO 42966
43129: POP
43130: POP
// end ; if not seen [ 3 ] then
43131: LD_EXP 9
43135: PUSH
43136: LD_INT 3
43138: ARRAY
43139: NOT
43140: IFFALSE 43314
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43142: LD_ADDR_VAR 0 2
43146: PUSH
43147: LD_INT 22
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 33
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PPUSH
43171: CALL_OW 69
43175: ST_TO_ADDR
// if tmp then
43176: LD_VAR 0 2
43180: IFFALSE 43314
// for i in tmp do
43182: LD_ADDR_VAR 0 1
43186: PUSH
43187: LD_VAR 0 2
43191: PUSH
43192: FOR_IN
43193: IFFALSE 43312
// if See ( 1 , i ) then
43195: LD_INT 1
43197: PPUSH
43198: LD_VAR 0 1
43202: PPUSH
43203: CALL_OW 292
43207: IFFALSE 43310
// begin seen := Replace ( seen , 3 , true ) ;
43209: LD_ADDR_EXP 9
43213: PUSH
43214: LD_EXP 9
43218: PPUSH
43219: LD_INT 3
43221: PPUSH
43222: LD_INT 1
43224: PPUSH
43225: CALL_OW 1
43229: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43230: LD_INT 1
43232: PPUSH
43233: CALL 2065 0 1
43237: IFFALSE 43310
// begin DialogueOn ;
43239: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43252: LD_INT 10
43254: PPUSH
43255: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 1
43266: PPUSH
43267: LD_STRING D8-Sol1-1
43269: PPUSH
43270: CALL 2236 0 2
43274: ST_TO_ADDR
// if not un then
43275: LD_VAR 0 3
43279: NOT
43280: IFFALSE 43292
// SayRand ( sex_female , D8-FSol1-1 ) ;
43282: LD_INT 2
43284: PPUSH
43285: LD_STRING D8-FSol1-1
43287: PPUSH
43288: CALL 2236 0 2
// Say ( JMM , D8-JMM-1 ) ;
43292: LD_EXP 18
43296: PPUSH
43297: LD_STRING D8-JMM-1
43299: PPUSH
43300: CALL_OW 88
// DialogueOff ;
43304: CALL_OW 7
// break ;
43308: GO 43312
// end ; end ;
43310: GO 43192
43312: POP
43313: POP
// end ; if not seen [ 4 ] then
43314: LD_EXP 9
43318: PUSH
43319: LD_INT 4
43321: ARRAY
43322: NOT
43323: IFFALSE 43485
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43325: LD_ADDR_VAR 0 2
43329: PUSH
43330: LD_INT 22
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 33
43342: PUSH
43343: LD_INT 5
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PPUSH
43354: CALL_OW 69
43358: ST_TO_ADDR
// if tmp then
43359: LD_VAR 0 2
43363: IFFALSE 43485
// for i in tmp do
43365: LD_ADDR_VAR 0 1
43369: PUSH
43370: LD_VAR 0 2
43374: PUSH
43375: FOR_IN
43376: IFFALSE 43483
// if See ( 1 , i ) then
43378: LD_INT 1
43380: PPUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 292
43390: IFFALSE 43481
// begin seen := Replace ( seen , 4 , true ) ;
43392: LD_ADDR_EXP 9
43396: PUSH
43397: LD_EXP 9
43401: PPUSH
43402: LD_INT 4
43404: PPUSH
43405: LD_INT 1
43407: PPUSH
43408: CALL_OW 1
43412: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43413: LD_INT 1
43415: PPUSH
43416: CALL 2065 0 1
43420: IFFALSE 43481
// begin DialogueOn ;
43422: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43435: LD_INT 10
43437: PPUSH
43438: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43442: LD_ADDR_VAR 0 3
43446: PUSH
43447: LD_INT 1
43449: PPUSH
43450: LD_STRING D5a-Sol1-1
43452: PPUSH
43453: CALL 2236 0 2
43457: ST_TO_ADDR
// if not un then
43458: LD_VAR 0 3
43462: NOT
43463: IFFALSE 43475
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43465: LD_INT 2
43467: PPUSH
43468: LD_STRING D5a-FSol1-1
43470: PPUSH
43471: CALL 2236 0 2
// DialogueOff ;
43475: CALL_OW 7
// break ;
43479: GO 43483
// end ; end ;
43481: GO 43375
43483: POP
43484: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43485: LD_EXP 9
43489: PUSH
43490: LD_INT 5
43492: ARRAY
43493: NOT
43494: PUSH
43495: LD_EXP 9
43499: PUSH
43500: LD_INT 3
43502: ARRAY
43503: AND
43504: IFFALSE 43678
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43506: LD_ADDR_VAR 0 2
43510: PUSH
43511: LD_INT 22
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 34
43523: PUSH
43524: LD_INT 31
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PPUSH
43535: CALL_OW 69
43539: ST_TO_ADDR
// if tmp then
43540: LD_VAR 0 2
43544: IFFALSE 43678
// for i in tmp do
43546: LD_ADDR_VAR 0 1
43550: PUSH
43551: LD_VAR 0 2
43555: PUSH
43556: FOR_IN
43557: IFFALSE 43676
// if See ( 1 , i ) then
43559: LD_INT 1
43561: PPUSH
43562: LD_VAR 0 1
43566: PPUSH
43567: CALL_OW 292
43571: IFFALSE 43674
// begin seen := Replace ( seen , 5 , true ) ;
43573: LD_ADDR_EXP 9
43577: PUSH
43578: LD_EXP 9
43582: PPUSH
43583: LD_INT 5
43585: PPUSH
43586: LD_INT 1
43588: PPUSH
43589: CALL_OW 1
43593: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43594: LD_INT 1
43596: PPUSH
43597: CALL 2065 0 1
43601: IFFALSE 43674
// begin DialogueOn ;
43603: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43616: LD_INT 10
43618: PPUSH
43619: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 1
43630: PPUSH
43631: LD_STRING D8a-Sol2-1
43633: PPUSH
43634: CALL 2236 0 2
43638: ST_TO_ADDR
// if not un then
43639: LD_VAR 0 3
43643: NOT
43644: IFFALSE 43656
// SayRand ( sex_female , D8a-FSol2-1 ) ;
43646: LD_INT 2
43648: PPUSH
43649: LD_STRING D8a-FSol2-1
43651: PPUSH
43652: CALL 2236 0 2
// Say ( JMM , D8a-JMM-1 ) ;
43656: LD_EXP 18
43660: PPUSH
43661: LD_STRING D8a-JMM-1
43663: PPUSH
43664: CALL_OW 88
// DialogueOff ;
43668: CALL_OW 7
// break ;
43672: GO 43676
// end ; end ;
43674: GO 43556
43676: POP
43677: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
43678: LD_EXP 9
43682: PUSH
43683: LD_INT 1
43685: ARRAY
43686: PUSH
43687: LD_EXP 9
43691: PUSH
43692: LD_INT 2
43694: ARRAY
43695: AND
43696: PUSH
43697: LD_EXP 9
43701: PUSH
43702: LD_INT 3
43704: ARRAY
43705: AND
43706: PUSH
43707: LD_EXP 9
43711: PUSH
43712: LD_INT 4
43714: ARRAY
43715: AND
43716: PUSH
43717: LD_EXP 9
43721: PUSH
43722: LD_INT 5
43724: ARRAY
43725: AND
43726: IFFALSE 43729
// disable ;
43728: DISABLE
// end ;
43729: PPOPN 4
43731: END
// every 0 0$1 trigger kamikazed do var un ;
43732: LD_EXP 10
43736: IFFALSE 43934
43738: GO 43740
43740: DISABLE
43741: LD_INT 0
43743: PPUSH
// begin DialogueOn ;
43744: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
43748: LD_EXP 10
43752: PPUSH
43753: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
43757: LD_ADDR_VAR 0 1
43761: PUSH
43762: LD_INT 1
43764: PPUSH
43765: LD_STRING D5c-Sol1-1
43767: PPUSH
43768: CALL 2236 0 2
43772: ST_TO_ADDR
// if not un then
43773: LD_VAR 0 1
43777: NOT
43778: IFFALSE 43796
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
43780: LD_ADDR_VAR 0 1
43784: PUSH
43785: LD_INT 2
43787: PPUSH
43788: LD_STRING D5c-Sol1-1
43790: PPUSH
43791: CALL 2236 0 2
43795: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
43796: LD_EXP 18
43800: PPUSH
43801: LD_STRING D5c-JMM-1
43803: PPUSH
43804: CALL_OW 88
// if IsOk ( Lisa ) then
43808: LD_EXP 19
43812: PPUSH
43813: CALL_OW 302
43817: IFFALSE 43833
// Say ( Lisa , D5d-Lisa-1 ) else
43819: LD_EXP 19
43823: PPUSH
43824: LD_STRING D5d-Lisa-1
43826: PPUSH
43827: CALL_OW 88
43831: GO 43918
// if IsOk ( Cyrus ) then
43833: LD_EXP 22
43837: PPUSH
43838: CALL_OW 302
43842: IFFALSE 43858
// Say ( Cyrus , D5d-Cyrus-1 ) else
43844: LD_EXP 22
43848: PPUSH
43849: LD_STRING D5d-Cyrus-1
43851: PPUSH
43852: CALL_OW 88
43856: GO 43918
// if IsOk ( Gary ) then
43858: LD_EXP 29
43862: PPUSH
43863: CALL_OW 302
43867: IFFALSE 43883
// Say ( Gary , D5d-Gary-1 ) else
43869: LD_EXP 29
43873: PPUSH
43874: LD_STRING D5d-Gary-1
43876: PPUSH
43877: CALL_OW 88
43881: GO 43918
// if GetSex ( un ) = sex_male then
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 258
43892: PUSH
43893: LD_INT 1
43895: EQUAL
43896: IFFALSE 43912
// Say ( un , D5d-Sol1-1 ) else
43898: LD_VAR 0 1
43902: PPUSH
43903: LD_STRING D5d-Sol1-1
43905: PPUSH
43906: CALL_OW 88
43910: GO 43918
// begin DialogueOff ;
43912: CALL_OW 7
// exit ;
43916: GO 43934
// end ; Say ( JMM , D5d-JMM-1 ) ;
43918: LD_EXP 18
43922: PPUSH
43923: LD_STRING D5d-JMM-1
43925: PPUSH
43926: CALL_OW 88
// DialogueOff ;
43930: CALL_OW 7
// end ;
43934: PPOPN 1
43936: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
43937: LD_INT 1
43939: PPUSH
43940: LD_INT 17
43942: PPUSH
43943: CALL_OW 294
43947: PUSH
43948: LD_INT 2
43950: GREATEREQUAL
43951: IFFALSE 44072
43953: GO 43955
43955: DISABLE
43956: LD_INT 0
43958: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
43959: LD_INT 10
43961: PPUSH
43962: LD_INT 5
43964: PPUSH
43965: LD_INT 1
43967: PPUSH
43968: LD_INT 10
43970: NEG
43971: PPUSH
43972: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
43976: LD_INT 10
43978: PPUSH
43979: LD_INT 5
43981: PPUSH
43982: LD_INT 1
43984: PPUSH
43985: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
43989: LD_INT 10
43991: PPUSH
43992: LD_INT 5
43994: PPUSH
43995: CALL_OW 86
// DialogueOn ;
43999: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
44003: LD_ADDR_VAR 0 1
44007: PUSH
44008: LD_INT 1
44010: PPUSH
44011: LD_STRING D6-Sci1-1
44013: PPUSH
44014: CALL 2236 0 2
44018: ST_TO_ADDR
// if un then
44019: LD_VAR 0 1
44023: IFFALSE 44061
// begin Say ( JMM , D6-JMM-1 ) ;
44025: LD_EXP 18
44029: PPUSH
44030: LD_STRING D6-JMM-1
44032: PPUSH
44033: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_STRING D6-Sci1-2
44044: PPUSH
44045: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44049: LD_EXP 18
44053: PPUSH
44054: LD_STRING D6-JMM-2
44056: PPUSH
44057: CALL_OW 88
// end ; DialogueOff ;
44061: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44065: LD_STRING M3
44067: PPUSH
44068: CALL_OW 337
// end ;
44072: PPOPN 1
44074: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44075: LD_OWVAR 1
44079: PUSH
44080: LD_INT 65100
44082: GREATEREQUAL
44083: PUSH
44084: LD_INT 2
44086: PPUSH
44087: LD_INT 169
44089: PPUSH
44090: LD_INT 90
44092: PPUSH
44093: LD_INT 40
44095: PPUSH
44096: CALL 3673 0 4
44100: PUSH
44101: LD_INT 4
44103: ARRAY
44104: PUSH
44105: LD_INT 0
44107: EQUAL
44108: AND
44109: IFFALSE 45229
44111: GO 44113
44113: DISABLE
44114: LD_INT 0
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
// begin uc_side := 5 ;
44120: LD_ADDR_OWVAR 20
44124: PUSH
44125: LD_INT 5
44127: ST_TO_ADDR
// uc_nation := 2 ;
44128: LD_ADDR_OWVAR 21
44132: PUSH
44133: LD_INT 2
44135: ST_TO_ADDR
// InitHc ;
44136: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44140: LD_INT 1
44142: PPUSH
44143: LD_INT 3
44145: PPUSH
44146: LD_INT 8
44148: PPUSH
44149: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44153: LD_ADDR_OWVAR 29
44157: PUSH
44158: LD_INT 12
44160: PUSH
44161: LD_INT 12
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44168: LD_ADDR_OWVAR 33
44172: PUSH
44173: LD_STRING SecondCharsGal
44175: ST_TO_ADDR
// hc_face_number := 7 ;
44176: LD_ADDR_OWVAR 34
44180: PUSH
44181: LD_INT 7
44183: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44184: LD_ADDR_EXP 42
44188: PUSH
44189: CALL_OW 44
44193: ST_TO_ADDR
// InitHc ;
44194: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44198: LD_INT 1
44200: PPUSH
44201: LD_INT 16
44203: PPUSH
44204: LD_INT 2
44206: PPUSH
44207: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44211: LD_ADDR_OWVAR 29
44215: PUSH
44216: LD_INT 12
44218: PUSH
44219: LD_INT 12
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// hc_name :=  ;
44226: LD_ADDR_OWVAR 26
44230: PUSH
44231: LD_STRING 
44233: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44234: LD_ADDR_EXP 43
44238: PUSH
44239: CALL_OW 44
44243: ST_TO_ADDR
// InitHc ;
44244: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44248: LD_INT 35
44250: PPUSH
44251: CALL_OW 67
// until not InBattle ( 1 ) ;
44255: LD_INT 1
44257: PPUSH
44258: CALL_OW 463
44262: NOT
44263: IFFALSE 44248
// wait ( 0 0$5 ) ;
44265: LD_INT 175
44267: PPUSH
44268: CALL_OW 67
// DialogueOn ;
44272: CALL_OW 6
// InGameOn ;
44276: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44280: LD_ADDR_VAR 0 1
44284: PUSH
44285: LD_INT 22
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 25
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 25
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 25
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 25
44330: PUSH
44331: LD_INT 4
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 25
44340: PUSH
44341: LD_INT 5
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 25
44350: PUSH
44351: LD_INT 8
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 69
44375: PUSH
44376: LD_EXP 19
44380: PUSH
44381: LD_EXP 20
44385: PUSH
44386: LD_EXP 21
44390: PUSH
44391: LD_EXP 22
44395: PUSH
44396: LD_EXP 23
44400: PUSH
44401: LD_EXP 24
44405: PUSH
44406: LD_EXP 25
44410: PUSH
44411: LD_EXP 26
44415: PUSH
44416: LD_EXP 28
44420: PUSH
44421: LD_EXP 29
44425: PUSH
44426: LD_EXP 30
44430: PUSH
44431: LD_EXP 31
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: DIFF
44450: PPUSH
44451: LD_INT 26
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PPUSH
44461: CALL_OW 72
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: ST_TO_ADDR
// if not un and Brown then
44470: LD_VAR 0 1
44474: NOT
44475: PUSH
44476: LD_EXP 24
44480: AND
44481: IFFALSE 44493
// un := Brown ;
44483: LD_ADDR_VAR 0 1
44487: PUSH
44488: LD_EXP 24
44492: ST_TO_ADDR
// if un then
44493: LD_VAR 0 1
44497: IFFALSE 44523
// begin Say ( un , D7-Sol1-1 ) ;
44499: LD_VAR 0 1
44503: PPUSH
44504: LD_STRING D7-Sol1-1
44506: PPUSH
44507: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44511: LD_EXP 18
44515: PPUSH
44516: LD_STRING D7-JMM-1
44518: PPUSH
44519: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44523: LD_EXP 42
44527: PPUSH
44528: LD_STRING D7-Ar1-1
44530: PPUSH
44531: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44535: LD_EXP 18
44539: PPUSH
44540: LD_STRING D7-JMM-2
44542: PPUSH
44543: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44547: LD_EXP 42
44551: PPUSH
44552: LD_STRING D7-Ar1-2
44554: PPUSH
44555: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44559: LD_EXP 18
44563: PPUSH
44564: LD_STRING D7-JMM-3
44566: PPUSH
44567: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44571: LD_EXP 42
44575: PPUSH
44576: LD_STRING D7-Ar1-3
44578: PPUSH
44579: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44583: LD_EXP 18
44587: PPUSH
44588: LD_STRING D7-JMM-4
44590: PPUSH
44591: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44595: LD_EXP 42
44599: PPUSH
44600: LD_STRING D7-Ar1-4
44602: PPUSH
44603: CALL_OW 94
// InGameOff ;
44607: CALL_OW 9
// DialogueOff ;
44611: CALL_OW 7
// case Query ( QCameras ) of 1 :
44615: LD_STRING QCameras
44617: PPUSH
44618: CALL_OW 97
44622: PUSH
44623: LD_INT 1
44625: DOUBLE
44626: EQUAL
44627: IFTRUE 44631
44629: GO 44634
44631: POP
// ; 2 :
44632: GO 44648
44634: LD_INT 2
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44642
44640: GO 44647
44642: POP
// exit ; end ;
44643: GO 45229
44645: GO 44648
44647: POP
// ChangeMissionObjectives ( MCar ) ;
44648: LD_STRING MCar
44650: PPUSH
44651: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
44655: LD_INT 124
44657: PPUSH
44658: LD_INT 90
44660: PPUSH
44661: LD_INT 1
44663: PPUSH
44664: LD_INT 6
44666: NEG
44667: PPUSH
44668: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
44672: LD_INT 124
44674: PPUSH
44675: LD_INT 90
44677: PPUSH
44678: LD_INT 1
44680: PPUSH
44681: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
44685: LD_INT 12
44687: PPUSH
44688: LD_INT 1
44690: PPUSH
44691: CALL_OW 424
// wait ( 3 ) ;
44695: LD_INT 3
44697: PPUSH
44698: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
44702: LD_INT 124
44704: PPUSH
44705: LD_INT 90
44707: PPUSH
44708: CALL_OW 86
// cargo := false ;
44712: LD_ADDR_VAR 0 3
44716: PUSH
44717: LD_INT 0
44719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44720: LD_INT 35
44722: PPUSH
44723: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_INT 12
44734: PPUSH
44735: LD_INT 32
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 34
44747: PUSH
44748: LD_INT 32
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 58
44757: PUSH
44758: EMPTY
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: PPUSH
44766: CALL_OW 70
44770: ST_TO_ADDR
// until cargo ;
44771: LD_VAR 0 3
44775: IFFALSE 44720
// cargo := cargo [ 1 ] ;
44777: LD_ADDR_VAR 0 3
44781: PUSH
44782: LD_VAR 0 3
44786: PUSH
44787: LD_INT 1
44789: ARRAY
44790: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
44791: LD_VAR 0 3
44795: PPUSH
44796: LD_INT 5
44798: PPUSH
44799: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
44803: LD_INT 12
44805: PPUSH
44806: LD_INT 0
44808: PPUSH
44809: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
44813: LD_EXP 42
44817: PPUSH
44818: LD_INT 11
44820: PPUSH
44821: LD_INT 0
44823: PPUSH
44824: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
44828: LD_EXP 43
44832: PPUSH
44833: LD_INT 11
44835: PPUSH
44836: LD_INT 0
44838: PPUSH
44839: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
44843: LD_EXP 42
44847: PUSH
44848: LD_EXP 43
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PPUSH
44857: LD_INT 12
44859: PPUSH
44860: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
44864: LD_EXP 42
44868: PPUSH
44869: LD_VAR 0 3
44873: PPUSH
44874: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44878: LD_EXP 42
44882: PUSH
44883: LD_EXP 43
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PPUSH
44892: LD_INT 209
44894: PPUSH
44895: LD_INT 178
44897: PPUSH
44898: CALL_OW 171
// while ( true ) do
44902: LD_INT 1
44904: IFFALSE 45058
// begin wait ( 0 0$1 ) ;
44906: LD_INT 35
44908: PPUSH
44909: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
44913: LD_EXP 42
44917: PPUSH
44918: CALL_OW 314
44922: NOT
44923: PUSH
44924: LD_EXP 43
44928: PPUSH
44929: CALL_OW 314
44933: NOT
44934: OR
44935: IFFALSE 44961
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44937: LD_EXP 42
44941: PUSH
44942: LD_EXP 43
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PPUSH
44951: LD_INT 209
44953: PPUSH
44954: LD_INT 178
44956: PPUSH
44957: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
44961: LD_EXP 42
44965: PPUSH
44966: LD_INT 10
44968: PPUSH
44969: CALL_OW 308
44973: IFFALSE 44984
// RemoveUnit ( ar_mechanic ) ;
44975: LD_EXP 42
44979: PPUSH
44980: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
44984: LD_EXP 43
44988: PPUSH
44989: LD_INT 10
44991: PPUSH
44992: CALL_OW 308
44996: IFFALSE 45007
// RemoveUnit ( ar_mechanic_friend ) ;
44998: LD_EXP 43
45002: PPUSH
45003: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
45007: LD_VAR 0 3
45011: PPUSH
45012: LD_INT 10
45014: PPUSH
45015: CALL_OW 308
45019: IFFALSE 45030
// RemoveUnit ( cargo ) ;
45021: LD_VAR 0 3
45025: PPUSH
45026: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
45030: LD_EXP 42
45034: PPUSH
45035: CALL_OW 300
45039: NOT
45040: PUSH
45041: LD_EXP 43
45045: PPUSH
45046: CALL_OW 300
45050: NOT
45051: AND
45052: IFFALSE 45056
// break ;
45054: GO 45058
// end ;
45056: GO 44902
// wait ( 0 0$2 ) ;
45058: LD_INT 70
45060: PPUSH
45061: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
45065: LD_EXP 42
45069: PPUSH
45070: LD_STRING D7a-Ar1-1
45072: PPUSH
45073: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
45077: LD_ADDR_VAR 0 4
45081: PUSH
45082: LD_INT 129
45084: PUSH
45085: LD_INT 10
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 103
45094: PUSH
45095: LD_INT 6
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 148
45104: PUSH
45105: LD_INT 47
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 155
45114: PUSH
45115: LD_INT 16
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// if Difficulty = 1 then
45128: LD_OWVAR 67
45132: PUSH
45133: LD_INT 1
45135: EQUAL
45136: IFFALSE 45173
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45138: LD_ADDR_VAR 0 4
45142: PUSH
45143: LD_VAR 0 4
45147: PUSH
45148: LD_INT 78
45150: PUSH
45151: LD_INT 7
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 104
45160: PUSH
45161: LD_INT 43
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: ADD
45172: ST_TO_ADDR
// for i in tmp do
45173: LD_ADDR_VAR 0 2
45177: PUSH
45178: LD_VAR 0 4
45182: PUSH
45183: FOR_IN
45184: IFFALSE 45217
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45186: LD_VAR 0 2
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: PPUSH
45195: LD_VAR 0 2
45199: PUSH
45200: LD_INT 2
45202: ARRAY
45203: PPUSH
45204: LD_INT 1
45206: PPUSH
45207: LD_INT 9
45209: NEG
45210: PPUSH
45211: CALL_OW 330
45215: GO 45183
45217: POP
45218: POP
// CenterOnXY ( 129 , 10 ) ;
45219: LD_INT 129
45221: PPUSH
45222: LD_INT 10
45224: PPUSH
45225: CALL_OW 84
// end ;
45229: PPOPN 4
45231: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45232: LD_EXP 14
45236: PUSH
45237: LD_INT 21000
45239: MINUS
45240: PUSH
45241: LD_OWVAR 1
45245: LESSEQUAL
45246: IFFALSE 45286
45248: GO 45250
45250: DISABLE
// begin powell_warn := true ;
45251: LD_ADDR_EXP 15
45255: PUSH
45256: LD_INT 1
45258: ST_TO_ADDR
// DialogueOn ;
45259: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45263: LD_EXP 27
45267: PPUSH
45268: LD_STRING D9-Pow-1
45270: PPUSH
45271: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45275: LD_INT 10
45277: PPUSH
45278: CALL_OW 68
// DialogueOff ;
45282: CALL_OW 7
// end ;
45286: END
// every 0 0$1 trigger game_time <= tick do
45287: LD_EXP 14
45291: PUSH
45292: LD_OWVAR 1
45296: LESSEQUAL
45297: IFFALSE 45336
45299: GO 45301
45301: DISABLE
// begin DialogueOn ;
45302: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45306: LD_EXP 27
45310: PPUSH
45311: LD_STRING D9a-Pow-1
45313: PPUSH
45314: CALL_OW 94
// dwait ( 0 0$2 ) ;
45318: LD_INT 70
45320: PPUSH
45321: CALL_OW 68
// DialogueOff ;
45325: CALL_OW 7
// YouLost ( Command ) ;
45329: LD_STRING Command
45331: PPUSH
45332: CALL_OW 104
// end ;
45336: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45337: LD_EXP 18
45341: PPUSH
45342: CALL_OW 301
45346: PUSH
45347: LD_EXP 5
45351: AND
45352: IFFALSE 45364
45354: GO 45356
45356: DISABLE
// YouLost ( JMM ) ;
45357: LD_STRING JMM
45359: PPUSH
45360: CALL_OW 104
45364: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
45365: LD_INT 22
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 30
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PPUSH
45389: CALL_OW 69
45393: PUSH
45394: LD_INT 0
45396: EQUAL
45397: PUSH
45398: LD_EXP 18
45402: PPUSH
45403: CALL_OW 302
45407: AND
45408: IFFALSE 46184
45410: GO 45412
45412: DISABLE
45413: LD_INT 0
45415: PPUSH
// begin DialogueOn ;
45416: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45420: LD_OWVAR 1
45424: PUSH
45425: LD_INT 126000
45427: PUSH
45428: LD_INT 105000
45430: PUSH
45431: LD_INT 94500
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: LD_OWVAR 67
45443: ARRAY
45444: LESS
45445: IFFALSE 45459
// AddMedal ( Time1 , 2 ) else
45447: LD_STRING Time1
45449: PPUSH
45450: LD_INT 2
45452: PPUSH
45453: CALL_OW 101
45457: GO 45489
// if not powell_warn then
45459: LD_EXP 15
45463: NOT
45464: IFFALSE 45478
// AddMedal ( Time1 , 1 ) else
45466: LD_STRING Time1
45468: PPUSH
45469: LD_INT 1
45471: PPUSH
45472: CALL_OW 101
45476: GO 45489
// AddMedal ( Time1 , - 1 ) ;
45478: LD_STRING Time1
45480: PPUSH
45481: LD_INT 1
45483: NEG
45484: PPUSH
45485: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45489: LD_EXP 16
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: PUSH
45508: LD_OWVAR 67
45512: ARRAY
45513: GREATEREQUAL
45514: IFFALSE 45529
// AddMedal ( Destroy , - 2 ) else
45516: LD_STRING Destroy
45518: PPUSH
45519: LD_INT 2
45521: NEG
45522: PPUSH
45523: CALL_OW 101
45527: GO 45646
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45529: LD_INT 22
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 21
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 50
45551: PUSH
45552: EMPTY
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: PPUSH
45560: CALL_OW 69
45564: PUSH
45565: LD_INT 20
45567: GREATEREQUAL
45568: IFFALSE 45583
// AddMedal ( Destroy , - 1 ) else
45570: LD_STRING Destroy
45572: PPUSH
45573: LD_INT 1
45575: NEG
45576: PPUSH
45577: CALL_OW 101
45581: GO 45646
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45583: LD_INT 22
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 21
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 50
45605: PUSH
45606: EMPTY
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: PPUSH
45614: CALL_OW 69
45618: PUSH
45619: LD_INT 10
45621: GREATEREQUAL
45622: IFFALSE 45636
// AddMedal ( Destroy , 1 ) else
45624: LD_STRING Destroy
45626: PPUSH
45627: LD_INT 1
45629: PPUSH
45630: CALL_OW 101
45634: GO 45646
// AddMedal ( Destroy , 2 ) ;
45636: LD_STRING Destroy
45638: PPUSH
45639: LD_INT 2
45641: PPUSH
45642: CALL_OW 101
// if artifact_get then
45646: LD_EXP 12
45650: IFFALSE 45664
// AddMedal ( Artefact , 1 ) else
45652: LD_STRING Artefact
45654: PPUSH
45655: LD_INT 1
45657: PPUSH
45658: CALL_OW 101
45662: GO 45675
// AddMedal ( Artefact , - 1 ) ;
45664: LD_STRING Artefact
45666: PPUSH
45667: LD_INT 1
45669: NEG
45670: PPUSH
45671: CALL_OW 101
// GiveMedals ( MAIN ) ;
45675: LD_STRING MAIN
45677: PPUSH
45678: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
45682: LD_ADDR_VAR 0 1
45686: PUSH
45687: LD_INT 22
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 25
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 25
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 25
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 25
45732: PUSH
45733: LD_INT 4
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 25
45742: PUSH
45743: LD_INT 5
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 25
45752: PUSH
45753: LD_INT 8
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PPUSH
45773: CALL_OW 69
45777: ST_TO_ADDR
// RewardPeople ( tmp ) ;
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 43
// SaveCharacters ( tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
45787: LD_VAR 0 1
45791: PUSH
45792: LD_EXP 19
45796: PUSH
45797: LD_EXP 20
45801: PUSH
45802: LD_EXP 21
45806: PUSH
45807: LD_EXP 22
45811: PUSH
45812: LD_EXP 23
45816: PUSH
45817: LD_EXP 24
45821: PUSH
45822: LD_EXP 25
45826: PUSH
45827: LD_EXP 26
45831: PUSH
45832: LD_EXP 28
45836: PUSH
45837: LD_EXP 29
45841: PUSH
45842: LD_EXP 30
45846: PUSH
45847: LD_EXP 31
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: DIFF
45866: PPUSH
45867: LD_STRING 11c_others
45869: PPUSH
45870: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45874: LD_EXP 18
45878: PPUSH
45879: LD_EXP 3
45883: PUSH
45884: LD_STRING JMM
45886: STR
45887: PPUSH
45888: CALL_OW 38
// if Lisa then
45892: LD_EXP 19
45896: IFFALSE 45916
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45898: LD_EXP 19
45902: PPUSH
45903: LD_EXP 3
45907: PUSH
45908: LD_STRING Lisa
45910: STR
45911: PPUSH
45912: CALL_OW 38
// if Donaldson then
45916: LD_EXP 20
45920: IFFALSE 45940
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45922: LD_EXP 20
45926: PPUSH
45927: LD_EXP 3
45931: PUSH
45932: LD_STRING Donaldson
45934: STR
45935: PPUSH
45936: CALL_OW 38
// if Bobby then
45940: LD_EXP 21
45944: IFFALSE 45964
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45946: LD_EXP 21
45950: PPUSH
45951: LD_EXP 3
45955: PUSH
45956: LD_STRING Bobby
45958: STR
45959: PPUSH
45960: CALL_OW 38
// if Cyrus then
45964: LD_EXP 22
45968: IFFALSE 45988
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45970: LD_EXP 22
45974: PPUSH
45975: LD_EXP 3
45979: PUSH
45980: LD_STRING Cyrus
45982: STR
45983: PPUSH
45984: CALL_OW 38
// if Denis then
45988: LD_EXP 23
45992: IFFALSE 46012
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
45994: LD_EXP 23
45998: PPUSH
45999: LD_EXP 3
46003: PUSH
46004: LD_STRING Denis
46006: STR
46007: PPUSH
46008: CALL_OW 38
// if Brown then
46012: LD_EXP 24
46016: IFFALSE 46036
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
46018: LD_EXP 24
46022: PPUSH
46023: LD_EXP 3
46027: PUSH
46028: LD_STRING Brown
46030: STR
46031: PPUSH
46032: CALL_OW 38
// if Gladstone then
46036: LD_EXP 25
46040: IFFALSE 46060
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
46042: LD_EXP 25
46046: PPUSH
46047: LD_EXP 3
46051: PUSH
46052: LD_STRING Gladstone
46054: STR
46055: PPUSH
46056: CALL_OW 38
// if Houten then
46060: LD_EXP 26
46064: IFFALSE 46084
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
46066: LD_EXP 26
46070: PPUSH
46071: LD_EXP 3
46075: PUSH
46076: LD_STRING Houten
46078: STR
46079: PPUSH
46080: CALL_OW 38
// if Cornel then
46084: LD_EXP 28
46088: IFFALSE 46108
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
46090: LD_EXP 28
46094: PPUSH
46095: LD_EXP 3
46099: PUSH
46100: LD_STRING Cornel
46102: STR
46103: PPUSH
46104: CALL_OW 38
// if Gary then
46108: LD_EXP 29
46112: IFFALSE 46132
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
46114: LD_EXP 29
46118: PPUSH
46119: LD_EXP 3
46123: PUSH
46124: LD_STRING Gary
46126: STR
46127: PPUSH
46128: CALL_OW 38
// if Frank then
46132: LD_EXP 30
46136: IFFALSE 46156
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46138: LD_EXP 30
46142: PPUSH
46143: LD_EXP 3
46147: PUSH
46148: LD_STRING Frank
46150: STR
46151: PPUSH
46152: CALL_OW 38
// if Kikuchi then
46156: LD_EXP 31
46160: IFFALSE 46180
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46162: LD_EXP 31
46166: PPUSH
46167: LD_EXP 3
46171: PUSH
46172: LD_STRING Kikuchi
46174: STR
46175: PPUSH
46176: CALL_OW 38
// YouWin ;
46180: CALL_OW 103
// end ; end_of_file
46184: PPOPN 1
46186: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46187: LD_INT 0
46189: PPUSH
// skirmish := false ;
46190: LD_ADDR_EXP 44
46194: PUSH
46195: LD_INT 0
46197: ST_TO_ADDR
// mc_bases := [ ] ;
46198: LD_ADDR_EXP 45
46202: PUSH
46203: EMPTY
46204: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46205: LD_ADDR_EXP 46
46209: PUSH
46210: EMPTY
46211: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46212: LD_ADDR_EXP 47
46216: PUSH
46217: EMPTY
46218: ST_TO_ADDR
// mc_need_heal := [ ] ;
46219: LD_ADDR_EXP 48
46223: PUSH
46224: EMPTY
46225: ST_TO_ADDR
// mc_healers := [ ] ;
46226: LD_ADDR_EXP 49
46230: PUSH
46231: EMPTY
46232: ST_TO_ADDR
// mc_build_list := [ ] ;
46233: LD_ADDR_EXP 50
46237: PUSH
46238: EMPTY
46239: ST_TO_ADDR
// mc_builders := [ ] ;
46240: LD_ADDR_EXP 51
46244: PUSH
46245: EMPTY
46246: ST_TO_ADDR
// mc_construct_list := [ ] ;
46247: LD_ADDR_EXP 52
46251: PUSH
46252: EMPTY
46253: ST_TO_ADDR
// mc_turret_list := [ ] ;
46254: LD_ADDR_EXP 53
46258: PUSH
46259: EMPTY
46260: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46261: LD_ADDR_EXP 54
46265: PUSH
46266: EMPTY
46267: ST_TO_ADDR
// mc_miners := [ ] ;
46268: LD_ADDR_EXP 56
46272: PUSH
46273: EMPTY
46274: ST_TO_ADDR
// mc_mines := [ ] ;
46275: LD_ADDR_EXP 55
46279: PUSH
46280: EMPTY
46281: ST_TO_ADDR
// mc_minefields := [ ] ;
46282: LD_ADDR_EXP 57
46286: PUSH
46287: EMPTY
46288: ST_TO_ADDR
// mc_crates := [ ] ;
46289: LD_ADDR_EXP 58
46293: PUSH
46294: EMPTY
46295: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46296: LD_ADDR_EXP 59
46300: PUSH
46301: EMPTY
46302: ST_TO_ADDR
// mc_vehicles := [ ] ;
46303: LD_ADDR_EXP 60
46307: PUSH
46308: EMPTY
46309: ST_TO_ADDR
// mc_attack := [ ] ;
46310: LD_ADDR_EXP 61
46314: PUSH
46315: EMPTY
46316: ST_TO_ADDR
// mc_produce := [ ] ;
46317: LD_ADDR_EXP 62
46321: PUSH
46322: EMPTY
46323: ST_TO_ADDR
// mc_defender := [ ] ;
46324: LD_ADDR_EXP 63
46328: PUSH
46329: EMPTY
46330: ST_TO_ADDR
// mc_parking := [ ] ;
46331: LD_ADDR_EXP 65
46335: PUSH
46336: EMPTY
46337: ST_TO_ADDR
// mc_scan := [ ] ;
46338: LD_ADDR_EXP 64
46342: PUSH
46343: EMPTY
46344: ST_TO_ADDR
// end ;
46345: LD_VAR 0 1
46349: RET
// export function RunMacro ; var i ; begin
46350: LD_INT 0
46352: PPUSH
46353: PPUSH
// for i = 1 to mc_bases do
46354: LD_ADDR_VAR 0 2
46358: PUSH
46359: DOUBLE
46360: LD_INT 1
46362: DEC
46363: ST_TO_ADDR
46364: LD_EXP 45
46368: PUSH
46369: FOR_TO
46370: IFFALSE 46858
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46372: LD_ADDR_EXP 46
46376: PUSH
46377: LD_EXP 46
46381: PPUSH
46382: LD_VAR 0 2
46386: PPUSH
46387: EMPTY
46388: PPUSH
46389: CALL_OW 1
46393: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46394: LD_ADDR_EXP 47
46398: PUSH
46399: LD_EXP 47
46403: PPUSH
46404: LD_VAR 0 2
46408: PPUSH
46409: EMPTY
46410: PPUSH
46411: CALL_OW 1
46415: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46416: LD_ADDR_EXP 48
46420: PUSH
46421: LD_EXP 48
46425: PPUSH
46426: LD_VAR 0 2
46430: PPUSH
46431: EMPTY
46432: PPUSH
46433: CALL_OW 1
46437: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46438: LD_ADDR_EXP 49
46442: PUSH
46443: LD_EXP 49
46447: PPUSH
46448: LD_VAR 0 2
46452: PPUSH
46453: EMPTY
46454: PUSH
46455: EMPTY
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PPUSH
46461: CALL_OW 1
46465: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46466: LD_ADDR_EXP 50
46470: PUSH
46471: LD_EXP 50
46475: PPUSH
46476: LD_VAR 0 2
46480: PPUSH
46481: EMPTY
46482: PPUSH
46483: CALL_OW 1
46487: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46488: LD_ADDR_EXP 52
46492: PUSH
46493: LD_EXP 52
46497: PPUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: EMPTY
46504: PPUSH
46505: CALL_OW 1
46509: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46510: LD_ADDR_EXP 53
46514: PUSH
46515: LD_EXP 53
46519: PPUSH
46520: LD_VAR 0 2
46524: PPUSH
46525: EMPTY
46526: PPUSH
46527: CALL_OW 1
46531: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46532: LD_ADDR_EXP 54
46536: PUSH
46537: LD_EXP 54
46541: PPUSH
46542: LD_VAR 0 2
46546: PPUSH
46547: EMPTY
46548: PPUSH
46549: CALL_OW 1
46553: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46554: LD_ADDR_EXP 54
46558: PUSH
46559: LD_EXP 54
46563: PPUSH
46564: LD_VAR 0 2
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PPUSH
46576: EMPTY
46577: PPUSH
46578: CALL 3179 0 3
46582: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46583: LD_ADDR_EXP 54
46587: PUSH
46588: LD_EXP 54
46592: PPUSH
46593: LD_VAR 0 2
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PPUSH
46605: EMPTY
46606: PPUSH
46607: CALL 3179 0 3
46611: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46612: LD_ADDR_EXP 56
46616: PUSH
46617: LD_EXP 56
46621: PPUSH
46622: LD_VAR 0 2
46626: PPUSH
46627: EMPTY
46628: PPUSH
46629: CALL_OW 1
46633: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
46634: LD_ADDR_EXP 55
46638: PUSH
46639: LD_EXP 55
46643: PPUSH
46644: LD_VAR 0 2
46648: PPUSH
46649: EMPTY
46650: PPUSH
46651: CALL_OW 1
46655: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
46656: LD_ADDR_EXP 57
46660: PUSH
46661: LD_EXP 57
46665: PPUSH
46666: LD_VAR 0 2
46670: PPUSH
46671: EMPTY
46672: PPUSH
46673: CALL_OW 1
46677: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
46678: LD_ADDR_EXP 58
46682: PUSH
46683: LD_EXP 58
46687: PPUSH
46688: LD_VAR 0 2
46692: PPUSH
46693: EMPTY
46694: PPUSH
46695: CALL_OW 1
46699: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46700: LD_ADDR_EXP 59
46704: PUSH
46705: LD_EXP 59
46709: PPUSH
46710: LD_VAR 0 2
46714: PPUSH
46715: EMPTY
46716: PPUSH
46717: CALL_OW 1
46721: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
46722: LD_ADDR_EXP 60
46726: PUSH
46727: LD_EXP 60
46731: PPUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: EMPTY
46738: PPUSH
46739: CALL_OW 1
46743: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
46744: LD_ADDR_EXP 61
46748: PUSH
46749: LD_EXP 61
46753: PPUSH
46754: LD_VAR 0 2
46758: PPUSH
46759: EMPTY
46760: PPUSH
46761: CALL_OW 1
46765: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
46766: LD_ADDR_EXP 62
46770: PUSH
46771: LD_EXP 62
46775: PPUSH
46776: LD_VAR 0 2
46780: PPUSH
46781: EMPTY
46782: PPUSH
46783: CALL_OW 1
46787: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46788: LD_ADDR_EXP 63
46792: PUSH
46793: LD_EXP 63
46797: PPUSH
46798: LD_VAR 0 2
46802: PPUSH
46803: EMPTY
46804: PPUSH
46805: CALL_OW 1
46809: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
46810: LD_ADDR_EXP 65
46814: PUSH
46815: LD_EXP 65
46819: PPUSH
46820: LD_VAR 0 2
46824: PPUSH
46825: LD_INT 0
46827: PPUSH
46828: CALL_OW 1
46832: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
46833: LD_ADDR_EXP 64
46837: PUSH
46838: LD_EXP 64
46842: PPUSH
46843: LD_VAR 0 2
46847: PPUSH
46848: LD_INT 0
46850: PPUSH
46851: CALL_OW 1
46855: ST_TO_ADDR
// end ;
46856: GO 46369
46858: POP
46859: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
46860: LD_INT 1
46862: PPUSH
46863: LD_INT 8
46865: PUSH
46866: LD_INT 10
46868: PUSH
46869: LD_INT 12
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: PUSH
46877: LD_OWVAR 67
46881: ARRAY
46882: PPUSH
46883: LD_INT 3
46885: PPUSH
46886: CALL 54374 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
46890: LD_INT 2
46892: PPUSH
46893: LD_INT 6
46895: PUSH
46896: LD_INT 8
46898: PUSH
46899: LD_INT 9
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: PUSH
46907: LD_OWVAR 67
46911: ARRAY
46912: PPUSH
46913: LD_INT 2
46915: PPUSH
46916: CALL 54374 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
46920: LD_INT 3
46922: PPUSH
46923: LD_INT 6
46925: PUSH
46926: LD_INT 7
46928: PUSH
46929: LD_INT 9
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: PUSH
46937: LD_OWVAR 67
46941: ARRAY
46942: PPUSH
46943: LD_INT 1
46945: PPUSH
46946: CALL 54374 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
46950: LD_ADDR_EXP 65
46954: PUSH
46955: LD_INT 20
46957: PUSH
46958: LD_INT 21
46960: PUSH
46961: LD_INT 22
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// for i = 1 to mc_bases do
46969: LD_ADDR_VAR 0 2
46973: PUSH
46974: DOUBLE
46975: LD_INT 1
46977: DEC
46978: ST_TO_ADDR
46979: LD_EXP 45
46983: PUSH
46984: FOR_TO
46985: IFFALSE 47009
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
46987: LD_VAR 0 2
46991: PPUSH
46992: LD_EXP 39
46996: PUSH
46997: LD_VAR 0 2
47001: ARRAY
47002: PPUSH
47003: CALL 54610 0 2
47007: GO 46984
47009: POP
47010: POP
// skirmish := true ;
47011: LD_ADDR_EXP 44
47015: PUSH
47016: LD_INT 1
47018: ST_TO_ADDR
// end ;
47019: LD_VAR 0 1
47023: RET
// every 0 0$01 trigger skirmish do
47024: LD_EXP 44
47028: IFFALSE 47112
47030: GO 47032
47032: DISABLE
// begin enable ;
47033: ENABLE
// MC_CheckBuildings ( ) ;
47034: CALL 47473 0 0
// MC_CheckPeopleLife ( ) ;
47038: CALL 47691 0 0
// RaiseSailEvent ( 103 ) ;
47042: LD_INT 103
47044: PPUSH
47045: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47049: LD_INT 104
47051: PPUSH
47052: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47056: LD_INT 105
47058: PPUSH
47059: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47063: LD_INT 106
47065: PPUSH
47066: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47070: LD_INT 107
47072: PPUSH
47073: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47077: LD_INT 108
47079: PPUSH
47080: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47084: LD_INT 109
47086: PPUSH
47087: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47091: LD_INT 110
47093: PPUSH
47094: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47098: LD_INT 111
47100: PPUSH
47101: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47105: LD_INT 200
47107: PPUSH
47108: CALL_OW 427
// end ;
47112: END
// every 10 trigger skirmish do var i ;
47113: LD_EXP 44
47117: IFFALSE 47216
47119: GO 47121
47121: DISABLE
47122: LD_INT 0
47124: PPUSH
// begin enable ;
47125: ENABLE
// if not mc_bases then
47126: LD_EXP 45
47130: NOT
47131: IFFALSE 47135
// exit ;
47133: GO 47216
// for i = 1 to mc_bases do
47135: LD_ADDR_VAR 0 1
47139: PUSH
47140: DOUBLE
47141: LD_INT 1
47143: DEC
47144: ST_TO_ADDR
47145: LD_EXP 45
47149: PUSH
47150: FOR_TO
47151: IFFALSE 47214
// if mc_mines [ i ] and mc_miners [ i ] then
47153: LD_EXP 55
47157: PUSH
47158: LD_VAR 0 1
47162: ARRAY
47163: PUSH
47164: LD_EXP 56
47168: PUSH
47169: LD_VAR 0 1
47173: ARRAY
47174: AND
47175: IFFALSE 47212
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47177: LD_EXP 56
47181: PUSH
47182: LD_VAR 0 1
47186: ARRAY
47187: PUSH
47188: LD_INT 1
47190: ARRAY
47191: PPUSH
47192: CALL_OW 255
47196: PPUSH
47197: LD_EXP 55
47201: PUSH
47202: LD_VAR 0 1
47206: ARRAY
47207: PPUSH
47208: CALL 33408 0 2
47212: GO 47150
47214: POP
47215: POP
// end ;
47216: PPOPN 1
47218: END
// on SailEvent ( event ) do begin if event = 101 then
47219: LD_VAR 0 1
47223: PUSH
47224: LD_INT 101
47226: EQUAL
47227: IFFALSE 47233
// MC_RepairBuildings ( ) ;
47229: CALL 48237 0 0
// if event = 102 then
47233: LD_VAR 0 1
47237: PUSH
47238: LD_INT 102
47240: EQUAL
47241: IFFALSE 47247
// MC_Heal ( ) ;
47243: CALL 48631 0 0
// if event = 103 then
47247: LD_VAR 0 1
47251: PUSH
47252: LD_INT 103
47254: EQUAL
47255: IFFALSE 47261
// MC_Build ( ) ;
47257: CALL 49016 0 0
// if event = 104 then
47261: LD_VAR 0 1
47265: PUSH
47266: LD_INT 104
47268: EQUAL
47269: IFFALSE 47275
// MC_TurretWeapon ( ) ;
47271: CALL 49784 0 0
// if event = 105 then
47275: LD_VAR 0 1
47279: PUSH
47280: LD_INT 105
47282: EQUAL
47283: IFFALSE 47289
// MC_TurretCrew ( ) ;
47285: CALL 50103 0 0
// if event = 106 then
47289: LD_VAR 0 1
47293: PUSH
47294: LD_INT 106
47296: EQUAL
47297: IFFALSE 47303
// MC_PlantMines ( ) ;
47299: CALL 50896 0 0
// if event = 107 then
47303: LD_VAR 0 1
47307: PUSH
47308: LD_INT 107
47310: EQUAL
47311: IFFALSE 47317
// MC_CollectCrates ( ) ;
47313: CALL 51728 0 0
// if event = 108 then
47317: LD_VAR 0 1
47321: PUSH
47322: LD_INT 108
47324: EQUAL
47325: IFFALSE 47331
// MC_LinkRemoteControl ( ) ;
47327: CALL 52525 0 0
// if event = 109 then
47331: LD_VAR 0 1
47335: PUSH
47336: LD_INT 109
47338: EQUAL
47339: IFFALSE 47345
// MC_ProduceVehicle ( ) ;
47341: CALL 52694 0 0
// if event = 110 then
47345: LD_VAR 0 1
47349: PUSH
47350: LD_INT 110
47352: EQUAL
47353: IFFALSE 47359
// MC_SendAttack ( ) ;
47355: CALL 53082 0 0
// if event = 111 then
47359: LD_VAR 0 1
47363: PUSH
47364: LD_INT 111
47366: EQUAL
47367: IFFALSE 47373
// MC_Defend ( ) ;
47369: CALL 53190 0 0
// if event = 200 then
47373: LD_VAR 0 1
47377: PUSH
47378: LD_INT 200
47380: EQUAL
47381: IFFALSE 47387
// MC_Idle ( ) ;
47383: CALL 54125 0 0
// end ;
47387: PPOPN 1
47389: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47390: LD_INT 0
47392: PPUSH
47393: PPUSH
// if not mc_bases [ base ] or not tag then
47394: LD_EXP 45
47398: PUSH
47399: LD_VAR 0 1
47403: ARRAY
47404: NOT
47405: PUSH
47406: LD_VAR 0 2
47410: NOT
47411: OR
47412: IFFALSE 47416
// exit ;
47414: GO 47468
// for i in mc_bases [ base ] do
47416: LD_ADDR_VAR 0 4
47420: PUSH
47421: LD_EXP 45
47425: PUSH
47426: LD_VAR 0 1
47430: ARRAY
47431: PUSH
47432: FOR_IN
47433: IFFALSE 47466
// if GetTag ( i ) = tag then
47435: LD_VAR 0 4
47439: PPUSH
47440: CALL_OW 110
47444: PUSH
47445: LD_VAR 0 2
47449: EQUAL
47450: IFFALSE 47464
// SetTag ( i , 0 ) ;
47452: LD_VAR 0 4
47456: PPUSH
47457: LD_INT 0
47459: PPUSH
47460: CALL_OW 109
47464: GO 47432
47466: POP
47467: POP
// end ;
47468: LD_VAR 0 3
47472: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47473: LD_INT 0
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
// if not mc_bases then
47479: LD_EXP 45
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 47686
// for i = 1 to mc_bases do
47488: LD_ADDR_VAR 0 2
47492: PUSH
47493: DOUBLE
47494: LD_INT 1
47496: DEC
47497: ST_TO_ADDR
47498: LD_EXP 45
47502: PUSH
47503: FOR_TO
47504: IFFALSE 47671
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47506: LD_ADDR_VAR 0 4
47510: PUSH
47511: LD_EXP 45
47515: PUSH
47516: LD_VAR 0 2
47520: ARRAY
47521: PPUSH
47522: LD_INT 21
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: LD_INT 24
47537: PUSH
47538: LD_INT 1000
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PPUSH
47553: CALL_OW 72
47557: ST_TO_ADDR
// if not tmp then
47558: LD_VAR 0 4
47562: NOT
47563: IFFALSE 47589
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47565: LD_ADDR_EXP 46
47569: PUSH
47570: LD_EXP 46
47574: PPUSH
47575: LD_VAR 0 2
47579: PPUSH
47580: EMPTY
47581: PPUSH
47582: CALL_OW 1
47586: ST_TO_ADDR
// continue ;
47587: GO 47503
// end ; for j in tmp do
47589: LD_ADDR_VAR 0 3
47593: PUSH
47594: LD_VAR 0 4
47598: PUSH
47599: FOR_IN
47600: IFFALSE 47667
// if not j in mc_building_need_repair [ i ] then
47602: LD_VAR 0 3
47606: PUSH
47607: LD_EXP 46
47611: PUSH
47612: LD_VAR 0 2
47616: ARRAY
47617: IN
47618: NOT
47619: IFFALSE 47665
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
47621: LD_ADDR_EXP 46
47625: PUSH
47626: LD_EXP 46
47630: PPUSH
47631: LD_VAR 0 2
47635: PUSH
47636: LD_EXP 46
47640: PUSH
47641: LD_VAR 0 2
47645: ARRAY
47646: PUSH
47647: LD_INT 1
47649: PLUS
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PPUSH
47655: LD_VAR 0 3
47659: PPUSH
47660: CALL 3179 0 3
47664: ST_TO_ADDR
47665: GO 47599
47667: POP
47668: POP
// end ;
47669: GO 47503
47671: POP
47672: POP
// if mc_building_need_repair then
47673: LD_EXP 46
47677: IFFALSE 47686
// RaiseSailEvent ( 101 ) ;
47679: LD_INT 101
47681: PPUSH
47682: CALL_OW 427
// end ;
47686: LD_VAR 0 1
47690: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47691: LD_INT 0
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
// if not mc_bases then
47700: LD_EXP 45
47704: NOT
47705: IFFALSE 47709
// exit ;
47707: GO 48232
// for i = 1 to mc_bases do
47709: LD_ADDR_VAR 0 2
47713: PUSH
47714: DOUBLE
47715: LD_INT 1
47717: DEC
47718: ST_TO_ADDR
47719: LD_EXP 45
47723: PUSH
47724: FOR_TO
47725: IFFALSE 48223
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
47727: LD_ADDR_VAR 0 5
47731: PUSH
47732: LD_EXP 45
47736: PUSH
47737: LD_VAR 0 2
47741: ARRAY
47742: PPUSH
47743: LD_INT 21
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 54
47761: PUSH
47762: EMPTY
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: LD_INT 24
47774: PUSH
47775: LD_INT 700
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL_OW 72
47799: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
47800: LD_ADDR_VAR 0 6
47804: PUSH
47805: LD_EXP 45
47809: PUSH
47810: LD_VAR 0 2
47814: ARRAY
47815: PPUSH
47816: LD_INT 21
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 54
47834: PUSH
47835: EMPTY
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 24
47847: PUSH
47848: LD_INT 250
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PPUSH
47868: CALL_OW 72
47872: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47873: LD_ADDR_VAR 0 7
47877: PUSH
47878: LD_VAR 0 5
47882: PUSH
47883: LD_VAR 0 6
47887: DIFF
47888: ST_TO_ADDR
// if not need_heal_1 then
47889: LD_VAR 0 6
47893: NOT
47894: IFFALSE 47927
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
47896: LD_ADDR_EXP 48
47900: PUSH
47901: LD_EXP 48
47905: PPUSH
47906: LD_VAR 0 2
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PPUSH
47918: EMPTY
47919: PPUSH
47920: CALL 3179 0 3
47924: ST_TO_ADDR
47925: GO 47959
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
47927: LD_ADDR_EXP 48
47931: PUSH
47932: LD_EXP 48
47936: PPUSH
47937: LD_VAR 0 2
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PPUSH
47949: LD_VAR 0 6
47953: PPUSH
47954: CALL 3179 0 3
47958: ST_TO_ADDR
// if not need_heal_2 then
47959: LD_VAR 0 7
47963: NOT
47964: IFFALSE 47997
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
47966: LD_ADDR_EXP 48
47970: PUSH
47971: LD_EXP 48
47975: PPUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PPUSH
47988: EMPTY
47989: PPUSH
47990: CALL 3179 0 3
47994: ST_TO_ADDR
47995: GO 48029
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47997: LD_ADDR_EXP 48
48001: PUSH
48002: LD_EXP 48
48006: PPUSH
48007: LD_VAR 0 2
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PPUSH
48019: LD_VAR 0 7
48023: PPUSH
48024: CALL 3179 0 3
48028: ST_TO_ADDR
// if need_heal_2 then
48029: LD_VAR 0 7
48033: IFFALSE 48205
// for j in need_heal_2 do
48035: LD_ADDR_VAR 0 3
48039: PUSH
48040: LD_VAR 0 7
48044: PUSH
48045: FOR_IN
48046: IFFALSE 48203
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48048: LD_ADDR_VAR 0 5
48052: PUSH
48053: LD_EXP 45
48057: PUSH
48058: LD_VAR 0 2
48062: ARRAY
48063: PPUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 30
48069: PUSH
48070: LD_INT 6
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 30
48079: PUSH
48080: LD_INT 7
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 30
48089: PUSH
48090: LD_INT 8
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 30
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 30
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 25
48119: PUSH
48120: LD_INT 4
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: PPUSH
48136: CALL_OW 72
48140: ST_TO_ADDR
// if tmp then
48141: LD_VAR 0 5
48145: IFFALSE 48201
// begin k := NearestUnitToUnit ( tmp , j ) ;
48147: LD_ADDR_VAR 0 4
48151: PUSH
48152: LD_VAR 0 5
48156: PPUSH
48157: LD_VAR 0 3
48161: PPUSH
48162: CALL_OW 74
48166: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48167: LD_VAR 0 3
48171: PPUSH
48172: LD_VAR 0 4
48176: PPUSH
48177: CALL_OW 296
48181: PUSH
48182: LD_INT 7
48184: GREATER
48185: IFFALSE 48201
// ComMoveUnit ( j , k ) ;
48187: LD_VAR 0 3
48191: PPUSH
48192: LD_VAR 0 4
48196: PPUSH
48197: CALL_OW 112
// end ; end ;
48201: GO 48045
48203: POP
48204: POP
// if not need_heal_1 and not need_heal_2 then
48205: LD_VAR 0 6
48209: NOT
48210: PUSH
48211: LD_VAR 0 7
48215: NOT
48216: AND
48217: IFFALSE 48221
// continue ;
48219: GO 47724
// end ;
48221: GO 47724
48223: POP
48224: POP
// RaiseSailEvent ( 102 ) ;
48225: LD_INT 102
48227: PPUSH
48228: CALL_OW 427
// end ;
48232: LD_VAR 0 1
48236: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48237: LD_INT 0
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
// if not mc_bases then
48244: LD_EXP 45
48248: NOT
48249: IFFALSE 48253
// exit ;
48251: GO 48626
// for i = 1 to mc_bases do
48253: LD_ADDR_VAR 0 2
48257: PUSH
48258: DOUBLE
48259: LD_INT 1
48261: DEC
48262: ST_TO_ADDR
48263: LD_EXP 45
48267: PUSH
48268: FOR_TO
48269: IFFALSE 48624
// begin if not mc_building_need_repair [ i ] then
48271: LD_EXP 46
48275: PUSH
48276: LD_VAR 0 2
48280: ARRAY
48281: NOT
48282: IFFALSE 48320
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48284: LD_ADDR_EXP 47
48288: PUSH
48289: LD_EXP 47
48293: PPUSH
48294: LD_VAR 0 2
48298: PPUSH
48299: EMPTY
48300: PPUSH
48301: CALL_OW 1
48305: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48306: LD_VAR 0 2
48310: PPUSH
48311: LD_INT 101
48313: PPUSH
48314: CALL 47390 0 2
// continue ;
48318: GO 48268
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48320: LD_ADDR_EXP 51
48324: PUSH
48325: LD_EXP 51
48329: PPUSH
48330: LD_VAR 0 2
48334: PPUSH
48335: EMPTY
48336: PPUSH
48337: CALL_OW 1
48341: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48342: LD_VAR 0 2
48346: PPUSH
48347: LD_INT 103
48349: PPUSH
48350: CALL 47390 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48354: LD_ADDR_VAR 0 5
48358: PUSH
48359: LD_EXP 45
48363: PUSH
48364: LD_VAR 0 2
48368: ARRAY
48369: PPUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 25
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 25
48385: PUSH
48386: LD_INT 16
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: PPUSH
48401: CALL_OW 72
48405: ST_TO_ADDR
// if not tmp then
48406: LD_VAR 0 5
48410: NOT
48411: IFFALSE 48415
// continue ;
48413: GO 48268
// for j in tmp do
48415: LD_ADDR_VAR 0 3
48419: PUSH
48420: LD_VAR 0 5
48424: PUSH
48425: FOR_IN
48426: IFFALSE 48620
// begin if mc_need_heal [ i ] then
48428: LD_EXP 48
48432: PUSH
48433: LD_VAR 0 2
48437: ARRAY
48438: IFFALSE 48486
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48440: LD_VAR 0 3
48444: PUSH
48445: LD_EXP 48
48449: PUSH
48450: LD_VAR 0 2
48454: ARRAY
48455: PUSH
48456: LD_INT 1
48458: ARRAY
48459: IN
48460: PUSH
48461: LD_VAR 0 3
48465: PUSH
48466: LD_EXP 48
48470: PUSH
48471: LD_VAR 0 2
48475: ARRAY
48476: PUSH
48477: LD_INT 2
48479: ARRAY
48480: IN
48481: OR
48482: IFFALSE 48486
// continue ;
48484: GO 48425
// if IsInUnit ( j ) then
48486: LD_VAR 0 3
48490: PPUSH
48491: CALL_OW 310
48495: IFFALSE 48506
// ComExitBuilding ( j ) ;
48497: LD_VAR 0 3
48501: PPUSH
48502: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48506: LD_VAR 0 3
48510: PUSH
48511: LD_EXP 47
48515: PUSH
48516: LD_VAR 0 2
48520: ARRAY
48521: IN
48522: NOT
48523: IFFALSE 48581
// begin SetTag ( j , 101 ) ;
48525: LD_VAR 0 3
48529: PPUSH
48530: LD_INT 101
48532: PPUSH
48533: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48537: LD_ADDR_EXP 47
48541: PUSH
48542: LD_EXP 47
48546: PPUSH
48547: LD_VAR 0 2
48551: PUSH
48552: LD_EXP 47
48556: PUSH
48557: LD_VAR 0 2
48561: ARRAY
48562: PUSH
48563: LD_INT 1
48565: PLUS
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PPUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL 3179 0 3
48580: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48581: LD_INT 3
48583: PPUSH
48584: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48588: LD_VAR 0 3
48592: PPUSH
48593: LD_EXP 46
48597: PUSH
48598: LD_VAR 0 2
48602: ARRAY
48603: PPUSH
48604: LD_VAR 0 3
48608: PPUSH
48609: CALL_OW 74
48613: PPUSH
48614: CALL_OW 130
// end ;
48618: GO 48425
48620: POP
48621: POP
// end ;
48622: GO 48268
48624: POP
48625: POP
// end ;
48626: LD_VAR 0 1
48630: RET
// export function MC_Heal ; var i , j , tmp ; begin
48631: LD_INT 0
48633: PPUSH
48634: PPUSH
48635: PPUSH
48636: PPUSH
// if not mc_bases then
48637: LD_EXP 45
48641: NOT
48642: IFFALSE 48646
// exit ;
48644: GO 49011
// for i = 1 to mc_bases do
48646: LD_ADDR_VAR 0 2
48650: PUSH
48651: DOUBLE
48652: LD_INT 1
48654: DEC
48655: ST_TO_ADDR
48656: LD_EXP 45
48660: PUSH
48661: FOR_TO
48662: IFFALSE 49009
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48664: LD_EXP 48
48668: PUSH
48669: LD_VAR 0 2
48673: ARRAY
48674: PUSH
48675: LD_INT 1
48677: ARRAY
48678: NOT
48679: PUSH
48680: LD_EXP 48
48684: PUSH
48685: LD_VAR 0 2
48689: ARRAY
48690: PUSH
48691: LD_INT 2
48693: ARRAY
48694: NOT
48695: AND
48696: IFFALSE 48734
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48698: LD_ADDR_EXP 49
48702: PUSH
48703: LD_EXP 49
48707: PPUSH
48708: LD_VAR 0 2
48712: PPUSH
48713: EMPTY
48714: PPUSH
48715: CALL_OW 1
48719: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48720: LD_VAR 0 2
48724: PPUSH
48725: LD_INT 102
48727: PPUSH
48728: CALL 47390 0 2
// continue ;
48732: GO 48661
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48734: LD_ADDR_VAR 0 4
48738: PUSH
48739: LD_EXP 45
48743: PUSH
48744: LD_VAR 0 2
48748: ARRAY
48749: PPUSH
48750: LD_INT 25
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PPUSH
48760: CALL_OW 72
48764: ST_TO_ADDR
// if not tmp then
48765: LD_VAR 0 4
48769: NOT
48770: IFFALSE 48774
// continue ;
48772: GO 48661
// for j in tmp do
48774: LD_ADDR_VAR 0 3
48778: PUSH
48779: LD_VAR 0 4
48783: PUSH
48784: FOR_IN
48785: IFFALSE 49005
// begin if IsInUnit ( j ) then
48787: LD_VAR 0 3
48791: PPUSH
48792: CALL_OW 310
48796: IFFALSE 48807
// ComExitBuilding ( j ) ;
48798: LD_VAR 0 3
48802: PPUSH
48803: CALL_OW 122
// if not j in mc_healers [ i ] then
48807: LD_VAR 0 3
48811: PUSH
48812: LD_EXP 49
48816: PUSH
48817: LD_VAR 0 2
48821: ARRAY
48822: IN
48823: NOT
48824: IFFALSE 48870
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48826: LD_ADDR_EXP 49
48830: PUSH
48831: LD_EXP 49
48835: PPUSH
48836: LD_VAR 0 2
48840: PUSH
48841: LD_EXP 49
48845: PUSH
48846: LD_VAR 0 2
48850: ARRAY
48851: PUSH
48852: LD_INT 1
48854: PLUS
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PPUSH
48860: LD_VAR 0 3
48864: PPUSH
48865: CALL 3179 0 3
48869: ST_TO_ADDR
// if not GetTag ( j ) then
48870: LD_VAR 0 3
48874: PPUSH
48875: CALL_OW 110
48879: NOT
48880: IFFALSE 48894
// SetTag ( j , 102 ) ;
48882: LD_VAR 0 3
48886: PPUSH
48887: LD_INT 102
48889: PPUSH
48890: CALL_OW 109
// Wait ( 3 ) ;
48894: LD_INT 3
48896: PPUSH
48897: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48901: LD_EXP 48
48905: PUSH
48906: LD_VAR 0 2
48910: ARRAY
48911: PUSH
48912: LD_INT 1
48914: ARRAY
48915: IFFALSE 48947
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48917: LD_VAR 0 3
48921: PPUSH
48922: LD_EXP 48
48926: PUSH
48927: LD_VAR 0 2
48931: ARRAY
48932: PUSH
48933: LD_INT 1
48935: ARRAY
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PPUSH
48941: CALL_OW 128
48945: GO 49003
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48947: LD_VAR 0 3
48951: PPUSH
48952: CALL_OW 314
48956: NOT
48957: PUSH
48958: LD_EXP 48
48962: PUSH
48963: LD_VAR 0 2
48967: ARRAY
48968: PUSH
48969: LD_INT 2
48971: ARRAY
48972: AND
48973: IFFALSE 49003
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48975: LD_VAR 0 3
48979: PPUSH
48980: LD_EXP 48
48984: PUSH
48985: LD_VAR 0 2
48989: ARRAY
48990: PUSH
48991: LD_INT 2
48993: ARRAY
48994: PUSH
48995: LD_INT 1
48997: ARRAY
48998: PPUSH
48999: CALL_OW 128
// end ;
49003: GO 48784
49005: POP
49006: POP
// end ;
49007: GO 48661
49009: POP
49010: POP
// end ;
49011: LD_VAR 0 1
49015: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49016: LD_INT 0
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
// if not mc_bases then
49022: LD_EXP 45
49026: NOT
49027: IFFALSE 49031
// exit ;
49029: GO 49779
// for i = 1 to mc_bases do
49031: LD_ADDR_VAR 0 2
49035: PUSH
49036: DOUBLE
49037: LD_INT 1
49039: DEC
49040: ST_TO_ADDR
49041: LD_EXP 45
49045: PUSH
49046: FOR_TO
49047: IFFALSE 49777
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
49049: LD_EXP 50
49053: PUSH
49054: LD_VAR 0 2
49058: ARRAY
49059: NOT
49060: PUSH
49061: LD_EXP 52
49065: PUSH
49066: LD_VAR 0 2
49070: ARRAY
49071: NOT
49072: AND
49073: IFFALSE 49111
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49075: LD_ADDR_EXP 51
49079: PUSH
49080: LD_EXP 51
49084: PPUSH
49085: LD_VAR 0 2
49089: PPUSH
49090: EMPTY
49091: PPUSH
49092: CALL_OW 1
49096: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49097: LD_VAR 0 2
49101: PPUSH
49102: LD_INT 103
49104: PPUSH
49105: CALL 47390 0 2
// continue ;
49109: GO 49046
// end ; if mc_construct_list [ i ] then
49111: LD_EXP 52
49115: PUSH
49116: LD_VAR 0 2
49120: ARRAY
49121: IFFALSE 49326
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49123: LD_ADDR_VAR 0 4
49127: PUSH
49128: LD_EXP 45
49132: PUSH
49133: LD_VAR 0 2
49137: ARRAY
49138: PPUSH
49139: LD_INT 25
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PPUSH
49149: CALL_OW 72
49153: PUSH
49154: LD_EXP 47
49158: PUSH
49159: LD_VAR 0 2
49163: ARRAY
49164: DIFF
49165: ST_TO_ADDR
// if not tmp then
49166: LD_VAR 0 4
49170: NOT
49171: IFFALSE 49175
// continue ;
49173: GO 49046
// for j in tmp do
49175: LD_ADDR_VAR 0 3
49179: PUSH
49180: LD_VAR 0 4
49184: PUSH
49185: FOR_IN
49186: IFFALSE 49322
// begin if not mc_builders [ i ] then
49188: LD_EXP 51
49192: PUSH
49193: LD_VAR 0 2
49197: ARRAY
49198: NOT
49199: IFFALSE 49257
// begin SetTag ( j , 103 ) ;
49201: LD_VAR 0 3
49205: PPUSH
49206: LD_INT 103
49208: PPUSH
49209: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49213: LD_ADDR_EXP 51
49217: PUSH
49218: LD_EXP 51
49222: PPUSH
49223: LD_VAR 0 2
49227: PUSH
49228: LD_EXP 51
49232: PUSH
49233: LD_VAR 0 2
49237: ARRAY
49238: PUSH
49239: LD_INT 1
49241: PLUS
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PPUSH
49247: LD_VAR 0 3
49251: PPUSH
49252: CALL 3179 0 3
49256: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49257: LD_VAR 0 3
49261: PPUSH
49262: CALL_OW 310
49266: IFFALSE 49277
// ComExitBuilding ( j ) ;
49268: LD_VAR 0 3
49272: PPUSH
49273: CALL_OW 122
// wait ( 3 ) ;
49277: LD_INT 3
49279: PPUSH
49280: CALL_OW 67
// if not HasTask ( j ) then
49284: LD_VAR 0 3
49288: PPUSH
49289: CALL_OW 314
49293: NOT
49294: IFFALSE 49320
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49296: LD_VAR 0 3
49300: PPUSH
49301: LD_EXP 52
49305: PUSH
49306: LD_VAR 0 2
49310: ARRAY
49311: PUSH
49312: LD_INT 1
49314: ARRAY
49315: PPUSH
49316: CALL 5579 0 2
// end ;
49320: GO 49185
49322: POP
49323: POP
// end else
49324: GO 49775
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49326: LD_EXP 50
49330: PUSH
49331: LD_VAR 0 2
49335: ARRAY
49336: PUSH
49337: LD_EXP 45
49341: PUSH
49342: LD_VAR 0 2
49346: ARRAY
49347: PPUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 30
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 30
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: PPUSH
49376: CALL_OW 72
49380: AND
49381: IFFALSE 49775
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49383: LD_EXP 45
49387: PUSH
49388: LD_VAR 0 2
49392: ARRAY
49393: PPUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 30
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 30
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: PPUSH
49422: CALL_OW 72
49426: PUSH
49427: LD_INT 1
49429: ARRAY
49430: PPUSH
49431: LD_EXP 50
49435: PUSH
49436: LD_VAR 0 2
49440: ARRAY
49441: PUSH
49442: LD_INT 1
49444: ARRAY
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: PPUSH
49450: LD_EXP 50
49454: PUSH
49455: LD_VAR 0 2
49459: ARRAY
49460: PUSH
49461: LD_INT 1
49463: ARRAY
49464: PUSH
49465: LD_INT 2
49467: ARRAY
49468: PPUSH
49469: LD_EXP 50
49473: PUSH
49474: LD_VAR 0 2
49478: ARRAY
49479: PUSH
49480: LD_INT 1
49482: ARRAY
49483: PUSH
49484: LD_INT 3
49486: ARRAY
49487: PPUSH
49488: LD_EXP 50
49492: PUSH
49493: LD_VAR 0 2
49497: ARRAY
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PUSH
49503: LD_INT 4
49505: ARRAY
49506: PPUSH
49507: CALL 8735 0 5
49511: IFFALSE 49775
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49513: LD_ADDR_VAR 0 4
49517: PUSH
49518: LD_EXP 45
49522: PUSH
49523: LD_VAR 0 2
49527: ARRAY
49528: PPUSH
49529: LD_INT 25
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PPUSH
49539: CALL_OW 72
49543: PUSH
49544: LD_EXP 47
49548: PUSH
49549: LD_VAR 0 2
49553: ARRAY
49554: DIFF
49555: ST_TO_ADDR
// if not tmp then
49556: LD_VAR 0 4
49560: NOT
49561: IFFALSE 49565
// continue ;
49563: GO 49046
// for j in tmp do
49565: LD_ADDR_VAR 0 3
49569: PUSH
49570: LD_VAR 0 4
49574: PUSH
49575: FOR_IN
49576: IFFALSE 49773
// begin if not mc_builders [ i ] then
49578: LD_EXP 51
49582: PUSH
49583: LD_VAR 0 2
49587: ARRAY
49588: NOT
49589: IFFALSE 49647
// begin SetTag ( j , 103 ) ;
49591: LD_VAR 0 3
49595: PPUSH
49596: LD_INT 103
49598: PPUSH
49599: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49603: LD_ADDR_EXP 51
49607: PUSH
49608: LD_EXP 51
49612: PPUSH
49613: LD_VAR 0 2
49617: PUSH
49618: LD_EXP 51
49622: PUSH
49623: LD_VAR 0 2
49627: ARRAY
49628: PUSH
49629: LD_INT 1
49631: PLUS
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PPUSH
49637: LD_VAR 0 3
49641: PPUSH
49642: CALL 3179 0 3
49646: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49647: LD_VAR 0 3
49651: PPUSH
49652: CALL_OW 310
49656: IFFALSE 49667
// ComExitBuilding ( j ) ;
49658: LD_VAR 0 3
49662: PPUSH
49663: CALL_OW 122
// wait ( 3 ) ;
49667: LD_INT 3
49669: PPUSH
49670: CALL_OW 67
// if not HasTask ( j ) then
49674: LD_VAR 0 3
49678: PPUSH
49679: CALL_OW 314
49683: NOT
49684: IFFALSE 49771
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49686: LD_VAR 0 3
49690: PPUSH
49691: LD_EXP 50
49695: PUSH
49696: LD_VAR 0 2
49700: ARRAY
49701: PUSH
49702: LD_INT 1
49704: ARRAY
49705: PUSH
49706: LD_INT 1
49708: ARRAY
49709: PPUSH
49710: LD_EXP 50
49714: PUSH
49715: LD_VAR 0 2
49719: ARRAY
49720: PUSH
49721: LD_INT 1
49723: ARRAY
49724: PUSH
49725: LD_INT 2
49727: ARRAY
49728: PPUSH
49729: LD_EXP 50
49733: PUSH
49734: LD_VAR 0 2
49738: ARRAY
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: PUSH
49744: LD_INT 3
49746: ARRAY
49747: PPUSH
49748: LD_EXP 50
49752: PUSH
49753: LD_VAR 0 2
49757: ARRAY
49758: PUSH
49759: LD_INT 1
49761: ARRAY
49762: PUSH
49763: LD_INT 4
49765: ARRAY
49766: PPUSH
49767: CALL_OW 145
// end ;
49771: GO 49575
49773: POP
49774: POP
// end ; end ;
49775: GO 49046
49777: POP
49778: POP
// end ;
49779: LD_VAR 0 1
49783: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
49784: LD_INT 0
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
// if not mc_bases then
49793: LD_EXP 45
49797: NOT
49798: IFFALSE 49802
// exit ;
49800: GO 50098
// for i = 1 to mc_bases do
49802: LD_ADDR_VAR 0 2
49806: PUSH
49807: DOUBLE
49808: LD_INT 1
49810: DEC
49811: ST_TO_ADDR
49812: LD_EXP 45
49816: PUSH
49817: FOR_TO
49818: IFFALSE 50096
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
49820: LD_EXP 53
49824: PUSH
49825: LD_VAR 0 2
49829: ARRAY
49830: NOT
49831: PUSH
49832: LD_EXP 45
49836: PUSH
49837: LD_VAR 0 2
49841: ARRAY
49842: PPUSH
49843: LD_INT 30
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PPUSH
49853: CALL_OW 72
49857: NOT
49858: OR
49859: IFFALSE 49863
// continue ;
49861: GO 49817
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
49863: LD_EXP 53
49867: PUSH
49868: LD_VAR 0 2
49872: ARRAY
49873: PUSH
49874: LD_INT 1
49876: ARRAY
49877: PPUSH
49878: CALL_OW 269
49882: IFFALSE 49948
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
49884: LD_ADDR_VAR 0 4
49888: PUSH
49889: LD_EXP 53
49893: PUSH
49894: LD_VAR 0 2
49898: ARRAY
49899: PPUSH
49900: LD_INT 1
49902: PPUSH
49903: CALL_OW 3
49907: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
49908: LD_ADDR_EXP 53
49912: PUSH
49913: LD_EXP 53
49917: PPUSH
49918: LD_VAR 0 2
49922: PPUSH
49923: LD_VAR 0 4
49927: PPUSH
49928: CALL_OW 1
49932: ST_TO_ADDR
// if not mc_turret_list [ i ] then
49933: LD_EXP 53
49937: PUSH
49938: LD_VAR 0 2
49942: ARRAY
49943: NOT
49944: IFFALSE 49948
// continue ;
49946: GO 49817
// end ; busy := false ;
49948: LD_ADDR_VAR 0 6
49952: PUSH
49953: LD_INT 0
49955: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
49956: LD_ADDR_VAR 0 4
49960: PUSH
49961: LD_EXP 45
49965: PUSH
49966: LD_VAR 0 2
49970: ARRAY
49971: PPUSH
49972: LD_INT 30
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PPUSH
49982: CALL_OW 72
49986: ST_TO_ADDR
// for j in tmp do
49987: LD_ADDR_VAR 0 3
49991: PUSH
49992: LD_VAR 0 4
49996: PUSH
49997: FOR_IN
49998: IFFALSE 50026
// if not BuildingStatus ( j ) = bs_idle then
50000: LD_VAR 0 3
50004: PPUSH
50005: CALL_OW 461
50009: PUSH
50010: LD_INT 2
50012: EQUAL
50013: NOT
50014: IFFALSE 50024
// busy := true ;
50016: LD_ADDR_VAR 0 6
50020: PUSH
50021: LD_INT 1
50023: ST_TO_ADDR
50024: GO 49997
50026: POP
50027: POP
// if busy then
50028: LD_VAR 0 6
50032: IFFALSE 50036
// continue ;
50034: GO 49817
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
50036: LD_ADDR_VAR 0 7
50040: PUSH
50041: LD_EXP 53
50045: PUSH
50046: LD_VAR 0 2
50050: ARRAY
50051: PUSH
50052: LD_INT 1
50054: ARRAY
50055: PPUSH
50056: CALL 7140 0 1
50060: ST_TO_ADDR
// if not weapon then
50061: LD_VAR 0 7
50065: NOT
50066: IFFALSE 50070
// continue ;
50068: GO 49817
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
50070: LD_EXP 53
50074: PUSH
50075: LD_VAR 0 2
50079: ARRAY
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: PPUSH
50085: LD_VAR 0 7
50089: PPUSH
50090: CALL_OW 148
// end ;
50094: GO 49817
50096: POP
50097: POP
// end ;
50098: LD_VAR 0 1
50102: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
50103: LD_INT 0
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
// if not mc_bases then
50112: LD_EXP 45
50116: NOT
50117: IFFALSE 50121
// exit ;
50119: GO 50891
// for i = 1 to mc_bases do
50121: LD_ADDR_VAR 0 2
50125: PUSH
50126: DOUBLE
50127: LD_INT 1
50129: DEC
50130: ST_TO_ADDR
50131: LD_EXP 45
50135: PUSH
50136: FOR_TO
50137: IFFALSE 50889
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50139: LD_ADDR_VAR 0 7
50143: PUSH
50144: LD_EXP 45
50148: PUSH
50149: LD_VAR 0 2
50153: ARRAY
50154: PPUSH
50155: LD_INT 24
50157: PUSH
50158: LD_INT 375
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 30
50170: PUSH
50171: LD_INT 32
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 30
50180: PUSH
50181: LD_INT 31
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 58
50195: PUSH
50196: EMPTY
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: PPUSH
50204: CALL_OW 72
50208: ST_TO_ADDR
// if not x then
50209: LD_VAR 0 7
50213: NOT
50214: IFFALSE 50218
// continue ;
50216: GO 50136
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50218: LD_ADDR_EXP 54
50222: PUSH
50223: LD_EXP 54
50227: PPUSH
50228: LD_VAR 0 2
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PPUSH
50240: LD_VAR 0 7
50244: PPUSH
50245: CALL 3179 0 3
50249: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50250: LD_EXP 54
50254: PUSH
50255: LD_VAR 0 2
50259: ARRAY
50260: NOT
50261: PUSH
50262: LD_EXP 54
50266: PUSH
50267: LD_VAR 0 2
50271: ARRAY
50272: PUSH
50273: LD_INT 1
50275: ARRAY
50276: NOT
50277: OR
50278: IFFALSE 50282
// continue ;
50280: GO 50136
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50282: LD_EXP 54
50286: PUSH
50287: LD_VAR 0 2
50291: ARRAY
50292: PUSH
50293: LD_INT 1
50295: ARRAY
50296: PUSH
50297: LD_INT 1
50299: ARRAY
50300: PPUSH
50301: CALL_OW 313
50305: PUSH
50306: LD_INT 0
50308: EQUAL
50309: IFFALSE 50887
// if not mc_empty_turret_list [ i ] [ 2 ] then
50311: LD_EXP 54
50315: PUSH
50316: LD_VAR 0 2
50320: ARRAY
50321: PUSH
50322: LD_INT 2
50324: ARRAY
50325: NOT
50326: IFFALSE 50585
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50328: LD_ADDR_VAR 0 6
50332: PUSH
50333: LD_EXP 45
50337: PUSH
50338: LD_VAR 0 2
50342: ARRAY
50343: PUSH
50344: LD_EXP 61
50348: PUSH
50349: LD_VAR 0 2
50353: ARRAY
50354: DIFF
50355: PPUSH
50356: LD_INT 25
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 54
50371: PUSH
50372: EMPTY
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PPUSH
50383: CALL_OW 72
50387: ST_TO_ADDR
// if tmp2 then
50388: LD_VAR 0 6
50392: IFFALSE 50434
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50394: LD_ADDR_EXP 54
50398: PUSH
50399: LD_EXP 54
50403: PPUSH
50404: LD_VAR 0 2
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PPUSH
50416: LD_VAR 0 6
50420: PUSH
50421: LD_INT 1
50423: ARRAY
50424: PPUSH
50425: CALL 3179 0 3
50429: ST_TO_ADDR
// break ;
50430: GO 50889
// end else
50432: GO 50583
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50434: LD_ADDR_VAR 0 5
50438: PUSH
50439: LD_EXP 45
50443: PUSH
50444: LD_VAR 0 2
50448: ARRAY
50449: PPUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 30
50455: PUSH
50456: LD_INT 4
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 30
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: PPUSH
50478: CALL_OW 72
50482: ST_TO_ADDR
// if not tmp then
50483: LD_VAR 0 5
50487: NOT
50488: IFFALSE 50492
// continue ;
50490: GO 50136
// for j in tmp do
50492: LD_ADDR_VAR 0 3
50496: PUSH
50497: LD_VAR 0 5
50501: PUSH
50502: FOR_IN
50503: IFFALSE 50581
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50505: LD_ADDR_VAR 0 4
50509: PUSH
50510: LD_VAR 0 3
50514: PPUSH
50515: CALL_OW 313
50519: PPUSH
50520: LD_INT 25
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PPUSH
50530: CALL_OW 72
50534: ST_TO_ADDR
// if t then
50535: LD_VAR 0 4
50539: IFFALSE 50579
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50541: LD_ADDR_EXP 54
50545: PUSH
50546: LD_EXP 54
50550: PPUSH
50551: LD_VAR 0 2
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PPUSH
50563: LD_VAR 0 4
50567: PUSH
50568: LD_INT 1
50570: ARRAY
50571: PPUSH
50572: CALL 3179 0 3
50576: ST_TO_ADDR
// break ;
50577: GO 50581
// end ; end ;
50579: GO 50502
50581: POP
50582: POP
// end ; end else
50583: GO 50887
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50585: LD_EXP 54
50589: PUSH
50590: LD_VAR 0 2
50594: ARRAY
50595: PUSH
50596: LD_INT 2
50598: ARRAY
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: PPUSH
50604: CALL_OW 301
50608: IFFALSE 50641
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50610: LD_ADDR_EXP 54
50614: PUSH
50615: LD_EXP 54
50619: PPUSH
50620: LD_VAR 0 2
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PPUSH
50632: EMPTY
50633: PPUSH
50634: CALL 3179 0 3
50638: ST_TO_ADDR
// break ;
50639: GO 50889
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
50641: LD_EXP 54
50645: PUSH
50646: LD_VAR 0 2
50650: ARRAY
50651: PUSH
50652: LD_INT 2
50654: ARRAY
50655: PUSH
50656: LD_INT 1
50658: ARRAY
50659: PPUSH
50660: CALL_OW 314
50664: NOT
50665: PUSH
50666: LD_EXP 54
50670: PUSH
50671: LD_VAR 0 2
50675: ARRAY
50676: PUSH
50677: LD_INT 2
50679: ARRAY
50680: PUSH
50681: LD_INT 1
50683: ARRAY
50684: PUSH
50685: LD_EXP 54
50689: PUSH
50690: LD_VAR 0 2
50694: ARRAY
50695: PUSH
50696: LD_INT 1
50698: ARRAY
50699: PUSH
50700: LD_INT 1
50702: ARRAY
50703: PPUSH
50704: CALL_OW 313
50708: IN
50709: NOT
50710: AND
50711: IFFALSE 50887
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50713: LD_EXP 54
50717: PUSH
50718: LD_VAR 0 2
50722: ARRAY
50723: PUSH
50724: LD_INT 2
50726: ARRAY
50727: PUSH
50728: LD_INT 1
50730: ARRAY
50731: PPUSH
50732: CALL_OW 310
50736: IFFALSE 50761
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50738: LD_EXP 54
50742: PUSH
50743: LD_VAR 0 2
50747: ARRAY
50748: PUSH
50749: LD_INT 2
50751: ARRAY
50752: PUSH
50753: LD_INT 1
50755: ARRAY
50756: PPUSH
50757: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
50761: LD_EXP 54
50765: PUSH
50766: LD_VAR 0 2
50770: ARRAY
50771: PUSH
50772: LD_INT 2
50774: ARRAY
50775: PUSH
50776: LD_INT 1
50778: ARRAY
50779: PPUSH
50780: LD_EXP 54
50784: PUSH
50785: LD_VAR 0 2
50789: ARRAY
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PPUSH
50799: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
50803: LD_INT 35
50805: PPUSH
50806: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
50810: LD_EXP 54
50814: PUSH
50815: LD_VAR 0 2
50819: ARRAY
50820: PUSH
50821: LD_INT 2
50823: ARRAY
50824: NOT
50825: IFFALSE 50829
// break ;
50827: GO 50854
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50829: LD_EXP 54
50833: PUSH
50834: LD_VAR 0 2
50838: ARRAY
50839: PUSH
50840: LD_INT 2
50842: ARRAY
50843: PUSH
50844: LD_INT 1
50846: ARRAY
50847: PPUSH
50848: CALL_OW 310
50852: IFFALSE 50803
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50854: LD_ADDR_EXP 54
50858: PUSH
50859: LD_EXP 54
50863: PPUSH
50864: LD_VAR 0 2
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PPUSH
50876: EMPTY
50877: PPUSH
50878: CALL 3179 0 3
50882: ST_TO_ADDR
// exit ;
50883: POP
50884: POP
50885: GO 50891
// end ; end ; end ;
50887: GO 50136
50889: POP
50890: POP
// end ;
50891: LD_VAR 0 1
50895: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
50900: PPUSH
50901: PPUSH
50902: PPUSH
50903: PPUSH
// if not mc_bases then
50904: LD_EXP 45
50908: NOT
50909: IFFALSE 50913
// exit ;
50911: GO 51723
// for i = 1 to mc_bases do
50913: LD_ADDR_VAR 0 2
50917: PUSH
50918: DOUBLE
50919: LD_INT 1
50921: DEC
50922: ST_TO_ADDR
50923: LD_EXP 45
50927: PUSH
50928: FOR_TO
50929: IFFALSE 51721
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
50931: LD_EXP 55
50935: PUSH
50936: LD_VAR 0 2
50940: ARRAY
50941: NOT
50942: PUSH
50943: LD_EXP 55
50947: PUSH
50948: LD_VAR 0 2
50952: ARRAY
50953: PUSH
50954: LD_EXP 56
50958: PUSH
50959: LD_VAR 0 2
50963: ARRAY
50964: EQUAL
50965: OR
50966: IFFALSE 50970
// continue ;
50968: GO 50928
// if mc_miners [ i ] then
50970: LD_EXP 56
50974: PUSH
50975: LD_VAR 0 2
50979: ARRAY
50980: IFFALSE 51408
// begin k := 1 ;
50982: LD_ADDR_VAR 0 4
50986: PUSH
50987: LD_INT 1
50989: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
50990: LD_ADDR_VAR 0 3
50994: PUSH
50995: DOUBLE
50996: LD_EXP 56
51000: PUSH
51001: LD_VAR 0 2
51005: ARRAY
51006: INC
51007: ST_TO_ADDR
51008: LD_INT 1
51010: PUSH
51011: FOR_DOWNTO
51012: IFFALSE 51406
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51014: LD_EXP 56
51018: PUSH
51019: LD_VAR 0 2
51023: ARRAY
51024: PUSH
51025: LD_VAR 0 3
51029: ARRAY
51030: PPUSH
51031: CALL_OW 301
51035: IFFALSE 51098
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51037: LD_ADDR_VAR 0 5
51041: PUSH
51042: LD_EXP 56
51046: PUSH
51047: LD_VAR 0 2
51051: ARRAY
51052: PUSH
51053: LD_EXP 56
51057: PUSH
51058: LD_VAR 0 2
51062: ARRAY
51063: PUSH
51064: LD_VAR 0 3
51068: ARRAY
51069: DIFF
51070: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51071: LD_ADDR_EXP 56
51075: PUSH
51076: LD_EXP 56
51080: PPUSH
51081: LD_VAR 0 2
51085: PPUSH
51086: LD_VAR 0 5
51090: PPUSH
51091: CALL_OW 1
51095: ST_TO_ADDR
// continue ;
51096: GO 51011
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
51098: LD_EXP 56
51102: PUSH
51103: LD_VAR 0 2
51107: ARRAY
51108: PUSH
51109: LD_VAR 0 3
51113: ARRAY
51114: PPUSH
51115: CALL_OW 257
51119: PUSH
51120: LD_INT 1
51122: EQUAL
51123: PUSH
51124: LD_EXP 56
51128: PUSH
51129: LD_VAR 0 2
51133: ARRAY
51134: PUSH
51135: LD_VAR 0 3
51139: ARRAY
51140: PPUSH
51141: CALL_OW 459
51145: NOT
51146: AND
51147: PUSH
51148: LD_EXP 56
51152: PUSH
51153: LD_VAR 0 2
51157: ARRAY
51158: PUSH
51159: LD_VAR 0 3
51163: ARRAY
51164: PPUSH
51165: CALL_OW 255
51169: PPUSH
51170: LD_EXP 55
51174: PUSH
51175: LD_VAR 0 2
51179: ARRAY
51180: PUSH
51181: LD_VAR 0 3
51185: ARRAY
51186: PUSH
51187: LD_INT 1
51189: ARRAY
51190: PPUSH
51191: LD_EXP 55
51195: PUSH
51196: LD_VAR 0 2
51200: ARRAY
51201: PUSH
51202: LD_VAR 0 3
51206: ARRAY
51207: PUSH
51208: LD_INT 2
51210: ARRAY
51211: PPUSH
51212: LD_INT 12
51214: PPUSH
51215: CALL 3673 0 4
51219: PUSH
51220: LD_INT 4
51222: ARRAY
51223: PUSH
51224: LD_INT 0
51226: EQUAL
51227: AND
51228: IFFALSE 51404
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51230: LD_EXP 56
51234: PUSH
51235: LD_VAR 0 2
51239: ARRAY
51240: PUSH
51241: LD_VAR 0 3
51245: ARRAY
51246: PPUSH
51247: CALL_OW 310
51251: IFFALSE 51274
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51253: LD_EXP 56
51257: PUSH
51258: LD_VAR 0 2
51262: ARRAY
51263: PUSH
51264: LD_VAR 0 3
51268: ARRAY
51269: PPUSH
51270: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51274: LD_EXP 56
51278: PUSH
51279: LD_VAR 0 2
51283: ARRAY
51284: PUSH
51285: LD_VAR 0 3
51289: ARRAY
51290: PPUSH
51291: CALL_OW 314
51295: NOT
51296: IFFALSE 51364
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51298: LD_EXP 56
51302: PUSH
51303: LD_VAR 0 2
51307: ARRAY
51308: PUSH
51309: LD_VAR 0 3
51313: ARRAY
51314: PPUSH
51315: LD_EXP 55
51319: PUSH
51320: LD_VAR 0 2
51324: ARRAY
51325: PUSH
51326: LD_VAR 0 4
51330: ARRAY
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: PPUSH
51336: LD_EXP 55
51340: PUSH
51341: LD_VAR 0 2
51345: ARRAY
51346: PUSH
51347: LD_VAR 0 4
51351: ARRAY
51352: PUSH
51353: LD_INT 2
51355: ARRAY
51356: PPUSH
51357: LD_INT 0
51359: PPUSH
51360: CALL_OW 193
// k := k + 1 ;
51364: LD_ADDR_VAR 0 4
51368: PUSH
51369: LD_VAR 0 4
51373: PUSH
51374: LD_INT 1
51376: PLUS
51377: ST_TO_ADDR
// if k > mc_mines [ i ] then
51378: LD_VAR 0 4
51382: PUSH
51383: LD_EXP 55
51387: PUSH
51388: LD_VAR 0 2
51392: ARRAY
51393: GREATER
51394: IFFALSE 51404
// k := 1 ;
51396: LD_ADDR_VAR 0 4
51400: PUSH
51401: LD_INT 1
51403: ST_TO_ADDR
// end ; end ;
51404: GO 51011
51406: POP
51407: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51408: LD_ADDR_VAR 0 5
51412: PUSH
51413: LD_EXP 45
51417: PUSH
51418: LD_VAR 0 2
51422: ARRAY
51423: PPUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 30
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 5
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 30
51449: PUSH
51450: LD_INT 32
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: PPUSH
51463: CALL_OW 72
51467: ST_TO_ADDR
// if not tmp then
51468: LD_VAR 0 5
51472: NOT
51473: IFFALSE 51477
// continue ;
51475: GO 50928
// list := [ ] ;
51477: LD_ADDR_VAR 0 6
51481: PUSH
51482: EMPTY
51483: ST_TO_ADDR
// for j in tmp do
51484: LD_ADDR_VAR 0 3
51488: PUSH
51489: LD_VAR 0 5
51493: PUSH
51494: FOR_IN
51495: IFFALSE 51564
// begin for k in UnitsInside ( j ) do
51497: LD_ADDR_VAR 0 4
51501: PUSH
51502: LD_VAR 0 3
51506: PPUSH
51507: CALL_OW 313
51511: PUSH
51512: FOR_IN
51513: IFFALSE 51560
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51515: LD_VAR 0 4
51519: PPUSH
51520: CALL_OW 257
51524: PUSH
51525: LD_INT 1
51527: EQUAL
51528: PUSH
51529: LD_VAR 0 4
51533: PPUSH
51534: CALL_OW 459
51538: NOT
51539: AND
51540: IFFALSE 51558
// list := list ^ k ;
51542: LD_ADDR_VAR 0 6
51546: PUSH
51547: LD_VAR 0 6
51551: PUSH
51552: LD_VAR 0 4
51556: ADD
51557: ST_TO_ADDR
51558: GO 51512
51560: POP
51561: POP
// end ;
51562: GO 51494
51564: POP
51565: POP
// list := list diff mc_miners [ i ] ;
51566: LD_ADDR_VAR 0 6
51570: PUSH
51571: LD_VAR 0 6
51575: PUSH
51576: LD_EXP 56
51580: PUSH
51581: LD_VAR 0 2
51585: ARRAY
51586: DIFF
51587: ST_TO_ADDR
// if not list then
51588: LD_VAR 0 6
51592: NOT
51593: IFFALSE 51597
// continue ;
51595: GO 50928
// k := mc_mines [ i ] - mc_miners [ i ] ;
51597: LD_ADDR_VAR 0 4
51601: PUSH
51602: LD_EXP 55
51606: PUSH
51607: LD_VAR 0 2
51611: ARRAY
51612: PUSH
51613: LD_EXP 56
51617: PUSH
51618: LD_VAR 0 2
51622: ARRAY
51623: MINUS
51624: ST_TO_ADDR
// if k > list then
51625: LD_VAR 0 4
51629: PUSH
51630: LD_VAR 0 6
51634: GREATER
51635: IFFALSE 51647
// k := list ;
51637: LD_ADDR_VAR 0 4
51641: PUSH
51642: LD_VAR 0 6
51646: ST_TO_ADDR
// for j = 1 to k do
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: DOUBLE
51653: LD_INT 1
51655: DEC
51656: ST_TO_ADDR
51657: LD_VAR 0 4
51661: PUSH
51662: FOR_TO
51663: IFFALSE 51717
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51665: LD_ADDR_EXP 56
51669: PUSH
51670: LD_EXP 56
51674: PPUSH
51675: LD_VAR 0 2
51679: PUSH
51680: LD_EXP 56
51684: PUSH
51685: LD_VAR 0 2
51689: ARRAY
51690: PUSH
51691: LD_INT 1
51693: PLUS
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PPUSH
51699: LD_VAR 0 6
51703: PUSH
51704: LD_VAR 0 3
51708: ARRAY
51709: PPUSH
51710: CALL 3179 0 3
51714: ST_TO_ADDR
51715: GO 51662
51717: POP
51718: POP
// end ;
51719: GO 50928
51721: POP
51722: POP
// end ;
51723: LD_VAR 0 1
51727: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
51728: LD_INT 0
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
// if not mc_bases then
51735: LD_EXP 45
51739: NOT
51740: IFFALSE 51744
// exit ;
51742: GO 52520
// for i = 1 to mc_bases do
51744: LD_ADDR_VAR 0 2
51748: PUSH
51749: DOUBLE
51750: LD_INT 1
51752: DEC
51753: ST_TO_ADDR
51754: LD_EXP 45
51758: PUSH
51759: FOR_TO
51760: IFFALSE 52518
// begin if not mc_bases [ i ] then
51762: LD_EXP 45
51766: PUSH
51767: LD_VAR 0 2
51771: ARRAY
51772: NOT
51773: IFFALSE 51777
// continue ;
51775: GO 51759
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51777: LD_EXP 58
51781: PUSH
51782: LD_VAR 0 2
51786: ARRAY
51787: NOT
51788: PUSH
51789: LD_EXP 59
51793: PUSH
51794: LD_VAR 0 2
51798: ARRAY
51799: AND
51800: IFFALSE 51838
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51802: LD_ADDR_EXP 59
51806: PUSH
51807: LD_EXP 59
51811: PPUSH
51812: LD_VAR 0 2
51816: PPUSH
51817: EMPTY
51818: PPUSH
51819: CALL_OW 1
51823: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51824: LD_VAR 0 2
51828: PPUSH
51829: LD_INT 107
51831: PPUSH
51832: CALL 47390 0 2
// continue ;
51836: GO 51759
// end ; target := [ ] ;
51838: LD_ADDR_VAR 0 5
51842: PUSH
51843: EMPTY
51844: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51845: LD_ADDR_VAR 0 3
51849: PUSH
51850: DOUBLE
51851: LD_EXP 58
51855: PUSH
51856: LD_VAR 0 2
51860: ARRAY
51861: INC
51862: ST_TO_ADDR
51863: LD_INT 1
51865: PUSH
51866: FOR_DOWNTO
51867: IFFALSE 52127
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51869: LD_EXP 58
51873: PUSH
51874: LD_VAR 0 2
51878: ARRAY
51879: PUSH
51880: LD_VAR 0 3
51884: ARRAY
51885: PUSH
51886: LD_INT 2
51888: ARRAY
51889: PPUSH
51890: LD_EXP 58
51894: PUSH
51895: LD_VAR 0 2
51899: ARRAY
51900: PUSH
51901: LD_VAR 0 3
51905: ARRAY
51906: PUSH
51907: LD_INT 3
51909: ARRAY
51910: PPUSH
51911: CALL_OW 488
51915: PUSH
51916: LD_EXP 58
51920: PUSH
51921: LD_VAR 0 2
51925: ARRAY
51926: PUSH
51927: LD_VAR 0 3
51931: ARRAY
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: PPUSH
51937: LD_EXP 58
51941: PUSH
51942: LD_VAR 0 2
51946: ARRAY
51947: PUSH
51948: LD_VAR 0 3
51952: ARRAY
51953: PUSH
51954: LD_INT 3
51956: ARRAY
51957: PPUSH
51958: CALL_OW 284
51962: PUSH
51963: LD_INT 0
51965: EQUAL
51966: AND
51967: IFFALSE 52022
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51969: LD_ADDR_VAR 0 4
51973: PUSH
51974: LD_EXP 58
51978: PUSH
51979: LD_VAR 0 2
51983: ARRAY
51984: PPUSH
51985: LD_VAR 0 3
51989: PPUSH
51990: CALL_OW 3
51994: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
51995: LD_ADDR_EXP 58
51999: PUSH
52000: LD_EXP 58
52004: PPUSH
52005: LD_VAR 0 2
52009: PPUSH
52010: LD_VAR 0 4
52014: PPUSH
52015: CALL_OW 1
52019: ST_TO_ADDR
// continue ;
52020: GO 51866
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52022: LD_EXP 45
52026: PUSH
52027: LD_VAR 0 2
52031: ARRAY
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PPUSH
52037: CALL_OW 255
52041: PPUSH
52042: LD_EXP 58
52046: PUSH
52047: LD_VAR 0 2
52051: ARRAY
52052: PUSH
52053: LD_VAR 0 3
52057: ARRAY
52058: PUSH
52059: LD_INT 2
52061: ARRAY
52062: PPUSH
52063: LD_EXP 58
52067: PUSH
52068: LD_VAR 0 2
52072: ARRAY
52073: PUSH
52074: LD_VAR 0 3
52078: ARRAY
52079: PUSH
52080: LD_INT 3
52082: ARRAY
52083: PPUSH
52084: LD_INT 20
52086: PPUSH
52087: CALL 3673 0 4
52091: PUSH
52092: LD_INT 4
52094: ARRAY
52095: PUSH
52096: LD_INT 0
52098: EQUAL
52099: IFFALSE 52125
// begin target := mc_crates [ i ] [ j ] ;
52101: LD_ADDR_VAR 0 5
52105: PUSH
52106: LD_EXP 58
52110: PUSH
52111: LD_VAR 0 2
52115: ARRAY
52116: PUSH
52117: LD_VAR 0 3
52121: ARRAY
52122: ST_TO_ADDR
// break ;
52123: GO 52127
// end ; end ;
52125: GO 51866
52127: POP
52128: POP
// if not target then
52129: LD_VAR 0 5
52133: NOT
52134: IFFALSE 52138
// continue ;
52136: GO 51759
// if mc_crates_collector [ i ] < 5 then
52138: LD_EXP 59
52142: PUSH
52143: LD_VAR 0 2
52147: ARRAY
52148: PUSH
52149: LD_INT 5
52151: LESS
52152: IFFALSE 52332
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52154: LD_ADDR_VAR 0 4
52158: PUSH
52159: LD_EXP 45
52163: PUSH
52164: LD_VAR 0 2
52168: ARRAY
52169: PPUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 25
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 25
52185: PUSH
52186: LD_INT 16
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 24
52200: PUSH
52201: LD_INT 750
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PPUSH
52212: CALL_OW 72
52216: ST_TO_ADDR
// if not tmp then
52217: LD_VAR 0 4
52221: NOT
52222: IFFALSE 52226
// continue ;
52224: GO 51759
// for j in tmp do
52226: LD_ADDR_VAR 0 3
52230: PUSH
52231: LD_VAR 0 4
52235: PUSH
52236: FOR_IN
52237: IFFALSE 52330
// if GetTag ( j ) = 0 then
52239: LD_VAR 0 3
52243: PPUSH
52244: CALL_OW 110
52248: PUSH
52249: LD_INT 0
52251: EQUAL
52252: IFFALSE 52328
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52254: LD_ADDR_EXP 59
52258: PUSH
52259: LD_EXP 59
52263: PPUSH
52264: LD_VAR 0 2
52268: PUSH
52269: LD_EXP 59
52273: PUSH
52274: LD_VAR 0 2
52278: ARRAY
52279: PUSH
52280: LD_INT 1
52282: PLUS
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PPUSH
52288: LD_VAR 0 3
52292: PPUSH
52293: CALL 3179 0 3
52297: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52298: LD_VAR 0 3
52302: PPUSH
52303: LD_INT 107
52305: PPUSH
52306: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52310: LD_EXP 59
52314: PUSH
52315: LD_VAR 0 2
52319: ARRAY
52320: PUSH
52321: LD_INT 5
52323: GREATER
52324: IFFALSE 52328
// break ;
52326: GO 52330
// end ;
52328: GO 52236
52330: POP
52331: POP
// end ; if mc_crates_collector [ i ] and target then
52332: LD_EXP 59
52336: PUSH
52337: LD_VAR 0 2
52341: ARRAY
52342: PUSH
52343: LD_VAR 0 5
52347: AND
52348: IFFALSE 52516
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52350: LD_EXP 59
52354: PUSH
52355: LD_VAR 0 2
52359: ARRAY
52360: PUSH
52361: LD_VAR 0 5
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: LESS
52370: IFFALSE 52390
// tmp := mc_crates_collector [ i ] else
52372: LD_ADDR_VAR 0 4
52376: PUSH
52377: LD_EXP 59
52381: PUSH
52382: LD_VAR 0 2
52386: ARRAY
52387: ST_TO_ADDR
52388: GO 52404
// tmp := target [ 1 ] ;
52390: LD_ADDR_VAR 0 4
52394: PUSH
52395: LD_VAR 0 5
52399: PUSH
52400: LD_INT 1
52402: ARRAY
52403: ST_TO_ADDR
// for j = 1 to tmp do
52404: LD_ADDR_VAR 0 3
52408: PUSH
52409: DOUBLE
52410: LD_INT 1
52412: DEC
52413: ST_TO_ADDR
52414: LD_VAR 0 4
52418: PUSH
52419: FOR_TO
52420: IFFALSE 52514
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52422: LD_EXP 59
52426: PUSH
52427: LD_VAR 0 2
52431: ARRAY
52432: PUSH
52433: LD_VAR 0 3
52437: ARRAY
52438: PPUSH
52439: CALL_OW 310
52443: IFFALSE 52466
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52445: LD_EXP 59
52449: PUSH
52450: LD_VAR 0 2
52454: ARRAY
52455: PUSH
52456: LD_VAR 0 3
52460: ARRAY
52461: PPUSH
52462: CALL_OW 122
// wait ( 3 ) ;
52466: LD_INT 3
52468: PPUSH
52469: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
52473: LD_EXP 59
52477: PUSH
52478: LD_VAR 0 2
52482: ARRAY
52483: PUSH
52484: LD_VAR 0 3
52488: ARRAY
52489: PPUSH
52490: LD_VAR 0 5
52494: PUSH
52495: LD_INT 2
52497: ARRAY
52498: PPUSH
52499: LD_VAR 0 5
52503: PUSH
52504: LD_INT 3
52506: ARRAY
52507: PPUSH
52508: CALL_OW 117
// end ;
52512: GO 52419
52514: POP
52515: POP
// end ; end ;
52516: GO 51759
52518: POP
52519: POP
// end ;
52520: LD_VAR 0 1
52524: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
52525: LD_INT 0
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
// if not mc_bases then
52531: LD_EXP 45
52535: NOT
52536: IFFALSE 52540
// exit ;
52538: GO 52689
// for i = 1 to mc_bases do
52540: LD_ADDR_VAR 0 2
52544: PUSH
52545: DOUBLE
52546: LD_INT 1
52548: DEC
52549: ST_TO_ADDR
52550: LD_EXP 45
52554: PUSH
52555: FOR_TO
52556: IFFALSE 52687
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
52558: LD_ADDR_VAR 0 4
52562: PUSH
52563: LD_EXP 60
52567: PUSH
52568: LD_VAR 0 2
52572: ARRAY
52573: PPUSH
52574: LD_INT 33
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PPUSH
52584: CALL_OW 72
52588: ST_TO_ADDR
// if tmp then
52589: LD_VAR 0 4
52593: IFFALSE 52685
// for j in tmp do
52595: LD_ADDR_VAR 0 3
52599: PUSH
52600: LD_VAR 0 4
52604: PUSH
52605: FOR_IN
52606: IFFALSE 52683
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
52608: LD_VAR 0 3
52612: PPUSH
52613: CALL_OW 312
52617: NOT
52618: PUSH
52619: LD_VAR 0 3
52623: PPUSH
52624: CALL_OW 256
52628: PUSH
52629: LD_INT 250
52631: GREATEREQUAL
52632: AND
52633: IFFALSE 52646
// Connect ( j ) else
52635: LD_VAR 0 3
52639: PPUSH
52640: CALL 5661 0 1
52644: GO 52681
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
52646: LD_VAR 0 3
52650: PPUSH
52651: CALL_OW 256
52655: PUSH
52656: LD_INT 250
52658: LESS
52659: PUSH
52660: LD_VAR 0 3
52664: PPUSH
52665: CALL_OW 312
52669: AND
52670: IFFALSE 52681
// ComUnlink ( j ) ;
52672: LD_VAR 0 3
52676: PPUSH
52677: CALL_OW 136
52681: GO 52605
52683: POP
52684: POP
// end ;
52685: GO 52555
52687: POP
52688: POP
// end ;
52689: LD_VAR 0 1
52693: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
52694: LD_INT 0
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
// if not mc_bases then
52701: LD_EXP 45
52705: NOT
52706: IFFALSE 52710
// exit ;
52708: GO 53077
// for i = 1 to mc_bases do
52710: LD_ADDR_VAR 0 2
52714: PUSH
52715: DOUBLE
52716: LD_INT 1
52718: DEC
52719: ST_TO_ADDR
52720: LD_EXP 45
52724: PUSH
52725: FOR_TO
52726: IFFALSE 53075
// begin if not mc_produce [ i ] then
52728: LD_EXP 62
52732: PUSH
52733: LD_VAR 0 2
52737: ARRAY
52738: NOT
52739: IFFALSE 52743
// continue ;
52741: GO 52725
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52743: LD_ADDR_VAR 0 5
52747: PUSH
52748: LD_EXP 45
52752: PUSH
52753: LD_VAR 0 2
52757: ARRAY
52758: PPUSH
52759: LD_INT 30
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PPUSH
52769: CALL_OW 72
52773: ST_TO_ADDR
// if not fac then
52774: LD_VAR 0 5
52778: NOT
52779: IFFALSE 52783
// continue ;
52781: GO 52725
// for j in fac do
52783: LD_ADDR_VAR 0 3
52787: PUSH
52788: LD_VAR 0 5
52792: PUSH
52793: FOR_IN
52794: IFFALSE 53071
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
52796: LD_VAR 0 3
52800: PPUSH
52801: CALL_OW 461
52805: PUSH
52806: LD_INT 2
52808: NONEQUAL
52809: PUSH
52810: LD_VAR 0 3
52814: PPUSH
52815: LD_INT 20
52817: PPUSH
52818: CALL 5352 0 2
52822: PUSH
52823: LD_INT 4
52825: ARRAY
52826: OR
52827: PUSH
52828: LD_VAR 0 3
52832: PPUSH
52833: CALL_OW 313
52837: PUSH
52838: LD_INT 0
52840: EQUAL
52841: OR
52842: IFFALSE 52846
// continue ;
52844: GO 52793
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
52846: LD_VAR 0 3
52850: PPUSH
52851: LD_EXP 62
52855: PUSH
52856: LD_VAR 0 2
52860: ARRAY
52861: PUSH
52862: LD_INT 1
52864: ARRAY
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PPUSH
52870: LD_EXP 62
52874: PUSH
52875: LD_VAR 0 2
52879: ARRAY
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PUSH
52885: LD_INT 2
52887: ARRAY
52888: PPUSH
52889: LD_EXP 62
52893: PUSH
52894: LD_VAR 0 2
52898: ARRAY
52899: PUSH
52900: LD_INT 1
52902: ARRAY
52903: PUSH
52904: LD_INT 3
52906: ARRAY
52907: PPUSH
52908: LD_EXP 62
52912: PUSH
52913: LD_VAR 0 2
52917: ARRAY
52918: PUSH
52919: LD_INT 1
52921: ARRAY
52922: PUSH
52923: LD_INT 4
52925: ARRAY
52926: PPUSH
52927: CALL_OW 448
52931: IFFALSE 53069
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
52933: LD_VAR 0 3
52937: PPUSH
52938: LD_EXP 62
52942: PUSH
52943: LD_VAR 0 2
52947: ARRAY
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PPUSH
52957: LD_EXP 62
52961: PUSH
52962: LD_VAR 0 2
52966: ARRAY
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PUSH
52972: LD_INT 2
52974: ARRAY
52975: PPUSH
52976: LD_EXP 62
52980: PUSH
52981: LD_VAR 0 2
52985: ARRAY
52986: PUSH
52987: LD_INT 1
52989: ARRAY
52990: PUSH
52991: LD_INT 3
52993: ARRAY
52994: PPUSH
52995: LD_EXP 62
52999: PUSH
53000: LD_VAR 0 2
53004: ARRAY
53005: PUSH
53006: LD_INT 1
53008: ARRAY
53009: PUSH
53010: LD_INT 4
53012: ARRAY
53013: PPUSH
53014: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
53018: LD_ADDR_VAR 0 4
53022: PUSH
53023: LD_EXP 62
53027: PUSH
53028: LD_VAR 0 2
53032: ARRAY
53033: PPUSH
53034: LD_INT 1
53036: PPUSH
53037: CALL_OW 3
53041: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
53042: LD_ADDR_EXP 62
53046: PUSH
53047: LD_EXP 62
53051: PPUSH
53052: LD_VAR 0 2
53056: PPUSH
53057: LD_VAR 0 4
53061: PPUSH
53062: CALL_OW 1
53066: ST_TO_ADDR
// break ;
53067: GO 53071
// end ; end ;
53069: GO 52793
53071: POP
53072: POP
// end ;
53073: GO 52725
53075: POP
53076: POP
// end ;
53077: LD_VAR 0 1
53081: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
53082: LD_INT 0
53084: PPUSH
53085: PPUSH
53086: PPUSH
// if not mc_bases then
53087: LD_EXP 45
53091: NOT
53092: IFFALSE 53096
// exit ;
53094: GO 53185
// for i = 1 to mc_bases do
53096: LD_ADDR_VAR 0 2
53100: PUSH
53101: DOUBLE
53102: LD_INT 1
53104: DEC
53105: ST_TO_ADDR
53106: LD_EXP 45
53110: PUSH
53111: FOR_TO
53112: IFFALSE 53183
// begin if mc_attack [ i ] then
53114: LD_EXP 61
53118: PUSH
53119: LD_VAR 0 2
53123: ARRAY
53124: IFFALSE 53181
// begin tmp := mc_attack [ i ] [ 1 ] ;
53126: LD_ADDR_VAR 0 3
53130: PUSH
53131: LD_EXP 61
53135: PUSH
53136: LD_VAR 0 2
53140: ARRAY
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53146: LD_ADDR_EXP 61
53150: PUSH
53151: LD_EXP 61
53155: PPUSH
53156: LD_VAR 0 2
53160: PPUSH
53161: EMPTY
53162: PPUSH
53163: CALL_OW 1
53167: ST_TO_ADDR
// Attack ( tmp ) ;
53168: LD_VAR 0 3
53172: PPUSH
53173: CALL 29364 0 1
// exit ;
53177: POP
53178: POP
53179: GO 53185
// end ; end ;
53181: GO 53111
53183: POP
53184: POP
// end ;
53185: LD_VAR 0 1
53189: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53190: LD_INT 0
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
// if not mc_bases then
53199: LD_EXP 45
53203: NOT
53204: IFFALSE 53208
// exit ;
53206: GO 53625
// for i = 1 to mc_bases do
53208: LD_ADDR_VAR 0 2
53212: PUSH
53213: DOUBLE
53214: LD_INT 1
53216: DEC
53217: ST_TO_ADDR
53218: LD_EXP 45
53222: PUSH
53223: FOR_TO
53224: IFFALSE 53623
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53226: LD_ADDR_EXP 64
53230: PUSH
53231: LD_EXP 64
53235: PPUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_EXP 45
53245: PUSH
53246: LD_VAR 0 2
53250: ARRAY
53251: PPUSH
53252: CALL 33148 0 1
53256: PPUSH
53257: CALL_OW 1
53261: ST_TO_ADDR
// if not mc_scan [ i ] then
53262: LD_EXP 64
53266: PUSH
53267: LD_VAR 0 2
53271: ARRAY
53272: NOT
53273: IFFALSE 53384
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53275: LD_ADDR_VAR 0 4
53279: PUSH
53280: LD_EXP 45
53284: PUSH
53285: LD_VAR 0 2
53289: ARRAY
53290: PPUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 25
53296: PUSH
53297: LD_INT 5
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 25
53306: PUSH
53307: LD_INT 8
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 25
53316: PUSH
53317: LD_INT 9
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: PPUSH
53330: CALL_OW 72
53334: ST_TO_ADDR
// if not tmp then
53335: LD_VAR 0 4
53339: NOT
53340: IFFALSE 53344
// continue ;
53342: GO 53223
// for j in tmp do
53344: LD_ADDR_VAR 0 3
53348: PUSH
53349: LD_VAR 0 4
53353: PUSH
53354: FOR_IN
53355: IFFALSE 53382
// if IsInUnit ( j ) then
53357: LD_VAR 0 3
53361: PPUSH
53362: CALL_OW 310
53366: IFFALSE 53380
// SetClass ( j , 1 ) ;
53368: LD_VAR 0 3
53372: PPUSH
53373: LD_INT 1
53375: PPUSH
53376: CALL_OW 336
53380: GO 53354
53382: POP
53383: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53384: LD_EXP 64
53388: PUSH
53389: LD_VAR 0 2
53393: ARRAY
53394: PUSH
53395: LD_EXP 63
53399: PUSH
53400: LD_VAR 0 2
53404: ARRAY
53405: AND
53406: IFFALSE 53621
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53408: LD_ADDR_VAR 0 7
53412: PUSH
53413: LD_EXP 63
53417: PUSH
53418: LD_INT 1
53420: ARRAY
53421: PPUSH
53422: CALL 33255 0 1
53426: ST_TO_ADDR
// if class then
53427: LD_VAR 0 7
53431: IFFALSE 53554
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53433: LD_ADDR_VAR 0 4
53437: PUSH
53438: LD_EXP 45
53442: PUSH
53443: LD_VAR 0 2
53447: ARRAY
53448: PPUSH
53449: LD_INT 30
53451: PUSH
53452: LD_INT 5
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PPUSH
53459: CALL_OW 72
53463: ST_TO_ADDR
// if tmp then
53464: LD_VAR 0 4
53468: IFFALSE 53554
// begin for j in tmp do
53470: LD_ADDR_VAR 0 3
53474: PUSH
53475: LD_VAR 0 4
53479: PUSH
53480: FOR_IN
53481: IFFALSE 53552
// begin t := UnitsInside ( j ) ;
53483: LD_ADDR_VAR 0 5
53487: PUSH
53488: LD_VAR 0 3
53492: PPUSH
53493: CALL_OW 313
53497: ST_TO_ADDR
// if not t then
53498: LD_VAR 0 5
53502: NOT
53503: IFFALSE 53507
// continue ;
53505: GO 53480
// for x in t do
53507: LD_ADDR_VAR 0 6
53511: PUSH
53512: LD_VAR 0 5
53516: PUSH
53517: FOR_IN
53518: IFFALSE 53548
// if not MineOfUnit ( x ) then
53520: LD_VAR 0 6
53524: PPUSH
53525: CALL_OW 459
53529: NOT
53530: IFFALSE 53546
// SetClass ( x , class ) ;
53532: LD_VAR 0 6
53536: PPUSH
53537: LD_VAR 0 7
53541: PPUSH
53542: CALL_OW 336
53546: GO 53517
53548: POP
53549: POP
// end ;
53550: GO 53480
53552: POP
53553: POP
// end ; end ; tmp := mc_defender [ i ] ;
53554: LD_ADDR_VAR 0 4
53558: PUSH
53559: LD_EXP 63
53563: PUSH
53564: LD_VAR 0 2
53568: ARRAY
53569: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53570: LD_ADDR_EXP 63
53574: PUSH
53575: LD_EXP 63
53579: PPUSH
53580: LD_VAR 0 2
53584: PPUSH
53585: EMPTY
53586: PPUSH
53587: CALL_OW 1
53591: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
53592: LD_VAR 0 2
53596: PPUSH
53597: LD_VAR 0 4
53601: PPUSH
53602: LD_EXP 64
53606: PUSH
53607: LD_VAR 0 2
53611: ARRAY
53612: PPUSH
53613: CALL 32601 0 3
// exit ;
53617: POP
53618: POP
53619: GO 53625
// end ; end ;
53621: GO 53223
53623: POP
53624: POP
// end ;
53625: LD_VAR 0 1
53629: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
53630: LD_INT 0
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
53636: LD_VAR 0 1
53640: NOT
53641: PUSH
53642: LD_VAR 0 2
53646: NOT
53647: OR
53648: PUSH
53649: LD_VAR 0 3
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: LD_INT 5
53668: PUSH
53669: LD_INT 8
53671: PUSH
53672: LD_INT 9
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: IN
53684: NOT
53685: OR
53686: PUSH
53687: LD_VAR 0 2
53691: PUSH
53692: LD_EXP 63
53696: PUSH
53697: LD_VAR 0 5
53701: ARRAY
53702: IN
53703: OR
53704: IFFALSE 53708
// exit ;
53706: GO 54120
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53708: LD_ADDR_VAR 0 1
53712: PUSH
53713: LD_VAR 0 1
53717: PPUSH
53718: LD_INT 21
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 24
53730: PUSH
53731: LD_INT 250
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PPUSH
53742: CALL_OW 72
53746: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
53747: LD_VAR 0 3
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 8
53757: PUSH
53758: LD_INT 9
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: IN
53766: IFFALSE 53776
// class := 1 ;
53768: LD_ADDR_VAR 0 3
53772: PUSH
53773: LD_INT 1
53775: ST_TO_ADDR
// case class of 1 :
53776: LD_VAR 0 3
53780: PUSH
53781: LD_INT 1
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53789
53787: GO 53835
53789: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
53790: LD_ADDR_VAR 0 7
53794: PUSH
53795: LD_VAR 0 1
53799: PPUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 30
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 30
53815: PUSH
53816: LD_INT 5
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: PPUSH
53828: CALL_OW 72
53832: ST_TO_ADDR
53833: GO 54009
53835: LD_INT 2
53837: DOUBLE
53838: EQUAL
53839: IFTRUE 53843
53841: GO 53889
53843: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53844: LD_ADDR_VAR 0 7
53848: PUSH
53849: LD_VAR 0 1
53853: PPUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 30
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 30
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: PPUSH
53882: CALL_OW 72
53886: ST_TO_ADDR
53887: GO 54009
53889: LD_INT 3
53891: DOUBLE
53892: EQUAL
53893: IFTRUE 53897
53895: GO 53943
53897: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53898: LD_ADDR_VAR 0 7
53902: PUSH
53903: LD_VAR 0 1
53907: PPUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 30
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 30
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: PPUSH
53936: CALL_OW 72
53940: ST_TO_ADDR
53941: GO 54009
53943: LD_INT 4
53945: DOUBLE
53946: EQUAL
53947: IFTRUE 53951
53949: GO 54008
53951: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
53952: LD_ADDR_VAR 0 7
53956: PUSH
53957: LD_VAR 0 1
53961: PPUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 30
53967: PUSH
53968: LD_INT 6
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 30
53977: PUSH
53978: LD_INT 7
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 30
53987: PUSH
53988: LD_INT 8
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: PPUSH
54001: CALL_OW 72
54005: ST_TO_ADDR
54006: GO 54009
54008: POP
// if not tmp then
54009: LD_VAR 0 7
54013: NOT
54014: IFFALSE 54018
// exit ;
54016: GO 54120
// for i in tmp do
54018: LD_ADDR_VAR 0 5
54022: PUSH
54023: LD_VAR 0 7
54027: PUSH
54028: FOR_IN
54029: IFFALSE 54098
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54031: LD_VAR 0 5
54035: PPUSH
54036: CALL_OW 313
54040: PUSH
54041: LD_INT 6
54043: LESS
54044: PUSH
54045: LD_VAR 0 5
54049: PPUSH
54050: CALL_OW 266
54054: PUSH
54055: LD_INT 31
54057: PUSH
54058: LD_INT 32
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: IN
54065: NOT
54066: AND
54067: PUSH
54068: LD_VAR 0 5
54072: PPUSH
54073: CALL_OW 313
54077: PUSH
54078: LD_INT 0
54080: EQUAL
54081: OR
54082: IFFALSE 54096
// begin j := i ;
54084: LD_ADDR_VAR 0 6
54088: PUSH
54089: LD_VAR 0 5
54093: ST_TO_ADDR
// break ;
54094: GO 54098
// end ; end ;
54096: GO 54028
54098: POP
54099: POP
// if j then
54100: LD_VAR 0 6
54104: IFFALSE 54120
// ComEnterUnit ( unit , j ) ;
54106: LD_VAR 0 2
54110: PPUSH
54111: LD_VAR 0 6
54115: PPUSH
54116: CALL_OW 120
// end ;
54120: LD_VAR 0 4
54124: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54125: LD_INT 0
54127: PPUSH
54128: PPUSH
54129: PPUSH
54130: PPUSH
// if not mc_bases then
54131: LD_EXP 45
54135: NOT
54136: IFFALSE 54140
// exit ;
54138: GO 54369
// for i = 1 to mc_bases do
54140: LD_ADDR_VAR 0 2
54144: PUSH
54145: DOUBLE
54146: LD_INT 1
54148: DEC
54149: ST_TO_ADDR
54150: LD_EXP 45
54154: PUSH
54155: FOR_TO
54156: IFFALSE 54367
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54158: LD_ADDR_VAR 0 4
54162: PUSH
54163: LD_EXP 45
54167: PUSH
54168: LD_VAR 0 2
54172: ARRAY
54173: PPUSH
54174: LD_INT 21
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 72
54188: ST_TO_ADDR
// if not tmp then
54189: LD_VAR 0 4
54193: NOT
54194: IFFALSE 54200
// exit ;
54196: POP
54197: POP
54198: GO 54369
// for j in tmp do
54200: LD_ADDR_VAR 0 3
54204: PUSH
54205: LD_VAR 0 4
54209: PUSH
54210: FOR_IN
54211: IFFALSE 54363
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54213: LD_VAR 0 3
54217: PPUSH
54218: CALL_OW 257
54222: PUSH
54223: LD_INT 3
54225: EQUAL
54226: PUSH
54227: LD_EXP 64
54231: PUSH
54232: LD_VAR 0 2
54236: ARRAY
54237: AND
54238: IFFALSE 54242
// continue ;
54240: GO 54210
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54242: LD_VAR 0 3
54246: PPUSH
54247: CALL_OW 110
54251: NOT
54252: PUSH
54253: LD_VAR 0 3
54257: PPUSH
54258: CALL_OW 314
54262: NOT
54263: AND
54264: PUSH
54265: LD_VAR 0 3
54269: PPUSH
54270: CALL_OW 310
54274: NOT
54275: AND
54276: PUSH
54277: LD_EXP 48
54281: PUSH
54282: LD_VAR 0 2
54286: ARRAY
54287: PUSH
54288: LD_INT 1
54290: ARRAY
54291: NOT
54292: AND
54293: PUSH
54294: LD_EXP 48
54298: PUSH
54299: LD_VAR 0 2
54303: ARRAY
54304: PUSH
54305: LD_INT 2
54307: ARRAY
54308: NOT
54309: AND
54310: PUSH
54311: LD_VAR 0 3
54315: PUSH
54316: LD_EXP 54
54320: PUSH
54321: LD_VAR 0 2
54325: ARRAY
54326: IN
54327: NOT
54328: AND
54329: IFFALSE 54361
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54331: LD_EXP 45
54335: PUSH
54336: LD_VAR 0 2
54340: ARRAY
54341: PPUSH
54342: LD_VAR 0 3
54346: PPUSH
54347: LD_VAR 0 3
54351: PPUSH
54352: CALL_OW 257
54356: PPUSH
54357: CALL 53630 0 3
// end ;
54361: GO 54210
54363: POP
54364: POP
// end ;
54365: GO 54155
54367: POP
54368: POP
// end ;
54369: LD_VAR 0 1
54373: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54374: LD_INT 0
54376: PPUSH
54377: PPUSH
54378: PPUSH
54379: PPUSH
54380: PPUSH
54381: PPUSH
// if not mc_bases [ base ] then
54382: LD_EXP 45
54386: PUSH
54387: LD_VAR 0 1
54391: ARRAY
54392: NOT
54393: IFFALSE 54397
// exit ;
54395: GO 54557
// tmp := [ ] ;
54397: LD_ADDR_VAR 0 6
54401: PUSH
54402: EMPTY
54403: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54404: LD_ADDR_VAR 0 7
54408: PUSH
54409: LD_VAR 0 3
54413: PPUSH
54414: LD_INT 0
54416: PPUSH
54417: CALL_OW 517
54421: ST_TO_ADDR
// if not list then
54422: LD_VAR 0 7
54426: NOT
54427: IFFALSE 54431
// exit ;
54429: GO 54557
// for i = 1 to amount do
54431: LD_ADDR_VAR 0 5
54435: PUSH
54436: DOUBLE
54437: LD_INT 1
54439: DEC
54440: ST_TO_ADDR
54441: LD_VAR 0 2
54445: PUSH
54446: FOR_TO
54447: IFFALSE 54505
// tmp := Replace ( tmp , i , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54449: LD_ADDR_VAR 0 6
54453: PUSH
54454: LD_VAR 0 6
54458: PPUSH
54459: LD_VAR 0 5
54463: PPUSH
54464: LD_VAR 0 7
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PUSH
54473: LD_VAR 0 5
54477: ARRAY
54478: PUSH
54479: LD_VAR 0 7
54483: PUSH
54484: LD_INT 2
54486: ARRAY
54487: PUSH
54488: LD_VAR 0 5
54492: ARRAY
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PPUSH
54498: CALL_OW 1
54502: ST_TO_ADDR
54503: GO 54446
54505: POP
54506: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54507: LD_ADDR_EXP 55
54511: PUSH
54512: LD_EXP 55
54516: PPUSH
54517: LD_VAR 0 1
54521: PPUSH
54522: LD_VAR 0 6
54526: PPUSH
54527: CALL_OW 1
54531: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
54532: LD_ADDR_EXP 57
54536: PUSH
54537: LD_EXP 57
54541: PPUSH
54542: LD_VAR 0 1
54546: PPUSH
54547: LD_VAR 0 3
54551: PPUSH
54552: CALL_OW 1
54556: ST_TO_ADDR
// end ;
54557: LD_VAR 0 4
54561: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
54562: LD_INT 0
54564: PPUSH
// if not mc_bases [ base ] then
54565: LD_EXP 45
54569: PUSH
54570: LD_VAR 0 1
54574: ARRAY
54575: NOT
54576: IFFALSE 54580
// exit ;
54578: GO 54605
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
54580: LD_ADDR_EXP 62
54584: PUSH
54585: LD_EXP 62
54589: PPUSH
54590: LD_VAR 0 1
54594: PPUSH
54595: LD_VAR 0 2
54599: PPUSH
54600: CALL_OW 1
54604: ST_TO_ADDR
// end ;
54605: LD_VAR 0 3
54609: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
54610: LD_INT 0
54612: PPUSH
// if not mc_bases [ base ] then
54613: LD_EXP 45
54617: PUSH
54618: LD_VAR 0 1
54622: ARRAY
54623: NOT
54624: IFFALSE 54628
// exit ;
54626: GO 54653
// mc_defender := Replace ( mc_defender , base , deflist ) ;
54628: LD_ADDR_EXP 63
54632: PUSH
54633: LD_EXP 63
54637: PPUSH
54638: LD_VAR 0 1
54642: PPUSH
54643: LD_VAR 0 2
54647: PPUSH
54648: CALL_OW 1
54652: ST_TO_ADDR
// end ;
54653: LD_VAR 0 3
54657: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
54658: LD_INT 0
54660: PPUSH
54661: PPUSH
54662: PPUSH
54663: PPUSH
// if not mc_bases [ base ] then
54664: LD_EXP 45
54668: PUSH
54669: LD_VAR 0 1
54673: ARRAY
54674: NOT
54675: IFFALSE 54679
// exit ;
54677: GO 54744
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
54679: LD_ADDR_EXP 61
54683: PUSH
54684: LD_EXP 61
54688: PPUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_EXP 61
54698: PUSH
54699: LD_VAR 0 1
54703: ARRAY
54704: PUSH
54705: LD_INT 1
54707: PLUS
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PPUSH
54713: LD_VAR 0 1
54717: PUSH
54718: LD_VAR 0 2
54722: PUSH
54723: LD_VAR 0 3
54727: PUSH
54728: LD_VAR 0 4
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: PPUSH
54739: CALL 3179 0 3
54743: ST_TO_ADDR
// end ;
54744: LD_VAR 0 5
54748: RET
// export function MC_GetMinesField ( base ) ; begin
54749: LD_INT 0
54751: PPUSH
// result := mc_mines [ base ] ;
54752: LD_ADDR_VAR 0 2
54756: PUSH
54757: LD_EXP 55
54761: PUSH
54762: LD_VAR 0 1
54766: ARRAY
54767: ST_TO_ADDR
// end ;
54768: LD_VAR 0 2
54772: RET
// export function MC_GetProduceList ( base ) ; begin
54773: LD_INT 0
54775: PPUSH
// result := mc_produce [ base ] ;
54776: LD_ADDR_VAR 0 2
54780: PUSH
54781: LD_EXP 62
54785: PUSH
54786: LD_VAR 0 1
54790: ARRAY
54791: ST_TO_ADDR
// end ; end_of_file
54792: LD_VAR 0 2
54796: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
54797: LD_VAR 0 1
54801: PPUSH
54802: CALL_OW 255
54806: PUSH
54807: LD_INT 1
54809: EQUAL
54810: IFFALSE 54820
// artifact_get := true ;
54812: LD_ADDR_EXP 12
54816: PUSH
54817: LD_INT 1
54819: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 255
54829: PUSH
54830: LD_INT 2
54832: EQUAL
54833: IFFALSE 54851
// begin artifact_get := false ;
54835: LD_ADDR_EXP 12
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// artifact_stolen := true ;
54843: LD_ADDR_EXP 11
54847: PUSH
54848: LD_INT 1
54850: ST_TO_ADDR
// end ; artifact_oncargo := true ;
54851: LD_ADDR_EXP 13
54855: PUSH
54856: LD_INT 1
54858: ST_TO_ADDR
// end ;
54859: PPOPN 2
54861: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
54862: LD_ADDR_EXP 13
54866: PUSH
54867: LD_INT 0
54869: ST_TO_ADDR
// end ;
54870: PPOPN 2
54872: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
54873: LD_INT 0
54875: PPUSH
54876: PPUSH
54877: PPUSH
54878: PPUSH
54879: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
54880: LD_VAR 0 1
54884: PUSH
54885: LD_INT 22
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 21
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 25
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 25
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 25
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 25
54940: PUSH
54941: LD_INT 4
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 25
54950: PUSH
54951: LD_INT 5
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 25
54960: PUSH
54961: LD_INT 8
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: PPUSH
54982: CALL_OW 69
54986: IN
54987: IFFALSE 55003
// loses_counter := loses_counter + 1 ;
54989: LD_ADDR_EXP 16
54993: PUSH
54994: LD_EXP 16
54998: PUSH
54999: LD_INT 1
55001: PLUS
55002: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
55003: LD_VAR 0 1
55007: PUSH
55008: LD_INT 21
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PPUSH
55018: CALL_OW 69
55022: IN
55023: IFFALSE 55539
// begin if not mc_bases then
55025: LD_EXP 45
55029: NOT
55030: IFFALSE 55034
// exit ;
55032: GO 55539
// pos := mc_build_list [ i ] + 1 ;
55034: LD_ADDR_VAR 0 5
55038: PUSH
55039: LD_EXP 50
55043: PUSH
55044: LD_VAR 0 2
55048: ARRAY
55049: PUSH
55050: LD_INT 1
55052: PLUS
55053: ST_TO_ADDR
// btype := GetBType ( un ) ;
55054: LD_ADDR_VAR 0 4
55058: PUSH
55059: LD_VAR 0 1
55063: PPUSH
55064: CALL_OW 266
55068: ST_TO_ADDR
// if btype = b_warehouse then
55069: LD_VAR 0 4
55073: PUSH
55074: LD_INT 1
55076: EQUAL
55077: IFFALSE 55095
// begin btype := b_depot ;
55079: LD_ADDR_VAR 0 4
55083: PUSH
55084: LD_INT 0
55086: ST_TO_ADDR
// pos := 1 ;
55087: LD_ADDR_VAR 0 5
55091: PUSH
55092: LD_INT 1
55094: ST_TO_ADDR
// end ; if btype = b_factory then
55095: LD_VAR 0 4
55099: PUSH
55100: LD_INT 3
55102: EQUAL
55103: IFFALSE 55121
// begin btype := b_workshop ;
55105: LD_ADDR_VAR 0 4
55109: PUSH
55110: LD_INT 2
55112: ST_TO_ADDR
// pos := 1 ;
55113: LD_ADDR_VAR 0 5
55117: PUSH
55118: LD_INT 1
55120: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55121: LD_VAR 0 4
55125: PUSH
55126: LD_INT 7
55128: PUSH
55129: LD_INT 8
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: IN
55136: IFFALSE 55146
// btype := b_lab ;
55138: LD_ADDR_VAR 0 4
55142: PUSH
55143: LD_INT 6
55145: ST_TO_ADDR
// for i = 1 to mc_bases do
55146: LD_ADDR_VAR 0 2
55150: PUSH
55151: DOUBLE
55152: LD_INT 1
55154: DEC
55155: ST_TO_ADDR
55156: LD_EXP 45
55160: PUSH
55161: FOR_TO
55162: IFFALSE 55537
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55164: LD_VAR 0 1
55168: PUSH
55169: LD_EXP 45
55173: PUSH
55174: LD_VAR 0 2
55178: ARRAY
55179: IN
55180: PUSH
55181: LD_VAR 0 1
55185: PUSH
55186: LD_EXP 52
55190: PUSH
55191: LD_VAR 0 2
55195: ARRAY
55196: IN
55197: OR
55198: IFFALSE 55535
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55200: LD_ADDR_EXP 50
55204: PUSH
55205: LD_EXP 50
55209: PPUSH
55210: LD_VAR 0 2
55214: PUSH
55215: LD_EXP 50
55219: PUSH
55220: LD_VAR 0 2
55224: ARRAY
55225: PUSH
55226: LD_INT 1
55228: PLUS
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PPUSH
55234: LD_VAR 0 4
55238: PUSH
55239: LD_VAR 0 1
55243: PPUSH
55244: CALL_OW 250
55248: PUSH
55249: LD_VAR 0 1
55253: PPUSH
55254: CALL_OW 251
55258: PUSH
55259: LD_VAR 0 1
55263: PPUSH
55264: CALL_OW 254
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: PPUSH
55275: CALL 3179 0 3
55279: ST_TO_ADDR
// if pos = 1 then
55280: LD_VAR 0 5
55284: PUSH
55285: LD_INT 1
55287: EQUAL
55288: IFFALSE 55403
// begin tmp := mc_build_list [ i ] ;
55290: LD_ADDR_VAR 0 6
55294: PUSH
55295: LD_EXP 50
55299: PUSH
55300: LD_VAR 0 2
55304: ARRAY
55305: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55306: LD_VAR 0 6
55310: PPUSH
55311: LD_INT 2
55313: PUSH
55314: LD_INT 30
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 30
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: PPUSH
55339: CALL_OW 72
55343: IFFALSE 55353
// pos := 2 ;
55345: LD_ADDR_VAR 0 5
55349: PUSH
55350: LD_INT 2
55352: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55353: LD_ADDR_VAR 0 6
55357: PUSH
55358: LD_VAR 0 6
55362: PPUSH
55363: LD_VAR 0 5
55367: PPUSH
55368: LD_VAR 0 6
55372: PPUSH
55373: CALL 3070 0 3
55377: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55378: LD_ADDR_EXP 50
55382: PUSH
55383: LD_EXP 50
55387: PPUSH
55388: LD_VAR 0 2
55392: PPUSH
55393: LD_VAR 0 6
55397: PPUSH
55398: CALL_OW 1
55402: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55403: LD_VAR 0 1
55407: PUSH
55408: LD_EXP 45
55412: PUSH
55413: LD_VAR 0 2
55417: ARRAY
55418: IN
55419: IFFALSE 55468
// begin tmp := mc_bases [ i ] diff un ;
55421: LD_ADDR_VAR 0 6
55425: PUSH
55426: LD_EXP 45
55430: PUSH
55431: LD_VAR 0 2
55435: ARRAY
55436: PUSH
55437: LD_VAR 0 1
55441: DIFF
55442: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55443: LD_ADDR_EXP 45
55447: PUSH
55448: LD_EXP 45
55452: PPUSH
55453: LD_VAR 0 2
55457: PPUSH
55458: LD_VAR 0 6
55462: PPUSH
55463: CALL_OW 1
55467: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55468: LD_VAR 0 1
55472: PUSH
55473: LD_EXP 52
55477: PUSH
55478: LD_VAR 0 2
55482: ARRAY
55483: IN
55484: IFFALSE 55533
// begin tmp := mc_construct_list [ i ] diff un ;
55486: LD_ADDR_VAR 0 6
55490: PUSH
55491: LD_EXP 52
55495: PUSH
55496: LD_VAR 0 2
55500: ARRAY
55501: PUSH
55502: LD_VAR 0 1
55506: DIFF
55507: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55508: LD_ADDR_EXP 52
55512: PUSH
55513: LD_EXP 52
55517: PPUSH
55518: LD_VAR 0 2
55522: PPUSH
55523: LD_VAR 0 6
55527: PPUSH
55528: CALL_OW 1
55532: ST_TO_ADDR
// end ; break ;
55533: GO 55537
// end ;
55535: GO 55161
55537: POP
55538: POP
// end ; end ;
55539: PPOPN 6
55541: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
55542: LD_INT 0
55544: PPUSH
55545: PPUSH
55546: PPUSH
55547: PPUSH
55548: PPUSH
55549: PPUSH
55550: PPUSH
// begin if not mc_bases then
55551: LD_EXP 45
55555: NOT
55556: IFFALSE 55560
// exit ;
55558: GO 55801
// btype := GetBType ( building ) ;
55560: LD_ADDR_VAR 0 6
55564: PUSH
55565: LD_VAR 0 1
55569: PPUSH
55570: CALL_OW 266
55574: ST_TO_ADDR
// x := GetX ( building ) ;
55575: LD_ADDR_VAR 0 7
55579: PUSH
55580: LD_VAR 0 1
55584: PPUSH
55585: CALL_OW 250
55589: ST_TO_ADDR
// y := GetY ( building ) ;
55590: LD_ADDR_VAR 0 8
55594: PUSH
55595: LD_VAR 0 1
55599: PPUSH
55600: CALL_OW 251
55604: ST_TO_ADDR
// d := GetDir ( building ) ;
55605: LD_ADDR_VAR 0 9
55609: PUSH
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 254
55619: ST_TO_ADDR
// for i = 1 to mc_bases do
55620: LD_ADDR_VAR 0 3
55624: PUSH
55625: DOUBLE
55626: LD_INT 1
55628: DEC
55629: ST_TO_ADDR
55630: LD_EXP 45
55634: PUSH
55635: FOR_TO
55636: IFFALSE 55799
// begin if not mc_build_list [ i ] then
55638: LD_EXP 50
55642: PUSH
55643: LD_VAR 0 3
55647: ARRAY
55648: NOT
55649: IFFALSE 55653
// continue ;
55651: GO 55635
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55653: LD_VAR 0 6
55657: PUSH
55658: LD_VAR 0 7
55662: PUSH
55663: LD_VAR 0 8
55667: PUSH
55668: LD_VAR 0 9
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: PPUSH
55679: LD_EXP 50
55683: PUSH
55684: LD_VAR 0 3
55688: ARRAY
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PPUSH
55694: CALL 8474 0 2
55698: IFFALSE 55797
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
55700: LD_ADDR_VAR 0 5
55704: PUSH
55705: LD_EXP 50
55709: PUSH
55710: LD_VAR 0 3
55714: ARRAY
55715: PPUSH
55716: LD_INT 1
55718: PPUSH
55719: CALL_OW 3
55723: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55724: LD_ADDR_EXP 50
55728: PUSH
55729: LD_EXP 50
55733: PPUSH
55734: LD_VAR 0 3
55738: PPUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: CALL_OW 1
55748: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55749: LD_ADDR_EXP 52
55753: PUSH
55754: LD_EXP 52
55758: PPUSH
55759: LD_VAR 0 3
55763: PUSH
55764: LD_EXP 52
55768: PUSH
55769: LD_VAR 0 3
55773: ARRAY
55774: PUSH
55775: LD_INT 1
55777: PLUS
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PPUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL 3179 0 3
55792: ST_TO_ADDR
// exit ;
55793: POP
55794: POP
55795: GO 55801
// end ; end ;
55797: GO 55635
55799: POP
55800: POP
// end ;
55801: PPOPN 9
55803: END
// on BuildingComplete ( building ) do var i , j , tmp ;
55804: LD_INT 0
55806: PPUSH
55807: PPUSH
55808: PPUSH
// begin if not mc_bases then
55809: LD_EXP 45
55813: NOT
55814: IFFALSE 55818
// exit ;
55816: GO 56019
// for i = 1 to mc_bases do
55818: LD_ADDR_VAR 0 2
55822: PUSH
55823: DOUBLE
55824: LD_INT 1
55826: DEC
55827: ST_TO_ADDR
55828: LD_EXP 45
55832: PUSH
55833: FOR_TO
55834: IFFALSE 56017
// begin if building in mc_construct_list [ i ] then
55836: LD_VAR 0 1
55840: PUSH
55841: LD_EXP 52
55845: PUSH
55846: LD_VAR 0 2
55850: ARRAY
55851: IN
55852: IFFALSE 56015
// begin tmp := mc_construct_list [ i ] diff building ;
55854: LD_ADDR_VAR 0 4
55858: PUSH
55859: LD_EXP 52
55863: PUSH
55864: LD_VAR 0 2
55868: ARRAY
55869: PUSH
55870: LD_VAR 0 1
55874: DIFF
55875: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55876: LD_ADDR_EXP 52
55880: PUSH
55881: LD_EXP 52
55885: PPUSH
55886: LD_VAR 0 2
55890: PPUSH
55891: LD_VAR 0 4
55895: PPUSH
55896: CALL_OW 1
55900: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55901: LD_ADDR_EXP 45
55905: PUSH
55906: LD_EXP 45
55910: PPUSH
55911: LD_VAR 0 2
55915: PUSH
55916: LD_EXP 45
55920: PUSH
55921: LD_VAR 0 2
55925: ARRAY
55926: PUSH
55927: LD_INT 1
55929: PLUS
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PPUSH
55935: LD_VAR 0 1
55939: PPUSH
55940: CALL 3179 0 3
55944: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
55945: LD_VAR 0 1
55949: PPUSH
55950: CALL_OW 266
55954: PUSH
55955: LD_INT 32
55957: PUSH
55958: LD_INT 33
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: IN
55965: IFFALSE 56011
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55967: LD_ADDR_EXP 53
55971: PUSH
55972: LD_EXP 53
55976: PPUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_EXP 53
55986: PUSH
55987: LD_VAR 0 2
55991: ARRAY
55992: PUSH
55993: LD_INT 1
55995: PLUS
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PPUSH
56001: LD_VAR 0 1
56005: PPUSH
56006: CALL 3179 0 3
56010: ST_TO_ADDR
// exit ;
56011: POP
56012: POP
56013: GO 56019
// end ; end ;
56015: GO 55833
56017: POP
56018: POP
// end ;
56019: PPOPN 4
56021: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56022: LD_INT 0
56024: PPUSH
56025: PPUSH
// begin if not mc_bases then
56026: LD_EXP 45
56030: NOT
56031: IFFALSE 56035
// exit ;
56033: GO 56250
// repeat wait ( 0 0$1 ) ;
56035: LD_INT 35
56037: PPUSH
56038: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56042: LD_VAR 0 2
56046: PPUSH
56047: LD_VAR 0 3
56051: PPUSH
56052: CALL_OW 284
56056: IFFALSE 56035
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56058: LD_VAR 0 2
56062: PPUSH
56063: LD_VAR 0 3
56067: PPUSH
56068: CALL_OW 283
56072: PUSH
56073: LD_INT 4
56075: EQUAL
56076: IFFALSE 56080
// exit ;
56078: GO 56250
// for i = 1 to mc_bases do
56080: LD_ADDR_VAR 0 6
56084: PUSH
56085: DOUBLE
56086: LD_INT 1
56088: DEC
56089: ST_TO_ADDR
56090: LD_EXP 45
56094: PUSH
56095: FOR_TO
56096: IFFALSE 56248
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56098: LD_ADDR_VAR 0 7
56102: PUSH
56103: LD_EXP 45
56107: PUSH
56108: LD_VAR 0 6
56112: ARRAY
56113: PPUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 30
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 30
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: PPUSH
56142: CALL_OW 72
56146: ST_TO_ADDR
// if not depot then
56147: LD_VAR 0 7
56151: NOT
56152: IFFALSE 56156
// continue ;
56154: GO 56095
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56156: LD_VAR 0 7
56160: PUSH
56161: LD_INT 1
56163: ARRAY
56164: PPUSH
56165: LD_VAR 0 2
56169: PPUSH
56170: LD_VAR 0 3
56174: PPUSH
56175: CALL_OW 297
56179: PUSH
56180: LD_INT 30
56182: LESS
56183: IFFALSE 56246
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56185: LD_ADDR_EXP 58
56189: PUSH
56190: LD_EXP 58
56194: PPUSH
56195: LD_VAR 0 6
56199: PUSH
56200: LD_EXP 58
56204: PUSH
56205: LD_VAR 0 6
56209: ARRAY
56210: PUSH
56211: LD_INT 1
56213: PLUS
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PPUSH
56219: LD_VAR 0 4
56223: PUSH
56224: LD_VAR 0 2
56228: PUSH
56229: LD_VAR 0 3
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: PPUSH
56239: CALL 3179 0 3
56243: ST_TO_ADDR
// break ;
56244: GO 56248
// end ; end ;
56246: GO 56095
56248: POP
56249: POP
// end ;
56250: PPOPN 7
56252: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56253: LD_INT 0
56255: PPUSH
56256: PPUSH
// begin if not mc_bases then
56257: LD_EXP 45
56261: NOT
56262: IFFALSE 56266
// exit ;
56264: GO 56354
// for i = 1 to mc_bases do
56266: LD_ADDR_VAR 0 3
56270: PUSH
56271: DOUBLE
56272: LD_INT 1
56274: DEC
56275: ST_TO_ADDR
56276: LD_EXP 45
56280: PUSH
56281: FOR_TO
56282: IFFALSE 56352
// begin if factory in mc_bases [ i ] then
56284: LD_VAR 0 2
56288: PUSH
56289: LD_EXP 45
56293: PUSH
56294: LD_VAR 0 3
56298: ARRAY
56299: IN
56300: IFFALSE 56350
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56302: LD_ADDR_EXP 60
56306: PUSH
56307: LD_EXP 60
56311: PPUSH
56312: LD_VAR 0 3
56316: PUSH
56317: LD_EXP 60
56321: PUSH
56322: LD_VAR 0 3
56326: ARRAY
56327: PUSH
56328: LD_INT 1
56330: PLUS
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PPUSH
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL 3179 0 3
56345: ST_TO_ADDR
// exit ;
56346: POP
56347: POP
56348: GO 56354
// end ; end ;
56350: GO 56281
56352: POP
56353: POP
// end ;
56354: PPOPN 4
56356: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56357: LD_VAR 0 1
56361: PPUSH
56362: CALL_OW 247
56366: PUSH
56367: LD_INT 2
56369: EQUAL
56370: IFFALSE 56374
// exit ;
56372: GO 56391
// if not kamikazed then
56374: LD_EXP 10
56378: NOT
56379: IFFALSE 56391
// kamikazed := unit ;
56381: LD_ADDR_EXP 10
56385: PUSH
56386: LD_VAR 0 1
56390: ST_TO_ADDR
// end ; end_of_file
56391: PPOPN 1
56393: END
// every 0 0$1 trigger game do
56394: LD_EXP 2
56398: IFFALSE 56428
56400: GO 56402
56402: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
56403: LD_INT 7
56405: PUSH
56406: LD_INT 6
56408: PUSH
56409: LD_INT 4
56411: PUSH
56412: LD_INT 6
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: PPUSH
56421: LD_INT 1750
56423: PPUSH
56424: CALL 56429 0 2
56428: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
56429: LD_INT 0
56431: PPUSH
56432: PPUSH
56433: PPUSH
// if not areas then
56434: LD_VAR 0 1
56438: NOT
56439: IFFALSE 56443
// exit ;
56441: GO 56555
// repeat wait ( time ) ;
56443: LD_VAR 0 2
56447: PPUSH
56448: CALL_OW 67
// p := rand ( 1 , 90 ) ;
56452: LD_ADDR_VAR 0 5
56456: PUSH
56457: LD_INT 1
56459: PPUSH
56460: LD_INT 90
56462: PPUSH
56463: CALL_OW 12
56467: ST_TO_ADDR
// for i in areas do
56468: LD_ADDR_VAR 0 4
56472: PUSH
56473: LD_VAR 0 1
56477: PUSH
56478: FOR_IN
56479: IFFALSE 56532
// begin if Prob ( p ) then
56481: LD_VAR 0 5
56485: PPUSH
56486: CALL_OW 13
56490: IFFALSE 56530
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
56492: LD_INT 1
56494: PPUSH
56495: LD_INT 5
56497: PPUSH
56498: CALL_OW 12
56502: PPUSH
56503: LD_VAR 0 4
56507: PPUSH
56508: LD_INT 1
56510: PPUSH
56511: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
56515: LD_INT 455
56517: PPUSH
56518: LD_INT 595
56520: PPUSH
56521: CALL_OW 12
56525: PPUSH
56526: CALL_OW 67
// end ; end ;
56530: GO 56478
56532: POP
56533: POP
// time := time + 0 0$3 ;
56534: LD_ADDR_VAR 0 2
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_INT 105
56546: PLUS
56547: ST_TO_ADDR
// until not game ;
56548: LD_EXP 2
56552: NOT
56553: IFFALSE 56443
// end ;
56555: LD_VAR 0 3
56559: RET
